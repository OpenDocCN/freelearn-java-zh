- en: Chapter 6. JSON Processing with JSON-P
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 JSON-P处理
- en: '**JSON**, or the **JavaScript Object Notation**, is a human-readable data interchange
    format. As its name implies, JSON is derived from JavaScript. Java EE 7 introduced
    JSON-P, the Java API for JSON Processing as **Java Specification Request** (**JSR**)
    353.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON**，或称**JavaScript Object Notation**，是一种人类可读的数据交换格式。正如其名所示，JSON源自JavaScript。Java
    EE 7引入了JSON-P，即Java API for JSON Processing作为**Java Specification Request**（JSR）353。'
- en: Traditionally, XML has been the format of choice for data interchange between
    disparate systems. While XML is undoubtedly very popular, JSON has been gaining
    ground in recent years as an arguably simpler format for data exchange. Several
    Java libraries exist for parsing and generating JSON data from Java code. Java
    EE standardized this functionality via the Java API for JSON Processing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，XML一直是不同系统之间数据交换的首选格式。虽然XML无疑非常流行，但近年来，JSON作为一种可能更简单的数据交换格式，其地位正在上升。存在几个Java库可以从Java代码中解析和生成JSON数据。Java
    EE通过Java API for JSON Processing（JSON-P）标准化了这一功能。
- en: JSON-P includes two APIs for processing JSON—the Model API and the Streaming
    API; both of these APIs will be covered in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-P包括两个用于处理JSON的API——Model API和Streaming API；这两个API将在本章中介绍。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: The JSON-P Model API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON-P模型API
- en: Generating JSON data with the Model API
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Model API生成JSON数据
- en: Parsing JSON data with the Model API
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Model API解析JSON数据
- en: The JSON-P Streaming API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON-P流式API
- en: Generating JSON data with the Streaming API
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流式API生成JSON数据
- en: Parsing JSON data with the Streaming API
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流式API解析JSON数据
- en: The JSON-P Model API
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON-P模型API
- en: The JSON-P Model API allows us to generate a preloaded, fully traversable, in-memory
    representation of a JSON object. This API is more flexible than the Streaming
    API discussed in the *The JSON-P Streaming API* section. However, the JSON-P Model
    API is slower and requires more memory, which can be a concern when handling large
    volumes of data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-P模型API允许我们生成一个预加载的、完全可遍历的、内存中的JSON对象表示。与本章中讨论的流式API相比，此API更灵活。然而，JSON-P模型API较慢且需要更多内存，这在处理大量数据时可能成为问题。
- en: Generating JSON data with the Model API
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Model API生成JSON数据
- en: At the heart of the JSON-P Model API is the `JsonObjectBuilder` class. This
    class has several overloaded `add()` methods that can be used to add properties
    and their corresponding values to the generated JSON data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-P模型API的核心是`JsonObjectBuilder`类。此类有几个重载的`add()`方法，可用于向生成的JSON数据添加属性及其对应值。
- en: 'The following code sample illustrates how to generate JSON data using the Model
    API:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例说明了如何使用Model API生成JSON数据：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Our example is a CDI named bean that corresponds to a larger JSF application;
    the other parts of the application are not shown since they are not relevant to
    the discussion. The complete sample application is included as part of this book's
    example code download.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的例子是一个CDI命名bean，对应于一个更大的JSF应用程序；应用程序的其他部分没有显示，因为它们与讨论无关。完整的示例应用程序包含在本书的示例代码下载中。
- en: As can be seen in the previous example, we generate an instance of `JsonObject`
    by invoking the `add()` method on `JsonObjectBuilder`. In our example, we see
    how we can add `String` values to our `JsonObject` by invoking the `add()` method
    on `JsonObjectBuilder`. The first parameter of the `add()` method is the property
    name of the generated JSON object, and the second parameter corresponds to the
    value of the said property. The return value of the `add()` method is another
    instance of `JsonObjectBuilder`; therefore, invocations to the `add()` method
    can be chained as shown in the example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们通过在`JsonObjectBuilder`上调用`add()`方法来生成一个`JsonObject`实例。在我们的例子中，我们看到如何通过在`JsonObjectBuilder`上调用`add()`方法将`String`值添加到我们的`JsonObject`中。`add()`方法的第一参数是生成的JSON对象属性名，第二个参数对应于该属性的值。`add()`方法的返回值是另一个`JsonObjectBuilder`实例；因此，可以对`add()`方法进行链式调用，如示例所示。
- en: Once we have added all the desired properties, we need to invoke the `build()`
    method of `JsonObjectBuilder`, which returns an instance of a class implementing
    the `JsonObject` interface.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了所有所需的属性，我们需要调用`JsonObjectBuilder`的`build()`方法，该方法返回实现`JsonObject`接口的类的实例。
- en: In many cases, we may want to generate a `String` representation of the JSON
    object we created so that it can be processed by another process or service. We
    can do this by creating an instance of a class implementing the `JsonWriter` interface;
    invoking the static `createWriter()` method of the `Json` class, and passing an
    instance of `StringWriter` as its sole parameter. Once we have an instance of
    the `JsonWriter` implementation, we need to invoke its `writeObject()` method,
    passing our `JsonObject` instance as its sole parameter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们可能希望生成我们创建的 JSON 对象的字符串表示形式，以便它可以被其他进程或服务处理。我们可以通过创建一个实现 `JsonWriter`
    接口的类的实例；调用 `Json` 类的静态 `createWriter()` 方法，并将 `StringWriter` 的实例作为其唯一参数传递。一旦我们有了
    `JsonWriter` 实现的实例，我们需要调用其 `writeObject()` 方法，并将我们的 `JsonObject` 实例作为其唯一参数传递。
- en: At this point, our `StringWriter` instance will have the `String` representation
    of our JSON object as its value. So, invoking its `toString()` method will return
    a `String` value containing our JSON object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的 `StringWriter` 实例将包含我们 JSON 对象的字符串表示形式作为其值。因此，调用其 `toString()` 方法将返回一个包含我们的
    JSON 对象的字符串值。
- en: 'Our specific example will generate a JSON string that looks as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的特定示例将生成如下外观的 JSON 字符串：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although we added only `String` objects to our JSON object in our example, we
    are not limited to this type of value. `JsonObjectBuilder` has several overloaded
    versions of its `add()` method, allowing us to add several different types of
    values to our JSON objects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在我们的示例中，我们只向 JSON 对象添加了 `String` 对象，但我们并不局限于这种类型的值。`JsonObjectBuilder` 有几个
    `add()` 方法的重载版本，允许我们向 JSON 对象添加多种不同类型的值。
- en: 'The following table summarizes all of the available versions of the `add()`
    method:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了所有可用的 `add()` 方法版本：
- en: '| JsonObjectBuilder methods | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| JsonObjectBuilder 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `add(String name, BigDecimal value)` | This method adds a `BigDecimal` value
    to our JSON object. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, BigDecimal value)` | 此方法将一个 `BigDecimal` 值添加到我们的 JSON 对象中。
    |'
- en: '| `add(String name, BigInteger value)` | This method adds a `BigInteger` value
    to our JSON object. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, BigInteger value)` | 此方法将一个 `BigInteger` 值添加到我们的 JSON 对象中。
    |'
- en: '| `add(String name, JsonArrayBuilder value)` | This method adds an array to
    our JSON object. A `JsonArrayBuilder` implementation allows us to create JSON
    arrays. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, JsonArrayBuilder value)` | 此方法将一个数组添加到我们的 JSON 对象中。`JsonArrayBuilder`
    实现允许我们创建 JSON 数组。 |'
- en: '| `add(String name, JsonObjectBuilder value)` | This method adds another JSON
    object to our original JSON object (the property values for JSON objects can be
    other JSON objects). The added `JsonObject` implementation is built from the provided
    `JsonObjectBuilder` parameter. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, JsonObjectBuilder value)` | 此方法将另一个 JSON 对象添加到我们的原始 JSON
    对象中（JSON 对象的属性值可以是其他 JSON 对象）。添加的 `JsonObject` 实现是从提供的 `JsonObjectBuilder` 参数构建的。
    |'
- en: '| `add(String name, JsonValue value)` | This method adds another JSON object
    to our original JSON object (the property values for JSON objects can be other
    JSON objects). |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, JsonValue value)` | 此方法将另一个 JSON 对象添加到我们的原始 JSON 对象中（JSON
    对象的属性值可以是其他 JSON 对象）。 |'
- en: '| `add(String name, String value)` | This method adds a `String` value to our
    JSON object. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, String value)` | 此方法将一个 `String` 值添加到我们的 JSON 对象中。 |'
- en: '| `add(String name, boolean value)` | This method adds a `boolean` value to
    our JSON object. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, boolean value)` | 此方法将一个 `boolean` 值添加到我们的 JSON 对象中。 |'
- en: '| `add(String name, double value)` | This method adds a `double` value to our
    JSON object. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, double value)` | 此方法将一个 `double` 值添加到我们的 JSON 对象中。 |'
- en: '| `add(String name, int value)` | This method adds an `int` value to our JSON
    object. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, int value)` | 此方法将一个 `int` 值添加到我们的 JSON 对象中。 |'
- en: '| `add(String name, long value)` | This method adds a `long` value to our JSON
    object. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `add(String name, long value)` | 此方法将一个 `long` 值添加到我们的 JSON 对象中。 |'
- en: In all cases, the first parameter of the `add()` method corresponds to the name
    of the property in our JSON object and the second parameter corresponds to the
    value of the property.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，`add()` 方法的第一个参数对应于我们 JSON 对象中的属性名称，第二个参数对应于属性的值。
- en: Parsing JSON data with the Model API
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Model API 解析 JSON 数据
- en: 'In the last section, we saw how to generate JSON data from our Java code with
    the Model API. In this section, we will see how we can read and parse the existing
    JSON data. The following code sample illustrates how to do this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了如何使用 Model API 从我们的 Java 代码生成 JSON 数据。在本节中，我们将了解如何读取和解析现有的 JSON 数据。以下代码示例说明了如何进行此操作：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To parse an existing JSON string, we need to create a `StringReader` object,
    passing a `String` object containing the JSON data to be parsed as a parameter.
    We then pass the resulting `StringReader` instance to the static `createReader()`
    method of the `Json` class. This method invocation will return an instance of
    `JsonReader`. We can then obtain an instance of `JsonObject` by invoking the `readObject()`
    method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要解析现有的JSON字符串，我们需要创建一个`StringReader`对象，将包含要解析的JSON数据的`String`对象作为参数传递。然后，我们将生成的`StringReader`实例传递给`Json`类的静态`createReader()`方法。此方法调用将返回一个`JsonReader`实例。然后，我们可以通过调用`readObject()`方法来获取`JsonObject`的实例。
- en: In our example, we used the `getString()` method to obtain the values for all
    the properties in our JSON object; the first and only argument for this method
    is the name of the property we wish to retrieve. Unsurprisingly, the return value
    is the value of the property.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用了`getString()`方法来获取JSON对象中所有属性的值；此方法的第一和唯一参数是我们希望检索的属性名称。不出所料，返回值是属性的值。
- en: 'In addition to the `getString()` method, there are several other similar methods
    to obtain the values of other types. The following table summarizes these methods:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`getString()`方法之外，还有其他几个类似的方法可以用来获取其他类型的数据值。以下表格总结了这些方法：
- en: '| JsonObject methods | Description |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| JsonObject方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `get(Object key)` | This method returns an instance of a class implementing
    the `JsonValue` interface. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `get(Object key)` | 此方法返回实现`JsonValue`接口的类的实例。 |'
- en: '| `getBoolean(String name)` | This method returns a `boolean` value corresponding
    to the given key. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `getBoolean(String name)` | 此方法返回与给定键对应的`boolean`值。 |'
- en: '| `getInt(String name)` | This method returns an `int` value corresponding
    to the given key. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `getInt(String name)` | 此方法返回与给定键对应的`int`值。 |'
- en: '| `getJsonArray(String name)` | This method returns the instance of a class
    implementing the `JsonArray` interface that corresponds to the given key. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `getJsonArray(String name)` | 此方法返回与给定键对应的实现`JsonArray`接口的类的实例。 |'
- en: '| `getJsonNumber(String name)` | This method returns the instance of a class
    implementing the `JsonNumber` interface that corresponds to the given key. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `getJsonNumber(String name)` | 此方法返回与给定键对应的实现`JsonNumber`接口的类的实例。 |'
- en: '| `getJsonObject(String name)` | This method returns the instance of a class
    implementing the `JsonObject` interface that corresponds to the given key. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `getJsonObject(String name)` | 此方法返回与给定键对应的实现`JsonObject`接口的类的实例。 |'
- en: '| `getJsonString(String name)` | This method returns the instance of a class
    implementing the `JsonString` interface that corresponds to the given key. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `getJsonString(String name)` | 此方法返回与给定键对应的实现`JsonString`接口的类的实例。 |'
- en: '| `getString(String Name)` | This method returns a `String` corresponding to
    the given key. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `getString(String Name)` | 此方法返回与给定键对应的`String`。 |'
- en: In all cases, the `String` parameter of the method corresponds to the key name
    and the return value is the JSON property value that we wish to retrieve.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，方法的`String`参数对应于键名，返回值是我们希望检索的JSON属性值。
- en: The JSON-P Streaming API
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON-P Streaming API
- en: The JSON-P Streaming API allows the sequential reading of a JSON object from
    a stream (a subclass of `java.io.OutputStream`, or a subclass of `java.io.Writer`).
    It is faster and more memory efficient than the Model API. However, the tradeoff
    is that it is more limited, since the JSON data needs to be read sequentially
    and we cannot access specific JSON properties directly, the way the Model API
    allows.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-P Streaming API允许从流（`java.io.OutputStream`的子类或`java.io.Writer`的子类）中顺序读取JSON对象。它比Model
    API更快、更节省内存。然而，它的缺点是功能更有限，因为JSON数据需要顺序读取，我们无法像Model API那样直接访问特定的JSON属性。
- en: Generating JSON data with the Streaming API
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Streaming API生成JSON数据
- en: The JSON Streaming API has a `JsonGenerator` class that we can use to generate
    JSON data and write it to a stream. This class has several overloaded `write()`
    methods which can be used to add properties and their corresponding values to
    the generated JSON data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: JSON Streaming API有一个`JsonGenerator`类，我们可以使用它来生成JSON数据并将其写入流。这个类有几个重载的`write()`方法，可以用来向生成的JSON数据中添加属性及其对应的值。
- en: 'The following code sample illustrates how to generate JSON data using the Streaming
    API:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例说明了如何使用Streaming API生成JSON数据：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We create an instance of `JsonGenerator` by invoking the `createGenerator()`
    static method of the `Json` class. The JSON-P Streaming API provides two overloaded
    versions of the `createGenerator()` method; one takes an instance of a class that
    extends `java.io.Writer` (such as `StringWriter`, which we used in our example),
    and the other takes an instance of a class that extends `java.io.OutputStream`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用`Json`类的`createGenerator()`静态方法来创建一个`JsonGenerator`实例。JSON-P流式API提供了`createGenerator()`方法的两个重载版本；一个接受一个扩展`java.io.Writer`类（例如我们示例中使用的`StringWriter`）的类的实例，另一个接受一个扩展`java.io.OutputStream`类的类的实例。
- en: Before we can start adding properties to the generated JSON stream, we need
    to invoke the `writeStartObject()` method on `JsonGenerator`. This method writes
    the JSON start object character (represented by an opening curly brace (`{`) in
    JSON strings) and returns another instance of `JsonGenerator`, allowing us to
    chain the `write()` invocations to add properties to our JSON stream.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向生成的JSON流添加属性之前，我们需要在`JsonGenerator`上调用`writeStartObject()`方法。此方法写入JSON开始对象字符（在JSON字符串中由一个开括号`{`表示）并返回另一个`JsonGenerator`实例，允许我们将`write()`调用链式添加到我们的JSON流中。
- en: The `write()` method in `JsonGenerator` allows us to add properties to the JSON
    stream that we generate. Its first parameter is a `String` corresponding to the
    name of the property we add, and the second parameter is the value of the property.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`JsonGenerator`中的`write()`方法允许我们向生成的JSON流添加属性。它的第一个参数是一个`String`，对应于我们添加的属性的名称，第二个参数是属性的值。'
- en: 'In our example, we are adding only the `String` values to the JSON stream that
    we create; however, we are not limited to `Strings`. The JSON-P Streaming API
    provides several overloaded `write()` methods that allow us to add several different
    types of data to our JSON stream. The following table summarizes all of the available
    versions of the `write()` method:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们只向创建的JSON流添加`String`值；然而，我们并不局限于`Strings`。JSON-P流式API提供了几个重载的`write()`方法，允许我们向JSON流添加多种不同类型的数据。以下表格总结了所有可用的`write()`方法版本：
- en: '| JsonGenerator write() methods | Description |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| JsonGenerator write()方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `write(String name, BigDecimal value)` | This method writes a `BigDecimal`
    value to our JSON stream. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, BigDecimal value)` | 此方法将一个`BigDecimal`值写入我们的JSON流。 |'
- en: '| `write(String name, BigInteger value)` | This method writes a `BigInteger`
    value to our JSON stream. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, BigInteger value)` | 此方法将一个`BigInteger`值写入我们的JSON流。 |'
- en: '| `write(String name, JsonValue value)` | This method writes a JSON object
    to our JSON stream (the property values for JSON streams can be other JSON objects).
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, JsonValue value)` | 此方法将一个JSON对象写入我们的JSON流（JSON流的属性值可以是其他JSON对象）。
    |'
- en: '| `write(String name, String value)` | This method writes a `String` value
    to our JSON stream. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, String value)` | 此方法将一个`String`值写入我们的JSON流。 |'
- en: '| `write(String name, boolean value)` | This method writes a `boolean` value
    to our JSON stream. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, boolean value)` | 此方法将一个`boolean`值写入我们的JSON流。 |'
- en: '| `write(String name, double value)` | This method writes a `double` value
    to our JSON stream. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, double value)` | 此方法将一个`double`值写入我们的JSON流。 |'
- en: '| `write(String name, int value)` | This method writes an `int` value to our
    JSON stream. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, int value)` | 此方法将一个`int`值写入我们的JSON流。 |'
- en: '| `write(String name, long value)` | This method writes a `long` value to our
    JSON stream. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `write(String name, long value)` | 此方法将一个`long`值写入我们的JSON流。 |'
- en: In all cases, the first parameter of the `write()` method corresponds to the
    name of the property we are adding to our JSON stream, and the second parameter
    corresponds to the value of the property.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，`write()`方法的第一个参数对应于我们添加到JSON流中的属性的名称，第二个参数对应于属性的值。
- en: Once we are done adding properties to our JSON stream, we need to invoke the
    `writeEnd()` method on `JsonGenerator`; this method adds the JSON end object character
    (represented by a closing curly brace (`}`) in JSON strings).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成向我们的JSON流添加属性，我们需要在`JsonGenerator`上调用`writeEnd()`方法；此方法添加JSON结束对象字符（在JSON字符串中由一个闭合花括号`}`表示）。
- en: At this point, our stream or reader is populated with the JSON data we generated;
    what we do with it depends on our application logic. In our example, we simply
    invoked the `toString()` method of our `StringReader` class to obtain the `String`
    representation of the JSON data we created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们的流或读取器已经包含了我们生成的 JSON 数据；我们如何处理它取决于我们的应用程序逻辑。在我们的例子中，我们简单地调用了 `StringReader`
    类的 `toString()` 方法来获取我们创建的 JSON 数据的 `String` 表示形式。
- en: Parsing JSON data with the Streaming API
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用流式 API 解析 JSON 数据
- en: 'In the last section, we saw how to generate JSON data from our Java code with
    the Streaming API. In this section, we will see how we can read and parse the
    existing JSON data we receive from a stream. The following code sample illustrates
    how to do this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了如何使用流式 API 从我们的 Java 代码中生成 JSON 数据。在本节中，我们将看到如何读取和解析我们从流中接收到的现有 JSON
    数据。以下代码示例说明了如何做到这一点：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first thing we need to do in order to read JSON data using the Streaming
    API is to create an instance of `JsonParser` by invoking the static `createJsonParser()`
    method on the `Json` class. There are two overloaded versions of the `createJsonParser()`
    method; one takes an instance of a class that extends `java.io.InputStream`, and
    the other takes an instance of a class that extends `java.io.Reader`. In our example,
    we use the latter by passing an instance of `java.io.StringReader`, which is a
    subclass of `java.io.Reader`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使用流式 API 读取 JSON 数据，我们首先需要通过在 `Json` 类上调用静态 `createJsonParser()` 方法来创建一个
    `JsonParser` 实例。`createJsonParser()` 方法有两种重载版本；一个接受一个扩展 `java.io.InputStream`
    的类的实例，另一个接受一个扩展 `java.io.Reader` 的类的实例。在我们的例子中，我们使用后者，通过传递一个 `java.io.StringReader`
    的实例来实现，它是 `java.io.Reader` 的一个子类。 '
- en: The next step is to loop through the JSON data to obtain the data to be parsed.
    We can achieve this by invoking the `hasNext()` method on `JsonParser`, which
    returns `true` if there is more data to be read and returns `false` otherwise.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是遍历 JSON 数据以获取要解析的数据。我们可以通过在 `JsonParser` 上调用 `hasNext()` 方法来实现这一点，如果还有更多数据要读取，则返回
    `true`，否则返回 `false`。
- en: We then need to read the next piece of data in our stream. The `JsonParser.next()`
    method returns an instance of `JsonParser.Event` that indicates the type of data
    we just read. In our example, we check only for key names (that is, "`firstName`",
    "`lastName`", and "`email`") and the corresponding string values. We can check
    for the type of data we just read by comparing the event returned by `JsonParser.next()`
    against several values defined in the `Event` enum defined in `JsonParser`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要读取流中的下一份数据。`JsonParser.next()` 方法返回一个 `JsonParser.Event` 实例，该实例指示我们刚刚读取的数据类型。在我们的例子中，我们只检查键名（即，“`firstName`”，“`lastName`”和“`email`”）以及相应的字符串值。我们可以通过将
    `JsonParser.next()` 返回的事件与在 `JsonParser` 中定义的 `Event` 枚举中定义的几个值进行比较来检查我们刚刚读取的数据类型。
- en: 'The following table summarizes all of the possible constants that can be returned
    by `JsonParser.next()`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了 `JsonParser.next()` 可以返回的所有可能的常量：
- en: '| JsonParser Event constants | Description |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| JsonParser 事件常量 | 描述 |'
- en: '| --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Event.START_OBJECT` | This constant indicates the start of a JSON object.
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `Event.START_OBJECT` | 此常量表示 JSON 对象的开始。 |'
- en: '| `Event.END_OBJECT` | This constant indicates the end of a JSON object. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `Event.END_OBJECT` | 此常量表示 JSON 对象的结束。 |'
- en: '| `Event.START_ARRAY` | This constant indicates the start of an array |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `Event.START_ARRAY` | 此常量表示数组的开始 |'
- en: '| `Event.END_ARRAY` | This constant indicates the end of an array. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `Event.END_ARRAY` | 此常量表示数组的结束。 |'
- en: '| `Event.KEY_NAME` | This constant indicates the name of a JSON property that
    was read. We can obtain the key name by invoking `getString()` on `JsonParser`.
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `Event.KEY_NAME` | 此常量表示读取的 JSON 属性的名称。我们可以通过在 `JsonParser` 上调用 `getString()`
    来获取键名。 |'
- en: '| `Event.VALUE_TRUE` | This constant indicates that a `boolean` value of `true`
    was read. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `Event.VALUE_TRUE` | 此常量表示读取了一个 `boolean` 值为 `true`。 |'
- en: '| `Event.VALUE_FALSE` | This constant indicates that a `boolean` value of `false`
    was read. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `Event.VALUE_FALSE` | 此常量表示读取了一个 `boolean` 值为 `false`。 |'
- en: '| `Event.VALUE_NULL` | This constant indicates that a `null` value was read.
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `Event.VALUE_NULL` | 此常量表示读取了一个 `null` 值。 |'
- en: '| `Event.VALUE_NUMBER` | This constant indicates that a numeric value was read.
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `Event.VALUE_NUMBER` | 此常量表示读取了一个数值。 |'
- en: '| `Event.VALUE_STRING` | This constant indicates that a string value was read.
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `Event.VALUE_STRING` | 此常量表示读取了一个字符串值。 |'
- en: 'As shown in the example, the `String` values can be retrieved by invoking `getString()`
    on `JsonParser`. Numeric values can be retrieved in several different formats;
    the following table summarizes the methods in `JsonParser` that can be used to
    retrieve numeric values:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，可以通过在 `JsonParser` 上调用 `getString()` 来检索 `String` 值。数值可以以几种不同的格式检索；以下表格总结了
    `JsonParser` 中可以用来检索数值的方法：|
- en: '| JsonParser methods | Description |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| JsonParser 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `getInt()` | This method retrieves the numeric value as `int`. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `getInt()` | 此方法检索数值作为 `int` 类型的值。|'
- en: '| `getLong()` | This method retrieves the numeric value as `long`. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `getLong()` | 此方法检索数值作为 `long` 类型的值。|'
- en: '| `getBigDecimal()` | This method retrieves the numeric value as an instance
    of `java.math.BigDecimal`. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `getBigDecimal()` | 此方法检索数值作为 `java.math.BigDecimal` 类型的实例。|'
- en: '`JsonParser` also provides a convenience `isIntegralNumber()` method that returns
    `true` if the numeric value can be safely cast to an `int` or a `long` type.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`JsonParser` 还提供了一个方便的 `isIntegralNumber()` 方法，如果数值可以安全地转换为 `int` 或 `long`
    类型，则返回 `true`。|'
- en: What we do with the values we obtain from the stream depends on our application
    logic. In our example, we place them in `Map` and then use the said `Map` to populate
    a Java class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对从流中获取的值所采取的操作取决于我们的应用程序逻辑。在我们的示例中，我们将它们放入 `Map` 中，然后使用该 `Map` 来填充一个 Java
    类。|
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要 |
- en: 'In this chapter, we covered the Java API for JSON Processing (JSON-P). We covered
    both major JSON-P''s APIs: the Model API and the Streaming API.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Java API for JSON Processing (JSON-P)。我们介绍了 JSON-P 的两个主要 API：模型 API
    和流式 API。|
- en: We illustrated how to generate JSON data via JSON-P's Model API, specifically
    the `JsonBuilder` class. We also covered how to parse JSON data via JSON-P's Model
    API via the `JsonReader` class.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示了如何通过 JSON-P 的模型 API 生成 JSON 数据，特别是 `JsonBuilder` 类。我们还介绍了如何通过 `JsonReader`
    类通过 JSON-P 的模型 API 解析 JSON 数据。|
- en: Additionally, we explained how to generate JSON data via JSON-P's Streaming
    API by employing the `JsonGenerator` class.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们解释了如何通过使用 `JsonGenerator` 类来生成 JSON 数据，通过 JSON-P 的流式 API。|
- en: Lastly, we covered how to parse JSON data via JSON-P's Streaming API, specifically
    via the `JsonParser` class.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍了如何通过 JSON-P 的流式 API 解析 JSON 数据，特别是通过 `JsonParser` 类。|
- en: In the next chapter, we will cover the Java API for WebSocket.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Java API for WebSocket。
