- en: Authentication Using SAML, LDAP, and OAuth/OIDC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SAML、LDAP和OAuth/OIDC进行身份验证
- en: In this chapter, we will look at the authentication mechanisms—namely SAML,
    LDAP, and OAuth/OIDC—supported by Spring Security. This will be a fully hands-on
    coding chapter. We will build small applications, most of them starting from the
    base application that we built in [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep
    Diving into Spring Security*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究Spring Security支持的认证机制，即SAML、LDAP和OAuth/OIDC。 这将是一个完全动手编码的章节。 我们将构建小型应用程序，其中大多数应用程序都是从我们在[第2章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)中构建的基本应用程序开始的，*深入Spring
    Security*。
- en: The main goal of this chapter is to make you comfortable with implementing the
    authentication mechanisms most commonly used across your organization, and also
    to showcase Spring Security module capabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是使您能够实现组织中最常用的认证机制，并展示Spring Security模块的功能。
- en: Each of the authentication mechanisms has a project that you can see in the
    book's GitHub page. However, in the book, we will only cover important aspects
    of the sample code, to reduce clutter within the chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个认证机制都有一个项目，您可以在书的GitHub页面上看到。 但是，在书中，我们只会涵盖示例代码的重要方面，以减少章节内的混乱。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Security Assertion Markup Language
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全断言标记语言
- en: Lightweight Directory Access Protocol
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级目录访问协议
- en: OAuth2 and OpenID Connect
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2和OpenID Connect
- en: Security Assertion Markup Language
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全断言标记语言
- en: '**Security Assertion Markup Language** (**SAML**), developed by the *Security
    Services Technical Committee of OASIS*, is an XML-based framework for communicating
    user authentication, entitlement and attribute information. SAML allows business
    entities to make assertions regarding the identity, attributes, and entitlements
    of a subject (an entity that is often a human user) to other entities, such as
    a partner company or another enterprise.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全断言标记语言**（**SAML**），由OASIS的*安全服务技术委员会*开发，是用于通信用户身份验证、权限和属性信息的基于XML的框架。 SAML允许业务实体对主体（通常是人类用户）的身份、属性和权限向其他实体（例如合作伙伴公司或其他企业）做出断言。'
- en: 'The module `application.SAML` is also:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模块`application.SAML`也是：
- en: A set of XML-based protocol messages
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组基于XML的协议消息
- en: A set of protocol message bindings
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组协议消息绑定
- en: A set of profiles (utilizing all of the above)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组配置文件（利用上述所有内容）
- en: '**Identity Provider** (**IdP**) is a system that creates, maintains, and manages
    identity information for principals (users, services, or systems), and provides
    principal authentication to other service providers (applications) within a federation
    or distributed network.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份提供者**（**IdP**）是创建、维护和管理主体（用户、服务或系统）身份信息，并为联合或分布式网络中的其他服务提供商（应用程序）提供主体认证的系统。'
- en: '**Service Provider** (**SP**) is any system that provides services, typically
    the services for which users seek authentication, including web or enterprise
    applications. A special type of service provider, the identity provider, administers
    identity information.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务提供者**（**SP**）是提供服务的任何系统，通常是用户寻求认证的服务，包括Web或企业应用程序。 一种特殊类型的服务提供者，即身份提供者，管理身份信息。'
- en: 'For more information on SAML, IdP, and SP, you can also refer to the following
    links:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SAML、IdP和SP的更多信息，您还可以参考以下链接：
- en: '[http://xml.coverpages.org/saml.html](http://xml.coverpages.org/saml.html)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://xml.coverpages.org/saml.html](http://xml.coverpages.org/saml.html)'
- en: '[http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider)](http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider))'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider)](http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider))'
- en: '[https://searchsecurity.techtarget.com/definition/SAML](https://searchsecurity.techtarget.com/definition/SAML)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://searchsecurity.techtarget.com/definition/SAML](https://searchsecurity.techtarget.com/definition/SAML)'
- en: Spring Security has a top-level project named Spring Security SAML. It is considered
    an extension providing Spring applications to integrate with a variety of authentication
    and federation mechanisms that supports SAML 2.0\. This extension also supports
    multiple SAML 2.0, profiles as well as IdP and SP initiated SSO.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security有一个名为Spring Security SAML的顶级项目。 它被认为是一个扩展，为Spring应用程序提供了与支持SAML
    2.0的各种认证和联合机制集成。 该扩展还支持多个SAML 2.0配置文件以及IdP和SP启动的SSO。
- en: There are a number of SAML 2.0 compliant products (IdP mode), such as **Okta**,
    **Ping Federate**, and **ADFS**, that can be integrated into your application
    quite easily using this Spring Security extension.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多符合SAML 2.0标准的产品（IdP模式），例如**Okta**、**Ping Federate**和**ADFS**，可以使用Spring Security扩展轻松集成到您的应用程序中。
- en: 'Going into detail on SAML is out of the scope of this book. However, we will
    try to integrate a Spring Boot application that we built earlier, in [Chapter
    2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep Diving into Spring Security*,
    to tweak and convert it into authentication with an SAML 2.0 product: Okta. In
    the world of SSO, Okta is a well-known product, allowing applications to easily
    achieve SSO. In the following example, we will also be using the `spring-security-saml-dsl` project,
    a Spring Security extension project containing Okta DSL. The use of this eases
    Spring Security and Okta integration quite significantly. We will also run you
    through configurations that you will have to use in the Okta platform, to make
    sure that the example is self-contained and complete. This does not mean that
    you have to use Okta as the SSO platform for your application; instead, it showcases
    the Spring Security SAML module, using Okta as an example.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 深入讨论SAML的细节超出了本书的范围。但是，我们将尝试集成我们之前在[第2章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)中构建的Spring
    Boot应用程序，*深入了解Spring Security*，对其进行调整并转换为使用SAML 2.0产品Okta进行身份验证。在SSO的世界中，Okta是一个知名的产品，允许应用程序轻松实现SSO。在以下示例中，我们还将使用`spring-security-saml-dsl`项目，这是一个包含Okta
    DSL的Spring Security扩展项目。使用此项目可以显著简化Spring Security和Okta的集成。我们还将为您介绍在Okta平台上必须使用的配置，以确保示例是自包含和完整的。这并不意味着您必须将Okta作为应用程序的SSO平台；相反，它展示了Spring
    Security SAML模块，以Okta作为示例。
- en: As mentioned previously, we will copy the Spring Boot project that we created
    in [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep Diving into
    Spring Security,* as a head start for this example. Now, let's go ahead and look
    at how we can set up the SSO provider (Okta) first; in subsequent sections, we
    will look at how we can tweak our copied Spring Boot application to achieve SAML
    2.0 authentication.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将复制我们在[第2章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)中创建的Spring Boot项目，作为此示例的起点。现在，让我们先来看看如何设置SSO提供程序（Okta）；在随后的部分中，我们将看看如何调整我们复制的Spring
    Boot应用程序以实现SAML 2.0身份验证。
- en: Setting up an SSO provider
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置SSO提供程序
- en: As detailed, we will be using Okta as our SSO provider to build our sample application,
    which covers Spring Security using SAML 2.0 as the authentication mechanism.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如详细说明，我们将使用Okta作为SSO提供程序来构建我们的示例应用程序，该应用程序使用SAML 2.0作为身份验证机制的Spring Security。
- en: 'To set up an Okta user, perform the following steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Okta用户，请执行以下步骤：
- en: Go to [https://developer.okta.com](https://developer.okta.com) and click on
    SIGN UP.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://developer.okta.com](https://developer.okta.com)，然后点击注册。
- en: Enter the relevant details and click on GET STARTED.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入相关细节，然后点击开始。
- en: Okta will send you an email with your Org Subdomain and Temporary Password.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Okta将向您发送包含组织子域和临时密码的电子邮件。
- en: Click on the Sign In button in the email, enter your Username (email) and Temporary
    Password, and log in.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击邮件中的登录按钮，输入您的用户名（电子邮件）和临时密码，然后登录。
- en: You will be presented with some more account-related information. Fill in the
    details and complete your account setup.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一些与帐户相关的信息。填写详细信息并完成帐户设置。
- en: You now have an Okta account set up with one user (you) and no applications
    configured to do SSO.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已经设置了一个Okta帐户，其中有一个用户（您），并且没有配置SSO的应用程序。
- en: 'To set up the Okta application, perform the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Okta应用程序，请执行以下步骤：
- en: Log in to your account and click on the Admin button.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的帐户，然后点击管理按钮。
- en: On the screen, click on the Add Applications shortcut link.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上，点击添加应用程序的快捷链接。
- en: Click on the Create New App button. Select Web as the platform, select the SAML
    2.0 radio button, and click on the Create button.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建新应用程序按钮。选择Web作为平台，选择SAML 2.0单选按钮，然后点击创建按钮。
- en: In the App name field, enter your app name, keep the rest of the fields as they
    are, and click on the Next button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序名称字段中，输入您的应用程序名称，保持其余字段不变，然后点击下一步按钮。
- en: In the Single sign on URL field, enter the URL as `https://localhost:8443/saml/SSO`.
    In the Audience URI field, enter the URI as `https://localhost:8443/saml/metadata`.
    Keep the rest of the fields as they are, and click on the Next button.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单点登录URL字段中，输入URL为`https://localhost:8443/saml/SSO`。在受众URI字段中，输入URI为`https://localhost:8443/saml/metadata`。保持其余字段不变，然后点击下一步按钮。
- en: Click on the radio button that says I'm an Okta customer adding an internal
    app.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标有“我是Okta客户，正在添加内部应用程序”的单选按钮。
- en: Select the checkbox that says, This is an internal app that we have created,
    and click on the Finish button.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择复选框，上面写着“这是我们创建的内部应用程序”，然后点击完成按钮。
- en: 'To assign an Okta application to a user, you need to follow the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Okta应用程序分配给用户，您需要按照以下步骤进行操作：
- en: Navigate to the dashboard and click on the Assign Applications shortcut link.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到仪表板，然后点击分配应用程序的快捷链接。
- en: Click on the created application (in the Applications section) on the left,
    click on your username (on the People section) on the right, and click on the
    Next button.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的创建的应用程序（在应用程序部分），然后点击右侧的用户名（在人员部分），最后点击下一步按钮。
- en: On the next page, click on the Confirm Assignments button, and you will be done
    assigning the application to a user.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页上，点击确认分配按钮，然后您就完成了将应用程序分配给用户。
- en: You have now created the Okta application, and your user assignment is complete.
    Now, let's try modifying the application created earlier, so as to authenticate
    users using SAML 2.0, against the Okta application we created.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经创建了Okta应用程序，并且您的用户分配已完成。现在，让我们尝试修改之前创建的应用程序，以便使用SAML 2.0对用户进行身份验证，针对我们创建的Okta应用程序。
- en: Setting up the project
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'We will be changing two files: namely, `SpringSecuirtyConfig` (the Spring Security
    configuration file) and the Spring application properties file (`application.yml`).
    In the earlier application, instead of a YML (YAML) file, we used a properties
    file (`application.properties`). In this example, we will discard the `application.properties`
    file and will use the `application.yml` file for all of the setup. Let''s begin
    now.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改两个文件：即`SpringSecuirtyConfig`（Spring安全配置文件）和Spring应用程序属性文件（`application.yml`）。在之前的应用程序中，我们使用了属性文件（`application.properties`）而不是YML（YAML）文件。在这个例子中，我们将放弃`application.properties`文件，并将使用`application.yml`文件进行所有设置。现在开始吧。
- en: The pom.xml file setup
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pom.xml文件设置
- en: 'Copy your previous project. Open the `pom.xml` file and add the following dependencies:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 复制您以前的项目。打开`pom.xml`文件并添加以下依赖项：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The application.yml file setup
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: application.yml文件设置
- en: 'Create a new `application.yml` file in the `src/main/resources` folder with
    the following content:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/resources`文件夹中创建一个新的`application.yml`文件，内容如下：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In lines 13-17  (in the `spring` section), we have migrated the configuration
    data that we had in the `application.properties` file into a YML format. You can
    keep all the preceding configuration same apart from the configurations of `metadata-url`
    file. For this, you have to go back to the Okta application that you created and
    navigate to the Sign On tab. Now, click on the Identity Provider metadata link
    and copy the link. It will look similar to the one shown previously, with `metadata`
    at the end of the URL.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在第13-17行（在`spring`部分），我们将之前在`application.properties`文件中的配置数据迁移到了YML格式。除了`metadata-url`文件的配置之外，您可以保持所有之前的配置相同。对于这一点，您需要返回到您创建的Okta应用程序，并导航到“登录”选项卡。现在，点击“身份提供商元数据”链接并复制链接。它看起来类似于之前显示的链接，URL末尾带有`metadata`。
- en: The Spring Security configuration files
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring安全配置文件
- en: 'Now, we will change (or rather, configure) our Spring Security configuration
    files, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将改变（或者说配置）我们的Spring Security配置文件，如下所示：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The file does not have to be modified in any way. It's good to go, through the
    all-important `configure` method. In `spring-security-saml-dsl-core`*,* the introduction
    of the `saml()` method makes coding very concise and easy. With this, you are
    almost done, and the final step is to create the keystore.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件无需进行任何修改。通过重要的`configure`方法，一切都进行得很顺利。在`spring-security-saml-dsl-core`中，引入`saml()`方法使编码变得非常简洁和容易。有了这个，您几乎完成了，最后一步是创建密钥库。
- en: The resources folder setup
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源文件夹设置
- en: 'Navigate to your project (in the `src/main/resources` folder). Create a folder
    named `saml` and open the Command Prompt in that location. Execute the following
    command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到您的项目（在`src/main/resources`文件夹中）。创建一个名为`saml`的文件夹，并在该位置打开命令提示符。执行以下命令：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When prompted, give the required details and create the `keystore.jks` file
    within the `src/main/resources/saml` folder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示时，提供所需的详细信息，并在`src/main/resources/saml`文件夹中创建`keystore.jks`文件。
- en: Running and testing the application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和测试应用程序
- en: 'Navigate to your project folder and execute the `spring-boot` command, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到您的项目文件夹并执行`spring-boot`命令，如下所示：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open a browser and navigate to `https://localhost:8443`. Please note the `https`
    and the port `8443` (because we have SSL enabled). If you don''t put `https` in
    your URL, you will get the following response:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，导航到`https://localhost:8443`。请注意`https`和端口`8443`（因为我们启用了SSL）。如果在URL中不输入`https`，您将收到以下响应：
- en: '![](img/32f0d565-8822-427e-aa59-94cfdb1a78e2.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32f0d565-8822-427e-aa59-94cfdb1a78e2.png)'
- en: 'Figure 1: Browser response when HTTP is used'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：使用HTTP时浏览器的响应
- en: The browser will show a page stating that Your connection is not secure. The
    message may vary, depending on the browser that you choose to open this URL. Just
    make sure that you accept the risks and move forward.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将显示一个页面，指出您的连接不安全。消息可能会有所不同，这取决于您选择打开此URL的浏览器。只需确保您接受风险并继续前进。
- en: 'You will be navigated to the Okta URL, asking you to log in using your username/password,
    as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被导航到Okta URL，要求您使用用户名/密码登录，如下截图所示：
- en: '![](img/5cbcd28e-98e5-4493-b215-6b50f319b8be.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cbcd28e-98e5-4493-b215-6b50f319b8be.png)'
- en: 'Figure 2: Okta login page shown to the user'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：Okta登录页面显示给用户
- en: Once it's done, you will be navigated back to the home page, showing what you
    have put in your `home.jsp` file. The next time you open the URL, you will be
    taken directly to the home page, and Okta will automatically sign you in.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您将被导航回主页，显示您在`home.jsp`文件中放置的内容。下次打开URL时，您将直接进入主页，并且Okta将自动登录您。
- en: This completes SAML authentication using Spring Security. You can see the full
    project by accessing the GitHub page and navigating to the `spring-boot-in-memory-saml2-authentication` project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Security完成了SAML身份验证。您可以通过访问GitHub页面并导航到`spring-boot-in-memory-saml2-authentication`项目来查看完整的项目。
- en: Lightweight Directory Access Protocol
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轻量级目录访问协议
- en: '**Lightweight Directory Access Protocol** (**LDAP**) is a directory service
    protocol that allows for connecting, searching, and modifying internet directories.
    Unfortunately, LDAP doesn''t support reactive bindings; this means that reactive
    programming is not possible (similar to JDBC) with it. The function of LDAP authentication
    is shown in the following diagram:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**轻量级目录访问协议**（**LDAP**）是一种目录服务协议，允许连接、搜索和修改Internet目录。不幸的是，LDAP不支持反应式绑定；这意味着它不支持反应式编程（类似于JDBC）。LDAP身份验证的功能如下图所示：'
- en: '![](img/dec705b0-20da-458d-90c8-b03d1bfc945f.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec705b0-20da-458d-90c8-b03d1bfc945f.png)'
- en: 'Figure 3: LDAP authentication'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：LDAP身份验证
- en: Similar to the previous example, we will clone/copy the previous project (any
    Spring Boot project will do; I am cloning the `spring-boot-in-memory-saml2-authentication` project).
    Again, similar to the previous project, we will modify a couple of files and add
    a few more files to the project. We will use the built-in Java-based LDAP server
    to validate the user credentials.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的示例类似，我们将克隆/复制之前的项目（任何Spring Boot项目都可以；我正在克隆`spring-boot-in-memory-saml2-authentication`项目）。与之前的项目类似，我们将修改一些文件并向项目中添加一些文件。我们将使用内置的基于Java的LDAP服务器来验证用户凭据。
- en: Set up dependencies in the pom.xml file
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在pom.xml文件中设置依赖项
- en: 'Open `pom.xml` and add the following dependencies:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`pom.xml`并添加以下依赖项：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Spring Security configuration
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring安全配置
- en: 'Modify the `SpringSecurityConfiguration.java` file, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`SpringSecurityConfiguration.java`文件，如下所示：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first `configure` method is very similar to what we saw in the previous
    SAML example. We have just added certain matches and separated the roles. With
    these changes, it will still perform basic authentication.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`configure`方法与我们在之前的SAML示例中看到的非常相似。我们只是添加了某些匹配并分离了角色。通过这些更改，它仍将执行基本身份验证。
- en: The second `configure` method is where we have set up authentication using the
    LDAP server. The LDAP server stores user information in a directory-like format.
    This method details how to find the user by navigating through the directory structure.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`configure`方法是我们使用LDAP服务器设置身份验证的地方。LDAP服务器以类似目录的格式存储用户信息。此方法详细说明了如何通过浏览目录结构来查找用户。
- en: LDAP server setup
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP服务器设置
- en: 'We are going to use Spring''s default LDAP server to store our users, and then
    use this as a user store against which we can authenticate the users in our application.
    The LDAP configuration is done in our `application.yml` file, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Spring的默认LDAP服务器来存储我们的用户，然后将其用作我们的应用程序中可以对用户进行身份验证的用户存储。LDAP配置在我们的`application.yml`文件中完成，如下所示：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `ldap` section is self-explanatory—we are setting up the embedded LDAP server
    with various parameters.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldap`部分是不言自明的——我们正在使用各种参数设置嵌入式LDAP服务器。'
- en: Setting up users in the LDAP server
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在LDAP服务器中设置用户
- en: We are going to use the **LDAP Data Interchange Format** (**LDIF**) to set up
    our users on our LDAP server. The LDIF is a standard text-based representation
    for LDAP data, and changes to that data ([https://ldap.com/ldif-the-ldap-data-interchange-format/](https://ldap.com/ldif-the-ldap-data-interchange-format/)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**LDAP数据交换格式**（**LDIF**）在我们的LDAP服务器上设置用户。LDIF是LDAP数据的标准基于文本的表示形式，以及对该数据的更改（[https://ldap.com/ldif-the-ldap-data-interchange-format/](https://ldap.com/ldif-the-ldap-data-interchange-format/)）。
- en: 'In our `application.yml` file, we have shown Spring where to look for our LDIF
    file. The LDIF file is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`application.yml`文件中，我们已经告诉Spring在哪里查找我们的LDIF文件。LDIF文件如下：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Running the application
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'There are not many changes in any of the other files within the project. Just
    like you run any other `spring-boot` project, go to the project folder and execute
    the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中的任何其他文件中都没有太多更改。就像运行任何其他`spring-boot`项目一样，转到项目文件夹并执行以下命令：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Seeing the application in action on a browser
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览器上查看应用程序的运行情况
- en: 'Open a browser and enter `http://localhost:8080`. Enter the username/password
    as `tjohn/tjohn@password` (look for user setup in the LDIF file). You will be
    taken to `home.jsp`, where you will see a friendly welcome message, as shown in
    the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，输入`http://localhost:8080`。输入用户名/密码为`tjohn/tjohn@password`（在LDIF文件中查找用户设置）。您将被带到`home.jsp`，在那里您将看到友好的欢迎消息，如下截图所示：
- en: '![](img/1a0891d5-48c9-4be9-a798-8d04bb64cd13.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a0891d5-48c9-4be9-a798-8d04bb64cd13.png)'
- en: 'Figure 4: Message shown in home.jsp page after successful login using LDAP'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：使用LDAP成功登录后在home.jsp页面显示的消息
- en: OAuth2 and OpenID Connect
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth2和OpenID Connect
- en: '**OAuth** is an open standard/specification for achieving authorization. It
    works over HTTPS, and anyone can implement the specification. The specification
    works by validating access tokens, and then authorizes devices, APIs, servers,
    and so on.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth**是实现授权的开放标准/规范。它通过HTTPS工作，任何人都可以实现该规范。该规范通过验证访问令牌，然后授权设备、API、服务器等等。'
- en: Two versions—namely OAuth 1.0 ([https://tools.ietf.org/html/rfc5849](https://tools.ietf.org/html/rfc5849))
    and OAuth 2.0 ([https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749))—exist.
    These versions are not compatible with each other and cannot work together. We
    will use version 2.0 and it will be referred to as OAuth 2.0, throughout this
    book.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 存在两个版本，即OAuth 1.0（[https://tools.ietf.org/html/rfc5849](https://tools.ietf.org/html/rfc5849)）和OAuth
    2.0（[https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749)）。这些版本彼此不兼容，不能一起工作。我们将使用版本2.0，并且在本书中将其称为OAuth
    2.0。
- en: SAML, released in 2005, is a good fit for the web browser (still). But with
    modern web and native applications (mobile devices), SAML required a serious overhaul,
    and that's when OAuth came in. **Single Page Applications** (**SPAs**) and native
    applications are different from traditional server-side web applications. SPAs
    do AJAX/XHR calls to the APIs that are exposed on the server and does many other
    operations on the client (browser). API development has also changed, from heavy
    SOAP-based web services using XML to lightweight REST over HTTP using JSON.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SAML，于2005年发布，非常适合Web浏览器（至今仍然适用）。但是对于现代Web和原生应用程序（移动设备），SAML需要进行严格的改进，这就是**OAuth**出现的原因。**单页应用程序**（**SPAs**）和原生应用程序与传统的服务器端Web应用程序不同。SPAs通过浏览器对服务器上暴露的API进行AJAX/XHR调用，并在客户端（浏览器）上执行许多其他操作。API开发也发生了变化，从使用XML的重型SOAP
    Web服务到使用JSON的轻量级REST over HTTP。
- en: OAuth also enables you, as a developer, to gain access to minimal user data
    without having to give away a user's password. It is mainly for accessing the
    APIs (REST) exposed by an application, and is done by delegating the authorization
    function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth还使您作为开发人员能够在不必透露用户密码的情况下访问最少的用户数据。它主要用于访问应用程序暴露的API（REST），并通过委托授权功能来完成。
- en: OAuth supports a variety of application types and decouples authentication from
    authorization.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth支持各种应用程序类型，并将身份验证与授权解耦。
- en: 'In simple terms, this is how OAuth works:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这就是OAuth的工作原理：
- en: The app that wants to access resources requests the user to grant authorization.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 希望访问资源的应用程序请求用户授予授权。
- en: If the user authorizes it, the app is given proof for this agreement.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户授权，应用程序将获得此协议的证明。
- en: Using this proof, the app goes to the actual server with the APIs and gets a
    token.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个证明，应用程序去实际的服务器获取一个令牌。
- en: Using this token, the app can now ask for resources (APIs) to which the user
    has given access, while giving the proof.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此令牌，应用程序现在可以请求用户已授权的资源（API），同时提供证明。
- en: 'The preceding steps are depicted in the following diagram:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤如下图所示：
- en: '![](img/03b56df2-a7e5-46f9-8dcb-5967110dc4f1.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03b56df2-a7e5-46f9-8dcb-5967110dc4f1.png)'
- en: 'Figure 5: Functionality of OAuth'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：OAuth的功能
- en: OAuth was tweaked in such a way by using an access token, apps can get user
    information in the form of an API. Facebook Connect (an SSO application that allows
    users to interact with other web applications using Facebook credentials) used
    this as a mechanism to expose an endpoint (`http(s)://<domain>/me`) that would
    return minimal user information. This was never clearly there in OAuth specification,
    and this provoked **Open ID Connect** (**OIDC**), which combined the best parts
    of OAuth2, Facebook Connect, and SAML 2.0\. OIDC brought in a new ID token (`id_token`),
    and also a `UserInfo` endpoint that will provide minimal user attributes. Many
    of the complexities that SAML had, and many of the shortcomings of OAuth2 were
    addressed by OIDC.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth通过使用访问令牌进行了微调，应用程序可以以API的形式获取用户信息。Facebook Connect（一个SSO应用程序，允许用户使用Facebook凭据与其他Web应用程序进行交互）使用这作为一种机制来公开一个端点（`http(s)://<domain>/me`），该端点将返回最少的用户信息。这在OAuth规范中从未清楚地存在过，这引发了**Open
    ID Connect**（**OIDC**），它结合了OAuth2、Facebook Connect和SAML 2.0的最佳部分。OIDC引入了一个新的ID令牌（`id_token`），还有一个`UserInfo`端点，将提供最少的用户属性。OIDC解决了SAML存在的许多复杂性，以及OAuth2的许多缺点。
- en: Going deep, into OAuth and OIDC is not in the scope of this book. I am sure
    that I have given adequate information, using which you can navigate through the
    rest of this section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究OAuth和OIDC不在本书的范围之内。我相信我已经提供了足够的信息，您可以通过本节的其余部分进行导航。
- en: Setting up a project
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: The example code that we are going to create here has a different approach from
    our earlier samples. Here, we will use *Spring Initializr* ([http://start.spring.io/](http://start.spring.io/))
    to create the base project, and then we will inject the appropriate changes to
    make it log in with a provider, namely, Google.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里创建的示例代码与我们之前的示例有所不同。在这里，我们将使用*Spring Initializr*（[http://start.spring.io/](http://start.spring.io/)）创建基本项目，然后我们将注入适当的更改，使其能够使用提供程序（即Google）进行登录。
- en: Bootstrap Spring project using Spring Initializr
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Initializr引导Spring项目
- en: 'Visit [http://start.spring.io/](http://start.spring.io/) and enter the following
    details. Make sure that you select the right dependencies:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://start.spring.io/](http://start.spring.io/)并输入以下详细信息。确保选择正确的依赖项：
- en: '![](img/af792e37-c364-4482-aad1-c53e326d543a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af792e37-c364-4482-aad1-c53e326d543a.png)'
- en: 'Figure 6: Spring Initializr setup'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：Spring Initializr设置
- en: 'Click on the Generate Project button and download the ZIP file to a folder
    of your choice. Execute the `unzip` command as follows. I am using Macintosh for
    running all of my sample applications, so I will be using commands, if any, suitable
    for this platform:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“生成项目”按钮，将ZIP文件下载到您选择的文件夹中。执行以下`unzip`命令。我使用Macintosh运行所有示例应用程序，因此我将使用适用于此平台的命令（如果有的话）：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Inclusion of OAuth libraries in pom.xml
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在pom.xml中包含OAuth库
- en: 'Modify your project''s `pom.xml` file by adding the following dependencies:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 修改项目的`pom.xml`文件，添加以下依赖项：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Setting up provider details in application.properties
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在application.properties中设置提供程序详细信息
- en: 'If you run the application (`./mvnw spring-boot:run`) and then navigate your
    browser to `http://localhost:8080`, you will see a default login page, as follows.
    The entire magic behind this page is done for you by Spring Boot and Spring Security:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行应用程序（`./mvnw spring-boot:run`），然后在浏览器中导航到`http://localhost:8080`，您将看到一个默认的登录页面，如下所示。这个页面背后的所有魔术都是由Spring
    Boot和Spring Security为您完成的：
- en: '![](img/47a39749-7010-4d48-bb90-2f9134f9b210.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47a39749-7010-4d48-bb90-2f9134f9b210.png)'
- en: 'Figure 7: Default Spring Boot + Spring Security project created using Spring
    Initializr'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：使用Spring Initializr创建的默认Spring Boot + Spring Security项目
- en: 'Open the `application.properties` file (`src/main/resources`) and add the following
    properties:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`application.properties`文件（`src/main/resources`）并添加以下属性：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we declare two properties for each provider. We will be implementing
    the Google provider, but you can add any number of providers. Just adding these
    properties will create more magic, and your login page will suddenly change to
    the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为每个提供程序声明了两个属性。我们将实现Google提供程序，但您可以添加任意数量的提供程序。只需添加这些属性，就会产生更多的魔法，您的登录页面将突然变成以下内容：
- en: '![](img/4c9c49c6-c86f-4620-8977-6a45458bdd47.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c9c49c6-c86f-4620-8977-6a45458bdd47.png)'
- en: 'Figure 8: OAuth default login page when application.properties file is modified'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：当修改application.properties文件时的OAuth默认登录页面
- en: 'The providers (links) shown in the preceding screenshot are according to the
    configurations seen in the `application.properties` file. It just looks for two
    properties, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 前面截图中显示的提供程序（链接）是根据`application.properties`文件中的配置而定的。它只查找两个属性，如下所示：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Provider setup
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供程序设置
- en: 'We will be using Google as our provider in this example. Navigate to [https://console.developers.google.com/](https://console.developers.google.com/)
    and perform the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用Google作为我们的提供程序。转到[https://console.developers.google.com/](https://console.developers.google.com/)并执行以下步骤：
- en: 'Create a project. Select an existing project or create a new project, as shown
    in the following screenshot:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目。选择现有项目或创建新项目，如下图所示：
- en: '![](img/05af3299-335b-4037-a1d3-ae4f1a39a803.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05af3299-335b-4037-a1d3-ae4f1a39a803.png)'
- en: 'Figure 9: Project creation'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：项目创建
- en: 'Create the credentials. Select the newly created project (in the following
    screenshot, it is shown next to the Google APIs logo) and click on the Credentials
    link in the side menu, as shown in the following screenshot:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建凭据。选择新创建的项目（在下面的屏幕截图中，它显示在Google APIs徽标旁边），然后单击侧边菜单中的凭据链接，如下面的屏幕截图所示：
- en: '![](img/437a6fcd-1fc2-4ab2-91db-a6ddc5407ed9.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/437a6fcd-1fc2-4ab2-91db-a6ddc5407ed9.png)'
- en: 'Figure 10: Credential creation - step 1'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：凭据创建 - 步骤1
- en: 'Now, click on the Create credentials drop-down menu, as shown in the following
    screenshot:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击“创建凭据”下拉菜单，如下面的屏幕截图所示：
- en: '![](img/5021c119-000c-4880-920e-5a9a60a9f0c2.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5021c119-000c-4880-920e-5a9a60a9f0c2.png)'
- en: 'Figure 11: Credential creation - step 2'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：凭据创建 - 步骤2
- en: 'From the drop-down menu, click on OAuth client ID. This will navigate you to
    the page shown in the following screenshot. Please note that the Application type
    radio group will be disabled at this stage:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，单击OAuth客户端ID。这将导航您到下面屏幕截图中显示的页面。请注意，此时“应用程序类型”单选组将被禁用：
- en: '![](img/fd8267bf-d1d0-44c1-91ae-ea081c71d5d8.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd8267bf-d1d0-44c1-91ae-ea081c71d5d8.png)'
- en: 'Figure 12: Credential creation - step 3'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：凭据创建 - 步骤3
- en: 'Click on Configure consent screen. You will be navigated to the following page:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“配置同意屏幕”。您将被导航到以下页面：
- en: '![](img/4854c9b4-75a4-4ce3-82e7-c9240c51ecca.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4854c9b4-75a4-4ce3-82e7-c9240c51ecca.png)'
- en: 'Figure 13: Credential creation - step 4'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：凭据创建 - 步骤4
- en: Enter the relevant details (leave the optional fields out while filling in the
    form), as shown in the preceding figure, and click on the Save button. You will
    be navigated back to the page shown in the following figure.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入相关详细信息（在填写表单时留出可选字段），如前图所示，然后单击“保存”按钮。您将被导航回到下图所示的页面。
- en: 'This time, the Application type radio group will be enabled:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，“应用程序类型”单选组将被启用：
- en: '![](img/40295f09-c3ac-4800-bb37-2d5e26176bed.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40295f09-c3ac-4800-bb37-2d5e26176bed.png)'
- en: 'Figure 14: Credential Creation - step 5'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：凭据创建 - 步骤5
- en: 'Select the Application type as Web application, and enter the relevant details,
    as shown in the preceding figure. Click on the Create button, and you will be
    shown the following popup:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序类型选择为Web应用程序，并输入相关详细信息，如前图所示。单击“创建”按钮，将显示以下弹出窗口：
- en: '![](img/daaf459d-a618-4afa-a0d4-474041312c09.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/daaf459d-a618-4afa-a0d4-474041312c09.png)'
- en: 'Figure 15: Credential creation - step 6'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：凭据创建 - 步骤6
- en: You now have your client ID and client secret from Google. Copy and paste these
    values into the `application.properties` file in the correct place.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经从Google那里获得了客户端ID和客户端密钥。将这些值复制并粘贴到`application.properties`文件的正确位置。
- en: Default application change
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认应用程序更改
- en: To be in line with the previous example, we will make changes in the default
    application that was generated, bringing in the same components seen in the previous
    application. This will help you to understand the application in detail.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与上一个示例保持一致，我们将对生成的默认应用程序进行更改，引入与上一个应用程序中看到的相同组件。这将帮助您详细了解应用程序。
- en: The HomeController class
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HomeController类
- en: Copy the home controller class (`HomeController.java`) that we created in our
    previous example to a new package. Change the welcome message to whatever you
    want.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 复制我们在上一个示例中创建的`HomeController.java`文件到一个新的包中。将欢迎消息更改为您想要的内容。
- en: The home.jsp file
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: home.jsp文件
- en: Copy the whole `webapp` folder from the previous example, as is, into this project.
    Change the page heading to something different so that it is clear while running
    the application that it is indeed the sample application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个`webapp`文件夹从上一个示例中原样复制到此项目中。将页面标题更改为不同的内容，以便在运行应用程序时清楚地表明这确实是示例应用程序。
- en: Spring Boot main application class change
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot主应用程序类更改
- en: 'Make your application class extend the `SpringBootServletInitializer` class.
    Add a new annotation, as follows, letting your Spring Boot application know that
    a new controller, `HomeController`, is a component that it has to scan:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使您的应用程序类扩展`SpringBootServletInitializer`类。添加一个新的注释，如下所示，让您的Spring Boot应用程序知道一个新的控制器`HomeController`是一个必须扫描的组件：
- en: '[PRE14]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the application
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Run your application by executing the following default command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下默认命令来运行您的应用程序：
- en: '[PRE15]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If all is well, you should be able to click on the Google link, and it should
    navigate you to the Google''s login page. After successfully logging in, you will
    be redirected to the `home.jsp` file, as shown in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该能够单击Google链接，它应该将您导航到Google的登录页面。成功登录后，您将被重定向到`home.jsp`文件，如下面的屏幕截图所示：
- en: '![](img/6236594f-359d-4c81-b716-7c6d1351b929.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6236594f-359d-4c81-b716-7c6d1351b929.png)'
- en: 'Figure 16: Login using Google as OAuth provider'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：使用Google作为OAuth提供程序登录
- en: The support for OAuth doesn't end here, but we have to stop, as the book cannot
    delve deeply into the many aspects that the framework provides.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对OAuth的支持并不止于此，但我们必须停止，因为本书无法深入探讨框架提供的许多方面。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw authentication mechanisms commonly used in the enterprises,
    namely SAML, LDAP, and OAuth/OIDC, supported by Spring Security through hands-on
    coding examples. We used the sample application built as part of [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml),
    *Deep Diving into Spring Security*, as a basis for explaining the functionality
    and implementation of other authentication mechanisms.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了企业中常用的身份验证机制，即SAML、LDAP和Spring Security支持的OAuth/OIDC，通过实际编码示例进行了支持。我们使用作为[第2章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)的一部分构建的示例应用程序作为解释其他身份验证机制的功能和实现的基础。
- en: However, we intentionally didn't reactive programming in our coding examples.
    This chapter was aimed at making you understand the core concepts of each of the
    authentication mechanisms, by making use of the familiar Spring Web MVC application
    framework. We will cover reactive programming in more detail in [Chapter 5](df488f9c-24a7-4d0f-ac82-1d126a391fcc.xhtml), *Integrating
    with Spring WebFlux*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的编码示例中，我们有意没有使用响应式编程。本章旨在通过使用熟悉的Spring Web MVC应用程序框架，让您了解每种身份验证机制的核心概念。我们将在《第5章》*与Spring
    WebFlux集成*中更详细地介绍响应式编程。
