- en: CRUD Operations in Plain REST (Without Reactive) and File Upload
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 普通REST中的CRUD操作（不包括Reactive）和文件上传
- en: In the last chapter, we explored a CRUD operation with Reactive support. As
    the Spring development team is still updating more Reactive entities, Reactive
    support hasn't reached their level yet. Though Spring 5 Reactive support is working
    fine, they still need to improve it to make it stable. After considering these
    pointers, we plan to avoid Reactive support in order to make it simple for you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了对Reactive支持的CRUD操作。由于Spring开发团队仍在更新更多的Reactive实体，Reactive支持还没有达到他们的水平。尽管Spring
    5的Reactive支持运行良好，但他们仍需要改进以使其更加稳定。考虑到这些要点，我们计划避免使用Reactive支持，以使其对您更加简单。
- en: In this chapter, we will go through basic CRUD (Create, Read, Update, and Delete)
    APIs in Spring 5 (without Reactive) REST. After this chapter, you will be able
    to do a simple CRUD operation in Spring 5 without Reactive support. Also, we will
    talk about file upload options in Spring 5.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Spring 5（不包括Reactive）REST中的基本CRUD（创建、读取、更新和删除）API。在本章之后，您将能够在Spring
    5中进行简单的CRUD操作，而无需Reactive支持。此外，我们将讨论Spring 5中的文件上传选项。
- en: 'In this chapter, we will cover the following methods:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下方法：
- en: Mapping CRUD operations to HTTP methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CRUD操作映射到HTTP方法
- en: Creating a user
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户
- en: Updating a user
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户
- en: Deleting a user
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户
- en: Reading (selecting) a user
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取（选择）用户
- en: File uploads in Spring
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring中的文件上传
- en: Mapping CRUD operations to HTTP methods
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将CRUD操作映射到HTTP方法
- en: In the last chapter, you saw CRUD operations in the controller. In this chapter,
    we will have the same CRUD operations; however, we've excluded all Reactive components.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您看到了控制器中的CRUD操作。在本章中，我们将进行相同的CRUD操作；但是，我们已经排除了所有Reactive组件。
- en: Creating resources
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建资源
- en: 'To create basic Spring project resources, you can use Spring Initializr ([https://start.spring.io/](https://start.spring.io/))
    . In Spring Initializr, provide the necessary details:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建基本的Spring项目资源，您可以使用Spring Initializr（[https://start.spring.io/](https://start.spring.io/)）。在Spring
    Initializr中，提供必要的详细信息：
- en: Generate a Maven Project with Java and Spring Boot 1.5.9.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Java和Spring Boot 1.5.9生成一个Maven项目。
- en: 'Group: `com.packtpub.restapp`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 组：`com.packtpub.restapp`
- en: 'Artifact: `ticket-management`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Artifact：`ticket-management`
- en: Search for dependencies:  Select `Web (Full Stack Web Development with Tomcat
    and Web MVC) ` dependency
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索依赖项：选择`Web（使用Tomcat和Web MVC进行全栈Web开发）`依赖项
- en: After filling in the details, just click Generate Project; then it will create
    Spring basic resources in ZIP format. We can start using the project by importing
    them into Eclipse.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完详细信息后，只需点击`Generate Project`；然后它将以ZIP格式创建Spring基本资源。我们可以通过将它们导入Eclipse来开始使用项目。
- en: 'The Spring 5 POM file will look like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 5的POM文件将如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s remove the parent to simplify the POM:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们移除父级以简化POM：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we removed the parent, we may need to add the version in all of our dependencies.
    Let''s add the version in our dependencies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们移除了父级，我们可能需要在所有依赖项中添加版本。让我们在我们的依赖项中添加版本：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As the dependency artifact `spring-boot-starter-web` version `1.5.9` is based
    on Spring 4.3.11, we will have to upgrade to Spring 5\. Let''s clean and upgrade
    our POM file to bring in Spring 5 updates:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于依赖项artifact `spring-boot-starter-web`版本`1.5.9`基于Spring 4.3.11，我们将不得不升级到Spring
    5。让我们清理并升级我们的POM文件以引入Spring 5更新：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can see Spring 5-related dependencies in the preceding POM file. Let''s
    test them with the REST endpoint. First, create a Spring Boot main file to initialize
    Spring Boot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上述POM文件中看到与Spring 5相关的依赖项。让我们使用REST端点对它们进行测试。首先，创建一个Spring Boot主文件来初始化Spring
    Boot：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can start running the Spring Boot on Eclipse by right-clicking the project
    and selecting Run As | Spring Boot App. If you do this, you will see logs in the
    Eclipse console.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过右键单击项目并选择`Run As | Spring Boot App`在Eclipse上运行Spring Boot。如果这样做，您将在Eclipse控制台中看到日志。
- en: If you don't see the console, you can get it via Window | Show View | Console.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看不到控制台，可以通过`Window | Show View | Console`获取它。
- en: 'The following is a sample log. You may not see an exact match; however, you
    will get an idea of how the server running log will look:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例日志。您可能看不到完全匹配；但是，您将了解服务器运行日志的外观：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see `Tomcat started on port(s): 8080` in the last lines of the log.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '您应该在日志的最后几行看到`Tomcat started on port(s): 8080`。'
- en: 'When you check the URI `http://localhost:8080`, you will see the following
    error:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您检查URI `http://localhost:8080` 时，您将看到以下错误：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding error is saying that there is no corresponding URI configured
    in the application. Let''s fix this issue by creating a controller called `HomeController`
    under the `com.packtpub.restapp` package:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的错误是说应用程序中没有配置相应的URI。让我们通过在`com.packtpub.restapp`包下创建一个名为`HomeController`的控制器来解决这个问题：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, we created a dummy controller called `HomeController`
    with a simple `map` as a result. Also, we added the new controller we need to
    have these classes autoscanned by our main application, in our case the `TicketManagementApplication`
    class. We will tell them by adding `@ComponentScan("com.packtpub")` in the main
    class. Finally, our main class will look like the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了一个名为`HomeController`的虚拟控制器，并将简单的`map`作为结果。此外，我们添加了新的控制器，我们需要让我们的主应用程序自动扫描这些类，在我们的情况下是`TicketManagementApplication`类。我们将通过在主类中添加`@ComponentScan("com.packtpub")`来告诉它们。最后，我们的主类将如下所示：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you restart the Spring Boot App, you will see the REST endpoint working
    (`localhost:8080`):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当您重新启动Spring Boot应用程序时，您将看到REST端点正在工作（`localhost:8080`）：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: CRUD operation in Spring 5 (without Reactive)
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 5中的CRUD操作（不包括Reactive）
- en: 'Let''s perform user CRUD operations. As we have discussed CRUD concepts before,
    here we will only discuss User management on Spring 5 (without Reactive support).
    Let''s fill in all dummy methods for CRUD endpoints. In here, we can create `UserContoller`
    and fill in all methods for CRUD user operations:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行用户CRUD操作。由于我们之前已经讨论了CRUD概念，因此在这里我们只讨论Spring 5上的用户管理（不包括Reactive支持）。让我们为CRUD端点填充所有虚拟方法。在这里，我们可以创建`UserContoller`并填充所有CRUD用户操作的方法：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We have filled the basic endpoints for all CRUD operations. If you call them
    on Postman with proper methods such as `GET`, `POST`, `PUT`, and `DELETE`,  you
    will see the result mentioning the appropriate messages.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为所有CRUD操作填充了基本端点。如果您在Postman上调用它们，并使用适当的方法，如`GET`，`POST`，`PUT`和`DELETE`，您将看到提到适当消息的结果。
- en: 'For example, for the `getAllUsers` API (`localhost:8080/user`), you will get:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于`getAllUsers` API（`localhost:8080/user`），您将获得：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: getAllUsers – implementation
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: getAllUsers - 实现
- en: 'Let''s implement the `getAllUsers` API. For this API, we may need to create
    a model class called `User` under the package `com.packtpub.model`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现`getAllUsers` API。对于这个API，我们可能需要在`com.packtpub.model`包下创建一个名为`User`的模型类：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we will add code for the `getAllUsers` implementation. As this is business
    logic, we will create a separate `UserService` and `UserServiceImpl` class. By
    doing this, we can keep the business logic in a different place to avoid code
    complexity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加`getAllUsers`实现的代码。由于这是业务逻辑，我们将创建一个单独的`UserService`和`UserServiceImpl`类。通过这样做，我们可以将业务逻辑放在不同的地方，以避免代码复杂性。
- en: 'The `UserService` interface will look as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口如下所示：'
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `UserServiceImpl` class implementation is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserServiceImpl`类的实现如下：'
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding implementation, we created dummy users in the constructor.
    When the class is initialized by a Spring configuration, these users will be added
    to the list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的实现中，我们在构造函数中创建了虚拟用户。当类由Spring配置初始化时，这些用户将被添加到列表中。
- en: 'The `UserController` class for calling the `getAllUsers` method is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`getAllUsers`方法的`UserController`类如下：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we have called the `getAllUsers` method by autowiring
    it in the controller file. `@Autowired` will do all the instantiation magic behind
    the scenes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们通过在控制器文件中进行自动装配来调用`getAllUsers`方法。`@Autowired`将在幕后执行所有实例化魔术。
- en: 'If you run the application now, you may face the following error:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在运行应用程序，可能会遇到以下错误：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The reason behind this error is that your application is not able to identify
    `UserService`, as it is in a different package. We can fix this issue by adding
    `@ComponentScan("com.packtpub")` in the `TicketManagementApplication` class. This
    will identify all `@service` and other beans in different sub-packages:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误的原因是您的应用程序无法识别`UserService`，因为它在不同的包中。我们可以通过在`TicketManagementApplication`类中添加`@ComponentScan("com.packtpub")`来解决这个问题。这将识别不同子包中的所有`@service`和其他bean：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now you can see the result when you call the API (`http://localhost:8080/user`):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在调用API（`http://localhost:8080/user`）时看到结果：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: getUser – implementation
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: getUser - 实现
- en: Like we did earlier in [Chapter 4](6692606f-fda4-42d3-b9ce-22350d5691bb.xhtml),
    *CRUD Operations in Spring REST* we are going to implement `getUser` business
    logic in this section. Let's add the `getUser` method here by using Java 8 Streams.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[第4章](6692606f-fda4-42d3-b9ce-22350d5691bb.xhtml)中所做的那样，*Spring REST中的CRUD操作*，我们将在本节中实现`getUser`业务逻辑。让我们使用Java
    8 Streams在这里添加`getUser`方法。
- en: 'The `UserService` interface will look as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口如下所示：'
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `UserServiceImpl` class implementation is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserServiceImpl`类的实现如下：'
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the previous `getUser` method implementation, we used Java 8 Streams and
    lambda expressions to get the user by `userid`. Instead of using the traditional
    `for` loop, lambda expressions make it easier to fetch the details. In the preceding
    code, we check the user by filter criteria. If the user is matched, it will return
    the specific user; otherwise, it will create a dummy user with the `"Not available"`
    message.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的`getUser`方法实现中，我们使用了Java 8 Streams和lambda表达式来通过`userid`获取用户。与传统的`for`循环不同，lambda表达式使得获取详细信息更加容易。在前面的代码中，我们通过过滤条件检查用户。如果用户匹配，它将返回特定用户；否则，它将创建一个带有`"Not
    available"`消息的虚拟用户。
- en: 'The `UserController` class for the `getUser` method is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`getUser`方法的`UserController`类如下：'
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can verify the API by accessing `http://localhost:8080/user/100` in the
    client (use Postman or SoapUI to test it):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问客户端中的`http://localhost:8080/user/100`来验证API（使用Postman或SoapUI进行测试）：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: createUser – implementation
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: createUser - 实现
- en: Now we can add the code for creating a user option.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加创建用户选项的代码。
- en: 'The `UserService` interface will look as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口如下所示：'
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `UserServiceImpl` class implementation is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserServiceImpl`类的实现如下：'
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `UserController` class for the `createUser` method is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`createUser`方法的`UserController`类如下：'
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code will add the user in our map. Here, we have used `userid`
    and `username` as method parameters.  You can view the `userid` and `username`
    in the following API call:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将在我们的映射中添加用户。在这里，我们使用`userid`和`username`作为方法参数。您可以在以下API调用中查看`userid`和`username`：
- en: '![](img/7eeaca9a-ea63-487a-94ef-2274187f0065.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7eeaca9a-ea63-487a-94ef-2274187f0065.png)'
- en: 'When you call this method using SoapUI/Postman, you will get the following
    result. In this case, we used parameters (`userid`, `username`) instead of JSON
    input. This is just to simplify the process:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用SoapUI/Postman调用此方法时，您将获得以下结果。在这种情况下，我们使用参数（`userid`，`username`）而不是JSON输入。这只是为了简化流程：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: updateUser – implementation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: updateUser - 实现
- en: Now we can add the code for the update user option.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加更新用户选项的代码。
- en: 'The `UserService` interface will look as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口如下所示：'
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `UserServiceImpl` class implementation is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserServiceImpl`类的实现如下：'
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding method, we have used a Java Streams-based implementation to
    update the user. We simply apply the filter and check for whether the user is
    available or not. If the `userid` is not matched, it will throw `RuntimeException`.
    If the user is available, we will get the corresponding user, and then we update
    `username`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们使用了基于Java Streams的实现来更新用户。我们只需应用过滤器并检查用户是否可用。如果`userid`不匹配，它将抛出`RuntimeException`。如果用户可用，我们将获得相应的用户，然后更新`username`。
- en: 'The `UserController` class for the `updateUser` method is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateUser`方法的`UserController`类如下：'
- en: '[PRE29]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will try to update `username` from `David` to `Sammy` on `userid` with value
    `100`. We can check the API details from the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试将`userid`为`100`的`username`从`David`更新为`Sammy`。我们可以从以下截图中查看API的详细信息：
- en: '![](img/af20ba48-60bf-42c3-901f-8b2fa59d37d5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af20ba48-60bf-42c3-901f-8b2fa59d37d5.png)'
- en: 'When we call this API (the `UPDATE` method) using the SoapUI/Postman extension
    (`http://localhost:8080/user`), we will get the following result:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用SoapUI/Postman扩展（`http://localhost:8080/user`）调用此API（`UPDATE`方法）时，我们将得到以下结果：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can check the result by checking the `getAllUsers` API (the `GET` method)
    in the Postman extension (`http://localhost:8080/user`); you will get the following
    result:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Postman扩展中检查`getAllUsers` API（`GET`方法）（`http://localhost:8080/user`）来检查结果；您将得到以下结果：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: deleteUser – implementation
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: deleteUser - 实现
- en: Now we can add the code for the `deleteUser` option.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加`deleteUser`选项的代码。
- en: 'The `UserService` interface will look as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口如下所示：'
- en: '[PRE32]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `UserServiceImpl` class implementation is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserServiceImpl`类的实现如下：'
- en: '[PRE33]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `UserController` class for the `deleteUser` method is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserController`类的`deleteUser`方法如下所示：'
- en: '[PRE34]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'When you call this API (the `DELETE` method) using the Postman extension (`http://localhost:8080/user/100`),
    you will get the following result:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Postman扩展调用此API（`DELETE`方法）（`http://localhost:8080/user/100`）时，您将得到以下结果：
- en: '[PRE35]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can also check the `getAllUsers` method to verify that you have deleted
    the user.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以检查`getAllUsers`方法，以验证您是否已删除用户。
- en: File uploads – REST API
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件上传 - REST API
- en: File uploading becomes very easy with the support of the `NIO` libraries and
    Spring's `MultipartFile` options. Here, we will add the code for file uploading.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持`NIO`库和Spring的`MultipartFile`选项的支持下，文件上传变得非常容易。在这里，我们将添加文件上传的代码。
- en: 'The `FileUploadService` interface will look as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileUploadService`接口如下所示：'
- en: '[PRE36]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the preceding code, we just defined the method to let the concrete class
    (implementation class) override our method. We used `MultipartFile`  here to forward
    a file, such as a media file to fulfill our business logic.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们只是定义了一个方法，让具体类（实现类）覆盖我们的方法。我们在这里使用`MultipartFile`来传递文件，例如媒体文件，以满足我们的业务逻辑。
- en: 'The `FileUploadServerImpl` class implementation is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileUploadServerImpl`类的实现如下：'
- en: '[PRE37]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the preceding code, we set the location in the constructor itself, so when
    the Spring Boot App is initialized, it will set the correct path; if needed, it
    will create a specific folder on the mentioned location.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在构造函数中设置了位置，因此当Spring Boot App初始化时，它将设置正确的路径；如果需要，它将在指定位置创建一个特定的文件夹。
- en: 'In the `uploadFile` method, we get the files and clean them first. We use a
    Spring utility class called `StringUtils` to clean the file path. You can see
    the cleaning process here:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在`uploadFile`方法中，我们首先获取文件并进行清理。我们使用一个名为`StringUtils`的Spring实用类来清理文件路径。您可以在这里看到清理过程：
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If the file is empty, we simply throw an exception. You can check the exception
    here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件为空，我们只是抛出一个异常。您可以在这里检查异常：
- en: '[PRE39]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then comes the real file upload logic! We just use the `Files.copy` method
    to copy the file from the client to the server location. If any error happens,
    we throw `RuntimeException`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是真正的文件上传逻辑！我们只是使用`Files.copy`方法将文件从客户端复制到服务器位置。如果发生任何错误，我们会抛出`RuntimeException`：
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As the main implementation is done by the concrete class, the controller just
    passes the `MultipartFile` to the service. We have used the `POST` method in here,
    as it will be the perfect method to upload the file. Also, you can see that we
    used the `@Autowired` option to use the `service` method.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由于具体类已经完成了主要实现，控制器只是将`MultipartFile`传递给服务。我们在这里使用了`POST`方法，因为它是上传文件的完美方法。此外，您可以看到我们使用了`@Autowired`选项来使用`service`方法。
- en: 'The `FileController` class for the `uploadFile` method is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileController`类的`uploadFile`方法如下所示：'
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Testing the file upload
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试文件上传
- en: 'You can create an HTML file as follows and test the file upload API. You can
    also use any REST client to test this. I have given you this HTML file to simplify
    the testing process:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个HTML文件如下，并测试文件上传API。您还可以使用任何REST客户端来测试。我已经给您这个HTML文件来简化测试过程：
- en: '[PRE42]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered CRUD operations in Spring 5 (without Reactive
    support) by starting with basic resources and customizing them. Also, we have
    learned how to upload a file in Spring. In the next chapter, we will learn more
    about Spring Security and JWT (JSON Web Token).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了Spring 5中的CRUD操作（不包括响应式支持），从基本资源开始进行自定义。此外，我们还学习了如何在Spring中上传文件。在下一章中，我们将更多地了解Spring
    Security和JWT（JSON Web Token）。
