- en: Chapter 7. Spring Security with Wicket
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用Wicket的Spring Security
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security with Wicket – basic database authentication
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Wicket - 基本数据库身份验证
- en: Spring Security with Wicket – Spring form-based database authentication
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Wicket - Spring基于表单的数据库身份验证
- en: Spring Security with Wicket – customized JSP form-based database authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Wicket - 自定义JSP基于表单的数据库身份验证
- en: Spring authentication with Wicket authorization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket授权的Spring身份验证
- en: Multitenancy using Wicket and Spring Security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket和Spring Security的多租户
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Before starting up Wicket, we were checking the available versions. The latest
    one is 6.9\. It is clearly mentioned in the Apache Wicket site that the latest
    projects should use Version 6.9 as the base. We have NetBeans 7.1 after downloading
    the Wicket plugin for net beans. We found that the net beans Wicket plugin supports
    Version 1.5 of Wicket.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动Wicket之前，我们正在检查可用版本。最新版本是6.9。在Apache Wicket网站上明确指出，最新项目应该使用版本6.9作为基础。我们在下载了NetBeans
    7.1后，发现NetBeans Wicket插件支持Wicket的1.5版本。
- en: We prefer using the latest stable version; it will have many bug fixes and upgrades
    and will make it easier to develop.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更喜欢使用最新的稳定版本；它将有许多错误修复和升级，并且将更容易开发。
- en: Wicket also uses the *Wicket filter* to dispatch requests and responses. Just
    as with GWT and Vaadin applications, which had servlet, which expected some parameters
    such as UI class to get initialized, we need to provide a class name of the class
    that extends the `Web Application` class as a parameter to the filter. Then there
    are classes, which extend the `WebPage` class. It's a good convention and practice
    to create an HTML page with the same name as the class that extends the `WebPage`
    class.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Wicket还使用*Wicket过滤器*来分派请求和响应。就像GWT和Vaadin应用程序一样，它们有servlet，期望一些参数，如UI类来初始化，我们需要提供一个扩展`Web
    Application`类的类名作为过滤器的参数。然后有一些类，它们扩展了`WebPage`类。创建一个与扩展`WebPage`类相同名称的HTML页面是一个很好的惯例和实践。
- en: Wicket uses the multilevel inheritance approach. We have to extend the `Wicket`
    class to achieve various scenarios. It also has a built-in authentication and
    authorization API.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Wicket使用多级继承方法。我们必须扩展`Wicket`类以实现各种场景。它还具有内置的身份验证和授权API。
- en: Setting up a database
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: 'The following code will set up a database:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将设置数据库：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting up the Wicket application
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Wicket应用程序
- en: 'The following statement is the Maven command that needs to be executed. You
    should have Maven installed on your machine and should have a local repository.
    By default, it is in `.m2\repository`. After running the command, you should get
    build success that gives us a green signal to start with Wicket implementation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句是需要执行的Maven命令。您应该在您的机器上安装Maven，并且应该有一个本地存储库。默认情况下，它在`.m2\repository`中。运行命令后，您应该获得构建成功的信号，这将让我们开始Wicket实现：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following output is visible on the command prompt:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符上可见以下输出：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following commands will finish the complete set up of Wicket. They will
    also download the Wicket framework source files into the repository.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将完成Wicket的完整设置。它们还将下载Wicket框架源文件到存储库中。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Access the following URL:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下URL：
- en: '`http://localhost:8080/spring-security-wicket/`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/spring-security-wicket/`'
- en: The URL will display the welcome page of the Wicket application. Wicket application
    setup is ready.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该URL将显示Wicket应用程序的欢迎页面。Wicket应用程序设置已准备就绪。
- en: Wicket also comes with its own authentication and authorization API. Let's see
    how we can use it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Wicket还配备了自己的身份验证和授权API。让我们看看如何使用它。
- en: Spring Security with Wicket – basic database authentication
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security与Wicket - 基本数据库身份验证
- en: Our aim is to do a simple basic authentication on the Wicket application. I
    want a login dialog to pop-up when we access the URL of the Wicket application.
    On success it should get redirected to the home page. We need to add Spring Security
    dependencies to the `pom.xml` file and rebuild the Wicket application. The next
    step will be configuring the spring listener in the `web.xml` file. We also need
    to add the `applicationContext.xml` file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是在Wicket应用程序上进行简单的基本身份验证。当我们访问Wicket应用程序的URL时，我希望出现登录对话框。成功后，它应该重定向到主页。我们需要向`pom.xml`文件添加Spring
    Security依赖项并重新构建Wicket应用程序。下一步将是在`web.xml`文件中配置spring监听器。我们还需要添加`applicationContext.xml`文件。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Update the `pom.xml` file with Spring dependency.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring依赖项更新`pom.xml`文件。
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`applicationContext.xml`文件。必须将其命名为`applicationContext`，否则我们将在控制台中收到错误消息。
- en: Edit the `web.xml` with Spring listeners.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring监听器编辑`web.xml`。
- en: Create a `database-details.xml` file and add the database details.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`database-details.xml`文件并添加数据库详细信息。
- en: Add the `db-details.xml` file as `context-param` to the spring listener.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`db-details.xml`文件添加为`context-param`到spring监听器。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps for implementing Spring Security with Wicket to
    demonstrate basic authentication where credentials are stored in the database:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Wicket实现Spring Security以演示基本身份验证的步骤，其中凭据存储在数据库中：
- en: 'Add dependency to the `POM.xml` file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`POM.xml`文件添加依赖项：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the `Web.xml` file with Spring listener and the Spring filter with Wicket
    filter:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring监听器和Spring过滤器更新`Web.xml`文件与Wicket过滤器：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Edit the `applicationContext.xml` file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a simple configuration for basic authentication. With this configuration
    we expect a login dialog box before showing the Wicket application. I have created
    a new role, seller.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的基本身份验证配置。通过此配置，我们期望在显示Wicket应用程序之前出现登录对话框。我创建了一个新角色，卖家。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://localhost:8080/spring-security-wicket/`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/spring-security-wicket/`'
- en: This is the initial setup example of integrating Spring Security with Wicket.
    We have demonstrated the basic authentication mechanism. Access to the Wicket
    application is interrupted with Spring Security by the Login form. On successful
    authentication, the user gains access to the wicket application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将Spring Security与Wicket集成的初始设置示例。我们已经演示了基本的身份验证机制。通过登录表单，Spring Security中断对Wicket应用程序的访问。成功认证后，用户将获得对Wicket应用程序的访问权限。
- en: 'The page displayed is shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的页面如下截图所示：
- en: '![How it works...](img/7525OS_07_01.jpg)![How it works...](img/7525OS_07_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_07_01.jpg)![它是如何工作的...](img/7525OS_07_02.jpg)'
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Wicket – spring form-based authentication* recipe
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket的Spring Security-Spring基于表单的身份验证
- en: The *Spring Security with Wicket – customized JSP form-based authentication*
    recipe
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket的Spring Security-定制的JSP基于表单的身份验证
- en: The *Spring authentication with Wicket authorization* recipe
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket授权的Spring身份验证
- en: The *Multitenancy using Wicket and Spring Security* recipe
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket和Spring Security的多租户
- en: Spring Security with Wicket – Spring form-based database authentication
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wicket的Spring Security-Spring基于表单的数据库身份验证
- en: In our previous recipe we found the Wicket 6.9 is very much compatible with
    Spring Security and it was very easy to integrate. All we did was to add spring
    dependency and we configured the `applicationContext.xml` file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，我们发现Wicket 6.9与Spring Security非常兼容，并且很容易集成。我们所做的就是添加spring依赖项并配置`applicationContext.xml`文件。
- en: In this section we shall use the Spring form to do authentication. We expect
    the Spring form to show up in place of the dialog box and do the authentication
    for us.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Spring表单进行身份验证。我们期望Spring表单出现在对话框的位置，并为我们进行身份验证。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a Maven Wicket project: `spring-security-wicket_springform`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Maven Wicket项目：`spring-security-wicket_springform`。
- en: Update the `pom.xml` file with Spring dependency.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring依赖项更新`pom.xml`文件。
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`applicationContext.xml`文件。必须将其命名为`applicationContext`，否则我们将在控制台中收到错误消息。
- en: Edit the `web.xml` with Spring listeners.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`web.xml`，使用Spring监听器。
- en: Create a database `details.xml` file and add the database details.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据库`details.xml`文件，并添加数据库详细信息。
- en: Add the file as a context parameter to the Spring listener.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件添加为Spring监听器的上下文参数。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `applicationContext.xml` file using the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码编辑`applicationContext.xml`文件：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a simple configuration for form authentication. With this configuration
    we expect a **Login Page** before showing the Wicket application. The only change
    is that we have removed the `<http-basic>` tag for the previous application. Also
    observe the URL, which will have a session ID.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的表单身份验证配置。使用此配置，我们期望在显示Wicket应用程序之前有一个**登录页面**。唯一的变化是我们已经删除了先前应用程序的`<http-basic>`标签。还要注意URL，它将具有会话ID。
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://localhost:8080/spring-security-wicket_springform/`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/spring-security-wicket_springform/`'
- en: In this example we are showing how to invoke Spring's internal login form in
    a Wicket application. When we access the Wicket application, we will be redirected
    to Spring's own login page. The user enters their username and password which
    will be authenticated and authorized by the Spring's authentication provider.
    On success, the user gains access to the Wicket application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们展示了如何在Wicket应用程序中调用Spring的内部登录表单。当我们访问Wicket应用程序时，我们将被重定向到Spring自己的登录页面。用户输入他们的用户名和密码，这将由Spring的身份验证提供者进行验证和授权。成功后，用户将获得对Wicket应用程序的访问权限。
- en: 'You should see the following screen when you access the above URL:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问上述URL时，您应该看到以下屏幕：
- en: '![How it works...](img/7525OS_07_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_07_03.jpg)'
- en: See also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Wicket – customized JSP form-based authentication*
    recipe
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket的Spring Security-定制的JSP基于表单的身份验证
- en: The *Spring authentication with Wicket authorization* recipe
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket授权的Spring身份验证
- en: The *Multitenancy using Wicket and Spring Security* recipe
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket和Spring Security进行多租户
- en: Spring Security with Wicket – customized JSP form-based database authentication
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wicket的Spring Security-定制的JSP基于表单的数据库身份验证
- en: The previous two recipes were to test the compatibility of Wicket with Spring
    Security. It also demonstrates how easy it is to integrate spring with Wicket.
    We learned from our two Wicket recipes that we can easily use Spring-basic and
    Spring-form-based authentication with a database and the same can be extended
    to LDAP as well.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个示例是为了测试Wicket与Spring Security的兼容性。它还演示了将Spring与Wicket集成的简单性。我们从我们的两个Wicket示例中学到，我们可以很容易地使用基于Spring和基于表单的身份验证与数据库，并且同样可以扩展到LDAP。
- en: In this recipe we are going to add a customized JSP form. We expect the Wicket
    application to call our JSP form for login. If the developer doesn't want to create
    a Wicket form, they can use this approach. This approach also holds good for GWT
    and Vaadin.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将添加一个定制的JSP表单。我们期望Wicket应用程序调用我们的JSP表单进行登录。如果开发人员不想创建一个Wicket表单，他们可以使用这种方法。这种方法也适用于GWT和Vaadin。
- en: You also need to give anonymous access to the login page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要为登录页面提供匿名访问权限。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a Maven Wicket project: `spring-security-wicket_customized_jsp`.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Maven Wicket项目：`spring-security-wicket_customized_jsp`。
- en: Update the `pom.xml` file with Spring dependency.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring依赖项更新`pom.xml`文件。
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`applicationContext.xml`文件。必须将其命名为`applicationContext`，否则我们将在控制台中收到错误消息。
- en: Edit the `web.xml` with Spring listeners.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`web.xml`，使用Spring监听器。
- en: Also add the `login.js`p configuration as a servlet to `web.xml`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要将`login.js`p配置添加为`web.xml`中的servlet。
- en: Create a database, `details.xml` file, and add the database details.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据库，`details.xml`文件，并添加数据库详细信息。
- en: Add the file as a context parameter to the Spring listener.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件添加为Spring监听器的上下文参数。
- en: Also, you need to add a `login.jsp`; you can use the `login.jsp` file used in
    the previous chapter.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，您需要添加一个`login.jsp`；您可以使用上一章中使用的`login.jsp`文件。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The following steps are for integrating Spring Security with the Wicket framework
    to demonstrate form-based authentication with a customized JSP:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤是为了将Spring Security与Wicket框架集成，以演示使用自定义JSP的基于表单的身份验证：
- en: 'Edit the `applicationContext.xml` file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The customized `login.jsp` has been configured as an anonymous user in the `applicationContext.xml`
    file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`login.jsp`已在`applicationContext.xml`文件中配置为匿名用户。'
- en: 'Edit the `web.xml` file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`web.xml`文件：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `login.jsp` has been configured as a servlet.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`login.jsp`已配置为一个servlet。'
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Now access the following URL:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://localhost:8080/spring-security-wicket_springform/`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/spring-security-wicket_springform/`'
- en: In this example we are integrating the Wicket application with our own `login.jsp`
    file to do the authentication and authorization. When the user tries to access
    the Wicket application, Spring Security interrupts the user from accessing the
    application that provides the jsp page created and configured in the `applicationContext.xml`.
    On submit, the Spring Security authentication action is triggered, which does
    the authentication and authorization. On success, the user gains access to the
    Wicket application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将Wicket应用与我们自己的`login.jsp`文件集成，以进行身份验证和授权。当用户尝试访问Wicket应用时，Spring Security会阻止用户访问提供在`applicationContext.xml`中创建和配置的jsp页面的应用。提交后，将触发Spring
    Security身份验证操作，进行身份验证和授权。成功后，用户将获得访问Wicket应用的权限。
- en: 'You should see the following screenshot when you access this URL:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 访问此URL时，您应该看到以下屏幕截图：
- en: '![How it works...](img/7525OS_07_03.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_03.jpg)'
- en: See also
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring authentication with Wicket authorization* recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Wicket授权的Spring身份验证*示例'
- en: The *Multitenancy using Wicket and Spring Security* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Wicket和Spring Security进行多租户*示例'
- en: Spring authentication with Wicket authorization
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wicket授权的Spring身份验证
- en: So far we have seen various options to use Spring Security outside the Wicket
    application. We shall now see how we can create a security form in the wicket
    framework and use it with the Spring framework with two different roles. The recipe
    also demonstrates how we can use Spring beans in the Wicket application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了在Wicket应用之外使用Spring Security的各种选项。现在我们将看到如何在wicket框架中创建安全表单，并在Spring框架中使用它来实现两种不同的角色。该示例还演示了如何在Wicket应用中使用Spring
    bean。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作完成。
- en: 'Create a Maven Wicket project: `spring-security-wicket`.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Maven Wicket项目：`spring-security-wicket`。
- en: Update the `pom.xml` file with Spring dependency.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring依赖项更新`pom.xml`文件。
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`applicationContext.xml`文件。必须将其命名为`applicationContext`，否则将在控制台中收到错误消息。
- en: Add a `spring-wicket-security` dependency.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个`spring-wicket-security`依赖项。
- en: Edit the `web.xml` with Spring listeners.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring监听器编辑`web.xml`。
- en: Create `EditorPage.html` and `AuthorPage.html` and corresponding `EditorPage.java`
    and `AuthorPage.java` respectively. The author page and the editor page are similar
    pages but invoked based on roles.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分别创建`EditorPage.html`和`AuthorPage.html`以及相应的`EditorPage.java`和`AuthorPage.java`。作者页面和编辑页面是相似的页面，但根据角色调用。
- en: Create a `HomePage.java` and `HomePage.html`.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`HomePage.java`和`HomePage.html`。
- en: Create `SignInPage.html` and `SignInPage.java`.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`SignInPage.html`和`SignInPage.java`。
- en: Subclass the `AuthenticatedWebSession` class and override the methods in the
    super class. By default it uses Wicket authentication, so override it to use Spring
    authentication.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类化`AuthenticatedWebSession`类，并覆盖超类中的方法。默认情况下，它使用Wicket身份验证，因此覆盖它以使用Spring身份验证。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: The following step is for implementing authentication with Spring security and
    authorization with spring Wicket editing the `application-Context.xml`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用Spring安全进行身份验证和使用spring Wicket进行授权，编辑`application-Context.xml`。
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Edit the `spring-wicket-security.xml` file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`spring-wicket-security.xml`文件：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Edit the `AuthorPage.java` file:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`AuthorPage.java`文件：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Edit the `SigInPage.java` file:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`SigInPage.java`文件：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Edit the `HomePage.java` file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`HomePage.java`文件：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Editing the `MyWebSession.java` file:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`MyWebSession.java`文件：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The implementation is very simple; all that we need to do is to have a Wicket
    sign-in form. After clicking on **submit** we need to get an authenticated session,
    and this approach will give us an option to integrate Spring security with the
    Wicket application where we have created a login form using the Wicket application.
    Spring authenticates the user credentials on success and communicates with the
    Wicket framework to show the respective authorized pages.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 实现非常简单；我们需要做的就是拥有一个Wicket登录表单。单击**提交**后，我们需要获得经过身份验证的会话，这种方法将为我们提供一个选项，将Spring安全集成到我们使用Wicket应用创建的登录表单中。成功后，Spring将验证用户凭据，并与Wicket框架通信以显示相应的授权页面。
- en: The work flow of the Wicket application with Spring security integration is
    explained as follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Wicket应用与Spring安全集成的工作流程如下所述。
- en: 'When the user clicks on the URL: `http://localhost:8080/spring-security-wicket/`
    , the user is allowed to access the home page. The home page shows two links,
    which indicates two different roles and users. After successful authentication
    the user will be authorized to use respective pages based on the roles. These
    pages are shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户单击URL：`http://localhost:8080/spring-security-wicket/`时，允许用户访问主页。主页显示两个链接，表示两个不同的角色和用户。成功验证后，用户将被授权使用基于角色的相应页面。这些页面显示在以下屏幕截图中：
- en: '![How it works...](img/7525OS_07_06.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_06.jpg)'
- en: The home page on application startup
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 应用启动时的主页
- en: '![How it works...](img/7525OS_07_07.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_07.jpg)'
- en: Signin Page
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面
- en: '![How it works...](img/7525OS_07_05.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_05.jpg)'
- en: Author page
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 作者页面
- en: '![How it works...](img/7525OS_07_08.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_08.jpg)'
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Multitenancy using Wicket and Spring Security* recipe
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Wicket和Spring Security实现多租户
- en: Multitenancy using Wicket and Spring Security
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Wicket和Spring Security实现多租户
- en: Multitenancy has become a popular word with cloud. In a multitenancy setup,
    each tenant will have a separate datasource. We need to create two different data
    sources and look ups for the datasource. Let's use a simple Wicket application
    with a customized JSP, which will have a tenant drop down menu. The user selects
    a tenant from the drop down menu and a datasource corresponding to the tenant
    will be set.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户已成为云中的流行词。在多租户设置中，每个租户将有一个单独的数据源。我们需要为数据源创建两个不同的数据源和查找。让我们使用一个简单的Wicket应用程序和一个自定义的JSP，其中将有一个租户下拉菜单。用户从下拉菜单中选择一个租户，将设置与租户对应的数据源。
- en: I am using NetBeans IDE, which will recognize the Maven projects easily. NetBeans
    also comes with a glassfish application server and derby database.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用NetBeans IDE，它可以轻松识别Maven项目。NetBeans还带有glassfish应用服务器和derby数据库。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Update the `login.jsp` file
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`login.jsp`文件
- en: Update the `pom.xml` file with derby database dependency
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用derby数据库依赖更新`pom.xml`文件
- en: Edit the `applicationContext.xml`
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`
- en: Edit the `spring-security.xml`
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`spring-security.xml`
- en: Edit the `web.xml` file
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`web.xml`文件
- en: Create a filter to capture the tenant ID
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个过滤器来捕获租户ID
- en: Also create two databases in derby
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还在derby中创建两个数据库
- en: Create two tables `USERS` and `USER_ROLES` in both databases
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在两个数据库中创建两个表`USERS`和`USER_ROLES`
- en: Add columns in `USERS` (`USER_ID`, `USERNAME`, and `PASSWORD`)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`USERS`（`USER_ID`，`USERNAME`和`PASSWORD`）中添加列
- en: Add columns in `USER_ROLES` (`USER_ID`, `USER_ROLE_ID`, and `AUTHORITY`)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`USER_ROLES`（`USER_ID`，`USER_ROLE_ID`和`AUTHORITY`）中添加列
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps are for implementing multitenancy in a Wicket application
    with Spring Security API:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于在Wicket应用程序中使用Spring Security API实现多租户：
- en: 'Edit the `application-Context.xml` file with two data sources:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`application-Context.xml`文件中编辑两个数据源：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Edit the `spring-wicket-security.xml` file and also add `ExceptionMappingAuthenticationFailureHandler`
    bean to capture SQL exceptions:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`spring-wicket-security.xml`文件，并添加`ExceptionMappingAuthenticationFailureHandler`
    bean来捕获SQL异常：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Edit the `login.jsp` file:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`login.jsp`文件：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Edit the `TenantRoutingDataSource.java` file to route the tenant to a different
    datasource. The class is a subclass of spring's `AbstractRoutingDataSource`. It
    is used to set the datasource.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`TenantRoutingDataSource.java`文件以将租户路由到不同的数据源。该类是spring的`AbstractRoutingDataSource`的子类。它用于设置数据源。
- en: 'The URL: [http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: URL：[http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html)。
- en: '[PRE19]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Edit `MultitenantFilter` to capture the tenant type and to set the datasource:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`MultitenantFilter`以捕获租户类型并设置数据源：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When the user tries to access the application, they will be redirected to the
    login form in which the user enters their user name and password and selects the
    tenant. This can also be a company name or location based on business needs. Based
    on the tenant selected, Spring sets the authentication provider. The `MultitenantFilter`
    with `TenantRoutingDataSource` class sets the tenant information in the `threadLocalUtil.`
    The user is authenticated with the tenant data source and is taken to the home
    page.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试访问应用程序时，他们将被重定向到登录表单，在该表单中用户输入他们的用户名和密码并选择租户。这也可以是根据业务需求的公司名称或位置。根据所选的租户，Spring设置认证提供程序。`MultitenantFilter`与`TenantRoutingDataSource`类在`threadLocalUtil`中设置租户信息。用户使用租户数据源进行身份验证，并进入主页。
- en: 'Login page on application start up will look as shown in the following screenshots:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动时的登录页面将如下截图所示：
- en: '![How it works...](img/7525OS_07_10.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_10.jpg)'
- en: Login.page
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面
- en: '![How it works...](img/7525OS_07_11.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_11.jpg)'
- en: Exception if tenant not
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果租户不存在，则出现异常
- en: '![How it works...](img/7525OS_07_12.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_07_12.jpg)'
- en: Selected bad credential exception displayed
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 显示选择的错误凭证异常
