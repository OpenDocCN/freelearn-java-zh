- en: Solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: This section contains the worked-out answers for the activities present at the
    end of each chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含每个章节末尾活动的解答。
- en: 'Chapter 1: The Spring Project and Framework'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：Spring 项目和框架
- en: The following are the solutions for this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的解决方案。
- en: 'Activity: Project Lombok in Action'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：Lombok 实战
- en: '**Steps for Completion**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: 'Create a `BeanData` class in the package that contains the `Application` class:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含 `Application` 类的包中创建一个 `BeanData` 类：
- en: Add a private final String field named `Bean`.
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Bean` 的私有 final String 字段。
- en: Add a private final String field named `BeanClass`.
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个名为 `BeanClass` 的私有 final String 字段。
- en: Insert the `@Data` and `@RequiredArgs` annotations in the class.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类中插入 `@Data` 和 `@RequiredArgs` 注解。
- en: 'Take a look at the following screenshot:'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看一下下面的截图：
- en: '![](img/d8df7b58-1871-40f2-b6c6-eae2b6c87e48.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8df7b58-1871-40f2-b6c6-eae2b6c87e48.png)'
- en: 'Fill the data structure:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充数据结构：
- en: Open the main application file that you enhanced with the loop over the Beans
    earlier.
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开你之前用 Beans 的循环增强的主应用程序文件。
- en: Add a list for `BeanData` instances.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `BeanData` 实例添加一个列表。
- en: Fill the list with the corresponding data for each Bean.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用每个 Bean 的对应数据填充列表。
- en: You can fetch the Bean from the context using the Bean name with the `getBean`
    method, for example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `getBean` 方法通过 Bean 名称从上下文中获取 Bean，例如。
- en: 'Print the `BeanData` list content:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 `BeanData` 列表内容：
- en: After the Bean list is filled, add another loop right after that loops over
    the `BeanData` list.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Bean 列表填充完毕后，在之后立即添加另一个循环，该循环遍历 `BeanData` 列表。
- en: Use `System.out.println` to output the name and class of the Bean using the
    generated `Getters`.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `System.out.println` 通过生成的 `Getters` 输出 Bean 的名称和类。
- en: 'Chapter 2: Building a Spring Application'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：构建 Spring 应用程序
- en: The following are the solutions for this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的解决方案。
- en: 'Activity: Autowiring and Configurations'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：自动装配和配置
- en: '**Steps for Completion**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create the `ConfigurationProperty` class `GreetingProperties` to read the configuration
    value for the suffix and add a property value to the configuration file.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ConfigurationProperty` 的类 `GreetingProperties`，用于读取后缀的配置值，并将属性值添加到配置文件中。
- en: Create the greeting service
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建问候服务
- en: Inject the class in the service
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务中注入该类
- en: Create a public method that creates the greeting with the greeter's name as
    the parameter.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个公共方法，该方法使用问候者的名字作为参数来创建问候语。
- en: In the Application class, add a config method which executes the greeting method
    and print out the result
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Application` 类中添加一个配置方法，该方法执行问候方法并打印结果
- en: 'Advanced:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高级：
- en: Add an autowired field in the Application class
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Application` 类中添加一个自动装配的字段
- en: Execute greeting method when dependencies of the Application class are set using
    a different mechanism.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用不同的机制设置 `Application` 类的依赖项时执行问候方法。
- en: 'Chapter 3: Testing Spring Applications'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：测试 Spring 应用程序
- en: The following are the solutions for this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的解决方案。
- en: 'Activity: Writing Integration Tests'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：编写集成测试
- en: '**Steps for Completion**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create a new integration test class on your own for the `BlogService` class.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `BlogService` 类创建一个新的集成测试类。
- en: Create various tests for the `retrievePagedBlogEntries` method of the `BlogService`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `BlogService` 的 `retrievePagedBlogEntries` 方法创建各种测试。
- en: Create a happy path test (everything works as it should with simple test data).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个快乐路径测试（使用简单的测试数据，一切按预期工作）。
- en: Create tests for interesting parameter combinations (for example values like
    0, -1 etc. with the behavior you expect.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为有趣的参数组合创建测试（例如，使用你期望的行为的值，如 0、-1 等）。
- en: Fix the service code to make it match your expectations.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复服务代码以使其符合你的预期。
- en: 'Advanced: Create different types of tests, have a look at them and analyze
    the dis-/advantages. (Omit the type you created in *step 2*)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 高级：创建不同类型的测试，查看它们并分析其优缺点。（省略你在 *步骤 2* 中创建的类型）
- en: unit-tests without mockito
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用 mockito 的单元测试
- en: unit-tests with mockito
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 mockito 的单元测试
- en: integration-tests without any mocking
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无任何模拟的集成测试
- en: integration-tests with `MockBeans`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `MockBeans` 进行集成测试
- en: integration-tests with `SpyBeans`
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `SpyBeans` 进行集成测试
- en: Go to [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4) to access the code for
    the `BlogService` test files.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4) 访问 `BlogService` 测试文件的代码。
- en: 'Chapter 4: The MVC Pattern'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：MVC 模式
- en: The following are the solutions for this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的解决方案。
- en: 'Activity: Create Your First Web MVC Controller'
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：创建你的第一个 Web MVC 控制器
- en: '**Steps for Completion**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: 'Go to [https://start.spring.io](https://start.spring.io) and enter the following
    values:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://start.spring.io](https://start.spring.io)并输入以下值：
- en: 'Group: `com.packt.springboot`'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组：`com.packt.springboot`
- en: 'Artifact: `blogmania`'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工件：`blogmania`
- en: 'In the Search for dependencies field enter the following dependencies pressing
    enter after each:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“搜索依赖项”字段中输入以下依赖项，每个依赖项后按回车键：
- en: Web, Thymeleaf, Devtools
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Web, Thymeleaf, Devtools
- en: 'You should see the following screen:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下屏幕：
- en: '![](img/60e6745d-b269-4de4-9176-e65a5b2ff0bf.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60e6745d-b269-4de4-9176-e65a5b2ff0bf.png)'
- en: Press Generate Project to download a ZIP file containing the initial project
    files.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击生成项目以下载包含初始项目文件的ZIP文件。
- en: Now unzip the downloaded file which is called `blog.zip` into your project folder.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在解压下载的文件，该文件名为`blog.zip`，到您的项目文件夹中。
- en: Add the dependency for the Bootstrap webjars archive to the file `pom.xml` in
    the `<dependencies>` section.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`文件的`<dependencies>`部分添加对Bootstrap webjars存档的依赖项。
- en: Go to [https://bit.ly/2QoVEBX](https://bit.ly/2QoVEBX) to access the code for
    the `pom.xml` file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2QoVEBX](https://bit.ly/2QoVEBX)访问`pom.xml`文件的代码。
- en: Create a file `welcome.html` in the `src/main/resource/templates` folder.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main/resource/templates`文件夹中创建一个名为`welcome.html`的文件。
- en: Go to [https://bit.ly/2x6w90k](https://bit.ly/2x6w90k) to access the code for
    the `welcome.html` file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2x6w90k](https://bit.ly/2x6w90k)访问`welcome.html`文件的代码。
- en: Add a controller to render the view. Create the `WelcomeController` class in
    a package called `com.packt.springboot.blogmania.controller`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制器来渲染视图。在名为`com.packt.springboot.blogmania.controller`的包中创建`WelcomeController`类。
- en: Go to [https://bit.ly/2OhxZlo](https://bit.ly/2OhxZlo) to access the code for
    the `WelcomeController.java` file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2OhxZlo](https://bit.ly/2OhxZlo)访问`WelcomeController.java`文件的代码。
- en: 'Now start the application by using Maven:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过Maven启动应用程序：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use your browser to navigate to `http://localhost:8080`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器导航到`http://localhost:8080`：
- en: '![](img/ea6fd632-3d4f-4e1f-9c0f-f672fe8b0851.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea6fd632-3d4f-4e1f-9c0f-f672fe8b0851.png)'
- en: 'Chapter 5: Displaying Information Using Web Pages'
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：使用网页显示信息
- en: The following are the solutions for this chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该章节的解决方案。
- en: 'Activity: Displaying the Details of a Blog-Post'
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：显示博客文章的详细信息
- en: '**Steps for Completion**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create an `@Controller` annotated class. Name the class `BlogPostController`.
    Inject the `BlogPostService` as you have learned it in the previous chapter.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`@Controller`注解的类。将类命名为`BlogPostController`。按照您在上一章中学到的知识注入`BlogPostService`。
- en: Add a handling method to the `BlogPostController` called `displayBlogPostBySlug()`
    that gets the slug of the post to be retrieved from the query. Set the mapping
    to "`/{slug}`" and use a path variable slug to find the blog post. Throw a `BlogPostNotFoundException`
    when a blogpost with the given slug could not be found.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`BlogPostController`添加一个名为`displayBlogPostBySlug()`的处理方法，该方法从查询中获取要检索的文章的slug。设置映射为"`/{slug}`"，并使用路径变量slug查找博客文章。当找不到具有给定slug的博客文章时，抛出`BlogPostNotFoundException`。
- en: Retrieve the blog post from the `BlogPostService` by using the `findBySlug()`
    method.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`findBySlug()`方法从`BlogPostService`检索博客文章。
- en: Return a `ModelAndView` instance from the `displayBlogPostBySlug()` method.
    Set the view name to **blogpost** and add the blog post returned from the `BlogPostService`
    as an attribute named `blogPost` to the model.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`displayBlogPostBySlug()`方法返回一个`ModelAndView`实例。设置视图名为**blogpost**，并将从`BlogPostService`返回的博客文章作为名为`blogPost`的属性添加到模型中。
- en: Go to [https://bit.ly/2xaKvfc](https://bit.ly/2xaKvfc) to access the code for
    the `BlogPostController.java` file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2xaKvfc](https://bit.ly/2xaKvfc)访问`BlogPostController.java`文件的代码。
- en: Create a view template file `src/main/resources/templates/blogposts/details.html`.
    You can use the file `empty.html` in the sample directory for the layout code
    of the page.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main/resources/templates/blogposts/details.html`创建一个视图模板文件。您可以使用样本目录中的`empty.html`文件作为页面布局代码。
- en: Go to [https://bit.ly/2Qrh4OL](https://bit.ly/2Qrh4OL) to access the code for
    the `details.html` file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2Qrh4OL](https://bit.ly/2Qrh4OL)访问`details.html`文件的代码。
- en: Start the application using the `mvnw spring-boot:run` command
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mvnw spring-boot:run`命令启动应用程序
- en: Open the URL `http://localhost:8080/blogposts/my-first-post`
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开URL `http://localhost:8080/blogposts/my-first-post`
- en: 'Obtain the following output screen:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获得以下输出屏幕：
- en: '![](img/471580fe-82f9-4ebc-a1c8-6dbe83dc319b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/471580fe-82f9-4ebc-a1c8-6dbe83dc319b.png)'
- en: 'Chapter 6: Passing Data Between the View and the Controller'
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：在视图和控制器之间传递数据
- en: The following are the solutions for this chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该章节的解决方案。
- en: 'Activity: Creating a Page to Enter a New Blog Post'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：创建一个页面以输入新的博客文章
- en: '**Steps for Completion**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Open the project at [https://bit.ly/2Ft1iBQ](https://bit.ly/2Ft1iBQ).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于[https://bit.ly/2Ft1iBQ](https://bit.ly/2Ft1iBQ)的项目。
- en: Open the yet empty model class Category in the `package com.packt.springboot.blogmania.category`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`package com.packt.springboot.blogmania.category`中的尚为空的模型类`Category`。
- en: Go to [https://bit.ly/2xadDDh](https://bit.ly/2xadDDh) to access the complete
    code for the `Category.java` file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2xadDDh](https://bit.ly/2xadDDh)访问`Category.java`文件的完整代码。
- en: Add an attribute of type String called `name` to the model class and use Lombok
    annotations to generate all methods of a data class.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型类中添加一个名为`name`的字符串类型的属性，并使用Lombok注解生成数据类的所有方法。
- en: Open the controller class called `CategoryController` in the same package as
    the Category class. You will find an empty Spring controller.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开与类别类位于同一包中的控制器类`CategoryController`。你将找到一个空的Spring控制器。
- en: Go to [https://bit.ly/2x6YMKG](https://bit.ly/2x6YMKG) to access the complete
    code for the `CategoryController.java` file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2x6YMKG](https://bit.ly/2x6YMKG)访问`CategoryController.java`文件的完整代码。
- en: Add a field called `allCategories` of type `List<Category>` that will hold all
    available categories. Don’t forget to initialize the list (with an `ArrayList<>`).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`allCategories`的字段，类型为`List<Category>`，将包含所有可用的类别。别忘了初始化列表（使用`ArrayList<>`）。
- en: Add a method `renderCategoryForm()` to initialize a new empty category and add
    it to the model as an attribute named `category`. This method should be mapped
    to the get request with the URI "`/categories/new`". Render a view named "`/categories/form`".
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`renderCategoryForm()`的方法以初始化一个新的空类别并将其添加到模型中作为名为`category`的属性。此方法应映射到带有URI
    "`/categories/new`"的GET请求。渲染名为"`/categories/form`"的视图。
- en: Add a method `addCategory()` with a post request mapping for "`/categories`".
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为"`/categories`"添加一个`addCategory()`方法，用于处理POST请求映射。
- en: This method will receive a Category as a parameter and add it to the list of
    all categories. Return "`redirect:/`" as the view name.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法将接收一个类别作为参数并将其添加到所有类别的列表中。返回视图名称为"`redirect:/`"。
- en: Implement the currently empty method retrieveAllCategories() to return the list
    of all categories. You may want to return a copy of the list to prevent clients
    from changing the original list.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现目前为空的`retrieveAllCategories()`方法以返回所有类别的列表。你可能想要返回列表的副本以防止客户端更改原始列表。
- en: Open the file called src/main/resources/categories/form.html that will contain
    the form for the category.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开包含类别表单的文件`src/main/resources/categories/form.html`。
- en: Go to [https://bit.ly/2NHbtFw](https://bit.ly/2NHbtFw) to access the complete
    code for the `form.html` file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2NHbtFw](https://bit.ly/2NHbtFw)访问`form.html`文件的完整代码。
- en: Add a form to enter the category name. Use the action `@{/categories}` in the
    form. Feel free to use Bootstrap to style the input elements.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个表单以输入类别名称。在表单中使用`@{/categories}`动作。请随意使用Bootstrap来美化输入元素。
- en: Open the file `src/main/resources/blogposts/form.html` containing the form to
    edit a blogpost.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开包含表单以编辑博客文章的文件`src/main/resources/blogposts/form.html`。
- en: Go to [https://bit.ly/2NHbtFw](https://bit.ly/2NHbtFw) to access the complete
    code for the `form.html` file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2NHbtFw](https://bit.ly/2NHbtFw)访问`form.html`文件的完整代码。
- en: Add a drop-down field to the form with `th:field="*{categoryName}"` to generate
    all options use the list of all categories available in a model attribute named
    categories.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单中添加一个下拉字段，使用`th:field="*{categoryName}"`生成所有选项，这些选项使用模型中名为`categories`的属性中可用的所有类别列表。
- en: Start the application and open your browser at `http://localhost:8080`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序并在浏览器中打开`http://localhost:8080`。
- en: '![](img/fe7875f7-4ff8-45e5-8fd5-8e949d0b286b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe7875f7-4ff8-45e5-8fd5-8e949d0b286b.png)'
- en: Now click on Add Category.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击添加类别。
- en: '![](img/1e6afbd6-23b9-4367-af90-1d60f4b3e458.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e6afbd6-23b9-4367-af90-1d60f4b3e458.png)'
- en: Enter a category title and click Save.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入类别标题并点击保存。
- en: Add as many more categories as you like.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加尽可能多的类别。
- en: Now click on the plus sign (+) in the upper right.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击右上角的加号（+）。
- en: '![](img/299d825b-ef52-4489-bbea-42f0b383f199.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/299d825b-ef52-4489-bbea-42f0b383f199.png)'
- en: Enter a blog post and look at the list of categories.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个博客文章并查看类别列表。
- en: After clicking Save, the selected category should appear under the blog post
    title.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存后，所选类别应出现在博客文章标题下方。
- en: '![](img/b9f0f141-4dfb-43eb-b8c2-8c3561b58e0e.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9f0f141-4dfb-43eb-b8c2-8c3561b58e0e.png)'
- en: 'Chapter 7: RESTful APIs'
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：RESTful API
- en: The following are the solutions for this chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为本章节的解决方案。
- en: 'Activity: Creating a List of Blog Articles as a REST Resource'
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：创建一个作为REST资源的博客文章列表
- en: '**Steps for Completion**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Take the blogmania application and find the `BlogPostController`. Here you can
    see how individual blog articles are delivered for the web frontend. Another controller,
    `HomePageController`, adds all articles to the model. These two may serve as examples
    for the next steps.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以blogmania应用程序为例，找到`BlogPostController`。在这里，你可以看到单个博客文章是如何为Web前端交付的。另一个控制器`HomePageController`将所有文章添加到模型中。这两个可以作为下一步的示例。
- en: Write another controller, a REST controller this time, that gives a list of
    all the articles under the URL /api/blogposts To do that create a new class (preferably
    in the blogpost package) called `BlogPostRestController`, and make it a Spring
    REST controller.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写另一个控制器，这次是一个REST控制器，它提供URL `/api/blogposts`下所有文章的列表。为此，创建一个新的类（最好在blogpost包中），命名为`BlogPostRestController`，并使其成为一个Spring
    REST控制器。
- en: While you could add the full path to each method, we know that `/api/blogposts`
    will be the same for all methods that can come in this controller, so add that
    path at the class level.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然你可以为每个方法添加完整的路径，但我们知道`/api/blogposts`对于这个控制器中可能出现的所有方法都将相同，所以请在类级别添加这个路径。
- en: The class will need one or two dependencies – add them to the class.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个类需要一个或两个依赖项——将它们添加到类中。
- en: Add a mapping function to get all the blog articles via REST. REST conventions
    say that this list resource will live under exactly the path we gave at the class
    level.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个映射函数，通过REST获取所有博客文章。REST约定表示这个列表资源将正好位于我们在类级别给出的路径下。
- en: Start the application and use Postman to access `localhost:8080/api/blogposts`
    – you should now see the list of blog articles returned as a JSON list.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序并使用Postman访问`localhost:8080/api/blogposts`——你现在应该看到作为JSON列表返回的博客文章列表。
- en: '![](img/22bb439a-f0c7-47b6-818b-d9e6113655ec.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/22bb439a-f0c7-47b6-818b-d9e6113655ec.png)'
- en: 'Chapter 8: Web Application Security'
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：Web应用程序安全
- en: The following are the solutions for this chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该章节的解决方案。
- en: 'Activity: Exploring Security Annotations'
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：探索安全注解
- en: '**Steps for Completion**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: 'Navigate to the `HomePageController` and find the `homePage()` method. Add
    an annotation to limit access to users who have the role USER as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`HomePageController`并找到`homePage()`方法。添加一个注解以限制对具有角色USER的用户访问，如下所示：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Restart the application and open the page in the browser.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动应用程序并在浏览器中打开页面。
- en: Note that we are immediately redirected to the login page. Log in with any of
    the predefined users; for instance, `peter/quinn` or `cate/sakai`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们立即被重定向到登录页面。使用任何预定义的用户登录；例如，`peter/quinn`或`cate/sakai`。
- en: Note that the index page changed to reflect your user.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，索引页面已更改以反映您的用户。
- en: 'Take a look at the following screenshots showing the name and role assigned:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看看以下截图，显示了分配的名称和角色：
- en: '![](img/9ab817dd-357a-46bf-b264-4f7754ff636a.png)![](img/63ef0115-0a14-42a4-aae1-838e5338cdfc.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/9ab817dd-357a-46bf-b264-4f7754ff636a.png)![图片2](img/63ef0115-0a14-42a4-aae1-838e5338cdfc.png)'
- en: Try to log out.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试注销。
- en: 'Find the `ShortMessageService` and its `findAll()` method. Add an annotation
    that limits the display to the articles that a user has written themselves:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`ShortMessageService`及其`findAll()`方法。添加一个注解以限制显示用户自己撰写的文章：
- en: '[PRE2]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Restart the application and open the page in the browser.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动应用程序并在浏览器中打开页面。
- en: 'Chapter 9: Persisting Data Using a Database'
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：使用数据库持久化数据
- en: The following are the solutions for this chapter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该章节的解决方案。
- en: 'Activity: Creating an SMS Application to Display Multiple Authors'
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：创建一个显示多个作者的短信应用程序
- en: '**Steps for Completion**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: 'To start, in the `ShortMessage` class, change the author field to: List<Author>
    authors. To make the Java even compile, there needs to be a change in `ShortMessageRepository`
    when creating a `ShortMessage`: In a first step, just wrap the author using `Collections.singletonList()`.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`ShortMessage`类中，将作者字段更改为：List<Author> authors。为了使Java代码能够编译，需要在创建`ShortMessage`时在`ShortMessageRepository`中进行更改：在第一步中，只需使用`Collections.singletonList()`包装作者。
- en: 'In the next step, change the Thymeleaf view `index.html` to accept multiple
    authors. Note that the attribute is now called `msg.authors`. It is a bit of work
    to create a comma-separated list, but you can copy from the way the multiple authorities
    are shown a few lines above. To be complete, this has to be done twice: Once for
    the `fullName`, once for the username.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，将 Thymeleaf 视图 `index.html` 修改为接受多个作者。请注意，属性现在称为 `msg.authors`。创建一个以逗号分隔的列表需要一点工作，但你可以从上面几行显示多个权限的方式中复制。为了完整，这需要做两次：一次是为了
    `fullName`，一次是为了用户名。
- en: You may want to start the app now to verify that everything is displayed as
    it was before. Small steps like these are how software evolves.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可能想启动应用程序来验证一切是否如之前一样显示。这样的小步骤是软件发展的方式。
- en: Now add a new Flyway migration `V03__authors.sql –` you need a new table `message_authors`,
    copy data from `short_message` and finally drop the `author_id column`. For reference,
    look it up again in the third section of this chapter.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加一个新的 Flyway 迁移 `V03__authors.sql` – 你需要一个新表 `message_authors`，从 `short_message`
    复制数据，最后删除 `author_id` 列。为了参考，请再次查看本章第三部分。
- en: 'Now the `ShortMessageRepository` is not compatible with the database anymore.
    There are many ways to fix this. One quite easy way is to add the following at
    the start of the `retrieveAll` method:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`ShortMessageRepository` 与数据库不再兼容。有许多方法可以解决这个问题。一种相当简单的方法是在 `retrieveAll`
    方法的开始处添加以下内容：
- en: '[PRE3]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using this map from article IDs to authors, change the query and the implementation
    for the second `jdbcTemplate` execution.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用从文章 ID 到作者的映射，更改查询和第二个 `jdbcTemplate` 执行的实现。
- en: You may want to start the app now to verify that everything is displayed as
    it was before. Note that you are now getting the same display for a different
    data model and different data in the database!
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可能想启动应用程序来验证一切是否如之前一样显示。请注意，你现在得到的是不同数据模型和数据库中不同数据的相同显示！
- en: To actually see some change, you can use the H2 console in another browser tab
    to add some co-authors and immediately see the results after reloading in the
    original tab.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要真正看到一些变化，你可以在另一个浏览器标签中使用 H2 控制台添加一些合著者，并在原始标签中重新加载后立即看到结果。
- en: 'Create a new migration `V04__coauthors.sql` with some message – author links.
    When you start the application again, these are visible as in the following screenshot:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的迁移 `V04__coauthors.sql`，包含一些消息-作者链接。当你再次启动应用程序时，这些链接将如以下截图所示：
- en: '![](img/468095d5-7c63-40c1-8a56-3691cd1b2c3f.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/468095d5-7c63-40c1-8a56-3691cd1b2c3f.png)'
- en: Solutions Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案摘要
- en: Hope this section helped solve any obstacles that you had been facing while
    attempting these activities. Now you should be able to solve other such problems
    as well.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这一节能帮助你解决在尝试这些活动时遇到的任何障碍。现在你应该能够解决其他类似的问题。
- en: Happy solving!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 解题愉快！
