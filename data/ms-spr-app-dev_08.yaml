- en: Chapter 8. Spring with OSGI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Spring与OSGI
- en: '**OSGI** is a short form **Open Service Gateway Intiative**. It''s a specification
    consisting of a modular system and service platform for the dynamic deployment
    of modules. As per the specification, the application can be broken down into
    modules and deployed independently. When we think of developing an OSGI application,
    it means that we need to use the OSGI API available to develop the application.
    The second step would be to deploy it in the OSGI container. So, while developing
    applications in OSGI, we can break the application into modules and independently
    deploy them, and then uninstall; we can also have various versions of the application
    running in parallel. In this chapter, we shall see how Spring supports the OSGI
    bundled development and the deployment of its application. We shall first start
    with OSGI and then gradually move over to Springs''s support.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**OSGI**是**Open Service Gateway Intiative**的缩写。这是一个规范，包括用于动态部署模块的模块化系统和服务平台。根据规范，应用程序可以分解为模块并独立部署。当我们考虑开发OSGI应用程序时，这意味着我们需要使用可用的OSGI
    API来开发应用程序。第二步是将其部署到OSGI容器中。因此，在OSGI中开发应用程序时，我们可以将应用程序分解为模块并独立部署它们，然后卸载；我们还可以并行运行应用程序的各个版本。在本章中，我们将看到Spring如何支持OSGI捆绑开发及其应用程序的部署。我们将首先从OSGI开始，然后逐渐转向Spring的支持。'
- en: OSGI containers
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OSGI容器
- en: 'OSGI containers must implement a set of services, and a contract is established
    between the OSGI container and application. All the following mentioned OSGI containers
    are open source:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: OSGI容器必须实现一组服务，并且OSGI容器与应用程序之间建立了一项合同。以下提到的所有OSGI容器都是开源的：
- en: '**KnoplerFish**: The Knopler framework can be easily installed and it is easier
    to bundle and deploy modules in the container. The Bundle applications need a
    `.manifest` file and build `.xml` file. It''s mandatory to have the framework.
    JAR file should be available in the Java build path. The Bundle that needs to
    be deployed in the KnoplerFish container will have a class that implements the
    `BundleActivator` interface. The interface comes with `start()` and `stop()` methods
    that needs to be implemented. Usually a thread class is also created, and the
    thread is started in the `BundleActivator` interface implementation class''s start
    method, and stopped in the stop method. You can also create an OSGI service by
    creating an interface and implementation class. The service can be registered
    in the `BundleActivator` class'' `start()` method. That is the class that implements
    the `BundleActivator` interface. There are `ServiceListeners` and `ServiceTrackers`
    to monitor the OSGI services in the container.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KnoplerFish**：Knopler框架可以很容易地安装，并且更容易地将模块捆绑和部署到容器中。捆绑应用程序需要一个`.manifest`文件和构建`.xml`文件。必须拥有该框架。
    JAR文件应该在Java构建路径中可用。需要在KnoplerFish容器中部署的捆绑包将具有一个实现`BundleActivator`接口的类。该接口带有需要实现的`start()`和`stop()`方法。通常还会创建一个线程类，并且在`BundleActivator`接口实现类的start方法中启动该线程，并在stop方法中停止。您还可以通过创建一个接口和实现类来创建一个OSGI服务。该服务可以在`BundleActivator`类的`start()`方法中注册。这是实现`BundleActivator`接口的类。有`ServiceListeners`和`ServiceTrackers`来监视容器中的OSGI服务。'
- en: '**Equinox**: This is an implementation of the core OSGI framework. It provides
    various optional OSGI services. Eclipse offers an OSGI plugin to develop OSGI
    bundled applications. Eclipse offers a JAR file which can be easily installed,
    using Eclipse''s install start, stop command.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Equinox**：这是核心OSGI框架的实现。它提供各种可选的OSGI服务。Eclipse提供了一个OSGI插件来开发OSGI捆绑应用程序。Eclipse提供了一个JAR文件，可以使用Eclipse的安装启动、停止命令轻松安装。'
- en: '**Apache Felix**: Apache Felix is another OSGI container from Apache projects.
    Felix has various subprojects which can be plugged in. It also supports a similar
    way of application development, as explained under Knoplerfish. It also has a
    Maven bundle plugin.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Felix**：Apache Felix是Apache项目的另一个OSGI容器。Felix有各种子项目可以插入。它还支持与Knoplerfish下的应用程序开发类似的方式。它还有一个Maven捆绑插件。'
- en: OSGI usage
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OSGI使用
- en: 'Let us list the key usages of OSGI framework:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出OSGI框架的关键用途：
- en: The framework offers modularity of the application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该框架提供了应用程序的模块化
- en: The framework implements bundle based architecture
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该框架实现了基于捆绑包的架构
- en: Multiple versions of the same project can be made to run in parallel
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以并行运行同一项目的多个版本
- en: We can also integrate the OSGI applications and OSGI bundles into web containers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以将OSGI应用程序和OSGI捆绑包集成到Web容器中
- en: There are also a few challenges of making it work with the front end of web
    applications
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使其与Web应用程序的前端配合工作也存在一些挑战
- en: There are lot of frameworks, at least four frameworks, available for developing
    POJO applications on top of OSGI specification
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多框架，至少有四个框架，可用于在OSGI规范之上开发POJO应用程序
- en: The size of the OSGI bundle is relatively small
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSGI捆绑包的大小相对较小
- en: Spring integration with OSGI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring与OSGI的集成
- en: Spring provides complete support for OSGI development. The OSGI module support
    was called Spring OSGI, and it is presently updated with a new set of libraries
    and versions called Spring Dynamic Modules. A Spring Dynamic Module allows you
    to write Spring applications on top of an OSGI framework. One of its challenges
    is to make simple POJOs to seamlessly work with the OSGI framework and to integrate
    Spring Beans as an OSGI service. Spring Beans can be exported as an OSGI services
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Spring为OSGI开发提供了完整的支持。OSGI模块支持被称为Spring OSGI，目前已更新为一组新的库和版本，称为Spring Dynamic
    Modules。Spring动态模块允许您在OSGI框架之上编写Spring应用程序。其挑战之一是使简单的POJO能够与OSGI框架无缝配合，并将Spring
    Beans集成为OSGI服务。Spring Beans可以导出为OSGI服务
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Spring dynamic programming model provides API programming and Spring Beans
    are visible across bundles. The Spring dynamic model provides us with the dependency
    injection across bundles, and with all the support for OSGI from the Spring dynamic
    service, handling has become easier.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring动态编程模型提供了API编程，Spring Beans在捆绑中可见。Spring动态模型为我们提供了跨捆绑的依赖注入，并且通过Spring动态服务提供了对OSGI的所有支持，处理变得更加容易。
- en: Every bundle will ideally have a separate application context. The application
    context is created and destroyed with the start and stop of the bundle. These
    context files are present under META-INF.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个捆绑理想上都应该有一个单独的应用上下文。应用上下文随着捆绑的启动和停止而创建和销毁。这些上下文文件位于META-INF下。
- en: 'A typical bundle structure is depicted in the following image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的捆绑结构如下图所示：
- en: '![Spring integration with OSGI](img/7320OS_08_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Spring integration with OSGI](img/7320OS_08_01.jpg)'
- en: The following image depicts how OSGI modules can be part of web applications
    and how each bundle interacts with the OSGI framework. You can also see that there
    are many web applications on the web container which access the application bundles
    as services using the OSGI framework.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了OSGI模块如何成为Web应用程序的一部分，以及每个捆绑如何与OSGI框架交互。您还可以看到Web容器上有许多Web应用程序，它们使用OSGI框架作为服务访问应用程序捆绑。
- en: '![Spring integration with OSGI](img/7320OS_08_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Spring integration with OSGI](img/7320OS_08_02.jpg)'
- en: Spring Dynamic Modules and OSGI
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring动态模块和OSGI
- en: Let us look at how Spring Dynamic Modules work. Spring comes with its OSGI integration
    framework, which has a class called `extender`. This checks for all existing bundles
    and marks the bundles which are powered by Spring. The extender marks a bundle
    as Spring compatible only if it has Spring context manifest header or an XML file
    in `META-INF`/`spring` folder. All the preceding steps are triggered on start
    up and the extender package is available on `org.springframeork.osgi.bundle.extender`.
    Now, we have to know why Spring dynamic modules mark the Spring powered bundles.
    The bundles with Spring configuration files are further converted to an application-context
    object. The extender not only marks the Spring powered bundles to create an application-context
    object, but also checks if the bundle is importing any OSGI services. If any such
    bundle is found exporting an external service, then such beans are moved to the
    OSGI shared service registry. The extender registers bundles that export OSGI
    services with a listener and events. OSGI is also tested with Equinox, Felix and
    KnoplerFish.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Spring动态模块是如何工作的。Spring带有其OSGI集成框架，其中有一个名为`extender`的类。这个类检查所有现有的捆绑，并标记由Spring提供支持的捆绑。只有具有Spring上下文清单标头或`META-INF`/`spring`文件夹中的XML文件的捆绑才会被标记为Spring兼容。所有前面的步骤都是在启动时触发的，`extender`包在`org.springframeork.osgi.bundle.extender`中可用。现在，我们必须知道为什么Spring动态模块会标记Spring支持的捆绑。具有Spring配置文件的捆绑会进一步转换为应用上下文对象。`extender`不仅标记Spring支持的捆绑以创建应用上下文对象，还会检查捆绑是否导入任何OSGI服务。如果发现任何导出外部服务的捆绑，则这些bean将移动到OSGI共享服务注册表中。`extender`使用监听器和事件注册导出OSGI服务的捆绑。OSGI还与Equinox、Felix和KnoplerFish进行了测试。
- en: 'The following are the steps to be followed when setting up Spring DM in Eclipse
    IDE:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse IDE中设置Spring DM时，需要遵循以下步骤：
- en: Download Spring DM; look out for the latest Spring OSGI DM.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Spring DM；寻找最新的Spring OSGI DM。
- en: Extract the ZIP file into the local directory; call it `c:\OSGI-SPRING`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件提取到本地目录中；将其命名为`c:\OSGI-SPRING`。
- en: Create a new workspace while starting Eclipse.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动Eclipse时创建一个新的工作空间。
- en: Import all the necessary JAR files and all the Spring DM JAR files by choosing
    the **Plugin Development** option, or the **Install plug-in** option in Java.
    Ensure that you have all the following mentioned plugins in the Eclipse environment.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**插件开发**选项或Java中的**安装插件**选项导入所有必要的JAR文件和所有Spring DM JAR文件。确保在Eclipse环境中拥有以下提到的所有插件。
- en: '`org.springframeork.osgi.bundle.core`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.osgi.bundle.core`'
- en: '`org.springframeork.osgi.bundle.extender`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.osgi.bundle.extender`'
- en: '`org.springframeork.osgi.bundle.io`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.osgi.bundle.io`'
- en: '`org.springframeork.bundle.spring.aop`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.bundle.spring.aop`'
- en: '`org.springframeork.bundle.spring.beans`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.bundle.spring.beans`'
- en: '`org.springframeork.bundle.spring.context`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.bundle.spring.context`'
- en: '`org.springframeork.bundle.spring.core`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.bundle.spring.core`'
- en: '`org.springframeork.bundle.spring.jdbc`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.bundle.spring.jdbc`'
- en: '`org.springframeork.bundle.spring.tx`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.bundle.spring.tx`'
- en: '`org.springframeork.osgi.aopalliance.osgi`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframeork.osgi.aopalliance.osgi`'
- en: Simple applications with OSGI
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的OSGI应用程序
- en: In this section, let us first develop a simple OSGI application. We shall create
    two bundles—one which provides the service to print a string and another bundle
    which would consume the service at an equal interval of time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们首先开发一个简单的OSGI应用程序。我们将创建两个捆绑——一个提供打印字符串的服务，另一个捆绑会以相等的时间间隔消费该服务。
- en: 'Following is the first bundle:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是第一个捆绑：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Exporting the service using activator:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用激活器导出服务：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we have the first bundle ready and we shall use Maven to build it. We also
    need the Maven bundle plugin to build the XML file.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好第一个捆绑，我们将使用Maven来构建它。我们还需要Maven捆绑插件来构建XML文件。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To build it, a simple `mvn install` command is sufficient.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建它，只需简单的`mvn install`命令即可。
- en: 'Next, let us try to consume the service:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们尝试消费服务：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we must again create an activator for the consumer:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须再次为消费者创建一个激活器：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Integrating Spring Dynamic Modules with OSGI
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring动态模块与OSGI集成
- en: In this section, let us demonstrate how we can integrate Spring Dynamic Modules
    to work with an OSGI application. Spring Dynamic Modules (Spring DM) makes the
    development of OSGI-based applications a lot easier. We can easily inject the
    services like any other Spring beans.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们演示如何将Spring动态模块集成到OSGI应用程序中。Spring动态模块（Spring DM）使得基于OSGI的应用程序的开发变得更加容易。我们可以像任何其他Spring
    bean一样轻松地注入服务。
- en: 'We shall look at the following dependencies required to integrate Spring Dynamic
    Modules:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下集成Spring动态模块所需的以下依赖项：
- en: OSGI services
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSGI服务
- en: The `BundleActivator` class
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BundleActivator`类'
- en: The `Context.xml` file configuration to inject in the service
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Context.xml`文件配置以注入服务'
- en: 'The following is the list of dependencies that needs to be made available in
    the application classpath:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要在应用程序类路径中提供的依赖项列表：
- en: '`com.springsource.net.sf.cglib-2.1.3.jar`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.net.sf.cglib-2.1.3.jar`'
- en: '`com.springsource.org.aopalliance-1.0.0.jar`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.org.aopalliance-1.0.0.jar`'
- en: '`log4j.osgi-1.2.15-SNAPSHOT.jar`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j.osgi-1.2.15-SNAPSHOT.jar`'
- en: '`com.springsource.slf4j.api-1.5.0.jar`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.slf4j.api-1.5.0.jar`'
- en: '`com.springsource.slf4j.log4j-1.5.0.jar`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.slf4j.log4j-1.5.0.jar`'
- en: '`com.springsource.slf4j.org.apache.commons.logging-1.5.0.jar`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.slf4j.org.apache.commons.logging-1.5.0.jar`'
- en: '`org.springframework.aop-3.x.jar`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.aop-3.x.jar`'
- en: '`org.springframework.beans-3.x.jar`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.beans-3.x.jar`'
- en: '`org.springframework.context-3.x.jar`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.context-3.x.jar`'
- en: '`org.springframework.core-3.x.jar`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.core-3.x.jar`'
- en: '`spring-osgi-core-1.2.1.jar`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-osgi-core-1.2.1.jar`'
- en: '`spring-osgi-extender-1.2.1.jar`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-osgi-extender-1.2.1.jar`'
- en: '`spring-osgi-io-1.2.1.jar`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-osgi-io-1.2.1.jar`'
- en: 'So, let us create a simple `HelloWorldService` interface class:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们创建一个简单的`HelloWorldService`接口类：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we shall implement the `service` class. This is class does a simple
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现`service`类。这是一个简单的类
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We shall write an activator class which needs to activate the service `BundleActivator`.
    The `ProviderActivator` class that we need to call is `HelloWorldService`. We
    are actually registering the service. However, using the Spring DM integration
    makes things simple for us with a configuration. We don't need this integration
    class.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个激活器类，需要激活服务`BundleActivator`。我们需要调用的`ProviderActivator`类是`HelloWorldService`。实际上，我们正在注册服务。但是，使用Spring
    DM集成使我们的配置变得简单。我们不需要这个集成类。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We just have to create a `provider-context.xml` file in the folder `META-INF`/`spring`.
    This is a simple context in XML file, but we use a new namespace to register the
    service - [http://www.springframework.org/schema/osgi](http://www.springframework.org/schema/osgi).
    So, let us start:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在`META-INF`/`spring`文件夹中创建一个`provider-context.xml`文件。这是一个简单的XML文件上下文，但我们使用一个新的命名空间来注册服务
    - [http://www.springframework.org/schema/osgi](http://www.springframework.org/schema/osgi)。所以，让我们开始：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only thing specific to OSGI is the `osgi:service` declaration. This line
    indicates that we need to register the `HelloWorldService` as an OSGI service,
    using the interface `HelloWorldService` as the name of the service.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一与OSGI相关的是`osgi:service`声明。这一行表示我们需要将`HelloWorldService`注册为OSGI服务，使用`HelloWorldService`接口作为服务的名称。
- en: If you put the context file in the `META-INF`/`spring` folder, it will be automatically
    detected by the Spring Extender and an application context will be created.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将上下文文件放在`META-INF`/`spring`文件夹中，它将被Spring Extender自动检测，并创建一个应用程序上下文。
- en: 'We can now go to the consumer bundle. In the first phase, we created that consumer:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以转到消费者bundle。在第一阶段，我们创建了那个消费者：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let us write the `BundleActivator` class:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们编写`BundleActivator`类：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The injection is not necessary anymore. We can keep the start of the timer here,
    but, once again, we can use the features of the framework to start and stop the
    timer.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注入不再是必要的。我们可以在这里保留计时器的启动，但是，再次，我们可以使用框架的功能来启动和停止计时器。
- en: 'So, let us delete the activator and create an application context to create
    the consumer and start it automatically, and put it in the `META-INF`/`spring`
    folder:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，让我们删除激活器并创建一个应用程序上下文来创建消费者并自动启动它，并将其放在`META-INF`/`spring`文件夹中：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We used the `init` method and `destroy` method attributes to start and stop
    the time with the framework, and we use the `constructor-arg` to inject the reference
    in to the service. The reference to the service is obtained using the `osgi:reference`
    field and using the interface as a key to the service.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`init`方法和`destroy`方法属性来启动和停止与框架的时间，并使用`constructor-arg`来将引用注入到服务中。使用`osgi:reference`字段和使用接口作为服务的键来获取对服务的引用。
- en: That's all we have to do with this bundle. A lot more simple than the first
    version isn't it? And more than the simplification, you can see that the sources
    aren't depending on either OSGI or Spring Framework; this is plain Java and is
    a great advantage.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要做的所有事情。比第一个版本简单多了，不是吗？除了简化之外，您还可以看到源代码既不依赖于OSGI也不依赖于Spring Framework；这就是纯Java，这是一个很大的优势。
- en: The Maven POM files are the same as in the first phase, except that we can cut
    the dependency to OSGI.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Maven POM文件与第一阶段相同，只是我们可以削减对OSGI的依赖。
- en: 'The provider:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The consumer:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And we can build the two bundles using the Maven install. So, let us test our
    stuff in Felix:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Maven install构建这两个bundle。所以，让我们在Felix中测试一下我们的东西：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In conclusion, Spring DM really makes the development with OSGI easier. With
    Spring DM, you can also start bundles. It also allows you to make web bundles
    and to use the services of the OSGI compendium easily.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Spring DM确实使与OSGI的开发变得更加容易。使用Spring DM，您还可以启动bundle。它还允许您创建Web bundle并轻松使用OSGI
    compendium的服务。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have developed a simple OSGI application. We also demonstrated
    how Spring DM supports the OSGI development, reduces the creation of files, and
    makes things easier with configuration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开发了一个简单的OSGI应用程序。我们还演示了Spring DM如何支持OSGI开发，减少文件的创建，并通过配置使事情变得更容易。
