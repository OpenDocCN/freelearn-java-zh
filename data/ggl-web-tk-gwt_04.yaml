- en: Chapter 4. Interactive Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 交互式表单
- en: In this chapter, we will learn different ways of creating interactive forms,
    which utilize GWT and AJAX to provide a much smoother user experience when using
    web‑based user interfaces. This chapter along with the next two chapters is going
    to provide the foundation for our exploration of GWT.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习创建交互式表单的不同方式，这些方式利用GWT和AJAX在使用基于Web的用户界面时提供更加流畅的用户体验。本章以及接下来的两章将为我们探索GWT提供基础。
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要解决的任务包括：
- en: Live search
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实时搜索
- en: Password strength checker
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码强度检查器
- en: Auto fill forms
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动填充表单
- en: Sortable tables
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可排序的表格
- en: Dynamic lists
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动态列表
- en: Flickr-style editable labels
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似Flickr的可编辑标签
- en: Sample Application
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例应用程序
- en: 'We are going to incorporate all of the sample applications that we are creating
    in this book into the Samples GWT application that we created in the previous
    chapter. We will be doing this in a style that is similar to the `KitchenSink`
    application that we explored in[Chapter 1](ch01.html "Chapter 1. Getting Started").
    In order to do this, we will follow the steps given below:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把本书中创建的所有示例应用程序都整合到上一章中创建的Samples GWT应用程序中。我们将以与我们在[第1章](ch01.html "第1章.
    入门")中探讨的“KitchenSink”应用程序类似的方式进行。为了做到这一点，我们将按照以下步骤进行：
- en: The user interface for the application will be created in a class that extends
    the `SamplePanel` class in the `com.packtpub.gwtbook.samples.client` package.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的用户界面将在一个类中创建，该类扩展了`com.packtpub.gwtbook.samples.client`包中的`SamplePanel`类。
- en: This class will then be initialized and added to the list of applications in
    the `Samples` class in the `com.packtpub.gwtbook.samples.client` package. Since
    the `Samples` class is set up as the entry point class, when GWT starts up, it
    will load this class and display all of the sample applications, just like the
    `KitchenSink`.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，该类将被初始化并添加到`com.packtpub.gwtbook.samples.client`包中的`Samples`类的应用程序列表中。由于`Samples`类被设置为入口点类，当GWT启动时，它将加载这个类并显示所有示例应用程序，就像“KitchenSink”一样。
- en: The source code for all the samples is available from the download site for
    the book. Please see the Appendix for instructions on downloading and running
    the samples.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例的源代码都可以从本书的下载站点获取。请参阅附录以获取有关下载和运行示例的说明。
- en: Live Search
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时搜索
- en: '`Live Search` is a user interface that actively provides the user with choices
    matching the search criteria that the user types in. It is a very popular AJAX
    pattern that is used to continuously display all valid results to a user as the
    user refines the search query. Since the user''s query is constantly synchronized
    with the displayed results, it creates a very smooth search experience for the
    user. It also enables the user to easily experiment with different search queries
    very quickly in a highly interactive fashion. The results from the search are
    asynchronously retrieved from the server without any page refreshes or resubmission
    of search criteria. The Google search page ([http://google.com/](http://google.com/))
    uses this to great effect. It even tells you the number of search results that
    match your query as you type!'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “实时搜索”是一种用户界面，它会根据用户输入的搜索条件实时提供与之匹配的选择。这是一种非常流行的AJAX模式，用于在用户细化搜索查询时持续显示所有有效结果。由于用户的查询不断与显示的结果同步，为用户创造了非常流畅的搜索体验。它还使用户能够以高度互动的方式快速轻松地尝试不同的搜索查询。搜索结果是异步从服务器检索的，无需任何页面刷新或重新提交搜索条件。Google搜索页面（[http://google.com/](http://google.com/)）就是一个很好的例子。它甚至在您输入时告诉您与您的查询匹配的搜索结果数量！
- en: Instant feedback of the kind provided by the `Live Search` AJAX pattern could
    also be harnessed to pre-fetch results from server and use them for anticipating
    the user's actions. This kind of an instantaneous response smoothens the user
    experience of the application and significantly improves the application latency.
    Google Maps ([http://maps.google.com/](http://maps.google.com/)) are nice examples
    of using this pattern to pre-fetch the map data as you are navigating around the
    map.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “实时搜索”AJAX模式提供的即时反馈也可以用于预先从服务器获取结果并用于预测用户的操作。这种即时响应可以使应用程序的用户体验更加流畅，并显著提高应用程序的延迟。Google地图（[http://maps.google.com/](http://maps.google.com/)）是使用这种模式预先获取地图数据的很好的例子。
- en: Time for Action—Search as you Type!
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-搜索即时输入！
- en: In this `Live Search` example, we will create an application that retrieves
    a list of fruit names that begin with the letters that you type into the search
    text. You can refine your query criteria by reducing or increasing the number
    of letters that you type, and the user interface will display the matching result
    set in real time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个“实时搜索”示例中，我们将创建一个应用程序，该应用程序检索以您在搜索文本中输入的字母开头的水果名称列表。您可以通过减少或增加输入的字母数量来细化查询条件，用户界面将实时显示匹配的结果集。
- en: Create a new Java file named `LiveSearchService.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `LiveSearchService` interface with one method to retrieve the
    search results matching the string provided as a parameter to the method.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`LiveSearchService.java`的新的Java文件。定义一个`LiveSearchService`接口，其中包含一个方法，用于检索与提供的字符串匹配的搜索结果。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the asynchronous version of this service definition interface in a new
    Java file named `LiveSearchServiceAsync.java` in the `com.packtpub.gwtbook.samples.client`
    package:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中的一个新的Java文件中创建此服务定义接口的异步版本，命名为`LiveSearchServiceAsync.java`：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create the implementation of our live search service in a new Java file named
    `LiveSearchServiceImpl.java` in the `com.packtpub.gwtbook.samples.server` package.
    We will create a string array that holds a list of fruits and when the service
    method is invoked we will return a sub-list of fruits from this array whose names
    start with the string provided as a parameter.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.server`包中创建一个名为`LiveSearchServiceImpl.java`的新的Java文件，实现我们的实时搜索服务。我们将创建一个字符串数组，其中包含水果列表，当调用服务方法时，我们将返回该数组中以参数提供的字符串开头的水果的子列表。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our server-side implementation is complete. Now we will create the user interface
    for interacting with the live search service. Create a new Java file named `LiveSearchPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package that extends the `com.packtpub.gwtbook.samples.client.panels.SamplePanel`
    class. As mentioned at the beginning of this chapter, each of the user interfaces
    created in this book will be added to a sample application that is similar to
    the `KitchenSink` application that is available as one of the sample projects
    with the GWT download. That is why we will create each user interface as a panel
    that extends the `SamplePanel` class, and we will add the created panel to the
    list of samples panels in the sample application. Add a text box for typing in
    the search string, and a `FlexTable` that will display the matching items retrieved
    from the service. Finally, create an instance of the `LiveSearchService` that
    we are going to invoke.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的服务器端实现已经完成。现在我们将创建用户界面，与实时搜索服务进行交互。在`com.packtpub.gwtbook.samples.client.panels`包中创建一个名为`LiveSearchPanel.java`的新的Java文件，该文件扩展了`com.packtpub.gwtbook.samples.client.panels.SamplePanel`类。正如本章开头所提到的，本书中创建的每个用户界面都将被添加到一个示例应用程序中，该应用程序类似于GWT下载中作为示例项目之一的`KitchenSink`应用程序。这就是为什么我们将每个用户界面创建为扩展`SamplePanel`类的面板，并将创建的面板添加到示例应用程序中的示例面板列表中。添加一个文本框用于输入搜索字符串，以及一个`FlexTable`，用于显示从服务中检索到的匹配项。最后，创建一个我们将要调用的`LiveSearchService`的实例。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the constructor for the `LiveSearchPanel`, create the service target and
    set its entry point. Also create a new `VerticalPanel` that we will use as the
    container for the widgets that we are adding to the user interface. Set the CSS
    style for the search text box. This style is defined in the `Samples.css` file,
    and is part of the source code distribution package for this book. Please see
    the Appendix for details on how to download the source code package.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LiveSearchPanel`的构造函数中，创建服务目标并设置其入口点。还创建一个新的`VerticalPanel`，我们将使用它作为添加到用户界面的小部件的容器。设置搜索文本框的CSS样式。此样式在`Samples.css`文件中定义，并且是本书的源代码分发包的一部分。有关如何下载源代码包的详细信息，请参见附录。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the same constructor, add a listener to the text box that will call the `LiveSearchService`
    asynchronously as the user types in the text box, and update the pop-up panel
    continuously with the latest results matching the current string in the text box.
    This is the method that starts of all the magic by calling the service to get
    a list of completion items.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个构造函数中，为文本框添加一个监听器，该监听器将在用户在文本框中输入时异步调用`LiveSearchService`，并持续更新弹出面板，显示与文本框中当前字符串匹配的最新结果。这是通过调用服务获取完成项列表的方法。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, in the constructor, add the search text box and the search results
    panel to the work panel. Create a little info panel that displays descriptive
    text about this application, so that we can display this text when this sample
    is selected in the list of available samples in our `Samples` application. Add
    the info panel and the work panel to a dock panel, and initialize the widget.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，将搜索文本框和搜索结果面板添加到工作面板。创建一个小的信息面板，显示关于此应用程序的描述性文本，以便在我们的`Samples`应用程序中选择此示例时显示此文本。将信息面板和工作面板添加到一个停靠面板，并初始化小部件。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add the service to the module file for the `Samples` application—`Samples.gwt.xml`
    in the `com.packtpub.gwtbook.samples` package. Adding this path to the module
    file let us create and set the endpoint information for this service using this
    path.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务添加到`Samples`应用程序的模块文件`Samples.gwt.xml`中，该文件位于`com.packtpub.gwtbook.samples`包中。通过将此路径添加到模块文件中，让我们可以使用此路径创建并设置此服务的端点信息。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the user interface for the application:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的用户界面：
- en: '![Time for Action—Search as you Type!](img/1007_04_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-搜索时输入！](img/1007_04_01.jpg)'
- en: Once you start typing in the first few letters of a fruit name, all the names
    of the fruits whose name starts with the string typed in are retrieved and displayed
    in a panel below the text box.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开始输入水果名称的前几个字母，以该字符串开头的水果名称将被检索并显示在文本框下方的面板中。
- en: '![Time for Action—Search as you Type!](img/1007_04_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-搜索时输入！](img/1007_04_02.jpg)'
- en: What Just Happened?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The user interface for the application displays a text box when you load the
    application in the browser. When you type a letter in the box, the `onKeyUp()`
    event will be triggered on the text box and in this event handler we asynchronously
    call the `getCompletionItems()` in the `LiveSearchService` with the text that
    is currently in the text box. The implementation of this method in our service
    returns a list with all the matching names. The matching names in this example
    are retrieved from a map contained in the service itself, but could just as easily
    be retrieved from a database, another application or a web service, depending
    on your application needs. We add the items that are present in the list to a
    `FlexTable` widget, which is present right below the text box. A `FlexTable` allows
    us to create tables that can be dynamically expanded. If the text box is empty
    or if we delete all the text in the box, then we clear out the list in the table.
    We use a panel as the container for all of the widgets in this application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的用户界面在浏览器中加载时显示一个文本框。当您在框中输入一个字母时，文本框上将触发`onKeyUp()`事件，并在此事件处理程序中，我们异步调用`LiveSearchService`中的`getCompletionItems()`，并传入当前在文本框中的文本。我们服务中此方法的实现返回一个包含所有匹配名称的列表。在这个例子中，匹配的名称是从服务本身包含的映射中检索出来的，但根据您的应用程序需求，它也可以很容易地从数据库、另一个应用程序或Web服务中检索出来。我们将列表中存在的项目添加到`FlexTable`部件中，该部件就在文本框的下方。`FlexTable`允许我们创建可以动态扩展的表格。如果文本框为空，或者我们删除了框中的所有文本，那么我们就清空表中的列表。我们使用一个面板作为此应用程序中所有部件的容器。
- en: 'Panels are containers for widgets in the GWT framework and are used for laying
    them out. You can add any widget or even other panels to a panel. This enables
    us to build complex user interfaces by combining widgets together by adding them
    to panels. The commonly used panels in the GWT framework are:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 面板是GWT框架中部件的容器，用于对它们进行布局。您可以将任何部件甚至其他面板添加到面板中。这使我们能够通过将它们添加到面板中来组合部件，从而构建复杂的用户界面。GWT框架中常用的面板有：
- en: '**DockPanel:** A panel that lays out the child widgets that are added to it
    by docking them or positioning them at the edges, and it allows the last added
    widget to take the remaining space.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停靠面板：一个通过将其停靠或定位在边缘上的子部件进行布局，并允许最后添加的部件占据剩余空间的面板。
- en: '**CellPanel:** A panel that lays out its widgets within the cells of a table.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元格面板：一个将其部件布局在表格的单元格中的面板。
- en: '**TabPanel:** A panel that lays out the child widgets in a tabbed set of pages,
    each with a widget.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项卡面板：一个在选项卡页集中布局子部件的面板，每个选项卡页都有一个部件。
- en: '**HorizontalPanel:** A panel that lays out all of its child widgets in a single
    horizontal column from left to right.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平面板：一个将其所有子部件按从左到右的单个水平列布局的面板。
- en: '**VerticalPanel:** A panel that lays out all of its child widgets in a single
    vertical column from top to bottom.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直面板：一个将其所有子部件按从上到下的单个垂直列布局的面板。
- en: '**FlowPanel:** A panel that lays out its widgets from left to right just like
    text flowing across a line.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流动面板：一个将其部件从左到右布局的面板，就像文本在一行上流动一样。
- en: '**PopupPanel:** A panel that displays its child widgets by popping up or overlaying
    over other widgets on the page.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出面板：一个通过弹出或覆盖在页面上的其他部件上显示其子部件的面板。
- en: '**StackPanel:** A panel that lays out its child widgets by stacking them vertically
    from top to bottom. The metaphor used is the same as the user interface of Microsoft
    Outlook.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆叠面板：一个通过垂直堆叠其子部件来布局其子部件的面板。所使用的隐喻与Microsoft Outlook的用户界面相同。
- en: We will be using most of these panels to lay out our user interfaces in this
    chapter and the rest of this book. The concepts from this task can be extended
    and applied to almost any type of search that you want to provide to your users
    in your application. You can even enhance and extend this application to provide
    further information to the user such as the number of matching results. The plumbing
    and tools provided by GWT make it extremely easy to provide this functionality.
    One of the best examples of the live search AJAX pattern and its use is the Google
    suggest service. As you type a search query string in a text field, it retrieves
    and displays a list of matching results in a continuous fashion. You can see it
    in action at [http://www.google.com/webhp?complete=1&hl=en](http://www.google.com/webhp?complete=1&hl=en).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和本书的其余部分，我们将使用大多数这些面板来布局我们的用户界面。这个任务的概念可以扩展并应用于几乎任何类型的搜索，您可以为您的应用程序提供。您甚至可以增强和扩展此应用程序，以向用户提供更多的信息，例如匹配结果的数量。GWT提供的管道和工具使得提供此功能变得非常容易。实时搜索AJAX模式及其使用的最佳示例之一是Google建议服务。当您在文本字段中键入搜索查询字符串时，它会连续检索并显示匹配结果列表。您可以在[http://www.google.com/webhp?complete=1&hl=en](http://www.google.com/webhp?complete=1&hl=en)上看到它的运行情况。
- en: Password Strength Checker
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码强度检查器
- en: Visual cues are great way to inform the user of the status of things in the
    application. Message boxes and alerts are used much too often for this purpose,
    but they usually end up irritating the user. A much smoother and enjoyable user
    experience is provided by subtly indicating to the user the status as an application
    is used. In this section, we are going to create an application that indicates
    the strength of a typed password to the user by the use of colors and checkboxes.
    We are going to use check-boxes very differently than their normal usage. This
    is an example of using GWT widgets in new and different ways, and mixing and matching
    them to provide a great user experience.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉线索是通知用户应用程序中事物状态的好方法。消息框和警报经常被用于此目的，但它们通常会让用户感到烦躁。通过微妙地向用户指示应用程序使用状态，可以提供更流畅和愉快的用户体验。在本节中，我们将创建一个应用程序，通过使用颜色和复选框来向用户指示输入密码的强度。我们将以与它们正常用法非常不同的方式使用复选框。这是使用GWT部件的新颖和不同方式的示例，并混合和匹配它们以提供出色的用户体验。
- en: Time for Action—Creating the Checker
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-创建检查器
- en: In the current day and age, passwords are required for almost everything, and
    choosing secure passwords is very important. There are numerous criteria suggested
    for creating a password that is secure from most common password cracking exploits.
    These criteria run the gamut from creating 15 letter passwords with a certain
    number of lower case and numeric digits to creating passwords using random password
    generators. In our example application, we are going to create a password strength
    checker that is very simple, and only checks the number of letters in the password.
    A password string that contains less than five letters will be considered weak,
    while a password that contains between five and seven letters will be considered
    to be of medium strength. Any password containing more than seven letters will
    be considered as strong. The criteria were deliberately kept simple so that we
    can focus on creating the application without getting all tangled up in the actual
    password strength criteria. This will help us to understand the concepts and then
    you can extend it to use any password strength criteria that your application
    warrants. This example uses a service to get the password strength, but this could
    also be done all on the client without needing to use a server.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今时代，几乎所有事情都需要密码，选择安全密码非常重要。有许多标准建议创建一个免受大多数常见密码破解攻击的安全密码。这些标准从创建包含一定数量的小写字母和数字的15个字母密码到使用随机密码生成器创建密码。在我们的示例应用程序中，我们将创建一个非常简单的密码强度检查器，只检查密码中的字母数量。包含少于五个字母的密码字符串将被视为弱密码，而包含五到七个字母的密码将被视为中等强度。任何包含超过七个字母的密码将被视为强密码。标准故意保持简单，以便我们可以专注于创建应用程序，而不会陷入实际密码强度标准中。这将帮助我们理解概念，然后您可以扩展它以使用您的应用程序需要的任何密码强度标准。此示例使用服务来获取密码强度，但这也可以在客户端上完成，而无需使用服务器。
- en: 'Create a new Java file named `PasswordStrengthService.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `PasswordStrengthService` interface with one method to retrieve
    the strength of a password string provided as a parameter to the method:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`PasswordStrengthService.java`的新的Java文件。定义一个`PasswordStrengthService`接口，其中包含一个方法，用于检索作为方法参数提供的密码字符串的强度：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the asynchronous version of this service definition interface in a new
    Java file named `PasswordStrengthServiceAsync.java` in the `com.packtpub.gwtbook.samples.client`
    package :'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中的一个新的Java文件中创建这个服务定义接口的异步版本，命名为`PasswordStrengthServiceAsync.java`：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create the implementation of our password strength service in a new Java file
    named `PasswordStrengthServiceImpl.java` in the `com.packtpub.gwtbook.samples.server`
    package.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.server`包中创建一个名为`PasswordStrengthServiceImpl.java`的新Java文件，实现我们的密码强度服务。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now let's create the user interface for this application. Create a new Java
    file named `PasswordStrengthPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package that extends the `com.packtpub.gwtbook.samples.client.panels.SamplePanel`
    class. Create a text box for entering the password string an `ArrayList` named
    `strengthPanel` for holding the checkboxes that we will use for displaying the
    strength of the password. Also create the `PasswordStrengthService` object.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们为这个应用程序创建用户界面。在`com.packtpub.gwtbook.samples.client.panels`包中创建一个名为`PasswordStrengthPanel.java`的新的Java文件，它扩展了`com.packtpub.gwtbook.samples.client.panels.SamplePanel`类。创建一个用于输入密码字符串的文本框，一个名为`strengthPanel`的`ArrayList`，用于保存我们将用于显示密码强度的复选框。还创建`PasswordStrengthService`对象。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add a private method for clearing all the checkboxes by setting their style
    to the default style.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将它们的样式设置为默认样式来添加一个私有方法来清除所有复选框。
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Add a private method that will return the CSS name, based on the password strength.
    This is a nice way for us to dynamically set the style for the checkbox, based
    on the strength.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有方法，根据密码强度返回CSS名称。这是一个很好的方法，可以根据强度动态设置复选框的样式。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the constructor for the `PasswordStrengthPanel` class, create a `HorizontalPanel`
    named `strengthPanel`, add nine checkboxes to it, and set its style. As mentioned
    before the styles that we are using in the sample applications in this book are
    available in the file `Samples.css`, which is part of the source code distribution
    for this book. We also add these same checkboxes to the `strength` object, so
    that we can retrieve them later to set their state. These checkboxes will be used
    for displaying the password strength visually. Create a new `VerticalPanel` that
    we will use as the container for the widgets that we are adding to the user interface.
    Finally, create the service target and set its entry point.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PasswordStrengthPanel`类的构造函数中，创建一个名为`strengthPanel`的`HorizontalPanel`，向其中添加九个复选框，并设置其样式。如前所述，我们在本书的示例应用程序中使用的样式可在文件`Samples.css`中找到，该文件是本书源代码分发的一部分。我们还将这些相同的复选框添加到`strength`对象中，以便稍后可以检索它们以设置它们的状态。这些复选框将用于直观显示密码强度。创建一个新的`VerticalPanel`，我们将用作向用户界面添加的小部件的容器。最后，创建服务目标并设置其入口点。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the same constructor, set the style for the password text box, and add an
    event handler to listen for changes to the password box.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个构造函数中，设置密码文本框的样式，并添加一个事件处理程序来监听密码框的更改。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, in the constructor, add the password text box and the strength panel
    to the work panel. Create a little info panel that displays descriptive text about
    this application, so that we can display this text when this sample is selected
    in the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，将密码文本框和强度面板添加到工作面板。创建一个小的信息面板，显示关于此应用程序的描述性文本，以便在我们的`Samples`应用程序的可用示例列表中选择此示例时可以显示此文本。将信息面板和工作面板添加到一个停靠面板，并初始化小部件。
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add the service to the module file for the `Samples` application—`Samples.gwt.xml`
    in the `com.packtpub.gwtbook.samples` package.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务添加到`Samples`应用程序的模块文件中——`com.packtpub.gwtbook.samples`包中的`Samples.gwt.xml`。
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the user interface for the password strength checking application:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是密码强度检查应用程序的用户界面：
- en: '![Time for Action—Creating the Checker](img/1007_04_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间—创建检查器](img/1007_04_03.jpg)'
- en: 'Now start typing a password string to check its strength. Here is the password
    strength when you type a password string that is less than five characters:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始输入密码字符串以检查其强度。当您输入少于五个字符的密码字符串时，密码强度如下：
- en: '![Time for Action—Creating the Checker](img/1007_04_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间—创建检查器](img/1007_04_04.jpg)'
- en: What Just Happened?
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The password strength service checks the size of the provided string and returns
    an integer value of three, six, or nine based on whether it is weak, medium, or
    strong. It makes this determination by using the criteria that if the password
    string is less than five characters in length, it is weak, and if it is more than
    five characters but not greater than seven characters, it is considered a medium
    strength password. Anything over seven characters is considered to be a strong
    password.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 密码强度服务检查提供的字符串的大小，并根据其弱、中、强返回一个整数值，分别为三、六或九。它通过使用以下标准来做出这一决定：如果密码字符串长度小于五个字符，则为弱密码；如果超过五个字符但不超过七个字符，则被视为中等强度密码。超过七个字符的任何密码都被视为强密码。
- en: The user interface consists of a text box for entering a password string and
    a panel containing nine checkboxes that visually displays the strength of the
    typed string as a password. An event handler is registered to listen for keyboard
    events generated by the password text box. Whenever the password text changes,
    which happens when we type into the field or change a character in the field,
    we communicate asynchronously with the password strength service and retrieve
    the strength of the given string as a password. The returned strength is displayed
    to the user in a visual fashion by the use of colors to symbolize the three different
    password strengths.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面由一个文本框和一个包含九个复选框的面板组成，用于以密码形式输入密码字符串，并以密码的形式显示其强度。事件处理程序被注册用于监听由密码文本框生成的键盘事件。每当密码文本发生变化时，无论是在字段中输入或更改字符，我们都会异步与密码强度服务通信，并检索给定字符串作为密码的强度。返回的强度以颜色的形式显示给用户，以象征三种不同的密码强度。
- en: The password strength is displayed in a compound widget that is created by adding
    nine checkboxes to a `HorizontalPanel`. The color of the checkboxes is changed
    using CSS depending on the strength of the password string. This process of combining
    the basic widgets provided by GWT into more complex widgets to build user interfaces
    is a common pattern in building GWT applications. It is possible to build quite
    intricate user interfaces in this way by utilizing the power of the GWT framework.
    We will see more examples of this as we continue to explore various GWT applications
    later in this chapter and also throughout this book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 密码强度显示在一个由九个复选框添加到`HorizontalPanel`创建的复合小部件中。根据密码字符串的强度，复选框的颜色会使用CSS进行更改。将GWT提供的基本小部件组合成更复杂的小部件以构建用户界面的过程是构建GWT应用程序中的常见模式。通过利用GWT框架的强大功能，可以以这种方式构建相当复杂的用户界面。随着我们在本章后面继续探索各种GWT应用程序以及整本书中的其他部分，我们将看到更多的例子。
- en: Auto Form Fill
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动表单填充
- en: Forms are ubiquitous on the Web and are widely used for everything from displaying
    information from customer profiles to filling out applications online. We do not
    like going through all those fields and typing in the information in every time,
    especially if we have already done this on that site once before. A very nice
    way to speed this up would be to pre-populate the fields with the previously collected
    information when a key form field is filled in. This not only saves the customer
    some typing, it also is a great usability enhancement that improves the whole
    customer experience. In this section, we are going to build a form that will automatically
    fill out the various fields when we type in a recognized value in the Customer
    ID field.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Web上的表单是无处不在的，广泛用于从客户资料显示到在线填写申请等各种用途。我们不喜欢每次都要通过所有这些字段并在每次都要输入信息，尤其是如果我们之前在该网站上已经这样做过。加快这个过程的一个很好的方法是在填写关键表单字段时预填充以前收集的信息。这不仅节省了客户的一些输入，还是一个极大的可用性增强，提高了整个客户体验。在本节中，我们将构建一个表单，当我们在客户ID字段中输入一个已识别的值时，将自动填写各种字段。
- en: Time for Action—Creating a Dynamic Form
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作时间—创建动态表单
- en: We are going to create an application that makes it easy to fill out the various
    fields of a form when a certain value is provided in one of the fields. This is
    a very common occurrence in most of the web-based business applications where,
    for instance, user information needs to be provided in order to register for a
    service. In the case of a new user, this information will need to be filled out
    by the user, but in the case of a previous user of the system, this information
    is already available and can be accessed and used for filling out all the fields
    when the user types in a unique identifier that identifies him or her, an ID of
    some sort. In this application we are going to automatically fill out the various
    fields of the form when a user enters in a `CustomerID` that is known to us.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，使得在某个字段中提供特定值时，填写表单的各种字段变得容易。这在大多数基于Web的业务应用程序中是非常常见的情况，例如，需要提供用户信息以注册服务。对于新用户，这些信息需要由用户填写，但对于系统的先前用户，这些信息已经可用，并且可以在用户输入唯一标识符（识别他或她的ID）时访问和用于填写所有字段。在这个应用程序中，当用户输入我们已知的`CustomerID`时，我们将自动填写表单的各种字段。
- en: 'Create a new Java file named `AutoFormFillService.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define an `AutoFormFillService` interface with one method to retrieve
    the form information when provided a key:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建名为`AutoFormFillService.java`的新Java文件。定义一个`AutoFormFillService`接口，其中包含一个方法，用于在提供键时检索表单信息：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a new Java file named `AutoFormFillServiceAsync.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `AutoFormFillAsync` interface:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建名为`AutoFormFillServiceAsync.java`的新Java文件。定义一个`AutoFormFillAsync`接口：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a new Java file named `AutoFormFillServiceImpl.java` in the `com.packtpub.gwtbook.samples.server`
    package. Define a `AutoFormFillServiceImpl` class that extends `RemoteServiceServlet`
    and implements the previously created `AutoFormFillService` interface. First we
    will use a simple `HashMap` to store the customer information and add a method
    to populate the map. In your application you can retrieve this customer information
    from any external data source, such as a database.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.server`包中创建名为`AutoFormFillServiceImpl.java`的新Java文件。定义一个`AutoFormFillServiceImpl`类，该类扩展`RemoteServiceServlet`并实现先前创建的`AutoFormFillService`接口。首先，我们将使用一个简单的`HashMap`来存储客户信息，并添加一个方法来填充映射。在您的应用程序中，您可以从任何外部数据源（如数据库）检索此客户信息。
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Add logic to the `getFormInfo()` to return the form information for a provided
    form key. We take the provided key that was entered in the form by the user, and
    use that to look up the user information, and return it asynchronously to the
    client application.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getFormInfo()`中添加逻辑，以返回提供的表单键的表单信息。我们获取用户在表单中输入的提供的键，并使用它来查找用户信息，并将其异步返回给客户端应用程序。
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create the user interface for this application in a new Java file named `AutoFormFillPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create a text box,
    and a label for each information field.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的新Java文件`AutoFormFillPanel.java`中创建此应用程序的用户界面。为每个信息字段创建一个文本框和一个标签。
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Create the service class that we are going to invoke.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们要调用的服务类。
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Create private methods for setting and clearing the values of the form fields.
    We will use these methods from the event handlers that we will set up in the constructor.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用于设置和清除表单字段值的私有方法。我们将从构造函数中设置的事件处理程序中使用这些方法。
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create accessor methods for retrieving the different labels. We will use these
    to get the label and set its value when we retrieve information from the service.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用于检索不同标签的访问器方法。当我们从服务中检索信息时，我们将使用这些方法来获取标签并设置其值。
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create accessor methods for retrieving the different text boxes. We will use
    these to get the text box and set its value when we retrieve information from
    the service.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为检索不同的文本框创建访问器方法。当我们从服务中检索信息时，我们将使用这些方法来获取文本框并设置其值。
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the constructor for `AutoFormFillPanel`, create a new `VerticalPanel` that
    we will use as the container for the widgets that we are adding to the user interface.
    Also, create the service target and set its entry point.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AutoFormFillPanel`的构造函数中，创建一个新的`VerticalPanel`，我们将使用它作为添加到用户界面的小部件的容器。还要创建服务目标并设置其入口点。
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Also in the constructor, create a `HorizontalPanel` named `itemPanel` and add
    the widgets for each form field to it. For instance, this is how we add the `customerID`
    field to the `itemPanel`, set its style, and add this `itemPanel` to the `workPanel`,
    which is the main container that we have created earlier to hold the widgets for
    our user interface. You will create a new `HorizontalPanelfor` each form field
    and add it to the `workPanel`. Repeat for each form field that we have.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在构造函数中，创建一个名为`itemPanel`的`HorizontalPanel`，并将每个表单字段的小部件添加到其中。例如，这是我们如何将`customerID`字段添加到`itemPanel`，设置其样式，并将此`itemPanel`添加到`workPanel`，这是我们之前创建的用于容纳用户界面小部件的主容器。对于每个表单字段，您将创建一个新的`HorizontalPanel`并将其添加到`workPanel`。对于我们拥有的每个表单字段，重复此操作。
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the same constructor, add a keyboard listener to the `custID` text box and
    in the event handler invoke the service to retrieve customer information for the
    value typed in customer ID. Set the values of the form fields from the return
    value of the service call.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的构造函数中，向`custID`文本框添加键盘监听器，并在事件处理程序中调用服务以检索键入客户ID的客户信息。从服务调用的返回值设置表单字段的值。
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Finally, in the constructor, create a little info panel that displays descriptive
    text about this application, so that we can display this text when this sample
    is selected in the list of available samples in our `Samples` application. Add
    the info panel and the work panel to a dock panel, and initialize the widget.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，创建一个小的信息面板，显示关于此应用程序的描述性文本，以便在我们的`Samples`应用程序的可用示例列表中选择此示例时显示此文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件。
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Add the service to the module file for the `Samples` application—`Samples.gwt.xml`
    in the `com.packtpub.gwtbook.samples` package.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务添加到`Samples`应用程序的模块文件`Samples.gwt.xml`中，该文件位于`com.packtpub.gwtbook.samples`包中。
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is what the application looks like when the user types in a `CustomerID`,
    in this case 1111, which is known to our application:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在我们的应用程序中输入已知的`CustomerID`（在本例中为1111）时，应用程序的外观如下：
- en: '![Time for Action—Creating a Dynamic Form](img/1007_04_05.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-创建动态表单](img/1007_04_05.jpg)'
- en: What Just Happened?
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We create a service that contains customer data stored in a `HashMap` data structure.
    In a real application, this data would usually come from an external data source
    such as a database. For each customer, we create a map that contains the customer
    information fields stored as key value pairs. This customer map is then added
    to a master `HashMap` using the `customerID` as the key. This makes it easier
    for us to retrieve the right customer information when we are provided with the
    key, which in this case is the `customerID`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个包含存储在`HashMap`数据结构中的客户数据的服务。在一个真实的应用程序中，这些数据通常来自外部数据源，比如数据库。对于每个客户，我们创建一个包含客户信息字段存储为键值对的map。然后，将这个客户map添加到一个主`HashMap`中，使用`customerID`作为键。这样，当我们提供键时，也就是`customerID`时，我们更容易检索到正确的客户信息。
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the user interface is loaded in the browser, the user is presented with
    a page that contains fields that are pertinent to a customer. The user needs to
    type a unique customer ID in the text box provided. There are only three known
    customer ids in this sample application—1111, 2222, and 3333\. We are using the
    customer ID as the key to customer information here, but you could also use a
    social security number or any other unique ID based on the requirements of your
    application. Of course in a real application the user would need to enter a password
    as well as an ID number to avoid unauthorized display of confidential details
    to anyone entering a valid ID. When the user types in a customer ID in the text
    box, for instance 1111, the event handler `onKeyUp()` is triggered. In the event
    handler we invoke the `getFormInfo()` method in the `AutoFormFillService` and
    pass in the typed text as a parameter. The `getFormInfo()` method searches the
    customer information for the given customer ID and returns the information as
    a `HashMap`. If no information is found due to an unknown ID, we return an empty
    map. The values from this map are retrieved and the corresponding fields are filled
    in by calling the `setValues()`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户界面在浏览器中加载时，用户将看到一个包含与客户相关的字段的页面。用户需要在提供的文本框中输入一个唯一的客户ID。在这个示例应用程序中只有三个已知的客户ID——1111、2222和3333。我们在这里使用客户ID作为客户信息的键，但根据应用程序的要求，您也可以使用社会安全号码或任何其他唯一ID。当用户在文本框中输入客户ID，例如1111，事件处理程序`onKeyUp()`被触发。在事件处理程序中，我们调用`AutoFormFillService`中的`getFormInfo()`方法，并将输入的文本作为参数传递。`getFormInfo()`方法搜索给定客户ID的客户信息，并将信息作为`HashMap`返回。如果由于未知ID而找不到信息，我们将返回一个空的map。从这个map中检索值，并通过调用`setValues()`填充相应的字段。
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is a simple but very powerful and effective way to provide a nice experience
    for users interacting with our system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为用户与我们的系统交互提供良好体验的一种简单但非常强大和有效的方式。
- en: Sortable Tables
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可排序表格
- en: Tables are probably the most common way to display business data in an application.
    They are well known to all users and provide a universal way to view data. This
    has traditionally been hard to on a web page. GWT provides us with the ability
    to easily and quickly provide this functionality in our applications. We are going
    to create an application that contains a table whose rows can be sorted in an
    ascending or descending order by clicking on a column header. This provides for
    a much better user experience, as the user can modify the order of the displayed
    data to suit their needs. The table widgets provided with GWT does not have a
    built-in way to provide this capability, but GWT provides us with enough tools
    to add support for this easily to a table. Please keep in mind that this is just
    one way to create tables that can be sorted using GWT.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 表格可能是在应用程序中显示业务数据最常见的方式。它们为所有用户所熟知，并提供了一种通用的查看数据的方式。在网页上传统上很难实现这一点。GWT为我们提供了在应用程序中轻松快速地提供这种功能的能力。我们将创建一个包含表格的应用程序，其中的行可以通过点击列标题以升序或降序排序。这为用户提供了更好的用户体验，因为用户可以修改显示的数据顺序以满足他们的需求。GWT提供的表格小部件没有内置的方法来提供这种功能，但是GWT为我们提供了足够的工具来轻松地为表格添加支持。请记住，这只是使用GWT创建可排序的表格的一种方式。
- en: Time for Action—Sorting Table Rows
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间——排序表格行
- en: We do not need to create a service for this application as the sorting of data
    takes place on the client. We will create an application with some seed data for
    our table, and then add support for sorting that data by clicking on the column
    headers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要为这个应用程序创建一个服务，因为数据的排序是在客户端上进行的。我们将创建一个包含表格种子数据的应用程序，然后添加支持通过点击列标题对数据进行排序。
- en: Create a new Java file named `SortableTablesPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package. We will add support to this class to make the included table sortable
    by clicking on the column headers. First create a `CustomerData` class that will
    represent one row in the table, and accessors for each field.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中创建一个名为`SortableTablesPanel.java`的新的Java文件。我们将为这个类添加支持，使包含的表格可以通过点击列标题进行排序。首先创建一个`CustomerData`类，它将代表表格中的一行，并为每个字段创建访问器。
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create an `ArrayList` named `customerData` for storing the customer data. Create
    variables for storing the sort direction, the headers for the columns in the table,
    temporary data structures for sorting, and a `FlexTable` for displaying the customer
    data.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`customerData`的`ArrayList`来存储客户数据。创建变量来存储排序方向、表格中列的标题、用于排序的临时数据结构，以及用于显示客户数据的`FlexTable`。
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the constructor for the `SortableTablesPanel`, create a new `VerticalPanel`
    that we will use as the container for the widgets that we are adding to the user
    interface. Set the styles for the table and set the column headers for the table.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SortableTablesPanel`的构造函数中，创建一个新的`VerticalPanel`，我们将使用它作为添加到用户界面的小部件的容器。设置表格的样式，并设置表格的列标题。
- en: '[PRE36]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Also in the constructor, add five customers to the `customerData` list. Add
    the data from this list to the table and set a listener on the table that will
    sort the rows when the first column is clicked. We will be displaying this list
    of customers in the table and then sorting the table when a column header is clicked.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在构造函数中，向`customerData`列表添加五个客户。将此列表中的数据添加到表格中，并在表格上设置一个监听器，以在点击第一列时对行进行排序。我们将在表格中显示这些客户的列表，然后在点击列标题时对表格进行排序。
- en: '[PRE37]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Finally, in the constructor, add the table to the work panel. Create a little
    info panel that displays descriptive text about this application, so that we can
    display this text when this sample is selected in the list of available samples
    in our `Samples` application. Add the info panel and the work panel to a dock
    panel, and initialize the widget.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，将表格添加到工作面板。创建一个小的信息面板，显示关于此应用程序的描述性文本，以便在`Samples`应用程序的可用样本列表中选择此样本时，我们可以显示此文本。将信息面板和工作面板添加到一个停靠面板，并初始化小部件。
- en: '[PRE38]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Add a private method for redrawing the headers of the table. This is a nice
    way for us to redraw the table column header so that we can change the image displayed
    in the header to match the current sort direction.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为表格的标题重新绘制一个私有方法。这是一个很好的方法，可以重新绘制表格列标题，以便我们可以更改标题中显示的图像，以匹配当前的排序方向。
- en: '[PRE39]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Add a private method to redraw the entire table when we change the sort order.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有方法，在更改排序顺序时重新绘制整个表格。
- en: '[PRE40]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Add a private method that can sort the data in an ascending or descending way
    and redraw the table with the sorted rows. We are using the sort method provided
    by the `Collections` class to sort the data, but can also modify this to use the
    `Comparator` class to compare two pieces of data, and then use that for sorting.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有方法，可以按升序或降序对数据进行排序，并重新绘制带有排序行的表格。我们正在使用`Collections`类提供的sort方法对数据进行排序，但也可以修改为使用`Comparator`类来比较两个数据，并将其用于排序。
- en: '[PRE41]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here is a screenshot of the application. You can click on any of the column
    headers to sort the data.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的屏幕截图。您可以点击任何列标题来对数据进行排序。
- en: '![Time for Action—Sorting Table Rows](img/1007_04_06.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-排序表行](img/1007_04_06.jpg)'
- en: What Just Happened?
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We create a `CustomerData` class to represent each row in a `FlexTable`. We
    then create some customer data and store it in an `ArrayList`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`CustomerData`类来表示`FlexTable`中的每一行。然后我们创建一些客户数据，并将其存储在`ArrayList`中。
- en: '[PRE42]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Data from this list is added to the table. We need to specify the row number
    and column number in order to add an element to the table.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将此列表中的数据添加到表格中。我们需要指定行号和列号，以便将元素添加到表格中。
- en: '[PRE43]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The column headers are contained in row zero and the table data starts from
    row 1\. We add the column header by setting the HTML for that particular cell
    like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 列标题包含在零行中，表格数据从第1行开始。我们通过设置该特定单元格的HTML来添加列标题，如下所示：
- en: '[PRE44]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This enables us to add a snippet of HTML to the cell instead of setting just
    plain text. We add the text for the column header along with an `img` tag with
    a blank image file. A column header without an image next to the text visually
    indicates to the user that there is no sort order specified for that particular
    column. When we click on a column header, we will be modifying this image to use
    either an ascending or descending icon. An event handler is registered to listen
    for clicks on the table. GWT does not contain a mechanism to register a handler
    when someone clicks on a specific cell, so we use the general table click listener
    and check to see if the click was on row zero, which is the row that contains
    the column headers. If the user did click on the column header, we go ahead and
    sort the table.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够向单元格添加一小段HTML，而不仅仅是设置纯文本。我们添加列标题的文本以及一个带有空白图像文件的`img`标签。列标题旁边没有图像的列标题在视觉上向用户指示，该特定列没有指定排序顺序。当我们点击列标题时，我们将修改此图像以使用升序或降序图标。注册了一个事件处理程序来监听表格上的点击。GWT不包含在某人点击特定单元格时注册处理程序的机制，因此我们使用通用表格点击监听器，并检查点击是否在零行，即包含列标题的行。如果用户确实点击了列标题，我们将继续对表格进行排序。
- en: The real magic happens in the `sortTable()` method. A temporary `HashMap` named
    `dataBucket` is created to store the rows from the table, with each row keyed
    by the value in the column whose header was clicked, along with a temporary `ArrayList`
    named `sortColumnValues` that stores the column values in the column whose header
    was clicked. This means that the `sortColumnValues` list contains values that
    are keys in the `dataBucket` map.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的魔法发生在`sortTable()`方法中。创建一个临时的名为`dataBucket`的`HashMap`来存储来自表格的行，每行都以被点击的列中的值为键，以及一个临时的名为`sortColumnValues`的`ArrayList`，它存储被点击的列中的列值。这意味着`sortColumnValues`列表包含作为`dataBucket`映射中键的值。
- en: '[PRE45]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We check the value of the `sortDirection` variable and, based on the value,
    sort the `sortColumnValues` list either ascending or descending to contain the
    column values in the right order. The built-in `sort()` and `reverseSort()` methods
    of the `Collections` class are used to provide the sorting mechanism.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查`sortDirection`变量的值，并根据该值对`sortColumnValues`列表进行升序或降序排序，以包含正确顺序的列值。使用`Collections`类的内置`sort()`和`reverseSort()`方法来提供排序机制。
- en: '[PRE46]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The table column headers are then redrawn so that the column that was clicked
    will have the right icon for the sort order and all the other column headers have
    only plain text and a blank image. Finally, we redraw the table by iterating through
    the `sortColumnValues` list and retrieving the associated `CustomerData` object
    from the `dataBucket` and adding it as a row in the table.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新绘制表格列标题，以便被点击的列将具有正确的排序顺序的图标，而所有其他列标题只有纯文本和空白图像。最后，我们通过遍历`sortColumnValues`列表并从`dataBucket`中检索关联的`CustomerData`对象，将其作为表格中的一行添加，重新绘制表格。
- en: 'This application demonstrates the tremendous power that is provided by the
    GWT framework that enables you to manipulate tables to extend their functionality.
    GWT provides different kinds of tables for building user interfaces:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序展示了GWT框架提供的巨大能力，使您能够操纵表格以扩展其功能。GWT提供了不同类型的表格来构建用户界面：
- en: '**FlexTable:** A table that creates cells on demand. You can even have rows
    that contain a different number of cells. This table expands as needed when you
    add rows and columns to it.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FlexTable:** 一个按需创建单元格的表格。甚至可以有包含不同数量单元格的行。当您向其添加行和列时，此表格会根据需要扩展。'
- en: '**Grid:** A table that can contain text, HTML, or child widgets. It must, however,
    be created explicitly with the number of desired rows and columns.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grid:** 一个可以包含文本、HTML或子小部件的表格。但是，它必须明确地创建，指定所需的行数和列数。'
- en: We will be using both of these table widgets extensively in the applications
    that we build in this chapter and the rest of this book.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章和本书的其余部分中广泛使用这两个表小部件。
- en: Dynamic Lists
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态列表
- en: We will create an application that uses dynamic lists to present the user with
    a way to filter criteria for a search. In this section we are going to create
    dynamic tables, which will enable us to populate child tables as items in a master
    table are selected. We are going to do this by using GWT's AJAX support and display
    only those items in a child table that are relevant to the selection in the main
    table. This application will make it easy to navigate and filter out criteria
    for a search. In this sample application, we are going to enable a user to select
    a manufacturer of automobiles, which will automatically fill a second list with
    all the brands of cars made by that manufacturer. When the customer further selects
    an item in this list of brands, a third list will be automatically populated with
    the models of cars for the selected brand. In this way, a user can interactively
    select and navigate through the search criteria, in a user-friendly and intuitive
    way without having to submit data and refresh the page to present some of this
    information.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，使用动态列表向用户呈现一种过滤搜索条件的方式。在本节中，我们将创建动态表格，这将使我们能够在选择主表中的项目时填充子表格。我们将通过使用GWT的AJAX支持来实现这一点，并且只显示与主表中选择相关的子表中的项目。这个应用程序将使得轻松浏览和过滤搜索条件成为可能。在这个示例应用程序中，我们将使用户能够选择汽车制造商，这将自动填充第二个列表，其中包含该制造商生产的所有汽车品牌。当客户进一步在这些品牌列表中选择项目时，第三个列表将自动填充所选品牌的汽车型号。通过这种方式，用户可以交互式地选择和浏览搜索条件，以用户友好和直观的方式，而无需提交数据和刷新页面来呈现这些信息的一部分。
- en: Time for Action—Filtering Search Criteria
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-过滤搜索条件
- en: As a part of this application, we will also create a service that will provide
    information on the manufacturers, brands, and models, and create a user interface
    that asynchronously retrieves this information from the service to display it
    to the user.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这个应用程序的一部分，我们还将创建一个服务，它将提供有关制造商、品牌和型号的信息，并创建一个用户界面，异步地从服务中检索这些信息，以显示给用户。
- en: 'Create a new Java file named `DynamicListsService.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `DynamicListsService` interface with methods for retrieving
    information about the manufacturers, brands, and models:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`DynamicListsService.java`的新的Java文件。定义一个`DynamicListsService`接口，其中包含检索有关制造商、品牌和型号信息的方法：
- en: '[PRE47]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a new Java file named `DynamicListsServiceAsync.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `DynamicListsServiceAsync` interface:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`DynamicListsServiceAsync.java`的新的Java文件。定义一个`DynamicListsServiceAsync`接口：
- en: '[PRE48]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Create a new Java file named `DynamicListsServiceImpl.java` in the `com.packtpub.gwtbook.samples.server`
    package. Define a `DynamicListsServiceImpl` class that extends `RemoteServiceServlet`
    and implements the previously created `DynamicListsService` interface. This class
    will return information about the manufacturers, brands, and models. Create a
    class named `Manufacturer` to encapsulate the information about each manufacturer,
    including the brands and models of automobiles offered by them.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.server`包中创建一个名为`DynamicListsServiceImpl.java`的新的Java文件。定义一个扩展`RemoteServiceServlet`并实现先前创建的`DynamicListsService`接口的`DynamicListsServiceImpl`类。这个类将返回有关制造商、品牌和型号的信息。创建一个名为`Manufacturer`的类，封装有关每个制造商的信息，包括它们提供的汽车品牌和型号。
- en: '[PRE49]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Create a private method to load the manufacturer information into a `HashMap`.
    The data on the manufacturers will be loaded into the first table later on. When
    the user interface starts up, the manufacturers table is the only one with the
    data, and provides the starting point for using the application.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个私有方法，将制造商信息加载到`HashMap`中。制造商的数据将稍后加载到第一个表中。当用户界面启动时，制造商表是唯一具有数据的表，为使用应用程序提供了起点。
- en: '[PRE50]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Implement the service method for retrieving a list of manufacturers.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现用于检索制造商列表的服务方法。
- en: '[PRE51]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Implement the service method for retrieving the list of brands offered by a
    manufacturer.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现用于检索制造商提供的品牌列表的服务方法。
- en: '[PRE52]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Implement the service method for retrieving the models offered by a manufacturer
    for a particular brand.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现用于检索特定品牌制造商提供的型号的服务方法。
- en: '[PRE53]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Create the user interface for this application in a new Java file named `DynamicListsPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create three Grid
    widgets to hold the manufacturers, brands, and models information and add them
    to the main panel. Create the service class that we are going to invoke.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中创建一个名为`DynamicListsPanel.java`的新的Java文件，为这个应用程序创建用户界面。创建三个Grid小部件来保存制造商、品牌和型号信息，并将它们添加到主面板中。创建我们将要调用的服务类。
- en: '[PRE54]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Add a private method for clearing out the panels.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个用于清除面板的私有方法。
- en: '[PRE55]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the constructor for the `DynamicListsPanel`, create a new `HorizontalPanel`
    that we will use as the container for the widgets that we are adding to the user
    interface. Also, create the service target and set its entry point.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DynamicListsPanel`的构造函数中，创建一个新的`HorizontalPanel`，我们将用它作为添加到用户界面的小部件的容器。同时，创建服务目标并设置其入口点。
- en: '[PRE56]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the same constructor, add an event handler to listen for clicks on the Select
    Manufacturer table.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个构造函数中，添加一个事件处理程序来监听对“选择制造商”表格的点击。
- en: '[PRE57]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In the same constructor, add an event handler to listen for clicks on the Select
    Brand table.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个构造函数中，添加一个事件处理程序来监听对“选择品牌”表格的点击。
- en: '[PRE58]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Also in the constructor, add a listener to the Select Models table to clear
    out the selections when a model is selected. Load the Select Manufacturer table
    with data when the application starts.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，还要添加一个监听器，以便在选择车型时清除选择。在应用程序启动时，加载“选择制造商”表格的数据。
- en: '[PRE59]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In the constructor, create a `VerticalPanel` named `itemPanel`, and add each
    table and its associated label to it. Create an `itemPanel` for each of the three
    tables, set the style, and add them to the `workPanel`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，创建一个名为`itemPanel`的`VerticalPanel`，并将每个表格及其相关的标签添加到其中。为三个表格创建一个`itemPanel`，设置样式，并将它们添加到`workPanel`中。
- en: '[PRE60]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Finally, in the constructor, create a little info panel that displays descriptive
    text about this application, so that we can display this text when this sample
    is selected in the list of available samples in our `Samples` application. Add
    the info panel and the work panel to a dock panel, and set the widget.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，创建一个小的信息面板，显示关于这个应用程序的描述性文本，这样当我们在`Samples`应用程序的可用示例列表中选择此样本时，我们可以显示这个文本。将信息面板和工作面板添加到一个停靠面板中，并设置小部件。
- en: '[PRE61]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Add the service to the module file for the `Samples` application—`Samples.gwt.xml`
    in the `com.packtpub.gwtbook.samples` package.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务添加到`Samples`应用程序的模块文件中——`com.packtpub.gwtbook.samples`包中的`Samples.gwt.xml`。
- en: '[PRE62]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Here is a screenshot of the application when we have selected one of the manufacturers—Mercedes,
    and one of its brands—E-class:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个应用程序的截图，当我们选择了其中一个制造商——奔驰，和它的一个品牌——E级时：
- en: '![Time for Action—Filtering Search Criteria](img/1007_04_07.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间—过滤搜索条件](img/1007_04_07.jpg)'
- en: What Just Happened?
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We create a list of the Manufacturer objects, one per manufacturer. Each of
    these Manufacturer objects contains a `HashMap` named brands, which contains an
    `ArrayList` of models for that particular brand. This data structure that we have
    just created contains all the information we need regarding the brands and models
    offered by a manufacturer. In an actual application this data would usually be
    retrieved from an enterprise data source. For instance, here is how we build up
    the data for the manufacturer Mercedes:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个制造商对象的列表，每个制造商一个。每个制造商对象都包含一个名为品牌的`HashMap`，其中包含该特定品牌的车型的`ArrayList`。我们刚刚创建的这个数据结构包含了关于制造商提供的品牌和车型的所有信息。在实际应用中，这些数据通常会从企业数据源中检索出来。例如，这是我们如何构建奔驰制造商的数据：
- en: '[PRE63]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We then implement the three service methods from the interface to return a
    list of manufacturers, a list of brands for a given manufacturer, and finally
    a list of models for a given manufacturer and brand. Each of these methods navigates
    the Manufacturer objects, and retrieves and returns a list with the necessary
    information. When we request a list of models for a given brand and manufacturer,
    the service method implementation returns the list by navigating the manufacturers
    list like this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们实现了接口中的三个服务方法，以返回制造商列表、给定制造商的品牌列表，最后是给定制造商和品牌的车型列表。这些方法中的每一个都导航到制造商对象，并检索并返回包含必要信息的列表。当我们请求给定品牌和制造商的车型列表时，服务方法的实现通过导航制造商列表返回列表，如下所示：
- en: '[PRE64]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The user interface consists of three Grid widgets. A Grid is another kind of
    a table widget that can contain text, HTML, or a child widget within its cells.
    When the application is initialized, the list of manufacturers is initially retrieved
    from the `DynamicListsService` and the manufacturers grid is filled with the data.
    An event handler is registered to listen for clicks in the grids. When an item
    in the manufacturers grid is clicked, we clear the brands grid first and then
    invoke the `getBrands()` method on the service and load the brands grid with the
    retrieved information. When the user selects an item from the brands grid by clicking
    on it, we first clear the models grid and then we invoke the `getModels()` method
    on the service and load the models grid with the retrieved information. Every
    time we make a selection in any of the grids, we were able to retrieve all this
    information using GWT without any page refreshes or page submissions!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面由三个网格小部件组成。网格是另一种可以在其单元格中包含文本、HTML或子小部件的表格小部件。当应用程序初始化时，首先从`DynamicListsService`中检索制造商列表，然后用数据填充制造商网格。注册了一个事件处理程序来监听网格中的点击。当制造商网格中的项目被点击时，我们首先清除品牌网格，然后调用服务的`getBrands()`方法，并用检索到的信息加载品牌网格。当用户通过点击在品牌网格中选择一个项目时，我们首先清除车型网格，然后调用服务的`getModels()`方法，并用检索到的信息加载车型网格。每当我们在任何网格中进行选择时，我们都能够使用GWT检索到所有这些信息，而无需进行任何页面刷新或提交！
- en: Flickr-Style Editable Labels
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flickr风格的可编辑标签
- en: Flickr ([http://flickr.com/](http://flickr.com/)) is one of the most innovative
    Web 2.0 sites on the Internet. Its use of AJAX makes this website a pleasure to
    use. A prime example of this is the label widget that is displayed below any image
    that you add to your flickr account. It looks like a simple label, but when you
    hover the cursor over it, it changes color indicating that it is more than a label.
    When you click on it, it transforms into a text box where you can edit the text
    in the label! You even get buttons to make your changes persist or cancel to discard
    your changes. After you save or cancel, it transforms back into a label again.
    Try it out. It is really neat! This is a great way of combining multiple HTML
    controls—a label, text box, and buttons into one compound control that saves valuable
    space on the web page, while providing the necessary functionality in a very user-friendly
    manner. In this section, we are going to recreate the flickr-style label using
    the widgets available to us in GWT.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Flickr（[http://flickr.com/](http://flickr.com/)）是互联网上最具创新性的Web 2.0网站之一。其使用AJAX使得这个网站非常愉快。一个典型的例子是在您添加到flickr帐户的任何图像下方显示的标签小部件。它看起来像一个简单的标签，但当您将光标悬停在其上时，它会改变颜色，表明它不仅仅是一个标签。当您单击它时，它会转换为一个文本框，您可以在其中编辑标签中的文本！您甚至可以获得按钮来使您的更改持久化或取消以放弃更改。保存或取消后，它会再次转换为标签。试一试。这真的很棒！这是将多个HTML控件-标签、文本框和按钮-组合成一个复合控件的绝佳方式，可以节省网页上的宝贵空间，同时以非常用户友好的方式提供必要的功能。在本节中，我们将使用GWT中可用的小部件重新创建flickr风格的标签。
- en: Time for Action—A Custom Editable Label
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-自定义可编辑标签
- en: We are going to create a label that is dynamically converted into an editable
    text box when you click on it. It will also provide you with the ability to save
    changes or discard changes. If you modify the text and save the changes, the label
    text will be changed, otherwise the original text will be retained, and the text
    box will be transformed back into a label. It is a very innovative user interface
    and you really need to use it to appreciate it!
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个标签，当您单击它时会动态转换为可编辑的文本框。它还将为您提供保存更改或丢弃更改的能力。如果您修改文本并保存更改，则标签文本将更改，否则原始文本将保留，并且文本框将转换回标签。这是一个非常创新的用户界面，您真的需要使用它来欣赏它！
- en: Create a new Java file named `FlickrEditableLabelPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package. Create an image, a label, a text box and two buttons for the user interface.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中创建一个名为`FlickrEditableLabelPanel.java`的新Java文件。为用户界面创建一个图像、一个标签、一个文本框和两个按钮。
- en: '[PRE65]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Create a private method for displaying the text box along with the buttons while
    hiding the label. This is what will essentially transform the label into a text
    box with buttons!
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个私有方法来显示文本框以及按钮，同时隐藏标签。这将基本上将标签转换为带有按钮的文本框！
- en: '[PRE66]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In the constructor for `FlickrEditableLabelPanel`, create an event handler that
    listens for a click on the label, and invokes the above method.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FlickrEditableLabelPanel`的构造函数中，创建一个事件处理程序，以侦听标签的单击，并调用上述方法。
- en: '[PRE67]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Also, in the constructor, create an event handler that listens for a mouse hover
    and modifies the label style to provide a visual cue to the user to click on the
    label.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在构造函数中，创建一个事件处理程序，以侦听鼠标悬停并修改标签样式，为用户提供视觉提示，以便单击标签。
- en: '[PRE68]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Create a text box for typing in the new name in the constructor and create an
    event handler that listens for the return key and escape key when the focus is
    in the text box, and either saves the change or cancels out.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中为输入新名称创建一个文本框，并创建一个事件处理程序，以侦听文本框中的焦点的回车键和ESC键，并保存更改或取消更改。
- en: '[PRE69]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Create an event handler in the constructor to listen for a click on the save
    button and save the changes.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中创建一个事件处理程序，以侦听保存按钮的单击并保存更改。
- en: '[PRE70]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Create an event handler in the constructor to listen for a click on the cancel
    button and discard any changes made.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中创建一个事件处理程序，以侦听取消按钮的单击并丢弃所做的任何更改。
- en: '[PRE71]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the constructor, set the visibility of the widgets when the application is
    first loaded. When the user interface is first displayed, we want the label to
    be shown and everything else hidden.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，设置应用程序首次加载时小部件的可见性。当首次显示用户界面时，我们希望显示标签，而隐藏其他所有内容。
- en: '[PRE72]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Finally, in the constructor, create a `HorizontalPanel` named `buttonPanel`
    and add the widgets that we created to it. Create a `VerticalPanel` named `workPanel`
    and add the `buttonPanel` to it. Create a little info panel that displays descriptive
    text about this application, so that we can display this text when this sample
    is selected in the list of available samples in our `Samples` application. Add
    the info panel and the work panel to a dock panel, and initialize the widget.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，创建一个名为`buttonPanel`的`HorizontalPanel`，并将我们创建的小部件添加到其中。创建一个名为`workPanel`的`VerticalPanel`，并将`buttonPanel`添加到其中。创建一个小信息面板，显示有关此应用程序的描述性文本，以便在我们的`Samples`应用程序的可用样本列表中选择此样本时显示此文本。将信息面板和工作面板添加到一个停靠面板，并初始化小部件。
- en: '[PRE73]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Create a private method for displaying the label and hiding the text. Now we
    are hiding the label and displaying our nice text-editing interface with the text
    box and the buttons for saving or discarding changes made.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个私有方法来显示标签并隐藏文本。现在我们正在隐藏标签，并显示我们漂亮的文本编辑界面，其中包括文本框和用于保存或放弃所做更改的按钮。
- en: '[PRE74]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Create a private method for saving the changes.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个私有方法来保存更改。
- en: '[PRE75]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Create a method for discarding the changes.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个丢弃更改的方法。
- en: '[PRE76]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This is what the application looks like when you visit the page:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问页面时，应用程序的外观如下：
- en: '![Time for Action—A Custom Editable Label](img/1007_04_08.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-自定义可编辑标签](img/1007_04_08.jpg)'
- en: If you click on the label under the image, it will be converted to a text box
    with a save and cancel button. You can modify the text and save changes or click
    on cancel to change back to a label.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击图像下方的标签，它将转换为带有保存和取消按钮的文本框。您可以修改文本并保存更改，或单击取消以将其更改回标签。
- en: '![Time for Action—A Custom Editable Label](img/1007_04_09.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![Time for Action—A Custom Editable Label](img/1007_04_09.jpg)'
- en: What Just Happened?
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We create an user interface that consists of an image with a label under it,
    a text box, a save button, a label, and a cancel button. An event handler is registered
    to listen for clicks on the label. When the user clicks on the label, the event
    handler is triggered, and we hide the label, and set the text box and the buttons
    to be visible.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个用户界面，其中包括一个带有标签的图像，一个文本框，一个保存按钮，一个标签和一个取消按钮。事件处理程序被注册用来监听标签的点击。当用户点击标签时，事件处理程序被触发，我们隐藏标签，并设置文本框和按钮可见。
- en: '[PRE77]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: If we modify the text and click save, the event handler that is listening for
    the click on the save button saves the text as the values of the label and once
    again displays the label and hides all the other widgets.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们修改文本并点击保存，监听保存按钮点击的事件处理程序将保存文本作为标签的值，并再次显示标签并隐藏所有其他小部件。
- en: '[PRE78]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: If we discard the changes by clicking the cancel button, the event handler that
    is listening for the click on the cancel button will display the label and hide
    all the other widgets.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过点击取消按钮放弃更改，监听取消按钮点击的事件处理程序将显示标签并隐藏所有其他小部件。
- en: '[PRE79]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In this application we do not invoke any services to propagate the change to
    a server-side process, but we can easily do that by adding the code to invoke
    a service when we save the change made to the text.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们没有调用任何服务来传播更改到服务器端的过程，但我们可以很容易地通过添加代码来调用服务，以保存对文本所做的更改。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we took a look at creating a live search application. Then we
    took a look at creating a password strength checker. Also, we created forms that
    can be auto-filled with information from the server. We also created applications
    where tables were sorted. Then before creating a flickr-style editable label,
    we created dynamically populating lists based on user selection.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了创建一个实时搜索应用程序。然后我们看了创建一个密码强度检查器。此外，我们创建了可以从服务器自动填充信息的表单。我们还创建了对表进行排序的应用程序。然后在创建类似flickr风格的可编辑标签之前，我们创建了根据用户选择动态填充列表的应用程序。
- en: In the next chapter, we are going to look at creating responsive complex interfaces,
    which use some of the more advanced features of GWT.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习创建响应式复杂界面，使用GWT的一些更高级的功能。
