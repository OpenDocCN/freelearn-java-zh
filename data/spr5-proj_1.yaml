- en: Creating an Application to List World Countries with their GDP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个列出世界各国及其GDP的应用程序
- en: Spring is an ecosystem that facilitates the development of JVM-based enterprise
    applications. And this is achieved using various modules provided by Spring. One
    of them, called Spring-core, is the heart of the framework in the Spring ecosystem,
    which provides support for dependency injection, web application, data access,
    transaction management, testing, and others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Spring是一个促进基于JVM的企业应用程序开发的生态系统。这是通过Spring提供的各种模块实现的。其中之一，称为Spring-core，是Spring生态系统中的框架核心，它提供了依赖注入、Web应用程序、数据访问、事务管理、测试等方面的支持。
- en: In this chapter, we will start from scratch and use Spring Framework to develop
    a simple application. Familiarity with Spring Framework is not required and we
    will see to it that by the end of the chapter you should be confident enough to
    use Spring Framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头开始，使用Spring框架开发一个简单的应用程序。不需要熟悉Spring框架，我们将在本章结束时确保您对Spring框架的使用有足够的信心。
- en: 'The following are the topics covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to the application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序简介
- en: Understanding the database structure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解数据库结构
- en: Understanding the World Bank API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解世界银行API
- en: Designing the wireframes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计线框图
- en: Creating an empty application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个空的应用程序
- en: Defining the model classes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义模型类
- en: Defining the data access layer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义数据访问层
- en: Defining the API controllers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义API控制器
- en: Deploying to Tomcat
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到Tomcat
- en: Defining the view controllers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义视图控制器
- en: Defining the views
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义视图
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    link: [https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01](https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01).
    The code can be executed on any operating system, although it has only been tested
    on Windows.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从以下GitHub链接下载：[https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01](https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01)。代码可以在任何操作系统上执行，尽管它只在Windows上进行了测试。
- en: Introduction to the application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序简介
- en: We will develop an application to show the GDP information of various countries.
    We will make use of the sample World DB ([https://dev.mysql.com/doc/world-setup/en/world-setup-installation.html](https://dev.mysql.com/doc/world-setup/en/world-setup-installation.html))
    available with MySQL to list the countries and get a detailed view to display
    the country information and its GDP information obtained from the World Bank API
    ([https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries](https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个应用程序来展示各个国家的GDP信息。我们将利用MySQL提供的示例World DB（[https://dev.mysql.com/doc/world-setup/en/world-setup-installation.html](https://dev.mysql.com/doc/world-setup/en/world-setup-installation.html)）来列出国家，并获取详细视图以显示国家信息及其从世界银行API（[https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries](https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries)）获取的GDP信息。
- en: The listing will make use of the countries data available in the World DB. In
    the detail view, we will make use of data available in the World DB to list cities
    and languages, and make use of the World Bank API to get additional information and
    the GDP information about the country.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 列表将使用World DB中可用的国家数据。在详细视图中，我们将使用World DB中可用的数据来列出城市和语言，并使用世界银行API获取额外的信息和该国的GDP信息。
- en: 'We will also support editing basic details of the country entry, adding and
    deleting cities from the country entry, and adding and deleting languages from
    the country entry. We will use the following tools and technologies in this application:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将支持编辑国家条目的基本详情，从国家条目中添加和删除城市，以及从国家条目中添加和删除语言。在这个应用程序中，我们将使用以下工具和技术：
- en: Spring MVC framework for implementing the MVC pattern
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring MVC框架实现MVC模式
- en: The interaction with the MySQL DB will be done using the Spring JDBC template
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与MySQL DB的交互将使用Spring JDBC模板完成
- en: The interaction with the World Bank API will be done using RestTemplate
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与世界银行API的交互将使用RestTemplate完成
- en: The views will be created using a templating framework called Thymeleaf
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图将使用名为Thymeleaf的模板框架创建
- en: The frontend will be driven by jQuery and Bootstrap
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端将由jQuery和Bootstrap驱动
- en: Understanding the database structure
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据库结构
- en: If you don't have MySQL installed, head over to the MySQL link ([https://dev.mysql.com/downloads/installer](https://dev.mysql.com/downloads/installer))
    to install it and populate it with the world database, if it is not already available.
    The appendix will also guide you on how to run the queries using MySQL Workbench
    and MySQL command-line tool.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装MySQL，请转到MySQL链接（[https://dev.mysql.com/downloads/installer](https://dev.mysql.com/downloads/installer)）来安装它，并在它不可用的情况下用世界数据库填充。附录还将指导你如何使用MySQL
    Workbench和MySQL命令行工具运行查询。
- en: 'The world database schema is depicted in the following diagram:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是世界数据库模式的示意图：
- en: '![](img/3c6b1066-91ef-4e5c-9435-cedc3d0bcfa7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3c6b1066-91ef-4e5c-9435-cedc3d0bcfa7.png)'
- en: 'The database schema is simple, containing three tables as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库模式很简单，包含以下三个表：
- en: '**city**: List of cities mapped to the three character country coded in the
    country table.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**城市**：与国家表中三个字符国家代码相对应的城市列表。'
- en: '**country**: List of countries where the primary key is the three character
    country code. There is a column that has the ISO country code.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国家**：国家列表，其中主键是三个字符的国家代码。有一个列包含ISO国家代码。'
- en: '**countrylanguage**: List of languages mapped to the country with one of the
    languages of the country marked as official.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国家语言**：与国家相对应的语言列表，其中国家的一种语言被标记为官方语言。'
- en: Understanding the World Bank API
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解世界银行API
- en: There are a lot of APIs exposed by the World Bank ([http://www.worldbank.org/](http://www.worldbank.org/))
    and the API documentation can be found here ([https://datahelpdesk.worldbank.org/knowledgebase/articles/889386-developer-information-overview](https://datahelpdesk.worldbank.org/knowledgebase/articles/889386-developer-information-overview)).
    Out of the available APIs, we will use the Indicator APIs ([https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries](https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries)),
    which represent information such as total population, GDP, GNI, energy use, and
    much more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 世界银行公开了大量的API（[http://www.worldbank.org/](http://www.worldbank.org/)），API文档可以在以下位置找到（[https://datahelpdesk.worldbank.org/knowledgebase/articles/889386-developer-information-overview](https://datahelpdesk.worldbank.org/knowledgebase/articles/889386-developer-information-overview)）。在可用的API中，我们将使用指标API（[https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries](https://datahelpdesk.worldbank.org/knowledgebase/articles/898599-api-indicator-queries)），这些API代表诸如总人口、GDP、GNI、能源使用等方面的信息。
- en: 'Using the Indicator API, we will fetch the GDP information for the countries
    available in the database for the last 10 years. Let''s look at the API''s REST
    URL and the data returned by the API, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指标API，我们将获取数据库中过去10年可用的国家的GDP信息。让我们看看API的REST URL和API返回的数据，如下所示：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `BR` is a country code (*Brazil*) in this URL. The `NY.GDP.MKTP.CD` is the
    flag used by the Word Bank API internally to call Indicator API. The request parameter, `date`,
    indicates the duration of which the GDP information is required.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此URL中，`BR`是国家代码（*巴西*）。`NY.GDP.MKTP.CD`是世界银行API内部用于调用指标API的标志。请求参数`date`表示所需GDP信息的持续时间。
- en: 'The excerpt from the response you will get for the preceding API is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你将从前一个API获取的响应摘录：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding response shows the GDP indicator in US$ for Brazil for the year
    2016.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的响应显示了2016年巴西的GDP指标（以美元计）。
- en: Designing the wireframes of application screens
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计应用程序屏幕的线框
- en: A wireframe is the basic skeleton of an application or website. It gives an
    idea about how the final application looks. It basically helps to decide navigation
    flows, understand functionality, design the user interface, and helps in setting
    the expectation before the application even exists. This process greatly helps
    developers, designers, product owners, and clients to work in a synchronous manner
    to avoid any gap in between. We will follow the same model and we will design
    various wireframes of the application as follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 线框是应用程序或网站的基本骨架。它给出了最终应用程序的外观。它基本上有助于决定导航流程，理解功能，设计用户界面，并在应用程序存在之前设定期望。这个过程极大地帮助开发者、设计师、产品所有者和客户同步工作，避免任何差距。我们将遵循相同的模式，并将设计各种应用程序线框，如下所示。
- en: Country listing page
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国家列表页面
- en: 'We will make it simple. The home page shows the country list with pagination,
    and allow searching by country name and filtering by continent/region. The following
    would be the home page of our application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使其简单。主页显示带有分页的国家列表，并允许通过国家名称进行搜索以及通过大陆/地区进行筛选。以下将是我们的应用程序的主页：
- en: '![](img/821768fe-363a-4c5f-9274-460a06f4bd32.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/821768fe-363a-4c5f-9274-460a06f4bd32.png)'
- en: Country detail page
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国家详情页
- en: 'This screen will show details of the country such as cities, languages, and
    the GDP information obtained from the World Bank API. The GDP data will be visible
    in a graphical view. The page looks as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕将显示国家的详细信息，如城市、语言和从世界银行API获取的GDP信息。GDP数据将以图形视图显示。页面看起来如下：
- en: '![](img/b435b5fd-2731-4946-b34f-89bd0aabe494.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b435b5fd-2731-4946-b34f-89bd0aabe494.png)'
- en: Country edit page
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国家编辑页
- en: 'In country listing page, there will be one button called **Edit**. On clicking
    it, the system will show the country in edit mode, enabling the update of the
    basic details of the country. The following is the view structure for editing
    the basic detail of a country:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在国家列表页，将有一个名为“编辑”的按钮。点击它后，系统将显示编辑模式的国家，允许更新国家的详细信息。以下是国家基本详细信息编辑视图的结构：
- en: '![](img/6d68ffe7-8d04-41c3-b543-c63c78a0a226.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6d68ffe7-8d04-41c3-b543-c63c78a0a226.png)'
- en: Add a new city and language
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的城市和语言
- en: 'In the country detail page, two modal views, one for adding a new city and
    another for adding a new language, are available by clicking on the New button. The
    following is the view for the two modal dialogs used to add a new country and
    language. They will be opened individually:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在国家详情页，通过点击“新建”按钮，可以访问两个模态视图，一个用于添加新的城市，另一个用于添加新的语言。以下是用以添加新国家和语言的两个模态对话框的视图。它们将单独打开：
- en: '![](img/b9a78694-069d-4b01-b51f-b21327824eb4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9a78694-069d-4b01-b51f-b21327824eb4.png)'
- en: Creating an empty application
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个空的应用程序
- en: 'We will use Maven to generate an empty application with the structure required
    for Java-based web applications. If you do not have Maven installed, please follow
    the instructions here ([https://maven.apache.org/install.html](https://maven.apache.org/install.html))
    to install Maven. Once installed, run the following command to create an empty
    application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Maven生成一个具有Java基于Web应用程序所需结构的空应用程序。如果您尚未安装Maven，请按照以下说明（[https://maven.apache.org/install.html](https://maven.apache.org/install.html)）安装Maven。安装后，运行以下命令以创建一个空的应用程序：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running the preceding command will show the command-line argument values for
    confirmation as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令将显示确认的命令行参数值，如下截图所示：
- en: '![](img/f914bc77-a56b-4996-afb2-e033aff461e2.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f914bc77-a56b-4996-afb2-e033aff461e2.png)'
- en: You would have to type in `Y` in the Command Prompt shown in the previous screenshot
    to complete the empty project creation. Now you can import this project into an
    IDE of your choice and continue with the development activity. For the sake of
    simplicity, we will use Eclipse, as it is among the most popular IDEs used by
    the Java community today.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在之前截图所示的命令提示符中键入`Y`以完成空项目的创建。现在，您可以将此项目导入您选择的IDE中，并继续开发活动。为了简化，我们将使用Eclipse，因为它是当今Java社区中最受欢迎的IDE之一。
- en: 'On successful creation of the application, you will see the folder structure,
    as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建应用程序后，您将看到以下截图所示的文件夹结构：
- en: '![](img/c3b3a0ad-e578-412c-bd23-13511439466a.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c3b3a0ad-e578-412c-bd23-13511439466a.png)'
- en: You will see `index.jsp` added by default while creating the default project
    structure. You must delete it as, in this application, we will use Thymeleaf—another
    template engine to develop the landing page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建默认项目结构时，您将默认看到添加的`index.jsp`。您必须将其删除，因为在我们的应用程序中，我们将使用Thymeleaf——另一种模板引擎来开发着陆页。
- en: Defining the model classes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义模型类
- en: Now, let's create Java classes to model the data in the database and also the
    data coming from the World Bank API. Our approach is simple. We will have one
    Java class for each table in our database and the columns of the database will
    become the properties of the Java class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建Java类来模拟数据库中的数据以及来自世界银行API的数据。我们的方法很简单。我们将为数据库中的每个表创建一个Java类，数据库的列将成为Java类的属性。
- en: In the generated application, the `java` folder is missing under the `main`
    directory. We will manually create the `java` folder and package the  `com.nilangpatel.worldgdp`,
    which will be the root package for the application. Let's go ahead and implement
    the approach we decided on. But before that, let's see an interesting project
    called **Project Lombok**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的应用程序中，`main` 目录下缺少 `java` 文件夹。我们将手动创建 `java` 文件夹，并将 `com.nilangpatel.worldgdp`
    打包，这将作为应用程序的根包。让我们继续实施我们决定的方法。但在那之前，让我们看看一个有趣的项目，名为 **Project Lombok**。
- en: Project Lombok provides annotations for generating your getters, setters, default,
    and overloaded constructors, and other boilerplate code. More details on how to
    integrate with your IDE can be found on their project website ([https://projectlombok.org/](https://projectlombok.org/)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Project Lombok 提供了用于生成您的获取器、设置器、默认和重载构造函数以及其他样板代码的注解。有关如何与您的 IDE 集成的更多详细信息，可以在他们的项目网站上找到（[https://projectlombok.org/](https://projectlombok.org/))。
- en: 'We need to update our `pom.xml` to include a dependency on Project Lombok.
    The following are the parts of `pom.xml` you need to copy and add to relevant
    locations in the XML:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新我们的 `pom.xml` 以包含对 Project Lombok 的依赖项。以下是你需要复制并添加到 XML 中相关位置的 `pom.xml`
    部分内容：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All the model classes that we are going to create next belong to the `com.nilangpatel.worldgdp.model` package. The
    model class to represent `Country` data is given in the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要创建的所有模型类都属于 `com.nilangpatel.worldgdp.model` 包。以下代码给出了表示 `Country` 数据的模型类：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `City` class is not created yet, let''s go ahead and create it as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`City` 类尚未创建，让我们继续创建它，如下所示：'
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next is to model the `CountryLanguage` class, which is the language spoken
    in a country, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是建模 `CountryLanguage` 类，这是国家使用的语言，如下所示：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also need a model class to map the GDP information obtained from the World
    Bank API. Let''s go ahead and create a `CountryGDP` class as shown in the following
    code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个模型类来映射从世界银行 API 获得的 GDP 信息。让我们继续创建一个 `CountryGDP` 类，如下所示：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this moment, everything works perfectly fine. But when you start calling
    getter and setter of these model classes into some other class, you may get a
    compilation error. This is because we need to do one more step to configure Lombok.
    After you defined the Maven dependency, you will see the JAR reference from IDE.
    Just right-click on it and select the Run As* |* Java Application option. Alternatively,
    you can execute the following command from terminal at the location where the
    Lombok JAR file is kept, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时刻，一切工作得非常完美。但当您开始在某个其他类中调用这些模型类的获取器和设置器时，您可能会遇到编译错误。这是因为我们需要再进行一步来配置 Lombok。在您定义了
    Maven 依赖项后，您将在 IDE 中看到 JAR 引用。只需右键单击它，然后选择“运行 As* |* Java Application”选项。或者，您可以从终端执行以下命令，位置是在
    Lombok JAR 文件所在的目录下，如下所示：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, `lombok-1.16.18.jar` is the name of JAR file. You will see a separate
    window pop up as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`lombok-1.16.18.jar` 是 JAR 文件名。您将看到一个单独的窗口弹出，如下所示：
- en: '![](img/d796b115-b20e-4fb2-b9b5-25beb17e150a.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d796b115-b20e-4fb2-b9b5-25beb17e150a.png)'
- en: Select the location of your IDE by clicking on the Specify location... button.
    Once selected, click on the Install / Update button to install it. You will get
    a success message. Just restart the IDE and rebuild the project and you will see
    that just by defining `@Setter` and `@Getter`, the actual setters and getters
    are available to other classes. You are no longer required to add them explicitly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击“指定位置...”按钮选择您的 IDE 位置。一旦选择，点击“安装 / 更新”按钮来安装它。您将收到一条成功消息。只需重新启动 IDE 并重新构建项目，您就会看到仅通过定义
    `@Setter` 和 `@Getter`，实际的设置器和获取器就可供其他类使用。您不再需要显式添加它们。
- en: Using Hibernate Validator to add validations
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Hibernate Validator 添加验证
- en: 'There are a few checks we need to add to our model classes so that the data
    being sent from the UI is not invalid. For this, we will make use of Hibernate
    Validator. You are required to add the Hibernate dependency as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在模型类中添加一些检查，以确保从 UI 发送的数据不是无效的。为此，我们将使用 Hibernate Validator。您需要添加以下 Hibernate
    依赖项：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now go back to `com.nilangpatel.worldgdp.model.Country` and update it with
    the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到 `com.nilangpatel.worldgdp.model.Country` 并更新它，如下所示：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next is to update the `com.nilangpatel.worldgdp.model.City` class in a similar
    way, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是更新 `com.nilangpatel.worldgdp.model.City` 类，方式类似，如下所示：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And finally, update `com.nilangpatel.worldgdp.model.CountryLanguage` class
    as well, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新 `com.nilangpatel.worldgdp.model.CountryLanguage` 类，如下所示：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Defining the data access layer – Spring JDBC Template
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义数据访问层 - Spring JDBC模板
- en: We have the model classes that reflect the structure of the data in the database that
    we obtained from the World Bank API. Now we need to develop a data access layer
    that interacts with our MySQL and populates the data stored in the database into
    instances of the model classes. We will use the Spring JDBC Template to achieve
    the required interaction with the database.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有模型类，它们反映了我们从世界银行API获得的数据库中数据的结构。现在我们需要开发一个数据访问层，与我们的MySQL交互，并将存储在数据库中的数据填充到模型类的实例中。我们将使用Spring
    JDBC模板来实现与数据库所需的交互。
- en: 'First, we need the JDBC driver to connect any Java application with MySQL.
    This can be obtained by adding the following dependency and version property to
    our `pom.xml`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要JDBC驱动程序来连接任何Java应用程序与MySQL。这可以通过向我们的`pom.xml`添加以下依赖项和版本属性来实现：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wherever you see `<something.version>1.5.6</something.version>`, it should go
    within the `<properties></properties>` tag. Will not mention this repeatedly.
    This is for keeping the versions of libraries used in one place, making it easy
    to maintain and look up.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您看到`<something.version>1.5.6</something.version>`，它都应放在`<properties></properties>`标签内。不会重复提及这一点。这是为了将使用的库版本集中在一个地方，便于维护和查找。
- en: Anything that comes as `<dependency></dependency>` goes within the `<dependencies></dependencies>`
    list.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 任何以`<dependency></dependency>`开始的依赖项都应放在`<dependencies></dependencies>`列表中。
- en: 'Now we need to add a dependency to the Spring core APIs, as well as the Spring
    JDBC APIs (which contain the JDBC Template) to our `pom.xml`. A brief intro about
    these two dependencies is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将Spring核心APIs以及Spring JDBC APIs（其中包含JDBC模板）添加到我们的`pom.xml`中。以下是这两个依赖项的简要介绍：
- en: '**Spring core APIs:** It provides us with core Spring features such as dependency
    injection and configuration model'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Spring核心APIs**：它为我们提供了核心的Spring功能，如依赖注入和配置模型'
- en: '**Spring JDBC APIs:** It provides us with the APIs required to create the `DataSource` instance
    and interact with the database'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Spring JDBC APIs**：它为我们提供了创建`DataSource`实例和与数据库交互所需的API'
- en: Since this is a sample application, we aren't using Hibernate or other ORM libraries
    because they provide lots of functionalities apart from basic CRUD operations.
    Instead, we will write SQL queries and use them with JDBC Template to make things
    simpler.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个示例应用程序，我们没有使用Hibernate或其他ORM库，因为它们除了基本的CRUD操作之外还提供了许多功能。相反，我们将编写SQL查询，并使用JDBC模板与它们一起使用，以使事情更简单。
- en: 'The following code shows the `dependency` information for the two libraries:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了两个库的`dependency`信息：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Along with the preceding two dependencies, we need to add a few more Spring
    dependencies to assist us in setting up Java-based configurations using annotations
    (such as `@bean`,  `@Service`, `@Configuration`, `@ComponentScan`, and so on)
    and dependency injection using annotations (`@Autowired`). For this, we will be
    adding further dependencies as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前两个依赖项之外，我们还需要添加一些Spring依赖项来帮助我们使用注解（如`@bean`、`@Service`、`@Configuration`、`@ComponentScan`等）设置基于Java的配置，并使用注解进行依赖注入（`@Autowired`）。为此，我们将添加以下依赖项：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Defining the JDBC connection properties
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义JDBC连接属性
- en: 'We will define the JDBC connection properties in an `application.properties`
    file and place it in `src/main/resources`. The properties we define are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`application.properties`文件中定义JDBC连接属性，并将其放置在`src/main/resources`中。我们定义的属性如下：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding properties are with the assumptions that MySQL is running on
    port `3306` and the database username and password are `root` and `test` respectively.
    You can change these properties as per your local configuration. The next step
    is to define a properties resolver that will be able to resolve the properties
    when used from within the code. We will use the `@PropertySource` annotation,
    along with an instance of  `PropertySourcesPlaceholderConfigurer`, as shown in
    the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前述属性是基于以下假设：MySQL运行在端口`3306`上，数据库用户名和密码分别为`root`和`test`。您可以根据本地配置更改这些属性。下一步是定义一个属性解析器，以便在代码中使用时能够解析属性。我们将使用`@PropertySource`注解，以及`PropertySourcesPlaceholderConfigurer`的一个实例，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will follow the convention of placing all our configuration classes in `com.nilangpatel.worldgdp.config`
    and any root configuration will go in the `com.nilangpatel.worldgdp` package.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循将所有配置类放在`com.nilangpatel.worldgdp.config`中，并将任何根配置放在`com.nilangpatel.worldgdp`包中的约定。
- en: 'This class reads all the properties from the `application.properties` file
    stored in classpath (`src/main/resources`). Next up is to configure a `javax.sql.DataSource`
    object that will connect to the database using the properties defined in the `application.properties`
    file. We will use the HikariCP connection pooling library for creating our `DataSource`
    instance. This `DataSource` instance is then used to instantiate `NamedParameterJdbcTemplate`.
    We will use `NamedParameterJdbcTemplate` to execute all our SQL queries. At this
    point, we need to add a necessary dependency for the HikariCP library as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此类从类路径（`src/main/resources`）中存储的 `application.properties` 文件读取所有属性。接下来是配置一个
    `javax.sql.DataSource` 对象，该对象将使用 `application.properties` 文件中定义的属性连接到数据库。我们将使用
    HikariCP 连接池库来创建我们的 `DataSource` 实例。然后，我们将使用此 `DataSource` 实例来实例化 `NamedParameterJdbcTemplate`。我们将使用
    `NamedParameterJdbcTemplate` 来执行所有我们的SQL查询。在这个阶段，我们需要添加一个必要的依赖项来使用HikariCP库，如下所示：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `DBConfiguration` data source configuration class should look as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`DBConfiguration` 数据源配置类应如下所示：'
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s have a quick introduction to a few new things used in this code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对代码中使用的几个新事物进行简要介绍：
- en: '**`@Configuration`:** This is to indicate to Spring Framework that this class
    creates Java objects that contain some configuration'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`@Configuration`:** 这是用来指示Spring框架该类创建包含一些配置的Java对象'
- en: '**`@Bean`:** This is method-level annotation, used to indicate to Spring Framework
    that the method returns Java objects whose life cycle is managed by Spring Framework
    and injected into places where its dependency is declared'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`@Bean`:** 这是一个方法级注解，用于指示Spring框架该方法返回由Spring框架管理的Java对象的生命周期，并将其注入声明其依赖项的地方'
- en: '**`@Value`:** This is used to refer to the properties defined in the `application.properties`,
    which are resolved by the `PropertySourcesPlaceholderConfigurer` bean defined
    in the `PropertiesWithJavaConfig` class'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`@Value`:** 这用于引用在 `application.properties` 中定义的属性，这些属性由 `PropertiesWithJavaConfig`
    类中定义的 `PropertySourcesPlaceholderConfigurer` 实例解析'
- en: It is always good practice to write unit test cases in JUnit. We will write
    test cases for our application. For that, we need to create the corresponding
    configuration classes for running our JUnit tests. In the next section, we will
    look at setting up the test environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 总是编写JUnit单元测试是一个好习惯。我们将为我们的应用程序编写测试用例。为此，我们需要创建运行我们的JUnit测试的相应配置类。在下一节中，我们将探讨设置测试环境。
- en: Setting up the test environment
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: Let's adopt a test first approach here. So, before going into writing the queries
    and DAO classes, let's set up the environment for our unit testing. If you don't
    find the `src/test/java` and `src/test/resources` folders, then please go ahead
    and create them either from your IDE or from your OS file explorer.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们采用先测试的方法。因此，在编写查询和DAO类之前，让我们为我们的单元测试设置环境。如果你找不到 `src/test/java` 和 `src/test/resources`
    文件夹，那么请继续创建它们，无论是从你的IDE还是从你的操作系统文件资源管理器中创建。
- en: 'The `src/test/java` folder will contain all the Java code and `src/test/resources`
    will contain the required property files and other resources required for test
    cases. After creating the required folders, the project structure looks something
    like that shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/test/java` 文件夹将包含所有Java代码，而 `src/test/resources` 将包含测试用例所需的属性文件和其他资源。在创建所需的文件夹后，项目结构看起来就像以下截图所示：'
- en: '![](img/4f495b7e-63f6-40f6-adc4-4b26af1833a5.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4f495b7e-63f6-40f6-adc4-4b26af1833a5.png)'
- en: 'We will use the H2 database as a source of data for our testing environment.
    For that, we will update our Maven dependencies to add H2 and JUnit dependencies.
    H2 is one of the most popular embedded databases. The following is the dependency
    information that you need to add in your `pom.xml`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用H2数据库作为测试环境的源数据。为此，我们将更新我们的Maven依赖项以添加H2和JUnit依赖项。H2是最受欢迎的嵌入式数据库之一。以下是你需要在你的
    `pom.xml` 中添加的依赖项信息：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We already have a property for `spring.version`, but we need version properties
    for the other two, as given in the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个 `spring.version` 的属性，但我们需要为另外两个版本属性，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The World DB schema available in MySQL will not be compatible to run with H2,
    but don't worry. The compatible World DB schema for H2 is available in the source
    code of this chapter, you can download from GitHub ([https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01](https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01)).
    It is kept in the `src/test/resources` folder in the project. The file name is `h2_world.sql`.
    We will use this file to bootstrap our H2 database with the required tables and
    data that will then be available in our tests.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中可用的World DB模式与H2不兼容，但请放心。与H2兼容的World DB模式可在本章的源代码中找到，您可以从GitHub下载（[https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01](https://github.com/PacktPublishing/Spring-5.0-Projects/tree/master/chapter01)）。它保存在项目的`src/test/resources`文件夹中。文件名为`h2_world.sql`。我们将使用此文件启动我们的H2数据库，其中包含所需的表和数据，然后这些数据将在我们的测试中可用。
- en: 'Next up is to configure H2 and one of the things we configure is the name of
    the SQL script file that contains the schema and data. This SQL script file should
    be available on the classpath. The following is the configuration class created
    in the `com.nilangpatel.worldgdp.test.config` package under `src/test/java` folder:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是配置H2，我们配置的一项是包含模式和数据的SQL脚本文件的名称。此SQL脚本文件应在类路径上可用。以下是在`src/test/java`文件夹下的`com.nilangpatel.worldgdp.test.config`包中创建的配置类：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Along with the H2 configuration, we are initializing `NamedParameterJdbcTemplate`
    by providing it with the H2 datasource built in the other method.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 除了H2配置外，我们还通过提供内置的其他方法中构建的H2数据源来初始化`NamedParameterJdbcTemplate`。
- en: We have added few other dependencies specific to JUnit. You can refer to them
    by downloading the source code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一些特定于JUnit的其他依赖。您可以通过下载源代码来参考它们。
- en: Defining the RowMapper
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义RowMapper
- en: 'As we are using the JDBC Template, we need a way to map the rows of data from
    a database to a Java object. This can be achieved by implementing a `RowMapper`
    interface. We will define mapper classes for all the three entities. For `Country`,
    the raw mapper class looks as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用JDBC模板，我们需要一种将数据库中的数据行映射到Java对象的方法。这可以通过实现`RowMapper`接口来实现。我们将为所有三个实体定义映射类。对于`Country`，原始映射类如下所示：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then we define the mapper class for `City` as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义`City`的映射类如下所示：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And finally, we define `CountryLanguage` as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义`CountryLanguage`如下所示：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Designing the CountryDAO
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计CountryDAO
- en: 'Let''s go ahead and define the `CountryDAO` class in the `com.nilangpatel.worldgdp.dao` package along
    with the required methods, starting with the `getCountries` method. This method
    will fetch the details of countries to show them in the listing page. This method
    is also called while filtering the country list. Based on listing, filtering,
    and paginating, we have broken up the query used in this method into the following
    parts:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在`com.nilangpatel.worldgdp.dao`包中定义`CountryDAO`类，以及所需的方法，从`getCountries`方法开始。此方法将获取国家的详细信息以在列表页中显示。在过滤国家列表时也会调用此方法。基于列表、过滤和分页，我们将此方法中使用的查询拆分为以下部分：
- en: 'Select clause:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择条件：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Search where clause:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索条件：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Continent filter where clause:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大洲过滤条件：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Region filter where clause:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地区过滤条件：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Pagination clause:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分页条件：
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The placeholders defined by `:<<variableName>>` are replaced by the values
    provided in the `Map` to the `NamedParameterJdbcTemplate`. This way we can avoid
    concatenating the values into the SQL query, thereby avoiding chances of SQL injection.
    The `getCountries()` definition would now be as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由`:<<variableName>>`定义的占位符将被`NamedParameterJdbcTemplate`中提供的`Map`中的值替换。这样我们可以避免将值连接到SQL查询中，从而避免SQL注入的风险。`getCountries()`的定义现在如下所示：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next is to implement the `getCountriesCount` method, which is similar to `getCountries`,
    except that it returns the count of entries matching the `WHERE` clause without
    the pagination applied. The implementation is as shown in the following code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是实现`getCountriesCount`方法，它与`getCountries`类似，但返回匹配`WHERE`子句的条目数，而不应用分页。实现如下所示：
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then we implement the `getCountryDetail` method to get the detail of the country,
    given its code, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们实现`getCountryDetail`方法来获取给定代码的国家详细信息，如下所示：
- en: '[PRE33]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In all of the previous DAO method implementations, we have made use of the `CountryRowMapper` we
    defined in the *Defining the RowMapper* section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有之前的DAO方法实现中，我们使用了在*定义RowMapper*部分中定义的`CountryRowMapper`。
- en: 'Finally, we define the method to allow editing the country information, as
    shown in the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义了一个允许编辑国家信息的方法，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The previous method uses a helper method that builds a `Map` object, by using
    the data present in the `Country` object. We need the map, as we'll be using it
    as a parameter source for our `namedParamJdbcTemplate`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的方法使用一个辅助方法来构建一个`Map`对象，该方法通过使用`Country`对象中的数据。我们需要这个映射，因为我们将会将其用作`namedParamJdbcTemplate`的参数源。
- en: 'The helper method has a simple implementation, as shown in the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助方法具有简单的实现方式，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s write our JUnit test for the `CountryDAO` class, which we haven''t created
    yet. Create `CountryDAOTest` class into the `com.nilangpatel.worldgdp.test.dao` package
    as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`CountryDAO`类编写JUnit测试，我们还没有创建这个类。在`com.nilangpatel.worldgdp.test.dao`包中创建`CountryDAOTest`类，如下所示：
- en: '[PRE36]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'There are a few things to note about configuring JUnit tests using the Spring
    test framework from the following test, including the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置JUnit测试时，使用Spring测试框架需要注意以下几点，包括以下内容：
- en: '`@RunWith` is used to replace the JUnit''s test runner with a custom test runner,
    which in this case, is Spring''s `SpringRunner`. Spring''s test runner helps in
    integrating JUnit with the Spring test framework.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith`用于用自定义测试运行器替换JUnit的测试运行器，在这种情况下，是Spring的`SpringRunner`。Spring的测试运行器有助于将JUnit与Spring测试框架集成。'
- en: '`@SpringJUnitConfig` is used to provide the list of classes that contain the
    required configuration to satisfy the dependencies for running the test.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@SpringJUnitConfig`用于提供包含所需配置的类列表，以满足运行测试的依赖项。'
- en: Many people who choose ORM frameworks may feel that writing complicated SQL
    queries like this is awkward. However, from the next chapter onward, we'll start
    using the Spring Data framework to make an interaction with various data sources;
    the database is one of those accessed with the Spring Data JPA. Here, we wanted
    to show how the Spring JDBC offering interacts with the database.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 许多选择ORM框架的人可能会觉得编写像这样的复杂SQL查询很尴尬。然而，从下一章开始，我们将开始使用Spring Data框架与各种数据源进行交互；数据库是其中之一，我们将使用Spring
    Data JPA来访问。在这里，我们想展示Spring JDBC提供程序如何与数据库交互。
- en: Designing the CityDAO
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计CityDAO
- en: 'The following are some of the important operations to be supported by `com.nilangpatel.worldgdp.dao.CityDAO`
    class:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些`com.nilangpatel.worldgdp.dao.CityDAO`类需要支持的重要操作：
- en: Get cities for a country
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个国家的城市
- en: Get city details for given ID
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据给定的ID获取城市详细信息
- en: Add a new city to a country
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向国家添加一个新城市
- en: Delete the given city from the country
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从国家中删除给定的城市
- en: 'Let''s go ahead and implement each one of these functionalities starting with
    the `getCities`, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续实现这些功能，从`getCities`开始，如下所示：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We are using a paginated query to get a list of cities for a country. We will
    also need another overloaded version of this method where we return all the cities
    of a country and we will use this query to fetch all the cities while editing
    the country to select its capital. The overloaded version is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用分页查询来获取一个国家的城市列表。我们还需要这个方法的另一个重载版本，它将返回一个国家的所有城市，我们将使用这个查询来在编辑国家时选择其首都。重载版本如下：
- en: '[PRE38]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next is to implement the method to get the city details, as shown in the following
    code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是实现获取城市详细信息的方法，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then we implement the method to add a city as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按照以下方式实现添加城市的方法：
- en: '[PRE40]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As we saw with adding a country, this will also make use of a helper method
    to return a `Map` from the `City` data, as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在添加国家时看到的，这也会使用一个辅助方法从`City`数据中返回一个`Map`，如下所示：
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'An important thing to notice in `addCity` is the use of `KeyHolder` and `GeneratedKeyHolder` to
    return the generated (due to auto increment) primary key that is the `cityId`,
    as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在`addCity`中需要注意的一个重要事项是使用`KeyHolder`和`GeneratedKeyHolder`来返回由自动递增生成的（作为`cityId`的）主键，如下所示：
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And finally, we implement the method to delete a city from the country as shown
    in the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们实现从国家中删除城市的方法，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now let''s add a test for `CityDAO`. Add the `CityDAOTest` class in `com.nilangpatel.worldgdp.test.dao` package under
    `src/test/java` folder as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为`CityDAO`添加一个测试。在`src/test/java`文件夹下的`com.nilangpatel.worldgdp.test.dao`包中添加`CityDAOTest`类，如下所示：
- en: '[PRE44]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Designing the CountryLanguageDAO
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计CountryLanguageDAO
- en: 'We will need to expose the following APIs to interact with the `countrylanguage`
    table:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要公开以下API来与`countrylanguage`表交互：
- en: Get list of languages for a given country code
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取给定国家代码的语言列表
- en: Add a new language for a country by checking that the language doesn't already
    exist
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查该语言是否已存在来为某个国家添加一种新语言
- en: Delete a language for a country
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除某个国家的语言
- en: 'For the sake of keeping it short, we will show the method implementations covering
    these three scenarios. The complete code can be found in the `com.nilangpatel.worldgdp.dao.CountryLanguageDAO` class
    available in the code downloaded for this book. The following is the code for
    these method implementations:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简洁，我们将展示涵盖这三个场景的方法实现。完整的代码可以在本书下载的代码中的 `com.nilangpatel.worldgdp.dao.CountryLanguageDAO`
    类中找到。以下是为这些方法实现编写的代码：
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Designing the client for World Bank API
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计世界银行 API 的客户端
- en: 'We need to fetch the GDP data from WorldBank API. As we discussed, it is REST
    end point, where we have to send few parameters and will get the response. For
    this, we will use RestTemplate to make REST call. The following is the definition
    for the `com.packt.external.WorldBankApiClient` class, which is used to invoke
    the World Bank API and process its response to return `List<CountryGDP>`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从 WorldBank API 获取 GDP 数据。正如我们讨论的那样，这是一个 REST 端点，我们必须发送一些参数并获取响应。为此，我们将使用
    RestTemplate 来进行 REST 调用。以下是对 `com.packt.external.WorldBankApiClient` 类的定义，该类用于调用世界银行
    API 并处理其响应以返回 `List<CountryGDP>`：
- en: '[PRE46]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Defining the API controllers
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 API 控制器
- en: 'So far, we have written code to interact with the DB. Next up is to work on
    the code for the controller. We will have both types of controller—one that returns
    the view name (Thymeleaf template in our case) with the data for the view populated
    in the model object, and the other that exposes the RESTful APIs. We will need
    to add the following dependency to `pom.xml`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经编写了与数据库交互的代码。接下来是编写控制器代码。我们将有两种类型的控制器——一种返回视图名称（在我们的案例中是 Thymeleaf
    模板）并在模型对象中填充视图数据，另一种公开 RESTful API。我们需要在 `pom.xml` 中添加以下依赖项：
- en: '[PRE47]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Adding `spring-webmvc` to the dependency will automatically include `spring-core`,
    `spring-beans`, and `spring-context` dependencies. So we can remove them from
    the `pom.xml`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `spring-webmvc` 添加到依赖项中会自动包含 `spring-core`、`spring-beans` 和 `spring-context`
    依赖项。因此，我们可以从 `pom.xml` 中移除它们。
- en: Enabling Web MVC using @EnableWebMvc
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 @EnableWebMvc 启用 Web MVC
- en: To be able to make use of the Spring MVC features, we need to have one class
    that has been annotated with `@Configuration`, to be annotated with `@EnableWebMvc`.
    The `@EnableWebMvc` annotation, imports the Spring MVC configuration from the `WebMvcConfigurationSupport`
    class present in the Spring MVC framework. If we need to override any of the default
    imported configuration, we would have to implement the `WebMvcConfigurer` interface
    present in the Spring MVC framework and override the required methods.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用 Spring MVC 功能，我们需要一个被注解为 `@Configuration` 的类，并注解为 `@EnableWebMvc`。`@EnableWebMvc`
    注解从 Spring MVC 框架中的 `WebMvcConfigurationSupport` 类导入 Spring MVC 相关配置。如果我们需要覆盖任何默认导入的配置，我们必须实现
    Spring MVC 框架中存在的 `WebMvcConfigurer` 接口并覆盖所需的方法。
- en: 'We will create an `AppConfiguration` class with the following definition:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 `AppConfiguration` 类，其定义如下：
- en: '[PRE48]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the previous configuration, a few important things to note are as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配置中，以下是一些需要注意的重要事项：
- en: '`@EnableWebMvc`: This imports the Spring MVC related configuration.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@EnableWebMvc`：此注解导入与 Spring MVC 相关的配置。'
- en: '`@ComponentScan`: This is used for declaring the packages that have to be scanned
    for Spring components (which can be `@Configuration`, `@Service`, `@Controller`,
    `@Component`, and so on). If no package is defined, then it scans starting from
    the package where the class is defined.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ComponentScan`：此注解用于声明需要扫描以查找 Spring 组件（可以是 `@Configuration`、`@Service`、`@Controller`、`@Component`
    等）的包。如果没有定义任何包，则从定义类的包开始扫描。'
- en: '`WebMvcConfigurer`: We are going to implement this interface to override some
    of the default Spring MVC configuration seen in the previous code.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebMvcConfigurer`：我们将实现此接口以覆盖之前代码中看到的某些默认 Spring MVC 配置。'
- en: Configuration to deploy to Tomcat without web.xml
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置部署到 Tomcat 而不使用 web.xml
- en: 'As we will be deploying the application to Tomcat, we need to provide the servlet
    configuration to the application server. We will look at how to deploy to Tomcat
    in a separate section, but now we will look at the Java configuration, which is
    sufficient to deploy the application to Tomcat or any application server without
    the need for an additional `web.xml`. The Java class definition is given in the
    following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将部署应用程序到Tomcat，我们需要向应用程序服务器提供servlet配置。我们将在单独的部分中查看如何部署到Tomcat，但现在我们将查看Java配置，这对于部署到Tomcat或任何应用程序服务器都是足够的，无需额外的`web.xml`。以下给出了Java类定义：
- en: '[PRE49]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `AbstractAnnotationConfigDispatcherServletInitializer` abstract class is
    an implementation of the `WebApplicationInitializer` interface that is used to
    register Spring's `DispatcherServlet` instance and uses the other `@Configuration`
    classes to configure the `DispatcherServlet`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractAnnotationConfigDispatcherServletInitializer`抽象类是实现`WebApplicationInitializer`接口的，用于注册Spring的`DispatcherServlet`实例，并使用其他`@Configuration`类来配置`DispatcherServlet`。'
- en: We just need to override the `getRootConfigClasses()`, `getServletConfigClasses()`,
    and `getServletMappings()` methods. The first two methods point to the configuration
    classes that need to load into the servlet context, and the last method is used
    to provide the servlet mapping for `DispatcherServlet`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要重写`getRootConfigClasses()`, `getServletConfigClasses()`, 和 `getServletMappings()`方法。前两个方法指向需要加载到servlet上下文中的配置类，最后一个方法用于为`DispatcherServlet`提供servlet映射。
- en: '`DispatcherServlet` follows the front controller pattern, where there is a
    single servlet registered to handle all the web requests. This servlet uses the
    `RequestHandlerMapping` and invokes the corresponding implementation based on
    the URL mapped to the implementation.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`DispatcherServlet`遵循前端控制器模式，其中有一个注册的servlet用于处理所有web请求。这个servlet使用`RequestHandlerMapping`并根据映射到实现的URL调用相应的实现。'
- en: 'We need to make a small update to the Maven WAR plugin so that it doesn''t
    fail if there is no `web.xml` found. This can be done by updating the `<plugins>` tag
    in the `pom.xml` file, as shown in the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对Maven WAR插件进行少量更新，以便在没有找到`web.xml`时不会失败。这可以通过更新`pom.xml`文件中的`<plugins>`标签来实现，如下所示：
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now we are all set to implement our controllers. We will show you how to deploy
    to Tomcat once we have implemented all the RESTful API controllers.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好实现我们的控制器了。一旦我们实现了所有的RESTful API控制器，我们将向您展示如何部署到Tomcat。
- en: Defining the RESTful API controller for country resource
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义国家资源的RESTful API控制器
- en: 'Let''s define the RESTful API controller for the country resource. The following
    is the template for the controller:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义针对国家资源的RESTful API控制器。以下是对应的控制器模板：
- en: '[PRE51]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The following are a few things to note from the previous code:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从之前的代码中需要注意的一些事项：
- en: '`@RestController`: This is used to annotate a class as a controller with each
    of the RESTful methods returning the data in the response body.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RestController`：这个注解用于将一个类标注为控制器，其中每个RESTful方法都返回响应体中的数据。'
- en: '`@RequestMapping`: This is for assigning the root URL for accessing the resources.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RequestMapping`：这个用于分配访问资源的根URL。'
- en: '`@GetMapping` and `@PostMapping`: These are used to assign the HTTP verbs that
    will be used to invoke the resources. The URL for the resources are passed within
    the annotation, along with other request headers that consume and produce information.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@GetMapping`和`@PostMapping`：这些用于分配将用于调用资源的HTTP动词。资源的URL在注解中传递，包括其他请求头，这些请求头用于消费和产生信息。'
- en: 'Let''s implement each of the methods in order, starting with `getCountries()`,
    as shown in the following code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按顺序实现每个方法，从`getCountries()`开始，如下所示：
- en: '[PRE52]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following are some of the things to note from the previous code:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从之前的代码中需要注意的一些事项：
- en: '`@RequestParam`: This annotation is used to declare request parameters accepted
    by the controller endpoint. The parameters can be provided with a default value
    and can also be made mandatory.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RequestParam`：这个注解用于声明控制器端点接受的请求参数。参数可以提供默认值，也可以设置为必填。'
- en: '`ResponseEntity`: This class is used to return the response body, along with
    other response parameters such as status, headers, and so on.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ResponseEntity`：这个类用于返回响应体，以及其他响应参数，如状态、头信息等。'
- en: 'Next up is the API for editing country details, as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是编辑国家详情的API，如下所示：
- en: '[PRE53]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following are a few things to note from the previous code implementation:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从之前的代码实现中需要注意的一些事项：
- en: '`@PathVariable`: This is used to declare any variable that needs to be part
    of the URL path of the controller endpoint. In our case, we want the country code
    to be part of the URL. So the URL will be of the `/api/countries/IND` form.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PathVariable`：这用于声明任何需要成为控制器端点URL路径一部分的变量。在我们的情况下，我们希望国家代码成为URL的一部分。因此，URL将采用`/api/countries/IND`的形式。'
- en: '`@Valid`: This triggers the Bean Validation API to check for the restrictions
    on each of the class properties. If the data from the client is not valid, it
    returns a 400.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Valid`：这触发了Bean Validation API来检查每个类属性的约束。如果客户端的数据无效，它将返回400。'
- en: '`@RequestBody`: This is used to capture the data sent in the request body and
    the `Jackson` library is used to convert the JSON data in the request body to
    the corresponding Java object.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RequestBody`：这用于捕获请求体中发送的数据，并使用`Jackson`库将请求体中的JSON数据转换为相应的Java对象。'
- en: The rest of the API implementation can be found in the `CountryAPIController`
    class. The tests for the API controller can be found in the `CountryAPIControllerTest`
    class, which is available in the source code of this book.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: API的其他实现可以在`CountryAPIController`类中找到。API控制器的测试可以在`CountryAPIControllerTest`类中找到，这些类都包含在此书的源代码中。
- en: Defining the RESTful API controller for city resource
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义城市资源的RESTful API控制器
- en: 'For the city resource we would need the following APIs:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于城市资源，我们需要以下API：
- en: Get cities for a given country
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取给定国家的城市
- en: Add a new city to the country
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向国家添加一个新城市
- en: Delete the city from the country
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从国家中删除城市
- en: The code for this controller can be found in the `CityAPIController` class and
    the tests for the API controller can be found in the `CityAPIControllerTest` class, which
    is available in the source code of this book.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 此控制器的代码可以在`CityAPIController`类中找到，API控制器的测试可以在`CityAPIControllerTest`类中找到，这些类都包含在此书的源代码中。
- en: Defining the RESTful API controller for country language resource
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义国家语言资源的RESTful API控制器
- en: 'For the `CountryLanguage` resource we need the following APIs:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`CountryLanguage`资源，我们需要以下API：
- en: Get languages for a country
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个国家的语言
- en: Add a language for a country
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为一个国家添加一种语言
- en: Delete a language from the country
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从国家中删除一种语言
- en: The code for this controller can be found in the `CountryLanguageAPIController`
    class and the tests for the API controller can be found in the `CountryLanguageAPIControllerTest` class,
    which is available in the source code of this book.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此控制器的代码可以在`CountryLanguageAPIController`类中找到，API控制器的测试可以在`CountryLanguageAPIControllerTest`类中找到，这些类都包含在此书的源代码中。
- en: Deploying to Tomcat
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到Tomcat
- en: Before we proceed with View and Controller for handling views, we will deploy
    the app developed so far to Tomcat. You can download Tomcat 8.5 from here ([https://tomcat.apache.org/download-80.cgi](https://tomcat.apache.org/download-80.cgi)).
    Installation is as simple as extracting the ZIP/TAR file onto your file system.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理视图的视图和控制器之前，我们将把到目前为止开发的程序部署到Tomcat。您可以从这里下载Tomcat 8.5（[https://tomcat.apache.org/download-80.cgi](https://tomcat.apache.org/download-80.cgi)）。安装就像将ZIP/TAR文件提取到您的文件系统中一样简单。
- en: 'Let''s create a user `admin` and `manager-gui` role in Tomcat. To do this,
    have to edit `apache-tomcat-8.5.23/conf/tomcat-users.xml` and add the following
    line:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Tomcat中创建一个用户`admin`和`manager-gui`角色。为此，需要编辑`apache-tomcat-8.5.23/conf/tomcat-users.xml`并添加以下行：
- en: '[PRE54]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Starting up Tomcat is simple, as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Tomcat很简单，如下所示：
- en: Navigate to `apache-tomcat-8.5.23/bin`
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`apache-tomcat-8.5.23/bin`
- en: Run `startup.bat`
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`startup.bat`
- en: 'Navigate to `http://localhost:8080/manager/html` and enter `admin`, and `admin`
    for username and password respectively, to be able to view Tomcat''s manager console.
    The initial part of the page will list the applications deployed in the current
    instance, and toward the later part of the page you will find an option to upload
    a WAR file to deploy the application, as shown in the following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:8080/manager/html`，输入`admin`作为用户名，`admin`作为密码，以便能够查看Tomcat的管理控制台。页面初始部分将列出当前实例中部署的应用程序，页面后部将找到上传WAR文件以部署应用程序的选项，如下面的截图所示：
- en: '![](img/6c21e48b-e79b-4804-a73c-91ec6b6abaa9.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c21e48b-e79b-4804-a73c-91ec6b6abaa9.png)'
- en: We can either upload the WAR file generated after running `mvn package` or update
    the `server.xml` of the Tomcat instance to refer to the target directory of the
    project to be able to deploy automatically. The latter approach can be used for
    development, while the former that is WAR deployment can be used for production.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以上传运行`mvn package`后生成的WAR文件，或者更新Tomcat实例的`server.xml`以引用项目的目标目录，以便能够自动部署。后一种方法可用于开发，而前一种WAR部署方法可用于生产。
- en: 'In a production system, you can have a continuous deployment server generate
    a WAR file and deploy to a remote Tomcat instance. In this scenario, we will use
    the latter approach of updating the Tomcat''s configuration. You have to add the
    following line of code in the Tomcat''s `server.xml` file, located at `TOMCAT_HOME/conf/server.xml`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个生产系统中，你可以让持续部署服务器生成一个WAR文件并部署到远程的Tomcat实例。在这种情况下，我们将使用更新Tomcat配置的后一种方法。你必须在位于`TOMCAT_HOME/conf/server.xml`的Tomcat的`server.xml`文件中添加以下代码行：
- en: '[PRE55]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The preceding line has to be added between the `<Host></Host>` tags. Alternatively,
    you can configure Tomcat in your IDE (for example, Eclipse), which is more convenient
    for development purposes. We will build the project with Maven, but before that,
    please add following configuration to the `<properties></properties>` section
    of `pom.xml`:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行必须添加到`<Host></Host>`标签之间。或者，你也可以在你的IDE（例如Eclipse）中配置Tomcat，这对于开发来说更方便。我们将使用Maven构建项目，但在那之前，请将以下配置添加到`pom.xml`的`<properties></properties>`部分：
- en: '[PRE56]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This will make sure to choose the correct Java compiler version while building
    (packaging) the application with Maven from the command line. Next is to build
    the project using the `mvn package` and run Tomcat using `TOMCAT_HOME/bin/startup.bat`,
    and once the server is UP, you can visit the API `http://localhost:8080/worldgdp/api/countries`
    in the browser to see the following input:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保在通过命令行使用Maven构建（打包）应用程序时选择正确的Java编译器版本。接下来是使用`mvn package`构建项目，并使用`TOMCAT_HOME/bin/startup.bat`运行Tomcat，一旦服务器启动，你可以在浏览器中访问API
    `http://localhost:8080/worldgdp/api/countries`，以查看以下输入：
- en: '![](img/253a8a32-c15a-418a-8929-a9e7717d2c0e.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/253a8a32-c15a-418a-8929-a9e7717d2c0e.png)'
- en: Defining the view controller
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义视图控制器
- en: We will have one view controller, `ViewController.java` defined in the `com.nilangpatel.worldgdp.controller.view`.
    The view controller will be responsible for populating the data required for the
    view templates and also mapping URLs to corresponding view templates.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有一个视图控制器，`ViewController.java`定义在`com.nilangpatel.worldgdp.controller.view`中。视图控制器将负责填充视图模板所需的数据，并将URL映射到相应的视图模板。
- en: We will be using Thymeleaf ([www.thymeleaf.org](https://www.thymeleaf.org/))
    as the server-side template engine and Mustache.js ([https://github.com/janl/mustache.js](https://github.com/janl/mustache.js))
    as our client-side template engine. The advantage of using a client-side template
    engine is that any data loaded asynchronously in the form of JSON can easily be
    added to the DOM by generating HTML using the client-side templates. We will explore
    more about Thymeleaf and Mustache.js in [Chapter 3](e32452e8-07bb-4815-96d6-b0db0a6009ba.xhtml), *Blogpress
    – A simple blog management system*.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Thymeleaf ([www.thymeleaf.org](https://www.thymeleaf.org/)) 作为服务器端模板引擎，并使用Mustache.js
    ([https://github.com/janl/mustache.js](https://github.com/janl/mustache.js)) 作为我们的客户端模板引擎。使用客户端模板引擎的优势在于，任何以JSON形式异步加载的数据都可以通过生成HTML轻松添加到DOM中。我们将在第3章中进一步探讨Thymeleaf和Mustache.js，*Blogpress
    – 一个简单的博客管理系统*。
- en: 'There are much better ways to do this by using frameworks such as Vue.js, React.js,
    Angular.js, and so on. We will look at the view template in the next section. Let''s
    continue our discussion about the view controller. The view controller should
    map the right view template and the data for the following scenarios:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue.js、React.js、Angular.js等框架有更好的方法来做这件事。我们将在下一节查看视图模板。让我们继续讨论视图控制器。视图控制器应该映射以下场景的正确视图模板和数据：
- en: Listing of countries
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家列表
- en: Viewing country detail
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看国家详情
- en: Editing country detail
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑国家详情
- en: 'Let''s look at the following skeletal structural definition of the `ViewController`
    class:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下`ViewController`类的骨架结构定义：
- en: '[PRE57]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following are a few important things from the previous code:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从上一段代码中的一些重要事项：
- en: '`@Controller`: This annotation is used to declare a controller that can return
    view template names to be able to render the view, as well as returning JSON/XML
    data in the response body.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Controller`：此注解用于声明一个控制器，可以返回要渲染的视图模板名称，以及返回响应体中的 JSON/XML 数据。'
- en: '`@ResponseBody`: This annotation when present on the method of the controller
    indicates that the method is going to return the data in the response body, and
    hence, Spring will not use the view resolver to resolve the view to be rendered.
    The `@RestController` annotation by default adds this annotation to all its methods.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ResponseBody`：当此注解存在于控制器的方法上时，表示该方法将返回响应体中的数据，因此 Spring 不会使用视图解析器来解析要渲染的视图。`@RestController`
    注解默认将其添加到所有方法上。'
- en: '`Model`: This instance is used to pass on the data required for building the
    view.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model`：此实例用于传递构建视图所需的数据。'
- en: 'In case of the listing of countries, the complete HTML is rendered at the server
    using the Thymeleaf template engine, so we need to obtain the request parameters,
    if any are present in the URL, and obtain a filtered and paginated list of the
    countries. We also need to populate the lookups that is the data for the `<select>`
    controls, which will be used for filtering the data. Let''s look at its implementation
    as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出国家时，服务器端使用 Thymeleaf 模板引擎渲染完整的 HTML，因此我们需要获取请求参数，如果 URL 中存在，并获取一个过滤和分页的国家列表。我们还需要填充查找数据，即
    `<select>` 控件的数据，这些控件将用于过滤数据。让我们看看它的实现如下：
- en: '[PRE58]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The previous code is pretty straightforward. We are making use of the DAO classes
    to populate the required data into the `Model` instance and then returning the
    view name, which in this case is `countries`. Similarly, the rest of the method
    implementation can be found in the `ViewController` controller class.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码相当简单。我们使用 DAO 类将所需数据填充到 `Model` 实例中，然后返回视图名称，在这种情况下是 `countries`。同样，其余的方法实现可以在
    `ViewController` 控制器类中找到。
- en: Defining the view templates
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义视图模板
- en: 'We will be using the Thymeleaf template engine for handling server-side templates.
    Thymeleaf provides various dialects and conditional blocks for rendering the dynamic
    content within the static HTML. Let''s look at some simple syntactical element
    of Thymeleaf, as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Thymeleaf 模板引擎来处理服务器端模板。Thymeleaf 提供了各种方言和条件块来渲染静态 HTML 中的动态内容。让我们看看 Thymeleaf
    的简单语法元素，如下所示：
- en: '[PRE59]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: From the previous examples, we can observe that the items to be evaluated by
    Thymeleaf are prefixed with `th:` and any content to be rendered between the tags
    can be done either using `th:text` or `[[${variable}]]`. The latter syntax has
    been introduced in Thymeleaf 3\. This was a very short primer, as going in to
    depth on Thymeleaf is out of the scope of this book. A beautiful guide explaining
    different parts of the template can be found at [http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html](http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的示例中，我们可以观察到 Thymeleaf 要评估的项目前面带有 `th:` 前缀，并且可以在标签之间渲染任何内容，可以使用 `th:text`
    或 `[[${variable}]]`。后者语法是在 Thymeleaf 3 中引入的。这是一个非常简短的入门，因为深入探讨 Thymeleaf 超出了本书的范围。可以在
    [http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html](http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)
    找到解释模板不同部分的美丽指南。
- en: Configuring a Thymeleaf template engine
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Thymeleaf 模板引擎
- en: 'In order to use the Thymeleaf template engine with Spring MVC, we need to do
    some configuration wherein we set up the Thymeleaf template engine and update
    Spring''s view resolver to use the template engine to resolve any views. Before
    moving further, we need to define required dependencies in `pom.xml` as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Thymeleaf 模板引擎与 Spring MVC，我们需要进行一些配置，其中我们设置 Thymeleaf 模板引擎并更新 Spring 的视图解析器以使用模板引擎解析任何视图。在继续之前，我们需要在
    `pom.xml` 中定义所需的依赖项如下：
- en: '[PRE60]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let''s define the configuration view resolver in order, starting with setting
    up the template resolver as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按顺序定义配置视图解析器，首先设置模板解析器如下：
- en: '[PRE61]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The previous configuration sets the template location that the template engine
    will use to resolve the template files. Next is to define the template engine,
    which will make use of `SpringTemplateEngine` and the template resolver defined
    earlier, as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配置设置了模板位置，模板引擎将使用它来解析模板文件。接下来是定义模板引擎，它将使用 `SpringTemplateEngine` 和之前定义的模板解析器，如下所示：
- en: '[PRE62]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In the previous configuration, we make use of the Thymeleaf Layout Dialect ([https://github.com/ultraq/thymeleaf-layout-dialect](https://github.com/ultraq/thymeleaf-layout-dialect))
    created by *Emanuel Rabina*. This layout dialect helps us in creating a view decorator
    framework wherein all the templates will be decorated with a base template and
    the decorated templates just provide the necessary content to complete the page.
    So all the headers, footers, CSS, scripts, and other common HTML can be placed
    in the base template. This prevents redundancy to a great extent. In our sample
    app, the `base.html` file present in `worldgdp/src/main/resources/templates` is
    the base template that is used by other templates.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配置中，我们使用了由*Emanuel Rabina*创建的Thymeleaf布局方言([https://github.com/ultraq/thymeleaf-layout-dialect](https://github.com/ultraq/thymeleaf-layout-dialect))。这个布局方言帮助我们创建一个视图装饰器框架，其中所有模板都将被基本模板装饰，而装饰后的模板只需提供完成页面的必要内容。因此，所有的页眉、页脚、CSS、脚本和其他常见HTML都可以放在基本模板中。这在很大程度上防止了冗余。在我们的示例应用中，位于`worldgdp/src/main/resources/templates`的`base.html`文件是其他模板使用的基本模板。
- en: 'Next is to define a Thymeleaf view resolver that will override Spring''s default
    view resolver, as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是定义一个Thymeleaf视图解析器，该解析器将覆盖Spring的默认视图解析器，如下所示：
- en: '[PRE63]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The previous configuration is available in the `com.packt.config.ViewConfiguration`
    class.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配置可以在`com.packt.config.ViewConfiguration`类中找到。
- en: Managing static resources
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理静态资源
- en: 'If you look back at the `com.nilangpatel.worldgdp.AppConfiguration` class,
    you will see that we have overridden the `addResourceHandlers` method of `WebMvcConfigurer`
    interface. In the method implementation shown in the following code, we have mapped
    the static resources prefix URL `/static/**` to the static resources location
    `/static/` in the `webapp` directory:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下`com.nilangpatel.worldgdp.AppConfiguration`类，你会看到我们已经覆盖了`WebMvcConfigurer`接口的`addResourceHandlers`方法。在下面的代码中显示的方法实现中，我们将静态资源前缀URL
    `/static/**`映射到`webapp`目录中的静态资源位置`/static/`：
- en: '[PRE64]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: We have added a few static resources (both CSS and JavaScript) in the `/src/main/webapp/static`
    folder of the project. Please download the code of this chapter and refer to them
    side by side.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在项目的`/src/main/webapp/static`文件夹中添加了一些静态资源（CSS和JavaScript）。请下载本章的代码，并对照它们进行参考。
- en: Creating the base template
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本模板
- en: 'We mentioned before that we will be using the Thymeleaf Layout Dialect to create
    a base template and use the base template to decorate all other templates. The
    base template will contain all the CSS links, JavaScript source file links, the
    header, and the footer, as shown in the following code:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到，我们将使用Thymeleaf布局方言来创建一个基本模板，并使用基本模板来装饰所有其他模板。基本模板将包含所有的CSS链接、JavaScript源文件链接、页眉和页脚，如下面的代码所示：
- en: '[PRE65]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The two main important parts of the following template are as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模板的两个主要重要部分如下：
- en: '`<div layout:fragment="page_content"></div>`: The other templates that use
    the base template as decorator provide their HTML within this section. Thymeleaf
    Layout Dialect at runtime decorates this HTML with the content from the base template.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div layout:fragment="page_content"></div>`：使用基本模板作为装饰器的其他模板将在这一部分提供它们的HTML。Thymeleaf布局方言在运行时将基本模板的内容装饰到这个HTML上。'
- en: '`<th:block layout:fragment="scripts"></th:block>`: Similar to the HTML previous
    content, any page-specific JavaScript or links to any specific JavaScript source
    files can be added within this section. This helps in isolating page-specific
    JavaScript in their own pages.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<th:block layout:fragment="scripts"></th:block>`：类似于之前的HTML内容，任何特定页面的JavaScript或指向特定JavaScript源文件的链接都可以添加到这一部分。这有助于将特定页面的JavaScript隔离在其自己的页面上。'
- en: 'Any template that wants to use the base template as the decorator will declare
    this attribute, `layout:decorate="~{base}"`, in the `<html>` tag. We will not
    go into the content of individual templates as it''s mostly HTML. All the templates
    can be found at the location `worldgdp/src/main/resources/templates`. We have
    three templates:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 任何想要将基本模板用作装饰器的模板，需要在`<html>`标签中声明此属性，`layout:decorate="~{base}"`。我们不会深入到单个模板的内容，因为它们主要是HTML。所有模板都可以在位置`worldgdp/src/main/resources/templates`找到。我们有三个模板：
- en: '`countries.html`: This is for showing the countries'' list with filtering and
    pagination'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`countries.html`：这是用于显示带有过滤和分页的国家列表'
- en: '`country-form.html`: This is for editing a country''s detail'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`country-form.html`：这是用于编辑一个国家的详细信息'
- en: '`country.html`: This is for showing a country''s detail'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`country.html`：这是用于显示一个国家的详细信息'
- en: Logging configuration
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录配置
- en: 'Before we jump into the rest of the steps to develop an application, it is
    good practice to define a log level and format. It is, however, optional but good
    practice to print the logs in a desired format, along with various logging levels.
    For this, add an XML file called `logback.xml` with following content in it:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入到开发应用程序的其他步骤之前，定义一个日志级别和格式是一个好的实践。然而，打印日志以期望的格式，并带有各种日志级别，这是一个可选但良好的实践。为此，添加一个名为`logback.xml`的XML文件，其中包含以下内容：
- en: '[PRE66]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Logback was developed as a successor to the popular Log4j project, and is used
    as a logging framework for Java applications. This configuration defines the pattern,
    along with the logging level. To enable logback in your application, you need
    to add following dependencies to `pom.xml`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Logback作为流行的Log4j项目的继任者被开发出来，并用作Java应用程序的日志框架。此配置定义了模式以及日志级别。要启用应用程序中的logback，您需要在`pom.xml`中添加以下依赖项：
- en: '[PRE67]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Running the application
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'As we have already configured the deployment to Tomcat, you should have the
    application running now. You can always download the source code for this book;
    find the source code under the `worldgdp` folder. After downloading, you have
    to build it using Maven, as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经配置了Tomcat的部署，你现在应该有应用程序正在运行。你始终可以下载本书的源代码；在`worldgdp`文件夹下找到源代码。下载后，你必须使用以下方式使用Maven构建它：
- en: '[PRE68]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The preceding command will run the tests as well. The WAR file `worldgdp.war`,
    present in the `target`, can be uploaded to Tomcat through the Manager app or
    copied to the `TOMCAT_HOME/webapps` folder. Tomcat will then explode the archive
    and deploy the app.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将运行测试。位于`target`目录中的WAR文件`worldgdp.war`可以通过Manager应用程序上传到Tomcat，或者复制到`TOMCAT_HOME/webapps`文件夹。然后Tomcat将展开存档并部署应用程序。
- en: 'The following are some of the screenshots of the application in action, starting
    with the listing page:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些应用程序运行时的截图，从列表页面开始：
- en: '![](img/ea8a1112-6b0f-4c4e-b506-465aa9138f3c.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea8a1112-6b0f-4c4e-b506-465aa9138f3c.png)'
- en: 'Next is the page that displays the country details:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是显示国家详细信息的页面：
- en: '![](img/f99e0a4f-5bf4-494c-928b-23fadf61b223.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f99e0a4f-5bf4-494c-928b-23fadf61b223.png)'
- en: 'The form that is used to edit the country details is shown in the following
    screenshot:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编辑国家详细信息的表单如下截图所示：
- en: '![](img/945cadbf-de57-4099-8259-b4c044f59bc8.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/945cadbf-de57-4099-8259-b4c044f59bc8.png)'
- en: 'Then we have popups that are used to add a new city to the country, as shown
    in the following screenshot:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有用于向国家添加新城市的弹出窗口，如下截图所示：
- en: '![](img/00f915d1-38c2-428d-bec6-a22d2df2df8e.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00f915d1-38c2-428d-bec6-a22d2df2df8e.png)'
- en: 'Similarly, we have another popup to add a new country language, as shown in
    the following:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们还有一个用于添加新国家语言的弹出窗口，如下所示：
- en: '![](img/07f46f66-80d6-40ef-aff2-09fbf2303055.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07f46f66-80d6-40ef-aff2-09fbf2303055.png)'
- en: Summary
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is designed with the aim of kick-starting your work with the Spring
    Framework. We have covered various topics, starting from scratch to create a project
    structure and design the view templates. It comprises various technologies and
    tools to build web-based applications in Spring.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在启动您使用Spring框架的工作。我们从从头创建项目结构和设计视图模板开始，涵盖了构建基于Spring的Web应用程序的各种技术和工具。
- en: It is always good practice to do more hands-on exercises to understand the concepts
    in detail. Next, you can think of enhancing the application further by adopting
    a few other World Bank APIs and integrate them in to this application. In this
    chapter, we have configured most of the things with our own.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 详细了解概念进行更多动手练习始终是一个好的实践。接下来，你可以考虑通过采用一些其他世界银行API来进一步增强应用程序。在本章中，我们已经使用自己的方式配置了大部分内容。
- en: However, Spring provides a tool called **Spring Boot**, which really helps in
    doing most of the configuration in an automated manner, allowing you to focus
    on developing the application. In subsequent chapters, we will explore how to
    use Spring Boot for developing web applications in Spring in more detail.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Spring提供了一个名为**Spring Boot**的工具，它真的有助于以自动化的方式完成大部分配置，让你可以专注于开发应用程序。在随后的章节中，我们将更详细地探讨如何使用Spring
    Boot在Spring中开发Web应用程序。
- en: In the next chapter, we will explore another great feature called Reactive Programming
    in Spring Framework using WebFlux. We will learn the basics of the Reactive paradigm,
    what are the benefits, and explore various Reactive libraries. Spring uses `Reactor`—a
    library that provides implementation of Reactive Stream to develop web-based applications.
    So, get ready to explore all those new and exciting topics in the second chapter.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Spring框架中名为响应式编程的另一个重要特性，使用WebFlux来实现。我们将学习响应式范式的基础知识，了解其优势，并探索各种响应式库。Spring使用`Reactor`——一个提供响应式流实现以开发基于Web应用的库。因此，准备好在第二章中探索所有这些新颖且令人兴奋的主题吧。
