- en: Chapter 6. Core Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。核心架构
- en: '[Chapter 1](ch01.html "Chapter 1. Business Process Modeling – Bridging Business
    and Technology"), *Business Process Modeling – Bridging Business and Technology*,
    provided you with an overview of the new KIE platform and the jBPM tool stack
    components. This chapter will show you how jBPM is built and what its components
    and subsystems are, and it will take you through the source code of jBPM, illustrating,
    with examples, how to leverage the flexibility provided by its modular system.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html "第 1 章。业务流程建模 – 连接业务与技术")，*业务流程建模 – 连接业务与技术*，为你提供了对新的 KIE
    平台和 jBPM 工具栈组件的概述。这一章将向你展示 jBPM 是如何构建的，以及它的组件和子系统是什么，它将通过 jBPM 的源代码，用示例说明如何利用其模块化系统提供的灵活性。'
- en: 'The list of topics that we will cover in this chapter is as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题列表如下：
- en: Core API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心API
- en: Runtime engine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时引擎
- en: Human Task service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人类任务服务
- en: Persistence and transaction
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久性和事务
- en: History logs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史日志
- en: The KIE API
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KIE API
- en: 'The new KIE API stems from the need for providing both a new common software
    service layer and an integrated IDE (Workbench) for well-assessed Red Hat projects,
    mainly Drools and jBPM. With the KIE API, several features have been added to
    ease the integration of these platforms with several environments: JMS, Rest,
    SOAP, CDI, Spring, Seam, OSGi, and plain Java applications.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 KIE API 产生于提供新的公共软件服务层和为经过良好评估的 Red Hat 项目（主要是 Drools 和 jBPM）提供集成 IDE（工作台）的需求。通过
    KIE API，添加了几个功能，以简化这些平台与多个环境的集成：JMS、Rest、SOAP、CDI、Spring、Seam、OSGi 和纯 Java 应用程序。
- en: The **droolsjbpm-integration** additional project (hosted at [https://github.com/droolsjbpm/droolsjbpm-integration](https://github.com/droolsjbpm/droolsjbpm-integration))
    features integration packages for various environments and technologies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**droolsjbpm-integration** 额外项目（托管在 [https://github.com/droolsjbpm/droolsjbpm-integration](https://github.com/droolsjbpm/droolsjbpm-integration)）提供了各种环境和技术的集成包。'
- en: We previewed some of the new KIE concepts in [Chapter 4](ch04.html "Chapter 4. Operation
    Management"), *Operation Management* (new Maven-based deployments, KieModule,
    the `kmodule.xml` file, and KieScanner), so you should be ready to go deeper into
    the subject. You will also find, as a companion support for our examples, class
    diagrams of specific KIE component relationships, which should help you to have
    a clearer picture of the internal KIE organization.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 4 章](ch04.html "第 4 章。运营管理")中预览了一些新的 KIE 概念，*运营管理*（基于 Maven 的部署、KieModule、`kmodule.xml`
    文件和 KieScanner），因此你应该准备好深入探讨这个主题。你还将找到，作为我们示例的配套支持，特定 KIE 组件关系的类图，这应该有助于你更清晰地了解
    KIE 内部组织结构。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[http://www.kiegroup.org](http://www.kiegroup.org) is the portal for all KIE
    technologies.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.kiegroup.org](http://www.kiegroup.org) 是所有 KIE 技术的门户。'
- en: KieServices
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KieServices
- en: KieServices is a thread-safe singleton, which acts as a service factory. It
    gives high-level access to main KIE components and services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: KieServices 是一个线程安全的单例，充当服务工厂。它提供了对主要 KIE 组件和服务的较高层次访问。
- en: 'It is possible to obtain a KieServices reference via its factory as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式通过其工厂获取 KieServices 引用：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The main KIE API services are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的 KIE API 服务如下：
- en: '**KieContainer**: This is essentially a wrapper for KieModule and KieBase(s)
    that it defines; it can compile and verify KieBase and generate new KieSession(s).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieContainer**：这本质上是对 KieModule 和它定义的 KieBase(s) 的包装；它可以编译和验证 KieBase 并生成新的
    KieSession(s)。'
- en: '**KieRepository**: This is a repository that manages KieModules abstracting
    away from the module source; it can be a module installed in a Maven repository
    or a module programmatically created and added by the user.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieRepository**：这是一个管理 KieModules 的仓库，抽象出模块源；它可以是安装在 Maven 仓库中的模块，也可以是用户通过编程创建并添加的模块。'
- en: '**KieScanner**: This is a Maven repository artifacts scanner.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieScanner**：这是一个 Maven 仓库工件扫描器。'
- en: '**KieBuilder**: This is a helper for compiling and building a KieModule starting
    from its set of source files.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieBuilder**：这是一个从其源文件集开始编译和构建 KieModule 的辅助工具。'
- en: '**KieResources**: This is a factory for creating specialized resources from
    various I/O sources (Classpath, URL, and so on).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieResources**：这是一个从各种 I/O 源（类路径、URL 等）创建专用资源的工厂。'
- en: '**KieLoggers**: This is a logger configurator for the session.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieLoggers**：这是一个用于会话的日志配置器。'
- en: '**KieStoreServices**: This is a store service that manages the persistency
    of the jBPM and Drools runtime state.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieStoreServices**：这是一个存储服务，用于管理 jBPM 和 Drools 运行时状态的可持久性。'
- en: '**KieMarshallers**: Marshalling provides a customizable serialization architecture,
    utility classes, and strategies. We will describe the jBPM flexible marshalling
    architecture in [Chapter 7](ch07.html "Chapter 7. Customizing and Extending jBPM"),
    *Customizing and Extending jBPM*.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KieMarshallers**：Marshalling 提供了一个可定制的序列化架构、实用类和策略。我们将在 [第 7 章](ch07.html
    "第 7 章。定制和扩展 jBPM") *定制和扩展 jBPM* 中描述 jBPM 灵活的 marshalling 架构。'
- en: Let us start by discussing the KIE API components whose duties are related to
    the jBPM runtime configuration and setup, since all your knowledge artifacts represent,
    at runtime, the engine's building ground for your business process execution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先讨论与 jBPM 运行时配置和设置相关的 KIE API 组件，因为所有您的知识工件在运行时都代表了业务流程执行引擎的构建基础。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The upcoming sections are not logically grouped under this KieServices section
    since they all are KIE first class citizens (classes) and can be used and created
    irrespective of the KieServices factory class. You can find the complete source
    code examples for this chapter in the `jbpm-misc` project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分不属于 KieServices 这一部分的逻辑分组，因为它们都是 KIE 一等公民（类）并且可以在不考虑 KieServices 工厂类的情况下使用和创建。您可以在
    `jbpm-misc` 项目中找到本章的完整源代码示例。
- en: KieContainer – KIE modules and KieBase(s)
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KieContainer – KIE 模块和 KieBase(s)
- en: '`KieContainer` has been specifically designed to handle a KIE module and resolve
    its dependencies (other KIE modules or Mavenized JARs), even through remote Maven
    repositories. This is a huge improvement in terms of knowledge module sharing
    and management capabilities, compared to older jBPM versions. While a KIE module
    is an assembly that collects a set (archive) of business artifacts and static
    resources, it is the responsibility of KieContainer to organize the KieBase and
    KieSession definitions and to give the user the tools to obtain new ready-to-use
    references for them.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`KieContainer` 已经专门设计来处理 KIE 模块并解决其依赖关系（其他 KIE 模块或 Maven 化的 JAR），即使是通过远程 Maven
    仓库。与较老的 jBPM 版本相比，这在知识模块共享和管理能力方面是一个巨大的改进。虽然 KIE 模块是一个收集一组业务工件和静态资源的集合，但组织 KieBase
    和 KieSession 定义以及为用户提供获取它们的新现成引用的工具的责任在于 KieContainer。'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the examples in the `KieContainerTest` class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `KieContainerTest` 类中找到示例。
- en: '`KieContainer` can use the Java Classpath or the user-provided ClassLoader
    to detect, load, and wrap an existing `KieModule`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`KieContainer` 可以使用 Java 类路径或用户提供的 ClassLoader 来检测、加载和包装现有的 `KieModule`：'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `getKieClasspathContainer()` function returns `KieContainer` that wraps
    `KieBase` found in your current Classpath (created by parsing the available `kmodule.xml`
    files).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`getKieClasspathContainer()` 函数返回包装了当前类路径中找到的 `KieBase` 的 `KieContainer`（通过解析可用的
    `kmodule.xml` 文件创建）。'
- en: 'In [Chapter 4](ch04.html "Chapter 4. Operation Management") *Operation Management*,
    we talked about the new Maven repository integration feature. `KieContainer` is
    able to load KieModule from a Maven repository, given its Maven **GroupId-ArtifactId-Version**
    (**GAV**); use the `ReleaseId` class as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 4 章](ch04.html "第 4 章。运营管理") *运营管理* 中，我们讨论了新的 Maven 仓库集成功能。`KieContainer`
    能够从 Maven 仓库加载 KieModule，给定其 Maven **GroupId-ArtifactId-Version**（**GAV**）；如下使用
    `ReleaseId` 类：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The container, by putting the KIE client repository service at work, is also
    able to dynamically update its definitions starting from a different KIE module,
    given its Maven GAV. As a result, all its existing KieBase assets and KieSession
    definition will be incrementally updated (and the cached class definitions will
    be replaced with newer ones).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 KIE 客户端仓库服务投入使用，该容器还能够根据其 Maven GAV 动态更新其定义，从不同的 KIE 模块开始。因此，所有现有的 KieBase
    资产和 KieSession 定义都将逐步更新（并且缓存的类定义将被较新的定义替换）。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'KieBase (KnowledgeBase) is the building block of KieModule. The `KieBase` class
    works as the store for the KieModule knowledge definitions and serves as a dictionary
    for your KIE session. It contains Drools rules, processes, models, and so on.
    By default, these artifacts are searched in the KIE project `resources` root folder,
    but you can set the `packages` attribute to search in a different folder, for
    example (an excerpt of a `kmodule.xml`):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: KieBase（知识库）是 KieModule 的构建块。`KieBase` 类作为 KieModule 知识定义的存储库，并作为 KIE 会话的字典。它包含
    Drools 规则、流程、模型等。默认情况下，这些工件在 KIE 项目的 `resources` 根目录中搜索，但您可以设置 `packages` 属性以在不同的文件夹中搜索，例如（`kmodule.xml`
    的摘录）：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will load artifacts from the `resources/com/packt/masterjbpm6/event` project
    folder.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载来自`resources/com/packt/masterjbpm6/event`项目文件夹的工件。
- en: Your KieModule must always have at least one named KieBase (that is, its `name`
    attribute must be set); alternatively, if you decide to use a `default` (that
    is, created without knowing its name) KieBase, omit the `<kbase>` element definition
    altogether in your `kmodule.xml` or leave the `kmodule.xml` empty.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你的KieModule必须始终至少有一个命名的KieBase（即其`name`属性必须设置）；或者，如果你决定使用默认的（即不知道其名称而创建的）KieBase，则在你的`kmodule.xml`中完全省略`<kbase>`元素定义，或者使`kmodule.xml`为空。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: KieSession does not make much sense without an underlying KieBase. The KIE runtime,
    in case the user is not specifying one, provides you with a default KieBase. This
    default KieBase is KieBase with the attribute `packages="*"`, meaning that it
    is defined with all assets contained in all module packages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 没有底层KieBase的KieSession没有太多意义。在用户没有指定的情况下，KIE运行时为你提供了一个默认的KieBase。这个默认的KieBase是具有`packages="*"`属性的KieBase，这意味着它定义了包含在所有模块包中的所有资产。
- en: 'KieBase is created by KieContainer and supports inheritance (inclusion) and
    multiple definitions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: KieBase由KieContainer创建，支持继承（包含）和多重定义：
- en: '**Inclusion**: All knowledge artifacts belonging to "included KieBase" are
    added to "including KieBase"; for example, all `kbaseold` resources are added
    to the `kbasenew` KieBase:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含**：属于“包含的KieBase”的所有知识工件都被添加到“包含的KieBase”中；例如，所有`kbaseold`资源都被添加到`kbasenew`
    KieBase中：'
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The included KieBase must be already available (the KieModule within which it
    is defined has to be deployed) or defined locally (the same `kmodule.xml` file).
    In [Chapter 4](ch04.html "Chapter 4. Operation Management"), *Operation Management*
    (the ManagedVesuvio repository example), the Napoli KieModule's kbase is included
    the Vesuvio's kbase in order to reuse its external process definition as a subprocess;
    let us clarify by looking at their Kie module definitions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的KieBase必须已经可用（定义它的KieModule必须已部署）或本地定义（相同的`kmodule.xml`文件）。在[第4章](ch04.html
    "第4章。运营管理")中，*运营管理*（ManagedVesuvio存储库示例）中，Napoli KieModule的kbase包含Vesuvio的kbase，以便重用其外部过程定义作为子过程；让我们通过查看它们的Kie模块定义来澄清。
- en: 'The Napoli `kbase` definition (relevant part only) is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Napoli `kbase`定义如下（仅相关部分）：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Vesuvio `kbase` definition is (relevant part only) as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Vesuvio `kbase`定义如下（仅相关部分）：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that, in order to have KIE pick up the main kbase (`kbase-napoli`), we
    set `kbase-vesuvio` kbase's `default` attribute to `false`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使KIE拾取主kbase（`kbase-napoli`），我们将`kbase-vesuvio` kbase的`default`属性设置为`false`。
- en: '**Multiple definitions**: Multiple KieBase (and KieSession) can be defined
    inside a single KieModule:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多重定义**：可以在单个KieModule内部定义多个KieBase（和KieSession）：'
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once the KieBase is defined, you can create a stateful KieSession (the default
    one or a named one, by passing its `name` attribute).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了KieBase，就可以创建一个有状态的KieSession（默认的或命名的，通过传递其`name`属性）。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Each KieSession is always paired with a single KieBase: KieContainer actually
    delegates the session creation to its KieBase.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个KieSession都与一个单独的KieBase配对：KieContainer实际上将会话创建委托给其KieBase。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: KieBase and KieSession support a number of declarative configuration settings
    that you can add to your `kmodule.xml` file; please consult the jBPM 6.2 reference
    documentation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: KieBase和KieSession支持许多声明性配置设置，你可以将其添加到你的`kmodule.xml`文件中；请参阅jBPM 6.2参考文档。
- en: The following class diagram shows the main classes that you have to deal with
    when working with containers (sessions will be discussed in a forthcoming section).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类图显示了在处理容器时必须处理的主体类（会话将在下一节中讨论）。
- en: '![KieContainer – KIE modules and KieBase(s)](img/9578OS_06_04.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![KieContainer – KIE模块和KieBase(s)](img/9578OS_06_04.jpg)'
- en: The KIE builder API
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KIE构建器API
- en: 'It''s very likely that you might have already used `KnowledgeBuilderFactory`
    and `KnowledgeBuilder` to set up `KnowledgeBase`: KnowledgeBuilder parses the
    knowledge source files (process `bpmn` files, Drools `.drl` rule, and so on),
    and turns them into KnowledgePackage that KnowledgeBase can use. The resources
    are identified and added by type (`ResourceType` enum). KnowledgeBase is deprecated,
    but `KieBase` is actually implemented by `KnowledgeBaseImpl`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你已经使用过`KnowledgeBuilderFactory`和`KnowledgeBuilder`来设置`KnowledgeBase`：KnowledgeBuilder解析知识源文件（处理`bpmn`文件、Drools
    `.drl`规则等），并将它们转换为KnowledgeBase可以使用的知识包。资源通过类型（`ResourceType`枚举）进行标识和添加。KnowledgeBase已弃用，但`KieBase`实际上是由`KnowledgeBaseImpl`实现的。
- en: 'The KIE API gives you tools specialized in managing KieModule: file creation
    and resource assembling, module dependency management, and building and deployment
    to Maven repositories. The following class diagram shows the main builder related
    classes (for a quick reference purpose only).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: KIE API 提供了专门用于管理 KieModule 的工具：文件创建和资源组装、模块依赖管理、构建和部署到 Maven 仓库。以下类图显示了主要构建相关类（仅作快速参考）。
- en: '![The KIE builder API](img/9578OS_06_01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![KIE 构建器 API](img/9578OS_06_01.jpg)'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the examples in the `KieBuilderTest` and `KieResourceTest` classes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `KieBuilderTest` 和 `KieResourceTest` 类中找到示例。
- en: KieResources
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KieResources
- en: 'The resource is a contract representation of a knowledge element (process,
    rule, and so on) or a resource that indirectly can be used to load a Kie module
    (for example: a path to `kmodule.xml`).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 资源是一个知识元素（流程、规则等）或资源的合同表示，或者可以间接用于加载 Kie 模块的资源（例如：`kmodule.xml` 的路径）。
- en: 'The `KieResources` factory eases the task of handling objects in the forms
    of `org.kie.api.io.Resource`; for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`KieResources` 工厂简化了以 `org.kie.api.io.Resource` 形式处理对象的任务；例如：'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This resource represents the path that contains a KIE module.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此资源表示包含 KIE 模块的路径。
- en: KieModule
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KieModule
- en: 'While KieContainer represents an abstraction, the very nature of KieModule
    is based on business asset files (resources): KieModule is a container of all
    the resources needed to define a set of KieBase classes.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 KieContainer 代表一个抽象，但 KieModule 的本质是基于业务资产文件（资源）：KieModule 是定义一组 KieBase
    类所需的所有资源的容器。
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The module project source structure must be compliant with the standard layout
    for a Maven project (such as `src/main/resources`).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 模块项目的源结构必须符合 Maven 项目的标准布局（如 `src/main/resources`）。
- en: '`pom.xml` defining the KieModule Maven GAV'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom.xml` 定义 KieModule Maven GAV'
- en: '`kmodule.xml` declaring KieBase, KieSession, and their properties'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kmodule.xml` 声明 KieBase、KieSession 及其属性'
- en: knowledge artifacts
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知识工件
- en: KieModule tracks the module dependencies from other Kie modules and from other
    plain JAR archives thanks to the `pom.xml` file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: KieModule 通过 `pom.xml` 文件跟踪来自其他 Kie 模块和其他普通 JAR 存档的模块依赖项。
- en: KieBuilder
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KieBuilder
- en: 'KieBuilder allows you to build KieModule by adding resources and configuration
    files through a set of model classes (metamodels), which represent the key KieModule
    components:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: KieBuilder 允许您通过添加资源和管理配置文件（通过一系列模型类，即元模型）来构建 KieModule，这些模型类代表关键的 KieModule
    组件：
- en: '`KieModuleModel`: A KieModule abstraction'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KieModuleModel`: 一个 KieModule 抽象'
- en: '`KieBaseModel`: A KieBase abstraction'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KieBaseModel`: 一个 KieBase 抽象'
- en: '`KieSessionModel`: A KieSession abstraction'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KieSessionModel`: 一个 KieSession 抽象'
- en: The memory-based filesystem class (`KieFileSystem`) helps you with the creation/writing
    of the KIE module files (`pom.xml` and `kmodule.xml`). The following class diagram
    shows `KieBuilder` and the related classes (details ahead).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 基于内存的文件系统类（`KieFileSystem`）帮助您创建/编写 KIE 模块文件（`pom.xml` 和 `kmodule.xml`）。以下类图显示了
    `KieBuilder` 和相关类（详情见后）。
- en: '![KieBuilder](img/9578OS_06_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![KieBuilder](img/9578OS_06_03.jpg)'
- en: Let us see a practical example of KIE metamodel creation and usage in order
    to set up and install a KIE module (with dependencies) from scratch into a Maven
    repository.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个实际例子来看 KIE 元模型创建和使用，以便从头开始在一个 Maven 仓库中设置和安装一个 KIE 模块（包括依赖项）。
- en: 'You can find the complete example in the `KieBuilderTest` class (`testBuilderWithModels`):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `KieBuilderTest` 类（`testBuilderWithModels`）中找到完整的示例。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When your file set is ready, pass `KileFileSystem` (content) to the builder:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的文件集准备就绪时，将 `KieFileSystem`（内容）传递给构建器：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now perform the "build." The build compiles all module knowledge packages
    and Java classes, validates the configuration files (pom.xml and kmodule.xml),
    and finally, installs the module in the local KIE repository:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以执行“构建”。构建会编译所有模块知识包和 Java 类，验证配置文件（pom.xml 和 kmodule.xml），最后将模块安装到本地 KIE
    仓库中：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Programmatically creating KieModule means you have to create the object in
    a file-oriented way, for example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以编程方式创建 KieModule 意味着你必须以文件方式创建对象，例如：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The runtime will create the file following your KieModule filesystem structure.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时将根据您的 KieModule 文件系统结构创建文件。
- en: Repositories and scanners
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库和扫描器
- en: 'Maven repositories, as we already pointed out, are an important piece of the
    new Kie architecture: the repository service allows you to manage module installation
    and dependency resolution with the internal KIE repository:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所指出的，Maven 仓库是新 Kie 架构的一个重要组成部分：仓库服务允许您通过内部 KIE 仓库管理模块安装和依赖解析：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To add a module to the KIE repository store, you must provide the path to the
    `kmodule.xml` file or the path to the built KIE module JAR file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要将模块添加到 KIE 仓库存储，你必须提供 `kmodule.xml` 文件的路径或构建的 KIE 模块 JAR 文件的路径：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `addKieModule` method accepts the optional module resource dependencies
    (again, in the form of a `kmodule.xml` path or a path to a JAR archive).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`addKieModule` 方法接受可选的模块资源依赖项（再次，以 `kmodule.xml` 路径或 JAR 存档的路径的形式）。'
- en: 'To load a module from the repository is as simple as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从仓库加载一个模块就像以下这样简单：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The repository service wraps the internal Maven KIE repository services as well
    as the `KieScanner` service that we are now going to see.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库服务封装了内部 Maven KIE 仓库服务以及我们接下来将要看到的 `KieScanner` 服务。
- en: KieScanner
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KieScanner
- en: '**KieScanner** is a monitor for Maven repositories (both local and remote)
    used for automatically detecting whether there are updated releases for a given
    KieModule: in case, a new deployed artifact for the module is found, the scanner
    updates KieContainer to reflect the changed definitions (KieBase, KieSession,
    and so on). The KIE module KieBase(s) is rebuilt, and all the new KieSessions
    created from KieContainer will use the updated KIE module definitions.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**KieScanner** 是一个用于 Maven 仓库（本地和远程）的监控器，用于自动检测给定的 KieModule 是否有更新的发布版本：在这种情况下，如果找到模块的新部署的工件，扫描器会更新
    KieContainer 以反映更改的定义（KieBase、KieSession 等）。KIE 模块 KieBase(s) 会被重新构建，并且所有从 KieContainer
    创建的新 KieSessions 都将使用更新的 KIE 模块定义。'
- en: The scanner can perform a blocking scan update (the `scanNow()` method), which
    returns after the (eventual) update process is completed, or a background scanning
    process (the `start(long pollingInterval)` and `stop()` methods).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描器可以执行阻塞式扫描更新（`scanNow()` 方法），在（最终）更新过程完成后返回，或者执行后台扫描过程（`start(long pollingInterval)`
    和 `stop()` 方法）。
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The scanner works only when the paired KieContainer's module Maven version (the
    V from its GAV) is not a FIXED version. Only modules with a version with the qualifier
    SNAPSHOT, LATEST, or RELEASE, or ranged versions are processed. See Maven versions
    reference for additional help.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描器仅在配对的 KieContainer 的模块 Maven 版本（其 GAV 中的 V）不是固定版本时才工作。只有具有 SNAPSHOT、LATEST
    或 RELEASE 限定符的版本，或范围版本的模块才会被处理。有关更多信息，请参阅 Maven 版本参考。
- en: 'The scan operation performs the following actions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描操作执行以下操作：
- en: Build the new Kie module, searching for errors
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建新的 Kie 模块，寻找错误。
- en: Update old module dependencies
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新旧的模块依赖项。
- en: Update the old module assets, compile them, and rebuild the module knowledge
    bases
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新旧的模块资产，编译它们，并重新构建模块知识库。
- en: If no build error is detected, the updated module is added to the KIE module
    repository
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有检测到构建错误，则将更新的模块添加到 KIE 模块仓库。
- en: If there are new or updated classes in use by the knowledge base, then this
    is fully recreated; otherwise, its resources are incrementally updated. Obsolete
    knowledge bases and sessions (whose definition has been removed) are deleted from
    the Kie container. The general advice with the scanner is to be very cautious
    and to evaluate its impacts on a case-by-case basis.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果知识库正在使用新的或更新的类，则将其完全重新创建；否则，其资源将增量更新。过时的知识库和会话（其定义已被删除）将从 Kie 容器中删除。关于扫描器的一般建议是极其谨慎，并针对每个案例进行评估。
- en: 'The example `KieScannerTest` class provides you with two test methods:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 `KieScannerTest` 类为你提供了两个测试方法：
- en: '`testScannerUpdateNewSession`: This verifies whether a Kie module process definition
    gets updated after the scan process by creating a new session and verifying that
    the update process variable returns a different value from the original definition'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testScannerUpdateNewSession`：通过创建一个新会话并验证更新过程变量返回的值与原始定义不同，来验证扫描过程后 Kie 模块流程定义是否得到更新。'
- en: '`testScannerSameSessionAfterUpdate`: This verifies whether after the scan,
    the existing session continues using its old process definition, while a new KIE
    session picks up the updated process definition'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testScannerSameSessionAfterUpdate`：验证扫描后，现有的会话是否继续使用其旧流程定义，而新的 KIE 会话则获取更新的流程定义。'
- en: The scanner is a nice improvement over the previous jBPM knowledge base update
    mechanism (KnowledgeAgent) since it works in tight integration with Maven and
    provides the implementer with an asset-oriented programming style in handling
    KIE modules, Kie project sources, and assets. This great addition makes jBPM fit
    a lot better in the typical agile, lean development environment. Just think about
    the possibilities you have when integrating with **Continuous Integration** (**CI**),
    deployment, and automated test tools. You may have a scanner process that checks
    your nightly build Maven repo trunk, updates your KIE module with the latest development
    version of your assets, and triggers your automated test suite.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描仪在之前的jBPM知识库更新机制（KnowledgeAgent）上是一个很好的改进，因为它与Maven紧密集成，并为实现者提供了以资产为导向的编程风格来处理KIE模块、Kie项目源和资产。这一重大改进使jBPM更适合典型的敏捷、精益开发环境。只需想想当你与**持续集成**（**CI**）、部署和自动化测试工具集成时的可能性。你可能有一个扫描器进程，它会检查你的夜间构建Maven仓库主干，使用你资产的最新开发版本更新你的KIE模块，并触发你的自动化测试套件。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The KieScanner API implementation and utility classes belong to the `kie-ci`
    project ([https://github.com/droolsjbpm/drools/tree/master/kie-ci](https://github.com/droolsjbpm/drools/tree/master/kie-ci)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: KieScanner API实现和实用类属于`kie-ci`项目（[https://github.com/droolsjbpm/drools/tree/master/kie-ci](https://github.com/droolsjbpm/drools/tree/master/kie-ci)）。
- en: 'The Scanner API also provides a Maven helper class, which manages artifact
    lookup and deployment to the system Maven repository:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描仪API还提供了一个Maven辅助类，该类管理工件查找和部署到系统Maven仓库：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `KieScannerTest` jUnit test class exercises the scanner and the builder
    API. It creates and deploys a new release for the `pizzadelivery` KieModule (the
    `buildModuleForScannerUpdate` method) and then, starts the scanner update process
    (the `testScannerUpdate()` method).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`KieScannerTest` jUnit测试类测试扫描器和构建API。它为`pizzadelivery` KieModule创建并部署了一个新版本（`buildModuleForScannerUpdate`方法），然后启动扫描器更新过程（`testScannerUpdate()`方法）。'
- en: KieLoggers
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KieLoggers
- en: 'The KieLoggers factory allows you to create audit loggers that produce log
    traces of all the events occurring during the execution of a specific KIE session.
    The following types of loggers are available:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: KieLoggers工厂允许你创建审计日志记录器，它产生在特定KIE会话执行期间发生的所有事件的日志跟踪。以下类型的日志记录器可用：
- en: '**File based logger**: Logger to file with a default `.log` extension; it traces
    the event in an XML serialized format:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于文件的日志记录器**：以默认`.log`扩展名的文件日志记录器；以XML序列化格式跟踪事件：'
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See the `KieLoggersTest.testLoggers` method for the complete example.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看`KieLoggersTest.testLoggers`方法以获取完整示例。
- en: '**Console based logger**: Traces the log to the standard output:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于控制台的日志记录器**：将日志跟踪到标准输出：'
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here you have an example when running the `testRuleWithConsoleLogger` method;
    you can see the insertion of the Drools fact and the Drool rule triggering:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行`testRuleWithConsoleLogger`方法时，你可以看到Drools事实的插入和Drool规则的触发：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Threaded logger: Same as the file-based logger but executes writes to the file
    in an asynchronous fashion; it features an option to set the write (flush) interval
    period in milliseconds, for example:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程日志记录器：与基于文件的日志记录器相同，但以异步方式执行对文件的写入；它具有设置写入（刷新）间隔周期的选项，例如：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See the `testRuleWithThreadedLogger` example for the complete example.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看`testRuleWithThreadedLogger`示例以获取完整示例。
- en: 'Logger classes extend `WorkingMemoryLogger`, which implements all the available
    event listener interfaces: `Process`, `Agenda`, `Rule`, and (KIE) KnowledgeBase.
    Since several events are generated, you''re given the ability to control event
    filtering with the following methods: `addFilter`, `removeFilter`, and passing
    an `ILogEventFilter` implementing class. We can declare and configure the KieSession
    loggers directly in the `kmodule.xml` file, for example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 日志类扩展`WorkingMemoryLogger`，该类实现了所有可用的事件监听器接口：`Process`、`Agenda`、`Rule`和（KIE）知识库。由于会生成多个事件，你可以使用以下方法控制事件过滤：`addFilter`、`removeFilter`以及传递一个实现`ILogEventFilter`的类。我们可以在`kmodule.xml`文件中直接声明和配置KieSession日志记录器，例如：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following class diagram shows the loggers and the event listener interfaces:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类图显示了日志记录器和事件监听器接口：
- en: '![KieLoggers](img/9578OS_06_05.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![KieLoggers](img/9578OS_06_05.jpg)'
- en: KieStoreServices
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KieStoreServices
- en: '`org.kie.api.persistence.jpa.KieStoreServices` is an interface that defines
    the contract for the KIE session persistence service. Its default implementation
    is the `org.drools.persistence.jpa.KnowledgeStoreServiceImpl` class. Let us have
    a look at how `KieStoreServices` can be used to restore KIE sessions by using
    the session ID. The following example is an excerpt of the `StorageTest.testRuleWithStorageServer`
    method. It demonstrates how you can load your Kie session safely from the persistence
    store and execute the business process consistently.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.kie.api.persistence.jpa.KieStoreServices` 是一个定义 KIE 会话持久化服务合约的接口。它的默认实现是
    `org.drools.persistence.jpa.KnowledgeStoreServiceImpl` 类。让我们看看如何使用 `KieStoreServices`
    通过会话 ID 恢复 KIE 会话。以下示例是 `StorageTest.testRuleWithStorageServer` 方法的摘录。它展示了如何安全地从持久化存储中加载您的
    Kie 会话并一致地执行业务流程。'
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: RuntimeManager service and the engine
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时管理器服务和引擎
- en: '`RuntimeManager` has been introduced to simplify the configuration of `KieBase`
    (`KnowledgeBase`) and `KieSession` (`KnowledgeSession`). Its main duty is to manage
    and create instances of `RuntimeEngine` according to predefined strategies (see
    the *Runtime strategy* section).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuntimeManager` 的引入是为了简化 `KieBase` (`KnowledgeBase`) 和 `KieSession` (`KnowledgeSession`)
    的配置。其主要职责是根据预定义的策略管理和创建 `RuntimeEngine` 实例（见 *运行时策略* 部分）。'
- en: '`org.kie.api.runtime.manager.RuntimeEngine` is the entry point to the engine
    services; its main purpose is to provide the user with pre-configured and ready-to-use
    engine components:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.kie.api.runtime.manager.RuntimeEngine` 是进入引擎服务的入口点；其主要目的是为用户提供预配置和即用型引擎组件：'
- en: KieSession
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KieSession
- en: TaskService
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TaskService
- en: AuditService
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AuditService
- en: '`org.kie.api.runtime.manager.RuntimeManager` unburdens the user from the development
    of a typical boilerplate code; it sets up the execution environment for processes
    (wrapping the KieSession and the task service into the RuntimeEngine) and manages
    the following Drools services:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.kie.api.runtime.manager.RuntimeManager` 解除了用户从典型样板代码开发中的负担；它为流程设置执行环境（将
    KieSession 和任务服务包装到 RuntimeEngine 中）并管理以下 Drools 服务：'
- en: '**Scheduler service**: The scheduler service manages timer-based jobs for execution
    (we have seen it in [Chapter 4](ch04.html "Chapter 4. Operation Management"),
    *Operation Management*, and [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"),
    *BPMN Constructs* with *Async task*)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scheduler service**：调度服务管理基于计时器的作业执行（我们已在 [第 4 章](ch04.html "第 4 章。运营管理")，*运营管理*
    和 [第 5 章](ch05.html "第 5 章。BPMN 构造")，*BPMN 构造* 中使用 *Async task* 的 *BPMN 构造* 中见过）'
- en: '**TimerService**: Implements timer services for the sessions'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TimerService**：为会话实现计时器服务'
- en: 'The runtime manager registers the following items on the session:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时管理器在会话上注册以下项目：
- en: Process workitem handlers (also the default `human task` workitem handler which
    is responsible for managing task nodes)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程工作项处理器（也包括默认的 `human task` 工作项处理器，它负责管理任务节点）
- en: Global variables
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量
- en: Event listeners
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件监听器
- en: Runtime strategy
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时策略
- en: '`RuntimeManager` implements a runtime strategy that lets you choose how to
    manage your KieSession life cycle; let us see the available strategies:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuntimeManager` 实现了一个运行时策略，允许您选择如何管理您的 KieSession 生命周期；让我们看看可用的策略：'
- en: '**Singleton (default jBPM strategy for a Kie module)**: The runtime manages
    only one shared `RuntimeEngine` instance (only one Kie session is active and shared)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Singleton（默认 jBPM 策略）**：运行时管理仅一个共享的 `RuntimeEngine` 实例（只有一个 Kie 会话是活动状态并共享）'
- en: '**PerProcessInstance**: The manager uses a dedicated Kie session for each process
    instance; the Kie session life cycle spans the process instance duration'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PerProcessInstance**：管理器为每个流程实例使用一个专用的 Kie 会话；Kie 会话生命周期跨越流程实例的持续时间'
- en: '**PerRequest**: Invoking the `getRuntimeEngine()` method returns a new `RuntimeEngine`
    instance (creating a new Kie session and task service each time)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PerRequest**：调用 `getRuntimeEngine()` 方法返回一个新的 `RuntimeEngine` 实例（每次都创建一个新的
    Kie 会话和任务服务）'
- en: '`RuntimeManager` must be created from `RuntimeManagerFactory`, calling one
    of its specialized factory methods according to the chosen runtime strategy (`newSingletonRuntimeManager()`,
    `newPerRequestRuntimeManager()`, or `newPerProcessInstanceRuntimeManager()`) and
    passing an instance of `org.kie.api.runtime.manager.RuntimeEnvironment`.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuntimeManager` 必须从 `RuntimeManagerFactory` 创建，根据选择的运行时策略（`newSingletonRuntimeManager()`、`newPerRequestRuntimeManager()`
    或 `newPerProcessInstanceRuntimeManager()`）调用其专用工厂方法，并传递 `org.kie.api.runtime.manager.RuntimeEnvironment`
    的实例。'
- en: Choosing the right strategy
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择正确的策略
- en: You shall choose the right runtime strategy mainly depending on your business
    and system specifications. Requirements may constrain you to keep isolated jBPM
    session working memories (for example, one session per process instance); in other
    words, each session owns its rules, facts, and objects. This could be the case
    for short-lived processes in a heavily concurrent system where you need low resource
    contention and high throughput.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您应主要根据您的业务和系统规范选择正确的运行时策略。需求可能限制您保持隔离的jBPM会话工作内存（例如，每个流程实例一个会话）；换句话说，每个会话拥有自己的规则、事实和对象。这在需要低资源竞争和高吞吐量的高度并发系统中是可能的。
- en: The singleton strategy, on the other hand, manages a single-thread safe session
    (with synchronized access). This could lead to performance issues in highly concurrent
    environments (web) but would also allow for all jBPM sharing capabilities (facts
    and globals shared among all processes, scope of signals across your entire working
    memory, and so on). These are just general insights into the matter, and you should
    aim at evaluating your own strategy pros and cons according to your system and
    functional requirements.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，单例策略管理一个线程安全的会话（具有同步访问）。这在高度并发的环境（如Web）中可能导致性能问题，但也会允许所有jBPM共享功能（所有流程之间共享事实和全局变量，整个工作内存中的信号作用域等）。这些都是对问题的一般见解，您应根据系统和功能需求评估自己的策略的优缺点。
- en: The RuntimeEnvironment class
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RuntimeEnvironment类
- en: 'This class encapsulates the environment configuration required by `RuntimeManager`;
    we instantiate it by using the `RuntimeEnvironmentBuilder` helper class:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此类封装了`RuntimeManager`所需的环境配置；我们通过使用`RuntimeEnvironmentBuilder`辅助类来实例化它：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`RuntimeEnvironmentBuilderFactory` has several helper methods targeted to create
    preconfigured specialized `RuntimeEnvironmentBuilder` enabled for persistence,
    based on the classpath KIE container (`kmodule.xml`), based on a KIE module (JAR
    file), and so on. Since the builder wraps all the configuration details, it exposes
    methods to perform the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuntimeEnvironmentBuilderFactory`有多个辅助方法，旨在创建预配置的专用`RuntimeEnvironmentBuilder`，使其能够持久化，基于类路径KIE容器（`kmodule.xml`），基于KIE模块（JAR文件）等。由于构建器封装了所有配置细节，它公开了执行以下操作的方法：'
- en: Add an asset (a BPMN process, Drools rule, and so on)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加资产（BPMN流程、Drools规则等）
- en: Set custom `UsergroupCallback`
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置自定义`UsergroupCallback`
- en: Set a Knowledge Base (in case your `RuntimeEnvironmentBuilder` is not a KIE
    module classpath builder)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置知识库（如果您的`RuntimeEnvironmentBuilder`不是KIE模块类路径构建器）
- en: Set Entity Manager Factory to enable JPA persistence
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置实体管理器工厂以启用JPA持久性
- en: '[PRE27]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'RuntimeManagers are identified by unique identifiers. The runtime won''t accept
    the creation of `RuntimeManager` with the same id of another active `RuntimeManager`.
    The following diagram shows the interactions that take place during the runtime
    initialization and that involve the main KIE components:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时管理器通过唯一标识符识别。运行时不会接受创建具有与另一个活动`RuntimeManager`相同id的`RuntimeManager`。以下图表显示了在运行时初始化期间发生的交互，以及涉及主要KIE组件的交互：
- en: '![The RuntimeEnvironment class](img/9578OS_06_08.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![RuntimeEnvironment类](img/9578OS_06_08.jpg)'
- en: Runtime Context
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时上下文
- en: '`RuntimeManager` can handle contextual information to look up a specific `RuntimeEngine`
    implementation, depending on the chosen strategy; the context is passed as a `org.kie.api.runtime.manager.Context`
    generic interface implementation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`RuntimeManager`可以处理上下文信息以查找特定的`RuntimeEngine`实现，具体取决于所选策略；上下文作为`org.kie.api.runtime.manager.Context`通用接口实现的传递：'
- en: '`EmptyContext`: Context used with Singleton or PerRequest RuntimeManager; no
    specific information is used'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmptyContext`：与Singleton或PerRequest RuntimeManager一起使用的上下文；不使用特定信息'
- en: '`CorrelationKeyContext`: Used with PerProcessInstance RuntimeManager to find
    `RuntimeEngine` by using a process instance correlation key'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CorrelationKeyContext`：与PerProcessInstance RuntimeManager一起使用，通过使用流程实例关联键来查找`RuntimeEngine`'
- en: '`ProcessInstanceIdContext`: Used with PerProcessInstance RuntimeManager to
    find `RuntimeEngine` (and the Kie session) by using a process instance ID'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProcessInstanceIdContext`：与PerProcessInstance RuntimeManager一起使用，通过使用流程实例ID来查找`RuntimeEngine`（以及Kie会话）'
- en: '[PRE28]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To avoid resource leakage, it is strongly recommended to dispose `RuntimeManager`
    at the end of a work session, for example:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免资源泄漏，强烈建议在工作会话结束时销毁`RuntimeManager`，例如：
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: KieSession
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KieSession
- en: KieSession is a stateful session that maintains its conversational state with
    the engine, across multiple interactions. It is the best way to interact with
    the engine. Sessions are created starting from KieContainer, KieBase, or configured
    RuntimeEngine, which always delegates to KieBase but gives you the flexibility
    of choosing a session runtime policy.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: KieSession 是一个有状态的会话，它在与引擎的多个交互过程中维护其会话状态。这是与引擎交互的最佳方式。会话是从 KieContainer、KieBase
    或配置的运行时引擎创建的，它始终委托给 KieBase，但提供了选择会话运行时策略的灵活性。
- en: 'Depending on the enabling of persistence, the session is created as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 根据持久性的启用情况，会话按以下方式创建：
- en: '**In-memory session**: All data related to session and the engine status is
    kept in memory and lost on engine restart'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存会话**: 与会话和引擎状态相关的所有数据都保存在内存中，并在引擎重启时丢失'
- en: '**JTA session**: Session persisted through a JPA EntityManager and a JTA transaction
    manager'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JTA 会话**: 通过 JPA EntityManager 和 JTA 事务管理器持久化会话'
- en: 'To create a new (stateful) KieSession, we configure the environment and we
    use `JPAKnowledgeService`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的（有状态的）KieSession，我们配置环境并使用 `JPAKnowledgeService`：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The example uses **Bitronix Transaction Manager** (**BTM**) (more on this in
    the *Persistence and transaction* section).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 示例使用 **Bitronix 事务管理器**（**BTM**）（更多关于此内容在 *持久性和事务* 部分）。
- en: The returned `StatefulKnowledgeSession` is of type `CommandBaseStatefulKnowledgeSession`,
    which decorates the session implementation (`StatefulKnowldgeSessionImpl`) with
    a command service of type `SingleSessionCommandService` (see the following class
    diagram).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的 `StatefulKnowledgeSession` 是 `CommandBaseStatefulKnowledgeSession` 类型，它使用
    `SingleSessionCommandService` 类型的命令服务装饰会话实现（`StatefulKnowldgeSessionImpl`）（参见以下类图）。
- en: '`SingleSessionCommandService` transparently manages, through the `TransactionInterceptor`
    class, the persistence of the stateful session by the JPA `SessionInfo` entity
    class.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`SingleSessionCommandService` 通过 `TransactionInterceptor` 类透明地管理通过 JPA `SessionInfo`
    实体类的有状态会话的持久性。'
- en: Stateless KieSession
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无状态 KieSession
- en: The stateless KIE session is a wrapper to a stateful session, which the runtime
    creates and disposes for the duration of a single command execution so that it
    does not maintain a conversational state and cannot persist.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 无状态 KIE 会话是有状态会话的包装器，运行时在单个命令执行期间创建和销毁它，以便它不维护会话状态并且不能持久化。
- en: Globals
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局变量
- en: 'KieSession manages `globals`; globals are objects used to pass information
    into the engine that can be used in processes or rules. Globals are shared across
    all processes and rule instances. Let us see what KieSession methods can handle
    them:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: KieSession 管理全局变量；全局变量是用于将信息传递到引擎的对象，可以在流程或规则中使用。全局变量在所有流程和规则实例之间共享。让我们看看 KieSession
    方法可以如何处理它们：
- en: '`getGlobals()`: Returns the internal globals resolver'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGlobals()`: 返回内部的全局变量解析器'
- en: '`getGlobal (String)`: Returns the global object given its identifier'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGlobal (String)`: 根据其标识符返回全局对象'
- en: '`setGlobal(String, Object)`: Sets the global object assigning it an identifier'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setGlobal(String, Object)`: 设置全局对象并为其分配一个标识符'
- en: 'The following class diagram shows details for the Session classes:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类图显示了会话类的详细信息：
- en: '![Globals](img/9578OS_06_06.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![全局变量](img/9578OS_06_06.jpg)'
- en: The CommandExecutor interface
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令执行器接口
- en: 'All KIE sessions (both stateless and stateful) implement the `CommandExecutor`
    interface, a service that lets you execute a single command or a batch of commands.
    Let us look at some of them:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 KIE 会话（无状态和有状态）都实现了 `CommandExecutor` 接口，这是一个服务，允许您执行单个命令或命令批处理。让我们看看其中的一些：
- en: '**Process/Task**: `CompleteWorkItemCommand`, `AbortWorkItemCommand`, `StartProcessCommand`,
    and so on'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程/任务**: `CompleteWorkItemCommand`, `AbortWorkItemCommand`, `StartProcessCommand`
    等等'
- en: '**Drools Rules**: `FireAllRulesCommand`, `GetFactHandleCommand`, and so on'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Drools 规则**: `FireAllRulesCommand`, `GetFactHandleCommand` 等等'
- en: '**Runtime**: `GetGlobalCommand`, `SetGlobalCommand`, and so on'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时**: `GetGlobalCommand`, `SetGlobalCommand` 等等'
- en: Normally, you would call the higher-level jBPM API methods (using the session
    or the task service reference), but sometimes, it could be handy to use the command
    classes for batching, scheduling purposes, or management operations. All the command
    classes support XML binding thanks to standard annotations (`@XmlRootElement`,
    `@XmlAttribute`, `@XmlElement`, and so on) and so, can be easily serialized or
    passed remotely. Commands can be created using `CommandFactory` or by simply instantiating
    a specific command class, which is then executed by invoking the session `execute`
    method.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会调用高级jBPM API方法（使用会话或任务服务引用），但有时，使用命令类进行批量、调度或管理操作可能很方便。所有命令类都支持XML绑定，归功于标准注解（`@XmlRootElement`、`@XmlAttribute`、`@XmlElement`等），因此可以轻松序列化或远程传递。可以使用`CommandFactory`创建命令，或者简单地实例化特定的命令类，然后通过调用会话的`execute`方法执行它。
- en: 'Let us now have a look at how these commands can be created and executed from
    the following code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看如何从以下代码中创建和执行这些命令：
- en: '[PRE31]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Alternatively, you can instantiate the command on your own:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以自己实例化该命令：
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Batch execution
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批量执行
- en: 'The session supports the execution of a batch of commands by a specialized
    `BatchExecutionCommand`. Here, we rewrite the `RuleTaskTest` test class of [Chapter
    5](ch05.html "Chapter 5. BPMN Constructs"), *BPMP Constructs*, by using three
    different commands (see the `CommandsTaskTest.testRuleWithCommand` method):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 会话支持通过专门的`BatchExecutionCommand`执行一批命令。在这里，我们通过使用三个不同的命令（参见`CommandsTaskTest.testRuleWithCommand`方法）重写了[第5章](ch05.html
    "第5章。BPMN结构")的`RuleTaskTest`测试类，*BPMN结构*：
- en: '[PRE33]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`BatchExecutionCommand` executes the enlisted commands in the exact order that
    they have been added:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`BatchExecutionCommand`按照它们被添加的确切顺序执行列出的命令：'
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note that `BatchExecutionCommand`, like all Command classes, supports serialization,
    so you can pass it remotely for execution or easily persist it for scheduled processing.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`BatchExecutionCommand`，像所有命令类一样，支持序列化，因此你可以远程执行它或轻松地将其持久化以进行计划处理。
- en: Tip
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Even `CompositeCommand` can execute multiple commands sequentially, but it supports
    human task commands only (inheriting from `TaskCommand`). This command is used
    internally by the task service (see the *Human Task service* section).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`CompositeCommand`也可以顺序执行多个命令，但它只支持人类任务命令（继承自`TaskCommand`）。此命令由任务服务内部使用（参见*人类任务服务*部分）。
- en: Event listeners
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件监听器
- en: 'KIE session can register multiple specialized listeners for different kinds
    of event notifications:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: KIE会话可以注册多个针对不同类型事件通知的专用监听器：
- en: '**Process**: `ProcessEventListener` is related to process instance execution
    (we saw ProcessEventListener in the *KieLoggers* section).'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流程**：`ProcessEventListener`与流程实例执行相关（我们在*KieLoggers*部分看到了`ProcessEventListener`）。'
- en: '**Rule**: `RuleRuntimeEventListener` for events related to facts.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：`RuleRuntimeEventListener`用于与事实相关的事件。'
- en: '**Agenda**: `AgendaEventListener` for events related to Drools Agenda. Agenda
    is a Drools component that keeps track of rule activations (rule matching) and
    rule action execution.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**议程**：`AgendaEventListener`用于与Drools议程相关的事件。议程是Drools组件，用于跟踪规则激活（规则匹配）和规则动作执行。'
- en: By providing a custom implementation of one of these interfaces, you can get
    the filtered session events.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供这些接口之一的自定义实现，你可以获取过滤后的会话事件。
- en: Note
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the logger classes obtained from the `KieLoggers` service extend the abstract
    `WorkingMemoryLogger` class, which implements the preceding three interfaces.
    We will see more on event and auditing in the *Audit and history logs* section.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 从`KieLoggers`服务获取的所有日志类都扩展了抽象的`WorkingMemoryLogger`类，该类实现了前面的三个接口。我们将在*审计和日志历史记录*部分看到更多关于事件和审计的内容。
- en: 'We can declaratively register listeners inside the `kmodule.xml` file:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`kmodule.xml`文件中声明性注册监听器：
- en: '[PRE35]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Channels
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通道
- en: Channels are communication hoses that can be established between your jBPM application
    and the engine, through your KIE working session. Their main purpose is to allow
    sending objects from the session working memory to a generic external process
    or function.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通道是可以在你的jBPM应用程序和引擎之间建立的通信管道，通过你的KIE工作会话。它们的主要目的是允许将对象从会话工作内存发送到通用的外部过程或函数。
- en: 'Let us see the basics: You must implement the `org.kie.api.runtime.Channel`
    interface and register it with the session, assigning a name to the channel:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看基础知识：你必须实现`org.kie.api.runtime.Channel`接口，并将其与会话注册，为通道分配一个名称：
- en: '[PRE36]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The channel can be used to notify the jBPM application, for instance, of a
    rule execution as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 该通道可以用来通知jBPM应用程序，例如，规则执行如下：
- en: '[PRE37]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The list of existing channels can be retrieved from the session by calling:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过调用会话来检索现有通道的列表：
- en: '[PRE38]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Check the `ChannelsTaskTest.testRuleWithChannel()` method for a working example.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`ChannelsTaskTest.testRuleWithChannel()`方法以获取一个工作示例。
- en: Human Task service
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人类任务服务
- en: We introduced the human tasks in the previous chapter; we described the human
    task state transitions, task rule assignments, and task operations performed by
    the stakeholders.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章介绍了人类任务；我们描述了人类任务状态转换、任务规则分配以及利益相关者执行的任务操作。
- en: 'You can get the `org.kie.api.task.TaskService` task service from `RuntimeEngine`
    (the `getTaskService()` method), which is a wrapper for the service; the task
    service is created and wrapped into `RuntimeEngine` (and the underlying session)
    by `RuntimeManager`, which uses `TakServiceFactory`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从`RuntimeEngine`（`getTaskService()`方法）获取`org.kie.api.task.TaskService`任务服务，这是一个服务包装器；任务服务由`RuntimeManager`创建并包装到`RuntimeEngine`（及其底层会话）中，它使用`TakServiceFactory`：
- en: '[PRE39]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The factory used to instantiate `TaskService` is as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 用于实例化`TaskService`的工厂如下：
- en: '`LocalTaskServiceFactory`: To be used in non-CDI environments'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalTaskServiceFactory`：用于非CDI环境'
- en: 'The factory configures the task service with the following references:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂使用以下引用配置任务服务：
- en: '`EntityManagerFactory` instance (taken from `RuntimeEnvironment`).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EntityManagerFactory`实例（从`RuntimeEnvironment`获取）。'
- en: '`UserGroupCallback` (taken from `RuntimeEnvironment`). If no custom `UserGroupCallback`
    implementation is provided, a default `MvelUserGroupCallbackImpl` is used; this
    loads the `UserGroupsAssignmentsOne.mvel` file from `jbpm-human-task-core-6.2.0.Final.jar`
    (the `org\jbpm\services\task\identity` package).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserGroupCallback`（从`RuntimeEnvironment`获取）。如果没有提供自定义的`UserGroupCallback`实现，则使用默认的`MvelUserGroupCallbackImpl`；它从`jbpm-human-task-core-6.2.0.Final.jar`（`org\jbpm\services\task\identity`包）加载`UserGroupsAssignmentsOne.mvel`文件。'
- en: Register task event listeners (instances of the `TaskLifeCycleEventListener`
    interface).
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册任务事件监听器（`TaskLifeCycleEventListener`接口的实例）。
- en: '`TaskDeadlinesService`: This service is responsible for the management of the
    deadlines defined for a task and for triggering notifications (we talked about
    escalations and notifications in [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"),
    *BPMN Constructs*).'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TaskDeadlinesService`：此服务负责管理为任务定义的截止日期以及触发通知（我们在[第5章](ch05.html "第5章。BPMN
    构造")中讨论了升级和通知，*BPMN 构造*）。'
- en: 'The factory also shares, at the environmental level, the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂还在环境级别上共享以下内容：
- en: Default `DefaultUserInfo` instance (loaded with data from a `userinfo.properties`
    file in the classpath, if any)
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的`DefaultUserInfo`实例（如果存在，则从类路径中的`userinfo.properties`文件加载数据）
- en: The task service leverages Commands to execute all common task operations; commands
    are executed via `CommandService`. Let us look at this service class and its inner
    working details.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 任务服务通过命令来执行所有常见的任务操作；命令通过`CommandService`执行。让我们来看看这个服务类及其内部工作细节。
- en: CommandService
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令服务
- en: 'RuntimeManager creates two different types of TaskService:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时管理器创建了两种不同的`TaskService`类型：
- en: '`CommandBasedTaskService`: The default task service implementation'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CommandBasedTaskService`：默认的任务服务实现'
- en: '`SynchronizedTaskService`: A synchronized task service instance that wraps
    `CommandBasedTaskService`. It is created using the Singleton runtime strategy'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SynchronizedTaskService`：一个同步的任务服务实例，它包装了`CommandBasedTaskService`。它使用单例运行时策略创建'
- en: '`CommandBaseTaskService` delegates the API executions to its internal `CommandService`
    executor. This is CommandExecutor and performs all the task API calls as in the
    KIE session (see the dedicated *The CommandExecutor interface* section), for example:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`CommandBaseTaskService`将API执行委托给其内部的`CommandService`执行器。这是命令执行器，它执行所有任务API调用，就像在KIE会话中一样（例如，请参阅专门的*命令执行器接口*部分）：'
- en: '[PRE40]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The start (task) method, for instance, is executed as `CompositeCommand` built
    with two TaskCommand specializations:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，启动（任务）方法作为由两个任务命令特殊化构建的`CompositeCommand`执行：
- en: '`StartTaskCommand`: It performs the task start operation by changing the state,
    triggering events on listeners, and so on'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StartTaskCommand`：通过改变状态、在监听器上触发事件等方式执行任务启动操作'
- en: '`CancelDeadlineCommand`: Cancel the matching deadline (if any) for this task''s
    Start event (see the *Deadlines and escalations* and the *Notifications* sections
    in [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN*)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CancelDeadlineCommand`: 取消此任务启动事件的匹配截止日期（如果有）（参见 [第 5 章](ch05.html "第 5 章。BPMN
    构造") 中的 *截止日期和升级* 和 *通知* 部分）'
- en: '`CompositeCommand` first executes the command from the varying argument `commands`
    and then, the `mainCommand` command. Its constructor signature is as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompositeCommand` 首先执行可变参数 `commands` 中的命令，然后执行 `mainCommand` 命令。其构造函数签名如下：'
- en: '[PRE41]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: TaskCommand and UserGroupCallback
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskCommand 和 UserGroupCallback
- en: All task commands inherit from the `UserGroupCallbackTaskCommand` class; they
    call specific parent class methods on their `execute` method in order to trigger
    updates to the `ORGANIZATIONALENTITY` database table.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 所有任务命令都继承自 `UserGroupCallbackTaskCommand` 类；它们在 `execute` 方法上调用特定的父类方法，以触发对
    `ORGANIZATIONALENTITY` 数据库表的更新。
- en: The TaskContext command
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TaskContext 命令
- en: 'Upon instantiation, each task command is given `TaskContext` from `CommandExecutor`;
    the context duties are as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例化时，每个任务命令都从 `CommandExecutor` 获得了 `TaskContext`；上下文职责如下：
- en: Provides a `JPATaskPersistenceContext` instance, which handles all the database-related
    operations
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个 `JPATaskPersistenceContext` 实例，该实例处理所有数据库相关操作
- en: Triggers task lifecycle-related events
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发任务生命周期相关事件
- en: Provides the core task-related services to the command
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为命令提供核心任务相关服务
- en: 'The main task services provided are as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的主要任务服务如下：
- en: '**Instance service** (`TaskInstanceService`): The core service that implements
    the WS Human Task specification with respect to the task life cycle'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例服务** (`TaskInstanceService`): 核心服务，它根据任务生命周期实现了 WS Human Task 规范'
- en: '**Query service** (`TaskQueryService`): It returns read-only task instance
    information such as a list of tasks assigned to a user, potential owners for a
    given task, and so on'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询服务** (`TaskQueryService`): 它返回只读任务实例信息，例如分配给用户的任务列表、给定任务的潜在所有者等'
- en: '**Content service** (`TaskContentService)`: It manages task content data (input
    and output)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容服务** (`TaskContentService`): 它管理任务内容数据（输入和输出）'
- en: '**Deadline service** (`TaskDeadlineService`): It manages the scheduling of
    task deadlines'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**截止日期服务** (`TaskDeadlineService`): 它管理任务截止日期的调度'
- en: '**Attachment service** (`TaskAttachmentService`): It deals with task attachment
    management'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附件服务** (`TaskAttachmentService`): 它处理任务附件管理'
- en: '**Admin service** (`TaskAdminService`): It provides out-of-the-standard task
    life cycle operations such as task removal and task archival'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理服务** (`TaskAdminService`): 它提供标准任务生命周期操作之外的操作，例如任务删除和任务存档'
- en: Tasks can be removed (literally deleted from the jBPM persistent store, making
    them unavailable for user assignments) but only after they have been marked as
    "archived."
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 任务可以被删除（实际上是从 jBPM 持久存储中删除，使其对用户分配不可用），但只有在它们被标记为“存档”之后。
- en: Transactions and interceptors
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事务和拦截器
- en: TaskService CommandService is implemented by a `TaskCommandExecutorImpl` class,
    which, during initialization, is decorated with an `org.jbpm.services.task.persistence.TaskTransactionInterceptor`
    interceptor. The interceptor wraps each `execute` method invocation of the command
    service between transaction boundaries managed by the Drools `JtaTransactionManager`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: TaskService CommandService 由 `TaskCommandExecutorImpl` 类实现，在初始化期间，它被 `org.jbpm.services.task.persistence.TaskTransactionInterceptor`
    拦截器装饰。拦截器将命令服务的每个 `execute` 方法调用封装在由 Drools `JtaTransactionManager` 管理的事务边界之间。
- en: Notification service
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知服务
- en: 'In [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*,
    we talked about the human task escalations and notifications features. The jBPM
    notification service relies on email messaging; thus, to work successfully, it
    requires the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 5 章](ch05.html "第 5 章。BPMN 构造") 中，我们讨论了人类任务升级和通知功能。jBPM 通知服务依赖于电子邮件消息；因此，为了成功工作，它需要以下条件：
- en: A mail session properly configured
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置正确的邮件会话
- en: A `UserInfo` class instance defined; this provides the user's e-mail address
    to notify
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义了一个 `UserInfo` 类实例；这提供了用户的电子邮件地址以供通知
- en: jBPM loads the mail session by a **Java Naming and Directory Interface** (**JNDI**)
    lookup; you can set the JNDI name through the `org.kie.mail.session` system property
    or, alternatively, provide the JNDI name `mail/jbpmMailSession` in your application
    server.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 通过 **Java 命名和目录接口** (**JNDI**) 查找来加载邮件会话；您可以通过 `org.kie.mail.session` 系统属性设置
    JNDI 名称，或者，作为替代，在您的应用程序服务器中提供 JNDI 名称 `mail/jbpmMailSession`。
- en: If no JNDI resource is found, jBPM fallbacks to a plain `email.properties` file
    loaded from the classpath.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有找到 JNDI 资源，jBPM 将回退到从类路径加载的普通 `email.properties` 文件。
- en: 'The file defines the following properties (example values are provided):'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件定义了以下属性（提供了示例值）：
- en: '[PRE42]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We covered the `UserInfo` class in [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"),
    *BPMN Constructs*.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](ch05.html "第5章。BPMN 构造")，*BPMN 构造*中介绍了 `UserInfo` 类。
- en: The TaskFluent class
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskFluent 类
- en: 'The `TaskFluent` class is a helper class that lets you conveniently configure
    and create a new `Task` instance and add it to the persistent store through the
    task service (see the `FluentTest` test class):'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskFluent` 类是一个辅助类，它允许您方便地配置和创建一个新的 `Task` 实例，并通过任务服务将其添加到持久存储（参见 `FluentTest`
    测试类）：'
- en: '[PRE43]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The WS-HumanTask specification defines the role of the administrator as the
    one who can manage the life cycle of the task, even though he might not be enlisted
    among the task potential owners. With releases older than jBPM 6, an "Administrator"
    user was created by default by jBPM.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: WS-HumanTask 规范定义了管理员的角色，即可以管理任务的生命周期，即使他可能没有被列为任务潜在的所有者。在 jBPM 6 之前的版本中，jBPM
    默认创建了一个“管理员”用户。
- en: The `addTask` operation requires you to add at least one potential business
    administrator for the task (by the `setAdminUser()` or `setAdminGroup()` method).
    The business administrator entity (user or group) is verified by the runtime with
    the current `UserGroupCallback` to check whether it exists. To check whether business
    administrators are task potential owners search the `PEOPLEASSIGNMENTS_BAS` jBPM
    database table.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`addTask` 操作要求您至少添加一个潜在的业务管理员（通过 `setAdminUser()` 或 `setAdminGroup()` 方法）。业务管理员实体（用户或组）由运行时通过当前的
    `UserGroupCallback` 进行验证，以检查其是否存在。要检查业务管理员是否是任务潜在的所有者，请搜索 `PEOPLEASSIGNMENTS_BAS`
    jBPM 数据库表。'
- en: To ease the test configuration, all our jUnit test classes are configured with
    a custom user callback, which lets all users pass (see the `MyUserCallback` class),
    so that "Administrator," "boss," or whatever makes no difference.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化测试配置，我们所有的 jUnit 测试类都配置了自定义用户回调，这使得所有用户都能通过（参见 `MyUserCallback` 类），因此“管理员”、“老板”或任何其他名称都没有区别。
- en: The runtime will evaluate the task assignments and their deadlines, and will
    store the task data; the engine assigns to the task, the initial state `CREATED`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时将评估任务分配及其截止日期，并将存储任务数据；引擎将任务分配给初始状态 `CREATED`。
- en: The `FluentTest` example shows how it is possible to programmatically create,
    add, assign, start, and complete new tasks outside the scope of a process definition
    (ad hoc tasks).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`FluentTest` 示例展示了如何在流程定义范围之外（临时任务）以编程方式创建、添加、分配、启动和完成新任务。'
- en: '`TaskFluent` lets you attach a new task to a given process instance. Since
    the new task has no incoming/outgoing connections, this could be of limited use,
    but it fits very well with ad hoc processes (see [Chapter 5](ch05.html "Chapter 5. BPMN
    Constructs"), *BPMN Constructs*), for example:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskFluent` 允许您将一个新任务附加到给定的流程实例。由于新任务没有传入/传出连接，这可能用途有限，但它非常适合临时流程（参见[第5章](ch05.html
    "第5章。BPMN 构造")，*BPMN 构造*），例如：'
- en: '[PRE44]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Audit and history logs
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计和历史日志
- en: Auditing is the ability of the engine to let the user configure the collection
    and the retrieval of events relative to the runtime process execution. We introduced
    auditing and BAM in [Chapter 4](ch04.html "Chapter 4. Operation Management"),
    *Operation Management*, and now, we are going to see how to leverage the engine
    services to implement auditing at various levels.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 审计是引擎让用户配置与运行时流程执行相关的事件收集和检索的能力。我们在[第4章](ch04.html "第4章。运营管理")，*运营管理*中介绍了审计和BAM，现在，我们将看看如何利用引擎服务在各个级别实现审计。
- en: When persistence is enabled, ready-to-use preconfigured `AuditService` (implemented
    by `JPAAuditLogService`) can be borrowed from `RuntimeEngine`; it returns process,
    node, and variable runtime audit data (see the class diagram) from the three standard
    jBPM auditing database tables (`ProcessInstanceLog`, `NodeInstanceLog`, and `VariableInstanceLog`).
    The audit service stamps each log entry with an `OwnerID` attribute, which matches
    the unique identifier of its RuntimeManager.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用持久性时，可以从 `RuntimeEngine` 中借用现成的预配置 `AuditService`（由 `JPAAuditLogService`
    实现），它返回来自三个标准 jBPM 审计数据库表（`ProcessInstanceLog`、`NodeInstanceLog` 和 `VariableInstanceLog`）的流程、节点和变量运行时审计数据（参见类图）。审计服务在每个日志条目上使用
    `OwnerID` 属性进行标记，该属性与其 RuntimeManager 的唯一标识符相匹配。
- en: '[PRE45]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This AuditService usage approach (basically as a query service) is a solution
    that can be good for BAM or history analysis; however, if we want to collect audit
    data in real-time, we have to register a listener with the KIE session (see the
    *Event listeners* section or the next section).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这种AuditService的使用方法（基本上作为一个查询服务）是一个适合BAM或历史分析的好解决方案；然而，如果我们想实时收集审计数据，我们必须在KIE会话中注册一个监听器（参见*事件监听器*部分或下一部分）。
- en: AuditLoggerFactory
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AuditLoggerFactory
- en: 'This factory can create ready-to-use JPA- or JMS-enabled audit loggers (see
    the following class diagram):'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此工厂可以创建可用的JPA-或JMS启用审计日志器（参见以下类图）：
- en: '**JPA**: A synchronous logger that by default persists the audit events between
    engine JTA transaction boundaries'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JPA**: 一个同步日志器，默认情况下在引擎JTA事务边界之间持久化审计事件'
- en: '**JMS**: Asynchronous logger aimed at JMS queue integration'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMS**: 面向JMS队列集成的异步日志器'
- en: 'Remember that the logger has to be bound to KieSession to start logging:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，日志器必须绑定到KieSession才能开始记录：
- en: '[PRE46]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can set a different EntityManager on the JPA logger by providing custom
    EntityManagerFactory to a directly instantiated (no factory) `JPAAuditLogService`
    and, optionally, choosing an auditing strategy:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向直接实例化的（无工厂）`JPAAuditLogService`提供自定义的`EntityManagerFactory`，并可选地选择一个审计策略，来在JPA日志器上设置不同的`EntityManager`：
- en: '[PRE47]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This allows us to adapt the engine logging service to our persistence layer
    configuration and transaction management: local entity manager and JTA. The main
    purpose of the strategy is to instruct jBPM to manage transactions when auditing
    in different application environments.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够将引擎日志服务适配到我们的持久层配置和事务管理：本地实体管理器和JTA。此策略的主要目的是指导jBPM在不同应用程序环境中进行审计时管理事务。
- en: 'The KIE auditing strategies are as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: KIE审计策略如下：
- en: '**KIE_SESSION**: Select this strategy when you use the entity manager only
    with KieSession (default behavior)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KIE_SESSION**: 当你仅使用KieSession的实体管理器时，请选择此策略（默认行为）'
- en: '**STANDALONE_LOCAL**: Choose this strategy when your application uses the entity
    manager outside the scope of KieSession'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STANDALONE_LOCAL**: 当你的应用程序在KieSession作用域之外使用实体管理器时，请选择此策略'
- en: '**STANDALONE_JTA**: Same as the previous strategy but uses `java:comp/UserTransaction`
    or `java:jboss/UserTransaction` to resolve the transaction (application servers
    only)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STANDALONE_JTA**: 与前一个策略相同，但使用`java:comp/UserTransaction`或`java:jboss/UserTransaction`来解析事务（仅适用于应用服务器）'
- en: 'We show the relevant classes in the following class diagram:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以下类图中展示了相关的类：
- en: '![AuditLoggerFactory](img/9578OS_06_02.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![AuditLoggerFactory](img/9578OS_06_02.jpg)'
- en: Custom logger
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义日志器
- en: To implement custom logging of audit events, you have to extend the `AbstractAuditLogger`
    class or provide a new implementation for the `ProcessEventListener` interface.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现审计事件的自定义日志记录，你必须扩展`AbstractAuditLogger`类或为`ProcessEventListener`接口提供一个新实现。
- en: 'The supported audit events are as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的审计事件如下：
- en: '[PRE48]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Events are delivered as the following `ProcessEvent` implementation classes:
    `ProcessNodeEvent`, `ProcessStartedEvent`, `ProcessCompletedEvent`, and `ProcessVariableChangedEvent`.
    In order to convert the incoming typed events to Log JPA entity classes (that
    is, `VariableInstanceLog`), you can use a helper class (`DefaultAuditEventBuilderImpl)`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 事件以以下`ProcessEvent`实现类形式传递：`ProcessNodeEvent`、`ProcessStartedEvent`、`ProcessCompletedEvent`和`ProcessVariableChangedEvent`。为了将传入的已类型化事件转换为日志JPA实体类（即`VariableInstanceLog`），你可以使用一个辅助类（`DefaultAuditEventBuilderImpl`）：
- en: '[PRE49]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Persistence and transactions
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性和事务
- en: The default persistence mechanism of the jBPM engine is based on the JPA 2/Hibernate
    implementation. Each engine operation (start process, start task, complete task,
    and so on) is run inside the scope of a transaction. `TransactionInterceptor`
    demarcates each command execution and eventually, depending on the transaction
    management used (**Container Managed Transactions** (**CMT**) or UserTransaction
    **Bean Managed Transactions** (**BMT**)), enlists the EntityManager engine in
    the ongoing transaction. We have seen how both session and task persistence works
    through `CommandService` and the interceptor architecture.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM引擎的默认持久化机制基于JPA 2/Hibernate实现。每个引擎操作（启动流程、启动任务、完成任务等）都在事务的作用域内运行。`TransactionInterceptor`标记每个命令执行，并最终根据所使用的事务管理（**容器管理事务**（**CMT**）或用户事务**Bean管理事务**（**BMT**）），将EntityManager引擎注册到当前事务中。我们已经通过`CommandService`和拦截器架构看到了会话和任务持久化的工作方式。
- en: The default engine persistence configuration boils down to the engine persistence
    unit (defined in a `persistence.xml` file configuration) and, usually, to a JTA
    datasource definition at the application server level. jBPM imposes no constraints
    on the number of entity managers defined; you can obviously have a number of persistence
    units defined in your application and make multiple entity managers coexist with
    jBPM Entity Manager. You can have a single database (single Entity Manager) for
    both jBPM and your application persistence layer or a dedicated jBPM database
    (and Entity Manager) and make the engine participate in your business application
    transactions.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的引擎持久化配置归结为引擎持久化单元（在 `persistence.xml` 文件配置中定义）以及通常在应用服务器级别的JTA数据源定义。jBPM不对定义的实体管理器数量施加任何限制；你显然可以在你的应用程序中定义多个持久化单元，并使多个实体管理器与jBPM实体管理器共存。你可以为jBPM和你的应用程序持久化层使用单个数据库（单个实体管理器），或者使用专门的jBPM数据库（和实体管理器），并使引擎参与你的业务应用程序事务。
- en: Note
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[Chapter 8](ch08.html "Chapter 8. Integrating jBPM with Enterprise Architecture"),
    *Integrating jBPM with Enterprise Architecture*, of the jBPM 6.2 user guide explains
    the detailed configuration and usage of transactions.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。与企业架构集成jBPM"), *与企业架构集成jBPM*，的jBPM 6.2用户指南详细解释了事务的配置和使用。'
- en: Local transactions with Bitronix
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bitronix进行本地事务
- en: 'We are going to see a complete jBPM persistence example configuration using
    local transactions. Bitronix is an open source Transaction Manager framework;
    it supports JTA API and the **Extended Architecture** (**XA**) protocol and perfectly
    fits all cases where a straightforward persistence configuration is needed. The
    required configuration steps are as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个使用本地事务的完整的jBPM持久化示例配置。Bitronix是一个开源的事务管理器框架；它支持JTA API和**扩展架构**（**XA**）协议，非常适合需要直接持久化配置的所有情况。所需的配置步骤如下：
- en: 'Create the datasource (pooled): The datasource will be bound to the `jdbc/localjbpm-ds`
    JNDI name as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据源（池化）：数据源将被绑定到 `jdbc/localjbpm-ds` JNDI名称如下：
- en: '[PRE50]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create the `jndi.properties` file in your classpath resources, which includes
    the following code:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的类路径资源中创建 `jndi.properties` 文件，其中包含以下代码：
- en: '[PRE51]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This lets Bitronix context factory initialize the environment and bind transaction
    service objects to default JNDI names, notably the following:'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得Bitronix上下文工厂初始化环境并将事务服务对象绑定到默认JNDI名称，特别是以下名称：
- en: User transaction manager at `java:comp/UserTransaction`
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户事务管理器位于 `java:comp/UserTransaction`
- en: Tx synchronization registry at `java:comp/TransactionSynchronizationRegistry`
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务同步注册表位于 `java:comp/TransactionSynchronizationRegistry`
- en: 'Edit your `persistence.xml` file, specifying the Bitronix datasource name as
    follows:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 `persistence.xml` 文件，指定Bitronix数据源名称如下：
- en: '[PRE52]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, you can create your `EntityManagerFactory` as follows:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以按照以下方式创建你的 `EntityManagerFactory`：
- en: '[PRE53]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Managing transactions
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理事务
- en: jBPM provides an out-of-the-box transactional service to an enterprise application,
    which is able to participate in the existing transaction right from the calling
    application, so in case of an error (for example, a custom workitem handler throws
    an exception or a process node script fails), the engine transaction is marked
    for rollback and the exception is sent to the caller.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM为企业的应用程序提供了一个现成的交易服务，它能够从调用应用程序开始参与现有的事务，因此，在发生错误的情况下（例如，自定义工作项处理器抛出异常或流程节点脚本失败），引擎事务将被标记为回滚，并将异常发送给调用者。
- en: 'Let us now see a common example of **Entity Manager** (**EM**) and jBPM (managed
    by Bitronix) working together (please refer to the `AuditTxTest` test class):'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个常见的例子，**实体管理器**（**EM**）和jBPM（由Bitronix管理）是如何一起工作的（请参阅 `AuditTxTest` 测试类）：
- en: '[PRE54]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Locking
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 锁定
- en: 'The default JPA transaction locking scheme used is optimistic. If you need
    to switch to a pessimistic locking mode, set the following parameter to `TRUE`
    in your `org.kie.api.runtime.Environment` instance:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 默认使用的JPA事务锁定方案是乐观的。如果你需要切换到悲观锁定模式，请将你的 `org.kie.api.runtime.Environment` 实例中的以下参数设置为
    `TRUE`：
- en: '[PRE55]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This forces the engine to hold the lock on an entity (locking of type `LockModeType.PESSIMISTIC_FORCE_INCREMENT`)
    to ensure that the object is not modified.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这迫使引擎在实体上保持锁（锁定类型为 `LockModeType.PESSIMISTIC_FORCE_INCREMENT`），以确保对象没有被修改。
- en: '![Locking](img/9578OS_06_07.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![锁定](img/9578OS_06_07.jpg)'
- en: Summary
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this chapter, we took an extensive tour to the core engine components and
    services, not disregarding some of the engine inner implementation details. You
    should now be able to understand how the engine works and what happens "behind
    the curtains" when you use a specific engine feature.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对核心引擎组件和服务进行了广泛的探索，并未忽视一些引擎内部实现细节。现在您应该能够理解引擎是如何工作的，以及当您使用特定引擎功能时“幕后”发生了什么。
- en: The next chapter will deal with the engine customization and extension process
    in order to tailor the jBPM system features to your solution.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍引擎定制和扩展过程，以便将 jBPM 系统功能调整到您的解决方案。
