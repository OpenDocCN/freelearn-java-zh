- en: Chapter 1. Preparing Your Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。准备您的开发环境
- en: This chapter will install and configure your development environment. The **Rapid
    Application Development** (**RAD**) tool is **NetBeans**, an open source, cross-platform
    **Integrated Development Environment** (**IDE**) that can be used for creating
    visual desktop, mobile, web, and **Service-Oriented Architecture** (**SOA**) applications.
    NetBeans officially supports Java, PHP, JavaScript, and C/C++ programming languages,
    but it is best known for providing a complete toolset for all the latest **Java
    Enterprise Edition** (**Java EE**) standards (currently Java EE 7).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将安装和配置您的开发环境。**快速应用开发**（**RAD**）工具是**NetBeans**，这是一个开源的、跨平台的**集成开发环境**（**IDE**），可用于创建视觉桌面、移动、Web和**面向服务的体系结构**（**SOA**）应用程序。NetBeans官方支持Java、PHP、JavaScript和C/C++编程语言，但它以为所有最新的**Java企业版**（**Java
    EE**）标准提供了完整的工具集而闻名（目前是Java EE 7）。
- en: The database of choice for this book is MySQL, the world's most widely used
    open source **Relational Database Management System** (**RDBMS**). MySQL is the
    most popular choice of database for web applications hosted on Linux platforms
    and continues to deliver outstanding performance in a multitude of applications.
    Its small footprint and ease of use makes it perfect for development use on a
    single computer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书选择的数据库是MySQL，这是世界上最广泛使用的开源**关系数据库管理系统**（**RDBMS**）。MySQL是Linux平台上托管的Web应用程序的最受欢迎的数据库选择，并且在多种应用程序中继续提供出色的性能。其小巧的占用空间和易用性使其非常适合在单台计算机上进行开发使用。
- en: The application server used in this book is **GlassFish 4**, which comes bundled
    with the NetBeans download. GlassFish is installed as part of the NetBeans installation,
    and the tight integration between the two makes configuring GlassFish a simple
    process. GlassFish is an open source, production-quality application server that
    implements all the Java EE 7 features. It has enterprise-grade reliability and
    is considered by many to be the best open source application server available.
    GlassFish 4 is the **Reference Implementation** (**RI**) for the Java EE 7 specification,
    a full description of which can be found at [https://glassfish.java.net/downloads/ri/](https://glassfish.java.net/downloads/ri/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用的应用服务器是**GlassFish 4**，它与NetBeans捆绑在一起。GlassFish作为NetBeans安装的一部分进行安装，两者之间的紧密集成使得配置GlassFish变得简单。GlassFish是一个开源的、生产级的应用服务器，实现了所有的Java
    EE 7特性。它具有企业级的可靠性，并被许多人认为是最好的开源应用服务器。GlassFish 4是Java EE 7规范的**参考实现**（**RI**），完整的描述可以在[https://glassfish.java.net/downloads/ri/](https://glassfish.java.net/downloads/ri/)找到。
- en: All of these development tools are freely available for PC, Mac, and Linux.
    Each tool has extensive examples, comprehensive tutorials, and online support
    forums available.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些开发工具都可以免费在PC、Mac和Linux上使用。每个工具都有大量的示例、全面的教程和在线支持论坛可供使用。
- en: It should be noted that although this chapter focuses on NetBeans, MySQL, and
    GlassFish, it is possible for you to configure any appropriate combination of
    tools that they are familiar with. The development tasks outlined in this book
    can just as easily be followed using Eclipse, Oracle, and JBoss—although some
    described configuration details may require minor modifications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管本章重点介绍了NetBeans、MySQL和GlassFish，但读者可以根据自己熟悉的工具配置任何合适的组合。本书中概述的开发任务同样可以使用Eclipse、Oracle和JBoss来完成，尽管一些描述的配置细节可能需要进行微小的修改。
- en: 'In this chapter, we will perform the following tasks:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将执行以下任务：
- en: Install the MySQL Database server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装MySQL数据库服务器
- en: Install the Java SDK
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Java SDK
- en: Install and configure the NetBeans IDE
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置NetBeans IDE
- en: Create the application project and explore Maven
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用项目并探索Maven
- en: Run the project in GlassFish
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GlassFish中运行项目
- en: Installing MySQL
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MySQL
- en: MySQL can be downloaded from [http://www.mysql.com/downloads/mysql](http://www.mysql.com/downloads/mysql).
    Select the appropriate MySQL Community server for your operating system and architecture.
    It is important to follow the instructions, making note of installation directories
    and paths for future reference. After downloading and running the setup file,
    you should select the **Developer Default** installation for this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL可以从[http://www.mysql.com/downloads/mysql](http://www.mysql.com/downloads/mysql)下载。选择适合您操作系统和架构的MySQL社区服务器。重要的是要遵循说明，注意安装目录和路径以备将来参考。下载并运行安装文件后，您应该选择本书的**开发者默认**安装。
- en: '![Installing MySQL](img/5457_01_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](img/5457_01_01.jpg)'
- en: Choosing the default settings is best unless you are familiar with MySQL. This
    will include setting the default port to `3306`, enabling TCP/IP networking, and
    opening the required firewall port for network access (not strictly required for
    a developer machine where all apps are running on the same environment, but required
    if you are configuring a dedicated MySQL server).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您熟悉MySQL，否则最好选择默认设置。这将包括将默认端口设置为`3306`，启用TCP/IP网络，并打开所需的防火墙端口以进行网络访问（在所有应用程序都在同一环境上运行的开发机器上并不是严格要求的，但如果您正在配置专用的MySQL服务器，则是必需的）。
- en: Regardless of the environment, it is important to set a root user password during
    the installation process. We will use the root user to connect to the running
    MySQL server to execute commands.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无论环境如何，在安装过程中设置root用户密码是很重要的。我们将使用root用户连接到运行的MySQL服务器来执行命令。
- en: '![Installing MySQL](img/5457_01_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![安装MySQL](img/5457_01_02.jpg)'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The rest of this book will assume the root user has the password `adminadmin`.
    This is not a very secure password but should be easy to remember!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分将假定root用户的密码为`adminadmin`。这不是一个非常安全的密码，但应该很容易记住！
- en: We recommend that the MySQL server is configured to start when the operating
    system starts. How this is done will depend on your environment, but it is usually
    performed at the end of the **Initial Configuration** action. Windows users will
    have the option to start the MySQL server at system startup. Mac users will need
    to install the **MySQL Startup Item** after the server has been installed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议将MySQL服务器配置为在操作系统启动时启动。如何完成此操作将取决于您的环境，但通常是在“初始配置”操作的最后执行的。Windows用户将有选项在系统启动时启动MySQL服务器。Mac用户需要在安装服务器后安装**MySQL启动项**。
- en: Should you decide not to start MySQL when the operating system starts, you will
    need to start the MySQL server manually whenever required. How this is done will
    once again depend on your environment, but you should start your server now to
    confirm that the installation was successful.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定不在操作系统启动时启动MySQL，则需要在需要时手动启动MySQL服务器。如何完成此操作将再次取决于您的环境，但您现在应该启动服务器以确认安装成功。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unix and Linux users will need to install MySQL as appropriate for their operating
    system. This may include the use of **Advanced Packaging Tool (APT**) or **Yet
    another Setup Tool** (**YaST**), or even the installation of MySQL from source.
    There are detailed instructions for various operating systems found at [http://dev.mysql.com/doc/refman/5.7/en/installing.html](http://dev.mysql.com/doc/refman/5.7/en/installing.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Unix和Linux用户需要根据其操作系统安装MySQL。这可能包括使用高级包装工具（APT）或另一个安装工具（YaST），甚至从源代码安装MySQL。有关各种操作系统的详细说明，请参见[http://dev.mysql.com/doc/refman/5.7/en/installing.html](http://dev.mysql.com/doc/refman/5.7/en/installing.html)。
- en: At the end of the configuration process, you will have a running MySQL server
    ready to be used in [Chapter 2](ch02.html "Chapter 2. The Task Time Tracker Database"),
    *The Task Time Tracker Database*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置过程结束时，您将拥有一个运行的MySQL服务器，可以在[第2章](ch02.html "第2章。任务时间跟踪器数据库")中使用，*任务时间跟踪器数据库*。
- en: Installing the Java SE Development Kit (JDK)
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Java SE开发工具包（JDK）
- en: The **Java** **SE Development Kit** (**JDK**) can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    You may choose to skip this step if you already have the JDK 7 Update 45 (or later)
    installed on your system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)下载Java
    SE开发工具包（JDK）。如果您的系统已安装了JDK 7 Update 45（或更高版本），则可以选择跳过此步骤。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not select the NetBeans bundle as it does not contain the GlassFish server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不要选择NetBeans捆绑包，因为它不包含GlassFish服务器。
- en: '![Installing the Java SE Development Kit (JDK)](img/5457_01_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![安装Java SE开发工具包（JDK）](img/5457_01_03.jpg)'
- en: You will need to accept the JDK 7 License Agreement before selecting the appropriate
    distribution. After downloading the JDK, run the setup program and follow the
    instructions and prompts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择适当的发行版之前，您需要接受JDK 7许可协议。下载JDK后，运行安装程序并按照说明和提示操作。
- en: Installing the NetBeans IDE
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装NetBeans IDE
- en: NetBeans can be downloaded from [https://netbeans.org/downloads/](https://netbeans.org/downloads/).
    The distribution requires a valid JDK to be already installed on your platform.
    At the time of this writing, I used JDK 7 Update 45, but any JDK 7 (or higher)
    version would be fine. There are several distribution bundles; you will need to
    select the **Java EE** bundle.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans可以从[https://netbeans.org/downloads/](https://netbeans.org/downloads/)下载。该发行版要求在您的平台上已安装有效的JDK。在撰写本文时，我使用了JDK
    7 Update 45，但任何JDK 7（或更高版本）都可以。有几个发行版捆绑包；您需要选择**Java EE**捆绑包。
- en: '![Installing the NetBeans IDE](img/5457_01_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![安装NetBeans IDE](img/5457_01_04.jpg)'
- en: The latest version at the time of this writing was NetBeans 7.4, which introduced
    significant new features, including extended HTML5 and JavaScript support. For
    the first time, NetBeans also included editing and code completion support for
    the Ext JS framework.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写本文时的最新版本是NetBeans 7.4，引入了重要的新功能，包括扩展的HTML5和JavaScript支持。首次，NetBeans还包括对Ext
    JS框架的编辑和代码完成支持。
- en: 'To install the software, simply download and follow the detailed instructions
    available from the NetBeans website. This will take you through a sequence of
    setup screens as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装软件，只需从NetBeans网站下载并按照详细说明进行操作。这将带您通过以下一系列设置屏幕：
- en: The GlassFish 4 server is automatically selected. You do not need to install
    Tomcat.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GlassFish 4服务器会自动选择。您无需安装Tomcat。
- en: Accept the terms in the license agreement.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受许可协议中的条款。
- en: Accept the terms of the JUnit license agreement. JUnit is used for testing in
    [Chapter 5](ch05.html "Chapter 5. Testing the DAO Layer with Spring and JUnit"),
    *Testing the DAO Layer with Spring and JUnit*.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受JUnit许可协议的条款。JUnit用于[第5章](ch05.html "第5章。使用Spring和JUnit测试DAO层")中的测试，*使用Spring和JUnit测试DAO层*。
- en: Note the installation path of the NetBeans IDE for future reference. Select
    the appropriate JDK that was installed previously (if there is more than one JDK
    on your system).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意NetBeans IDE的安装路径以备将来参考。选择先前安装的适当JDK（如果系统上有多个JDK）。
- en: Note the installation path for the GlassFish 4 server for future reference.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意GlassFish 4服务器的安装路径以备将来参考。
- en: The final screen summarizes the installation. Ensure to **Check for Updates**
    before clicking on **Install** to start the process.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终屏幕总结了安装过程。在单击**安装**开始过程之前，请务必**检查更新**。
- en: The process may take several minutes depending on your platform and hardware.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程可能需要几分钟，具体取决于您的平台和硬件。
- en: 'When the installation is complete, you can run NetBeans for the first time.
    If you had a previous version of NetBeans installed, you may be prompted to **Import
    Settings**. The default opening screen will then be displayed as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以首次运行NetBeans。如果您之前安装过NetBeans的版本，则可能会提示您**导入设置**。然后默认的开放屏幕将显示如下：
- en: '![Installing the NetBeans IDE](img/5457_01_06.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![安装NetBeans IDE](img/5457_01_06.jpg)'
- en: 'The most useful panels can now be opened from the menu:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以从菜单中打开最有用的面板：
- en: '**Projects**: This panel is the main entry point to your project sources. It
    shows a logical view of important project content, grouped into appropriate contexts.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：此面板是项目源的主要入口点。它显示了重要项目内容的逻辑视图，分组到适当的上下文中。'
- en: '**Files**: This panel shows the actual file structure of the project node as
    it exists on your filesystem.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：此面板显示项目节点在文件系统上的实际文件结构。'
- en: '**Services**: This panel displays your runtime resources. It shows a logical
    view of important runtime resources such as the servers and databases that are
    registered with the IDE.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：此面板显示您的运行时资源。它显示了重要的运行时资源的逻辑视图，如与IDE注册的服务器和数据库。'
- en: 'At this stage, the first two panels will be empty but the **Services** panel
    will have several entries. Opening the **Servers** panel will display the installed
    GlassFish 4 Server as seen in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，前两个面板将是空的，但**服务**面板将有几个条目。打开**服务器**面板将显示安装的GlassFish 4服务器，如下截图所示：
- en: '![Installing the NetBeans IDE](img/5457_01_07.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![安装NetBeans IDE](img/5457_01_07.jpg)'
- en: Introducing Maven
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Maven
- en: 'Apache Maven is a tool that is used for building and managing Java-based projects.
    It is an open source project hosted at [http://maven.apache.org](http://maven.apache.org)
    and comes bundled with the NetBeans IDE. Maven simplifies many steps common to
    all Java development projects and provides numerous features, including the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Maven是一个用于构建和管理基于Java的项目的工具。它是一个开源项目，托管在[http://maven.apache.org](http://maven.apache.org)，并与NetBeans
    IDE捆绑在一起。Maven简化了所有Java开发项目中常见的许多步骤，并提供了许多功能，包括以下内容：
- en: 'The provision of convention over configuration. Maven comes with a series of
    predefined targets for performing certain well-defined tasks including compilation,
    testing, and packaging of projects. All tasks are managed through a single configuration
    file: `pom.xml`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供约定优于配置。Maven带有一系列预定义的目标，用于执行某些明确定义的任务，包括项目的编译、测试和打包。所有任务都通过单个配置文件`pom.xml`管理。
- en: A consistent coding structure and project framework. Each Maven project has
    the same directory structure and location for source files, test files, build
    files, and project resources. This common structure brings us easily up to speed
    with projects.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致的编码结构和项目框架。每个Maven项目都具有相同的目录结构和源文件、测试文件、构建文件和项目资源的位置。这种共同的结构使我们能够轻松地了解项目。
- en: A consistent build system with numerous plugins to make common tasks easy.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个一致的构建系统，具有许多插件，使常见任务变得容易。
- en: The ability to execute tests as part of the build process.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为构建过程的一部分执行测试的能力。
- en: A highly flexible and powerful dependency management system. This allows software
    developers to publish information and share Java libraries through (external or
    remote) Maven repositories hosted on the Internet. Libraries are then downloaded
    and cached locally by Maven for use in the project.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个高度灵活和强大的依赖管理系统。这允许软件开发人员通过（外部或远程）Maven仓库在互联网上发布信息和共享Java库。然后Maven会将这些库下载并在本地缓存，以供项目使用。
- en: We encourage you to visit the Maven website to explore the many features available.
    NetBeans will use Maven to create and manage the web application project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您访问Maven网站，探索其中提供的许多功能。NetBeans将使用Maven来创建和管理Web应用程序项目。
- en: Creating the Maven Web Application project
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Maven Web应用程序项目
- en: 'A NetBeans project encapsulates all the source code and related components
    required to maintain and develop an application. Navigate to **File** | **New
    Project** from the menu to start the process:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans项目封装了维护和开发应用程序所需的所有源代码和相关组件。从菜单中导航到**文件** | **新建项目**开始这个过程：
- en: '![Creating the Maven Web Application project](img/5457_01_08.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![创建Maven Web应用程序项目](img/5457_01_08.jpg)'
- en: 'Select **Maven** in the **Categories** listing and **Web Application** from
    the **Projects** listing, as shown in the preceding screenshot, before selecting
    the **Next** button. This will present you with the project configuration screen
    with the following fields:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在**类别**列表中选择**Maven**，在**项目**列表中选择**Web应用程序**，如前面的截图所示，然后选择**下一步**按钮。这将呈现给您项目配置屏幕，其中包括以下字段：
- en: '**Project Name**: This specifies the display name of the project in the project
    window. This name is also used to create the project folder and must not contain
    spaces.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目名称**：这指定了项目在项目窗口中的显示名称。这个名称也用于创建项目文件夹，不能包含空格。'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Our project is called Task Time Tracker. This tool will allow users to manage
    the time spent on different tasks for different projects. The project name field
    is the lowercase, nonspaced translation of the name of the project: `task-time-tracker`.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目名为Task Time Tracker。这个工具将允许用户管理不同项目的不同任务所花费的时间。项目名称字段是项目名称的小写、无空格的翻译：`task-time-tracker`。
- en: '**Project Location**: This specifies the filesystem root folder where you want
    to store the project metadata and source code. We normally create a project-specific
    folder at the root level of a drive, rather than burying it deep within a folder
    structure under NetBeans. This makes it easier to find and copy files into the
    project.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目位置**：这指定了您想要存储项目元数据和源代码的文件系统根文件夹。我们通常会在驱动器的根级别创建一个特定于项目的文件夹，而不是将其深埋在NetBeans下的文件夹结构中。这样可以更容易地找到并将文件复制到项目中。'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Windows users should create a project folder under `c:\projects`. Mac users
    may wish to replace this with `/Users/{username}/projects` and Unix users with
    `/home/{username}/projects`. The rest of the book will refer to this location
    in all examples as *the project folder*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户应在`c:\projects`下创建一个项目文件夹。Mac用户可以用`/Users/{username}/projects`替换这个位置，Unix用户可以用`/home/{username}/projects`替换。本书的其余部分将在所有示例中引用这个位置为*项目文件夹*。
- en: '**Project Folder**: The project folder is read-only and generated based on
    the name of the project and the project location.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目文件夹**：项目文件夹是只读的，根据项目名称和项目位置生成。'
- en: '**Artifact Id**: This is a read-only Maven-specific property to identify the
    project and is based on the project name.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Artifact Id**：这是一个只读的Maven特定属性，用于标识项目，基于项目名称。'
- en: '**Group Id**: This is another Maven property that represents a top-level container
    for multiple artifacts. It usually represents the **Top-Level Domain** (**TLD**)
    of the organization owning the project.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Group Id**：这是另一个Maven属性，表示多个构件的顶级容器。它通常代表拥有项目的组织的**顶级域**（**TLD**）。'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Group Id** for the project is `com.gieman`, the company of the author.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的**Group Id**是`com.gieman`，作者的公司。
- en: '**Version**: This is another Maven property that represents the version of
    the artifact. The default version is **1.0-SNAPSHOT**, which we will change to
    `1.0`. As projects evolve and new versions are released, Maven will keep track
    of the different builds based on their versions.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：这是另一个Maven属性，表示构件的版本。默认版本是**1.0-SNAPSHOT**，我们将其更改为`1.0`。随着项目的发展和发布新版本，Maven将根据它们的版本跟踪不同的构建。'
- en: '**Package**: The IDE will automatically create a Java source package structure
    based on this field. We will use the package `com.gieman.tttracker`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包**：IDE将根据此字段自动创建基于Java源包的结构。我们将使用包`com.gieman.tttracker`。'
- en: 'You should now have entered the following project details:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该已经输入了以下项目详细信息：
- en: '![Creating the Maven Web Application project](img/5457_01_09.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建Maven Web应用程序项目](img/5457_01_09.jpg)'
- en: 'Click on the **Next** button to view the final screen. Do not change the default
    GlassFish Server 4.0 and Java EE 7 settings before clicking on the **Finish**
    button. You will now see activity in the **Project Creation** output tab as the
    project is created and configured. Opening the **Project** and **Files** panels
    will allow you to see the project structure:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮查看最终屏幕。在单击**完成**按钮之前，不要更改默认的GlassFish Server 4.0和Java EE 7设置。现在您将在**项目创建**输出选项卡中看到活动，因为项目正在创建和配置。打开**项目**和**文件**面板将允许您查看项目结构：
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: '![Creating the Maven Web Application project](img/5457_01_10.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![创建Maven Web应用程序项目](img/5457_01_10.jpg)'
- en: 'Right-clicking on the project name in either tab will allow you to select the
    **Properties** for the project. This will display all properties and paths relevant
    to the project under different categories:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在任一选项卡中右键单击项目名称将允许您选择项目的**属性**。这将显示与项目相关的所有属性和路径，分别属于不同的类别：
- en: '![Creating the Maven Web Application project](img/5457_01_12.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![创建Maven Web应用程序项目](img/5457_01_12.jpg)'
- en: You should not need to change these properties for the remainder of the book.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要在本书的其余部分更改这些属性。
- en: Understanding the POM and dependency management
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解POM和依赖管理
- en: 'Each Maven project has a `pom.xml` configuration file at the root level of
    the NetBeans project. Click on the **Files** view and double-click on the `pom.xml`
    file to open it in the editor:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Maven项目在NetBeans项目的根级别都有一个`pom.xml`配置文件。点击**文件**视图，双击`pom.xml`文件以在编辑器中打开它：
- en: '![Understanding the POM and dependency management](img/5457_01_13.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![理解POM和依赖管理](img/5457_01_13.jpg)'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should see the **Navigator** window open in the bottom-left panel. This
    displays an outline of the file being edited and is very helpful when navigating
    through large files. Double-clicking on a node in the **Navigator** will position
    the cursor at the appropriate line in the editor.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到**导航器**窗口在左下角面板中打开。这显示了正在编辑的文件的大纲，在浏览大文件时非常有帮助。在**导航器**中双击节点将会将光标定位到编辑器中的适当行。
- en: If the **Navigator** window does not open (or has been closed), you can open
    it manually by navigating to **Window** | **Navigating** | **Navigator** from
    the menu.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**导航器**窗口没有打开（或已关闭），您可以通过从菜单导航到**窗口** | **导航** | **导航器**来手动打开它。
- en: 'The **Project Object Model (POM**) fully defines the project and all required
    Maven properties and build behaviors. There is only one dependency shown in `pom.xml`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目对象模型（POM）**完全定义了项目和所有必需的Maven属性和构建行为。`pom.xml`中只显示了一个依赖项：'
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This dependency identifies that the project requires Java EE 7 for building.
    This entry ensures the full Java EE 7 APIs are available for Java coding in the
    Task Time Tracker project. Our project also requires the Spring Framework, which
    must now be added as additional dependencies. Typing in the editor will result
    in autocompletion help to determine the correct dependencies. After adding the
    Spring Framework `groupId` and `artifactId` entries, as shown in the following
    screenshot, the *Ctrl* + Space bar keyboard shortcut will open the available matching
    entries for the `artifactId` starting with the text `spring`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个依赖项标识了项目构建所需的Java EE 7。这个条目确保了完整的Java EE 7 API在任务时间跟踪项目中可用于Java编码。我们的项目还需要Spring框架，现在必须将其添加为额外的依赖项。在编辑器中输入时，将会出现自动补全帮助来确定正确的依赖项。在添加Spring框架的`groupId`和`artifactId`条目后，如下截图所示，按下*Ctrl*
    +空格键盘快捷键将打开以文本`spring`开头的`artifactId`的可用匹配条目：
- en: '![Understanding the POM and dependency management](img/5457_01_14.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![理解POM和依赖管理](img/5457_01_14.jpg)'
- en: 'If this autocomplete list is not available, it may be due to the Maven repository
    being indexed for the first time. In this situation you will then see the following
    screenshot at the bottom of the editor:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此自动完成列表不可用，可能是因为Maven仓库首次进行索引。在这种情况下，您将在编辑器底部看到以下截图：
- en: '![Understanding the POM and dependency management](img/5457_01_24.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![理解POM和依赖管理](img/5457_01_24.jpg)'
- en: Be patient and in a few minutes the indexing will be finished and the autocomplete
    will become available. Indexing is required to download available entries from
    the Maven repository.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 耐心等待几分钟，索引将完成，自动完成将变为可用。索引是从Maven仓库下载可用条目所必需的。
- en: 'The required Spring Framework components are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Spring框架组件如下：
- en: '`spring-context`: This is the central artifact required for Spring''s dependency
    injection container'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-context`：这是Spring的依赖注入容器所需的中心构件'
- en: '`spring-tx`: This is the transaction management abstraction required for implementing
    transactional behavior'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-tx`：这是实现事务行为所需的事务管理抽象'
- en: '`spring-context-support`: These are various application context utilities,
    including Ehcache, JavaMail, Quartz, and FreeMarker integration'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-context-support`：这些是各种应用程序上下文实用程序，包括Ehcache、JavaMail、Quartz和FreeMarker集成'
- en: '`spring-jdbc`: This is the JDBC data access library'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-jdbc`：这是JDBC数据访问库'
- en: '`spring-orm`: This is the **Object-to-Relation-Mapping** (**ORM**) integration
    for JPA development'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-orm`：这是用于JPA开发的**对象-关系映射**（**ORM**）集成'
- en: '`spring-instrument`: This is for the weaving of classes'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-instrument`：用于类的编织'
- en: '`spring-webmvc`: This is the **Spring Model-View-Controller** (**MVC**) for
    Servlet environments'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-webmvc`：这是用于Servlet环境的**Spring模型-视图-控制器**（**MVC**）'
- en: '`spring-test`: This is the support for testing Spring applications with JUnit'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test`：这是用于使用JUnit测试Spring应用程序的支持'
- en: 'To add these dependencies using the latest Spring release version (3.2.4) requires
    the following additions to the `pom.xml` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用最新的Spring发布版本（3.2.4）添加这些依赖项，需要对`pom.xml`文件进行以下添加：
- en: '[PRE1]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Understanding dependency scope
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解依赖范围
- en: The final Spring Framework dependency is only required for testing. We can define
    this by adding a `scope` attribute with value `test`. This tells Maven that the
    dependency is only required when running the testing phase of the build and is
    not required for deployment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个Spring框架依赖项仅在测试时才需要。我们可以通过添加`scope`属性并将其值设置为`test`来定义这一点。这告诉Maven该依赖项仅在运行构建的测试阶段时才需要，并且不需要部署。
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `javaee-web-api` dependency that was automatically created by NetBeans has
    a scope of `provided`. This means the dependency is not required for deployment
    and is provided by the target server. The GlassFish 4 server itself is the provider
    of this dependency.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans自动生成的`javaee-web-api`依赖项的范围为`provided`。这意味着该依赖项不需要部署，并且由目标服务器提供。GlassFish
    4服务器本身是该依赖项的提供者。
- en: If the `scope` attribute has not been included, the dependency JAR will be included
    in the final build. This is the equivalent of providing a scope entry of `compile`.
    As a result, all the Spring Framework dependency JARs will be included in the
    final build file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有包含`scope`属性，依赖的JAR将包含在最终构建中。这相当于提供`compile`范围的条目。因此，所有Spring框架依赖的JAR将包含在最终构建文件中。
- en: A full explanation of the Maven dependency mechanism and scoping can be found
    at [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Maven依赖机制和范围的详细解释，请参阅[http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)。
- en: Defining Maven properties
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义Maven属性
- en: 'The Spring Framework dependencies defined in `pom.xml` all have the same version
    (3.2.4.RELEASE). This duplication is not ideal, especially when we wish to upgrade
    to a newer version at a later time. Changes would be required in multiple places,
    one for each Spring dependency. A simple solution is to add a property to hold
    the release version value as shown in the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pom.xml`中定义的Spring框架依赖项都具有相同的版本（3.2.4.RELEASE）。这种重复不理想，特别是当我们希望在以后升级到新版本时。需要在多个地方进行更改，每个Spring依赖项都需要更改一次。一个简单的解决方案是添加一个属性来保存发布版本值，如下所示：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This custom property, which we have named `spring.version`, can now be used
    to replace the multiple duplicates as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用这个自定义属性`spring.version`来替换多个重复项，如下所示：
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `${spring.version}` placeholder will then be substituted with the `properties`
    value during the build process.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在构建过程中，`${spring.version}`占位符将被替换为`properties`的值。
- en: Understanding Maven-build plugins
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Maven构建插件
- en: The Maven build process executes each defined build plugin during the appropriate
    build phase. A full list of build plugins can be found at [http://maven.apache.org/plugins/index.html](http://maven.apache.org/plugins/index.html).
    We will introduce plugins as needed in subsequent chapters, but the default plugins
    created by the NetBeans IDE are of interest now.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Maven构建过程在适当的构建阶段执行每个定义的构建插件。可以在[http://maven.apache.org/plugins/index.html](http://maven.apache.org/plugins/index.html)找到构建插件的完整列表。我们将在后续章节中根据需要介绍插件，但现在我们对NetBeans
    IDE创建的默认插件感兴趣。
- en: 'The `maven-compiler-plugin` controls and executes the compilation of Java source
    files. This plugin allows you to specify both the `source` and `target` Java versions
    for compilation as shown in the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-compiler-plugin`控制并执行Java源文件的编译。该插件允许您指定编译的`source`和`target` Java版本，如下所示：'
- en: '[PRE5]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Changing these values to `1.6` may be required when compiling projects for older
    Java servers running on the earlier versions of Java.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在为旧的Java服务器编译项目时，可能需要将这些值更改为`1.6`。
- en: 'The `maven-war-plugin` builds a WAR file for the project as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-war-plugin`为项目构建WAR文件，如下所示：'
- en: '[PRE6]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The default generated WAR filename is `{artifactId}-{version}.war`, which can
    be changed by including the `warName` configuration property. We will be adding
    properties to this plugin when building the project for production release in
    the final chapter. A full list of `maven-war-plugin` options may be found at [http://maven.apache.org/plugins/maven-war-plugin/war-mojo.html](http://maven.apache.org/plugins/maven-war-plugin/war-mojo.html).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 默认生成的WAR文件名是`{artifactId}-{version}.war`，可以通过包含`warName`配置属性来更改。在最后一章中，我们将在为生产发布构建项目时向此插件添加属性。`maven-war-plugin`选项的完整列表可以在[http://maven.apache.org/plugins/maven-war-plugin/war-mojo.html](http://maven.apache.org/plugins/maven-war-plugin/war-mojo.html)找到。
- en: 'The `maven-dependency-plugin` copies dependency JAR files to the defined output
    directory as shown in the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-dependency-plugin`将依赖的JAR文件复制到定义的输出目录，如下所示：'
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is useful to see which JARs are used by the project and to identify what
    transitive dependencies are required (dependencies of dependencies).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于查看项目使用了哪些JAR，并识别所需的传递依赖（依赖的依赖）非常有用。
- en: 'We will modify this plugin to copy all compile-time dependencies of the project
    to a directory in `${project.build.directory}`. This special build directory is
    under the root folder of the project and is named `target`, the target destination
    of the build process. The updated entry will now look as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改此插件，将项目的所有编译时依赖项复制到`${project.build.directory}`中的目录。这个特殊的构建目录位于项目的根文件夹下，名为`target`，是构建过程的目标目的地。更新后的条目现在如下所示：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we are now performing two executions in the single plugin, each execution
    needs its own `<id>`. The second execution, with ID `copy-all-dependencies`, will
    copy all dependent JARs with the scope `compile` to the `target/lib` directory.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在在单个插件中执行两个执行，每个执行都需要自己的`<id>`。第二个执行，ID为`copy-all-dependencies`，将把所有依赖的JAR（范围为`compile`）复制到`target/lib`目录中。
- en: Executing the Maven build
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行Maven构建
- en: 'The simplest way to execute a build is to click on the **Clean and Build Project**
    button in the toolbar. You can also right-click on the project node in the **Projects**
    tab and select **Clean and Build** from the menu. The build process will then
    execute each defined phase in the POM, resulting in Java code compilation, dependency
    resolution (and copying), and finally, WAR file generation. Opening the target
    directory structure will display the build result as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 执行构建的最简单方法是单击工具栏中的**清理和构建项目**按钮。您还可以在**项目**选项卡中右键单击项目节点，然后从菜单中选择**清理和构建**。然后，构建过程将执行POM中定义的每个阶段，导致Java代码编译，依赖项解析（和复制），最后生成WAR文件。打开目标目录结构将显示构建结果，如下所示：
- en: '![Executing the Maven build](img/5457_01_15.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![执行Maven构建](img/5457_01_15.jpg)'
- en: Even though we have not written a single line of code, the generated WAR file
    `task-time-tracker-1.0.war` can now be deployed to the GlassFish server.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们还没有写一行代码，但生成的WAR文件`task-time-tracker-1.0.war`现在可以部署到GlassFish服务器上。
- en: Starting the GlassFish 4 server
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动GlassFish 4服务器
- en: 'Opening the **Services** tab and expanding the **Servers** node will list the
    GlassFish server that was installed during the NetBeans installation process.
    You can now right-click on the **GlassFish Server 4.0** node and select **Start**
    as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**服务**选项卡并展开**服务器**节点将列出在NetBeans安装过程中安装的GlassFish服务器。您现在可以右键单击**GlassFish
    Server 4.0**节点，并选择**启动**，如下截图所示：
- en: '![Starting the GlassFish 4 server](img/5457_01_16.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![启动GlassFish 4服务器](img/5457_01_16.jpg)'
- en: The **Output** panel should now open at the bottom of your NetBeans IDE and
    display the startup results. Select the **GlassFish Server 4.0** tab to view the
    details.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**面板现在应该在您的NetBeans IDE底部打开，并显示启动结果。选择**GlassFish Server 4.0**选项卡以查看详细信息。'
- en: '![Starting the GlassFish 4 server](img/5457_01_17.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![启动GlassFish 4服务器](img/5457_01_17.jpg)'
- en: 'The fifth-last line identifies that the server has started and is listening
    to port 8080, written as 8,080 in the log:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 倒数第五行标识服务器已启动，并正在监听端口8080，日志中写为8,080：
- en: '**INFO: Grizzly Framework 2.3.1 started in: 16ms - bound to [/0.0.0.0:8,080]**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**INFO: Grizzly Framework 2.3.1 started in: 16ms - bound to [/0.0.0.0:8,080]**'
- en: You can now open your preferred browser and view the page `http://localhost:8080`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以打开您喜欢的浏览器，并查看页面`http://localhost:8080`。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that depending on your environment, you may have other applications listening
    to port 8080\. In these circumstances, you will need to substitute the correct
    port, as defined in the GlassFish server output, in place of 8080.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据您的环境，可能有其他应用程序监听端口8080。在这种情况下，您需要用GlassFish服务器输出中定义的正确端口替换8080。
- en: '![Starting the GlassFish 4 server](img/5457_01_18.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![启动GlassFish 4服务器](img/5457_01_18.jpg)'
- en: You can now stop the server by right-clicking on the **GlassFish Server 4.0**
    node and clicking on **Stop**.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以右键单击**GlassFish Server 4.0**节点，然后单击**停止**来停止服务器。
- en: '![Starting the GlassFish 4 server](img/5457_01_19.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![启动GlassFish 4服务器](img/5457_01_19.jpg)'
- en: Running the Task Time Tracker project
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Task Time Tracker项目
- en: 'We have already built the project successfully; it is now time to run the project
    in GlassFish. Click on the **Run** toolbar item to start the process as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功构建了项目；现在是时候在GlassFish中运行项目了。单击**运行**工具栏项以启动进程，如下所示：
- en: '![Running the Task Time Tracker project](img/5457_01_20.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![运行Task Time Tracker项目](img/5457_01_20.jpg)'
- en: 'The output should display the process, first building the project followed
    by starting and deploying to the GlassFish server. The final step will open your
    default browser and display the world-renowned message that is loved by all developers,
    as shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该显示进程，首先构建项目，然后启动并部署到GlassFish服务器。最后一步将打开您的默认浏览器，并显示所有开发人员都喜爱的世界著名消息，如下截图所示：
- en: '![Running the Task Time Tracker project](img/5457_01_21.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![运行Task Time Tracker项目](img/5457_01_21.jpg)'
- en: 'Congratulations! You have now configured the core components for developing,
    building, and deploying a Spring Java project. The final step is to change the
    text on the default page. Open the `index.html` file as shown in the following
    screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已配置了开发、构建和部署Spring Java项目的核心组件。最后一步是更改默认页面上的文本。打开`index.html`文件，如下面的截图所示：
- en: '![Running the Task Time Tracker project](img/5457_01_22.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![运行任务时间跟踪器项目](img/5457_01_22.jpg)'
- en: Change `<title>` to `Task Time Tracker Home Page` and the `<h1>` text to `Welcome
    to Task Time Tracker!`. Save the page and refresh your browser to see the change.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<title>`更改为`任务时间跟踪器首页`，将`<h1>`文本更改为`欢迎来到任务时间跟踪器！`。保存页面并刷新浏览器以查看更改。
- en: '![Running the Task Time Tracker project](img/5457_01_23.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![运行任务时间跟踪器项目](img/5457_01_23.jpg)'
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Didn't see the updated text change on browser refresh? Under some circumstances,
    after deploying to GlassFish for the first time, the changes made in the `index.html`
    file may not be seen in the browser when you refresh the page. Restarting your
    NetBeans IDE should fix the issue and ensure subsequent changes are immediately
    deployed to GlassFish when any project resource is saved.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新浏览器后没有看到更新的文本更改？在某些情况下，首次部署到GlassFish后，刷新页面时可能看不到在`index.html`文件中所做的更改。重新启动您的NetBeans
    IDE应该可以解决问题，并确保随后的更改在保存任何项目资源时立即部署到GlassFish。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have been introduced to some of the key technologies we
    will be using in this book. You have downloaded and installed the MySQL database
    server, the JDK, and the NetBeans IDE. We then introduced Maven and how it is
    used to simplify the building and management of Java projects. We finally deployed
    our skeleton Task Time Tracker project to GlassFish without writing a single line
    of code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了本书中将使用的一些关键技术。您已经下载并安装了MySQL数据库服务器、JDK和NetBeans IDE。然后我们介绍了Maven以及它如何简化Java项目的构建和管理。最后，我们在不写一行代码的情况下将我们的骨架任务时间跟踪器项目部署到了GlassFish。
- en: Although we have added the Spring Framework to our project, we are yet to delve
    into how it is used. Likewise, we are yet to mention Sencha Ext JS. Be patient,
    there is plenty more to come! The next chapter will introduce our Task Time Tracker
    database tables and start our development journey.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已将Spring框架添加到我们的项目中，但我们尚未深入了解它的用法。同样，我们还没有提到Sencha Ext JS。请耐心等待，还有很多内容要介绍！下一章将介绍我们的任务时间跟踪器数据库表，并开始我们的开发之旅。
