- en: Chapter 4. Managing the Logging Subsystem with the CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 使用CLI管理日志子系统
- en: 'In this chapter, you will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将涵盖以下主题：
- en: Creating a file-handler logging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个文件处理器日志
- en: Creating a periodic-rotating file-handler
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个周期性旋转的文件处理器
- en: Creating a size-rotating file-handler
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个大小旋转的文件处理器
- en: Defining asynchronous handlers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义异步处理器
- en: Creating a syslog-handler
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个syslog处理器
- en: Listing and reading log files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出和读取日志文件
- en: Using a different logging implementation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的日志实现
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The logging subsystem is where you can configure the information statements
    of WildFly and your application, for debugging and auditing purposes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 日志子系统是您配置WildFly和应用程序的信息语句的地方，用于调试和审计目的。
- en: WildFly comes with a default configuration, which can be found in the `configuration`
    folder of both the standalone and domain directories. The default configuration
    automatically logs the information on the console and on a file named `server.log`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly自带默认配置，可以在独立和域目录的`configuration`文件夹中找到。默认配置会自动在控制台和名为`server.log`的文件中记录信息。
- en: 'As you will learn in this chapter, WildFly has seven different handlers to
    help you persist with your application logs:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本章中将学到的，WildFly有七个不同的处理器来帮助您持久化应用程序日志：
- en: '**Console**: Writes application logs to the standard output'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台**: 将应用程序日志写入标准输出'
- en: '**File**: Writes application logs to a file'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**: 将应用程序日志写入文件'
- en: '**Periodic**: Writes application logs to a file by rotating it on the basis
    of time'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**周期性**: 根据时间旋转文件来写入应用程序日志'
- en: '**Size**: Writes application logs to a file by rotating it on the basis of
    size'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小**: 根据大小旋转文件来写入应用程序日志'
- en: '**Async**: Wraps one or more handler to give asynchronous behavior'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步**: 包装一个或多个处理器以提供异步行为'
- en: '**Custom**: Lets you use your own handler, as long as it extends the `java.util.logging.Handler`
    class'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**: 允许您使用自己的处理器，只要它扩展了`java.util.logging.Handler`类'
- en: '**Syslog**: Writes application logs to the default OS logger'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Syslog**: 将应用程序日志写入默认的操作系统日志记录器'
- en: Depending on the operation mode of your WildFly, you have different settings
    concerning the default log file paths.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的WildFly的操作模式，您有不同的默认日志文件路径设置。
- en: Domain mode
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域模式
- en: 'In a managed domain, we have two types of log files: Controller and server
    logs.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在托管域中，我们有两种类型的日志文件：控制器和服务器日志。
- en: 'Starting with the default configuration of `domain.xml`, both the domain controller
    components and the servers are located on the same host:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从默认的`domain.xml`配置开始，域控制器组件和服务器都位于同一主机上：
- en: '| Process | Log File |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 进程 | 日志文件 |'
- en: '| --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `[Host Controller]` | `jboss.domain.log.dir/host-controller.log` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `[主机控制器]` | `jboss.domain.log.dir/host-controller.log` |'
- en: '| `[Process Controller]` | `jboss.domain.log.dir/process-controller.log` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `[进程控制器]` | `jboss.domain.log.dir/process-controller.log` |'
- en: '| `[Server One]` | `jboss.domain.servers.dir/server-one/log/server.log` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `[服务器一】` | `jboss.domain.servers.dir/server-one/log/server.log` |'
- en: '| `[Server Two]` | `jboss.domain.servers.dir/server-two/log/server.log` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `[服务器二】` | `jboss.domain.servers.dir/server-two/log/server.log` |'
- en: '| `[Server Three]` | `jboss.domain.servers.dir/server-three/log/server.log`
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `[服务器三】` | `jboss.domain.servers.dir/server-three/log/server.log` |'
- en: 'If you want to change one of the previously mentioned properties, you can set
    a different value, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改上述提到的属性之一，可以设置不同的值，如下所示：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Standalone mode
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立模式
- en: 'The default log files for a standalone server is in the log subdirectory of
    the `jboss.server.base.dir` folder of the WildFly home:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 独立服务器的默认日志文件位于WildFly主目录的`jboss.server.base.dir`文件夹的日志子目录中：
- en: '| Process | Log File |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 进程 | 日志文件 |'
- en: '| --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `[Server]` | `jboss.server.log.dir/server.log` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `[服务器]` | `jboss.server.log.dir/server.log` |'
- en: 'If you want to change the previously mentioned property, you can set a different
    value, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改上述提到的属性，可以设置不同的值，如下所示：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a file-handler logging
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个文件处理器日志
- en: The logging subsystem is where you configure the output information statements
    of your application and/or WildFly cores, for debugging or auditing purposes.
    In this recipe, we will learn how to target the log statement output of your application
    to a file-handler.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 日志子系统是您配置应用程序和/或WildFly核心的输出信息语句的地方，用于调试或审计目的。在本食谱中，我们将学习如何将应用程序的日志语句输出指向文件处理器。
- en: For the sake of simplicity, we will try our recipe with WildFly running in the
    standalone mode.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们将尝试在独立模式下运行的WildFly的食谱。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First of all, let''s create a standalone configuration for our recipe, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为我们的菜谱创建一个独立的配置，如下所示：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的日志配置，我们需要一个应用程序来记录一些语句。在这种情况下，我们将使用名为`logging`的应用程序。要获取部署的工件，请参阅[第1章](ch01.html
    "第1章。欢迎来到WildFly！")中的*软件先决条件*菜谱，*欢迎来到WildFly!*。
- en: 'Now, let''s start WildFly, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动WildFly，如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WildFly服务器运行的情况下，打开你的命令行工具并连接到CLI：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now execute the following commands:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now deploy the `logging.war` application, and take a look at the `log` folder
    to see if the file `wildflycookbook-fh.log` is present. The corresponding test
    URL is as follows `http://127.0.0.1:8080/logging`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在部署`logging.war`应用程序，查看`log`文件夹以查看是否存在文件`wildflycookbook-fh.log`。相应的测试URL如下`http://127.0.0.1:8080/logging`。
- en: 'Now check your logs and you should see something like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查你的日志，你应该看到如下内容：
- en: '![How to do it...](img/3744_04_01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3744_04_01.jpg)'
- en: Log statements with wildflycookbook-fh file handler.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用wildflycookbook-fh文件处理程序的日志语句。
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We first need to add the file-handler, and then create a category to map the
    proper application packages to our new file-handler, `wildflycookbook-fh`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要添加文件处理程序，然后创建一个类别来将适当的应用程序包映射到我们新的文件处理程序`wildflycookbook-fh`。
- en: Application package can be any, even the WildFly internal package, that you
    might be interested in and want to store in a separate file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序包可以是任何，甚至是你可能感兴趣并希望存储在单独文件中的WildFly内部包。
- en: 'Anyway, once you''ve created the file-handler, you can check it''s configuration
    within the CLI, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，一旦你创建了文件处理程序，你可以在CLI中检查它的配置，如下所示：
- en: '![How it works...](img/3744_04_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3744_04_02.jpg)'
- en: 'Looking at the `standalone.xml file`, the new file-handler configuration looks
    as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`standalone.xml`文件，新的文件处理程序配置如下所示：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Typically, every environment has its own peculiarities, even for the logging
    subsystem. In a test environment, you will probably need more information to view,
    so you want developer information to be traced into the log file. We can achieve
    this behavior by enabling the `DEBUG` level on both, handler and category. Let's
    see both the instructions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个环境都有其独特的特性，即使是日志子系统也不例外。在测试环境中，你可能需要更多信息来查看，因此你希望开发者信息被追踪到日志文件中。我们可以通过在处理程序和类别上启用`DEBUG`级别来实现这种行为。让我们看看这两个指令。
- en: 'First we enable the `DEBUG` level on the file handler itself:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为文件处理程序本身启用`DEBUG`级别：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we enable the `DEBUG` level on the category:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在类别上启用`DEBUG`级别：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a periodic-rotating file-handler
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建周期性轮转文件处理程序
- en: In this recipe, we will learn how to target the log statement output of your
    application to a periodic file handler. This is different from the file-handler,
    in that when the running system reaches a pre-defined time (that is, hour change,
    day change, and so on), the log file rolls, backing up itself and creating a new
    file with the same characteristics.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何将应用程序的日志语句输出定向到周期性文件处理程序。这与文件处理程序不同，因为当运行系统达到预定义的时间（即小时变化、日变化等）时，日志文件会滚动，备份自身并创建一个具有相同特性的新文件。
- en: For the sake of simplicity, we will try our recipe with WildFly running in the
    standalone mode.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将尝试在独立模式下运行的WildFly的菜谱。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you didn''t follow the previous recipe, we will need to create a standalone
    configuration for our recipe, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有遵循前面的菜谱，我们需要为我们的菜谱创建一个独立的配置，如下所示：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的日志配置，我们需要一个应用程序来记录一些语句。在这种情况下，我们将使用名为`logging`的应用程序。要获取部署的工件，请参阅[第1章](ch01.html
    "第1章。欢迎来到WildFly！")中的*软件先决条件*菜谱，*欢迎来到WildFly!*。
- en: 'Now, let''s start WildFly, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动WildFly，如下所示：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行WildFly服务器的情况下，打开您的命令行工具并连接到CLI：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now execute the following commands:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding configuration, we settled the suffix, the rotating algorithm,
    to minutes just to give an example.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的配置中，我们设置了后缀和旋转算法为分钟，只是为了举例。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In a production environment, you should use a daily rotating algorithm and schedule
    an `olding` mechanism to back up the files somewhere else in order to avoid file
    system fullfilling.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生产环境中，您应该使用每日旋转算法并安排一个`olding`机制，以便将文件备份到其他位置，以避免文件系统满载。
- en: 'Nevertheless, if you followed the previous recipe, you just need to add the
    `periodic.rotating-file-handler` to the category as follows:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，如果您遵循了之前的配方，您只需将 `periodic.rotating-file-handler` 添加到类别中，如下所示：
- en: '[PRE13]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Instead, if you skipped the *Creating a file-handler logging* recipe, you need
    to create a new category and reference the handler to it, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相反，如果您跳过了 *创建文件处理器日志* 配方，您需要创建一个新的类别并将处理器引用到它，如下所示：
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now deploy the `logging.war`, if you haven''t done it yet, and take a look
    at the `log` folder to check if the file `wildflycookbook-prfh.log` is present.
    To trigger the log statements into the new file, hit the following address: `http://127.0.0.1:8080/logging`.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在部署 `logging.war`，如果您还没有这样做，然后查看 `log` 文件夹以检查文件 `wildflycookbook-prfh.log`
    是否存在。要触发日志语句到新文件，请访问以下地址：`http://127.0.0.1:8080/logging`。
- en: 'Now wait a minute, and refresh the page a couple of times. What you should
    notice in the `jboss.server.base.dir/log` folder is at least another `*-prfh*`
    log file, as follows:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在等一会儿，刷新页面几次。您应该在 `jboss.server.base.dir/log` 文件夹中注意到至少另一个 `*-prfh*` 日志文件，如下所示：
- en: '![How to do it…](img/3744_04_03.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/3744_04_03.jpg)'
- en: As you can see, our log file has rotated once.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们的日志文件已经旋转了一次。
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: We first need to create the file-handler and then create a category to map the
    proper application packages to our new periodic-rotating-file-handler `wildflycookbook-prfh`.
    Application package can be any, even the WildFly internal package, that you might
    be interested in and want to store in a separate file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要创建文件处理器，然后创建一个类别来将适当的应用程序包映射到我们新的周期性旋转文件处理器 `wildflycookbook-prfh`。应用程序包可以是任何类型，甚至是您可能感兴趣并希望存储在单独文件中的WildFly内部包。
- en: What about the "zero" byte file? That file was created just after the creation
    of the handler. In my case, I waited for a few minutes before running the `logging`
    application, so when it was time to write on the file, the handler first checked
    if the minute was changed (it was), then rolled the file. It then created the
    new file and wrote into it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 那么关于“零”字节的文件呢？该文件是在创建处理器后创建的。在我的情况下，我在运行 `logging` 应用程序之前等了几分钟，所以当是时候写入文件时，处理器首先检查分钟是否改变（它改变了），然后旋转文件。然后它创建了新文件并将内容写入其中。
- en: 'Anyway, once you''ve created the periodic-rotating-file-handler, you can check
    it''s configuration within the CLI, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，一旦您创建了周期性旋转文件处理器，您可以在CLI中检查其配置，如下所示：
- en: '![How it works…](img/3744_04_04.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3744_04_04.jpg)'
- en: 'Looking at `standalone.xml`, the new periodic-rotating-file-handler configuration
    looks like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `standalone.xml`，新的周期性旋转文件处理器配置如下所示：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `wildflycookbook-fh` handler is present because of the previous recipe.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`wildflycookbook-fh` 处理器存在是因为之前的配方。'
- en: Creating a size-rotating file-handler
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建大小旋转文件处理器
- en: In this recipe, we will learn how to target the log statement output of your
    application to a size-rotating-file-handler. It is different from a file-handler
    in that when the file itself reaches a specific size in terms of bytes, it rolls
    backing up itself and creates a new file with the same characteristics. This mechanism
    is, by default, settled to have only one backup file. This is to prevent your
    hard disks running out of space quickly, in case you forget the setting.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何将应用程序的日志语句输出目标到一个大小旋转文件处理器。它与文件处理器不同，因为当文件本身在字节大小方面达到特定值时，它会自动备份并创建一个具有相同特性的新文件。这个机制默认只设置一个备份文件。这是为了防止您忘记设置，导致硬盘空间快速耗尽。
- en: For the sake of simplicity, we will try our recipe with WildFly running in the
    standalone mode.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们将尝试在独立模式下运行的WildFly中的配方。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you didn''t follow the previous recipe, we will need to create a standalone
    configuration for our recipe, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有遵循之前的配方，我们需要为我们的配方创建一个独立配置，如下所示：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的日志配置，我们需要一个应用程序来记录一些语句。在这种情况下，我们将使用名为`logging`的应用程序。要获取部署的工件，请参阅[第1章](ch01.html
    "第1章。欢迎来到WildFly！")中的*软件先决条件*配方，*欢迎来到WildFly!*。
- en: 'Now, let''s start WildFly, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动WildFly，如下所示：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WildFly服务器运行时，打开你的命令行工具并连接到CLI：
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now execute the following commands:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE19]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding configuration, we settled the `rotate-size` to `1` KB. When
    the file reaches that size, the handler closes the current file and creates a
    new one. The old one will be renamed with an index suffix. The property `max-backup-index`
    specifies exactly how many files the handler has to maintain; in our case it is
    `five`.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的配置中，我们将`rotate-size`设置为`1` KB。当文件达到该大小时，处理器将关闭当前文件并创建一个新的文件。旧的文件将被重命名并添加索引后缀。属性`max-backup-index`指定处理器需要维护的文件数量；在我们的例子中是`五个`。
- en: 'Nevertheless, in the *Creating a file-handler logging* recipe we created a
    logger category. Thus, if you followed that recipe, you just need to add the `size-rotating-file-handler`
    handler to the category as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，在*创建文件处理器日志*配方中，我们创建了一个日志类别。因此，如果你遵循了那个配方，你只需要将`size-rotating-file-handler`处理器添加到类别中，如下所示：
- en: '[PRE20]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Instead, if you skipped the `Creating a file-handler logging` recipe, you need
    to create a new category and reference the handler to it, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相反，如果你跳过了`创建文件处理器日志`配方，你需要创建一个新的类别并将处理器引用到它，如下所示：
- en: '[PRE21]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now deploy the `logging.war`, if you haven''t done it yet, and take a look
    at the `log` folder to check if the file `wildflycookbook-srfh.log` is present.
    To trigger the log statements into the new file, hit the following address: `http://127.0.0.1:8080/logging`.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在部署`logging.war`，如果你还没有做的话，然后查看`log`文件夹以检查是否存在文件`wildflycookbook-srfh.log`。要触发日志语句到新文件，请点击以下地址：`http://127.0.0.1:8080/logging`。
- en: Do it three to four times, so that our log file increases in size. What you
    should notice is a couple of `*-srfh.log` log files in the `jboss.server.base.dir/log`
    folder, as follows:![How to do it…](img/3744_04_05.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 做三到四次，这样我们的日志文件就会增加大小。你应该注意`jboss.server.base.dir/log`文件夹中的一些`*-srfh.log`日志文件，如下所示：![如何做…](img/3744_04_05.jpg)
- en: How it works…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We first need to create the size-rotating-file-handler and then create/choose
    a category to map the proper application packages to our new size-rotating-file-handler,
    `wildflycookbook-srfh`. Application package can be any, even the WildFly internal
    package, that you might be interested in and want to store in a separate file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要创建size-rotating-file-handler，然后创建/选择一个类别来将适当的应用程序包映射到我们新的size-rotating-file-handler，`wildflycookbook-srfh`。应用程序包可以是任何，甚至是WildFly内部包，你可能感兴趣并希望将其存储在单独的文件中。
- en: What happens if we reach `max-backup-index`?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们达到`max-backup-index`会发生什么？
- en: 'Suppose we already switched our current log file five times, so in our `log`
    folder we have the following files:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经切换了当前日志文件五次，所以在我们`log`文件夹中有以下文件：
- en: '`wildflycookbook-srfh.log`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wildflycookbook-srfh.log`'
- en: '`wildflycookbook-srfh.log.1`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wildflycookbook-srfh.log.1`'
- en: '`wildflycookbook-srfh.log.2`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wildflycookbook-srfh.log.2`'
- en: '`wildflycookbook-srfh.log.3`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wildflycookbook-srfh.log.3`'
- en: '`wildflycookbook-srfh.log.4`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wildflycookbook-srfh.log.4`'
- en: '`wildflycookbook-srfh.log.5`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wildflycookbook-srfh.log.5`'
- en: Indexed files are all about 1 KB in size, while the current one, `wildflycookbook-srfh.log`
    needs only a few more bytes to roll.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 索引文件的大小大约为1 KB，而当前的`wildflycookbook-srfh.log`只需要额外的几个字节就可以滚动。
- en: As we hit our application once again, the current file rolls with the index
    suffix 1, the old `.1` becomes `.2`, the old `.2` becomes `.3` and so on.. What
    happens to the `.5` file? It gets removed and the `.4` file takes its place.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次点击应用程序时，当前文件会带上索引后缀1，旧的`.1`变成`.2`，旧的`.2`变成`.3`，以此类推。`.5`文件会发生什么？它将被删除，`.4`文件将取而代之。
- en: 'Anyway, once you''ve created the size-rotating-file-handler, you can check
    its configuration within the CLI, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，一旦你创建了size-rotating-file-handler，你可以在CLI中检查其配置，如下所示：
- en: '![How it works…](img/3744_04_06.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/3744_04_06.jpg)'
- en: 'Looking at `standalone.xml`, the new size-rotating-file-handler configuration
    looks like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`standalone.xml`，新的size-rotating-file-handler配置如下所示：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The handlers, `wildflycookbook-fh` and `wildflycookbook-prfh,` are present because
    of the previous recipes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前的食谱，存在处理程序`wildflycookbook-fh`和`wildflycookbook-prfh`。
- en: Defining asynchronous handlers
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义异步处理程序
- en: In this recipe, you will learn how to target the log statement output of your
    application to a handler of your choice and have it logging in an asynchronous
    way. For the sake of simplicity, we will try our recipe with WildFly running in
    the standalone mode.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你将学习如何将应用程序的日志语句输出指向你选择的处理程序，并以异步方式记录。为了简单起见，我们将尝试在独立模式下运行的WildFly上执行我们的食谱。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的日志配置，我们需要一个应用程序来记录一些语句。在这种情况下，我们将使用名为`logging`的应用程序。要获取部署的工件，请参阅[第1章](ch01.html
    "第1章。欢迎来到WildFly！")中的*软件先决条件*食谱，*欢迎来到WildFly!*。
- en: Furthermore, this recipe relies on the configuration made while explaining the
    *Creating a file-handler logging* and *Creating a periodic-rotating file-handler*
    recipes of this chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个食谱依赖于本章中解释的*创建文件处理程序日志*和*创建周期性旋转文件处理程序*食谱所做的配置。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个运行的WildFly服务器上，打开你的命令行工具并连接到CLI：
- en: '[PRE23]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now execute the following commands:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE24]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To check the new configuration, just issue the following command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查新的配置，只需发出以下命令：
- en: '[PRE25]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Okay, now we have our new async-handler managing two other handlers in an asynchronous
    way. To check if the async-handler is properly configured, open the browser and
    point it to the following URL: `http://127.0.0.1:8080/logging`'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧，现在我们有了新的异步处理程序以异步方式管理两个其他处理程序。要检查异步处理程序是否配置正确，请打开浏览器并将它指向以下URL：`http://127.0.0.1:8080/logging`
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The files managed by the `wildflycookbook-fh` and `wildflycookbook-prfh` handlers,
    still write into their own log files. The async-handler itself does not generate
    any additional files at all; it only adds asynchronous behavior to the other handlers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由`wildflycookbook-fh`和`wildflycookbook-prfh`处理程序管理的文件仍然写入它们自己的日志文件。异步处理程序本身根本不会生成任何额外的文件；它只为其他处理程序添加异步行为。
- en: The async-handler is used to improve the logging throughput.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 异步处理程序用于提高日志吞吐量。
- en: 'It grabs application log statements, puts them into a buffer, and then logs
    them using the handlers that you defined. Also, this buffer is not unbounded—it
    has a limit. As a matter of fact, from the commands shown in the *How to do it*
    section, I''ve emphasized some of the key points: `queue-length` and `overflow-action`.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 它抓取应用程序日志语句，将它们放入缓冲区，然后使用您定义的处理程序进行记录。此外，这个缓冲区不是无界的——它有一个限制。实际上，从*如何做到这一点*部分显示的命令中，我强调了几个关键点：`queue-length`和`overflow-action`。
- en: Simply speaking, we told the async-handler how many log statements the buffers
    can hold, and what it should do when there is no more room in them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们告诉异步处理程序缓冲区可以容纳多少日志语句，以及当它们没有更多空间时应该做什么。
- en: We settled `1024` as the number of the log statements for the buffer, and we
    settled a `block` action as an exceeded limit behavior. This means that the log
    statement is in a hold state until it finds room in the buffer. You can otherwise
    choose the `discard` action, with the consequence of losing your logs.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`1024`作为缓冲区中日志语句的数量，并将`block`操作作为超出限制的行为。这意味着日志语句处于等待状态，直到它在缓冲区中找到空间。否则，你可以选择`discard`操作，其后果是丢失你的日志。
- en: You can use whatever action you want, but keep in mind that for the `block`
    action, you should tune the size of your buffer to not hold too many or too few
    logs.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用你想要的任何操作，但请记住，对于`block`操作，你应该调整缓冲区的大小，以避免存储过多的或过少的日志。
- en: 'Looking at `standalone.xml`, the new async-handler configuration looks like
    this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`standalone.xml`，新的异步处理程序配置看起来像这样：
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: There's more…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The async-handler is faster, so why wouldn't you always use that? Well, not
    always; sometimes you can get a worse performance by using the async-handler.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 异步处理程序更快，那么为什么你总是不使用它呢？好吧，不一定；有时使用异步处理程序可能会得到更差的表现。
- en: If your application makes intense use of I/O operations, then you can benefit
    from it. On the other hand, if your application makes intense use of the CPU,
    you will definitely not benefit from using the async-handler, as it will increase
    context-switching.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序大量使用I/O操作，那么你可以从中受益。另一方面，如果你的应用程序大量使用CPU，那么使用异步处理器肯定不会给你带来好处，因为它会增加上下文切换。
- en: Creating a syslog-handler
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建syslog处理器
- en: 'In this recipe, we will learn how to use "syslog". The syslog is a standard
    protocol used for message logging. This standard has been implemented for different
    operating systems, such as Linux, Unix, and Windows. In 2009, the **Internet**
    **Engineering Task Force** (**IETF**) standardized the "syslog" protocol specification,
    which can be viewed at the following address:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用"syslog"。syslog是一个用于消息记录的标准协议。这个标准已经在不同的操作系统上实现，例如Linux、Unix和Windows。在2009年，**互联网**
    **工程任务组**（**IETF**）标准化了"syslog"协议规范，可以在以下地址查看：
- en: '[http://tools.ietf.org/html/rfc5424](http://tools.ietf.org/html/rfc5424)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[RFC5424](http://tools.ietf.org/html/rfc5424)'
- en: You will probably use `syslog-handler` in environments where a centralized logging
    system is used to collect all system information.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在集中式日志系统用于收集所有系统信息的环境中使用`syslog-handler`。
- en: Lastly, for this recipe I will use a syslog server named `syslog-ng`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于这个菜谱，我将使用一个名为`syslog-ng`的syslog服务器。
- en: 'To install into a Fedora 21 system, do as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装到Fedora 21系统，请按以下步骤操作：
- en: '[PRE27]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once done, enable the following directives into `/etc/rsyslog.conf`,:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将以下指令启用到`/etc/rsyslog.conf`中：
- en: '[PRE28]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then start the `rsyslogd` daemon with the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用以下命令启动`rsyslogd`守护进程：
- en: '[PRE29]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Its detailed installation and configuration is out of the scope of this book.
    By the way, you can refer to the official documentation at the following site:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 它的详细安装和配置超出了本书的范围。顺便说一句，你可以参考以下网站的官方文档：
- en: '[https://syslog-ng.org](https://syslog-ng.org)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[syslog-ng官网](https://syslog-ng.org)'
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you didn''t follow the previous recipe, we will need to create a standalone
    configuration for our recipe, as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有遵循之前的菜谱，我们需要为我们的菜谱创建一个独立配置，如下所示：
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的日志配置，我们需要一个应用程序来记录一些语句。在这种情况下，我们将使用名为`logging`的应用程序。要获取部署的工件，请参阅[第1章](ch01.html
    "第1章。欢迎来到WildFly！")中的*软件先决条件*菜谱，*欢迎来到WildFly!*。
- en: 'Now, let''s start WildFly, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动WildFly，如下所示：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How to do it…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WildFly服务器运行后，打开你的命令行工具并连接到CLI：
- en: '[PRE32]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now execute the following commands:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE33]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now we need to associate the handler to a logger, and we will use `com.packtpub.wildflycookbook`
    (used in the previous recipes of this chapter), as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将处理器与日志记录器关联起来，我们将使用`com.packtpub.wildflycookbook`（在本章之前的菜谱中使用过），如下所示：
- en: '[PRE34]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Before we can test our new configuration, open a new terminal window and `tail`
    the `syslog`, by issuing the following command:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们可以测试我们的新配置之前，打开一个新的终端窗口，通过以下命令`tail``syslog`：
- en: '[PRE35]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will work in Fedora 21; in a different Linux system, you may find your
    `SysLog` server logging into the `/var/log/messages` file. However, point to the
    file with regard to your OS.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在Fedora 21上会起作用；在不同的Linux系统上，你可能发现你的`SysLog`服务器将日志记录到`/var/log/messages`文件中。然而，根据你的操作系统指定文件。
- en: 'Once ready, deploy the logging application, if you haven''t done so yet, and
    open your browser to the following URL: `http://localhost:8080/logging`.'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备就绪后，如果你还没有这样做，部署日志应用程序，并在浏览器中打开以下URL：`http://localhost:8080/logging`。
- en: 'You should see something similar to the following:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下类似的内容：
- en: '[PRE36]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: It's our logging application's fatal message catched by the syslog. You know
    this because it refers to the `wildfly-logging` which corresponds to the value
    of the attribute `app-name`, when defining the `syslog-handler`. It worked!
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们的日志应用程序捕获的致命消息。你知道这是因为它引用了`wildfly-logging`，这与定义`syslog-handler`时属性`app-name`的值相对应。它成功了！
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: First of all, it's better to repeat that "syslog" is a protocol, thus it has
    many implementations depending on the hardware and software. In other words, it
    is OS dependent. In our first command, while creating the `syslog-handler`, we
    specified a lot of parameters.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，最好重复一下，“syslog”是一个协议，因此它有多个实现，这取决于硬件和软件。换句话说，它是操作系统依赖的。在我们的第一个命令中，当创建 `syslog-handler`
    时，我们指定了许多参数。
- en: 'Let''s summarize them in the following table:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下表格中总结它们：
- en: '| Attribute | Description |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `server-address` | This is where the syslog server is—default is `localhost`.
    |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `server-address` | 这是 syslog 服务器所在的位置——默认是 `localhost`。 |'
- en: '| `hostname` | This is the hostname of the sever sending the messages. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `hostname` | 这是发送消息的服务器的主机名。 |'
- en: '| `port` | This is the port that the syslog server listens to—default is `514`.
    |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `port` | 这是 syslog 服务器监听的端口——默认是 `514`。 |'
- en: '| `syslog-format` | The format used to log the message based on the RFC5424
    specification—default is `RFC5424`. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `syslog-format` | 根据RFC5424规范用于记录消息的格式——默认是 `RFC5424`。 |'
- en: '| `facility` | This is the "category" of the message, still based on the RFC5425
    specification—default is `user-level`. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `facility` | 这是消息的“类别”，仍然基于RFC5425规范——默认是 `user-level`。 |'
- en: '| `level` | This is the log level—default is `ALL`. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `level` | 这是日志级别——默认是 `ALL`。 |'
- en: '| `app-name` | This should correspond to the application generating the message.
    It''s basically used for filtering. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `app-name` | 这应该对应于生成消息的应用程序。它基本上用于过滤。 |'
- en: '| `enabled` | When set to false, disables the `syslog-handler`—default value
    is `true`. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `enabled` | 当设置为 false 时，禁用 `syslog-handler`——默认值是 `true`。 |'
- en: However, whenever you create a handler, you will always have to reference it
    into a logger. Otherwise you will not see any messages at all.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，无论何时创建处理器，你都必须将其引用到记录器中。否则，你将看不到任何消息。
- en: Note
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Going into much detail about the "syslog" protocol is out of the scope of this
    book. For more information about it, please refer to its specification, available
    at the following site:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 详细介绍“syslog”协议超出了本书的范围。有关更多信息，请参阅其规范，可在以下网站找到：
- en: '[http://tools.ietf.org/html/rfc5424](http://tools.ietf.org/html/rfc5424)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://tools.ietf.org/html/rfc5424](http://tools.ietf.org/html/rfc5424)'
- en: Listing and reading log files
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出和读取日志文件
- en: In this recipe, we will learn how to list and read log files. This can be helpful
    when you have access only to the CLI (which might be a remote one), and not to
    the server itself or the file system hosting the log files.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何列出和读取日志文件。当你只能访问 CLI（可能是一个远程 CLI），而不能访问服务器本身或托管日志文件的文件系统时，这可能会很有帮助。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To fully understand this recipe, you should have followed one of the previous
    recipes, which have created the various log files. However, the standard WildFly
    log file `server.log` would be present and it's enough.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全理解这个菜谱，你应该遵循之前的某个菜谱，这些菜谱创建了各种日志文件。然而，标准的 WildFly 日志文件 `server.log` 将会存在，这已经足够了。
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行 WildFly 服务器的情况下，打开你的命令行工具并连接到 CLI：
- en: '[PRE37]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Before reading a file, we need to know which log files are present. To list
    them all, execute the following commands:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在读取文件之前，我们需要知道哪些日志文件存在。要列出所有文件，请执行以下命令：
- en: '[PRE38]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Because of our previous recipes, we have a lot of files to look at. For the
    purpose of this recipe, we will use the default log file, `server.log`. To read
    the file, we can try the following command:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们之前的菜谱，我们有大量的文件要查看。为了这个菜谱的目的，我们将使用默认的日志文件，`server.log`。要读取文件，我们可以尝试以下命令：
- en: '[PRE39]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As you can see, the output shows just the last few lines of the content.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，输出仅显示了内容的一些最后几行。
- en: 'If you want to read from the beginning, you can specify the `tail=false` parameter
    (by default, it is set to `true`), along with the `name` parameter, as follows:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想从开头读取，可以指定 `tail=false` 参数（默认设置为 `true`），以及 `name` 参数，如下所示：
- en: '[PRE40]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you want to see more lines of the log file, just specify the number of lines
    you want, and add the `lines` parameter as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要查看更多行日志文件，只需指定你想要的行数，并添加 `lines` 参数，如下所示：
- en: '[PRE41]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Obviously, a continuous `tail -f` like command would be very useful, but there
    isn't one, at least not for the moment.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '显然，一个持续的 `tail -f` 命令将会非常有用，但目前还没有这样的命令。 '
- en: There's more…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is one more option worth mentioning, that is, the `skip` parameter. It
    basically shifts your lines up or down, depending on whether you are starting
    from the head or the tail of the file.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是还有一个选项，那就是`skip`参数。它基本上根据您是从文件头部还是尾部开始读取来向上或向下移动行。
- en: 'Let''s give it a try using a skip by 5 lines:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试跳过5行来试试：
- en: '[PRE42]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The command just dropped the last 5 lines of the file, but it started displaying
    the output 5 lines earlier. By default, the total number of lines displayed is
    10—this is because, by default, it starts reading the tail of the file.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令仅删除了文件的最后5行，但它从5行之前开始显示输出。默认情况下，显示的总行数是10行——这是因为默认情况下，它从文件的末尾开始读取。
- en: Since WildFly version 8.2, the logging subsystem earned a new resource called
    `log-file`. The resource lists all log files defined in the `jboss.server.log.dir`
    (or `jboss.domain.log.dir` depending on the operational mode), which are defined
    in the subsystem. With WildFly 9, now you can download a log file by using the
    management interface.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 自WildFly版本8.2以来，日志子系统获得了一个名为`log-file`的新资源。该资源列出了在`jboss.server.log.dir`（或根据操作模式为`jboss.domain.log.dir`）中定义的所有日志文件，这些文件在子系统中被定义。在WildFly
    9中，现在您可以通过管理接口下载日志文件。
- en: Open a browser and point it to `http://localhost:9990/management/subsystem/logging/log-file/server.log?operation=attribute&name=stream&useStreamAsResponse`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并将其指向`http://localhost:9990/management/subsystem/logging/log-file/server.log?operation=attribute&name=stream&useStreamAsResponse`。
- en: 'Alternatively, you can use HTTP tools such as `curl`. With the `curl` tool,
    you can get a log file content, as follows:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您可以使用如`curl`这样的HTTP工具。使用`curl`工具，您可以获取日志文件内容，如下所示：
- en: '[PRE43]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The preceding example gets the stream of the `server.log` and stores it into
    a homonymous file (the `-o server.log` directive effectively stores the output).
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述示例获取了`server.log`的流并将其存储到同名的文件中（`-o server.log`指令实际上存储了输出）。
- en: Meanwhile, with the new release of WildFly 9, you can read the log file directly
    from the Web Console. You can see all the available files by clicking on **Runtime**
    and by selecting the **Log viewer** menu item on the left, as depicted in the
    following image:![There's more…](img/3744_04_07.jpg)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，随着WildFly 9的新版本发布，您可以直接从Web控制台读取日志文件。您可以通过点击**运行时**并选择左侧的**日志查看器**菜单项来查看所有可用的文件，如下图中所示：![还有更多…](img/3744_04_07.jpg)
- en: Once you select the log file to view, the **Download** and **View** buttons,
    are enabled. The following screenshot is how a log file looks like in the Web
    Console:![There's more…](img/3744_04_08.jpg)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您选择了要查看的日志文件，**下载**和**查看**按钮将被启用。以下截图显示了Web控制台中的日志文件外观：![还有更多…](img/3744_04_08.jpg)
- en: How nice and elegant!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 多么优雅啊！
- en: Using a different logging implementation
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的日志实现
- en: In this final recipe about logging, we will learn how to use a different logging
    implementation. In the earlier version of JBoss AS, you could have relied on the
    `java.util.logging` (also JUL) or the `log4j` implementation. WildFly relies on
    the JUL logging implementation.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本关于日志的最后一道菜中，我们将学习如何使用不同的日志实现。在早期版本的JBoss AS中，您可以依赖`java.util.logging`（也称为JUL）或`log4j`实现。WildFly依赖于JUL日志实现。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: To manage which logging implementation you can use, WildFly gives you a couple
    of attributes.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理您可以使用哪些日志实现，WildFly为您提供了几个属性。
- en: The first one is named `add-logging-api-dependencies`, which can be set to `true`
    (default value) or to `false`. When it's true, the WildFly logging default implementation
    is automatically added to all deployments.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个名为`add-logging-api-dependencies`，可以设置为`true`（默认值）或`false`。当设置为`true`时，WildFly日志默认实现将自动添加到所有部署中。
- en: The other attribute is named `use-deployment-logging-config`, which can be set
    to `true` (default value) or to `false`. When set to `true`, it gives to deployments
    the `per-deployment logging` feature, which essentially enables your application
    to carry its own logging configuration file.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个属性名为`use-deployment-logging-config`，可以设置为`true`（默认值）或`false`。当设置为`true`时，它为部署提供了`per-deployment
    logging`功能，这实际上使得您的应用程序能够携带自己的日志配置文件。
- en: 'The following configuration files are allowed:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置文件是允许的：
- en: '`logging.properties`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging.properties`'
- en: '`jboss-logging.properties`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss-logging.properties`'
- en: '`log4j.properties`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j.properties`'
- en: '`log4j.xml`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j.xml`'
- en: '`jboss-log4j.xml`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss-log4j.xml`'
- en: If you are deploying an EAR application, the file should be placed into the
    `META-INF` directory. While in case of WAR and JAR bundles, the file could be
    either placed into the `META-INF` or `WEB-INF` directory.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在部署一个EAR应用程序，该文件应放置在`META-INF`目录中。而在WAR和JAR捆绑包的情况下，该文件可以放置在`META-INF`或`WEB-INF`目录中。
- en: Now let's go back to our recipe. We will see how we can use a different logging
    implementation. We will use the `log4j` implementation.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到我们的配方。我们将看到如何使用不同的日志实现。我们将使用`log4j`实现。
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `log4j`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的日志配置，我们需要一个应用程序来记录一些语句。在这种情况下，我们将使用名为`log4j`的应用程序。要获取部署的工件，请参阅[第1章](ch01.html
    "第1章。欢迎来到WildFly！")中的*软件先决条件*配方，*欢迎来到WildFly!*。
- en: 'Now it''s time to create a custom standalone configuration folder to test our
    recipe, as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建一个自定义的独立配置文件夹来测试我们的配方了，如下所示：
- en: '[PRE44]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How to do it…
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WildFly服务器运行时，打开你的命令行工具并连接到CLI：
- en: '[PRE45]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now we remove the automatic logging dependency of our application. Keep in
    mind that this setting would be general to all other applications that are running
    on the same WildFly instance, as shown in the following command:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们移除了应用程序的自动日志记录依赖。请注意，此设置将适用于同一WildFly实例上运行的所有其他应用程序，如下面的命令所示：
- en: '[PRE46]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now the application to be deployed needs to declare a dependency to `log4j`,
    which is already provided to you as a module in the WildFly home `modules/system/layers/base/org/apache/log4j/main`
    folder. To do this, you need to add a file called `jboss-deployment-structure.xml`
    into your `META-INF` or `WEB-INF` folder (depending if you got an EAR or a WAR
    application), which looks like the following:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在需要部署的应用程序需要声明对`log4j`的依赖，它已经作为模块提供给你，位于WildFly主目录的`modules/system/layers/base/org/apache/log4j/main`文件夹中。为此，您需要将一个名为`jboss-deployment-structure.xml`的文件添加到您的`META-INF`或`WEB-INF`文件夹中（取决于您是否有一个EAR或WAR应用程序），如下所示：
- en: '[PRE47]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'As previously mentioned, the `per-deployment-logging` feature is enabled by
    default. However, here is the CLI command to enable it:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，`per-deployment-logging`功能默认启用。然而，以下是一个启用它的CLI命令：
- en: '[PRE48]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Tip
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember to `reload` the server once done.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，请记得`重新加载`服务器。
- en: 'Also, as pointed out in the *Getting ready* section, you can provide your own
    logging configuration file. The following is the `log4j.xml` file that comes with
    my `log4j` application:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，如*准备就绪*部分所指出的，您可以提供自己的日志配置文件。以下是我`log4j`应用程序附带的`log4j.xml`文件：
- en: '[PRE49]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now we can build and deploy the application. While deploying the application,
    keep an eye on the logs in the `log4j.log` file ( defined in the above XML code
    snippet), available in the `£WILDFLY_HOME` folder. You should see the following
    entries:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以构建和部署应用程序了。在部署应用程序时，请注意`log4j.log`文件中的日志（在上述XML代码片段中定义），该文件位于`£WILDFLY_HOME`文件夹中。你应该会看到以下条目：
- en: '[PRE50]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: There is more…
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There is another way to achieve the same result. You can maintain the `add-logging-api-dependencies`
    to `true`, and exclude the `logging` subsystem to avoid implicit dependencies
    within the `jboss-deployment-structure.xml` file, as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 有另一种方法可以达到相同的结果。您可以保持`add-logging-api-dependencies`为`true`，并通过在`jboss-deployment-structure.xml`文件中排除`logging`子系统来避免隐式依赖，如下所示：
- en: '[PRE51]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This approach is too conservative, as it won't affect other applications which
    may rely on the logging subsystem.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法过于保守，因为它不会影响可能依赖于日志子系统的其他应用程序。
- en: 'Furthermore, the dependencies can be written in the standard Java way, which
    is via the `MANIFEST.MF` file placed in the `META-INF` folder, as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，依赖项可以按照标准的Java方式编写，即通过放置在`META-INF`文件夹中的`MANIFEST.MF`文件，如下所示：
- en: '[PRE52]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Tip
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember to include an empty line at the end of the line, to have a valid `MANIFEST.MF`
    file. You can also have more dependencies modules, by separating them with a comma
    `,`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住在行尾添加一个空行，以拥有一个有效的`MANIFEST.MF`文件。你也可以有更多的依赖模块，通过逗号`,`分隔它们。
- en: See also
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: More information about how logging works in WildFly 9, can be viewed at [https://docs.jboss.org/author/display/WFLY9/Logging+Configuration](https://docs.jboss.org/author/display/WFLY9/Logging+Configuration).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于WildFly 9中日志工作原理的信息，可以在[https://docs.jboss.org/author/display/WFLY9/Logging+Configuration](https://docs.jboss.org/author/display/WFLY9/Logging+Configuration)查看。
