- en: Creating a RESTful Web Service with Spring Boot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot创建RESTful Web服务
- en: In this chapter, we will first create a RESTful web service using the controller
    class. After that, we will demonstrate how to use Spring Data REST to create a RESTful
    web service that also covers all CRUD functionalities automatically. We are using
    the database application that we created in the previous chapter as a starting
    point.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先使用控制器类创建一个RESTful Web服务。之后，我们将演示如何使用Spring Data REST创建一个自动覆盖所有CRUD功能的RESTful
    Web服务。我们将使用前一章中创建的数据库应用作为起点。
- en: 'In this chapter, we will look into the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下内容：
- en: What the RESTful web service is
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful Web服务是什么
- en: How to create a RESTful web service with Spring Boot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot创建RESTful Web服务
- en: How to test the RESTful web service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试RESTful web服务
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that has been created in previous chapters is necessary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 之前创建的Spring Boot应用程序是必需的。
- en: Postman, cURL, or another suitable tool for transferring data using various
    HTTP methods is necessary.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 需要使用Postman、cURL或其他适当的工具来使用各种HTTP方法传输数据。
- en: Creating a RESTful web service with Spring Boot
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot创建RESTful Web服务
- en: Web services are applications that communicate over the internet using the HTTP
    protocol. There are many different types of web service architectures, but the
    main idea across all designs is the same. In this book, we are creating a RESTful
    web service from what is a really popular design nowadays.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务是使用HTTP协议在互联网上进行通信的应用程序。有许多不同类型的Web服务架构，但所有设计的主要思想都是相同的。在本书中，我们正在从目前非常流行的设计中创建一个RESTful
    Web服务。
- en: Basics of REST
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST的基础知识
- en: '**REST** (**Representational State Transfer**) is an architectural style for
    creating web services. REST is not standard, but it defines a set of constraints
    defined by Roy Fielding. The six constraints are the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST**（**表述状态转移**）是一种用于创建Web服务的架构风格。REST不是标准，但它定义了一组由Roy Fielding定义的约束。这六个约束如下：'
- en: '**Stateless**: The server doesn''t hold any information about the client state.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：服务器不保存有关客户端状态的任何信息。'
- en: '**Client server**: The client and server act independently. The server does
    not send any information without a request from the client.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端服务器**：客户端和服务器独立运行。服务器不会在没有客户端请求的情况下发送任何信息。'
- en: '**Cacheable**: Many clients often request the same resources, therefore it
    is useful to cache responses in order to improve performance.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可缓存**：许多客户端经常请求相同的资源，因此缓存响应以提高性能是有用的。'
- en: '**Uniform interface**: Requests from different clients look the same. Clients
    may be, for example, a browser, a Java application, and a mobile application.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一接口**：来自不同客户端的请求看起来是相同的。客户端可以是浏览器、Java应用程序和移动应用程序等。'
- en: '**Layered system**: REST allows us to use a layered system architecture.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层系统**：REST允许我们使用分层系统架构。'
- en: '**Code on demand**: This is an optional constraint.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需编码**：这是一个可选的约束。'
- en: 'The uniform interface is an important constraint and it defines that every
    REST architecture should have following elements:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 统一接口是一个重要的约束，它定义了每个REST架构应该具有以下元素：
- en: '**Identification of resources**: There are resources with their unique identifiers,
    for example, URIs in web-based REST services. REST resources should expose easily
    understood directory structure URIs. Therefore, a good resource naming strategy
    is very important.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源的识别**：有资源及其唯一标识符，例如基于Web的REST服务中的URI。REST资源应该公开易于理解的目录结构URI。因此，良好的资源命名策略非常重要。'
- en: '**Resource manipulation through representation**: When making a request to
    a resource, the server responds with a representation of the resource. Typically,
    the format of the representation is JSON or XML.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过表示来操作资源**：当向资源发出请求时，服务器会以资源的表示形式做出响应。通常，表示的格式是JSON或XML。'
- en: '**Self descriptive messages**: Messages should have enough information that
    the server knows how to process them.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自描述消息**：消息应该包含足够的信息，以便服务器知道如何处理它们。'
- en: '**Hypermedia and the Engine of Application State (HATEOAS)**: Responses can
    contain links to other areas of service.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超媒体和应用状态引擎（HATEOAS）**：响应可以包含到服务的其他区域的链接。'
- en: The RESTful web service that we are going to develop in the following topics
    follows the REST architectural principles.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的主题中，我们将开发一个遵循REST架构原则的RESTful Web服务。
- en: Creating a RESTful web service
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建RESTful Web服务
- en: 'In Spring Boot, all the HTTP requests are handled by controller classes. To
    be able to create a RESTful web service, first, we have to create a controller
    class. We will create our own Java package for our controller:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot中，所有的HTTP请求都由控制器类处理。为了能够创建一个RESTful web服务，首先我们必须创建一个控制器类。我们将为我们的控制器创建自己的Java包：
- en: 'Activate the root package in the Eclipse Project Explorer and right-click.
    Select New | Package from the menu. We will name our new package `com.packt.cardatabase.web`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse项目资源管理器中激活根包并右键单击。从菜单中选择New | Package。我们将为我们的新包命名为`com.packt.cardatabase.web`：
- en: '![](img/8af105c5-d9c6-40c6-a1a4-99e4ba6af9d7.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8af105c5-d9c6-40c6-a1a4-99e4ba6af9d7.png)'
- en: 'Next, we will create a new controller class in a new web package. Activate
    the `com.packt.cardatabase.web` package in the Eclipse project explorer and right-click.
    Select New | Class from the menu. We will name our class  `CarController`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在一个新的Web包中创建一个新的控制器类。在Eclipse项目资源管理器中激活`com.packt.cardatabase.web`包并右键单击。从菜单中选择New
    | Class。我们将为我们的类命名为`CarController`：
- en: '![](img/06e6c5f3-0ea3-429f-bea1-7a14ef6362e1.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e6c5f3-0ea3-429f-bea1-7a14ef6362e1.png)'
- en: 'Now, your project structure should look like the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的项目结构应该如下截图所示：
- en: '![](img/decf853a-39e9-4624-a18e-f0f8869a8db1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/decf853a-39e9-4624-a18e-f0f8869a8db1.png)'
- en: If you create classes in a wrong package accidentally, you can drag and drop
    the files between packages in the Eclipse Project Explorer. Sometimes, the Eclipse
    Project Explorer view might not be rendered correctly when you make some changes.
    Refreshing the project explorer helps (Activate Project Explorer and press *F5*).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您意外地在错误的包中创建类，您可以在Eclipse项目资源管理器之间拖放文件。有时，当您进行一些更改时，Eclipse项目资源管理器视图可能无法正确呈现。刷新项目资源管理器有所帮助（激活项目资源管理器并按*F5*）。
- en: 'Open your controller class in the editor window and add the `@RestController`
    annotation before the class definition. See the following source code. The `@RestController`
    annotation identifies that this class will be the controller for the RESTful web
    service:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑窗口中打开您的控制器类，并在类定义之前添加`@RestController`注解。请参阅以下源代码。`@RestController`注解标识这个类将成为RESTful
    Web服务的控制器：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we add a new method inside our controller class. The method is annotated
    with the `@RequestMapping` annotation, which defines the endpoint that the method
    is mapped to. Following, you can see the sample source code. In this example,
    when a user navigates to the `/cars` endpoint, the `getCars()` method is executed:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在我们的控制器类中添加一个新的方法。该方法使用`@RequestMapping`注解进行标注，定义了方法映射到的端点。接下来，您可以看到示例源代码。在这个例子中，当用户导航到`/cars`端点时，`getCars()`方法被执行：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `getCars()` method returns all the car objects, which are then marshalled
    to JSON objects by Jackson library.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCars()`方法返回所有汽车对象，然后由Jackson库转换为JSON对象。'
- en: By default, `@RequestMapping` handles all the HTTP method (`GET`, `PUT`, `POST`,
    and more) requests. You can define which method is accepted with the following
    `@RequestMapping("/cars", method=GET)` parameter.  Now, this method handles only
    `GET` requests from the `/cars` endpoint.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`@RequestMapping`处理所有HTTP方法（`GET`，`PUT`，`POST`等）的请求。您可以使用以下`@RequestMapping("/cars",
    method=GET)`参数定义接受的方法。现在，这个方法只处理来自`/cars`端点的`GET`请求。
- en: 'To be able to return cars from the database, we have to inject our `CarRepository` into
    the controller. Then, we can use the `findAll()` method that the repository provides
    to fetch all cars. The following source code shows the controller code:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够从数据库中返回汽车，我们必须将我们的`CarRepository`注入到控制器中。然后，我们可以使用存储库提供的`findAll()`方法来获取所有汽车。以下源代码显示了控制器代码：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we are ready to run our application and navigate to `localhost:8080/cars`.
    We can see that there is something wrong, and the application seems to be in an
    infinite loop. That happens due to our one-to-many relationship between the car
    and owner tables. So, what happens in practice—first, the car is serialized, and
    it contains an owner that is then serialized, and that, in turn, contains cars
    that are then serialized... and so on. To avoid this, we have to add the `@JsonIgnore`
    annotation to the `cars` field in the `Owner` class:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备运行我们的应用程序并导航到`localhost:8080/cars`。我们可以看到有些问题，应用程序似乎陷入了无限循环。这是由于我们的汽车和所有者表之间的一对多关系导致的。实际上会发生什么——首先，汽车被序列化，它包含一个所有者，然后被序列化，反过来，包含汽车，然后被序列化...依此类推。为了避免这种情况，我们必须在`Owner`类的`cars`字段上添加`@JsonIgnore`注解：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, when you run the application and navigate to `localhost:8080/cars` , everything
    should go as expected and you will get all the cars from the database in JSON
    format, as shown in the following screenshot:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当您运行应用程序并导航到`localhost:8080/cars`时，一切都应该如预期般进行，并且您将以JSON格式从数据库中获取所有的汽车，如下截图所示：
- en: '![](img/305e5dea-ad05-46ca-a230-e663c0f62b14.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/305e5dea-ad05-46ca-a230-e663c0f62b14.png)'
- en: We have done our first RESTful web service, which return all the cars. Spring
    Boot provides a much more powerful way of creating RESTful Web Services and this
    is investigated in the next topic.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了我们的第一个RESTful Web服务，它返回所有的汽车。Spring Boot提供了一个更强大的方式来创建RESTful Web服务，这将在下一个主题中进行探讨。
- en: Using Spring Data REST
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Data REST
- en: 'Spring Data REST is part of the Spring Data project. It offers an easy and
    fast way to implement RESTful Web Services with Spring. To start, using Spring
    Data REST you have to add the following dependency to the `pom.xml` file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data REST是Spring Data项目的一部分。它提供了一种简单快捷的方式来使用Spring实现RESTful Web服务。要开始使用Spring
    Data REST，您必须将以下依赖项添加到`pom.xml`文件中：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By default, Spring Data REST finds all public repositories from the application
    and creates automatically RESTful Web Services for your entities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Data REST会查找应用程序中的所有公共存储库，并为您的实体自动创建RESTful Web服务。
- en: 'You can define the endpoint of service in your `application.properties` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`application.properties`文件中定义服务的端点：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now you can access the RESTful web service from the `localhost:8080/api` endpoint.
    By calling the root endpoint of the service it returns the resources that are
    available. Spring Data REST returns JSON data in the **HAL** (**Hypertext Application
    Language**) format. The HAL format provides a set of conventions for expressing
    hyperlinks in JSON and it makes your RESTful web service easier to use for frontend
    developers:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以从`localhost:8080/api`端点访问RESTful Web服务。通过调用服务的根端点，它返回可用的资源。Spring Data
    REST以**HAL**（**超文本应用语言**）格式返回JSON数据。HAL格式提供了一套约定，用于在JSON中表示超链接，使得前端开发人员更容易使用您的RESTful
    Web服务：
- en: '![](img/85f89d74-3ada-4901-a9ca-4f71b1c75236.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85f89d74-3ada-4901-a9ca-4f71b1c75236.png)'
- en: We can see that there are links to the car and owner entity services. The Spring
    Data Rest service pathname is derived from the entity name. The name will then
    be pluralized and uncapitalized. For example, the entity Car service pathname
    will be named `cars`. The profile link is generated by Spring Data Rest and it
    contains application-specific metadata.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有指向汽车和所有者实体服务的链接。Spring Data Rest服务的路径名是从实体名称派生的。然后将名称变为复数形式并取消大写。例如，实体Car服务的路径名将被命名为`cars`。配置文件链接由Spring
    Data Rest生成，其中包含特定于应用程序的元数据。
- en: Now, we start to examine different services more carefully. There are multiple
    tools available for testing and consuming RESTful Web Services. In this book,
    we are using Postman, but you can use tools that you are familiar with, such as
    cURL. Postman can be acquired as a desktop application or as a browser plugin.
    cURL is also available for Windows 10 by using Windows Ubuntu Bash.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们开始更仔细地检查不同的服务。有多种工具可用于测试和使用RESTful Web服务。在本书中，我们使用Postman，但您也可以使用您熟悉的工具，如cURL。Postman可以作为桌面应用程序或作为浏览器插件获取。cURL也可通过使用Windows
    Ubuntu Bash在Windows 10上使用。
- en: 'If you make a request to the `cars` endpoint `http://localhost:8080/api/cars`
    using the `GET` method, you will get a list of all the `cars`, as shown in the
    following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`GET`方法向`http://localhost:8080/api/cars`端点发出请求，您将获得所有`cars`的列表，如下面的屏幕截图所示：
- en: '![](img/3bda9f9b-22a3-45e9-9a81-4404dc9617c1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bda9f9b-22a3-45e9-9a81-4404dc9617c1.png)'
- en: In the JSON response, you can see that there is an array of `cars` and each
    car contains car specific data. All the cars also have the `"_links"` attribute,
    which is a collection of links, and with these you can access the car itself or
    get the owner of the car. To access one specific car, the path will be `http://localhost:8080/api/cars/{id}`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSON响应中，您可以看到有一个`cars`数组，每辆汽车都包含特定的汽车数据。所有汽车还具有`"_links"`属性，这是一组链接，通过这些链接，您可以访问汽车本身或获取汽车的所有者。要访问特定的汽车，路径将是`http://localhost:8080/api/cars/{id}`。
- en: 'The request to `http://localhost:8080/api/cars/3/owner` returns the owner of
    the car. The response now contains owner data, a link to the owner, and links
    to other `cars` that the user owns:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对`http://localhost:8080/api/cars/3/owner`的请求返回汽车的所有者。响应现在包含所有者数据，指向所有者的链接以及用户拥有的其他`cars`的链接：
- en: '![](img/31f3bd7b-74e7-4630-ae0f-1236c809c3f7.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31f3bd7b-74e7-4630-ae0f-1236c809c3f7.png)'
- en: 'Spring Data Rest service provides all CRUD operations. The following table
    shows which HTTP methods you can use for different CRUD operations:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data Rest服务提供所有CRUD操作。以下表格显示了您可以用于不同CRUD操作的HTTP方法：
- en: '| **HTTP Method** | **CRUD** |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP方法** | **CRUD** |'
- en: '| `GET` | `Read` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `读取` |'
- en: '| `POST` | `Create` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | `创建` |'
- en: '| `PUT`/`PATCH` | `Update` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `PUT`/`PATCH` | `更新` |'
- en: '| `DELETE` | `Delete` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `删除` |'
- en: 'Next, we will look at how to delete a car from the database by using our RESTful
    web service. In a delete operation, you have to use the `DELETE` method and the
    link to the car that will be deleted (`http://localhost:8080/api/cars/{id}`).
    The following screenshot shows how you can delete one car with the ID `4` by using
    cURL. After the delete request, you can see that there are now two cars left in
    the database:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何通过使用我们的RESTful web服务从数据库中删除汽车。在删除操作中，您必须使用`DELETE`方法和将被删除的汽车的链接（`http://localhost:8080/api/cars/{id}`）。以下屏幕截图显示了如何使用cURL删除ID为`4`的汽车。删除请求后，您可以看到数据库中现在只剩下两辆汽车：
- en: '![](img/407f8dec-9bcd-4873-94c7-d8511f5f6df1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/407f8dec-9bcd-4873-94c7-d8511f5f6df1.png)'
- en: 'When we want to add a new car to the database, we have to use the `POST` method,
    and the link is `http://localhost:8080/api/cars`. The header must contain the Content-Type
    field with the value `Content-Type:application/json`, and the new car object will
    be embedded in the request body:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要向数据库中添加新的汽车时，我们必须使用`POST`方法，链接是`http://localhost:8080/api/cars`。标头必须包含带有值`Content-Type:application/json`的Content-Type字段，并且新的汽车对象将嵌入在请求体中：
- en: '![](img/4e18bf0b-cb25-4518-a14f-e75a5f33bd58.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e18bf0b-cb25-4518-a14f-e75a5f33bd58.png)'
- en: 'The response will send a newly created car object back. Now, if you again make
    a `GET` request to the `http://localhost:8080/api/cars` path, you can see that
    the new car exists in the database:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将发送一个新创建的汽车对象。现在，如果您再次对`http://localhost:8080/api/cars`路径发出`GET`请求，您可以看到新的汽车存在于数据库中：
- en: '![](img/5145856e-3e35-4b27-9db3-68430cddd478.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5145856e-3e35-4b27-9db3-68430cddd478.png)'
- en: To update entities, we have to use the `PATCH` method and the link to the car
    that we want to update  (`http://localhost:8080/api/cars/{id}`). The header must
    contain the Content-Type field with the value `Content-Type:application/json` and
    the car object, with edited data, will be given inside the request body. If you
    are using `PATCH`, you have to send only fields that are updates. If you are using
    `PUT`, you have to include all fields to request. Let's edit our car that we created
    in the previous example. We will change the color to white and fill in the register
    number that we left empty.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新实体，我们必须使用`PATCH`方法和我们要更新的汽车的链接（`http://localhost:8080/api/cars/{id}`）。标头必须包含带有值`Content-Type:application/json`的Content-Type字段，并且带有编辑数据的汽车对象将放在请求体中。如果您使用`PATCH`，您必须仅发送更新的字段。如果您使用`PUT`，您必须包含所有字段以请求。让我们编辑我们在上一个示例中创建的汽车。我们将颜色更改为白色，并填写我们留空的注册号码。
- en: 'We will also link an owner to the car by using the owner field. The content
    of the owner field is the link to the owner (`http://localhost:8080/api/owners/{id}`).
    The following screenshot shows the `PATCH` request content:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用owner字段将所有者链接到汽车。owner字段的内容是指向所有者的链接（`http://localhost:8080/api/owners/{id}`）。以下屏幕截图显示了`PATCH`请求内容：
- en: '![](img/08f4c1d3-94ce-423b-9fee-680672fc9265.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08f4c1d3-94ce-423b-9fee-680672fc9265.png)'
- en: 'You can see that the car is updated after you fetch all cars by using `GET`
    request:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，通过使用`GET`请求获取所有汽车后，汽车已更新：
- en: '![](img/ac790642-d5a0-4cda-b59e-1dac6a3d63aa.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac790642-d5a0-4cda-b59e-1dac6a3d63aa.png)'
- en: 'In the previous chapter, we created queries to our repository. These queries
    can also be included in our service. To include queries, you have to add the `@RepositoryRestResource`
    annotation to the repository class. Query parameters are annotated with the `@Param`
    annotation. The following source code shows our `CarRepository` with these annotations:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了对我们的存储库的查询。这些查询也可以包含在我们的服务中。要包含查询，您必须将`@RepositoryRestResource`注释添加到存储库类中。查询参数使用`@Param`注释进行注释。以下源代码显示了我们带有这些注释的`CarRepository`：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, when you make a `GET` request to the `http://localhost:8080/api/cars` path,
    you can see that there is a new endpoint called `/search`. Calling the `http://localhost:8080/api/cars/search`
    path returns the following response:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你向`http://localhost:8080/api/cars`路径发出`GET`请求时，你会看到一个名为`/search`的新端点。调用`http://localhost:8080/api/cars/search`路径会返回以下响应：
- en: '![](img/d0858edd-43c9-4651-9cf3-cf8cbad926c2.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0858edd-43c9-4651-9cf3-cf8cbad926c2.png)'
- en: 'From the response, you can see that both queries are now available in our service.
    The following URL demonstrates how to fetch cars by brand:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从响应中，你可以看到我们的服务现在都有这两个查询。以下URL演示了如何按品牌获取汽车：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/e13154d6-9ac3-4f7d-bd97-1b99d6954498.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e13154d6-9ac3-4f7d-bd97-1b99d6954498.png)'
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we created a RESTful web service with Spring Boot. First, we
    created a controller and one method that returns all cars in JSON format. Next,
    we used Spring Data REST to get a fully functional web service with all CRUD functionalities.
    We covered different types of requests that are needed to use CRUD functionalities
    of the service that we created. Finally, we also included our queries to service.
    In the next chapter we will secure our backend using Spring Security.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Spring Boot创建了一个RESTful web服务。首先，我们创建了一个控制器和一个以JSON格式返回所有汽车的方法。接下来，我们使用Spring
    Data REST获得了一个具有所有CRUD功能的完全功能的web服务。我们涵盖了使用CRUD功能所需的不同类型的请求。最后，我们还将我们的查询包含在服务中。在下一章中，我们将使用Spring
    Security保护我们的后端。
- en: Questions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is REST?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REST是什么？
- en: How can you create a RESTful web service with Spring Boot?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用Spring Boot创建一个RESTful web服务？
- en: How can you fetch items using our RESTful web service?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用我们的RESTful web服务获取项目？
- en: How can you delete items using our RESTful web service?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用我们的RESTful web服务删除项目？
- en: How can you add items using our RESTful web service?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用我们的RESTful web服务添加项目？
- en: How can you update items using our RESTful web service?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用我们的RESTful web服务更新项目？
- en: How can you use queries with our RESTful web service?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用我们的RESTful web服务进行查询？
- en: Further reading
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Pack has other great resources for learning about Spring Boot RESTful Web Services:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Pack还有其他关于学习Spring Boot RESTful Web服务的资源：
- en: '[https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition](https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition](https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition)'
- en: '[https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course](https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course](https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course)'
- en: '[https://www.packtpub.com/web-development/building-restful-web-service-spring](https://www.packtpub.com/web-development/building-restful-web-service-spring)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/building-restful-web-service-spring](https://www.packtpub.com/web-development/building-restful-web-service-spring)'
