- en: Chapter 6. Creating a Multimodule Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 创建多模块项目
- en: 'Now that we have already launched the rocket, let''s explore more of it. In
    this chapter, we will develop a `MyDistance` application from the previous chapter
    as a multimodule Maven project and learn how to create multimodule projects, build,
    and run them. The topics covered in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经发射了火箭，让我们更深入地探索它。在本章中，我们将以前一章的`MyDistance`应用程序为基础，将其作为一个多模块Maven项目进行开发，并学习如何创建多模块项目、构建和运行它们。本章涵盖的主题如下：
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简介
- en: Creating a parent project—POM
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建父项目—POM
- en: Creating a core module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建核心模块
- en: Creating a webapp module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建webapp模块
- en: Building a multimodule project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建多模块项目
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Software architecture states modularity as the degree to which a system's components
    may be separated and recombined. In software engineering, modularity refers to
    the extent to which a software/application can be divided into multiple modules
    to achieve the business goal. Modularity enhances manageability and reusability.
    The growing days has seen software getting more complex, and modularity is the
    need of the hour.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构将模块化定义为系统组件可能被分离和重新组合的程度。在软件工程中，模块化指的是软件/应用程序可以被划分为多个模块以实现业务目标的程度。模块化提高了可管理和可重用性。随着软件变得越来越复杂，模块化是当务之急。
- en: Multimodule projects consist of many modules that adapt to modularity. A multimodule
    project is identified by a parent/master POM referencing one or more `.sub` modules.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 多模块项目由许多适应模块化的模块组成。一个多模块项目通过一个引用一个或多个`.sub`模块的父/master POM来识别。
- en: 'A multimodule project constitutes of the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个多模块项目由以下内容组成：
- en: '**Parent project POM**: This glues and references all the other modules of
    a project'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父项目POM**：这粘合并引用了项目中的所有其他模块'
- en: '**Modules**: This includes submodules that serve different functions of the
    application and constitute the application'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：这包括服务于应用程序不同功能的子模块，并构成了应用程序'
- en: Parent POM is where you can put common dependencies in a single place and let
    other modules inherit it, that is, POM inheritance in modules. Usually, universal
    dependencies such as JUnit or log4j are the candidates of POM inheritance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 父POM是你可以将公共依赖放在一个地方，并让其他模块继承它的地方，即模块的POM继承。通常，JUnit或log4j这样的通用依赖是POM继承的候选者。
- en: 'The mechanism by which Maven handles multimodule projects is referred to as
    **reactor**. The reactor of Maven''s core has the following functions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Maven处理多模块项目的机制被称为**reactor**。Maven核心的reactor具有以下功能：
- en: Collects all the modules to build
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集所有要构建的模块
- en: Sorts the projects (modules) into the current build order
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目（模块）排序到当前的构建顺序中
- en: Builds the sorted projects in order
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按顺序构建排序后的项目
- en: The modules of the project are enclosed inside the `<modules> </modules>` tag
    by specifying each module with the `<module> </module>` tag. Similarly, the parents
    are enclosed inside the `<parent> </parent>` tag by specifying Maven coordinates.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 项目模块通过指定每个模块的`<module> </module>`标签被包含在`<modules> </modules>`标签内。同样，父模块通过指定Maven坐标被包含在`<parent>
    </parent>`标签内。
- en: 'Now, for illustration, we will take the `MyDistance` application from [Chapter
    5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven Project"), *Spicing
    Up a Maven Project*, and develop it as a multimodule project. The modules of the
    project would be as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了说明，我们将从[第5章](part0037_split_000.html#page "第5章. 为Maven项目增色")的`MyDistance`应用程序，*为Maven项目增色*，将其作为一个多模块项目进行开发。项目的模块如下：
- en: '`Distance-main`: This is the parent project, also known as parent POM, that
    glues and references different modules of the project, that is, `distance-core`
    and `distance-webapp`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Distance-main`: 这是父项目，也称为父POM，它将项目的不同模块（如`distance-core`和`distance-webapp`）粘合并引用'
- en: '`distance-core`: This module provides a simple distance conversion utility
    class'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`distance-core`: 此模块提供了一个简单的距离转换实用工具类'
- en: '`distance-webapp`: This is a web interface in which you can input the units
    that depend on the `distance-core` module to perform a conversion and respond
    to the results'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`distance-webapp`: 这是一个可以输入依赖于`distance-core`模块的单位进行转换并响应结果的Web界面'
- en: In the subsequent sections, we will get into the details of the preceding modules.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入了解前面的模块。
- en: Creating a parent project – POM
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建父项目 – POM
- en: 'The first step towards building a multimodule project is setting up a parent
    POM. To do this, follow the ensuing steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 建立多模块项目的第一步是设置父POM。为此，请按照以下步骤操作：
- en: Navigate to **File** | **New** and click on **Maven Project**. Alternatively,
    navigate to **File** | **New** and click on **Other...**. In the **Select a wizard**
    screen, search for `maven` via the search box, select **Maven Project**, and click
    on the **Next** button, as shown in the following screenshot:![Creating a parent
    project – POM](img/00067.jpeg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**文件** | **新建**并点击**Maven项目**。或者，转到**文件** | **新建**并点击**其他...**。在**选择向导**屏幕中，通过搜索框搜索`maven`，选择**Maven项目**，然后点击**下一步**按钮，如图所示：![创建父项目
    – POM](img/00067.jpeg)
- en: The **New Maven Project** wizard appears; make sure that you tick the checkbox
    **Create a simple project (skip archetype selection)**, as shown in the following
    screenshot, and click on **Next**:![Creating a parent project – POM](img/00068.jpeg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现**新建Maven项目**向导；确保勾选复选框**创建简单项目（跳过存档选择）**，如图所示，然后点击**下一步**：![创建父项目 – POM](img/00068.jpeg)
- en: The **New Maven project** configuration wizard appears; fill in the details
    as shown in the screenshot and click on **Finish**:![Creating a parent project
    – POM](img/00069.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现**新建Maven项目**配置向导；根据截图填写详细信息，然后点击**完成**：![创建父项目 – POM](img/00069.jpeg)
- en: 'Make sure that you choose the packaging as POM from the dropdown:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保从下拉菜单中选择打包类型为POM：
- en: '| **Field** | **Value** |'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **字段** | **值** |'
- en: '| --- | --- |'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组ID** | `com.packt.mvneclipse` |'
- en: '| **Artifact Id** | `Distance-main` |'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **工件ID** | `Distance-main` |'
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **版本** | `0.0.1-SNAPSHOT` |'
- en: '| **Packaging** | `pom` |'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **打包** | `pom` |'
- en: The corresponding project will get created, and the resulting screen would look
    as follows:![Creating a parent project – POM](img/00070.jpeg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建相应的项目，最终屏幕将如下所示：![创建父项目 – POM](img/00070.jpeg)
- en: We have the parent POM in place now.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了父POM。
- en: Creating a core module
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建核心模块
- en: 'The core module of `MyDistance` will contain a class that can be converted
    across different units, that is, from km/meter to yard/miles. Let''s name this
    core module `distance-core`. To create a core module, perform the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyDistance`的核心模块将包含一个可以将不同单位之间的值进行转换的类，即从千米/米到码/英里。让我们将这个核心模块命名为`distance-core`。要创建核心模块，请执行以下步骤：'
- en: Navigate to **File** | **New** and click on **Other…**. In the **Select a wizard**
    screen, search for `maven` via the search box, select **Maven Module**, and click
    on the **Next** button, as shown in the following screenshot:![Creating a core
    module](img/00071.jpeg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**文件** | **新建**并点击**其他…**。在**选择向导**屏幕中，通过搜索框搜索`maven`，选择**Maven模块**，然后点击**下一步**按钮，如图所示：![创建核心模块](img/00071.jpeg)
- en: The **New Maven Module** wizard appears; make sure to tick the checkbox **Create
    a simple project (skip archetype selection)**, provide the module name as `distance-core`,
    and browse to select the parent as `Distance-main`, as shown in the following
    screenshot:![Creating a core module](img/00072.jpeg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现**新建Maven模块**向导；确保勾选复选框**创建简单项目（跳过存档选择）**，提供模块名称为`distance-core`，并浏览选择父项目为`Distance-main`，如图所示：![创建核心模块](img/00072.jpeg)
- en: In the **Configure project** Maven module wizard, fill in the details provided
    in the table after the following screenshot and click on **Finish**:![Creating
    a core module](img/00073.jpeg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置项目**Maven模块向导中，填写以下截图后的表格中的详细信息，然后点击**完成**：![创建核心模块](img/00073.jpeg)
- en: '| **Field** | **Value** |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **字段** | **值** |'
- en: '| --- | --- |'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组ID** | `com.packt.mvneclipse` |'
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **版本** | `0.0.1-SNAPSHOT` |'
- en: '| **Packaging** | `jar` |'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **打包** | `jar` |'
- en: Since the core module just contains a Java class and is available to be used
    as a library for a web module of an application, the packaging type is `jar`.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于核心模块仅包含一个Java类，并且可以作为应用程序Web模块的库使用，因此打包类型为`jar`。
- en: 'The `distance-core` module gets created and the contents of the POM will look
    as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`distance-core`模块将被创建，POM的内容将如下所示：'
- en: '[PRE0]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the parent of the module is enclosed in the `<parent></parent>`
    tag. Also, the `groupId` and `version` tags will not be present for a module since
    we specified the same `groupId` and `version` as the parent in the **Configure
    Maven Module** wizard. We did this in the preceding code while creating a module.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，模块的父级被包含在`<parent></parent>`标签中。此外，对于模块，`groupId`和`version`标签将不会出现，因为我们已经在**配置
    Maven 模块**向导中指定了相同的`groupId`和`version`。我们在创建模块时在前面的代码中做了这件事。
- en: At any point, if we wish to change or add `groupId/version/artifactId`, we can
    always edit the `pom.xml` file since it's an XML file.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何时候，如果我们想更改或添加`groupId/version/artifactId`，我们都可以始终编辑`pom.xml`文件，因为它是一个 XML
    文件。
- en: The core module consists of a class file that performs the conversion across
    distance units. Now let's add a class; right-click on the project, navigate to
    **New**, select **Package**, and specify the package name as `com.packt.chpt6.mydistance.util`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 核心模块由一个执行跨距离单位转换的类文件组成。现在让我们添加一个类；在项目上右键单击，导航到**新建**，选择**包**，并指定包名为`com.packt.chpt6.mydistance.util`。
- en: Create a class named `ConversionUtil` in the preceding package. If you remember,
    we created this class in [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing
    Up a Maven Project"), *Spicing Up a Maven Project*. So, copy the contents of this
    class and save it.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的包中创建一个名为`ConversionUtil`的类。如果你还记得，我们在[第 5 章](part0037_split_000.html#page
    "第 5 章。为 Maven 项目增色")，*为 Maven 项目增色*中创建了此类。因此，复制此类的全部内容并保存。
- en: Now let's put a unit test class in place. Create a package, `com.packt.chpt6.mydistance.util`,
    in `src/test/java`. Add the class `ConversionUtilTest` to the corresponding package.
    Refer to [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven
    Project"), *Spicing Up a Maven Project*, where we created this test class; copy
    the contents of this class and save it. The resulting `src` structure will look
    as follows:![Creating a core module](img/00074.jpeg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们放置一个单元测试类。在`src/test/java`中创建一个包，名为`com.packt.chpt6.mydistance.util`。将类`ConversionUtilTest`添加到相应的包中。参考[第
    5 章](part0037_split_000.html#page "第 5 章。为 Maven 项目增色")，*为 Maven 项目增色*，其中我们创建了此测试类；复制此类的全部内容并保存。结果`src`结构将如下所示：[创建核心模块](img/00074.jpeg)
- en: 'You might notice that we have some errors, and the errors are due to the `TestCase`
    class not being resolved. To solve this error, add `jUnit` as a dependency to
    the parent module, the `pom.xml` file, as shown in the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到我们有一些错误，这些错误是由于`TestCase`类没有被解析。为了解决这个错误，将`jUnit`作为依赖项添加到父模块，即`pom.xml`文件中，如下所示：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Usually, JUnit and log4j dependencies, that is, common dependencies across modules,
    are put in one place in the parent POM and the modules inherit them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，JUnit 和 log4j 依赖项，即跨模块的通用依赖项，被放置在父 POM 的一个地方，并且模块继承它们。
- en: Creating a webapp module
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个名为`ConversionUtil`的类。
- en: 'The webapp module has a JSP file that has a form to accept the input. It also
    has a servlet that accepts the request parameters and performs the conversion
    using a core module and provides the response. Now let''s see how to get the webapp
    module in place by performing the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: webapp 模块有一个表单的 JSP 文件，用于接受输入。它还有一个接受请求参数并使用核心模块执行转换并提供响应的 servlet。现在让我们通过以下步骤来查看如何放置
    webapp 模块：
- en: Navigate to **File** | **New** and click on **Other...**; in the **Select a
    wizard** screen, search for `maven` via the search box, select **Maven Module**,
    and click on the **Next** button as shown in the following screenshot:![Creating
    a webapp module](img/00071.jpeg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **新建**，然后点击**其他...**；在**选择向导**屏幕中，通过搜索框搜索`maven`，选择**Maven 模块**，并点击以下截图所示的**下一步**按钮：[创建
    webapp 模块](img/00071.jpeg)
- en: In the **New Maven Module** window that will follow, provide the module name
    as `distance-webapp` and browse to select the parent as `Distance-main`.![Creating
    a webapp module](img/00075.jpeg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的**新 Maven 模块**窗口中，将模块名称设置为`distance-webapp`，并浏览选择父模块为`Distance-main`。[创建
    webapp 模块](img/00075.jpeg)
- en: In the **Select an Archetype** window, search for `webapp` via the search box,
    select **maven-archetype-webapp**, and click on **Next** to proceed, as shown
    in the following screenshot:![Creating a webapp module](img/00076.jpeg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择存档类型**窗口中，通过搜索框搜索`webapp`，选择**maven-archetype-webapp**，然后点击**下一步**继续，如下所示：[创建
    webapp 模块](img/00076.jpeg)
- en: 'In the **New Maven module** window, fill in the details provided in the following
    table and click on **Finish** as shown in the screenshot that follows this table:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新建 Maven 模块**窗口中，填写以下表格中提供的详细信息，然后单击**完成**，如下表所示的截图所示：
- en: '| **Field** | **Value** |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **字段** | **值** |'
- en: '| --- | --- |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **Group Id** | `com.packt.mvneclipse` |'
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **版本** | `0.0.1-SNAPSHOT` |'
- en: '| **Package** | `com.packt.chpt6.mydistance` |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **Package** | `com.packt.chpt6.mydistance` |'
- en: '![Creating a webapp module](img/00077.jpeg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 webapp 模块](img/00077.jpeg)'
- en: The webapp module will be created, and the resulting structure will look like
    the following screenshot:![Creating a webapp module](img/00078.jpeg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建 webapp 模块，生成的结构将如下截图所示：![创建 webapp 模块](img/00078.jpeg)
- en: Now if we look at the parent project's structure, we might notice that it has
    a reference to each of the modules, as shown in the following screenshot:![Creating
    a webapp module](img/00079.jpeg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果我们查看父项目的结构，我们可能会注意到它对每个模块都有一个引用，如下面的截图所示：![创建 webapp 模块](img/00079.jpeg)
- en: 'Also, if we take note of the `pom.xml` file of the parent project, we will
    see how modules are being added to the `<module>` tag as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，如果我们注意查看父项目的 `pom.xml` 文件，我们会看到模块是如何添加到 `<module>` 标签中的，如下所示：
- en: '[PRE2]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the webapp module''s `pom.xml` file and add the dependencies for `log4j`,
    servlet, and Tomcat, as shown in the following code; this is also discussed in
    [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven Project"),
    *Spicing Up a Maven Project*, in more detail:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 webapp 模块的 `pom.xml` 文件，并添加 `log4j`、servlet 和 Tomcat 的依赖项，如下所示；这也在[第 5 章](part0037_split_000.html#page
    "第 5 章。为 Maven 项目添加风味")，*为 Maven 项目添加风味*中进行了更详细的讨论：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, add `distance-core` as a dependency since it is used by the webapp to
    perform the conversion, as shown in the following code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，由于 webapp 使用它进行转换，因此请添加 `distance-core` 作为依赖项，如下所示：
- en: '[PRE4]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add the `log4j.properties` file to the `resources` folder. Refer to the *Adding
    Resources* section in [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing
    Up a Maven Project"), *Spicing Up a Maven Project*.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `log4j.properties` 文件添加到 `resources` 文件夹。请参阅[第 5 章](part0037_split_000.html#page
    "第 5 章。为 Maven 项目添加风味")中的*添加资源*部分，*为 Maven 项目添加风味*。
- en: Add the form to get input and add servlets (refer to sections *Adding a form
    for getting input* and *Adding Servlet* of [Chapter 5](part0037_split_000.html#page
    "Chapter 5. Spicing Up a Maven Project"), *Spicing Up a Maven Project*).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加表单以获取输入并添加 servlet（请参阅[第 5 章](part0037_split_000.html#page "第 5 章。为 Maven
    项目添加风味")中的*添加获取输入的表单*和*添加 Servlet*部分，*为 Maven 项目添加风味*）。
- en: Building a multimodule project
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多模块项目
- en: 'Now that we are done with writing the code for modules, let''s build the project.
    Right-click on the parent project—in this case, `Distance-main`—select **Run As**,
    and click on **Maven test**. This should compile and run the unit tests. An excerpt
    of the output in the console is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了模块代码的编写，让我们构建项目。在父项目（在这种情况下为 `Distance-main`）上右键单击，选择**运行**，然后单击**Maven
    测试**。这应该会编译并运行单元测试。控制台输出的摘录如下：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The mechanism referred to as a reactor knows the order of building a project.
    Now again, right-click on **Distance-main**, select **Run As**, and click on **Maven
    install** to install the modules in a local repository.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 指称为反应器的机制知道构建项目的顺序。现在再次，在**Distance-main**上右键单击，选择**运行**，然后单击**Maven install**以在本地仓库中安装模块。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always make sure to clean the project by running Maven `clean` via the **Run
    As** option if any changes occur; alternatively, you can reinstall the project
    using **Maven install**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何更改发生，请始终确保通过**运行**选项运行 Maven `clean` 来清理项目；或者，您可以使用 **Maven install** 重新安装项目。
- en: Running the application
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the application, right-click on the webapp module of the parent project
    highlighted in the following screenshot, select **Run As**, and then click on
    **Run Configurations...**. In the **Run configuration** window, specify the goal
    as `tomcat7:run` and click on the **Run** button. The web application will run
    at `http://localhost:8080/distance-webapp/`; point the browser to this location
    and perform the conversion:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，在以下截图中突出显示的父项目的 webapp 模块上右键单击，选择**运行**，然后单击**运行配置...**。在**运行配置**窗口中，指定目标为
    `tomcat7:run`，然后单击**运行**按钮。Web 应用程序将在 `http://localhost:8080/distance-webapp/`
    运行；将浏览器指向此位置并执行转换：
- en: '![Running the application](img/00080.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/00080.jpeg)'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create a multimodule project and then build
    and run the application. In the next chapter, we will take a sneak peek into m2eclipse
    and learn how to customize it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建一个多模块项目，然后构建和运行应用程序。在下一章中，我们将提前窥视m2eclipse，并学习如何对其进行自定义。
