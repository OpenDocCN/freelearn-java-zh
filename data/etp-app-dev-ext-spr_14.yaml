- en: Appendix A. Introducing Spring Data JPA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A.介绍Spring Data JPA
- en: 'The Spring Data JPA website, [http://projects.spring.io/spring-data-jpa/](http://projects.spring.io/spring-data-jpa/),
    has an opening paragraph that succinctly describes the problems of implementing
    a JPA-based DAO layer:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA网站[http://projects.spring.io/spring-data-jpa/](http://projects.spring.io/spring-data-jpa/)有一个开头段落简洁地描述了实现基于JPA的DAO层的问题：
- en: '*Implementing a data access layer of an application has been cumbersome for
    quite a while. Too much boilerplate code has to be written to execute simple queries
    as well as perform pagination, and auditing. Spring Data JPA aims to significantly
    improve the implementation of data access layers by reducing the effort to the
    amount that''s actually needed. As a developer you write your repository interfaces,
    including custom finder methods, and Spring will provide the implementation automatically.*'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*实现应用程序的数据访问层已经相当麻烦了。必须编写大量样板代码来执行简单的查询以及执行分页和审计。Spring Data JPA旨在通过减少实际需要的工作量，显着改善数据访问层的实现。作为开发人员，您编写存储库接口，包括自定义查找方法，Spring将自动提供实现。*'
- en: In [Chapter 4](ch04.html "Chapter 4. Data Access Made Easy"), *Data Access Made
    Easy*, we implemented the DAO design pattern to abstract database persistence
    into a well-defined layer. We deliberately decided *not* to introduce Spring Data
    JPA in this chapter, as the target audience were intermediate developers who may
    not have had experience with the Java Persistence API. JPA terminology, concepts,
    and practical examples were introduced to give you an understanding of how JPA
    works. The use of Java interfaces, Java generics, and named query concepts are
    fundamental to understanding the elegant way in which Spring Data JPA works.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章 数据访问变得容易")中，*数据访问变得容易*，我们实现了DAO设计模式，将数据库持久性抽象为一个明确定义的层。我们故意决定在本章中*不*介绍Spring
    Data JPA，因为目标受众是可能没有使用Java持久性API经验的中级开发人员。介绍了JPA术语、概念和实际示例，以便让您了解JPA的工作原理。使用Java接口、Java泛型和命名查询概念对于理解Spring
    Data JPA的优雅工作方式至关重要。
- en: Spring Data JPA does not require you to write an implementation of the repository
    interface. The implementations are created "on the fly" when you run the Spring
    Data JPA application. All that the developer needs to do is write the DAO Java
    interfaces that extend `org.springframework.data.repository.CrudRepository` and
    adhere to the Spring Data JPA naming conventions. The DAO implementation is created
    for you at runtime.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA不要求您编写存储库接口的实现。当您运行Spring Data JPA应用程序时，这些实现是“即时”创建的。开发人员所需做的就是编写扩展`org.springframework.data.repository.CrudRepository`并遵循Spring
    Data JPA命名约定的DAO Java接口。DAO实现会在运行时为您创建。
- en: 'Internally, Spring Data JPA will implement the code that performs the same
    functionality that was implemented in [Chapter 4](ch04.html "Chapter 4. Data Access
    Made Easy"), *Data Access Made Easy*. Using Spring Data we could, for example,
    rewrite the `CompanyDao` interface as:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA将在内部实现执行与[第4章](ch04.html "第4章 数据访问变得容易")中实现的相同功能的代码，*数据访问变得容易*。使用Spring
    Data，我们可以将`CompanyDao`接口重写为：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `CompanyDao` implementation will include the `findAll` method as it is defined
    in the `CrudRepository` interface; we do not need to define it as a separate method.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompanyDao`实现将包括`findAll`方法，因为它在`CrudRepository`接口中定义；我们不需要将其定义为单独的方法。'
- en: If you are comfortable with JPA and the content covered in [Chapter 4](ch04.html
    "Chapter 4. Data Access Made Easy"), *Data Access Made Easy*, you should explore
    the Spring Data JPA framework. Implementing JPA-based repositories will then become
    significantly easier!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉JPA和[第4章](ch04.html "第4章 数据访问变得容易")中涵盖的内容，*数据访问变得容易*，那么您应该探索Spring Data
    JPA框架。然后，实现基于JPA的存储库将变得更加容易！
