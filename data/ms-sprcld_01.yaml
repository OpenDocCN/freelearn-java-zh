- en: Introduction to Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务简介
- en: Microservices are one of the hottest trends to emerge in the IT world during
    the last few years. It is relatively easy to identify the most important reasons
    for their growing popularity. Both their advantages and disadvantages are well
    known, although what we describe as disadvantages can be easily solved using the
    right tools. The advantages that they offer include scalability, flexibility,
    and independent delivery; these are the reasons for its rapidly growing popularity. There
    are a few earlier IT trends that had some influence over this growth in the popularity
    of microservices. I'm referring to trends such as the usage of common cloud-based
    environments and the migration from relational databases to NoSQL.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是近年来IT世界中出现的最热门趋势之一。相对容易地识别出它们日益受欢迎的最重要原因。它们的优点和缺点都是众所周知的，尽管我们所说的缺点可以通过使用正确的工具轻易解决。它们提供的优势包括可扩展性、灵活性和独立交付；这些是它们迅速受欢迎的原因。有一些早期的IT趋势对微服务受欢迎程度的增长产生了一些影响。我指的是像使用常见的基于云的环境和从关系型数据库迁移到NoSQL这样的趋势。
- en: 'Before discussing this at length, let''s see the topics we will cover in this
    chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细讨论之前，让我们看看本章我们将要覆盖的主题：
- en: Cloud-native development with Spring Cloud
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Cloud的云原生开发
- en: The most important elements in microservices-based architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务架构中的最重要元素
- en: Models of interservice communication
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务间通信模型
- en: Introduction to circuit breakers and fallback patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍断路器及其回退模式
- en: The blessings of microservices
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的恩赐
- en: The concept of microservices defines an approach to the architecture of IT systems
    that divides an application into a collection of loosely coupled services that
    implement business requirements. In fact, this is a variant of the concept of **service-oriented
    architecture** (**SOA**). One of the most important benefits of a migration to
    microservices-based architecture is an ability to perform continuous delivery
    of large and complex applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务概念定义了一种IT系统架构方法，该方法将应用程序划分为一系列松耦合的服务，这些服务实现业务需求。实际上，这是**面向服务架构**（**SOA**）概念的一个变种。迁移到微服务架构的最重要好处之一是能够执行大型复杂应用程序的持续交付。
- en: By now, you have probably had an opportunity to read some books or articles
    about microservices. I think that most of them would have given you a detailed
    description of their advantages and drawbacks. There are many advantages to using
    microservices. The first is that microservices are relatively small and easy to
    understand for a new developer in a project. We usually want to make sure that
    the change in the code performed in one place would not have an unwanted effect
    on all the other modules of our application. With microservices, we can have more
    certainty about this because we implement only a single business area, unlike
    monolithic applications where sometimes even seemingly unrelated functionalities
    are put in the same boat. That is not all. I have noticed that, usually, it is
    easier to maintain expected code quality in small microservices than in a large
    monolith where many developers have introduced their changes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能有机会阅读一些关于微服务的书籍或文章。我认为，大多数书籍都会给你详细描述它们的优点和缺点。使用微服务有很多优点。首先，对于一个新项目开发者来说，微服务相对较小，容易理解。我们通常想要确保代码中的一个变化不会对我们应用程序的所有其他模块产生不希望的效果。与微服务相比，我们可以对此有更多的确定性，因为我们只实现一个单一的业务领域，而不是像单体应用那样，有时即使看似不相关的功能也会放在同一个篮子里。不仅如此。我注意到，通常，在小微服务中维护预期的代码质量比在一个大的单体应用中（许多开发者引入了他们的更改）要容易。
- en: The second thing I like about microservices architecture concerns division.
    Until now, when I had to deal with complex enterprise systems, I always saw that
    dividing the system into subsystems was done according to other subsystems. For
    example, telecommunication organizations always have a billing subsystem. Then
    you create a subsystem that hides the billing complexity and provides an API.
    Then you find out that you need data that can't be stored in the billing system
    because it is not easily customizable. So you create another subsystem. This leads
    in effect to you building a complicated subsystem mesh, which is not easy to understand,
    especially if you are a new employee in the organization. With microservices,
    you do not have problems such as this. If they are well-designed, every microservice
    should be responsible for an entire selected area. In some cases, those areas
    are similar regardless of the sector in which an organization is active.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢微服务架构的第二个方面与划分有关。到目前为止，当我不得不处理复杂的企业系统时，我总是看到系统根据其他子系统进行划分。例如，电信组织总是有一个计费子系统。然后你创建一个子系统来隐藏计费复杂性并提供一个API。然后你发现你需要存储在计费系统中无法存储的数据，因为它不容易定制。所以你创建另一个子系统。这实际上导致你构建了一个复杂的子系统网格，如果不你是组织中的新员工，尤其难以理解。使用微服务，你不会有这样的问题。如果它们设计得很好，每个微服务都应该负责一个完整的选择区域。在某些情况下，这些区域与组织活动的部门无关。
- en: Building microservices with Spring Framework
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Framework构建微服务
- en: Although the concept of microservices has been an important topic for some years,
    there are still not many stable frameworks that support all the features needed
    to run full microservices environments. Since the beginning of my adventure with
    microservices, I have been trying to keep up with the latest frameworks and find
    out the features developed towards the needs of microservices. There are some
    other interesting solutions, such as Vert.x or Apache Camel, but none of them
    is a match for Spring Framework.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管微服务概念已经是几年的重要话题，但支持运行完整微服务环境所需的所有功能的稳定框架仍然不多。自从我开始微服务的冒险以来，我一直试图跟上最新的框架，并找出针对微服务需求发展的特性。还有其他一些有趣的解决方案，如Vert.x或Apache
    Camel，但它们没有一个能与Spring Framework相匹敌。
- en: Spring Cloud implements all proven patterns that are used in microservice-based
    architecture, such as service registries, the configuration server, circuit breakers,
    cloud buses, OAuth2 patterns, and API gateways. It has a strong community, therefore
    new features are released at a high frequency. It is based on Spring's open programming
    model used by millions of Java developers worldwide. It is also well-documented.
    You won't have any problems in finding many available examples of Spring Framework
    usage online.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud实现了所有在微服务架构中使用的经过验证的模式，如服务注册表、配置服务器、断路器、云总线、OAuth2模式和API网关。它拥有强大的社区，因此新功能以高频率发布。它基于Spring的开放编程模型，该模型被全球数百万Java开发者使用。它也被很好地文档化。你在线找到许多可用的Spring
    Framework使用示例不会有任何问题。
- en: Cloud-native development
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生开发
- en: Microservices are intrinsically linked to cloud-computing platforms, but the
    actual concept of microservices is nothing new. This approach has been applied
    in the IT development world for many years, but now, through the popularity of
    cloud solutions, it has evolved to a higher level. It is not hard to point out
    the reasons for this popularity. The use of a cloud offers you scalability, reliability,
    and low maintenance costs in comparison with on-premises solutions inside the
    organization. This has led to the rise of cloud-native application development
    approaches that are intended to give you the benefits from all of the advantages
    offered by cloud-like elastic scaling, immutable deployments, and disposable instances.
    It all comes down to one thing—decreasing the time and cost that is needed to
    meet new requirements. Today, software systems and applications are being improved
    continuously. If you have a traditional approach to development, based on monoliths,
    a code base grows and becomes too complex for modifications and maintenance. Introducing
    new features, frameworks, and technologies becomes hard, which in turn impacts
    innovations and inhibits new ideas. We can't argue with that.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务与云计算平台有着内在的联系，但微服务的概念并不是什么新东西。这种方法已经在IT开发世界中应用了多年，但现在，随着云解决方案的普及，它已经发展到了一个新的高度。指出这种普及的原因并不困难。与组织内部的本地解决方案相比，使用云可以为你提供可扩展性、可靠性和低维护成本。这导致了云原生应用开发方法的兴起，旨在让你充分利用云提供的所有优势，如弹性扩展、不可变部署和可弃实例。这一切都归结于一点——减少满足新需求所需的时间和成本。如今，软件系统和应用程序正在不断地得到改进。如果你采用基于单体的传统开发方法，代码库会不断增长，变得过于复杂，难以进行修改和维护。引入新功能、框架和技术变得困难，从而影响创新，抑制新想法。这是无法争辩的。
- en: There is also another side to this coin. Today, practically everyone thinks
    about migration to the cloud, partly because it's trendy. Does everyone need this?
    Certainly not. Those who are not absolutely sure about migrating their applications
    to a remote cloud provider, such as AWS, Azure, or Google, would like to at least
    have an on-premises private cloud or Docker containers. But will it really bring
    them the benefits that compensate for expenses incurred? It is worth answering
    that question before looking at cloud-native development and cloud platforms.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题还有另一面。如今，几乎每个人都考虑迁移到云端，部分原因是因为这是潮流。每个人都需要这样做吗？当然不是。那些不确定是否要将应用程序迁移到远程云提供商（如AWS、Azure或Google）的人，至少希望拥有一个本地私有云或Docker容器。但这真的能带来补偿所花费费用的好处吗？在考虑云原生开发和云平台之前，值得回答这个问题。
- en: 'I''m not trying to dissuade you from using Spring Cloud—quite the opposite.
    We have to thoroughly understand what cloud-native development is. Here is a really
    fine definition:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是想阻止你使用Spring Cloud，恰恰相反。我们必须彻底理解什么是云原生开发。这里有一个非常好的定义：
- en: '"A native cloud application is a program that is specifically designed for
    a cloud computing environment as opposed to simply being migrated to the cloud."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “云原生应用程序是一个专门为云计算环境而设计的程序，而不是简单地迁移到云端。”
- en: Spring is designed to accelerate your cloud-native development. Building an
    application with Spring Boot is very quick; I'll show you how to do this in detail
    in the next chapter. Spring Cloud implements microservice architecture patterns
    and helps us in using the most popular solutions from that field. Applications
    developed using these frameworks can easily be adapted to be deployed on Pivotal
    Cloud Foundry or Docker containers, but they might as well be launched in the
    traditional way as separated processes on one or more machines, and you would
    have the advantage of a microservices approach. Let's now dive into the microservices
    architecture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring旨在加速你的云原生开发。使用Spring Boot构建应用程序非常快；我将在下一章详细展示如何做到这一点。Spring Cloud实现微服务架构模式，并帮助我们使用该领域最受欢迎的解决方案。使用这些框架开发的应用程序可以轻松地适应在Pivotal
    Cloud Foundry或Docker容器上部署，但它们也可以以传统方式作为一台或多台机器上的分离进程启动，并且你会拥有微服务方法的优点。现在让我们深入了解一下微服务架构。
- en: Learning the microservices architecture
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习微服务架构
- en: 'Let''s imagine that a client approaches you, wanting you to design a solution
    for them. They need some kind of banking application that has to guarantee data
    consistency within the whole system. Our client had been using an Oracle database
    until now and has also purchased support from their side. Without thinking too
    much, we decide to design a monolithic application based on a relational data
    model. You can see a simplified diagram of the system''s design here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设想一下，一个客户找上门来，希望您为他们设计一个解决方案。他们需要某种银行应用程序，该程序需要在整个系统中保证数据一致性。我们的客户到目前为止一直使用Oracle数据库，并且还从他们那里购买了支持。不假思索，我们决定设计一个基于关系数据模型的单体应用程序。您可以在以下简化系统设计图中看到系统设计：
- en: '![](img/a7bfd463-0994-4cfc-9d65-fe5e5dedb604.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7bfd463-0994-4cfc-9d65-fe5e5dedb604.png)'
- en: 'There are four entities that are mapped into the tables in the database:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中映射了四个实体：
- en: The first of them, **Customer**, stores and retrieves the list of active clients
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个实体，**客户**，存储和检索活动客户列表。
- en: Every customer could have one or more accounts, which are operated by the **Account**
    entity
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户可能有一个或多个账户，这些账户由**Account**实体操作。
- en: The **Transfer** entity is responsible for performing all transfers of funds
    between accounts within the system
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转账**实体负责执行系统内账户间所有资金的转账。'
- en: There is also the **Product** entity that is created to store information such
    as the deposits and credits assigned to the clients
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个**产品**实体，用于存储诸如客户存款和信贷等信息。
- en: Without going into further details, the application exposes the API that provides
    all the necessary operations for realizing actions on the designed database. Of
    course, the implementation is in compliance with the three-layer model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不深入讨论具体细节，应用程序暴露了API，提供了实现对设计数据库上操作的所有必要操作。当然，实现符合三层模型。
- en: Consistency is not the most important requirement anymore; it is not even obligatory.
    The client expects a solution, but does not want the development to require the
    redeployment of the whole application. It should be scalable and should easily
    be able to extend new modules and functionalities. Additionally, the client does
    not put pressure on the developer to use Oracle or another relational database—not
    only that, but he would be happy to avoid using it. Are these sufficient reasons
    to decide on migrating to microservices? Let's just assume that they are. We divide
    our monolithic application into four independent microservices, each one of them
    with a dedicated database. In some cases, it can still be a relational database,
    while in others it can be a NoSQL database. Now, our system consists of many services
    that are independently built and run in our environment. Along with an increase
    in the number of microservices, there is a rising level of system complexity.
    We would like to hide that complexity from the external API client, which should
    not be aware that it talks to service *X* but not *Y*. The gateway is responsible
    for dynamically routing all requests to different endpoints. For example, the
    word *dynamically* means that it should be based on entries in the service discovery,
    which I'll talk about later in the section *Understanding the need for service
    discovery*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性不再是最重要的要求，甚至不再是强制性的。客户期望一个解决方案，但不想让开发需要重新部署整个应用程序。系统应该是可扩展的，并且能够轻松地扩展新的模块和功能。另外，客户不会对开发者使用Oracle或其他关系型数据库施加压力——不仅如此，他还很高兴能避免使用它。这些足够成为决定迁移到微服务的理由吗？让我们假设它们是。我们将我们的单体应用程序分成四个独立的微服务，每个都有自己的专用数据库。在某些情况下，它仍然可以是关系型数据库，而在其他情况下则可以是NoSQL数据库。现在，我们的系统由许多独立构建和在我们环境中运行的服务组成。随着微服务数量的增加，系统复杂性也在上升。我们希望能够将这种复杂性隐藏在外部API客户端之外，它不应该知道它正在与服务*X*而不是*Y*进行通信。网关负责将所有请求动态路由到不同的端点。例如，单词*dynamically*意味着它应该基于服务发现中的条目，关于服务发现的需要，我将在后面的部分*理解服务发现的需求*中讨论。
- en: 'Hiding invocations of specific services or dynamic routing is not the only
    function of an API gateway. Since it is the entry point to our system, it can
    be a great place to track important data, collect metrics of requests, and count
    other statistics. It can enrich requests or response headers in order to include
    some additional information that is usable by the applications inside the system.
    It should perform some security actions, such as authentication and authorization,
    and should be able to detect the requirements for each resource and reject requests
    that do not satisfy them. Here''s a diagram that illustrates the sample system,
    consisting of four independent microservices, which is hidden from an external
    client behind an API gateway:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏特定服务的调用或动态路由并不是API网关的唯一功能。由于它是系统的入口点，因此它可以是一个跟踪重要数据、收集请求指标和其他统计信息的好地方。它可以通过丰富请求或响应头，来包含系统内部应用程序可用的某些额外信息。它应执行一些安全操作，例如身份验证和授权，并应能够检测到每个资源的每个要求，并拒绝不满足它们的请求。下面是一个说明示例系统的图表，该系统由四个独立的微服务组成，隐藏在API网关后面的外部客户端中：
- en: '![](img/fd59b589-e29e-45b3-9496-2a8380086a2d.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd59b589-e29e-45b3-9496-2a8380086a2d.png)'
- en: Understanding the need for service discovery
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解服务发现的需求
- en: 'Let''s imagine that we have already divided our monolithic application into
    smaller, independent services. From the outside, our system still looks the same
    as before, because its complexity is hidden behind the API gateway. Actually,
    there are not many microservices, but, there may well be many more. Additionally,
    each of them can interact with the others. That means that every microservice
    has to keep information about the others'' network addresses. Maintaining such
    a configuration could be very troublesome, especially when it comes down to manually
    overwriting every configuration. And what if those addresses are changing dynamically
    after restart? The following diagram shows the calling routes between our example
    microservices:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经将我们的单体应用程序划分为更小、独立的微服务。从外部看，我们的系统仍然和以前看起来一样，因为其复杂性隐藏在API网关后面。实际上，微服务并不多，但可能有更多。此外，它们中的每一个都可以与其他微服务进行交互。这意味着每个微服务都必须保留有关其他微服务的网络地址的信息。维护此类配置可能非常麻烦，尤其是当涉及到手动重写每个配置时。那么如果这些地址在重启后动态变化呢？下面的图表显示了示例微服务之间的调用路由：
- en: '![](img/678ec5f0-b143-418f-a2a5-fc16296b7f3d.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/678ec5f0-b143-418f-a2a5-fc16296b7f3d.png)'
- en: Service discovery is the automatic detection of devices and services offered
    by these devices on a computer network. In the case of microservice-based architecture,
    this is the necessary mechanism. Every service after startup should register itself
    in one central place that is accessible by all other services. The registration
    key should be the name of a service or an identificator, which has to be unique
    within the whole system in order to enable others to find and call the service
    using that name. Every single key with the given name has some values assigned
    to it. In the most common cases, these attributes indicate the network location
    of the service. To be more accurate, they indicate one of the instances of the
    microservice because it can be multiplied as independent applications running
    on different machines or ports. Sometimes it is possible to send some additional
    information, but it depends on the concrete service discovery provider. However,
    the important thing here is that under the one key, more than one instance of
    the same service may be registered. In addition to registration, each service
    gets a full list of the other services registered on the particular discovery
    server. Not only that, every microservice must be aware of any changes in the
    registration list. This may be achieved by periodically renewing the configuration
    earlier collected from the remote server.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 服务发现是指在计算机网络上自动检测设备和设备提供的服务。在微服务架构中，这是必要的机制。每个服务启动后应该在自己名称的一个中央位置注册，以便其他所有服务都能访问。注册键应该是服务的名称或标识符，在整个系统中必须是唯一的，以便其他人能够通过该名称找到并调用该服务。每个具有给定名称的键都有一些值与之关联。在大多数情况下，这些属性指示服务的网络位置。更准确地说，它们指示微服务的一个实例，因为它可以作为在不同机器或端口上运行的独立应用程序进行复制。有时可以发送一些附加信息，但这取决于具体的服务发现提供程序。然而，重要的是，在同一键下，可以注册同一服务的多个实例。除了注册，每个服务还会获得其他注册在特定发现服务器上的服务完整列表。不仅如此，每个微服务都必须了解注册列表的任何更改。这可以通过定期更新从远程服务器先前收集的配置来实现。
- en: 'Some solutions combine the usage of service discovery with the server configuration
    feature. When it comes right down to it, both approaches are pretty similar. The
    configuration of the server lets you centralize the management of all configuration
    files in your system. Usually, such a configuration is then a server as a REST
    web service. Before startup, every microservice tries to connect to the server
    and get the parameters prepared especially for it. One of the approaches stores
    such a configuration in the version control system—for example, Git. Then the
    configuration server updates its Git working copy and serves all properties as
    a JSON. In another approach, we can use solutions that store key-value pairs and
    fulfill the role of providers during the service discovery procedure. The most
    popular tools for this are Consul and Zookeeper. The following diagram illustrates
    an architecture of a system that consists of some microservices with a database
    backend that are registered in one central service known as a **discovery service**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些解决方案结合了服务发现和服务器配置功能的使用。归根结底，这两种方法都非常相似。服务器的配置让你能够集中管理系统中的所有配置文件。通常，这样的配置是一个作为REST
    web服务的服务器。在启动之前，每个微服务都会尝试连接到服务器并获取为其准备好的参数。一种方法是将这样的配置存储在版本控制系统中，例如Git。然后配置服务器更新其Git工作副本，并将所有属性作为JSON提供。另一种方法是使用存储键值对的解决方案，在服务发现过程中充当提供者的角色。最受欢迎的工具是Consul和Zookeeper。以下图表说明了一个由一些微服务组成的系统架构，这些微服务带有数据库后端，并注册在一个名为**发现服务**的中央服务中：
- en: '![](img/f85f1ca3-e8b1-47ac-8097-785cc2599a49.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f85f1ca3-e8b1-47ac-8097-785cc2599a49.png)'
- en: Communication between services
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务之间的通信
- en: In order to guarantee the system's reliability, we cannot allow a situation
    where each service would have only one instance running. We usually aim to have
    a minimum of two running instances in case one of them experiences a failure.
    Of course, there could be more, but we'll keep it low for performance reasons.
    Anyway, multiple instances of the same service make it necessary to use load balancing
    for incoming requests. Firstly, the **load balancer** is usually built into an
    API gateway. This load balancer should get the list of registered instances from
    the discovery server. If there is no reason not to, then we usually use a round-robin
    rule that balances incoming traffic 50/50 between all running instances. The same
    rule also applies to load balancers on the microservices side.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保证系统的可靠性，我们不能让每个服务只运行一个实例。我们通常希望至少有两个实例在运行，以防其中一个出现故障。当然，可以更多，但我们为了性能原因会尽量减少。无论如何，相同服务多个实例的存在使得使用负载均衡来处理传入请求变得必要。首先，负载均衡器通常内置在API网关中。这个负载均衡器应该从发现服务器获取注册实例的列表。如果没有不用的理由，我们通常使用轮询规则，使传入流量在所有运行实例之间平均分配。同样的规则也适用于微服务侧的负载均衡器。
- en: 'The following diagram illustrates the most important components that are involved
    in interservice communication between multiple instances of two sample microservices:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了两个示例微服务实例之间服务间通信的最重要的组件：
- en: '![](img/8c6c8970-d0da-44c2-b4c9-ce53c6919bfb.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c6c8970-d0da-44c2-b4c9-ce53c6919bfb.png)'
- en: Most people, when they hear about microservices, consider it to consist of RESTful
    web services with JSON notation, but that's just one of the possibilities. We
    can use some other interaction styles, which, of course, apply not only to microservices-based
    architecture. The first categorization that should be performed is one-to-one
    or one-to-many communication. In one-to-one interaction, every incoming request
    is processed by exactly one service instance while, in one-to-many, it is processed
    by multiple service instances. But the most popular division criterion is whether
    the call is synchronous or asynchronous. Additionally, asynchronous communication
    can be divided into notifications. When a client sends a request to a service,
    but a reply is not expected, it can just perform a simple asynchronous call, which
    does not block a thread and replies asynchronously.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们听到微服务时，他们认为它由RESTful web服务组成，使用JSON表示法，但这只是可能性之一。我们可以使用一些其他的交互方式，这些方式当然不仅适用于基于微服务的架构。首先应该执行的分类是一对一或一对多的通信。在一对一的交互中，每个传入请求都由一个服务实例处理，而在一对多的情况下，它由多个服务实例处理。但最流行的分类标准是调用是同步还是异步。此外，异步通信可以分为通知。当客户端向服务发送请求，但不需要回复时，它只需执行一个简单的异步调用，这不会阻塞线程，而是异步回复。
- en: Furthermore, it is worth mentioning reactive microservices. Now, from version
    5, Spring also supports this type of programming. There are also libraries with
    Reactive support for interaction with NoSQL databases, such as MongoDB or Cassandra.
    The last well-known communication type is publish-subscribe. This is a one-to-many
    interaction type where a client publishes a message that is then consumed by all
    listening services. Typically, this model is realized using message brokers, such
    as Apache Kafka, RabbitMQ, and ActiveMQ.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得提及的是反应式微服务。现在，从版本5开始，Spring也支持这种类型的编程。还有支持与NoSQL数据库（如MongoDB或Cassandra）交互的反应式支持的库。最后一种著名的通信类型是发布-订阅。这是一种一对多的交互类型，其中客户端发布一条消息，然后被所有监听服务消费。通常，这个模型是使用消息代理实现的，如Apache
    Kafka、RabbitMQ和ActiveMQ。
- en: Failures and circuit breakers
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 失败和断路器
- en: We have discussed most of the important concepts related to the microservices
    architecture. Such mechanisms, such as service discovery, API gateways, and configuration
    servers, are useful elements that help us to create a reliable and efficient system.
    Even if you have considered many aspects of these while designing your system's
    architecture, you should always be prepared for failures. In many cases, the reasons
    for failures are totally beyond the control of the holder, such as network or
    database problems. Such errors can be particularly severe for microservice-based
    systems, where one input request is processed in many subsequent calls. The first
    good practice is to always use network timeouts when waiting for a response. If
    a single service has a performance problem, we should try to minimize the impact
    on the rest. It is better to send an error response than to wait on a reply for
    a long time, blocking other threads.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了与微服务架构相关的绝大多数重要概念。这样的机制，如服务发现、API网关和配置服务器，是有用的元素，它们帮助我们创建一个可靠和高效的系统。即使你在设计系统架构时考虑了这些方面的许多方面，你也应该始终准备好应对失败。在许多情况下，失败的原因完全超出了持有者的控制范围，比如网络或数据库问题。对于基于微服务的系统来说，这类错误尤其严重，因为一个输入请求需要经过许多后续调用才能处理。第一个好的实践是在等待响应时始终使用网络超时。如果单个服务存在性能问题，我们应该尽量减小对其他服务的影响。发送错误响应比长时间等待回复更好，以免阻塞其他线程。
- en: An interesting solution for the network timeout problems might be the **circuit
    breaker pattern**. It is a concept closely related to the microservice approach.
    A circuit breaker is responsible for counting successful and failed requests. If
    the error rate exceeds an assumed threshold, it trips and causes all further attempts
    to fail immediately. After a specific period of time, the API client should get
    back to sending requests, and if they succeed, it closes the circuit breaker.
    If there are many instances of each service available and one of them works slower
    than others, the result is that it is overlooked during the load balancing process.
    The second often-used mechanism for dealing with partial network failures is **fallback**.
    This is a logic that has to be performed when a request fails. For example, a
    service can return cached data, a default value, or an empty list of results.
    Personally, I'm not a big fan of this solution. I would prefer to propagate error
    code to other systems than return cached data or default values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网络超时问题，一个有趣的解决方案可能是**断路器模式**。这是一个与微服务方法紧密相关的概念。断路器负责计算成功和失败的请求。如果错误率超过假设的阈值，它就会断开，并导致所有后续尝试立即失败。在特定时间段后，API客户端应该重新开始发送请求，如果它们成功，则关闭断路器。如果每个服务都有多个实例，其中一个比其他实例慢，那么在负载均衡过程中它就会被忽视。处理部分网络故障的第二个常用机制是**回退**。这是一种在请求失败时必须执行的逻辑。例如，一个服务可以返回缓存数据、默认值或空的结果列表。我个人并不是这种解决方案的忠实粉丝。我更愿意将错误代码传播到其他系统，而不是返回缓存数据或默认值。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The big advantage of Spring Cloud is that it supports all the patterns and mechanisms
    we have looked at. These are also stable implementations, unlike some other frameworks.
    I'll describe in detail which of the patterns are supported by which Spring Cloud
    project in [Chapter 3](5e461bca-a37d-4f72-b58f-5f14694d055f.xhtml), *Spring Cloud
    Overview*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud的一大优势在于它支持我们所探讨的所有模式和机制。这些也是稳定的实现，与其他一些框架不同。我在[第3章](5e461bca-a37d-4f72-b58f-5f14694d055f.xhtml)，*Spring
    Cloud概览*中详细描述了哪些模式被哪个Spring Cloud项目所支持。
- en: In this chapter, we have discussed the most important concepts related to microservices
    architecture, such as cloud-native development, service discovery, distributed
    configuration, API gateways, and the circuit breaker pattern. I have attempted
    to present my point of view about the advantages and drawbacks of this approach
    in the development of enterprise applications. Then, I described the main patterns
    and solutions related to microservices. Some of these are well-known patterns
    that have been around for years and are treated as something new in the IT world.
    In this summary, I would like to turn your attention to some things. Microservices
    are cloud-native by their nature. Frameworks such as Spring Boot and Spring Cloud
    help you to accelerate your cloud-native development. The main motivation of migrating
    to cloud-native development is the ability to implement and deliver applications
    faster while maintaining high quality. In many cases, microservices help us to
    achieve this, but sometimes the monolithic approach is not a bad choice.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了与微服务架构相关的最重要概念，例如云原生开发、服务发现、分布式配置、API网关以及断路器模式。我试图阐述我对这种方法在企业应用开发中的优缺点观点。然后，我描述了与微服务相关的的主要模式和解决方案。其中一些是已经存在多年的知名模式，在IT世界中被视为新事物。在这份总结中，我想引起您注意一些事情。微服务本质上就是云原生的。像Spring
    Boot和Spring Cloud这样的框架可以帮助您加速云原生开发。迁移到云原生开发的主要动机是能够更快地实施和交付应用程序，同时保持高质量。在许多情况下，微服务帮助我们实现这一点，但有时单体架构也是一个不错的选择。
- en: Although microservices are small and independent units, they are managed centrally.
    Information such as network location, configuration, logging files, and metrics
    should be stored in one central place. There are various types of tools and solutions
    that provide all these features. We will talk about them in detail in almost all
    of the chapters in this book. The Spring Cloud project is designed to help us
    in integrating with all that stuff. I hope to efficiently guide you through the
    most important integrations it offers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管微服务是小型且独立的单元，但它们是集中管理的。例如网络位置、配置、日志文件和指标等信息应该存储在一个中央位置。有各种各样的工具和解决方案提供了所有这些功能。我们将在本书的几乎所有章节中详细讨论它们。Spring
    Cloud项目旨在帮助我们整合所有这些内容。我希望能有效地引导您了解它提供的最重要的集成。
