- en: Useful Third-Party Components for React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React的有用第三方组件
- en: React is component-based and we can find a lot of useful third-party components
    that we can use in our apps. In this chapter, we are going to look at several
    components that we are going to use in our frontend. We will see how to find suitable
    components and how you can use these in your own apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React是基于组件的，我们可以找到许多有用的第三方组件，可以在我们的应用程序中使用。在本章中，我们将看一些组件，我们将在前端中使用。我们将看到如何找到合适的组件，以及如何在自己的应用程序中使用这些组件。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看以下内容：
- en: How to find third-party React components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找到第三方React组件
- en: How to install components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装组件
- en: How to use the React Table component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用React表格组件
- en: How to use the modal window component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用模态窗口组件
- en: How to use the Material UI component library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Material UI组件库
- en: How to manage routing in React
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在React中管理路由
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this book, we are using the Windows operating system but all tools are available
    for Linux and macOS as Node.js and `create-react-app` have to be installed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用的是Windows操作系统，但所有工具都适用于Linux和macOS，因为Node.js和`create-react-app`必须安装。
- en: Using third-party React components
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方React组件
- en: 'There are a lot of nice React components available for different purposes.
    Our first task is to find a suitable component for your needs. One good site for
    searching components is JS.coach ([https://js.coach/](https://js.coach/)). You
    just have to type in a keyword, search, and select React from the list of frameworks.
    In the following screenshot, you can see the search of the table components for
    React:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同目的的不错的React组件可用。我们的第一个任务是找到适合您需求的组件。搜索组件的一个好网站是JS.coach ([https://js.coach/](https://js.coach/))。您只需输入关键字，搜索，并从框架列表中选择React。在下面的屏幕截图中，您可以看到搜索React表组件的结果：
- en: '![](img/f994a30d-033c-4a6a-a3be-1d1b9ec22336.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f994a30d-033c-4a6a-a3be-1d1b9ec22336.png)'
- en: Another good source for React components is Awesome React Components ([https://github.com/brillout/awesome-react-components](https://github.com/brillout/awesome-react-components)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个获取React组件的好来源是Awesome React Components ([https://github.com/brillout/awesome-react-components](https://github.com/brillout/awesome-react-components))。
- en: 'Components often have good documentation that helps you to utilize them in
    your own React app. Let''s see how we can install a third-party component to our
    app and start to use it. Navigate to the JS.coach site, type `list` to search
    the input field, and filter by React. From the search results, you can find the
    list component, called `react-tiny-virtual-list`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 组件通常有良好的文档，帮助您在自己的React应用程序中使用它们。让我们看看如何将第三方组件安装到我们的应用程序中并开始使用它。转到JS.coach网站，输入`list`以搜索输入字段，并按React进行过滤。从搜索结果中，您可以找到名为`react-tiny-virtual-list`的列表组件：
- en: '![](img/b1d661a3-734f-4496-af43-f35249f99835.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1d661a3-734f-4496-af43-f35249f99835.png)'
- en: 'Click the component link to see more detailed info about the component. Quite
    often, you can find the installation instructions there and also some simple examples
    of how to use the component. The info page often provides the address of a component''s
    website or GitHub repository, where you can find the full documentation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 单击组件链接以查看有关组件的更详细信息。通常，您可以在那里找到安装说明，以及如何使用组件的一些简单示例。信息页面通常提供组件网站或GitHub存储库的地址，您可以在那里找到完整的文档：
- en: '![](img/cf6b1ef2-f13a-4cc4-a661-b08087c54ecb.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf6b1ef2-f13a-4cc4-a661-b08087c54ecb.png)'
- en: 'As you can see from the component''s info page, the installation of the components
    is done using `npm`. The syntax of the command is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从组件的信息页面可以看出，使用`npm`安装组件。命令的语法如下：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or, if you are using Yarn, it is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用Yarn，则如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `--save` parameter saves the component's dependency to the `package.json`
    file that is in the root folder of your React app. If you are using npm version
    5 or greater, this is done by default, without the `--save` parameter. With Yarn,
    you don't have to specify that because it saves the component dependency by default.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`--save`参数将组件的依赖项保存到React应用程序根文件夹中的`package.json`文件中。如果您使用的是npm 5或更高版本，则默认情况下会执行此操作，无需`--save`参数。对于Yarn，您不必指定，因为它默认保存组件依赖项。'
- en: 'Now we install the `react-tiny-virtual-list` component to the `myapp` React
    app that we created in the previous chapter. You have to move to your app root
    folder and type the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将`react-tiny-virtual-list`组件安装到我们在上一章中创建的`myapp` React应用程序中。您必须转到应用程序的根文件夹，并输入以下命令：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you open the `package.json` file from your app root folder, you can see
    that the component is now added to the dependencies:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开应用程序根文件夹中的`package.json`文件，您会看到该组件现在已添加到依赖项中：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Installed components are saved to the `node_modules` folder in your app. If
    you open that folder, you should find the `react-tiny-virtual-list` folder:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的组件保存在应用程序的`node_modules`文件夹中。如果打开该文件夹，您应该会找到`react-tiny-virtual-list`文件夹：
- en: '![](img/0856b3ab-d105-43ee-bef5-255de4baf67b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0856b3ab-d105-43ee-bef5-255de4baf67b.png)'
- en: 'Now, if you push your React app source code to GitHub, you should not include
    `node_modules` because that folder is really big. The `create-react-app` contains `.gitignore`
    file that excludes `node_modules` folder from the repository.  The content of
    the `.gitignore` file looks following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您将React应用程序源代码推送到GitHub，则不应包括`node_modules`，因为该文件夹非常大。`create-react-app`包含一个`.gitignore`文件，该文件将`node_modules`文件夹从存储库中排除。`.gitignore`文件的内容如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The idea is that when you clone your app from the GitHub, you type the `npm
    install` command, that reads dependencies from the `package.json` file and downloads
    these to your app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 想法是，当您从GitHub克隆应用程序时，您键入`npm install`命令，该命令从`package.json`文件中读取依赖项，并将其下载到您的应用程序中。
- en: 'The final step to start using your installed component is to import it into
    the files where you are using it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用已安装组件的最后一步是将其导入到您使用它的文件中：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: React Table
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React表格
- en: 'React Table ([https://react-table.js.org](https://react-table.js.org)) is a
    flexible table component for React apps. It has many useful features, such as
    filtering, sorting, and pivoting. Let''s use the GitHub REST API app that we created
    in the previous chapter:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: React Table ([https://react-table.js.org](https://react-table.js.org))是用于React应用程序的灵活表格组件。它具有许多有用的功能，如过滤、排序和透视。让我们使用在上一章中创建的GitHub
    REST API应用程序：
- en: 'Install the `react-table` component. Open PowerShell and move to the `restgithub`
    folder, which is the root folder of the app. Install the component by typing the
    following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`react-table`组件。打开PowerShell并移动到`restgithub`文件夹，这是应用程序的根文件夹。通过输入以下命令来安装组件：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open the `App.js` file with the VS Code and remove all code inside the `render()`
    method except the `return` statement with the divider containing the button and
    input field. Now the `App.js` file should look like the following:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用VS Code打开`App.js`文件，并删除`render()`方法中的所有代码，除了包含按钮和输入字段的`return`语句。现在`App.js`文件应该如下所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Import the `react-table` component and style sheet by adding the following
    lines at the beginning of the `App.js` file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`文件的开头添加以下行来导入`react-table`组件和样式表：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To fill React Table with data, you have to pass the data prop to the component.
    Data can be an array or object and therefore we can use our state, called `data` .
    Columns are defined using the columns prop and that prop is required:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要填充React Table的数据，你必须将数据传递给组件的数据属性。数据可以是数组或对象，因此我们可以使用我们的状态，称为`data`。列使用列属性进行定义，该属性是必需的：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will define our columns by creating the array of column objects into the `render()`
    method. In a column object, you have to define at least the header of the column
    and the data accessor. The data accessor values come from our REST API response
    data. You can see that our response data contains an object called `owner`, and
    we can show these values using the `owner.field_name` syntax:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过在`render()`方法中创建列对象数组来定义我们的列。在列对象中，你至少需要定义列的标题和数据访问器。数据访问器的值来自我们的REST API响应数据。你可以看到我们的响应数据包含一个名为`owner`的对象，我们可以使用`owner.field_name`语法显示这些值：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the React Table component to our `render()` method, and then the source
    code of the method looks like the following:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将React Table组件添加到我们的`render()`方法中，然后该方法的源代码如下：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the app and navigate to `localhost:3000`. The table looks quite nice. It
    has sorting and paging available by default:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并导航到`localhost:3000`。表看起来非常不错。它默认提供了排序和分页功能：
- en: '![](img/23376f91-4b30-4a06-9879-499da8c4f3ab.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23376f91-4b30-4a06-9879-499da8c4f3ab.png)'
- en: 'Filtering is disabled by default but you can enable it using the `filterable` prop
    in the `ReactTable` component. You can also set the page size of the table:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤默认情况下是禁用的，但你可以使用`ReactTable`组件中的`filterable`属性来启用它。你还可以设置表的页面大小：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now you should see the filter element in your table. You can filter using any
    column, but there is also an option to set the filtering and sorting in the column
    level:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在你的表中看到过滤元素。你可以使用任何列进行过滤，但也可以在列级别设置过滤和排序：
- en: '![](img/608986ae-592d-44f8-9fd7-42390b471a3e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/608986ae-592d-44f8-9fd7-42390b471a3e.png)'
- en: You can find different props for the table and columns from the React Table
    website.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从React Table网站上找到表格和列的不同属性。
- en: 'Cell renderers can be used to customize the content of the table cell. The
    following example shows how you can render a button to a table cell. The function
    in the cell renderer passes `value` as the argument and, in this case, the value
    will be `full_name`, which is defined in the accessor of the column. The other
    option is to pass a row, which passes the whole `row` object to the function.
    Then you have to define the `btnClick` function, which is invoked when the button
    is pressed and you can do something with the value that is sent to the function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格渲染器可用于自定义表格单元格的内容。以下示例显示了如何将按钮呈现为表格单元格。单元格渲染器中的函数将`value`作为参数传递，而在这种情况下，值将是列的访问器中定义的`full_name`。另一个选项是传递一个行，它将整个`row`对象传递给函数。然后你需要定义`btnClick`函数，当按钮被按下时将被调用，你可以对发送到函数的值进行操作：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the screenshot of the table with buttons:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有按钮的表格的屏幕截图：
- en: '![](img/84d1aae2-eb68-4223-9266-3a6715e609cc.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84d1aae2-eb68-4223-9266-3a6715e609cc.png)'
- en: The modal window component
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模态窗口组件
- en: 'Modal windows are nice to have when you are creating CRUD applications. We
    will create a simple shopping list app where users can add new items using the
    modal window. The modal window component that we will use in the example is `react-skylight`
    ([https://marcio.github.io/react-skylight/](https://marcio.github.io/react-skylight/)):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 模态窗口在创建CRUD应用程序时非常有用。我们将创建一个简单的购物清单应用程序，用户可以使用模态窗口添加新项目。我们在示例中将使用的模态窗口组件是`react-skylight`（[https://marcio.github.io/react-skylight/](https://marcio.github.io/react-skylight/)）：
- en: 'Create a new React app called `shoppinglist` and install `react-skylight` by
    using the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`shoppinglist`的新React应用程序，并使用以下命令安装`react-skylight`：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `app` folder with the VS Code and open the `App.js` file in the code
    editor. In the `App.js` component, we need only one state to keep shopping list
    items. One shopping list item contains two fields—product and amount. We also
    need a method to add new items to the list. The following is the source code of
    the constructor and the method for adding new items to the list. In the `addItem`
    method, we are using a spread notation (`...`), which is used to add a new item
    at the beginning of the existing array:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用VS Code打开`app`文件夹，并在代码编辑器中打开`App.js`文件。在`App.js`组件中，我们只需要一个状态来保存购物清单项目。一个购物清单项目包含两个字段——产品和数量。我们还需要一个方法来向列表中添加新项目。以下是构造函数和向列表中添加新项目的方法的源代码。在`addItem`方法中，我们使用了扩展符号（`...`），用于在现有数组的开头添加新项目：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add a new component for adding shopping items. Create a new file called `AddItem.js`
    to the root folder of the app. This component will use the React Skylight modal
    form so let''s import `react-skylight`. Inside the React Skylight component in
    the `render()` method, we will add two input fields (`product` and `amount`) and
    a button that calls the `addItem` function. To be able to call the `addItem` function
    that is in the `App.js` component, we have to pass it in a prop when rendering
    the `AddItem` component. Outside the React Skylight component, we will add a button
    that opens the modal form when it is pressed. This button is the only visible
    element when the component is rendered initially and it calls the React Skylight
    `show()` method to open the modal form. We also have to handle the change event
    of the input fields, so that we can access the values that have been typed. When
    the button inside the modal form is clicked, the `addItem` function is called
    and the modal form is closed using the React Skylight `hide()` method. The function
    creates an object from the input field values and calls the `App.js` component''s
    `addItem` function, which finally add a new item to the state array and re-renders
    the user interface:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新组件来添加购物项。在应用程序的根文件夹中创建一个名为`AddItem.js`的新文件。该组件将使用React Skylight模态表单，因此让我们导入`react-skylight`。在`render()`方法中的React
    Skylight组件内，我们将添加两个输入字段（产品和数量）和一个调用`addItem`函数的按钮。为了能够调用`App.js`组件中的`addItem`函数，我们必须在渲染`AddItem`组件时将其作为prop传递。在React
    Skylight组件之外，我们将添加一个按钮，当按下时打开模态表单。该按钮是组件初始渲染时唯一可见的元素，并调用React Skylight的`show()`方法来打开模态表单。我们还必须处理输入字段的更改事件，以便访问已输入的值。当模态表单内的按钮被点击时，将调用`addItem`函数，并使用React
    Skylight的`hide()`方法关闭模态表单。该函数从输入字段值创建一个对象，并调用`App.js`组件的`addItem`函数，最终向状态数组中添加一个新项目并重新渲染用户界面：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Modify the `render()` method in the `App.js` file. Add the `AddItem` component
    to the `render()` method and pass the `addItem` function in a prop to the `AddItem`
    component. At the beginning of the method, we transform items to `listItems` (`<li></li>`)
    using the `map` function:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`文件中修改`render()`方法。将`AddItem`组件添加到`render()`方法中，并将`addItem`函数作为prop传递给`AddItem`组件。在方法的开头，我们使用`map`函数将项目转换为`listItems`(`<li></li>`)：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When you now open the app, you will see an empty list and a button to add new
    items:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开应用程序时，您将看到一个空列表和一个添加新项目的按钮：
- en: '![](img/7a8d772a-6ae4-433a-809b-6c9ef2dfc910.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a8d772a-6ae4-433a-809b-6c9ef2dfc910.png)'
- en: 'When you press the Add Item button, the modal form opens:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当您按下“Add Item”按钮时，模态表单将打开：
- en: '![](img/40899635-da48-4bb4-9e43-4efa66de2624.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40899635-da48-4bb4-9e43-4efa66de2624.png)'
- en: 'Type some values into the input boxes and press the Add button. The modal form
    is closed and the new item can be seen in the list:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入框中输入一些值，然后按下“Add”按钮。模态表单将关闭，并且新项目将显示在列表中：
- en: '![](img/c0a470fd-74c3-40d0-8e8c-36dbe27acdf6.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0a470fd-74c3-40d0-8e8c-36dbe27acdf6.png)'
- en: Material UI component library
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Material UI组件库
- en: 'Material UI is the React component library that implement Google''s Material
    Design. It contains lots of different components, such as buttons, lists, tables,
    and cards, which you can use to get a nice and uniform user interface. We will
    continue with the shopping list app and start to style the user interface with
    Material UI:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Material UI是实现Google的Material Design的React组件库。它包含许多不同的组件，如按钮、列表、表格和卡片，您可以使用它们来获得一个漂亮和统一的用户界面。我们将继续使用购物清单应用程序，并开始使用Material
    UI来设计用户界面：
- en: 'Open the shopping list app with VS Code. Install Material UI by typing the
    following command in the root folder to PowerShell or any suitable terminal you
    are using:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用VS Code打开购物清单应用程序。在根文件夹中键入以下命令来安装Material UI到PowerShell或您正在使用的任何合适的终端中：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are ready to start to using the Material UI components. We will first change
    the buttons in the `AddItem.js` file to use the Material UI `Button` component.
    We have to import the `Button` component and then use it in the `render()` method.
    Different props of `Button` can be found in the Material UI documentation:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们准备开始使用Material UI组件。首先，我们将更改`AddItem.js`文件中的按钮，以使用Material UI的`Button`组件。我们必须导入`Button`组件，然后在`render()`方法中使用它。Material
    UI文档中可以找到`Button`的不同props：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now the app is using `RaisedButton` and it looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序使用`RaisedButton`，效果如下：
- en: '![](img/9bd9c0fb-64a3-451d-abe3-4e875b490adb.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bd9c0fb-64a3-451d-abe3-4e875b490adb.png)'
- en: 'Change the input fields in `AddItem.js` to use the Material UI `TextField`
    component. The steps are the same as with the buttons. Import the `TextField`
    component and then use it in the `render()` method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddItem.js`中的输入字段更改为使用Material UI的`TextField`组件。步骤与按钮相同。导入`TextField`组件，然后在`render()`方法中使用它：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After the changes, your form should look like the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改后，您的表单应如下所示：
- en: '![](img/ac8e042d-fe61-4654-9c1e-6f55e9e370fe.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8e042d-fe61-4654-9c1e-6f55e9e370fe.png)'
- en: 'Change our list in the `App.js` file to use the Material UI `List` and `ListItem`
    components. Import the components and use `ListItem` in the map function where
    `listItems` are created and render `List` instead of `ul`. We will show the amount
    of the product in the secondary text of the `ListItemText` component:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`文件中更改我们的列表，使用Material UI的`List`和`ListItem`组件。导入这些组件，并在创建`listItems`和渲染`List`的地方使用`ListItem`。我们将在`ListItemText`组件的次要文本中显示产品的数量：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now the user interface looks like the following. With a small amount of work,
    the user interface is now much more polished:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户界面如下所示。通过少量的工作，用户界面现在更加精致：
- en: '![](img/8dbdd374-f4e9-4c2b-bca5-05f0f3a0943d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8dbdd374-f4e9-4c2b-bca5-05f0f3a0943d.png)'
- en: Routing
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: There are multiple solutions available for routing in React. The most popular
    one, which we are using, is React Router ([https://github.com/ReactTraining/react-router](https://github.com/ReactTraining/react-router)).
    For web applications, React Router provides a package called `react-router-dom`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: React中有多种可用的路由解决方案。最流行的解决方案是React Router（[https://github.com/ReactTraining/react-router](https://github.com/ReactTraining/react-router)）。对于Web应用程序，React
    Router提供了一个名为`react-router-dom`的包。
- en: 'To start using React Router, we have to install it with the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用React Router，我们必须使用以下命令进行安装：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There are four different components in `react-router-dom` that are needed to
    implement routing. `BrowserRouter` is the router for web-based applications. The `Route` component
    renders the defined component if the given locations match. The following are
    two examples of the `Route` component. The first one renders the `Contact` component
    when user navigates to the `/contact` end path. You can also use inline rendering
    with the `Route` component, as shown in the second example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`react-router-dom`中有四个不同的组件需要实现路由。`BrowserRouter`是用于基于Web的应用程序的路由器。`Route`组件在给定位置匹配时呈现定义的组件。以下是`Route`组件的两个示例。第一个示例在用户导航到`/contact`端点时呈现`Contact`组件。您还可以使用`Route`组件进行内联呈现，如第二个示例所示：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `Switch` component wraps multiple `Route` components. The `Link` component
    provides navigation to your application. The following example shows the Contact link
    and navigates to the `/contact` endpoint when the link is clicked:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Switch`组件包装多个`Route`组件。`Link`组件提供了应用程序的导航。以下示例显示了`Contact`链接，并在单击链接时导航到`/contact`端点：'
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following example shows how to use these components in practice. Let''s
    create a new React app, called `routerapp`, using `create-react-app`. Open the
    app folder with VS Code and open the `App.js` file to editor view. Import components
    from the `react-router-dom` package and remove extra code from the render method.
    After the modifications, your `App.js` source code should look like the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何在实践中使用这些组件。让我们使用`create-react-app`创建一个名为`routerapp`的新React应用程序。使用VS
    Code打开应用程序文件夹，并打开`App.js`文件以编辑视图。从`react-router-dom`包中导入组件，并从渲染方法中删除额外的代码。修改后，您的`App.js`源代码应如下所示：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s first create two simple components that we can use in routing. Create
    two new files, called `Home.js` and `Contact.js`, to the application root folder.
    Add just headers to the `render()` methods to show the name of the component.
    See the code of the components as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建两个简单的组件，我们可以在路由中使用。在应用程序根文件夹中创建两个名为`Home.js`和`Contact.js`的新文件。只需向`render()`方法中添加标题，以显示组件的名称。请参阅以下组件的代码：
- en: '[PRE28]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open the `App.js` file, and let''s add a router that allows us to navigate
    between the components:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`App.js`文件，让我们添加一个路由器，允许我们在组件之间导航：
- en: '[PRE29]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, when you start the app, you will see the links and the `Home` component,
    which is shown in the root end path (`localhost:3030/`) as defined in the first
    `Route` component. The `exact` keyword in the first `Route` component means that
    the path must match exactly. If you remove that, then the routing always goes
    to the `Home` component:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您启动应用程序时，您将看到链接和`Home`组件，该组件显示在根端点（`localhost:3030/`）中，如第一个`Route`组件中所定义。第一个`Route`组件中的`exact`关键字表示路径必须完全匹配。如果删除该关键字，则路由始终转到`Home`组件：
- en: '![](img/dc6583d7-4b81-4746-a4d5-a1c1d4188a4e.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc6583d7-4b81-4746-a4d5-a1c1d4188a4e.png)'
- en: 'When you press the Contact link, the `Contact` component is rendered:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击`Contact`链接时，将呈现`Contact`组件：
- en: '![](img/1f11cf3a-14b9-48bd-bfee-a5e4dc0a178a.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f11cf3a-14b9-48bd-bfee-a5e4dc0a178a.png)'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use third-party React components. We familiarized
    ourselves with several components that we are going to use in our frontend. React
    Table is the table component with built-in features, such as sorting, paging,
    and filtering. React Skylight is the modal form component that we will use in
    our frontend to create forms for adding and editing items. Material UI is the
    component library that provides multiple user interface components that implement
    Google's Material Design. We also learned how to use React Router for routing
    in React applications. In the next chapter we will build an environment for the
    frontend development.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用第三方React组件。我们熟悉了几个我们将在前端中使用的组件。React Table是带有内置功能（如排序、分页和过滤）的表组件。React
    Skylight是我们将在前端中使用的模态表单组件，用于创建添加和编辑项目的表单。Material UI是提供多个实现Google Material Design的用户界面组件的组件库。我们还学习了如何在React应用程序中使用React
    Router进行路由。在下一章中，我们将为前端开发构建一个环境。
- en: Questions
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How should you find components for React?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何找到React的组件？
- en: How should you install components?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何安装组件？
- en: How should you use the React Table component?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用React Table组件？
- en: How should you create modal forms with React?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用React创建模态表单？
- en: How should you use the Material UI component library?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用Material UI组件库？
- en: How should you implement routing in a React application?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何在React应用程序中实现路由？
- en: Further reading
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Packt有其他很好的资源可以学习React：
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
