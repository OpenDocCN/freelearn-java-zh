- en: Chapter 2. Messaging with Spring JMS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用Spring JMS进行消息传递
- en: '**Java Messaging Services** (**JMS**) is an API used to communicate between
    the components in an application or between applications. The messages can be
    sent and received between applications and components. The messaging agents behave
    like middlemen to create, receive, read, and send messages. The message consumer
    does not need to be available at all times to receive the message. The messaging
    agents store the messages and they can be read whenever required.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java消息服务**（**JMS**）是用于在应用程序组件之间或应用程序之间进行通信的API。消息可以在应用程序和组件之间发送和接收。消息代理就像中间人一样创建、接收、读取和发送消息。消息消费者不需要始终可用以接收消息。消息代理存储消息，可以在需要时读取。'
- en: An architect would choose JMS to achieve a loosely coupled design. The messages
    are asynchronous, they are delivered as soon as they arrive, and there is no request
    sent for the messages. It also prevents redundancy and ensures that a particular
    message is delivered only once.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师会选择JMS来实现松耦合的设计。消息是异步的，它们一到达就被传递，不需要为消息发送请求。它还可以防止冗余，并确保特定消息只传递一次。
- en: Types of messaging
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息类型
- en: 'There are two types of messaging domains to be chosen from, as per the requirement:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需求，有两种选择消息域：
- en: 'Point-to-point messaging:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点对点消息传递：
- en: Each message has only one consumer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每条消息只有一个消费者
- en: There is no timing dependency
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有时间依赖性
- en: 'Publish-Subscribe messaging:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布-订阅消息传递：
- en: Each message has many consumers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每条消息有许多消费者
- en: Messages have a timing dependency - when an application sends a message to the
    messaging agent, the consumer needs to subscribe and be active to receive the
    messages
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息具有时间依赖性-当应用程序向消息代理发送消息时，消费者需要订阅并保持活动状态以接收消息
- en: Message consumers
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息消费者
- en: 'These are the ways of consuming messages provided by JMS API:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是JMS API提供的消息消费方式：
- en: Message listeners
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息监听器
- en: They provide an asynchronous messaging model
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提供了异步消息模型
- en: Listeners are like event watchers/listeners; whenever a message is available,
    the listener ensures that it reaches its destination
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器就像事件观察者/监听器；每当有消息可用时，监听器确保它到达目的地
- en: Listeners will call the `onMessage()` method
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器将调用`onMessage()`方法
- en: The `receive()` method
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`receive()`方法'
- en: It provides a synchronous messaging `model()`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供同步消息`model()`
- en: Messages are consumed by explicitly calling the `receive()` method from the
    connection factory
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息通过显式调用连接工厂的`receive()`方法来消费
- en: Message structure
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息结构
- en: 'A message consists of three parts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 消息由三部分组成：
- en: '**Header**: This contains information about the destination and timestamp,
    and has `messageID`, which is set by the `send()` or `publish()` methods.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头部**：包含有关目的地和时间戳的信息，并且有`messageID`，由`send()`或`publish()`方法设置。'
- en: '**Properties**: Some properties can be set for the message.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：可以为消息设置一些属性。'
- en: '**Body**: The message body can be of any of the following five types:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主体**：消息主体可以是以下五种类型之一：'
- en: '`TextMessage`: This is used to send string objects as messages'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextMessage`：用于发送字符串对象作为消息'
- en: '`ObjectMessage`: This is used to send serializable objects as messages'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectMessage`：用于将可序列化对象作为消息发送'
- en: '`MapMessage`: This is used to send maps with key-value pairs'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapMessage`：用于发送具有键值对的映射'
- en: '`BytesMessage`: This is used to send bytes in messages'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BytesMessage`：用于在消息中发送字节'
- en: '`StreamMessage`: This is used to send I/O streams in messages'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StreamMessage`：用于在消息中发送I/O流'
- en: Message-driven POJOs and listeners
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于消息的POJO和监听器
- en: As we all know, **Enterprise JavaBeans** (**EJB**) offers a message-driven bean
    to communicate with the EJB container. Similar to this, Spring also offers Message
    Driven Pojos, which communicate with the messaging middleware using the Message
    Listener container.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，**企业JavaBean**（**EJB**）提供了一个消息驱动的bean来与EJB容器进行通信。与此类似，Spring也提供了消息驱动的Pojo，它使用消息监听器容器与消息中间件进行通信。
- en: The Message Listener container communicates between the message-driven Pojo
    and the message provider. It registers the messages and helps with transaction
    and exception handling by acquiring and releasing the messaging resources.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 消息监听器容器在消息驱动的Pojo和消息提供者之间进行通信。它注册消息，并通过获取和释放消息资源来帮助处理事务和异常处理。
- en: 'The following is a list of message listener containers offered by the Spring
    JMS package:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Spring JMS包提供的消息监听器容器列表：
- en: '**Simple Message Listener Container**: Provides a fixed number of JMS sessions
    and doesn''t participate in externally managed transactions.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单消息监听器容器**：提供固定数量的JMS会话，并且不参与外部管理的事务。'
- en: '**Default Message Listener Container**: Participates in externally managed
    transactions and gives a good performance. This listener container is widely used.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认消息监听器容器**：参与外部管理的事务，并提供良好的性能。这个监听器容器被广泛使用。'
- en: '**Server Message Listener Container**: Offers provider-driven runtime tuning
    and provides a pool of message sessions and participates in transactions.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器消息监听器容器**：提供基于提供程序的运行时调优，并提供消息会话池并参与事务。'
- en: Open source messaging tools
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源消息工具
- en: 'The following are some open source messaging middleware available under open
    source licenses:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可在开源许可下使用的开源消息中间件：
- en: Glassfish OpenMQ
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Glassfish OpenMQ
- en: Apache ActiveMQ
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache ActiveMQ
- en: JORAM
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JORAM
- en: Presumo
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Presumo
- en: Apache ActiveMQ
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache ActiveMQ
- en: 'Apache ActiveMQ has many features that have made it a choice for messaging.
    The latest release is 5.10\. The advantages of using ActiveMQ are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Apache ActiveMQ具有许多功能，使其成为消息传递的选择。最新版本是5.10。使用ActiveMQ的优势如下：
- en: It supports REST API
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持REST API
- en: It supports CXF Web services
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持CXF Web服务
- en: It supports AJAX implementations
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持AJAX实现
- en: It provides complete support to the Spring framework
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它完全支持Spring框架
- en: It works with all the major application servers, such as JBoss, Tomcat, Weblogic
    and Glassfish servers
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与所有主要应用服务器一起使用，如JBoss、Tomcat、Weblogic和Glassfish服务器
- en: Setting up ApacheMQ for point-to-point messaging
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置ApacheMQ以进行点对点消息传递
- en: 'The following are the steps for setting up ApacheMQ:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设置ApacheMQ的步骤如下：
- en: Download the latest `Apache ActiveMQ.zip` from [http://activemq.apache.org/download.html](http://activemq.apache.org/download.html).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://activemq.apache.org/download.html](http://activemq.apache.org/download.html)下载最新的`Apache
    ActiveMQ.zip`。
- en: Unzip the ZIP file to `E:\apachemq\`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件解压缩到`E:\apachemq\`。
- en: In the Command Prompt, go to the location `E:\apachemq\apache-activemq-5.10-SNAPSHOT\bin\win32`
    and then click on `apachemq.bat` to start Apache ActiveMQ.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，转到位置`E:\apachemq\apache-activemq-5.10-SNAPSHOT\bin\win32`，然后单击`apachemq.bat`启动Apache
    ActiveMQ。
- en: Apache ActiveMQ will run on Jetty Server and is hence accessible through a URL.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apache ActiveMQ将在Jetty服务器上运行，因此可以通过URL访问。
- en: Click on the link `http://localhost:8161/admin/index.jsp`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击链接`http://localhost:8161/admin/index.jsp`。
- en: The first time you do this, you will be asked for credentials; enter `admin/admin`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次这样做时，会要求您输入凭据；输入`admin/admin`。
- en: In the console, you will see a **Welcome** section and a **Broker** section.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中，您将看到**欢迎**部分和**代理**部分。
- en: 'The **Broker** section gives the following information about Apache message
    broker:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代理**部分提供了有关Apache消息代理的以下信息：'
- en: 'Name: `localhost` or the name of the server'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`localhost`或服务器的名称
- en: Version 5.10 Snapshot
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本5.10快照
- en: 'ID: `ID:BLRLANJANA-55074-1397199950394-0:1`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ID：`ID:BLRLANJANA-55074-1397199950394-0:1`
- en: 'Uptime: 1 hour 24 minutes'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常运行时间：1小时24分钟
- en: 'Store percent used: 0'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储百分比使用：0
- en: 'Memory percent used: 0'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存百分比使用：0
- en: 'Temp percent used: 0'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 临时百分比使用：0
- en: Click on **Queues**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**队列**。
- en: Enter `orderQueue` in the **Queue name** field and click on **Create**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**队列名称**字段中输入`orderQueue`，然后单击**创建**。
- en: Use case for ApacheMq with Spring JmsTemplate
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring JmsTemplate的ApacheMq用例
- en: In the previous chapter, we demonstrated order management using MongoDB. Let
    us consider that the order placed from one application needs to be read into different
    applications and stored in a different database.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们演示了使用MongoDB进行订单管理。假设从一个应用程序下的订单需要被读取到不同的应用程序并存储在不同的数据库中。
- en: 'The design for **Order Management Message Broker** is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**订单管理消息代理**的设计如下：'
- en: '![Use case for ApacheMq with Spring JmsTemplate](img/7320OS_02_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用Spring JmsTemplate的ApacheMq用例](img/7320OS_02_01.jpg)'
- en: Let's use the same use case with **Message Broker**. The request flows from
    the controller, and when the user enters order details and clicks on **Save**,
    the order bean is set in the controller, which sends the request to the JMS sender,
    that is, the Order Sender.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用**消息代理**的相同用例。请求从控制器流出，当用户输入订单详细信息并单击**保存**时，订单bean设置在控制器中，控制器将请求发送到JMS发送器，即订单发送器。
- en: The order sender sends the message to the queue in the form of a map. The receiver
    reads the message and saves the message into the MongoDB database. The receiver
    can be a different application as well; all the application needs to know is the
    queue name, in case there are many queues configured in the application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 订单发送者以map的形式将消息发送到队列。接收者读取消息并将消息保存到MongoDB数据库中。接收者也可以是不同的应用程序；所有应用程序只需要知道队列名称，以防应用程序中配置了多个队列。
- en: Spring dependency
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring依赖
- en: 'Use the same source code from [Chapter 1](ch01.html "Chapter 1. Spring Mongo
    Integration"), *Spring Mongo Integration*, and the `pom.xml` file. Update the
    `pom.xml` file with Spring JMS dependencies. For this chapter, we have the Spring
    4.0.3 release available, which is the latest one to date. The following is the
    code for the `Pom.xml` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与[第1章](ch01.html "第1章。Spring Mongo Integration")相同的源代码，*Spring Mongo Integration*，以及`pom.xml`文件。使用Spring
    JMS依赖项更新`pom.xml`文件。对于本章，我们有Spring 4.0.3版本可用，这是迄今为止最新的版本。以下是`Pom.xml`文件的代码：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Implementing the Order Management Messaging System with SpringJMS and ActiveMQ
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SpringJMS和ActiveMQ实现订单管理消息系统
- en: In the preceding section about Apache ActiveMQ, we discussed the steps required
    to create a message queue and created an order queue. Now, let's send messages
    to the queue from the application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面关于Apache ActiveMQ的部分中，我们讨论了创建消息队列所需的步骤，并创建了一个订单队列。现在，让我们从应用程序向队列发送消息。
- en: The following table depicts the components of the application with JMS integrated
    with it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了集成了JMS的应用程序的组件。
- en: The request flows from JSP to a Spring controller, which sets the order bean
    object and sends it `orderSender` (which is a JMS message sender class). The class
    puts the order object in the queue.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请求从JSP流向Spring控制器，该控制器设置订单bean对象并将其发送给`orderSender`（这是一个JMS消息发送器类）。该类将订单对象放入队列。
- en: The JMS Receiver is the class which reads from the queue. The read object is
    sent to the `OrderRepository` class, which is a Mongo Repository class, and posts
    the messages to the MongoDB database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JMS接收器是从队列中读取消息的类。读取的对象被发送到`OrderRepository`类，这是一个Mongo Repository类，并将消息发布到MongoDB数据库。
- en: '![Implementing the Order Management Messaging System with SpringJMS and ActiveMQ](img/7320OS_02_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![使用SpringJMS和ActiveMQ实现订单管理消息系统](img/7320OS_02_02.jpg)'
- en: 'The following table gives us an overview about the classes used to communicate
    with JMS with a Spring MVC application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格为我们提供了一个关于在Spring MVC应用程序中使用JMS进行通信的类的概述：
- en: '| JSP | Controller | Bean | JMS sender | JMS receiver | MongoRepository |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| JSP | 控制器 | Bean | JMS发送器 | JMS接收器 | MongoRepository |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| `order.jsp``allorders.jsp` | `Order Controller.java` | `Order.java` | `OrderSender`
    | `OrderReceiver` | `OrderRepository` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `order.jsp``allorders.jsp` | `Order Controller.java` | `Order.java` | `OrderSender`
    | `OrderReceiver` | `OrderRepository` |'
- en: Configuring dispatcherservlet.xml to use JMS
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置dispatcherservlet.xml以使用JMS
- en: 'You can see that we have configured the following in the XML file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们在XML文件中配置了以下内容：
- en: '`connectionFactory`: It creates a `jmsconnection` object. This `jmsconnection`
    object connects to **Message Orientated Middleware** (**MOM**), that is, Apache
    ActiveMQ. The `jmsconnection` object provides a JMS session object, and using
    that, the application interacts with Apache ActiveMQ. The broker URL gives information
    about the host and the port the message broker interface is listening at.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connectionFactory`：它创建一个`jmsconnection`对象。这个`jmsconnection`对象连接到**消息导向中间件**（**MOM**），即Apache
    ActiveMQ。`jmsconnection`对象提供了一个JMS会话对象，应用程序使用该对象与Apache ActiveMQ交互。代理URL提供了有关消息代理接口正在侦听的主机和端口的信息。'
- en: '`destination`: It''s the name of the queue with which the application needs
    to communicate.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destination`：这是应用程序需要通信的队列的名称。'
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`jmstemplate`: This takes the destination and `connectionFactory` bean as the
    argument.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jmstemplate`：它以目的地和`connectionFactory` bean作为参数。'
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`orderSender`: This is the class that uses the `jms` template to send a message
    to the queue.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderSender`：这是使用`jms`模板向队列发送消息的类。'
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`orderReceiver`: This class reads the messages from the queue. It has the `connectionFactory`
    so that it can connect to the JMS provider to read the message.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderReceiver`：这个类从队列中读取消息。它有`connectionFactory`，以便可以连接到JMS提供程序来读取消息。'
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following is the complete configuration of `dispacherservlet.xml`. We will
    observe that the configuration file has been updated with `activemq` configurations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dispacherservlet.xml`的完整配置。我们将观察到配置文件已更新为`activemq`配置。
- en: '**dispatcherservlet.xml**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**dispatcherservlet.xml**'
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Order.java**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Order.java**'
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `OrderController` class calls the sender to send the order to the message
    broker queue. The controller does some basic CRUD operations using MongoDB. The
    following code demonstrates the `Create` operation only.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderController`类调用发送器将订单发送到消息代理队列。控制器使用MongoDB执行一些基本的CRUD操作。以下代码仅演示了`Create`操作。'
- en: When `/order/save` is invoked, the controller sends the order object to `orderSender`,
    which keeps the order details in the queue.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`/order/save`时，控制器将订单对象发送到`orderSender`，后者将订单详细信息保存在队列中。
- en: '**OrderCOntroller.java**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: OrderCOntroller.java
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's look at the JMS sender and receiver classes. Both classes use the Spring
    JMS template to receive and send messages. The `org.springframework.jms.core.MessageCreator`
    class creates the message to be placed in the queue.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看JMS发送器和接收器类。这两个类都使用Spring JMS模板来接收和发送消息。`org.springframework.jms.core.MessageCreator`类创建要放入队列中的消息。
- en: The following is the code for `orderSender`, which gets an object that needs
    to be passed to the queue. The `JMSTemplate` prepares the message format so that
    it is acceptable for the queue.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`orderSender`的代码，它获取需要传递到队列的对象。`JMSTemplate`准备消息格式，以便它可以被队列接受。
- en: '**OrderSender**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**OrderSender**'
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is a screenshot at the time of adding the order case:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在添加订单案例时的屏幕截图：
- en: '![Configuring dispatcherservlet.xml to use JMS](img/7320OS_02_03.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![配置dispatcherservlet.xml以使用JMS](img/7320OS_02_03.jpg)'
- en: Working with multiple queues in ApacheMQ
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在ApacheMQ中使用多个队列
- en: 'In the preceding section, we demonstrated sending messages using Map Message
    to Order Queue. Now, we can have a look at how to work with multiple queues in
    ApacheMQ:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们演示了使用Map Message将消息发送到Order Queue。现在，我们可以看看如何在ApacheMQ中使用多个队列：
- en: Start the Apache ActiveMQ server, and in the console, click on **Queues** and
    create two queues.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Apache ActiveMQ服务器，在控制台上点击**Queues**并创建两个队列。
- en: 'Let us create two queues and name the queues as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建两个队列，并将队列命名如下：
- en: '`PacktTestQueue1`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PacktTestQueue1`'
- en: '`PacktTestQueue2`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PacktTestQueue2`'
- en: '![Working with multiple queues in ApacheMQ](img/7320OS_02_04.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![在ApacheMQ中使用多个队列](img/7320OS_02_04.jpg)'
- en: Create a new Spring project with the same dependency as the first example in
    the chapter.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与本章第一个示例相同的依赖项创建一个新的Spring项目。
- en: Create a `PacktMessageListener` class that implements the `MessageListener`
    interface. The class overrides the `onMessage(Message message)` method.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`PacktMessageListener`类，实现`MessageListener`接口。该类覆盖`onMessage(Message message)`方法。
- en: Spring's `DefaultMessageListener` consumes the messages from the queue and calls
    the `onMessage(Message message)` method.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring的`DefaultMessageListener`从队列中消费消息并调用`onMessage(Message message)`方法。
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's now look at the message sender class, which sends the text message to
    the queue using `JmsTemplate`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们来看看消息发送器类，它使用`JmsTemplate`将文本消息发送到队列。
- en: Here, we have provided setters for `JmsTemplate` object and `queue` object and
    we defined a method to send messages. The class has been configured in the XML
    file with the application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为`JmsTemplate`对象和`queue`对象提供了setter，并定义了一个发送消息的方法。该类已在XML文件中进行了配置。
- en: '**PacktMessageSender**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**PacktMessageSender**'
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let us first create resource references in the `context.xml` file under the
    `meta-inf` folder. This is where we will configure **Java Naming and Directory
    Interface** (**JNDI**) for JMS.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先在`meta-inf`文件夹下的`context.xml`文件中创建资源引用。这是我们将为JMS配置**Java命名和目录接口**（**JNDI**）的地方。
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following are the configuration changes that need to be made in the `spring-configuration.xml`
    file to configure multiple queues:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是在`spring-configuration.xml`文件中需要进行的配置更改，以配置多个队列：
- en: Use Spring JNDI to look up for `queueNames` and JMS `connectionFactory`
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring JNDI查找`queueNames`和JMS`connectionFactory`
- en: Pass the `ConnectionFactory` reference to `JmsTemplate`
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`ConnectionFactory`引用传递给`JmsTemplate`
- en: Configure the `MessageSender` and `MessageListener` classes
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`MessageSender`和`MessageListener`类
- en: The `MessageSender` class will have `JmsTemplate` and `queue` object as the
    property
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageSender`类将具有`JmsTemplate`和`queue`对象作为属性'
- en: '`MessageListener` will have `MessageSender` as the property'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageListener`将具有`MessageSender`作为属性'
- en: Configure the `DefaultMessageListenerContainer` class, this class consumes the
    message from the queue
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`DefaultMessageListenerContainer`类，该类从队列中消费消息
- en: 'The following is the code for the configuration file:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是配置文件的代码：
- en: '**Spring-configuration.xml**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring-configuration.xml**'
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The following code will be configuring the `web.xml` file. In `web.xml`, we
    are actually providing the information about the `spring-configuration.xml` file
    location so that the web container can load it.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码将配置`web.xml`文件。在`web.xml`中，我们实际上提供了关于`spring-configuration.xml`文件位置的信息，以便Web容器可以加载它。
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you are using Maven as the build tool, ensure that you compile the source
    code and run the application on Tomcat or any other server of your choice. Also
    keep the Apache ActiveMQ server console up and running.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Maven作为构建工具，请确保编译源代码并在Tomcat或其他您选择的服务器上运行应用程序。同时保持Apache ActiveMQ服务器控制台处于运行状态。
- en: In the ActiveMQ console, click on **Queues**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ActiveMQ控制台中，点击**队列**。
- en: Click on the **Send** button to link in the `PacktTestQ``ueue1` row.![Working
    with multiple queues in ApacheMQ](img/7320OS_02_05.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发送**按钮以链接到`PacktTestQueue1`行。![在ApacheMQ中使用多个队列](img/7320OS_02_05.jpg)
- en: Enter some message text and click on the **Send** button.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一些消息文本，然后点击**发送**按钮。
- en: In the console, you will see that a message was sent from queue 1 to queue 2\.
    Our application consumes messages from `PacktTestQueue1` and push it to `PacktTestQueue2`.![Working
    with multiple queues in ApacheMQ](img/7320OS_02_06.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中，您会看到从队列1发送了一条消息到队列2。我们的应用程序从`PacktTestQueue1`消费消息并将其推送到`PacktTestQueue2`。![在ApacheMQ中使用多个队列](img/7320OS_02_06.jpg)
- en: Now, let's increase the number of messages to send and see how it behaves.![Working
    with multiple queues in ApacheMQ](img/7320OS_02_07.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们增加要发送的消息数量，看看它的行为。![在ApacheMQ中使用多个队列](img/7320OS_02_07.jpg)
- en: Click on **PacktTestQueue2** and you will see all the messages getting pushed
    to `PacktTestQueue2`.![Working with multiple queues in ApacheMQ](img/7320OS_02_08.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**PacktTestQueue2**，您将看到所有消息都被推送到`PacktTestQueue2`。![在ApacheMQ中使用多个队列](img/7320OS_02_08.jpg)
- en: Configuring JMS transactions
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置JMS事务
- en: When we use transactions, we can handle the preceding scenario better. The messages
    will be processed within the transactions, and in case of exceptions in the listener,
    will be rolled back for the complete source code. Refer to the source code present
    in `repository-Spring4JMS_TransactionChapter2`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用事务时，我们可以更好地处理前面的情景。消息将在事务中处理，在监听器中出现异常的情况下，将为完整的源代码回滚。参考`repository-Spring4JMS_TransactionChapter2`中的源代码。
- en: 'Here are the steps required for including transactions in messaging:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 包括事务在消息传递中需要以下步骤：
- en: 'Add the following property to the ActiveMQ connection factory bean configuration:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加到ActiveMQ连接工厂bean配置中：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Update the listener definition as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新监听器定义如下：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let us revisit the scenarios to learn what happened after adding transactions
    to the `jmsTemplate`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视情景，了解在`jmsTemplate`中添加事务后发生了什么：
- en: '**Scenario 1**: Success Scenario'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景1**：成功场景'
- en: '**Scenario 2**: The message producer sends information to the queues, the consumer
    reads it and processes it into the database; then, an error occurs.![Configuring
    JMS transactions](img/B02116_02_09.jpg)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景2**：消息生产者向队列发送信息，消费者读取并将其处理到数据库中；然后出现错误。![配置JMS事务](img/B02116_02_09.jpg)'
- en: After adding the transaction, the message will be sent by the broker three times.
    On the fourth attempt, it will be sent to a new queue so that the message is not
    lost.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 添加事务后，代理将三次发送消息。在第四次尝试时，它将发送到新队列，以便消息不会丢失。
- en: '**Scenario 3**: The message producer sends information to the queues, the consumer
    reads it and processes it into the database; then, an error occurs.![Configuring
    JMS transactions](img/B02116_02_10.jpg)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景3**：消息生产者向队列发送信息，消费者读取并将其处理到数据库中；然后出现错误。![配置JMS事务](img/B02116_02_10.jpg)'
- en: After adding the transaction, if the execution fails with the listener before
    completing the process, the message broker resends the information.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 添加事务后，如果在完成处理之前监听器执行失败，消息代理将重新发送信息。
- en: Configuring multiple JMS listeners and adapters
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置多个JMS监听器和适配器
- en: We may come across an instance where we need to have more JMS listeners and
    adapters. We can configure multiple listeners when we have to process multiple
    queues easily with Spring Template. To process multiple listeners, we also need
    adapters, which will delegate to different listeners.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会遇到需要有更多JMS监听器和适配器的情况。当我们需要使用Spring模板轻松处理多个队列时，我们可以配置多个监听器。为了处理多个监听器，我们还需要适配器，它将委托给不同的监听器。
- en: '[PRE16]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: JMS transactions
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JMS事务
- en: In this section, let's see how we can include transactions in messaging. We
    shall first demonstrate messaging without transactions using a few scenarios.
    We shall first describe the scenarios and write a test case. Then, we shall develop
    an application around it. We shall demonstrate sending messages using the `convertandsendmessage()`
    method.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看如何在消息传递中包含事务。我们将首先演示不使用事务的消息传递，使用几种情景。我们将首先描述情景并编写一个测试用例。然后，我们将围绕它开发一个应用程序。我们将演示使用`convertandsendmessage()`方法发送消息。
- en: '**Scenario 1**: This is a positive use case, which we have seen in previous
    sections as well.![JMS transactions](img/B02116_02_11.jpg)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景1**：这是一个正面的用例，在之前的部分中我们也看到了。![JMS事务](img/B02116_02_11.jpg)'
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Scenario 2**: Here, let''s use a negative scenario. The message producer
    sends information to the queues and the consumer reads it, but an exception occurs
    before reaching the database.![JMS transactions](img/B02116_02_12.jpg)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景2**：在这里，让我们使用一个负面情景。消息生产者向队列发送信息，消费者读取，但在到达数据库之前发生异常。![JMS事务](img/B02116_02_12.jpg)'
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this scenario we have lost the message.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们丢失了消息。
- en: '**Scenario 3**: Here, let''s use another negative scenario. The message producer
    sends information to the queues and the consumer reads it and processes it into
    the database; then, an error occurs![JMS transactions](img/B02116_02_13.jpg)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景3**：在这里，让我们使用另一个负面情景。消息生产者向队列发送信息，消费者读取并将其处理到数据库中；然后出现错误。![JMS事务](img/B02116_02_13.jpg)'
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The message gets delivered and gets stored in the database before the message
    fails.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 消息在失败之前被传递并存储在数据库中。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the steps required to install Apache ActiveMQ and
    different types of messaging. We demonstrated integrating Spring `jms` templates
    with the application. We also demonstrated, with screenshots, how to create multiple
    queues and how to communicate with a queue using Spring templates. In the next
    chapter, we will look at Spring JAVA mail APIs.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了安装Apache ActiveMQ和不同类型的消息传递所需的步骤。我们演示了如何将Spring的`jms`模板与应用程序集成。我们还通过截图演示了如何创建多个队列以及如何使用Spring模板与队列进行通信。在下一章中，我们将研究Spring
    JAVA邮件API。
