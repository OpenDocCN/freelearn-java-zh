- en: Chapter 5. Logging and Tracing of SOAP Messages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。记录和跟踪SOAP消息
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Logging the message payload manually
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动记录消息有效载荷
- en: Logging both request and response SOAP Envelopes using log4j
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用log4j记录请求和响应SOAP信封
- en: Logging both request and response using Spring-WS's Interceptors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring-WS的拦截器记录请求和响应
- en: Using Eclipse IDE to debug a Spring-WS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse IDE调试Spring-WS
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Logging and tracing refers to capturing and recording events and data structures
    about a software program's execution to provide an audit trail. It helps the developers
    and support team to collect runtime information on the execution of the software
    program. For any serious software development team, it is very important to implement
    logging in their system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录和跟踪是指捕获和记录有关软件程序执行的事件和数据结构，以提供审计跟踪。它有助于开发人员和支持团队收集有关软件程序执行的运行时信息。对于任何严肃的软件开发团队，实现系统日志记录非常重要。
- en: For Web-Service development, it is quite useful to be able to see the SOAP messages
    being transported between client and server. Spring Web-Services offer logging
    and tracing of SOAP messages, when they arrive, or just before they are sent.
    Logging, in Spring-WS, is managed by the standard Commons Logging interface.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web服务开发，能够看到在客户端和服务器之间传输的SOAP消息非常有用。Spring Web服务在SOAP消息到达时或发送前提供日志记录和跟踪。在Spring-WS中，日志记录由标准的Commons
    Logging接口管理。
- en: Generally, log4j is used as the concrete logging library in Spring Projects
    (as Spring logging feature are build upon log4j). This chapter illustrates a few
    simple ways of logging SOAP messages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在Spring项目中，log4j被用作具体的日志记录库（因为Spring日志功能是建立在log4j之上的）。本章介绍了记录SOAP消息的几种简单方法。
- en: The recipes illustrated here can be applied to project sources of any recipe
    in this book. For demonstration purpose, an existing project source of the recipe
    *Setting up an endpoint by annotating the payload-root* is used, as this can be
    applied to any project used in this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里所示的配方可以应用于本书中任何配方的项目源。为了演示目的，使用了配方*通过注释负载根设置端点*的现有项目源，因为这可以应用于本书中使用的任何项目。
- en: Logging message payload manually
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动记录消息有效载荷
- en: Message payload is the content of the SOAP message element, `SOAP-ENV:Body`.
    This is the exact message part of the whole SOAP Envelope for both request and
    response.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 消息有效载荷是SOAP消息元素`SOAP-ENV:Body`的内容。这是整个SOAP信封的确切消息部分，用于请求和响应。
- en: This recipe demonstrates logging the message payload manually from inside the
    code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方演示了从代码内部手动记录消息有效载荷。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.1` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-5.1`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'And `LiveRestaurant_R-5.1-Client` (for the client side), with the following
    Maven dependencies:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-5.1-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses projects used in the recipe *Setting up an endpoint by annotating
    the payload-root* in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了[第1章](ch01.html "第1章。构建SOAP Web服务")中使用的*通过注释负载根设置端点*的配方中使用的项目，*构建SOAP
    Web服务*。
- en: Modify `log4j.properties` to default the log level into `INFO`. Remove any type
    of debug setting for any package or API in `log4j.properties`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`log4j.properties`将日志级别默认设置为`INFO`。在`log4j.properties`中删除任何包或API的调试设置。
- en: Modify `OrderServiceEndpoint` to create two `xmlToString` methods and call these
    two methods to convert incoming messages into String and log it.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`OrderServiceEndpoint`以创建两个`xmlToString`方法，并调用这两个方法将传入的消息转换为String并记录下来。
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command line window.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入的Tomcat服务器中构建和部署项目。从项目的根目录在命令行窗口中运行`mvn clean package tomcat:run`。
- en: 'To test this, open a new command line window and go to the folder `LiveRestaurant_R-5.1-Client`
    and run: `mvn clean package exec:java`.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这个，打开一个新的命令行窗口，转到文件夹`LiveRestaurant_R-5.1-Client`并运行：`mvn clean package exec:java`。
- en: 'Here is the output from the server-side console:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The code simply logs the message payload manually, without any configuration
    change anywhere in the application. The changes in the `log4j.properties` makes
    sure that the log messages are printed to the console (as the appender is the
    `ConsoleAppender)` and no debug messages are printed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码简单地手动记录消息有效载荷，而不需要在应用程序的任何地方进行配置更改。在`log4j.properties`中的更改确保日志消息被打印到控制台（因为附加程序是`ConsoleAppender`），并且不打印调试消息：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The method `xmlToString(...)` transforms the XML Source/Element Object into
    a `String` using a `StringWriter:`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`xmlToString(...)`将XML源/元素对象转换为`String`，使用`StringWriter`：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `handleCancelOrderRequest()` and `handlePlaceOrderRequest()` methods,
    `xmlToString()` is invoked passing the Source/Element of the `RequestPayload`
    to return the message payload as a String instance, which is then logged into
    the configured logging appender (console in this case):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleCancelOrderRequest()`和`handlePlaceOrderRequest()`方法中，调用`xmlToString()`传递`RequestPayload`的源/元素以将消息有效载荷返回为String实例，然后将其记录到配置的日志附加程序（在这种情况下是控制台）中：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'As good practice, we log messages in debug mode. To get better performance,
    we do as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为良好的实践，我们以调试模式记录消息。为了获得更好的性能，我们做如下操作：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: During runtime, we can enable and disable a log based on requirements.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，我们可以根据需求启用和禁用日志。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The example given in this recipe makes use of `SimpleMethodEndpointMapping`,
    which receives the message payload in the form of XML Source `(javax.xml.transform.Source)`
    or the Element `(org.w3c.dom.Element)` object as the method argument, with the
    help of the `RequestPayload` annotation, whereas in other cases, the incoming
    message will be in a different form. For example, marshalling endpoint the input
    is already a marshalled object. You will need to adopt the appropriate mechanisms
    to transform the incoming argument in those cases. The recipes after that will
    give you insights on other approaches of logging and tracing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中给出的示例使用`SimpleMethodEndpointMapping`，它以XML Source（`javax.xml.transform.Source`）或Element（`org.w3c.dom.Element`）对象的形式接收消息负载作为方法参数，并使用`RequestPayload`注解，而在其他情况下，传入消息将以不同的形式出现。例如，在编组端点中，输入已经是编组对象。在这些情况下，您需要采用适当的机制来转换传入的参数。之后的配方将为您提供有关日志记录和跟踪的其他方法的见解。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Setting up an endpoint by annotating the payload-root* in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过注释payload-root设置端点*在[第1章](ch01.html "第1章。构建SOAP Web服务")中，*构建SOAP Web服务*。'
- en: Logging both request and response SOAP Envelopes using log4j
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用log4j记录请求和响应SOAP信封
- en: Spring-WS framework allows the developer to log the entire SOAP message using
    simple logger configuration. This recipe illustrates configuring this internal
    logging of SOAP messages by the framework with log4j logger framework.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS框架允许开发人员使用简单的日志记录器配置记录整个SOAP消息。本配方通过log4j日志记录框架配置框架的SOAP消息内部日志记录。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.2` (for the server-side
    Web Service) and has the following Maven dependencies:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-5.2`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'It also has `LiveRestaurant_R-5.2-Client` (for the client side) with the following
    Maven dependencies:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有`LiveRestaurant_R-5.2-Client`（用于客户端）并具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses projects used in the recipe *Setting up an endpoint by annotating
    the payload-root:*
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方使用了配方*通过注释payload-root设置端点*中使用的项目：
- en: Modify `log4j.properties` to set message tracing.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`log4j.properties`以设置消息跟踪。
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command-line window.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入的Tomcat服务器中构建和部署项目。在命令行窗口中从项目的根目录运行`mvn clean package tomcat:run`。
- en: To test this, open a new command-line window, go to the folder `LiveRestaurant_R-5.1-Client`,
    and run `mvn clean package exec:java`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这一点，打开一个新的命令行窗口，转到文件夹`LiveRestaurant_R-5.1-Client`，并运行`mvn clean package
    exec:java`。
- en: 'The following is the output from the server-side console (please note the `SOAP-Env:Envelope`
    element of the Web-Service response generated in the message):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出（请注意Web服务响应中生成的`SOAP-Env:Envelope`元素）：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The very core component of Spring-WS framework, namely, `MessageDispatcher`,
    logs every incoming SOAP message as soon as it receives it in the `receive()`
    method, after extracting the message content from the `MessageContext`, if logging
    is enabled for tracing or debugging.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS框架的核心组件`MessageDispatcher`在`receive()`方法中接收到每个传入的SOAP消息后，会从`MessageContext`中提取消息内容，并在跟踪或调试启用时记录日志。
- en: 'In the `receive()` method, it checks for log settings for a named log instance,
    `org.springframework.ws.server.MessageTracing.received` checks for logging SOAP
    requests, and `org.springframework.ws.server.MessageTracing.sent` checks for SOAP
    responses. If those settings are given a value of either `TRACE` or `DEBUG`, it
    prints the entire SOAP Envelope of the corresponding request or response:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`receive()`方法中，它检查命名日志实例的日志设置，`org.springframework.ws.server.MessageTracing.received`检查记录SOAP请求，`org.springframework.ws.server.MessageTracing.sent`检查SOAP响应。如果这些设置的值为`TRACE`或`DEBUG`，它将打印相应请求或响应的整个SOAP信封：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The easiest setting for the log tracing or debugging is in `log4j.properties`,
    as mentioned previously.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪或调试的最简单设置是在`log4j.properties`中，如前所述。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Previously, for security purposes, messages were encrypted, so enabling logging
    was not useful all the time. It's better to log the message after completion of
    the decryption inside the entry method.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，出于安全目的，消息是加密的，因此启用日志记录并不总是有用的。最好在输入方法内完成解密后记录消息。
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Setting up an endpoint by annotating the payload-root* in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过注释payload-root设置端点*在[第1章](ch01.html "第1章。构建SOAP Web服务")中，*构建SOAP Web服务*。'
- en: Logging both request and response using Spring-WS's Interceptors
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring-WS的拦截器记录请求和响应
- en: Spring-WS provides features to log incoming/outgoing messages. These facilities
    are provided by using the `PayloadLoggingInterceptor` and `SoapEnvelopeLoggingInterceptor`
    classes that log using **Commons Logging Log**. While `PayloadLoggingInterceptor`
    logs only a message's payload, `SoapEnvelopeLoggingInterceptor` logs the whole
    SOAP Envelope including headers. To activate logging features using these two
    interceptors, log property within the `log4j` properties file should be set to
    debug for interceptors package.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS提供了记录传入/传出消息的功能。这些功能是通过使用`PayloadLoggingInterceptor`和`SoapEnvelopeLoggingInterceptor`类来实现的，这些类使用**Commons
    Logging Log**进行记录。虽然`PayloadLoggingInterceptor`仅记录消息的有效负载，但`SoapEnvelopeLoggingInterceptor`记录整个SOAP信封，包括标头。要使用这两个拦截器激活日志记录功能，`log4j`属性文件中的日志属性应设置为拦截器包的调试。
- en: In this recipe, logging Web-Service messages using `PayloadLoggingInterceptor`
    and `SoapEnvelopeLoggingInterceptor` are explained.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，解释了使用`PayloadLoggingInterceptor`和`SoapEnvelopeLoggingInterceptor`记录Web服务消息。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.3` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，项目的名称是`LiveRestaurant_R-5.3`（用于服务器端Web服务），并具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'And `LiveRestaurant_R-5.3-Client` (for the client side) with the following
    Maven dependencies:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以及`LiveRestaurant_R-5.3-Client`（用于客户端）和以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses projects used in the recipe *Setting up an endpoint by annotating
    the payload-root:*
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了教程*通过注释payload-root设置端点*中使用的项目：
- en: Open `log4j.properties` and set logging to debug the package `org.springframework.ws.server.endpoint.interceptor`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`log4j.properties`并将日志设置为调试`org.springframework.ws.server.endpoint.interceptor`包。
- en: Register `PayloadLoggingInterceptor` in the server-side application context.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文中注册`PayloadLoggingInterceptor`。
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command-line window.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入式Tomcat服务器中构建和部署项目。从项目的根目录在命令行窗口中运行`mvn clean package tomcat:run`。
- en: To test this, open a new command-line window, go to the folder `LiveRestaurant_R-5.3-Client`,
    and run `mvn clean package exec:java`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这一点，打开一个新的命令行窗口，转到文件夹`LiveRestaurant_R-5.3-Client`，然后运行`mvn clean package
    exec:java`。
- en: 'Here is the output from the server-side console:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To log Web-Service messages using `SoapEnvelopeLoggingInterceptor`, follow
    these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`SoapEnvelopeLoggingInterceptor`记录Web服务消息，请按照以下步骤操作：
- en: Register `SoapEnvelopeLoggingInterceptor` in the server-side application context.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文中注册`SoapEnvelopeLoggingInterceptor`。
- en: Open `log4j.properties` and set logging to debug the package `org.springframework.ws.soap.server.endpoint.interceptor`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`log4j.properties`并将日志设置为调试`org.springframework.ws.soap.server.endpoint.interceptor`包。
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command-line window.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入式Tomcat服务器中构建和部署项目。从项目的根目录在命令行窗口中运行`mvn clean package tomcat:run`。
- en: To test this, open a new command-line window, go to folder `LiveRestaurant_R-5.3-Client`,
    and run `mvn clean package exec:java`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这一点，打开一个新的命令行窗口，转到文件夹`LiveRestaurant_R-5.3-Client`，然后运行`mvn clean package
    exec:java`。
- en: 'Here is the output from the server-side console:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`MessageDispatcherServlet` calls the Interceptor (if any) when the message
    is received as well as before calling the handler method in the endpoint and before
    sending back the response to the client.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当消息被接收时，`MessageDispatcherServlet`调用拦截器（如果有），以及在调用端点中的处理程序方法之前和向客户端发送响应之前。
- en: 'Registering `PayloadLoggingInterceptor` inside `spring-ws-servlet.xml` only
    logs the message''s payload:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在`spring-ws-servlet.xml`中注册`PayloadLoggingInterceptor`会记录消息的有效负载：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, registering `SoapEnvelopeLoggingInterceptor` inside `spring-ws-servlet.xml`
    logs the whole message''s SOAP Envelope:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在`spring-ws-servlet.xml`中注册`SoapEnvelopeLoggingInterceptor`会记录整个消息的SOAP Envelope：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In both cases, the package name of these Interceptors should be set to debug
    for logging purpose:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，这些拦截器的包名称应设置为用于记录目的的debug：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Setting the `logRequest` and `logResponse` properties of `PayloadLoggingInterceptor`
    to true/false, enables/disables logging for request/response messages.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将`PayloadLoggingInterceptor`的`logRequest`和`logResponse`属性设置为true/false，启用/禁用请求/响应消息的记录。
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition to `logRequest` and `logResponse`, there is a `logFault` property
    for `SoapEnvelopeLoggingInterceptor` that setting these to true/false, enables/disables
    logging for request/response/fault messages:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`logRequest`和`logResponse`之外，`SoapEnvelopeLoggingInterceptor`还有一个`logFault`属性，将这些设置为true/false，启用/禁用请求/响应/故障消息的记录：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Setting up an endpoint by annotating the payload-root* in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过注释payload-root设置端点*在[第1章](ch01.html "第1章。构建SOAP Web服务")中，*构建SOAP Web服务*。'
- en: '*Logging both request and response SOAP Envelope using Log4j*'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Log4j记录请求和响应SOAP Envelope*'
- en: Using Eclipse IDE to debug a Spring-WS
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Eclipse IDE调试Spring-WS
- en: The ability to debug an application during the development phase is one of the
    most important features of an IDE, as it helps the developers to find out the
    bugs easily and hence speeds up the development. For a server-side application,
    which is more complex, the debug ability is more important for defect-discovery.
    A remote debugger attached to an IDE like Eclipse can shorten the problem analysis
    time significantly and make the process more enjoyable.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段调试应用程序的能力是IDE最重要的功能之一，因为它可以帮助开发人员轻松找出错误，从而加快开发速度。对于更复杂的服务器端应用程序，调试能力对于发现缺陷更为重要。附加到Eclipse等IDE的远程调试器可以显著缩短问题分析时间，并使过程更加愉快。
- en: Eclipse can be configured for debugging within a web/app server with both embedded
    and remote servers. This recipe explains how to debug a Spring-WS project as a
    web application from inside Eclipse, with an external remote Tomcat instance.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse可以配置为在嵌入式和远程服务器中进行Web/app服务器调试。本教程解释了如何在Eclipse内部以Web应用程序的形式调试Spring-WS项目，使用外部远程Tomcat实例。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To get started:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始：
- en: Install Apache-Tomcat-6.0.14.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Apache-Tomcat-6.0.14。
- en: Download and install Eclipse IDE for Java EE Developers Helios.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Eclipse IDE for Java EE Developers Helios。
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.4` (for the server-side
    WebService) and has the following Maven dependencies:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，项目的名称是`LiveRestaurant_R-5.4`（用于服务器端WebService），并具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'It also has `LiveRestaurant_R-5.4-Client` (for the client side) with the following
    Maven dependencies:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有`LiveRestaurant_R-5.4-Client`（用于客户端）和以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Modify the profile in user home `(/home/weblogic)` for Linux, or in the system
    variable in Windows for Tomcat.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux的用户主目录`(/home/weblogic)`中修改配置文件，或者在Windows的系统变量中为Tomcat进行设置。
- en: 'After installing Tomcat: On Linux > edit .profile>, add these lines for Tomcat:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Tomcat后：在Linux上>编辑.profile>，添加以下内容以用于Tomcat：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On Windows >edit system variable, set the system variable for Tomcat, as shown
    in the following screenshot:![How to do it...](img/978-1-849515-82-5_05_01.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上>编辑系统变量，如下图所示设置Tomcat的系统变量：![如何做...](img/978-1-849515-82-5_05_01.jpg)
- en: 'In the `$TOMCAT_HOME/conf/tomcat-users.xml` file, set the role as `manager`
    and `username` and `password` as follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$TOMCAT_HOME/conf/tomcat-users.xml`文件中，将角色设置为`manager`，`username`和`password`如下：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `MAVEN_HOME/conf/settings.xml` file and if any `.m2/settings.xml` `(.m2`
    is maven repository folder), add a user login configuration named `tomcat` with
    the password `tomcat` as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MAVEN_HOME/conf/settings.xml`文件中，以及如果有任何`.m2/settings.xml`（`.m2`是maven存储库文件夹），添加一个名为`tomcat`的用户登录配置，密码为`tomcat`，如下所示：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Modify `debug.sh/debug.bat TOMCAT_HOME/bin/` at the end of the file:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾修改`debug.sh/debug.bat TOMCAT_HOME/bin/`：
- en: 'On Windows, modify debug.bat:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，修改debug.bat：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On Linux, modify debug.sh:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux上，修改debug.sh：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run Tomcat on Linux/Windows using `debug.sh/debug.bat` from `TOMCAT_HOME/bin/`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux/Windows上使用`TOMCAT_HOME/bin/`中的`debug.sh/debug.bat`运行Tomcat。
- en: Modify the `pom.xml` file of `LiveRestaurant_R-5.4:`
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`LiveRestaurant_R-5.4`的`pom.xml`文件：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Import the project `LiveRestaurant_R-5.4` into Eclipse and set a break point
    in the class `com.packtpub.liverestaurant.service.endpoint.OrderEndpoint.java`
    in the method `handleCancelOrderRequest`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目`LiveRestaurant_R-5.4`导入Eclipse，并在`com.packtpub.liverestaurant.service.endpoint.OrderEndpoint.java`类的`handleCancelOrderRequest`方法中设置断点。
- en: Run `mvn clean package` from `LiveRestaurant_R-5.4` and then copy the WAR file
    into `tomcat/webapp` (the application will be deployed into Tomcat).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`LiveRestaurant_R-5.4`运行`mvn clean package`，然后将WAR文件复制到`tomcat/webapp`（应用将被部署到Tomcat中）。
- en: 'In Eclipse, set Maven installation: **Windows** | **Preferences** | **Maven**
    | **Installations**, click on the **Add** button, and set external Maven:![How
    to do it...](img/978-1-849515-82-5_05_02.jpg)'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中设置Maven安装：**Windows** | **Preferences** | **Maven** | **Installations**，点击**Add**按钮，并设置外部Maven：![如何做...](img/978-1-849515-82-5_05_02.jpg)
- en: Open Eclipse. Right-click on **LiveRestaurant_R-5.4** | **Debug as** | **Debug
    Configurations** | **Remote Java Application**, click on **New**, and then click
    on the **Debug** button:![How to do it...](img/978-1-849515-82-5_05_03.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Eclipse。右键单击**LiveRestaurant_R-5.4** | **Debug as** | **Debug Configurations**
    | **Remote Java Application**，点击**New**，然后点击**Debug**按钮：![如何做...](img/978-1-849515-82-5_05_03.jpg)
- en: From the project `LiveRestaurant_R-5.4-Client`, run `mvn clean package`
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目`LiveRestaurant_R-5.4-Client`中运行`mvn clean package`
- en: 'The following is the output of this test:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试的输出：
- en: '![How to do it...](img/978-1-849515-82-5_05_04.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/978-1-849515-82-5_05_04.jpg)'
- en: 'Now you can try different options for debugging the application, such as:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以尝试不同的调试应用程序选项，例如：
- en: Step Over (F5)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Step Over (F5)
- en: Step Into (F5)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Step Into (F5)
- en: Step Out (F7)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Step Out (F7)
- en: Watch
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察
- en: Inspect
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe makes use of the **Java Debugger (JDB)** tool that helps find and
    fix bugs in the Java language programs both locally and on the server. JDB is
    part of the **Java Platform Debugging Architecture** (JPDA) that provides the
    infrastructure you need to build end-user debugger applications for the Java platform.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用**Java Debugger (JDB)**工具来帮助在本地和服务器上找到并修复Java语言程序中的错误。JDB是**Java Platform
    Debugging Architecture** (JPDA)的一部分，为您构建Java平台的最终用户调试器应用程序提供了所需的基础设施。
- en: To use JDB in a Java EE application server or a servlet container, such as Tomcat,
    you must first launch it with debugging enabled and attach it to the server from
    the debugger through a JPDA port (the default port is 1044). At step 4, the JPDA
    port is set to 8000\. Instead of the `run.bat/run.sh`, this recipe starts the
    server using the `debug.bat/debug.sh`, which means the server is started in debug
    mode.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Java EE应用程序服务器或Servlet容器（如Tomcat）中使用JDB，必须首先启用调试并通过JPDA端口（默认端口为1044）将其附加到调试器。在第4步，JPDA端口设置为8000。此处使用`debug.bat/debug.sh`启动服务器，而不是`run.bat/run.sh`，这意味着服务器以调试模式启动。
- en: The JDB parameters specify the way the debugger will operate. For instance,
    `JPDA_TRANSPORT=dt_socket` instructs the JVM that the debugger connections will
    be made through a socket, while the `JPDA_ADDRESS=8000` parameter informs it that
    the port number will be 8000.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: JDB参数指定调试器的操作方式。例如，`JPDA_TRANSPORT=dt_socket`指示JVM调试器连接将通过套接字进行，而`JPDA_ADDRESS=8000`参数通知端口号将为8000。
- en: The Eclipse IDE is then attached to a JVM that accepts debugging connections.
    The project is set as a Remote Java Application inside Eclipse that listens to
    the same port, that is, 8000, for any debugging activity. In the next step, the
    break point will be set inside the service class that would be managed and redirected
    to the IDE by the JDB at runtime.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Eclipse IDE将连接到接受调试连接的JVM。该项目被设置为Eclipse内的远程Java应用程序，监听相同的端口，即8000，以进行任何调试活动。接下来，将在服务类中设置断点，该断点将在运行时由JDB管理和重定向到IDE。
- en: When the `LiveRestaurant_R-5.4-Client` project is executed as the client program
    of the service, the service class, `OrderServiceEndpoint`, is invoked and the
    break point is hit at the JVM, which is in the debug mode. It notifies the frontend
    as to where the JDI is implemented and which is the IDE in this case.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当`LiveRestaurant_R-5.4-Client`项目作为服务的客户端程序执行时，服务类`OrderServiceEndpoint`被调用，并在处于调试模式的JVM中命中断点。它通知前端JDI的实现位置以及在这种情况下的IDE。
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Similar to the Tomcat server, you can attach any application server to any IDE
    such as Eclipse, Net Beans, or JDeveloper. The concepts are the same. However,
    the steps may vary for each application server and IDE.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于Tomcat服务器，您可以将任何应用程序服务器附加到Eclipse、Net Beans或JDeveloper等IDE。概念是相同的。但是，每个应用程序服务器和IDE的步骤可能会有所不同。
- en: Tip
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When debug mode is enabled, try to send the total time taken by a message in
    a given layer as one of the attributes in an XML message. This helps to troubleshoot
    in performance testing.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 启用调试模式时，尝试将消息在给定层中所花费的总时间作为 XML 消息中的一个属性发送。这有助于在性能测试中进行故障排除。
