- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Monitoring Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务监控
- en: In this chapter, we will learn how to use Prometheus and Grafana to collect,
    monitor, and alert about performance metrics. As we mentioned in *Chapter 1*,
    *Introduction to Microservices*, in a production environment it is crucial to
    be able to collect metrics for application performance and hardware resource usage.
    Monitoring these metrics is required to avoid long response times or outages for
    API requests and other processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Prometheus和Grafana收集、监控和警报性能指标。正如我们在*第1章*，*微服务简介*中提到的，在生产环境中，能够收集应用程序性能和硬件资源使用的指标至关重要。监控这些指标是避免API请求和其他过程出现长时间响应或中断的必要条件。
- en: To be able to monitor a system landscape of microservices in a cost-efficient
    and proactive way, we must also be able to define alarms that are triggered automatically
    if the metrics exceed the configured limits.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以成本效益和主动的方式监控微服务系统景观，我们还必须能够定义当指标超过配置的限制时自动触发的警报。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to performance monitoring using Prometheus and Grafana
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana的性能监控简介
- en: Changes in source code to collect application metrics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集应用程序指标的源代码更改
- en: Building and deploying the microservices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和部署微服务
- en: Monitoring microservices using Grafana dashboards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Grafana仪表板监控微服务
- en: Setting up alarms in Grafana
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Grafana中设置警报
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For instructions on how to install the tools used in this book and how to access
    the source code for this book, see:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何安装本书中使用的工具以及如何访问本书源代码的说明，请参阅：
- en: '*Chapter 21*, *Installation Instructions for macOS*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第21章*，*macOS的安装说明*'
- en: '*Chapter 22*, *Installation Instructions for Microsoft Windows with WSL 2 and
    Ubuntu*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第22章*，*使用WSL 2和Ubuntu的Microsoft Windows安装说明*'
- en: The code examples in this chapter all come from the source code in `$BOOK_HOME/Chapter19`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例均来自`$BOOK_HOME/Chapter19`的源代码。
- en: If you want to view the changes applied to the source code in this chapter so
    that you can use Prometheus and Grafana to monitor and alert on performance metrics,
    you can compare it with the source code for *Chapter 19*, *Centralized Logging
    with the EFK Stack*. You can use your favorite diff tool and compare the two folders,
    `$BOOK_HOME/Chapter19` and `$BOOK_HOME/Chapter20`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看本章源代码中应用的变化，以便使用Prometheus和Grafana监控和警报性能指标，您可以将其与*第19章*，*使用EFK堆栈进行集中日志记录*的源代码进行比较。您可以使用您喜欢的diff工具比较两个文件夹，`$BOOK_HOME/Chapter19`和`$BOOK_HOME/Chapter20`。
- en: Introduction to performance monitoring using Prometheus and Grafana
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana的性能监控简介
- en: In this chapter, we will reuse the deployment of Prometheus and Grafana that
    we created in *Chapter 18*, *Using a Service Mesh to Improve Observability and
    Management*, in the *Deploying Istio in a Kubernetes cluster* section. Also in
    that chapter, we were briefly introduced to Prometheus, a popular open source
    database for collecting and storing time series data such as performance metrics.
    We learned about Grafana, an open source tool to visualize performance metrics.
    With the Grafana deployment comes a set of Istio-specific dashboards. Kiali can
    also render some performance-related graphs without the use of Grafana. In this
    chapter, we will get some hands-on experience with these tools.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重用我们在*第18章*，*在Kubernetes集群中部署Istio*部分中创建的Prometheus和Grafana的部署。在那章中，我们还简要介绍了Prometheus，这是一个流行的开源数据库，用于收集和存储时间序列数据，如性能指标。我们还了解了Grafana，这是一个开源工具，用于可视化性能指标。随着Grafana的部署，还附带了一套Istio特定的仪表板。Kiali也可以在不使用Grafana的情况下渲染一些与性能相关的图表。在本章中，我们将获得一些使用这些工具的实践经验。
- en: The Istio configuration we deployed in *Chapter 18* includes a configuration
    of Prometheus, which automatically collects metrics from Pods in Kubernetes. All
    we need to do is set up an endpoint in our microservice that produces metrics
    in a format Prometheus can consume. We also need to add annotations to the Kubernetes
    Pods so that Prometheus can find the address of these endpoints. See the *Changes
    in source code to collect application metrics* section of this chapter for details
    on how to set this up. To demonstrate Grafana’s capabilities to raise alerts,
    we will also deploy a local mail server.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第18章*中部署的Istio配置包括Prometheus的配置，该配置会自动从Kubernetes中的Pod收集指标。我们所需做的只是在我们微服务中设置一个端点，该端点以Prometheus可以消费的格式产生指标。我们还需要向Kubernetes
    Pods添加注释，以便Prometheus可以找到这些端点的地址。有关如何设置此配置的详细信息，请参阅本章的*源代码更改以收集应用程序指标*部分。为了展示Grafana提升警报的能力，我们还将部署一个本地邮件服务器。
- en: 'The following diagram illustrates the relationship between the runtime components
    we just discussed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了我们刚才讨论的运行时组件之间的关系：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B19825_20_01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由低置信度自动生成](img/B19825_20_01.png)'
- en: 'Figure 20.1: Adding Prometheus and Grafana to the system landscape'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.1：将Prometheus和Grafana添加到系统架构中
- en: Here, we can see how Prometheus uses the annotations in the definitions of the
    Kubernetes Pods to be able to collect metrics from our microservices. It then
    stores these metrics in its database. A user can access the web UIs of Kiali and
    Grafana to monitor these metrics in a **web browser**. The web browser uses the
    **minikube tunnel** that was introduced in *Chapter 18*, in the *Setting up access
    to Istio services* section, to access Kiali, Grafana, and also a web page from
    the mail server to see alerts sent out by Grafana.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Prometheus如何使用Kubernetes Pods定义中的注释来收集我们的微服务指标。然后，它将这些指标存储在其数据库中。用户可以通过**网络浏览器**访问Kiali和Grafana的Web
    UI来监控这些指标。网络浏览器使用在第18章的*设置访问Istio服务*部分中介绍的**minikube隧道**来访问Kiali、Grafana，以及来自邮件服务器的网页，以查看Grafana发送的警报。
- en: Please remember that the configuration that was used to deploy Istio from *Chapter
    18* is only intended for development and testing, not production. For example,
    performance metrics stored in the Prometheus database will not survive the Prometheus
    Pod being restarted!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，*第18章*中用于部署Istio的配置仅适用于开发和测试，而不是生产。例如，存储在Prometheus数据库中的性能指标将不会在Prometheus
    Pod重启后幸存！
- en: With the Istio version used in this book, v1.17.0, comes Grafana v9.0.1 and
    Prometheus v2.34.0\. In Grafana v8, a new alerting system was introduced. To support
    readers of this book that use older versions of Grafana than v8, the older way
    of configuring alerts will be used. Grafana will be configured to use the older
    alert system in the *Configuring Grafana* section below.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的Istio版本为v1.17.0，Grafana版本为v9.0.1，Prometheus版本为v2.34.0。在Grafana v8中引入了新的警报系统。为了支持使用Grafana
    v8以下旧版本的本书读者，我们将使用旧的警报配置方式。在下面的*配置Grafana*部分中，Grafana将被配置为使用旧的警报系统。
- en: In the next section, we will look at what changes have been applied to the source
    code to make the microservices produce performance metrics that Prometheus can
    collect.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看对源代码进行了哪些更改，以便微服务产生Prometheus可以收集的性能指标。
- en: Changes in source code to collect application metrics
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码更改以收集应用程序指标
- en: 'Spring Boot 2 introduced support for producing performance metrics in a Prometheus
    format using the **Micrometer** library ([https://micrometer.io](https://micrometer.io)).
    There’s only one change we need to make to the source code of the microservices:
    we need to add a dependency on the Micrometer library, `micrometer-registry-prometheus`,
    in the Gradle build files, `build.gradle`. The dependency looks like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 2引入了对使用**Micrometer**库（[https://micrometer.io](https://micrometer.io)）以Prometheus格式产生性能指标的支持。我们只需要对微服务的源代码进行一个更改：我们需要在Gradle构建文件`build.gradle`中添加对Micrometer库`micrometer-registry-prometheus`的依赖项。依赖项看起来是这样的：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will make the microservices produce Prometheus metrics on port `4004` using
    the `/actuator/prometheus` path.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使微服务在端口`4004`上使用`/actuator/prometheus`路径产生Prometheus指标。
- en: In *Chapter 18*, we separated the management port, used by the actuator, from
    the port serving requests to APIs exposed by a microservice. See the *Observing
    the service mesh* section for a recap, if required.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 18 章，我们将管理端口（由 actuator 使用）与微服务暴露的 API 请求服务的端口分开。如需回顾，请参阅“观察服务网格”部分。
- en: 'To let Prometheus know about these endpoints, each microservice’s Pod is annotated
    with the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Prometheus 了解这些端点，每个微服务的 Pod 都被注解了以下代码：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is added to the `values.yaml` file of each component’s Helm chart. See
    `kubernetes/helm/components`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这被添加到每个组件的 Helm 图表的 `values.yaml` 文件中。请参阅 `kubernetes/helm/components`。
- en: 'To make it easier to identify the source of the metrics once they have been
    collected by Prometheus, they are tagged with the name of the microservice that
    produced the metric. This is achieved by adding the following configuration to
    the common configuration file, `config-repo/application.yml`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Prometheus 收集指标后更容易识别其来源，它们被标记为生成该指标的微服务的名称。这是通过向通用配置文件 `config-repo/application.yml`
    添加以下配置来实现的：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will result in each metric that’s produced having an extra label named
    `application`. It will contain the value of the standard Spring property for the
    name of a microservice, `spring.application.name`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致每个生成的指标都有一个额外的标签名为 `application`。它将包含微服务的标准 Spring 属性名称的值，即 `spring.application.name`。
- en: 'Finally, to ensure that we get metrics from the configured Prometheus endpoints,
    a test has been added to `test-em-all.bash`. It looks like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了确保我们从配置的 Prometheus 端点获取指标，已在 `test-em-all.bash` 中添加了一个测试。它看起来像：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that this test only runs if the test script is run against Kubernetes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，只有当针对 Kubernetes 运行测试脚本时，此测试才会运行。
- en: These are all the changes that are required to prepare the microservices to
    produce performance metrics and make Prometheus aware of what endpoints to use
    to start collecting them. In the next section, we will build and deploy the microservices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是准备微服务以生成性能指标并让 Prometheus 了解要使用哪些端点开始收集它们的必要更改。在下一节中，我们将构建和部署微服务。
- en: Building and deploying the microservices
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和部署微服务
- en: 'Building, deploying, and verifying the deployment using the `test-em-all.bash`
    test script is done in the same way it was done in *Chapter 19*, *Centralized
    Logging with the EFK Stack*, in the *Building and deploying the microservices*
    section. Run the following commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `test-em-all.bash` 测试脚本构建、部署和验证部署的方式与第 19 章“使用 EFK 栈进行集中日志记录”中“构建和部署微服务”部分的方式相同。运行以下命令：
- en: 'Build the Docker images from the source with the following commands:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从源构建 Docker 镜像：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `eval $(minikube docker-env -u)` command ensures that the `./gradlew build`
    command uses the host’s Docker engine and not the Docker engine in the Minikube
    instance. The `build` command uses Docker to run test containers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval $(minikube docker-env -u)` 命令确保 `./gradlew build` 命令使用主机的 Docker 引擎，而不是
    Minikube 实例中的 Docker 引擎。`build` 命令使用 Docker 来运行测试容器。'
- en: 'Recreate the namespace, `hands-on`, and set it as the default namespace:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新创建 `hands-on` 命名空间并将其设置为默认命名空间：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Resolve the Helm chart dependencies with the following commands.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令解决 Helm 图表的依赖关系。
- en: 'First, we update the dependencies in the `components` folder:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们更新 `components` 文件夹中的依赖项：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we update the dependencies in the `environments` folder:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们更新 `environments` 文件夹中的依赖项：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Deploy the system landscape using Helm and wait for all deployments to complete:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Helm 部署系统景观并等待所有部署完成：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Start the Minikube tunnel, if it’s not already running, as follows (see the
    *Setting up access to Istio services* section, in *Chapter 18*, for a recap if
    you need one):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果 Minikube 隧道尚未运行，请按照以下步骤启动（如需回顾，请参阅第 18 章“设置访问 Istio 服务”部分）： '
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember that this command requires that your user has `sudo` privileges and
    that you enter your password during startup. It takes a couple of seconds before
    the command asks for the password, so it is easy to miss!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，此命令需要您的用户具有 `sudo` 权限，并且在启动时输入您的密码。在命令请求密码之前需要几秒钟，所以很容易错过！
- en: 'Run the normal tests to verify the deployment with the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行正常测试以验证部署：
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Expect the output to be similar to what we’ve seen in the previous chapters:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出将与我们在前几章中看到的结果相似：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_02.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  描述由中等置信度自动生成](img/B19825_20_02.png)'
- en: 'Figure 20.2: All tests OK'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.2：所有测试正常
- en: With the microservices deployed, we can move on and start monitoring our microservices
    using Grafana!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务部署后，我们可以继续前进，并开始使用Grafana监控我们的微服务！
- en: Monitoring microservices using Grafana dashboards
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grafana仪表板监控微服务
- en: As we already mentioned in the introduction, Kiali provides some very useful
    dashboards out of the box. In general, they are focused on application-level performance
    metrics such as requests per second, response times, and fault percentages to
    process requests. As we will see shortly, they are very useful on an application
    level. But if we want to understand the usage of the underlying hardware resources,
    we need more detailed metrics, for example, Java VM-related metrics.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在引言中提到的，Kiali提供了一些非常实用的仪表板，它们通常是针对应用级性能指标，例如每秒请求数、响应时间和处理请求的故障百分比。不久我们将看到，它们在应用级非常有用。但如果我们想了解底层硬件资源的利用率，我们需要更详细的指标，例如Java
    VM相关的指标。
- en: Grafana has an active community that, among other things, shares reusable dashboards.
    We will try out a dashboard from the community that’s tailored to get a lot of
    valuable Java VM-related metrics from a Spring Boot application such as our microservices.
    Finally, we will see how we can build our own dashboards in Grafana. But let’s
    start by exploring the dashboards that come out of the box in Kiali and Grafana.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana有一个活跃的社区，其中之一就是分享可重用的仪表板。我们将尝试使用社区中的一个仪表板，该仪表板专门用于从Spring Boot应用程序（如我们的微服务）中获取大量有价值的Java
    VM相关指标。最后，我们将看到如何在Grafana中构建我们自己的仪表板。但让我们先探索Kiali和Grafana中随盒提供的仪表板。
- en: 'Before we do that, we need to make two preparations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样做之前，我们需要做两项准备工作：
- en: Install a local mail server for tests and configure Grafana to be able to send
    alert emails to it. We will use the mail server in the *Setting up alarms in Grafana*
    section.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装本地邮件服务器进行测试并配置Grafana，使其能够向其发送警报邮件。我们将在*在Grafana中设置警报*部分使用该邮件服务器。
- en: To be able to monitor some metrics, we will start the load test tool we used
    in previous chapters.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够监控一些指标，我们将启动我们在前几章中使用的负载测试工具。
- en: Installing a local mail server for tests
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装本地邮件服务器进行测试
- en: In this section, we will set up a local test mail server and configure Grafana
    to send alert emails to the mail server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置一个本地测试邮件服务器，并配置Grafana向邮件服务器发送警报邮件。
- en: 'Grafana can send emails to any SMTP mail server, but to keep the tests local,
    we will deploy a test mail server named `maildev`. Go through the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana可以向任何SMTP邮件服务器发送邮件，但为了保持测试的本地化，我们将部署一个名为`maildev`的测试邮件服务器。按照以下步骤进行：
- en: 'Install the test mail server in Istio’s namespace with the following commands:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在Istio的命名空间中安装测试邮件服务器：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To make the mail server’s web UI available from the outside of Minikube, a
    set of `Gateway`, `VirtualService`, and `DestinationRule` manifest files has been
    added for the mail server in Istio’s Helm chart. See the template `kubernetes/helm/environments/istio-system/templates/expose-mail.yml`.
    Run a `helm upgrade` command to apply the new manifest files:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使邮件服务器的Web UI可以从Minikube外部访问，我们在Istio的Helm图表中为邮件服务器添加了一组`Gateway`、`VirtualService`和`DestinationRule`清单文件。请参阅模板`kubernetes/helm/environments/istio-system/templates/expose-mail.yml`。运行`helm
    upgrade`命令以应用新的清单文件：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Verify that the test mail server is up and running by visiting its web page
    at [https://mail.minikube.me](https://mail.minikube.me). Expect a web page such
    as the following to be rendered:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问其网页[https://mail.minikube.me](https://mail.minikube.me)来验证测试邮件服务器是否正在运行。预期将渲染如下网页：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述由中等置信度自动生成](img/B19825_20_03.png)'
- en: 'Figure 20.3: Mail server web page'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.3：邮件服务器网页
- en: For more information on the mail server, see [https://hub.docker.com/r/maildev/maildev](https://hub.docker.com/r/maildev/maildev).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关邮件服务器的更多信息，请参阅[https://hub.docker.com/r/maildev/maildev](https://hub.docker.com/r/maildev/maildev)。
- en: With the mail server installed, we can configure Grafana in the next section
    to send emails to the server for alerts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件服务器安装完成后，我们可以在下一节中配置Grafana，使其能够向服务器发送警报邮件。
- en: Configuring Grafana
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Grafana
- en: 'Configuring Grafana can be done by setting up environment variables in its
    Kubernetes Deployment object. To enable the old alert system and configure Grafana
    to send emails to the test mail server, run the following commands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Grafana可以通过在其Kubernetes Deployment对象中设置环境变量来完成。要启用旧警报系统并配置Grafana向测试邮件服务器发送邮件，请运行以下命令：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The variables `GF_ALERTING_ENABLED` and `GF_UNIFIED_ALERTING_ENABLED` are used
    to enable the use of the older alerting system mentioned in the *Introduction
    to performance monitoring using Prometheus and Grafana* section above. The `GF_SMTP_ENABLED`
    variable is used to allow Grafana to send emails. The `GF_SMTP_SKIP_VERIFY` variable
    is used to tell Grafana to skip SSL checks with the test mail server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `GF_ALERTING_ENABLED` 和 `GF_UNIFIED_ALERTING_ENABLED` 用于启用上面提到的 *使用 Prometheus
    和 Grafana 介绍性能监控* 部分中提到的旧版警报系统。变量 `GF_SMTP_ENABLED` 用于允许 Grafana 发送电子邮件。变量 `GF_SMTP_SKIP_VERIFY`
    用于告诉 Grafana 跳过与测试邮件服务器的 SSL 检查。
- en: The `GF_SMTP_HOST` variable points to our mail server and, finally, the `GF_SMTP_FROM_ADDRESS`
    variable specifies what “from” address to use in the mail.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`GF_SMTP_HOST` 变量指向我们的邮件服务器，最后，`GF_SMTP_FROM_ADDRESS` 变量指定在邮件中使用的“发件人”地址。'
- en: Now that Grafana has been configured, in the next section we will start the
    load test tool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经配置了 Grafana，在下一节中，我们将开始启动负载测试工具。
- en: Starting up the load test
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动负载测试
- en: 'To have something to monitor, let’s start up the load test using Siege, which
    we used in previous chapters. Run the following commands to get an access token
    and then start up the load test, using the access token for authorization:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有东西可以监控，让我们使用在前面章节中使用的 Siege 启动负载测试。运行以下命令以获取访问令牌，然后使用访问令牌进行授权启动负载测试：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that an access token is only valid for 1 hour – after that, you need
    to get a new one.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，访问令牌仅有效 1 小时——之后，您需要获取一个新的。
- en: Now, we are ready to learn about the dashboards in Kiali and Grafana and explore
    the Grafana dashboards that come with Istio.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好学习 Kiali 和 Grafana 中的仪表板，并探索 Istio 一起提供的 Grafana 仪表板。
- en: Using Kiali’s built-in dashboards
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Kiali 内置的仪表板
- en: In *Chapter 18*, we learned about Kiali, but we skipped the part where Kiali
    shows performance metrics. Now, it’s time to get back to that subject!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 18 章* 中，我们学习了 Kiali，但跳过了 Kiali 显示性能指标的部分。现在，是时候回到这个主题了！
- en: 'Execute the following steps to learn about Kiali’s built-in dashboards:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来了解 Kiali 的内置仪表板：
- en: Open the Kiali web UI in a web browser using the [https://kiali.minikube.me](https://kiali.minikube.me)
    URL. Log in with `admin`/`admin` if required.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [https://kiali.minikube.me](https://kiali.minikube.me) URL 在网页浏览器中打开 Kiali
    网页 UI。如果需要，请使用 `admin`/`admin` 登录。
- en: To see our deployments, go to the workloads page by clicking on the **Workloads**
    tab from the menu on the left-hand side.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看我们的部署，请通过点击左侧菜单上的 **工作负载** 选项卡进入工作负载页面。
- en: Select the **product-composite** deployment by clicking on it.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击它来选择 **product-composite** 部署。
- en: On the **product-composite** page, select the **Outbound Metrics** tab. You
    will see a page like the following screenshot:![A screenshot of a computer  Description
    automatically generated with medium confidence](img/B19825_20_04.png)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **product-composite** 页面上，选择 **出站指标** 选项卡。您将看到一个类似于以下截图的页面：![计算机的截图  自动生成的描述，中等置信度](img/B19825_20_04.png)
- en: 'Figure 20.4: Kiali outbound metrics'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 20.4：Kiali 出站指标
- en: Kiali will visualize some overall performance graphs that are of great value,
    and there are more graphs to explore. Feel free to try them out on your own!
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Kiali 将可视化一些非常有价值的一般性能图表，并且还有更多图表可以探索。请随意尝试它们！
- en: However, far more detailed performance metrics are available in Grafana. Open
    the Grafana web UI in a web browser using the [https://grafana.minikube.me](https://grafana.minikube.me)
    URL.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，在 Grafana 中还有更多详细性能指标可供使用。使用 [https://grafana.minikube.me](https://grafana.minikube.me)
    URL 在网页浏览器中打开 Grafana 网页 UI。
- en: You will be presented with a welcome page with the text **Welcome to Grafana**.
    Over the welcome text is a **Home** link; click on it and you will be presented
    with an overview of available dashboards. You will see a folder named **Istio**
    that contains the dashboards that were installed when Grafana was deployed together
    with Istio in *Chapter 18*. Click on the folder to expand it and select the dashboard
    named **Istio Mesh Dashboard**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个带有文本 **欢迎使用 Grafana** 的欢迎页面。欢迎文本上方有一个 **主页** 链接；点击它，您将看到一个可用仪表板的概览。您将看到一个名为
    **Istio** 的文件夹，其中包含在 *第 18 章* 中与 Istio 一起部署的仪表板。点击文件夹以展开并选择名为 **Istio 网格仪表板**
    的仪表板。
- en: 'Expect a web page like the following:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期一个类似于以下网页：
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_05.png)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![计算机的截图  自动生成的描述](img/B19825_20_05.png)'
- en: 'Figure 20.5: Grafana showing Istio Mesh Dashboard'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 20.5：Grafana 显示 Istio 网格仪表板
- en: This dashboard gives a very good overview of metrics for the microservices involved
    in the service mesh, like request rates, response times, and success rates.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此仪表板为服务网格中涉及的微服务的指标提供了非常好的概览，如请求率、响应时间和成功率。
- en: 'There are a lot of detailed performance metrics available. Go back to the **Istio**
    folder (click on **Istio** in the top menu) and select the dashboard named **Istio
    Workload Dashboard****.** Select the **hands-on** namespace and the **product-composite**
    workload. Finally, expand the **Outbound Services** tab. The web page should look
    like the following screenshot:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有很多详细的性能指标可供查看。返回**Istio**文件夹（在顶部菜单中点击**Istio**），并选择名为**Istio Workload Dashboard******的仪表板。选择**hands-on**命名空间和**product-composite**工作负载。最后，展开**出站服务**选项卡。网页应类似于以下屏幕截图：
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_06.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图 自动生成描述](img/B19825_20_06.png)'
- en: 'Figure 20.6: Grafana with a lot of metrics for a microservice'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.6：微服务的大量指标展示的Grafana
- en: The page displays metrics like response codes, duration, and bytes sent per
    destination. Feel free to look around among the remaining dashboards provided
    by Istio!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 页面显示响应代码、持续时间以及每个目的地的发送字节数等指标。请随意浏览Istio提供的其他仪表板！
- en: As we’ve already mentioned, the Istio dashboards give a very good overview at
    an application level. But there is also a need to monitor the metrics for hardware
    usage per microservice. In the next section, we will learn about how existing
    dashboards can be imported – specifically, a dashboard showing Java VM metrics
    for a Spring Boot-based application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Istio仪表板在应用层面上提供了非常好的概览。但还需要监控每个微服务的硬件使用指标。在下一节中，我们将了解如何导入现有的仪表板——特别是显示基于Spring
    Boot应用程序的Java VM指标的仪表板。
- en: Importing existing Grafana dashboards
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入现有的Grafana仪表板
- en: 'As we’ve already mentioned, Grafana has an active community that shares reusable
    dashboards. They can be explored at [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards).
    We will try out a dashboard called **JVM (Micrometer) - Kubernetes - Prometheus
    by Istio** that’s tailored to get a lot of valuable JVM-related metrics from Spring
    Boot applications in a Kubernetes environment. The link to the dashboard is [https://grafana.com/grafana/dashboards/11955](https://grafana.com/grafana/dashboards/11955).
    Perform the following steps to import this dashboard:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Grafana有一个活跃的社区，分享可重用的仪表板。它们可以在[https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)中探索。我们将尝试一个名为**JVM
    (Micrometer) - Kubernetes - Prometheus by Istio**的仪表板，该仪表板专门用于从Kubernetes环境中的Spring
    Boot应用程序中获取大量有价值的JVM相关指标。仪表板的链接是[https://grafana.com/grafana/dashboards/11955](https://grafana.com/grafana/dashboards/11955)。按照以下步骤导入此仪表板：
- en: 'Import the dashboard named **JVM (Micrometer)** by following these steps:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤导入名为**JVM (Micrometer)**的仪表板：
- en: On the Grafana web page, hover the mouse over the **Dashboard** icon (four squares)
    in the menu to the left. Select **+ Import** from the menu that pops up.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Grafana网页上，将鼠标悬停在左侧菜单中的**仪表板**图标（四个方块）上。从弹出的菜单中选择**+ 导入**。
- en: On the **Import** page, enter the dashboard ID `11955` into the **Import via
    grafana.com** field and click on the **Load** button next to it.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**导入**页面，将仪表板ID `11955` 输入到**通过 grafana.com 导入**字段中，并点击其旁边的**加载**按钮。
- en: On the **Import** page that will be displayed, click on the **Prometheus** drop-down
    menu and select the **Prometheus** data source.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将显示的**导入**页面上，点击**Prometheus**下拉菜单并选择**Prometheus**数据源。
- en: Now, by clicking on the **Import** button, the **JVM (Micrometer)** dashboard
    will be imported and rendered.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过点击**导入**按钮，**JVM (Micrometer)**仪表板将被导入并渲染。
- en: 'Inspect the **JVM (Micrometer)** dashboard by following these steps:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤检查**JVM (Micrometer)**仪表板：
- en: To get a good view of the metrics, use the time picker (in the top-right corner)
    to select **Last 5 minutes**, and select a refresh rate of **5s** in the dropdown
    to the right.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了获得良好的指标视图，使用时间选择器（位于右上角）选择**过去5分钟**，并在右侧下拉菜单中选择**5秒**的刷新率。
- en: In the **Application** drop-down menu, which can be found at the top-left of
    the page, select the **product-composite** microservice.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面左上角的**应用**下拉菜单中，选择**product-composite**微服务。
- en: 'Since we are running a load test using Siege in the background, we will see
    a lot of metrics. The following is a sample screenshot:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在后台使用Siege进行负载测试，我们将看到很多指标。以下是一个示例屏幕截图：
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_07.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由中等置信度自动生成](img/B19825_20_07.png)'
- en: 'Figure 20.7: Grafana showing Java VM metrics'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.7：显示Java VM指标的Grafana
- en: In this dashboard, we can find all types of Java VM relevant metrics for, among
    other things, CPU, memory, heap, and I/O usage, as well as HTTP-related metrics
    such as requests/second, average duration, and error rates. Feel free to explore
    these metrics on your own!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个仪表板中，我们可以找到所有类型的Java VM相关指标，包括CPU、内存、堆和I/O使用情况，以及与HTTP相关的指标，如每秒请求数、平均持续时间以及错误率。请随意探索这些指标！
- en: Being able to import existing dashboards is of great value when we want to get
    started quickly. However, what’s even more important is to know how to create
    our own dashboard. We will learn about this in the next section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要快速开始时，能够导入现有的仪表板非常有价值。然而，更重要的是要知道如何创建我们自己的仪表板。我们将在下一节中学习这一点。
- en: Developing your own Grafana dashboards
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发自己的Grafana仪表板
- en: Getting started with developing Grafana dashboards is straightforward. The important
    thing for us to understand is what metrics Prometheus makes available for us.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 开始开发Grafana仪表板的过程非常简单。我们需要理解的重要一点是Prometheus为我们提供了哪些指标。
- en: In this section, we will learn how to examine the available metrics. Based on
    these, we will create a dashboard that can be used to monitor some of the more
    interesting metrics.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何检查可用的指标。基于这些指标，我们将创建一个仪表板，用于监控一些更有趣的指标。
- en: Examining Prometheus metrics
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查Prometheus指标
- en: 'Earlier, in the *Changes in source code to collect application metrics* section,
    we configured Prometheus to collect metrics from our microservices. We can make
    a call to the same endpoint and see what metrics Prometheus collects. Run the
    following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的*修改源代码以收集应用指标*部分，我们配置了Prometheus从我们的微服务中收集指标。我们可以调用相同的端点并查看Prometheus收集了哪些指标。运行以下命令：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Expect a lot of output from the command, as in the following example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将产生大量输出，如下例所示：
- en: '![A screen shot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_08.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由中等置信度自动生成](img/B19825_20_08.png)'
- en: 'Figure 20.8: Prometheus metrics'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.8：Prometheus指标
- en: 'Among all of the metrics that are reported, there are two very interesting
    ones:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有报告的指标中，有两个非常有趣的指标：
- en: '`resilience4j_retry_calls`: Resilience4j reports on how the retry mechanism
    operates. It reports four different values for successful and failed requests,
    combined with and without retries.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resilience4j_retry_calls`：Resilience4j报告了重试机制的工作方式。它报告了成功和失败请求的四个不同值，包括和不含重试的情况。'
- en: '`resilience4j_circuitbreaker_state`: Resilience4j reports on the state of the
    circuit breaker.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resilience4j_circuitbreaker_state`：Resilience4j报告了断路器的状态。'
- en: Note that the metrics have a label named `application`, which contains the name
    of the microservice. This field comes from the configuration of the `management.metrics.tags.application`
    property, which we did in the *Changes in source code to collect application metrics*
    section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到这些指标有一个名为`application`的标签，其中包含微服务的名称。这个字段来自我们在*修改源代码以收集应用指标*部分中配置的`management.metrics.tags.application`属性。
- en: These metrics are interesting to monitor. None of the dashboards we have used
    so far use metrics from Resilience4j. In the next section, we will create a dashboard
    for these metrics.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指标值得监控。我们之前使用的所有仪表板都没有使用Resilience4j的指标。在下一节中，我们将为这些指标创建一个仪表板。
- en: Creating the dashboard
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建仪表板
- en: In this section, we will learn how to create a dashboard that visualizes the
    Resilience4j metrics we described in the previous section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建一个仪表板，用于可视化我们在上一节中描述的Resilience4j指标。
- en: 'We will set up the dashboard in the following stages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分以下阶段设置仪表板：
- en: Creating an empty dashboard
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个空白的仪表板
- en: Creating a new panel for the circuit breaker metric
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为断路器指标创建一个新的面板
- en: Creating a new panel for the retry metric
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为重试指标创建一个新的面板
- en: Arranging the panels
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安排面板
- en: Creating an empty dashboard
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个空白的仪表板
- en: 'Perform the following steps to create an empty dashboard:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建一个空白的仪表板：
- en: 'On the Grafana web page, hover the mouse over the **Dashboard** icon (four
    squares) in the menu to the left. Select **+ New Dashboard** from the menu that
    pops up. A web page named **New dashboard** will be displayed:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Grafana网页上，将鼠标悬停在左侧菜单中的**仪表板**图标（四个方块）上。从弹出的菜单中选择**+ 新仪表板**。将显示一个名为**新仪表板**的网页：
- en: '![A screenshot of a phone  Description automatically generated with low confidence](img/B19825_20_09.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![手机截图  描述自动生成，置信度低](img/B19825_20_09.png)'
- en: 'Figure 20.9: Creating a new dashboard in Grafana'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.9：在Grafana中创建新的仪表板
- en: 'Click on the Dashboard settings button (it has a gear as its icon), in the
    menu shown in the preceding screenshot. Then, follow these steps:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击仪表板设置按钮（其图标为齿轮），在前面截图显示的菜单中。然后，按照以下步骤操作：
- en: Specify the name of the dashboard in the **Name** field and set the value to
    `Hands-on Dashboard`.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中指定仪表板的名称，并将其值设置为`Hands-on Dashboard`。
- en: Click on the top-left back button on the web page (not to be mixed up with the
    web browser’s back button).
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击网页左上角的返回按钮（不要与网页浏览器的返回按钮混淆）。
- en: Click on the time picker and select **Last 5 minutes** as the range.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击时间选择器并选择**最后5分钟**作为范围。
- en: Click on the refresh rate icon to the right and specify **5s** as the refresh
    rate.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧的刷新率图标并指定**5s**作为刷新率。
- en: Creating a new panel for the circuit breaker metric
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为断路器指标创建新的面板
- en: 'Perform the following steps to create a new panel for the circuit breaker metric:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建一个新的断路器指标面板：
- en: In the **Add panel** section, click on the **Add a new panel** button.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加面板**部分，点击**添加新面板**按钮。
- en: A page will be displayed where the new panel can be configured.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示一个页面，其中可以配置新的面板。
- en: In the tab to the right, set the **Panel title** to `Circuit Breaker`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧标签页中，将**面板标题**设置为`Circuit Breaker`。
- en: Also in the tab to the right, set the **Tooltip mode** to **All**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在右侧标签页中，将**工具提示模式**设置为**全部**。
- en: 'In the bottom-left **Query** panel, under the letter **A**, specify the query
    as the name of the circuit breaker metric for the **closed** state, as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左下角的**查询**面板中，在字母**A**下，指定查询为**关闭**状态的断路器指标名称，如下所示：
- en: Set **Metric** to `resilience4j_circuitbreaker_state`.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**指标**设置为`resilience4j_circuitbreaker_state`。
- en: Set **Label** to **state** and specify that it shall be equal to **closed**.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**标签**设置为**state**并指定它应等于**closed**。
- en: Verify that the **Raw query** is set to `resilience4j_circuitbreaker_state{state="closed"}`.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**原始查询**设置为`resilience4j_circuitbreaker_state{state="closed"}`。
- en: Expand the **Options** tab, and in the **Legend** drop-down box, select **Custom**.
    In the **Legend** field, specify the value `{{state}}`. This will create a legend
    in the panel where the names of the different states are displayed.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开选项卡，并在**图例**下拉框中选择**自定义**。在**图例**字段中指定值`{{state}}`。这将在面板中创建一个图例，显示不同状态的名字。
- en: 'The filled-in values should look as follows:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 填充的值应如下所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_10.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  描述自动生成，置信度中等](img/B19825_20_10.png)'
- en: 'Figure 20.10: Specifying circuit breaker metrics in Grafana'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.10：在Grafana中指定断路器指标
- en: Click on the **+ Query** button at the bottom of the page to enter a new query
    under **B** for the **open** state. Repeat the steps for query **A**, but set
    the state’s value to **open**. Verify that the **Raw query** field is set to `resilience4j_circuitbreaker_state{state="open"}`
    and set the **Legend** field to `{{state}}`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的**+ 查询**按钮，在**B**下为**open**状态输入一个新的查询。重复查询**A**的步骤，但将状态值设置为**open**。确认**原始查询**字段设置为`resilience4j_circuitbreaker_state{state="open"}`，并将**图例**字段设置为`{{state}}`。
- en: Click on the **+ Query** button a final time to enter a new query under **C**
    for the **half_open** state. Set the state’s value to `half_open`, and verify
    that the **Raw query** field is set to `resilience4j_circuitbreaker_state{state="half_open"}`
    and set the **Legend** field to `{{state}}`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**+ 查询**按钮，在**C**下为**half_open**状态输入一个新的查询。将状态值设置为`half_open`，并确认**原始查询**字段设置为`resilience4j_circuitbreaker_state{state="half_open"}`，并将**图例**字段设置为`{{state}}`。
- en: Click on the back button at the top left of the page to get back to the dashboard.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面左上角的返回按钮以返回仪表板。
- en: Creating a new panel for the retry metric
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为重试指标创建新的面板
- en: 'Here, we will repeat the same procedure that we went through to add a panel
    for the preceding circuit breaker metric, but instead, we will specify the values
    for the retry metrics:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将重复之前为前一个断路器指标添加面板的相同步骤，但我们将指定重试指标的值：
- en: Create a new panel by clicking on the **Add panel** icon (a chart with a plus
    sign) in the top-level menu, and click on **Add a new panel** in the new panel.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击顶级菜单中的**添加面板**图标（一个带有加号的图表）创建一个新的面板，并在新面板中点击**添加新面板**。
- en: Specify `Retry` as the **Panel title**, and the **Tooltip mode** as **All**
    in the same way as for the previous panel.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**面板标题**指定为`Retry`，并且与上一个面板一样，将**工具提示模式**设置为**全部**。
- en: Set **Metric** to `resilience4j_retry_calls_total`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**度量**设置为`resilience4j_retry_calls_total`。
- en: 'Since the retry metric is a counter, its value will only go up. An ever-increasing
    metric is rather uninteresting to monitor. Therefore, a **rate** function is used
    to convert the retry metric into a rate-per-second metric. The time window specified,
    that is, `30s`, is used by the rate function to calculate the average values of
    the rate. To apply the rate function:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于重试指标是一个计数器，其值只会上升。一个不断上升的指标在监控上并不那么有趣。因此，使用**速率**函数将重试指标转换为每秒速率指标。指定的时窗，即`30s`，由速率函数用来计算速率的平均值。要应用速率函数：
- en: Click on the **+ Operations** button.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+ 操作**按钮。
- en: Click on **Range functions** and select the **Rate** function.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**范围函数**并选择**速率**函数。
- en: Set the **Range** to **30s**.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**范围**设置为**30s**。
- en: In the **Raw query** field, verify that it is set to `rate(resilience4j_retry_calls_total[30s])`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**原始查询**字段中，确认它设置为`rate(resilience4j_retry_calls_total[30s])`。
- en: Expand the **Options** tab, and in the **Legend** drop-down box, select **Custom**.
    In the **Legend** field, specify the value `{{kind}}`. This will create a legend
    in the panel where the names of the different kinds of retries are displayed.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开选项卡**选项**，然后在**图例**下拉框中选择**自定义**。在**图例**字段中，指定值`{{kind}}`。这将创建一个面板图例，其中显示不同类型重试的名称。
- en: Note that Grafana immediately starts to render a graph in the panel editor based
    on the specified values.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Grafana会立即根据指定的值在面板编辑器中开始渲染图表。
- en: Click on the back button to get back to the dashboard.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击后退按钮返回仪表板。
- en: Arranging the panels
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安排面板
- en: 'Perform the following steps to arrange the panels on the dashboard:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在仪表板上安排面板：
- en: You can resize a panel by dragging its lower right-hand corner to the preferred
    size.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过拖动其右下角到所需大小来调整面板的大小。
- en: You can also move a panel by dragging its header to the desired position.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以通过拖动其标题到所需位置来移动一个面板。
- en: 'The following is an example layout of the two panels:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是两个面板的示例布局：
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_11.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  自动生成描述](img/B19825_20_11.png)'
- en: 'Figure 20.11: Moving and resizing a panel in Grafana'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.11：在Grafana中移动和调整面板大小
- en: Since this screenshot was taken with Siege running in the background, the **Retry**
    panel reports `successful_without_retry` metrics, while the **Circuit Breaker**
    reports that **closed**equals**1** and **open** and **half_open**equal**0**, meaning
    that it is closed and operating normally (something that is about to change in
    the next section).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个屏幕截图是在Siege在后台运行时拍摄的，**重试**面板报告`successful_without_retry`指标，而**断路器**报告**关闭**等于**1**，**打开**和**半开**等于**0**，这意味着它是关闭的并且正常运行（这在下一节中将要改变）。
- en: Finally, click on the **Save** button at the top of the page. A **Save dashboard
    as...** dialog will show up; ensure that the name is **Hands-on Dashboard** and
    hit the **Save** button.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击页面顶部的**保存**按钮。将显示**保存仪表板为...**对话框；确保名称是**动手仪表板**，然后点击**保存**按钮。
- en: If you get stuck when configuring the dashboard, take a look at the end of the
    *Trying out the circuit breaker alarm* section. There is an easy solution described.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在配置仪表板时遇到困难，请查看*尝试使用断路器警报*部分的末尾。那里描述了一个简单的解决方案。
- en: With the dashboard created, we are ready to try it out. In the next section,
    we will try out both metrics.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仪表板后，我们就可以尝试使用了。在下一节中，我们将尝试这两个指标。
- en: Trying out the new dashboard
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试使用新的仪表板
- en: Before we start testing the new dashboard, we must stop the load test tool,
    Siege. To do this, go to the command window where Siege is running and press **Ctrl
    + C** to stop it.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始测试新的仪表板之前，我们必须停止负载测试工具Siege。为此，转到Siege运行的命令窗口，并按**Ctrl + C**停止它。
- en: Let’s start by testing how to monitor the circuit breaker. Afterward, we will
    try out the retry metrics.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先测试如何监控断路器。之后，我们将尝试重试指标。
- en: Testing the circuit breaker metrics
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试断路器指标
- en: If we force the circuit breaker to open up, its state will change from **closed**
    to **open**, and then eventually to the **half-open** state. This should be reported
    in the circuit breaker panel.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们强制断路器打开，其状态将从**关闭**变为**打开**，然后最终变为**半开**状态。这应该在断路器面板中报告。
- en: 'Open the circuit, just like we did in *Chapter 13*, *Improving Resilience Using
    Resilience4j*, in the *Trying out the circuit breaker and retry mechanism* section
    – that is, make some requests to the API in a row, all of which will fail. Run
    the following commands:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 打开断路器，就像我们在第13章“使用Resilience4j提高弹性”部分中的“尝试断路器和重试机制”中所做的那样——也就是说，连续向API发送一些请求，所有这些请求都将失败。运行以下命令：
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can expect three `500` responses and a final `200`, indicating three errors
    in a row, which is what it takes to open the circuit breaker. The last `200` indicates
    a **fail-fast** response from the `product-composite` microservice when it detects
    that the circuit is open.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以预期收到三个`500`响应和一个最终的`200`响应，表示连续三个错误，这是打开断路器所需的条件。最后的`200`表示当`product-composite`微服务检测到断路器开启时，它发出的**快速失败**响应。
- en: On some rare occasions, I have noticed that the circuit breaker metrics are
    not reported in Grafana directly after the dashboard is created. If they don’t
    show up after a minute, simply rerun the preceding command to reopen the circuit
    breaker again.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些罕见的情况下，我注意到在创建仪表板后，断路器指标并没有直接在Grafana中报告。如果一分钟内没有显示，只需重新运行前面的命令再次打开断路器。
- en: Expect the value for the **closed** state to drop to **0** and the **open**
    state to take the value **1**, meaning that the circuit is now open. After 10s,
    the circuit will turn to the half-open state, indicated by the **half-open** metrics
    having the value **1** and **open** being set to **0**. This means that the circuit
    breaker is ready to test some requests to see if the problem that opened the circuit
    is gone.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 预期**关闭**状态值将降至**0**，而**开启**状态值将取值为**1**，这意味着断路器现在已开启。10秒后，断路器将转为半开启状态，由**半开启**指标值为**1**和**开启**设置为**0**表示。这意味着断路器已准备好测试一些请求，以查看导致断路器开启的问题是否已消失。
- en: 'Close the circuit breaker again by issuing three successful requests to the
    API with the following command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 再次关闭断路器，通过以下命令向API发出三个成功的请求：
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will get only `200` responses. Note that the circuit breaker metric goes
    back to normal again, meaning that the **closed** metric goes back to **1**.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只收到`200`响应。请注意，断路器指标又恢复正常，这意味着**关闭**指标值恢复到**1**。
- en: 'After this test, the Grafana dashboard should look as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在此测试之后，Grafana仪表板应如下所示：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B19825_20_12.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由低置信度自动生成](img/B19825_20_12.png)'
- en: 'Figure 20.12: Retries and Circuit Breaker in action as viewed in Grafana'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.12：在Grafana中查看的重试和断路器操作
- en: From the preceding screenshot, we can see that the retry mechanism also reports
    metrics that succeeded and failed. When the circuit was opened, all requests failed
    without retries. When the circuit was closed, all requests were successful without
    any retries. This is as expected.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图可以看出，重试机制也报告了成功和失败的指标。当断路器开启时，所有请求都未进行重试而失败。当断路器关闭时，所有请求都未进行重试而成功。这是预期的结果。
- en: Now that we have seen the circuit breaker metrics in action, let’s see the retry
    metrics in action!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了断路器指标在操作中的表现，让我们看看重试指标在操作中的表现！
- en: 'If you want to check the state of the circuit breaker, you can do it with the
    following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检查断路器的状态，可以使用以下命令：
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It should report `CLOSED`, `OPEN`, or `HALF_OPEN`, depending on its state.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 它应报告其状态为`CLOSED`、`OPEN`或`HALF_OPEN`，具体取决于其状态。
- en: Testing the retry metrics
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试重试指标
- en: 'To trigger the retry mechanism, we will use the `faultPercentage` parameter
    we used in previous chapters. To avoid triggering the circuit breaker, we need
    to use relatively low values for the parameter. Run the following command:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发重试机制，我们将使用我们在前几章中使用的`faultPercentage`参数。为了避免触发断路器，我们需要为该参数使用相对较低的值。运行以下命令：
- en: '[PRE19]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command will call the API once every third second. It specifies that 10%
    of the requests should fail so that the retry mechanism will kick in and retry
    the failed requests.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将每三秒调用API一次。它指定10%的请求应该失败，以便重试机制能够启动并重试失败的请求。
- en: 'After a few minutes, the dashboard should report metrics such as the following:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，仪表板应报告以下指标：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_13.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由中等置信度自动生成](img/B19825_20_13.png)'
- en: 'Figure 20.13: Result of retry tests viewed in Grafana'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.13：在Grafana中查看的重试测试结果
- en: In the preceding screenshot, we can see that most of the requests have been
    executed successfully, without any retries. Approximately 10% of the requests
    have been retried by the retry mechanism and successfully executed after the retry.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到大多数请求已成功执行，没有重试。大约10%的请求通过重试机制重试，并在重试后成功执行。
- en: Before we leave the section on creating dashboards, we will learn how we can
    export and import dashboards.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们离开创建仪表板的章节之前，我们将学习如何导出和导入仪表板。
- en: Exporting and importing Grafana dashboards
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出和导入Grafana仪表板
- en: 'Once a dashboard has been created, we typically want to take two actions:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了一个仪表板，我们通常想要执行以下两个操作：
- en: Save the definition of the dashboard as source code in a Git repo
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将仪表板的定义作为源代码保存在Git仓库中
- en: Move the dashboard to other Grafana instances, for example, those used in QA
    and production environments
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将仪表板移动到其他Grafana实例，例如，用于QA和生产环境的那些实例
- en: 'To perform these actions, we can use Grafana’s API for exporting and importing
    dashboards. Since we only have one Grafana instance, we will perform the following
    steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这些操作，我们可以使用Grafana的导出和导入仪表板的API。由于我们只有一个Grafana实例，我们将执行以下步骤：
- en: Export the dashboard to a JSON file.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仪表板导出为JSON文件。
- en: Delete the dashboard.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除仪表板。
- en: Import the dashboard from the JSON file.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从JSON文件导入仪表板。
- en: 'Before we perform these steps, we need to understand the two different types
    of IDs that a dashboard has:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行这些步骤之前，我们需要了解仪表板具有两种不同类型的ID：
- en: '`id`, an auto-incremented identifier that is unique only within a Grafana instance.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`，一个在Grafana实例内唯一的自增标识符。'
- en: '`uid`, a unique identifier that can be used in multiple Grafana instances.
    It is part of the URL when accessing dashboards, meaning that links to a dashboard
    will stay the same as long as the `uid` of a dashboard remains the same. When
    a dashboard is created, a random `uid` is created by Grafana.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uid`，一个可以在多个Grafana实例中使用的唯一标识符。它是访问仪表板时URL的一部分，这意味着只要仪表板的`uid`保持不变，仪表板的链接就会保持相同。当创建仪表板时，Grafana会创建一个随机的`uid`。'
- en: When we import a dashboard, Grafana will try to update it if the `id` field
    is set. To be able to test importing a dashboard in a Grafana instance that doesn’t
    have the dashboard already installed, we need to set the `id` field to `null`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导入仪表板时，如果设置了`id`字段，Grafana将尝试更新它。为了能够在没有安装仪表板的Grafana实例中测试导入仪表板，我们需要将`id`字段设置为`null`。
- en: 'Perform the following actions to export and then import your dashboard:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作以导出并导入您的仪表板：
- en: Identify the `uid` of your dashboard.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别您的仪表板的`uid`。
- en: 'The `uid` value can be found in the URL in the web browser where the dashboard
    is shown. It will look like this:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`uid`值可以在显示仪表板的网页浏览器中的URL中找到。它看起来像这样：'
- en: '[PRE20]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `uid` in the URL above is `YMcDoBg7k`. In a terminal window, create a variable
    with its value. In my case, it will be:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上面的URL中的`uid`是`YMcDoBg7k`。在终端窗口中，创建一个包含其值的变量。在我的情况下，它将是：
- en: '[PRE21]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Export the dashboard to a JSON file with the following command:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将仪表板导出为JSON文件：
- en: '[PRE22]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `curl` command exports the dashboard to the JSON format. The `jq` statement
    sets the `id` field to `null`, and the output from the `jq` command is written
    to a file named `Hands-on-Dashboard.json`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`命令将仪表板导出为JSON格式。`jq`语句将`id`字段设置为`null`，`jq`命令的输出被写入名为`Hands-on-Dashboard.json`的文件。'
- en: Delete the dashboard.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除仪表板。
- en: In the web browser, select **Dashboards** and **Browse** in the menu to the
    left. Identify the **Hands-on Dashboard** in the list of dashboards and select
    it by clicking on the checkbox in front of it. A red **Delete** button will be
    shown; click on it, and then click on the new **Delete** button that is shown
    in the confirm dialog box that pops up.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页浏览器中，选择左侧菜单中的**仪表板**和**浏览**。在仪表板列表中识别**Hands-on Dashboard**，通过点击其前面的复选框来选择它。将显示一个红色的**删除**按钮；点击它，然后点击弹出的确认对话框中显示的新**删除**按钮。
- en: 'Recreate the dashboard by importing it from the JSON file with the following
    command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过导入JSON文件重新创建仪表板：
- en: '[PRE23]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that the URL used to access the dashboard is still valid, in my case, [https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard](https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，用于访问仪表板的URL仍然有效，在我的情况下，是[https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard](https://grafana.minikube.me/d/YMcDoBg7k/hands-on-dashboard)。
- en: Verify that the imported dashboard reports metrics in the same way as before
    it was deleted and re-imported. Since the request loop started in the *Testing
    the retry metrics* section is still running, the same metrics from that section
    should be reported.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认导入的仪表板报告的指标与删除和重新导入之前的方式相同。由于在*测试重试指标*部分启动的请求循环仍在运行，因此应该报告该部分的相同指标。
- en: For more information regarding Grafana’s APIs, see [https://grafana.com/docs/grafana/v9.0/developers/http_api/dashboard/#get-dashboard-by-uid](https://grafana.com/docs/grafana/v9.0/developers/http_api/dashboard/#get-dashboard-by-uid).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Grafana API的更多信息，请参阅[https://grafana.com/docs/grafana/v9.0/developers/http_api/dashboard/#get-dashboard-by-uid](https://grafana.com/docs/grafana/v9.0/developers/http_api/dashboard/#get-dashboard-by-uid)。
- en: Before proceeding to the next section, remember to stop the request loop that
    we started for the retry test by pressing *Ctrl* + *C* in the terminal window
    where the request loop executes!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，请记住通过在执行请求循环的终端窗口中按*Ctrl* + *C*来停止我们为重试测试开始的请求循环！
- en: In the next section, we will learn how to set up alarms in Grafana, based on
    these metrics.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何根据这些指标在Grafana中设置警报。
- en: Setting up alarms in Grafana
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Grafana中设置警报
- en: Being able to monitor the circuit breaker and retry metrics is of great value,
    but even more important is the capability to define automated alarms on these
    metrics. Automated alarms relieve us from monitoring the metrics manually.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 能够监控断路器和重试指标非常有价值，但更重要的是能够在这些指标上定义自动警报。自动警报可以让我们免于手动监控指标。
- en: Grafana comes with built-in support to define alarms and send notifications
    to a number of channels. In this section, we will define alerts on the circuit
    breaker and configure Grafana to send emails to the test mail server when alerts
    are raised. The local test mail server was installed earlier in the *Installing
    a local mail server for tests* section.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana自带内置支持，可以定义警报并将通知发送到多个渠道。在本节中，我们将定义断路器的警报，并配置Grafana在警报触发时向测试邮件服务器发送电子邮件。本地测试邮件服务器是在*为测试安装本地邮件服务器*部分中安装的。
- en: For other types of channels supported by the version of Grafana used in this
    chapter, see [https://grafana.com/docs/grafana/v7.2/alerting/notifications/#list-of-supported-notifiers](https://grafana.com/docs/grafana/v7.2/alerting/notifications/#list-of-supported-notifiers).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章节中使用的Grafana版本支持的其它类型渠道，请参阅[https://grafana.com/docs/grafana/v7.2/alerting/notifications/#list-of-supported-notifiers](https://grafana.com/docs/grafana/v7.2/alerting/notifications/#list-of-supported-notifiers)。
- en: In the next section, we will define a mail-based notification channel that will
    be used by the alert in the section after this.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将定义一个基于邮件的通知渠道，该渠道将在本节之后的警报中使用。
- en: Setting up a mail-based notification channel
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置基于邮件的通知渠道
- en: 'To configure a mail-based notification channel in Grafana, perform the following
    steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Grafana中配置基于邮件的通知渠道，请执行以下步骤：
- en: On the Grafana web page, on the menu to the left, click on the Alertingmenu
    choice (with an alarm bell as its icon) and select **Notification channels**.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Grafana网页上，点击左侧菜单中的警报菜单选项（图标为警钟）并选择**通知渠道**。
- en: Click on the **Add channel** button.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加渠道**按钮。
- en: Set the name to `mail`.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称设置为`mail`。
- en: Select the type as **Email**.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择类型为**电子邮件**。
- en: Enter an email address of your choice. Emails will only be sent to the local
    test mail server, independent of the email address that’s specified.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您选择的电子邮件地址。电子邮件将仅发送到本地测试邮件服务器，与指定的电子邮件地址无关。
- en: Expand **Notification settings** and select **Default (Use this notification
    for all alerts)**.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开通知设置并选择**默认（为所有警报使用此通知）**。
- en: 'The configuration of the notification channel should look as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 通知渠道的配置应如下所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_14.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述由中等置信度自动生成](img/B19825_20_14.png)'
- en: 'Figure 20.14: Setting up an email-based notification channel'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.14：设置基于电子邮件的通知渠道
- en: Click on the **Test** button to send a test mail.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**测试**按钮发送测试邮件。
- en: Click on the **Save** button.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。
- en: Click on the **Dashboard** button in the left-hand side menu and then on the
    **Browse** menu entry.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的**仪表板**按钮，然后点击**浏览**菜单项。
- en: Select **Hands-on Dashboard** from the list to get back to the dashboard.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择**动手仪表板**以返回仪表板。
- en: 'Check the test mail server’s web page to ensure that we have received a test
    email. You should receive the following:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查测试邮件服务器的网页，以确保我们已收到测试邮件。你应该会收到以下内容：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_15.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述自动生成，置信度中等](img/B19825_20_15.png)'
- en: 'Figure 20.15: Verifying the test mail on the mail server’s web page'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.15：在邮件服务器的网页上验证测试邮件
- en: With a notification channel in place, we are ready to define an alert on the
    circuit breaker.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在已设置通知通道的情况下，我们准备好在断路器上定义警报。
- en: Setting up an alarm on the circuit breaker
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置断路器警报
- en: To create an alarm on the circuit breaker, we need to create the alert and then
    add an alert list to the dashboard, where we can see what alert events have occurred
    over time.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要在断路器上创建警报，我们需要创建警报，然后将警报列表添加到仪表板中，我们可以看到随着时间的推移发生了哪些警报事件。
- en: 'Perform the following steps to create an alert for the circuit breaker:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建断路器警报：
- en: In the **Hands-on Dashboard**, click on the header of the **Circuit Breaker**
    panel. A drop-down menu will appear.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Hands-on Dashboard**中，点击**Circuit Breaker**面板的标题。将出现一个下拉菜单。
- en: Select the **Edit** menu option.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Edit**菜单选项。
- en: Select the **Alert** tab in the tab list (shown as an alarm bell icon).
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签列表中选择**Alert**标签（显示为警钟图标）。
- en: Click on the **Create Alert** button.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Create Alert**按钮。
- en: In the **Evaluate every** field, set the value to `10s`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Evaluate every**字段中，将值设置为`10s`。
- en: In the **For** field, set the value to `0m`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**For**字段中，将值设置为`0m`。
- en: 'In the **Conditions** section, specify the following values:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Conditions**部分，指定以下值：
- en: For the **WHEN** field, select `max()`
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**WHEN**字段，选择`max()`。
- en: Set the **OF** field to `query(A, 10s, now)`
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**OF**字段设置为`query(A, 10s, now)`。
- en: Change **IS ABOVE** to **IS BELOW**, and set its value to `0.5`
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**IS ABOVE**更改为**IS BELOW**，并将其值设置为`0.5`。
- en: These settings will result in an alert being raised if the **closed** state
    (related to the `A` variable) goes below 0.5 during the last 10 seconds. When
    the circuit breaker is closed, this variable has the value 1, and 0 otherwise.
    So, this means that an alert is raised when the circuit breaker is no longer closed.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置会导致如果**closed**状态（与`A`变量相关）在最后10秒内低于0.5时触发警报。当断路器关闭时，此变量的值为1，否则为0。因此，这意味着当断路器不再关闭时，会触发警报。
- en: 'Scroll down to the **Notifications** section to confirm that the notification
    will be sent to the default notification channel, that is, the mail channel we
    defined previously. The alarm definition should look as follows:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**Notifications**部分以确认通知将发送到默认的通知通道，即我们之前定义的邮件通道。警报定义应如下所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_16.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述自动生成，置信度中等](img/B19825_20_16.png)'
- en: 'Figure 20.16: Setting up an alarm in Grafana, part 1'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.16：在Grafana中设置警报，第1部分
- en: Click on the **Save** button (top-right), enter a note like `Added an alarm`,
    and then click on the **Save** button.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角点击**Save**按钮，输入类似`Added an alarm`的备注，然后点击**Save**按钮。
- en: Click on the back button (left arrow) to get back to the dashboard.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击返回按钮（左箭头）返回到仪表板。
- en: 'Then, we need to perform the following steps to create an alarm list:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要执行以下步骤来创建警报列表：
- en: Click on the **Add panel** button in the top-level menu.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶级菜单中点击**Add panel**按钮。
- en: Click on the **Add new panel** button in the new panel.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新面板中点击**Add new panel**按钮。
- en: In the top-right corner, click on the **Time series** drop-down button and select
    the **Alert list** option.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，点击**Time series**下拉按钮，并选择**Alert list**选项。
- en: 'In the tab to the right, do the following:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧的标签页中，执行以下操作：
- en: Enter `Circuit Breaker Alerts` as the **Panel title**.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Panel title**输入为`Circuit Breaker Alerts`。
- en: In the **Option** section, set the **Show** field to the value **Recent state
    changes**.
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Option**部分，将**Show**字段设置为值**Recent state changes**。
- en: Finally, enable the toggle switch named **Alerts from this dashboard**.
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，启用名为**Alerts from this dashboard**的切换开关。
- en: Expand the **Visualization** row below the **Settings** row and select **Alert
    list**.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Settings**行下方展开**Visualization**行，并选择**Alert list**。
- en: In the **Panel** **options** row below, set the **Show** field to **Recent state
    changes**, set **Max items** to `10`, and enable the option **Alerts from this
    dashboard**.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Panel** **options**行下方，将**Show**字段设置为**Recent state changes**，将**Max items**设置为`10`，并启用**Alerts
    from this dashboard**选项。
- en: 'The settings should look as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 设置应如下所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_17.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成，置信度中等](img/B19825_20_17.png)'
- en: 'Figure 20.17: Setting up an alarm in Grafana, part 2'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.17：在Grafana中设置警报，第2部分
- en: Click on the back button to get back to the dashboard.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击后退按钮返回仪表盘。
- en: Rearrange the panel to suit your needs.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整面板以满足你的需求。
- en: Save the changes to the dashboard with a note like `Added an alert list`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似`添加了警报列表`这样的备注保存仪表盘的更改。
- en: 'Here is a sample layout with the alarm list added:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个添加了警报列表的示例布局：
- en: '![A screenshot of a device  Description automatically generated with medium
    confidence](img/B19825_20_18.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![设备截图，描述自动生成，置信度中等](img/B19825_20_18.png)'
- en: 'Figure 20.18: Setting up a layout in Grafana with Retry, Circuit Breaker, and
    alert panels'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.18：在Grafana中设置带有重试、电路断路器和警报面板的布局
- en: We can see that the circuit breaker reports the metrics as healthy (with a green
    heart icon) and that the alert list is currently empty.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到电路断路器报告的指标为健康状态（带有绿色心形图标），并且警报列表目前为空。
- en: Now, it’s time to try out the alarm!
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候尝试警报了！
- en: Trying out the circuit breaker alarm
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试电路断路器警报
- en: 'Here, we will repeat the tests from the *Testing the circuit breaker metrics*
    section, but this time, we expect alarms to be raised and emails to be sent as
    well! Let’s get started:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将重复*测试电路断路器指标*部分中的测试，但这次，我们预期会发出警报，并发送电子邮件！让我们开始吧：
- en: 'Acquire a new access token, if required (valid for 1 hour):'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，获取新的访问令牌（有效期为1小时）：
- en: '[PRE24]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the circuit breaker as we did before:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们之前所做的那样打开电路断路器：
- en: '[PRE25]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The dashboard should report the circuit as open as it did previously. After
    a few seconds, an alarm should be raised, and an email is also sent. Expect the
    dashboard to look like the following screenshot (you might need to refresh the
    web page to make the alert show up):'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘应报告电路状态为之前的状态。几秒钟后，应发出警报，并发送电子邮件。预期仪表盘看起来如下截图所示（你可能需要刷新网页以使警报显示出来）：
- en: '![A screenshot of a device  Description automatically generated with low confidence](img/B19825_20_19.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![设备截图，描述自动生成，置信度低](img/B19825_20_19.png)'
- en: 'Figure 20.19: Alarm raised in Grafana'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.19：Grafana中发出的警报
- en: Take note of the alarm icon in the header of the circuit breaker panel (a red
    broken heart). The red line marks the time of the alert event and that an alert
    has been added to the alert list.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到电路断路器面板标题中的警报图标（一个红色的破碎心形）。红色线条标记了警报事件的时间，并且已将警报添加到警报列表中。
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试邮件服务器中，你应该会看到如下所示的电子邮件截图：
- en: '![A screenshot of a computer  Description automatically generated](img/B19825_20_20.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成](img/B19825_20_20.png)'
- en: 'Figure 20.20: Alarm email'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.20：警报电子邮件
- en: 'Great! We got alarms, just like we expected! Now, close the circuit with the
    following command, simulating that the problem is gone:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！我们得到了警报，正如我们预期的那样！现在，使用以下命令关闭电路，模拟问题已解决：
- en: '[PRE26]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The **closed** metric should go back to normal, that is, **1**, and the alert
    should turn green again.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**关闭**指标应恢复正常，即**1**，警报应再次变为绿色。'
- en: 'Expect the dashboard to look like the following screenshot:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 预期仪表盘看起来如下截图所示：
- en: '![A screenshot of a device  Description automatically generated with low confidence](img/B19825_20_21.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![设备截图，描述自动生成，置信度低](img/B19825_20_21.png)'
- en: 'Figure 20.21: Error resolved as reported in Grafana'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.21：如Grafana中报告的错误已解决
- en: Note that the alarm icon in the header of the circuit breaker panel is green
    again; the green line marks the time of the **OK** event and that it has been
    added to the alert list.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到电路断路器面板标题中的警报图标再次变为绿色；绿色线条标记了**OK**事件的时间，并且它已被添加到警报列表中。
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试邮件服务器中，你应该会看到如下所示的电子邮件截图：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B19825_20_22.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成，置信度中等](img/B19825_20_22.png)'
- en: 'Figure 20.22: Error resolved as reported in an email'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.22：如电子邮件中报告的错误已解决
- en: That completes how to monitor microservices using Prometheus and Grafana.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了如何使用Prometheus和Grafana监控微服务的步骤。
- en: 'If you want to export the configuration of the mail notification, you can do
    that with the following command:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要导出邮件通知的配置，可以使用以下命令：
- en: '[PRE27]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To import it, the following command can be used:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入它，可以使用以下命令：
- en: '[PRE28]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For your convenience, the folder `$BOOK_HOME/Chapter20/kubernetes/grafana/api-export-import`
    contains export files for both the mail notifier and the dashboard that we learned
    how to export and import in the *Exporting and importing Grafana dashboards* section.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 为了您的方便，文件夹 `$BOOK_HOME/Chapter20/kubernetes/grafana/api-export-import` 包含了邮件通知器和仪表板的导出文件，我们在
    *导出和导入 Grafana 仪表板* 部分学习了如何导出和导入。
- en: Summary
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use Prometheus and Grafana to collect and
    monitor alerts on performance metrics.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Prometheus 和 Grafana 收集和监控性能指标的警报。
- en: We saw that, to collect performance metrics, we can use Prometheus in a Kubernetes
    environment. We then learned how Prometheus can automatically collect metrics
    from a Pod when a few Prometheus annotations are added to the Pod’s definition.
    To produce metrics in our microservices, we used Micrometer.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，为了收集性能指标，我们可以在 Kubernetes 环境中使用 Prometheus。然后我们学习了当在 Pod 的定义中添加一些 Prometheus
    注释时，Prometheus 如何自动从 Pod 收集指标。为了在我们的微服务中产生指标，我们使用了 Micrometer。
- en: Then, we saw how we can monitor the collected metrics using dashboards in both
    Kiali and Grafana, which comes with the installation of Istio. We also experienced
    how to consume dashboards shared by the Grafana community, and learned how to
    develop our own dashboards, where we used metrics from Resilience4j to monitor
    the usage of its circuit breaker and retry mechanisms. Using the Grafana API,
    we can export created dashboards and import them into other Grafana instances.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看到了如何使用 Kiali 和 Grafana 中的仪表板来监控收集的指标，这些仪表板是 Istio 安装的一部分。我们还体验了如何消费 Grafana
    社区共享的仪表板，并学习了如何开发我们自己的仪表板，其中我们使用了 Resilience4j 的指标来监控其断路器和重试机制的使用。使用 Grafana API，我们可以导出创建的仪表板并将它们导入到其他
    Grafana 实例。
- en: Finally, we learned how to define alerts on metrics in Grafana and how to use
    Grafana to send out alert notifications. We used a local test mail server to receive
    alert notifications from Grafana as emails.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何在 Grafana 中定义指标警报以及如何使用 Grafana 发送警报通知。我们使用本地测试邮件服务器接收来自 Grafana 的电子邮件警报通知。
- en: The next two chapters should already be familiar to you, covering the installation
    of tools on a Mac or Windows PC. Instead, head over to the last chapter in this
    book, which will introduce how we can compile our Java-based microservices into
    binary executable files using the brand-new **Spring Native** project, still in
    beta at the time of writing. This will enable the microservices to start up in
    a fraction of a second, but increased complexity and time are involved when it
    comes to building them.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个章节应该已经熟悉了，涵盖了在 Mac 或 Windows PC 上安装工具。相反，你可以翻到这本书的最后一章，它将介绍如何使用全新的 **Spring
    Native** 项目（当时仍处于测试阶段）将基于 Java 的微服务编译成二进制可执行文件。这将使微服务能够在几秒钟内启动，但在构建它们时涉及了增加的复杂性和时间。
- en: Questions
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What changes did we need to make to the source code in the microservices to
    make them produce metrics that are consumed by Prometheus?
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对微服务的源代码进行哪些更改，以便它们产生 Prometheus 可以消费的指标？
- en: What is the `management.metrics.tags.application` config parameter used for?
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`management.metrics.tags.application` 配置参数用于什么？'
- en: If you want to analyze a support case regarding high CPU consumption, which
    of the dashboards in this chapter would you start with?
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想分析一个关于高 CPU 消耗的支持案例，你将从这个章节的哪个仪表板开始？
- en: If you want to analyze a support case regarding slow API responses, which of
    the dashboards in this chapter would you start with?
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想分析一个关于慢速 API 响应的支持案例，你将从这个章节的哪个仪表板开始？
- en: What is the problem with counter-based metrics such as Resilience4j’s retry
    metrics, and what can be done so that we can monitor them in a useful way?
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于计数器的指标，如 Resilience4j 的重试指标，有什么问题，我们该如何以有用的方式进行监控？
- en: What is going on here?
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里发生了什么？
- en: '![](img/B19825_20_23.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19825_20_23.png)'
- en: 'Figure 20.23: What is going on here?'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.23：这里发生了什么？
- en: 'If you are reading this with screenshots rendered in grayscale, it might be
    hard to figure out what the metrics say. So, here’s some help:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读的是以灰度渲染的截图，可能很难弄清楚指标的含义。所以，这里有一些帮助：
- en: 'The state transitions reported by the circuit breaker are, in order:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断路器报告的状态转换按顺序是：
- en: '**half_open** → **open**'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**half_open** → **open**'
- en: '**open** → **half_open**'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**open** → **half_open**'
- en: '**half_open** → **closed**'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**half_open** → **closed**'
- en: 'The retry mechanism reports:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重试机制报告：
- en: An initial burst of requests, where most of them are reported as **failed_without_retry**
    and a few are reported as **successful_without_retry**.
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一波初始请求，其中大部分被报告为**failed_without_retry**，而少数被报告为**successful_without_retry**。
- en: A second burst of requests, all reported as **successful_without_retry**.
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二波请求，所有请求都被报告为**successful_without_retry**。
- en: Join our community on Discord
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussion with the author and other
    readers:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/SpringBoot3e](https://packt.link/SpringBoot3e)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SpringBoot3e](https://packt.link/SpringBoot3e)'
- en: '![](img/QR_Code1849216352344398875.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1849216352344398875.png)'
