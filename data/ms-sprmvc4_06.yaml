- en: Chapter 6. Securing Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。保护您的应用程序
- en: In this chapter, we'll learn how to secure our web application and also how
    to cope with the security challenges of modern, distributed web applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何保护我们的Web应用程序，以及如何应对现代、分布式Web应用程序的安全挑战。
- en: 'This chapter will be broken up into five parts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分为五个部分：
- en: First, we will set up basic HTTP authentication in a few minutes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将在几分钟内设置基本的HTTP认证
- en: Then, we will design a form-based authentication for the web pages, keeping
    the basic authentication for the RESTful API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将为网页设计基于表单的认证，同时保留RESTful API的基本认证
- en: We will allow the users to sign up via the Twitter OAuth API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将允许用户通过Twitter OAuth API进行注册
- en: Then, we will leverage Spring Session to make sure our application can scale
    using a distributed session mechanism
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将利用Spring Session确保我们的应用程序可以通过分布式会话机制进行扩展
- en: Finally, we will configure Tomcat to use a secured connection through SSL
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将配置Tomcat通过SSL使用安全连接
- en: Basic authentication
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本认证
- en: The simplest possible authentication mechanism is basic authentication ([http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)).
    In a nutshell, our pages will not be available without username and password.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的认证机制是基本认证([http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication))。简而言之，没有用户名和密码，我们的页面将不可用。
- en: Our server will indicate our resources are secured by sending the `401 Not Authorized`
    HTTP status code and generate a `WWW-Authenticate` header.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务器将通过发送`401未授权`HTTP状态码和生成`WWW-Authenticate`头来指示我们的资源受到保护。
- en: To successfully pass the security check, the client must send an `Authorization`
    header containing the `Basic` value followed by a base 64 encoding of the `user:password`
    string. A browser window will prompt the user for a username and a password, granting
    them access to the secured pages if authentication is successful.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功通过安全检查，客户端必须发送包含`Basic`值后跟`user:password`字符串的base 64编码的`Authorization`头。浏览器窗口将提示用户输入用户名和密码，如果认证成功，将授予他们访问受保护页面的权限。
- en: 'Let''s add Spring Security to our dependencies:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的依赖项中添加Spring Security：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Relaunch your application and navigate to any URL in your application. You
    will be prompted for a username and a password:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动您的应用程序并导航到应用程序中的任何URL。您将被提示输入用户名和密码：
- en: '![Basic authentication](img/2117_06_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![基本认证](img/2117_06_01.jpg)'
- en: 'If you fail to authenticate, you will see that a `401` error is thrown. The
    default username is `user`. The correct password for authentication will be randomly
    generated each time the application launches and will be displayed in the server
    log:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您未能通过认证，您将看到抛出一个`401`错误。默认用户名是`user`。每次应用程序启动时，正确的密码都会随机生成，并将在服务器日志中显示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, Spring Security secures every resource except a handful of classic
    routes such as `/css/`, `/js/`, `/images/`, and `**/favicon.ico`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Security保护了除了一些经典路由（如`/css/`、`/js/`、`/images/`和`**/favicon.ico`）之外的所有资源。
- en: 'If you wish to configure the default credentials, you can add the following
    properties to the `application.properties` file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想配置默认凭据，您可以将以下属性添加到`application.properties`文件中：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Authorized users
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权用户
- en: 'Having only one user in our application does not allow fine-grained security.
    If we wanted more control over the user credentials, we could add the following
    `SecurityConfiguration` class in the `config` package:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中只有一个用户不允许进行细粒度安全控制。如果我们想要对用户凭据有更多控制，我们可以在`config`包中添加以下`SecurityConfiguration`类：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This snippet will set up an in-memory system containing our application's users
    as well as their roles. It will override the security name and password previously
    defined in the application's properties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段将设置一个包含我们应用程序用户及其角色的内存系统。它将覆盖应用程序属性中先前定义的安全名称和密码。
- en: The `@EnableGlobalMethodSecurity` annotation will allow us to annotate our application's
    method and classes to define their security level.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableGlobalMethodSecurity`注解将允许我们注释应用程序的方法和类来定义它们的权限级别。'
- en: 'For example, let''s say that only the administrators of our application can
    access the user API. In this case, we just have to add the `@Secured` annotation
    to our resource to allow access only to ADMIN roles:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设只有我们应用程序的管理员可以访问用户API。在这种情况下，我们只需在我们的资源上添加`@Secured`注解，以允许只有ADMIN角色访问：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can easily test that with httpie by using the `-a` switch to use basic authentication
    and the `-p=h` switch, which will only display the response headers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用httpie轻松测试这一点，通过使用`-a`开关来使用基本认证，以及使用`-p=h`开关，这将只显示响应头。
- en: 'Let''s try this with a user without the admin profile:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用没有管理员配置文件的用户：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, with the administrator:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为管理员：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will also notice that Spring Security automatically added some common security
    headers:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到Spring Security自动添加了一些常见的安全头：
- en: '`Cache Control`: This prevents the user from caching secured resources'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cache Control`：这阻止用户缓存受保护资源'
- en: '`X-XSS-Protection`: This tells the browser to block what looks like CSS'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-XSS-Protection`：这告诉浏览器阻止看起来像CSS的内容'
- en: '`X-Frame-Options`: This disallows our site from being embedded in an IFrame'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Frame-Options`：这禁止我们的网站被嵌入在IFrame中'
- en: '`X-Content-Type-Options`: This prevents browsers from guessing the MIME types
    of malicious resources used to forge XSS attacks'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Content-Type-Options`：这阻止浏览器猜测用于伪造XSS攻击的恶意资源的MIME类型'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A comprehensive list of these headers is available at [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些头的完整列表可在[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers)找到。
- en: Authorized URLs
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权URL
- en: Annotating our controller is very easy but isn't always the most viable option.
    Sometimes, we just want total control over our authorization.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注解我们的控制器非常简单，但并不总是最可行的选项。有时，我们只想完全控制我们的授权。
- en: Remove the `@Secured` annotation; we will come up with something better.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 移除`@Secured`注解；我们将想出更好的方法。
- en: 'Let''s see what Spring Security will allow us to do by modifying the `SecurityConfiguration`
    class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看通过修改`SecurityConfiguration`类，Spring Security将允许我们做什么：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code sample, we configured our application's security policy
    by using Spring Security's fluent API.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用Spring Security的流畅API配置了应用程序的安全策略。
- en: This API allows us to configure Spring Security globally by invoking methods
    associated with different security concerns and chaining with the `and()` method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此API允许我们通过调用与不同安全相关的方法并使用`and()`方法进行链式调用，全局配置Spring Security。
- en: What we just defined is a basic authentication, without CSRF protection. Requests
    on `/login` and `/logout` will be allowed for all users. `GET` requests on the
    API will only be permitted for users with the `USER` role, whereas `POST`, `PUT`,
    and `DELETE` requests on the API will only be accessible to users with the ADMIN
    roles. Finally, every other request will require authentication with any role.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才定义的是基本认证，没有CSRF保护。对`/login`和`/logout`的请求将允许所有用户。API上的`GET`请求仅允许具有`USER`角色的用户，而`POST`、`PUT`和`DELETE`请求仅允许具有ADMIN角色的用户访问。最后，其他所有请求都需要任何角色的认证。
- en: CSRF stands for **Cross Site Request Forgery** and refers to an attack where
    a malicious website would display a form on its website and post the form data
    on yours. If the user of your site is not signed out, the `POST` request would
    retain the user cookies and would therefore be authorized.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF代表**跨站请求伪造**，指的是恶意网站在其网站上显示表单并在你的网站上提交表单数据的一种攻击。如果你的网站用户未注销，`POST`请求将保留用户cookies，因此会被授权。
- en: CSRF protection will generate short-lived tokens that will be posted along with
    the form data. We will see how to properly enable it in the next section; for
    now, let's just disable it. See [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf)
    for more details.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF保护将生成短生命周期的令牌，这些令牌将随表单数据一起发布。我们将在下一节中看到如何正确启用它；现在，让我们先禁用它。有关更多详细信息，请参阅[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf)。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the authorize request API, have a look at [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于授权请求API的信息，请查看[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests)。
- en: Thymeleaf security tags
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Thymeleaf安全标签
- en: Sometimes, you will need to display data coming from the authentication layer,
    for example the user's name and roles, or hide and display part of a web page
    according to users' authorities. The `thymeleaf-extras-springsecurity` module
    will allow us to do so.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要显示来自认证层的数据，例如用户的名称和角色，或者根据用户的权限隐藏和显示网页的一部分。`thymeleaf-extras-springsecurity`模块将允许我们这样做。
- en: 'Add the following dependency to your `build.gradle` file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`build.gradle`文件中添加以下依赖项：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With this library, we can add a little block under our navigation bar in `layout/default.html`
    to display the logged-in user:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个库，我们可以在`layout/default.html`中的导航栏下方添加一个小块来显示登录用户：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note the new namespace in the HTML declaration and the `sec:authentication`
    attributes. It allows access to the properties of the `org.springframework.security.core.Authentication`
    object, which represents the user who is currently logged in, as shown in the
    following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意HTML声明中的新命名空间和`sec:authentication`属性。它允许访问代表当前登录用户的`org.springframework.security.core.Authentication`对象的属性，如下面的截图所示：
- en: '![Thymeleaf security tags](img/2117_06_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Thymeleaf安全标签](img/2117_06_02.jpg)'
- en: Don't click on the logout link just yet as it doesn't work with basic authentication.
    We will get it to work in the next part.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不要点击登出链接，因为它与基本身份验证不兼容。我们将在下一部分让它工作。
- en: 'The `lib` tag also has a handful of other tags, such as the one to check user
    authorizations:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`标签还有一些其他标签，例如用于检查用户授权的标签：'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to the documentation available at [https://github.com/thymeleaf/thymeleaf-extras-springsecurity](https://github.com/thymeleaf/thymeleaf-extras-springsecurity)
    to learn more about the library.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://github.com/thymeleaf/thymeleaf-extras-springsecurity](https://github.com/thymeleaf/thymeleaf-extras-springsecurity)上的文档，了解更多关于该库的信息。
- en: The login form
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录表单
- en: Basic authentication is good for our RESTful API, but we would rather have a
    login page carefully designed by our team to improve the web experience.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 基本身份验证对我们来说的RESTful API很好，但我们更希望我们的团队能够精心设计一个登录页面，以改善网络体验。
- en: 'Spring Security allows us to define as many `WebSecurityConfigurerAdapter`
    classes as we need. We will split our `SecurityConfiguration` class into two parts:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security允许我们定义我们需要的`WebSecurityConfigurerAdapter`类。我们将把`SecurityConfiguration`类分成两部分：
- en: '`ApiSecurityConfiguration`: This will be configured first. This will secure
    the RESTful endpoints with basic authentication.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApiSecurityConfiguration`：这将首先进行配置。这将使用基本身份验证来保护RESTful端点。'
- en: '`WebSecurityConfiguration`: This will then configure login form for the rest
    of our application.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebSecurityConfiguration`：这将配置我们应用程序其余部分的登录表单。'
- en: 'You can remove or rename `SecurityConfiguration` and create `ApiSecurityConfiguration`
    instead:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以删除或重命名`SecurityConfiguration`并创建`ApiSecurityConfiguration`：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note the `@Order(1)` annotation, which will ensure that this configuration
    is executed before the other one. Then, create a second configuration for the
    web, called `WebSecurityConfiguration`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`@Order(1)`注解，它将确保此配置在另一个配置之前执行。然后，创建一个名为`WebSecurityConfiguration`的第二个网络配置：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The result of this code is that anything matching `/api/**` will be secured
    with basic authentication, without CSRF protection. Then, the second configuration
    will be loaded. It will secure anything else. Everything in this part of the application
    requires the client to be authenticated, except requests on WebJars and on the
    login page (this will avoid the redirection loop).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的结果是，匹配`/api/**`的所有内容都将使用基本身份验证进行保护，没有CSRF保护。然后，将加载第二个配置。它将保护其他所有内容。应用程序的这一部分的所有内容都需要客户端进行认证，除了WebJars和登录页面的请求（这将避免重定向循环）。
- en: If an unauthenticated user tries to access a protected resource, they will automatically
    be redirected to the login page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未经认证的用户尝试访问受保护的资源，他们将被自动重定向到登录页面。
- en: 'By default, the login URL is `GET /login`. The default login will be posted
    via a `POST /login` request that will contain three values: a user name (`username`),
    a password (`password`) and a CSRF token (`_csrf`). If the login is unsuccessful,
    the user will be redirected to `/login?error`. The default logout page is a `POST
    /logout` request with a CSRF token.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，登录URL是`GET /login`。默认登录将通过一个包含三个值的`POST /login`请求进行提交：用户名（`username`）、密码（`password`）和CSRF令牌（`_csrf`）。如果登录失败，用户将被重定向到`/login?error`。默认登出页面是一个带有CSRF令牌的`POST
    /logout`请求。
- en: Now, if you try to navigate on your application, this form will be generated
    automatically!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试在应用程序中导航，此表单将自动生成！
- en: If you are already logged in from a previous attempt, close your browser; this
    will clear up the session.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前已经登录，请关闭浏览器；这将清除会话。
- en: '![The login form](img/2117_06_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![登录表单](img/2117_06_03.jpg)'
- en: We can now log in and out of our application!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以登录和注销我们的应用程序了！
- en: 'This is lovely but we can do a lot better with very little effort. First, we
    will define a login page on `/login` in the `WebSecurityConfiguration` class:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，但我们只需付出很少的努力就可以做得更好。首先，我们将在 `WebSecurityConfiguration` 类中定义 `/login` 的登录页面：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will let us create our own login page. To do that, we will need a very
    simple controller to handle the `GET login` request. You can create one in the
    `authentication` package:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们创建自己的登录页面。为此，我们需要一个非常简单的控制器来处理 `GET login` 请求。您可以在 `authentication` 包中创建一个：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will trigger the display of the `login.html` page located in the template
    directory. Let''s create it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发显示位于模板目录中的 `login.html` 页面。让我们创建它：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that we handle the error message and that we post a CSRF token. We also
    use the default username and password input names, but those are configurable
    if needed. The result looks much better already!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们处理了错误消息，并发布了 CSRF 令牌。我们还使用了默认的用户名和密码输入名称，但如果需要，这些是可配置的。结果已经看起来好多了！
- en: '![The login form](img/2117_06_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![登录表单](img/2117_06_04.jpg)'
- en: You can see right away that Spring Security assigns anonymous credentials to
    all non-authenticated users by default.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以立即看到，Spring Security 默认将匿名凭证分配给所有未认证用户。
- en: 'We shouldn''t show the sign-out button to an anonymous user so we can wrap
    the corresponding HTML part in `sec:authorize="isAuthenticated()"` to display
    it to authenticated users only, like so:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不应该向匿名用户显示注销按钮，因此我们可以将相应的 HTML 部分包裹在 `sec:authorize="isAuthenticated()"` 中，仅对认证用户显示，如下所示：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Twitter authentication
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter 认证
- en: Our application is strongly integrated with Twitter, so it seems logical that
    we would allow authentication through Twitter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序与 Twitter 强烈集成，因此允许通过 Twitter 进行认证似乎是合乎逻辑的。
- en: 'Before going further, make sure that you have enabled Twitter sign in on your
    app on Twitter ([https://apps.twitter.com](https://apps.twitter.com)):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您已在 Twitter 上启用了您的应用的 Twitter 登录（[https://apps.twitter.com](https://apps.twitter.com)）：
- en: '![Twitter authentication](img/2117_6_5.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Twitter 认证](img/2117_6_5.jpg)'
- en: Setting up social authentication
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置社交认证
- en: Spring social enables authentication through an OAuth provider such as Twitter
    through a signin/signup scenario. It will intercept a `POST` request on `/signin/twitter`.
    If the user is not known to the `UsersConnectionRepository` interface, the `signup`
    endpoint will be called. It will allow us to take the necessary measures to register
    the user on our system and maybe ask them for additional details.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Spring social 通过 OAuth 提供商（如 Twitter）通过登录/注册场景启用认证。它将拦截 `/signin/twitter` 上的
    `POST` 请求。如果用户不为 `UsersConnectionRepository` 接口所知，将调用 `signup` 端点。这将允许我们采取必要的措施在我们的系统中注册用户，并可能要求他们提供额外的详细信息。
- en: 'Let''s get to work. The first thing we need to do is to add the `signin/**`
    and `/signup` URLs as publicly available resources. Let''s modify our `WebSecurityConfiguration`
    class, changing the `permitAll` line:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始工作。我们首先需要做的是将 `signin/**` 和 `/signup` URL 添加为公开资源。让我们修改我们的 `WebSecurityConfiguration`
    类，更改 `permitAll` 行：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To enable the signin/signup scenario, we also need a `SignInAdapter` interface,
    a simple listener that will be called when an already known user signs in again.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用登录/注册场景，我们还需要一个 `SignInAdapter` 接口，一个简单的监听器，当已知用户再次登录时将被调用。
- en: 'We can create an `AuthenticatingSignInAdapter` class right next to our `LoginController`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `LoginController` 旁边创建一个 `AuthenticatingSignInAdapter` 类：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, this handler is called at the perfect time to allow user authentication
    with Spring Security. We''ll come back to that in just a moment. For now, we need
    to define our `SignupController` class in the same package, the one in charge
    of first-time visiting users:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此处理程序在允许用户使用 Spring Security 进行认证的完美时机被调用。我们稍后会回到这一点。现在，我们需要在同一个包中定义我们的
    `SignupController` 类，负责首次访问的用户：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: First, this controller retrieves the current connection from the session. Then,
    it authenticates the user through the same method as before. Lastly, it will trigger
    the `doPostSignUp` event, which will allow Spring Social to store information
    relative to our user in the `UsersConnectionRepository` interface that we mentioned
    earlier.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个控制器从会话中检索当前连接。然后，它通过之前相同的方法验证用户。最后，它将触发`doPostSignUp`事件，这将允许Spring Social存储与我们用户相关的信息在之前提到的`UsersConnectionRepository`接口中。
- en: 'The last thing we need to do is add a triumphant "login with twitter" button
    to our login page, right below the previous form:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要做的是在我们的登录页面上添加一个胜利的“使用Twitter登录”按钮，位于之前的表单下方：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Setting up social authentication](img/2117_06_06.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![设置社交认证](img/2117_06_06.jpg)'
- en: 'When the user clicks on the **CONNECT WITH TWITTER** button, they will be redirected
    to a Twitter sign in page:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**连接到Twitter**按钮时，他们将被重定向到一个Twitter登录页面：
- en: '![Setting up social authentication](img/2117_06_07.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![设置社交认证](img/2117_06_07.jpg)'
- en: Explanation
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 说明
- en: There isn't much code, but it is a bit tricky to understand all the parts. The
    first step to getting what's going on is to have a look at the `SocialWebAutoConfiguration`
    class of Spring Boot.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 代码不多，但理解所有部分有点棘手。了解正在发生什么的第一个步骤是查看Spring Boot的`SocialWebAutoConfiguration`类。
- en: 'The `SocialAutoConfigurationAdapter` class declared in this class contains
    the following bean:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中声明的`SocialAutoConfigurationAdapter`类包含以下bean：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `ProviderSignInController` class will automatically be set up if one `ProviderSignInController`
    class is detected in our configuration. This controller is the cornerstone of
    the sign-in process. Have a look at what it does (I will only summarize the important
    parts):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在我们的配置中检测到一个`ProviderSignInController`类，`ProviderSignInController`类将自动设置。这个控制器是登录过程的基础。看看它做了什么（我将只总结重要部分）：
- en: It will handle the `POST /signin/{providerId}` from our connect button
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将处理来自我们连接按钮的`POST /signin/{providerId}`
- en: It will redirect the user to the appropriate sign-in URL of our identification
    provider
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将用户重定向到我们身份提供者的适当登录URL
- en: It will be notified of the OAuth token by a `GET /signin/{providerId}` from
    the identification provider
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将通过身份提供者的`GET /signin/{providerId}`通知OAuth令牌
- en: It will then handle the sign in
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它将处理登录
- en: If the user is not found in the `UsersConnectionRepository` interface, it will
    use a `SessionStrategy` interface to store the pending login request and will
    then redirect to the `signupUrl` page
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在`UsersConnectionRepository`接口中找不到用户，它将使用`SessionStrategy`接口来存储挂起的登录请求，然后重定向到`signupUrl`页面
- en: If the user is found, the `SignInAdapter` interface is called and the user is
    redirected to the `postSignupUrl` page
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找到用户，将调用`SignInAdapter`接口，并将用户重定向到`postSignupUrl`页面
- en: The two important components of this identification are the `UsersConnectionRepository`
    interface in charge of storing and retrieving users from some kind of storage
    and the `SessionStrategy` interface that will temporarily store the user connection
    so it can be retrieved from the `SignupController` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个身份验证的两个重要组件是负责从某种存储中存储和检索用户的`UsersConnectionRepository`接口，以及将用户连接临时存储以便可以从`SignupController`类中检索的`SessionStrategy`接口。
- en: By default, Spring Boot creates an `InMemoryUsersConnectionRepository` interface
    for each authentication provider, which means that our user connection data will
    be stored in memory. If we restart the server, the user will become unknown and
    will go through the sign-up process again.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot为每个认证提供者创建一个`InMemoryUsersConnectionRepository`接口，这意味着我们的用户连接数据将存储在内存中。如果我们重启服务器，用户将变得未知，并将再次经历注册过程。
- en: The `ProviderSignInController` class defaults to `HttpSessionSessionStrategy`,
    which will store the connection in the HTTP session. The `ProviderSignInUtils`
    class that we use in our `SignupController` class also uses this strategy by default.
    If we were distributing our application on multiple servers, this would be problematic
    because the session would likely not be available on every server.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProviderSignInController`类默认使用`HttpSessionSessionStrategy`，这将把连接存储在HTTP会话中。我们在`SignupController`类中使用的`ProviderSignInUtils`类也默认使用这种策略。如果我们把我们的应用程序部署在多个服务器上，这可能会成问题，因为会话可能不会在每个服务器上可用。'
- en: It is easy enough to override these defaults by providing a custom `SessionStrategy`
    interface to both the `ProviderSignInController` and `ProviderSignInUtils` classes
    to store data somewhere other than in the HTTP session.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为`ProviderSignInController`和`ProviderSignInUtils`类提供自定义的`SessionStrategy`接口，将数据存储在HTTP会话之外，可以很容易地覆盖这些默认设置。
- en: Likewise, we can use another kind of storage for our user connection data by
    providing another implementation of the `UsersConnectionRepository` interface.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过提供`UsersConnectionRepository`接口的另一个实现来为我们的用户连接数据使用另一种存储方式。
- en: 'Spring Social provides a `JdbcUsersConnectionRepository` interface that will
    automatically save authenticated users in a `UserConnection` table in your database.
    This won''t be covered in this book extensively, but you should be able to configure
    it easily by adding the following bean to your configuration:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Social提供了一个`JdbcUsersConnectionRepository`接口，它将自动将认证用户保存到数据库中的`UserConnection`表中。本书不会对此进行详细说明，但您应该能够通过添加以下bean到您的配置中轻松配置它：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Check out this article [http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html](http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html)
    on my blog for more details.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多详情，请查看我的博客上的这篇文章 [http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html](http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html)。
- en: Distributed sessions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式会话
- en: As we have seen in the preceding section, there are several moments when Spring
    Social stores things in the HTTP session. Our user profile is also stored in the
    session. This is a classical approach to keeping things in memory as long as a
    user is navigating the site.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中看到的，Spring Social在几个时刻会将东西存储在HTTP会话中。我们的用户配置文件也存储在会话中。这是一种将东西保持在内存中的经典方法，只要用户在导航网站。
- en: However, this can prove troublesome if we want to scale our application and
    distribute the load to multiple backend servers. We have now entered the cloud
    era, and [Chapter 8](ch08.html "Chapter 8. Optimizing Your Requests"), *Optimizing
    Your Requests* will be about deploying our application to the cloud.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们想要扩展应用程序并将负载分配到多个后端服务器，这可能会变得麻烦。我们现在已经进入了云时代，[第8章](ch08.html "第8章。优化您的请求")，*优化您的请求*将介绍如何将我们的应用程序部署到云上。
- en: 'To make our session work in a distributed environment, we have a few options:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的会话在分布式环境中工作，我们有几种选择：
- en: We could use sticky sessions. This will ensure that a specific user will always
    be redirected to the same server and keep its session. It requires additional
    configuration for the deployment and isn't a particularly elegant approach.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用粘性会话。这将确保特定用户始终被重定向到同一服务器并保持其会话。这需要额外的部署配置，并且不是一个特别优雅的方法。
- en: Refactor our code to put data in a database instead of the session. We can then
    load the user's data from the database if we associate it with a cookie or a token
    sent by the client with each request.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构我们的代码，将数据存入数据库而不是会话中。如果我们将其与客户端每次请求发送的cookie或token关联，就可以从数据库中加载用户数据。
- en: Use the Spring Session project to transparently use a distributed database such
    as Redis as the underlying session provider.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Session项目，可以透明地使用如Redis这样的分布式数据库作为底层会话提供者。
- en: In this chapter, we will see how to set up the third approach. It is really
    easy to set up and provides the amazing benefit that it can be turned off without
    impacting the functionality of our application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何设置第三种方法。它设置起来非常简单，并且提供了令人惊叹的好处，即可以关闭它而不会影响我们应用程序的功能。
- en: 'The first thing we need to do is to install Redis. To install it on Mac, use
    the `brew` command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是安装Redis。要在Mac上安装它，请使用`brew`命令：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For other platforms, follow the instructions at [http://redis.io/download](http://redis.io/download).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他平台，请遵循[http://redis.io/download](http://redis.io/download)上的说明。
- en: 'You can then start the server by using the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令启动服务器：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following dependencies to your `build.gradle` file:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到您的`build.gradle`文件中：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a new configuration file next to `application.properties` called `application-redis.properties`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在`application.properties`旁边创建一个新的配置文件，命名为`application-redis.properties`：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Spring Boot provides a convenient way of associating configuration files with
    a profile. In this case, the `application-redis.properties` file will only be
    loaded if the Redis profile is active.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了一种方便的方法来将配置文件与配置文件关联。在这种情况下，`application-redis.properties`文件只有在Redis配置文件激活时才会被加载。
- en: 'Then, create a `RedisConfig` class in the `config` package:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`config`包中创建一个`RedisConfig`类：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see, this configuration will only be active if the `redis` profile
    is on.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，此配置只有在`redis`配置文件开启时才会生效。
- en: 'We''re done! We can now launch our app with the following flag:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！现在我们可以使用以下标志启动我们的应用程序：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also generate the JAR with `gradlew build` and launch it with the following
    command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`gradlew build`生成JAR文件，并使用以下命令启动它：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Alternatively, you can launch it with Gradle in Bash, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以在Bash中使用Gradle启动它，如下所示：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can also simply set it up as a JVM option in the run configuration of your
    IDE.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以简单地将其设置为IDE运行配置中的JVM选项。
- en: And that's it! You now have a server storing the details of your logged-in users.
    This means that we can scale and have multiple servers for our web resources and
    our users won't notice. And we didn't have to write any code on our side.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你现在有一个服务器，用于存储登录用户的详细信息。这意味着我们可以扩展并拥有多个服务器来处理我们的网络资源，而用户不会注意到。而且我们不需要在我们的端上编写任何代码。
- en: This also means that you will keep your session even if you restart your server.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着即使你重启服务器，你也会保持会话。
- en: 'To see that it works, connect to Redis with the `redis-cli` command. At the
    beginning, it will not contain any keys:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看它是否工作，使用`redis-cli`命令连接到Redis。一开始，它不会包含任何键：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Navigate to your app and start putting things in the session:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到你的应用并开始将东西放入会话中：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can consult the list of available commands at [http://redis.io/commands](http://redis.io/commands).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://redis.io/commands](http://redis.io/commands)上查看可用的命令列表。
- en: SSL
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSL
- en: '**Secure Sockets Layer** (**SSL**) is a security protocol in which data is
    encrypted and sent to a trusted party via a certificate. In this part, I will
    show you the different ways to create a secured connection with Spring Boot. The
    completion of these steps is not mandatory to start the next chapter. They are
    included for completeness, so feel free to skip them if you are in a hurry to
    deploy your application to the cloud.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全套接字层**（**SSL**）是一种安全协议，其中数据通过证书加密并发送到一个受信任的方。在本部分，我将向你展示使用Spring Boot创建安全连接的不同方法。完成这些步骤不是启动下一章的强制性要求。它们包括为了完整性，如果你急于部署应用程序到云中，可以自由跳过它们。'
- en: In [Chapter 9](ch09.html "Chapter 9. Deploying Your Web Application to the Cloud"),
    *Deploying Your Web Application to the Cloud*, we will see that most cloud platforms
    already handle SSL so we don't have to configure it at our end.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。将你的Web应用程序部署到云中")，“将你的Web应用程序部署到云中”，我们将看到大多数云平台已经处理了SSL，所以我们不需要在我们的端上配置它。
- en: Generating a self-signed certificate
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成自签名证书
- en: Normally, X.509 certificates are delivered by a Certificate Authority. They
    generally bill you for the service, so for testing purposes, we can create our
    own self-signed keystore file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，X.509证书由证书颁发机构提供。他们通常为你提供服务收费，所以为了测试目的，我们可以创建我们自己的自签名密钥库文件。
- en: 'The JDK comes with a binary called keytool, which is used to manage certificates.
    With it, you can create a keystore and import certificates into an existing keystore.
    You can issue the following command inside your project root to create one:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: JDK附带一个名为keytool的二进制文件，用于管理证书。使用它，你可以创建密钥库并将证书导入到现有的密钥库中。你可以在项目根目录内执行以下命令来创建一个：
- en: '[PRE33]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will generate a keystore named `masterspringmvc` with the RSA algorithm
    and will store it in a keystore in `src/main/resources`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为`masterspringmvc`的密钥库，使用RSA算法，并将其存储在`src/main/resources`目录下的密钥库中。
- en: Tip
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not push the keystore to your repository. It can be brute-forced, which would
    void the security of your website. You should also generate keystores with strong,
    randomly generated passwords.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将密钥库推送到你的仓库。它可能被暴力破解，这将使你网站的安保失效。你还应该使用强随机生成的密码来生成密钥库。
- en: The easy way
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单方式
- en: 'If all you care about is having one secure https channel and no http channel,
    it is as easy as it gets:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只关心有一个安全的https通道而没有http通道，那就简单得不能再简单了：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not push your passwords to your repository. Use the `${}` notation to import
    environment variables.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将你的密码推送到你的仓库。使用`${}`符号来导入环境变量。
- en: The dual way
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双向方式
- en: 'If you want to have both the http and the https channels available in your
    application, you should add this kind of configuration to your application:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在你的应用程序中同时拥有http和https通道，你应该在你的应用程序中添加此类配置：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will load the previously generated keystore to create an additional channel
    on port 8443 in addition to port 8080.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载先前生成的keystore，在端口8080之外，在端口8443上创建一个额外的通道。
- en: 'You can use Spring Security to automatically redirect connections from `http`
    to `https` with the following configuration:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Spring Security通过以下配置自动将连接从`http`重定向到`https`：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Behind a secured server
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在受保护的服务器后面
- en: The most convenient way to secure your application with SSL is often to put
    it behind an SSL-enabled web server such as Apache or CloudFlare. These will often
    use de facto headers to indicate that the connection was previously initiated
    with SSL.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSL保护您的应用程序最方便的方式通常是将其放在一个启用了SSL的Web服务器后面，如Apache或CloudFlare。这些服务器通常会使用既定的头信息来指示连接之前已经通过SSL发起。
- en: 'Spring Boot can understand this protocol if you tell it what the correct headers
    are in your `application.properties` file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在`application.properties`文件中告诉Spring正确的头信息，Spring Boot可以理解此协议：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the documentation here for more details at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下文档以获取更多详细信息：[http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server).
- en: The check point
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: 'In this chapter, we added three pieces of configuration: `ApiSecurityConfiguration`,
    which configures our REST API to use basic HTTP authentication; `WebSecurityConfiguration`,
    which sets up a login form for our web users to sign in with either an account
    or with Twitter; and `RedisConfig`, which allows our sessions to be stored and
    retrieved from a Redis server.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了三段配置：`ApiSecurityConfiguration`，它配置我们的REST API使用基本HTTP认证；`WebSecurityConfiguration`，它为我们的网络用户设置登录表单，用户可以使用账户或Twitter登录；以及`RedisConfig`，它允许我们的会话在Redis服务器上存储和检索。
- en: 'In the authentication package, we added a `LoginController` class that redirects
    to our login page, a `SignupController` class that will be called the first time
    a user signs up with Twitter, and an `AuthenticatingSignInAdapater` class that
    will be called on every login with Twitter:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在认证包中，我们添加了一个`LoginController`类，它将重定向到我们的登录页面，一个`SignupController`类，它将在用户第一次使用Twitter注册时被调用，以及一个`AuthenticatingSignInAdapater`类，它将在每次使用Twitter登录时被调用：
- en: '![The check point](img/2117_06_08.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/2117_06_08.jpg)'
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Securing our web application with Spring is really simple. The possibilities
    are endless, and advanced configurations such as social sign in are at your fingertips.
    Distributing sessions and scaling also take a matter of minutes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring保护我们的Web应用程序非常简单。可能性是无限的，并且高级配置，如社交登录，都在您的指尖。分发会话和扩展也只需几分钟。
- en: In the next chapter, we will see how to test our application and ensure it never
    regresses.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解如何测试我们的应用程序并确保它不会退化。
