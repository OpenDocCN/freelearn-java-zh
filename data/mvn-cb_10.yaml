- en: Chapter 10. Java Development with Maven
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：使用 Maven 进行 Java 开发
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Building a JAR project
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 JAR 项目
- en: Generating an executable JAR
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成可执行的 JAR
- en: Generating a JAR of the source code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成源代码的 JAR
- en: Generating a JAR of the test classes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成测试类的 JAR
- en: Building a WAR project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 WAR 项目
- en: Building an EAR project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 EAR 项目
- en: Building a pom project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 pom 项目
- en: Running a web project with Jetty
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jetty 运行 Web 项目
- en: Running a web project with Tomcat
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Tomcat 运行 Web 项目
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Maven is primarily a build tool for Java projects. Java projects can generate
    different types of binaries. Typically, the output of a Java project is a JAR
    file. For web applications, Java classes combined with other type of files result
    in a WAR or EAR file as well. Maven provides plugins and lifecycle phases to generate
    various types of binary artifacts for Java projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 主要是一个用于 Java 项目的构建工具。Java 项目可以生成不同类型的二进制文件。通常，Java 项目的输出是一个 JAR 文件。对于
    Web 应用程序，Java 类与其他类型的文件结合，可以生成 WAR 或 EAR 文件。Maven 提供插件和生命周期阶段，用于为 Java 项目生成各种类型的二进制工件。
- en: Building a JAR project
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 JAR 项目
- en: The default type of artifact generated by Maven is JAR. If the `packaging` element
    is absent, or specified as `jar`, Maven considers it a JAR project. A JAR project
    combines all the source classes along with the necessary project resources to
    a single file. This JAR file can be distributed for it to be used elsewhere.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 默认生成的工件类型是 JAR。如果 `packaging` 元素不存在，或指定为 `jar`，Maven 则将其视为 JAR 项目。JAR
    项目将所有源代码以及必要的项目资源合并到一个文件中。这个 JAR 文件可以分发到其他地方使用。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven is set up on your system and is verified for work. To do this, refer to
    [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 已在您的系统上设置并验证了其工作。要完成此操作，请参阅 [第 1 章](ch01.html "第 1 章。入门")，*入门*。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a simple Maven project, in our case `simple-project`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的 Maven 项目，在我们的例子中是 `simple-project`。
- en: 'Verify that the type is absent or set to `jar`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证类型是否存在或设置为 `jar`：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following Maven command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Observe the output:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `package` option is part of Maven's default lifecycle. When Maven is run
    with the `package` option, it runs all the phases up to and prior to it, in order.
    Maven first compiles the project, runs the tests, and then, based on the packaging
    type, invokes the suitable plugin to package. In our case, as we specified the
    packaging as `jar`, Maven used the `jar` goal of the Maven JAR plugin to create
    a JAR artifact in the `target` folder.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`package` 选项是 Maven 默认生命周期的一部分。当 Maven 使用 `package` 选项运行时，它会按顺序运行到该选项之前和之前的所有阶段。Maven
    首先编译项目，运行测试，然后根据打包类型，调用合适的插件进行打包。在我们的例子中，因为我们指定了打包为 `jar`，所以 Maven 使用 Maven JAR
    插件的 `jar` 目标在 `target` 文件夹中创建 JAR 工件。'
- en: See also
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Generating an executable JAR* recipe in this chapter
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *生成可执行的 JAR* 食谱
- en: Generating an executable JAR
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成可执行的 JAR
- en: The JAR artifact generated by Maven works well when used as a dependency in
    another project. However, it cannot be run as an executable without manually specifying
    the main class and explicitly specifying the dependencies that the project uses
    in the classpath.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 生成的 JAR 工件在用作其他项目的依赖项时运行良好。然而，如果没有手动指定主类并明确指定项目在类路径中使用的依赖项，则不能作为可执行文件运行。
- en: What if we want to create an executable JAR for the project? This may be useful
    when the JAR needs to be tested or the project is a simple tool that should be
    invoked without additional effort.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想为项目创建一个可执行的 JAR，这可能是有用的，当 JAR 需要测试或项目是一个简单的工具，应该无需额外努力即可调用时。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open a simple Maven project (`project-with-executable-jar`):'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的 Maven 项目（`project-with-executable-jar`）：
- en: 'Add the following section in the `pom` file:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom` 文件中添加以下部分：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the plugin configuration to copy over the dependencies to the `target`
    folder:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将插件配置添加到 `target` 文件夹以复制依赖项：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Observe the `target` folder:![How to do it...](img/6124OS_10_01.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察目标文件夹：![如何操作...](img/6124OS_10_01.jpg)
- en: 'Run the generated JAR file:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行生成的 JAR 文件：
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Observe the output:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We have made the following configurations to the Maven JAR plugin in our `pom`
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 `pom` 文件中对 Maven JAR 插件进行了以下配置：
- en: '**Added classpath**: This adds all the dependant JARs to the manifest classpath
    section'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加类路径**：这会将所有依赖的 JAR 添加到清单类路径部分'
- en: '**Specified the main class**: This information is again updated in the manifest'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指定了主类**：此信息再次更新在清单中'
- en: We also added the `copy-dependencies` goal of the Maven Dependency plugin to
    copy over the required dependencies to the folder where the executable JAR is
    generated.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了Maven Dependency插件的`copy-dependencies`目标，将所需的依赖项复制到生成可执行JAR文件的文件夹中。
- en: When we then run the executable JAR, it uses the manifest file to determine
    the main class as well as the dependencies, loads them, and runs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行可执行JAR时，它使用清单文件来确定主类以及依赖项，加载它们并运行。
- en: 'Let us look at the manifest file generated:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看生成的清单文件：
- en: '![How it works...](img/6124OS_10_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/6124OS_10_02.jpg)'
- en: Evidently, for this to work, the executable JAR should be accompanied by the
    dependencies that it uses. In the *Creating an assembly* recipe in [Chapter 11](ch11.html
    "Chapter 11. Advanced Maven Usage"), *Advanced Maven Usage*, we will learn how
    to create an assembly with all the dependencies, which can be distributed more
    easily.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，为了使这可行，可执行JAR应该附带它所使用的依赖项。在[第11章](ch11.html "第11章。高级Maven使用")“高级Maven使用”的*创建一个assembly配方*中，我们将学习如何创建包含所有依赖项的assembly，这样就可以更容易地分发。
- en: Generating a JAR of the source code
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成源代码的JAR文件
- en: For many projects, it is useful to generate a JAR of the source code along with
    the artifact. The source thus generated can be imported to IDEs and used for browsing
    and debugging. Typically, the artifacts of most open source projects are accompanied
    by sources and Javadocs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多项目来说，生成源代码的JAR文件与工件一起非常有用。生成的源代码可以导入到IDE中，用于浏览和调试。通常，大多数开源项目的工件都附带源代码和Javadocs。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a project for which you want to generate and attach the source code (`project-with-source-code`).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要生成和附加源代码的项目（`project-with-source-code`）。
- en: 'Add the following plugin configuration to the `pom` file:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件配置添加到`pom`文件中：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the following Maven command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Observe the output:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE10]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Examine the `target` folder:![How to do it...](img/6124OS_10_03.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`target`文件夹：![如何操作...](img/6124OS_10_03.jpg)
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We added the Maven Source plugin to the `pom` file. We also configured the plugin
    to run the `jar-no-fork` goal during the package phase. The goal creates a JAR
    of the project source code and makes it available along with the project artifacts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将Maven Source插件添加到`pom`文件中。我们还配置了插件在打包阶段运行`jar-no-fork`目标。该目标创建项目源代码的JAR文件，并将其与项目工件一起提供。
- en: 'The `jar-no-fork` goal is used to bind the goal to the build lifecycle. To
    run the plugin and create the JAR independent of the lifecycle, the `jar` goal
    can be used as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar-no-fork`目标用于将目标绑定到构建生命周期。要独立于生命周期运行插件并创建JAR，可以使用以下方式使用`jar`目标：'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Subsequent phases (such as `install`) install the source artifact along with
    the project artifact.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 后续阶段（如`install`）将源工件与项目工件一起安装。
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'What if we want to attach the Javadoc instead of (or in addition to) sources?
    Let us do this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想附加Javadoc而不是（或与）源代码一起，让我们这样做：
- en: 'Add the following plugin to the `pom` file:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件添加到`pom`文件中：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Build the aggregator project:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建聚合器项目：
- en: '[PRE13]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Observe the output:![There's more...](img/6124OS_10_04.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![更多...](img/6124OS_10_04.jpg)
- en: Maven runs the `jar` goal of the Maven Javadoc plugin in addition to the `jar-no-fork`
    goal of the Maven Source plugin. Both the JARs are now created, in addition to
    the project artifacts, and are now available for distribution.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Maven在运行Maven Source插件的`jar-no-fork`目标的同时，还运行Maven Javadoc插件的`jar`目标。现在除了项目工件外，还创建了这两个JAR文件，并可供分发。
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Besides sources, the test sources and test Javadocs can also be generated and
    attached, if relevant to the project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了源代码外，如果项目相关，还可以生成和附加测试源代码和测试Javadocs。
- en: Generating a JAR of the test classes
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成测试类的JAR文件
- en: There could be situations when you would want to use the test classes and resources
    of a project as a test dependency in another project. This is typically the case
    in multi-module projects, where a module depends on another module. There could
    be utility code in the test classes of a module that can be reused in another
    module.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在这样的情况，你希望将一个项目的测试类和资源作为测试依赖项用于另一个项目。这在多模块项目中很常见，其中一个模块依赖于另一个模块。模块的测试类中可能包含可以在另一个模块中重用的实用代码。
- en: One way to achieve this would be by creating a separate project to hold these
    classes. However, that is cumbersome and may be confusing as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的其中一种方法是通过创建一个单独的项目来保存这些类。然而，这样做可能会很繁琐，也可能令人困惑。
- en: Maven provides another way to achieve this.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了另一种实现方式。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a project for which you want to create a test JAR (`project-with-test-jar`).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个你想为其创建测试JAR的项目（`project-with-test-jar`）。
- en: 'Add the following plugin configuration to the `pom` file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件配置添加到`pom`文件中：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following Maven command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Observe the output:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Examine the `target` folder:![How to do it...](img/6124OS_10_05.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`target`文件夹：![如何操作...](img/6124OS_10_05.jpg)
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We specified a `test-jar` goal to the Maven JAR plugin. This asks Maven to
    generate a JAR of test classes and resources. This JAR can be installed along
    with the project artifact. It can also be specified as a dependency in another
    project as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Maven JAR插件指定了一个`test-jar`目标。这会让Maven生成一个测试类和资源的JAR文件。这个JAR文件可以与项目工件一起安装。它也可以在另一个项目中指定为依赖项，如下所示：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: One thing to note though is the test JAR does not bring its transitive test-scoped
    dependencies with it if you add a dependency on this. These dependencies, if required,
    need to be specified by hand.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，如果你在这个依赖项上添加了依赖，测试JAR不会带其传递的测试范围依赖项。如果需要，这些依赖项需要手动指定。
- en: Building a WAR project
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建WAR项目
- en: So far, we have been building projects that generate a JAR artifact. When it
    comes to web applications, we typically create WAR artifacts. Maven supports the
    building of WAR artifacts. The packaging type `.war` indicates to Maven that it
    is a WAR artifact. Maven automatically invokes the corresponding lifecycle bindings.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在构建生成JAR工件的项目。当涉及到Web应用时，我们通常创建WAR工件。Maven支持WAR工件的构建。打包类型`.war`指示Maven这是一个WAR工件。Maven会自动调用相应的生命周期绑定。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Run the following command from the command prompt:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令提示符运行以下命令：
- en: '[PRE18]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Observe the output:![How to do it...](img/6124OS_10_06.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：![如何操作...](img/6124OS_10_06.jpg)
- en: 'Open the created `pom` file:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开创建的`pom`文件：
- en: '[PRE19]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the command to build the project:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令来构建项目：
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Observe the output:![How to do it...](img/6124OS_10_07.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：![如何操作...](img/6124OS_10_07.jpg)
- en: 'Check the `target` folder:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`target`文件夹：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We used the Maven Archetype plugin to bootstrap a simple web project. This generated
    a `pom` file along with other contents for a web application. When you examine
    the `pom` file, you will notice that the `packaging` type is set to `war`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Maven Archetype插件来启动一个简单的Web项目。这生成了一个`pom`文件以及其他Web应用的文件内容。当你检查`pom`文件时，你会注意到`packaging`类型被设置为`war`。
- en: Maven uses this information to invoke the `war` goal of the Maven plugin to
    create a WAR of the project contents.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Maven使用这些信息来调用Maven插件的`war`目标，以创建项目内容的WAR文件。
- en: Also, observe that we specified the `finalName` element. Maven uses this to
    create the name of the WAR artifact. In the absence of this element, Maven uses
    the default name, which would have been `simple-webapp-1.0-SNAPSHOT.war`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意我们指定了`finalName`元素。Maven使用这个元素来创建WAR工件的名称。如果没有这个元素，Maven将使用默认名称，即`simple-webapp-1.0-SNAPSHOT.war`。
- en: There's more...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Maven WAR plugin can be used in many ways. The default option creates a
    WAR file. During development, we would want to speed up things by generating the
    WAR file in exploded form. To do this, perform the following steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Maven WAR插件可以用多种方式使用。默认选项创建一个WAR文件。在开发过程中，我们可能希望通过生成展开形式的WAR文件来加快速度。为此，执行以下步骤：
- en: Open the `simple-webapp` project.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`simple-webapp`项目。
- en: 'Run the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE22]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Examine the content of the `target` folder:![There's more...](img/6124OS_10_08.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`target`文件夹的内容：![还有更多...](img/6124OS_10_08.jpg)
- en: Building an EAR project
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建EAR项目
- en: Maven provides support to generate Java **EE Enterprise Archive** (**EAR**)
    files. These can be deployed in application servers such as JBoss, WebLogic, and
    WebSphere.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了生成Java **EE企业存档**（**EAR**）文件的支持。这些可以在JBoss、WebLogic和WebSphere等应用服务器上部署。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Run the following command from the command prompt:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令提示符运行以下命令：
- en: '[PRE23]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Observe the result:![How to do it...](img/6124OS_10_09.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：![如何操作...](img/6124OS_10_09.jpg)
- en: 'Build the generated project:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建生成的项目：
- en: '[PRE24]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Observe the generated output:![How to do it...](img/6124OS_10_10.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察生成的输出结果：![如何操作...](img/6124OS_10_10.jpg)
- en: Open the `target` folder:![How to do it...](img/6124OS_10_11.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `target` 文件夹：![如何操作...](img/6124OS_10_11.jpg)
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We used the Maven Archetype plugin to bootstrap a simple EAR project. It generated
    a multi-module project, which has an EJB module, web module, and a EAR module
    along with the aggregate pom file. When you examine the `pom` file of the EAR
    module, you will notice that the `packaging` type is set to `ear`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 Maven 架构插件来启动一个简单的 EAR 项目。它生成一个多模块项目，其中包括一个 EJB 模块、Web 模块和一个 EAR 模块，以及一个聚合
    pom 文件。当你检查 EAR 模块的 `pom` 文件时，你会注意到 `packaging` 类型被设置为 `ear`。
- en: Once built, Maven builds all the modules. In the EAR module, it uses the packaging
    information to invoke the `ear` goal of the Maven EAR plugin to create a EAR of
    the project contents.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，Maven 会构建所有模块。在 EAR 模块中，它使用打包信息来调用 Maven EAR 插件的 `ear` 目标，以创建项目内容的 EAR。
- en: Building a pom project
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 pom 项目
- en: There are many reasons why you may want to make a pom file available as an artifact.
    One reason is the aggregate project. An aggregate project must have the `pom`
    packaging type. Another reason could be a pom, which can be imported as a dependency.
    Whatever the reason, Maven provides support to build a pom project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要将 pom 文件作为艺术品提供的许多原因之一是聚合项目。聚合项目必须具有 `pom` 打包类型。另一个原因可能是可以作为一个依赖项导入的 pom。无论原因如何，Maven
    都提供了构建 pom 项目的支持。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a simple pom project (`simple-pom-project`).
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的 pom 项目（`simple-pom-project`）。
- en: 'Observe the `packaging` type:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察打包类型：
- en: '[PRE25]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Build the project:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目：
- en: '[PRE26]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that only the `clean` goal is run.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，只有 `clean` 目标被运行。
- en: 'Run the following command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Observe the output:![How to do it...](img/6124OS_10_12.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何操作...](img/6124OS_10_12.jpg)
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The following are the default bindings for the `pom` packaging type:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `pom` 打包类型的默认绑定：
- en: '`package: site:attach-descriptor`: This attaches a descriptor to the site report,
    if applicable'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package: site:attach-descriptor`：如果适用，这会将描述符附加到站点报告中'
- en: '`install: install:install`: This installs the project in the local repository'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install: install:install`：这会在本地仓库中安装项目'
- en: '`deploy: deploy:deploy`: This deploys the project to the remote repository'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy: deploy:deploy`：这会将项目部署到远程仓库'
- en: As we can see, Maven does not run any other goals for the `pom` packaging type.
    However, if it sees `module` elements, it invokes the specified Maven goals on
    all the defined modules.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Maven 不会为 `pom` 打包类型运行任何其他目标。然而，如果它看到 `module` 元素，它会在所有定义的模块上调用指定的 Maven
    目标。
- en: Also, various configurations, including `pluginManagement` and `dependencyManagement`,
    get inherited by all of the child projects.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，包括 `pluginManagement` 和 `dependencyManagement` 在内的各种配置都会被所有子项目继承。
- en: There's more...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'What if you had a reason to compile some source files or run some tests even
    though the packaging type is `pom`? This may not be a usual scenario, but it can
    be done by explicitly invoking the relevant plugin goals in the following way:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个原因需要编译一些源文件或运行一些测试，即使打包类型是 `pom`，怎么办？这可能不是一个常见的场景，但可以通过以下方式显式调用相关插件目标来完成：
- en: Open the simple pom project (`simple-pom-project`).
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开简单的 pom 项目（`simple-pom-project`）。
- en: 'Run the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE28]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Observe the output:![There's more...](img/6124OS_10_13.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![还有更多...](img/6124OS_10_13.jpg)
- en: 'We now explicitly invoke the following goals:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在显式调用以下目标：
- en: '`compiler:compile`: This compiles the source files'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compiler:compile`：这会编译源文件'
- en: '`compiler:testCompile`: This compiles test files'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compiler:testCompile`：这会编译测试文件'
- en: '`surefire:test`: This runs tests'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`surefire:test`：这会运行测试'
- en: '`jar:jar`: This creates a JAR artifact'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jar:jar`：这会创建一个 JAR 艺术品'
- en: Maven does not prevent us from doing this.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 并不会阻止我们这样做。
- en: Running a web project with Jetty
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jetty 运行 Web 项目
- en: When developing web applications, it is good to have a quick way to check if
    the application deploys successfully without errors. IDEs allow users to hot-deploy
    applications. Maven provides a mechanism to quickly run the project using Jetty.
    Jetty is a popular open source application server that can be used to deploy web
    projects. The Maven Jetty plugin allows applications to be deployed to Jetty and
    runs them as part of the Maven build process.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Web 应用程序时，有一个快速的方法来检查应用程序是否成功部署且没有错误是很不错的。IDE 允许用户进行热部署应用程序。Maven 提供了一种机制，可以使用
    Jetty 快速运行项目。Jetty 是一个流行的开源应用程序服务器，可以用来部署 Web 项目。Maven Jetty 插件允许将应用程序部署到 Jetty，并在
    Maven 构建过程中运行它们。
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a simple web project (`simple-web-project`).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的 Web 项目（`simple-web-project`）。
- en: 'Run the following Maven command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE29]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Observe the result:![How to do it...](img/6124OS_10_14.jpg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：![如何操作...](img/6124OS_10_14.jpg)
- en: Access the web application from the browser by going to `http://localhost:8080`.![How
    to do it...](img/6124OS_10_15.jpg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 `http://localhost:8080` 从浏览器访问 Web 应用程序。[![如何操作...](img/6124OS_10_15.jpg)]
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Maven Jetty plugin allows web applications to be deployed and tested using
    Jetty. The `run` goal is bound to the `package` phase. Maven runs all the phases
    prior to it. Jetty deploys the webapp from its sources; the webapp does not have
    to be built into a WAR. It looks for the relevant parts of the web application
    in the default Maven locations. Here are some instances:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Jetty 插件允许使用 Jetty 部署和测试 Web 应用程序。`run` 目标绑定到 `package` 阶段。Maven 运行它之前的所有阶段。Jetty
    从其源代码部署 Web 应用程序；Web 应用程序不需要构建成 WAR 文件。它会在默认的 Maven 位置查找 Web 应用程序的相关部分。以下是一些示例：
- en: '`resources` in `src/main/webapp`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/webapp` 中的 `resources`'
- en: '`classes` in `target/classes`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target/classes` 中的 `classes`'
- en: '`web.xml` in `src/main/webapp/WEB-INF`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/webapp/WEB-INF` 中的 `web.xml`'
- en: Jetty uses default values to start the server.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Jetty 使用默认值启动服务器。
- en: Tip
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'As Jetty is not an official Maven plugin, we have explicitly specified `groupId`
    (`org.eclipse.jetty`) and `artifactId` (`jetty-maven-plugin`) instead of the short
    plugin prefix. To use the short plugin prefix, add the following in the settings
    file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Jetty 不是一个官方的 Maven 插件，我们明确指定了 `groupId` (`org.eclipse.jetty`) 和 `artifactId`
    (`jetty-maven-plugin`)，而不是短插件前缀。要使用短插件前缀，请在设置文件中添加以下内容：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, Maven can be invoked as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以按如下方式调用 Maven：
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There's more...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Maven Jetty plugin provides several goals and configurations to help develop
    web applications.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Jetty 插件提供了一些目标和配置，以帮助开发 Web 应用程序。
- en: 'Run the WAR file:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 WAR 文件：
- en: '[PRE32]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Jetty now builds the WAR file and then runs it:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Jetty 现在构建 WAR 文件然后运行：
- en: '![There''s more...](img/6124OS_10_16.jpg)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![还有更多...](img/6124OS_10_16.jpg)'
- en: 'Run the exploded WAR file:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行展开的 WAR 文件：
- en: '[PRE33]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Jetty now builds the WAR file, explodes it, and then runs it:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Jetty 现在构建 WAR 文件，将其展开，然后运行：
- en: '![There''s more...](img/6124OS_10_17.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![还有更多...](img/6124OS_10_17.jpg)'
- en: 'There are some other goals that can be used as well:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他的目标可以使用：
- en: '`jetty:deploy-war`: This deploys an existing WAR file without building it'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jetty:deploy-war`: 这将部署现有的 WAR 文件而无需构建它'
- en: '`jetty:start`: This starts the Jetty server'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jetty:start`: 这将启动 Jetty 服务器'
- en: '`jetty:stop`: This stops the Jetty server'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jetty:stop`: 这将停止 Jetty 服务器'
- en: '`jetty:run-forked`: This runs the Jetty server in a Java virtual machine process
    different from Maven'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jetty:run-forked`: 这将在与 Maven 不同的 Java 虚拟机进程中运行 Jetty 服务器'
- en: Running a web project with Tomcat
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tomcat 运行 Web 项目
- en: Tomcat is a popular open source application server. The Maven Tomcat plugin
    supports the ability to build and deploy Maven projects in Tomcat. In fact, there
    are two Maven Tomcat plugins, one for Tomcat 6 and another for Tomcat 7.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat 是一个流行的开源应用程序服务器。Maven Tomcat 插件支持在 Tomcat 中构建和部署 Maven 项目。实际上，有两个 Maven
    Tomcat 插件，一个用于 Tomcat 6，另一个用于 Tomcat 7。
- en: Let us look at how to run a web project with Tomcat 7\. The steps will be identical
    for Tomcat 6, except that the plugin would be `tomcat6-maven-plugin` instead of
    `tomcat7-maven-plugin`, and the plugin prefix would be `tomcat6` instead of `tomcat7`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Tomcat 7 运行 Web 项目。步骤将与 Tomcat 6 相同，只是插件将是 `tomcat6-maven-plugin`
    而不是 `tomcat7-maven-plugin`，插件前缀将是 `tomcat6` 而不是 `tomcat7`。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a simple web project (`simple-web-project`).
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的 Web 项目（`simple-web-project`）。
- en: 'Run the following Maven command:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE34]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Observe the result:![How to do it...](img/6124OS_10_18.jpg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：![如何操作...](img/6124OS_10_18.jpg)
- en: Browse to the deployed webapp by visiting `http://localhost:8080/simple-webapp`:![How
    to do it...](img/6124OS_10_19.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 `http://localhost:8080/simple-webapp` 浏览已部署的 Web 应用程序。[![如何操作...](img/6124OS_10_19.jpg)]
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Maven Tomcat plugin allows web applications to be deployed and tested using
    Apache Tomcat. The `run` goal is bound to the `package` phase. Maven runs all
    the phases prior to it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Tomcat 插件允许使用 Apache Tomcat 部署和测试 Web 应用程序。`run` 目标绑定到 `package` 阶段。Maven
    运行它之前的所有阶段。
- en: Tomcat uses default values to start the server.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat 使用默认值启动服务器。
- en: Tip
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'As this is not an official Maven plugin, we have explicitly specified the `groupId`
    (`org.apache.tomcat.maven`) and the `artifactId` (`tomcat7-maven-plugin`) instead
    of the short plugin prefix. To use the short plugin prefix, add the following
    in the settings file:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这不是官方的 Maven 插件，我们明确指定了 `groupId` (`org.apache.tomcat.maven`) 和 `artifactId`
    (`tomcat7-maven-plugin`)，而不是使用简短的插件前缀。要使用简短的插件前缀，请在设置文件中添加以下内容：
- en: '[PRE35]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then Maven can be invoked as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以按照以下方式调用 Maven：
- en: '[PRE36]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There's more...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Maven Tomcat7 plugin also supports goals to start and stop Tomcat, which
    can be used when running integration tests.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Tomcat7 插件也支持启动和停止 Tomcat 的目标，这在运行集成测试时可以使用。
- en: 'It also supports the creation of an executable JAR using embedded Tomcat. Let
    us see how to do this:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 它还支持使用嵌入式 Tomcat 创建可执行 JAR 文件。让我们看看如何做：
- en: Open the web project for which you want to create an executable JAR (`project-with-executable-webapp`).
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您想要创建可执行 JAR 文件的 Web 项目（`project-with-executable-webapp`）。
- en: 'Add the following plugin and configuration:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下插件和配置：
- en: '[PRE37]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the following command:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE38]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the JAR created in the `target` folder:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `target` 文件夹中创建的 JAR 文件：
- en: '[PRE39]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Observe the output:![There's more...](img/6124OS_10_20.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![还有更多...](img/6124OS_10_20.jpg)
- en: What we have now is a distributable web application using embedded Tomcat.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个使用嵌入式 Tomcat 的可分发 Web 应用程序。
- en: Tip
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a bug due to which we need to use version 2.1 of the plugin rather
    than 2.2 for this to work.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在一个错误，我们需要使用插件的 2.1 版本而不是 2.2 版本才能使其工作。
