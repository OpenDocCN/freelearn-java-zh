- en: Chapter 10. The User Interface – Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章。用户界面 – 视图
- en: Our web service client fetches information regarding a contact and presents
    it to the user as plain text. We are going to use Mustache, a template engine
    that is part of the `dropwizard-views-mustache` module, in order to create HTML
    views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 web 服务客户端获取有关联系人的信息，并将其以纯文本形式呈现给用户。我们将使用 Mustache，这是一个作为 `dropwizard-views-mustache`
    模块一部分的模板引擎，来创建 HTML 视图。
- en: Building a user interface for the web service client
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 web 服务客户端构建用户界面
- en: We will build a user interface for the web service client that consists of an
    HTML page that will be used to render a contact's details within a table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 web 服务客户端构建一个用户界面，该界面由一个用于在表格中渲染联系人详细信息的 HTML 页面组成。
- en: Getting ready
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Not surprisingly, the first thing we need to do is to add the `dropwizard-views`
    and `dropwizard-assets` dependencies in our `pom.xml`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，我们首先需要做的是在我们的 `pom.xml` 文件中添加 `dropwizard-views` 和 `dropwizard-assets`
    依赖项：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, we will need to create a folder where we will store our template files.
    Create the `[ProjectRoot]/src/main/resources/views` folder as shown in the following
    screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要创建一个文件夹来存储我们的模板文件。根据以下截图创建 `[ProjectRoot]/src/main/resources/views`
    文件夹：
- en: '![Getting ready](img/9530OS_10_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/9530OS_10_01.jpg)'
- en: How to do it…
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Enable the `Views` bundle by adding it to your application''s bootstrap in
    the `#initialize()` method of the `App` class. During the initialization phase
    (that is, when the `#initialize()` method is executed), we can use the bootstrap
    object to register additional modules with our application, such as bundles or
    commands. This has to be done before the service is actually started (that is,
    before the `#run()` method gets called). You will need to import `io.dropwizard.views.ViewBundle`:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `App` 类的 `#initialize()` 方法中将 `Views` 包添加到应用程序的引导中，启用 `Views` 包。在初始化阶段（即
    `#initialize()` 方法执行时），我们可以使用引导对象将额外的模块注册到我们的应用程序中，例如包或命令。这必须在服务实际启动之前完成（即在 `#run()`
    方法被调用之前）。您需要导入 `io.dropwizard.views.ViewBundle`：
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new package called `com.dwbook.phonebook.views` with the `ContactView`
    class in it. The class must extend `View` and its constructor will expect a `Contact`
    instance. Also, you must call the superclass''s constructor specifying the template
    file for this class (in this case, `contact.mustache`, which is stored in the
    directory we created before). You can reference the `view` file using an absolute
    path, where the root is the `[ProjectRoot]/src/main/resources/views` folder. A
    getter for the contact object is needed so that it can be accessed by the template
    engine:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `com.dwbook.phonebook.views` 的新包，并在其中创建 `ContactView` 类。该类必须扩展 `View`，其构造函数将期望一个
    `Contact` 实例。您还必须调用超类构造函数，指定此类的模板文件（在这种情况下，`contact.mustache`，它存储在我们之前创建的目录中）。您可以使用绝对路径引用
    `view` 文件，其中根目录是 `[ProjectRoot]/src/main/resources/views` 文件夹。需要一个获取联系人对象的 getter，以便它可以由模板引擎访问：
- en: '[PRE2]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s create our template, `contact.moustache`, which will be a plain
    HTML file that renders a table with a contact''s details. Remember to store it
    inside the `views` folder we created at the beginning. Take a look at the following
    code snippet:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的模板，`contact.moustache`，它将是一个纯 HTML 文件，用于渲染一个包含联系人详细信息的表格。请记住将其存储在我们最初创建的
    `views` 文件夹中。看看下面的代码片段：
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Mustache tags, that is, the double-curly-braces-wrapped text, will be replaced
    with the actual values of the contact object's properties on runtime automatically.
    Mustache provides many tag types that you can use in your template, such as `conditionals`
    and `loops`. You may refer to [http://mustache.github.io/mustache.5.html](http://mustache.github.io/mustache.5.html)
    for detailed information about Mustache's tag types and advanced usage.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mustache 标签，即双大括号包裹的文本，将在运行时自动替换为联系人对象属性的值。Mustache 提供了许多可以在模板中使用的标签类型，例如 `条件`
    和 `循环`。您可以参考 [http://mustache.github.io/mustache.5.html](http://mustache.github.io/mustache.5.html)
    获取关于 Mustache 标签类型和高级使用的详细信息。
- en: 'Let''s modify the `ClientResource` class now by changing the `@Produces` annotation
    so that it uses the `View` class to generate HTML instead of plain text:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在修改 `ClientResource` 类，通过更改 `@Produces` 注解，使其使用 `View` 类生成 HTML 而不是纯文本：
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Modify the `#showContact` method so that it returns a `ContactView` instance
    initialized with the contact representation fetched using the Jersey client. Import
    `com.dwbook.phonebook.views.ContactView` first:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `#showContact` 方法，使其返回一个使用通过 Jersey 客户端获取的联系人表示初始化的 `ContactView` 实例。首先导入
    `com.dwbook.phonebook.views.ContactView`：
- en: '[PRE5]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s test the UI. Rebuild the application, run it, and point your browser
    to `http://localhost:8080/client/showContact?id=2`. Instead of seeing the plain
    text response of the client, we now see an HTML table being rendered with the
    details of the contact with an ID equal to 2, as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试UI。重新构建应用程序，运行它，并将您的浏览器指向`http://localhost:8080/client/showContact?id=2`。现在，我们看到的不是客户端的纯文本响应，而是一个HTML表格，显示了ID等于2的联系人详细信息，如下面的截图所示：
- en: '![How it works…](img/9530OS_10_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/9530OS_10_02.jpg)'
- en: When we access the client's URL, it fetches the data by calling the appropriate
    service. The data is then passed as a `Contact` instance to the `ContactView`
    class that extends View, which uses the template engine to parse the designated
    template file, `contact.mustache`, and generate the HTML markup. The file extension
    indicates the template engine that shall be used.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问客户端的URL时，它会通过调用适当的服务来获取数据。然后，数据作为`Contact`实例传递给扩展了View的`ContactView`类，该类使用模板引擎解析指定的模板文件`contact.mustache`，并生成HTML标记。文件扩展名指示应使用的模板引擎。
- en: There's more…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Mustache is not the only template engine supported by Dropwizard; there's also
    Freemarker. We chose Mustache over Freemarker to demonstrate Dropwizard's template
    capabilities since Mustache is a more logicless, agnostic programming language,
    and has implementations available for many programming languages.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Mustache不是唯一由Dropwizard支持的模板引擎；还有Freemarker。我们选择Mustache而不是Freemarker来展示Dropwizard的模板功能，因为Mustache是一种更无逻辑、更中立的编程语言，并且为许多编程语言提供了实现。
- en: On the other hand, Freemarker is Java-bound, has more programming capabilities,
    and can perform more complex tasks such as sanitizing the produced output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Freemarker与Java绑定，具有更多的编程能力，并且可以执行更复杂的任务，例如清理生成的输出。
- en: 'If we were using Freemarker instead of Mustache for the previous example, the
    main table of the template would be the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在上一个示例中使用Freemarker而不是Mustache，模板的主要表格将如下所示：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, the syntax of both template engines is similar. Note that while
    Mustache escapes variables by default, with Freemarker, you have to instruct the
    processor to sanitize the output by suffixing the variables with `?html`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这两个模板引擎的语法相似。请注意，虽然Mustache默认会转义变量，但在Freemarker中，您必须指示处理器通过在变量后添加`?html`后缀来清理输出。
- en: Serving static assets
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供静态资源
- en: There are cases where along with the HTML-based views, you need to serve static
    assets, such as CSS stylesheets, JavaScript files, or any other file that may
    be used by your application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，除了基于HTML的视图外，您还需要提供静态资源，例如CSS样式表、JavaScript文件或任何可能由您的应用程序使用的其他文件。
- en: To do so, you may add an `AssetsBundle` instance on the `#bootstrap()` method,
    specifying the folder from where you can serve static files and also the URI that
    this folder will be mapped to. We will first need to import `io.dropwizard.assets.AssetsBundle`
    and modify the `pom.xml` file accordingly, declaring a dependency to the artifact
    dropwizard-assets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，您可以在`#bootstrap()`方法上添加一个`AssetsBundle`实例，指定可以提供静态文件的文件夹以及该文件夹将被映射到的URI。我们首先需要导入`io.dropwizard.assets.AssetsBundle`并相应地修改`pom.xml`文件，声明对dropwizard-assets组件的依赖。
- en: For instance, if you want to serve a static stylesheet file named `stylesheet.css`,
    you'll have to store it under `src/main/java/resources/assets`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想提供名为`stylesheet.css`的静态样式表文件，你必须将其存储在`src/main/java/resources/assets`下。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `stylesheet.css` file would now be accessible from the `http://localhost:8080/assets/stylesheet.css`
    URL.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`stylesheet.css`文件现在可以通过`http://localhost:8080/assets/stylesheet.css` URL访问。'
