- en: '*Chapter 17*: Multitenancy in jOOQ'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：jOOQ中的多租户'
- en: 'Sometimes, our applications need to operate in a multitenant environment, that
    is, in an environment that operates on multiple tenants (different databases,
    different tables, or generally speaking, different instances that are logically
    isolated, but physically integrated). In this chapter, we will cover some common
    use cases of integrating jOOQ in a multitenant environment based on the following
    agenda:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们的应用程序需要在多租户环境中运行，即在一个操作多个租户（不同的数据库、不同的表，或者更一般地说，逻辑上隔离但物理上集成的不同实例）的环境中。在本章中，我们将根据以下议程介绍jOOQ在多租户环境中的常见用例：
- en: Connecting to a separate database per role/login via the `RenderMapping` API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`RenderMapping` API连接到每个角色/登录的单独数据库
- en: Connecting to a separate database per role/login via a connection switch
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接切换连接到每个角色/登录的单独数据库
- en: Generating code for two schemas of the same vendor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为同一供应商的两个模式生成代码
- en: Generating code for two schemas of different vendors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同供应商的两个模式生成代码
- en: Let's get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter17](https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter17).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub上找到，地址为[https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter17](https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter17)。
- en: Connecting to a separate database per role/login via the RenderMapping API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过`RenderMapping` API连接到每个角色/登录的单独数据库
- en: Connecting to a separate database per role/login is a classical use case of
    multitenancy. Commonly, you have a pillar database (let's call it the `development`
    database) and several other databases with the same schema (let's call them the
    `stage` database and the `test` database). All three databases belong to the same
    vendor (here, MySQL) and have the same schema, but they hold data for different
    roles, accounts, organizations, partners, and so on of the application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个角色/登录连接到单独的数据库是多租户的经典用例。通常，你有一个主数据库（让我们称它为`development`数据库）和几个具有相同模式的其它数据库（让我们称它们为`stage`数据库和`test`数据库）。这三个数据库属于同一个供应商（在这里，MySQL）并且具有相同的模式，但它们存储着不同角色、账户、组织、合作伙伴等应用的数据。
- en: For simplicity, the `development` database has a single table named `product`.
    This database is used for generating jOOQ artifacts, but we want to execute the
    queries depending on the current role (currently logged in user) against the `stage`
    or `test` databases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，`development`数据库有一个名为`product`的单个表。这个数据库用于生成jOOQ工件，但我们希望根据当前角色（当前登录用户）在`stage`或`test`数据库上执行查询。
- en: 'The key to such implementation relies on juggling with the jOOQ `RenderMapping`
    API. jOOQ allows us to specify at runtime an input schema (for instance, `development`)
    and an output schema (for instance, `stage`), and, in queries, it will render
    the output schema. The climax of the code relies on these settings, as you can
    see here (the authentication is specific to the Spring Security API):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现的关键在于对jOOQ `RenderMapping` API的巧妙运用。jOOQ允许我们在运行时指定输入模式（例如，`development`）和输出模式（例如，`stage`），在查询中，它将渲染输出模式。代码的高潮在于这些设置，正如你所见（认证特定于Spring
    Security API）：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Depending on the role of the currently authenticated user, jOOQ renders the
    expected database name (for instance, `` `stage`.`product` `` or `` `test`.`product`
    ``). Basically, each user has a role (for instance, `ROLE_STAGE` or `ROLE_TEST`;
    for simplicity, a user has a single role), and we extract the output database
    name by removing `ROLE_` and lowercase the remaining text; by convention, the
    extracted text represents the name of the database as well. Of course, you can
    use the username, organization name, or whatever convention makes sense in your
    case.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据当前认证用户的角色，jOOQ渲染预期的数据库名称（例如，`` `stage`.`product` ``或`` `test`.`product` ``）。基本上，每个用户都有一个角色（例如，`ROLE_STAGE`或`ROLE_TEST`；为了简单起见，用户只有一个角色），我们通过移除`ROLE_`并将剩余文本转换为小写来提取输出数据库名称；按照惯例，提取的文本代表数据库名称。当然，你可以使用用户名、组织名称或任何适合你情况的约定。
- en: You can test this example in the application named *MT* for MySQL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在名为*MT*的MySQL应用程序中测试这个示例。
- en: The `withInput()` method takes the complete name of the input schema. If you
    want to match the name of the input schema against a regular expression, then
    instead of `withInput()`, use `withInputExpression(Pattern.compile("reg_exp"))`
    (for instance, `("development_(.*)")`).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`withInput()`方法接受输入模式的完整名称。如果你想将输入模式的名称与正则表达式匹配，那么不是使用`withInput()`，而是使用`withInputExpression(Pattern.compile("reg_exp"))`（例如，`("development_(.*)")`）。'
- en: 'If you are in a database that supports catalogs (for instance, SQL Server),
    then simply use `MappedCatalog()` and `withCatalogs()`, as in the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个支持目录的数据库中（例如，SQL Server），那么只需使用`MappedCatalog()`和`withCatalogs()`，如下面的示例所示：
- en: '[PRE14]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you don''t need a runtime schema and instead need to hardwire mappings at
    code generation time (jOOQ will always render at runtime, conforming to these
    settings), then, for Maven, use the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要运行时模式，而是需要在代码生成时硬编码映射（jOOQ始终在运行时渲染，符合这些设置），那么对于Maven，使用以下内容：
- en: '[PRE21]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For Gradle, use the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Gradle，使用以下内容：
- en: '[PRE29]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Use the following for programmatic:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容进行程序化操作：
- en: '[PRE37]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can see such an example in *MTM* for MySQL. As you'll see, all accounts/roles
    act against the database that was hardwired at code generation time (the `stage`
    database).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*MTM*中看到这样的示例，用于MySQL。正如你所看到的，所有账户/角色都针对在代码生成时硬编码的数据库（`stage`数据库）进行操作。
- en: 'If you are using a database that supports catalogs (for instance, SQL Server),
    then simply rely on `<catalogs>`, `<catalog>`, `<inputCatalog>`, and `<outputCatalog>`.
    For Maven, use the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是支持目录的数据库（例如，SQL Server），那么只需简单地依赖`<catalogs>`、`<catalog>`、`<inputCatalog>`和`<outputCatalog>`。对于Maven，使用以下内容：
- en: '[PRE47]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'For Gradle, use the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Gradle，使用以下内容：
- en: '[PRE58]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'For programmatic, use the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序化操作，使用以下内容：
- en: '[PRE68]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'So far, the `development` database has a single table named `product`. This
    table has the same name in the `stage` and `test` databases but let''s assume
    that we decide to call it `product_dev` in the `development` database, `product_stage`
    in the `stage` database, and `product_test` in the `test` database. In this case,
    even if jOOQ renders the database name per role correctly, it doesn''t render
    the table''s names correctly. Fortunately, jOOQ allows us to configure this aspect
    via `withTables()` and `MappedTable()`, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`development`数据库有一个名为`product`的单个表。这个表在`stage`和`test`数据库中也有相同的名称，但让我们假设我们决定在`development`数据库中将其称为`product_dev`，在`stage`数据库中称为`product_stage`，在`test`数据库中称为`product_test`。在这种情况下，即使jOOQ正确渲染了每个角色的数据库名称，它也没有正确渲染表名。幸运的是，jOOQ允许我们通过`withTables()`和`MappedTable()`配置这个方面，如下所示：
- en: '[PRE80]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: You can check out this example in the application named *MTT* for MySQL.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在名为*MTT*的应用程序中查看这个示例，用于MySQL。
- en: Connecting to a separate database per role/login via a connection switch
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过连接切换每个角色/登录的独立数据库
- en: Another quick solution for connecting to a separate database per role/login
    consists of switching to the proper connection at runtime. In order to accomplish
    this task, we have to suppress the jOOQ default behavior of rendering the schema/catalog
    name. This way, we don't risk connecting to database `A` but get database `B`
    rendered in front of our tables, and so on. In other words, we need unqualified
    names.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个快速连接到每个角色/登录的独立数据库的解决方案是在运行时切换到适当的连接。为了完成这个任务，我们必须抑制jOOQ默认渲染模式/目录名称的行为。这样，我们就不必担心连接到数据库`A`，而是让数据库`B`在我们的表前显示，依此类推。换句话说，我们需要无限定名称。
- en: 'jOOQ allows us to turn off rendering the schema/catalog name via the `withRenderSchema(false)`
    and `withRenderCatalog(false)` settings. The following example connects to the
    database having the same name as the role of the logged in user and suppresses
    rendering the schema/catalog names:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: jOOQ允许我们通过`withRenderSchema(false)`和`withRenderCatalog(false)`设置关闭渲染模式/目录名称。以下示例连接到与登录用户角色同名的数据库，并抑制渲染模式/目录名称：
- en: '[PRE92]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: You can check out this example in the application named *MTC* for MySQL.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在名为*MTC*的应用程序中查看这个示例，用于MySQL。
- en: 'Alternatively, we can instruct jOOQ to remove any schema references from the
    generated code via the `outputSchemaToDefault` flag. For Maven, use the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过`outputSchemaToDefault`标志来指示jOOQ从生成的代码中移除任何模式引用。对于Maven，使用以下内容：
- en: '[PRE110]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'For Gradle, use the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Gradle，使用以下内容：
- en: '[PRE111]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Since there are no more schema references in the generated code, the generated
    classes can run on all your schemas:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成的代码中没有更多的模式引用，生成的类可以在所有你的模式上运行：
- en: '[PRE112]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: You can test this example in the application named *MTCO* for MySQL.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在名为*MTCO*的应用程序中测试这个示例，用于MySQL。
- en: Generating code for two schemas of the same vendor
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为同一供应商的两个架构方案生成代码
- en: Consider two schemas of the same vendor named `db1` and `db2`. In the first
    schema (`db1`), we have a table named `productline`, and in the second schema
    (`db2`), we have a table named `product`. Our goal is to generate the jOOQ artifacts
    (to run the jOOQ Code Generator) for these two schemas of the same vendor (here,
    MySQL) and to execute queries against one or another, and even join these two
    tables.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个名为`db1`和`db2`的同一供应商的架构方案。在第一个架构（`db1`）中，我们有一个名为`productline`的表，在第二个架构（`db2`）中，我们有一个名为`product`的表。我们的目标是生成这两个相同供应商架构的jOOQ工件（以运行jOOQ代码生成器），并对其中一个或另一个执行查询，甚至连接这两个表。
- en: 'Basically, as long as we don''t specify any input schema, jOOQ generates code
    for all the schemas it can find. But since we want to instruct jOOQ to work only
    on the `db1` and `db2` schemas, we can do it as follows (here, for Maven):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，只要我们不指定任何输入架构，jOOQ就会为它找到的所有架构生成代码。但因为我们想指示jOOQ只在工作在`db1`和`db2`架构上，我们可以这样做（这里针对Maven）：
- en: '[PRE120]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: I am sure you have enough experience now to intuit how to write this for Gradle
    or programmatic, so I'll skip those examples.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您现在有足够的经验来直观地了解如何为Gradle或程序编写这些代码，所以我会跳过这些示例。
- en: 'Once we run the jOOQ Code Generator, we are ready to execute queries, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行了jOOQ代码生成器，我们就可以执行查询，如下所示：
- en: '[PRE130]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Or, here is a join between `PRODUCTLINE` and `PRODUCT`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，这里是一个`PRODUCTLINE`和`PRODUCT`的连接：
- en: '[PRE132]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '`DB1` and `DB2` were statically imported, as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`DB1`和`DB2`被静态导入，如下所示：'
- en: '[PRE140]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: The complete example is available in the application named *MTJ* for MySQL.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可在名为*MTJ*的应用程序中找到，适用于MySQL。
- en: Generating code for two schemas of different vendors
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为两个不同供应商的架构方案生成代码
- en: Consider two schemas of different vendors – for instance, our `classicmodels`
    schema for MySQL and PostgreSQL. Our goal is to generate the jOOQ artifacts for
    both schemas and execute queries against one or another.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个不同供应商的架构方案——例如，我们为MySQL和PostgreSQL设计的`classicmodels`架构。我们的目标是生成这两个架构的jOOQ工件，并对其中一个或另一个执行查询。
- en: 'Considering a Maven-based application, we can accomplish this task by using
    two `<execution>` entries, for the `flyway-maven-plugin` plugin and the `jooq-codegen-maven`
    plugin. Here is the skeleton code for `jooq-codegen-maven` (the complete code
    is available in the bundled code):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个基于Maven的应用程序，我们可以通过使用两个`<execution>`条目来完成这个任务，一个是`flyway-maven-plugin`插件，另一个是`jooq-codegen-maven`插件。以下是`jooq-codegen-maven`的骨架代码（完整的代码可在捆绑的代码中找到）：
- en: '[PRE142]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Next, jOOQ generates artifacts for both vendors and we can switch between connections
    and tables, as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，jOOQ为这两个供应商生成工件，我们可以在这两个连接和表之间切换，如下所示：
- en: '[PRE168]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'Or, considering that we have already programmatically configured our `DataSource`
    objects, we can configure two `DSLContext` as well (the complete code is available
    in the bundled code):'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，考虑到我们已经程序化配置了我们的`DataSource`对象，我们也可以配置两个`DSLContext`（完整的代码可在捆绑的代码中找到）：
- en: '[PRE179]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'You can also inject these two `DSLContext` and use the one you want:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以注入这两个`DSLContext`并使用您想要的任何一个：
- en: '[PRE194]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: The complete code is named *MT2DB*. If you want to generate the artifacts for
    only one vendor depending on the active profile, then you'll love the *MP* application.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码命名为*MT2DB*。如果您只想根据活动配置文件生成一个供应商的工件，那么您会喜欢*MP*应用程序。
- en: Summary
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Multitenancy is not a regular task but it is good to know that jOOQ is quite
    versatile and allows us to configure multiple databases/schemas in seconds. Moreover,
    as you just saw, the jOOQ + Spring Boot combo is a perfect match for accomplishing
    multitenancy tasks.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户不是一个常规任务，但了解jOOQ非常灵活，允许我们在几秒钟内配置多个数据库/架构是很好的。此外，正如您刚才看到的，jOOQ + Spring Boot组合是完成多租户任务的完美匹配。
- en: In the next chapter, we talk about jOOQ SPI.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论jOOQ SPI。
