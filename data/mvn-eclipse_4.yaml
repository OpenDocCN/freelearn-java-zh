- en: Chapter 4. Building and Running a Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。构建和运行项目
- en: 'Congratulations! You are halfway through the book. As discussed in earlier
    chapters, Maven follows convention over configuration; this implies there is a
    default build mechanism in place. The build mechanism, often termed as the **build
    lifecycle**, forms a sequence of steps grouped together in phases (also known
    as **stages)**. Each **phase** is accompanied with a set of goals that define
    the unit of task. In this chapter, we will look at three standard lifecycles—clean,
    default, and site—and get acquainted with other common lifecycles. You will also
    get to know about building and running the `hello-project`, which was created
    in [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating and Importing
    Projects"), *Creating and Importing Projects*. This chapter covers the following
    sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了这本书的一半。正如前面章节所讨论的，Maven遵循约定优于配置；这意味着有一个默认的构建机制。构建机制，通常称为**构建生命周期**，形成了一系列步骤，这些步骤在阶段（也称为**阶段**）中分组。每个**阶段**都伴随着一组目标，这些目标定义了任务的单元。在本章中，我们将探讨三个标准生命周期——清理、默认和站点——并熟悉其他常见生命周期。你还将了解如何构建和运行在[第3章](part0024_split_000.html#page
    "第3章。创建和导入项目")中创建的`hello-project`，即*创建和导入项目*。本章包括以下部分：
- en: Build lifecycle
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建生命周期
- en: Default lifecycle
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认生命周期
- en: Clean lifecycle
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理生命周期
- en: Site lifecycle
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点生命周期
- en: Package-specific lifecycle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包特定生命周期
- en: The Maven console
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven控制台
- en: Building and packaging projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和打包项目
- en: Running hello-project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行hello-project
- en: The build lifecycle
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建生命周期
- en: 'Building a Maven project results in the execution of set goals grouped in phases.
    Though there is a default build cycle of Maven, it can be customized to suit our
    needs; that''s the beauty Maven inherits. To ascertain, it is essential to have
    knowledge of the build''s lifecycle. Essentially, the following are the three
    standard lifecycles in Maven:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Maven项目会导致在阶段中分组的目标执行。尽管Maven有一个默认的构建周期，但它可以根据我们的需求进行自定义；这就是Maven所继承的美。为了确定这一点，了解构建的生命周期是至关重要的。本质上，以下是在Maven中的三个标准生命周期：
- en: Default
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认
- en: Clean
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Site
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点
- en: The default lifecycle
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认生命周期
- en: The default lifecycle handles the build of the project and its deployment. It
    is the primary lifecycle of Maven and is also known as the build lifecycle. In
    general, it provides the build process model for Java applications. There are
    23 phases for the default lifecycle that starts with validation and ends with
    deploy. For details on all 23 phases, please refer to [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认生命周期处理项目的构建和部署。它是Maven的主要生命周期，也称为构建生命周期。一般来说，它为Java应用程序提供构建过程模型。默认生命周期有23个阶段，从验证开始，以部署结束。有关所有23个阶段的详细信息，请参阅[http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference)。
- en: 'However, here we will see some of the phases and the default associated goals
    that need attention for common application development, which are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这里我们将看到一些阶段以及与常见应用程序开发相关的默认目标，这些目标如下：
- en: '| Lifecycle phases | Description | Plugin:goals |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 生命周期阶段 | 描述 | 插件：目标 |'
- en: '| --- | --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| validate | This validates that the project is correct and contains all the
    necessary information to perform the build operation | - |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 验证 | 这验证项目是否正确，并包含执行构建操作所需的所有必要信息 | - |'
- en: '| compile | This compiles the source code | `compiler:compile` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 编译 | 这将编译源代码 | `compiler:compile` |'
- en: '| test-compile | This compiles the test source code in the test destination
    directory | `compiler:testCompile` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 测试编译 | 这将在测试目标目录中编译测试源代码 | `compiler:testCompile` |'
- en: '| test | This runs the test using suitable unit testing framework as configured
    in the `pom` file | `surefire:test` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 测试 | 使用在`pom`文件中配置的合适的单元测试框架运行测试 | `surefire:test` |'
- en: '| package | This packages the compiled source code in the corresponding distributable
    format such as JAR, WAR, EAR, and so on | `jar:jar` (for JAR packaging) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 打包 | 这将编译后的源代码打包到相应的可分发格式，如JAR、WAR、EAR等 | `jar:jar`（用于JAR打包）|'
- en: '| install | This installs the package in the local repository, which can act
    as a dependency for other projects | `install:install` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 安装 | 这将在本地仓库中安装包，它可以作为其他项目的依赖项 | `install:install` |'
- en: '| deploy | This copies the final package to a remote repository to share with
    other developers and projects | `deploy:deploy` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| deploy | 此操作将最终包复制到远程仓库，以便与其他开发者和项目共享 | `deploy:deploy` |'
- en: The clean lifecycle
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清洁生命周期
- en: 'The clean lifecycle is the simplest lifecycle in Maven, and it consists of
    the following phases:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁生命周期是 Maven 中最简单的生命周期，它由以下阶段组成：
- en: '**pre-clean**: This phase executes the process needed before a project''s clean
    up'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pre-clean**：此阶段在项目清理前执行所需的过程'
- en: '**clean**: This phase removes all files built by an earlier `build` (the `target`
    directory)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**clean**：此阶段删除由早期 `build` (即 `target` 目录) 生成的所有文件'
- en: '**post-clean**: This phase executes the process required after a project''s
    cleanup'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**post-clean**：此阶段在项目清理后执行所需的过程'
- en: 'Out of these phases, the one that gathers our interest is the **clean** phase.
    The Maven "`clean:clean`" goal is bound to the clean phase. It cleans the project''s
    `build` (usually `target`) directory. Executing any one phase result in execution
    of all phases up to it and the phase itself, for example, a call of a clean phase
    would execute the first pre-clean phase and then the clean phase; similarly, a
    call of post-clean results in the calling of pre-clean, clean, and post-clean
    phases. The following diagram illustrates the execution of the clean lifecycle
    phases (reference: the Apache Maven site):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些阶段中，引起我们兴趣的是 **clean** 阶段。Maven 的 "`clean:clean`" 目标绑定到清洁阶段。它清理项目的 `build`
    (通常是 `target`) 目录。执行任何阶段都会导致执行该阶段及其之前的所有阶段，例如，调用清洁阶段会执行第一个 pre-clean 阶段然后是清洁阶段；同样，调用
    post-clean 会导致调用 pre-clean、clean 和 post-clean 阶段。以下图表说明了清洁生命周期阶段的执行（参考：Apache
    Maven 网站）：
- en: '![The clean lifecycle](img/00040.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![清洁生命周期](img/00040.jpeg)'
- en: 'We can bind other goals to the phases of the clean lifecycle. Suppose we want
    to echo some message on the pre-clean phase; we can achieve this by binding the
    `maven-antrun-plugin:run` goal to this phase, which can be done as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其他目标绑定到清洁生命周期的阶段。假设我们想在预清洁阶段输出一些消息；我们可以通过将 `maven-antrun-plugin:run` 目标绑定到该阶段来实现，如下所示：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The site lifecycle
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点生命周期
- en: 'The site lifecycle handles the creation of the project site documentation.
    The phases of a site lifecycle are shown in the following diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 站点生命周期处理项目站点文档的创建。站点生命周期的阶段如下图所示：
- en: '![The site lifecycle](img/00041.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![站点生命周期](img/00041.jpeg)'
- en: 'The following table describes the site lifecycle phases in the order of execution.
    (reference: Apache Maven website)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了站点生命周期阶段按执行顺序。 (参考：Apache Maven 网站)
- en: '| Phases | Description |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| pre-site | This phase executes processes needed before the generation of
    a project site. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| pre-site | 此阶段在生成项目站点之前执行所需的过程。 |'
- en: '| site | This phase generates documentation of a project site |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| site | 此阶段生成项目站点的文档 |'
- en: '| post-site | This phase executes a process required after a site''s generation
    and to prepare for site deployment |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| post-site | 此阶段在生成站点后执行所需的过程，并为站点部署做准备 |'
- en: '| site-deploy | This phase deploys the generated site documentation to the
    specified web server |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| site-deploy | 此阶段将生成的站点文档部署到指定的 Web 服务器 |'
- en: Executing any one phase results in the execution of all phases up to it and
    the phase itself. For example, calling post-site results in the execution of pre-site,
    site, and post-site phases. Similar to the clean lifecycle, we can bind other
    goals to the site's lifecycle.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 执行任何阶段都会导致执行该阶段及其之前的所有阶段。例如，调用 post-site 会执行 pre-site、site 和 post-site 阶段。类似于清洁生命周期，我们可以在站点的生命周期中绑定其他目标。
- en: The package-specific lifecycle
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包特定的生命周期
- en: 'Each type of packaging has its own set of default goals. The default goals
    for JAR packaging is different from WAR packaging. Maven provides a lifecycle
    for the following built-in packaging types:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每种打包类型都有自己的默认目标。JAR 打包的默认目标与 WAR 打包不同。Maven 为以下内置打包类型提供生命周期：
- en: JAR
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAR
- en: WAR
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAR
- en: EAR
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EAR
- en: POM
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POM
- en: EJB
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EJB
- en: Maven plugins
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 插件
- en: The lifecycle and goal binding for WAR packaging is described here. For other
    packaging lifecycle and goal binding, please refer to [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述了 WAR 打包的生命周期和目标绑定。对于其他打包的生命周期和目标绑定，请参阅 [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings)。
- en: '| Phases | plugin:goals |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 插件目标 |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| process-resources | `resources:resources` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 处理资源 | `resources:resources` |'
- en: '| compile | `compiler:compile` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 编译 | `compiler:compile` |'
- en: '| process-test-resources | `resources:testResources` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 处理测试资源 | `resources:testResources` |'
- en: '| test-compile | `compiler:testCompile` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 测试编译 | `compiler:testCompile` |'
- en: '| test | `surefire:test` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 测试 | `surefire:test` |'
- en: '| package | `war:war` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 打包 | `war:war` |'
- en: '| install | `install:install` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 安装 | `install:install` |'
- en: '| deploy | `deploy:deploy` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 部署 | `deploy:deploy` |'
- en: The Maven console
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 控制台
- en: 'Before we get our hands dirty with building and executing Maven projects, we
    need to enable the Maven console. The Maven console can be enabled with the following
    steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们动手构建和执行 Maven 项目之前，我们需要启用 Maven 控制台。可以通过以下步骤启用 Maven 控制台：
- en: Navigate to **Window** | **Show View** | **Console**. This shows the console
    view.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **窗口** | **显示视图** | **控制台**。这显示了控制台视图。
- en: Next, click on the little arrow of **Open Console** as shown in the following
    screen and click on **Maven Console**:![The Maven console](img/00042.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击以下屏幕中所示的 **打开控制台** 小箭头，然后点击 **Maven 控制台**：![Maven 控制台](img/00042.jpeg)
- en: The Maven console shows all the output of the Maven build process. It shows
    all the details that Maven processes and is really helpful in getting to know
    what is happening underneath and you can also see the debug messages.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 控制台显示了 Maven 构建过程的全部输出。它显示了 Maven 处理的所有详细信息，这对于了解底层发生的事情非常有帮助，您还可以看到调试信息。
- en: Building and packaging projects
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 和打包项目
- en: 'Building and packaging Maven projects needs execution of required phases, which
    we discussed in the preceding sections. Let''s build and package `hello-project`
    from [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating and Importing
    Projects"), *Creating and Importing Projects*, which we generated using archetypes.
    In the *Default Lifecycle* section, the phase package executes the following phases
    in order: compile, test, and package phases. Now, we will see how to invoke the
    package phase from m2eclipse. The following steps will ascertain this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 和打包 Maven 项目需要执行所需阶段，我们已在前面章节中讨论过。让我们从 [第 3 章](part0024_split_000.html#page
    "第 3 章。创建和导入项目")，*创建和导入项目*，其中我们使用原型生成，构建和打包 `hello-project`。在 *默认生命周期* 部分，打包阶段按以下顺序执行以下阶段：编译、测试和打包阶段。现在，我们将看到如何从
    m2eclipse 调用打包阶段。以下步骤将确保这一点：
- en: Right-click on `hello-project` and select **Run As**. Click on **Run Configurations**
    and the **Run Configurations** window will appear.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `hello-project` 并选择 **运行**。点击 **运行配置**，**运行配置** 窗口将出现。
- en: Right-click on **Maven Build** and choose **New** as shown in the following
    screenshot:![Building and packaging projects](img/00043.jpeg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **Maven 构建** 并选择 **新建**，如图所示：![构建和打包项目](img/00043.jpeg)
- en: Once the launch configurations window appears, fill in the details as shown
    in the following screenshot. For **Base Directory**, click on **Browse Workspace...**
    and choose `hello-project` from the pop-up list:![Building and packaging projects](img/00044.jpeg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦出现启动配置窗口，填写如图所示的详细信息。对于 **基本目录**，点击 **浏览工作区...** 并从弹出列表中选择 `hello-project`：
- en: Next, click on **Apply** and close it using the **Close** button.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **应用** 并使用 **关闭** 按钮关闭它。
- en: Again right-click on the project and select **Run As**, and click on **Maven
    build** as shown in the following screenshot:![Building and packaging projects](img/00045.jpeg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次右键点击项目并选择 **运行**，然后点击 **Maven 构建**，如图所示：![构建和打包项目](img/00045.jpeg)
- en: A window, as shown in the following screenshot, will appear with all the run
    configurations available:![Building and packaging projects](img/00046.jpeg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个窗口，如图所示，其中包含所有可用的运行配置：![构建和打包项目](img/00046.jpeg)
- en: Choose the **hello-package** launch configuration and click on **OK**. It should
    compile, run tests, generate site documentation, and package in the `target` directory,
    as shown in following screenshot:![Building and packaging projects](img/00047.jpeg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **hello-package** 启动配置并点击 **确定**。它应该编译、运行测试、生成站点文档并在 `target` 目录中打包，如图所示：![构建和打包项目](img/00047.jpeg)
- en: Running hello-project
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 hello-project
- en: Since `hello-project` from the previous chapter is a Java application, running
    it is similar to any other Java application. Right-click on the project, select
    **Run As**, and click on **Java Application**, select the main JAVA class, and
    click on **OK**. It will print `Hello World!` in the console.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上一章中的 `hello-project` 是一个 Java 应用程序，运行它与其他 Java 应用程序类似。右键单击项目，选择**运行方式**，然后点击**Java
    应用程序**，选择主 JAVA 类，并点击**确定**。它将在控制台打印 `Hello World!`。
- en: Running a web application requires some extra steps, which we will discuss in
    [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven Project"),
    *Spicing Up a Maven Project*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一个 Web 应用程序需要一些额外的步骤，我们将在[第 5 章](part0037_split_000.html#page "第 5 章。为 Maven
    项目增色")，*为 Maven 项目增色*中讨论这些步骤。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the clean, site, and default build lifecycles
    of the Maven project, and later used this knowledge to get the application to
    package and run.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Maven 项目的清洁、站点和默认构建生命周期，并随后使用这些知识使应用程序打包和运行。
- en: In the next chapter, we will build a web application and you will learn to customize
    the `pom` file to suit our needs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个 Web 应用程序，你将学习如何自定义 `pom` 文件以满足我们的需求。
