- en: Chapter 2. Running WildFly in Standalone Mode
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：以独立模式运行 WildFly
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Running WildFly from a custom configuration folder
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从自定义配置文件夹运行 WildFly
- en: Binding WildFly onto a custom port
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 WildFly 绑定到自定义端口
- en: Binding WildFly onto a custom IP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 WildFly 绑定到自定义 IP
- en: Configuring multiple WildFly instances to run on the same machine with different
    ports
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置多个 WildFly 实例在同一台机器上运行，具有不同的端口
- en: Configuring multiple WildFly instances to run on the same machine with different
    IPs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置多个 WildFly 实例在同一台机器上运行，具有不同的 IP 地址
- en: Managing applications using the deployments folder
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用部署文件夹管理应用程序
- en: Connecting to the CLI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到 CLI
- en: Checking the server-state via the CLI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 检查服务器状态
- en: Deploying an application via the CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 部署应用程序
- en: Undeploying an application via the CLI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 卸载应用程序
- en: Executing commands in batch mode via the CLI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 批量执行命令
- en: Reloading a server configuration via the CLI
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 重新加载服务器配置
- en: Shutting down and restarting an instance via the CLI
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 关闭和重新启动实例
- en: Suspending and resuming an instance via the CLI
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 暂停和恢复实例
- en: Backing up your configuration file via the CLI
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CLI 备份配置文件
- en: Introduction
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to manage WildFly running in the standalone
    mode. First we will discuss which profile fits our needs, and then we will cover
    how to run WildFly with a specific configuration file, navigate through the Web
    Console, and the CLI.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何管理以独立模式运行的 WildFly。首先，我们将讨论哪个配置文件符合我们的需求，然后我们将介绍如何使用特定的配置文件运行 WildFly、通过
    Web 控制台导航以及 CLI。
- en: You will also learn how to get multiple WildFly instances running on the same
    machine, both with different ports and IPs, in case you have only one network
    interface. You will learn how to connect to the CLI, retrieve server information,
    reload server configuration, and shut down, deploy, and undeploy an application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何在只有一个网络接口的情况下，在同一台机器上运行多个 WildFly 实例，这些实例具有不同的端口和 IP 地址。你将学习如何连接到 CLI、检索服务器信息、重新加载服务器配置以及关闭、部署和卸载应用程序。
- en: Running WildFly from a custom configuration folder
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从自定义配置文件夹运行 WildFly
- en: In this recipe, you will learn how to run WildFly from a custom configuration
    folder. This can be handy if you want to use the same WildFly installation folder,
    but run two or more WildFly instances with different configurations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何从自定义配置文件夹运行 WildFly。如果你想要使用相同的 WildFly 安装文件夹，但运行两个或更多具有不同配置的 WildFly
    实例，这可能会很有用。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: What you have to do is to just copy the `standalone` folder to a path of your
    choice.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要做的只是将 `standalone` 文件夹复制到你的选择路径。
- en: 'That''s it! Now just run WildFly as usual, specifying your configuration folder
    by passing the `-Djboss.server.base.dir` directive:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！现在只需像往常一样运行 WildFly，通过传递 `-Djboss.server.base.dir` 指令来指定你的配置文件夹：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: On specification of a different `jboss.server.base.dir` directory, WildFly tries
    to pick up the `standalone.xml` file from the expected folder. In fact, your configuration
    path has to maintain the same folder structure. WildFly lets you override different
    paths, in case you need to.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定不同的 `jboss.server.base.dir` 目录时，WildFly 尝试从预期的文件夹中获取 `standalone.xml` 文件。实际上，你的配置路径必须保持相同的文件夹结构。WildFly
    允许你覆盖不同的路径，如果你需要的话。
- en: 'The following is a table summarizing all such paths:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个总结所有此类路径的表格：
- en: '| Property name | Usage | Default value |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 用途 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `java.ext.dirs` | The JDK extension directory paths | Null |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `java.ext.dirs` | JDK 扩展目录路径 | Null |'
- en: '| `jboss.home.dir` | The root directory of the WildFly installation | Set by
    `standalone.sh to $JBOSS_HOME` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.home.dir` | WildFly 安装根目录 | 由 `standalone.sh` 设置为 `$JBOSS_HOME` |'
- en: '| `jboss.server.base.dir` | The base directory for server content | `jboss.home.dir/standalone`
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.base.dir` | 服务器内容的基目录 | `jboss.home.dir/standalone` |'
- en: '| `jboss.server.config.dir` | The base configuration directory | `jboss.server.base.dir/configuration`
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.config.dir` | 基配置目录 | `jboss.server.base.dir/configuration`
    |'
- en: '| `jboss.server.data.dir` | The directory used for persistent data file storage
    | `jboss.server.base.dir/data` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.data.dir` | 用于持久数据文件存储的目录 | `jboss.server.base.dir/data` |'
- en: '| `jboss.server.log.dir` | The directory containing the `server.log` file |
    `jboss.server.base.dir/log` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.log.dir` | 包含 `server.log` 文件的目录 | `jboss.server.base.dir/log`
    |'
- en: '| `jboss.server.temp.dir` | The directory used for temporary file storage |
    `jboss.server.base.dir/tmp` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.temp.dir` | 用于临时文件存储的目录 | `jboss.server.base.dir/tmp` |'
- en: '| `jboss.server.deploy.dir` | The directory used to store the deployed content
    | `jboss.server.data.dir/content` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.deploy.dir` | 用于存储已部署内容的目录 | `jboss.server.data.dir/content`
    |'
- en: There's more…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Furthermore, you can use a different configuration file by specifying it via
    the `--server-config` directive, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以通过指定`--server-config`指令来使用不同的配置文件，如下所示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Binding WildFly onto a custom port
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WildFly绑定到自定义端口
- en: Why would you bind WildFly onto a custom port? This is because you might have
    a different service running on the same IP:PORT (that is, another WildFly or JBoss
    instance, Tomcat, or GlassFish).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么要将WildFly绑定到自定义端口？这是因为你可能在同一IP:PORT上运行不同的服务（即另一个WildFly或JBoss实例、Tomcat或GlassFish）。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Just open your command line and launch your WildFly standalone instance as
    follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 只需打开你的命令行并按照以下方式启动你的WildFly独立实例：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you can change the port using either the Web Console or the CLI:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用Web控制台或CLI来更改端口号：
- en: Using the Web Console
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Web控制台
- en: 'Point your browser to the following address: `http://127.0.0.1:8080/console`.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的浏览器指向以下地址：`http://127.0.0.1:8080/console`。
- en: Log in by entering the credentials specified in [Chapter 1](ch01.html "Chapter 1. Welcome
    to WildFly!"), *Welcome to WildFly!* while adding the management user; we entered
    `wildfly` as the username and `cookbook.2015` as the password.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入[第1章](ch01.html "第1章。欢迎来到WildFly！")中指定的凭据登录，*欢迎来到WildFly!*在添加管理用户时；我们输入`wildfly`作为用户名，`cookbook.2015`作为密码。
- en: Select the **Configuration** tab and select from the menu on the left side under
    general configuration, the voice **Socket Binding**, and select **View** as shown
    in the following screenshot:![Using the Web Console](img/3744_02_01.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置**选项卡，然后在左侧的常规配置菜单中选择**Socket绑定**，并选择**查看**，如图所示：![使用Web控制台](img/3744_02_01.jpg)
- en: Select the `http` property and scroll down the page to edit the port number,
    as shown in the following screenshot:![Using the Web Console](img/3744_02_02.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`http`属性，然后滚动到页面底部编辑端口号，如图所示：![使用Web控制台](img/3744_02_02.jpg)
- en: Now, change the port number from `8080` to `9080` and click on the button labeled
    **Save**. You will be notified, but the GUI will denote that the update was successful
    and that a server reload is required to take advantage of the new changes.![Using
    the Web Console](img/3744_02_03.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将端口号从`8080`更改为`9080`，然后点击标有**保存**的按钮。你会收到通知，但GUI会显示更新成功，并且需要重新加载服务器才能利用新的更改。[使用Web控制台](img/3744_02_03.jpg)
- en: Go to the **Runtime** tab. You should see a button labeled **Reload**, click
    on it and confirm, as shown in the following screenshot:![Using the Web Console](img/3744_02_04.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**运行时**选项卡。你应该看到一个标有**重新加载**的按钮，点击它并确认，如图所示：![使用Web控制台](img/3744_02_04.jpg)
- en: 'Now open your Web Console using the new port number as follows: `http://localhost:9080/console`.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开你的Web控制台，使用新的端口号，如下所示：`http://localhost:9080/console`。
- en: Using the CLI
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用CLI
- en: 'In a different terminal, connect to the CLI and do as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的终端中，连接到CLI并按照以下步骤操作：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You are disconnected at the moment; type `connect` to connect to the server
    or `help` for the list of supported commands:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你目前处于断开连接状态；输入`connect`连接到服务器或输入`help`查看支持的命令列表：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There's more…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Actually there is another method to change the port number, which is by passing
    `standalone.sh`, a Java parameter (which starts with a capital "D") as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上还有另一种更改端口号的方法，即通过传递`standalone.sh`，一个Java参数（以大写字母"D"开头），如下所示：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will match the property named `http` specified in the `socket-binding`
    tag, for the attribute `port` in `standalone.xml`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配`standalone.xml`中`socket-binding`标签指定的名为`http`的属性，对于`port`属性。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are coming from JBoss AS 5 or 6, you might have used `port-offset`, which
    still changes the port number by adding the offset to the default value (which
    is `8080`), but also changes other port numbers. In WildFly, it would also change
    the management port.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自JBoss AS 5或6，你可能已经使用了`port-offset`，它仍然通过将偏移量添加到默认值（即`8080`）来更改端口号，但也会更改其他端口号。在WildFly中，它还会更改管理端口。
- en: 'So we specify the port-offset to `1000` as follows :'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将端口号偏移量指定为`1000`，如下所示：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We would end up with WildFly listening on port 9080 (that is, 8080+1000) and
    the WildFly management port would be 10990 (that is, 9090+1000).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终将使WildFly监听在端口9080（即8080+1000）上，而WildFly的管理端口将是10990（即9090+1000）。
- en: Binding WildFly onto a custom IP
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WildFly绑定到自定义IP
- en: As for the port number, you might want to bind WildFly to an address different
    from the default one; for example, your public IP.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 至于端口号，你可能希望将WildFly绑定到与默认地址不同的地址；例如，你的公共IP地址。
- en: How to do it…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: To achieve this kind of customization, you can use both the Web Console and
    the CLI. Nevertheless, it is common to have SSH access to the servers running
    WildFly, or worse (better for security reasons), you might have SSH on different
    servers before landing on the WildFly one. In this case, you will only be able
    to use the CLI, that's why from now on we will mainly use the CLI to manage the
    server.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这种定制化，你可以同时使用Web控制台和CLI。然而，通常情况下，你会对运行WildFly的服务器有SSH访问权限，或者更糟（从安全角度来说更好），你可能在到达WildFly服务器之前，在不同的服务器上使用SSH。在这种情况下，你将只能使用CLI，这就是为什么从现在开始我们将主要使用CLI来管理服务器。
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Getting used to the CLI will give you a deeper knowledge of WildFly's configuration
    setting and it will be more mnemonic so you won't forget it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯使用命令行界面（CLI）将使你更深入地了解WildFly的配置设置，并且它将更加易于记忆，这样你就不会忘记它。
- en: 'Let''s change the IP address as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式更改IP地址：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: If you look at `standalone.xml`, you will notice properties within the following
    `{}` and preceded by the dollar sign `$`. This property will be replaced by the
    value of the namesake parameter, specified when launching the server with the
    script.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `standalone.xml`，你会注意到在以下 `{}` 内部的属性，并且以美元符号 `$` 开头。这个属性将由在启动服务器时指定的同名参数的值所替换。
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Furthermore, the same logic applies when you want to modify the management interface
    address. In that case, you will have to pass the `jboss.bind.address.management`
    parameter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你想要修改管理接口地址时，相同的逻辑也适用。在这种情况下，你将需要传递 `jboss.bind.address.management` 参数。
- en: By the way, both parameters can be specified with shortcuts, such as `-b 10.0.0.1`
    for the `jboss.bind.address` parameter, and `-bmanagement 10.0.0.1` for the `jboss.bind.address.management`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，这两个参数都可以使用快捷方式指定，例如，对于 `jboss.bind.address` 参数，可以使用 `-b 10.0.0.1`，而对于
    `jboss.bind.address.management`，可以使用 `-bmanagement 10.0.0.1`。
- en: Configuring multiple WildFly instances to run on the same machine with different
    ports
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置多个WildFly实例在同一台机器上以不同的端口运行
- en: In some cases, mostly because of architectural reasons, you may need to run
    multiple WildFly instances on a single server. You can do this by isolating each
    instance and giving it a different binding port.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，主要是因为架构原因，你可能在单个服务器上需要运行多个WildFly实例。你可以通过隔离每个实例并为其分配不同的绑定端口来实现这一点。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First of all, we need to create a standalone configuration for each instance
    that we want to set up and run. All we need to do is replicate the concept explained
    in the *Running WildFly from a custom configuration folder* recipe. Suppose we
    want two running nodes/instances, we use the following commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为每个我们想要设置和运行的实例创建一个独立配置。我们所需做的就是复制在 *从自定义配置文件夹运行WildFly* 菜单中解释的概念。假设我们想要两个运行节点/实例，我们使用以下命令：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we are ready to configure each instance.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好配置每个实例。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: To achieve such a requirement, you can use either of the methods explained earlier
    in the *Binding WildFly on a custom port* recipe. Let's take a look at each of
    them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这样的要求，你可以使用在 *在自定义端口绑定WildFly* 菜单中解释的任何一种方法。让我们看看它们中的每一个。
- en: Using jboss.http.port
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 jboss.http.port
- en: 'The first thing to try is to run the two WildFly instances by passing the parameter
    `jboss.http.port`, obviously with different values. Actually, one of them could
    have the default value:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先尝试的是通过传递参数 `jboss.http.port` 来运行两个WildFly实例，显然，它们的值是不同的。实际上，其中一个可能使用默认值：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we are going to run another WildFly instance by passing a different `jboss.http.port`
    parameter in a different terminal window:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在不同的终端窗口中通过传递不同的 `jboss.http.port` 参数来运行另一个WildFly实例：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ouch! Something went wrong!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！出错了！
- en: 'As you can see from the log, `http-interface` couldn''t start properly because
    of the **Address already in use** message. This is because we changed `jboss.http.port`,
    but not the analogous one for the management interface, which is `http-interface`
    defined in `standalone.xml`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从日志中看到的，由于 "地址已被占用" 的消息，`http-interface` 无法正确启动。这是因为我们更改了 `jboss.http.port`，但没有更改管理接口的类似配置，即
    `standalone.xml` 中定义的 `http-interface`：
- en: '![Using jboss.http.port](img/3744_02_05.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jboss.http.port](img/3744_02_05.jpg)'
- en: '"http-interface" defined in the standalone.xml'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: standalone.xml 中定义的 "http-interface"
- en: 'Every standalone instance has its own management interface, thus we need to
    change its binding as well. Let''s fix it:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 每个独立实例都有自己的管理接口，因此我们需要更改其绑定。让我们修复它：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is in a different terminal window:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在不同的终端窗口中：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There you go! Now if you check the open sockets at the OS level, filtering
    by the java process, you will see the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！现在如果你检查操作系统级别的开放套接字，通过 java 进程进行过滤，你会看到以下内容：
- en: '![Using jboss.http.port](img/3744_02_06.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jboss.http.port](img/3744_02_06.jpg)'
- en: Using jboss.socket.binding.port-offset
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 jboss.socket.binding.port-offset
- en: 'Okay, let''s try using the `port-offset` directive:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们尝试使用 `port-offset` 指令：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is keyed in a different terminal window:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在不同的终端窗口中输入的：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you have noticed, both servers start up regularly without any additional
    configuration or precaution. Lastly, just check the socket at the OS level:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，两个服务器都正常启动，无需任何额外的配置或预防措施。最后，只需在操作系统级别检查套接字：
- en: '![Using jboss.socket.binding.port-offset](img/3744_02_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jboss.socket.binding.port-offset](img/3744_02_07.jpg)'
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Using the `jboss.socket.binding.port-offset` directive facilitates all configuration
    needs, in contrast to every single configuration update needed when using `jboss.http.port`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `jboss.socket.binding.port-offset` 指令简化了所有配置需求，相比之下，使用 `jboss.http.port`
    时需要每次单独更新配置。
- en: Furthermore, with WildFly, you could benefit even more by using the `port-offset`
    configuration, as you would also need to adjust the remoting socket.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用 WildFly，通过使用 `port-offset` 配置，你可以获得更多的好处，因为你还需要调整远程套接字。
- en: Configuring multiple WildFly instances to run on the same machine with different
    IPs
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置多个 WildFly 实例在相同机器上以不同的 IP 运行
- en: In some cases, mostly due to architectural reasons, you may need to run multiple
    WildFly instances on a single server. You can do this by isolating each instance
    and giving it different binding IPs. The IPs might be virtual or effectively provided
    by the physical network interfaces installed on your system. Either way is good.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，主要是由于架构原因，你可能在单个服务器上运行多个 WildFly 实例。你可以通过隔离每个实例并为其提供不同的绑定 IP 来实现这一点。这些
    IP 可能是虚拟的，或者实际上是由你系统上安装的物理网络接口提供的。两种方式都很好。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'If you decide on virtual IPs, you can do this as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用虚拟 IP，你可以按照以下方式操作：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here `YOUR_NIC` might be `eth0`. Now, if you list all the available interfaces
    in your server, you will also see the following new ones:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `YOUR_NIC` 可能是 `eth0`。现在，如果你列出服务器上所有可用的接口，你也会看到以下新的接口：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After that, we need to create a standalone configuration for each instance
    that we want to set up and run. If you have already done so from the previous
    recipe (*Configuring multiple WildFly instances to run on the same machine with
    different ports*), you can jump to the *How to do it...* section. Otherwise, all
    we need to do is replicate the concept explained in the *Binding WildFly onto
    a custom IP* recipe. Suppose we want two running nodes/instances, the command
    is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要为每个我们想要设置和运行的实例创建一个独立配置。如果您已经从之前的菜谱（*配置多个 WildFly 实例在相同机器上以不同的端口运行*）中这样做，您可以直接跳转到
    *如何操作...* 部分。否则，我们只需要复制 *绑定 WildFly 到自定义 IP* 菜谱中解释的概念。假设我们想要两个运行节点/实例，命令如下：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we are ready to configure each instance.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好配置每个实例。
- en: How to do it…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open a terminal window and type in the following commands:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并输入以下命令：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Type the following in a different terminal window:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的终端窗口中输入以下内容：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Ouch! Another fail!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！又失败了！
- en: What's wrong now? Pretty much the same thing we had in the previous recipe.
    We didn't change any binding parameter (IP address or port number) for the management
    interface.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在怎么了？几乎和上一个菜谱中一样的问题。我们没有更改管理接口的任何绑定参数（IP 地址或端口号）。
- en: 'As a matter of fact, as you can see from the log of the `node-1` instance,
    the management and HTTP interface are bound to the local address, which is the
    default one. Thus, the `node-2` instance will have the same settings, hence the
    error: **Address already in use**.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，正如您可以从`node-1`实例的日志中看到的那样，管理和HTTP接口绑定到本地地址，这是默认地址。因此，`node-2`实例将具有相同的设置，因此出现错误：**地址已被占用**。
- en: 'Let''s fix this error:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复这个错误：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Type the following in a different terminal window:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的终端窗口中输入以下内容：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There you go! We have two WildFly instances running at the same time, each
    using a dedicated IP, even if they are both using the same PORT. Let''s check
    it at OS level:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们同时运行了两个WildFly实例，每个实例都使用一个专用的IP地址，即使它们都在使用相同的端口。让我们在操作系统级别检查一下：
- en: '![How to do it…](img/3744_02_08.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3744_02_08.jpg)'
- en: There's more…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: As you have noticed in this recipe and in the previous one, we can customize
    the WildFly binding relative to the IP address and port number, both for the service
    components (which is your application) and the management components (which are
    the Admin Console and the CLI).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本食谱和上一个食谱中注意到的，我们可以自定义WildFly相对于IP地址和端口号的绑定，这既适用于服务组件（即您的应用程序），也适用于管理组件（即管理控制台和CLI）。
- en: Obviously, we can even mix customization and thus change both the IP and the
    port, and change the port number for the service components and the IP address
    for the management interface. You can do whatever you want as long as you don't
    make equals binding.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们甚至可以混合自定义，从而更改IP和端口，并更改服务组件的端口号和管理接口的IP地址。只要您不进行等于绑定，您就可以做任何想做的事情。
- en: A typical configuration has the services components bound to a public interface
    (that is, an IP address that's visible externally) and the management interface
    bound to a private interface (that is, an IP address that's only visible locally
    or within your network).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的配置将服务组件绑定到公共接口（即外部可见的IP地址）和管理接口绑定到私有接口（即仅本地或网络内可见的IP地址）。
- en: Managing applications using the deployments folder
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用部署文件夹管理应用程序
- en: After configuring and customizing the WildFly standalone, it's time to deploy
    our first application. WildFly provides a lot of methods to deploy applications,
    one of them being via the deployment scanner (well known to those of you who come
    from the JBoss AS version). Basically, all you need to do is to copy your artifact
    into the `deployments` folder of your standalone instance.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 配置和自定义WildFly独立实例后，是时候部署我们的第一个应用程序了。WildFly提供了许多部署应用程序的方法，其中之一是通过部署扫描器（对于那些来自JBoss
    AS版本的人所熟知）。基本上，您需要做的就是将您的工件复制到独立实例的`deployments`文件夹中。
- en: In a production environment, you had better turn off the deployment scanner
    to avoid replacing a deployment accidentally—you would be in very big trouble.
    Do use the proper "deploy" operation using either the CLI or the Admin Console.
    We will see both in this chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，您最好关闭部署扫描器，以避免意外替换部署——您会遇到很大的麻烦。请使用CLI或管理控制台进行适当的“部署”操作。我们将在本章中看到这两种方法。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will need a Java web application. If you want, you can use
    one of my projects from my GitHub account, at the following address: [https://github.com/foogaro/wildfly-cookbook.git](https://github.com/foogaro/wildfly-cookbook.git).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们需要一个Java Web应用程序。如果您愿意，可以使用我GitHub账户中的一个项目，地址如下：[https://github.com/foogaro/wildfly-cookbook.git](https://github.com/foogaro/wildfly-cookbook.git)。
- en: You can `git-clone` the repository or just download it as a ZIP archive. Either
    way, create a folder named `github` into the `WFC` folder, and place the source
    into it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`git-clone`克隆仓库，或者将其作为ZIP存档下载。无论哪种方式，都在`WFC`文件夹中创建一个名为`github`的文件夹，并将源文件放入其中。
- en: 'Using the `git-clone` command, do as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`git-clone`命令，请按照以下步骤操作：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once `git` has done with cloning the repo, you can find a project called `example`.
    To compile the project, do as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`git`完成了仓库的克隆，您将找到一个名为`example`的项目。要编译项目，请按照以下步骤操作：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding commands compile the project and generate the web application
    artifact into a folder named `target`. There you can find the application `example.awar`,
    ready to be deployed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令编译项目并将Web应用程序工件生成到名为`target`的文件夹中。在那里您可以找到名为`example.awar`的应用程序，准备部署。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is also the official WildFly quickstarts repository, which has plenty
    of precious resources to look at, and it is also available for contribution at
    the following address: [https://github.com/wildfly/quickstart](https://github.com/wildfly/quickstart).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有官方WildFly快速入门存储库，其中包含大量宝贵的资源可供参考，并且它也在此地址上可供贡献：[https://github.com/wildfly/quickstart](https://github.com/wildfly/quickstart)。
- en: Now, assume that we are going to use the default `standalone` folder as the
    base configuration path of our instance. To see everything in action, it's better
    to first run WildFly and then start managing the application itself using the
    `deployments` folder.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们将使用默认的`standalone`文件夹作为我们实例的基本配置路径。为了看到一切在行动，最好首先运行WildFly，然后使用`deployments`文件夹开始管理应用程序本身。
- en: How to do it…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, let''s start up WildFly:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们启动WildFly：
- en: '[PRE24]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now keeping your terminal windows visible, open your favorite file manager tool,
    and copy `example.war` into the `deployments` folder.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保持您的终端窗口可见，打开您喜欢的文件管理工具，并将`example.war`复制到`deployments`文件夹中。
- en: 'Alternatively, you can copy the web application using a new terminal, using
    the following command:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，您可以使用新终端复制Web应用程序，使用以下命令：
- en: '[PRE25]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'A few seconds later (the timer interval is set for every 5 seconds, so you
    may wait a few milliseconds or 5 seconds), we''ll get the following output:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后（定时器间隔设置为每5秒一次，因此您可能需要等待几毫秒或5秒），我们将得到以下输出：
- en: '[PRE26]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And you should also get a new file in the `deployments` folder named `example.war.deployed`.
    This is a marker saying that the application has been successfully deployed. In
    case of an error, any operation would have been rolled back and a new file named
    `example.war.failed` would have been created.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且您也应该在`deployments`文件夹中获得一个名为`example.war.deployed`的新文件。这是一个标记，表示应用程序已成功部署。如果发生错误，任何操作都会回滚，并创建一个名为`example.war.failed`的新文件。
- en: 'Now, can you guess how to undeploy it? Yes... rename the marker file extension
    with `.undeploy` as follows:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你能猜到如何取消部署吗？是的...将标记文件扩展名重命名为`.undeploy`，如下所示：
- en: '[PRE27]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: And in the `deployments` folder, a new file named `example.war.undeployed` has
    been created. How do we redeploy it now? Delete the two marker files, or create
    a new one named `example.war.dodeploy`.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`deployments`文件夹中，已创建一个名为`example.war.undeployed`的新文件。现在我们如何重新部署它？删除两个标记文件，或者创建一个名为`example.war.dodeploy`的新文件。
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'To recap what we''ve learned so far, marker files always have the same name
    as the application plus the suffix. The following table summarizes all the available
    markers:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾我们迄今为止所学的内容，标记文件始终具有与应用程序相同的名称加上后缀。以下表格总结了所有可用的标记：
- en: '| Suffix | Description |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 后缀 | 描述 |'
- en: '| --- | --- |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.dodeploy` | User generated to indicate that the given content should be
    deployed. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `.dodeploy` | 用户生成，以指示给定内容应部署。|'
- en: '| `.skipdeploy` | User generated to indicate that the given content should
    skip auto-deploy as long as the file is present. This allows you to modify the
    exploded content without having the scanner initiate redeploy in the middle of
    the update. Same is true for zipped content. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `.skipdeploy` | 用户生成，以指示给定内容应跳过自动部署，只要文件存在。这允许您修改展开的内容，而无需在更新过程中由扫描器启动重新部署。对于压缩内容也是如此。|'
- en: '| `.isdeploying` | Placed by the deployment scanner service to indicate that
    it has noticed a `.dodeploy` file or new or updated auto-deploy mode content and
    is in the process of deploying the content. This marker file will be deleted when
    the deployment process completes, so you may not see it for small size artifacts.
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `.isdeploying` | 由部署扫描器服务放置，以指示它已注意到`.dodeploy`文件或新的或更新的自动部署模式内容，并正在部署内容。当部署过程完成时，此标记文件将被删除，因此您可能看不到它对于小型工件。|'
- en: '| `.deployed` | Placed by the deployment scanner service to indicate that the
    given content has been deployed. If you delete this file, the content will be
    undeployed. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `.deployed` | 由部署扫描器服务放置，以指示给定内容已部署。如果您删除此文件，内容将被取消部署。|'
- en: '| `.failed` | Placed by the deployment scanner service to indicate that the
    given content has failed in its deploying process. In the file, you will find
    information about what went wrong during deployment. Note that with auto-deploy
    mode, removing this file will make the deployment eligible for deployment again.
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `.failed` | 由部署扫描器服务放置，以指示给定内容在其部署过程中失败。在文件中，您将找到有关部署过程中出现问题的信息。请注意，在自动部署模式下，删除此文件将使部署有资格再次部署。|'
- en: '| `.isundeploying` | Placed by the deployment scanner service to indicate that
    it has noticed that a `.deployed` file has been deleted and the content is being
    undeployed. This marker file will be deleted when the undeployment process completes,
    so you may not see it for small size artifacts. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `.isundeploying` | 由部署扫描服务放置，以指示它已经注意到`.deployed`文件已被删除，内容正在被卸载。当卸载过程完成时，此标记文件将被删除，因此你可能看不到它对于小型工件。|'
- en: '| `.undeployed` | Placed by the deployment scanner service to indicate that
    the given content has been undeployed. If you delete this file, there will be
    no impact at all. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `.undeployed` | 由部署扫描服务放置，以指示给定内容已被卸载。如果你删除此文件，将没有任何影响。|'
- en: '| `.pending` | Placed by the deployment scanner service to indicate that it
    has noticed the need to deploy content but has not yet instructed the server to
    deploy it.This file is created if the scanner detects that some auto-deploy content
    is still in the process of being copied or if there is some problem that prevents
    auto-deployment. The scanner will not instruct the server to deploy or undeploy
    any content (not just the directly affected content) as long as this condition
    holds. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `.pending` | 由部署扫描服务放置，以指示它已经注意到需要部署内容，但尚未指示服务器部署它。如果扫描器检测到某些自动部署内容仍在复制过程中，或者存在阻止自动部署的问题，则会创建此文件。只要这种条件保持不变，扫描器就不会指示服务器部署或卸载任何内容（不仅仅是直接受影响的内容）。|'
- en: Connecting to the CLI
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到CLI
- en: There are three ways to manage your WildFly, that is, by editing the XML file,
    the Console and the CLI.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式来管理你的WildFly，即通过编辑XML文件、控制台和CLI。
- en: First of all, editing the XML directly can be error-prone, as it can waste you
    precious seconds; moreover, every change requires a server restart.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，直接编辑XML可能会出错，因为它可能会浪费你宝贵的几秒钟；此外，每次更改都需要重启服务器。
- en: The Console gives you visual editing features, but it's not complete. The Web
    Console can perform just a subset of all the available actions that you can execute
    using the CLI.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台为你提供了可视编辑功能，但它并不完整。Web控制台只能执行所有可用操作的一个子集，这些操作你可以使用CLI执行。
- en: CLI stands for Command Line Interface, and it is a tool that you are recommended
    to use to manage your WildFly application server.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CLI代表命令行界面，它是一个你被推荐用来管理你的WildFly应用服务器的工具。
- en: Why the CLI? Most of the time, for security reasons, you connect to enterprise
    environments via SSH and are thus not able to see the Web Console at all. CLI
    WildFly comes in handy for this purpose.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么选择CLI？大多数时候，出于安全原因，你通过SSH连接到企业环境，因此根本无法看到Web控制台。CLI WildFly在这种情况下非常有用。
- en: 'CLI is a powerful tool that gives you full control over WildFly; you can deploy
    and undeploy applications, create and manage data sources, manage logging, change
    system properties, stop and start instances, and more. Working with the CLI also
    helps you understand the WildFly core logic so you can really become an expert
    WildFly administrator. Nevertheless, if you really want a GUI as well, you can
    have the CLI in GUI version; just execute the following command while you have
    your WildFly running:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: CLI是一个强大的工具，它让你完全控制WildFly；你可以部署和卸载应用程序，创建和管理数据源，管理日志，更改系统属性，停止和启动实例，等等。使用CLI还可以帮助你理解WildFly的核心逻辑，这样你才能真正成为一个WildFly管理员专家。尽管如此，如果你真的还想有一个GUI，你可以在GUI版本中拥有CLI；只需在你运行WildFly时执行以下命令：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following screenshot depicts the CLI GUI tool:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了CLI GUI工具：
- en: '![Connecting to the CLI](img/3744_02_09.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![连接到CLI](img/3744_02_09.jpg)'
- en: CLI GUI tool
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: CLI GUI工具
- en: Now, it's time to play around with the CLI. Let's see what you can do!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候用CLI玩玩儿了。让我们看看你能做什么！
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As the CLI is a management tool, you will need to have your WildFly instance
    up and running. In this case too, we will use the default standalone configuration.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CLI是一个管理工具，你需要确保你的WildFly实例正在运行。在这种情况下，我们也将使用默认的独立配置。
- en: 'Open a terminal window and start WildFly:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并启动WildFly：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let''s open a terminal window:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个终端窗口：
- en: '[PRE30]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once in, we need to connect to the running instance. By typing the command `connect`,
    the tool connects to the instance with the default parameters, which is `localhost:9990`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入，我们需要连接到正在运行的实例。通过输入命令`connect`，该工具使用默认参数连接到实例，即`localhost:9990`。
- en: '[PRE31]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can also connect to the CLI directly from the command line by passing the
    --connect parameter as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过命令行直接连接到CLI，如下所示传递--connect参数：
- en: '[PRE32]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: From now on, we will connect directly to the CLI without having to connect to
    it from the inside.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从现在开始，我们将直接连接到CLI，而无需从内部连接到它。
- en: Now try the command listing `ls` (as you would do in Linux):![How to do it…](img/3744_02_10.jpg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试使用`ls`命令列出（就像在Linux中做的那样）：![如何操作…](img/3744_02_10.jpg)
- en: The list command gives you all the components that you can operate on, pretty
    much what you can see editing the `standalone.xml`. In fact, listing the subsystems,
    you will see all the subsystems present declared in `standalone.xml`:![How to
    do it…](img/3744_02_11.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表命令为您提供了可以操作的所有组件，基本上就是您在编辑`standalone.xml`时可以看到的内容。实际上，列出子系统时，您将看到在`standalone.xml`中声明的所有子系统：![如何操作…](img/3744_02_11.jpg)
- en: There's more…
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Remember that the *Tab* key on your keyboard is your friend. If you don't remember
    a command, just hit *Tab*. If you don't remember how to complete a command, just
    hit *Tab*. Hitting the *Tab* key will show all the possible solutions within your
    current context.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，您的键盘上的*Tab*键是您的朋友。如果您不记得一个命令，只需按*Tab*。如果您不记得如何完成一个命令，只需按*Tab*。按*Tab*键将显示当前上下文中的所有可能解决方案。
- en: 'There are two others special characters within the CLI: `/` (the forward slash)
    and `:` (the colon). The forward slash is used to navigate through the contexts,
    while the colon is used to invoke method operation within the last selected context.
    Check the next recipe for an example.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: CLI中有两个其他特殊字符：`/`（正斜杠）和`:`（冒号）。正斜杠用于在上下文中导航，而冒号用于在最后选定的上下文中调用方法操作。请查看下一道菜谱中的示例。
- en: Checking the server-state via the CLI
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过CLI检查服务器状态
- en: 'In this recipe, we will learn how to check the server status. WildFly may have
    different status depending on its phase: starting, stopping, started, and stopped.
    Sometimes, just checking its status at the OS level by looking for its process
    might not be enough.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何检查服务器状态。WildFly可能根据其阶段有不同的状态：启动中、停止、已启动和已停止。有时，仅通过在操作系统级别查找其进程来检查其状态可能还不够。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As the CLI is a management tool, you will need to have your WildFly instance
    up and running. Also for this recipe, we will rely on the default standalone configuration.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CLI是一个管理工具，您需要确保您的WildFly实例已启动并运行。此外，对于这个配方，我们将依赖默认的独立配置。
- en: 'Open a terminal window and start WildFly:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并启动WildFly：
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How to do it…
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In a new terminal window, type in the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口中，输入以下内容：
- en: '[PRE34]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As you connect to the host-controller, you are just in the root of your configuration.
    Thus, you can invoke an operation on it, and to do that, you need to start with
    the `:` (colon) symbol.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当您连接到主机控制器时，您就在配置的根目录。因此，您可以在其上调用操作，而要做到这一点，您需要从冒号（`:`）符号开始。
- en: 'In our example we used the `read-attribute` method, but you could have any
    of the available ones. To see them is as easy as hitting the *Tab* key right after
    the colon symbol, as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用了`read-attribute`方法，但您可以使用任何可用的方法。要查看它们，只需在冒号符号后按*Tab*键，如下所示：
- en: '![How it works…](img/3744_02_12.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/3744_02_12.jpg)'
- en: 'Getting back to our server state, we received two responses: one saying that
    our invocation was successful, and the second one reporting the result, **running**.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的服务器状态，我们收到了两个响应：一个表示我们的调用成功，另一个报告结果，**运行**。
- en: Deploying an application via the CLI
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过CLI部署应用程序
- en: In this recipe, we will learn how to deploy an application using the CLI. Here
    we will use just the basic options but keep in mind that you have several options
    during deployments, which we will analyze deeply in the chapter dedicated to the
    CLI.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何使用CLI部署应用程序。在这里，我们将仅使用基本选项，但请记住，在部署期间您有多个选项，我们将在专门介绍CLI的章节中深入分析。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, and in the following one as well, we will need an application
    to test our configuration. For this recipe, we will need the application named
    `example` that you can find in my GitHub repository. If you skipped the *Managing
    applications using the deployments folder* recipe, please refer to it to download
    the source code and the projects that you will need.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，以及接下来的一个配方中，我们都需要一个应用程序来测试我们的配置。对于这个配方，我们需要名为`example`的应用程序，您可以在我的GitHub仓库中找到它。如果您跳过了*使用部署文件夹管理应用程序*配方，请参阅它以下载您需要的源代码和项目。
- en: How to do it…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With your WildFly instance up and running, open up a terminal and connect to
    the CLI as usual:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的WildFly实例启动并运行时，打开一个终端并像往常一样连接到CLI：
- en: '[PRE35]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now we need to tell the CLI to deploy our application as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要告诉CLI按照以下方式部署我们的应用程序：
- en: '[PRE36]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'And let''s have a look at the `server.log` files:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看`server.log`文件：
- en: '[PRE37]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s check it for deployment from the CLI:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查从CLI部署的情况：
- en: '[PRE38]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: I emphasized a log line to take your attention. As you can see, WildFly automatically
    saves its artifacts into its `data/content` folder. In that folder, you will find
    a lot of folders with hashed names that contain the artifact. The artifact is
    then renamed as `content`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我强调了一行日志以引起你的注意。正如你所见，WildFly会自动将其工件保存到其`data/content`文件夹中。在该文件夹中，你会找到许多带有哈希名称的文件夹，其中包含工件。然后工件被重命名为`content`。
- en: 'If you try to see the `content` file information using the `unzip` command,
    you will find your artifact structure as seen in the following screenshot:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试使用`unzip`命令查看`content`文件信息，你将发现你的工件结构如下所示：
- en: '![How it works…](img/3744_02_13.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/3744_02_13.jpg)'
- en: There's more…
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can also deploy an artifact disabled, with status stopped, and enable it
    at your convenience as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以部署一个禁用、状态停止的工件，并在方便的时候启用它，如下所示：
- en: '[PRE39]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will just add the artifact into the `data/content` folder of WildFly in
    your running-mode, to enable it later:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅将工件添加到您运行模式下的WildFly的`data/content`文件夹中，以便稍后启用：
- en: '[PRE40]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: There is also a reference to the deployment inside the `standalone.xml` configuration
    file; open it and scroll down to the end.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在`standalone.xml`配置文件内部也有对部署的引用；打开它并向下滚动到末尾。
- en: '![There''s more…](img/3744_02_14.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容…](img/3744_02_14.jpg)'
- en: Standalone.xml updated after a deploy
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后更新的Standalone.xml
- en: Yes, you will find the `name` and the `runtime-name` along with the hash. In
    the *How it works...* section, I showed you where the deployment really persists,
    and in that case, it was stored into the `$WILDFLY_HOME/standalone/data/content/`
    folder.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你会找到`name`和`runtime-name`以及哈希值。在*如何工作...*部分，我向你展示了部署实际持久化的位置，在这种情况下，它被存储在`$WILDFLY_HOME/standalone/data/content/`文件夹中。
- en: Did you notice it? The first two characters of the `sha1` value denote the first
    folder, the rest of the `sha1` hash is the subfolder that contains the artifact
    renamed as `content`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到了吗？`sha1`值的第一个字符表示第一个文件夹，`sha1`哈希值的其余部分是包含已重命名为`content`的工件的子文件夹。
- en: Tip
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Getting the original deployment file can sometimes save your life, especially
    when dealing with a production environment, where last minute works are not "integrated"
    that much. Be safe with your backup.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 获取原始部署文件有时可以救你一命，尤其是在处理生产环境时，最后一刻的工作并没有那么“集成”。请确保备份安全。
- en: Let's have a look at the `deployments` folder now. It's empty. That is because
    everything goes into the runtime `data/content` folder. Try to stop the instance
    and copy the `example.war` application into the `deployments` folder.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`deployments`文件夹。它是空的。这是因为所有内容都进入了运行时的`data/content`文件夹。尝试停止实例并将`example.war`应用程序复制到`deployments`文件夹。
- en: 'Now start the instance again. What do you get? Something similar to the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次启动实例。你得到了什么？类似于以下内容：
- en: '[PRE41]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This is because you tried to deploy the same artifact twice, once using the
    CLI and once using the `deployment` folder. There is a listener called `deployment-scanner`
    that is triggered whenever you modify the content of the `deployment` folder.
    By the way, you can solve the preceding problem using the CLI, or by removing
    the auto-generated XML code into `standalone.xml` and leaving the artifact in
    the `deployments` folder.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你尝试部署了同一个工件两次，一次使用CLI，一次使用`deployment`文件夹。有一个名为`deployment-scanner`的监听器，每次你修改`deployment`文件夹的内容时都会被触发。顺便说一句，你可以使用CLI解决前面的问题，或者通过将自动生成的XML代码移除到`standalone.xml`中，并将工件留在`deployments`文件夹中。
- en: Undeploying an application via the CLI
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过CLI卸载应用程序
- en: In this recipe, we will learn how to undeploy an application using the CLI.
    As per the `deploy` command, we will use just the basic available options. We
    will analyze the `undeploy` command deeply, later in the book.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用CLI卸载应用程序。根据`deploy`命令，我们将使用基本可用的选项。我们将在本书的后面深入分析`undeploy`命令。
- en: Getting ready
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe follows the previous one, which is *Deploying an application via
    CLI*. This means that we will find the `example` application ready to be `undeployed`.
    If you skipped the previous recipe, follow the instructions that it provides,
    or alternatively provide yourself with an application to undeploy.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方遵循之前的配方，即 *通过 CLI 部署应用程序*。这意味着我们将找到 `example` 应用程序已准备好进行 `undeploy`。如果您跳过了之前的配方，请遵循它提供的说明，或者您可以提供自己要卸载的应用程序。
- en: How to do it…
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With your WildFly instance up and running, open a terminal and connect to the
    CLI as usual:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的 WildFly 实例运行时，打开终端并像往常一样连接到 CLI：
- en: '[PRE42]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now we need to tell the CLI to undeploy our application as follows:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要告诉 CLI 按以下方式卸载我们的应用程序：
- en: '[PRE43]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And the `server.log` logs the following:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且 `server.log` 记录以下内容：
- en: '[PRE44]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: There's more…
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you did a copy and paste of the previous command, you wouldn't have noticed
    a helpful feature of the `undeploy` command.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您复制并粘贴了之前的命令，您可能没有注意到 `undeploy` 命令的一个有用功能。
- en: 'You can tell the CLI to list all the deployments first, so you can choose the
    right one to undeploy using the following command:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以告诉 CLI 首先列出所有部署，这样您就可以使用以下命令选择正确的要卸载的应用程序：
- en: '[PRE45]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Executing commands in batch mode via the CLI
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 CLI 批处理模式执行命令
- en: In this recipe, we will learn how to invoke commands in the batch mode. Actually,
    you can declare and prepare a list of commands to execute, and execute them sequentially
    at once. The batch mode gives you consistency among your operations and configuration.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何在批处理模式下调用命令。实际上，您可以声明并准备一个要执行的命令列表，并一次性按顺序执行它们。批处理模式使您的操作和配置保持一致性。
- en: Getting ready
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Get our WildFly instance up and running; from the folder where we downloaded
    the GitHub repository, `WFC/github/wildfly-cookbook`, copy the `example.war` and
    `simple.war` applications into the `$JBOSS_HOME` folder and connect to the CLI.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的 WildFly 实例运行起来；从我们下载 GitHub 存储库的文件夹 `WFC/github/wildfly-cookbook`，将 `example.war`
    和 `simple.war` 应用程序复制到 `$JBOSS_HOME` 文件夹，并连接到 CLI。
- en: 'If you can find the applications, you probably need to compile the projects.
    I''ll show you how to do it for the `simple` application, and the same applies
    to the others. Open a terminal and do as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能找到应用程序，您可能需要编译项目。我将向您展示如何为 `simple` 应用程序操作，其他应用程序也是如此。打开终端并按以下步骤操作：
- en: '[PRE46]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How to do it…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We are going to do the following operation in sequence:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下顺序执行以下操作：
- en: Deploy `example.war`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 `example.war`。
- en: Deploy `simple.war`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 `simple.war`。
- en: 'Let''s go to the CLI:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们去 CLI：
- en: '[PRE47]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'And the `server.log` logs the following:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且 `server.log` 记录以下内容：
- en: '[PRE48]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Reloading a server configuration via the CLI
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 CLI 重新加载服务器配置
- en: In this recipe, we will learn how to reload the server configuration, without
    the need for a full restart. Often, there are changes that need the server to
    be reloaded. Most of the time you realize that a specific setting needs a different
    value just after a server startup or during tests. So, instead of stopping and
    starting the all application server, you can just reload the configuration, unless
    the change involves the JVM or settings that are needed at boot time.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何在无需完全重启的情况下重新加载服务器配置。通常，有一些更改需要重新加载服务器。大多数时候，您会在服务器启动后或测试期间意识到某个特定设置需要不同的值。因此，您无需停止和启动整个应用程序服务器，只需重新加载配置即可，除非更改涉及
    JVM 或启动时需要的设置。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have already seen how to reload a server while playing with IPs and port
    binding, but it's worth mentioning again.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何在玩 IP 和端口绑定时重新加载服务器，但再次提一下。
- en: How to do it…
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The command itself is pretty easy:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 命令本身很简单：
- en: '[PRE49]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How it works…
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Basically, the `reload` command issues, in sequence, a `stop` for all the WildFly
    active services and a `start`, which starts up the services again. This should
    give you important information. The JVM remains the same. If you test the active
    process at the OS level before and after issuing the `reload` command, you will
    notice that the processes' IDs are the same.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，`reload` 命令按顺序发出 `stop` 命令，停止所有 WildFly 活动服务，然后发出 `start` 命令，再次启动服务。这应该给您提供重要信息。JVM
    保持不变。如果您在发出 `reload` 命令前后在操作系统级别测试活动进程，您将注意到进程 ID 是相同的。
- en: '[PRE50]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Last but not least, your CLI does not disconnect.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，您的 CLI 不会断开连接。
- en: Shutting down and restarting an instance via the CLI
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 CLI 关闭和重新启动实例
- en: In this recipe, we will learn how to stop a WildFly instance via the CLI, or
    alternatively, restart it via the CLI.The restart option is in contrast to the
    `reload` command of the previous recipe.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何通过 CLI 停止 WildFly 实例，或者通过 CLI 重新启动它。重新启动选项与上一个食谱中的 `reload` 命令相反。
- en: Getting ready
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Start up your WildFly so that we can directly connect to it via the CLI, as
    follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的 WildFly，以便我们可以通过 CLI 直接连接到它，如下所示：
- en: '[PRE51]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How to do it...
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The command itself is pretty easy:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 命令本身很简单：
- en: '[PRE52]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works...
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The preceding command stops everything and drops you off from the CLI. Hence,
    in case you need to restart your WildFly instance, you need to execute the `standalone.sh`
    script again, along with any parameter previously defined.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令停止了一切并将你从 CLI 中移除。因此，如果你需要重新启动你的 WildFly 实例，你需要再次执行 `standalone.sh` 脚本，以及任何之前定义的参数。
- en: There's more...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Alternatively, if what you really need is a full stop and start, you can rely
    on the `--restart=true` option for the `shutdown` command.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你真正需要的是完全停止和启动，你可以依靠 `shutdown` 命令的 `--restart=true` 选项。
- en: 'Before executing the `shutdown` command with the `restart` option, take note
    of the process ID (PID) of the WildFly instance, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用带有 `restart` 选项的 `shutdown` 命令之前，注意 WildFly 实例的进程 ID (PID)，如下所示：
- en: '[PRE53]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Okay, now go back into the CLI and do as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在回到 CLI，按照以下步骤操作：
- en: '[PRE54]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The first visible difference is that your CLI doesn''t disconnect. Now let''s
    go back to the terminal and list the available processes at the OS level, as done
    previously:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个明显的区别是，你的 CLI 不会断开连接。现在让我们回到终端，列出操作系统级别的可用进程，就像之前做的那样：
- en: '[PRE55]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This is probably the most important difference with the `reload` command. You
    get a completely new JVM, a different process ID at the OS level. The preceding
    command executed into the CLI completely shuts down the current instance and starts
    up a new one, as shown in the following log entries:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是与 `reload` 命令最重要的区别。你将获得一个全新的 JVM，操作系统级别的不同进程 ID。前面的命令在 CLI 中完全关闭了当前实例并启动了一个新的实例，如下面的日志条目所示：
- en: '[PRE56]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Remember that the PID changes, so if you are monitoring your instance per PID,
    consider updating your monitoring tool/script as well!
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，PID 会改变，所以如果你是按照 PID 监控你的实例，请考虑更新你的监控工具/脚本！
- en: Suspending and resuming an instance via the CLI
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 CLI 暂停和恢复实例
- en: In this recipe, we will learn how to suspend an instance without killing active
    requests. Once the running requests are completed, the next ones will not be accepted.
    This is a new feature available in WildFly 9.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何在不终止活动请求的情况下挂起一个实例。一旦运行中的请求完成，下一个请求将不会被接受。这是 WildFly 9 中的一项新功能。
- en: Getting ready
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To test this recipe, we will need the application named `grace` that you can
    find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe, please refer to it to download all the source
    code and the projects that you will need.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个食谱，我们需要名为 `grace` 的应用程序，你可以在我的 GitHub 仓库中找到它。如果你跳过了 *使用部署文件夹管理应用程序* 的食谱，请参考它以下载所有所需的源代码和项目。
- en: 'Start up your WildFly so we can directly connect to it via the CLI, as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的 WildFly，以便我们可以通过 CLI 直接连接到它，如下所示：
- en: '[PRE57]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How to do it…
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: First of all, deploy the application `grace.war`. Once the application has been
    deployed, open it using a browser at the following URL `http://127.0.0.1:8080/grace`
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，部署应用程序 `grace.war`。一旦应用程序被部署，使用浏览器在以下 URL 打开它 `http://127.0.0.1:8080/grace`
- en: This will hit the `index.jsp` page which increments a counter and then sleeps
    for 10 seconds, just to simulate a long running request.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将访问 `index.jsp` 页面，该页面增加一个计数器然后休眠 10 秒，只是为了模拟一个长时间运行的请求。
- en: 'While running, open a terminal window and connect to the CLI as usual. Once
    there, do as follows:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行时，打开一个终端窗口并像往常一样连接到 CLI。一旦进入，按照以下步骤操作：
- en: '[PRE58]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Now, going back on the browser, your request should be done and you should see
    a page similar to the following one:![How to do it…](img/3744_02_15.jpg)
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到浏览器上，你的请求应该已经完成，你应该会看到一个类似于以下页面的页面：![如何操作…](img/3744_02_15.jpg)
- en: 'On the other hand, to resume the instance, just invoke the following command:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，要恢复实例，只需调用以下命令：
- en: '[PRE59]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works…
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The command itself is pretty easy. What you should know is what happens to
    the next user''s requests. The next user would get the following page:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 命令本身很简单。你应该知道下一个用户的请求会发生什么。下一个用户会看到以下页面：
- en: '![How it works…](img/3744_02_16.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/3744_02_16.jpg)'
- en: Obviously, you could handle the HTTP **503** code using a special page to warn
    the users about the technical problems due to the system's upgrade.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你可以通过一个特殊的页面来处理HTTP **503** 状态码，警告用户由于系统升级导致的技術问题。
- en: 'On the WildFly logs you should catch the following entry:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly日志中你应该捕获以下条目：
- en: '[PRE60]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `resume` command is pretty easy as well. What needs to be noticed is that
    the user will not lose his current and active session, which is a really great
    feature from the user's point of view.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`resume`命令也很简单。需要注意的一点是，用户不会丢失他当前和活跃的会话，这对于用户来说是一个非常好的特性。'
- en: 'On the WildFly logs, you should catch the following entry:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly日志中，你应该捕获以下条目：
- en: '[PRE61]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now if you go back to the application and refresh the page, you should see
    the counter increasing from where it stopped, as depicted in the following image:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你回到应用程序并刷新页面，你应该看到计数器从停止的地方开始增加，如图所示：
- en: '![How it works…](img/3744_02_17.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/3744_02_17.jpg)'
- en: Backing up your configuration file via the CLI
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过CLI备份配置文件
- en: In this recipe, we will learn how to backup our configuration via the CLI. Essentially,
    the CLI backs up the `standalone.xml` file by copying it into the `snapshot`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过CLI备份我们的配置。本质上，CLI通过将其复制到`snapshot`目录来备份`standalone.xml`文件。
- en: Getting ready
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Start up your WildFly so that we can directly connect to it via the CLI, as
    follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的WildFly，以便我们可以通过CLI直接连接到它，如下所示：
- en: '[PRE62]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: How to do it…
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The command itself is pretty easy:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 命令本身很简单：
- en: '[PRE63]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: That's it! A backup of the `standalone.xml` file gets copied into the `snapshot`
    folder, named by prefixing the file with the current date and time.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！`standalone.xml`文件的备份被复制到`snapshot`文件夹中，文件名以当前日期和时间作为前缀。
- en: Tip
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Always back up your configuration, especially when operating in a production
    environment.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 总是备份你的配置，尤其是在生产环境中操作时。
