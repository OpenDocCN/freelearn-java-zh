- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Enhancing Productivity and Development Simplification
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高生产力和开发简化
- en: In this chapter, our focus will be on boosting productivity and making development
    easier in Spring Boot. Improving productivity with Spring Boot involves simplifying
    configuration, reducing boilerplate code, and utilizing integrations and tools
    that facilitate faster development cycles, better code quality, and smoother deployment
    processes. We’ll kick things off by diving into **aspect-oriented programming**
    (**AOP**) within Spring Boot, understanding how it helps create a more organized
    code base by separating cross-cutting concerns from our main application logic.
    This approach makes our code easier to maintain and comprehend.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的重点是提高 Spring Boot 中的生产力和简化开发。使用 Spring Boot 提高生产力包括简化配置、减少样板代码，并利用促进更快开发周期、更好的代码质量和更顺畅部署流程的集成和工具。我们将通过深入了解
    Spring Boot 中的**面向切面编程**（**AOP**）来开始，了解它如何通过将横切关注点从我们的主要应用程序逻辑中分离出来，帮助我们创建一个更整洁的代码库。这种方法使我们的代码更容易维护和理解。
- en: Moving on we’ll introduce the Feign Client. It serves as a web service client
    that simplifies communication with services and streamlines HTTP API interactions,
    ultimately cutting down on repetitive boilerplate code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍 Feign 客户端。它作为一个简化与服务通信并简化 HTTP API 交互的 web 服务客户端，最终减少了重复的样板代码。
- en: After that, we’ll delve into techniques for auto-configuration in Spring Boot.
    These methods allow us to tailor Spring Boot’s convention over configuration philosophy
    to fit our requirements, thus simplifying the setup process of our application
    even further.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将深入研究 Spring Boot 中的自动配置技术。这些方法允许我们根据我们的需求调整 Spring Boot 的约定优于配置哲学，从而进一步简化我们应用程序的设置过程。
- en: It’s crucial to remember that with great power comes great responsibility. This
    chapter will also steer us through pitfalls and best practices when utilizing
    AOP, the Feign Client, and advanced auto-configuration features in Spring Boot.
    We’ll learn how to steer clear of common errors and effectively harness these
    tools to craft sturdy, maintainable, and efficient applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点至关重要：强大的力量伴随着巨大的责任。本章还将引导我们了解在利用 Spring Boot 中的 AOP、Feign 客户端和高级自动配置功能时的陷阱和最佳实践。我们将学习如何避免常见错误，并有效地利用这些工具来构建健壮、可维护和高效的应用程序。
- en: By the conclusion of this chapter, you’ll have a grasp on how to leverage these
    potent capabilities of Spring Boot to significantly boost your development efficiency.
    You will have the expertise to implement methods and steer clear of typical mistakes
    guaranteeing that your applications are reliable, organized, and easy to manage.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将掌握如何利用 Spring Boot 的强大功能来显著提高你的开发效率。你将具备实施方法和避免典型错误的专业知识，确保你的应用程序可靠、有序且易于管理。
- en: 'Here’s a quick overview of what we’ll cover:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个我们将涵盖的快速概述：
- en: Introducing AOP in Spring Boot
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Spring Boot 中引入 AOP
- en: Simplifying HTTP API with the Feign Client
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Feign 客户端简化 HTTP API
- en: Advanced Spring Boot auto-configuration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级 Spring Boot 自动配置
- en: Common pitfalls and best practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见陷阱和最佳实践
- en: Let’s get started on this journey to unlock the full potential of Spring Boot
    in your projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始这段旅程，解锁 Spring Boot 在你的项目中的全部潜力。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, we are going to need some settings in our local machines:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们需要在我们的本地机器上做一些设置：
- en: '**Java 17 Development Kit** (**JDK 17**)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java 17 开发工具包**（**JDK 17**）'
- en: A modern **integrated development environment** (**IDE**); I recommend IntelliJ
    IDEA
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个现代的**集成开发环境**（**IDE**）；我推荐 IntelliJ IDEA
- en: '**GitHub repository**: You can clone all repositories related to [*Chapter
    9*](B18400_09.xhtml#_idTextAnchor249) from here: [https://github.com/PacktPublishing/Mastering-Spring-Boot-3.0/](https://github.com/PacktPublishing/Mastering-Spring-Boot-3.0/)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 仓库**：您可以从这里克隆与[*第 9 章*](B18400_09.xhtml#_idTextAnchor249)相关的所有仓库：[https://github.com/PacktPublishing/Mastering-Spring-Boot-3.0/](https://github.com/PacktPublishing/Mastering-Spring-Boot-3.0/)'
- en: Introducing AOP in Spring Boot
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Spring Boot 中引入 AOP
- en: 'Let’s dive into AOP. You might be wondering: what’s AOP all about? Well, it’s
    a programming approach that helps separate concerns in your application, especially
    the ones that cut across multiple parts of your app, such as logging, transaction
    management, or security. Think about the logging; you can add a logger line in
    every method. AOP helps you keep them separate, so your main code stays clean
    and focused on what it’s supposed to do. It again logs the required data as a
    part of a separate class.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨AOP。你可能想知道：“AOP究竟是什么？”好吧，它是一种编程方法，有助于分离应用程序中的关注点，特别是那些跨越应用程序多个部分的关注点，如日志记录、事务管理或安全性。以日志记录为例；你可以在每个方法中添加日志记录行。AOP帮助你将它们分开，这样你的主要代码就能保持干净和专注于它应该做的事情。它还会作为单独类的一部分记录所需的数据。
- en: Spring Boot has built-in support for AOP, making it easier for you to implement
    these cross-cutting concerns without turning your code into spaghetti. With AOP,
    you can define advice (which means AOP speaks for the code that should run at
    a certain point), pointcuts (where in your code you want that advice to run),
    and aspects (the combination of advice and pointcuts). This means you can automatically
    apply common functionality across your application in a consistent way, all without
    messing with the core logic of your services. In the next section, we will see
    these in more detail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot内置了对AOP的支持，这使得你更容易实现这些横切关注点，而不会让你的代码变得一团糟。使用AOP，你可以定义建议（这意味着AOP代表应在特定点运行的代码），切入点（你希望在代码的哪个位置运行这些建议），以及方面（建议和切入点的组合）。这意味着你可以以一致的方式自动将常见功能应用于你的应用程序，而无需干扰你服务的核心逻辑。在下一节中，我们将更详细地了解这些内容。
- en: So, you’re probably thinking, “Great, but how do I actually do this?” That’s
    exactly what we’re going to cover next. We’ll walk you through setting up AOP
    in our Spring Boot application, starting with the basics and moving on to more
    advanced concepts. By the end, you’ll see how AOP can not only simplify your application
    development but also make your code cleaner and more efficient.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可能正在想：“很好，但我实际上该如何做？”这正是我们接下来要涵盖的内容。我们将带你了解如何在Spring Boot应用程序中设置AOP，从基础知识开始，然后过渡到更高级的概念。到那时，你将看到AOP不仅能够简化你的应用程序开发，还能让你的代码更干净、更高效。
- en: Exploring the basics of AOP – join points, pointcuts, advice declarations, and
    weaving
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索AOP的基础——连接点、切入点、建议声明和织入（weaving）
- en: 'Let’s start by simplifying the AOP terminology in Spring Boot before we delve
    deeper into creating our aspects. Understanding these concepts is like unlocking
    a set of tools for your programming tasks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入创建我们的方面之前，让我们先简化Spring Boot中的AOP术语。理解这些概念就像为你的编程任务解锁一套工具：
- en: '**Join points**: These are locations in your code where you can incorporate
    AOP aspects. You can consider them as opportunities or areas within your application
    where additional actions can take place. For instance, a method execution or an
    exception being thrown can serve as join points.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接点（Join points）**：这些是你可以在代码中融入AOP方面的位置。你可以把它们看作是在你的应用程序中可以发生额外动作的机会或区域。例如，方法执行或抛出异常可以作为连接点。'
- en: '**Pointcuts**: These determine where your AOP functionality should be applied.
    They act as filters that inform your application at which point to execute the
    code. This approach ensures that your aspect is only implemented where necessary
    and not globally.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切入点（Pointcuts）**：这些决定了你的面向方面编程（AOP）功能应该应用的位置。它们作为过滤器，通知你的应用程序在哪个点执行代码。这种方法确保你的方面（aspect）只在必要时实现，而不是全局性地实现。'
- en: '**Advice declarations**: These play an important role in AOP. They define the
    actions you want to take at a selected join point identified by a pointcut. Advice
    declarations can be executed before, after, or around your code. For example,
    automatically logging a specific method each time is called **exemplifying advice**
    in practice.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建议声明（Advice declarations）**：在AOP中，这些扮演着重要的角色。它们定义了你在由切入点标识的选定连接点（join point）上想要采取的动作。建议声明可以在你的代码之前、之后或周围执行。例如，每次调用特定方法时自动记录日志，这在实践中就是一个**示例建议（exemplifying
    advice）**。'
- en: '**Aspects**: These integrate all the components together. An aspect combines
    pointcuts and advice declarations into a package that specifies, “Perform this
    action (advice) at these locations, in the code (pointcuts).”'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方面（Aspects）**：这些将所有组件整合在一起。一个方面将切入点和建议声明组合成一个包，指定“在这些位置、代码（pointcuts）中执行这个动作（advice）。”'
- en: '**Weaving**: This involves integrating elements into your code. This can occur
    during stages, such as when your code is compiled or when it is executed. Consider
    it as the phase that triggers the AOP magic that enables the elements to interact
    with your application.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编织**：这涉及到将元素集成到你的代码中。这可以在代码编译或执行阶段发生。将其视为触发 AOP 魔法的阶段，使元素能够与你的应用程序交互。'
- en: Now that we’ve covered the terminology you might be curious about, let us apply
    these concepts in Spring Boot. We will guide you on defining your aspects, selecting
    join points using pointcuts, and specifying the actions your advice should take.
    With Spring Boot simplifying AOP implementation, you’ll witness how seamlessly
    these ideas can integrate into your projects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了你可能感兴趣的术语，让我们将这些概念应用到 Spring Boot 中。我们将指导你定义你的切面，使用切入点选择连接点，并指定你的建议应该采取的操作。随着
    Spring Boot 简化 AOP 实现，你将见证这些想法如何无缝地集成到你的项目中。
- en: Crafting a logging aspect – a step-by-step example
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建日志切面 – 一步步示例
- en: Picture yourself developing an application and aiming to monitor its workings
    without muddling your code with logging messages. This is where AOP stands out.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你正在开发一个应用程序，并希望监控其工作而不在代码中混入日志消息。这正是 AOP 突出的地方。
- en: 'Let’s delve into crafting a logging aspect in Spring Boot to enable the logging
    of method calls within your app. This approach allows you to track the start and
    end times of each method, simplifying debugging and supervision tasks:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨如何在 Spring Boot 中构建一个日志切面，以启用对应用程序中方法调用的日志记录。这种方法允许你跟踪每个方法的开始和结束时间，简化调试和监督任务：
- en: First, let’s create a new project from the Spring Initializr website ([https://start.spring.io](https://start.spring.io))
    with a Spring Web dependency. We will use Gradle in this project as well. Click
    on the **Generate** button, as we did in previous chapters, and open the project
    with your favorite IDE.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从 Spring Initializr 网站创建一个新的项目（[https://start.spring.io](https://start.spring.io)），并添加
    Spring Web 依赖。在这个项目中我们也将使用 Gradle。点击 **Generate** 按钮，就像我们在前面的章节中所做的那样，然后用你最喜欢的
    IDE 打开项目。
- en: 'Next, we need to add the AOP starter dependency to `build.gradle`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在 `build.gradle` 中添加 AOP starter 依赖项：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This step equips your Spring Boot project with the necessary AOP capabilities.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一步为你的 Spring Boot 项目配备了必要的 AOP 功能。
- en: 'Then, create a new class in your project and annotate it with `@Aspect` to
    tell Spring Boot it’s an aspect. Let’s call it `LoggingAspect`. Inside this class,
    we’ll define what we want to log and when:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在你的项目中创建一个新的类，并用 `@Aspect` 注解它，以告诉 Spring Boot 它是一个切面。让我们称它为 `LoggingAspect`。在这个类内部，我们将定义我们想要记录的内容和时机：
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the `@Before`, `@After`, and `@Around` annotations are advice
    declarations that specify when to log. The `execution(* com.packt.ahmeric..*.*(..))`
    part is a pointcut expression that tells Spring AOP to apply these advice declarations
    to all methods in your application (please note that you’ll want to adjust `com.packt.ahmeric`
    to match your actual package structure).
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，`@Before`、`@After` 和 `@Around` 注解是建议声明，它们指定了何时进行日志记录。`execution(* com.packt.ahmeric..*.*(..))`
    这部分是一个切入点表达式，它告诉 Spring AOP 将这些建议声明应用于应用程序中的所有方法（请注意，你可能需要将 `com.packt.ahmeric`
    调整为匹配你的实际包结构）。
- en: With your aspect defined, Spring Boot will now automatically log every method
    entry and exit in your application, as specified by your pointcut. This setup
    means you don’t have to manually add logging to each method, keeping your business
    logic neat and clean.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义了你的切面后，Spring Boot 现在将自动记录你的应用程序中每个方法的进入和退出，正如你的切入点所指定的。这种设置意味着你不需要手动为每个方法添加日志记录，从而保持你的业务逻辑整洁和清晰。
- en: 'Let’s now create a simple REST controller to test this feature. We will simply
    use the same `HelloController` as we used in previous chapters:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个简单的 REST 控制器来测试这个功能。我们将简单地使用前面章节中使用的相同的 `HelloController`：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s run our application and make a GET call to [http://localhost:8080/;](http://localhost:8080/;)
    we will observe the following logs in our console:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行我们的应用程序，并对 [http://localhost:8080/;](http://localhost:8080/;) 进行 GET 调用，我们将在控制台中观察到以下日志：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can track the logs where they are written. The first and last lines are
    written in `logMethodExecution`, the second line, as you suppose, is written in
    `logMethodEntry`, and the third line is written in `logMethodExit`. Since the
    `hello()` method is a very simple method, we have only these logs. Imagine you
    have lots of microservices and you want to log every request and response. With
    this approach, you don’t need to write a log statement in every method.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以跟踪日志的写入位置。第一行和最后一行是在`logMethodExecution`中编写的，第二行，正如你所料，是在`logMethodEntry`中编写的，第三行是在`logMethodExit`中编写的。由于`hello()`方法是一个非常简单的方法，所以我们只有这些日志。想象一下，如果你有很多微服务，并且你想记录每个请求和响应。使用这种方法，你不需要在每个方法中编写日志语句。
- en: After following these steps, we’ve successfully added a logging feature to our
    Spring Boot application. This instance showcases the effectiveness of AOP in managing
    cutting concerns such as logging. AOP organizes your code base and ensures logging
    without mixing it with your core business logic.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循这些步骤之后，我们已经成功地为我们的Spring Boot应用程序添加了日志功能。这个实例展示了AOP在管理如日志等切面问题上的有效性。AOP组织你的代码库，并确保在不与核心业务逻辑混合的情况下进行日志记录。
- en: As we wrap up this section, it’s clear that AOP is a useful tool to have in
    your Spring Boot toolkit. It streamlines addressing issues throughout your application.
    Like any tool, it performs optimally when used with knowledge and caution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本节时，很明显AOP是Spring Boot工具箱中的一个有用工具。它简化了整个应用程序中问题的处理。像任何工具一样，当有知识和谨慎地使用时，它才能发挥最佳性能。
- en: Let’s now turn our attention to another feature in Spring Boot that can greatly
    boost your efficiency; the Feign Client. In the next section, we’ll delve into
    how the Feign Client simplifies consuming HTTP APIs, making it effortless to connect
    and communicate with services. This is particularly useful in today’s era of microservices,
    where your application may require interaction with services. Stay tuned. We’ll
    see how to establish these connections easily by invoking a method in your code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将注意力转向Spring Boot中另一个可以大大提高你效率的功能；Feign客户端。在下一节中，我们将深入探讨Feign客户端如何简化消费HTTP
    API，使其轻松连接和与服务进行通信。这在当今微服务时代尤其有用，你的应用程序可能需要与服务的交互。请保持关注。我们将看到如何通过在代码中调用一个方法来轻松建立这些连接。
- en: Simplifying HTTP API with the Feign Client
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Feign客户端简化HTTP API
- en: Have you ever felt a little overwhelmed by the complexity of making HTTP calls
    in your Spring Boot applications? That’s where the Feign Client comes in, offering
    a more streamlined approach.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经因为Spring Boot应用程序中制作HTTP调用的复杂性而感到有些不知所措？这就是Feign客户端发挥作用的地方，它提供了一个更简化的方法。
- en: What is the Feign Client?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Feign客户端？
- en: The **Feign Client** is a declarative web service client. It makes writing web
    service clients easier and more efficient. Think of it as a way to simplify the
    way your application communicates with other services over HTTP.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Feign客户端**是一个声明式Web服务客户端。它使编写Web服务客户端变得更容易、更高效。将其视为简化应用程序通过HTTP与其他服务通信的方式。'
- en: The magic of the Feign Client lies in its simplicity. Instead of dealing with
    the low-level complexity of HTTP requests and responses, you define a simple Java
    interface and Feign takes care of the rest. By using Feign annotations to annotate
    this interface, you can tell Feign where to send the request, what to send, and
    how to handle the response. This frees you up to focus on your application’s needs
    and worry less about the tedious details of making HTTP calls.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Feign客户端的魔力在于其简单性。你不需要处理HTTP请求和响应的低级复杂性，你只需定义一个简单的Java接口，Feign就会处理其余部分。通过使用Feign注解来注解这个接口，你可以告诉Feign将请求发送到何处，发送什么，以及如何处理响应。这让你可以专注于应用程序的需求，减少对制作HTTP调用繁琐细节的担忧。
- en: It offers a simpler alternative to RestTemplate and WebClient. The Feign Client
    is a great option for client-side HTTP access in Spring applications. While RestTemplate
    has been the traditional choice for synchronous client-side HTTP access in Spring
    applications, it requires more code for each call. WebClient, on the other hand,
    is part of the newer, reactive Spring WebFlux framework, designed for asynchronous
    operations. It’s a powerful tool, but it may require more effort to learn, especially
    if you’re not familiar with reactive programming.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个比RestTemplate和WebClient更简单的替代方案。Feign客户端是Spring应用程序中客户端HTTP访问的一个很好的选择。虽然RestTemplate一直是Spring应用程序中同步客户端HTTP访问的传统选择，但它需要为每个调用编写更多的代码。另一方面，WebClient是较新的、反应式Spring
    WebFlux框架的一部分，专为异步操作设计。它是一个强大的工具，但可能需要更多的努力去学习，尤其是如果你不熟悉反应式编程。
- en: The Feign Client is a tool that offers the simplicity and ease of use of RestTemplate
    but with a more modern, interface-driven approach. It abstracts away much of the
    manual coding required for making HTTP calls, making your code cleaner and more
    maintainable.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Feign客户端是一个提供RestTemplate简单性和易用性的工具，但采用了更现代、接口驱动的方案。它抽象掉了制作HTTP调用所需的许多手动编码，使你的代码更干净、更易于维护。
- en: In the next section, we will explain how to integrate the Feign Client into
    your Spring Boot applications, step by step, to communicate with other services
    seamlessly. This will not only make your code more organized but also save you
    a significant amount of time during development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将逐步解释如何将Feign客户端集成到你的Spring Boot应用程序中，以便无缝地与其他服务进行通信。这不仅会使你的代码更有组织性，而且在开发过程中也能节省你大量的时间。
- en: Implementing the Feign Client in Spring Boot
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Spring Boot中实现Feign客户端
- en: 'Integrating the Feign Client into a Spring Boot application can enhance your
    project’s efficiency. To help you make HTTP API calls with ease, I’ll walk you
    through the setup and configuration process:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将Feign客户端集成到Spring Boot应用程序中可以提高你的项目效率。为了帮助你轻松地执行HTTP API调用，我将带你走过设置和配置过程：
- en: First things first, you need to include the Feign dependency in your Spring
    Boot application. This step enables Feign in your project, and it’s as simple
    as adding a couple of lines to your build configuration.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要将Feign依赖项包含到你的Spring Boot应用程序中。这一步启用了你的项目中的Feign，并且只需在构建配置中添加几行即可。
- en: 'Insert the following dependency into `build.gradle`:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`build.gradle`中插入以下依赖项：
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With this change, we have imported the required libraries into our project to
    use the Feign Client.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这个变更，我们已经将所需的库导入到我们的项目中以使用Feign客户端。
- en: 'With the dependency in place, the next step is to enable Feign Clients in your
    application. This is done through a simple annotation in any of your Spring Boot
    application’s configuration classes or the main application class itself:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在放置好依赖项之后，下一步是启用你的应用程序中的Feign客户端。这通过在你的Spring Boot应用程序的配置类或主应用程序类中添加一个简单的注解来完成：
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `@EnableFeignClients` annotation scans for interfaces that declare they
    are Feign Clients (using `@FeignClient`), creating a dynamic proxy for them. Essentially,
    `@EnableFeignClients` tells Spring Boot, “Hey, we’re using Feign Clients here,
    so please treat them accordingly.”
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`@EnableFeignClients`注解会扫描声明为Feign客户端的接口（使用`@FeignClient`），为它们创建一个动态代理。本质上，`@EnableFeignClients`告诉Spring
    Boot，“嘿，我们在这里使用Feign客户端，所以请相应地对待它们。”'
- en: Configuring your Feign Client involves defining an interface that specifies
    the external HTTP API you wish to call. Here, you use `@FeignClient` to declare
    your interface as a Feign Client and specify details such as the name of the client
    and the URL of the API.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的Feign客户端涉及定义一个接口，该接口指定了你希望调用的外部HTTP API。在这里，你使用`@FeignClient`来声明你的接口为Feign客户端，并指定如客户端名称和API
    URL等详细信息。
- en: 'Here’s a basic example that defines a Feign Client for a simple JSON placeholder
    API:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个定义简单JSON占位符API Feign客户端的基本示例：
- en: '[PRE6]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, `JsonPlaceholderClient` is an interface that represents a client
    to the JSON placeholder API. The `@FeignClient` annotation marks the `JsonPlaceholderClient`
    interface as a Feign Client, with `name` specifying a unique name for the client
    and `url` indicating the base URI of the external API. The methods inside the
    interface correspond to the endpoints you wish to consume, with Spring MVC (Model-View-Controller)
    annotations (`@GetMapping`, `@PathVariable`) defining the request type and parameters.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，`JsonPlaceholderClient`是一个表示对JSON占位符API客户端的接口。`@FeignClient`注解将`JsonPlaceholderClient`接口标记为Feign客户端，其中`name`指定了客户端的唯一名称，`url`指示外部API的基本URI。接口内部的方法对应于你希望消费的端点，Spring
    MVC（模型-视图-控制器）注解（`@GetMapping`，`@PathVariable`）定义了请求类型和参数。
- en: 'We also need to introduce a simple `Post` object that the JSON response can
    be mapped to:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要引入一个简单的`Post`对象，以便JSON响应可以映射到它：
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s use this client service in a sample controller:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在一个示例控制器中使用这个客户端服务：
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this controller, we have injected `jsonPlaceholderClient` into our controller
    and exposed the same endpoints that `jsonPlaceholderClient` provides us. In this
    way, we can test whether our implementation is working properly.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个控制器中，我们已经将`jsonPlaceholderClient`注入到我们的控制器中，并公开了`jsonPlaceholderClient`为我们提供的相同端点。通过这种方式，我们可以测试我们的实现是否正常工作。
- en: Now, we can start our application and make some GET calls to [http://localhost:8080/feign/posts](http://localhost:8080/feign/posts)
    and [http://localhost:8080/feign/posts/65](http://localhost:8080/feign/posts/65),
    and we will be sure our application can make REST calls to the server and get
    the response properly.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以启动我们的应用程序，并对[http://localhost:8080/feign/posts](http://localhost:8080/feign/posts)和[http://localhost:8080/feign/posts/65]进行一些GET调用，我们将确保我们的应用程序可以正确地向服务器发出REST调用并获取响应。
- en: That’s it for the basic setup and configuration of the Feign Client in a Spring
    Boot application. We’ve added the necessary dependency, enabled Feign Clients
    in our application, and defined an interface to interact with an external HTTP
    API. With these steps, you’re ready to make API calls seamlessly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Spring Boot应用程序中Feign客户端的基本设置和配置的全部内容。我们已经添加了必要的依赖项，在我们的应用程序中启用了Feign客户端，并定义了一个接口来与外部HTTP
    API交互。完成这些步骤后，你就可以无缝地进行API调用了。
- en: We’ve just navigated through the world of the Feign Client, discovering how
    it simplifies the communication between services in a Spring Boot application.
    The beauty of the Feign Client lies in its simplicity and efficiency, stripping
    away the complexity of HTTP calls and letting us focus on what really matters
    in our applications. With the Feign Client, we can define interfaces and easily
    connect our services, making external API calls feel like local method invocations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚穿越了Feign客户端的世界，发现了它是如何简化Spring Boot应用程序中服务之间通信的。Feign客户端的美丽之处在于它的简单和高效，去除了HTTP调用的复杂性，让我们专注于应用程序中真正重要的事情。有了Feign客户端，我们可以定义接口并轻松连接我们的服务，使外部API调用感觉像本地方法调用。
- en: As we wrap up the Feign Client, it’s time to dive deeper into the capabilities
    of Spring Boot, specifically its advanced auto-configuration features. Imagine
    having Spring Boot not just handle the basic setup but also intelligently configure
    your application based on the context and the libraries you’ve included. That’s
    the power of advanced auto-configuration.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们结束Feign客户端的讨论，是时候深入了解Spring Boot的能力，特别是它的高级自动配置功能了。想象一下，Spring Boot不仅处理基本的设置，还能根据上下文和你包含的库智能地配置你的应用程序。这就是高级自动配置的力量。
- en: Advanced Spring Boot auto-configuration
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Spring Boot自动配置
- en: Spring Boot’s strength lies in its ability to quickly set you up with minimal
    setup required. This special feature is largely due to its auto-configuration
    capability. Let’s explore what auto-configuration entails and how Spring Boot
    has adapted to handle more intricate situations.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的强大之处在于它能够快速为你设置，所需设置最少。这个特殊功能在很大程度上归功于它的自动配置能力。让我们探索自动配置包含什么，以及Spring
    Boot是如何适应处理更复杂的情况的。
- en: What is advanced auto-configuration?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是高级自动配置？
- en: When initiating a new Spring Boot project, you’re not starting from ground zero.
    Spring Boot examines the libraries in your classpath, the beans you’ve defined,
    and the properties you’ve configured to automatically set up your application.
    This could involve establishing a web server, configuring a database connection,
    or even preparing your application for security measures. It’s akin to having
    an intelligent assistant who arranges everything based on what it perceives you
    may require.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动一个新的Spring Boot项目时，你并不是从零开始。Spring Boot会检查你的类路径中的库、你定义的bean以及你配置的属性，以自动设置你的应用程序。这可能包括建立Web服务器、配置数据库连接，甚至为安全措施准备你的应用程序。这就像有一个智能助手，根据它感知到你可能需要什么来安排一切。
- en: However, as applications expand and become more intricate, the basic auto-configuration
    might not encompass all scenarios. This is where advanced auto-configuration steps
    in. Spring Boot has progressed to enable you to personalize and enhance this auto-configuration
    process. It equips you with the means to communicate with Spring Boot, saying
    “Hey, I acknowledge your efforts, but let’s make some adjustments here and there.”
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着应用程序的扩展和变得更加复杂，基本的自动配置可能无法涵盖所有场景。这就是高级自动配置介入的地方。Spring Boot已经发展到允许你个性化并增强这个自动配置过程。它为你提供了与Spring
    Boot通信的手段，说“嘿，我认可你的努力，但让我们在这里和那里做一些调整。”
- en: For instance, you may encounter a specific data source that doesn’t adhere to
    the standard auto-configuration model, or perhaps you require the configuration
    of a third-party service in a unique manner tailored to your application’s needs.
    Advanced auto-configuration allows for deeper customization, giving you the ability
    to influence how Spring Boot sets up your application to perfectly suit your requirements.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能会遇到一个不符合标准自动配置模型的具体数据源，或者你可能需要以适应应用程序需求的方式独特地配置第三方服务。高级自动配置允许进行更深入的定制，让你能够影响
    Spring Boot 如何设置你的应用程序以完美满足你的要求。
- en: The value of advanced auto-configuration lies in its ability to maintain Spring
    Boot’s simplicity and efficiency while offering flexibility for handling more
    intricate configurations. It combines the ease of starting quickly with Spring
    Boot with the option to fine-tune configurations for complex scenarios.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 高级自动配置的价值在于其能够在保持 Spring Boot 的简洁性和效率的同时，提供处理更复杂配置的灵活性。它结合了使用 Spring Boot 快速启动的便利性以及为复杂场景微调配置的选项。
- en: Looking ahead, we will delve into utilizing these advanced auto-configuration
    features. We’ll cover topics such as creating custom auto-configurations, understanding
    conditional configurations, and even developing your own starters. This knowledge
    will enable you to adapt Spring Boot’s auto-configuration precisely to meet your
    application’s needs, streamlining and enhancing your development process.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 展望未来，我们将深入探讨利用这些高级自动配置功能。我们将涵盖创建自定义自动配置、理解条件配置以及开发自己的启动器等主题。这些知识将使你能够精确地调整 Spring
    Boot 的自动配置以满足应用程序的需求，从而简化并增强你的开发过程。
- en: Understanding conditional configuration
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解条件配置
- en: Isn’t it cool how Spring Boot can automatically configure your application based
    on the classes it finds in the classpath? What’s even cooler is its flexibility,
    thanks to the `@Conditional` annotations. These annotations allow Spring Boot
    to determine at runtime whether a particular configuration should be applied.
    This means you can customize your application’s behavior without altering your
    code – simply by adjusting the environment it operates in.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 能够根据类路径中找到的类自动配置你的应用程序，这不是很酷吗？更酷的是，它的灵活性，归功于 `@Conditional` 注解。这些注解允许
    Spring Boot 在运行时确定是否应该应用特定的配置。这意味着你可以通过调整应用程序运行的环境来定制应用程序的行为，而无需更改代码——只需调整其操作环境即可。
- en: The `@Conditional` annotations enable Spring Boot to make decisions based on
    specific conditions. For instance, you may want a bean to load only when a certain
    property is set or when a particular class is present. Spring Boot offers various
    `@Conditional` annotations to cater to different scenarios, including `@ConditionalOnProperty`,
    `@ConditionalOnClass`, and `@ConditionalOnExpression`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Conditional` 注解使 Spring Boot 能够根据特定条件做出决策。例如，你可能希望只有在设置了某个属性或存在特定类时才加载一个
    Bean。Spring Boot 提供了各种 `@Conditional` 注解来满足不同的场景，包括 `@ConditionalOnProperty`、`@ConditionalOnClass`
    和 `@ConditionalOnExpression`。'
- en: Imagine we decide not to use `LoggingAspect` in a specific environment and prefer
    to manage it through our properties file instead.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定在特定环境中不使用 `LoggingAspect`，而更愿意通过我们的属性文件来管理它。
- en: 'First, we need to introduce a property as follows to not use `LoggingAspect`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要引入以下属性来不使用 `LoggingAspect`：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, we can use this property in our `LoggingAspect` class with `@ConditionalOnExpression`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用这个属性在我们的 `LoggingAspect` 类中使用 `@ConditionalOnExpression`：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this way, the `@ConditionalOnExpression` annotation can directly read the
    `logging.aspect.enabled` property value. This condition creates the `LoggingAspect`
    bean based on the property’s value. If our value is `true`, then our `loggingAspect`
    class will work and log the methods. If the value is `false`, then this class
    will not be initiated and there will be no log in our console output.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，`@ConditionalOnExpression` 注解可以直接读取 `logging.aspect.enabled` 属性值。这个条件根据属性值创建
    `LoggingAspect` 实例。如果我们的值是 `true`，那么我们的 `loggingAspect` 类将工作并记录方法。如果值是 `false`，那么这个类将不会被初始化，并且控制台输出将不会有日志。
- en: Using conditional setup is a valuable technique for creating adaptable, context-specific
    functionality in your software. Whether you are working on a code base that requires
    different behaviors depending on specific conditions or developing an application
    that adjusts its features based on configuration settings, the use of the `@Conditional`
    annotations offers an organized and sustainable approach to achieving this goal.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用条件设置是一种在软件中创建适应性强、特定上下文的功能的有价值技术。无论你是在处理一个根据特定条件需要不同行为的代码库，还是在开发一个根据配置设置调整其特性的应用程序，使用`@Conditional`注解提供了一种有组织且可持续的方法来实现这一目标。
- en: The real strength of employing conditional setups becomes evident in intricate
    software systems and libraries where a high level of adaptability is necessary.
    Conditional setups enable you to construct components that are activated only
    under particular conditions, enhancing the modularity and flexibility of your
    application to suit diverse situations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用条件设置的真正优势在复杂的软件系统和库中变得明显，在这些系统中，高度的适应性是必要的。条件设置使你能够构建仅在特定条件下激活的组件，从而增强你应用程序的模块化和灵活性，以适应各种情况。
- en: After learning how to use conditional properties effectively to enable or disable
    features such as `LoggingAspect`, we are now prepared to explore common pitfalls
    and best practices of the features we have learned about in this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了如何有效地使用条件属性来启用或禁用诸如`LoggingAspect`等特性之后，我们现在准备探索本章所学的特性的常见陷阱和最佳实践。
- en: Common pitfalls and best practices
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见陷阱和最佳实践
- en: Embarking on the journey to master Spring Boot involves navigating its diverse
    ecosystem, which includes AOP, the Feign Client, and advanced auto-configuration.
    Understanding best practices and being mindful of common pitfalls are essential
    for developers to effectively utilize these powerful tools.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 开始掌握 Spring Boot 的旅程涉及导航其多样化的生态系统，其中包括 AOP、Feign 客户端和高级自动配置。了解最佳实践并关注常见陷阱对于开发者有效地利用这些强大的工具至关重要。
- en: This section is designed to equip developers with the knowledge needed to leverage
    these tools efficiently, emphasizing the importance of making well-informed decisions
    that align with specific project requirements. By outlining key strategies for
    optimal usage and addressing common mistakes along with practical solutions, supported
    by real-world examples for clarity, we pave the way for creating tidy, efficient,
    and sustainable Spring Boot applications. This exploration focuses not only on
    utilizing Spring Boot’s features but also on doing so in a manner that maximizes
    your project’s potential.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在为开发者提供利用这些工具所需的知识，强调做出与特定项目要求相一致的良好决策的重要性。通过概述最佳使用的关键策略，以及解决常见错误和实际解决方案，辅以现实世界的示例以增强清晰度，我们为创建整洁、高效和可持续的
    Spring Boot 应用程序铺平了道路。这次探索不仅关注利用 Spring Boot 的特性，而且关注以最大化项目潜力的方式来利用这些特性。
- en: Embracing best practices in Spring Boot – AOP, the Feign Client, and advanced
    auto-configuration
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接受 Spring Boot 的最佳实践——AOP、Feign 客户端和高级自动配置
- en: Spring Boot is a robust platform for developers, providing features such as
    AOP, the Feign Client, and sophisticated auto-configuration to simplify the process
    of developing applications. However, making the most of these tools necessitates
    a thorough grasp of their capabilities and how they align with your project. Let’s
    explore some recommended approaches for utilizing these functions optimally.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 是一个强大的开发者平台，提供了诸如 AOP、Feign 客户端和复杂的自动配置等特性，以简化应用程序的开发过程。然而，充分利用这些工具需要彻底掌握它们的特性以及它们如何与你的项目相匹配。让我们探讨一些推荐的方法，以最佳方式利用这些功能。
- en: Best practices in AOP
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AOP 的最佳实践
- en: 'AOP is a great way to organize your application by separating different aspects
    such as logging, security, and transaction management from the core business logic.
    To make the most out of it, do the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 面向切面编程（AOP）是一种通过将日志、安全性和事务管理等不同方面从核心业务逻辑中分离出来来组织应用程序的绝佳方式。为了充分利用它，请执行以下操作：
- en: '**Use AOP thoughtfully**: Only use it for aspects that cut across multiple
    parts of your code. Using it too much can make your application’s flow harder
    to understand.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谨慎使用 AOP**：仅对跨越你代码多个部分的功能使用它。过度使用它会使应用程序的流程更难以理解。'
- en: '**Define precise pointcuts**: Make sure your pointcut expressions are specific
    to avoid unintended advice applications, which could cause performance problems
    or bugs.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义精确的切入点**：确保您的切入点表达式是具体的，以避免意外应用建议，这可能会导致性能问题或错误。'
- en: '**Keep advice simple**: The advice should be straightforward and focused. Adding
    complex logic to advice can impact how well your application performs.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持建议简单**：建议应该是直接和专注的。将复杂逻辑添加到建议中可能会影响应用程序的性能。'
- en: Best practices in the Feign Client
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Feign Client的最佳实践
- en: 'The Feign Client makes it easier for your app to interact with other services
    through HTTP by transforming interface declarations into usable HTTP clients.
    To use the Feign Client effectively, do the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Feign Client通过将接口声明转换为可用的HTTP客户端，使您的应用程序更容易通过HTTP与其他服务交互。为了有效地使用Feign Client，请执行以下操作：
- en: '**Keep configuration centralized**: Create a centralized configuration class
    for all your Feign Clients to maintain organized and easily manageable settings.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持配置集中化**：为所有Feign Clients创建一个集中的配置类，以保持设置的组织性和易于管理。'
- en: '**Handle errors effectively**: Develop a custom error decoder to manage various
    responses from the services your app interacts with, ensuring robust error handling.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效处理错误**：开发自定义错误解码器来管理应用程序交互的服务提供的各种响应，确保健壮的错误处理。'
- en: '**Test with mocks**: Use the Feign Client’s mocking and stubbing capabilities
    to avoid real HTTP calls in your unit and integration testing.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用模拟进行测试**：利用Feign Client的模拟和存根功能，在单元和集成测试中避免进行真实的HTTP调用。'
- en: Best practices in advanced auto-configuration
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级自动配置的最佳实践
- en: 'Spring Boot’s advanced auto-configuration features offer the flexibility to
    customize the framework according to your requirements. Here are some suggestions
    on how to leverage it efficiently:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的高级自动配置功能提供了根据您的需求自定义框架的灵活性。以下是一些如何有效利用它的建议：
- en: '`@Conditional` annotations to ensure that your beans are only loaded when specific
    conditions are met, helping to maintain a streamlined application.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@Conditional`注解确保只有在满足特定条件时才加载您的bean，有助于保持应用程序的简洁。
- en: '**Preventing conflicts**: When developing custom auto-configurations, be sure
    to check for any existing configurations to prevent conflicts that may result
    in unexpected bean loading issues.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防止冲突**：在开发自定义自动配置时，务必检查任何现有配置，以防止可能导致的意外bean加载问题的冲突。'
- en: '`@AutoConfigureOrder`: In projects with multiple auto configurations, utilize
    `@AutoConfigureOrder` to manage their order and control the sequence of bean creation.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@AutoConfigureOrder`：在具有多个自动配置的项目中，使用`@AutoConfigureOrder`来管理它们的顺序和控制bean创建的顺序。'
- en: Utilizing AOP, the Feign Client, and advanced auto-configuration effectively
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有效利用AOP、Feign Client和高级自动配置
- en: 'To effectively utilize AOP, the Feign Client, and advanced auto-configuration,
    it’s crucial to grasp the ins and outs of these tools and make well-informed decisions
    based on your project’s requirements. Here are some key points to consider:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地利用AOP、Feign Client和高级自动配置，掌握这些工具的细节并根据项目需求做出明智的决策至关重要。以下是一些需要考虑的关键点：
- en: '**Evaluate your needs**: Before diving in, assess what your application truly
    requires. Not every project will benefit from the intricacies of AOP or the use
    of the Feign Client for every service interaction.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估您的需求**：在深入之前，评估您的应用程序真正需要什么。并非每个项目都会从AOP的复杂性或Feign Client在每次服务交互中使用中受益。'
- en: '**Understand the implications**: Consider how these tools can impact performance,
    maintainability, and testability. AOP may complicate debugging; the Feign Client
    adds a layer over HTTP calls, and advanced auto-configuration demands a deep understanding
    of Spring Boot’s internal workings.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解影响**：考虑这些工具如何影响性能、可维护性和可测试性。AOP可能会使调试复杂化；Feign Client在HTTP调用上添加了一层，而高级自动配置需要深入了解Spring
    Boot的内部工作原理。'
- en: '**Keep up to date**: Spring Boot advances swiftly with new features and enhancements
    in each release. Stay updated with the latest versions and recommended practices
    to leverage the full potential of Spring Boot offerings.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持最新状态**：Spring Boot随着每个版本的发布，迅速地引入新的特性和增强。保持对最新版本和推荐实践的更新，以充分利用Spring Boot提供的全部潜力。'
- en: Spring Boot offers a comprehensive toolkit for developing robust and efficient
    applications. By adhering to best practices for AOP, the Feign Client, and advanced
    auto-configuration, you can create applications that are not only powerful and
    scalable but also easy to manage and evolve. Remember to use these tools thoughtfully
    to ensure they enhance your project without unnecessary complexity.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 提供了一套全面的工具集，用于开发稳健且高效的应用程序。通过遵循 AOP、Feign 客户端和高级自动配置的最佳实践，你可以创建出不仅强大且可扩展，而且易于管理和演化的应用程序。请记住，要深思熟虑地使用这些工具，以确保它们在不增加不必要复杂性的情况下增强你的项目。
- en: Navigating common pitfalls in Spring Boot – AOP, the Feign Client, and advanced
    auto-configuration
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Spring Boot 中导航常见陷阱 – AOP、Feign 客户端和高级自动配置
- en: Spring Boot simplifies Java development and speeds up the process by taking
    care of many complex tasks. But remember, along with its benefits comes the need
    for caution. Let’s discuss some typical errors developers encounter while working
    with Spring Boot, particularly related to AOP, the Feign Client, and advanced
    auto-configuration, and ways to avoid them effectively.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 通过处理许多复杂任务简化了 Java 开发并加快了开发过程。但请记住，随着其益处而来的是需要谨慎。让我们讨论一下开发者在使用 Spring
    Boot 时遇到的典型错误，特别是与 AOP、Feign 客户端和高级自动配置相关的问题，以及如何有效地避免这些问题。
- en: Using AOP excessively
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过度使用 AOP
- en: '**Common pitfall**: One common error associated with AOP involves its excessive
    use for handling cross-cutting concerns that could be better managed elsewhere.
    This misuse can result in performance challenges and make debugging more complex
    since the flow of execution may become unclear.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见陷阱**：与 AOP 相关的一个常见错误是过度使用它来处理本可以更好地在其他地方管理的横切关注点。这种误用可能导致性能问题，并使调试更加复杂，因为执行流程可能变得不清晰。'
- en: '**Prevention strategy**: Employ AOP thoughtfully. Save it for genuine cross-cutting
    concerns such as logging, transaction management, or security. Always assess whether
    there’s a simpler, more straightforward approach to achieve the same objective
    without introducing an aspect.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预防策略**：谨慎地使用 AOP。将其保留用于真正的横切关注点，如日志记录、事务管理或安全。始终评估是否有更简单、更直接的方法来实现相同的目标，而无需引入方面。'
- en: Misconfiguring Feign Clients
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Feign 客户端错误
- en: '**Common pitfall**: It is quite easy to misconfigure Feign Clients. A common
    mistake is neglecting to customize the client according to the requirements of
    the target service, which can lead to issues such as timeouts or improper error
    handling.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见陷阱**：配置 Feign 客户端很容易出错。一个常见的错误是忽视根据目标服务的需求定制客户端，这可能导致超时或错误处理不当等问题。'
- en: '**Prevention strategy**: Personalize your Feign Clients for the services they
    are linked to. Adjust timeouts, error handling, and logging as necessary. Utilize
    the Feign Client’s features, such as custom encoders and decoders, to tailor the
    client specifically for the service.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预防策略**：为与你链接的服务个性化你的 Feign 客户端。根据需要调整超时、错误处理和日志记录。利用 Feign 客户端的特性，如自定义编码器和解码器，以针对特定服务定制客户端。'
- en: Disregarding auto-configuration conditions
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 忽视自动配置条件
- en: '**Common pitfall**: While Spring Boot’s auto-configuration feature is robust,
    it can result in undesired configurations if not managed carefully. Developers
    often rely on Spring Boot for auto-configuring everything without considering
    potential consequences, resulting in unnecessary beans being created or essential
    beans being assumed to be auto-configured.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见陷阱**：虽然 Spring Boot 的自动配置功能强大，但如果管理不当，可能会导致不希望的结果。开发者常常依赖 Spring Boot 自动配置一切，而不考虑潜在的后果，导致不必要的
    Bean 被创建或关键的 Bean 被假设为已自动配置。'
- en: '`@Conditional` annotations to adjust your setup, making sure beans are made
    only when necessary. Additionally, utilize `@ConditionalOnMissingBean` to establish
    defaults that come into play only if no other bean of that type is set up.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `@Conditional` 注解来调整你的配置，确保只有在必要时才创建 Bean。此外，利用 `@ConditionalOnMissingBean`
    来设置默认值，只有在该类型的其他 Bean 未设置时才会生效。
- en: Real-world example – incorrectly scoped proxies in AOP
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真实世界示例 – AOP 中错误配置的代理范围
- en: In a scenario where AOP is used for transaction management in an application,
    a developer mistakenly adds the aspect at the method level in a singleton-scoped
    service. This error causes the entire service to get locked during method execution,
    resulting in a bottleneck.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个应用程序中使用 AOP 进行事务管理的情况下，开发者错误地将方面添加到单例作用域服务的类级别方法中。这个错误导致整个服务在方法执行期间被锁定，从而形成瓶颈。
- en: To prevent this issue, ensure that your proxies are scoped correctly. When implementing
    transaction management, make sure aspects are applied around methods that alter
    state while considering the application’s concurrency requirements. Familiarize
    yourself with Spring’s proxying mechanisms to decide between interface-based (JDK
    proxy) or class-based (Code Generation Library [CGLIB] proxy) proxies based on
    your specific situation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这个问题，确保您的代理被正确地范围化。在实现事务管理时，确保在考虑应用程序的并发需求的同时，将方面应用于改变状态的方法周围。熟悉Spring的代理机制，根据您的具体情况决定使用基于接口的（JDK代理）或基于类的（代码生成库[CGLIB]代理）代理。
- en: By comprehending these tools and making informed choices tailored to your project’s
    unique demands, you can avoid common pitfalls and effectively leverage Spring
    Boot’s capabilities, resulting in well-maintained, efficient applications.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解这些工具并针对您项目的独特需求做出明智的选择，您可以避免常见的陷阱并有效地利用Spring Boot的功能，从而实现维护良好、高效的程序。关键在于简化您的开发过程并增强您应用程序的可靠性。
- en: Always remember that the objective is not simply to utilize Spring Boot’s features
    but to employ them thoughtfully.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 总是记住，目标不仅仅是利用Spring Boot的功能，而是要深思熟虑地使用它们。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we’ve delved into some of Spring Boot’s most impactful features,
    expanding our toolkit for creating strong and efficient applications. Let’s recap
    what we’ve discussed:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Spring Boot的一些最具影响力的功能，扩展了我们创建强大和高效应用程序的工具集。让我们回顾一下我们讨论的内容：
- en: '**Exploring AOP**: We explored how AOP can help in structuring code more effectively
    by separating tasks such as logging and security. This simplifies code management
    and comprehension.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索面向切面编程（AOP）**: 我们探讨了如何通过分离诸如日志记录和安全等任务来使用AOP更有效地构建代码。这简化了代码管理和理解。'
- en: '**Streamlining HTTP with the Feign Client**: We introduced the Feign Client,
    a tool that simplifies connecting with other services via HTTP. It focuses on
    keeping your code neat and enhancing your experience with web services.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Feign客户端简化HTTP**: 我们介绍了Feign客户端，这是一个简化通过HTTP连接到其他服务的工具。它专注于保持您的代码整洁并提高您使用Web服务的体验。'
- en: '**Progressing with Spring Boot auto-configuration**: We uncovered advanced
    auto-configuration methods that demonstrate how Spring Boot can be customized
    to suit your specific requirements, further streamlining your development workflow.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用Spring Boot自动配置进行进步**: 我们揭示了高级自动配置方法，展示了Spring Boot如何根据您的特定需求进行定制，进一步简化了您的开发工作流程。'
- en: '**Avoiding common issues and embracing best practices**: By discussing common
    problems and best practices, you’ve gained insights into effectively utilizing
    these tools to ensure that your applications are not only powerful but also easy
    to maintain and update.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免常见问题并采用最佳实践**: 通过讨论常见问题和最佳实践，您已经获得了有效利用这些工具的见解，以确保您的应用程序不仅强大，而且易于维护和更新。'
- en: Why are these lessons crucial? They go beyond utilizing the features of Spring
    Boot and emphasize using them thoughtfully. By grasping and applying the concepts
    we’ve covered, you’re on track to succeed in creating applications that are not
    only powerful and efficient but also organized and easy to manage. The key is
    to streamline your development process and strengthen your applications’ reliability.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这些课程至关重要？它们不仅超越了使用Spring Boot的功能，而且强调了深思熟虑地使用它们。通过掌握和应用我们涵盖的概念，您将朝着成功创建不仅强大高效，而且有组织且易于管理的应用程序迈进。关键是简化您的开发过程并增强您应用程序的可靠性。
- en: 'As we close this book, reflect on the key skills you’ve gained: mastering advanced
    Spring Boot features, implementing architectural patterns, and securing applications.
    You’ve also learned about reactive systems, data management, and building event-driven
    systems with Kafka. Equipped with these tools, you’re ready to tackle real-world
    projects effectively and efficiently. Congratulations on completing this journey,
    and here’s to your success in applying these powerful techniques in your development
    work!'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们结束这本书时，回顾一下您获得的关键技能：掌握高级Spring Boot功能、实现架构模式以及保护应用程序。您还学习了关于反应式系统、数据管理和使用Kafka构建事件驱动系统。装备了这些工具，您现在可以有效地应对现实世界项目。祝贺您完成这段旅程，并祝您在开发工作中应用这些强大技术取得成功！
