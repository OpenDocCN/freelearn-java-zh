- en: Chapter 13. Writing Play Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章。编写 Play 插件
- en: In order to make our applications manageable, we break them down into independent
    modules. These modules can also be extracted into individual projects/libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的应用可管理，我们将它们分解为独立的模块。这些模块也可以提取为单独的项目/库。
- en: A Play plugin is nothing but another module with an additional ability—of binding
    tasks before starting, on starting and/or stopping a Play application. In this
    chapter, we will see how to write custom plugins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Play 插件不过是另一个具有额外能力的模块——在启动前、启动时和/或停止 Play 应用时绑定任务。在本章中，我们将看到如何编写自定义插件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Plugin definition
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件定义
- en: Plugin declaration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件声明
- en: Exposing services through plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过插件公开服务
- en: Tips for writing a plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写插件的技巧
- en: Plugin definition
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件定义
- en: 'A Play plugin can be defined by extending `play.api.plugin`, which is defined
    as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Play 插件可以通过扩展`play.api.plugin`来定义，其定义如下：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we might be in a situation where we need to send an e-mail when an application
    is started or stopped so that the administrator can later use this time interval
    to monitor the application''s performance and check why it stopped. We could define
    a plugin to do this for us:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可能处于需要在一个应用启动或停止时发送电子邮件的情况，以便管理员可以稍后使用这个时间间隔来监控应用性能并检查为什么它停止。我们可以定义一个插件为我们完成这项工作：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also define plugins that make use of other libraries. We might need
    to build a plugin that builds a connection pool to `Cassandra` (a NoSQL database)
    on startup and allows users to use this pool later on. To build this plugin, we
    will use the `cassandra-driver` for Java. Our plugin will then be as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以定义利用其他库的插件。我们可能需要构建一个在启动时建立到`Cassandra`（一个 NoSQL 数据库）的连接池，并允许用户稍后使用此池的插件。为了构建此插件，我们将使用
    Java 的`cassandra-driver`。然后我们的插件将如下所示：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, `CassandraConnection` is defined as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`CassandraConnection`的定义如下：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `cassandra-driver` node is declared as a library dependency and its classes
    are imported where they're required.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`cassandra-driver`节点被声明为库依赖项，并在需要的地方导入其类。'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The dependency on Play in the `build` definition of the plugin should be marked
    as provided, since the application using the plugin will already have a dependency
    on Play, as shown here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件的`build`定义中，对 Play 的依赖项应标记为提供，因为使用插件的程序已经对 Play 有依赖，如下所示：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Plugin declaration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件声明
- en: 'Now that we have defined a plugin, let''s see how the Play Framework identifies
    and enables it for the application. `ApplicationProvider` for the production and
    development mode (static and reloadable applications, respectively) both rely
    on `DefaultApplication`, which is defined as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了一个插件，让我们看看 Play 框架是如何识别和启用它来应用于应用的。生产模式和开发模式（静态和可重载应用）的`ApplicationProvider`都依赖于`DefaultApplication`，其定义如下：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `trait WithDefaultPlugins` line is responsible for binding the plugins
    to application''s life cycle. It is defined as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`trait WithDefaultPlugins`行负责将插件绑定到应用的生命周期。其定义如下：'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, we should declare our plugin class in a file with the `play.plugins` name.
    All the plugin declarations obtained from one or more `play.plugins` files are
    combined and sorted. Each declared plugin has a priority assigned to it, which
    is used for sorting. Once sorted, the plugins are loaded in order prior to the
    application's startup.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该在名为`play.plugins`的文件中声明我们的插件类。从一个或多个`play.plugins`文件中获得的全部插件声明将被合并并排序。每个声明的插件都分配了一个优先级，用于排序。一旦排序，插件将按顺序在应用启动前加载。
- en: 'The priorities should be set based on the dependencies of a plugin. The suggested
    priorities are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应根据插件的依赖关系设置优先级。建议的优先级如下：
- en: '`100`: This priority is set when a plugin has no dependencies, such as the
    messages plugin (used for `i18n`)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`100`：当插件没有依赖项时，设置此优先级，例如消息插件（用于`i18n`）'
- en: '`200`: This priority is set for the plugins that create and manage the DB connection
    pools'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200`：此优先级是为创建和管理数据库连接池的插件设置的'
- en: '`300-500`: This priority is set for the plugins that depend on a database,
    such as JPA, Ebean, and evolutions'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`300-500`：此优先级是为依赖于数据库的插件设置的，例如 JPA、Ebean 和 evolutions'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`10000` is reserved for a global plugin intentionally so that it loads after
    all the other plugins have been loaded. This allows developers to use other plugins
    in the global object without additional configuration.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`10000`被有意保留作为全局插件，以便在所有其他插件加载之后加载。这允许开发者在使用全局对象时无需额外配置即可使用其他插件。'
- en: 'The default `play.plugins` file just has a basic plugin declaration:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`play.plugins`文件只包含基本的插件声明：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A few more plugin declarations from the Play modules are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Play模块中的一些更多插件声明如下：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Generally, Play plugins need to be specified as library dependencies in the
    application's `build` definition. Some plugins are bundled with a `play.plugins`
    file. However, for those without it, we will need to set the priority in our application's
    `conf/play.plugins` file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Play插件需要在应用程序的`build`定义中指定为库依赖项。一些插件与`play.plugins`文件捆绑在一起。然而，对于那些没有的，我们需要在我们的应用程序的`conf/play.plugins`文件中设置优先级。
- en: Exposing services through plugins
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过插件公开服务
- en: 'Some plugins need to provide users with helper methods to simplify transactions,
    whereas others need not do anything besides some tasks to be added in the application''s
    life cycle. For example, our `NotifierPlugin` just sends e-mails on start and
    stop. Then, the methods of our `CassandraPlugin` can be accessed using the `plugin`
    method of `play.api.Application`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件需要为用户提供辅助方法以简化事务，而其他插件则只需在应用程序的生命周期中添加一些任务。例如，我们的`NotifierPlugin`仅在启动和停止时发送电子邮件。然后，可以通过`play.api.Application`的`plugin`方法访问`CassandraPlugin`的方法：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alternatively, the plugin can also provide a helper object:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，插件也可以提供一个辅助对象：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A list of available modules is maintained at [https://www.playframework.com/documentation/2.3.x/Modules](https://www.playframework.com/documentation/2.3.x/Modules).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可用模块的列表维护在[https://www.playframework.com/documentation/2.3.x/Modules](https://www.playframework.com/documentation/2.3.x/Modules)。
- en: Tips for writing a plugin
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写插件的技巧
- en: 'Here are some tips for writing a plugin:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些编写插件的技巧：
- en: Before you start writing a plugin, check if you really need one to solve your
    problem. If your problem does not require meddling with the application's life
    cycle, it's better to write a library.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始编写插件之前，检查你是否真的需要一个插件来解决你的问题。如果你的问题不需要干预应用程序的生命周期，那么编写一个库会更好。
- en: While writing/updating a plugin, simultaneously build an example Play application
    that uses the plugin. This will allow you to check the functionality of it thoroughly
    with only the additional overheads of publishing the plugin locally for every
    change made.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写/更新插件的同时，构建一个使用该插件的示例Play应用程序。这将允许你仅通过在每次更改时本地发布插件来检查其功能的完整性。
- en: If the plugin exposes some services, try to provide a helper object. This makes
    it easier to maintain the API's consistency and also simplifies the developer
    experience.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果插件公开了一些服务，尝试提供一个辅助对象。这有助于保持API的一致性，并简化开发者的体验。
- en: For example, most of the plugins provided by Play (such as `akka`, `jdbc`, `ws`,
    and so on) provide helper objects through which the API is available. Internal
    changes to the plugin do not affect the public API exposed through these objects.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，Play提供的多数插件（如`akka`、`jdbc`、`ws`等）都通过提供辅助对象来使API可用。插件内部的更改不会影响通过这些对象公开的公共API。
- en: If and where possible, try and back up the plugin with sufficient tests.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能的话，尽量用足够的测试来支持插件。
- en: Document the API and/or special cases. This might come in handy in future for
    everyone who uses the plugin.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录API和/或特殊情况。这可能会在将来对使用插件的每个人都有帮助。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Play plugins provide us with the flexibility to perform specific tasks at
    a desired stage in the application's life cycle. Play has some plugins that are
    commonly required by most applications, such as web services, authentication,
    and so on. We discussed how the Play plugins work and how we can build custom
    plugins to meet different requirements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Play插件为我们提供了在应用程序生命周期的特定阶段执行特定任务的灵活性。Play有一些插件是大多数应用程序通常需要的，例如Web服务、认证等。我们讨论了Play插件的工作原理以及如何构建自定义插件以满足不同的需求。
