- en: Chapter 10. Spring Cache
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。Spring缓存
- en: Spring cache has come into action since the Spring 3.1 versions. Spring has
    also added annotations to support the caching mechanism. The caching abstraction
    layer provides a lot of support to use different caching solutions. In this chapter,
    we shall explore Spring caching. We shall see how to set up a Spring cache. You
    can ideally tie your caching code with a business logic.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自Spring 3.1版本以来，Spring缓存已经开始起作用。Spring还添加了注释来支持缓存机制。缓存抽象层提供了很多支持来使用不同的缓存解决方案。在本章中，我们将探讨Spring缓存。我们将看到如何设置Spring缓存。您可以理想地将您的缓存代码与业务逻辑绑定在一起。
- en: Caching avoids re-computing. Ideally, you don't have to repeat the same process
    again to fetch the same values. Cache stores the values in the memory. You can
    always choose what you would like to cache and what you don't like to. It's a
    part of architectural design. Once the data is cached, it's retrieved from the
    cached memory, thus saving computational time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存避免重新计算。理想情况下，您不必再次重复相同的过程来获取相同的值。缓存将值存储在内存中。您可以随时选择您想要缓存和不想要缓存的内容。这是架构设计的一部分。一旦数据被缓存，它将从缓存的内存中检索，从而节省计算时间。
- en: Spring annotations for caching
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于缓存的Spring注释
- en: 'Spring has come up with two main annotations for caching; we will be using
    these throughout the chapter. The following are the two annotations:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提出了两个主要的用于缓存的注释；我们将在整个章节中使用这些。以下是这两个注释：
- en: '`@Cacheable`: This can be used to mark the method and return values that will
    be stored in the cache. This can be applied at the method or type level.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Cacheable`：这可以用于标记将存储在缓存中的方法和返回值。这可以应用于方法或类型级别。'
- en: When applied at the method level, the annotated method's return value is cached
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用于方法级别时，被注释方法的返回值将被缓存
- en: When applied at type level, the return value of every method is cached
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用于类型级别时，每个方法的返回值都被缓存
- en: '`@CacheEvict`: This is used for releasing objects from cache memory.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@CacheEvict`：用于释放缓存内存中的对象。'
- en: '@Cacheable usage'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@Cacheable用法'
- en: 'Let us look at small implementation of using `@Cacheable` annotations applied
    at type level. We are thinking of simple DAO class, with two methods with different
    names. We have used the `@Cacheabl`e annotation, which takes three arguments:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下在类型级别应用`@Cacheable`注解的小实现。我们考虑一个简单的DAO类，有两个不同名称的方法。我们使用了`@Cacheable`注解，它接受三个参数：
- en: Value
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值
- en: Key
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键
- en: Condition
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件
- en: 'No we can implement it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以实现它：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, Spring cache by default will assign a cache key, with
    an annotated signature.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，Spring缓存默认会分配一个缓存键，带有注释的签名。
- en: 'We can also provide a customized key. Using SpEL expressions, the following
    is the demonstration for providing custom keys for cache:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提供自定义键。使用SpEL表达式，以下是提供自定义缓存键的演示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also perform conditional caching. Let us do conditional caching of products
    with a price greater than 1000:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以执行条件缓存。让我们对价格大于1000的产品进行条件缓存：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The @CacheEvict usage
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@CacheEvict用法'
- en: 'Let us look at using `@CacheEvict` for flushing single objects and multiple
    objects from the cache. The `productId` will have new cached values every time
    and the user adds a rating. The previous rating will get evicted:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下如何使用`@CacheEvict`来刷新缓存中的单个对象和多个对象。每次用户添加评分时，`productId`都将有新的缓存值。以前的评分将被清除：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The following is the `@CacheEvict` usage for flushing all the cached objects.
    You can see that multiple objects are flushed at one time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于刷新所有缓存对象的`@CacheEvict`用法。您可以看到一次刷新多个对象。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Spring caching repository
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring缓存存储库
- en: 'The cache repository is where the actual objects are saved. Spring supports
    two types of repositories:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存存储库是实际对象保存的地方。Spring支持两种类型的存储库：
- en: Using `ConcurrentMap` is also an option for implementing caching in the application.
    The repository has little (if any) effect on the code, and switching between repositories
    should be very easy. Our objects will be cached within a ConcurrentMap.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ConcurrentMap`也是在应用程序中实现缓存的选项。存储库对代码几乎没有（如果有的话）影响，并且在不同存储库之间切换应该非常容易。我们的对象将被缓存在ConcurrentMap中。
- en: 'We can configure the ConcurrentMap as shown in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据以下代码配置ConcurrentMap：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Ehcache popular library
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ehcache流行的库
- en: This cache is used by a lot of popular frameworks to handle caching in an application.
    The ehcache is used by a hibernate framework to handle caching in the DAO (Date
    access) layer of the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个缓存被许多流行的框架用来处理应用程序中的缓存。ehcache被hibernate框架用来处理应用程序的DAO（数据访问）层中的缓存。
- en: We can have more than one repository. Note that, the name of this repository
    must be same as the name used in the annotation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有多个存储库。请注意，此存储库的名称必须与注释中使用的名称相同。
- en: Spring CacheManager
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring CacheManager
- en: 'Let''s look at the core interfaces and implementation classes that are used
    for configuring caching in a Spring caching framework. Spring CacheManager is
    actually an interface in the Spring''s caching framework. The following is the
    list of classes that implement the CacheManager interface:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下在Spring缓存框架中用于配置缓存的核心接口和实现类。Spring CacheManager实际上是Spring缓存框架中的一个接口。以下是实现CacheManager接口的类的列表：
- en: '`AbstractCacheManager`: This abstract class implements the `CacheManager` interface.
    It is useful for static environments, where the backing caches do not change.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AbstractCacheManager`：这个抽象类实现了`CacheManager`接口。它对于静态环境很有用，其中后备缓存不会改变。'
- en: '`CompositeCacheManager`: This is the composite `CacheManager` implementation
    that iterates over a given collection of `CacheManager` instances. It allows `NoOpCacheManager`
    to be automatically added to the list for handling the cache declarations without
    a backing store.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CompositeCacheManager`：这是复合`CacheManager`实现，它遍历给定的`CacheManager`实例集合。它允许自动将`NoOpCacheManager`添加到列表中，以处理没有后备存储的缓存声明。'
- en: '`ConcurrentMapCacheManager`: This is the `CacheManager` implementation that
    lazily builds `ConcurrentMapCache` instances for each `getCache(java.lang.String)`
    request. It also supports a static mode where the set of cache names is predefined
    through `setCacheNames(java.util.Collection)`, with no dynamic creation of further
    cache regions at runtime.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConcurrentMapCacheManager`：这是`CacheManager`的实现，它会为每个`getCache(java.lang.String)`请求懒惰地构建`ConcurrentMapCache`实例。它还支持一个静态模式，其中缓存名称集合是通过`setCacheNames(java.util.Collection)`预定义的，不会在运行时动态创建更多的缓存区域。'
- en: '`ehCacheCacheManager`: `CacheManager` backed by an EhCache `CacheManager`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ehCacheCacheManager`：由EhCache `CacheManager`支持的`CacheManager`。'
- en: '`NoOpCacheManager`: A basic, no operation CacheManager implementation suitable
    for disabling caching, typically used for backing cache declarations without an
    actual backing store. It will simply accept any items into the cache, without
    actually storing them.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoOpCacheManager`：适用于禁用缓存的基本的无操作CacheManager实现，通常用于支持缓存声明而没有实际的后备存储。它将简单地接受任何项目到缓存中，而不实际存储它们。'
- en: '`SimpleCacheManager`: The Simple CacheManager works against a given collection
    of caches. This is useful for testing or simple caching declarations.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SimpleCacheManager`：Simple CacheManager针对给定的缓存集合工作。这对于测试或简单的缓存声明很有用。'
- en: Maven dependency for Spring with caching
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring的Maven依赖与缓存
- en: 'If you are using Maven as a build tool, ensure that you add the ehcache dependency
    in the `pom.xml` file. Below is the Maven dependency for using cache with spring''s
    caching framework:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Maven作为构建工具，请确保在`pom.xml`文件中添加ehcache依赖项。以下是在Spring的缓存框架中使用缓存的Maven依赖项：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Declarative configuration of ehcache
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ehcache的声明式配置
- en: 'In the following section, we can see how we can configure the cache storage
    declaratively. The `ecache.xml` file is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们可以看到如何以声明方式配置缓存存储。`ecache.xml`文件如下：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s also look at what each of the following properties used in the `echace.xml`
    mean, so that it will aid in their proper usage:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也看看`echace.xml`中使用的以下属性的含义，以便在正确使用它们时有所帮助：
- en: '`maxBytesLocalHeap`: This defines how many bytes the cache may use from the
    VM''s heap. If a CacheManager `maxBytesLocalHeap` has been defined, this cache''s
    specified amount will be subtracted from the CacheManager. Other caches will share
    the remainder. This attribute''s values are given as `<number>k|K|m|M|g|G` for
    kilobytes (k|K), megabytes (m|M), and gigabytes (g|G). For example, `maxBytesLocalHeap="2g"`
    allots 2 gigabytes of heap memory. If you specify a `maxBytesLocalHeap`, you can''t
    use the `maxEntriesLocalHeap` attribute. `maxEntriesLocalHeap` can''t be used
    if a CacheManager `maxBytesLocalHeap` is set.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxBytesLocalHeap`：这定义了缓存可以从VM堆中使用多少字节。如果已定义了CacheManager `maxBytesLocalHeap`，则此缓存的指定数量将从CacheManager中减去。其他缓存将共享余额。此属性的值以`<number>k|K|m|M|g|G`表示，用于千字节（k|K）、兆字节（m|M）和千兆字节（g|G）。例如，`maxBytesLocalHeap="2g"`分配了2千兆字节的堆内存。如果指定了`maxBytesLocalHeap`，则不能使用`maxEntriesLocalHeap`属性。如果设置了CacheManager
    `maxBytesLocalHeap`，则不能使用`maxEntriesLocalHeap`。'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Set at the highest level, this property defines the memory allocated for all
    the defined caches. You have to divide it afterwards with the individual caches.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高级别设置，此属性定义了为所有定义的缓存分配的内存。之后您必须将其与各个缓存分开。
- en: '`eternal`: This sets whether the elements are eternal. If eternal, timeouts
    are ignored and the element is never expired.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eternal`：这设置了元素是否是永恒的。如果是永恒的，超时将被忽略，元素永远不会过期。'
- en: '`timeToIdleSeconds`: This sets the time to idle for an element before it expires.
    That is, the maximum amount of time between accesses before an element expires.
    It is only used if the element is not eternal. Optional attribute. A value of
    `0` means that an element can idle for infinity. The default value is `0`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeToIdleSeconds`：这设置了元素在过期之前的空闲时间。也就是说，元素在过期之前的访问之间的最长时间。只有在元素不是永久的情况下才会使用。可选属性。值为`0`表示元素可以无限期地空闲。默认值为`0`。'
- en: '`timeToLiveSeconds`: This sets the time to live for an element before it expires
    which is the maximum time between creation time and when an element expires. It
    is only used if the element is not eternal. Optional attribute. A value of `0`
    means that an element can live for infinity. The default value is 0.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeToLiveSeconds`：这设置了元素在过期之前的生存时间，即创建时间和元素过期时间之间的最长时间。只有在元素不是永久的情况下才会使用。可选属性。值为`0`表示元素可以永久存活。默认值为0。'
- en: '`memoryStoreEvictionPolicy`: The policy would be enforced upon reaching the
    `maxEntriesLocalHeap` limit. The default policy is **Least Recently Used** (**LRU**).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memoryStoreEvictionPolicy`：在达到`maxEntriesLocalHeap`限制时将执行该策略。默认策略为**最近最少使用**（**LRU**）。'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want take some load off your database, you could also use the `localTempSwap`
    persistence strategy, and in that case, you can use `maxEntriesLocalDisk` or `maxBytesLocalDisk`
    at either the cache or CacheManager level to control the size of the disk tier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从数据库中卸载一些负载，还可以使用`localTempSwap`持久性策略，在这种情况下，您可以在缓存或CacheManager级别使用`maxEntriesLocalDisk`或`maxBytesLocalDisk`来控制磁盘层的大小。
- en: Two of the configured caches, reference Data and `newestAndRecommendedPodcasts`
    are pinned in the local memory (`<pinning store="localMemory"/>`), which means
    that the data will remain in the cache at all times. To unpin the data from the
    cache you have to clear the cache.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 已配置的两个缓存，参考数据和`newestAndRecommendedPodcasts`都固定在本地内存中（`<pinning store="localMemory"/>`），这意味着数据将始终保留在缓存中。要从缓存中取消固定数据，您必须清除缓存。
- en: Spring MVC with caching
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带缓存的Spring MVC
- en: In this section, let us develop a simple MVC application to demonstrate simple
    spring caching. Let us start with the configuration.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们开发一个简单的MVC应用程序来演示简单的Spring缓存。让我们从配置开始。
- en: 'To enable caching, we need to add the following configuration to the application
    `context.xml` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用缓存，我们需要将以下配置添加到应用程序`context.xml`文件中：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`<cache:annotation-driven />` will recognize the spring cache annotations `@Cacheable`
    and `@CacheEvict`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`<cache:annotation-driven />`将识别spring缓存注释`@Cacheable`和`@CacheEvict`。'
- en: 'Let us demonstrate an application `context.xml` file with a simple caching
    configuration:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示一个带有简单缓存配置的应用程序`context.xml`文件：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next let us demonstrate the `ehchace.xml` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们演示`ehchace.xml`文件：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we shall see a simple POJO class `Author.java`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到一个简单的POJO类`Author.java`：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we shall write a simple controller with the injected Author pojo:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个带有注入的Author pojo的简单控制器：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Lastly, we shall write a `.jsp` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将编写一个`.jsp`文件：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When we run the application with `http://localhost:8080/springcachedemo/index.htm?id=1`,
    the data gets cached and the second time we access the URL you will be able to
    observe that the value is retrieved from cache.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`http://localhost:8080/springcachedemo/index.htm?id=1`运行应用程序时，数据被缓存，第二次访问URL时，您将能够观察到该值是从缓存中检索出来的。
- en: Now update the ID in the URL `id=2.Access http://localhost:8080/springcachedemo/index.htm?id=2`,
    the data is not retrieved from cache, but it gets cached.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在URL中更新ID `id=2.访问http://localhost:8080/springcachedemo/index.htm?id=2`，数据不是从缓存中检索出来的，但它被缓存了。
- en: Implementing your own caching algorithm
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自己的缓存算法
- en: In this section, let us start by implementing a simple cache algorithm and see
    its draw backs, and then show how spring caching can be used to solve the problems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，让我们首先实现一个简单的缓存算法，看看它的缺点，然后展示spring缓存如何解决这些问题。
- en: 'Let''s draw a simple flow chart to look at the caching scenario:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制一个简单的流程图来看看缓存场景：
- en: '![Implementing your own caching algorithm](img/7320OS_10_01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![实现自己的缓存算法](img/7320OS_10_01.jpg)'
- en: Let's see how we can implement caching in a simple way. Think of generating
    a Fibonacci number. A Fibonacci number is generated by adding its previous two
    Fibonacci numbers. So we can compute a simple class in java and see how we can
    use caching here.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何以简单的方式实现缓存。想象一下生成一个斐波那契数。斐波那契数是通过将其前两个斐波那契数相加而生成的。因此，我们可以在java中计算一个简单的类，并看看我们如何在这里使用缓存。
- en: 'Let''s create a map to cache the objects:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个用于缓存对象的映射：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This approach is not thread safe and the same value is computed more than once.
    When two threads run over the class, they end up caching the same value.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不是线程安全的，同样的值会被计算多次。当两个线程运行在这个类上时，它们最终会缓存相同的值。
- en: 'We can overcome this by implementing concurrent hash maps. The preceding code
    can be rewritten as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过实现并发哈希映射来克服这一问题。上述代码可以重写如下：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code will make the algorithm thread safe, preventing the re-computation
    of the same values. But this design cannot be used for other algorithms. If we
    have to find whether the next Fibonacci number is odd or prime, this wouldn't
    be supported.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将使算法线程安全，防止相同值的重新计算。但这种设计不能用于其他算法。如果我们要找出下一个斐波那契数是奇数还是质数，这是不支持的。
- en: Let us tackle this using Future, Callable ExecutorService, and Concurrent HashMap.
    We will also see what Future callable and executor Service means.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Future、Callable ExecutorService和Concurrent HashMap来解决这个问题。我们还将看到Future
    callable和executor Service的含义。
- en: '**ExecutorService** provides options to create thread pool. ExecutorService
    is an interface in concurrency package. `ThreadPoolExecutor` and `ScheduledThreadPoolExecutor`
    are the two classes that implement the `ExecutorService`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**ExecutorService**提供了创建线程池的选项。ExecutorService是并发包中的一个接口。`ThreadPoolExecutor`和`ScheduledThreadPoolExecutor`是实现`ExecutorService`的两个类。'
- en: 'There are a few different ways to delegate tasks for execution to a `ExecutorService`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以将任务委托给`ExecutorService`进行执行：
- en: execute (Runnable)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: execute (Runnable)
- en: submit (Runnable)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: submit (Runnable)
- en: submit (Callable)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: submit (Callable)
- en: invokeAny (...)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: invokeAny (...)
- en: invokeAll (...)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: invokeAll (...)
- en: '**Callable** is an interface similar to Runnable. It is a task that returns
    a result and may throw an exception. Implementors define a single method with
    no arguments called `call`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Callable**是类似于Runnable的接口。它是一个返回结果并可能抛出异常的任务。实现者定义了一个没有参数的方法叫做`call`。'
- en: The Callable interface is similar to Runnable, in that, both are designed for
    classes whose instances are potentially executed by another thread. A Runnable,
    however, does not return a result and cannot throw a checked exception.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Callable接口类似于Runnable，两者都设计用于其实例可能由另一个线程执行的类。然而，Runnable不返回结果，也不能抛出已检查的异常。
- en: The Executors class contains utility methods to convert from other common forms
    to Callable classes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Executors类包含了将其他常见形式转换为Callable类的实用方法。
- en: Let us create a generic class; `MyCache`, this class instance accepts the Key
    and Value pair. It uses a concurrent `HashMap`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个通用类；`MyCache`，这个类实例接受键和值对。它使用并发`HashMap`。
- en: Let's call the `getter` and `setter` methods on condition; if the value is already
    in the cache, then just get the value, and set it only if it is absent.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在条件上调用`getter`和`setter`方法；如果值已经在缓存中，那么只需获取该值，并且只有在不存在时才设置它。
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The next step is to use the cache algorithm in our Fibonacci series code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤是在我们的斐波那契数列代码中使用缓存算法：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see in the preceding example, the modifications required were minimal.
    All caching code is encapsulated within the caching algorithm and our code simply
    interacts with it. The caching algorithm is thread safe and since all the state
    is saved by the caching algorithm, our class is inherently thread safe. Using
    this new approach, we can have this class (`MyFibonacci`) focusing on its business
    logic, that is, computing the Fibonacci sequence. Each Fibonacci number is evaluated
    only once. All the other times, this was retrieved from the cache. In the following
    example, we will see how to use the same cache algorithm in another context. Think
    of a long learning task which needs to use a cache. We shall use a Spring Stop
    Watch class found in the `org.spring.framework.util.StopWatch` package. The class
    has two constructors:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的示例中所看到的，所需的修改非常少。所有缓存代码都封装在缓存算法中，我们的代码只是与之交互。缓存算法是线程安全的，由于所有状态都由缓存算法保存，我们的类本质上是线程安全的。使用这种新方法，我们可以让这个类（`MyFibonacci`）专注于其业务逻辑，即计算斐波那契数列。每个斐波那契数只计算一次。所有其他时间，这些都是从缓存中检索的。在下面的示例中，我们将看到如何在另一个上下文中使用相同的缓存算法。想象一个需要使用缓存的长时间学习任务。我们将使用`org.spring.framework.util.StopWatch`包中的Spring
    Stop Watch类。该类有两个构造函数：
- en: '`StopWatch()`: This constructs a new stop watch'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StopWatch()`: 这构造一个新的秒表'
- en: '`StopWatch(String id)`: This constructs a new stop watch with the given ID'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StopWatch(String id)`: 这构造一个带有给定ID的新秒表'
- en: The simple stop watch allows for timing a number of tasks, exposing a total
    running time, and giving a running time for each named task. It conceals the use
    of `System.currentTimeMillis()`, improving the readability of the application
    code, and reducing the likelihood of calculation errors.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的秒表允许计时多个任务，公开总运行时间，并为每个命名任务提供运行时间。它隐藏了`System.currentTimeMillis()`的使用，提高了应用程序代码的可读性，并减少了计算错误的可能性。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this object is not designed to be thread safe, and does not use synchronization
    or threading. Therefore it is safe to invoke it from EJBs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个对象不是设计为线程安全的，并且不使用同步或线程。因此，可以从EJB中调用它是安全的。
- en: This class is normally used to verify performance during proof of concepts and
    in development, rather than as part of production applications.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类通常用于验证概念证明和开发中的性能，而不是作为生产应用程序的一部分。
- en: 'Let''s look at the code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Output for the preceding code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: No changes were required to the caching algorithm and implementing it was quite
    easy. The preceding code will produce something similar to the following code.
    As shown in the preceding output, once the first value is computed and saved in
    cache, all other retrievals happen instantly without introducing any noticeable
    delays.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对缓存算法没有进行任何更改，并且实现起来非常容易。前面的代码将产生类似于以下代码的结果。如前面的输出所示，一旦第一个值被计算并保存在缓存中，所有其他检索都会立即发生，而不会引入任何明显的延迟。
- en: Let's go further and implement the preceding log running task and cache the
    computational value using spring cache.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步实现前面的长时间运行任务，并使用spring缓存缓存计算值。
- en: 'We will create two simple classes: `Worker` and `Main`. The `Worker` class
    has two methods which are called from the `main` class:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个简单的类：`Worker`和`Main`。`Worker`类有两个方法，这些方法从`main`类中调用：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can observe that the Longtask has passed the same value to be recomputed.
    We can tackle this with the `@Cacheable` annotation. The preceding code can be
    rewritten, as follows. This will prevent the recompilation of Longtask for the
    same value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观察到Longtask已经传递了相同的值进行重新计算。我们可以使用`@Cacheable`注解来解决这个问题。前面的代码可以重写如下。这将防止对相同值的Longtask进行重新编译。
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how we can implement our own caching algorithm and how
    to make a generic algorithm. We looked at Spring support for caching, and different
    kinds of caching repositories in the Spring caching framework. We have demonstrated
    how caching can be used with annotations in the Spring MVC application. We have
    also discussed the scenario of removing cache and when is it ideal to opt for
    caching. Lastly, we also discussed the classes and interface that supports the
    caching mechanism in Spring framework.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何实现自己的缓存算法以及如何制作一个通用算法。我们研究了Spring对缓存的支持，以及Spring缓存框架中不同类型的缓存存储库。我们演示了如何在Spring
    MVC应用程序中使用注解来使用缓存。我们还讨论了移除缓存的场景以及何时最适合选择缓存。最后，我们还讨论了在Spring框架中支持缓存机制的类和接口。
- en: In the next chapters, we shall look at Spring with the thymeleaf framework integration
    and Spring Webservices.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将研究Spring与thymeleaf框架集成和Spring Webservices。
