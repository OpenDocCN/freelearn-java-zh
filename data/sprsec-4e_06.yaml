- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: LDAP Directory Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP目录服务
- en: In this chapter, we will review the (**LDAP**) and learn how it can be integrated
    into a Spring Security-enabled application to provide authentication, authorization,
    and user information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾（**LDAP**）并学习如何将其集成到启用Spring Security的应用程序中，以提供身份验证、授权和用户信息。
- en: 'During the course of this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的讨论过程中，我们将涵盖以下主题：
- en: Learning some of the basic concepts related to the LDAP protocol and server
    implementations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习与LDAP协议和服务器实现相关的一些基本概念
- en: Configuring a self-contained LDAP server within Spring Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring Security中配置一个自包含的LDAP服务器
- en: Enabling LDAP authentication and authorization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用LDAP身份验证和授权
- en: Understanding the model behind LDAP search and user matching
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解LDAP搜索和用户匹配背后的模型
- en: Retrieving additional user details from standard LDAP structures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从标准LDAP结构中检索额外的用户详细信息
- en: Differentiating between LDAP authentication methods and evaluating the pros
    and cons of each type
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分LDAP身份验证方法并评估每种类型的优缺点
- en: Explicitly configuring Spring Security LDAP using Spring bean declarations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring bean声明显式配置Spring Security LDAP
- en: Connecting to external LDAP directories
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到外部LDAP目录
- en: Exploring the built-in support for Microsoft AD
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索对Microsoft AD的内置支持
- en: We will also explore how to customize Spring Security for more flexibility when
    dealing with custom AD deployments
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将探讨如何定制Spring Security，以便在处理自定义AD部署时具有更大的灵活性
- en: 'This chapter’s code in action link is here: [https://packt.link/f2tf1](https://packt.link/f2tf1).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章代码的实际链接在这里：[https://packt.link/f2tf1](https://packt.link/f2tf1)。
- en: Understanding LDAP
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解LDAP
- en: LDAP has its roots in logical directory models dating back over 30 years, conceptually
    akin to a combination of an organizational chart and an address book. Today, LDAP
    is used more and more to centralize corporate user information, partition thousands
    of users into logical groups, and allow unified sharing of user information between
    many disparate systems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP的根源可以追溯到30多年前的逻辑目录模型，概念上类似于组织结构图和地址簿的结合。如今，LDAP越来越多地被用于集中化企业用户信息，将成千上万的用户划分为逻辑组，并允许在许多不同的系统之间统一共享用户信息。
- en: For security purposes, LDAP is quite commonly used to facilitate centralized
    username and password authentication—user credentials are stored in the LDAP directory,
    and authentication requests can be made against the directory on the user’s behalf.
    This eases management for administrators, as user credentials—login ID, password,
    and other details—are stored in a single location in the LDAP directory. Additionally,
    organizational information, such as group or team assignments, geographic location,
    and corporate hierarchy membership, are defined based on the user’s location in
    the directory.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，LDAP通常被广泛用于简化集中式的用户名和密码身份验证——用户凭据存储在LDAP目录中，并且可以代表用户向目录发起身份验证请求。这简化了管理员的管理工作，因为用户凭据（登录ID、密码和其他详细信息）存储在LDAP目录的单个位置。此外，基于用户在目录中的位置，定义了组织信息，如组或团队分配、地理位置和公司层级成员资格。
- en: LDAP
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LDAP
- en: 'At this point, if you have never used LDAP before, you may be wondering what
    it is. We’ll illustrate a sample LDAP schema with a screenshot from the Apache
    Directory Server example directory:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果你之前从未使用过LDAP，你可能想知道它是什么。我们将通过Apache Directory Server示例目录的截图来展示一个样本LDAP模式：
- en: '![Figure 6.1 – Example of LDAP directory structure](img/B21757_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – LDAP目录结构示例](img/B21757_06_01.jpg)'
- en: Figure 6.1 – Example of LDAP directory structure
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – LDAP目录结构示例
- en: Starting at a particular user entry for `uid=admin1@example.com` (highlighted
    in the preceding screenshot), we can infer the organizational membership of `admin1`
    by starting at this node in the tree and moving upward. We can see that the user
    `aeinstein` is a member of the `users` organizational unit (`ou=users`), which
    itself is a part of the `example.com` domain (the abbreviation `dc` shown in the
    preceding screenshot stands for **domain component**).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从`uid=admin1@example.com`（在前面的截图中被突出显示）的特定用户条目开始，我们可以通过从树中的这个节点开始向上移动来推断`admin1`的组织成员资格。我们可以看到用户`aeinstein`是`users`组织单元（`ou=users`）的成员，而`users`组织单元本身又是`example.com`域的一部分（前一个截图中的缩写`dc`代表**域组件**）。
- en: Preceding this are the organizational elements (`DIT` and `Root` `DSE`) of the
    LDAP tree itself, which don’t concern us in the context of Spring Security. The
    position of the user `aeinstein` in the LDAP hierarchy is semantically and definitively
    meaningful—you can imagine a much more complex hierarchy easily illustrating the
    organizational and departmental boundaries of a huge organization.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前是LDAP树本身的组织元素（`DIT`和`Root` `DSE`），在Spring Security的上下文中我们不关心这些。用户`aeinstein`在LDAP层次结构中的位置在语义上是明确且有意义的——你可以想象一个更复杂的层次结构，它可以很容易地说明一个大组织的组织和部门边界。
- en: 'The complete top-to-bottom path formed by walking down the tree to an individual
    leaf node forms a string composed of all intervening nodes along the way, as with
    the node path of `admin1`, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过沿着树向下走到一个单独的叶节点形成的完整从上到下的路径，形成了一个由沿途所有中间节点组成的字符串，就像`admin1`的节点路径一样，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding node path is unique and is known as a node’s **Distinguished Name**
    (**DN**). The DN is akin to a database primary key, allowing a node to be uniquely
    identified and located in a complex tree structure. We’ll see a node’s DN used
    extensively throughout the authentication and searching process with Spring Security
    LDAP integration.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个节点路径是唯一的，被称为节点的**唯一名称**（**DN**）。DN类似于数据库的主键，允许在复杂的树结构中唯一地识别和定位节点。我们将看到在Spring
    Security LDAP集成过程中，节点DN被广泛用于认证和搜索过程。
- en: Note that there are several other users listed at the same level of organization
    as `admin1`. All of these users are assumed to be within the same organizational
    position as `admin1`. Although this example organization is relatively simple
    and flat, the structure of LDAP is arbitrarily flexible, with many levels of nesting
    and logical organization possible.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在同一组织级别上还列出了几个其他用户，与`admin1`处于相同的组织位置。所有这些用户都被假定为与`admin1`处于相同的组织位置。尽管这个示例组织相对简单且扁平，但LDAP的结构是任意灵活的，可以有多个嵌套和逻辑组织级别。
- en: Spring Security LDAP support is assisted by the Spring LDAP module ([https://spring.io/projects/spring-ldap](https://spring.io/projects/spring-ldap)),
    which is a separate project from the core Spring Framework and Spring Security
    projects. It’s considered to be stable and provides a helpful set of wrappers
    around the standard Java LDAP functionality.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security LDAP支持由Spring LDAP模块（[https://spring.io/projects/spring-ldap](https://spring.io/projects/spring-ldap)）提供协助，该模块是Spring框架和Spring
    Security核心项目的独立项目。它被认为是稳定的，并提供了一组围绕标准Java LDAP功能的包装器。
- en: Common LDAP attribute names
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见的LDAP属性名称
- en: Each entry in the tree is defined by one or more object classes. An object class
    is a logical unit of organization, grouping a set of semantically related attributes.
    By declaring an entry in the tree as an instance of a particular object class,
    such as a person, the organizer of the LDAP directory can provide users of the
    directory with a clear indication of what each element of the directory represents.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 树中的每个条目都由一个或多个对象类定义。对象类是一个逻辑组织单元，将一组语义相关的属性分组在一起。通过将树中的条目声明为特定对象类的实例，例如人员，LDAP目录的组织者可以向目录用户提供每个目录元素代表的明确指示。
- en: LDAP has a rich set of standard schemas covering the available LDAP object classes
    and their applicable attributes (along with gobs of other information). If you
    are planning on doing extensive work with LDAP, it’s highly advised that you review
    a good reference guide, such as the [*Appendix*](B21757_20.xhtml#_idTextAnchor642)
    of the book *Zytrax* *OpenLDAP* ([https://www.zytrax.com/books/ldap/ape/](https://www.zytrax.com/books/ldap/ape/)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP有一套丰富的标准模式，涵盖了可用的LDAP对象类及其适用的属性（以及大量其他信息）。如果您计划进行大量的LDAP工作，强烈建议您查阅一本好的参考指南，例如书籍《Zytrax
    OpenLDAP》的[附录](B21757_20.xhtml#_idTextAnchor642)（[https://www.zytrax.com/books/ldap/ape/](https://www.zytrax.com/books/ldap/ape/)）。
- en: In the previous section, we were introduced to the fact that each entry in an
    LDAP tree has a DN, which uniquely identifies it in the tree. The DN is composed
    of a series of attributes, one (or more) of which is used to uniquely identify
    the path down the tree of the entry represented by the DN. As each segment of
    the path described by the DN represents an LDAP attribute, you could refer to
    the available, well-defined LDAP schemas and object classes to determine what
    each of the attributes in any given DN means.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们了解到LDAP树中的每个条目都有一个DN，它在树中是唯一的。DN由一系列属性组成，其中之一（或多个）用于唯一标识由DN表示的条目在树中的路径。由于DN描述的路径的每个部分都代表一个LDAP属性，因此您可以参考可用的、定义良好的LDAP模式和对象类来确定任何给定DN中的每个属性的含义。
- en: 'We’ve included some of the common attributes and their meanings in the following
    table. These attributes tend to be organizing attributes—meaning that they are
    typically used to define the organizational structure of the LDAP tree—and are
    ordered from top to bottom in the structure that you’re likely to see in a typical
    LDAP installation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以下表中包含了某些常见属性及其含义。这些属性通常是组织属性——这意味着它们通常用于定义LDAP树的组织结构——并且按照从上到下的顺序排列，这可能是您在典型的LDAP安装中看到的结构：
- en: '| **Attribute name** | **Description** | **Example** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **属性名称** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `dc` | Domain component: Generally, the highest level of organization in
    an LDAP hierarchy. | `dc=jbcpcalendar,dc=com` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `dc` | 域组件：在LDAP层次结构中，通常是最高级别的组织。 | `dc=jbcpcalendar,dc=com` |'
- en: '| `c` | Country: Some LDAP hierarchies are structured at a high level by country.
    | `c=US` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 国家：一些LDAP层次结构在高级别上按国家结构化。 | `c=US` |'
- en: '| `o` | Organization name: This is a parent business organization used for
    classifying LDAP resources. | `o=Oracle Corporation` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `o` | 组织名称：这是一个用于分类LDAP资源的父业务组织。 | `o=Oracle Corporation` |'
- en: '| `ou` | Organizational unit: This is a divisional business organization that
    is generally within an organization. | `ou=Product Development` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `ou` | 组织单元：这是一个通常在组织内部的部分业务组织。 | `ou=Product Development` |'
- en: '| `cn` | Common name: This is a common name or a unique or human-readable name
    for the object. For humans, this is usually the person’s full name, while for
    other resources in LDAP (computers, and so on), it’s typically the hostname. |
    `cn=Super Visor` `cn=Jim Bob` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `cn` | 常见名称：这是对象的常见名称或唯一或可读名称。对于人类来说，这通常是人的全名，而对于LDAP中的其他资源（计算机等），通常是主机名。
    | `cn=Super Visor` `cn=Jim Bob` |'
- en: '| `uid` | User ID: Although not organizational in nature, the `uid` attribute
    is generally what Spring looks for during user authentication and search. | `uid=svisor`
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `uid` | 用户ID：尽管不是组织性质的，但`uid`属性通常是Spring在用户认证和搜索过程中寻找的内容。 | `uid=svisor`
    |'
- en: '| `userPassword` | User password: This attribute stores the password for the
    person object to which this attribute is associated. It is typically one-way hashed
    using SHA or something similar. | `userPassword=plaintext userPassword={SHA}cryptval`
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `userPassword` | 用户密码：此属性存储与该属性关联的人对象的密码。它通常使用SHA或类似方法进行单向散列。 | `userPassword=plaintext
    userPassword={SHA}cryptval` |'
- en: Table 6.1 – Example of LDAP directory structure
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.1 – LDAP目录结构示例
- en: The attributes in the preceding table do, however, tend to be organizing attributes
    on the directory tree and, as such, will probably form various search expressions
    or mappings that you will use to configure Spring Security to interact with the
    LDAP server.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表格中的属性实际上是目录树上的组织属性，因此它们可能会形成各种搜索表达式或映射，这些表达式或映射将用于配置Spring Security与LDAP服务器交互。
- en: Important note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that there are hundreds of standard LDAP attributes—these represent
    a very small fraction of those you are likely to see when integrating with a fully
    populated LDAP server.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，有数百个标准LDAP属性——这些只是您在集成一个完全填充的LDAP服务器时可能看到的一小部分。
- en: Updating our dependencies
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新我们的依赖项
- en: 'We have already included all of the dependencies you need for this chapter,
    so you will not need to make any updates to your `build.gradle` file. However,
    if you were just adding LDAP support to your own application, you would need to
    add `spring-security-ldap` as a dependency in `build.gradle`, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经包含了本章所需的全部依赖项，因此您不需要更新您的`build.gradle`文件。但是，如果您只是向自己的应用程序添加LDAP支持，您需要在`build.gradle`中添加`spring-security-ldap`作为依赖项，如下所示：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that there are hundreds of standard LDAP attributes—these represent
    a very small fraction of those you are likely to see when integrating with a fully
    populated LDAP server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，有数百个标准 LDAP 属性——这些只是你在与完全填充的 LDAP 服务器集成时可能看到的极小一部分。
- en: As mentioned previously, Spring Security’s LDAP support is built on top of Spring
    LDAP. Gradle will automatically bring this dependency in as a transitive dependency,
    so there is no need to explicitly list it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Spring Security 的 LDAP 支持建立在 Spring LDAP 之上。Gradle 将自动将其作为传递依赖项引入，因此无需显式列出。
- en: Configuring embedded LDAP integration
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置嵌入式 LDAP 集成
- en: 'Let’s now enable the JBCP calendar application to support LDAP-based authentication.
    Fortunately, this is a relatively simple exercise, using the embedded LDAP server
    and a sample `UnboundID` server. This is done by adding an `unboundid-ldapsdk`
    dependency in `build.gradle`, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将启用 JBCP 日历应用程序以支持基于 LDAP 的身份验证。幸运的是，这是一个相对简单的练习，使用嵌入式 LDAP 服务器和示例 `UnboundID`
    服务器。这是通过在 `build.gradle` 中添加 `unboundid-ldapsdk` 依赖项来完成的，如下所示：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configuring an LDAP server reference
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 LDAP 服务器引用
- en: 'The first step is to configure the embedded LDAP server. Spring Boot will automatically
    configure an embedded LDAP server, but we will need to tweak the configuration
    a bit. Make the following updates to your `application.yml` file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是配置嵌入式 LDAP 服务器。Spring Boot 将自动配置一个嵌入式 LDAP 服务器，但我们需要稍微调整一下配置。请对您的 `application.yml`
    文件进行以下更新：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should be starting with the source from `chapter06.00-calendar`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从 `chapter06.00-calendar` 的源代码开始。
- en: We are loading the `calendar.ldif` file from `classpath` and using it to populate
    the LDAP server. The `root` attribute declares the root of the LDAP directory
    using the specified DN. This should correspond to the logical root DN in the LDIF
    file we’re using.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在从 `classpath` 加载 `calendar.ldif` 文件，并使用它来填充 LDAP 服务器。`root` 属性使用指定的 DN 声明
    LDAP 目录的根。这应该与我们使用的 LDIF 文件中逻辑根 DN 相对应。
- en: Tip
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be aware that for embedded LDAP servers, the `base-dn` attribute is required.
    If it is not specified or is specified incorrectly, you may receive several odd
    errors upon initialization. Also, be aware that the `ldif` resource should only
    load a single `ldif`, otherwise the server will fail to start up. Spring Security
    requires a single resource, since using something such as `classpath*:calendar.ldif`
    does not provide the deterministic ordering that is required.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于嵌入式 LDAP 服务器，`base-dn` 属性是必需的。如果没有指定或指定错误，初始化时可能会收到几个奇怪的错误。此外，请注意，`ldif`
    资源应只加载单个 `ldif`，否则服务器将无法启动。Spring Security 需要单个资源，因为使用类似 `classpath*:calendar.ldif`
    这样的方式并不能提供所需的确定性排序。
- en: We’ll reuse the bean ID defined here later, in the Spring Security configuration
    files, when we declare the LDAP user service and other configuration elements.
    All other attributes on the `<ldap-server>` declaration are optional when using
    the embedded LDAP mode.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会在 Spring Security 配置文件中重用这里定义的 bean ID，当我们声明 LDAP 用户服务和其他配置元素时。在嵌入式 LDAP
    模式下，`<ldap-server>` 声明上的所有其他属性都是可选的。
- en: Enabling the LDAP AuthenticationManager interface
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用 LDAP AuthenticationManager 接口
- en: 'Next, we’ll need to configure another `AuthenticationManager` interface that
    checks user credentials against the LDAP provider. Simply update the Spring Security
    configuration to use an `o.s.s.ldap.authentication.` `AuthenticationManager` reference,
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置另一个 `AuthenticationManager` 接口，该接口将用户凭据与 LDAP 提供者进行校验。只需更新 Spring
    Security 配置以使用 `o.s.s.ldap.authentication.` `AuthenticationManager` 引用，如下所示：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring the LdapAuthoritiesPopulator interface
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 LdapAuthoritiesPopulator 接口
- en: 'Spring Security’s `LdapAuthoritiesPopulator` is used to determine what authorities
    are returned for the user. The following example shows how to configure `LdapAuthoritiesPopulator`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 的 `LdapAuthoritiesPopulator` 用于确定返回给用户的权限。以下示例展示了如何配置 `LdapAuthoritiesPopulator`：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In addition, we have deleted all the references to `PasswordEncoder` Bean and
    the class `CalendarUserDetailsService`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们已删除所有对 `PasswordEncoder` Bean 和 `CalendarUserDetailsService` 类的引用。
- en: We’ll discuss these attributes a bit more later. For now, get the application
    back up and running, and try logging in with `admin1@example.com` as the username
    and `admin1` as the password. You should be logged in!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会详细讨论这些属性。现在，请将应用程序恢复到运行状态，并尝试使用 `admin1@example.com` 作为用户名和 `admin1` 作为密码进行登录。你应该已经登录成功了！
- en: Important note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should be starting with the source from `chapter06.01-calendar`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该从`chapter06.01-calendar`的源代码开始。
- en: Troubleshooting embedded LDAP
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入式LDAP故障排除
- en: 'It is quite possible that you will run into hard-to-debug problems with embedded
    LDAP. If you are getting a `404` error when trying to access the application in
    your browser, there is a good chance that things did not start up properly. Some
    things to double-check if you can’t get this simple example running are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能您会遇到难以调试的嵌入式LDAP问题。如果您在浏览器中尝试访问应用程序时遇到`404`错误，那么很可能事情没有正确启动。如果您无法运行这个简单的示例，以下是一些需要再次检查的事项：
- en: Ensure the `baseDn` attribute is set in your configuration file, and make sure
    it matches the root defined in the LDIF file that’s loaded at startup. If you
    get errors referencing missing partitions, it’s likely that either the root attribute
    was missed or doesn’t match your LDIF file.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在配置文件中设置了`baseDn`属性，并确保它与启动时加载的LDIF文件中定义的根匹配。如果您收到关于丢失分区的错误，则可能是根属性被遗漏或与您的LDIF文件不匹配。
- en: Be aware that a failure starting up the embedded LDAP server is not a fatal
    failure. In order to diagnose errors loading LDIF files, you will need to ensure
    that the appropriate log settings, including logging for the LDAP server, are
    enabled, at least at the error level.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意到嵌入式LDAP启动失败并不一定是致命的失败。为了诊断加载LDIF文件时的错误，您需要确保启用了适当的日志设置，包括LDAP服务器的日志记录，至少在错误级别。
- en: If the application server shuts down non-gracefully, you may be required to
    delete some files in your temporary directory (`%TEMP%` on Windows systems or
    `/tmp` on Linux-based systems) in order to start the server again. The error messages
    regarding this are (fortunately) fairly clear. Unfortunately, embedded LDAP isn’t
    as seamless and easy to use as the embedded H2 database, but it is still quite
    a bit easier than trying to download and configure many of the freely available
    external LDAP servers.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用程序服务器非正常关闭，您可能需要删除临时目录（Windows系统上的`%TEMP%`或基于Linux的系统上的`/tmp`）中的某些文件，以便再次启动服务器。关于此的错误消息（幸运的是）相当清晰。不幸的是，嵌入式LDAP不像嵌入式H2数据库那样无缝且易于使用，但它仍然比尝试下载和配置许多免费可用的外部LDAP服务器要容易得多。
- en: An excellent tool for troubleshooting or accessing LDAP servers in general is
    the Apache Directory Studio project, which offers standalone and Eclipse plugin
    versions. The free download is available at [http://jxplorer.org/](http://jxplorer.org/).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Directory Studio项目是一个出色的故障排除工具，可用于访问LDAP服务器，它提供独立和Eclipse插件版本。免费下载可在[http://jxplorer.org/](http://jxplorer.org/)获取。
- en: Understanding how Spring LDAP authentication works
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Spring LDAP认证的工作原理
- en: 'We saw that we were able to log in using a user-defined in the LDAP directory.
    But what exactly happens when a user issues a login request for a user in LDAP?
    There are the following three basic steps to the LDAP authentication process:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们可以使用在LDAP目录中定义的用户名进行登录。但是，当用户对LDAP中的用户发起登录请求时，究竟会发生什么呢？LDAP认证过程有三个基本步骤：
- en: Authenticate the credentials supplied by the user against the LDAP directory.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户提供的凭据与LDAP目录进行认证。
- en: Determine the `GrantedAuthority` object that the user has, based on their information
    in LDAP.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据用户在LDAP中的信息确定用户拥有的`GrantedAuthority`对象。
- en: Pre-load information from the LDAP entry for the user into a custom `UserDetails`
    object for further use by the application.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户在LDAP条目中的信息预先加载到自定义的`UserDetails`对象中，以便应用程序进一步使用。
- en: Authenticating user credentials
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证用户凭据
- en: 'For the first step, authentication against the LDAP directory, a custom authentication
    provider is wired into `AuthenticationManager`. The `o.s.s.ldap.authentication.LdapAuthenticationProvider`
    interface takes the user’s provided credentials and verifies them against the
    LDAP directory, as illustrated in the following diagram:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一步，即对LDAP目录进行认证，一个自定义认证提供程序被连接到`AuthenticationManager`。`o.s.s.ldap.authentication.LdapAuthenticationProvider`接口接受用户提供的凭据，并验证它们与LDAP目录，如下面的图所示：
- en: '![Figure 6.2 – Spring Security LDAP authentication workflow](img/B21757_06_02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – Spring Security LDAP认证工作流程](img/B21757_06_02.jpg)'
- en: Figure 6.2 – Spring Security LDAP authentication workflow
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – Spring Security LDAP认证工作流程
- en: We can see that the `o.s.s.ldap.authentication.LdapAuthenticator` interface
    defines a delegate to allow the provider to make the authentication request in
    a customizable way. The implementation that we’ve implicitly configured to this
    point, `o.s.s.ldap.authentication.BindAuthenticator`, attempts to use the user’s
    credentials to bind (log in) to the LDAP server as if it were the user themselves
    making a connection. For an embedded server, this is sufficient for our authentication
    needs; however, external LDAP servers may be stricter, and in these, users may
    not be allowed to bind to the LDAP directory. Fortunately, an alternative method
    of authentication exists, which we will explore later in this chapter.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`o.s.s.ldap.authentication.LdapAuthenticator`接口定义了一个代理，允许提供者以可定制的方式发出认证请求。我们隐式配置到这一点的实现`o.s.s.ldap.authentication.BindAuthenticator`尝试使用用户的凭据绑定（登录）到LDAP服务器，就像用户自己建立连接一样。对于嵌入式服务器，这对我们的认证需求是足够的；然而，外部LDAP服务器可能更严格，在这些服务器中，用户可能不允许绑定到LDAP目录。幸运的是，存在一种替代的认证方法，我们将在本章后面探讨。
- en: As noted in the preceding diagram, keep in mind that the search is performed
    under an LDAP context created by the credentials specified in the `DefaultSpringSecurityContextSource`
    reference’s `baseDn` attribute. With an embedded server, we don’t use this information,
    but with an external server reference, unless `baseDn` is supplied, anonymous
    binding is used. Retaining some control over the public availability of information
    in the directory is very common for organizations that require valid credentials
    to search an LDAP directory, and as such, `baseDn` will be almost always required
    in real-world scenarios. The `baseDn` attribute represents the full DN of a user
    with valid access to bind the directory and perform searches.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，请注意，搜索是在由`DefaultSpringSecurityContextSource`引用的`baseDn`属性指定的凭据创建的LDAP上下文中进行的。对于嵌入式服务器，我们不使用此信息，但对于外部服务器引用，除非提供了`baseDn`，否则将使用匿名绑定。对于需要有效凭据来搜索LDAP目录的组织来说，保留对目录中信息公开性的某些控制是非常常见的，因此，在现实场景中，`baseDn`几乎总是必需的。`baseDn`属性代表一个具有有效访问权限以绑定目录并执行搜索的用户的完整DN。
- en: Demonstrating authentication with JXplorer
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JXplorer演示认证
- en: We are going to demonstrate how the authentication process works by using `JXplorer`
    to connect to our embedded LDAP instance and perform the same steps that Spring
    Security is performing. We will use `user1@example.com` throughout the simulation.
    These steps will help to ensure a firm grasp of what is happening behind the scenes
    and will help if you are having difficulty figuring out the correct configuration.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用`JXplorer`连接到我们的嵌入式LDAP实例并执行Spring Security所执行的相同步骤来演示认证过程的工作原理。在整个模拟过程中，我们将使用`user1@example.com`。这些步骤将有助于确保对幕后发生的事情有牢固的理解，并有助于你在难以确定正确配置时。
- en: Ensure that the calendar application is started up and working. Next, start
    `Jxplorer`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 确保日历应用程序已启动并正在运行。接下来，启动`Jxplorer`。
- en: Binding anonymously to LDAP
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匿名绑定到LDAP
- en: 'The first step is to bind anonymously to LDAP. The bind is done anonymously
    because we did not specify the `baseDn` and `password` attributes on our `DefaultSpringSecurityContextSource`
    object. Within `Jxplorer`, create a connection using the following steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是匿名绑定到LDAP。绑定是匿名的，因为我们没有在我们的`DefaultSpringSecurityContextSource`对象上指定`baseDn`和`password`属性。在`Jxplorer`中，按照以下步骤创建一个连接：
- en: Click on **File** | **Connect**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**文件** | **连接**。
- en: 'Enter the following information:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下信息：
- en: 'Hostname: `localhost`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名：`localhost`
- en: 'Port: `33389`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：`33389`
- en: We did not specify `baseDn`, so select **No Authentication** as the **Authentication
    Method**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们没有指定`baseDn`，因此选择**无认证**作为**认证方法**。
- en: Click on **OK**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: You can safely ignore the message indicating no default schema information is
    present.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以安全地忽略指示没有默认模式信息的消息。
- en: '![Figure 6.3 – Binding anonymously to LDAP](img/B21757_06_03.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 匿名绑定到LDAP](img/B21757_06_03.jpg)'
- en: Figure 6.3 – Binding anonymously to LDAP
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 匿名绑定到LDAP
- en: You should now see that you are connected to the embedded LDAP instance.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到你已经连接到了嵌入式LDAP实例。
- en: Searching for the user
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索用户
- en: 'Now that we have a connection, we can use it to look up the user’s DN that
    we wish to bind to, by performing the following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了连接，我们可以通过以下步骤使用它来查找我们希望绑定的用户的DN：
- en: Right-click on **World** and select **Search**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**World**并选择**搜索**。
- en: Enter a search base of `dc=jbcpcalendar,dc=com`. This corresponds to the `baseDn`
    attribute of our `spring.ldap.base` property that we specified.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入搜索基`dc=jbcpcalendar,dc=com`。这对应于我们指定的`spring.ldap.base`属性的`baseDn`属性。
- en: Enter a filter of `uid=user1@example.com`. This corresponds to the value we
    specified for the `userSearchFilter` method of `AuthenticationManagerBuilder`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入过滤器`uid=user1@example.com`。这对应于我们为`AuthenticationManagerBuilder`的`userSearchFilter`方法指定的值。
- en: Click on **Search**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**搜索**。
- en: '![Figure 6.4 – Search for the user](img/B21757_06_04.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 搜索用户](img/B21757_06_04.jpg)'
- en: Figure 6.4 – Search for the user
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 搜索用户
- en: Click on **Copy DN** of the single result returned by our search. You can now
    see that our LDAP user is displayed. Note that this DN matches the value we searched
    for. Remember this DN, as it will be used in our next step.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击搜索结果中返回的单个结果的**复制DN**。你现在可以看到我们的LDAP用户被显示出来。注意，这个DN与我们所搜索的值相匹配。记住这个DN，因为它将在我们的下一步中使用。
- en: '![Figure 6.5 – Search for the user](img/B21757_06_05.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 搜索用户](img/B21757_06_05.jpg)'
- en: Figure 6.5 – Search for the user
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 搜索用户
- en: Binding as a user to LDAP
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为用户绑定到LDAP
- en: Now that we have found the full DN of our user, we need to try to bind to LDAP
    as that user to validate the submitted password. These steps are the same as in
    the anonymous bind we already did, except that we will specify the credentials
    of the user that we are authenticating.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到了我们用户的完整DN，我们需要尝试以该用户身份绑定到LDAP以验证提交的密码。这些步骤与我们已经做的匿名绑定相同，只是我们将指定我们正在认证的用户凭据。
- en: 'Within `Jxplorer`, create a connection using the following steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Jxplorer`中，按照以下步骤创建连接：
- en: Click on **File** | **Connect**.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**文件** | **连接**。
- en: 'Enter the following information:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下信息：
- en: 'Hostname: **localhost**'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名：**localhost**
- en: 'Port: **33389**'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：**33389**
- en: Set **Security Level** to **User +** **Password**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**安全级别**设置为**用户 +** **密码**。
- en: Enter the DN from our search result as `uid=admin1@example.com,ou=Administrators,ou=Users,dc=jbcpcalendar,dc=com`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将搜索结果中的DN输入为`uid=admin1@example.com,ou=Administrators,ou=Users,dc=jbcpcalendar,dc=com`。
- en: The password should be the password that was submitted at the time of login.
    In our case, we want to use **admin1** to successfully authenticate. If the wrong
    password was entered, we would fail to connect and Spring Security would report
    an error.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码应该是登录时提交的密码。在我们的例子中，我们想使用**admin1**来成功认证。如果输入了错误的密码，我们将无法连接，Spring Security将报告错误。
- en: Click on **OK**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: '![Figure 6.6 – Binding as a user to LDAP](img/B21757_06_06.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 作为用户绑定到LDAP](img/B21757_06_06.jpg)'
- en: Figure 6.6 – Binding as a user to LDAP
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 作为用户绑定到LDAP
- en: Spring Security will determine that the username and password were correct for
    this user when it is able to successfully bind with the provided username and
    password (similar to how we were able to create a connection). Spring Security
    will then proceed with determining the user’s role membership.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当Spring Security能够成功绑定提供的用户名和密码时（类似于我们能够创建连接的方式），它将确定该用户的用户名和密码是正确的。然后Spring
    Security将继续确定用户的角色成员资格。
- en: Determining the user’s role membership
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定用户的角色成员资格
- en: 'After the user has been successfully authenticated against the LDAP server,
    authorization information must be determined next. Authorization is defined by
    a principal’s list of roles, and an LDAP-authenticated user’s role membership
    is determined as illustrated in the following diagram:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户成功通过LDAP服务器认证后，接下来必须确定授权信息。授权由主体的角色列表定义，LDAP认证用户的角色成员资格如以下图所示确定：
- en: '![Figure 6.7 – User role membership](img/B21757_06_07.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 用户角色成员](img/B21757_06_07.jpg)'
- en: Figure 6.7 – User role membership
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 用户角色成员
- en: We can see that after authenticating the user against LDAP, `LdapAuthenticationProvider`
    delegates to `LdapAuthoritiesPopulator`. The `DefaultLdapAuthoritiesPopulator`
    interface will attempt to locate the authenticated user’s DN in an attribute located
    at or below another entry in the LDAP hierarchy. The DN of the location searched
    for user role assignments is defined in the `groupSearchBase` method; in our sample,
    we set this to `groupSearchBase("ou=Groups")`. When the user’s DN is located within
    an LDAP entry below the DN of `groupSearchBase`, an attribute on the entry in
    which their DN is found is used to confer a role to them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在用户通过LDAP进行身份验证后，`LdapAuthenticationProvider`将委托给`LdapAuthoritiesPopulator`。`DefaultLdapAuthoritiesPopulator`接口将尝试在LDAP层次结构中的另一个条目或以下的位置定位已验证用户的DN。搜索用户角色分配的DN的位置由`groupSearchBase`方法定义；在我们的示例中，我们将此设置为`groupSearchBase("ou=Groups")`。当用户的DN位于`groupSearchBase`的DN以下的LDAP条目中时，找到其DN的条目上的属性将用于授予他们一个角色。
- en: 'How Spring Security roles are associated with LDAP users can be a little confusing,
    so let’s look at the JBCP calendar LDAP repository and see how the association
    of a user with a role works. The `DefaultLdapAuthoritiesPopulator` interface uses
    several methods of the `AuthenticationManagerBuilder` declaration to govern searching
    for roles for the user. These attributes are used approximately in the following
    order:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 春节安全角色如何与LDAP用户关联可能会有些令人困惑，因此让我们看看JBCP日历LDAP存储库，看看用户与角色的关联是如何工作的。`DefaultLdapAuthoritiesPopulator`接口使用`AuthenticationManagerBuilder`声明的几个方法来管理为用户搜索角色的过程。这些属性按以下顺序大约使用：
- en: '`groupSearchBase`: This defines the base DN under which the LDAP integration
    should look for one or more matches for the user’s DN. The default value performs
    a search from the LDAP root, which may be expensive.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`groupSearchBase`：这定义了LDAP集成应在其中查找一个或多个与用户DN匹配的基DN。默认值从LDAP根进行搜索，这可能很昂贵。'
- en: '`groupSearchFilter`: This defines the LDAP search filter used to match the
    user’s DN to an attribute of an entry located under `groupSearchBase`. This search
    filter is parameterized with two parameters—the first `({0})` being the user’s
    DN, and the second `({1})` being the user’s username. The default value is `uniqueMember={0}`.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`groupSearchFilter`：这定义了用于将用户的DN与位于`groupSearchBase`下的条目的属性匹配的LDAP搜索过滤器。此搜索过滤器使用两个参数进行参数化——第一个`({0})`是用户的DN，第二个`({1})`是用户的用户名。默认值是`uniqueMember={0}`。'
- en: '`groupRoleAttribute`: This defines the attribute of the matching entries, which
    will be used to compose the user’s `GrantedAuthority` object. The default value
    is `cn`.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`groupRoleAttribute`：这定义了匹配条目的属性，该属性将用于组成用户的`GrantedAuthority`对象。默认值是`cn`。'
- en: '`rolePrefix`: This is the prefix that will be prepended to the value found
    in `groupRoleAttribute`, to make a Spring Security `GrantedAuthority` object.
    The default value is `ROLE_`.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rolePrefix`：这是将添加到`groupRoleAttribute`中找到的值的默认前缀，以创建一个Spring Security的`GrantedAuthority`对象。默认值是`ROLE_`。'
- en: This can be a little abstract and hard for new developers to follow because
    it’s very different from anything we’ve seen so far with our JDBC and JPA-based
    `UserDetailsService` implementations. Let’s continue walking through the login
    process with our `user1@example.com` user in the JBCP calendar LDAP directory.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能有些抽象，对于新开发者来说可能难以理解，因为它与我们迄今为止使用JDBC和JPA的`UserDetailsService`实现所看到的内容非常不同。让我们继续通过我们的`user1@example.com`用户在JBCP日历LDAP目录中的登录过程进行操作。
- en: Determining roles with Jxplorer
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jxplorer确定角色
- en: 'We will now try to determine the roles for our user with `Jxplorer`. Using
    the connection, we created previously, perform the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将尝试使用`Jxplorer`确定我们的用户的角色。使用我们之前创建的连接，执行以下步骤：
- en: Right-click on **World** and select **Search**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**世界**并选择**搜索**。
- en: Enter a search base of `ou=Groups,dc=jbcpcalendar,dc=com`. This corresponds
    to the `baseDn` attribute of the `DefaultSpringSecurityContextSource` object we
    specified, plus the `groupSearchBase` attribute we specified for the `AuthenticationManagerBuilder`
    object.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入搜索基`ou=Groups,dc=jbcpcalendar,dc=com`。这对应于我们指定的`DefaultSpringSecurityContextSource`对象的`baseDn`属性，加上我们为`AuthenticationManagerBuilder`对象指定的`groupSearchBase`属性。
- en: Enter a text filter of `uniqueMember=uid=user1@example.com,ou=Users,dc=jbcpcalendar,dc=
    com`. This corresponds to the default `groupSearchFilter` attribute of `(uniqueMember={0})`.
    Notice that we have substituted the full DN of the user we found in our previous
    exercise for the `{``0}` value.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入文本过滤器`uniqueMember=uid=user1@example.com,ou=Users,dc=jbcpcalendar,dc=com`。这对应于默认的`groupSearchFilter`属性`(uniqueMember={0})`。请注意，我们已经用我们在之前的练习中找到的用户的全DN替换了`{}`值。
- en: Click on **Search**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**搜索**。
- en: '![Figure 6.8 – Role search](img/B21757_06_08.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 角色搜索](img/B21757_06_08.jpg)'
- en: Figure 6.8 – Role search
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 角色搜索
- en: You will observe that the `Jxplorer`. Note that the group has a `uniqueMember`
    attribute with the full DN of our user and other users.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到`Jxplorer`。注意该组有一个包含我们用户和其他用户的完整DN的`uniqueMember`属性。
- en: 'Spring Security now creates the `GrantedAuthority` object for each result by
    forcing the name of the group that was found into uppercase and prepending `ROLE_`
    to the group name. The pseudocode would look similar to the following code snippet:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security现在通过将找到的组名强制转换为大写并在组名前添加`ROLE_`来为每个结果创建`GrantedAuthority`对象。伪代码将类似于以下代码片段：
- en: '[PRE6]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Spring LDAP is as flexible as your gray matter. Keep in mind that, although
    this is one way to organize an LDAP directory to be compatible with Spring Security,
    typical usage scenarios are exactly the opposite—an LDAP directory already exists
    that Spring Security needs to be wired into. In many cases, you will be able to
    reconfigure Spring Security to deal with the hierarchy of the LDAP server; however,
    it’s key that you plan effectively and understand how Spring works with LDAP when
    it’s querying. Use your brain, map out the user search and group search, and come
    up with the most optimal plan you can think of—keep the scope of searches as minimal
    and as precise as possible.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Spring LDAP与你的灰色物质一样灵活。请记住，尽管这是一种组织LDAP目录以与Spring Security兼容的方法，但典型的使用场景正好相反——已经存在一个Spring
    Security需要连接的LDAP目录。在许多情况下，你将能够重新配置Spring Security以处理LDAP服务器的层次结构；然而，有效地规划和理解Spring在查询LDAP时的行为是关键。运用你的大脑，规划用户搜索和组搜索，并想出你能想到的最优计划——尽量使搜索范围最小化和精确。
- en: Can you describe how the results of the login process would differ for our `admin1@example.com`
    user? If you are confused at this point, we’d suggest that you take a breather
    and try using `Jxplorer` to work through browsing the embedded LDAP server, configured
    by the running of an application. It can be easier to grasp the flow of Spring
    Security’s LDAP configuration if you attempt to search the directory yourself
    by following the algorithm described previously.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你能描述一下登录过程的结果将如何与我们的`admin1@example.com`用户不同吗？如果你现在感到困惑，我们建议你休息一下，并尝试使用`Jxplorer`来浏览由应用程序运行配置的嵌入式LDAP服务器。如果你自己按照之前描述的算法搜索目录，可能会更容易理解Spring
    Security的LDAP配置流程。
- en: Mapping additional attributes of UserDetails
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射UserDetails的额外属性
- en: Finally, once the LDAP lookup has assigned the user a set of the `GrantedAuthority`
    objects, `o.s.s.ldap.userdetails.LdapUserDetailsMapper` will consult `o.s.s.ldap.userdetails.UserDetailsContextMapper`
    to retrieve any additional details to populate the `UserDetails` object for application
    use.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦LDAP查找为用户分配了一组`GrantedAuthority`对象，`o.s.s.ldap.userdetails.LdapUserDetailsMapper`将咨询`o.s.s.ldap.userdetails.UserDetailsContextMapper`以检索任何额外的详细信息，以填充用于应用程序使用的`UserDetails`对象。
- en: 'Using `AuthenticationManagerBuilder`, we’ve configured up until this point
    that `LdapUserDetailsMapper` will be used to populate a `UserDetails` object with
    information gleaned from the user’s entry in the LDAP directory:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AuthenticationManagerBuilder`，我们到目前为止已经配置了`LdapUserDetailsMapper`将用于使用从LDAP目录中用户条目中获取的信息填充`UserDetails`对象：
- en: '![Figure 6.9 – Mapping additional attributes of UserDetails](img/B21757_06_09.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 映射UserDetails的额外属性](img/B21757_06_09.jpg)'
- en: Figure 6.9 – Mapping additional attributes of UserDetails
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 映射UserDetails的额外属性
- en: We’ll see in a moment how `UserDetailsContextMapper` can be configured to pull
    a wealth of information from the standard LDAP `person` and `inetOrgPerson` objects.
    With the baseline `LdapUserDetailsMapper`, little more than `username`, `password`,
    and `GrantedAuthority` are stored.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快就会看到如何配置`UserDetailsContextMapper`以从标准的LDAP `person`和`inetOrgPerson`对象中提取大量信息。使用基线`LdapUserDetailsMapper`，存储的只有`username`、`password`和`GrantedAuthority`。
- en: Although there is more machinery involved behind the scenes in LDAP user authentication
    and detail retrieval, you’ll notice that the overall process seems somewhat similar
    to the JDBC authentication that we studied in [*Chapter 4*](B21757_04.xhtml#_idTextAnchor106),
    *JDBC-based Authentication* (authenticating the user and populating `GrantedAuthority`).
    As with JDBC authentication, there is the ability to perform advanced configuration
    of LDAP integration. Let’s dive deeper and see what’s possible!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在LDAP用户认证和详细信息检索的背后涉及更多的机制，但你会注意到整个过程似乎与我们在[*第4章*](B21757_04.xhtml#_idTextAnchor106)中学习的JDBC认证有些相似，即*基于JDBC的认证*（验证用户并填充`GrantedAuthority`）。与JDBC认证一样，可以执行LDAP集成的高级配置。让我们深入探讨一下，看看可能有哪些可能性！
- en: Advanced LDAP configuration
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级LDAP配置
- en: Once we get beyond the basics of LDAP integration, there’s a plethora of additional
    configuration capabilities in the Spring Security LDAP module that are still within
    the security `SecurityFilterChain` bean. These include retrieval of user personal
    information, additional options for user authentication, and the use of LDAP as
    the `UserDetailsService` interface in conjunction with a standard `DaoAuthenticationProvider`
    class.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们超越了LDAP集成的基础知识，Spring Security LDAP模块中还有许多额外的配置能力，这些能力仍然在安全`SecurityFilterChain`bean中。这包括检索用户个人信息，用户认证的附加选项，以及与标准的`DaoAuthenticationProvider`类结合使用LDAP作为`UserDetailsService`接口。
- en: Sample JBCP LDAP users
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例JBCP LDAP用户
- en: 'We’ve supplied a number of different users in the JBCP calendar LDIF file.
    The following quick reference chart may help you with the advanced configuration
    exercises, or with self-exploration:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在JBCP日历LDIF文件中提供了多个不同的用户。以下快速参考图表可能有助于你进行高级配置练习，或者进行自我探索：
- en: '| **Username/password** | **Role(s)** | **Password encoding** |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| **用户名/密码** | **角色(s)** | **密码编码** |'
- en: '| --- | --- | --- |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `admin1@example.com/admin1` | `ROLE_ADMIN, ROLE_USER` | `Plaintext` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `admin1@example.com/admin1` | `ROLE_ADMIN, ROLE_USER` | `Plaintext` |'
- en: '| `user1@example.com/user1` | `ROLE_USER` | `Plaintext` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `user1@example.com/user1` | `ROLE_USER` | `Plaintext` |'
- en: '| `shauser@example.com/shauser` | `ROLE_USER` | `{``sha}` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `shauser@example.com/shauser` | `ROLE_USER` | `{``sha}` |'
- en: '| `sshauser@example.com/sshauser` | `ROLE_USER` | `{``ssha}` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `sshauser@example.com/sshauser` | `ROLE_USER` | `{``ssha}` |'
- en: '| `hasphone@example.com/hasphone` | `ROLE_USER` | `Plaintext (in the` `telephoneNumber
    attribute)` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `hasphone@example.com/hasphone` | `ROLE_USER` | `Plaintext (在` `telephoneNumber`
    属性中)` |'
- en: Table 6.2 – List of LDAP users
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.2 – LDAP用户列表
- en: We’ll explain why password encoding matters in the next section.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中解释为什么密码编码很重要。
- en: Password comparison versus bind authentication
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码比较与绑定认证
- en: Some LDAP servers will be configured so that certain individual users are not
    allowed to bind directly to the server, or so that anonymous binding (what we
    have been using for user search up until this point) is disabled. This tends to
    occur in very large organizations that want a restricted set of users to be able
    to read information from the directory.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一些LDAP服务器将配置为不允许某些个别用户直接绑定到服务器，或者禁用匿名绑定（我们直到目前为止一直在用于用户搜索的）。这种情况通常发生在希望限制一组用户能够从目录中读取信息的大型组织中。
- en: 'In these cases, the standard Spring Security LDAP authentication strategy will
    not work, and an alternative strategy must be used, implemented by `o.s.s.ldap.authentication.PasswordComparisonAuthenticator`
    (a sibling class of `BindAuthenticator`):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，标准的Spring Security LDAP认证策略将不起作用，必须使用替代策略，该策略由`o.s.s.ldap.authentication.PasswordComparisonAuthenticator`（`BindAuthenticator`的兄弟类）实现：
- en: '![Figure 6.10 – Password comparison versus bind authentication](img/B21757_06_10.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 密码比较与绑定认证](img/B21757_06_10.jpg)'
- en: Figure 6.10 – Password comparison versus bind authentication
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 密码比较与绑定认证
- en: The `PasswordComparisonAuthenticator` interface binds to LDAP and searches for
    the DN matching the username provided by the user. It then compares the user-supplied
    password with the `userPassword` attribute stored on the matching LDAP entry.
    If the encoded password matches, the user is authenticated and the flow proceeds,
    as with `BindAuthenticator`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordComparisonAuthenticator`接口绑定到LDAP并搜索与用户提供的用户名匹配的DN。然后，它将用户提供的密码与匹配的LDAP条目上存储的`userPassword`属性进行比较。如果编码的密码匹配，则用户被认证，流程继续，就像`BindAuthenticator`一样。'
- en: Configuring basic password comparison
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置基本密码比较
- en: 'Configuring password comparison authentication instead of bind authentication
    is as simple as adding a method to the `AuthenticationManager` declaration. Update
    the `SecurityConfig.java` file as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 配置密码比较认证而不是绑定认证，就像在`AuthenticationManager`声明中添加一个方法一样简单。按照以下方式更新`SecurityConfig.java`文件：
- en: '[PRE7]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `PasswordCompareConfigurer` class, that is used by declaring the `passwordCompare`
    method, uses `PlaintextPasswordEncoder` for password encoding. To use the `SHA-1`
    password algorithm, we need to set a password encoder, and we can use `o.s.s.a.encoding.LdapShaPasswordEncoder`
    for `SHA` support (recall that we discussed the `SHA-1` password algorithm extensively
    in [*Chapter 4*](B21757_04.xhtml#_idTextAnchor106), *JDBC-based Authentication*).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordCompareConfigurer`类，通过声明`passwordCompare`方法使用，使用`PlaintextPasswordEncoder`进行密码编码。要使用`SHA-1`密码算法，我们需要设置一个密码编码器，并且我们可以使用`o.s.s.a.encoding.LdapShaPasswordEncoder`来支持`SHA`（回忆我们在[*第4章*](B21757_04.xhtml#_idTextAnchor106)，*基于JDBC的认证*）中广泛讨论的`SHA-1`密码算法）。'
- en: In our `calendar.ldif` file, we have the `password` field set to `userPassword`.
    The default `password` attribute for the `PasswordCompareConfigurer` class is
    `password`. So, we also need to override the `password` attribute with the `passwordAttribute`
    method.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`calendar.ldif`文件中，我们将`password`字段设置为`userPassword`。`PasswordCompareConfigurer`类的默认`password`属性是`password`。因此，我们还需要使用`passwordAttribute`方法覆盖`password`属性。
- en: After restarting the server, you can attempt to log in using `shauser@example.com`
    as the `username` and `shauser` as `password`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器重启后，您可以使用`shauser@example.com`作为`用户名`，`shauser`作为`密码`尝试登录。
- en: Important note
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should start with the source from `chapter06.02-calendar`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该从`chapter06.02-calendar`的源文件开始。
- en: LDAP password encoding and storage
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LDAP密码编码和存储
- en: 'LDAP has general support for a variety of password encoding algorithms, ranging
    from plaintext to one-way hash algorithms—similar to those we explored in the
    previous chapter—with database-backed authentication. The most common storage
    formats for LDAP passwords are `SHA` (`SHA-1` one-way hashed) and `SSHA` (`SHA-1`
    one-way hashed with a salt value). Other password formats often supported by many
    LDAP implementations are thoroughly documented in *RFC 2307*, *An Approach to
    Using LDAP as a Network Information Service* ([http://tools.ietf.org/html/rfc2307](http://tools.ietf.org/html/rfc2307)).
    The designers of *RFC 2307* did a very clever thing with regard to password storage.
    Passwords retained in the directory are, of course, encoded with whatever algorithm
    is appropriate (`SHA` and so on), but then, they are prefixed with the algorithm
    used to encode the password. This makes it very easy for the LDAP server to support
    multiple algorithms for password encoding. For example, an `SHA` encoded password
    is stored in the directory as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP支持多种密码编码算法，从明文到单向哈希算法——类似于我们在上一章中探讨的那些——以及数据库支持的认证。LDAP密码最常用的存储格式是`SHA`（`SHA-1`单向哈希）和`SSHA`（`SHA-1`单向哈希加上盐值）。许多LDAP实现通常支持的其它密码格式在*RFC
    2307*（*An Approach to Using LDAP as a Network Information Service*）中有详细说明（[http://tools.ietf.org/html/rfc2307](http://tools.ietf.org/html/rfc2307)）。*RFC
    2307*的设计者在密码存储方面做了一件非常巧妙的事情。目录中保留的密码当然是用适当的算法（`SHA`等）编码的，但随后，它们会在算法前加上前缀。这使得LDAP服务器能够非常容易地支持多种密码编码算法。例如，`SHA`编码的密码在目录中的存储方式如下：
- en: '[PRE8]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can see that the password storage algorithm is very clearly indicated with
    the `{SHA}` notation and stored along with the password.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，密码存储算法用`{SHA}`符号非常清楚地标明，并且与密码一起存储。
- en: The `SSHA` notation is an attempt to combine the strong `SHA-1` hash algorithm
    with password salting to prevent dictionary attacks. As with password salting,
    which we reviewed in the previous chapter, the salt is added to the password prior
    to calculating the hash. When the hashed password is stored in the directory,
    the salt value is appended to the hashed password. The password is prepended with
    `{SSHA}` so that the LDAP directory knows that the user-supplied password needs
    to be compared differently. Most modern LDAP servers utilize `SSHA` as their default
    password storage algorithm.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`SSHA`符号是尝试将强大的`SHA-1`哈希算法与密码盐值结合，以防止字典攻击。与我们在上一章中回顾的密码盐值类似，盐值在计算哈希之前添加到密码中。当哈希密码存储在目录中时，盐值会被附加到哈希密码后面。密码前面加上`{SSHA}`，这样LDAP目录就知道用户提供的密码需要以不同的方式比较。大多数现代LDAP服务器将`SSHA`作为它们的默认密码存储算法。'
- en: The drawbacks of a password comparison authenticator
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码比较验证器的缺点
- en: Now that you know a bit about how LDAP uses passwords, and we have `PasswordComparisonAuthenticator`
    set up, what do you think will happen if you log in using our `sshauser@example.com`
    user with their password, stored in `SSHA` format?
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了一些关于 LDAP 如何使用密码的信息，并且我们已经设置了 `PasswordComparisonAuthenticator`，你认为如果你使用以
    `SSHA` 格式存储的密码登录我们的 `sshauser@example.com` 用户会发生什么？
- en: Go ahead, put the book aside and try it, and then come back. Your login was
    denied, right? And yet you were still able to log in as the user with the SHA-encoded
    password. Why? The password encoding and storage didn’t matter when we were using
    bind authentication. Why do you think that is?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，把书放一边，试试看，然后再回来。你的登录被拒绝了，对吧？然而，你仍然能够以 SHA 编码的密码登录为用户。为什么？当我们使用绑定认证时，密码编码和存储并不重要。你认为那是什么原因呢？
- en: The reason it didn’t matter with bind authentication was that the LDAP server
    was taking care of the authentication and validation of the user’s password. With
    password compare authentication, Spring Security LDAP is responsible for encoding
    the password in the format expected by the directory and then matching it against
    the directory to validate the authentication.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在绑定认证中这并不重要是因为 LDAP 服务器负责处理用户的密码认证和验证。在密码比较认证中，Spring Security LDAP 负责以目录期望的格式对密码进行编码，然后与目录进行匹配以验证认证。
- en: For security purposes, password comparison authentication can’t actually read
    the password from the directory (reading directory passwords is often denied by
    the security policy). Instead, `PasswordComparisonAuthenticator` performs an LDAP
    search, rooted at the user’s directory entry, attempting to match with a `password`
    attribute and value as determined by the password that’s been encoded by Spring
    Security.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，密码比较认证实际上无法从目录中读取密码（读取目录密码通常会被安全策略拒绝）。相反，`PasswordComparisonAuthenticator`
    在用户的目录条目处执行一个 LDAP 搜索，尝试匹配由 Spring Security 编码的密码所确定的 `password` 属性和值。
- en: So, when we try to log in with `sshauser@example.com`, `PasswordComparisonAuthenticator`
    encodes the password using the configured `SHA` algorithm and attempts to do a
    simple match, which fails, as the directory password for this user is stored in
    the `SSHA` format.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们尝试使用 `sshauser@example.com` 登录时，`PasswordComparisonAuthenticator` 会使用配置的
    `SHA` 算法对密码进行编码，并尝试进行简单的匹配，但失败了，因为该用户的目录密码是以 `SSHA` 格式存储的。
- en: Our current configuration, using `LdapShaPasswordEncoder`, already supports
    `SHA` and `SSHA`, so currently, it still doesn’t work. Let’s think why that might
    be. Remember that `SSHA` uses a salted password, with the salt value stored in
    the LDAP directory along with the password. However, `PasswordComparisonAuthenticator`
    is coded so that it cannot read anything from the LDAP server (this typically
    violates the security policy with companies that don’t allow binding). Thus, when
    `PasswordComparisonAuthenticator` computes the hashed password, it has no way
    to determine what salt value to use.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的配置，使用 `LdapShaPasswordEncoder`，已经支持 `SHA` 和 `SSHA`，所以目前仍然不起作用。让我们思考一下这可能是为什么。记住，`SSHA`
    使用加盐密码，盐值存储在 LDAP 目录中与密码一起。然而，`PasswordComparisonAuthenticator` 的编码方式使得它无法从 LDAP
    服务器中读取任何内容（这通常违反了不允许绑定的公司的安全策略）。因此，当 `PasswordComparisonAuthenticator` 计算散列密码时，它无法确定要使用哪个盐值。
- en: In conclusion, `PasswordComparisonAuthenticator` is valuable in certain limited
    circumstances where the security of the directory itself is a concern, but it
    will never be as flexible as straight bind authentication.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`PasswordComparisonAuthenticator` 在某些有限的情况下很有价值，在这些情况下目录本身的安全性是一个关注点，但它永远不会像直接的绑定认证那样灵活。
- en: Configuring the UserDetailsContextMapper object
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 `UserDetailsContextMapper` 对象
- en: As we noted earlier, an instance of the `o.s.s.ldap.userdetails.UserDetailsContextMapper`
    interface is used to map a user’s entry into the LDAP server to a `UserDetails`
    object in memory. The default `UserDetailsContextMapper` object behaves similarly
    to `JpaDaoImpl`, given the level of detail that is populated on the returned `UserDetails`
    object—that is to say, not a lot of information is returned besides the username
    and password.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所述，`o.s.s.ldap.userdetails.UserDetailsContextMapper` 接口的一个实例用于将用户的条目映射到
    LDAP 服务器中的内存中的 `UserDetails` 对象。默认的 `UserDetailsContextMapper` 对象的行为类似于 `JpaDaoImpl`，考虑到返回的
    `UserDetails` 对象上填充的详细程度——也就是说，除了用户名和密码之外，没有返回太多信息。
- en: However, an LDAP directory potentially contains many more details about individual
    users than usernames, passwords, and roles. Spring Security ships with two additional
    methods of pulling more user data from two of the standard LDAP object schemas—`person`
    and `inetOrgPerson`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，LDAP 目录可能包含比用户名、密码和角色更多的关于个别用户的详细信息。Spring Security 随带提供两种从两个标准 LDAP 对象模式（`person`
    和 `inetOrgPerson`）中提取更多用户数据的方法。
- en: Implicit configuration of UserDetailsContextMapper
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UserDetailsContextMapper 的隐式配置
- en: In order to configure a different `UserDetailsContextMapper` implementation
    than the default, we simply need to declare which `LdapUserDetails` class we want
    `LdapAuthenticationProvider` to return. The security namespace parser will be
    smart enough to instantiate the correct `UserDetailsContextMapper` implementation
    based on the type of the `LdapUserDetails` interface requested.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置一个不同于默认的 `UserDetailsContextMapper` 实现，我们只需声明我们希望 `LdapAuthenticationProvider`
    返回哪个 `LdapUserDetails` 类。安全命名空间解析器将足够智能，能够根据请求的 `LdapUserDetails` 接口类型实例化正确的 `UserDetailsContextMapper`
    实现。
- en: 'Let’s reconfigure our `SecurityConfig.java` file to use the `inetOrgPerson`
    version of the mapper. Update the `SecurityConfig.java` file, as illustrated in
    the following code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新配置我们的 `SecurityConfig.java` 文件以使用 `inetOrgPerson` 版本的映射器。更新 `SecurityConfig.java`
    文件，如下所示：
- en: '[PRE9]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If we remove the `passwordEncoder` method, then the LDAP users that are using
    `SHA` passwords will fail to authenticate.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们删除 `passwordEncoder` 方法，那么使用 `SHA` 密码的 LDAP 用户将无法通过身份验证。
- en: If you were to restart the application and attempt to log in as an LDAP user,
    you would see that nothing changed. In fact, `UserDetailsContextMapper` has changed
    behind the scenes to read the additional details in the case where attributes
    from the `inetOrgPerson` schema are available in the user’s directory entry.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您重新启动应用程序并尝试以 LDAP 用户身份登录，您会发现没有任何变化。实际上，`UserDetailsContextMapper` 在幕后已经更改，以便在用户目录条目中可用
    `inetOrgPerson` 架构的属性时读取额外的详细信息。
- en: Viewing additional user details
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多用户详情
- en: To assist you in this area, we’ll add the ability to view the current account
    to the JBCP calendar application. We’ll use this page to illustrate how the richer
    person and the `inetOrgPerson` LDAP schemas can provide additional (optional)
    information to your LDAP-enabled application.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您在这个领域，我们将向 JBCP 日历应用程序添加查看当前账户的功能。我们将使用此页面来说明更丰富的个人和 `inetOrgPerson` LDAP
    架构如何为您的启用 LDAP 的应用程序提供额外的（可选）信息。
- en: 'You may have noticed that this chapter came with an additional controller named
    `AccountController`. You can see the relevant code, as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，本章附带了一个名为 `AccountController` 的额外控制器。您可以看到相关代码，如下所示：
- en: '[PRE10]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code will retrieve the `UserDetails` object (principal) stored
    in the `Authentication` object by `LdapAuthenticationProvider` and determine what
    type of `LdapUserDetailsImplinterface` it is. The page code itself will then display
    various details depending on the type of `UserDetails` object that has been bound
    to the user’s authentication information, as we see in the following JSP code.
    We have already included JSP as well:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将检索由 `LdapAuthenticationProvider` 存储在 `Authentication` 对象中的 `UserDetails`
    对象（主体），并确定它是哪种类型的 `LdapUserDetailsImplinterface`。页面代码本身将根据已绑定到用户认证信息的 `UserDetails`
    对象的类型显示各种详细信息，如下面的 JSP 代码所示。我们已包含 JSP：
- en: '[PRE11]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The only work that actually needs to be done is to add a link in our `header.xhtml`
    file, as shown in the following code snippet:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上需要完成的工作是在我们的 `header.xhtml` 文件中添加一个链接，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We’ve added the following two more users that you can use to examine the differences
    in the available data elements:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了以下两个用户，您可以使用它们来检查可用数据元素之间的差异：
- en: '| **Username** | **Password** | **Type** |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| **用户名** | **密码** | **类型** |'
- en: '| --- | --- | --- |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `shainet@example.com` | `shainet` | `inetOrgPerson` |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `shainet@example.com` | `shainet` | `inetOrgPerson` |'
- en: '| `shaperson@example.com` | `shaperson` | `person` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `shaperson@example.com` | `shaperson` | `person` |'
- en: Table 6.3 – List of newly added LDAP users
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.3 – 新增 LDAP 用户列表
- en: Important note
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should look like `chapter06.03-calendar`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应类似于 `chapter06.03-calendar`。
- en: Restart the server and examine the `Account Details` page for each of the types
    of users by clicking on `username` in the upper-right corner. You’ll note that
    when `UserDetails` class is configured to use `inetOrgPerson`, although `o.s.s.ldap.userdetails.InetOrgPerson`
    is what is returned, the fields may or may not be populated depending on the available
    attributes in the directory entry.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器，通过点击右上角的`username`来检查每种类型用户的`Account Details`页面。你会注意到，当`UserDetails`类配置为使用`inetOrgPerson`时，尽管返回的是`o.s.s.ldap.userdetails.InetOrgPerson`，但字段是否填充取决于目录条目中可用的属性。
- en: In fact, `inetOrgPerson` has many more attributes that we’ve illustrated on
    this simple page. You can review the full list in *RFC 2798*, *Definition of the
    inetOrgPerson LDAP Object* *Class* ([http://tools.ietf.org/html/rfc2798](http://tools.ietf.org/html/rfc2798)).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`inetOrgPerson`有许多我们在这个简单页面上展示的属性。你可以在*RFC 2798*，*inetOrgPerson LDAP对象类定义*中查看完整的列表（[http://tools.ietf.org/html/rfc2798](http://tools.ietf.org/html/rfc2798)）。
- en: One thing you may notice is that there is no facility to support additional
    attributes that may be specified on an object entry, but don’t fall into a standard
    schema. The standard `UserDetailsContextMapper` interfaces don’t support arbitrary
    lists of attributes, but it is possible nonetheless to customize it with a reference
    to your own `UserDetailsContextMapper` interface using the `userDetailsContextMapper`
    method.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，没有提供支持在对象条目上指定的额外属性的功能，但这些属性并不符合标准模式。标准的`UserDetailsContextMapper`接口不支持任意属性列表，但仍然可以通过使用`userDetailsContextMapper`方法，通过引用你自己的`UserDetailsContextMapper`接口来自定义它。
- en: Using an alternate password attribute
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用替代密码属性
- en: In some cases, it may be necessary to use an alternate LDAP attribute instead
    of `userPassword`, for authentication purposes. This can happen during occasions
    when companies have deployed custom LDAP schemas or don’t have the requirement
    for strong password management (arguably, this is never a good idea, but it definitely
    does occur in the real world).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可能需要使用替代LDAP属性而不是`userPassword`来进行认证。这种情况可能发生在公司部署了自定义LDAP模式或不需要强密码管理（虽然这绝对不是一个好主意，但在现实世界中确实会发生）的时候。
- en: 'The `PasswordComparisonAuthenticator` interface also supports the ability to
    verify the user’s password against an alternate LDAP entry attribute instead of
    the standard `userPassword` attribute. This is very easy to configure, and we
    can demonstrate a simple example using the plaintext `telephoneNumber` attribute.
    Update the `SecurityConfig.java` as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordComparisonAuthenticator`接口还支持验证用户的密码与替代LDAP条目属性（而不是标准的`userPassword`属性）的能力。这非常容易配置，我们可以通过使用明文`telephoneNumber`属性来演示一个简单的例子。按照以下方式更新`SecurityConfig.java`：'
- en: '[PRE13]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can restart the server and attempt to log in with `hasphone@example.com`
    as the `username` attribute and `0123456789` as the `password` (telephone number)
    attribute.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重新启动服务器，并尝试使用`hasphone@example.com`作为`username`属性和`0123456789`作为`password`（电话号码）属性进行登录。
- en: Important note
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should look like `chapter06.04-calendar`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码应该看起来像`chapter06.04-calendar`。
- en: Of course, this type of authentication has all of the perils we discussed earlier
    regarding authentication based on `PasswordComparisonAuthenticator`; however,
    it’s good to be aware of it on the off-chance that it comes up with an LDAP implementation.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种认证方式具有我们之前讨论过的基于`PasswordComparisonAuthenticator`认证的所有风险；然而，了解它总归是好的，以防万一它出现在LDAP实现中。
- en: Using LDAP as UserDetailsService
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用LDAP作为UserDetailsService
- en: One thing to note is that LDAP may also be used as `UserDetailsService`. As
    we will discuss later in the book, `UserDetailsService` is required to enable
    various other bits of functionality in the Spring Security infrastructure, including
    the remember-me and OpenID authentication features.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，LDAP也可以用作`UserDetailsService`。正如我们将在本书后面讨论的，`UserDetailsService`是启用Spring
    Security基础设施中各种其他功能所必需的，包括记住我功能和OpenID认证功能。
- en: 'We will modify our `AccountController` object to use the `LdapUserDetailsService`
    interface to obtain the user. Before doing this, make sure to remove the `passwordCompare`
    method, as shown in the following code snippet:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改我们的`AccountController`对象，使用`LdapUserDetailsService`接口来获取用户。在这样做之前，请确保删除`passwordCompare`方法，如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Configuring LdapUserDetailsService
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置LdapUserDetailsService
- en: 'The configuration of LDAP as a `UserDetailsService` function is very similar
    to the configuration of an LDAP `AuthenticationProvider`. Like the JDBC `UserDetailsService`,
    an LDAP `UserDetailsService` interface is configured as a sibling to the `<`http>
    declaration. Make the following updates to the `SecurityConfig.java` file:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 将LDAP配置为`UserDetailsService`功能的配置与配置LDAP `AuthenticationProvider`非常相似。类似于JDBC
    `UserDetailsService`，LDAP `UserDetailsService`接口被配置为`<http>`声明的兄弟元素。请在`SecurityConfig.java`文件中进行以下更新：
- en: '[PRE15]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Functionally, `o.s.s.ldap.userdetails.LdapUserDetailsService` is configured
    in almost exactly the same way as `LdapAuthenticationProvider`, with the exception
    that there is no attempt to use the principal’s username to bind to LDAP. Instead,
    the credentials are supplied by the `DefaultSpringSecurityContextSource` reference
    and are used to perform the user lookup.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能上，`o.s.s.ldap.userdetails.LdapUserDetailsService`的配置几乎与`LdapAuthenticationProvider`完全相同，唯一的区别是它没有尝试使用主体的用户名来绑定到LDAP。相反，凭证由`DefaultSpringSecurityContextSource`引用提供，并用于执行用户查找。
- en: Important note
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Do not make the very common mistake of configuring `AuthenticationManagerBuilder`
    with the `UserDetailsService` referring to `LdapUserDetailsService` if you intend
    to authenticate the user against LDAP itself! As discussed previously, the `password`
    attribute often cannot be retrieved from LDAP due to security reasons, which makes
    `UserDetailsService` useless for authenticating. As noted previously, `LdapUserDetailsService`
    uses the `baseDn` attribute supplied with the `DefaultSpringSecurityContextSource`
    declaration to get its information—this means that it does not attempt to bind
    the user to LDAP and, as such, may not behave as you expect.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算对LDAP本身进行用户认证，不要犯配置`AuthenticationManagerBuilder`时使用指向`LdapUserDetailsService`的`UserDetailsService`的非常常见的错误！如前所述，由于安全原因，`password`属性通常无法从LDAP中检索，这使得`UserDetailsService`对认证无济于事。如前所述，`LdapUserDetailsService`使用`DefaultSpringSecurityContextSource`声明中提供的`baseDn`属性来获取其信息——这意味着它不会尝试将用户绑定到LDAP，因此可能不会按预期工作。
- en: Updating AccountController to use LdapUserDetailsService
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新AccountController以使用LdapUserDetailsService
- en: 'We will now update the `AccountController` object to use the `LdapDetailsUserDetailsService`
    interface to look up the user that it displays:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将更新`AccountController`对象以使用`LdapDetailsUserDetailsService`接口来查找它显示的用户：
- en: '[PRE16]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Obviously, this example is a bit silly, but it demonstrates the use of `LdapUserDetailsService`.
    Go ahead and restart the application and give this a try with the `username` as
    `admin1@example.com` and the `password` as `admin1`. Can you figure out how to
    modify the controller to display an arbitrary user’s information?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这个例子有点愚蠢，但它演示了`LdapUserDetailsService`的使用。请继续重启应用程序，并使用`username`为`admin1@example.com`和`password`为`admin1`进行尝试。你能想出如何修改控制器以显示任意用户的信息吗？
- en: Can you figure out how you should modify the security settings to restrict access
    to an administrator?
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想出应该如何修改安全设置以限制管理员访问吗？
- en: Important note
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should look like `chapter06.05-calendar`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码应类似于`chapter06.05-calendar`。
- en: Integrating Spring Security with an external LDAP server
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Spring Security与外部LDAP服务器集成
- en: It is likely that once you test basic integration with the embedded LDAP server,
    you will want to interact with an external LDAP server. Fortunately, this is very
    straightforward and can be done using a slightly different syntax along with the
    same
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你测试了与嵌入式LDAP服务器的基本集成，你可能会想与外部LDAP服务器进行交互。幸运的是，这非常简单，可以使用稍微不同的语法以及相同的
- en: 'Update the Spring Security configuration to connect to an external LDAP server
    on port `33389`, as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 将Spring Security配置更新为连接到外部LDAP服务器，端口号为`33389`，如下所示：
- en: '[PRE17]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The notable differences here (aside from the LDAP URL) are that the DN and password
    for an account are provided. The account (which is actually optional) should be
    allowed to bind to the directory and perform searches across all relevant DNs
    for user and group information. The binding resulting from the application of
    these credentials against the LDAP server URL is used for the remaining LDAP operations
    across the LDAP-secured system.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得注意的差异（除了LDAP URL之外）是提供了账户的DN和密码。账户（实际上是可选的）应允许绑定到目录，并在所有相关的DN上执行用户和组信息的搜索。将这些凭证应用于LDAP服务器URL产生的绑定用于LDAP安全系统中的剩余LDAP操作。
- en: Be aware that many LDAP servers also support `ldaps://` at the beginning of
    the LDAP server URL. LDAPS typically runs on TCP port `636`. Note that there are
    many commercial and non-commercial implementations of LDAP.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，许多 LDAP 服务器也支持在 LDAP 服务器 URL 开头使用 `ldaps://`。LDAPS 通常在 TCP 端口 `636` 上运行。请注意，有许多商业和非商业的
    LDAP 实现。
- en: The exact configuration parameters that you will use for connectivity, user
    binding, and the population of `GrantedAuthoritys` will wholly depend on both
    the vendor and the structure of the directory. We will cover one very common LDAP
    implementation, Microsoft AD, in the next section.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用的确切配置参数将完全取决于供应商和目录的结构，用于连接、用户绑定以及 `GrantedAuthoritys` 的填充。我们将在下一节中介绍一个非常常见的
    LDAP 实现，即 Microsoft AD。
- en: 'If you do not have an LDAP server handy and would like to give this a try,
    go ahead and add the following code to your `SecurityConfig.java` file, which
    starts up the embedded LDAP server we have been using:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有现成的 LDAP 服务器，但想尝试一下，请将以下代码添加到您的 `SecurityConfig.java` 文件中，该代码启动了我们一直在使用的嵌入式
    LDAP 服务器：
- en: '[PRE18]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If this isn’t convincing, start up your LDAP server import `calendar.ldif` into
    it. You can then connect to the external LDAP server. Go ahead and restart the
    application and give this a try with the `username` as `shauser@example.com` and
    the `password` as `shauser`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不令人信服，请启动您的 LDAP 服务器，将其中的 `calendar.ldif` 导入。然后您可以连接到外部 LDAP 服务器。请继续重启应用程序，并使用
    `username` 为 `shauser@example.com` 和 `password` 为 `shauser` 尝试。
- en: Important note
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should look like `chapter06.06-calendar`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应类似于 `chapter06.06-calendar`。
- en: Explicit LDAP bean configuration
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显式 LDAP 实例配置
- en: In this section, we’ll lead you through the set of bean configurations required
    to explicitly configure both a connection to an external LDAP server and the `LdapAuthenticationProvider`
    interface required to support authentication against an external server. As with
    other explicit bean-based configurations, you really want to avoid doing this
    unless you find yourself in a situation where the capabilities of the security
    namespace style of configuration will not support your business or your technical
    requirements, in which case, read on!
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将引导您了解所需的一组实例配置，以显式配置连接到外部 LDAP 服务器以及支持对外部服务器进行身份验证所需的 `LdapAuthenticationProvider`
    接口。与其他显式基于实例的配置一样，除非您发现自己处于安全命名空间风格配置的能力无法满足您的业务或技术需求的情况，否则您真的想避免这样做，在这种情况下，请继续阅读！
- en: Configuring an external LDAP server reference
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置外部 LDAP 服务器引用
- en: 'To implement this configuration, we’ll assume that we have a local LDAP server
    running on port `33389`, with the same configuration corresponding to the `DefaultSpringSecurityContextSource`
    interface example provided in the previous section. The required bean definition
    is provided in the `SecurityConfig.java` file. In fact, to keep things simple,
    we have provided the entire `SecurityConfig.java` file. Review the LDAP server
    reference in the following code snippet:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此配置，我们假设我们有一个本地 LDAP 服务器在端口 `33389` 上运行，与上一节中提供的 `DefaultSpringSecurityContextSource`
    接口示例具有相同的配置。所需的实例定义在 `SecurityConfig.java` 文件中。实际上，为了使事情简单，我们已经提供了整个 `SecurityConfig.java`
    文件。请审查以下代码片段中的 LDAP 服务器引用：
- en: '[PRE19]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, we’ll explore how we can perform a search to locate the user in the LDAP
    directory.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何执行搜索以在 LDAP 目录中定位用户。
- en: Performing a search to locate the user in the LDAP directory
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 LDAP 目录中定位用户执行搜索
- en: 'If you’ve read and understood the explanations throughout this chapter describing
    how Spring Security LDAP authentication works behind the scenes, this bean configuration
    will be perfectly understandable, with the following characteristics:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经阅读并理解了本章中关于 Spring Security LDAP 身份验证如何在幕后工作的解释，那么这个实例配置将非常容易理解，具有以下特点：
- en: User credential binding authentication (not password comparison)
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户凭证绑定认证（不是密码比较）
- en: Use of `InetOrgPerson` in `UserDetailsContextMapper`
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `UserDetailsContextMapper` 中使用 `InetOrgPerson`
- en: 'Take a look at the following steps:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下步骤：
- en: 'The first bean provided for us is `BindAuthenticator`, and the supporting `FilterBased`
    **LdapUserSearch** bean is used to locate the user’s DN in the LDAP directory
    prior to binding, as follows:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们提供的第一个实例是 `BindAuthenticator`，以及支持 `FilterBased` **LdapUserSearch** 实例的 `FilterBased`
    实例用于在绑定之前在 LDAP 目录中定位用户的 DN，如下所示：
- en: '[PRE20]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Second, `LdapAuthoritiesPopulator` and `UserDetailsContextMapper` perform the
    roles we examined earlier in the chapter:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，`LdapAuthoritiesPopulator` 和 `UserDetailsContextMapper` 执行我们在本章前面检查过的角色：
- en: '[PRE21]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we must update Spring Security to utilize our explicitly configured
    `UserDetailsService` bean as follows:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须更新 Spring Security 以利用我们显式配置的 `UserDetailsService` bean，如下所示：
- en: '[PRE22]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: At this point, we have fully configured LDAP authentication with explicit Spring
    bean notation. Employing this technique in the LDAP integration is useful in a
    few cases, such as when the security namespace does not expose certain configuration
    attributes, or when custom implementation classes are required to provide functionality
    tailored to a particular business scenario. We’ll explore one such scenario later
    in this chapter when we examine how to connect to Microsoft AD via LDAP.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完全配置了使用显式 Spring bean 符号的 LDAP 认证。在 LDAP 集成中使用这种技术在某些情况下很有用，例如当安全命名空间没有公开某些配置属性时，或者需要自定义实现类以提供针对特定业务场景定制的功能。我们将在本章后面探讨这样一个场景，当我们检查如何通过
    LDAP 连接到 Microsoft AD 时。
- en: Go ahead and start the application and give the configuration a try with the
    `username` as `shauser@example.com` and the `password` as `shauser`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以启动应用程序，并尝试使用 `username` 为 `shauser@example.com` 和 `password` 为 `shauser`
    的配置进行配置。
- en: Assuming you have an external LDAP server running, or you have kept the configured
    in-memory `DefaultSpringSecurityContextSource` object, everything should still
    be working.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设您有一个运行的外部 LDAP 服务器，或者您保留了配置的内存中 `DefaultSpringSecurityContextSource` 对象，一切应该仍然正常工作。
- en: Important note
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should look like `chapter06.07-calendar`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应类似于 `chapter06.07-calendar`。
- en: Delegating role discovery to UserDetailsService
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将角色发现委托给 `UserDetailsService`
- en: One technique for populating user roles that are available to use with explicit
    bean configuration is implementing the support for looking up a user by username
    in `UserDetailsService` and getting the `GrantedAuthority` objects from this source.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 一种使用显式 bean 配置填充可用用户角色的技术是实现支持通过用户名查找用户的功能在 `UserDetailsService` 中，并从该来源获取 `GrantedAuthority`
    对象。
- en: 'The configuration is as simple as replacing the bean with the `ldapAuthoritiesPopulator`
    ID bean with an updated `UserDetailsService` and `LdapAuthoritiesPopulator` object,
    with a reference to `UserDetailsService`. Make the following updates to the `SecurityConfig.java`
    file, ensuring you remove the previous `ldapAuthoritiesPopulator` bean definition:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 配置很简单，只需将 `ldapAuthoritiesPopulator` ID bean 替换为更新的 `UserDetailsService` 和 `LdapAuthoritiesPopulator`
    对象，并引用 `UserDetailsService`。请对 `SecurityConfig.java` 文件进行以下更新，确保您删除了之前的 `ldapAuthoritiesPopulator`
    bean 定义：
- en: '[PRE23]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will also need to ensure that we have defined `userDetailsService`. To keep
    things simple, add an in-memory `UserDetailsService` interface, as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保我们已经定义了 `userDetailsService`。为了简化问题，添加一个内存中的 `UserDetailsService` 接口，如下所示：
- en: '[PRE24]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'At the end, we configured a custom `LdapAuthenticationProvider` interface,
    as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们配置了一个自定义的 `LdapAuthenticationProvider` 接口，如下所示：
- en: '[PRE25]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you have it, you will want to remove the references to `UserDetailsService`
    from `AccountController`, as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有，您可能希望从 `AccountController` 中移除对 `UserDetailsService` 的引用，如下所示：
- en: '[PRE26]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You should now be able to authenticate with `admin1@example.com` as the `username`
    and `admin1` as the `password`. Naturally, we could also substitute this in-memory
    `UserDetailsService` interface for the JDBC or JPA-based one we discussed in [*Chapter
    4*](B21757_04.xhtml#_idTextAnchor106), *JDBC-based Authentication*, and in [*Chapter
    5*](B21757_05.xhtml#_idTextAnchor150), *Authentication with* *Spring Data*.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够使用 `admin1@example.com` 作为 `username` 和 `admin1` 作为 `password` 进行认证。当然，我们也可以用这个内存中的
    `UserDetailsService` 接口替换我们在 [*第 4 章*](B21757_04.xhtml#_idTextAnchor106) 中讨论的
    JDBC 或 JPA 基于的，以及在 [*第 5 章*](B21757_05.xhtml#_idTextAnchor150) 中讨论的通过 *Spring
    Data* 进行认证。
- en: Important note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should look like `chapter06.08-calendar`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应类似于 `chapter06.08-calendar`。
- en: The logistical and managerial problem you may notice with this is that the usernames
    and roles must be managed both in the LDAP server and the repository used by `UserDetailsService`—this
    is probably not a scalable model for a large user base.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到与此相关的物流和管理问题，即用户名和角色必须在 LDAP 服务器和 `UserDetailsService` 所使用的存储库中管理——这可能不是一个适用于大型用户群的可扩展模型。
- en: The more common use of this scenario is when LDAP authentication is required
    to ensure that users of the secured application are valid corporate users, but
    the application itself wants to store authorization information. This keeps potentially
    application-specific data out of the LDAP directory, which can be a beneficial
    separation of concerns.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这种场景的更常见用途是在需要LDAP身份验证以确保受保护应用程序的用户是有效企业用户，但应用程序本身想要存储授权信息时。这可以将可能的应用特定数据从LDAP目录中分离出来，这可以是一种有益的关注点分离。
- en: Integrating with Microsoft Active Directory via LDAP
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过LDAP与Microsoft Active Directory集成
- en: One of the convenient features of Microsoft AD is not only its seamless integration
    with Microsoft Windows-based network architectures, but also that it can be configured
    to expose the contents of AD using the LDAP protocol. If you are working in a
    company that is heavily leveraging Microsoft Windows, it is probable that any
    LDAP integration you do will be against your AD instance.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft AD的一个方便的特性不仅在于它与基于Microsoft Windows的网络架构的无缝集成，而且还可以配置为使用LDAP协议公开AD的内容。如果你在一个大量使用Microsoft
    Windows的公司工作，那么你做的任何LDAP集成很可能都是针对你的AD实例的。
- en: Depending on your configuration of Microsoft AD (and the directory administrator’s
    willingness to configure it to support Spring Security LDAP), you may have a difficult
    time, not with the authentication and binding process, but with the mapping of
    AD information to the user’s `GrantedAuthority` objects within the Spring Security
    system.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你对Microsoft AD的配置（以及目录管理员愿意配置它以支持Spring Security LDAP的意愿），你可能会有困难，不是在身份验证和绑定过程中，而是在将AD信息映射到Spring
    Security系统中的用户的`GrantedAuthority`对象上。
- en: 'The sample AD LDAP tree for JBCP calendar corporate within our LDAP browser
    looks like the following screenshot:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的LDAP浏览器中，JBCP日历企业样本AD LDAP树看起来如下截图所示：
- en: '![Figure 6.11 – Example of a Microsoft Active Directory structure](img/B21757_06_11.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – Microsoft Active Directory结构示例](img/B21757_06_11.jpg)'
- en: Figure 6.11 – Example of a Microsoft Active Directory structure
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – Microsoft Active Directory结构示例
- en: What you do not see here is `ou=Groups`, which we saw in our sample LDAP structure
    earlier; this is because AD stores group membership as attributes on the LDAP
    entries of the users themselves.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有看到的是我们在之前的样本LDAP结构中看到的`ou=Groups`；这是因为AD将组成员资格存储在用户自己的LDAP条目上的属性中。
- en: 'We need to alter our configuration to support our AD structure. Assuming we
    are starting with the bean configuration detailed in the previous section, make
    the following updates:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改我们的配置以支持我们的AD结构。假设我们是从上一节中详细说明的bean配置开始的，进行以下更新：
- en: '[PRE27]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you have it defined, you will want to remove the `UserDetailsService` declaration
    in the `SecurityConfig.java` file. Finally, you will want to remove the references
    to `UserDetailsService` from `AccountController`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经定义了它，你将想要从`SecurityConfig.java`文件中移除`UserDetailsService`声明。最后，你将想要从`AccountController`中移除对`UserDetailsService`的引用。
- en: The `sAMAccountName` attribute is the AD equivalent of the `uid` attribute we
    use in a standard LDAP entry. Although most AD LDAP integrations are likely to
    be more complex than this example, this should give you a starting point to jump
    off and explore your conceptual understanding of the inner workings of Spring
    Security LDAP integration; supporting even a complex integration will be much
    easier.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`sAMAccountName`属性是我们在标准LDAP条目中使用的`uid`属性的AD等价物。尽管大多数AD LDAP集成可能比这个例子更复杂，但这应该为你提供一个起点，以便跳出来探索你对Spring
    Security LDAP集成内部工作原理的概念理解；支持甚至复杂的集成将会容易得多。'
- en: Important note
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: If you want to run this sample, you will need an instance of AD up and running
    that matches the schema displayed in the screenshot. The alternative is to adjust
    the configuration to match your AD schema. A simple way to play around with AD
    is to install `Active Directory Lightweight Directory Services`, which can be
    found at [https://www.microsoft.com/fr-FR/download/details.aspx?id=1451](https://www.microsoft.com/fr-FR/download/details.aspx?id=1451).
    Your code should look like `chapter06.09-calendar`.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想运行这个样本，你需要一个与截图显示的架构相匹配的AD实例正在运行。另一种选择是调整配置以匹配你的AD架构。一个简单的方法是安装`Active Directory
    Lightweight Directory Services`，可以在[https://www.microsoft.com/fr-FR/download/details.aspx?id=1451](https://www.microsoft.com/fr-FR/download/details.aspx?id=1451)找到。你的代码应该看起来像`chapter06.09-calendar`。
- en: Built-in AD support in Spring Security 6.1
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Security 6.1内置的AD支持
- en: Active Directory supports its own non-standard authentication options, and the
    normal usage pattern does not fit too cleanly with the standard `LdapAuthenticationProvider`.
    Typically, authentication is performed by using the domain username (in the form
    of `user@domain`), rather than using an LDAP distinguished name. To make this
    easier, Spring Security has an authentication provider that is customized for
    a typical Active Directory setup.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Active Directory支持其自己的非标准认证选项，并且正常的用法模式与标准的`LdapAuthenticationProvider`不太吻合。通常，认证是通过使用域用户名（形式为`user@domain`）来执行的，而不是使用LDAP区分名称。为了使这更容易，Spring
    Security有一个针对典型Active Directory设置的定制认证提供者。
- en: 'Configuring `ActiveDirectoryLdapAuthenticationProvider` is quite straightforward.
    You need only supply the domain name and an LDAP URL that supplies the address
    of the server as we have covered in the previous sections. A reminder of what
    the configuration looks like can be found in the following code snippet:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 配置`ActiveDirectoryLdapAuthenticationProvider`相当简单。你只需要提供域名和一个提供服务器地址的LDAP URL，正如我们在前面的章节中所述。以下代码片段展示了配置的样子：
- en: '[PRE28]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There are a few things that should be noted about the provided `ActiveDirectory`
    **LdapAuthenticationProvider** class, as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 关于提供的`ActiveDirectory` **LdapAuthenticationProvider**类，有一些需要注意的事项，如下：
- en: The users that need to be authenticated must be able to bind to AD (there is
    no manager user)
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要认证的用户必须能够绑定到AD（没有管理用户）
- en: The default method for populating user authorities is to search the users `memberOf`
    attributes
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充用户权限的默认方法是搜索用户的`memberOf`属性
- en: Users must contain an attribute named `userPrincipalName`, which is in the `username@<domain>`
    format
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须包含一个名为`userPrincipalName`的属性，其格式为`username@<domain>`
- en: Due to the complex LDAP deployments that occur in the real world, the built-in
    support will most likely provide a guide to as how you can integrate with your
    custom LDAP schema.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现实世界中发生的复杂LDAP部署，内置支持很可能提供如何与您自定义LDAP模式集成的指南。
- en: Summary
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have seen that LDAP servers can be relied on to provide authentication and
    authorization information, as well as rich user profile information when requested.
    In this chapter, we covered the LDAP terminology and concepts, and how LDAP directories
    might be commonly organized to work with Spring Security. We also explored the
    configuration of both standalone (embedded) and external LDAP servers from a Spring
    Security configuration file.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，LDAP服务器可以信赖提供认证和授权信息，以及在请求时提供丰富的用户配置文件信息。在本章中，我们介绍了LDAP术语和概念，以及LDAP目录可能如何组织以与Spring
    Security一起工作。我们还探索了从Spring Security配置文件配置独立（嵌入式）和外部LDAP服务器。
- en: We covered the authentication and authorization of users against LDAP repositories,
    and their subsequent mapping to Spring Security actors. We also saw the differences
    in authentication schemes, password storage, and security mechanisms in LDAP,
    and how they are treated in Spring Security. We also learned to map user detail
    attributes from the LDAP directory to the `UserDetails` object for rich information
    exchange between LDAP and the Spring-enabled application. We also explained bean
    configuration for LDAP and the pros and cons of this approach. Lastly, we also
    covered integration with Microsoft AD.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了针对LDAP存储库的用户认证和授权，以及它们随后映射到Spring Security角色的过程。我们还看到了认证方案、密码存储和LDAP中的安全机制之间的差异，以及它们在Spring
    Security中的处理方式。我们还学习了如何将LDAP目录中的用户详细属性映射到`UserDetails`对象，以便在LDAP和Spring启用应用程序之间进行丰富的信息交换。我们还解释了LDAP的bean配置以及这种方法的优缺点。最后，我们还涵盖了与Microsoft
    AD的集成。
- en: In the next chapter, we will discuss Spring Security’s `remember-me` feature,
    which allows a user’s session to securely persist even after closing the browser.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Spring Security的`remember-me`功能，该功能允许用户的会话在关闭浏览器后安全地持久化。
