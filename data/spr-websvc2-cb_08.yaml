- en: Chapter 8. Securing SOAP Web-Services using WSS4J Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用WSS4J库保护SOAP Web服务
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Authenticating a Web-Service call using a username token with a plain/digest
    password
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户名令牌和明文/摘要密码对Web服务调用进行身份验证
- en: Authenticating a Web-Service call using Spring security to authenticate a username
    token with a plain/digest password
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring安全对用户名令牌进行身份验证，密码为明文/摘要
- en: Securing SOAP messages using a digital signature
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数字签名保护SOAP消息
- en: Authenticating a Web-Service call using an X509 certificate
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用X509证书对Web服务调用进行身份验证
- en: Encrypting/decrypting SOAP Messages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密/解密SOAP消息
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In the previous chapter, the usage of SUN''s implementation **(XWSS)**: OASIS
    **Web-Services Security** **(WS-Security** or **WSS)** specification in Spring-WS
    (that uses `XwsSecurityInterceptor` to perform security operations) is explained.
    In this chapter, Spring-WS''s support for Apache''s implementation (WSS4J) of
    OASIS WS-Security specification will be explained. Even though both of these implementation
    of WS-Security are capable of performing the required security operations (authentication,
    signing messages, and encryption/decryption), WSS4J performs faster than XWSS.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，解释了在Spring-WS中使用SUN的实现**(XWSS)**：OASIS **Web-Services Security** **(WS-Security**或**WSS)**规范（使用`XwsSecurityInterceptor`执行安全操作）。在本章中，将解释Spring-WS对Apache的实现（WSS4J）OASIS
    WS-Security规范的支持。尽管这两种WS-Security的实现都能够执行所需的安全操作（身份验证、签名消息和加密/解密），但WSS4J的执行速度比XWSS快。
- en: Spring-WS supports WSS4J using `Wss4jSecurityInterceptor`, which is an `EndpointInterceptor`
    that performs security operations on request messages before calling the `Endpoint`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS支持使用`Wss4jSecurityInterceptor`来支持WSS4J，这是一个在调用`Endpoint`之前对请求消息执行安全操作的`EndpointInterceptor`。
- en: 'While XWSS uses the external configuration policy file, WSS4J (and `Wss4jSecurityInterceptor`
    accordingly) requires no external configuration file and is entirely configurable
    by properties. The **validation** (receiver-side) and **securement** (sender-side)
    actions applied by this interceptor are specified through `validationActions`
    and `securementActions` properties. Multiple actions can be set as space-separated
    strings. Here is an example configuration on the receiver side (server-side in
    this chapter):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然XWSS使用外部配置策略文件，但WSS4J（以及相应的`Wss4jSecurityInterceptor`）不需要外部配置文件，并且完全可以通过属性进行配置。该拦截器应用的**验证**（接收方）和**保护**（发送方）操作通过`validationActions`和`securementActions`属性指定。可以将多个操作设置为由空格分隔的字符串。以下是本章中接收方（服务器端）的示例配置：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `validationActions` is an operations list made up of space-separated strings.
    When a sender sends a message, the `validationActions` (on receiver-side) will
    be executed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`validationActions`是由空格分隔的操作列表。当发送者发送消息时，将执行`validationActions`（在接收方）。'
- en: The `securementActions` is an operations list made of space-separated strings.
    These actions will be executed when the sender sends a message to a receiver.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`securementActions`是由空格分隔的操作列表。当发送者向接收者发送消息时，将执行这些操作。'
- en: '**Validation actions:** `UsernameToken, Timestamp, Encrypt, signature`, and
    `NoSecurity`.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证操作：**`UsernameToken, Timestamp, Encrypt, signature`和`NoSecurity`。'
- en: '**Securement actions:** `UsernameToken, UsernameTokenSignature, Timestamp,
    Encrypt, Signature`, and `NoSecurity`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全操作：**`UsernameToken, UsernameTokenSignature, Timestamp, Encrypt, Signature`和`NoSecurity`。'
- en: The order of the actions is important and is applied by the `Wss4jSecurityInterceptor`.
    This interceptor will return a fault message if the incoming SOAP message `securementActions`
    (in sender-side) was sent in a different way than the one configured by `validationActions`
    (in receiver-side).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的顺序很重要，并由`Wss4jSecurityInterceptor`应用。如果传入的SOAP消息`securementActions`（在发送方）与`validationActions`（在接收方）配置的方式不同，该拦截器将返回故障消息。
- en: 'For the operations, such as encryption/decryption or signatures, WSS4J needs
    to read data from a key store ( `store.jks`):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于加密/解密或签名等操作，WSS4J需要从密钥库（`store.jks`）中读取数据：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Security concepts such as authentication, signatures, decryption, and encryption
    were already detailed in the previous chapter. In this chapter, we will discuss
    how to implement these features using WSS4J.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中已经详细介绍了身份验证、签名、解密和加密等安全概念。在本章中，我们将讨论如何使用WSS4J实现这些功能。
- en: For simplification, for most of the recipes in this chapter, use the projects
    in *How to integrate test using Spring-JUnit support*, [Chapter 3](ch03.html "Chapter 3. Testing
    and Monitoring Web-Services"), *Testing and Monitoring Web-Services*, to set up
    a server and to send and receive messages by the client. However, in the last
    recipe, projects from [Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP
    Web-Services"), *Creating Web-Service client for WS-Addressing endpoint*, are
    used for the server and client side.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为简化起见，在本章的大多数示例中，使用*如何使用Spring-JUnit支持集成测试*项目，[第3章](ch03.html "第3章。测试和监控Web服务")，*测试和监控Web服务*，来设置服务器并通过客户端发送和接收消息。然而，在最后一个示例中，使用了来自[第2章](ch02.html
    "第2章。为SOAP Web服务构建客户端")的项目，*为WS-Addressing端点创建Web服务客户端*，用于服务器和客户端。
- en: Authenticating a Web-Service call using a username token with a plain/digest
    password
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户名令牌和明文/摘要密码对Web服务调用进行身份验证
- en: Authentication simply means to check whether callers of a service are who they
    claim to be. One way of checking the authentication of a caller is to check its
    password (if we consider a username as a person, the password is similar to the
    signature of the person). Spring-WS uses `Wss4jSecurityInterceptor` to send/receive
    the username token with the password along with SOAP messages, and to compare
    it (in the receiver-side) with what is set as a pre-defined username/password
    in the property format. This property setting of the Interceptor force tells the
    sender of messages that a username token with the password should be included
    in the sender messages, and in the receiver side, the receiver expects to receive
    this username token with a password for authentication.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证简单地意味着检查服务的调用者是否是其所声称的。检查调用者的身份验证的一种方式是检查其密码（如果我们将用户名视为一个人，密码类似于该人的签名）。Spring-WS使用`Wss4jSecurityInterceptor`来发送/接收带有密码的用户名令牌以及SOAP消息，并在接收方进行比较，比较其与属性格式中预定义的用户名/密码。拦截器的此属性设置强制告诉消息发送方，发送消息中应包含带有密码的用户名令牌，并且在接收方，接收方期望接收此用户名令牌以进行身份验证。
- en: Transmitting a plain password makes a SOAP message unsecure. `Wss4jSecurityInterceptor`
    provides configuration properties (in the property format) to include the digest
    of the password along with sender message. On the receiver's side, the digested
    password included in the incoming message will be compared with the digested password,
    calculated from what is set in the property format.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 传输明文密码会使SOAP消息不安全。`Wss4jSecurityInterceptor`提供了配置属性（以属性格式）来将密码的摘要与发送方消息一起包括。在接收方，将与属性格式中设置的摘要密码进行比较，该摘要密码包含在传入消息中。
- en: This recipe presents how to authenticate a Web-Service call using the username
    token. Here, the client acts as a sender and the server acts as the receiver.
    This recipe contains two cases. In the first case, the password will be transmitted
    in plain text format. In the second case, by changing the property, the password
    will be transmitted in digest format.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例介绍了如何使用用户名令牌对Web服务调用进行身份验证。在这里，客户端充当发送方，服务器充当接收方。本示例包含两种情况。在第一种情况下，密码将以明文格式传输。在第二种情况下，通过更改属性，密码将以摘要格式传输。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们有以下两个项目：
- en: '`LiveRestaurant_R-8.1` (for a server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.1`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-8.1-Client` (for client-side), with the following Maven dependencies:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.1-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to implement authentication using a plain username token
    with a plain-text password:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用带有明文密码的普通用户名令牌进行身份验证：
- en: Register `Wss4jSecurityInterceptor` in the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `UsernameToken`, and configure
    the `callbackHandler` `(....wss4j.callback.SimplePasswordValidationCallbackHandler)`
    within this interceptor.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中注册`Wss4jSecurityInterceptor`，将验证操作设置为`UsernameToken`，并在此拦截器中配置`callbackHandler`（`....wss4j.callback.SimplePasswordValidationCallbackHandler`）。
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set the `securement` action to `UsernameToken`, and
    set the `username, password`, and `password type` (in `text` format here).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册`Wss4jSecurityInterceptor`，将`securement`操作设置为`UsernameToken`，并在此处设置`username、password`和`password
    type`（以`text`格式）。
- en: Run the following command on `Liverestaurant_R-8.1:`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.1`上运行以下命令：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the following command on `Liverestaurant_R-8.1-Client:`
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.1-Client`上运行以下命令：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the output of the client side (note the `UsernameToken` with the plain
    password tags that is highlighted within the `Header` of the SOAP''s `Envelope)`:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端的输出（请注意，在SOAP的`Envelope`的`Header`中突出显示了带有明文密码标记的`UsernameToken`）：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Follow these steps to implement authentication using the username token with
    the digest password:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用用户名令牌和摘要密码实现身份验证：
- en: Modify the client-side application context ( `applicationContext.xml`) to set
    the password's type to the digest format (note that no change in the server side
    is required).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改客户端应用程序上下文（`applicationContext.xml`）以将密码类型设置为摘要格式（请注意，服务器端无需进行任何更改）。
- en: Run the following command on `Liverestaurant_R-8.1:`
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.1`上运行以下命令：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the following command on `Liverestaurant_R-8.1-Client:`
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.1-Client`上运行以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the client-side output (note the UsernameToken with the digest password
    tags that is highlighted within the Header of the SOAP''s Envelope):'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（请注意，在SOAP信封的标头中突出显示了带有摘要密码标记的UsernameToken）：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Liverestaurant_R-8.1` project is a server-side Web-Service that requires
    its client to send a SOAP envelope that contains a username with a password.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-8.1`项目是一个服务器端Web服务，要求其客户端发送包含用户名和密码的SOAP信封。'
- en: The `Liverestaurant_R-8.1-Client` project is a client-side test project that
    sends SOAP envelopes to the server that contains a username token with a password.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-8.1-Client`项目是一个客户端测试项目，用于向服务器发送包含用户名令牌和密码的SOAP信封。'
- en: 'On the server side, `Wss4jSecurityInterceptor` forces the server for a username
    token validation for all the incoming messages:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，`Wss4jSecurityInterceptor`强制服务器对所有传入消息进行用户名令牌验证：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The interceptor uses a `validationCallbackHandler` ( `SimplePasswordValidationCallbackHandler`)
    to compare the incoming message's username/password with the included username/password
    (admin/password).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器使用`validationCallbackHandler`（`SimplePasswordValidationCallbackHandler`）来比较传入消息的用户名/密码与包含的用户名/密码（admin/password）。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On the client side, `wss4jSecurityInterceptor` includes the username ( `admin/password`)
    token in all outgoing messages:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端上，`wss4jSecurityInterceptor`在所有传出消息中包含用户名（`admin/password`）令牌：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this case, authenticate using a plain username token, since the client includes
    a plain password `(<property name="securementPasswordType" value="PasswordText"/>)`
    in the ongoing messages:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用纯文本用户名令牌进行身份验证，因为客户端在进行中的消息中包含了纯文本密码（`<property name="securementPasswordType"
    value="PasswordText"/>`）：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, in the second case, authenticate using the digest username token,
    since the password digest `(<property name="securementPasswordType" value="PasswordDigest">)`
    is included in the username token:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第二种情况下，使用摘要用户名令牌进行身份验证，因为密码摘要（`<property name="securementPasswordType" value="PasswordDigest">`）包含在用户名令牌中：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, the server compares an incoming SOAP message digest password with
    the calculated digested password set inside `spring-ws-servlet.xml`. In this way,
    the communication will be more secure by comparison with the first case on which
    the password was transmitted in plain text.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，服务器将传入的SOAP消息摘要密码与`spring-ws-servlet.xml`中设置的计算摘要密码进行比较。通过这种方式，与密码以纯文本形式传输的第一种情况相比，通信将更加安全。
- en: See also...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中：
- en: '*Authenticating a Web-Service call using Spring security, to authenticate a
    username token with a plain/digest password*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring安全性进行Web服务调用，对具有纯文本/摘要密码的用户名令牌进行身份验证*'
- en: '*Authenticating a Web-Service call using an X509 certificate*'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用X509证书进行Web服务调用的身份验证*'
- en: Authenticating a Web-Service call using Spring security to authenticate a username
    token with a plain/digest password
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring安全性进行Web服务调用的身份验证，以验证具有纯文本/摘要密码的用户名令牌
- en: 'Here we have the authentication task using the username token with the digest/plain
    password, as we did in the first recipe of this chapter. The only difference here
    is that the Spring security framework is used for authentication (SpringPlainTextPasswordValidationCallbackHandler
    and `SpringDigestPasswordValidationCallbackHandler)`. Since the Spring security
    framework is beyond the scope of this book, it is not described here. However,
    you can read more about it in the *Spring security reference* documentation, available
    at the following website: [http://www.springsource.org/security](http://www.springsource.org/security).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用用户名令牌进行身份验证，密码为摘要/纯文本，就像本章的第一个示例中所做的那样。这里唯一的区别是使用Spring安全框架进行身份验证（SpringPlainTextPasswordValidationCallbackHandler和`SpringDigestPasswordValidationCallbackHandler`）。由于Spring安全框架超出了本书的范围，因此这里不进行描述。但是，您可以在以下网站的*Spring安全参考*文档中了解更多信息：[http://www.springsource.org/security](http://www.springsource.org/security)。
- en: Just like the first recipe of this chapter, this recipe also contains two cases.
    In the first case, the password will be transmitted in a plain-text format. In
    the second case, by changing the configuration, the password will be transmitted
    in a digest format.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本章的第一个示例一样，这个示例也包含两种情况。在第一种情况下，密码将以纯文本格式传输。在第二种情况下，通过更改配置，密码将以摘要格式传输。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有以下两个项目：
- en: '`LiveRestaurant_R-8.2` (for a server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.2`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-8.2-Client` (for client-side), with the following Maven dependencies:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.2-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to implement the authentication of a Web-Service call, using
    Spring security to authenticate a username token with a plain-text password:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现Web服务调用的身份验证，使用Spring安全性对具有纯文本密码的用户名令牌进行身份验证：
- en: Register `Wss4jSecurityInterceptor` in the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `UsernameToken`, and configure
    the `validationCallbackHandler` `(....wss4j.callback.SpringPlainTextPasswordValidationCallbackHandler)`
    within this interceptor.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中注册`Wss4jSecurityInterceptor`，将验证操作设置为`UsernameToken`，并在此拦截器中配置`validationCallbackHandler`（....wss4j.callback.SpringPlainTextPasswordValidationCallbackHandler）。
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set securement action to `UsernameToken`, and set the
    username, password, and password type `(text` format here).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册`Wss4jSecurityInterceptor`，将安全操作设置为`UsernameToken`，并设置用户名、密码和密码类型（这里是文本格式）。
- en: Run the following command on `Liverestaurant_R-8.2:`
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.2`上运行以下命令：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the following command on `Liverestaurant_R-8.2-Client:`
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.2-Client`上运行以下命令：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the output of the client side (note the UsernameToken with the digest
    password tags that is highlighted within the Header of the SOAP''s Envelop):'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是客户端的输出（请注意，在SOAP的头部中突出显示的具有摘要密码标记的UsernameToken）：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Follow these steps to implement the authentication of a Web-Service call using
    Spring security to authenticate a username token with a digested password:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现使用Spring安全性进行Web服务调用的身份验证，以验证具有摘要密码的用户名令牌：
- en: Modify `Wss4jSecurityInterceptor` in the server-side application context ( `spring-ws-servlet.xml`)
    and configure the `validationCallbackHandler` `(....ws.soap.security.wss4j.callback.SpringDigestPasswordValidationCallbackHandler)`
    within this interceptor.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中修改`Wss4jSecurityInterceptor`并在此拦截器中配置`validationCallbackHandler`（`....ws.soap.security.wss4j.callback.SpringDigestPasswordValidationCallbackHandler`）。
- en: Modify `Wss4jSecurityInterceptor` in the client-side application context ( `applicationContext.xml`)
    to set the password type (digest format here).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中修改`Wss4jSecurityInterceptor`以设置密码类型（这里是摘要格式）。
- en: Run the following command on `Liverestaurant_R-8.2:`
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.2`上运行以下命令：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run the following command on `Liverestaurant_R-8.2-Client:`
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.2-Client`上运行以下命令：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the output of the client side (note the UsernameToken with the digest
    password tags that is highlighted within Header of the SOAP''s Envelop):'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端的输出（请注意SOAP信封的标头中突出显示的带有摘要密码标签的UsernameToken）：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `Liverestaurant_R-8.2` project, security for client and server is almost
    the same as `Liverestaurant_R-8.1` (as shown in the first recipe of this chapter),
    except for the validation of the username token on the server side. A Spring security
    class is responsible for validating the username and the password, by comparison
    with the incoming message's username/password with the fetch data from a DAO layer
    (instead of hardcoding the username/password in `spring-ws-servlet.xml)`. In addition,
    other data related to the successfully authenticated user can be fetched from
    the DAO layer and returned for authorization to check some account data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.2`项目中，客户端和服务器的安全性几乎与`Liverestaurant_R-8.1`相同（如本章第一个配方所示），只是在服务器端验证用户名令牌。Spring安全类负责通过与从DAO层获取的数据进行比较来验证用户名和密码（而不是在`spring-ws-servlet.xml`中硬编码用户名/密码）。此外，可以从DAO层获取其他与成功验证用户相关的数据，并返回以进行授权以检查一些帐户数据。
- en: In the first case, the `CallbackHandler SpringPlainTextPasswordValidationCallbackHandler`
    uses an `authenticationManager`, which uses `DaoAuthenticationProvider`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，`CallbackHandler SpringPlainTextPasswordValidationCallbackHandler`使用`authenticationManager`，该管理器使用`DaoAuthenticationProvider`。
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This provider calls a customized user information service ( `MyUserDetailService.java`)
    that gets a username from the provider and internally fetches all the information
    for that user from a DAO layer (for example, password, roles, is expired, and
    so on). This service finally returns the populated data in the `UserDetails` type
    class ( `MyUserDetails.java`). Now, if the `UserDetails` data matches the incoming
    message''s username/password, it returns a response; otherwise, it returns a SOAP
    fault message:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此提供程序调用自定义用户信息服务（`MyUserDetailService.java`），该服务从提供程序获取用户名并在内部从DAO层获取该用户的所有信息（例如密码、角色、是否过期等）。最终，该服务以`UserDetails`类型类（`MyUserDetails.java`）返回填充的数据。现在，如果`UserDetails`数据与传入消息的用户名/密码匹配，则返回响应；否则，返回SOAP故障消息：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the second case, however, the `CallbackHandler` is `SpringDigestPasswordValidationCallbackHandler`,
    which compares the digest password included in the SOAP incoming message with
    the digested password that is fetched from the DAO layer (note that the DAO layer
    could fetch data from different data-sources, such as the database, LDAP, XML
    file, and so on):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第二种情况下，`CallbackHandler`是`SpringDigestPasswordValidationCallbackHandler`，它将SOAP传入消息中包含的摘要密码与从DAO层获取的摘要密码进行比较（请注意，DAO层可以从不同的数据源获取数据，如数据库、LDAP、XML文件等）：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Same as the first recipe in this chapter, setting`<property name="securementPasswordType"
    value="PasswordText">` to `PasswordDigest` in the client application context causes
    the password to be transmitted into a digested format.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章第一个配方相同，在客户端应用程序上下文中将`<property name="securementPasswordType" value="PasswordText">`修改为`PasswordDigest`会导致密码以摘要格式传输。
- en: See also...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Authenticating a Web-Service call, using a username token with a plain/digest
    password*'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用用户名令牌进行Web服务调用的身份验证，使用明文/摘要密码*'
- en: '*Authenticating a Web-Service call using an X509 certificate*'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用X509证书对Web服务调用进行身份验证*'
- en: Securing SOAP messages using a digital signature
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数字签名保护SOAP消息
- en: The purpose of a signature in the security term is to verify whether a received
    message is altered. Signature covers two main tasks in WS-Security, namely, signing
    and verifying signatures of messages. All concepts involved in a message signature
    are detailed in the previous chapter, in the *Securing SOAP messages using digital
    signature* recipe. In this recipe, signing and verification of a signature using
    WSS4J is presented.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全术语中，签名的目的是验证接收到的消息是否被篡改。签名在WS-Security中扮演着两个主要任务，即对消息进行签名和验证签名。消息签名涉及的所有概念都在上一章的*使用数字签名保护SOAP消息*中详细介绍。在这个配方中，使用WSS4J进行签名和验证签名。
- en: Spring-WS's `Wss4jSecurityInterceptor` is capable of signing and verification
    of signatures based on the WS-Security standard.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS的`Wss4jSecurityInterceptor`能够根据WS-Security标准进行签名和验证签名。
- en: Setting this interceptor's `securementActions` property to `Signature` causes
    the sender to sign outgoing messages. To encrypt the signature token, the sender's
    private key is required. Properties of a key store are needed to be configured
    in the application context file. The alias and the password of the private key
    (inside key store) for use are specified by the `securementUsername` and `securementPassword`
    properties. The `securementSignatureCrypto` should specify the key store containing
    the private key.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将此拦截器的`securementActions`属性设置为`Signature`会导致发送方对传出消息进行签名。要加密签名令牌，需要发送方的私钥。需要在应用程序上下文文件中配置密钥库的属性。`securementUsername`和`securementPassword`属性指定了用于使用的密钥库中的私钥的别名和密码。`securementSignatureCrypto`应指定包含私钥的密钥库。
- en: Setting `validationActions` to `value="Signature`" causes the receiver of the
    message to expect and validate the incoming message signatures (as described at
    beginning). The `validationSignatureCrypto` bean should specify the key store
    that contains the public key certificates (trusted certificate) of the sender.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将`validationActions`设置为`value="Signature`"会导致消息的接收方期望并验证传入消息的签名（如开头所述）。`validationSignatureCrypto`
    bean应指定包含发送方公钥证书（受信任证书）的密钥库。
- en: '`org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean` from
    the `wss4j` package can extract the key store data (such as the certificate and
    other key store information ), and this data could be used for authentication.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 来自`wss4j`包的`org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean`可以提取密钥库数据（例如证书和其他密钥库信息），并且这些数据可以用于身份验证。
- en: In this recipe, the client store private key is used for encryption of the client's
    signature of a message. On the server-side, the client's public key certificate,
    included in the server key store (within a trusted certificate entry), will be
    used for decryption of the message signature token. Then the server does the verification
    of the signature (as described in the beginning). Key store used in [Chapter 7](ch07.html
    "Chapter 7. Securing SOAP Web-Services using XWSS Library"), in the recipe *Preparing
    pair and symmetric Key stores*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，客户端存储的私钥用于加密消息的客户端签名。在服务器端，包含在服务器密钥库中的客户端公钥证书（在受信任证书条目中）将用于解密消息签名令牌。然后服务器对签名进行验证（如开头所述）。在[第7章](ch07.html
    "第7章。使用XWSS库保护SOAP Web服务")中使用的密钥库，在*准备配对和对称密钥库*中使用。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们有以下两个项目：
- en: '`LiveRestaurant_R-8.3` (for a server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.3`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-8.3-Client` (for the client-side), with the following Maven
    dependencies:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.3-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register `Wss4jSecurityInterceptor` in the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Signature`, and set the
    property `validationSignatureCrypto` to `CryptoFactoryBean` (configure the server-side
    key store location and its password) within this interceptor.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中注册`Wss4jSecurityInterceptor`，将验证操作设置为`Signature`，并在此拦截器中将`validationSignatureCrypto`属性设置为`CryptoFactoryBean`（配置服务器端密钥库位置及其密码）。
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set the securement action to `Signature`, and set the
    property `securementSignatureCrypto` to `CryptoFactoryBean` (configure the client-side
    key store location and its password) within this interceptor.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册`Wss4jSecurityInterceptor`，将安全操作设置为`Signature`，并在此拦截器中将`securementSignatureCrypto`属性设置为`CryptoFactoryBean`（配置客户端密钥库位置及其密码）。
- en: Run the following command on `Liverestaurant_R-8.3:`
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.3`上运行以下命令：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run the following command on `Liverestaurant_R-8.3-Client:`
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.3-Client`上运行以下命令：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is the output of the client side (please note highlighted text):'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端的输出（请注意突出显示的文本）：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Security configuration on the server side requires the client to include a binary
    signature token in the message. Settings in the client-side configuration file
    include the signature token in the outgoing messages. A client uses its own private
    key, included in client-side key store, to encrypt the signature of a message
    (calculated based on the message's content). On the server-side, the client certificate
    from the server-side (trusted certificate) key store is used for decrypting of
    a signature token. Then the verification of the signature from the binary signature
    token (as described at the beginning of this recipe) will be done.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端的安全配置要求客户端在消息中包含一个二进制签名令牌。客户端配置文件中的设置将签名令牌包含在传出消息中。客户端使用自己的私钥（包含在客户端密钥库中）对消息的签名进行加密（根据消息的内容计算）。在服务器端，来自服务器端的客户端证书（受信任证书）密钥库用于解密签名令牌。然后将对二进制签名令牌的签名验证（如本章开头所述）进行验证。
- en: 'Setting `validationActions` to `Signature` on the server-side causes it to
    expect a signature from the client configuration, and setting the key store causes
    the client-side public-key certificate (trusted certificate) in the server-side
    key store to be used for the decryption of the signature. Then the server does
    a verification of the signature:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端将`validationActions`设置为`Signature`会导致它期望来自客户端配置的签名，并且设置密钥库会导致服务器端密钥库中的客户端公钥证书（受信任证书）用于解密签名。然后服务器对签名进行验证：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`The code statement <property name="securementActions" value="Signature" />`,
    and setting the key store on the client-side configuration causes the client to
    send the encrypted signature (using the client''s private key with the alias `client`,
    and the client encrypts a hash (signature) generated from the message) and is
    sent along with the message:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 代码语句`<property name="securementActions" value="Signature" />`，并在客户端配置中设置密钥库会导致客户端发送加密签名（使用别名为`client`的客户端私钥，并且客户端加密从消息生成的哈希（签名）），并随消息一起发送：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Authenticating a Web-Service call using an X509 certificate*'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用X509证书对Web服务调用进行身份验证*'
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),*Securing
    SOAP Web Services using XWSS Library:*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章。使用XWSS库保护SOAP Web服务")，*使用XWSS库保护SOAP Web服务：*'
- en: '*Preparing pair and symmetric Key stores*'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*准备配对和对称密钥存储*'
- en: Authenticating a Web-Service call using an X509 certificate
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用X509证书对Web服务调用进行身份验证
- en: Earlier in this chapter, how to use a username token for authentication of an
    incoming message is presented. The client's certificate, which came along with
    an incoming message, could be used to authenticate as an alternative for the username's
    token for authentication.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面部分，介绍了如何使用用户名令牌对传入消息进行身份验证。随传入消息一起传来的客户端证书可以用作替代用户名令牌进行身份验证。
- en: To make sure that all incoming SOAP messages carry a client's certificate, the
    configuration file on the sender's side should sign and the receiver should require
    signatures on all messages. In other words, the client should sign the message,
    and include the X509 certificate in the outgoing message, and the server, first
    compares the incoming certificate with the trusted certificate, which is embedded
    within server key store, and then it goes into the steps to verify the signature
    of the incoming message.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保所有传入的SOAP消息携带客户端的证书，发送方的配置文件应该签名，接收方应该要求所有消息都有签名。换句话说，客户端应该对消息进行签名，并在传出消息中包含X509证书，服务器首先将传入的证书与信任的证书进行比较，该证书嵌入在服务器密钥库中，然后进行验证传入消息的签名。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们有以下两个项目：
- en: '`LiveRestaurant_R-8.4` (for a server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.4`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-8.4-Client` (for the client-side), with the following Maven
    dependencies:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.4-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register `Wss4jSecurityInterceptor` on the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Signature`, and set the
    property `validationSignatureCrypto` to `CryptoFactoryBean` (configure the server-side
    key store location and its password) within this interceptor.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中注册`Wss4jSecurityInterceptor`，将验证操作设置为`Signature`，并在此拦截器中将属性`validationSignatureCrypto`设置为`CryptoFactoryBean`（配置服务器端密钥库位置及其密码）。
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set the securement action to `Signature`, set a property
    ( `securementSignatureKeyIdentifier`) to include a binary `X509` token, and set
    the property `securementSignatureCrypto` to `CryptoFactoryBean` (configure the
    client-side key store location and its password) within this interceptor.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在客户端应用程序上下文（`applicationContext.xml`）中注册`Wss4jSecurityInterceptor`，将安全操作设置为`Signature`，设置一个属性（`securementSignatureKeyIdentifier`）以包含二进制`X509`令牌，并在此拦截器中将属性`securementSignatureCrypto`设置为`CryptoFactoryBean`（配置客户端密钥库位置及其密码）。 '
- en: 'Here is the output of the client side (please note highlighted text):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端的输出（请注意突出显示的文本）：
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Signing and verification of signature is the same as the *Securing SOAP messages
    using a digital signature* recipe from this chapter. The difference is the following
    part of the configuration to generate a `BinarySecurityToken` element containing
    the X509 certificate, and to include it in the outgoing message on the sender''s
    side:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 签名和验证签名与本章中*使用数字签名保护SOAP消息*的配方相同。不同之处在于配置的以下部分，用于生成包含X509证书的`BinarySecurityToken`元素，并在发送方的传出消息中包含它：
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Embedding the client certificate in the caller message while signing the message
    causes the server to validate this certificate with the one included in the key
    store (trusted certificate entry). This validation confirms whether the caller
    is the person he/she claims to be.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在签名消息时将客户端证书嵌入调用者消息中，使服务器验证该证书与密钥库中包含的证书（受信任的证书条目）一致。此验证确认了调用者是否是他/她声称的人。
- en: See also...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Securing Soap messages using a digital signature*'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数字签名保护Soap消息*'
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),*Securing
    SOAP Web Services using XWSS Library:*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章。使用XWSS库保护SOAP Web服务")，*使用XWSS库保护SOAP Web服务：*'
- en: '*Preparing pair and symmetric Key stores*'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*准备配对和对称密钥存储*'
- en: Encrypting/decrypting SOAP messages
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密/解密SOAP消息
- en: The concepts of encryption and decryption of SOAP messages are the same as described
    in *Encrypting/Decrypting of SOAP Messages* from [Chapter 7](ch07.html "Chapter 7. Securing
    SOAP Web-Services using XWSS Library"). Spring-WS's `Wss4jSecurityInterceptor`
    provides decryption of the incoming SOAP messages by including the setting property
    `validationActions` to `Encrypt` on the receiver's-side (server-side here). On
    the sender's side (the client side here), setting the property `securementActions`
    causes the sender to `encrypt` outgoing messages.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP消息的加密和解密概念与[第7章](ch07.html "第7章。使用XWSS库保护SOAP Web服务")中描述的*加密/解密SOAP消息*相同。Spring-WS的`Wss4jSecurityInterceptor`通过在接收方（这里是服务器端）设置属性`validationActions`为`Encrypt`来提供对传入SOAP消息的解密。在发送方（这里是客户端）设置属性`securementActions`会导致发送方对传出消息进行加密。
- en: '`Wss4jSecurityInterceptor` needs to access the key store for encryption/decryption.
    In the case of using a symmetric key, `Key storeCallbackHandler` is responsible
    for accessing (by setting the properties of `location` and `password)` and reading
    from a symmetric key store, and passing it to the interceptor. However, in the
    case of using a private/public key pair store, `CryptoFactoryBean` will do the
    same job.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wss4jSecurityInterceptor`需要访问密钥库进行加密/解密。在使用对称密钥的情况下，`Key storeCallbackHandler`负责访问（通过设置`location`和`password`属性）并从对称密钥库中读取，并将其传递给拦截器。然而，在使用私钥/公钥对存储的情况下，`CryptoFactoryBean`将执行相同的工作。'
- en: In this recipe, in the first case, a symmetric key, which is shared by the client
    and server, is used for encryption on the client-side and decryption on the server-side.
    Then, in the second case, the server public key certificate in the client-side
    key store (trusted certificate) is used for data encryption and the server private
    key in the server-side key store is used for decryption.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，在第一种情况下，客户端和服务器共享的对称密钥用于客户端的加密和服务器端的解密。然后，在第二种情况下，客户端密钥库中的服务器公钥证书（受信任的证书）用于数据加密，服务器端密钥库中的服务器私钥用于解密。
- en: In the first two cases, the whole payload is used in Encryption/Decryption.
    By setting one property, it is possible to Encrypt/Decrypt part of the payload.
    In the third case, only part of the payload is set as the target of Encryption/Decryption.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两种情况下，整个有效载荷用于加密/解密。通过设置一个属性，可以对有效载荷的一部分进行加密/解密。在第三种情况下，只有有效载荷的一部分被设置为加密/解密的目标。
- en: Getting ready
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有以下两个项目：
- en: '`LiveRestaurant_R-8.5` (for a server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.5`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-8.5-Client` (for the client-side), with the following Maven
    dependencies:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-8.5-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Follow these steps to implement encryption/decryption using a symmetric key:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用对称密钥实施加密/解密：
- en: Register `Wss4jSecurityInterceptor` on the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Encrypt`, and configure
    `Key storeCallbackHandler` to read from the symmetric key store (configure the
    server-side symmetric key store location and its password) within this interceptor.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中注册`Wss4jSecurityInterceptor`，将验证操作设置为`Encrypt`，并在此拦截器内配置`Key
    storeCallbackHandler`以从对称密钥库中读取（配置服务器端对称密钥库位置及其密码）。
- en: Register `Wss4jSecurityInterceptor` on the client-side application context (
    `applicationContext.xml`), set the securement action to `Encrypt`, and configure
    the `Key storeCallbackHandler` to read from the symmetric key store (configure
    the client-side symmetric key store location and its password) within this interceptor.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册`Wss4jSecurityInterceptor`，将安全操作设置为`Encrypt`，并配置`Key
    storeCallbackHandler`以从对称密钥库中读取（配置客户端对称密钥库位置及其密码）。
- en: Run the following command on `Liverestaurant_R-8.5:`
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.5`上运行以下命令：
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run the following command on `Liverestaurant_R-8.5-Client:`
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.5-Client`上运行以下命令：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is the output of the client side (note highlighted text):'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端的输出（请注意突出显示的文本）：
- en: '[PRE31]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Follow these steps to implement encryption, using a server-trusted certificate
    on the client-side key store (in `clientStore.jsk)`, and decryption on the server-side
    private key (in `serverStore.jks):`
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在客户端密钥库（在`clientStore.jsk`中）上使用服务器信任的证书实施加密，并在服务器端私钥（在`serverStore.jks`中）上进行解密：
- en: Register `Wss4jSecurityInterceptor` on the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Encrypt`, and set the
    property `validationSignatureCrypto` to `CryptoFactoryBean` (configure the server-side
    key store location and its password) within this interceptor.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`spring-ws-servlet.xml`）中注册`Wss4jSecurityInterceptor`，将验证操作设置为`Encrypt`，并在此拦截器内将属性`validationSignatureCrypto`设置为`CryptoFactoryBean`（配置服务器端密钥库位置及其密码）。
- en: Register the `Wss4jSecurityInterceptor` in the client-side application context
    ( `applicationContext.xml`), set the securement action to `Encrypt`, and set `securementSignatureCrypto`
    to `CryptoFactoryBean` (configure the client-side key store location and its password)
    within this interceptor.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册`Wss4jSecurityInterceptor`，将安全操作设置为`Encrypt`，并在此拦截器内将`securementSignatureCrypto`设置为`CryptoFactoryBean`（配置客户端密钥库位置及其密码）。
- en: 'Here is the output of the server side (note highlighted text):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务器端的输出（请注意突出显示的文本）：
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Follow these steps to implement encryption/decryption on the payload:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在有效载荷上实施加密/解密：
- en: Modify case 2, set the property `securementEncryptionParts` to a specific part
    of the payload in `Wss4jSecurityInterceptor` on the server side/client side.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改第2种情况，将`Wss4jSecurityInterceptor`上的`securementEncryptionParts`属性设置为有效载荷的特定部分，无论是在服务器端还是客户端。
- en: Run the following command on `Liverestaurant_R-8.5:`
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.5`上运行以下命令：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run the following command on `Liverestaurant_R-8.5-Client:`
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-8.5-Client`上运行以下命令：
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here is the output of the client side (note highlighted text):'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端的输出（请注意突出显示的文本）：
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the first case, the client and the server both share the symmetric key. The
    client encrypts the entire payload using a symmetric key, and sends it to the
    server. On the server side, the same key will be used to decrypt the payload.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，客户端和服务器都共享对称密钥。客户端使用对称密钥加密整个有效载荷，并将其发送到服务器。在服务器端，相同的密钥将用于解密有效载荷。
- en: However, in the second and third cases, the client-side server certificate,
    embedded in the client store, is used for encryption of the payload, and on the
    server side, the private key of the server store will be used for decryption.
    The difference between the second and the third case is that the second case encrypts/decrypts
    the whole payload, but in the third case, only part of the payload will be the
    target of encryption/decryption.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第二和第三种情况下，客户端存储中嵌入的服务器证书用于加密有效负载，在服务器端，服务器存储的私钥将用于解密。第二种和第三种情况之间的区别在于第二种情况加密/解密整个有效负载，但在第三种情况下，只有部分有效负载将成为加密/解密的目标。
- en: 'In the first case, the setting `validationActions` to `Encrypt` on server-side
    causes the server to decrypt the incoming messages using a symmetric key. The
    interceptor uses the `ValidationCallbackHandler` for decryption, using a symmetric
    key store, set in the `location` property. The property `type` sets the store
    type of the key, and `password` sets the key store password of the symmetric key:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，在服务器端将`validationActions`设置为`Encrypt`会导致服务器使用对称密钥解密传入消息。拦截器使用`ValidationCallbackHandler`进行解密，使用在`location`属性中设置的对称密钥存储。`type`属性设置密钥的存储类型，`password`设置对称密钥的密钥存储密码：
- en: '[PRE36]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: On the client-side, the setting property `securementActions` to `Encrypt` causes
    the client to encrypt all outgoing messages. Encryption is customized by setting
    `securementEncryptionKeyIdentifier` to `EmbeddedKeyName`. When the `EmbeddedKeyName`
    type is chosen, the secret key to encryption is mandatory. The symmetric key alias
    (symmetric here) is set by the `securementEncryptionUser`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，将`securementActions`属性设置为`Encrypt`会导致客户端加密所有传出消息。通过将`securementEncryptionKeyIdentifier`设置为`EmbeddedKeyName`来自定义加密。选择`EmbeddedKeyName`类型时，加密的秘钥是必需的。对称密钥别名（此处为对称）由`securementEncryptionUser`设置。
- en: 'By default, the `ds:KeyName` element in the SOAP header takes the value of
    the `securementEncryptionUser` property. `securementEncryptionEmbeddedKeyName`
    could be used to indicate a different value. The `securementEncryptionKeyTransportAlgorithm`
    property defines which algorithm to use to encrypt the generated symmetric key.
    `securementCallbackHandler` is provided with `Key storeCallbackHandler`, which
    points to the appropriate key store, that is, a symmetric key store, as described
    in the server-side configuration:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SOAP标头中的`ds:KeyName`元素采用`securementEncryptionUser`属性的值。`securementEncryptionEmbeddedKeyName`可用于指示不同的值。`securementEncryptionKeyTransportAlgorithm`属性定义要使用的算法来加密生成的对称密钥。`securementCallbackHandler`提供了`Key
    storeCallbackHandler`，指向适当的密钥存储，即服务器端配置中描述的对称密钥存储：
- en: '[PRE37]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the second and the third case, the `validationDecryptionCrypto`, configured
    on the server side is almost the same as the first case for decrypting data:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二和第三种情况下，服务器端配置的`validationDecryptionCrypto`几乎与第一种情况解密数据的方式相同：
- en: '[PRE38]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'On the client-side, setting `value="Encrypt`" of `securementActions` causes
    the client to encrypt all outgoing messages. `securementEncryptionCrypto` is for
    setting the key store location and the password. `SecurementEncryptionUser` is
    for setting the alias of the server certificate to reside on the client key store:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，将`securementActions`的`value="Encrypt`"设置为会导致客户端加密所有传出消息。`securementEncryptionCrypto`用于设置密钥存储位置和密码。`SecurementEncryptionUser`用于设置服务器证书在客户端密钥存储中的别名：
- en: '[PRE39]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The difference between *case 2* and *3* is that the following the configuration
    setting on the client-side/server-side configuration causes only a part of the
    payload to be encrypted/decrypted.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*第2种*和*第3种*之间的区别在于在客户端/服务器端配置中的配置设置仅导致部分有效负载被加密/解密。'
- en: '[PRE40]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: See also...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Securing SOAP messages using a digital signature*'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数字签名保护SOAP消息*'
- en: '[Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building
    Clients for SOAP Web-Services*'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。为SOAP Web服务构建客户端"),*为SOAP Web服务构建客户端*'
- en: '*Creating Web-Service client for WS-Addressing endpoint*'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为WS-Addressing端点创建Web服务客户端*'
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),*Securing
    SOAP Web Services using XWSS Library*'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章。使用XWSS库保护SOAP Web服务"),*使用XWSS库保护SOAP Web服务*'
- en: '*Preparing* a *pair and symmetric key stores*'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*准备*一对和对称密钥存储*'
