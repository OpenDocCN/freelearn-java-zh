- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Setting Up the Database and Spring Data JPA
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库和Spring Data JPA
- en: In the previous chapter, you learned about Spring Boot’s fundamentals to develop
    our backend application, such as dependency injection, beans, and annotations.
    In addition, we now know how to create a Spring Boot project using Spring Initializr.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了Spring Boot的基本知识，以开发我们的后端应用程序，例如依赖注入、bean和注解。此外，我们现在知道如何使用Spring Initializr创建Spring
    Boot项目。
- en: This chapter will teach you how to connect your Spring Boot application to a
    database by adding a PSQL container and PostgreSQL dependencies and accessing
    data using the **Java Persistence** **API** (**JPA**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教授您如何通过添加PSQL容器和PostgreSQL依赖项以及使用**Java持久化** **API**（**JPA**）来访问数据，将您的Spring
    Boot应用程序连接到数据库。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Connecting to database using a PSQL container
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PSQL容器连接到数据库
- en: Spring Data JPA
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: Adding Spring Data JPA and PostgreSQL dependencies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Spring Data JPA和PostgreSQL依赖项
- en: Connecting to a database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Here is what you need to complete this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章所需的内容如下：
- en: '**PostgreSQL**: [https://www.postgresql.org/download/windows/](https://www.postgresql.org/download/windows/)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**：[https://www.postgresql.org/download/windows/](https://www.postgresql.org/download/windows/)'
- en: '**pgAdmin**: [https://www.pgadmin.org/download/](https://www.pgadmin.org/download/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pgAdmin**：[https://www.pgadmin.org/download/](https://www.pgadmin.org/download/)'
- en: '**Docker**: [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)'
- en: Connecting to a database using a PSQL container
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PSQL容器连接到数据库
- en: This section will teach us how to set up and configure our PostgreSQL in our
    terminal by using the conventional method, using the installer, or through a Docker
    container. But first, let’s discuss what PostgreSQL is and what its advantages
    are.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教授我们如何通过使用传统方法、安装程序或通过Docker容器在我们的终端中设置和配置我们的PostgreSQL。但首先，让我们讨论一下PostgreSQL是什么以及它的优势是什么。
- en: PostgreSQL
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**PostgreSQL** is an open source object-relational database system that uses
    the SQL language to store and handle complicated and large workloads. PostgreSQL
    also supports both *SQL (relational)* and *JSON (non-relational)* querying. It
    is commonly used as primary data storage for geospatial and analytics applications
    because of its flexibility and rich features. Its community has improved and continuously
    backed it for more than 20 years to add more features and reliability to the database
    system.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**PostgreSQL**是一个开源的对象关系型数据库系统，使用SQL语言来存储和处理复杂和大量工作负载。PostgreSQL还支持*SQL（关系型）*和*JSON（非关系型）*查询。由于其灵活性和丰富的功能，它通常用作地理空间和分析应用程序的主要数据存储。其社区已经持续改进并支持它超过20年，为数据库系统添加更多功能和可靠性。'
- en: 'PostgreSQL’s flexibility means that it is widely used in developing applications.
    Here are some of the everyday use cases:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL的灵活性意味着它在开发应用程序中得到了广泛应用。以下是一些日常用例：
- en: '**Scientific data**: Research projects can be demanding in storing data, which
    requires effective and efficient handling. PostgreSQL provides analytical features
    and a powerful SQL engine that can process a large amount of data.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**科学数据**：研究项目在存储数据方面可能要求较高，这需要有效且高效的处理。PostgreSQL提供了分析功能和强大的SQL引擎，可以处理大量数据。'
- en: '**Financial industry**: PostgreSQL is used in financial companies because of
    its analytical capabilities and easy integration with mathematical software such
    as MATLAB and R.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融行业**：PostgreSQL因其分析能力和易于与数学软件（如MATLAB和R）集成而用于金融公司。'
- en: '**Web applications**: PostgreSQL is also used widely in web applications because
    apps nowadays require processing thousands of pieces of data. It is compatible
    with modern web frameworks such as Node.js, Hibernate PHP, and Django.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web应用程序**：PostgreSQL也广泛应用于Web应用程序中，因为现在的应用程序需要处理数千条数据。它与现代Web框架（如Node.js、Hibernate
    PHP和Django）兼容。'
- en: '**Government GIS data**: PostgreSQL offers extensions such as PostGIS that
    provide functions to process geometric data.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**政府GIS数据**：PostgreSQL提供如PostGIS等扩展，提供处理几何数据的功能。'
- en: The features of PostgreSQL
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL的功能
- en: 'Here’s a list of some of the features that PostgreSQL offers:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是PostgreSQL提供的一些功能列表：
- en: '**Compatibility with multiple data types**: PostgreSQL is compatible with several
    data types:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容多种数据类型**：PostgreSQL兼容多种数据类型：'
- en: '**Structured**: Arrays, date and time, **Universally Unique Identifiers** (**UUIDs**),
    and range'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化**：数组、日期和时间、**通用唯一识别码**（**UUIDs**）和范围'
- en: '**Customizations**: Custom types, and composite'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：自定义类型和组合'
- en: '**Primitives**: String, integer, numeric, and Boolean'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原语**：字符串、整数、数值和布尔值'
- en: '**Geometry**: Polygon, circle, line, and point'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**几何**：多边形、圆、线和点'
- en: '**Document**: XML, JSON/JSONB, and key-value'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：XML、JSON/JSONB和键值'
- en: '**Supports different features of SQL**: It offers the various features of SQL,
    such as the following:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持SQL的不同功能**：它提供了SQL的各种功能，如下所示：'
- en: Multiple indexing, such as B-tree and expressions
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种索引，如B树和表达式
- en: SQL subselects
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL子查询
- en: Complex SQL queries
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂SQL查询
- en: '**Multi-Version Concurrency** **Control** (**MVCC**):'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多版本并发控制**（**MVCC**）：'
- en: Table partitioning
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表分区
- en: '`UNIQUE`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UNIQUE`'
- en: '`NOT NULL`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOT NULL`'
- en: '**Secure database**: It adheres to standard security protocols, which includes
    the following:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全数据库**：它遵循标准安全协议，包括以下内容：'
- en: Authentications such as **Lightweight Directory Access Protocol** (**LDAP**),
    SCRAM-SHA-256, and the **Security Support Provider** **Interface** (**SSPI**)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证，如**轻量级目录访问协议**（**LDAP**）、SCRAM-SHA-256和**安全支持提供程序**接口（**SSPI**）
- en: 'Supports column and row-level security*   **Highly extensible**: It offers
    several features, making it modifiable, such as the following:'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持列和行级安全*   **高度可扩展**：它提供了几个功能，使其可修改，如下所示：
- en: JSON/SQL path expressions
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON/SQL路径表达式
- en: Stored procedures and functions
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储过程和函数
- en: Compatibility with foreign data wrappers
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与外部数据包装器的兼容性
- en: Now that we have an overview of the features and use cases of PostgreSQL, let’s
    move on to installing it on our terminal.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了PostgreSQL的功能和用例，让我们继续在我们的终端上安装它。
- en: Installing PostgreSQL
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装PostgreSQL
- en: 'There are two ways for us to set up our PostgreSQL in our development terminal.
    The two approaches are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种方法可以在开发终端上设置我们的PostgreSQL。两种方法如下：
- en: '**Conventional method**: Download the installer directly from the PostgreSQL
    website.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传统方法**：直接从PostgreSQL网站下载安装程序。'
- en: '**PostgreSQL on a Docker container**: Connect our application directly to a
    container.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker容器上的PostgreSQL**：直接将我们的应用程序连接到容器。'
- en: The conventional method – installation on Windows, macOS, and Linux
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传统方法 – 在Windows、macOS和Linux上安装
- en: PostgreSQL was mainly developed for Unix-like platforms. However, it was created
    to be portable and can be installed on Windows and macOS platforms.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL主要是在类Unix平台上开发的。然而，它被设计成可移植的，可以在Windows和macOS平台上安装。
- en: 'The first step we need to take is to download the PostgreSQL installer through
    this URL: [https://www.enterprisedb.com/downloads/postgres-postgresql-downloads](https://www.enterprisedb.com/downloads/postgres-postgresql-downloads).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要采取的第一步是通过此URL下载PostgreSQL安装程序：[https://www.enterprisedb.com/downloads/postgres-postgresql-downloads](https://www.enterprisedb.com/downloads/postgres-postgresql-downloads)。
- en: '![Figure 4.1 – PostgreSQL installation](img/B18159_04_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – PostgreSQL安装](img/B18159_04_01.jpg)'
- en: Figure 4.1 – PostgreSQL installation
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – PostgreSQL安装
- en: 'The steps for the three operating systems are the same, and we only need to
    configure some settings:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 三个操作系统的步骤相同，我们只需要配置一些设置：
- en: Click the latest version (**14.1**) and download the installer, depending on
    your operating system.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最新版本（**14.1**）并下载安装程序，具体取决于您的操作系统。
- en: 'After a successful download, open the installer, click **Next**, and specify
    the path where PostgreSQL will be installed:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功下载后，打开安装程序，点击**下一步**，并指定PostgreSQL的安装路径：
- en: '![Figure 4.2 – The PostgreSQL installer (specify the path to install)](img/B18159_04_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – PostgreSQL安装程序（指定安装路径）](img/B18159_04_02.jpg)'
- en: Figure 4.2 – The PostgreSQL installer (specify the path to install)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – PostgreSQL安装程序（指定安装路径）
- en: 'In the preceding example, we have chosen the default installation path. Click
    **Next** again, which will ask us what components we want to install. The components
    that we select are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们选择了默认的安装路径。再次点击**下一步**，这将询问我们想要安装哪些组件。我们选择的组件如下：
- en: '**PostgreSQL Server**: Installs the server where our database will run'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL服务器**：安装我们的数据库将运行的服务器'
- en: '**pgAdmin 4**: A GUI management tool for interacting with the database'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pgAdmin 4**：一个用于与数据库交互的GUI管理工具'
- en: '**Stack Builder**: A GUI that allows us to download and install drivers that
    are compatible with PostgreSQL'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stack Builder**：一个GUI，允许我们下载和安装与PostgreSQL兼容的驱动程序'
- en: '**Command Line Tools**: Provides interaction with PostgreSQL using command-line
    tools:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行工具**：提供使用命令行工具与 PostgreSQL 交互：'
- en: '![Figure 4.3 – The PostgreSQL installer (select the needed components)](img/B18159_04_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – PostgreSQL 安装程序（选择所需组件）](img/B18159_04_03.jpg)'
- en: Figure 4.3 – The PostgreSQL installer (select the needed components)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – PostgreSQL 安装程序（选择所需组件）
- en: We have checked all the components in the preceding example, as we will need
    all of them throughout our development.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经检查了所有组件，因为我们将在整个开发过程中需要它们。
- en: 'Click **Next** again, and you will be asked to specify the directory to store
    the data:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击 **下一步**，您将被要求指定存储数据的目录：
- en: '![Figure 4.4 – The PostgreSQL installer (select the directory for the data)](img/B18159_04_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – PostgreSQL 安装程序（选择数据目录）](img/B18159_04_04.jpg)'
- en: Figure 4.4 – The PostgreSQL installer (select the directory for the data)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – PostgreSQL 安装程序（选择数据目录）
- en: In the preceding example, we can see that the default path is the same as where
    PostgreSQL is installed, and it has created a new folder named `data`. It is recommended
    that you use the default path.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到默认路径与 PostgreSQL 安装的位置相同，并且它已经创建了一个名为 `data` 的新文件夹。建议您使用默认路径。
- en: Click `postgres`).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `postgres`）。
- en: Click `postgres` database.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `postgres` 数据库。
- en: 'Click **Next** again, and you will now be asked what locale should be used
    for the database cluster:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击 **下一步**，现在您将被询问数据库集群应使用哪个区域设置：
- en: '![Figure 4.5 – The PostgreSQL installer (select a locale for the database cluster)](img/B18159_04_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – PostgreSQL 安装程序（选择数据库集群的区域设置）](img/B18159_04_05.jpg)'
- en: Figure 4.5 – The PostgreSQL installer (select a locale for the database cluster)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – PostgreSQL 安装程序（选择数据库集群的区域设置）
- en: In the preceding example, we have selected **[Default locale]** as our locale
    for the database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经选择了 **[默认区域设置]** 作为我们的数据库区域设置。
- en: Click **Next** again, which will display all of the settings we have configured;
    make sure all the details are correct before proceeding.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击 **下一步**，这将显示我们已配置的所有设置；在继续之前，请确保所有细节都是正确的。
- en: After reviewing, click **Next**, which will now install PostgreSQL in our terminal.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查后，点击 **下一步**，现在将在我们的终端中安装 PostgreSQL。
- en: After installation, we can verify whether PostgreSQL is installed successfully
    by checking the currently installed version.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以通过检查当前安装的版本来验证 PostgreSQL 是否已成功安装。
- en: To do this, open `Server`, `Port`, `Database`, `Username`, and `Password`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，请打开 `服务器`、`端口`、`数据库`、`用户名` 和 `密码`。
- en: 'Since we have used the default settings, we can press *Enter* until password
    confirmation. After successful validation of our password, execute the `select
    version()` command to display the currently installed PostgreSQL:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已经使用了默认设置，我们可以按 *Enter* 键直到密码确认。在成功验证我们的密码后，执行 `select version()` 命令以显示当前安装的
    PostgreSQL：
- en: '![Figure 4.6 – The PostgreSQL installer (displaying the version of PostgreSQL)](img/B18159_04_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – PostgreSQL 安装程序（显示 PostgreSQL 的版本）](img/B18159_04_06.jpg)'
- en: Figure 4.6 – The PostgreSQL installer (displaying the version of PostgreSQL)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – PostgreSQL 安装程序（显示 PostgreSQL 的版本）
- en: In the preceding example, we can see that we have successfully installed **PostgreSQL**
    version **13.4** on our terminal.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到我们已经成功在我们的终端上安装了 **PostgreSQL** 版本 **13.4**。
- en: Now, let’s learn how to install and configure PostgreSQL using Docker.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何使用 Docker 安装和配置 PostgreSQL。
- en: PostgreSQL on a Docker container
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 容器中的 PostgreSQL
- en: 'We have installed PostgreSQL on our terminal using the conventional installer;
    now, we will learn to configure PostgreSQL using Docker. This method will help
    us skip the complex steps in configuring PostgreSQL for us to start with development
    and provide a GUI for database management:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用传统安装程序在我们的终端上安装了 PostgreSQL；现在，我们将学习如何使用 Docker 配置 PostgreSQL。这种方法将帮助我们跳过配置
    PostgreSQL 的复杂步骤，以便我们从开发开始，并提供数据库管理的 GUI：
- en: 'The first step you need to do is install Docker on your terminal. You can install
    Docker at the following link: [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
    For documentation on the system requirements and installation steps for Docker,
    you can refer to this link: https://docs.dockerocker.com/desktop/windows/install/.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要做的第一步是在您的终端上安装 Docker。您可以在以下链接安装 Docker：[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)。有关
    Docker 的系统要求和安装步骤的文档，您可以参考此链接：https://docs.dockerocker.com/desktop/windows/install/。
- en: 'After successful installation of Docker, open Docker Desktop and start Docker
    on your Terminal. Then, open your command line and execute the following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功安装 Docker 后，打开 Docker Desktop 并在终端上启动 Docker。然后，打开您的命令行并执行以下命令：
- en: '[PRE0]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command will pull the PSQL from `Docker-hub`. The `postgresql-container`
    part in the command can be replaced, as this is a container name that we can define.
    The `POSTGRES_PASSWORD` parameter is the password for the `postgres` admin, which
    we can also configure.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将从 `Docker-hub` 拉取 PSQL。命令中的 `postgresql-container` 部分可以替换，因为这是一个我们可以定义的容器名称。`POSTGRES_PASSWORD`
    参数是 `postgres` 管理员的密码，我们也可以配置它。
- en: 'After executing the command, we can verify the newly created container by executing
    the `Docker ps -a` command or viewing Docker Desktop to check the list of containers
    running:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行命令后，我们可以通过执行 `Docker ps -a` 命令或查看 Docker Desktop 来验证新创建的容器，以检查正在运行的容器列表：
- en: '![Figure 4.7 – The PostgreSQL installation using Docker](img/B18159_04_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 使用 Docker 安装 PostgreSQL](img/B18159_04_07.jpg)'
- en: Figure 4.7 – The PostgreSQL installation using Docker
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 使用 Docker 安装 PostgreSQL
- en: 'In the preceding example, we have executed the `Docker ps -a` command, and
    we can see that our PostgreSQL image has been pulled:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已执行 `Docker ps -a` 命令，我们可以看到我们的 PostgreSQL 镜像已被拉取：
- en: '![Figure 4.8 – The PostgreSQL installation using Docker (viewing the container
    in Docker Desktop)](img/B18159_04_08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 使用 Docker 安装 PostgreSQL（在 Docker Desktop 中查看容器）](img/B18159_04_08.jpg)'
- en: Figure 4.8 – The PostgreSQL installation using Docker (viewing the container
    in Docker Desktop)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 使用 Docker 安装 PostgreSQL（在 Docker Desktop 中查看容器）
- en: We can also view the pulled `postgresql-container` in Docker Desktop and verify
    its status in our terminal.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在 Docker Desktop 中查看拉取的 `postgresql-container` 并在我们的终端中验证其状态。
- en: We have successfully configured our PostgreSQL with Docker. We can connect this
    to our `pgAdmin` by creating a new server with our terminal IP address and port.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用 Docker 配置了 PostgreSQL。我们可以通过创建一个新的服务器并使用我们的终端 IP 地址和端口来连接到我们的 `pgAdmin`。
- en: We have configured the PostgreSQL database in our terminal. Now, we will learn
    about Spring Data JPA and its importance in developing Spring applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在终端中配置了 PostgreSQL 数据库。现在，我们将了解 Spring Data JPA 及其在开发 Spring 应用程序中的重要性。
- en: Spring Data JPA
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: '**Spring Data JPA** (**Java Persistence API**) is a widely used specification
    for managing relational data in Java applications. It helps develop Spring, as
    it reduces boilerplate code by not implementing read and write operations. It
    also handles the complex process involved in JDBC-based accessing of database
    and object-relational mappings.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Data JPA**（**Java 持久层 API**）是广泛使用的规范，用于管理 Java 应用程序中的关系数据。它有助于开发 Spring，因为它通过不实现读写操作来减少样板代码。它还处理了基于
    JDBC 的数据库访问和对象关系映射的复杂过程。'
- en: Before discussing Spring Data JPA, let’s discuss its clear advantages and why
    it is commonly used in Spring development.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 Spring Data JPA 之前，让我们讨论其明显的优势以及为什么它通常在 Spring 开发中被广泛使用。
- en: The advantages of Spring Data JPA
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Data JPA 的优势
- en: 'The following are the advantages of Spring Data JPA:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 Spring Data JPA 的优势：
- en: '**No-code repositories**: Spring Data JPA promotes *no-code* repositories,
    which means that we don’t have to write the repository pattern, which creates
    a lot of repetitive code. It provides a set of interfaces that we can use to extend
    our classes to apply data-specific implementations.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无代码仓库**：Spring Data JPA 推崇 *无代码* 仓库，这意味着我们不需要编写仓库模式，这会生成大量重复的代码。它提供了一组接口，我们可以使用这些接口来扩展我们的类，以应用数据特定的实现。'
- en: 'For example, we have a `BlogRepository` class in our application; when we extend
    it with the `CrudRepository<Blog, Long>` interface, it will have methods that
    have the following functionalities:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的应用程序中有一个 `BlogRepository` 类；当我们用 `CrudRepository<Blog, Long>` 接口扩展它时，它将具有以下功能的方法：
- en: Persisting, updating, and deleting one or multiple blog entities
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化、更新和删除一个或多个博客实体
- en: Finding one or multiple blogs by their primary keys
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过主键查找一个或多个博客
- en: Counting all blogs
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算所有博客
- en: Validating whether a single blog exists
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证单个博客是否存在
- en: Extending the repository with the interface provided by Spring Data JPA includes
    all data-related methods, which allows us to focus more on business logic.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spring Data JPA 提供的接口扩展仓库包括所有数据相关的方法，这使我们能够更多地关注业务逻辑。
- en: '**Boilerplate reduction**: Spring Data JPA offers built-in implementations
    for methods. As stated in the first advantage, we only need to focus on business
    logic and no longer need to code read and write operations, as written under the
    interfaces. This also prevents human errors, as all implementations are already
    registered for us.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样板代码减少**: Spring Data JPA提供了内置的实现方法。正如第一项优点所述，我们只需要关注业务逻辑，不再需要编写接口下的读写操作，这也可以防止人为错误，因为所有实现都已经为我们注册。'
- en: '`findBy`, and Spring will parse the name and create a query:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findBy`，Spring将解析名称并创建一个查询：'
- en: '[PRE1]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we have created a `findByAuthor()` method, which will
    allow Spring to generate a query and set the parameters as bind parameter values.
    It will execute the query once we call the method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个`findByAuthor()`方法，这将允许Spring生成一个查询并将参数设置为绑定参数值。一旦我们调用该方法，它将执行查询。
- en: Repositories provided by Spring Data JPA
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Data JPA提供的仓库
- en: 'Spring Data JPA provides repositories that provide different methods for data-related
    implementations. The repositories are the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA提供了提供不同数据相关实现方法的仓库。以下是一些仓库：
- en: '`CrudRepository`: The interface repository, which provides the basic operations
    to **Create**, **Read**, **Update**, and **Delete** (**CRUD**).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CrudRepository`: 提供基本操作（创建、读取、更新、删除）的接口仓库。'
- en: '`PagingAndSortingRepository`: Extends `CrudRepostiory` and adds a method named
    `findAll`, which can sort results and be retrieved in a paginated manner.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PagingAndSortingRepository`: 扩展`CrudRepostiory`并添加一个名为`findAll`的方法，该方法可以排序结果并以分页方式检索。'
- en: '`JpaRepository`: Adds specific JPA methods and has all the functions of `CrudRepository`
    and `PagingAndSortingRepository`. It also adds methods such as `flush()`, which
    flushes the persistence context, and `deleteInBatch()`, which deletes records
    in a batch.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JpaRepository`: 添加特定的JPA方法，并具有`CrudRepository`和`PagingAndSortingRepository`的所有功能。它还添加了如`flush()`这样的方法，该方法刷新持久化上下文，以及`deleteInBatch()`，该方法可以批量删除记录。'
- en: We have learned about the different repositories we can use with Spring Data
    JPA. We will now take a look at Spring Data JPA on Spring Boot.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了我们可以与Spring Data JPA一起使用的不同仓库。现在我们将看看Spring Boot上的Spring Data JPA。
- en: Spring Data JPA on Spring Boot
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Boot上的Spring Data JPA
- en: 'For us to implement Spring Data JPA in our application, we need the following
    components:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中实现Spring Data JPA，我们需要以下组件：
- en: '`Entity`: This is a simple class that defines our model. It will be used as
    a JPA entity, generated with a primary key.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Entity`: 这是一个简单的类，用于定义我们的模型。它将被用作JPA实体，并带有主键生成。'
- en: 'For example, we will create an entity for `Villain` by making a plain class
    and adding `@Entity` annotations to indicate the `Villain` class as a JPA entity.
    The entity will be used as the type for extending our repository:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将通过创建一个普通的类并添加`@Entity`注解来创建一个`Villain`实体，以表示`Villain`类是一个JPA实体。该实体将被用作扩展我们的仓库的类型：
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see in the preceding example that our `Villain` class is annotated with
    `@Entity`, indicating it as a JPA entity. We have also defined an `id` field of
    the `UUID` type and annotated it with `@Id` to indicate that this is the primary
    key, and `@GeneratedValue`, where we specified that this is automatically generated
    using `strategy = GenerationType`.The `AUTO` and the ID generated should be of
    the `UUID` type, using `generator = "``UUID"`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的示例中看到，我们的`Villain`类被注解为`@Entity`，表示它是一个JPA实体。我们还定义了一个`UUID`类型的`id`字段，并用`@Id`注解标注，表示这是主键，以及`@GeneratedValue`，其中我们指定这是使用`strategy
    = GenerationType`自动生成的。`AUTO`和生成的ID应该是`UUID`类型，使用`generator = "UUID"`。
- en: '`Repository`: This is an interface that we need to extend with JPA repositories
    for the entities to have built-in operations.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Repository`: 这是一个接口，我们需要用它来扩展JPA仓库，以便实体具有内置操作。'
- en: 'In the previous example, we have a `Villain` entity. To implement the CRUD
    operations, we will create a `VillainRepository` interface and extend it with
    `CrudRepository`, with a type of `Villain` and `UUID`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们有一个`Villain`实体。为了实现CRUD操作，我们将创建一个`VillainRepository`接口，并使用`CrudRepository`扩展它，类型为`Villain`和`UUID`：
- en: '[PRE5]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Service`: This is where we will use our created repository. We can use the
    `@Autowired` annotation to inject the repository and call the JPA and custom-defined
    methods:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`服务`: 这是我们将使用我们创建的仓库的地方。我们可以使用`@Autowired`注解注入仓库并调用JPA和自定义方法：'
- en: '[PRE6]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, we can see that we have injected `VillainRepository`
    in `VillainService` using the `@``Autowired` annotation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到我们使用`@Autowired`注解在`VillainService`中注入了`VillainRepository`。
- en: 'Let’s continue with the following methods using the same file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用相同的文件进行以下方法的操作：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We have also created methods by using the built-in JPA implementation, such
    as `save()`, `deleteById()`, `findAll()`, and `findById()`, which are found in
    the `CrudRepository` interface. The service can now be injected into our controllers
    or other services to use the methods.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过使用内置的JPA实现创建了方法，例如`save()`、`deleteById()`、`findAll()`和`findById()`，这些方法可以在`CrudRepository`接口中找到。现在，服务可以被注入到我们的控制器或其他服务中以使用这些方法。
- en: We’ve now learned about Spring Data JPA, its advantages, and an overview of
    implementation on Spring JPA. In the next section, we will learn how to add Spring
    Data JPA and PostgreSQL dependencies to our Spring Boot application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了Spring Data JPA、其优势以及Spring JPA上的实现概述。在下一节中，我们将学习如何将Spring Data JPA和PostgreSQL依赖项添加到我们的Spring
    Boot应用程序中。
- en: Adding Spring Data JPA and PostgreSQL dependencies
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Spring Data JPA和PostgreSQL依赖项
- en: This section will add Spring Data JPA, PostgreSQL, and other valuable dependencies
    to our application. We will add the dependencies with Spring Initializr and an
    existing Spring Boot project.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向我们的应用程序添加Spring Data JPA、PostgreSQL和其他有价值的依赖项。我们将使用Spring Initializr和一个现有的Spring
    Boot项目添加这些依赖项。
- en: Adding with Spring Initializr
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring Initializr添加
- en: 'Adding dependencies after creating a Spring Boot application using Spring Initializr
    is simple. We only need to select the dependencies on Initializr before generating
    our project:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Initializr创建Spring Boot应用程序后添加依赖项很简单。我们只需要在生成项目之前在Initializr上选择依赖项：
- en: The first thing to do is to go to [https://start.spring.io/](https://start.spring.io/)
    or to your IntelliJ IDEA (for Ultimate users) to open Spring Initializr (for a
    recap of the *Using Spring Initializr* section, refer to [*Chapter 3*](B18159_03.xhtml#_idTextAnchor058),
    *Moving into* *Spring Boot*).
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首件事是访问[https://start.spring.io/](https://start.spring.io/)或您的IntelliJ IDEA（对于Ultimate用户）以打开Spring
    Initializr（关于*使用Spring Initializr*部分的回顾，请参阅[*第3章*](B18159_03.xhtml#_idTextAnchor058)，*进入*
    *Spring Boot*）。
- en: Choose your project if it will use Maven or Gradle and set the required configurations,
    which are **Group**, **Artifact, Name**, **Description**, **Package name**, **Packaging**,
    and the **Java** version of the project.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的项目是否将使用Maven或Gradle，并设置所需的配置，包括**组**、**工件**、**名称**、**描述**、**包名**、**打包方式**和项目的**Java**版本。
- en: 'Next, click **Add Dependencies** at the top right and select the following
    dependencies:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击右上角的**添加依赖**并选择以下依赖项：
- en: '**Spring Data JPA**: This dependency is for adding Spring Data JPA used for
    built-in data store-related implementation.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data JPA**：这个依赖项用于添加用于内置数据存储相关实现的Spring Data JPA。'
- en: '**H2 Database**: This is an in-memory database that supports the JDBC API and
    R2DBC access, which is commonly used for unit testing'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**H2数据库**：这是一个支持JDBC API和R2DBC访问的内存数据库，通常用于单元测试'
- en: '**PostgreSQL Driver**: This is a JDBC and R2DBC driver that will allow the
    connection of Java applications to the PostgreSQL database:'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL驱动程序**：这是一个JDBC和R2DBC驱动程序，它将允许Java应用程序连接到PostgreSQL数据库：'
- en: '![Figure 4.9 – Adding dependencies in Spring Initializr](img/B18159_04_09.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – 在Spring Initializr中添加依赖项](img/B18159_04_09.jpg)'
- en: Figure 4.9 – Adding dependencies in Spring Initializr
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – 在Spring Initializr中添加依赖项
- en: After successfully adding the dependencies, we can see that our dependencies
    are already listed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功添加依赖项后，我们可以看到我们的依赖项已经列出。
- en: Click on **GENERATE**, which will download our already generated project.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成**，这将下载我们已生成的项目。
- en: 'Extract the ZIP file and open the project on your IDE. If you developed your
    project using Maven, open `pom.xml` in the `src` folder, or if you are using`build.gradle`,
    which is also found in the `src` folder:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压ZIP文件并在您的IDE中打开项目。如果您使用Maven开发项目，请在`src`文件夹中打开`pom.xml`文件，或者如果您使用的是`build.gradle`，它也位于`src`文件夹中：
- en: "![Figure \uFEFF4.10 – The Spring Boot application (a view of pom.xml)](img/B18159_04_10.jpg)"
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10 – Spring Boot应用程序（pom.xml的视图）](img/B18159_04_10.jpg)'
- en: Figure 4.10 – The Spring Boot application (a view of pom.xml)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – Spring Boot应用程序（pom.xml的视图）
- en: 'In the preceding example, we can see that the Spring Boot application is generated
    with Maven, and we can see that our `pom.xml` file has included the dependencies
    we added in Spring Initializr:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到Spring Boot应用程序是用Maven生成的，我们可以看到我们的`pom.xml`文件已经包含了我们在Spring Initializr中添加的依赖项：
- en: "![Figure \uFEFF4.11 – The Spring Boot application (a view of build.gradle)](img/B18159_04_11.jpg)"
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11 – Spring Boot应用程序（build.gradle的视图）](img/B18159_04_11.jpg)'
- en: Figure 4.11 – The Spring Boot application (a view of build.gradle)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – Spring Boot应用程序（build.gradle的视图）
- en: Now, in the preceding example, where the Spring Boot application is generated
    with Gradle, we can see the list of dependencies is already added under the `build.gradle`
    file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前面的示例中，Spring Boot应用程序是用Gradle生成的，我们可以看到依赖项列表已经添加到`build.gradle`文件下。
- en: We will now add the dependencies to an existing Spring Boot application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将向现有Spring Boot应用程序添加依赖项。
- en: Adding an existing project
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加现有项目
- en: In the previous example, we added the dependencies to generate our Spring Boot
    application using Spring Initializr. Now, we will add our dependencies to an existing
    application. It is simple to add a dependency to an existing Spring app; we only
    need to modify the `pom.xml` (Maven) or `build.gradle` (Gradle) files.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们添加了依赖项以使用Spring Initializr生成我们的Spring Boot应用程序。现在，我们将向现有应用程序添加依赖项。向现有Spring应用程序添加依赖项很简单；我们只需要修改`pom.xml`（Maven）或`build.gradle`（Gradle）文件。
- en: 'To install Spring Data JPA, the H2 database, and PostgreSQL Driver using Maven,
    we will add the dependencies in the form of XML, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Maven安装Spring Data JPA、H2数据库和PostgreSQL驱动程序，我们将以XML形式添加依赖项，如下所示：
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And for a Spring application using Gradle, we will add the dependencies as
    follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Gradle的Spring应用程序，我们将按以下方式添加依赖项：
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: IntelliJ will automatically recognize the added dependencies and install them
    for the project, and we can successfully build and run the Spring Boot application
    on the fly.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ将自动识别添加的依赖项并为项目安装它们，我们可以成功构建并即时运行Spring Boot应用程序。
- en: We have learned how to add Spring Data JPA and PostgreSQL Driver to our Spring
    Boot application. In the next section, we will learn how to connect our Spring
    Boot application to our PostgreSQL database.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何将Spring Data JPA和PostgreSQL驱动程序添加到我们的Spring Boot应用程序中。在下一节中，我们将学习如何将我们的Spring
    Boot应用程序连接到我们的PostgreSQL数据库。
- en: Connecting to a database
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: We have already configured our PostgreSQL database and initialized our Spring
    Boot application with the needed dependencies. Now, we will learn how to connect
    our PostgreSQL to our application. There are two ways we can connect to our database
    – the first is through Spring JDBC, and the other is Spring Data JPA. Spring Data
    JPA is the most convenient way to connect to our database, but we will demonstrate
    both methods in this section.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了我们的PostgreSQL数据库，并使用所需的依赖项初始化了Spring Boot应用程序。现在，我们将学习如何将我们的PostgreSQL连接到我们的应用程序。我们可以通过两种方式连接到我们的数据库
    – 第一种是使用Spring JDBC，另一种是Spring Data JPA。Spring Data JPA是连接到我们的数据库最方便的方式，但我们将在本节中演示这两种方法。
- en: Configuring the database properties
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置数据库属性
- en: 'The first thing we need to do is configure the database properties in our Spring
    Boot application. We need to specify the server URL of the database, the admin
    username, and the password by adding the following source code to the `application.properties`
    file:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是在我们的Spring Boot应用程序中配置数据库属性。我们需要通过在`application.properties`文件中添加以下源代码来指定数据库的服务器URL、管理员用户名和密码：
- en: '[PRE22]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example, we can see that we have configured the basic connection
    settings for our PostgreSQL. `springDB` on the URL will be the name of the database
    in PostgreSQL, which should already exist on our server.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到我们已经为我们的PostgreSQL配置了基本的连接设置。URL上的`springDB`将是PostgreSQL中数据库的名称，它应该已经存在于我们的服务器上。
- en: Connecting using Spring JDBC
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring JDBC进行连接
- en: The first method to connect to the database is by using Spring JDBC. We will
    add an additional dependency to our application for us to use this method.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到数据库的第一种方法是使用Spring JDBC。我们将为我们的应用程序添加一个额外的依赖项以使用此方法。
- en: 'To add JDBC, we will add the following code to our `pom.xml` (Maven) or `build.gradle`
    (Gradle) files:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加JDBC，我们将以下代码添加到我们的`pom.xml`（Maven）或`build.gradle`（Gradle）文件中：
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After successfully adding the JDBC dependency, we can now use `JdbcTemplate`
    to execute queries on our application:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功添加JDBC依赖项后，我们现在可以使用`JdbcTemplate`在我们的应用程序中执行查询：
- en: '[PRE24]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding example, we can execute database statements such as `INSERT`
    in our application and call the `update()` method to modify data in the database.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以在我们的应用程序中执行数据库语句，如`INSERT`，并调用`update()`方法来修改数据库中的数据。
- en: Connecting using Spring Data JPA
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring Data JPA进行连接
- en: 'The second method is by using the Spring Data JPA plugin. The first step we
    need to take is to add additional details to the `application.properties` file:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用Spring Data JPA插件。我们需要采取的第一步是向`application.properties`文件添加额外的详细信息：
- en: '[PRE25]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After adding the new settings, we can now create `Entity` and `Repository`
    for a specific table in our application – for example, we have a `Blog` table:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了新的设置之后，我们现在可以在我们的应用程序中为特定的表创建`Entity`和`Repository` – 例如，我们有一个`Blog`表：
- en: '[PRE26]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding example, we have created a `Blog` class and annotated it with
    `@Entity` and `@Table` to indicate that this is an object connected to our database
    table:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个`Blog`类，并用`@Entity`和`@Table`注解来表示这是一个与我们的数据库表相连的对象：
- en: '[PRE27]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After creating our entity, we have made the repository for the blog, which can
    be extended by the repositories provided by JPA. `BlogRepository` can now be injected
    into our services or controllers to read, add, modify, or delete data on our database.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的实体之后，我们为博客创建了存储库，该存储库可以由JPA提供的存储库扩展。现在，`BlogRepository`可以被注入到我们的服务或控制器中，以读取、添加、修改或删除数据库中的数据。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That brings you to the end of this chapter. Let’s have a recap of the valuable
    things you have learned. You learned how to set up PostgreSQL on your local machine
    using the installer or Docker container.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了本章的内容。让我们回顾一下你学到的宝贵知识。你学习了如何使用安装程序或Docker容器在你的本地机器上设置PostgreSQL。
- en: You have also learned about the concepts and advantages of Spring Data JPA in
    Spring Boot and how to add it to your application, which is helpful in creating
    services with CRUD capabilities with less boilerplate code.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你还了解了Spring Boot中Spring Data JPA的概念和优势，以及如何将其添加到你的应用程序中，这对于创建具有CRUD功能的服务的代码量较少非常有帮助。
- en: Last but not least, you learned how to connect your Spring Boot application
    with the PostgreSQL database using JDBC and Spring Data JPA.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，你学习了如何使用JDBC和Spring Data JPA将你的Spring Boot应用程序与PostgreSQL数据库连接起来。
- en: In the next chapter, we will be learning how to start our server, how to add
    controllers, models, and services in our code, and about Redis for caching.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何启动我们的服务器，如何在代码中添加控制器、模型和服务，以及关于Redis缓存的介绍。
