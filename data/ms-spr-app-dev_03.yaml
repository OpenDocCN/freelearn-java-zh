- en: Chapter 3. Mailing with Spring Mail
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用Spring邮件发送邮件
- en: A mailing API is a part of all modern web applications. End users prefer to
    be intimated by mail on details of the transactions performed with the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件API是所有现代Web应用的一部分。最终用户更喜欢通过邮件收到有关与应用程序执行的交易的详细信息。
- en: Spring has made it easier to provide mailing abilities to any Java application.
    In this chapter, we shall see how we can use the Spring mail template to e-mail
    recipients. In the previous chapter, we used messaging as the middleware to store
    messages in the queue, and now in this chapter, we shall demonstrate using Spring
    mailing template configurations using different scenarios.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Spring已经让为任何Java应用程序提供邮件功能变得更加容易。在本章中，我们将看到如何使用Spring邮件模板向电子邮件接收者发送电子邮件。在上一章中，我们使用消息作为中间件将消息存储在队列中，现在在本章中，我们将演示使用不同场景下的Spring邮件模板配置。
- en: Spring mail message handling process
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring邮件消息处理流程
- en: The following diagram depicts the flow of a Spring mail message process. With
    this, we can clearly understand the process of sending mail using a Spring mailing
    template.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了Spring邮件消息处理的流程。通过这个图表，我们可以清楚地了解使用Spring邮件模板发送邮件的过程。
- en: A message is created and sent to the transport protocol, which interacts with
    internet protocols. Then, the message is received by the recipients.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并发送消息到与互联网协议交互的传输协议，然后消息被接收者接收。
- en: '![Spring mail message handling process](img/7320OS_03_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Spring邮件消息处理流程](img/7320OS_03_01.jpg)'
- en: The Spring mail framework requires a mail configuration, or SMTP configuration,
    as the input and message that needs to be sent. The mail API interacts with internet
    protocols to send messages. In the next section, we shall look at the classes
    and interfaces in the Spring mail framework.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Spring邮件框架需要邮件配置或SMTP配置作为输入，以及需要发送的消息。邮件API与互联网协议交互以发送消息。在下一节中，我们将看一下Spring邮件框架中的类和接口。
- en: Interfaces and classes used for sending mails with Spring
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring发送邮件的接口和类
- en: The package `org.springframework.mail` is used for mail configuration in the
    spring application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.mail`包用于Spring应用程序中的邮件配置。'
- en: '![Interfaces and classes used for sending mails with Spring](img/7320OS_03_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用Spring发送邮件的接口和类](img/7320OS_03_02.jpg)'
- en: 'The following are the three main interfaces that are used for sending mail:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于发送邮件的三个主要接口：
- en: '`MailSender`: This interface is used to send simple mail messages.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MailSender`：这个接口用于发送简单的邮件消息。'
- en: '`JavaMailSender`: This interface is a subinterface of the `MailSender` interface
    and supports sending mail messages.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JavaMailSender`：这个接口是`MailSender`接口的子接口，支持发送邮件消息。'
- en: '`MimeMessagePreparator`: This interface is a callback interface that supports
    the `JavaMailSender` interface in the preparation of mail messages.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MimeMessagePreparator`：这个接口是一个回调接口，支持`JavaMailSender`接口准备邮件消息。'
- en: 'The following classes are used for sending mails using Spring:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类用于使用Spring发送邮件：
- en: '`SimpleMailMessage`: This is a class which has properties such as `to`, `from`,
    `cc`, `bcc`, `sentDate`, and many others. The `SimpleMailMessage` interface sends
    mail with `MailSenderImp` classes.![Interfaces and classes used for sending mails
    with Spring](img/7320OS_03_03.jpg)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SimpleMailMessage`：这是一个类，具有`to`、`from`、`cc`、`bcc`、`sentDate`等属性。`SimpleMailMessage`接口使用`MailSenderImp`类发送邮件。![使用Spring发送邮件的接口和类](img/7320OS_03_03.jpg)'
- en: '`JavaMailSenderImpl`: This class is an implementation class of the `JavaMailSender`
    interface.![Interfaces and classes used for sending mails with Spring](img/7320OS_03_04.jpg)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JavaMailSenderImpl`：这个类是`JavaMailSender`接口的实现类。![使用Spring发送邮件的接口和类](img/7320OS_03_04.jpg)'
- en: '`MimeMessageHelper`: This class helps with preparing MIME messages.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MimeMessageHelper`：这个类帮助准备MIME消息。'
- en: Sending mail using the @Configuration annotation
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用@Configuration注解发送邮件
- en: We shall demonstrate here how we can send mail using the Spring mail API.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里演示如何使用Spring邮件API发送邮件。
- en: First, we provide all the SMTP details in the `.properties` file and read it
    to the class file with the `@Configuration` annotation. The name of the class
    is `MailConfiguration`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在`.properties`文件中提供所有SMTP详细信息，并使用`@Configuration`注解将其读取到类文件中。类的名称是`MailConfiguration`。
- en: '`mail.properties` file contents are shown below:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`mail.properties`文件内容如下：'
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next step is to create a rest controller to send mail; to do so, click on
    **Submit**. We shall use the `SimpleMailMessage` interface since we don't have
    any attachment.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个REST控制器来发送邮件；为此，请单击**提交**。我们将使用`SimpleMailMessage`接口，因为我们没有任何附件。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Sending mail using MailSender and SimpleMailMessage with the XML configuration
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MailSender和SimpleMailMessage以及XML配置发送邮件
- en: '"Simple mail message" means the e-mail sent will only be text-based with no
    HTML formatting, no images, and no attachments. In this section, consider a scenario
    where we are sending a welcome mail to the user as soon as the user gets their
    order placed in the application. In this scenario, the mail will be sent after
    the database insertion operation is successful.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “简单邮件消息”意味着发送的电子邮件只是基于文本，没有HTML格式，没有图像，也没有附件。在本节中，考虑一个场景，即在用户在应用程序中下订单后，我们会向用户发送欢迎邮件。在这种情况下，邮件将在数据库插入操作成功后发送。
- en: Create a separate folder, called `com.packt.mailService`, for the mail service.
    The following are the steps for sending mail using the `MailSender` interface
    and `SimpleMailMessage` class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为邮件服务创建一个名为`com.packt.mailService`的单独文件夹。以下是使用`MailSender`接口和`SimpleMailMessage`类发送邮件的步骤。
- en: Create a new Maven web project with the name `Spring4MongoDB_MailChapter3`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Spring4MongoDB_MailChapter3`的新Maven Web项目。
- en: The example used the MongoDB database created in [Chapter 1](ch01.html "Chapter 1. Spring
    Mongo Integration"), *Spring Mongo Integration*. We have also used the same Eshop
    db database with MongoDB for CRUD operations on `Customer`, `Order`, and `Product`.
    We have also used the same `mvc` configurations and source files.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本例中使用了[第1章](ch01.html "第1章。Spring Mongo Integration")中创建的MongoDB数据库，*Spring
    Mongo Integration*。我们还在MongoDB的Eshop db数据库上使用了相同的CRUD操作`Customer`、`Order`和`Product`。我们还使用了相同的`mvc`配置和源文件。
- en: Use the same dependencies as used in [Chapter 2](ch02.html "Chapter 2. Messaging
    with Spring JMS"), *Messaging with Spring JMS*.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与[第2章](ch02.html "第2章。Spring JMS消息")中使用的相同的依赖项，*Spring JMS消息*。
- en: 'We need to add dependencies to the `pom.xml` file:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`pom.xml`文件中添加依赖项：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Compile the Maven project. Create a separate folder called `com.packt.mailService`
    for the mail service.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译Maven项目。为邮件服务创建一个名为`com.packt.mailService`的单独文件夹。
- en: 'Create a simple class named `MailSenderService` and autowire the `MailSender`
    and `SimpleMailMessage` classes. The basic skeleton is shown here:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MailSenderService`的简单类，并自动装配`MailSender`和`SimpleMailMessage`类。基本框架如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, create an object of `SimpleMailMessage` and set mail properties, such
    as `from`, `to`, and `subject` to it.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`SimpleMailMessage`对象，并设置邮件属性，如`from`、`to`和`subject`。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We need to configure the SMTP details. Spring Mail Support provides this flexibility
    of configuring SMTP details in the XML file.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要配置SMTP详细信息。Spring邮件支持提供了在XML文件中配置SMTP详细信息的灵活性。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We need to send mail to the customer after the order has been placed successfully
    in the MongoDB database. Update the `addorder()` method as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在订单成功在MongoDB数据库中放置后，我们需要向客户发送邮件。更新`addorder()`方法如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Sending mails to multiple recipients
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向多个收件人发送邮件
- en: If you want to intimate the user regarding the latest products or promotions
    in the application, you can create a mail sending group and send mail to multiple
    recipients using Spring mail sending support.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想通知用户应用程序中的最新产品或促销活动，可以创建一个邮件发送组，并使用Spring邮件发送支持向多个收件人发送邮件。
- en: 'We have created an overloaded method in the same class, `MailSenderService`,
    which will accept string arrays. The code snippet in the class will look like
    this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在同一个类`MailSenderService`中创建了一个重载方法，它将接受字符串数组。类中的代码片段将如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the code snippet for listing the set of users from MongoDB
    who have subscribed to promotional e-mails:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从MongoDB中列出已订阅促销邮件的用户集合的代码片段：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Sending MIME messages
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送MIME消息
- en: '**Multipurpose Internet Mail Extension** (**MIME**) allows attachments to be
    sent over the Internet. This class just demonstrates how we can send mail with
    MIME messages. Using a MIME message sender type class is not advisable if you
    are not sending any attachments with the mail message. In the next section, we
    will look at the details of how we can send mail with attachments.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**多用途互联网邮件扩展**（**MIME**）允许在互联网上发送附件。如果您不发送任何附件，使用MIME消息发送器类型类是不可取的。在下一节中，我们将详细了解如何发送带附件的邮件。'
- en: Update the `MailSenderService` class with another method. We have used the MIME
    message preparator and have overridden the prepare `method()` to set properties
    for the mail.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MIME消息准备程序并重写准备`method()`以设置邮件属性来更新`MailSenderService`类。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Sending attachments with mails
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送邮件附件
- en: We can also attach various kinds of files to the mail. This functionality is
    supported by the `MimeMessageHelper` class. If you just want to send a MIME message
    without an attachment, you can opt for `MimeMesagePreparator`. If the requirement
    is to have an attachment to be sent with the mail, we can go for the `MimeMessageHelper`
    class with file APIs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在邮件中附加各种类型的文件。这个功能由`MimeMessageHelper`类支持。如果您只想发送一个没有附件的MIME消息，可以选择`MimeMesagePreparator`。如果要求附件与邮件一起发送，我们可以选择带有文件API的`MimeMessageHelper`类。
- en: Spring provides a file class named `org.springframework.core.io.FileSystemResource`,
    which has a parameterized constructor that accepts file objects.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一个名为`org.springframework.core.io.FileSystemResource`的文件类，它具有一个接受文件对象的参数化构造函数。
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sending preconfigured mails
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送预配置的邮件
- en: In this example, we shall provide a message that is to be sent in the mail,
    and we will configure it in an XML file. Sometimes when it comes to web applications,
    you may have to send messages on maintenance. Think of a scenario where the content
    of the mail changes, but the sender and receiver are preconfigured. In such a
    case, you can add another overloaded method to the `MailSender` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将提供一条要发送的邮件，并在XML文件中进行配置。有时在Web应用程序中，您可能需要在维护时发送消息。想象一下邮件内容发生变化，但发件人和收件人是预先配置的情况。在这种情况下，您可以向`MailSender`类添加另一个重载方法。
- en: We have fixed the subject of the mail, and the content can be sent by the user.
    Think of it as "an application which sends mails to users whenever the build fails".
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经固定了邮件的主题，内容可以由用户发送。可以将其视为“一个应用程序，每当构建失败时向用户发送邮件”。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we shall sent two different bodies for the subjects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为主题发送两个不同的正文。
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using Spring templates with Velocity to send HTML mails
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring模板和Velocity发送HTML邮件
- en: Velocity is the templating language provided by Apache. It can be integrated
    into the Spring view layer easily. The latest Velocity version used during this
    book is 1.7\. In the previous section, we demonstrated using Velocity to send
    e-mails using the `@Bean` and `@Configuration` annotations. In this section, we
    shall see how we can configure Velocity to send mails using XML configuration.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Velocity是Apache提供的模板语言。它可以很容易地集成到Spring视图层中。本书中使用的最新Velocity版本是1.7。在前一节中，我们演示了如何使用`@Bean`和`@Configuration`注解来使用Velocity发送电子邮件。在本节中，我们将看到如何配置Velocity以使用XML配置发送邮件。
- en: All that needs to be done is to add the following bean definition to the `.xml`
    file. In the case of `mvc`, you can add it to the `dispatcher-servlet.xml` file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 需要做的就是将以下bean定义添加到`.xml`文件中。在`mvc`的情况下，可以将其添加到`dispatcher-servlet.xml`文件中。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new Maven web project with the name `Spring4MongoDB_Mail_VelocityChapter3`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Spring4MongoDB_Mail_VelocityChapter3`的新的Maven web项目。
- en: Create a package and name it `com.packt.velocity.templates`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`com.packt.velocity.templates`的包。
- en: Create a file with the name `orderconfirmation.vm`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`orderconfirmation.vm`的文件。
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use all the dependencies that we have added in the previous sections.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在前几节中添加的所有依赖项。
- en: 'To the existing Maven project, add this dependency:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向现有的Maven项目中添加此依赖项：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To ensure that Velocity gets loaded on application startup, we shall create
    a class. Let's name the class `VelocityConfiguration.java`. We have used the annotations
    `@Configuration` and `@Bean` with the class.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保Velocity在应用程序启动时被加载，我们将创建一个类。让我们把这个类命名为`VelocityConfiguration.java`。我们已经在这个类中使用了注解`@Configuration`和`@Bean`。
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Use the same `MailSenderService` class and add another overloaded `sendMail()`
    method in the class.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的`MailSenderService`类，并在类中添加另一个重载的`sendMail()`方法。
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Update the controller class to send mail using the Velocity template.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新控制器类以使用Velocity模板发送邮件。
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sending Spring mails over a different thread
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过不同的线程发送Spring邮件
- en: There are other options for sending Spring mail asynchronously. One way is to
    have a separate thread to the mail sending job. Spring comes with the `taskExecutor`
    package, which offers us a thread pooling functionality.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他异步发送Spring邮件的选项。一种方法是为邮件发送工作创建一个单独的线程。Spring带有`taskExecutor`包，它为我们提供了线程池功能。
- en: Create a class called `MailSenderAsyncService` that implements the `MailSender`
    interface.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MailSenderAsyncService`的类，该类实现`MailSender`接口。
- en: Import the `org.springframework.core.task.TaskExecutor` package.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`org.springframework.core.task.TaskExecutor`包。
- en: 'Create a private class called `MailRunnable`. Here is the complete code for
    `MailSenderAsyncService`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MailRunnable`的私有类。以下是`MailSenderAsyncService`的完整代码：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Configure the `ThreadPool` executor in the `.xml` file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.xml`文件中配置`ThreadPool`执行器。
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Test the source code.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试源代码。
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Sending Spring mails with AOP
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AOP发送Spring邮件
- en: 'We can also send mails by integrating the mailing functionality with **Aspect
    Oriented Programming** (**AOP**). This can be used to send mails after the user
    registers with an application. Think of a scenario where the user receives an
    activation mail after registration. This can also be used to send information
    about an order placed on an application. Use the following steps to create a `MailAdvice`
    class using AOP:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将邮件功能与**面向切面编程**（**AOP**）集成来发送邮件。这可以用于在用户注册应用程序后发送邮件。想象一下用户在注册后收到激活邮件的情景。这也可以用于发送关于应用程序上下订单的信息。使用以下步骤使用AOP创建一个`MailAdvice`类：
- en: Create a package called `com.packt.aop`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`com.packt.aop`的包。
- en: Create a class called `MailAdvice`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MailAdvice`的类。
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This class creates a new thread and starts it. In the `run` method, the `proceedingJoinPoint.proceed()`
    method is called. `ProceddingJoinPoint` is a class available in `AspectJ.jar`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类创建一个新的线程并启动它。在`run`方法中，调用了`proceedingJoinPoint.proceed()`方法。`ProceddingJoinPoint`是`AspectJ.jar`中可用的一个类。
- en: 'Update the `dispatcher-servlet.xml` file with `aop` configurations. Update
    the `xlmns` namespace using the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`aop`配置更新`dispatcher-servlet.xml`文件。使用以下代码更新`xlmns`命名空间：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Also update the `xsi:schemalocation`, as shown in the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要更新`xsi:schemalocation`，如下所示：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Update the bean configuration in the `.xml` file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`.xml`文件中的bean配置：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we demonstrated how to create a mailing service and configure
    it using Spring API. We also demonstrated how to send mails with attachments using
    MIME messages. We also demonstrated how to create a dedicated thread for sending
    mails using `ExecutorService`. We saw an example in which mail can be sent to
    multiple recipients, and saw an implementation of using the Velocity engine to
    create templates and send mails to recipients. In the last section, we demonstrated
    how the Spring framework supported mails can be sent using Spring AOP and threads.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们演示了如何使用Spring API创建邮件服务并进行配置。我们还演示了如何使用MIME消息发送带附件的邮件。我们还演示了如何使用`ExecutorService`为发送邮件创建一个专用线程。我们看到了一个示例，可以将邮件发送给多个收件人，并看到了使用Velocity引擎创建模板并将邮件发送给收件人的实现。在最后一节中，我们演示了Spring框架支持如何使用Spring
    AOP和线程发送邮件。
- en: In the next chapter, we will look at Spring Batch framework.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Spring Batch框架。
