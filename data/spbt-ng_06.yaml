- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Documenting APIs with the OpenAPI Specification
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenAPI 规范记录 API
- en: In the previous chapter, we learned how to develop our Spring Boot application.
    First, we configured our application to run on the server using IntelliJ. Then,
    we developed the different parts of the REST application, such as the models and
    entities, which serve as the objects; the services, which hold the business logic
    and call the JPA repository to perform CRUD operations in the database; and the
    controllers, which define the endpoints. We also learned how to apply Redis, which
    adds a caching mechanism to improve the performance of our REST APIs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何开发我们的 Spring Boot 应用程序。首先，我们使用 IntelliJ 配置了应用程序在服务器上运行。然后，我们开发了
    REST 应用程序的不同部分，例如模型和实体，它们作为对象；服务，它们包含业务逻辑并调用 JPA 仓库在数据库中执行 CRUD 操作；以及控制器，它们定义了端点。我们还学习了如何应用
    Redis，它为我们的 REST API 添加了缓存机制以改善性能。
- en: This chapter will focus on creating the documentation for our Spring Boot project.
    We will focus on configuring `springdoc-openapi` and Swagger UI and generating
    documentation on the fly for the endpoints that we have developed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将专注于创建我们的 Spring Boot 项目的文档。我们将专注于配置 `springdoc-openapi` 和 Swagger UI，并为我们开发的端点实时生成文档。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up `springdoc-openapi`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `springdoc-openapi`
- en: Setting up Swagger UI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Swagger UI
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-06/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-06/superheroes).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接将带您进入本章的完成版本：[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-06/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-06/superheroes)。
- en: Setting up springdoc-openapi
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 springdoc-openapi
- en: In this section, we will configure `springdoc-openapi` in our Spring Boot application.
    Since we developed our REST APIs in the previous chapter, the next thing we need
    to do is create documentation for our endpoints. This is an essential part, especially
    in the development industry, as this will tell the developers what endpoints can
    be implemented, what the required requests and their formats are, and what response
    body to expect when calling the endpoint. This also reduces errors and conflicts
    regarding the API integration as the available endpoints are transparent. However,
    the major drawback of creating documentation manually is that it is tedious and
    error-prone. This is where `springdoc-openapi` comes into the picture.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置我们的 Spring Boot 应用程序中的 `springdoc-openapi`。由于我们在上一章中开发了 REST API，接下来我们需要做的是为我们的端点创建文档。这是一个至关重要的部分，尤其是在开发行业中，因为它将告诉开发者可以实现哪些端点，所需的请求及其格式，以及调用端点时预期的响应体。这也减少了关于
    API 集成的错误和冲突，因为可用的端点是透明的。然而，手动创建文档的主要缺点是它既繁琐又容易出错。这就是 `springdoc-openapi` 发挥作用的地方。
- en: First, let’s discuss what `springdoc-openapi` is. `springdoc-openapi` is a library
    that automates the generation of API documentation in Spring Boot projects. This
    automation is possible as the library uses annotations, class structures, and
    Spring configurations to identify the available APIs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论一下 `springdoc-openapi` 是什么。`springdoc-openapi` 是一个库，它自动生成 Spring Boot
    项目的 API 文档。这种自动化之所以可能，是因为该库使用注解、类结构和 Spring 配置来识别可用的 API。
- en: '`springdoc-openapi` can generate the necessary documentation in JSON/YAML and
    HTML APIs that can be viewed with a newly generated URL on our application. It
    also supports several frameworks and protocols, including the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`springdoc-openapi` 可以生成必要的文档，以 JSON/YAML 和 HTML API 的形式，可以通过我们应用程序上生成的新 URL
    查看。它还支持几个框架和协议，包括以下内容：'
- en: '`spring-boot`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot`'
- en: JSR-303, specifically for `@NotNull`, `@Min`, `@Max`, and `@Size`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-303，特别是用于 `@NotNull`、`@Min`、`@Max` 和 `@Size`
- en: '`swagger-ui`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`swagger-ui`'
- en: OAuth 2
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth 2
- en: Now, let’s discuss the properties and plugins of `springdoc-openapi`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论 `springdoc-openapi` 的属性和插件。
- en: The properties of springdoc-openapi
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: springdoc-openapi 的属性
- en: We can modify the behavior and settings of `.springdoc-openapi` based on our
    preference. It has different properties, as we can set their values under the
    `application.properties` file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据我们的偏好修改 `.springdoc-openapi` 的行为和设置。它有不同的属性，我们可以在 `application.properties`
    文件下设置它们的值。
- en: 'Here are some of the commonly used properties in `springdoc-openapi`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `springdoc-openapi` 中常用的一些属性：
- en: '`springdoc.swagger-ui.path`: The default value is `/swagger-ui.html`. It defines
    the path to access the HTML documentation.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.path`：默认值是 `/swagger-ui.html`。它定义了访问 HTML 文档的路径。'
- en: '`springdoc.swagger-UI.enabled`: The default value is `true`. It enables or
    disables the `swagger-UI` endpoint.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-UI.enabled`：默认值是 `true`。它启用或禁用 `swagger-UI` 端点。'
- en: '`springdoc.swagger-ui.configUrl`: The default value is `/v3/api-docs/swagger-config`.
    It is a URL that retrieves an external configuration document.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.configUrl`：默认值是 `/v3/api-docs/swagger-config`。这是一个检索外部配置文档的
    URL。'
- en: '`springdoc.swagger-ui.layout`: The default value is `BaseLayout`. It’s the
    top-level layout used by Swagger UI to display the documentation.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.layout`：默认值是 `BaseLayout`。这是 Swagger UI 用于显示文档的最高级布局。'
- en: '`springdoc.swagger-ui.tryItOutEnabled`: The default value is `false`. It enables
    or disables the **Try it out** section, where the user can test the endpoints.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.tryItOutEnabled`：默认值是 `false`。它启用或禁用 **尝试使用** 部分，用户可以在其中测试端点。'
- en: '`springdoc.swagger-ui.filter`: The default value is `false`. It enables or
    disables filtering and adds a textbox to place the filter criteria. It can be
    a Boolean or a string; this will act as the filter expression.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.filter`：默认值是 `false`。它启用或禁用过滤并添加一个文本框来放置过滤条件。它可以是布尔值或字符串；这将作为过滤表达式。'
- en: '`springdoc.swagger-ui.operationsSorter`: This applies a sort to the operations
    list of the API. The value can be `''alpha''` (sort by paths alphanumerically),
    `''method''` (sort by HTTP method), or a function that will identify the sorting
    criteria.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.operationsSorter`：这将对 API 的操作列表进行排序。值可以是 `''alpha''`（按路径字母数字排序）、`''method''`（按
    HTTP 方法排序）或一个将标识排序标准的函数。'
- en: '`springdoc.swagger-ui.tagsSorter`: This applies a sort to the operations list
    of the API. The value can be `''alpha''` (sort by paths alphanumerically) or a
    function that will identify the sorting criteria.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`springdoc.swagger-ui.tagsSorter`：这将对 API 的操作列表进行排序。值可以是 `''alpha''`（按路径字母数字排序）或一个将标识排序标准的函数。'
- en: The plugins of springdoc-openapi
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: springdoc-openapi 的插件
- en: '`springdoc-openapi` also has plugins that we can use to generate the documentation.
    Let’s take a look.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`springdoc-openapi` 还有一些插件，我们可以使用它们来生成文档。让我们看看。'
- en: springdoc-openapi-maven-plugin
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: springdoc-openapi-maven-plugin
- en: '`springdoc-openapi-maven-plugin` generates a JSON and YAML OpenAPI description
    during build time. The plugin also works in the integration phase. To enable the
    plugin, we need to add the following declaration to the `<plugin>` section of
    the `pom.xml` file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`springdoc-openapi-maven-plugin` 在构建时生成 JSON 和 YAML OpenAPI 描述。该插件也在集成阶段工作。要启用该插件，我们需要将以下声明添加到
    `pom.xml` 文件的 `<plugin>` 部分：'
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We just added the `spring-boot-maven-plugin` plugin. Copy the preceding code
    and paste it into your `.``pom` file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了 `spring-boot-maven-plugin` 插件。复制前面的代码并将其粘贴到您的 `.pom` 文件中。
- en: 'Now, let’s add version 1.4 of `springdoc-openapi-maven-plugin` just below the
    `spring-boot-maven-plugin` plugin code block:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 `spring-boot-maven-plugin` 插件代码块下方添加 `springdoc-openapi-maven-plugin`
    的 1.4 版本：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also customize the behavior of `openapi-maven-plugin` by specifying
    the following properties:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过指定以下属性来自定义 `openapi-maven-plugin` 的行为：
- en: '`attachArtifact`: The default value is `false`. It deploys the API documentation
    to the repository.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attachArtifact`：默认值是 `false`。它将 API 文档部署到仓库。'
- en: '`apiDocsUrl`: The default value is `http://localhost:8080/v3/api-docs`. This
    is the local URL to the generated JSON or YAML description.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiDocsUrl`：默认值是 `http://localhost:8080/v3/api-docs`。这是指向生成的 JSON 或 YAML 描述的本地
    URL。'
- en: '`outputDir`: The default value is `project.build.directory`. This is where
    the OpenAPI description is generated.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputDir`：默认值是 `project.build.directory`。这是生成 OpenAPI 描述的位置。'
- en: '`outputFileName`: The default value is `openapi.json`. This specifies the filename
    when the OpenAPI description is generated.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputFileName`：默认值是 `openapi.json`。这指定了生成 OpenAPI 描述时的文件名。'
- en: '`skip`: This skips execution if it is set to `true`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip`：如果设置为 `true`，则跳过执行。'
- en: '`headers`: The default value is `empty`. It specifies the list of headers to
    send in the request.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`headers`：默认值是 `empty`。它指定了请求中要发送的头部列表。'
- en: 'The following code example shows how to use these properties:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例显示了如何使用这些属性：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example XML code, we have added several properties to apply
    custom configuration for OpenAPI. We have manually set the output filename, directory,
    and headers for generating the API documentation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 XML 代码示例中，我们添加了几个属性以应用 OpenAPI 的自定义配置。我们手动设置了输出文件名、目录和用于生成 API 文档的标题。
- en: springdoc-openapi-gradle-plugin
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: springdoc-openapi-gradle-plugin
- en: '`springdoc-openapi-gradle-plugin` generates the OpenAPI specification for a
    Spring Boot application from a Gradle build. To enable the plugin, we must place
    the following code in our `plugins` section:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`springdoc-openapi-gradle-plugin` 从 Gradle 构建中为 Spring Boot 应用程序生成 OpenAPI
    规范。要启用插件，我们必须在我们的 `plugins` 部分放置以下代码：'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the plugins and dependencies have been added, the following tasks will
    be created:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了插件和依赖项，以下任务将被创建：
- en: '`generateOpenApiDocs`: The job that will be run to generate the OpenAPI documentation.
    `generateOpenApiDocs` makes a REST call to the application’s documentation URL
    to store the OpenAPI docs in JSON format.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generateOpenApiDocs`：将运行以生成 OpenAPI 文档的任务。`generateOpenApiDocs` 对应用程序的文档 URL
    进行 REST 调用，以将 OpenAPI 文档存储为 JSON 格式。'
- en: '`forkedSpringBootRun`: The Spring Boot application runs in the background using
    this task.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forkedSpringBootRun`：Spring Boot 应用程序使用此任务在后台运行'
- en: 'We can also customize the behavior of `openapi-graven-plugin` by specifying
    the following properties:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过指定以下属性来自定义 `openapi-graven-plugin` 的行为：
- en: '`apiDocsUrl`: The URL where the Open API documentation can be downloaded'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiDocsUrl`：可以下载 Open API 文档的 URL'
- en: '`outputDir`: The directory where the documentation is generated'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputDir`：文档生成的目录'
- en: '`outputFileName`: The name of the generated output file'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputFileName`：生成的输出文件名'
- en: '`waitTimeInSeconds`: The time to wait in seconds for the Spring Boot application
    to start before calling the REST APIs to generate the OpenAPI documentation'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`waitTimeInSeconds`：在调用 REST API 生成 OpenAPI 文档之前等待 Spring Boot 应用程序启动的秒数'
- en: '`forkProperties`: A system property that’s required for running your Spring
    Boot application'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forkProperties`：运行您的 Spring Boot 应用程序所需的系统属性'
- en: '`groupedApiMappings`: A set of URLs from where the OpenAPI documentation can
    be downloaded'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupedApiMappings`：一组 URL，可以从这些 URL 下载 OpenAPI 文档'
- en: 'To use these properties, we must specify them using `generateOpenApiDocs`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些属性，我们必须使用 `generateOpenApiDocs` 指定它们：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With that, we have learned about the properties and plugins that we can use
    in OpenAPI docs. Now, let’s configure the plugin for our Spring Boot application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经了解了在 OpenAPI 文档中我们可以使用的属性和插件。现在，让我们为我们的 Spring Boot 应用程序配置插件。
- en: Configuring springdoc-openapi
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 springdoc-openapi
- en: 'Now, we will install and configure `springdoc-openapi` in our Spring Boot application.
    First, we must add the dependency to the previous project we made. Go to the `pom.xml`
    file and add the following XML code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在我们的 Spring Boot 应用程序中安装和配置 `springdoc-openapi`。首先，我们必须将依赖项添加到我们之前创建的项目中。转到
    `pom.xml` 文件，并添加以下 XML 代码：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After successfully installing the OpenAPI dependency, we can run our Spring
    Boot project. Once the server has started, we can go to `http://localhost:8080/v3/api-docs/`
    to access the OpenAPI documentation in JSON format. You will see that all of your
    endpoints and their associated HTTP requests are displayed as JSON objects. The
    following is a snippet of the generated JSON documentation for our project:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装 OpenAPI 依赖项后，我们可以运行我们的 Spring Boot 项目。一旦服务器启动，我们可以访问 `http://localhost:8080/v3/api-docs/`
    来获取 JSON 格式的 OpenAPI 文档。您将看到所有端点和它们相关的 HTTP 请求都显示为 JSON 对象。以下是我们项目生成的 JSON 文档片段：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we can see that the generated JSON object displays the available endpoints
    in our project. It is shown together with the operation ID, which is the default
    name of the method; it also specifies the parameters with the types required and
    the possible responses of the endpoint.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到生成的 JSON 对象显示了项目中的可用端点。它显示了操作 ID，这是方法的默认名称；它还指定了所需的参数类型和端点的可能响应。
- en: We have used the default URL where OpenAPI can be accessed. We can change the
    URL using the application’s `springdoc.api-docs.path property.properties` file.
    For example, we have set it to `springdoc.api-docs.path=rest-docs`, which means
    we can now access the JSON document using `http://localhost:8080/rest-docs/`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了 OpenAPI 可以访问的默认 URL。我们可以通过应用程序的 `springdoc.api-docs.path property.properties`
    文件来更改 URL。例如，我们将其设置为 `springdoc.api-docs.path=rest-docs`，这意味着我们现在可以通过 `http://localhost:8080/rest-docs/`
    访问 JSON 文档。
- en: We can also access the YAML version of the documentation by accessing `http://localhost:8080/v3/api-docs.yaml`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过访问 `http://localhost:8080/v3/api-docs.yaml` 来获取文档的 YAML 版本。
- en: With that, we have successfully generated the documentation for our endpoints
    using `springdoc-openapi`. In the next section, we will learn how to configure,
    access, and use Swagger UI.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经成功使用 `springdoc-openapi` 生成我们端点的文档。在下一节中，我们将学习如何配置、访问和使用 Swagger UI。
- en: Setting up Swagger UI
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Swagger UI
- en: '**Swagger UI** is a documentation tool that allows users to call the available
    APIs in your project directly from a browser. This is a more interactive tool
    that enables a more detailed and practical use of the APIs. Swagger UI is also
    open source, enabling more communities to support the tool.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swagger UI** 是一个文档工具，它允许用户直接从浏览器中调用项目中可用的 API。这是一个更互动的工具，它使得 API 的使用更加详细和实用。Swagger
    UI 也是开源的，这使得更多的社区能够支持这个工具。'
- en: Installing and using Swagger UI
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和使用 Swagger UI
- en: 'Swagger UI is already included under the `springdoc-openapi-ui` dependency.
    We have already included the OpenAPI extension code by adding the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger UI 已经包含在 `springdoc-openapi-ui` 依赖项中。我们已经通过添加以下代码来包含 OpenAPI 扩展代码：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The OpenAPI dependency includes the Swagger UI extension; we can access the
    UI with the following URL: `http://localhost:8080/swagger-ui.html`. This will
    open the Swagger UI’s **OpenAPI** **definition** page:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 依赖项包括 Swagger UI 扩展；我们可以通过以下 URL 访问 UI：`http://localhost:8080/swagger-ui.html`。这将打开
    Swagger UI 的 **OpenAPI** **定义** 页面：
- en: '![Figure 6.1 – The Swagger UI’s OpenAPI definition page](img/B18159_06_01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – Swagger UI 的 OpenAPI 定义页面](img/B18159_06_01.jpg)'
- en: Figure 6.1 – The Swagger UI’s OpenAPI definition page
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – Swagger UI 的 OpenAPI 定义页面
- en: Here, we can see that our Swagger UI has been accessed successfully. Our created
    endpoints in the Spring Boot project are also displayed, together with their HTTP
    methods. Let’s discuss the different parts of the Swagger UI documentation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的 Swagger UI 已经成功访问。我们在 Spring Boot 项目中创建的端点及其 HTTP 方法也显示出来。让我们讨论
    Swagger UI 文档的不同部分。
- en: The first thing we can see in Swagger UI is that it contains text input, alongside
    the `v3/api-docs`. This means that the JSON documentation we have generated using
    the OpenAPI library is being used by Swagger to get the available endpoints.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swagger UI 中，我们首先可以看到它包含文本输入，以及 `v3/api-docs`。这意味着我们使用 OpenAPI 库生成的 JSON 文档正在被
    Swagger 用于获取可用的端点。
- en: We can change this and access the URL that contains the OpenAPI documentation
    in JSON or YAML format. The next component we will see is the list of available
    endpoints in our project. In the preceding example, the five endpoints we have
    developed are listed in Swagger UI. This is not a list as the Swagger UI tool
    is interactive, allowing us to try the available endpoints.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改它并访问包含 OpenAPI 文档的 URL，该文档以 JSON 或 YAML 格式存在。接下来我们将看到的是我们项目中可用的端点列表。在先前的例子中，我们在
    Swagger UI 中列出了我们开发的五个端点。这不是一个列表，因为 Swagger UI 工具是互动的，允许我们尝试可用的端点。
- en: 'Let’s have a look at the following example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '![Figure 6.2 – POST request for anti-heroes](img/B18159_06_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 对反英雄的 POST 请求](img/B18159_06_02.jpg)'
- en: Figure 6.2 – POST request for anti-heroes
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 对反英雄的 POST 请求
- en: 'We can expand the `/api/v1/anti-heroes` endpoint to create a new Anti-Hero
    object in our database since this is using the `POST` HTTP method. The schema
    of the object we need to pass in our request body is specified. It defines both
    the names and the types of properties. In this case, the Anti-Hero entity has
    the following schema:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以展开 `/api/v1/anti-heroes` 端点来在我们的数据库中创建一个新的反英雄对象，因为这是使用 `POST` HTTP 方法。我们需要在请求体中传递的对象的架构被指定。它定义了属性的名字和类型。在这种情况下，反英雄实体具有以下架构：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The possible responses are also specified in the example endpoint. The possible
    response has a status of `200`, which specifies success. It will also return the
    newly created entity in the database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例端点中也指定了可能的响应。可能的响应状态为 `200`，表示成功。它还将返回数据库中的新创建实体。
- en: 'We want to test the endpoint and insert some example data into the database.
    To do this, we must click the **Try it out** button, which can be found at the
    top right, and click the **Execute** button to call the endpoint. Once the API
    call is successful, we will see the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想测试端点并将一些示例数据插入到数据库中。为此，我们必须点击右上角的 **Try it out** 按钮，然后点击 **Execute** 按钮来调用端点。一旦
    API 调用成功，我们将看到以下输出：
- en: '![Figure 6.3 – Response from the POST request](img/B18159_06_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – POST 请求的响应](img/B18159_06_03.jpg)'
- en: Figure 6.3 – Response from the POST request
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – POST 请求的响应
- en: Here, we can see that the API returned successfully as it returned a **Code**
    of **200** and the newly created entity in the database.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 API 成功返回，因为它返回了一个 **代码** 为 **200** 的新创建的数据库实体。
- en: 'We can check whether our endpoint has successfully inserted the data into our
    table by accessing `pgAdmin`, as shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过访问 `pgAdmin` 来检查我们的端点是否已成功将数据插入到我们的表中，如下面的截图所示：
- en: '![Figure 6.4 – Verifying whether data has been inserted from the POST request](img/B18159_06_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 验证是否已从 POST 请求中插入数据](img/B18159_06_04.jpg)'
- en: Figure 6.4 – Verifying whether data has been inserted from the POST request
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 验证是否已从 POST 请求中插入数据
- en: In the preceding example, we can see that our data has been inserted successfully
    into our table. Now, we can test the other available endpoints by getting, updating,
    or deleting the data we have created in the database.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以看到我们的数据已经成功插入到我们的表中。现在，我们可以通过获取、更新或删除数据库中创建的数据来测试其他可用的端点。
- en: We have successfully navigated through the Swagger UI tool and interacted with
    the available endpoints, but we can also modify Swagger UI based on our preferences
    and requirements by using properties, similar to what we can do with the OpenAPI
    documentation. We can also modify the URL to access Swagger UI; for example, we
    can place `springdoc.swagger-ui.path=/{custom-path}.html` in the `application.properties`
    file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功导航通过 Swagger UI 工具并与之交互，但我们也可以通过使用属性来修改 Swagger UI，以符合我们的偏好和需求，就像我们可以对
    OpenAPI 文档所做的那样。我们还可以修改 URL 以访问 Swagger UI；例如，我们可以在 `application.properties` 文件中放置
    `springdoc.swagger-ui.path=/{custom-path}.html`。
- en: The other behavior we can also modify is the sorting behavior of our endpoints.
    We can change how the endpoints are arranged in the list in terms of `alpha` (arranged
    alphanumerically) or `method` (arranged by methods), or we can use a custom function
    to change the sorting method. For this, we can place `springdoc.swagger-ui.operationsSorter=(sort
    behavior`) in the `application.properties` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以修改的其他行为是我们的端点的排序行为。我们可以根据 `alpha`（按字母数字顺序排列）或 `method`（按方法排列）来更改端点在列表中的排列方式，或者我们可以使用自定义函数来更改排序方法。为此，我们可以在
    `application.properties` 文件中放置 `springdoc.swagger-ui.operationsSorter=(排序行为)`。
- en: 'In this example, we will use `springdoc.swagger-ui.operationsSorter=method`.
    We will see the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用 `springdoc.swagger-ui.operationsSorter=method`。我们将看到以下输出：
- en: '![Figure 6.5 – Endpoints arranged by methods](img/B18159_06_05.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 按方法排列的端点](img/B18159_06_05.jpg)'
- en: Figure 6.5 – Endpoints arranged by methods
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 按方法排列的端点
- en: As we can see, our endpoints are now arranged by the HTTP methods.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们的端点现在按照 HTTP 方法排列。
- en: Displaying pagination information in Swagger UI
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Swagger UI 中显示分页信息
- en: Swagger UI can also be integrated with endpoints that use pagination. We can
    specify the page number, the size of the list on each page, and the sorting expression.
    For us to integrate the pagination parameters in Swagger UI, we need to add the
    `springdoc-open-data-rest` dependency.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger UI 也可以与使用分页的端点集成。我们可以指定页码、每页列表的大小和排序表达式。为了在 Swagger UI 中集成分页参数，我们需要添加
    `springdoc-open-data-rest` 依赖项。
- en: 'To add the library, we must add the following code to our `pom.xml` file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加库，我们必须将以下代码添加到我们的 `pom.xml` 文件中：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After successfully adding the library, let’s modify our `getAntiHeroes` method
    under `AntiHeroesController` so that we have a working pagination feature:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功添加库之后，让我们修改 `AntiHeroesController` 下的 `getAntiHeroes` 方法，以便我们有一个工作的分页功能：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let’s expand `api/v1/anti-heroes`, which uses the `GET` method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们扩展使用 `GET` 方法的 `api/v1/anti-heroes`：
- en: '![Figure 6.6 – GET method for anti-heroes](img/B18159_06_06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 反英雄的 GET 方法](img/B18159_06_06.jpg)'
- en: Figure 6.6 – GET method for anti-heroes
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 反英雄的 GET 方法
- en: Here, we can see that the **Parameters** section has a **pageable** property
    and that we can specify the page we want to retrieve, the size of each page, and
    the sorting expression. Now, we can execute it to retrieve the data from the database.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 **参数** 部分有一个 **pageable** 属性，并且我们可以指定我们想要检索的页面、每页的大小和排序表达式。现在，我们可以执行它以从数据库中检索数据。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this, we have reached the end of this chapter. Let’s recap the valuable
    things you have learned.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就到达了本章的结尾。让我们回顾一下你学到的宝贵知识。
- en: First, you learned about the available features and properties of `springdoc-openapi`
    and how to configure and use the OpenAPI specification to generate the JSON and
    YAML documentation for our API calls. You also learned how to access Swagger UI,
    an interactive documentation tool for calling APIs directly in a browser. We simulated
    this to send test calls and modify certain behaviors, such as the domain URL and
    the sorting order. This newly acquired knowledge for generating documentation
    for APIs is very useful in real-world applications. This knowledge is used by
    developers to easily identify the available APIs that can be consumed, as well
    as their parameters and object responses.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你学习了`springdoc-openapi`提供的功能和属性，以及如何配置和使用OpenAPI规范来生成我们API调用的JSON和YAML文档。你还学习了如何访问Swagger
    UI，这是一个可以直接在浏览器中调用API的交互式文档工具。我们模拟了发送测试调用和修改某些行为，例如域名URL和排序顺序。这种为生成API文档的新知识在现实世界的应用中非常有用。开发者可以利用这些知识轻松地识别可消费的API，以及它们的参数和对象响应。
- en: In the next chapter, we will learn about the concept of **Cross-Origin Resource
    Sharing** (**CORS**), Spring Security, and **JSON Web** **Tokens** (**JWTs**).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习**跨源资源共享**（**CORS**）、Spring Security以及**JSON Web Tokens**（**JWTs**）的概念。
