- en: Chapter 3. Creating and Importing Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 创建和导入项目
- en: 'Let''s proceed on our journey. In this chapter, we will start with the Maven
    project structure followed by the build architecture, then we will cover some
    essential concepts, and finally learn how to create simple Maven projects. The
    chapter is divided into the following sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们的旅程。在本章中，我们将从Maven项目结构开始，然后是构建架构，接着我们将介绍一些基本概念，最后学习如何创建简单的Maven项目。本章分为以下部分：
- en: The Maven project structure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven项目的结构
- en: '**POM (Project Object Model)**'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POM（项目对象模型）**'
- en: Maven coordinates
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven坐标
- en: POM relationships
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: POM关系
- en: Simple POM
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单POM
- en: Super POM
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超级POM
- en: The Maven project build architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven项目的构建架构
- en: Other essential concepts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他基本概念
- en: Repository
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库
- en: Project dependencies
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目依赖
- en: Plugins and goals
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件和目标
- en: Site generation and reporting
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点生成和报告
- en: Creating a Maven project
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Maven项目
- en: Using an archetype
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原型
- en: Using no archetypes
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用原型
- en: Checking out a Maven project
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检出Maven项目
- en: Importing Maven projects
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入Maven项目
- en: The Maven project structure
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven项目的结构
- en: 'Maven, as stated in earlier chapters, follows convention over configuration.
    This makes us believe that there is a standard layout of the Maven project structure.
    Before we get into creating and playing with Maven projects, let''s first understand
    the basic common layout of Maven projects, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，Maven遵循约定优于配置。这使得我们相信Maven项目结构有一个标准布局。在我们开始创建和操作Maven项目之前，让我们首先了解Maven项目的基本通用布局，如下所示：
- en: '| Folder/Files | Description |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹/文件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `src/main/java` | This contains an application''s Java source files |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/java` | 这包含应用程序的Java源文件 |'
- en: '| `src/main/resources` | This contains files of an application''s resources
    such as images, sounds, templates, and so on |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/resources` | 这包含应用程序的资源文件，如图像、声音、模板等 |'
- en: '| `src/main/filters` | This contains the resource''s filter files |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/filters` | 这包含资源的过滤器文件 |'
- en: '| `src/main/config` | This contains the configuration files of the application
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/config` | 这包含应用程序的配置文件 |'
- en: '| `src/main/scripts` | This has files of application-specific scripts |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/scripts` | 这包含特定于应用程序的脚本文件 |'
- en: '| `src/main/webapp` | This has sources files for web applications |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `src/main/webapp` | 这包含Web应用程序的源文件 |'
- en: '| `src/test/java` | This contains unit test files of Java |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `src/test/java` | 这包含Java的单元测试文件 |'
- en: '| `src/test/resources` | This has unit testing-specific resources used in an
    application |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `src/test/resources` | 这包含在应用程序中使用的针对单元测试的特定资源 |'
- en: '| `src/filters` | This has files of the test-specific filter for resources
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `src/filters` | 这包含针对资源的测试特定过滤器文件 |'
- en: '| `src/it` | This has integration tests files (primarily for plugins ) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `src/it` | 这包含集成测试文件（主要用于插件）|'
- en: '| `src/assembly` | This contains files of the assembly descriptors |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `src/assembly` | 这包含汇编描述符的文件 |'
- en: '| `src/site` | This contains site artifacts |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `src/site` | 这包含站点工件 |'
- en: '| `LICENSE.txt` | This denotes the projects license |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `LICENSE.txt` | 这表示项目的许可证 |'
- en: '| `NOTICE.txt` | This includes the notice and attributions that the project
    depends on |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `NOTICE.txt` | 这包括项目依赖的通知和归属 |'
- en: '| `README.txt` | This denotes the project''s readme information |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `README.txt` | 这表示项目的readme信息 |'
- en: '| `target` | This houses all the output of the build |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `target` | 这包含构建的所有输出 |'
- en: '| `pom.xml` | This is the project''s `pom` file (which will be discussed in
    detail in the forthcoming sections) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `pom.xml` | 这是项目的`pom`文件（将在后续章节中详细讨论）|'
- en: Though the previously mentioned layout is the standard recommended convention,
    this can always be overridden in the project descriptor file (`pom` file).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管之前提到的布局是标准推荐约定，但在项目描述符文件（`pom`文件）中这总可以被覆盖。
- en: POM (Project Object Model)
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POM（项目对象模型）
- en: '**POM** stands for **Project Object Model**. It is primarily an XML representation
    of a project in a file named `pom.xml`. POM is the identity of a Maven project
    and without it, the project has no existence. It is analogous to a **Make** file
    or a `build.xml` file of **Ant**.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**POM**代表**项目对象模型**。它主要是文件名为`pom.xml`的项目XML表示。POM是Maven项目的身份，没有它，项目就没有存在。它与**Make**文件或**Ant**的`build.xml`文件类似。'
- en: 'A project in a broad sense should contain more than just mere code files and
    should act as a one-stop shop for all the things concerning it. Maven fulfills
    this need using the `pom` file. POM tends to answer questions such as: Where is
    the source code? Where are the resources? How is the packaging done? Where are
    the unit tests? Where are the artifacts? What is the build environment like? Who
    are the actors of the project? and so on.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在广义上，一个项目应该包含不仅仅是代码文件，而应该作为一个一站式商店，提供所有与之相关的事物。Maven 使用 `pom` 文件来满足这一需求。POM
    通常回答如下问题：源代码在哪里？资源在哪里？如何进行打包？单元测试在哪里？组件在哪里？构建环境是什么样的？项目的参与者是谁？等等。
- en: 'In a nutshell, the contents of POM fall under the following four categories:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，POM 的内容属于以下四个类别：
- en: '**Project information**: This provides general information of the project such
    as the project name, URL, organization, list of developers and contributors, license,
    and so on.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目信息**：这提供了关于项目的通用信息，例如项目名称、URL、组织、开发者列表和贡献者、许可证等。'
- en: '**POM relationships**: In rare cases, a project can be a single entity and
    does not depend on other projects. This section provides information about its
    dependency, inheritance from the parent project, its sub modules, and so on.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POM 关系**：在罕见的情况下，一个项目可以是一个单一实体，不依赖于其他项目。本节提供了关于其依赖项、从父项目继承的信息，以及其子模块等。'
- en: '**Build settings**: These settings provide information about the build configuration
    of Maven. Usually, behavior customization such as the location of the source,
    tests, report generation, build plugins, and so on is done.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建设置**：这些设置提供了关于 Maven 构建配置的信息。通常，行为定制，如源代码位置、测试、报告生成、构建插件等，都是在这里完成的。'
- en: '**Build environment**: This specifies and activates the build settings for
    different environments. It also uses profiles to differentiate between development,
    testing, and production environments.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建环境**：这指定并激活了不同环境的构建设置。它还使用配置文件来区分开发、测试和生产环境。'
- en: 'A POM file with all the categories discussed is shown as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，一个包含所有讨论类别的 POM 文件：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Maven coordinates
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven 坐标
- en: 'Maven coordinates define a set of identifiers that can be used to uniquely
    identify a project, a dependency, or a plugin in a Maven POM. Analogous to algebra
    where a point is identified by its coordinate in space, the Maven coordinates
    mark a specific place in a repository, acting like a coordinate system for Maven
    projects. The Maven coordinates'' constituents are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 坐标定义了一组标识符，这些标识符可以用来在 Maven POM 中唯一地识别一个项目、一个依赖项或一个插件。类似于代数中一个点通过其在空间中的坐标来识别，Maven
    坐标在存储库中标记了一个特定的位置，充当 Maven 项目的坐标系。Maven 坐标的组成部分如下：
- en: '**groupId**: This represents a group, company, team, organization, or project.
    A general convention for a group ID is it begins with a reverse domain name of
    the organization that creates the project. However, it may not necessarily use
    the dot notation as it does in the `junit` project. The group forms the basis
    for storage in the repository and acts much like a Java packaging structure does
    in OS. The corresponding dots are replaced with OS-specific directory separators
    (such as `/` in Unix), which forms the relative directory structure from the base
    repository. For example, if `groupId` is `com.packt.mvneclipse`, it lives in the
    `$M2_REPO/com/packt/mvneclipse` directory.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**groupId**：这代表一个组、公司、团队、组织或项目。组 ID 的一般约定是该项目的创建组织的反向域名开头。然而，它可能不一定使用与 `junit`
    项目中相同的点表示法。组构成了在存储库中存储的基础，并且与在操作系统中的 Java 打包结构非常相似。相应的点被替换为操作系统特定的目录分隔符（例如 Unix
    中的 `/`），从而形成了从基本存储库的相对目录结构。例如，如果 `groupId` 是 `com.packt.mvneclipse`，它位于 `$M2_REPO/com/packt/mvneclipse`
    目录中。'
- en: '**artifactId**: This is a unique identifier under `groupId` that represents
    a single project/the project known by. Along with the `groupId` coordinate, the
    `artifactId` coordinate fully defines the artifact''s living quarters within the
    repository. For example, continuing with the preceding example, the artifact ID
    with `hello-project` resides at the `$M2_REPO/com/packt/mvneclipse/hello-project`
    path.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**artifactId**：这是 `groupId` 下的一个唯一标识符，代表一个单一项目/已知的项目。与 `groupId` 坐标一起，`artifactId`
    坐标完全定义了在存储库中该组件的居住地。例如，继续前面的例子，具有 `hello-project` 的组件 ID 位于 `$M2_REPO/com/packt/mvneclipse/hello-project`
    路径。'
- en: '**project version**: This denotes a specific release of a project. It is also
    used within an artifact''s repository to separate versions from each other. For
    example, `hello-project` with version 1.0 resides in the `$M2_REPO/com/packt/mvneclipse/hello-project/1.0/`
    directory.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目版本**：这表示项目的特定版本。它还在工件仓库中使用，以区分不同的版本。例如，版本为 1.0 的 `hello-project` 存在于 `$M2_REPO/com/packt/mvneclipse/hello-project/1.0/`
    目录中。'
- en: '**packaging**: This describes the packaged output produced by a project. If
    no packaging is declared, Maven assumes the artifact is the default `jar` file.
    The core packaging values available in Maven are: `pom`, `jar`, `maven-plugin`,
    `ejb`, `war`, `ear`, `rar`, and `par`. The following figure illustrates an example
    of Maven coordinates:![Maven coordinates](img/00020.jpeg)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包**：这描述了由项目生成的打包输出。如果没有声明打包，Maven 假设工件是默认的 `jar` 文件。Maven 中可用的核心打包值包括：`pom`、`jar`、`maven-plugin`、`ejb`、`war`、`ear`、`rar`
    和 `par`。以下图示展示了 Maven 坐标的示例：![Maven 坐标](img/00020.jpeg)'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As the local repository, `$M2_REPO` signifies the `%USER_HOME% /.m2` directory
    in the user's machine.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本地仓库，`$M2_REPO` 表示用户机器上的 `%USER_HOME% /.m2` 目录。
- en: POM relationships
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POM 关系
- en: 'POM relationships identify the relationship they possess with respect to other
    modules, projects, and other POMs. This relationship could be in the form of dependencies,
    multimodule projects, parent-child also known as inheritance, and aggregation.
    The elements of POM relationships are represented graphically as shown in the
    following figure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: POM 关系标识了它们与其他模块、项目和其它 POM 之间的关系。这种关系可以是依赖关系、多模块项目、父子关系（也称为继承）和聚合。POM 关系的元素如图所示：
- en: '![POM relationships](img/00021.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![POM 关系](img/00021.jpeg)'
- en: 'Similarly, the elements of POM relationships in the XML file can be specified
    as shown in the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，XML 文件中 POM 关系的元素可以指定如下所示代码：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A simple POM
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的 POM
- en: 'The most basic POM consists of just the Maven coordinates and is sufficient
    to build and generate a `jar` file for the project. A simple POM file may look
    like the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的 POM 只包含 Maven 坐标，足以构建和生成项目的 `jar` 文件。一个简单的 POM 文件可能如下所示代码：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following points will explain these elements:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点将解释这些元素：
- en: The `modelVersion` value is `4.0.0`. Maven supports this version of POM model.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modelVersion` 值为 `4.0.0`。Maven 支持此版本的 POM 模型。'
- en: There is a single POM file for every project.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个项目都有一个 POM 文件。
- en: 'All POM files require the `project` element and three mandatory fields: `groupId`,
    `artifactId`, and `version`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 POM 文件都需要 `project` 元素和三个强制字段：`groupId`、`artifactId` 和 `version`。
- en: The root element of `pom.xml` is `project`, and it has three major subnodes.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom.xml` 的根元素是 `project`，它有三个主要子节点。'
- en: A simple POM (as shown in the previous code snippet) is hardly enough in real-world
    projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的项目中，一个简单的 POM（如前代码片段所示）几乎是不够的。
- en: A super POM
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个超级 POM
- en: 'Like Java, where every object inherits from `java.lang.Object`, every POM inherits
    from a base POM known as **Super POM**. Implicitly, every POM inherits the default
    value from the base POM. It eases the developer''s effort toward minimal configuration
    in his/her `pom.xml` file. However, default values can be overridden easily when
    they are specified in the projects'' corresponding `pom` file. The default configuration
    of the super POM can be made available by issuing the following command inside
    the respective project:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Java，其中每个对象都继承自 `java.lang.Object`，每个 POM 都继承自一个称为 **Super POM** 的基本 POM。隐式地，每个
    POM 都从基本 POM 继承默认值。这简化了开发者在 `pom.xml` 文件中的最小配置工作。然而，当它们在项目的相应 `pom` 文件中指定时，可以轻松地覆盖默认值。可以通过在相应项目内部运行以下命令来获取超级
    POM 的默认配置：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The super POM is a part of the Maven installation and can be found in the `maven-x.y.z-uber.jar`
    or `maven-model-builder-x.y.z.jar` file at `$M2_HOME/lib`, where `x.y.z` denotes
    the version. In the corresponding JAR file, there is a file named `pom-4.0.0.xml`
    under the `org.apache.maven.model` package.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 超级 POM 是 Maven 安装的一部分，可以在 `$M2_HOME/lib` 下的 `maven-x.y.z-uber.jar` 或 `maven-model-builder-x.y.z.jar`
    文件中找到，其中 `x.y.z` 表示版本。在相应的 JAR 文件中，`org.apache.maven.model` 包下有一个名为 `pom-4.0.0.xml`
    的文件。
- en: '![A super POM](img/00022.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![超级 POM](img/00022.jpeg)'
- en: 'The default configuration of the super POM inherited in a sample project is
    given as follows; for the sake of brevity, only some important aspects are shown:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例项目中继承的超级 POM 的默认配置如下；为了简洁起见，仅展示了某些重要方面：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Maven project build architecture
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 项目构建架构
- en: The following figure shows the common build architecture for Maven projects.
    Essentially, every Maven project contains a POM file that defines every aspect
    of the project essentials. Maven uses the POM details to decide upon different
    actions and artifact generation. The dependencies specified are first searched
    for in the local repository and then in the central repository. There is also
    a notion that the remote repository is searched if it is specified in the POM.
    We will talk about repositories in the next section. In addition, POM defines
    details to be included during site generation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了 Maven 项目的常见构建架构。本质上，每个 Maven 项目都包含一个 POM 文件，该文件定义了项目的所有基本方面。Maven 使用
    POM 的详细信息来决定不同的操作和工件生成。指定的依赖项首先在本地仓库中搜索，然后是在中央仓库中。还有一个概念，如果 POM 中指定了远程仓库，则会搜索远程仓库。我们将在下一节中讨论仓库。此外，POM
    定义了在生成站点时要包含的详细信息。
- en: 'Have a look at the following diagram:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下图：
- en: '![The Maven project build architecture](img/00023.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Maven 项目构建架构](img/00023.jpeg)'
- en: Other essential concepts
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他基本概念
- en: The other essential concepts of Maven are discussed in the following sections.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的其他基本概念将在以下章节中讨论。
- en: Repository
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库
- en: Maven repositories are accessible locations designed to store the artifacts
    that Maven builds produce. To be more precise, a repository is a location to store
    a project's artifacts that is designed to match the Maven coordinates.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 仓库是可访问的位置，用于存储 Maven 构建产生的工件。更准确地说，仓库是一个用于存储项目工件的位置，它被设计成与 Maven 坐标匹配。
- en: 'A Maven repository can be one of the following types:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 仓库可以是以下类型之一：
- en: Local
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地
- en: Central
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中央
- en: Remote
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程
- en: The local repository
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地仓库
- en: 'A local repository is one that resides in the same machine where a Maven build
    runs. It is a `.m2` folder located in the `$USER_HOME` directory of the user''s
    machine. It is created when the `mvn` command is run for the very first time.
    However, to override the default location, open the `settings.xml` file if it
    exists; else, create one in the `$M2_HOME\conf` (for windows: `%M2_HOME%\conf`)
    folder and respective location as in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '本地仓库是位于 Maven 构建运行的同一台机器上的仓库。它是用户机器的 `$USER_HOME` 目录中的一个 `.m2` 文件夹。当第一次运行 `mvn`
    命令时创建。然而，要覆盖默认位置，如果存在，请打开 `settings.xml` 文件；否则，在 `$M2_HOME\conf` (对于 Windows:
    `%M2_HOME%\conf`) 文件夹中创建一个，并按照以下代码中的相应位置：'
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When we run the Maven command, Maven will download dependencies to a custom
    path.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 Maven 命令时，Maven 会将依赖项下载到自定义路径。
- en: The central repository
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中央仓库
- en: 'The central repository is the repository provided by the Maven community. It
    contains a large repository of commonly used libraries. This repository comes
    into play when Maven does not find libraries in the local repository. The central
    repository can be found at: [http://search.maven.org/#browse](http://search.maven.org/#browse).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 中央仓库是由 Maven 社区提供的仓库。它包含了一个大型常用库的仓库。当 Maven 在本地仓库中找不到库时，该仓库就会发挥作用。中央仓库可以在以下位置找到：[http://search.maven.org/#browse](http://search.maven.org/#browse)。
- en: The remote repository
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程仓库
- en: Enterprises usually maintain their own repositories for the libraries that are
    being used for the project. These differ from the local repository; a repository
    is maintained on a separate server, different from the developer's machine and
    is accessible within the organization. Also, sometimes, there are cases where
    the availability of the libraries in central repositories is not certain, thus
    giving rise to the need for a remote repository.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 企业通常维护自己的仓库，用于存储项目中使用的库。这些仓库与本地仓库不同；仓库是在一个独立的服务器上维护的，不同于开发者的机器，并且可以在组织内部访问。此外，有时中央仓库中库的可用性不确定，因此产生了对远程仓库的需求。
- en: 'For example, the following POM file mentions the remote repositories, where
    the dependency is not available in the central repository:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下 POM 文件提到了远程仓库，其中依赖项在中央仓库中不可用：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Search sequence in repositories
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仓库中的搜索顺序
- en: 'The following figure illustrates the sequence in which the search operation
    is carried out in the repositories on execution of the Maven build:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图说明了在执行 Maven 构建时在仓库中执行搜索操作的顺序：
- en: '![Search sequence in repositories](img/00024.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![仓库中的搜索顺序](img/00024.jpeg)'
- en: 'Maven follows the ensuing sequence to search dependent libraries in repositories,
    and the sequence is explained as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 按照以下顺序在仓库中搜索依赖库，顺序如下所述：
- en: In step 1, Maven searches for dependencies in the local repository; if found,
    it proceeds further, else it goes to the central repository.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在步骤 1 中，Maven 在本地仓库中搜索依赖项；如果找到，则继续进行，否则它将转到中央仓库。
- en: In step 2, the search continues in the central repository; if found, it proceeds
    to download the dependent libraries to the local repository and continues the
    processing. If the search fails in the central repository and if there is a mention
    of a remote repository in the POM file, it continues with step 3 or else throws
    an error and stops.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在步骤 2 中，搜索继续在中央仓库中进行；如果找到，它将下载依赖库到本地仓库并继续处理。如果在中央仓库中搜索失败，并且 POM 文件中提到了远程仓库，它将继续进行步骤
    3，否则抛出错误并停止。
- en: In step 3, the search continues in the remote repositories. If found, it proceeds
    to download the dependent libraries to the local repository and continues processing.
    If search encounters a failure, it throws an error and stops at that juncture.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在步骤 3 中，搜索继续在远程仓库中进行。如果找到，它将下载依赖库到本地仓库并继续处理。如果搜索遇到失败，它将抛出错误并在该处停止。
- en: Project dependencies
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目依赖
- en: 'The powerful feature of Maven is its dependency management for any project.
    Dependencies may be external libraries or internal (in-house) libraries/project.
    Dependencies in POM can be stated under the following tags with the following
    attributes as shown:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的强大功能是其对任何项目的依赖项管理。依赖项可能是外部库或内部（内部）库/项目。POM 中的依赖项可以以下列标签和以下属性进行声明，如下所示：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Dependency scopes
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖项范围
- en: 'Dependency scopes control the availability of dependencies in a classpath and
    are packaged along with an application. There are six dependency scopes, which
    are described in detail as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项范围控制类路径中依赖项的可用性，并与应用程序一起打包。有六个依赖项范围，以下详细描述如下：
- en: '`Compile`: This is the default scope if not specified. Dependencies with this
    scope are available in all classpaths and are packaged.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Compile`：如果没有指定，这是默认范围。具有此范围的依赖项在所有类路径中可用，并且被打包。'
- en: '`Provided`: Similar to the `compile` scope, however, this indicates JDK or
    the container to provide them. It is available only in compilation and test classpaths
    and is not transitive.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Provided`：与 `compile` 范围类似，但表示 JDK 或容器提供它们。它仅在编译和测试类路径中可用，并且不是传递的。'
- en: '`Runtime`: This scope indicates that the dependency is not required for compilation
    but is available for execution. For example, a JDBC driver is required only at
    runtime, however the JDBC API is required during compile time.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Runtime`：此范围表示依赖项在编译时不需要，但在执行时可用。例如，JDBC 驱动程序仅在运行时需要，然而 JDBC API 在编译时需要。'
- en: '`Test`: This scope indicates that the dependency is not required for normal
    use of the application, and it is only available for the test compilation and
    execution phases.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Test`：此范围表示依赖项对于应用程序的正常使用不是必需的，并且它仅在测试编译和执行阶段可用。'
- en: '`System`: This is similar to the `provided` scope but the explicit path to
    JARs on the local filesystem is mentioned. The path must be absolute such as `$JAVA_HOME/lib`.
    Maven will not check the repositories; instead it will check the existence of
    the file.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`：这与 `provided` 范围类似，但明确指出了本地文件系统上 JAR 的路径。路径必须是绝对路径，例如 `$JAVA_HOME/lib`。Maven
    不会检查仓库；相反，它将检查文件的存在。'
- en: Transitive dependencies
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递依赖
- en: Project A depends on project B and project B depends on C—now C is a transitive
    dependency for A. Maven's strength lies in the fact that it can handle transitive
    dependencies and hide the chain of dependencies under the hood from a developer's
    knowledge. As a developer, the direct dependency of the project is defined, and
    all other dependencies' chain nuisance is dealt by Maven with effective version
    conflict management. Scope limits the transitivity of a dependency as discussed
    in the preceding section by allowing the inclusion of dependencies appropriate
    for the current stage of the build.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 项目 A 依赖于项目 B，而项目 B 依赖于 C——现在 C 是 A 的传递依赖。Maven 的优势在于它可以处理传递依赖，并从开发者的知识中隐藏依赖链。作为开发者，项目的直接依赖被定义，而所有其他依赖链的麻烦都由
    Maven 通过有效的版本冲突管理来处理。范围限制依赖项的传递性，如前所述，通过允许包含适合构建当前阶段的依赖项。
- en: For more information, please visit [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请访问[http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)。
- en: 'Transitive dependency is illustrated in the following figure:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了传递依赖关系：
- en: '![Transitive dependencies](img/00025.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![传递依赖](img/00025.jpeg)'
- en: Plugins and goals
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件和目标
- en: 'Maven, essentially, is a plugin framework where every action is the result
    of some plugin. Each plugin consists of goals (also called Mojos) that define
    the action to be taken. To put it in simple words, a *goal* is a unit of work.
    For example, a `compiler` plugin has `compile` as the goal that compiles the source
    of the project. An illustration is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Maven本质上是一个插件框架，其中每个动作都是某个插件的结果。每个插件由目标（也称为Mojos）组成，这些目标定义了要执行的操作。简单来说，*目标*是工作单元。例如，`compiler`插件有`compile`作为目标，用于编译项目的源代码。以下是一个示例：
- en: '![Plugins and goals](img/00026.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![插件和目标](img/00026.jpeg)'
- en: 'A plugin with set of goals can be executed using the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 带有目标集的插件可以使用以下命令执行：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Typically, the following are the types of plugins:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，以下是一些插件类型：
- en: '| Type | Description |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Build plugins | These are executed during the build and are specified in
    the `<build> <build/>` element in the `pom` file. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 构建插件 | 这些插件在构建期间执行，并在`pom`文件中的`<build> <build/>`元素中指定。|'
- en: '| Reporting Plugins | These are executed during site generation and are configured
    in the `<reporting> <reporting/>` element in the `pom` file. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 报告插件 | 这些插件在站点生成期间执行，并在`pom`文件中的`<reporting> <reporting/>`元素中配置。|'
- en: '| Core plugins | These plugins correspond to the default core phases. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 核心插件 | 这些插件对应于默认的核心阶段。|'
- en: '| Packaging types/tools | These relate to the respective artifact types for
    packaging. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 打包类型/工具 | 这些与相应的打包工件类型相关。|'
- en: 'The following table consists of some of the common plugins:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含了一些常见的插件：
- en: '| Plugin | Description |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 插件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `compiler` | This is used to compile the source code. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `compiler` | 这用于编译源代码。|'
- en: '| `jar` | This builds the `jar` file from the project. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `jar` | 这将从项目构建`jar`文件。|'
- en: '| `war` | This builds the `war` file from the project. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `war` | 这将从项目构建`war`文件。|'
- en: '| `install` | This installs the build artifact into the local repository. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `install` | 这将构建工件安装到本地仓库。|'
- en: '| `site` | This generates the site for the current project. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `site` | 这将为当前项目生成站点。|'
- en: '| `surefire` | This runs unit tests and generates reports. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `surefire` | 这将运行单元测试并生成报告。|'
- en: '| `clean` | This cleans up the target after the build. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `clean` | 这将在构建后清理目标。|'
- en: '| `javadoc` | This generates a Javadoc for the project. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `javadoc` | 这将为项目生成Javadoc。|'
- en: '| `pdf` | This generates the PDF version of the project documentation. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `pdf` | 这将为项目文档生成PDF版本。|'
- en: For more plugins, navigate to [http://maven.apache.org/plugins/](http://maven.apache.org/plugins/).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 更多插件，请访问[http://maven.apache.org/plugins/](http://maven.apache.org/plugins/)。
- en: Site generation and reporting
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点生成和报告
- en: 'Seldom are projects a single developer''s asset. A project contains stakeholders,
    and collaboration among them is essential. Often, a lack of effective documentation
    has paralyzed the project, its maintenance, and its usage. Maven with its `site`
    plugin has eased this process of having effective project documentation by generating
    a site and reports related to project. A site can be generated using the following
    command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有项目是单个开发者的资产。一个项目包含利益相关者，并且他们之间的协作是必不可少的。通常，缺乏有效的文档会使项目、其维护和其使用陷入瘫痪。Maven及其`site`插件通过生成与项目相关的站点和报告，简化了拥有有效项目文档的过程。可以使用以下命令生成站点：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The site is generated at the `target/site` directory. Maven uses the Doxia component
    (discussed in the *Maven Component Architecture* section of [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Apache Maven – Introduction and Installation"), *Apache Maven – Introduction
    and Installation*) to generate documentation. The site also contains all the configured
    reports such as the unit test coverage, PMD report, and others. We will cover
    site and report generation in more detail in the *Generating site documentation*
    section of [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven
    Project"), *Spicing Up a Maven Project*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 网站生成在`target/site`目录下。Maven 使用 Doxia 组件（在第 1 章的*Maven 组件架构*部分中讨论），*Apache Maven
    – 简介 和 安装*来生成文档。网站还包含所有配置的报告，如单元测试覆盖率、PMD 报告等。我们将在第 5 章的*生成网站文档*部分中更详细地介绍网站和报告的生成，*Spicing
    Up a Maven Project*。
- en: Creating a Maven project
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Maven 项目
- en: 'm2eclipse makes the creation of Maven projects simple. Maven projects can be
    created in the following two ways:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: m2eclipse 使创建 Maven 项目变得简单。Maven 项目可以通过以下两种方式创建：
- en: Using an archetype
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原型
- en: Without using an archetype
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用原型
- en: Now, we will discuss how to go about creating projects using these methods.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论如何使用这些方法创建项目。
- en: Using an archetype
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原型
- en: An archetype is a plugin that allows a user to create Maven projects using a
    defined template known as archetype. There are different archetypes for different
    types of projects.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 原型是一个插件，允许用户使用称为原型的定义模板创建 Maven 项目。不同类型的项目有不同的原型。
- en: 'Archetypes are primarily available to create the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 原型主要用于创建以下内容：
- en: Maven plugins
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 插件
- en: Simple web applications
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的 Web 应用程序
- en: Simple projects
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单项目
- en: 'We will now see how to create a simple Hello World! project using an archetype:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到如何使用原型创建一个简单的 Hello World! 项目：
- en: Navigate to **File** | **New** and click on **Other**. The project wizard appears
    and expands the `Maven` folder. Select **Maven Project** as shown in the following
    screenshot and click on **Next**:![Using an archetype](img/00027.jpeg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **新建**并点击**其他**。项目向导出现并展开**Maven**文件夹。如图所示选择**Maven 项目**并点击**下一步**：![使用原型](img/00027.jpeg)
- en: The **New Maven Project** wizard appears. Use the default workspace and click
    on **Next** as shown in the following screenshot:![Using an archetype](img/00028.jpeg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新 Maven 项目**向导出现。使用默认的工作空间，并如图所示点击**下一步**：![使用原型](img/00028.jpeg)'
- en: The **Select an Archetype** wizard appears. This shows a list of archetypes
    available in the Maven repository. New archetypes can be added using the **Add
    Archetypes** button. For our case here, let's choose **maven-archetype-quickstart**
    as shown in the following screenshot and click on **Next**:![Using an archetype](img/00029.jpeg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择一个原型**向导出现。这显示了 Maven 仓库中可用的原型列表。可以通过**添加原型**按钮添加新的原型。在我们的案例中，让我们选择如图所示的**maven-archetype-quickstart**并点击**下一步**：![使用原型](img/00029.jpeg)'
- en: 'A wizard to specify the Maven coordinates appears. Please fill in the details
    given in the following table in the screenshot that follows the table and click
    on **Finish**:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现一个指定 Maven 坐标的向导。请在以下表格中填写截图后的详细信息，并点击**完成**：
- en: '| Field | Value |'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **组 ID** | `com.packt.mvneclipse` |'
- en: '| **Artifact Id** | `hello-project` |'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **工件 ID** | `hello-project` |'
- en: '| **Version** | Default – **0.0.1-SNAPSHOT** |'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **版本** | 默认 – **0.0.1-SNAPSHOT** |'
- en: '| **Package** | `com.packt.mvneclipse.hello` |'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **包名** | `com.packt.mvneclipse.hello` |'
- en: '![Using an archetype](img/00030.jpeg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用原型](img/00030.jpeg)'
- en: 'A sample Maven project has now been created, and it contains a Java file that
    prints **Hello World!**. The project has the following structure:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经创建了一个示例 Maven 项目，它包含一个打印**Hello World!**的 Java 文件。项目具有以下结构：
- en: '![Using an archetype](img/00031.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![使用原型](img/00031.jpeg)'
- en: Using no archetypes
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不使用原型
- en: 'You can create a Maven project without archetypes using the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下步骤不使用原型创建 Maven 项目：
- en: Navigate to **File** | **New** and click on **Other**. The project wizard appears
    and expands the `Maven` folder. Select **Maven Project** and click on **Next**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **新建**并点击**其他**。项目向导出现并展开**Maven**文件夹。选择**Maven 项目**并点击**下一步**。
- en: The **New Maven Project** wizard appears. Use the default workspace and check
    the **Skip archetype** checkbox as shown in the following screenshot and click
    on **Next**:![Using no archetypes](img/00032.jpeg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新建 Maven 项目**向导出现。使用默认工作区并勾选以下截图所示的**跳过原型**复选框，然后点击**下一步**：![使用无原型](img/00032.jpeg)'
- en: The wizard to specify the Maven coordinates appears. Please fill in the details,
    as shown in the following screenshot, and click on **Finish**:![Using no archetypes](img/00033.jpeg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现指定 Maven 坐标的向导。请填写以下截图所示的详细信息，然后点击**完成**：![使用无原型](img/00033.jpeg)
- en: A skeleton structure, as shown in the following screenshot, will be created,
    and we have customized it according to the type of application we are building:![Using
    no archetypes](img/00034.jpeg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建一个骨架结构，如以下截图所示，我们将根据我们构建的应用程序类型对其进行自定义：![使用无原型](img/00034.jpeg)
- en: Checking out a Maven project
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检出 Maven 项目
- en: 'Checking out a Maven project means checking out from the source code versioning
    system. Before we process this, we need to make sure we have the Maven connector
    installed for the corresponding SCM we plan to use. Use the following steps to
    check out a Maven project:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 检出 Maven 项目意味着从源代码版本控制系统检出。在我们处理之前，我们需要确保我们已安装了计划使用的相应 SCM 的 Maven 连接器。使用以下步骤检出
    Maven 项目：
- en: Navigate to **Eclipse** | **Preferences** in Mac, else **Windows** | **Preference
    search** in other OS, and search for `Maven`, expand it, and click on **Discovery**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac 上导航到**Eclipse** | **首选项**，在其他操作系统上则导航到**Windows** | **首选项搜索**，并搜索`Maven`，展开它，然后点击**发现**。
- en: Then, click on **Open Catalog**. This lists all the m2connectors available in
    the marketplace. In our case, we are going to use SVN, so choose **m2-Subversive**,
    as shown in the following screenshot, and click on **Finish**. In the screens
    to follow, click on **Next**, accept the license, and finally click on **Finish**
    to install it. Similarly, we can choose any connector we intend to use for SCM.![Checking
    out a Maven project](img/00035.jpeg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**打开目录**。这列出了市场上所有可用的 m2connectors。在我们的例子中，我们将使用 SVN，因此选择**m2-Subversive**，如以下截图所示，然后点击**完成**。在接下来的屏幕上，点击**下一步**，接受许可协议，最后点击**完成**以安装它。同样，我们可以选择我们打算用于
    SCM 的任何连接器。![检出 Maven 项目](img/00035.jpeg)
- en: Like how you create projects, navigate to **File** | **New** and click on **Other**.
    The project wizard appears. Expand the Maven folder. Click on **Checkout Maven
    Projects from SCM** and click on **Next**.![Checking out a Maven project](img/00036.jpeg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像创建项目一样，导航到**文件** | **新建**，然后点击**其他**。出现项目向导。展开 Maven 文件夹。点击**从 SCM 检出 Maven
    项目**，然后点击**下一步**。![检出 Maven 项目](img/00036.jpeg)
- en: In the next screen, choose the SCM connector **SVN** and provide the corresponding
    SVN URL, as shown in the following screenshot, and click on **Finish**. If you
    click on **Next**, it will show the repository structure.![Checking out a Maven
    project](img/00037.jpeg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择 SCM 连接器**SVN**并提供相应的 SVN URL，如以下截图所示，然后点击**完成**。如果您点击**下一步**，它将显示仓库结构。![检出
    Maven 项目](img/00037.jpeg)
- en: Importing a Maven project
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 Maven 项目
- en: 'Importing a Maven project is like importing any other Java project. The steps
    to import a Maven project are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Maven 项目就像导入任何其他 Java 项目一样。导入 Maven 项目的步骤如下：
- en: From the **File** menu, click on **Import**. Choose `Import`, a source window
    appears, expand `Maven` and click on **Existing Maven Projects** as shown in the
    following screenshot:![Importing a Maven project](img/00038.jpeg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中，点击**导入**。选择`导入`，出现一个源窗口，展开`Maven`，然后点击**现有 Maven 项目**，如以下截图所示：![导入
    Maven 项目](img/00038.jpeg)
- en: In the next wizard, we have to choose the Maven project's location. Navigate
    to the corresponding location using the **Browse...** button, and click on **Finish**
    to finish the import as shown in the following screenshot; the project will be
    imported in the workspace:![Importing a Maven project](img/00039.jpeg)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个向导中，我们必须选择 Maven 项目的位置。使用**浏览...**按钮导航到相应的位置，然后点击**完成**以完成导入，如以下截图所示；项目将被导入到工作区：![导入
    Maven 项目](img/00039.jpeg)
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Congratulations! In this chapter, you got acquainted with the Maven project
    structure, the POM file, other essential concepts of the Maven realm, and finally
    you ended up learning how to create and import Maven projects. For more information,
    you can refer to *Maven: The Complete Reference* by Tim O''Brien, published by
    Sonatype, Inc., and the Apache Maven site. In the next chapter, we will look at
    the build cycle and you will learn how to run Maven projects.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '恭喜！在本章中，你了解了 Maven 项目的结构、POM 文件、Maven 领域的其他基本概念，最后你学习了如何创建和导入 Maven 项目。如需更多信息，你可以参考
    Tim O''Brien 所著的 *Maven: The Complete Reference*，由 Sonatype, Inc. 出版，以及 Apache
    Maven 网站。在下一章中，我们将探讨构建周期，你将学习如何运行 Maven 项目。'
