- en: Chapter 6. Explore Spring MVC
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章。探索Spring MVC
- en: 'Up till now we have discussed about the Spring framework to handle, initialize
    and use of the data considering console as our output. We haven''t taken any effort
    on either of its presentation or any user interaction. It seems very boring in
    today''s world to work with old style window based, very bland presentation. We
    want something much more interesting and exciting. Internet is the something which
    made the world closer than ever before as well as interesting. Today''s world
    is the world of web, so how could we be apart from it? Let''s dive into an amazing
    world of internet to explore the power of Spring with the help of following point:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了如何使用Spring框架来处理、初始化和使用数据，同时将控制台作为我们的输出。我们还没有在呈现或用户交互方面付出任何努力。在当今世界，使用老式的基于窗口的、非常单调的呈现方式工作似乎非常无聊。我们希望有更有趣、更令人兴奋的东西。互联网是使世界比以往任何时候都更加紧密和有趣的“东西”。当今的世界是网络的世界，那么我们如何能与之脱节呢？让我们深入到一个令人惊叹的互联网世界，借助以下几点来探索Spring的强大功能：
- en: Why is it necessary to learn web application development using Spring?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么有必要学习使用Spring进行网络应用程序开发？
- en: How to develop web application using Spring MVC
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring MVC开发网络应用程序？
- en: What are different components of Spring MVC?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC的不同组件有哪些？
- en: How to pre populate the form and bind the data to an object?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何预填充表单并将数据绑定到对象？
- en: We will also discuss about how to perform validations in spring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将讨论如何在Spring中执行验证。
- en: In the 1990s the world of internet opened the doors of a complete new world
    to us. It was the ocean of data which no one had seen ever before. Before internet,
    the data was only available through hard copies; mainly books and magazines. In
    early days the internet was used just to share the static data, but over the years
    the dimensions, meaning and the use of internet had changed a lot. Now a day,
    we cannot imagine the world without internet. It is simply next to impossible.
    It has become a part of our day today life and a very major source of our business
    industry as well. As a developer for us also it's very important to know about
    the web application, its development, the challenges and how to overcome that.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代，互联网为我们打开了一个完全新世界的大门。这是一个前所未有的数据海洋。在互联网之前，数据只能通过硬拷贝获得，主要是书籍和杂志。在早期，互联网只是用来分享静态数据，但随着时间的推移，互联网的维度、意义和用途发生了很大变化。如今，我们无法想象没有互联网的世界。这几乎是不可思议的。它已经成为我们日常生活中的一部分，也是我们业务行业的一个非常重要的来源。对于我们开发者来说，了解网络应用程序、其开发、挑战以及如何克服这些挑战也非常重要。
- en: In Java, the basic web application can be created using Servlet and JSP, but
    then lot many evolutions happened. These evolutions are mainly due to high demand
    of changing world in less of the time. Not only presentation, but also the overall
    web experienced has changed using HTML5, CSS, JavaScript, AJAX, Jquery and many
    similar technologies. The Servlets handle the web request and use the data from
    the request parameters to extract the data for the dynamic web applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，可以使用Servlet和JSP创建基本网络应用程序，但随后发生了许多演变。这些演变主要是由于不断变化的世界对高需求的时间紧迫。不仅是呈现方式，而且整个网络体验也因HTML5、CSS、JavaScript、AJAX、Jquery等类似技术的使用而发生了变化。Servlet处理网络请求并使用请求参数中的数据提取动态网络应用程序的数据。
- en: While using Servlets and JSPs the developers have to take lots of efforts to
    perform the data conversion and bind the data to the objects. Apart from their
    main role in performing the business logic, now they have to handle the extra
    burden of request and response presentation as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Servlet和JSP时，开发者必须付出很多努力来执行数据转换并将数据绑定到对象。除了执行业务逻辑的主要角色外，他们现在还必须处理额外的负担，即处理请求和响应呈现。
- en: The developers mainly work on the data extracted from the request in web application.
    They develop the complex, lengthier business logic based on the rules to perform
    the task. But it all will be useless if the data extracted from request parameters
    is incorrect. It's obviously not the fault of the developers but still their business
    logic suffered and there is no point in carrying out business logic with such
    data values. The developers now have to take all the care to first find out whether
    the data extracted from the request is correct or not before performing business
    logic. The developers also have to extensively involve in the presentation of
    the data to the response. To present the data first the developers needs to bind
    the data to the response and then further how to extract it on the presentation
    side.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者主要在web应用程序中处理从请求提取的数据。他们根据规则开发复杂、较长的业务逻辑来执行任务。但如果从请求参数中提取的数据不正确，这一切都是徒劳的。这显然不是开发者的错，但他们的业务逻辑仍然受到影响，使用这样的数据值进行业务逻辑是没有意义的。开发者现在需要特别注意，在执行业务逻辑之前，首先要找出从请求中提取的数据是否正确。开发者还必须
    extensively 参与数据呈现到响应中。首先，开发者需要将数据绑定到响应中，然后进一步如何在呈现方面提取它。
- en: 'Each one of the above discussed tasks adds extra bourdon on the development
    side within limited time. The Spring framework facilitates the developers for
    easy and faster development by the following features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 上述讨论的每一个任务都在有限的时间内给开发方增加了额外的负担。Spring框架通过以下特性方便开发者进行简单和快速的开发：
- en: Spring framework supports MVC architecture which gives clear separation of Model,
    View and Controller.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架支持MVC架构，实现了模型、视图和控制器的清晰分离。
- en: The framework facilitates the developers with power of beans for easy handling
    of data by binding the request parameters to the command object.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该框架通过将请求参数绑定到命令对象，为开发者提供了豆子的力量，以便轻松处理数据。
- en: It provides easy validation of request parameters performing validation either
    with Validator interface or using annotations. It can also supports customization
    of validation rules.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了对请求参数的简单验证，执行验证 either with Validator interface or using annotations. 它还可以支持自定义验证规则。
- en: It provides the annotations such as @RequestParam, @RequestHeader which facilitates
    the request data binding to the method parameters without getting involved in
    Servlet APIs.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了如@RequestParam、@RequestHeader等注解，这些注解使请求数据绑定到方法参数而不涉及Servlet API。
- en: It has support for a wide range of view templates such as JSTL, Freemarker,
    Velocity and many other.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持广泛的视图模板，如JSTL、Freemarker、Velocity等。
- en: The easy transfer of the data from Controller to the view made easy with the
    use ModelMap object.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用ModelMap对象，使数据从控制器传输到视图变得容易。
- en: It can be easily pluggable to other frameworks like Apache Struts2.0, JSF and
    many more.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以轻松地与其他框架集成，如Apache Struts2.0、JSF等。
- en: Generally, the web applications are deployed on the web Servers. Each resource
    in the application is mapped with the URL and users use these URLs to access the
    resources. The Servlet or JSP reads the data from the request object, performs
    the business logic on it and then returns the response as a result. We all are
    well aware of this general flow takes places in any web application. In this flow
    the first and for most concern is that these web applications don't have any Servlet
    or controller who manages the flow of entire application. Yes, the first attainder
    to the application is absent. The entire application and its flow has to be maintained
    by the development side. This is where the major different in between Servlets
    and Spring lies.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，web应用程序部署在web服务器上。应用程序中的每个资源都与URL映射，用户使用这些URL来访问资源。Servlet或JSP从请求对象中读取数据，对其执行业务逻辑，然后将响应作为结果返回。我们都知道，在任何web应用程序中，都会发生这种一般的流程。在这个流程中，最重要的是这些web应用程序没有任何Servlet或控制器来管理整个应用程序的流程。是的，第一个到达者缺席了。整个应用程序及其流程必须由开发方维护。这就是Servlet和Spring之间的主要区别所在。
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '****'
- en: 'The Spring framework works on MVC design pattern, it provides a Front controller
    which handles or attains each request hitting to the application. The following
    figure shows how the Spring MVC handles the request and all the components are
    part of Spring MVC:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架采用MVC设计模式，提供了一个前端控制器，处理或获取应用程序接收到的每个请求。以下图表显示了Spring MVC如何处理请求以及所有组件都是Spring
    MVC的一部分：
- en: '![](img/image_06_001.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_001.jpg)'
- en: 'The following steps gives us the orientation of the flow of the Spring MVC
    web application:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤为我们提供了Spring MVC网络应用程序流程的方向：
- en: Each incoming request will first hit the Front Controller which is the heart
    of the application. The Front Controller dispatches the request to the handlers
    and allows the developers to use different features of the framework.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个传入请求首先会击中应用程序的心脏——前端控制器。前端控制器将请求分发到处理器，并允许开发者使用框架的不同功能。
- en: The Front Controller has its own WebApplicationContext which has been inherited
    from the root WebApplicationContext. The beans configured in the root application
    can be accessed and shared between the context and the Servlet instance of the
    application. As applicable to all the Servlets the Front Controller gets initialized
    on the first request.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端控制器有自己的WebApplicationContext，它是从根WebApplicationContext继承而来的。根上下文配置的bean可以在应用的上下文和Servlet实例之间访问和共享。类似于所有Servlet，前端控制器在第一次请求时进行初始化。
- en: Once the Front Controller is initialized, it looks further for a XML file named
    as servlet_name -servlet.xml under the WEB-INF folder. It contains the MVC specific
    components.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦前端控制器初始化完成，它会寻找位于WEB-INF文件夹下名为`servlet_name-servlet.xml`的XML文件。该文件包含了MVC特定的组件。
- en: This configuration file is by default named as XXX-servlet.xml under WEB-INF
    folder. This file contains the mapping information of the URL to the controllers
    which can handle the incoming request. Before Spring 2.5 the mapping was must
    for discovery of the handlers, which now we don't need. We now can directly use
    the annotation based controllers.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个配置文件默认命名为`XXX-servlet.xml`，位于WEB-INF文件夹下。这个文件包含了URL到可以处理传入请求的控制器的映射信息。在Spring
    2.5之前，映射是发现处理器的必须步骤，现在我们不再需要。我们现在可以直接使用基于注解的控制器。
- en: The RequestMappingHandlerMapping searches all the controllers to look for @RequestMapping
    annotation under @Controller. These handlers can be used to customize the way
    URLs are searched by customizing the properties like interceptor, defaultHandler,
    order, alwaysUseFullPath, urlDecode.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RequestMappingHandlerMapping`会搜索所有控制器，查找带有`@RequestMapping`注解的@Controller。这些处理器可以用来自定义URL的搜索方式，通过自定义拦截器、默认处理器、顺序、总是使用完整路径、URL解码等属性。'
- en: After scanning all the user defined Controllers the appropriate controller based
    on URL mapping will be chosen and appropriate method will be invoked. The method
    selection took place based on the URL mapping and the HTTP method which it supported.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在扫描所有用户定义的控制器之后，会根据URL映射选择合适的控制器并调用相应的方法。方法的选择是基于URL映射和它支持的HTTP方法进行的。
- en: On execution of business logic written in the controller method, now it's time
    to generate the response. This is different than our usual HTTPResponse as it
    won't be served to the user directly. Instead the response will be sent to the
    Front Controller. Here the response contains the logical name of the view, the
    logic name of the model data and the actual data to bind. Usually instance of
    the ModelAndView is returned to the FrontController.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行控制器方法中编写的业务逻辑后，现在是生成响应的时候了。这与我们通常的HTTPResponse不同，它不会直接提供给用户。相反，响应将被发送到前端控制器。在这里，响应包含视图的逻辑名称、模型数据的逻辑名称和实际的数据绑定。通常，`ModelAndView`实例会被返回给前端控制器。
- en: The logical view name is with Front Controller, but it doesn't give any information
    about the actual view page to return to the user. The bean for ViewResolver configured
    in the XXX-servlet.xml file will be the mediator to map view name to the actual
    page. There is a wide range of view resolvers supported by the framework, we will
    discuss them shortly.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑视图名在前端控制器中，但它不提供有关实际视图页面的任何信息。在`XXX-servlet.xml`文件中配置的`ViewResolver`bean将作为中介，将视图名称映射到实际页面。框架支持广泛的视图解析器，我们将在稍后讨论它们。
- en: The ViewResolver helped to get the actual view which Front Controller can returned
    as a response. The FrontController will render it by extracting the values from
    the bounded model data and will return it to the user.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图解析器帮助获取前端控制器可以作为响应返回的实际视图。前端控制器通过从绑定的模型数据中提取值来渲染它，然后将其返回给用户。
- en: In the flow discussion we have used many names as Front Contrller, ModelAndView,
    ViewResolver, ModelMap etc. Let's discuss them classes in depth.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论的流程中，我们使用了诸如前端控制器、ModelAndView、ViewResolver、ModelMap等许多名称。让我们深入讨论这些类。
- en: DispatcherServlet
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分发器Servlet
- en: The DispacherServlet acts as the Front Controller in Spring MVC applications
    where first off all each incoming request will hit. It is basically used to handle
    the HTTP requests as it has been inherited from HTTPServlet. It delegates the
    request to the controllers, resolves which view to send back as response. The
    following configuration shows the Dispatcher mapping in the web.xml (deployment
    descriptor),
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`DispacherServlet`在Spring MVC应用程序中充当前端控制器，首先接收每个传入请求。它基本上用于处理HTTP请求，因为它从`HTTPServlet`继承而来。它将请求委托给控制器，解决要作为响应返回的视图。以下配置显示了在`web.xml`（部署描述符）中的调度器映射：'
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above configuration state all the request with *.htm as URL pattern will
    be handled by the Servlet named 'books'.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置说明所有以`.htm`为URL模式的请求将由名为`books`的Servlet处理。
- en: Sometimes the application demands for multiple configuration files, few of them
    are in root WebApplicationContext handling beans for Database and few in Servlet
    application context containing beans defined to be used in controllers. The following
    configuration can be used to initialize beans from multiple WebApplicationContexts.
    The following configuration can be used to load multiple configuration files from
    the context as,
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时应用程序需要多个配置文件，其中一些位于根`WebApplicationContext`中，处理数据库的bean，一些位于Servlet应用程序上下文中，包含在控制器中使用的bean。以下配置可用于初始化来自多个`WebApplicationContext`的bean。以下配置可用于从上下文中加载多个配置文件，例如：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Controller
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The Spring controllers handles the request for carrying out the business logic,
    these controllers can also be referred as ''handlers''and their methods as handler
    methods. The Spring provides AbstarctUrlViewController, ParameterizableViewContoller,
    ServletForwardingConroller, ServletWrappingControllerBefore as controllers. One
    of these controllers needs to be subclasssed to customize the controller in Spring
    2.5 based web application. But now, Spring supports annotation driven controllers
    by @Controller annotation. The following configuration enables the annotation
    based controllers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Spring控制器用于处理执行业务逻辑的请求，这些控制器也可以被称为'处理器'，其方法称为处理器方法。Spring提供了`AbstarctUrlViewController`、`ParameterizableViewContoller`、`ServletForwardingConroller`、`ServletWrappingControllerBefore`作为控制器。在Spring
    2.5基于web的应用程序中，需要对这些控制器进行子类化以自定义控制器。但现在，Spring通过`@Controller`注解支持注解驱动的控制器。以下配置启用了基于注解的控制器：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The annotation based controllers need to be discovered to execute the handler
    method. The following configuration provides information to the framework about
    which packages to scan to discover the controllers:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 需要发现基于注解的控制器以执行处理器方法。以下配置提供了关于框架应扫描哪些包以发现控制器的信息：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The @RequestMapping annotation is used to annotate either a class or a method
    for the declaration of specific URL which it can handle. Sometimes more than one
    method can be annotated for the same value of the URL which supports different
    HTTP methods. The 'method=RequestMethod.GET' attribute of the @RequestMapping
    is used to specify which HTTP method will be handled by the method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestMapping`注解用于标注类或方法，以声明它能处理的特定URL。有时同一个URL可以注解多个方法，这些方法支持不同的HTTP方法。`@RequestMapping`的''method=RequestMethod.GET''属性用于指定哪个HTTP方法将由该方法处理。'
- en: ModelAndView
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ModelAndView`'
- en: 'The ModelAndView plays vital role for response generation. The instance of
    the ModelAndView facilitates bounding of model data to its logical name, logical
    view name. The object which holds the data to be used in view is generally referred
    as model data. The following snippet makes clear how binding happens:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModelAndView`在生成响应中扮演着重要角色。`ModelAndView`实例使得可以将模型数据绑定到其逻辑名称、逻辑视图名称。在视图中使用的数据对象通常称为模型数据。以下代码段清楚地说明了绑定是如何发生的：'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can even use the following snippet code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用以下代码段：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ModelMap
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ModelMap`'
- en: The ModelMap interface is the subclass of LinkedHashMap used in building of
    the model data using key and value pair. It has addAttribute() method providing
    the binding of model and logical name of the model. The attribute set in ModelMap
    can be used by the views for form data binding on form submission. We will discuss
    this in depth shortly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModelMap`接口是`LinkedHashMap`的子类，在构建使用键值对的模型数据时使用。它有`addAttribute()`方法，提供模型和模型逻辑名称的绑定。在`ModelMap`中设置的属性可以在表单提交时由视图用于表单数据绑定。我们稍后会深入讨论这一点。'
- en: ViewResolver
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图解析器
- en: The logical view name and other details returned by the user defined controller
    to the Front Controller. The view name is a String which needs to be resolved
    by ViewResolver.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的控制器返回的逻辑视图名称和其他详细信息。视图名称是一个需要由 ViewResolver 解析的字符串。
- en: 'Following are few ViewResolvers which can be used to render the view:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以用于渲染视图的 ViewResolvers：
- en: '**XmlViewResolver**: The XmlViewResolver helps in viewing the file written
    in XML. It uses the default configuration from WEB-INF/views.xml which contains
    the view beans having the same DTD as that of Spring beans configuration file
    has. The configuration can be written as shown below:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XmlViewResolver**：XmlViewResolver 用于查看编写为 XML 的文件。它使用位于 WEB-INF/views.xml
    的默认配置，该配置文件包含与 Spring beans 配置文件相同的 DTD 的视图 bean。配置可以如下所示编写：'
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The logical view name '`myHome`' is mapped to the actual view '`WEB-INF/jsp/home.jsp`'.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑视图名 '`myHome`' 被映射到实际的视图 '`WEB-INF/jsp/home.jsp`'。
- en: 'One bean can also be referred the view mapped for some other bean as:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 bean 也可以引用映射到另一个 bean 的视图，如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The '`logout`' bean is not mapped for any actual view file, but it is using
    the bean '`myHome'` to give the actual view file.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''logout''` bean 没有映射到任何实际的视图文件，但它使用 ''`myHome''` bean 来提供实际的视图文件。'
- en: '**UrlBasedViewResolver:** It gives the direct mapping of the URL''s to the
    logical view name. It will be preferred where the logical names match to the view
    resource. It has prefix and suffix as its properties helps in getting the actual
    view names with its location. The class is unable to resolve the views which are
    based on the current locale. To enable URLBasedViewResolver the following configuration
    can be written as:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UrlBasedViewResolver:** 它将 URL 直接映射到逻辑视图名称。当逻辑名称与视图资源相匹配时，它将被优先考虑。它的前缀和后缀作为其属性，有助于获取带有其位置的实际视图名称。该类无法解析基于当前区域设置的视图。为了启用
    URLBasedViewResolver，可以编写以下配置：'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `JstlView` is used to render the view page. The page name and location is
    our case is 'prefix+ view_name_from_controller+suffix'.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JstlView` 用于渲染视图页面。在我们的案例中，页面名称和位置是 ''prefix+ view_name_from_controller+suffix''。'
- en: '**InternalResourceViewResolver:** The InternalResourceViewresolver is subclass
    of UrlBasedViewResolver used to resolve the internal resource which can serve
    as views using properties like prefix and suffix similar to its parent class.
    AlwaysInclude, ExposeContextBeansAsAttributes, ExposedContextBeanNames are few
    extra properties of the class adding advantage of using it more frequently than
    its parent class. The following configuration is similar to the way we configure
    UrlBasedViewResolver in previous example:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InternalResourceViewResolver:** InternalResourceViewresolver 是 UrlBasedViewResolver
    的子类，用于解析内部资源，这些资源可以作为视图使用，类似于其父类的前缀和后缀属性。AlwaysInclude、ExposeContextBeansAsAttributes、ExposedContextBeanNames
    是该类的几个额外属性，使其比父类更频繁地使用。以下配置与之前示例中配置 UrlBasedViewResolver 的方式类似：'
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It can verify the existence of the page only when it lands to it and not before
    that.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它只能在到达页面时验证页面的存在，在此之前不会进行验证。
- en: '**ResourceBundleViewResolver:** The ResourceBundleViewResolver uses the definition
    from the ResourceBundle specified in the configuration. The default file is used
    to define the configuration is views.properties. The configuration will be as,'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ResourceBundleViewResolver:** ResourceBundleViewResolver 使用配置中指定的 ResourceBundle
    的定义。默认文件用于定义配置的是 views.properties。配置将如下所示：'
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The view.properties will specify the details of the View class to be used and
    the url mapping to the actual view as follows:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图.properties 将指定要使用的视图类的详细信息以及实际视图的 URL 映射，如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following line states the mapping of view named homepage:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下面的行指定了名为 homepage 的视图的映射：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**TilesViewResolver:** Tiles framework is used to define layout templates of
    the pages which can be reused keep consistent look and feel of the application.
    The page definitions defined in ''tiles.def'' file as tile, header, footer, menus
    which will assembled in the page as runtime. The logical name returned by the
    controller matches the name of the tiles template which will be rendered by the
    view resolver.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TilesViewResolver:** Tiles 框架用于定义可以重用并保持应用程序一致的外观和感觉的页面布局模板。在 ''tiles.def''
    文件中定义的页面定义作为 tile、header、footer、menus，在运行时组装到页面中。控制器返回的逻辑名称与视图解析器将渲染的 tiles 模板名称匹配。'
- en: Apart from the above discussed view resolvers Spring also has FreeMarkerViewResolver,
    TileViewResolver, VelocityLayoutViewResolver, VelocityViewResolver, XsltViewResolver.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上面讨论的视图解析器之外，Spring 还具有 FreeMarkerViewResolver、TileViewResolver、VelocityLayoutViewResolver、VelocityViewResolver、XsltViewResolver。
- en: Before continuing the discussion ahead let's first develop a sample demo to
    understand the flow of the application in detail which gives the orientation of
    the above discussion with the help of following steps,
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续讨论之前，让我们首先开发一个示例演示，以详细了解应用程序的流程，并通过以下步骤了解上述讨论的方向：
- en: Create Ch06_Demo_SpringMVC as a dynamic web application.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Ch06_Demo_SpringMVC的动态网页应用程序。
- en: 'Copy the jars for spring-core, spring-context, commons-logging, spring-web
    and spring-webmvc as shown in the below project outline:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下项目结构复制spring-core、spring-context、commons-logging、spring-web和spring-webmvc的jar文件：
- en: '![](img/image_06_002.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_002.png)'
- en: Create index.jsp in **`WebContent`** folder which works as the home page. The
    name can be customized as per your requirement the way we do in any Servlet application.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**`WebContent`**文件夹中创建index.jsp，作为主页。可以根据你的需求自定义名称，就像我们在任何Servlet应用程序中所做的那样。
- en: 'Add a link in `index.jsp` which gives navigation to the controller as shown
    below:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.jsp`中添加一个链接，该链接提供导航到控制器，如下所示：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Whenever the user clicks the link the request will be generated having URL 'welcomeCointroller.htm',
    it will be attended by the Front Controller.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当用户点击链接时，系统会生成一个带有'welcomeCointroller.htm' URL的请求，该请求将由前端控制器处理。
- en: 'It''s time to configure the Front Controller in `web.xml` as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候在`web.xml`中配置前端控制器了：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The information to find and invoke the methods of the Controllers the Front
    controller will look for the file having name as `servlet_name-servlet.xml` in
    WEB-INF. In our case '`books'` is the name of the Servlet. So let's create file
    with name '`books-servlet.xml`' under WEB-INF folder.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端控制器查找WEB-INF中名为`servlet_name-servlet.xml`的文件来查找和调用控制器的的方法。在我们的案例中，Servlet的名称是'`books`'。所以让我们在WEB-INF文件夹下创建一个名为'`books-servlet.xml`'的文件。
- en: 'The file should have configuration for which package Spring container will
    be scanning to find the Controllers. The configurations will be as shown below:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该文件应包含Spring容器将扫描以查找控制器的包的配置。配置将如下所示：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The above configuration says all the controllers will be scanned from '`com.packt`
    ' package.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置说明将扫描'`com.packt`'包中的所有控制器。
- en: Create a class `MyMVCController` in the package com.packt.ch06.controllers.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在com.packt.ch06.controllers包中创建一个`MyMVCController`类。
- en: Annotate the class by `@Controller`. Annotating the class facilitates it to
    use the feature of handling the request.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`@Controller`注解类。注解类使其能够使用处理请求的功能。
- en: 'Let''s add `welome()` method to handle the request by annotating it with `@RequestMapping`
    as shown below:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过如下所示的`@RequestMapping`注解添加`welome()`方法来处理请求：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The controllers can have multiple methods, which will be invoked as per the
    URL mapping. Here we are declaring the method which will be invoked for the '`welcomeController.htm'`URL.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器可以有多个方法，这些方法将根据URL映射被调用。在这里，我们声明了将被`welcomeController.htm'` URL调用的方法。
- en: The method performs the business logic of generating the welcome message and
    generates the response with the help of `ModelAndView` as shown below,
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通过`ModelAndView`生成欢迎信息并生成响应，如下所示：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternative to the above code you can also use the code shown below:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以上代码的替代方案，你可以使用如下代码：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can have multiple methods mapped to the same URL supporting different HTTP
    methods as shown below:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将多个方法映射到相同的URL，支持不同的HTTP方法，如下所示：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Configure the bean for ViewResolver in `books-servlet.xml` as shown below:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下所示，在`books-servlet.xml`中配置`ViewResolver` bean：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The ViewResolver helps the Front Controller to get the actual view name and
    the location. The response page which Font Controller returns to the browser in
    our case it will be:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewResolver`帮助前端控制器获取实际的视图名称和位置。在前端控制器返回给浏览器的响应页面中，在我们的案例中将是：'
- en: '![](img/image_06_003.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_003.png)'
- en: Create a folder named jsps' in WebContent.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WebContent中创建一个名为jsps的文件夹。
- en: 'Create a welcome.jsp page in the jsps folder, which will display the welcome
    message using Expression Language as:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在jsps文件夹中创建一个welcome.jsp页面，使用表达式语言显示欢迎信息：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The attribute '`message'` is used in EL as it's the logical model name used
    by us in the controller method bounded to the object of `ModelAndView`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在EL中使用属性'`message'`，因为这是我们控制器方法中用于`ModelAndView`对象逻辑模型名称。
- en: 'Configure the tomcat server and run the application. The link will be shown
    on the browser. Clicking on the link we will get the output as shown the screen
    shot below:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好tomcat服务器并运行应用程序。在浏览器中将显示链接。点击链接我们将看到如下截图的输出：
- en: '![](img/image_06_004.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_004.png)'
- en: 'The demo introduced us to the Spring MVC flow. Let''s now develop the book
    application step by step covering the following cases:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该演示向我们介绍了Spring MVC流程。现在让我们逐步开发书籍应用程序，涵盖以下案例：
- en: Reading the request parameters
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取请求参数
- en: Handling Form Submission
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理表单提交
- en: 'Case1: Reading request parameters'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 案例1：读取请求参数
- en: 'Let''s start with reading the request parameters with help of following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始通过以下步骤读取请求参数：
- en: Create ReadMyBooks as dynamic web application, and add all required jars to
    it as we did earlier.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建ReadMyBooks作为动态网络应用程序，并像我们之前那样添加所有必需的jar文件。
- en: Each application has home page. So, let's add index.jsp as a home page from
    the earlier application. You can copy and paste it directly.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个应用程序都有一个主页。所以，让我们将之前的应用程序中的index.jsp作为主页添加进去。您可以直接复制和粘贴。
- en: Copy images folder from the earlier application.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从之前的应用程序中复制images文件夹。
- en: Add one more link to search book on author's name as shown below,
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面所示的位置添加一个链接，用于搜索按作者姓名查找书籍，
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s add searchByAuthor.jsp page facilitating user to request for list of
    books by entering author''s name as shown below:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个名为searchByAuthor.jsp的页面，使用户可以输入作者姓名来请求书籍列表，如下所示：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Add the configuration for DispachetServlet as front controller in web.xml as
    we did earlier. Name the servlet as 'books'.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们之前所做的那样，在web.xml中为DispachetServlet作为前端控制器添加配置，并将servlet命名为'books'。
- en: Create or copy books -servlet.xml for configuring handler mapping and other
    web component mappings from earlier application.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建或复制books-servlet.xml，用于从早期应用程序配置处理映射和其他网络组件映射。
- en: Add the configuration for scanning the controllers using 'context' namespace.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用'context'命名空间添加扫描控制器的配置。
- en: 'We need Book bean to handle data to and fro the controller. So, before developing
    controllers code add Book.java to com.packt.ch06.beans package from our earlier
    applications having the data members as shown below:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要Book bean来处理数据往返于控制器。因此，在开发控制器代码之前，请将Book.java添加到我们之前应用的com.packt.ch06.beans包中，数据成员如下所示：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now create a class SearchBookController as a controller in com.packt.ch06.controllers
    package and annotate it by @Controller.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在com.packt.ch06.controllers包中创建一个名为SearchBookController的类作为控制器，并用@Controller注解它。
- en: To search the books, add method named searchBookByAuthor() and annotate it by
    @RequestMapping for the URL 'searchBooks.htm'. We can either use the Servlet API
    or Spring API, but we will use Spring APIs here.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了搜索书籍，需要添加一个名为searchBookByAuthor()的方法，并用@RequestMapping注解为'searchBooks.htm'的URL。我们可以使用Servlet
    API或Spring API，但在这里我们将使用Spring API。
- en: 'Let''s now add the code to `searchBookByAuthor()` for:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们为`searchBookByAuthor()`添加以下代码：
- en: '* Reading request parameters'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读请求参数
- en: '* Search list of books'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索书籍列表
- en: Creating instance of ModelAndView to bind book list as model data, logical model
    name and logical view name together.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建ModelAndView实例以将书籍列表作为模型数据，逻辑模型名称和逻辑视图名称一起绑定。
- en: 'The code will be as shown below:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将如下所示：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `@RequestParam` is used to read a request parameter and bind it to the method
    argument. The value of the 'author' attribute is bounded to author_name argument
    without exposing servlet APIs.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestParam`用于读取请求参数并将它绑定到方法参数。''author''属性的值被绑定到author_name参数，而不会暴露servlet
    API。'
- en: Here, we have added a dummy list. Later on it can be replaced by the actual
    code to get the data from persistency layer.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个虚拟列表。稍后，可以将其替换为从持久层获取数据的实际代码。
- en: It's time to configure ViewResolver and package scanning in books -servlet.xml
    as we did in earlier application. We can copy paste books-sevlet.xml in WEB-INF
    from earlier application.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候在books-servlet.xml中配置视图解析器和包扫描，就像我们之前在早期应用程序中做的那样。我们可以将books-servlet.xml从早期应用程序的WEB-INF中复制粘贴过来。
- en: Create jsps folder under WebContent which will contain the jsp pages.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WebContent下创建jsps文件夹，该文件夹将包含jsp页面。
- en: 'Create display.jsp in jsps folder to display the list of book using JSTL tag
    as shown below:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在jsps文件夹中创建display.jsp，使用JSTL标签显示书籍列表，如下所示：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If the list doesn't have elements, there is no point to display such list. jstl:if
    tag is used to take the decision whether to display the list or not and jstl:forEach
    is used to display the book information by iterating over the list.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表没有元素，就没有显示该列表的必要。jstl:if标签用于决定是否显示列表，而jstl:forEach标签用于通过迭代列表显示书籍信息。
- en: 'Run the application and click link on home page to get the form to enter author''s
    name. If the author''s name exists, on the submission of the form we will get
    list of books as shown below:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，点击主页上的链接以加载表单以输入作者名称。如果作者名称存在，则在表单提交时我们将获得以下书籍列表：
- en: '![](img/image_06_005.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_005.png)'
- en: 'Here, we have used `@RequestParam` to bind the individual request parameters
    to the method arguments. But, if in case name of the request parameters are matching
    to the name of method arguments, no need to use the annotation. The update code
    can be written as shown below:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用了`@RequestParam`将个别请求参数绑定到方法参数。但是，如果请求参数的名称与方法参数的名称匹配，则无需使用注解。更新后的代码可以如下所示：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Reading individual request parameters one by one and then to bind them to the
    object of bean becomes clumsy and unnecessarily lengthy. A better option has been
    provided by the framework by handling 'form backing object'.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 逐一读取个别请求参数，然后将它们绑定到bean对象，变得繁琐而不必要冗长。框架通过处理“表单后盾对象”提供了更好的选项。
- en: 'Case 2: Handling Form submission'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 情况2：处理表单提交
- en: 'The form submission is very common task in the application development. Each
    time on form submission the developer needs to perform the following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交是应用程序开发中非常常见的任务。每次表单提交时，开发者都需要执行以下步骤：
- en: Reading request parameters
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取请求参数
- en: Converting the request parameter values according to required data types
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求参数值转换为所需数据类型
- en: Setting the values to an object of the bean.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将值设置到bean对象中。
- en: 'The above steps can be bypassed to get directly an instance of the bean on
    the form submission. We will discuss the form handling in two cases as:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤可以省略，直接在表单提交时获取bean实例。我们将讨论两种情况的表单处理：
- en: Form submission
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单提交
- en: Form Preprocessing
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单预处理
- en: Form Submission
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表单提交
- en: In normal web application the form will be loaded on clicking a link by the
    user and then manually the above discussed steps will be carried out. As the process
    needs to be automated instead of displaying the form directly, it should be loaded
    from the controller which already will have an instance of a bean. On the form
    submission, the values entered by the user will be bounded to this instance. This
    instance now can be used in controller to carry out business logic. Spring 2.0
    onwards provides the set of tags which are aware data binding in form handling
    in the view making the development easy.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通的网络应用程序中，用户点击一个链接后，表单会被加载，然后手动执行上述讨论的步骤。由于需要自动化这个过程，而不是直接显示表单，因此应该从控制器加载表单，而该控制器已经有一个bean实例。在表单提交时，用户输入的值会被绑定到这个实例。现在，这个实例可以在控制器中用于执行业务逻辑。从Spring
    2.0开始，提供了一组标签，这些标签在视图中处理表单绑定，从而使开发变得容易。
- en: Let's add a form to ReadMyBooks application to understand form submission using
    Spring provided form tags. We will do this in two steps one displaying the form
    and second post processing the submitted form.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在ReadMyBooks应用程序中添加一个表单，以了解使用Spring提供的表单标签进行表单提交。我们将分两步进行，第一步显示表单，第二步处理提交的表单。
- en: Displaying the form
  id: totrans-159
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 显示表单
- en: As the form has to be loaded from the controller let's add the code using following
    steps,
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 由于表单必须从控制器加载，让我们按照以下步骤添加代码，
- en: 'Add a link on home page to get the form loaded. The code to get the form is
    as shown below:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上添加一个链接以加载表单。获取表单的代码如下所示：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Add `showBookForm()` method in `AddBookController` which will be invoked on
    clicking the link written in step1\. The method will return a form page facilitating
    use of an object of Book where entered data will be bounded. The method has the
    below code,
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddBookController`中添加`showBookForm()`方法，该方法将在步骤1中点击的链接上被调用。该方法将返回一个表单页面，使用Book对象，其中输入的数据将被绑定。该方法的代码如下，
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The method should have `ModelMap` as one of its argument to add an instance
    of bean which can be used by the views. Here we had added ''book'' attribute having
    value as an instance of book. By default the reference name will be used as an
    attribute name. The ''book'' instance can be referred as ''form backing'' object
    as well. In order to customize name of form backing object to be used in the view
    we can use the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法应该有一个`ModelMap`作为其参数之一，以添加一个bean实例，该实例可以被视图使用。在这里，我们添加了'book'属性，其值为book实例。默认情况下，引用名将被用作属性名。'book'实例也可以被称为“表单后盾”对象。为了自定义在视图中使用的表单后盾对象的名称，我们可以使用以下代码：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As the view name '`bookForm'` has been returned by the controller, add `bookForm.jsp`
    in the jsps folder which has the form to display.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为视图名称'`bookForm'`由控制器返回，所以在jsps文件夹中添加`bookForm.jsp`，该文件包含显示表单的表单。
- en: 'The values entered by the user needs to bounded to the form. Spring framework
    provides powerful tags to handle user input. To unable Spring tags we need to
    add ''taglib'' directive as shown below:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入的值需要绑定到表单。Spring框架提供了强大的标签来处理用户输入。为了使Spring标签生效，我们需要添加如下所示的'taglib'指令：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The Spring provides similar tags as that of html to handle form, input, checkbox,
    button and many more with a major difference of implicit binding of their values
    to the bean data member. The following code will allow user to enter the book
    name and on submission of form bind it to ''bookName'' data member of the Book
    bean:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring提供了与html类似的标签来处理表单、输入、复选框、按钮等，主要区别在于它们的值隐式绑定到bean数据成员。以下代码将允许用户输入书籍名称，并在表单提交时将其绑定到Book
    bean的'bookName'数据成员：
- en: '[PRE32]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The 'path' attribute maps the entered value to the bean data member. The values
    have to be specified as per the names of the data members.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '''path''属性将输入值映射到bean数据成员。值必须按照数据成员的名称指定。'
- en: 'Lets'' add the form in bookForm.jsp as shown below to facilitate user to enter
    the values of new book:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在bookForm.jsp中添加以下表单，以便用户输入新书籍的值：
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The attribute 'modelAttribute' takes the value of the logical name of the attribute
    of ModelMap set by the controller.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 属性'modelAttribute'接收由控制器设置的ModelMap逻辑属性的值。
- en: Run the application and click '**`Show Form to add new book`**'.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并点击'**`Show Form to add new book`**'。
- en: You will be navigated to the bookForm.jsp page where you can enter your own
    values. On submission, you will get 404 error as no resource has been written
    by us to handle the request. Don't worry!! In following steps we will process
    the form.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被导航到bookForm.jsp页面，在那里您可以输入自己的值。提交后，您将得到404错误，因为没有资源被我们编写来处理请求。别担心！！在接下来的步骤中我们将处理表单。
- en: Post Processing the form
  id: totrans-178
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 表单后处理
- en: 'Let''s add a method in AddController which will be invoked on form submission
    for the url ''addBook.htm'' as shown below:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在AddController中添加一个方法，该方法将在表单提交时通过url 'addBook.htm'调用，如下所示：
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: When user submits the form, the values entered by him will get bounded to the
    bean data members giving an instance of the Book bean. Annotating the 'book' argument
    by @ModelAttribute facilitates developers to use bean instance who has values
    bounded to it. Now, there is no need to read the individual parameter and further
    things to get and set an instance of Book.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交表单时，他输入的值将被绑定到bean数据成员，生成一个Book bean的实例。通过@ModelAttribute注解'book'参数使开发者可以使用绑定值的bean实例。现在，无需读取单个参数，进一步获取和设置Book实例。
- en: As we already have display.jsp page to display the books so we are just reusing
    it here. The book details entered by the user can later be added to the book table.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经有了display.jsp页面来显示书籍，所以我们在这里只是重用它。用户输入的书籍详情稍后可以添加到书籍表中。
- en: 'Run the application, click the link to get the form. Fill the form and submit
    it to get following output:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，点击链接获取表单。填写表单并提交以获得以下输出：
- en: '![](img/image_06_006.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_006.png)'
- en: The output list shows the book details but without price as in the output. The
    price is having no value simply because we haven't set them. We want the pricelist
    with some predefined values. Let's move ahead to discuss pre- processing of the
    form.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列表显示了书籍的详细信息，但没有价格，因为价格目前没有设置。我们想要一个带有预定义值的价格列表。让我们继续讨论表单的预处理。
- en: Form Pre processing
  id: totrans-186
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表单预处理
- en: In some situations the form contains few predefined values like name of countries
    or categories of book in drop drown menu, radio buttons with colors available
    to choose and many more. These values can be hard coded leading to the frequent
    change as values to show changes. Instead of using constant values, the values
    can be rendered and can be populated in the form. This generally called as form
    pre processing. The preprocessing can be done in two steps.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，表单包含一些预定义值，如国家名称或书籍类别的下拉菜单、可供选择的颜色的单选按钮等。这些值可以硬编码，导致频繁更改要显示的值。相反，可以使用常量值，值可以被渲染并在表单中填充。这通常称为表单预处理。预处理可以在两个步骤中完成。
- en: Defining the attribute with values to add in the view
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 定义要在视图中添加的属性的值
- en: 'The @ModelAttribute is used to add an instance of the model data to an instance
    of Model. Each method annotated by @ModelAttribute will be called before any other
    method of the Controller and on its execution the model data will be added to
    Spring Model. The syntax of using the annotation is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ModelAttribute`用于将模型数据的实例添加到Model实例中。每个用@ModelAttribute注解的方法在其他Controller方法之前和执行时都会被调用，并在执行时将模型数据添加到Spring模型中。使用该注解的语法如下：'
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following code adds the ''hobbies'' attribute which can be used in the
    view:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码添加了一个名为'hobbies'的属性，该属性可在视图中使用：
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Hobby is user defined class with hobbyName and hobbyId as data members.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Hobby是一个用户定义的类，其中包含hobbyName和hobbyId作为数据成员。
- en: Populating the values of the attribute in the form
  id: totrans-194
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在表单中填充属性的值
- en: The form can display the available list of the choices to the user using checkboxes,
    drop down menus or radio buttons. The values in the view can be populated using
    List, Map or array for the values of the drop down menu, check boxes or radio
    buttons .
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 表单可以使用复选框、下拉菜单或单选按钮向用户显示可用的选项列表。视图中的值可以使用列表、映射或数组为下拉菜单、复选框或单选按钮的值。
- en: 'The general syntax of the tags is as shown below:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 标签的一般语法如下所示：
- en: '[PRE37]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following code can be used to display hobbies of the user in checkboxes
    using ''hobbies'' as modelattribute for binding the value to the hobby data member
    of the bean:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可用于使用'hobbies'作为模型属性绑定值到bean的hobby数据成员，在复选框中显示用户的爱好：
- en: '[PRE38]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the same way we can generate dropdown menu and options for the select tag
    at runtime.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以在运行时为选择标签生成下拉菜单和选项。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `itemLabel` and `itemValue` attribute can be skipped while dealing while
    handling String values.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理字符串值时，可以省略`itemLabel`和`itemValue`属性。
- en: The complete example can be referred from the application `Ch06_Form_PrePopulation`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例可以参考应用程序`Ch06_Form_PrePopulation`。
- en: 'Let''s update `ReadMyBooks` application to predefine some values of price in
    the `bookForm.jsp` using ''`ModelAttribute''` to discuss form pre- processing
    with the help of following steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`ReadMyBooks`应用程序，在`bookForm.jsp`中预定义一些价格值，并使用'`ModelAttribute`'讨论以下步骤中的表单预处理：
- en: 'As the form is retuned by the `AddController` to the Front Conotroller where
    we want to set predefined values, ass `addPrices()` method in it. Annotate the
    method by `@ModelAttribute` as shown below:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为表单是由`AddController`返回到前端控制器，我们想在其中设置预定义的值，因此在`addPrices()`方法中添加注解。如下所示使用`@ModelAttribute`注解：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The above code is creating an attribute '`pricelist'` which can be available
    to the view for use.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个名为'`pricelist`'的属性，该属性可用于视图。
- en: 'Now the `pricelist` attribute can be used in the view to display the predefined
    values. In our case it''s a form for addition of the new book, update the `bookForm.jsp`
    to display pricelist as shown below:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`pricelist`属性可以在视图中显示预定义的值。在我们这个案例中，是一个用于添加新书籍的表单，更新`bookForm.jsp`以显示如下所示的价格列表：
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the application and click the link, you can observe the predefined prices
    will appear in the drop sown list as shown below:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并点击链接，您可以观察到预定义的价格将出现在下拉列表中，如下所示：
- en: '![](img/image_06_007.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_007.png)'
- en: The users will enter values in the form and submit it.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将在表单中输入值并提交它。
- en: The values can be obtained in the handler method. But still, we can't be sure
    of only valid values will be entered and submitted. The business logic performed
    on wrong values will always fail. Also there is a chance of getting wrong data
    type values entered by the user leading to exception. Let's take an example of
    email ids. The email id always follows a particular format, if the format is wrong
    the business logic ultimately fails. Whatever may be the case, we have to be sure
    of submitting only valid values either for their data types, range or formation.
    To validate whether the correct data will be submitted or not is the process of
    'form validation'. The form validation plays key role to make sure the correct
    data submission. The form validation can be done on client side as well as server
    side. The Java Script is used to perform client side validations, but it's possible
    to disable it. In such cases server side validation is always preferable.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 值可以在处理程序方法中获取。但是，我们仍然不能确定只有有效值会被输入并提交。在错误值上执行的业务逻辑总是会失败。此外，用户可能会输入错误数据类型值，导致异常。让我们以电子邮件地址为例。电子邮件地址总是遵循特定的格式，如果格式错误，业务逻辑最终会失败。无论什么情况，我们必须确信只提交有效值，无论是它们的数据类型、范围还是形成。验证正确数据是否会被提交的过程是“表单验证”。表单验证在确保正确数据提交方面起着关键作用。表单验证可以在客户端和服务器端进行。Java
    Script用于执行客户端验证，但它可以被禁用。在这种情况下，服务器端验证总是更受欢迎。
- en: '* * *'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '****'
- en: Spring has flexible validation mechanism which can be extensible to write custom
    validators as per application requirements. Spring MVC framework by default supports
    JSR 303 specification on addition of JSR303 implementation dependencies in the
    application. The following two approaches can be used to validate the form fields
    in Spring MVC,
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Spring具有灵活的验证机制，可以根据应用程序要求扩展以编写自定义验证器。Spring MVC框架默认支持在应用程序中添加JSR303实现依赖项时的JSR
    303规范。以下两种方法可用于在Spring MVC中验证表单字段，
- en: JSR 303 specification based validation
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于JSR 303规范的验证
- en: Spring based implementation using Validator interface.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Spring的实现，使用Validator接口。
- en: Custom validator based on Spring Validator interface
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于Spring Validator接口的自定义验证器
- en: Spring provides Validator interface who has validate method where the validation
    rules will be checked. The interface not only supports validation of the web tier
    but it can also be used in any tier to validate the data. In case the validation
    rules fail, the user has to be made aware of it by showing appropriate informative
    messages. The BindingResult, a child of an Errors holds the validation result
    bounded by the Errors while performing validation on the model in validate() method.
    The bounded messages for the errors will be displayed using<form:errors> tag in
    the view to make the user aware of them.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了Validator接口，该接口有一个validate方法，在该方法中会检查验证规则。该接口不仅支持web层的验证，也可以在任何层使用以验证数据。如果验证规则失败，用户必须通过显示适当的信息性消息来了解这一点。BindingResult是Errors的子类，在执行validate()方法对模型进行验证时，它持有由Errors绑定的验证结果。错误的可绑定消息将使用<form:errors>标签在视图中显示，以使用户了解它们。
- en: 'Let''s add a custom validator in our ReadMyBooks application with the help
    of following steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤在我们的ReadMyBooks应用程序中添加一个自定义验证器：
- en: Add validation-api-1.1.0.final.api.jar file in the lib folder of the application.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的lib文件夹中添加validation-api-1.1.0.final.api.jar文件。
- en: Create BookValidator class in com.packt.ch06.validators package.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在com.packt.ch06.validators包中创建BookValidator类。
- en: The class implements org.springframework.validation.Validator interface.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类实现了org.springframework.validation.Validator接口。
- en: Override supports () method as shown in the code below,
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如代码所示，重写supports()方法，
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The support method assures the object is matching to the object being validated
    by the validate method
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 支持方法确保对象与validate方法验证的对象匹配
- en: 'Now override the validate() method where the check on the data member as per
    the rule. We will do it in three steps as:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在重写validate()方法，根据规则检查数据成员。我们将分三步进行：
- en: Set the rules for validation
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置验证规则
- en: 'We will crosscheck the following rules:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将核对以下规则：
- en: The length of book's name must be greater than 5.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书籍名称的长度必须大于5。
- en: The author's name must not be empty.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者的名字必须不为空。
- en: The description must not be empty.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述必须不为空。
- en: The description length must be of minimum 10 and maximum 40 characters.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述的长度必须至少为10个字符，最多为40个字符。
- en: The ISBN should not be less than 150.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际标准书号（ISBN）不应该少于150。
- en: The price should not be less than 0.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格不应该少于0。
- en: The publication must not be empty.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出版物必须不为空。
- en: Write condition to check validation rules.
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写条件以检查验证规则。
- en: If validation fails add the message to an instance of errors using rejectValue
    () method
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果验证失败，使用`rejectValue()`方法将消息添加到`errors`实例中
- en: 'The method using the above steps can be written as shown below:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述步骤的方法可以如下所示编写：
- en: '[PRE42]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The Errors interface is used to store the binding information about the validation
    of the data. The `errors.rejectValue()` is one of the very useful method provided
    by it which registers the errors for an object along with their error messages.
    Following are the available signatures of rejectValue() method from Error interface,
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`Errors`接口用于存储有关数据验证的绑定信息。`errors.rejectValue()`是它提供的一个非常有用的方法，它为对象及其错误消息注册错误。以下是来自`Error`接口的`rejectValue()`方法的可用签名，'
- en: '[PRE43]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add a data member of type org.springframework.validation.Validator in AddBookController
    and annotate it by `@Autowired` as shown below:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddBookController`中添加一个类型为`org.springframework.validation.Validator`的数据成员，并用`@Autowired`注解进行注释，如下所示：
- en: '[PRE44]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Update the `addBook()` method of `AddController` to invoke validate method
    and check whether validation error occurred or not . The updated code is as shown
    below:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`AddController`的`addBook()`方法以调用验证方法并检查是否发生了验证错误。更新后的代码如下所示：
- en: '[PRE45]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The method signature of `addBook ()` should have BindingResult as one of its
    argument. The instance of BindingResult has the list of errors which has occurred
    while performing the validation. The `hasErrors()` method returns true if validation
    has failed on the data members. If `hasErrors()` returns true, we are returning
    the '`bookForm'` view facilitating user to enter the correct values. In case of
    no validation violation the 'display' view will be returned to the Front Controller.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`addBook()`方法的签名应该有一个`BindingResult`作为其参数之一。`BindingResult`实例包含在执行验证时发生错误的消息列表。`hasErrors()`方法在数据成员上验证失败时返回true。如果`hasErrors()`返回true，我们将返回''`bookForm`''视图，使用户可以输入正确的值。在没有验证违规的情况下，将''display''视图返回给前端控制器。'
- en: 'Register the `BookValdator` as a bean in books-servlet.xml as shown below:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`books-servlet.xml`中如下所示注册`BookValdator`作为bean：
- en: '[PRE46]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can also use `@Component` instead of the above configuration.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`@Component`代替上述配置。
- en: 'The Validation violation messages have to be shown to the user by updating
    the bookForm.jsp as shown in code below:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过更新`bookForm.jsp`，如下的代码所示，显示验证违规消息给用户：
- en: '[PRE47]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Only the underline code has to be added in the bookForm.jsp to show the message
    in Red color.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在`bookForm.jsp`中添加下划线代码，以将消息显示为红色。
- en: 'The <form:errors> is used to display the messages if validation failed. It
    takes the below shown syntax:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`<form:errors>`用于显示验证失败时的消息。它采用以下所示的语法：'
- en: '[PRE48]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Update the bookForm.jsp for all the inputs by specifying name of data members
    as value for path attribute.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为所有输入指定数据成员的名称作为路径属性的值来更新`bookForm.jsp`。
- en: Run the application. Click on the link Show form to add new Book.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。点击添加新书籍的“显示表单”链接。
- en: 'Without entering any data in the text fields submit the form. We will get the
    form displaying the messages which denotes which validation rules has been violated
    as below:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不输入任何文本字段中的数据提交表单。我们将得到显示违反哪些验证规则的消息的表单，如下所示：
- en: '![](img/image_06_008.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_008.png)'
- en: The code written for validation above though is working fine, we are not taking
    complete advantage of Spring framework. The invocation of the validate method
    is explicit as the framework is not aware to carry out validation implicitly.
    The @Valid annotation provides information to the framework to perform validation
    implicitly using custom validators. The framework facilitates binding of the custom
    validator to WebDataBinder giving awareness to framework to use the validate()
    method.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 上述用于验证的代码虽然可以正常工作，但我们没有充分利用Spring框架。调用验证方法是显式的，因为框架不知道隐式地执行验证。`@Valid`注解向框架提供了使用自定义验证器隐式执行验证的信息。框架支持将自定义验证器绑定到WebDataBinder，使框架知道使用`validate()`方法。
- en: Using @InitBinder and @Valid for validation
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用@InitBinder和@Valid进行验证
- en: 'Let''s update the code of AddController.java step by step as shown below:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步更新`AddController.java`的代码，如下所示：
- en: 'Add a method to bind validator to WebDataBinder and annotate it by `@InitBinder`
    as shown below:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddBookController`中添加一个方法来将验证器绑定到`WebDataBinder`，并用`@InitBinder`注解进行注释，如下所示：
- en: '[PRE49]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`@InitBinder` annotation helps in identifying the methods which performs the
    WebDataBinder initialization.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`@InitBinder`注解有助于识别执行WebDataBinder初始化的方法。'
- en: To enable the annotations to be considered by framework the book-servelt.xml
    has to be updates as,
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使框架考虑注解，book-servelt.xml必须更新如下：
- en: 'Add mvc namespace as shown in the configuration below:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加mvc命名空间，如下所示：
- en: '[PRE50]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You can only copy the underlined statements in your existing code.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能复制现有代码中下划线的声明。
- en: 'Add the configuration as shown below:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加如下所示的配置：
- en: '[PRE51]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Update the `addBook()` method to add `@Valid` annotation to perfom Book validation
    and remove the validator.validate() invocation as it will be executed implicitly.
    The updated code is as shown in the below:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`addBook()`方法以添加`@Valid`注解执行书籍验证并删除`validator.validate()`调用，因为它将隐式执行。更新后的代码如下所示：
- en: '[PRE52]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Run the application to get the similar result when you submit blank form.The
    messages will be displayed in the view has been hard coded in the `rejectValue()`
    method. The framework provides a support for externalizing the messages in the
    properties file. Let's update the validator for externalizing messages.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，当你提交空白表单时，你会得到类似的结果。消息将在`rejectValue()`方法中硬编码的视图中显示。框架提供了对属性文件中外部化消息的支持。让我们更新用于外部化消息的验证器。
- en: Externalizing the messages
  id: totrans-275
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 外部化消息
- en: 'We will use the externalization of the messages without changing the logic
    of validation with the help of following steps:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下步骤的外部化消息，而不改变验证逻辑：
- en: Add a new class BookValidator1 in com.packt.ch06.validators package implementing
    Validator interface.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在com.packt.ch06.validators包中添加一个新类BookValidator1，实现Validator接口。
- en: Override the supports method as did in earlier application.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像早期应用程序一样覆盖supports方法。
- en: 'Override the validate method where we are not providing the default error messages.
    We will only provide name of the bean property and error code associated with
    it as shown below:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖我们没有提供默认错误消息的validate方法。我们只提供bean属性的名称和与之关联的错误代码，如下所示：
- en: '[PRE53]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Let''s add messages_book_validation.properties file in WEB-INF to map error
    code to their associated message as shown below:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在WEB-INF中添加messages_book_validation.properties文件，以映射错误代码到其相关的消息，如下所示：
- en: '[PRE54]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The syntax to write properties file to map key-value pair is,
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 编写属性文件以映射键值对的语法如下：
- en: '[PRE55]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Update the books-servlet.xml as,
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新books-servlet.xml如下：
- en: Comment the bean written for BookValidator as we are no using it
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉为BookValidator编写的bean，因为我们不再使用它
- en: 'Add a new bean for BookValidator1 as shown below:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为BookValidator1添加一个新的bean，如下所示：
- en: '[PRE56]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add a bean for MessagSource to load the messages from the properties file as:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为MessagSource添加一个bean，以从属性文件中加载消息，如下所示：
- en: '[PRE57]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: No need to change the AddController.java. Run the application, on submission
    of the blank from the messages pulled from properties file will be displayed.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无需更改AddController.java。运行应用程序，提交空白表单后，将显示从属性文件中拉取的消息。
- en: We successfully externalize the messages, Congratualtion!!!
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功外部化了消息，恭喜 !!!
- en: But don't you think the validation code is unnecessarily performing the basic
    validations here. The framework provides ValidationUtils as a utility class which
    facilitate the developers carrying out the basic validations like empty or null
    values.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是认为验证代码在这里不必要的执行基本验证吗？框架提供了ValidationUtils作为一个工具类，使开发人员能够执行基本验证，如空或null值。
- en: Using ValidationUtils
  id: totrans-294
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用ValidationUtils
- en: 'Let''s add BookValidator2 which will use ValidationUtils as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加BookValidator2，它将使用ValidationUtils如下：
- en: Add BookValidator2 as a class in com.packt.ch06.validators package which is
    implementing Validator in ReadMyBooks application.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在com.packt.ch06.validators包中添加BookValidator2作为一个类，在ReadMyBooks应用程序中实现Validator。
- en: Override supports() method as did earlier.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像以前一样覆盖supports()方法。
- en: 'Override validate() which will perform validation using ValidationUtils class
    as shown below:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖validate()，使用ValidationUtils类执行验证，如下所示：
- en: '[PRE58]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: As we are reusing the same error codes no need to add them again in the properties
    file.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们重复使用相同的错误代码，因此无需在属性文件中再次添加它们。
- en: 'Comment the bean for BookVlidator1 and add a bean for BookVlidator2 in books-servlet.xml
    as shown below:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉BookVlidator1的bean，并在books-servlet.xml中添加BookVlidator2的bean，如下所示：
- en: '[PRE59]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Execute the application and submit the blank form to get validation messages
    displayed from the properties file.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行应用程序并提交空白表单，以从属性文件中获取验证消息显示。
- en: JSR annotation based validation
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSR注解 based 验证
- en: JSR 303 is a bean specification which defines the metadata and APIs to validate
    the beans in J2EE applications. The latest in market is JSR 349 which is an extension
    of JSR 303 providing features as openness, Denepdency injection and CDI, method
    validation, group conversion, integrations with other specification. Hibernate
    Validator is a well known reference implementation available. The javax.validation.*
    package provides the APIs for validation purpose.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: JSR 303是一个bean规范，定义了在J2EE应用程序中验证bean的元数据和API。市场上最新的是JSR 349，它是JSR 303的扩展，提供了开放性、依赖注入和CDI、方法验证、分组转换、与其他规范集成的特性。Hibernate
    Validator是一个知名的参考实现。javax.validation.*包提供了验证目的的API。
- en: 'Following are few common annotations used in validation:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在验证中常用的注解：
- en: '@NotNull: Checks the annotated value is not null but it cannot check for empty
    strings.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@NotNull: 检查注解的值不为空，但它不能检查空字符串。'
- en: '@Null: It Checks the annotated value is null'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Null: 它检查注解的值是否为空。'
- en: '@Pattern: It checks whether the annotated string matches the given regular
    expression.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Pattern: 它检查注解的字符串是否与给定的正则表达式匹配。'
- en: '@Past: Checks the annotated value is the date in past.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Past: 检查注解的值是过去的日期。'
- en: '@Future: Checks the annotated value is the date in future.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Future: 检查注解的值是未来的日期。'
- en: '@Min: It makes sure that the annotated element is a number and whose value
    is equal or greater than the specified value.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Min: 它确保注解的元素是一个数字，其值等于或大于指定的值。'
- en: '@Max: It makes sure that the annotated element is a number and whose value
    is equal or less than the specified value.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Max: 它确保注解的元素是一个数字，其值等于或小于指定的值。'
- en: '@AssertFalse: It assures the annotated element is false.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@AssertFalse: 它确保注解的元素为假。'
- en: '@AssertTrue: It assures the annotated element is true.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@AssertTrue: 它确保注解的元素为真。'
- en: '@Size: It assures the annotated element is between the max and min values.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Size: 它确保注解的元素在最大值和最小值之间。'
- en: 'Apart from the above annotations defined by Bean Validation API the following
    additional annotations has been provided by Hibernate Validator:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 除了由Bean Validation API定义的上述注解之外，Hibernate Validator还提供了以下附加注解：
- en: '@CreditCardNumber: It checks that the annotated value follws the character
    sequence passed to it.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@CreditCardNumber: 它检查注解的值是否遵循传递给它的字符序列。'
- en: '@Email: Used to check the specified character follows valid email address according
    to the specified expression'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Email: 用于根据指定表达式检查特定字符是否为有效的电子邮件地址。'
- en: '@Length: It checks that the annotated element has number of characters limited
    by min and max attribute specified by the annotation.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Length: 它检查注解的元素的字符数是否受min和max属性指定的限制。'
- en: '@NotBlank: It checks for the annotated element is not null and has the length
    greater than zero.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@NotBlank: 它检查注解的元素是否不为空且长度大于零。'
- en: '@NotEmpty: It makes sure the annotated element is neither null nor empty.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@NotEmpty: 它确保注解的元素既不是空也不是空。'
- en: 'Let''s create a copy of ReadMyBooks application to implement JSR based validation
    by following steps:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤复制ReadMyBooks应用程序来实现基于JSR的验证：
- en: 'Part1: Creating basic application'
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第一部分：创建基本应用程序
- en: Create ReadMyBooks_JSR_Validation as a dynamic web application.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为ReadMyBooks_JSR_Validation的动态网页应用程序。
- en: Add all required jar which we had added in earlier application.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加我们之前应用程序中添加的所有必需的jar文件。
- en: Along with these jar also add hibernate-validator-5.0.1.final.jar,classmate-0.5.4.jar,
    jboss-logging-3.1.0.GA.jar and validation-api-1.1.0.final.jar
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了这些jar文件外，还添加hibernate-validator-5.0.1.final.jar、classmate-0.5.4.jar、jboss-logging-3.1.0.GA.jar和validation-api-1.1.0.final.jar。
- en: Copy com.packt.ch06.beans and com.packt.ch06.controllers package along with
    its content.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制com.packt.ch06.beans和com.packt.ch06.controllers包及其内容。
- en: Copy index.jsp and searchByAuthor.jsp in WebContent.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WebContent目录下复制index.jsp和searchByAuthor.jsp文件。
- en: Add DispatcherServlet mapping in web.xml file.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web.xml文件中添加DispatcherServlet映射。
- en: Copy books-servlet.xml in WEB-INF
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WEB-INF目录下复制books-servlet.xml文件。
- en: Copy images in WebContent and jsps folder in WEB-INF along with its content.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制WEB-INF目录下的WebContent和jsps文件夹及其内容。
- en: 'Part2: Applying validation'
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第二部分：应用验证
- en: 'Let''s apply validations provided by hibernate-validator API on Book.java as
    shown below:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在Book.java上应用由hibernate-validator API提供的验证，如下所示：
- en: '[PRE60]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Let's update `AddBookController` as,
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更新AddBookController，如下所示：
- en: Delete the Validator data member.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除Validator数据成员。
- en: Delete initBinderMethod.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除initBinderMethod。
- en: Keep `@Valid` annotation applied on Book argument of `addBook()` method as it
    is.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持@Valid注解应用于addBook()方法的Book参数上。
- en: Remove bean for validator from books-servlet.xml as its no longer required.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从books-servlet.xml中删除validator bean，因为现在它不再需要。
- en: Comment bean for messageResource from XML we will use it later on.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对messageResource bean进行注释，稍后我们将会使用它。
- en: Make sure to have `<mvc:annotation-driven />` entry in book-servlet.xml to unable
    framework to consider annotation in controllers.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在book-servlet.xml中包含`<mvc:annotation-driven />`入口，以便使框架能够考虑控制器中的注解。
- en: 'Run the application. On submission of blank form you will get the following
    response displaying the default validation messages:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。在提交空白表单时，您将得到以下响应，显示默认的验证消息：
- en: '![](img/image_06_009.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_009.png)'
- en: The customization of the messages can be done either by using the 'message'
    attribute or we can externalize the messages using properties file. Let's do one
    by one.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 消息的自定义可以通过使用'message'属性来实现，或者我们可以使用属性文件外部化消息。我们逐一进行。
- en: Using 'message' attribute
  id: totrans-346
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用'message'属性
- en: 'Each of the annotations used in bean class to validate the data has ''message''
    attribute. The developers can use it to pass the appropriate message as shown
    in the code below:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在bean类中用于验证数据的每个注解都有'message'属性。开发人员可以使用它来传递适当的消息，如下面的代码所示：
- en: '[PRE61]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Keeping all other code as it is and changing the Book.java as shown above run
    the application. If any violation of the validation rule occurred, the messages
    configured for 'message' attribute will be displayed.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 保持其他代码不变，按照上面所示更改Book.java，然后运行应用程序。如果发生任何验证规则的违反，将为'message'属性配置的消息显示。
- en: Using properties file
  id: totrans-350
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用属性文件
- en: The developers can externalize the messages in the properties file from where
    it will be loaded on the violation of the validation as we did in the earlier
    application.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以从属性文件外部化消息，一旦验证违反，它将从中加载，就像在之前的应用程序中一样。
- en: 'Let''s add properties file using the below steps in the application:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤在应用程序中添加属性文件：
- en: 'Create a file messages_book_validation.properties in WEB-INF and add to mapping
    of violation rules and messages to display as shown below:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WEB-INF中创建一个名为messages_book_validation.properties的文件，并添加违反规则和要显示的消息的映射，如下所示：
- en: '[PRE62]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: F1 at the end of each file has been purposely added to know whether the messages
    are pulled from bean class or properties file. You don't have to add them in actual
    file. Purposely we haven't added any message for 'publication' data member to
    understand pulling of messages.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个文件的末尾故意添加了F1，以知道消息是从bean类还是属性文件中拉取的。您不必在实际文件中添加它们。我们故意没有为'publication'数据成员添加任何消息，以理解消息的拉取。
- en: 'The syntax to write the properties file is as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 编写属性文件的语法如下：
- en: '[PRE63]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Uncomment the bean ''`messageResource''` in book-servlet.xml or add one if
    you don''t have as shown below:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消对book-servlet.xml中bean '`messageResource'`的注释，或者如果您没有，请添加一个，如下所示：
- en: '[PRE64]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Run the application, on submission of the blank form the messages from the
    properties file will be loaded apart from ''publication'' as shown below:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，在提交空白表单时，将加载属性文件中的消息，除了'publication'之外，如下所示：
- en: '![](img/image_06_010.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_010.png)'
- en: Summary
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We had a discussion about web tier in this application. We discussed about the
    working of Spring MVC framework declaring user defined Controller. We had a discussion
    about the views are used to display the values using model object from ModelAndView.
    We also discussed about how the view are discovered by the framework and how they
    are rendered from the logical name set in ModelAndView using ViewResolvers. The
    discussion continued to the form handling where we had in depth discussion about
    form submission to use form backing object and pre population of the form using
    @ModelAttribute annotation. The from containing incorrect values may leads to
    exceptions or failure in business logic. The solution to the problem is form validation.
    we discussed form validation with the help of Spring custom validators and annotation
    based validation provided by hibernate validators. We also had discovered how
    externalization of messages to carry out using messageresource bundle. In the
    next chapter we will continue our discussion about how to carry out testing of
    an application to minimize the risk of its failure when the application goes live.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了在这款应用程序中的网络层。我们讨论了如何使用Spring MVC框架声明自定义控制器。我们讨论了视图如何使用从ModelAndView中的模型对象来显示值。我们还讨论了框架是如何发现视图，以及它们是如何通过ViewResolvers根据在ModelAndView中设置的逻辑名称进行渲染的。讨论继续深入到表单处理，我们深入讨论了如何通过使用表单支持对象和@ModelAttribute注解来实现表单提交和预填充表单。包含错误值的表单可能会导致异常或业务逻辑失败。解决这个问题的方法是表单验证。我们通过Spring自定义验证器和由Hibernate
    Validator提供的基于注解的验证来讨论了表单验证。我们还发现了如何使用messageresource捆绑包进行外部化消息传递的方法。在下一章中，我们将继续讨论如何对应用程序进行测试，以最小化应用程序上线时失败的风险。
