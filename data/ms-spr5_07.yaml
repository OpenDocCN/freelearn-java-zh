- en: Advanced Spring Boot Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Spring Boot功能
- en: In the previous chapter, we extended our microservice with exception handling,
    HATEOAS, caching, and internationalization. In this chapter, let's turn our attention
    to deploying our services ;to production. To be able to deploy the services to
    production, we need to be able to set up and create functionality to configure,
    deploy, and monitor services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过异常处理、HATEOAS、缓存和国际化扩展了我们的微服务。在本章中，让我们把注意力转向将我们的服务部署到生产环境。为了能够将服务部署到生产环境，我们需要能够设置和创建功能来配置、部署和监控服务。
- en: 'The following are some of the questions we will answer ;during this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将回答的一些问题：
- en: How to externalize application configuration?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何外部化应用程序配置？
- en: How to use profiles to configure environment-specific values?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用配置文件来配置特定环境的值？
- en: How to deploy our application to the Cloud?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将我们的应用程序部署到云端？
- en: What is an embedded server? How can you use Tomcat, Jetty, and Undertow?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式服务器是什么？如何使用Tomcat、Jetty和Undertow？
- en: What monitoring features does ;Spring Boot Actuator provide?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot Actuator提供了哪些监控功能？
- en: How can you be a more productive developer with Spring Boot?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过Spring Boot成为更高效的开发者？
- en: Externalised configuration
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部化配置
- en: 'Applications are typically built once (in JAR or WAR) and then deployed into
    multiple environments. ;The following figure shows some of the different environments
    an application can be deployed to:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常只构建一次（JAR或WAR），然后部署到多个环境中。下图显示了应用程序可以部署到的不同环境：
- en: '![](img/211bc63c-fe61-4b57-93d9-b9cc0f3afbd8.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/211bc63c-fe61-4b57-93d9-b9cc0f3afbd8.png)'
- en: 'In each of the preceding environments, an application typically ;has the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述的每个环境中，应用程序通常具有以下内容：
- en: Connections to databases
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Connections to multiple ;services
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到多个服务
- en: Specific environment configurations
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定环境配置
- en: It is a good practice to externalize configurations that change between different
    environments into a configuration file or database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置在不同环境之间变化的配置外部化到配置文件或数据库中是一个很好的做法。
- en: Spring Boot provides ;a flexible, standardized approach for externalized configuration.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了一种灵活的、标准化的外部化配置方法。
- en: 'In this section, we will look at the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下以下内容：
- en: How can properties from ;`application.properties` be used inside our services?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在我们的服务中使用`application.properties`中的属性？
- en: How do type-safe Configuration Properties ;make application configuration a
    cakewalk?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使应用程序配置成为一件轻而易举的事情？
- en: What kind of support does Spring Boot provide for **Spring ;Profiles**?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot为**Spring Profiles**提供了什么样的支持？
- en: How can you configure properties in `application.properties`?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在`application.properties`中配置属性？
- en: 'In Spring Boot, `application.properties` is the default file from which configuration
    values are picked up. Spring Boot can pick the ;`application.properties` file
    ;from anywhere on the classpath. ;Typically, `application.properties` is located
    at `src\main\resources`, as shown in the ;following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot中，`application.properties`是默认的配置值来源文件。Spring Boot可以从类路径的任何位置获取`application.properties`文件。通常，`application.properties`位于`src\main\resources`，如下图所示：
- en: '![](img/43218c35-6975-4e18-a64f-ac06107d47e2.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43218c35-6975-4e18-a64f-ac06107d47e2.png)'
- en: 'In [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml), *Extending Microservices*,
    we looked at examples of customizing Spring Security using configuration in `application.properties`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml)中，*扩展微服务*，我们看了一些使用`application.properties`中的配置自定义Spring
    Security的示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Similar to these, all ;other Spring Boot starters, modules, and frameworks can
    be customized through configuration in ;`application.properties`. In the next
    section, let's look at some of the configuration options Spring Boot provides
    for these frameworks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与此类似，所有其他Spring Boot starters、模块和框架都可以通过`application.properties`中的配置进行自定义。在下一节中，让我们看一下Spring
    Boot为这些框架提供的一些配置选项。
- en: Customizing frameworks through application.properties
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过`application.properties`自定义框架
- en: In this section, we will discuss ;some of the important things that can be configured
    through `application.properties`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些可以通过`application.properties`进行配置的重要事项。
- en: For the complete list, refer to ;[https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整列表，请参阅[https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties)。
- en: Logging
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志
- en: 'Some of the things ;that can be configured are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一些可以配置的事项如下：
- en: The location of the logging configuration file
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志配置文件的位置
- en: the location of the log file
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志文件的位置
- en: Logging level
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别
- en: 'The following snippet shows a few examples:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了一些示例：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Embedded server configuration
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式服务器配置
- en: 'An embedded server is one of the most important features of Spring Boot. Some
    of the embedded server features that can be ;configured through application properties
    ;include:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式服务器是Spring Boot最重要的特性之一。一些可以通过应用程序属性进行配置的嵌入式服务器特性包括：
- en: Server ports
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端口
- en: SSL support and configuration
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL支持和配置
- en: Access log configuration
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问日志配置
- en: 'The following snippet shows some of the embedded server features that can be
    configured through application properties:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了一些可以通过应用程序属性进行配置的嵌入式服务器特性：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Spring MVC
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring MVC
- en: 'Spring MVC can be extensively configured through `application.properties`.
    Listed here are some of the important configurations:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC可以通过`application.properties`进行广泛配置。以下是一些重要的配置：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Spring starter security
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring starter security
- en: 'Spring Security can be extensively configured through `application.properties`.
    The following examples show some of the important configuration options related
    to Spring Security:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security可以通过`application.properties`进行广泛配置。以下示例显示了与Spring Security相关的一些重要配置选项：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Data Sources, JDBC and JPA
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据源、JDBC和JPA
- en: 'Data Sources, JDBC, and can also be extensively configured through `application.properties`.
    ;Listed here are some of the important options:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源、JDBC和还可以通过`application.properties`进行广泛配置。以下是一些重要选项：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Other configuration options
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他配置选项
- en: 'Some other things that can be configured through `application.properties` are
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`application.properties`可以配置的其他一些事项如下：
- en: Profiles
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: HTTP ;message converters (Jackson/JSON)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP消息转换器（Jackson/JSON）
- en: Transaction management
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理
- en: Internationalization
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化
- en: 'The following examples show some of the configuration options:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一些配置选项：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Custom properties in application.properties
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: application.properties中的自定义属性
- en: Until now, we have looked at using prebuilt properties provided by Spring Boot
    for various frameworks. In this section, we will look at creating our application-specific
    configuration that can also be configured in `application.properties`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过了使用Spring Boot为各种框架提供的预构建属性。在本节中，我们将看看如何创建我们的应用程序特定配置，这些配置也可以在`application.properties`中配置。
- en: Let's consider an example. We want to be able to interact with an external service.
    We want to be able to externalize the configuration of the URL of this service.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。我们希望能够与外部服务进行交互。我们希望能够外部化此服务的URL配置。
- en: 'The following example shows how we would want to configure the external service
    in `application.properties`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了我们如何在`application.properties`中配置外部服务：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We want to use the value of the ;`somedataservice.url` property in our data
    service. The following snippet shows how we can do that in an example data service.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在我们的数据服务中使用`;`somedataservice.url`属性的值。以下代码片段显示了我们如何在示例数据服务中实现这一点。
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`@Component public class SomeDataService`: The data service bean is managed
    by Spring because of the `@Component` annotation.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Component public class SomeDataService`：数据服务bean由Spring管理，因为有`@Component`注解。'
- en: '`@Value("${somedataservice.url}")`: The value of `somedataservice.url` will
    be autowired into the `url` variable. The `url` value can be used in the methods
    of the bean.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Value("${somedataservice.url}")`：`somedataservice.url`的值将自动装配到`url`变量中。`url`的值可以在bean的方法中使用。'
- en: Configuration properties - type-safe Configuration Management
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置属性-类型安全的配置管理
- en: 'While the ;`@Value` annotation provides dynamic configuration, it also has
    several drawbacks:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`;@Value`注解提供了动态配置，但它也有一些缺点：
- en: If we want to use three property values in a service, we would need to autowire
    ;them using `@Value` three times.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想在一个服务中使用三个属性值，我们需要使用`@Value`三次进行自动装配。
- en: The `@Value` annotations and the keys of the messages would be spread across
    the application. If we want to find the list of the configurable values in an
    application, we have to search through the application for `@Value` annotations.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Value`注解和消息的键将分布在整个应用程序中。如果我们想要查找应用程序中可配置的值列表，我们必须搜索`@Value`注解。'
- en: 'Spring Boot provides a better approach to application configuration through
    the strongly typed `ConfigurationProperties` feature. This allows us to do the
    following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot通过强类型的`ConfigurationProperties`功能提供了更好的应用程序配置方法。这使我们能够做到以下几点：
- en: Have all the properties in a predefined bean structure
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在预定义的bean结构中具有所有属性
- en: This bean would act as the centralized store for all application properties
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个bean将作为所有应用程序属性的集中存储
- en: The configuration bean can be autowired wherever application configuration is
    needed
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置bean可以在需要应用程序配置的任何地方进行自动装配
- en: 'An example configuration bean is shown as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 示例配置bean如下所示：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`@ConfigurationProperties("application")` is the annotation for an externalized
    configuration. We can add this annotation to any class to bind to external properties.
    The value in the double quotes--application--is used as a prefix while binding
    external configuration to this bean.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ConfigurationProperties("application")`是外部化配置的注解。我们可以将此注解添加到任何类中，以绑定到外部属性。双引号中的值--application--在将外部配置绑定到此bean时用作前缀。'
- en: We are defining multiple configurable values in the bean.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在定义bean中的多个可配置值。
- en: Getters and setters are needed since binding happens through Java beans property
    descriptors.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于绑定是通过Java bean属性描述符进行的，因此需要getter和setter。
- en: 'The following snippet shows how the values for these properties can be defined
    in `application.properties`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何在`application.properties`中定义这些属性的值：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`application`: The prefix is defined as part of `@ConfigurationProperties("application")`
    while defining the configuration bean'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application`：在定义配置bean时，前缀被定义为`@ConfigurationProperties("application")`'
- en: Values are defined by appending the prefix to the name of the property
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将前缀附加到属性的名称来定义值
- en: 'We can use configuration properties in other beans by autowiring `ApplicationConfiguration`
    into the bean:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将`ApplicationConfiguration`自动装配到bean中，在其他bean中使用配置属性。
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`@Autowired private ApplicationConfiguration configuration`: `ApplicationConfiguration`
    is autowired into `SomeOtherDataService`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired private ApplicationConfiguration configuration`：`ApplicationConfiguration`被自动装配到`SomeOtherDataService`中'
- en: '`configuration.getService1Timeout(), configuration.getService1Url(), configuration.isEnableSwitchForService1()`:
    Values can be accessed in bean methods using the getter methods on the configuration
    bean'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration.getService1Timeout(), configuration.getService1Url(), configuration.isEnableSwitchForService1()`：可以使用配置bean上的getter方法在bean方法中访问值'
- en: By default, any failure in binding externally configured values to configuration
    properties bean would result in the failure of the server start up. This prevents
    problems that arise because of misconfigured applications running in production.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将外部配置的值绑定到配置属性bean的任何失败都将导致服务器启动失败。这可以防止因运行在生产环境中的配置错误的应用程序而引起的问题。
- en: 'Let''s use the misconfigure service timeout to see what happens:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用错误的服务超时来看看会发生什么：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The application will fail to start up with an error.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将因错误而无法启动。
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Profiles
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: Until now, we looked at how to externalize application configuration to a property
    file, ;`application.properties`. What we want to be able to do is have different
    values for the same property in different environments.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看了如何将应用程序配置外部化到属性文件`application.properties`。我们希望能够在不同环境中为相同的属性具有不同的值。
- en: Profiles provide a way to provide different configurations in different environments.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件提供了在不同环境中提供不同配置的方法。
- en: 'The following snippet shows how to configure an active profile in `application.properties`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何在`application.properties`中配置活动配置文件：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once you have an active profile configured, you can define properties specific
    to that profile in `application-{profile-name}.properties`. For `dev` profile,
    the name of the properties file would be ;`application-dev.properties`. The following
    example shows the ;configuration in `application-dev.properties`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置了活动配置文件，您可以在`application-{profile-name}.properties`中定义特定于该配置文件的属性。对于`dev`配置文件，属性文件的名称将是`application-dev.properties`。以下示例显示了`application-dev.properties`中的配置：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The values in `application-dev.properties` will override the default configuration
    in `application.properties` if the active profile is `dev`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果活动配置文件是`dev`，则`application-dev.properties`中的值将覆盖`application.properties`中的默认配置。
- en: 'We can have configurations for multiple environments, as shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为多个环境进行配置，如下所示：
- en: '![](img/3a17c5e0-6e81-4e18-9c41-168901db26e2.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a17c5e0-6e81-4e18-9c41-168901db26e2.png)'
- en: Profiles-based Bean configuration
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于配置文件的Bean配置
- en: Profiles can also be used to define different beans or different bean configurations
    in different environments. All classes marked with `@Component` or `@Configuration`
    can also be marked with an additional `@Profile` annotation to specify the profile
    in which the bean or configuration is enabled.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件还可以用于在不同环境中定义不同的bean或不同的bean配置。所有标有`@Component`或`@Configuration`的类也可以标有额外的`@Profile`注解，以指定启用该bean或配置的配置文件。
- en: Let's consider an example. An application needs different caches enabled in
    different environments. In the `dev` environment, it uses a very simple cache.
    In production, we would want to use a distributed cache. This can be implemented
    using profiles.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。一个应用程序需要在不同环境中启用不同的缓存。在`dev`环境中，它使用非常简单的缓存。在生产环境中，我们希望使用分布式缓存。这可以使用配置文件来实现。
- en: 'The following bean shows the configuration enabled in a `dev` environment:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下bean显示了在`dev`环境中启用的配置：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following bean shows the configuration enabled in a production environment:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下bean显示了在生产环境中启用的配置：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Based on the active profile configured, the respective configuration is picked
    up. Note that we are not really configuring a distributed cache in this example.
    We are returning a simple string to illustrate that profiles can be used to implement
    these kinds of variations.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 根据配置的活动配置文件，选择相应的配置。请注意，在此示例中，我们实际上并没有配置分布式缓存。我们返回一个简单的字符串来说明可以使用配置文件来实现这些变化。
- en: Other options ;for application configuration values
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他选项用于应用程序配置值
- en: Until now, the approaches ;we took to ;configure application properties was
    using the key value pairs from either `application.properties` or `application-{profile-name}.properties`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们采用的方法是使用`application.properties`或`application-{profile-name}.properties`中的键值对来配置应用程序属性。
- en: Spring Boot provides a number of other ways to configure application properties.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了许多其他配置应用程序属性的方法。
- en: 'Listed here are some of the important ways of providing application configuration:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是提供应用程序配置的一些重要方法：
- en: Command-line arguments
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行参数
- en: Creating a system property with the name ;`SPRING_APPLICATION_JSON` and including
    the JSON configuration
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为`SPRING_APPLICATION_JSON`的系统属性，并包含JSON配置
- en: ServletConfig init parameters
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ServletConfig初始化参数
- en: ServletContext init parameters
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ServletContext初始化参数
- en: Java System properties (`System.getProperties()`)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java系统属性（`System.getProperties()`）
- en: Operating system environment variables
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统环境变量
- en: Profile-specific application properties outside of `.jar`, somewhere in the
    classpath of the application (`application-{profile}.properties`)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包在`.jar`之外的特定配置文件，位于应用程序的类路径中（`application-{profile}.properties`）
- en: Profile-specific application properties packaged inside your `.jar` (`application-{profile}.properties`
    and YAML variants)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包在`.jar`中的特定配置文件（`application-{profile}.properties`和YAML变体）
- en: Application properties outside the `.jar`
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.jar`之外的应用程序属性'
- en: Application properties packaged inside the `.jar`
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包在`.jar`中的应用程序属性
- en: More information can be found in the Spring Boot documentation at ;[http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅Spring Boot文档[http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config)。
- en: The approaches at the top of this list have higher priority than those at the
    bottom of the list. For example, if a command-line argument with the name `spring.profiles.active`
    is provided when launching the application, it would override any configuration
    provided through `application.properties` because command-line arguments have
    higher preference.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表顶部的方法比列表底部的方法具有更高的优先级。例如，如果在启动应用程序时提供了一个名为`spring.profiles.active`的命令行参数，它将覆盖通过`application.properties`提供的任何配置，因为命令行参数具有更高的优先级。
- en: This provides great flexibility in determining how you would want to configure
    your application in different environments.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这在确定如何在不同环境中配置应用程序方面提供了很大的灵活性。
- en: YAML configuration
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML配置
- en: Spring Boot also supports **YAML** to configure your properties.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot还支持YAML来配置您的属性。
- en: YAML is an abbreviation for "YAML Ain't Markup Language". It is a human readable
    structured format. YAML is commonly used for configuration files.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: YAML是“YAML Ain't Markup Language”的缩写。它是一种人类可读的结构化格式。YAML通常用于配置文件。
- en: To understand basic syntax of YAML, look at the example below ;(`application.yaml`).
    This shows how our application configuration can be specified in YAML.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解YAML的基本语法，请查看下面的示例（`application.yaml`）。这显示了如何在YAML中指定我们的应用程序配置。
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, the YAML configuration is much more readable than `application.properties`,
    as it allows better grouping of properties.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，YAML配置比`application.properties`更易读，因为它允许更好地对属性进行分组。
- en: 'Another advantage of YAML is that it allows you to specify the configuration
    for multiple profiles in a single configuration file. The following snippet shows
    an example:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: YAML的另一个优点是它允许您在单个配置文件中为多个配置文件指定配置。以下代码片段显示了一个示例：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, ;`http://service.dev.com` will be used in the `dev` profile,
    and ;`http://service.prod.com` is used in the `prod` profile. In all other profiles,
    `http://service.default.com` will be used as the service URL.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`http://service.dev.com`将在`dev`配置文件中使用，而`http://service.prod.com`将在`prod`配置文件中使用。在所有其他配置文件中，`http://service.default.com`将作为服务URL使用。
- en: Embedded servers
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式服务器
- en: One of the important concepts Spring Boot brings in is embedded servers.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot引入的一个重要概念是嵌入式服务器。
- en: Let's first understand the difference between traditional Java web application
    deployment and this new concept called embedded server.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解传统Java Web应用程序部署与这个称为嵌入式服务器的新概念之间的区别。
- en: 'Traditionally, with Java web applications, we build **Web Application Archive**
    (**WAR**) or **Enterprise Application Archive** (**EAR**) and deploy them into
    servers. Before we can deploy a WAR ;on the server, we need a web server or an
    application server installed on the server. The application server would be on
    top of the Java instance installed on the server. So, we need Java and an application
    (or web server) installed on the machine before we can deploy our application.
    The following figure shows an example installation in Linux:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，使用Java Web应用程序，我们构建Web应用程序存档（WAR）或企业应用程序存档（EAR）并将它们部署到服务器上。在我们可以在服务器上部署WAR之前，我们需要在服务器上安装Web服务器或应用服务器。应用服务器将安装在服务器上的Java实例之上。因此，我们需要在可以部署我们的应用程序之前在机器上安装Java和应用程序（或Web服务器）。以下图显示了Linux中的一个示例安装：
- en: '![](img/e2025c2a-8089-4876-baae-ecc5695d182c.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2025c2a-8089-4876-baae-ecc5695d182c.png)'
- en: 'Spring Boot brings in the concept of embedded servers, where the web server
    is part of the application deployable--JAR. To deploy applications using embedded
    servers, it is sufficient if ;Java is installed on the server. The following figure
    shows an example installation:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot引入了嵌入式服务器的概念，其中Web服务器是应用程序可部署的一部分--JAR。使用嵌入式服务器部署应用程序时，只需在服务器上安装Java即可。以下图显示了一个示例安装：
- en: '![](img/78f1c4a9-a5da-4785-a7f2-ff2580ff5ffd.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78f1c4a9-a5da-4785-a7f2-ff2580ff5ffd.png)'
- en: When we build any application with Spring Boot, the default is to build a JAR.
    With `spring-boot-starter-web`, the default embedded server is Tomcat.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Spring Boot构建任何应用程序时，默认情况下是构建一个JAR。使用`spring-boot-starter-web`，默认的嵌入式服务器是Tomcat。
- en: 'When we use `spring-boot-starter-web`, a few Tomcat-related dependencies can
    be seen in the Maven dependencies section. These dependencies will be included
    as part of the application deployment package:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`spring-boot-starter-web`时，在Maven依赖项部分可以看到一些与Tomcat相关的依赖项。这些依赖项将作为应用程序部署包的一部分包含进去：
- en: '![](img/861fd1e9-42d6-4e8f-9cfd-cf4096937d41.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/861fd1e9-42d6-4e8f-9cfd-cf4096937d41.png)'
- en: 'To deploy the application, we need to build a JAR. We can build a JAR using
    ;the command below:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署应用程序，我们需要构建一个JAR。我们可以使用以下命令构建一个JAR：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The following screenshot shows the structure of the JAR created.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了创建的JAR的结构。
- en: '`BOOT-INF\classes` contains all application-related class files (from `src\main\java`)
    as well as the application properties from `src\main\resources`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOT-INF\classes`包含所有与应用程序相关的类文件（来自`src\main\java`）以及来自`src\main\resources`的应用程序属性：'
- en: '![](img/d5c8e970-8105-467a-bf2a-a4aafd94d908.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5c8e970-8105-467a-bf2a-a4aafd94d908.png)'
- en: 'Some of the libraries in ;`BOOT-INF\lib` are ;shown in the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOT-INF\lib`中的一些库在以下屏幕截图中显示：'
- en: '![](img/992dfd0f-d8bc-469b-8206-39b56cf20e10.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/992dfd0f-d8bc-469b-8206-39b56cf20e10.png)'
- en: '`BOOT-INF\lib` contains all the JAR dependencies of the application. There
    are three Tomcat-specific JARs among these. These three JARs enable the launch
    of an embedded Tomcat service when the application is run as a Java application.
    Because of this, a Java installation is sufficient to deploy this application
    on a server.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOT-INF\lib`包含应用程序的所有JAR依赖项。其中有三个Tomcat特定的JAR文件。这三个JAR文件在将应用程序作为Java应用程序运行时启用了嵌入式Tomcat服务的启动。因此，只需安装Java即可在服务器上部署此应用程序。'
- en: Switching to Jetty and Undertow
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换到Jetty和Undertow
- en: 'The following screenshot shows the changes needed in order to switch to using
    Jetty embedded server:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了切换到使用Jetty嵌入式服务器所需的更改：
- en: '![](img/8c4a532a-5e2d-404b-ab14-65bc6e7b4465.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c4a532a-5e2d-404b-ab14-65bc6e7b4465.png)'
- en: All that we need to do is exclude the Tomcat starter dependency in `spring-boot-starter-web`
    and include a dependency in ;`spring-boot-starter-jetty`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是在`spring-boot-starter-web`中排除Tomcat启动器依赖项，并在`spring-boot-starter-jetty`中包含一个依赖项。
- en: 'You can now see a number of Jetty dependencies in the Maven dependencies section.
    The following screenshot shows a few of the Jetty-related dependencies:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在Maven依赖项部分看到许多Jetty依赖项。以下截图显示了一些与Jetty相关的依赖项：
- en: '![](img/2a6f260a-7121-4cd1-b7e7-d4dc8568affe.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a6f260a-7121-4cd1-b7e7-d4dc8568affe.png)'
- en: 'Switching to Undertow is equally easy. Use `spring-boot-starter-undertow` instead
    of `spring-boot-starter-jetty`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到Undertow同样很容易。使用`spring-boot-starter-undertow`代替`spring-boot-starter-jetty`：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Building a WAR file
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建WAR文件
- en: Spring Boot also provides the option of building a traditional WAR file instead
    of using a JAR.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot还提供了构建传统WAR文件而不是使用JAR的选项。
- en: 'First, we need to change our packaging in `pom.xml` to `WAR`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`pom.xml`中更改我们的打包为`WAR`：
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We would want to prevent tomcat server to be embedded as a dependency in the
    WAR file. ;We can do this by modifying ;the dependency on the ;embedded server
    (Tomcat in the following example) to have a scope of provided. The following snippet
    shows the exact details:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望防止Tomcat服务器作为WAR文件中的嵌入式依赖项。我们可以通过修改嵌入式服务器（以下示例中的Tomcat）的依赖项来将其范围设置为提供。以下代码片段显示了确切的细节：
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you build the WAR file, Tomcat dependencies are not included. We can use
    this WAR to deploy on an application server, such as WebSphere or Weblogic, or
    a web server, such as Tomcat.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建WAR文件时，不包括Tomcat依赖项。我们可以使用此WAR文件部署到应用服务器，如WebSphere或Weblogic，或Web服务器，如Tomcat。
- en: Developer tools
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工具
- en: Spring Boot provides tools that can improve the experience of developing Spring
    Boot applications. One of these is Spring Boot developer tools.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了可以改善开发Spring Boot应用程序体验的工具。其中之一是Spring Boot开发工具。
- en: 'To use Spring Boot developer tools, we need to include a dependency:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Spring Boot开发工具，我们需要包含一个依赖项：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Spring Boot developer tools, by default, disables the caching of view templates
    and static files. This enables a developer to see the changes as soon as they
    make them.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot开发工具默认禁用视图模板和静态文件的缓存。这使开发人员可以在进行更改后立即看到更改。
- en: 'Another important feature is the automatic restart when any file in the classpath
    changes. So, the application automatically restarts in the following scenarios:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要功能是当类路径中的任何文件更改时自动重新启动。因此，在以下情况下应用程序会自动重新启动：
- en: When we make a change to a controller or a service class
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们对控制器或服务类进行更改时
- en: When we make a change to the property file
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们对属性文件进行更改时
- en: 'The advantages of Spring Boot developer tools are as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot开发工具的优点如下：
- en: The developer does not need to stop and start the application each time. The
    application is automatically restarted as soon as there is a change.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员不需要每次都停止和启动应用程序。只要有变化，应用程序就会自动重新启动。
- en: The restart feature in Spring Boot developer tools is intelligent. It only reloads
    the actively developed classes. It does not reload the third-party JARs (using
    two different class-loaders). Thereby, the restart when something in the application
    changes is much faster compared to cold-starting an application.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot开发工具中的重新启动功能是智能的。它只重新加载活跃开发的类。它不会重新加载第三方JAR（使用两个不同的类加载器）。因此，当应用程序中的某些内容发生变化时，重新启动速度比冷启动应用程序要快得多。
- en: Live reload
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时重新加载
- en: Another useful Spring Boot developer tools feature is **live reload**. You can
    download a specific plugin for your browser from [http://livereload.com/extensions/](http://livereload.com/extensions/).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的Spring Boot开发工具功能是**实时重新加载**。您可以从[http://livereload.com/extensions/](http://livereload.com/extensions/)下载特定的浏览器插件。
- en: You can enable live reload by clicking on the button in ;the browser. The button
    in the Safari browser ;is shown in the following screenshot. It's in the top-left
    corner beside the address bar.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击浏览器中的按钮来启用实时重新加载。 Safari浏览器中的按钮如下截图所示。它位于地址栏旁边的左上角。
- en: '![](img/6122df44-dd22-446b-b693-b8df0cf99805.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6122df44-dd22-446b-b693-b8df0cf99805.png)'
- en: If there are code changes made on the pages or services that are shown in the
    browser, they are auto-refreshed with new content. There is no need to hit that
    refresh button anymore!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中显示的页面或服务上进行了代码更改，它们将自动刷新为新内容。不再需要点击刷新按钮！
- en: Spring Boot Actuator
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot执行器
- en: 'When an application is deployed into production:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序部署到生产环境时：
- en: We want to know immediately if some service goes down or is very slow
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望立即知道某些服务是否宕机或非常缓慢
- en: We want to know immediately if any of the servers does not have sufficient free
    space or memory
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望立即知道任何服务器是否没有足够的可用空间或内存
- en: This is called **application monitoring**.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为**应用程序监控**。
- en: '**Spring Boot Actuator** provides a number of production-ready monitoring features.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Boot执行器**提供了许多生产就绪的监控功能。'
- en: 'We will add Spring Boot Actuator by adding a simple dependency:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加一个简单的依赖项来添加Spring Boot执行器：
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As soon as the actuator is added to an application, it enables a number of
    endpoints. When we start the application, we see a number of added new mappings.
    The following screenshot shows an extract of these new mappings from the start
    up log:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行器添加到应用程序中，它就会启用许多端点。当我们启动应用程序时，我们会看到许多新添加的映射。以下截图显示了启动日志中这些新映射的摘录：
- en: '![](img/dd81e668-f0b5-4a06-bde3-ff017963bc49.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd81e668-f0b5-4a06-bde3-ff017963bc49.png)'
- en: 'The actuator exposes a number of endpoints. The actuator endpoint (`http://localhost:8080/application`)
    acts as a discovery for all other endpoints. The following screenshot shows the
    response when we execute the request from a Postman:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 执行器公开了许多端点。执行器端点（`http://localhost:8080/application`）充当所有其他端点的发现。当我们从Postman执行请求时，以下截图显示了响应：
- en: '![](img/6c5b5dc2-d362-4ec3-ae3a-c650d514875b.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c5b5dc2-d362-4ec3-ae3a-c650d514875b.png)'
- en: HAL Browser
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HAL浏览器
- en: 'A number of these endpoints expose a lot of data. To be able to visualize the
    information better, we will add an **HAL Browser** to our application:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些端点暴露了大量数据。为了能够更好地可视化信息，我们将在我们的应用程序中添加一个**HAL浏览器**：
- en: '[PRE26]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Spring Boot Actuator exposes REST APIs around all the data captured from the
    Spring Boot application and environment. The HAL Browser enables visual representation
    around the Spring Boot Actuator API:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot Actuator在Spring Boot应用程序和环境中捕获的所有数据周围暴露了REST API。HAL浏览器使得在Spring
    Boot Actuator API周围进行可视化表示成为可能：
- en: '![](img/472b7175-368b-46f8-9173-201c8ed29621.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/472b7175-368b-46f8-9173-201c8ed29621.png)'
- en: When we launch ;`http://localhost:8080/application` ;in the browser, we can
    see all the URLs exposed by actuator.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中启动`http://localhost:8080/application`时，我们可以看到actuator暴露的所有URL。
- en: '![](img/54550026-0c77-4c04-ad52-dd9e018ecf2c.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54550026-0c77-4c04-ad52-dd9e018ecf2c.png)'
- en: Let's browse all the information exposed by actuator as part of different endpoints
    through the HAL Browser.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过HAL浏览器浏览actuator作为不同端点的一部分暴露的所有信息。
- en: Configuration properties
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置属性
- en: 'The `configprops` endpoint provides information about configuration options
    that can be configured through application properties. It basically is a collated
    list of all `@ConfigurationProperties`. ;The following screenshot shows configprops
    in HAL Browser:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`configprops`端点提供了关于可以通过应用程序属性进行配置的配置选项的信息。它基本上是所有`@ConfigurationProperties`的汇总列表。下面的屏幕截图显示了HAL浏览器中的configprops：'
- en: '![](img/2f0189f7-be6c-4343-ac4f-ac24f5f3864b.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f0189f7-be6c-4343-ac4f-ac24f5f3864b.png)'
- en: 'To illustrate a known example, the following section from the service response
    shows the configuration options available for Spring MVC:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，以下部分从服务响应中显示了Spring MVC可用的配置选项：
- en: '[PRE27]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To provide configuration for Spring MVC, we combine the prefix with the path
    in properties. For example, to configure `loadOnStartup`, we use a property with
    the name `spring.mvc.servlet.loadOnStartup`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为Spring MVC提供配置，我们将前缀与属性中的路径组合在一起。例如，要配置`loadOnStartup`，我们使用名称为`spring.mvc.servlet.loadOnStartup`的属性。
- en: Environment details
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境细节
- en: 'The **environment ;**(**env**) endpoint provides information about the operating
    system, JVM ;installation, classpath, system environment variable, and the values
    configured in various ;application properties files. The following screenshot
    shows the environment endpoint in the HAL Browser:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境（env）**端点提供了有关操作系统、JVM安装、类路径、系统环境变量以及各种应用程序属性文件中配置的值的信息。以下屏幕截图显示了HAL浏览器中的环境端点：'
- en: '![](img/54f5003f-ab0f-4cae-aaa1-96029fe1e5d1.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54f5003f-ab0f-4cae-aaa1-96029fe1e5d1.png)'
- en: 'An extract from the response from the `/application/env` service is shown here.
    It shows a few system details as well as the details from application configuration:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从`/application/env`服务的响应中提取的内容。它显示了一些系统详细信息以及应用程序配置的详细信息：
- en: '[PRE28]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Health
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 健康
- en: 'The health service provides details of the disk space and status of the application.
    The following screenshot shows the service executed from the HAL Browser:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 健康服务提供了磁盘空间和应用程序状态的详细信息。以下屏幕截图显示了从HAL浏览器执行的服务：
- en: '![](img/06e289c8-103e-491b-93d8-4f2b58bea3e5.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e289c8-103e-491b-93d8-4f2b58bea3e5.png)'
- en: Mappings
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mappings
- en: 'The mappings endpoint provides information ;about different service endpoints
    that are exposed from the application:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Mappings端点提供了有关从应用程序暴露的不同服务端点的信息：
- en: URI
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI
- en: Request methods
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求方法
- en: Bean
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bean
- en: Controller methods exposing the service
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露服务的控制器方法
- en: 'Mappings provides ;a collated list of all `@RequestMapping` paths. An extract
    from the response of the `/application/mappings` endpoint is shown here. ;We can
    see mappings of the different controller methods that were created earlier in
    this book:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Mappings提供了所有`@RequestMapping`路径的汇总列表。以下是从`/application/mappings`端点的响应中提取的内容。我们可以看到在本书中之前创建的不同控制器方法的映射：
- en: '[PRE29]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Beans
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Beans
- en: The beans endpoint provides the details about the beans that are loaded into
    the Spring context. This is useful in debugging any problems related to Spring
    context.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: beans端点提供了有关加载到Spring上下文中的bean的详细信息。这对于调试与Spring上下文相关的任何问题非常有用。
- en: 'An extract from the response of the `/application/beans` endpoint is shown
    below:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从`/application/beans`端点的响应中提取的内容：
- en: '[PRE30]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It shows the details for two beans: `basicController` and `todoController`.
    You can see the ;following details for all the beans:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了两个bean：`basicController`和`todoController`的详细信息。您可以看到所有bean的以下详细信息：
- en: The name of the bean and its aliases
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bean的名称及其别名
- en: The scope of the bean
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bean的范围
- en: The type of the bean
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bean的类型
- en: The exact location of the class from which this bean is created
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建此bean的类的确切位置
- en: Dependencies of the bean
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bean的依赖关系
- en: Metrics
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指标
- en: 'The metrics endpoint shows some of the important metrics about the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 指标端点显示以下一些重要的指标：
- en: Server--free memory, processors, uptime, and so on
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器--空闲内存、处理器、正常运行时间等
- en: JVM--details about the ;heap, threads, garbage collection, sessions, and so
    on
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM--关于堆、线程、垃圾收集、会话等的详细信息
- en: Responses provided by application services
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序服务提供的响应
- en: 'An extract from the ;response of the ;`/application/metrics` endpoint is shown
    as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从`/application/metrics`端点的响应中提取的内容：
- en: '[PRE31]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Auto-configuration
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动配置
- en: Auto-configuration is one of the most important features of Spring Boot. The
    auto-configuration endpoint (`/application/autoconfig`) exposes the details related
    to auto-configuration. It shows both positive matches and negative matches with
    details about why a particular auto-configuration succeeded or failed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 自动配置是Spring Boot的最重要特性之一。自动配置端点（`/application/autoconfig`）暴露了与自动配置相关的详细信息。它显示了成功或失败的特定自动配置的原因的正匹配和负匹配。
- en: 'The following extract shows some of the positive matches from the response:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提取显示了响应中一些正匹配的内容：
- en: '[PRE32]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following extract shows some of the negative ;matches from the response:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提取显示了响应中一些负匹配的内容：
- en: '[PRE33]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: All these details are very useful in order to debug auto-configuration.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些细节对于调试自动配置非常有用。
- en: Debugging
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'Three of the actuator endpoints are useful when debugging problems:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试问题时，三个执行器端点非常有用：
- en: '`/application/heapdump`: Provides a heap dump'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/application/heapdump`：提供堆转储'
- en: '`/application/trace`: Provides a trace of the last few requests serviced by
    the application'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/application/trace`：提供应用程序最近几个请求的跟踪'
- en: '`/application/dump`: Provides a thread dump'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/application/dump`：提供线程转储'
- en: Deploying ;an application to Cloud
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到Cloud
- en: Spring Boot has great support for most popular Cloud **Platform as a Service**
    (**PaaS**) providers.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot对大多数流行的云**平台即服务**（**PaaS**）提供商有很好的支持。
- en: 'Some of the popular ones are as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行的云端包括：
- en: Cloud Foundry
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: Heroku
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku
- en: OpenShift
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift
- en: '**Amazon Web Services** (**AWS**)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）'
- en: In this section, we will focus on deploying our application to Cloud Foundry.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于将我们的应用程序部署到Cloud Foundry。
- en: Cloud Foundry
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: The Cloud Foundry Java buildpack has excellent support for Spring Boot. We can
    deploy standalone applications based on JARs as well as the traditional Java EE
    WAR applications.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Foundry的Java构建包对Spring Boot有很好的支持。我们可以部署基于JAR的独立应用程序，也可以部署传统的Java EE WAR应用程序。
- en: 'Cloud Foundry provides a Maven plugin to deploy applications:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Foundry提供了一个Maven插件来部署应用程序：
- en: '[PRE34]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Before we can deploy our application, we need to configure the application with
    a target and a space to deploy the application to.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们部署应用程序之前，我们需要为应用程序配置目标和空间以部署应用程序。
- en: 'The following are the steps involved:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及以下步骤：
- en: We need to create a pivotal Cloud Foundry account at ;[https://account.run.pivotal.io/sign-up](https://account.run.pivotal.io/sign-up).
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在[https://account.run.pivotal.io/sign-up](https://account.run.pivotal.io/sign-up)创建一个Pivotal
    Cloud Foundry账户。
- en: Once we have an account, we can log in at [https://run.pivotal.io](https://run.pivotal.io)
    to create an organization and space. Have the org and space details ready as we
    need them in order to deploy the application.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了账户，我们可以登录到[https://run.pivotal.io](https://run.pivotal.io)创建一个组织和空间。准备好组织和空间的详细信息，因为我们需要它们来部署应用程序。
- en: 'We can update the plugin with the configuration of `org` and `space`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`org`和`space`的配置更新插件：
- en: '[PRE35]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We need to log in to Cloud Foundry using the Maven plugin on command prompt
    or terminal:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Maven插件在命令提示符或终端上登录到Cloud Foundry：
- en: '[PRE36]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If everything is successful, you will see a message, as shown here:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到一条消息，如下所示：
- en: '[PRE37]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once you are able to log in, you can push the application to Cloud Foundry:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您能够登录，您可以将应用程序推送到Cloud Foundry：
- en: '[PRE38]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Once we execute the command, Maven will compile, run tests, build the application
    JAR or WAR, and then deploy it to the Cloud:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行命令，Maven将编译，运行测试，构建应用程序的JAR或WAR，然后将其部署到云端：
- en: '[PRE39]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once the application is up and running on the Cloud, we can use the URL from
    the log to launch the application: [http://springboot-for-beginners-example.cfapps.io](http://springboot-for-beginners-example.cfapps.io).'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序在云端运行起来，我们可以使用日志中的URL来启动应用程序：[http://springboot-for-beginners-example.cfapps.io](http://springboot-for-beginners-example.cfapps.io)。
- en: You can find more information about the Java Build Pack of Cloud Foundry at
    [https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven](https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven](https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven)找到有关Cloud
    Foundry的Java Build Pack的更多信息。
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Spring Boot makes developing Spring-based applications easy. It enables us to
    create production-ready applications very quickly.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot使开发基于Spring的应用程序变得容易。它使我们能够非常快速地创建生产就绪的应用程序。
- en: In this chapter, we understood ; ;the different external configuration options
    provided by Spring Boot. We looked at embedded servers and deployed a test application
    to a ;PaaS Cloud platform--Cloud Foundry. ;We explored how to monitor our application
    in the production using Spring Boot Actuator. At the end, we looked at ;the features
    that make a developer more productive--Spring Boot developer tools and live reload.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Spring Boot提供的不同外部配置选项。我们查看了嵌入式服务器，并将一个测试应用程序部署到了PaaS云平台--Cloud Foundry。我们探讨了如何使用Spring
    Boot执行器在生产环境中监视我们的应用程序。最后，我们看了一下使开发人员更加高效的功能--Spring Boot开发人员工具和实时重新加载。
- en: In the next chapter, we will shift our attention toward data. We will cover
    Spring Data and take a look at how it makes integration with JPA and providing
    Rest services easier.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把注意力转向数据。我们将涵盖Spring Data，并看看它如何使与JPA集成和提供Rest服务更容易。
