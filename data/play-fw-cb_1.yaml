- en: Chapter 1. Basics of Play Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Play框架基础
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Installing Play Framework
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Play框架
- en: Creating a Play application using Typesafe Activator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Typesafe Activator创建Play应用程序
- en: Using the Play console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Play控制台
- en: Working with modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与模块一起工作
- en: Working with controllers and routes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与控制器和路由一起工作
- en: Using Action parameters in controllers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器中使用动作参数
- en: Using reverse routing and redirects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反向路由和重定向
- en: Working with View templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与视图模板一起工作
- en: Using helper tags
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用辅助标签
- en: Using View layouts and Includes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用视图布局和包含
- en: Working with XML and text files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与XML和文本文件一起工作
- en: Using Ebean (Java) with MySQL
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ebean（Java）与MySQL
- en: Using Anorm (Scala) and database evolutions with MYSQL
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Anorm（Scala）和MySQL数据库演变
- en: Using a form template and web actions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单模板和Web动作
- en: Using a form validation
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单验证
- en: Securing form submission
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护表单提交
- en: Testing with JUnit (Java) and specs2 (Scala)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JUnit（Java）和specs2（Scala）进行测试
- en: Testing models
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试模型
- en: Testing controllers
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试控制器
- en: Introduction
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Play is a developer-friendly and modern web application framework for both Java
    and Scala. This first chapter will take you through the steps in installing Play
    Framework for local development. This chapter will describe the Play application
    project directory structure, its various members and its function in a Play application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Play是一个既适用于Java也适用于Scala的开发者友好的现代Web应用程序框架。本章将带您了解安装Play框架进行本地开发的步骤。本章将描述Play应用程序项目目录结构、其各种成员及其在Play应用程序中的功能。
- en: This chapter will also introduce you to the `Activator` command, which replaces
    the old Play command. Activator is used for various stages during development,
    including compilation, downloading library dependencies, testing, and building.
    It is really quite similar to other build tools such as Ant or Maven.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将向您介绍`Activator`命令，它取代了旧的Play命令。Activator在开发过程中的各个阶段都得到使用，包括编译、下载库依赖项、测试和构建。它实际上与其他构建工具（如Ant或Maven）非常相似。
- en: This first chapter will also go about implementing **Model-View-Controller**
    (**MVC**) components available in Play Framework. This will be followed by source
    code to create controllers and routing actions using View templates and model
    components used to interface with an RDBMS (such as MySQL). This chapter will
    tackle basic HTTP forms, recognizing the importance of modern web applications
    being able to deal with user interactivity and data and how Play Framework provides
    various APIs to make life easier for developers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将介绍如何在Play框架中实现**模型-视图-控制器**（**MVC**）组件。这将随后是创建控制器和路由动作的源代码，使用视图模板和用于与关系数据库管理系统（如MySQL）接口的模型组件。本章将处理基本的HTTP表单，认识到现代Web应用程序能够处理用户交互和数据的重要性，以及Play框架如何提供各种API来简化开发者的工作。
- en: By the end of the chapter, you should have a good grasp of how to implement
    basic web application functionalities such as form submissions and data access
    with MySQL, create URL routes to web actions, and create views composed of smaller,
    modular, and reusable view components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '到本章结束时，您应该能够很好地掌握如何实现基本的Web应用程序功能，例如使用MySQL进行表单提交和数据访问，创建指向Web动作的URL路由，以及创建由更小、模块化和可重用视图组件组成的视图。 '
- en: Most of the recipes in this chapter assume that you have a level of familiarity
    with Java development, web application development, command-line interfaces, **Structured
    Query Language** (**SQL**), development build tools, third-party library usage,
    dependency management, and unit testing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的大多数菜谱都假设您对Java开发、Web应用程序开发、命令行界面、**结构化查询语言**（**SQL**）、开发构建工具、第三方库使用、依赖管理以及单元测试有一定程度的熟悉。
- en: Installing Play Framework
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Play框架
- en: This recipe will guide you through installing Play Framework 2.3 for local development.
    This section will guide you on the prerequisite installations for Play Framework,
    such as the **Java Development Kit** (**JDK**), and the necessary steps to ensure
    that Play Framework has access to the JDK's binaries.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱将指导您安装Play Framework 2.3以进行本地开发。本节将指导您进行Play框架的先决条件安装，例如**Java开发工具包**（**JDK**），以及确保Play框架可以访问JDK的二进制文件的必要步骤。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Play Framework requires a JDK version of 6 or above. Head over to the Oracle
    website and download the appropriate JDK for your development machine at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Play 框架需要 6 或更高版本的 JDK。请访问 Oracle 网站，下载适合您的开发机器的 JDK，链接为 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)。
- en: 'Once you have downloaded a suitable JDK, ensure that the binary folder is added
    to the system path:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下载合适的 JDK 后，请确保将二进制文件夹添加到系统路径中：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can also refer to Oracle's online documentation for more information regarding
    setting environment variables at [http://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html](http://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以参考 Oracle 的在线文档以获取有关设置环境变量的更多信息，链接为 [http://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html](http://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html)。
- en: 'Here''s how you can verify that the JDK is now accessible in the system path:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何验证 JDK 是否已添加到系统路径中的方法：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As of Play 2.3.x, Play is now distributed using a tool called Typesafe Activator
    ([http://typesafe.com/activator](http://typesafe.com/activator)), install it using
    following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 Play 2.3.x，Play 现在通过一个名为 Typesafe Activator 的工具进行分发，按照以下步骤安装它：[http://typesafe.com/activator](http://typesafe.com/activator)。
- en: Download the *Typesafe Reactive Platform* distribution at [https://typesafe.com/platform/getstarted](https://typesafe.com/platform/getstarted)
    and unzip it at your desired location that has write access.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 *Typesafe Reactive Platform* 分发版，链接为 [https://typesafe.com/platform/getstarted](https://typesafe.com/platform/getstarted)，并将其解压到您有写访问权限的期望位置。
- en: 'After downloading and unzipping the distribution, add the `Activator` installation
    directory to your system path:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压分发版后，将 `Activator` 安装目录添加到您的系统路径中：
- en: '[PRE2]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, verify that Activator is now accessible in the system path:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，验证 Activator 是否已添加到系统路径中：
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should now be able to create a Play application using the `activator` command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该可以使用 `activator` 命令创建 Play 应用程序：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a Play application using Typesafe Activator
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Typesafe Activator 创建 Play 应用程序
- en: Once you have a JDK and Activator installed and properly configured, you should
    be ready to create Play 2.3.x applications. Beginning with Play 2.0, developers
    are now able to create Java- or Scala-based Play applications. Activator provides
    many Play project templates for both Java and Scala. For the first project, let
    us use the basic project templates. We will also be using the command-line interface
    of Activator across all recipes in this cookbook.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装并正确配置了 JDK 和 Activator，您就应该准备好创建 Play 2.3.x 应用程序。从 Play 2.0 开始，开发者现在可以创建基于
    Java 或 Scala 的 Play 应用程序。Activator 为 Java 和 Scala 提供了许多 Play 项目模板。对于第一个项目，让我们使用基本项目模板。我们还将使用
    Activator 的命令行界面来处理本食谱中的所有配方。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You need to perform the following for creating the templates for both Java
    and Scala:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行以下操作以创建 Java 和 Scala 的模板：
- en: 'For Java, let''s use the `play-java` template and call our first application
    `foo_java` by using the following command:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Java，让我们使用 `play-java` 模板，并通过以下命令将我们的第一个应用程序命名为 `foo_java`：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Scala, let''s use the `play-scala` template and call our first application
    `foo_scala` by using the following command:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Scala，让我们使用 `play-scala` 模板，并通过以下命令将我们的第一个应用程序命名为 `foo_scala`：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This `Activator` command creates the project''s root directory (`foo_java`
    or `foo_scala`) and creates all the relevant subdirectories, config files, and
    class files:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `Activator` 命令创建项目的根目录（`foo_java` 或 `foo_scala`）并创建所有相关的子目录、配置文件和类文件：
- en: 'The following screenshot shows the root directory for `foo_java`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `foo_java` 的根目录：
- en: '![](img/qUbtEvvV.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/qUbtEvvV.jpg)'
- en: 'The following screenshot shows the root directory for `foo_scala`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `foo_scala` 的根目录：
- en: '![](img/Tbg8FVM3.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Tbg8FVM3.jpg)'
- en: As you notice, both the Java and Scala project template generated an almost
    identical list of files, except for class files that are generated as `.java`
    files for the *play_java* template and as`.scala` files for the *play_scala* template.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Java 和 Scala 项目模板生成的文件列表几乎相同，只是对于 *play_java* 模板，生成的类文件是 `.java` 文件，而对于
    *play_scala* 模板，生成的类文件是 `.scala` 文件。
- en: 'For the project''s directory structure, one of the more important aspects of
    Play Framework is its adherence to the concept of convention over configuration.
    This is best reflected by the standard project directory structure of every Play
    application it follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于项目的目录结构，Play 框架的一个重要方面是它遵循约定优于配置的概念。这最好地体现在每个 Play 应用程序遵循的标准项目目录结构中：
- en: 1st Level
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 1st Level
- en: 2nd Level
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 2nd Level
- en: 3rd Level
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 3rd Level
- en: Description
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 描述
- en: '`app/`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/`'
- en: Application source files
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序源文件
- en: '`assets`/'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`assets`/'
- en: Compiled JavaScript or style sheets
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的 JavaScript 或样式表
- en: '`stylesheets`/'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`stylesheets`/'
- en: Compiled style sheet (such as LESS or SASS)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的样式表（例如 LESS 或 SASS）
- en: '`javascripts`/'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`javascripts`/'
- en: Compiled JavaScript (such as CoffeeScript)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的 JavaScript（例如 CoffeeScript）
- en: '`controllers`/'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`controllers`/'
- en: Application request-response controllers
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序请求-响应控制器
- en: '`models`/'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`models`/'
- en: Application domain objects
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序领域对象
- en: '`views`/'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`views`/'
- en: Application presentation views
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序展示视图
- en: '`conf/`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`conf/`'
- en: Application configuration files
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序配置文件
- en: '`public`/'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`public`/'
- en: Publicly available assets
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 公共可用的资源
- en: '`stylesheets`/'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`stylesheets`/'
- en: Publicly available style sheet files
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 公共可用的样式表文件
- en: '`javascripts`/'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`javascripts`/'
- en: Publicly available JavaScript files
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 公共可用的 JavaScript 文件
- en: '`project`/'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`project`/'
- en: Build configuration files (such as `Build.scala` and `plugins.sbt)`
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 构建配置文件（例如 `Build.scala` 和 `plugins.sbt`）
- en: '`lib`/'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`/'
- en: Unmanaged libraries and packages
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 未管理的库和包
- en: '`logs`/'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`logs`/'
- en: Log files
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件
- en: '`test`/'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`/'
- en: Test source files
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 测试源文件
- en: Source code, configuration files, and web assets are organized in a predefined
    directory structure, making it easy for the developer to navigate through the
    project directory tree and find relevant files in logical placements.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码、配置文件和 Web 资源组织在预定义的目录结构中，这使得开发者能够轻松地浏览项目目录树，并在逻辑位置中找到相关文件。
- en: There's more...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Go to [http://typesafe.com/activator/templates](http://typesafe.com/activator/templates)
    for a comprehensive list of available project templates.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [http://typesafe.com/activator/templates](http://typesafe.com/activator/templates)
    查看可用的项目模板的完整列表。
- en: Using the Play console
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Play 控制台
- en: The Play console is a command-line interface tool used to build and run Play
    applications. It is important for every developer to be familiar with the available
    commands, such as `clean`, `compile`, `dependencies`, and `run`, to fully utilize
    the power of the Play console.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Play 控制台是一个用于构建和运行 Play 应用程序的命令行界面工具。对于每个开发者来说，熟悉可用的命令，如 `clean`、`compile`、`dependencies`
    和 `run`，以充分利用 Play 控制台的功能是非常重要的。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You need to perform the following to use the Play console for both Java and
    Scala:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要执行以下操作才能使用 Play 控制台来运行 Java 和 Scala：
- en: After Activator finishes setting up the Play project, you can enter the Play
    console of your Play application.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Activator 完成设置 Play 项目后，你可以进入你的 Play 应用程序的 Play 控制台。
- en: 'Use the following command for Java:'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行 Java：
- en: '[PRE7]'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use the following command for Scala:'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行 Scala：
- en: '[PRE8]'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have entered the Play console, you can run your application in the
    development mode:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入 Play 控制台，你就可以以开发模式运行你的应用程序：
- en: 'Use the following command for Java:'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行 Java：
- en: '[PRE9]'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the following command for Scala:'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行 Scala：
- en: '[PRE10]'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, open a web browser and head over to `http://localhost:9000`:![](img/OgbeLjyc.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开网络浏览器并转到 `http://localhost:9000`：![图片](img/OgbeLjyc.jpg)
- en: 'Use the following command line to start your Play application with Hot-Reloading
    enabled:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行启用热重载功能启动你的 Play 应用程序：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the following command line to start your Play application on a different
    port:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行在不同的端口上启动你的 Play 应用程序：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: Running your application in development mode configures your application to
    run in auto-reload, where Play will attempt to recompile any recent changes to
    the project files, removing the need to manually restart your application for
    every code edit. You are now ready to view your application using your web browser.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以开发模式运行你的应用程序将配置你的应用程序以自动重新加载运行，Play 将尝试重新编译项目文件中的任何最近更改，从而无需为每次代码编辑手动重新启动应用程序。你现在可以使用网络浏览器查看你的应用程序。
- en: There's more…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'You can also use the Play console to manually compile class files using the
    `compile` command in the activator console (use the `activator` command):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 Play 控制台通过 activator 控制台中的 `compile` 命令手动编译类文件（使用 `activator` 命令）：
- en: 'Use the following command for Java:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行 Java：
- en: '[PRE13]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Use the following command for Scala:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行 Scala：
- en: '[PRE14]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also run Play commands directly instead of using the Play console:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接运行 Play 命令，而不是使用 Play 控制台：
- en: 'Use the following command for Java:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行Java：
- en: '[PRE15]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use the following command for Scala:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令进行Scala：
- en: '[PRE16]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use the following command to generate an eclipse project file for your existing
    Play application using `Activator`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令使用`Activator`为你的现有Play应用程序生成eclipse项目文件：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Use the following command to generate an IntelliJ IDEA project file for your
    existing Play application using `Activator`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令使用`Activator`为你的现有Play应用程序生成IntelliJ IDEA项目文件：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Working with modules
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块
- en: You can utilize other Play Framework or third-party modules in your Play application.
    This is easily done by editing the build file (`build.sbt`) and declaring library
    dependencies in the style of `sbt` dependency declaration.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的Play应用程序中利用其他Play框架或第三方模块。这可以通过编辑构建文件（`build.sbt`）并以`sbt`依赖声明的方式声明库依赖来实现。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'You need to perform the following steps to declare a module:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要执行以下步骤来声明一个模块：
- en: 'Open the `build.sbt` file and add the following lines, using the notation of
    the group ID `%` module name `%` version while declaring library dependencies:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`build.sbt`文件，并添加以下行，在声明库依赖时使用组ID`%`模块名称`%`版本：
- en: '[PRE19]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the changes to `build.sbt` have been saved, head over to the command line
    and have Activator download the newly declared dependencies:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存对`build.sbt`的更改后，转到命令行，让Activator下载新声明的依赖项：
- en: '[PRE20]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we declare what our Play application will need and reference
    the **Java Database Connectivity** (**JDBC**) module provided by Play Framework
    and the MySQL Java Connector module provided by MySQL. Once we have our modules
    declared, we can run the activator dependencies command to make Activator download
    all declared dependencies from the public Maven repositories and store them in
    the local development machine.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们声明了我们的Play应用程序需要什么，并引用了由Play框架提供的**Java数据库连接**（**JDBC**）模块以及由MySQL提供的MySQL
    Java连接器模块。一旦我们声明了模块，我们就可以运行activator dependencies命令，使Activator从公共Maven仓库下载所有声明的依赖项，并将它们存储在本地开发机器上。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Please refer to the Play Framework website for a complete list of official Play
    modules ([https://www.playframework.com/documentation/2.3.x/Modules](https://www.playframework.com/documentation/2.3.x/Modules)).
    You can also refer to the Typesafe official release repository for other useful
    plugins and modules at your disposal ([http://repo.typesafe.com/typesafe/releases/](http://repo.typesafe.com/typesafe/releases/)).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考Play框架网站以获取官方Play模块的完整列表（[https://www.playframework.com/documentation/2.3.x/Modules](https://www.playframework.com/documentation/2.3.x/Modules)）。你还可以参考Typesafe官方发布仓库以获取其他可用的插件和模块（[http://repo.typesafe.com/typesafe/releases/](http://repo.typesafe.com/typesafe/releases/)）。
- en: Working with controllers and routes
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制器和路由进行工作
- en: Play applications use controllers to handle HTTP requests and responses. Play
    controllers are composed of actions that have specific functionality. Play applications
    use a router to map HTTP requests to controller actions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Play应用程序使用控制器来处理HTTP请求和响应。Play控制器由具有特定功能的行为组成。Play应用程序使用路由器将HTTP请求映射到控制器行为。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To create a new page, which prints out "Hello World" for a Play Java project,
    we need to take the following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新页面，该页面为Play Java项目打印出“Hello World”，我们需要采取以下步骤：
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用热重载功能运行`foo_java`应用程序：
- en: '[PRE21]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Edit `foo_java/app/controllers/Application.java` by adding the following action:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作编辑`foo_java/app/controllers/Application.java`：
- en: '[PRE22]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Edit `foo_java/conf/routes` by adding the following line:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行编辑`foo_java/conf/routes`：
- en: '[PRE23]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'View your new hello page using a web browser:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看你的新hello页面：
- en: '[PRE24]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用热重载功能运行`foo_scala`应用程序：
- en: '[PRE25]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Edit `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作编辑`foo_scala/app/controllers/Application.scala`：
- en: '[PRE26]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Edit `foo_scala/conf/routes` by adding the following line:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行编辑`foo_scala/conf/routes`：
- en: '[PRE27]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'View your new hello page using a web browser:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看你的新hello页面：
- en: '[PRE28]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we enumerated the steps necessary to create a new accessible
    page by creating a new web action in a controller and defined this new page's
    URL route by adding a new entry to the `conf/routes` file. We should now have
    a "Hello World" page, and all without having to reload the application server.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们列举了通过在控制器中创建一个新的网络操作来创建一个新的可访问页面的必要步骤，并通过向 `conf/routes` 文件中添加一个新条目来定义这个新页面的URL路由。我们现在应该有一个“Hello
    World”页面，而且无需重新加载应用程序服务器。
- en: Using Action parameters in controllers
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制器中使用操作参数
- en: Web applications should be able to accept dynamic data as part of their canonical
    URL. An example of this is `GET` operations of RESTful API web services. Play
    makes it easy for developers to implement this.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用应该能够接受动态数据作为其规范URL的一部分。一个例子是RESTful API网络服务的 `GET` 操作。Play使得开发者能够轻松实现这一点。
- en: How to do it…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'For Java, we need to take the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: Run the `foo_java` application with Hot-Reloading enabled.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Hot-Reloading运行 `foo_java` 应用程序。
- en: 'Edit `foo_java/app/controllers/Application.java` by adding the following action:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作来编辑 `foo_java/app/controllers/Application.java`：
- en: '[PRE29]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Edit `foo_java/conf/routes` by adding the following line:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来编辑 `foo_java/conf/routes`：
- en: '[PRE30]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'View your new echo page using a web browser:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看你的新echo页面：
- en: '[PRE31]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You should be able to see the text **Echoing foo**.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能够看到文本 **Echoing foo**。
- en: 'For Scala, we need to take the following steps:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Hot-Reloading运行 `foo_scala` 应用程序。
- en: 'Edit `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作来编辑 `foo_scala/app/controllers/Application.scala`：
- en: '[PRE32]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Edit `foo_scala/conf/routes` by adding the following line:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来编辑 `foo_scala/conf/routes`：
- en: '[PRE33]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'View your new echo page using a web browser:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看你的新echo页面：
- en: '[PRE34]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You should be able to see the text **Echoing bar**.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能够看到文本 **Echoing bar**。
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we made edits to just two files, the application controller,
    `Application.java` and `Application.scala`, and `routes`. We added a new web action,
    which takes in a String argument `msg` in `Application.scala` and returns the
    contents of the message to the HTTP response. We then add a new entry in the `routes`
    file that declares a new URL route and declares the `:msg` route parameter as
    part of the canonical URL.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只修改了两个文件，应用程序控制器 `Application.java` 和 `Application.scala` 以及 `routes`
    文件。我们在 `Application.scala` 中添加了一个新的网络操作，该操作接受一个String类型的参数 `msg` 并将消息的内容返回给HTTP响应。然后我们在
    `routes` 文件中添加了一个新的条目，声明了一个新的URL路由，并将 `:msg` 路由参数作为规范URL的一部分。
- en: Using reverse routing and redirects
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反向路由和重定向
- en: One of the more essential tasks for a web application is to be able to redirect
    HTTP requests, and redirecting HTTP with Play Framework is quite straightforward.
    This recipe shows how developers can use reverse routing to refer to defined routes.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个网络应用来说，能够重定向HTTP请求是一个更基本的任务，而使用Play框架重定向HTTP非常简单。这个菜谱展示了开发者如何使用反向路由来引用已定义的路由。
- en: How to do it…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'For Java, we need to take the following steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: Run the `foo_java` application with Hot-Reloading enabled.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Hot-Reloading运行 `foo_java` 应用程序。
- en: 'Edit `foo_java/app/controllers/Application.java` by adding the following action:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作来编辑 `foo_java/app/controllers/Application.java`：
- en: '[PRE35]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Edit `foo_java/conf/routes` by adding the following line:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来编辑 `foo_java/conf/routes`：
- en: '[PRE36]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'View your new echo page using a web browser:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看你的新echo页面：
- en: '[PRE37]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You should be able to see the text **Echoing HelloWorldv2**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能够看到文本 **Echoing HelloWorldv2**。
- en: Notice that the URL in the web browser has also redirected to `http://localhost:9000/echo/HelloWorldv2`
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，在网页浏览器中的URL也已经重定向到 `http://localhost:9000/echo/HelloWorldv2`
- en: 'For Scala, we need to take the following steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Hot-Reloading运行 `foo_scala` 应用程序。
- en: 'Edit `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作来编辑 `foo_scala/app/controllers/Application.scala`：
- en: '[PRE38]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Edit `foo_scala/conf/routes` by adding the following line:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来编辑 `foo_scala/conf/routes`：
- en: '[PRE39]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'View your new echo page using a web browser:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看你的新echo页面：
- en: '[PRE40]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You should be able to see the text **Echoing HelloWorldv2**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能够看到文本 **Echoing HelloWorldv2**。
- en: Notice that the URL in the web browser has also redirected to `http://localhost:9000/echo/HelloWorldv2`
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，在网页浏览器中的URL也已经重定向到 `http://localhost:9000/echo/HelloWorldv2`
- en: How it works...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we utilized reverse routes while referring to existing routes
    inside other action methods. This is handy, as we will not need to hard code rendered
    URL routes from within other action methods. We also utilized our first HTTP redirect,
    a very common web application function, by which we were able to issue a 302 HTTP
    redirect, a standard HTTP status code handled by all standard web servers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们在引用其他操作方法中的现有路由时使用了反向路由。这很方便，因为我们不需要在其他操作方法中硬编码渲染的URL路由。我们还通过使用我们的第一个HTTP重定向，一个非常常见的Web应用程序功能，来执行一个302
    HTTP重定向，这是一个所有标准Web服务器都处理的标准HTTP状态码。
- en: Working with View templates
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用视图模板
- en: You expect to be able to send some data back to the View itself in web applications;
    this is quite straightforward with Play Framework. A Play View template is simply
    a text file that contains directives, web markup tags, and template tags. The
    `View Template` files also follow standard naming conventions and they are placed
    in predefined directories within the Play project directory, which makes it easier
    to manage template files.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你期望能够在Web应用程序中将一些数据发送回视图本身；在Play框架中，这非常简单直接。一个Play视图模板只是一个包含指令、网页标记标签和模板标签的文本文件。`视图模板`文件也遵循标准的命名约定，并且它们被放置在Play项目目录中的预定义目录中，这使得管理模板文件变得更加容易。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: Run the `foo_java` application with Hot-Reloading enabled.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启用热重载的功能运行`foo_java`应用程序。
- en: 'Create the view file `products.scala.html` in `foo_java/app/views/`. Add the
    contents of the view file:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/app/views/`中创建视图文件`products.scala.html`。添加视图文件的内容：
- en: '[PRE41]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Edit `foo_java/app/controllers/Application.java` by adding the following action:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作来编辑`foo_java/app/controllers/Application.java`：
- en: '[PRE42]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Edit `foo_java/conf/routes` by adding the following line:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来编辑`foo_java/conf/routes`：
- en: '[PRE43]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'View the products page using a web browser:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器查看产品页面：
- en: '[PRE44]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启用热重载的功能运行`foo_scala`应用程序。
- en: 'Create the view file `products.scala.html` in `foo_scala/app/views/`. Add the
    contents of the view file:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/app/views/`中创建视图文件`products.scala.html`。添加视图文件的内容：
- en: '[PRE45]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Edit `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作来编辑`foo_scala/app/controllers/Application.scala`：
- en: '[PRE46]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Edit `foo_scala/conf/routes` by adding the following line:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来编辑`foo_scala/conf/routes`：
- en: '[PRE47]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'View the products page using a web browser:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器查看产品页面：
- en: '[PRE48]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we were able to retrieve a collection of data from the server
    side and display the contents of the collection in our View template. For now,
    we use a static collection of String objects to display in the View template instead
    of retrieving some data set from a database, which we will tackle in the upcoming
    recipes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们能够从服务器端检索数据集合，并在我们的视图模板中显示集合的内容。目前，我们使用一个静态的字符串对象集合在视图模板中显示，而不是从数据库中检索一些数据集，这将在接下来的菜谱中解决。
- en: We introduced declaring parameters in View templates by declaring them in the
    first line of code in our view template and passing data into our View templates
    from the controller.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在视图模板的第一行代码中声明参数并在控制器中传递数据到视图模板中引入了在视图模板中声明参数的方法。
- en: Using helper tags
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用辅助标签
- en: View tags allow developers to create reusable view functions and components
    and make the management of views a lot simpler and easier.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 视图标签允许开发者创建可重用的视图函数和组件，从而使视图的管理变得更加简单和容易。
- en: How to do it...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: Run the `foo_java` application with Hot-Reloading enabled.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启用热重载的功能运行`foo_java`应用程序。
- en: Create the tag file `productsIterator.scala.html` in `foo_java/app/views/tags`
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/app/views/tags`中创建标签文件`productsIterator.scala.html`
- en: 'Add the contents of the tag file:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加标签文件的以下内容：
- en: '[PRE49]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Edit `foo_java/app/views/products.scala.html` by adding the following block:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下块来编辑`foo_java/app/views/products.scala.html`：
- en: '[PRE50]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Reload the products page using a web browser to see the new product listing,
    using an unordered list HTML tag:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器重新加载产品页面以查看新的产品列表，使用无序列表HTML标签：
- en: '[PRE51]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启用热重载的功能运行`foo_scala`应用程序。
- en: Create the tag file `productsIterator.scala.html` in `foo_scala/app/views/tags`
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/app/views/tags`中创建标签文件`productsIterator.scala.html`
- en: 'Add contents of the tag file:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加标签文件的内容：
- en: '[PRE52]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Edit `foo_scala/app/views/products.scala.html` by adding the following block:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下代码块编辑`foo_scala/app/views/products.scala.html`：
- en: '[PRE53]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Reload the products page using a web browser to see the new products listing,
    using an unordered list HTML tag:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载产品页面，以查看新的产品列表，使用无序列表HTML标签：
- en: '[PRE54]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we were able to create a new view tag in `app/views/tags`. We
    proceeded to use this tag in our View template.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们能够在`app/views/tags`中创建一个新的视图标签。然后我们继续在我们的视图模板中使用这个标签。
- en: First, we created a new tag that receives a collection of product titles, from
    which it is then displayed in the template as an unordered list. We then imported
    the tag in our products View template and invoked the helper function by calling
    it using its filename (`@productsIterator(products)`).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个新的标签，该标签接收一组产品标题，然后将其作为无序列表在模板中显示。然后我们在产品视图模板中导入该标签，并通过调用其文件名（`@productsIterator(products)`）来调用辅助函数。
- en: Using View layouts and Includes
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用视图布局和包含
- en: For this recipe, we will create a main layout View template that will include
    a defined header and footer view. This will allow our View template to inherit
    a consistent look and feel by including this main View template and manage all
    UI changes in a single file. Our Products view will utilize the main layout view
    in this example.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将创建一个包含定义好的头部和尾部视图的主布局视图模板。这将允许我们的视图模板通过包含这个主视图模板来继承一致的外观和感觉，并在单个文件中管理所有UI更改。在我们的产品视图中，我们将使用这个示例中的主布局视图。
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: Run the `foo_java` application with Hot-Reloading enabled.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用热重载功能运行`foo_java`应用程序。
- en: Create the main layout view file `mainLayout.scala.html` in `foo_java/app/views/common`
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/app/views/common`中创建主布局视图文件`mainLayout.scala.html`。
- en: 'Add the contents of the main layout view file:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加主布局视图文件的内容：
- en: '[PRE55]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create the header view file `header.scala.html` in `foo_java/app/views/common`
    and add the following code:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/app/views/common`中创建头部视图文件`header.scala.html`并添加以下代码：
- en: '[PRE56]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create the footer view file `footer.scala.html` in `foo_java/app/views/common`
    and add the following code:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/app/views/common`中创建尾部视图文件`footer.scala.html`并添加以下代码：
- en: '[PRE57]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Edit the products view file `foo_java/app/views/products.scala.html` to use
    the main layout View template by replacing all the file contents with the following
    code:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`foo_java/app/views/products.scala.html`产品视图文件，以使用主布局视图模板，将所有文件内容替换为以下代码：
- en: '[PRE58]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Reload the updated products page using a web browser:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载更新后的产品页面：
- en: '[PRE59]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用热重载功能运行`foo_scala`应用程序。
- en: Create the main layout view file `mainLayout.scala.html` in `foo_scala/app/views/common`
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/app/views/common`中创建主布局视图文件`mainLayout.scala.html`。
- en: 'Add the contents of the main layout view file:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加主布局视图文件的内容：
- en: '[PRE60]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Create the header view file `header.scala.html` in `foo_scala/app/views/common`
    and add the following code:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/app/views/common`中创建头部视图文件`header.scala.html`并添加以下代码：
- en: '[PRE61]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create the footer view file `footer.scala.html` in `foo_scala/app/views/common`
    and add the following code:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/app/views/common`中创建尾部视图文件`footer.scala.html`并添加以下代码：
- en: '[PRE62]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Edit the products view file `foo_scala/app/views/products.scala.html` to use
    the main layout view template by replacing all the file contents with following
    code:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`foo_scala/app/views/products.scala.html`产品视图文件，以使用主布局视图模板，将所有文件内容替换为以下代码：
- en: '[PRE63]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Reload the updated products page using a web browser:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载更新后的产品页面：
- en: '[PRE64]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a main layout view template that can be reused throughout
    the Play application. A common layout view removes the need to duplicate the view
    logic in related views and makes it a lot easier to manage parent views and child
    views.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个可以在整个Play应用程序中重用的主布局视图模板。一个常见的布局视图消除了在相关视图中重复视图逻辑的需要，并使得管理父视图和子视图变得容易得多。
- en: Working with XML and text files
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理XML和文本文件
- en: Using View templates, we are also able to respond to HTTP requests in other
    content types such as text files and XML data formats. Play Framework has native
    handlers for XML and text file content type responses.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视图模板，我们也能够响应HTTP请求的其他内容类型，如文本文件和XML数据格式。Play框架具有原生处理XML和文本文件内容类型响应的处理程序。
- en: How to do it...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Hot-Reloading 运行 `foo_java` 应用程序：
- en: '[PRE65]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Create the text-based view template file `products.scala.txt` in `app/views/`
    and add the following content:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/views/` 中创建基于文本的视图模板文件 `products.scala.txt` 并添加以下内容：
- en: '[PRE66]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Create the XML-based view template file `products.scala.xml` in `app/views/`
    and add the following content:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/views/` 中创建基于 XML 的视图模板文件 `products.scala.xml` 并添加以下内容：
- en: '[PRE67]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Edit `foo_java/app/controllers/Application.java` by adding the following actions:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下动作编辑 `foo_java/app/controllers/Application.java`：
- en: '[PRE68]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Edit `foo_java/conf/routes` by adding the following lines:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行编辑 `foo_java/conf/routes`：
- en: '[PRE69]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'View the new routes and actions using a web browser:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看新的路由和动作：
- en: '`http://localhost:9000/products.txt` and,'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:9000/products.txt` 和，'
- en: '`http://localhost:9000/products.xml`'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:9000/products.xml`'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Scala，我们需要采取以下步骤：
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Hot-Reloading 运行 `foo_scala` 应用程序：
- en: '[PRE70]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Create the text-based view template file `products.scala.txt` in `app/views/`
    and add the following content:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/views/` 中创建基于文本的视图模板文件 `products.scala.txt` 并添加以下内容：
- en: '[PRE71]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Create the XML-based view template file `products.scala.xml` in `app/views/`
    and add the following content:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/views/` 中创建基于 XML 的视图模板文件 `products.scala.xml` 并添加以下内容：
- en: '[PRE72]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Edit `foo_scala/app/controllers/Application.scala` by adding the following
    actions:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下动作编辑 `foo_scala/app/controllers/Application.scala`：
- en: '[PRE73]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Edit `foo_scala/conf/routes` by adding the following lines:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行编辑 `foo_scala/conf/routes`：
- en: '[PRE74]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'View the new routes and actions using a web browser:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看新的路由和动作：
- en: '`http://localhost:9000/products.txt` and'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:9000/products.txt` 和'
- en: '`http://localhost:9000/products.xml`'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:9000/products.xml`'
- en: How it works...
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we utilized build-in support for other content types in Play
    Framework. We created new URL routes and web actions to be able to respond to
    requests for data in XML or text file formats. By following file naming standards
    and convention for views, we were able to create view templates in HTML, XML,
    and text file formats, which Play automatically handles, and then adds the appropriate
    content type headers in the HTTP response.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们利用了 Play 框架内置的其他内容类型支持。我们创建了新的 URL 路由和 Web 动作，以便能够响应 XML 或文本文件格式的数据请求。通过遵循文件命名标准和视图约定，我们能够在
    HTML、XML 和文本文件格式中创建视图模板，Play 会自动处理这些模板，并在 HTTP 响应中添加适当的内容类型头。
- en: Using Ebean (Java) with MySQL
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ebean（Java）与 MySQL
- en: Play Framework 2.x includes an object-relational mapping tool called **Ebean**
    for Java-based Play applications. To be able to use Ebean, ensure that Ebean and
    a suitable MySQL driver are declared as project dependencies in `foo_java/build.sbt`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: Play Framework 2.x 包含一个名为 **Ebean** 的对象关系映射工具，用于 Java 基础的 Play 应用程序。为了能够使用 Ebean，请确保在
    `foo_java/build.sbt` 中将 Ebean 和合适的 MySQL 驱动程序声明为项目依赖项。
- en: 'For this recipe, we will be utilizing Ebean with database evolutions. Play
    Framework 2.x gives developers a way to manage database migrations. Database migrations
    are useful for tracking schema changes during the course of application development.
    Database evolutions are enabled by default but can be disabled in `conf/application.conf`
    with the following settings:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将利用 Ebean 进行数据库进化。Play Framework 2.x 为开发者提供了一种管理数据库迁移的方法。数据库迁移在应用程序开发过程中跟踪模式变化非常有用。数据库进化默认启用，但可以在
    `conf/application.conf` 中通过以下设置禁用：
- en: '[PRE75]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Evolution scripts are stored in the `conf/evolutions/default/` directory. For
    more information regarding database evolutions, please refer to Play's online
    documentation at
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 进化脚本存储在 `conf/evolutions/default/` 目录中。有关数据库进化的更多信息，请参阅 Play 的在线文档：
- en: '[https://www.playframework.com/documentation/2.3.x/Evolutions](https://www.playframework.com/documentation/2.3.x/Evolutions).'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.playframework.com/documentation/2.3.x/Evolutions](https://www.playframework.com/documentation/2.3.x/Evolutions)。'
- en: How to do it...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You need to perform the following steps to utilize Ebean:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用 Ebean，你需要执行以下步骤：
- en: 'Add the Ebean dependency in `build.sbt`:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `build.sbt` 中添加 Ebean 依赖项：
- en: '[PRE76]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Ensure that Ebean and MySQL are configured properly in `conf/application.conf`:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 `conf/application.conf` 中正确配置了 Ebean 和 MySQL：
- en: '[PRE77]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'For the next recipes, we need to create our product table in our MySQL database.
    Create our first database evolution file `1.sql` in `conf/evolutions/default`
    and add the following SQL statements:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于接下来的菜谱，我们需要在我们的 MySQL 数据库中创建我们的产品表。在 `conf/evolutions/default` 中创建我们的第一个数据库进化文件
    `1.sql` 并添加以下 SQL 语句：
- en: '[PRE78]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The next step is to create the Ebean model for our entity `Product`:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建我们实体 `Product` 的 Ebean 模型：
- en: '[PRE79]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The following displays various database-oriented operations using Ebean.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了使用 Ebean 的各种数据库操作。
- en: Tip
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您。
- en: Creating a record
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建记录
- en: 'The following code snippet will create a new record:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将创建一条新记录：
- en: '[PRE80]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Updating a record
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新记录
- en: 'The following code snippet will update a record:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将更新一条记录：
- en: '[PRE81]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Querying a record
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询记录
- en: 'The following code snippet will query a record:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将查询一条记录：
- en: '[PRE82]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Retrieving a record
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检索记录
- en: 'The following code snippet will retrieve a record:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将检索一条记录：
- en: '[PRE83]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Using Anorm (Scala) and database evolutions with MySQL
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Anorm（Scala）和 MySQL 数据库演变
- en: Play Framework 2.x includes Anorm, a useful data access library for Scala-based
    Play applications. To be able to use Anorm, ensure that Anorm and a suitable MySQL
    driver are declared as project dependencies in `foo_scala/build.sbt`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: Play Framework 2.x 包含 Anorm，这是一个用于 Scala 基础 Play 应用程序的有用数据访问库。为了能够使用 Anorm，请确保在
    `foo_scala/build.sbt` 中将 Anorm 和合适的 MySQL 驱动程序声明为项目依赖项。
- en: 'For this recipe, we will be utilizing Anorm with database evolutions. Play
    Framework 2.x gives developers a way to manage database migrations. Database migrations
    are useful for tracking schema changes during the course of application development.
    Database evolutions are enabled by default but can be disabled in `conf/application.conf`
    using the following settings:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将利用 Anorm 和数据库演变。Play Framework 2.x 为开发者提供了一种管理数据库迁移的方法。数据库迁移对于跟踪应用程序开发过程中的模式更改非常有用。数据库演变默认启用，但可以在
    `conf/application.conf` 中使用以下设置禁用：
- en: '[PRE84]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Evolution scripts are stored in the `conf/evolutions/default/` directory. For
    more information regarding database evolutions, please refer to Play's online
    documentation at [https://www.playframework.com/documentation/2.3.x/Evolutions](https://www.playframework.com/documentation/2.3.x/Evolutions).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 进化脚本存储在 `conf/evolutions/default/` 目录中。有关数据库进化的更多信息，请参阅 Play 的在线文档，网址为 [https://www.playframework.com/documentation/2.3.x/Evolutions](https://www.playframework.com/documentation/2.3.x/Evolutions)。
- en: 'You need to perform the following steps to utilize Anorm:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行以下步骤来利用 Anorm：
- en: 'Add the Anorm dependency to `build.sbt`:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Anorm 依赖项添加到 `build.sbt`：
- en: '[PRE85]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Ensure that Anorm and MySQL are configured properly in `conf/application.conf`:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 `conf/application.conf` 中正确配置了 Anorm 和 MySQL：
- en: '[PRE86]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For the next recipes, we need to create our products table in our MySQL database.
    Create our first database evolution file `1.sql` in `conf/evolutions/default`
    and add the following SQL statements:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于接下来的菜谱，我们需要在我们的 MySQL 数据库中创建我们的产品表。在 `conf/evolutions/default` 中创建我们的第一个数据库演变文件
    `1.sql`，并添加以下 SQL 语句：
- en: '[PRE87]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: There's more…
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The following sections display various database-oriented operations using `Anorm`.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分展示了使用 `Anorm` 的各种数据库操作。
- en: Creating a new record
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新记录
- en: 'The following code snippet will create a new record:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将创建一条新记录：
- en: '[PRE88]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Updating a record
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新记录
- en: 'The following code snippet will update a record:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将更新一条记录：
- en: '[PRE89]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Deleting a record
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除记录
- en: 'The following code snippet will delete a record:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将删除一条记录：
- en: '[PRE90]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The following code snippet will query a record:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将查询一条记录：
- en: '[PRE91]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The following code snippet will retrieve a record:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将检索一条记录：
- en: '[PRE92]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Finally, we can combine all of these functions in a companion object called
    Product:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将这些功能组合在一个名为 Product 的伴随对象中：
- en: '[PRE93]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Using a form template and web action
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单模板和 Web 动作
- en: As with the majority of web applications, there will always be a need to accept
    an HTTP form, be it a registration form or a login form. Play Framework provides
    helper classes to manage and process HTTP form submissions. In this recipe, we
    will go over the steps to create a simple form and map the web action assigned
    to handle this form submission. We will also utilize the flash scope, which allows
    us to use the flash object to send messages from the controller to the view template
    on a per-request basis.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数网络应用程序一样，总会有接受 HTTP 表单的需求，无论是注册表单还是登录表单。Play 框架提供了帮助类来管理和处理 HTTP 表单提交。在这个菜谱中，我们将介绍创建简单表单并映射处理此表单提交分配的网络操作的步骤。我们还将利用闪存作用域，它允许我们使用闪存对象在每次请求的基础上从控制器向视图模板发送消息。
- en: How to do it...
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java，我们需要采取以下步骤：
- en: Run the `foo_java` application with Hot-Reloading enabled.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以启用热重载的方式运行 `foo_java` 应用程序。
- en: 'Create the form view template file `app/views/product/form.scala.html` and
    add the following contents:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建表单视图模板文件 `app/views/product/form.scala.html` 并添加以下内容：
- en: '[PRE94]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Create the products controller `foo_java/app/controllers/Products.java` and
    add the following import, action, and Play form blocks:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建产品控制器 `foo_java/app/controllers/Products.java` 并添加以下导入、操作和 Play 表单块：
- en: '[PRE95]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Edit `foo_java/conf/routes` by adding the following line:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行编辑 `foo_java/conf/routes`：
- en: '[PRE96]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'View your new product form using a web browser:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看您的新产品表单：
- en: '[PRE97]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Fill in a name for your new product and hit **submit**. You should now receive
    the success message:![](img/z7nu00LC.jpg)
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的新产品填写一个名称并点击 **提交**。您现在应该会收到成功消息：![成功消息](img/z7nu00LC.jpg)
- en: 'For Scala, we need to take the following steps:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Scala，我们需要采取以下步骤：
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以启用热重载的方式运行 `foo_scala` 应用程序。
- en: 'Create the form view template file `app/views/product/form.scala.html` and
    add the following contents:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建表单视图模板文件 `app/views/product/form.scala.html` 并添加以下内容：
- en: '[PRE98]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Create the products controller `foo_scala/app/controllers/Products.scala` and
    add the following import, action, and Play form blocks:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建产品控制器 `foo_scala/app/controllers/Products.scala` 并添加以下导入、操作和 Play 表单块：
- en: '[PRE99]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Edit `foo_scala/conf/routes` by adding the following lines:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行编辑 `foo_scala/conf/routes`：
- en: '[PRE100]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'View your new Product form using a web browser:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器查看您的新产品表单：
- en: '[PRE101]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Fill in a name for your new product and click on **submit**. You should now
    receive the following success message:![](img/W1P99Ysq.jpg)
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的新产品填写一个名称并点击 **提交**。您现在应该会收到以下成功消息：![成功消息](img/W1P99Ysq.jpg)
- en: How it works...
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we were able to create our first HTTP form using Play Framework.
    This recipe included steps in creating an HTML form view template and our Products
    controller. We declared two web actions and two URL routes and created the Play
    form object, which we used to bind request parameters to our model, Fruit. We
    were able to load the web form by accessing `http://localhost:9000/Products/new`
    on a web browser. After filling out our form details, we submitted the form itself
    and received a notification from the Products controller.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们能够使用 Play 框架创建我们的第一个 HTTP 表单。这个菜谱包括了创建 HTML 表单视图模板和我们的产品控制器。我们声明了两个网络操作和两个
    URL 路由，并创建了 Play 表单对象，我们使用它将请求参数绑定到我们的模型 Fruit。我们能够通过在网页浏览器中访问 `http://localhost:9000/Products/new`
    来加载网络表单。填写完我们的表单详细信息后，我们提交了表单本身，并从产品控制器收到了通知。
- en: Using form validation
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单验证
- en: Play Framework provides an easy way to validate form submissions. For Play Java,
    we will add the validation to the model, which will check for a submitted field's
    length and return an error message if the validate condition is not satisfied.
    For Play Scala, we will add the form validation to the form object itself and
    define the validation parameters for each form field there.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: Play 框架提供了一个简单的方式来验证表单提交。对于 Play Java，我们将验证添加到模型中，这将检查提交字段的长度，如果验证条件不满足，则返回错误消息。对于
    Play Scala，我们将表单验证添加到表单对象本身，并在那里定义每个表单字段的验证参数。
- en: How to do it...
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java，我们需要采取以下步骤：
- en: 'Edit the Product model, `foo_java/app/models/Product.java` and add the `validate()`
    method:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑产品模型，`foo_java/app/models/Product.java` 并添加 `validate()` 方法：
- en: '[PRE102]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Reload the Product form using a web browser:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载产品表单：
- en: '[PRE103]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: The product form should now accept only product names with a minimum of three
    characters and a maximum of 100, as shown in the following screenshot:![](img/JI0IYz2L.jpg)
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产品表单现在应仅接受至少三个字符和最多100个字符的产品名称，如下截图所示！![img/JI0IYz2L.jpg](img/JI0IYz2L.jpg)
- en: 'For Scala, we need to take the following steps:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: 'Edit the products controller `foo_scala/app/controllers/Products.scala` and
    modify how the form is declared:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑产品控制器`foo_scala/app/controllers/Products.scala`并修改表单的声明方式：
- en: '[PRE104]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Reload the Products form using a web browser:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载产品表单：
- en: '[PRE105]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: The product form should now accept only fruit names with a minimum of three
    characters and a maximum of 100, as shown in the following screenshot:![](img/dQy6FzHw.jpg)
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产品表单现在应仅接受至少三个字符和最多100个字符的水果名称，如下截图所示！![img/dQy6FzHw.jpg](img/dQy6FzHw.jpg)
- en: How it works...
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we added data validations for product name and the acceptable
    length submitted by users. For Java, we added a `validate()` method in the product
    model.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们为产品名称和用户提交的可接受长度添加了数据验证。对于Java，我们在产品模型中添加了一个`validate()`方法。
- en: Our Java model can be validated by using JSR-303 JavaBean validation annotations
    and by defining a `validate()` method that Play invokes if it is present in the
    model class.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用JSR-303 JavaBean验证注解并定义一个Play在模型类中存在时调用的`validate()`方法来验证我们的Java模型。
- en: For Scala, we added data validation directives to the `Form` object in the controller.
    We used Play form helpers to define the minimum and maximum character count for
    the name property of the product.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们在控制器中的`Form`对象中添加了数据验证指令。我们使用了Play表单助手来定义产品名称属性的最小和最大字符数。
- en: Securing form submission
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护表单提交
- en: Play Framework has a CSRF filter module that developers can use to validate
    CSRF tokens during HTTP form submissions. This allows developers to be sure that
    the form was submitted with a valid session token and not tampered with in any
    way.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: Play框架有一个CSRF过滤器模块，开发人员可以在HTTP表单提交期间验证CSRF令牌。这允许开发人员确信表单是使用有效的会话令牌提交的，并且没有被任何方式篡改。
- en: How to do it...
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: 'Add the Play filters module as a project dependency to `build.sbt`:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Play过滤器模块作为项目依赖项添加到`build.sbt`：
- en: '[PRE106]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Create a `Global.java` object file in the `app/` directory:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/`目录中创建一个`Global.java`对象文件：
- en: '[PRE107]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Declare the `Global.java` object in `conf/application.conf`:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`conf/application.conf`中声明`Global.java`对象：
- en: '[PRE108]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Update the template declaration by adding an implicit request object for the
    product form file `app/views/product/form.scala.html`:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加产品表单文件`app/views/product/form.scala.html`的隐式请求对象来更新模板声明：
- en: '[PRE109]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Add the CSRF token helper tag to the product form file `app/views/product/form.scala.html`:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CSRF令牌助手标签添加到产品表单文件`app/views/product/form.scala.html`：
- en: '[PRE110]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Reload the product form using a web browser:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载产品表单：
- en: '[PRE111]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The product form should now contain a Play-generated CSRF token and should use
    this to validate form submissions, as shown in the following screenshot:![](img/mkHuCatJ.jpg)
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产品表单现在应包含由Play生成的CSRF令牌，并使用此令牌验证表单提交，如下截图所示！![img/mkHuCatJ.jpg](img/mkHuCatJ.jpg)
- en: 'For Scala, we need to take the following steps:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: 'Add the Play filters module as a project dependency to `build.sbt`:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Play过滤器模块作为项目依赖项添加到`build.sbt`：
- en: '[PRE112]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Create a `Global.scala` object file in the `app/`:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/`中创建一个`Global.scala`对象文件：
- en: '[PRE113]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Declare the `Global.scala` object in `conf/application.conf`:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`conf/application.conf`中声明`Global.scala`对象：
- en: '[PRE114]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Add the Play global CSRF filter by modifying the object declaration in `app/Global.scala`:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改`app/Global.scala`中的对象声明来添加Play全局CSRF过滤器：
- en: '[PRE115]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Update the template declaration by adding an implicit request object for the
    Product form file `app/views/product/form.scala.html`:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加产品表单文件`app/views/product/form.scala.html`的隐式请求对象来更新模板声明：
- en: '[PRE116]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Add the CSRF token helper tag to the product form file `app/views/product/form.scala.html`:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CSRF令牌助手标签添加到产品表单文件`app/views/product/form.scala.html`：
- en: '[PRE117]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Reload the product form using a web browser:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网页浏览器重新加载产品表单：
- en: '[PRE118]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: The product form should now contain a Play-generated CSRF token and should use
    this to validate form submissions.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产品表单现在应包含由Play生成的CSRF令牌，并使用此令牌验证表单提交。
- en: How it works...
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we added the Play Framework filters module, which includes CSRF
    helpers. We added global CSRF support by declaring the `CSRFFilter` in the Play
    application global settings class, `app/Global.java` and `app/Global.scala`. The
    last step was to insert a CSRF token helper tag in our tag that the filter uses
    to validate form submissions.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们添加了Play框架的过滤器模块，其中包括CSRF辅助工具。我们通过在Play应用程序的全局设置类`app/Global.java`和`app/Global.scala`中声明`CSRFFilter`来添加全局CSRF支持。最后一步是在我们的标签中插入一个CSRF令牌辅助标签，该标签由过滤器用于验证表单提交。
- en: 'Modifying or tampering with a valid CSRF token will now result in an error
    and will be rejected by Play, as shown in the following screenshot:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 修改或篡改有效的CSRF令牌现在将导致错误，并被Play拒绝，如下截图所示：
- en: '![](img/bnb5nrda.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bnb5nrda.jpg)'
- en: Testing with JUnit (Java) and specs2 (Scala)
  id: totrans-475
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JUnit（Java）和specs2（Scala）进行测试
- en: It is quite important for a web framework to integrate testing as seamlessly
    as possible with the web framework itself. This minimizes the friction developers
    encounter when coding functional specs and writing tests to validate their work.
    For Play Java projects, we will be utilizing the popular test framework JUnit.
    We will be using it to do a simple unit test and to test our model and controller
    action. For Play Scala projects, we will be using specs2 to do a simple unit test
    and to test our model, a controller action, and a route mapping.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个Web框架来说，尽可能无缝地将其与Web框架本身集成进行测试是非常重要的。这最小化了开发者在编写功能规范和编写测试以验证其工作时遇到的摩擦。对于Play
    Java项目，我们将使用流行的测试框架JUnit。我们将使用它来进行简单的单元测试，并测试我们的模型和控制器操作。对于Play Scala项目，我们将使用specs2来进行简单的单元测试，并测试我们的模型、控制器操作和路由映射。
- en: How to do it...
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For Java, we need to take the following steps:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: 'Create a new spec class, `ProductTest.java`, in `test/` and add the following
    content:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/`目录下创建一个新的规范类`ProductTest.java`，并添加以下内容：
- en: '[PRE119]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Run the first spec using Activator by running the command `test-only ProductTest`:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Activator运行第一个规范，命令为`test-only ProductTest`：
- en: '[PRE120]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: 'Create a new Spec class, `ProductSpec.scala`, in `test/` and add the following
    content:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/`目录下创建一个新的Spec类`ProductSpec.scala`，并添加以下内容：
- en: '[PRE121]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Run the first spec using Activator by running the command `test-only ProductSpec`:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Activator运行第一个规范，命令为`test-only ProductSpec`：
- en: '[PRE122]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: How it works...
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a brand new spec file that will contain our test
    specifications. We placed this file inside the `test/` directory and ran the test
    using `activator` with the `test-only` command. The `test` command is used to
    run the test and it displays the results of the test.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个全新的规范文件，该文件将包含我们的测试规范。我们将此文件放置在`test/`目录中，并使用`activator`的`test-only`命令运行测试。`test`命令用于运行测试，并显示测试结果。
- en: Testing models
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试模型
- en: The following recipe focuses on writing a test for our model objects. We will
    create a new record and add assertions to validate the object's creation. We will
    then use the `Activator` command to run our test.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 以下菜谱专注于编写对我们模型对象的测试。我们将创建一个新的记录并添加断言来验证对象的创建。然后我们将使用`Activator`命令来运行我们的测试。
- en: How to do it...
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For Java, we need to take the following steps:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: 'Edit the `ProductTest.java` file and add the following content:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`ProductTest.java`文件并添加以下内容：
- en: '[PRE123]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Execute the new spec by running the command `test-only ProductTest`:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行命令`test-only ProductTest`来执行新的规范：
- en: '[PRE124]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: 'Edit the `ProductSpec.scala` file and add the following content:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`ProductSpec.scala`文件并添加以下内容：
- en: '[PRE125]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Execute the new spec by running the command `test-only ProductSpec`:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行命令`test-only ProductSpec`来执行新的规范：
- en: '[PRE126]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: How it works...
  id: totrans-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we added a new spec, where we created a new product and invoked
    the `save()` method. We then added assertion statements to validate that the value
    returned by the `save()` method is not equal to none. The `test` command is used
    to run the test and displays the results of the test.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们添加了一个新的规范，其中我们创建了一个新产品并调用了`save()`方法。然后我们添加了断言语句来验证`save()`方法返回的值不等于none。使用`test`命令来运行测试并显示测试结果。
- en: Testing controllers
  id: totrans-505
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试控制器
- en: The following recipe focuses on writing a test for our controller objects. We
    will use a `FakeApplication` to create a mock HTTP request to the Product XML
    listing page and add assertions to validate that the response we receive is indeed
    an XML representing all of the products in our database. We will then use the
    `Activator` command to run our test.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 以下菜谱专注于编写测试我们的控制器对象。我们将使用`FakeApplication`来创建一个模拟HTTP请求到产品XML列表页面，并添加断言来验证我们收到的响应确实是一个代表我们数据库中所有产品的XML。然后，我们将使用`Activator`命令来运行我们的测试。
- en: How to do it...
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to take the following steps:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要采取以下步骤：
- en: 'Edit the `ProductTest.java` file and add the following content:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`ProductTest.java`文件并添加以下内容：
- en: '[PRE127]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Execute the new spec by running the command `test-only ProductTest`:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行命令`test-only ProductTest`来执行新的spec：
- en: '[PRE128]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'For Scala, we need to take the following steps:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要采取以下步骤：
- en: 'Edit the Product`Spec.scala` file and add the following spec code:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`Product`Spec.scala文件，并添加以下spec代码：
- en: '[PRE129]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Execute the new spec by running the `test-only ProductSpec` command:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`test-only ProductSpec`命令来执行新的spec：
- en: '[PRE130]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: How it works...
  id: totrans-518
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a new spec to test a URL route we created earlier.
    Then, we validated the `/products.xml` URL route by making sure that the response
    content type is `application/xml` and that it contains our root element products.
    The `test` command is used to run the test and it displays the results of the
    test.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个新的spec来测试我们之前创建的URL路由。然后，我们通过确保响应的内容类型是`application/xml`并且它包含我们的根元素products来验证`/products.xml`
    URL路由。`test`命令用于运行测试，并显示测试结果。
