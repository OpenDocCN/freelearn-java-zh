- en: Chapter 2. Creating Your App Architecture and Bootstrapping with SBT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。创建你的应用程序架构并使用SBT引导
- en: In the previous chapter, we learned about Functional Programing and Scala. This
    chapter will be focused on **Simple Build Tool** (**SBT**) and Activator in order
    to Bootstrap complex Scala and Play framework projects. Using SBT and Activator,
    we can perform several development tasks such as building, running tests, and
    deploying the application (which will be covered in detail in [Chapter 10](part0116.xhtml#aid-3EK181
    "Chapter 10.  Scaling up"), *Scaling Up*). Let's get started.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了函数式编程和Scala。本章将专注于**简单构建工具**（**SBT**）和Activator，以便引导复杂的Scala和Play框架项目。使用SBT和Activator，我们可以执行多个开发任务，例如构建、运行测试和部署应用程序（将在第10章中详细介绍，*扩展*）。让我们开始吧。
- en: 'In this chapter, we will see the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下主题：
- en: SBT basics--installation, structure, and dependencies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SBT基础--安装、结构和依赖
- en: Activator basics--creating projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Activator基础--创建项目
- en: Overall architecture of our application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用程序的整体架构
- en: Introducing SBT
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍SBT
- en: SBT is the ultimate Scala solution for building and packing Scala applications.
    SBT has lots of plugins, such as Eclipse and IntelliJ IDEA projects generation,
    which help a great deal when we are doing Scala development. SBT is built in Scala
    in order to help you build your Scala applications. However, SBT can still be
    used to build Java applications if you wish.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SBT是构建和打包Scala应用程序的终极Scala解决方案。SBT拥有许多插件，如Eclipse和IntelliJ IDEA项目生成，这在进行Scala开发时非常有帮助。SBT是用Scala编写的，以便帮助你构建Scala应用程序。然而，如果你愿意，SBT仍然可以用来构建Java应用程序。
- en: 'The core features of SBT are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SBT的核心功能如下：
- en: Scala-based build definition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Scala的构建定义
- en: Incremental compilation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量编译
- en: Continuous compilation and testing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续编译和测试
- en: Great support for testing libraries such as ScalaCheck, Specs, ScalaTest, and
    JUnit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对ScalaCheck、Specs、ScalaTest和JUnit等测试库的出色支持
- en: REPL integration
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REPL集成
- en: Parallel Task execution
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行任务执行
- en: We will use SBT with the Typesafe Activator to Bootstrap our application later
    in this very chapter. Before doing so, we will play with SBT to learn the key
    concepts of setting up a build project for a Scala application. In this book,
    we will be using SBT version 0.13.11.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将使用SBT与Typesafe Activator一起引导我们的应用程序。在这样做之前，我们将使用SBT来学习为Scala应用程序设置构建项目的关键概念。在这本书中，我们将使用SBT版本0.13.11。
- en: Installing SBT on Ubuntu Linux
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu Linux上安装SBT
- en: 'Keep in mind that we need to have Java and Scala installed before installing
    SBT. If you don''t have Java and Scala installed, go back to [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Introduction to FP, Reactive, and Scala"), *Introduction to FP, Reactive,
    and Scala* and follow the installation instructions. Open a terminal window, and
    run the following commands in order to download and install SBT:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在安装SBT之前，我们需要安装Java和Scala。如果你还没有安装Java和Scala，请回到[第1章](part0015.xhtml#aid-E9OE1
    "第1章。函数式编程、响应式编程和Scala简介")，*函数式编程、响应式编程和Scala简介*，并遵循安装说明。打开终端窗口，并运行以下命令以下载和安装SBT：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following content to the `~/bin/sbt/sbt` file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`~/bin/sbt/sbt`文件中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After saving the `~/bin/sbt/sbt` file, we need to give permission to execute
    the file with the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`~/bin/sbt/sbt`文件后，我们需要使用以下命令给予文件执行权限：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we need to put SBT into the operational system path in order to be able
    to execute anywhere in the Linux terminal. We need to export SBT through the `PATH`
    command into the `~/.bashrc` file. Open the `~/.bashrc` file in your favorite
    editor, and add the following content:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将SBT放入操作系统的路径中，以便在任何Linux终端中执行。我们需要通过`PATH`命令将SBT导出到`~/.bashrc`文件中。使用你喜欢的编辑器打开`~/.bashrc`文件，并添加以下内容：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We need to source the file using `$ source ~/.bashrc.`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`$ source ~/.bashrc`命令来源文件。
- en: Now we can run SBT and move on with the installation. When you now type `$ sbt`
    on your console, SBT will download all the dependencies required for use to run
    itself.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行SBT并继续安装。当你现在在控制台输入`$ sbt`时，SBT将下载所有必需的依赖项以运行自身。
- en: Getting started with SBT
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用SBT
- en: 'Let''s create folder named `hello-world-sbt`, and add the following project
    structure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`hello-world-sbt`的文件夹，并添加以下项目结构：
- en: '![Getting started with SBT](img/image00235.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用SBT](img/image00235.jpeg)'
- en: 'For `build.properties`, you need to have the following content:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`build.properties`，你需要以下内容：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For `hello_world.scala`, we will use the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `hello_world.scala`，我们将使用以下代码：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For now we will use an SBT DSL. However, since SBT is written Scala, we can
    use the `build.scala` format if we wish. This is handy in some cases, because
    we can use any kind of Scala code in order to make the build more dynamic and
    to reuse code and tasks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们将使用一个SBT DSL。然而，由于SBT是用Scala编写的，如果我们愿意，我们可以使用`build.scala`格式。在某些情况下，这很方便，因为我们可以使用任何类型的Scala代码来使构建更加动态，并重用代码和任务。
- en: 'We will set some predefined variables, however, you can create your own variables,
    which can be used to avoid duplicate code. Finally, let''s see the `build.sbt`
    file content as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置一些预定义的变量，但是你也可以创建自己的变量，这些变量可以用来避免重复代码。最后，让我们看看`build.sbt`文件的内容如下：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we have the name of the application, the version which
    will be used in the generated JAR file, and also the Scala version used on the
    application and the one used in the build process. We are ready to build this
    project, so open your terminal and type `$ sbt compile`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有应用程序的名称、将在生成的JAR文件中使用的版本，以及应用程序和构建过程中使用的Scala版本。我们现在准备好构建这个项目，所以打开你的终端并输入
    `$ sbt compile`。
- en: 'This instruction will make SBT compile our Scala code, and you should see something
    like this following screen:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令将使SBT编译我们的Scala代码，你应该会看到以下屏幕上的内容：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Getting started with SBT](img/image00236.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用SBT入门](img/image00236.jpeg)'
- en: 'Congratulations! SBT just compiled our Scala application. Now we can run the
    application using SBT. In order to do this, we just need to type `$ sbt run` as
    follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！SBT刚刚编译了我们的Scala应用程序。现在我们可以使用SBT运行应用程序。为了做到这一点，我们只需要输入 `$ sbt run`，如下所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Getting started with SBT](img/image00237.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用SBT入门](img/image00237.jpeg)'
- en: SBT makes it easier to test and play with your Scala application, because SBT
    has a REPL like the Scala REPL we were playing with in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Introduction to FP, Reactive, and Scala"), *Introduction to FP, Reactive,
    and Scala*. The SBT REPL makes all the Scala code that you might have under the
    project available at the REPL.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SBT使得测试和玩Scala应用程序变得更容易，因为SBT有一个像我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。FP、响应式和Scala简介")中玩过的Scala
    REPL，*FP、响应式和Scala简介*。SBT REPL使得项目下可能有的所有Scala代码在REPL中可用。
- en: Execute the command `$ sbt console.`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令 `$ sbt console`。
- en: '![Getting started with SBT](img/image00238.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![使用SBT入门](img/image00238.jpeg)'
- en: Once you are into the REPL, you can type any Scala code. As you must've realized,
    I just called the main Scala application directly via `$ SbtScalaMainApp.main(null)`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入了REPL，你可以输入任何Scala代码。正如你可能已经意识到的，我只是通过 `$ SbtScalaMainApp.main(null)` 直接调用了主Scala应用程序。
- en: Adding dependencies
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加依赖项
- en: 'Like any build tool, SBT allows you to resolve dependencies. SBT uses the Ivy
    / Maven2 patterns to resolve dependencies. So, if you are familiar with Maven2,
    Gradle, or Ant/Ivy, you will realize that setting SBT dependencies is the same,
    although with a different syntax. Dependencies are defined in the `build.sbt`
    file. There is no Scala development without unit tests. One of the most popular
    testing libraries is JUnit ([http://junit.org/junit4/](http://junit.org/junit4/)).
    JUnit works with Java and Scala projects. SBT will download and add JUnit to your
    Scala application `classpath` parameter. We need to edit the `build.sbt` file
    to add JUnit as a dependency as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 任何构建工具都允许你解决依赖项。SBT使用Ivy / Maven2模式来解决依赖项。所以，如果你熟悉Maven2、Gradle或Ant/Ivy，你会意识到设置SBT依赖项与它们相同，尽管语法不同。依赖项在`build.sbt`文件中定义。没有单元测试就没有Scala开发。最受欢迎的测试库之一是JUnit
    ([http://junit.org/junit4/](http://junit.org/junit4/))。JUnit与Java和Scala项目一起工作。SBT将下载并将JUnit添加到你的Scala应用程序`classpath`参数中。我们需要编辑`build.sbt`文件，如下添加JUnit作为依赖项：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As I mentioned before, SBT uses the same pattern as Maven2 / Ivy with: group
    ID + artifactid + version. If you don''t know the pattern for the library you
    want to add, you can check out the Maven Repository website (they generate SBT
    configs as well) at the following link: [http://mvnrepository.com/artifact/junit/junit/4.12](http://mvnrepository.com/artifact/junit/junit/4.12).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，SBT使用与Maven2 / Ivy相同的模式：组ID + artifactid + 版本。如果你不知道你想要添加的库的模式，你可以查看以下链接的Maven仓库网站（它们还生成SBT配置）：[http://mvnrepository.com/artifact/junit/junit/4.12](http://mvnrepository.com/artifact/junit/junit/4.12)。
- en: '![Adding dependencies](img/image00239.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![添加依赖项](img/image00239.jpeg)'
- en: SBT has scope for dependencies. We don't want to ship JUnit as part of the source
    code dependency. That's why we have the `% Test` after the dependency definition.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SBT 有依赖项的作用域。我们不希望将 JUnit 作为源代码依赖项的一部分进行分发。这就是为什么在依赖定义后面有 `% Test` 的原因。
- en: 'Once you have saved the file with the new content, you can run `$ sbt compile`.
    SBT will download JUnit for you and store the jar into the local Ivy repo files
    located at `/home/YOUR_USER/.ivy2/cache`. With the dependency in place, we can
    add more code and also use SBT to run our tests as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 保存包含新内容的文件后，您可以运行 `$ sbt compile`。SBT 会为您下载 JUnit 并将 jar 文件存储在位于 `/home/YOUR_USER/.ivy2/cache`
    的本地 Ivy 缓存文件中。有了依赖项，我们可以添加更多代码，并使用 SBT 来运行我们的测试，如下所示：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code, we just created a simple and straightforward calculator
    in Scala, which can add two integer numbers and also perform multiplication of
    two integers numbers. Now we can move on to the unit tests using JUnit. Tests
    need to be located in the `src/test/scala/` folder. Look at the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们仅使用 Scala 创建了一个简单直接的计算器，它可以对两个整数进行加法运算，也可以对两个整数进行乘法运算。现在我们可以继续使用 JUnit
    进行单元测试。测试需要位于 `src/test/scala/` 文件夹中。看看以下代码：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Okay, now we can just run the tests with the command `$ sbt test` as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们可以使用命令 `$ sbt test` 来运行测试，如下所示：
- en: '![Adding dependencies](img/image00240.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![添加依赖项](img/image00240.jpeg)'
- en: 'As you can see in the previous screenshot, all the tests are running. A test
    is created when we add the Java annotation `@Test`, and it needs to be a public
    function as well. There is one test, called `testMultiply0` , which fails, because
    it expects the result `4`, but `5` multiplied by `0` is zero, so the test is wrong.
    Let''s fix this method by changing assertion to accept zero, like in the following
    code, and rerun the `$sbt test` as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的屏幕截图中所见，所有测试都在运行。当我们添加 Java 注解 `@Test` 时，就会创建一个测试，并且它需要是一个公共函数。有一个测试，名为
    `testMultiply0`，它失败了，因为它期望结果是 `4`，但是 `5` 乘以 `0` 等于零，所以这个测试是错误的。让我们通过将断言更改为接受零来修复这个方法，如下面的代码所示，然后按照以下方式重新运行
    `$sbt test`：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`$ sbt test` gives you the following result:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sbt test` 会给出以下结果：'
- en: '![Adding dependencies](img/image00241.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![添加依赖项](img/image00241.jpeg)'
- en: 'Hooray! All the tests passed. By default, SBT runs all your tests in parallel,
    which is great for speeding up build time - nobody likes to wait when doing builds,
    and Scala is not the fastest tech to build. However, you can disable parallel
    tests if you want by adding the following line into the `build.sbt`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 哈喽！所有测试都通过了。默认情况下，SBT 会并行运行所有测试，这对于加快构建时间非常有用 - 没有人喜欢在构建时等待，而 Scala 也不是构建速度最快的科技。但是，如果您想禁用并行测试，可以在
    `build.sbt` 中添加以下行：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Generating Eclipse project files from SBT
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 SBT 生成 Eclipse 项目文件
- en: SBT via plugins can generate Eclipse files. It's possible to add these plugins
    directly into your `build.sbt` file. However, there is a better solution. You
    can define global configurations, which are ideal, because you don't need to add
    in every simple `build.sbt` file you have. This also makes a lot of sense if you
    are working with multiple projects and/or you are working with open source projects
    because, as it is a matter of preference, people often do not versionate IDE files.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SBT 通过插件可以生成 Eclipse 文件。您可以直接将这些插件添加到您的 `build.sbt` 文件中。然而，有一个更好的解决方案。您可以定义全局配置，这是理想的，因为您不需要在每一个简单的
    `build.sbt` 文件中添加。如果您正在处理多个项目，或者您正在处理开源项目，这也非常有意义，因为这是一个个人偏好的问题，人们通常不会对 IDE 文件进行版本控制。
- en: 'Go to the following directory if it exists, otherwise please create the following
    directory: `/home/YOUR_USER/.sbt/0.13/plugins`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，请转到以下目录，否则请创建以下目录：`/home/YOUR_USER/.sbt/0.13/plugins`。
- en: 'Now create the file `build.sbt` with the following content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个包含以下内容的文件 `build.sbt`：
- en: '`/home/YOUR_USER/.sbt/0.13/plugins/build.sbt` Global config file'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`/home/YOUR_USER/.sbt/0.13/plugins/build.sbt` 全局配置文件'
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you save the file with this content, we can reload our SBT application
    by executing `$ sbt reload` , or quit the SBT console ( ***Ctrl*** + ***D*** )
    and open sbt again using `$ sbt.`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 保存包含此内容的文件后，我们可以通过执行 `$ sbt reload` 来重新加载我们的 SBT 应用程序，或者通过按 ***Ctrl*** + ***D***
    退出 SBT 控制台，然后使用 `$ sbt.` 再次打开 sbt。
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Generating Eclipse project files from SBT](img/image00242.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![从 SBT 生成 Eclipse 项目文件](img/image00242.jpeg)'
- en: Now we can generate Eclipse files by using the command `$ eclipse`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用命令 `$ eclipse` 来生成 Eclipse 文件。
- en: '![Generating Eclipse project files from SBT](img/image00243.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![从 SBT 生成 Eclipse 项目文件](img/image00243.jpeg)'
- en: Once the generation is done, you can import the .project file generated into
    Eclipse.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 生成完成后，你可以将生成的.project文件导入到Eclipse中。
- en: By default, Eclipse does not attach source folders when generating the Eclipse
    project. If you want the source code (of third-party deps like Junit), you need
    to add an extra line into your `build.sbt` project. Adding source folders is often
    a good idea, otherwise, you can't do proper debugging without the source code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Eclipse在生成Eclipse项目时不会附加源文件夹。如果你需要源代码（例如JUnit这样的第三方依赖项的源代码），你需要在你的`build.sbt`项目中添加额外的行。添加源文件夹通常是一个好主意，否则，没有源代码你无法进行适当的调试。
- en: build.sbt
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: build.sbt
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The SBT Scala application imported into Eclipse is shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了导入到Eclipse中的SBT Scala应用程序：
- en: '![Generating Eclipse project files from SBT](img/image00244.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![从SBT生成Eclipse项目文件](img/image00244.jpeg)'
- en: Application distribution
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序分发
- en: 'For this section, we will play with three different packaging solutions, which
    are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将尝试三种不同的打包解决方案，如下所示：
- en: The default SBT packagers
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认SBT打包器
- en: SBT assembly plugin
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SBT assembly插件
- en: SBT native packager
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SBT原生打包器
- en: SBT can generate jars by default. It is also possible to generate RPMs, DEBs,
    and even docker images via SBT plugins. First of all, let's generate an executable
    jar. This is done by the task package in SBT. Open your SBT console, and run the `$
    sbt package`. However, we want to generate a `FAT` jar, which is a jar with all
    other dependencies (jars) of the application. In order to do that, we need to
    use another plugin called assembly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: SBT默认可以生成jar文件。通过SBT插件，也可以生成RPMs、DEBs，甚至Docker镜像。首先，让我们生成一个可执行的jar文件。这是通过SBT中的package任务完成的。打开你的SBT控制台，并运行`$
    sbt package`。然而，我们想要生成一个`FAT` jar，这是一个包含应用程序所有其他依赖项（jar文件）的jar文件。为了做到这一点，我们需要使用另一个名为assembly的插件。
- en: '![Application distribution](img/image00245.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序分发](img/image00245.jpeg)'
- en: 'The SBT package can generate a jar, but it does not ship the dependencies.
    In order to use the assembly plugin, create the file `project/assembly.sbt`, and
    add the content as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: SBT包可以生成一个jar文件，但它不包含依赖项。为了使用assembly插件，创建文件`project/assembly.sbt`，并添加以下内容：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In our `build.sbt`, we need to import the assembly plugin, like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`build.sbt`中，我们需要导入assembly插件，如下所示：
- en: '`$ build.sbt` (put into the top of the file)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ build.sbt`（放入文件顶部）'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now we can run `$ sbt assembly` to generate our `FAT` jar.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行`$ sbt assembly`来生成我们的`FAT` jar。
- en: '![Application distribution](img/image00246.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序分发](img/image00246.jpeg)'
- en: 'There we go. Now we can run this as a normal Java application just using the
    command `java -jar` as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。现在我们可以通过使用命令`java -jar`将其作为一个普通的Java应用程序运行，如下所示：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Hello world SBT / Scala App
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello world SBT / Scala App
- en: 'There is another useful plugin for packing the Scala application, which is
    `sbt-native-packager`. `sbt-native-packager` can generate packages for Linux OS
    like DEB and RPM files. Since this is a new plugin, we need to create a file called
    `plugins.sbt` in `project/` as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一个用于打包Scala应用程序的有用插件，名为`sbt-native-packager`。`sbt-native-packager`可以为Linux操作系统生成包，如DEB和RPM文件。由于这是一个新插件，我们需要在`project/`中创建一个名为`plugins.sbt`的文件，如下所示：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the very end of your `build.sbt`, you need to add this line:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`build.sbt`的末尾，你需要添加以下行：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now we can generate packages with `sbt-native-packager` using `$ sbt universal:packageBin`
    or `$ sbt universal:packageZipTarball` .
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`$ sbt universal:packageBin`或`$ sbt universal:packageZipTarball`来生成带有`sbt-native-packager`的包。
- en: '![Hello world SBT / Scala App](img/image00247.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Hello world SBT / Scala App](img/image00247.jpeg)'
- en: Now we have a ZIP and a TGZ file with your application in the folder `hello-world-sbt/target/universal/`.
    Inside this ZIP/TGZ file, we have our application in a jar format with all the
    dependencies; for now we just have Scala, but if we had more, they would be there
    as well. There are SH and BAT scripts to run this application easily in Linux(SH)
    and Windows(BAT) respectively.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了ZIP和TGZ文件，其中包含你的应用程序，位于`hello-world-sbt/target/universal/`文件夹中。在这个ZIP/TGZ文件中，我们有我们的应用程序，以jar格式存在，包含所有依赖项；目前我们只有Scala，但如果更多的话，它们也会在那里。有SH和BAT脚本，可以在Linux(SH)和Windows(BAT)上轻松运行此应用程序。
- en: '`sbt-native-packager` can also cook docker images. This is great, because that
    makes it easier to deploy applications into production environments. Our project
    is fully ready to bake docker images. We need to have docker installed on Linux;
    you can do so by running the following commands:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`sbt-native-packager`还可以制作Docker镜像。这很棒，因为这使得将应用程序部署到生产环境更容易。我们的项目已经完全准备好制作Docker镜像。我们需要在Linux上安装docker；你可以通过运行以下命令来完成：'
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see something like the following screenshot if you''ve successfully
    installed Docker:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已成功安装Docker，您应该会看到以下类似的截图：
- en: '![Hello world SBT / Scala App](img/image00248.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Hello world SBT / Scala App](img/image00248.jpeg)'
- en: 'Now you can run `$ sbt`, and then generate your docker images by using the
    command `$ docker:publishLocal`. You will see an output similar to the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过运行`$ sbt`，然后使用命令`$ docker:publishLocal`生成您的docker镜像。您将看到类似以下输出的内容：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can confirm that there is a new docker image in your system just by running
    the command `$ docker ps:`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行命令`$ docker ps:`来确认系统中有一个新的docker镜像
- en: '![Hello world SBT / Scala App](img/image00249.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Hello world SBT / Scala App](img/image00249.jpeg)'
- en: The very first image is our docker image generated by the `sbt-native-packager`
    plugin with our Scala application. Congratulations! You have a docker container
    running with your Scala application. SBT Native Packager is really powerful, yet
    simple to use. You can get more details on the official documentation site ([http://www.scala-sbt.org/sbt-native-packager/gettingstarted.html](http://www.scala-sbt.org/sbt-native-packager/gettingstarted.html)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一张图片是我们通过`sbt-native-packager`插件生成的Scala应用程序的docker镜像。恭喜！您的Scala应用程序正在运行的docker容器中。SBT
    Native Packager功能强大，使用简单。您可以在官方文档网站上获取更多详细信息([http://www.scala-sbt.org/sbt-native-packager/gettingstarted.html](http://www.scala-sbt.org/sbt-native-packager/gettingstarted.html))。
- en: These are the basic things we need to know about SBT to build professional Scala
    applications. SBT has many other features and possibilities, which you can check
    it out at [http://www.scala-sbt.org/0.13/docs/index.html](http://www.scala-sbt.org/0.13/docs/index.html).
    Next, we will learn about Typesafe Activator, which is a wrapper around SBT that
    makes it easy to use with Play framework applications.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们构建专业Scala应用程序需要了解的SBT（Scala Build Tool）的基本知识。SBT还有许多其他功能和可能性，您可以在[http://www.scala-sbt.org/0.13/docs/index.html](http://www.scala-sbt.org/0.13/docs/index.html)查看。接下来，我们将学习Typesafe
    Activator，它是一个围绕SBT的包装器，使得与Play框架应用程序一起使用变得容易。
- en: Bootstrapping our Play framework app with Activator
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Activator引导我们的Play框架应用程序
- en: Lightband (former Typesafe) has another tool called Activator ([https://www.lightbend.com/community/core-tools/activator-and-sbt](https://www.lightbend.com/community/core-tools/activator-and-sbt)),
    which is a wrapper on top of SBT. Activator makes it easier to create Reactive
    applications using Scala, Akka, and the Play framework. Don't worry about the
    Play framework right now, because we will cover that in greater detail in [Chapter
    3](part0052.xhtml#aid-1HIT81 "Chapter 3. Developing the UI with Play Framework"),
    *Developing the UI with Play Framework*. Akka will be covered in detail in [Chapter
    8](part0097.xhtml#aid-2SG6I1 "Chapter 8. Developing a Chat with Akka"), *Developing
    a chat with Akka*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Lightbend（前Typesafe）还有一个名为Activator的工具([https://www.lightbend.com/community/core-tools/activator-and-sbt](https://www.lightbend.com/community/core-tools/activator-and-sbt))，它是在SBT之上的包装器。Activator使得使用Scala、Akka和Play框架创建响应式应用程序变得更容易。现在不用担心Play框架，因为我们将在[第3章](part0052.xhtml#aid-1HIT81
    "第3章。使用Play框架开发UI")，*使用Play框架开发UI*中更详细地介绍它。Akka将在[第8章](part0097.xhtml#aid-2SG6I1
    "第8章。使用Akka开发聊天")，*使用Akka开发聊天*中详细讲解。
- en: Let's download and install Activator, and Bootstrap our architecture. Remember,
    we need to have Java 8 and Scala 2.11 already installed. If you don't have Java
    8 or Scala 2.11, go back to [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Introduction
    to FP, Reactive, and Scala"), *Introduction to FP, Reactive, and Scala* and install
    them.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载并安装Activator，并引导我们的架构。记住，我们需要已经安装Java 8和Scala 2.11。如果您没有Java 8或Scala 2.11，请回到[第1章](part0015.xhtml#aid-E9OE1
    "第1章。函数式编程、响应式编程和Scala简介")，*函数式编程、响应式编程和Scala简介*并安装它们。
- en: First of all, you need to download activator from here: [https://www.lightbend.com/activator/download](https://www.lightbend.com/activator/download)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要从这里下载activator：[https://www.lightbend.com/activator/download](https://www.lightbend.com/activator/download)
- en: I recommend that you download the minimal package, and let Activator download
    and install the rest of the other dependencies for you. You can download the minimal
    package here: [https://downloads.typesafe.com/typesafe-activator/1.3.10/typesafe-activator-1.3.10-minimal.zip](https://downloads.typesafe.com/typesafe-activator/1.3.10/typesafe-activator-1.3.10-minimal.zip).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您下载最小包，并让Activator为您下载和安装其他依赖项。您可以从这里下载最小包：[https://downloads.typesafe.com/typesafe-activator/1.3.10/typesafe-activator-1.3.10-minimal.zip](https://downloads.typesafe.com/typesafe-activator/1.3.10/typesafe-activator-1.3.10-minimal.zip)。
- en: 'For this book, we will be using version 1.3.10\. We need to put the `activator/bin`
    folder in the OS PATH.If you want, you can install Activator using the terminal,
    like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将使用版本1.3.10。我们需要将`activator/bin`文件夹放入OS PATH中。如果你想，你可以使用终端安装Activator，如下所示：
- en: 'If you want, you can install Activator using the terminal, like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以使用终端安装Activator，如下所示：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In order to test your installation, execute this command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的安装，执行以下命令：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding command will Bootstrap an architecture for you with Scala, Akka,
    Play framework, and SBT.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将为你使用Scala、Akka、Play框架和SBT为你启动一个架构。
- en: Activator will ask you a series of questions like such as what templates you
    might like to use. There are a couple of templates for Java applications, Scala
    applications, Akka applications, and Play applications. For now, we will pick
    option `6) play-scala`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Activator会问你一系列问题，比如你可能想使用哪些模板。有几个模板用于Java应用程序、Scala应用程序、Akka应用程序和Play应用程序。现在，我们将选择选项`6)
    play-scala`。
- en: The first time you run Activator, it could take some time, because it will download
    all the dependencies from the web. When Activator finishes, you should see a folder
    called `ReactiveWebStore` in your file system.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行Activator时，可能需要一些时间，因为它将从网络下载所有依赖项。当Activator完成后，你应该在你的文件系统中看到一个名为`ReactiveWebStore`的文件夹。
- en: 'The command `$ activator new ReactiveWebStore` shows the following result:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`$ activator new ReactiveWebStore`显示以下结果：
- en: '![Bootstrapping our Play framework app with Activator](img/image00250.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![使用Activator启动我们的Play框架应用程序](img/image00250.jpeg)'
- en: 'You should enter the `ReactiveWebStore` folder if you type `$ ll` into the
    console, and you should also see the following structure:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入`$ ll`到控制台，你应该进入`ReactiveWebStore`文件夹，你也应该看到以下结构：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The content is explained as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 内容如下解释：
- en: '**app**: This is the Play framework application folder where we will do the
    Scala web development.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**app**：这是Play框架应用程序文件夹，我们将在这里进行Scala Web开发。'
- en: '**build.sbt**: This is the build file; as you can see, Activator has generated
    the SBT build config for us.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**build.sbt**：这是构建文件；如你所见，Activator为我们生成了SBT构建配置。'
- en: '**conf**: This holds the application config files such as logging and Scala/Play
    app config.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**conf**：这里存放应用程序配置文件，如日志和Scala/Play应用程序配置。'
- en: '**project**: This is the SBT project folder where we define SBT plugins and
    SBT version.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**project**：这是SBT项目文件夹，我们在其中定义SBT插件和SBT版本。'
- en: '**test**: This holds the test source code for our application.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**test**：这里存放我们应用程序的测试源代码。'
- en: '**public**: This holds static HTML assets like Images, CSS, and JavaScript
    code.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**public**：这里存放静态HTML资产，如图片、CSS和JavaScript代码。'
- en: '**bin**: This holds a copy of the activator script for Linux/Mac and Windows.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bin**：这里存放Linux/Mac和Windows的activator脚本副本。'
- en: '**libexec**: This holds the Activator jar. This is pretty useful, because Activator
    has packed itself with our application. So, let''s say you push this application
    for GitHub - when someone needs to access this app and download it from GitHub,
    the SBT file will be there, so they won''t need to download it from the Internet.
    This is especially useful when you are provisioning and deploying applications
    in production, which this book will cover in detail in [Chapter 10](part0116.xhtml#aid-3EK181
    "Chapter 10.  Scaling up"), *Scaling Up*.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**libexec**：这里存放Activator jar。这非常有用，因为Activator已经将我们的应用程序打包在一起。所以，比如说你将这个应用程序推送到GitHub
    - 当有人需要访问这个应用程序并从GitHub下载它时，SBT文件将存在，所以他们不需要从互联网上下载它。这在你在生产环境中配置和部署应用程序时特别有用，本书将在第10章[第10章。扩展]中详细讨论，*扩展*。'
- en: Activator shell
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Activator shell
- en: 'Activator allows you to run REPL like we did in Scala and SBT. In order to
    get REPL access, you need to type the following on the console:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Activator允许你运行REPL，就像我们在Scala和SBT中做的那样。为了获得REPL访问权限，你需要在控制台输入以下内容：
- en: $ activator shell
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: $ activator shell
- en: '![Activator shell](img/image00251.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Activator shell](img/image00251.jpeg)'
- en: Activator has plenty of tasks that you can use. In order to know all the available
    commands, you can type `$ activator help` on the console.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Activator提供了大量你可以使用的任务。为了了解所有可用的命令，你可以在控制台输入`$ activator help`。
- en: '![Activator shell](img/image00252.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Activator shell](img/image00252.jpeg)'
- en: Activator - compiling, testing, and running
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Activator - 编译、测试和运行
- en: 'Let''s get to business now. We will compile, run tests, and run our web application
    using Activator and SBT. First of all, let''s compile. Type `$ activator compile`
    on the console as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始工作吧。我们将使用Activator和SBT编译、运行测试和运行我们的Web应用程序。首先，让我们编译。在控制台输入如下命令：`$ activator
    compile`。
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Let's run our tests now with the command `$ activator test`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用命令 `$ activator test` 来运行我们的测试。
- en: '![Activator - compiling, testing, and running](img/image00253.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Activator - 编译、测试和运行](img/image00253.jpeg)'
- en: Finally, it's time to run your application. Type `$ activator run` on the console.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候运行你的应用程序了。在控制台输入 `$ activator run`。
- en: '![Activator - compiling, testing, and running](img/image00254.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Activator - 编译、测试和运行](img/image00254.jpeg)'
- en: Open your web browser, and go to the URL: `http://localhost:9000`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的网页浏览器，并访问 URL：`http://localhost:9000`。
- en: 'You should see a screen like the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下屏幕：
- en: '![Activator - compiling, testing, and running](img/image00255.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![Activator - 编译、测试和运行](img/image00255.jpeg)'
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! You've just Bootstrapped your first Scala / Play framework
    first. Activator makes our life easier. As you can see, with three commands, we
    were able to get a site up and running. You could do the same with just SBT, however,
    it would take more time, because we would need to get all the dependencies, configure
    all the source code structure, and add some sample HTML and Scala code. Thanks
    to Activator, we don't need to do any of that. However, we can still change all
    the SBT files and configs as per our wish. Activator is not tight with Scala or
    our application code, since it is more like a template-based code generator.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚启动了第一个 Scala / Play 框架。Activator 让我们的生活变得更简单。正如你所见，我们只用了三个命令就能搭建起一个网站并使其运行。你也可以只用
    SBT 来做同样的事情，但会花费更多的时间，因为我们需要获取所有依赖项，配置所有源代码结构，并添加一些示例 HTML 和 Scala 代码。多亏了 Activator，我们不需要做任何这些。然而，我们仍然可以按照我们的意愿更改所有的
    SBT 文件和配置。Activator 并不紧密绑定到 Scala 或我们的应用程序代码，因为它更像是一个基于模板的代码生成器。
- en: In the next chapter, we will be improving the application by adding validations,
    database persistence, Reactive Microservices calling using RxScala and Scala,
    and much more.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过添加验证、数据库持久化、使用 RxScala 和 Scala 调用反应式微服务以及更多功能来改进应用程序。
