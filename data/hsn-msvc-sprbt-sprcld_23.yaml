- en: Monitoring Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控微服务
- en: In this chapter, we will learn how to use Prometheus and Grafana to collect,
    monitor, and alert about performance metrics. As we mentioned in [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml),
    *Introduction to Microservices*, in the *Centralized monitoring and alarms* section,
    in a production environment, it is crucial to be able to collect metrics for application
    performance and hardware resource usage. Monitoring these metrics is required
    in order to avoid long response times or outages for API requests and other processes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Prometheus和Grafana来收集、监控和关于性能指标的警报。正如我们在[第1章](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml)中提到的*微服务简介*，在*集中监控和警报*部分，在生产环境中，能够收集应用程序性能和硬件资源使用情况的数据至关重要。监控这些指标是为了避免API请求和其他进程的响应时间过长或出现故障。
- en: To be able to monitor a system landscape of microservices in a cost-efficient
    and proactive way, we need to define alarms that are triggered automatically if
    the metrics exceed the configured limits.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够以成本效益高和主动的方式监控微服务系统架构，我们需要定义一些自动触发的警报，如果指标超过配置的限制就会触发这些警报。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to performance monitoring using Prometheus and Grafana
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana进行性能监控简介
- en: Changes in source code for collecting application metrics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码中收集应用程序指标的变化
- en: Building and deploying microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和部署微服务
- en: Monitoring microservices using Grafana dashboards
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Grafana仪表板监控微服务
- en: Setting up alarms in Grafana
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Grafana中设置警报
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All of the commands that are described in this book have been run on a MacBook
    Pro using macOS Mojave but should be straightforward to modify so that they can
    be run on another platform, such as Linux or Windows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中描述的所有命令都已经在使用macOS Mojave的MacBook Pro上运行过，但应该很容易进行修改，以便它们可以在其他平台上运行，例如Linux或Windows。
- en: The source code for this chapter can be found in this book's GitHub repository: [https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter20](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter20).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter20](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter20)。
- en: 'To be able to run the commands as described in this book, you need to download
    the source code to a folder and set up an environment variable, `$BOOK_HOME`,
    that points to that folder. Some sample commands are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够运行本书中描述的命令，你需要将源代码下载到一个文件夹中，并设置一个环境变量`$BOOK_HOME`，使其指向该文件夹。一些示例命令如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All of the source code examples in this chapter come from the source code in `$BOOK_HOME/Chapter20` and have
    been tested using Kubernetes 1.15.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有源代码示例均来自`$BOOK_HOME/Chapter20`的源代码，并且已经使用Kubernetes 1.15进行了测试。
- en: If you want to see the changes that we applied to the source code for this chapter so
    that you can use Prometheus and Grafana to monitor an alert on performance metrics,
    you can compare it with the source code for [Chapter 19](7a733f89-e54e-48d2-9a03-d7d2f72157ac.xhtml),
    *Centralized Logging with the EFK Stack*. You can use your favorite differentiating tool
    and compare the two folders `$BOOK_HOME/Chapter19` and `$BOOK_HOME/Chapter20`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要查看我们为本章源代码所做的更改，以便你可以使用Prometheus和Grafana监控一个性能指标的警报，你可以将它们与[第19章](7a733f89-e54e-48d2-9a03-d7d2f72157ac.xhtml)的源代码*使用EFK堆栈进行集中日志记录*进行比较。你可以使用你最喜欢的区分工具，比较两个文件夹`$BOOK_HOME/Chapter19`和`$BOOK_HOME/Chapter20`。
- en: Introduction to performance monitoring using Prometheus and Grafana
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana进行性能监控简介
- en: In this chapter, we will reuse the deployment of Prometheus and Grafana that
    we created in [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using
    a Service Mesh to Improve Observability and Management*, in the *Deploying Istio
    in the Kubernetes cluster* section. Also in that chapter, in the *Introducing
    the runtime components in Istio* section, we were briefly introduced to Prometheus,
    a popular open source database for time series such as performance metrics. We
    were also introduced to Grafana as an open source tool for visualizing performance
    metrics. Istio's console for observability, Kiali, is integrated with Grafana.
    A user can navigate from a service of interest in Kiali to its corresponding performance
    metrics in Grafana. Kiali can also render some performance-related graphs without
    the use of Grafana. In this chapter, we will get some hands-on experience with
    this integration by using these tools together.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重用我们在第[18章](422649a4-94bc-48ae-b92b-e3894c014962.xhtml) *使用服务网格提高可观测性和管理*中创建的Prometheus和Grafana部署，在*在Kubernetes集群中部署Istio*部分。在那一章中，在*介绍Istio的运行时组件*部分，我们简要介绍了Prometheus，这是一个流行的开源时间序列数据库，如性能指标。我们还介绍了Grafana作为一个开源工具，用于可视化性能指标。Istio的可观测性控制台Kiali与Grafana集成。用户可以从Kiali中的感兴趣服务导航到其在Grafana中的相应性能指标。Kiali还可以在不使用Grafana的情况下渲染一些与性能相关的图表。在本章中，我们将通过使用这些工具一起获得与这种集成相关的实践经验。
- en: The Istio configuration we deployed in [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using
    a Service Mesh to Improve Observability and Management*, includes a configuration
    of Prometheus, where it automatically collects metrics from pods in Kubernetes.
    All we need to do is set up an endpoint in our microservice that produces metrics
    in a format Prometheus can consume. We also need to add annotations to the Kubernetes
    pods so that Prometheus can find the address of the endpoints. See the *Changes
    in source code for collecting application metrics* section of this chapter for
    details on how to set this up.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第[18章](422649a4-94bc-48ae-b92b-e3894c014962.xhtml) *使用服务网格提高可观测性和管理*中部署的Istio配置包括一个Prometheus配置，它自动从Kubernetes中的pods收集指标。我们只需要在我们的微服务中设置一个端点，以产生Prometheus可以消费的指标格式。我们还需要向Kubernetes
    pod添加注解，以便Prometheus可以找到端点的地址。有关如何设置的详细信息，请参见本章的*收集应用程序指标的源代码变化*部分。
- en: 'The following diagram illustrates the relationship between the runtime components
    we just discussed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了刚刚讨论的运行时组件之间的关系：
- en: '![](img/53cbe67e-e1ec-419c-8113-92bb9bd15231.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53cbe67e-e1ec-419c-8113-92bb9bd15231.png)'
- en: Here, we can see how Prometheus uses the annotations in the definitions of the
    Kubernetes pods to be able to collect metrics from our microservices. It then
    stores these metrics in its database. A user can access the web UIs of Kiali and
    Grafana to monitor these metrics in a **web browser**. The **web browser** uses
    the **minikube tunnel** that was introduced in [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml),
    *Using a Service Mesh to Improve Observability and Management*, in the *Setting
    up access to Istio services* section, to access Kiali and Grafana.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Prometheus如何使用Kubernetes pod定义中的注解来能够从我们的微服务中收集指标。然后，它将这些指标存储在其数据库中。用户可以通过访问Kiali和Grafana的web
    UI来监控这些指标，**网页浏览器**。**网页浏览器**使用在第[18章](422649a4-94bc-48ae-b92b-e3894c014962.xhtml)
    *使用服务网格提高可观测性和管理*中介绍的**minikube隧道**，访问Kiali和Grafana。
- en: Please remember that the configuration that was used for deploying Istio from
    [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using a Service Mesh
    to Improve Observability and Management*, is only intended for development and
    test, not production. For example, performance metrics stored in the Prometheus
    database will not survive the Prometheus pod being restarted!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，第[18章](422649a4-94bc-48ae-b92b-e3894c014962.xhtml) *使用服务网格提高可观测性和管理*中用于部署Istio的配置仅适用于开发和测试，而不是生产。例如，存储在Prometheus数据库中的性能指标在Prometheus
    pod重新启动后将不会保留！
- en: In the next section, we will look at what changes have been applied to the source
    code to make the microservices produce performance metrics that Prometheus can
    collect.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看对源代码进行了哪些更改，以使微服务产生Prometheus可以收集的性能指标。
- en: Changes in source code for collecting application metrics
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码中收集应用程序指标的变化
- en: 'Spring Boot 2 supports producing performance metrics in a Prometheus format
    using the Micrometer library ([https://micrometer.io](https://micrometer.io)).
    There''s only one change we need to make to the source code: we need to add a
    dependency to the Micrometer library, `micrometer-registry-prometheus`, in the
    Gradle build files, `build.gradle`, for each microservice. Here, the following
    dependency has been added:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 2支持使用Micrometer库产生性能指标，并以普罗米修斯格式呈现（[https://micrometer.io](https://micrometer.io)）。我们只需要对源代码做一次更改：需要在每个微服务的Gradle构建文件`build.gradle`中添加对Micrometer库的依赖`micrometer-registry-prometheus`。在此，已添加以下依赖项：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will make the microservices produce Prometheus metrics on port `4004`
    using the `"/actuator/prometheus"` URI. To let Prometheus know about these endpoints,
    each microservice''s pod is annotated with the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使得微服务在端口`4004`上使用`"/actuator/prometheus"` URI产生普罗米修斯指标。为了让普罗米修斯了解这些端点，每个微服务的容器都用以下代码进行了注释：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: View the deployment definitions in the `kubernetes/services/base/deployments`
    folder for more details.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`kubernetes/services/base/deployments`文件夹中的部署定义以获取更多详细信息。
- en: 'To make it easier to identify the source of the metrics once they have been
    collected by Prometheus, they are tagged with the name of the microservice that
    produced the metric. This is achieved by adding the following configuration to
    the common configuration file, `config-repo/application.yml`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在普罗米修斯收集完指标后更容易识别指标的来源，指标被标记为产生该指标的微服务名称。这通过在共同配置文件`config-repo/application.yml`中添加以下配置来实现：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will result in each metric that's produced having an extra label named
    `application`. It will contain the value of the standard Spring property for the
    name of a microservice, `spring.application.name`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致每个产生的指标都有一个额外的标签，名为`application`。它将包含微服务名称的标准Spring属性值，即`spring.application.name`。
- en: These are all the changes that are required to prepare the microservices to
    produce performance metrics and to make Prometheus aware of what endpoints to
    use to start collecting these metrics. In the next section, we will build and
    deploy the microservices.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是准备微服务产生性能指标并使普罗米修斯意识到要使用哪些端点来开始收集这些指标所需的所有更改。在下一节中，我们将构建和部署微服务。
- en: Building and deploying the microservices
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和部署微服务
- en: 'Building, deploying, and verifying the deployment using the `test-em-all.bash` test
    script is done in the same way it was done in [Chapter 19](7a733f89-e54e-48d2-9a03-d7d2f72157ac.xhtml),
    *Centralized Logging with the EFK Stack*, in the *Building and deploying the microservices*
    section. Run the following commands:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`test-em-all.bash`测试脚本构建、部署并验证部署的方式与在*构建和部署微服务*章节中的[第19章](7a733f89-e54e-48d2-9a03-d7d2f72157ac.xhtml)、*使用EFK堆栈进行集中日志记录*相同。运行以下命令：
- en: 'Build the Docker images from the source with the following commands:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源代码构建Docker镜像，使用以下命令：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Recreate the namespace, `hands-on`, and set it as the default namespace:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新创建命名空间`hands-on`，并将其设置为默认命名空间：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Execute the deployment by running the `deploy-dev-env.bash` script with the
    following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令执行`deploy-dev-env.bash`脚本：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start the Minikube tunnel, if it''s not already running, as follows (see [Chapter
    18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using a Service Mesh to Improve
    Observability and Management*, the *Setting up access to Istio services* section,
    for a recap if you need one):'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Minikube隧道尚未运行，按照以下方式启动（如果需要，请回顾[第18章](422649a4-94bc-48ae-b92b-e3894c014962.xhtml)、*使用服务网格提高可观测性和管理*、*设置对Istio服务的访问*部分）：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the normal tests to verify the deployment with the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证部署的正常测试：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Expect the output to be similar to what we''ve seen in the previous chapters:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出将与前几章中看到的内容类似：
- en: '![](img/c0e56736-a6d9-4bad-9624-d1daf3195629.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0e56736-a6d9-4bad-9624-d1daf3195629.png)'
- en: With the microservices deployed, we can move on and start monitoring our microservices
    using Grafana!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务部署完成后，我们可以开始使用Grafana监控我们的微服务！
- en: Monitoring microservices using Grafana dashboards
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grafana仪表板监控微服务
- en: As we already mentioned in the introduction, Kiali is integrated with Grafana
    and provides some very useful dashboards out of the box. In general, they are
    focused on application-level performance metrics such as requests per second,
    response times, and fault percentages for processing requests. They are, as we
    will see shortly, very useful on an application level. But if we want to understand
    the usage of the underlying hardware resources, we need more detailed metrics,
    for example, Java VM-related metrics.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在介绍中提到的，Kiali与Grafana集成，并提供一些非常实用的仪表板。一般来说，它们关注的是每秒请求数、响应时间和处理请求的故障百分比等应用级性能指标。正如我们即将看到的，它们在应用层面非常有用。但如果我们想要了解底层硬件资源的使用情况，我们需要更详细的指标，例如Java
    VM相关指标。
- en: Grafana has an active community that, among other things, shares reusable dashboards.
    We will try out a dashboard from the community that's tailored for getting a lot
    of valuable Java VM-related metrics from a Spring Boot 2 application such as our
    microservices. Finally, we will see how we can build our own dashboards in Grafana.
    But let's start by exploring the integration between Kiali and Grafana.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana有一个活跃的社区，社区成员会分享可重用的仪表板。我们将尝试使用社区提供的仪表板，该仪表板专为从像我们的微服务这样的Spring Boot
    2应用程序获取许多有价值的Java VM相关指标而设计。最后，我们将了解如何在Grafana中创建我们自己的仪表板。但首先，让我们探索一下Kiali和Grafana之间的集成。
- en: 'Before we do that, we need to make two preparations:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做之前，我们需要做两项准备工作：
- en: Install a local mail - server for tests and configure Grafana to be able to
    send emails to it.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为测试安装一个本地邮件服务器并配置Grafana，使其能够向其发送电子邮件。
- en: We will use the mail server in the section "Setting up alarms in Grafana".
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在“在Grafana中设置警报”一节中使用邮件服务器。
- en: To be able to monitor some metrics, we will start the load test tool we used
    in previous chapters.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够监视一些指标，我们将启动在前几章中使用的负载测试工具。
- en: Installing a local mail server for tests
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为测试安装一个本地邮件服务器
- en: In this section, we will set up a local test mail server and configure Grafana
    to send alert emails to the mail server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将搭建一个本地测试邮件服务器，并配置Grafana以将警报电子邮件发送到该邮件服务器。
- en: 'Grafana can send emails to any SMPT mail server, but to keep the tests local,
    we will deploy a test mail server named `maildev`. Consider the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana可以向任何SMPT邮件服务器发送电子邮件，但为了保持测试本地化，我们将部署一个名为`maildev`的测试邮件服务器。考虑以下步骤：
- en: 'Install the test mail server with the following commands:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装测试邮件服务器：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Verify that the test mail server is up and running by visiting its web page
    at [http://mail-server.hands-on.svc.cluster.local](http://mail-server.hands-on.svc.cluster.local).
    Expect a web page such as the following to be rendered:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问[http://mail-server.hands-on.svc.cluster.local](http://mail-server.hands-on.svc.cluster.local)上的网页来验证测试邮件服务器是否正在运行。期待显示出如下类似的网页：
- en: '![](img/c3dc6129-9eed-4130-af97-33e94b21a429.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3dc6129-9eed-4130-af97-33e94b21a429.png)'
- en: 'Configure Grafana to send emails to the test mail server by setting up a number
    of environment variables. Run the following commands:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置一些环境变量配置Grafana以向测试邮件服务器发送电子邮件。运行以下命令：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For more details, see [https://hub.docker.com/r/djfarrelly/maildev](https://hub.docker.com/r/djfarrelly/maildev).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅[https://hub.docker.com/r/djfarrelly/maildev](https://hub.docker.com/r/djfarrelly/maildev)。
- en: Now, we have a test mail server up and running and Grafana has been configured
    to send emails to it. In the next section we will start the load test tool.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经运行了一个测试邮件服务器，并且Grafana已经配置为向其发送电子邮件。在下一节中，我们将启动负载测试工具。
- en: Starting up the load test
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动负载测试
- en: 'To have something to monitor, let''s start up the load test using Siege, which
    we used in previous chapters. Run the following commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监视一些指标，让我们使用在前几章中使用的Siege启动负载测试。运行以下命令：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we are ready to learn about the integration between Kiali and Grafana and
    explore the Grafana dashboards that come with Istio.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备学习Kiali和Grafana之间的集成，并探索随Istio提供的Grafana仪表板。
- en: Using Kiali's built-in Grafana dashboards
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kiali内置的Grafana仪表板
- en: In [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using a Service
    Mesh to Improve Observability and Management*, in the *Observing the service mesh*
    section, we learned about Kiali, but we skipped the part where Kiali shows performance
    metrics. Now, it's time to get back to that subject!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第18章](422649a4-94bc-48ae-b92b-e3894c014962.xhtml)“使用服务网格提高可观测性和管理”的“观察服务网格”一节中，我们了解了Kiali，但我们跳过了Kiali显示性能指标的部分。现在，是时候回到这个主题了！
- en: 'Execute the following steps to learn about Kiali''s integration with Grafana:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤了解 Kiali 与 Grafana 的集成：
- en: Open the Kiali web UI in a web browser using the `http://kiali.istio-system.svc.cluster.local:20001`
    URL. Log in with `admin`/`admin` if required.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `http://kiali.istio-system.svc.cluster.local:20001` URL 在 web 浏览器中打开 Kiali
    web UI。如果需要，使用 `admin`/`admin` 登录。
- en: Go to the service page by clicking on the Services tab from the menu on the
    left-hand side.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击左侧菜单中的服务标签，进入服务页面。
- en: Select the Product service page by clicking on it.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击它，选择产品服务页面。
- en: 'On the Service:product page, select the Inbound Metrics tab. You will see the
    following page:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务：产品页面上，选择入站指标标签。您将看到以下页面：
- en: '![](img/457f3485-6af5-4f6f-a6ef-c7b0adf28a24.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/457f3485-6af5-4f6f-a6ef-c7b0adf28a24.png)'
- en: 'Kiali will visualize some overall performance graphs. However, far more detailed
    performance metrics are available in Grafana. Click on the View in Grafana link
    and Grafana will open up in a new tab. Expect a web page like the following:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kiali 将可视化一些整体性能图表。然而，在 Grafana 中还有更多详细的性能指标。点击“在 Grafana 中查看”链接，Grafana 将在新标签页中打开。期待一个类似于以下的网页：
- en: '![](img/e4795b3f-5a78-41f3-8401-5f3de515cd62.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4795b3f-5a78-41f3-8401-5f3de515cd62.png)'
- en: There are a lot of performance metrics at an application-level being presented
    here, such as HTTP request rates, response times, and error rates. The metrics
    are presented for the Product service, that is, the service that was selected
    in Kiali. Click on the Service drop-down menu in the top left corner of the page
    to select another service. Feel free to look around!
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里展示了大量应用级别的性能指标，例如 HTTP 请求率、响应时间和错误率。这些指标是针对选中的 Kiali 中的 Product 服务的。在页面上方左侧点击服务下拉菜单，选择另一个服务。随意查看！
- en: 'Istio comes with a set of pre-installed Grafana dashboards; click on Istio/Istio
    Service Dashboard to view a list of available dashboards. Now, select the Istio
    Mesh Dashboard. You will see a web page that looks similar to the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 带有一组预安装的 Grafana 仪表板；点击 Istio/Istio 服务仪表板查看可用的仪表板列表。现在，选择 Istio 网格仪表板。您将看到一个类似于以下内容的网页：
- en: '![](img/8d9b08eb-3211-45ee-a1b1-04e82a48aeaa.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d9b08eb-3211-45ee-a1b1-04e82a48aeaa.png)'
- en: This dashboard gives a very good overview of the microservices that are parts
    of the service mesh, as well as their current status in terms of requests per
    second, response times, and success rate.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仪表板能很好地概述服务网格中的微服务以及它们每秒请求数、响应时间和成功率等当前状态。
- en: As we've already mentioned, the Istio dashboards give a very good overview at
    an application level. But there is also a need for monitoring the metrics of hardware
    usage per microservice. In the next section, we will learn about how existing
    dashboards can be imported—specifically, a dashboard showing Java VM metrics for
    a Spring Boot 2-based application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Istio 仪表板能提供很好的应用级别概述。但是，也需要监控每个微服务的硬件使用指标。在下一节，我们将学习如何导入现有的仪表板——具体来说，一个显示基于
    Spring Boot 2 的应用程序的 Java VM 指标的仪表板。
- en: Importing existing Grafana dashboards
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入现有的 Grafana 仪表板
- en: 'As we''ve already mentioned, Grafana has an active community that shares reusable
    dashboards. They can be explored at [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards).
    We will try out a dashboard, called **JVM** (**Micrometer**), that''s tailored
    for getting a lot of valuable JVM-related metrics from Spring Boot 2 applications.
    The URL to the dashboard is [https://grafana.com/grafana/dashboards/4701](https://grafana.com/grafana/dashboards/4701).
    It is very easy to import a dashboard in Grafana. Perform the following steps
    to import this dashboard:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Grafana 有一个活跃的社区，他们分享可重用的仪表板。它们可以在 [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)
    上找到。我们将尝试一个名为 **JVM** (**Micrometer**) 的仪表板，它是为从 Spring Boot 2 应用程序获取许多有价值的 JVM
    相关指标而量身定制的。仪表板的 URL 是 [https://grafana.com/grafana/dashboards/4701](https://grafana.com/grafana/dashboards/4701)。在
    Grafana 中导入仪表板非常容易。按照以下步骤导入这个仪表板：
- en: 'Import the dashboard named JVM (Micrometer) by following these steps:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照这些步骤导入名为 JVM (Micrometer) 的仪表板：
- en: On the Grafana web page, click on the + sign in the left-hand side menu and
    then select Import.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Grafana 网页上，点击左侧菜单中的 + 符号，然后选择导入。
- en: On the Import page, paste the dashboard ID `4701` into the Grafana.com Dashboard field
    and press the Tab key to leave the field.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入页面，将仪表板 ID `4701` 粘贴到 Grafana.com 仪表板字段中，并按 Tab 键离开该字段。
- en: On the Import page that will be displayed, click on the Prometheus drop-down
    menu and select Prometheus.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将显示的导入页面中，点击Prometheus下拉菜单，选择Prometheus。
- en: Now, by clicking on the Import button, the JVM (Micrometer) dashboard will be
    imported and rendered.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“导入”按钮，JVM（Micrometer）仪表板将被导入并显示。
- en: 'Inspect the JVM (Micrometer) dashboard by following these steps:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下步骤检查JVM（Micrometer）仪表板：
- en: 'To get a good view of the metrics, click on the time picker on the top-right.
    This will allow you to select a proper time interval:'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了获得良好的指标视图，点击页面右上角的时钟选择器。这将允许您选择一个适当的时间间隔：
- en: Select Last 5 minutes as the range. Click on the time picker again and set the
    refresh rate to 5 seconds.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最后5分钟作为范围。再次点击时钟选择器，将刷新率设置为5秒。
- en: Click on the Apply button after specifying the refresh rate.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指定刷新率后点击“应用”按钮。
- en: In the Application drop-down menu, which can be found on the top-left of the
    page, select the product-composite microservice.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面左上角的“应用”下拉菜单中，选择product-composite微服务。
- en: 'Since we are running a load test using Siege in the background, we will see
    a lot of metrics. The following is a sample screenshot:'
  id: totrans-98
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在后台使用Siege进行负载测试，我们将看到很多指标。以下是的一个示例屏幕截图：
- en: '![](img/21a2ab89-07a0-4a0a-9836-4ddb9fbac91a.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21a2ab89-07a0-4a0a-9836-4ddb9fbac91a.png)'
- en: In this dashboard, we can find all types of Java VM relevant metrics for, among
    others, CPU, memory, and I/O usage, as well as HTTP-related metrics such as requests/second,
    average duration, and error rates. Feel free to explore these metrics on your
    own!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个仪表板中，我们可以找到所有类型的与Java VM相关的指标，例如CPU、内存和I/O使用情况，以及与HTTP相关的指标，如每秒请求数、平均持续时间和错误率。请随意自行探索这些指标！
- en: Being able to import existing dashboards is of great value when we want to get
    started quickly. However, what's even more important is to know how to create
    our own dashboard. We will learn about this in the next section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 能够导入现有的仪表板在我们想要快速开始时非常有价值。然而，更重要的是要知道如何创建自己的仪表板。我们将在下一节学习这一点。
- en: Developing your own Grafana dashboards
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发自己的Grafana仪表板
- en: Getting started with developing Grafana dashboards is straightforward. The important
    thing for us to understand is what metrics Prometheus makes available for us.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 开始开发Grafana仪表板是很直接的。我们需要理解的是Prometheus为我们提供了哪些指标。
- en: In this section, we will learn how to examine the available metrics. Based on
    these, we will create a dashboard that can be used to monitor some of the more
    interesting metrics.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何检查可用的指标。基于这些指标，我们将创建一个仪表板，用于监控一些更有趣的指标。
- en: Examining Prometheus metrics
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查Prometheus指标
- en: 'In the *Changes in source code for collecting application metrics* section,
    we configured Prometheus to collect metrics from our microservices. We can actually
    make a call to the same endpoint and see what metrics Prometheus collects. Run
    the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在*源代码中收集应用指标的变化*一节中，我们配置了Prometheus从我们的微服务中收集指标。我们实际上可以调用相同的端点并查看Prometheus收集的指标。运行以下命令：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Expect a lot of output from the command, as in the following example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 预期命令会有很多输出，如下例所示：
- en: '![](img/6ca8a2ed-3cb0-4233-84eb-18c1ba2f8f0b.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ca8a2ed-3cb0-4233-84eb-18c1ba2f8f0b.png)'
- en: 'Among all of the metrics that are reported, there are two very interesting
    ones:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有报告的指标中，有两个非常有趣的：
- en: '`resilience4j_retry_calls`: Resilience4j reports on how its retry mechanism
    operates. It reports four different values for successful and failed requests,
    with and without retries.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resilience4j_retry_calls`：Resilience4j报告其重试机制的运行情况。它成功和失败的请求，以及是否有重试，各报告了四个不同的值。'
- en: '`resilience4j_circuitbreaker_state`: Resilience4j reports on the state of the
    circuit breaker.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resilience4j_circuitbreaker_state`：Resilience4j报告电路断路器的状态。'
- en: Note that the metrics have a label named `application`, which contains the name
    of the microservice. This field comes from the configuration of the `management.metrics.tags.application`
    property, which we did in the *Changes in source code for collecting application
    metrics* section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些指标有一个名为`application`的标签，包含微服务名称。这个字段来自我们在*源代码中收集应用指标的变化*一节中配置的`management.metrics.tags.application`属性。
- en: These metrics seem interesting to monitor. None of the dashboards we have used
    so far use metrics from Resilience4j. In the next section, we will create a dashboard
    for these metrics.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指标看起来很有趣，值得我们监控。我们迄今为止使用的所有仪表板都没有使用来自Resilience4j的指标。在下一节中，我们将为这些指标创建一个仪表板。
- en: Creating the dashboard
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建仪表板
- en: In this section, we will learn how to create a dashboard that visualizes the
    Resilience4j metrics we described in the previous section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建一个可视化我们在上一节中描述的Resilience4j指标的仪表板。
- en: 'We will set up the dashboard in the following subsections:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下子节中设置仪表板：
- en: Creating an empty dashboard
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个空白的仪表板
- en: Creating a new panel for the circuit breaker metric
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为电路断路器指标创建一个新的面板
- en: Creating a new panel for the retry metric
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为重试指标创建一个新的面板
- en: Arranging the panels
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排列面板
- en: Creating an empty dashboard
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个空白的仪表板
- en: 'Perform the following steps to create an empty dashboard:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建一个空白的仪表板：
- en: In the Grafana web page, click on the + sign in the left-hand menu and then
    select dashboard.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Grafana网页上，点击左侧菜单中的+号，然后选择仪表板。
- en: 'A web page named New dashboard will be displayed:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示一个名为“新仪表板”的网页：
- en: '![](img/177f95ee-296f-4b8e-9877-a27a1d127388.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/177f95ee-296f-4b8e-9877-a27a1d127388.png)'
- en: 'Click on the dashboard settings button (it has a gear as its icon), as shown
    in the preceding screenshot. Then, follow these steps:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击仪表板设置按钮（它的图标是一个齿轮），如前一个屏幕截图所示。然后，按照以下步骤操作：
- en: Specify the name of the dashboard in the Name field and set the value to Hands-on
    Dashboard.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”字段中指定仪表板名称，并将其设置为“动手实践仪表板”。
- en: Click on the Save button.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”按钮。
- en: 'Click on the time picker to select the default values for the dashboard, as
    follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击时间选择器以选择仪表板的默认值，如下所示：
- en: Select Last 5 minutes as the range.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“最后5分钟”作为时间范围。
- en: Click on the time picker again and specify 5 seconds as the refresh rate in
    the Refreshing every field at the bottom of the panel.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击时间选择器，并在面板底部的“每5秒刷新”字段中指定5秒作为刷新率。
- en: Click on the Apply button after specifying a refresh rate.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指定刷新率后点击“应用”按钮。
- en: Click on the Save button from the menu at the top of the page.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从页面顶部的菜单中点击“保存”按钮。
- en: Enable Save current time range and click on the Save button in the Save Changes dialog
    window.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用“保存当前时间范围”功能，并在“保存更改”对话框中点击“保存”按钮。
- en: Creating a new panel for the circuit breaker metric
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为电路断路器指标创建一个新的面板
- en: 'Perform the following steps to create a new panel for the circuit breaker metric:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建用于电路断路器指标的新面板：
- en: Click on the Add panel button at the top-left of the page (it has an icon of
    a graph with a + sign next to it).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部左侧的“添加面板”按钮（它的图标是一个带有+号的图表）。
- en: Click on the Add Query button. A page will be displayed where the new panel
    can be configured.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加查询”按钮。将显示一个页面，可以在其中配置新面板。
- en: In the query field, under the A letter, specify the name of the circuit breaker
    metric, that is, resilience4j_circuitbreaker_state.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询字段中，在“A字母”下指定电路断路器指标的名称，即“resilience4j_circuitbreaker_state”。
- en: In the Legend field, specify the format, that is, {{application}}.{{namespace}}.
    This will create a legend in the panel where the involved microservices will be
    labeled with its name and namespace.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“图例”字段中指定格式，即`{{application}}.{{namespace}}`。这将创建一个图例，在面板中为涉及的微服务标记其名称和命名空间。
- en: 'The filled in values should look as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写的值应如下所示：
- en: '![](img/e086766e-4246-4776-a512-e23c79ef4d16.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e086766e-4246-4776-a512-e23c79ef4d16.png)'
- en: Click on the third tab, named General, from the left-hand side menu and set
    the Title field to Circuit Breaker.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中点击第三个标签，名为“通用”，并将“标题”字段设置为“电路断路器”。
- en: Press the back button on the top-left of the page to get back to the dashboard.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面左上角的返回按钮以返回到仪表板。
- en: Creating a new panel for the retry metric
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为重试指标创建一个新的面板
- en: 'Here, we will repeat the same procedure that we went through for adding a panel
    for the preceding circuit breaker metric, but instead, we will specify the values
    for the retry metrics:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将重复我们为先前电路断路器指标添加面板的相同步骤，但这次我们将指定重试指标的值：
- en: In the query field, specify `rate(resilience4j_retry_calls[30s])`. Since the
    retry metric is a counter, its value will only go up. An ever-increasing metric
    is rather uninteresting to monitor. The **rate** function is used to convert the
    retry metric into a rate per second metric. The time window specified, that is,
    30 s, is used by the rate function to calculate the average values of the rate.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询字段中指定`rate(resilience4j_retry_calls[30s])`。由于重试指标是一个计数器，其值只会增加。不断增加的指标对于监控来说相当无趣。**rate**函数用于将重试指标转换为每秒的速率指标。指定的时间窗口，即30秒，是rate函数用来计算速率平均值的时间窗口。
- en: For the legend, specify `{{application}}.{{namespace}} ({{kind}})`. Just like
    the output for the preceding Prometheus endpoint, we will get four metrics for
    the retry mechanism. To separate them in the legend, the `kind` attribute needs
    to be added.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于图例，指定`{{application}}.{{namespace}} ({{kind}})`。就像前面Prometheus端点的输出一样，我们将为重试机制获得四个指标。为了在图例中区分它们，需要添加`kind`属性。
- en: Note that Grafana immediately starts to render a graph in the panel editor based
    on the specified values.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，Grafana立即开始在面板编辑器中根据指定值渲染图表。
- en: Specify `Retry` as the title.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“重试”指定为标题。
- en: Press the back button to get back to the dashboard.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击返回按钮返回到仪表板。
- en: Arranging the panels
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排面板
- en: 'Perform the following steps to arrange the panels on the dashboard:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在仪表板上安排面板：
- en: You can resize a panel by dragging its lower right-hand corner to the preferred
    size.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过拖动其右下角来调整面板的大小到所需大小。
- en: You can also move a panel by dragging its header to the desired position.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过拖动其标题将面板移动到所需位置。
- en: 'The following is an example layout of the two panels:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是对两个面板的一个示例布局：
- en: '![](img/b77f5f50-990c-482e-afcc-126be94bac9b.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b77f5f50-990c-482e-afcc-126be94bac9b.png)'
- en: Finally, click on the Save button at the top of the page. A Save Changes dialog
    will show up; enter an optional description and hit the Save button.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击页面顶部的“保存”按钮。将显示“保存更改”对话框；输入可选描述并点击保存按钮。
- en: 'With the dashboard created we are ready to try it out: in the next section,
    we will try out both metrics.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仪表板后，我们准备尝试它：在下一节中，我们将尝试两者指标。
- en: Trying out the new dashboard
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试新的仪表板
- en: Before we start testing the new dashboard, we must stop the load test tool,
    Siege. For this, go to the command window where Siege is running and press *Ctrl
    + C* to stop it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始测试新仪表板之前，我们必须停止负载测试工具Siege。为此，转到Siege正在运行的命令窗口并按*Ctrl + C*停止它。
- en: Let's start by testing how to monitor the circuit breaker. Afterward, we will
    try out the retry metrics.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过测试如何监视断路器开始。之后，我们将尝试重试指标。
- en: Testing the circuit breaker metrics
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试断路器指标
- en: If we force the circuit breaker to open up, its state will change from **closed** to
    **open**, and then eventually to the **half-open** state. This should be reported
    in the circuit breaker panel.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们强制打开断路器，它的状态将从一个**关闭**改变为**打开**，然后最终变为**半开**状态。这应该在断路器面板中报告。
- en: 'Open the circuit, just like we did in [Chapter 13](23795d34-4068-4961-842d-989cde26b642.xhtml),
    *Improving Resilience Using Resilience4j*, in the *Trying out the circuit breaker
    and retry mechanism* section; that is, make three requests to the API in a row,
    all of which will fail. Run the following commands:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 打开电路，就像我们在[第13章](23795d34-4068-4961-842d-989cde26b642.xhtml)《使用Resilience4j提高弹性》中的*尝试断路器和重试机制*部分所做的那样；也就是说，连续对API发起三次请求，全部失败。运行以下命令：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can expect three 500 as a response, indicating three errors in a row, that
    is, what it takes to open the circuit breaker!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以预期会收到三个500响应，表示连续三次错误，也就是说，这是打开断路器所需要的一切！
- en: At some rare occasions, I have noticed that the circuit breaker metrics are
    not reported in Grafana. If they don't show up after a minute, simply rerun the
    preceding command to reopen the circuit breaker again.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些罕见的情况下，我注意到断路器指标没有在Grafana中报告。如果它们在一分钟后没有出现，简单地重新运行前面的命令重新打开断路器。
- en: 'Expect the value for the circuit breaker metric to rise to `1`, indicating
    that the circuit is open. After a while, it should rise to `2`, indicating that
    the circuit is now half-open. This demonstrates that we can monitor that the circuit
    breaker opens up if there are problems. Close the circuit breaker again by issuing
    three successful requests to the API with the following command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 期望断路器指标的值上升到`1`，表示电路已打开。过了一会儿，它应该上升到`2`，表示电路现在是半开状态。这证明了我们可以在出现问题时监控断路器的打开。通过以下命令关闭电路断路器：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We will get three `200` as responses. Note that the circuit breaker metric goes
    back to 0 again in the dashboard; that is, it's closed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到三个`200`作为响应。注意，断路器指标在仪表板中又回到了0；也就是说，它是关闭的。
- en: 'After this test, the Grafana dashboard should look as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 进行此测试后，Grafana仪表板应如下所示：
- en: '![](img/1050575f-3831-4835-a706-bf25efa841f4.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1050575f-3831-4835-a706-bf25efa841f4.png)'
- en: From the preceding screenshot, we can see that the retry mechanism also reports
    metrics that succeeded and failed.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的屏幕截图中，我们可以看到重试机制也报告了成功和失败的指标。
- en: Now that we have seen the circuit breaker metrics in action, let's see the retry
    metrics in action!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了电路断路器指标的实际应用，让我们看看重试指标的实际应用！
- en: Testing the retry metrics
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试重试指标
- en: 'To trigger the retry mechanism, we will use the `faultPercentage` parameter
    we used in previous chapters. To avoid triggering the circuit breaker, we need
    to use relatively low values for the parameter. Run the following command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了触发重试机制，我们将使用在前几章中使用的`faultPercentage`参数。为了避免触发电路断路器，我们需要为该参数使用相对较低的值。运行以下命令：
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding command will call the API once every third second. It specifies
    that 10% of the requests shall fail so that the retry mechanism kicks in and retries
    the failed request. After a few minutes, the dashboard should report metrics such
    as the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 前一条命令将每三秒调用一次API。它指定有10%的请求应失败，以便重试机制启动并重试失败的请求。几分钟之后，仪表板应报告如下指标：
- en: '![](img/21697539-9aba-49a7-9102-1efeca3cd906.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21697539-9aba-49a7-9102-1efeca3cd906.png)'
- en: In the preceding screenshot, we can see that the majority of the requests have
    been executed successfully, without any retries. Approximately 10% of the requests
    have been retried by the retry mechanism and successfully executed after the retry. Before
    proceeding to the next section, remember to stop the request loop that we started
    for the preceding retry test!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个屏幕截图中，我们可以看到大多数请求已经成功执行，没有进行重试。大约有10%的请求被重试机制重试并成功执行。在继续下一节之前，记得停止我们为前一个重试测试启动的请求循环！
- en: In the next section, we will learn how to set up alarms in Grafana, based on
    these metrics.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在Grafana中根据这些指标设置警报。
- en: Setting up alarms in Grafana
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Grafana中设置警报
- en: Being able to monitor the circuit breaker and retry metrics is of great value,
    but even more important is the capability to define automated alarms on these
    metrics. Automated alarms relieve us from monitoring the metrics manually.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 能够监控电路断路器和重试指标非常有价值，但更重要的是，能够根据这些指标定义自动化警报。自动化警报使我们不必手动监控指标。
- en: Grafana comes with built-in support for defining alarms and sending notifications
    to a number of destinations. In this section we will define alerts on the circuit
    breaker and configure Grafana to send emails to the test mail server when alerts
    are raised. The local test mail server was installed in section *Installing a
    local mail server for tests*.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana内置了对定义警报和向多个目的地发送通知的支持。在本节中，我们将为电路断路器定义警报，并配置Grafana在警报触发时向测试邮件服务器发送邮件。本地的测试邮件服务器在“为测试安装本地邮件服务器”一节中安装。
- en: In the next section, we will define a mail-based notification channel that will
    be used by the alert in the section after this.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将定义一个基于邮件的通知渠道，该渠道将在这一节之后的警报中使用。
- en: Setting up a mail-based notification channel
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基于邮件的通知渠道
- en: 'To configure a mail-based notification channel in Grafana, perform the following
    steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Grafana中配置基于邮件的通知渠道，请执行以下步骤：
- en: On the Grafana web page, on the menu to the left, click on the Alerting menu
    choice (with an alarm bell as its icon) and select Notification channels.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Grafana网页上，在左侧菜单中，点击“警报”菜单选项（带有警铃图标的选项）并选择通知渠道。
- en: Click on the Add channel button.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加频道”按钮。
- en: Set the name to `mail`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称设置为`mail`。
- en: Select the type to `Email`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择类型为`Email`。
- en: Enable Send on all alerts.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用所有警报发送。
- en: Enable Include image.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用包含图片。
- en: 'Enter an email address of your choice. Emails will only be sent to the local
    test mail server, independent of what email address that''s specified. The configuration
    of the notification channel should look as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你选择的任意电子邮件地址。邮件只会发送到本地的测试邮件服务器，无论指定的是哪个电子邮件地址。通知渠道的配置应如下所示：
- en: '![](img/868fa4cb-c3fb-4419-8640-e3e10655d322.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/868fa4cb-c3fb-4419-8640-e3e10655d322.png)'
- en: Click on the Send Test button to send a test mail.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“发送测试”按钮发送测试邮件。
- en: Click on the Save button.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”按钮。
- en: Click on the Dashboard button in the left-hand side menu and then on the home
    button.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的“仪表板”按钮，然后点击主页按钮。
- en: Select Hands-on Dashboard from the list to get back to the dashboard.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择“动手仪表板”以返回仪表板。
- en: 'Check the test mail server''s web page to ensure that we have received a test
    email. You should receive the following output:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查测试邮件服务器的网页，确保我们已经收到测试邮件。你应该收到以下输出：
- en: '![](img/81a70ae5-3443-432f-935e-0987ae320c54.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81a70ae5-3443-432f-935e-0987ae320c54.png)'
- en: With a notification channel in place, we are ready to define an alert on the
    circuit breaker.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 有了通知渠道后，我们就可以定义断路器上的警报了。
- en: Setting up an alarm on the circuit breaker
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在断路器上设置警报。
- en: To create an alarm on the circuit breaker, we need to create the alert and then
    add an alert list to the dashboard, where we can see what alert events have occurred
    over time.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建断路器的警报，我们需要先创建警报，然后将警报列表添加到仪表板中，我们可以在其中查看随着时间的推移发生了哪些警报事件。
- en: 'Perform the following steps to create an alert for the circuit breaker:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤创建断路器的警报：
- en: In the Hands-on Dashboard, click on the header of the circuit breaker panel.
    A drop-down menu will appear.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在互动仪表板中，点击断路器面板的标题。一个下拉菜单将出现。
- en: Select the Edit menu option.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择编辑菜单选项。
- en: Select the Alert tab in the tab list to the left (shown as an alarm bell icon).
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧标签列表中选择警报标签（显示为警铃图标）。
- en: Click on the Create Alert button.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建警报按钮。
- en: In the Evaluate every field, set the value to `10s`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“评估每”字段中，将值设置为`10s`。
- en: In the For field, set the value to `0m`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“对于”字段中，将值设置为`0m`。
- en: 'In the Conditions section, specify the following values:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在条件部分，指定以下值：
- en: Set the WHEN field to `max()`.
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“WHEN”字段设置为`max()`。
- en: Set the OF field to `query(A, 1m, now)`.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“OF”字段设置为`query(A, 1m, now)`。
- en: Set the IS ABOVE field to `0.5`.
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“IS ABOVE”字段设置为`0.5`。
- en: 'Scroll down to confirm that the notification has been sent to the default notification
    channel, that is, the mail channel we defined previously. The alarm definition
    should look as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到底部以确认通知已发送到默认通知渠道，即我们之前定义的邮件渠道。警报定义应如下所示：
- en: '![](img/42d25ca0-c993-40b4-8b9c-85487788edda.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42d25ca0-c993-40b4-8b9c-85487788edda.png)'
- en: Click on the back button (left arrow) to get back to the dashboard.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击返回按钮（左箭头）回到仪表板。
- en: 'Then, we need to perform the following steps to create an alarm list:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要执行以下步骤来创建警报列表：
- en: Click on the Add panel button at the top of the page.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的添加面板按钮。
- en: Select Choose Visualization in the New Panel page.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新面板”页面中选择“选择可视化”。
- en: Among the presented visualizations, select Alert List. Click on it twice to
    display an Options list.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供的可视化中，选择“警报列表”。点击它两次以显示选项列表。
- en: Select the Show option called Recent state changes.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择显示名为“最近状态更改”的选项。
- en: 'Enable Alerts from this dashboard. The settings should look as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用从这个仪表板发出的警报。设置应该如下所示：
- en: '![](img/104910bd-eef6-4656-be83-50c72c884211.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/104910bd-eef6-4656-be83-50c72c884211.png)'
- en: Click on the back button to get back to the dashboard.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击返回按钮以回到仪表板。
- en: Rearrange the panel to suit your needs.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新排列面板以满足您的需求。
- en: Save the changes to the dashboard.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存仪表板更改。
- en: 'Here is a sample layout with the alarm list added:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有警报列表添加的示例布局：
- en: '![](img/901da6a7-bf7d-40d5-8ef3-ab3a19a31e89.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/901da6a7-bf7d-40d5-8ef3-ab3a19a31e89.png)'
- en: We can see that the circuit breaker reports the metrics as healthy (with a green
    heart) and that the alert list contains an OK event for the circuit breaker.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到断路器报告指标为正常（带有绿色心形），并且警报列表包含电路断路器的正常事件。
- en: Now, it's time to try out the alarm!
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是尝试警报的时候了！
- en: Trying out the circuit breaker alarm
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试断路器警报。
- en: 'Here, we will repeat the tests from the *Testing the circuit breaker metrics* section,
    but this time, we expect alarms to be raised and emails to be sent as well! Let''s
    get started:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将重复“测试断路器指标”部分中的测试，但这次我们希望警报被触发并且还发送电子邮件！让我们开始吧：
- en: 'Start by opening the circuit breaker:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先打开断路器：
- en: '[PRE16]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The dashboard should report the circuit as open as it did previously. After
    a minute, an alarm should be raised and an email should also be sent. Expect the
    dashboard to look similar to the following screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板应该报告电路像以前一样打开。一分钟后，应该触发警报并且还会发送电子邮件。预期仪表板应该与下面的屏幕截图类似：
- en: '![](img/c59df830-87fe-4b2c-986a-42f792e063d6.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c59df830-87fe-4b2c-986a-42f792e063d6.png)'
- en: Take note of the alarm icon in the header of the circuit breaker panel (a red
    broken heart). The red line marks the time of the alert event and that an alert
    has been added to the alert list.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意断路器面板标题中的警报图标（一个红色的心形）。红线标记警报事件的时间，并且已经将警报添加到警报列表中。
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试邮件服务器上，您应该看到一个电子邮件，如下面的屏幕截图所示：
- en: '![](img/80de707b-9f84-480d-8419-01872070ef0b.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80de707b-9f84-480d-8419-01872070ef0b.png)'
- en: 'Great; we got alarms, just like we expected! Now, close the circuit, making
    the problem go away with the following command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了；我们得到了警报，就像我们预期的那样！现在，关闭电路，用以下命令使问题消失：
- en: '[PRE17]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The metric should go back to normal, that is `0`, and after a minute, the alert
    should go green again.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 指标应该恢复到正常值，即`0`，一分钟之后，警报应该再次变为绿色。
- en: 'Expect the dashboard to look like the following screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 期望仪表板看起来像下面的屏幕截图：
- en: '![](img/5c851716-2af5-4b61-a141-a7aa0c6f25ba.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c851716-2af5-4b61-a141-a7aa0c6f25ba.png)'
- en: Note that the alarm icon in the header of the circuit breaker panel is green
    again; the green line marks the time for the OK event and that an OK event has
    been added in the alert list.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，电路 breaker 面板顶部图标是绿色的；绿色线条标志着OK事件的时间，并且已经在警报列表中添加了一个OK事件。
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试邮件服务器上，你应该看到一封电子邮件，如下面的屏幕截图所示：
- en: '![](img/9adcc46b-e266-4566-8fe9-4c45566b7133.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9adcc46b-e266-4566-8fe9-4c45566b7133.png)'
- en: That completes how to monitor microservices using Prometheus and Grafana.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就完成了使用Prometheus和Grafana监控微服务的方法。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to use Prometheus and Grafana to collect
    and monitor alerts on performance metrics.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Prometheus和Grafana收集和监控性能指标的警报。
- en: We saw that, for collecting performance metrics, we can use Prometheus in a
    Kubernetes environment. We then learned how Prometheus can automatically collect
    metrics from a pod when a few Prometheus annotations are added to the pod's definition.
    In order to produce metrics in our microservices, we used Micrometer.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，在Kubernetes环境中收集性能指标时，可以使用Prometheus。接着，我们学习了当在pods定义中添加几个Prometheus注解时，Prometheus如何能够自动从pods收集指标。为了在我们的微服务中产生指标，我们使用了Micrometer。
- en: Then, we saw how we can monitor the collected metrics using Grafana dashboards.
    Both of the dashboards that come with Kiali, as well as the dashboards that were
    shared by the Grafana community. We also learned how to develop our own dashboards
    where we used metrics from Resilience4j to monitor the usage of its circuit breaker
    and retry mechanisms.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们了解了如何使用Grafana仪表板来监控收集的指标。既有Kiali自带的仪表板，也有Grafana社区分享的仪表板。我们还学习了如何开发我们自己的仪表板，其中我们使用了来自Resilience4j的指标来监控其断路器和重试机制的使用。
- en: Finally, we learned how to define alerts on metrics in Grafana and how to use
    Grafana to send out alert notifications. We used a local test mail server to receive alert
    notifications from Grafana as emails.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何在Grafana中定义指标警报以及如何使用Grafana发送警报通知。我们使用了一个本地的测试邮件服务器来接收Grafana的电子邮件警报。
- en: I hope this book has helped you learn how to develop microservices using all
    the amazing features of Spring Boot, Spring Cloud, Kubernetes, and Istio and that
    you feel encouraged to try them out!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这本书能帮助你学习如何使用Spring Boot、Spring Cloud、Kubernetes和Istio的所有惊人特性来开发微服务，并鼓励你去尝试它们！
- en: Questions
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What changes did we need to make to the source code in the microservices to
    make them produce metrics that are consumed by Prometheus?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对微服务中的源代码进行哪些更改，以便它们产生被Prometheus消费的指标？
- en: What is the `management.metrics.tags.application` config parameter used for?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`management.metrics.tags.application` 配置参数是用来做什么的？'
- en: If you want to analyze a support case regarding high CPU consumption, which
    of the dashboards in this chapter would you start with?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要分析一个关于高CPU消耗的支持案例，你会从本章中的哪个仪表板开始？
- en: If you want to analyze a support case regarding slow API responses, which of
    the dashboards in this chapter would you start with?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要分析一个关于慢API响应的支持案例，你会从本章中的哪个仪表板开始？
- en: What is the problem with counter-based metrics such as Resilience4J's retry
    metrics and what can be done so that we can monitor them in a useful way?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于计数器类型的指标（如Resilience4J的重试指标）存在哪些问题，我们又能做些什么以使它们以有用的方式被监控？
- en: 'Why does the metric for the circuit breaker report 1 for a short while before
    it reports 2? See the following screenshot:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么电路 breaker 的指标在报告 2 之前暂时报告 1？请看下面的屏幕截图：
- en: '![](img/4ea782fb-939e-4629-8a5d-b0d2f181f8d1.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ea782fb-939e-4629-8a5d-b0d2f181f8d1.png)'
- en: .
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 。
