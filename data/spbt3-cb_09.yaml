- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Upgrading from Spring Boot 2.x to Spring Boot 3.0
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Spring Boot 2.x 升级到 Spring Boot 3.0
- en: Most of the time invested in an application’s lifetime is related to maintenance.
    A successful application may last for years or decades. During this time, it may
    require upgrades for its evolution. You probably have an application that you
    want to evolve by taking advantage of the Spring Boot 3 features. In this chapter,
    we’ll use a sample application that I created using Spring Boot 2.6 and perform
    gradual upgrades in each recipe. The recipes in this chapter should be done in
    order, as we’ll use the outcome of one recipe as the starting point for the next.
    A couple of recipes won’t produce a working version, as there can be compilation
    errors to be fixed in the following recipes. The last recipe, *Using OpenRewrite
    for migration automation*, can be done without completing any previous recipes.
    However, it requires some of the manual actions explained in the previous recipes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的生命周期中，大部分投入的时间都与维护相关。一个成功的应用程序可能持续数年或数十年。在这段时间里，它可能需要升级以适应其发展。你可能有一个想要利用
    Spring Boot 3 特性进行演化的应用程序。在本章中，我们将使用一个我使用 Spring Boot 2.6 创建的示例应用程序，并在每个菜谱中进行逐步升级。本章中的菜谱应按顺序完成，因为我们将使用一个菜谱的结果作为下一个菜谱的起点。一些菜谱可能不会产生一个可工作的版本，因为在后续的菜谱中可能存在需要修复的编译错误。最后一个菜谱，*使用
    OpenRewrite 进行迁移自动化*，可以在不完成任何先前菜谱的情况下进行。然而，它需要一些在先前菜谱中解释的手动操作。
- en: 'In this chapter, we’re going to cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Preparing the application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备应用程序
- en: Preparing Spring Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备 Spring Security
- en: Detecting property changes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测属性变更
- en: Upgrade the project to Spring Boot 3
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目升级到 Spring Boot 3
- en: Upgrading Spring Data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级 Spring Data
- en: Managing Actuator changes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Actuator变更
- en: Managing web application changes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理网络应用程序变更
- en: Using OpenRewrite for migration automation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenRewrite 进行迁移自动化
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we won’t need any additional tools apart from the JDK and the
    IDE, as in the previous chapters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们除了 JDK 和 IDE 之外不需要任何额外的工具，就像前几章一样。
- en: Keep in mind that Spring Boot 3.0 requires Java 17 or a later version. To migrate
    an existing project to Spring Boot 3.0 and use Java 11, you must upgrade to Java
    17.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Spring Boot 3.0 需要 Java 17 或更高版本。要将现有项目迁移到 Spring Boot 3.0 并使用 Java 11，您必须升级到
    Java 17。
- en: Before migrating to Spring Boot 3.0, I recommend that you upgrade to the latest
    Spring Boot 2 version, 2.7.x.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移到 Spring Boot 3.0 之前，我建议你升级到最新的 Spring Boot 2 版本，2.7.x。
- en: In this chapter, we’ll use a Spring Boot 2 sample and make changes to it until
    it’s finally migrated to the latest version of Spring Boot 3\. This application
    accesses a PostgreSQL database and a Cassandra database. We’ll run both servers
    using Docker. The official page for running Docker on your computer is [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).
    The application has some Testcontainers-based tests, so that you will need Docker
    on your computer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个 Spring Boot 2 示例，并对其进行修改，直到最终迁移到 Spring Boot 3 的最新版本。该应用程序访问 PostgreSQL
    数据库和 Cassandra 数据库。我们将使用 Docker 运行这两个服务器。在您的计算机上运行 Docker 的官方页面是 [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)。该应用程序有一些基于
    Testcontainers 的测试，因此您需要在您的计算机上安装 Docker。
- en: 'To run PostgreSQL on Docker, you can run the following command in your terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 上运行 PostgreSQL，你可以在你的终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will need to create a database named `football`. You can do this by running
    the following PSQL command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要创建一个名为 `football` 的数据库。您可以通过运行以下 PSQL 命令来完成此操作：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run Cassandra on Docker, you can run the following command in your terminal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 上运行 Cassandra，你可以在你的终端中运行以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All the recipes that will be demonstrated in this chapter can be found at:
    [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook/tree/main/chapter9](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook/tree/main/chapter9).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中将展示的所有菜谱都可以在以下位置找到：[https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook/tree/main/chapter9](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook/tree/main/chapter9)。
- en: Next, we will learn about preparing the application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何准备应用程序。
- en: Preparing the application
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用程序
- en: On each version of Spring Boot, some components are marked for deprecation,
    and normally, there is a proposal for change to avoid the deprecated components.
    As upgrading from Spring Boot 2 to Spring Boot 3 is a major change, upgrading
    to the latest Spring Boot 2 version is strongly recommended.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot的每个版本中，一些组件被标记为弃用，并且通常会有一个更改建议以避免弃用组件。由于从Spring Boot 2升级到Spring
    Boot 3是一个重大变更，强烈建议升级到最新的Spring Boot 2版本。
- en: 'Before migrating an application to Spring Boot 3, the following preparation
    is recommended:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序迁移到Spring Boot 3之前，以下准备工作是推荐的：
- en: Upgrade the Spring Boot version to the latest 2.7.x available. At the time of
    writing this book, it is 2.7.18\. This will facilitate the upgrade to Spring Boot
    3
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Spring Boot版本升级到最新的2.7.x版本。在撰写本书时，它是2.7.18。这将有助于升级到Spring Boot 3。
- en: Update the Java version to Java 17, the minimum supported version in Spring
    Boot 3.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java版本更新到Java 17，这是Spring Boot 3的最小支持版本。
- en: Address all deprecated components.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决所有弃用组件。
- en: In this recipe, we’ll prepare a sample application that uses Spring 2.6 and
    Java 11\. By the end of the recipe, the application will use Spring 2.7.18, Java
    17, and all deprecated components and APIs will be addressed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将准备一个使用Spring 2.6和Java 11的示例应用程序。到菜谱结束时，应用程序将使用Spring 2.7.18，Java 17，并且所有弃用组件和API都将得到解决。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will prepare an application using Spring 2.6 and Java 11 in this recipe.
    The sample application is in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/football` folder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将使用Spring 2.6和Java 11准备一个应用程序。示例应用程序位于本书的GitHub仓库[https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)的`chapter9/football`文件夹中。
- en: Depending on your operating system, you may use different tools to manage the
    current JDK version. For instance, you can use SDKMAN! tool on Linux and Mac.
    You can install it by following the instructions on the project page at [https://sdkman.io/](https://sdkman.io/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的操作系统，你可能需要使用不同的工具来管理当前的JDK版本。例如，你可以在Linux和Mac上使用SDKMAN!工具。你可以通过遵循项目页面[https://sdkman.io/](https://sdkman.io/)上的说明来安装它。
- en: To run the application, you will need a PostgreSQL server running on your computer.
    To acquire this, follow the instructions in the *Technical* *requirements* section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，你需要在你的计算机上运行一个PostgreSQL服务器。要获取它，请遵循*技术* *要求*部分中的说明。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let’s put the application at the starting line. Ready, steady, go!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把应用程序放在起跑线上。准备， steady， go！
- en: 'First, we’ll address all deprecation warnings. For instance, if you compile
    the football project by executing `mvn compile`, you will see one deprecation
    warning about the `DataSourceInitializationMode` class. If you open the documentation
    of that class at [https://docs.spring.io/spring-boot/docs/2.6.15/api/org/springframework/boot/jdbc/DataSourceInitializationMode.html](https://docs.spring.io/spring-boot/docs/2.6.15/api/org/springframework/boot/jdbc/DataSourceInitializationMode.html),
    you will see the following information:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将解决所有弃用警告。例如，如果你通过执行`mvn compile`来编译足球项目，你将看到一个关于`DataSourceInitializationMode`类的弃用警告。如果你打开该类的文档[https://docs.spring.io/spring-boot/docs/2.6.15/api/org/springframework/boot/jdbc/DataSourceInitializationMode.html](https://docs.spring.io/spring-boot/docs/2.6.15/api/org/springframework/boot/jdbc/DataSourceInitializationMode.html)，你将看到以下信息：
- en: '**Deprecated.**'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**弃用。**'
- en: '**since 2.6.0 for removal in 3.0.0 in favor** **of DatabaseInitializationMode**'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**自2.6.0起弃用，在3.0.0中移除，以** **DatabaseInitializationMode** **取而代之**'
- en: 'You can see this information directly in the editor if you use an IDE, such
    as IntelliJ or Visual Studio Code. For instance, in Visual Studio Code, you would
    see the following:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用IDE，如IntelliJ或Visual Studio Code，你可以在编辑器中直接看到此信息。例如，在Visual Studio Code中，你会看到以下内容：
- en: "![Figure 9.1\uFEFF: Deprecation message in Visual Studio Code](img/B21646_09_1.jpg)"
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1：Visual Studio Code中的弃用消息](img/B21646_09_1.jpg)'
- en: 'Figure 9.1: Deprecation message in Visual Studio Code'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：Visual Studio Code中的弃用消息
- en: Now, let’s replace `DataSourceInitializationMode` with `DatabaseInitializationMode`.
    This change is very straightforward, as just a simple replacement is enough. Other
    deprecation changes may require some code refactoring. Usually, the deprecated
    class documentation guides the implementation of the changes.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将`DataSourceInitializationMode`替换为`DatabaseInitializationMode`。这个更改非常直接，只需要简单的替换即可。其他弃用更改可能需要一些代码重构。通常，弃用类的文档会指导更改的实现。
- en: 'The next step will be updating the Spring Boot version to 2.7.18\. For that,
    open the `pom.xml` file and find the following code snippet:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步将是将 Spring Boot 版本更新到 2.7.18。为此，打开 `pom.xml` 文件并找到以下代码片段：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That refers to the Spring Boot version in use. In the highlighted code, you
    can see that the actual version is 2.6.15\. Let’s update it to the latest version
    2 available. At the time of writing this book, it is 2.7.18.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这指的是正在使用的 Spring Boot 版本。在突出显示的代码中，你可以看到实际版本是 2.6.15。让我们将其更新到可用的最新版本 2。在撰写本书时，它是
    2.7.18。
- en: If you recompile the application, you will see some deprecation warnings related
    to Spring Security in the `SecurityConfiguration.java` file. We’ll fix those warnings
    in the *Upgrading Spring* *Security* recipe.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你重新编译应用程序，你将在 `SecurityConfiguration.java` 文件中看到一些与 Spring Security 相关的弃用警告。我们将在
    *升级 Spring* *Security* 的配方中修复这些警告。
- en: 'Now, update the Java version to Java 17\. You should ensure you are using the
    JDK 17:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 Java 版本更新到 Java 17。你应该确保你正在使用 JDK 17：
- en: If you are on Linux or Mac, you can use SDKMan!
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux 或 Mac，你可以使用 SDKMan！
- en: On Windows, you may have to update the Java Home environment variable.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，你可能需要更新 Java Home 环境变量。
- en: 'Regardless of the operating system, you can manage the Java version using the
    IDE:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不论操作系统如何，你都可以使用 IDE 来管理 Java 版本：
- en: For instance, in Visual Studio Code, you can follow the instructions at [https://code.visualstudio.com/docs/java/java-project#_configure-runtime-for-projects](https://code.visualstudio.com/docs/java/java-project#_configure-runtime-for-projects)
    to configure the Java runtime for your project.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，在 Visual Studio Code 中，你可以遵循 [https://code.visualstudio.com/docs/java/java-project#_configure-runtime-for-projects](https://code.visualstudio.com/docs/java/java-project#_configure-runtime-for-projects)
    中的说明来配置项目的 Java 运行时。
- en: In IntelliJ, you can follow the instructions at https://www.jetbrains.com/help/idea/sdk.html#manage_sdks
    for this purpose.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 中，你可以遵循 https://www.jetbrains.com/help/idea/sdk.html#manage_sdks
    中的说明来完成此操作。
- en: 'You should change the Java version in your project as well. For that, open
    the `pom.xml` file and look for the property `java.version`:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还应该在项目中更改 Java 版本。为此，打开 `pom.xml` 文件并查找属性 `java.version`：
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Replace the `java.version` property with `17`.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `java.version` 属性替换为 `17`。
- en: Build the application again and verify that the only deprecation warnings are
    related to Spring Security in the `SecurityConfiguration.java` file. Again, if
    there are other deprecation warnings, try to use the alternative solution proposed
    by the deprecation warning message.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次构建应用程序并验证，只有与 `SecurityConfiguration.java` 文件相关的弃用警告。再次，如果有其他弃用警告，请尝试使用弃用警告消息中提出的替代解决方案。
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Every time there is a new version, there can be components marked for deprecation,
    and as we saw in this recipe, usually, it’s also known in which version they will
    be removed from. It’s convenient to install the upgrades gradually and not skip
    intermediate versions. As we saw in this example, migrating all revision versions,
    such as 2.7.1, 2.7.2, and so on, is unnecessary. However, you should not skip
    minor versions, such as 2.7.x, as there can be new components marked for deprecation
    that will be removed in version 3\. Skipping the 2.7 upgrade won’t let you see
    the warning and the alternative replacement. Suddenly, you will find that the
    class you used is not found.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每次有新版本发布时，都可能有一些组件被标记为弃用，并且正如我们在本配方中看到的，通常也已知它们将在哪个版本中被移除。逐步安装升级并跳过中间版本是很方便的。正如我们在本例中看到的，迁移所有修订版本，如
    2.7.1、2.7.2 等，是不必要的。然而，你不应该跳过小版本，如 2.7.x，因为可能会有新的组件被标记为弃用，并在版本 3 中被移除。跳过 2.7 升级将不会让你看到警告和替代方案。突然间，你会发现你使用的类找不到。
- en: See also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Spring Boot 3.0 uses Spring Framework 6.0\. If your project has explicit dependencies
    on prior versions, you will also need to upgrade them. You can find the migration
    guide for Spring Framework at [https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3.0 使用 Spring Framework 6.0。如果你的项目对先前版本有明确的依赖，你也需要升级它们。你可以在 [https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x)
    找到 Spring Framework 的迁移指南。
- en: Preparing Spring Security
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备 Spring Security
- en: The main change regarding security in Spring Boot 3 is the upgrading from Spring
    Security 5 to Spring Security 6\. There are many changes related to this upgrade,
    but in the recipe, we’ll focus on the most common one, which is how it’s configured.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3中关于安全的主要变化是从Spring Security 5升级到Spring Security 6。与这次升级相关的有很多变化，但在本食谱中，我们将关注最常见的一个，即它的配置方式。
- en: In Spring Security 5, most of the settings were configured by extending the
    `WebSecurityConfigurerAdapter` class, and in Spring Security 6, those changes
    are applied by configuring specific beans in our application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security 5中，大多数设置都是通过扩展`WebSecurityConfigurerAdapter`类来配置的，而在Spring
    Security 6中，这些更改通过在我们的应用程序中配置特定的bean来应用。
- en: In this recipe, we’ll transform the `WebSecurityConfigurerAdapter` class into
    a configuration class that exposes the beans to apply an equivalent configuration.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将`WebSecurityConfigurerAdapter`类转换为一个配置类，该类公开了应用等效配置的bean。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The starting point of this recipe is the outcome of the *Preparing the application*
    recipe. I prepared a working version in case you haven’t completed it yet. You
    can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-2/start` folder.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的起点是*准备应用程序*食谱的结果。我准备了一个工作版本，以防你还没有完成。你可以在本书的GitHub仓库[https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)的`chapter9/recipe9-2/start`文件夹中找到它。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let’s complete the preparation of our application by adapting the deprecated
    components related to Spring Security:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过适配与Spring Security相关的已弃用组件来完成我们应用程序的准备：
- en: 'If you compile the project as-is now, you will see that the `SecurityConfig`
    class contains some deprecation warnings. Let’s tackle them:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在以这种方式编译项目，你会看到`SecurityConfig`类包含一些弃用警告。让我们来处理它们：
- en: The `WebSecurityConfigurerAdapter` class is deprecated. Now, the application
    won’t extend any class.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebSecurityConfigurerAdapter`类已弃用。现在，应用程序将不再扩展任何类。'
- en: The `withDefaultPasswordEncoder` method is deprecated and not recommended for
    production environments. However, as the documentation states, it’s acceptable
    for demos and getting started. We won’t change it.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`withDefaultPasswordEncoder`方法已弃用，不推荐在生产环境中使用。然而，如文档所述，它对于演示和入门是可接受的。我们不会更改它。'
- en: 'The `SecurityConfig` class is annotated with `@EnableWebSecurity`. In addition,
    it should be annotated with `@Configuration`. It should look like this:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SecurityConfig`类被注解为`@EnableWebSecurity`。此外，它应该被注解为`@Configuration`。它应该看起来像这样：'
- en: '[PRE5]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we’ll change the `configure` method that receives `AuthenticationManagerBuilder`
    as a parameter to create a method configuring an `InMemoryUserDetailsManager`
    bean:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更改接收`AuthenticationManagerBuilder`作为参数的`configure`方法，以创建一个配置`InMemoryUserDetailsManager`
    bean的方法：
- en: '[PRE6]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we’ll replace the `configure` method that receives a `WebSecurity` with
    a method returning a `WebSecurityCustomizer` bean. It should look like this:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将用返回`WebSecurityCustomizer` bean的方法替换接收`WebSecurity`的`configure`方法。它应该看起来像这样：
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To complete the `SecurityConfig` class, we must replace the `configure` method
    receiving a `HttpSecurity` parameter with a method creating a `SecurityFilterChain`
    bean:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成`SecurityConfig`类，我们必须用创建`SecurityFilterChain` bean的方法替换接收`HttpSecurity`参数的`configure`方法：
- en: '[PRE8]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, if we execute the tests, we’ll realize that the tests related to controllers
    using the `@WebMvcTest` annotation no longer work as expected. We’ll include the
    `@Import` annotation in the `FootballControllerTest` and `SecurityControllerTest`
    classes to fix it.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们执行测试，我们会发现使用`@WebMvcTest`注解的控制器相关的测试不再按预期工作。我们将在`FootballControllerTest`和`SecurityControllerTest`类中包含`@Import`注解来修复它。
- en: '`FootballControllerTest`:'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FootballControllerTest`：'
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`SecurityControllerTest`:'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecurityControllerTest`：'
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, execute the tests and verify that all of them pass.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，执行测试并验证所有测试都通过。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main change is the deprecation of the `WebSecurityConfigurerAdapter` class.
    This class is removed in Spring Security 6 and, hence, from Spring Boot 3\. In
    this recipe, we prepared the application for a smooth security migration to upgrade
    the project to Spring Boot 3\. The new approach is to create beans for each security
    aspect we want to configure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 主要变化是`WebSecurityConfigurerAdapter`类的弃用。这个类在Spring Security 6中被移除，因此从Spring
    Boot 3开始也被移除。在这个食谱中，我们为将项目升级到Spring Boot 3做好了平滑的安全迁移准备。新方法是为我们想要配置的每个安全方面创建bean。
- en: Spring Security 6 introduces new methods to replace the `antMatcher` method;
    for instance, the `requestMatcher` method. To avoid more changes in this stage,
    we haven’t replaced the `antMatcher` method yet. But we’ll do that once we upgrade
    to Spring Boot 3, as it will be deprecated.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 6 引入了新的方法来替换 `antMatcher` 方法；例如，`requestMatcher` 方法。为了避免在这个阶段有更多更改，我们还没有替换
    `antMatcher` 方法。但是，一旦我们升级到 Spring Boot 3，我们就会这样做，因为这将不再被支持。
- en: We keep using `withDefaultPasswordEncoder` in this recipe. Although it’s deprecated
    and not recommended for production environments, using it in development environments
    is acceptable. The deprecation warning is present in Spring Boot 2, and this method
    won’t be removed any time soon. Deprecation was introduced to warn about usage
    in production environments.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们继续使用 `withDefaultPasswordEncoder`。尽管它已被弃用且不建议在生产环境中使用，但在开发环境中使用它是可接受的。Spring
    Boot 2 中存在弃用警告，并且该方法不会很快被移除。弃用是为了警告生产环境中的使用。
- en: As the security settings are now defined as a configuration class annotated
    with `@Configuration`, importing them into our `@WebMvcTest` tests is necessary.
    The `@WebMvcTest` annotation only loads the MVC-related components, and it doesn’t
    load `SecurityConfig` by default. For that reason, importing them into our `@WebMvcTest`
    tests is necessary.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全设置现在是使用 `@Configuration` 注解的配置类定义的，因此将它们导入我们的 `@WebMvcTest` 测试中是必要的。`@WebMvcTest`
    注解仅加载 MVC 相关组件，并且默认情况下不会加载 `SecurityConfig`。因此，将它们导入我们的 `@WebMvcTest` 测试中是必要的。
- en: See also
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The upgrade from Spring Security 5 to Spring Security 6 includes more changes
    than the ones tackled in this recipe. You can find the full migration guide on
    the official website at [https://docs.spring.io/spring-security/reference/6.0/migration/index.html](https://docs.spring.io/spring-security/reference/6.0/migration/index.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Spring Security 5 升级到 Spring Security 6 包含的更改比本食谱中处理的变化要多。您可以在官方网站上找到完整的迁移指南，网址为
    [https://docs.spring.io/spring-security/reference/6.0/migration/index.html](https://docs.spring.io/spring-security/reference/6.0/migration/index.html)。
- en: Detecting property changes
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测属性更改
- en: As we learned in this book, one of the main tasks when developing a Spring Boot
    application is configuring its components. It’s important to note that every time
    a new component version is released, there may be changes to the properties. This
    is especially true when upgrading to a major version, such as from version 2.x
    to 3.0\. Typically, the changes are gradual. For example, a property might be
    marked as *deprecated* in one version, meaning it will be removed in a future
    version. Therefore, it’s recommended not to skip any versions when upgrading.
    For instance, if you plan to upgrade from version 2.6 to version 3.2, it’s best
    to upgrade first to version 2.7, then to 3.0, then 3.1, and finally 3.2.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书中学到的，开发 Spring Boot 应用程序时的主要任务之一是配置其组件。需要注意的是，每次发布新的组件版本时，属性可能会有所变化。这尤其是在升级到主要版本时，例如从
    2.x 版本升级到 3.0 版本。通常，这些变化是渐进的。例如，一个属性可能在某个版本中被标记为 *已弃用*，这意味着它将在未来的版本中被移除。因此，建议在升级时不要跳过任何版本。例如，如果您计划从版本
    2.6 升级到版本 3.2，最好首先升级到版本 2.7，然后是 3.0，然后是 3.1，最后是 3.2。
- en: To address the property changes between versions, Spring Boot provides a tool
    named Spring Boot Properties Migrator. It’s a dependency that analyzes the application
    environment during the application start-up and prints a diagnostic.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决版本之间的属性更改，Spring Boot 提供了一个名为 Spring Boot Properties Migrator 的工具。这是一个依赖项，它会在应用程序启动时分析应用程序环境并打印诊断信息。
- en: In this recipe, we’ll use the Spring Boot Properties Migrator in our project
    to detect the deprecated properties in the configuration file and fix them.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用 Spring Boot Properties Migrator 在我们的项目中检测配置文件中的弃用属性并修复它们。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll start this recipe using the outcome of the *Preparing Spring Security*
    recipe. You can use the project I prepared as a starting point if you haven’t
    completed it yet. You can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-3/start` folder.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *Preparing Spring Security* 食谱的结果开始本食谱。如果您还没有完成它，可以使用我准备的项目作为起点。您可以在本书的
    GitHub 仓库中找到它，网址为 [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)，在
    `chapter9/recipe9-3/start` 文件夹中。
- en: You will need the PostgreSQL server and Cassandra running on your computer to
    run the application. For instructions, see the *Technical requirements* section
    in this chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在计算机上运行 PostgreSQL 服务器和 Cassandra 才能运行应用程序。有关说明，请参阅本章中的 *技术要求* 部分。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Our application uses deprecated properties; let’s fix them with Spring Boot
    Properties Migrator!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序使用了过时的属性；让我们使用 Spring Boot Properties Migrator 来修复它们！
- en: 'First, we’ll add the Spring Boot Properties Migrator dependency to our project.
    For that, open the `pom.xml` file and add the following dependency:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将 Spring Boot Properties Migrator 依赖项添加到我们的项目中。为此，打开 `pom.xml` 文件，并添加以下依赖项：
- en: '[PRE11]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, you can run the application and see an error with the property in the
    properties file that should be migrated. For instance, I executed `mvn spring-boot:run`
    in the terminal and I received the following message:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以运行应用程序，并看到属性文件中应该迁移的属性的错误。例如，我在终端中执行了 `mvn spring-boot:run`，并收到了以下消息：
- en: '![Figure 9.2 – Error when executing the application with Spring Boot Properties
    Migration](img/B21646_09_2.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 使用 Spring Boot 属性迁移执行应用程序时出错](img/B21646_09_2.jpg)'
- en: Figure 9.2 – Error when executing the application with Spring Boot Properties
    Migration
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 使用 Spring Boot 属性迁移执行应用程序时出错
- en: As you can see, we need to migrate the `spring.datasource.initialization-mode`
    property and use `spring.sql.init.mode` instead.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们需要迁移 `spring.datasource.initialization-mode` 属性，并使用 `spring.sql.init.mode`
    代替。
- en: 'Then, we’ll replace the `spring.datasource.initialization-mode` property with
    `spring.sql.init.mode`. To do this, open the `application.yml` file, find the
    `initialization-mode` property, and remove it. Then, add the `spring.sql.init.mode`
    property. The `spring` configuration should look like this:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将 `spring.datasource.initialization-mode` 属性替换为 `spring.sql.init.mode`。为此，打开
    `application.yml` 文件，找到 `initialization-mode` 属性，并将其删除。然后，添加 `spring.sql.init.mode`
    属性。`spring` 配置应如下所示：
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `dataSourceInicitalizationMode` parameter of the `CustomDatasourceService`
    class references the `spring.datasource.initialization-mode` configuration property.
    We must point to the new property, `spring.sql.init.mode`. For that, replace the
    `@Value` annotation in the constructor with the new property. It should look like
    this:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CustomDatasourceService` 类的 `dataSourceInicitalizationMode` 参数引用了 `spring.datasource.initialization-mode`
    配置属性。我们必须指向新的属性，`spring.sql.init.mode`。为此，将构造函数中的 `@Value` 注解替换为新属性。它应该看起来像这样：'
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that the changes are applied, let’s execute the application again. You can
    do it by running the `spring-boot:run` command in your terminal.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在更改已应用，让我们再次执行应用程序。您可以通过在终端中运行 `spring-boot:run` 命令来完成此操作。
- en: You will see that the application runs normally.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到应用程序正常运行。
- en: Now that the properties have been migrated, the last step is to remove the Spring
    Boot Properties Migration dependency. To do this, open the `pom.xml` file and
    remove the dependency you added in *step 1*.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在属性已迁移，最后一步是删除 Spring Boot Properties Migration 依赖项。为此，打开 `pom.xml` 文件，并删除您在
    *步骤 1* 中添加的依赖项。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Spring Boot Properties Migration dependency first tries to map the deprecated
    properties to the new ones when possible and then prints a warning. Without direct
    mapping to a new property, it throws an error and prints the issue. In this recipe,
    we used a dependency that Spring Boot Properties Migration cannot map automatically.
    For that reason, there was an error. Once fixed, the Spring Boot Migration doesn’t
    show any additional errors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot Properties Migration 依赖项首先尝试将过时的属性映射到新的属性，如果可能的话，然后打印警告。如果没有直接映射到新属性，它将抛出错误并打印问题。在本菜谱中，我们使用了
    Spring Boot Properties Migration 无法自动映射的依赖项。因此出现了错误。一旦修复，Spring Boot 迁移不会显示任何额外的错误。
- en: As the Spring Boot Properties Migration performs an additional check upon application
    start-up, it can slow down the application. Removing the Spring Boot Properties
    Migration from your application is a good practice once the deprecated properties
    are fixed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Spring Boot Properties Migration 在应用程序启动时执行额外的检查，它可能会减慢应用程序的运行速度。一旦修复了过时的属性，从应用程序中删除
    Spring Boot Properties Migration 是一个好习惯。
- en: Upgrade the project to Spring Boot 3
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将项目升级到 Spring Boot 3
- en: In this recipe, we’ll take the first steps in Spring Boot 3 by updating the
    references in our project. When we update to Spring Boot 3, we’ll see some compilation
    errors that need to be addressed; in this recipe, we’ll take the first steps toward
    fixing them.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过更新我们项目中的引用来迈出 Spring Boot 3 的第一步。当我们升级到 Spring Boot 3 时，我们会看到一些需要解决的编译错误；在这个菜谱中，我们将迈出修复这些错误的第一步。
- en: Spring Boot 3 depends on Jakarta EE 9 or a later version, while Spring Boot
    relies on Jakarta 7 and 8\. In Jakarta 9, all namespaces changed from `javax.*`
    to `jakarta.*`. This is probably the biggest impact that can be seen when upgrading
    to Spring Boot 3, as it requires changing many references in our projects.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3 依赖于 Jakarta EE 9 或更高版本，而 Spring Boot 则依赖于 Jakarta 7 和 8。在 Jakarta
    9 中，所有命名空间从 `javax.*` 更改为 `jakarta.*`。这可能是升级到 Spring Boot 3 时可以看到的最大影响，因为它需要更改我们项目中许多引用。
- en: In this recipe, we’ll finally upgrade our project to Spring Boot 3, which will
    require updating all `javax` namespace references to `jakarta`. We’ll also perform
    the latest updates to Spring Security. By the end of this recipe, the application
    won’t work yet; you must complete two recipes, *Upgrading Spring Data* and *Managing
    Actuator changes*, to make it work.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将最终将我们的项目升级到 Spring Boot 3，这将需要将所有 `javax` 命名空间引用更新为 `jakarta`。我们还将执行
    Spring Security 的最新更新。在本菜谱结束时，应用程序仍将无法工作；你必须完成两个菜谱，*Upgrading Spring Data* 和 *Managing
    Actuator changes*，才能使其工作。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll use the outcome of the *Detecting property changes* recipe as the starting
    point for this recipe. You can use the version I prepared if you haven’t completed
    it yet. You can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-4/start` folder.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *Detecting property changes* 菜谱的结果作为本菜谱的起点。如果你还没有完成它，可以使用我准备的版本。你可以在本书的
    GitHub 仓库中找到它，网址为 [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)，在
    `chapter9/recipe9-4/start` 文件夹中。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We’ll upgrade the application to Spring Boot 3, and we’ll see the Jakarta EE-related
    errors. Let’s fix them and start using Spring Boot 3!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将升级应用程序到 Spring Boot 3，并会看到与 Jakarta EE 相关的错误。让我们修复它们并开始使用 Spring Boot 3！
- en: 'First, we’ll upgrade the project to use Spring Boot 3\. For that, open the
    `pom.xml` file and find the following code snippet:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将升级项目以使用 Spring Boot 3。为此，打开 `pom.xml` 文件并找到以下代码片段：
- en: '[PRE14]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You should replace the version property with the latest Spring Boot version,
    which, at the time of writing this book, is 3.2.4.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该将版本属性替换为最新的 Spring Boot 版本，在撰写本书时，该版本是 3.2.4。
- en: 'You will see that the project doesn’t compile, as all references to `javax.*`
    namespaces no longer work. To fix it, replace `javax` with `jakarta` in all files.
    There are a significant number of changes to make, so I recommend using the replace
    features of your favorite editor. For instance, you can use the **Search: Replace
    in files** command in Visual Studio Code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '你会看到项目无法编译，因为所有对 `javax.*` 命名空间的引用都不再有效。要修复它，请将所有文件中的 `javax` 替换为 `jakarta`。需要做出大量的更改，所以我建议使用你喜欢的编辑器的替换功能。例如，你可以在
    Visual Studio Code 中使用 **Search: Replace in files** 命令：'
- en: "![Figure 9.3 \uFEFF: Replacing javax with jakarta in files in Visual Studio\
    \ Code](img/B21646_09_3.jpg)"
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：在 Visual Studio Code 中的文件中将 javax 替换为 jakarta](img/B21646_09_3.jpg)'
- en: 'Figure 9.3 : Replacing javax with jakarta in files in Visual Studio Code'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：在 Visual Studio Code 中的文件中将 javax 替换为 jakarta
- en: 'If you try to compile the project, you will see that there are still three
    files with compilation errors:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试编译项目，你会看到仍有三个文件存在编译错误：
- en: '`MatchEventEntity.java`: There are errors related to fields mapped as JSON
    in the database. This issue will be tackled in the *Upgrading Spring* *Data* recipe.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatchEventEntity.java`：存在与数据库中映射为 JSON 的字段相关的错误。这个问题将在 *Upgrading Spring*
    *Data* 菜谱中解决。'
- en: '`FootballConfig.java`: There are errors related to `HttpTrace`. This issue
    will be fixed in the *Managing Actuator* *changes* recipe.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FootballConfig.java`：存在与 `HttpTrace` 相关的错误。这个问题将在 *Managing Actuator* *更改*
    菜谱中修复。'
- en: '`SecurityConfig.java`: There are new errors related to Spring Security changes
    that we’ll fix in the following step.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecurityConfig.java`：存在与 Spring Security 变更相关的新错误，我们将在以下步骤中修复。'
- en: 'To fix the issues with the `SecurityConfig` class, we need to do the following:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修复 `SecurityConfig` 类的问题，我们需要做以下几步：
- en: 'Replace the `antMatchers` call with a `requestMatchers` call in the `webSecurityCustomizer`
    method. It should look like this:'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `webSecurityCustomizer` 方法中将 `antMatchers` 调用替换为 `requestMatchers` 调用。它应该看起来像这样：
- en: '[PRE15]'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `filterChain` method, we need to make several changes:'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `filterChain` 方法中，我们需要进行几个更改：
- en: Replace `authorizeRequests` with `authorizeHttpRequests`.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `authorizeRequests` 替换为 `authorizeHttpRequests`。
- en: Replace the `requestMatchers("/")` with `anyRequest()`.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `requestMatchers("/")` 替换为 `anyRequest()`。
- en: Replace the `antMatchers` call with a `requestsMatchers`.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `antMatchers` 调用替换为 `requestsMatchers`。
- en: We need to switch the call order in the previous two calls.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要切换前两个调用中的调用顺序。
- en: Remove the `and` call and just chain `authorizeHttpRequests` with the `httpBasic`
    call.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除 `and` 调用，只需将 `authorizeHttpRequests` 与 `httpBasic` 调用链式即可。
- en: '[PRE16]'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Jakarta EE was formerly `javax` to `jakarta`, allowing Jakarta EE to evolve
    independently from Oracle, as it keeps some Java trademarks. These changes only
    imply namespace changes, and there are no behavior changes. For that reason, the
    application works just by replacing the namespaces.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Jakarta EE 以前是 `javax`，现在是 `jakarta`，这使得 Jakarta EE 能够独立于 Oracle 发展，因为它保留了某些
    Java 商标。这些更改仅意味着命名空间的变化，没有行为变化。因此，只需替换命名空间，应用程序就可以正常工作。
- en: In this recipe, we moved from Spring Boot 2.7.18 directly to Spring Boot 3.2.4\.
    If we first moved to intermediate versions, we would see the Spring Security-related
    errors as deprecation warnings. As we know the mechanism for gradual deprecation
    and upgrades, I decided to skip the intermediate versions for brevity. I recommend
    that you perform gradual migrations in your projects. The deprecation warning
    messages can guide most of the changes. However, there’s a change that’s not very
    evident. In Spring Boot 6, the `permitAll` method is deprecated for `requestMatcher`
    and should be replaced by `anyRequest`, and this method should be called at the
    end of the chain; if you chain more matchers after, an exception is thrown during
    runtime.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们直接从 Spring Boot 2.7.18 迁移到 Spring Boot 3.2.4。如果我们首先迁移到中间版本，我们会看到与 Spring
    Security 相关的错误作为弃用警告。鉴于我们了解逐步弃用和升级的机制，我决定为了简洁性跳过中间版本。我建议您在项目中逐步迁移。弃用警告消息可以指导大多数更改。然而，有一个变化不是很明显。在
    Spring Boot 6 中，`permitAll` 方法对于 `requestMatcher` 已被弃用，应替换为 `anyRequest`，并且该方法应在链的末尾调用；如果您在之后链式调用更多匹配器，则在运行时将抛出异常。
- en: Upgrading Spring Data
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级 Spring Data
- en: Spring Boot 3 uses Hibernate 6.1 by default, while Spring Boot 2 uses Hibernate
    5\. Therefore, we need to prepare the application to match Hibernate 6.1.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3 默认使用 Hibernate 6.1，而 Spring Boot 2 使用 Hibernate 5。因此，我们需要准备应用程序以匹配
    Hibernate 6.1。
- en: Hibernate uses Jakarta EE, and that requires upgrading the `javax.*` namespaces
    to `jakarta.*`, but we already did this step in the *First step to Spring* *3.0*
    recipe.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate 使用 Jakarta EE，这需要将 `javax.*` 命名空间升级到 `jakarta.*`，但我们已经在 *Spring 3.0
    的第一步* 食谱中完成了这一步。
- en: Some changes in Hibernate 6.1 are internal, but some APIs changed and should
    be upgraded in the application.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate 6.1 中的一些更改是内部的，但一些 API 发生了变化，应在应用程序中进行升级。
- en: Some changes related to the configuration of Spring Data are specific to Cassandra.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Spring Data 配置相关的某些更改是针对 Cassandra 的特定更改。
- en: In this recipe, we’ll make the necessary changes to align the sample application
    with Hibernate 6.1 and Cassandra.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将对示例应用程序进行必要的更改，以使其与 Hibernate 6.1 和 Cassandra 保持一致。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll use the outcome of the *First step to Spring 3.0* recipe as the starting
    point for this recipe. You can use the version I created if you haven’t completed
    it yet. You can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-5/start` folder.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *Spring 3.0 的第一步* 食谱的结果作为本食谱的起点。如果您尚未完成，可以使用我创建的版本。您可以在书籍的 GitHub 仓库中找到它，位于
    [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    的 `chapter9/recipe9-5/start` 文件夹中。
- en: As explained in the previous recipes, the sample application uses a PostgreSQL
    server database and Cassandra, and the tests use Testcontainers. For that reason,
    you need Docker running on your computer.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文所述，示例应用程序使用 PostgreSQL 服务器数据库和 Cassandra，测试使用 Testcontainers。因此，您需要在您的计算机上运行
    Docker。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let’s make the necessary Spring Data adjustments in our application:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用程序中进行必要的 Spring Data 调整：
- en: 'We’ll start by fixing the configuration of our application:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先修复应用程序的配置：
- en: 'We’ll replace `PostgreSQL82Dialect` with `PostgreSQLDialect`. To do that, we’ll
    open the `application.yml` file, locate the `spring.jpa.database-platform` property,
    and then set the following value:'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将用`PostgreSQLDialect`替换`PostgreSQL82Dialect`。为此，我们将打开`application.yml`文件，定位`spring.jpa.database-platform`属性，然后设置以下值：
- en: '[PRE17]'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'spring:'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'spring:'
- en: 'cassandra:'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'cassandra:'
- en: 'keyspace-name: footballKeyspace'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'keyspace-name: footballKeyspace'
- en: 'schema-action: CREATE_IF_NOT_EXISTS'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'schema-action: CREATE_IF_NOT_EXISTS'
- en: 'contact-points: localhost'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'contact-points: localhost'
- en: 'local-datacenter: datacenter1'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'local-datacenter: datacenter1'
- en: 'session-name: cassandraSession'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'session-name: cassandraSession'
- en: 'port: 9042'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'port: 9042'
- en: '[PRE18]'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that `cassandra` is now under `spring`. Previously, `cassandra` was under
    `spring.data`.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，现在`cassandra`位于`spring`下。之前，`cassandra`位于`spring.data`下。
- en: 'The tests based on Testcontainers create a Cassandra container and then set
    the settings of the application context. The tests should be aligned with the
    new settings structure with `spring.cassandra` instead of `spring.data.cassandra`.
    You can apply this change by using the string replace features in your editor.
    For instance, you can use the **Search: Replace in files** feature in Visual Studio
    Code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于Testcontainers的测试创建了一个Cassandra容器，然后设置了应用程序上下文的设置。这些测试应该与新设置结构中的`spring.cassandra`而不是`spring.data.cassandra`保持一致。你可以通过在你的编辑器中使用字符串替换功能来应用这个更改。例如，你可以在Visual
    Studio Code中使用**搜索：替换文件**功能：
- en: "![Figure 9.4 \uFEFF: Replacing spring.data.cassandra references in Visual Studio\
    \ Code](img/B21646_09_4.jpg)"
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4：在Visual Studio Code中替换spring.data.cassandra引用](img/B21646_09_4.jpg)'
- en: 'Figure 9.4 : Replacing spring.data.cassandra references in Visual Studio Code'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：在Visual Studio Code中替换spring.data.cassandra引用
- en: 'Next, we’ll use the new capability in Hibernate 6 to define JSON fields for
    our entities. To do that, open the `MatchEventEntity` class and modify the annotation
    of the `details` field as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用Hibernate 6的新功能来定义我们实体的JSON字段。为此，打开`MatchEventEntity`类并修改`details`字段的注解如下：
- en: '[PRE19]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We replaced the *hypersistence utils* type to define the JSON field.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将*hypersistence utils*类型替换为定义JSON字段。
- en: 'As we no longer need the particular type to define the JSON field, you can
    remove the following dependency from the `pom.xml` file:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不再需要特定的类型来定义JSON字段，你可以从`pom.xml`文件中删除以下依赖项：
- en: '[PRE20]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At this point, we want to leverage the project’s tests. However, there are some
    compilation errors related to the `httptrace` endpoint. We’ll now comment all
    the code in the `FootballConfig` class to avoid the compilation errors, and we’ll
    tackle this component in the *Managing Actuator* *changes* recipe.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们希望利用项目的测试。然而，有一些与`httptrace`端点相关的编译错误。现在我们将注释掉`FootballConfig`类中的所有代码以避免编译错误，并且我们将在这个*管理Actuator更改*菜谱中处理这个组件。
- en: 'Next, we’ll run the tests to verify that the application still works. You can
    run the tests from the IDE or just run the following Maven command in your terminal:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将运行测试以验证应用程序仍然可以工作。你可以从IDE中运行测试，或者只需在你的终端中运行以下Maven命令：
- en: '[PRE21]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You will see that the tests related to the services succeed, but two tests,
    `findPlayerById` and `countPlayers`, fail. There are other tests related to the
    controllers that fail, but we’ll cover them in the *Managing web application changes*
    recipe. These tests fail due to some behavior changes in Hibernate 6\. Let’s fix
    them:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到与服务相关的测试都成功了，但有两个测试，`findPlayerById`和`countPlayers`失败了。还有其他与控制器相关的测试也失败了，但我们将它们包含在*管理Web应用程序更改*菜谱中。这些测试失败是由于Hibernate
    6中的一些行为变化。让我们修复它们：
- en: 'The `findPlayerById` method in the `DynamicQueriesService` class uses an ordinal
    parameter binding. The behavior of ordinal parameters was changed in Hibernate
    6\. To fix this issue, modify `findPlayerById` in the `DynamicQueriesService`
    class as follows:'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DynamicQueriesService`类中的`findPlayerById`方法使用序数参数绑定。Hibernate 6中序数参数的行为发生了变化。为了修复这个问题，按照以下方式修改`DynamicQueriesService`类中的`findPlayerById`：'
- en: '[PRE22]'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The change is subtle. In the query string, replace `?0` with `?1`; the parameter
    in the `setParameter` method is `1` instead of `0`.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个更改很微妙。在查询字符串中，将`?0`替换为`?1`；`setParameter`方法中的参数是`1`而不是`0`。
- en: 'The `countPlayers` test validates the method with the same name in the `DynamicQueriesService`
    class. To fix this test, do the following:'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`countPlayers`测试验证了`DynamicQueriesService`类中同名的方法。要修复这个测试，请执行以下操作：'
- en: 'First, change the `return` type of the `countPlayers` method in the `DynamicQueriesService`
    class from `BigInteger` to `Long`. It should look like this:'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将`DynamicQueriesService`类中`countPlayers`方法的`return`类型从`BigInteger`更改为`Long`。它应该看起来像这样：
- en: '[PRE23]'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, update the test to match the return type with `Long`:'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新测试以匹配`Long`类型的返回类型：
- en: '[PRE24]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can rerun the services-related tests, and now they should succeed.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以重新运行与服务相关的测试，现在它们应该会成功。
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Spring Data relies on Hibernate for most of its functionalities. In Spring Boot
    3, it uses Hibernate 6.1 by default. For that reason, most of the tasks related
    to the Spring Data upgrade are related to the Hibernate upgrade.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data依赖于Hibernate来实现其大部分功能。在Spring Boot 3中，它默认使用Hibernate 6.1。因此，大多数与Spring
    Data升级相关的任务都与Hibernate升级相关。
- en: One of the changes related to the Hibernate upgrade is the change in the references
    from `javax.*` to `jakarta.*`. We haven’t explained that in this recipe, as it
    was already covered in the *First step to Spring 3.0* recipe; you should keep
    it in mind when upgrading to Spring Boot 3 or Hibernate 6.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 与Hibernate升级相关的一个变化是将引用从`javax.*`更改为`jakarta.*`。我们在这个菜谱中没有解释这一点，因为它已经在*Spring
    3.0的第一步*菜谱中讨论过了；在升级到Spring Boot 3或Hibernate 6时，你应该记住这一点。
- en: In Hibernate 6, the property `spring.jpa.database-platform` no longer uses specific
    version values. For that reason, `PostgreSQL82Dialect` was deprecated and should
    be replaced with the database dialect without the version. As we use PostgreSQL
    as a relational database, we replaced `PostgreSQL82Dialect` with `PostgreSQLDialect`.
    If you use another database engine such as MySQL, you should use `MySQLDialect`
    without a version-specific dialect.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hibernate 6中，属性`spring.jpa.database-platform`不再使用特定的版本值。因此，`PostgreSQL82Dialect`已被弃用，应该用不带版本号的数据库方言替换。由于我们使用PostgreSQL作为关系型数据库，我们将`PostgreSQL82Dialect`替换为`PostgreSQLDialect`。如果你使用其他数据库引擎，如MySQL，你应该使用不带版本特定方言的`MySQLDialect`。
- en: In Hibernate 6, the queries that return a `BIGINT` are now mapped to the `Long`
    type. In previous versions, they were incorrectly mapped to `BigInteger`. The
    result of the count clause is a `BIGINT`, so we need to change it in the `countPlayers`
    method. Even though the number of players in our application can be represented
    by an integer, if our tables were larger, it could cause a casting error in runtime.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hibernate 6中，返回`BIGINT`的查询现在映射到`Long`类型。在之前的版本中，它们被错误地映射到`BigInteger`。计数子句的结果是`BIGINT`，因此我们需要在`countPlayers`方法中更改它。尽管我们应用程序中的玩家数量可以用整数表示，但如果我们的表更大，它可能会在运行时引起类型转换错误。
- en: Hibernate 6 changed how it binds the ordinal parameters and now uses 1-based
    ordering instead of 0-based ordering.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate 6改变了绑定序数参数的方式，现在使用基于1的排序而不是基于0的排序。
- en: Hibernate 6 introduced the possibility of defining entity fields mapped as JSON
    parameters if the database supports it. Before Hibernate 6, it was necessary to
    use third-party libraries, such as Hypersistence. This excellent library developed
    by Vlad Mihalcea was handy in the previous versions for JSON field management,
    but it’s no longer necessary in Hibernate 6\. We can keep this dependency and
    upgrade it to the matching version for Hibernate 6\. You can find more information
    at [https://github.com/vladmihalcea/hypersistence-utils](https://github.com/vladmihalcea/hypersistence-utils).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate 6引入了在数据库支持的情况下将实体字段映射为JSON参数的可能性。在Hibernate 6之前，必须使用第三方库，例如Hypersistence。由Vlad
    Mihalcea开发的这个出色的库在之前的版本中对于JSON字段管理很有用，但在Hibernate 6中不再需要。我们可以保留这个依赖项并将其升级到与Hibernate
    6匹配的版本。更多信息可以在[https://github.com/vladmihalcea/hypersistence-utils](https://github.com/vladmihalcea/hypersistence-utils)找到。
- en: There are other changes related to Spring Data that are not related to Hibernate.
    For instance, the `spring.data` prefix for the properties is now reserved for
    Spring Data; for that reason, `spring.data.cassandra` has moved to `spring.cassandra`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 与Spring Data相关的其他变化与Hibernate无关。例如，`spring.data`属性前缀现在被保留用于Spring Data；因此，`spring.data.cassandra`已移动到`spring.cassandra`。
- en: In this recipe, we only covered the changes related to Spring Data for the features
    we used in this book. I recommend that you check the migration guide at [https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#data-access-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#data-access-changes).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只涵盖了与本书中使用的Spring Data相关的变化。我建议你查看[https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#data-access-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#data-access-changes)中的迁移指南。
- en: There’s more...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Spring Boot 3 introduced some capabilities that facilitate the usage of standard
    database technologies in our applications. Before Spring Boot 3, we could use
    alternative solutions, and it’s unnecessary to migrate them; however, it is worth
    knowing they exist. In this section, we’ll demonstrate two of them: stored procedures
    and union clauses in JQL.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3引入了一些功能，这些功能有助于我们在应用程序中使用标准数据库技术。在Spring Boot 3之前，我们可以使用替代解决方案，并且没有必要迁移它们；然而，了解它们的存在是值得的。在本节中，我们将演示其中两个：存储过程和JQL中的联合子句。
- en: 'You can use the `@Procedure` annotation instead of the `@Query` annotation.
    The `@Query` annotation must be native and use the `call` clause. For instance,
    you can modify the `getTotalPlayersWithMoreThanNMatches` method of the `PlayerRepository`
    interface as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`@Procedure`注解代替`@Query`注解。`@Query`注解必须是原生的，并使用`call`子句。例如，你可以按照以下方式修改`PlayerRepository`接口中的`getTotalPlayersWithMoreThanNMatches`方法：
- en: '[PRE25]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Hibernate 6 JQL now supports the `Union` clause. For instance, we can write
    `findPlayersByMatchId` in the `MatchRepository` interface as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate 6 JQL现在支持`Union`子句。例如，我们可以在`MatchRepository`接口中这样写`findPlayersByMatchId`：
- en: '[PRE26]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this recipe, we covered some scenarios on the Hibernate 5 to 6 migration,
    but there are many more. If you find issues related to Hibernate in the migration
    of your projects, please take a look at the Hibernate migration guides:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们涵盖了Hibernate 5到6迁移的一些场景，但还有很多。如果你在项目迁移过程中发现与Hibernate相关的问题，请查看Hibernate迁移指南：
- en: 'Hibernate 6.0 migration guide: [https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html](https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate 6.0迁移指南：[https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html](https://docs.jboss.org/hibernate/orm/6.0/migration-guide/migration-guide.html)
- en: 'Hibernate 6.1 migration guide: [https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html](https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate 6.1迁移指南：[https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html](https://docs.jboss.org/hibernate/orm/6.1/migration-guide/migration-guide.html)
- en: Managing Actuator changes
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理执行器更改
- en: Most of the Actuator changes are related to the default behavior of the exposed
    endpoints. For instance, the JMX endpoint behavior is aligned with the web endpoint
    behavior; for that reason, it only exposes the **Health** endpoint by default,
    while previously, all JMX endpoints were exposed by default. If your project relies
    on that functionality, you must expose it explicitly.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数执行器更改都与暴露端点的默认行为相关。例如，JMX端点行为与Web端点行为保持一致；因此，它默认只暴露**Health**端点，而之前所有JMX端点都默认暴露。如果你的项目依赖于该功能，你必须显式地暴露它。
- en: In addition to Actuator’s default behavior, our project uses the `httptrace`
    endpoint, which changes the behavior and the required implementation. In this
    recipe, we’ll fix the `httptrace` endpoint and make the necessary configuration
    changes to keep the same behavior we had for Actuator.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 除了执行器的默认行为外，我们的项目还使用`httptrace`端点，这改变了行为和所需的实现。在这个菜谱中，我们将修复`httptrace`端点，并做出必要的配置更改以保持与执行器相同的操作。
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start this recipe, you will need the outcome of the previous recipe, *Upgrading
    Spring Data*. In case you haven’t completed it yet, I prepared a version that
    you can find in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-6/start` folder.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个菜谱，你需要上一个菜谱的结果，即*升级Spring Data*。如果你还没有完成，我在书的GitHub仓库中准备了一个版本，你可以在`chapter9/recipe9-6/start`文件夹中找到它：[https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
- en: In addition to the requirements of our previous recipes, we’ll need a JMX client
    to explore the behavior of the Actuator’s JMX endpoints. We can use JConsole,
    which is part of the JDK.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前菜谱的要求外，我们还需要一个JMX客户端来探索执行器JMX端点的行为。我们可以使用JConsole，它是JDK的一部分。
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We’ll first fix the `httptrace` endpoint, and then we’ll align the actuator
    to behave as in Spring Boot 2:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将修复`httptrace`端点，然后我们将调整执行器以使其在Spring Boot 2中的行为一致：
- en: 'To fix the `httptrace` configuration, open the `application.yml` file and replace
    the following:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修复`httptrace`配置，打开`application.yml`文件，并替换以下内容：
- en: Replace the web endpoint `httptrace` with `httpexchanges`.
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Web端点`httptrace`替换为`httpexchanges`。
- en: Replace the `management.trace.http.enabled` with `management.httpexchanges.recording.enabled`.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`management.trace.http.enabled`替换为`management.httpexchanges.recording.enabled`。
- en: 'It should look like this:'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该看起来像这样：
- en: '[PRE27]'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, for the `FootballConfig` class, replace the `HttpTraceRepository` interface
    with `HttpExchangeRepository` and `InMemoryHttpTraceRepository` with `InMemoryHttpExchangeRepository`.
    Remember that we commented the contents of this class in the previous recipe to
    be able to compile the solution; now, we’ll tackle this component. The `FootballConfig`
    class should look as follows:'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，对于`FootballConfig`类，将`HttpTraceRepository`接口替换为`HttpExchangeRepository`，将`InMemoryHttpTraceRepository`替换为`InMemoryHttpExchangeRepository`。请记住，我们在上一个菜谱中注释了这个类的内容，以便能够编译解决方案；现在，我们将处理这个组件。`FootballConfig`类应该看起来如下：
- en: '[PRE28]'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can now run the application and validate the new `httpexchanges` repository.
    To validate it, open it in your browser or execute a curl command with the address
    `http://localhost:8080/actuator/httpexchanges`. It should return the latest requests
    to our application.
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们可以运行应用程序并验证新的`httpexchanges`存储库。要验证它，在您的浏览器中打开它或使用地址`http://localhost:8080/actuator/httpexchanges`执行curl命令。它应该返回对我们应用程序的最新请求。
- en: 'Next, we’ll validate whether the application exposes the same JMX endpoints
    as Spring Boot 2\. While the application is running, run the JConsole tool. For
    that, open your terminal and run `jconsole`. You will see that it shows a list
    of the Java applications running on your computer:'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们将验证应用程序是否暴露了与Spring Boot 2相同的JMX端点。当应用程序正在运行时，运行JConsole工具。为此，打开您的终端并运行`jconsole`。您会看到它显示了在您的计算机上运行的Java应用程序列表：
- en: '![Figure 9.5: JConsole process selection](img/B21646_09_5.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5：JConsole进程选择](img/B21646_09_5.jpg)'
- en: 'Figure 9.5: JConsole process selection'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：JConsole进程选择
- en: Select the application and click **Connect**. A message indicating that the
    secure connection failed may appear, suggesting that you connect insecurely. Use
    the insecure connection.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 选择应用程序并点击**连接**。可能会出现一个表示安全连接失败的消息，建议您使用非安全连接。使用非安全连接。
- en: 'If you open the `org.springframework.boot` namespace, only the **Health** endpoint
    appears:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开`org.springframework.boot`命名空间，只会出现**Health**端点：
- en: '![Figure 9.6: Default JMX endpoints exposed by Spring Boot 3](img/B21646_09_6.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6：Spring Boot 3默认暴露的JMX端点](img/B21646_09_6.jpg)'
- en: 'Figure 9.6: Default JMX endpoints exposed by Spring Boot 3'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：Spring Boot 3默认暴露的JMX端点
- en: 'Before Spring Boot 3, all endpoints were enabled by default. To achieve the
    same behavior, open the `application.yml` file and set `management.endpoints.jmx.exposure.include=*`
    property. It should look as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot 3之前，所有端点默认启用。为了达到相同的行为，打开`application.yml`文件并设置`management.endpoints.jmx.exposure.include=*`属性。它应该看起来如下：
- en: '[PRE29]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you restart the application and connect to the application with JConsole,
    you will see that it now exposes all MBean endpoints, as in previous versions
    of Spring Boot:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您重新启动应用程序并使用JConsole连接到应用程序，您会看到它现在暴露了所有MBean端点，就像Spring Boot的早期版本一样：
- en: '![Figure 9.7: All JMX endpoints exposed using Spring Boot 3](img/B21646_09_7.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7：使用Spring Boot 3暴露的所有JMX端点](img/B21646_09_7.jpg)'
- en: 'Figure 9.7: All JMX endpoints exposed using Spring Boot 3'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：使用Spring Boot 3暴露的所有JMX端点
- en: You can see the exposed endpoints in *Figure 9**.7*.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在*图9.7*中看到暴露的端点。
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Spring Boot team changed the name of `httptrace` to avoid confusion with
    `Micrometer Tracing`. For that reason, it has been renamed to `http exchanges`.
    That change also impacted the repository supporting the implementation of the
    traces. In this example, we used an in-memory repository, which we used only for
    demonstration purposes. In a production environment, you will probably use a persistent
    repository.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot团队将`httptrace`的名称更改为避免与`Micrometer Tracing`混淆。因此，它已被重命名为`http exchanges`。此更改还影响了支持实现跟踪的存储库。在这个例子中，我们使用了一个内存存储库，我们只将其用于演示目的。在生产环境中，您可能会使用持久存储库。
- en: In Spring Boot 3, the JMX endpoint only exposes the **Health** endpoint to align
    with its web counterpart. Only the **Health** endpoint is exposed in the web endpoint
    in Spring Boot 3 and previous versions. Some endpoints can reveal sensitive information
    or provide unwanted access. All endpoints except the **Health** endpoint are not
    enabled to reduce the surface attack. In this recipe, we exposed all JMX endpoints.
    However, it’s recommended that you only expose the ones that are really necessary.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring Boot 3 中，JMX 端点仅暴露 **Health** 端点以与其网络对应端点保持一致。在 Spring Boot 3 和之前的版本中，仅在网络端点暴露
    **Health** 端点。某些端点可能会泄露敏感信息或提供不希望访问。除了 **Health** 端点之外的所有端点都没有启用，以减少攻击面。在这个配方中，我们暴露了所有
    JMX 端点。然而，建议你只暴露真正必要的那些端点。
- en: See also
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In this recipe, we covered some scenarios related to Actuator. Still, I recommend
    reviewing the Spring Boot 3 migration guide and verifying whether you use an Actuator
    feature from previous versions of Spring Boot that requires attention in Spring
    Boot 3\. You can find the guide at [https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-changes).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们涵盖了与 Actuator 相关的一些场景。然而，我建议你回顾 Spring Boot 3 迁移指南，并验证你是否使用了 Spring
    Boot 早期版本中需要关注的 Actuator 功能。你可以在这个指南中找到：[https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#actuator-changes)。
- en: Managing web application changes
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理网络应用程序的更改
- en: 'Web applications, and hence RESTful applications, as we mostly worked with
    in this book, have a few behavior changes between Spring Boot 2 and 3\. Some of
    them may impact your application. Some changes are related to internal components,
    and you won’t be affected unless your application relies on those internal components.
    The changes between Spring Boot 2 and 3 are as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序，以及我们在这本书中主要使用的 RESTful 应用程序，在 Spring Boot 2 和 3 之间有一些行为上的变化。其中一些可能会影响你的应用程序。一些变化与内部组件相关，除非你的应用程序依赖于这些内部组件，否则你不会受到影响。Spring
    Boot 2 和 3 之间的变化如下：
- en: The `server.max-http-header-size` property is a setting that indicates the maximum
    size that the headers of the requests managed by the application may have. That
    property was managed differently depending on the embedded web server used. It
    has been deprecated in favor of `server.max-http-request-header-size,` and it’s
    managed consistently by all possible embedded web servers.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.max-http-header-size` 属性是一个设置，表示应用程序管理的请求头可能的最大大小。这个属性根据所使用的内嵌网络服务器而有所不同。它已经被
    `server.max-http-request-header-size` 取代，并且由所有可能的内嵌网络服务器一致管理。'
- en: The phases for graceful shutdown have changed. When an application is shut down,
    Spring Boot sends events in different phases, and the application can be subscribed
    to those events to perform custom shutdown actions.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优雅关闭的阶段已经改变。当一个应用程序关闭时，Spring Boot 会发送不同阶段的事件，应用程序可以订阅这些事件以执行自定义关闭操作。
- en: If you use a Jetty-embedded web server instead of the default Tomcat, you will
    need to set the Servlet API to 5.0\. Jetty does not yet support the Servlet API
    6.0 used by default in Spring Boot 3.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用 Jetty 内嵌网络服务器而不是默认的 Tomcat，你需要将 Servlet API 设置为 5.0。Jetty 目前还不支持 Spring
    Boot 3 默认使用的 Servlet API 6.0。
- en: The Spring Framework 6 used by Spring Boot 3 removed the support for Apache
    HttpClient. If you used Apache HttpClient in your application in previous versions
    of Spring Boot, you may notice behavior changes.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 3 使用的 Spring Framework 6 移除了对 Apache HttpClient 的支持。如果你在 Spring
    Boot 早期版本的应用程序中使用了 Apache HttpClient，你可能会注意到行为上的变化。
- en: As mentioned, you won’t notice these changes unless your application explicitly
    relies on some of these features. However, there is a behavior change that may
    impact your application. In versions before Spring Boot 3, the URLs ending with
    a `/` would match with controllers without that trailing slash. For instance,
    `GET /teams` and `GET /teams/` would match the same controller in our application.
    In Spring Boot 3 `GET` `/teams/` will fail unless we prepare the application for
    that.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，除非你的应用程序明确依赖于这些功能之一，否则你不会注意到这些变化。然而，有一个可能会影响你的应用程序的行为变化。在 Spring Boot 3
    之前的版本中，以 `/` 结尾的 URL 会与不带该尾随斜杠的控制器匹配。例如，`GET /teams` 和 `GET /teams/` 在我们的应用程序中会匹配相同的控制器。在
    Spring Boot 3 中，除非我们为它准备应用程序，否则 `GET /teams/` 将会失败。
- en: In this recipe, we’ll prepare our application to manage the trailing slash of
    the requests as in previous versions to ensure that the clients relying on our
    application are not impacted by the Spring Boot upgrade.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将准备我们的应用程序来管理请求的尾部斜杠，就像在之前的版本中一样，以确保依赖于我们的应用程序的客户端不会受到Spring Boot升级的影响。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll use the outcome of the *Managing Actuator changes* recipe for this recipe.
    I prepared a completed version in case you haven’t done so yet. You may find it
    in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/recipe9-7/start` folder.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *Managing Actuator changes* 菜谱的输出结果来制作这个菜谱。我准备了一个完成的版本，以防你还没有这样做。你可以在书的GitHub仓库中找到它：[https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    中的 `chapter9/recipe9-7/start` 文件夹。
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let’s ensure our application consumers don’t get disrupted by our upgrade to
    Spring Boot 3!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保我们的应用程序消费者不会因为我们的Spring Boot 3升级而受到干扰！
- en: 'Let’s add a custom web configuration. For that, create a file named `WebConfiguration`
    that implements the `WebMvcConfigurer` interface:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个自定义的Web配置。为此，创建一个名为 `WebConfiguration` 的文件，该文件实现了 `WebMvcConfigurer`
    接口：
- en: '[PRE30]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '@Override'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@Override'
- en: public void configurePathMatch(PathMatchConfigurer configurer) {
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public void configurePathMatch(PathMatchConfigurer configurer) {
- en: configurer.setUseTrailingSlashMatch(true);
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: configurer.setUseTrailingSlashMatch(true);
- en: '}'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE31]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, you can validate the application’s behavior by opening `http://localhost:8080/teams/`
    in your browser. You can check that it works with or without a trailing slash.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过在浏览器中打开 `http://localhost:8080/teams/` 来验证应用程序的行为。你可以检查它是否带或不带尾部斜杠都能正常工作。
- en: If you run the application tests, you will realize that all of them have now
    succeeded, as only the tests related to trailing slash in the controller were
    still failing.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行应用程序测试，你会意识到现在所有测试都成功了，因为只有与控制器中尾部斜杠相关的测试仍然失败。
- en: How it works...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Rather than relying on default behaviors that may change, the ending slash has
    been deprecated to enforce explicit matches for more stable and predictable applications
    as new versions appear.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是依赖于可能改变的自定义行为，尾部斜杠已被弃用，以强制显式匹配，以使应用程序在出现新版本时更加稳定和可预测。
- en: Spring Boot provides the mechanism to maintain the same behavior as previous
    versions. However, you probably realized that the `setUseTrailingSlashMatch` method
    is deprecated. This is to warn developers about this non-recommended behavior
    and enforce the move to explicit matches.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了机制来保持与之前版本相同的行怍。然而，你可能已经意识到 `setUseTrailingSlashMatch` 方法已被弃用。这是为了警告开发者关于这种不推荐的行为，并强制进行显式匹配的迁移。
- en: There’s more...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The same approach can be used with WebFlux. Instead of implementing `WebMvcConfigurer`,
    you would implement `WebFluxConfigurer`. It would look like this:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法也可以用于WebFlux。你不会实现 `WebMvcConfigurer`，而是实现 `WebFluxConfigurer`。它看起来像这样：
- en: '[PRE32]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: I recommend that you check the official guidelines for Spring Boot 3 migration
    at [https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#web-application-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#web-application-changes).
    As mentioned during the introduction of this recipe, if your application relies
    on some of the internal components impacted by the migration, you can find more
    details for fixing your issues.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你查看Spring Boot 3迁移的官方指南：[https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#web-application-changes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#web-application-changes)。正如在介绍这个菜谱时提到的，如果你的应用程序依赖于受迁移影响的某些内部组件，你可以找到更多关于修复你的问题的详细信息。
- en: Using OpenRewrite for migration automation
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenRewrite进行迁移自动化
- en: 'In this chapter, we made all migration upgrades manually. However, this approach
    can be too slow and error-prone in large code bases. Some tools try to automate
    this process, and the most popular one is OpenRewrite. OpenRewrite is a platform
    tool that aims to refactor any source code. According to its documentation, it
    aims to eliminate the technical debt of the developers’ repositories. It provides
    a mechanism to run recipes for source code refactoring. A popular open source
    recipe tackles the subject of this chapter: Spring Boot migrations.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们手动进行了所有迁移升级。然而，在大型的代码库中，这种方法可能太慢且容易出错。一些工具试图自动化这个过程，其中最受欢迎的是 OpenRewrite。OpenRewrite
    是一个平台工具，旨在重构任何源代码。根据其文档，它旨在消除开发者仓库的技术债务。它提供了一种运行源代码重构菜谱的机制。一个流行的开源菜谱解决了本章的主题：Spring
    Boot 迁移。
- en: Getting ready
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll use the original sample targeting Spring Boot 2.6.15 in this recipe. You
    can find it in the book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)
    in the `chapter9/football` folder.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用针对 Spring Boot 2.6.15 的原始示例。你可以在书的 GitHub 仓库的 `chapter9/football`
    文件夹中找到它：[https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook)。
- en: How to do it...
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We’ll do the same upgrade from Spring 2.6 to Spring 3.2.4, automating most of
    the process. Seven recipes in one!
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Spring 2.6 升级到 Spring 3.2.4，自动化大部分过程。七个菜谱合为一！
- en: 'Let’s start by adding the OpenRewrite plugin to our project. To do that, add
    the following snippet to the plugins section of the `pom.xml` file:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先向我们的项目中添加 OpenRewrite 插件。为此，将以下片段添加到 `pom.xml` 文件的插件部分：
- en: '[PRE33]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: When writing this book, the latest version of the OpenRewrite plugin is 5.7.0\.
    Use the latest one when you try it.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编写这本书时，OpenRewrite 插件的最新版本是 5.7.0。当你尝试时，请使用最新版本。
- en: We are using the OpenRewrite recipe to upgrade to Spring 2.7 because we’ll do
    the upgrade gradually. In further steps, we’ll upgrade to Spring Boot 3.0, then
    3.1, and finally 3.2.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 OpenRewrite 菜谱升级到 Spring 2.7，因为我们将会逐步进行升级。在接下来的步骤中，我们将升级到 Spring Boot 3.0，然后是
    3.1，最后是 3.2。
- en: 'Next, we’ll execute the OpenRewrite plugin. For that, open your terminal in
    the root folder of the project and execute the following Maven command:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将执行 OpenRewrite 插件。为此，打开项目根目录中的终端并执行以下 Maven 命令：
- en: '[PRE34]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You will see that it makes some changes:'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到它做出了一些更改：
- en: It upgrades the Spring Boot version to `2.7.18`.
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 Spring Boot 版本升级到 `2.7.18`。
- en: It adds a test dependency to `org.junit.jupiterter:junit-jupiter`.
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它向 `org.junit.jupiterter:junit-jupiter` 添加了一个测试依赖。
- en: It replaces the property `spring.datasource.initialization-mode` with `spring.sql.init.mode`
    in the `application.yml` file only. Take note of this change, as we’ll need in
    the next step.
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它仅在 `application.yml` 文件中将属性 `spring.datasource.initialization-mode` 替换为 `spring.sql.init.mode`。请注意这个更改，因为在下一步中我们需要用到它。
- en: It modifies the references to `org.junit` to `org.junit.jupiter` equivalents
    in the test classes.
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它修改了测试类中对 `org.junit` 的引用，将其替换为 `org.junit.jupiter` 的等效项。
- en: Let’s check if the upgrade to Spring Boot 2.7 works.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查升级到 Spring Boot 2.7 是否可行。
- en: 'If you run the tests, you will see that the tests that rely on Testcontainers
    don’t work. This is because OpenRewrite excluded some required dependencies for
    Testcontainers. To fix it, open `pom.xml` and remove the `exclusion` `junit` on
    the Testcontainers dependency:'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你运行测试，你会看到依赖于 Testcontainers 的测试无法通过。这是因为 OpenRewrite 排除了 Testcontainers 所需的一些依赖项。要修复它，打开
    `pom.xml` 并移除 Testcontainers 依赖项上的 `exclusion` `junit`：
- en: '[PRE35]'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this example, I just commented the `exclusions` section for clarity. In your
    code, you can remove it.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我只是为了清晰起见注释了 `exclusions` 部分。在你的代码中，你可以移除它。
- en: Once the exclusion is fixed, you will see that it cannot load the application
    context because it cannot resolve the `spring.datasource.initialization-mode`
    configuration. To fix it, open the `CustomDatasourceService` class and modify
    the `@Value` annotation used in the constructor. You should replace the `spring.datasource.initialization-mode`
    setting with the `spring.sql.init.mode` setting.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦排除问题得到解决，你就会发现它无法加载应用程序上下文，因为它无法解析 `spring.datasource.initialization-mode`
    配置。要修复它，打开 `CustomDatasourceService` 类并修改构造函数中使用的 `@Value` 注解。你应该将 `spring.datasource.initialization-mode`
    设置替换为 `spring.sql.init.mode` 设置。
- en: Rerun the tests and you will see that all of them succeed.
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新运行测试，你会看到所有测试都成功了。
- en: 'It’s time to start with Spring Boot 3.0\. To perform this upgrade, open the
    `pom.xml` file and modify `activeRecipes/recipe` to `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0`.
    The OpenRewrite plugin configuration should look like this:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候开始使用 Spring Boot 3.0 了。为了进行这次升级，打开 `pom.xml` 文件，并将 `activeRecipes/recipe`
    修改为 `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0`。OpenRewrite 插件配置应如下所示：
- en: '[PRE36]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, execute the plugin again. The changes performed by this upgrade are as
    follows:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，再次执行插件。这次升级所做的更改如下：
- en: It replaced all `javax` references with `jakarta`.
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将所有 `javax` 引用替换为 `jakarta`。
- en: It migrated the Spring Security changes. It properly migrated `UserDetailsManager`
    and `WebSecurityCustomizer`. However, as we’ll see in *step 7*, the `SecurityFilterChain`
    bean requires some adjustments.
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它迁移了 Spring Security 的更改。它正确地迁移了 `UserDetailsManager` 和 `WebSecurityCustomizer`。然而，正如我们在
    *步骤 7* 中将看到的，`SecurityFilterChain` bean 需要一些调整。
- en: 'It migrated the settings defined in the `application.yml` file:'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它迁移了 `application.yml` 文件中定义的设置：
- en: It replaced `management.trace.http.enabled` with `management.httpexchanges.recording.enabled`.
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 `management.trace.http.enabled` 替换为 `management.httpexchanges.recording.enabled`。
- en: It migrated the `spring.data.cassandra` settings to `spring.cassandra`.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 `spring.data.cassandra` 设置迁移到 `spring.cassandra`。
- en: 'In the Spring Boot 3.0 upgrade, the application doesn’t compile. Let’s fix
    the compilation errors:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spring Boot 3.0 升级中，应用程序无法编译。让我们修复编译错误：
- en: The `DataSourceInitializationMode` class has been removed in Spring Boot 3,
    but OpenRewrite has not migrated it. As we studied in the *Preparing the application*
    recipe, this change can be easily fixed by replacing `DataSourceInitializationMode`
    with `DatabaseInitializationMode`.
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataSourceInitializationMode` 类已在 Spring Boot 3 中被移除，但 OpenRewrite 没有迁移它。正如我们在
    *准备应用程序* 菜单中研究的那样，这个更改可以通过将 `DataSourceInitializationMode` 替换为 `DatabaseInitializationMode`
    来轻松修复。'
- en: Some Actuator changes were correctly applied, but others were not. The `application.yml`
    was correctly modified, replacing `management.trace.http.enabled` with `management.httpexchanges.recording.enabled`.
    However, `HttpTraceRepository` and `InMemoryHttpTraceRepository` were not migrated.
    You can replace them with `HttpExchangeRepository` and `InMemoryHttpExchangeRepository`.
    For more details, you can check out the *Managing Actuator* *changes* recipe.
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些 Actuator 的更改已正确应用，但其他更改没有。`application.yml` 已正确修改，将 `management.trace.http.enabled`
    替换为 `management.httpexchanges.recording.enabled`。然而，`HttpTraceRepository` 和 `InMemoryHttpTraceRepository`
    没有迁移。您可以将它们替换为 `HttpExchangeRepository` 和 `InMemoryHttpExchangeRepository`。有关更多详细信息，请参阅
    *管理 Actuator 变更* 菜单。
- en: In the `details` field in the `MatchEventEntity` class, replace the annotation
    `@Type(JsonType.class)` with `@JdbcTypeCode(SqlTypes.JSON)`.
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `MatchEventEntity` 类的 `details` 字段中，将注解 `@Type(JsonType.class)` 替换为 `@JdbcTypeCode(SqlTypes.JSON)`。
- en: 'Next, let’s fix the tests:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们修复测试：
- en: As explained in *step 3*, you should remove the `exclusion` `junit` from the
    Testcontainers dependency.
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如 *步骤 3* 中所述，您应从 Testcontainers 依赖中移除 `exclusion` `junit`。
- en: As we no longer use the Hypersistence library, we can remove it from our project.
    For more details, check the *Upgrading Spring* *Data* recipe.
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们不再使用 Hypersistence 库，我们可以将其从我们的项目中删除。有关更多详细信息，请参阅 *升级 Spring Data* 菜单。
- en: OpenRewrite properly migrated the `spring.data.cassandra.*` settings to `spring.cassandra.*`
    in the `application.yml` file. However, it didn’t modify the references in the
    tests. To fix it, just replace all references to `spring.data.cassandra` with
    `spring.cassandra`. See the *Upgrading Spring Data* recipe for more details.
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenRewrite 已正确地将 `application.yml` 文件中的 `spring.data.cassandra.*` 设置迁移到 `spring.cassandra.*`。然而，它没有修改测试中的引用。为了修复这个问题，只需将所有对
    `spring.data.cassandra` 的引用替换为 `spring.cassandra`。有关更多详细信息，请参阅 *升级 Spring Data*
    菜单。
- en: 'The MVC tests don’t work. To fix them, we need to include the `@Import(SecurityConfig.class)`
    annotation in the `FootballControllerTest` and `SecurityControllerTest` classes.
    As mentioned previously, the `SecurityFilterChain` bean is migrated but requires
    some adjustments. As explained in the *Upgrade the project to Spring Boot 3* recipe,
    we need to switch the order of some calls. The method should look like this:'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC 测试无法工作。为了修复它们，我们需要在 `FootballControllerTest` 和 `SecurityControllerTest`
    类中包含 `@Import(SecurityConfig.class)` 注解。如前所述，`SecurityFilterChain` bean 已迁移，但需要一些调整。如
    *升级项目到 Spring Boot 3* 菜单中所述，我们需要切换一些调用的顺序。方法应如下所示：
- en: '[PRE37]'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: OpenRewrite didn’t migrate `BigInteger` to `Long` and the parameter order binding
    we studied in the *Upgrading Spring Data* recipe. To fix it, apply both changes
    explained in the *Upgrading Spring* *Data* recipe.
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenRewrite没有将`BigInteger`迁移到`Long`，也没有迁移我们在*升级Spring Data*配方中研究的参数顺序绑定。要修复它，请应用*升级Spring*
    *Data*配方中解释的两种更改。
- en: The tests that check the trailing slash fail. If we want to keep the same behavior,
    we’ll need to add a `WebMvcConfigurer` as explained in the *Managing web application*
    *changes* recipe.
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查尾部斜杠的测试失败了。如果我们想保持相同的行为，我们需要添加一个`WebMvcConfigurer`，如*管理Web应用程序更改*配方中所述。
- en: After applying these fixes, both the tests and the application should work.
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用这些修复后，测试和应用程序都应正常工作。
- en: Next, let’s upgrade to Spring Boot 3.1\. For that, change the recipe in the
    `pom.xml` file to `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_1`.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们升级到Spring Boot 3.1。为此，将`pom.xml`文件中的配方更改为`org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_1`。
- en: 'When writing this book, I found an issue related to the Testcontainers version
    when running this recipe. The message is similar to this:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编写这本书时，我发现当运行此配方时与Testcontainers版本相关的问题。消息类似于以下内容：
- en: '[PRE38]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To avoid a runtime error, replace the `testcontainers.version` project variable
    in the `pom.xml` file with the real version in the Testcontainers dependencies.
    For instance, see this dependency:'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了避免运行时错误，将`pom.xml`文件中的`testcontainers.version`项目变量替换为Testcontainers依赖项中的实际版本。例如，请参阅以下依赖项：
- en: '[PRE39]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Replace it with the following:'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下内容替换：
- en: '[PRE40]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: After executing the OpenRewrite plugin, you will see that only a few changes
    were applied to the `pom.xml` file. You will need to remove the `exclusion` `junit`
    on the Testcontainers dependency again.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行OpenRewrite插件后，您将看到只有少量更改应用于`pom.xml`文件。您需要再次从Testcontainers依赖项中移除`exclusion`
    `junit`。
- en: In the Spring Boot 3.1 upgrade, there are no compilation errors. However, some
    tests fail. This can be fixed just by changing `spring.jpa.database-platform`
    to `org.hibernate.dialect.PostgreSQLDialect` as explained in the *Upgrading Spring
    Data* recipe. Rerun the test after applying this fix; all of them should succeed.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring Boot 3.1升级中，没有编译错误。然而，一些测试失败了。只需将`spring.jpa.database-platform`更改为`org.hibernate.dialect.PostgreSQLDialect`，如*升级Spring
    Data*配方中所述即可修复。应用此修复后重新运行测试；所有测试都应成功。
- en: Lastly, upgrade to Spring Boot 3.2\. For that, change the OpenRewrite recipe
    to `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_2`. Again, you will
    need to remove the `exclusion` `junit`, but this time, no other actions are required.
    If you run the tests, they should succeed, and the application will run smoothly.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，升级到Spring Boot 3.2。为此，将OpenRewrite配方更改为`org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_2`。同样，您需要再次移除`exclusion`
    `junit`，但这次不需要其他操作。如果您运行测试，它们应该成功，并且应用程序将平稳运行。
- en: How it works...
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: OpenRewrite loads a representation of your code known as a **Lossless Semantic
    Trees** (**LSTs**) and then applies modifications to that representation by using
    **visitors**. Once the visitors are applied, OpenRewrite transforms the LSTs to
    code again. An OpenRewrite recipe is a set of visitors. For instance, one visitor
    changes the javax references to jakarta references in the LST, another visitor
    changes the Spring Data configuration settings, and so on, transforming the LSTs
    to the final upgraded version. Finally, the transformed LSTs are converted into
    code.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: OpenRewrite加载了您的代码表示，称为**无损语义树**（**LSTs**），然后通过使用**访问者**对该表示进行修改。一旦应用了访问者，OpenRewrite将LSTs转换回代码。一个OpenRewrite配方是一组访问者。例如，一个访问者将LST中的javax引用更改为jakarta引用，另一个访问者更改Spring
    Data配置设置，等等，将LSTs转换为最终的升级版本。最后，转换后的LSTs被转换为代码。
- en: Usually, one OpenRewrite recipe definition does the migration of one Spring
    Boot version to the next one, e.g., from 2.6 to 2.7\. The OpenRewrite Maven plugin
    detects all the recipes that it should apply from the current application version
    to the desired target version, and then it applies the recipes in order to make
    the upgrade gradual. For more information, see the *There’s* *more* section.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个OpenRewrite配方定义会将一个Spring Boot版本迁移到下一个版本，例如从2.6迁移到2.7。OpenRewrite Maven插件会检测从当前应用程序版本到目标版本应应用的所有配方，然后按顺序应用这些配方以使升级逐步进行。有关更多信息，请参阅*更多*部分。
- en: As you might realize, in this recipe, many scenarios are not covered by the
    existing recipes. The OpenRewrite recipes are open source and maintained by the
    community. They handle the most common migration scenarios. For this chapter,
    I tried to prepare a sample with some scenarios that are not very rare but not
    very common, such as Hibernate scenarios using the `BigInteger` class. In any
    case, it’s important to understand what changes are made to each upgrade so that
    if an error appears, we can fix it manually.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所意识到，在这个食谱中，许多场景没有被现有的食谱覆盖。OpenRewrite 食谱是开源的，并由社区维护。它们处理最常见的迁移场景。对于本章，我尝试准备了一个包含一些不太常见但也不太罕见的场景的样本，例如使用
    `BigInteger` 类的 Hibernate 场景。无论如何，了解每个升级所做的更改是很重要的，这样如果出现错误，我们就可以手动修复它。
- en: Having a good set of tests is always helpful, as they may help detect behavior
    changes between versions. In this chapter, we used extensive tests, specifically
    Testcontainers. They helped detect incompatibilities when accessing PostgreSQL
    and Cassandra.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个好的测试集总是有帮助的，因为它们可能有助于检测版本之间的行为变化。在本章中，我们使用了广泛的测试，特别是 Testcontainers。它们在访问
    PostgreSQL 和 Cassandra 时帮助检测了不兼容性。
- en: There’s more...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this recipe, we made a gradual upgrade, but you can run the migration directly
    by applying the OpenRewrite `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_2`
    recipe. You must apply the same additional fixes performed during the gradual
    migration:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们进行了逐步升级，但你可以通过应用 OpenRewrite 的 `org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_2`
    食谱直接运行迁移。你必须应用在逐步迁移期间执行的相同附加修复：
- en: Before executing the `OpenRewrite` plugin, replace the Testcontainers version
    using a variable with a constant version.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行 `OpenRewrite` 插件之前，使用一个常量版本替换 Testcontainers 版本。
- en: Remove the `exclusion` `junit` in the Testcontainers dependency.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Testcontainers 依赖中移除 `exclusion` `junit`。
- en: Replace `DataSourceInitializationMode` with `DatabaseInitializationMode`.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `DataSourceInitializationMode` 替换为 `DatabaseInitializationMode`。
- en: Replace `HttpTraceRepository` and `InMemoryHttpTraceRepository` with `HttpExchangeRepository`
    and `InMemoryHttpExchangeRepository`.
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `HttpTraceRepository` 和 `InMemoryHttpTraceRepository` 替换为 `HttpExchangeRepository`
    和 `InMemoryHttpExchangeRepository`。
- en: Replace the annotation `@Type(JsonType.class)` with `@JdbcTypeCode(SqlTypes.JSON)`.
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将注解 `@Type(JsonType.class)` 替换为 `@JdbcTypeCode(SqlTypes.JSON)`。
- en: Replace all references to `spring.data.cassandra` with `spring.cassandra`.
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有对 `spring.data.cassandra` 的引用替换为 `spring.cassandra`。
- en: Add the `@Import(SecurityConfig.class)` annotation in the `FootballControllerTest`
    and `SecurityControllerTest` classes.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `FootballControllerTest` 和 `SecurityControllerTest` 类中添加 `@Import(SecurityConfig.class)`
    注解。
- en: Fix the `SecurityFilterChain` bean in the `SecurityConfig` class.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 `SecurityConfig` 类中的 `SecurityFilterChain` bean。
- en: Replace the `BigInteger` class with `Long` and the parameter order binding in
    the class in the `DynamicQueriesService` class.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `BigInteger` 类替换为 `Long` 并在 `DynamicQueriesService` 类中替换类的参数顺序绑定。
- en: Add a `WebMvcConfigurer` if you want to keep the trailing slash behavior.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要保留尾部斜杠行为，添加一个 `WebMvcConfigurer`。
- en: Replace `org.hibernate.dialect.PostgreSQL82Dialect` with `org.hibernate.dialect.PostgreSQLDialect`.
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `org.hibernate.dialect.PostgreSQL82Dialect` 替换为 `org.hibernate.dialect.PostgreSQLDialect`。
- en: See also
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: I recommend visiting the OpenRewrite website at [https://docs.openrewrite.org](https://docs.openrewrite.org).
    There are many recipes that can be used to maintain our code, not only for Spring
    Boot migrations.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐访问 OpenRewrite 网站 [https://docs.openrewrite.org](https://docs.openrewrite.org)。这里有许多可以用来维护我们代码的食谱，不仅限于
    Spring Boot 迁移。
- en: Other tools aim to automate the migration process as much as possible. For instance,
    the Spring team developed an experimental project named Spring Boot Migrator.
    You can find more information at [https://github.com/spring-projects-experimental/spring-boot-migrator](https://github.com/spring-projects-experimental/spring-boot-migrator).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 其他工具旨在尽可能自动化迁移过程。例如，Spring 团队开发了一个名为 Spring Boot Migrator 的实验性项目。更多信息请见 [https://github.com/spring-projects-experimental/spring-boot-migrator](https://github.com/spring-projects-experimental/spring-boot-migrator)。
