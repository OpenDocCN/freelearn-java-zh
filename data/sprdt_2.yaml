- en: Chapter 2. Getting Started with Spring Data JPA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。开始使用Spring Data JPA
- en: 'This chapter gives us the basic knowledge that we need to set up a web application
    project and manage our entities by using Spring Data JPA. In the course of this
    chapter, we will learn:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了设置Web应用程序项目并使用Spring Data JPA管理实体所需的基本知识。在本章的过程中，我们将学习：
- en: How to use **Maven** for downloading the required dependencies
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**Maven**下载所需的依赖项
- en: How to use **programmatic configuration** for configuring the Spring **application
    context**
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**编程配置**配置Spring **应用程序上下文**
- en: How to configure our web application to load the Spring application context
    by using programmatic configuration (without using `web.xml`)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置我们的Web应用程序以通过编程方式配置（而不使用`web.xml`）加载Spring应用程序上下文
- en: How to implement **CRUD** (**Create**, **Read**, **Update,** and **Delete**)
    functions for an entity class with Spring Data JPA
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Data JPA为实体类实现**CRUD**（**创建**、**读取**、**更新**和**删除**）功能
- en: Downloading dependencies with Maven
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven下载依赖项
- en: 'This book covers the 1.2.0.RELEASE version of Spring Data JPA, which is the
    newest available version during the authoring of this book. The other components
    required by Spring Data JPA are described in the following table:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了Spring Data JPA的1.2.0.RELEASE版本，这是在撰写本书时可用的最新版本。Spring Data JPA所需的其他组件在以下表中描述：
- en: '| Component | Description | Version |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 描述 | 版本 |'
- en: '| --- | --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Data source | BoneCP is a fast connection pool library that is used as a
    data source for our application. | 0.7.1.RELEASE |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 数据源 | BoneCP是一个快速连接池库，用作我们应用程序的数据源。| 0.7.1.RELEASE |'
- en: '| JPA provider | A JPA provider is a library that implements the Java Persistence
    API. We will use Hibernate as a JPA provider. | 4.1.4.Final |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| JPA提供程序 | JPA提供程序是实现Java持久化API的库。我们将使用Hibernate作为JPA提供程序。| 4.1.4.Final |'
- en: '| Spring Framework | Spring Framework is used to develop modern enterprise
    applications with Java. | 3.1.2.RELEASE |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| Spring框架 | Spring框架用于开发现代企业应用程序的Java。| 3.1.2.RELEASE |'
- en: '| Database | H2 is an embedded in-memory database that supports standard SQL
    and the JDBC API. | 1.3.166 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 数据库 | H2是一个支持标准SQL和JDBC API的内存中嵌入式数据库。| 1.3.166 |'
- en: We will use the newest available version of our application's other dependencies.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们应用程序的其他依赖项的最新可用版本。
- en: 'We can download the required dependencies with Maven by declaring them in the
    `POM` file. In order to do this, we have to add the following dependency declarations
    to the dependencies section of the `pom.xml` file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`POM`文件中声明它们来使用Maven下载所需的依赖项。为此，我们必须将以下依赖项声明添加到`pom.xml`文件的依赖项部分：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件接收文件。
- en: Configuring the Spring application context
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Spring应用程序上下文
- en: Traditionally, we would use declarative configuration with XML configuration
    files, but after Spring Framework 3.0 was released, it has been possible to configure
    the Spring application context by using programmatic configuration. This is our
    weapon of choice when we are configuring the application context of our application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，我们会使用XML配置文件进行声明式配置，但在Spring Framework 3.0发布后，可以使用编程配置来配置Spring应用程序上下文。这是我们在配置应用程序上下文时的首选方法。
- en: 'We can configure the Spring application context by following these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤配置Spring应用程序上下文：
- en: Create a properties file for the values of the configuration parameters.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为配置参数的值创建一个属性文件。
- en: Create the application context configuration class.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序上下文配置类。
- en: Creating the properties file
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建属性文件
- en: 'The actual values of the configuration parameters are stored in a properties
    file called `application.properties`. This file contains database connection details,
    Hibernate configuration, and the base package of our entities. The content of
    this file is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 配置参数的实际值存储在一个名为`application.properties`的属性文件中。该文件包含数据库连接详细信息、Hibernate配置以及我们实体的基本包。该文件的内容如下：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the application context configuration class
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用程序上下文配置类
- en: 'We can create the application context configuration class by following these
    steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤创建应用程序上下文配置类：
- en: Create an application context configuration skeleton that contains the general
    configuration of the application.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含应用程序的一般配置的应用程序上下文配置骨架。
- en: Configure the data source bean.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置数据源bean。
- en: Configure the entity manager factory bean.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置实体管理器工厂bean。
- en: Configure the transaction manager bean.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置事务管理器bean。
- en: Creating the application context configuration skeleton
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建应用程序上下文配置骨架
- en: 'The steps that are needed to create a skeleton configuration class of the Spring
    application context are described in the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Spring应用程序上下文配置类的骨架配置类所需的步骤如下：
- en: The `@Configuration` annotation identifies the class as an application context
    configuration class.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@Configuration`注解将该类标识为应用程序上下文配置类。'
- en: The component scanning directives are configured with the `@ComponentScan` annotation.
    In our example, the Spring IoC container is configured to scan the packages containing
    our controller and service classes.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件扫描指令使用`@ComponentScan`注解进行配置。在我们的示例中，Spring IoC容器配置为扫描包含我们控制器和服务类的包。
- en: The `@EnableJpaRepositories` annotation is used to enable Spring Data JPA and
    configure the base package of our repositories.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@EnableJpaRepositories`注解用于启用Spring Data JPA并配置我们的存储库的基本包。'
- en: The `@EnableTransactionManagement` annotation enables the annotation-driven
    transaction management of Spring Framework.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@EnableTransactionManagement`注解启用了Spring Framework的基于注解的事务管理。'
- en: The `@EnableWebMcv` annotation imports the default configuration of Spring MVC.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@EnableWebMcv`注解导入了Spring MVC的默认配置。'
- en: The properties file containing the values of the configuration parameters is
    imported by using the `@PropertySource` annotation. We can access the property
    values stored in this file by using the implementation of the `Environment` interface
    that is injected by the Spring IoC container.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含配置参数值的属性文件是通过使用`@PropertySource`注解导入的。我们可以通过使用Spring IoC容器注入的`Environment`接口的实现来访问存储在此文件中的属性值。
- en: 'The source code of our application context configuration skeleton is given
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序上下文配置骨架的源代码如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also configure Spring Data JPA by using XML. We can do this by adding
    the `repositories` namespace element of Spring Data JPA to our application context
    configuration file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用XML配置Spring Data JPA。我们可以通过向应用程序上下文配置文件添加Spring Data JPA的`repositories`命名空间元素来实现这一点。
- en: Configuring the data source bean
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置数据源bean
- en: 'We will start the configuration of the data source bean by adding a `dataSource()`
    method to the `ApplicationContext` class and annotating this method with the `@Bean`
    annotation. The implementation of this method is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过向`ApplicationContext`类添加一个名为`dataSource()`的方法并用`@Bean`注解对该方法进行注解来开始配置数据源bean。该方法的实现如下：
- en: Create an instance of the `BoneCPDataSource` class.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`BoneCPDataSource`类的实例。
- en: Set the database connection details.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置数据库连接详细信息。
- en: Return the created object.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回创建的对象。
- en: 'The configuration of the data source bean is given as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源bean的配置如下所示：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Configuring the entity manager factory bean
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置实体管理器工厂bean
- en: 'We can configure the entity manager factory bean by adding a method called
    `entityManagerFactory()` to the `ApplicationContext` class and annotating that
    method with the `@Bean` annotation. The implementation of this method is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`ApplicationContext`类添加一个名为`entityManagerFactory()`的方法并用`@Bean`注解对该方法进行注解来配置实体管理器工厂bean。该方法的实现如下：
- en: Create an instance of the `LocalContainerEntityManagerFactoryBean` class.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`LocalContainerEntityManagerFactoryBean`类的实例。
- en: Pass a reference of the used data source bean to the created object.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所使用的数据源bean的引用传递给创建的对象。
- en: Set the default configuration of Hibernate to the entity manager factory bean.
    We can do this by creating a new `HibernateJpaVendorAdapter` object and passing
    it to the entity manager factory bean.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Hibernate的默认配置设置为实体管理器工厂bean。我们可以通过创建一个新的`HibernateJpaVendorAdapter`对象并将其传递给实体管理器工厂bean来实现这一点。
- en: Set the base package of our entities.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置我们实体的基本包。
- en: Set the additional configuration that is fetched from our properties file.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置从我们的属性文件中获取的附加配置。
- en: Return the created object.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回创建的对象。
- en: 'The source code of the created method is given as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建方法的源代码如下所示：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring the transaction manager bean
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置事务管理器bean
- en: 'We can configure the transaction manager bean by adding a `transactionManager()`
    method to the `ApplicationContext` class and annotating this method with the `@Bean`
    annotation. The implementation of this method is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`ApplicationContext`类添加一个名为`transactionManager()`的方法并用`@Bean`注解对该方法进行注解来配置事务管理器bean。该方法的实现如下：
- en: Create a new `JpaTransactionManager` object.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`JpaTransactionManager`对象。
- en: Set a reference of the used entity manager factory.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置所使用的实体管理器工厂的引用。
- en: Return the created object.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回创建的对象。
- en: 'The source code of the transaction manager bean configuration is given as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 事务管理器bean配置的源代码如下所示：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Loading the application context configuration
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载应用程序上下文配置
- en: The old way to load the application context configuration of our application
    is to use the **web application deployment descriptor** file, which is more commonly
    known as `web.xml`. However, because we are using the Spring Framework 3.1 in
    a Servlet 3.0 environment, we can create a web application configuration class
    by implementing the `WebApplicationInitializer` interface. This ensures that Spring
    Framework automatically detects our configuration class when a servlet container
    is started.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 加载我们应用程序的应用程序上下文配置的旧方法是使用更常见的`web.xml`文件，也就是更常见的**web应用程序部署描述符**文件。然而，因为我们在Servlet
    3.0环境中使用Spring Framework 3.1，我们可以通过实现`WebApplicationInitializer`接口来创建一个Web应用程序配置类。这样可以确保Spring
    Framework在启动Servlet容器时自动检测到我们的配置类。
- en: 'We will use our web application configuration class to:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Web应用程序配置类来：
- en: Load our application context configuration class.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载我们的应用程序上下文配置类。
- en: Configure the **dispatcher servlet**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置**调度程序servlet**。
- en: Create the **context loader listener** and add it to our **servlet context**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建**上下文加载程序监听器**并将其添加到我们的**servlet上下文**中。
- en: 'The source code of our configuration class is given as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配置类的源代码如下所示：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Implementing CRUD functionality for an entity
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为实体实现CRUD功能
- en: 'We have now configured the Spring application context and configured our web
    application to load it during startup. We will now implement CRUD functions for
    a simple entity. Our example application is used to view and manage contact information,
    and we can implement it by following these steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经配置了Spring应用程序上下文并配置了我们的Web应用程序在启动时加载它。我们现在将为一个简单的实体实现CRUD功能。我们的示例应用程序用于查看和管理联系信息，我们可以通过以下步骤来实现它：
- en: Create a domain model.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建领域模型。
- en: Create a repository for an entity.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为实体创建一个存储库。
- en: Implement CRUD functions.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现CRUD功能。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter describes only such parts of our application that are required
    to understand how Spring Data JPA works.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅描述了我们应用程序中理解Spring Data JPA工作所需的部分。
- en: Domain model
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 领域模型
- en: 'The domain model of our application consists of two classes: `Contact` and
    `Address`. This subsection will address the following matters:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序的领域模型由两个类组成：`Contact`和`Address`。本小节将涉及以下事项：
- en: The information content of each class
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类的信息内容
- en: 'How we can create new objects by using the **builder pattern** (see also: *Effective
    Java* (*Second Edition*), *Joshua Bloch*, *Addison-Wesley*)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何使用**建造者模式**创建新对象（参见：*Effective Java*（*第二版*），*Joshua Bloch*，*Addison-Wesley*）
- en: How we can update the information of an object
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何更新对象的信息
- en: Contact
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 联系人
- en: 'The `Contact` class is the only entity of our domain model and it contains
    the information of a single contact. This information consists mostly of simple
    properties. The only exception to this rule is the `Address` class that is used
    to store address information. The relevant parts of the `Contact` class'' source
    code is given as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contact`类是我们领域模型中唯一的实体，它包含单个联系人的信息。这些信息主要由简单的属性组成。唯一的例外是`Address`类，用于存储地址信息。`Contact`类源代码的相关部分如下所示：'
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's move on and find out how we can create new contacts and update contact
    information.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续找出如何创建新联系人并更新联系人信息。
- en: Creating new contact objects
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建新的联系人对象
- en: 'We will use the builder pattern for creating new contacts. In order to do so,
    we have to follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用建造者模式来创建新的联系人。为了做到这一点，我们必须按照以下步骤进行：
- en: Implement a static inner class that is used to build new `Contact` objects.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个用于构建新`Contact`对象的静态内部类。
- en: Add a static `getBuilder()` method to the `Contact` class. This method is used
    to get a reference to the used builder.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Contact`类中添加一个静态的`getBuilder()`方法。此方法用于获取对所使用的构建器的引用。
- en: 'We will start by adding a static inner class to the `Contact` class by following
    these steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过以下步骤向`Contact`类添加一个静态内部类：
- en: Implement a constructor that takes the required properties as parameters. The
    required properties of a contact are first name and last name.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个以所需属性作为参数的构造函数。联系人的必需属性是名字和姓氏。
- en: Implement property methods for optional properties. These properties include
    e-mail address, phone number, and address information. Each property method returns
    a reference to the used builder object.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为可选属性实现属性方法。这些属性包括电子邮件地址、电话号码和地址信息。每个属性方法都返回对所使用的构建器对象的引用。
- en: Implement a `build()` method that returns the build object.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`build()`方法，返回构建的对象。
- en: 'The source code of the `Contact.Builder` class is given as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contact.Builder`类的源代码如下所示：'
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have to also add a static `getBuilder()` method to the `Contact` class.
    Our implementation is pretty straightforward. We create a new `Contact.Builder`
    object and return the created object. The source code of this method is given
    as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须在`Contact`类中添加一个静态的`getBuilder()`方法。我们的实现非常简单。我们创建一个新的`Contact.Builder`对象并返回创建的对象。此方法的源代码如下所示：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Updating contact information
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新联系人信息
- en: 'The `Contact` class has two methods that we can use to update contact information:
    the `update()` method that updates the contact information and the `updateAddress()`
    method that updates the address information of the contact. The source code of
    these methods is given as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contact`类有两个方法可用于更新联系人信息：`update()`方法用于更新联系人信息，`updateAddress()`方法用于更新联系人的地址信息。这些方法的源代码如下所示：'
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Address
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地址
- en: 'The `Address` class is an embedded class that is used to store address information.
    An **embedded class** is a class that can be persisted only with its parent class.
    Embedded classes are typically used to present the common concepts of the domain
    model and to emphasize its object-oriented nature. The source code of the `Address`
    class is given as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Address`类是一个嵌入类，用于存储地址信息。**嵌入类**是一个只能与其父类一起持久化的类。嵌入类通常用于呈现领域模型的常见概念，并强调其面向对象的特性。`Address`类的源代码如下所示：'
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, we will find out how we can create new `Address` objects and update the
    address information of existing objects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将找出如何创建新的`Address`对象并更新现有对象的地址信息。
- en: Creating new addresses
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建新的地址
- en: 'We will create new `Address` objects by using the builder pattern. We can implement
    the builder pattern by following these steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过建造者模式创建新的`Address`对象。我们可以通过以下步骤实现建造者模式：
- en: Implement a static inner class that is used to build new `Address` objects.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个用于构建新`Address`对象的静态内部类。
- en: Add a static `getBuilder()` method to the `Address` class. This method is used
    to get a reference to the used builder.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Address`类中添加一个静态的`getBuilder()`方法。此方法用于获取对所使用的构建器的引用。
- en: 'We can implement the static inner class by following these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以通过以下步骤实现静态内部类： '
- en: Implement a constructor that takes the required properties as parameters. The
    required properties of the `Address` class are `streetAddress`, `postCode`, and
    `postOffice`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Address`类实现一个以所需属性作为参数的构造函数。`Address`类的必需属性是`streetAddress`、`postCode`和`postOffice`。
- en: Implement property methods that are used to set optional address information.
    This information includes state and country. Each property method returns a reference
    to the used builder.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现用于设置可选地址信息的属性方法。这些信息包括州和国家。每个属性方法都返回对所使用的构建器的引用。
- en: Implement a `build()` method that returns the build object.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`build()`方法，返回构建的对象。
- en: 'The source code of the `Address.Builder` class is given as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Address.Builder`类的源代码如下所示：'
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We must also implement a method that is used to get a reference to the used
    builder object. We can do this by simply creating a new `Address.Builder` object
    and returning the created object. The source code of the static `getBuilder()`
    method of the `Address` class is given as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须实现一个方法，用于获取对所使用的构建器对象的引用。我们可以通过简单地创建一个新的`Address.Builder`对象并返回创建的对象来实现这一点。`Address`类的静态`getBuilder()`方法的源代码如下所示：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Updating address information
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新地址信息
- en: 'We can update the information of an `Address` object by calling its `update()`
    method. The source code of this method is given as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用其`update()`方法来更新`Address`对象的信息。该方法的源代码如下：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating a custom repository
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个自定义存储库
- en: In order to truly understand the simplicity of Spring Data JPA, we must take
    a trip to a not so distant past and learn how concrete repositories were created
    before Spring Data JPA was released. This should give us a clear picture about
    the benefits of Spring Data JPA.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了真正理解Spring Data JPA的简单性，我们必须回顾一下不太久远的过去，了解在Spring Data JPA发布之前如何创建具体存储库。这应该让我们清楚地了解Spring
    Data JPA的好处。
- en: Creating a custom repository in the old school way
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以老式方式创建自定义存储库
- en: 'Traditionally, the creation of concrete repositories has been a process that
    includes six steps. They are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，创建具体存储库是一个包括六个步骤的过程。它们如下：
- en: Create a base class that provides property mappings for its subclasses. It is
    often used to provide ID, version, and timestamp mappings for our entities.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个为其子类提供属性映射的基类。通常用于为我们的实体提供ID、版本和时间戳映射。
- en: Create a generic repository interface that declares the methods shared by all
    repositories. Typically these methods provide CRUD operations for our entities.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个声明所有存储库共享方法的通用存储库接口。通常，这些方法为我们的实体提供CRUD操作。
- en: Create a generic repository.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个通用存储库。
- en: Create an entity class.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实体类。
- en: Create an entity specific repository interface.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个特定实体的存储库接口。
- en: Create an entity specific concrete repository.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个特定实体的具体存储库。
- en: 'First, we have to create an abstract base class that is extended by each entity
    class. We can create this class by following these steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个抽象基类，每个实体类都要扩展这个基类。我们可以通过以下步骤创建这个类：
- en: Create an abstract class that takes the type of the entity's ID as a type parameter.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个抽象类，将实体ID类型作为类型参数。
- en: Annotate the created class with `@MappedSuperclass` annotation. It is used to
    state that the mappings found from this class are applied to its subclasses.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`@MappedSuperclass`注解注释创建的类。它用于说明从这个类中找到的映射应用于它的子类。
- en: Create an abstract `getId()` method that returns the id of a concrete class.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个抽象的`getId()`方法，返回具体类的ID。
- en: 'The source code of the `BaseEntity` class is given as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseEntity`类的源代码如下：'
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Second, we have to create a generic repository interface that declares the
    methods shared by all concrete repositories. We can create this interface by following
    these steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们必须创建一个声明所有具体存储库共享方法的通用存储库接口。我们可以通过以下步骤创建这个接口：
- en: Add the type of the entity and the type of the entity's ID as type parameters.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加实体类型和实体ID类型作为类型参数。
- en: Declare the methods that are shared by all concrete repositories.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明所有具体存储库共享的方法。
- en: 'The source code of the `BaseRepository` interface is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseRepository`接口的源代码如下：'
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Third, we must create an abstract generic repository. We can do this by following
    these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们必须创建一个抽象的通用存储库。我们可以通过以下步骤实现这一点：
- en: Create an abstract class that takes the type of the concrete entity and the
    type of the entity's ID as a type parameter.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个抽象类，将具体实体的类型和实体ID类型作为类型参数。
- en: Get a reference to the used entity manager by using the `@PersistenceContext`
    annotation.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@PersistenceContext`注解获取对使用的实体管理器的引用。
- en: Implement the `BaseRepository` interface.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`BaseRepository`接口。
- en: Implement a constructor that fetches the type of the entity class from the type
    parameters.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个构造函数，从类型参数中获取实体类的类型。
- en: Provide a `getEntityManager()` method that returns a reference to the used entity
    manager. The subclasses of this class will use this method for obtaining the entity
    manager reference that is used to build database queries.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个`getEntityManager()`方法，返回一个用于引用的实体管理器。这个类的子类将使用这个方法来获取用于构建数据库查询的实体管理器引用。
- en: Provide a `getEntityClass()` method that returns the type of the entity. Subclasses
    use this method to build database queries by using the Criteria API.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个`getEntityClass()`方法，返回实体的类型。子类使用这个方法来通过使用Criteria API构建数据库查询。
- en: 'The source code of the `BaseRepositoryImpl` class is given as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseRepositoryImpl`类的源代码如下：'
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we must create an entity class. We can create this class by following
    these steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须创建一个实体类。我们可以通过以下步骤创建这个类：
- en: Extend the `BaseEntity` class and provide the type of the entity's ID as a type
    parameter.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`BaseEntity`类，并将实体ID类型作为类型参数。
- en: Implement the `getId()` method that returns the entity's ID.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`getId()`方法，返回实体的ID。
- en: 'The source code of the `Contact` class is given as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contact`类的源代码如下：'
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we must create an interface for our entity specific repository. We can
    do this by extending the `BaseRepository` interface and providing the type of
    our entity and the type of its ID as type parameters. The source code of the `ContactRepository`
    interface is given as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须为我们的实体特定存储库创建一个接口。我们可以通过扩展`BaseRepository`接口并提供实体类型和其ID类型作为类型参数来实现这一点。`ContactRepository`接口的源代码如下：
- en: '[PRE19]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we must create the entity specific concrete repository. We can create
    a concrete repository by following these steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须创建特定实体的具体存储库。我们可以通过以下步骤创建一个具体的存储库：
- en: Annotate the concrete repository class with `@Repository` annotation that identifies
    the created class as a repository class.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`@Repository`注解注释具体的存储库类，将创建的类标识为存储库类。
- en: Extend the `BaseRepositoryImpl` class and give the type of the entity and the
    type of the entity's ID as a type parameter.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`BaseRepositoryImpl`类，并将实体类型和实体ID类型作为类型参数。
- en: Implement the `ContactRepository` interface.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`ContactRepository`接口。
- en: 'The source code of the `ContactRepositoryImpl` class is as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContactRepositoryImpl`类的源代码如下：'
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Congratulations! We have now created a single concrete repository in the old
    fashioned way. The structure of our repository implementation is illustrated in
    the following figure:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在以传统方式创建了一个具体的存储库。我们的存储库实现结构如下图所示：
- en: '![Creating a custom repository in the old school way](img/9045_02_01.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![以传统方式创建自定义存储库](img/9045_02_01.jpg)'
- en: As we have noticed, implementing concrete repositories is a complicated process
    that takes a lot of time, which we could spend being actually productive. Luckily,
    this is not the only way to create repositories for our entities. Next we will
    learn a simpler and easier way to create custom repositories. Naturally, we are
    talking about Spring Data JPA.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们注意到的，实现具体存储库是一个复杂的过程，需要花费大量时间，而我们本可以用来实际生产。幸运的是，这不是为我们的实体创建存储库的唯一方法。接下来我们将学习一种更简单、更容易的创建自定义存储库的方法。当然，我们说的是Spring
    Data JPA。
- en: Creating a custom repository with Spring Data JPA
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Spring Data JPA创建自定义存储库
- en: Spring Data JPA is capable of creating concrete repository implementations automatically
    from special repository interfaces. This capability simplifies the creation process
    of custom repositories.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA能够从特殊的存储库接口自动创建具体的存储库实现。这种能力简化了自定义存储库的创建过程。
- en: 'We can create a JPA repository for an entity by creating an interface, which
    extends the `JpaRepository` interface. When we are extending the `JpaRepository`
    interface, we have to provide two type parameters: the type of the entity and
    the type of the entity''s object identifier.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个接口来为实体创建一个JPA存储库，该接口扩展了`JpaRepository`接口。当我们扩展`JpaRepository`接口时，我们必须提供两个类型参数：实体的类型和实体的对象标识符的类型。
- en: 'In our case, we need to create a repository for the `Contact` entity. The type
    of its object identifier is `Long`. Thus, the source code of the `ContactRepository`
    interface should look like the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要为`Contact`实体创建一个存储库。其对象标识符的类型是`Long`。因此，`ContactRepository`接口的源代码应该如下所示：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'That is all. We have now created a repository for the `Contact` entity. The
    structure of our repository implementation is illustrated in the following figure:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们现在已经为`Contact`实体创建了一个存储库。我们的存储库实现结构如下图所示：
- en: '![Creating a custom repository with Spring Data JPA](img/9045_02_02.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![使用Spring Data JPA创建自定义存储库](img/9045_02_02.jpg)'
- en: As we can see, the creation of a custom repository could not be any simpler
    than this. Spring Data JPA reduces the amount of code we need to write and maintain,
    and the time that is needed to write it. In other words, we can get the same functionality
    by writing simpler code in a shorter time. This perk is pretty hard to beat.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，创建自定义存储库的过程不可能比这更简单了。Spring Data JPA减少了我们需要编写和维护的代码量，以及编写所需的时间。换句话说，我们可以通过更简单的代码在更短的时间内获得相同的功能。这个优势相当难以超越。
- en: 'By extending the `JpaRepository` interface, we have now gained access to four
    methods that are needed for implementing the CRUD application. These methods are
    described in the following table:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展`JpaRepository`接口，我们现在已经获得了实现CRUD应用程序所需的四种方法。这些方法在下表中描述：
- en: '| Method | Description |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Void delete(Contact contact)` | Deletes a single contact from the database.
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `Void delete(Contact contact)` | 从数据库中删除单个联系人。 |'
- en: '| `Contact findOne(Long id)` | Returns a single contact or null if no contact
    is found. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `Contact findOne(Long id)` | 返回单个联系人，如果找不到联系人则返回null。 |'
- en: '| `List<Contact> findAll()` | Returns all contacts stored to the database.
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `List<Contact> findAll()` | 返回存储在数据库中的所有联系人。 |'
- en: '| `Contact save(Contact contact)` | Saves the given contact to the database
    and returns the saved contact. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `Contact save(Contact contact)` | 将给定的联系人保存到数据库并返回保存的联系人。 |'
- en: CRUD
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD
- en: We have now configured the Spring application context, implemented the domain
    model of our application, and created the repository for the `Contact` entity.
    We are finally ready to write the source code of the service class that provides
    CRUD functions for the `Contact` entity.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经配置了Spring应用程序上下文，实现了应用程序的领域模型，并为`Contact`实体创建了存储库。我们终于准备好为`Contact`实体提供CRUD功能的服务类的源代码。
- en: 'Let''s start by creating an interface for our service. Its role is to declare
    the methods used to handle contact information. Let''s call this interface `ContactService`.
    The source code of our interface is given as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为我们的服务创建一个接口开始。它的作用是声明用于处理联系信息的方法。让我们称这个接口为`ContactService`。我们的接口的源代码如下所示：
- en: '[PRE22]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `ContactService` interface mentions a class called `ContactDTO` . It is
    a **data transfer object** (**DTO**) used to pass information to our service implementation.
    This DTO is used as a form object in the web layer of our application and it contains
    only the information needed to add or update contact information. In other words,
    it has no logic in it. That is why its source code is not discussed here.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContactService`接口提到了一个名为`ContactDTO`的类。它是用于将信息传递给我们的服务实现的**数据传输对象**（**DTO**）。这个DTO在我们应用程序的Web层中用作表单对象，它只包含添加或更新联系信息所需的信息。换句话说，它里面没有逻辑。这就是为什么它的源代码在这里没有讨论。'
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The concept of data transfer objects is described at [http://martinfowler.com/eaaCatalog/dataTransferObject.html](http://martinfowler.com/eaaCatalog/dataTransferObject.html).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 数据传输对象的概念在[http://martinfowler.com/eaaCatalog/dataTransferObject.html](http://martinfowler.com/eaaCatalog/dataTransferObject.html)中有描述。
- en: 'Our next step is to create an implementation to the `ContactService` interface.
    Let''s start by creating a dummy implementation and add the actual logic later.
    The dummy service implementation is described as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建一个实现`ContactService`接口的实现。让我们首先创建一个虚拟实现，稍后再添加实际逻辑。虚拟服务实现描述如下：
- en: The `@Service` annotation is used to mark our implementation as a service class.
    By adding this annotation we ensure that the class will be automatically detected
    during classpath scanning.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@Service`注解用于标记我们的实现为服务类。通过添加这个注解，我们确保该类将在类路径扫描期间自动检测到。'
- en: We use the `@Resource` annotation to tell the Spring **IoC container** that
    it has to inject the created repository implementation to the service's `repository`
    field.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`@Resource`注解告诉Spring **IoC容器**必须将创建的存储库实现注入到服务的`repository`字段中。
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Each method of the service class is marked as transactional by using the `@Transactional`
    annotation. The `rollbackFor` configuration option ensures that the transaction
    is rolled back if any of the configured exceptions is thrown.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`@Transactional`注解，服务类的每个方法都被标记为事务性。`rollbackFor`配置选项确保如果抛出了任何配置的异常，则事务将被回滚。
- en: 'The source code of our dummy service class is given as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的虚拟服务类的源代码如下所示：
- en: '[PRE23]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next we will get our hands dirty and learn how we can create, read, update,
    and delete entities with Spring Data JPA.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将动手学习如何使用Spring Data JPA创建、读取、更新和删除实体。
- en: Create
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建
- en: 'We can create a new entity by following these steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤创建一个新的实体：
- en: Create a new `Contact` object by using the builder pattern.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用构建器模式创建一个新的`Contact`对象。
- en: Pass the created object to the `save()` method of our repository.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建的对象传递给我们存储库的`save()`方法。
- en: Return the created object.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回创建的对象。
- en: 'The source code of the `add()` method is given as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`add()`方法的源代码如下所示：'
- en: '[PRE24]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Read
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取
- en: 'Our application has to provide a list of all contacts and the information of
    a single contact to its user. The `ContactService` interface declares two methods,
    which are relevant to these use cases. These methods are: `findAll()` and `findById()`.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序必须向用户提供所有联系人的列表以及单个联系人的信息。`ContactService`接口声明了两个与这些用例相关的方法。这些方法是：`findAll()`和`findById()`。
- en: 'Our implementation of the `findAll()` method is fairly simple. We simply delegate
    the method call forward to the repository. The source code of the `findAll()`
    method is given as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`findAll()`方法的实现非常简单。我们只是将方法调用委托给存储库。`findAll()`方法的源代码如下所示：
- en: '[PRE25]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we have to create an implementation of the `findById()` method. Our implementation
    contains the following steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须创建`findById()`方法的实现。我们的实现包含以下步骤：
- en: Find the contact by calling our repository's `findOne()` method.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用我们存储库的`findOne()`方法来查找联系人。
- en: If no contact is found, throw a `NotFoundException`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找不到联系人，则抛出`NotFoundException`。
- en: Return the found contact.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回找到的联系人。
- en: 'The source code of the `findById()` method is given as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`findById()`方法的源代码如下所示：'
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Update
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新
- en: 'We can update the information of a contact by following these steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤更新联系人的信息：
- en: Use the service's `findById()` method for finding the updated contact. Thus,
    if no contact is found, a `NotFoundException` is thrown.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用服务的`findById()`方法查找更新后的联系人。因此，如果找不到联系人，则会抛出`NotFoundException`。
- en: Update the contact information.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新联系信息。
- en: Update the address information.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新地址信息。
- en: Return the updated contact.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回更新后的联系人。
- en: 'The source code of the `update()` method is given as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()`方法的源代码如下所示：'
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We don't have to explicitly call the `save()` method of a repository after we
    update the information of an entity if we are inside a read-write transaction.
    All changes made to a persistent entity are automatically updated to the database
    when the transaction is committed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在读写事务中，更新实体信息后不需要显式调用存储库的`save()`方法。当事务提交时，对持久实体所做的所有更改都会自动更新到数据库中。
- en: Delete
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除
- en: 'We can delete a contact by following these steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤删除联系人：
- en: Find the deleted contact by calling the `findById()` method that throws a `NotFoundException`
    if no contact is found.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`findById()`方法来查找已删除的联系人，如果找不到联系人，则抛出`NotFoundException`。
- en: Pass the contact to our repository's `delete()` as a parameter.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将联系人作为参数传递给我们存储库的`delete()`。
- en: Return the deleted contact.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回已删除的联系人。
- en: 'The source code of the `deleteById()` method is given as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteById()`方法的源代码如下所示：'
- en: '[PRE28]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have learned that:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学到了：
- en: Maven provides an easy way to set up a Spring Data JPA project
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven提供了一种简单的方法来设置Spring Data JPA项目
- en: We can configure the application context of our application by using programmatic
    configuration if we use Spring Framework 3.0 or newer versions
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用Spring Framework 3.0或更新版本，可以通过编程配置来配置应用程序的应用程序上下文
- en: If we use Spring Framework 3.1 in a Servlet 3.0 environment, we can configure
    our web application without `web.xml`
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们在Servlet 3.0环境中使用Spring Framework 3.1，可以在没有`web.xml`的情况下配置我们的Web应用程序
- en: Spring Data JPA simplifies the creation of custom repositories because it can
    automatically create concrete implementations of our repository interfaces
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA简化了自定义存储库的创建，因为它可以自动创建我们存储库接口的具体实现。
- en: Building a CRUD application is a good start but it does not help us create real-life
    applications. In the next chapter, we will address this issue and describe how
    we can create database queries with Spring Data JPA.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 构建CRUD应用程序是一个很好的开始，但它并不能帮助我们创建现实生活中的应用程序。在下一章中，我们将解决这个问题，并描述如何使用Spring Data
    JPA创建数据库查询。
