- en: Build Flights Performance Prediction Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建航班性能预测模型
- en: Flight delays and cancellations are travel annoyances. Will a Chicago-bound
    flight arrive late causing a traveler to miss their connecting flight to Denver?
    Another traveler at Chicago Airport just learned that their connecting flight
    to Philly was delayed, perhaps even canceled. If both travelers could predict
    the odds of their respective experiences actually occurring, travel would get
    so much better.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 航班延误和取消是旅行的烦恼。芝加哥飞往的航班是否会晚点，导致旅客错过前往丹佛的转机航班？另一位在芝加哥机场的旅客刚刚得知他们的转机航班被延误，甚至可能被取消。如果这两位旅客都能预测他们各自经历这种情况的概率，旅行将变得更加美好。
- en: That said, implementing a flight delay pipeline that can predict outcomes on
    the lines just described is the overarching learning objective of this chapter.
    The next section lists all the learning objectives in terms of topics covered
    in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，实现一个能够预测上述情况的航班延误流程是本章的主要学习目标。下一节将列出本章涵盖的所有学习目标。
- en: All learning objectives in this chapter depend on the following datasets compiled
    by the United States Department of Transportation. These are flight data, airline
    carrier data, and flight performance data, respectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有学习目标都依赖于美国交通部编制的以下数据集。这些分别是航班数据、航空公司数据和航班性能数据。
- en: 'Each topic covered in this chapter has specific learning objectives, broken
    down into two categories:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的每个主题都有具体的学习目标，分为两类：
- en: Background theory, starting with coverage of the years 2007 and 2008 flights,
    carrier, and flight performance datasets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景理论，从涵盖2007年和2008年航班、承运人和航班性能数据集开始
- en: A Spark-Scala implementation of a flight delay prediction model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个基于Spark-Scala的航班延误预测模型实现
- en: 'That said, the immediate learning objective is to gain an understanding of
    the flight on-time performance dataset for 2007 and 2008\. A good place to start
    is the *Flight dataset at a glance* section:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，当前的学习目标是理解2007年和2008年的航班准点率数据集。一个好的起点是“**航班数据概览**”部分：
- en: Understanding background theory relevant to understanding flight
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解与理解航班相关的背景理论
- en: Formulating the flights performance problem by applying the background theory
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用背景理论来制定航班性能问题
- en: We learn which dataset to pick from the US Department of Transportation website
    the dataset we pick belong to the years 2007 and 2008
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从美国交通部网站上学习如何选择数据集，我们选择的数据集属于2007年和2008年的数据
- en: We want to learn what we can from the data, by conducing data exploratory steps
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望通过数据探索步骤从数据中学习到什么
- en: Dividing data into test and training datasets
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据分为测试集和训练集
- en: Implementation of a model in Scala and Spark to predict flights performance
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Scala和Spark中实现模型以预测航班性能
- en: Overview of flight delay prediction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 航班延误预测概述
- en: In this chapter, we will implement a logistic regression-based machine learning
    model to predict flight delays. This model learns from flight data described in
    the next section, *Flight dataset at a glance*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现一个基于逻辑回归的机器学习模型来预测航班延误。该模型将从下一节“**航班数据概览**”中描述的航班数据中学习。
- en: A real-life situation goes like this—travel company T has a new prediction feature
    in their booking system that is designed to enhance a customer's travel experience.
    How so? For example, say traveler *X* wants to get on Southwest flight *SW1* from
    origin *A* (St Louis) to destination *C* (Denver) with a connection at city *B*
    (Chicago). If T's flight booking system could predict the odds of *X*'s flight
    arriving late at Chicago, and furthermore the odds of missing the connecting flight
    as well, *X* has information at their disposal that lets him or her decide the
    next course of action.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实情况是这样的——旅行社T在其预订系统中新增了一个预测功能，旨在提升客户的旅行体验。如何做到这一点呢？例如，假设旅客*X*想从起点*A*（圣路易斯）乘坐西南航空公司的*SW1*航班前往目的地*C*（丹佛），并在城市*B*（芝加哥）转机。如果T的航班预订系统能够预测*X*的航班在芝加哥晚点的概率，以及错过转机航班的风险，*X*将拥有信息来决定下一步的行动。
- en: With these opening point made, let's take a look at our flight dataset.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些开场白之后，让我们来看看我们的航班数据集。
- en: The flight dataset at a glance
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**航班数据概览**'
- en: 'Data analysis in this chapter relies on a flight dataset, a dataset consisting
    of the following individual datasets. Download these datasets from the `ModernScalaProjects`
    folder:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的数据分析依赖于一个飞行数据集，该数据集由以下单个数据集组成。从`ModernScalaProjects`文件夹下载这些数据集：
- en: '`Airports.csv`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Airports.csv`'
- en: '`AirlineCarriers.csv`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AirlineCarriers.csv`'
- en: '`Flights.csv`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flights.csv`'
- en: '`OnTime2007Short.xlsx`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTime2007Short.xlsx`'
- en: '`OnTime2008Short.xlsx`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTime2008Short.xlsx`'
- en: 'The following screenshot is an overall view of the airports and airline carrier''s
    datasets:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是机场和航空公司数据集的整体视图：
- en: '![](img/788e8fd3-2ab7-4026-89e1-ddd8cac17941.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/788e8fd3-2ab7-4026-89e1-ddd8cac17941.jpg)'
- en: The airport and airline dataset
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 机场和航空公司数据集
- en: 'The following table describes the structure of the on-time dataset (`OnTime2008Short.xlsx`).
    It lists all the 28 fields. The table consists of denormalized, semi-structured
    data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了准时数据集（`OnTime2008Short.xlsx`）的结构。它列出了所有28个字段。该表由非规范化、半结构化数据组成：
- en: '![](img/a6d43da8-0a38-4d61-9ce3-4dcb0c09b318.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6d43da8-0a38-4d61-9ce3-4dcb0c09b318.jpg)'
- en: The OnTime2008Short file dataset
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: The OnTime2008Short 文件数据集
- en: 'The description of the fields are into the following categories:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 字段描述分为以下类别：
- en: '**Causes of delay on account of the airline (carrier) (in minutes)**:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**航空公司（承运人）延误原因（以分钟计）**：'
- en: '`FlightCarrierDelay`: It denotes the delay caused by the carrier'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightCarrierDelay`: 表示由承运人引起的延误'
- en: '`FlightWeatherDelay`: It denotes the delay caused by weather'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightWeatherDelay`: 表示由天气引起的延误'
- en: '`FlightNASDelay`: It denotes the delay caused by the National Air System'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightNASDelay`: 表示由国家航空系统引起的延误'
- en: '`FlightSecurityDelay`: It denotes the delay on account of security checks or
    other security reasons'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightSecurityDelay`: 表示由于安全检查或其他安全原因引起的延误'
- en: '`FlightLateAircraftDelay`: It denotes that the aircraft arrives late for reasons
    other than the preceding causes described'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightLateAircraftDelay`: 表示由于前述原因以外的其他原因导致飞机晚点'
- en: '**Flight aircraft data**:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flight aircraft data**:'
- en: '`FlightUniqueCarrier`: A unique two-letter sequence in uppercase, or a one-number-one-letter sequence
    (for example, US, DL, 9E)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightUniqueCarrier`: 一个大写字母的唯一两个字母序列，或者一个数字一个字母的序列（例如，US，DL，9E）'
- en: The section represents a comprehensive overview of the project. To start with,
    we formulate at a high level the nature of the underlying problem we want to solve.
    The problem formulation step paves the way for implementation. First, let's formulate
    the flight delay prediction problem.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本节代表了一个项目的全面概述。首先，我们以高层次的形式概述了我们想要解决的问题的本质。问题表述步骤为实施铺平了道路。首先，让我们表述飞行延误预测问题。
- en: Problem formulation of flight delay prediction
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 飞行延误预测的问题表述
- en: A high-level description of the problem of flight delays is summed up in one
    statement—we want to implement a prediction mode that will make predictions on
    flight delays. In short, a traveler with an itinerary wants to know whether his/her
    flight or flights are running late.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 飞行延误问题的概述可以用一句话总结——我们希望实现一个预测模式，对飞行延误进行预测。简而言之，有行程的旅客想知道他的/她的航班是否晚点。
- en: Getting started
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: This section starts by laying out the implementation infrastructure for [Chapter
    4](9608dfbf-246b-4df2-83f6-9e4967b99b0a.xhtml), *Building a Spam Classification
    Pipeline*. The goal of this section will be to get started on developing one data
    pipeline to analyze the flight-on-time dataset. The first step is to set up prerequisites,
    before implementation. That is the goal of the next subsection.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先概述了[第4章](9608dfbf-246b-4df2-83f6-9e4967b99b0a.xhtml)，*构建垃圾邮件分类管道*的实施基础设施。本节的目标将是开始开发一个数据管道来分析飞行准时数据集。第一步是设置先决条件，然后再进行实施。这就是下一小节的目标。
- en: Setting up prerequisite software
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置先决条件软件
- en: 'The following prerequisites or prerequisite checks are recommended. A new prerequisite
    on this list is MongoDB:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下推荐或推荐的先决条件或先决条件检查。此列表中新增了一个先决条件：MongoDB：
- en: Increase Java memory
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加Java内存
- en: Review JDK version
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 JDK 版本
- en: Self-contained Scala application based on **Simple Build Tool** (**SBT**), where
    all dependencies are wired into the `build.sbt` file
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于**简单构建工具**（**SBT**）的独立Scala应用程序，其中所有依赖项都连接到`build.sbt`文件
- en: MongoDB
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB
- en: We start by detailing the steps to increase the memory available to the Spark
    application. Why would we want to do that? This and other points related to Java
    heap space memory are explored in the following topic.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先详细说明增加 Spark 应用程序可用内存的步骤。我们为什么要这样做？这一点以及与 Java 堆空间内存相关的其他点将在以下主题中探讨。
- en: Increasing Java memory
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加Java内存
- en: Flight on-time records, compiled over a period of time, say, month by month,
    become big or medium data. Processing such volumes of data on a local machine
    is not trivial. In most cases, a local machine with limited RAM simply won't cut
    it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 飞行准点记录，按时间顺序编译，比如，按月，变成大数据或中等数据。在本地机器上处理如此大量的数据并非易事。在大多数情况下，具有有限RAM的本地机器根本不够用。
- en: As challenging as this situation can be, we want to make the best use of our
    local machine. That brings us to why we want to increase Java memory. For example,
    trying to process a
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种情况可能具有挑战性，但我们希望充分利用我们的本地机器。这让我们想到了为什么要增加Java内存。例如，尝试处理一个
- en: typical one-time dataset file of 27 columns and 509,520 rows, is enough to cause
    Java
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的单次数据集文件，27列和509,520行，足以导致Java
- en: 'to run out of memory (see the following screenshot):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以至耗尽内存（见以下截图）：
- en: '![](img/80d225f7-60c9-4119-9b95-05de182cee0d.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80d225f7-60c9-4119-9b95-05de182cee0d.jpg)'
- en: GC overhead limit exceeded
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: GC开销限制超出
- en: Firstly, `java.lang.OutOfMemory` occurs when the Java VM on your machine tries
    to go over its threshold memory allocation, as set by the `-Xmx` parameter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`java.lang.OutOfMemory`发生时，您的Java虚拟机尝试超过由`-Xmx`参数设置的阈值内存分配。
- en: The `-Xmx` parameter has to do with memory management. It is used to set the
    maximum Java heap size. From Java 1.8 onwards, the JVM will allocate heap size
    proportional to the physical memory on the machine
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xmx`参数与内存管理有关。它用于设置最大Java堆大小。从Java 1.8开始，JVM将根据机器上的物理内存分配堆大小'
- en: 'To address this situation, here are a few different ways to increase Java memory:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，这里有一些不同的方法可以增加Java内存：
- en: 'Method 1: On the command line, we pass into SBT the following runtime parameters:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法1：在命令行中，我们将以下运行时参数传递给SBT：
- en: Maximum allowable heap size
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的最大堆大小
- en: Java thread stack size
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java线程堆栈大小
- en: Initial heap size
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始堆大小
- en: 'Method 2: Setting maximum Java heap size in the Java control panel.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法2：在Java控制面板中设置最大Java堆大小。
- en: 'Method 3: Globally setting these parameters in the environment variable, `JAVA_OPTS`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法3：在环境变量`JAVA_OPTS`中全局设置这些参数。
- en: 'To address the `GC Overhead Limit exceeded` problem illustrated in the preceding
    screenshot, we can quickly allocate more heap space right on the command line,
    like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决前面截图中所展示的`GC Overhead Limit exceeded`问题，我们可以在命令行上快速分配更多的堆空间，如下所示：
- en: '![](img/ed2792bb-ecf1-4803-ba03-2450ba0eca15.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed2792bb-ecf1-4803-ba03-2450ba0eca15.jpg)'
- en: Allocating heap space
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 分配堆空间
- en: Note the `-Xmx2G` setting. We set the `SBT_OPTS` environment variable with the
    value of `-Xmx2G`, the maximum allocated Java heap space memory. We set that and
    then run SBT.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`-Xmx2G`设置。我们使用`-Xmx2G`设置`SBT_OPTS`环境变量，这是最大分配的Java堆空间内存。我们设置它然后运行SBT。
- en: 'Before we move on to the next method, it might be useful to know the following
    JVM heap allocation statistics:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续到下一个方法之前，了解以下JVM堆分配统计信息可能是有用的：
- en: Total memory
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总内存
- en: Maximum memory
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大内存
- en: Free memory
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用内存
- en: 'This is useful. Heap memory utilization numbers are revealing. The following
    screenshot shows how to do this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有用。堆内存利用率数字是揭示性的。以下截图显示了如何做到这一点：
- en: '![](img/44620101-b200-4a99-9ac6-103abb14e30d.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44620101-b200-4a99-9ac6-103abb14e30d.jpg)'
- en: Heap memory
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 堆内存
- en: Next up, we will talk about method 2, where we go through the steps to set Java
    runtime parameters globally.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论方法2，其中我们将通过步骤设置Java运行时参数全局。
- en: The following steps apply to Windows machines.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤适用于Windows机器。
- en: 'Navigate to Start | Control Panel, and under Category, choose Small icons:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到开始 | 控制面板，然后在类别下选择小图标：
- en: '![](img/a137b5f1-f4fb-4f1d-b1c1-1c35aedf2b3d.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a137b5f1-f4fb-4f1d-b1c1-1c35aedf2b3d.jpg)'
- en: Control Panel
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 控制面板
- en: 'The ensuing panel allows you to make changes to your computer''s settings.
    The Java setting is one of those. Locate Java in the Control Panel:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的面板允许您更改计算机的设置。Java设置就是其中之一。在控制面板中找到Java：
- en: '![](img/4f83b333-f01f-48a6-a6a8-6643788465b3.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f83b333-f01f-48a6-a6a8-6643788465b3.jpg)'
- en: All Control Panel Items
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有控制面板项
- en: 'Clicking on Java, as in the preceding screenshot, will take you to the Java
    Control Panel:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Java，如图中所示，将带您进入Java控制面板：
- en: '![](img/09ee4547-315c-48d0-870b-0ad59cdb8eed.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09ee4547-315c-48d0-870b-0ad59cdb8eed.jpg)'
- en: Java Control Panel
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Java控制面板
- en: 'Select the Java tab results in the Java Runtime Environment Settings panel,
    where you may inspect the Runtime Parameters, such as the Java heap size:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Java选项卡将显示Java运行时环境设置面板，您可以检查运行时参数，例如Java堆大小：
- en: '![](img/71434e7d-31c0-463e-aabb-21668310285c.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71434e7d-31c0-463e-aabb-21668310285c.jpg)'
- en: Java Control Panel's User tab
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Java控制面板的用户选项卡
- en: Referring to the Java Control Panel representations, we want to set the maximum
    Java heap size in the Runtime Parameters box. `Xmx2048m` is the new value of the
    maximum heap space, where `m` stands for megabytes. It is easy to modify the value
    of the `-Xmx` parameter. Click on it, then change the value to `2048` and click
    OK.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 参考Java控制面板的表示，我们想在“运行时参数”框中设置最大Java堆大小。`Xmx2048m`是最大堆空间的新值，其中`m`代表兆字节。修改`-Xmx`参数的值很容易。点击它，然后将值更改为`2048`并点击“确定”。
- en: There is no space between `-Xmx` and `2048m` or `2 GB`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xmx`和`2048m`或`2 GB`之间没有空格。'
- en: 'That''s it. Exit the Control Panel:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。退出控制面板：
- en: '![](img/c2264256-f855-49a9-9aa9-933f3d8e6814.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c2264256-f855-49a9-9aa9-933f3d8e6814.jpg)'
- en: Java Control Panel Runtime Parameters
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Java控制面板运行时参数
- en: 'Speaking of Java memory management and the settings that are available to help
    us manage Java memory usage in our Spark application, here is a list of command
    line options available on running the `java -X` command line:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 说到Java内存管理和可用于帮助我们管理Spark应用程序中Java内存使用的设置，以下是在运行`java -X`命令行时可用的一系列命令行选项：
- en: '![](img/10a42cc6-32f3-4477-8d18-f9d24b89c9d7.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10a42cc6-32f3-4477-8d18-f9d24b89c9d7.jpg)'
- en: java -X command line
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: java -X 命令行
- en: The preceding screenshot illustrates a comprehensive list of command line options.
    These options let you tweak different Java environment settings related to memory
    usage of your JVM-based Spark application. We are interested in the Xmx setting.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图展示了命令行选项的完整列表。这些选项允许您调整与您的基于JVM的Spark应用程序内存使用相关的不同Java环境设置。我们感兴趣的是Xmx设置。
- en: We just described method 2, where we outlined how to set the Java runtime parameter,
    `-Xmx`, in the Java Control Panel.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚描述了方法2，其中概述了如何在Java控制面板中设置Java运行时参数`-Xmx`。
- en: 'That leaves us with method 3, where we describe how to set three runtime parameters
    globally. In reference to the preceding screenshot, these are:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这就留下了方法3，其中我们描述了如何全局设置三个运行时参数。根据前面的截图，这些是：
- en: '`-Xmx`: Sets (or allocates) the size in megabytes that the Java heap space
    is allowed to grow to. A typical default setting is `64m`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Xmx`：设置（或分配）Java堆空间允许增长到的大小（以兆字节为单位）。一个典型的默认设置是`64m`。'
- en: '`-Xms`: Sets the initial Java heap size. The default is 2 MB.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Xms`：设置初始Java堆大小。默认值是2 MB。'
- en: '`-Xss`: Sets the Java thread stack size.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Xss`：设置Java线程堆栈大小。'
- en: We will set these parameters in an environmental variable called `JAVA_OPTS`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在名为`JAVA_OPTS`的环境变量中设置这些参数。
- en: 'The following steps illustrate how to do just this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤说明了如何做到这一点：
- en: 'To start with, we right-click on This PC and select Properties:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们右键单击“此电脑”并选择“属性”：
- en: '![](img/5810c859-4525-4e59-86de-f7717d9479b8.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5810c859-4525-4e59-86de-f7717d9479b8.jpg)'
- en: Properties option tab
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选项卡
- en: 'Clicking on Properties takes us to the following screen:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“属性”将带我们到以下屏幕：
- en: '![](img/990e58e7-3925-4b97-a2cb-bfe84ed9ce96.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/990e58e7-3925-4b97-a2cb-bfe84ed9ce96.jpg)'
- en: System tab
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 系统选项卡
- en: 'Clicking on Advanced system settings takes us to the following screen:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“高级系统设置”将带我们到以下屏幕：
- en: '![](img/f61bc110-b8e4-4e70-860a-27a48517f73c.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f61bc110-b8e4-4e70-860a-27a48517f73c.jpg)'
- en: System Properties tab
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 系统属性选项卡
- en: 'Click on Environment Variables... next. In the ensuing screen, we will be able
    to set `JAVA_OPTS`. If `JAVA_OPTS` is not present, create a new one. Click on
    New and enter the appropriate values in the Variable name and Variable value boxes.
    Dismiss the box by clicking OK:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“环境变量...”按钮。在接下来的屏幕中，我们将能够设置`JAVA_OPTS`。如果`JAVA_OPTS`不存在，创建一个新的。点击“新建”，在变量名和变量值框中输入适当的值。通过点击“确定”来关闭对话框：
- en: '![](img/0e16ed0c-52c5-4dbc-898d-854149cdb9b1.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e16ed0c-52c5-4dbc-898d-854149cdb9b1.jpg)'
- en: New System Variable
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 新系统变量
- en: 'Your new `JAVA_OPTS` variable is now ready:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的新`JAVA_OPTS`变量现在已准备就绪：
- en: '![](img/4e479571-ecb3-48e1-a3f9-810d316f3c4f.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e479571-ecb3-48e1-a3f9-810d316f3c4f.jpg)'
- en: Environment Variables
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量
- en: In the environment setting we just made, set the `JAVA_OPTS` environment variable
    to the value `JAVA_OPTS = =Xmx2048M -Xms64M -Xss16M`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚设置的环境设置中，将`JAVA_OPTS`环境变量设置为`JAVA_OPTS = =Xmx2048M -Xms64M -Xss16M`。
- en: Refer back to the preceding screenshot for a quick refresher on what those settings
    are.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾前面的截图，快速了解这些设置。
- en: 'To take stock of all environment variables, launch the Windows PowerShell (there
    should be a PowerShell app on the desktop). The following is a complete listing
    of all the environment variables. Note the ones that are relevant:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面了解所有环境变量，请启动Windows PowerShell（桌面上应该有一个PowerShell应用程序）。以下是所有环境变量的完整列表。注意相关的变量：
- en: '![](img/e83668e4-5e6b-4b19-aed7-db322d4e7926.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e83668e4-5e6b-4b19-aed7-db322d4e7926.jpg)'
- en: Hadoop Environment settings
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Hadoop环境设置
- en: 'To recap, here is a list of considerations when selecting an appropriate Java
    (maximum Java heap size):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，以下是在选择合适的Java（最大Java堆大小）时需要考虑的事项：
- en: Setting maximum heap space, in bytes, and initial heap size, also in bytes.
    These are appropriate memory allocation pool values that help control the amount
    of memory usage for our JVM-based Spark application.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置最大堆空间（以字节为单位）和初始堆大小（也以字节为单位）。这些是适当的内存分配池值，有助于控制基于JVM的Spark应用程序的内存使用量。
- en: The `-Xmx` option changes the maximum heap space for the VM. Some example settings
    are `-Xmx2048`, `-Xmx81920k`, and  `-Xmx1024m`.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Xmx`选项更改了VM的最大堆空间。一些示例设置是`-Xmx2048`，`-Xmx81920k`和`-Xmx1024m`。'
- en: '`-Xmx10G` is the same as `-Xmx1024m` or `-Xmx1024g`.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xmx10G`等同于`-Xmx1024m`或`-Xmx1024g`。'
- en: 'The `-Xms` option allows us to set an initial heap size. The default value
    is 64 MB or 640 KB, for example, `Xms64m`. Consider the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xms`选项允许我们设置初始堆大小。例如，默认值是64 MB或640 KB，例如`Xms64m`。考虑以下：'
- en: To determine how much can be a higher heap size setting, we recommend increasing
    the Java heap space to no more than 50% of the total RAM available. For example,
    if your machine has 32 GB of available RAM, we recommend setting the maximum heap
    no higher than 16 GB.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了确定可以设置多高的堆大小，我们建议将Java堆空间设置为不超过可用总RAM的50%。例如，如果您的机器有32 GB的可用RAM，我们建议将最大堆空间设置不超过16
    GB。
- en: Setting the maximum heap space to a value above 16 GB in our example would cause
    problems with performance.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的示例中，将最大堆空间设置为超过16 GB的值会导致性能问题。
- en: Next, we will review your system JDK.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将审查您的系统JDK。
- en: Reviewing the JDK version
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查JDK版本
- en: If you have JDK 8, that is all you need to safely skip this section. If you
    want to install JDK 9, do not. Spark is incompatible with any JDK version greater
    than 8\. Also, please ensure that you did not install the JDK into a path that
    has spaces in it. This is a minor detail, but we want to make sure.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有JDK 8，那么您就可以安全地跳过这一部分。如果您想安装JDK 9，请不要安装。Spark与任何大于8的JDK版本都不兼容。此外，请确保您没有将JDK安装到包含空格的路径中。这是一个小细节，但我们想确保。
- en: In the next section, we get into the installation of MongoDB. We will talk about
    the why and the how.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论MongoDB的安装。我们将讨论为什么以及如何进行。
- en: MongoDB installation
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB安装
- en: What is MongoDB and why do we even need it? Firstly, MongoDB's document model
    makes it easy to map objects in application code to equivalent JSON representations
    in MongoDB. There is more to this. Spark has good integration with MongoDB. One
    clear advantage is being able to publish our on-time dataframe into MongoDB as
    a document. Fetching a dataframe document from MongoDB is good from a performance
    standpoint too.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是MongoDB，我们为什么需要它？首先，MongoDB的文档模型使得在应用程序代码中将对象映射到MongoDB中的等效JSON表示变得容易。这还有更多。Spark与MongoDB有良好的集成。一个明显的优势是能够将我们的实时dataframe作为文档发布到MongoDB。从MongoDB中检索dataframe文档在性能方面也很好。
- en: 'There are two prerequisites to installing MongoDB (on Windows):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 安装MongoDB（在Windows上）有两个先决条件：
- en: Only 64-bit machines are able to support MongoDB
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有64位机器能够支持MongoDB
- en: Be sure to get the latest Windows updates
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一定要获取最新的Windows更新
- en: To get started, download the latest stable version of the MongoDB Community
    Server from the MongoDB Download Center page on the [mongodb.com](https://www.mongodb.com/)
    website. That will be 4.0\. Depending on whichever operating system you have,
    download the appropriate version. The instructions here are for Windows 10, 64-bit
    users.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始安装，请从[mongodb.com](https://www.mongodb.com/)网站上的MongoDB下载中心页面下载MongoDB社区服务器的最新稳定版本。这将版本号为4.0。根据您所使用的操作系统，下载相应的版本。以下说明适用于Windows
    10，64位用户。
- en: The MongoDB product no longer supports 32-bit x86 operating system platforms.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB产品不再支持32位x86操作系统平台。
- en: 'In the next few steps, we will install MongoDB as a service:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，我们将安装MongoDB作为服务：
- en: 'Click on the MongoDB installer, an MSI file:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击MongoDB安装程序，一个MSI文件：
- en: '![](img/9db19f8d-88e0-42b3-aac8-5f6b010d74bd.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9db19f8d-88e0-42b3-aac8-5f6b010d74bd.jpg)'
- en: MSI file of MongoDB
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的MSI文件
- en: 'Click Install, as shown in the following screenshot:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，点击“安装”：
- en: '![](img/b847d3ed-63ee-4bee-b681-ae039692673d.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b847d3ed-63ee-4bee-b681-ae039692673d.jpg)'
- en: Install screen of MongoDB
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB安装屏幕
- en: 'Click Next and proceed with the complete setup type of installation:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，并继续使用完整的安装类型：
- en: '![](img/d3fd7825-33b7-4013-b8d4-4ffdc84b47ea.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3fd7825-33b7-4013-b8d4-4ffdc84b47ea.jpg)'
- en: The Next button of MongoDB
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的“下一步”按钮
- en: 'Click on Complete and proceed with the complete setup type of installation:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“完成”，并继续使用完整的安装类型：
- en: '![](img/a60e2eda-f2af-40c6-8d32-3c6fcf447d39.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a60e2eda-f2af-40c6-8d32-3c6fcf447d39.jpg)'
- en: The Complete option of MongoDB
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的完整选项
- en: 'As already stated, we will choose not to install MongoDB as a service. Therefore,
    uncheck the Install MongoDB as a Service option:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，我们将选择不将MongoDB作为服务安装。因此，请取消选中“将MongoDB作为服务安装”选项：
- en: '![](img/01655a8d-35da-4e57-b947-c6c6a44e7860.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01655a8d-35da-4e57-b947-c6c6a44e7860.jpg)'
- en: Service Configuration MongoDB
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB服务配置
- en: Note where you are installing MongoDB into. The server is installed at `C:\MongoDB\Server\4.0`.
    The data folder is at `C:\MongoDB\Server\4.0\data`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 注意您将MongoDB安装到的位置。服务器安装在`C:\MongoDB\Server\4.0`。数据文件夹位于`C:\MongoDB\Server\4.0\data`。
- en: 'Next, you will see the screen of the MongoDB Compass:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到MongoDB Compass的屏幕：
- en: '![](img/e997fbf2-b701-4632-bd3a-69e50af17951.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e997fbf2-b701-4632-bd3a-69e50af17951.jpg)'
- en: Install MongoDB Compass
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 安装MongoDB Compass
- en: In the next section, we will show you how and why we put MongoDB to work. With
    the prerequisites out of the way and the application building infrastructure in
    place, we proceed to the *Implementation and deployment* section.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向您展示我们如何以及为什么使用MongoDB。在完成先决条件并建立应用程序构建基础设施后，我们继续到*实施和部署*部分。
- en: Implementation and deployment
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施和部署
- en: 'Implementation depends on setting up the big data infrastructure. Please verify
    that your MongoDB installation is running properly. Now we shall list implementation
    objectives as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 实施取决于设置大数据基础设施。请验证您的MongoDB安装是否正常运行。现在我们将按以下方式列出实施目标：
- en: Splitting data into test, train and validation datasets
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据分割成测试、训练和验证数据集
- en: Data ingestion
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据摄取
- en: Data analysis
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分析
- en: Implementation objectives
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施目标
- en: The overall objective is to perform data analysis on an on-time flight dataset
    corresponding to the year 2007-2008\. Of the 2007 flight data, 80% will be used
    as the training dataset and the rest as a validation dataset. In so far as model
    performance evaluation is concerned, 100% of the 2008 flight data becomes the
    testing dataset.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 总体目标是分析2007-2008年对应的准时航班数据集。在2007年的航班数据中，80%将用作训练数据集，其余的作为验证数据集。就模型性能评估而言，2008年航班数据的100%将成为测试数据集。
- en: 'The following are the implementation objectives required to implement the flight
    prediction model:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现飞行预测模型所需实现的目标：
- en: Download the flight dataset.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载航班数据集。
- en: 'You may develop the pipeline in four ways:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过以下四种方式开发管道：
- en: Incrementally in your local Spark shell
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的本地Spark shell中逐步进行
- en: By firing up your Horton Sandbox on your host machine managed virtual machine,
    and developing code in a powerful Zeppelin Notebook environment
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在您的托管虚拟机上启动Horton Sandbox，并在强大的Zeppelin笔记本环境中编写代码
- en: Developing everything on the Azure Cloud
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure云上开发一切
- en: Developing the application as a self-contained SBT application and deploying
    it to your local Spark cluster using `spark-submit`
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序作为自包含的SBT应用程序开发，并使用`spark-submit`将其部署到您的本地Spark集群
- en: Flesh out your code in IntelliJ and wire up all the necessary dependencies in
    the `build.sbt` file.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IntelliJ中完善您的代码，并在`build.sbt`文件中连接所有必要的依赖项。
- en: Run the application and interpret the results.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序并解释结果。
- en: In the next subsection, we will document step-by-step instructions for implementing
    the project. In the succeeding step, we will create a new Scala project in IntelliJ
    and call it `Chapter6`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我们将逐步记录实施项目的说明。在接下来的步骤中，我们将在IntelliJ中创建一个新的Scala项目，并将其命名为`Chapter6`。
- en: Creating a new Scala project
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Scala项目
- en: 'Let''s create a Scala project called `Chapter6`, with the following artifacts:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`Chapter6`的Scala项目，具有以下工件：
- en: '`AirlineWrapper.scala`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AirlineWrapper.scala`'
- en: '`Aircraft.scala`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Aircraft.scala`'
- en: 'The following screenshot is representative of what our project looks like:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我们的项目外观：
- en: '![](img/6c73be01-6e7d-4cc0-8a80-b4087781895f.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c73be01-6e7d-4cc0-8a80-b4087781895f.jpg)'
- en: IntelliJ project structure
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ项目结构
- en: 'Let''s break down the project structure:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下项目结构：
- en: '`.idea`: These are the generated IntelliJ configuration files.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.idea`：这些是生成的 IntelliJ 配置文件。'
- en: '`project`: Contains a `build.properties` and `plugins.sbt`. For example, `plugins.sbt`
    may be used to specify the SBT assembly plugin.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project`：包含 `build.properties` 和 `plugins.sbt`。例如，`plugins.sbt` 可以用来指定 SBT
    assembly 插件。'
- en: '`src/main/scala`: A folder that houses Scala source files in the `com.packt.modern.chapter6`
    package.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/scala`：一个包含 `com.packt.modern.chapter6` 包中 Scala 源文件的文件夹。'
- en: '`src/main/resources`: Any data or configuration files; for example, a log4j
    configuration file called `log4j.xml`.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/resources`：任何数据或配置文件；例如，一个名为 `log4j.xml` 的 log4j 配置文件。'
- en: '`target`: This is where artifacts of the compile process are stored. Any generated
    assembly JAR files go there.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：这是编译过程产生的工件存储的地方。任何生成的汇编 JAR 文件都放在那里。'
- en: '`build.sbt`: This is the main SBT configuration file. Spark and its dependencies
    are specified here.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.sbt`：这是主要的 SBT 配置文件。在这里指定 Spark 及其依赖项。'
- en: At this point, we will start developing. We start with the `AirlineWrapper.scala`
    file and end with the deployment of the final application JAR into Spark with
    `spark-submit`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们将开始开发。我们从 `AirlineWrapper.scala` 文件开始，以将最终的应用程序 JAR 部署到 Spark 中的 `spark-submit`
    结束。
- en: Building the AirlineWrapper Scala trait
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 AirlineWrapper Scala 特质
- en: The `AirlineWrapper` contains code to create a `SparkSession` instance called
    `session`. It also declares case classes to represent our flights dataset.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`AirlineWrapper` 包含创建名为 `session` 的 `SparkSession` 实例的代码。它还声明了用于表示我们的航班数据集的案例类。'
- en: 'Let''s create the `trait` definition first:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建 `trait` 定义：
- en: '[PRE0]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The entry point to programming is as follows: The first thing we do in the
    `trait` is to declare a `lazy val` called `session`. This is where we lazily create
    an instance of `SparkSession`. Lazily implies that the `val` is only executed
    when it is encountered the first time around. The session is our entry point to
    programming Spark with the `DataSet` and `DataFrame` API is `SparkSession`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的入口点是以下内容：在 `trait` 中，我们首先声明一个名为 `session` 的 `lazy val`。这是我们在第一次遇到时懒加载 `SparkSession`
    实例的地方。懒加载意味着 `val` 只在第一次遇到时执行。会话是我们使用 `DataSet` 和 `DataFrame` API 编程 Spark 的入口点：
- en: '[PRE1]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the following code snippet, `CarrierCode` is an identification number assigned
    by US DoT to identify a unique airline (carrier):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`CarrierCode` 是美国运输部分配的唯一识别号码，用于识别一家航空公司（承运人）：
- en: '[PRE2]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following code, `originOfFlight` is the origin of the flight (IATA airport
    code) and `destOfFlight` is the destination of the flight (IATA airport code):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，`originOfFlight` 是航班的起点（IATA机场代码），而 `destOfFlight` 是航班的终点（IATA机场代码）：
- en: '[PRE3]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following code snippet, `iataAirportCode` is the international airport
    abbreviation code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，`iataAirportCode` 是国际机场缩写代码：
- en: '[PRE4]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Load and create a `File` object out of the airport''s dataset:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 加载并从机场的数据集中创建一个 `File` 对象：
- en: '[PRE5]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Load and create a `File` object out of the airline carrier dataset:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 加载并从航空公司承运人数据集中创建一个 `File` 对象：
- en: '[PRE6]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a `File` object out of the main FAA dataset:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 从主要的 FAA 数据集中创建一个 `File` 对象：
- en: '[PRE7]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This method takes in a relative path to the data inside the `resources` folder
    of your folder:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受 `resources` 文件夹内数据的相对路径：
- en: '[PRE8]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we will write a method called `buildDataFrame`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个名为 `buildDataFrame` 的方法：
- en: '[PRE9]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Remember to update your import statements. The necessary input statements look
    like the following code. This is all we need to be able to compile all of the
    code that we developed up until now:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 记得更新你的导入语句。必要的输入语句如下所示。这是我们能够编译到目前为止开发的所有代码所需的一切：
- en: '[PRE10]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Import the MongoDB packages, including the connector package, in particular:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 MongoDB 包，包括连接器包，特别是：
- en: '[PRE11]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create the `Aircraft` object:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `Aircraft` 对象：
- en: '[PRE12]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a `main` method inside the `Aircraft` object, like this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Aircraft` 对象内部创建一个 `main` 方法，如下所示：
- en: '[PRE13]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `object` now looks like this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`object` 现在看起来是这样的：'
- en: '[PRE14]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `case class` to represent carefully selected features in the dataset
    that we decide will contribute most to this data analysis:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `case class` 来表示数据集中精心挑选的特征，这些特征我们将决定将对数据分析做出最大贡献：
- en: '[PRE15]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create a dataframe to represent the `FlightData`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个数据框来表示 `FlightData`：
- en: '[PRE16]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We just loaded the dataset and created a dataframe. Now, we are able to print
    the schema:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚加载了数据集并创建了一个数据框。现在，我们能够打印模式：
- en: '[PRE17]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `printschema()` method displays the following schema:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`printschema()` 方法显示以下模式：'
- en: '![](img/53042a67-d6a3-4ab1-8562-2c1e5893552b.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/53042a67-d6a3-4ab1-8562-2c1e5893552b.jpg)'
- en: 'We will need a cast on some fields. To call the `cast` method, we call in the
    following import:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在某些字段上使用类型转换。要调用 `cast` 方法，我们按照以下导入进行调用：
- en: '[PRE18]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we will create a local temporary view and give it the name `airline_onTime`.
    This temporary view only exists for as long as the lifespan of the `SparkSession`
    that we used to create our dataframe:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个本地临时视图并将其命名为 `airline_onTime`。这个临时视图仅存在于我们创建 dataframe 所使用的 `SparkSession`
    的生存期内：
- en: '[PRE19]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run a `count` on the number of rows in the dataframe:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对 dataframe 中的行数进行 `count` 操作：
- en: '[PRE20]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Create a local temporary view using the given name. The lifetime of this temporary
    view is
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的名称创建一个本地临时视图。这个临时视图的生存期
- en: 'tied to the `SparkSession` that was used to create this dataset:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建此数据集所使用的 `SparkSession` 相关联：
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a local temporary view using the given name. The lifetime of this temporary
    view is tied to the `SparkSession` that was used to create this dataset:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的名称创建一个本地临时视图。这个临时视图的生存期与创建此数据集所使用的 `SparkSession` 相关联：
- en: '[PRE22]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Having trimmed and cast our fields and made sure the numeric columns work,
    we can now save our data as JSON lines and parquet. Call the `toJSON` method to
    return the content of the dataset as a dataset of JSON strings:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在对字段进行裁剪和类型转换并确保数值列正常工作后，我们现在可以将数据保存为 JSON 行和 parquet。调用 `toJSON` 方法将数据集的内容作为
    JSON 字符串的 dataset 返回：
- en: '[PRE23]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Display the new dataset in JSON format:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以 JSON 格式显示新数据集：
- en: '[PRE24]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save our JSON airline dataframe as a `.gzip` JSON file:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的 JSON 空中数据 dataframe 保存为 `.gzip` JSON 文件：
- en: '[PRE25]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we need to convert our dataframe to `parquet` records. The following
    code does just that:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将我们的 dataframe 转换为 `parquet` 记录。以下代码正是这样做的：
- en: '[PRE26]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s read our newly created JSON archive and display the first 20 rows of
    it:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们读取我们新创建的 JSON 归档并显示其前 20 行：
- en: '[PRE27]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s load the `parquet` version as well:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们同时加载 `parquet` 版本：
- en: '[PRE28]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Print out the `parquet` version of the airline dataframe:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出空中数据 dataframe 的 `parquet` 版本：
- en: '[PRE29]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, write to the MongoDB database, `airlineOnTimeData`. The call to the `save`
    method produces a `DataFrameWriter` that contains a `.mode` method; `mode` takes
    in an `"overwrite"` parameter. Thus, if the `collection` already exists in Mongo,
    the new records will still be written into the MongoDB database:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将数据写入 MongoDB 数据库，`airlineOnTimeData`。调用 `save` 方法会产生一个包含 `.mode` 方法的 `DataFrameWriter`；`mode`
    接受一个 `"overwrite"` 参数。因此，如果 `collection` 已经存在于 Mongo 中，新记录仍然会被写入 MongoDB 数据库：
- en: '[PRE30]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: To confirm that the data was written into MongoDB, launch the MongoDB Compass
    Community app. In the Connect to Host opening screen, click on Connect and in
    the resulting screen click on database test. The benefit of writing to MongoDB
    is that, it gives us a easy way to retrieve our data and import it into Spark
    if something were to corrupt our data `airlineOnTimeData` collection.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认数据已写入 MongoDB，启动 MongoDB Compass Community 应用程序。在“连接到主机”打开屏幕中，点击“连接”，然后在结果屏幕中点击数据库
    test。写入 MongoDB 的好处是，它为我们提供了一个简单的方法来检索我们的数据，并在数据 `airlineOnTimeData` 集合被损坏的情况下将其导入
    Spark。
- en: Finally, submit the application into a Spark local cluster using the `spark-submit`
    command.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 `spark-submit` 命令将应用程序提交到 Spark 本地集群。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we carried out **machine learning** (**ML**) data analysis
    tasks on flight performance data. One such task is the implementation of a regression
    model fitted on a training subset of data. Given a new or unknown flight with
    delayed departure data, this model was able to predict whether the flight under
    investigation made up for time lost and arrived at the destination on time. One
    important takeaway from this ML exercise is this—the origin to destination distance
    contributed most toward predicting time gained. Carrier delays contributed least
    toward a prediction. A longer flight, it turns out, is able to gain more time.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对飞行性能数据进行了 **机器学习**（**ML**）数据分析任务。其中一项任务是针对数据的一个训练子集实现回归模型。给定一个新或未知的延误起飞的航班数据，该模型能够预测正在调查的航班是否弥补了失去的时间并在目的地准时到达。从这个机器学习练习中，我们得到的一个重要启示是——从起点到目的地的距离对预测时间增益的贡献最大。承运人延误对预测的贡献最小。结果证明，飞行时间更长，能够获得更多的时间。
- en: This chapter provided the foundation to build more sophisticated models. A model
    with more predictor variables (for example, taking into account, the weather and
    security delays) could yield deeper, sharper predictions. That said, this chapter
    hopefully opens a window for opportunity readers to understand how flight performance
    insights could help travelers snag an optimal travel experience in terms of money
    and time spent.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为构建更复杂的模型奠定了基础。具有更多预测变量（例如，考虑天气和安全延误）的模型可以产生更深入、更尖锐的预测。话虽如此，本章希望为读者打开一扇了解航班性能洞察如何帮助旅行者以金钱和时间成本获得最佳旅行体验的机会。
- en: In the next chapter and the last one, we will develop a recommender system.
    Get inspired by Amazon's recommendation algorithms and Netflix's ratings system
    for bringing us relevant movies. The recommendation system that we build will
    take advantage of all our accumulated skills in Spark ML this far.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将开发一个推荐系统。从亚马逊的推荐算法和Netflix的评分系统中获得灵感，这些系统为我们带来了相关的电影。我们将构建的推荐系统将利用到目前为止我们在Spark
    ML中积累的所有技能。
- en: Questions
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Before readers head to the next chapter, we invite readers to attempt an upgrade
    on the flight performance model. The idea is this—feed in a couple more predictors
    that enhance the flight delay ML process in a way that makes predictions deeper
    and more incisive.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在读者进入下一章之前，我们邀请读者尝试提升航班性能模型。想法是这样的——输入几个额外的预测因子，以增强航班延误的ML过程，使其预测更加深入和尖锐。
- en: 'Here are a few questions to open further vistas of learning:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些问题，以进一步拓宽学习视野：
- en: What is a `parquet` file and what are its advantages, especially when a dataset
    becomes larger, and data shuffling between nodes becomes necessary?
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`parquet`文件是什么，它的优点是什么，尤其是在数据集变得更大，节点之间需要数据洗牌时？'
- en: What are the advantages of data compressed in a columnar format?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列式格式压缩数据的优点是什么？
- en: 'Occasionally, you might run into this error: "`Unable to find encoder stored
    in Dataset. Primitive types (Int, String, and so on) and Product types (case classes)
    are supported by importing spark.implicits._`". How do you get around this error?
    What is the root cause? Hint—build a simple dataframe with a dataset from the
    first chapter. Use the `spark.read` approach and attempt a `printSchema` on it.
    If that produces the aforementioned error, investigate if it could be that an
    explicit schema is required'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时你可能会遇到这个错误：“`无法在Dataset中找到存储的编码器。原始类型（Int、String等）和产品类型（case classes）通过导入spark.implicits._得到支持`”。你如何解决这个问题？根本原因是什么？提示——使用第一章中的数据集构建一个简单的dataframe。使用`spark.read`方法，并尝试对其执行`printSchema`。如果产生上述错误，调查是否需要显式模式
- en: As an alternative to MongoDB, would you rather submit flight performance data
    to HDFS?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为MongoDB的替代方案，你更愿意将航班性能数据提交到HDFS吗？
- en: Why did MongoDB prove to be useful in this chapter?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么MongoDB在本章中证明是有用的？
- en: What is semi-structured data?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是半结构化数据？
- en: Name one big benefit of Spark that sets it apart from Hadoop? For example, think
    programming paradigms.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举Spark相对于Hadoop的一个大优点，使其脱颖而出？例如，考虑编程范式。
- en: Can you read in the flight's data from Kafka? If so, how and what might be a
    reason to do this?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能从Kafka中读取航班数据吗？如果是的话，你是如何做到的，以及这样做的原因可能是什么？
- en: What is data enrichment and how is it related to munging if both the terms are
    related?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据丰富化是什么，它与munging有何关系，如果这两个术语都有关联的话？
- en: Create a dataframe with two case classes, each with a small subset from the
    carriers CSV and airports CSV datasets respectively. How would you write this
    to MongoDB?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两个案例类创建一个dataframe，每个案例类分别从承运人CSV和机场CSV数据集的小子集中提取。你将如何将此写入MongoDB？
- en: Further reading
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The following article on *Introduction to Multivariate Regression Analysis*
    is about the importance of regression analysis: [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3049417/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3049417/)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下关于*多元回归分析简介*的文章讲述了回归分析的重要性：[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3049417/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3049417/)
