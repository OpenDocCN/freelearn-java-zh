- en: Chapter 11. Using the Java RMI, HTTP Invoker, Hessian, and REST
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 使用Java RMI、HTTP Invoker、Hessian和REST
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Creating a Java RMI service
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Java RMI服务
- en: Querying an existing Java RMI service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询现有的Java RMI服务
- en: Creating an HTTP Invoker service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建HTTP Invoker服务
- en: Querying an existing HTTP Invoker service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询现有的HTTP Invoker服务
- en: Creating a Hessian service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Hessian服务
- en: Querying an existing Hessian service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询现有的Hessian服务
- en: Creating a REST service
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建REST服务
- en: Querying an existing REST service
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询现有的REST服务
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is about making Spring interact with another piece of software
    over a network. Different protocols can be used for this, but each one of them
    uses a client/server architecture. Spring can be the client or server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于让Spring通过网络与另一件软件交互。可以使用不同的协议来完成此操作，但每个协议都使用客户端/服务器架构。Spring可以是客户端或服务器。
- en: '![Introduction](img/5807OS_11_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/5807OS_11_01.jpg)'
- en: Java RMI and HTTP Invoker are remote method invocation technologies; a Java
    client executes a method located on a Java server just as with a normal method.
    The request contains the method's arguments and the response contains the method's
    return value.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java RMI和HTTP Invoker是远程方法调用技术；Java客户端执行位于Java服务器上的方法，就像执行正常方法一样。请求包含方法的参数，响应包含方法的返回值。
- en: Hessian, REST, and SOAP are web services; the request is an HTTP request to
    a web server, which sends back an HTTP response. Web services are platform agnostic;
    for example, the client could be a Spring application (Java) and the server could
    be a PHP application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Hessian、REST和SOAP是Web服务；请求是发送到Web服务器的HTTP请求，它返回一个HTTP响应。Web服务是平台无关的；例如，客户端可以是Spring应用程序（Java），而服务器可以是PHP应用程序。
- en: REST is currently the most popular option; it's simple, flexible, and cross-platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: REST是目前最受欢迎的选项；它简单、灵活且跨平台。
- en: 'As a rule of thumb, use:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一项经验法则，使用：
- en: HTTP Invoker to interact with another Spring application
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP Invoker与另一个Spring应用程序交互
- en: Java RMI to interact with another Java application not using Spring
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java RMI与不使用Spring的另一个Java应用程序交互
- en: Hessian to interact with another Java application not using Spring when you
    need to go over proxies and firewalls
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要穿越代理和防火墙与不使用Spring的另一个Java应用程序交互时使用Hessian
- en: SOAP if you have to; it won't be covered in this chapter
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果必须使用SOAP；本章不会涉及
- en: REST for all other cases
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有其他情况使用REST
- en: Creating a Java RMI service
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Java RMI服务
- en: The Java RMI is a Java remote method invocation technology; a client executes
    a method ocated on a server, the Java RMI service.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Java RMI是一种Java远程方法调用技术；客户端执行位于服务器上的方法，即Java RMI服务。
- en: In this recipe, we will set up a Java RMI service that will expose the methods
    of a normal Java class. The service will be part of an existing Spring web application
    but will use its own port.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将设置一个Java RMI服务，该服务将公开一个普通Java类的方法。该服务将是现有Spring Web应用程序的一部分，但将使用自己的端口。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The server will expose the methods of the `UserService` interface:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将公开`UserService`接口的方法：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `UserService` interface is implemented by `UserServiceImpl`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口由`UserServiceImpl`实现：'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `UserService` methods will receive and send `User` objects:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`方法将接收和发送`User`对象：'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `User` class implements `Serializable`; this is necessary because
    the `User` objects are serialized before they are transmitted over the network.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`User`类实现了`Serializable`接口；这是必要的，因为`User`对象在通过网络传输之前需要被序列化。
- en: How to do it…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to create a Java RMI service:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Java RMI服务的步骤如下：
- en: 'In the Spring configuration, add a `UserService` bean returning an instance
    of `UserServiceImpl`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，添加一个返回`UserServiceImpl`实例的`UserService`豆：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add an `RmiServiceExporter` bean. Define the Java RMI service name, the interface
    exposed by the service, and the object implementing it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`RmiServiceExporter`豆。定义Java RMI服务名称、服务公开的接口以及实现它的对象：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Java RMI service is now available at `rmi://localhost:1099/userService`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java RMI服务现在可在`rmi://localhost:1099/userService`上访问。
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`RmiServiceExporter` is a Spring class generating an RMI service from a Java
    interface (`UserService`). For each method defined in `UserService`, the corresponding
    method from `userService()`, in `UserServiceImpl`, will be executed. The RMI service
    is made available by default on the `1099` port.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`RmiServiceExporter`是Spring类，它从Java接口（`UserService`）生成RMI服务。对于`UserService`中定义的每个方法，`UserServiceImpl`中的`userService()`对应的相应方法将被执行。RMI服务默认在`1099`端口上提供。'
- en: Querying an existing Java RMI service
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询现有Java RMI服务
- en: In this recipe, we will configure a Spring web application, so that it will
    be able to execute a method on an existing RMI service.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将配置一个Spring web应用，使其能够执行现有RMI服务的方法。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will query the Java RMI service of the previous *Creating a Java RMI service*
    recipe.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询之前*创建Java RMI服务*菜谱中的Java RMI服务。
- en: 'We need the `UserService` interface so that our application knows the methods
    available on the RMI service:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`UserService`接口，以便我们的应用程序知道RMI服务上的可用方法：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`User` objects will be exchanged over the network, so we need the `User` class
    of the previous recipe as well:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`User`对象将通过网络交换，因此我们还需要之前菜谱中的`User`类：'
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In real applications, these classes could be provided to the RMI client as a
    JAR file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，这些类可以作为JAR文件提供给RMI客户端。
- en: How to do it…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Here are the steps to query a Java RMI service:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是查询Java RMI服务的步骤：
- en: 'In the Spring configuration, add a `RmiProxyFactoryBean` bean named `userService`.
    Define the Java RMI service URL and the `UserService` interface:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，添加一个名为`userService`的`RmiProxyFactoryBean`豆。定义Java RMI服务URL和`UserService`接口：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In a controller class, add an autowired `UserService` field:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器类中，添加一个自动装配的`UserService`字段：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In a controller method, execute the `findAll()` method of the `UserService`
    object:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，执行`UserService`对象的`findAll()`方法：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The autowired `UserService` object is created behind the scenes by Spring. It's
    actually an `RmiProxyFactoryBean` object that will delegate the execution of the
    `findAll()`method to the Java RMI service located at `rmi://localhost:1099/userService`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 自动装配的`UserService`对象由Spring在幕后创建。它实际上是一个`RmiProxyFactoryBean`对象，它将`findAll()`方法的执行委托给位于`rmi://localhost:1099/userService`的Java
    RMI服务。
- en: Creating an HTTP Invoker service
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建HTTP Invoker服务
- en: HTTP Invoker, like the Java RMI, is a Java remote method invocation technology;
    here, a client executes a method located on a server-the HTTP invoker service.
    HTTP is used instead of a custom port, so it can go over proxies and firewalls.
    However, it's a Spring technology, so both the client and the server must use
    Java and Spring.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP Invoker，就像Java RMI一样，是一种Java远程方法调用技术；在这里，客户端执行位于服务器上的方法——HTTP invoker服务。使用HTTP而不是自定义端口，因此它可以穿越代理和防火墙。然而，它是一种Spring技术，因此客户端和服务器都必须使用Java和Spring。
- en: In this recipe, we will set up an HTTP Invoker service that will expose the
    methods of a normal Java class. The service will be part of an existing Spring
    web application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将设置一个HTTP Invoker服务，该服务将公开一个普通Java类的功能。该服务将成为现有Spring web应用的一部分。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The server will expose the methods of the `UserService` interface:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将公开`UserService`接口的方法：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `UserService` interface is implemented by `UserServiceImpl`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口由`UserServiceImpl`实现：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `UserService` methods will receive and send `User` objects:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`方法将接收和发送`User`对象：'
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `User` class implements `Serializable`; it's necessary because
    `User` objects are serialized before they are transmitted over the network.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`User`类实现了`Serializable`接口；这是必要的，因为`User`对象在通过网络传输之前需要被序列化。
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Here are the steps to create an HTTP Invoker service:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建HTTP Invoker服务的步骤：
- en: 'In the Spring configuration, add a `UserService` bean returning an instance
    of `UserServiceImpl`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，添加一个返回`UserServiceImpl`实例的`UserService`豆：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add an `HttpInvokerServiceExporter` bean named `/userService`. Define the interface
    exposed by the service and the object implementing it:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/userService`的`HttpInvokerServiceExporter`豆。定义服务暴露的接口及其实现对象：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The HTTP Invoker service is now available at the `/userService` URL of the Spring
    web application.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP Invoker服务现在可在Spring web应用的`/userService` URL上使用。
- en: How it works…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '`HttpInvokerServiceExporter` is a Spring class generating an HTTP Invoker service
    from a Java interface (`UserService`). For each method defined in `UserService`,
    the corresponding method from `userService()`, in `UserServiceImpl`, will be executed.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpInvokerServiceExporter`是一个Spring类，它从Java接口（`UserService`）生成HTTP Invoker服务。对于`UserService`中定义的每个方法，`UserServiceImpl`中的`userService()`对应的相应方法将被执行。'
- en: Querying an existing HTTP Invoker service
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询现有的HTTP Invoker服务
- en: In this recipe, we will configure a Spring web application that will be able
    to execute a method on an existing HTTP Invoker service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将配置一个Spring Web应用程序，该应用程序将能够执行现有HTTP Invoker服务上的方法。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will query the HTTP Invoker service of the previous *Creating an HTTP Invoker
    service* recipe.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询之前*创建HTTP Invoker服务*配方中的HTTP Invoker服务。
- en: 'We need the `UserService` interface so that our application knows the methods
    available on the HTTP Invoker service:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`UserService`接口，以便我们的应用程序知道HTTP Invoker服务上可用的方法：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`User` objects will be exchanged over the network, so we need the `User` class
    of the previous recipe as well:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`User`对象将在网络上交换，因此我们还需要之前配方中的`User`类：'
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps for using an HTTP Invoker service:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP Invoker服务的步骤如下：
- en: 'In the Spring configuration, add an `HttpInvokerProxyFactoryBean` bean named
    `userService`. Define the HTTP Invoker service URL and the `UserService` interface:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，添加一个名为`userService`的`HttpInvokerProxyFactoryBean`豆。定义HTTP Invoker服务URL和`UserService`接口：
- en: '[PRE17]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In a controller class, add a `UserService` field as a standard autowired service
    bean:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器类中，添加一个`UserService`字段作为标准自动装配的服务豆：
- en: '[PRE18]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In a controller method, execute the `findAll()` method of the `UserService`
    object and log the results:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，执行`UserService`对象的`findAll()`方法并记录结果：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `UserController` class, the autowired `UserService` object is instantiated
    behind the scenes by Spring. It's actually an `HttpInvokerProxyFactoryBean`, which
    will delegate the execution of the `findAll()`method to the HTTP Invoker service
    located at `http://localhost:8080/http_invoker_server/userService`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserController`类中，Spring在幕后实例化了自动装配的`UserService`对象。它实际上是一个`HttpInvokerProxyFactoryBean`，它将`findAll()`方法的执行委托给位于`http://localhost:8080/http_invoker_server/userService`的HTTP
    Invoker服务。
- en: Creating a Hessian service
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Hessian服务
- en: Hessian is a remote method invocation technology; here, a client executes a
    method located on a server-the Hessian service. It uses HTTP, so it can go over
    proxies and firewalls. It also has implementations in multiple languages (PHP,
    Python, Ruby, and so on). So, for example, the client can use Java and the server
    can use PHP.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Hessian是一种远程方法调用技术；在这里，客户端执行位于服务器上的方法——Hessian服务。它使用HTTP，因此可以通过代理和防火墙。它还在多种语言中实现了（PHP、Python、Ruby等等）。因此，例如，客户端可以使用Java，而服务器可以使用PHP。
- en: In this recipe, we will add a Hessian service to an existing Spring web application.
    It will expose the methods of a Java class.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将向现有的Spring Web应用程序添加一个Hessian服务。它将公开Java类的功能。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The server will expose the methods of the `UserService` interface:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将公开`UserService`接口的方法：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `UserService` interface is implemented by `UserServiceImpl`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`接口由`UserServiceImpl`实现：'
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `UserService` methods will receive and send `User` objects:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserService`方法将接收和发送`User`对象：'
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `User` class doesn't need to implement `Serializable`. Hessian
    uses its own object serialization mechanism.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`User`类不需要实现`Serializable`。Hessian使用它自己的对象序列化机制。
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to create a Hessian service:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Hessian服务的步骤如下：
- en: 'In the Spring configuration, add a `UserService` bean returning an instance
    of `UserServiceImpl`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，添加一个返回`UserServiceImpl`实例的`UserService`豆：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add a `HessianServiceExporter` bean named `/userService`. Define the interface
    exposed by the service and the object implementing it:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/userService`的`HessianServiceExporter`豆。定义服务公开的接口及其实现对象：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Hessian service is now available at the `/userService` URL of the Spring
    web application.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hessian服务现在可在Spring Web应用程序的`/userService` URL上使用。
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`HessianServiceExporter` is a Spring class generating a Hessian service from
    a Java interface (`UserService`). For each method defined in `UserService`, the
    corresponding method from `userService()`, in `UserServiceImpl`, will be executed.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`HessianServiceExporter`是一个Spring类，它从Java接口（`UserService`）生成Hessian服务。对于`UserService`中定义的每个方法，`UserServiceImpl`中的`userService()`对应的相应方法将被执行。'
- en: Querying an existing Hessian service
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询现有的 Hessian 服务
- en: In this recipe, we will configure a Spring web application, so that it will
    be able to execute a method on an existing Hessian service.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将配置一个 Spring Web 应用程序，使其能够执行现有 Hessian 服务的某个方法。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will query the Hessian service of the previous *Creating a Hessian service*
    recipe.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询之前 *创建 Hessian 服务* 菜谱中的 Hessian 服务。
- en: 'We need the `UserService` interface, so that our application knows the methods
    available on the Hessian service:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 `UserService` 接口，以便我们的应用程序知道 Hessian 服务的可用方法：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`User` objects will be exchanged over the network, so we need the `User` class
    of the previous recipe as well:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`User` 对象将通过网络交换，因此我们需要之前菜谱中的 `User` 类：'
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here are the steps for using a Hessian service:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Hessian 服务的步骤如下：
- en: 'In the Spring configuration, add a `HessianProxyFactoryBean` bean named `userService`.
    Define the Hessian service URL and the `UserService` interface:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spring 配置中，添加一个名为 `userService` 的 `HessianProxyFactoryBean` Bean。定义 Hessian
    服务 URL 和 `UserService` 接口：
- en: '[PRE27]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In a controller class, add a `UserService` field as a standard autowired service
    bean:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器类中，添加一个 `UserService` 字段作为标准自动装配的服务 Bean：
- en: '[PRE28]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In a controller method, execute the `findAll()` method of the `UserService`
    object and log the results:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，执行 `UserService` 对象的 `findAll()` 方法并记录结果：
- en: '[PRE29]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `UserController` class, the autowired `UserService` object is instantiated
    behind the scenes by Spring. It's actually a `HessianProxyFactoryBean` that will
    delegate the execution of the `findAll()`method to the Hessian service located
    at `http://localhost:8080/hessian/userService`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `UserController` 类中，自动装配的 `UserService` 对象由 Spring 在幕后实例化。它实际上是一个 `HessianProxyFactoryBean`，它将
    `findAll()` 方法的执行委托给位于 `http://localhost:8080/hessian/userService` 的 Hessian 服务。
- en: Creating a REST service
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 REST 服务
- en: REST uses a web service architecture; here, a client sends an HTTP request to
    a server, which sends back an HTTP response. JSON is most of the time used for
    data transfer. The list of URLs supported by the server is called the REST API.
    These URLs are kept simple using different HTTP methods. For example, the `/users/3`
    request using the GET method will return the user whose ID is 3\. The `/users/3`
    request using the DELETE method will delete that same user.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: REST 使用 Web 服务架构；在这里，客户端向服务器发送 HTTP 请求，服务器返回 HTTP 响应。大多数情况下使用 JSON 进行数据传输。服务器支持的
    URL 列表称为 REST API。这些 URL 使用不同的 HTTP 方法保持简单。例如，使用 GET 方法的 `/users/3` 请求将返回 ID 为
    3 的用户。使用 DELETE 方法的 `/users/3` 请求将删除该用户。
- en: In this recipe, we will create a simple REST service that will allow a REST
    client to query and modify a list of `User` objects on the server.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个简单的 REST 服务，允许 REST 客户端查询和修改服务器上 `User` 对象的列表。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the `User` class:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `User` 类：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We will use the `UserService` class with a preset list of users:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用具有预设用户列表的 `UserService` 类：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How to do it…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here are the steps to create a REST service:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 REST 服务的步骤如下：
- en: 'Add the Maven dependencies for `jackson` in `pom.xml`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 `jackson` 的 Maven 依赖项：
- en: '[PRE32]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the Spring configuration, add a `UserService` bean:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spring 配置中，添加一个 `UserService` Bean：
- en: '[PRE33]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a controller class with a URL prefix annotated with `@RestController`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器类，其 URL 前缀使用 `@RestController` 注解：
- en: '[PRE34]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add an autowired `UserService` field:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个自动装配的 `UserService` 字段：
- en: '[PRE35]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add a controller method returning the list of all users:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制器方法，返回所有用户的列表：
- en: '[PRE36]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add a controller method returning the user corresponding to a given ID:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制器方法，返回与给定 ID 对应的用户：
- en: '[PRE37]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The Spring web application is now a REST service. It will return User objects
    serialized to JSON in response to the `/users` and `/users/1` URL requests.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Web 应用程序现在是一个 REST 服务。它将对 `/users` 和 `/users/1` URL 请求返回序列化为 JSON 的 User
    对象。
- en: How it works…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`UserController` is a standard Spring controller except for the `@RestController`
    annotation, which will automatically convert the objects returned by the controller
    methods to JSON, using the Jackson library.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserController` 是一个标准的 Spring 控制器，除了 `@RestController` 注解外，它将自动将控制器方法返回的对象转换为
    JSON，使用 Jackson 库。'
- en: There's more…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'To use a specific HTTP method, add the `method` argument in the `@RequestMapping`
    annotation:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用特定的 HTTP 方法，在 `@RequestMapping` 注解中添加 `method` 参数：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To secure a REST service:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护 REST 服务：
- en: Use HTTPS so that data transfers between the client and server are encrypted.
    Refer to the *Using HTTPS with Tomcat* recipe in [Chapter 6](ch06.html "Chapter 6. Managing
    Security"), *Managing Security*.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTPS以确保客户端和服务器之间的数据传输被加密。请参考[第6章](ch06.html "第6章。管理安全")中关于*使用HTTPS与Tomcat*的配方，*管理安全*。
- en: If you want only authorized clients to query it, you can use HTTP Basic Authentication.
    Refer to the *Authenticating users using the default login page* recipe from [Chapter
    6](ch06.html "Chapter 6. Managing Security"), *Managing Security*, especially,
    the `httpBasic()` method. Another possibility is to use an OAuth workflow. It's
    more complicated, but it avoids the client having to send a username and password
    at each request. That's the method chosen by Facebook and Twitter for their REST
    API, for example.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只想允许授权客户端查询，可以使用HTTP基本认证。请参考[第6章](ch06.html "第6章。管理安全")中关于*使用默认登录页面认证用户*的配方，*管理安全*，特别是`httpBasic()`方法。另一种可能性是使用OAuth工作流程。这更复杂，但避免了客户端在每次请求时都需要发送用户名和密码。例如，Facebook和Twitter就是选择这种方法来处理它们的REST
    API。
- en: Querying an existing REST service
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询现有REST服务
- en: In this recipe, from a Spring controller method, we will retrieve data from
    an existing REST service.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将从一个Spring控制器方法中检索现有REST服务的数据。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will query the REST service of the previous *Creating a REST service* recipe.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询之前*创建REST服务*配方中的REST服务。
- en: 'We will convert the JSON data received from the REST service to `User` objects.
    We will use this `User` class:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把从REST服务接收到的JSON数据转换为`User`对象。我们将使用这个`User`类：
- en: '[PRE39]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How to do it…
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps for using a REST service:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用REST服务的步骤如下：
- en: 'Add the Maven dependencies for Jackson in `pom.xml`:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Jackson的Maven依赖项：
- en: '[PRE40]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In a controller method, define the URL of the REST service to query:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，定义要查询的REST服务的URL：
- en: '[PRE41]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Use the `RestTemplate` class and its `getForObject()` method to query the REST
    service and generate a `User` object from the JSON response:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`RestTemplate`类及其`getForObject()`方法查询REST服务并从JSON响应中生成`User`对象：
- en: '[PRE42]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`RestTemplate` is a class provided by Spring that provides methods to easily
    query REST services and generate Java objects from the received JSON response.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate`是Spring提供的一个类，它提供了查询REST服务并从接收到的JSON响应中生成Java对象的方法。'
- en: There's more…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If the response is a list of objects, pass an array class as a second parameter
    to generate an array of objects:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应是对象列表，将数组类作为第二个参数传递以生成对象数组：
- en: '[PRE43]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
