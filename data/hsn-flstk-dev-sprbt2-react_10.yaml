- en: Adding CRUD Functionalities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加CRUD功能
- en: This chapter describes how to implement CRUD functionalities to our frontend.
    We are going to use the components that we learned about in [Chapter 8](1b371269-6ec8-4246-9b64-8703e17e9479.xhtml),
    *Useful Third-Party Components for React*. We will fetch data from our backend
    and present the data in a table. Then, we will implement delete, edit, and add
    functionalities. In the final part, we will add features to export data to a CSV
    file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了如何在我们的前端实现CRUD功能。我们将使用[第8章](1b371269-6ec8-4246-9b64-8703e17e9479.xhtml)中学到的组件，*React有用的第三方组件*。我们将从后端获取数据并在表中呈现数据。然后，我们将实现删除、编辑和添加功能。最后，我们将添加功能以将数据导出到CSV文件。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: How to fetch data from the backend and present it in the frontend
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从后端获取数据并在前端呈现数据
- en: How to delete, add, and update data using the REST API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用REST API删除、添加和更新数据
- en: How to show toast messages to the user
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向用户显示提示消息
- en: How to export data to the CSV file from the React app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从React应用程序导出数据到CSV文件
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend* is needed with the modification from the previous
    chapter (the unsecured backend).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中创建的Spring Boot应用程序需要与上一章的修改（未经保护的后端）一起使用。
- en: We also need the React app that we created in the previous chapter (*carfront*).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在上一章中创建的React应用程序（*carfront*）。
- en: Creating the list page
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建列表页面
- en: In the first phase, we will create the list page to show cars with paging, filtering,
    and sorting features. Run your Spring Boot backend, the cars can be fetched by
    sending the `GET` request to the `http://localhost:8080/api/cars` URL, as shown
    in [Chapter 3](5aefd828-dd47-4314-83d6-d2b3333840d6.xhtml), *Creating a RESTful
    Web Service with Spring Boot*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一阶段，我们将创建列表页面，显示带分页、过滤和排序功能的汽车。运行Spring Boot后端，可以通过向`http://localhost:8080/api/cars`
    URL发送`GET`请求来获取汽车，如[第3章](5aefd828-dd47-4314-83d6-d2b3333840d6.xhtml)中所示，*使用Spring
    Boot创建RESTful Web服务*。
- en: 'Let''s inspect the JSON data from the response. The array of cars can be found
    in the `_embedded.cars` node of the JSON response data:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查来自响应的JSON数据。汽车数组可以在JSON响应数据的`_embedded.cars`节点中找到：
- en: '![](img/27d377c2-2c0b-455c-9b8d-fbef6d11dc77.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27d377c2-2c0b-455c-9b8d-fbef6d11dc77.png)'
- en: 'Now, once we know how to fetch cars from the backend, we are ready to implement
    the list page to show the cars. The following steps describe this in practice:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们知道如何从后端获取汽车，我们就准备好实现列表页面来显示汽车。以下步骤描述了这一实践：
- en: Open the *carfront* React app with the VS Code (the React app created in the
    previous chapter).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code中的*carfront* React应用程序（在上一章中创建的React应用程序）。
- en: 'When the app has multiple components, it is recommended to create a folder
    for them. Create a new folder, called `components`, in the `src` folder. With
    the VS Code, you can create a folder by right-clicking the folder in the sidebar
    file explorer and selecting New Folder from the menu:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序有多个组件时，建议为它们创建一个文件夹。在`src`文件夹中创建一个名为`components`的新文件夹。使用VS Code，可以通过右键单击侧边栏文件资源管理器中的文件夹，并从菜单中选择“新建文件夹”来创建文件夹：
- en: '![](img/4220c9db-f9b3-4913-85ad-4e4be3c236c8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4220c9db-f9b3-4913-85ad-4e4be3c236c8.png)'
- en: 'Create a new file, called `Carlist.js`, in the `components` folder and now
    your project structure should look like the following:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`文件夹中创建一个名为`Carlist.js`的新文件，现在您的项目结构应如下所示：
- en: '![](img/e8c93710-5edb-4ec9-9382-b511dfa8eebd.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8c93710-5edb-4ec9-9382-b511dfa8eebd.png)'
- en: 'Open the `Carlist.js` file in the editor view and write the base code of the
    component, shown as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器视图中打开`Carlist.js`文件，并编写组件的基本代码，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need a state for the `cars` that are fetched from the REST API, therefore,
    we have to add the constructor and define one array-type state value:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个从REST API获取的`cars`状态，因此，我们必须添加构造函数并定义一个数组类型的状态值：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Execute `fetch` in the `componentDidMount()` life cycle method. The cars from
    the JSON response data will be saved to the state, called `cars`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`componentDidMount()`生命周期方法中执行`fetch`。来自JSON响应数据的汽车将保存到名为`cars`的状态中：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the map function to transform `car` objects into table rows in the `render()`
    method and add the table element:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用map函数将`car`对象转换为`render()`方法中的表行，并添加表元素：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, if you start the React app with the `npm start` command, you should see
    the following list page:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果使用`npm start`命令启动React应用程序，应该会看到以下列表页面：
- en: '![](img/d7177ba7-c83d-4e98-8b66-166f71de7a2c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7177ba7-c83d-4e98-8b66-166f71de7a2c.png)'
- en: 'The URL server can repeat multiple times when we create more CRUD functionalities,
    and it will change when the backend is deployed to a server other than the localhost.
    Therefore, it is better to define it as a constant. Then, when the URL value changes,
    we have to modify it only in one place. Let''s create a new file, called `constants.js`,
    in the root folder of our app. Open the file in the editor and add the following
    line into the file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建更多的CRUD功能时，URL服务器可能会重复多次，并且当后端部署到本地主机以外的服务器时，它将发生变化。因此，最好将其定义为常量。然后，当URL值更改时，我们只需在一个地方进行修改。让我们在我们应用程序的根文件夹中创建一个名为`constants.js`的新文件。在编辑器中打开文件，并将以下行添加到文件中：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we will import it to our `Carlist.js` file and use it in the `fetch`
    method:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将其导入到我们的`Carlist.js`文件中，并在`fetch`方法中使用它：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, your `Carlist.js` file source code should look like the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您的`Carlist.js`文件源代码应如下所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we will use React Table to get the paging, filtering, and sorting features
    out of the box. Stop the development server by pressing *Ctrl* + *C* in the terminal,
    and type the following command to install React Table. After the installation,
    restart the app:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用React Table来获得分页、过滤和排序功能。通过在终端中按*Ctrl* + *C*停止开发服务器，并输入以下命令来安装React Table。安装完成后，重新启动应用程序：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Import `react-table` and the style sheet to your `Carlist.js` file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将`react-table`和样式表导入到您的`Carlist.js`文件中：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then remove `table` and `tableRows` from the `render()` method. The `data`
    prop of React Table is `this.state.cars`, which contains fetched cars. We also
    have to define the `columns` of the table, where `accessor` is the field of the
    `car` object and `header` is the text of the header. To enable filtering, we set
    the `filterable` prop of the table to `true`. See the source code of the following
    `render()` method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从`render()`方法中删除`table`和`tableRows`。React Table的`data`属性是`this.state.cars`，其中包含获取的汽车。我们还必须定义表的`columns`，其中`accessor`是`car`对象的字段，`header`是标题的文本。为了启用过滤，我们将表的`filterable`属性设置为`true`。请参阅以下`render()`方法的源代码：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the React Table component, we acquired all the necessary features to our
    table with a small amount of coding. Now the list page looks like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React Table组件，我们用少量的编码获得了表的所有必要功能。现在列表页面看起来像下面这样：
- en: '![](img/5927d0cc-a2d0-4d90-8dda-f203e09642bd.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5927d0cc-a2d0-4d90-8dda-f203e09642bd.png)'
- en: The delete functionality
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除功能
- en: 'Items can be deleted from the database by sending the `DELETE` method request
    to the `http://localhost:8080/api/cars/[carid]` endpoint. If we look at the JSON
    response data, we can see that each car contains a link to itself and it can be
    accessed from the `_links.self.href` node, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过向`http://localhost:8080/api/cars/[carid]`端点发送`DELETE`方法请求从数据库中删除项目。如果我们查看JSON响应数据，我们可以看到每辆汽车都包含一个指向自身的链接，并且可以从`_links.self.href`节点访问，如下截图所示：
- en: '![](img/aef91708-ffd8-47d3-823e-4dbd5f442a13.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aef91708-ffd8-47d3-823e-4dbd5f442a13.png)'
- en: 'The following steps show how to implement delete functionality:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤显示了如何实现删除功能：
- en: 'We will create a button for each row in the table and the accessor of the button
    will be `_links.self.href`, which we can use to call the delete function that
    we will create soon. But first, add a new column to the table using `Cell` to
    render the button. See the following source code. We don''t want to enable sorting
    and filtering for the button column, therefore these props are set to be `false`.
    The button invokes the `onDelClick` function when pressed and sends a link to
    the car as an argument:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为表中的每一行创建一个按钮，按钮的访问器将是`_links.self.href`，我们可以使用它来调用我们即将创建的删除函数。但首先，使用`Cell`向表中添加一个新列来渲染按钮。请参阅以下源代码。我们不希望为按钮列启用排序和过滤，因此这些属性被设置为`false`。按钮在按下时调用`onDelClick`函数，并将汽车的链接作为参数发送：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Implement the `onDelClick` function. But first, let''s take the `fetchCars`
    function out from the `componentDidMount()` method. That is needed because we
    want to call the `fetchCars` function also after the car has been deleted to show
    an updated list of the cars to the user. Create a new function, called `fetchCars()`,
    and copy the code from the `componentDidMount()` method into a new function. Then
    call the `fetchCars()` function from the `componentDidMount()` function to fetch
    cars initially:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`onDelClick`函数。但首先，让我们从`componentDidMount()`方法中取出`fetchCars`函数。这是因为我们希望在汽车被删除后也调用`fetchCars`函数，以向用户显示更新后的汽车列表。创建一个名为`fetchCars()`的新函数，并将`componentDidMount()`方法中的代码复制到新函数中。然后从`componentDidMount()`函数中调用`fetchCars()`函数以最初获取汽车：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Implement the `onDelClick` function. We send the `DELETE` request to a car
    link, and when the delete succeeds, we refresh the list page by calling the `fetchCars()`
    function:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`onDelClick`函数。我们向汽车链接发送`DELETE`请求，当删除成功删除时，我们通过调用`fetchCars()`函数刷新列表页面：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When you start your app, the frontend should look like the following screenshot,
    and the car disappears from the list when the Delete button is pressed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动应用程序时，前端应该如下截图所示，当按下删除按钮时，汽车将从列表中消失：
- en: '![](img/51abe6e2-ba35-493e-8bcf-17b84d6affc1.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51abe6e2-ba35-493e-8bcf-17b84d6affc1.png)'
- en: 'It would be nice to show the user some feedback upon successful deletion or
    if there are any errors. Let''s implement a toast message to show the status of
    deletion. For that, we are going to use the `react-toastify` component ([https://github.com/fkhadra/react-toastify](https://github.com/fkhadra/react-toastify)).
    Install the component by typing the following command into the terminal you are
    using:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功删除或出现错误时，向用户显示一些反馈会很好。让我们实现一个提示消息来显示删除的状态。为此，我们将使用`react-toastify`组件（[https://github.com/fkhadra/react-toastify](https://github.com/fkhadra/react-toastify)）。通过在您使用的终端中键入以下命令来安装该组件：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After the installation is complete, start your app and open the `Carlist.js`
    file in the editor. We have to import `ToastContainer`, `toast`, and the style
    sheet to start using `react-toastify`. Add the following import statements to
    your `Carlist.js` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动您的应用程序并在编辑器中打开`Carlist.js`文件。我们必须导入`ToastContainer`、`toast`和样式表以开始使用`react-toastify`。将以下导入语句添加到您的`Carlist.js`文件中：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`ToastContainer` is the container component for showing toast messages, and
    it should be inside the `render()` method. In `ToastContainer`, you can define
    the duration of the toast message in milliseconds using the `autoClose` prop.
    Add the `ToastContainer` component inside the return statement in the `render()`
    method, just after `ReactTable`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToastContainer`是用于显示提示消息的容器组件，应该在`render()`方法中。在`ToastContainer`中，您可以使用`autoClose`属性以毫秒为单位定义提示消息的持续时间。在`render()`方法的返回语句中添加`ToastContainer`组件，就在`ReactTable`之后：'
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we will call the toast method in the `onDelClick()` function to show
    the toast message. You can define the type and position of the message. The success
    message is shown when deletion succeeds, and the error message is shown in the
    case of an error:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在`onDelClick()`函数中调用toast方法来显示提示消息。您可以定义消息的类型和位置。成功删除时显示成功消息，在出现错误时显示错误消息：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you will see the toast message when the car has been deleted, as shown
    in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当汽车被删除时，您将看到提示消息，如下截图所示：
- en: '![](img/b87b9982-af5f-4dd7-a391-1e57928865c1.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b87b9982-af5f-4dd7-a391-1e57928865c1.png)'
- en: 'To avoid accidental deletion of the car, it would be nice to have a confirmation
    dialog after the delete button has been pressed. We will implement this using
    the `react-confirm-alert` component ([https://github.com/GA-MO/react-confirm-alert](https://github.com/GA-MO/react-confirm-alert)).
    If your app is running, stop the development server by pressing *Ctrl* + *C* in
    the terminal and type the following command to install `react-confirm-alert`.
    After installation, restart the app:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免意外删除汽车，按下删除按钮后最好有一个确认对话框。我们将使用`react-confirm-alert`组件（[https://github.com/GA-MO/react-confirm-alert](https://github.com/GA-MO/react-confirm-alert)）来实现这一点。如果您的应用程序正在运行，请通过在终端中按下*Ctrl*
    + *C*来停止开发服务器，并输入以下命令来安装`react-confirm-alert`。安装后，重新启动应用程序：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Import `confirmAlert` and the CSS file to the `Carlist` component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将`confirmAlert`和CSS文件导入`Carlist`组件：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a new function, called `confirmDelete`, that opens the confirmation
    dialog. If the Yes button of the dialog is pressed, the `onDelClick` function
    is called and the car will be deleted:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`confirmDelete`的新函数，用于打开确认对话框。如果对话框的“是”按钮被按下，将调用`onDelClick`函数并删除汽车：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, change the function in the Delete button''s `onClick` event to `confirmDelete`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将删除按钮的`onClick`事件中的函数更改为`confirmDelete`：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you now press the Delete button, the confirmation dialog will be opened
    and the car will be deleted only if you press the Yes button:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在按下删除按钮，确认对话框将被打开，只有当您按下“是”按钮时，汽车才会被删除：
- en: '![](img/bd642b3c-6dea-4b0e-9036-33c540bf8ca2.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd642b3c-6dea-4b0e-9036-33c540bf8ca2.png)'
- en: The add functionality
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加功能
- en: The next step is to create an add functionality for the frontend. We will implement
    that using the React Skylight modal component. We already went through the usage
    of React Skylight in [Chapter 8](1b371269-6ec8-4246-9b64-8703e17e9479.xhtml),
    *Useful Third-Party React Components for React*. We will add the New Car button
    to the user interface, which opens the modal form when it is pressed. The modal
    form contains all the fields that are required to save the car as well as the
    button for saving and canceling.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为前端创建添加功能。我们将使用React Skylight模态组件来实现这一点。我们已经介绍了在[第8章](1b371269-6ec8-4246-9b64-8703e17e9479.xhtml)中使用React
    Skylight的用法，*React的有用的第三方组件*。我们将在用户界面中添加“新车”按钮，当按下时打开模态表单。模态表单包含保存汽车所需的所有字段，以及用于保存和取消的按钮。
- en: 'Stop the development server by pressing *Ctrl* + *C* in the terminal, and type
    the following command to install React Skylight. After installation, restart the
    app:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中按下*Ctrl* + *C*来停止开发服务器，并输入以下命令来安装React Skylight。安装后，重新启动应用程序：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following steps show how to create add functionality using the modal form
    component:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤显示了如何使用模态表单组件创建添加功能：
- en: 'Create a new file, called `AddCar.js`, in the `components` folder and write
    a component-class base code to the file, as shown here. Add the import for the
    `react-skylight` component:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`文件夹中创建一个名为`AddCar.js`的新文件，并将组件类基本代码写入文件中，如下所示。添加`react-skylight`组件的导入：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Introduce a state that contains all car fields:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入一个包含所有汽车字段的状态：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add a form inside the `render()` method. The form contains the `ReactSkylight`
    modal form component with buttons and the input fields that are needed to collect
    the car data. The button that opens the modal window, and will be shown in the
    carlist page, must be outside `ReactSkylight`. All input fields should have the
    `name` attribute with a value that is the same as the name of the state the value
    will be saved to. Input fields also have the `onChange` handler, which saves the
    value to state by invoking the `handleChange` function:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`render()`方法中添加一个表单。表单包含`ReactSkylight`模态表单组件，其中包含按钮和收集汽车数据所需的输入字段。打开模态窗口的按钮将显示在carlist页面上，必须在`ReactSkylight`之外。所有输入字段都应该有一个`name`属性，其值与将保存值的状态的名称相同。输入字段还具有`onChange`处理程序，通过调用`handleChange`函数将值保存到状态：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Insert the `AddCar` component to the `Carlist` component to see whether that
    form can be opened. Open the `Carlist.js` file to editor view and import the `AddCar`
    component:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddCar`组件插入`Carlist`组件中，以查看是否可以打开该表单。打开`Carlist.js`文件以查看编辑器视图，并导入`AddCar`组件：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Implement the `addCar` function to the `Carlist.js` file that will send the
    `POST` request to the backend `api/cars` endpoint. The request will include the
    new `car` object inside the body and the `''Content-Type'': ''application/json''`
    header. The header is needed because the `car` object is converted to JSON format
    using the `JSON.stringify()` method:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`Carlist.js`文件中实现`addCar`函数，该函数将向后端`api/cars`端点发送`POST`请求。请求将包括新的`car`对象在主体内以及`''Content-Type'':
    ''application/json''`头。需要头部是因为使用`JSON.stringify()`方法将`car`对象转换为JSON格式：'
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the `AddCar` component to the `render()` method and pass the `addCar` and
    `fetchCars` functions as props to the `AddCar` component that allows us to call
    these functions from the `AddCar` component. Now the return statement of the `CarList.js`
    file should look like the following:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddCar`组件添加到`render()`方法中，并将`addCar`和`fetchCars`函数作为props传递给`AddCar`组件，允许我们从`AddCar`组件中调用这些函数。现在`CarList.js`文件的返回语句应该如下所示：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you start the frontend app, it should now look like the following, and if
    you press the New Car button, it should open the modal form:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启动前端应用程序，它现在应该看起来像下面这样，如果您按下“新车”按钮，它应该打开模态表单：
- en: '![](img/7eb5802d-b483-43b6-adc5-a62f49c003d1.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7eb5802d-b483-43b6-adc5-a62f49c003d1.png)'
- en: 'Implement the `handleSubmit` and `cancelSubmit` functions to the `AddCar.js`
    file. The `handleSubmit` function creates a new `car` object and calls the `addCar`
    function, which can be accessed using props. The `cancelSubmit` function just
    closes the modal form:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddCar.js`文件中实现`handleSubmit`和`cancelSubmit`函数。`handleSubmit`函数创建一个新的`car`对象并调用`addCar`函数，该函数可以通过props访问。`cancelSubmit`函数只是关闭模态表单。
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, you can open the modal form by pressing the New Car button. Then you can
    fill the form with data, and press the Save button. So far, the form does not
    look nice, but we are going to style it in the next chapter:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过按下“新车”按钮打开模态表单。然后，您可以填写表单数据，并按“保存”按钮。到目前为止，表单看起来不好看，但我们将在下一章中进行样式设置：
- en: '![](img/316305a5-dd82-412d-99e8-991957c8b459.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/316305a5-dd82-412d-99e8-991957c8b459.png)'
- en: 'The list page is refreshed, and the new car can be seen in the list:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 列表页面已刷新，并且新车可以在列表中看到：
- en: '![](img/cfea3c1b-a3a4-42c1-b8d2-14f9c89889aa.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfea3c1b-a3a4-42c1-b8d2-14f9c89889aa.png)'
- en: The edit functionality
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑功能
- en: 'We will implement the edit functionality by changing the table to editable
    and adding the save button to each row. The save button will invoke the function
    that sends the `PUT` request to the backend for saving the changes to the database:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将表格更改为可编辑并向每行添加保存按钮来实现编辑功能。保存按钮将调用向后端发送`PUT`请求以将更改保存到数据库的函数：
- en: 'Add the cell renderer, which changes the table cells to editable. Open the
    `Carlist.js` file and create a new function called `renderEditable`. See the source
    code for the following function. The cell will be the `div` element and the `contentEditable`
    attribute makes it editable. `suppressContentEditableWarning` suppresses the warning
    that comes when the element with the child is marked to be editable. The function
    in `onBlur` is executed when the user leaves the table cell, and this is where
    we will update the state:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加单元格渲染器，将表格单元格更改为可编辑状态。打开`Carlist.js`文件并创建一个名为`renderEditable`的新函数。请参阅以下函数的源代码。单元格将是`div`元素，`contentEditable`属性使其可编辑。`suppressContentEditableWarning`抑制了当标记为可编辑的元素具有子元素时出现的警告。当用户离开表格单元格时，将执行`onBlur`中的函数，并在这里我们将更新状态：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define the table columns that are going to be editable. This is done using
    the `Cell` attribute of the column in React Table, which defines how the cell
    of the column will be rendered:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要编辑的表格列。这是使用React Table中列的`Cell`属性完成的，该属性定义了如何呈现列的单元格：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, if you open the app in your browser, you can see that the table cells
    are editable:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中打开应用程序，您会发现表格单元格是可编辑的：
- en: '![](img/a540c56d-dfc3-4c54-bc82-4e80f5f45246.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a540c56d-dfc3-4c54-bc82-4e80f5f45246.png)'
- en: 'To update car data, we have to send the `PUT` request to the `http://localhost:8080/api/cars/[carid]`
    URL. The link will be the same as with the delete functionality. The request contains
    the updated `car` object inside the body, and the `''Content-Type'': ''application/json''`
    header that we had in the add functionality. Create a new function, called `updateCar`,
    and the source code of the function is shown in the following code snippet. The
    function gets two arguments, the updated `car` object and the request URL. After
    the successful update, we will show a toast message to the user:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要更新汽车数据，我们必须向`http://localhost:8080/api/cars/[carid]` URL发送`PUT`请求。链接与删除功能相同。请求包含更新后的`car`对象在请求体内，并且我们在添加功能中使用的`''Content-Type'':
    ''application/json''`标头。创建一个名为`updateCar`的新函数，函数的源代码显示在以下代码片段中。该函数接收两个参数，更新后的`car`对象和请求URL。成功更新后，我们将向用户显示提示消息：'
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the Save button to the table rows. When the user presses the button, it
    calls the `updateCar` function and passes two arguments. The first argument is
    `row`, which is all values in the row as an `object (=car object)`. The second
    argument is `value`, which is set to be `_links.href.self`, which will be the
    URL of the car that we need in the request:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“保存”按钮添加到表格行。当用户按下按钮时，它调用`updateCar`函数并传递两个参数。第一个参数是`row`，它是行中所有值的`object（=car
    object）`。第二个参数是`value`，它设置为`_links.href.self`，这将是我们在请求中需要的汽车的URL：
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you now edit the values in the table and press the `Save` button, you should
    see the toast message and the updated values are saved to the database:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您编辑表格中的值并按下“保存”按钮，您应该会看到提示消息，并且更新的值将保存到数据库中：
- en: '![](img/f3fd10be-4fa4-4e48-a9bd-f23e909a5933.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3fd10be-4fa4-4e48-a9bd-f23e909a5933.png)'
- en: Other functionalities
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他功能
- en: One feature that we will also implement is a CSV export of the data. There is
    package, called `react-csv` ([https://github.com/abdennour/react-csv](https://github.com/abdennour/react-csv)),
    that can be used to export an array of data to the CSV file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将实现一个功能，即将数据导出为CSV。有一个名为`react-csv`的包（[https://github.com/abdennour/react-csv](https://github.com/abdennour/react-csv)），可用于将数据数组导出到CSV文件。
- en: 'If your app is started, stop the development server by pressing *Ctrl* + *C*
    in the terminal, and type the following command to install `react-csv`. After
    installation, restart the app:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序已启动，请通过在终端中按*Ctrl* + *C*停止开发服务器，并键入以下命令以安装`react-csv`。安装后，重新启动应用程序：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `react-csv` package contains two components—`CSVLink` and `CSVDownload`.
    We will use the first one in our app, so add the following import to the `Carlist.js`
    file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-csv`包含两个组件—`CSVLink`和`CSVDownload`。我们将在我们的应用程序中使用第一个，因此将以下导入添加到`Carlist.js`文件中：'
- en: '[PRE34]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `CSVLink` component takes the `data` prop, which contains the data array
    that will be exported to the CSV file. You can also define the data separator
    using the `separator` prop (the default separator is a comma). Add the `CSVLink`
    component inside the `return` statement in the `render()` method. The value of
    the `data` prop will now be `this.state.cars`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`CSVLink`组件接受`data`属性，其中包含要导出到CSV文件的数据数组。您还可以使用`separator`属性定义数据分隔符（默认分隔符为逗号）。在`render()`方法的`return`语句中添加`CSVLink`组件。`data`属性的值现在将是`this.state.cars`：'
- en: '[PRE35]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open the app in your browser and you should see the Export CSV link in our
    app. The styling is not nice, but we will handle that in the next chapter. If
    you press the link, you will get the data in the CSV file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开应用程序，您应该在我们的应用程序中看到导出CSV链接。样式不好看，但我们将在下一章中处理。如果您点击链接，您将在CSV文件中获得数据：
- en: '![](img/ad3ffe91-b9e5-4b5d-b7d3-6634a2ecce7c.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad3ffe91-b9e5-4b5d-b7d3-6634a2ecce7c.png)'
- en: Now all the functionalities have been implemented.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有功能都已实现。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we implemented all the functionalities for our app. We started
    with fetching the cars from the backend and showing these in React Table, which
    provides paging, sorting, and filtering features. Then we implemented the delete
    functionality and used the toast component to give feedback to the user. The add
    functionality was implemented using the React Skylight modal-form component. In
    the edit functionality, we utilized the React Table feature that makes tables
    editable. Finally, we implemented the ability to export data to a CSV file. In
    the next chapter, we will start to polish our user interface using the Material
    UI component library. In the next chapter, we are styling our frontend using React
    Material-UI component library.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们实现了应用程序的所有功能。我们从后端获取汽车数据，并在React Table中显示这些数据，该表提供分页、排序和过滤功能。然后我们实现了删除功能，并使用toast组件向用户提供反馈。添加功能是使用React
    Skylight模态表单组件实现的。在编辑功能中，我们利用了React Table的可编辑表格功能。最后，我们实现了将数据导出到CSV文件的功能。在下一章中，我们将开始使用Material
    UI组件库来完善我们的用户界面。在下一章中，我们将使用React Material-UI组件库来设计我们的前端界面。
- en: Questions
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How should you fetch and present data using the REST API with React?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用React的REST API获取和展示数据？
- en: How should you delete data using the REST API with React?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用React的REST API删除数据？
- en: How should you add data using the REST API with React?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用React的REST API添加数据？
- en: How should you update data using the REST API with React?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用React的REST API更新数据？
- en: How should you show toast messages with React?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用React显示toast消息？
- en: How should you export data to a CSV file with React?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用React将数据导出到CSV文件？
- en: Further reading
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很棒的资源可以学习React：
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
