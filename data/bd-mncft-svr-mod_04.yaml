- en: Chapter 4. Testing on the Spigot Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。在 Spigot 服务器上测试
- en: 'Bukkit plugins are designed to run on a CraftBukkit or Spigot server. At this
    point, you have a Spigot server and a simple plugin. After completing this chapter,
    you will have your new plugin installed on your server. In this chapter, you will
    make changes to your plugin''s code, and you will quickly see it being reflected
    on your server. This will help you develop the plugin much faster and allow you
    to accomplish more as you create new plugins. You will also learn how to troubleshoot
    the code in order to fix it when it is not working properly. This chapter will
    cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Bukkit 插件设计为在 CraftBukkit 或 Spigot 服务器上运行。到目前为止，您有一个 Spigot 服务器和一个简单的插件。完成本章后，您的新插件将安装到您的服务器上。在本章中，您将对插件代码进行修改，并且您将很快看到这些更改在您的服务器上得到反映。这将帮助您更快地开发插件，并允许您在创建新插件时完成更多任务。您还将学习如何调试代码，以便在它不正常工作时进行修复。本章将涵盖以下主题：
- en: Building a JAR file for your plugin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的插件构建 JAR 文件
- en: Installing the plugin on your server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的服务器上安装插件
- en: Testing the plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试插件
- en: Testing new versions of the plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试插件的最新版本
- en: Debugging the code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试代码
- en: Building a JAR file
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 JAR 文件
- en: In order to install a plugin on a server, we need a `.jar` file. A `JAR` file
    is a Java executable. It contains all the written code, which is bundled together
    in a ZIP file format. This code needs to be translated so that a computer can
    understand and run it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器上安装插件，我们需要一个 `.jar` 文件。`JAR` 文件是一个 Java 可执行文件。它包含所有编写的代码，这些代码打包在一个 ZIP
    文件格式中。这些代码需要被翻译，以便计算机能够理解和运行它。
- en: 'In NetBeans, there is a single button that we can click on to build a project.
    This will generate the `.jar` file that we need. Let''s add a block of code to
    our project to automatically copy the created `.jar` file to a more convenient
    location. In NetBeans, click on the **Files** tab to access the `build.xml file`
    for your project, as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NetBeans 中，有一个单独的按钮，我们可以点击它来构建项目。这将生成我们需要的 `.jar` 文件。让我们在我们的项目中添加一段代码，以便自动将创建的
    `.jar` 文件复制到更方便的位置。在 NetBeans 中，点击 **文件** 选项卡以访问项目的 `build.xml 文件`，如下截图所示：
- en: '![Building a JAR file](img/00025.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![构建 JAR 文件](img/00025.jpeg)'
- en: 'Open `build.xml` and add the following block of code after the `import` `file`
    line:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `build.xml` 并在 `import file` 行之后添加以下代码块：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This additional code will be executed after the JAR file is successfully built.
    It will copy the JAR file from the `dist` directory to the specified location.
    You can change `"../Plugin Jars"` to whichever directory you want. Here, `..`
    means to go up one folder. Therefore, if your NetBeans project is located at `C:\Users\Owner\Documents\NetBeansProjects\MyFirstBukkitPlugin`,
    then the `.jar` file will be copied to `C\Users\Owner\Documents\NetBeansProjects\Plugin
    Jars\MyFirstBukkitPlugin.jar`. Adding this code to each of your plugins will keep
    them organized in a central folder. After adding this new code, your file will
    look similar to the following piece of code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段额外的代码将在 JAR 文件成功构建后执行。它将从 `dist` 目录将 JAR 文件复制到指定的位置。您可以将 `"../Plugin Jars"`
    更改为您想要的任何目录。在这里，`..` 表示向上移动一个文件夹。因此，如果您的 NetBeans 项目位于 `C:\Users\Owner\Documents\NetBeansProjects\MyFirstBukkitPlugin`，那么
    `.jar` 文件将被复制到 `C\Users\Owner\Documents\NetBeansProjects\Plugin Jars\MyFirstBukkitPlugin.jar`。将此代码添加到每个插件中，将使它们在一个中央文件夹中保持组织。添加此新代码后，您的文件将类似于以下代码片段：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In the preceding code, `failonerror` is set to `true`. This means that an error
    will be presented when building in case the JAR file fails to be copied to the
    defined location. An error such as this may indicate that the location does not
    exist or you have insufficient privileges. You can set this value to `false` if
    you do not wish to see these warnings.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`failonerror` 被设置为 `true`。这意味着如果 JAR 文件未能复制到指定的位置，构建时将显示错误。这种错误可能表明位置不存在或您权限不足。如果您不想看到这些警告，可以将此值设置为
    `false`。
- en: 'Note that you will have many additional lines between `<!--` and `-->`. These
    are comments, and I encourage you to read them if you wish to learn more about
    what you can add to the `build.xml` file. Once you save this file, you are ready
    to build your project. You can do so by clicking on the hammer icon or using the
    *F11* shortcut key. The hammer icon, which is present on your toolbar, looks like
    the following image:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您将在`<!--`和`-->`之间有许多额外的行。这些都是注释，我鼓励您阅读它们，如果您想了解更多关于您可以在`build.xml`文件中添加的内容。一旦保存此文件，您就准备好构建项目了。您可以通过点击锤子图标或使用*F11*快捷键来完成。位于工具栏上的锤子图标看起来如下所示：
- en: '![Building a JAR file](img/00026.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![构建JAR文件](img/00026.jpeg)'
- en: If NetBeans fails to successfully build a jar, then you may have errors in your
    code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果NetBeans无法成功构建jar文件，那么您可能代码中存在错误。
- en: These errors are most likely shown by the red lines and light bulbs, as seen
    in [Chapter 3](part0026_split_000.html#OPEK1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 3. Creating Your First Bukkit Plugin"), *Creating Your First Bukkit Plugin*.
    You can usually find these errors by hovering over or clicking on the bulbs for
    help. If you are not able to do so, refer to the previous chapter to check whether
    your code is correct or not. If you still have doubts, refer to [Chapter 2](part0020_split_000.html#J2B81-b66e70deee6e4ed481db4b113e303f23
    "Chapter 2. Learning the Bukkit API"), *Learning the Bukkit API* for help.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误最有可能通过红色线条和灯泡显示出来，正如在[第3章](part0026_split_000.html#OPEK1-b66e70deee6e4ed481db4b113e303f23
    "第3章。创建您的第一个Bukkit插件")*创建您的第一个Bukkit插件*中看到的那样。您通常可以通过悬停或点击灯泡来获取帮助。如果您无法这样做，请参考上一章检查您的代码是否正确。如果您仍有疑问，请参考[第2章](part0020_split_000.html#J2B81-b66e70deee6e4ed481db4b113e303f23
    "第2章。学习Bukkit API")*学习Bukkit API*以获取帮助。
- en: Installing the plugin
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: 'The installation of the new plugin is quite simple. You need to create a copy
    of the `.jar` file from the directory that you chose earlier in your server''s
    `plugins` folder. Then, start your server as you normally would. You will see
    the output of the console informing you that the plugin is loaded, as shown in
    the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 新插件的安装相当简单。您需要从您之前在服务器`plugins`文件夹中选择的目录创建`.jar`文件的副本。然后，像往常一样启动您的服务器。您将看到控制台输出通知您插件已加载，如下面的截图所示：
- en: '![Installing the plugin](img/00027.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![安装插件](img/00027.jpeg)'
- en: If you do not see the `Hello World!` message when your server initially starts,
    don't worry. This behavior is normal because at this point, there will never be
    players online for the message to be broadcasted to. For now, we are only concerned
    with the messages that were highlighted in the previous screenshot.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务器启动时没有看到`Hello World!`消息，请不要担心。这种行为是正常的，因为在这个时候，永远不会在线有玩家来接收广播的消息。目前，我们只关心上一张截图中突出显示的消息。
- en: Every time you make changes to the code, you will have to build a new JAR file
    and install the new version. To install the newer version, you can simply copy
    and paste it into the server's `plugin` folder and overwrite the old file. This
    can be usually done without even shutting down the server. However, if the server
    is running, you will need to use the `reload` command to load the new version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您对代码进行更改时，您都必须构建一个新的JAR文件并安装新版本。要安装新版本，您只需将其复制并粘贴到服务器的`plugin`文件夹中，并覆盖旧文件。这通常可以在不关闭服务器的情况下完成。然而，如果服务器正在运行，您将需要使用`reload`命令来加载新版本。
- en: 'If you do not wish to manually copy the `plugin .jar` file and paste it in
    the server''s plugin folder every time you make changes in the code, then you
    can automate it in `build.xml`. In addition to copying the `jar` file and pasting
    it in the `Plugin Jars` directory, you can also copy and paste it directly in
    your server''s `plugins` directory. To do so, add a second `copy file` tag and
    set `todir` to your server''s `plugin` directory. The following code is an example
    of what this will look like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望每次在代码中做出更改时都手动复制`plugin .jar`文件并将其粘贴到服务器的插件文件夹中，那么您可以在`build.xml`中自动化它。除了复制`jar`文件并将其粘贴到`Plugin
    Jars`目录外，您还可以直接将其复制并粘贴到服务器的`plugins`目录中。为此，添加一个第二个`copy file`标签，并将`todir`设置为您的服务器`plugin`目录。以下代码是示例：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, you should do this for every plugin that you want to automatically install
    on your server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，您应该为每个您想在服务器上自动安装的插件都这样做。
- en: Testing your plugin
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的插件
- en: 'As you may recall, the purpose of the first plugin was to discover when a plugin
    is loaded. Issue a `reload` command by typing the following command into the console:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所忆，第一个插件的目的在于发现插件何时被加载。通过在控制台中输入以下命令来发出`reload`命令：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will see that Spigot will automatically disable and re-enable the plugin,
    as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到Spigot会自动禁用并重新启用插件，如下面的截图所示：
- en: '![Testing your plugin](img/00028.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![测试你的插件](img/00028.jpeg)'
- en: 'This time, you will see the **Hello World!** message once your plugin is enabled.
    If exactly one player is online, then it will say hello to that player. Let''s
    observe this by logging onto the server and issuing the reload command from in-game.
    Open your Minecraft client and connect to your server. From in-game, first issue
    the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，当您的插件被启用时，您将看到**Hello World!**消息。如果正好有一个玩家在线，那么它会向该玩家打招呼。让我们通过登录服务器并在游戏中发出重新加载命令来观察这一点。打开您的Minecraft客户端并连接到您的服务器。从游戏中，首先发出以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will be given a list of all the plugins that are installed. For now, there
    is only one plugin, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个已安装插件的列表。目前，只有一个插件，如下面的截图所示：
- en: '![Testing your plugin](img/00029.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![测试你的插件](img/00029.jpeg)'
- en: 'Now that there is one player on the server, we can test the plugin by reloading
    the server. Issue the following in-game command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务器上有一个玩家，我们可以通过重新加载服务器来测试插件。在游戏中发出以下命令：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that in both the game and console, you will see the **Hello Codisimus**
    message, as shown in the following screenshot, to indicate that the plugin is
    working as intended:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在游戏和控制台中，您都会看到**Hello Codisimus**消息，如下面的截图所示，以表明插件按预期工作：
- en: '![Testing your plugin](img/00030.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![测试你的插件](img/00030.jpeg)'
- en: Testing new versions of the plugin
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试插件的新版本
- en: The plugin works as intended, but there is always room for improvement. Let's
    continue working with this plugin by adding code to it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 插件按预期工作，但总有改进的空间。让我们通过向其中添加代码来继续对这个插件进行工作。
- en: 'A player may not see the **hello** message when it is white in color. We can
    change the color of the message using `ChatColor Enum`. This `Enum constants`
    has all the color codes that are supported in-game so that we can easily add them
    to messages. Let''s modify the plugin and install the newly modified version on
    the server. Choose your favorite color and place it before the message in the
    `broadcastToServer` method, as shown in the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当消息为白色时，玩家可能看不到**hello**消息。我们可以使用`ChatColor Enum`来更改消息的颜色。这个`Enum constants`包含了游戏中支持的所有颜色代码，这样我们就可以轻松地将它们添加到消息中。让我们修改插件并在服务器上安装新修改的版本。选择您喜欢的颜色并将其放在`broadcastToServer`方法中的消息之前，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Before you build a new JAR file, change the version in `plugin.yml` to `0.2`
    to indicate that this is an updated version. Each time you make a revision to
    the code, you create a new version. Changing the version number to reflect the
    code change will ensure that the new code will have a unique version number assigned
    to it. This is valuable if you need to know the code changes that are included
    within a specific edition of the project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建新的JAR文件之前，将`plugin.yml`中的版本更改为`0.2`以表示这是一个更新版本。每次对代码进行修订时，您都会创建一个新的版本。将版本号更改为反映代码更改将确保新代码将分配一个唯一的版本号。如果您需要知道特定版本的项目中包含的代码更改，这将非常有价值。
- en: 'Build a new JAR file using either the build icon or the *F11* key. Copy and
    paste the new version into the `plugins` folder if you did not set up `build.xml`
    to do so automatically. Issue the `reload` command again to view the results,
    as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构建图标或*F11*键构建一个新的JAR文件。如果您没有设置`build.xml`来自动执行此操作，请将新版本复制并粘贴到`plugins`文件夹中。再次发出`reload`命令以查看结果，如下面的截图所示：
- en: '![Testing new versions of the plugin](img/00031.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![测试插件的新版本](img/00031.jpeg)'
- en: The plugin has been reloaded and the message is now in color. Also, note how
    the version number changes when the plugin is disabled, and again when it is loaded
    and enabled. This makes it clear that the new version of the plugin was successfully
    installed on the server.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 插件已被重新加载，消息现在已着色。此外，注意当插件被禁用时版本号的变化，以及当它被加载并启用时的变化。这清楚地表明插件的新版本已成功安装在服务器上。
- en: 'Try to expand this plugin more on your own to test different code. The following
    list contains a few challenges for you:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试自己进一步扩展这个插件以测试不同的代码。以下列表包含了一些供您挑战的内容：
- en: Program the plugin to display the actual name of the world rather than the word
    **World**. A hint for this challenge is that you can get a list of all the worlds
    and then use the first world in the list. Note that this will broadcast `Hello
    world!`, unless you have renamed the world in `server.properties`.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将插件编程为显示世界的实际名称而不是单词**World**。这个挑战的一个提示是你可以获取所有世界的列表，然后使用列表中的第一个世界。请注意，这将广播`Hello
    world!`，除非你在`server.properties`中重命名了世界。
- en: Send a message to the player rather than broadcasting the message to the entire
    server.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向玩家发送消息，而不是向整个服务器广播消息。
- en: If more than one player is online, send a unique hello message to each player.
    A hint for this is that you can use a `for` loop.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在线玩家超过一个，向每个玩家发送独特的问候消息。这个提示是你可以使用一个`for`循环。
- en: If no players are online, send a unique hello message for each world.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有玩家在线，为每个世界发送独特的问候消息。
- en: Debugging the code
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试代码
- en: As you develop this plugin as well as other Bukkit plugins, there will be times
    when the code that you have written does not function as you would expect. This
    is caused by an error that lies somewhere in the code. These errors are referred
    to as **bugs**, and the process of finding these bugs and removing them is called
    **debugging**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开发这个插件以及其他Bukkit插件时，你编写的一些代码可能不会按预期工作。这是由于代码中某个地方存在的错误造成的。这些错误被称为**bug**，找到这些bug并移除它们的过程称为**调试**。
- en: Learning from your mistakes
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从错误中学习
- en: Do not be discouraged when your plugin does not work on the first try. Even
    experienced programmers encounter bugs throughout their code. Just because your
    software does not work perfectly does not mean that you are a poor developer.
    Being able to discover bugs and fix them is a huge part of software development.
    The more mistakes you make, the more you can learn from them. This is apparent
    in the following example.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的插件第一次尝试不工作时，不要气馁。即使是经验丰富的程序员也会在他们的代码中遇到bug。你的软件不完美并不意味着你是一个糟糕的开发者。能够发现bug并修复它们是软件开发的重要组成部分。你犯的错误越多，你能从中学到的就越多。以下是一个明显的例子。
- en: 'Some day, you may write a plugin that has a list of players in it. You may
    then write the following `for` loop to loop through each player and remove those
    who are in the `CREATIVE` mode:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有朝一日，你可能会编写一个包含玩家列表的插件。然后你可以编写以下`for`循环来遍历每个玩家并移除那些处于`CREATIVE`模式的玩家：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you test this code, an error will likely occur. The error that is thrown
    will be a `ConcurrentModificationException method`. The name of the exception
    may not mean much to you, but it will help you narrow down the issue.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你测试这段代码时，很可能会发生错误。抛出的错误将是一个`ConcurrentModificationException`方法。异常的名称可能对你来说意义不大，但它将帮助你缩小问题范围。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Developers need not know how to fix every error, but they should know where
    to find information about those errors so that they can figure out how to fix
    them. This is usually found in the software's documentation or public message
    boards. Most developers will make a note of the error message and search for information
    about it using Google. The top results will often be the official documentation
    or posts from other people who have encountered the same issue.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者不需要知道如何修复每个错误，但他们应该知道在哪里找到有关这些错误的信息，以便他们可以找出如何修复它们。这通常可以在软件的文档或公开的消息板上找到。大多数开发者会记下错误信息，并使用Google搜索相关信息。搜索结果通常会是官方文档或遇到相同问题的其他人的帖子。
- en: 'To know more about the error, you can search for `ConcurrentModificationException`;
    you may find the following statement from Oracle''s **Javadoc**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于错误的信息，你可以搜索`ConcurrentModificationException`；你可能会找到来自Oracle的**Javadoc**中的以下声明：
- en: '*"For example, it is not generally permissible for one thread to modify a Collection
    while another thread is iterating over it. "*'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"例如，通常不允许一个线程在另一个线程迭代它时修改一个集合。"*'
- en: The official javadoc can prove to be useful. But sometimes, they are still difficult
    to understand. Luckily, there exist websites such as [stackoverflow.com](http://stackoverflow.com),
    which allow programmers to help each other debug code. If you refer back to the
    search results, you will see links to Stack Overflow questions as well as posts
    from similar websites. These links can be very helpful because often there are
    people just like you who have run into the same error. If you look at the questions
    and the answers provided by others, you can learn why this error occurs and how
    to remedy it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的javadoc可能很有用。但有时，它们仍然难以理解。幸运的是，存在像[stackoverflow.com](http://stackoverflow.com)这样的网站，允许程序员互相帮助调试代码。如果你查看搜索结果，你会看到指向Stack
    Overflow问题和类似网站的帖子。这些链接非常有帮助，因为通常有像你一样的人遇到了相同的错误。如果你查看其他人的问题和提供的答案，你可以了解为什么会出现这个错误以及如何修复它。
- en: 'After reading through the questions related to the concurrent modification
    bug, you will eventually learn that in most cases, the exception occurs when you
    attempt to modify a list or collection while looping through it. You will also
    find that you must use an iterator in order to avoid this scenario. Usually, there
    are examples of how to fix the bug too. In this case, there are explanations of
    how to correctly use an iterator to remove objects from a list. If an explanation
    is not present, then you can research iterators within Oracle''s javadoc just
    as you would use Bukkit''s javadoc. We can fix the previous code by using an iterator,
    as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读了与并发修改错误相关的问题后，你最终会了解到，在大多数情况下，异常发生在你尝试在遍历列表或集合时对其进行修改时。你还会发现，为了避免这种情况，你必须使用迭代器。通常，会有如何修复错误的示例。在这种情况下，有关于如何正确使用迭代器从列表中删除对象的解释。如果不存在解释，那么你可以像使用Bukkit的javadoc一样，在Oracle的javadoc中研究迭代器。我们可以通过使用迭代器来修复之前的代码，如下所示：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After fixing the concurrent modification bug that was present in the code, you
    are now a more experienced programmer. You will know how to avoid this issue in
    the future and you have even learned how to use an iterator in the process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在修复代码中存在的并发修改错误后，你现在已经成为了一名更有经验的程序员。你将知道如何在未来避免这个问题，甚至在过程中学习了如何使用迭代器。
- en: When researching is not enough
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当研究不足以解决问题时
- en: Sometimes, looking through documentation and reading message boards is not enough
    to fix a bug. Errors such as **NullPointerException** are very common and can
    be caused by a variety of things. By researching, you will discover that **NullPointerException**
    occurs when you attempt to access a method or field of a **null** object. "Null"
    refers to the lack of a value. Therefore, a null object is an object that does
    not exist. However, knowing this does not always help you find exactly which object
    has a null value and why it is a null value in the first place. To aid in finding
    bugs, here are some steps to follow to pinpoint the troublesome code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，查阅文档和阅读论坛消息不足以修复错误。如**NullPointerException**这样的错误非常常见，可能由多种原因引起。通过研究，你会发现**NullPointerException**发生在你尝试访问一个**null**对象的某个方法或字段时。“null”指的是没有值。因此，null对象是一个不存在的对象。然而，知道这一点并不总是能帮助你找到确切的哪个对象具有null值以及它最初为什么是null值。为了帮助找到错误，以下是一些可以遵循的步骤来定位有问题的代码。
- en: Reading the stack trace
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读堆栈跟踪
- en: 'Most errors in Java are presented in the form of a **stack trace**. A stack
    trace informs you of the lines of code that were being executed before the error
    occurred. On a Spigot server, these stack traces will appear similar to the following
    screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的大多数错误都以**堆栈跟踪**的形式呈现。堆栈跟踪会告诉你错误发生之前正在执行的代码行。在Spigot服务器上，这些堆栈跟踪将类似于以下截图：
- en: '![Reading the stack trace](img/00032.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![阅读堆栈跟踪](img/00032.jpeg)'
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If your server is hosted somewhere else and you are viewing the console through
    an online browser tool, the stack trace may be printed in the reverse order.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的服务器托管在其他地方，而你通过在线浏览器工具查看控制台，堆栈跟踪可能会以相反的顺序打印出来。
- en: Whenever there is an exception on your server, Spigot logs the error along with
    the plugin that caused it. Sometimes, there are even details of which event was
    in progress when the error occurred. With the stack trace shown in the preceding
    screenshot, we can see that the error was caused by `MyFirstBukkitPlugin` `version
    0.3`. If the version does not match the version that you have in your **IDE**,
    you will want to update the server with the latest version of the plugin. This
    way, you can be certain that the code running on the server is the same code that
    you have in NetBeans. We can also see that the exception was thrown when the plugin
    was being enabled. On the next line, we see the specific error, which was **NullPointerException**.
    On the line following that, we are told the exact line of code that caused the
    error. It happened within the `onEnable` method of the `MyFirstBukkitPlugin` class.
    In parenthesis, it states **MyFirstBukkitPlugin.java:27**. This tells us that
    the error was on line 27 of the `MyFirstBukkitPlugin` class, which of course is
    in the `onEnable` method. The first three lines of the stack trace are the most
    useful to us. You rarely have to look at the further lines for explanation. Sometimes,
    you will not see any of the class names in the code at the start of the stack
    trace. However, if you look further, you will probably see a familiar class and
    method name.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时你的服务器出现异常，Spigot都会记录错误以及导致错误的插件。有时，甚至会有错误发生时正在进行的特定事件的详细信息。通过前一个屏幕截图中的堆栈跟踪，我们可以看到错误是由`MyFirstBukkitPlugin`
    `版本0.3`引起的。如果版本与你在**IDE**中拥有的版本不匹配，你将想要用插件的最新版本更新服务器。这样，你可以确保服务器上运行的代码与你在NetBeans中拥有的代码相同。我们还可以看到异常是在插件被启用时抛出的。在下一行，我们看到具体的错误，即**NullPointerException**。在随后的那一行，我们被告知导致错误的精确代码行。它发生在`MyFirstBukkitPlugin`类的`onEnable`方法中。括号中写着**MyFirstBukkitPlugin.java:27**。这告诉我们错误发生在`MyFirstBukkitPlugin`类的第27行，当然是在`onEnable`方法中。堆栈跟踪的前三行对我们最有用。你很少需要查看更后面的行来解释。有时，你甚至看不到堆栈跟踪开头代码中的任何类名。然而，如果你继续查看，你可能会看到熟悉的类和方法名。
- en: 'Now that you have the class name and line number, you can look back at your
    code to see if you notice why you are getting **NullPointerException**. Within
    NetBeans, I can see that line 27 is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了类名和行号，你可以回过头来看看你的代码，看看你是否注意到为什么你会得到**NullPointerException**。在NetBeans中，我可以看到第27行的代码如下：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Breaking down the code
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拆分代码
- en: 'The troublesome line is a very long line of code. So, it is not apparent which
    object has a null value. If you find yourself in a similar situation, I recommend
    that you break down the code into multiple lines. This will give us the following
    code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 麻烦的行是一行非常长的代码。因此，无法明显看出哪个对象具有空值。如果你发现自己处于类似的情况，我建议你将代码拆分成多行。这将给我们以下代码：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After installing and running this new code, you should see the same error in
    the console, but it will point you to a different line of code. With this new
    code, you will now see that the exception is thrown on line 30, which is the last
    line of the preceding code segment.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装并运行这段新代码后，你应该在控制台中看到相同的错误，但它会指向不同的代码行。使用这段新代码，你现在会看到异常是在第30行抛出的，这是前一段代码的最后一行。
- en: Adding debug messages
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加调试信息
- en: There is still a lot going on in that single line of code. Therefore, you may
    not be sure about which variable is null. Is it `player`, `playerCount`, or `worldCount`?
    If you need some additional help, you can add what we call debug messages to your
    code. These messages can print information to the console log to indicate what
    is happening throughout the code. There are a few ways to log messages in a Bukkit
    plugin. The easiest way is to use the `System.out.println(String string)` method.
    However, it is a better practice to utilize the logger that the Spigot server
    assigns to your plugin. The logger can be retrieved with the `getLogger` method.
    This method is in the `JavaPlugin` class. You can access it from within the `onEnable`
    method. These debug messages will only be temporary. Therefore, you can use whichever
    method you prefer. But I do suggest that you try using the logger as it also prints
    out plugin information. In our example, we will use the logger.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在那单行代码中仍然有很多事情在进行。因此，你可能不确定哪个变量是空的。是`player`、`playerCount`还是`worldCount`？如果你需要一些额外的帮助，你可以在代码中添加我们所说的调试信息。这些信息可以将信息打印到控制台日志中，以指示代码中的发生情况。在Bukkit插件中记录信息有几种方法。最简单的方法是使用`System.out.println(String
    string)`方法。然而，更好的做法是利用Spigot服务器分配给你的插件的记录器。记录器可以通过`getLogger`方法获取。这个方法在`JavaPlugin`类中。你可以在`onEnable`方法中访问它。这些调试信息将是临时的。因此，你可以使用你喜欢的任何方法。但我确实建议你尝试使用记录器，因为它也会打印出插件信息。在我们的例子中，我们将使用记录器。
- en: 'Now that we know how to print messages, let''s log the values of each variable,
    as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何打印消息，让我们记录每个变量的值，如下所示：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that we have added the debug messages before the faulty line of code. Once
    an exception is thrown, the computer stops executing the code. Therefore, if the
    debug messages were after the `sendMessage` call, the messages would never be
    printed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在有问题的代码行之前添加了调试信息。一旦抛出异常，计算机就会停止执行代码。因此，如果调试信息在`sendMessage`调用之后，这些信息将永远不会被打印。
- en: '![Adding debug messages](img/00033.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![添加调试信息](img/00033.jpeg)'
- en: 'Once you install and run the updated code, you will see the debug messages
    within the console:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装并运行更新后的代码，你将在控制台中看到调试信息：
- en: Now, we can clearly see that `player` has a `null` value.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以清楚地看到`player`有一个`null`值。
- en: Referring back to the Javadoc
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾Javadoc
- en: If you look back at the line of code where `player` is set and then read the
    Bukkit javadoc, you will learn that player has a value of null because the requested
    player, Codisimus, is not online. If the player cannot be found, `null` is returned.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下设置`player`的代码行，然后阅读Bukkit的javadoc，你会了解到`player`的值为null，因为请求的玩家Codisimus不在线。如果玩家找不到，则返回`null`。
- en: '![Referring back to the Javadoc](img/00034.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![回顾Javadoc](img/00034.jpeg)'
- en: As you can see, the bug in the code may not be exactly at the line given in
    the stack trace. In this scenario, the null value is set a few lines earlier.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，代码中的bug可能并不正好在堆栈跟踪给出的行。在这种情况下，空值是在几行之前设置的。
- en: Fixing the bug only after you understand it
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在理解了问题之后再修复bug
- en: 'Now that the bug is exposed, we can fix it. In the case of **NullPointerException**,
    there are two solutions. Do not simply fix the bug a certain way because you can.
    You should strive to understand why the bug is present and how the code should
    function instead. Maybe, the variable player is never supposed to have a null
    value. If I know that the player Codisimus will always be online, then perhaps,
    I misspelled the username. However, we know that Codisimus will not always be
    online. So, within this plugin, the player variable will sometimes have a null
    value. In that scenario, we do not want to try to send a message to the player,
    since it will throw **NullPointerException**. To remedy this, we can put the line
    of code within an `if` statement, which developers typically refer to as a null
    check:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在bug已经被揭露，我们可以修复它。在**NullPointerException**的情况下，有两种解决方案。不要仅仅因为你可以而简单地以某种方式修复bug。你应该努力理解bug存在的原因以及代码应该如何运行。也许，变量player永远不应该有null值。如果我知道玩家Codisimus总是在线，那么也许，我拼写用户名时犯了错。然而，我们知道Codisimus并不总是在线。所以，在这个插件中，玩家变量有时会有null值。在这种情况下，我们不想尝试向玩家发送消息，因为这会抛出**NullPointerException**。为了解决这个问题，我们可以在`if`语句中放置代码行，开发者通常称之为null检查：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that I have changed the debug messages to comments by prepending them with
    // so that those messages are not printed to the log. Alternatively, I can remove
    these lines completely if I feel that I will never need them again.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我已经通过在前面加上 // 将调试信息改为注释，这样这些信息就不会打印到日志中。或者，如果我觉得我永远不会再需要这些行，我也可以完全删除这些行。
- en: Now that we have added the null check, the message will only be sent if the
    player is not null.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了空值检查，只有当玩家不为空时，消息才会被发送。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You now know how to create a JAR file from a NetBeans project. For the plugins
    that you will create in the future, you can follow this simple process in order
    to install and run your new plugin, whether it is for testing or for a finished
    product. You also know how to update a plugin that is already installed on your
    server and fix the bugs that are exposed in your code. In the following chapters,
    we will create increasingly complex plugins. The first step to this is creating
    commands for plugins that players will be able to execute in game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何从 NetBeans 项目创建 JAR 文件。对于你未来将创建的插件，你可以遵循这个简单的流程来安装和运行你的新插件，无论是用于测试还是用于成品。你也知道如何更新已安装在服务器上的插件，并修复代码中暴露的bug。在接下来的章节中，我们将创建越来越复杂的插件。这一步骤的第一步是为玩家在游戏中执行命令的插件创建命令。
