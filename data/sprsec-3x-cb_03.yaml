- en: Chapter 3. Spring Security with JSF
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。JSF的Spring Security
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Integrating JSF with Spring Security
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将JSF与Spring Security集成
- en: JSF with form-based Spring Security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSF与基于表单的Spring Security
- en: JSF and form-based authentication using Spring Security to display logged-in
    user
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSF和基于表单的Spring Security进行身份验证以显示已登录用户
- en: Using JSF with digest/hashing-based Spring Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSF与基于摘要/哈希的Spring Security
- en: Logging out with JSF using Spring Security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security在JSF中注销
- en: Authenticating database with Spring Security and JSF
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security和JSF进行身份验证
- en: ApacheDS authentication with JSF and Spring Security
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSF和Spring Security进行ApacheDS身份验证
- en: Authentication error message with JSF and Spring Security
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSF和Spring Security的身份验证错误消息
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: There are many applications developed in Apache Faces/JSF. It's not an action
    oriented framework like Struts 2, but purely meant for the view layer. To implement
    Spring Security with JSF, we need to figure out some work around. Let's see some
    recipes with respect to JSF and Spring Security.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在Apache Faces/JSF中开发的应用程序。它不像Struts 2那样是一个面向动作的框架，而纯粹是为了视图层。要在JSF中实现Spring
    Security，我们需要找出一些解决方法。让我们看看关于JSF和Spring Security的一些配方。
- en: I have used the latest stable version of Spring Security and Spring-core. If
    you want to do an update with your libraries, you can read the following section.
    For Maven users, it's all about updating the dependencies and for the normal Eclipse
    users, it's about adding the `.jar` files to the `lib` folder.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了最新的稳定版本的Spring Security和Spring-core。如果您想更新您的库，可以阅读以下部分。对于Maven用户，这一切都是关于更新依赖项，对于普通的Eclipse用户，这是将`.jar`文件添加到`lib`文件夹。
- en: '**Setting up JSF application on Eclipse**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Eclipse上设置JSF应用程序**'
- en: Use Eclipse Java EE developer tools and set up a dynamic web project.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Eclipse Java EE开发人员工具并设置一个动态Web项目。
- en: 'Give project name: `JSf_Spring_Security_Chapter_3_Recipe1`.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目命名：`JSf_Spring_Security_Chapter_3_Recipe1`。
- en: Select a dynamic web module Version 2.5.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择动态Web模块版本2.5。
- en: 'Configurations: JavaServer Faces v1.2 project.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置：JavaServer Faces v1.2项目。
- en: In the next **New Dynamic Web Project** window, click on **Download library**.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个**新动态Web项目**窗口中，单击**下载库**。
- en: Select the Apache MyFaces lib.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Apache MyFaces库。
- en: '**Spring Security MAJOR/MINOR/PATCH versions**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Security MAJOR/MINOR/PATCH版本**'
- en: When I was setting up security for my applications, I faced a lot of errors
    with the schema versioning.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我为我的应用程序设置安全性时，我遇到了很多与模式版本相关的错误。
- en: Spring source gives a good description about which version to download. It suggests
    that the PATCH version is the safest and will not affect the existing code, since
    it will use backward compatibility. The MINOR version comes with the design changes
    and MAJOR version comes with major API changes. For the JSF recipe I have been
    using 3.1.4 security version and I have downloaded Spring-3.1.4 related JARs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Spring源提供了关于要下载哪个版本的很好描述。它建议使用PATCH版本是最安全的，不会影响现有代码，因为它将使用向后兼容性。MINOR版本带有设计更改，MAJOR版本带有主要API更改。对于JSF配方，我一直在使用3.1.4安全版本，并且已经下载了与Spring-3.1.4相关的JAR文件。
- en: You can download spring-security-3.1.4.RELEASE-dist, which comes with all the
    latest JARs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载spring-security-3.1.4.RELEASE-dist，其中包含所有最新的JAR文件。
- en: 'JARs:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JAR文件：
- en: '`spring-security-config` does the namespace parsing and will read the `spring-security.xml`
    file'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-config`执行命名空间解析，并将读取`spring-security.xml`文件'
- en: Spring Security web interacts with the web application filters
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security web与Web应用程序过滤器进行交互
- en: Spring Security core
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security核心
- en: Save these JARs in your `WEB-INF/lib` folder of your web application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些JAR文件保存在您的Web应用程序的`WEB-INF/lib`文件夹中。
- en: Integrating JSF with Spring Security
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将JSF与Spring Security集成
- en: Let's create a simple Apache MyFaces application in Eclipse. Also let's integrate
    Spring Security to JSF, and then demonstrate basic authentication.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Eclipse中创建一个简单的Apache MyFaces应用程序。还让我们将Spring Security集成到JSF中，然后演示基本身份验证。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need Eclipse Indigo or a higher version
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将需要Eclipse Indigo或更高版本
- en: Create a dynamic web project JSF
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态Web项目JSF
- en: 'In your Eclipse IDE, create a dynamic web project: `JSf_Spring_Security_Chapter_3_Recipe1`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的Eclipse IDE中，创建一个动态Web项目：`JSf_Spring_Security_Chapter_3_Recipe1`
- en: 'Create a source folder: `src/main/java`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个源文件夹：`src/main/java`
- en: 'Create a package: `com.packt.jsf.bean`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包：`com.packt.jsf.bean`
- en: 'Create a Managed Bean: `User.java`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个托管Bean：`User.java`
- en: Use Tomcat server to deploy the application
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tomcat服务器部署应用程序
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to implement a basic authentication mechanism with
    JSF and Spring Security:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来实现JSF和Spring Security的基本身份验证机制：
- en: '`User.java` is the Managed Bean of the application. It has two methods: `sayHello()`
    and `reset()`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`User.java`是应用程序的托管Bean。它有两个方法：`sayHello()`和`reset()`：'
- en: '`User.java class`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`User.java类`：'
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s create a JSP file, which is based on the `ApacheMyFaces` tags. It expects
    a mandatory `<f:view>` tag. It''s a convention to create a JSP file with the same
    name as its bean. It has a form which accepts the name and says **"hello"** on
    clicking the button:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个基于`ApacheMyFaces`标签的JSP文件。它期望一个强制的`<f:view>`标签。按照惯例，创建一个与其bean名称相同的JSP文件。它有一个表单，接受名称，并在单击按钮时显示**“你好”**：
- en: '`User.jsp`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`User.jsp`：'
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `faces-config.xml` file with the Managed Bean:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用托管Bean更新`faces-config.xml`文件：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `Spring-security.xml` file remains the same but I have used the latest
    jar- 3.1.4 security jars:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Spring-security.xml`文件保持不变，但我使用了最新的jar- 3.1.4安全jar：'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `web.xml` file should be updated with Spring filters and listeners. It
    also has configurations of MyFaces:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`web.xml`文件应更新Spring过滤器和监听器。它还具有MyFaces的配置：'
- en: '`Spring-security.xml`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring-security.xml`：'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the user tries to access the secured `user.jsp` page, Spring Security intercepts
    the URL and redirects the user to the login page. On successful authentication,
    the user is redirected to the success `url` mentioned in the `spring-security.xml`
    file. The following screenshots show the workflow of implementing basic authentication
    with JSF and Spring Security.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试访问受保护的`user.jsp`页面时，Spring Security会拦截URL并将用户重定向到登录页面。成功身份验证后，用户将被重定向到`spring-security.xml`文件中提到的成功`url`。以下屏幕截图显示了使用JSF和Spring
    Security实现基本身份验证的工作流程。
- en: 'Now access the following URL: `http://localhost:8086/JSf_Spring_Security_Chapter_3_Recipe1/faces/User.jsp`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：`http://localhost:8086/JSf_Spring_Security_Chapter_3_Recipe1/faces/User.jsp`。
- en: 'You should see a basic authentication dialog box asking you to log in as shown
    in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个基本的身份验证对话框，要求您如下登录：
- en: '![How it works...](img/7525OS_03_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_01.jpg)'
- en: 'The following screenshot is the secured page of JSF, which can be accessed
    after successful authentication:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是JSF的安全页面，可以在成功身份验证后访问：
- en: '![How it works...](img/7525OS_03_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_02.jpg)'
- en: See also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *JSF with form-based Spring Security* recipe
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于表单的Spring Security的JSF
- en: The *JSF and form-based authentication using Spring Security to display logged-in
    user* recipe
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security显示已登录用户的*JSF和基于表单的身份验证*食谱
- en: The *Using JSF with digest/hashing-based Spring Security* recipe
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于摘要/哈希的Spring Security的*使用JSF*食谱
- en: The *Logging out with JSF using Spring Security* recipe
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security注销JSF的*Logging out with JSF using Spring Security*食谱
- en: The *Authenticating database with Spring Security and JSF* recipe
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security和JSF进行数据库身份验证的*身份验证数据库*食谱
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSF和Spring Security进行ApacheDS身份验证的*ApacheDS身份验证*食谱
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSF和Spring Security的*身份验证错误消息*食谱
- en: JSF with form-based Spring Security
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于表单的Spring Security的JSF
- en: In this section we will implement the form-based authentication with JSF and
    Spring Security. Integrating Apache MyFaces with Spring Security is not as simple
    as Struts 2 integration.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用JSF和Spring Security实现基于表单的身份验证。将Apache MyFaces与Spring Security集成并不像Struts
    2集成那样简单。
- en: It needs a work around. The `/j_spring_security` method can't be understood
    by ApacheMyfaces. The work around is to create a custom login method in our Managed
    Bean class. We will use the JSF external context class to pass the authentication
    request to the Spring Security Framework.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要一个解决方法。ApacheMyfaces无法理解`/j_spring_security`方法。解决方法是在我们的Managed Bean类中创建一个自定义登录方法。我们将使用JSF外部上下文类将认证请求传递给Spring
    Security框架。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in you Eclipse IDE: `JSF_Spring_Security_Chapter_3_Recipe2`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse IDE中创建一个新项目：`JSF_Spring_Security_Chapter_3_Recipe2`
- en: Do the configurations as shown in the following screenshot
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照以下屏幕截图中显示的配置进行配置
- en: 'Create a package: `com.packt.jsf.beans`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包：`com.packt.jsf.beans`
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to integrate JSF with Spring Security to implement
    form-based authentication:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将JSF与Spring Security集成以实现基于表单的身份验证：
- en: Create a web project in Eclipse:![How to do it...](img/7525OS_03_03.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个Web项目：![如何做...](img/7525OS_03_03.jpg)
- en: 'Create a Credential Manager Bean:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Credential Manager Bean：
- en: This bean has all the properties of a form-based authentication bean and customized
    login method ();
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此bean具有基于表单的身份验证bean的所有属性和自定义登录方法（）;
- en: The `j_username` and `j_password` values will be set and the user is displayed
    in the secured page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将设置`j_username`和`j_password`值，并在安全页面中显示用户。
- en: 'The `doSpringSecurityLogin()` bean: Just like we access `ServletContext` and
    we bind it with the request dispatcher, we can use `ExternalContext` with request
    dispatcher to execute the `/j_spring_security_check`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`doSpringSecurityLogin()` bean：就像我们访问`ServletContext`并将其与请求分派器绑定一样，我们可以使用`ExternalContext`和请求分派器来执行`/j_spring_security_check`。'
- en: The `phaseListener` implementation is meant to capture the authentication exceptions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`phaseListener`实现旨在捕获身份验证异常。'
- en: '`CredentialManager.java`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`CredentialManager.java`：'
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s update the `Spring-security.xml` file. The `login-processing`-`url`
    is mapped to `j_security_check`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更新`Spring-security.xml`文件。`login-processing`-`url`映射到`j_security_check`：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the Managed Bean into the `faces-config.xml` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Managed Bean添加到`faces-config.xml`文件中：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now comes the `login.jsp` file for Apache MyFaces.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是Apache MyFaces的`login.jsp`文件。
- en: 'The `login.jsp` file should have the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`login.jsp`文件应该包含以下内容：'
- en: '`prependID=false`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`prependID=false`'
- en: It should submit to the custom login method defined in the `ManagedBean`
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该提交到`ManagedBean`中定义的自定义登录方法
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Access the following URL: `localhost:8086/JSF_Spring_Security_Chapter_3_Recipe2/faces/Supplier.jsp`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下URL：`localhost:8086/JSF_Spring_Security_Chapter_3_Recipe2/faces/Supplier.jsp`。
- en: When the user accesses the URL, they will be redirected to the login page. The
    user then enters their credentials and clicks on **Submit**. The `ExternalContext`
    object is instantiated using the `FacesContext` object using the `PhaseListener`
    implementation. The `context` object is passed to the request object with `'j_spring_security_check'`
    URL. The Spring Security will do the authentication and authorization. On authentication
    failure, an exception is thrown.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户访问URL时，他们将被重定向到登录页面。然后用户输入其凭据并单击**提交**。使用`FacesContext`对象使用`PhaseListener`实现来实例化`ExternalContext`对象。将`context`对象传递给请求对象，其中包含`'j_spring_security_check'`
    URL。Spring Security将进行身份验证和授权。身份验证失败时，将抛出异常。
- en: See also
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *JSF and form-based authentication using Spring Security to display logged-in
    user* recipe
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security显示已登录用户的*JSF和基于表单的身份验证*食谱
- en: The *Using JSF with digest/hashing-based Spring Security* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于摘要/哈希的Spring Security的*使用JSF*食谱
- en: The *Logging out with JSF using Spring Security* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security注销JSF的*Logging out with JSF using Spring Security*食谱
- en: The *Authenticating database with Spring Security and JSF* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security进行数据库身份验证的*身份验证数据库*食谱
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSF和Spring Security进行ApacheDS身份验证的*ApacheDS身份验证*食谱
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行身份验证错误消息*配方'
- en: JSF and form-based authentication using Spring Security to display logged-in
    user
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Security和JSF进行基于表单的认证以显示已登录用户
- en: In the previous recipe, we demonstrated the implementation of form-based authentication
    using Spring Security and JSF `phaseListener`. In this section we will display
    the logged in user.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们演示了使用Spring Security和JSF `phaseListener`实现基于表单的认证。在本节中，我们将显示已登录的用户。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You have to perform some minor changes in the `Supplier.jsp` file.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在`Supplier.jsp`文件中进行一些小的更改。
- en: How do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to display the logged in user details on the browser:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤在浏览器上显示已登录用户的详细信息：
- en: To display the logged in user, access the managed bean object in your secured
    page.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示已登录的用户，请访问受保护页面中的托管bean对象。
- en: 'In the `Supplier.jsp` file, edit the following:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Supplier.jsp`文件中，编辑以下内容：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the user is redirected to the login page the faces context object submits
    the user information to Spring Security. On success the user POJO's getters and
    setters sets the user information, which is used to display the user information
    on the JSP page.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户被重定向到登录页面时，faces上下文对象将用户信息提交给Spring Security。成功后，用户POJO的getter和setter设置用户信息，用于在JSP页面上显示用户信息。
- en: 'The following screenshot shows the workflow for displaying the user information
    in the browser using JSF and Spring Security with form-based authentication:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用JSF和Spring Security进行基于表单的认证，在浏览器中显示用户信息的工作流程：
- en: '![How it works...](img/7525OS_03_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_04.jpg)'
- en: 'On successful authentication, the user will be directed to the following page:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 成功认证后，用户将被引导到以下页面：
- en: '![How it works...](img/7525OS_03_05.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_05.jpg)'
- en: See also
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using JSF with digest/hashing-based Spring Security* recipe
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用基于摘要/哈希的Spring Security的JSF*配方'
- en: The *Logging out with JSF using Spring Security* recipe
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行注销*配方'
- en: The *Authenticating database with Spring Security and JSF* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Security和JSF进行身份验证数据库*配方'
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行ApacheDS认证*配方'
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行身份验证错误消息*配方'
- en: Using JSF with digest/hashing-based Spring Security
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于摘要/哈希的Spring Security进行JSF
- en: In this section we will implement digest authentication with JSF and Spring
    Security. The user's password is hashed using one of the encryption algorithms
    and configured in the `.xml` file. The algorithm used to hash the password is
    also mentioned in the configuration file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用JSF和Spring Security实现摘要认证。用户的密码使用其中一种加密算法进行哈希处理，并在`.xml`文件中进行配置。用于哈希密码的算法也在配置文件中提到。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Spring digest authentication works fine with JSF as well. We need to hash the
    password using `jacksum.jar`. Provide the hashed password in the configuration
    file. Also mention the algorithm used for hashing in the configuration file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Spring摘要认证在JSF中也可以正常工作。我们需要使用`jacksum.jar`对密码进行哈希处理。在配置文件中提供哈希密码。还在配置文件中提到用于哈希处理的算法。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps for implementing the digest authentication mechanism
    with JSF and Spring Security:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来实现JSF和Spring Security的摘要认证机制：
- en: 'Let''s encrypt the password: `packt123456`.'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加密密码：`packt123456`。
- en: We need to use an external jar, Jacksum, which means Java checksum.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用一个外部的jar包，Jacksum，这意味着Java校验和。
- en: It supports both MD5 and SHA1 encryption.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它支持MD5和SHA1加密。
- en: Download the `jacksum.zip` file and extract the ZIP folder.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`jacksum.zip`文件并解压缩ZIP文件夹。
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![How to do it...](img/7525OS_03_06.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/7525OS_03_06.jpg)'
- en: Let's create a new project to demonstrate this and we will use basic authentication.
    Create a dynamic web project in Eclipse and name it `JSF_Spring_Security_DIGEST_Recipe3`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新项目来演示这一点，我们将使用基本认证。在Eclipse中创建一个动态Web项目，并将其命名为`JSF_Spring_Security_DIGEST_Recipe3`。
- en: 'The `web.xml`, `face-config.xml`, and JSP settings remain the same as the `JSF_Spring_Security_Chapter3_Recipe1`.
    We need to update the `Spring-security.xml` file to authenticate using the SHA
    encryption and decryption:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`web.xml`，`face-config.xml`和JSP设置与`JSF_Spring_Security_Chapter3_Recipe1`相同。我们需要更新`Spring-security.xml`文件以使用SHA加密和解密进行认证：'
- en: '`Spring-security.xml`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring-security.xml`：'
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you run the application, you will be prompted with a dialog box.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，将提示您输入对话框。
- en: On entering the username and password, the Spring Framework will decrypt the
    password and will compare it with the user's entered details. When they match,
    it flags an authentication success message, which will make the context object
    redirect the user to the success URL.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输入用户名和密码后，Spring框架将解密密码并将其与用户输入的详细信息进行比较。当它们匹配时，它会标记一个认证成功的消息，这将使上下文对象将用户重定向到成功的URL。
- en: The following screenshots show the workflow of digest authentication with JSF
    and Spring.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了JSF和Spring进行摘要认证的工作流程。
- en: It is a basic form but the authentication mechanism is digest.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的表单，但认证机制是摘要的。
- en: 'Spring has authenticated the user by decrypting the password:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Spring通过解密密码对用户进行了身份验证：
- en: '![How it works...](img/7525OS_03_07.jpg)![How it works...](img/7525OS_03_08.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_07.jpg)![它是如何工作的...](img/7525OS_03_08.jpg)'
- en: See also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Logging out with JSF using Spring Security* recipe
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行注销*配方'
- en: The *Authenticating database with Spring Security and JSF* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Security和JSF进行身份验证数据库*配方'
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行ApacheDS认证*配方'
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行身份验证错误消息*配方'
- en: Logging out with JSF using Spring Security
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSF和Spring Security进行注销
- en: In this section, we will implement the logging out scenario using Spring Security
    in a JSF application.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Spring Security在JSF应用程序中实现注销场景。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Implement the `PhaseListener` class
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现`PhaseListener`类
- en: Add a `commandButton` on the JSF page
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JSF页面上添加一个`commandButton`
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps for implementing Spring Security logout in a JSF
    application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来实现JSF应用程序中的Spring Security注销：
- en: Create a **New Dynamic Web Project** in your Eclipse:![How to do it...](img/7525OS_03_09.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个**新的动态Web项目**：![如何做...](img/7525OS_03_09.jpg)
- en: 'We will create a `CredentialManager` bean again. It will have another custom
    logout method. `Login.jsp` remains the same as the previous example. Do not forget
    to copy it into the new project. We will use form-based authentication here:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将再次创建一个`CredentialManager` bean。它将有另一个自定义的注销方法。 `Login.jsp`与上一个示例相同。不要忘记将其复制到新项目中。我们将在这里使用基于表单的身份验证：
- en: '[PRE12]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s provide a **Logout** button in our secured page:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在我们的安全页面上提供一个**注销**按钮：
- en: '`Supplier.jsp`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Supplier.jsp`：'
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Update the `Spring-security.xml` file:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Spring-security.xml`文件：
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `CredentialManager` class implements the `phaseListener interface`. The
    `doSpringSecurityLogout` method handles the Spring logout by creating a context
    object using `ExternalContext`. The context then submits the logout request that
    is `"/j_spring_security_logout"` to the Spring Security Framework, which logs
    out the user.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`CredentialManager`类实现了`phaseListener`接口。`doSpringSecurityLogout`方法通过使用`ExternalContext`创建一个上下文对象来处理Spring注销。然后，上下文提交注销请求，即`"/j_spring_security_logout"`到Spring
    Security框架，该框架注销用户。'
- en: '![How it works...](img/7525OS_03_10.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_10.jpg)'
- en: On clicking on logout, the user is redirected to the login page.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 单击注销后，用户将被重定向到登录页面。
- en: See also
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Authenticating database with Spring Security and JSF* recipe
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Security和JSF进行数据库认证*食谱'
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行ApacheDS身份验证*食谱'
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行身份验证错误消息*食谱'
- en: Authenticating database with Spring Security and JSF
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Security和JSF进行数据库认证
- en: In this section, we will use the database to authenticate users with Spring
    Security in a JSF application. We have referred to the logout example and have
    used the database for authentication.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用数据库来验证JSF应用程序中的用户身份验证。我们已经参考了注销示例，并且已经使用数据库进行了身份验证。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a dynamic web project in Eclipse: `JSF_Spring_DBAuthentication_Recipe6`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个动态Web项目：`JSF_Spring_DBAuthentication_Recipe6`
- en: All the files and folders remain the same as the logout application
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有文件和文件夹与注销应用程序相同
- en: Update the `security.xml` file and the `web.xml` file
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`security.xml`文件和`web.xml`文件
- en: 'Add the following JARs into the `lib` folder or update your POM file if you
    are using Maven:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将以下JAR文件添加到`lib`文件夹中，或者如果您使用Maven，则更新您的POM文件：
- en: spring-jdbc-3.1.4RELEASE
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: spring-jdbc-3.1.4RELEASE
- en: mysql-connector-java-5.1.17-bin
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mysql-connector-java-5.1.17-bin
- en: commons-dbcp
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: commons-dbcp
- en: commons-pool-1.5.4
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: commons-pool-1.5.4
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will help us to authenticate the user information by retrieving
    data from the database:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们通过从数据库中检索数据来验证用户信息：
- en: 'Update the `Spring-security.xml` file to read the database configuration:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Spring-security.xml`文件以读取数据库配置：
- en: '`applicationContext-security.xml`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationContext-security.xml`：'
- en: '[PRE15]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The data source reference is given in the `Sping-security.xml` file. When the
    user clicks on **Login**, the Spring Security filter will invoke the database
    authentication related classes, which will read the `db-beans.xml` file to establish
    the connection. The `<jdbc-user-service>` tag implements the database authentication
    by executing the query and retrieving the user information from the database based
    on the parameter submitted by the user in the browser.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源引用在`Sping-security.xml`文件中给出。当用户点击**登录**时，Spring Security过滤器将调用与数据库身份验证相关的类，这些类将读取`db-beans.xml`文件以建立连接。`<jdbc-user-service>`标签通过执行查询并根据用户在浏览器中提交的参数从数据库中检索用户信息来实现数据库身份验证。
- en: See also
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行ApacheDS身份验证*食谱'
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSF和Spring Security进行身份验证错误消息*食谱'
- en: ApacheDS authentication with JSF and Spring Security
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSF和Spring Security进行ApacheDS身份验证
- en: In this section, we will authenticate users in the JSF application using ApacheDS
    and Spring Security.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用ApacheDS和Spring Security在JSF应用程序中对用户进行身份验证。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'ApacheDS authentication is similar to Struts 2 ApacheDS authentication:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ApacheDS身份验证类似于Struts 2 ApacheDS身份验证：
- en: 'Create a dynamic web project in Eclipse: `JSF_Spring_ApacheDSAuthentication_Recipe7`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个动态Web项目：`JSF_Spring_ApacheDSAuthentication_Recipe7`
- en: All the files and folders remain the same as the logout application
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有文件和文件夹与注销应用程序相同
- en: Update the `security.xml` file
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`security.xml`文件
- en: Add `spring-security-ldap.jar` to your `web-inf/lib` folder
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`spring-security-ldap.jar`添加到您的`web-inf/lib`文件夹
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps for configuring LDAP with Spring and the JSF application:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来配置Spring和JSF应用程序的LDAP：
- en: 'Update the `Spring-security.xml` file to read the LDAP configuration:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Spring-security.xml`文件以读取LDAP配置：
- en: '[PRE16]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The JSF filters are used for delegation. Spring filters are used for authentication.
    We have used ldap-authentication-provider for setting the LDAP parameters to the
    Spring Security engine. When the application receives a request for authentication
    and authorization, spring-security-ldap provider sets the LDAP parameters and
    connects with the LDAP using the ldap-server-url parameter. It then retrieves
    the user details and gives it to the Spring authentication manager and filter
    to handle the response of the authentication.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: JSF过滤器用于委托。Spring过滤器用于身份验证。我们使用ldap-authentication-provider来设置LDAP参数到Spring
    Security引擎。当应用程序收到身份验证和授权请求时，spring-security-ldap提供程序设置LDAP参数并使用ldap-server-url参数连接到LDAP。然后检索用户详细信息并将其提供给Spring身份验证管理器和过滤器来处理身份验证的响应。
- en: See also
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Authentication error message with JSF and Spring Security* recipe
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JSF和Spring Security的身份验证错误消息*配方'
- en: Authentication error message with JSF and Spring Security
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSF和Spring Security的身份验证错误消息
- en: In this section, we will see how we can capture the authentication error message
    and display it to the user on the browser. The `credentialmanager` bean as displayed
    in the previous example will capture the authentication failure exceptions. We
    will see how to capture it in JSP.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何捕获身份验证错误消息并在浏览器上向用户显示。如前面的示例中所示的`credentialmanager` bean将捕获身份验证失败的异常。我们将看到如何在JSP中捕获它。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `credentialmanager` bean has captured the bad credential exception.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`credentialmanager` bean已捕获了错误凭据异常。'
- en: 'We need to display it to the user. This can be done by using the `<h: messages>`
    tag in our JSP file. This should be given inside the grid tag. The very purpose
    of implementing the `phaselistener` in Managed Bean is to capture the message
    and display it to the user. This is the updated `login.jsp`.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要将其显示给用户。这可以通过在我们的JSP文件中使用`<h: messages>`标签来实现。这应该放在grid标记内。在托管bean中实现`phaselistener`的目的是捕获消息并将其显示给用户。这是更新后的`login.jsp`。'
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to capture the authentication failure message in
    JSP:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来捕获JSP中的身份验证失败消息：
- en: 'Edit the `login.jsp` file:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`login.jsp`文件：
- en: '[PRE17]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `beforePhase()` method in the `credentialmanager` captures the authentication
    exceptions message. The exception is added to `FacesMessage`, which is captured
    in the JSP file.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`credentialmanager`中的`beforePhase()`方法捕获了身份验证异常消息。异常被添加到`FacesMessage`，在JSP文件中捕获。'
- en: '[PRE18]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows the implementation:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了实现：
- en: '![How it works...](img/7525OS_03_11.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_11.jpg)'
- en: 'The following screenshot shows the screen on authentication failure:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了身份验证失败时的屏幕：
- en: '![How it works...](img/7525OS_03_12.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_12.jpg)'
- en: 'The following screenshot shows the screen when empty credentials are entered
    in the username and password fields:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了当在用户名和密码字段中输入空凭据时的屏幕：
- en: '![How it works...](img/7525OS_03_13.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_03_13.jpg)'
- en: See also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 4](ch04.html "Chapter 4. Spring Security with Grails"), *Spring Security
    with Grails*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。与Grails一起使用Spring Security"), *与Grails一起使用Spring Security*'
