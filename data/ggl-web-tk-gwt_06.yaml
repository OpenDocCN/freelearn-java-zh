- en: Chapter 6. Browser Effects with JSNI and JavaScript Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用JSNI和JavaScript库的浏览器效果
- en: In this chapter, we will learn how to create user interfaces that can utilize
    cool browser effects provided by some well-known third-party JavaScript libraries.
    We will take advantage of the JavaScript Native Interface (JSNI) provided by GWT
    to wrap these existing JavaScript libraries and use them in our GWT applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建用户界面，利用一些知名的第三方JavaScript库提供的酷炫浏览器效果。我们将利用GWT提供的JavaScript Native
    Interface (JSNI)来包装这些现有的JavaScript库，并在我们的GWT应用程序中使用它们。
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要解决的任务是：
- en: Moo.Fx
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moo.Fx
- en: Rico Rounded Corners
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rico圆角
- en: Rico Color Selector
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rico颜色选择器
- en: Script.aculo.us effects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Script.aculo.us效果
- en: What is JSNI?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是JSNI？
- en: 'JSNI provides a way to mix JavaScript code with Java code. It is similar in
    concept to the Java Native Interface (JNI) provided by Sun''s Java environment.
    JNI enables your Java code to call C and C++ methods. JSNI enables your Java code
    to call into JavaScript methods. It is very powerful technique that lets us access
    low-level JavaScript code directly from Java code, and opens the door to a wide
    variety of uses and possibilities listed below:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JSNI提供了一种将JavaScript代码与Java代码混合的方法。它在概念上类似于Sun的Java环境提供的Java Native Interface
    (JNI)。JNI使您的Java代码能够调用C和C++方法。JSNI使您的Java代码能够调用JavaScript方法。这是一种非常强大的技术，它让我们能够直接从Java代码访问低级别的JavaScript代码，并为下面列出的各种用途和可能性打开了大门：
- en: Call JavaScript code from Java
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Java调用JavaScript代码
- en: Call Java code from JavaScript
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从JavaScript调用Java代码
- en: Throw exceptions that cross the Java/JavaScript boundaries
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨Java/JavaScript边界抛出异常
- en: Access Java fields from JavaScript
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从JavaScript访问Java字段
- en: 'However, this powerful technique should be used carefully, as JSNI code may
    not be portable across browsers. The current implementation of the GWT compiler
    will also not be able to perform any optimizations on JSNI code. JSNI methods
    must always be declared native, and the JavaScript code that is placed in the
    JSNI method must be placed in a comment block that is specially formatted. So
    each JSNI method will consist of two parts—a native method declaration, and the
    JavaScript code for the method embedded inside a specially formatted code block.
    Here is an example of a JSNI method that calls the `alert()` JavaScript method:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种强大的技术应该谨慎使用，因为JSNI代码可能在不同浏览器之间不具备可移植性。当前的GWT编译器实现也无法对JSNI代码进行任何优化。JSNI方法必须始终声明为native，并且放置在JSNI方法中的JavaScript代码必须放置在特殊格式的注释块中。因此，每个JSNI方法将由两部分组成——一个native方法声明，以及嵌入在特殊格式的代码块中的方法的JavaScript代码。以下是一个调用`alert()`
    JavaScript方法的JSNI方法的示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above example, the JavaScript code is embedded in a '/*-{' and '}-*/'
    block. Another thing to be aware of is the use of the `$wnd` and `$doc` variables.
    GWT code always runs inside a nested frame inside the browser, so you cannot access
    the window or document objects in the normal way inside your JSNI code. You must
    use the `$wnd` and `$doc` variables, which are automatically initialized by GWT
    to refer to the window and document objects for the host page. The GWT compiler
    can check our JSNI code. So if you run it in web mode and compile your application,
    the compiler will flag any errors in your JSNI code. This is a nice way to debug
    JSNI code, as these errors will not be displayed until run time when you are running
    in hosted mode. In this chapter, we are going to use JSNI to wrap some third-party
    JavaScript libraries, and use the cool browser effects provided by them, inside
    our GWT user interfaces.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，JavaScript代码嵌入在'/*-{'和'}-*/'块中。还要注意的一件事是使用`$wnd`和`$doc`变量。GWT代码始终在浏览器中的嵌套框架内运行，因此无法在JSNI代码中以正常方式访问窗口或文档对象。您必须使用`$wnd`和`$doc`变量，这些变量由GWT自动初始化，用于引用主机页面的窗口和文档对象。GWT编译器可以检查我们的JSNI代码。因此，如果在Web模式下运行并编译应用程序，编译器将标记JSNI代码中的任何错误。这是调试JSNI代码的一种好方法，因为这些错误直到运行时（在托管模式下运行时）才会显示出来。在本章中，我们将使用JSNI来包装一些第三方JavaScript库，并在我们的GWT用户界面中使用它们提供的酷炫浏览器效果。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the recent versions of GWT, JSNI functions sometimes do not work in hosted
    mode, but work fine when deployed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的GWT版本中，JSNI函数有时在托管模式下不起作用，但在部署时可以正常工作。
- en: Moo.Fx
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Moo.Fx
- en: '`Moo.fx` is a super lightweight and fast JavaScript library that provides several
    cool effects for web applications ([http://moofx.mad4milk.net](http://moofx.mad4milk.net)).
    It is compact and works in all the major web browsers. We are going to use JSNI
    to wrap some of the effects provided by the `Moo.fx` library and use these effects
    in our GWT application.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Moo.fx`是一个超轻量级和快速的JavaScript库，为Web应用程序提供了几种酷炫的效果（[http://moofx.mad4milk.net](http://moofx.mad4milk.net)）。它体积小，适用于所有主要的Web浏览器。我们将使用JSNI来包装`Moo.fx`库提供的一些效果，并在我们的GWT应用程序中使用这些效果。'
- en: Time for Action—Using JSNI
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间—使用JSNI
- en: We are going to use the JSNI provided by the GWT framework to wrap the `Moo.fx`
    library and intermingle Java and JavaScript to use its functionality in our GWT
    user interface.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用GWT框架提供的JSNI来包装`Moo.fx`库，并在我们的GWT用户界面中混合Java和JavaScript来使用其功能。
- en: Add the prototype and `Moo.fx` JavaScript files that will be needed by our application
    to the module's HTML file—`Samples.html`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将原型和`Moo.fx` JavaScript文件添加到模块的HTML文件—`Samples.html`。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create a new Java class named `MooFx.java` in the `com.packtpub.gwtbook.samples.client.util`
    package that wraps the `Moo.fx` JavaScript library effects.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`MooFx.java`的新Java类，用于包装`Moo.fx`
    JavaScript库的效果。
- en: Add a new JSNI method in `MooFx.java` for creating an `opacity.fx` object.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MooFx.java`中添加一个新的JSNI方法，用于创建一个`opacity.fx`对象。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add a JSNI method for toggling the opacity effect.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为切换不透明度效果添加一个JSNI方法。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add a private JSNI method that takes a parameter string of options and converts
    it into a JavaScript object.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有的JSNI方法，接受一个选项字符串参数并将其转换为JavaScript对象。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add a static Java method for creating a height effect, which uses the above
    `buildOptions()` to build a JavaScript object for passing on the options to a
    JSNI method.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个静态的Java方法来创建一个高度效果，它使用上面的`buildOptions()`来构建一个JavaScript对象，以便将选项传递给JSNI方法。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Add a new JSNI method that will create the height effect object.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的JSNI方法，用于创建高度效果对象。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add a new JSNI method for toggling the height effect.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的JSNI方法来切换高度效果。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add a static Java method for creating a width effect, which uses the above `buildOptions()`
    to build a JavaScript object for passing on the options to a JSNI method.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个静态的Java方法来创建一个宽度效果，它使用上面的`buildOptions()`来构建一个JavaScript对象，以便将选项传递给JSNI方法。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Add a new JSNI method that will create the width effect object.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的JSNI方法，用于创建宽度效果对象。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Add a new JSNI method for toggling the width effect.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的JSNI方法来切换宽度效果。
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create the user interface for this application in a new Java file named `MooFxEffectsPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Add an HTML fragment
    that contains an outer `div` element with an inner `div` element that contains
    a paragraph element with text. Add three different variables containing this fragment.
    Also add an element for each effect.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的一个新的Java文件中创建此应用程序的用户界面，命名为`MooFxEffectsPanel.java`。添加一个包含外部`div`元素和包含文本段落元素的内部`div`元素的HTML片段。添加三个包含此片段的不同变量。还为每个效果添加一个元素。
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create three buttons, one for toggling each `Moo.fx` effect.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个按钮，一个用于切换每个`Moo.fx`效果。
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Register an event handler to listen for clicks on each of the buttons, and call
    the appropriate method for toggling the effect.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册一个事件处理程序来监听每个按钮的点击，并调用适当的方法来切换效果。
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a `DeferredCommand` that creates each of the effect objects when it executes.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`DeferredCommand`，当执行时创建每个效果对象。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the constructor, add the buttons and `divs` for each effect to the work panel.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，将每个效果的按钮和`divs`添加到工作面板中。
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, create a little info panel that displays descriptive text about this
    application, so that we can display this text when this sample is selected in
    the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个小的信息面板，显示关于此应用程序的描述性文本，以便在我们的`Samples`应用程序的可用示例列表中选择此示例时显示此文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件。
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here is a screenshot of the application. Click on each button to see the effect
    in action.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的屏幕截图。单击每个按钮以查看效果。
- en: '![Time for Action—Using JSNI](img/1007_06_01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Time for Action—Using JSNI](img/1007_06_01.jpg)'
- en: What Just Happened?
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'The main effects provided by the `Moo.fx` library are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Moo.fx`库提供的主要效果有：'
- en: 'Opacity: Modify the opacity or transparency of an element.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不透明度：修改元素的不透明度或透明度。
- en: 'Height: Modify the height of an element.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：修改元素的高度。
- en: 'Width: Modify the width of an element.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：修改元素的宽度。
- en: In this sample, we created a Java class named `MooFx`, which wrapped the `Moo.fx`
    JavaScript library using JSNI. We created a native method named `opacity()` for
    instantiating an opacity object. In this method, we call the JavaScript constructor
    for the opacity object and return the resulting object, which is of type `Element`.
    We store this in a variable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个名为`MooFx`的Java类，它使用JSNI封装了`Moo.fx` JavaScript库。我们创建了一个名为`opacity()`的本机方法，用于实例化一个不透明度对象。在这个方法中，我们调用不透明度对象的JavaScript构造函数，并返回结果对象，其类型为`Element`。我们将其存储在一个变量中。
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We then create a native method named `toggleOpacity()` for toggling the opacity
    of an element from one state to another. This method uses the variable that we
    stored earlier and calls the toggle method on it to change its current state.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个名为`toggleOpacity()`的本机方法，用于切换元素的不透明度从一个状态到另一个状态。这个方法使用我们之前存储的变量，并调用其切换方法来改变其当前状态。
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We create `height()` and `width()` Java methods that are passed a string parameter
    containing the options that need to be provided to the `Moo.fx` height and width
    constructors. These two methods use a native method named `buildOptions()` to
    create the JavaScript object containing the options, which will then be passed
    on to the native method for creating the height and width. The `buildOptions()`
    method parses the provided string, and creates a JavaScript object and sets its
    properties and the property values. We again utilize the `eval()` function to
    set the properties and return the object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`height()`和`width()`的Java方法，它们接受一个包含需要提供给`Moo.fx`高度和宽度构造函数的选项的字符串参数。这两个方法使用一个名为`buildOptions()`的本机方法来创建包含选项的JavaScript对象，然后将其传递给用于创建高度和宽度的本机方法。`buildOptions()`方法解析提供的字符串，并创建一个JavaScript对象并设置其属性和属性值。我们再次利用`eval()`函数来设置属性并返回对象。
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The returned JavaScript options object is passed on to the native `height()`
    and `width()` methods to create the respective effect objects similar to the `opacity()`
    method. We then add native methods for toggling the height and width. That is
    all we have to do to wrap the library in an easy-to-use Java class!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的JavaScript选项对象被传递给本机的`height()`和`width()`方法，以创建类似于`opacity()`方法的效果对象。然后，我们添加了用于切换高度和宽度的本机方法。这就是我们将库封装成易于使用的Java类所需要做的全部！
- en: In the user interface, we create an HTML object with an outer `div` that contains
    an inner `div` with a paragraph of text. The HTML widget enables us to create
    arbitrary HTML and add it to a panel. We used the HTML widget in this sample,
    but we can also create the same element using the methods in the DOM object in
    the GWT framework. In the next sample, we will use that functionality, so that
    we are familiar with the different tools provided by GWT. We also create three
    buttons, one each for toggling each of the effects. Event handlers are registered
    with each of these buttons to listen for clicks and then call the appropriate
    toggle method for the specified effect. In the method for creating the effect,
    we use the `getElementById()` on the DOM object to get the `div` element that
    we are interested in. We needed to do this, as we do not have access to the `div`
    that we added to the panel. The `div` that we were interested in was added to
    the panel as part of the HTML widget.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户界面中，我们创建一个带有外部`div`的HTML对象，其中包含一个带有文本段落的内部`div`。HTML小部件使我们能够创建任意HTML并将其添加到面板中。我们在此示例中使用了HTML小部件，但我们也可以使用GWT框架中的DOM对象的方法来创建相同的元素。在下一个示例中，我们将使用该功能，以便熟悉GWT提供的不同工具。我们还创建了三个按钮，分别用于切换每个效果。为每个按钮注册了事件处理程序，以侦听单击事件，然后调用指定效果的适当切换方法。在创建效果的方法中，我们使用DOM对象上的`getElementById()`来获取我们感兴趣的`div`元素。我们需要这样做，因为我们无法访问添加到面板的`div`。我们感兴趣的`div`作为HTML小部件的一部分添加到面板上。
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We then toggle the requisite effect on the element.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后切换元素上的必要效果。
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The effects themselves are constructed by calling the respective constructors
    for the effects inside `DeferredCommand`. The elements that we have added are
    not available yet by using their ID, until the event handlers have all completed.
    The `DeferredCommand` runs after they have all completed, and this ensures that
    our element has been added to the DOM and can be accessed by using its ID. We
    get the element, create an effect, and associate it with the element.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 效果本身是通过在`DeferredCommand`内调用效果的相应构造函数来构建的。我们添加的元素尚不可通过其ID使用，直到所有事件处理程序都已完成。`DeferredCommand`在它们全部完成后运行，这确保了我们的元素已被添加到DOM，并且可以通过其ID访问。我们获取元素，创建效果，并将其与元素关联起来。
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We have successfully accessed the library from Java in our GWT application,
    and can reuse these effects everywhere. In the `ColorSelector` sample later in
    this chapter, we will use one of the `Moo.fx` effects in combination with effects
    form other libraries.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功从Java中访问了库，在我们的GWT应用程序中可以在任何地方重用这些效果。在本章后面的`ColorSelector`示例中，我们将使用`Moo.fx`效果之一与其他库的效果结合使用。
- en: Rico Rounded Corners
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rico圆角
- en: Elements on a web page with rounded corners are visually much more attractive
    than straight corners and are aesthetically more appealing. It is also one of
    the hottest design trends in the look and feel of web applications. Rico ([http://openrico.org/rico/home.page](http://openrico.org/rico/home.page))
    is another fine JavaScript library that has great support for this and makes it
    extremely easy to use. It also provides a great deal of functionality, but we
    are only wrapping and using the rounded corners effects part of Rico. We are only
    using labels in this sample for applying the rounded corners, but you can also
    apply it to text paragraphs and several other HTML elements. In this example we
    will wrap the rounded corners effect from Rico and use it in our application to
    display several labels with different types of rounded corners.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 网页上带有圆角的元素在视觉上比直角更有吸引力，美学上更具吸引力。这也是网络应用外观和感觉中最热门的设计趋势之一。Rico ([http://openrico.org/rico/home.page](http://openrico.org/rico/home.page))是另一个出色的JavaScript库，对此提供了很好的支持，并且使用起来非常容易。它还提供了大量的功能，但我们只是包装和使用Rico的圆角效果部分。在此示例中，我们仅使用标签来应用圆角，但您也可以将其应用于文本段落和其他几种HTML元素。在此示例中，我们将包装Rico的圆角效果，并在我们的应用程序中使用它来显示具有不同类型圆角的多个标签。
- en: Time for Action—Supporting the Labels
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-支持标签
- en: We are going to wrap the `Rico` library and provide support for labels with
    rounded corners in our GWT user interface.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将包装`Rico`库，并在我们的GWT用户界面中为带有圆角的标签提供支持。
- en: Add the prototype and Rico JavaScript files that will be needed by our application
    to the module's HTML file—`Samples.html`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的HTML文件`Samples.html`中添加所需的原型和Rico JavaScript文件。
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Create a new Java class named `Rico.java` in the `com.packtpub.gwtbook.samples.client.util`
    package that will wrap the `rico` JavaScript library effects.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`Rico.java`的新Java类，该类将包装`rico`
    JavaScript库效果。
- en: Add a new JSNI method in `Rico.java` for rounding the corner of a widget.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Rico.java`中添加一个新的JSNI方法，用于将小部件的角进行四舍五入。
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Add a private JSNI method that takes a parameter of string options and converts
    it into a JavaScript object.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有JSNI方法，该方法接受一个字符串选项参数并将其转换为JavaScript对象。
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Add a static Java method for creating a rounded corner, which uses the above
    `buildOptions()` to build a JavaScript object for passing on the options to a
    JSNI method.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个静态Java方法，用于创建一个圆角，该方法使用上述`buildOptions()`来构建一个JavaScript对象，以便将选项传递给JSNI方法。
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Add a static Java method for creating a rounded corner without passing any options,
    and using the defaults.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个静态Java方法，用于创建一个不传递任何选项并使用默认值的圆角。
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create the user interface for this application in a new Java file named `RoundedCornersPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create a grid with
    three rows and two columns. We will add labels to this grid.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的一个新的Java文件中创建此应用程序的用户界面，命名为`RoundedCornersPanel.java`。创建一个包含三行两列的网格。我们将向此网格添加标签。
- en: '[PRE28]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Add six labels that will have six different rounded corners applied to them.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加六个标签，这些标签将分别应用六种不同的圆角。
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Call the method to create the rounded corner for each of the labels, passing
    it different options to it.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用方法为每个标签创建圆角，并向其传递不同的选项。
- en: '[PRE30]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Add the labels to the grid.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签添加到网格中。
- en: '[PRE31]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Finally, create a little info panel that displays descriptive text about this
    application, so that we can display this text when this sample is selected in
    the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个小的信息面板，显示关于这个应用程序的描述性文本，这样当我们在`Samples`应用程序的可用示例列表中选择此样本时，我们可以显示这个文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件。
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here is a screenshot displaying labels with different types of rounded corners:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个显示不同类型圆角标签的屏幕截图：
- en: '![Time for Action—Supporting the Labels](img/1007_06_02.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-支持标签](img/1007_06_02.jpg)'
- en: What Just Happened?
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a Java class that uses JSNI to provide access to the rounded corners
    functionality in the `Rico` JavaScript library. We create a `buildOptions()` method
    like in the previous sample, which can accept a parameter that contains a string
    with options, and add those options as properties on a native JavaScript object.
    This options object is then passed to a JSNI method that calls the `corner()`
    method in the Rico library for the provided element.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个Java类，使用JSNI提供对`Rico` JavaScript库中圆角功能的访问。我们创建了一个`buildOptions()`方法，就像在前面的示例中一样，它可以接受一个包含选项字符串的参数，并将这些选项作为本机JavaScript对象的属性添加。然后将此选项对象传递给调用Rico库中提供的元素的`corner()`方法的JSNI方法。
- en: '[PRE33]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the user interface, we create a grid, and add six labels to it. Each of these
    labels has a different type of rounded corner applied to it. Rico supports rounded
    corners on all four sides or a specific side. It can also create corners in the
    compact form, where the corners are slightly less rounded than the default version.
    You can even round two or three corners and leave the fourth one square. Rico
    provides other methods that you can wrap and use in your application in addition
    to the rounded corners. The procedure is very similar to what we have done so
    far and is usually just a matter of implementing all the methods from the JavaScript
    library that you are interested in. In the next sample, we will wrap some more
    functionality in Rico and use it in a color selector application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户界面中，我们创建一个网格，并向其添加六个标签。这些标签中的每一个都应用了不同类型的圆角。Rico支持在四个边上或特定边上的圆角。它还可以创建紧凑形式的角，其中角比默认版本略少圆。您甚至可以使两个或三个角变圆，而将第四个角保持为方形。Rico提供了其他方法，您可以包装并在应用程序中使用，除了圆角之外。该过程与我们迄今为止所做的非常相似，通常只是实现您感兴趣的JavaScript库中的所有方法。在下一个示例中，我们将包装Rico中的更多功能，并在颜色选择器应用程序中使用它。
- en: Rico Color Selector
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rico颜色选择器
- en: We have successfully wrapped the rounded corners effect from Rico in the previous
    example. In this section, we are going to add support for accessing color information
    using Rico's Color object. We will wrap this functionality using JSNI and then
    create a color selector application that uses Rico color objects along with the
    `Moo.fx` effects that we created earlier in the chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地在上一个示例中从Rico中包装了圆角效果。在本节中，我们将添加支持使用Rico的Color对象访问颜色信息的功能。我们将使用JSNI包装这个功能，然后创建一个颜色选择器应用程序，该应用程序使用Rico颜色对象以及我们在本章前面创建的`Moo.fx`效果。
- en: Time for Action—Wrapping the Color Methods
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-包装颜色方法
- en: We will wrap the `color` methods in the `Rico` library and use them to create
    an application for selecting colors.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`Rico`库中包装`color`方法，并使用它们创建一个选择颜色的应用程序。
- en: Add a new JSNI method in `Rico.java` for creating a `color` object with provided
    `red, green`, and `blue` values, and apply it to the element provided.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Rico.java`中添加一个新的JSNI方法，用于创建具有提供的`red, green`和`blue`值的`color`对象，并将其应用于提供的元素。
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Add a new JSNI method in `Rico.java` for getting the hex value of a Rico color
    object.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Rico.java`中添加一个新的JSNI方法，用于获取Rico颜色对象的十六进制值。
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Create the user interface for this application in a new Java file named `ColorSelectorPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create a grid with
    three rows and three columns. Create three text fields for entering the values,
    along with the work panel and `divs` for the color box and the color text.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的一个新的Java文件`ColorSelectorPanel.java`中为这个应用程序创建用户界面。创建一个包含三行三列的网格。创建三个文本字段用于输入值，以及工作面板和用于颜色框和颜色文本的`divs`。
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the constructor, initialize the grid, and default the values in each of the
    text boxes to zero.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中初始化网格，并将每个文本框中的值默认为零。
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Register an event handler to listen for keyboard events.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册一个事件处理程序来监听键盘事件。
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Create a paragraph element for displaying the selected color.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个段落元素来显示所选颜色。
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Create the element for displaying the hex value of the selected color.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用于显示所选颜色的十六进制值的元素。
- en: '[PRE40]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Create a `DeferredCommand` for initializing the height effect from `Moo.fx`
    and for setting the initial selected color as (0, 0, 0).
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`DeferredCommand`来初始化来自`Moo.fx`的高度效果，并将初始选定的颜色设置为(0, 0, 0)。
- en: '[PRE41]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Add an `onKeyPress()` handler to display the selected color when the user types
    in the new RGB values, and apply the height effect to the `div` displaying the
    hex value of the selected color.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`onKeyPress()`处理程序，以在用户输入新的RGB值时显示所选颜色，并将高度效果应用于显示所选颜色的`div`。
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, create a little info panel that displays descriptive text about this
    application, so that we can display this text when this sample is selected in
    the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个小的信息面板，显示关于这个应用程序的描述性文本，这样当我们在`Samples`应用程序的可用示例列表中选择此样本时，我们可以显示这个文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件。
- en: '[PRE43]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here is the application. Type in new values of RGB, and watch the selected color
    being displayed as soon as you stop typing, and the hex value for the current
    color displayed with a slide up and slide down window effect!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是应用程序。输入RGB的新值，当您停止输入时，观察所选颜色的显示，并且当前颜色的十六进制值以滑动窗口效果显示为上滑和下滑！
- en: '![Time for Action—Wrapping the Color Methods](img/1007_06_03.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-包装颜色方法](img/1007_06_03.jpg)'
- en: What Just Happened?
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We first enhance our Rico wrapper class from the previous sample, to add access
    to the color functionality. Rico provides us with the ability to create a color
    object by using a set of red, green, and blue values. Once this color object is
    constructed, its hex value can be retrieved as a string. We add a JSNI method
    to create a color object. Inside this method, we create the `Rico.Color` object
    and then set the background of the provided element to the newly created color.
    The color object is stored in a variable with the name of the variable being the
    same as the ID of the element. We use the `eval()` method to dynamically create
    the variable and to set the background color. We set the `backgroundColor` DHTML
    property for the element:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从上一个示例中增强我们的Rico包装类，以添加对颜色功能的访问。Rico为我们提供了使用一组红色、绿色和蓝色值创建颜色对象的能力。一旦构造了这个颜色对象，就可以将其十六进制值作为字符串检索出来。我们添加了一个JSNI方法来创建一个颜色对象。在这个方法内部，我们创建`Rico.Color`对象，然后将提供的元素的背景设置为新创建的颜色。颜色对象存储在一个变量中，变量的名称与元素的ID相同。我们使用`eval（）`方法动态创建变量并设置背景颜色。我们为元素设置`backgroundColor`
    DHTML属性：
- en: '[PRE44]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We also create a JSNI method that can return the hex value of the background
    color of the provided element.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个JSNI方法，可以返回提供元素的背景颜色的十六进制值。
- en: '[PRE45]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the user interface, we create a grid and populate it with three text boxes
    for entering the color values, and some identifiers for each field. We use the
    DOM object for creating various elements in this sample, instead of using an HTML
    widget. The DOM object contains several static methods for creating various elements
    and for manipulating the Document Object Model of the web page. We create two
    `div` elements and a paragraph element and add them to the panel in the page.
    These will be used for creating the element that will have the height effect applied
    to it to slide up and down the `div` before displaying the hex value of the selected
    color. Since the `workPanel` is a GWT widget, we call the `getElement()` method
    provided on all the widgets to get access to the underlying DOM element, and then
    append the `div` element to it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户界面中，我们创建一个网格，并用三个文本框填充它，用于输入颜色值，并为每个字段添加一些标识符。在这个示例中，我们使用DOM对象创建各种元素，而不是使用HTML小部件。DOM对象包含用于创建各种元素和操作网页文档对象模型的静态方法。我们创建两个`div`元素和一个段落元素，并将它们添加到页面的面板中。这些将用于创建将对其应用高度效果以在选择的颜色的`div`上滑动并显示十六进制值之前滑动的元素。由于`workPanel`是一个GWT小部件，我们调用所有小部件提供的`getElement（）`方法来访问底层DOM元素，然后将`div`元素附加到其中。
- en: '[PRE46]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We once again use a `DeferredCommand` to set the initial hex value of the current
    color and to set up the height effect object from `Moo.fx`. Since we are using
    a paragraph element to display the string with the color hex value, we have to
    set its inner text using the DOM object. If we used a GWT widget instead, we would
    set the value by calling the `setText()` method.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`DeferredCommand`来设置当前颜色的初始十六进制值，并设置来自`Moo.fx`的高度效果对象。由于我们使用段落元素来显示带有颜色十六进制值的字符串，我们必须使用DOM对象来设置其内部文本。如果我们使用GWT小部件，我们将通过调用`setText（）`方法来设置值。
- en: '[PRE47]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Finally, in the `onKeyPress()` method we first toggle the height of the `colordiv`,
    so the element slides up. Then we schedule a timer to go off in 500 milliseconds,
    and when the timer fires, we create a new color object with the current values
    in the red, green, and blue text boxes, set the text of the `colorText` element
    to the hex value of this color, and then toggle the height of the `colordiv` so
    it slides down to display this value. The timer is necessary to slow it down a
    little, so you can clearly see the transition and the effect.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`onKeyPress（）`方法中，我们首先切换`colordiv`的高度，使元素向上滑动。然后我们安排一个定时器在500毫秒后触发，当定时器触发时，我们使用红色、绿色和蓝色文本框中的当前值创建一个新的颜色对象，将`colorText`元素的文本设置为该颜色的十六进制值，然后切换`colordiv`的高度，使其向下滑动以显示这个值。定时器是必要的，以便稍微减慢速度，这样您可以清楚地看到过渡和效果。
- en: '[PRE48]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Script.aculo.us Effects
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Script.aculo.us效果
- en: '`Script.aculo.us` ([http://script.aculo.us/](http://script.aculo.us/)) is an
    amazing JavaScript library written by Thomas Fuchs that enables all kinds of snazzy
    transitions and visual effects inside the web page. It is a cross-browser-compatible
    library that is built on top of the prototype JavaScript framework. It is also
    one of the most popular Web 2.0 libraries that is widely used in a variety of
    applications and is, most notably, also included in the Ruby On Rails web framework.
    `Script.aculo.us` effects are integrated and provided by the `Effect` class, which
    is a part of this library. We will use this class to invoke and use the various
    effects in our GWT application. Unlike the other sections in this chapter, we
    will not use JSNI here, but we will show how to use an existing wrapper library
    inside our application to provide some nice browser effects.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Script.aculo.us`（[http://script.aculo.us/](http://script.aculo.us/)）是由Thomas
    Fuchs编写的令人惊叹的JavaScript库，可以在网页内实现各种时髦的过渡和视觉效果。它是一个跨浏览器兼容的库，建立在原型JavaScript框架之上。它也是最受欢迎的Web
    2.0库之一，在各种应用中被广泛使用，最值得注意的是它还包含在Ruby On Rails web框架中。`Script.aculo.us`效果是由该库的一部分`Effect`类集成和提供的。我们将使用这个类来调用和使用GWT应用中的各种效果。与本章的其他部分不同，我们这里不使用JSNI，而是展示如何在应用程序中使用现有的包装库来提供一些漂亮的浏览器效果。'
- en: Time for Action—Applying Effects
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-应用效果
- en: The `gwt-widget` library is a terrific group of extensions and enhancements
    to the GWT framework maintained by Robert Hanson ([http://gwt-widget.sourceforge.net/](http://gwt-widget.sourceforge.net/)).
    It provides a Java class that wraps the effects, and we will use this class in
    our application. We will add a grid with two rows and four columns, each containing
    a small image file, and apply one effect to each of the images.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`gwt-widget`库是由Robert Hanson维护的GWT框架的一组扩展和增强，它提供了一个包装效果的Java类，我们将在我们的应用程序中使用这个类。我们将添加一个包含两行四列的网格，每个包含一个小图像文件，并对每个图像应用一个效果。'
- en: 'We need to reference the `gwt-widgets` module that provides the Java wrapper
    for the library. This is leveraging the module inheritance feature of GWT. We
    will go into an explanation of this concept in the *What Just happened?* section
    of this sample. Follow the steps given below to add the grid:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要引用提供库的Java包装器的`gwt-widgets`模块。这是利用了GWT的模块继承特性。我们将在本示例的*刚刚发生了什么？*部分对这个概念进行解释。按照以下步骤添加网格：
- en: 'Add the following entry to the existing `Samples.gwt.xml` file in the `com.packtpub.gwtbook.samples`
    package:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples`包中的现有`Samples.gwt.xml`文件中添加以下条目：
- en: '[PRE49]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the prototype and `Script.aculo.us` JavaScript files that are used by the
    above module:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加上述模块使用的原型和`Script.aculo.us` JavaScript文件：
- en: '[PRE50]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Create the user interface for this application in a new Java file named `ScriptaculousEffectsPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create a grid with
    two rows and four columns. Create eight images, and eight buttons, and a work
    panel.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的新的Java文件`ScriptaculousEffectsPanel.java`中创建这个应用程序的用户界面。创建一个包含两行四列的网格。创建八个图像，八个按钮和一个工作面板。
- en: '[PRE51]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Add the button and image for the fade effect to a `VerticalPanel` and add the
    panel to the grid.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将淡出效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE52]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Add an event handler for listening to the click on the fade effect button, and
    call the appropriate `Script.aculo.us` effect.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听淡出效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE53]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Add the button and image for the shake effect to a `VerticalPanel` and add the
    panel to the grid.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将摇晃效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE54]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Add an event handler for listening to the click on the shake effect button,
    and call the appropriate `Script.aculo.us` effect.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听摇晃效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE55]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Add the button and image for the grow effect to a `VerticalPanel` and add the
    panel to the grid.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将增长效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE56]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Add an event handler for listening to the click on the grow effect button, and
    call the appropriate `Script.aculo.us` effect.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听增长效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE57]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Add the button and image for the blind up effect to a `VerticalPanel` and add
    the panel to the grid.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将盲目上升效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE58]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Add an event handler for listening to the click on the blind up effect button,
    and call the appropriate `Script.aculo.us` effect.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听盲目上升效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE59]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Add the button and image for the puff effect to a `VerticalPanel` and add the
    panel to the grid.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将膨胀效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE60]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Add an event handler for listening to the click on the puff effect button, and
    call the appropriate `Script.aculo.us` effect.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听膨胀效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE61]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Add the button and image for the shrink effect to a `VerticalPanel` and add
    the panel to the grid.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将收缩效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE62]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Add an event handler for listening to the click on the shrink effect button,
    and call the appropriate `Script.aculo.us` effect.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听收缩效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE63]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Add the button and image for the pulsate effect to a `VerticalPanel` and add
    the panel to the grid.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脉动效果的按钮和图像添加到`VerticalPanel`中，并将面板添加到网格中。
- en: '[PRE64]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Add an event handler for listening to the click on the pulsate effect button,
    and call the appropriate `Script.aculo.us` effect.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件处理程序，监听脉动效果按钮的点击，并调用适当的`Script.aculo.us`效果。
- en: '[PRE65]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Finally, create a little info panel that displays descriptive text about this
    application, so that we can display this text when this sample is selected in
    the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个小的信息面板，显示关于这个应用程序的描述性文本，这样当在我们的`Samples`应用程序的可用样本列表中选择此样本时，我们就可以显示这个文本。将信息面板和工作面板添加到一个停靠面板，并初始化小部件。
- en: '[PRE66]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Add the `gwt-widgets.jar` to the buildpath in Eclipse so it can find the referenced
    classes.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中的构建路径中添加`gwt-widgets.jar`，以便它可以找到引用的类。
- en: 'Here are the various effects that we have in this application:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序中有以下各种效果：
- en: '![Time for Action—Applying Effects](img/1007_06_04.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-应用效果](img/1007_06_04.jpg)'
- en: Click on each button to see the respective effect applied to the image.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 点击每个按钮，看看应用于图像的相应效果。
- en: What Just Happened?
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'Modules are XML files that contain the configuration settings for a GWT project.
    We have already seen and used the one for our `Samples` project. This is the file
    where we have referenced the external JavaScript files used by our application,
    along with entries for the RPC services used by our application, etc. GWT modules
    also have the ability to inherit from other modules. This enables the inheriting
    module to use resources that are declared in the inherited module. It prevents
    the issue of duplicate resource mapping and promotes reuse, making it easy to
    package GWT libraries as modules and distribute them and reuse them across projects.
    We can specify the module to be inherited from, by using the `inherits` tag and
    providing the fully qualified name of the module. All GWT applications must inherit
    from the `com.google.gwt.user.User` module, which provides the core web toolkit
    items. In this example we inherit from the `org.gwtwidgets.WidgetLibrary` that
    provides the `Script.aculo.us` effects class that we used in our application.
    Here is how we defined this inheritance in the `Samples.gwt.xml` file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是包含GWT项目的配置设置的XML文件。我们已经看到并使用了我们的`Samples`项目的模块。这是我们引用了应用程序使用的外部JavaScript文件的文件，以及我们应用程序使用的RPC服务的条目等。GWT模块还具有从其他模块继承的能力。这使得继承模块可以使用在继承模块中声明的资源。它可以防止重复资源映射的问题，并促进重用，使得很容易将GWT库打包为模块并在项目之间分发和重用。我们可以通过使用`inherits`标签并提供模块的完全限定名称来指定要继承的模块。所有GWT应用程序都必须继承自`com.google.gwt.user.User`模块，该模块提供了核心网络工具包项目。在这个例子中，我们继承自`org.gwtwidgets.WidgetLibrary`，该库提供了我们在应用程序中使用的`Script.aculo.us`效果类。以下是我们在`Samples.gwt.xml`文件中定义这种继承的方式：
- en: '[PRE67]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The `Script.aculo.us` effects are divided into two different types—Core effects
    and Combination effects. The core effects are the foundation of the library and
    the combination effects mix and use the core effects to create combination effects.
    The core effects in this library are:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`Script.aculo.us`效果分为两种不同类型——核心效果和组合效果。核心效果是该库的基础，组合效果混合并使用核心效果来创建组合效果。该库中的核心效果包括：'
- en: '**Opacity:** Sets the transparency of an element.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不透明度：设置元素的透明度。
- en: '**Scale:** Scales an element smoothly.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放：平滑地缩放元素。
- en: '**Move By:** Moves an element by the given amount of pixels.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动：将元素移动给定数量的像素。
- en: '**Highlight:** Draws attention to an element by changing its background color
    and flashing it.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示：通过改变其背景颜色并闪烁来吸引元素的注意力。
- en: '**Parallel:** Multiple effects are applied in parallel to the element.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行：多个效果同时应用于元素。
- en: 'The above core effects are mixed together to create the following combination
    effects:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 上述核心效果混合在一起，创建以下组合效果：
- en: '**Fade:** Fades an element away.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 淡化：使元素淡出。
- en: '**Puff:** Makes an element disappear in a cloud of smoke.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 膨胀：使元素在烟雾中消失。
- en: '**Shake:** Moves an element repeatedly to the left and right.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇动：将元素重复向左和向右移动。
- en: '**Blind Down:** Simulates a window blind coming down over an element.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 盲目下降：模拟窗帘在元素上下降。
- en: '**Blind Up:** Simulates a window blind going up over an element.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 盲目上升：模拟窗帘在元素上升。
- en: '**Pulsate:** Fades an element in and out and makes it appear to be pulsating.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脉动：使元素淡入淡出，并使其看起来像是在脉动。
- en: '**Grow:** Grows an element in size.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增长：增大元素的大小。
- en: '**Shrink:** Reduces an element in size.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收缩：减小元素的大小。
- en: '**Squish:** Reduces an element by shrinking it to its left.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩：通过将元素收缩到其左侧来减小元素。
- en: '**Fold:** First reduces an element to its top, then to its left, and eventually
    makes it disappear.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折叠：首先将元素减少到其顶部，然后到其左侧，最终使其消失。
- en: We position an image and a button inside each grid cell. When the button is
    clicked, we apply an effect to the image element that is above the button. We
    invoke an effect by providing the widget object to the desired effect method in
    the `org.gwtwidgets.client.wrap.Effect` class. All the methods in this class are
    static and each `Script.aculo.us` effect has a correspondingly named method in
    this class. So in order to fade an element, we call the `Effect.fade()` method
    and provide it with the image widget to which to apply the effect. These transitions
    are a very nice way to add dazzle to our application and provide a better user
    experience. You can also mix and match the provided effects in different ways
    to create and use customized effects.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在每个网格单元格内放置一个图像和一个按钮。当单击按钮时，我们会对位于按钮上方的图像元素应用效果。我们通过在`org.gwtwidgets.client.wrap.Effect`类中的所需效果方法中提供小部件对象来调用效果。该类中的所有方法都是静态的，并且该类中的每个`Script.aculo.us`效果都有一个相应命名的方法。因此，为了淡化一个元素，我们调用`Effect.fade()`方法，并提供要应用效果的图像小部件。这些过渡效果是为我们的应用程序增添光彩并提供更好的用户体验的一种非常好的方式。您还可以以不同的方式混合和匹配提供的效果，以创建和使用自定义效果。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have covered several JavaScript libraries and their use in GWT applications.
    A very important thing to be aware of while using all these libraries is that
    including a lot of JavaScript will increase the bloat that has to be loaded by
    the browser and will almost certainly increase page load times, and make things
    run slower. So use the visual effects sparingly and do not go overboard with them.
    Another caveat is the lack of portability when using JSNI for your application.
    This can cause your application to work quite differently in different versions
    of browsers.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了几个JavaScript库及其在GWT应用程序中的使用。在使用所有这些库时非常重要的一点是，包含大量JavaScript将增加浏览器加载的冗余，并几乎肯定会增加页面加载时间，并使运行速度变慢。因此，请谨慎使用视觉效果，不要过度使用。另一个注意事项是，在应用程序中使用JSNI时缺乏可移植性。这可能导致您的应用程序在不同版本的浏览器中运行方式大不相同。
- en: In this chapter we have learned about JSNI. We utilized JSNI to wrap the `Moo.fx`
    library and used its effects. We also wrapped different pieces of the `Rico` library
    and utilized it to create rounded corners for labels and a color selector application.
    We used the `Script.aculo.us` effects provided by the `gwt-widgets` library. We
    used an existing library in this case to provide the effects. We also learned
    how to use module inheritance in GWT.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于JSNI。我们利用JSNI来包装`Moo.fx`库并使用其效果。我们还包装了`Rico`库的不同部分，并利用它来为标签创建圆角和颜色选择器应用程序。我们使用了`gwt-widgets`库提供的`Script.aculo.us`效果。在这种情况下，我们使用了现有的库来提供效果。我们还学习了如何在GWT中使用模块继承。
- en: In the next chapter, we are going to learn how to create custom GWT widgets
    that can be shared across projects.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建可以在项目之间共享的自定义GWT小部件。
