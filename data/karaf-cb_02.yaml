- en: Chapter 2. Making Smart Routers with Apache Camel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：使用Apache Camel制作智能路由器
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing Apache Camel modules into Apache Karaf
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Apache Camel模块安装到Apache Karaf中
- en: Listing Camel Contexts in Karaf
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中列出Camel上下文
- en: Displaying Camel Context information in Karaf
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中显示Camel上下文信息
- en: Starting and stopping Camel Contexts in Karaf
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中启动和停止Camel上下文
- en: Listing routes in Karaf
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中列出路由
- en: Displaying route information in Karaf
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中显示路由信息
- en: Starting, stopping, suspending, and resuming routes in Karaf
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中启动、停止、挂起和恢复路由
- en: Listing endpoints in Karaf
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Karaf中列出端点
- en: Making a pure Java-based Camel Router for deployment in Karaf
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一个纯Java基于的Camel路由器以在Karaf中部署
- en: Creating a Blueprint-based Camel Router for deployment in Karaf
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基于Blueprint的Camel路由器以在Karaf中部署
- en: Adding Configuration Admin to a Blueprint-based Camel Router
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置管理器添加到基于Blueprint的Camel路由器
- en: Creating a managed service factory implementation of a Camel Router
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Camel路由器的托管服务工厂实现
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Apache Karaf provides a friendly OSGi-based container environment to deploy,
    manage, and most importantly, enjoy your applications. One of the more common
    projects to be hosted on Karaf is the Apache Camel-based router. In this chapter,
    we'll explore recipes to help make using Camel on Karaf quick, easy, and fun.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Karaf提供了一个友好的基于OSGi的容器环境，用于部署、管理和最重要的是享受您的应用程序。在Karaf上托管的项目中，更常见的是基于Apache
    Camel的路由器。在本章中，我们将探讨一些食谱，帮助您快速、轻松、愉快地使用Camel在Karaf上。
- en: Before we proceed, let's take a closer look at Apache Camel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们更仔细地看看Apache Camel。
- en: 'Apache Camel provides a rule-based routing and mediation engine for Java, implementing
    **Enterprise Integration Patterns** (**EIPs**) as described in *Enterprise Integration
    Patterns: Designing, Building, and Deploying Messaging Solutions*, *Gregor Hohpe
    and Bobby Woolf*, *Addison Wesley*. One of the key features of the Camel library
    is its domain-specific language to configure routers and mediation. This allows
    for type-safe completion of rules in an integrated development environment, thereby
    greatly saving time and reducing complexity.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel提供了一个基于规则的Java路由和中介引擎，实现了*企业集成模式（EIPs*），如*企业集成模式：设计、构建和部署消息解决方案*，*Gregor
    Hohpe和Bobby Woolf*，*Addison Wesley*中所述。Camel库的一个关键特性是其特定领域的语言，用于配置路由器和中介。这允许在集成开发环境中进行类型安全的规则完成，从而大大节省时间并减少复杂性。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The purpose of this chapter is to explore the Apache Camel-Apache Karaf integration.
    For more in-depth exploration of Enterprise Integration Patterns and Camel, read
    *Apache Camel Developer's Cookbook*, *Instant Apache Camel Messaging System*,
    or *Instant Apache Camel Message Routing*, all by Packt Publishing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是探索Apache Camel-Apache Karaf集成。要深入了解企业集成模式和Camel，请阅读Packt Publishing出版的*Apache
    Camel开发者食谱*、*Instant Apache Camel Messaging System*或*Instant Apache Camel Message
    Routing*。
- en: Installing Apache Camel modules into Apache Karaf
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Apache Camel模块安装到Apache Karaf中
- en: Before we can begin to explore how to build Camel-Karaf smart routers, we must
    first install all the required Camel modules into the Karaf container.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索如何构建Camel-Karaf智能路由器之前，我们必须首先将所有必需的Camel模块安装到Karaf容器中。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, and Internet connectivity.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的成分包括Apache Karaf发行套件、对JDK的访问和互联网连接。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, we add an URL to the Camel feature to our Karaf installation feature
    repository using the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用以下命令将Camel功能URL添加到我们的Karaf安装功能仓库中：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Alternatively, you can use the `feature:repo-add camel 2.12.2` command.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，您可以使用`feature:repo-add camel 2.12.2`命令。
- en: Upon adding the feature URL, Karaf will then be ready to install all Apache
    Camel dependencies. If you'd like to see all of the install targets, issue the
    `feature:list | grep –i camel` command.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在添加功能URL后，Karaf将准备好安装所有Apache Camel依赖项。如果您想查看所有安装目标，请发出`feature:list | grep
    –i camel`命令。
- en: 'The next step is installing the base Camel feature into Karaf. We install a
    feature by executing the `feature:install` command and the feature''s name, as
    shown in the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将基础Camel功能安装到Karaf中。我们通过执行`feature:install`命令和功能名称来安装功能，如下面的命令所示：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can verify the installation by executing the `list –t 0 | grep camel` command,
    which will list all the installed Camel components in Karaf (camel-core, camel-karaf-commands,
    camel-spring, and camel-blueprint).
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过执行 `list –t 0 | grep camel` 命令来验证安装，该命令将列出 Karaf 中安装的所有 Camel 组件（camel-core、camel-karaf-commands、camel-spring
    和 camel-blueprint）。
- en: How it works…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The Apache Camel community maintains an Apache Karaf features descriptor for
    each release of their project. When the descriptor file is added (using the `feature:repo-add`
    command) to Karaf, the container processes its content, making each feature''s
    target available to be installed. The following diagram shows how various Camel
    bundles are deployed on top of a base Karaf system:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 社区为每个项目版本维护一个 Apache Karaf 功能描述符。当描述符文件通过 `feature:repo-add` 命令添加到
    Karaf 中时，容器会处理其内容，使每个功能的目标可安装。以下图示显示了各种 Camel 打包如何在基础 Karaf 系统之上部署：
- en: '![How it works…](img/5081OS_02_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/5081OS_02_01.jpg)'
- en: When a particular feature, in this case Camel, is installed (using the `feature:install`
    command), Karaf will use the appropriate URL handlers to obtain the required resources
    and install them into the container, and will then attempt to bring them to a
    `Started` state. If you execute `list –t 0` on the Karaf console, you will see
    Camel and all other artifacts deployed into the container. We can depict the integration
    of Camel components into Karaf more simply by illustrating the key Camel artifacts
    being deployed atop a standard Karaf installation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装特定功能（在本例中为 Camel）时（使用 `feature:install` 命令），Karaf 将使用适当的 URL 处理程序来获取所需资源并将它们安装到容器中，然后尝试将它们带到
    `Started` 状态。如果你在 Karaf 控制台中执行 `list –t 0`，你会看到部署到容器中的 Camel 和所有其他工件。我们可以通过展示关键
    Camel 工件部署在标准 Karaf 安装之上来更简单地描述 Camel 组件集成到 Karaf 中的过程。
- en: See also
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Deploying applications as a feature* recipe of [Chapter 1](ch01.html "Chapter 1. Apache
    Karaf for System Builders"), *Apache Karaf for System Builders*
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html "第 1 章。为系统构建者准备的 Apache Karaf") 中 *将应用程序作为功能部署* 的配方，*为系统构建者准备的
    Apache Karaf*'
- en: Listing Camel Contexts in Karaf
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Karaf 中列出 Camel 上下文
- en: 'The installation of Apache Camel into Apache Karaf includes a set of custom
    Camel commands as part of the `camel-karaf-commands` bundle. The Camel community
    has developed and maintained these commands for the benefit of Karaf users, and
    as such have helped to fully integrate Camel into the Karaf experience. These
    commands are listed in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Apache Camel 安装到 Apache Karaf 中包括一组自定义 Camel 命令，作为 `camel-karaf-commands`
    打包的一部分。Camel 社区已经开发和维护了这些命令，以供 Karaf 用户使用，并因此帮助将 Camel 完全集成到 Karaf 体验中。以下截图列出了这些命令：
- en: '![Listing Camel Contexts in Karaf](img/5081OS_02_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![在 Karaf 中列出 Camel 上下文](img/5081OS_02_02.jpg)'
- en: As of Apache Camel 2.12.2, there are 18 Camel-Karaf commands (as shown in the
    previous screenshot), and in the following recipes, we'll explore the most commonly
    used commands.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 Apache Camel 2.12.2，有 18 个 Camel-Karaf 命令（如前一个截图所示），在以下配方中，我们将探讨最常用的命令。
- en: One common task Camel users want to perform is to list all of the Camel Contexts
    deployed into a Karaf container.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 用户想要执行的一个常见任务是列出部署到 Karaf 容器中的所有 Camel 上下文。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的成分包括 Apache Karaf 分发套件、对 JDK、Maven 和源代码编辑器的访问。
- en: A sample Camel application has been developed for this recipe, and is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe2](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe2).
    Building the application requires executing a Maven install and then deploying
    the assembled bundle into Karaf (using the `install –s mvn:com.packt/sample` command).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为此配方开发了一个 Camel 示例应用程序，可在 [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe2](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe2)
    找到。构建应用程序需要执行 Maven 安装，然后将组装好的打包部署到 Karaf 中（使用 `install –s mvn:com.packt/sample`
    命令）。
- en: Follow the instructions in the *Installing Apache Camel modules into Apache
    Karaf* recipe to provide the base requirements to operate the sample code. We'll
    reuse this recipe's resources several times.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照在 *将 Apache Camel 模块安装到 Apache Karaf 中* 的配方中的说明操作，以提供操作示例代码的基本要求。我们将多次重用此配方的资源。
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To list all of the Camel Contexts deployed in Karaf, execute the `camel:context-list`
    command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出 Karaf 中部署的所有 Camel 上下文，请执行 `camel:context-list` 命令：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous command invocation, we observe the sample Camel Router's context
    name displayed (in this example, the context name was set in Blueprint—see the
    recipe's source code for details).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的命令调用中，我们观察到示例 Camel 路由器的上下文名称被显示（在这个例子中，上下文名称是在 Blueprint 中设置的——有关详细信息，请参阅本配方的源代码）。
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: When the `camel-karaf-commands` bundle is installed into Karaf via the Camel
    feature, the Camel commands become automatically available on the Karaf console.
    Under the hood, the Camel command Blueprint descriptor is instantiated and the
    various Camel-Karaf commands are wired into the container.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过 Camel 功能将 `camel-karaf-commands` 包安装到 Karaf 中时，Camel 命令将自动在 Karaf 控制台中可用。在底层，Camel
    命令蓝图描述符被实例化，并且各种 Camel-Karaf 命令被连接到容器中。
- en: When the `context-list` command is executed, the context IDs of each Camel Context
    deployed is displayed along with their current status, and if available, their
    uptime.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行 `context-list` 命令时，显示每个已部署 Camel 上下文的上下文 ID 以及它们当前的状态，如果有的话，还有它们的运行时间。
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: The Apache Camel community maintains updated information on their commands,
    which you can find at [http://camel.apache.org/karaf.html](http://camel.apache.org/karaf.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 社区维护着他们命令的最新信息，您可以在[http://camel.apache.org/karaf.html](http://camel.apache.org/karaf.html)找到这些信息。
- en: See also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Displaying Camel Context information in Karaf* recipe
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Karaf 中显示 Camel 上下文信息* 的配方'
- en: Displaying Camel Context information in Karaf
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Karaf 中显示 Camel 上下文信息
- en: Karaf can display detailed information about individual Camel Contexts deployed
    in the container using the `camel:context-info` command. Context-wide statistics,
    behaviors, contained components, and more can be discovered using this command.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Karaf 可以通过 `camel:context-info` 命令显示容器中部署的个别 Camel 上下文的详细信息。使用此命令可以发现上下文范围内的统计信息、行为、包含的组件等。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本配方下的 *在 Karaf 中列出 Camel 上下文* 配方的 *准备工作* 部分的说明进行操作。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Use the following `camel:context-info` command on the Karaf console to retrieve
    context information—a small warning, there may be a lot of output generated:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 `camel:context-info` 命令在 Karaf 控制台中检索上下文信息——请注意，可能会有大量输出生成：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding `camel:context-info` invocation demonstrates that a large quantity
    of data is available about each context; it is not uncommon for users to capture
    this output for analysis.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `camel:context-info` 调用表明，每个上下文都有大量数据可用；用户捕获此输出进行分析并不罕见。
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `context-info` command hooks into Camel's own facilities to access context
    information. Upon retrieval, the data is then formatted for display on Karaf's
    console.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`context-info` 命令连接到 Camel 自身的设施以访问上下文信息。检索后，数据随后被格式化以在 Karaf 控制台上显示。'
- en: See also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Starting and* *stopping Camel Contexts in Karaf* recipe
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Karaf 中启动和停止 Camel 上下文* 的配方'
- en: Starting and stopping Camel Contexts in Karaf
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Karaf 中启动和停止 Camel 上下文
- en: Starting and stopping the bundle that contains a Camel Context can be very clumsy;
    you can use the `camel:context-start` and `camel:context-stop` commands to manage
    specific contexts.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 启动和停止包含 Camel 上下文的包可能非常繁琐；您可以使用 `camel:context-start` 和 `camel:context-stop`
    命令来管理特定上下文。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the instructions under the *Listing Camel Contexts in Karaf* recipe's
    *Getting ready* section for this recipe.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本配方下的 *在 Karaf 中列出 Camel 上下文* 配方的 *准备工作* 部分的说明进行操作。
- en: How to do it…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Managing Camel Contexts in Karaf is easy, but requires you to become familiar
    with two commands, which are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 中管理 Camel 上下文很容易，但需要您熟悉两个命令，如下所示：
- en: '`camel:context-start contextName`: This command is used to start a context'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camel:context-start contextName`：此命令用于启动上下文'
- en: '`camel:context-stop contextName`: This command is used to stop a context'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camel:context-stop contextName`：此命令用于停止上下文'
- en: 'The following Camel command invocations demonstrate the result of stopping
    a context:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Camel 命令调用演示了停止上下文的结果：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The context commands operate on the Camel framework and do not represent the
    OSGi life cycle. Depending upon your application, a stopped context may result
    in the need to restart its host bundle.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文命令在 Camel 框架上操作，并不代表 OSGi 生命周期。根据您的应用程序，停止的上下文可能需要重新启动其宿主包。
- en: See also
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Listing routes in Karaf* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Karaf 中列出路由* 的配方'
- en: Listing routes in Karaf
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Karaf 中列出路由
- en: It is common to deploy dozens of Camel routes into an Apache Karaf container.
    To make administrating these routes easier, Apache Camel has provided a command
    to list all Camel-deployed routes by their ID.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Apache Karaf 容器中部署数十个 Camel 路由是很常见的。为了使管理这些路由更容易，Apache Camel 提供了一个命令，通过 ID
    列出所有 Camel 部署的路由。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本食谱的 *在 Karaf 中列出 Camel 上下文* 食谱的 *准备就绪* 部分的说明进行操作。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Use the `camel:route-list` command to list all routes deployed in Karaf as
    follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `camel:route-list` 命令列出 Karaf 中部署的所有路由，如下所示：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding invocation gathers and displays all the routes deployed in the
    container on Karaf's console.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的调用收集并显示在 Karaf 控制台上部署的所有路由。
- en: How it works…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When the `route-list` command is executed, the route IDs of each route in each
    Camel Context are displayed along with their current status.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行 `route-list` 命令时，每个 Camel 上下文中每个路由的路由 ID 以及它们当前的状态都会显示出来。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When developing routes, assign a descriptive ID to help make administration
    easier.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发路由时，分配一个描述性的 ID 以帮助简化管理。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关链接
- en: The *Displaying* *route information in Karaf* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Karaf 中显示路由信息* 食谱'
- en: Displaying route information in Karaf
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Karaf 中显示路由信息
- en: Apache Camel provides mechanisms to gather information surrounding the routes
    deployed inside a Camel Context. The `route-info` command has been provided to
    display route properties, statistics, and definitions to Karaf's console.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 提供了收集 Camel 上下文中部署的路由周围信息的机制。`route-info` 命令已提供，用于在 Karaf 控制台显示路由属性、统计信息和定义。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本食谱的 *在 Karaf 中列出 Camel 上下文* 食谱的 *准备就绪* 部分的说明进行操作。
- en: How to do it…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Use the following `camel:route-info routeId` command to display information
    on a Camel route to Karaf''s console; similar to the `camel:context-info` command,
    this command may generate a lot of output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 `camel:route-info routeId` 命令在 Karaf 控制台显示 Camel 路由的信息；类似于 `camel:context-info`
    命令，此命令可能会生成大量输出：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding invocation shows the output generated when our sample Camel application's
    route is displayed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的调用显示了当我们的示例 Camel 应用程序的路由显示时生成的输出。
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Apache Camel provides mechanisms to track route statistics; the `route-info`
    command connects to these facilities to provide route information. Note the appending
    of `8` to various IDs in the route definition—this is generated by Camel to help
    differentiate different components and avoid name collisions. The original route
    definitions will not carry this value.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 提供了跟踪路由统计信息的机制；`route-info` 命令连接到这些设施，向 Karaf 控制台提供路由信息。注意在路由定义中各种
    ID 后附加的 `8`，这是 Camel 生成的，以帮助区分不同的组件并避免名称冲突。原始路由定义将不会携带此值。
- en: See also
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关链接
- en: The *Starting, stopping, suspending, and resuming routes in Karaf* recipe
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Karaf 中启动、停止、挂起和恢复路由* 食谱'
- en: Starting, stopping, suspending, and resuming routes in Karaf
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Karaf 中启动、停止、挂起和恢复路由
- en: Apache Camel provides users with fine-grained control of routes deployed inside
    a Camel Context, and as such, has provided Karaf with access to these controls.
    These management facilities are separate from OSGi's life cycle model, allowing
    users to select small portions of the Camel code that is currently being executed
    to start, stop, suspend, and resume operations.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 为用户提供了对 Camel 上下文中部署的路由的精细控制，因此为 Karaf 提供了访问这些控制的功能。这些管理设施独立于 OSGi
    的生命周期模型，允许用户选择当前正在执行的小部分 Camel 代码来启动、停止、挂起和恢复操作。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本食谱的 *在 Karaf 中列出 Camel 上下文* 食谱的 *准备就绪* 部分的说明进行操作。
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Managing Camel routes in Karaf is easy, and requires you to become familiar
    with four commands, which are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 中管理 Camel 路由很简单，需要你熟悉以下四个命令：
- en: '`camel:route-start routeName`: This command is used to start a route'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camel:route-start routeName`：此命令用于启动一个路由'
- en: '`camel:route-stop routeName`: This command is used to stop a route'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camel:route-stop routeName`：此命令用于停止一个路由'
- en: '`camel:route-suspend routeName`: This command is used to suspend a route'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camel:route-suspend routeName`：此命令用于挂起一个路由'
- en: '`camel:route-resume routeName`: This command is used to resume a suspended
    route'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`camel:route-resume routeName`：此命令用于恢复挂起的路由'
- en: To make these commands clear, let's review how to use them with the supplied
    sample Camel application from the *Listing Camel Contexts in Karaf* recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些命令更清晰，让我们回顾如何使用*在Karaf中列出Camel上下文*食谱中提供的示例Camel应用程序来使用它们。
- en: 'In the following invocation, we list all the Camel routes deployed in Karaf
    and then issue a stop order upon `CamelRoute-timerToLog` (our sample Camel application).
    We can observe that it changes the status of the route from `Started` to `Stopped`.
    This can be done using the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下调用中，我们列出Karaf中部署的所有Camel路由，然后对`CamelRoute-timerToLog`（我们的示例Camel应用程序）发出停止命令。我们可以观察到它将路由的状态从`Started`更改为`Stopped`。这可以通过以下命令完成：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can then issue the `route-start` command to return the route to the `Started`
    state, as shown in the following command snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`route-start`命令将路由恢复到`Started`状态，如下面的命令片段所示：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now suspend the route via the `route-suspend` command and confirm that
    the named route enters the `Suspended` state, as shown in the following command
    snippet:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过`route-suspend`命令挂起路由，并确认命名路由进入`Suspended`状态，如下面的命令片段所示：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we can issue the `route-resume` command to return the suspended route
    to the `Started` state, as shown in the following command snippet:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`route-resume`命令将挂起的路由恢复到`Started`状态，如下面的命令片段所示：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Camel route management commands are working from the point of view of the
    Camel Context, independently of the OSGi life cycle. During the execution of the
    commands, the host bundle's OSGi status is unaffected. This provides users with
    a fine-grained management approach, allowing a host bundle to remain running with
    its context(s), only manipulating one or more routes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Camel路由管理命令是从Camel上下文的角度工作的，独立于OSGi生命周期。在执行命令期间，宿主包的OSGi状态不受影响。这为用户提供了一种细粒度的管理方法，允许宿主包及其上下文（s）保持运行，仅操作一个或多个路由。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Starting and stopping Camel Contexts in Karaf* recipe
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Karaf中启动和停止Camel上下文*的食谱'
- en: Listing endpoints in Karaf
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Karaf中列出端点
- en: Apache Camel users use endpoints to denote URIs from which events and information
    come from or go to. In Karaf, the `endpoint-list` command has been provided to
    help simplify tracking these URIs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel用户使用端点来表示事件和信息来自或去向的URI。在Karaf中，`endpoint-list`命令已被提供，以帮助简化跟踪这些URI。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the instructions in the *Listing Camel Contexts in Karaf* recipe's *Getting
    ready* section for this recipe.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 按照第*在Karaf中列出Camel上下文*食谱的*准备工作*部分的说明进行此食谱。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Use the `camel:endpoint-list` command to list all endpoints in Karaf (use the
    `camel:endpoint-list context-name` command if you want to restrict output to one
    context''s routes). This is shown in the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`camel:endpoint-list`命令列出Karaf中的所有端点（如果您想限制输出到一个上下文的路由，请使用`camel:endpoint-list
    context-name`命令）。这如下面的命令所示：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding invocation, all endpoints found in Karaf are displayed (in
    this example, the endpoints were set in Blueprint—see the recipe's source code
    for details).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的调用中，Karaf中找到的所有端点都会显示（在这个例子中，端点是在Blueprint中设置的——有关详细信息，请参阅食谱的源代码）。
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When the endpoint list command is executed, all routes in every Camel Context
    are scanned and listed to Karaf's console.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行端点列表命令时，会扫描并列出每个Camel上下文中的所有路由到Karaf的控制台。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating our own custom Karaf command using a Maven archetype* recipe of
    [Chapter 1](ch01.html "Chapter 1. Apache Karaf for System Builders"), *Apache
    Karaf for System Builders*
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Maven存档创建我们自己的自定义Karaf命令*的[第1章](ch01.html "第1章。Apache Karaf for System Builders")，*Apache
    Karaf for System Builders*'
- en: Making a pure Java-based Camel Router for deployment in Karaf
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个纯Java的Camel Router以在Karaf中部署
- en: Developing our first Camel Router for deployment in Karaf doesn't necessarily
    require using a handful of frameworks and libraries. In this recipe, we'll make
    a Camel router using pure Java code with just a sprinkling of OSGi and Camel libraries.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 开发我们的第一个Camel Router以在Karaf中部署不一定需要使用大量的框架和库。在这个食谱中，我们将使用纯Java代码以及少量的OSGi和Camel库来创建Camel路由器。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe3](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe3).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe to provide the base requirements to operate the sample code.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的成分包括Apache Karaf发行套件、对JDK、Maven和源代码编辑器的访问。此食谱的示例代码可在[https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe3](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe3)找到。按照*将Apache
    Camel模块安装到Apache Karaf*食谱中的说明，提供操作示例代码的基本要求。
- en: How to do it…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The first step is creating a Maven-based project. A `pom.xml` file containing
    the essential Maven coordinate information and bundle packaging directive will
    suffice.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个基于Maven的项目。一个包含基本Maven坐标信息和包打包指令的`pom.xml`文件就足够了。
- en: 'The next step is adding Apache Camel and OSGi dependencies to the POM file.
    We need to add the `camel-core` and `org.osgi.core` artifacts'' dependencies to
    the POM file. This is described in the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将Apache Camel和OSGi依赖项添加到POM文件中。我们需要将`camel-core`和`org.osgi.core`工件依赖项添加到POM文件中。这将在以下代码中描述：
- en: '[PRE13]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For Apache Karaf 3.0.0, we use Camel Version 2.12.2 and OSGi Version 5.0.0.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Apache Karaf 3.0.0，我们使用Camel版本2.12.2和OSGi版本5.0.0。
- en: 'Next, we add our build configuration, as shown in the following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加我们的构建配置，如下所示：
- en: '[PRE14]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We use `maven-bundle-plugin` to build our bundle, adding the `Bundle-Activator`
    instruction. When the bundle is deployed into Karaf, the OSGi container will call
    the start and stop methods contained within the `com.packt.Activator` class.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用`maven-bundle-plugin`来构建我们的包，添加`Bundle-Activator`指令。当包部署到Karaf中时，OSGi容器将调用`com.packt.Activator`类中包含的启动和停止方法。
- en: The next step is implementing OSGi BundleActivator. Now that we have established
    a base project structure, we can implement our Java code. We'll start by creating
    the `Activator.java` file in the `src/main/java/com/packt` folder.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是实现OSGi BundleActivator。现在我们已经建立了一个基本的项目结构，我们可以实现我们的Java代码。我们首先在`src/main/java/com/packt`文件夹中创建`Activator.java`文件。
- en: 'The `Activator` class we write will implement the BundleActivator interface.
    The BundleActivator interface implements the methods the OSGi container calls
    when starting or stopping a bundle. We''ll use the bundle''s start and stop methods
    to control the creation of a Camel Context, the addition of a Camel route, and
    the actual start and stop of the router. For more details on Apache Camel, visit
    [http://camel.apache.org](http://camel.apache.org). Consider the following code:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们编写的`Activator`类将实现`BundleActivator`接口。`BundleActivator`接口实现了OSGi容器在启动或停止包时调用的方法。我们将使用包的启动和停止方法来控制Camel
    Context的创建、Camel路由的添加以及路由的实际启动和停止。有关Apache Camel的更多详细信息，请访问[http://camel.apache.org](http://camel.apache.org)。以下是一个示例代码：
- en: '[PRE15]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When our Activator interface is started, we will create a new `CamelContext`
    object, then attempt to add a `MyRouteBuilder` function (this creates a Camel
    route), and then start the context and the routes it contains. Consider the following
    code:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们的激活器接口启动时，我们将创建一个新的`CamelContext`对象，然后尝试添加一个`MyRouteBuilder`函数（这创建了一个Camel路由），然后启动上下文及其包含的路由。以下是一个示例代码：
- en: '[PRE16]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When our Activator interface is stopped, we first check whether our `CamelContext`
    object is null and then attempt to call the `stop` function upon it. When the
    context is stopped, all routes contained within it are also stopped.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们的激活器接口停止时，我们首先检查我们的`CamelContext`对象是否为null，然后尝试调用其上的`stop`函数。当上下文停止时，其中包含的所有路由也会停止。
- en: 'Next, we implement our Camel Router. Our Camel router is defined in a custom
    router builder, which we extend from Camel''s `RouteBuilder` class. This is shown
    in the following code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们实现我们的Camel Router。我们的Camel Router定义在一个自定义路由构建器中，我们从这个Camel的`RouteBuilder`类扩展。以下是一个示例代码：
- en: '[PRE17]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `MyRouteBuilder` class extends the Camel `RouteBuilder` class, which provides
    the router configuration interface. We add a Camel route definition to the `configure`
    method using the Java-based DSL.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MyRouteBuilder`类扩展了Camel的`RouteBuilder`类，它提供了路由配置接口。我们使用基于Java的DSL在`configure`方法中添加一个Camel路由定义。'
- en: The next step is building and deploying our Camel Router into Karaf. Now that
    we have implemented our build configuration (POM file), tied it into the OSGi
    runtime (the `Activator` class), and implemented our Camel Router (the `MyRouteBuilder`
    class), we can proceed to compile and deploy the code into Karaf. Our first step
    is to invoke `mvn install`, and then we execute `install –s mvn:com.packt/osgi`
    (`mvn:groupId/artifactId`) on the Karaf console.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是构建和部署我们的 Camel 路由器到 Karaf。现在我们已经实现了我们的构建配置（POM 文件），将其与 OSGi 运行时（`Activator`
    类）绑定，并实现了我们的 Camel 路由器（`MyRouteBuilder` 类），我们可以继续编译和部署代码到 Karaf。我们的第一步是调用 `mvn
    install`，然后在 Karaf 控制台中执行 `install –s mvn:com.packt/osgi` (`mvn:groupId/artifactId`)。
- en: As the final step, we're ready to test out our Camel Router! Once our router
    bundle is installed and active in Karaf, you'll see a `src/data` folder created
    in the `KARAF_HOME` folder. Our sample router configuration processes XML-based
    recipe files. When it sees a cookie recipe (`<recipe>cookie</recipe>`), it places
    a copy of it in the `KARAF_HOME/target/messages/cookies` folder; otherwise, it
    places that copy in the `KARAF_HOME/target/message/other` folder.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一步，我们准备测试我们的 Camel 路由器！一旦我们的路由器包在 Karaf 中安装并激活，你将在 `KARAF_HOME` 文件夹中看到一个
    `src/data` 文件夹。我们的示例路由器配置处理基于 XML 的食谱文件。当它看到饼干食谱（`<recipe>cookie</recipe>`）时，它将一个副本放在
    `KARAF_HOME/target/messages/cookies` 文件夹中；否则，它将该副本放在 `KARAF_HOME/target/message/other`
    文件夹中。
- en: How it works…
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Our pure Java-based Camel Router works by taking advantage of OSGi''s BundleActivator
    start and stop interfaces and direct use of the Apache Camel library. When deployed
    into Karaf, we can visualize the relevant components as shown in the following
    diagram:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基于纯 Java 的 Camel 路由器通过利用 OSGi 的 BundleActivator 启动和停止接口以及直接使用 Apache Camel
    库来工作。当部署到 Karaf 中时，我们可以可视化以下图中显示的相关组件：
- en: '![How it works…](img/5081OS_02_03.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/5081OS_02_03.jpg)'
- en: When a bundle is started in an OSGi container, it will have its `Bundle-Activator`
    class' `start` method called. Our sample project configures this to the `com.packt.Activator`
    class. We reuse the Activator's start and stop methods to control a Camel Context,
    which contains a Camel Router as built by our `RouteBuilder` class implementation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个包在一个 OSGi 容器中启动时，它将调用其 `Bundle-Activator` 类的 `start` 方法。我们的示例项目将其配置为 `com.packt.Activator`
    类。我们重用 Activator 的启动和停止方法来控制 Camel 上下文，该上下文包含由我们的 `RouteBuilder` 类实现构建的 Camel
    路由器。
- en: See also
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a Blueprint-based Camel Router for deployment in Karaf* recipe
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 Karaf 部署的“创建蓝图模式的 Camel 路由器”食谱
- en: Creating a Blueprint-based Camel Router for deployment in Karaf
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Karaf 部署创建基于蓝图模式的 Camel 路由器
- en: Blueprint provides a dependency injection framework for OSGi. Many users will
    find that it has similarities with the Spring framework. However, Blueprint has
    been designed to deal with the dynamic runtime of OSGi where services come and
    go regularly.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图为 OSGi 提供了一个依赖注入框架。许多用户会发现它与 Spring 框架有相似之处。然而，蓝图已被设计来处理 OSGi 的动态运行时，其中服务经常来来去去。
- en: The standard Apache Camel-Karaf feature contains the required Camel-Blueprint
    libraries for users to immediately start using Blueprint to wire together their
    routes. In this recipe, we'll build a Camel Router, taking advantage of the Blueprint
    Inversion of Control framework.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 Apache Camel-Karaf 功能包含用户立即开始使用蓝图连接路由所需的 Camel-Blueprint 库。在本食谱中，我们将构建一个
    Camel 路由器，利用蓝图控制反转框架的优势。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe4](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe4).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe's *Getting ready* section to provide the base requirements to operate the
    sample code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的成分包括 Apache Karaf 分发套件、对 JDK、Maven 和源代码编辑器的访问。本食谱的示例代码可在[https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe4](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe4)找到。按照“将
    Apache Camel 模块安装到 Apache Karaf”食谱中“准备就绪”部分的说明，提供操作示例代码的基本要求。
- en: How to do it…
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The Apache Camel community has provided its users with a Maven archetype to
    generate a Blueprint-based OSGi Camel Router:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 社区为用户提供了一个 Maven 架构来生成基于蓝图的 OSGi Camel 路由器：
- en: 'The first step is generating a Camel Blueprint project with a Maven archetype.
    We can create our project by invoking the archetype as shown in the following
    command snippet:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是使用Maven原型生成Camel Blueprint项目。我们可以通过调用以下命令片段中的原型来创建我们的项目：
- en: '[PRE18]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: During the generation process, you will be asked to supply a `groupId`, `artifactId`,
    and project `version` value.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生成过程中，你将被要求提供`groupId`、`artifactId`和项目`version`值。
- en: This archetype invocation will produce a POM file, Java source for a Hello interface
    and to implement HelloBean, a Blueprint descriptor XML file, and a sample unit
    test. The interface and the bean component are purely for sample purposes; in
    a real-world development scenario, you will delete these artifacts.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此原型调用将生成一个POM文件、一个Hello接口的Java源代码以及实现HelloBean的Blueprint描述符XML文件，以及一个示例单元测试。接口和bean组件纯粹用于示例目的；在现实世界的开发场景中，你将删除这些工件。
- en: 'The next step is building and deploying the project into Karaf. To build the
    project, we invoke the `mvn install` command. This will populate your local `m2`
    repository with our bundle. To install the sample, execute the following command
    on the Karaf console:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将项目构建并部署到Karaf中。要构建项目，我们调用`mvn install`命令。这将把我们的bundle填充到你的本地`m2`仓库中。要安装示例，请在Karaf控制台执行以下命令：
- en: '[PRE19]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding command, we substitute your Maven coordinates in the format
    `mvn:{groupId}/{artifactID}/{version}`.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们用格式`mvn:{groupId}/{artifactID}/{version}`替换你的Maven坐标。
- en: 'The last step is verifying the router function. Once installed and started
    (using the `start BundleID` command), you will observe the following entries in
    your Karaf logfile:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是验证路由功能。一旦安装并启动（使用`start BundleID`命令），你将在你的Karaf日志文件中观察到以下条目：
- en: '[PRE20]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'When our project bundle is deployed into Karaf, the project''s dependencies
    are resolved, and upon start, the Blueprint descriptor file is processed and objects
    are instantiated and populated into the Blueprint container. The following diagram
    highlights the high-level view of the deployed components in Karaf:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的项目bundle部署到Karaf中时，项目的依赖关系被解决，在启动时，Blueprint描述符文件被处理，对象被实例化并填充到Blueprint容器中。以下图表突出了在Karaf中部署的组件的高级视图：
- en: '![How it works…](img/5081OS_02_04.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/5081OS_02_04.jpg)'
- en: Given a successful instantiation of the services deployed into the Blueprint
    container, the `CamelContext` object embedded within the container is automatically
    started.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 给定在Blueprint容器中成功实例化的服务，容器内嵌入的`CamelContext`对象将自动启动。
- en: There's more…
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: The Apache Camel project also provides a Camel-Spring library in its standard
    feature deployment. The Spring framework can be made to work in a Karaf environment,
    but it's generally preferred to use Blueprint or Declarative Services.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel项目还提供了Camel-Spring库，作为其标准功能部署的一部分。Spring框架可以在Karaf环境中工作，但通常更倾向于使用Blueprint或声明性服务。
- en: See also
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding Configuration Admin to a Blueprint-based Camel Router* recipe
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将配置管理添加到基于Blueprint的Camel路由器*菜谱'
- en: Adding Configuration Admin to a Blueprint-based Camel Router
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将配置管理添加到基于Blueprint的Camel路由器
- en: Blueprint allows us to externalize some configuration elements from our code;
    we can take this to the next level by taking advantage of the OSGi configuration
    administration service (generally referred to as Configuration Admin).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Blueprint允许我们将一些配置元素从我们的代码中外部化；我们可以通过利用OSGi配置管理服务（通常称为配置管理）来将这一过程提升到下一个层次。
- en: The Configuration Admin service provides configuration properties to services
    in an OSGi container. In Apache Karaf, this functionality is improved by including
    the Apache Felix File Install directory-based management agent. File Install monitors
    a directory and can automatically install and start a bundle or make a configuration
    file update to Configuration Admin.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理服务为OSGi容器中的服务提供配置属性。在Apache Karaf中，通过包括Apache Felix File Install目录管理代理来改进这一功能。File
    Install监控一个目录，可以自动安装和启动一个bundle或对配置管理进行配置文件更新。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apache Felix File Install provides the magic behind Karaf's `deploy` and `etc`
    folders, automatically handling files as they are added, removed, or updated.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Felix File Install提供了Karaf的`deploy`和`etc`文件夹背后的魔法，自动处理文件在添加、删除或更新时的操作。
- en: In this recipe, we'll integrate the Configuration Admin service into our Blueprint-based
    Camel project.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将集成配置管理服务到我们的基于Blueprint的Camel项目中。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe5](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe5).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe to provide the base requirements to operate the sample code.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方所需的配料包括Apache Karaf发行套件、对JDK、Maven和源代码编辑器的访问。此配方的示例代码可在[https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe5](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe5)找到。按照*将Apache
    Camel模块安装到Apache Karaf*配方中的说明，提供操作示例代码的基本要求。
- en: How to do it…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The Apache Camel community has provided its users with a Maven archetype to
    generate a Blueprint-based OSGi Camel Router. We''ll use this as a starting point
    to build our project, adding in the required bits for Configuration Admin support:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel社区为其用户提供了一个Maven存档来生成基于蓝图的OSGi Camel路由器。我们将以此作为起点来构建我们的项目，并添加所需的支持配置管理员的功能：
- en: 'The first step is generating a Camel Blueprint project with a Maven archetype.
    We can create our project by invoking the archetype as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是使用Maven存档生成Camel蓝图项目。我们可以通过以下方式调用存档来创建我们的项目：
- en: '[PRE21]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: During the generation process, you will be asked to supply a `groupId`, `artifactId`,
    and project `version` value.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生成过程中，您将被要求提供`groupId`、`artifactId`和项目`version`值。
- en: This will produce a POM file, Java source for a Hello interface and to implement
    HelloBean, a Blueprint descriptor XML file, and a sample unit test.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一个POM文件、实现Hello接口的Java源代码以及实现HelloBean的蓝图描述符XML文件，以及一个示例单元测试。
- en: Now that we have a basic project structure, let's modify it to use Configuration
    Admin. As we're using Blueprint, we only need to modify the descriptor file found
    in the `src/main/resources/OSGI-INF/blueprint` folder.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有一个基本的项目结构，让我们修改它以使用配置管理员。由于我们使用蓝图，我们只需要修改位于`src/main/resources/OSGI-INF/blueprint`文件夹中的描述符文件。
- en: 'Our first modification is to add an additional namespace for Configuration
    Admin, as shown in the following code:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的第一步是添加一个额外的命名空间用于配置管理员，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We'll use the namespace `cm` to access configuration management.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用`cm`命名空间来访问配置管理。
- en: 'The next step is modifying the bean wiring in the Blueprint file to use a Configuration
    Admin variable. We update the provided `HelloBean` bean to accept a configuration
    variable, as shown in the following code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是修改蓝图文件中的bean连接，以使用配置管理员变量。我们更新提供的`HelloBean` bean以接受一个配置变量，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Variables use the syntax `${variable-name}`.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量使用语法`${variable-name}`。
- en: 'Now, we can add our reference to Configuration Admin, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以添加我们的配置管理员引用，如下所示：
- en: '[PRE24]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we set the configuration management behavior to reload applications with
    configuration updates. Then, we provide default values to a pair of variables
    we'll use in the Blueprint file. We also set a `persistent-id` placeholder that
    we can use in conjunction with Karaf's `etc` folder to provide dynamic external
    configuration. In the preceding code, we can create a `recipe.cfg` file in the
    `etc` folder that contains the `greeting` and `result` properties.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将配置管理行为设置为在配置更新时重新加载应用程序。然后，我们为在蓝图文件中使用的两个变量提供默认值。我们还设置了一个`persistent-id`占位符，我们可以与Karaf的`etc`文件夹结合使用，以提供动态外部配置。在前面提供的代码中，我们可以在`etc`文件夹中创建一个`recipe.cfg`文件，该文件包含`greeting`和`result`属性。
- en: Tip
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When writing an Apache Karaf feature descriptor, you can add a configuration
    file(s) to the list of resources the feature will install.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当编写Apache Karaf功能描述符时，您可以将配置文件添加到功能将安装的资源列表中。
- en: 'The next step is updating the Camel Context in Blueprint to use a Configuration
    Admin variable. This can be done as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是更新蓝图中的Camel上下文以使用配置管理员变量。这可以通过以下方式完成：
- en: '[PRE25]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Our Camel route contains one direct modification: the introduction of a `{{result}}`
    variable. Camel uses double curly braces syntax for external variables. The `helloBean`
    reference remains unchanged. However, its runtime behavior is to now use a default
    variable from the Blueprint descriptor or a value provided by Configuration Admin.'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的Camel路由包含一个直接修改：引入一个`{{result}}`变量。Camel使用双大括号语法来表示外部变量。`helloBean`引用保持不变。然而，它的运行时行为现在是使用蓝图描述符中的默认变量或配置管理员提供的值。
- en: 'The next step is building and deploying the project into Karaf. To build the
    project, we invoke the `mvn install` command. This will populate your local `m2`
    repository with our bundle. To install the sample, execute the following command
    on the Karaf console:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是构建和部署项目到 Karaf 中。要构建项目，我们调用 `mvn install` 命令。这将把我们的包填充到你的本地 `m2` 仓库中。要安装示例，请在
    Karaf 控制台中执行以下命令：
- en: '[PRE26]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding command, we substitute your Maven coordinates in the `mvn:{groupId}/{artifactID}/{version}`
    format.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们将你的 Maven 坐标替换为 `mvn:{groupId}/{artifactID}/{version}` 格式。
- en: 'The last step is verifying the router function. Once the router is installed
    and started, you will observe entries of the following form in your Karaf logfile:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是验证路由功能。一旦路由器安装并启动，你将在你的 Karaf 日志文件中观察到以下形式的条目：
- en: '[PRE27]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tip
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Changing variable values requires editing the Blueprint file and refreshing
    the bundle in Karaf. However, changes to values in the configuration file will
    be picked up almost instantly.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改变量值需要编辑 Blueprint 文件并在 Karaf 中刷新包。然而，对配置文件中值的更改几乎会立即被捕获。
- en: How it works…
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'This recipe extends the *Creating a Blueprint-based Camel Router for deployment
    in Karaf* recipe by introducing Configuration Admin to the design. The following
    diagram highlights the high-level view of the deployed components in Karaf:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本通过引入 Configuration Admin 到设计中扩展了 *在 Karaf 中部署的基于 Blueprint 的 Camel 路由* 脚本。以下图表突出了在
    Karaf 中部署的组件的高级视图：
- en: '![How it works…](img/5081OS_02_05.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/5081OS_02_05.jpg)'
- en: The addition of Configuration Admin to Blueprint exposes the Camel route to
    external configuration. This external configuration appears as Java properties
    files in Karaf's `etc` folder.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Configuration Admin 添加到 Blueprint 中，将 Camel 路由暴露给外部配置。这个外部配置在 Karaf 的 `etc`
    文件夹中表现为 Java 属性文件。
- en: So, how do we associate the properties file to the Configuration Admin reference
    in our Blueprint specification? This is accomplished by setting the persistence
    ID in the Configuration Admin property placeholder's Blueprint definition. In
    our demo code, we use the persistence ID recipe—in our `etc` folder, we'd use
    a corresponding file named `recipe.cfg`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何将属性文件关联到我们的 Blueprint 规范中的 Configuration Admin 引用呢？这是通过在 Configuration
    Admin 属性占位符的 Blueprint 定义中设置持久化 ID 来实现的。在我们的演示代码中，我们使用持久化 ID 脚本——在我们的 `etc` 文件夹中，我们会使用一个名为
    `recipe.cfg` 的相应文件。
- en: How do we use the property name-value pairs? We include the default name-value
    pairs in the Blueprint definition. These are automatically overridden by Configuration
    Admin if values are available. We access their values using single curly braces
    in beans and double curly braces in Blueprint-defined Camel Contexts.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用属性名值对？我们在 Blueprint 定义中包含默认的名值对。如果提供了值，这些值将被 Configuration Admin 自动覆盖。我们使用单大括号在
    beans 中访问它们的值，在 Blueprint 定义的 Camel 上下文中使用双大括号。
- en: See also
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a managed service factory implementation of a Camel Router* recipe
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建 Camel 路由的托管服务工厂实现* 脚本'
- en: Creating a managed service factory implementation of a Camel Router
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Camel 路由的托管服务工厂实现
- en: In this recipe, we'll introduce the power of the OSGi pattern ManagedServiceFactory
    interface to Apache Camel smart routers. This pattern will allow us to manage
    multiple service instances, or in our case, Camel routes, via configuration. In
    fact, we'll produce a new router instance for each configuration we supply our
    service factory!
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们将介绍 OSGi 模式 ManagedServiceFactory 接口在 Apache Camel 智能路由器中的强大功能。这个模式将允许我们通过配置管理多个服务实例，或者在我们的情况下，Camel
    路由。实际上，我们将为每个提供给服务工厂的配置生成一个新的路由器实例！
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ingredients of this recipe include the Apache Karaf distribution kit, access
    to JDK, Maven, and a source code editor. The sample code for this recipe is available
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe6](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe6).
    Follow the instructions in the *Installing Apache Camel modules into Apache Karaf*
    recipe to provide the base requirements to operate the sample code.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的配料包括 Apache Karaf 分发套件、对 JDK、Maven 和源代码编辑器的访问。这个脚本的示例代码可在 [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe6](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter2/chapter2-recipe6)
    找到。按照 *将 Apache Camel 模块安装到 Apache Karaf* 脚本中的说明，提供操作示例代码的基本要求。
- en: How to do it…
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'This recipe will be somewhat more complex than our previous recipes. It is
    strongly urged that you follow along with the provided example code:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将比我们之前的配方稍微复杂一些。强烈建议您按照提供的示例代码进行操作：
- en: First, create a Blueprint-based Camel project using the handy Maven archetype
    we've used in the previous recipes (see the *Creating a Blueprint-based Camel
    Router for deployment in Karaf* recipe). We'll use this as a base to build our
    project, removing and/or modifying resources as required.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用我们在之前的配方中使用的便捷Maven存档创建一个基于Blueprint的Camel项目（参见*在Karaf中部署基于Blueprint的Camel
    Router*配方）。我们将以此为基础构建项目，根据需要删除和/或修改资源。
- en: 'The next step is adding dependencies to the POM file. We''ll edit the POM file,
    adding dependencies on the OSGi core and compendium, as shown in the following
    code:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在POM文件中添加依赖项。我们将编辑POM文件，添加对OSGi核心和组合库的依赖，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For Apache Karaf 3.0.0, we use the OSGi core and compendium version 5.0.0.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Apache Karaf 3.0.0，我们使用OSGi核心和组合库版本5.0.0。
- en: Now, we prune the generated project structure. We'll remove the prepopulated
    `blueprint.xml` file, the `main` folder, and the `test` folder.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将修剪生成的项目结构。我们将删除预先填充的`blueprint.xml`文件、`main`文件夹和`test`文件夹。
- en: Now, we'll implement our ManagedServiceFactory interface in the `src/main/java`
    folder. To do this, we'll create a factory class that implements the ManagedServiceFactory
    interface and plug a dispatcher into this framework, which will handle building
    and executing of Camel routes. We'll cover the intricacies of these classes in
    the *How it works…* section of this recipe.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在`src/main/java`文件夹中实现我们的ManagedServiceFactory接口。为此，我们将创建一个实现ManagedServiceFactory接口的工厂类，并将一个调度器插入到这个框架中，该框架将处理Camel路由的构建和执行。我们将在本配方的*工作原理*部分详细说明这些类的复杂性。
- en: Tip
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The OSGi compendium rev 5 ManagedServiceFactory interface can be found at the
    OSGi Alliance website at [http://www.osgi.org/javadoc/r5/cmpn/org/osgi/service/cm/ManagedServiceFactory.html](http://www.osgi.org/javadoc/r5/cmpn/org/osgi/service/cm/ManagedServiceFactory.html).
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OSGi组合库rev 5的ManagedServiceFactory接口可以在OSGi联盟网站上找到，网址为[http://www.osgi.org/javadoc/r5/cmpn/org/osgi/service/cm/ManagedServiceFactory.html](http://www.osgi.org/javadoc/r5/cmpn/org/osgi/service/cm/ManagedServiceFactory.html)。
- en: Next, we create a Blueprint file in the `src/main/resources` folder that wires
    together Configuration Admin, a Camel Context, and our `Factory` class.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在`src/main/resources`文件夹中创建一个Blueprint文件，将配置管理器、Camel上下文和我们的`Factory`类连接起来。
- en: '[PRE29]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The Blueprint file in the preceding code contains the general structural elements
    required; we will cover the details of these entries in the *How it works…* section
    of this recipe.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上一段代码中的Blueprint文件包含所需的一般结构元素；我们将在本配方中的*工作原理*部分详细说明这些条目的细节。
- en: The next step is building and deploying the router into Karaf. We build and
    deploy this assembly as a bundle into Karaf and provision it with configuration
    files in the `etc` folder. The configuration files each take the form of `PID-name.cfg`,
    with their contents being Java-style properties.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是构建和部署路由到Karaf。我们将把这个组装作为一个包构建并部署到Karaf中，并在`etc`文件夹中提供配置文件。配置文件的形式为`PID-name.cfg`，其内容为Java风格的属性。
- en: 'To build our sample project, execute the `mvn install` command. Deployment
    will require the following two commands:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要构建我们的示例项目，请执行`mvn install`命令。部署将需要以下两个命令：
- en: '[PRE30]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Our managed service factory implementation of a Camel Router is now ready for
    use. The last step is creating a configuration for our router instances. Consider
    a sample configuration of the `etc/com.packt.hellofactory-test1.cfg` file with
    the following entries:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对Camel Router的ManagedServiceFactory实现现在已准备好使用。最后一步是为我们的路由实例创建配置。考虑以下`etc/com.packt.hellofactory-test1.cfg`文件的示例配置：
- en: '[PRE31]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Also, consider the `etc/com.packt.hellofactory-test2.cfg` file with the following
    entries:'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还要考虑以下`etc/com.packt.hellofactory-test2.cfg`文件的条目：
- en: '[PRE32]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'On running appropriate commands, these sample configurations will produce the
    following output:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行适当的命令后，这些示例配置将产生以下输出：
- en: '[PRE33]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now that we've reviewed a high-level process to build a managed service factory
    implementation of a Camel Router, let's dive deep into how and why this works.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了构建Camel Router的ManagedServiceFactory实现的高级流程，让我们深入探讨它是如何以及为什么能工作的。
- en: How it works…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Bundles implementing the ManagedServiceFactory interface connect into the Configuration
    Admin service's capability to build and configure instances of the bundle. In
    our sample project, we use this functionality to create new route instances based
    upon the provided configurations.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了ManagedServiceFactory接口的包连接到配置管理器服务的构建和配置包实例的能力。在我们的示例项目中，我们使用此功能根据提供的配置创建新的路由实例。
- en: 'Each service (route) instance is represented by a factory configuration called
    PID. When a given PID is updated, Configuration Admin will call the factory''s
    updated method. If a new PID is passed in, then a new instance is created; if
    the PID exists, then its configuration is updated. The following diagram highlights
    the high-level view of the deployed components in Karaf:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务（路由）实例由一个称为PID的工厂配置表示。当给定的PID更新时，配置管理器将调用工厂的更新方法。如果传入新的PID，则创建新实例；如果PID存在，则更新其配置。以下图表突出了在Karaf中部署的组件的高级视图：
- en: '![How it works…](img/5081OS_02_06.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/5081OS_02_06.jpg)'
- en: 'When we deploy the Camel components and the sample project into Karaf, we''ll
    wire the MSF bundle and Configuration Admin via Blueprint. Under the hood, the
    MSF bundle is composed of three classes: `HelloConstants`, `HelloDispatcher`,
    and `HelloFactory`.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将Camel组件和示例项目部署到Karaf中时，我们将通过Blueprint将MSF包和配置管理器连接起来。在底层，MSF包由三个类组成：`HelloConstants`、`HelloDispatcher`和`HelloFactory`。
- en: 'The `HelloFactory` class implements the ManagedServiceFactory interface. In
    our sample project, we override the `getName()`, `updated(String pid, Dictionary
    dict)`, and `deleted(String pid)` methods. We then provide the initialization
    and destruction methods to clean up after our routers. Finally, we provide setters
    to wire in our PID, `bundleContext`, and `camelContext` objects. Let''s take a
    closer look at the core interface implementation in the `HelloFactory` class.
    Consider the following code:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloFactory`类实现了ManagedServiceFactory接口。在我们的示例项目中，我们重写了`getName()`、`updated(String
    pid, Dictionary dict)`和`deleted(String pid)`方法。然后，我们提供了初始化和销毁方法来清理我们的路由器。最后，我们提供了设置器来连接我们的PID、`bundleContext`和`camelContext`对象。让我们更详细地看看`HelloFactory`类中的核心接口实现。考虑以下代码：'
- en: '[PRE34]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We override the `getName()` method, returning our configuration PID, as shown
    in the preceding code. Consider the following code:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写了`getName()`方法，返回我们的配置PID，如前述代码所示。考虑以下代码：
- en: '[PRE35]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the `updated` method in the preceding code, we begin by setting up our `HelloDispatcher`
    engine. A map of `<PID, HelloDispatcher>` is maintained, which we use to internally
    track our Camel Routers. If we have a PID entry for the dispatcher, then we safely
    destroy the existing engine so that a new one can be constructed. Now, consider
    the following code:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述代码中的`updated`方法中，我们首先设置我们的`HelloDispatcher`引擎。维护一个`<PID, HelloDispatcher>`映射，我们使用它来内部跟踪我们的Camel路由器。如果我们有分配给调度器的PID条目，那么我们安全地销毁现有的引擎，以便可以构建一个新的。现在，考虑以下代码：
- en: '[PRE36]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We then verify the presence of the required configuration entries in the properties
    dictionary provided by Configuration Admin. These dictionaries are constructed
    when configuration files are placed in Karaf''s `etc` folder. Have a look at the
    following code:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们验证在配置管理器提供的属性字典中是否存在所需的配置条目。这些字典是在配置文件放置在Karaf的`etc`文件夹时构建的。请看以下代码：
- en: '[PRE37]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `updated` method then creates and configures a new `HelloDispatcher` object
    and then starts operating it. Now, consider the following code:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`updated`方法创建并配置一个新的`HelloDispatcher`对象，并开始操作它。现在，考虑以下代码：
- en: '[PRE38]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `deleted` method safely cleans up all currently executing `HelloDispatcher`
    objects (our routers) when a PID is removed.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当PID被移除时，`deleted`方法安全地清理所有当前正在执行的`HelloDispatcher`对象（我们的路由器）。
- en: To integrate the `HelloFactory` object into the container, we included the `init`
    and `destroy` methods. The `init` call is used to register the ManagedServiceFactory
    interface with the register service and establish a ServiceTracker wiring (which
    is a utility class that simplifies working with service references from the service
    registry) between the ManagedServiceFactory interface bundle and the Configuration
    Admin service. The `destroy` call's main function is to clean up by unregistering
    the bundle safely from the registerService and close its `ServiceTracker` object.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`HelloFactory`对象集成到容器中，我们包含了`init`和`destroy`方法。`init`调用用于将ManagedServiceFactory接口与注册服务注册，并在ManagedServiceFactory接口包和Configuration
    Admin服务之间建立ServiceTracker连接（这是一个实用工具类，它简化了从服务注册表中处理服务引用的工作）。`destroy`调用的主要功能是通过从registerService安全注销包并关闭其`ServiceTracker`对象来清理。
- en: 'The `HelloDispatcher` object implements our Camel Router. We provide start
    and stop methods that handle integration of our Camel route instance into an existing
    Camel Context. We also provide methods to set our parameters and specify the Camel
    Context we want to deploy our route into. Finally, we provide a mechanism from
    which our Camel route will be constructed. Let''s take a closer look at the route
    builder in the `HelloDispatcher` object. This is shown in the following code:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloDispatcher`对象实现了我们的Camel路由器。我们提供了启动和停止方法，用于将我们的Camel路由实例集成到现有的Camel上下文中。我们还提供了设置我们的参数和指定我们想要部署路由的Camel上下文的方法。最后，我们提供了一个机制，通过该机制我们的Camel路由将被构建。让我们更详细地看看`HelloDispatcher`对象中的路由构建器。如下代码所示：'
- en: '[PRE39]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding route uses a timer component to generate an event every 10 seconds
    and then sends a message to a log. The configuration elements provide a `routeId`
    based on the name parameter, and the log message contains the `greeting` and `name`
    parameters.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 上述路由使用计时器组件每10秒生成一个事件，然后将消息发送到日志中。配置元素基于名称参数提供`routeId`，日志消息包含`greeting`和`name`参数。
- en: Finally, `HelloConstants` is a utility class that provides our configuration
    parameter name constants.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`HelloConstants`是一个提供我们的配置参数名称常量的实用工具类。
- en: 'The wiring of the ManagedServiceFactory bundle to Configuration Admin happens
    inside our Blueprint XML file. Let''s take a closer look at the three important
    sections of this descriptor file, which are as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: ManagedServiceFactory包到Configuration Admin的连接发生在我们的Blueprint XML文件内部。让我们更详细地看看这个描述符文件中的三个重要部分，如下所示：
- en: '[PRE40]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `cm` namespace is used to set up configuration management. Consider the
    following code:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`cm`命名空间用于设置配置管理。考虑以下代码：'
- en: '[PRE41]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Our Camel Context is created as our route container. This context will be shared
    by each route instance we introduce to the system. Consider the following code:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Camel上下文作为我们的路由容器被创建。这个上下文将与我们引入系统的每个路由实例共享。考虑以下代码：
- en: '[PRE42]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, we wire together our `HelloFactory` object to the Blueprint context,
    Configuration Admin services, and to our shared Camel Context. We also wire in
    our factory''s `init` and `destroy` methods. The following diagram illustrates
    the three instances of the Camel route, each producing a different message based
    upon their configuration:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将`HelloFactory`对象连接到Blueprint上下文、Configuration Admin服务和我们的共享Camel上下文中。我们还连接了我们的工厂的`init`和`destroy`方法。以下图表说明了三个Camel路由实例，每个实例根据其配置产生不同的消息：
- en: '![How it works…](img/5081OS_02_07.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/5081OS_02_07.jpg)'
- en: Once our ManagedServiceFactory bundle, Blueprint file, and Configuration Admin
    services are wired together and started, it will now accept configurations and
    instantiate routes. In Karaf, you can add configuration files of the `pid-name.cfg`
    format to the `etc` folder. For example, in our sample project, our configuration
    files are named `com.packt.hellofactory-test1.cfg`, `com.packt.hellofactory-test2.cfg`,
    and so on.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的ManagedServiceFactory包、Blueprint文件和Configuration Admin服务连接在一起并启动，它现在将接受配置并实例化路由。在Karaf中，你可以将`pid-name.cfg`格式的配置文件添加到`etc`文件夹中。例如，在我们的示例项目中，我们的配置文件命名为`com.packt.hellofactory-test1.cfg`、`com.packt.hellofactory-test2.cfg`等等。
- en: See also
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information on ActiveMQ and CXF, read [Chapter 3](ch03.html "Chapter 3. Deploying
    a Message Broker with Apache ActiveMQ"), *Deploying a Message Broker with Apache
    ActiveMQ,* and [Chapter 4](ch04.html "Chapter 4. Hosting a Web Server with Pax
    Web"), *Hosting a Web Server with Pax Web*
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于ActiveMQ和CXF的更多信息，请参阅[第3章](ch03.html "第3章。使用Apache ActiveMQ部署消息代理")，*使用Apache
    ActiveMQ部署消息代理*和[第4章](ch04.html "第4章。使用Pax Web托管Web服务器")，*使用Pax Web托管Web服务器*
