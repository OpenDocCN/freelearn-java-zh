- en: Testing Spring Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Spring 应用程序
- en: In this chapter, we will learn about different ways to test Spring applications.
    This section will focus on unit tests and how they are different than the other
    test types. After studying a bit of theory, you can continue to the practical
    sub-section, where you should start writing simple unit tests on their own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习测试 Spring 应用程序的不同方法。本节将重点介绍单元测试以及它们与其他测试类型的不同之处。在研究了一些理论知识后，你可以继续阅读实践部分，在那里你应该开始独立编写简单的单元测试。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Create unit tests for Spring applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Spring 应用程序创建单元测试
- en: Create integration tests that start parts of the application internally
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建内部启动应用程序部分的集成测试
- en: Utilize the rich Spring toolset for tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用丰富的 Spring 工具集进行测试
- en: Analyze the different test types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析不同的测试类型
- en: Applying Unit Tests
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用单元测试
- en: In the previous chapters, you saw how you can create a Spring application and
    how you can add dependencies among components within the application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你看到了如何创建 Spring 应用程序以及如何在应用程序内部添加组件之间的依赖关系。
- en: In this section, you will see how you can test the classes of your application
    as regular classes or with some Spring support for wiring dependencies. Writing
    these tests on your own is important so that you know what you wrote works. UI
    tests are sometimes written by a dedicated QA department.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解如何将应用程序的类作为常规类或使用一些 Spring 支持的依赖项连接方式来测试。自己编写这些测试非常重要，这样你才能知道你所编写的代码是否有效。UI
    测试有时由专门的 QA 部门编写。
- en: By using these fake dependencies, you can simulate behavior of other classes
    or verify that the dependency has been called the correct way. For more information,
    especially on fake dependencies and mocking, you can have a look at Martin Fowler's
    article at [https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs](https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些虚假依赖，你可以模拟其他类的行为或验证依赖是否以正确的方式被调用。有关更多信息，特别是关于虚假依赖和模拟的内容，你可以查看马丁·福勒的文章，链接为[https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs](https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs)。
- en: Unit Testing
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: In software development, you have multiple layers of tests that you can write.
    Unit tests are the most basic tests that test small parts of the software and
    usually run very fast. They are very important to verify that the functionality
    that you wrote works on a fundamental level.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，你可以编写多个测试层。单元测试是最基本的测试，它测试软件的小部分，通常运行非常快。它们对于验证你所编写的功能在基本层面上是否有效非常重要。
- en: For example, consider a method that adds two numbers, which is used in some
    ledger applications. You want to make sure that this method is able to cope with
    all sorts of errors and inputs. This can be easily tested by using unit tests.
    There is virtually no setup, and they can test a lot in a short amount of time.
    You can even test very detailed things such as integer overflows when you add
    two very big numbers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个用于某些账簿应用程序中添加两个数字的方法。你想要确保这个方法能够处理各种错误和输入。这可以通过使用单元测试轻松完成。实际上没有设置，它们可以在短时间内测试很多内容。你甚至可以测试非常详细的事情，比如当你添加两个非常大的数字时整数溢出。
- en: 'There is a testing pyramid, which highlights that the most tests should consist
    of unit tests:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 测试金字塔，突出了大多数测试应由单元测试组成：
- en: '![](img/81e14f01-26d0-4107-abbe-08831a53aef0.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/81e14f01-26d0-4107-abbe-08831a53aef0.png)'
- en: Test Types – Side by Side
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试类型 – 并列
- en: 'There is no fixed definition on the testing terms, but besides unit tests,
    there are also two other types that are commonly referred to: integration tests
    and UI tests. Depending on the project, there are also test types in-between these
    three types:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 测试术语没有固定的定义，但除了单元测试之外，还有两种常见的测试类型：集成测试和 UI 测试。根据项目不同，在这三种类型之间还有其他测试类型：
- en: 'Take a look at the following table that highlights the main concepts:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下表格，它突出了主要概念：
- en: '![](img/368a9b3a-292c-4dbd-ad8b-5a7c8b6a272b.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/368a9b3a-292c-4dbd-ad8b-5a7c8b6a272b.png)'
- en: When writing tests, make sure that they are reliable. Try to avoid random numbers,
    time-based assertions, and so on. Whenever possible or necessary, try to provide
    a fixed set of numbers or your own "clock" so that you can reliably test your
    code. Nothing is worse than tests that fail from time to time because of an edge
    case, for example, due to date changes or unforeseen random numbers. There are
    input generators that can provide you with random data that fits a provided set
    of requirements, but overall, I would suggest sticking to reproducible, well-known
    (and thought through) inputs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，请确保它们是可靠的。尽量避开随机数、基于时间的断言等。在可能或必要时，尽量提供一组固定的数字或您自己的“时钟”，以便您可以可靠地测试您的代码。没有什么比由于边缘情况（例如，日期变化或不可预见的随机数）而偶尔失败的测试更糟糕了。有一些输入生成器可以提供符合提供的一组要求的随机数据，但总的来说，我建议坚持使用可重复的、众所周知的（并且经过深思熟虑的）输入。
- en: Writing Unit Tests with Plain JUnits
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Plain JUnits编写单元测试
- en: 'The Spring Initializr already adds the test dependencies and also creates an
    empty test class for you. We are going to show you how to write unit tests by
    testing the `BlogRepository` based on the code of *Configuration of Spring Boot
    Applications* from *[Chapter 2](f4efef8a-3e71-483b-84be-a741a3f8ff0d.xhtml): Building
    a Spring Application*. The most bare-bones way to write tests is to just use JUnit
    and test the class on its own.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Initializr已经添加了测试依赖项，并为您创建了一个空白的测试类。我们将通过基于*Spring Boot应用程序配置*的代码测试`BlogRepository`来向您展示如何编写单元测试。编写测试的最基本方式是仅使用JUnit并测试类本身。
- en: 'To be able to set a list of blog entries, we have to add a setter to the `BlogRepository`
    class, or we can create a constructor that we can use in the test. Alternatively,
    we can simply use constructor injection by adding the annotation `@AllArgsConstructor`
    to the `BlogRepository`. Of course, this class is very simple, and usually you
    don''t use an in-memory list as a data source, so this example is a little bit
    fabricated to show unit testing:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置一系列博客条目，我们必须向`BlogRepository`类添加一个setter，或者我们可以创建一个可以在测试中使用的构造函数。或者，我们可以简单地通过向`BlogRepository`添加`@AllArgsConstructor`注解来实现构造函数注入。当然，这个类非常简单，通常您不会使用内存中的列表作为数据源，所以这个例子有点人为地制造，以展示单元测试：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This test creates the `BlogRepository` with an `ArrayList` instance that is
    under our control. Then, we can add the `BlogEntry` and verify that it has been
    stored. We are using `assertThat()` from `AssertJ`, which is a very nice assertion
    framework that is already added as a dependency by Spring.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试创建了一个由我们控制的`ArrayList`实例的`BlogRepository`。然后，我们可以添加`BlogEntry`并验证它已被存储。我们正在使用来自`AssertJ`的`assertThat()`，这是一个非常棒的断言框架，它已经被Spring作为依赖项添加。
- en: Writing Unit Tests with Mockito Support
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mockito支持编写单元测试
- en: By default, **Mockito**, a mocking framework, is also included in the dependencies,
    and it has a nice Spring integration as well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Mockito，一个模拟框架，也包含在依赖项中，并且它还有一个很好的Spring集成。
- en: 'You just add the runner by using the `@RunWith` annotation, and then you can
    define the class you want to test as a field and mark it with the `@InjectMocks`
    annotation. All dependencies that you want to use can be added with the `@Mock`
    annotation. They will be recreated for each test and contain a mocked version
    of the class. In your test, you can define the behavior for calls by using `Mockito.when(...)`.
    You can also verify that, for example, certain calls have been made with given
    parameters. This is done using the `Mockito.verify(...)` methods. The injection
    works as it does with Spring, so when Spring is able to autowire a dependency,
    Mockito will very likely be able to as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需使用`@RunWith`注解添加运行器，然后可以将您想要测试的类定义为字段，并用`@InjectMocks`注解标记它。所有您想要使用的依赖项都可以通过`@Mock`注解添加。它们将在每个测试中重新创建，并包含类的模拟版本。在您的测试中，您可以使用`Mockito.when(...)`定义调用行为。您还可以验证例如，某些调用是否已使用给定的参数进行。这是通过使用`Mockito.verify(...)`方法完成的。注入的工作方式与Spring相同，因此当Spring能够自动装配依赖项时，Mockito很可能也能做到：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For detailed information regarding Mockito, please check out its website at [http://site.mockito.org/](http://site.mockito.org/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Mockito的详细信息，请访问其网站[http://site.mockito.org/](http://site.mockito.org/)。
- en: Creating Unit Tests
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建单元测试
- en: 'The aim is to create small unit tests for classes. Now you are going to write
    your own unit tests for the `BlogService` class. Writing tests is very important
    to ensure that your code not only works now, but also keeps working when the project
    advances. So, in professional software development, writing unit tests and the
    other test types is very important. The steps for completion are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是为类创建小的单元测试。现在你将为你自己的 `BlogService` 类编写单元测试。编写测试对于确保你的代码不仅现在能工作，而且在项目发展时也能继续工作非常重要。因此，在专业软件开发中，编写单元测试和其他测试类型非常重要。完成步骤如下：
- en: Open the IDE and the `BlogMania` application for this section.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IDE 和 `BlogMania` 应用程序进行本节。
- en: 'Take a look at this screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个截图：
- en: '![](img/41ac7889-4156-486c-a53d-17c28d2198f8.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/41ac7889-4156-486c-a53d-17c28d2198f8.png)'
- en: Open the `BlogService` class, place the cursor on the class name, and press
    Shift-CTRL-T, which should open a menu to create the test class.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `BlogService` 类，将光标放在类名上，然后按 Shift-CTRL-T，这将打开一个菜单以创建测试类。
- en: Select JUnit as `test-library`, select the save method in the box at the bottom,
    and press OK. IntelliJ will create and open the file.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 JUnit 作为 `test-library`，在底部的框中选择保存方法，然后按 OK。IntelliJ 将创建并打开文件。
- en: Add the Mockito annotations and fields for the service and its dependencies.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为服务和其依赖项添加 Mockito 注解和字段。
- en: Create a simple test for the public methods of the `BlogService`. For example,
    check that the entry is stored, that certain methods are called on the dependencies,
    or that the output starts with a given string.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `BlogService` 的公共方法创建一个简单的测试。例如，检查条目是否已存储，某些方法是否在依赖项上被调用，或者输出是否以给定的字符串开头。
- en: All data is present and add has been called on the `BlogRepository`. The blog's
    title is missing, and you expect an `IllegalArgumentException`. You can add a
    try catch to the test method or examine the `@Test` annotation, as it has a property
    for that.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据都存在，并且已经在 `BlogRepository` 上调用了 `add` 方法。博客的标题缺失，你期望抛出 `IllegalArgumentException`。你可以在测试方法中添加
    try-catch 块，或者检查 `@Test` 注解，因为它有相应的属性。
- en: Go to [https://bit.ly/2p4Wc3C](https://bit.ly/2p4Wc3C) to access the code for
    the `BlogServiceTest.java` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2p4Wc3C](https://bit.ly/2p4Wc3C) 访问 `BlogServiceTest.java`
    文件的代码。
- en: Go to [https://bit.ly/2NDu8SQ](https://bit.ly/2NDu8SQ) to access the code for
    the `BlogmaniaApplicationTests.java` file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2NDu8SQ](https://bit.ly/2NDu8SQ) 访问 `BlogmaniaApplicationTests.java`
    文件的代码。
- en: Add another test that checks whether a date has been added when it's not set
    before the entry is saved by the repository.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个测试，检查在保存条目之前未设置日期时，是否已添加日期。
- en: Now, you have created your first simple unit tests for a spring class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经为 Spring 类创建了第一个简单的单元测试。
- en: 'Take a look at the screenshot of your outcome:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你的结果截图：
- en: '![](img/1a0ef137-d440-41e5-9f52-9895dd901414.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1a0ef137-d440-41e5-9f52-9895dd901414.png)'
- en: Integration Tests
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: In the previous section, you saw how you can test Spring applications using
    unit tests.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你看到了如何使用单元测试测试 Spring 应用程序。
- en: While this is a very important way to test your application, a few things should
    be tested with more of the infrastructure of the application and maybe the surrounding
    services that are present. You might want to test whether the SQL you send to
    the database works or that your REST API generates the correct JSON format when
    all of Spring's mechanisms are in place and active.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是测试应用程序的一种非常重要的方式，但应该用更多应用程序的基础设施和可能存在的周围服务来测试一些事情。你可能想测试你发送到数据库的 SQL 是否工作，或者当所有
    Spring 的机制都就绪并激活时，你的 REST API 是否生成正确的 JSON 格式。
- en: In this section, you will create integration tests of different kinds and dip
    your toes into the test support of Spring.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建不同类型的集成测试，并初步了解 Spring 的测试支持。
- en: JUnit has the concept of a test runner, which handles the way the tests in this
    particular class are executed. This is used by Mockito to create mocked instances
    before the tests are executed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 有一个测试运行器的概念，它处理这个特定类中测试的执行方式。Mockito 使用它来在测试执行之前创建模拟实例。
- en: To make a test for a Spring integration test, you only need to add the `SpringRunner`
    as a JUnit test runner and add the `@SpringBootTest` annotation to the test class.
    This enables Spring to start the application inside the test and make it available
    for you.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Spring 集成测试编写测试，你只需要将 `SpringRunner` 添加为 JUnit 测试运行器，并将 `@SpringBootTest`
    注解添加到测试类中。这使 Spring 能够在测试中启动应用程序，并使其对你可用。
- en: The @SpringBootTest Annotation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@SpringBootTest` 注解'
- en: 'Take a look at this sample code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个示例代码：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This test starts up and only serves the purpose of checking whether you have
    made a mistake configuring Spring. The reason for this is that this only fails
    when the Spring context can't start, for example, due to missing classes or Bean
    definitions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试启动并仅用于检查你是否在配置 Spring 时犯了错误。原因是这只有在 Spring 上下文无法启动时才会失败，例如，由于缺少类或 Bean 定义。
- en: Integration tests are usually much slower than unit tests. Try to keep the number
    of integration tests low. Don't try to test every aspect using ITs. Negative tests
    should be done as unit tests. Try to write mainly "happy-path" tests that verify
    basic functionality. When it takes too long to run all tests, they lose their
    value as a feedback mechanism during development.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试通常比单元测试慢得多。尽量减少集成测试的数量。不要试图使用 ITs 测试每个方面。负测试应作为单元测试进行。尽量编写主要是“快乐路径”测试，以验证基本功能。当所有测试运行时间过长时，它们在开发过程中的反馈机制价值就会降低。
- en: Testing Beans
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Bean
- en: 'When we revisit the `BlogRepositoryTest` and recreate it as an integration
    test, it would look as follow:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重新访问 `BlogRepositoryTest` 并将其重新创建为一个集成测试时，它看起来如下所示：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we now have to verify the result of the test in the `db-bean`,
    because this way we don't have a way to verify calls on the `BlogRepository`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们现在必须在 `db-bean` 中验证测试的结果，因为这样我们就无法验证 `BlogRepository` 上的调用。
- en: This means that we have to check whether the call had the desired effect by
    hand.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们必须手动检查调用是否产生了预期的效果。
- en: However, the advantage is that all of the mechanisms that Spring offers are
    in place. So, when there are proxies around Beans or special scopes on Beans,
    for example, you can test that using these tests. You can also test your web applications
    using these kinds of tests, but due to time constraints, this will not be covered
    in this book.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，优势在于 Spring 提供的所有机制都到位了。因此，当有代理在 Bean 附近或 Bean 有特殊作用域时，例如，你可以使用这些测试来测试它。你也可以使用这些类型的测试来测试你的
    Web 应用程序，但由于时间限制，这将在本书中不涉及。
- en: 'There is a reason that Mockito is already added by Spring. We can simply mock
    Beans in a test and verify their calls or configure effects of calls on a Bean:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito 已经被 Spring 添加，这是有原因的。我们可以在测试中简单地模拟 Bean，并验证它们的调用或配置 Bean 调用的效果：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By marking the list with `@MockBean`, we utilize Spring's Mockito support. We
    now get the full Spring context, but this Bean has been replaced with a mocked
    version. We can configure it any way we need it for the test. This is a very handy
    feature and allows us to write tests with ease, which would have been very complex
    to write otherwise.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `@MockBean` 标记列表，我们利用了 Spring 的 Mockito 支持。我们现在得到了完整的 Spring 上下文，但这个 Bean
    已经被替换为模拟版本。我们可以根据测试需要对其进行配置。这是一个非常方便的功能，使我们能够轻松编写测试，否则这将非常复杂。
- en: There are also other annotations such as `@SpyBean`, which wrap a proxy around
    the original Bean to enable you to verify whether certain calls are made, while
    keeping the old functionality intact.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些注解，如 `@SpyBean`，它将代理包装在原始 Bean 上，以便你可以验证是否执行了某些调用，同时保持旧功能完整。
- en: Configuring the Test Context
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置测试上下文
- en: 'When you only use the `@SpringBootTest` annotation, you will get the full Spring
    context. This may not always be what you need for your tests. In this case, you
    can configure Spring differently for your test:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只使用 `@SpringBootTest` 注解时，你会得到完整的 Spring 上下文。这并不总是你测试所需要的。在这种情况下，你可以为你的测试配置不同的
    Spring：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Go to [https://bit.ly/2NGKolQ](https://bit.ly/2NGKolQ) to access the complete
    code for the *Configuring the Test Context code example*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2NGKolQ](https://bit.ly/2NGKolQ) 访问 *配置测试上下文代码示例* 的完整代码。
- en: In this example, we are configuring two properties for the Spring context and
    we are also preventing the whole context from starting. We provide the `TestConfigClass`
    to the `@SpringBootTest` annotation, which will be used to start the application
    context. In this case, we only load Beans from the service package and provide
    our own `db-bean`, which in this case uses a `LinkedList`. If the `ComponentScan`
    adds a `db-bean` as well, then our local Bean overrides the Bean from the scan.
    As you can see, this provides you with a lot of ways to modify and monitor what
    your application code does when you test it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在为 Spring 上下文配置两个属性，并且阻止整个上下文启动。我们将 `TestConfigClass` 提供给 `@SpringBootTest`
    注解，该注解将用于启动应用程序上下文。在这种情况下，我们只从服务包加载 Bean，并提供了我们自己的 `db-bean`，在这种情况下使用了一个 `LinkedList`。如果
    `ComponentScan` 也添加了一个 `db-bean`，那么我们的本地 Bean 将覆盖扫描中的 Bean。正如你所看到的，这为你提供了很多修改和监控应用程序代码在测试时行为的方法。
- en: 'Activity: Writing Integration Tests'
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：编写集成测试
- en: '**Aim**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: To write integration tests for the application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写应用程序的集成测试。
- en: '**Scenario**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: You should reuse the project that has been used for this chapter and open it
    in the IDE.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该重用本章中使用的项目，并在 IDE 中打开它。
- en: '**Steps for Completion**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create a new integration test class on your own.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自己的基础上创建一个新的集成测试类。
- en: 'Take a look at this screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个截图：
- en: '![](img/aafda812-ad23-454f-9223-22efc26bd431.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aafda812-ad23-454f-9223-22efc26bd431.png)'
- en: Create various tests for the method of the service.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为服务的方法创建各种测试。
- en: Create a happy path test.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个愉快的路径测试。
- en: Create tests for interesting parameter combinations.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为有趣的参数组合创建测试。
- en: Fix the service code.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复服务代码。
- en: 'For those of you that are advanced:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些高级用户：
- en: 'Create the following types of tests, have a look at them, and analyze their
    advantages/disadvantages (omit the type you created in *step 2*):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下类型的测试，查看它们，并分析它们的优缺点（省略你在 *步骤 2* 中创建的类型）：
- en: Unit tests without Mockito
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有使用 Mockito 的单元测试
- en: Unit tests with Mockito
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mockito 的单元测试
- en: Integration tests without any mocking
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有模拟的集成测试
- en: Integration tests with `MockBeans`
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `MockBeans` 的集成测试
- en: Integration tests with `SpyBeans`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `SpyBeans` 的集成测试
- en: Go to [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4) to access the code for
    the `BlogService` test files. To refer to the detailed steps, go to the *Solutions* section
    at the end of this book on page 251.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4) 访问 `BlogService` 测试文件的代码。要参考详细的步骤，请查看本书末尾第
    251 页的 *解决方案* 部分。
- en: '**Outcome**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: 'The resulting code is in the `com/packt/springboot/blogmania/blogentries/service/activity`
    package of the source code by going to [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4).
    Take a look at this screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问 [https://bit.ly/2MqhUZ4](https://bit.ly/2MqhUZ4) 并转到源代码的 `com/packt/springboot/blogmania/blogentries/service/activity`
    包，可以得到生成的代码。查看这个截图：
- en: '![](img/d9067b68-fa64-402c-b9dc-3e3ddd9cada7.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d9067b68-fa64-402c-b9dc-3e3ddd9cada7.png)'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw how you can test a Spring application. You have experienced
    the simplicity and the speed of unit tests and the expressiveness and power of
    integration tests.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你看到了如何测试 Spring 应用程序。你体验了单元测试的简单性和速度以及集成测试的表达力和强大功能。
- en: In the next chapter, we will start looking at web application development, so
    that you can create applications that really matter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探讨 Web 应用程序开发，这样你就可以创建真正重要的应用程序。
