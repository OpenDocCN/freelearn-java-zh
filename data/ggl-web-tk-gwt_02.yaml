- en: Chapter 2. Creating a New GWT Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。创建一个新的GWT应用程序
- en: In this chapter, we will use the GWT tools to generate a skeleton project structure
    and files, with and without Eclipse support. We will then create our first AJAX
    application (a random quote application) by modifying the generated application
    to add functionality and finally run the application in both hosted and web mode.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用GWT工具生成一个骨架项目结构和文件，有时还会使用Eclipse支持。然后，我们将通过修改生成的应用程序来添加功能，最终在托管模式和Web模式下运行应用程序。
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要处理的任务是：
- en: Generating a new application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个新应用程序
- en: Generating a new application with Eclipse support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse支持生成一个新应用程序
- en: Creating a random quote AJAX application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个随机引用AJAX应用程序
- en: Running the application in hosted mode
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在托管模式下运行应用程序
- en: Running the application in web mode
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Web模式下运行应用程序
- en: Generating a New Application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成一个新应用程序
- en: We will generate a new GWT application by using one of the GWT scripts. These
    helper scripts provided by GWT create the skeleton of a GWT project with the basic
    folder structure and initial project files, so that we can get started in creating
    our new application as quickly as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用GWT脚本之一生成一个新的GWT应用程序。GWT提供的这些辅助脚本创建了一个带有基本文件夹结构和初始项目文件的GWT项目的骨架，以便我们可以尽快开始创建我们的新应用程序。
- en: Time for Action—Using the ApplicationCreator
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-使用ApplicationCreator
- en: 'The GWT distribution contains a command-line script named `applicationCreator`
    that can be used to create a skeleton GWT project with all the necessary scaffolding.
    To create a new application, follow the steps given below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GWT分发包含一个名为`applicationCreator`的命令行脚本，可用于创建一个带有所有必要脚手架的骨架GWT项目。要创建一个新应用程序，请按照以下步骤进行：
- en: Create a new directory named `GWTBook`. We will refer to this directory location
    as `GWT_EXAMPLES_DIR`. This folder will contain all the projects that will be
    created while performing the various tasks in this book.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`GWTBook`的新目录。我们将把这个目录位置称为`GWT_EXAMPLES_DIR`。这个文件夹将包含在本书中执行各种任务时创建的所有项目。
- en: Now create a subdirectory and name it `HelloGWT`. This directory will contain
    the code and the files for the new project that we are going to create in this
    chapter.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个子目录并将其命名为`HelloGWT`。这个目录将包含我们将在本章中创建的新项目的代码和文件。
- en: 'Run the `GWT_HOME\applicationCreator` by providing the following parameters
    in the command prompt:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中提供以下参数运行`GWT_HOME\applicationCreator`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `-out` parameter specifies that all the artifacts be generated in the directory
    named `HelloGWT`. The fully qualified class name provided as the last parameter
    is used as the name of the class that is generated by the `applicationCreator`
    script and marked as the `EntryPoint` class for this application (we will cover
    the `EntryPoint` class in the next section).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`-out`参数指定所有工件生成在名为`HelloGWT`的目录中。作为最后一个参数提供的完全限定的类名被用作`applicationCreator`脚本生成的类的名称，并标记为此应用程序的`EntryPoint`类（我们将在下一节中介绍`EntryPoint`类）。'
- en: 'The above step will create the folder structure and generate several files
    in the `GWT_EXAMPLES_DIR\HelloGWT` directory as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤将在`GWT_EXAMPLES_DIR\HelloGWT`目录中创建文件夹结构并生成多个文件，如下面的屏幕截图所示：
- en: '![Time for Action—Using the ApplicationCreator](img/1007_02_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用ApplicationCreator](img/1007_02_01.jpg)'
- en: What Just Happened?
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The `applicationCreator` script invokes the `ApplicationCreator` class in `gwt‑dev‑xxx.jar`,
    which in turn creates the folder structure and generates the application files.
    This makes it very easy to get started on a new project as the whole structure
    for the project is automatically created for you. All you need to do is start
    filling in the application with your code to provide the desired functionality.
    A uniform way of creating projects also ensures adherence to a standard directory
    structure, which makes it easier for you when you are working on different GWT
    projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationCreator`脚本调用`gwt‑dev‑xxx.jar`中的`ApplicationCreator`类，后者又创建了文件夹结构并生成了应用程序文件。这使得在新项目上开始变得非常容易，因为整个项目的结构都会自动为您创建。您所需要做的就是开始用您的代码填写应用程序，以提供所需的功能。统一的项目创建方式还确保遵守标准的目录结构，这在您处理不同的GWT项目时会更加方便。'
- en: 'Here are all the files and folders that were automatically created under the
    `GWT_EXAMPLES_DIR\HelloGWT` directory when we ran the `applicationCreator` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`applicationCreator`命令时，在`GWT_EXAMPLES_DIR\HelloGWT`目录下自动创建的所有文件和文件夹如下：
- en: '`src`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`'
- en: '`HelloGWT-compile.cmd`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloGWT-compile.cmd`'
- en: '`HelloGWT-shell.cmd`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloGWT-shell.cmd`'
- en: '**src:** This folder contains all the generated source and configuration files
    for the applications, contained in the familiar Java package structure, with the
    root package being `com.packtpub.gwtbook.hellogwt`. This package name was deduced
    by `applicationCreator` from the fully qualified class name that we provided as
    a parameter to it. The generated files under this directory are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**src:** 这个文件夹包含了所有为应用程序生成的源代码和配置文件，以熟悉的Java包结构进行组织，根包为`com.packtpub.gwtbook.hellogwt`。这个包名是由`applicationCreator`根据我们提供的完全限定的类名推断出来的。在这个目录下生成的文件有：'
- en: '`com\packtpub\gwtbook\hellogwt\HelloGWT.gwt.xml:` This is the project module—an
    XML file that holds the entire configuration needed by a GWT project. The `inherits`
    tag specifies modules inherited by this module. In this simple case, we are inheriting
    only the functionality provided by the `User` module, which is built into the
    GWT. On more complex projects, module inheritance provides a nice way to reuse
    pieces of functionality. The `EntryPoint` refers to the class that will be instantiated
    by the GWT framework when the module is loaded. This is the class name provided
    to the `applicationCreator` command, when we created the project. The following
    code can be found in this file:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com\packtpub\gwtbook\hellogwt\HelloGWT.gwt.xml:` 这是项目模块——一个XML文件，包含了GWT项目所需的全部配置。`inherits`标签指定了该模块继承的模块。在这个简单的例子中，我们只继承了GWT内置的`User`模块提供的功能。在更复杂的项目中，模块继承提供了一种很好的重用功能的方式。`EntryPoint`指的是当模块加载时GWT框架将实例化的类。这是在创建项目时提供给`applicationCreator`命令的类名。以下代码可以在这个文件中找到：'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`com\packtpub\gwtbook\hellogwt\client\HelloGWT.java:` This is the entry point
    for our application. It extends the `EntryPoint` class, and when the `HelloGWT`
    module is loaded by the GWT framework, this class is instantiated and its `onModuleLoad()`
    method is automatically called. In this generated class, the `onModuleLoad()`
    method creates a button and a label, and then adds them to the page. It also adds
    a click listener for the button. We will be modifying the code in `HellowGWT.java`
    to create a new application later in this chapter. The current code in this file
    is as follows:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com\packtpub\gwtbook\hellogwt\client\HelloGWT.java:` 这是我们应用程序的入口点。它扩展了`EntryPoint`类，当GWT框架加载`HelloGWT`模块时，这个类被实例化，并且它的`onModuleLoad()`方法会被自动调用。在这个生成的类中，`onModuleLoad()`方法创建了一个按钮和一个标签，然后将它们添加到页面上。它还为按钮添加了一个点击监听器。我们将在本章后面修改`HellowGWT.java`中的代码来创建一个新的应用程序。这个文件中的当前代码如下：'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`com\packtpub\gwtbook\hellogwt\public\HelloGWT.html:` This is a generated HTML
    page that loads the `HelloGWT` application and is referred to as the **host page**,
    as this is the web page that hosts the `HelloGWT` application. Even though this
    HTML file is deceptively simple, there are some points that you need to be aware
    of:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com\packtpub\gwtbook\hellogwt\public\HelloGWT.html:` 这是一个生成的HTML页面，加载了`HelloGWT`应用程序，并被称为**主机页面**，因为这是托管`HelloGWT`应用程序的网页。尽管这个HTML文件看起来非常简单，但有一些需要注意的地方：'
- en: 'Firstly, it contains a meta tag that points to the `HelloGWT` module directory.
    This tag is the connection between the HTML page and the `HelloGWT` application.
    The following code represents this connection:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它包含一个指向`HelloGWT`模块目录的元标记。这个标记是HTML页面和`HelloGWT`应用程序之间的连接。以下代码表示了这个连接：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Secondly, the `script` tag imports code from the `gwt.js` file. This file contains
    the code (shown below) required to bootstrap the GWT framework. It uses the configuration
    in the `HelloGWT.gwt.xml` file, and then dynamically loads the JavaScript created
    by compiling the `HelloGWT.java` file to present the application. The `gwt.js`
    file does not exist when we generate the skeleton project. It is generated by
    the GWT framework when we run the application in hosted mode or when we compile
    the application.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，`script`标签导入了来自`gwt.js`文件的代码。这个文件包含了引导GWT框架所需的代码（如下所示）。它使用`HelloGWT.gwt.xml`文件中的配置，然后动态加载通过编译`HelloGWT.java`文件生成的JavaScript来呈现应用程序。当我们生成骨架项目时，`gwt.js`文件并不存在。它是在我们在托管模式下运行应用程序或者编译应用程序时由GWT框架生成的。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`HelloGWT-compile.cmd:` This file contains a command script for compiling the
    application into HTML and JavaScript.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloGWT-compile.cmd:` 这个文件包含了一个用于将应用程序编译成HTML和JavaScript的命令脚本。'
- en: '`HelloGWT-shell.cmd:` This file contains a command script for running the application
    in the hosted mode.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloGWT-shell.cmd:` 这个文件包含了一个用于在托管模式下运行应用程序的命令脚本。'
- en: There is a well-defined relationship between these generated files. The `HelloGWT.html`
    file is the host page that loads the `gwt.js` file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些生成的文件之间有着明确定义的关系。`HelloGWT.html`文件是加载`gwt.js`文件的主机页面。
- en: There's More!
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多！
- en: 'The `applicationCreator` provides options to control several parameters for
    a new application. You can see these options by executing it from the following
    command line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationCreator`提供了控制新应用程序的几个参数的选项。您可以通过从以下命令行执行它来查看这些选项：'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![There''s More!GWTgenerating application, ApplicationCreator used](img/1007_02_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![There''s More!GWTgenerating application, ApplicationCreator used](img/1007_02_02.jpg)'
- en: '`className` is the only required parameter for the `applicationCreator`. All
    the other parameters are optional. Here are some different ways to run `applicationCreator:`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`className`是`applicationCreator`的唯一必需参数。所有其他参数都是可选的。以下是运行`applicationCreator`的一些不同方式：'
- en: 'Create a new application without the Eclipse debug support:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用Eclipse调试支持创建一个新的应用程序：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new application with the Eclipse debug support:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse调试支持创建一个新的应用程序：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new application with the Eclipse debug support that overwrites any
    previously generated classes with the same name:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse调试支持创建一个新的应用程序，覆盖任何先前生成的同名类：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Google recommends the following package naming convention for the source code
    for a GWT application. This will separate your project code by its functionality.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Google建议为GWT应用程序的源代码使用以下包命名约定。这将根据其功能将项目代码分离。
- en: '`client:` This holds all the client-related application code. This code can
    only use the Java classes from the `java.util` and `java.lang` packages that are
    provided by the GWT''s `JRE Emulation` library.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client:` 这个包含了所有与客户端相关的应用程序代码。这些代码只能使用GWT的`JRE Emulation`库提供的`java.util`和`java.lang`包中的Java类。'
- en: '`public:` This contains all the static web resources that are needed by the
    application, such as the HTML files, stylesheets, and image files. This directory
    includes the host page, which is the HTML file that contains the AJAX application
    (`HelloGWT.html` in the above case).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public：`这包含应用程序所需的所有静态web资源，如HTML文件、样式表和图像文件。此目录包括主机页面，即包含AJAX应用程序的HTML文件（在上面的情况下为`HelloGWT.html`）。'
- en: '`server:` This contains server-side code. These classes can use any Java class
    and any Java library to provide the functionality.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server：`这包含服务器端代码。这些类可以使用任何Java类和任何Java库来提供功能。'
- en: The modules for the application, such as `HelloGWT.gwt.xml` must be placed in
    the root package directory as a peer to the client, public, and server packages.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的模块，如`HelloGWT.gwt.xml`必须放在根包目录中，作为客户端、公共和服务器包的同级目录。
- en: Generating a New Application with Eclipse Support
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Eclipse支持生成新应用程序
- en: GWT comes out of the box with support for debugging GWT applications in the
    Eclipse IDE. This is a tremendously useful and time-saving feature. In this section,
    we are going to learn how to create new applications with the Eclipse IDE support.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GWT默认支持在Eclipse IDE中调试GWT应用程序。这是一个非常有用和节省时间的功能。在本节中，我们将学习如何使用Eclipse IDE支持创建新应用程序。
- en: Time for Action—Modifying HelloGWT
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-修改HelloGWT
- en: 'The `HelloGWT` application that we have created in the previous task works
    fine and we can make modifications to it, and run it easily. However, we are not
    taking advantage of one of GWT''s biggest benefits—Eclipse IDE support that enhances
    the entire development experience. We will now recreate the same `HelloGWT` application,
    this time as an Eclipse project. It would have been nice if we could take the
    project that we created in the previous task and add Eclipse support for it. However,
    GWT does not support this at present. To do this, follow the steps given on the
    next page:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一个任务中创建的`HelloGWT`应用程序运行良好，我们可以对其进行修改，并且很容易地运行它。但是，我们没有充分利用GWT的最大优势之一-增强整个开发体验的Eclipse
    IDE支持。现在，我们将重新创建相同的`HelloGWT`应用程序，这次作为一个Eclipse项目。如果我们可以将上一个任务中创建的项目添加Eclipse支持就好了。但是，目前GWT不支持这样做。要做到这一点，请按照下一页上给出的步骤进行操作：
- en: 'GWT provides a `projectCreator` script that creates Eclipse project files.
    Run the script with the parameters and you will see a screen as shown below:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GWT提供了一个`projectCreator`脚本，用于创建Eclipse项目文件。使用参数运行脚本，您将看到如下所示的屏幕：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Time for Action—Modifying HelloGWT](img/1007_02_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-修改HelloGWT](img/1007_02_03.jpg)'
- en: 'Now run the `applicationCreator` again with the parameters given below to create
    the HelloGWT project as an Eclipse project:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用下面给出的参数再次运行`applicationCreator`，以将HelloGWT项目创建为Eclipse项目：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `-overwrite` parameter will overwrite the files and folders in the `HelloGWT`
    directory. So, if you have made any changes that you would like to keep, please
    make sure you copy it to a different directory. You will see a screen as shown
    below:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`-overwrite`参数将覆盖`HelloGWT`目录中的文件和文件夹。因此，如果您进行了任何想要保留的更改，请确保将其复制到其他目录。您将看到如下所示的屏幕：'
- en: '![Time for Action—Modifying HelloGWT](img/1007_02_04.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-修改HelloGWT](img/1007_02_04.jpg)'
- en: Import the newly created `HelloGWT` project into Eclipse. Navigate to the **Existing
    projects into Workspace** screen in Eclipse through the **File | Import** menu.
    Select the **HelloGWT** directory as the root folder, and click on the **Finish**
    button to import the project into your Eclipse workspace. Now you can edit, debug,
    and run your application, all from inside the Eclipse IDE!
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的`HelloGWT`项目导入Eclipse。通过Eclipse的**文件|导入**菜单导航到**现有项目到工作区**屏幕。选择**HelloGWT**目录作为根目录，并单击**完成**按钮将项目导入到您的Eclipse工作区。现在，您可以在Eclipse
    IDE中编辑、调试和运行应用程序！
- en: Here are all the folders and files created after we have completed this task:![Time
    for Action—Modifying HelloGWT](img/1007_02_05.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此任务后创建的所有文件夹和文件如下：![行动时间-修改HelloGWT](img/1007_02_05.jpg)
- en: What Just Happened?
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The `projectCreator` script invokes the `ProjectCreator` class in the `gwt‑dev‑xxx.jar`,
    which in turn creates the Eclipse project files. These files are then modified
    by `applicationCreator` to add the name of the project and classpath information
    for the project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`projectCreator`脚本调用`gwt‑dev‑xxx.jar`中的`ProjectCreator`类，该类又创建Eclipse项目文件。然后，`applicationCreator`修改这些文件，添加项目名称和项目的类路径信息。'
- en: 'Here are the Eclipse-specific files created by running the `projectCreator`
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`projectCreator`命令创建的特定于Eclipse的文件如下：
- en: '`.classpath:` Eclipse file for setting up the project classpath information'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.classpath：`Eclipse文件，用于设置项目类路径信息'
- en: '`.project:` Eclipse project file with project name and builder information'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.project：`Eclipse项目文件，带有项目名称和构建器信息'
- en: '`HelloGWT.launch:` Eclipse configuration for launching the project from the
    **Run** and **Debug** Eclipse menus'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloGWT.launch：`Eclipse配置，用于从**运行**和**调试** Eclipse菜单启动项目'
- en: There's More!
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多！
- en: 'Here is a screenshot that displays the various options available for running
    the `projectCreator` when you run it from a command line with a `-help` option:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从命令行运行`projectCreator`时显示的各种选项的屏幕截图，带有`-help`选项：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![There''s More!Eclipse IDEfor GWT applications](img/1007_02_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多！GWT应用程序的Eclipse IDE](img/1007_02_06.jpg)'
- en: Creating a Random Quote AJAX Application
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个随机引用的AJAX应用程序
- en: In this section, we will create our first AJAX application, which will display
    a random quote on the web page. This example application will familiarize us with
    the various pieces and modules in a GWT application, and lays the foundation for
    the rest of the book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建我们的第一个AJAX应用程序，在网页上显示一个随机引用。这个示例应用程序将使我们熟悉GWT应用程序中的各种部件和模块，并为本书的其余部分奠定基础。
- en: Time for Action—Modifying Auto-Generated Applications
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-修改自动生成的应用程序
- en: We will create the above-mentioned application by modifying the auto-generated
    application from the previous task. The skeleton project structure that has been
    automatically created gives us a head start and demonstrates how quickly we can
    become productive using the GWT framework and tools.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过修改上一个任务中自动生成的应用程序来创建上述应用程序。自动生成的项目结构为我们提供了一个快速入门，并演示了我们可以多快地使用GWT框架和工具提高生产力。
- en: The random quote is selected from a list of quotes stored on the server. Every
    second our application will retrieve the random quote provided by the server,
    and display it on the web page in true AJAX style—without refreshing the page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 随机引用是从服务器上存储的引用列表中选择的。我们的应用程序每秒钟将检索服务器提供的随机引用，并以真正的AJAX样式在网页上显示它——无需刷新页面。
- en: 'Create a new Java file named `RandomQuoteService.java` in the `com.packtpub.gwtbook.hellogwt.client`
    package. Define a `RandomQuoteService` interface with one method to retrieve the
    quote:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.hellogwt.client`包中创建一个名为`RandomQuoteService.java`的新的Java文件。定义一个`RandomQuoteService`接口，其中包含一个检索引用的方法：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new Java file named `RandomQuoteServiceAsync.java` in the `com.packtpub.gwtbook.hellogwt.client`
    package. Define a `RandomQuoteServiceAsync` interface:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.hellogwt.client`包中创建一个名为`RandomQuoteServiceAsync.java`的新的Java文件。定义一个`RandomQuoteServiceAsync`接口：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new Java file named `RandomQuoteServiceImpl.java` in the `com.packtpub.gwtbook.hellogwt.server`
    package. Define a `RandomQuoteServiceImpl` class that extends `RemoteService`
    and implements the previously created `RandomQuoteService` interface. Add functionality
    to this class to return a random quote when the `getQuote()` method is called
    by a client.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.hellogwt.server`包中创建一个名为`RandomQuoteServiceImpl.java`的新的Java文件。定义一个`RandomQuoteServiceImpl`类，它继承`RemoteService`并实现先前创建的`RandomQuoteService`接口。为这个类添加功能，以便在客户端调用`getQuote()`方法时返回一个随机引用。
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That's all we have to do for implementing functionality on the server. Now,
    we will modify the client to access the functionality we added to the server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在服务器上实现功能所要做的全部。现在，我们将修改客户端以访问我们添加到服务器的功能。
- en: Modify `HelloGWT.java` to remove the existing label and button and add a label
    for displaying the retrieved quote. Add functionality in the `onModuleload()`
    to create a timer that goes off every second, and invokes the `RandomQuoteService`
    to retrieve a quote and display it in the label created in the previous step.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`HelloGWT.java`以删除现有的标签和按钮，并添加一个用于显示检索到的引用的标签。在`onModuleload()`中添加功能，创建一个定时器，每秒触发一次，并调用`RandomQuoteService`来检索引用，并在上一步中创建的标签中显示它。
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We now have the client application accessing the server to retrieve the quote.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有客户端应用程序访问服务器来检索引用。
- en: Modify the `HelloGWT.html` to add a paragraph describing our AJAX application.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`HelloGWT.html`以添加描述我们的AJAX应用程序的段落。
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s make the label look nicer by adding a CSS for the label. Create a new
    file named `HelloGWT.css` in the `com.packtpub.gwtbook.hellogwt.public` package
    and add the following style class declaration to it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为标签添加CSS使标签看起来更漂亮。在`com.packtpub.gwtbook.hellogwt.public`包中创建一个名为`HelloGWT.css`的新文件，并向其中添加以下样式类声明：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Modify the label to use this style in the `HelloGWT.java` file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HelloGWT.java`文件中修改标签以使用这种样式：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add a reference to this stylesheet in the `HelloGWT.html` so the page can find
    the styles defined in the stylesheet.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HelloGWT.html`中添加对这个样式表的引用，以便页面可以找到样式表中定义的样式。
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The last thing we have to do is register our `RandomQuoteServiceImpl` servlet
    class in the `HelloGWT` module so that the client can find it. Add the following
    line to `HelloGWT.gwt.xml:`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要做的最后一件事是在`HelloGWT`模块中注册我们的`RandomQuoteServiceImpl` servlet类，以便客户端可以找到它。在`HelloGWT.gwt.xml`中添加以下行：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This servlet reference will be registered by the GWT framework with the embedded
    Tomcat servlet container, so that when you run it in the hosted mode, the context
    path "`/`" is mapped so that all requests to it are served by the `RandomQuoteServiceImpl`
    servlet.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个servlet引用将由GWT框架在嵌入式Tomcat servlet容器中注册，因此当您在托管模式下运行它时，上下文路径“/”被映射，以便所有对它的请求都由`RandomQuoteServiceImpl`
    servlet提供。
- en: 'Here are the folders and files in the `HelloGWT` project after completing all
    the above modifications:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有上述修改后，`HelloGWT`项目中的文件夹和文件如下：
- en: '![Time for Action—Modifying Auto-Generated Applications](img/1007_02_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Time for Action—Modifying Auto-Generated Applications](img/1007_02_07.jpg)'
- en: Our first AJAX application is now ready and we were able to create it entirely
    in Java without writing any HTML code!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个AJAX应用程序现在已经准备就绪，我们能够完全使用Java创建它，而不需要编写任何HTML代码！
- en: What Just Happened?
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The `RandomQuoteService` interface that we created is the client-side definition
    of our service. We also defined `RandomQuoteServiceAsync`, which is the client-side
    definition of the asynchronous version of our service. It provides a callback
    object that enables the asynchronous communication between the server and the
    client. The `RandomQuoteServiceImpl` is a servlet that implements this interface
    and provides the functionality for retrieving a random quote via RPC. We will
    look into creating services in detail in[Chapter 3](ch03.html "Chapter 3. Creating
    Services").
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的`RandomQuoteService`接口是我们服务的客户端定义。我们还定义了`RandomQuoteServiceAsync`，它是我们服务的异步版本的客户端定义。它提供了一个回调对象，使服务器和客户端之间可以进行异步通信。`RandomQuoteServiceImpl`是一个实现了这个接口并提供通过RPC检索随机引用功能的servlet。我们将在[第3章](ch03.html
    "第3章. 创建服务")中详细讨论创建服务。
- en: '`HelloGWT.java` creates the user interface—just a label in this case—instantiates
    the `RandomQuote` service, and starts a timer that is scheduled to fire every
    second. Every time the timer fires, we communicate asynchronously with the `RandomQuoteService`
    to retrieve a quote, and update the label with the quote. The `RootPanel` is a
    GWT wrapper for the body of the HTML page. We attach our label to it so it can
    be displayed.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloGWT.java`创建用户界面——在这种情况下只是一个标签——实例化`RandomQuote`服务，并启动一个计时器，计划每秒触发一次。每次计时器触发时，我们都会异步与`RandomQuoteService`通信以检索引言，并使用引言更新标签。`RootPanel`是HTML页面主体的GWT包装器。我们将标签附加到它上面，以便显示。'
- en: We modified the look and feel of the label by using a cascading stylesheet,
    and assigning the name of a style to the label in `HelloGWT.java`. We will learn
    more about using stylesheets and styles to beautify GWT in[Chapter 6](ch06.html
    "Chapter 6. Browser Effects with JSNI and JavaScript Libraries").
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用级联样式表修改了标签的外观和感觉，并在`HelloGWT.java`中为标签分配了样式的名称。我们将在[第6章](ch06.html "第6章。使用JSNI和JavaScript库美化GWT")中学习如何使用样式表和样式来美化GWT。
- en: The user interface in this application is very simple. Hence we added the label
    straight to the `RootPanel`. However, in almost any non trivial user interface,
    we will need to position the widgets and lay them out more accurately. We can
    easily accomplish this by utilizing the various layout and panel classes in the
    GWT UI framework. We will learn how to use these classes in Chapters 4 and 5.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序中的用户界面非常简单。因此，我们直接将标签添加到`RootPanel`。然而，在几乎任何非平凡的用户界面中，我们都需要更准确地定位小部件并布局它们。我们可以通过利用GWT
    UI框架中的各种布局和面板类轻松实现这一点。我们将在第4章和第5章学习如何使用这些类。
- en: Running the Application in Hosted Mode
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在托管模式下运行应用程序
- en: GWT provides a great way to test your application without deploying it but by
    running the application in a hosted mode. In this section, we will learn how to
    run the `HelloGWT` application in hosted mode.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: GWT提供了一种很好的方法来测试应用程序，而无需部署它，而是在托管模式下运行应用程序。在本节中，我们将学习如何在托管模式下运行`HelloGWT`应用程序。
- en: Time for Action—Executing the HelloGWT-Shell Script
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行HelloGWT-Shell脚本的操作时间
- en: 'You can run the `HelloGWT` application in hosted mode by executing the `HelloGWT-shell`
    script. You can do this in three different ways:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行`HelloGWT-shell`脚本在托管模式下运行`HelloGWT`应用程序。您可以通过以下三种不同的方式来执行此操作：
- en: 'Executing the command script from the shell:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从shell中执行命令脚本：
- en: Open a command prompt and navigate to the `HelloGWT` directory. Run `HelloGWT-shell.cmd`
    to start the `HelloGWT` application in hosted mode.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符并导航到`HelloGWT`目录。运行`HelloGWT-shell.cmd`以在托管模式下启动`HelloGWT`应用程序。
- en: 'Executing the command script from inside Eclipse:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Eclipse内部执行命令脚本：
- en: Double-click on the `HelloGWT-shell.cmd` file in the Eclipse **Package Explorer**
    or **navigator** view. This will execute the file and will start up the `HelloGWT`
    application in hosted mode.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse的**Package Explorer**或**navigator**视图中双击`HelloGWT-shell.cmd`文件。这将执行该文件并启动托管模式下的`HelloGWT`应用程序。
- en: 'Running the `HelloGWT.launcher` from Eclipse:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Eclipse中运行`HelloGWT.launcher`：
- en: In Eclipse, navigate to the **Run** screen by clicking on the **Run | Run**
    link. Expand the **Java Application** node. Select the `HelloGWT` directory. Click
    on the **Run** link to launch the `HelloGWT` application in hosted mode.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中，通过单击**Run | Run**链接导航到**Run**屏幕。展开**Java Application**节点。选择`HelloGWT`目录。单击**Run**链接以在托管模式下启动`HelloGWT`应用程序。
- en: 'You will see the following screen if the application runs properly:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序正常运行，您将看到以下屏幕：
- en: '![Time for Action—Executing the HelloGWT-Shell Script](img/1007_02_08.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![执行HelloGWT-Shell脚本的操作时间](img/1007_02_08.jpg)'
- en: What Just Happened?
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The command script executes the GWT development shell by providing it with the
    application class name as a parameter. The Eclipse launcher mimics the command
    script by creating a launch configuration that executes the GWT development shell
    from within the Eclipse environment. The launched GWT development shell loads
    the specified application in an embedded browser window, which displays the application.
    In hosted mode, the Java code in the project is not compiled into JavaScript.
    The application code is being run in the Java Virtual Machine as compiled bytecode.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 命令脚本通过提供应用程序类名作为参数来执行GWT开发shell。Eclipse启动器通过创建一个启动配置来模仿命令脚本，该启动配置从Eclipse环境中执行GWT开发shell。启动的GWT开发shell在嵌入式浏览器窗口中加载指定的应用程序，显示应用程序。在托管模式下，项目中的Java代码不会被编译为JavaScript。应用程序代码作为已编译的字节码在Java虚拟机中运行。
- en: Running the Application in Web Mode
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Web模式下运行应用程序
- en: In the previous section, we learned how to run GWT applications in hosted mode
    without deploying them. That is a great way to test and debug your application.
    However, when your application is running in a production environment, it will
    be deployed to a servlet container such as Tomcat. This task explains how to compile
    the `HelloGWT` application so that it can then be deployed to any servlet container.
    In GWT terms, this is referred to as running in the web mode.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何在托管模式下运行GWT应用程序而无需部署它们。这是测试和调试应用程序的好方法。然而，当您的应用程序在生产环境中运行时，它将部署到诸如Tomcat之类的Servlet容器中。本任务解释了如何编译`HelloGWT`应用程序，以便随后可以部署到任何Servlet容器中。在GWT术语中，这称为在Web模式下运行。
- en: Time for Action—Compile the Application
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行编译应用程序的操作时间
- en: 'In order to run the `HelloGWT` application in web mode we need to do the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Web模式下运行`HelloGWT`应用程序，我们需要执行以下操作：
- en: Compile the `HelloGWT` application first, by running the `HelloGWT‑compile`
    script.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先通过运行`HelloGWT‑compile`脚本编译`HelloGWT`应用程序。
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The above step will create a `www` folder in the `HelloGWT` directory. Navigate
    to the `www/com.packtpub.gwt.HelloGWT.HelloGWT` directory.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述步骤将在`HelloGWT`目录中创建一个`www`文件夹。导航到`www/com.packtpub.gwt.HelloGWT.HelloGWT`目录。
- en: Open the `HelloGWT.html` file in your web browser.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`HelloGWT.html`文件。
- en: 'Everything needed to run the `HelloGWT` client application is contained in
    the `www` folder. You can deploy the contents of the folder to any servlet container
    and serve up the `HelloGWT` application. Here are the contents of the folder after
    completing the above steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`HelloGWT`客户端应用程序所需的一切都包含在`www`文件夹中。您可以将文件夹的内容部署到任何Servlet容器，并提供`HelloGWT`应用程序。完成上述步骤后，以下是文件夹的内容：
- en: '![Time for Action—Compile the Application](img/1007_02_09.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-编译应用程序](img/1007_02_09.jpg)'
- en: What Just Happened?
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'The `HelloGWT-compile` script invokes the GWT compiler and compiles all the
    Java source code in the `com.packtpub.gwt.hellogwt.client` package into HTML and
    JavaScript and copies it to the `www\com.packtpub.gwt.hellogwt.HelloGWT` directory.
    This directory name is automatically created by GWT, by removing the `client`
    portion from the fully qualified class name provided to `applicationCreator` previously.
    This folder contains a ready-to-deploy version of the `HelloGWT` client application.
    It contains:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloGWT-compile`脚本调用GWT编译器，并将`com.packtpub.gwt.hellogwt.client`包中的所有Java源代码编译成HTML和JavaScript，并将其复制到`www\com.packtpub.gwt.hellogwt.HelloGWT`目录中。这个目录名是由GWT自动创建的，之前提供给`applicationCreator`的完全限定类名中去掉`client`部分。这个文件夹包含了`HelloGWT`客户端应用程序的一个准备部署的版本。它包括：'
- en: '`HelloGWT.html:` The host page that functions as the main HTML page for the
    `HelloGWT` application.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloGWT.html：`作为`HelloGWT`应用程序的主HTML页面的主机页面。'
- en: '`gwt.js:` A generated JavaScript file that contains bootstrap code for loading
    and initializing the GWT framework.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gwt.js：`包含用于加载和初始化GWT框架的引导代码的生成的JavaScript文件。'
- en: '`History.html:` An HTML file that provides history management support.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`History.html：`提供历史管理支持的HTML文件。'
- en: '`xxx-cache.html` and `xxx-cache.xml:` One HTML and XML file per supported browser
    are generated. These contain the JavaScript code generated by the compilation
    of the source Java files in the `com.packtpub.gwtbook.hellogwt.client` and `com.packtpub.gwtbook.hellogwt.server`
    packages. For instance, in this case, on Windows, the compilation produced these
    files:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxx-cache.html`和`xxx-cache.xml：`每个受支持的浏览器生成一个HTML和XML文件。这些文件包含通过编译`com.packtpub.gwtbook.hellogwt.client`和`com.packtpub.gwtbook.hellogwt.server`包中的源Java文件生成的JavaScript代码。例如，在这种情况下，在Windows上，编译产生了这些文件：'
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Each set of HTML and XML files represents one supported browser:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 每组HTML和XML文件代表一个受支持的浏览器：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The file names are created by generating **Globally Unique Identifiers** (**GUIDs**)
    and using the GUID as part of the name. These file names will be different on
    different computers, and will also be different every time you do a clean recompile
    of the application on your computer. There is also a master HTML file generated
    (`com.packtpub.gwtbook.hellogwt.HelloGWT. nocache.html`) that selects the right
    HTML file from the above files and loads it, depending on the browser that is
    running the application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名是通过生成**全局唯一标识符**（**GUIDs**）并将GUID作为名称的一部分来创建的。这些文件名在不同的计算机上会有所不同，并且每次在您的计算机上进行干净的重新编译时也会有所不同。还有一个生成的主HTML文件（`com.packtpub.gwtbook.hellogwt.HelloGWT.nocache.html`），它从上面的文件中选择正确的HTML文件并加载它，具体取决于运行应用程序的浏览器。
- en: The `www` folder does not contain the code from the `com.packtpub.gwtbook.hellogwt.server`
    package. This server code needs to be compiled and deployed in a servlet container
    so that the client application can communicate with the random quote service.
    We will learn about deploying to external servlet containers in[Chapter 10](ch10.html
    "Chapter 10. Deployment"). In normal development mode, we will use the hosted
    mode for testing, which runs the server code inside the embedded Tomcat servlet
    container in the GWT development shell. This makes it very easy to run and debug
    the server code from inside the same Eclipse environment as the client application
    code. This is another feature of GWT, which makes it an extremely productive environment
    for developing AJAX applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`www`文件夹不包含`com.packtpub.gwtbook.hellogwt.server`包中的代码。这个服务器代码需要被编译并部署到一个Servlet容器中，以便客户端应用程序可以与随机引用服务进行通信。我们将在[第10章](ch10.html
    "第10章 部署")中学习如何部署到外部Servlet容器。在正常的开发模式下，我们将使用托管模式进行测试，该模式在GWT开发外壳中的嵌入式Tomcat Servlet容器中运行服务器代码。这使得从同一个Eclipse环境中运行和调试服务器代码变得非常容易，就像客户端应用程序代码一样。这是GWT的另一个特性，使其成为开发AJAX应用程序的极其高效的环境。'
- en: In the web mode, our client Java code has been compiled into JavaScript unlike
    in the hosted mode. Also, you will notice that the `HelloGWT.gwt.xml` is not in
    this directory. The configuration details from this module are included in the
    generated HTML and XML files above.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web模式下，我们的客户端Java代码已经编译成JavaScript，不同于托管模式。此外，您会注意到`HelloGWT.gwt.xml`不在这个目录中。此模块的配置细节包含在上面生成的HTML和XML文件中。
- en: In the web mode, our client Java code has been compiled into JavaScript unlike
    in the hosted mode. Also, you will notice that the `HelloGWT.gwt.xml` is not in
    this directory. The configuration details from this module are included in the
    generated HTML and XML files above.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web模式下，我们的客户端Java代码已经编译成JavaScript，不同于托管模式。此外，您会注意到`HelloGWT.gwt.xml`不在这个目录中。此模块的配置细节包含在上面生成的HTML和XML文件中。
- en: Thankfully, all this work is automatically done for us by the GWT framework
    when we run the `HelloGWT-compile` script. We can focus on the functionality provided
    by our AJAX applications and leave the browser-independent code generation and
    lower level XmlHttpRequest API to GWT.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，当我们运行`HelloGWT-compile`脚本时，所有这些工作都会被GWT框架自动完成。我们可以专注于我们的AJAX应用程序提供的功能，并将与浏览器无关的代码生成和较低级别的XmlHttpRequest
    API留给GWT。
- en: We will learn how to deploy GWT applications to web servers and servlet containers
    in[Chapter 10](ch10.html "Chapter 10. Deployment").
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第10章](ch10.html "第10章 部署")中学习如何将GWT应用程序部署到Web服务器和Servlet容器。
- en: There's More!
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多！
- en: You can also compile the `HelloGWT` application from the GWT development shell
    in hosted mode. Run the `HelloGWT-shell` command script to run the application
    in hosted mode. Click on the **Compile/Browse** button in the GWT development
    shell window. This will compile the application and launch the application in
    a separate web-browser window.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在托管模式下从GWT开发shell中编译`HelloGWT`应用程序。运行`HelloGWT-shell`命令脚本以在托管模式下运行应用程序。单击GWT开发shell窗口中的**编译/浏览**按钮。这将编译应用程序并在单独的Web浏览器窗口中启动应用程序。
- en: All this dynamic JavaScript magic means that when you try to view the source
    for the application from the web browser, you will always see the HTML from the
    host page. This can be disconcerting when you are trying to debug problems. But
    the fantastic Eclipse support in GWT means that you can debug issues from the
    comfort of a graphical debugger by setting breakpoints and stepping through the
    entire application one line at a time! We will learn more about debugging of GWT
    applications in[Chapter 8](ch08.html "Chapter 8. Unit Tests").
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些动态的JavaScript魔法意味着当您尝试从Web浏览器查看应用程序的源代码时，您总是会看到来自主机页面的HTML。当您试图调试问题时，这可能令人不安。但是GWT中的出色Eclipse支持意味着您可以通过设置断点并逐行浏览整个应用程序来从图形调试器的舒适环境中调试问题！我们将在[第8章](ch08.html
    "第8章。单元测试")中了解更多关于GWT应用程序的调试。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we generated a new GWT application using the provided helper
    scripts like `applicationCreator`. We then generated the Eclipse support files
    for the project. We also created a new random quote AJAX application. We saw how
    to run this new application in both the hosted and web modes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用提供的辅助脚本如`applicationCreator`生成了一个新的GWT应用程序。然后为项目生成了Eclipse支持文件。我们还创建了一个新的随机引用AJAX应用程序。我们看到如何在托管模式和Web模式下运行这个新应用程序。
- en: In the next chapter, we are going to learn how to create GWT services that will
    enable us to provide asynchronous functionality that can be accessed via AJAX
    from the GWT application web pages.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建GWT服务，这将使我们能够提供可以通过GWT应用程序网页通过AJAX访问的异步功能。
