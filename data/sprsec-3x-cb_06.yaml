- en: Chapter 6. Spring Security with Vaadin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用Vaadin的Spring Security
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security with Vaadin – basic authentication
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - 基本身份验证*'
- en: Spring Security with Vaadin – Spring form-based authentication
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - Spring基于表单的身份验证*'
- en: Spring Security with Vaadin – customized JSP form-based authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - 自定义JSP基于表单的身份验证*'
- en: Spring Security with Vaadin – using Vaadin form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - 使用Vaadin表单*'
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Vaadin has emerged as a popular framework in current projects. It offers RIA
    just like GWT-rich Internet applications. It doesn't have the RPC calls and those
    async service classes. It works similar to GWT widgets. Vaadin also integrates
    easily with portlets. In GWT we had to install browser compatible GWT plugin but
    in Vaadin we don't need to do that. The application developed in Vaadin is compatible
    on all modern browsers. Vaadin can be written as server side and client side applications.
    The Vaadin UI component is actually a JavaServlet component which easily runs
    on web servers such as Tomcat and also application servers like JBOSS and Glassfish.
    For the current demonstration I am using Tomcat and Eclipse Indigo.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vaadin已成为当前项目中流行的框架。它提供了类似GWT的RIA。它没有RPC调用和异步服务类。它的工作方式类似于GWT小部件。Vaadin还很容易与portlet集成。在GWT中，我们必须安装与浏览器兼容的GWT插件，但在Vaadin中我们不需要这样做。在Vaadin开发的应用程序在所有现代浏览器上都兼容。Vaadin可以编写为服务器端和客户端应用程序。Vaadin
    UI组件实际上是一个JavaServlet组件，可以轻松运行在诸如Tomcat之类的Web服务器上，也可以运行在JBOSS和Glassfish等应用服务器上。在当前演示中，我正在使用Tomcat和Eclipse
    Indigo。
- en: In this chapter we will demonstrate Spring Security with Vaadin integration
    using various approaches. Let's first do a basic setup for this. It's all about
    downloading the plugin and creating a sample Vaadin project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示使用各种方法集成Spring Security与Vaadin。让我们首先进行基本设置。这就是下载插件并创建一个示例Vaadin项目。
- en: Spring Security with Vaadin – basic authentication
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vaadin的Spring Security - 基本身份验证
- en: Our aim is to do a simple basic authentication on the Vaadin application. I
    want a login dialog to pop up when we access the URL of the Vaadin application.
    I have created a simple product catalog application which looks very similar to
    the address book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是在Vaadin应用程序上进行简单的基本身份验证。当我们访问Vaadin应用程序的URL时，我希望出现一个登录对话框。我创建了一个简单的产品目录应用程序，它看起来与地址簿非常相似。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Set up Vaadin application on Eclipse:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse上设置Vaadin应用程序：
- en: Download Vaadin [http://vaadin.com/eclipse](http://vaadin.com/eclipse) for Eclipse
    Indigo.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Vaadin [http://vaadin.com/eclipse](http://vaadin.com/eclipse) 适用于Eclipse Indigo。
- en: For this chapter we will demonstrate Spring Security integration with both the
    Vaadin versions (Vaadin 6 and Vaadin 7).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示Spring Security与Vaadin两个版本（Vaadin 6和Vaadin 7）的集成。
- en: Create a Vaadin web project in Eclipse with Vaadin 7—this will generate a default
    application with a click button which we will modify.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个Vaadin 7的Vaadin Web项目 - 这将生成一个带有点击按钮的默认应用程序，我们将对其进行修改。
- en: Run the application on the Tomcat server.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Tomcat服务器上运行应用程序。
- en: Create an `applicationContext.xml` file. It is mandatory to name it as `applicationContext`,
    or else we will get error messages in the console.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`applicationContext.xml`文件。必须将其命名为`applicationContext`，否则我们将在控制台中收到错误消息。
- en: Edit the `web.xml` file with spring listeners.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`web.xml`文件，添加spring监听器。
- en: Add all the jars in the class-path.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有jar包添加到类路径中。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps are for integrating Spring Security with Vaadin to demonstrate
    basic authentication:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤是为了将Spring Security与Vaadin集成以演示基本身份验证：
- en: 'Update the `web.xml` file with spring listener and spring filter, with Vaadin
    servlet:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用spring监听器和spring过滤器更新`web.xml`文件，使用Vaadin servlet：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can observe that we haven''t configured `<context-param>` as we did in
    our previous applications. Spring will automatically look for the `applicationContext.xml`
    file. For setting up Vaadin we need to configure the Vaadin servlet class with
    two parameters `PropertyToString` and a UI class named `com.example.vaadin_project1`.
    Edit the `applicationContext.xml` file using the following code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以观察到我们没有像在以前的应用程序中那样配置`<context-param>`。Spring将自动查找`applicationContext.xml`文件。为了设置Vaadin，我们需要使用两个参数`PropertyToString`和一个名为`com.example.vaadin_project1`的UI类来配置Vaadin
    servlet类。使用以下代码编辑`applicationContext.xml`文件：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a simple configuration for basic authentication. With this configuration
    we expect a login dialog box before showing the Vaadin application. I have created
    a new role editor.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的基本身份验证配置。使用此配置，我们期望在显示Vaadin应用程序之前出现登录对话框。我创建了一个新的编辑器角色。
- en: Here we have created a `ProductList` component to display a list of products.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个`ProductList`组件来显示产品列表。
- en: How it works...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example we are demonstrating a basic authentication mechanism with
    the Vaadin application. Sometimes we do not need to display a jsp page or a Vaadin
    login form for the user, in such cases we go for basic authentication in which
    a dialog box pops up requesting the user to enter their credentials. On success,
    the user is given access to the Vaadin application. Workflow of the application
    is given as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们演示了Vaadin应用程序的基本身份验证机制。有时我们不需要为用户显示jsp页面或Vaadin登录表单，在这种情况下，我们选择基本身份验证，其中会弹出一个对话框要求用户输入他们的凭据。成功后，用户将获得对Vaadin应用程序的访问权限。应用程序的工作流程如下所示：
- en: 'Now access the following URL:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://localhost:8086/Vaadin_Project1/`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8086/Vaadin_Project1/`'
- en: 'You should see pages as shown in the following screenshots:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下截图中显示的页面：
- en: '![How it works...](img/7525OS_06_01.jpg)![How it works...](img/7525OS_06_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_06_01.jpg)![它是如何工作的...](img/7525OS_06_02.jpg)'
- en: See also
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Vaadin – Spring form-based authentication* recipe
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - Spring基于表单的身份验证*配方'
- en: The *Spring Security with Vaadin – customized JSP form-based authentication*
    recipe
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - 自定义JSP基于表单的身份验证*配方'
- en: The *Spring Security with Vaadin – using Vaadin form* recipe
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin的Spring Security - 使用Vaadin表单*配方'
- en: Spring Security with Vaadin – Spring form-based authentication
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security with Vaadin – Spring 表单认证
- en: We will demonstrate form-based authentication in Vaadin. It's very similar to
    the authentication that we used in our previous recipes. We will be editing the
    `applicationContext.xml` file. We are not creating any customized login form,
    we would like to use spring internal login form.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示 Vaadin 中的基于表单的认证。这与我们在之前的配方中使用的认证非常相似。我们将编辑 `applicationContext.xml` 文件。我们不会创建任何自定义登录表单，我们希望使用
    spring 内部登录表单。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You have to comment the `<http-basic/>` tag from the `application-Context.xml`
    file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在 `application-Context.xml` 文件中注释掉 `<http-basic/>` 标记。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `applicationContext.xml` file as shown in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下代码编辑 `applicationContext.xml` 文件：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this example spring's internal login form is invoked for authenticating the
    Vaadin application. This configuration is done in the `applicationConext.xml`
    file. The Spring framework pops up its own internal jsp file for the user. When
    the user enters the credentials and clicks on **Submit** they are redirected to
    the Vaadin application. Run the Tomcat server.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，调用了 spring 的内部登录表单来对 Vaadin 应用程序进行认证。这个配置是在 `applicationConext.xml` 文件中完成的。Spring
    框架弹出了自己的内部 jsp 文件供用户使用。当用户输入凭据并点击 **提交** 时，他们将被重定向到 Vaadin 应用程序。运行 Tomcat 服务器。
- en: 'Now access the following URL:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下 URL：
- en: '`http://localhost:8086/Vaadin_Project1/`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8086/Vaadin_Project1/`'
- en: '![How it works...](img/7525OS_06_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_06_03.jpg)'
- en: This is a Spring provided inbuilt login form.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Spring 提供的内置登录表单。
- en: Enter the login username and password and you will be taken to the Vaadin product
    list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码，您将进入 Vaadin 产品列表。
- en: Similarly you can authenticate using the database and LDAP just by editing the
    authentication-manager configurations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过编辑 authentication-manager 配置来使用数据库和 LDAP 进行认证。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Vaadin – customized JSP form-based authentication*
    recipe
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Vaadin – 自定义 JSP 表单认证* 配方'
- en: The *Spring Security with Vaadin – using Vaadin form* recipe
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Vaadin – 使用 Vaadin 表单* 配方'
- en: Spring Security with Vaadin – customized JSP form-based authentication
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security with Vaadin – 自定义 JSP 表单认证
- en: So far we have demonstrated the Vaadin 7 application with the Spring Security
    API login form and login pop up dialog box. All that we did was create users in
    the application context file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经演示了使用 Spring Security API 登录表单和登录弹出对话框的 Vaadin 7 应用程序。我们所做的一切都是在应用程序上下文文件中创建用户。
- en: This time we will give a different name to the application context and give
    it a customized login form and use the Vaadin 6 project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将为应用程序上下文赋予不同的名称，并提供一个自定义的登录表单，并使用 Vaadin 6 项目。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a sample Vaadin 6 project
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例 Vaadin 6 项目
- en: Add the Spring related jars in the build path
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建路径中添加与 Spring 相关的 jar 包
- en: Add the Spring Security related jars
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与 Spring Security 相关的 jar 包
- en: Add the `vaadin-spring-security.xml` file
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `vaadin-spring-security.xml` 文件
- en: Add the `mybeans.xml` file
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `mybeans.xml` 文件
- en: Edit the `web.xml` file as shown in the previous section
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照上一节中的示例编辑 `web.xml` 文件
- en: Also add the Spring related jars in the `web-inf lib` folder
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要在 `web-inf lib` 文件夹中添加与 Spring 相关的 jar 包
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following steps are for implementing a form-based authentication using a
    customized JSP with the Vaadin application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤是使用自定义 JSP 实现基于表单的认证，使用 Vaadin 应用程序。
- en: Since the entry point is `AbstractApplicationServlet` for the Vaadin 6 application,
    we will create a class that extends `AbstractApplicationServlet`. This will give
    us an option to override the methods of the class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Vaadin 6 应用程序的入口点是 `AbstractApplicationServlet`，我们将创建一个扩展 `AbstractApplicationServlet`
    的类。这将给我们一个选择来重写类的方法。
- en: We will also create a class that extends the `Application` class. In this class
    we will create a window. For example, we will just add some text after login.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个扩展 `Application` 类的类。在这个类中，我们将创建一个窗口。例如，我们将在登录后添加一些文本。
- en: We will also add jsp file mapping in the `web.xml` file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在 `web.xml` 文件中添加 jsp 文件映射。
- en: We need to map the `MyAbstractApplicationServlet` class as a Servlet in the
    file `web.xml`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将 `MyAbstractApplicationServlet` 类映射为 `web.xml` 文件中的 Servlet。
- en: We also need to configure the Spring context listeners and Spring filters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要配置 Spring 上下文监听器和 Spring 过滤器。
- en: 'Edit the `web.xml` file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `web.xml` 文件：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit the `vaadin-spring-security.xml` file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `vaadin-spring-security.xml` 文件：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Subclass and override the method `AbstractApplicationServlet`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子类化并重写 `AbstractApplicationServlet` 方法。
- en: The `AbstractApplicationServlet` class is an abstract class that extends `HttpServlet`
    and implements an interface called *Constants*. `The Service()` and `init()` methods
    are the servlet methods which are used by the servlet container. We have created
    an `appContext` object and have initialized it in the `init ()` method. The `getNewApplication()`
    method has been overridden to get the class that extends the application. The
    `getApplication()` method has been overridden.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractApplicationServlet` 类是一个抽象类，扩展了 `HttpServlet` 并实现了一个名为 *Constants*
    的接口。 `Service()` 和 `init()` 方法是由 servlet 容器使用的 servlet 方法。我们创建了一个 `appContext`
    对象，并在 `init()` 方法中对其进行了初始化。已重写 `getNewApplication()` 方法以获取扩展应用程序的类。已重写 `getApplication()`
    方法。'
- en: '![How to do it...](img/7525OS_06_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/7525OS_06_04.jpg)'
- en: 'The implementation is given as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现如下：
- en: '`MyAbstractApplicationServlet`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyAbstractApplicationServlet`'
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Subclass and override the method `ApplicationClass`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子类化并重写 `ApplicationClass` 方法。
- en: '`ApplicationClass` is an abstract class which implements some interfaces. We
    have overridden the `init()` method of the abstract class. You have to create
    the `HeaderHorizontalLayout` classes and add them as components to the window.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationClass` 是一个抽象类，实现了一些接口。我们已经重写了抽象类的 `init()` 方法。您需要创建 `HeaderHorizontalLayout`
    类并将它们作为组件添加到窗口中。'
- en: '![How to do it...](img/7525OS_06_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/7525OS_06_05.jpg)'
- en: MainApplication
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: MainApplication
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this example we are using the customized jsp page to handle the access to
    the Vaadin application. The customized jsp is displayed to the user when user
    tries to access the Vaadin application. The user enters the username and password
    which is then authenticated by the Spring framework. On successful authentication
    the Vaadin page is displayed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用定制的jsp页面来处理对Vaadin应用程序的访问。当用户尝试访问Vaadin应用程序时，定制的jsp会显示给用户。用户输入用户名和密码，然后由Spring框架进行验证。验证成功后，Vaadin页面将显示。
- en: 'The workflow is given as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程如下所示：
- en: 'Now access the URL:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问URL：
- en: '`http://localhost:8086/Vaadin_Project3/`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8086/Vaadin_Project3/`'
- en: '![How it works...](img/7525OS_06_06.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_06_06.jpg)'
- en: Enter the login username and password you will be taken to the Vaadin page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码，您将被带到Vaadin页面。
- en: '![How it works...](img/7525OS_06_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_06_07.jpg)'
- en: See also
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Vaadin – using Vaadin form* recipe
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Vaadin表单的Spring Security - 使用Vaadin表单*配方'
- en: Spring Security with Vaadin – using Vaadin form
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security与Vaadin - 使用Vaadin表单
- en: So far we have used the customized JSP page or the Spring-provided login pop
    up box or the jsp file. We have also demonstrated Spring Security integration
    with both Vaadin 6 and Vaadin 7\. So I was tempted to provide a complete Vaadin
    with Spring Security implementation. Let's create a Vaadin form and we will integrate
    it with Spring Security.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了定制的JSP页面或Spring提供的登录弹出框或JSP文件。我们还演示了Spring Security与Vaadin 6和Vaadin
    7的集成。因此，我很想提供一个完整的Vaadin与Spring Security实现。让我们创建一个Vaadin表单，并将其与Spring Security集成。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a Vaadin 7 project in your Eclipse IDE
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse IDE中创建一个Vaadin 7项目
- en: Create a `MyLoginView` class that extends the panel
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个扩展面板的`MyLoginView`类
- en: Create a `SecuredView` class that extends the panel
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个扩展面板的`SecuredView`类
- en: Create a `MyVaadinServlet` class that extends `VaadinServlet`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个扩展`VaadinServlet`的`MyVaadinServlet`类
- en: Create a `VaadinRequestHolder` class
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`VaadinRequestHolder`类
- en: Configure the `web.xml` file
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`web.xml`文件
- en: Edit the `applicationContext.xml` file
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件
- en: Implement the `View` interface for the panel classes
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为面板类实现`View`接口
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps given as follows are for creating a Vaadin login form and using it
    for authenticating the user with Spring Security:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下给出的步骤是为了创建一个Vaadin登录表单，并将其用于使用Spring Security对用户进行认证：
- en: '`MyLoginView` for the login form will be loaded on application start up.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MyLoginView`将在应用程序启动时加载登录表单。'
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have used the form layout and have added the username and password fields.
    We have added a button. On a button click we are doing authentication.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了表单布局，并添加了用户名和密码字段。我们添加了一个按钮。点击按钮时，我们进行认证。
- en: We are capturing the `VaadinRequest` object in the `requestHolder.UserNamePasswords`.
    The authentication token receives the input from the username and password fields.
    The token is then passed to the `AuthenticationManger` to authenticate the fields.
    If authentication is successful it will navigate to the secured page. It will
    also give notification to the user.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`requestHolder.UserNamePasswords`中捕获`VaadinRequest`对象。认证令牌接收来自用户名和密码字段的输入。然后将令牌传递给`AuthenticationManger`以验证字段。如果认证成功，它将导航到受保护的页面。它还会向用户发出通知。
- en: '`Secured View` is to be used after authentication and to provide logout functionality.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在认证后使用`Secured View`并提供注销功能。
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The secured view has a label and a logout button. The logout button click event
    handles the `springlogout`. On logout the user is re-directed to the login page.
    The `LogoutHandler` class has a `logout ()` method that handles the authentication.
    I have used the navigator class. You can create an instance of navigator with
    UI class `getUI.Current` that gives a UI object.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的视图有一个标签和一个注销按钮。注销按钮点击事件处理`springlogout`。注销时，用户将被重定向到登录页面。`LogoutHandler`类有一个`logout()`方法来处理认证。我使用了导航器类。您可以使用UI类`getUI.Current`创建导航器的实例，它会给出一个UI对象。
- en: This approach can be used in your panel classes. I have also passed the layout
    object to the constructor.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以在您的面板类中使用。我还将布局对象传递给构造函数。
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A pictorial representation of the two classes is given as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两个类的图示表示：
- en: '![How to do it...](img/7525OS_06_08.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/7525OS_06_08.jpg)'
- en: Extend the Vaadin servlet to capture the request object.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展Vaadin servlet以捕获请求对象。
- en: '`MyVaadinServlet`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyVaadinServlet`'
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Vaadin servlet is configured in the `web.xml` file. It accepts the UI class
    as a parameter. In the previous code we have extended the Vaadin servlet and have
    overridden the `service ()` method, in which we are passing the request to the
    `VaadinRequestHolder` class. By doing this we will be passing the context object
    to `SecurityContextHolder` to start with the authentication.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Vaadin servlet在`web.xml`文件中进行配置。它接受UI类作为参数。在前面的代码中，我们扩展了Vaadin servlet并重写了`service()`方法，在其中我们将请求传递给`VaadinRequestHolder`类。通过这样做，我们将上下文对象传递给`SecurityContextHolder`以开始认证。
- en: '![How to do it...](img/7525OS_06_09.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/7525OS_06_09.jpg)'
- en: Register the views in the UI class.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UI类中注册视图。
- en: '`Vaadin_project5UI`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vaadin_project5UI`'
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this code we are registering the `LoginView` and the `SecuredView` and the
    default login view will be called.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们注册了`LoginView`和`SecuredView`，默认登录视图将被调用。
- en: 'Configuring the `web.xml` file:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`web.xml`文件：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have configured `MyVaadinServlet` in `web.xml`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`web.xml`中配置了`MyVaadinServlet`。
- en: Edit the `application-Context.xml` file.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`application-Context.xml`文件。
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example we have created a Vaadin login form. This is another option
    for creating a login form using the Vaadin framework classes if the developer
    doesn't want to use external jsp. This will make it a pure Vaadin application
    with a Spring Security application. The user is authenticated and authorized by
    Spring Security before showing the actual product catalog page. The Vaadin form
    submits the users' credentials to the Spring Security framework which does the
    authentication and authorization. The `MyVaadinServlet` class communicates with
    the Spring Security context to set the security context with the Vaadin application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个Vaadin登录表单。如果开发人员不想使用外部jsp，这是使用Vaadin框架类创建登录表单的另一个选项。这将使它成为一个纯Vaadin应用程序，其中包含一个Spring
    Security应用程序。在显示实际的产品目录页面之前，用户会通过Spring Security进行身份验证和授权。Vaadin表单将用户的凭据提交给Spring
    Security框架，进行身份验证和授权。`MyVaadinServlet`类与Spring Security上下文通信，以在Vaadin应用程序中设置安全上下文。
- en: 'The workflow of Spring Security with Vaadin is given as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security与Vaadin的工作流程如下所示：
- en: Run the Tomcat server.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Tomcat服务器。
- en: 'Now access the URL:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在访问URL：
- en: '`http://localhost:8086/Vaadin_Project5/`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8086/Vaadin_Project5/`'
- en: 'The following screenshot shows the Vaadin login form:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Vaadin登录表单：
- en: '![How it works...](img/7525OS_06_010.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_06_010.jpg)'
- en: 'It also displays a message for bad credentials:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会显示有关错误凭据的消息：
- en: '![How it works...](img/7525OS_06_011.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_06_011.jpg)'
- en: 'After authentication you will be navigated to the secured page:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证后，您将被导航到受保护的页面：
- en: '![How it works...](img/7525OS_06_012.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_06_012.jpg)'
- en: 'Clicking on **Logout** you will be taken back to login view. The following
    screenshot displays the information:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**注销**，您将被带回登录视图。以下截图显示了信息：
- en: '![How it works...](img/7525OS_06_013.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_06_013.jpg)'
