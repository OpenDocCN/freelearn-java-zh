- en: Chapter 6. Back to Business – The Service Layer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。回到业务 - 服务层
- en: The service layer is the nucleus of the application; it is where the business
    logic resides. The business logic encapsulates the rules that define the working
    application and it is where a significant amount of development time is spent.
    Enhancements, changing requirements, and ongoing maintenance will usually require
    modifications to the service layer. Business rules may include such operations
    as restricting access to specific roles, security constraints, calculations, validations,
    compliance checks, and logging, to name a few.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层是应用程序的核心；这是业务逻辑所在的地方。业务逻辑封装了定义工作应用程序的规则，这是开发时间的重要部分。增强功能、变更需求和持续维护通常需要对服务层进行修改。业务规则可能包括限制对特定角色的访问、安全约束、计算、验证、合规性检查和日志记录等操作。
- en: 'Some typical business logic examples could include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一些典型的业务逻辑示例可能包括以下内容：
- en: Only administrators can change the country assigned to a user
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员才能更改分配给用户的国家
- en: Administrators can only change a user to a country in their own geographical
    region
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员只能将用户更改为其所在地理区域的国家
- en: If payment is made in a currency other that USD, an exchange rate premium of
    5 percent must be added
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果支付的货币不是美元，必须添加5%的汇率溢价
- en: An Australian zip code must be exactly four digits
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 澳大利亚邮政编码必须正好是四位数字
- en: Reassigning an invoice to the Canadian affiliate can only be performed during
    East Coast business hours
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将发票重新分配给加拿大分支只能在东海岸工作时间内进行
- en: Each new invoice must be logged onto a separate file, if not originating from
    one of the five largest business clients
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每张新发票必须记录在单独的文件中，如果不是来自五个最大的商业客户之一
- en: 'The core business rules we will be implementing in this chapter are far simpler:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章实施的核心业务规则要简单得多：
- en: A user must be authenticated prior to accessing any resources
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须在访问任何资源之前进行身份验证
- en: Only a 3T administrator can maintain the 3T configuration
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有3T管理员才能维护3T配置
- en: Users may only update and add task logs for themselves
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户只能更新和添加自己的任务日志
- en: Service layer considerations
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务层考虑
- en: It is important to have clearly defined entry points for service layer operations.
    This will again be achieved through Java interfaces that define the operations
    exposed by the service layer. Clients of the service layer will interact with
    the business logic through these interfaces, not the implementing classes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务层操作，有清晰定义的入口点是很重要的。这将通过定义服务层公开的操作的Java接口再次实现。服务层的客户端将通过这些接口与业务逻辑进行交互，而不是实现类。
- en: For similar reasons, it is important that the service layer itself is decoupled
    from the underlying DAO implementation. We have already achieved this by ensuring
    that our DAO layer exposes its persistence operations through interfaces. The
    service layer should know nothing about how the persistence layer is implemented
    and there should not be any persistence operations coded within the service layer
    classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 出于类似的原因，服务层本身与底层DAO实现解耦是很重要的。我们已经通过确保我们的DAO层通过接口公开其持久性操作来实现了这一点。服务层不应该知道持久层是如何实现的，服务层类中也不应该编写任何持久性操作。
- en: 'Enterprise application clients come in many different forms, most commonly
    web browsers and web services. However, there may be other types of clients; for
    example, standalone servers using RMI. In all cases, the service layer must be
    as independent as possible of the client implementation. As such, the service
    layer should never incorporate presentation logic and should know nothing about
    how the data is used. The following diagram illustrates where the service layer
    sits in the overall application structure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序客户端有许多不同的形式，最常见的是Web浏览器和Web服务。但是，可能还有其他类型的客户端；例如，使用RMI的独立服务器。在所有情况下，服务层必须尽可能独立于客户端实现。因此，服务层不应该包含呈现逻辑，也不应该知道数据的使用方式。以下图示说明了服务层在整体应用程序结构中的位置：
- en: '![Service layer considerations](img/5457_06_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![服务层考虑](img/5457_06_01.jpg)'
- en: The service layer interacts with the data access layer via domain objects. There
    is a clear demarcation of roles with this design. The DAO layer is responsible
    for interacting with the database and the service layer has no knowledge of how
    this is done. Likewise, the DAO layer has no interest in how the domain objects
    are consumed. This is the role of the service layer where business logic controls
    decide what can and should be done with the domain objects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层通过领域对象与数据访问层进行交互。这种设计有明确的角色划分。DAO层负责与数据库交互，服务层不知道这是如何完成的。同样，DAO层对领域对象的使用不感兴趣。这是业务逻辑控制领域对象可以和应该做什么的服务层的角色。
- en: A well-architected service layer should have a simple interface that allows
    any type of request handling layer to work with the underlying application business
    logic. If a list of Company entities are requested from the service layer, the
    exposed interface method that provides this functionality does not need to know
    whether the list is being used to render a web page, to execute a web service
    call, or to send an e-mail with an attached Excel spreadsheet. The request handling
    layer will be discussed in detail in the following chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好架构的服务层应该有一个简单的接口，允许任何类型的请求处理层与底层应用业务逻辑一起工作。如果从服务层请求Company实体的列表，则提供此功能的公开接口方法不需要知道列表是用于呈现网页，执行Web服务调用还是发送带有附加Excel电子表格的电子邮件。请求处理层将在下一章中详细讨论。
- en: Building the service layer
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建服务层
- en: 'The service layer classes and interfaces will follow the same naming conventions
    of our DAO layer, where `Service` simply replaces the `Dao` equivalent name:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层类和接口将遵循与我们的DAO层相同的命名约定，其中`Service`只是替换了`Dao`等效名称：
- en: '![Building the service layer](img/5457_06_2.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![构建服务层](img/5457_06_2.jpg)'
- en: Our first definition will be for the `Result` class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个定义将是`Result`类。
- en: The Result Data Transfer Object
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果数据传输对象
- en: 'The service layer will communicate with the request handling tier through interfaces
    that return `Result` **Data Transfer Objects** (**DTO**). The DTO design pattern
    is commonly used in enterprise application programming to transfer data between
    different layers or subsystems. Our `Result` DTO will have the following three
    properties:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层将通过返回`Result`**数据传输对象**（**DTO**）的接口与请求处理层通信。DTO设计模式通常用于企业应用程序编程，用于在不同层或子系统之间传输数据。我们的`Result`DTO将具有以下三个属性：
- en: '`boolean success`: This property is used if the action was successful and an
    appropriate data payload is available'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean success`：如果操作成功并且有适当的数据有效负载可用，则使用此属性'
- en: '`String msg`: This is a message that may be used by the client for logging
    or informational purposes'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String msg`：这是一个可能被客户端用于日志记录或信息目的的消息'
- en: '`<T> data`: This is a generically typed data payload that will be consumed
    by the request handling layer'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<T> data`：这是一个通用类型的数据有效负载，将被请求处理层消耗'
- en: 'The `Result` class is also a **Value Object** (**VO**), an immutable object
    whose state cannot be changed after creation. Each instance variable is marked
    `final` and we will use an appropriate `ResultFactory` method to create the value
    object instance. Value objects are a concept used in Domain-Driven Design to represent
    data without any conceptual identity. You can find out more about Domain-Driven
    Design at [http://en.wikipedia.org/wiki/Domain-driven_design](http://en.wikipedia.org/wiki/Domain-driven_design).
    The definition of the `Result` class follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result`类也是**值对象**（**VO**），一个在创建后状态不能被改变的不可变对象。每个实例变量都标记为`final`，我们将使用适当的`ResultFactory`方法来创建值对象实例。值对象是领域驱动设计中用来表示没有概念身份的数据的概念。您可以在[http://en.wikipedia.org/wiki/Domain-driven_design](http://en.wikipedia.org/wiki/Domain-driven_design)找到更多关于领域驱动设计的信息。`Result`类的定义如下：'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will notice that the `Result` constructors are package-private (cannot
    be created by classes outside of the package). The `Result` value object instantiation
    will be managed by the `ResultFactory` class:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到`Result`构造函数是包私有的（不能被包外的类创建）。`Result`值对象的实例化将由`ResultFactory`类管理：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The static utility methods will create and return `Result` instances configured
    for the appropriate purpose in our service layer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 静态实用方法将创建并返回配置为我们服务层适当目的的`Result`实例。
- en: In our design, a failure is considered to be a recoverable state of the application.
    Attempting to log in with an invalid username/password combination would be an
    example of a failed action. Not having permission to perform a delete would be
    another possible failure action. The client of the service layer can recover from
    such actions and present graceful messages to the user by examining the `msg`
    of the `Result`. An alternate design pattern for handling failures is through
    Java-checked exceptions; an exception is thrown when a failure is encountered.
    Implementing such a design pattern forces the client to catch the exception, determine
    the cause of the exception, and handle processing accordingly. We prefer our design
    for handling failures and recommend you to not use checked exceptions unless a
    truly exceptional situation has occurred. The resulting code is cleaner to read
    and we can avoid the overhead of working with exceptions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设计中，失败被认为是应用程序的可恢复状态。尝试使用无效的用户名/密码组合登录将是一个失败的操作示例。没有权限执行删除操作也可能是另一个可能的失败操作。服务层的客户端可以通过检查`Result`的`msg`来从这些操作中恢复并向用户呈现优雅的消息。处理失败的另一种设计模式是通过Java检查异常；当遇到失败时会抛出异常。实施这样的设计模式会强制客户端捕获异常，确定异常的原因，并相应地处理处理。我们更喜欢我们的设计来处理失败，并建议您不要使用检查异常，除非真正发生了异常情况。结果代码更易于阅读，我们可以避免处理异常的开销。
- en: The AbstractService.java class
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AbstractService.java类
- en: All service layer implementations will extend the `AbstractService` class to
    provide common functionality. We will simply define a `logger`, `@Autowire`, the
    `UserDao` implementation, and add a convenience method for checking if a user
    is valid.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有服务层实现将扩展`AbstractService`类以提供通用功能。我们将简单地定义一个`logger`，`@Autowire`，`UserDao`实现，并添加一个方便的方法来检查用户是否有效。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As discussed in the previous chapter, Spring injects the container-managed bean
    with matching type for each of the `@Autowired` annotated fields. Each service
    layer implementation that extends the `AbstractService` class will hence have
    access to the `UserDao` instance.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，Spring会为每个`@Autowired`注释的字段注入与匹配类型的容器管理的bean。因此，每个扩展`AbstractService`类的服务层实现将可以访问`UserDao`实例。
- en: 'Our service layer will implement very basic security to differentiate between
    normal users and administrator users. The `admin_role` column in the `ttt_user`
    table is used to identify if a user has administrator privileges. Enterprise applications
    will most likely have LDAP realms with appropriate roles configured for different
    user groups but the principle is the same; we need to be able to identify if a
    user is allowed to perform an action. The administrator role will be the only
    role on our 3T application and we will now add a helper method to the `User` class
    to identify whether the user is an administrator:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务层将实现非常基本的安全性，以区分普通用户和管理员用户。`ttt_user`表中的`admin_role`列用于标识用户是否具有管理员特权。企业应用程序很可能会有LDAP领域，为不同的用户组配置适当的角色，但原则是相同的；我们需要能够确定用户是否被允许执行操作。管理员角色将是我们3T应用程序上唯一的角色，我们现在将向`User`类添加一个辅助方法来确定用户是否是管理员：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The service layer implementations will use this new method to test if the user
    is an administrator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层实现将使用这个新方法来测试用户是否是管理员。
- en: The service layer interfaces
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务层接口
- en: The service layer interfaces define methods that will be exposed to clients.
    These methods define the core actions required by our 3T application. Each method
    has a `String actionUsername` argument to identify the user executing this request.
    The `actionUsername` can be used in the implementation for logging purposes or
    to ensure a valid user is requesting data. The definition of valid will depend
    on the action being performed. Each interface will use generic types to define
    the returned `Result` value object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层接口定义了将向客户端公开的方法。这些方法定义了我们3T应用程序所需的核心操作。每个方法都有一个`String actionUsername`参数，用于标识执行此请求的用户。`actionUsername`可以用于实现日志记录或确保请求数据的用户是有效的。有效的定义将取决于正在执行的操作。每个接口将使用通用类型来定义返回的`Result`值对象。
- en: 'The `CompanyService` interface will return a data payload that is either a
    Company object (`Result<Company>`) or a list of Company objects (`Result<List<Company>>`).
    The definition of this interface follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompanyService`接口将返回一个数据有效载荷，要么是一个公司对象（`Result<Company>`），要么是一个公司对象列表（`Result<List<Company>>`）。该接口的定义如下：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note we have defined a single `store` method that will be used to save data
    to persistent storage. The implementing method will decide if a `persist` or `merge`
    is required. In a similar way, we can define the remaining interfaces (package
    and import definitions have been removed).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经定义了一个`store`方法，用于将数据保存到持久存储中。实现方法将决定是否需要`persist`或`merge`。类似地，我们可以定义其余的接口（包和导入定义已被删除）。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Implementing the service layer
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现服务层
- en: Each interface defined previously will have an appropriate implementation. The
    implementing classes will follow our DAO naming conventions by adding `Impl` to
    the interface names resulting in `CompanyServiceImpl`, `ProjectServiceImpl`, `TaskServiceImpl`,
    `TaskLogServiceImpl`, and `UserServiceImpl`. We will define the `CompanyServiceImpl`,
    `TaskServiceImpl`, and `TaskLogServiceImpl` classes and leave the `ProjectServiceImpl`
    and `UserServiceImpl` as an exercise.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 先前定义的每个接口都将有一个适当的实现。实现类将遵循我们的DAO命名约定，将“Impl”添加到接口名称中，结果为“CompanyServiceImpl”、“ProjectServiceImpl”、“TaskServiceImpl”、“TaskLogServiceImpl”和“UserServiceImpl”。我们将定义“CompanyServiceImpl”、“TaskServiceImpl”和“TaskLogServiceImpl”类，并将“ProjectServiceImpl”和“UserServiceImpl”留作练习。
- en: 'The service layer implementations will process business logic with one or more
    calls to the DAO layer, validating parameters, and confirming user authorization
    as required. The 3T application security is very simple as mentioned in the following
    list:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层实现将使用一个或多个调用DAO层来处理业务逻辑，验证参数，并根据需要确认用户授权。如下列表所述，3T应用程序安全性非常简单：
- en: A valid user is required for all actions. The `actionUsername` must represent
    a valid user in the database.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有操作都需要一个有效的用户。`actionUsername`必须代表数据库中的有效用户。
- en: Only an administrator can modify the `Company`, `Project`, or `Task` data.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员可以修改`Company`、`Project`或`Task`数据。
- en: Only an administrator can modify or add users.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员可以修改或添加用户。
- en: Our service layer implementation will use the `isValidUser` method in the `AbstractService`
    class to check if the user is valid.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务层实现将使用`AbstractService`类中的`isValidUser`方法来检查用户是否有效。
- en: Authentication, authorization, and security
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证、授权和安全
- en: Application security is a critical part of enterprise application development
    and it is important to understand the difference between authentication and authorization.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序安全是企业应用程序开发的关键部分，重要的是要理解身份验证和授权之间的区别。
- en: Authentication verifies who you are. It involves verifying the username/password
    combination and is performed once during the initial login to the 3T application.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证验证你是谁。它涉及验证用户名/密码组合，并在3T应用程序的初始登录期间执行一次。
- en: Authorization verifies what you are allowed to do. 3T administrators are allowed
    to perform more actions than normal users.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权验证您被允许做什么。3T管理员可以执行比普通用户更多的操作。
- en: A 3T user must have a valid record in the `ttt_user` table; the service layer
    will simply test if the provided username represents a valid user. The actual
    authorization of the user will be covered in the next chapter when we develop
    the request handling layer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 3T用户必须在`ttt_user`表中有一个有效的记录；服务层将简单地测试提供的用户名是否代表一个有效的用户。用户的实际授权将在下一章中进行介绍，当我们开发请求处理层时。
- en: Securing an enterprise application is beyond the scope of this book but no discussion
    of this topic would be complete without mentioning Spring Security, an overview
    of which can be found at [http://static.springframework.org/spring-security/site/index.html](http://static.springframework.org/spring-security/site/index.html).
    Spring Security has become the de facto standard for securing Spring-based applications
    and an excellent book called *Spring Security 3*, by Packt Publishing, that covers
    all concepts can be found here at [http://www.springsecuritybook.com](http://www.springsecuritybook.com).
    We recommend you learn more about Spring Security to understand the many different
    ways you can authenticate users and secure your service layer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 保护企业应用程序超出了本书的范围，但在讨论这个主题时，没有提到Spring Security是不完整的。Spring Security已成为保护基于Spring的应用程序的事实标准，可以在[http://static.springframework.org/spring-security/site/index.html](http://static.springframework.org/spring-security/site/index.html)找到概述。Spring
    Security已成为保护基于Spring的应用程序的事实标准，可以在[http://www.springsecuritybook.com](http://www.springsecuritybook.com)找到一本名为《Spring
    Security 3》的优秀书籍，涵盖了所有概念。我们建议您了解更多关于Spring Security的信息，以了解您可以对用户进行身份验证和保护服务层的许多不同方式。
- en: The CompanyService implementation
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司服务实现
- en: 'The `CompanyServiceImpl` class is defined as:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompanyServiceImpl`类定义如下：'
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each method returns a `Result` object that is created by the appropriate `ResultFactory`
    static method. Each method confirms the `actionUsername` method that identifies
    a valid user for the action. Methods that modify the `Company` entity require
    an administrative user (the `store` and `remove` methods). Other methods that
    retrieve data (the `find*` method) simply require a valid user; one that exists
    in the `ttt_user` table.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法都返回一个由适当的`ResultFactory`静态方法创建的`Result`对象。每个方法都确认`actionUsername`方法，该方法标识了一个有效的用户进行操作。修改`Company`实体的方法需要一个管理用户（`store`和`remove`方法）。其他检索数据的方法（`find*`方法）只需要一个有效的用户；存在于`ttt_user`表中的用户。
- en: Note the reuse of the `if(isValidUser(actionUsername))` and `if(!actionUser.isAdmin())`
    code blocks in each method. This is not considered a good practice as this logic
    should be part of the security framework and not replicated on a per method basis.
    Using Spring Security, for example, you can apply security to a service layer
    bean by using annotations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在每个方法中重复使用`if(isValidUser(actionUsername))`和`if(!actionUser.isAdmin())`代码块。这不被认为是一个好的做法，因为这种逻辑应该是安全框架的一部分，而不是在每个方法中复制。例如，使用Spring
    Security，可以通过使用注解将安全应用到服务层bean。
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `@Secured` annotation is used to define a list of security configuration
    attributes that are applicable to the business methods. A user would then be linked
    to one or more roles by the security framework. Such a design pattern is less
    intrusive, easier to maintain, and easier to enhance.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Secured`注解用于定义适用于业务方法的安全配置属性列表。然后，用户将通过安全框架与一个或多个角色关联。这种设计模式不会过于侵入，更容易维护和增强。'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We once again recommend you learn more about Spring Security for use in real-world
    enterprise applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次建议您了解更多关于Spring Security在实际企业应用中的使用。
- en: Any action that cannot be performed as expected is considered to have "failed".
    In this case, the `ResultFactory.getFailResult` method is called to create the
    failure `Result` object.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 任何无法按预期执行的操作都被视为“失败”。在这种情况下，将调用`ResultFactory.getFailResult`方法来创建失败的`Result`对象。
- en: 'A few points to note:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的几点：
- en: Each service layer class uses the `@Service` annotation to identify this as
    a Spring-managed bean. The Spring Framework will be configured to scan for this
    annotation using `<context:component-scan base-package="com.gieman.tttracker.service"/>`
    in the application context configuration file. Spring will then load the `CompanyServiceImpl`
    class into the bean container under the `companyService` name.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个服务层类都使用`@Service`注解来标识这是一个Spring管理的bean。Spring框架将配置为使用应用程序上下文配置文件中的`<context:component-scan
    base-package="com.gieman.tttracker.service"/>`扫描此注解。然后，Spring将`CompanyServiceImpl`类加载到`companyService`名称下的bean容器中。
- en: The `store` method is used to both `persist` and `merge` a Company entity. The
    service layer client has no need to know if this will be an `insert` statement
    or an `update` statement. The appropriate action is selected in the `store` method
    based on the existence of the primary key.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store`方法用于`persist`和`merge`公司实体。服务层客户端不需要知道这将是一个`insert`语句还是一个`update`语句。根据主键的存在，在`store`方法中选择适当的操作。'
- en: The `remove` method checks if the company has projects assigned. The business
    rule implemented will only allow a company deletion if there are no projects assigned
    and then check if `company.getProjects().isEmpty()` is true. If projects are assigned,
    the `remove` method fails.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`方法检查公司是否分配了项目。实现的业务规则只允许在没有分配项目的情况下删除公司，然后检查`company.getProjects().isEmpty()`是否为true。如果分配了项目，则`remove`方法失败。'
- en: Transactional attributes depend on the action being implemented. If data is
    being modified, we use `@Transactional(readOnly = false, propagation = Propagation.REQUIRED)`
    to ensure a transaction is created if not already available. If data is not being
    modified in the method, we use `@Transactional(readOnly = true, propagation =
    Propagation.SUPPORTS)`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务属性取决于正在实现的操作。如果正在修改数据，我们使用`@Transactional(readOnly = false, propagation =
    Propagation.REQUIRED)`来确保如果尚未可用，则创建事务。如果方法中没有修改数据，我们使用`@Transactional(readOnly
    = true, propagation = Propagation.SUPPORTS)`。
- en: All service layer implementations will follow a similar pattern.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有服务层实现都将遵循类似的模式。
- en: The TaskService implementation
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskService实现
- en: 'The `TaskServiceImpl` class is defined as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskServiceImpl`类定义如下：'
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This class implements the following business rules:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该类实现以下业务规则：
- en: Removing a task is not allowed if task logs are assigned
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果分配了任务日志，则不允许删除任务
- en: Only administrators can modify a task
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员可以修改任务
- en: 'Note that in the `remove` method we check if task logs are assigned to the
    task using the code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`remove`方法中，我们使用以下代码检查是否为任务分配了任务日志：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `taskLogDao.findTaskLogCountByTask` method uses the `getSingleResult()`
    method on the `Query` interface to return a `long` value as defined in the `TaskLogDaoImpl`.
    It would have been possible to code a method as follows to find the `taskLogCount`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`taskLogDao.findTaskLogCountByTask`方法使用`Query`接口上的`getSingleResult()`方法返回在`TaskLogDaoImpl`中定义的`long`值。可以编写一个方法来查找`taskLogCount`：'
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However this option would result in JPA loading all `TaskLog` entities assigned
    to the task into memory. This is not an efficient use of resources as there could
    be millions of `TaskLog` records in a large system.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种选择会导致JPA将分配给任务的所有`TaskLog`实体加载到内存中。这不是资源的有效使用，因为在大型系统中可能有数百万条`TaskLog`记录。
- en: The TaskLogService implementation
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskLogService实现
- en: The `TaskLogService` implementation will be the final class we will go through
    in detail.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogService`实现将是我们将详细介绍的最终类。'
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once again there is a lot of business logic in this class. The main business
    rules implemented are:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这个类中有很多业务逻辑。实现的主要业务规则是：
- en: Only the owner of the `TaskLog` or an administrator can find a task log
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有`TaskLog`的所有者或管理员才能找到任务日志
- en: An administrator can add a task log for any other user
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员可以为任何其他用户添加任务日志
- en: A normal user can only add a task log for themselves
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通用户只能为自己添加任务日志
- en: Only the owner of a task log or an administrator can remove a task log
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有任务日志的所有者或管理员才能删除任务日志
- en: A normal user can only retrieve their own task logs
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通用户只能检索自己的任务日志
- en: An administrator can retrieve anyone's task logs
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员可以检索任何人的任务日志
- en: The `findByUser` method requires a valid start and end date
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findByUser`方法需要有效的开始和结束日期'
- en: We leave the remaining service layer classes (`UserServiceImpl` and `ProjectServiceImpl`)
    for you to implement as exercises.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们留下剩下的服务层类（`UserServiceImpl`和`ProjectServiceImpl`）供您作为练习实现。
- en: It is now time to configure the testing environment for our service layer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为我们的服务层配置测试环境了。
- en: Testing the service layer
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试服务层
- en: Service layer testing is a critical part of the enterprise application development.
    As mentioned previously, the service layer encapsulates the business rules that
    define the working application and is where a significant amount of development
    time is spent. Business logic evolves as the application is enhanced, new modules
    are added, and business rules change. The test cases for the service layer will
    therefore represent the evolution of the application. Well-documented test cases
    will enhance the knowledge base of the application lifecycle, define changes,
    and explain the purpose of the change. The service layer test cases will become
    a repository of information appreciated by all developers working on the project.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层测试是企业应用程序开发的关键部分。如前所述，服务层封装了定义工作应用程序的业务规则，并且在这里花费了大量的开发时间。随着应用程序的增强、新模块的添加和业务规则的改变，业务逻辑会发展。因此，服务层的测试用例将代表应用程序的发展。良好记录的测试用例将增强应用程序生命周期的知识库，定义变化，并解释变化的目的。服务层测试用例将成为所有参与项目开发的开发人员所赞赏的信息库。
- en: 'The only change required to enable service layer testing is to add the following
    to the `testingContext.xml` file defined in the previous chapter:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 启用服务层测试的唯一更改是将以下内容添加到前一章中定义的`testingContext.xml`文件中：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Test case classes added to the directory `src/test/java/com/gieman/tttracker/service`
    will then be available for testing. We will add the following classes to the service
    package:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到目录`src/test/java/com/gieman/tttracker/service`的测试用例类将可供测试。我们将向服务包添加以下类：
- en: '![Testing the service layer](img/5457_06_3.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![测试服务层](img/5457_06_3.jpg)'
- en: The `AbstractServiceForTesting` superclass will once again extend `AbstractTransactionalJUnit4SpringContextTests`,
    define the `@ContextConfiguration` configuration file, and override the default
    Spring logger with the `slf4j` logger.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractServiceForTesting`超类将再次扩展`AbstractTransactionalJUnit4SpringContextTests`，定义`@ContextConfiguration`配置文件，并使用`slf4j`记录器覆盖默认的Spring记录器。'
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running this test case by right-clicking on the file in the editor and selecting
    the **Test File** option should result in the following output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在编辑器中右键单击文件并选择**Test File**选项来运行此测试用例应该会产生以下输出：
- en: '![Testing the service layer](img/5457_06_4.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![测试服务层](img/5457_06_4.jpg)'
- en: 'The `UserServiceTest` class is defined as:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserServiceTest`类定义如下：'
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note we have not yet defined the implementation of the `UserService` interface
    but we have already written test cases. Thanks to the use of Java interfaces,
    we are able to define test cases before the implementation has been coded. This
    is one of the key concepts of **Test-driven Development** (**TDD**), where developers
    write test cases that define the desired behavior before writing the actual code
    that passes the tests. This strategy is also part of the test-first programming
    concept of Extreme Programming ([http://en.wikipedia.org/wiki/Extreme_programming](http://en.wikipedia.org/wiki/Extreme_programming)),
    where test cases are written before the implementation coding starts.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们尚未定义`UserService`接口的实现，但我们已经编写了测试用例。由于使用了Java接口，我们能够在实现编码之前定义测试用例。这是**测试驱动开发**（**TDD**）的关键概念之一，开发人员在编写通过测试的实际代码之前编写定义所需行为的测试用例。这种策略也是极限编程（[http://en.wikipedia.org/wiki/Extreme_programming](http://en.wikipedia.org/wiki/Extreme_programming)）的测试优先编程概念的一部分，在实现编码开始之前编写测试用例。
- en: 'Executing the `UserServiceTest` test file when the `UserServiceImpl` has been
    coded should result in the following output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写`UserServiceImpl`后执行`UserServiceTest`测试文件应该会产生以下输出：
- en: '![Testing the service layer](img/5457_06_5.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![测试服务层](img/5457_06_5.jpg)'
- en: Automating the service layer tests
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化服务层测试
- en: 'Updating the `pom.xml` as follows will include the service layer test cases
    during the Maven build process:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式更新`pom.xml`将在Maven构建过程中包含服务层测试用例：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Selecting **Run** | **Test Project** from the **NetBeans** menu will then execute
    all test cases from both the `dao` and `service` packages, resulting in the following
    output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从**NetBeans**菜单中选择**Run** | **Test Project**将执行`dao`和`service`包中的所有测试用例，产生以下输出：
- en: '![Automating the service layer tests](img/5457_06_6.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![自动化服务层测试](img/5457_06_6.jpg)'
- en: We leave it to you to add test cases for the remaining service layer implementations.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们留给你添加剩余服务层实现的测试用例。
- en: Exercises
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Implement the `ProjectServiceImpl` and `UserServiceImpl` interfaces as required
    by their interface definitions. Business logic to consider when implementing the
    `UserServiceImpl` are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 根据接口定义实现`ProjectServiceImpl`和`UserServiceImpl`接口。在实现`UserServiceImpl`时要考虑的业务逻辑如下：
- en: Only an admin user may modify data
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员用户可以修改数据
- en: The `email` address may not be empty
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`地址不能为空'
- en: The `password` may not be zero length
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`不能为空'
- en: The `adminRole` flag must be either `Y` or `N`
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adminRole`标志必须是`Y`或`N`'
- en: Users are not allowed to delete themselves
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许用户删除自己
- en: Users cannot be deleted if they have task logs assigned
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有任务日志分配给用户，则用户不能被删除
- en: Confirm your `UserServiceImpl` implementation by executing the `UserServiceTest`
    test case.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`UserServiceTest`测试用例来确认您的`UserServiceImpl`实现。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The service layer is the most valuable asset an enterprise application possesses.
    It is the core of all business logic processing and is the layer that holds the
    most detailed code. Our service layer has no coupling with the DAO implementation
    and is independent of how the data is used. It is purely focused on business logic
    operations, delivering data through a simple, generically typed value object using
    the data transfer object design pattern.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 服务层是企业应用程序拥有的最有价值的资产。它是所有业务逻辑处理的核心，是包含最详细代码的层。我们的服务层与DAO实现没有耦合，并且独立于数据的使用方式。它纯粹专注于业务逻辑操作，通过数据传输对象设计模式以简单的通用类型值对象传递数据。
- en: Our service layer implementation has clearly defined entry points for business
    logic operations. This is achieved through Java interfaces that define all publicly
    accessible methods. The use of interfaces also enables us to write test cases
    prior to coding the implementations—a core principle of test-driven development
    and extreme programming. In the following chapter, we will use these interfaces
    to define a request handling layer for web clients.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务层实现为业务逻辑操作明确定义了入口点。这是通过定义所有公开可访问方法的Java接口实现的。接口的使用还使我们能够在编写实现之前编写测试用例——这是测试驱动开发和极限编程的核心原则。在接下来的章节中，我们将使用这些接口来为Web客户端定义请求处理层。
