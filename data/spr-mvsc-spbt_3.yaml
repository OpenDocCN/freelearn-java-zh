- en: Chapter 3. Advanced Spring Boot Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。高级Spring Boot特性
- en: In the previous lesson, we extended our microservice with exception handling,
    HATEOAS, caching, and internationalization. In this lesson, let's turn our attention
    to deploying our services to production. To be able to deploy the services to
    production, we need to be able to set up and create functionality to configure,
    deploy, and monitor services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一课中，我们通过异常处理、HATEOAS、缓存和国际化扩展了我们的微服务。在本课中，让我们将注意力转向将我们的服务部署到生产环境。为了能够将服务部署到生产环境，我们需要能够设置和创建配置、部署和监控服务的功能。
- en: 'The following are some of the questions we will answer during this lesson:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们将回答以下问题：
- en: How to externalize application configuration?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何外部化应用程序配置？
- en: How to use profiles to configure environment-specific values?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用配置文件来配置特定环境的值？
- en: How to deploy our application to the Cloud?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将我们的应用程序部署到云中？
- en: What is an embedded server? How can you use Tomcat, Jetty, and Undertow?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是嵌入式服务器？如何使用Tomcat、Jetty和Undertow？
- en: What monitoring features does Spring Boot Actuator provide?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot Actuator提供了哪些监控功能？
- en: How can you be a more productive developer with Spring Boot?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot成为更高效的开发者？
- en: Externalised Configuration
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部化配置
- en: 'Applications are typically built once (in JAR or WAR) and then deployed into
    multiple environments. The following figure shows some of the different environments
    an application can be deployed to:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常只构建一次（在JAR或WAR文件中），然后部署到多个环境中。以下图显示了应用程序可以部署的一些不同环境：
- en: '![Externalised Configuration](img/03_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![外部化配置](img/03_01.jpg)'
- en: 'In each of the preceding environments, an application typically has the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述每个环境中，应用程序通常具有以下特点：
- en: Connections to databases
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库连接
- en: Connections to multiple services
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个服务的连接
- en: Specific environment configurations
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定环境配置
- en: It is a good practice to externalize configurations that change between different
    environments into a configuration file or database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将在不同环境之间发生变化的配置外部化到配置文件或数据库中是一种良好的实践。
- en: Spring Boot provides a flexible, standardized approach for externalized configuration.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了一种灵活、标准化的外部化配置方法。
- en: 'In this section, we will look at the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨以下内容：
- en: How can properties from `application.properties` be used inside our services?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在服务内部使用`application.properties`中的属性？
- en: How do type-safe Configuration Properties make application configuration a cakewalk?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何让类型安全的配置属性使应用程序配置变得轻而易举？
- en: What kind of support does Spring Boot provide for **Spring Profiles**?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot为**Spring配置文件**提供了哪些支持？
- en: How can you configure properties in `application.properties`?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在`application.properties`中配置属性？
- en: 'In Spring Boot, `application.properties` is the default file from which configuration
    values are picked up. Spring Boot can pick the `application.properties` file from
    anywhere on the classpath. Typically, `application.properties` is located at `src\main\resources`,
    as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot中，`application.properties`是默认的配置值来源文件。Spring Boot可以从类路径上的任何位置获取`application.properties`文件。通常，`application.properties`位于`src\main\resources`，如下面的截图所示：
- en: '![Externalised Configuration](img/03_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![外部化配置](img/03_02.jpg)'
- en: 'In [Lesson 2](ch02.html "Chapter 2. Extending Microservices"), *Extending Microservices*,
    we looked at examples of customizing Spring Security using configuration in `application.properties`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2课](ch02.html "第2章。扩展微服务")“扩展微服务”中，我们通过`application.properties`中的配置示例来查看自定义Spring
    Security的方法：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Similar to these, all other Spring Boot starters, modules, and frameworks can
    be customized through configuration in `application.properties`. In the next section,
    let's look at some of the configuration options Spring Boot provides for these
    frameworks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些类似，所有其他Spring Boot启动器、模块和框架都可以通过`application.properties`中的配置进行自定义。在下一节中，我们将探讨Spring
    Boot为这些框架提供的某些配置选项。
- en: Customizing Frameworks Through application.properties
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过`application.properties`自定义框架
- en: In this section, we will discuss some of the important things that can be configured
    through `application.properties`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些可以通过`application.properties`配置的重要事项。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the complete list, refer to [https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整的列表，请参阅[https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties)。
- en: Logging
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志
- en: 'Some of the things that can be configured are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以配置的一些事项如下：
- en: The location of the logging configuration file
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志配置文件的位置
- en: the location of the log file
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志文件的位置
- en: Logging level
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别
- en: 'The following snippet shows a few examples:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了几个示例：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Embedded Server Configuration
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内嵌服务器配置
- en: 'An embedded server is one of the most important features of Spring Boot. Some
    of the embedded server features that can be configured through application properties
    include:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 内嵌服务器是Spring Boot最重要的特性之一。可以通过应用程序属性配置的一些内嵌服务器特性包括：
- en: Server ports
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端口
- en: SSL support and configuration
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL支持和配置
- en: Access log configuration
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问日志配置
- en: 'The following snippet shows some of the embedded server features that can be
    configured through application properties:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了可以通过应用程序属性配置的一些内嵌服务器特性：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Spring MVC
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring MVC
- en: 'Spring MVC can be extensively configured through `application.properties`.
    Listed here are some of the important configurations:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC可以通过`application.properties`进行广泛的配置。以下是一些重要的配置：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Spring Starter Security
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Starter Security
- en: 'Spring Security can be extensively configured through `application.properties`.
    The following examples show some of the important configuration options related
    to Spring Security:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security可以通过`application.properties`进行广泛的配置。以下示例展示了与Spring Security相关的一些重要配置选项：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Data Sources, JDBC, and JPA
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据源、JDBC和JPA
- en: 'Data Sources, JDBC, and JPA can also be extensively configured through `application.properties`.
    Listed here are some of the important options:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源、JDBC和JPA也可以通过`application.properties`进行广泛的配置。以下是一些重要的选项：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Other Configuration Options
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他配置选项
- en: 'Some other things that can be configured through `application.properties` are
    as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`application.properties`配置的一些其他事项如下：
- en: Profiles
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件
- en: HTTP message converters (Jackson/JSON)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP消息转换器（Jackson/JSON）
- en: Transaction management
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理
- en: Internationalization
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化
- en: 'The following examples show some of the configuration options:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了可以通过应用程序属性配置的一些配置选项：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Custom Properties in Application.Properties
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Application.Properties中的自定义属性
- en: Until now, we have looked at using prebuilt properties provided by Spring Boot
    for various frameworks. In this section, we will look at creating our application-specific
    configuration that can also be configured in `application.properties`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了使用Spring Boot提供的预构建属性来配置各种框架。在本节中，我们将探讨创建我们应用程序特定的配置，这些配置也可以在`application.properties`中进行配置。
- en: Let's consider an example. We want to be able to interact with an external service.
    We want to be able to externalize the configuration of the URL of this service.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。我们希望能够与外部服务交互。我们希望能够外部化此服务URL的配置。
- en: 'The following example shows how we would want to configure the external service
    in `application.properties`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了我们如何在`application.properties`中配置外部服务：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We want to use the value of the `somedataservice.url` property in our data service.
    The following snippet shows how we can do that in an example data service.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想在数据服务中使用`somedataservice.url`属性的值。以下代码片段展示了如何在示例数据服务中实现这一点。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有两点需要注意：
- en: '`@Component public class SomeDataService`: The data service bean is managed
    by Spring because of the `@Component` annotation.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Component public class SomeDataService`: 数据服务bean由于`@Component`注解而被Spring管理。'
- en: '`@Value("${somedataservice.url}")`: The value of `somedataservice.url` will
    be autowired into the `url`variable. The `url` value can be used in the methods
    of the bean.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Value("${somedataservice.url}")`: `somedataservice.url`的值将被自动注入到`url`变量中。该`url`值可以在bean的方法中使用。'
- en: Configuration properties - Type-Safe Configuration Management
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置属性 - 类型安全的配置管理
- en: 'While the `@Value` annotation provides dynamic configuration, it also has several
    drawbacks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`@Value`注解提供了动态配置，但它也有一些缺点：
- en: If we want to use three property values in a service, we would need to autowire
    them using `@Value` three times.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想在服务中使用三个属性值，我们需要使用`@Value`注解三次来自动注入它们。
- en: The `@Value` annotations and the keys of the messages would be spread across
    the application. If we want to find the list of the configurable values in an
    application, we have to search through the application for `@Value`annotations.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Value` 注解和消息的键将在应用程序中分散。如果我们想在应用程序中找到可配置值的列表，我们必须在应用程序中搜索`@Value`注解。'
- en: 'Spring Boot provides a better approach to application configuration through
    the strongly typed `ConfigurationProperties` feature. This allows us to do the
    following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 通过强类型的 `ConfigurationProperties` 功能提供了一种更好的应用程序配置方法。这允许我们做以下事情：
- en: Have all the properties in a predefined bean structure
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在预定义的Bean结构中包含所有属性
- en: This bean would act as the centralized store for all application properties
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个Bean将作为所有应用程序属性的集中存储。
- en: The configuration bean can be autowired wherever application configuration is
    needed
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Bean可以在需要应用程序配置的地方进行自动注入。
- en: 'An example configuration bean is shown as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例配置Bean：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要注意的重要事项：
- en: '`@ConfigurationProperties("application")` is the annotation for an externalized
    configuration. We can add this annotation to any class to bind to external properties.
    The value in the double quotes--application--is used as a prefix while binding
    external configuration to this bean.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ConfigurationProperties("application")` 是用于外部化配置的注解。我们可以将此注解添加到任何类中，以绑定到外部属性。双引号中的值--application--在将外部配置绑定到此Bean时用作前缀。'
- en: We are defining multiple configurable values in the bean.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在Bean中定义了多个可配置的值。
- en: Getters and setters are needed since binding happens through Java beans property
    descriptors.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于绑定是通过Java Bean属性描述符发生的，因此需要getters和setters。
- en: 'The following snippet shows how the values for these properties can be defined
    in `application.properties`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了如何在`application.properties`中定义这些属性的值：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要注意的重要事项：
- en: '`application`: The prefix is defined as part of `@ConfigurationProperties("application")`
    while defining the configuration bean'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application`: 前缀是在定义配置Bean时作为 `@ConfigurationProperties("application")` 的一部分定义的'
- en: Values are defined by appending the prefix to the name of the property
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值是通过将前缀附加到属性名称来定义的
- en: 'We can use configuration properties in other beans by autowiring `ApplicationConfiguration`
    into the bean:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将 `ApplicationConfiguration` 自动注入到Bean中来在其他Bean中使用配置属性：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要注意的重要事项：
- en: '`@Autowired private ApplicationConfiguration configuration`: `ApplicationConfiguration`
    is autowired into `SomeOtherDataService`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired private ApplicationConfiguration configuration`: `ApplicationConfiguration`
    被自动注入到 `SomeOtherDataService`'
- en: '`configuration.getService1Timeout(), configuration.getService1Url(), configuration.isEnableSwitchForService1()`:
    Values can be accessed in bean methods using the getter methods on the configuration
    bean'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration.getService1Timeout(), configuration.getService1Url(), configuration.isEnableSwitchForService1()`:
    可以通过配置Bean上的getter方法在Bean方法中访问这些值'
- en: By default, any failure in binding externally configured values to configuration
    properties bean would result in the failure of the server start up. This prevents
    problems that arise because of misconfigured applications running in production.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将外部配置值绑定到配置属性Bean的任何失败都会导致服务器启动失败。这防止了由于在生产环境中运行配置错误的应用程序而产生的问题。
- en: 'Let''s use the misconfigure service timeout to see what happens:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用错误的配置服务超时来查看会发生什么：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The application will fail to start up with an error.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将无法启动并出现错误。
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Profiles
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: Until now, we looked at how to externalize application configuration to a property
    file, `application.properties`. What we want to be able to do is have different
    values for the same property in different environments.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们探讨了如何将应用程序配置外部化到属性文件中，即`application.properties`。我们想要实现的是在不同的环境中，相同的属性可以有不同的值。
- en: Profiles provide a way to provide different configurations in different environments.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件提供了一种在不同环境中提供不同配置的方法。
- en: 'The following snippet shows how to configure an active profile in `application.properties`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了如何在`application.properties`中配置活动配置文件：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once you have an active profile configured, you can define properties specific
    to that profile in `application-{profile-name}.properties`. For `dev` profile,
    the name of the properties file would be `application-dev.properties`. The following
    example shows the configuration in `application-dev.properties`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置了活动配置文件，你就可以在`application-{profile-name}.properties`中定义特定于该配置文件的属性。对于`dev`配置文件，属性文件的名称将是`application-dev.properties`。以下示例显示了`application-dev.properties`中的配置：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The values in `application-dev.properties` will override the default configuration
    in `application.properties`if the active profile is `dev`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果活动配置文件是`dev`，则`application-dev.properties`中的值将覆盖`application.properties`中的默认配置。
- en: 'We can have configurations for multiple environments, as shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有多个环境的配置，如下所示：
- en: '![Profiles](img/03_03.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![配置文件](img/03_03.jpg)'
- en: Profiles-Based Bean Configuration
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于配置文件的Bean配置
- en: Profiles can also be used to define different beans or different bean configurations
    in different environments. All classes marked with `@Component` or `@Configuration`
    can also be marked with an additional `@Profile` annotation to specify the profile
    in which the bean or configuration is enabled.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件也可以用来定义不同环境中的不同bean或不同的bean配置。所有标记了`@Component`或`@Configuration`的类也可以通过额外的`@Profile`注解来指定启用bean或配置的配置文件。
- en: Let's consider an example. An application needs different caches enabled in
    different environments. In the `dev` environment, it uses a very simple cache.
    In production, we would want to use a distributed cache. This can be implemented
    using profiles.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。一个应用程序需要在不同的环境中启用不同的缓存。在`dev`环境中，它使用一个非常简单的缓存。在生产环境中，我们希望使用分布式缓存。这可以通过配置文件来实现。
- en: 'The following bean shows the configuration enabled in a `dev` environment:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下bean显示了在`dev`环境中启用的配置：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following bean shows the configuration enabled in a production environment:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下bean显示了在生产环境中启用的配置：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Based on the active profile configured, the respective configuration is picked
    up. Note that we are not really configuring a distributed cache in this example.
    We are returning a simple string to illustrate that profiles can be used to implement
    these kinds of variations.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 根据配置的活动配置文件，选择相应的配置。注意，在这个例子中，我们实际上并没有配置分布式缓存。我们返回一个简单的字符串来展示配置文件可以用来实现这类变化。
- en: Other Options for Application Configuration Values
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用配置值的其他选项
- en: Until now, the approaches we took to configure application properties was using
    the key value pairs from either `application.properties` or `application-{profile-name}.properties`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们采取的方法是使用`application.properties`或`application-{profile-name}.properties`中的键值对来配置应用程序属性。
- en: Spring Boot provides a number of other ways to configure application properties.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了许多其他配置应用程序属性的方法。
- en: 'Listed here are some of the important ways of providing application configuration:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的是提供应用程序配置的一些重要方式：
- en: Command-line arguments
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行参数
- en: Creating a system property with the name `SPRING_APPLICATION_JSON` and including
    the JSON configuration
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建名为`SPRING_APPLICATION_JSON`的系统属性并包含JSON配置
- en: '`ServletConfig init` parameters'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServletConfig init`参数'
- en: '`ServletContext init` parameters'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServletContext init`参数'
- en: Java System properties (`System.getProperties()`)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java系统属性（`System.getProperties()`）
- en: Operating system environment variables
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统环境变量
- en: Profile-specific application properties outside of `.jar`, somewhere in the
    classpath of the application (`application-{profile}.properties`)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.jar`文件外的特定配置文件的应用程序属性，位于应用程序的类路径中（`application-{profile}.properties`）'
- en: Profile-specific application properties packaged inside your `.jar` (`application-{profile}.properties`
    and YAML variants)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包在您的`.jar`文件内的特定配置文件的应用程序属性（`application-{profile}.properties`和YAML变体）
- en: Application properties outside the `.jar`
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.jar`文件外的应用程序属性'
- en: Application properties packaged inside the `.jar`
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包在`.jar`文件内的应用程序属性
- en: 'More information can be found in the Spring Boot documentation at: [http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在Spring Boot文档中找到：[http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config)。
- en: The approaches at the top of this list have higher priority than those at the
    bottom of the list. For example, if a command-line argument with the name `spring.profiles.active`
    is provided when launching the application, it would override any configuration
    provided through `application.properties` because command-line arguments have
    higher preference.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 列表顶部的方案比列表底部的方案具有更高的优先级。例如，如果在启动应用程序时提供了名为 `spring.profiles.active` 的命令行参数，它将覆盖通过
    `application.properties` 提供的任何配置，因为命令行参数具有更高的优先级。
- en: This provides great flexibility in determining how you would want to configure
    your application in different environments.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这为确定您希望在不同环境中如何配置应用程序提供了极大的灵活性。
- en: YAML Configuration
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML 配置
- en: Spring Boot also supports YAML to configure your properties.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 也支持使用 YAML 来配置你的属性。
- en: '**YAML** is an abbreviation for **YAML Ain''t Markup Language**. It is a human
    readable structured format. YAML is commonly used for configuration files.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**YAML** 是 **YAML Ain''t Markup Language** 的缩写。它是一种人类可读的结构化格式。YAML 通常用于配置文件。'
- en: To understand basic syntax of YAML, look at the example below (`application.yaml`).
    This shows how our application configuration can be specified in YAML.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 YAML 的基本语法，请查看以下示例（`application.yaml`）。这显示了我们的应用程序配置如何在 YAML 中指定。
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, the YAML configuration is much more readable than `application.properties`,
    as it allows better grouping of properties.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，YAML 配置比 `application.properties` 更易于阅读，因为它允许更好地对属性进行分组。
- en: 'Another advantage of YAML is that it allows you to specify the configuration
    for multiple profiles in a single configuration file. The following snippet shows
    an example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 的另一个优点是它允许你在单个配置文件中指定多个配置文件的配置。以下片段显示了示例：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, `http://service.dev.com` will be used in the `dev` profile,
    and `http://service.prod.com` is used in the `prod` profile. In all other profiles,
    `http://service.default.com` will be used as the service URL.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`http://service.dev.com` 将在 `dev` 配置文件中使用，而 `http://service.prod.com`
    在 `prod` 配置文件中使用。在所有其他配置文件中，将使用 `http://service.default.com` 作为服务 URL。
- en: Embedded Servers
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式服务器
- en: One of the important concepts Spring Boot brings in is embedded servers.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 带入的一个重要概念之一是嵌入式服务器。
- en: Let's first understand the difference between traditional Java web application
    deployment and this new concept called embedded server.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解传统 Java 网络应用程序部署与这种称为嵌入式服务器的新概念之间的区别。
- en: 'Traditionally, with Java web applications, we build **Web Application Archive**
    (**WAR**) or **Enterprise Application Archive** (**EAR**) and deploy them into
    servers. Before we can deploy a WAR on the server, we need a web server or an
    application server installed on the server. The application server would be on
    top of the Java instance installed on the server. So, we need Java and an application
    (or web server) installed on the machine before we can deploy our application.
    The following figure shows an example installation in Linux:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，使用 Java 网络应用程序，我们构建 **Web 应用程序存档**（**WAR**）或 **企业应用程序存档**（**EAR**），并将它们部署到服务器上。在我们可以在服务器上部署
    WAR 之前，需要在服务器上安装一个 web 服务器或应用程序服务器。应用程序服务器将位于服务器上安装的 Java 实例之上。因此，在我们部署应用程序之前，需要在机器上安装
    Java 和一个应用程序（或 web 服务器）。以下图显示了 Linux 中的示例安装：
- en: '![Embedded Servers](img/03_04.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入式服务器](img/03_04.jpg)'
- en: 'Spring Boot brings in the concept of embedded servers, where the web server
    is part of the application deployable--JAR. To deploy applications using embedded
    servers, it is sufficient if Java is installed on the server. The following figure
    shows an example installation:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 引入了嵌入式服务器的概念，其中 web 服务器是应用程序可部署部分——JAR。要使用嵌入式服务器部署应用程序，只要服务器上安装了
    Java 就足够了。以下图显示了示例安装：
- en: '![Embedded Servers](img/03_05.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入式服务器](img/03_05.jpg)'
- en: When we build any application with Spring Boot, the default is to build a JAR.
    With `spring-boot-starter-web`, the default embedded server is Tomcat.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Spring Boot 构建任何应用程序时，默认是构建一个 JAR。使用 `spring-boot-starter-web`，默认嵌入式服务器是
    Tomcat。
- en: 'When we use `spring-boot-starter-web`, a few Tomcat-related dependencies can
    be seen in the Maven dependencies section. These dependencies will be included
    as part of the application deployment package:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `spring-boot-starter-web` 时，可以在 Maven 依赖项部分看到一些与 Tomcat 相关的依赖项。这些依赖项将作为应用程序部署包的一部分包含：
- en: '![Embedded Servers](img/03_06.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入式服务器](img/03_06.jpg)'
- en: 'To deploy the application, we need to build a JAR. We can build a JAR using
    the command below:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署应用程序，我们需要构建一个 JAR。我们可以使用以下命令构建 JAR：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The following screenshot shows the structure of the JAR created.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了创建的JAR的结构。
- en: '`BOOT-INF\classes` contains all application-related class files (from `src\main\java`)
    as well as the application properties from `src\main\resources`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOT-INF\classes` 包含所有与应用程序相关的类文件（来自`src\main\java`）以及来自`src\main\resources`的应用程序属性：'
- en: '![Embedded Servers](img/03_07.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入式服务器](img/03_07.jpg)'
- en: 'Some of the libraries in `BOOT-INF\lib` are shown in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`BOOT-INF\lib`中的一些库：
- en: '![Embedded Servers](img/03_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![嵌入式服务器](img/03_08.jpg)'
- en: '`BOOT-INF\lib` contains all the JAR dependencies of the application. There
    are three Tomcat-specific JARs among these. These three JARs enable the launch
    of an embedded Tomcat service when the application is run as a Java application.
    Because of this, a Java installation is sufficient to deploy this application
    on a server.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`BOOT-INF\lib` 包含应用程序的所有JAR依赖项。其中包含三个特定的Tomcat JAR。这三个JAR使得当应用程序作为Java应用程序运行时可以启动嵌入式Tomcat服务。正因为如此，一个Java安装就足够在服务器上部署此应用程序。'
- en: Switching to Jetty and Undertow
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换到 Jetty 和 Undertow
- en: 'The following screenshot shows the changes needed in order to switch to using
    Jetty embedded server:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了切换到使用Jetty嵌入式服务器所需的更改。
- en: '![Switching to Jetty and Undertow](img/3.9.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![切换到 Jetty 和 Undertow](img/3.9.jpg)'
- en: All that we need to do is exclude the Tomcat starter dependency in `spring-boot-starter-web`
    and include a dependency in `spring-boot-starter-jetty`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的只是排除`spring-boot-starter-web`中的Tomcat启动器依赖项，并包含`spring-boot-starter-jetty`中的依赖项。
- en: 'You can now see a number of Jetty dependencies in the Maven dependencies section.
    The following screenshot shows a few of the Jetty-related dependencies:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在Maven依赖项部分看到许多Jetty依赖项。以下截图显示了几个与Jetty相关的依赖项：
- en: '![Switching to Jetty and Undertow](img/03_09.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![切换到 Jetty 和 Undertow](img/03_09.jpg)'
- en: 'Switching to Undertow is equally easy. Use `spring-boot-starter-undertow` instead
    of `spring-boot-starter-jetty`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到Undertow同样简单。使用`spring-boot-starter-undertow`代替`spring-boot-starter-jetty`：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Building a WAR file
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建WAR文件
- en: Spring Boot also provides the option of building a traditional WAR file instead
    of using a JAR.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 还提供了构建传统WAR文件而不是使用JAR的选项。
- en: 'First, we need to change our packaging in `pom.xml` to `WAR`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`pom.xml`中的打包方式改为`WAR`：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We would want to prevent tomcat server to be embedded as a dependency in the
    WAR file. We can do this by modifying the dependency on the embedded server (Tomcat
    in the following example) to have a scope of provided. The following snippet shows
    the exact details:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望防止将tomcat服务器作为依赖项嵌入到WAR文件中。我们可以通过修改嵌入式服务器（以下示例中的Tomcat）的依赖项，使其作用域为提供。以下代码片段显示了确切细节：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you build the WAR file, Tomcat dependencies are not included. We can use
    this WAR to deploy on an application server, such as WebSphere or Weblogic, or
    a web server, such as Tomcat.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建WAR文件时，不会包含Tomcat依赖项。我们可以使用这个WAR文件部署到应用程序服务器，如WebSphere或Weblogic，或者一个网络服务器，如Tomcat。
- en: Developer Tools
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者工具
- en: Spring Boot provides tools that can improve the experience of developing Spring
    Boot applications. One of these is Spring Boot developer tools.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 提供了可以提升开发 Spring Boot 应用程序体验的工具。其中之一就是 Spring Boot 开发者工具。
- en: 'To use Spring Boot developer tools, we need to include a dependency:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Spring Boot 开发者工具，我们需要包含一个依赖项：
- en: '[PRE24]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Spring Boot developer tools, by default, disables the caching of view templates
    and static files. This enables a developer to see the changes as soon as they
    make them.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot 开发者工具禁用了视图模板和静态文件的缓存。这使得开发者能够在他们做出更改后立即看到更改。
- en: 'Another important feature is the automatic restart when any file in the classpath
    changes. So, the application automatically restarts in the following scenarios:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要特性是当类路径中的任何文件发生变化时自动重启。因此，应用程序在以下场景下会自动重启：
- en: When we make a change to a controller or a service class
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们对控制器或服务类进行修改时
- en: When we make a change to the property file
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们对属性文件进行修改时
- en: 'The advantages of Spring Boot developer tools are as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 开发者工具的优点如下：
- en: The developer does not need to stop and start the application each time. The
    application is automatically restarted as soon as there is a change.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者不需要每次都停止和启动应用程序。一旦有变化，应用程序就会自动重启。
- en: The restart feature in Spring Boot developer tools is intelligent. It only reloads
    the actively developed classes. It does not reload the third-party JARs (using
    two different class-loaders). Thereby, the restart when something in the application
    changes is much faster compared to cold-starting an application.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 开发者工具中的重启功能是智能的。它只重新加载正在积极开发的类。它不会重新加载第三方 JAR（使用两个不同的类加载器）。因此，当应用程序中的某些内容发生变化时，重启速度比冷启动应用程序要快得多。
- en: Live Reload
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Live Reload
- en: Another useful Spring Boot developer tools feature is **live reload**. You can
    download a specific plugin for your browser from [http://livereload.com/extensions/](http://livereload.com/extensions/).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 开发者工具的另一个有用功能是 **实时重新加载**。您可以从 [http://livereload.com/extensions/](http://livereload.com/extensions/)
    下载适用于您浏览器的特定插件。
- en: You can enable live reload by clicking on the button in the browser. The button
    in the Safari browser is shown in the following screenshot. It's in the top-left
    corner beside the address bar.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击浏览器中的按钮来启用实时重新加载。以下截图显示了 Safari 浏览器中的按钮。它在地址栏旁边的右上角。
- en: '![Live Reload](img/03_10.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![实时重新加载](img/03_10.jpg)'
- en: If there are code changes made on the pages or services that are shown in the
    browser, they are auto-refreshed with new content. There is no need to hit that
    refresh button anymore!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中显示的页面或服务上有代码更改，它们将自动用新内容刷新。不再需要点击刷新按钮了！
- en: Spring Boot Actuator
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot Actuator
- en: 'When an application is deployed into production:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序部署到生产环境时：
- en: We want to know immediately if some service goes down or is very slow
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望立即知道是否有某个服务宕机或运行非常缓慢
- en: We want to know immediately if any of the servers does not have sufficient free
    space or memory
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望立即知道是否有任何服务器没有足够的空闲空间或内存
- en: This is called **application monitoring**.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为 **应用程序监控**。
- en: '**Spring Boot Actuator** provides a number of production-ready monitoring features.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Boot Actuator** 提供了许多生产就绪的监控功能。'
- en: 'We will add Spring Boot Actuator by adding a simple dependency:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加一个简单的依赖项来添加 Spring Boot Actuator：
- en: '[PRE25]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As soon as the actuator is added to an application, it enables a number of
    endpoints. When we start the application, we see a number of added new mappings.
    The following screenshot shows an extract of these new mappings from the start
    up log:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 Actuator 添加到应用程序中，它就会启用许多端点。当我们启动应用程序时，我们会看到许多新增的映射。以下截图显示了启动日志中这些新映射的摘录：
- en: '![Spring Boot Actuator](img/03_18.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Boot Actuator](img/03_18.jpg)'
- en: 'The actuator exposes a number of endpoints. The actuator endpoint (`http://localhost:8080/application`)
    acts as a discovery for all other endpoints. The following screenshot shows the
    response when we execute the request from a Postman:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Actuator 公开了许多端点。Actuator 端点（`http://localhost:8080/application`）充当所有其他端点的发现。以下截图显示了从
    Postman 执行请求时的响应：
- en: '![Spring Boot Actuator](img/03_11.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Boot Actuator](img/03_11.jpg)'
- en: HAL Browser
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HAL 浏览器
- en: 'A number of these endpoints expose a lot of data. To be able to visualize the
    information better, we will add an **HAL Browser** to our application:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些端点公开了大量数据。为了更好地可视化信息，我们将在应用程序中添加一个 **HAL 浏览器**：
- en: '[PRE26]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Spring Boot Actuator exposes REST APIs around all the data captured from the
    Spring Boot application and environment. The HAL Browser enables visual representation
    around the Spring Boot Actuator API:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot Actuator 在从 Spring Boot 应用程序和环境捕获的所有数据周围公开了 REST API。HAL 浏览器使 Spring
    Boot Actuator API 的可视化表示成为可能：
- en: '![HAL Browser](img/03_12.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![HAL 浏览器](img/03_12.jpg)'
- en: When we launch `http://localhost:8080/application` in the browser, we can see
    all the URLs exposed by actuator.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中启动 `http://localhost:8080/application` 时，我们可以看到 actuator 公开的所有 URL。
- en: '![HAL Browser](img/03_13.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![HAL 浏览器](img/03_13.jpg)'
- en: Let's browse all the information exposed by actuator as part of different endpoints
    through the HAL Browser.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过 HAL 浏览器浏览 actuator 作为不同端点的一部分公开的所有信息。
- en: Configuration Properties
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置属性
- en: 'The `configprops` endpoint provides information about configuration options
    that can be configured through application properties. It basically is a collated
    list of all `@ConfigurationProperties`. The following screenshot shows `configprops`
    in HAL Browser:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`configprops` 端点提供了有关可以通过应用程序属性配置的配置选项的信息。它基本上是一个所有 `@ConfigurationProperties`
    的汇总列表。以下截图显示了 HAL 浏览器中的 `configprops`：'
- en: '![Configuration Properties](img/03_14.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![配置属性](img/03_14.jpg)'
- en: 'To illustrate a known example, the following section from the service response
    shows the configuration options available for Spring MVC:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一个已知示例，以下服务响应的部分显示了Spring MVC可用的配置选项：
- en: '[PRE27]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To provide configuration for Spring MVC, we combine the prefix with the path
    in properties. For example, to configure `loadOnStartup`, we use a property with
    the name `spring.mvc.servlet.loadOnStartup`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为Spring MVC提供配置，我们在属性中结合了前缀和路径。例如，要配置`loadOnStartup`，我们使用名为`spring.mvc.servlet.loadOnStartup`的属性。
- en: Environment Details
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境细节
- en: 'The **environment** (**env**) endpoint provides information about the operating
    system, JVM installation, classpath, system environment variable, and the values
    configured in various application properties files. The following screenshot shows
    the environment endpoint in the HAL Browser:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境**（**env**）端点提供了有关操作系统、JVM安装、类路径、系统环境变量以及配置在各种应用程序属性文件中的值的详细信息。以下截图显示了HAL浏览器中的环境端点：'
- en: '![Environment Details](img/03_15.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![环境细节](img/03_15.jpg)'
- en: 'An extract from the response from the `/application/env` service is shown here.
    It shows a few system details as well as the details from application configuration:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了从`/application/env`服务响应中提取的内容。它显示了几个系统细节以及应用程序配置的详细信息：
- en: '[PRE28]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Health
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 健康
- en: 'The health service provides details of the disk space and status of the application.
    The following screenshot shows the service executed from the HAL Browser:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 健康服务提供了有关磁盘空间和应用程序状态的信息。以下截图显示了从HAL浏览器执行的服务：
- en: '![Health](img/03_16.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![健康](img/03_16.jpg)'
- en: Mappings
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射
- en: 'The mappings endpoint provides information about different service endpoints
    that are exposed from the application:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 映射端点提供了有关从应用程序公开的不同服务端点的信息：
- en: URI
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI
- en: Request methods
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求方法
- en: Bean
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化bean
- en: Controller methods exposing the service
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露服务的控制器方法
- en: 'Mappings provides a collated list of all `@RequestMapping` paths. An extract
    from the response of the `/application/mappings` endpoint is shown here:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 映射提供了所有`@RequestMapping`路径的汇总列表。以下是从`/application/mappings`端点响应中提取的内容：
- en: '[PRE29]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Beans
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化bean
- en: The beans endpoint provides the details about the beans that are loaded into
    the Spring context. This is useful in debugging any problems related to Spring
    context.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化bean端点提供了加载到Spring上下文中的bean的详细信息。这在调试与Spring上下文相关的任何问题时非常有用。
- en: '[PRE30]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It shows the details for two beans: `basicController` and `todoController`.
    You can see the following details for all the beans:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了两个bean的详细信息：`basicController`和`todoController`。你可以看到以下所有bean的详细信息：
- en: The name of the bean and its aliases
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化bean的名称及其别名
- en: The scope of the bean
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 豆类的范围
- en: The type of the bean
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化bean的类型
- en: The exact location of the class from which this bean is created
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建此bean的类的确切位置
- en: Dependencies of the bean
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化bean的依赖项
- en: Metrics
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指标
- en: 'The metrics endpoint shows some of the important metrics about the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 指标端点显示了以下重要指标：
- en: Server--free memory, processors, uptime, and so on
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器--空闲内存、处理器、运行时间等
- en: JVM--details about the heap, threads, garbage collection, sessions, and so on
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM--有关堆、线程、垃圾回收、会话等的详细信息
- en: Responses provided by application services
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序服务提供的响应
- en: 'An extract from the response of the `/application/metrics` endpoint is shown
    as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 下面展示了`/application/metrics`端点响应的提取内容：
- en: '[PRE31]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Auto-Configuration
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动配置
- en: Auto-configuration is one of the most important features of Spring Boot. The
    auto-configuration endpoint (`/application/autoconfig`) exposes the details related
    to auto-configuration. It shows both positive matches and negative matches with
    details about why a particular auto-configuration succeeded or failed.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 自动配置是Spring Boot最重要的功能之一。自动配置端点（`/application/autoconfig`）公开了与自动配置相关的详细信息。它显示了正匹配和负匹配，并详细说明了为什么特定的自动配置成功或失败。
- en: 'The following extract shows some of the positive matches from the response:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从响应中提取的一些正匹配项：
- en: '[PRE32]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following extract shows some of the negative matches from the response:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从响应中提取的一些负匹配项：
- en: '[PRE33]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: All these details are very useful in order to debug auto-configuration.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些详细信息对于调试自动配置非常有用。
- en: Debugging
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: 'Three of the actuator endpoints are useful when debugging problems:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试问题时，有三个actuator端点非常有用：
- en: '`/application/heapdump`: Provides a heap dump'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/application/heapdump`：提供堆转储'
- en: '`/application/trace`: Provides a trace of the last few requests serviced by
    the application'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/application/trace`：提供由应用程序服务的最后几个请求的跟踪信息'
- en: '`/application/dump`: Provides a thread dump'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/application/dump`: 提供线程转储'
- en: Deploying an Application to Cloud
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到云
- en: Spring Boot has great support for most popular Cloud **Platform as a Service**
    (**PaaS**) providers.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot对大多数流行的云**平台即服务**（**PaaS**）提供商有很好的支持。
- en: 'Some of the popular ones are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些流行的如下所示：
- en: Cloud Foundry
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: Heroku
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku
- en: OpenShift
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift
- en: '**Amazon Web Services** (**AWS**)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）'
- en: In this section, we will focus on deploying our application to Cloud Foundry.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于将我们的应用程序部署到Cloud Foundry。
- en: Cloud Foundry
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: The Cloud Foundry Java buildpack has excellent support for Spring Boot. We can
    deploy standalone applications based on JARs as well as the traditional Java EE
    WAR applications.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Foundry的Java构建包对Spring Boot有很好的支持。我们可以部署基于JAR的独立应用程序以及传统的Java EE WAR应用程序。
- en: 'Cloud Foundry provides a Maven plugin to deploy applications:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Foundry提供了一个Maven插件来部署应用程序：
- en: '[PRE34]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Before we can deploy our application, we need to configure the application with
    a target and a space to deploy the application to.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够部署我们的应用程序之前，我们需要配置应用程序的目标和部署应用程序的空间。
- en: 'The following are the steps involved:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是涉及的步骤：
- en: 'We need to create a pivotal Cloud Foundry account at: [https://account.run.pivotal.io/sign-up](https://account.run.pivotal.io/sign-up).'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要在[https://account.run.pivotal.io/sign-up](https://account.run.pivotal.io/sign-up)创建一个Pivotal
    Cloud Foundry账户。
- en: Once we have an account, we can log in at [https://run.pivotal.io](https://run.pivotal.io)
    to create an organization and space. Have the org and space details ready as we
    need them in order to deploy the application.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我们有了账户，我们可以在[https://run.pivotal.io](https://run.pivotal.io)登录以创建一个组织和空间。准备好org和space的详细信息，因为我们需要它们来部署应用程序。
- en: 'We can update the plugin with the configuration of `org` and `space`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`org`和`space`的配置来更新插件：
- en: '[PRE35]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We need to log in to Cloud Foundry using the Maven plugin on command prompt
    or terminal:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用命令提示符或终端上的Maven插件登录到Cloud Foundry：
- en: '[PRE36]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If everything is successful, you will see a message, as shown here:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到如下所示的消息：
- en: '[PRE37]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once you are able to log in, you can push the application to Cloud Foundry:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您能够登录，您可以将应用程序推送到Cloud Foundry：
- en: '[PRE38]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Once we execute the command, Maven will compile, run tests, build the application
    JAR or WAR, and then deploy it to the Cloud:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行了命令，Maven将编译、运行测试、构建应用程序JAR或WAR文件，然后将其部署到云：
- en: '[PRE39]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once the application is up and running on the Cloud, we can use the URL from
    the log to launch the application: [http://springboot-for-beginners-example.cfapps.io](http://springboot-for-beginners-example.cfapps.io).'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序在云上运行，我们可以使用日志中的URL来启动应用程序：[http://springboot-for-beginners-example.cfapps.io](http://springboot-for-beginners-example.cfapps.io)。
- en: Note
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find more information about the Java Build Pack of Cloud Foundry at
    [https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven](https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven](https://docs.run.pivotal.io/buildpacks/java/build-tool-int.html#maven)找到更多关于Cloud
    Foundry的Java构建包的信息。
- en: Summary
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Spring Boot makes developing Spring-based applications easy. It enables us to
    create production-ready applications very quickly.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot使基于Spring的应用程序开发变得简单。它使我们能够非常快速地创建生产就绪的应用程序。
- en: In this lesson, we understood the different external configuration options provided
    by Spring Boot. We looked at embedded servers and deployed a test application
    to a PaaS Cloud platform--Cloud Foundry. We explored how to monitor our application
    in the production using Spring Boot Actuator. At the end, we looked at the features
    that make a developer more productive--Spring Boot developer tools and live reload.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，我们了解了Spring Boot提供的不同外部配置选项。我们查看嵌入式服务器并将测试应用程序部署到PaaS云平台--Cloud Foundry。我们探讨了如何在生产中使用Spring
    Boot Actuator来监控我们的应用程序。最后，我们查看使开发者更高效的功能--Spring Boot开发者工具和实时重载。
- en: With this, we've come to the end of this book. I hope you'd a smooth journey
    and gained a lot of knowledge on building microservices with Spring Boot.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经到达了这本书的结尾。希望您有一个顺利的旅程，并且从使用Spring Boot构建微服务中获得了大量的知识。
- en: I wish you all the best for your future projects. Keep learning and exploring!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我祝愿您未来的项目一切顺利。继续学习和探索！
- en: Assessments
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: The ________ endpoint provides information about the operating system, JVM installation,
    classpath, system environment variable, and the values configured in various application
    properties files.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: The ________ 端点提供有关操作系统、JVM安装、类路径、系统环境变量以及配置在各种应用程序属性文件中的值的详细信息。
- en: Which of the following is provided by cloud to Cloud Foundry?
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是由云提供给Cloud Foundry的？
- en: Software as a Service
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件即服务
- en: Platform as a Service
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平台即服务
- en: Infrastructure as a Service
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基础设施即服务
- en: All of the above
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有选项
- en: 'State whether True or False: Spring MVC can be extensively configured through
    `application.properties`.'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断以下哪个是正确的：Spring MVC可以通过`application.properties`进行广泛的配置。
- en: Which of the following actuator endpoints provides a trace of the last few requests
    serviced by the application when debugging.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个actuator端点在调试时提供了应用程序最近服务的几个请求的跟踪。
- en: '`/applications/trace`'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/applications/trace`'
- en: '`/application/tracing`'
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/application/tracing`'
- en: '`/app/trace`'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/app/trace`'
- en: '`/apps/tracing`'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/apps/tracing`'
- en: _________ makes developing Spring-based applications easy as it enables you
    to create production-ready applications very quickly.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _________使得基于Spring的应用开发变得简单，因为它能让你快速创建生产就绪的应用程序。
