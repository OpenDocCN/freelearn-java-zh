- en: Chapter 6. Clustering with SSL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 使用SSL进行集群
- en: In the previous two chapters, we have learnt to use `JK` and `mod_cluster` as
    the load balancer to proxy user requests to EAP6 backend servers, and all the
    communications between load balancer and EAP6 servers are transferred in *plaintext*.
    In practice, there are situations where we need to secure the transportation layer
    by enabling **SSL**. In this chapter, we'll learn how to enable SSL in the clustering
    environment. We'll first learn how to enable SSL when using JBoss EAP6 independently,
    and then we'll learn how to enable SSL in a clustering environment that has httpd
    and EAP6 servers running together. For the clustering environment, we'll use `JK`
    as a load balancer in this chapter. Because using `mod_cluster` has provided a
    more fine-grained integration with SSL, we'll talk about this topic in the next
    chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个章节中，我们学习了如何使用`JK`和`mod_cluster`作为负载均衡器代理用户请求到EAP6后端服务器，并且负载均衡器和EAP6服务器之间的所有通信都是明文传输的。在实践中，有时我们需要通过启用**SSL**来确保传输层的安全。在本章中，我们将学习如何在集群环境中启用SSL。我们首先将学习如何在独立使用JBoss
    EAP6时启用SSL，然后我们将学习如何在httpd和EAP6服务器一起运行的集群环境中启用SSL。对于集群环境，在本章中我们将使用`JK`作为负载均衡器。因为使用`mod_cluster`已经提供了与SSL更精细的集成，我们将在下一章讨论这个话题。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You need to have some basic knowledge of public key cryptography and SSL before
    reading this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章之前，您需要具备一些关于公钥加密和SSL的基本知识。
- en: Using SSL in JBoss EAP6
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JBoss EAP6中使用SSL
- en: First let us see how to enable SSL in EAP6 directly. This is useful when we
    are using EAP6 as a standalone server and it doesn't have any load balancing in
    front. JBoss EAP6 provides SSL support out of the box and in this section, let's
    see how to enable it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何在EAP6中直接启用SSL。当我们使用EAP6作为独立服务器且前面没有任何负载均衡器时，这很有用。JBoss EAP6自带SSL支持，在本节中，我们将看看如何启用它。
- en: Enabling SSL in EAP6
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在EAP6中启用SSL
- en: To enable SSL in EAP6, we need to create an x.509 certificate for the EAP6 server.
    First prepare a clean copy of `JBoss EAP 6.1.0.Final` to make sure the configurations
    are default. After the clean copy of EAP6 server is ready for use, please start
    it in the standalone mode, and then deploy `cluster-demo1` to the running server
    and then stop the server. That's all we need to do for preparation. We'll use
    it to test the HTTPS connection later.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要在EAP6中启用SSL，我们需要为EAP6服务器创建一个x.509证书。首先准备一个干净的`JBoss EAP 6.1.0.Final`副本，以确保配置是默认的。当EAP6服务器的干净副本准备好使用时，请以独立模式启动它，然后将`cluster-demo1`部署到运行的服务器上，然后停止服务器。这就是我们需要的准备工作。我们将用它来测试HTTPS连接。
- en: Now let's create a directory called `certs` in the EAP6 base path. We'll use
    it to store the server certificate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在EAP6基本路径下创建一个名为`certs`的目录。我们将用它来存储服务器证书。
- en: 'Then we need to navigate to the `certs` directory and use the `keytool` command
    provided by **Java Runtime Environment** (**JRE**) to generate a certificate for
    the EAP6 server. Here is the command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要导航到`certs`目录，并使用**Java运行时环境**（**JRE**）提供的`keytool`命令为EAP6服务器生成一个证书。以下是命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The running process is shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行过程如下截图所示：
- en: '![Enabling SSL in EAP6](img/2432_06_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![在EAP6中启用SSL](img/2432_06_02.jpg)'
- en: 'The **keystore password** and **key password** is **packt000** . Please note
    that in a production environment, we must set **CN** to the hostname of our website.
    For this example, my hostname is called **mini**, so I use it as **CN** of the
    certificate. Now let''s check the generated `keystore` file and the key that is
    contained in it:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**密钥库密码**和**密钥密码**是**packt000**。请注意，在生产环境中，我们必须将**CN**设置为我们的网站主机名。对于这个例子，我的主机名叫做**mini**，所以我将其用作证书的**CN**。现在让我们检查生成的`keystore`文件及其包含的密钥：'
- en: '![Enabling SSL in EAP6](img/2432_06_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![在EAP6中启用SSL](img/2432_06_03.jpg)'
- en: As shown in the preceding screenshot, our generated key and its certificate
    are stored in `keystore`. The default **Alias name** of the key is **mykey**,
    and its certificate is associated with it. If we look carefully, we can see that
    the **Issuer** and the **Owner** of this certificate are the same. That means
    this is a self-signed certificate. In a production environment, we need to find
    an authority (like **VeriSign**) to sign this certificate. After the authority
    has signed it, the **Issuer** will be changed to the authority.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，我们生成的密钥及其证书存储在 `keystore` 中。密钥的默认 **别名** 是 **mykey**，其证书与之关联。如果我们仔细观察，我们可以看到这个证书的
    **发行者** 和 **所有者** 是相同的。这意味着这是一个自签名证书。在生产环境中，我们需要找到一个权威机构（如 **VeriSign**）来签署这个证书。在权威机构签署后，**发行者**
    将会变为该权威机构。
- en: 'Now we need to configure the EAP6 web subsystem to use the key together with
    its certificate. Let''s open `standalone.xml` and find the subsystem `urn:jboss:domain:web:1.4`.
    Then we need to find an HTTP connector and change its scheme to HTTPS. Next we
    need to add an SSL element to tell EAP6 the position of our `keystore` and the
    alias name of our key. The modifications should be as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要配置 EAP6 Web 子系统以使用密钥及其证书。让我们打开 `standalone.xml` 并找到子系统 `urn:jboss:domain:web:1.4`。然后我们需要找到一个
    HTTP 连接器并将其方案更改为 HTTPS。接下来，我们需要添加一个 SSL 元素来告诉 EAP6 我们 `keystore` 的位置和我们的密钥的别名。修改应如下所示：
- en: '![Enabling SSL in EAP6](img/2432_06_04.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![在 EAP6 中启用 SSL](img/2432_06_04.jpg)'
- en: 'That''s all we need to configure in `standalone.xml`. In addition, please note
    the port used by HTTPS in the configuration file is `8443`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是我们需要在 `standalone.xml` 中配置的所有内容。此外，请注意配置文件中 HTTPS 使用的端口是 `8443`：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So we need to use this port to access the EAP6 web subsystem. Now we can start
    the EAP6 server and test the HTTPS connection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要使用这个端口来访问 EAP6 Web 子系统。现在我们可以启动 EAP6 服务器并测试 HTTPS 连接：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `-k` option of **cURL** is to bypass the certificate verification. Since
    our certificate is not signed by an authority, by default it's not trusted by
    cURL or any other web browsers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**cURL** 的 `-k` 选项是绕过证书验证。由于我们的证书未由权威机构签署，默认情况下它不被 cURL 或任何其他网络浏览器信任。'
- en: In this section, we have learned how to enable SSL in the EAP6 standalone mode.
    Enabling SSL in the domain mode is similar; we also need to set the web subsystem
    to use the HTTPS scheme and add the certificate information in the SSL element.
    I'd like to leave this work to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在 EAP6 独立模式下启用 SSL。在域模式下启用 SSL 类似；我们还需要将 Web 子系统设置为使用 HTTPS 方案，并在
    SSL 元素中添加证书信息。我想把这个任务留给你。
- en: Using SSL in the JBoss EAP6 cluster
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JBoss EAP6 集群中使用 SSL
- en: 'In a clustering environment, applying SSL does not seem as straightforward
    as in a single-server environment. We have a load balancer and worker nodes in
    a cluster, so we need to decide in which place we should enable SSL. Here are
    the two possible places:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群环境中，应用 SSL 并不像在单服务器环境中那样直接。我们有一个集群中的负载均衡器和工作节点，因此我们需要决定在哪个位置启用 SSL。以下是两个可能的位置：
- en: The communication between users and the load balancer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户与负载均衡器之间的通信
- en: The communication between the load balancer and the worker nodes
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器与工作节点之间的通信
- en: 'In practice, we usually enable SSL between users and the load balancer to secure
    their communication, and use *cleartext* communication between the load balancer
    and the worker nodes. Here is the deployment diagram:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们通常在用户和负载均衡器之间启用 SSL 以确保他们的通信安全，并在负载均衡器和工作节点之间使用 *明文* 通信。以下是部署图：
- en: '![Using SSL in the JBoss EAP6 cluster](img/2432_06_06.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![在 JBoss EAP6 集群中使用 SSL](img/2432_06_06.jpg)'
- en: This is reasonable because the worker nodes are usually protected by a firewall,
    and the purpose of using SSL is not only for encrypting communication channel,
    but a certificate signed by an authority can also help the customers' web browsers
    to verify the identity of the web server.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是合理的，因为工作节点通常由防火墙保护，使用 SSL 的目的不仅是为了加密通信通道，而且由权威机构签署的证书还可以帮助客户的网络浏览器验证 Web 服务器的身份。
- en: Enabling SSL communication between the load balancer and the worker node also
    creates many overheads in the communication layer, and encrypting/decrypting network
    data consumes CPU power.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在负载均衡器和工作节点之间启用 SSL 通信也会在通信层创建许多开销，加密/解密网络数据会消耗 CPU 功率。
- en: '`JK` doesn''t support the SSL communication between the load balancer and the
    worker node, and this is not a problem in most situations as I explained earlier,
    `mod_cluster` supports the secure connection between the load balancer and the
    worker node, and we will see how to configure it in the next chapter.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`JK` 不支持负载均衡器和工作节点之间的 SSL 通信，正如我之前解释的那样，在大多数情况下这不是问题，因为 `mod_cluster` 支持负载均衡器和工作节点之间的安全连接，我们将在下一章中看到如何配置它。'
- en: Configuring JK with SSL
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 JK 使用 SSL
- en: 'Now let''s start to learn how to enable SSL with `JK`. Let''s see the deployment
    diagram first:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始学习如何使用 `JK` 启用 SSL。首先，让我们看看部署图：
- en: '![Configuring JK with SSL](img/2432_06_08.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![配置 JK 使用 SSL](img/2432_06_08.jpg)'
- en: Actually what we need to do is just enable SSL in Apache httpd. As we know,`mod_jk`
    is a lightweight load balancer and it only supports the AJP connection to worker
    nodes. That means the communication between `JK` and EAP6 servers will be *cleartext*
    AJP13 protocol.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上我们只需要在 Apache httpd 中启用 SSL。正如我们所知，`mod_jk` 是一个轻量级负载均衡器，它只支持到工作节点的 AJP 连接。这意味着
    `JK` 和 EAP6 服务器之间的通信将是 *明文* AJP13 协议。
- en: To enable SSL in httpd, we need to do some preparation work. Please restore
    httpd with `JK` installed, we'll configure SSL based on it. If you've forgotten
    how to configure httpd and `JK` properly, please read [Chapter 4](ch04.html "Chapter 4. Load
    Balancing with mod_jk"), *Load Balancing with mod_j* *k* again.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 httpd 中启用 SSL，我们需要做一些准备工作。请使用 `JK` 安装恢复 httpd，我们将基于它配置 SSL。如果你忘记了如何正确配置 httpd
    和 `JK`，请再次阅读[第 4 章](ch04.html "第 4 章。使用 mod_jk 进行负载均衡")，*使用 mod_jk 进行负载均衡*。
- en: Generating a certificate for httpd
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 httpd 生成证书
- en: 'Now let''s prepare the server certificate for httpd to use. First, let''s create
    a `certs` directory in httpd:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为 httpd 准备服务器证书。首先，在 httpd 中创建一个 `certs` 目录：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then we need to navigate to the `certs` directory and generate a certificate
    for httpd. For httpd, we'll need to use **OpenSSL** to generate a certificate,
    because httpd doesn't support the `keystore` format used by Java applications.
    Actually, the certificate formats are all the same, but the storing structures
    generated by `keytool` and OpenSSL are different. OpenSSL separates the keys and
    certificates into standalone files, but `keytool` stores them in a single `keystore`
    file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要导航到 `certs` 目录并为 httpd 生成一个证书。对于 httpd，我们需要使用 **OpenSSL** 来生成证书，因为 httpd
    不支持 Java 应用程序使用的 `keystore` 格式。实际上，证书格式都是相同的，但 `keytool` 和 OpenSSL 生成的存储结构是不同的。OpenSSL
    将密钥和证书分离成独立的文件，而 `keytool` 则将它们存储在一个单独的 `keystore` 文件中。
- en: 'Now let''s generate a key, and here is the command and its process:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们生成一个密钥，以下是命令及其过程：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next we need to generate a certificate file relative to this key file. Here
    is the command and its process:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为这个密钥文件生成一个相关的证书文件。以下是命令及其过程：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we get the certificate request file `lb.csr` and its related key file `lb.key`.
    Next is to sign the certificate request file. Because this certificate is for
    testing, we don''t need to find an authority to sign it. We can use the key file
    to sign its own certificate request file. So this is a self-signed certificate.
    Here is the command and the running process:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了证书请求文件 `lb.csr` 和相关的密钥文件 `lb.key`。接下来是签署证书请求文件。因为这个证书是用于测试的，我们不需要找到一个权威机构来签署它。我们可以使用密钥文件来签署其自己的证书请求文件。所以这是一个自签名证书。以下是命令和运行过程：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The signed certificate file is generated and the name is `lb.crt`. This file
    is in the standard format, so we can also use `keytool` to check its content,
    as shown in the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的证书文件已生成，文件名为 `lb.crt`。这个文件是标准格式，因此我们也可以使用 `keytool` 来检查其内容，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From the previous code snippet, we can see that the `Owner` and `Issuer` of
    this certificate are same. That was the process to generate a self-signed certificate
    with OpenSSL. Actually, we can wrap up the preceding processes into a single command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，我们可以看到这个证书的 `Owner` 和 `Issuer` 是相同的。这就是使用 OpenSSL 生成自签名证书的过程。实际上，我们可以将前面的过程合并成一个命令：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the preceding command, we can generate a key file and its self-signed
    certificate in one step.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的命令，我们可以一步生成密钥文件及其自签名证书。
- en: Configuring httpd to use certificates
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 httpd 使用证书
- en: 'We need to add several directives into `httpd.conf`. The first step is to ask
    httpd to listen to port `443`, this is the standard port of https. I''m reusing
    the cluster configuration from the previous two chapters, so I''m still running
    my httpd on the machine `lb`, and I''ll configure it to listen to the public SSL
    port:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`httpd.conf`中添加几个指令。第一步是让httpd监听端口`443`，这是HTTPS的标准端口。我正在重用前两章中的集群配置，所以我仍然在我的机器`lb`上运行httpd，并将它配置为监听公共SSL端口：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And don''t forget to comment out the access to port 80, because we don''t want
    users to connect without HTTPS:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 并且不要忘记注释掉对端口80的访问，因为我们不希望用户在不使用HTTPS的情况下连接：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we need to configure `JK`, and its configuration file is in `conf.d/httpd-jk.conf`.
    Please delete all the contents inside and replace it with the following content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要配置`JK`，其配置文件位于`conf.d/httpd-jk.conf`。请删除其中的所有内容，并替换为以下内容：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As shown in the preceding configuration, we have added a `VirtualHost` bound
    to the port `443`. In addition, we have enabled the SSL engine and provided the
    server certificate and its key files to use. Moreover, we have put the JkMount
    point inside this virtual host, so the user requests to HTTPS will be proxied
    by `JK` and sent to the EAP6 servers in behind.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的配置所示，我们添加了一个绑定到端口`443`的`VirtualHost`。此外，我们已启用SSL引擎，并提供了服务器证书及其密钥文件以使用。此外，我们已将JkMount点放在此虚拟主机内，因此用户对HTTPS的请求将通过`JK`代理并发送到后面的EAP6服务器。
- en: 'That''s all we need to configure in httpd. Because the communication between
    httpd and the EAP6 servers are still using the plaintext AJP13 protocol, so we
    don''t need to change any configuration in EAP6\. Now we can start the EAP6 servers
    and the httpd server. During the httpd server startup, it needs us to input the
    pass phrase of our key. The process is shown in the following code snippet:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在httpd中需要配置的所有内容。因为httpd和EAP6服务器之间的通信仍在使用明文的AJP13协议，所以我们不需要在EAP6中更改任何配置。现在我们可以启动EAP6服务器和httpd服务器。在httpd服务器启动过程中，它需要我们输入我们的密钥的密码短语。过程如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Some of your private key files are encrypted for security reasons.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，一些你的私钥文件已被加密。
- en: In order to read them you have to provide the pass phrases.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了阅读它们，你必须提供密码短语。
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you have set `LogLevel` to `debug` in `httpd.conf`, you can see many SSL-related
    log outputs in `logs/error_log`. It''s a good source to do analysis if anything
    goes wrong. Now we can access the load balancer by using HTTPS and see that the
    requests are forwarded to the EAP6 servers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在`httpd.conf`中将`LogLevel`设置为`debug`，你可以在`logs/error_log`中看到许多与SSL相关的日志输出。如果出现问题，这是一个很好的分析来源。现在我们可以通过HTTPS访问负载均衡器，并看到请求被转发到EAP6服务器：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we use **Wireshark** to monitor the proxy channel between httpd and EAP6,
    we can see they are still using the *plaintext* AJP13 protocol to communicate:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用**Wireshark**来监控httpd和EAP6之间的代理通道，我们可以看到它们仍在使用*明文*的AJP13协议进行通信：
- en: '![Configuring httpd to use certificates](img/2432_06_17.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![配置httpd使用证书](img/2432_06_17.jpg)'
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have got an overview on applying SSL to EAP6 and the clustering
    environment, and we have seen how to configure SSL and `JK` together into httpd.
    In the next chapter, we'll learn how to apply SSL with `mod_cluster`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对将SSL应用于EAP6和集群环境进行了概述，并看到了如何将SSL和`JK`一起配置到httpd中。在下一章中，我们将学习如何使用`mod_cluster`应用SSL。
