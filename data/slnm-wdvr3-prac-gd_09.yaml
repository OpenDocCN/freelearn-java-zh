- en: The PageObject Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PageObject模式
- en: 'So far, we have seen various APIs of WebDriver and learned how to use them
    to accomplish various actions on the web application we have been testing. We
    created a number of tests that use these APIs and are executed continuously to
    validate the application. However, as your test suite grows, the complexity of
    your tests and code will also grow. This becomes a challenge, with respect to
    the maintainability of your scripts and code. You will need to design a maintainable,
    modular, and reusable test code that will scale as you add more test coverage.
    In this chapter, we will explore the PageObject pattern to build a highly maintainable
    test suite. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了WebDriver的各种API，并学习了如何使用它们来执行我们在测试的Web应用程序上的各种操作。我们创建了许多使用这些API的测试，并且它们会持续执行以验证应用程序。然而，随着你的测试套件的增长，你的测试和代码的复杂性也会增加。这成为了一个挑战，特别是关于你的脚本和代码的可维护性。你需要设计一个可维护的、模块化的和可重用的测试代码，这样随着你添加更多的测试覆盖率，它也能扩展。在本章中，我们将探讨PageObject模式来构建一个高度可维护的测试套件。我们将涵盖以下主题：
- en: What is the PageObject pattern design?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PageObject模式设计是什么？
- en: Good practices for designing PageObjects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计PageObjects的良好实践
- en: Extensions to the PageObject pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PageObject模式的扩展
- en: An end-to-end example
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个端到端示例
- en: A decently written test script would work just fine, as long as the target web
    application doesn't change. But once one or more pages in your web application
    change, as a test-script developer, you shouldn't be in a position where you have
    to refactor your test scripts in a hundred different places. Let's understand
    this statement better with the help of an example. We will try to go through this
    chapter by working on a WordPress blog. Before we start, I would like you to create
    a WordPress blog ([http://wordpress.com/about](http://wordpress.com/about)) or
    use one of your existing ones.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个写得不错的测试脚本只要目标Web应用程序不改变就能正常工作。但是一旦你的Web应用程序中的一个或多个页面发生变化，作为一个测试脚本开发者，你不应该处于不得不在数百个不同地方重构你的测试脚本的位置。让我们通过一个例子更好地理解这个陈述。我们将通过在一个WordPress博客上工作来尝试通过这一章。在我们开始之前，我希望你创建一个WordPress博客([http://wordpress.com/about](http://wordpress.com/about))或者使用你现有的其中一个。
- en: Creating test cases for our WordPress blog
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的WordPress博客创建测试用例
- en: Here, we are using a WordPress blog: [http://demo-blog.seleniumacademy.com/wp/](http://demo-blog.seleniumacademy.com/wp/).
    Let's create three test cases for it before we start talking about the PageObject
    pattern.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用一个WordPress博客：[http://demo-blog.seleniumacademy.com/wp/](http://demo-blog.seleniumacademy.com/wp/)。在我们开始讨论PageObject模式之前，让我们为它创建三个测试用例。
- en: Test case 1 – adding a new post to our WordPress blog
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例1 – 向我们的WordPress博客添加新帖子
- en: 'The following test script will log into the `Admin` portal of our WordPress
    blog and add a new blog post:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试脚本将登录我们的WordPress博客的`管理`门户并添加一个新的博客帖子：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the sequence of steps that the preceding code performs:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在执行前一个代码时遵循的步骤序列：
- en: Log into the WordPress `Admin` portal.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录WordPress `管理`门户。
- en: Go to the All Posts page.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往所有帖子页面。
- en: Click on the Add New post button.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加新帖子按钮。
- en: Add a new post by providing the title and description.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供标题和描述添加新帖子。
- en: Publish the post.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布帖子。
- en: Test case 2 – deleting a post from our WordPress blog
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例2 – 从我们的WordPress博客中删除帖子
- en: 'The following test script will log into our WordPress blog and delete an existing
    post:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试脚本将登录我们的WordPress博客并删除一个现有帖子：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is the sequence of steps that the preceding test script follows
    to delete a post:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在删除帖子之前，前一个测试脚本所遵循的步骤序列：
- en: Log into the WordPress `Admin` portal.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录WordPress `管理`门户。
- en: Go to the All Posts page.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往所有帖子页面。
- en: Click on the post to be deleted.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击要删除的帖子。
- en: Delete the post.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除帖子。
- en: Test case 3 – counting the number of posts on our WordPress blog
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例3 – 在我们的WordPress博客上统计帖子数量
- en: 'The following test script will count all the posts currently available on our
    WordPress blog:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试脚本将统计我们WordPress博客上当前可用的所有帖子：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the sequence of steps that the preceding test script follows
    to count the number of posts currently available on our blog:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在我们的博客上统计当前可用的帖子数量的前一个测试脚本所遵循的步骤序列：
- en: Log into the `Admin` portal.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录`管理`门户。
- en: Go to the All Posts page.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往所有帖子页面。
- en: Count the number of posts available.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 统计可用的帖子数量。
- en: In the previous three test scripts, we log into WordPress and perform an action,
    such as creating a post, deleting a post, or counting the number of existing posts.
    Imagine that the ID of an element on the login page has changed, and we have to
    modify that in all three different test cases; or, if the All Posts page has changed,
    that we have to edit all three test cases to reflect the new changes. If you have
    50 test cases, changing each of them every time there is a change in the target
    application is very difficult. For this purpose, you need to design a test framework
    that keeps the changes that you need to make in the test cases to a minimum. The
    PageObject pattern is a design pattern that can be used to design your test framework.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的三个测试脚本中，我们登录WordPress并执行操作，例如创建帖子、删除帖子或计算现有帖子的数量。想象一下，登录页面上的一个元素的ID已经更改，我们必须在所有三个不同的测试用例中修改它；或者，如果所有帖子页面已经更改，我们必须编辑所有三个测试用例以反映新的更改。如果你有50个测试用例，每次目标应用程序有更改时都要更改每个测试用例是非常困难的。为此，你需要设计一个测试框架，将你需要在测试用例中进行的更改降到最低。PageObject模式是一种可以用来设计你的测试框架的设计模式。
- en: What is the PageObject pattern?
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PageObject模式是什么？
- en: 'Whenever we are designing an automation framework for testing web applications,
    we have to accept the fact that the target application and its elements are bound
    to change. An efficient framework is one that needs minimal refactoring to adapt
    to new changes in the target application. Let''s try to build the preceding test
    scenarios into the PageObject design pattern model. Let''s first start building
    a PageObject for the login page. This should look like the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们为测试Web应用程序设计自动化框架时，我们必须接受这样一个事实：目标应用程序及其元素肯定会发生变化。一个高效的框架是那种需要最小重构来适应目标应用程序中新的变化的框架。让我们尝试将前面的测试场景构建到PageObject设计模式模型中。让我们首先开始构建登录页面的PageObject。它应该看起来像以下这样：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, all the elements that are part of the process of signing in are listed
    in the `AdminLoginPage` class and there is a method named `login()`, which manages
    the populating of these elements and submits the login form. Thus, this `AdminLoginPageobject`
    class, will represent WordPress''s administration login page, constituting all
    the elements that are listed on the page as member variables and all the actions
    that can be taken on the page as methods. Now, let''s see how we need to refactor
    the test case to use our newly created PageObject. Let''s consider the following
    `testAddNewPost` test case:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有属于登录过程的元素都列在`AdminLoginPage`类中，并且有一个名为`login()`的方法，用于管理这些元素的填充并提交登录表单。因此，这个`AdminLoginPage`类将代表WordPress的管理员登录页面，将页面上的所有元素作为成员变量，以及可以在页面上执行的所有操作作为方法。现在，让我们看看我们需要如何重构测试用例以使用我们新创建的PageObject。让我们考虑以下`testAddNewPost`测试用例：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding test case, the entire code for logging into the admin page
    is contained in just two lines:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的测试用例中，登录管理页面的全部代码仅包含两行：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Navigating to the admin login page, identifying the elements, providing values
    for the elements, and submitting the form —everything is taken care of by the
    PageObject. Thus, from now on, the test case doesn't need to be refactored for
    any changes to the admin page. You just have to change the PageObject, and all
    the test cases using this PageObject will start using the new changes without
    even knowing they occurred.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到管理员登录页面，识别元素，为元素提供值，以及提交表单——所有这些操作都由PageObject处理。因此，从现在开始，测试用例不需要为管理员页面上的任何更改进行重构。你只需更改PageObject，所有使用此PageObject的测试用例将开始使用这些新更改，甚至不知道它们已经发生。
- en: Now that you have seen what a PageObject looks like, the Selenium library provides
    even more convenient ways to implement your PageObjects. Let's take a look at
    them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了PageObject的样子，Selenium库提供了更多方便的方式来实现你的PageObjects。让我们看看它们。
- en: Using the @FindBy annotation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`@FindBy`注解
- en: An element in the PageObject is marked with the `@FindBy` annotation. It is
    used to direct the WebDriver to locate that element on a page. It takes the locating
    mechanism (that is, by `Id`, `Name`, or `Class Name`) and the value of the element
    for that locating mechanism as input.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: PageObject中的一个元素用`@FindBy`注解标记。它用于指示WebDriver在页面上定位该元素。它接受定位机制（即通过`Id`、`Name`或`Class
    Name`）和该定位机制的元素值作为输入。
- en: 'There are two ways of using the `@FindBy` annotation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@FindBy`注解有两种方式：
- en: 'Usage 1 is shown as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法1如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Usage 2 is shown as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法2如下所示：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding two usages direct the WebDriver to locate the element using the
    locating mechanism ID with the `user_login` value and assign that element to the `userId` WebElement.
    In usage 2, we have used the How enumeration. This enumeration supports all the
    different locating mechanisms that our `By` class supports. The enumeration constants
    supported in the How enumeration are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种用法将 WebDriver 指向使用定位机制 ID 并具有 `user_login` 值的元素，并将该元素分配给 `userId` WebElement。在用法
    2 中，我们使用了 How 枚举。这个枚举支持我们 `By` 类支持的所有不同的定位机制。How 枚举中支持枚举常量如下：
- en: CLASS_NAME
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名
- en: CSS
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS
- en: ID
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ID
- en: ID_OR_NAME
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ID_OR_NAME
- en: LINK_TEXT
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接文本
- en: NAME
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: PARTIAL_LINK_TEXT
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分链接文本
- en: TAG_NAME
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签名
- en: XPATH
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XPATH
- en: 'Using the `@FindBy` annotation, we will see how our `AdminLoginPage` class
    changes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@FindBy` 注解，我们将看到我们的 `AdminLoginPage` 类是如何变化的：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the test case instantiates the preceding class in the constructor, we
    navigate to the WordPress login page using the following code specified in the
    constructor:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试用例在构造函数中实例化前面的类时，我们使用构造函数中指定的以下代码导航到 WordPress 登录页面：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once the driver state is set to this page, all the `FindBy` declared elements,
    that is, `email`, `password`, and `submit`, are initialized by the WebDriver using
    the locating mechanisms specified in the `FindBy` annotation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将驱动状态设置为该页面，所有使用 `FindBy` 声明的元素，即 `email`、`password` 和 `submit`，都将通过 `FindBy`
    注解中指定的定位机制由 WebDriver 初始化。
- en: Understanding PageFactory
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 PageFactory
- en: 'Another important class that the WebDriver library provides to support the
    PageObject pattern is the `PageFactory` class. Once the `PageObject` class declares
    elements using the `FindBy` annotation, you can instantiate that `PageObject`
    class and its elements using the `PageFactory` class. This class supports a static
    method named `initElements`. The API syntax for this method is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriver 库提供的另一个重要类，用于支持 PageObject 模式的是 `PageFactory` 类。一旦 `PageObject` 类使用
    `FindBy` 注解声明了元素，就可以使用 `PageFactory` 类实例化该 `PageObject` 类及其元素。这个类支持一个名为 `initElements`
    的静态方法。此方法的 API 语法如下：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s see how this can be used in our test case to create AdminLoginPage:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在我们的测试用例中使用它来创建 AdminLoginPage：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `PageFactory` class instantiates the `AdminLoginPage` class and gives it
    the driver instance. The `AdminLoginPage` PageObject navigates the driver instance
    to a URL ([http://demo-blog.seleniumacademy.com/wp/wp-admin](http://demo-blog.seleniumacademy.com/wp/wp-admin),
    in this case) and then populates all its elements annotated with the `FindBy`
    annotation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageFactory` 类实例化了 `AdminLoginPage` 类，并给它提供了驱动实例。`AdminLoginPage` 页面对象将驱动实例导航到
    URL ([http://demo-blog.seleniumacademy.com/wp/wp-admin](http://demo-blog.seleniumacademy.com/wp/wp-admin)，在这种情况下)，然后填充所有带有
    `FindBy` 注解的元素。'
- en: Good practices for the PageObjects design
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PageObjects 设计的良好实践
- en: So, now that you have seen what a simple implementation of PageObject looks
    like, it's time to consider some good practices in designing PageObjects for your
    test framework.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在你已经看到了 PageObject 的简单实现，是时候考虑一些设计 PageObjects 的良好实践了。
- en: Think of a web page as a services provider
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将网页视为一个服务提供商
- en: 'At a high level, when you look at a page in a web application, you will find
    it is an aggregation of various User Services. For example, if you take a look
    at the All Posts page in our WordPress Admin console, there are many sections
    in it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，当你查看一个网络应用程序中的页面时，你会发现它是由各种用户服务聚合而成的。例如，如果你查看我们 WordPress 管理控制台中的所有帖子页面，其中有许多部分：
- en: '![](img/ae4559d2-2c7e-4ec8-aafb-0d1d9e0e9b31.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ae4559d2-2c7e-4ec8-aafb-0d1d9e0e9b31.png)'
- en: 'In the preceding screenshot, in the `All Posts` page, a user can perform the
    following five activities:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中的 `All Posts` 页面，用户可以执行以下五个活动：
- en: Add a new post.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一篇新帖子。
- en: Edit a selected post.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑所选帖子。
- en: Delete a selected post.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所选帖子。
- en: Filter the posts by category.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过类别过滤帖子。
- en: Search for text in all the posts.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有帖子中搜索文本。
- en: 'The preceding activities are the services that the All Posts page provides
    to its users. So, your PageObject should also provide these services for the test
    case, which is the user of this PageObject. The code for the All Posts PageObject
    should look as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述活动是所有帖子页面提供给其用户的服务。因此，你的 PageObject 也应该为测试用例提供这些服务，这是 PageObject 的用户。所有帖子
    PageObject 的代码应如下所示：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we have mapped the identified services on the page to the methods in our
    PageObject. When a test case wants to execute a service, it will get assistance
    from the PageObject to accomplish that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将页面中识别的服务映射到我们的PageObject中的方法。当测试用例想要执行一个服务时，它将得到PageObject的帮助来完成这个任务。
- en: Always look for implied services
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总是寻找隐含的服务
- en: 'Some of a page''s services can be identified very clearly on it. And there
    are some services that are not visible on the page but that are implied. For example,
    in the All Posts page, we have identified five services just by looking at the
    page. But let''s say your test case wants to know the count of existing posts;
    this information is available on the All Posts page, and we have to make sure
    that your PageObject provides that as an implied service. Now you extend your
    PageObject for the All Posts page with this implied service, which looks as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的某些服务可以非常清楚地在其上识别。还有一些服务在页面上不可见，但却是隐含的。例如，在所有帖子页面上，我们仅通过查看页面就识别了五个服务。但是，假设您的测试用例想要知道现有帖子的数量；这个信息在所有帖子页面上是可用的，我们必须确保您的PageObject提供这个隐含服务。现在您扩展All
    Posts页面的PageObject以包含这个隐含服务，如下所示：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now your test cases can employ the same PageObject to use the implied services
    relevant to the All Posts page.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的测试用例可以使用相同的PageObject来使用与所有帖子页面相关的隐含服务。
- en: Using PageObjects within a PageObject
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PageObject中使用PageObject
- en: There will be many situations where you need to use PageObjects within a PageObject.
    Let's analyze that using a scenario on the All Posts page. When you click on Add
    New to add a new post, the browser actually navigates to a different page. So,
    you have to create two PageObjects, one for the All Posts page and another for
    the Add New page. Designing your PageObjects to simulate the exact behavior of
    our target application will keep things very clear and independent of each other.
    You may be able to navigate to the Add New page in several different ways. Creating
    a PageObject of its own for the Add New page and using it wherever needed will
    make your test framework adhere to good object-oriented fundamentals, and make
    the maintenance of your test framework easy. Let us see what using PageObjects
    within a PageObject will look like.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将会有很多需要在使用PageObject内部使用PageObject的情况。让我们通过所有帖子页面上的一个场景来分析这一点。当您点击“新增”来添加新帖子时，浏览器实际上会导航到另一个页面。因此，您必须创建两个PageObject，一个用于所有帖子页面，另一个用于新增页面。将PageObject设计成模拟目标应用程序的确切行为将使事情非常清晰且相互独立。您可能可以通过几种不同的方式导航到新增页面。为新增页面创建一个自己的PageObject并在需要的地方使用它将使您的测试框架遵循良好的面向对象原则，并使测试框架的维护变得容易。让我们看看在PageObject内部使用PageObject将是什么样子。
- en: The AddNewPost PageObject
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新增帖子PageObject
- en: 'The `AddNewPost` PageObject adds new posts, as shown in the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddNewPost` PageObject添加新帖子，如下面的代码所示：'
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The AllPostsPage PageObject
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AllPostsPage PageObject
- en: 'The `AllPostsPage` PageObject deals with the `All posts page`, as shown in
    the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`AllPostsPage` PageObject处理`所有帖子页面`，如下面的代码所示：'
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, as you can see in the `AllPostsPage` PageObject, we have instantiated the
    `AddNewPage` PageObject in the `createNewPost()` method. Thus, we are using one
    PageObject with another and keeping the behavior as close as possible to the target
    application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如您在`AllPostsPage` PageObject中看到的，我们在`createNewPost()`方法中实例化了`AddNewPage`
    PageObject。因此，我们正在使用一个PageObject来使用另一个PageObject，并尽可能使行为接近目标应用程序。
- en: Think of methods in PageObjects as services and not as user actions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将PageObject中的方法视为服务而不是用户操作
- en: 'There might sometimes be confusion surrounding what methods make a PageObject.
    We saw earlier that each PageObject should contain User Services as their methods.
    But quite often, we see some implementations of PageObjects in several test frameworks
    that constitute `User Actions` as their methods. So what is the difference between
    a `User Service` and a `User Action`? As we have already seen, some of the examples
    of User Services on the WordPress Admin console are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候可能会对哪些方法构成PageObject感到困惑。我们之前看到每个PageObject都应该包含用户服务作为其方法。但很常见的是，我们在几个测试框架中看到一些PageObject的实现，它们将用户操作作为方法。那么“用户服务”和“用户操作”之间的区别是什么？正如我们之前看到的，WordPress管理控制台上的用户服务的一些例子如下：
- en: Create a new post
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的帖子
- en: Delete a post
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个帖子
- en: Edit a post
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑一个帖子
- en: Search in posts
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在帖子中进行搜索
- en: Filter posts
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤帖子
- en: Count all existing posts
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算所有现有帖子
- en: 'All the preceding services talk about the various functionalities of the target
    application. Now, let''s see some examples of `User Actions`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的前述服务都讨论了目标应用程序的各种功能。现在，让我们看看一些`User Actions`的示例：
- en: Mouse-click
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标点击
- en: Typing text in a textbox
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文本框中输入文本
- en: Navigating to a page
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航到页面
- en: Clicking on a checkbox
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击复选框
- en: Select an option from a dropdown
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择一个选项
- en: The previous list showed some examples of `User Actions` on a page. They are
    common across many applications. Your PageObject is not meant to provide your
    test case with `User Actions`, but with User Services. So, each method in your
    PageObject should map to a service that the target page provides to the user.
    To accomplish a User Service, PageObject methods should contain many `User Actions`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表展示了页面上的某些`User Actions`示例。它们在许多应用程序中都是通用的。您的PageObject不是为了向测试用例提供`User Actions`，而是提供用户服务。因此，您的PageObject中的每个方法都应该映射到目标页面提供给用户的某个服务。为了完成一个用户服务，PageObject方法应该包含许多`User
    Actions`。
- en: Several User Actions come together to accomplish a User Service.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 几个用户操作组合在一起以完成一个用户服务。
- en: 'Here is an example of what your PageObject will look like if it provisions
    its methods with User Actions instead of User Services is as follows; let''s see
    what the `AddNewPage` PageObject will look like:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，说明如果您的PageObject使用用户操作而不是用户服务来提供方法，它将看起来像什么；让我们看看`AddNewPage` PageObject将是什么样子：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, in the code of the `AddNewPage` PageObject, we have three different methods
    to accomplish three different User Actions. The caller object, instead of just
    invoking the `addNewPage(String title, String description)` method, should now
    invoke the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在`AddNewPage` PageObject的代码中，我们有三种不同的方法来完成三种不同的用户操作。调用对象现在应该调用以下方法，而不是仅仅调用`addNewPage(String
    title, String description)`方法：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding User Actions are three different User Actions to accomplish adding
    a new post User Service. The caller of these methods should also keep in mind
    the order in which these User Actions need to be called; that is, the `clickPublishButton()`
    method should always come last. This introduces unnecessary complexity to your
    test cases and other PageObjects that try to add new posts to the system. Thus,
    User Services will hide most of the implementation details from the users of the
    PageObjects and reduce the cost of maintaining your test cases.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 前述用户操作是完成添加新帖子用户服务的三个不同的用户操作。这些方法的调用者还应该记住这些用户操作需要调用的顺序；也就是说，`clickPublishButton()`方法应该始终放在最后。这给测试用例和其他试图向系统中添加新帖子的PageObjects引入了不必要的复杂性。因此，用户服务将隐藏大多数实现细节，从而降低维护测试用例的成本。
- en: Identifying some WebElements on the fly
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态识别一些Web元素
- en: 'In all the PageObjects, we have initialized the elements that we are going
    to use during object instantiation, using the `@FindBy` annotation. It is always
    good to identify all the elements of a page that are required to accomplish a
    User Service and assign them to the member variables in your PageObject. However,
    it is not always possible to do that. For example, if you want to edit a particular
    post in the All Posts page, it is not mandatory, during PageObject initialization,
    to map each post on the page to a member variable in your PageObject. When you
    have a large number of posts, your PageObject initialization will be spending
    unnecessary time mapping the posts to your member variables, even though we don''t
    use them. Besides, we don''t even know how many member variables we need to map
    all the posts in the All Posts page. The HTML for the All Posts page looks as
    follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有PageObjects中，我们使用`@FindBy`注解初始化了在对象实例化期间将要使用的元素。始终识别完成用户服务所需的所有页面元素并将它们分配给PageObject中的成员变量是很好的。然而，并不总是可能做到这一点。例如，如果您想编辑所有帖子页面上的特定帖子，在PageObject初始化期间，将页面上的每个帖子映射到PageObject的成员变量并不是强制性的。当您有大量帖子时，PageObject初始化将花费不必要的时间将帖子映射到成员变量，即使我们并不使用它们。此外，我们甚至不知道需要映射多少成员变量才能映射所有帖子。所有帖子页面的HTML如下所示：
- en: '![](img/8d717941-9160-46e4-9d37-09751687ee22.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d717941-9160-46e4-9d37-09751687ee22.png)'
- en: There is a root element identified by `the-list`, which contains all the posts
    in the WordPress blog. Within this element, we can see that there's Post1, Post2,
    and Post3\. So having your PageObject initialized for all three posts is not an
    optimal solution. You can initialize your PageObject with a member variable mapped
    to the root element and the target post will be retrieved from it whenever required.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个通过`the-list`识别的根元素，其中包含WordPress博客中的所有帖子。在这个元素内部，我们可以看到有Post1、Post2和Post3。因此，为所有三个帖子初始化PageObject并不是一个最佳解决方案。您可以使用映射到根元素的成员变量初始化PageObject，并且每当需要时，目标帖子将从其中检索。
- en: 'Let''s take a look at the `AllPostsPage` PageObject that implements its `editPost()`
    method in the following way:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下`AllPostsPage` PageObject，它以这种方式实现了其`editPost()`方法：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that in the previous code that only the root element is identified by
    `the-list`; the element that contains all the posts in the All Posts page is mapped
    to a member variable, named `pageContainer` in the `AllPostsPage` PageObject.
    The target post is extracted only when it is needed in the `editAPost()` method.
    This way, your PageObject initialization doesn't take much time and has all the
    necessary elements mapped.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的代码中，只有根元素通过`the-list`被识别；包含所有帖子的All Posts页面中的元素被映射到名为`pageContainer`的成员变量，在`AllPostsPage`
    PageObject中。只有在需要时，在`editAPost()`方法中才会提取目标帖子。这样，您的PageObject初始化不需要花费太多时间，并且已经映射了所有必要的元素。
- en: Keeping the page-specific details off the test script
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将页面特定的细节从测试脚本中分离出来
- en: The ultimate aim of the PageObject pattern design is to maintain the page-specific
    details, such as the IDs of the elements on the page and the way we reach a particular
    page in the application, away from the test script. Building your test framework
    using the PageObject pattern should allow you to keep your test scripts very generic
    and not need a modification each time the page implementation details change.
    Finally, whenever there is a change done to a web page, such as a login page,
    the number of changes that need to be done for 50 test scripts that use this page
    should ideally be 0\. Just changing the PageObject should handle adapting all
    the tests to the new changes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: PageObject模式设计的最终目的是将页面特定的细节，例如页面元素ID和我们在应用程序中到达特定页面的方式，从测试脚本中分离出来。使用PageObject模式构建您的测试框架应该允许您保持测试脚本非常通用，并且不需要在页面实现细节更改时进行修改。最后，每当对网页进行更改时，例如登录页面，对于使用此页面的50个测试脚本，理想情况下需要进行的更改数量应该是0。只需更改PageObject就可以处理适应所有测试的新更改。
- en: Understanding loadable components
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解可加载组件
- en: 'The loadable component is an extension of the PageObject pattern. The `LoadableComponent`
    class in the WebDriver library will help test-case developers make sure that the
    page or a component of the page is loaded successfully. It tremendously reduces
    the efforts to debug your test cases. The PageObject should extend this LoadableComponent
    abstract class and, as a result, it is bound to provide an implementation for
    the following two methods:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可加载的组件是PageObject模式的扩展。WebDriver库中的`LoadableComponent`类将帮助测试用例开发者确保页面或页面组件已成功加载。它极大地减少了调试测试用例的努力。PageObject应该扩展这个LoadableComponent抽象类，因此它必须提供以下两个方法的实现：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The page or component that has to be loaded in the `load()` and `isLoaded()`
    methods determines whether the page or component is fully loaded. If it is not
    fully loaded, it throws an error.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`load()`和`isLoaded()`方法中必须加载的页面或组件决定了页面或组件是否已完全加载。如果没有完全加载，它会抛出一个错误。
- en: 'Let''s now modify the `AdminLoginPage` PageObject to extend the LoadableComponent
    class and see how it looks, using the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们修改`AdminLoginPage` PageObject以扩展LoadableComponent类，并看看它的样子，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The URL that has to be loaded is specified in the `load()` method and the `isLoaded()`
    method validates whether or not the correct page is loaded. Now, the changes that
    are to be done in your test case are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 需要加载的URL在`load()`方法中指定，而`isLoaded()`方法验证是否加载了正确的页面。现在，您在测试用例中需要进行的更改如下：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `get()` method from the `LoadableComponent` class will make sure the component
    is loaded by invoking the `isLoaded()` method.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadableComponent`类中的`get()`方法将确保通过调用`isLoaded()`方法来加载组件。'
- en: Working on an end-to-end example of WordPress
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WordPress端到端示例上工作
- en: Now that we know what PageObjects are, it's time to take a look at an end-to-end
    example that interacts and tests the WordPress Admin console. First, we will see
    all the PageObjects and then the test cases that use them.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道了 PageObjects 是什么，现在是时候看看一个端到端示例，该示例与测试 WordPress 管理控制台进行交互和测试。首先，我们将看到所有
    PageObjects，然后是使用它们的测试用例。
- en: Looking at all the PageObjects
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看看所有的 PageObjects
- en: Let's first see all the PageObjects that are involved in testing the WordPress
    Admin console.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看所有参与测试 WordPress 管理控制台的 PageObjects。
- en: The AdminLoginPage PageObject
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AdminLoginPage` PageObject'
- en: 'The `AdminLoginPage` PageObject deals with the login page. This object has
    to be refactored if any changes have been made to the page in the target application,
    using the following code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`AdminLoginPage` PageObject 处理登录页面。如果目标应用中的页面有任何更改，此对象需要重构，使用以下代码：'
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The constructor of the `AdminLoginPage` PageObject accepts the WebDriver instance.
    This will let the test framework use the same driver instance throughout the execution
    across test scripts as well as PageObjects; thus, the state of the browser and
    web application is preserved. You will see similar constructors for all the PageObjects.
    Apart from the constructor, the `AdminLoginPage` PageObject provides the `login(String
    username, String pwd)` service. This service lets the test scripts log into the
    WordPress blog and, in return, gets the `AllPostsPage` PageObject. Before returning
    the instance of the `AllPostsPage` PageObject, the PageFactory PageObject will
    initialize all the WebElements of the `AllPostsPage` PageObject. Thus, all of
    the implementation details of the login service are hidden from the test script,
    and it can work with the `AllPostsPage` PageObject.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`AdminLoginPage` PageObject 的构造函数接受 WebDriver 实例。这将允许测试框架在整个测试脚本执行过程中以及 PageObjects
    中使用相同的驱动实例；因此，浏览器和 Web 应用的状态得以保留。您将看到所有 PageObjects 都有类似的构造函数。除了构造函数之外，`AdminLoginPage`
    PageObject 提供了 `login(String username, String pwd)` 服务。此服务允许测试脚本登录到 WordPress
    博客，并返回 `AllPostsPage` PageObject。在返回 `AllPostsPage` PageObject 的实例之前，PageFactory
    PageObject 将初始化 `AllPostsPage` PageObject 的所有 WebElements。因此，登录服务的所有实现细节都隐藏在测试脚本中，并且它可以与
    `AllPostsPage` PageObject 一起工作。'
- en: The AllPostsPage PageObject
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AllPostsPage` PageObject'
- en: 'The `AllPostsPage` PageObject deals with the All Posts page, using the following
    code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`AllPostsPage` PageObject 处理所有帖子页面，使用以下代码：'
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `AllPostsPage` PageObject provides six services:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`AllPostsPage` PageObject 提供了六个服务：'
- en: Create a post
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建帖子
- en: Edit a post
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑帖子
- en: Delete a post
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除帖子
- en: Filter posts by category
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过分类过滤帖子
- en: Search for text in posts
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在帖子中搜索文本
- en: Count the number of posts available
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算可用的帖子数量
- en: Once the test scripts obtains an instance of this PageObject via the login service
    of the `AdminLoginPage` PageObject, it can use any of the six services of this
    PageObject and test it. If any of the implementation details change, such as the
    navigation to a particular post or the ID of a WebElement on this page, the test
    script doesn't really have to worry about it. Modifying this PageObject will apply
    the changes to the WordPress blog.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试脚本通过 `AdminLoginPage` PageObject 的登录服务获取到此 PageObject 的实例，它就可以使用此 PageObject
    的六个服务之一并进行测试。如果任何实现细节发生变化，例如导航到特定帖子或此页面上 WebElement 的 ID，测试脚本实际上不必担心。修改此 PageObject
    将将更改应用到 WordPress 博客中。
- en: The AddNewPostPage PageObject
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AddNewPostPage` PageObject'
- en: 'The `AddNewPostPage` PageObject deals with adding a new post to the blog, using
    the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddNewPostPage` PageObject 处理向博客添加新帖子，使用以下代码：'
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `AddNewPostPage` PageObject is instantiated in the `createANewPost` service
    of the `AllPostsPage` PageObject. This PageObject provides a service named `addNewPost`
    that takes input for `title` and `description` for the post and publishes a new
    post in the blog with them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddNewPostPage` PageObject 在 `AllPostsPage` PageObject 的 `createANewPost`
    服务中被实例化。此 PageObject 提供一个名为 `addNewPost` 的服务，该服务接受帖子的 `title` 和 `description`
    输入，并使用它们在博客中发布新帖子。'
- en: The EditPostPage PageObject
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`EditPostPage` PageObject'
- en: 'The `EditPostPage` PageObject deals with editing an existing post, using the
    following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditPostPage` PageObject 处理编辑现有帖子，使用以下代码：'
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `EditPostPage` PageObject is similar to the `AddNewPostPage` PageObject
    and is instantiated at the `editAPost` service of the `AllPostsPage` PageObject.
    This provides a service named `editPost` to edit an existing post. The new `title`
    and `description` are passed as input parameters to this service.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditPostPage` 页面对象与 `AddNewPostPage` 页面对象类似，并在 `AllPostsPage` 页面对象的 `editAPost`
    服务中实例化。这提供了一个名为 `editPost` 的服务来编辑现有帖子。新的 `title` 和 `description` 作为输入参数传递给此服务。'
- en: The DeletePostPage PageObject
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeletePostPage 页面对象
- en: 'The `DeletePostPage` PageObject deals with deleting an existing post, using
    the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeletePostPage` 页面对象使用以下代码处理删除现有帖子：'
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `DeletePostPage` PageObject is similar to the `AddNewPostPage` and `EditPostPage`
    PageObjects and is instantiated at the `deleteAPost` service of the `AllPostsPage`
    PageObject. This provides a service, named `delete`, to delete an existing post.
    As you can see, the `AddNewPostPage`, `EditPostPage`, and `DeletePostPage` PageObjects
    take you to the same page. So, it makes sense to merge these three PageObjects
    into one that provides services for adding, editing, and deleting posts.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeletePostPage` 页面对象类似于 `AddNewPostPage` 和 `EditPostPage` 页面对象，并在 `AllPostsPage`
    页面对象的 `deleteAPost` 服务中实例化。这提供了一个名为 `delete` 的服务来删除现有帖子。正如你所见，`AddNewPostPage`、`EditPostPage`
    和 `DeletePostPage` 页面对象都带你到同一个页面。因此，将这三个页面对象合并为一个提供添加、编辑和删除帖子服务的页面对象是有意义的。'
- en: Looking at the test cases
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看测试用例
- en: Now it's time to see the test cases that use the PageObjects to interact with
    the WordPress Admin console.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是查看使用PageObjects与WordPress管理控制台交互的测试用例的时候了。
- en: Adding a new post
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新帖子
- en: 'This test case deals with adding a new post to the blog, using the following
    code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试用例使用以下代码处理向博客添加新帖子：
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the sequence of steps executed in the preceding test script
    to test how to add a new post to the WordPress blog:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在先前的测试脚本中执行步骤的顺序，以测试如何向WordPress博客添加新帖子：
- en: The test script creates a ChromeDriver instance, because it intends to test
    the scenario of adding a new post to the blog on the Chrome browser.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试脚本创建了一个ChromeDriver实例，因为它打算测试在Chrome浏览器上添加新帖子到博客的场景。
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the same
    driver instance created in the previous step.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个 `AdminLoginPage` 页面对象的实例，该实例使用之前步骤中创建的相同驱动程序实例。
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦获得了 `AdminLoginPage` 页面对象的实例，它使用 `login` 服务登录到WordPress管理控制台。`login` 服务作为回报，向测试脚本提供了一个
    `AllPostsPage` 页面对象的实例。
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the `All Posts
    page`. In this case, it uses the `createANewPost` service.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试脚本使用之前步骤中获得的 `AllPostsPage` 页面对象的实例来使用 `All Posts page` 提供的许多服务之一。在这种情况下，它使用了
    `createANewPost` 服务。
- en: Editing a post
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑帖子
- en: 'This test case deals with the testing and editing of a post in the blog using
    the following code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试用例使用以下代码处理和编辑博客中的帖子测试：
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following is the sequence of steps executed in the preceding test script
    to test how to add a new post to the WordPress blog:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在先前的测试脚本中执行步骤的顺序，以测试如何向WordPress博客添加新帖子：
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the same
    driver instance created in the previous step.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个 `AdminLoginPage` 页面对象的实例，该实例使用之前步骤中创建的相同驱动程序实例。
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦获得了 `AdminLoginPage` 页面对象的实例，它使用 `login` 服务登录到WordPress管理控制台。`login` 服务作为回报，向测试脚本提供了一个
    `AllPostsPage` 页面对象的实例。
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the All Posts
    page. In this case, it uses the `createANewPost` service.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试脚本使用之前步骤中获得的 `AllPostsPage` 页面对象的实例来使用 `All Posts` 页面提供的许多服务之一。在这种情况下，它使用了
    `createANewPost` 服务。
- en: Deleting a post
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除帖子
- en: 'This test case deals with deleting a post, using the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试用例使用以下代码处理删除帖子：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is the sequence of steps executed in the preceding test script
    to test the deleting of a post in the WordPress blog:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在先前的测试脚本中执行的一系列步骤，以测试WordPress博客中删除帖子的操作：
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the same
    driver instance created in the previous step.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个使用之前步骤中创建的相同驱动实例的`AdminLoginPage`页面对象实例。
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress Admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦获得`AdminLoginPage`页面对象的实例，它使用`login`服务登录WordPress管理控制台。`login`服务作为回报，向测试脚本提供一个`AllPostsPage`页面对象实例。
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the All Posts
    page. In this case, it uses the `deleteAPost` service.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试脚本使用在上一步骤中获得的`AllPostsPage`页面对象的实例来使用所有帖子页面提供的众多服务之一。在这种情况下，它使用了`deleteAPost`服务。
- en: Counting posts
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数帖子
- en: 'This test case deals with counting of the number of posts currently available
    in the blog, using the following code:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试用例涉及使用以下代码计算博客中当前可用的帖子数量：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is the sequence of steps executed in the preceding test script
    to test counting the number of posts in the WordPress blog:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在先前的测试脚本中执行的一系列步骤，以测试WordPress博客中帖子数量的计数：
- en: It creates an instance of the `AdminLoginPage` PageObject that uses the driver
    instance created in the previous step.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个使用之前步骤中创建的驱动实例的`AdminLoginPage`页面对象实例。
- en: Once it gets the instance of the `AdminLoginPage` PageObject, it uses the `login`
    service to log into the WordPress Admin console. The `login` service, in return,
    gives out an instance of the `AllPostsPage` PageObject instance to the test script.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦获得`AdminLoginPage`页面对象的实例，它使用`login`服务登录WordPress管理控制台。`login`服务作为回报，向测试脚本提供一个`AllPostsPage`页面对象实例。
- en: The test script uses the instance of the `AllPostsPage` PageObject obtained
    in the previous step to use one of the many services provided by the All Posts
    page. In this case, it uses the `getAllPostsCount` service.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试脚本使用在上一步骤中获得的`AllPostsPage`页面对象的实例来使用所有帖子页面提供的众多服务之一。在这种情况下，它使用了`getAllPostsCount`服务。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the PageObject pattern and how we can implement
    a test framework using PageObjects. It has numerous advantages. The PageObject
    pattern and the `LoadableComponents` class provide a test framework that adapts
    easily to changes made to the target application, without changing any test cases.
    We should always remember that a well-designed test framework is always flexible
    to changes made to the target application. In the next chapter, we will look at
    testing iOS and Android mobile applications using, `Appium`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了PageObject模式以及如何使用PageObjects实现测试框架。它具有许多优点。PageObject模式和`LoadableComponents`类提供了一个能够轻松适应目标应用更改的测试框架，而无需更改任何测试用例。我们应该始终记住，一个设计良好的测试框架总是能够适应目标应用的更改。在下一章中，我们将探讨使用`Appium`测试iOS和Android移动应用。
- en: Questions
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How do you initialize a PageObject implemented with PageFactory?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何初始化使用PageFactory实现的PageObject？
- en: Using which class can we implement methods to validate whether the page is loaded
    ?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用哪个类可以实现验证页面是否加载的方法？
- en: Which `By class` methods are supported by @FindBy?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '@FindBy支持哪些`By class`方法？'
- en: When using PageFactory, if you give the WebElement variable the name same ID
    or name attribute, then you don't need to use the @FindBy annotation— True or
    False?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用PageFactory时，如果你给WebElement变量赋予与ID或name属性相同的名称，那么你不需要使用@FindBy注解——对还是错？
- en: Further information
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看以下链接以获取有关本章涵盖主题的更多信息：
- en: Test Design Considerations: [https://www.seleniumhq.org/docs/06_test_design_considerations.jsp](https://www.seleniumhq.org/docs/06_test_design_considerations.jsp)
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试设计注意事项：[https://www.seleniumhq.org/docs/06_test_design_considerations.jsp](https://www.seleniumhq.org/docs/06_test_design_considerations.jsp)
- en: 'Automation in Selenium: PageObjectModel and PageFactory: [https://www.toptal.com/selenium/test-automation-in-selenium-using-page-object-model-and-page-factory](https://www.toptal.com/selenium/test-automation-in-selenium-using-page-object-model-and-page-factory)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium中的自动化：PageObjectModel和PageFactory：[https://www.toptal.com/selenium/test-automation-in-selenium-using-page-object-model-and-page-factory](https://www.toptal.com/selenium/test-automation-in-selenium-using-page-object-model-and-page-factory)
