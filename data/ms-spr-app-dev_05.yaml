- en: Chapter 5. Spring Integration with FTP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。Spring与FTP的集成
- en: FTP involves sending files over the Internet from one computer to another using
    a file transfer protocol. Spring Integration also provides support to the file
    transfer protocol. File transfer can be done via FTP or using SFTP (secure FTP).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: FTP涉及使用文件传输协议从一台计算机通过互联网发送文件到另一台计算机。Spring集成还提供了对文件传输协议的支持。可以通过FTP或使用SFTP（安全FTP）进行文件传输。
- en: 'Some of the abbreviations used in FTP scenarios are listed as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是FTP场景中使用的一些缩写：
- en: '**FTP**: **File** **Transfer Protocol**.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FTP**：**文件传输协议**。'
- en: '**FTPS**: **FTP Secure** is an extension to FTP that adds support for the **Transport
    Layer Security** (**TLS**) and **Secure Sockets Layer** (**SSL**) cryptographic
    protocols.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FTPS**：**FTP安全**是FTP的扩展，它添加了对**传输层安全**（**TLS**）和**安全套接字层**（**SSL**）加密协议的支持。'
- en: '**SFTP**: **SSH** **File Transfer Protocol**, that is, FTP over Secure Shell,
    protocol.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SFTP**：**SSH文件传输协议**，即FTP通过安全外壳协议。'
- en: In a real scenario, a file server will have an FTP address, username and password.
    The clients connect to the server to transfer the files. We can either upload
    a file to a remote location download a file from a remote location using FTP.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，文件服务器将具有FTP地址、用户名和密码。客户端连接到服务器以传输文件。我们可以使用FTP上传文件到远程位置或从远程位置下载文件。
- en: 'Spring''s integration package supports both sending and receiving files from
    the FTP or FTPS servers. It provides certain endpoints, and here are the endpoints/adapters
    available in Spring for FTP/FTPS:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的集成包支持从FTP或FTPS服务器发送和接收文件。它提供了一些端点，以下是Spring为FTP/FTPS提供的端点/适配器：
- en: Inbound channel adapter
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入站通道适配器
- en: Outbound channel adapter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出站通道适配器
- en: Outbound gateway
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出站网关
- en: The channel adapters are nothing but message endpoints, which actually connect
    the message to a message channel. We can obviously see, send, and receive configurations
    and methods while dealing with the channel adapters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通道适配器只是消息端点，实际上将消息连接到消息通道。在处理通道适配器时，我们可以明显看到、发送和接收配置和方法。
- en: In this chapter, we shall see what Spring enables us to do with FTP, and develop
    a sample application that demonstrates Spring's integration ability to support
    file transfer over this protocol. We shall also see the configurations that we
    need to write and how inbound and outbound adapters can be used to transfer files
    over FTP using Spring integration package.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到Spring如何使我们能够使用FTP，并开发一个演示Spring集成能力支持文件传输的示例应用程序。我们还将看到需要编写的配置以及如何使用入站和出站适配器来使用Spring集成包在FTP上传输文件。
- en: Maven dependency
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven依赖项
- en: In order to create an FTP application using Spring integration framework, add
    the following dependency to the `pom.xml` file in your Maven project. The main
    packages are Spring Integration test and Spring Integration FTP. The libraries
    can be downloaded from the Maven repository or can be added to the project's `pom.xml`
    file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Spring集成框架创建FTP应用程序，在Maven项目的`pom.xml`文件中添加以下依赖项。主要包括Spring集成测试和Spring集成FTP。这些库可以从Maven仓库下载，也可以添加到项目的`pom.xml`文件中。
- en: 'Here are the Maven dependencies that need to be added to the `pom.xml` file
    to start developing applications with the Spring Integration FTP package:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要添加到`pom.xml`文件中的Maven依赖项，以开始使用Spring Integration FTP包开发应用程序：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Spring's XSD for FTP
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring的FTP的XSD
- en: Let's look at the XSD that the Spring Integration package has provided for FTP.
    This has all the schema definitions and gives us all the configuration possibilities
    that are supported by Spring, so it becomes easier to configure the XML file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Spring集成包为FTP提供的XSD。这包含了所有模式定义，并提供了Spring支持的所有配置可能性，因此配置XML文件变得更容易。
- en: The XSD ([http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd](http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd))
    offers a lot of information about the Spring integration with FTP. It gives us
    information about configuring the channel adapters in the XML configuration files.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: XSD（[http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd](http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd)）提供了关于Spring与FTP集成的大量信息。它为我们提供了有关在XML配置文件中配置通道适配器的信息。
- en: 'The inbound and outbound channel adapters are the two main elements in the
    XSD. Here is an extract from the XSD available at the link we just mentioned:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 入站和出站通道适配器是XSD中的两个主要元素。以下是从我们刚提到的链接中提取的XSD的摘录：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the next sections, we shall see how we can configure each of the inbound
    and outbound channel adapters and configuration options supported by Spring integration
    for FTP.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何配置入站和出站通道适配器以及Spring集成支持的FTP的配置选项。
- en: Configuring an outbound channel adapter for FTP
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为FTP配置出站通道适配器
- en: 'Outbound channel adapter configuration is for the remote directory. It''s meant
    to perform actions such as writing a file to the remote server (file upload),
    creating a new file, or adding a suffix on remote FTP servers. A few of the configurations
    that are available for outbound channel adapters from the XSD are listed here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 出站通道适配器配置是针对远程目录的。它旨在执行诸如将文件写入远程服务器（文件上传）、创建新文件或在远程FTP服务器上添加后缀等操作。以下是XSD中提供的出站通道适配器的一些可用配置：
- en: 'It supports configuring the remote directory to write files using regular expression.
    The attribute used is as follows:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持使用正则表达式配置远程目录以写入文件。使用的属性如下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can also configure to automatically create a directory in a remote location:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以配置自动在远程位置创建目录：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also configure to spring integration framework to work with FTP, to
    add a suffix to the file temporarily:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以配置Spring集成框架以与FTP一起工作，临时为文件添加后缀：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Another important configuration is to generate a filename in the remote location
    of the FTP server:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个重要的配置是在FTP服务器的远程位置生成文件名：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding feature is again advanced to support regular expressions:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的功能再次升级以支持正则表达式：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Configuring an inbound channel adapter for FTP
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置FTP的入站通道适配器
- en: The inbound channel adapter configuration is for the local directory, that is,
    it is meant to perform actions such as writing a file from the remote server (file
    download), creating a new file, or adding a suffix on the local directory. The
    inbound channel adapter ensures that the local directory gets synchronized with
    the remote FTP directory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 入站通道适配器配置是针对本地目录的，即旨在执行从远程服务器写入文件（文件下载）、创建新文件或在本地目录上添加后缀等操作。入站通道适配器确保本地目录与远程FTP目录同步。
- en: 'A few of the configurations that are available for inbound channel adapters
    from the XSD are listed as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从XSD中可用的入站通道适配器的一些配置如下：
- en: 'It provides configuration options to auto-create a local directory if it doesn''t
    exist:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了配置选项，以自动创建本地目录（如果不存在）：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It provides an option to configure the remote server, and to delete the remote
    source file after copying it to the local directory:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了配置远程服务器的选项，并在将其复制到本地目录后删除远程源文件：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Ordering files in using the comparator configuration available:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可用的比较器配置对文件进行排序：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Specify a comparator to be used while ordering files. If none is provided,
    the order will be determined by the `java.io` file implementation:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 指定在排序文件时要使用的比较器。如果没有提供，则顺序将由`java.io`文件实现确定：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Configuring session caching using the following attribute:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下属性配置会话缓存：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Specify whether the sessions should be cached. The default value is `true`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 指定会话是否应该被缓存。默认值为`true`。
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The configuration that can be done using the XSD reference is as follows:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用XSD引用进行的配置如下：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: FTPSessionFactory and FTPSSessionFactory
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FTPSessionFactory和FTPSSessionFactory
- en: 'In this section, let''s look at the two core classes for FTP using Spring integration,
    `FTPSessionFactory` and `FTPSSessionFactory`. These classes have lot of getters,
    setters, and instance variables, which give information about the data, file,
    and FTP mode. The instance variables and their usage are described as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看一下使用Spring集成的FTP的两个核心类`FTPSessionFactory`和`FTPSSessionFactory`。这些类有很多的getter、setter和实例变量，提供有关数据、文件和FTP模式的信息。实例变量及其用法如下所述：
- en: 'The class `org.springframework.integration.ftp.session.DefaultFtpSessionFactory`
    is used to configure the FTP details in the application. The class is configured
    as a simple bean in the configuration XML file .The class has getters and setters
    for the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类`org.springframework.integration.ftp.session.DefaultFtpSessionFactory`用于在应用程序中配置FTP详细信息。该类在配置XML文件中配置为一个简单的bean。该类有以下的getter和setter：
- en: '`Session`: This accepts session variables.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Session`：这接受会话变量。'
- en: '`postProcessClientAfterConnect`: This handles additional initialization after
    the client connection action is performed.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postProcessClientAfterConnect`：这在执行客户端连接操作后处理额外的初始化。'
- en: '`postProcessClientBeforeConnect`: This handles additional initialization before
    the client connection action is performed.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postProcessClientBeforeConnect`：这在执行客户端连接操作之前处理额外的初始化。'
- en: '`BufferSize`: This defines the size of the buffered data that gets transferred
    over FTP.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BufferSize`：这定义了通过FTP传输的缓冲数据的大小。'
- en: '`ClientMode`: There are two modes supported by FTP. They are as follows:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClientMode`：FTP支持两种模式。它们如下：'
- en: '**Active FTP mode**: This is specified in Spring FTP integration package as
    `ACTIVE_LOCAL_DATA_CONNECTION_MODE`. In active FTP mode, the server has to ensure
    that the random port `1023`< communication channels are open. In active FTP mode,
    the client connects from a random unprivileged port (`N > 1023`) to the FTP server''s
    command port, port `21`. Then, the client starts listening to port `N + 1` and
    sends the FTP command `PORT N + 1` to the FTP server. The server will then connect
    back to the client''s specified data port from its local data port, which is port
    `20`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动FTP模式**：在Spring FTP集成包中指定为`ACTIVE_LOCAL_DATA_CONNECTION_MODE`。在主动FTP模式下，服务器必须确保随机端口`1023`<通信通道是打开的。在主动FTP模式下，客户端从一个随机的非特权端口（`N
    > 1023`）连接到FTP服务器的命令端口，端口`21`。然后，客户端开始监听端口`N + 1`并向FTP服务器发送FTP命令`PORT N + 1`。然后服务器将从其本地数据端口（端口`20`）连接回客户端指定的数据端口。'
- en: '**Passive FTP mode**: This is specified in Spring FTP integration package as
    `PASSIVE_LOCAL_DATA_CONNECTION_MODE`. In passive FTP mode, the client initiates
    both connections to the server, solving the problem of firewalls filtering the
    incoming data port connection to the client from the server. On opening an FTP
    connection, the client opens two random unprivileged ports locally (`N > 1023`
    and `N + 1`). The first port contacts the server on port `21`, but instead of
    then issuing a `PORT` command and allowing the server to connect back to its data
    port, the client will issue the `PASV` command. The result of this is that the
    server then opens a random unprivileged port (`P > 1023`) and sends `P` back to
    the client in response to the `PASV` command. The client then initiates the connection
    from port `N + 1` to port `P` on the server to transfer data. The package `DefaultFTPClientFactory`
    has a setter method with a switch case to set the mode.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动FTP模式**：在Spring FTP集成包中指定为`PASSIVE_LOCAL_DATA_CONNECTION_MODE`。在被动FTP模式下，客户端同时启动到服务器的两个连接，解决了防火墙过滤来自服务器的传入数据端口连接到客户端的问题。在打开FTP连接时，客户端在本地打开两个随机的非特权端口（`N
    > 1023`和`N + 1`）。第一个端口在端口`21`上联系服务器，但是不是然后发出`PORT`命令并允许服务器连接回其数据端口，而是客户端将发出`PASV`命令。其结果是服务器随后打开一个随机的非特权端口（`P
    > 1023`）并在响应`PASV`命令中将`P`发送回客户端。然后客户端从端口`N + 1`到服务器上的端口`P`发起连接以传输数据。包`DefaultFTPClientFactory`具有一个设置器方法，其中有一个开关用于设置模式。'
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Config`: This sets the FTP configuration object `org.apache.commons.net.ftp.FTPClientConfig
    config`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Config`：这设置FTP配置对象`org.apache.commons.net.ftp.FTPClientConfig config`'
- en: '`ConnectTimeout`: This specifies the connection timeout time after trying to
    connect to the client.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConnectTimeout`：这指定了尝试连接到客户端后的连接超时时间。'
- en: '`ControlEncoding`: This sets the encoding.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ControlEncoding`：这设置了编码。'
- en: '`Data Timeout`: This sets the data timeout time during the file transfer.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data Timeout`：这设置了文件传输期间的数据超时时间。'
- en: '`Default Timeout`: This sets the socket timeout time.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default Timeout`：这设置了套接字超时时间。'
- en: '`File Type`: The FTP protocol supports several file types. They are listed
    as follows:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文件类型`：FTP协议支持多种文件类型。它们列举如下：'
- en: '**ASCII file type (default)**: The text file is transferred across the data
    connection in **Network Virtual Terminal** (**NVT**) ASCII. This requires the
    sender to convert the local text file into NVT ASCII and the receiver to convert
    NVT ASCII into the local text file type. The end of each line is transferred using
    the NVT ASCII representation of a carriage return followed by a linefeed. This
    means the receiver must scan every byte, looking for the CR, LF pair. (We saw
    the same scenario with TFTP''s ASCII file transfer in Section 15.2.)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASCII文件类型（默认）**：文本文件以**网络虚拟终端**（**NVT**）ASCII格式通过数据连接传输。这要求发送方将本地文本文件转换为NVT
    ASCII，接收方将NVT ASCII转换为本地文本文件类型。每行的结尾使用NVT ASCII表示回车后跟换行。这意味着接收方必须扫描每个字节，寻找CR，LF对。（我们在第15.2节中看到了TFTP的ASCII文件传输中的相同情景。）'
- en: '**EBCDIC file type**: An alternative way of transferring text files when both
    ends are **Extended Binary Coded Decimal Interchange** **Code** (**EBCDIC**) systems.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EBCDIC文件类型**：在两端都是**扩展二进制编码十进制交换码**（**EBCDIC**）系统时，传输文本文件的另一种方式。'
- en: '**Image file type**: This is also called the binary file type. The data is
    sent as a continuous stream of bits that are normally used to transfer binary
    files.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像文件类型**：也称为二进制文件类型。数据以连续的位流发送，通常用于传输二进制文件。'
- en: '**Local file type**: This is a way of transferring binary files between hosts
    with different byte sizes. The number of bits per byte is specified by the sender.
    For systems using 8-bits, a local file type with a byte size of eight is equivalent
    to the image file type. We should know that 8 bits make 1 byte.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地文件类型**：这是在不同字节大小的主机之间传输二进制文件的一种方式。发送方指定每字节的位数。对于使用8位的系统，具有8字节大小的本地文件类型等同于图像文件类型。我们应该知道8位等于1字节。'
- en: 'Spring has the abstract class `AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient>`
    which has defined the following parameters with static variables that can be used
    in the configuration of FTP:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Spring有抽象类`AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient>`，其中定义了以下参数和静态变量，可以在FTP的配置中使用：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`Host`: Specify the FTP host.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Host`：指定FTP主机。'
- en: '`Password`: Specify the FTP password.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Password`：指定FTP密码。'
- en: '`Port`: Specify the FTP port. There are two ports available, a data port and
    command port. The data port is configured as 20 and command port is configured
    as 21.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Port`：指定FTP端口。有两个可用的端口，一个是数据端口，一个是命令端口。数据端口配置为20，命令端口配置为21。'
- en: '`Username`: Specify the FTP username.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Username`：指定FTP用户名。'
- en: 'The following configuration shows the `DefaultFtpSessionFactory` class as a
    bean with bean ID `ftpClientFactory` and its property values set as per the FTP
    server credentials:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置显示了`DefaultFtpSessionFactory`类作为一个bean，其bean ID为`ftpClientFactory`，并且其属性值根据FTP服务器凭据进行设置：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `org.springframework.integration.ftp.session.DefaultFtpsSessionFactory`
    class enables us to use FTPS connections. The class contains getters and setters
    for the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.integration.ftp.session.DefaultFtpsSessionFactory`类使我们能够使用FTPS连接。该类包含以下内容的getter和setter：'
- en: '`BufferSize`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BufferSize`'
- en: '`clientMode`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientMode`'
- en: '`config`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`'
- en: '`ControlEncoding`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ControlEncoding`'
- en: '`DEFAULT_REMOTE_WORKING_DIRECTORY`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEFAULT_REMOTE_WORKING_DIRECTORY`'
- en: '`fileType`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fileType`'
- en: '`host`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`'
- en: '`password`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`'
- en: '`port`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`'
- en: '`username`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`'
- en: The preceding fields are inherited from an abstract class named `AbstarctFtpSessionFactory`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述字段是从名为`AbstarctFtpSessionFactory`的抽象类继承的。
- en: 'Here is a sample bean configuration of `DefaultFtpsClientFactory` and its properties
    that can be configured in the XML file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`DefaultFtpsClientFactory`的示例bean配置及其可以在XML文件中配置的属性：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Spring FTP using an outbound channel example
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring FTP使用出站通道示例
- en: 'In this section, lets look at a simple scenario of transferring files from
    Location1 to a remote location, Location2\. For the sake of clarity, let''s define
    them as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看一个简单的场景，将文件从Location1传输到远程位置Location2。为了清晰起见，让我们定义它们如下：
- en: 'Location1: `d:\folder1`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Location1：`d:\folder1`
- en: 'Location2: `d:\folder2`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Location2：`d:\folder2`
- en: Let's create a simple application in Spring with the Spring integration package,
    to accomplish the task of transferring files from Location1 to Location2\. We
    need to have two main files to do this; the first one is the configuration file
    `applicationContext.xml` and the second is a Java class file that will intimate
    the Spring integration framework to upload the file to the remote location.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Spring中使用Spring集成包创建一个简单的应用程序，以完成从Location1到Location2的文件传输任务。我们需要两个主要文件来完成这个任务；第一个是配置文件`applicationContext.xml`，第二个是一个Java类文件，它将通知Spring集成框架将文件上传到远程位置。
- en: 'The `applicationContext.xml` file will have the entire necessary bean configuration
    with XMLNS required to use Spring integration package. The XMLNS that needs to
    be integrated is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationContext.xml`文件将包含整个必要的bean配置，以及使用Spring集成包所需的XMLNS。需要集成的XMLNS如下：'
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We also need to configure `DefaultFtpSessionFactory` as a bean with `FtpChannel`
    and `FtpOutBoundAdpater`. The `DefaultFtpSessionFactory` has setters for all the
    FTP properties. `FTPOutboundeAdapter` will be configured with the `remoteFTP`
    location and `outboundchannel`. Here is the complete configuration file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将`DefaultFtpSessionFactory`配置为一个bean，其中包括`FtpChannel`和`FtpOutBoundAdpater`。`DefaultFtpSessionFactory`具有所有FTP属性的setter。`FTPOutboundeAdapter`将配置为`remoteFTP`位置和`outboundchannel`。以下是完整的配置文件：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now let''s create a simple Java class that intimates Spring to upload a file
    to Location2\. This class will load the `applicationContext.xml` file and instantiate
    `FTPChannel` using the bean ID that is configured in the XML file using the context
    object. A file object is created with the filename that needs to be transferred
    to the remote location. This file object is sent to the Spring integration message,
    which in turn sends the message to the channel for the file to be delivered at
    the destination. Here is the sample code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个简单的Java类，通知Spring将文件上传到Location2。这个类将加载`applicationContext.xml`文件，并使用在XML文件中配置的bean
    ID实例化`FTPChannel`。创建一个文件对象，其中包含需要传输到远程位置的文件名。将这个文件对象发送到Spring集成消息，然后将消息发送到通道，以便文件被传送到目的地。以下是示例代码：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run the preceding class to see `report-Jan.txt` to be transferred to the remote
    location.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述类以查看`report-Jan.txt`被传输到远程位置。
- en: Configuring Spring FTP to read files in subfolders using the gateway
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Spring FTP以使用网关读取子文件夹中的文件
- en: In this section, let's look at another configuration file that can be used to
    read subfolder reports.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，让我们看看另一个可以用来读取子文件夹报告的配置文件。
- en: 'We have used the expression attribute from the previous section dealing with
    FTP XSD. We shall further see how we can intimate the Spring integration FTP framework
    to trigger FTP commands with an expression attribute. Each of the commands executed
    in FTP will get a reply, usually three digits, for example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了上一节处理FTP XSD的表达式属性。我们将进一步看到如何使用表达式属性通知Spring集成FTP框架触发FTP命令。在FTP中执行的每个命令都会得到一个回复，通常是三位数，例如：
- en: '`125`: Data connection already open; transfer starting'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`125`：数据连接已打开；传输开始'
- en: '`200`: Command OK'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200`：命令OK'
- en: '`214`: Help message (for human user)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`214`：帮助消息（供人类用户使用）'
- en: '`331`: Username OK; password required'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`331`：用户名正确；需要密码'
- en: '`425`: Can''t open data connection'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`425`：无法打开数据连接'
- en: '`452`: Error writing file'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`452`：写文件错误'
- en: '`500`: Syntax error (unrecognized command)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`500`：语法错误（无法识别的命令）'
- en: '`501`: Syntax error (invalid arguments)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`501`：语法错误（无效参数）'
- en: '`502`: Unimplemented mode type'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`502`：未实现的模式类型'
- en: 'The reply channels are created by gateways. In the following code, we have
    configured a reply channel for the splitters:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 回复通道由网关创建。在以下代码中，我们为分割器配置了一个回复通道：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With Spring integration support for FTP, we can also break the message into
    splits. This is configured using a `splitter` attribute (`AbstractMessageSplitter
    implements MessageHandler`) in the XML file, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring集成支持FTP，我们还可以将消息分割成多个部分。这是在XML文件中使用`splitter`属性（`AbstractMessageSplitter
    implements MessageHandler`）进行配置的。
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Logically, the `splitter` class has to split the messages and attach sequence
    numbers and size information to each split message, so that the sequence is not
    lost. The broken messages can be put together using aggregators and then sent
    across the channel.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，`splitter`类必须分割消息并为每个分割消息附加序列号和大小信息，以便不丢失顺序。可以使用聚合器将断开的消息组合在一起，然后发送到通道。
- en: Configuring Spring FTP in Java
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Java中配置Spring FTP
- en: In this section, let's see how we can configure FTP properties in a Java class
    by using annotations and creating an instance of the `DefaultFTPSession` factory
    and setting the properties using the setter methods available with the instance.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，让我们看看如何使用注解在Java类中配置FTP属性，并创建`DefaultFTPSession`工厂的实例，并使用实例可用的setter方法设置属性。
- en: 'We can use the `@Configuration` annotation to configure the FTP properties
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`@Configuration`注解来配置FTP属性，如下所示：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Sending files over FTP using the Spring integration
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring集成发送文件到FTP
- en: 'Think of a scenario in which you are sending files over an FTP channel. Consider
    that there are two files, say `Orders.txt` and `vendors.txt`, that need to be
    sent over FTP to a remote location. To accomplish this, we need to follow these
    steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种情景，你正在通过FTP通道发送文件。假设有两个文件，比如`Orders.txt`和`vendors.txt`，需要通过FTP发送到远程位置。为了实现这一点，我们需要按照以下步骤进行操作：
- en: Create `FTPChannel`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`FTPChannel`。
- en: Make a directory in the base folder using `baseFolder.mkdirs()`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`baseFolder.mkdirs()`在基本文件夹中创建一个目录。
- en: Create two file objects at the base folder location.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基本文件夹位置创建两个文件对象。
- en: Use `InputStream` and create two separate streams for orders and vendors.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`InputStream`为订单和供应商创建两个单独的流。
- en: Using the file utils available in Spring, copy the input streams to their specific
    files.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring中可用的文件工具，将输入流复制到它们各自的文件中。
- en: Using the `MessageBuilder` class, use the `withpayload()` method to convert
    the files into messages.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MessageBuilder`类，使用`withpayload()`方法将文件转换为消息。
- en: Lastly, send the message to the FTP channel and close the context.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将消息发送到FTP通道并关闭上下文。
- en: 'Let''s write some sample code to do this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些示例代码来做到这一点：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: FTP application using the Spring integration and Spring batch
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring集成和Spring批处理的FTP应用程序
- en: In this section, we shall learn how to make FTP as a batch job. We shall create
    a configuration file in Java instead of XML. Here we shall set all the properties
    for a Spring batch database and tasklet using the `@Configuration` annotation.
    Then we have a properties file, which will set values to the instance variables
    in the `ApplicationConfiguration.java` file. The properties are loaded using the
    properties holder pattern available in Spring Framework.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将学习如何将FTP作为批处理作业。我们将在Java中创建一个配置文件，而不是XML。在这里，我们将使用`@Configuration`注解为Spring批处理数据库和tasklet设置所有属性。然后我们有一个属性文件，它将为`ApplicationConfiguration.java`文件中的实例变量设置值。使用Spring框架中可用的属性持有者模式加载属性。
- en: 'We shall first update the configuration files. Here is a sample configuration
    file:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先要更新配置文件。以下是一个示例配置文件：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's use `property-placeholder` for further configuring the batch job.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`property-placeholder`进一步配置批处理作业。
- en: 'Create a file named `batch.properties`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`batch.properties`的文件：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Configure the application in the `context.xml` file or a separate file, the
    tasklet to run the FTP:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`context.xml`文件或一个单独的文件中配置应用程序，以运行FTP的tasklet：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here is `MyApplicationFtpGetRemoteFilesTasklet`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是`MyApplicationFtpGetRemoteFilesTasklet`：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw an overview of FTP and its abbreviations. We have seen
    different types of adapters, such as inbound and outbound adapters, with the outbound
    gateway and its configuration. We have also shown the `springs-integration-ftp.xsd`
    and have quoted various options available for each of the inbound and outbound
    adapters. We have also shown the libraries that are required to develop a maven
    application using the `spring-integration-ftp` package. Then we have looked at
    two important classes, `FTPSessionFactory` and `FTPsSessionFactory`, with getters
    and setters. We have also demonstrated an example of transferring files with `SpringFTP`
    using the outbound channel. We also demonstrated configuring FTP using Java via
    the `@Configuration` annotation. Lastly, we have demonstrated FTP as a tasklet.
    In the next chapter, we shall further look into Spring's integration with HTTP.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了FTP及其缩写的概述。我们已经看到了不同类型的适配器，比如入站和出站适配器，以及出站网关及其配置。我们还展示了`springs-integration-ftp.xsd`，并引用了每个入站和出站适配器可用的各种选项。我们还展示了使用`spring-integration-ftp`包开发maven应用程序所需的库。然后我们看了两个重要的类，`FTPSessionFactory`和`FTPsSessionFactory`，以及它们的getter和setter。我们还演示了使用出站通道的`SpringFTP`传输文件的示例。我们还演示了如何使用Java通过`@Configuration`注解配置FTP。最后，我们演示了FTP作为一个tasklet。在下一章中，我们将进一步探讨Spring与HTTP的集成。
