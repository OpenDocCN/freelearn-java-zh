- en: Chapter 9. Managing the Application Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。管理应用程序服务器
- en: So far, we have covered many Java Enterprise examples and deployed them on the
    application server. We will now dive headlong into the vast and varied ocean of
    instruments that are available to manage the application server. The purpose of
    this chapter is to teach you how to use these instruments to administer and monitor
    all the resources available on the application server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了多个Java Enterprise示例，并将它们部署到应用程序服务器上。现在，我们将一头扎入管理应用程序服务器的丰富多样的工具海洋。本章的目的是教会你如何使用这些工具来管理和监控应用程序服务器上所有可用的资源。
- en: 'Here is the list of topics we will cover in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题列表：
- en: An introduction to the WildFly **Command-line Interface** (**CLI**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly **命令行界面**（**CLI**）简介
- en: How to create scripts with the CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CLI创建脚本
- en: How to programmatically manage your server resources using scripting languages
    and WildFly's client API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用脚本语言和WildFly客户端API编程式地管理服务器资源
- en: How to enforce role-based security for administrators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何强制执行管理员基于角色的安全性
- en: Entering the WildFly CLI
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入WildFly CLI
- en: A CLI is a complete management tool that can be used to start and stop servers,
    deploy and undeploy applications, configure system resources, and perform other
    administrative tasks. Operations in it can be executed in an atomic way or in
    batch modes, allowing you to run multiple tasks as a group.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: CLI是一个完整的管理工具，可以用来启动和停止服务器，部署和卸载应用程序，配置系统资源，并执行其他管理任务。其中的操作可以以原子方式或批量模式执行，允许你将多个任务作为一个组运行。
- en: Launching the CLI
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动CLI
- en: 'If you are using Windows, you can start the CLI by entering the following command
    from the `JBOSS_HOME/bin` folder using the Command Prompt:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows，你可以通过命令提示符从`JBOSS_HOME/bin`文件夹中输入以下命令来启动CLI：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, enter the following command if you are using Linux:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Linux，则可以输入以下命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the CLI has started, you can connect to the managed server instance using
    the `connect` command, which by default connects to `localhost` and the `9990`
    port:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦CLI启动，你可以使用`connect`命令连接到托管的服务器实例，默认情况下连接到`localhost`和`9990`端口：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you want to connect to another address or port, you can simply pass it to
    the `connect` command, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要连接到另一个地址或端口，你可以简单地将其传递给`connect`命令，如下所示：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It is also possible to launch a CLI in the connected mode; this allows it to
    be connected automatically and to possibly specify the commands to be executed.
    For example, the following `shell` command automatically connects to a WildFly
    instance and issues a `shutdown` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在连接模式下启动CLI；这允许它自动连接，并可能指定要执行的命令。例如，以下`shell`命令自动连接到WildFly实例并发出`shutdown`命令：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: CLI is especially useful for the automation of your software development process—**Continuous
    Integration** (**CI**) and production environment management systems can automatically
    control the life cycle of your application server with tools such as Chef ([https://www.getchef.com/](https://www.getchef.com/))
    or Puppet ([http://puppetlabs.com/](http://puppetlabs.com/)). It might be handy
    if you would like to minimize the number of manual tasks that are required to
    be done to deploy an application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行界面（CLI）对于自动化软件开发流程特别有用——**持续集成**（**CI**）和生产环境管理系统可以使用Chef ([https://www.getchef.com/](https://www.getchef.com/))
    或Puppet ([http://puppetlabs.com/](http://puppetlabs.com/)) 等工具自动控制应用服务器的生命周期。如果你希望最小化部署应用程序所需的手动任务数量，这将非常有用。
- en: Connecting from remote hosts
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从远程主机连接
- en: 'Starting from the 7.1.0 Beta release of the application server, security is
    enabled on AS management interfaces by default to prevent unauthorized remote
    access to the application server. Although local clients of the application server
    are still allowed to access management interfaces without any authentication,
    remote clients need to enter a username/password pair to access a CLI. Here''s
    an example session that successfully connects to a remote host with the IP address
    `10.13.2.255`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序服务器的7.1.0 Beta版本开始，默认情况下在AS管理接口上启用了安全功能，以防止未经授权的远程访问应用程序服务器。尽管应用程序服务器的本地客户端仍然允许未经任何身份验证地访问管理接口，但远程客户端需要输入用户名/密码对才能访问CLI。以下是一个成功连接到IP地址为`10.13.2.255`的远程主机的示例会话：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Please refer to [Chapter 2](part0017_split_000.html#page "Chapter 2. Your First
    Java EE Application on WildFly"), *Your First Java EE Application on WildFly*,
    for more information about creating a user with the `add-user.sh` shell command.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第2章](part0017_split_000.html#page "第2章. 在WildFly上创建第一个Java EE应用程序")，*在WildFly上创建第一个Java
    EE应用程序*，以获取有关使用`add-user.sh` shell命令创建用户的更多信息。
- en: Using a CLI in the graphical mode
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在图形模式下使用CLI
- en: 'An interesting option available for the command-line interface is the graphical
    mode, which can be activated by adding the `--gui` parameter to the shell script:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行界面可用的一项有趣选项是图形模式，可以通过在shell脚本中添加`--gui`参数来激活：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s how CLI looks in the graphical mode:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是CLI在图形模式下的样子：
- en: '![Using a CLI in the graphical mode](img/00077.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![在图形模式下使用CLI](img/00077.jpeg)'
- en: As described in the label, the resource will expand when you click on a folder;
    on the other hand, if you right-click on a node, you can fire an operation on
    it. The graphical mode could be useful to explore the possible configuration values
    or if you are not a big fan of console tools.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如标签所述，当您点击文件夹时，资源将展开；另一方面，如果您右键单击节点，您可以在其上执行操作。图形模式可能有助于探索可能的配置值，或者如果您不是特别喜欢控制台工具的话。
- en: The next section discusses how to construct CLI commands, which can be executed
    either in the terminal mode or the graphical mode.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分讨论了如何构建CLI命令，这些命令可以在终端模式或图形模式下执行。
- en: Constructing CLI commands
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建CLI命令
- en: 'All CLI operation requests allow you to have low-level interactions with the
    server management model. They provide a controlled way to edit the server configurations.
    An operation request consists of three parts:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有CLI操作请求都允许您与服务器管理模型进行低级别交互。它们提供了一种受控的方式来编辑服务器配置。一个操作请求由三部分组成：
- en: An address that is prefixed with `/`
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`/`为前缀的地址
- en: An operation name that is prefixed with `:`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前缀为`:`的操作名称
- en: An optional set of parameters contained within `()`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含在`()`内的可选参数集
- en: Determining the resource address
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定资源地址
- en: 'The server configuration is presented as a hierarchical tree of addressable
    resources. Each resource node offers a different set of operations. The address
    specifies the resource node on which to perform the operation. An address uses
    the following syntax:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器配置以可寻址资源的分层树的形式呈现。每个资源节点提供一组不同的操作。地址指定要执行操作的资源节点。地址使用以下语法：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The notations are explained as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对这些记号的解释：
- en: '`node-type`: This is the resource node type. This maps to an element name in
    the server configuration.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node-type`：这是资源节点类型。这映射到服务器配置中的一个元素名称。'
- en: '`node-name`: This specifies the resource node name. This maps to the name attribute
    of the element in the server configuration.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node-name`：这指定了资源节点名称。这映射到服务器配置中元素的名称属性。'
- en: 'Separate each level of the resource tree with a slash (`/`). So, for example,
    the following CLI expression identifies the ExampleDS data source registered in
    the data source subsystem:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用斜杠(`/`)分隔资源树的每一级。例如，以下CLI表达式识别在数据源子系统注册的ExampleDS数据源：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Performing operations on resources
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对资源执行操作
- en: 'Once you have identified a resource, you can perform operations on the resource.
    An operation uses the following syntax:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已识别资源，您就可以对该资源执行操作。一个操作使用以下语法：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So in the previous example, you can query the list of available resources for
    your nodes by adding the `read-resource` command at the end of it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在前面的示例中，您可以通过在末尾添加`read-resource`命令来查询您节点的可用资源列表：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to query for a specific attribute of your node, you can use the
    `read-attribute` operation instead. For example, the following code shows how
    to read the enabled attribute from the data source:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查询节点的一个特定属性，您可以使用`read-attribute`操作。例如，以下代码显示了如何从数据源中读取启用属性：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apart from the operations on a specific resource, you can also perform a set
    of commands that are available on every path of your WildFly subsystem, such as
    `cd` or `ls` commands. These commands are pretty much equivalent to their Unix
    shell counterparts, and they allow you to navigate through the WildFly subsystems.
    Other important additions are the `deploy` and `undeploy` commands that, as you
    might guess, allow you to manage the deployment of applications. These key commands
    are discussed in the *Deploying applications using the CLI* section of this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对特定资源执行的操作之外，您还可以执行一组在您的WildFly子系统每个路径上都可用的命令，例如`cd`或`ls`命令。这些命令几乎等同于它们的Unix
    shell对应命令，并允许您在WildFly子系统中导航。其他重要的新增功能是`deploy`和`undeploy`命令，正如您可能猜到的，这些命令允许您管理应用程序的部署。这些关键命令在本章的*使用CLI部署应用程序*部分进行了讨论。
- en: 'The CLI, however, is not just about querying attributes from the WildFly subsystems;
    you can also set attributes or create resources. For example, if you were to set
    the HTTP port of the HTTP connector, you will have to use the corresponding `write`
    attribute on HTTP''s socket binding interface, shown as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CLI（命令行界面）不仅仅是查询WildFly子系统的属性；您还可以设置属性或创建资源。例如，如果您要设置HTTP连接器的HTTP端口，您将不得不使用HTTP套接字绑定接口上的相应`write`属性，如下所示：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Apart from the operations that we have seen so far, which can be performed
    on every resource of your subsystems, there can be special operations that can
    be performed exclusively on one resource. For example, within the naming subsystem,
    you will be able to issue a `jndi-view` operation that will display the list of
    JNDI bindings, as shown in the following code snippet:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们迄今为止看到的可以在您的子系统中的每个资源上执行的操作之外，还可以执行一些只能针对单个资源执行的特殊操作。例如，在命名子系统中，您将能够执行一个`jndi-view`操作，该操作将显示JNDI绑定的列表，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using the tab completion helper
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Tab补全助手
- en: 'Getting to know all the available commands in the CLI is a pretty hard task;
    this management interface includes an essential feature, the tab completion. Suppose
    the cursor is positioned at the beginning of an empty line; now if you type in
    `/` and press the *Tab* key, you will get the following list of all the available
    node types:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 了解CLI中所有可用命令是一项相当困难的任务；这个管理界面包括一个基本功能，即Tab补全。假设光标位于一个空行的开头；现在如果您输入`/`并按*Tab*键，您将获得以下所有可用节点类型的列表：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After selecting the node type, you want to enter into the tree of resources,
    so type `=` and press the *Tab* key again. This will result in a list of all the
    following node names available for the chosen node type:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择节点类型后，您想进入资源树，因此请输入`=`并再次按*Tab*键。这将显示所有以下节点名称的列表，这些名称适用于所选节点类型：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After you have finished with the node path, adding a colon (`:`) at the end
    of the node path and pressing the *Tab* key will display all the available operation
    names for the selected node, which is shown as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成节点路径后，在节点路径末尾添加冒号（`:`）并按*Tab*键将显示所选节点的所有可用操作名称，如下所示：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see all the parameters of the `add` operation (after the operation name),
    press the *Tab* key:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`add`操作的所有参数（在操作名称之后），请按*Tab*键：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Choose the parameter you want and specify its value after `=`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您想要的参数，并在`=`之后指定其值：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, when all the parameters have been specified, add `)` and press *Enter*
    to issue the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当所有参数都已指定后，添加`)`并按*Enter*键以执行以下命令：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Deploying applications using the CLI
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CLI部署应用程序
- en: Deploying an application (in the standalone mode) can be easily performed by
    copying the application's archives into the `deployment` folder of your server
    distribution. That's a pretty handy option; however, we would like to stress the
    advantage of using a CLI, which offers a wide choice of additional options when
    deploying and also provides the opportunity to deploy applications remotely.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CLI部署应用程序（在独立模式下）可以通过将应用程序的存档复制到服务器发行版的`deployment`文件夹中轻松完成。这是一个相当方便的选项；然而，我们想强调使用CLI的优势，它提供了广泛的附加选项，在部署时使用，同时也提供了远程部署应用程序的机会。
- en: 'All it takes to deploy an application''s archive is a connection to the management
    instance, either local or remote, and by issuing of the `deploy` shell command.
    When used without arguments, the `deploy` command provides a list of applications
    that are currently deployed, as shown in the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序存档所需的一切只是一个连接到管理实例（无论是本地还是远程），以及发出 `deploy` shell 命令。当不使用参数时，`deploy`
    命令会提供一个当前已部署的应用程序列表，如下所示：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you feed a resource archive such as a `WAR` file to the shell, it will deploy
    it on the standalone server right away, as shown in the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将资源存档（如 `WAR` 文件）喂给 shell，它将立即在独立服务器上部署它，如下所示：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By default, a CLI uses the `JBOSS_HOME/bin` file as a source for your deployment
    archives. You can, however, use absolute paths when specifying the location of
    your archives; the CLI expansion facility (using the *Tab* key) makes this option
    fairly simple:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CLI 使用 `JBOSS_HOME/bin` 文件作为你的部署存档的来源。然而，你可以使用绝对路径来指定存档的位置；CLI 扩展功能（使用
    *Tab* 键）使此选项相当简单：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Redeploying the application requires an additional flag to be added to the
    `deploy` command. Use the `-f` argument to force the application''s redeployment:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重新部署应用程序需要在 `deploy` 命令中添加一个额外的标志。使用 `-f` 参数强制应用程序重新部署：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Undeploying the application can be done through the `undeploy` command, which
    takes the application that is deployed as an argument. This is shown in the following
    command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `undeploy` 命令卸载应用程序可以通过将已部署的应用程序作为参数来实现。如下所示：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: By checking the WildFly configuration file (for example, `standalone.xml` or
    `domain.xml`), you will notice that the deployment element for your application
    has been removed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查 WildFly 配置文件（例如，`standalone.xml` 或 `domain.xml`），你会注意到你的应用程序的部署元素已被移除。
- en: Deploying applications to a WildFly domain
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署应用程序到 WildFly 域
- en: 'When you are deploying an application using the domain mode, you will have
    to specify to which server group the deployment is associated with. The CLI lets
    you choose between the following two options:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用域模式部署应用程序时，你必须指定部署关联的服务器组。CLI 允许你在以下两个选项之间进行选择：
- en: Deploy to all server groups
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到所有服务器组
- en: Deploy to a single server group
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到单个服务器组
- en: We will discuss these choices in two separate sections.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在两个单独的部分中讨论这些选择。
- en: Deploying to all server groups
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到所有服务器组
- en: 'If this option is chosen, the application will be deployed to all the available
    server groups. The `--all-server-groups` flag can be used for this purpose. For
    example, refer to the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择此选项，应用程序将被部署到所有可用的服务器组。可以使用 `--all-server-groups` 标志来实现此目的。例如，参考以下代码：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If, on the other hand, you want to undeploy an application from all the server
    groups that belong to a domain, you will have to issue the `undeploy` command
    as shown in the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从属于某个域的所有服务器组中卸载应用程序，你将必须按照以下命令发出 `undeploy` 命令：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You might have noticed that the `undeploy` command uses the `--all-relevant-server`-group
    instead of the `--all-server-` group. The reason for this difference is that the
    deployment might not be enabled on all the server groups; therefore, by using
    this option, you will actually undeploy it from all the server groups in which
    the deployment is enabled.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，`undeploy` 命令使用的是 `--all-relevant-server` 组而不是 `--all-server-` 组。这种差异的原因是部署可能并未在所有服务器组中启用；因此，通过使用此选项，你实际上会从所有已启用部署的服务器组中卸载它。
- en: Deploying to a single server group
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到单个服务器组
- en: 'The other option lets you perform a selective deployment of your application
    only on the server groups you indicate:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项允许你仅在你指定的服务器组上执行应用程序的选择性部署：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You are not limited to a single server group, and you can separate multiple
    server groups with a comma (`,`). For example, refer to the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅限于单个服务器组，并且可以使用逗号（`,`）分隔多个服务器组。例如，参考以下代码：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The tab completion feature will help you to complete the value for the list
    of `--server-groups` selected for deployment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡补全功能将帮助你完成为部署所选的 `--server-groups` 列表指定的值。
- en: 'Now, suppose we want to undeploy the application from just one server group.
    In this case, there can be two possible outcomes. If the application is available
    just on that server group, you will successfully complete the undeployment as
    shown in the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们只想从单个服务器组中卸载应用程序。在这种情况下，可能会有两种可能的结果。如果应用程序仅在该服务器组中可用，您将成功完成卸载，如下面的命令所示：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'On the other hand, if your application is available on other server groups,
    the following error will be returned by the CLI:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您的应用程序在其他服务器组中可用，CLI 将返回以下错误：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: It seems that something went wrong. As a matter of fact, when you are removing
    an application from a server group, the domain controller will verify that any
    other server group will not refer to the application; otherwise, the previous
    command will fail.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来出了点问题。实际上，当您从服务器组中删除应用程序时，域控制器会验证没有其他服务器组会引用该应用程序；否则，之前的命令将失败。
- en: 'You can, however, instruct the domain controller to undeploy the application
    without deleting the content as well. This is shown in the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可以指示域控制器卸载应用程序而不删除内容。以下命令显示了这一点：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating CLI scripts
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 CLI 脚本
- en: 'As a program developer, you might be interested to know that a CLI can execute
    commands in a non-interactive way by adding them to a file, just as a shell script.
    In order to execute the script, you can launch the CLI with the `--file` parameter
    as in the following example (for Windows):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序开发者，您可能想知道 CLI 可以通过将它们添加到文件中来以非交互方式执行命令，就像 shell 脚本一样。为了执行脚本，您可以使用以下示例（对于
    Windows）中的 `--file` 参数启动 CLI：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The equivalent command for Unix users will be as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Unix 用户，等效的命令如下：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the next section, we will look at some useful scripts that can be added to
    your administrator toolbox.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些可以添加到您的管理员工具箱中的有用脚本。
- en: Deploying an application to several WildFly nodes
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将应用程序部署到多个 WildFly 节点
- en: The earlier JBoss AS releases used to ship with a `farm` folder, which would
    trigger a deployment to all the nodes that are part of a JBoss cluster. This option
    is not included anymore with JBoss AS7 and WildFly, but resurrecting a farm deployment
    is just a matter of following a few CLI instructions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 JBoss AS 版本通常会附带一个 `farm` 文件夹，该文件夹会触发将部署到 JBoss 集群中的所有节点。这个选项在 JBoss AS7
    和 WildFly 中不再包含，但恢复 farm 部署只需遵循几个 CLI 指令。
- en: 'In the following example, we are deploying an application to the default server
    address (`127.0.0.1` and port `9990`) and to another server instance that is bound
    to the same address but to port `10190`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将应用程序部署到默认服务器地址（`127.0.0.1` 和端口 `9990`）以及绑定到相同地址但端口为 `10190` 的另一个服务器实例：
- en: '[PRE34]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Restarting servers in a domain
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在域中重启服务器
- en: 'A common requirement for the domain administrator is to restart the application
    server nodes, for example, when some server libraries are updated. CLI provides
    a handy shortcut to stop and start all the servers that are part of a server group:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 域管理员的一个常见需求是在更新某些服务器库时重新启动应用程序服务器节点。CLI 提供了一个方便的快捷方式来停止和启动属于服务器组的所有服务器：
- en: '[PRE35]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you prefer a more granular approach, you can start the single server nodes
    as shown in the following example, which shows how you can apply conditional execution
    logic in your CLI scripts:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢更细粒度的方法，您可以根据以下示例启动单个服务器节点，该示例显示了如何在您的 CLI 脚本中应用条件执行逻辑：
- en: '[PRE36]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the `if end-if` part of the code, we are checking for the server's status
    attribute. If the status is **STARTED**, the application servers are stopped and
    then restarted.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的 `if end-if` 部分，我们正在检查服务器的状态属性。如果状态是 **STARTED**，则应用程序服务器将被停止并重新启动。
- en: Installing a data source as a module
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数据源作为模块安装
- en: 'In WildFly, you can use the `module` command in order to install a new module.
    We already did something similar in [Chapter 5](part0030_split_000.html#page "Chapter 5. Combining
    Persistence with CDI"), *Combining Persistence with CDI*. Now, you can fully automate
    a data source creation as shown in the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WildFly 中，您可以使用 `module` 命令来安装一个新的模块。我们已经在 [第 5 章](part0030_split_000.html#page
    "第 5 章。将持久性与 CDI 结合") 中做了类似的事情，*将持久性与 CDI 结合*。现在，您可以像以下示例中所示那样完全自动化数据源创建：
- en: '[PRE37]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The first line of the script, after the connection, installs a new module named
    `org.postgresql` in your server modules' directory, including the PostgreSQL JDBC
    driver and the required dependencies.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第1行，在连接之后，在你的服务器模块目录中安装了一个名为`org.postgresql`的新模块，包括PostgreSQL JDBC驱动和所需的依赖项。
- en: The second line installs the JDBC driver for the `org.postgresql` module into
    the `datasources/jdbc-driver` subsystem.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第2行将`org.postgresql`模块的JDBC驱动安装到`datasources/jdbc-driver`子系统。
- en: Finally, a data source is added to `jndi java:jboss/datasources/PostgreSQLDS`
    with the required URL and credentials.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用所需的URL和凭据将数据源添加到`jndi java:jboss/datasources/PostgreSQLDS`。
- en: Adding JMS resources
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加JMS资源
- en: 'Adding a new JMS destination is quite easy since it does not require a lengthy
    set of commands. However, it is sometimes your application that needs to set up
    lots of JMS destinations in order to work, so why not create a script for it too?
    The following is a tiny script that adds a JMS queue to the server configuration:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的JMS目标非常简单，因为它不需要一系列冗长的命令。然而，有时你的应用程序需要设置许多JMS目标才能工作，那么为什么不为此创建一个脚本呢？以下是一个简单的脚本，用于将JMS队列添加到服务器配置中：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is the corresponding script you can use to create a JMS topic:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你可以使用来创建JMS主题的相应脚本：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Using advanced languages to create powerful CLI scripts
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级语言创建强大的CLI脚本
- en: So far, we have learned how to write CLI shell commands to manage the application
    server's resources. This approach has the advantage that you can easily access
    every server resource easily and quickly, thanks to the built-in autocompletion
    feature. If, on the other hand, you want to perform some sophisticated logic around
    your commands, then you need to find some other alternatives.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何编写CLI shell命令来管理应用程序服务器的资源。这种方法的优势在于，你可以轻松快速地访问每个服务器资源，这得益于内置的自动完成功能。另一方面，如果你想围绕你的命令执行一些复杂的逻辑，那么你需要寻找其他替代方案。
- en: If you are a shell guru, you might easily resort to some bash scripting in order
    to capture the output of the CLI and use the rich set of Unix/Linux tools to perform
    some administrative actions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个shell高手，你可能会很容易地求助于一些bash脚本，以便捕获CLI的输出并使用丰富的Unix/Linux工具执行一些管理操作。
- en: 'Supplying a short overview of the bash functionalities might be an amusing
    exercise; however, if we do this, we would move away from the scope of this book.
    We will instead document some built-in functionalities such as the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 提供bash功能的简要概述可能是一项有趣的练习；然而，如果我们这样做，我们就会偏离本书的范围。我们将记录一些内置功能，如下所示：
- en: In the first section, we will show how to use a CLI remote client API from within
    a Python script
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一部分，我们将展示如何在Python脚本中使用CLI远程客户端API。
- en: In the next section, we will use the raw management API to execute CLI commands
    from within Java applications
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用原始管理API在Java应用程序中执行CLI命令。
- en: There are multiple use cases in which the JBoss CLI scripts could be useful.
    A script could be used to configure a developer's machine, a test environment,
    or as an initial configuration for production. In many cases, the configuration
    needed to start a full-blown enterprise application may be nontrivial; you might
    need to use a specific port configuration to cluster tests or your own security
    domain. You might also need your continuous integration server to do this for
    you. Besides this, it's better to have an automatic configuration script than
    set up the configuration manually every time, which is just a waste of time and
    a potential source of bugs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，JBoss CLI脚本可能非常有用。脚本可以用来配置开发人员的机器、测试环境，或者作为生产环境的初始配置。在许多情况下，启动一个完整的企业应用程序所需的配置可能相当复杂；你可能需要使用特定的端口配置来集群测试或你的安全域。你可能还需要你的持续集成服务器为你完成这项工作。除此之外，拥有一个自动配置脚本比每次都手动设置配置要好，这既浪费时间，又可能成为错误源。
- en: Using scripting languages to wrap CLI execution
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本语言包装CLI执行
- en: JBoss AS 7 has introduced a new CLI remote API that acts as a facade for the
    CLI public API. The core class that acts as a bridge between these two APIs is
    the `scriptsupport.CLI` class that is contained in the `JBOSS_HOME/bin/client/jboss-cli-client.jar`
    file.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss AS 7引入了一个新的CLI远程API，它充当CLI公共API的代理。这两个API之间的桥梁是`scriptsupport.CLI`类，该类包含在`JBOSS_HOME/bin/client/jboss-cli-client.jar`文件中。
- en: Thanks to this API, you can execute CLI commands using lots of different languages
    such as Jython, Groovy, or JavaScript. Since Jython is also the de facto management
    standard for other application servers, such as Oracle, WebLogic, and WebSphere,
    we will use it to perform some basic management tasks.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了这个 API，您可以使用多种不同的语言执行 CLI 命令，例如 Jython、Groovy 或 JavaScript。由于 Jython 也是其他应用程序服务器的实际管理标准，例如
    Oracle、WebLogic 和 WebSphere，我们将使用它来执行一些基本的管理任务。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Jython is an implementation of Python for JVM. Jython is extremely useful because
    it provides the productivity features of a mature scripting language while running
    on a JVM. Unlike a Python program, a Jython program can run in any environment
    that supports a JVM.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Jython 是为 JVM 实现的 Python。Jython 非常有用，因为它在 JVM 上运行时提供了成熟脚本语言的生产力特性。与 Python 程序不同，Jython
    程序可以在支持 JVM 的任何环境中运行。
- en: Jython is invoked using the `jython` script, which is a short script that invokes
    your local JVM, running the Java class file, `org.python.util.jython`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Jython 使用 `jython` 脚本调用，这是一个简短的脚本，用于调用您的本地 JVM，运行 Java 类文件 `org.python.util.jython`。
- en: The first thing you need to do in order to get started is download the Jython
    installer from [http://www.jython.org/downloads.html](http://www.jython.org/downloads.html).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，您需要做的第一件事是下载 Jython 安装程序，从 [http://www.jython.org/downloads.html](http://www.jython.org/downloads.html)。
- en: 'Run the installer with the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行安装程序：
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, add the `JYTHON_HOME/bin` folder (for example, `C:\jython2.5.3\bin`)
    to the system path and add the `jboss-cli-client.jar` file to the system, `CLASSPATH`.
    For example, in Windows, use the given command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 `JYTHON_HOME/bin` 文件夹（例如，`C:\jython2.5.3\bin`）添加到系统路径，并将 `jboss-cli-client.jar`
    文件添加到系统的 `CLASSPATH` 中。例如，在 Windows 中，使用以下命令：
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here''s the same command for Linux:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Linux 的相同命令：
- en: '[PRE42]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Ok, now we will create our first script that will basically return the JNDI
    view of our application server.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们将创建第一个脚本，该脚本将基本上返回我们的应用程序服务器的 JNDI 视图。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be aware that Jython, just like Python, uses indentation to determine the code
    structure instead of using braces or keywords. Therefore, do not use them randomly.
    An IDE might help you with this—for Python you can use, for example, Vim with
    python-mode ([https://github.com/klen/python-mode](https://github.com/klen/python-mode))
    or Eclipse with the PyDev extension ([http://pydev.org/](http://pydev.org/)).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Jython 与 Python 一样，使用缩进来确定代码结构，而不是使用大括号或关键字。因此，不要随意使用它们。IDE 可能会帮助您完成这项工作——例如，对于
    Python，您可以使用 Vim 的 python-mode ([https://github.com/klen/python-mode](https://github.com/klen/python-mode))
    或带有 PyDev 扩展的 Eclipse ([http://pydev.org/](http://pydev.org/))。
- en: 'Create a file named `script.py` containing the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `script.py` 的文件，包含以下代码：
- en: '[PRE43]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now execute the script with the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下代码执行脚本：
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As you can see, the code is very self-explanatory; we are importing the `org.jboss.as.cli.scriptsupport.CLI`
    class, which is used to send commands and read the response. Then, we are connecting
    to the local WildFly instance and issuing a `:jndi-view` command.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，代码非常直观；我们正在导入 `org.jboss.as.cli.scriptsupport.CLI` 类，该类用于发送命令并读取响应。然后，我们连接到本地
    WildFly 实例并发出 `:jndi-view` 命令。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `connect` command can be used to connect to a remote WildFly host as well
    by adding the following parameters: `connect (String controllerHost, int controllerPort,
    String username, String password)`.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `connect` 命令通过添加以下参数连接到远程 WildFly 主机：`connect (String controllerHost, int
    controllerPort, String username, String password)`。
- en: 'The response variable is `org.jboss.dmr.ModelNode`. This can be further inspected
    as shown in the following example, which goes in to some depth about platform
    MBeans, to get some memory statistics:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 响应变量是 `org.jboss.dmr.ModelNode`。这可以通过以下示例进一步检查，该示例深入探讨了平台 MBeans，以获取一些内存统计信息：
- en: '[PRE45]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the previous example, we tracked the resources contained in `/core-service=platform-mbean/type=memory`.
    The available resources are, however, child resources of the two kinds of available
    heap memory areas (`heap-memory-usage` and `non-heap-memory-usage`), as shown
    by the following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们跟踪了 `/core-service=platform-mbean/type=memory` 中包含的资源。然而，可用的资源实际上是两种可用堆内存区域（`heap-memory-usage`
    和 `non-heap-memory-usage`）的子资源，如下面的代码所示：
- en: '[PRE46]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Using just the `get` command of the `ModelNode` object, you can refer to the
    child resources of the memory type and reach all the single attributes. Once you
    have got the attributes, it's easy to cast them to an integer using the `asInt()`
    function of the `ModelNode` object and use the cool Python constructs to alert
    your administrator.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用 `ModelNode` 对象的 `get` 命令，您就可以引用内存类型的子资源并访问所有单个属性。一旦您获得了属性，就可以使用 `ModelNode`
    对象的 `asInt()` 函数将它们转换为整数，并使用酷炫的 Python 构造来提醒您的管理员。
- en: Using the raw management API to manage the application server
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原始管理 API 管理应用程序服务器
- en: If you don't feel like learning a scripting language to manage the application
    server, you can still use the raw management API from within your Java classes.
    Don't be influenced by the fact that we left this option as the last one; in fact,
    using the native management API is not difficult at all since it is based on very
    few classes and has little compile-time and runtime dependencies on the WildFly
    API.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想学习脚本语言来管理应用程序服务器，您仍然可以在 Java 类中使用原始管理 API。不要受我们将其作为最后一个选项的事实的影响；实际上，使用原生管理
    API 并不难，因为它基于非常少的类，并且对 WildFly API 的编译时间和运行时依赖性很小。
- en: 'For this reason, you can use the management API as well from any Java EE application
    by simply adding the following dependencies to the `META-INF/MANIFEST.MF` file
    of your application:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您也可以通过简单地将以下依赖项添加到应用程序的 `META-INF/MANIFEST.MF` 文件中来从任何 Java EE 应用程序中使用管理
    API：
- en: '[PRE47]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The core API named **detyped management API** is quite simple; the primary class
    is `org.jboss.dmr.ModelNode`, which we already mentioned in the Jython section.
    A `ModelNode` class is essentially just a wrapper around a value; the value is
    typically a basic JDK type that can be retrieved using the `getType()` method
    of `ModelNode`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为 **未类型化的管理 API** 的核心 API 非常简单；主要类是 `org.jboss.dmr.ModelNode`，我们已经在 Jython
    部分提到了它。`ModelNode` 类本质上只是一个值的包装器；该值通常是可以通过 `ModelNode` 的 `getType()` 方法检索的基本 JDK
    类型。
- en: In addition to the `jboss-dmr` API, the other module that is used to connect
    to the management API is `jboss-as-controller-client`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `jboss-dmr` API 之外，用于连接到管理 API 的另一个模块是 `jboss-as-controller-client`。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You don't need to download any of these libraries since both of these modules
    are included in the application server since release 7.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要下载这些库，因为这两个模块自 7 版本以来就包含在应用程序服务器中了。
- en: Reading management model descriptions via the raw management API
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过原始管理 API 读取管理模型描述
- en: 'Using the **detyped management API** is not too different from its scripting
    language counterpart; at first, you need to create a management client that can
    connect to your target process''s native management socket (which can be an individual
    standalone mode server, or in a domain mode environment, the domain controller):'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **未类型化的管理 API** 与其脚本语言对应物并没有太大的不同；最初，您需要创建一个管理客户端，该客户端可以连接到目标进程的本地管理套接字（这可能是一个独立的服务器，或者在一个域模式环境中，是域控制器）：
- en: '[PRE48]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Next, you need to create an operation request object using the `org.jboss.dmr.ModelNode`
    class, as shown in the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要使用 `org.jboss.dmr.ModelNode` 类创建一个操作请求对象，如下面的命令所示：
- en: '[PRE49]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, `ModelNode` objects can be chained in order to reach an operation
    (in the example, the JNDI view), which is available on a node path (in our case,
    the naming subsystem).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`ModelNode` 对象可以被链起来以到达一个操作（在示例中是 JNDI 视图），该操作在节点路径（在我们的例子中是命名子系统）上可用。
- en: Once you have added the `ModelNode` attributes, you can issue the `execute`
    commands on your node, which will in turn return `ModelNode` where the result
    of the operation will be stored.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您添加了 `ModelNode` 属性，您就可以在您的节点上发出 `execute` 命令，这将反过来返回 `ModelNode`，其中将存储操作的结果。
- en: In the samples, you can find a fully working project containing these management
    examples.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，您可以找到一个包含这些管理示例的完整工作项目。
- en: Creating your resource watches using the detyped API
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用未类型化 API 创建您的资源监视器
- en: 'Now that you have learned the basics of the **detyped** **management API**,
    we will illustrate a concrete example; our goal will be to monitor a server resource
    (the number of active JDBC connections for a data source) using an EJB. You can
    use this pattern to create your own server watches that can be integrated with
    your application environment. This is shown in the following code snippet:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学习了**去类型化**的**管理 API**的基础知识，我们将通过一个具体的例子来展示；我们的目标将是使用 EJB 监控服务器资源（数据源的活动
    JDBC 连接数）。你可以使用这种模式创建自己的服务器监控，并将其集成到你的应用环境中。以下代码片段展示了这一点：
- en: '[PRE50]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We will not rehash the basic concepts about EJB Timers, which have been discussed
    in [Chapter 3](part0023_split_000.html#page "Chapter 3. Introducing Java EE 7
    – EJBs"), *Introducing Java EE 7 – EJBs*. We suggest that you have a look at the
    highlighted section of the code, which shows how you can chain your `ModelNode`
    objects in order to reach the attribute that we are going to monitor (the `activeCount`
    attribute of the `ExampleDS` datasource).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会重新讨论 EJB 定时器的基本概念，这些概念已经在[第 3 章](part0023_split_000.html#page "第 3 章。介绍
    Java EE 7 – EJBs") *介绍 Java EE 7 – EJBs* 中讨论过。我们建议你查看代码中突出显示的部分，它展示了如何链接你的 `ModelNode`
    对象，以便达到我们要监控的属性（`ExampleDS` 数据源的 `activeCount` 属性）。
- en: Once you have the value of the `activeCount` attribute, we leave it to your
    imagination to envision all the possible actions you can undertake!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了 `activeCount` 属性的值，我们留给你的想象力去设想所有可能采取的行动！
- en: It is worth noting that there are additional means of monitoring WildFly. One
    of them is using the `hawt.io` plugin for JBoss ([http://hawt.io/plugins/jboss/](http://hawt.io/plugins/jboss/)).
    We already tried this for ActiveMQ when we were developing MessageBeans. Another
    tool is Jolokia ([http://www.jolokia.org/](http://www.jolokia.org/)), which exposes
    JMX beans over HTTP. So, if you are not into writing your own monitors, there
    are other options worth exploring.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，还有其他方法可以监控 WildFly。其中之一是使用 JBoss 的 `hawt.io` 插件（[http://hawt.io/plugins/jboss/](http://hawt.io/plugins/jboss/)）。当我们在开发
    MessageBeans 时，我们已经尝试了这种方法。另一个工具是 Jolokia（[http://www.jolokia.org/](http://www.jolokia.org/)），它通过
    HTTP 暴露 JMX 对象。所以，如果你不打算编写自己的监控程序，还有其他值得探索的选项。
- en: Role-based security
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于角色的安全
- en: In JBoss 7, a logged-in administrator has unlimited power over every configuration
    aspect of a running server. This could be a problem in a production environment
    when multiple users have access to the server to do different tasks. One user
    could only be interested in deploying new applications, another should only be
    able to restart the server, and there could be one who should not be able to change
    anything (for example, a monitoring agent sending data about the execution of
    an application).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JBoss 7 中，登录管理员对运行服务器每个配置方面的控制权是无限制的。在多用户可以访问服务器执行不同任务的生产环境中，这可能会成为一个问题。一个用户可能只对部署新应用程序感兴趣，另一个可能只能重启服务器，还可能有一个用户不应该能够更改任何内容（例如，发送应用程序执行数据的监控代理）。
- en: 'To support these kinds of requirements, WildFly brings two access control strategies:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这些类型的请求，WildFly 提供了两种访问控制策略：
- en: Simple, which is the all-or-nothing approach known from JBoss AS 7 and EAP in
    versions earlier than 6.2 (every authenticated administrator has full access to
    the application server). This is the default strategy.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单来说，这是从 JBoss AS 7 和 EAP 6.2 版本之前的所有或无的访问方法（每个经过身份验证的管理员都有对应用程序服务器的完全访问权限）。这是默认策略。
- en: Role based access control (RBAC), which allows you to assign administrative
    users to specific management roles.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC），允许你将管理员用户分配到特定的管理角色。
- en: 'Let''s navigate to `http://localhost:8080/console` and log in with our administrator
    password. The upper menu contains a tab named **Administration**. This is used
    to configure the access control mechanism. Once you click on it (you should see
    a message box informing you that RBAC is not yet enabled), we will see three subtabs:
    **Users**, **Groups**, and **Roles**. Let''s take a closer look at each of these
    objects.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到 `http://localhost:8080/console` 并使用我们的管理员密码登录。顶部菜单包含一个名为**管理**的标签页。这用于配置访问控制机制。一旦你点击它（你应该看到一个消息框告诉你
    RBAC 尚未启用），我们将看到三个子标签页：**用户**、**组**和**角色**。让我们逐一查看这些对象。
- en: Users are defined using the `add-user.bat` (`.sh`) scripts in the `JBOSS_HOME/bin`
    directory. We have already defined one before the first time we accessed the JBoss
    console. The created user, however, requires some additional information in order
    to determine his or her security level. The easiest way to achieve this is to
    organize them into groups. The assignment can be done via the user creation scripts
    or by the `mgmt-groups.properties` files in the WildFly's configuration directory.
    Another way to do this is to define a security realm connected to an external
    source (an LDAP server for instance). We will talk more about security realms
    in the next chapter. For now, you can create a user assigned to a group named
    `TestGroup`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 用户使用`JBOSS_HOME/bin`目录中的`add-user.bat`（`.sh`）脚本定义。我们已经在第一次访问JBoss控制台之前定义了一个。然而，创建的用户需要一些额外的信息来确定其安全级别。最简单的方法是将它们组织到组中。可以通过用户创建脚本或通过WildFly配置目录中的`mgmt-groups.properties`文件来完成分配。另一种方法是定义一个连接到外部源（例如LDAP服务器）的安全领域。我们将在下一章中更多地讨论安全领域。现在，您可以创建一个分配给名为`TestGroup`的组的用户。
- en: A group is mapped to a set of security roles to provide specific permissions.
    For example, we can create user groups for developers and junior administrators
    and map them to a subset of desired roles. A user can be part of multiple groups,
    so there is also a possibility to exclude a role for a specific group so that
    no other group could grant it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组映射到一组安全角色以提供特定权限。例如，我们可以为开发人员和初级管理员创建用户组，并将它们映射到所需角色的子集。用户可以是多个组的成员，因此也有可能为特定组排除一个角色，这样其他组就不能授予它。
- en: 'Finally, we have roles that cover multiple areas of the server''s functionality.
    Every role has a set of permissions assigned and some of them are additionally
    constrained (for instance, to allow you to configure modifications in only specific
    subsystems such as data sources). A list of built-in roles is available in the
    following table:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有涵盖服务器功能多个领域的角色。每个角色都分配了一组权限，其中一些权限有额外的限制（例如，允许您仅配置特定子系统（如数据源）的修改）。以下表格中提供了内置角色的列表：
- en: '| Role | Permissions | Sensitive data (passwords and auditing) |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 角色 | 权限 | 敏感数据（密码和审计） |'
- en: '| --- | --- | --- |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Monitor` | Read-only access to configuration and runtime state. | No access.
    |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `监控员` | 只读访问配置和运行时状态。 | 无访问权限。 |'
- en: '| `Operator` | All permissions of **Monitor**. This role can restart the server,
    control JMS destination, and database connection pools. It cannot modify the configuration.
    | No access. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `操作员` | 所有**监控**权限。此角色可以重启服务器，控制JMS目的地和数据库连接池。不能修改配置。 | 无访问权限。 |'
- en: '| `Maintainer` | All permissions of **Operator**. This role can modify the
    configuration (including deploying new applications). | No access. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `维护员` | 所有**操作员**权限。此角色可以修改配置（包括部署新应用程序）。 | 无访问权限。 |'
- en: '| `Deployer` | All permissions of **Maintainer**, but with restrictions on
    deploying new applications (cannot change the configuration of the server). |
    No access. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `部署者` | 所有**维护员**权限，但限制部署新应用程序（不能更改服务器的配置）。 | 无访问权限。 |'
- en: '| `Administrator` | All permissions of **Maintainer**. | Read/write access.
    No access to the audit system. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `管理员` | 所有**维护员**权限。 | 读写访问。无审计系统访问权限。 |'
- en: '| `Auditor` | All permissions of **Monitor**. | Read-only access. Full access
    to the auditing system. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `审计员` | 所有**监控**权限。 | 只读访问。完全访问审计系统。 |'
- en: '| `Super User` | Everything is permitted. The administrator known from JBoss
    AS 7 and the simple strategy in WildFly. Also, this is the default role for a
    local user (connecting from a localhost). | Full access. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `超级用户` | 允许一切。从JBoss AS 7中了解的管理员以及WildFly中的简单策略。这也是本地用户（从localhost连接）的默认角色。
    | 完全访问权限。 |'
- en: Besides relying on the group-role mapping mechanism, you have another option
    to assign users to roles. You can use the **Administration/Users** screen in the
    admin console to directly assign a user to a role (be sure to select **Include**
    as the type). Assign the `SuperUser` role now to your current user using the **Add**
    button. Additionally, you can use **Administration/Groups** to add our newly created
    `TestGroup` to, for instance, the `Monitor` role.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 除了依赖组-角色映射机制外，您还有另一种将用户分配到角色的方法。您可以使用管理控制台中的**管理/用户**屏幕直接将用户分配给角色（请确保选择**包含**作为类型）。现在使用**添加**按钮将`SuperUser`角色分配给当前用户。此外，您还可以使用**管理/组**将新创建的`TestGroup`添加到，例如`监控员`角色。
- en: 'Our configuration is now in place; try and check it out. To switch to the RBAC
    strategy, we will need to issue the following command using the CLI interface:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的配置已经就绪；试着检查一下。要切换到基于角色的访问控制（RBAC）策略，我们需要使用CLI界面执行以下命令：
- en: '[PRE51]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Reload the server and log in to the web console again using the account you
    designed as `SuperUser`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载服务器，并使用您设计的`SuperUser`账户再次登录到Web控制台。
- en: Note
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We are testing the web console, but the RBAC mechanism also works for the CLI.
    Note that the CLI will allow you to access it from `localhost` as long as you
    have the `$local` user allowed in your security realm:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在测试Web控制台，但RBAC机制也适用于CLI。请注意，只要您的安全域中允许了`$local`用户，CLI将允许您从`localhost`访问它：
- en: '[PRE52]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: If you wish to disable it, simply remove this line.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想禁用它，只需删除这一行。
- en: 'If you are wondering what your current role is, you can click on **Username**
    in the upper-right corner of the screen. You should see a bit of information about
    the currently logged-in administrator in the following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道您的当前角色是什么，您可以点击屏幕右上角的**用户名**。在以下屏幕截图中，您应该会看到有关当前登录管理员的少量信息：
- en: '![Role-based security](img/00078.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![基于角色的安全](img/00078.jpeg)'
- en: In the preceding screenshot, we can see that the user root is logged in as a
    `SuperUser` role. Besides having the possibility to do everything with the application
    server, the `SuperUser` role has one additional feature. It can impersonate other
    roles using **Run as…**, which can be useful if you want to check what are the
    limitations of another role. Feel free to check them out right now. For instance,
    as a `Monitor`, you should not be able to alter any settings in the admin console.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到用户root以`SuperUser`角色登录。除了可以对应用服务器做任何事情外，`SuperUser`角色还有一个额外功能。它可以使用**运行为…**来模仿其他角色，这在您想检查另一个角色的限制时可能很有用。现在您可以随意检查它们。例如，作为`Monitor`角色，您不应该能够在管理控制台中更改任何设置。
- en: You can also relogin with the user you've created earlier, which is assigned
    to `TestGroup`. It should have the **Monitor** role shown in the upper-right corner
    of the screen.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用您之前创建的用户重新登录，该用户被分配到`TestGroup`。它应该在屏幕右上角显示**Monitor**角色。
- en: Auditing administrative operations
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审计管理操作
- en: WildFly introduces an audit-log feature that allows the administrators to track
    the configuration changes made on the server. The feature is initially disabled
    but can be useful in some scenarios, so let's take a short look at it.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly引入了一个审计日志功能，允许管理员跟踪在服务器上所做的配置更改。该功能最初是禁用的，但在某些场景下可能很有用，所以让我们简要了解一下。
- en: 'The audit-log configuration consists of three parts:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 审计日志配置由三部分组成：
- en: '**Formatter**: This formats the log output. By default, it''s based on JSON.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化器**: 这用于格式化日志输出。默认情况下，它基于JSON格式。'
- en: '**Handler**: This handles the output. By default, it is a file-based handler,
    but it is possible to use a TCP or UDP to send the logs to a remote server.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理器**: 这处理输出。默认情况下，它是一个基于文件的处理器，但也可以使用TCP或UDP将日志发送到远程服务器。'
- en: '**Logger**: This controls the login process.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录器**: 这控制着登录过程。'
- en: Detailed configuration can be found in the official WildFly documentation at
    [https://docs.jboss.org/author/display/WFLY8/Audit+logging](https://docs.jboss.org/author/display/WFLY8/Audit+logging).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 详细配置可以在官方WildFly文档中找到，链接为[https://docs.jboss.org/author/display/WFLY8/Audit+logging](https://docs.jboss.org/author/display/WFLY8/Audit+logging)。
- en: 'The audit log is disabled by default. To enable it, we must issue the following
    CLI command:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，审计日志是禁用的。要启用它，我们必须执行以下CLI命令：
- en: '[PRE53]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Now you can try to do any administrative action using the web console (for instance,
    disabling a data source). After this, you should find a trace of it in `JBOSS_HOME/standalone/data/audit-log.log`
    (along with information about switching the audit logging on).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用Web控制台尝试执行任何管理操作（例如，禁用数据源）。之后，您应该在`JBOSS_HOME/standalone/data/audit-log.log`中找到它的痕迹（以及关于开启审计日志的信息）。
- en: Patching a running instance
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 补丁正在运行实例
- en: The newest version of the JBoss Application Server comes with a patching utility
    that allows you to automatically update parts of the server with newer versions.
    Currently, the patching is done using a CLI. Any patch can be reverted, and the
    administrator is able to track the history of patches.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss应用服务器的最新版本附带了一个补丁工具，允许您自动使用新版本更新服务器的一部分。目前，补丁是通过命令行界面（CLI）进行的。任何补丁都可以撤销，管理员能够追踪补丁的历史记录。
- en: A patch can be applied by simply calling the `patch apply <file path> (without
    -)` command. A complementary command is `patch rollback --patch-id = id`, a patch-rollback
    command. To obtain information about the installed patches, simply call `patch
    info`. Patches are distributed by teams responsible for specific WildFly subsystems.
    Visit their websites if you need a patch for a specific module.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过简单地调用`patch apply <文件路径> (不使用-)`命令来应用补丁。一个互补的命令是`patch rollback --patch-id
    = id`，即补丁回滚命令。要获取有关已安装补丁的信息，只需调用`patch info`。补丁由负责特定WildFly子系统的团队分发。如果您需要特定模块的补丁，请访问他们的网站。
- en: Summary
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the application server's management API from a developer's
    perspective, which will enable you to write your own scripts to monitor the health
    of your application server.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从开发者的角度介绍了应用服务器的管理API，这将使您能够编写自己的脚本来监控应用服务器的健康状况。
- en: The most effective tool for monitoring the application server is the command-line
    interface. However, if you want to spice it up with some typical programming logic,
    you can resort to some other alternatives such as scripting languages or the raw
    management API.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 监控应用服务器的最有效工具是命令行界面。然而，如果您想通过一些典型的编程逻辑来增加趣味性，您可以选择其他一些替代方案，例如脚本语言或原始的管理API。
- en: We also explored some of the new, advanced features that were introduced with
    WildFly. You now know how to restrict access to your management console and how
    to audit the changes done to the configuration.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了WildFly引入的一些新、高级功能。您现在知道如何限制对管理控制台的访问以及如何审计对配置所做的更改。
- en: We have now completed our review of management. In the next chapter, we are
    going to discuss clustering, which is the environment where critical applications
    are deployed.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了对管理的回顾。在下一章中，我们将讨论集群，这是关键应用程序部署的环境。
