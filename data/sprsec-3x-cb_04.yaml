- en: Chapter 4. Spring Security with Grails
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。Spring Security with Grails
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security authentication with Groovy Grails setup
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy Grails设置Spring Security身份验证
- en: Spring Security with Grails to Secure Grails controller
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Grails保护Grails控制器的Spring Security
- en: Spring Security with Groovy Grails logout scenario
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy Grails注销场景的Spring Security
- en: Spring Security with Groovy Grails Basic authentication
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy Grails基本身份验证的Spring Security
- en: Spring Security with Groovy Grails Digest authentication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy Grails摘要身份验证的Spring Security
- en: Spring Security with Groovy Grails multiple authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security with Groovy Grails多重身份验证
- en: Spring Security with Groovy Grails LDAP authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy Grails LDAP身份验证的Spring Security
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Grails is a plugin based framework and all it needs to work is a few intuitive
    commands on the command prompt.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Grails是一个基于插件的框架，它只需要在命令提示符上输入一些直观的命令即可工作。
- en: In this chapter, we shall see how easily we can integrate Spring Security with
    Groovy on Grails with less coding.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何轻松地将Spring Security与Groovy on Grails集成，编码量较少。
- en: Spring Security authentication with Groovy Grails setup
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Groovy Grails设置Spring Security身份验证
- en: In this recipe we shall first set up Groovy and Grails. We shall then show how
    to integrate Spring Security with Grails.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们首先将设置Groovy和Grails。然后我们将展示如何将Spring Security与Grails集成。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Get Groovy installed from [http://groovy.codehaus.org/Download](http://groovy.codehaus.org/Download)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://groovy.codehaus.org/Download](http://groovy.codehaus.org/Download)获取Groovy安装
- en: Download Grails 2.3 from [http://groovy.codehaus.org/Download](http://groovy.codehaus.org/Download)
    and unzip it to a folder
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://groovy.codehaus.org/Download](http://groovy.codehaus.org/Download)下载并解压Grails
    2.3到一个文件夹
- en: 'Set environment variable: `GRAILS_HOME`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境变量：`GRAILS_HOME`
- en: Check for `Groovy_HOME`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`Groovy_HOME`
- en: Check Grails installation by typing `grails-version`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过输入`grails-version`来检查Grails安装
- en: How to do it…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps are taken to integrate Spring Security with Groovy Grails:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于将Spring Security与Groovy Grails集成：
- en: 'Create a directory: `Grails Project`.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录：`Grails项目`。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create a controller which will be available inside the controller
    package.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个控制器，该控制器将在控制器包内可用。
- en: You can open the generated controller file and view it. It will have package
    name `myfirstapp` which Grails has auto generated.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以打开生成的控制器文件并查看它。它将具有Grails自动生成的包名称`myfirstapp`。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Update the generated controller file.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新生成的控制器文件。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Test the Grails Setup by accessing this URL `http://localhost:8080/myfirstapp/`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问此URL`http://localhost:8080/myfirstapp/`来测试Grails设置。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Download the security jars for Grails.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Grails下载安全jar文件。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the installer is not supported in your version of Grails you can add a dependency
    to `BuildConfig.groovy` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装程序不支持您的Grails版本，您可以向`BuildConfig.groovy`文件添加依赖项：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Update the `Bootstrap.groovy` file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Bootstrap.groovy`文件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding file we have populated users with username as `anjana` and
    password as `anjana123`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的文件中，我们已经用用户名`anjana`和密码`anjana123`填充了用户。
- en: Just by doing this we can authenticate the user.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只需这样做，我们就可以验证用户。
- en: You can see that we have not updated any XML file. We have just installed the
    plugin and have modified the file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们没有更新任何XML文件。我们只是安装了插件并修改了文件。
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let''s see what kind of output we get when we run Grails: `grails run-app`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看运行Grails时会得到什么样的输出：`grails run-app`。
- en: '![How it works…](img/7525OS_04_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_04_01.jpg)'
- en: 'Update the `Messages.properties` file in the `i18n` folder:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`i18n`文件夹中的`Messages.properties`文件：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Click on the **LoginController** link at `http://localhost:8080/myfirstapp/login/auth`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 单击`http://localhost:8080/myfirstapp/login/auth`上的**LoginController**链接。
- en: 'You should be able to see the login screen which is generated by the Grails
    framework when we installed the security plugin. The pages are available in the
    views folder. Now you can login with the username and password: `anjana`, `anjana123`.
    You will be redirected to the Grails home page. On failure of authentication you
    will get an authentication failure message.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到登录屏幕，该屏幕是在安装安全插件时由Grails框架生成的。页面位于视图文件夹中。现在您可以使用用户名和密码`anjana`，`anjana123`登录。您将被重定向到Grails主页。身份验证失败时，您将收到身份验证失败消息。
- en: When you click on the **LogoutController** link, you will be logged out. When
    you again click on the controller you will be asked to log in again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击**LogoutController**链接时，您将注销。当您再次单击控制器时，将要求您重新登录。
- en: 'Below is the workflow of the application:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是应用程序的工作流程：
- en: 'This is the Grails login screen—on the clicking on **Login** button, after
    entering the username and password, this submits the credentials to the Spring
    Security framework:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Grails登录屏幕——单击**登录**按钮，在输入用户名和密码后，将提交凭据到Spring Security框架：
- en: '![How it works…](img/7525OS_04_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_04_02.jpg)'
- en: On failure of authentication, the user is redirected to the login screen with
    **Authentication failed** message.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在身份验证失败时，用户将被重定向到登录屏幕，并显示**身份验证失败**消息。
- en: '![How it works…](img/7525OS_04_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_04_03.jpg)'
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Grails to Secure Grails controller* recipe
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Grails保护Grails控制器*食谱'
- en: The *Spring Security with Groovy Grails logout scenario* recipe
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails注销场景*食谱'
- en: The *Spring Security with Groovy Grails Basic authentication* recipe
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails基本身份验证*食谱'
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails摘要身份验证*食谱'
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails多级身份验证*食谱'
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails LDAP身份验证*食谱'
- en: Spring Security with Grails to secure Grails controller
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grails的Spring Security来保护Grails控制器
- en: Let's apply Spring Security to Grails controller. The scenario is that the user
    will access the Grails application and will be provided with a link to log in.
    On successful authentication, the user will be provided with links which he can
    access. The links are visible only to the logged in user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将Spring Security应用于Grails控制器。场景是用户将访问Grails应用程序，并将提供一个登录链接。成功验证后，用户将提供可以访问的链接。这些链接只对已登录用户可见。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For demonstration purposes we will create the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我们将创建以下内容：
- en: 'A simple Grails controller: `myfirstapp`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的Grails控制器：`myfirstapp`
- en: A `MyFirstController` controller which will be secured with Spring Security
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将使用Spring Security保护的`MyFirstController`控制器
- en: Modify `index.gsp`
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`index.gsp`
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The following steps are taken for integrating Spring Security with Grails to
    secure Grails Controller:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于将Spring Security与Grails集成以保护Grails控制器：
- en: Go to `myfirstapp\grails-app\views`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`myfirstapp\grails-app\views`。
- en: You will see the `index.gsp` file, rename it to `index.gsp_backup`. I have copied
    the styles from `index.gsp_backup`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到`index.gsp`文件，将其重命名为`index.gsp_backup`。我已经从`index.gsp_backup`中复制了样式。
- en: 'Create a new `index.gsp` file, edit the file as shown:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`index.gsp`文件，编辑文件如下：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Access the URL: `http://localhost:8080/myfirstapp/`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/myfirstapp/`。
- en: '![How it works…](img/7525OS_04_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_04_04.jpg)'
- en: Now click on the **Spring Login** link, you will be redirected to a login page.
    Spring Security handles the authentication mechanism, where on successful login,
    the user will be provided with a link to access the secured controller.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击**Spring登录**链接，您将被重定向到登录页面。Spring Security处理身份验证机制，在成功登录后，用户将提供一个链接以访问受保护的控制器。
- en: '![How it works…](img/7525OS_04_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_04_05.jpg)'
- en: The links are provided in the `index.gsp` page which will show and hide links
    based on the logged in or logged out status. This is provided using the security
    tags in the `index.gsp` pages.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 链接在`index.gsp`页面中提供，根据登录或注销状态显示和隐藏链接。这是使用`index.gsp`页面中的安全标签提供的。
- en: Click on the link **Secured Controller**. You should be able to see the output
    message of the secured controller on the browser.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**受保护的控制器**链接。您应该能够在浏览器上看到受保护控制器的输出消息。
- en: '![How it works…](img/7525OS_04_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_04_06.jpg)'
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Groovy Grails logout scenario* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails注销场景的Spring Security*配方'
- en: The *Spring Security with Groovy Grails Basic authentication* recipe
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails基本身份验证的Spring Security*配方'
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails摘要身份验证的Spring Security*配方'
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails多级身份验证的Spring Security*配方'
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails LDAP身份验证的Spring Security*配方'
- en: Spring Security authentication with Groovy Grails logout scenario
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Groovy Grails Spring Security身份验证注销场景
- en: In this recipe, let's look at the logout implementation with Spring Security
    in the Grails application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，让我们看看在Grails应用程序中使用Spring Security的注销实现。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: When we install the Spring Security plugin with Grails, the `Login Controller`
    and `Logout Controller` class will be created automatically. `Login Controller`
    will handle the authentication. The `Logout Controller` will handle the logout
    process, it will redirect the user to the common page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Grails中安装Spring Security插件时，`Login Controller`和`Logout Controller`类将自动创建。`Login
    Controller`将处理身份验证。`Logout Controller`将处理注销过程，它将重定向用户到公共页面。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The following steps are taken to implement the logout action in the Groovy
    on Grails application:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于在Groovy on Grails应用程序中实现注销操作：
- en: 'In the `index.jsp` file we add the following:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.jsp`文件中，我们添加以下内容：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Logout Controller` class to redirect the request to `j_spring_security`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Logout Controller`类将请求重定向到`j_spring_security`：'
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Click on the logout link. The user is redirected the home page. `SpringSecurityUtils.securityConfig.logout.filterProcessesUrl`
    is set to `/j_spring_security_logout` by default. So when the user clicks on logout,
    they are redirected to `/j_spring_security_logout action`. This will logout the
    user from the accessible page and the user has to again login to the Grails application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 单击注销链接。用户将被重定向到主页。`SpringSecurityUtils.securityConfig.logout.filterProcessesUrl`默认设置为`/j_spring_security_logout`。因此，当用户单击注销时，他们将被重定向到`/j_spring_security_logout`操作。这将注销用户并且用户必须再次登录到Grails应用程序。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Groovy Grails Basic authentication* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails基本身份验证的Spring Security*配方'
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails摘要身份验证的Spring Security*配方'
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails多级身份验证的Spring Security*配方'
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Groovy Grails LDAP身份验证的Spring Security*配方'
- en: Spring Security with Groovy Grails Basic authentication
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Groovy Grails基本身份验证的Spring Security
- en: In this recipe, we shall demonstrate Security with Groovy on Grails using the
    Basic authentication mechanism.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将演示使用基本身份验证机制在Grails上使用Groovy的安全性。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to create a Grails application: `grailsbasicauthexample`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要创建一个Grails应用程序：`grailsbasicauthexample`
- en: Install the Spring Security plugin to the new application
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Spring Security插件安装到新应用程序中
- en: Create `User` and `Role` classes
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`User`和`Role`类
- en: Edit the `Config.groovy` file
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`Config.groovy`文件
- en: Edit `BootStrap.groovy` file
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`BootStrap.groovy`文件
- en: 'Create a controller: `GreetingsController`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个控制器：`GreetingsController`
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The following steps are taken for demonstrating Basic authentication with Groovy
    on Grails using Spring Security:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于演示在Groovy on Grails中使用Spring Security进行基本身份验证：
- en: 'Run the following commands in the command prompt:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中运行以下命令：
- en: '`Grails create-app grailsbasicauthexample`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grails create-app grailsbasicauthexample`'
- en: '`cd grailsbasicauthexample`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd grailsbasicauthexample`'
- en: '`grails install-plugin spring-security-core`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails install-plugin spring-security-core`'
- en: '`grails s2-quickstart com.packt SecuredUser SecuredRole`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails s2-quickstart com.packt SecuredUser SecuredRole`'
- en: 'Edit the `config.groovy` file and set the following values:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `config.groovy` 文件并设置以下值：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Edit the `Bootstrap.groovy` file:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `Bootstrap.groovy` 文件：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the command `$grails create-controller Greetings` and add annotations:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令 `$grails create-controller Greetings` 并添加注解：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Access the URL: `http://localhost:8080/grailsbasicauthexample/`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/grailsbasicauthexample/`。
- en: 'Click on the **Greetings Controller** link. This is a secured link which has
    been restricted using Spring Security. When the user clicks on the link, the Basic
    authentication mechanism triggers a login dialog box to be filled. The user has
    to enter username/password: `anjana`/`anjana123`, then on authentication, the
    user gets redirected to an authorized page, that is, you will be prompted with
    the **Greetings Controller** link.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Greetings Controller** 链接。这是一个受Spring Security限制的安全链接。当用户点击链接时，基本认证机制会触发一个登录对话框。用户必须输入用户名/密码：`anjana`/`anjana123`，然后进行身份验证，用户将被重定向到一个授权页面，也就是，您将会看到
    **Greetings Controller** 链接。
- en: '![How it works…](img/7525OS_04_07.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_07.jpg)'
- en: On successful authentication, the user is provided access to the greetings controller.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 成功认证后，用户将获得对问候控制器的访问权限。
- en: See also
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails Digest authentication* 食谱'
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails multilevel authentication* 食谱'
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails LDAP authentication* 食谱'
- en: Spring Security with Groovy Grails Digest authentication
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security with Groovy Grails Digest authentication
- en: In this recipe, let's look at the Digest authentication mechanism in which the
    password will be hashed. Let's integrate this with the Grails application and
    see how it does authentication and authorization with it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，让我们看看摘要认证机制，其中密码将被哈希。让我们将其与Grails应用程序集成，并查看它如何进行身份验证和授权。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to create a Grails application: `grailsdigestauthexample`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要创建一个Grails应用程序：`grailsdigestauthexample`
- en: Install Spring Security plugin to the new application
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Spring Security插件安装到新应用程序中
- en: Create `User` and `Role` classes
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `User` 和 `Role` 类
- en: Edit the `Config.groovy` file
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑 `Config.groovy` 文件
- en: Edit the `BootStrap.groovy` file
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑 `BootStrap.groovy` 文件
- en: 'Create a controller: `SecuredPackt`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个控制器：`SecuredPackt`
- en: How to do it…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps are taken for demonstrating the implementation of Digest
    authentication with Groovy on Grails using Spring Security:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于演示使用Spring Security在Grails上进行摘要认证：
- en: 'In the command prompt run the following commands:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中运行以下命令：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following to the `config.groovy` file and edit the `Bootstrap.groovy`
    file:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `config.groovy` 文件并编辑 `Bootstrap.groovy` 文件：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Edit the `SecuredPacktController` file and add the annotations:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `SecuredPacktController` 文件并添加注解：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Grails with Spring Security plugin requires a username to be passed as a salt
    value.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Grails与Spring Security插件需要传递用户名作为盐值。
- en: We need to do a little tweaking with the generated `SecuredUser.groovy` file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对生成的 `SecuredUser.groovy` 文件进行一些调整。
- en: 'Update the `SecuredUser.groovy` file, as shown in the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `SecuredUser.groovy` 文件，如下所示：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Display the logged in user:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 显示已登录用户：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the user accesses the URL `http://localhost:8080/grailsdigestauthexample/`,
    Spring Security will prompt the user with a login dialog box asking for the username
    and password. When the user enters the username and password, Spring Security
    authenticates it and redirects the user to the secured page.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户访问URL `http://localhost:8080/grailsdigestauthexample/` 时，Spring Security将提示用户一个登录对话框，要求输入用户名和密码。当用户输入用户名和密码时，Spring
    Security对其进行身份验证，并将用户重定向到受保护的页面。
- en: 'The work flow of the application is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的工作流程如下：
- en: '`http://localhost:8080/grailsdigestauthexample/`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/grailsdigestauthexample/`'
- en: 'The following screenshot depicts the login dialog box that pops up when trying
    to access the secured resource:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图描述了尝试访问受保护资源时弹出的登录对话框：
- en: '![How it works...](img/7525OS_04_08.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_08.jpg)'
- en: It works in a similar way to Basic authentication.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式类似于基本认证。
- en: 'On successful login, you will get a logout link. The user has now got access
    to the secured controller:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，您将获得一个注销链接。用户现在已经可以访问受保护的控制器：
- en: '![How it works...](img/7525OS_04_09.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_09.jpg)'
- en: 'Displaying the logged in user:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 显示已登录用户：
- en: '![How it works...](img/7525OS_04_10.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_10.jpg)'
- en: See also
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails multilevel authentication* 食谱'
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Groovy Grails LDAP authentication* 食谱'
- en: Spring Security with Groovy Grails multiple authentication
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security with Groovy Grails multiple authentication
- en: So far we have seen single-role authentication. Let's see a demonstration of
    multiple roles. The recipe uses another plugin called `spring-security-ui`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了单角色认证。让我们看看多角色的演示。该食谱使用了另一个名为 `spring-security-ui` 的插件。
- en: It has many controllers which provide user management screens for the user.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 它有许多控制器，为用户提供用户管理屏幕。
- en: This saves developer time in coding these screens. It also provides a search
    option with autocomplete.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以节省开发人员编写这些屏幕的时间。它还提供了带自动完成的搜索选项。
- en: The `spring-security-ui` plugin also requires additional plugins to be installed
    which will be prompted at the console. There is an alternative to installing the
    plugin, that is, you can give the dependency directly in the `BuildConfig.groovy`
    file.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-security-ui` 插件还需要安装其他插件，将在控制台提示。还有一种安装插件的替代方法，即可以直接在 `BuildConfig.groovy`
    文件中给出依赖项。'
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to do the following for achieving a multilevel authentication:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行以下操作以实现多级身份验证：
- en: Create a Grails app
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Grails应用
- en: Install the `spring-security-core` plugin
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`spring-security-core`插件
- en: Install the `spring-security-ui` plugin
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`spring-security-ui`插件
- en: Use the `quickstart` command to create the `Role` and `User` domain classes
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`quickstart`命令创建`Role`和`User`领域类
- en: Create the `Sample` controller
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`Sample`控制器
- en: Edit the `BootStrap.groovy` file
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`BootStrap.groovy`文件
- en: Edit the `SampleController` class for roles
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`SampleController`类以添加角色
- en: Update the `.gsp` files
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`.gsp`文件
- en: How to do it…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps are taken for implementing multiple authentication with
    Groovy on Grails and Spring Security:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 实施多重身份验证的以下步骤使用Groovy on Grails和Spring Security：
- en: 'Go to the Grails workspace and run the following commands:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Grails工作区并运行以下命令：
- en: '`grails create-app multilevelroledemo`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails create-app multilevelroledemo`'
- en: '`cd multilevelroledemo`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd multilevelroledemo`'
- en: '`grails install-plugin spring-security-core`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails install-plugin spring-security-core`'
- en: '`grails install-plugin spring-security-ui`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`grails install-plugin spring-security-ui`命令安装插件
- en: '`grails s2-quickstart com.packt.security SecuredUser SecuredRole`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`grails s2-quickstart com.packt.security SecuredUser SecuredRole`命令
- en: '`grails create-controller Sample`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails create-controller Sample`'
- en: 'Edit the `SampleController` file:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`SampleController`文件：
- en: '[PRE20]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Edit the `BootStrap.groovy` file. I have added multiple roles. These roles
    and users will be created from the domain groovy files that are generated:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`BootStrap.groovy`文件。我已添加了多个角色。这些角色和用户将从生成的领域groovy文件中创建：
- en: '[PRE21]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Modify the `.gsp` files. Add an `index.gsp` file inside `views/sample`:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`.gsp`文件。在`views/sample`中添加一个`index.gsp`文件：
- en: '[PRE22]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the `SecurityConfig.groovy` file inside the `config` folder:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config`文件夹中添加`SecurityConfig.groovy`文件：
- en: '[PRE23]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's see how it works. Also we get to see the controllers provided by `spring-security-ui`
    and its functions.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的。我们还将看到`spring-security-ui`提供的控制器及其功能。
- en: 'We have three users here with different roles. They are created in the `Bootstrap.groovy`
    file using the domain classes:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里有三个具有不同角色的用户。它们是在`Bootstrap.groovy`文件中使用领域类创建的：
- en: '`anjana`/`anjana123` as `ROLE_USER`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anjana`/`anjana123` 作为 `ROLE_USER`'
- en: '`raghu`/`raghu123` as `ROLE_ADMIN`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raghu`/`raghu123` 作为 `ROLE_ADMIN`'
- en: '`packt`/`packt123` as `ROLE_SUPERADMIN`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packt`/`packt123` 作为 `ROLE_SUPERADMIN`'
- en: 'Access the URL: `http://localhost:8080/multilevelroledemo/`.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/multilevelroledemo/`。
- en: You will see the Grails home page with the list of controllers.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到Grails主页以及控制器列表。
- en: 'Click on the **spring.security.ui.usercontroller** link. This controller belongs
    to the `spring-security-ui` plugin. This controller provides a user management
    screen. This controller provides the search functionality for the user. It''s
    a wonderful UI, it has even got an autocomplete option with search filters. You
    can go to the link:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**spring.security.ui.usercontroller**链接。该控制器属于`spring-security-ui`插件。该控制器提供了用户管理屏幕。该控制器为用户提供了搜索功能。这是一个很棒的UI，它甚至具有带有搜索过滤器的自动完成选项。您可以转到以下链接：
- en: '`http://localhost:8080/multilevelroledemo/user/search`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/multilevelroledemo/user/search`'
- en: 'The following screenshot shows the Spring user management console where you
    can see an option to search users:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了Spring用户管理控制台，您可以在其中看到搜索用户的选项：
- en: '![How it works…](img/7525OS_04_11.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_11.jpg)'
- en: 'Let''s look at the search result, as shown in the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下搜索结果，如下截图所示：
- en: '![How it works…](img/7525OS_04_12.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_12.jpg)'
- en: 'Let''s now check the role controller provided in the `spring-security-ui` plugin.
    This controller gives an option to search for roles and also provides roles with
    user mapping. It provides an option to update the roles as well:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查`spring-security-ui`插件中提供的角色控制器。该控制器提供了搜索角色的选项，并提供了角色与用户的映射。它还提供了更新角色的选项：
- en: '`http://localhost:8080/multilevelroledemo/role/roleSearch`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/multilevelroledemo/role/roleSearch`'
- en: 'You can also create a user, the option is available with menus. Access the
    following link to create a user:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建用户，该选项可在菜单中找到。访问以下链接创建用户：
- en: '`http://localhost:8080/multilevelroledemo/user/create`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/multilevelroledemo/user/create`'
- en: 'Let''s look at the sample controller that we have created for the application:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们为应用程序创建的示例控制器：
- en: '![How it works…](img/7525OS_04_13.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_13.jpg)'
- en: 'The following URL shows the sample controller mappings with various roles.
    This is also provided with the `spring-security-ui` plugin:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下URL显示了具有各种角色的示例控制器映射。这也是`spring-security-ui`插件提供的：
- en: '`http://localhost:8080/multilevelroledemo/securityInfo/mappings`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/multilevelroledemo/securityInfo/mappings`'
- en: '![How it works…](img/7525OS_04_14.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_14.jpg)'
- en: Let's access the sample controller at `http://localhost:8080/multilevelroledemo/sample/index`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们访问`http://localhost:8080/multilevelroledemo/sample/index`的示例控制器。
- en: It displays the three roles. Click on the links and you will be prompted to
    log in.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了三个角色。单击链接，您将被提示登录。
- en: Log in with the appropriate username and password, and your role information
    will be displayed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适当的用户名和密码登录，您的角色信息将被显示。
- en: The `spring-security-ui` plugin itself provides an option to log in and log
    out which is applicable throughout the application.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-security-ui`插件本身提供了登录和注销的选项，适用于整个应用程序。'
- en: We can only use annotations, that is, `@Secured` annotations to authenticate
    and authorize the user for certain actions.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能使用注解，即`@Secured`注解来对用户进行身份验证和授权以执行某些操作。
- en: We can also omit the creation of users in `Bootstrap.groovy`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以省略在`Bootstrap.groovy`中创建用户。
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Groovy Grails LDAP身份验证的Spring安全*配方'
- en: Spring Security with Groovy Grails LDAP authentication
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Groovy Grails LDAP身份验证的Spring安全
- en: Let's further explore the `spring-security` plugin with Groovy on Grails with
    LDAP authentication. In this recipe, I have used **Apache DS** with Apache Studio
    installed on my machine. I would be using this for authentication.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步探索使用LDAP身份验证的Groovy on Grails上的`spring-security`插件。在这个示例中，我在我的机器上安装了**Apache
    DS**和Apache Studio。我将使用这个进行身份验证。
- en: 'Burt Beckwith has written very nice blogs on it. You can view them at: [http://burtbeckwith.com/blog/](http://burtbeckwith.com/blog/)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Burt Beckwith在此方面写了非常好的博客。您可以在以下网址查看：[http://burtbeckwith.com/blog/](http://burtbeckwith.com/blog/)
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a Grails app: `grailssecurityldapexamplex`.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Grails应用程序：`grailssecurityldapexamplex`。
- en: 'Let''s create a controller: `SampleController`.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们创建一个控制器：`SampleController`。
- en: 'Install the following plugins:'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装以下插件：
- en: '`spring-security-core`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-core`'
- en: '`spring-security-ldap`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-ldap`'
- en: Edit the `Config.groovy` file.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`Config.groovy`文件。
- en: We shall display the role and user details after successful authentication.
    In this recipe we are authenticating users against the email address and password.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在成功验证后显示角色和用户详细信息。在这个示例中，我们将根据电子邮件地址和密码对用户进行身份验证。
- en: We need to provide the Apache DS details and port number in `Config.groovy`.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要在`Config.groovy`中提供Apache DS详细信息和端口号。
- en: I am using a separate partition `sevenseas`. You can create your own domain
    by adding a separate `jdmpartition`.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我正在使用一个单独的分区`sevenseas`。您可以通过添加一个单独的`jdmpartition`来创建自己的域。
- en: 'There are two kinds of roles: User and admin. The roles mapped with the users
    in Apache DS. I have created two "Organizational Units" in Apache DS:'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两种角色：用户和管理员。角色与Apache DS中的用户映射。我在Apache DS中创建了两个“组织单位”：
- en: '**people**: This will have users'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**people**：这将有用户'
- en: '**groups**: This will have roles with users mapped to it'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**groups**：这将具有映射到它的用户的角色'
- en: I am getting `username`, `role`, and `email` from the Apache DS.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我从Apache DS获取`username`，`role`和`email`。
- en: How to do it…
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps are taken for implementing `spring-security` with Grails
    to authenticate with LDAP:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 采取以下步骤来使用Grails实现`spring-security`与LDAP进行身份验证：
- en: 'Install the below commands to install plug-in:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装以下命令以安装插件：
- en: '`create-app grailssecurityldapexample`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create-app grailssecurityldapexample`'
- en: '`cd grailssecurityldapexample`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd grailssecurityldapexample`'
- en: '`grails install-plugin spring-security-core`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails install-plugin spring-security-core`'
- en: '`grails install-plugin spring-security-ldap`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails install-plugin spring-security-ldap`'
- en: '`grails create-controller Sample`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grails create-controller Sample`'
- en: 'Let''s first update the `message.properties` file for clean UI:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先更新`message.properties`文件以获得清晰的UI：
- en: '[PRE24]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Let's then configure the Apache DS properties in the `Config.groovy` file.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`Config.groovy`文件中配置Apache DS属性。
- en: 'This configuration will tell Grails to authenticate the user against their
    e-mail ID:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此配置将告诉Grails根据其电子邮件ID对用户进行身份验证：
- en: '[PRE25]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Edit the controller:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑控制器：
- en: '[PRE26]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Edit the `resource.groovy` file with Bean mapping.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`resource.groovy`文件以进行Bean映射。
- en: '[PRE27]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Replace the existing `body` tag of `index,gsp` with the following code:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`index.gsp`的现有`body`标记：
- en: '[PRE28]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create `MyUserDetails.groovy` under `src/groovy`:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/groovy`下创建`MyUserDetails.groovy`：
- en: '[PRE29]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Let's create a `ContextMapper` for LDAP.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为LDAP创建一个`ContextMapper`。
- en: 'We are getting the LDAP attributes here:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里获取LDAP属性：
- en: '[PRE30]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Execute the following command for the app:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令以启动应用程序：
- en: '[PRE31]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When the user accesses the URL: `http://localhost:8080/grailssecurityldapexample/`,
    they will see a common page with a link. In the login form enter the username
    and password. Clicking on **submit**, the Grails will submit the URL to Spring
    Security. Spring Security connects with the LDAP details provided and queries
    the LDAP with the username. On success, the user is directed to the success URL.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户访问URL：`http://localhost:8080/grailssecurityldapexample/`时，他们将看到一个带有链接的常规页面。在登录表单中输入用户名和密码。单击**提交**，Grails将URL提交给Spring
    Security。Spring Security连接提供的LDAP详细信息并查询LDAP以获取用户名。成功后，用户将被重定向到成功的URL。
- en: 'Access the URL: `http://localhost:8080/grailssecurityldapexample/`.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/grailssecurityldapexample/`。
- en: '![How it works…](img/7525OS_04_15.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_15.jpg)'
- en: 'Click on the **Spring Login** link and enter the username: `admin@test.com`
    and password: `123456`.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**Spring登录**链接，输入用户名：`admin@test.com`和密码：`123456`。
- en: '![How it works…](img/7525OS_04_16.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_16.jpg)'
- en: Click on **Logout**.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**注销**。
- en: 'Click on **Spring Login** link and enter the username: `test@test.com` and
    password: `pass`. The Grails application submits the credentials to the Spring
    Security framework which queries the LDAP and retrieves the user details and displays
    it on the secured page:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**Spring登录**链接，输入用户名：`test@test.com`和密码：`pass`。Grails应用程序将凭据提交给Spring Security框架，后者查询LDAP并检索用户详细信息，并在安全页面上显示它：
- en: '![How it works…](img/7525OS_04_17.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_04_17.jpg)'
- en: See also
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 6](ch06.html "Chapter 6. Spring Security with Vaadin"), *Spring Security
    with Vaadin*'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。使用Vaadin的Spring安全性")，*使用Vaadin的Spring安全性*'
- en: '[Chapter 5](ch05.html "Chapter 5. Spring Security with GWT"), *Spring Security
    with GWT*'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。使用GWT的Spring安全性")，*使用GWT的Spring安全性*'
