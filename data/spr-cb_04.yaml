- en: Chapter 4. Querying a Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 查询数据库
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Connecting to a database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Creating a DAO class
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 DAO 类
- en: Calling a DAO method from a controller class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制器类中调用 DAO 方法
- en: Saving an object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存一个对象
- en: Retrieving an object
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索一个对象
- en: Retrieving a list of objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索对象列表
- en: Retrieving a list of objects with their dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索具有依赖关系的对象列表
- en: Updating an object
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新一个对象
- en: Deleting an object
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个对象
- en: Finding the number of results for an SQL query
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找 SQL 查询的结果数量
- en: Saving a list of objects at once
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性保存对象列表
- en: Reverting incomplete database modifications using transactions
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用事务回滚不完整的数据库修改
- en: Using Hibernate for powerful object persistence and querying
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Hibernate 进行强大的对象持久化和查询
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**JDBC** (**Java Database Connectivity**) and **Hibernate** are the two most
    commonly used technologies to query a database from a Spring application.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**JDBC**（**Java 数据库连接**）和 **Hibernate** 是从 Spring 应用程序查询数据库最常用的两种技术。'
- en: For small projects and simple data models, JDBC is straightforward; you write
    your SQL queries yourself and Spring provides helpers to convert the query results
    into objects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小型项目和简单的数据模型，JDBC 很简单；你自己编写 SQL 查询，Spring 提供了将查询结果转换为对象的辅助工具。
- en: For complex data models, with several relationships between classes, Hibernate
    is easier; you deal with a standard Java framework (still using JDBC behind the
    scenes) that will generate the SQL queries for you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂的数据模型，类之间有多个关系时，Hibernate 更容易使用；你处理的是一个标准的 Java 框架（仍然在幕后使用 JDBC），它会为你生成
    SQL 查询。
- en: This chapter focuses on JDBC because Spring doesn't change the normal way of
    using Hibernate. The integration of Hibernate with Spring, however, is covered
    in the *Using Hibernate for powerful object persistence and querying* recipe.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍 JDBC，因为 Spring 并没有改变使用 Hibernate 的常规方式。然而，Hibernate 与 Spring 的集成在 *使用
    Hibernate 进行强大的对象持久化和查询* 食谱中有所涉及。
- en: Connecting to a database
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: In this recipe, we will connect to a MySQL or PostgreSQL database from a Spring
    application. To connect to another database system, go to [http://www.oxygenxml.com/database_drivers.html](http://www.oxygenxml.com/database_drivers.html)
    to find the relevant dependencies, driver class, and URL type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将从 Spring 应用程序连接到 MySQL 或 PostgreSQL 数据库。要连接到其他数据库系统，请访问 [http://www.oxygenxml.com/database_drivers.html](http://www.oxygenxml.com/database_drivers.html)
    以找到相关的依赖项、驱动类和 URL 类型。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a MySQL or PostgreSQL database up and running.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个正在运行的 MySQL 或 PostgreSQL 数据库。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Here are the steps to connect from a Spring application to an existing database:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是从 Spring 应用程序连接到现有数据库的步骤：
- en: 'Add the Maven dependency for Spring JDBC in `pom.xml`:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 Spring JDBC 的 Maven 依赖项：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you''re using MySQL, add its Maven dependency in `pom.xml`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用 MySQL，请在 `pom.xml` 中添加其 Maven 依赖项：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you''re using PostgreSQL, add its Maven dependency in `pom.xml`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用 PostgreSQL，请在 `pom.xml` 中添加其 Maven 依赖项：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the Spring configuration, add a `DataSource` bean with the database connection
    details.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring 配置中，添加一个包含数据库连接详情的 `DataSource` bean。
- en: 'If you''re using MySQL:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用 MySQL：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you''re using PostgreSQL:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用 PostgreSQL：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the Spring configuration, add a `JdbcTemplate` bean, taking `DataSource`
    as an argument:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spring 配置中，添加一个 `JdbcTemplate` bean，将 `DataSource` 作为参数：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: A connection (a `Datasource` object) to a database named `db1` on the `3306`
    port (MySQL) or the `5432` port (PostgreSQL) using the `user1` user is created.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个连接（`Datasource` 对象），连接到名为 `db1` 的数据库，端口为 `3306`（MySQL）或 `5432`（PostgreSQL），使用用户
    `user1`。
- en: The `JdbcTemplate` bean is a Spring object that provides convenient methods
    to query a database using JDBC. It uses the previously defined `DataSource` bean.
    We will use the `JdbcTemplate` bean from our DAO classes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`JdbcTemplate` bean 是一个 Spring 对象，它提供了使用 JDBC 查询数据库的便捷方法。它使用之前定义的 `DataSource`
    bean。我们将从我们的 DAO 类中使用 `JdbcTemplate` bean。'
- en: Creating a DAO class
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 DAO 类
- en: 'In this recipe, we will create a **DAO** (**data access object**) class. A
    DAO class provides methods to save and retrieve objects from the database. It
    can be used from a controller, for example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个 **DAO**（**数据访问对象**）类。DAO 类提供了保存和从数据库检索对象的方法。它可以从控制器中使用，例如：
- en: '![Creating a DAO class](img/5807OS_04_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![创建 DAO 类](img/5807OS_04_01.jpg)'
- en: The controller calls the `findUsers()` method from `UserDAO`, which takes care
    of getting the results from the database (using the `JdbcTemplate` bean defined
    in the previous recipe).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器从`UserDAO`调用`findUsers()`方法，它负责从数据库获取结果（使用在先前的配方中定义的`JdbcTemplate`bean）。
- en: How to do it…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to create a DAO class:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建DAO类的步骤：
- en: 'Create a class annotated with `@Repository`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`@Repository`注解的类：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add an autowired `JdbcTemplate` field to it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加一个自动注入的`JdbcTemplate`字段：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '`@Repository` allows the `UserDAO` class to be automatically discovered and
    instantiated as a bean.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Repository`允许`UserDAO`类自动被发现和实例化为一个bean。'
- en: The `JdbcTemplate` field will be initialized automatically by Spring via dependency
    injection with the `JdbcTemplate` bean defined in the previous recipe.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`JdbcTemplate`字段将通过Spring通过依赖注入自动初始化，使用先前的配方中定义的`JdbcTemplate`bean。'
- en: Calling a DAO method from a controller class
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制器类中调用DAO方法
- en: In this recipe, we'll see how to call a DAO method from a controller class.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何从控制器类中调用DAO方法。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the DAO class defined in the previous recipe and pretend that it
    has an `add(User)` method. In the following recipes, we will write actual DAO
    methods.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用先前的配方中定义的DAO类，并假设它有一个`add(User)`方法。在接下来的配方中，我们将编写实际的DAO方法。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to use a DAO method from a controller class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用控制器类中的DAO方法步骤：
- en: 'In your controller class, add the DAO as an `@Autowired` field:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的控制器类中，添加DAO作为`@Autowired`字段：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the DAO in any controller method:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何控制器方法中使用DAO：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Because of `@Autowired`, the `userDAO` field will be automatically initialized
    by Spring using dependency injection.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`@Autowired`，`userDAO`字段将通过Spring使用依赖注入自动初始化。
- en: Saving an object
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存对象
- en: 'In this recipe, we will create a DAO method to save an object in the database;
    a row will be added to the corresponding database table, for example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个DAO方法来将对象保存到数据库中；将在相应的数据库表中添加一行，例如：
- en: '![Saving an object](img/5807OS_04_02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![保存对象](img/5807OS_04_02.jpg)'
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need to have a model class, for example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个模型类，例如：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You need to have a matching database table, for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要有一个匹配的数据库表，例如：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You need to have a DAO class with a `JdbcTemplate` attribute (Refer to the *Creating
    a DAO class* recipe)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个具有`JdbcTemplate`属性的DAO类（参考*创建DAO类*配方）
- en: How to do it…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Define an SQL insert query with question marks as placeholders for the actual
    row values. Use the `update()` method to execute the query using the actual values
    from the object:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个带有问号作为实际行值占位符的SQL插入查询。使用`update()`方法执行查询，使用对象中的实际值：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `jdbcTemplate` object takes care of the JDBC boilerplate code; opening and
    closing a connection to the database and handling the exceptions. The `update()`
    method takes the SQL query and the actual values that will replace the question
    marks in the SQL query.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdbcTemplate`对象负责处理JDBC样板代码；打开和关闭数据库连接以及处理异常。`update()`方法接受SQL查询和将替换SQL查询中问号的实际值。'
- en: Retrieving an object
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取对象
- en: In this recipe, we create a DAO method to retrieve a database row, which we
    will use to create an object.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建一个DAO方法来检索数据库行，我们将使用它来创建一个对象。
- en: How to do it…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Use an SQL select query and create an object from the result using `RowMapper`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQL选择查询并使用`RowMapper`从结果创建一个对象：
- en: 'In the DAO class, add an inline class implementing `RowMapper`. This class
    defines how to generate a `User` object from a database row:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DAO类中，添加一个实现`RowMapper`的内联类。这个类定义了如何从数据库行生成一个`User`对象：
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a DAO method which will perform an SQL `select` query and use a `UserMapper`
    object to generate a `User` object:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个DAO方法，它将执行一个SQL `select`查询并使用一个`UserMapper`对象来生成一个`User`对象：
- en: '[PRE14]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `queryForObject()` method uses `the` `UserMapper` object to generate a `User`
    object from the resulting database row.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`queryForObject()`方法使用`the` `UserMapper`对象从结果数据库行生成一个`User`对象。'
- en: In this example, we retrieve a user from its ID, which is the second argument
    of `queryForObject()`, as an element of an array.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过其ID检索用户，这是`queryForObject()`的第二个参数，作为一个数组元素。
- en: There's more…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'If the database column names match the names of the object attributes, there''s
    no need to define a custom `RowMapper` interface, just use a `ParameterizedBeanPropertyRowMapper`
    class:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库列名与对象属性名匹配，则无需定义自定义的 `RowMapper` 接口，只需使用 `ParameterizedBeanPropertyRowMapper`
    类：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Retrieving a list of objects
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取对象列表
- en: In this recipe, we will add a DAO method to retrieve database rows and create
    a list of objects from them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个 DAO 方法来从数据库行中检索并创建一个对象列表。
- en: How to do it…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform an SQL `select` query and generate a list of objects from the result
    using `RowMapper`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个 SQL `select` 查询并使用 `RowMapper` 从结果中生成一个对象列表：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `query()` method uses `RowMapper` to generate objects from the returned
    database rows.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`query()` 方法使用 `RowMapper` 从返回的数据库行生成对象。'
- en: We used a `ParameterizedBeanPropertyRowMapper` class assuming that the database
    table columns match the object attributes; however, as in the previous recipe,
    a custom `RowMapper` interface can be used.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设数据库表列与对象属性匹配，使用了 `ParameterizedBeanPropertyRowMapper` 类；然而，正如前一个菜谱中所述，可以使用自定义的
    `RowMapper` 接口。
- en: Retrieving a list of objects with their dependencies
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取带有其依赖关系的对象列表
- en: In this recipe, we will add a DAO method to generate, from an SQL query joining
    several tables, a list of objects with their dependencies. We will retrieve a
    list of `User` objects along with their `Post` objects (blog posts written by
    these users).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个 DAO 方法，从一个连接多个表的 SQL 查询中生成一个带有其依赖关系的对象列表。我们将检索一个包含 `User` 对象及其
    `Post` 对象（这些用户撰写的博客文章）的对象列表。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need to have model classes related to each other. In this example, a user
    has many posts:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要具有相互关联的模型类。在这个例子中，一个用户有许多帖子：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You need to have corresponding database tables, for example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要具有相应的数据库表，例如：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Use an SQL `select` query and generate a list of objects from the result using
    a class implementing `ResultSetExtractor`, which goes through the whole list of
    rows before returning the list of objects:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQL `select` 查询并使用实现 `ResultSetExtractor` 的类从结果中生成一个对象列表，该类在返回对象列表之前遍历整个行列表：
- en: 'Add a DAO method performing an SQL `select` statement with `left join` and
    using `ResultSetExtractor` to generate a list of objects:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 DAO 方法，执行一个带有 `left join` 的 SQL `select` 语句并使用 `ResultSetExtractor` 生成一个对象列表：
- en: '[PRE19]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add an inline class implementing `ResultSetExtractor`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个实现 `ResultSetExtractor` 的内联类：
- en: '[PRE20]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Because of `left join`, we obtain a list of rows from the database with sometimes
    the same user, but representing different posts. Each row cannot be processed
    independently or we would end up creating the same user multiple times. So, we
    use `ResultSetExtractor`, which allows us to go through the list of rows.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `left join`，我们有时从数据库中获得具有相同用户的行列表，但代表不同的帖子。每一行不能独立处理，否则我们最终会创建多个相同的用户。因此，我们使用
    `ResultSetExtractor`，它允许我们遍历行列表。
- en: We use a map of `User` objects to track whether the `User` for the current row
    has already been created.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个 `User` 对象的映射来跟踪当前行的 `User` 是否已经被创建。
- en: In the SQL query, we explicitly listed the column names to ensure that they
    will have different names in the resulting rows. Otherwise, `Post id` could be
    confused with `User id`, for example.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 查询中，我们明确列出了列名，以确保它们在结果行中将具有不同的名称。否则，例如，“帖子 id”可能会与“用户 id”混淆。
- en: Updating an object
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新一个对象
- en: In this recipe, we will add a DAO method to update an existing row in the database
    with an object's fields.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个 DAO 方法来使用对象的字段更新数据库中的一个现有行。
- en: How to do it…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Use an SQL `update` query and execute it using the `update()` method:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQL `update` 查询并使用 `update()` 方法执行它：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There's more…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'It''s convenient to also have a `save()` method that will create the database
    row if it doesn''t exist:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 同时拥有一个 `save()` 方法也很方便，如果数据库行不存在，它将创建该行：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Deleting an object
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除一个对象
- en: In this recipe, we will add a DAO method to delete an existing row from the
    database.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个 DAO 方法来从数据库中删除一个现有的行。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Use an SQL `delete` query and execute it using the `update()` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQL `delete` 查询并使用 `update()` 方法执行它：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Finding the number of results for an SQL query
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找 SQL 查询的结果数量
- en: In this recipe, we will add a DAO method to quickly get the number of results
    for an SQL query without actually loading the rows in the memory.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个 DAO 方法，快速获取 SQL 查询的结果数量，而不实际将行加载到内存中。
- en: How to do it…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Use an SQL `count(*)` function and get the value directly using the `queryForObject()`
    method with a second argument specifying `Long` as the returned type:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQL `count(*)`函数，并通过`queryForObject()`方法获取值，第二个参数指定返回类型为`Long`：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Saving a list of objects at once
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次性保存对象列表
- en: In this recipe, we will add a DAO method to save a list of objects to the database
    efficiently.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个DAO方法，以高效地将对象列表保存到数据库中。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the `batchUpdate()` method that takes an SQL `insert` query and a list
    of values as parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用接受SQL `insert`查询和值列表作为参数的`batchUpdate()`方法：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A list of SQL `insert` queries will be generated from the SQL `insert` query
    string and the list of values. They will be sent to the database and committed
    all at once.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将从SQL `insert`查询字符串和值列表生成一系列SQL `insert`查询。它们将被发送到数据库并一次性提交。
- en: Reverting incomplete database modifications using transactions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用事务回滚不完整的数据库修改
- en: Some database modifications involve several SQL queries, for example, inserting
    an object with attributes spread across several tables. If one of the queries
    fails, we would want to undo any previous ones that were successful.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一些数据库修改涉及多个SQL查询，例如，插入具有跨多个表属性的对象。如果其中一个查询失败，我们希望撤销之前成功的任何修改。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to make DAO methods transactional:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使DAO方法事务化的步骤：
- en: 'Add `@EnableTransactionManagement` to the Spring configuration class:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置类中添加`@EnableTransactionManagement`：
- en: '[PRE26]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a `DataSourceTransactionManager` bean to the Spring configuration:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中添加一个`DataSourceTransactionManager`豆：
- en: '[PRE27]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Annotate the DAO class with `@Transactional`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@Transactional`注解DAO类：
- en: '[PRE28]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`@Transactional` will enclose each DAO method in a `BEGIN…COMMIT` SQL block.
    So if there''s an error (a runtime exception), any modification made by the DAO
    method to the database will be rolled back.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Transactional`将每个DAO方法包围在一个`BEGIN…COMMIT` SQL块中。所以如果有错误（运行时异常），DAO方法对数据库所做的任何修改都将回滚。'
- en: Using Hibernate for powerful object persistence and querying
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hibernate进行强大的对象持久化和查询
- en: In this recipe, you will learn how to use Hibernate with Spring. We'll use a
    MySQL database.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何使用Hibernate与Spring结合。我们将使用MySQL数据库。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we''ll use a MySQL database with the `user` table:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用带有`user`表的MySQL数据库：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We''ll use this corresponding JPA-annotated domain class:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个相应的JPA注解的领域类：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For more information about the **Java Persistence API** (**JPA**), go to: [http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html](http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于**Java持久化API**（**JPA**）的信息，请访问：[http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html](http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html)。
- en: How to do it…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to integrate Hibernate with Spring:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是集成Hibernate与Spring的步骤：
- en: 'Add the Maven dependencies for Spring ORM, Hibernate, and the JDBC driver for
    MySQL in `pom.xml`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Spring ORM、Hibernate和MySQL JDBC驱动的Maven依赖项：
- en: '[PRE31]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add `@EnableTransactionManagement` to the Spring configuration class:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置类中添加`@EnableTransactionManagement`：
- en: '[PRE32]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the Spring configuration, add a `dataSource` bean with the database connection
    details:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，添加一个包含数据库连接详情的`dataSource`豆：
- en: '[PRE33]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the Spring configuration class, add a `sessionFactory` bean method taking
    a `Datasource` object as an argument. In this bean method, we tell Hibernate to
    generate SQL code specific to MySQL and declare our `User` class:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置类中，添加一个接受`Datasource`对象作为参数的`sessionFactory`豆方法。在这个豆方法中，我们告诉Hibernate生成针对MySQL的特定SQL代码，并声明我们的`User`类：
- en: '[PRE34]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the Spring configuration class, add a `HibernateTransactionManager` bean:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置类中，添加一个`HibernateTransactionManager`豆：
- en: '[PRE35]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the `SessionFactory` bean to your DAO classes using dependency injection:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用依赖注入将`SessionFactory`豆添加到你的DAO类中：
- en: '[PRE36]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Use this `SessionFactory` bean to control Hibernate as usual, for example,
    this is a DAO method which will add a `User` object into the database:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个`SessionFactory`豆来像往常一样控制Hibernate，例如，这是一个将`User`对象添加到数据库的DAO方法：
- en: '[PRE37]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
