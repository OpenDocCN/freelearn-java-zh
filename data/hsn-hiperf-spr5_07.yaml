- en: Optimizing Spring Messaging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化Spring消息
- en: In the previous chapter, we learned different advanced ways of accessing databases
    using **object-relational mapping** (**ORM**) frameworks such as Hibernate. We
    also learned how to improve database access in an optimal way when using ORM.
    We looked into Spring Data to remove boilerplate code for implementing the **Data
    Access Object** (**DAO**) interface. At the end of the chapter, we saw the Hibernate
    best practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了使用**对象关系映射**（**ORM**）框架（如Hibernate）访问数据库的不同高级方法。我们还学习了在使用ORM时如何以最佳方式改进数据库访问。我们研究了Spring
    Data来消除实现**数据访问对象**（**DAO**）接口的样板代码。在本章末尾，我们看到了Hibernate的最佳实践。
- en: In this chapter, we will learn about Spring's support for messaging. Messaging
    is a very powerful technique that helps to scale the applications and also encourages
    us to decouple the architecture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Spring对消息传递的支持。消息传递是一种非常强大的技术，有助于扩展应用程序，并鼓励我们解耦架构。
- en: Spring Framework provides an extensive support to integrate the messaging system
    into our application with the simplified use of the **Java Message Service** (**JMS**)
    API to receive messages asynchronously. Messaging solutions can be used to send
    messages from one point in an application to a known point, and one point from
    an application to many other unknown points. It is equivalent to sharing something
    face to face and sharing something on a loudspeaker to a group of people, respectively.
    If we want messages to be sent to an unknown set of clients, then we can use a
    queue to broadcast the messages to the people who are listening.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架提供了广泛的支持，通过简化使用**Java消息服务**（**JMS**）API来将消息系统集成到我们的应用程序中，以异步接收消息。消息解决方案可用于从应用程序中的一个点发送消息到已知点，以及从应用程序中的一个点发送消息到许多其他未知点。这相当于面对面分享和通过扩音器向一群人分享东西。如果我们希望将消息发送到一组未知的客户端，那么我们可以使用队列将消息广播给正在监听的人。
- en: 'The following are the topics that we will cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的主题：
- en: What is messaging?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是消息传递？
- en: What is AMQP?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AMQP是什么？
- en: Why do we need AMQP?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为什么需要AMQP？
- en: RabbitMQ
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ
- en: Spring messaging configuration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring消息配置
- en: What is messaging?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是消息传递？
- en: Messaging is a mode of interaction between software components or applications,
    where clients can send messages to, and receive messages from, any other client.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递是软件组件或应用程序之间交互的一种模式，其中客户端可以向任何其他客户端发送消息，并从任何其他客户端接收消息。
- en: 'This message exchange can be done using a component called **broker**. The
    broker provides all the necessary support and services to exchange messages along
    with the capability of interacting with other interfaces. These interfaces are
    known as **Message Oriented Middleware** (**MOM**). The following diagram depicts
    a MOM-based messaging system:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种消息交换可以使用一个名为**broker**的组件来完成。broker提供了所有必要的支持和服务来交换消息，同时具有与其他接口交互的能力。这些接口被称为**消息导向中间件**（**MOM**）。以下图表描述了基于MOM的消息系统：
- en: '![](img/68019515-1a5a-4dcd-95fa-0b68d6dfd438.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68019515-1a5a-4dcd-95fa-0b68d6dfd438.jpg)'
- en: 'Messaging systems reduce the complexity of developing distributed applications
    using the AMQP, STOMP, and XMPP protocols. Let''s discuss them in detail:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AMQP、STOMP和XMPP协议减少开发分布式应用程序的复杂性的消息系统。让我们详细讨论它们：
- en: '**AMQP**: AMQP is an open, standard layer application protocol for asynchronous
    messaging systems. In AMQP, messages should be transmitted in binary format.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AMQP**：AMQP是一种开放的、标准的异步消息系统应用层协议。在AMQP中，消息应以二进制格式传输。'
- en: '**STOMP**: **STOMP** stands for **Simple Text Oriented Messaging Protocol**.
    STOMP provides a compatible medium that allows systems to communicate with almost
    all the available message brokers.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STOMP**：**STOMP**代表**简单文本导向消息协议**。STOMP提供了一个兼容的介质，允许系统与几乎所有可用的消息代理进行通信。'
- en: '**XMPP**: **XMPP** stands for **Extensible Messaging and Presence Protocol**.
    It is an XML-based, open standard communications protocol for MOM.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XMPP**：**XMPP**代表**可扩展消息和出席协议**。这是一种基于XML的开放标准通信协议，用于消息导向中间件。'
- en: What is AMQP?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是AMQP？
- en: The **Advanced Messaging Queuing Protocol** (**AMQP**) is an open standard application
    layer protocol. Each byte of the transmitted message is specified, which allows
    it to be used in many other languages and OS architectures. Hence, this makes
    it a cross-platform-compatible protocol. AMQP is supported by multiple message
    brokers, such as RabbitMQ, ActiveMQ, Qpid, and Solace. Spring provides AMQP-based
    messaging implementation solutions. Spring provides a template for sending and
    receiving messages through the message broker.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级消息队列协议**（**AMQP**）是一种开放的标准应用层协议。传输的每个字节都是指定的，这使得它可以在许多其他语言和操作系统架构中使用。因此，这使得它成为一个跨平台兼容的协议。AMQP受到多个消息代理的支持，如RabbitMQ、ActiveMQ、Qpid和Solace。Spring提供了基于AMQP的消息实现解决方案。Spring提供了一个模板，用于通过消息代理发送和接收消息。'
- en: Problems with the JMS API
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JMS API的问题
- en: JMS API is used to send and receive messages in Java platforms. Spring underpins
    a simple method to utilize the JMS API by providing an additional layer around
    the JMS layer. This layer improves the way toward sending and receiving messages
    and also deals with the creation and release of the connection object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JMS API用于在Java平台上发送和接收消息。Spring通过在JMS层周围提供额外的层来支持简化使用JMS API的方法。这一层改进了发送和接收消息的过程，还处理连接对象的创建和释放。
- en: For creating Java-based messaging systems, the JMS API is widely utilized by
    the developers. The principal disadvantage of using the JMS API is the platform
    contradiction, which implies we can use the JMS API to develop messaging systems
    that will work with Java-based applications. The JMS API does not support other
    programming languages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员广泛使用JMS API来创建基于Java的消息系统。使用JMS API的主要缺点是平台矛盾，这意味着我们可以使用JMS API来开发与基于Java的应用程序兼容的消息系统。JMS
    API不支持其他编程语言。
- en: Why do we need AMQP?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么需要AMQP？
- en: AMQP is the solution for this JMS API problem. The fundamental advantage of
    using AMQP is that it underpins the exchange of messages, paying little mind to
    the platform's compatibility and message brokers. We can develop messaging systems
    using any programming language and still we can communicate with each system using
    AMQP-based message brokers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: AMQP是解决JMS API问题的解决方案。使用AMQP的基本优势在于，它支持消息的交换，不受平台兼容性和消息代理的影响。我们可以使用任何编程语言开发消息系统，仍然可以使用基于AMQP的消息代理与每个系统进行通信。
- en: Differences between AMQP and the JMS API
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AMQP和JMS API之间的区别
- en: 'These are some of the important differences between AMQP and the JMS API:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是AMQP和JMS API之间的一些重要区别：
- en: Platform compatibility
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台兼容性
- en: Messaging models
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息模型
- en: Message data type
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息数据类型
- en: Message structure
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息结构
- en: Message routing
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息路由
- en: Workflow strategy
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流策略
- en: These are explained in more detail in the following sections.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在以下部分中有更详细的解释。
- en: Platform compatibility
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台兼容性
- en: JMS applications can work with any operating systems, but they only support
    the Java platform. If we want to develop a messaging system to communicate with
    more than one system, then all those systems should be developed using Java programming
    languages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: JMS应用程序可以与任何操作系统一起工作，但它们仅支持Java平台。如果我们想要开发一个可以与多个系统通信的消息系统，那么所有这些系统都应该使用Java编程语言开发。
- en: While using AMQP, we can develop a messaging system that can communicate with
    any system with different technologies. So it is not required for a destination
    system to be developed in the same technology.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用AMQP时，我们可以开发一个可以与不同技术的任何系统进行通信的消息系统。因此，不需要目标系统使用相同的技术进行开发。
- en: Messaging models
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息模型
- en: The JMS API provides two sorts of messaging models, point-to-point, and publish-subscribe,
    for asynchronous messaging between different platform systems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JMS API提供两种消息模型，即点对点和发布-订阅，用于不同平台系统之间的异步消息传递。
- en: 'AMQP provides support for the following exchange types: direct, topic, fanout,
    and headers.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: AMQP支持以下交换类型：直接、主题、扇出和页眉。
- en: Message data type
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息数据类型
- en: 'The JMS API supports five standard messaging types:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JMS API支持五种标准消息类型：
- en: '`StreamMessage`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StreamMessage`'
- en: '`MapMessage`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapMessage`'
- en: '`TextMessage`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextMessage`'
- en: '`ObjectMessage`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectMessage`'
- en: '`BytesMessage`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BytesMessage`'
- en: AMQP supports only one type of message—binary messages; messages must be transmitted
    in binary format only.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: AMQP仅支持一种类型的消息——二进制消息；消息必须以二进制格式传输。
- en: Message structure
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息结构
- en: 'The JMS API message has an essential structure that comprises three parts:
    headers, properties, and body. It characterizes a standard form that ought to
    be portable across all JMS providers.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JMS API消息具有基本结构，包括头部、属性和正文三个部分。它定义了一个标准形式，应该在所有JMS提供程序中可移植。
- en: 'The AMQP message comprises four parts: headers, properties, body, and footers.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: AMQP消息包括四个部分：头部、属性、正文和页脚。
- en: Message routing
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息路由
- en: For message routing, AMQP can likewise be utilized for complex routing schemes,
    which is conceivable through the routing key and depends on the destination matching
    criteria.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于消息路由，AMQP也可以用于复杂的路由方案，这是通过路由键和基于目标匹配标准实现的。
- en: The JMS API is based on more complicated routing schemes that are based on hierarchic
    topics and client-message selection filters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: JMS API基于更复杂的路由方案，这些方案基于分层主题和客户端消息选择过滤器。
- en: Workflow strategy
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流策略
- en: In AMQP, producers first need to send the message to the exchange, and then
    it will be transferred to the queue, whereas in JMS, there is no need to exchange
    since messages can be sent directly to the queue or topic.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在AMQP中，生产者首先需要将消息发送到交换，然后才会转移到队列，而在JMS中，不需要交换，因为消息可以直接发送到队列或主题。
- en: What are exchanges, queues, and bindings?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交换、队列和绑定是什么？
- en: 'AMQP deals with Publishers and Consumers. The **Publisher** sends the message
    and the **Consumer** receives it. A message broker takes care of this mechanism
    to ensure that messages from Publishers go to the right Consumers. Two key elements
    used by message brokers are exchanges and queues. The following diagram illustrates
    how a Publisher connects to a Consumer:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: AMQP处理发布者和消费者。**发布者**发送消息，**消费者**接收消息。消息代理负责这个机制，以确保来自发布者的消息传递到正确的消费者。消息代理使用的两个关键元素是交换和队列。以下图表说明了发布者如何连接到消费者：
- en: '![](img/181f17de-7122-4001-86b0-ee9ba0b1ec8d.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/181f17de-7122-4001-86b0-ee9ba0b1ec8d.jpg)'
- en: Let's understand the exchange, queue, and binding terminologies.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下交换、队列和绑定的术语。
- en: Exchange
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交换
- en: 'An exchange is responsible for taking a message and routing it into zero or
    more queues. Each exchange of a broker has a unique name, as well as a few other
    properties within a virtual host. The message-routing algorithm used depends on
    the exchange type and bindings. As we mentioned earlier, there are four different
    types of exchanges: direct, topic, fanout, and headers.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 交换负责接收消息并将其路由到零个或多个队列。每个代理的交换都有一个唯一的名称，以及虚拟主机中的其他一些属性。所使用的消息路由算法取决于交换类型和绑定。正如我们之前提到的，有四种不同类型的交换：直接、主题、扇出和页眉。
- en: Queue
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列
- en: A queue is a component from which a message consumer receives messages. A queue
    has a unique name so that systems can reference them. The queue name can be defined
    by the application or generated by the broker when requested. We cannot use a
    queue name beginning with `amq.`, since it is reserved by the broker for internal
    use.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 队列是消息消费者接收消息的组件。队列有一个唯一的名称，以便系统可以引用它们。队列名称可以由应用程序定义，也可以在请求时由代理生成。我们不能使用以`amq.`开头的队列名称，因为它被代理保留用于内部使用。
- en: Binding
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定
- en: The binding is used to connect queues to exchanges. There are certain standard
    headers called **routing key** headers, and they are used by the broker to match
    messages to queues. Each queue has a specific binding key and if that key matches
    the value of the routing key header, the queue receives the message.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定用于连接队列和交换机。有一些称为**路由键**头的标准头部，经纪人使用它们将消息与队列匹配。每个队列都有一个特定的绑定键，如果该键与路由键头的值匹配，队列将接收消息。
- en: Introducing RabbitMQ
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍RabbitMQ
- en: RabbitMQ is AMQP-based and one of the most widely used lightweight, reliable,
    scalable, portable, and robust message brokers that is written in Erlang. The
    important reason behind the popularity of RabbitMQ is that it is easy to set up
    and fit for the cloud scale. RabbitMQ is open source and supported by most of
    the operating systems and platforms. The applications that use RabbitMQ can communicate
    with other systems via a platform neutral, wire-level protocol—the AMQP. Now,
    let's go through how to configure RabbitMQ.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: RabbitMQ基于AMQP，是最广泛使用的轻量级、可靠、可扩展、便携和强大的消息代理之一，使用Erlang编写。RabbitMQ之所以受欢迎的重要原因是它易于设置，并且适合云规模。RabbitMQ是开源的，并受大多数操作系统和平台支持。使用RabbitMQ的应用程序可以通过一个平台中立的、线级协议——AMQP与其他系统通信。现在，让我们来了解如何配置RabbitMQ。
- en: Setting up the RabbitMQ server
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置RabbitMQ服务器
- en: Before developing a messaging system, we need to set up a message broker that
    will handle sending and receiving the messages. RabbitMQ is the AMQP server, which
    is freely available at [http://www.rabbitmq.com/download.html](http://www.rabbitmq.com/download.html).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发消息系统之前，我们需要设置一个消息代理，用于处理发送和接收消息。RabbitMQ是AMQP服务器，可以在[http://www.rabbitmq.com/download.html](http://www.rabbitmq.com/download.html)免费下载。
- en: 'Once you install the RabbitMQ server, depending on your installation path,
    you will have to set the following system variable with `RABBITMQ_HOME`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装RabbitMQ服务器后，根据安装路径，您将不得不使用`RABBITMQ_HOME`设置以下系统变量：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After setting up everything, you can access the RabbitMQ console by using `http://localhost:15672/`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好一切后，您可以通过`http://localhost:15672/`访问RabbitMQ控制台。
- en: 'You will see the default login screen, where you need to enter guest as the
    default Username `guest` and `guest` as the Password:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到默认的登录屏幕，您需要输入`guest`作为默认用户名和`guest`作为密码：
- en: '![](img/bb1ca8ba-d204-4e14-a689-9a788a0d0cd1.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb1ca8ba-d204-4e14-a689-9a788a0d0cd1.png)'
- en: 'After logging in, you will see the RabbitMQ server home page, where you can
    manage the Queues, Exchanges, and Bindings:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您将看到RabbitMQ服务器主页，您可以在那里管理队列、交换和绑定：
- en: '![](img/cab357f7-c683-4cbb-9d07-2ac6fb4df032.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cab357f7-c683-4cbb-9d07-2ac6fb4df032.png)'
- en: Now we will go through an example to learn about the messaging configuration
    in the Spring application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过一个示例来了解Spring应用程序中的消息配置。
- en: Spring messaging configuration
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring消息配置
- en: 'Before we start with the example, we need to understand the basic setup requirements
    to configure a messaging application. We will create a RabbitMQ messaging application
    and go through the different parts of the configuration. The following steps are
    involved in setting up messaging in Spring application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始示例之前，我们需要了解配置消息应用程序的基本设置要求。我们将创建一个RabbitMQ消息应用程序，并了解配置的不同部分。在Spring应用程序中设置消息涉及以下步骤：
- en: Configure a Maven dependency for RabbitMQ
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置RabbitMQ的Maven依赖项
- en: Configure RabbitMQ
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置RabbitMQ
- en: Create a component to send and receive messages
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件来发送和接收消息
- en: Configuring a Maven dependency for RabbitMQ
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为RabbitMQ配置Maven依赖项
- en: 'Let''s start with adding a dependency for RabbitMQ to `pom.xml`. The following
    code shows the dependency to be configured:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从向`pom.xml`添加RabbitMQ的依赖开始。以下代码显示了要配置的依赖项：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have added the dependency for RabbitMQ. Now, let's create a class to configure
    the queue, exchange, and binding between them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为RabbitMQ添加了依赖项。现在，让我们创建一个类来配置队列、交换和它们之间的绑定。
- en: Configuring RabbitMQ
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置RabbitMQ
- en: Now, we will go through the configuration parts to get a clear understanding
    of the configuration of `ConnectionFactory`, `RabbitTemplate`, `Queue`, `Exchange`,
    `Binding`, message listener container, and message converter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过配置部分来清楚地了解`ConnectionFactory`、`RabbitTemplate`、`Queue`、`Exchange`、`Binding`、消息监听容器和消息转换器的配置。
- en: Configuring ConnectionFactory
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ConnectionFactory
- en: 'For the `ConnectionFactory` interface, there is a concrete implementation `CachingConnectionFactory`
    which, by default, creates a single connection proxy that can be shared by the
    whole application. The code used to create `CachingConnectionFactory` is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`ConnectionFactory`接口，有一个具体的实现`CachingConnectionFactory`，默认情况下创建一个可以由整个应用程序共享的单个连接代理。用于创建`CachingConnectionFactory`的代码如下：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can also configure cached connections using `CachingConnectionFactory` as
    well as just channels. We need to set the `cacheMode` property to `CacheMode.CONNECTION`
    using `setCacheMode()`. We can also limit the total number of connections allowed
    using the `connectionLimit` property through the use of `setConnectionLimit()`. When
    this property is set and the limit is exceeded, the `channelCheckoutTimeLimit`
    is used to wait for a connection to become idle.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`CachingConnectionFactory`配置缓存连接，以及仅通道。我们需要将`cacheMode`属性设置为`CacheMode.CONNECTION`，使用`setCacheMode()`。我们还可以通过使用`setConnectionLimit()`限制允许的连接总数。当设置了此属性并且超过了限制时，`channelCheckoutTimeLimit`用于等待连接变为空闲。
- en: Configuring a queue
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置队列
- en: 'Now, we will configure a queue using the `Queue` class. The following code
    creates a queue with a specific name:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`Queue`类配置一个队列。以下代码创建了一个具有特定名称的队列：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding `queue()` method creates an AMQP queue with a specific name declared
    using the `RABBIT_MESSAGE_QUEUE` constant. We can also set the durability using
    the `durable` flag. We need to pass it along with the second constructor argument
    as a Boolean type.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`queue()`方法使用`RABBIT_MESSAGE_QUEUE`常量声明了一个具有特定名称的AMQP队列。我们还可以使用`durable`标志设置持久性。我们需要将它作为布尔类型与第二个构造函数参数一起传递。
- en: Configuring an exchange
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置交换
- en: 'Now, we need to create an AMQP exchange, to which a message producer will send
    a message. The `Exchange` interface represents an AMQP exchange. There are four
    implementations of the `Exchange` interface type: `DirectExchange`, `TopicExchange`,
    `FanoutExchange`, and `HeadersExchange`. We can use any exchange type based on
    our requirements. We will use `DirectExchange` using the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个AMQP交换，消息生产者将向其发送消息。`Exchange`接口表示一个AMQP交换。`Exchange`接口类型有四种实现：`DirectExchange`、`TopicExchange`、`FanoutExchange`和`HeadersExchange`。根据我们的需求，我们可以使用任何交换类型。我们将使用以下代码使用`DirectExchange`：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `exchange()` method creates `DirectExchange` with a specific name defined
    under `RABBIT_MESSAGE_EXCHANGE`. We can also set the durability using the durable
    flag. We need to pass it along with the second constructor argument as a Boolean
    type.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`exchange()`方法使用在`RABBIT_MESSAGE_EXCHANGE`下定义的特定名称创建`DirectExchange`。我们还可以使用持久性标志设置持久性。我们需要将它作为布尔类型与第二个构造函数参数一起传递。'
- en: Configuring a binding
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置绑定
- en: 'Now, we need to create a binding using the `BindingBuilder` class to connect `queue`
    to `Exchange`. The following code is used to create a binding:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用`BindingBuilder`类创建一个绑定，将`queue`连接到`Exchange`。以下代码用于创建绑定：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `exchangeBinding()` method creates a binding of `queue` and `Exchange` with
    the `ROUTING_KEY` routing key value.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`exchangeBinding()`方法使用`ROUTING_KEY`路由键值创建`queue`和`Exchange`的绑定。'
- en: Configuring RabbitAdmin
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置RabbitAdmin
- en: '`RabbitAdmin` is used to declare the exchanges, queues, and binding that needs
    to be ready on startup. `RabbitAdmin` does the automatic declaration of the queues,
    exchanges, and binding. The main benefit of this auto-declaration is that if the
    connection is disconnected for some reason, they will be applied automatically
    when the connection is re-established. The following code configures `RabbitAdmin`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`RabbitAdmin`用于声明在启动时需要准备好的交换、队列和绑定。`RabbitAdmin`自动声明队列、交换和绑定。这种自动声明的主要好处是，如果由于某种原因连接断开，它们将在重新建立连接时自动应用。以下代码配置了`RabbitAdmin`：'
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`rabbitAdmin()` will declare the `Queue`, `Exchange`, and `Binding`. The `RabbitAdmin`
    constructor creates an instance using the `connectionFactory()` bean and it must
    not be `null`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`rabbitAdmin()`将声明`Queue`、`Exchange`和`Binding`。`RabbitAdmin`构造函数使用`connectionFactory()`
    bean创建一个实例，它不能为`null`。'
- en: '`RabbitAdmin` performs automatic declaration only when the `CachingConnectionFactory`
    cache mode is `CHANNEL` (it is by default). The reason for this limitation is
    because it may be the case that exclusive and autodelete queues may be bound to
    the connection.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`RabbitAdmin`仅在`CachingConnectionFactory`缓存模式为`CHANNEL`（默认情况下）时执行自动声明。这种限制的原因是因为可能会将独占和自动删除队列绑定到连接。'
- en: Configuring a message converter
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置消息转换器
- en: At the precise time a message is received by the listener, two change steps
    happen. In the initial step, the incoming AMQP message is changed over to a Spring
    messaging `Message` using `MessageConverter`. In the second step, when the target
    method is executed, the payload of the message is changed over to the parameter
    type if necessary. By default, in the initial step, `MessageConverter` is utilized
    as Spring AMQP `SimpleMessageConverter` that handles the transformation to String
    and `java.io.Serializable`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在监听器接收到消息的确切时间，会发生两个变化步骤。在初始步骤中，传入的AMQP消息会使用`MessageConverter`转换为Spring消息`Message`。在第二步中，当执行目标方法时，如果需要，消息的有效负载会转换为参数类型。默认情况下，在初始步骤中，使用`MessageConverter`作为Spring
    AMQP的`SimpleMessageConverter`，它处理转换为String和`java.io.Serializable`。
- en: 'In the second step, by default, `GenericMessageConverter` is used for conversion.
    We have used `Jackson2JsonMessageConverter` in the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，默认情况下使用`GenericMessageConverter`进行转换。我们在以下代码中使用了`Jackson2JsonMessageConverter`：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will use this message converter as a property to change the default message
    converter while configuring a `RabbitTemplate` in the next section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用这个消息转换器作为属性来更改默认的消息转换器，同时配置`RabbitTemplate`。
- en: Creating a RabbitTemplate
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个RabbitTemplate
- en: 'Spring AMQP’s `RabbitTemplate` provides everything for the basic AMQP operations.
    The following code creates an instance of `RabbitTemplate` using `connectionFactory`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Spring AMQP的`RabbitTemplate`提供了基本的AMQP操作。以下代码使用`connectionFactory`创建了`RabbitTemplate`的实例：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`RabbitTemplate` acts as a helper class for the producer to send, and the consumer
    to receive, the messages.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`RabbitTemplate`充当生产者发送消息和消费者接收消息的辅助类。'
- en: Configuring a listener container
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置监听器容器
- en: 'To receive the message asynchronously, the easiest way is to use an annotated
    listener endpoint. We will use the `@RabbitListener` annotation as a message `listener`
    endpoint. To create this `listener` endpoint, we have to configure a message `listener`
    container using the `SimpleRabbitListenerContainerFactory` class, which is an
    implementation of the `RabbitListenerContainerFactory` interface. The following
    code is used to configure `SimpleRabbitListenerContainerFactory`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要异步接收消息，最简单的方法是使用注释的监听器端点。我们将使用`@RabbitListener`注释作为消息`listener`端点。要创建这个`listener`端点，我们必须使用`SimpleRabbitListenerContainerFactory`类配置消息`listener`容器，这是`RabbitListenerContainerFactory`接口的实现。以下代码用于配置`SimpleRabbitListenerContainerFactory`：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `listenerContainer()` method will instantiate `SimpleRabbitListenerContainerFactory`.
    You can set the maximum number of consumers with the `maxConcurrentConsumers`
    property using the `setMaxConcurrentConsumers()` method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`listenerContainer()`方法将实例化`SimpleRabbitListenerContainerFactory`。您可以使用`setMaxConcurrentConsumers()`方法的`maxConcurrentConsumers`属性设置最大消费者数量。'
- en: 'The following is the class that contains all the previously discussed configuration
    methods:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含所有先前讨论的配置方法的类：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating a message receiver
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建消息接收器
- en: 'Now, we will create a `Consumer` listener class with the `@RabbitListener` annotated
    method, which will receive the message from RabbitMQ:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个带有`@RabbitListener`注释方法的`Consumer`监听器类，该方法将从RabbitMQ接收消息：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the message `listenerContainer` class. Whenever, producer sends a message
    to the `queue`, this class will receive it and only the method with the `@RabbitListener(containerFactory
    = "listenerContainer", queues = RabbitMqConfiguration.RABBIT_MESSAGE_QUEUE)` annotation
    will receive the message. In this annotation, we mentioned the `containerFactory`
    attribute, which points to the message listener factory defined in the `listenerContainer`
    bean.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是消息`listenerContainer`类。每当生产者向`queue`发送消息时，这个类将接收到它，只有带有`@RabbitListener(containerFactory
    = "listenerContainer", queues = RabbitMqConfiguration.RABBIT_MESSAGE_QUEUE)`注解的方法才会接收到消息。在这个注解中，我们提到了`containerFactory`属性，它指向了在`listenerContainer`
    bean中定义的消息监听器工厂。
- en: Creating a message producer
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建消息生产者
- en: 'To run this application, we will use the `RabbitTemplate.convertAndSend()` method
    to send the message. This method also converts custom Java objects to AMQP messages
    and is sent to direct exchange. The following `BankAccount` class is created as
    a custom class to populate the message properties:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行这个应用程序，我们将使用`RabbitTemplate.convertAndSend()`方法来发送消息。这个方法还将自定义的Java对象转换为AMQP消息，并发送到直接交换。以下`BankAccount`类被创建为一个自定义类来填充消息属性：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the following class, we will initialize the preceding class with some proper
    values and send it to the exchange using `RabbitTemplate.convertAndSend()`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个类中，我们将使用一些适当的值初始化前面的类，并使用`RabbitTemplate.convertAndSend()`将其发送到交换：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we run the preceding code, the producer will send two objects of `BankAccount`
    using the `convertAndSend()` method and the following output will be displayed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行上述代码时，生产者将使用`convertAndSend()`方法发送两个`BankAccount`对象，并显示以下输出：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Maximizing throughput with RabbitMQ
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大化RabbitMQ的吞吐量
- en: 'The following are the configuration options for optimal performance in relation
    to maximum message passing throughput:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与最大消息传递吞吐量相关的最佳性能配置选项：
- en: Keep your queues short
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持队列短
- en: Avoid the use of lazy queues
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用懒惰队列
- en: Avoid persistent messages
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免持久化消息
- en: Create multiple queues and consumers
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多个队列和消费者
- en: Divide queues into different cores
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将队列分成不同的核心
- en: Disable acknowledgment
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用确认
- en: Disable unnecessary plugins
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用不必要的插件
- en: Performance and scalability with RabbitMQ
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RabbitMQ的性能和可伸缩性
- en: 'There are many important points that we should consider for achieving optimal
    performance with RabbitMQ:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多重要的要点，我们应该考虑实现与RabbitMQ的最佳性能：
- en: Payload message size
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效载荷消息大小
- en: Exchange management
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换管理
- en: Configure prefetch properly
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确配置预取
- en: RabbitMQ HiPE
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ HiPE
- en: Clustering of nodes
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的集群
- en: Disable RabbitMQ statistics
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用RabbitMQ统计信息
- en: Update the RabbitMQ libraries
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新RabbitMQ库
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the concept of messaging. We also went through
    the advantages of using messaging systems. We learned about AMQP. We went through
    the needs of AMQP by understanding the JMS API problem. We also saw the differences
    between AMQP and the JMS API. We learned about the exchanges, queues, and binding
    related to AMQP. We also went through the setup aspect of RabbitMQ and different
    configurations related to the Spring application.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了消息传递的概念。我们还了解了使用消息系统的优势。我们学习了AMQP。我们通过理解JMS API问题了解了AMQP的需求。我们还看到了AMQP和JMS
    API之间的区别。我们学习了与AMQP相关的交换、队列和绑定。我们还学习了RabbitMQ的设置方面以及与Spring应用程序相关的不同配置。
- en: In the next chapter, we will learn about the cover core concept of Java threads
    and then we will move to the advanced thread support provided by the `java.util.concurrent`
    package. We will also go through the various classes and interfaces of `java.util.concurrent`.
    We will learn how we can use Java thread pool to improve performance. We will
    walk through useful functionality provided by the Spring framework, such as task
    executing, scheduling, and running as asynchronous. Finally, we will look into
    Spring transaction management with threads and various best programming practices
    for threads.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Java线程的核心概念，然后我们将转向`java.util.concurrent`包提供的高级线程支持。我们还将学习`java.util.concurrent`的各种类和接口。我们将学习如何使用Java线程池来提高性能。我们将学习Spring框架提供的有用功能，如任务执行、调度和异步运行。最后，我们将研究Spring事务管理与线程以及线程的各种最佳编程实践。
