- en: Chapter 4. Adding Custom Functionality to JPA Repositories
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。向JPA存储库添加自定义功能
- en: We have learned how we can manage our entities and create database queries with
    Spring Data JPA. We have also learned how we can sort and paginate query results.
    However, if we take a purist architectural point of view, we notice that the described
    solutions are not following the **separation of concerns** principle. In fact,
    our service layer contains code that reveals the inner workings of our repository
    layer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何使用Spring Data JPA管理实体并创建数据库查询。我们还学会了如何对查询结果进行排序和分页。然而，如果我们从纯粹的架构观点出发，我们会注意到所描述的解决方案并没有遵循**关注点分离**原则。事实上，我们的服务层包含了揭示存储库层内部工作原理的代码。
- en: This is a trade off between architectural purity and productivity. As always,
    this choice has some consequences. If we have to migrate our application away
    from Spring Data JPA, we have to make changes to both the service and repository
    layer. However, how many times have we heard that the repository layer of an application
    has to be changed so radically? Exactly. These situations are very rare. Thus,
    this risk is worth taking when the reward is high.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是架构纯度和生产力之间的权衡。和往常一样，这个选择有一些后果。如果我们必须将我们的应用程序迁移到Spring Data JPA之外，我们必须对服务和存储库层进行更改。然而，我们有多少次听说过应用程序的存储库层必须发生如此根本性的变化？确切地说，这种情况非常罕见。因此，当回报很高时，这种风险是值得承担的。
- en: 'The techniques described in this chapter can be used to hide the implementation
    specific details from our service layer but they have other applications as well.
    In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述的技术可以用来隐藏服务层的实现细节，但它们还有其他应用。在本章中，我们将涵盖以下主题：
- en: How we can add custom functionality to a single repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向单个存储库添加自定义功能
- en: How we can add custom functionality to all repositories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向所有存储库添加自定义功能
- en: 'We will use the Querydsl example application created in Chapter 3, *Building
    Queries with Spring Data JPA*, as a starting point. Let''s first refresh our memory
    and spend a moment to review the structure of our example application. Our service
    layer consists of a single class called `RepositoryPersonService` that uses our
    repository interface called `ContactRepository`. The pagination and query building
    logic of our application is located at the service layer. This situation is illustrated
    in the following diagram:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第3章*使用Spring Data JPA构建查询*中创建的Querydsl示例应用程序作为起点。让我们首先刷新一下记忆，并花一点时间审查我们示例应用程序的结构。我们的服务层由一个名为`RepositoryPersonService`的单个类组成，该类使用我们的名为`ContactRepository`的存储库接口。我们应用程序的分页和查询构建逻辑位于服务层。这种情况在以下图表中有所说明：
- en: '![Adding Custom Functionality to JPA Repositories](img/9045_04_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![向JPA存储库添加自定义功能](img/9045_04_01.jpg)'
- en: Adding custom functionality to a single repository
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向单个存储库添加自定义功能
- en: The ability to add custom functionality to a single repository is a useful feature
    when the added functionality is related only to a single entity. In this section,
    we will investigate how this can be done, and move the pagination and search logic
    from the service layer to the repository layer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 向单个存储库添加自定义功能是一个有用的功能，当添加的功能只与单个实体相关时。在本节中，我们将探讨如何实现这一点，并将分页和搜索逻辑从服务层移动到存储库层。
- en: 'If we want to add custom functionality to a single repository, we have to follow
    the following steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想向单个存储库添加自定义功能，我们必须遵循以下步骤：
- en: Create a custom interface that declares the custom methods.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建声明自定义方法的自定义接口。
- en: Implement the created interface.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现创建的接口。
- en: Create a repository interface.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建存储库接口。
- en: Create a service implementation that uses the custom functionality.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建使用自定义功能的服务实现。
- en: Creating the custom interface
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义接口
- en: 'Our first step is to create an interface that declares the custom repository
    methods. Since our goal is to move the pagination and search logic to the repository
    layer, we have to add the following methods to the created interface:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是创建一个声明自定义存储库方法的接口。由于我们的目标是将分页和搜索逻辑移动到存储库层，我们必须向创建的接口添加以下方法：
- en: '| Method | Description |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `List<Contact> findAllForPage(int pageIndex, int pageSize)` | Returns all
    contacts belonging to the requested page. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `List<Contact> findAllForPage(int pageIndex, int pageSize)` | 返回属于请求页面的所有联系人。
    |'
- en: '| `List<Contact> findContactsForPage(String searchTerm, int pageIndex, int
    pageSize)` | Returns all contacts that match with the given search term and belong
    to the requested page. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `List<Contact> findContactsForPage(String searchTerm, int pageIndex, int
    pageSize)` | 返回与给定搜索词匹配并属于请求页面的所有联系人。 |'
- en: 'The source code of the `PaginatingContactRepository` interface is given as
    follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`PaginatingContactRepository`接口的源代码如下：'
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Implementing the created interface
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现创建的接口
- en: We have now created an interface that specifies our custom repository methods.
    Our next step is to create an implementation of this interface and move all pagination
    and query building code from the service layer to this class.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了一个指定自定义存储库方法的接口。我们的下一步是创建这个接口的实现，并将所有分页和查询构建代码从服务层移动到这个类中。
- en: The repository infrastructure looks for the implementation of our custom interface
    from the same package where the interface is located. It is looking for a class,
    with name matching to a string that is created by appending a suffix to the simple
    name of the actual repository interface. By default the value of this suffix is
    `Impl`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库基础设施会从与接口位于同一包中的位置寻找我们自定义接口的实现。它正在寻找一个类，其名称与实际存储库接口的简单名称附加一个后缀后创建的字符串匹配。默认情况下，此后缀的值为`Impl`。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can set the suffix by using either the `repository-impl-postfix` attribute
    of Spring Data JPA's `repositories` namespace element or the `repositoryImplementationPostfix`
    property of the `@EnableJpaRepositories` annotation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Spring Data JPA的`repositories`命名空间元素的`repository-impl-postfix`属性或`@EnableJpaRepositories`注解的`repositoryImplementationPostfix`属性来设置后缀。
- en: 'At the moment we are perfectly happy with the default suffix. Thus, the name
    of the class that implements our custom interface must be `ContactRepositoryImpl`.
    We can implement this class by following these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们对默认后缀非常满意。因此，实现我们自定义接口的类的名称必须是`ContactRepositoryImpl`。我们可以按照以下步骤实现这个类：
- en: Write some plumbing code needed to configure the `QueryDslJpaRepository<T, ID>`
    class that is used to execute our queries.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一些必要的管道代码来配置`QueryDslJpaRepository<T, ID>`类，用于执行我们的查询。
- en: Implement the methods declared in our custom interface.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现自定义接口中声明的方法。
- en: Configuring the repository class
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置存储库类
- en: 'In this phase we will write the code that is needed to obtain an instance of
    the `QueryDslJpaRepository<Contact, Long>` class. This process has the following
    steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将编写获取`QueryDslJpaRepository<Contact, Long>`类实例所需的代码。这个过程有以下步骤：
- en: Use the `@PersistenceContext` annotation to get a reference to the used entity
    manager.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@PersistenceContext`注解获取对使用的实体管理器的引用。
- en: Create an `init()` method and annotate it with the `@PostConstruct` annotation.
    This ensures that the method called after the bean has been constructed and the
    entity manager reference is injected.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`init()`方法，并用`@PostConstruct`注解进行注释。这样可以确保在bean构造后调用该方法，并注入实体管理器引用。
- en: Implement the `init()` method and create a new `QueryDslJpaRepository<Contact,
    Long>` object.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`init()`方法并创建一个新的`QueryDslJpaRepository<Contact, Long>`对象。
- en: 'The source code of our implementation is given as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现源代码如下：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Implementing the custom methods
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现自定义方法
- en: 'At the moment the created class cannot be compiled because we have not implemented
    the custom methods yet. Also, before we can implement these methods, we have to
    move the pagination logic from the service layer to the `ContactRepositoryImpl`
    class. Thus, this process has the following two steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前创建的类无法编译，因为我们还没有实现自定义方法。在实现这些方法之前，我们必须将分页逻辑从服务层移动到`ContactRepositoryImpl`类。因此，这个过程有以下两个步骤：
- en: Add the pagination related code to our repository implementation.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将分页相关的代码添加到我们的存储库实现中。
- en: Implement the custom repository methods.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现自定义存储库方法。
- en: 'First, we have to add the pagination related code to our repository. This means
    that we have to add both the `sortByLastNameAndFirstNameAsc()` and `buildPageSpecification()`
    methods to the `ContactRepositoryImpl` class. The implementations of these methods
    remain unchanged as we can see in the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将分页相关的代码添加到我们的存储库中。这意味着我们必须将`sortByLastNameAndFirstNameAsc()`和`buildPageSpecification()`方法添加到`ContactRepositoryImpl`类中。这些方法的实现保持不变，如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next step is to write an implementation for the `findAllForPage()` method
    that is used to get a list of contacts belonging to a requested page. This means
    that we have to:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写`findAllForPage()`方法的实现，该方法用于获取所请求页面上的联系人列表。这意味着我们必须：
- en: Get a page specification by using the private `buildPageSpecification()` method.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用私有的`buildPageSpecification()`方法获取页面规范。
- en: Get the contents of the requested page by calling the `findAll()` method of
    the repository and passing the page specification as a parameter.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用存储库的`findAll()`方法并将页面规范作为参数传递，获取所请求页面的内容。
- en: Return a list of contacts.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回联系人列表。
- en: 'The source code of the `findAllForPage()` method is given as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`findAllForPage()`方法的源代码如下：'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our last task is to provide an implementation for the `findContactsForPage()`
    method. The implementation of this method has the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个任务是为`findContactsForPage()`方法提供实现。这个方法的实现有以下步骤：
- en: Get the used search condition by calling the static `firstOrLastNameStartsWith()`
    method of the `ContactPredicates` class.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`ContactPredicates`类的静态`firstOrLastNameStartsWith()`方法获取使用的搜索条件。
- en: Get the page specification by calling the private `buildPageSpecification()`
    method.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用私有的`buildPageSpecification()`方法获取页面规范。
- en: Get the contents of the requested page by calling the `findAll()` method of
    the repository and providing the necessary parameters.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用存储库的`findAll()`方法并提供必要的参数，获取所请求页面的内容。
- en: Return a list of contacts.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回联系人列表。
- en: 'The source code of the `findContactsForPage()` method is given as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`findContactsForPage()`方法的源代码如下：'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating the repository interface
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储库接口
- en: 'We have now implemented the custom functionality and it is time to add this
    functionality to our repository. We have to make two changes to the existing `ContactRepository`
    interface. They are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经实现了自定义功能，是时候将这个功能添加到我们的存储库中了。我们需要对现有的`ContactRepository`接口进行两处更改。具体如下：
- en: We can make the custom methods available to the users of our repository by extending
    the `PaginatingContactRepository` interface.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展`PaginatingContactRepository`接口，我们可以使自定义方法对我们存储库的用户可用。
- en: Because the service layer has no need for the specific methods from the Querydsl
    library anymore, we can remove the `QueryDslPredicateExecutor` interface from
    the list of extended interfaces.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为服务层不再需要Querydsl库的特定方法，我们可以从扩展接口列表中移除`QueryDslPredicateExecutor`接口。
- en: 'The source code of our new repository interface is given as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新存储库接口的源代码如下：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating the service implementation
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建服务实现
- en: 'The last step is to modify the `RepositoryContactService` class to use the
    custom functionality. This step has the following two phases:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是修改`RepositoryContactService`类以使用自定义功能。这一步有以下两个阶段：
- en: Remove the `buildPageSpecification()` and `sortByLastNameAndFirstNameAsc()`
    methods.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除`buildPageSpecification()`和`sortByLastNameAndFirstNameAsc()`方法。
- en: Modify the `findAllForPage()` and `search()` methods to delegate the method
    call forward to our repository.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`findAllForPage()`和`search()`方法，将方法调用委托给我们的存储库。
- en: 'The source code of the modified methods is given as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的方法的源代码如下：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What did we just do?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们刚刚做了什么？
- en: 'We just moved the pagination and search logic from the `RepositoryContactService`
    class to the `ContactRepositoryImpl` class and eliminated the dependency between
    our service layer and Querydsl. The outcome of our actions is illustrated in the
    following diagram:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚将分页和搜索逻辑从`RepositoryContactService`类移动到`ContactRepositoryImpl`类，并消除了我们的服务层与Querydsl之间的依赖。我们行动的结果如下图所示：
- en: '![What did we just do?](img/9045_04_02.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![我们刚刚做了什么？](img/9045_04_02.jpg)'
- en: Adding custom functionality to all repositories
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向所有存储库添加自定义功能
- en: Sometimes we have to add custom functionality to all repositories. In this section,
    we will learn how we can do this and create a custom repository method that is
    used to delete an entity by using its ID.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们必须向所有存储库添加自定义功能。在本节中，我们将学习如何做到这一点，并创建一个用于通过ID删除实体的自定义存储库方法。
- en: 'We can add custom functionality to all repositories by following these steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤向所有存储库添加自定义功能：
- en: Create a base interface that declares the custom methods.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个声明自定义方法的基础接口。
- en: Implement the created interface.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现创建的接口。
- en: Create a repository factory bean.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个存储库工厂bean。
- en: Configure Spring Data JPA to use our repository factory bean.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Spring Data JPA以使用我们的存储库工厂bean。
- en: Create a repository interface.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个存储库接口。
- en: Implement a service class that uses the custom functionality.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现使用自定义功能的服务类。
- en: Creating the base repository interface
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基础存储库接口
- en: 'We start by creating a base repository interface that declares the methods
    that are available in the actual repositories. We can do this by:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个声明了实际存储库中可用方法的基础存储库接口。我们可以通过以下方式实现：
- en: Creating an interface that takes the type of the managed entity and the type
    of its ID as a type parameter.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接口，将受管实体的类型和其ID的类型作为类型参数。
- en: Extending both the `JpaRepository<T, ID>` and `QueryDslPredicateExecutor<T>`
    interfaces in our base repository interface.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的基础存储库接口中同时扩展`JpaRepository<T, ID>`和`QueryDslPredicateExecutor<T>`接口。
- en: Annotating the interface with the `@NoRepositoryBean` annotation. This ensures
    that Spring Data JPA does not create a repository implementation for this interface.
    Another solution is to move this interface from the repository base package, but
    since it is often hard to find a logical place for it, we will not do it.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`@NoRepositoryBean`注解标注接口。这可以确保Spring Data JPA不会为该接口创建存储库实现。另一个解决方案是将该接口从存储库基础包中移出，但由于很难找到一个合适的逻辑位置，我们暂时不这样做。
- en: Adding a `T deleteById(ID id)` method to this interface. This method returns
    the deleted entity, and it throws `NotFoundException` if no entity is found with
    the ID that is given as a parameter.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向该接口添加一个`T deleteById(ID id)`方法。该方法返回被删除的实体，并且如果没有找到给定ID的实体，则抛出`NotFoundException`。
- en: 'Let''s call this interface `BaseRepository`. Its source code is given as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称这个接口为`BaseRepository`。其源代码如下：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Implementing the base repository interface
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现基础存储库接口
- en: 'Next we have to write an implementation of the `BaseRepository<T, ID>` interface.
    This process includes the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们必须编写`BaseRepository<T, ID>`接口的实现。这个过程包括以下步骤：
- en: Create a class that implements the `BaseRepository<T, ID>` interface and extends
    the `QueryDslJpaRepository<T, ID>` class. This ensures that the class has access
    to the methods provided by the `JpaRepository<T, ID>` interface and that Querydsl
    can be used.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现`BaseRepository<T, ID>`接口并扩展`QueryDslJpaRepository<T, ID>`类的类。这确保了该类可以访问`JpaRepository<T,
    ID>`接口提供的方法，并且可以使用Querydsl。
- en: Add a constructor that is used to simply pass the needed information forward
    to the superclass.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个构造函数，用于简单地将所需的信息传递给超类。
- en: Implement the `deleteById()` method. First, this method obtains the deleted
    entity. If an entity is not found, this method throws `NotFoundException`. Otherwise
    this method deletes the found entity and returns the deleted entity.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`deleteById()`方法。首先，该方法获取被删除的实体。如果找不到实体，该方法会抛出`NotFoundException`。否则，该方法会删除找到的实体并返回被删除的实体。
- en: 'The source code of the created `GenericBaseRepository` class is given as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的`GenericBaseRepository`类的源代码如下：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating the repository factory bean
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储库工厂bean
- en: 'Now that we have implemented the custom functionality, we have to ensure that
    it is used when the concrete repository implementations are created. This means
    that we have to create a custom repository factory bean that replaces the default
    repository factory bean. Our repository factory bean has a single purpose: It
    will provide `GenericBaseRepository` as an implementation of all interfaces extending
    the `Repository` interface. We can create a custom repository factory bean by
    following these steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了自定义功能，我们必须确保在创建具体存储库实现时使用它。这意味着我们必须创建一个自定义存储库工厂bean来替换默认的存储库工厂bean。我们的存储库工厂bean有一个单一目的：它将`GenericBaseRepository`作为`Repository`接口的所有扩展接口的实现。我们可以通过以下步骤创建一个自定义存储库工厂bean：
- en: Create a skeleton of the repository factory bean class.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建存储库工厂bean类的框架。
- en: Create a repository factory class.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个存储库工厂类。
- en: Create a builder method used to build new repository factories.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于构建新存储库工厂的构建方法。
- en: Creating the skeleton of the repository factory bean class
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建存储库工厂bean类的框架
- en: 'First we have to create the repository factory bean class. This class must
    extend the `JpaRepositoryFactoryBean<R, T, I>` class that is the default repository
    factory bean of Spring Data JPA. This class has three type parameters: the type
    of the repository, the type of the entity, and the type of the entity''s ID. The
    source code of the class skeleton is given as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建存储库工厂bean类。这个类必须扩展Spring Data JPA的默认存储库工厂bean`JpaRepositoryFactoryBean<R,
    T, I>`类。这个类有三个类型参数：存储库的类型，实体的类型和实体的ID的类型。类骨架的源代码如下：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating the repository factory inner class
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建存储库工厂内部类
- en: 'The second step is to create the actual repository factory class. The implementation
    of this class includes the following steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是创建实际的存储库工厂类。这个类的实现包括以下步骤：
- en: Add the `BaseRepositoryFactory` class as a protected inner class to the `BaseRepositoryFactoryBean`
    class.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BaseRepositoryFactory`类作为`BaseRepositoryFactoryBean`类的受保护内部类添加进去。
- en: Make the created class extend the `JpaRepositoryFactory` class.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使创建的类扩展`JpaRepositoryFactory`类。
- en: Override the `getTargetRepository()` method of the `JpaRepositoryFactory` class.
    This method is responsible for creating the actual repository implementations.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`JpaRepositoryFactory`类的`getTargetRepository()`方法。这个方法负责创建实际的存储库实现。
- en: Override the `getRepositoryBaseClass()` method of the `JpaRepositoryFactory`
    class, which simply returns the class of the base repository implementation. We
    can ignore the metadata given as a parameter because that information is used
    by the `JpaRepositoryFactory` to decide whether it should return the `SimpleJpaRepository`
    or `QueryDslJpaRepository` class.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`JpaRepositoryFactory`类的`getRepositoryBaseClass()`方法，该方法简单地返回基本存储库实现的类。我们可以忽略作为参数给出的元数据，因为该信息由`JpaRepositoryFactory`用于决定它是否应该返回`SimpleJpaRepository`或`QueryDslJpaRepository`类。
- en: 'The source code of the repository factory inner class is given as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库工厂内部类的源代码如下：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the builder method for the repository factory
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为存储库工厂创建构建方法
- en: 'We can create new instances of our custom repository factory class by overriding
    the `createRepositoryFactory()` method of the `JpaRepositoryFactoryBean` class
    in the `BaseRepositoryFactoryBean` class. This method simply creates a new instance
    of the `BaseRepositoryFactory` class and passes an entity manager reference as
    a constructor parameter. The source code of the overridden method is given as
    follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过重写`BaseRepositoryFactoryBean`类中的`createRepositoryFactory()`方法来创建我们自定义存储库工厂类的新实例。这个方法简单地创建了`BaseRepositoryFactory`类的一个新实例，并将实体管理器引用作为构造函数参数传递。重写方法的源代码如下：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Configuring Spring Data JPA
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Spring Data JPA
- en: 'Next we have to configure Spring Data JPA to use the custom repository factory
    bean when it is creating concrete implementations of repository interfaces. We
    can do this by using the `repositoryFactoryBeanClass` property of the `@EnableJpaRepositories`
    annotation. In other words, we have to add the following annotation to the `ApplicationContext`
    class:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须配置Spring Data JPA在创建存储库接口的具体实现时使用自定义存储库工厂bean。我们可以通过使用`@EnableJpaRepositories`注解的`repositoryFactoryBeanClass`属性来实现这一点。换句话说，我们必须将以下注解添加到`ApplicationContext`类中：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we are using XML to configure our application, we can use the `factory-class`
    attribute of Spring Data JPA's `repositories` namespace element.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在使用XML配置我们的应用程序，我们可以使用Spring Data JPA的`repositories`命名空间元素的`factory-class`属性。
- en: Creating the repository interface
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储库接口
- en: 'We have now made the custom functionality available to all repositories. Now
    we have to create a repository interface for the `Contact` entity. We can do this
    by following these steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使自定义功能对所有存储库可用。现在我们必须为`Contact`实体创建一个存储库接口。我们可以按照以下步骤来做到这一点：
- en: Remove the `JpaRepository` and the `QueryDslPredicateExecutor` interfaces from
    the list of extended interfaces.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从扩展接口的列表中移除`JpaRepository`和`QueryDslPredicateExecutor`接口。
- en: Extend the `BaseRepository<T, ID>` interface.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`BaseRepository<T, ID>`接口。
- en: 'The source code of the `ContactRepository` interface is given as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContactRepository`接口的源代码如下：'
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Implementing the service layer
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现服务层
- en: 'Because the old implementation of the `delete()` method of the `RepositoryContactService`
    class contained the same functionality as our new `deleteById()` repository method,
    we have to change the `delete()` method of the `RepositoryContactService` class
    to delegate the method call forward to the new repository method. The source code
    of our new `delete()` method is given as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`RepositoryContactService`类的`delete()`方法的旧实现包含与我们的新`deleteById()`存储库方法相同的功能，所以我们必须将`RepositoryContactService`类的`delete()`方法更改为将方法调用委托给新的存储库方法。我们的新`delete()`方法的源代码如下：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What did we just do?
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们刚刚做了什么？
- en: 'We implemented a generic delete method that is automatically available to all
    repositories of our application. This eliminates the need to add entity specific
    delete logic to the service layer and reduces code duplication. We also created
    a custom repository factory that provides `GenericBaseRepository` as an implementation
    for our repository interface. The result of our work is illustrated in the following
    diagram:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个通用的删除方法，该方法自动对我们应用程序的所有存储库可用。这消除了将特定于实体的删除逻辑添加到服务层的需要，并减少了代码重复。我们还创建了一个自定义存储库工厂，为我们的存储库接口提供`GenericBaseRepository`作为实现。我们的工作结果如下图所示：
- en: '![What did we just do?](img/9045_04_03.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![我们刚刚做了什么？](img/9045_04_03.jpg)'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned that we can add custom functionality either
    to a single repository or to all repositories. However, this chapter also had
    another very important lesson. We noticed that adding custom functionality to
    repositories increases the complexity of our application and forces us to write
    boilerplate code that can be cumbersome to both implement and maintain. That is
    why we should use the techniques described in this chapter only when it is absolutely
    necessary.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学会了如何向单个存储库或所有存储库添加自定义功能。然而，本章还有另一个非常重要的教训。我们注意到，向存储库添加自定义功能会增加应用程序的复杂性，并迫使我们编写样板代码，这可能会让实现和维护都变得繁琐。这就是为什么我们应该只在绝对必要的时候使用本章描述的技术。
- en: This was the last chapter that describes the usage of Spring Data JPA. In the
    next chapter, we will learn how we can install Redis on a computer that runs a
    Unix-like operating system and set up a web application project that uses Redis
    as a data storage.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最后一章，描述了Spring Data JPA的用法。在下一章中，我们将学习如何在运行类Unix操作系统的计算机上安装Redis，并设置一个使用Redis作为数据存储的Web应用项目。
