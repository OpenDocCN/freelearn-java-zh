- en: MicroProfile Config and Fault Tolerance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务配置和容错
- en: In this chapter, we will start by introducing MicroProfile Config as it is the
    basis for the configuration of other MicroProfile features, in addition to application-level
    configuration. The MicroProfile Config specification provides a common way to
    retrieve configuration coming from a variety of sources (properties files, system
    properties, environment variables, databases, and so on).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先介绍微服务配置，因为它是其他微服务功能配置的基础，除了应用程序级配置。微服务配置规范提供了一种通用方法，用于从各种来源（属性文件、系统属性、环境变量、数据库等）检索配置。
- en: 'The topics we will cover include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖的主题包括以下内容：
- en: Reading configuration from your application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从您的应用程序读取配置
- en: Providing additional sources of configuration to your application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用程序提供额外的配置源
- en: Providing conversion from plain configuration into application-specific objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供将普通配置转换为特定于应用程序对象的转换
- en: Understanding Eclipse MicroProfile Config
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Eclipse微服务配置
- en: Every application needs some external configuration to adapt its behavior to
    the runtime platform it's running on. It can range from the HTTP endpoints that
    the application must connect to, or the size of some internal structures.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都需要一些外部配置，以使其行为适应其正在运行的运行时平台。这可以从应用程序必须连接到的HTTP端点，或者某些内部结构的大小。
- en: 'These configuration parameters can also come from different sources:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置参数也可以来自不同的来源：
- en: From the operating system or the container in a cloud-native environment (through
    the use of environment variables)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从操作系统或云原生环境中的容器（通过使用环境变量）
- en: From the Java virtual machine (with system properties)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Java虚拟机（通过系统属性）
- en: From some external configuration files (such as the Java properties file)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一些外部配置文件（如Java属性文件）
- en: From other places (an LDAP server, database, key-value store, and so on)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其他地方（如LDAP服务器、数据库、键值存储等）
- en: On the one hand, these configuration parameters come from many different sources.
    On the ...
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，这些配置参数来自许多不同的来源。在...
- en: Reading configuration from the MicroProfile Config API
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从微服务配置API读取配置
- en: 'The MicroProfile Config specification defines two objects to read the value
    of configuration parameters:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务配置规范定义了两个对象来读取配置参数的值：
- en: The `Config` object to programmatically access the configuration values
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Config`对象以编程方式访问配置值
- en: The `@ConfigProperty` annotation to inject the configuration values using **Contexts
    and Dependency Injection** (**CDI**)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ConfigProperty`注解用于使用**上下文和依赖注入**（**CDI**）注入配置值'
- en: Let's discuss them in detail.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论它们。
- en: The Config object
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置对象
- en: The `org.eclipse.microprofile.config.Config` interface is the entry point to
    retrieve configuration in a Java application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.config.Config`接口是检索Java应用程序中配置的入口点。'
- en: 'There are two ways to get an instance of `Config`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`Config`实例有两种方法：
- en: 'The first (and preferred) way is to use CDI to inject it into the code:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一种（且首选）方法是使用CDI将其注入代码中：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second way is to call the static method, `org.eclipse.microprofile.config.ConfigProvider#getConfig()`,
    to obtain an instance of `Config`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二种方法是调用静态方法`org.eclipse.microprofile.config.ConfigProvider#getConfig()`，以获取`Config`实例：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Config` interface provides two methods to retrieve properties:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Config`接口提供两种检索属性的方法：'
- en: '`getValue(String propertyName, Class propertyType)`: This method throws a runtime exception
    if the property is not present in the configuration. This method must be used
    only for **mandatory** configuration ...'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getValue(String propertyName, Class propertyType)`：如果配置中不存在该属性，此方法将抛出运行时异常。仅对于**必需**的配置才应使用此方法
    ...'
- en: The @ConfigProperty annotation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@ConfigProperty`注解'
- en: 'The `@ConfigProperty` annotation can be used to inject configuration values
    in Java fields or method parameters using CDI, as shown:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ConfigProperty`注解可用于使用CDI将配置值注入Java字段或方法参数，如所示：'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `@ConfigProperty` annotation can have `defaultValue`, which is used to
    configure the field if the configuration property is not found in the underlying
    `Config`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ConfigProperty`注解可以有一个`defaultValue`，如果在底层的`Config`中找不到配置属性，则用于配置字段：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If `defaultValue` is not set and no property is found, the application will
    throw `DeploymentException` as it cannot be properly configured.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未设置`defaultValue`且未找到任何属性，应用程序将抛出`DeploymentException`，因为无法正确配置。
- en: 'It is possible to use `Optional` if a configuration property might not be present,
    as shown in the following code block:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个配置属性可能不存在，可以使用`Optional`，如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After reading the configuration, we need to provide source configuration sources,
    which will be covered in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取配置之后，我们需要提供源配置源，这部分将在下一节中介绍。
- en: Providing sources of configuration
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供配置源
- en: The source of a configuration is represented by the `ConfigSource` interface.
    You do not need to implement this interface unless you want to provide a source
    of configurations that are not available by the MicroProfile implementation you
    use in your application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 配置源由`ConfigSource`接口表示。除非你想提供在你应用程序中使用的MicroProfile实现不可用的配置源，否则你不需要实现这个接口。
- en: If a property is found in multiple config sources, `Config` will return the
    value from the `ConfigSource` interface with the highest `ordinal` value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在多个配置源中找到了一个属性，`Config`将返回`ConfigSource`接口中序号最高的值。
- en: Ordering `ConfigSource` is important as users can provide custom `ConfigSource` interfaces
    in addition to the default ones provided by the MicroProfile Config implementation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 排序`ConfigSource`很重要，因为用户可以提供自定义的`ConfigSource`接口，这除了由MicroProfile Config实现提供的默认接口。
- en: Default ConfigSources
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认的ConfigSources
- en: 'By default, a MicroProfile Config implementation must provide three sources
    of configuration:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，一个MicroProfile Config实现必须提供三个配置源：
- en: System properties from the Java virtual machine (with an ordinal of `400`)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Java虚拟机系统的属性（序号为`400`）
- en: Environment variables (with an ordinal of `300`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量（序号为`300`）
- en: Properties stored in `META-INF/microprofile-config.properties` (with an ordinal
    of `100`)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在`META-INF/microprofile-config.properties`中的属性（序号为`100`）
- en: The ordinal value of a config source determines the precedence of the config
    source. In particular, if a property is defined both in the system properties
    and the environment variables, the value will be taken from the system properties
    (which has a higher ordinal than the environment variables).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 配置源的`ordinal`值决定了配置源的优先级。特别是，如果一个属性既在系统属性中定义，又在环境变量中定义，将采用系统属性的值（其序号高于环境变量）。
- en: There are no restrictions on the names of properties. However, some operating
    systems can impose some restrictions on the name of the environment variables
    (for example, `"."` is not allowed by most Unix shells). If you have a property
    that could be configured from the environment variables, you have to name your
    property accordingly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 属性名没有限制。然而，一些操作系统可能会对环境变量的名称施加一些限制（例如，大多数Unix壳牌不允许`"."`）。如果您有一个可能从环境变量中配置的属性，您必须相应地命名您的属性。
- en: For example, the property name `my_url` can be used by an environment variable
    while `my.url` cannot.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，属性名`my_url`可以由环境变量使用，而`my.url`则不行。
- en: '**New in MicroProfile Config 1.3** MicroProfile Config 1.3 introduces a mapping
    rule from the config property name to the environment variable. This rule searches
    three environment variable variants for each property name:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**MicroProfile Config 1.3 新特性** MicroProfile Config 1.3引入了一个从配置属性名到环境变量的映射规则。这个规则为每个属性名搜索三个环境变量的变体：'
- en: Exact match
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确匹配
- en: Replace any non-alphanumeric character with `_`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任何非字母数字字符替换为`_`
- en: Replace any non-alphanumeric character with `_` and use uppercase
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任何非字母数字字符替换为`_`并使用大写字母
- en: This means that, in the Java application, we can have a property named `app.auth.url` and
    use the `APP_AUTH_URL` environment variable to configure it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在Java应用程序中，我们可以有一个名为`app.auth.url`的属性，并使用`APP_AUTH_URL`环境变量来配置它。
- en: Let's move on to the other type of configuration source.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们看看另一种配置源。
- en: Custom ConfigSources implementations
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义ConfigSources实现
- en: It is possible to provide additional sources of configuration in your application
    that will be automatically added by the MicroProfile Config implementation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中，可以提供额外的配置源，这些源将由MicroProfile Config实现自动添加。
- en: 'You need to define an implementation of `org.eclipse.microprofile.config.spi.ConfigSource`
    and add a Java `ServiceLoader` configuration for it, and put that file in your
    application archive as `META-INF/services/``org.eclipse.microprofile.config.spi.ConfigSource`.
    For your reference, here is an example of the definition of an implementation
    of an environment `ConfigSource`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要定义一个`org.eclipse.microprofile.config.spi.ConfigSource`的实现，并为它添加一个Java `ServiceLoader`配置，并将该文件放在你的应用程序归档中作为`META-INF/services/`
    `org.eclipse.microprofile.config.spi.ConfigSource`。供您参考，以下是一个环境`ConfigSource`实现定义的示例：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using converters for high-level configuration
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用转换器进行高级配置
- en: MicroProfile Config will read Java `String` objects from its `ConfigSource`.
    However, it provides facilities to *convert* these `String` objects into more
    specific types in your application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Config将从其`ConfigSource`读取Java `String`对象。然而，它提供了将这些`String`对象转换为应用程序中更具体类型的设施。
- en: For example, the `myUrl` field we described previously is a `URL` object. The
    corresponding property, `my.url`, is read as a `String` object and then converted
    into a `URL` object before it is injected.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们之前描述的`myUrl`字段是一个`URL`对象。相应的属性`my.url`以`String`对象的形式读取，然后在被注入之前转换为`URL`对象。
- en: 'If the application uses the `Config` object, the MicroProfile Config implementation
    will also convert the `String` object into the type passed as the second argument
    of the `getValue` and `getOptionalValue` methods. This conversion can be done
    using different converter types: built-in, automatic, and custom. We will talk
    about them in detail now.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用`Config`对象，MicroProfile Config实现也将把`String`对象转换为`getValue`和`getOptionalValue`方法的第二个参数传递的类型。这个转换可以使用不同的转换器类型：内置、自动和自定义。我们现在将详细讨论它们。
- en: Built-in converters
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置转换器
- en: The MicroProfile Config implementation provides built-in converters for the
    primitive types (`boolean`, `int`, `long`, `byte`, `float`, and `double`) and
    their corresponding Java types (for example, `Integer`).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Config实现为基本类型（`boolean`、`int`、`long`、`byte`、`float`和`double`）及其对应的Java类型（例如`Integer`）提供了内置转换器。
- en: 'It also provides support for arrays in the property value using the `","` as
    the item separator. If the `","` must be part of an item, it must be escaped with
    a backslash `"\"`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了使用`","`作为项目分隔符在属性值中支持数组的功能。如果`","`必须是项目的一部分，它必须用反斜杠`"\"`转义：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the value of the `myPets` property is `dog,cat,dog\\,cat`, the elements of
    the array stored in `pets` would be `{"dog", "cat", "dog,cat"}`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`myPets`属性的值是`dog,cat,dog\\,cat`，存储在`pets`中的数组的元素将是`{"dog", "cat", "dog,cat"}`。
- en: Automatic converters
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动转换器
- en: 'MicroProfile Config also defines *automatic converters*. If a converter is
    not known for a given Java type, it will attempt to convert a `String` object
    into it using any one of the three different approaches:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Config还定义了*自动转换器*。如果一个转换器对给定的Java类型未知，它将尝试使用三种不同的方法之一将`String`对象转换为它：
- en: The Java type has a public constructor with a `String` parameter.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java类型有一个带有`String`参数的公共构造函数。
- en: It has a `public static valueOf(String)` method.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个`public static valueOf(String)`方法。
- en: It has a `public static parse(String)` method.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个`public static parse(String)`方法。
- en: That's how the `my.url` property was converted from `String` into `URL` since
    the `java.net.URL` type has the `public URL(String)` constructor.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`my.url`属性如何从`String`转换为`URL`，因为`java.net.URL`类型有一个`public URL(String)`构造函数。
- en: Custom converters
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义转换器
- en: 'If your application defines Java types that do not provide any of these three cases
    covered by the automatic converters, MicroProfile Config can still provide conversion
    using custom converters that extend the `org.eclipse.microprofile.config.spi.Converter`
    interface defined in the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序定义了Java类型，这些类型不提供自动转换器涵盖的这三个案例，MicroProfile Config仍然可以使用自定义转换器提供转换，这些转换器扩展了以下定义的`org.eclipse.microprofile.config.spi.Converter`接口：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You have to write an implementation of `org.eclipse.microprofile.config.spi.Converter`,
    then add its name to the `/META-INF/services/org.eclipse.microprofile.config.spi.Converter
    ...`
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须编写一个`org.eclipse.microprofile.config.spi.Converter`的实现，然后将其名称添加到`/META-INF/services/org.eclipse.microprofile.config.spi.Converter
    ...`
- en: Understanding Eclipse MicroProfile Fault Tolerance
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Eclipse MicroProfile容错
- en: Fault Tolerance provides a collection of tools that prevent code from failing
    by making it more resilient. Most of these tools are inspired by development good
    practices (such as retry or fallback) or well-known development patterns (such
    as circuit breaker or bulkhead).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 容错提供了一组工具，通过使代码更具弹性来防止代码失败。其中大多数工具受到了良好的开发实践（如重试或回退）或知名开发模式（如断路器或隔舱）的启发。
- en: Fault Tolerance is based on CDI and, more precisely, on the CDI interceptor
    implementation. It also relies on the MicroProfile Config specification to allow
    external configuration for Fault Tolerance policies.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 容错基于CDI ，更确切地说，是基于CDI拦截器实现。它还依赖于MicroProfile Config规范，以允许为容错策略提供外部配置。
- en: The main idea of the specification is to decouple business logic from Fault
    Tolerance boilerplate code. To achieve that, the specification defines interceptor-binding
    annotations to apply Fault Tolerance policies on a method execution or on a class
    (in that case, all class methods have the same policy).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 规范的主要思想是将业务逻辑与容错样板代码解耦。为了实现这一点，规范定义了拦截器绑定注解，以在方法执行或类上（在这种情况下，所有类方法具有相同的策略）应用容错策略。
- en: 'Policies included in the Fault Tolerance specification are the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 容错规范中包含的政策如下：
- en: '**Timeout**: This is applied with the `@Timeout` annotation. It adds a timeout
    to the current operation.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时**：这是使用`@Timeout`注解 applied。它在当前操作中添加了超时。'
- en: '**Retry**: This is applied with the `@Retry` annotation. It adds retry behavior
    and allows its configuration on the current operation.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重试**：这是使用`@Retry`注解 applied。它添加了重试行为，并允许对当前操作进行配置。'
- en: '**Fallback**: This is applied with the `@Fallback` annotation. It defines the
    code to execute, should the current operation fail.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回退**：这是使用`@Fallback`注解 applied。它定义了在当前操作失败时应执行的代码。'
- en: '**Bulkhead**: This is applied with the `@Bulkhead` annotation. It isolates
    failures in the current operation to preserve the execution of other operations.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '** bulkhead**：这是使用`@Bulkhead`注解 applied。它将当前操作中的故障隔离以保留其他操作的执行。'
- en: '**Circuit Breaker**: This is applied with the `@CircuitBreaker` annotation.
    It provides an automatic fast failing execution to prevent overloading the system.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断路器**：这是使用`@CircuitBreaker`注解 applied。它提供了一个自动快速失败的执行，以防止系统过载。'
- en: '**Asynchronous**: This is applied with the `@Asynchronous` annotation. It makes
    the current operation asynchronous (that is, code will be invoked asynchronously).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步**：这是使用`@Asynchronous`注解 applied。它将当前操作设置为异步（也就是说，代码将异步调用）。'
- en: Applying one or more of these policies is as easy as adding the required annotations
    on the method (or the class) for which you'd like to have these policies enabled.
    So, using Fault Tolerance is rather simple. But this simplicity doesn't prevent
    flexibility, thanks to all of the configuration parameters available for each
    policy.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 应用这些策略之一或多个就像在需要这些策略的方法（或类）上添加所需的注解一样简单。所以，使用容错是非常简单的。但这种简单性并没有阻止灵活性，感谢所有可用配置参数每个策略。
- en: 'Right now, the following vendors provide an implementation for the Fault Tolerance
    specification:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，以下供应商为Fault Tolerance规范提供实现：
- en: Red Hat in Thorntail and Quarkus
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat in Thorntail and Quarkus
- en: IBM in Open Liberty
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM in Open Liberty
- en: Payara in Payara Server
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Payara in Payara Server
- en: Apache Safeguard for Hammock and TomEE
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Safeguard for Hammock and TomEE
- en: KumuluzEE for KumuluzEE framework
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KumuluzEE for KumuluzEE framework
- en: All of these implementations support Fault Tolerance and hence support the same
    set of features that are described in the next section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些实现都支持容错，因此支持下一节中描述的相同一组功能。
- en: MicroProfile Fault Tolerance in action
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance in action
- en: As we just discussed, the Fault Tolerance specification provides a set of annotations
    that you have to apply on a class or method to enforce Fault Tolerance policies.
    That being said, you have to keep in mind that these annotations are interceptors
    binding and hence are only usable on CDI beans. So, be careful to define your
    class as CDI beans before applying Fault Tolerance annotations on them or their
    methods.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚刚讨论的，Fault Tolerance规范提供了一组注解，您需要将这些注解应用于类或方法以强制执行容错策略。话虽如此，您必须记住这些注解是拦截器绑定，因此仅适用于CDI
    bean。所以，在将容错注解应用于它们或其方法之前，请务必小心地将您的类定义为CDI beans。
- en: In the following sections, you'll find usage examples for each Fault Tolerance
    annotation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下各节中，您将找到每个容错注解的用法示例。
- en: The @Asynchronous policy
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The @Asynchronous policy
- en: 'Making an operation asynchronous is as simple as the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使操作异步就像以下这样简单：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The only constraint is to have the `@Asynchronous` method return `Future` or
    `CompletionStage`; otherwise, the implementation should throw an exception.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的限制是`@Asynchronous`方法必须返回`Future`或`CompletionStage`；否则，实现应该抛出异常。
- en: The @Retry policy
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@Retry`策略'
- en: 'Should the operation fail, you can apply the retry policy to have the operation
    invoked again. The `@Retry` annotation can be used on a class or method level
    like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作失败，你可以应用重试策略，以便再次调用操作。`@Retry`注解可以像这样应用于类或方法级别：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the previous example, the operation should be retried a maximum of five times
    only on `IOException`. If the total duration of all retries lasts more than 1,000
    ms, the operation will be aborted.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，操作应该只在发生`IOException`时最多重试五次。如果所有重试的总持续时间超过1,000毫秒，则操作将被取消。
- en: The @Fallback policy
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@Fallback`策略'
- en: 'The `@Fallback` annotation can only be applied on a method; annotating a class
    will give an unexpected result:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Fallback`注解只能应用于方法；注释类将产生意外结果：'
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The fallback method is called after the number of retries is reached. In the
    previous example, the method will be retried twice in case of an error, and then
    the fallback will be used to invoke another piece of code—in this case, the following
    `StringFallbackHandler` class:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在达到重试次数后调用回退方法。在前一个示例中，如果出现错误，方法将重试两次，然后使用回退调用另一段代码——在这个例子中，下面的`StringFallbackHandler`类：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fallback code can be defined by a class implementing the `FallbackHandler` interface
    (see the previous code) or by a method in the current bean. In the `StringFallbackHandler`
    code, a MicroProfile Config property named `app1.requestFallbackReply` is used
    to externalize the application's fallback string value.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过实现`FallbackHandler`接口的类或当前bean中的方法定义回退代码（见前一个代码）。在`StringFallbackHandler`代码中，使用了名为`app1.requestFallbackReply`的MicroProfile
    Config属性来外部化应用程序的回退字符串值。
- en: The @Timeout policy
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@Timeout`策略'
- en: 'The `@Timeout` annotation could be applied to a class or method to make sure
    that an operation doesn''t last forever:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Timeout`注解可以应用于类或方法，以确保操作不会永远持续：'
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, the operation will be stopped should it last more
    than 200 ms.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，如果操作持续时间超过200毫秒，则将停止操作。
- en: The @CircuitBreaker policy
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@CircuitBreaker`策略'
- en: 'The `@CircuitBreaker` annotation can be applied to a class or method. The circuit
    breaker pattern was introduced by Martin Fowler to protect the execution of an
    operation by making it fail fast in case of a dysfunction:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`@CircuitBreaker`注解可以应用于类或方法。电路断路器模式由马丁·福勒引入，旨在通过使其在功能失调时快速失败来保护操作的执行：'
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the previous example, the method applies the `CircuitBreaker` policy. The
    circuit will be opened if three (*4 x 0.75*) failures occur among the rolling
    window of four consecutive invocations. The circuit will stay open for 1,000 ms
    and then be back to half-open. After a successful invocation, the circuit will
    be back to closed again.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，方法应用了`CircuitBreaker`策略。如果在四个连续调用滚动窗口中发生三次（*4 x 0.75*）失败，则电路将被打开。电路将在1,000毫秒后保持打开状态，然后回到半开状态。在一个成功的调用之后，电路将再次关闭。
- en: The @Bulkhead policy
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@Bulkhead`策略'
- en: 'The `@Bulkhead` annotation can also be applied to a class or method to enforce
    the bulkhead policy. This pattern isolates failures in the current operation to
    preserve the execution of other operations. The implementation does this by limiting
    the number of concurrent invocations on a given method:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Bulkhead`注解也可以应用于类或方法以强制执行 bulkhead 策略。这种模式通过限制给定方法的同时调用次数来隔离当前操作中的故障，以保留其他操作的执行。'
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the previous code, this method only supports four invocations at the same
    time. Should more than four simultaneous requests come into the `bulkheadedOperation`
    method, the system will hold the fifth and later requests until one of the four
    active invocations completes. The bulkhead annotation can also be used with `@Asynchronous`
    to limit the thread number in an asynchronous ...
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个代码中，这个方法只支持四个同时调用。如果超过四个同时请求进入`bulkheadedOperation`方法，系统将保留第五个及以后的请求，直到四个活动调用之一完成。bulkhead
    注解还可以与`@Asynchronous`结合使用，以限制异步中的线程数...
- en: Tolerance with MicroProfile config
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微配置中的容错性
- en: As we saw in the previous sections, Fault Tolerance policies are applied by
    using annotations. For most use cases, this is enough, but for others, this approach
    may not be satisfactory because configuration is done at the source code level.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几节所看到的，Fault Tolerance策略是通过使用注解来应用的。对于大多数用例来说，这已经足够了，但对于其他一些情况，这种方法可能不令人满意，因为配置是在源代码级别完成的。
- en: That's the reason why the parameters of MicroProfile Fault Tolerance annotations
    can be overridden using MicroProfile Config.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么MicroProfile Fault Tolerance注解的参数可以通过MicroProfile Config进行覆盖的原因。
- en: 'The annotation parameters can be overwritten via config properties using the
    following naming convention: `<classname>/<methodname>/<annotation>/<parameter>`.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注解参数可以通过使用以下命名约定来通过配置属性覆盖：`<classname>/<methodname>/<annotation>/<parameter>`。
- en: 'To override `maxDuration` for `@Retry` on the `doSomething` method in the `MyService`
    class, set the config property like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖`MyService`类中`doSomething`方法的`@Retry`的`maxDuration`，请像这样设置配置属性：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If the parameters for a particular annotation need to be configured with the
    same value for a particular class, use the `<classname>/<annotation>/<parameter>`
    config property for configuration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要为特定类配置与特定注解相同的参数值，请使用`<classname>/<annotation>/<parameter>`配置属性进行配置。
- en: 'For instance, use the following config property to override all `maxRetries`
    for `@Retry` specified on the `MyService` class to 100:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用以下配置属性来覆盖`MyService`类上`@Retry`的所有`maxRetries`为100：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Sometimes, the parameters need to be configured with the same value for the
    whole microservice (that is, all occurrences of the annotation in the deployment).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，需要为整个微服务（即在部署中所有注解的出现）配置相同的参数值。
- en: 'In this circumstance, the `<annotation>/<parameter>` config property overrides
    the corresponding parameter value for the specified annotation. For instance,
    to override all `maxRetries` for all of `@Retry` to be 30, specify the following
    config property:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`<annotation>/<parameter>`配置属性将覆盖指定注解的相应参数值。例如，要覆盖所有`@Retry`的`maxRetries`为30，请指定以下配置属性：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This brings us to the end of discussion on Fault Tolerance in MicroProfile.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们结束了关于MicroProfile中的Fault Tolerance的讨论。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use MicroProfile Config to configure MicroProfile
    applications and MicroProfile Fault Tolerance to make them more resilient.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用MicroProfile Config来配置MicroProfile应用程序以及MicroProfile Fault Tolerance使其更具弹性。
- en: In MicroProfile Config, the sources of the configuration can be many; some values
    come from properties files and others from system properties or environment variables,
    but they are all accessed consistently from the Java application. The values will
    likely differ according to the deployment environment (for example, testing and
    production) but that is transparent in the application code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在MicroProfile Config中，配置来源可以有很多；一些值来自属性文件，其他来自系统属性或环境变量，但它们都是从Java应用程序一致访问的。这些值可能会根据部署环境（例如，测试和生产）而有所不同，但在应用程序代码中这是透明的。
- en: MicroProfile Fault Tolerance helps to prevent failure in applications by applying
    specific policies in the code. It comes with default behavior but can be configured
    thanks to MicroProfile ...
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance通过在代码中应用特定策略来防止应用程序失败。它带有默认行为，但可以通过MicroProfile进行配置...
- en: Questions
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the default sources of configuration properties supported by MicroProfile
    Config?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile Config支持哪些默认的配置属性来源？
- en: What can you do if you need to integrate another source of configuration properties?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要将另一个配置属性源集成在一起，您可以做什么？
- en: Are only the string type of properties supported?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只支持字符串类型的属性吗？
- en: Does injecting a configuration property into your code force you to provide
    a value for that property?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置属性注入代码是否迫使您为该属性提供值？
- en: Suppose you have complex property types. Is there a way to integrate them into MicroProfile
    Config?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您有复杂的属性类型。是否有方法将它们集成到MicroProfile Config中？
- en: What happens when a Fault Tolerance annotation is applied to a class?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一个Fault Tolerance注解应用于一个类时会发生什么？
- en: 'True or false: there are at least 10 different Fault Tolerance policies?'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：至少有10种不同的Fault Tolerance策略？
- en: Does a `@Retry` policy require a retry on all failures?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@Retry`策略是否需要在所有失败上进行重试？'
- en: Are we stuck with the Fault Tolerance annotation setting that is used in the
    application code?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们是否必须使用应用程序代码中使用的Fault Tolerance注解设置？
- en: Further reading
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Additional details for the MicroProfile Config feature can be found in the MicroProfile
    Config specification at [https://github.com/eclipse/microprofile-config/releases](https://github.com/eclipse/microprofile-config/releases). Additional
    details for the MicroProfile Fault Tolerance feature can be found in the MicroProfile
    Config specification at [https://github.com/eclipse/microprofile-config/releases](https://github.com/eclipse/microprofile-fault-tolerance/releases).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 关于MicroProfile Config特性的更多详细信息，可以在[https://github.com/eclipse/microprofile-config/releases](https://github.com/eclipse/microprofile-config/releases)的MicroProfile
    Config规范中找到。关于MicroProfile Fault Tolerance特性的更多详细信息，可以在[https://github.com/eclipse/microprofile-fault-tolerance/releases](https://github.com/eclipse/microprofile-fault-tolerance/releases)的MicroProfile
    Config规范中找到。
