- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'If you''ve been a software developer for a long time, you have certainly participated
    in software conferences or developer forums and experienced many interesting conversations.
    They start out well with one of the developers describing a cool development process
    that he/she follows, and then another developer strikes with a cutting-edge technology
    or tool or a mind-boggling enterprise integration pattern that he/she works with.
    Each speaker attempts to outdo the last speaker. Old timers speak about ancient
    machines that had to be programmed with punch cards or switches, where they had
    only few bytes of RAM, or they start describing COBOL as a dynamic language that
    follows the Model View Presenter pattern. Ask them three questions: "How do you
    unit test your program?", "Can you alleviate high blood pressure by monitoring
    your pressure more often?", and "Have you ever maintained your own code?"'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名资深的软件开发者，你肯定参加过软件会议或开发者论坛，并经历过许多有趣的对话。它们通常从一个开发者描述他/她遵循的酷炫开发过程开始，然后另一个开发者提出一个前沿的技术或工具，或者他/她正在处理的令人困惑的企业集成模式。每位演讲者都试图超越前一位演讲者。老手们会谈论那些必须用穿孔卡片或开关编程的古老机器，或者他们开始描述COBOL作为一种遵循模型-视图-控制器模式的动态语言。问他们三个问题：“你是如何对程序进行单元测试的？”“你能通过更频繁地监测血压来缓解高血压吗？”“你曾经维护过自己的代码吗？”
- en: I asked the first question to more than 200 developers. Believe me, 80 percent
    of developers replied, "We pay our testers or we have skilled testers." Five percent
    said, "Our customers test the software." Now the remaining 15 percent do unit
    testing and use print statements or write JUnit tests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我问了这个问题的第一个问题给超过200名开发者。相信我，80%的开发者回答说：“我们付钱给测试人员，或者我们有熟练的测试人员。”5%的人说：“我们的客户测试软件。”现在剩下的15%进行单元测试，使用打印语句或编写JUnit测试。
- en: It is insane to keep doing things the same way and expect them to improve. Any
    program is only as good as it is useful; so, before applying complex tools, patterns,
    or APIs, we should verify whether our software functions or not. We should configure
    our development environment to provide us quick feedback of what is being developed.
    Automated JUnit tests help us verify our assumptions continuously. Side effects
    are detected quickly and this saves time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一味地按老方法做事并期望它们改进是愚蠢的。任何程序只有在其有用时才是好的；因此，在应用复杂的工具、模式或API之前，我们应该验证我们的软件是否真的能工作。我们应该配置我们的开发环境，以便我们能够快速获得关于正在开发的反馈。自动化的JUnit测试帮助我们持续验证我们的假设。副作用被迅速检测到，这节省了时间。
- en: As Martin Fowler states *Any fool can write code that a computer can understand.
    Good programmers write code that humans can understand*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如马丁·福勒所说，*任何傻瓜都能编写计算机能理解的代码。优秀的程序员编写的是人类能理解的代码*。
- en: We can write obfuscated code to impress our peers, but writing readable code
    is an art. Readability is a code quality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写晦涩难懂的代码来给同事留下深刻印象，但编写可读的代码是一门艺术。可读性是代码质量的一部分。
- en: Can you treat high blood pressure by monitoring your blood pressure more often?
    No, you need medication. Similarly, we should analyze our code to improve our
    code quality. Static code analysis tools suggest corrective actions, which means
    we should continuously monitor our code quality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你能通过更频繁地监测血压来治疗高血压吗？不，你需要药物治疗。同样，我们应该分析我们的代码来提高代码质量。静态代码分析工具建议纠正措施，这意味着我们应该持续监控我们的代码质量。
- en: Always code as though the guy who ends up maintaining your code will be a violent
    psychopath who knows where you live. We work in brand new greenfield projects
    and also in existing brownfield projects. Greenfield projects always follow test-driven
    development to deliver maintainable and testable code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 总是编写代码，就好像最终维护你代码的人将是一个知道你住处的暴力精神病患者。我们在全新的绿色项目中工作，也在现有的棕色项目中工作。绿色项目总是遵循测试驱动开发来交付可维护和可测试的代码。
- en: Test-driven development is an evolutionary development approach. It offers test-first
    development where the production code is written only to satisfy a test. The simple
    idea of writing a test first reduces the extra effort of writing unit tests after
    coding. In test-driven development, test doubles and mock objects are extensively
    used to mock out external dependencies. Mockito is an open source mock unit testing
    framework for Java. It allows mock object creation, verification, and stubbing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发是一种进化式开发方法。它提供测试优先的开发方式，其中生产代码仅编写以满足测试。编写测试的第一种简单想法减少了编码后编写单元测试的额外工作量。在测试驱动开发中，测试替身和模拟对象被广泛用于模拟外部依赖。Mockito是一个开源的Java模拟单元测试框架。它允许创建、验证和存根模拟对象。
- en: As Winston Churchill states *We make a living by what we get, but we make a
    life by what we give*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如温斯顿·丘吉尔所说 *我们通过我们所获得的东西谋生，但我们通过我们所给予的东西创造生活*。
- en: We inherit the legacy code from someone else—it may come from a very old existing
    project, from other teams who cannot maintain the code, or may be acquired from
    another company. However, it is our duty to improve the quality.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继承了别人的遗留代码——它可能来自一个非常古老的项目，来自无法维护代码的其他团队，或者可能是从另一家公司收购的。然而，我们的责任是提高其质量。
- en: This book is an advanced-level guide that will help software developers to get
    complete expertise in unit testing in the JUnit framework using Mockito as the
    mocking framework. The focus of the book is to provide readers with comprehensive
    details on how effectively JUnit tests can be written. Build scripts can be customized
    to automate unit tests, code quality can be monitored using static code analysis
    tools and code quality dashboards, and tests can be written for the Web and database
    components. Legacy code can be refactored. Test-driven development and Mockito
    can be used for software development; JUnit best practices can be followed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是一本高级指南，将帮助软件开发者使用Mockito作为模拟框架，在JUnit框架中掌握单元测试的完整专业知识。本书的重点是向读者提供关于如何有效地编写JUnit测试的全面细节。构建脚本可以定制来自动化单元测试，可以使用静态代码分析工具和代码质量仪表板来监控代码质量，并且可以为Web和数据库组件编写测试。遗留代码可以被重构。可以使用测试驱动开发和Mockito进行软件开发；可以遵循JUnit最佳实践。
- en: Armed with the knowledge of advanced JUnit concepts, test automation, build
    scripting tools, the mocking framework, code coverage tools, static code analysis
    tools, web tier unit testing, database tier unit testing, test-driven development,
    and refactoring legacy code, you will be pleasantly surprised as how quickly and
    easily you can write high-quality clean, readable, testable, maintainable, and
    extensible code. With these kinds of skills in your next software conference,
    you can impress the participants.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有高级JUnit概念、测试自动化、构建脚本工具、模拟框架、代码覆盖率工具、静态代码分析工具、Web层单元测试、数据库层单元测试、测试驱动开发和重构遗留代码的知识，你将会惊喜地发现，你可以多么快速和容易地编写出高质量的、干净的、可读的、可测试的、可维护的和可扩展的代码。在下一场软件会议上，拥有这些技能，你将能够给参与者留下深刻印象。
- en: What this book covers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](part0014_split_000.html#page "Chapter 1. JUnit 4 – a Total Recall"),
    *JUnit 4 – a Total Recall*, covers the unit testing concept, the JUnit 4 framework,
    the Eclipse setup, and advance features of JUnit 4\. It covers the JUnit 4 framework
    briefly to get you up and running. We will discuss the concept surrounding JUnit
    essentials, annotations, assertion, the @RunWith annotation, and exception handling
    so that you have an adequate background on how JUnit 4 works. Advanced readers
    can skip to the next section. JUnit 4++ explores the advanced topics of JUnit
    4 and deep dives into the following topics: parameterized test, matchers and assertThat,
    assumption, theory, timeout, categories, rules, test suites, and test order.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](part0014_split_000.html#page "第一章 JUnit 4 – 全部回忆")，*JUnit 4 – 全部回忆*，涵盖了单元测试概念、JUnit
    4框架、Eclipse设置以及JUnit 4的高级特性。它简要介绍了JUnit 4框架，以便你能够快速上手。我们将讨论围绕JUnit基本概念、注解、断言、@RunWith注解和异常处理的概念，以便你能够充分了解JUnit
    4的工作原理。高级读者可以跳到下一节。JUnit 4++探讨了JUnit 4的高级主题，并深入以下主题：参数化测试、匹配器和assertThat、假设、理论、超时、类别、规则、测试套件和测试顺序。'
- en: '[Chapter 2](part0018_split_000.html#page "Chapter 2. Automating JUnit Tests"),
    *Automating JUnit Tests*, focuses on getting the reader quickly started with the
    Extreme Programming (XP) concept, Continuous Integration (CI), benefits of CI,
    and JUnit test automation using various tools such as Gradle, Maven, Ant, and
    Jenkins. By the end of this chapter, the reader will be able to write build scripts
    using Gradle, Maven, and Ant and configure Jenkins to execute the build scripts.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](part0018_split_000.html#page "第2章。自动化JUnit测试"), *自动化JUnit测试*，专注于让读者快速开始使用极限编程（XP）概念、持续集成（CI）、CI的好处以及使用Gradle、Maven、Ant和Jenkins等工具的JUnit测试自动化。到本章结束时，读者将能够使用Gradle、Maven和Ant编写构建脚本并配置Jenkins来执行构建脚本。'
- en: '[Chapter 3](part0021_split_000.html#page "Chapter 3. Test Doubles"), *Test
    Doubles*, illustrates the concept of test doubles and explains various test double
    types, such as mock, fake, dummy, stub, and spy.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](part0021_split_000.html#page "第3章。测试替身"), *测试替身*，阐述了测试替身的概念并解释了各种测试替身类型，如模拟、伪造、占位符、存根和间谍。'
- en: '[Chapter 4](part0027_split_000.html#page "Chapter 4. Progressive Mockito"),
    *Progressive Mockito*, distills the Mockito framework to its main core and provides
    technical examples. No previous knowledge of mocking is necessary. By the end
    of this chapter, the reader will be able to use advanced features of the Mockito
    framework; start behavior-driven development using Mockito; and write readable,
    maintainable, and clean JUnit tests using Mockito.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](part0027_split_000.html#page "第4章。渐进式Mockito"), *渐进式Mockito*，提炼了Mockito框架到其核心，并提供了技术示例。不需要对模拟有任何先前的知识。到本章结束时，读者将能够使用Mockito框架的高级功能；使用Mockito开始行为驱动开发；并使用Mockito编写可读的、可维护的、干净的JUnit测试。'
- en: '[Chapter 5](part0030_split_000.html#page "Chapter 5. Exploring Code Coverage"),
    *Exploring Code Coverage*, unfolds the code coverage concept, code coverage tools,
    and provides step-by-step guidance to generate coverage reports using various
    build scripts. The following topics are covered: code coverage; branch and line
    coverage; coverage tools—Clover, Cobertura, EclEmma, and JaCoCo; measuring coverage
    using Eclipse plugins; and using Ant, Maven, and Gradle to generate reports. By
    the end of this chapter, the reader will be able to configure Eclipse plugins
    and build scripts to measure code coverage.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](part0030_split_000.html#page "第5章。探索代码覆盖率"), *探索代码覆盖率*，展开介绍了代码覆盖率的概念、代码覆盖率工具，并提供了使用各种构建脚本的逐步指南来生成覆盖率报告。以下主题被涵盖：代码覆盖率；分支和行覆盖率；覆盖率工具——Clover、Cobertura、EclEmma和JaCoCo；使用Eclipse插件测量覆盖率；以及使用Ant、Maven和Gradle生成报告。到本章结束时，读者将能够配置Eclipse插件和构建脚本来测量代码覆盖率。'
- en: '[Chapter 6](part0036_split_000.html#page "Chapter 6. Revealing Code Quality"),
    *Revealing Code Quality*, explores the static code analysis and code quality improvement.
    By the end of this chapter, the reader will be able to configure the SONAR dashboard,
    set up Eclipse plugins, configure Sonar runner, and build scripts to analyze code
    quality using PMD, FindBugs, and Checkstyle.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](part0036_split_000.html#page "第6章。揭示代码质量"), *揭示代码质量*，探讨了静态代码分析和代码质量改进。到本章结束时，读者将能够配置SONAR仪表板，设置Eclipse插件，配置Sonar运行器和构建脚本来使用PMD、FindBugs和Checkstyle分析代码质量。'
- en: '[Chapter 7](part0043_split_000.html#page "Chapter 7. Unit Testing the Web Tier"),
    *Unit Testing the Web Tier*, deals with unit testing the web tier or presentation
    layer. It covers unit testing servlets, playing with Spring MVC, and working with
    the Model View Presenter pattern. By the end of this chapter, the reader will
    be able to unit test the web tier components and isolate the view components from
    the presentation logic.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](part0043_split_000.html#page "第7章。单元测试Web层"), *单元测试Web层*，处理单元测试Web层或表示层。它涵盖了单元测试servlet、玩转Spring
    MVC以及与模型视图控制器（MVC）模式一起工作。到本章结束时，读者将能够单元测试Web层组件并将视图组件从表示逻辑中隔离出来。'
- en: '[Chapter 8](part0046_split_000.html#page "Chapter 8. Playing with Data"), *Playing
    with Data*, covers the unit testing of the database layer. Topics such as separating
    concerns, unit testing the persistence logic, simplifying persistence with Spring,
    verifying the system integrity, and writing integration tests with Spring are
    explained. By the end of this chapter, the reader will be able to unit test the
    data access layer components in isolation from the database, write neat JDBC code
    using Spring, and write integration tests using the Spring API.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](part0046_split_000.html#page "第8章. 玩转数据")，*玩转数据*，涵盖了数据库层的单元测试。包括分离关注点、单元测试持久化逻辑、使用Spring简化持久化、验证系统完整性和使用Spring编写集成测试等主题。到本章结束时，读者将能够独立于数据库对数据访问层组件进行单元测试，使用Spring编写整洁的JDBC代码，并使用Spring
    API编写集成测试。'
- en: '[Chapter 9](part0052_split_000.html#page "Chapter 9. Solving Test Puzzles"),
    *Solving Test Puzzles*, explains the importance of unit testing in greenfield
    and brownfield projects. Topics such as working with testing impediments, identifying
    constructor issues, realizing initialization issues, working with private methods,
    working with final methods, exploring static method issues, working with final
    classes, learning new concerns, exploring static variables and blocks, and test-driven
    development are covered. By the end of this chapter, the reader will be able to
    write unit tests for the legacy code; refactor the legacy code to improve the
    design of existing code; start writing simple, clean, and maintainable code following
    test-first and test-driven developments; and refactor code to improve code quality.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](part0052_split_000.html#page "第9章. 解决测试难题")，*解决测试难题*，解释了在绿色和棕色项目中单元测试的重要性。包括处理测试障碍、识别构造函数问题、实现初始化问题、处理私有方法、处理最终方法、探索静态方法问题、处理最终类、学习新关注点、探索静态变量和块以及测试驱动开发等主题。到本章结束时，读者将能够为遗留代码编写单元测试；重构遗留代码以改进现有代码的设计；按照测试优先和测试驱动开发的原则开始编写简单、整洁和可维护的代码；以及重构代码以提高代码质量。'
- en: '[Chapter 10](part0056_split_000.html#page "Chapter 10. Best Practices"), *Best
    Practices*, focuses on JUnit guidelines and best practices for writing clean,
    readable, and maintainable JUnit test cases. It covers working with assertions,
    handling exceptions, and working with test smells. By the end of this chapter,
    the reader will be able to write clean and maintainable test cases.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](part0056_split_000.html#page "第10章. 最佳实践")，*最佳实践*，专注于JUnit指南和编写整洁、可读和可维护JUnit测试用例的最佳实践。包括处理断言、处理异常和处理测试异味。到本章结束时，读者将能够编写整洁和可维护的测试用例。'
- en: What you need for this book
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为这本书准备以下内容
- en: 'You will need the following software to be installed before you run the examples:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在您运行示例之前，需要安装以下软件：
- en: 'Java 6 or higher: JDK 1.6 or higher can be downloaded from the following Oracle
    website:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 6或更高版本：可以从以下Oracle网站下载JDK 1.6或更高版本：
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
- en: 'Eclipse editor: The latest version of Eclipse is Kepler (4.3). Kepler can be
    downloaded from the following website:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse编辑器：Eclipse的最新版本是Kepler（4.3）。可以从以下网站下载Kepler：
- en: '[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)'
- en: 'Mockito is required for creation, verification of mock objects, and stubbing.
    It can be downloaded from the following website:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mockito用于创建、验证模拟对象和存根。可以从以下网站下载：
- en: '[https://code.google.com/p/mockito/downloads/list](https://code.google.com/p/mockito/downloads/list)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://code.google.com/p/mockito/downloads/list](https://code.google.com/p/mockito/downloads/list)'
- en: Who this book is for
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书面向的对象
- en: This book is for advanced to novice level software testers or developers who
    use Mockito in the JUnit framework. Reasonable knowledge and understanding of
    unit testing elements and applications is required.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书面向的是使用Mockito在JUnit框架中的高级到初级水平的软件测试人员或开发者。需要具备对单元测试元素和应用的合理知识和理解。
- en: This book is ideal for developers who have some experience in Java application
    development as well as some basic knowledge of JUnit testing, but it covers the
    basic fundamentals of JUnit testing, test automation, static code analysis, legacy
    code refactoring, and test-driven development to get you acquainted with these
    concepts before using them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书非常适合那些在Java应用程序开发方面有一定经验，并且对JUnit测试有一些基本知识的开发者。但它涵盖了JUnit测试的基本原理、测试自动化、静态代码分析、遗留代码重构和测试驱动开发，以便在使用这些概念之前让您熟悉它们。
- en: Conventions
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惯例
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，您将找到许多不同风格的文本，以区分不同类型的信息。以下是一些这些风格的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    `afterClass` and `beforeClass` methods are executed only once."'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称按以下方式显示：“`afterClass`和`beforeClass`方法只执行一次。”
- en: 'A block of code is set as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块按以下方式设置：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望您注意代码块中的特定部分时，相关的行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都按以下方式编写：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Click on **Java build path** on the left-hand side and open the **Libraries**
    tab."'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要词汇**以粗体显示。屏幕上看到的单词，例如在菜单或对话框中，在文本中显示如下：“在左侧点击**Java构建路径**并打开**库**选项卡。”'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示以如下方式显示。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Tips and tricks appear like this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士和技巧看起来像这样。
- en: Reader feedback
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者反馈
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。告诉我们您对这本书的看法——您喜欢什么或可能不喜欢什么。读者反馈对我们开发您真正从中受益的标题非常重要。
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要向我们发送一般反馈，只需发送一封电子邮件到 `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`，并在邮件主题中提及书名。
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在某个主题上具有专业知识，并且您对撰写或为书籍做出贡献感兴趣，请参阅我们的作者指南[www.packtpub.com/authors](http://www.packtpub.com/authors)。
- en: Customer support
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户支持
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您是Packt书籍的骄傲拥有者，我们有一些事情可以帮助您从您的购买中获得最大收益。
- en: Downloading the example code
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Errata
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误清单
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经尽一切努力确保我们内容的准确性，但错误仍然可能发生。如果您在我们的某本书中发现错误——可能是文本或代码中的错误——如果您能向我们报告这一点，我们将不胜感激。通过这样做，您可以节省其他读者的挫败感，并帮助我们改进本书的后续版本。如果您发现任何勘误，请通过访问
    [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书籍，点击**勘误****提交****表格**链接，并输入您的勘误详情来报告。一旦您的勘误得到验证，您的提交将被接受，勘误将被上传到我们的网站，或添加到该标题的勘误部分下的现有勘误列表中。您可以通过选择您的标题从
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 查看任何现有勘误。
- en: Piracy
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盗版
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上，版权材料的盗版是一个跨所有媒体的持续问题。在Packt，我们非常重视我们版权和许可证的保护。如果您在互联网上发现我们作品的任何非法副本，无论形式如何，请立即向我们提供位置地址或网站名称，以便我们可以寻求补救措施。
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过 `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>` 联系我们，并提供涉嫌盗版材料的链接。
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢您在保护我们作者以及为我们提供有价值内容方面的帮助。
- en: Questions
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本书的任何方面遇到问题，可以通过 `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    联系我们，我们将尽力解决。
