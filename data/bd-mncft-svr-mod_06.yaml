- en: Chapter 6. Player Permissions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 玩家权限
- en: 'Player Permissions is one feature that nearly every Bukkit server administrator
    wants to have on their server. In vanilla Minecraft, you are either an **OP**
    (**operator**), or simply a regular player. With permissions, you can create an
    infinite number of ranks between the two. There are several permission plugins
    available, which can be found on the Bukkit or Spigot websites. In the past, developers
    had to write their own code in order to support one or more of these permission
    systems. Luckily, the Bukkit API now has a basis for player permissions, which
    makes our job easier. We no longer need to learn a new API for every permissions
    plugin that exists. We only need to support Bukkit''s universal permissions system,
    which we can be sure will not change drastically at any moment. In this chapter,
    you will do just that and install a permissions plugin that helps you organize
    each player''s permissions. By the end of this chapter, you will be able to control
    your server in a way that ensures that untrusted players will not be able to spoil
    the fun for everyone else. We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家权限是几乎每个Bukkit服务器管理员都希望在他们的服务器上拥有的一个功能。在原版的Minecraft中，你要么是**OP**（**操作员**），要么只是一个普通玩家。有了权限，你可以在两者之间创建无限数量的等级。有几个权限插件可以在Bukkit或Spigot网站上找到。在过去，开发者必须编写自己的代码来支持一个或多个这些权限系统。幸运的是，Bukkit
    API现在为玩家权限提供了一个基础，这使得我们的工作变得容易。我们不再需要为每个存在的权限插件学习一个新的API。我们只需要支持Bukkit的通用权限系统，我们可以确信它不会在任何时候发生剧烈变化。在本章中，你将做这件事，并安装一个权限插件，帮助你组织每个玩家的权限。到本章结束时，你将能够以确保不受信任的玩家不会破坏其他人的乐趣的方式来控制你的服务器。在本章中，我们将涵盖以下主题：
- en: The benefits of using permissions on your server and in plugins
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的服务器和插件中使用权限的好处
- en: What a permission node is and how it is used by developers and server administrators
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限节点是什么以及开发者和服务器管理员如何使用它
- en: Adding a permission node to the `plugin.yml` file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将权限节点添加到`plugin.yml`文件中
- en: Assigning a permission node to one of your plugin's commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将权限节点分配给你的插件的一个命令
- en: Testing player permissions in-game
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在游戏中测试玩家权限
- en: Installing and configuring a third-party permissions plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置第三方权限插件
- en: Using permission nodes throughout your plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的插件中使用权限节点
- en: The benefits of permissions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限的好处
- en: '**Permissions** give you more control over the players on your server. They
    allow you to prevent abuse from untrusted players. With permissions, you can give
    each player a specific rank based on their role in the server and how trustworthy
    they are. Let''s say that you want to give a specific player the ability to teleport
    to the location of some other players. With permissions, you can do so without
    giving that same player the ability to spawn items, kick/ban other players, and
    even stop your server completely! The simplest example of a useful permission
    is not giving new players the permission to build. This prevents someone from
    logging on to your server with the sole intention of defacing the world. They
    will be unable to destroy your or other players'' buildings.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限**让你对你的服务器上的玩家有更多的控制。它们允许你防止不受信任的玩家滥用。有了权限，你可以根据玩家在服务器中的角色和他们的可信度给予每个玩家一个特定的等级。比如说，你想要给某个特定的玩家赋予将其他玩家位置传送到自己位置的能力。有了权限，你可以这样做，而不必给那个玩家赋予生成物品、踢出/封禁其他玩家，甚至完全停止服务器的能力！一个有用的权限的最简单例子就是不给新玩家建造权限。这阻止了有人登录你的服务器，仅仅是为了破坏世界。他们将无法破坏你或其他玩家的建筑。'
- en: When programming plugins, you can assign certain permissions to specific commands
    or actions. This allows you to give the benefits of your plugins to privileged
    people only. For example, you may want only your good friend and yourself to have
    the option of enchanting your items using the `enchant` command. The first step
    to accomplishing this is to know what permission nodes are and how they work.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当编程插件时，你可以将某些权限分配给特定的命令或操作。这允许你只将插件的好处给予有特权的人。例如，你可能只想让你的好朋友和你自己有使用`enchant`命令对物品进行附魔的选项。完成这一步骤的第一步是了解权限节点是什么以及它们是如何工作的。
- en: Understanding permission nodes
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解权限节点
- en: A **permission node** is a `string` that usually contains multiple words separated
    by periods. These permission nodes are given to players to give them special privileges
    on the server. An example of this is `minecraft.command.give`, which is the permission
    node that is needed to execute the `give` command. As you can see, it can be broken
    down into three parts, namely, the creator (Minecraft), the category (command),
    and the specific privilege (the `give` command). You will find most permission
    nodes structured this way. For a plugin, its permission nodes begin with the name
    of the plugin. This helps prevent any collision of nodes. If two plugins were
    to use the same permission node, then an administrator cannot limit access to
    one node and not the other node. You will also find that many plugins' permission
    nodes are only two words long. This is done when the plugin does not have many
    permissions. Therefore, there is no need for categories. On the other hand, for
    large plugins, you may wish to include numerous nested categories.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限节点**是一个包含多个单词并由点号分隔的`string`。这些权限节点被赋予玩家，以在服务器上给予他们特殊的特权。一个例子是`minecraft.command.give`，这是执行`give`命令所需的权限节点。如您所见，它可以分解为三个部分，即创建者（Minecraft）、类别（命令）和特定特权（`give`命令）。您会发现大多数权限节点都是这样结构的。对于插件，其权限节点以插件的名称开头。这有助于防止节点冲突。如果两个插件使用相同的权限节点，那么管理员无法限制对一个节点的访问而不限制另一个节点。您还会发现许多插件的权限节点只有两个单词长。这是在插件没有很多权限时进行的。因此，不需要类别。另一方面，对于大型插件，您可能希望包含许多嵌套类别。'
- en: To help you understand permission nodes, we will create a permission node for
    the `Enchanter` plugin. The first word of the permission node will be the name
    of the plugin, while the second word will be the name of the command. If the permission
    node is directly related to a specific command, then it is wise to use the command
    name within the permission node. This will make your permissions simple to understand
    and easy to remember. The permission node for the `enchant` command will be `enchanter.enchant`.
    If we expect this plugin to have several permissions, then we can use `enchanter.command.enchant`
    instead. Either permission node is fine, but we will use the former in our example.
    Note that most developers tend to keep their permission nodes in lowercase. This
    is optional, but it usually prevents errors when typing in the node later. Once
    we have decided upon a permission node, we must add it to `plugin.yml` in order
    to use it with a plugin.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您理解权限节点，我们将为`Enchanter`插件创建一个权限节点。权限节点的第一个单词将是插件的名称，而第二个单词将是命令的名称。如果权限节点直接与特定命令相关，那么在权限节点中使用命令名称是明智的。这将使您的权限易于理解和记忆。`enchant`命令的权限节点将是`enchanter.enchant`。如果我们预计这个插件有多个权限，那么我们可以使用`enchanter.command.enchant`。这两个权限节点都可以，但我们将使用前者作为示例。请注意，大多数开发者倾向于将权限节点保持为小写。这是可选的，但通常可以防止在稍后输入节点时出错。一旦我们确定了权限节点，我们必须将其添加到`plugin.yml`文件中，以便与插件一起使用。
- en: Adding a permission node to plugin.yml
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将权限节点添加到plugin.yml
- en: 'In the `Enchanter` project, open the `plugin.yml` file. Adding permission nodes
    is similar to how commands are added. On a new line, add `permissions:`. Ensure
    that this line is not indented at all. On the lines that follow, add each permission
    node that our plugin will use, followed by a colon. The next few lines will provide
    the attributes of the permission, such as its description. The following code
    is an example of how the `plugin.yml` file will look with the `enchant` permission
    node added. Ensure that the indentations are similar. Note that the version attribute
    should also be updated to indicate that this is a new and improved version of
    the `Enchanter` plugin:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Enchanter`项目中打开`plugin.yml`文件。添加权限节点的方式与添加命令类似。在新的一行中，添加`permissions:`。确保这一行没有任何缩进。在随后的行中，添加我们插件将使用的每个权限节点，后面跟一个冒号。接下来的几行将提供权限的属性，例如其描述。以下代码是添加了`enchant`权限节点后的`plugin.yml`文件示例。请确保缩进相似。请注意，版本属性也应更新，以表明这是一个新的、改进的`Enchanter`插件版本：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The default attribute can be set to `true`, `false`, `op`, or `not op`. This
    determines who will have this permission; `true` means that everyone will have
    this permission, `false` means that no one will have it, `op` means that only
    operators will have it, and `not op` means that everyone except for the operators
    will have it. Who has this permission can be further modified by using a permission
    plugin, which will be discussed later in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认属性可以设置为`true`、`false`、`op`或`not op`。这决定了谁将拥有这个权限；`true`表示每个人都将拥有这个权限，`false`表示没有人将拥有它，`op`表示只有操作员将拥有它，而`not
    op`表示除了操作员之外的所有人将拥有它。可以通过使用权限插件进一步修改拥有这个权限的人，这将在本章后面讨论。
- en: Just like with commands, you can assign multiple permissions to a plugin. For
    more information on the `plugin.yml` file, visit [http://wiki.bukkit.org/Plugin_YAML](http://wiki.bukkit.org/Plugin_YAML).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像命令一样，你可以给插件分配多个权限。有关`plugin.yml`文件的更多信息，请访问[http://wiki.bukkit.org/Plugin_YAML](http://wiki.bukkit.org/Plugin_YAML)。
- en: Assigning a permission node to a plugin command
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将权限节点分配给插件命令
- en: Now that we have created the permission node, we want to prevent players from
    using the `enchant` command if they do not have the `enchanter.enchant` node.
    This process is simple, as it only requires adding a few more lines to the `plugin.yml`
    file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了权限节点，我们希望阻止没有`enchanter.enchant`节点的玩家使用`enchant`命令。这个过程很简单，因为它只需要在`plugin.yml`文件中添加几行。
- en: 'For the `enchant` command, we will add two attributes, namely `permission`
    and `permission-message`. The `permission` attribute is simply the permission
    node that is needed to execute the command. The `permission-message` attribute
    is a message that the player will see if they do not have the necessary permissions.
    After these additions, the `plugin.yml` file will look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`enchant`命令，我们将添加两个属性，即`permission`和`permission-message`。`permission`属性简单地表示执行命令所需的权限节点。`permission-message`属性是一个消息，如果玩家没有必要的权限，他们将看到这个消息。在这些添加之后，`plugin.yml`文件将看起来像这样：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You may want to add colors to the permission message. This can be done by using
    the `§` symbol. This is the character that Minecraft uses to indicate a color
    code. This symbol can be easily typed by holding *Alt* while pressing *2* and
    then *1*. A list of all the colors and their corresponding code can be found at
    [http://www.minecraftwiki.net/wiki/Formatting_codes](http://www.minecraftwiki.net/wiki/Formatting_codes).
    An example of the `permissions-message` line with color support looks like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想给权限消息添加颜色。这可以通过使用`§`符号来完成。这是Minecraft用来指示颜色代码的字符。通过按住*Alt*键同时按下*2*然后*1*可以轻松地输入这个符号。所有颜色及其对应代码的列表可以在[http://www.minecraftwiki.net/wiki/Formatting_codes](http://www.minecraftwiki.net/wiki/Formatting_codes)找到。带有颜色支持的`permissions-message`行的示例如下：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Assigning a permission node to a plugin command](img/00037.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![将权限节点分配给插件命令](img/00037.jpeg)'
- en: Testing player permissions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试玩家权限
- en: You can test the new addition to the plugin by building the `jar` file and installing
    it on your server, as discussed in [Chapter 4](part0033_split_000.html#VF2I1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 4. Testing on the Spigot Server"), *Testing on the Spigot Server*. Ensure
    that you reload or restart the server so that the newest version of the plugin
    is used. Remember that the version number is printed on the console when the plugin
    is enabled.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过构建`jar`文件并在您的服务器上安装它来测试插件的新增功能，如第4章所述，[在Spigot服务器上测试](part0033_split_000.html#VF2I1-b66e70deee6e4ed481db4b113e303f23
    "第4章。在Spigot服务器上测试")。确保您重新加载或重启服务器，以便使用插件的新版本。请记住，当插件启用时，版本号会在控制台上打印出来。
- en: 'By testing on your server, you will find out that you can enchant items through
    the plugin. Since you are an OP, you have the `enchanter.enchant` node by default.
    *De-OP* yourself by using the following console command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在您的服务器上进行测试，您会发现您可以通过插件来附魔物品。由于您是OP，您默认拥有`enchanter.enchant`节点。通过以下控制台命令来*取消OP*自己：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, you will no longer be able to use the `/enchant` command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将无法再使用`/enchant`命令。
- en: Using a third-party permissions plugin
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方权限插件
- en: You will most likely have trusted players on your server with whom you wish
    to share the use of the `/enchant` command. However, these players are not trusted
    enough to be an OP. In order to share the use of this command, you will need to
    use a permissions plugin. The permissions plugin will allow you to create multiple
    groups of players. Each group will have different permissions assigned to it.
    Each player that plays on your server can then be assigned to a specific group.
    As an example, you can have four permission groups, namely *default*, *trusted*,
    *mod*, and *admin*. The *default* group will have the basic permissions. A new
    player who joins the server will be put into the *default* group. The *trusted*
    group will have a few more privileges. They will have access to specific commands,
    such as setting the time of day in the server world and teleporting players. The
    *mod* group stands for "moderator", and it will have access to many other commands,
    such as kicking or banning a player. Finally, the `admin` group, which stands
    for "administrator", will have the `/give` command and the `/enchant` command.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能会在服务器上有一些值得信赖的玩家，你希望与他们分享`/enchant`命令的使用。然而，这些玩家还没有足够信任到可以成为OP。为了共享这个命令的使用，你需要使用权限插件。权限插件将允许你创建多个玩家组。每个组将分配不同的权限。然后，每个在服务器上玩游戏的玩家都可以被分配到特定的组。例如，你可以有四个权限组，即*default*、*trusted*、*mod*和*admin*。*default*组将拥有基本权限。新加入服务器的玩家将被放入*default*组。*trusted*组将拥有更多一些的特权。他们将能够访问特定的命令，例如设置服务器世界的白天时间以及传送玩家。*mod*组代表“管理员”，它将能够访问许多其他命令，例如踢出或禁止玩家。最后，`admin`组代表“管理员”，它将拥有`/give`命令和`/enchant`命令。
- en: There are several permission plugins available at [dev.bukkit.org](http://dev.bukkit.org).
    Each permission plugin is created by a different developer. They have various
    features depending on how the developer decided to program it. Most of the popular
    permissions plugins that are used today were actually created before permissions
    were added to the API. Because of this, they may not utilize all of Bukkit's features.
    They also include additional features that are no longer needed, such as permission
    groups. The plugin that we will use is the one that I have developed myself, and
    it is called `CodsPerms`. `CodsPerms` is a simple and basic permissions plugin.
    Because `CodsPerms` follows the rules of the Bukkit API, the group configuration
    that you will learn in this chapter can also be utilized for other permission
    plugins. Instructions on where to download `CodsPerms` can be found at [http://codisimus.com/codsperms](http://codisimus.com/codsperms).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在[dev.bukkit.org](http://dev.bukkit.org)上可以找到几个权限插件。每个权限插件都是由不同的开发者创建的。它们具有各种功能，这取决于开发者如何编程。今天使用的许多流行权限插件实际上是在权限添加到API之前创建的。因此，它们可能无法利用Bukkit的所有功能。它们还包括一些不再需要的附加功能，例如权限组。我们将使用的插件是我自己开发的，名为`CodsPerms`。`CodsPerms`是一个简单且基本的权限插件。因为`CodsPerms`遵循Bukkit
    API的规则，所以在本章中你将学习的组配置也可以用于其他权限插件。有关如何下载`CodsPerms`的说明可以在[http://codisimus.com/codsperms](http://codisimus.com/codsperms)找到。
- en: Once you have the `jar` file of the plugin, install it on your server as you
    would install one of your own plugins. With the plugin installed, the `permission`
    command will be available to you. Executing the `/perm` command will inform you
    of the various commands that are now at your disposal.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了插件的`jar`文件，就像安装你自己的插件一样在你的服务器上安装它。安装插件后，`permission`命令将可供你使用。执行`/perm`命令将告诉你现在可供使用的各种命令。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You need to have the `permissions.manage` node in order to use the permission
    command. Until we fully set up the permission plugin, you can either run these
    commands from the console, or give yourself the OP status.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要拥有`permissions.manage`节点才能使用权限命令。在我们完全设置权限插件之前，你可以要么从控制台运行这些命令，要么给自己分配OP状态。
- en: You will see that there are commands that can be used to give permission nodes
    to players as well as remove them. This is useful if you want to add single nodes,
    such as giving yourself the `permissions.manage` node, but you will not want to
    use those commands for everyone who joins your server. To resolve this, we will
    configure the groups that were presented earlier.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现有一些命令可以用来给玩家分配权限节点以及移除它们。如果你只想添加单个节点，比如给自己分配`permissions.manage`节点，这将很有用，但你可能不希望为所有加入你服务器的玩家使用这些命令。为了解决这个问题，我们将配置之前提到的组。
- en: These groups will be created as a permission node that contains several other
    child permission nodes. This will allow us to give a player a single group node,
    and they will then inherit all of its children. We can create these parent nodes
    within the `permissions.yml` file located in the `root` directory (the same folder
    in which you placed `spigot.jar`). The `permissions.yml` file is a `YAML` file
    like `plugin.yml`. Therefore, you should be familiar with the formatting. You
    can edit this file with a text editor. If you wish to use NetBeans, you can open
    the file by navigating to **File** | **Open File…** or by dragging and dropping
    the file in the NetBeans window.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组将被创建为一个包含几个其他子权限节点的权限节点。这将允许我们给一个玩家一个单独的组节点，然后他们将继承其所有子节点。我们可以在位于 `root`
    目录（即你放置 `spigot.jar` 的同一个文件夹）中的 `permissions.yml` 文件内创建这些父节点。`permissions.yml`
    文件是一个 `YAML` 文件，就像 `plugin.yml`。因此，你应该熟悉其格式。你可以使用文本编辑器编辑此文件。如果你希望使用 NetBeans，你可以通过导航到
    **文件** | **打开文件…** 或通过将文件拖放到 NetBeans 窗口中来打开文件。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Editing a `YAML` file incorrectly will cause it to not load completely. The
    issue that you will most likely face with the `YAML` files is having a *tab* in
    your document rather than *spaces*. This will cause your file to not load properly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 错误地编辑 `YAML` 文件会导致它无法完全加载。你很可能会遇到的问题是在你的文档中有一个 *制表符* 而不是 *空格*。这会导致你的文件无法正确加载。
- en: 'The following code is a sample of how `permissions.yml` might look after creating
    the groups that were specified earlier:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是创建之前指定的组后 `permissions.yml` 可能看起来的一个示例：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Every group can inherit the permission nodes of another group by simply adding
    that group permission node as one of their children. In this example, the `admin`
    group inherits all the permissions from the `mod` group, the `mod` group inherits
    all the permissions from the `trusted` group, and the `trusted` group inherits
    all the permissions from the `default` group. Therefore, the `admin` group also
    inherits the `default` group's permissions through parentage. In this sample file,
    we have `default` set to `true` for the `group.default` parent node. This means
    that each player on the server will automatically have the `group.default` permission
    node. Because of the child nodes, each player will also have `minecraft.command.kill`
    and `minecraft.command.list`. Adding permissions to the default group will eliminate
    the need to hand out permissions to each player who joins your server.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组都可以通过简单地将该组权限节点添加为其子节点之一来继承另一个组的权限节点。在这个例子中，`admin` 组继承了 `mod` 组的所有权限，`mod`
    组继承了 `trusted` 组的所有权限，而 `trusted` 组继承了 `default` 组的所有权限。因此，`admin` 组也通过父级继承了 `default`
    组的权限。在这个示例文件中，我们将 `group.default` 父节点设置为 `true`。这意味着服务器上的每个玩家都将自动拥有 `group.default`
    权限节点。由于子节点，每个玩家也将拥有 `minecraft.command.kill` 和 `minecraft.command.list`。将权限添加到默认组将消除向每个加入你服务器的玩家分配权限的需要。
- en: As you can see, the permission nodes earlier included permissions for some Minecraft
    commands as well as the permission for the `Enchanter` plugin. There are many
    more permissions than have already been listed. These are a few that are commonly
    used. The rest of the permissions for the Minecraft and Bukkit commands can be
    found at [wiki.bukkit.org/CraftBukkit_commands](http://wiki.bukkit.org/CraftBukkit_commands).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，之前的权限节点包括了某些 Minecraft 命令的权限以及 `Enchanter` 插件的权限。还有更多权限尚未列出。这些是一些常用的权限。Minecraft
    和 Bukkit 命令的其余权限可以在 [wiki.bukkit.org/CraftBukkit_commands](http://wiki.bukkit.org/CraftBukkit_commands)
    找到。
- en: 'Once you have populated the permissions `YAML` file, you will have to reload
    the server in order for the changes to take effect. Now, you can assign players
    to different groups. Use the following command with your own username to add yourself
    to the trusted group:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你填充了权限 `YAML` 文件，你必须重新加载服务器才能使更改生效。现在，你可以将玩家分配到不同的组。使用以下命令并替换为你自己的用户名来将自己添加到受信任的组：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will have the permissions defined in `group.trusted` within the `permissions.yml`
    file. Try putting yourself in various groups and using the `/enchant` commands
    and various other commands. Ensure that you are not an OP, as it will give you
    all the permissions regardless of which group you are in. Also, keep in mind that
    you must manually remove yourself from groups. If a player in the `admin` group
    is added to the `trusted` group, they will still have administrator privileges
    until they are removed from the admin group.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在`permissions.yml`文件中的`group.trusted`定义权限。尝试将自己放入不同的组中，并使用`/enchant`命令以及其他各种命令。确保你不是OP，因为这会给你所有权限，无论你在哪个组中。此外，请注意，你必须手动从组中移除自己。如果一个`admin`组的玩家被添加到`trusted`组，他们仍然会保留管理员权限，直到他们从管理员组中移除。
- en: Using permission nodes throughout your plugins
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的插件中使用权限节点
- en: 'In some cases, you may want to check whether a player has a specific permission
    from within your code. With the addition of a universal permission system within
    Bukkit, this is very easy, regardless of the permission plugin that you are using.
    Looking at the Bukkit API documentation, you will see that the `Player` object
    contains a `hasPermission` method, which returns a Boolean response. The method
    requires a `string` value, which is the permission node that is being checked.
    We can place this method in an `if` statement, as shown in the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能想在代码中检查玩家是否有特定的权限。随着Bukkit中通用权限系统的添加，这非常简单，无论你使用的是哪个权限插件。查看Bukkit
    API文档，你会看到`Player`对象包含一个`hasPermission`方法，它返回一个布尔响应。该方法需要一个`string`值，即正在检查的权限节点。我们可以将此方法放在一个`if`语句中，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This block of code is unnecessary for the plugin because Bukkit can automatically
    handle player permissions for commands. To have a look at how this is properly
    used, let''s go back to `MyFirstBukkitPlugin` and add a permission check. The
    following code is the modified `onEnable` method, which will only say `Hello`
    to the players who have the necessary permission:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码对于插件来说是不必要的，因为Bukkit可以自动处理命令的玩家权限。为了了解如何正确使用，让我们回到`MyFirstBukkitPlugin`并添加一个权限检查。以下代码是修改后的`onEnable`方法，它只会向具有必要权限的玩家说“Hello”：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember that you will also have to modify `plugin.yml` to add the permission
    node to your plugin.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你还需要修改`plugin.yml`来将权限节点添加到你的插件中。
- en: You can also broadcast a message to only the players who have a specific permission
    node. The documentation on this can be found at [https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Bukkit.html#broadcast(java.lang.String,%20java.lang.String)](https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Bukkit.html#broadcast(java.lang.String,%20java.lang.String)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以向只有具有特定权限节点的玩家广播消息。有关此内容的文档可以在[https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Bukkit.html#broadcast(java.lang.String,%20java.lang.String)](https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Bukkit.html#broadcast(java.lang.String,%20java.lang.String))找到。
- en: Try adding some permission nodes to some other projects that were created in
    the previous chapters. For example, add the `creeperhiss.scare` permission node
    to the plugin that has the `/scare <player>` command. As an added challenge, add
    an option that allows a player to type `/scare all` if they want to scare all
    the players on the server. In this case, you could check each player for the `creeperhiss.hear`
    permission node. That way, only those players will hear the sound. This is a good
    example of a permission node that should be set to `not op` by default.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将一些权限节点添加到之前章节中创建的其他项目中。例如，将`creeperhiss.scare`权限节点添加到具有`/scare <player>`命令的插件中。作为一个额外的挑战，添加一个选项，允许玩家输入`/scare
    all`来吓唬服务器上的所有玩家。在这种情况下，你可以检查每个玩家的`creeperhiss.hear`权限节点。这样，只有那些玩家会听到声音。这是一个很好的例子，说明权限节点应该默认设置为`not
    op`。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The existing plugins, after being modified, are now more flexible with the aid
    of a permission plugin. With `CodsPerms` running on your server, you can have
    multiple groups for players. You can create plugins that give certain players
    privileged commands, and yet these same players will be prevented from using commands
    that can be misused. This new knowledge of Bukkit permissions will give you an
    increased control over both your plugins and server. Now that you know how to
    program both commands and permissions, you are ready to dive into some of the
    more challenging and exciting sections of the Bukkit API. In the next chapter,
    you will learn how to automate your server and customize it by using the Bukkit
    event system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的插件经过修改后，在权限插件的辅助下变得更加灵活。当你的服务器运行`CodsPerms`时，你可以为玩家设置多个组。你可以创建为特定玩家提供特权命令的插件，同时这些玩家将无法使用可能被滥用的命令。这种关于Bukkit权限的新知识将使你能够更好地控制你的插件和服务器。现在你已经学会了如何编程命令和权限，你就可以深入探索Bukkit
    API中更具挑战性和趣味性的部分了。在下一章中，你将学习如何通过使用Bukkit事件系统来自动化和定制你的服务器。
