- en: Chapter 1. Your First Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 你的第一个应用程序
- en: To explore the capabilities of **Hibernate Search**, we will work with a twist
    on the classic "Java Pet Store" sample application. Our version, the "VAPORware
    Marketplace", will be an online catalog of software apps. Think of such stores
    run by Apple, Google, Microsoft, Facebook, and… well, pretty much every other
    company now.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索**Hibernate Search**的能力，我们将使用对经典“Java宠物店”示例应用程序的一个变化。我们版本，“VAPORware Marketplace”，将是一个在线软件应用程序目录。想想苹果、谷歌、微软、Facebook以及……好吧，现在几乎所有其他公司都在运营这样的商店。
- en: Our app market will give us plenty of opportunities to search data in different
    ways. Of course, there are titles and descriptions as in most product catalogs.
    However, software apps involve an expanded set of data points, such as genre,
    version, and supported devices. These different facets will let us take a look
    at the many features that Hibernate Search makes available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序市场将给我们提供大量以不同方式搜索数据的机会。当然，像大多数产品目录一样，有标题和描述。然而，软件应用程序涉及一组更广泛的数据点，如类型、版本和支持的设备。这些不同的方面将让我们看看Hibernate
    Search提供的许多功能。
- en: 'At a high level, incorporating Hibernate Search in an application requires
    the following three steps:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，在应用程序中整合Hibernate Search需要以下三个步骤：
- en: Adding information to your entity classes, so that Lucene will know how to index
    them.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的实体类中添加信息，以便Lucene知道如何索引它们。
- en: Writing one or more search queries in the relevant portions of your application.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的相关部分编写一个或多个搜索查询。
- en: Setting up your project, so that the required dependencies and configuration
    for Hibernate Search are available in the first place.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置你的项目，以便在最初就拥有Hibernate Search所需的依赖和配置。
- en: In future projects, after we have a decent understanding of the basics, we would
    probably start with this third bullet-point. However, for the time being, let
    us jump straight into some code!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的项目中，在我们有了相当基本的了解之后，我们可能从这个第三个项目点开始。然而，现在，让我们直接进入一些代码！
- en: Creating an entity class
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建实体类
- en: 'To keep things simple, this first cut of our application will include only
    one entity class. This `App` class describes a software application and is the
    central entity with which all the other entity classes will be associated. For
    now though, we will give an "app" three basic data points:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，我们这个应用程序的第一个版本将只包括一个实体类。这个`App`类描述了一个软件应用程序，是所有其他实体类都将与之关联的中心实体。不过，现在，我们将给一个“应用程序”提供三个基本数据点：
- en: A name
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名称
- en: An image to display on the marketplace site
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: marketplace网站上显示的图片
- en: A long description
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一段长描述
- en: 'The Java code is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的Java代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This class is a basic **plain old Java object** (**POJO**), just member variables
    and getter/setter methods for working with them. However, notice the annotations
    that are highlighted.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是一个基本的**普通旧Java对象**（**POJO**），只有成员变量和用于处理它们的getter/setter方法。然而，请注意突出显示的注解。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are accustomed to Hibernate 3.x, note that version 4.x deprecates many
    of Hibernate's own mapping annotations in favor of their **Java Persistence API**
    (**JPA)** 2.0 counterparts. We will discuss JPA further in [Chapter 3](ch03.html
    "Chapter 3. Performing Queries"), *Performing Queries*. For now, simply notice
    that the JPA annotations here are essentially identical to their native Hibernate
    counterparts, other than belonging to the `javax.persistence` package.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯了Hibernate 3.x，请注意版本4.x废弃了许多Hibernate自己的映射注解，转而使用它们的**Java持久化API**（**JPA**）2.0对应物。我们将在[第3章](ch03.html
    "第3章. 执行查询")，*执行查询*中进一步讨论JPA。现在，只需注意这里的JPA注解与它们的本地Hibernate注解基本相同，除了属于`javax.persistence`包。
- en: The class itself is annotated with `@Entity`, which tells Hibernate to map the
    class to a database table. Since we did not explicitly specify a table name, by
    default Hibernate will create a table named `APP` for the `App` class.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该类本身用`@Entity`注解标记，告诉Hibernate将该类映射到数据库表。由于我们没有明确指定一个表名，默认情况下，Hibernate将为`App`类创建一个名为`APP`的表。
- en: The `id` field is annotated with both `@Id` and `@GeneratedValue`. The former
    simply tells Hibernate that this field maps to the primary key of the database
    table. The latter declares that the values should be generated automatically when
    new rows are inserted. This is why our constructor method doesn't populate a value
    for `id`, because we're counting on Hibernate to handle it for us.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`字段被注释为`@Id`和`@GeneratedValue`。前者简单地告诉Hibernate这个字段映射到数据库表的主键。后者声明当新行被插入时值应该自动生成。这就是为什么我们的构造方法不填充`id`的值，因为我们期待Hibernate为我们处理它。'
- en: Finally, we annotate our three data points with `@Column`, telling Hibernate
    that these variables correspond with columns in the database table. Normally,
    the name of the column will be the same as the variable name, and Hibernate will
    assume some sensible defaults about the column length, whether to allow null values,
    and so on. However, these settings may be declared explicitly (as we are doing
    here), by setting the column length for description to 1,000 characters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们用`@Column`注解我们的三个数据点，告诉Hibernate这些变量与数据库表中的列相对应。通常，列名与变量名相同，Hibernate会关于列长度、是否允许空值等做出一些合理的假设。然而，这些设置可以显式声明（就像我们在这里做的那样），通过将描述的列长度设置为1,000个字符。
- en: Preparing the entity for Hibernate Search
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Hibernate Search准备实体
- en: Now that Hibernate knows about our domain object, we need to tell the Hibernate
    Search add-on how to manage it with **Lucene**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Hibernate知道了我们的领域对象，我们需要告诉Hibernate Search插件如何用**Lucene**管理它。
- en: We can use some advanced options to leverage the full power of Lucene, and as
    this application develops we will do just that. However, using Hibernate Search
    in a basic scenario is as simple as adding two annotations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些高级选项来充分利用Lucene的的全部力量，随着这个应用程序的发展，我们会的。然而，在基本场景下使用Hibernate Search只需添加两个注解那么简单。
- en: 'First, we''ll add the `@Indexed` annotation to the class itself:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加`@Indexed`注解到类本身：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This simply declares that Lucene should build and use an index for this entity
    class. This annotation is optional. When you write a large-scale application,
    many of its entity classes may not be relevant to searching. Hibernate Search
    only needs to tell Lucene about those types that will be searchable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这简单地声明了Lucene应该为这个实体类建立并使用索引。这个注解是可选的。当你编写一个大规模的应用程序时，其中许多实体类可能与搜索无关。Hibernate
    Search只需要告诉Lucene那些可搜索的类型。
- en: 'Secondly, we will declare searchable data points with the `@Field` annotation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将用`@Field`注解声明可搜索的数据点：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that we're only applying this annotation to the `name` and `description`
    member variables. We did not annotate `image`, because we don't care about searching
    for apps by their image filenames. We likewise did not annotate `id`, because
    you don't exactly need a powerful search engine to find a database table row by
    its primary key!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们只把这个注解应用到`name`和`description`成员变量上。我们没有注释`image`，因为我们不在乎通过图片文件名搜索应用程序。同样，我们也没有注释`id`，因为你要找一个数据库表行通过它的主键，你不需要一个强大的搜索引擎！
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Deciding what to annotate is a judgment call. The more entities you annotate
    for indexing, and the more member variables you annotate as fields, the more rich
    and powerful your Lucene indexes will be. However, if we annotate superfluous
    stuff just because we can, then we make Lucene do unnecessary work that can hurt
    performance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 决定注解什么是一个判断 call。你注释的索引实体越多，作为字段注释的成员变量越多，你的Lucene索引就会越丰富、越强大。然而，如果我们仅仅因为可以就注解多余的东西，那么我们就让Lucene做不必要的功，这可能会影响性能。
- en: In [Chapter 7](ch07.html "Chapter 7. Advanced Performance Strategies"), *Advanced
    Performance Strategies*, we will explore such performance considerations in greater
    depth. Right now, we're all set to search for apps by name or description.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章高级性能策略")，*高级性能策略*，我们将更深入地探讨这些性能考虑。现在，我们已经准备好通过名称或描述来搜索应用程序。
- en: Loading the test data
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载测试数据
- en: 'For test and demo purposes, we will use an embedded database that should be
    purged and refreshed each time we start the application. With a Java web application,
    an easy way to invoke the code at startup time is by using `ServletContextListener`.
    We simply create a class implementing this interface, and annotate it with `@WebListener`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试和演示目的，我们将使用一个内嵌数据库，每次启动应用程序时都应该清除并刷新它。在Java Web应用程序中，调用启动时间内的代码的一个简单方法是使用`ServletContextListener`。我们只需创建一个实现此接口的类，并用`@WebListener`注解它：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `contextInitialized` method will now be invoked automatically when the server
    starts up. We will use this method to set up a Hibernate session factory, and
    populate the database with some test data. The `contextDestroyed` method will
    likewise be automatically invoked when the server shuts down. We will use this
    method to explicitly close our session factory when done.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`contextInitialized` 方法将在服务器启动时自动调用。我们将使用此方法设置Hibernate会话工厂，并向数据库填充一些测试数据。`contextDestroyed`
    方法同样会在服务器关闭时自动调用。我们将使用这个方法在完成时显式关闭我们的会话工厂。
- en: Multiple places within our application will need a simple and thread-safe means
    for opening connections to the database (that is, Hibernate `Session` objects).
    So, we also add a `public static synchronized` method named `openSession()`. This
    method serves as the thread-safe gatekeeper for creating sessions from a singleton
    `SessionFactory`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中的多个地方将需要一个简单且线程安全的手段来打开到数据库的连接（即，Hibernate `Session` 对象）。因此，我们还添加了一个名为
    `openSession()` 的 `public static synchronized` 方法。该方法作为创建单例 `SessionFactory` 的线程安全守门员。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In more complex applications, you would probably use a dependency-injection
    framework, such as Spring or CDI. This would be a bit distracting in our small
    example application, but these frameworks give you a safe mechanism for injecting
    `SessionFactory` or `Session` objects without having to code it manually.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在更复杂的应用程序中，您可能会使用依赖注入框架，如Spring或CDI。这在我们的小型示例应用程序中有些分散注意力，但这些框架为您提供了一种安全机制，用于无需手动编码即可注入
    `SessionFactory` 或 `Session` 对象。
- en: 'In fleshing out the `contextInitialized` method, we start by obtaining a Hibernate
    session and beginning a new transaction:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在具体化 `contextInitialized` 方法时，我们首先获取一个Hibernate会话并开始一个新事务：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inside the transaction, we can create all the sample data we want, by instantiating
    and persisting `App` objects. In the interest of readability, only one object
    is created here. However, the downloadable source code available at [http://www.packtpub.com](http://www.packtpub.com)
    contains a full assortment of test examples.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在事务内部，我们可以通过实例化和持久化 `App` 对象来创建所有我们想要的数据样本。为了可读性，这里只创建了一个对象。然而，在 [http://www.packtpub.com](http://www.packtpub.com)
    可下载的源代码中包含了一个完整的测试示例集合。
- en: Writing the search query code
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写搜索查询代码
- en: Our VAPORware Marketplace web application will be based on a Servlet 3.0 controller/model
    class, rendering a JSP/JSTL view. The goal is to make things simple, so that we
    can focus on the Hibernate Search aspects. After reviewing this example application,
    it should be easy to adapt the same logic in JSF or Spring MVC, or even newer
    JVM-based frameworks, such as Play or Grails.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的VAPORware Marketplace网络应用程序将基于Servlet 3.0控制器/模型类，呈现JSP/JSTL视图。目标是保持事情简单，这样我们就可以专注于Hibernate
    Search方面。在审阅了这个示例应用程序之后，应该很容易将相同的逻辑适配到JSF或Spring MVC，甚至更新的基于JVM的框架，如Play或Grails。
- en: 'To start, we will write a trivial `index.html` page, containing a text box
    for users to enter search keywords:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写一个简单的 `index.html` 页面，包含一个用户输入搜索关键词的文本框：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This form collects one or more keywords in the CGI parameter `searchString`
    , and posts it to a URL with the relative `/search` path. We now need to register
    a controller servlet to respond to those posts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表单通过CGI参数 `searchString` 收集一个或多个关键词，并将其以相对 `/search` 路径提交给一个URL。我们现在需要注册一个控制器servlet来响应这些提交：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `@WebServlet` annotation maps this servlet to the relative URL `/search`,
    so that forms posting to this URL will invoke the `doPost` method. This method
    will process a search, and forward the request to a JSP view for rendering.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`@WebServlet` 注解将这个servlet映射到相对URL `/search`，这样提交到这个URL的表单将调用 `doPost` 方法。这个方法将处理一个搜索，并将请求转发给一个JSP视图进行渲染。'
- en: Now, we get to the real heart of the matter—executing the search query. We create
    a `FullTextSession` object, a Hibernate Search extension that wraps a normal `Session`
    with Lucene search capability.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来到了问题的核心——执行搜索查询。我们创建了一个 `FullTextSession` 对象，这是Hibernate Search的一个扩展，它用Lucene搜索功能包装了一个普通的
    `Session`。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that we have a Hibernate `Search` session at our disposal, we can grab
    the user''s keyword(s)and perform the Lucene search:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了Hibernate `Search` 会话可以使用，我们可以获取用户的关键词并执行Lucene搜索：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As its name suggests, `QueryBuilder` is used to build queries involving a particular
    entity class. Here, we instantiate a builder for our `App` entity.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`QueryBuilder` 用于构建涉及特定实体类的查询。在这里，我们为我们的 `App` 实体创建了一个构建器。
- en: 'Notice the long chain of method calls on the third line of the preceding code.
    From the perspective Java, we are calling a method, calling another method on
    the object returned, and repeating that process. However, from a plain English
    perspective, this chain of method calls resembles a sentence:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的代码的第三行中，有一个很长的方法调用链。从Java的角度来看，我们是在调用一个方法，在对象返回后调用另一个方法，并重复这个过程。然而，从简单的英语角度来看，这个方法调用链就像一个句子：
- en: '**Build** a query of **keyword** type, on the entity **fields** "name" and
    "description", **matching** against the keywords in "searchString".'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**构建**一个**关键词**类型的查询，在实体**字段**"name"和"description"上，**匹配**"searchString"中的关键词。'
- en: This API style is quite intentional. Since it resembles a language in its own
    right, it is referred to as the Hibernate Search **DSL** (**domain-specific language**).
    If you have ever used criteria queries in Hibernate ORM, then the look-and-feel
    here should be quite familiar to you.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种API风格是有意为之的。因为它本身就像是一种语言，所以被称为Hibernate Search **DSL**（**领域特定语言**）。如果你曾经使用过Hibernate
    ORM中的条件查询，那么这里的视觉感受对你来说应该是非常熟悉的。
- en: 'We have now created an `org.apache.lucene.search.Query` object, which Hibernate
    Search translates under the covers into a Lucene search. This magic flows in both
    directions! Lucene search results can be translated into a standard `org.hibernate.Query`
    object, and used the same as any normal database query:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个`org.apache.lucene.search.Query`对象，Hibernate Search在幕后将其转换为Lucene搜索。这种魔力是双向的！Lucene搜索结果可以转换为标准的`org.hibernate.Query`对象，并且像任何正常的数据库查询一样使用：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the `hibernateQuery` object, we fetch all of the `App` entities that were
    found in our search, and stick them on the servlet request. If you recall, the
    last line of our method forwards this request to a `search.jsp` view for display.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`hibernateQuery`对象，我们获取了在搜索中找到的所有`App`实体，并将它们放在servlet请求中。如果你还记得，我们方法的最后一行将这个请求转发到一个`search.jsp`视图以供显示。
- en: 'This JSP view will start off very basic, using JSTL tags to grab the `App`
    results off the request and iterate through them:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个JSP视图将始于非常基础的内容，使用JSTL标签从请求中获取`App`结果并遍历它们：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Selecting a build system
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个构建系统
- en: So far, we have approached our application in somewhat reverse order. We basically
    skipped past the initial project setup and dove straight away into code, so that
    all the plumbing would make more sense once we got there.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们以某种逆序的方式对待我们的应用程序。我们基本上跳过了初始项目设置，直接进入代码，这样一旦到达那里，所有的管道都会更有意义。
- en: Well, we have now arrived! We need to pull all of this code together into an
    organized project structure, make sure that all of its JAR file dependencies are
    available, and establish a process for running the web application or packaging
    it up as a WAR file. We need a project build system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们已经到达目的地！我们需要将所有这些代码整合到一个有序的项目结构中，确保所有的JAR文件依赖项都可用，并建立一个运行Web应用程序或将其打包为WAR文件的过程。我们需要一个项目构建系统。
- en: One approach that we won't consider is doing all of this by hand. For a small
    application using bare-bones Hibernate ORM, we might depend on just over a half-dozen
    JAR files. At that scale, we might consider setting up a standard project in our
    preferred IDE (for example, Eclipse, NetBeans, or IntelliJ). We could grab a binary
    distribution from the Hibernate website and copy the necessary JAR files manually,
    letting the IDE take it from there.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一种我们不会考虑的方法是全部手动完成。对于一个使用原始Hibernate ORM的小型应用程序，我们可能只需要依赖六个半的JAR文件。在这个规模上，我们可能会考虑在我们的首选IDE（例如Eclipse、NetBeans或IntelliJ）中设置一个标准项目。我们可以从Hibernate网站获取二进制分发，并手动复制必要的JAR文件，让IDE从这里开始。
- en: The problem is that Hibernate Search has a lot going on beneath the covers.
    By the time the time you finish adding the dependencies for Lucene and even the
    minimal Solr components, the list of dependencies will be multiplied several times
    over. Even here in the first chapter, our very basic VAPORware Marketplace application
    already requires over three dozen JAR files to compile and run. These libraries
    are highly interdependent, and if you upgrade one of them, it can be a real nightmare
    to avoid conflicts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是Hibernate Search在幕后有很多东西。等你完成了Lucene甚至最基本的Solr组件的依赖项添加，依赖项列表会被扩大几倍。即使在这里的第一章，我们的非常基础的VAPORware
    Marketplace应用程序已经需要编译和运行超过三十六个JAR文件。这些库之间高度相互依赖，如果你升级了它们中的一个，避免冲突可能真的是一场噩梦。
- en: At this level of dependency management, it becomes crucial to use an automated
    build system for sorting out these matters. Throughout the code examples in the
    book, we will primarily be using Apache Maven for build automation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个依赖管理级别，使用自动化构建系统来解决这些问题变得至关重要。在本书中的代码示例中，我们将主要使用 Apache Maven 进行构建自动化。
- en: The two primary characteristics of Maven are a convention-over-configuration
    approach to basic builds, and a powerful system for managing a project's JAR file
    dependencies. As long as a project conforms to a standard structure, we don't
    even have to tell Maven how to compile it. This is considered boilerplate information.
    Also, when we tell Maven which libraries and versions a project depends on, Maven
    will figure out the entire dependency hierarchy for us. It determines which libraries
    the dependencies themselves depend on, and so forth. A standard repository format
    has been created for Maven (see [http://search.maven.org](http://search.maven.org)
    for the largest public example), so that common libraries can all be retrieved
    automatically without having to hunt them down.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的两个主要特点是对基本构建的约定优于配置的方法，以及管理项目 JAR 文件依赖的强大系统。只要项目符合标准结构，我们甚至不必告诉 Maven
    如何编译它。这被认为是模板信息。另外，当我们告诉 Maven 项目依赖于哪些库和版本时，Maven 会为我们找出整个依赖层次结构。它确定依赖项本身依赖于哪些库，依此类推。为
    Maven 创建了标准仓库格式（参见 [http://search.maven.org](http://search.maven.org) 获取最大的公共示例），这样常见的库都可以自动检索，而无需寻找它们。
- en: Maven does have its critics. By default, its configuration is XML-based, which
    has fallen out of fashion in recent years. More importantly, there is a learning
    curve when a developer needs to do something beyond the boilerplate basics. He
    or she must learn about the available plugins, how the lifecycle of a Maven build
    works, and how to configure a plugin for the appropriate lifecycle stage. Many
    developers have had frustrating experiences with that learning curve.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 确实有自己的批评者。默认情况下，它的配置是基于 XML 的，这在最近几年已经不再流行了。更重要的是，当开发者需要做超出模板基础的事情时，有一个学习曲线。他或她必须了解可用的插件、Maven
    构建的生命周期以及如何为适当的生命周期阶段配置插件。许多开发者都有过在学习曲线上的沮丧经历。
- en: Several other build systems have been created recently as attempts to harness
    the same power as Maven in a simpler form (for example, the Groovy-based Gradle,
    the Scala-based SBT, the Ruby-based Buildr, and so on). However, it is important
    to note that all of these newer systems are still designed to fetch dependencies
    from a standard Maven repository. If you wish to use some other dependency management
    and build system, then the concepts seen in this book will carry over directly
    to these other tools.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最近创建了许多其他构建系统，试图以更简单的形式 harness Maven 的相同力量（例如，基于 Groovy 的 Gradle，基于 Scala 的
    SBT，基于 Ruby 的 Buildr 等）。然而，重要的是要注意，所有这些新系统仍然设计为从标准 Maven 仓库获取依赖项。如果您希望使用其他依赖管理和构建系统，那么本书中看到的概念将直接适用于这些其他工具。
- en: To showcase a more manual non-Maven approach, the sample code available for
    download from Packt Publishing's website includes an Ant-based version of this
    chapter's example application. Look for the subdirectory `chapter1-ant`, corresponding
    to the Maven-based `chapter1` example. A `README` file in the root of this subdirectory
    highlights the differences. However, the main takeaway is that the concepts shown
    in the book should translate fairly easily to any modern build system for Java
    applications.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示一种更加手动、非Maven的方法，从 Packt Publishing 网站下载的示例代码包括本章示例应用程序的基于 Ant 的版本。寻找与基于
    Maven 的 `chapter1` 示例对应的子目录 `chapter1-ant`。这个子目录的根目录中有一个 `README` 文件，强调了不同之处。然而，主要收获是书中展示的概念应该很容易翻译成任何现代的
    Java 应用程序构建系统。
- en: Setting up the project and importing Hibernate Search
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目并导入 Hibernate Search
- en: 'We can create a Maven project using our IDE of choice. Eclipse works with Maven
    through an optional `m2e` plugin, and NetBeans uses Maven as its native build
    system out of the box. If Maven is installed on a system, you could also choose
    to create the project from the command line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们选择的 IDE 创建 Maven 项目。Eclipse 通过可选的 `m2e` 插件与 Maven 配合使用，NetBeans 使用 Maven
    作为其本地构建系统。如果系统上安装了 Maven，您还可以选择从命令行创建项目：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Time can be saved in either case by using a Maven `archetype`, which is basically
    a template for a given type of project. Here, `maven-archetype-webapp` gives us
    an empty web application, configured for packaging as a WAR file. `fieldsgroupId`
    and `artifactId` can be anything we wish. They serve to identify our build output
    if we stored it in a Maven repository.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，使用Maven `archetype`都可以节省时间，`archetype`基本上是给定项目类型的一个模板。在这里，`maven-archetype-webapp`为我们提供了一个空白的网络应用程序，配置为打包成WAR文件。`groupId`和`artifactId`可以是任何我们希望的。如果我们将构建输出存储在Maven仓库中，它们将用于识别我们的构建输出。
- en: 'The `pom.xml` Maven configuration file for our newly-created project starts
    off looking similar to the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新创建项目的`pom.xml` Maven配置文件开始看起来类似于以下内容：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our first order of business is to declare which dependencies are needed to
    compile and run. Inside the `<dependencies>` element, let''s add an entry for
    Hibernate Search:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首要的任务是声明编译和运行所需的依赖关系。在`<dependencies>`元素内，让我们添加一个Hibernate Search的条目：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wait, didn't we say earlier that this was going to require over three dozen
    dependencies? Yes, that is true, but it doesn't mean you have to deal with them
    all! When Maven reaches out to a repository and grabs this one dependency, it
    will also receive information about all of its dependencies. Maven climbs down
    the ladder as deep as it goes, sorting out any conflicts at each step, and calculating
    a dependency hierarchy so that you don't have to.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，我们之前不是说这需要超过三个小时的依赖项吗？是的，那是真的，但这并不意味着你必须处理它们全部！当Maven到达仓库并抓取这个依赖项时，它还将收到有关所有其依赖项的信息。Maven沿着梯子一路下滑，每一步都解决任何冲突，并计算出一个依赖层次结构，以便您不必这样做。
- en: 'Our application needs a database. To keep things simple, we will use H2 ([www.h2database.com](http://www.h2database.com)),
    an embeddable database system that fits in a single 1 MB JAR file. We will also
    use **Apache Commons** **Database Connection Pools** ([commons.apache.org/dbcp](http://commons.apache.org/dbcp))
    to avoid opening and closing database connections unnecessarily. These require
    declaring only one dependency each:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序需要一个数据库。为了简单起见，我们将使用H2 ([www.h2database.com](http://www.h2database.com))，一个嵌入式数据库系统，整个系统只有一个1
    MB的JAR文件。我们还将使用**Apache Commons** **数据库连接池** ([commons.apache.org/dbcp](http://commons.apache.org/dbcp))以避免不必要的打开和关闭数据库连接。这些只需要声明每个依赖关系：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Last but not least, we want to specify that our web application is using version
    3.x of the JEE Servlet API. In the following dependency, we specify the scope
    as `provided`, telling Maven not to bundle this JAR inside our WAR file, because
    we expect our server to make it available anyway:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们想要指定我们的网络应用程序正在使用JEE Servlet API的3.x版本。在下面的依赖关系中，我们将作用域指定为`provided`，告诉Maven不要将这个JAR文件打包到我们的WAR文件中，因为反正我们期望我们的服务器会提供：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With our POM file complete, we can copy into our project those source files
    that were created earlier. The three Java classes are listed under the `src/main/java`
    subdirectory. The `src/main/webapp` subdirectory represents the document root
    for our web application. The `index.html` search page, and its `search.jsp` results
    counterpart go here. Download and examine the structure of the project example.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的POM文件完备之后，我们可以将之前创建的源文件复制到我们的项目中。这三个Java类列在`src/main/java`子目录下。`src/main/webapp`子目录代表我们网络应用程序的文档根。`index.html`搜索页面及其`search.jsp`结果对应页面放在这里。下载并检查项目示例的结构。
- en: Running the application
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Running a Servlet 3.0 application requires Java 6 or higher, and a compatible
    servlet container such as Tomcat 7\. However, if you are using an embedded database
    to make testing and demonstration easier, then why not use an embedded application
    server too?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一个Servlet 3.0应用程序需要Java 6或更高版本，并且需要一个兼容的Servlet容器，如Tomcat 7。然而，如果您使用嵌入式数据库以使测试和演示更简单，那么为什么不用嵌入式应用程序服务器呢？
- en: The **Jetty web** **server** ([www.eclipse.org/jetty](http://www.eclipse.org/jetty))
    has a very nice plugin for Maven and Ant, which let developers launch their applications
    from a build script without having a server installed. Jetty 8 or higher supports
    the Servlet 3.0 specification.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jetty web** **服务器** ([www.eclipse.org/jetty](http://www.eclipse.org/jetty))有一个非常适合Maven和Ant的插件，它让开发者可以在不安装服务器的情况下从构建脚本中启动他们的应用程序。Jetty
    8或更高版本支持Servlet 3.0规范。'
- en: 'To add the Jetty plugin to your Maven POM, insert a small block of XML just
    inside the `root` element:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要向您的Maven POM中添加Jetty插件，请在`root`元素内插入一小块XML：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The highlighted `<configuration>` element is optional. On most operating systems,
    after Maven has launched an embedded Jetty instance, you can make changes and
    see them take effect immediately without a restart. However, due to issues with
    how Microsoft Windows handles file locking, you can't always save changes while
    the Jetty instance is running.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮显示的`<configuration>`元素是可选的。在大多数操作系统上，在Maven启动一个嵌入式Jetty实例之后，你可以在不重新启动的情况下立即进行更改并看到它们生效。然而，由于Microsoft
    Windows在处理文件锁定方面的问题，你有时无法在Jetty实例运行时保存更改。
- en: So if you are using Windows and would like the ability to make changes on-the-fly,
    make your own custom copy of `webdefault.xml` and save it to the location referenced
    in the preceding snippet. This file can be found by downloading and opening a
    `jetty-webapp` JAR file in an unzip tool, or by simply downloading this example
    application from the Packt Publishing website. The trick for Windows users is
    to locate the `useFileMappedBuffer` parameter, and change its value to `false`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你正在使用Windows并且希望有实时进行更改的能力，那么就复制一份`webdefault.xml`的定制副本，并将其保存到前面片段中引用的位置。这个文件可以通过下载并使用解压缩工具打开一个`jetty-webapp`
    JAR文件来找到，或者简单地从Packt Publishing网站下载这个示例应用程序。对于Windows用户来说，关键是要找到`useFileMappedBuffer`参数，并将其值更改为`false`。
- en: 'Now that you have a web server, let''s have it create and manage an H2 database
    for us. When the Jetty plugin starts up, it will automatically look for the file
    `src/main/webapp/WEB-INF/jetty-env.xml`. Let''s create this file and populate
    it with the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经有了一个Web服务器，那么让我们让它为我们创建和管理一个H2数据库。当Jetty插件启动时，它将自动寻找文件`src/main/webapp/WEB-INF/jetty-env.xml`。让我们创建这个文件，并使用以下内容填充它：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This causes Jetty to spawn a pool of H2 database connections, with the JDBC
    URL specifying an in-memory database rather than a persistent database on the
    filesystem. We register this data source with the JNDI as `jdbc/vaporwareDB`,
    so our application can access it by that name. We add a corresponding reference
    to our application''s `src/main/webapp/WEB-INF/web.xml` file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Jetty生成一个H2数据库连接池，JDBC URL指定的是内存中的数据库，而不是文件系统上的持久数据库。我们将这个数据源以`jdbc/vaporwareDB`的名称注册到JNDI中，所以我们的应用程序可以通过这个名字来访问它。我们在应用程序的`src/main/webapp/WEB-INF/web.xml`文件中添加一个相应的引用：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we need to tie this database resource to Hibernate by way of a standard
    `hibernate.cfg.xml` file, which we will create under `src/main/resources`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要通过一个标准的`hibernate.cfg.xml`文件将这个数据库资源与Hibernate绑定，这个文件我们将创建在`src/main/resources`目录下：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The first highlighted line associates the Hibernate session factory with the
    Jetty-managed `jdbc/vaporwareDBdata` source. The very last highlighted line declares
    `App` as an entity class tied to this session factory. Right now we only have
    this one entity, but we will add more `<class>` elements here as more entities
    are introduced in later chapters.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行高亮显示的代码将Hibernate会话工厂与Jetty管理的`jdbc/vaporwareDBdata`数据源关联起来。最后一行高亮显示的代码将`App`声明为一个与这个会话工厂绑定的实体类。目前我们只有这个一个实体，但随着后面章节中更多实体的引入，我们将在这里添加更多的`<class>`元素。
- en: In between, most of the `<properties>` elements relate to core settings that
    are probably familiar to experienced Hibernate users. However, the highlighted
    properties are directed at the Hibernate Search add-on. `hibernate.search.default.directory_provider`
    declares that we want to store our Lucene indexes on the filesystem, as opposed
    to in-memory. `hibernate.search.default.indexBase` specifies a location for the
    indexes, in a subdirectory within our project that Maven cleans up for us during
    the build process anyway.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之间，`<properties>`元素的大部分与核心设置相关，这些对于有经验的Hibernate用户来说可能很熟悉。然而，高亮显示的属性是针对Hibernate
    Search附加组件的。`hibernate.search.default.directory_provider`声明我们希望在文件系统上存储我们的Lucene索引，而不是在内存中。`hibernate.search.default.indexBase`指定索引的位置，在我们项目的子目录中，Maven在构建过程期间会为我们清理这个目录。
- en: 'Okay, we have an application, a database, and a server bringing the two together.
    Now, we can actually deploy and launch, by running Maven with the `jetty:run`
    goal:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有一个应用程序，一个数据库，还有一个服务器将这两者结合在一起。现在，我们可以实际部署和启动，通过运行带有`jetty:run`目标的Maven命令来实现：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `clean` goal removes traces of previous builds, and Maven then assembles
    our web application because this is implied by `jetty:run`. Our code is quickly
    compiled, and a Jetty server is launched on `localhost:8080`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean`目标消除了先前构建的痕迹，然后因为`jetty:run`的暗示，Maven组装我们的Web应用程序。我们的代码很快被编译，并在`localhost:8080`上启动了一个Jetty服务器：'
- en: '![Running the application](img/9205_01_02.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/9205_01_02.jpg)'
- en: 'We are live! We can now search for apps, using any keywords we like. A quick
    hint: in the downloadable sample code, all of the test data records contain the
    word `app` in their descriptions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上线了！现在我们可以使用我们喜欢的任何关键词搜索应用程序。一个小提示：在可下载的示例代码中，所有测试数据记录的描述中都包含单词`app`：
- en: '![Running the application](img/9205_01_03.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/9205_01_03.jpg)'
- en: 'The downloadable sample code spruces up the HTML for a more professional look.
    It also adds each app''s image alongside its name and description:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可下载的示例代码让HTML看起来更加专业。它还将在每个应用程序的名称和描述旁边添加应用程序的图片：
- en: '![Running the application](img/9205_01_04.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/9205_01_04.jpg)'
- en: The Maven command `mvn clean package` lets us package the application up as
    a WAR file, so we can deploy it to a standalone server outside of the Maven Jetty
    plugin. You can use any Java server compatible with the Servlet 3.0 specification
    (for example, Tomcat 7+), so long as you know how to set up a data source with
    the JNDI name `jdbc/vaporwareDB`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Maven命令`mvn clean package`允许我们将应用程序打包成WAR文件，因此我们可以将其部署到Maven Jetty插件之外的独立服务器上。只要你知道如何为JNDI名称`jdbc/vaporwareDB`设置数据源，就可以使用任何符合Servlet
    3.0规范的Java服务器（例如，Tomcat 7+），所以你都可以这样做。
- en: For that matter, you can replace `H2` with any standalone database that you
    like. Just add an appropriate JDBC driver to your Maven dependencies, and update
    the settings within `persistence.xml`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你可以将`H2`替换为你喜欢的任何独立数据库。只需将适当的JDBC驱动添加到你的Maven依赖项中，并在`persistence.xml`中更新设置。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the relationship between Hibernate ORM, the
    Hibernate Search add-on, and the underlying Lucene search engine. We saw how to
    map entities and fields to make them available for searching. We used the Hibernate
    Search DSL to write a full-text search query across multiple fields, and worked
    with the results as we would during a normal database query. We used an automated
    build process to compile our application, and deployed it to a web server with
    a live database.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Hibernate ORM、Hibernate Search扩展和底层Lucene搜索引擎之间的关系。我们了解了如何将实体和字段映射以使它们可供搜索。我们使用Hibernate
    Search DSL编写跨多个字段的全文搜索查询，并且像处理正常数据库查询一样处理结果。我们使用自动构建过程来编译我们的应用程序，并将其部署到一个带有实时数据库的Web服务器上。
- en: With these tools alone, we could incorporate Hibernate Search right now into
    many real-world applications, using any other server or database. In the next
    chapter, we will dive deeper into the options that Hibernate Search makes available
    for mapping entity objects to Lucene indexes. We will see how to handle an expanded
    data model, associating our VAPORware apps with devices and customer reviews.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 仅凭这些工具，我们就可以将Hibernate Search立即集成到许多实际应用程序中，使用任何其他服务器或数据库。在下一章中，我们将深入探讨Hibernate
    Search为映射实体对象到Lucene索引提供的选项。我们将了解如何处理扩展的数据模型，将我们的VAPORware应用程序与设备和客户评论关联起来。
