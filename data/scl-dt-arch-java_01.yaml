- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Basics of Modern Data Architecture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代数据架构基础
- en: With the advent of the 21st century, due to more and more internet usage and
    more powerful data insight tools and technologies emerging, there has been a data
    explosion, and data has become the new gold. This has implied an increased demand
    for useful and actionable data, as well as the need for quality data engineering
    solutions. However, architecting and building scalable, reliable, and secure data
    engineering solutions is often complicated and challenging.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着21世纪的到来，由于互联网使用越来越多，以及越来越强大的数据洞察工具和技术不断涌现，数据爆炸现象已经出现，数据已成为新的黄金。这暗示了对有用和可操作数据的需求增加，以及对高质量数据工程解决方案的需求。然而，构建可扩展、可靠和安全的数据工程解决方案通常很复杂且具有挑战性。
- en: A poorly architected solution often fails to meet the needs of the business.
    Either the data quality is poor, it fails to meet the SLAs, or it’s not sustainable
    or scalable as the data grows in production. To help data engineers and architects
    build better solutions, every year, dozens of open source and preoperatory tools
    get released. Even a well-designed solution sometimes fails because of a poor
    choice or implementation of the tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个设计不佳的解决方案往往无法满足业务需求。要么数据质量差，无法满足服务水平协议（SLAs），要么随着生产中数据的增长，它无法持续或扩展。为了帮助数据工程师和架构师构建更好的解决方案，每年都会有数十个开源和预操作工具发布。即使是一个设计良好的解决方案，有时也会因为工具选择或实施不当而失败。
- en: This book discusses various architectural patterns, tools, and technologies
    with step-by-step hands-on explanations to help an architect choose the most suitable
    solution and technology stack to solve a data engineering problem. Specifically,
    it focuses on tips and tricks to make architectural decisions easier. It also
    covers other essential skills that a data architect requires such as data governance,
    data security, performance engineering, and effective architectural presentation
    to customers or upper management.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论了各种架构模式、工具和技术，通过逐步的动手实践解释，帮助架构师选择最合适的解决方案和技术堆栈来解决数据工程问题。特别是，它专注于使架构决策更容易的技巧和窍门。它还涵盖了数据架构师所需的其他基本技能，例如数据治理、数据安全、性能工程以及向客户或高级管理层进行有效的架构展示。
- en: In this chapter, we will explore the landscape of data engineering and the basic
    features of data in modern business ecosystems. We will cover various categories
    of modern data engineering problems that a data architect tries to solve. Then,
    we will learn about the roles and responsibilities of a Java data architect. We
    will also discuss the challenges that a data architect faces while designing a
    data engineering solution. Finally, we will provide an overview of the techniques
    and tools that we’ll discuss in this book and how they will help an aspiring data
    architect do their job more efficiently and be more productive.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨数据工程的领域以及现代商业生态系统中数据的基本特征。我们将涵盖数据架构师试图解决的现代数据工程问题的各种类别。然后，我们将了解Java数据架构师的角色和职责。我们还将讨论数据架构师在设计数据工程解决方案时面临的挑战。最后，我们将概述本书中将要讨论的技术和工具，以及它们如何帮助有抱负的数据架构师更高效地工作并提高生产力。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Exploring the landscape of data engineering
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索数据工程领域
- en: Responsibilities and challenges of a Java data architect
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java数据架构师的责任和挑战
- en: Techniques to mitigate those challenges
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓解这些挑战的技术
- en: Exploring the landscape of data engineering
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数据工程领域
- en: In this section, you will learn what data engineering is and why it is needed.
    You will also learn about the various categories of data engineering problems
    and some real-world scenarios where they are found. It is important to understand
    the varied nature of data engineering problems before you learn how to architect
    solutions for such real-world problems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解数据工程是什么以及为什么需要它。你还将了解数据工程问题的各种类别以及它们在现实世界中的应用场景。在学习如何为这类现实世界问题构建解决方案之前，了解数据工程问题的多样性是很重要的。
- en: What is data engineering?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数据工程？
- en: By definition, **data engineering** is the branch of software engineering that
    specializes in collecting, analyzing, transforming, and storing data in a usable
    and actionable form.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，**数据工程**是软件工程的一个分支，专注于以可用和可操作的形式收集、分析、转换和存储数据。
- en: With the growth of social platforms, search engines, and online marketplaces,
    there has been an exponential increase in the rate of data generation. In 2020
    alone, around 2,500 petabytes of data was generated by humans each day. It is
    estimated that this figure will go up to 468 exabytes per day by 2025\. The high
    volume and availability of data have enabled rapid technological development in
    AI and data analytics. This has led businesses, corporations, and governments
    to gather insights like never before to give customers a better experience of
    their services.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 随着社交平台、搜索引擎和在线市场的增长，数据生成的速度呈指数级增长。仅2020年，人类每天就产生了约2500个PB的数据。预计到2025年，这一数字将增加到每天468个EB。数据的高体积和可用性已经使人工智能和数据分析领域的技术发展迅速。这导致企业、公司和政府能够以前所未有的方式收集洞察力，为客户提供更好的服务体验。
- en: However, raw data usually is seldom used. As a result, there is an increased
    demand for creating usable data, which is secure and reliable. Data engineering
    revolves around creating scalable solutions to collect the raw data and then analyze,
    validate, transform, and store it in a usable and actionable format. Optionally,
    in certain scenarios and organizations, in modern data engineering, businesses
    expect usable and actionable data to be published as a service.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，原始数据通常很少被使用。因此，对创建可用的、安全可靠的数据的需求增加了。数据工程围绕创建可扩展的解决方案来收集原始数据，然后分析、验证、转换，并以可用的和可操作的形式存储它。在特定场景和组织中，现代数据工程中，企业期望可用的和可操作的数据作为一项服务发布。
- en: 'Before we dive deeper, let’s explore a few practical use cases of data engineering:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨之前，让我们探索一些数据工程的实际应用案例：
- en: '**Use case 1**: **American Express** (**Amex**) is a leading credit card provider,
    but it has a requirement to group customers with similar spending behavior together.
    This ensures that Amex can generate personalized offers and discounts for targeted
    customers. To do this, Amex needs to run a clustering algorithm on the data. However,
    the data is collected from various sources. A few data flows from MobileApp, a
    few flows from different Salesforce organizations such as sales and marketing,
    and a few data flows from logs and JSON events will be required. This data is
    known as raw data, and it can contain junk characters, missing fields, special
    characters, and sometimes unstructured data such as log files. Here, the data
    engineering team ingests that data from different sources, cleans it, transforms
    it, and stores it in a usable structured format. This ensures that the application
    that performs clustering can run on clean and sorted data.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例 1**：**美国运通**（**Amex**）是一家领先的信用卡提供商，但它需要将具有相似消费行为的客户分组在一起。这确保了Amex可以为目标客户提供个性化的优惠和折扣。为此，Amex需要在数据上运行聚类算法。然而，数据来自不同的来源。一些数据来自MobileApp，一些来自不同的Salesforce组织，如销售和营销，还有一些数据来自日志和JSON事件。这些数据被称为原始数据，可能包含垃圾字符、缺失字段、特殊字符，有时还包含如日志文件这样的非结构化数据。在这里，数据工程团队从不同的来源摄取这些数据，对其进行清理、转换，并以可用的结构化格式存储。这确保了执行聚类的应用程序可以在清洁和排序后的数据上运行。'
- en: '**Use case 2**: A health insurance provider receives data from multiple sources.
    This data comes from various consumer-facing applications, third-party vendors,
    Google Analytics, other marketing platforms, and mainframe batch jobs. However,
    the company wants a single data repository to be created that can serve different
    teams as the source of clean and sorted data. Such a requirement can be implemented
    with the help of data engineering.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例 2**：一家健康保险公司从多个来源接收数据。这些数据来自各种面向消费者的应用程序、第三方供应商、Google Analytics、其他营销平台和主机批量作业。然而，公司希望创建一个单一的数据存储库，可以为不同的团队提供清洁和排序后的数据来源。这样的需求可以通过数据工程来实现。'
- en: Now that we understand data engineering, let’s look at a few of its basic concepts.
    We will start by looking at the dimensions of data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了数据工程，让我们来看看它的几个基本概念。我们将从数据的维度开始。
- en: Dimensions of data
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据维度
- en: Any discussion on data engineering is incomplete without talking about the dimensions
    of data. The dimensions of data are some basic characteristics by which the nature
    of data can be analyzed. The starting point of data engineering is analyzing and
    understanding the data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何关于数据工程的讨论如果没有谈到数据的维度都是不完整的。数据的维度是一些基本特征，通过这些特征可以分析数据的性质。数据工程的起点是分析和理解数据。
- en: 'To successfully analyze and build a data-oriented solution, the four *V*s of
    modern data analysis are very important. These can be seen in the following diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功分析和构建面向数据解决方案，现代数据分析的四个 *V* 非常重要。这些可以在以下图表中看到：
- en: '![Figure 1.1 – Dimensions of data ](img/B17084_01_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 数据维度](img/B17084_01_01.jpg)'
- en: Figure 1.1 – Dimensions of data
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 数据维度
- en: 'Let’s take a look at each of these *V*s in detail:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些 *V* 的每个方面：
- en: '**Volume**: This refers to the size of data. The size of the data can be as
    small as a few bytes to as big as a few hundred petabytes. Volume analysis usually
    involves understanding the size of the whole dataset or the size of a single data
    record or event. Understanding the size is essential in choosing the type of technologies
    and infrastructure sizing decisions to process and store the data.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**体积**：这指的是数据的大小。数据的大小可以从几字节到几百拍字节不等。体积分析通常涉及理解整个数据集的大小或单个数据记录或事件的大小。了解大小对于选择处理和存储数据的技术和基础设施规模决策至关重要。'
- en: '**Velocity**: This refers to the speed at which data is getting generated.
    High-velocity data requires distributed processing. Analyzing the speed of data
    generation is especially critical for scenarios where businesses require usable
    data to be made available in real-time or near-real-time.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：这指的是数据生成的速度。高速数据需要分布式处理。分析数据生成的速度对于企业需要实时或近实时提供可用数据的情况尤为重要。'
- en: '**Variety**: This refers to the various variations in the format in which the
    data source can generate the data. Usually, they can be one of the three following
    types:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多样性**：这指的是数据源可以生成数据的各种格式变化。通常，它们可以是以下三种类型之一：'
- en: '**Structured**: Structured data is where the number of columns, their data
    types, and their positions are fixed. All classical datasets that fit neatly in
    the relational data model are perfect examples of structured data.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化**：结构化数据是指列数、数据类型及其位置固定。所有能够完美适应关系数据模型的传统数据集都是结构化数据的完美例子。'
- en: '**Unstructured**: These datasets don’t conform to a specific structure. Each
    record in such a dataset can have any number of columns in any arbitrary format.
    Examples include audio and video files.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非结构化**：这些数据集不符合特定的结构。此类数据集中的每条记录可以具有任意数量的列，格式任意。例如，音频和视频文件。'
- en: '`.json` or a `.xml` file.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.json` 或 `.xml` 文件。'
- en: '**Veracity**: This refers to the trustworthiness of the data. In simple terms,
    it is related to the quality of the data. Analyzing the noise of data is as important
    as analyzing any other aspect of the data. This is because this analysis helps
    create a robust processing rule that ultimately determines how successful a data
    engineering solution is. Many well-engineered and designed data engineering solutions
    fail in production due to a lack of understanding about the quality and noise
    of the source data.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真实性**：这指的是数据的可信度。简单来说，它与数据的质量相关。分析数据的噪声与分析数据的任何其他方面一样重要。这是因为这种分析有助于创建一个稳健的处理规则，最终决定数据工程解决方案的成功程度。许多精心设计和构建的数据工程解决方案在生产中失败，原因是对源数据的质量和噪声缺乏了解。'
- en: Now that we have a fair idea of the characteristics by which the nature of data
    can be analyzed, let’s understand how they play a vital role in different types
    of data engineering problems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对分析数据性质的特征有了相当的了解，让我们了解它们在不同类型的数据工程问题中扮演着至关重要的角色。
- en: Types of data engineering problems
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程问题的类型
- en: 'Broadly speaking, the kinds of problems that data engineers solve can be classified
    into two basic types:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从广义上讲，数据工程师解决的问题可以分为两种基本类型：
- en: '**Processing problems**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理问题**'
- en: '**Publishing problems**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布问题**'
- en: Let’s take a look at these problems in more detail.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这些问题。
- en: Processing problems
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理问题
- en: The problems that are related to collecting raw data or events, processing them,
    and storing them in a usable or actionable data format are broadly categorized
    as processing problems. Typical use cases can be a data ingestion problem such
    as **Extract, Transform, Load** (**ETL**) or a data analytics problem such as
    generating a year-on-year report.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与收集原始数据或事件、处理它们并将它们存储在可用或可操作的数据格式中相关的问题，可以广泛地归类为处理问题。典型用例可以是数据摄取问题，如**提取、转换、加载**（**ETL**）或数据分析问题，如生成年度报告。
- en: 'Again, processing problems can be divided into three major categories, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，处理问题可以分为三个主要类别，如下：
- en: Batch processing
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批处理
- en: Real-time processing
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时处理
- en: Near real-time processing
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 近实时处理
- en: 'This can be seen in the following diagram:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在以下图中看到：
- en: '![Figure 1.2 – Categories of processing problems ](img/B17084_01_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 处理问题的类别](img/B17084_01_02.jpg)'
- en: Figure 1.2 – Categories of processing problems
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 处理问题的类别
- en: Let’s take a look at each one of these categories in detail.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些类别中的每一个。
- en: Batch processing
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 批处理
- en: 'If the SLA of processing is more than 1 hour (for example, if the processing
    needs to be done once in 2 hours, once daily, once weekly, or once biweekly),
    then such a problem is called a batch processing problem. This is because, when
    a system processes data at a longer time interval, it usually processes a batch
    of data records and not a single record/event. Hence, such processing is called
    **batch processing**:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理的SLA超过1小时（例如，如果处理需要每2小时、每天、每周或每两周进行一次），那么这种问题被称为批处理问题。这是因为，当系统以较长的时间间隔处理数据时，它通常处理的是一批数据记录而不是单个记录/事件。因此，这种处理被称为**批处理**：
- en: '![Figure 1.3 – Batch processing problem ](img/B17084_01_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 批处理问题](img/B17084_01_03.jpg)'
- en: Figure 1.3 – Batch processing problem
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 批处理问题
- en: Usually, a batch processing solution depends on the volume of data. If the data
    volume is more than tens of terabytes, usually, it needs to be processed as big
    data. Also, since big data processes are schedule-driven, a workflow manager or
    schedular needs to run its jobs. We will discuss batch processing in more detail
    later in this book.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，批处理解决方案取决于数据量。如果数据量超过数十个太字节，通常需要将其作为大数据处理。此外，由于大数据处理是调度驱动的，需要一个工作流程管理器或调度器来运行其作业。我们将在本书的后面更详细地讨论批处理。
- en: Real-time processing
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实时处理
- en: A **real-time processing** problem is a use case where raw data/events are to
    be processed on the fly and the response or the processing outcome should be available
    within seconds, or at most within 2 to 5 minutes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**实时处理**问题是一个用例，其中原始数据/事件需要即时处理，响应或处理结果应在几秒内或最多在2到5分钟内可用。'
- en: 'As shown in the following diagram, a real-time process receives data in the
    form of an event stream and immediately processes it. Then, it either sends the
    processed event to a sink or to another stream of events to be processed further.
    Since this kind of processing happens on a stream of events, this is known as
    real-time stream processing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下图所示，实时过程以事件流的形式接收数据，并立即处理它。然后，它要么将处理后的事件发送到接收器，要么发送到另一个事件流以进一步处理。由于这种处理发生在事件流上，因此这种处理被称为实时流处理：
- en: '![Figure 1.4 – Real-time stream processing ](img/B17084_01_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – 实时流处理](img/B17084_01_04.jpg)'
- en: Figure 1.4 – Real-time stream processing
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 实时流处理
- en: As shown in *Figure 1.4*, event E0 gets processed and sent out by the streaming
    application, while events E1, E2 and E3 are waiting to be processed in the queue.
    At t1, event E1 also gets processed, showing continuous processing of events by
    streaming application
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图1.4*所示，事件E0被流应用程序处理并发送出去，而事件E1、E2和E3则在队列中等待处理。在t1时，事件E1也被处理，显示了流应用程序对事件的连续处理
- en: An event can generate at any time (24/7), which creates a new kind of problem.
    If the producer application of an event directly sends the event to a consumer,
    there is a chance of event loss, unless the consumer application is running 24/7\.
    Even bringing down the consumer application for maintenance or upgrades isn’t
    possible, which means there should be zero downtime for the consumer application.
    However, any application with zero downtime is not realistic. Such a model of
    communication between applications is called **point-to-point** communication.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 事件可以在任何时间生成（24/7），这创造了一种新的问题。如果事件的产生者应用程序直接将事件发送给消费者，就有可能发生事件丢失，除非消费者应用程序24/7都在运行。即使将消费者应用程序关闭进行维护或升级也是不可能的，这意味着消费者应用程序应该没有停机时间。然而，任何没有停机时间的应用程序都是不现实的。这种应用程序之间的通信模型被称为**点对点**通信。
- en: Another challenge in point-to-point communication for real-time problems is
    the speed of processing as this should be always equal to or greater than that
    of a producer. Otherwise, there will be a loss of events or a possible memory
    overrun of the consumer. So, instead of directly sending events to the consumer
    application, they are sent asynchronously to an **Event Bus** or a **Message Bus**.
    An Event Bus is a high availability container that can hold events such as a queue
    or a topic. This pattern of sending and receiving data asynchronously by introducing
    a high availability Event Bus in between is called the **Pub-Sub framework**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时问题中的点对点通信面临的另一个挑战是处理速度，因为这应该始终等于或大于生产者的速度。否则，将会有事件丢失或消费者可能发生内存溢出。因此，他们不是直接将事件发送到消费者应用程序，而是异步发送到**事件总线**或**消息总线**。事件总线是一个高可用性容器，可以存储诸如队列或主题的事件。通过在中间引入高可用性事件总线来异步发送和接收数据，这种模式被称为**发布-订阅框架**。
- en: 'The following are some important terms related to real-time processing problems:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与实时处理问题相关的一些重要术语：
- en: '**Events**: This can be defined as a data packet generated as a result of an
    action, a trigger, or an occurrence. They are also popularly known as **messages**
    in the Pub-Sub framework.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：这可以定义为由于动作、触发器或发生而产生的数据包。它们在发布-订阅框架中也普遍被称为**消息**。'
- en: '**Producer**: A system or application that produces and sends events to a Message
    Bus is called a **publisher** or a **producer**.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产者**：生产和向消息总线发送事件的是**发布者**或**生产者**。'
- en: '**Consumer**: A system or application that consumes events from a Message Bus
    to process is called a **consumer** or a **subscriber**.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：从消息总线中消费事件以进行处理的是**消费者**或**订阅者**。'
- en: '**Queue**: This has a single producer and a single consumer. Once a message/event
    is consumed by a consumer, that event is removed from the queue. As an analogy,
    it’s like an SMS or an email sent to you by one of your friends.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**队列**：它有一个单一的生产者和一个单一的消费者。一旦消费者消费了消息/事件，该事件就从队列中删除。作为一个类比，它就像你朋友发送给你的短信或电子邮件。'
- en: '**Topic**: Unlike a queue, a topic can have multiple consumers and producers.
    It’s a broadcasting channel. As an analogy, it’s like a TV channel such as HBO,
    where multiple producers are hosting their show, and if you have subscribed to
    that channel, you will be able to watch any of those shows.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：与队列不同，主题可以有多个消费者和生产者。它是一个广播频道。作为一个类比，它就像HBO这样的电视频道，多个生产者都在主持他们的节目，如果你订阅了这个频道，你将能够观看任何这些节目。'
- en: A real-world example of a real-time problem is credit card fraud detection,
    where you might have experienced an automated confirmation call to verify the
    authenticity of a transaction from your bank, if any transaction seems suspicious
    while being executed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实世界中的实时问题示例是信用卡欺诈检测，你可能经历过银行对你的交易进行自动确认电话，如果在执行过程中有任何交易看起来可疑。
- en: Near-real-time processing
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 近实时处理
- en: '**Near-real-time processing**, as its name suggests, is a problem whose response
    or processing time doesn’t need to be as fast as real time but should be less
    than 1 hour. One of the features of near-real-time processing is that it processes
    events in micro batches. For example, a near-real-time process may process data
    in a batch interval of every 5 minutes, a batch size of every 100 records, or
    a combination of both (whichever condition is satisfied first).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**近实时处理**，正如其名称所暗示的，是一个响应或处理时间不需要像实时那样快，但应该小于1小时的问题。近实时处理的一个特点是它以微批次处理事件。例如，一个近实时过程可能每5分钟处理一次批次，每100条记录一个批次大小，或者两者的组合（满足条件优先）。'
- en: At time tx, all events (E1, E2 and E3) that are generated between t0 and tx
    are processed together by near real-time processing job. Similarly all events
    (E4, E5 and E6) between time tx and tn are processed together.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间tx时，所有在t0和tx之间生成的事件（E1、E2和E3）都由近实时处理作业一起处理。同样，所有在时间tx和tn之间的事件（E4、E5和E6）也一起处理。
- en: '![Figure 1.5 – Near-real-time processing ](img/B17084_01_05.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – 近实时处理](img/B17084_01_05.jpg)'
- en: Figure 1.5 – Near-real-time processing
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – 近实时处理
- en: Typical near-real-time use cases are recommendation problems such as product
    recommendations for services such as Amazon or video recommendations for services
    such as YouTube and Netflix.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的近实时用例包括推荐问题，如亚马逊的产品推荐或YouTube和Netflix的视频推荐。
- en: Publishing problems
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**发布问题**'
- en: Publishing problems deal with publishing the processed data to different businesses
    and teams so that data is easily available with proper security and data governance.
    Since the main goal of the publishing problem is to expose the data to a downstream
    system or an external application, having extremely robust data security and governance
    is essential.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 发布问题涉及将处理后的数据发布到不同的企业和团队，以便数据可以轻松获取，同时具备适当的安全性和数据治理。由于发布问题的主要目标是向下游系统或外部应用程序暴露数据，因此拥有极其强大的数据安全和治理至关重要。
- en: 'Usually, in modern data architectures, data is published in one of three ways:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在现代数据架构中，数据以以下三种方式之一发布：
- en: Sorted data repositories
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序后的数据存储库
- en: Web services
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务
- en: Visualizations
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化
- en: Let’s take a closer look at each.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看每个部分。
- en: Sorted data repositories
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 排序后的数据存储库
- en: 'Sorted data repositories is a common term used for various kinds of repositories
    that are used to store processed data. This is usable and actionable data and
    can be directly queried by businesses, analytics teams, and other downstream applications
    for their use cases. They are broadly divided into three types:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 排序后的数据存储库是一个常用的术语，用于指代各种用于存储处理数据的存储库。这些数据是可用和可操作的，可以直接由企业、分析团队和其他下游应用程序根据其用例进行查询。它们大致分为三种类型：
- en: Data warehouse
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据仓库
- en: Data lake
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据湖
- en: Data hub
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据枢纽
- en: A **data warehouse** is a central repository of integrated and structured data
    that’s mainly used for reporting, data analysis, and **Business Intelligence**
    (**BI**). A **data lake** consists of structured and unstructured data, which
    is mainly used for data preparation, reporting, advanced analytics, data science,
    and **Machine Learning** (**ML**). A **data hub** is the central repository of
    trusted, governed, and shared data, which enables seamless data sharing between
    diverse endpoints and connects business applications to analytic structures such
    as data warehouses and data lakes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据仓库**是一个集成的结构化数据集中存储库，主要用于报告、数据分析和企业智能（**BI**）。**数据湖**由结构化和非结构化数据组成，主要用于数据准备、报告、高级分析、数据科学和**机器学习**（**ML**）。**数据枢纽**是受信任、受管理和共享数据的集中存储库，它使不同端点之间的数据共享无缝，并将业务应用程序连接到数据仓库和数据湖等分析结构。'
- en: Web services
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络服务
- en: Another publishing pattern is where data is published as a service, popularly
    known as **Data as a Service**. This data publishing pattern has many advantages
    as it enables security, immutability, and governance by design. Nowadays, as cloud
    technologies and GraphQL are becoming popular, Data-as-a-Service is getting a
    lot of traction in the industry.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种发布模式是将数据作为服务发布，通常称为**数据即服务**。这种数据发布模式具有许多优点，因为它通过设计实现了安全性、不可变性和治理。如今，随着云计算技术和
    GraphQL 的普及，数据即服务在行业中获得了很大的关注。
- en: 'The two popular mechanisms of publishing Data as a Service are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 发布数据作为服务的两种流行机制如下：
- en: REST
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST
- en: GraphQL
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL
- en: We will discuss these techniques in detail later in this book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面详细讨论这些技术。
- en: Visualization
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可视化
- en: 'There’s a popular saying: *A picture is worth a thousand words*. Visualization
    is a technique by which reports, analytics, and statistics about the data are
    captured visually in graphs and charts.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有句流行的话：*一图胜千言*。可视化是一种技术，通过图表和图形等视觉方式捕捉关于数据的报告、分析和统计信息。
- en: Visualization is helpful for businesses and leadership to understand, analyze,
    and get an overview of the data flowing in their business. This helps a lot in
    decision-making and business planning.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化有助于企业和领导层理解、分析和了解其业务中流动的数据概览。这在决策和业务规划中非常有帮助。
- en: 'A few of the most common and popular visualization tools are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最常见和流行的可视化工具如下：
- en: '**Tableau** is a proprietary data visualization tool. This tool comes with
    multiple source connectors to import data into it and create easy fast visualization
    using drag-and-drop visualization components such as graphs and charts. You can
    find out more about this product at [https://www.tableau.com/](https://www.tableau.com/).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tableau** 是一款专有的数据可视化工具。该工具包含多个源连接器，可以将其导入并使用拖放可视化组件（如图表和图形）创建快速直观的可视化。您可以在[https://www.tableau.com/](https://www.tableau.com/)了解更多关于此产品信息。'
- en: '**Microsoft Power BI** is a proprietary tool from Microsoft that allows you
    to collect data from various data sources to connect and create powerful dashboards
    and visualizations for BI. While both Tableau and Power BI offer data visualization
    and BI, Tableau is more suited for seasoned data analysts, while Power BI is useful
    for non-technical or inexperienced users. Also, Tableau works better with huge
    volumes of data compared to Power BI. You can find out more about this product
    at [https://powerbi.microsoft.com/](https://powerbi.microsoft.com/).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Power BI**是微软的一个专有工具，允许您从各种数据源收集数据，连接并创建用于商业智能的强大仪表板和可视化。虽然Tableau和Power
    BI都提供数据可视化和商业智能，但Tableau更适合经验丰富的数据分析师，而Power BI对非技术或经验不足的用户更有用。此外，与Power BI相比，Tableau更适合处理大量数据。您可以在[https://powerbi.microsoft.com/](https://powerbi.microsoft.com/)了解更多关于此产品的信息。'
- en: '**Elasticsearch-Kibana** is an open source tool whose source code is open source
    and has free versions for on-premise installations and paid subscriptions for
    cloud installation. This tool helps you ingest data from any data source into
    Elasticsearch and create visualizations and dashboards using Kibana. Elasticsearch
    is a powerful text-based **Lucene** search engine that not only stores the data
    but enables various kinds of data aggregation and analysis (including ML analysis).
    Kibana is a dashboarding tool that works together with Elasticsearch to create
    very powerful and useful visualizations. You can find out more about these products
    at [https://www.elastic.co/elastic-stack/](https://www.elastic.co/elastic-stack/).'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elasticsearch-Kibana**是一个开源工具，其源代码是开源的，并且提供免费版本用于本地安装，以及付费订阅的云安装。这个工具可以帮助您从任何数据源将数据导入Elasticsearch，并使用Kibana创建可视化和仪表板。Elasticsearch是一个强大的基于文本的**Lucene**搜索引擎，不仅存储数据，还支持各种类型的数据聚合和分析（包括机器学习分析）。Kibana是一个仪表板工具，与Elasticsearch协同工作，创建非常强大和有用的可视化。您可以在[https://www.elastic.co/elastic-stack/](https://www.elastic.co/elastic-stack/)了解更多关于这些产品的信息。'
- en: Important note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A Lucene index is a full-text inverse index. This index is extremely powerful
    and fast for text-based searches and is the core indexing technology behind most
    search engines. A Lucene index takes all the documents, splits them into words
    or tokens, and then creates an index for each word.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Lucene索引是一个全文反向索引。这个索引在基于文本的搜索中非常强大且快速，是大多数搜索引擎背后的核心索引技术。Lucene索引会将所有文档拆分成单词或标记，然后为每个单词创建索引。
- en: '**Apache Superset** is a completely open source data visualization tool (developed
    by Airbnb). It is a powerful dashboarding tool and is completely free, but its
    data source connector support is limited, mostly to SQL databases. A few interesting
    features are its built-in role-based data access, an API for customization, and
    extendibility to support new visualization plugins. You can find out more about
    this product at [https://superset.apache.org/](https://superset.apache.org/).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Superset**是一个完全开源的数据可视化工具（由Airbnb开发）。它是一个强大的仪表板工具，并且完全免费，但其数据源连接器支持有限，主要限于SQL数据库。一些有趣的功能包括其内置的角色基础数据访问、用于定制的API以及可扩展性以支持新的可视化插件。您可以在[https://superset.apache.org/](https://superset.apache.org/)了解更多关于此产品的信息。'
- en: While we have briefly discussed a few of the visualization tools available in
    the market, there are many visualizations and competitive alternatives available.
    Discussing data visualization in more depth is beyond the scope of this book.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们简要讨论了市场上的一些可视化工具，但还有许多可视化工具和竞争性替代品。更深入地讨论数据可视化超出了本书的范围。
- en: So far, we have provided an overview of data engineering and the various types
    of data engineering problems. In the next section, we will explore what role a
    Java data architect plays in the data engineering landscape.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经概述了数据工程及其各种类型的数据工程问题。在下一节中，我们将探讨Java数据架构师在数据工程领域扮演的角色。
- en: Responsibilities and challenges of a Java data architect
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java数据架构师的责任和挑战
- en: Data architects are senior technical leaders who map business requirements to
    technical requirements, envision technical solutions to solve business problems,
    and establish data standards and principles. Data architects play a unique role,
    where they understand both the business and technology. They are like the *Janus*
    of business and technology, where on one hand they can look, understand, and communicate
    with the business, and on the other, they do the same with technology. Data architects
    create processes that are used to plan, specify, enable, create, acquire, maintain,
    use, archive, retrieve, control, and purge data. According to DAMMA’s data management
    body of knowledge, *a data architect provides a standard common business vocabulary,
    expresses strategic requirements, outlines high-level integrated designs to meet
    those requirements, and aligns with the enterprise strategy and related business
    architecture.*
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构师是高级技术领导者，他们负责将业务需求映射到技术需求，构想解决业务问题的技术解决方案，并建立数据标准和原则。数据架构师扮演着独特的角色，他们既了解业务也了解技术。他们就像是商业和技术领域的**雅努斯**，一方面他们可以观察、理解和与业务沟通，另一方面，他们也以同样的方式与技术沟通。数据架构师创建用于规划、指定、启用、创建、获取、维护、使用、归档、检索、控制和清除数据的流程。根据DAMMA的数据管理知识体系，**数据架构师提供标准化的通用业务词汇，表达战略需求，概述满足这些需求的高级集成设计，并与企业战略和相关的业务架构保持一致**。
- en: 'The following diagram shows the cross-cutting concerns that a data architect
    handles:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图显示了数据架构师处理的多重关注点：
- en: '![Figure 1.6 – Cross-cutting concerns of a data architect ](img/B17084_01_06.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – 数据架构师的多重关注点](img/B17084_01_06.jpg)'
- en: Figure 1.6 – Cross-cutting concerns of a data architect
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – 数据架构师的多重关注点
- en: 'The typical responsibilities of a Java data architect are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Java数据架构师的典型职责如下：
- en: Interpreting business requirements into technical specifications, which includes
    data storage and integration patterns, databases, platforms, streams, transformations,
    and the technology stack
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将业务需求解释为技术规范，包括数据存储和集成模式、数据库、平台、流、转换和技术栈
- en: Establishing the architectural framework, standards, and principles
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立架构框架、标准和原则
- en: Developing and designing reference architectures that are used as patterns that
    can be followed by others to create and improve data systems
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和设计用作模式、供他人遵循以创建和改进数据系统的参考架构
- en: Defining data flows and their governance principles
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义数据流及其治理原则
- en: Recommending the most suitable solutions, along with their technology stacks,
    while considering scalability, performance, resource availability, and cost
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在考虑可扩展性、性能、资源可用性和成本的同时，推荐最合适的解决方案及其技术栈
- en: Coordinating and collaborating with multiple departments, stakeholders, partners,
    and external vendors
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调和与多个部门、利益相关者、合作伙伴和外部供应商合作
- en: 'In the real world, a data architect is supposed to play a combination of three
    disparate roles, as shown in the following diagram:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，数据架构师应该扮演三种不同的角色，如下面的图所示：
- en: '![Figure 1.7 – Multifaced role of a data architect ](img/B17084_01_07.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – 数据架构师的多面角色](img/B17084_01_07.jpg)'
- en: Figure 1.7 – Multifaced role of a data architect
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 数据架构师的多面角色
- en: 'Let’s look at these three architectural roles in more detail:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这三个架构角色：
- en: '**Data architectural gatekeeper**: An architectural gatekeeper is a person
    or a role that ensures the data model is following the necessary standards and
    that the architecture is following the proper architectural principles. They look
    for any gaps in terms of the solution or business expectations. Here, a data architect
    takes a negative role in finding faults or gaps in the product or solution design
    and delivery (including a lack of or any gap in best practices in the data model,
    architecture, implementation techniques, testing procedures, **continuous integration/continuous
    delivery** (**CI/CD**) efforts, or business expectations).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据架构守护者**：架构守护者是一个人或一个角色，确保数据模型遵循必要的标准，架构遵循适当的架构原则。他们寻找解决方案或业务期望方面的任何差距。在这里，数据架构师在产品或解决方案设计及交付（包括数据模型、架构、实施技术、测试程序、**持续集成/持续交付**（**CI/CD**）努力或业务期望中的任何缺乏或差距）中扮演着负面角色，寻找错误或差距。'
- en: '**Data advisor**: A data advisor is a data architect that focuses more on finding
    solutions rather than finding a problem. A data advisor highlights issues, but
    more importantly, they show an opportunity or propose a solution for them. A data
    advisor should understand the technical as well as the business aspect of a problem
    and solution and should be able to advise to improve the solution.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据顾问**：数据顾问是一个更专注于寻找解决方案而不是寻找问题的数据架构师。数据顾问强调问题，但更重要的是，他们展示了机会或提出了解决方案。数据顾问应该理解问题的技术以及业务方面和解决方案，并且应该能够就改进解决方案提供建议。'
- en: '**Business executive**: Apart from the technical roles that a data architect
    plays, the data architect needs to play an executive role as well. As stated earlier,
    the data architect is like the Janus of business and technology, so they are expected
    to be a great communicator and sales executive who can sell their idea or solution
    (that is technical) to nontechnical folks. Often, a data architect needs to present
    elevator speeches to higher leadership to show opportunities and convince them
    of a solution for business problems. To be successful in this role, a data architect
    must think like a business executive – *What is the ROI? Or what is there for
    me in it? How much can we save in terms of time and money with this solution or
    opportunity?* Also, a data architect should be concise and articulate in presenting
    their idea so that it creates immediate interest among the listeners (mostly business
    executives, clients, or investors).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务高管**：除了数据架构师扮演的技术角色外，数据架构师还需要扮演一个高管角色。正如之前所述，数据架构师就像是商业和技术之间的雅努斯，因此他们被期望成为一个优秀的沟通者和销售高管，能够向非技术人员推销他们的想法或解决方案（即技术性的）。通常，数据架构师需要向高层领导进行电梯演讲，展示机会并说服他们接受针对商业问题的解决方案。要在这个角色中取得成功，数据架构师必须像业务高管一样思考——*ROI是什么？或者我能从中得到什么？我们通过这个解决方案或机会能节省多少时间和金钱？*
    此外，数据架构师在表达他们的想法时应该简洁明了，以便在听众中（主要是业务高管、客户或投资者）产生立即的兴趣。'
- en: Let’s understand the difference between a data architect and data engineer.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解数据架构师和数据工程师之间的区别。
- en: Data architect versus data engineer
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据架构师与数据工程师的比较
- en: The data architect and data engineer are related roles. A data architect visualizes,
    conceptualizes, and creates the blueprint of the data engineering solution and
    framework, while the data engineer takes the blueprint and implements the solution.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构师和数据工程师是相关联的角色。数据架构师负责可视化、概念化和创建数据工程解决方案和框架的蓝图，而数据工程师则根据蓝图实施解决方案。
- en: Data architects are responsible for putting data chaos in order, generated by
    enormous piles of business data. Each data analytics or data science team requires
    a data architect who can visualize and design the data framework to create clean,
    analyzed, managed, formatted, and secure data. This framework can be utilized
    further by data engineers, data analysts, and data scientists for their work.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构师负责整理由大量业务数据产生的数据混乱。每个数据分析或数据科学团队都需要一个数据架构师，他们能够可视化和设计数据框架，以创建干净、分析、管理、格式化和安全的数据。这个框架可以进一步被数据工程师、数据分析师和数据科学家用于他们的工作。
- en: Challenges of a data architect
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据架构师面临的挑战
- en: 'Data architects face a lot of challenges in their day-to-day work. We will
    be focusing on the main challenges that a data architect faces on a day-to-day
    basis:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构师在日常工作中面临许多挑战。我们将重点关注数据架构师在日常工作中面临的主要挑战：
- en: Choosing the right architectural pattern
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的架构模式
- en: Choosing the best-fit technology stack
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择最佳的技术堆栈
- en: Lack of actionable data governance
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏可操作的数据治理
- en: Recommending and communicating effectively to leadership
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向领导层推荐和有效沟通
- en: Let’s take a closer look.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解一下。
- en: Choosing the right architectural pattern
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择正确的架构模式
- en: A single data engineering problem can be solved in many ways. However, with
    the ever-evolving expectations of customers and the evolution of new technologies,
    choosing the correct architectural pattern has become more challenging. What is
    more interesting is that with the changing technological landscape, the need for
    agility and extensibility in architecture has increased many folds to avoid unnecessary
    costs and sustainability of architecture over time.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一的数据工程问题可以通过许多方式解决。然而，随着客户不断变化的期望和新技术的演变，选择正确的架构模式变得更加具有挑战性。更有趣的是，随着技术环境的改变，架构的灵活性和可扩展性需求增加了许多倍，以避免不必要的成本和确保架构随时间的可持续性。
- en: Choosing the best-fit technology stack
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择最适合的技术栈
- en: One of the complex problems that a data architect needs to figure out is the
    technology stack. Even when you have created a very well-architected solution,
    whether your solution will fly or flop will depend on the technology stack you
    are choosing and how you are planning to use it. As more and more tools, technologies,
    databases, and frameworks are developed, a big challenge remains for data architects
    to choose an optimum tech stack that can help create a scalable, reliable, and
    robust solution. Often, a data architect needs to take into account other non-technical
    factors as well, such as the future growth prediction of the tool, the market
    availability of skilled resources for those tools, vendor lock-in, cost, and community
    support options.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构师需要解决的问题之一是技术栈。即使你已经创建了一个非常完善解决方案，你的解决方案能否成功或失败，将取决于你选择的技术栈以及你计划如何使用它。随着越来越多的工具、技术、数据库和框架的开发，数据架构师面临的一个大挑战是选择一个最佳的技术栈，以帮助创建可扩展、可靠和健壮的解决方案。通常，数据架构师还需要考虑其他非技术因素，例如工具的未来增长预测、这些工具在市场上的熟练资源可用性、供应商锁定、成本和社区支持选项。
- en: Lack of actionable data governance
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺乏可操作的数据治理
- en: 'Data governance is a buzzword in data businesses, but what does it mean? Governance
    is a broad area that includes both workflows and toolsets to govern data. If either
    the tools or the workflow process has limitations or is not present, then data
    governance is incomplete. When we talk about actionable governance, we mean the
    following elements:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 数据治理在数据业务中是一个热门词汇，但它究竟意味着什么？治理是一个广泛的领域，包括治理数据的工作流程和工具集。如果工具或工作流程过程存在限制或不存在，那么数据治理就不完整。当我们谈论可操作治理时，我们指的是以下要素：
- en: Integrating data governance with all data engineering systems to maintain standard
    metadata, including traceability of events and logs for a standard timeline
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据治理与所有数据工程系统整合，以维护标准元数据，包括事件和日志的跟踪和标准时间线
- en: Integrating data governance concerning all the security policies and standards
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合涉及所有安全政策和标准的治理数据
- en: Role-based and user-based access management policies on all data elements and
    systems
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于角色和用户的对所有数据元素和系统的访问管理策略
- en: Adherence to defined metrics that are tracked continually
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵守持续跟踪的既定指标
- en: Integrating data governance and the data architecture
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合数据治理和数据架构
- en: Data governance should always be aligned with strategic and organizational goals.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 数据治理应始终与战略和组织目标保持一致。
- en: Recommending and communicating effectively to leadership
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向领导层推荐和有效沟通
- en: Creating an optimal architecture and the correct set of tools is a challenging
    task, but it never is enough, unless and until they are not put into practice.
    One of the hats that a data architect often needs to wear is that of a sales executive
    who needs to sell their solution to the business executive or upper leadership.
    These are not usually technical people and they don’t have a lot of time. Data
    architects, most of whom have strong technical backgrounds, face the daunting
    task of communicating and selling their idea to these people. To convince them
    about the opportunity and the idea, a data architect needs to back them up with
    proper decision metrics and information that can align that opportunity to the
    broader business goals of the organization.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 创建最佳架构和正确的一组工具是一项具有挑战性的任务，但除非它们被付诸实践，否则永远不够。数据架构师经常需要戴上的一个帽子是销售执行者，他们需要向业务执行者或高层领导销售他们的解决方案。这些人通常不是技术人员，他们也没有太多时间。大多数数据架构师都有强大的技术背景，他们面临着向这些人沟通和销售他们想法的艰巨任务。为了说服他们关于机会和想法，数据架构师需要提供适当的决策指标和信息，以便将这个机会与组织的更广泛业务目标对齐。
- en: So far, we have seen the role of a data architect and the common problems that
    they face. In the next section, we will provide an overview of how a data architect
    mitigates those challenges on a day-to-day basis.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了数据架构师的角色和他们面临的常见问题。在下一节中，我们将概述数据架构师如何在日常基础上缓解这些挑战。
- en: Techniques to mitigate those challenges
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓解这些挑战的技术
- en: 'In this section, we will discuss how a data architect can mitigate the aforementioned
    challenges. To understand the mitigation plan, it is important to understand what
    the life cycle of a data architecture looks like and how a data architect contributes
    to it. The following diagram shows the life cycle of a data architecture:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论数据架构师如何减轻上述挑战。为了理解缓解计划，了解数据架构的生命周期以及数据架构师如何贡献于它是很重要的。以下图表显示了数据架构的生命周期：
- en: '![Figure 1.8 – Life cycle of a data architecture ](img/B17084_01_08.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 数据架构的生命周期](img/B17084_01_08.jpg)'
- en: Figure 1.8 – Life cycle of a data architecture
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 数据架构的生命周期
- en: The data architecture starts with defining the problem that the business is
    facing. Here, this is mainly identified or reported by business teams or customers.
    Then, the data architects work closely with the business to define the business
    requirements. However, in a data engineering landscape, that is not enough. In
    a lot of cases, there are hidden requirements or anomalies. To mitigate such problems,
    business analysts team up with data architects to analyze data and the current
    state of the system, including any existing solution, the current cost, or loss
    of revenue due to the problem and infrastructure where data resides. This helps
    refine the business requirements. Once the business requirements are more or less
    frozen, the data architects map the business requirements to the technical requirements.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构从定义业务面临的问题开始。在这里，这主要是由业务团队或客户识别或报告的。然后，数据架构师与业务紧密合作，定义业务需求。然而，在数据工程领域，这还不够。在很多情况下，存在隐藏的需求或异常。为了减轻这些问题，业务分析师与数据架构师团队合作分析数据以及系统的当前状态，包括任何现有解决方案、当前成本或由于问题导致的收入损失以及数据所在的基础设施。这有助于细化业务需求。一旦业务需求大致确定，数据架构师将业务需求映射到技术需求。
- en: Then, the data architect defines the standards and principles of the architecture
    and determines the priorities of the architecture based on the business need and
    budget. After that, the data architect creates the most suitable architectures,
    along with their proposed technology stack. In this phase, the data architects
    closely work with the data engineers to implement **proof of concept** (**POCs**)
    and evaluate the proposed solution in terms of feasibility, scalability, and performance.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，数据架构师定义架构的标准和原则，并根据业务需求和预算确定架构的优先级。之后，数据架构师创建最合适的架构，以及它们所提出的科技栈。在这个阶段，数据架构师与数据工程师紧密合作，实施**概念验证**（**POCs**），并从可行性、可扩展性和性能等方面评估所提出的解决方案。
- en: Finally, the architects recommend solutions based on the evaluation results
    and architectural priorities defined earlier. The data architects present the
    proposed solutions to the business. Based on priorities such as cost, timeline,
    operational cost, and resource availability, feedback is received from the business
    and clients. It takes a few iterations to solidify and get an agreement on the
    architecture.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，架构师根据之前定义的评估结果和架构优先级推荐解决方案。数据架构师向业务展示所提出的解决方案。根据成本、时间表、运营成本和资源可用性等优先级，从业务和客户那里获得反馈。需要几次迭代才能巩固并就架构达成一致。
- en: Once an agreement has been reached, the solution is implemented. Based on the
    implementation challenges and particular use cases, the architecture may or may
    not be revised or tweaked a little. Once an architecture is implemented and goes
    to production, it enters the maintenance and operations phase. During maintenance
    and operations, sometimes, feedback is provided, which might result in a few architectural
    improvements and changes, but they are often seldom if the solution is well-architected
    in the first place.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦达成一致，解决方案将被实施。根据实施挑战和特定用例，架构可能会或可能不会进行修订或稍作调整。一旦架构实施并投入生产，它就进入了维护和运营阶段。在维护和运营期间，有时会提供反馈，这可能会导致一些架构的改进和变化，但如果解决方案最初就设计得很好，这些变化通常很少。
- en: In the preceding diagram, the blue boxes indicate major involvement from a customer,
    a green box indicates major involvement from a data architect, a yellow box means
    a data architect equally shares involvement with another stakeholder, and a gray
    box means the data architect has the least involvement in that scenario.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，蓝色框表示客户有主要参与，绿色框表示数据架构师有主要参与，黄色框表示数据架构师与其他利益相关者平等分担参与，灰色框表示数据架构师在该场景中参与最少
- en: 'Now that we have understood the life cycle of the data architecture and a data
    architect’s role in various phases, we will focus on how to mitigate those challenges
    that are faced by a data architect. This book covers how to mitigate those challenges
    in the following way:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了数据架构的生命周期和数据架构师在各个阶段的角色，我们将关注如何减轻数据架构师面临的一些挑战。本书将以下方式介绍如何减轻这些挑战：
- en: 'Understanding the business data, its characteristics, and storage options:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解业务数据、其特征和存储选项：
- en: Data and its characteristics were covered earlier in this chapter; it will also
    be covered partly in [*Chapter 2*](B17084_02.xhtml#_idTextAnchor025), *Data Storage
    and Databases*
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据及其特征在本章前面已讨论；它也将部分在[*第2章*](B17084_02.xhtml#_idTextAnchor025)，*数据存储和数据库*）中讨论
- en: Storage options will also be discussed in [*Chapter 2*](B17084_02.xhtml#_idTextAnchor025),
    *Data Storage and Databases*
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储选项将在[*第2章*](B17084_02.xhtml#_idTextAnchor025)，*数据存储和数据库*）中讨论
- en: 'Analyzing and defining the business problem:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析和定义业务问题：
- en: Understanding the various kinds of data engineering problems (covered in this
    chapter)
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解各种数据工程问题（本章涵盖）
- en: We have provided a step-by-step analysis of how an architect should analyze
    a business problem, classify, and define it in [*Chapter 4*](B17084_04.xhtml#_idTextAnchor062),
    *ETL Data Load – A Batch-Based Solution to Ingest Data in a Data Warehouse*, [*Chapter
    5*](B17084_05.xhtml#_idTextAnchor074), *Architecting a Batch Processing Pipeline*,
    and [*Chapter 6*](B17084_06.xhtml#_idTextAnchor092), *Architecting a Real-Time
    Processing Pipeline*
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在第4章[*ETL数据加载 - 数据仓库中数据摄取的基于批处理解决方案*](B17084_04.xhtml#_idTextAnchor062)，第5章[*构建批处理管道*](B17084_05.xhtml#_idTextAnchor074)，以及第6章[*构建实时处理管道*](B17084_06.xhtml#_idTextAnchor092)中提供了如何分析业务问题、分类和定义的逐步分析
- en: 'The challenge of choosing the right architecture. To choose the right architectural
    pattern, we should be aware of the following:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确架构的挑战。为了选择正确的架构模式，我们应该了解以下内容：
- en: The types of data engineering problems and the dimensions of data (we discussed
    this in this chapter)
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据工程问题的类型和数据维度（本章已讨论）
- en: The different types of data and various data storage available ([*Chapter 2*](B17084_02.xhtml#_idTextAnchor025),
    *Data Storage and Databases*)
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的数据和各种可用的数据存储（[*第2章*](B17084_02.xhtml#_idTextAnchor025)，*数据存储和数据库*）
- en: How to model and design different kinds of data while storing it in a database
    ([*Chapter 2*](B17084_02.xhtml#_idTextAnchor025), *Data Storage and Databases*)
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在数据库中存储和建模不同类型的数据（[*第2章*](B17084_02.xhtml#_idTextAnchor025)，*数据存储和数据库*）
- en: Understanding various architectural patterns for data processing problems ([*Chapter
    7*](B17084_07.xhtml#_idTextAnchor110), *Core Architectural Design Patterns*)
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解各种数据处理问题的架构模式（[*第7章*](B17084_07.xhtml#_idTextAnchor110)，*核心架构设计模式*）
- en: Understanding the architectural patterns of publishing the data (*Section 3*,
    *Enabling Data as a Service*)
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解发布数据的架构模式（*第3节*，*使数据成为服务*）
- en: 'The challenge of choosing the best-fit technology stack and data platform.
    To choose the correct set of tools, we need to know how to use a tool and when
    to use what tools we have:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择最佳匹配的技术堆栈和数据平台的挑战。为了选择正确的工具集，我们需要知道如何使用工具以及何时使用我们拥有的工具：
- en: How to choose the correct database will be discussed in [*Chapter 2*](B17084_02.xhtml#_idTextAnchor025),
    *Data Storage and Databases*
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何选择正确的数据库将在[*第2章*](B17084_02.xhtml#_idTextAnchor025)，*数据存储和数据库*）中讨论
- en: How to choose the correct platform will be discussed in [*Chapter 3*](B17084_03.xhtml#_idTextAnchor043),
    *Identifying the Right Data Platform*
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何选择正确的平台将在[*第3章*](B17084_03.xhtml#_idTextAnchor043)，*识别正确的数据平台*）中讨论
- en: A step-by-step hands-on guide to using different tools in batch processing will
    be covered in [*Chapter 4*](B17084_04.xhtml#_idTextAnchor062), *ETL Data Load
    – A Batch-Based Solution to Ingest Data in a Data Warehouse*, and [*Chapter 5*](B17084_05.xhtml#_idTextAnchor074),
    *Architecting a Batch Processing Pipeline*
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第4章*](B17084_04.xhtml#_idTextAnchor062)《批处理中不同工具的使用步骤指南 - 数据仓库中数据摄取的基于批处理解决方案》和[*第5章*](B17084_05.xhtml#_idTextAnchor074)《构建批处理管道》中，我们将涵盖使用不同工具在批处理中进行操作的步骤指南。
- en: A step-by-step guide to architecting real-time stream processing and choosing
    the correct tools will be covered in [*Chapter 6*](B17084_06.xhtml#_idTextAnchor092),
    *Architecting a Real-Time Processing Pipeline*
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第6章*](B17084_06.xhtml#_idTextAnchor092)《构建实时处理管道》中，我们将详细介绍如何逐步构建实时流处理和选择正确的工具。
- en: The different tools and technologies used in data publishing will be discussed
    in [*Chapter 9*](B17084_09.xhtml#_idTextAnchor144), *Exposing MongoDB Data as
    a Service*, and [*Chapter 10*](B17084_10.xhtml#_idTextAnchor157), *Federated and
    Scalable DaaS with GraphQL*
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第9章*](B17084_09.xhtml#_idTextAnchor144)《将MongoDB数据作为服务公开》和[*第10章*](B17084_10.xhtml#_idTextAnchor157)《使用GraphQL的联邦和可扩展DaaS》中，我们将讨论在数据发布中使用的不同工具和技术。
- en: 'The challenge of creating a design for scalability and performance will be
    covered in [*Chapter 11*](B17084_11.xhtml#_idTextAnchor168), *Measuring Performance
    and Benchmarking Your Applications*. Here, we will discuss the following:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第11章*](B17084_11.xhtml#_idTextAnchor168)《衡量性能和基准测试您的应用程序》中，我们将讨论构建可扩展性和性能的设计挑战。在这里，我们将讨论以下内容：
- en: Performance engineering basics
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能工程基础
- en: The publishing performance benchmark
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布性能基准
- en: Performance optimization and tuning
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优化和调整
- en: The challenge of a lack of data governance. Various data governance and security
    principles and tools will be discussed in [*Chapter 8*](B17084_08.xhtml#_idTextAnchor130),
    *Enabling Data Security and Governance*.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据治理不足的挑战。在[*第8章*](B17084_08.xhtml#_idTextAnchor130)《启用数据安全和治理》中，我们将讨论各种数据治理和安全原则以及工具。
- en: The challenge of evaluating architectural solutions and recommending them to
    leadership. In the final chapter of this book ([*Chapter 12*](B17084_12.xhtml#_idTextAnchor180),
    *Evaluating, Recommending, and Presenting Your Solution*), we will use the various
    concepts that we have learned throughout this book to create actionable data metrics
    and determine the most optimized solution. Finally, we will discuss techniques
    that an architect can apply to effectively communicate with business stakeholders,
    executive leadership, and investors.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估架构解决方案并向领导层推荐的挑战。在本书的最后一章[*第12章*](B17084_12.xhtml#_idTextAnchor180)《评估、推荐和展示您的解决方案》中，我们将利用本书学到的各种概念来创建可操作的数据指标，并确定最优化解决方案。最后，我们将讨论建筑师可以应用的技术，以有效地与业务利益相关者、高管领导和投资者进行沟通。
- en: In this section, we discussed how this book can help an architect overcome the
    various challenges they will face and make them more effective in their role.
    Now, let’s summarize this chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了这本书如何帮助建筑师克服他们将要面临的种种挑战，并使他们在其角色中更加高效。现在，让我们总结本章内容。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what data engineering is and looked at a few practical
    examples of data engineering. Then, we covered the basics of data engineering,
    including the dimensions of data and the kinds of problems that are solved by
    data engineers. We also provided a high-level overview of various kinds of processing
    problems and publishing problems in a data engineering landscape. Then, we discussed
    the roles and responsibilities of a data architect and the kind of challenges
    they face. We also briefly covered the way this book will guide you to overcome
    challenges and dilemmas faced by a data architect and help you become a better
    Java data architect.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了数据工程是什么，并查看了一些数据工程的实际示例。然后，我们涵盖了数据工程的基础，包括数据的维度和数据工程师解决的问题类型。我们还提供了对数据工程领域中各种处理问题和发布问题的概述。然后，我们讨论了数据架构师的角色和责任以及他们面临的挑战。我们还简要介绍了本书将如何指导你克服数据架构师面临的挑战和困境，帮助你成为一名更好的Java数据架构师。
- en: Now that you understand the basic landscape of data engineering and what this
    book will focus on, in the next chapter, we will walk through various data formats,
    data storage options, and databases and learn how to choose one for the problem
    at hand.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了数据工程的基本格局以及本书将重点关注的内容，在下一章中，我们将逐一介绍各种数据格式、数据存储选项以及数据库，并学习如何为当前的问题选择合适的方案。
