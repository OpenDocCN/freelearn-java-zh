- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Code, Compile, and Execute
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码、编译和执行
- en: With Java installed, we are almost ready to look at coding. Before we get to
    that, though, we need to learn how to code, compile, and execute Java applications.
    While an **integrated development environment** (**IDE**) will likely be what
    you will use for most of your work, understanding how to code without the hand-holding
    of an IDE is what makes the difference between a Java tinkerer and a Java professional.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Java后，我们几乎准备好查看编码了。不过，在我们到达那里之前，我们需要学习如何编码、编译和执行Java应用程序。虽然**集成开发环境**（**IDE**）可能是你大部分工作的选择，但理解在没有IDE的指导下的编码方式，是区分Java爱好者与Java专业人士的关键。
- en: In this chapter, we will look at working from the command line and then from
    some of the most widely used IDEs. This chapter will not be a tutorial on IDEs
    but rather a review of what they offer to a programmer. The fundamental operation
    of any IDE is very similar to that of the most commonly used IDEs. Before we examine
    the various ways to use Java, we will look at a small program that we will use.
    This book is a *Hello World!* free zone, which means that example number one does
    something useful.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨从命令行工作，然后从一些最广泛使用的IDE中工作。本章将不会是IDE教程，而是一个关于它们为程序员提供内容的回顾。任何IDE的基本操作都非常类似于最常用的IDE。在我们检查Java的各种使用方法之前，我们将查看一个小程序，我们将使用它。这本书是一个*Hello
    World!*免费区，这意味着第一个示例将做一些有用的事情。
- en: 'The goal of this chapter is to make you familiar with the four approaches to
    compiling and executing Java code as well as introduce you to the IDE tools available
    to developers. We will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是使您熟悉编译和执行Java代码的四种方法，并介绍开发者可用的IDE工具。我们将涵盖以下主题：
- en: The first program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个程序
- en: JShell – REPL in Java
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JShell – Java的REPL
- en: The two-step compile and execute process – `javac` and `java`/`javaw`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两步编译和执行过程 – `javac` 和 `java`/`javaw`
- en: Launch Single-File Source-Code Programs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动单文件源代码程序
- en: Integrated development environments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the examples in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的示例，您需要以下内容：
- en: Java 17 installed
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Java 17
- en: A text editor, such as Notepad
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器，例如记事本
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter02](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter02).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，地址为[https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter02](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter02)。
- en: The first program
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个程序
- en: 'Before we can learn how to compile and execute Java code, we need a Java program
    to work with. Our first program will calculate compound interest. There is a quote
    attributed to Albert Einstein, who is said to have stated, “*Compound interest
    is the eighth wonder of the world*.” Whether he ever said this remains in doubt.
    Regardless, calculating interest on interest is one of the most important financial
    calculations that can be performed. Here is the formula that we will implement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习如何编译和执行Java代码之前，我们需要一个Java程序来操作。我们的第一个程序将计算复利。有一句引用自阿尔伯特·爱因斯坦的话，据说他曾说过，“*复利是世界第八大奇迹*。”他是否真的说过这句话还有待商榷。无论如何，计算利息的利息是进行的最重要金融计算之一。以下是我们将实现的公式：
- en: '![](img/B19088_02_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19088_02_001.jpg)'
- en: Here, *P* is the principal amount deposited into a compound interest account,
    *r* is the interest rate typically expressed as an annual rate, *n* is the number
    of compounding periods (if compounded monthly, then the value is 12), and *t*
    is the time the money will compound for. This is expressed in years and must be
    divided by the number of compounding periods, which, in this case, will also be
    12.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*P* 是存入复利账户的本金，*r* 是通常表示为年利率的利率，*n* 是复利期数（如果按月复利，则该值为12），而 *t* 是资金复利的时间。这以年为单位表示，必须除以复利期数，在这种情况下，也将是12。
- en: In *Part 2* of this book, we will examine the syntax and structure of the language.
    There, we will explore the code of this program. For this reason, we will just
    use this program, which is simple to understand. You can download it from this
    book’s GitHub repository.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的*第2部分*中，我们将探讨语言的语法和结构。在那里，我们将探索这个程序的代码。因此，我们将只使用这个程序，它易于理解。您可以从这本书的GitHub仓库下载它。
- en: 'Here is the code for a simple program in Java that will calculate what a fixed
    amount of money will be worth after a length of time has passed at a fixed rate
    of interest:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单的 Java 程序的代码，该程序将计算在固定利率下，经过一段时间后固定金额的价值：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All Java programs must consist of at least one structure known as a **class**.
    Whereas C++ allows you to mix the structured style and the object-oriented style,
    Java requires the latter style.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Java 程序都必须至少包含一个称为 **类** 的结构。而 C++ 允许你混合结构化风格和面向对象风格，Java 则要求使用后者风格。
- en: With that, you’ve seen your first complete Java program. If you are coming from
    a C++ or C# background, you likely understand how it works. If you don’t have
    an **object-oriented programming** (**OOP**) background, you can look at it as
    a structured program. In *Part 2* of this book, we will explore the syntax of
    Java. Next, we will run this program in three different ways from the command
    line.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，你已经看到了你的第一个完整的 Java 程序。如果你来自 C++ 或 C# 背景，你很可能理解它是如何工作的。如果你没有面向对象编程（**OOP**）的背景，你可以将其视为一个结构化程序。在本书的
    *第 2 部分* 中，我们将探讨 Java 的语法。接下来，我们将从命令行以三种不同的方式运行此程序。
- en: JShell – REPL in Java
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JShell – Java 的 REPL
- en: '**Read-Eval-Print Loop** (**REPL**) is an environment where code can execute
    one line at a time. REPL became a standard part of Java in version 9\. It is implemented
    in a tool called JShell. It serves two purposes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**读取-评估-打印循环**（**REPL**）是一个可以逐行执行代码的环境。REPL 从 Java 9 版本开始成为 Java 的标准部分。它通过一个名为
    JShell 的工具实现。它有两个用途：'
- en: It provides an environment for learning Java without any background in programming.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个无需编程背景即可学习 Java 的环境。
- en: It provides a way to quickly test concepts, syntax, and libraries.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一种快速测试概念、语法和库的方法。
- en: As such, you can execute Java code without the need for the usual decorations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以执行 Java 代码而不需要通常的装饰。
- en: There are two ways we can use JShell. The first is to just enter the code that’s
    necessary to use the formula. Imagine that you want to verify the formula for
    compound interest, as shown in the source code. You can do that by just entering
    the necessary code to perform the calculation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 JShell 的两种方式。第一种是只需输入必要的代码来使用公式。想象一下，你想验证复利公式的正确性，如源代码所示。你可以通过仅输入执行计算所需的代码来实现这一点。
- en: 'In the following code block, we have entered the four variable declarations
    with the values required for the calculation, followed by the line of code that
    performs the calculation and assigns it to a variable:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，我们已输入了四个变量声明及其所需的计算值，然后是执行计算并将其分配给变量的代码行：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Follow these steps in JShell to enter these five lines of code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JShell 中按照以下步骤输入这五行代码：
- en: 'On Windows, open the Command Prompt. If you are working on a macOS/Linux system,
    go to the Terminal. If necessary, set the `Path` and `JAVA_HOME` values. Then,
    enter the `jshell` command. The console will look like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上，打开命令提示符。如果你在 macOS/Linux 系统上工作，请转到终端。如有必要，设置 `Path` 和 `JAVA_HOME`
    值。然后，输入 `jshell` 命令。控制台将看起来像这样：
- en: '![Figure 2.1 – Running JShell](img/Figure_2.1_B19088.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 运行 JShell](img/Figure_2.1_B19088.jpg)'
- en: Figure 2.1 – Running JShell
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 运行 JShell
- en: 'Now, we can enter the following five lines of code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以输入以下五行代码：
- en: '![Figure 2.2 – Executing one line at a time in JShell ](img/Figure_2.2_B19088.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 在 JShell 中逐行执行代码](img/Figure_2.2_B19088.jpg)'
- en: Figure 2.2 – Executing one line at a time in JShell
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 在 JShell 中逐行执行代码
- en: Note that each line is being executed as it is being entered and JShell reports
    the value that’s been assigned to each variable. Java does not format values on
    its own, so the result is a raw floating-point number.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每行代码都是在输入时执行的，JShell 会报告分配给每个变量的值。Java 不会自动格式化值，因此结果是原始浮点数。
- en: 'Can we assume that since it was executed without any errors, the result is
    correct? Absolutely not! Especially for calculations, you need a second source
    for the result. This is where a spreadsheet is invaluable. Here is the result
    of the calculation after using the formula in Microsoft Excel:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以假设由于没有错误执行，结果就是正确的吗？绝对不行！特别是对于计算，你需要第二个结果来源。这就是电子表格如此宝贵的所在。以下是使用 Microsoft
    Excel 中的公式计算后的结果：
- en: '![Figure 2.3 – The compound interest calculation in Excel](img/Figure_2.3_B19088.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – Excel 中的复利计算](img/Figure_2.3_B19088.jpg)'
- en: Figure 2.3 – The compound interest calculation in Excel
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – Excel 中的复利计算
- en: If any errors occurred while you entered your code, which means that your code
    doesn’t match the result in the spreadsheet, then you can clear everything you
    entered into JShell with the `/reset` command and start over. JShell always preserves
    the last piece of code you entered unless you reset it. JShell also maintains
    a history of everything you entered and is not lost when you use `/reset`. **History**,
    which can be accessed with the up and down arrows, will just allow you to enter
    the code you used previously into what you are currently working on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在输入代码时出现了错误，这意味着你的代码与工作表中的结果不匹配，那么你可以使用`/reset`命令清除你在JShell中输入的所有内容并重新开始。JShell总是保留你最后输入的代码，除非你重置它。JShell还维护了你输入的所有内容的记录，当你使用`/reset`时不会丢失。**历史记录**，可以通过上下箭头访问，将仅允许你将之前使用的代码输入到你当前正在工作的内容中。
- en: The second way that we can use JShell is by using an editor and making an entire
    program available to the tool. Before we provide JShell with the complete program,
    we must use the `/reset` command to remove what we entered previously.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用JShell的第二种方式是通过使用编辑器并将整个程序提供给工具。在我们向JShell提供完整的程序之前，我们必须使用`/reset`命令来删除之前输入的内容。
- en: 'To execute the entire program, follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行整个程序，请按照以下步骤操作：
- en: JShell has a basic editor that supports multi-line Java code. Use the `/edit`
    command to open the editor.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JShell有一个基本的编辑器，支持多行Java代码。使用`/edit`命令来打开编辑器。
- en: This editor cannot open files, so you will need to open the `CompoundInterest01.java`
    file in your text editor, copy the file’s contents, and paste it into the JShell
    editor.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此编辑器不能打开文件，因此你需要在你自己的文本编辑器中打开`CompoundInterest01.java`文件，复制文件的内容，并将其粘贴到JShell编辑器中。
- en: 'When you click on **Accept**, the code from the JShell editor will be transferred
    to JShell:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击**接受**时，JShell编辑器中的代码将被传输到JShell：
- en: '![Figure 2.4 – The program after being pasted into the default JShell editor](img/Figure_2.4_B19088.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – 将程序粘贴到默认JShell编辑器后的样子](img/Figure_2.4_B19088.jpg)'
- en: Figure 2.4 – The program after being pasted into the default JShell editor
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 将程序粘贴到默认JShell编辑器后的样子
- en: Now, you must click **Exit** to leave the editor, which will restore the JShell
    prompt.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你必须点击**退出**以离开编辑器，这将恢复JShell提示符。
- en: 'Now, you can run the `main` method by entering `CompoundInterest01.main(null)`
    in the JShell prompt, which will cause the program to execute. The `main` method
    expects a parameter. Should you not have a parameter to pass to the `main` method,
    then you will automatically pass null:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在JShell提示符中输入`CompoundInterest01.main(null)`来运行`main`方法，这将导致程序执行。`main`方法期望一个参数。如果你没有要传递给`main`方法的参数，那么你将自动传递null：
- en: '![Figure 2.5 – Running the program in JShell after it has been transferred
    from the editor](img/Figure_2.5_B19088.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – 将程序从编辑器传输到JShell后运行](img/Figure_2.5_B19088.jpg)'
- en: Figure 2.5 – Running the program in JShell after it has been transferred from
    the editor
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 将程序从编辑器传输到JShell后运行
- en: 'You do not have to use the basic editor in `/set editor` command and include
    the path to the editor of your choice, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要在`/set editor`命令中使用基本编辑器并包含你选择的编辑器的路径，如下面的截图所示：
- en: '![Figure 2.6 – Changing the editor in JShell](img/Figure_2.6_B19088.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6 – 在JShell中更改编辑器](img/Figure_2.6_B19088.jpg)'
- en: Figure 2.6 – Changing the editor in JShell
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 在JShell中更改编辑器
- en: Here, I have set the editor to Notepad++ for Windows. Note that there are double
    backslashes for the path separators in the `/set editor` command as it is being
    entered on a Windows system. On a Linux or Mac system, the path separator is a
    forward slash and is not doubled. As there are spaces in the path, they must be
    enclosed in quotation marks.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我已经将编辑器设置为Windows的Notepad++。请注意，在Windows系统中输入`/set editor`命令时，路径分隔符使用了双反斜杠，因为它是被输入在一个Windows系统上的。在Linux或Mac系统上，路径分隔符是一个正斜杠，不需要双倍。由于路径中包含空格，因此它们必须用引号括起来。
- en: When using an external editor with JShell, you must exit the editor to transfer
    what you have typed to JShell. This is because there is no *Accept* button.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JShell的外部编辑器时，你必须退出编辑器以将你输入的内容传输到JShell。这是因为没有**接受**按钮。
- en: The JShell tool can be useful for testing or learning a new feature or syntax
    in Java. It can also be quite useful for teaching Java to absolute beginners.
    Familiarize yourself with this tool as soon as possible.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: JShell工具对于测试或学习Java的新功能或语法非常有用。它对于教授Java给初学者也非常有用。尽快熟悉这个工具。
- en: The two-step compile and execute process – javac and java/javaw
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两个步骤的编译和执行过程——javac 和 java/javaw
- en: The most common approach to running a Java program involves two steps. First,
    you must compile the code with javac and then execute the code in the **Java Virtual
    Machine** (**JVM**) with Java or on Windows with javaw.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Java 程序最常见的方法涉及两个步骤。首先，你必须使用 javac 编译代码，然后使用 Java 或在 Windows 上使用 javaw 在
    **Java 虚拟机**（**JVM**）中执行代码。
- en: The first step of preparing Java source code for execution is to compile it
    into **bytecode**. This is the machine language of the JVM. Every Java source
    file that is part of an application must be compiled into bytecode.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 准备 Java 源代码以执行的第一步是将它编译成 **字节码**。这是 JVM 的机器语言。应用程序的每个 Java 源文件都必须编译成字节码。
- en: The second step is to execute the bytecode in a JVM. Unlike C or C++, there
    is no link step. The link step combines all compiled code into a single executable
    file. In Java, all the bytecode files must be on the classpath, which is the path
    to all bytecode files, and not necessarily combined into a single file. This may
    seem confusing as there is a tool called **jlink**, but its purpose is to combine
    the Java runtime with your code so that the end user does not need the Java version
    that was previously installed on their computer. We will examine **jlink** in
    [*Chapter 16*](B19088_16.xhtml#_idTextAnchor315), *Deploying Java in Standalone
    Packages* *and Containers*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是在 JVM 中执行字节码。与 C 或 C++ 不同，没有链接步骤。链接步骤将所有编译代码组合成一个单一的执行文件。在 Java 中，所有字节码文件都必须在类路径上，即所有字节码文件的路径，而不一定组合成一个单一的文件。这可能会让人感到困惑，因为有一个名为
    **jlink** 的工具，但它的目的是将 Java 运行时与你的代码结合起来，这样最终用户就不需要在他们计算机上之前安装的 Java 版本。我们将在 [*第
    16 章*](B19088_16.xhtml#_idTextAnchor315) *部署 Java 到独立包和容器* 中检查 **jlink**。
- en: 'Let us compile and execute our `CompoundInterest01` program:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编译并执行我们的 `CompoundInterest01` 程序：
- en: First, place the `CompoundInterest01.java` file in a folder of its own. This
    is not a requirement, but it is easier to manage the code if it has its own folder.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将 `CompoundInterest01.java` 文件放置在其自己的文件夹中。这不是必需的，但如果它有自己的文件夹，代码管理起来会更方便。
- en: 'Now, open a console in that folder; if you are not using an admin installation
    of Java, set the `Path` and `JAVA_HOME` properties as shown in the previous chapter.
    Now, you can compile the program with `javac CompoundInterest01.java`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在那个文件夹中打开一个控制台；如果你没有使用 Java 的管理员安装版本，请设置 `Path` 和 `JAVA_HOME` 属性，如前一章所示。现在，你可以使用
    `javac CompoundInterest01.java` 编译程序：
- en: '![Figure 2.7 – Compiling the Java program](img/Figure_2.7_B19088.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 编译 Java 程序](img/Figure_2.7_B19088.jpg)'
- en: Figure 2.7 – Compiling the Java program
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 编译 Java 程序
- en: If compiling your code does not result in any errors, then the compiler will
    not display anything in the console. The folder will now contain a new file called
    `CompoundInterest01.class`. Notice that it is larger than the Java source code
    file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编译代码没有出现任何错误，那么编译器将在控制台不显示任何内容。现在文件夹中将包含一个名为 `CompoundInterest01.class` 的新文件。注意，它比
    Java 源代码文件要大。
- en: A Java class file contains the necessary **bytecode** and source code. The presence
    of the source code in this file supports the concepts of **reflection** and **introspection**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Java 类文件包含必要的 **字节码** 和源代码。该文件中源代码的存在支持 **反射** 和 **内省** 的概念。
- en: Introspection allows you to write code that can examine the type or properties
    of an object at runtime, whereas reflection allows you to write code that can
    examine and modify the structure of an object at runtime. These two features are
    rarely used in business programming. .
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 反射允许你编写可以在运行时检查对象类型或属性的代码，而反射允许你编写可以在运行时检查和修改对象结构的代码。这两个特性在商业编程中很少使用。
- en: With the code compiled, we can run it. Here, we are using the `java` executable
    to run our program.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码编译完成后，我们可以运行它。在这里，我们使用 `java` 可执行文件来运行我们的程序。
- en: A common myth is to believe that the `java` executable is the JVM. It is not.
    It is the loader of the JVM, made up of other files that are part of the installation
    of the JDK. The JVM utilizes its `ClassLoader` component to locate and execute
    a bytecode file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的误解是认为 `java` 可执行文件是 JVM。它不是。它是 JVM 的加载器，由 JDK 安装的一部分其他文件组成。JVM 利用其 `ClassLoader`
    组件来定位和执行字节码文件。
- en: 'Let us run the `CompoundInterest01` program. In the console, enter `java CompountInterest01`.
    There’s no need to include the `.class` extension as that is the only acceptable
    extension:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行 `CompoundInterest01` 程序。在控制台中输入 `java CompountInterest01`。不需要包含 `.class`
    扩展名，因为这仅是唯一可接受的扩展名：
- en: '![Figure 2.8 – Running the Java program](img/Figure_2.8_B19088.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 运行 Java 程序](img/Figure_2.8_B19088.jpg)'
- en: Figure 2.8 – Running the Java program
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 运行 Java 程序
- en: Here, you can see the program’s output.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，你可以看到程序的输出。
- en: On Windows systems, there is a second JVM loader called javaw that is used to
    execute a GUI application without opening a console. If you create a Windows shortcut
    to run a GUI Java program and use `java.exe`, then a console window will open,
    followed by the program’s GUI window. If you use `javaw.exe`, the console window
    will not appear.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 系统中，还有一个名为 javaw 的第二个 JVM 加载器，用于在没有打开控制台的情况下执行 GUI 应用程序。如果你创建一个 Windows
    快捷方式来运行 GUI Java 程序并使用 `java.exe`，那么将打开一个控制台窗口，然后是程序的 GUI 窗口。如果你使用 `javaw.exe`，则不会出现控制台窗口。
- en: In most situations, using javac and then java is the most common way to work
    with Java code at the command line. A program that may consist of multiple files
    will require each file to be compiled, but only the file that contains the `main`
    method is executed. Let us look at one last way to compile and execute a Java
    program in a single step.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，使用 javac 然后使用 java 是在命令行中处理 Java 代码最常见的方式。可能由多个文件组成的程序需要每个文件都进行编译，但只有包含
    `main` 方法的文件会被执行。让我们看看一种最后一种在单步中编译和执行 Java 程序的方法。
- en: Launch Single-File Source-Code Programs
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动单文件源代码程序
- en: 'Before Java 11, the process of going from source code to execution was a two-step
    process: you compiled the code and then ran the code. Beginning with Java 11,
    another way to run a Java program was introduced, called **Launch Single-File
    Source-Code Programs**. This allows you to compile, start up the JVM, and execute
    the program in a single line. We’ll see how this works for Windows, macOS, and
    Linux before examining a unique way for Linux and macOS.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 11 之前，从源代码到执行的过程是两步过程：你编译代码然后运行代码。从 Java 11 开始，引入了另一种运行 Java 程序的方法，称为
    **启动单文件源代码程序**。这允许你在单行中编译、启动 JVM 并执行程序。我们将在检查 Linux 和 macOS 的独特方法之前，看看这是如何在 Windows、macOS
    和 Linux 上工作的。
- en: For Windows, macOS, and Linux
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于 Windows、macOS 和 Linux
- en: 'Open a Command Prompt or Terminal in the same folder as the file you wish to
    run and, if necessary, update the `Path` and `JAVA_HOME` properties. Now, simply
    enter `java` and the name of the source file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在你想要运行的文件所在的文件夹中打开命令提示符或终端，如果需要，更新 `Path` 和 `JAVA_HOME` 属性。现在，只需输入 `java` 和源文件名：
- en: '![Figure 2.9 – Running a Java program ](img/Figure_2.9_B19088.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 运行 Java 程序](img/Figure_2.9_B19088.jpg)'
- en: Figure 2.9 – Running a Java program
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 运行 Java 程序
- en: 'As the name of this technique implies, your program can only consist of a single
    file. This source file may contain more than one class and the first class in
    the file must have a `main` method. Let us look at a new version of the program
    that is split into two classes in one file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这种技术的名称所暗示的，你的程序只能由一个文件组成。这个源文件可以包含多个类，并且文件中的第一个类必须有一个 `main` 方法。让我们看看一个将程序拆分为一个文件中的两个类的新版本：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first class in this file just contains the `main` method, which is required.
    The second class, shown in the following code block, is in the same file; this
    is where the actual work is carried out:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中的第一个类只包含所需的 `main` 方法。下一个类，如下面的代码块所示，也在同一个文件中；这是实际工作执行的地方：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The two classes are `CompoundInterest02` and `CompoundInterestCalculator02`.
    In the Command Prompt or Terminal, enter `java CompoundInterest02.java`; you will
    get the same result:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个类是 `CompoundInterest02` 和 `CompoundInterestCalculator02`。在命令提示符或终端中输入 `java
    CompoundInterest02.java`；你会得到相同的结果：
- en: '![Figure 2.10 – Running a Java program with two classes in the java file](img/Figure_2.10_B19088.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 在 java 文件中运行包含两个类的 Java 程序](img/Figure_2.10_B19088.jpg)'
- en: Figure 2.10 – Running a Java program with two classes in the java file
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 在 java 文件中运行包含两个类的 Java 程序
- en: This technique does not create a bytecode `.class` file; it is only created
    in memory.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术不会创建一个字节码 `.class` 文件；它只会在内存中创建。
- en: For macOS and Linux – Shebang files
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于 macOS 和 Linux – Shebang 文件
- en: 'There is a unique way to use Launch Single-File Source-Code Programs that is
    only available on macOS or Linux: `java` command. This makes single-file Java
    programs usable as a script file akin to Bash. Shebang is the name given to the
    `#!` Characters.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 或 Linux 上，有一种独特的方式来使用启动单文件源代码程序，这是仅在 macOS 或 Linux 上可用的：`java` 命令。这使得单文件
    Java 程序可以作为类似 Bash 的脚本文件使用。Shebang 是指 `#!` 字符。
- en: 'Let’s look at the beginning of the source code with the Shebang added:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看添加了 Shebang 的源代码的开始部分：
- en: 'Add `#!` to the source code, as shown here:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源代码中添加 `#!`，如下所示：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first line that begins with the Shebang includes the path to the Java executable
    and the `–source version` switch. The version is the numbered version of Java
    you are using, which in this case is `17`. To use this technique, the file must
    not have the `.java` extension. Rename the Java source code file to remove the
    extension.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以Shebang开头的第一行包括Java可执行文件的路径和`–source version`开关。版本是你正在使用的Java的编号版本，在这个例子中是`17`。要使用这种技术，文件不能有`.java`扩展名。将Java源代码文件重命名以删除扩展名。
- en: The next step is to make the file executable. Use `chmod +x CompoundInterest03`
    to do so.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使文件可执行。使用`chmod +x CompoundInterest03`来执行。
- en: 'Finally, you must execute the file by entering `./CompoundInterest03`. Here
    is the output:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你必须通过输入`./CompoundInterest03`来执行文件。以下是输出：
- en: '![Figure 2.11 – Running a Java program with a Shebang in Linux](img/Figure_2.11_B19088.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图2.11 – 在Linux中使用Shebang运行Java程序](img/Figure_2.11_B19088.jpg)'
- en: Figure 2.11 – Running a Java program with a Shebang in Linux
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 在Linux中使用Shebang运行Java程序
- en: Here, we are running our Java program as if it were just a regular Linux or
    macOS program.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在运行我们的Java程序，就像它是一个普通的Linux或macOS程序一样。
- en: This concludes our topic on using Java from the command line. We started by
    looking at REPL in JShell, then the classic two-step approach, and ended with
    the Launch Single-File Source-Code Programs approach. We also covered the unique
    Shebang technique. Now, let us learn about the four most widely used IDEs.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们关于使用命令行Java的话题。我们首先查看JShell中的REPL，然后是经典的两个步骤方法，最后是启动单个文件源代码程序的方法。我们还介绍了独特的Shebang技术。现在，让我们了解四种最广泛使用的IDE。
- en: Integrated development environments
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: It is time for a little honesty – very few Java developers work with just a
    text editor such as **vi** or **Notepad**. Knowing how to work with a standalone
    text editor and compile/execute at the command line is an important skill, but
    when given the choice of tooling, we will always go for an IDE. The features we
    will look at in this section will explain why this is so.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候说点实话了——非常少的Java开发者只使用像**vi**或**记事本**这样的文本编辑器。知道如何使用独立的文本编辑器并在命令行中进行编译/执行是一个重要的技能，但当我们有选择工具的时候，我们总是会选择IDE。本节中我们将探讨的特性将解释为什么是这样。
- en: In this section, we will briefly review four of the most widely used IDEs available.
    Each IDE has a unique build system, which we will discuss in [*Chapter 3*](B19088_03.xhtml#_idTextAnchor062),
    *The Maven Build Tool*, and all the IDEs support the same external build systems.
    This means that in a team, each member can use the IDE that they feel makes them
    the most productive while being able to freely move code between team members
    without the need to make changes for a particular IDE. Before I introduce these
    IDEs, let us look at the features they all share.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要回顾四种最广泛使用的IDE。每个IDE都有一个独特的构建系统，我们将在[*第3章*](B19088_03.xhtml#_idTextAnchor062)《Maven构建工具》中讨论，所有IDE都支持相同的外部构建系统。这意味着在一个团队中，每个成员都可以使用他们认为最能提高生产力的IDE，同时能够在团队成员之间自由地移动代码，而无需为特定IDE进行更改。在我介绍这些IDE之前，让我们看看它们共有的特性。
- en: Feature 1 – the code editor
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特性1 – 代码编辑器
- en: The heart of every IDE is its editor. Like any ordinary text editor, it supports
    the usual list of features, such as cut, copy, and paste. What sets the IDE editor
    apart from these is that every keystroke is monitored. Should you mistype the
    name of a variable or method, you will immediately be informed on your screen
    of the error.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个IDE的核心是其编辑器。像任何普通的文本编辑器一样，它支持通常的功能列表，如剪切、复制和粘贴。使IDE编辑器与这些不同的地方在于，每个按键都被监控。如果你误输了变量或方法的名称，你将立即在你的屏幕上得知错误。
- en: The editors also share JShell’s ability to execute code one line at a time.
    This occurs out of sight. If you are executing code that generates an error –
    such as referring to a library that is not part of the project – you will be told
    of the error in the editor as you type rather than when you try to compile and
    execute the code. Most errors in your code, though not all, are detected as you
    type.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器还分享了JShell一次执行一行代码的能力。这发生在看不见的地方。如果你正在执行会产生错误的代码——例如引用不属于项目的库——你将在输入时而不是在尝试编译和执行代码时在编辑器中得知错误。尽管不是所有的错误，但大多数错误都是在输入时被检测到的。
- en: Another invaluable feature of these editors is called **code completion**. Microsoft
    calls this feature **IntelliSense**. Code completion can mean several things –
    for example, if you write an opening brace, bracket, or parenthesis, the IDE will
    add the closing one.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编辑器另一个非常有价值的特性被称为**代码补全**。微软称此特性为**IntelliSense**。代码补全可以意味着几件事情——例如，如果你写了一个开括号、方括号或圆括号，IDE
    将会添加相应的闭括号。
- en: 'In Java, like some other OOP languages, the dot operator (`.`) indicates that
    you wish to call upon a member method or instance variable of an object. Code
    completion supports listing all the possible choices after the dot operator. The
    following figure shows all the choices for `percentFormat`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，像其他一些面向对象的语言一样，点操作符（`.`）表示你想要调用对象的成员方法或实例变量。代码补全支持在点操作符后列出所有可能的选项。以下图显示了`percentFormat`的所有选项：
- en: '![Figure 2.12 – Example of code completion in NetBeans](img/Figure_2.12_B19088.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – NetBeans 中代码补全的示例](img/Figure_2.12_B19088.jpg)'
- en: Figure 2.12 – Example of code completion in NetBeans
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – NetBeans 中代码补全的示例
- en: Code completion can also recommend changes in your code that are more efficient
    or modern. For example, the original Java **switch** statement is identical to
    the C switch. Recent enhancements to the switch syntax can effectively eliminate
    the ancient switch. If the IDE recognizes that the modern syntax could be used,
    then you will be advised and, with your permission, the IDE will rewrite your
    switch in the new format.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 代码补全还可以推荐你代码中的更高效或更现代的更改。例如，原始的 Java **switch** 语句与 C 语言的 switch 语句相同。switch
    语法最近的增强可以有效地消除古老的 switch 语句。如果 IDE 识别出可以使用现代语法，那么你将收到建议，并且在你同意的情况下，IDE 将会以新格式重写你的
    switch 语句。
- en: Feature 2 – server management
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能 2 – 服务器管理
- en: '**Servers** represent external services that your code may need to interact
    with. Examples include database servers such as **MySQL** and **PostgreSQL** and
    web servers such as **Payara** and **WildFly**. From within the IDE, it is possible
    to stop and start these services. For database servers, you can connect the IDE
    to the server and write **SQL** queries and see the results. Applications or web
    servers can also be started and stopped. You can deploy or undeploy your compiled
    code to the server.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器**代表你的代码可能需要与之交互的外部服务。例如，包括数据库服务器如**MySQL**和**PostgreSQL**，以及Web服务器如**Payara**和**WildFly**。在IDE内部，你可以停止和启动这些服务。对于数据库服务器，你可以将IDE连接到服务器并编写**SQL**查询，查看结果。应用程序或Web服务器也可以启动和停止。你可以将编译后的代码部署或取消部署到服务器。'
- en: Feature 3 – debugging and profiling
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能 3 – 调试和性能分析
- en: Single-stepping through code is an invaluable feature of debugging tools. Modern
    IDEs provide such debugging capabilities; it is invaluable when your code runs
    but returns the wrong result. When running with a debugger, you can follow the
    execution of your program in the source code. You can inspect the state of the
    variables. Errors in the syntax of your coding are mostly recognized by the editor.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 单步执行代码是调试工具的一个非常有价值的特性。现代IDE提供了这样的调试能力；当你的代码运行但返回错误结果时，这非常有价值。在调试器运行时，你可以在源代码中跟踪程序的执行。你可以检查变量的状态。你的编码语法错误主要是由编辑器识别的。
- en: Profiling allows you to monitor your application while it runs. The profiler
    reports memory usage and the CPU time that a method consumes. This can be invaluable
    information in identifying where a program executes more slowly than you expected.
    Even if you did not suspect a problem with program speed, a profiler can provide
    you with the data you need to improve the performance of your program.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析允许你在应用程序运行时对其进行监控。性能分析器报告内存使用情况和方法消耗的CPU时间。这些信息在确定程序执行速度慢于预期的地方非常有价值。即使你没有怀疑程序速度存在问题，性能分析器也可以为你提供改进程序性能所需的数据。
- en: Feature 4 –  source control management
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能 4 – 源代码管理
- en: Modern IDEs support interaction with source control management tools such as
    **Git**, **Mercurial**, and **Subversion**. These tools maintain your code in
    a repository. There is no need to use a standalone client tool to push or pull
    from a repository. Should a push result in a conflict, then the IDE can present
    what is currently in the repository and what you want to push and allow you to
    decide how to resolve the conflict.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现代IDE支持与源代码管理工具如**Git**、**Mercurial**和**Subversion**的交互。这些工具将你的代码保存在一个仓库中。无需使用独立的客户端工具来从仓库中推送或拉取。如果推送导致冲突，IDE
    可以展示当前仓库中的内容以及你想要推送的内容，并允许你决定如何解决冲突。
- en: Feature 5 – build systems
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能 5 – 构建系统
- en: The only code we have seen so far has consisted of a single file. As we learn
    more about Java, we will discover that applications typically consist of multiple
    files. These files may be placed in multiple folders. Then, there are external
    libraries that provide capabilities that are not part of Java, such as the code
    necessary to interact with specific databases. A build system is responsible for
    ensuring that all the components and libraries are available. It is also responsible
    for running the Java compiler and then running the program.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止看到的代码仅由一个文件组成。随着我们对Java了解的深入，我们将发现应用程序通常由多个文件组成。这些文件可能放在多个文件夹中。然后，还有提供不属于Java功能的外部库，例如与特定数据库交互所需的代码。构建系统负责确保所有组件和库可用。它还负责运行Java编译器，然后运行程序。
- en: All IDEs each have their own build system. The external build systems known
    as Apache Maven and Gradle, which are independent of an IDE, will be covered in
    the next chapter. The four IDEs we will cover in this chapter all support these
    external build systems. This means that if you write a program with IntelliJ that’s
    been configured to use Maven, then the same files can be opened in NetBeans if
    it’s been configured to use Maven.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所有IDE都有自己的构建系统。作为独立于IDE的外部构建系统，Apache Maven和Gradle将在下一章中介绍。本章我们将讨论的四个IDE都支持这些外部构建系统。这意味着，如果你用IntelliJ编写了一个配置为使用Maven的程序，那么如果NetBeans也被配置为使用Maven，相同的文件也可以在NetBeans中打开。
- en: Now, let us take a brief look at the four most widely used IDEs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们简要地看看最广泛使用的四个IDE。
- en: Eclipse Foundation – Eclipse
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eclipse基金会 – Eclipse
- en: The Eclipse IDE was originally developed by IBM as a replacement for their existing
    Java IDE called VisualAge, which was written in Smalltalk. In 2001, IBM released
    the Eclipse platform, written in Java and released as an open source project.
    A board made up of companies working with Java was formed to oversee the development
    of Eclipse. As more and more companies joined the board, it was decided to create
    an independent open source organization. In 2004, the Eclipse Foundation was created,
    with the Eclipse IDE as its first open source project. Eclipse can run on Windows,
    macOS, and Linux.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE最初由IBM开发，作为他们现有的Java IDE VisualAge的替代品，后者是用Smalltalk编写的。2001年，IBM发布了用Java编写的Eclipse平台，并将其作为一个开源项目发布。由与Java合作的公司组成的董事会负责监督Eclipse的开发。随着越来越多的公司加入董事会，决定创建一个独立的开源组织。2004年，创建了Eclipse基金会，其第一个开源项目是Eclipse
    IDE。Eclipse可以在Windows、macOS和Linux上运行。
- en: You can download Eclipse from [https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/).
    There is the Eclipse IDE for Java developers for primarily desktop software development.
    A second version called the Eclipse IDE for enterprise Java and web developers
    adds support for server-side programming. Eclipse supports a range of plugins
    that add additional capabilities.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/)下载Eclipse。这里有针对Java开发者的Eclipse
    IDE，主要用于桌面软件开发。第二个版本称为Eclipse IDE for enterprise Java and web developers，它增加了对服务器端编程的支持。Eclipse支持一系列插件，增加了额外的功能。
- en: 'Let us see what the compound interest program – the one we wrote in *The first
    program* section – looks like in the Eclipse IDE:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看复利程序——我们在*第一个程序*部分编写的程序——在Eclipse IDE中的样子：
- en: '![Figure 2.13 – The compound interest program in Eclipse](img/Figure_2.13_B19088.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13 – Eclipse中的复利程序](img/Figure_2.13_B19088.jpg)'
- en: Figure 2.13 – The compound interest program in Eclipse
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – Eclipse中的复利程序
- en: Here, you can see the output and what it looks like when you compile and execute
    it at the command line. All the IDEs capture the console output and display it
    in a window in the IDE.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到输出，以及你在命令行编译和执行时的样子。所有IDE都会捕获控制台输出，并在IDE中的窗口中显示。
- en: Apache NetBeans
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache NetBeans
- en: '**NetBeans** began as a student project in 1996 in the Czech Republic. When
    James Gosling first encountered NetBeans while he was traveling to promote Java,
    he was so impressed by it that upon his return, he convinced the management at
    Sun Microsystems to buy the company behind NetBeans. In 2010, Oracle acquired
    Sun Microsystems, and in 2016, Oracle donated the NetBeans source code to the
    **Apache Foundation**. NetBeans runs on Windows, macOS, and Linux.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**NetBeans**始于1996年在捷克共和国的一个学生项目。当詹姆斯·高斯林在推广Java的过程中第一次遇到NetBeans时，他对其印象深刻，以至于回到公司后，他说服Sun
    Microsystems的管理层收购了NetBeans背后的公司。2010年，Oracle收购了Sun Microsystems，2016年，Oracle将NetBeans源代码捐赠给了**Apache基金会**。NetBeans可以在Windows、macOS和Linux上运行。'
- en: NetBeans has adopted an update cadence like Java, with new versions expected
    every 6 months. While not as feature-rich as some other IDEs, it is the simplest
    of the four to work with. As such, it is the ideal candidate when teaching Java
    or when you wish to use an IDE without a steep learning curve. As an Apache open
    source project, it is also the easiest to become involved with and contribute
    to.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans采用了类似于Java的更新节奏，预计每6个月推出新版本。虽然不如一些其他IDE功能丰富，但它是最简单的四个之一，易于使用。因此，当教授Java或希望使用没有陡峭学习曲线的IDE时，它是理想的选择。作为一个Apache开源项目，它也是最易于参与和贡献的。
- en: You can download Apache NetBeans from [https://netbeans.apache.org/](https://netbeans.apache.org/).
    There is just one version and it supports desktop and server-side development.
    In addition, some plugins add additional functionality, such as support for frameworks
    such as Spring.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://netbeans.apache.org/](https://netbeans.apache.org/)下载Apache NetBeans。只有一个版本，它支持桌面和服务器端开发。此外，一些插件增加了额外的功能，例如对Spring等框架的支持。
- en: 'Let us see what the compound interest program – the one we wrote in *The first
    program* section – looks like in Apache NetBeans:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在*第一个程序*部分编写的复利程序在Apache NetBeans中的样子：
- en: '![Figure 2.14 – The compound interest program in NetBeans](img/Figure_2.14_B19088.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – NetBeans中的复利程序](img/Figure_2.14_B19088.jpg)'
- en: Figure 2.14 – The compound interest program in NetBeans
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – NetBeans中的复利程序
- en: Here, you can see how NetBeans shows the output of the compound interest program.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到NetBeans如何显示复利程序的输出。
- en: Microsoft Visual Studio Code
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微软Visual Studio Code
- en: '**Visual Studio Code** (**VS Code**) was introduced by **Microsoft** in 2016\.
    Its purpose was to be a development environment for a wide range of languages
    such as JavaScript, C++, Python, and Java, among others. The program consists
    of a core component that is released as open source. Support for specific languages
    is handled by extensions. The primary Java extension was developed by Red Hat,
    and unlike Microsoft-authored extensions, this one is open source.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（**VS Code**）由**微软**于2016年推出。它的目的是成为一个适用于JavaScript、C++、Python和Java等多种语言的开发环境。该程序由一个核心组件组成，作为开源发布。对特定语言的支持由扩展处理。主要的Java扩展由Red
    Hat开发，与微软编写的扩展不同，这个扩展是开源的。'
- en: VS Code is written in **TypeScript** and uses the open source Electron framework
    for creating desktop applications. VS Code is available for Windows, macOS, and
    Linux, though not all extensions work on every OS.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code是用**TypeScript**编写的，并使用开源的Electron框架来创建桌面应用程序。VS Code适用于Windows、macOS和Linux，尽管并非所有扩展都能在所有操作系统上运行。
- en: You can download VS Code along with several Java extensions from [https://code.visualstudio.com/docs/languages/java](https://code.visualstudio.com/docs/languages/java).
    You will want to download the Coding Pack for Java, which contains VS Code plus
    the Java extensions. If you have already downloaded the basic version of VS Code,
    you can add Java support to an existing installation by downloading the Java Extension
    Pack.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://code.visualstudio.com/docs/languages/java](https://code.visualstudio.com/docs/languages/java)下载VS
    Code以及几个Java扩展。你将想要下载包含VS Code和Java扩展的编码包。如果你已经下载了VS Code的基本版本，你可以通过下载Java扩展包来向现有安装添加Java支持。
- en: 'Here’s what the compound interest program – the one we wrote in *The first
    program* section – looks like in VS Code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们在*第一个程序*部分编写的复利程序在VS Code中的样子：
- en: '![Figure 2.15 – The compound interest program in VS Code](img/Figure_2.15_B19088.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图2.15 – VS Code中的复利程序](img/Figure_2.15_B19088.jpg)'
- en: Figure 2.15 – The compound interest program in VS Code
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – VS Code中的复利程序
- en: Here, you can see how VS Code shows the output of the compound interest program.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到VS Code如何显示复利程序的输出。
- en: JetBrains IntelliJ IDEA
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JetBrains IntelliJ IDEA
- en: '**IntelliJ IDEA** from the JetBrains company, written in Java, was introduced
    in 2001\. It comes in two flavors. First, there is a free Community edition with
    an open source license for developing desktop Java applications. A second commercial
    version, called Ultimate, includes support for additional Java frameworks such
    as Java EE/Jakarta EE and Spring. The commercial version requires an annual paid
    subscription.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 来自JetBrains公司的**IntelliJ IDEA**是用Java编写的，于2001年推出。它有两种版本。首先，有一个免费的社区版，具有开源许可证，用于开发桌面Java应用程序。第二个商业版本，称为Ultimate，包括对Java
    EE/Jakarta EE和Spring等额外Java框架的支持。商业版本需要年度付费订阅。
- en: IntelliJ is considered the most feature-rich of the Java IDEs. This does not
    necessarily mean it is the best, but it is the most widely used of all the IDEs.
    You can download it from [https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/).
    As already mentioned, the Community edition is free, while the Ultimate version
    requires a subscription.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ被认为是Java IDE中最功能丰富的。这并不一定意味着它是最好的，但它是所有IDE中最广泛使用的。您可以从[https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)下载它。如前所述，社区版是免费的，而终极版本需要订阅。
- en: 'Let us see what the compound interest program – the one we wrote in *The first
    program* section – looks like in IntelliJ IDEA:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看复利程序——我们在*第一个程序*部分编写的程序——在IntelliJ IDEA中的样子：
- en: '![Figure 2.16 – The compound interest program in IntelliJ IDEA](img/Figure_2.16_B19088.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图2.16 – IntelliJ IDEA中的复利程序](img/Figure_2.16_B19088.jpg)'
- en: Figure 2.16 – The compound interest program in IntelliJ IDEA
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 – IntelliJ IDEA中的复利程序
- en: Here, you can see the output in IntelliJ IDEA. This is what it looks like when
    you compile and execute at the command line.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到IntelliJ IDEA中的输出。这就是您在命令行编译和执行时的样子。
- en: Which IDE should you use?
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你应该使用哪个IDE？
- en: 'There are two factors to consider when choosing an IDE:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 选择IDE时需要考虑两个因素：
- en: The first is whether the company you work for mandates a specific IDE. If so,
    then the choice has been made for you.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个因素是您所在的公司是否强制要求使用特定的IDE。如果是这样，那么选择已经为您做出了。
- en: The second is how you feel when using the IDE. All four of the IDEs shown here
    can support whatever you are coding in Java. They can also be used for other languages,
    such as C, C++, PHP, and JavaScript.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个因素是使用IDE时的感受。这里展示的所有四个IDE都可以支持你在Java中编写的任何代码。它们也可以用于其他语言，例如C、C++、PHP和JavaScript。
- en: I can only explain what my choice was and the reasons for that choice. I needed
    an IDE that required the minimum amount of classroom instruction. I taught Java
    project courses in the final year of a 3-year computer science program at a college
    in Quebec. I needed to teach advanced desktop programming and introduce the students
    to server-side programming. I did not want to teach an IDE. For these reasons,
    I chose NetBeans. Students were permitted to use any of the other three IDEs if
    they used the external Maven build system, but if they ran into trouble with the
    IDE, I could only provide minimal assistance.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我只能解释我的选择以及选择该选择的原因。我需要一个需要最少课堂指导的IDE。我在魁北克省一所大学的三年计算机科学课程的最后一年教授Java项目课程。我需要教授高级桌面编程并介绍学生服务器端编程。我不想教授IDE。出于这些原因，我选择了NetBeans。如果学生使用外部Maven构建系统，他们可以自由选择其他三个IDE中的任何一个，但如果他们在IDE上遇到麻烦，我只能提供最基本的支持。
- en: So, I recommend that you take the time to experiment with each of the IDEs.
    Select your personal IDE based on how you feel about using it. They are all effectively
    the same while presenting unique methods to get things done. All of this book’s
    source code, which can be found in this book’s GitHub repository, will run on
    all four IDEs mentioned here.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我建议您花时间尝试每个IDE。根据您使用时的感受选择您个人的IDE。它们在展示完成任务的不同方法时都同样有效。本书的所有源代码，可以在本书的GitHub仓库中找到，都可以在这四个提到的IDE上运行。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we examined the various ways in which we can write, compile,
    and execute Java programs from the command line. We looked at REPL in JShell to
    run snippets of code quickly. Then, we saw the classic way that Java is compiled
    and executed in two steps. Finally, we looked at Launch Single-File Source-Code
    Programs for executing Java programs written in a single file. With the Shebang
    concept found in macOS and Linux, we saw how Java could even be used as a scripting
    language. We ended by briefly looking at the four most common IDEs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了从命令行编写、编译和执行Java程序的各种方法。我们研究了JShell中的REPL来快速运行代码片段。然后，我们看到了Java在两个步骤中编译和执行的经典方式。最后，我们探讨了如何执行单个文件源代码程序来执行在单个文件中编写的Java程序。通过在macOS和Linux中发现的Shebang概念，我们看到了Java甚至可以用作脚本语言。最后，我们简要地回顾了四种最常用的IDE。
- en: Now that you know how to write, compile, and execute Java programs, in the next
    chapter, we will explore an external build system that can be used from the command
    line or within an IDE. This topic will help explain why your choice of IDE is
    personal. You will see why developers can work together while members of the team
    may use a different IDE.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何编写、编译和执行Java程序，在下一章中，我们将探讨一个可以从命令行或IDE内部使用的外部构建系统。这个主题将帮助解释为什么你的IDE选择是个人化的。你将看到为什么开发者可以一起工作，而团队成员可能使用不同的IDE。
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涉及主题的信息，请查看以下资源：
- en: '*Java Platform, Standard Edition – Java Shell User’s* *Guide*: [https://docs.oracle.com/javase/10/jshell/JSHEL.pdf](https://docs.oracle.com/javase/10/jshell/JSHEL.pdf)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Java平台，标准版 – Java Shell用户* *指南*：[https://docs.oracle.com/javase/10/jshell/JSHEL.pdf](https://docs.oracle.com/javase/10/jshell/JSHEL.pdf)'
- en: '*JEP 330: Launch Single-File Source-Code* *Programs*: [https://openjdk.org/jeps/330](https://openjdk.org/jeps/330)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JEP 330: 启动单文件源代码* *程序*：[https://openjdk.org/jeps/330](https://openjdk.org/jeps/330)'
- en: '*Eclipse* *Foundation*: [https://www.eclipse.org/](https://www.eclipse.org/)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Eclipse* *基金会*：[https://www.eclipse.org/](https://www.eclipse.org/)'
- en: '*Apache* *NetBeans*: [https://netbeans.apache.org/](https://netbeans.apache.org/)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Apache* *NetBeans*：[https://netbeans.apache.org/](https://netbeans.apache.org/)'
- en: '*Visual Studio* *Code*: [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Visual Studio* *Code*：[https://code.visualstudio.com/](https://code.visualstudio.com/)'
- en: '*JetBrains IntelliJ* *IDEA*: [https://www.jetbrains.com/idea](https://www.jetbrains.com/idea)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JetBrains IntelliJ* *IDEA*：[https://www.jetbrains.com/idea](https://www.jetbrains.com/idea)'
