- en: Testing RESTful Web Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试RESTful Web服务
- en: In previous chapters, we have discussed how to create a REST API and apply the
    business logic inside our REST APIs and service methods. However, in order to
    be sure of our business logic, we may need to write proper test cases and use
    other testing methods. Testing our REST APIs will help us keep our application
    clean and functional when it is deployed in production. The more we write unit
    test cases or other testing methods, the better it is for us to maintain our application
    in the future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经讨论了如何创建REST API并在我们的REST API和服务方法中应用业务逻辑。然而，为了确保我们的业务逻辑，我们可能需要编写适当的测试用例并使用其他测试方法。测试我们的REST
    API将帮助我们在部署到生产环境时保持应用程序的清洁和功能。我们编写单元测试用例或其他测试方法越多，对于将来维护我们的应用程序来说就越好。
- en: 'In this chapter, we will discuss the following testing strategies for our sample
    RESTful web services:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下用于我们示例RESTful web服务的测试策略：
- en: JUnit testing on Spring controllers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring控制器上进行JUnit测试
- en: MockMvc (mocking on controllers)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MockMvc（对控制器进行模拟）
- en: Postman REST client
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postman REST客户端
- en: SoapUI REST client
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SoapUI REST客户端
- en: jsoup reader as a client
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jsoup读取器作为客户端
- en: JUnit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit
- en: JUnit is the easiest and the most preferred testing framework for Java and Spring
    applications. By writing JUnit test cases for our application, we can improve
    the quality of our application and also avoid buggy situations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是Java和Spring应用程序最简单和最受欢迎的测试框架。通过为我们的应用程序编写JUnit测试用例，我们可以提高应用程序的质量，避免出现错误的情况。
- en: 'Here, we will discuss a simple JUnit test case, which is calling the `getAllUsers`
    method in `userService`. We can check the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论一个简单的JUnit测试用例，它调用`userService`中的`getAllUsers`方法。我们可以检查以下代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code, we have called `getAllUsers` and verified the total
    count. Let''s test the single-user method in another test case:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们调用了`getAllUsers`并验证了总数。让我们在另一个测试用例中测试单用户方法：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code snippets, we just tested our service layer and verified
    the business logic. However, we can directly test the controller by using mocking
    methods, which will be discussed later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们只是测试了我们的服务层并验证了业务逻辑。然而，我们可以通过使用模拟方法直接测试控制器，这将在本章后面讨论。
- en: MockMvc
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MockMvc
- en: MockMvc is mainly used to test the code through the controller. By calling the
    controller (REST endpoint) directly, we can cover the whole application from MockMvc
    testing itself. Also, if we keep any authentication or restriction on the controller,
    it will also be covered in MockMvc test cases.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MockMvc主要用于通过控制器测试代码。通过直接调用控制器（REST端点），我们可以在MockMvc测试中覆盖整个应用程序。此外，如果我们在控制器上保留任何身份验证或限制，它也将在MockMvc测试用例中得到覆盖。
- en: 'The following code will test our basic API (`localhost:8080/`) using MockMvc
    standards:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使用MockMvc标准测试我们的基本API（`localhost:8080/`）：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code, we only initialized the web application in the `setUp()`
    method. Also, we have bound `WebApplicationContext` by using the `@Autowired`
    annotation. Once the setup is ready, we create a method called `testBasicMVC`
    to test our plain API (`localhost:8080`), which will return `"result: Aloha"`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码中，我们只是在`setUp()`方法中初始化了Web应用程序。此外，我们使用`@Autowired`注解绑定了`WebApplicationContext`。设置准备好后，我们创建一个名为`testBasicMVC`的方法来测试我们的普通API（`localhost:8080`），它将返回`"result:
    Aloha"`。'
- en: Once we have finished with the code, if we run it on Eclipse by selecting Run
    As | JUnit test, the preceding method will be executed and show the results. We
    can view the successful test case results in a JUnit window in Eclipse.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成代码后，如果在Eclipse上选择Run As | JUnit test来运行它，前面的方法将被执行并显示结果。我们可以在Eclipse的JUnit窗口中查看成功的测试用例结果。
- en: Testing a single user
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试单个用户
- en: 'So far, we have only tested a plain REST API. Here, we can go one step further
    and test our user API by getting a single user from `userid`. The following code
    will take us through the implementation of getting a single user:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只测试了一个普通的REST API。在这里，我们可以再进一步，通过从`userid`获取单个用户来测试我们的用户API。以下代码将带领我们实现获取单个用户：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code (`testSingleUser`), we can see that we are expecting `status`,
    `userid`, and `username` as `Ok`, `100`, and `David`, respectively. Also, we print
    the result that we get from the REST API.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码（`testSingleUser`）中，我们可以看到我们期望`status`、`userid`和`username`分别为`Ok`、`100`和`David`。此外，我们打印从REST
    API获取的结果。
- en: Postman
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postman
- en: We have already used Postman in previous chapters for testing our REST APIs.
    Postman will be helpful when we need to test the application completely. In Postman,
    we can write test suites to validate our REST API endpoints.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经使用Postman来测试我们的REST API。当我们需要完全测试应用程序时，Postman会很有帮助。在Postman中，我们可以编写测试套件来验证我们的REST
    API端点。
- en: Getting all the users – Postman
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有用户 - Postman
- en: 'First, we shall start with a simple API for getting all the users:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从一个简单的API开始，用于获取所有用户：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The earlier method will get all the users. The Postman screenshot for getting
    all the users is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的方法将获取所有用户。获取所有用户的Postman截图如下：
- en: '![](img/ab3e6aae-451c-4800-8730-ab0bb7372b29.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab3e6aae-451c-4800-8730-ab0bb7372b29.png)'
- en: In the preceding screenshot, we can see that we get all the users that we added
    before. We have used the `GET` method to call this API.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到我们之前添加的所有用户。我们使用了`GET`方法来调用这个API。
- en: Adding a user – Postman
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户 - Postman
- en: 'Let''s try to use the `POST` method in `user` to add a new user:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`POST`方法在`user`中添加一个新用户：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the user, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下截图所示添加用户：
- en: '![](img/ab0d5a93-c309-485a-b820-a674f80d6907.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0d5a93-c309-485a-b820-a674f80d6907.png)'
- en: 'In the preceding result, we can see the JSON output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的结果中，我们可以看到JSON输出：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Generating a JWT – Postman
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成JWT - Postman
- en: 'Let''s try generating the token (JWT) by calling the generate token API in
    Postman using the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过调用Postman中的生成令牌API来生成令牌（JWT）：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can clearly see that we use `subject` in the Body to generate the token.
    Once we call the API, we will get the token. We can check the token in the following
    screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到我们在Body中使用`subject`来生成令牌。一旦我们调用API，我们将获得令牌。我们可以在下面的截图中检查令牌：
- en: '![](img/17f854d7-d862-48a4-89b7-99bd03347c52.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17f854d7-d862-48a4-89b7-99bd03347c52.png)'
- en: Getting the subject from the token
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从令牌中获取主题
- en: 'By using our existing token that we created before, we will get the subject
    by calling the get subject API:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用我们之前创建的现有令牌，我们将通过调用获取主题API来获取主题：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result will be as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下截图所示：
- en: '![](img/58232047-8dee-4e98-b4f5-5fd2fbce2de8.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58232047-8dee-4e98-b4f5-5fd2fbce2de8.png)'
- en: In the preceding API call, we sent the token in the API to get the subject.
    We can see the subject in the resulting JSON.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的API调用中，我们在API中发送了令牌以获取主题。我们可以在生成的JSON中看到主题。
- en: SoapUI
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SoapUI
- en: Like Postman, SoapUI is another open source tool that is used to test web services.
    SoapUI helps in web service invoking, mocking, simulation, load testing, and functional
    testing. SoapUI is heavily used in load testing, and it has lots of controls to
    make load testing easy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与Postman一样，SoapUI是另一个用于测试Web服务的开源工具。SoapUI帮助进行Web服务调用、模拟、仿真、负载测试和功能测试。SoapUI在负载测试中被广泛使用，并且具有许多控件，使负载测试变得容易。
- en: SoapUI is very easy to install in operating systems such as Windows and Linux.
    Its user interface gives us a lot of flexibility to build complex test scenarios.
    Also, SoapUI supports third-party plugins such as `TestMaker` and `Agiletestware`,
    and it's easy to integrate with IDEs such as NetBeans and Eclipse.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SoapUI在Windows和Linux等操作系统中非常容易安装。其用户界面为我们提供了很大的灵活性，可以构建复杂的测试场景。此外，SoapUI支持第三方插件，如`TestMaker`和`Agiletestware`，并且很容易与NetBeans和Eclipse等IDE集成。
- en: Getting all the users – SoapUI
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有用户 - SoapUI
- en: 'We will use SoapUI to test our basic API (`/user`). The following method will
    get all the users when we use them in SoapUI using the `GET` method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用SoapUI测试我们的基本API(`/user`)。当我们在SoapUI中使用`GET`方法时，以下方法将获取所有用户：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The SoapUI screenshot for getting all the users is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有用户的SoapUI截图如下：
- en: '![](img/40628590-4e6b-45ae-9461-9146a3cbd89d.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40628590-4e6b-45ae-9461-9146a3cbd89d.png)'
- en: 'We will try to add a user using the `POST` method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试使用`POST`方法添加用户：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The added user screenshot will be as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 添加用户的截图如下：
- en: '![](img/2135de40-e5c9-4b0d-a88b-14ea7c17ab56.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2135de40-e5c9-4b0d-a88b-14ea7c17ab56.png)'
- en: 'In this result, we can see the JSON output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个结果中，我们可以看到JSON输出：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Generating JWT SoapUI
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成JWT SoapUI
- en: 'We will generate the token using the `GET` method as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`GET`方法生成令牌如下：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In SoapUI, we are using `subject` as a parameter. We can see this in the following
    screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在SoapUI中，我们使用`subject`作为参数。我们可以在下面的截图中看到这一点：
- en: '![](img/61345243-380c-448b-b585-f7245d9267ea.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61345243-380c-448b-b585-f7245d9267ea.png)'
- en: We can clearly see that we use `subject` in the body to generate the token.
    Also, we can see the Style as QUERY in SoapUI. This will make our Value (`test`)
    as a parameter for the API.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到我们在Body中使用`subject`来生成令牌。此外，我们可以在SoapUI中看到Style为QUERY。这将使我们的Value(`test`)成为API的参数。
- en: Once we call the API, we will get the token. We can check the token in the preceding
    screenshot.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们调用API，我们将获得令牌。我们可以在前面的截图中检查令牌。
- en: Getting the subject from the token – SoapUI
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从令牌中获取主题 - SoapUI
- en: Now we can get the subject from the token generated previously. We may need
    to pass the token as a parameter to get the subject.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从之前生成的令牌中获取主题。我们可能需要将令牌作为参数传递以获取主题。
- en: 'The following API will get the subject from the token when we call the API
    in SoapUI using the `GET` method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在SoapUI中使用`GET`方法调用API时，以下API将从令牌中获取主题：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Although we can use the `POST` method in the preceding API call, we only used
    the `GET` method to simplify the process, as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以在前面的API调用中使用`POST`方法，但我们只使用`GET`方法来简化流程，如下面的截图所示：
- en: '![](img/88105b9e-24a6-408c-b71f-a37f146b4a15.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88105b9e-24a6-408c-b71f-a37f146b4a15.png)'
- en: In the preceding API call, we sent the token in the API to get the subject.
    We can see the subject in the resulting JSON.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的API调用中，我们在API中发送了令牌以获取主题。我们可以在生成的JSON中看到主题。
- en: So far, we have tested our APIs with the help of SoapUI. Although SoapUI seems
    a little tougher than Postman, it might be very helpful when we do load testing
    and security testing at the enterprise level.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经通过SoapUI测试了我们的API。尽管SoapUI似乎比Postman更难一些，但在企业级负载测试和安全测试时可能非常有帮助。
- en: jsoup
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jsoup
- en: jsoup is a Java library for extracting HTML documents and getting the details
    from HTML DOM. jsoup uses DOM, CSS, and jQuery-like methods to retrieve information
    from any web page. Even though jsoup is mainly used for HTML document parsing,
    in our application we will use it for API testing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: jsoup是一个用于提取HTML文档并从HTML DOM获取详细信息的Java库。jsoup使用DOM、CSS和类似jQuery的方法从任何网页中检索信息。尽管jsoup主要用于HTML文档解析，但在我们的应用程序中，我们将用它进行API测试。
- en: First, we will call the REST API in jsoup and convert the result to JSON. To
    convert strings to JSON we will use the Gson library.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在jsoup中调用REST API并将结果转换为JSON。为了将字符串转换为JSON，我们将使用Gson库。
- en: 'For both jsoup and Gson libraries, we may have to add dependencies in our `pom.xml`.
    The following is the code for both jsoup and Gson dependencies:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于jsoup和Gson库，我们可能需要在`pom.xml`中添加依赖项。以下是jsoup和Gson依赖项的代码：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will use the jsoup REST consumer inside the test resources so it will be
    easier to test:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在测试资源中使用jsoup REST消费者，这样测试将更容易：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following code will call the REST API as HTML and get the body as text.
    By doing this, we will get only the REST API results as JSON text. The JSON text
    is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将以HTML形式调用REST API并将主体作为文本获取。通过这样做，我们将只获取REST API结果作为JSON文本。JSON文本如下：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once we get the JSON text, we can convert them into a JSON array by using the
    `JsonParser` class. The following code will parse the JSON text and convert it
    into the `JsonArray` class:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得JSON文本，我们可以使用`JsonParser`类将其转换为JSON数组。以下代码将解析JSON文本并将其转换为`JsonArray`类：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once we get the JSON array, we can simply check the array size to verify our
    REST API. The following code will test the size of our REST API:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了JSON数组，我们可以简单地检查数组大小来验证我们的REST API。以下代码将测试我们的REST API的大小：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is the complete class with the preceding code mentioned:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的类和前面提到的代码：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding method, we have used loggers to print the size. Also, we have
    used the `assertEquals` method to check the user array size.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们使用记录器打印大小。此外，我们使用`assertEquals`方法来检查用户数组大小。
- en: As this is like a JUnit test, we may need to test with the JUnit Test option
    in Eclipse. We can simply right-click the file and click Run As | JUnit Test.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这类似于JUnit测试，我们可能需要在Eclipse中使用JUnit测试选项进行测试。我们可以简单地右键单击文件，然后单击运行为| JUnit测试。
- en: Getting a user – jsoup
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户 - jsoup
- en: 'In the earlier method, we have tested get all users in the REST API. Now, we
    can check a single user and details. The following code will test the single user
    REST API:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的方法中，我们已经测试了REST API中的所有用户。现在，我们可以检查单个用户和详细信息。以下代码将测试单个用户REST API：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code will call the REST API, get the JSON in text format, and
    then convert them into a `User` class. Once we convert them into the `User` class,
    we can check the username by `assertEquals`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将调用REST API，以文本格式获取JSON，然后将其转换为`User`类。一旦我们将它们转换为`User`类，我们可以通过`assertEquals`检查用户名。
- en: Adding a user – jsoup
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户 - jsoup
- en: 'Let''s try to use the `POST` method in jsoup by adding a new user. In this
    REST API (add user), we may need to pass a few parameters to the REST API. The
    following code will call the add user API and get the results:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`jsoup`中的`POST`方法添加新用户。在这个REST API（添加用户）中，我们可能需要向REST API传递一些参数。以下代码将调用添加用户API并获取结果：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code, we have used the `.post()` method to call the API. Also,
    we have used the `.data()` method to pass the parameters. By adding `.ignoreContentType()`
    we tell the `Jsoup` library that we don't care about the content type that the
    API returns. Also, `body().text()` will get the body as a text.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`.post()`方法来调用API。此外，我们使用了`.data()`方法来传递参数。通过添加`.ignoreContentType()`，我们告诉`Jsoup`库我们不关心API返回的内容类型。此外，`body().text()`将以文本形式获取主体。
- en: By checking the result in `assertEquals`, we make sure that the API works fine.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`assertEquals`中检查结果，我们确保API正常工作。
- en: To test jsoup, the server needs to be running, so we need to run the server
    first. Then we can run our test cases. To run other test cases, such as JUnit
    and MockMvc, we don't need the server.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试jsoup，服务器需要运行，所以我们需要先运行服务器。然后我们可以运行我们的测试用例。要运行其他测试用例，如JUnit和MockMvc，我们不需要服务器。
- en: Running the test cases
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试用例
- en: 'First, we run the server and make sure we can access the server. If we don''t
    run the server, we will not be able to test jsoup, so keep the server running.
    Once the server has started, right-click the project Run As | JUnit Test. We can
    see the results in the JUnit window, as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们运行服务器并确保可以访问服务器。如果我们不运行服务器，我们将无法测试jsoup，因此保持服务器运行。一旦服务器启动，右键单击项目运行为| JUnit测试。我们可以在JUnit窗口中看到结果，如下图所示：
- en: '![](img/5f56729a-5618-42ec-adc1-59613d2de0cd.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/5f56729a-5618-42ec-adc1-59613d2de0cd.png)
- en: In the preceding screenshot, we can clearly see that all of our test cases have
    passed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以清楚地看到我们所有的测试用例都通过了。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed various testing methods for RESTful web services.
    We have applied JUnit testing, MockMvc, Postman, and SoapUI. These testing methods
    will be very helpful for testing the business logic in the application. In the
    next chapter, we will talk about the REST client and consuming RESTful services
    in a REST client.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了RESTful Web服务的各种测试方法。我们已经应用了JUnit测试，MockMvc，Postman和SoapUI。这些测试方法对于测试应用程序中的业务逻辑将非常有帮助。在下一章中，我们将讨论REST客户端和在REST客户端中消耗RESTful服务。
