- en: Part II. Module 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第II部分 模块2
- en: '**Spring MVC Cookbook**'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Spring MVC Cookbook**'
- en: '>'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*Over 40 recipes for creating cloud-ready Java web applications with Spring
    MVC*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*超过40个用于使用Spring MVC创建云就绪Java Web应用程序的食谱*'
- en: Chapter 1. Setup Routine for an Enterprise Spring Application
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 企业Spring应用程序的设置例程
- en: 'The topics covered in this chapter correspond to this four-step routine:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题对应于这个四步例程：
- en: Installing Eclipse for JEE developers and Java SE 8
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为JEE开发人员和Java SE 8安装Eclipse
- en: Configuring Eclipse for Java SE 8, Maven 3, and Tomcat 8
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Java SE 8、Maven 3和Tomcat 8配置Eclipse
- en: Defining the project structure with Maven
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven定义项目结构
- en: Installing Spring, Spring MVC, and a web structure
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Spring、Spring MVC和Web结构
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Before we dive into this routine for initializing the developments, we are going
    to answer, as an introduction, a couple of questions that should help you understand
    the routine better.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入介绍这个初始化开发的例程之前，我们将回答一些问题，这些问题应该帮助您更好地理解这个例程。
- en: Remember that the result of this chapter will also constitute the minimal starting
    point for all the further chapters.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，本章的结果也将构成所有后续章节的最小起点。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Let''s do it with fun!**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们愉快地做吧！
- en: 'Throughout this book, we will be acting on behalf of the ZipCloud company.
    ZipCloud aims to build different products in the social and financial industry.
    We are going to build the first product of the company: `cloudstreetmarket.com`
    which will be a wonderful stock exchange platform with social capabilities. This
    project must be an optimal beginning for this little ZipCloud start-up!'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将代表ZipCloud公司行事。ZipCloud旨在在社交和金融行业构建不同的产品。我们将建立公司的第一个产品：`cloudstreetmarket.com`，这将是一个具有社交功能的精彩股票交易平台。这个项目必须是这个小ZipCloud初创公司的一个最佳开端！
- en: Why such a routine?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要有这样一个例程？
- en: Whatever your initial objectives may be, it is necessary to make sure that the
    design will not suffer from early stage failures. This routine should cover you
    against this risk.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您最初的目标是什么，都有必要确保设计不会因早期阶段的失败而受到影响。这个例程应该保护您免受这种风险。
- en: The idea beyond the routine itself is to share a bootstrap methodology to kick
    off the project base that you need now and that will support your needs tomorrow.
    The routine is also a key to drive your product thoughts toward a sustainable
    architecture which will be easy to refactor and to maintain.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例程本身的理念是分享一种引导方法，以启动您现在需要的项目基础，并支持您未来的需求。这个例程也是驱动您的产品思想走向可持续架构的关键，这种架构将易于重构和维护。
- en: Setting up a new project for an enterprise-level architecture will not kill
    the excitement and creativity!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为企业级架构设置新项目不会扼杀兴奋和创造力！
- en: Why making use of the Eclipse IDE?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用Eclipse IDE？
- en: There is competition in the domain, but Eclipse is popular among the Java community
    for being an active open source solution; it is consequently accessible online
    to anyone with no restrictions. It also provides, among other usages, a very good
    support for web implementations and particularly to MVC web implementations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域存在竞争，但Eclipse在Java社区中很受欢迎，因为它是一种活跃的开源解决方案；因此，任何人都可以在网上无限制地访问它。它还提供了对Web实现的很好支持，特别是对MVC
    Web实现的支持。
- en: Why making use of Maven?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用Maven？
- en: '**Maven** is a *software project management and comprehension tool*. It is
    an open source project supported by the Apache community and the Apache Software
    Foundation. For nearly 10 years, Maven has given massive benefits. It has also
    shaped a standard structure for Java projects. With its **Project Object Model**
    (**POM**) approach, it provides, to anyone and potentially to any third-party
    software, a uniform and radical way of understanding and building a Java project
    hierarchy with all its dependencies.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Maven**是一个*软件项目管理和理解工具*。它是一个由Apache社区和Apache软件基金会支持的开源项目。在近10年里，Maven带来了巨大的好处。它还为Java项目塑造了一个标准结构。通过其**项目对象模型**（**POM**）方法，它为任何人，潜在地也为任何第三方软件，提供了一种统一和彻底的方式来理解和构建Java项目层次结构及其所有依赖关系。'
- en: 'In early stage architectures, it is critical to consider the following decisions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的架构中，考虑以下决定是至关重要的：
- en: Opening the project definition to potentially different development environments
    and continuous integration tools
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开项目定义，可能适用于不同的开发环境和持续集成工具。
- en: Monitoring the dependencies and maybe securing their access
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控依赖关系，可能确保它们的访问
- en: Imposing a uniform directory structure within the project hierarchy
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目层次结构内强制使用统一的目录结构
- en: Building a self-tested software with self-tested components
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自测组件构建自测软件
- en: Choosing Maven secures these points and fulfills our project's need to make
    our project reusable, secure, and testable (under automation).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Maven可以确保这些点，并满足我们项目使项目可重用、安全和可测试（自动化）的需求。
- en: What does the Spring Framework bring?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring框架带来了什么？
- en: The Spring Framework and its community have contributed to pulling forward the
    Java platform for more than a decade. Presenting the whole framework in detail
    would require us to write more than a book. However, the core functionality based
    on the principles of **Inversion of Control** (**IOC**) and **Dependency Injection**
    (**DI**) through a performant access to the bean repository allows considerable
    reusability. Staying lightweight, it secures great scaling capabilities and could
    probably suit all modern architectures.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架及其社区已经为Java平台做出了超过十年的贡献。详细介绍整个框架需要我们写的不止一本书。然而，基于**控制反转**（**IOC**）和**依赖注入**（**DI**）原则的核心功能，通过对bean存储库的高效访问，允许相当大的可重用性。保持轻量级，它确保了很好的扩展能力，可能适用于所有现代架构。
- en: Installing Eclipse for JEE Developers and Java SE 8
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为JEE开发人员和Java SE 8安装Eclipse
- en: The following recipe is about downloading and installing the Eclipse IDE for
    JEE developers and downloading and installing JDK 8 Oracle Hotspot.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下食谱是关于下载和安装Eclipse IDE for JEE开发人员以及下载和安装JDK 8 Oracle Hotspot的。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This first recipe could appear redundant or unnecessary in regard to your education
    or experience. However, having a uniform configuration all along this book will
    provide you with many benefits.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个步骤可能看起来多余或不必要，与您的教育或经验相关。然而，在整本书中拥有统一的配置将为您带来许多好处。
- en: For instance, you will certainly avoid unidentified bugs (integration or development).
    You will also experience the same interfaces as seen in the presented screenshots.
    Also, because the third-party products are living, you will not have the surprise
    of encountering unexpected screens or windows.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您肯定会避免未知的错误（集成或开发）。您还将体验到与所呈现的屏幕截图中相同的界面。此外，由于第三方产品是活的，您不会遇到意外的屏幕或窗口。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: The whole first chapter in general requires a step by step cooperation. From
    the next chapter, we will be using GIT and your active involvement will be lightened.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，整个第一章需要逐步合作。从下一章开始，我们将使用GIT，您的积极参与将会减轻。
- en: 'Download a distribution of the Eclipse IDE for Java EE developers:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载一个Eclipse IDE for Java EE developers的发行版：
- en: We will be using an Eclipse Luna distribution in this book. We recommend that
    you install this version in order to match our guidelines and screenshots completely.
    Download a Luna distribution for the OS and environment of your choice from [https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1](https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Eclipse Luna发行版。我们建议您安装此版本，以便完全匹配我们的指南和屏幕截图。从[https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1](https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1)下载Luna发行版，选择适合您选择的操作系统和环境。
- en: The product to download is not a compiled installer but a zip archive.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载的产品不是已编译的安装程序，而是一个zip存档。
- en: If you feel confident enough to use another version (more recent) of the Eclipse
    IDE for Java EE Developers, all of them can be found at [https://www.eclipse.org/downloads](https://www.eclipse.org/downloads).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您对使用另一个版本（更近期）的Eclipse IDE for Java EE Developers感到足够自信，所有这些版本都可以在[https://www.eclipse.org/downloads](https://www.eclipse.org/downloads)找到。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For upcoming installations, on Windows, a few target locations are suggested
    to be in the root directory (`C:\`). To avoid permission-related issues, it would
    be better if your Windows user is configured to be a Local Administrator. If you
    can't be part of this group, feel free to target installation directories you
    have write access to.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于即将进行的安装，在Windows上，建议将一些目标位置放在根目录（`C:\`）中。为了避免与权限相关的问题，最好将您的Windows用户配置为本地管理员。如果您无法成为此组的一部分，请随意选择您有写访问权限的安装目录。
- en: 'Extract the downloaded archive into an `eclipse` directory from the steps:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤将下载的存档解压缩到一个`eclipse`目录中：
- en: '`C:\Users\{system.username}\eclipse`: Extract it here if you are on Windows'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Users\{system.username}\eclipse`：如果您使用Windows，请在此处提取'
- en: '`/home/usr/{system.username}/eclipse`: Extract it here if you are on Linux'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/usr/{system.username}/eclipse`：如果您使用Linux，请在此处提取'
- en: '`/Users/{system.username}/eclipse`: Extract it here if you are on Mac OS X'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Users/{system.username}/eclipse`：如果您使用Mac OS X，请在此处提取'
- en: 'Select and download JDK 8:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并下载JDK 8：
- en: We suggest that you download the Oracle Hotspot JDK. Hotspot is a performant
    JVM implementation originally built by Sun Microsystems. Now owned by Oracle,
    the Hotspot JRE and JDK are downloadable for free.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们建议您下载Oracle Hotspot JDK。Hotspot是最初由Sun Microsystems开发的高性能JVM实现。现在由Oracle拥有，Hotspot
    JRE和JDK可免费下载。
- en: Then, choose the product corresponding to your machine through the Oracle website's
    link [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，通过Oracle网站的链接[http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)选择与您的机器相对应的产品。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To avoid a compatibility issue later on, do stay consistent with the architecture
    choice (32 or 64 bits) that you have made earlier for the Eclipse archive.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免后期的兼容性问题，请保持与您之前为Eclipse存档选择的架构选择（32位或64位）一致。
- en: 'Install JDK 8 on the operating system of your choice using the following instructions:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下说明在您选择的操作系统上安装JDK 8：
- en: 'On Windows, this is a monitored installation initiated with an executable file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，这是一个由可执行文件启动的受监控的安装：
- en: Execute the downloaded file and wait until you reach the next installation step
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行下载的文件，并等待直到您达到下一个安装步骤
- en: On the installation-step window, pay attention to the destination directory
    and change it to `C:\java\jdk1.8.X_XX` (`X_XX` refers to the latest current version
    here. We will be using jdk1.8.0_25 in this book. Also, it won't be necessary to
    install an external JRE, so uncheck the public JRE feature.)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装步骤窗口上，注意目标目录并将其更改为`C:\java\jdk1.8.X_XX`（`X_XX`指的是最新的当前版本。在本书中，我们将使用jdk1.8.0_25。此外，不需要安装外部JRE，因此取消选中公共JRE功能。）
- en: 'On Linux/Mac, perform the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux/Mac上，执行以下步骤：
- en: Download the `tar.gz` archive corresponding to your environment
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载与您的环境相对应的`tar.gz`存档
- en: Change the current directory to where you want to install Java. For easier instructions,
    let's agree on the `/usr/java` directory
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前目录更改为您想要安装Java的位置。为了更容易的指导，让我们同意使用`/usr/java`目录
- en: Move the downloaded `tar.gz` archive to this current directory
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的`tar.gz`存档移动到当前目录
- en: 'Unpack the archive with the following command line targeting the name of your
    archive: `tar zxvf jdk-8u25-linux-i586.tar.gz` (this example is for a binary archive
    corresponding to a Linux x86 machine)'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令解压缩存档，目标是您的存档名称：`tar zxvf jdk-8u25-linux-i586.tar.gz`（此示例适用于与Linux x86机器相对应的二进制存档）
- en: You must end up with the `/usr/java/jdk1.8.0_25` directory structure that contains
    the `/bin`, `/db`, `/jre`, `/include` subdirectories.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须最终得到包含`/bin`、`/db`、`/jre`、`/include`子目录的`/usr/java/jdk1.8.0_25`目录结构。
- en: How it works…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this section we are going to provide more insights about the version of Eclipse
    we used and about how we chose this specific version of JVM.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提供有关我们使用的Eclipse版本以及我们选择特定版本的JVM的更多见解。
- en: Eclipse for Java EE developers
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java EE开发人员的Eclipse
- en: We have successfully installed the Eclipse IDE for Java EE developers here.
    Comparatively to Eclipse IDE for Java Developers, there are some additional packages
    coming along such as *Java EE Developer Tools*, *Data Tools Platform*, and *JavaScript
    Development Tools*. This version is appreciated for its ability to manage development
    servers as part of the IDE itself, its capability to customize project facets,
    and its ability to support JPA. The Luna version is officially Java SE 8 compatible;
    this has been a decisive factor at the time of writing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地在这里安装了Eclipse IDE for Java EE developers。与Eclipse IDE for Java Developers相比，这个版本还附带了一些额外的包，如*Java
    EE Developer Tools*、*Data Tools Platform*和*JavaScript Development Tools*。这个版本因其能够作为IDE本身的一部分管理开发服务器、自定义项目要素以及支持JPA的能力而受到赞赏。Luna版本官方上兼容Java
    SE 8；这在撰写时是一个决定性因素。
- en: Choosing a JVM
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择JVM
- en: The choice of the JVM implementation could be discussed over performance, memory
    management, garbage collection, and optimization capabilities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: JVM实现的选择可以根据性能、内存管理、垃圾回收和优化能力进行讨论。
- en: There are lots of different JVM implementations, including couple of open source
    solutions such as OpenJDK and IcedTea (RedHat). The choice of JVM really depends
    on the application's requirements. We have chosen *Oracle Hotspot* from experience
    and from reference implementations deployed in production; this JVM implementation
    can be trusted for a wide range of generic purposes. *Hotspot* also behaves very
    well if you have to run Java UI applications. Eclipse is one of them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的JVM实现，包括一些开源解决方案，如OpenJDK和IcedTea（RedHat）。选择JVM实际上取决于应用程序的要求。我们根据经验和在生产中部署的参考实现选择了*Oracle
    Hotspot*；这个JVM实现可以信任用于各种通用目的。*Hotspot*在运行Java UI应用程序时也表现得非常好。Eclipse就是其中之一。
- en: Java SE 8
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java SE 8
- en: If you haven't already played with Scala or Clojure, it is time that you took
    the functional programming train with Java! With Java SE 8, *Lambda expressions*
    reduce the amount of code dramatically providing improved *readability and maintainability*.
    We won't implement this Java 8 feature, but since it is probably the most popular,
    it must be highlighted as it has given a massive credit to the paradigm change.
    It is important, nowadays, to be familiar with these patterns.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有尝试过Scala或Clojure，现在是时候用Java搭上函数式编程的列车了！使用Java SE 8，*Lambda表达式*大大减少了代码量，提供了更好的*可读性和可维护性*。我们不会实现这个Java
    8功能，但由于它可能是最受欢迎的，因此必须强调它对范式变化的巨大贡献。如今，熟悉这些模式是很重要的。
- en: Configuring Eclipse for Java 8, Maven 3, and Tomcat 8
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Java 8、Maven 3和Tomcat 8配置Eclipse
- en: This recipe entails configuration technics to develop efficiently on Eclipse
    with Java, Maven, and Tomcat.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程涉及配置技术，以便在Eclipse上有效地开发Java、Maven和Tomcat。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once the different products are installed, there are a couple of steps that
    we need to follow, mainly to make Eclipse work properly with Java SE 8, Maven
    3, and Tomcat 8\. In this recipe, we will also look at how to customize the Eclipse
    configuration file (`Eclipse.ini`) in order to make the most of the platform that
    runs Java and to make sure that it will cope with any significant growth of the
    application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了不同的产品后，我们需要遵循一些步骤，主要是使Eclipse与Java SE 8、Maven 3和Tomcat 8正常工作。在这个教程中，我们还将看看如何自定义Eclipse配置文件（`Eclipse.ini`），以充分利用运行Java的平台，并确保它能应对应用程序的任何显著增长。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s take a look at the following steps to configure Eclipse on your desktop:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在桌面上配置Eclipse的以下步骤：
- en: 'You can start by creating a shortcut on your desktop to point to the Eclipse
    executable:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过在桌面上创建一个指向Eclipse可执行文件的快捷方式来开始：
- en: On Windows, the executable file is `Eclipse.exe` and is located at the `eclipse`
    directory root
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，可执行文件是`Eclipse.exe`，位于`eclipse`目录根目录下。
- en: On Linux/Mac, the file is named `Eclipse` and is also is located at the `eclipse`
    directory root
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux/Mac上，文件名为`Eclipse`，也位于`eclipse`目录根目录下
- en: 'Then, we need to customize the `eclipse.ini` file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要自定义`eclipse.ini`文件：
- en: In the Eclipse directory, where you have previously extracted the Eclipse archive,
    you can find the `eclipse.ini` file. *It is a text file that contains a few command-line
    options in order to control the Eclipse startup*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在您之前解压缩Eclipse存档的Eclipse目录中，您可以找到`eclipse.ini`文件。*这是一个文本文件，包含一些命令行选项，以控制Eclipse的启动*。
- en: 'The Eclipse community recommends to specify the path to our JVM here. Hence,
    depending on your system, add the following two lines at the top of the file:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse社区建议在这里指定我们的JVM的路径。因此，根据您的系统，在文件顶部添加以下两行：
- en: 'For Windows, add the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，添加以下内容：
- en: '[PRE0]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Linux/Mac, add this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux/Mac，添加以下内容：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is an optional setting that you can consider:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可选的设置，您可以考虑：
- en: 'If your development machine has at least 2 GB of RAM, you can enter the following
    options to make Eclipse run faster than the default settings. *This section is
    optional because Eclipse''s default settings are already optimized to suit most
    users'' environment*:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的开发机器至少有2GB的RAM，您可以输入以下选项，使Eclipse比默认设置更快运行。*此部分是可选的，因为Eclipse的默认设置已经经过优化，适合大多数用户的环境*：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If your machine has less than 2 GB of RAM, you can still enter this set of options
    without overriding the default `–Xms` and `–Xmx` arguments.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的机器RAM少于2GB，您仍然可以输入这组选项，而不会覆盖默认的`-Xms`和`-Xmx`参数。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: All the options under `-vmargs` are arguments that will be passed to the JVM
    at startup. It is important not to mess up the Eclipse options (the top part of
    the file) with the VM arguments (the bottom part).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`-vmargs`下的所有选项都是在启动时传递给JVM的参数。重要的是不要混淆Eclipse选项（文件的顶部部分）和VM参数（文件的底部部分）。
- en: 'After this we will go through the following steps to start Eclipse and set
    the workspace:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将按照以下步骤启动Eclipse并设置工作区：
- en: Launch the executable described in the Step *2*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 启动步骤*2*中描述的可执行文件。
- en: 'For our project, specify the path: `<home-directory>/workspace`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于我们的项目，指定路径：`<home-directory>/workspace`
- en: 'This path is different for each Operating System:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路径对于每个操作系统都是不同的：
- en: '`C:\Users\{system.username}\workspace`: This is the path on Windows'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Users\{system.username}\workspace`：这是Windows上的路径'
- en: '`/home/usr/{system.username}/workspace`: This is on Linux'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/usr/{system.username}/workspace`：这是在Linux上'
- en: '`/Users/{system.username}/workspace`: This is on Mac OS'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Users/{system.username}/workspace`：这是在Mac OS上'
- en: Click on **OK** and let the Eclipse program start
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击**确定**，让Eclipse程序启动
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The workspace is the place from where you manage your Java projects. It can
    be specific to one application, but not necessarily.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 工作区是您管理Java项目的地方。它可以特定于一个应用程序，但不一定是。
- en: 'Then, we need to check the JRE definitions:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要检查JRE定义：
- en: 'Here, a couple of settings need to be verified in Eclipse:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中，需要验证一些设置：
- en: Open the **Preferences** menu under **Window** (on Mac OS X the **Preference**
    menu is under the **Eclipse** menu).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**窗口**下打开**首选项**菜单（在Mac OS X上，**首选项**菜单在**Eclipse**菜单下）。
- en: In the navigation panel on the left-hand side, open the Java hierarchy and click
    on **Installed JREs** under **Java**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧的导航面板中，打开Java层次结构，然后单击**Java**下的**已安装的JRE**。
- en: On the central screen, remove any existing JREs that you may already have.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在中央屏幕上，删除您可能已经拥有的任何现有JRE。
- en: Click on the **Add…** button to add a standard JVM.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加...**按钮添加标准JVM。
- en: Enter `C:\java\jdk1.8.0_25` (or `/usr/java/...`) as **JRE home**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`C:\java\jdk1.8.0_25`（或`/usr/java/...`）作为**JRE主目录**。
- en: And enter `jdk1.8.0_25` as **JRE name**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并输入`jdk1.8.0_25`作为**JRE名称**。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We tell Eclipse to use the Java Runtime Environment of JDK 8.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉Eclipse使用JDK 8的Java运行时环境。
- en: 'After completing these steps, you should end up with the following configuration:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，您应该得到以下配置：
- en: '![How to do it...](img/image00798.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image00798.jpeg)'
- en: 'Now, we will check the compiler compliance level:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将检查编译器兼容性级别：
- en: In the navigation panel, click on **Compiler** under **Java**.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板中，单击**Java**下的**编译器**。
- en: Check that the **Compiler compliance level** is set to **1.8** in the drop-down
    list.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查下拉列表中的**编译器兼容性级别**是否设置为**1.8**。
- en: 'After this, we need to check the Maven configuration:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要检查Maven配置：
- en: Still in the navigation panel of the **Preferences** menu, open the Maven hierarchy
    and navigate to **Maven** | **Installations**.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在**首选项**菜单的导航面板中，打开Maven层次结构，然后导航到**Maven** | **安装**。
- en: We will specify here which Maven installation we plan to use. For the purpose
    of this book, the embedded Maven will be perfect.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这里指定我们计划使用的Maven安装。对于本书的目的，嵌入式Maven将是完美的。
- en: Back in the navigation panel, go to **Maven** | **User Settings**.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到导航面板，转到**Maven** | **用户设置**。
- en: Set the local repository to `<home-directory>/.m2/repository`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地存储库设置为`<home-directory>/.m2/repository`。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this local repository, our local cached versions of the required artefacts
    will reside. It will prevent our environment from having to download them on each
    build.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地存储库中，我们将保存所需工件的本地缓存版本。这将防止我们的环境在每次构建时都需要下载它们。
- en: 'For the **User Settings** field, create a `settings.xml` file in the `.m2`
    directory: `<home-directory>/.m2/settings.xml`.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**用户设置**字段，在`.m2`目录中创建一个`settings.xml`文件：`<home-directory>/.m2/settings.xml`。
- en: 'Edit the `settings.xml` file and add the following block:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`settings.xml`文件并添加以下块：
- en: '(You can also copy/paste it from the `chapter_1/source_code/.m2` directory):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: （您还可以从`chapter_1/source_code/.m2`目录中复制/粘贴）：
- en: '[PRE3]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are *not* on a Windows machine, change `JAVA_HOME` in this file to your
    JDK installation directory (`/usr/java/jdk1.8.0_25`).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不是Windows机器，请将此文件中的`JAVA_HOME`更改为您的JDK安装目录（`/usr/java/jdk1.8.0_25`）。
- en: Go back to the navigation panel and click on **Maven**. Follow the configuration
    given in this screenshot:![How to do it...](img/image00799.jpeg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到导航面板，单击**Maven**。按照此截图中给出的配置进行操作：![如何操作...](img/image00799.jpeg)
- en: Click on **OK** to save these configuration changes.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**以保存这些配置更改。
- en: 'Now we will install Tomcat 8 in the Eclipse IDE. For this, go through these
    steps:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在Eclipse IDE中安装Tomcat 8。为此，请按照以下步骤进行：
- en: 'Download a ZIP archive for the latest Core version of Tomcat8 from the Tomcat
    website: [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi).'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Tomcat网站下载最新的Tomcat8核心版本的ZIP存档：[http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi)。
- en: 'Extract the downloaded archive to the following directory:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的存档解压缩到以下目录：
- en: On Windows, extract the archive at `C:\tomcat8`
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，将存档解压缩到`C:\tomcat8`
- en: On Linux, extract the archive at `/home/usr/{system.username}/tomcat8`
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上，将存档解压缩到`/home/usr/{system.username}/tomcat8`
- en: On Mac OS X, extract the archive at `/Users/{system.username}/tomcat8`
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac OS X上，将存档解压缩到`/Users/{system.username}/tomcat8`
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Depending on your system, you must be able to access the bin directory from
    the hierarchy: `C:\tomcat8\bin, /home/usr/{system.username}/tomcat8/bin or /Users/{system.username}/tomcat8/bin`.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的系统，您必须能够从层次结构中访问bin目录：`C:\tomcat8\bin, /home/usr/{system.username}/tomcat8/bin
    或 /Users/{system.username}/tomcat8/bin`。
- en: In Eclipse, select the **Preferences** menu under **Windows**, and in the navigation
    panel on the left-hand side, open the **Server** hierarchy and then select **Runtime
    Environments**.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中，选择**窗口**下的**首选项**菜单，然后在左侧的导航面板中，打开**服务器**层次结构，然后选择**运行时环境**。
- en: On the central window, click on the **Add…** button.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在中央窗口中，单击**添加...**按钮。
- en: In the next step (the **New Server** environment window), navigate to **Apache**
    | **Apache Tomcat v8.0**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步（**新服务器**环境窗口）中，导航到**Apache** | **Apache Tomcat v8.0**。
- en: 'Also, check this option: **Create a New Local Server**.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要检查此选项：**创建新的本地服务器**。
- en: Click on the **Next** button.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**下一步**按钮。
- en: 'Fill in the details in the window as shown in the following screenshot:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中显示的窗口中的详细信息填写：
- en: '![How to do it...](img/image00800.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00800.jpeg)'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are on Linux (or Mac OS X), replace `C:\tomcat8` with your Tomcat installation
    directory.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Linux（或Mac OS X），请用您的Tomcat安装目录替换`C:\tomcat8`。
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We are going to review in this section the different elements and concepts that
    this recipe took us through.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾这个食谱带我们经历的不同元素和概念。
- en: The eclipse.ini file
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: eclipse.ini文件
- en: As we've already seen, the `eclipse.ini` file controls the Eclipse startup.
    It is an extra component that makes the Eclipse platform very configurable. You
    can find the list of command-line arguments that can be used in their documentation
    at
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，`eclipse.ini`文件控制Eclipse的启动。它是使Eclipse平台非常可配置的额外组件。您可以在他们的文档中找到可以在命令行中使用的命令行参数列表
- en: '[http://help.eclipse.org/luna/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html](http://help.eclipse.org/luna/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://help.eclipse.org/luna/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html](http://help.eclipse.org/luna/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html)'
- en: 'It is important to acknowledge the following warnings that this documentation
    mentions:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意文档中提到的以下警告：
- en: All lines after `-vmargs` are passed as arguments to the JVM; all arguments
    and options for Eclipse must be specified before `-vmargs` (just like when you
    use arguments on the command line)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`-vmargs`之后的所有行都作为参数传递给JVM；所有Eclipse的参数和选项都必须在`-vmargs`之前指定（就像在命令行上使用参数时一样）
- en: Note
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This explains why we have inserted the `–vm` option at the top of the file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了为什么我们在文件顶部插入了`–vm`选项。
- en: Any use of `-vmargs` on the command line replaces all `-vmargs` settings in
    the `.ini` file unless `--launcher.appendVmargs` is specified either in the `.ini`
    file or on the command line
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行上使用`-vmargs`会替换`.ini`文件中所有`-vmargs`的设置，除非在`.ini`文件中或在命令行上指定了`--launcher.appendVmargs`
- en: Setting the –vm option
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置`-vm`选项
- en: Setting the `-vm` option allows us to be sure of the JVM implementation on which
    Eclipse runs as a program. You might have noticed that we've targeted the JVM
    as a library (`*.dll / *.so`). It has better performance on startup and also identifies
    the program process as the Eclipse executable and not just as the Java executable.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`-vm`选项可以确保Eclipse作为程序运行的JVM实现。您可能已经注意到，我们已经将JVM作为库(`*.dll / *.so`)。它在启动时具有更好的性能，并且还将程序进程标识为Eclipse可执行文件，而不仅仅是Java可执行文件。
- en: If you wonder which JVM Eclipse uses when a `–vm` option is not set, be aware
    that Eclipse *DOES NOT* consult the `JAVA_HOME` environment variable. (Eclipse
    wiki).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道当未设置`–vm`选项时Eclipse使用哪个JVM，请注意Eclipse *不会*查看`JAVA_HOME`环境变量。（Eclipse wiki）。
- en: Instead, Eclipse executes the Java command that parses your path environment
    variable.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Eclipse执行解析您的路径环境变量的Java命令。
- en: Customizing JVM arguments
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义JVM参数
- en: 'The suggested JVM argument list comes from Piotr Gabryanczyk''s work on the
    Java memory management model. Initially, for JetBRAINS IntelliJ settings, this
    configuration is also useful for an Eclipse environment. It helps in the following
    tasks:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的JVM参数列表来自Piotr Gabryanczyk关于Java内存管理模型的工作。最初，对于JetBRAINS IntelliJ设置，这个配置对Eclipse环境也很有用。它有助于以下任务：
- en: Preventing the garbage collector from pausing the application for more than
    10 ms (`-XX:MaxGCPauseMillis=10`)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止垃圾收集器暂停应用程序超过10毫秒(`-XX:MaxGCPauseMillis=10`)
- en: Lowering the level from which the garbage collector starts to 30% of the occupied
    memory (`-XX:MaxHeapFreeRatio=70`)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将垃圾收集器开始的级别降低到占用内存的30%（`-XX:MaxHeapFreeRatio=70`）
- en: Imposing the garbage collector to run as a parallel thread, lowering its interference
    with the application (`-XX:+UseConcMarkSweepGC`)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制垃圾收集器作为并行线程运行，降低其对应用程序的干扰（`-XX:+UseConcMarkSweepGC`）
- en: Choosing the incremental pacing mode for the garbage collector, which generates
    breaks in the GC job so that the application can definitely stop freezing (`–XX:+CMSIncrementalPacing`)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择垃圾收集器的增量调整模式，生成GC作业中断，以便应用程序可以停止冻结(`–XX:+CMSIncrementalPacing`)
- en: 'The instantiated objects throughout the program''s life cycle are stored in
    the Heap memory. The suggested parameters define a JVM startup Heap space of 128
    mb (`-Xms`) and an overall 512 mb maximum heap space (`–Xmx`). The heap is divided
    in two subspaces, which are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 程序生命周期中实例化的对象存储在堆内存中。建议的参数定义了JVM启动堆空间为128 mb（`-Xms`），总体上限为512 mb（`–Xmx`）。堆分为两个子空间，如下所示：
- en: '**Young generation**: New objects are stored in this area. For the leading
    Hotspot or OpenJDK JVMs, the young memory space is divided in two:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**年轻代**: 新对象存储在这个区域。对于领先的Hotspot或OpenJDK JVM，年轻内存空间分为两部分：'
- en: '`Eden`: New objects are stored in this subdivision area. Objects with short
    lives will be deallocated from here.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`伊甸园`: 新对象存储在这个分区中。寿命短的对象将从这里被释放。'
- en: '`Survivor`: This is a buffer between the young and old generation. The survivor
    space is smaller than the Eden and it is also divided in two (the `FROM` and `TO`
    areas). You can adjust the ratio between `Eden` and `Survivor` objects with `-XX:SurvivorRatio`
    (here, `-XX: SurvivorRatio=10` means `YOUNG = 12`, `EDEN = 10`, `FROM = 1` and
    `TO =1`).'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`幸存者`: 这是年轻代和老年代之间的缓冲区。幸存者空间比伊甸园小，也分为两部分（`FROM`和`TO`区域）。您可以使用`-XX:SurvivorRatio`调整`伊甸园`和`幸存者`对象之间的比例（这里，`-XX:
    SurvivorRatio=10`表示`YOUNG = 12`，`EDEN = 10`，`FROM = 1`和`TO =1`）。'
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The minimum size of the young area can be adjusted with `-XX:NewSize`. The maximum
    size can be adjusted with `-XX:MaxNewSize`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 年轻区的最小大小可以使用`-XX:NewSize`进行调整。最大大小可以使用`-XX:MaxNewSize`进行调整。
- en: '**Old generation**: When objects in `Eden` or `Survivor` spaces are still referenced
    after enough garbage collections, they are moved here. It is possible to set the
    `Young` area size as a ratio of the `Old` area size with `-XX:NewRatio`. (That
    is, `-XX:NewRatio=2` means `HEAP = 3, YOUNG = 1` and `OLD =2`).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 老一代：当`Eden`或`Survivor`空间中的对象在足够多的垃圾收集后仍然被引用时，它们会被移动到这里。可以使用`-XX:NewRatio`设置`Young`区域大小作为`Old`区域大小的比例。（也就是说，`-XX:NewRatio=2`表示`HEAP
    = 3，YOUNG = 1`和`OLD =2`）。
- en: Tip
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The maximum size for the new generation space `-XX:MaxNewSize` must always remain
    smaller than half the heap space (`-Xmx/2`) because the garbage collector may
    move all the `Young` space to the `Old` space.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 新一代空间的最大大小`-XX:MaxNewSize`必须始终小于堆空间的一半（`-Xmx/2`），因为垃圾收集器可能会将所有`Young`空间移动到`Old`空间。
- en: With Hotspot or OpenJDK, the permanent generation space was used to store information
    related to the classes' definition (structure, fields, methods, and so on.). You
    may have already encountered a `PermGen space OutOfMemoryError` exception when
    the loaded structure becomes too big. In this situation, the solution is to increase
    the `-XX:MaxPermSize` argument. *It is no longer necessary with JDK8*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Hotspot或OpenJDK，永久代空间用于存储与类的定义相关的信息（结构、字段、方法等）。当加载的结构变得太大时，您可能已经遇到过`PermGen
    space OutOfMemoryError`异常。在这种情况下，解决方案是增加`-XX:MaxPermSize`参数。*在JDK8中不再需要*。
- en: For this purpose, the **Permanent Generation** (**PermGen**) space has been
    replaced by a metadata space that is not part of the heap but of the native memory.
    The default maximum size of this space is unlimited. However, we can still restrict
    it with `-XX:MetaspaceSize` or `-XX:MaxMetaspaceSize`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，**Permanent Generation**（**PermGen**）空间已被一个不属于堆而属于本机内存的元数据空间所取代。这个空间的默认最大大小是无限的。然而，我们仍然可以使用`-XX:MetaspaceSize`或`-XX:MaxMetaspaceSize`来限制它。
- en: Changing the JDK compliance level
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改JDK兼容级别
- en: Downgrading a compliance level allows us to run a lower version of a Java compiler
    than the one the JDK is natively identified to. It impacts the Eclipse builds,
    errors, and warnings and also the JavaDocs. It is obviously not possible to set
    a higher compilation version than the native version of a compiler.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 降低兼容级别允许我们运行一个比JDK本身识别的更低版本的Java编译器。它会影响Eclipse的构建、错误和警告，以及JavaDocs。显然，不能设置比编译器的本机版本更高的编译版本。
- en: Configuring Maven
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Maven
- en: Inside Eclipse, most of the Maven configuration comes from the `m2eclipse` plugin
    (also called Maven integration for Eclipse). This plugin is included, by default,
    in Eclipse Luna. It is then not necessary to download it manually. After the Maven
    configuration that we went through, m2eclipse is also very helpful to trigger
    Maven operations from the IDE context and to provide assistance to create Java
    Maven projects. You will learn more about m2eclipse in the next section.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中，大部分的Maven配置来自`m2eclipse`插件（也称为Eclipse的Maven集成）。这个插件默认包含在Eclipse Luna中，因此不需要手动下载。在我们经历的Maven配置之后，m2eclipse也非常有助于从IDE上下文触发Maven操作，并提供帮助来创建Java
    Maven项目。您将在下一节中了解更多关于m2eclipse的内容。
- en: We then installed a basic `settings.xml` file. This file is used to configure
    Maven without being bound directly to any projects. The most common uses of `settings.xml`
    are probably profile definition and credential storage to access the repository
    manager(s).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们安装了一个基本的`settings.xml`文件。这个文件用于配置Maven，而不直接绑定到任何项目。`settings.xml`最常见的用途可能是配置文件和凭据存储以访问存储库管理器。
- en: With Maven profiles, you have the possibility to run a build for a specific
    environment and to match a specific configuration (variable values, set of dependencies,
    and so on.). Maven profiles can be cumulated with each other. They can be activated
    through a command line, declaratively in the Maven settings or from the environment
    configuration such as files being present or missing on the filesystem, the used
    JDK, and so on.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Maven配置文件，您可以为特定环境运行构建，并匹配特定配置（变量值、依赖项集等）。Maven配置文件可以相互叠加。它们可以通过命令行、在Maven设置中声明，或者通过环境配置（例如文件在文件系统上存在或缺失、使用的JDK等）来激活。
- en: Tip
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In our `settings.xml` file, we have defined a compiler profile with its own
    `JAVA_HOME` property. The compiler profile is activated by default to be declaratively
    defined in the `<activeProfiles>` section. Maven will consult the `settings.xml`
    file before looking up the system variables.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`settings.xml`文件中，我们已经定义了一个具有自己`JAVA_HOME`属性的编译器配置文件。编译器配置文件默认激活，以在`<activeProfiles>`部分中声明定义。Maven在查找系统变量之前将查阅`settings.xml`文件。
- en: A repository manager
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储库管理器
- en: A repository manager is a third-party application that manages all the required
    binaries and dependencies that a developed application may need. Acting as a buffering
    proxy between development environments and public repositories, a repository manager
    provides control of critical parameters such as build time, availability of dependencies,
    visibility and access restriction, and so on.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库管理器是一个第三方应用程序，管理开发应用程序可能需要的所有必需的二进制文件和依赖项。作为开发环境和公共存储库之间的缓冲代理，存储库管理器提供了对关键参数的控制，如构建时间、依赖项的可用性、可见性和访问限制等。
- en: Famous solutions include *Apache Archiva*, *Artifactory*, *Sonatype Nexus*.
    In the context of our application, we won't make use of a repository manager.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的解决方案包括*Apache Archiva*，*Artifactory*，*Sonatype Nexus*。在我们的应用程序环境中，我们不会使用存储库管理器。
- en: Tomcat 8 inside Eclipse
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Eclipse中的Tomcat 8
- en: Eclipse for JEE developers allows the integration of Tomcat with other application
    servers within the development environment. This is made possible through the
    provided **Web Tools Platform** (**WTP**) plugins that can manage web artefacts,
    their compilation, and their deployment into the web server.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse for JEE开发人员允许在开发环境中集成Tomcat与其他应用服务器。这是通过提供的**Web工具平台**（**WTP**）插件实现的，可以管理Web工件、它们的编译和部署到Web服务器。
- en: In the `servers` tab (made visible earlier), double-clicking on the created
    Tomcat v8.0 server, opens a configuration window and enables the possibility of
    setting up parameters that are normally defined in the `server.xml` Tomcat file,
    which is located in the `tomcat8\conf` directory.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在`服务器`选项卡（之前可见），双击创建的Tomcat v8.0服务器，打开一个配置窗口，并启用设置通常在`tomcat8\conf`目录中的`server.xml`
    Tomcat文件中定义的参数的可能性。
- en: By default, WTP abstracts this configuration and doesn't impact the genuine
    `server.xml` file. This behavior can be changed by activating the **Publish module
    contexts to separate XML files** option in the **Server configuration** window.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WTP会抽象出这个配置，不会影响真正的`server.xml`文件。这种行为可以通过在**服务器配置**窗口中激活**将模块上下文发布到单独的XML文件**选项来更改。
- en: There's more...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Find out more about the Eclipse installation at [http://wiki.eclipse.org/Eclipse/Installation](http://wiki.eclipse.org/Eclipse/Installation)
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://wiki.eclipse.org/Eclipse/Installation](http://wiki.eclipse.org/Eclipse/Installation)了解更多关于Eclipse安装的信息
- en: Learn more about the `Eclipse.ini` file at [http://wiki.eclipse.org/Eclipse.ini](http://wiki.eclipse.org/Eclipse.ini)
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Eclipse.ini`文件中了解更多信息，请访问[http://wiki.eclipse.org/Eclipse.ini](http://wiki.eclipse.org/Eclipse.ini)
- en: Learn more about the m2eclipse plugin at [https://maven.apache.org/plugins/maven-eclipse-plugin/](https://maven.apache.org/plugins/maven-eclipse-plugin/)
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解有关m2eclipse插件的更多信息，请访问[https://maven.apache.org/plugins/maven-eclipse-plugin/](https://maven.apache.org/plugins/maven-eclipse-plugin/)
- en: To understand how to use a repository manager, refer to [http://maven.apache.org/repository-management.html](http://maven.apache.org/repository-management.html)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解如何使用存储库管理器，请参阅[http://maven.apache.org/repository-management.html](http://maven.apache.org/repository-management.html)
- en: The Piotr Gabryanczyk article about the garbage collection optimization for
    IDEs can be found at [http://piotrga.wordpress.com/2006/12/12/intellij-and-garbage-collection](http://piotrga.wordpress.com/2006/12/12/intellij-and-garbage-collection)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于IDE的垃圾收集优化的Piotr Gabryanczyk文章可以在[http://piotrga.wordpress.com/2006/12/12/intellij-and-garbage-collection](http://piotrga.wordpress.com/2006/12/12/intellij-and-garbage-collection)找到
- en: You can know more about memory optimization in general at [http://pubs.vmware.com/vfabric52/topic/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html](http://pubs.vmware.com/vfabric52/topic/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html)
    and [https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection](https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[http://pubs.vmware.com/vfabric52/topic/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html](http://pubs.vmware.com/vfabric52/topic/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html)和[https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection](https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection)了解更多关于内存优化的信息
- en: Defining the project structure with Maven
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven定义项目结构
- en: In this recipe, we will focus on defining, with Maven, the project structure
    we need for our application.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将专注于使用Maven定义我们应用程序所需的项目结构。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will initially create two Eclipse projects: one for the application and
    one for the components that ZipCloud as a company could share later on with other
    projects. Take a look at the following image which presents the project components
    that we are going to build:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建两个Eclipse项目：一个用于应用程序，一个用于ZipCloud作为公司以后可能与其他项目共享的组件。看一下下面的图片，它展示了我们将要构建的项目组件：
- en: '![Getting ready](img/image00801.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00801.jpeg)'
- en: 'The application project **cloudstreetmarket-parent** will have three modules.
    Two of them will be packaged as web archives (**war**): the main web application
    and the REST API. One of them will be packaged as a **jar** dependency (cloudstreetmarket-core).'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序项目**cloudstreetmarket-parent**将有三个模块。其中两个将被打包为Web存档（**war**）：主Web应用程序和REST
    API。其中一个将被打包为**jar**依赖项（cloudstreetmarket-core）。
- en: The company-specific project **zipcloud-parent** will have only one submodule—**zipcloud-core**,
    which will be packaged as **jar**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 公司特定项目**zipcloud-parent**将只有一个子模块—**zipcloud-core**，它将被打包为**jar**。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will help us create a Maven parent project:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们创建一个Maven父项目：
- en: From Eclipse, navigate to **File** | **New** | **Other**.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse导航到**文件** | **新建** | **其他**。
- en: A **New** wizard opens up wherein you can select the type of project within
    a hierarchy. Then, open the **Maven** category, select **Maven Project**, and
    click on **Next**.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新建**向导打开，您可以在其中选择层次结构内的项目类型。然后，打开**Maven**类别，选择**Maven项目**，然后点击**下一步**。'
- en: 'The New Maven Project wizard opens as shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Maven项目向导打开，如下截图所示：
- en: '![How to do it...](img/image00802.jpeg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00802.jpeg)'
- en: Make sure to check the **Create a simple project** option. Click on **Next**.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选中**创建一个简单的项目**选项。点击**下一步**。
- en: 'Fill up the next wizard as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下向导填写下一个向导：
- en: '`edu.zipcloud.cloudstreetmarket` as **Group Id**'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edu.zipcloud.cloudstreetmarket`作为**Group Id**'
- en: '`cloudstreetmarket-parent` as **Artifact Id**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloudstreetmarket-parent`作为**Artifact Id**'
- en: '`0.0.1-SNAPSHOT` as **Version**'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.0.1-SNAPSHOT`作为**版本**'
- en: '`pom` as **Packaging**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom`作为**包装**'
- en: '`CloudStreetMarket Parent` as **Name**'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudStreetMarket Parent`作为**名称**'
- en: Then, click on the **Finish** button
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，点击**完成**按钮
- en: The parent project must appear in the package explorer on the left-hand side
    of the dashboard.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 父项目必须出现在仪表板左侧的包资源管理器中。
- en: '![How to do it...](img/image00803.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00803.jpeg)'
- en: We now have to tell m2eclipse which Java compiler version you plan to use in
    this project so that it automatically adds the right JRE system library to the
    submodules we are about to create. This is done through the `pom.xml` file.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须告诉m2eclipse你计划在这个项目中使用哪个Java编译器版本，以便它自动向我们即将创建的子模块添加正确的JRE系统库。这是通过`pom.xml`文件完成的。
- en: 'Edit `pom.xml` file to specify the Java compiler version:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`pom.xml`文件以指定Java编译器版本：
- en: Double-click on the **pom.xml** file. The **m2eclipse** **Overview** tab shows
    up by default. You have to click on the last tab, **pom.xml**, to access the full
    XML definition.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击**pom.xml**文件。**m2eclipse** **概述**选项卡默认显示。您必须点击最后一个选项卡**pom.xml**才能访问完整的XML定义。
- en: In this definition, add the following block at the end but still as part of
    the **<project>** node. (*You can also copy/paste this piece of code from the
    cloudstreetmarket-parent's* `pom.xml` *of the* `chapter_1` *source code):*
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此定义中，在**<project>**节点的末尾添加以下块。(*您也可以从* `chapter_1` *源代码的* `cloudstreetmarket-parent`
    *的* `pom.xml` *中复制/粘贴这段代码):*
- en: '[PRE4]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You have probably noticed the **maven-surefire-plugin** declaration as well.
    We will review it soon; it allows us to run unit tests during the build.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到了**maven-surefire-plugin**的声明。我们很快将对其进行审查；它允许我们在构建过程中运行单元测试。
- en: 'Now, we will create submodules:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建子模块：
- en: 'As submodules of the Parent project, we have seen that we needed one web module
    to handle and render the site''s screens, one web module for the REST API, and
    one other module that will be used to package all the business logic (services,
    data access, and so on.) specific to the first product `cloudstreetmarket.com`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 作为父项目的子模块，我们已经看到我们需要一个Web模块来处理和渲染网站的屏幕，一个用于REST API的Web模块，以及另一个模块，用于打包所有与第一个产品`cloudstreetmarket.com`相关的业务逻辑（服务，数据访问等）：
- en: From the main Webapp module:in Eclipse, navigate to **File** | **New** | **Other**.
    A **New** wizard opens up through which you can select the type of project within
    a hierarchy. Open the **Maven** category, select **Maven Module**, and click on
    **Next**.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse的主Webapp模块中，导航到**文件** | **新建** | **其他**。一个**新建**向导会打开，您可以在其中选择层次结构中的项目类型。打开**Maven**类别，选择**Maven模块**，然后点击**下一步**。
- en: 'The New Maven Module wizard opens up after this; fill it up as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，**新建Maven模块**向导打开，填写如下：
- en: Check Create a simple project.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选创建一个简单的项目。
- en: Enter `cloudstreetmarket-webapp` as **Module Name**.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`cloudstreetmarket-webapp`作为**Module Name**。
- en: Enter `cloudstreetmarket-parent` as **Parent project**.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`cloudstreetmarket-parent`作为**Parent project**。
- en: '![How to do it...](img/image00804.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00804.jpeg)'
- en: 'Click on the **Next** button after which the next step shows up. Enter the
    following entries in that new window:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮后，下一步将显示。在新窗口中输入以下条目：
- en: Enter `edu.zipcloud.cloudstreetmarket` as **Group Id**.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`edu.zipcloud.cloudstreetmarket`作为**Group Id**。
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`0.0.1-SNAPSHOT`作为**Version**。
- en: Select **war** as **Packaging**.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 将**war**作为**Packaging**选择。
- en: Enter `CloudStreetMarket Webapp` as **Name**.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`CloudStreetMarket Webapp`作为**Name**。
- en: Then click on the **Finish** button.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**完成**按钮。
- en: 'Now we will go ahead to create and REST API module:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将继续创建REST API模块：
- en: We are going to repeat the previous operation with different parameters.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用不同的参数重复上述操作。
- en: 'From Eclipse, navigate to **File | New** | **Other**. The selection wizard
    pops up when you go there. After this, open the **Maven** category, select **Maven
    Module**, and click on **Next**:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse中导航到**文件** | **新建** | **其他**。当您这样做时，选择向导会弹出。在此之后，打开**Maven**类别，选择**Maven模块**，然后点击**下一步**：
- en: 'In the **New Maven Module** wizard, enter the following entries:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新建Maven模块**向导中，输入以下条目：
- en: Check the **Create a simple project** option.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选**创建一个简单的项目**选项。
- en: Enter `cloudstreetmarket-api` as **Module Name**.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`cloudstreetmarket-api`作为**Module Name**。
- en: Enter `cloudstreetmarket-parent` as **Parent project**.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`cloudstreetmarket-parent`作为**Parent project**。
- en: 'Click on the **Next** button to proceed to the next step. Enter the following
    entries in that window:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮进入下一步。在该窗口中输入以下条目：
- en: Enter `edu.zipcloud.cloudstreetmarket` as **Group Id**.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`edu.zipcloud.cloudstreetmarket`作为**Group Id**。
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`0.0.1-SNAPSHOT`作为**Version**。
- en: Select **war** as **Packaging**.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 将**war**作为**Packaging**选择。
- en: Enter `CloudStreetMarket API` as **Name**.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`CloudStreetMarket API`作为**Name**。
- en: Then click on the Finish button.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击完成按钮。
- en: 'Now, we will create the core module:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建核心模块：
- en: For this, navigate to **File** | **New** | **Other**. The selection wizard pops
    up when you do so. Open the **Maven** category, select **Maven Module**, and click
    on **Next**.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，导航到**文件** | **新建** | **其他**。当您这样做时，选择向导会弹出。打开**Maven**类别，选择**Maven模块**，然后点击**下一步**。
- en: 'In the **New Maven Module** wizard, enter the following entries:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新建Maven模块**向导中，输入以下条目：
- en: Check the **Create a simple project** option.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选**创建一个简单的项目**选项。
- en: Enter `cloudstreetmarket-core` as **Module Name**.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`cloudstreetmarket-core`作为**Module Name**。
- en: Enter `cloudstreetmarket-parent` as **Parent project**.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`cloudstreetmarket-parent`作为**Parent project**。
- en: 'Click on the **Next** button to go to the next step. Fill in the fields with
    the following:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮进入下一步。填写以下字段：
- en: Enter `edu.zipcloud.cloudstreetmarket` as **Group Id**.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`edu.zipcloud.cloudstreetmarket`作为**Group Id**。
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`0.0.1-SNAPSHOT`作为**Version**。
- en: This time, select **jar** as **Packaging**.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，将**jar**作为**Packaging**选择。
- en: Enter `CloudStreetMarket Core` as **Name**.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`CloudStreetMarket Core`作为**Name**。
- en: Then click on the Finish button.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击完成按钮。
- en: 'If you have the Java perspective activated (in the top-right corner), you should
    see the overall created structure matching the screenshot here:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已激活了Java透视图（在右上角），您应该看到整体创建的结构与此处的屏幕截图匹配：
- en: '![How to do it...](img/image00805.jpeg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00805.jpeg)'
- en: 'Now, we will create a company-specific project and its module(s):'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个特定于公司的项目及其模块：
- en: Let's assume that many different categories of dependencies (core, messaging,
    reporting, and so on…) will be part of the company-business project later.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以后公司业务项目将包含许多不同类别的依赖项（核心，消息传递，报告等...）。
- en: We need a parent project, so from Eclipse, navigate to **File** | **New** |
    **Other**. The selection wizard pops up. Open the Maven category, select Maven
    Project, and click on Next.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个父项目，因此从Eclipse中导航到**文件** | **新建** | **其他**。选择向导弹出。打开Maven类别，选择Maven项目，然后点击下一步。
- en: In the first step of the New Maven Project wizard, as for the Parent project
    we created earlier, only check the **Create a simple Project** and **Use default
    workspace location** options.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新Maven项目向导的第一步中，对于我们之前创建的父项目，只需选中**创建简单项目**和**使用默认工作区位置**选项。
- en: 'Click on the **Next** button and fill in the next wizard as follows:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**下一步**按钮，并填写下一个向导如下：
- en: Enter `edu.zipcloud` as **Group Id**.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`edu.zipcloud`作为**Group Id**。
- en: Enter `zipcloud-parent` as **Artifact Id**.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`zipcloud-parent`作为**Artifact Id**。
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`0.0.1-SNAPSHOT`作为**版本**。
- en: Select **pom** as **Packaging**.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**pom**作为**打包**。
- en: Enter `ZipCloud Factory Business Parent` as **Name**.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`ZipCloud Factory Business Parent`作为**名称**。
- en: 'Again, in the created `pom.xml` file, add the following block inside the `<project>`
    node to create the underlying modules properly and to enable automatic test execution.
    (*You can also copy/paste this piece of code from the zipcloud-parent''s pom.xml
    file of the chapter_1 source code*):'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，在创建的`pom.xml`文件中，在`<project>`节点内添加以下块，以正确创建基础模块并启用自动测试执行。 (*您还可以从第1章源代码的zipcloud-parent的pom.xml文件中复制/粘贴此代码段*):'
- en: '[PRE5]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we are going to create one company-business core module, which will be
    a sub module of the parent project we just created.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个公司业务核心模块，它将是我们刚刚创建的父项目的子模块。
- en: For this, navigate to **File** | **New** | **Other**. The selection wizard pops
    up. Open the **Maven** category, select **Maven Module**, and click on **Next**.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请导航至**文件** | **新建** | **其他**。 选择向导弹出。 打开**Maven**类别，选择**Maven模块**，然后单击**下一步**。
- en: 'In the **New Maven Module** wizard, enter the following details:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新Maven模块**向导中，输入以下详细信息：
- en: Check the **Create a simple project** option.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 检查**创建简单项目**选项。
- en: Enter `zipcloud-core` as **Module Name**.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`zipcloud-core`作为**模块名称**。
- en: Enter `zipcloud-parent` as **Parent project**.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`zipcloud-parent`作为**父项目**。
- en: 'Click on the **Next** button and go to the next step. Here, enter the following
    details:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**下一步**按钮，进入下一步。 在这里，输入以下详细信息：
- en: Enter `edu.zipcloud` as **Group Id**.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`edu.zipcloud`作为**Group Id**。
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`0.0.1-SNAPSHOT`作为**版本**。
- en: Select **jar** as **Packaging**.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**jar**作为**打包**。
- en: Select `ZipCloud Factory Core Business` as **Name**.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`ZipCloud Factory Core Business`作为**名称**。
- en: 'Now, build the two projects:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，构建这两个项目：
- en: 'If the structure is correct, the following Maven command could be successfully
    run:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结构正确，以下Maven命令可以成功运行：
- en: '[PRE6]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This command can be launched in the terminal if Maven is installed on the development
    machine.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在开发机器上安装了Maven，则可以在终端中启动此命令。
- en: 'In our study case, we will, for now, launch it using the m2eclipse modified
    **Run As** menu: Right click on the zipcloud-parent project and click on **Run
    As** | **Maven Clean**.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的研究案例中，我们现在将使用m2eclipse修改后的**Run As**菜单进行启动：右键单击zipcloud-parent项目，然后单击**Run
    As** | **Maven Clean**。
- en: Note
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In the Maven console, you should now see this beautiful line at the bottom:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maven控制台中，您现在应该在底部看到这一行：
- en: '[INFO] BUILD SUCCESS'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '[INFO] BUILD SUCCESS'
- en: 'Now, repeat the operation for the install build phase. You should now see the
    following output in the console:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重复安装构建阶段的操作。 您现在应该在控制台中看到以下输出：
- en: '[PRE7]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Ok, now you should be able to build `cloudstreetmarket-parent` as well.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在您应该能够构建`cloudstreetmarket-parent`。
- en: 'For this, right-click on the **cloudstreetmarket -parent** project and click
    on **Run As** | **Maven Clean**. The Maven console should print the following
    after this step:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请右键单击**cloudstreetmarket-parent**项目，然后单击**Run As** | **Maven Clean**。 在此步骤之后，Maven控制台应打印以下内容：
- en: '[PRE8]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Again, right-click on the **cloudstreetmarket** -parent project and click on
    **Run As** | **Maven Install**. The Maven console should now print the following:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 再次右键单击**cloudstreetmarket-parent**项目，然后单击**Run As** | **Maven Install**。 Maven控制台现在应该打印以下内容：
- en: '[PRE9]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Scrolling up a bit should display the following trace:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 向上滚动一点应该显示以下跟踪：
- en: '[PRE10]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Maven here, with the help of the maven-surefire-plugin, which we manually added,
    parses all the classes encountered in the `src/test/java` directories. Again,
    this path can be customized.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Maven借助我们手动添加的maven-surefire-plugin解析`src/test/java`目录中遇到的所有类。 再次，此路径可以自定义。
- en: In the detected test classes, Maven will also run the methods annotated with
    the JUnit `@Test` annotation. A JUnit dependency is required in the project.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测到的测试类中，Maven还将运行使用JUnit `@Test`注解标记的方法。 项目中需要JUnit依赖项。
- en: How it works...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this section, we are going through quite a few concepts about Maven so that
    you can better understand its standards.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍有关Maven的许多概念，以便您更好地理解其标准。
- en: New Maven project, new Maven module
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的Maven项目，新的Maven模块
- en: The project creation screens we just went through also come from the m2eclipse
    plugin. These screens are used to initialize a Java project with a preconfigured
    `pom.xml` file and a standard directory structure.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚经历的项目创建屏幕也来自m2eclipse插件。 这些屏幕用于使用预配置的`pom.xml`文件和标准目录结构初始化Java项目。
- en: The m2eclipse plugin also provides a set of shortcuts to run Maven build phases
    and some handy tabs (already seen) to manage project dependencies and visualize
    the `pom.xml` configuration.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: m2eclipse插件还提供了一组快捷方式来运行Maven构建阶段以及一些方便的选项卡（已经看到）来管理项目依赖关系并可视化`pom.xml`配置。
- en: The standard project hierarchy
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准项目层次结构
- en: 'Navigating through the created projects, you should be able to notice a recurring
    hierarchy made of the following directories: `src/main/java`, `src/main/resource`,
    `src/test/java`, and `src/test/resource`. This structure is the default structure
    that Maven drives us through. *This model has become a standard nowadays*. But,
    we can still override it (in the `pom.xml` files) and create our own hierarchy.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览创建的项目，您应该能够注意到以下目录的重复层次结构：`src/main/java`，`src/main/resource`，`src/test/java`和`src/test/resource`。
    这种结构是Maven引导我们的默认结构。 *这种模型现在已经成为标准*。 但是，我们仍然可以覆盖它（在`pom.xml`文件中）并创建我们自己的层次结构。
- en: 'If you remember the **maven-compiler-plugin** definition added in the `pom.xml`
    files of the parent projects, there were the following four lines of code that
    we used:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得在父项目的`pom.xml`文件中添加的**maven-compiler-plugin**定义，我们使用了以下四行代码：
- en: '[PRE11]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These lines allow Maven to use an external JDK for the compiler. It is better
    to have control over which compiler Maven uses, especially when managing different
    environments.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行允许Maven使用外部JDK进行编译。最好能够控制Maven使用的编译器，特别是在管理不同环境时。
- en: 'Also, there were the following two lines that might look like an over configuration:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 还有以下两行可能看起来过于配置：
- en: '[PRE12]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From a strict Maven point of view, these lines are optional when an external
    JDK is defined with a specified compilerVersion. Initially, with these two lines,
    we can control which Java version we want the default code to be compiled in.
    When maintaining older systems, the existing code might still compile in a previous
    version of Java.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 从严格的Maven观点来看，当使用指定的compilerVersion定义外部JDK时，这些行是可选的。最初，通过这两行，我们可以控制默认代码要在哪个Java版本中编译。在维护旧系统时，现有代码可能仍然在以前的Java版本中编译。
- en: 'Actually, m2eclipse specifically expects these two lines in order to add `JRE
    System Library [JavaSE-1.8]` to the build path of the `jar` and `war` modules.
    Now, with these lines, Eclipse compiles these projects in the same way Maven does:
    in Java SE 8.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，m2eclipse特别希望这两行存在，以便将`JRE System Library [JavaSE-1.8]`添加到`jar`和`war`模块的构建路径中。现在，有了这些行，Eclipse以与Maven相同的方式编译这些项目：在Java
    SE 8中。
- en: Tip
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If this dependency still shows up as a different version of Java, you may need
    to right-click on the module and then navigate to **Maven** | **Update Project**.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此依赖项仍显示为不同版本的Java，您可能需要右键单击模块，然后导航到**Maven** | **Update Project**。
- en: The project's structure in the IDE
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IDE中的项目结构
- en: About the parent projects in the Eclipse project hierarchy; did you notice that
    the created submodules seem duplicated as standalone projects and as direct children
    of the parent? This is due to the fact that Eclipse doesn't handle hierarchies
    of projects yet in Luna. For this reason, the modules appear as separated projects.
    It might be slightly confusing because the source code appears to be located beside
    the parent projects. *This is not the case in reality, it is only the way they
    are rendered, so we can have all the tools normally bound to the project level*.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Eclipse项目层次结构中的父项目；您是否注意到创建的子模块似乎重复出现为独立项目和父项目的直接子项目？这是因为Eclipse目前在Luna中尚未处理项目层次结构。因此，模块显示为分开的项目。这可能会有点令人困惑，因为源代码似乎位于父项目旁边。*实际上并非如此，这只是它们呈现的方式，因此我们可以像通常绑定到项目级别一样拥有所有工具*。
- en: Note
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At this time, JetBRAINS IntelliJ IDEA already supports visual hierarchies of
    the projects.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，JetBRAINS IntelliJ IDEA已经支持项目的可视化层次结构。
- en: Finally, if you open a parent project's `pom.xml` file, you should see the `<modules>`
    node populated with the created submodules. This has been done automatically as
    well by m2eclipse. We recommend that you keep an eye on this feature because m2eclipse
    doesn't always update these `<modules>` nodes depending on which way you alter
    the project hierarchy.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您打开父项目的`pom.xml`文件，您应该看到`<modules>`节点中填充了创建的子模块。这也是m2eclipse自动完成的。我们建议您密切关注此功能，因为根据您如何更改项目层次结构，m2eclipse并不总是更新这些`<modules>`节点。
- en: Maven's build life cycles
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Maven的构建生命周期
- en: 'A build life cycle in Maven is a specific sequence (and a group) of predefined
    operations called phases. There are three existing life cycles in Maven: default,
    clean, and site.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Maven中的构建生命周期是一组预定义操作（称为阶段）的特定顺序。Maven中存在三个生命周期：默认、清理和站点。
- en: Let's have a look at all the phases that include the default and clean life
    cycles (probably the life cycles the most commonly used by developers).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看包括默认和清理生命周期的所有阶段（可能是开发人员最常用的生命周期）。
- en: The clean life cycle
  id: totrans-344
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 清理生命周期
- en: 'The Maven **clean** phase plays a central role. It resets a project build from
    Maven''s perspective. It is usually about deleting the target directory that is
    created by Maven during the build process. Here are some details about the phases
    included in the **clean** life cycle. These details come from the Maven documentation:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的**clean**阶段起着核心作用。它从Maven的角度重置项目构建。通常是删除Maven在构建过程中创建的目标目录。以下是**clean**生命周期中包含的一些阶段的详细信息。这些详细信息来自Maven文档：
- en: '| Phases | Description |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pre-clean` | This executes processes that are needed prior to the actual
    project cleaning |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `pre-clean` | 在实际项目清理之前执行必要的进程'
- en: '| `clean` | This removes all files generated by the previous build |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `clean` | 删除上一次构建生成的所有文件'
- en: '| `post-clean` | This executes processes that are needed to finalize the project
    cleaning |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '`post-clean` | 这执行需要完成项目清理的进程'
- en: The default life cycle
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 默认生命周期
- en: 'In the default life cycle, you can find the most interesting build phases that
    deal with source generation, compilation, resource handling, tests, integration
    tests, and artefact deployment. Here are some details about the phases included
    in the default life cycle:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认生命周期中，您可以找到处理源代码生成、编译、资源处理、测试、集成测试和构件部署的最有趣的构建阶段。以下是默认生命周期中包含的一些阶段的详细信息：
- en: '| Phases | Descriptions |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `validate` | This validates whether the project is correct and all necessary
    information is available. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| `validate` | 验证项目是否正确，是否有所有必要的信息可用。'
- en: '| `initialize` | This initializes the build state, for example, setting properties
    or creating directories. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '`initialize` | 这初始化构建状态，例如设置属性或创建目录。'
- en: '| `generate-sources` | This generates source code for inclusion in compilation.
    |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `generate-sources` | 生成要包含在编译中的源代码。'
- en: '| `process-sources` | This processes the source code, for example, to filter
    any values. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `process-sources` | 处理源代码，例如过滤任何值。'
- en: '| `generate-resources` | This generates resources to be included in the package.
    |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `generate-resources` | 这将生成要包含在包中的资源。 |'
- en: '| `process-resources` | This copies and processes the resources into the destination
    directory, which is ready for packaging. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `process-resources` | 这将资源复制并处理到目标目录，准备打包。 |'
- en: '| `compile` | This compiles the source code of the project. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `compile` | 这将编译项目的源代码。 |'
- en: '| `process-classes` | This post processes the generated files from compilation,
    for example, to perform bytecode enhancement on Java classes. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| `process-classes` | 这将处理编译生成的文件，例如对Java类进行字节码增强。 |'
- en: '| `generate-test-sources` | This generates any test source code to be included
    in compilation. |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| `generate-test-sources` | 这将生成任何要包含在编译中的测试源代码。 |'
- en: '| `process-test-sources` | This processes the test source code, for example,
    to filter any values. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `process-test-sources` | 这将处理测试源代码，例如过滤任何值。 |'
- en: '| `generate-test-resources` | This creates resources for testing. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `generate-test-resources` | 这将创建用于测试的资源。 |'
- en: '| `process-test-resources` | This copies and processes the resources into the
    test destination directory. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `process-test-resources` | 这将资源复制并处理到测试目标目录中。 |'
- en: '| `test-compile` | This compiles the test source code into the test destination
    directory. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `test-compile` | 这将测试源代码编译到测试目标目录中。 |'
- en: '| `process-test-classes` | This post processes the generated files from test
    compilation, for example, to perform bytecode enhancement on Java classes. For
    Maven 2.0.5 and above. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `process-test-classes` | 这个过程处理来自测试编译的生成文件，例如对Java类进行字节码增强。适用于Maven 2.0.5及以上版本。
    |'
- en: '| `test` | This runs tests using a suitable unit testing framework. These tests
    should not require the code to be packaged or deployed. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `test` | 这将使用适当的单元测试框架运行测试。这些测试不应该需要代码打包或部署。 |'
- en: '| `prepare-package` | This performs the operations necessary to prepare a package
    before the actual packaging. This often results in an unpacked, processed version
    of the package. (Maven 2.1 and above) |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `prepare-package` | 这将在实际打包之前执行必要的操作以准备包。这通常会导致包的未打包、处理版本。（Maven 2.1及以上）
    |'
- en: '| `package` | This takes the compiled code and packages it in its distributable
    format, such as JAR. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `package` | 这将编译后的代码打包成可分发的格式，比如JAR。 |'
- en: '| `pre-integration-test` | This performs actions required before integration
    tests are executed. This may involve things such as setting up the required environment.
    |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `pre-integration-test` | 这将在执行集成测试之前执行所需的操作。这可能涉及设置所需的环境。 |'
- en: '| `integration-test` | This processes and deploys the package if necessary
    into an environment where integration tests can be run. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `integration-test` | 这将处理并部署包（如果需要）到可以运行集成测试的环境中。 |'
- en: '| `post-integration-test` | This performs the actions required after integration
    tests have been executed. This may include cleaning up the environment. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `post-integration-test` | 这在集成测试执行后执行所需的操作。这可能包括清理环境。 |'
- en: '| `verify` | This runs checks to verify that the package is valid and meets
    the quality criteria. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `verify` | 这将运行检查以验证包是否有效并符合质量标准。 |'
- en: '| `install` | This installs the package into the local repository to be used
    as a dependency in other projects locally. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `install` | 这将包安装到本地存储库中，以便在其他项目中作为依赖项使用。 |'
- en: '| `deploy` | This copies the final package to the remote repository to share
    it with other developers and projects (done in an integration or release environment).
    |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `deploy` | 这将把最终的包复制到远程存储库，与其他开发人员和项目共享（在集成或发布环境中完成）。 |'
- en: Plugin goals
  id: totrans-378
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插件目标
- en: With the concept of plugins, Maven acquires a much wider dimension. Maven natively
    provides built-in plugins, but external plugins can be introduced just as other
    dependencies (identified by groupIds and artefactIds).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 有了插件的概念，Maven获得了更广泛的维度。Maven本身提供了内置插件，但外部插件可以像其他依赖项一样引入（通过groupIds和artefactIds标识）。
- en: Each build phase can be attached to zero, one, or more plugin goals. A goal
    represents a specific and concrete task responsible for building or handling a
    project in a certain manner. Some phases have goals bound to them, by default,
    through native plugins.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构建阶段可以附加到零个、一个或多个插件目标。一个目标代表一个具体的任务，负责以某种方式构建或处理项目。一些阶段通过本机插件默认绑定了目标。
- en: Built-in life cycle bindings
  id: totrans-381
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内置生命周期绑定
- en: Now that we have seen the purpose of each phase in the presented two life cycles,
    we must say that, for the default life cycle, depending upon which module packaging
    type we are choosing, only some of these phases are potentially activated for
    goal execution.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了两个生命周期中每个阶段的目的，我们必须说，默认生命周期取决于我们选择的模块打包类型，只有一些阶段可能会潜在地被激活以执行目标。
- en: 'Let''s see the phases that we skipped in the default life cycle for different
    packaging types:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看对于不同的打包类型，我们在默认生命周期中跳过了哪些阶段：
- en: '|   | Default life cycle |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '|   | 默认生命周期 |'
- en: '| --- | --- |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Packaging type | jar/war/ejb/ejb3/rar | ear | maven-plugin | pom |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| 打包类型 | jar/war/ejb/ejb3/rar | ear | maven-plugin | pom |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Activated phases |   | generate-resources | generate-resources |   |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: 激活的阶段 |   | generate-resources | generate-resources |   |
- en: '| process-resources | process-resources | process-resources |   |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| process-resources | process-resources | process-resources |   |'
- en: '| compile |   | compile |   |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| compile |   | compile |   |'
- en: '| process-test-resources |   | process-test-resources |   |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| process-test-resources |   | process-test-resources |   |'
- en: '| test-compile |   | test-compile |   |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| test-compile |   | test-compile |   |'
- en: '| test |   | test |   |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| test |   | test |   |'
- en: '| package | package | package | package |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| package | package | package | package |'
- en: '| install | install | install | install |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| install | install | install | install |'
- en: '| deploy | deploy | deploy | deploy |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| deploy | deploy | deploy | deploy |'
- en: Tip
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In [Chapter 9](part0123.xhtml#aid-3L9L61 "Chapter 9. Testing and Troubleshooting"),
    *Testing and Troubleshooting*, we will practically bind external plugins goals
    to identified build phases.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](part0123.xhtml#aid-3L9L61 "第9章。测试和故障排除")中，*测试和故障排除*，我们将实际将外部插件目标绑定到识别的构建阶段。
- en: 'In summary, calling: mvn clean install on a jar packaged-module will result
    in executing the following phases: clean, process-resources, compile, process-test-resources,
    test-compile, test, package, and install.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在`jar`打包的模块上调用：mvn clean install将导致执行以下阶段：clean，process-resources，compile，process-test-resources，test-compile，test，package和install。
- en: About Maven commands
  id: totrans-400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关于Maven命令
- en: When Maven is told to execute one or more phases targeting a specific project's
    `pom.xml` file, it will execute the requested phase(s) for each of its modules.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 当告诉Maven执行一个或多个针对特定项目的`pom.xml`文件的阶段时，它将为每个模块执行请求的阶段。
- en: 'Then, for every single requested phase, Maven will do the following:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于每个单独请求的阶段，Maven将执行以下操作：
- en: Identify which life cycle the phase belongs to
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别阶段所属的生命周期
- en: Look for the packaging of the current module and identify the right life cycle
    binding
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找当前模块的打包，并识别正确的生命周期绑定
- en: Execute all the phases in the hierarchy of the identified life cycle bindings,
    which are located before the requested phase in the hierarchy
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行在已识别的生命周期绑定的层次结构中位于请求阶段之前的所有阶段
- en: Note
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By the term execute all the phases, we mean execute all the underlying detected
    and attached plugin goals (native plugins or not).
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行所有阶段，我们指的是执行所有检测到的和附加的插件目标（本地插件或非本地插件）。
- en: 'In summary, calling `mvn clean install` on a `jar` packaged module will execute
    the following phases: `clean`, `process-resources`, `compile`, `process-test-resources`,
    `test-compile`, `test`, `package`, and `install`.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在`jar`打包的模块上调用`mvn clean install`将执行以下阶段：`clean`，`process-resources`，`compile`，`process-test-resources`，`test-compile`，`test`，`package`和`install`。
- en: There's more...
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may wonder why we have created these projects and modules in regard to our
    application.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么我们要针对我们的应用程序创建这些项目和模块。
- en: How did we choose the jar module's name?
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们是如何选择jar模块的名称的？
- en: About the Maven structure, the best names for nondeployable modules often emphasize
    a functional purpose, a specific concept created by the business, or are driven
    by the product (cloudstreetmarket-chat, cloudstreetmarket-reporting, cloudstreetmarket-user-management,
    and so on.). This strategy makes the dependency management easier because we can
    infer whether a new module requires another module or not. Thinking about controllers,
    services, and DAO layers at a macro scale doesn't really make sense at this stage,
    and it could lead to design interference or circular dependencies. These technical
    subcomponents (service, DAO, and so on) will be present or not, as needed, in
    each functional module as Java packages but not as JAR-packaged dependencies.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Maven结构，非部署模块的最佳名称通常强调功能目的、业务创建的特定概念，或者由产品驱动（cloudstreetmarket-chat、cloudstreetmarket-reporting、cloudstreetmarket-user-management等）。这种策略使得依赖管理更容易，因为我们可以推断一个新模块是否需要另一个模块。在宏观层面考虑控制器、服务和DAO层在这个阶段并不是很有意义，这可能会导致设计干扰或循环依赖。这些技术子组件（服务、DAO等）将作为Java包存在或不存在，根据每个功能模块的需要，但不作为JAR包依赖。
- en: How did we choose the names for deployable modules?
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们是如何选择可部署模块的名称的？
- en: Choosing a name for a deployable module (`war`) is a bit different different
    from choosing a name for a JAR-packaged module. The deployable archive must be
    thought of as scalable and potentially load balanced. It is fair to assume that
    the requests that will target the application to retrieve HTML contents can be
    distinguished from the ones that will return REST contents.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 选择可部署模块（`war`）的名称与选择JAR打包模块的名称有些不同。可部署的存档必须被视为可扩展和潜在负载平衡。可以合理地假设将针对应用程序检索HTML内容的请求可以与将返回REST内容的请求区分开来。
- en: With this assumption, in our case it has been our wish to split the `war` into
    two. Doing so may raise the question of how the *web sessions* are maintained
    between the two webapps. We will answer this point later on.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这一假设，在我们的情况下，我们希望将`war`拆分为两个。这样做可能会引发一个问题，即*web会话*在两个web应用程序之间如何维护。我们将在稍后回答这一点。
- en: Why did we create core modules?
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们为什么创建核心模块？
- en: We created the core modules, firstly, because it is certain that, in the `cloudstreetmarket`
    application and also in the company-shared project, we will have POJOs, exceptions,
    constants, enums, and some services that will be used horizontally by almost all
    the modules or applications. If a concept is specific to a created functional
    module, it must not be part of core modules.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了核心模块，因为可以肯定，在`cloudstreetmarket`应用程序和公司共享项目中，我们将拥有POJOs、异常、常量、枚举和一些服务，这些服务将被几乎所有模块或应用程序水平使用。如果一个概念是特定于创建的功能模块，它就不应该是核心模块的一部分。
- en: Then, it is probably better to *start big grained* to *refine later* rather
    than thinking about modules that may be implemented differently or even not implemented
    at all. In our case, we are a start-up, and it is not silly to say that the 5
    to 10 features we are going to implement can constitute the core business of this
    application.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*从大粒度开始*，*稍后再细化*可能更好，而不是考虑可能以不同方式实现甚至根本不实现的模块。在我们的情况下，我们是一家初创公司，可以说我们将要实现的5到10个功能可能构成这个应用程序的核心业务。
- en: See also...
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: We also recommend that you install **Code Style Formatters**. Triggered from
    the **Save Event**, we have, with these formatters, the ability to restyle our
    code automatically with a uniform predefinition. Having such formatters in a team
    is much appreciated since it guarantees the same rendering while comparing two
    files with a versioning tool.
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还建议安装**代码样式格式化程序**。从**保存事件**触发，有了这些格式化程序，我们可以自动地使用统一的预定义重新排列我们的代码。在团队中拥有这样的格式化程序是非常受欢迎的，因为它可以保证在比较两个文件时具有相同的渲染。
- en: Installing Spring, Spring MVC, and a web structure
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Spring、Spring MVC和Web结构
- en: In this recipe, we will add third-party dependencies to our `pom.xml` files
    using inheritance. We will load `Spring application contexts` and create the first
    controller of our application. Finally, we will deploy and start the web app in
    Tomcat.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用继承为我们的`pom.xml`文件添加第三方依赖项。我们将加载`Spring应用上下文`并创建我们应用的第一个控制器。最后，我们将在Tomcat中部署和启动web应用。
- en: Getting ready
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Now that we have Eclipse ready and Maven configured properly, the fun can begin.
    We need to specify all the necessary Spring dependencies in our `pom.xml` files,
    and we need to set up Spring so that it loads and retrieves its context for every
    module.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好Eclipse并且正确配置了Maven，接下来就可以开始了。我们需要在我们的`pom.xml`文件中指定所有必要的Spring依赖项，并且需要设置Spring以便为每个模块加载和检索其上下文。
- en: We also need to organize and optionally expose web resources, such as JSPs,
    JavaScript files, CSS files, and so on. If you've completed this configuration,
    we should end up with a static welcome page provided by the Tomcat server, started
    without exceptions!
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要组织和可选地公开web资源，比如JSP、JavaScript文件、CSS文件等。如果你完成了这个配置，我们应该得到一个由Tomcat服务器提供的静态欢迎页面，而且没有异常！
- en: How to do it...
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our first set of changes relate to the parent projects:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一组更改涉及到父项目：
- en: 'We will define dependencies and build options for those parent projects. Let’s
    do it with the following steps:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为这些父项目定义依赖项和构建选项。让我们按照以下步骤进行：
- en: Open the cloudstreetmarket-parent `pom.xml` from the `chapter_1` source code
    directory and select the **pom.xml** tab (underneath the main window).
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**chapter_1**源代码目录中的cloudstreetmarket-parent的`pom.xml`，然后选择主窗口下的**pom.xml**选项卡。
- en: Copy and paste into the cloudstreetmarket-parent's **pom.xml** file the `<properties>`,
    `<dependencyManagement>`, and `<build>` blocks.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 复制并粘贴`<properties>`、`<dependencyManagement>`和`<build>`块到你的cloudstreetmarket-parent的**pom.xml**文件中。
- en: Now, repeat the operation for zipcloud-parent.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对zipcloud-parent重复相同的操作。
- en: Open the zipcloud-parent's `pom.xml` file from the **chapter_1** source code
    and click on the **pom.xml** tab.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**chapter_1**源代码中的zipcloud-parent的`pom.xml`文件，然后点击**pom.xml**选项卡。
- en: Copy and paste into your zipcloud-parent's **pom.xml** the `<properties>` and
    `<dependencyManagement>` blocks. You should already have copied over the `<build>`
    section in the *third recipe*.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴`<properties>`和`<dependencyManagement>`块到你的zipcloud-parent的**pom.xml**中。你应该已经复制了*第三个配方*中的`<build>`部分。
- en: 'Now, we will define dependencies and build options for web modules:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为web模块定义依赖项和构建选项：
- en: Open the cloudstreetmarket-api's `pom.xml` from the **chapter_1** source code
    and select the **pom.xml** tab.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**chapter_1**源代码中的cloudstreetmarket-api的`pom.xml`，然后选择**pom.xml**选项卡。
- en: Copy and paste into your cloudstreetmarket-api's `pom.xml` the `<build>` and
    `<dependencies>` blocks.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴`<build>`和`<dependencies>`块到你的cloudstreetmarket-api的`pom.xml`中。
- en: Now, repeat the operation for cloustreetmarket-webapp.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对cloustreetmarket-webapp重复相同的操作。
- en: Open the cloudstreetmarket-webapp's `pom.xml` from the **chapter_1** source
    code directory and click on the **pom.xml** tab.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**chapter_1**源代码目录中的cloudstreetmarket-webapp的`pom.xml`，然后点击**pom.xml**选项卡。
- en: Copy and paste into your cloudstreetmarket-webapp's **pom.xml** file the `<build>`
    and `<dependencies>` blocks.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴`<build>`和`<dependencies>`块到你的cloudstreetmarket-webapp的**pom.xml**文件中。
- en: 'After this, we define dependencies for jar modules:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们为jar模块定义依赖项：
- en: Open the cloudstreetmarket-core's `pom.xml` from the **chapter_1** source code
    and click on the **pom.xml** tab.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**chapter_1**源代码中的cloudstreetmarket-core的`pom.xml`，然后点击**pom.xml**选项卡。
- en: Copy and paste into your cloudstreetmarket-core's **pom.xml** the entire `<dependencies>`
    block.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴整个`<dependencies>`块到你的cloudstreetmarket-core的**pom.xml**中。
- en: 'Then, we place the web resources:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们放置web资源：
- en: From the **chapter_1** source code, copy and paste the entire **src/main/webapp/***
    directory into your **cloudstreetmarket-webapp** project. You need to end up with
    the same **webapp** directory structure as the **chapter_1** source code:![How
    to do it...](img/image00806.jpeg)
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**chapter_1**源代码中，复制并粘贴整个**src/main/webapp/***目录到你的**cloudstreetmarket-webapp**项目中。你需要最终得到与**chapter_1**源代码相同的**webapp**目录结构：![如何操作...](img/image00806.jpeg)
- en: 'Now, perform the same operation for **cloudstreetmarket-api**. Copy and paste
    from the **chapter_1** source code the entire **src/main/webapp/*** branch into
    your **cloudstreetmarket-api** project. You need to end up with the same webapp
    node and children as the **chapter_1** source code:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对**cloudstreetmarket-api**执行相同的操作。从**chapter_1**源代码中复制并粘贴整个**src/main/webapp/***分支到你的**cloudstreetmarket-api**项目中。你需要最终得到与**chapter_1**源代码相同的webapp节点和子节点：
- en: '![How to do it...](img/image00807.jpeg)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image00807.jpeg)'
- en: 'Now, we target a runtime for the web modules:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们为web模块定位一个运行时：
- en: In Eclipse, right-click on the **cloudmarket-api** project.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中，右键单击**cloudmarket-api**项目。
- en: Select the **Properties** menu.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Properties**菜单。
- en: On the navigation panel, select **Targeted Runtimes**.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板上，选择**Targeted Runtimes**。
- en: On the central window, check the **Server Apache Tomcat v8.0** option.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在中央窗口中，勾选**Server Apache Tomcat v8.0**选项。
- en: Click on **OK** and repeat the fifth operation on **cloudstreetmarket-webapp**.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**OK**，然后在**cloudstreetmarket-webapp**上重复第五个操作。
- en: Note
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A few Eclipse warnings in the **index.jsp** files must have disappeared after
    this.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之后，**index.jsp**文件中的一些Eclipse警告应该已经消失了。
- en: If you still have Warnings in the project, your Eclipse Maven configuration
    may be out of synchronization with the local repository.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目仍然有警告，你的Eclipse Maven配置可能与本地仓库不同步。
- en: 'This step should clean your existing project warnings (if any):'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一步应该清除现有项目的警告（如果有的话）：
- en: 'In this case, perform the following steps:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，执行以下步骤：
- en: Select all the projects in the project hierarchy, except the servers, as follows:![How
    to do it...](img/image00808.jpeg)
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目层次结构中的所有项目，除了服务器，如下所示：![如何操作...](img/image00808.jpeg)
- en: Right-click somewhere in the selection and click on **Update Project** under
    **Maven**. The **Warnings** window at this stage should disappear!
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择的某个地方右键单击，然后在**Maven**下单击**更新项目**。此阶段的**警告**窗口应该消失！
- en: 'Let''s deploy the `wars` and start Tomcat:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们部署`wars`并启动Tomcat：
- en: 'Add the **servers** view in Eclipse. To do so, perform the following operations:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中添加**服务器**视图。为此，请执行以下操作：
- en: Navigate to **Window** | **Show view** | **Other**.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**窗口** | **显示视图** | **其他**。
- en: 'Open the **Server** directory and select servers. You should see the following
    tab created on your dashboard:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**服务器**目录并选择服务器。您应该在仪表板上看到以下选项卡：
- en: '![How to do it...](img/image00809.jpeg)'
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00809.jpeg)'
- en: 'To deploy the web archives, go through the following operations:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要部署Web存档，请执行以下操作：
- en: Inside the view we just created, right-click on the **Tomcat v8.0 Server at
    localhost** server and select **Add and Remove…**.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的视图中，右键单击**本地主机上的Tomcat v8.0服务器**，然后选择**添加和移除...**。
- en: In the next step, which is the **Add and Remove** window, select the two available
    archives and click on **Add** and then on **Finish**.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步，也就是**添加和移除**窗口中，选择两个可用的存档，然后单击**添加**，然后单击**完成**。
- en: 'To start the application in Tomcat, we need to complete these steps:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Tomcat中启动应用程序，我们需要完成以下步骤：
- en: In the **Servers** view, right-click on the **Tomcat v8.0 Server at localhost**
    server and click on **Start**.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器**视图中，右键单击**本地主机上的Tomcat v8.0服务器**，然后单击**启动**。
- en: 'In the **Console** view, you should have the following at the end:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**控制台**视图中，最后应该看到以下内容：
- en: '[PRE13]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you scroll up through these logs, you shouldn't have any exceptions!
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您浏览这些日志，您不应该有任何异常！
- en: 'Finally, if you try to reach `http://localhost:8080/portal/index.html` with
    your browser, you should receive the following HTML content:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您尝试使用浏览器访问`http://localhost:8080/portal/index.html`，您应该收到以下HTML内容：
- en: '![How to do it...](img/image00810.jpeg)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00810.jpeg)'
- en: Note
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A static access to an HTML page remains a modest visual achievement for this
    chapter. All along this book, you will discover that we haven't diminished the
    importance of the environment and the context Spring MVC acts in.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章来说，对HTML页面的静态访问仍然是一个谦逊的视觉成就。在整本书中，您将发现我们并没有降低Spring MVC所处环境和上下文的重要性。
- en: How it works...
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Through this recipe, we have been moving across web resources and Maven dependencies
    related to Spring, Spring MVC, and the web environment. Now, we will go through
    the way that Maven dependency and plugin management are performed. We will then
    talk about the Spring web application context and finally about the organization
    and packaging of web resources.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个配方，我们一直在处理与Spring、Spring MVC和Web环境相关的Web资源和Maven依赖关系。现在，我们将讨论Maven依赖关系和插件管理的方式。然后，我们将讨论Spring
    Web应用程序上下文，最后讨论Web资源的组织和打包。
- en: Inheritance of Maven dependencies
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Maven依赖的继承
- en: There are two strategies concerning the inheritance of dependencies between
    parent projects and children modules. They both are implemented from the parent
    project. On the one hand, we can choose to define these dependencies directly
    from the `<dependencies>` node, shaping a basic inheritance in this way. On the
    other hand, to set up a managed inheritance, we can define the `<dependencies>`
    node as a child node of `<dependencyManagement>`. Let's have a look at the differences
    between the two.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 关于父项目和子模块之间依赖关系的继承有两种策略。它们都是从父项目实施的。一方面，我们可以选择直接从`<dependencies>`节点中定义这些依赖关系，以这种方式塑造基本继承。另一方面，为了建立受控继承，我们可以将`<dependencies>`节点定义为`<dependencyManagement>`的子节点。让我们看看两者之间的区别。
- en: Basic inheritance
  id: totrans-482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本继承
- en: With a basic inheritance, all the dependencies specified in the parent's `pom.xml`
    file are automatically inherited into the child module with the same attributes
    (scope, version, packaging type, and so on) unless you override them (redefining
    these dependencies with the same couple `groupId`/`artifactId`).
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 通过基本继承，父`pom.xml`文件中指定的所有依赖关系都会自动继承到具有相同属性（范围、版本、打包类型等）的子模块中，除非您覆盖它们（使用相同的`groupId`/`artifactId`重新定义这些依赖关系）。
- en: On the one hand, it provides the option of using the versions of the dependencies
    we want in the modules we want. On the other hand, we can end up with a very complex
    dependencies schema and huge `pom.xml` files in the children modules. Also, managing
    version conflicts with external transitive dependencies can be a pain.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，它提供了在我们想要的模块中使用我们想要的依赖关系版本的选项。另一方面，我们可能会得到一个非常复杂的依赖关系架构和子模块中的巨大`pom.xml`文件。此外，管理外部传递依赖关系的版本冲突可能会很痛苦。
- en: Tip
  id: totrans-485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A transitive dependency is a required dependency with the needed dependency.
    Transitive dependencies have been automatically imported since Maven 2.0.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 自Maven 2.0以来，传递依赖是一个需要的依赖关系。传递依赖关系已经自动导入。
- en: There are no standards in this inheritance type for external dependencies.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种继承类型中，没有标准的外部依赖关系。
- en: Managed inheritance
  id: totrans-488
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 受控继承
- en: With the `< dependencyManagement>` mechanism, dependencies defined in the parent
    `pom.xml` are not automatically inherited in children modules. However, the dependency
    attributes (scope, version, packaging type, and so on) are pulled from the parent
    dependency's definition, and therefore, the redefinition of these attributes is
    made optional.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<dependencyManagement>`机制，父`pom.xml`中定义的依赖关系不会自动继承到子模块中。但是，依赖属性（范围、版本、打包类型等）是从父依赖关系的定义中提取的，因此，重新定义这些属性是可选的。
- en: This process drives us towards a centralized dependency definition where all
    the children modules use the same versions of dependencies unless a specific dependency
    requires a custom one.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将我们引向一个集中的依赖关系定义，所有子模块使用相同版本的依赖关系，除非特定的依赖关系需要自定义。
- en: Including third-party dependencies
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括第三方依赖
- en: Among the dependencies copied over, you might have noticed a few Spring modules,
    some test, web, logging, and utility dependencies.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制的依赖项中，你可能已经注意到了一些Spring模块，一些测试、Web、日志和实用程序依赖项。
- en: The idea has been to start with a basic web development tool box, which is enhanced
    with all the Spring modules. We will visit most of the dependencies actually included
    when we face a particular situation.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是从一个基本的Web开发工具箱开始，然后使用所有的Spring模块进行增强。当我们面对特定情况时，我们将访问实际包含的大多数依赖项。
- en: The Spring Framework dependency model
  id: totrans-494
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring框架依赖模型
- en: 'As presented in the following diagram taken from the [spring.io](http://spring.io)
    website, these days, the Spring Framework is currently made of 20 modules that
    are grouped in different areas:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 正如从[spring.io](http://spring.io)网站中提取的下图所示，如今，Spring框架目前由20个模块组成，分组在不同的领域中：
- en: '![The Spring Framework dependency model](img/image00811.jpeg)'
  id: totrans-496
  prefs: []
  type: TYPE_IMG
  zh: '![Spring框架依赖模型](img/image00811.jpeg)'
- en: These modules have been included in the parent POMs as managed dependencies.
    This will allow us, later on, to quickly cherry-pick the needed ones, narrowing
    down a selection for our `wars`.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块已经被包含在父POM中作为受控依赖项。这将使我们以后能够快速地挑选所需的依赖项，为我们的`wars`缩小选择范围。
- en: The Spring MVC dependency
  id: totrans-498
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring MVC依赖
- en: The Spring MVC module is self-contained in the `spring-webmvc` jar. Spring MVC
    in a web application is a fundamental element, as it handles incoming client requests
    and smoothly monitors the business operations from controllers. It finally offers
    a number of tools and interfaces capable of preparing responses in the format
    the clients expect them in.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC模块是在`spring-webmvc` jar中自包含的。在Web应用程序中，Spring MVC是一个基本元素，它处理传入的客户端请求，并从控制器中平稳地监视业务操作。最终，它提供了一些工具和接口，能够以客户端期望的格式准备响应。
- en: All this workflow comes along with the spring-webmvc jar output HTML content
    or web services.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工作流程都伴随着spring-webmvc jar输出HTML内容或Web服务。
- en: Spring MVC is entirely integrated in the Spring Framework, and all its components
    are standard with regard to the Spring architecture choices.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC完全集成在Spring框架中，其所有组件都符合Spring架构选择的标准。
- en: Using Maven properties
  id: totrans-502
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Maven属性
- en: In each parent `pom.xml` file, we have defined a `<properties>` block as part
    of the `<project>` section. These properties are user-defined properties bound
    to a project, but we can also define such properties within a **Maven Profile**
    option. Like variables, properties are referenced in the POMs with their name
    surrounded by **${…}**.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个父`pom.xml`文件中，我们已经在`<project>`部分定义了一个`<properties>`块。这些属性是绑定到项目的用户定义属性，但我们也可以在**Maven
    Profile**选项中定义这些属性。与变量一样，属性在POM中被引用时，其名称被**${…}**包围。
- en: There is a standard on defining property names using periods as word separators.
    More than a standard, it is a uniform notation to access both user-defined variables
    and attributes of objects that constitute the Maven model. The Maven model is
    the public interface of Maven and starts from the project level.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个标准，使用句点作为单词分隔符来定义属性名称。这不仅仅是一个标准，它还是一种统一的表示法，可以访问用户定义的变量和构成Maven模型的对象的属性。Maven模型是Maven的公共接口，从项目级别开始。
- en: 'The POM **XML Schema Definition** (**xsd**) is generated from this Maven model.
    It can sound abstract but in the end, the Maven model is only a set of POJOs with
    getters and setters. Have a look at the JavaDoc of the Maven model from the URL
    below, to identify concepts, specific to pom.xml files (Build, Dependency, Plugin,
    and so on.):'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: POM **XML模式定义**（**xsd**）是从这个Maven模型生成的。这可能听起来很抽象，但最终，Maven模型只是一组带有getter和setter的POJOs。请查看下面URL中Maven模型的JavaDoc，以识别与pom.xml文件特定的概念（构建、依赖、插件等）：
- en: '[http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html](http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html)'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html](http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html)'
- en: To summarize, we can retrieve a node value defined in a POM and navigate the
    Maven model hierarchy using a period-based expression language that targets the
    getters.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们可以检索在POM中定义的节点值，并使用基于点的表达语言导航Maven模型层次结构，以定位getter。
- en: For example, `${project.name}` references the current `project.getName()`, `${project.parent.groupId}`,
    the current `project.getParent().getGroupId()`, and so on.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`${project.name}`引用了当前的`project.getName()`，`${project.parent.groupId}`引用了当前的`project.getParent().getGroupId()`，依此类推。
- en: Defining user properties that match an existing path of the Maven model is a
    way of overriding its value. That's what we have done for `project.build.sourceEncoding`.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 定义与Maven模型的现有路径匹配的用户属性是覆盖其值的一种方式。这就是我们为`project.build.sourceEncoding`所做的事情。
- en: Maven also offers the possibility to reach properties defined in the `settings.xml`
    files such as `${settings.localRepository}`; but also environment variables such
    as `${env.JAVA_HOME}`; and Java System properties such as `${java.class.path}`,
    `${java.version}`, `${user.home}`, or `${user.name}`.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: Maven还提供了访问`settings.xml`文件中定义的属性的可能性，比如`${settings.localRepository}`；还可以访问环境变量，比如`${env.JAVA_HOME}`；以及Java系统属性，比如`${java.class.path}`、`${java.version}`、`${user.home}`或`${user.name}`。
- en: The web resources
  id: totrans-511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web资源
- en: If you remember, we copied/pasted the entire `src/main/webapp` directory from
    the `chapter_1` source code. The `webapp` directory name is a Maven standard.
    The `webapp` folder in Eclipse doesn't need to be tagged as a source folder for
    the build path, as it would create a complex and useless package hierarchy for
    static files. Preferably, it appears as a plain directory tree.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，我们从`chapter_1`源代码中复制/粘贴了整个`src/main/webapp`目录。`webapp`目录名称是Maven的标准。在Eclipse中，`webapp`文件夹不需要被标记为构建路径的源文件夹，因为这会为静态文件创建一个复杂且无用的包层次结构。最好是它显示为一个普通的目录树。
- en: 'The `webapp` directory must be seen as the document root of the application
    and positioned at the root level of the WAR. The public static web resources under
    `webapp`, such as HTML files, Javascript, CSS, and image files, can be placed
    in the subdirectories and structure of our choice. However, as described in the
    *Servlet 3.0 Specification*, the `WEB-INF` directory is a special directory within
    the application hierarchy. All its contents can never be reached from outside
    the application; its content is accessible from the servlet code calling for `getResource`
    or `getResourceAsStream` on `ServletContext`. The specification also tells us
    that the content of a `WEB-INF` directory is made up of the following:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`webapp`目录必须被视为应用程序的文档根，并位于WAR的根级别。`webapp`下的公共静态web资源，如HTML文件、Javascript、CSS和图像文件，可以放在我们选择的子目录和结构中。然而，正如*Servlet
    3.0规范*中所描述的，`WEB-INF`目录是应用程序层次结构中的一个特殊目录。它的所有内容都无法从应用程序外部访问；它的内容只能从调用`ServletContext`的servlet代码中访问`getResource`或`getResourceAsStream`。规范还告诉我们，`WEB-INF`目录的内容由以下内容组成：'
- en: The `/WEB-INF/web.xml` deployment descriptor.
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/WEB-INF/web.xml`部署描述符。'
- en: The `/WEB-INF/classes/` directory for servlet and utility classes. The classes
    in this directory must be available to the application class loader.
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/WEB-INF/classes/`目录用于存放servlet和实用类。该目录中的类必须对应用程序类加载器可用。'
- en: The `/WEB-INF/lib/*.jar` area for Java ARchive files. These files contain servlets,
    beans, static resources, and JSPs packaged in a JAR file and other utility classes
    useful to the web application. The web application class loader must be able to
    load classes from any of these archive files.
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/WEB-INF/lib/*.jar`区域用于存放Java ARchive文件。这些文件包含了打包在JAR文件中的servlet、bean、静态资源和JSP，以及对web应用程序有用的其他实用类。web应用程序类加载器必须能够从这些存档文件中加载类。'
- en: It is good practice to create a `jsp` directory inside the `WEB-INF` folder
    so that the `jsp` files cannot be directly targeted without passing through an
    explicitly defined controller.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在`WEB-INF`文件夹内创建一个`jsp`目录是一个良好的做法，这样`jsp`文件就不能直接被定位，而必须通过显式定义的控制器传递。
- en: JSP applications do exist, and by definition, they will not follow this practice.
    These type of applications may be suited to certain needs, but they also don't
    specifically promote the use of an MVC pattern nor a great separation of concerns.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: JSP应用程序确实存在，并且根据定义，它们不会遵循这种做法。这种类型的应用程序可能适合某些需求，但它们也不特别推广MVC模式的使用，也不具有很好的关注点分离。
- en: To use JSPs in a web application, the feature must be enabled in `web.xml` with
    the definition of a servlet of the `org.apache.jasper.servlet.JspServlet` type
    mapped to the JSP files location.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 要在web应用程序中使用JSP，必须在`web.xml`中启用该功能，并定义一个类型为`org.apache.jasper.servlet.JspServlet`的servlet，将其映射到JSP文件的位置。
- en: The target runtime environment
  id: totrans-520
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标运行时环境
- en: 'We have experienced warnings in the `index.jsp` files. We have sorted them
    out by adding a target runtime to our projects. We also saw that Tomcat comes
    with the Eclipse Compilator for Java as a JAR library. To perform the JSP compilation,
    the `tomcat8\lib` directory must include the following JAR libraries: `jsp-api`,
    `servlet-api` and `el-api`, and so on. Specifying a target runtime for a project
    in Eclipse emulates and anticipates situation where the application will be run
    from an external Tomcat container (setup with those libraries). This also explains
    why the `jsp-api` and `el-api` dependencies are defined in the parent POMs with
    a *provided* scope.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`index.jsp`文件中遇到了警告。我们通过向项目添加目标运行时来解决了这些问题。我们还发现Tomcat自带了Eclipse Compilator
    for Java作为一个JAR库。为了执行JSP编译，`tomcat8\lib`目录必须包括以下JAR库：`jsp-api`，`servlet-api`和`el-api`等。在Eclipse中为项目指定目标运行时模拟并预测应用程序将从外部Tomcat容器（使用这些库设置）运行的情况。这也解释了为什么在父POM中使用*provided*范围定义了`jsp-api`和`el-api`依赖项。
- en: The Spring web application context
  id: totrans-522
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring web应用程序上下文
- en: In the `web.xml` files, we defined a special type of Servlet, the Spring MVC
    `DispatcherServlet`, and we named it `spring`. This servlet covers the widest
    `/*` URL pattern. We will revisit the `DispatcherServlet` in the next chapter.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中，我们定义了一种特殊类型的Servlet，即Spring MVC `DispatcherServlet`，并将其命名为`spring`。这个servlet覆盖了最广泛的`/*`
    URL模式。我们将在下一章重新讨论`DispatcherServlet`。
- en: A `DispatcherServlet` has its own discovery algorithm that builds up `WebApplicationContext`.
    An optional `contextConfigLocation` initialization parameter is provided that
    points to a `dispatcher-context.xml` file. This parameter overrides the default
    expected filename and path (`/WEB-INF/{servletName}-servlet.xml`) for the `WebApplicationContext`
    defined in the `DispatcherServlet` discovery logic.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`DispatcherServlet`有自己的发现算法，构建`WebApplicationContext`。提供了一个可选的`contextConfigLocation`初始化参数，指向一个`dispatcher-context.xml`文件。这个参数覆盖了`DispatcherServlet`发现逻辑中默认的预期文件名和路径（`/WEB-INF/{servletName}-servlet.xml`）。'
- en: With the `load-on-startup` attribute set to `1`, as soon as the servlet container
    gets ready, a new `WebApplicationContext` gets loaded and scoped only for the
    starting servlet. Now, *we don't wait for the first client request to load WebApplicationContext*.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 将`load-on-startup`属性设置为`1`后，一旦servlet容器准备就绪，就会加载一个新的`WebApplicationContext`，并且仅对启动servlet进行范围限定。现在，*我们不再等待第一个客户端请求来加载WebApplicationContext*。
- en: A Spring `WebApplicationContext` file usually defines or overrides the configuration
    and beans that Spring MVC offers to the web application.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: Spring `WebApplicationContext`文件通常定义或覆盖了Spring MVC为web应用程序提供的配置和bean。
- en: Still in the `web.xml` file, an `org.sfw.web.context.ContextLoaderListener`
    listener is set up. The purpose of this listener is to start and shut down another
    Spring `ApplicationContext`, which will be the root one following the container's
    life cycle.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中，设置了`org.sfw.web.context.ContextLoaderListener`监听器。这个监听器的目的是启动和关闭另一个Spring
    `ApplicationContext`，它将是根据容器生命周期的根`ApplicationContext`。
- en: 'To load more than one spring context file easily, the trick here is to use
    the classpath notation (which is relative) and the star (`*`) character in the
    resource path:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 要轻松加载多个spring上下文文件，这里的诀窍是使用类路径表示法（相对路径）和资源路径中的星号（`*`）字符：
- en: '[PRE14]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Doing so allows us to *load all the context files encountered in the classpath
    that match a standard notation and location*. This approach is appreciated for
    the consistency it imposes but also for the way it targets context files in underlying
    jars.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以*加载在类路径中遇到的所有符合标准表示法和位置的上下文文件*。这种方法受到赞赏，因为它强加了一致性，但也因为它定位底层jar中的上下文文件的方式。
- en: The aggregation of all the matching context files creates an `ApplicationContext`
    root with a much broader scope, and the `WebApplicationContext` inherits it. The
    beans we define in the root context become visible to the `WebApplicationContext`
    context. We can override them if needed. However, the `DispatcherServlet` context's
    beans are not visible to the root context.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 所有匹配的上下文文件的聚合创建了一个具有更广泛范围的`ApplicationContext`根，并且`WebApplicationContext`继承它。我们在根上下文中定义的bean对`WebApplicationContext`上下文可见。如果需要，我们可以覆盖它们。但是，`DispatcherServlet`上下文的bean对根上下文不可见。
- en: Plugins
  id: totrans-532
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插件
- en: Maven is, above all, a plugin's execution framework. Every task run by Maven
    corresponds to a plugin. A plugin has one or more goals that are associated individually
    to life cycle phases. Like the dependencies, the plugins are also identified by
    a `groupId`, an `artifactId`, and a version. When Maven encounters a plugin that
    is not in the local repository, it downloads it. Also, a specific version of Maven
    targets, by default, a number of plugins that match the life cycle phases. These
    plugins are frozen on fixed versions and therefore on a defined behavior—you need
    to override their definition to get a more recent version or to alter their default
    behavior.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: Maven首先是一个插件执行框架。Maven运行的每个任务都对应一个插件。插件具有一个或多个与生命周期阶段分别关联的目标。与依赖关系一样，插件也由`groupId`、`artifactId`和版本标识。当Maven遇到不在本地存储库中的插件时，会下载它。此外，默认情况下，Maven的特定版本会针对与生命周期阶段匹配的一些插件。这些插件被冻结在固定版本上，因此具有定义行为—您需要覆盖它们的定义以获得更近期的版本或更改它们的默认行为。
- en: The Maven compiler plugin
  id: totrans-534
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Maven编译器插件
- en: The maven-compiler-plugin is a Maven core plugin. The core plugins are named
    as such because their goals are triggered on Maven core phases (clean, compile,
    test, and so on.). Noncore plugins relate to packaging, reporting, utilities,
    and so on. It is good practice to redefine the maven-compiler-plugin to control
    which version of the compiler is to be used or to trigger some external tools'
    actions (the m2eclipse project management tool, actually).
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: maven-compiler-plugin是Maven核心插件。核心插件之所以被命名为核心插件，是因为它们的目标是在Maven核心阶段（清理、编译、测试等）上触发的。非核心插件涉及打包、报告、实用工具等。重新定义maven-compiler-plugin以控制要使用的编译器版本或触发一些外部工具的操作（实际上是m2eclipse项目管理工具）是一个很好的做法。
- en: 'As its name suggests, the maven compiler plugin compiles the Java sources.
    For that, it uses the `javax.tools.JavaCompiler` class and has two goals: `compiler:compile`
    (triggered as part of the compile phase to compile the `java/main` source classes)
    and `compiler:testCompile` (triggered as part of the test-compile phase to compile
    the `java/test` source classes).'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，maven编译器插件编译Java源代码。为此，它使用`javax.tools.JavaCompiler`类，并有两个目标：`compiler:compile`（作为编译阶段的一部分触发，编译`java/main`源类）和`compiler:testCompile`（作为测试编译阶段的一部分触发，编译`java/test`源类）。
- en: The Maven surefire plugin
  id: totrans-537
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Maven surefire插件
- en: 'The maven-surefire-plugin is also a Maven core plugin that has only one goal:
    `surefire:test`. This is invoked as part of the default life cycle (the test phase)
    to run unit tests defined in the application. It generates reports `(*.txt` or
    `*.xml`), by default, under the `${basedir}/target/surefire-reports` location.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: maven-surefire-plugin也是一个Maven核心插件，只有一个目标：`surefire:test`。这是作为默认生命周期（测试阶段）的一部分调用，用于运行应用程序中定义的单元测试。默认情况下，它会在`${basedir}/target/surefire-reports`位置生成报告（*.txt或*.xml）。
- en: The Maven enforcer plugin
  id: totrans-539
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Maven强制执行插件
- en: 'The maven-enforcer-plugin is very useful to define environmental conditions
    as *critical* for the project. It has two goals: `enforcer:enforce` (bound, by
    default, to the validate phase, where it executes each defined rule once per module)
    and `enforcer:display-info` (it displays the detected information on execution
    of the rules).'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: maven-enforcer-plugin非常有用，可以定义项目的环境条件为*关键*。它有两个目标：`enforcer:enforce`（默认绑定到验证阶段，在该阶段执行每个模块的每个定义规则一次）和`enforcer:display-info`（它在执行规则时显示检测到的信息）。
- en: 'The most interesting standard rule is probably `DependencyConvergence`: it
    analyzes all the used dependencies (direct and transitive) for us. In case of
    divergence of a version, it highlights it and stops the build. When we face this
    kind of conflict, it is amazingly easy to decide between the following:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的标准规则可能是`DependencyConvergence`：它为我们分析所有使用的依赖关系（直接和传递）。如果版本发生分歧，它会将其突出显示并停止构建。当我们面对这种冲突时，很容易在以下之间做出决定：
- en: Excluding the lowest version from the classpath
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从类路径中排除最低版本
- en: Not upgrading the dependency
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不升级依赖
- en: We also quickly talked about the `<pluginManagement>` section, which was associated
    to the maven-enforcer-plugin. In this case, this is because m2eclipse doesn't
    support this plugin. Thus, to avoid a warning in Eclipse, it is necessary to add
    this section so that m2eclipse skips the enforce goal.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还简要讨论了与maven-enforcer-plugin相关联的`<pluginManagement>`部分。在这种情况下，这是因为m2eclipse不支持这个插件。因此，为了避免在Eclipse中出现警告，有必要添加这个部分，以便m2eclipse跳过强制执行目标。
- en: The Maven war plugin
  id: totrans-545
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Maven war插件
- en: Using the maven-war-plugin, we redefined in our web POMs. We have again overridden
    the default behavior of this plugin that is used to package web modules. This
    is definitely necessary if you have a non-Maven standard project structure.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 使用maven-war-plugin，我们在我们的web POMs中重新定义。我们再次覆盖了这个用于打包web模块的插件的默认行为。如果您有非Maven标准项目结构，这绝对是必要的。
- en: We may want to package our web resources in a different way that how it is organized
    in our IDE. We may need, for some reason, to exclude some resources from the war
    packaging or we may even want to give a name to the built war so that it can be
    used by the servlet container that matches a specific context path in the application
    URLs `(/api`, `/app`, and so on). Filtering, moving web resources around, and
    managing the generated war is the purpose of this plugin.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望以与IDE中组织方式不同的方式打包我们的Web资源。出于某种原因，我们可能需要从war包中排除一些资源，或者甚至希望为构建的war包命名，以便它可以被与应用程序URL中的特定上下文路径匹配的servlet容器使用（/api，/app等）。过滤、移动Web资源以及管理生成的war是这个插件的目的。
- en: Tip
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By default, the web resources are copied to the WAR root. To override the default
    destination directory, specify the target path `*`.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Web资源会被复制到WAR根目录。要覆盖默认目标目录，请指定目标路径`*`。
- en: There's more...
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This has been quite a broad overview about concepts that naturally require
    deeper interest:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当广泛的概述，涉及到自然需要更深入了解的概念：
- en: 'About the way Maven manages its dependencies, we would suggest you to go through
    the Maven documentation on this topic at:'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Maven管理其依赖项的方式，我们建议您阅读有关此主题的Maven文档：
- en: '[http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)'
- en: 'The Sonatype ebook talks nicely about Maven properties. You can find this ebook
    at: [https://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html#resource-filtering-sect-settings-properties](https://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html#resource-filtering-sect-settings-properties)'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sonatype的电子书很好地介绍了Maven属性。您可以在以下网址找到这本电子书：[https://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html#resource-filtering-sect-settings-properties](https://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html#resource-filtering-sect-settings-properties)
- en: 'The Maven model API documentation can again be found at:'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven模型API文档也可以在以下网址找到：
- en: '[http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html](http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html)'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html](http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html)'
- en: 'Concerning the servlet 3.0 specification that we mentioned earlier, more information
    can be found about the `web.xml` file definition and about the structure of a
    WebArchive at: [http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf](http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf)'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于我们之前提到的servlet 3.0规范，可以在以下网址找到有关`web.xml`文件定义以及WebArchive结构的更多信息：[http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf](http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf)
- en: Finally, for more information about Maven plugins; we absolutely recommend you
    visit the Maven listing at [http://maven.apache.org/plugins](http://maven.apache.org/plugins)
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，有关Maven插件的更多信息；我们强烈建议您访问Maven列表：[http://maven.apache.org/plugins](http://maven.apache.org/plugins)
- en: See also
  id: totrans-559
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另外
- en: 'The [spring.io](http://spring.io) website from Pivotal, and especially the
    Spring Framework overview page, can also refresh, or introduce a few key concepts.
    Follow the address: [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html)'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pivotal的[spring.io](http://spring.io)网站，特别是Spring Framework概述页面，也可以更新或介绍一些关键概念。请访问以下网址：[http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html)
- en: The Maven checkstyle plugin
  id: totrans-561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Maven checkstyle插件
- en: One other interesting enough plugin which could also be highlighted here is
    the maven-checkstyle-plugin. When a team is growing, we sometimes need to guarantee
    the maintenance of certain development practices or we may need to maintain specific
    security-related coding practices. Like the maven-enforcer-plugin, the maven-checkstyle-plugin
    makes our builds assertive against this type of violation.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的插件是maven-checkstyle-plugin。当团队在壮大时，我们有时需要保证某些开发实践的维护，或者我们可能需要维护特定的与安全相关的编码实践。像maven-enforcer-plugin一样，maven-checkstyle-plugin使我们的构建对这种类型的违规行为进行断言。
- en: 'Find out more about this plugin, again in the Maven documentation, at: [http://maven.apache.org/plugins/maven-checkstyle-plugin](http://maven.apache.org/plugins/maven-checkstyle-plugin).'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maven文档中再了解有关此插件的更多信息：[http://maven.apache.org/plugins/maven-checkstyle-plugin](http://maven.apache.org/plugins/maven-checkstyle-plugin)。
- en: Chapter 2. Designing a Microservice Architecture with Spring MVC
  id: totrans-564
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用Spring MVC设计微服务架构
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: Configuring a controller with simple URL mapping
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置一个具有简单URL映射的控制器
- en: Configuring a fallback controller using the ViewResolver
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ViewResolver配置回退控制器
- en: Setting up and customizing a responsive single page webdesign with Bootstrap
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap设置和自定义响应式单页Web设计
- en: Displaying a model in the View using the JSTL
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSTL在视图中显示模型
- en: Defining a common WebContentInterceptor
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个常见的WebContentInterceptor
- en: Designing a client-side MVC pattern with AngularJS
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AngularJS设计客户端MVC模式
- en: Introduction
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: You need to complete the first chapter before starting this new one. The first
    chapter installs the basics for the trading platform we are building. It also
    creates a modular toolkit that every recipe will be using.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始这一新章节之前，您需要完成第一章。第一章安装了我们正在构建的交易平台的基础。它还创建了一个模块化工具包，每个配方都将使用。
- en: This second chapter sets the product on an acceleration ramp. It will shape
    the whole chain of responsibilities and draft the big picture of the Microservice
    architecture. Once more, we will establish a necessary structure for the chapters
    to come, but on another level.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 这第二章将产品放在加速坡道上。它将塑造整个责任链，并勾勒出微服务架构的大局。我们将再次为即将到来的章节建立必要的结构，但在另一个层面上。
- en: The User eXperience paradigm
  id: totrans-575
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户体验范式
- en: For a couple of years now, we've assisted an amazingly active frontend revolution.
    Since the rise of HTML 5 and CSS3, with the common development platforms for mobile
    (iOS, Android, and so on), and with the amount of connected devices, so many doors
    and opportunities have been opened to the developer communities. The frequency
    of new JavaScript libraries popping-up in the open source field has made it quite
    difficult to follow.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我们一直在协助一个非常活跃的前端革命。自从HTML 5和CSS3的兴起，以及移动开发平台（iOS，Android等）的普及，再加上连接设备的数量增加，为开发者社区打开了许多门和机会。在开源领域中不断涌现的新JavaScript库的频率使其难以跟随。
- en: But it's a revolution for good! It targets the customer and user experience.
    The customer nowadays wants to interact with a brand or a product from the desktop,
    laptop, TV, tablet, mobile, and soon the car. Network connection speeds vary as
    well from more than 150 megabytes per second to very few bytes per second. The
    customer can also expect offline features or at least a decent user experience.
    It's obvious that new challenges have come out of this complexity to improve the
    user experience.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是一场革命！它针对的是客户和用户体验。如今的客户希望能够从台式机、笔记本电脑、电视、平板电脑、手机，甚至是汽车上与品牌或产品进行互动。网络连接速度也各不相同，从每秒超过150兆字节到很少的字节。客户还可以期待离线功能，或者至少是一个体验良好的用户体验。显然，由于这种复杂性，出现了新的挑战，以改善用户体验。
- en: As our reachability through different means has largely increased, our level
    of exposure to spam, direct solicitations, advertising, and marketing in general
    has never been higher. Interestingly, we are now far more sensitive and assertive
    to every single message that retains our attention online. As it takes us a fraction
    of second to decide whether something is worth it or not, we reject a poor design
    for the same reason. We are more demanding and saturated targets, and every brand
    has to follow the latest UX standards to make us interact with them.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们通过不同方式的可及性大大增加，我们对垃圾邮件、直接招揽、广告以及一般营销的暴露程度从未如此之高。有趣的是，我们现在对每一条保持我们在线注意力的消息都更加敏感和自信。因为我们只需要一小部分时间就能决定某件事是否值得，所以我们也因为同样的原因拒绝了糟糕的设计。我们更加苛刻和饱和的目标，每个品牌都必须遵循最新的用户体验标准，以便我们与他们互动。
- en: Microservice architectures
  id: totrans-579
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务架构
- en: We have seen already the massive benefits in terms of communication, image,
    and development that Internet organizations have generated by opening their APIs
    to the public (Facebook, Twitter, Amazon, and so on). Such radical changes in
    IT infrastructures are now becoming the norm for smaller companies and start-ups.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，通过向公众开放其API（Facebook，Twitter，亚马逊等），互联网组织在沟通、形象和发展方面所产生的巨大好处。这种对IT基础设施的根本性变化现在正在成为中小企业和初创公司的常态。
- en: 'Modern architectures provide documented Public APIs and device-specific installation
    packages for their clients: mobile apps or responsive HTML contents delivered
    under specific shots. REST APIs are also a navigable dimension for more autonomous
    modules of the **Internet of** **Things** (**IoT**).'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 现代架构为其客户提供了有文档的公共API和特定设备的安装包：移动应用程序或响应式HTML内容以特定的快照交付。REST API也是**物联网**（**IoT**）更自主模块的可导航维度。
- en: Maybe the main concern remains how to handle the load on the server side, but
    more computation is transferred to client devices and REST architectures are by
    definition stateless and consequently a good support for scalability.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 也许主要问题仍然是如何处理服务器端的负载，但更多的计算被转移到客户端设备上，而REST架构从定义上是无状态的，因此对可扩展性有很好的支持。
- en: Configuring a controller with simple URL mapping
  id: totrans-583
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置一个具有简单URL映射的控制器
- en: This recipe introduces the Spring MVC controller with its simplest implementation.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方介绍了Spring MVC控制器及其最简单的实现方式。
- en: Getting ready
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will discover later on, and especially in [Chapter 3](part0091.xhtml#aid-2MP361
    "Chapter 3. Working with Java Persistence and Entities"), *Working with Java Persistence
    and Entities,* that Spring MVC is a great tool to build a REST API. Here, we will
    focus on how to create a controller that prints some content in the response.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以后发现，特别是在[第3章](part0091.xhtml#aid-2MP361 "第3章。使用Java持久性和实体")中，*使用Java持久性和实体*，Spring
    MVC是构建REST API的强大工具。在这里，我们将专注于如何创建一个控制器，以在响应中打印一些内容。
- en: Starting with this recipe, we will be using GIT to follow each iteration that
    has been made to develop the `cloudstreetmarket` application. After the initial
    setup, you will appreciate how smoothly you can upgrade.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个配方开始，我们将使用GIT来跟踪对`cloudstreetmarket`应用程序所做的每次迭代。在初始设置之后，您将欣赏到您可以顺利升级的流畅性。
- en: How to do it...
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe comes with two initial sections for installing and configuring GIT.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方有两个初始部分，用于安装和配置GIT。
- en: Downloading and installing GIT
  id: totrans-590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载和安装GIT
- en: To download GIT, go to the GIT download page at [https://git-scm.com/download](https://git-scm.com/download).
    Select the right product corresponding to your environment (Mac OS X, Windows,
    Linux, or Solaris).
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载GIT，请转到GIT下载页面[https://git-scm.com/download](https://git-scm.com/download)。选择与您的环境相对应的正确产品（Mac
    OS X，Windows，Linux或Solaris）。
- en: To install GIT for Linux and Solaris, execute the suggested installation commands
    using the system's native package manager.
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux和Solaris上安装GIT，请使用系统的本机软件包管理器执行建议的安装命令。
- en: For Mac OS X, double-click on the downloaded `dmg` file to extract the package
    on your hard drive. Navigate to the extracted directory and double-click on the
    `pkg` file. Select all the default options, one step after an other, up to the
    **Successful Installation** screen. Close the screen.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac OS X，双击下载的`dmg`文件以在硬盘上提取包。转到提取的目录，双击`pkg`文件。选择所有默认选项，一步一步进行，直到**成功安装**屏幕。关闭屏幕。
- en: 'For Windows, execute the downloaded program and follow the default options
    for every step up to these screens:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，执行下载的程序，并按默认选项进行每一步，直到这些屏幕：
- en: '**Adjusting your PATH environment**: Select the **Use Git from the Windows
    Command Prompt** option'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整您的PATH环境**：选择**从Windows命令提示符使用Git**选项'
- en: '**Choosing the SSH executable**: Select the **Use OpenSSH** option'
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择SSH可执行文件**：选择**使用OpenSSH**选项'
- en: '**Configuring the line endings conversions**: Select the **Checkout Windows-style**
    and **commit Unix-style line endings** options'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置行结束转换：选择**检出 Windows 样式**和**提交 Unix 样式行结束**选项
- en: '**Configuring the terminal emulator to use Git Bash**: Select **Use Windows''
    default console window**'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置终端仿真器使用Git Bash**：选择**使用Windows默认控制台窗口**'
- en: '**Configuring experimental performance tweaks**: Don''t tick the **Enable file
    system caching** checkbox'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置实验性能调整**：不要勾选**启用文件系统缓存**复选框'
- en: Let the installation finish and click on the **Finish** button.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 让安装完成，然后单击**完成**按钮。
- en: 'For verification, open your terminal and enter the following command:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 验证时，打开终端并输入以下命令：
- en: '[PRE15]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command should display the installed version. The presented installation
    guidelines were associated with `GIT 2.6.3`.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应显示已安装的版本。所呈现的安装指南与`GIT 2.6.3`相关。
- en: Configuring GIT in Eclipse
  id: totrans-604
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Eclipse中配置GIT
- en: 'We will first initialize the local repository from the terminal. Go to your
    workspace location: `cd <home-directory>/workspace`.'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从终端初始化本地存储库。转到您的工作空间位置：`cd <home-directory>/workspace`。
- en: Replace `<home-directory>` with your own home path.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 用您自己的主目录路径替换`<home-directory>`。
- en: 'Enter the following command to create a local Git repository at this location:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令在此位置创建本地Git存储库：
- en: '[PRE16]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Enter the following command:'
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE17]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, enter the `git fetch` command.
  id: totrans-611
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入`git fetch`命令。
- en: Select both your parent projects and right-click on one of them. Go to **Team**
    | **Add to index**:![Configuring GIT in Eclipse](img/image00812.jpeg)
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的父项目并右键单击其中一个。转到**Team** | **Add to index**：![在Eclipse中配置GIT](img/image00812.jpeg)
- en: From the top-right panel, click on the **Git** **perspective**:![Configuring
    GIT in Eclipse](img/image00813.jpeg)
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右上角面板，单击**Git** **透视图**：![在Eclipse中配置GIT](img/image00813.jpeg)
- en: Add this perspective with the ![Configuring GIT in Eclipse](img/image00814.jpeg)
    button if you don't have it yet.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未拥有，请使用![在Eclipse中配置GIT](img/image00814.jpeg)按钮添加此透视图。
- en: From the left hierarchy (the **Git** perspective), select **Add an existing
    local Git repository**.
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧层次结构（**Git**透视图）中，选择**添加现有的本地Git存储库**。
- en: A contextual window opens. Target the location of the local Git repository we
    just created (it should be the current workspace directory).
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个上下文窗口打开。定位到我们刚创建的本地Git存储库的位置（应该是当前工作空间目录）。
- en: A new repository should now appear in **Git** perspective.
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Git**透视图中现在应该出现一个新的存储库。'
- en: As shown in the following screenshot, right-click and select **Checkout** to
    see the latest version of the branch **origin/v1.x.x**.![Configuring GIT in Eclipse](img/image00815.jpeg)
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，右键单击并选择**Checkout**以查看分支**origin/v1.x.x**的最新版本。![在Eclipse中配置GIT](img/image00815.jpeg)
- en: When prompted, Checkout as **New Local Branch**:![Configuring GIT in Eclipse](img/image00816.jpeg)
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提示时，检出为**新的本地分支**：![在Eclipse中配置GIT](img/image00816.jpeg)
- en: The actual workspace should now be synchronized with the branch v1.x.x. This
    branch reflects the state of the environment at the end of [Chapter 1](part0079.xhtml#aid-2BASE1
    "Chapter 1. Setup Routine for an Enterprise Spring Application"), Setup *Routine
    for an Enterprise Spring Application.*![Configuring GIT in Eclipse](img/image00817.jpeg)
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际工作空间现在应该与分支 v1.x.x 同步。该分支反映了[第1章](part0079.xhtml#aid-2BASE1 "第1章。企业Spring应用程序的设置例程")结束时环境的状态，设置*企业Spring应用程序的例程*。![在Eclipse中配置GIT](img/image00817.jpeg)
- en: Right-click on **zipcloud-parent** to execute **Run as | Maven clean** and **Run
    as | Maven install**. Then, do the same operation on `cloudstreetmarket-parent`.
    You will observe `BUILD SUCCESS` each time.
  id: totrans-621
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**zipcloud-parent**执行**Run as | Maven clean**和**Run as | Maven install**。然后在`cloudstreetmarket-parent`上执行相同的操作。每次都会观察到`BUILD
    SUCCESS`。
- en: Finally, right-click on one project and go to **Maven** | **Update Project**.
    Select all the projects of the workspace and click on **OK**.
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，右键单击一个项目，转到**Maven** | **Update Project**。选择工作空间的所有项目，然后单击**确定**。
- en: If you still have a red warning in one of your projects (as shown in the previous
    screenshot), you will probably have to reattach a target runtime environment to
    **cloudstreetmarket-api** and **cloustreetmarket-webapp** (as per [Chapter 1 ,](part0012.xhtml#aid-BE6O1
    "Chapter 1. Getting Started with Spring Core") *Setup Routine for an Enterprise
    Spring Application*, *2nd recipe, 7th step*).
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的一个项目仍然显示红色警告（如前一个截图所示），您可能需要重新附加目标运行时环境到**cloudstreetmarket-api**和**cloustreetmarket-webapp**（根据[第1章](part0012.xhtml#aid-BE6O1
    "第1章。Spring Core入门")*企业Spring应用程序的设置例程*，*第2个配方，第7步*）。
- en: 'From the terminal, go to the local GIT repository:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端，转到本地GIT存储库：
- en: '[PRE18]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Enter the following command:'
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE19]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Reiterate steps 13 and 14\. (Be prepared to repeat these two steps every time
    after pulling new changes.)
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤13和14。（准备在拉取新更改后每次重复这两个步骤。）
- en: 'In the **cloudstreetmarket-webapp** module, a new package is now present:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-webapp**模块中，现在出现了一个新的包：
- en: '[PRE20]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Inside this package, an `InfoTagController` class has been created:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个包中，创建了一个`InfoTagController`类：
- en: '[PRE21]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Make sure the two `wars` are deployed in the Tomcat server. Start the Tomcat
    server and access the `http://localhost:8080/portal/info/helloHandler` URL with
    your browser.
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保两个`war`文件部署在Tomcat服务器中。启动Tomcat服务器并使用浏览器访问`http://localhost:8080/portal/info/helloHandler`
    URL。
- en: Note
  id: totrans-634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should see a simple hello displayed as HTML content*.*
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个简单的hello显示为HTML内容*。*
- en: 'In the `cloudstreetmarket-webapp/src/main/webapp/WEB-INF/dispatcher-context.xml`
    file, the following bean definition is added:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-webapp/src/main/webapp/WEB-INF/dispatcher-context.xml`文件中，添加了以下bean定义：
- en: '[PRE22]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following method and members in the `InfoTagController` class are also
    added:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`InfoTagController`类中的以下方法和成员也被添加：'
- en: '[PRE23]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, access the `http://localhost:8080/portal/info/server` URL with your browser.
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用浏览器访问`http://localhost:8080/portal/info/server` URL。
- en: Note
  id: totrans-641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You should see the following content rendered as an HTML document:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下内容呈现为HTML文档：
- en: '[PRE24]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-644
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are going to draft an overview of Spring MVC as a Framework. We will then
    review how a Controller is configured from the `DispatcherServlet`, the controller-level
    annotations, and from the method-handler signatures.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将草拟Spring MVC作为一个框架的概述。然后我们将审查如何从`DispatcherServlet`配置控制器，控制器级别的注解，以及从方法处理程序签名。
- en: Spring MVC overview
  id: totrans-646
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring MVC概述
- en: 'Spring MVC implements two common design patterns: the front controller design
    pattern and the MVC design pattern.'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC实现了两种常见的设计模式：前端控制器设计模式和MVC设计模式。
- en: Front controller
  id: totrans-648
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 前端控制器
- en: A system designed as a Front controller exposes a single entry point for all
    incoming requests. In Java Web environments, this entry point is usually a servlet—a
    unique servlet that dispatches and delegates to other components.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前端控制器设计的系统为所有传入的请求公开了一个单一的入口点。在Java Web环境中，这个入口点通常是一个servlet——一个唯一的servlet，用于分发和委派给其他组件。
- en: Note
  id: totrans-650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the case of Spring MVC, this unique servlet is the `DispatcherServlet`.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC的情况下，这个唯一的servlet就是`DispatcherServlet`。
- en: Servlets are standards in the Java web. They are associated to predefined URL
    paths and are registered in deployment descriptors (the `web.xml` files). Parsing
    deployment descriptors, the servlet-container (such as Apache Tomcat) identifies
    the declared servlets and their URL mapping. At runtime, the servlet-container
    intercepts every HTTP client request and creates a new Thread for each one of
    them. Those Threads will call the matching relevant servlets with Java-converted
    request and response objects.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: Servlet在Java Web中是标准。它们与预定义的URL路径相关联，并在部署描述符（`web.xml`文件）中注册。解析部署描述符时，servlet容器（如Apache
    Tomcat）识别声明的servlet及其URL映射。在运行时，servlet容器拦截每个HTTP客户端请求，并为每个请求创建一个新的线程。这些线程将使用Java转换的请求和响应对象调用匹配的相关servlet。
- en: MVC design pattern
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MVC设计模式
- en: 'The MVC design pattern is more of an architectural style. It describes the
    application as a whole. It encourages a clear separation of concerns between three
    different layers that the request thread has to pass through: the **Model**, the
    **View**, and the **Controller**—the Controller, the Model, and then the View
    to be accurate.'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: MVC设计模式更多地是一种架构风格。它描述了整个应用程序。它鼓励在请求线程必须通过的三个不同层之间清晰地分离关注：**模型**，**视图**和**控制器**——控制器，模型，然后是视图。
- en: '![MVC design pattern](img/image00818.jpeg)'
  id: totrans-655
  prefs: []
  type: TYPE_IMG
  zh: '![MVC设计模式](img/image00818.jpeg)'
- en: When a client request is intercepted by the servlet-container, it is routed
    to the `DispatcherServlet`. The `DispatcherServlet` sends the request to one Controller
    (one controller method-handler), which has a configuration matching the request
    state (if a match is found).
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个客户端请求被servlet容器拦截时，它被路由到`DispatcherServlet`。`DispatcherServlet`将请求发送到一个控制器（一个控制器方法处理程序），该控制器具有与请求状态匹配的配置（如果找到匹配）。
- en: The Controller orchestrates the business logic, the model generation and ultimately
    chooses a View for the model and the response. In this perspective, the model
    represents a populated data structure handled by the controller and given to the
    view for visualization purposes.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器协调业务逻辑，模型生成，并最终选择一个视图用于模型和响应。从这个角度来看，模型代表了由控制器处理并提供给视图进行可视化的填充数据结构。
- en: But the three components (Model, View, and Controller) can also be visualized
    at a Macro scale as independent static layers. Each of these components is a layer
    and a placeholder for every individual constituent, part of the category. The
    **Controller layer** contains all the registered controllers as well as the Web
    Interceptors and converters; the Model generation layer (and Business logic layer)
    contains the business services and data access components. The View layer encloses
    the templates (JSPs for example) and other web client-side components.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这三个组件（模型、视图和控制器）也可以在宏观尺度上被视为独立的静态层。每个组件都是一个层，也是每个独立组成部分的占位符，属于该类别的一部分。**控制器层**包含所有注册的控制器以及Web拦截器和转换器；模型生成层（和业务逻辑层）包含业务服务和数据访问组件。视图层包含模板（例如JSP）和其他Web客户端组件。
- en: Spring MVC flow
  id: totrans-659
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring MVC流程
- en: 'The Spring MVC flow can be represented with the following diagram:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC流程可以用以下图表表示：
- en: '![Spring MVC flow](img/image00819.jpeg)'
  id: totrans-661
  prefs: []
  type: TYPE_IMG
  zh: '![Spring MVC流程](img/image00819.jpeg)'
- en: We previously mentioned that Spring MVC implements a front controller pattern.
    The entry point is the `DispatcherServlet`. This `DispatcherServlet` relies on
    a `HandlerMapping` implementation. With different strategies and specificities,
    the `HandlerMapping` resolves a Controller method-handler for the request.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到Spring MVC实现了前端控制器模式。入口点是`DispatcherServlet`。这个`DispatcherServlet`依赖于`HandlerMapping`的实现。使用不同的策略和特定性，`HandlerMapping`解析请求的控制器方法处理程序。
- en: Once the `DispatcherServlet` has a Controller method-handler, it dispatches
    the request to it. The method-handler returns a View name (or directly the View
    itself) and also the populated model object to the `DispatcherServlet`.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`DispatcherServlet`有了一个控制器方法处理程序，它就会将请求分派给它。方法处理程序返回一个视图名称（或直接返回视图本身），还返回填充的模型对象给`DispatcherServlet`。
- en: With a View name, the `DispatcherServlet` asks a `ViewResolver` implementation
    to find and select a View.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视图名称，“DispatcherServlet”要求“ViewResolver”实现查找并选择视图。
- en: With the request, a View, and a Model, the `DispatcherServlet` has everything
    to build the client response. The view is processed with all these elements and
    the response is finally returned to the servlet-container.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 有了请求，视图和模型，“DispatcherServlet”就有了构建客户端响应的一切。视图使用所有这些元素进行处理，最终将响应返回给servlet容器。
- en: DispatcherServlet – the Spring MVC entrypoint
  id: totrans-666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DispatcherServlet- Spring MVC入口点
- en: As explained, the `DispatcherServlet` is quite a central piece in Spring MVC.
    It intercepts the client requests that target predefined URL paths for the application.
    It maps them to handlers that belong to business logic operators (Controllers,
    Interceptors, Filters, and so on). It also provides a set of tools, available
    as beans for solving recurring web development issues and techniques such as serving
    a centralized and modular View layer, handling internationalisation, themes, handing
    exceptions, and so on.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所解释的，“DispatcherServlet”在Spring MVC中是一个非常核心的部分。它拦截针对应用程序的预定义URL路径的客户端请求。它将它们映射到属于业务逻辑运算符（控制器，拦截器，过滤器等）的处理程序。它还提供一组工具，可用作bean来解决重复的Web开发问题和技术，例如提供集中和模块化的视图层，处理国际化，主题，处理异常等。
- en: 'Before everything, the `DispatcherServlet` is a servlet and is defined as such
    in the `web.xml` file with a servlet configuration and its servlet-mapping. The
    code is as follows:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 在一切之前，“DispatcherServlet”是一个servlet，并且在“web.xml”文件中以servlet配置和servlet映射的形式进行定义。
    代码如下：
- en: '[PRE25]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In our application, in the **cloudstreetmarket-webapp**, the `DispatcherServlet`
    is named spring and covers the full context-path of the application: `/*`.'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，在**cloudstreetmarket-webapp**中，“DispatcherServlet”被命名为spring，并覆盖了应用程序的完整上下文路径：`/*`。
- en: We have already seen that each `DispatcherServlet` has a restricted-scope `WebApplicationContext`
    that inherits the beans from the root `ApplicationContext`.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到每个“DispatcherServlet”都有一个受限范围的“WebApplicationContext”，它从根“ApplicationContext”继承bean。
- en: 'By default, for the `WebApplicationContext`, Spring MVC looks in the `/WEB-INF`
    directory for a configuration file named `{servletName}-servlet.xml`. We have,
    however, overridden this default name and location through the initialization
    parameter `contextConfigLocation`:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对于“WebApplicationContext”，Spring MVC在“/WEB-INF”目录中查找名为“{servletName}-servlet.xml”的配置文件。但是，我们通过初始化参数“contextConfigLocation”覆盖了此默认名称和位置：
- en: '[PRE26]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Still in the `web.xml`, you can see that the root application context (`classpath*:/META-INF/spring/*-config.xml`)
    starts with the `ContextLoaderListener`:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 在“web.xml”中，您可以看到根应用程序上下文（`classpath*:/META-INF/spring/*-config.xml`）以“ContextLoaderListener”开头：
- en: '[PRE27]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Annotation-defined controllers
  id: totrans-676
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 由注解定义的控制器
- en: Spring MVC controllers are the place where client requests really start to be
    processed by the business-specific code. Since *Spring 2.5*, we have been able
    to use annotations on controllers so we don't have to explicitly declare them
    as beans in configuration. This makes their implementation much easier to extend
    and understand.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC控制器是客户端请求真正开始由特定于业务的代码处理的地方。自*Spring 2.5*以来，我们已经能够在控制器上使用注解，因此我们不必在配置中显式声明它们为bean。这使得它们的实现更容易扩展和理解。
- en: '@Controller'
  id: totrans-678
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '@Controller'
- en: 'A `@Controller` annotation tags a class as a Web controller. It remains a Spring
    Stereotype for presentation layers. The main purpose of defining a Spring Stereotype
    is to make a target type or method discoverable during the Spring classpath scanning
    which is activated by package with the following command:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: “@Controller”注解标记一个类为Web控制器。它仍然是用于表示层的Spring Stereotype。定义Spring Stereotype的主要目的是使目标类型或方法在Spring类路径扫描期间可发现，该扫描由以下命令激活：
- en: '[PRE28]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There is not much custom logic related to this annotation. We could run a Controller
    with other Stereotype annotations (`@Component` or `@Service`) if we don't bother
    making the application a cleaner place.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 与此注解相关的自定义逻辑并不多。如果我们不介意使应用程序变得更清洁，我们可以使用其他Stereotype注解（`@Component`或`@Service`）运行控制器。
- en: '@RequestMapping'
  id: totrans-682
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '@RequestMapping'
- en: The `@RequestMapping` annotations define handlers onto Controller classes and/or
    onto controller methods. These annotations are looked-up among stereotyped classes
    by the `DispatcherServlet`. The main idea behind the `@RequestMapping` annotations
    is to define a primary path mapping on the class-level and to narrow HTTP request
    methods, headers, parameters, and media-types on the methods.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: “@RequestMapping”注解将处理程序定义到控制器类和/或控制器方法上。这些注解在“DispatcherServlet”中在构造类中进行查找。
    “@RequestMapping”注解背后的主要思想是在类级别上定义主要路径映射，并在方法上缩小HTTP请求方法，标头，参数和媒体类型。
- en: To implement this narrowing, the `@RequestMapping` annotation accepts comma-separated
    parameters within parentheses.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种缩小，“@RequestMapping”注解在括号内接受逗号分隔的参数。
- en: 'Consider the following example:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE29]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Available parameters for `@RequestMapping` are summarized in the following
    table:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: “@RequestMapping”可用参数总结在以下表中：
- en: '| Parameter and type | Use/description (from JavaDoc) |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '|参数和类型|使用/描述（来自JavaDoc）|'
- en: '| --- | --- |'
  id: totrans-689
  prefs: []
  type: TYPE_TB
  zh: '|---|---|'
- en: '| `name (String)` | Assign a name to the mapping. |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: '|`name（String）`|为映射分配一个名称。|'
- en: '| `value (String[])` | The path mapping URIs (for example, `/myPath.do`). Ant-style
    path patterns are also supported (for example, `/myPath/*.do`). |'
  id: totrans-691
  prefs: []
  type: TYPE_TB
  zh: '|`value（String[]）`|路径映射URI（例如，`/myPath.do`）。还支持Ant样式路径模式（例如，`/myPath/*.do`）。'
- en: '| Path mapping URIs may contain placeholders (for example, `/${connect}`) against
    local properties and/or system properties and environment variables. |'
  id: totrans-692
  prefs: []
  type: TYPE_TB
  zh: 路径映射URI可能包含占位符（例如，`/${connect}`）针对本地属性和/或系统属性和环境变量。
- en: '| A path implements URI templates that give access to selected parts of a URL
    through patterns, variables, placeholders, and matrix variables (see section URI
    Templates). |'
  id: totrans-693
  prefs: []
  type: TYPE_TB
  zh: '|路径实现URI模板，通过模式，变量，占位符和矩阵变量（请参阅URI模板部分）访问URL的选定部分。|'
- en: '| At the method level, relative paths (for example, `edit.do`) are supported
    within the primary mapping expressed at the type level. |'
  id: totrans-694
  prefs: []
  type: TYPE_TB
  zh: '| 在方法级别，主映射中支持相对路径（例如，`edit.do`）。 |'
- en: '| `method``(RequestMethod[])` | GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE,
    TRACE. |'
  id: totrans-695
  prefs: []
  type: TYPE_TB
  zh: '| `method``(RequestMethod[])` | GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE。
    |'
- en: '| `params (String[])` | A sequence of `myParam=myValue` style expressions.
    |'
  id: totrans-696
  prefs: []
  type: TYPE_TB
  zh: '| `params (String[])` | 一系列`myParam=myValue`风格的表达式。 |'
- en: '| Expressions can be negated using the `!=` operator,as in `myParam!=myValue`.
    |'
  id: totrans-697
  prefs: []
  type: TYPE_TB
  zh: '| 表达式可以使用`!=`运算符否定，如`myParam!=myValue`。 |'
- en: '| `headers (String[])` | A sequence of `My-Header=myValue` style expressions.
    |'
  id: totrans-698
  prefs: []
  type: TYPE_TB
  zh: '| `headers (String[])` | 一系列`My-Header=myValue`风格的表达式。 |'
- en: '| Specifying only the header name (for example, `My-Header`) is supported (allowed
    to have any value). |'
  id: totrans-699
  prefs: []
  type: TYPE_TB
  zh: '| 仅指定标题名称（例如，`My-Header`）是受支持的（允许具有任何值）。 |'
- en: '| Negating a header name (for example, "!My-Header") is also supported (the
    specified header is not supposed to be present in the request). |'
  id: totrans-700
  prefs: []
  type: TYPE_TB
  zh: '| 也支持否定标题名称（例如，`!My-Header`）（指定的标题不应出现在请求中）。 |'
- en: '| Also supports media type wildcards (`*`), for headers such as Accept and
    Content-Type. |'
  id: totrans-701
  prefs: []
  type: TYPE_TB
  zh: '| 还支持媒体类型通配符（`*`），用于`Accept`和`Content-Type`等标题。 |'
- en: '| `consumes (String[])` | The consumable media types of the mapped request.
    |'
  id: totrans-702
  prefs: []
  type: TYPE_TB
  zh: '| `consumes (String[])` | 映射请求的可消耗媒体类型。 |'
- en: '| Only mapped if the `{@code Content-Type}` matches one of these media types.
    |'
  id: totrans-703
  prefs: []
  type: TYPE_TB
  zh: '| 仅在`{@code Content-Type}`匹配这些媒体类型之一时映射。 |'
- en: '| Negating an expression (for example, `!text/xml`) is also supported. |'
  id: totrans-704
  prefs: []
  type: TYPE_TB
  zh: '| 否定表达式（例如，`!text/xml`）也受支持。 |'
- en: '| `produces (String[])` | The producible media types of the mapped request.
    |'
  id: totrans-705
  prefs: []
  type: TYPE_TB
  zh: '| `produces (String[])` | 映射请求的可生产媒体类型。 |'
- en: '| Only mapped if the `{@code Accept}` matches one of these media types. |'
  id: totrans-706
  prefs: []
  type: TYPE_TB
  zh: '| 仅在`{@code Accept}`匹配这些媒体类型之一时映射。 |'
- en: '| Negating an expression (for example, `!text/plain`) is also supported. It
    matches all requests with a `{@code Accept}` other than "text/plain". |'
  id: totrans-707
  prefs: []
  type: TYPE_TB
  zh: '| 否定表达式（例如，`!text/plain`）也受支持。它匹配所有具有`{@code Accept}`不是"text/plain"的请求。 |'
- en: All these parameters can be used both at the type and method level. When used
    at the type level, all method-level parameters inherit the parent-level narrowing.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些参数都可以在类型级别和方法级别使用。在类型级别使用时，所有方法级参数都继承父级缩小。
- en: Controller method-handler signatures
  id: totrans-709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器方法处理程序签名
- en: 'Several constituents make a Controller method-handler. Here''s another example
    of such a handler with Spring MVC:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 多个组成部分构成控制器方法处理程序。以下是Spring MVC中这样一个处理程序的另一个示例：
- en: '[PRE30]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have just talked about how to use the `@RequestMapping` annotation. With
    regard to the method signature, this annotation can only be placed before the
    return-type.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论了如何使用`@RequestMapping`注解。关于方法签名，此注解只能放置在返回类型之前。
- en: Supported method arguments types
  id: totrans-713
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 支持的方法参数类型
- en: 'Declaring specific types of arguments for handler methods can get Spring to
    automatically inject in them references to external objects. Objects related to
    the request lifecycle, the session, or to the application configuration. With
    the benefit of being scoped for the method, those argument types are presented
    in the following table:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 声明处理程序方法的特定类型的参数可以让Spring自动在其中注入对外部对象的引用。这些对象与请求生命周期、会话或应用程序配置相关。由于这些参数类型受方法范围的限制，因此它们在以下表中呈现：
- en: '| Supported arguments | Use/description | Packages |'
  id: totrans-715
  prefs: []
  type: TYPE_TB
  zh: '| 支持的参数 | 使用/描述 | 包 |'
- en: '| --- | --- | --- |'
  id: totrans-716
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `ServletRequest /``HttpServletRequest` | Injects the servlet request/response.
    | `javax.servlet.http.*` |'
  id: totrans-717
  prefs: []
  type: TYPE_TB
  zh: '| `ServletRequest /``HttpServletRequest` | 注入servlet请求/响应。 | `javax.servlet.http.*`
    |'
- en: '| `ServletResponse /``HttpServletResponse` |'
  id: totrans-718
  prefs: []
  type: TYPE_TB
  zh: '| `ServletResponse /``HttpServletResponse` |'
- en: '| `HttpSession` | Injects the HTTP session bound to the servlet request. If
    null, Spring creates a new one.`synchronizeOnSession` must be set on an `AbstractController`
    or in `RequestMappingHandlerAdapter` if sessions should be sharedconcurrently
    across multiple requests. |'
  id: totrans-719
  prefs: []
  type: TYPE_TB
  zh: '| `HttpSession` | 注入绑定到servlet请求的HTTP会话。如果为null，Spring将创建一个新的。如果应该在`AbstractController`或`RequestMappingHandlerAdapter`中共享会话，则必须设置`synchronizeOnSession`。
    |'
- en: '| `WebRequest / NativeWebRequest` | Injects a wrapper for access to request
    parameters and request/session attributes only. | `org.springframework.web.context.request.*`
    |'
  id: totrans-720
  prefs: []
  type: TYPE_TB
  zh: '| `WebRequest / NativeWebRequest` | 注入一个包装器，用于仅访问请求参数和请求/会话属性。 | `org.springframework.web.context.request.*`
    |'
- en: '| `Locale` | Injects the local e of the request using the configured `LocaleResolver`.
    | `java.util.*` |'
  id: totrans-721
  prefs: []
  type: TYPE_TB
  zh: '| `Locale` | 使用配置的`LocaleResolver`注入请求的本地e。 | `java.util.*` |'
- en: '| `InputStream / Reader` | Provides a direct access to the request/response
    payload. | `java.io.*` |'
  id: totrans-722
  prefs: []
  type: TYPE_TB
  zh: '| `InputStream / Reader` | 直接访问请求/响应有效负载。 | `java.io.*` |'
- en: '| `OutputStream / Writer` |'
  id: totrans-723
  prefs: []
  type: TYPE_TB
  zh: '| `OutputStream / Writer` |'
- en: '| `HttpMethod` | Injects the current method of the request. | `org.springframework.http.*`
    |'
  id: totrans-724
  prefs: []
  type: TYPE_TB
  zh: '| `HttpMethod` | 注入请求的当前方法。 | `org.springframework.http.*` |'
- en: '| `Principal` | Using the Spring security context, it injects the authenticated
    account. | `java.security.*` |'
  id: totrans-725
  prefs: []
  type: TYPE_TB
  zh: '`Principal` | 使用Spring安全上下文，它注入了经过身份验证的账户。 | `java.security.*` |'
- en: '| `HttpEntity<?>` | Spring converts and injects the inbound request to a custom
    type using `HttpMessageConverter`. It also provides access to the request headers.
    | `org.springframework.http.*` |'
  id: totrans-726
  prefs: []
  type: TYPE_TB
  zh: '| `HttpEntity<?>` | Spring将入站请求转换并注入到自定义类型中，同时提供对请求头的访问。 | `org.springframework.http.*`
    |'
- en: '| `Map` | Instantiates for us a `BindingAwareModelMap` to be used in the view.
    | `java.util.*` |'
  id: totrans-727
  prefs: []
  type: TYPE_TB
  zh: '| `Map` | 为我们实例化一个`BindingAwareModelMap`，以在视图中使用。 | `java.util.*` |'
- en: '| `Model` | `org.springframework.ui.*` |'
  id: totrans-728
  prefs: []
  type: TYPE_TB
  zh: '| `Model` | `org.springframework.ui.*` |'
- en: '| `ModelMap` |'
  id: totrans-729
  prefs: []
  type: TYPE_TB
  zh: '| `ModelMap` |'
- en: '| `RedirectAttributes` | Injects and repopulates a map of attributes and flash
    attributes maintained over request redirection | `org.springframework.web.servlet.mvc.support.*`
    |'
  id: totrans-730
  prefs: []
  type: TYPE_TB
  zh: '| `RedirectAttributes` | 注入并重新填充在请求重定向期间维护的属性和闪存属性的映射。 | `org.springframework.web.servlet.mvc.support.*`
    |'
- en: '| `Errors` | Injects the validation results of the argument located just before
    in the argument list. | `org.springframework.validation.*` |'
  id: totrans-731
  prefs: []
  type: TYPE_TB
  zh: '| `Errors` | 注入参数列表中紧挨着的参数的验证结果。 | `org.springframework.validation.*` |'
- en: '| `BindingResult` |'
  id: totrans-732
  prefs: []
  type: TYPE_TB
  zh: '| `BindingResult` |'
- en: '| `SessionStatus` | Allows tagging with `setComplete`(Boolean), the completion
    of a session. This method clears the session attributes defined at the type level
    with @SessionAttributes. | `org.springframework.web.bind.support.*` |'
  id: totrans-733
  prefs: []
  type: TYPE_TB
  zh: '| `SessionStatus` | 允许使用`setComplete`(Boolean)标记会话的完成。此方法清除使用@SessionAttributes在类型级别定义的会话属性。
    | `org.springframework.web.bind.support.*` |'
- en: '| `UriComponentsBuilder` | Injects a Spring URL builder UriComponentsBuilder.
    | `org.springframework.web.util.*` |'
  id: totrans-734
  prefs: []
  type: TYPE_TB
  zh: '| `UriComponentsBuilder` | 注入Spring URL构建器UriComponentsBuilder。 | `org.springframework.web.util.*`
    |'
- en: Supported annotations for method arguments
  id: totrans-735
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方法参数的支持注解
- en: A set of native annotations for method-handler arguments has been designed.
    They must be seen as handles that configure the web behavior of controller methods
    in regard to incoming requests or the response yet to be built.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 一组用于方法处理程序参数的本机注解已经被设计出来。它们必须被视为配置控制器方法的Web行为的句柄，以便处理传入的请求或尚未构建的响应。
- en: They identify abstractions for handy Spring MVC functions such as request parameter
    binding, URI path variable binding, injection-to-argument of request payloads,
    HTML form-parameter binding, and so on.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 它们标识了方便的Spring MVC函数的抽象，例如请求参数绑定，URI路径变量绑定，请求有效负载注入到参数，HTML表单参数绑定等。
- en: '| Supported annotation arguments | Use/description | Package |'
  id: totrans-738
  prefs: []
  type: TYPE_TB
  zh: '| 支持的注解参数 | 用途/描述 | 包 |'
- en: '| --- | --- | --- |'
  id: totrans-739
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `@PathVariable` | Injects an URI Template variable into an argument. | `org.springframework.web.bind.annotation.*`
    |'
  id: totrans-740
  prefs: []
  type: TYPE_TB
  zh: '| `@PathVariable` | 将URI模板变量注入到参数中。 | `org.springframework.web.bind.annotation.*`
    |'
- en: '| `@MatrixVariable` | Injects name-value pairs located in URI path segments
    into an argument. |'
  id: totrans-741
  prefs: []
  type: TYPE_TB
  zh: '| `@MatrixVariable` | 将位于URI路径段中的名称-值对注入到参数中。 |'
- en: '| `@RequestParam` | Injects a specific request parameter into an argument.
    |'
  id: totrans-742
  prefs: []
  type: TYPE_TB
  zh: '| `@RequestParam` | 将特定请求参数注入到参数中。 |'
- en: '| `@RequestHeader` | Injects a specific request HTTP Header into an argument.
    |'
  id: totrans-743
  prefs: []
  type: TYPE_TB
  zh: '| `@RequestHeader` | 将特定请求的HTTP标头注入到参数中。 |'
- en: '| `@RequestBody` | Allows direct access to the request payload injecting it
    into an argument. |'
  id: totrans-744
  prefs: []
  type: TYPE_TB
  zh: '| `@RequestBody` | 允许直接访问请求有效负载，并将其注入到参数中。 |'
- en: '| `@RequestPart` | Injects the content of a specific part (meta-data, file-data…)
    of a multipart/form-data encoded request into an argument of the matching type
    (MetaData, MultipartFile…) |'
  id: totrans-745
  prefs: []
  type: TYPE_TB
  zh: '| `@RequestPart` | 将多部分/表单编码请求的特定部分（元数据、文件数据等）的内容注入到匹配类型的参数中（MetaData、MultipartFile等）。
    |'
- en: '| `@ModelAttribute` | Populates automatically an attribute of the Model using
    the URI template.This binding is operated before the method handler processing.
    |'
  id: totrans-746
  prefs: []
  type: TYPE_TB
  zh: '| `@ModelAttribute` | 使用URI模板自动填充模型的属性。此绑定在方法处理程序处理之前操作。 |'
- en: 'These annotations have to be placed just before the method argument to be populated:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注解必须放在要填充的方法参数之前：
- en: '[PRE31]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Supported return Types
  id: totrans-749
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 支持的返回类型
- en: 'Spring MVC, with different possible controller method return Types, allows
    us to specify either the response sent back to the client or the necessary configuration
    for targeting or populating with variables an intermediate View layer. Depending
    upon what we want to do or the actual application state, we have the choice among
    the following:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC，具有不同可能的控制器方法返回类型，允许我们指定要发送回客户端的响应，或者用于定位或填充中间视图层变量的必要配置。根据我们想要做什么或实际应用状态，我们可以在以下选项中进行选择：
- en: '| Supported return Types | Use/description | Packages |'
  id: totrans-751
  prefs: []
  type: TYPE_TB
  zh: '| 支持的返回类型 | 用途/描述 | 包 |'
- en: '| --- | --- | --- |'
  id: totrans-752
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Model` | Spring MVC creates an implementation of the Model Interface for
    the handler method.The Model objects are populated manually within the handler-
    method or with `@ModelAttribute`.The view to render needs to be mapped to the
    request with RequestToViewNameTranslator. | `org.springframework.ui.*` |'
  id: totrans-753
  prefs: []
  type: TYPE_TB
  zh: '| `Model` | Spring MVC为处理程序方法创建模型接口的实现。模型的对象在处理程序方法内部手动填充，或者使用`@ModelAttribute`的帮助。需要使用RequestToViewNameTranslator将要呈现的视图映射到请求。
    | `org.springframework.ui.*` |'
- en: '| `ModelAndView` | A wrapper object for the Model with a View and a view name.
    If a view name is provided, Spring MVC will attempt to resolve the associated
    View. Otherwise, the embedded View is rendered.The Model objects are populated
    manually within the method or with `@ModelAttribute`. |'
  id: totrans-754
  prefs: []
  type: TYPE_TB
  zh: '| `ModelAndView` | 一个包装器对象，包含模型、视图和视图名称。如果提供了视图名称，Spring MVC将尝试解析关联的视图。否则，将呈现嵌入式视图。模型对象在方法内部手动填充，或者使用`@ModelAttribute`。
    |'
- en: '| `Map` | Allows a custom Model implementation.The view to render needs to
    be mapped to the request with `RequestToViewNameTranslator`. | `java.util.*` |'
  id: totrans-755
  prefs: []
  type: TYPE_TB
  zh: '| `Map` | 允许自定义模型实现。需要使用`RequestToViewNameTranslator`将要呈现的视图映射到请求。 | `java.util.*`
    |'
- en: '| `View` | Allows the rendering of a custom View object.Spring MVC creates
    an implementation of the Model interface for the handler method.The objects of
    the model are populated manually within the method or with the help of `@ModelAttribute`.
    | `org.springframework.web.servlet.*` |'
  id: totrans-756
  prefs: []
  type: TYPE_TB
  zh: '| `View` | 允许呈现自定义视图对象。Spring MVC为处理程序方法创建模型接口的实现。模型的对象在方法内部手动填充，或者使用`@ModelAttribute`的帮助。
    | `org.springframework.web.servlet.*` |'
- en: '| `String` | If a `@ResponseBody` annotation is not specified on the handler
    method, the returned String is processed as a View name (View identifier). | `java.lang.*`
    |'
  id: totrans-757
  prefs: []
  type: TYPE_TB
  zh: '| `String` | 如果处理程序方法上没有指定`@ResponseBody`注解，则返回的字符串将被处理为视图名称（视图标识符）。 | `java.lang.*`
    |'
- en: '| `HttpEntity<?> / ResponseEntity<?>` | Two wrapper objects to easily manage
    the response headers and converted-by-Spring body (with `HttpMessageConverters`).
    | `org.springframework.http.*` |'
  id: totrans-758
  prefs: []
  type: TYPE_TB
  zh: '| `HttpEntity<?> / ResponseEntity<?>` | 两个包装对象，用于轻松管理响应头和Spring转换的主体（使用`HttpMessageConverters`）。
    | `org.springframework.http.*` |'
- en: '| `HttpHeaders` | Provides a wrapper object for HEAD responses. | `org.springframework.http
    .*` |'
  id: totrans-759
  prefs: []
  type: TYPE_TB
  zh: '| `HttpHeaders` | 为HEAD响应提供一个包装器对象。 | `org.springframework.http .*` |'
- en: '| `Callable<?>` | Can produce asynchronously a typed object when the Thread
    is controlled by Spring MVC. | `java.util.concurrent.*` |'
  id: totrans-760
  prefs: []
  type: TYPE_TB
  zh: '| `Callable<?>` | 当Spring MVC控制线程时，可以异步生成一个类型化对象。 | `java.util.concurrent.*`
    |'
- en: '| `DeferredResult<?>` | Can produce asynchronously a Typed object when the
    Thread is not controlled by Spring MVC. | `org.springframework.web.context.request.async.*`
    |'
  id: totrans-761
  prefs: []
  type: TYPE_TB
  zh: '| `DeferredResult<?>` | 当线程不受Spring MVC控制时，可以异步产生一个类型化对象。 | `org.springframework.web.context.request.async.*`
    |'
- en: '| `ListenableFuture<?>` | `org.springframework.util.concurrent.*` |'
  id: totrans-762
  prefs: []
  type: TYPE_TB
  zh: '| `ListenableFuture<?>` | `org.springframework.util.concurrent.*` |'
- en: '| `void` | When the view is externally resolved with `RequestToViewNameTranslator`
    or when the method prints directly in the response. |   |'
  id: totrans-763
  prefs: []
  type: TYPE_TB
  zh: '| `void` | 当视图由`RequestToViewNameTranslator`外部解析时，或者当方法直接在响应中打印时。 |   |'
- en: There's more...
  id: totrans-764
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the `InfoTagController.infoTagServer()` method-handler, we have used the
    `@ResponseBody` annotation before the return Type. This annotation has been borrowed
    from the REST-specific tools. When you don't need to process a View, the `@ResponseBody`
    directive will use the registered Spring converters to marshal the returned object
    into the expected format (XML, JSON, and so on). It will then write the marshalled
    content to the Response body (as the Response payload).
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InfoTagController.infoTagServer()`方法处理程序中，我们在返回类型之前使用了`@ResponseBody`注解。这个注解是从特定于REST的工具中借来的。当您不需要处理视图时，`@ResponseBody`指令将使用注册的Spring转换器将返回的对象编组成期望的格式（XML、JSON等）。然后将编组的内容写入响应主体（作为响应有效载荷）。
- en: In the case of a String object with no more configurations, it is printed out
    as such in the Response body. We could have used the `ResponseEntity<String>`
    return Type to achieve the same goal.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有更多配置的String对象的情况下，它会在响应主体中打印出来。我们可以使用`ResponseEntity<String>`返回类型来实现相同的目标。
- en: Configuring a fallback controller using ViewResolver
  id: totrans-767
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ViewResolver配置回退控制器
- en: This recipe introduces some more advanced concepts and tools related to Controllers
    such as `ViewResolvers`, URI Template Patterns, and Spring MVC's injection-as-argument.
    The recipe is quite simple but there is more to talk about.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方介绍了一些与控制器相关的更高级的概念和工具，比如`ViewResolvers`、URI模板模式和Spring MVC的注入作为参数。这个配方很简单，但还有更多要谈论。
- en: Getting ready
  id: totrans-769
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will keep working from the same codebase state as the previous recipe where
    we have pulled the v2.2.1 tag from the remote repository. It will only be about
    creating one Controller with its handler method.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续从之前的配方中保持相同的代码库状态，其中我们从远程存储库中拉取了v2.2.1标签。这只涉及创建一个带有其处理程序方法的控制器。
- en: How to do it...
  id: totrans-771
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the **cloudstreetmarket-webapp** module and in the package `edu.zipcloud.cloudstreetmarket.portal.controllers`,
    the following `DefaultController` has been created:'
  id: totrans-772
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-webapp**模块和包`edu.zipcloud.cloudstreetmarket.portal.controllers`中，创建了以下`DefaultController`：
- en: '[PRE32]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will explain in detail how this method-handler serves as a fallback interceptor.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细解释这种方法处理程序如何作为回退拦截器。
- en: Access the `http://localhost:8080/portal/whatever` or `http://localhost:8080/portal/index`
    URL with your browser.
  id: totrans-776
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器访问`http://localhost:8080/portal/whatever`或`http://localhost:8080/portal/index`
    URL。
- en: 'You should also receive the HTML content we saw earlier:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该收到我们之前看到的HTML内容：
- en: '![How to do it...](img/image00820.jpeg)'
  id: totrans-778
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00820.jpeg)'
- en: How it works...
  id: totrans-779
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This second recipe revisits the use of the `@RequestMapping` annotation. With
    no longer a fixed URI as a path value but with an opened-pattern (fallback). The
    recipe also makes use of the configured View resolver that we didn't use before.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第二个配方重新访问了`@RequestMapping`注解的使用。不再是固定的URI作为路径值，而是一个开放的模式（回退）。该配方还利用了我们之前没有使用的配置的视图解析器。
- en: URI template patterns
  id: totrans-781
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: URI模板模式
- en: The template word is recurring in the Spring terminology. It usually refers
    to generic support Spring APIs to be instantiated in order to fill specific implementations
    or customisations (REST template to make REST HTTP requests, JMS template to send
    JMS messages, WS template to make SOAP webservices requests, JDBC template, and
    so on). They are bridge the developer needs to Spring core features.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 模板词在Spring术语中是重复出现的。它通常指的是通用支持Spring API，可以实例化以填充特定的实现或自定义（REST模板用于进行REST HTTP请求，JMS模板用于发送JMS消息，WS模板用于进行SOAP
    Web服务请求，JDBC模板等）。它们是开发人员需要Spring核心功能的桥梁。
- en: Under this light, URI templates allow configuring generic URIs with patterns
    and variables for controller end points. It is possible to instantiate URI builders
    that will implement URI templates but developers probably mostly use URI templates
    in the support they provide to `@RequestMapping` annotations.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种光线下，URI模板允许配置具有模式和变量的通用URI，用于控制器端点。可以实例化URI构建器来实现URI模板，但开发人员可能主要使用URI模板来支持`@RequestMapping`注解。
- en: Ant-style path patterns
  id: totrans-784
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Ant风格的路径模式
- en: 'We have made use of these types of pattern to define the path value for our
    fallback handler method:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经利用这些类型的模式来定义我们的回退处理程序方法的路径值：
- en: '[PRE33]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This specific case, with the `*` wildcard, allows whichever request URI starts
    with a `/` after the application display name to be eligible for being handled
    by this method.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 这种特殊情况下，使用`*`通配符，允许以应用程序显示名称之后的`/`开头的任何请求URI都有资格由此方法处理。
- en: 'The wildcard can match a character, a word, or a sequence of words. Consider
    the following example:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符可以匹配一个字符、一个单词或一系列单词。考虑以下例子：
- en: '[PRE34]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'A limitation would be to use another slash in the last sequence:'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 一个限制是在最后一个序列中使用另一个斜杠：
- en: '[PRE35]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Remember the difference with the table here:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住这里的表格的区别：
- en: '| `/*` | All resources and directories at the level |'
  id: totrans-793
  prefs: []
  type: TYPE_TB
  zh: '| `/*` | 所有资源和目录在该级别 |'
- en: '| `/**` | All resources and directories at the level and sublevels |'
  id: totrans-794
  prefs: []
  type: TYPE_TB
  zh: '| `/**` | 所有资源和目录在该级别和子级别 |'
- en: We have been using the single wildcard on purpose in the `cloudstreetmarket-webapp`
    application. It might be more suited for other types of applications to redirect
    every unmatched URI to a default one. In our case of a single page application
    that will be strongly REST oriented, it is nicer to inform the client with a `404`
    error when a resource hasn't been found.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意在`cloudstreetmarket-webapp`应用程序中使用了单个通配符。对于其他类型的应用程序，将每个不匹配的URI重定向到默认URI可能更合适。在我们的单页面应用程序中，它将是面向REST的，当找不到资源时，最好通知客户端出现`404`错误。
- en: 'It is not the only option to use wildcards at the end of path patterns. We
    could have implemented the following type of pattern if needed:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 在路径模式的末尾使用通配符并不是唯一的选择。如果需要，我们可以实现以下类型的模式：
- en: '[PRE36]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: (not for fallback purposes, though).
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: （尽管不是为了回退目的）。
- en: We will see that Spring MVC, to select one handler compares, all the matching
    Path patterns and selects the most specific of them.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到Spring MVC如何选择一个处理程序，它会比较所有匹配的路径模式，并选择最具体的路径模式。
- en: Tip
  id: totrans-800
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the Controller type-level, we haven't specified a `@RequestMapping`. If we
    had done so, the specified path for the method-level would have been concatenated
    to type-level one (implementing a narrowing).
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 在Controller类型级别，我们没有指定`@RequestMapping`。如果我们这样做了，方法级别的指定路径将被连接到类型级别的路径上（实现缩小范围）。
- en: 'For example, the following definition would have defined the path pattern `/portal/default/*`
    for our fallback controller:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下定义将为我们的回退控制器定义路径模式`/portal/default/*`：
- en: '[PRE37]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Path pattern comparison
  id: totrans-804
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`/portal/*`'
- en: A pathpattern comparison is done by Spring MVC when a given URL matches more
    than one registered path-pattern, to choose which handler the request will be
    mapped to.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定的URL匹配多个已注册的路径模式时，Spring MVC会进行路径模式比较，以选择将请求映射到哪个处理程序。
- en: Note
  id: totrans-806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The pattern considered the most specific will be selected.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为最具体的模式将被选择。
- en: 'The first criterion is the number of counted variables and wildcards in the
    compared path patterns: the pattern having the lowest number of variables and
    wildcards is considered the most specific.'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个标准是在比较的路径模式中计算变量和通配符的数量：具有最低数量变量和通配符的模式被认为是最具体的。
- en: To discriminate two path-patterns that have the same cumulated number of variables
    and wildcards, remember that the one with the lowest number of wildcards will
    be the most specific and then the longest path will be the most specific.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 要区分具有相同累积变量和通配符数量的两个路径模式，请记住具有最低通配符数量的模式将是最具体的，然后最长的路径将是最具体的。
- en: Finally a pattern with double wildcards is always less specific than a pattern
    without any.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，具有双通配符的模式始终比没有任何通配符的模式不具体。
- en: 'To illustrate this selection, let''s consider the following hierarchy going
    from the most to the least specific:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一选择，让我们考虑以下从最具体到最不具体的层次结构：
- en: '`/portal/foo`'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/foo`'
- en: '`/portal/{foo}`'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/{foo}`'
- en: '`/portal/*`'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 路径模式比较
- en: '`/portal/{foo}/{bar}`'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/{foo}/{bar}`'
- en: '`/portal/default/*/{foo}`'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/default/*/{foo}`'
- en: '`/portal/{foo}/*`'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/{foo}/*`'
- en: '`/portal/**/*`'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/**/*`'
- en: '`/portal/**`'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '`/portal/**`'
- en: ViewResolvers
  id: totrans-820
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 视图解析器
- en: 'In `dispatcher-context.xml` of **cloudstreetmarket-webapp**, we have defined
    the `viewResolver` bean:'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-webapp**的`dispatcher-context.xml`中，我们已经定义了`viewResolver`
    bean：
- en: '[PRE38]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: A `viewResolver` bean is a specific instance of a predefined class used to serve
    an organized and uniform set of view layers. In the case that we have configured,
    the `viewResolver` bean is an instance of `InternalResourceViewResolver`, which
    can serve JSP pages, handle the JSTL and tiles. This class also inherits `UrlBasedViewResolver`
    that can navigate the application resources and can bind a logical view name to
    a View resource file. This capability prevents the creation of extramappings.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewResolver` bean是预定义类的特定实例，用于提供有组织和统一的视图层集合。在我们配置的情况下，`viewResolver` bean是`InternalResourceViewResolver`的一个实例，它可以提供JSP页面，处理JSTL和tiles。这个类还继承了`UrlBasedViewResolver`，可以导航应用程序资源，并可以将逻辑视图名称绑定到视图资源文件。这种能力可以防止创建额外的映射。'
- en: In our configuration, we have defined the view repository `(/WEB-INF/jsp/*.jsp)`
    and we can directly refer to `index.jsp` with the String `index`.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配置中，我们已经定义了视图存储库`(/WEB-INF/jsp/*.jsp)`，我们可以直接使用字符串`index`引用`index.jsp`。
- en: It is better practice to set up the JSP repository under `/WEB-INF` so those
    JSPs cannot be targeted publicly. Rather than a JSP templating, we could have
    used Velocity or Freemarker respectively using the view resolvers `VelocityViewResolver`
    or `FreeMarkerViewResolver`.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将JSP存储库设置在`/WEB-INF`下，这样这些JSP就不能被公开访问。我们可以使用`VelocityViewResolver`或`FreeMarkerViewResolver`来代替JSP模板，而不是JSP模板。
- en: Also, we will talk about the `ContentNegotiatingViewResolver` later on when
    we build the REST API.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当我们构建REST API时，我们将在后面讨论`ContentNegotiatingViewResolver`。
- en: There's more...
  id: totrans-827
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This section highlights particularly the @PathVariable annotation. This annotation
    is an annotation for controller method-handler arguments (we have introduced all
    of them in the previous recipe).
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 本节特别强调了`@PathVariable`注解。这个注解是控制器方法处理程序参数的注解（我们在前面的示例中介绍了所有这些）。
- en: '@PathVariable to read variables in URI template patterns'
  id: totrans-829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@PathVariable 用于读取URI模板模式中的变量'
- en: 'You will find later, on several examples, the method-level `@RequestMapping`
    annotations . Those annotations will sometimes be related to `@PathVariable` annotations
    on the method-handler arguments. For now, let''s consider the following example:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后您将在几个示例中找到方法级别的`@RequestMapping`注解。这些注解有时会与方法处理程序参数上的`@PathVariable`注解相关联。现在，让我们考虑以下示例：
- en: '[PRE39]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As announced before, `@PathVariable` tells Spring MVC where and how to realize
    its injection-as-argument from the request URI. The framework will parse the current
    URI Template pattern to extract the variable named `param` and will inject the
    matching value in the current URI into the targeted method-argument.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`@PathVariable`告诉Spring MVC在何处以及如何从请求URI中实现其注入作为参数。框架将解析当前URI模板模式以提取名为`param`的变量，并将匹配值注入当前URI中的目标方法参数。
- en: We also declare an `HTTPEntity` to be returned as a response. This `HTTPEntity`
    will be a wrapper of a String generic type. Inside the method-handler, we instantiate
    this wrapper with the necessary String element.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还声明要返回的`HTTPEntity`。这个`HTTPEntity`将是一个String泛型类型的包装器。在方法处理程序内部，我们使用必要的String元素实例化这个包装器。
- en: 'If we would call for the `/portal/example/foo` URI, it would be displayed as
    a response from the body of the returned `HTTPEntity`: the String `foo`.'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调用`/portal/example/foo` URI，它将作为返回的`HTTPEntity`的正文显示：String`foo`。
- en: 'With another interesting feature, we could have built this last scenario with
    the following declaration for `@PathVariable`:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 通过另一个有趣的特性，我们可以使用以下`@PathVariable`声明构建最后一个场景：
- en: '[PRE40]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-837
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Not providing a value to the annotation, Spring MVC will by default look in
    the URI Template pattern for a variable of the same name as the targeted argument.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不向注释提供值，Spring MVC默认会在URI模板模式中查找与目标参数同名的变量。
- en: We will explore other features with regard to `@RequestMapping` and `@PathVariable`.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨关于`@RequestMapping`和`@PathVariable`的其他功能。
- en: Setting up and customizing a responsive single page webdesign with Bootstrap
  id: totrans-840
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap设置和定制响应式单页网页设计
- en: Bootstrap is a UI Framework initially created by Mark Otto and Jacob Thornton
    at Twitter. It is an amazing source of styles, icons, and behaviors, abstracted
    to define and enrich components. Bootstrap offers an easy, rational, and unified
    set of patterns for defining styles. It had no equivalent before. If you have
    never used it, you will be excited to get so much visual feedback from a quick
    definition of the DOM.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap最初是由Twitter的Mark Otto和Jacob Thornton创建的UI框架。它是一个了不起的样式、图标和行为来源，用于定义和丰富组件。Bootstrap提供了一套易于理解、统一的样式定义模式。以前没有类似的。如果您从未使用过它，您将会对从DOM的快速定义中获得如此多的视觉反馈感到兴奋。
- en: In June 2014 it was the number 1 project on GitHub with over 73,000 stars and
    more than 27,000 forks. Their documentation is very fluid and easy to go through.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年6月，它是GitHub上的第一个项目，拥有超过73,000颗星星和超过27,000个分支。他们的文档非常流畅，易于阅读。
- en: Getting ready
  id: totrans-843
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use Bootstrap to set up the web-design basics for our
    CloudStreet Market project from an existing Bootstrap theme. We will remake the
    `index.jsp` page to render a better looking welcome page that can be previewed
    with the following screenshot.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用Bootstrap从现有的Bootstrap主题为CloudStreet Market项目设置Web设计基础。我们将重新制作`index.jsp`页面，以呈现一个外观更好的欢迎页面，可以通过以下屏幕截图预览。
- en: '![Getting ready](img/image00821.jpeg)'
  id: totrans-845
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00821.jpeg)'
- en: How to do it...
  id: totrans-846
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'There are three major steps in this recipe:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方有三个主要步骤：
- en: Installing a Bootstrap theme
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Bootstrap主题
- en: Customizing a Bootstrap theme
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制Bootstrap主题
- en: Creating responsive content
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建响应式内容
- en: 'From the Git Perspective in Eclipse, checkout the latest version of the branch
    `v2.x.x`:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 从Eclipse的Git视角，检出`v2.x.x`分支的最新版本：
- en: '![How to do it...](img/image00822.jpeg)'
  id: totrans-852
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00822.jpeg)'
- en: Installing a Bootstrap theme
  id: totrans-853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Bootstrap主题
- en: In the `chapter_2` directory, you can find a `freeme.zip` archive. It is a responsive
    Bootstrap template downloadable for free. This zip comes from the [bootstrapmaster.com](http://bootstrapmaster.com)
    website.
  id: totrans-854
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter_2`目录中，您可以找到一个`freeme.zip`存档。这是一个可免费下载的响应式Bootstrap模板。这个zip来自[bootstrapmaster.com](http://bootstrapmaster.com)网站。
- en: Inside this archive, you'll see a `css` directory, a `js` directory, an `img`
    directory, and finally an `index.html` file. Opening the `index.html` file with
    a web browser should render the following home page:![Installing a Bootstrap theme](img/image00823.jpeg)
  id: totrans-855
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个存档中，您会看到一个`css`目录，一个`js`目录，一个`img`目录，最后是一个`index.html`文件。使用Web浏览器打开`index.html`文件应该呈现以下主页：![安装Bootstrap主题](img/image00823.jpeg)
- en: We are using this template as a base for the webapp module.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用此模板作为webapp模块的基础。
- en: All the JavaScript files located in the `freeme/js` directory have been copied
    over to the `/cloudstreetmarket-webapp/src/main/webapp/js` directory.
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有位于`freeme/js`目录中的JavaScript文件已复制到`/cloudstreetmarket-webapp/src/main/webapp/js`目录中。
- en: All the CSS files located in the `freeme/css` directory have been copied over
    to the `/cloudstreetmarket-webapp/src/main/webapp/css` directory.
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有位于`freeme/css`目录中的CSS文件已复制到`/cloudstreetmarket-webapp/src/main/webapp/css`目录中。
- en: All the pictures located in `freeme/img` have been copied over to the `/cloudstreetmarket-webapp/src/main/webapp/img`
    directory.
  id: totrans-859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有位于`freeme/img`中的图片已复制到`/cloudstreetmarket-webapp/src/main/webapp/img`目录中。
- en: The content of the `freeme/index.html` file has been copied and pasted into
    the `/cloudstreetmarket-webapp/src/main/webapp/WEB-INF/jsp/index.jsp` file, as
    UTF-8.
  id: totrans-860
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`freeme/index.html`文件的内容已被复制并粘贴到`/cloudstreetmarket-webapp/src/main/webapp/WEB-INF/jsp/index.jsp`文件中，使用UTF-8。'
- en: Also, the `freeme/licence.txt` has been copied and pasted to the `/cloudstreetmarket-webapp/src/main/webapp/WEB-INF/jsp`
    directory.
  id: totrans-861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，`freeme/licence.txt`已被复制并粘贴到`/cloudstreetmarket-webapp/src/main/webapp/WEB-INF/jsp`目录中。
- en: At this point, calling `http://localhost:8080/portal/index` with a web browser
    displayed exactly the same visual you saw earlier, but served by our application.
  id: totrans-862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，使用Web浏览器调用`http://localhost:8080/portal/index`将显示与之前看到的完全相同的视觉效果，但由我们的应用程序提供。
- en: Customising a Bootstrap theme
  id: totrans-863
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定制Bootstrap主题
- en: We will detail in this section what has been done in order to adapt the downloaded
    template to our use case.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细介绍为了使下载的模板适应我们的用例而做了什么。
- en: All the images previously located in `cloudstreetmarket-webapp\src\main\webapp\img\logos`
    have been removed and replaced with six new images representing brands of technical
    products that we have been using through out this application and this book.
  id: totrans-865
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以前位于`cloudstreetmarket-webapp\src\main\webapp\img\logos`中的所有图片已被删除，并用代表我们在整个应用程序和本书中一直在使用的技术产品品牌的六张新图片替换。
- en: 'In the `index.jsp` file located in the `cloudstreetmarket-webapp` module has
    been implemented the following changes:'
  id: totrans-866
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-webapp`模块中的`index.jsp`文件中已实现以下更改：
- en: 'The following two lines have been added to the top:'
  id: totrans-867
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下两行已添加到顶部：
- en: '[PRE41]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `<!-- start: Meta -->` section has been replaced with the following:'
  id: totrans-869
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<!-- start: Meta -->`部分已替换为以下内容：'
- en: '[PRE42]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `<!--start: Logo -->` section has been replaced with the following:'
  id: totrans-871
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<!--start: Logo -->`部分已替换为以下内容：'
- en: '[PRE43]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The navigation menu definition has been changed:'
  id: totrans-873
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航菜单定义已更改：
- en: '[PRE44]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `<!-- start: Hero Unit -->` and `<!-- start: Flexslider -->` sections have
    been removed and `<div class="row">` coming after the navigation menu (`<!--end:
    Navigation-->`) has been emptied:'
  id: totrans-875
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '已删除`<!-- start: Hero Unit -->`和`<!-- start: Flexslider -->`部分，并清空了导航菜单(`<!--end:
    Navigation-->`)后面的`<div class="row">`：'
- en: '[PRE45]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `<!-- start: Row -->` section to the `<!-- end: Row -->` section, which
    is located after the `<!-- end Clients List -->`, has been removed along with
    the `<hr>` just after it.'
  id: totrans-877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<!-- start: Row -->`部分到`<!-- end: Row -->`部分，在`<!-- end Clients List -->`之后，已删除，并且紧随其后的`<hr>`也已删除。'
- en: 'The footer section `<!-- start: Footer Menu -->` to `<!-- end: Footer Menu
    -->` has been replaced with the following content:'
  id: totrans-878
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '页脚部分`<!-- start: Footer Menu -->`到`<!-- end: Footer Menu -->`已替换为以下内容：'
- en: '[PRE46]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The section: `<!-- start: Photo Stream -->` to `<!-- end: Photo Stream -->`
    has been replaced with:'
  id: totrans-880
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<!-- start: Photo Stream -->`到`<!-- end: Photo Stream -->`部分已替换为：'
- en: '[PRE47]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As a last change in the `index.jsp` file, the copyright section has been adapted.
  id: totrans-882
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.jsp`文件中的最后一个更改是，版权部分已经调整。
- en: 'In the previously copied `cloudstreetmarket-webapp/src/main/webapp/css/style.css`
    file, the following classes have been added:'
  id: totrans-883
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在先前复制的`cloudstreetmarket-webapp/src/main/webapp/css/style.css`文件中，已添加了以下类：
- en: '[PRE48]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: At this point, after all these changes, restarting Tomcat and calling the same
    URL `http://localhost:8080/portal/index` resulted in the following state:![Customising
    a Bootstrap theme](img/image00824.jpeg)
  id: totrans-885
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有这些更改之后，重新启动Tomcat并调用相同的URL`http://localhost:8080/portal/index`导致了以下状态：![自定义Bootstrap主题](img/image00824.jpeg)
- en: Creating responsive content
  id: totrans-886
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建响应式内容
- en: We will focus in this section on the changes that have been made to fill the
    welcome page with responsive content. By responsive, understand that the content
    will be rendered under a style appropriate for the device size and orientation.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中重点关注填充欢迎页面的响应式内容所做的更改。通过响应式，理解为内容将根据设备大小和方向呈现适当的样式。
- en: 'In the `index.jsp` file:'
  id: totrans-888
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.jsp`文件中：
- en: 'The `<div class="row">` has been added the following content:'
  id: totrans-889
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<div class="row">`已添加了以下内容：'
- en: '[PRE49]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the previously added *landingGraphContainer*, we have inserted a generated
    graph that renders the evolution of specific markets during the last opened day.
    The graph uses the `morris.js` library ([http://morrisjs.github.io/morris.js](http://morrisjs.github.io/morris.js)),
    which also relies on the `raphael.js` library ([https://cdnjs.com/libraries/raphael](https://cdnjs.com/libraries/raphael)).
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前添加的*landingGraphContainer*中，我们已插入了一个生成的图表，显示了最近开放日内特定市场的发展情况。该图表使用了`morris.js`库([http://morrisjs.github.io/morris.js](http://morrisjs.github.io/morris.js))，它还依赖于`raphael.js`库([https://cdnjs.com/libraries/raphael](https://cdnjs.com/libraries/raphael))。
- en: 'At the bottom of the file, the `<!-- start: Java Script -->` section to the
    `<!-- end: Java Script -->` section has been added the following content:'
  id: totrans-893
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在文件底部，已添加了`<!-- start: Java Script -->`部分到`<!-- end: Java Script -->`部分的以下内容：'
- en: '[PRE50]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In the`cloudstreetmarket-webapp\src\main\webapp\js` directory, the `morris.min.js`
    and `raphael.js` libraries have been copied and pasted from their respective websites.
  id: totrans-895
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-webapp\src\main\webapp\js`目录中，`morris.min.js`和`raphael.js`库已从它们各自的网站复制并粘贴。
- en: 'Back to the `index.jsp` file:'
  id: totrans-896
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`index.jsp`文件：
- en: 'The previously created `<div id=''containerCommunity''>` has been filled with
    the following content:'
  id: totrans-897
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先前创建的`<div id='containerCommunity'>`已填充了以下内容：
- en: '[PRE51]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The section here uses the feedEk jQuery plugin. It comes with its own CSS and
    JavaScript file.
  id: totrans-899
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此部分使用了feedEk jQuery插件。它带有自己的CSS和JavaScript文件。
- en: The `cloudstreetmarket-webapp\src\main\webapp\js` directory includes the `FeedEk.js`
    file related to the feedEk jQuery plugin. This plugin can be found online ([http://jquery-plugins.net/FeedEk/FeedEk.html](http://jquery-plugins.net/FeedEk/FeedEk.html)).
  id: totrans-900
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cloudstreetmarket-webapp\src\main\webapp\js`目录包括与feedEk jQuery插件相关的`FeedEk.js`文件。此插件可以在线找到([http://jquery-plugins.net/FeedEk/FeedEk.html](http://jquery-plugins.net/FeedEk/FeedEk.html))。'
- en: The `cloudstreetmarket-webapp\src\main\webapp\css` directory also has the related
    `FeedEk.css` file.
  id: totrans-901
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cloudstreetmarket-webapp\src\main\webapp\css`目录还有相关的`FeedEk.css`文件。'
- en: 'Still in `index.jsp`, under the `<!-- start: CSS -->` comment, the `FeedEk
    css` document has been added:'
  id: totrans-902
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '仍然在`index.jsp`中，在`<!-- start: CSS -->`注释下面，已添加了`FeedEk css`文档：'
- en: '[PRE52]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the `style.css` file, before the first media query definition `(@media only
    screen and (min-width: 960px)`), the following style definitions have been added:'
  id: totrans-904
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`style.css`文件中，在第一个媒体查询定义`(@media only screen and (min-width: 960px)`之前，已经添加了以下样式定义：'
- en: '[PRE53]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Finally, two new images (profile pictures) have been added to `cloudstreetmarket-webapp\src\main\webapp\img`.
  id: totrans-906
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，两张新图片（个人资料图片）已添加到`cloudstreetmarket-webapp\src\main\webapp\img`。
- en: 'Try to dynamically resize a browser window that renders: `http://localhost:8080/portal/index`.
    You should observe a responsive and adaptive style as in the following picture:![Creating
    responsive content](img/image00825.jpeg)'
  id: totrans-907
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试动态调整渲染的浏览器窗口大小：`http://localhost:8080/portal/index`。您应该观察到响应式和自适应的样式，就像下面的图片一样：![创建响应式内容](img/image00825.jpeg)
- en: How it works...
  id: totrans-908
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To understand our Bootstrap deployment, we are going to review now how it has
    been installed as a predesigned theme. We will then discover some key features
    of the Bootstrap Framework—not only the implemented features because, logically
    enough, only a few features of the Framework can visually be used on one single
    page example.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解我们的Bootstrap部署，我们现在将回顾它是如何作为一个预设计的主题安装的。然后我们将发现Bootstrap框架的一些关键特性——不仅仅是已实现的特性，因为合乎逻辑的是，框架的一些特性只能在一个单独的页面示例上进行视觉使用。
- en: The theme installation
  id: totrans-910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题安装
- en: The theme we have obtained is no more than a classical static theme, as you
    can find thousands of them over the Internet. They are made by web designers and
    distributed for free or commercially. This one is made with the basic structure
    of HTML files, a JS directory, a CSS directory, and an IMG directory.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得的主题不过是一个经典的静态主题，就像您可以在互联网上找到成千上万个一样。它们是由网页设计师制作并免费或商业分发的。这个主题是由HTML文件的基本结构、一个JS目录、一个CSS目录和一个IMG目录制作的。
- en: The theme installation is quite straightforward to understand, since we have
    just placed the JavaScript files, CSS files, and images in their expected locations
    for our application.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 主题安装非常容易理解，因为我们只是将JavaScript文件、CSS文件和图像放在了应用程序的预期位置。
- en: Tip
  id: totrans-913
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Bootstrap core features are self-contained in `bootstrap.js`, `bootstrap.css`,
    and `bootstrap-responsive.css`. You should not really have to tweak these files
    directly.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的核心特性包含在`bootstrap.js`、`bootstrap.css`和`bootstrap-responsive.css`中。您实际上不需要直接调整这些文件。
- en: Bootstrap highlights
  id: totrans-915
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bootstrap亮点
- en: The implemented theme (FreeME) uses Bootstrap 2\. We are going to review a couple
    of features that have been implemented in the template and for the needs of our
    project.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 实现的主题（FreeME）使用了Bootstrap 2。我们将回顾一些已在模板中实现并适用于我们项目需求的功能。
- en: Bootstrap scaffolding
  id: totrans-917
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Bootstrap脚手架
- en: The Bootstrap scaffolding helps with designing the HTML structure usually built
    from a grid model. The Bootstrap strategy on this topic is described in the following
    sections.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap脚手架有助于设计通常由网格模型构建的HTML结构。关于这个主题的Bootstrap策略在以下部分中有描述。
- en: Grid system and responsive design
  id: totrans-919
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 网格系统和响应式设计
- en: Bootstrap offers a styleframe to handle a page-specific grid system. The key
    point is in the default grid-system made up of 12 columns and designed for a 940px
    wide nonresponsive container.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap提供了一个样式框架来处理特定页面的网格系统。关键点在于默认的网格系统由12列组成，设计用于940像素宽的非响应式容器。
- en: The Bootstrap responsive features are activated with the use of `<meta name="viewport"…>`
    tag and with the import of the `boostrap-responsive.css` file. The container width
    can extend from 724px to 1170px in that case.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`<meta name="viewport"…>`标签和导入`boostrap-responsive.css`文件，可以激活Bootstrap的响应特性。在这种情况下，容器宽度可以从724像素扩展到1170像素。
- en: Tip
  id: totrans-922
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Also, below 767px, the columns become fluid and stack vertically.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在767像素以下，列会变成流动并垂直堆叠。
- en: These Bootstrap specifications define quite a drastic set of constraints but
    Bootstrap somehow creates an easy-to-understand design uniformity for its implementations.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 这些Bootstrap规范定义了一组相当严格的约束条件，但Bootstrap在某种程度上为其实现创建了易于理解的设计统一性。
- en: 'In the case of our template, the viewport metatag is the following:'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，视口元标签如下：
- en: '[PRE54]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note
  id: totrans-927
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are not familiar with this tag, its main purpose is to define device-specific
    sizes in the document. From these sizes, rules are defined for orientation-specific
    and device-specific rendering. These rules that are bound to style definitions
    are called mediaqueries. You can find an example of a mediaquery in the style.css
    file:'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对这个标签不熟悉，它的主要目的是在文档中定义特定设备的尺寸。从这些尺寸中，为特定方向和特定设备的渲染定义规则。绑定到样式定义的这些规则称为媒体查询。您可以在style.css文件中找到媒体查询的示例：
- en: '[PRE55]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This media query overrides the style that is specific to the id footer menu
    only where the device presents a width greater than 960px.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 这个媒体查询覆盖了仅在设备宽度大于960像素时呈现的id footer menu的特定样式。
- en: Defining columns
  id: totrans-931
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 定义列
- en: To define columns within the grid system, Bootstrap drives us towards the use
    of a `row` div tagged as a `row` class element. Then, the idea is to define subdivs
    marked with custom `span*` class elements where the `*` characters represents
    subdivisions of the 12-column grid we have to deal with.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在网格系统中定义列，Bootstrap引导我们使用标记为`row`类元素的`row` div。然后，想法是定义用自定义`span*`类元素标记的子div，其中`*`字符表示我们必须处理的12列网格的子分区。
- en: 'For example, consider the following two possible designs:'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下两种可能的设计：
- en: '![Defining columns](img/image00826.jpeg)'
  id: totrans-934
  prefs: []
  type: TYPE_IMG
  zh: '![定义列](img/image00826.jpeg)'
- en: 'The two columns on the left example can be rendered from the DOM definition:'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧示例中的两列可以从DOM定义中呈现出来：
- en: '[PRE56]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The two columns on the right example can be rendered from the DOM definition:'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧示例中的两列可以从DOM定义中呈现出来：
- en: '[PRE57]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'With this in mind, the grid of our welcome page is actually the following:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们欢迎页面的网格实际上是这样的：
- en: '![Defining columns](img/image00827.jpeg)'
  id: totrans-940
  prefs: []
  type: TYPE_IMG
  zh: '![定义列](img/image00827.jpeg)'
- en: Offsetting and nesting
  id: totrans-941
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 偏移和嵌套
- en: 'Offsetting a column allows you to create a fixed-sized decay corresponding
    to one or more invisible columns. For example, consider the following snippet:'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移列允许您创建一个与一个或多个不可见列相对应的固定大小的衰减。例如，考虑以下代码片段：
- en: '[PRE58]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This DOM definition will correspond to the following columns:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DOM定义将对应以下列：
- en: '![Offsetting and nesting](img/image00828.jpeg)'
  id: totrans-945
  prefs: []
  type: TYPE_IMG
  zh: '![偏移和嵌套](img/image00828.jpeg)'
- en: 'A column can also be nested inside another column redefining a new row. The
    sum of the newly created columns must correspond to the parent''s size:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 一个列也可以嵌套在另一个列中，重新定义一个新的行。新创建的列的总和必须与父元素的大小相对应：
- en: '[PRE59]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Fluid gridding
  id: totrans-948
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 流动网格
- en: We were saying earlier that, with Boostrap2, below 767px *the columns become
    fluid and stack vertically*. The template gridding can be changed from static
    to fluid turning `.row` classes to `.row-fluid`. Rather than fixed pixels sized
    columns, this system will use percentages.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前说过，使用Boostrap2，当屏幕宽度小于767像素时，*列会变成流动并垂直堆叠*。模板网格可以从静态变为流动，将`.row`类更改为`.row-fluid`。这个系统将使用百分比，而不是固定像素大小的列。
- en: Bootstrap CSS utilities
  id: totrans-950
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Bootstrap CSS实用程序
- en: Bootstrap also provides a few pre-designed elements such as buttons, icons,
    tables, forms and also utilities to support typography or images.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap还提供了一些预设计的元素，如按钮、图标、表格、表单，以及支持排版或图像的实用程序。
- en: Uniform Buttons
  id: totrans-952
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 统一按钮
- en: 'Default styled buttons can be created from the `<a>` and `<button>` tags with
    only addition of the `.btn` class element. The created default gray button with
    a gradient can then be declined in different colour variations. For example, **by
    default**, the following classes combination:'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从`<a>`和`<button>`标签中创建默认样式的按钮，只需添加`.btn`类元素。然后可以以不同的颜色变化来拒绝创建的默认灰色按钮。例如，默认情况下，以下类组合：
- en: '`.btn .btn-primary`: This produces an intense ultramarine blue button to identify
    the primary action among other buttons'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-primary`: 这会产生一个强烈的群青蓝色按钮，以标识主要操作'
- en: '`.btn .btn-info`: This produces a moderate turquoise blue button'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-info`: 这会产生一个中等的绿松石蓝色按钮'
- en: '`.btn .btn-success`: This produces a positive green button'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-success`: 这会产生一个积极的绿色按钮'
- en: '`.btn .btn-warning`: This produces a warning orange button'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-warning`: 这会产生一个警告橙色按钮'
- en: '`.btn .btn-danger`: This produces a dangerous red button'
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-danger`: 这会产生一个危险的红色按钮'
- en: '`.btn .btn-inverse`: This produces a black button with white text'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-inverse`: 这会产生一个黑色按钮，带有白色文本'
- en: '`.btn .btn-link`: This produces a link while maintaining a button behavior'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn .btn-link`: 这会产生一个链接，同时保持按钮行为'
- en: 'These buttons are also resizable declaratively by adding a `.btn-large` class,
    adding a `.btn-small` class, or adding a `.btn-mini` class:'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按钮也可以通过添加`.btn-large`类、添加`.btn-small`类或添加`.btn-mini`类来进行可调整大小的声明：
- en: '![Uniform Buttons](img/image00829.jpeg)'
  id: totrans-962
  prefs: []
  type: TYPE_IMG
  zh: '![统一按钮](img/image00829.jpeg)'
- en: A button can be disabled by adding it as a **disabled** attribute. Similarly,
    a `<a>` tagged button can be disabled with the addition of a `.disabled` class.
    We didn't make use of buttons yet, but it is a great feature to be presented at
    this point.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将其添加为**disabled**属性，可以禁用按钮。同样，可以通过添加`.disabled`类来禁用`<a>`标记的按钮。我们还没有使用按钮，但这是一个很好的功能，可以在这一点上进行介绍。
- en: Icons
  id: totrans-964
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图标
- en: 'Bootstrap 2 comes with an impressive set of 140 dark gray icons available as
    sprites and provided by Glyphicons:'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 2带有一个令人印象深刻的140个深灰色图标集，可用作精灵并由Glyphicons提供：
- en: '![Icons](img/image00830.jpeg)'
  id: totrans-966
  prefs: []
  type: TYPE_IMG
  zh: '![图标](img/image00830.jpeg)'
- en: Tip
  id: totrans-967
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: These icons are normally available commercially but they are also usable for
    free as part of the Bootstrap product. However Bootstrap asks us to provide an
    optional backlink to [http://glyphicons.com](http://glyphicons.com).
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图标通常是商业可用的，但作为Bootstrap产品的一部分，它们也可以免费使用。但是Bootstrap要求我们提供一个可选的回链到[http://glyphicons.com](http://glyphicons.com)。
- en: All these icons can be pulled from the DOM with a simple class within a `<i>`
    tag such as `<i class="icon-search"></i>`.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些图标都可以通过简单的类从DOM中提取，例如`<i class="icon-search"></i>`。
- en: 'The amazing thing is that you can actually embed these icons in every suitable
    Bootstrap component. For example, the button definition: `<a class="btn btn-mini"
    href="#"><i class="icon-star"></i> Star</a>`, produces the following:'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，您实际上可以将这些图标嵌入到每个适合的Bootstrap组件中。例如，按钮定义：`<a class="btn btn-mini" href="#"><i
    class="icon-star"></i> Star</a>`，会产生以下结果：
- en: '![Icons](img/image00831.jpeg)'
  id: totrans-971
  prefs: []
  type: TYPE_IMG
  zh: '![图标](img/image00831.jpeg)'
- en: Tables
  id: totrans-972
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 表格
- en: 'We have implemented a Bootstrap table for the market activity overview. We
    have basically shaped the following table:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为市场活动概览实现了一个Bootstrap表格。我们基本上设计了以下表格：
- en: '[PRE60]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the same way as we can define a button class overridden with customization
    classes, we have defined a generic Bootstrap table with the class `.table`, and
    then we have made use of the following customization classes:'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们可以定义一个使用自定义类覆盖的按钮类一样，我们已经定义了一个通用的Bootstrap表格，使用了`.table`类，然后我们使用了以下自定义类：
- en: '`.table .table-hover`: This enables a hover state on table rows within a `<tbody>`'
  id: totrans-976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.table .table-hover`: 这可以在`<tbody>`中的表格行上启用悬停状态'
- en: '`.table .table-condensed`: This makes tables more compact'
  id: totrans-977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.table .table-condensed`: 这使表格更紧凑'
- en: '`.table .table-bordered`: This adds borders and rounded corners to the table'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.table .table-bordered`: 这为表格添加了边框和圆角'
- en: '`.table .table-striped`: This adds zebra-striping to any table row within the
    `<tbody>`'
  id: totrans-979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.table .table-striped`: 这为`<tbody>`中的任何表格行添加斑马条纹'
- en: Bootstrap components
  id: totrans-980
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Bootstrap组件
- en: 'The framework has other pre-designed elements identified as Components. Among
    them, dropdowns, button groups, breadcrumbs, pagination, Navbars, labels and badges,
    thumbnails, alerts, progress bars, and so on. Here we only present some of them:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架还具有其他预设计的元素，称为组件。其中，下拉菜单、按钮组、面包屑、分页、导航栏、标签和徽章、缩略图、警报、进度条等。这里我们只介绍其中一些：
- en: Navbars
  id: totrans-982
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 导航栏
- en: 'The Bootstrap navigation bars provide support for a basic navigation menu.
    They are not by default fixed to the top of the page; they must be included in
    a `.container`. The code is as follows:'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap导航栏提供了基本导航菜单的支持。它们默认不固定在页面顶部；它们必须包含在`.container`中。代码如下：
- en: '[PRE61]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The most basic feature in the navbar is the activable link:'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏中最基本的功能是可激活的链接：
- en: '![Navbars](img/image00832.jpeg)'
  id: totrans-986
  prefs: []
  type: TYPE_IMG
  zh: '![导航栏](img/image00832.jpeg)'
- en: 'The example above can be designed from the following DOM definition:'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例可以根据以下DOM定义进行设计：
- en: '[PRE62]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We strongly recommend reading the Bootstrap documentation. More details can
    be found on how to implement other features. For example, Bootstrap provides tools
    for:'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议阅读Bootstrap文档。关于如何实现其他功能的更多细节可以在文档中找到。例如，Bootstrap提供了以下工具：
- en: Form elements such as input texts, search fields, and submit buttons.
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如输入文本、搜索字段和提交按钮的表单元素。
- en: Different positioning variations such as fixed-to-top (with `.navbar-fixed-top`),
    fixed-to-bottom (with `.navbar-fixed-bottom`), at the opposite of the full-width
    navbar that scrolls away with the page (with `.navbar-static-top`).
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的定位变化，例如固定在顶部（使用`.navbar-fixed-top`）、固定在底部（使用`.navbar-fixed-bottom`），与随页面滚动而消失的全宽度导航栏相对（使用`.navbar-static-top`）。
- en: Collapsible responsive navbars (`.nav-collapse.collapse`) that allow significant
    space savings. With the use of the data-toggle HTML5 attribute, dynamic handling
    is performed with no extra JavaScript configuration.
  id: totrans-992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可折叠的响应式导航栏（`.nav-collapse.collapse`）可以节省大量空间。通过使用data-toggle HTML5属性，可以在没有额外JavaScript配置的情况下进行动态处理。
- en: Hero units
  id: totrans-993
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 主要单元
- en: There was a hero unit defined in the provided template. We've just moved it
    a bit to suit our responsive needs.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的模板中定义了一个英雄单元。我们只是稍微移动了一下，以适应我们的响应需求。
- en: It is a lightweight, flexible component to showcase key content on your site.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个轻量级、灵活的组件，用于在您的网站上展示关键内容。
- en: '![Hero units](img/image00833.jpeg)'
  id: totrans-996
  prefs: []
  type: TYPE_IMG
  zh: '![英雄单元](img/image00833.jpeg)'
- en: 'The example above can be designed from the following DOM definition:'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例可以从以下DOM定义中设计：
- en: '[PRE63]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Alerts
  id: totrans-999
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 警报
- en: 'Bootstrap alerts are great to quickly generate a predefined style for a warning
    message or another contextual message. A Bootstrap alert comes with an **optional**
    dismiss button (which will hide the alert with no extraJavaScript configuration).
    The code is as follows:'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap警报非常适合快速生成预定义样式的警告消息或其他上下文消息。Bootstrap警报带有一个**可选的**关闭按钮（它将隐藏警报，无需额外的JavaScript配置）。代码如下：
- en: '[PRE64]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This definition produces the output presented here:'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 此定义产生了这里呈现的输出：
- en: '![Alerts](img/image00834.jpeg)'
  id: totrans-1003
  prefs: []
  type: TYPE_IMG
  zh: '![警报](img/image00834.jpeg)'
- en: An Alert is defined with the class `.alert` on a `<div>` tag , from which contextual
    color variations can be set up, providing extra overriding classes such as `.alert-success`,
    `.alert-info`, or .`alert-error`.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 警报是在`<div>`标签上用`.alert`类定义的，可以设置上下文颜色变化，提供额外的覆盖类，如`.alert-success`、`.alert-info`或`.alert-error`。
- en: Badges and labels
  id: totrans-1005
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 徽章和标签
- en: 'Bootstrap labels are very nice for enriching content. They render particularly
    well in list or in tables. Find here an overview of the possible contextual variations:'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap标签非常适合丰富内容。它们在列表或表格中表现得特别好。在这里找到可能的上下文变化的概述：
- en: '![Badges and labels](img/image00835.jpeg)'
  id: totrans-1007
  prefs: []
  type: TYPE_IMG
  zh: '![徽章和标签](img/image00835.jpeg)'
- en: 'The labels here would be defined with:'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的标签将被定义为：
- en: '[PRE65]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The badges would be defined with:'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 徽章将被定义为：
- en: '[PRE66]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: There's more...
  id: totrans-1012
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is much more to Bootstrap than this *tiny* overview for enriching official
    documentation. Again, the official documentation is very well done and very comprehensible.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap还有比这个*小*概述更丰富的官方文档。再次强调，官方文档非常完善和易懂。
- en: Visit [http://getbootstrap.com](http://getbootstrap.com) for the documentation
    related to the latest supported version of the framework. Go to [http://getbootstrap.com/2.3.2](http://getbootstrap.com/2.3.2)
    for the documentation related to the version we use in our project.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://getbootstrap.com](http://getbootstrap.com)获取与框架的最新支持版本相关的文档。转到[http://getbootstrap.com/2.3.2](http://getbootstrap.com/2.3.2)获取与我们项目中使用的版本相关的文档。
- en: We will implement more features in the coming chapters and care will be taken
    to highlight them wherever possible.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中实现更多功能，并且将尽可能地突出它们。
- en: See also
  id: totrans-1016
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: If you like Bootstrap and feel you want to use it in your projects, you must
    consider Version 3.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢Bootstrap，并且希望在你的项目中使用它，你必须考虑版本3。
- en: Tip
  id: totrans-1018
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Bootstrap 3 is not directly retro-compatible with Bootstrap 2 but it implements
    a very similar gridding system and slightly different markups.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 3与Bootstrap 2不是直接兼容的，但它实现了一个非常相似的网格系统和略有不同的标记。
- en: '**Bootstrap 3 new features**: Here''s a preview of important changes from Bootstrap
    2 to Bootstrap 3.'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 3的新功能：这里是从Bootstrap 2到Bootstrap 3的重要变化的预览。
- en: '**New flat-styled design**: The new design is easily noticeable with the end
    of 3D and textures on buttons, navbars and other menus. They have now gone for
    a new flat style with no gradients. It certainly goes along with the actual global
    design trend.'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的扁平化设计：新设计很容易注意到，按钮、导航栏和其他菜单的3D和纹理已经消失。他们现在采用了新的扁平风格，没有渐变。这确实符合当前的全球设计趋势。
- en: '**Column naming span* renamed to col-***: In addition to the row-fluid class
    that is no longer available as such (all rows are now fluid automatically) for
    less confusion, the column naming pattern has been rethought for more consistency.'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列命名跨度重命名为col-：除了不再作为row-fluid类（现在所有行都自动是流体的）的混淆，列命名模式已经重新思考，以获得更一致性。
- en: '**Mobile-first**: The responsive features of the framework are now natively
    included in the `bootstrap.js` and `bootstrap.css` files (there is no more `bootstrap-responsive.js`
    or `bootstrap-responsive.css`). It is now possible to drive media-query duties
    directly from the DOM using a set of new device-specific classes.'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动优先：框架的响应特性现在原生地包含在`bootstrap.js`和`bootstrap.css`文件中（不再有`bootstrap-responsive.js`或`bootstrap-responsive.css`）。现在可以直接从DOM使用一组新的设备特定类来驱动媒体查询任务。
- en: Displaying a model in the View, using the JSTL
  id: totrans-1024
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中显示模型，使用JSTL
- en: This recipe shows how to populate the Spring MVC View with data and how to render
    this data within the View.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例显示了如何使用数据填充Spring MVC视图以及如何在视图中呈现这些数据。
- en: Getting ready
  id: totrans-1026
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: At this point, we don't have any real data to be displayed in our View. For
    this purpose, we have created three DTOs and two service layers that are injected
    from their Interface into the controller.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们没有任何真实的数据要在我们的视图中显示。为此，我们创建了三个DTO和两个服务层，它们从它们的接口注入到控制器中。
- en: There are two dummy service implementations that are designed to produce a fake
    set of data. We will use the **Java Server Tags Library** (**JSTL**) and the **JSP
    Expression Language** (**JSP EL**) to render the server data in the right places
    in our JSP.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个虚拟的服务实现，旨在生成一组虚假数据。我们将使用**Java Server Tags Library**（**JSTL**）和**JSP Expression
    Language**（**JSP EL**）在我们的JSP中的正确位置呈现服务器数据。
- en: How to do it...
  id: totrans-1029
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'After checking out the `v2.x.x` branch (in the previous recipe), a couple of
    new components are now showing-up in the **cloudstreetmarket-core** module: two
    interfaces, two implementations, one enum, and three DTOs. The code is as follows:'
  id: totrans-1030
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检出`v2.x.x`分支（在上一个示例中），**cloudstreetmarket-core**模块中现在显示了一些新组件：两个接口，两个实现，一个枚举和三个DTO。代码如下：
- en: '[PRE67]'
  id: totrans-1031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'As you can see they refer to the three created DTOs:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它们指的是三个创建的DTO：
- en: '[PRE68]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This last DTO refers to the `Action` enum:'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一个DTO是指`Action`枚举：
- en: '[PRE69]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Also, the previously created `DefaultController` in `cloudstreetmarket-webapp`
    has been altered to look like:'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，之前创建的`cloudstreetmarket-webapp`中的`DefaultController`已经被修改为：
- en: '[PRE70]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'And there are the two dummy implementations:'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个虚拟实现：
- en: '[PRE71]'
  id: totrans-1039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The `index.jsp` has been altered with the addition of the following section
    below the graph container:'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.jsp`已经被修改，增加了以下部分在图表容器下面：'
- en: '[PRE72]'
  id: totrans-1041
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The market overview table, especially the body, has been added:'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 市场概览表，特别是主体部分，已经添加：
- en: '[PRE73]'
  id: totrans-1043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The container for the community activity has been added:'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 社区活动容器已添加：
- en: '[PRE74]'
  id: totrans-1045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'At the bottom of the file, a hardcoded set of JavaScript data is now populated
    from the server:'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件底部，现在从服务器填充了一组硬编码的JavaScript数据：
- en: '[PRE75]'
  id: totrans-1047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: How it works...
  id: totrans-1048
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These changes don't produce fundamental UI improvements but they shape the data
    supply for our View layer.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 这些改变并没有产生基本的UI改进，但它们塑造了我们视图层的数据供应。
- en: The approach to handle our data
  id: totrans-1050
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理我们的数据的方法
- en: We are going to review here the server side of the data-supply implementation.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里审查数据供应实现的服务器端。
- en: Injection of services via interfaces
  id: totrans-1052
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过接口注入服务
- en: Forecasting application needs to feed the frontpage in dynamic data, the choice
    has been made to inject two service layers `marketService` and `communityService`
    into the controller. The problem was that we don't yet have a proper Data Access
    layer. (This will be covered in [Chapter 4](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building
    a REST API for a Stateless Architecture"), *Building a REST API for a Stateless
    Architecture*!). We need the controller to be wired to render the front page though.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 预测应用需要为首页提供动态数据，选择将两个服务层`marketService`和`communityService`注入到控制器中。问题是我们还没有一个合适的数据访问层。（这将在[第4章](part0095.xhtml#aid-2QJ5E1
    "Chapter 4. Building a REST API for a Stateless Architecture")中讨论，*构建无状态架构的REST
    API*！）。尽管如此，我们需要控制器连接以呈现首页。
- en: Wiring the controller needs to be loosely coupled to its service layers. With
    the idea of creating dummy Service implementations in this chapter, the wiring
    has been designed using interfaces. We then rely on Spring to inject the expected
    implementations in the service dependencies, typed with the relevant Interfaces.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的连接需要与其服务层松散耦合。在本章中创建虚拟服务实现的想法下，使用接口设计了连接。然后依赖Spring来注入预期的实现到服务依赖中，使用相关接口进行类型化。
- en: '[PRE76]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Note the types `IMarketService` and `ICommunityService`, which are not `DummyCommunityServiceImpl`
    nor `DummyMarketServiceImpl`. Otherwise, we would be tied to these types when
    switching to real implementations.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意类型`IMarketService`和`ICommunityService`，它们不是`DummyCommunityServiceImpl`或`DummyMarketServiceImpl`。否则，当切换到真实实现时，我们将受到这些类型的限制。
- en: How does Spring choose the dummy implementations?
  id: totrans-1057
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring如何选择虚拟实现？
- en: 'It chooses these implementations in the **cloudstreetmarket-core** Spring context
    file: `csmcore-config.xml`. We have defined the beans earlier:'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 它在**cloudstreetmarket-core** Spring上下文文件中选择这些实现：`csmcore-config.xml`。我们之前定义了这些bean：
- en: '[PRE77]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Spring scans all the types matching the root package `edu.zipcloud.cloudstreetmarket.core`
    to find stereotypes and configuration annotations.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: Spring扫描与根包`edu.zipcloud.cloudstreetmarket.core`匹配的所有类型，以查找构造型和配置注解。
- en: 'In the same way that `DefaultController` is marked with the `@Controller` annotation,
    our two dummy implementation classes are marked with `@Service`, which is a Spring
    Stereotype. Among the detected stereotypes and beans, the dummy implementations
    are the only ones available for the injection configuration:'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 与`DefaultController`标记为`@Controller`注解的方式相同，我们的两个虚拟实现类标记为`@Service`，这是一个Spring构造型。在检测到的构造型和bean中，虚拟实现是唯一可用于注入配置的实现：
- en: '[PRE78]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: With only one respective match per field, Spring picks them up without any extra-configuration.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: Spring只需每个字段匹配一个相应的类型，就可以自动识别，无需额外配置。
- en: DTOs to be used in View layer
  id: totrans-1064
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DTOs用于视图层
- en: We have made use of DTOs for the variables fetched in our JSPs. Exposed DTOs
    can be particularly useful in web services when it comes to maintaining several
    versions simultaneously. More generally, DTOs are implemented when the target
    and destination objects differ significantly.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在JSP中获取的变量中使用了DTOs。在同时维护多个版本时，暴露的DTOs在Web服务中特别有用。更一般地，当目标和目的对象有显著差异时，实现了DTOs。
- en: We will implement **Entities** later. It is better not to make use of these
    **Entities** in the rendering or version-specific logic, but instead defer them
    to a layer dedicated to this purpose.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍后实现**实体**。最好不要在呈现或特定版本的逻辑中使用这些**实体**，而是将它们推迟到专门用于此目的的层。
- en: Although, it must be specified that creating a DTO layer produces a fair amount
    of boilerplate code related to type conversion (impacting both sides, other layers,
    tests, and so on).
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管必须指出，创建DTO层会产生大量与类型转换相关的样板代码（影响其他层、测试等）。
- en: Dummy service implementations
  id: totrans-1068
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 虚拟服务实现
- en: The `DummyMarketServiceImpl` implementation with the `getLastDayMarketActivity`
    method builds an activity map (made of static daily times associated to values
    for the market, the index). It returns a new `DailyMarketActivityDTO` instance
    (built from this map), it is in the end a wrapper carrying the daily activity
    for one single market or Index such as DAX 30.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '`DummyMarketServiceImpl`实现了`getLastDayMarketActivity`方法，构建了一个活动地图（由静态每日时间关联到市场、指数的值）。它返回一个新的`DailyMarketActivityDTO`实例（从这个地图构建），它最终是一个包含单个市场或指数的每日活动的包装，比如DAX
    30。'
- en: The `getLastDayMarketsOverview` method returns a list of `MarketOverviewDTOs`
    also constructed from hardcoded data. It emulates an overview of daily activities
    for a couple of markets (indices).
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '`getLastDayMarketsOverview`方法返回一个`MarketOverviewDTOs`列表，也是从硬编码数据构建的。它模拟了一些市场（指数）的每日活动概况。'
- en: The `DummyCommunityServiceImpl` implementation with its `getLastUserPublicActivity`
    method returns a list of instantiated `UserActivityDTO`, which simulates the last
    six logged user activities.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '`DummyCommunityServiceImpl`实现了`getLastUserPublicActivity`方法，返回一个实例化的`UserActivityDTO`列表，模拟了最近六次用户活动。'
- en: Populating the Model in the controller
  id: totrans-1072
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在控制器中填充模型
- en: Presenting the possible method-handler arguments in the first recipe of this
    chapter, we have seen that it can be injected-as-argument a Model. This Model
    can be populated with data within the method and it will be transparently passed
    to the expected View.
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一个示例中介绍了可能的方法处理程序参数，我们已经看到可以注入一个Model。这个Model可以在方法内部填充数据，并且会透明地传递到预期的视图中。
- en: That is what we have done in the `fallback` method-handler. We have passed the
    three results from the Service layers into three variables `dailyMarketActivity`,
    `dailyMarketsActivity`, and `recentUserActivity` so they can be available in the
    View.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在`fallback`方法处理程序中所做的。我们已经将服务层的三个结果传递给了三个变量`dailyMarketActivity`，`dailyMarketsActivity`和`recentUserActivity`，以便它们可以在视图中使用。
- en: Rendering variables with the JSP EL
  id: totrans-1075
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用JSP EL渲染变量
- en: The JSP Expression Language allows us to access application data stored in **JavaBeans
    components**. The notation `${…}` used to access variables such as `${recentUserActivity}`
    or `${dailyMarketActivity.marketShortName}` is typically a JSP EL notation.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: JSP表达式语言允许我们访问存储在**JavaBeans组件**中的应用程序数据。`${...}`表示访问变量，例如`${recentUserActivity}`或`${dailyMarketActivity.marketShortName}`通常是JSP
    EL表示法。
- en: An important point to remember when we want to access the attributes of an object
    (like `marketShortName` for `dailyMarketActivity`) is that the object class must
    offer JavaBeans standard getters for the targeted attributes.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要访问对象的属性（比如`dailyMarketActivity`的`marketShortName`）时，一个重要的要点是对象类必须为目标属性提供JavaBeans标准的getter。
- en: 'In other words, `dailyMarketActivity.marketShortName` refers in the `MarketOverviewDTO`
    class to an expected:'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，`dailyMarketActivity.marketShortName`在`MarketOverviewDTO`类中指的是一个期望的：
- en: '[PRE79]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Implicit objects
  id: totrans-1080
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 隐式对象
- en: The JSP EL also offers implicit objects, usable as shortcuts in the JSP without
    any declaration or prepopulation in the model. Among these implicit objects, the
    different scopes pageScope, requestScope, sessionScope, and applicationScope reflect
    maps of attributes in the related scope.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: JSP EL还提供了隐式对象，可以作为JSP中的快捷方式使用，无需在模型中声明或预填充。在这些隐式对象中，不同的范围pageScope、requestScope、sessionScope和applicationScope反映了相关范围中属性的映射。
- en: 'For example, consider the following attributes:'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下属性：
- en: '[PRE80]'
  id: totrans-1083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'These could respectively be accessed in the JSP with:'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以在JSP中分别访问：
- en: '[PRE81]'
  id: totrans-1085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Other useful implicit objects are the map of request headers: `header` (that
    is, `${header["Accept-Encoding"]}`), the map of request cookies: `cookies` (that
    is, `${cookie["SESSIONID"].value}`), the map of request parameters: `param` (that
    is, `${param["paramName"]}`) or the map of context initialization parameters (from
    `web.xml`) `initParam` (that is, `${initParam["ApplicationID"]}`).'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的隐式对象是请求头的映射：`header`（即`${header["Accept-Encoding"]}`），请求cookie的映射：`cookies`（即`${cookie["SESSIONID"].value}`），请求参数的映射：`param`（即`${param["paramName"]}`）或者上下文初始化参数的映射（来自`web.xml`）`initParam`（即`${initParam["ApplicationID"]}`）。
- en: 'Finally, the JSP EL provides a couple of basic operators:'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，JSP EL提供了一些基本运算符：
- en: '**Arithmetic**: `+`, `-` (binary), `*`, `/` and `div`, `%` and `mod`, `-` (unary).'
  id: totrans-1088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算术**：`+`，`-`（二进制），`*`，`/`和`div`，`%`和`mod`，`-`（一元）。'
- en: '**Logical**: `and`, `&&`, `or`, `||`, `not`, `!`.'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑**：`and`，`&&`，`or`，`||`，`not`，`!`。'
- en: '**Relational**: `==`, `eq`, `!=`, `ne`, `<`, `lt`, `>`, `gt`, `<=`, `ge`, `>=`,
    `le`.'
  id: totrans-1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系**：`==`，`eq`，`!=`，`ne`，`<`，`lt`，`>`，`gt`，`<=`，`ge`，`>=`，`le`。'
- en: Comparisons can be made against other values, or against Boolean, String, integer,
    or floating point literals.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 可以与其他值或布尔值、字符串、整数或浮点数文字进行比较。
- en: '**Empty**: The empty operator is a prefix operation that can be used to determine
    whether a value is null or empty.'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Empty**：空操作符是一个前缀操作，用于确定值是否为null或空。'
- en: '**Conditional**: `A ? B : C`.'
  id: totrans-1093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '条件：`A ? B : C`。'
- en: Evaluate `B` or `C`, depending on the result of the evaluation of `A`.
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 根据对`A`的评估结果，评估`B`或`C`。
- en: This description of operators comes from the JavaEE 5 tutorial.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作符的描述来自于JavaEE 5教程。
- en: Rendering variables with the JSTL
  id: totrans-1096
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用JSTL渲染变量
- en: The **JSP Standard Tag Library** (**JSTL**) is a collection of tools for JSP
    pages. It is not really a brand new feature of Java web but it is still used.
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSP标准标签库**（**JSTL**）是用于JSP页面的一组工具。它并不是Java web的全新功能，但仍然在使用中。'
- en: The tags the most used are probably Core and I18N when we need a display logic,
    or when we need to format data or to build a hierarchy in the View layer.
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要显示逻辑或者需要在视图层格式化数据或构建层次结构时，最常用的标签可能是Core和I18N。
- en: '| Area | Function | Tags | Description |'
  id: totrans-1099
  prefs: []
  type: TYPE_TB
  zh: '| 区域 | 功能 | 标签 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-1100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `Core` | `Variable support` | `c:set``c:remove` | Set/unset a variable from
    a scope. |'
  id: totrans-1101
  prefs: []
  type: TYPE_TB
  zh: '| `Core` | `变量支持` | `c:set``c:remove` | 从范围中设置/取消设置变量。 |'
- en: '| `Flow control` | `c:choose``c:when``c:otherwise` | Implements a conditional
    block IF/THEN/ELSE. |'
  id: totrans-1102
  prefs: []
  type: TYPE_TB
  zh: '| `流程控制` | `c:choose``c:when``c:otherwise` | 实现条件块IF/THEN/ELSE。 |'
- en: '| `c:if` | Implements a conditional IF block. |'
  id: totrans-1103
  prefs: []
  type: TYPE_TB
  zh: '| `c:if` | 实现条件IF块。 |'
- en: '| `c:forEach` | Iterates over collection types. |'
  id: totrans-1104
  prefs: []
  type: TYPE_TB
  zh: '| `c:forEach` | 遍历集合类型。 |'
- en: '| `c:forTokens` | Iterates over tokens, separated by provided delimiters. |'
  id: totrans-1105
  prefs: []
  type: TYPE_TB
  zh: '| `c:forTokens` | 遍历由提供的分隔符分隔的令牌。 |'
- en: '| `URL management` | `c:import``c:param` | Resolves a URL, imports its content
    into a page, a variable (var) or a variable reader (varReader). Can pass parameters
    to the underlying resource with param. |'
  id: totrans-1106
  prefs: []
  type: TYPE_TB
  zh: '| `URL管理` | `c:import``c:param` | 解析URL，将其内容导入页面、变量（var）或变量读取器（varReader）。可以使用param将参数传递给底层资源。
    |'
- en: '| `c:redirect``c:param` | Redirects to a URL. Can pass parameters. |'
  id: totrans-1107
  prefs: []
  type: TYPE_TB
  zh: '| `c:redirect``c:param` | 重定向到URL。可以传递参数。 |'
- en: '| `c:url``c:param` | Creates a URL. Can assign parameters. |'
  id: totrans-1108
  prefs: []
  type: TYPE_TB
  zh: '| `c:url``c:param` | 创建URL。可以分配参数。 |'
- en: '| `Miscellaneous` | `c:catch` | Catches any throwable that happens in its block.
    |'
  id: totrans-1109
  prefs: []
  type: TYPE_TB
  zh: '| `杂项` | `c:catch` | 捕获其块中发生的任何可抛出的异常。 |'
- en: '| `c:out` | Fetches an expression or a variable. |'
  id: totrans-1110
  prefs: []
  type: TYPE_TB
  zh: '| `c:out` | 获取表达式或变量。 |'
- en: '| `I18N` | `Setting Locale` | `fmt:setLocale``fmt:requestEncoding` | Stores
    a Locale in a specific scope.Sets the Encoding type for the HTTP requests of the
    page. |'
  id: totrans-1111
  prefs: []
  type: TYPE_TB
  zh: '| `I18N` | `设置Locale` | `fmt:setLocale``fmt:requestEncoding` | 在特定范围内存储Locale。设置页面的HTTP请求的编码类型。
    |'
- en: '| `Messaging` | `fmt:bundle``fmt:message``fmt:param``fmt:setBundle` | Sets
    bundles for a specific tag or scope.Retreives a message, output its content, pass
    optional parameters. |'
  id: totrans-1112
  prefs: []
  type: TYPE_TB
  zh: '| `消息传递` | `fmt:bundle``fmt:message``fmt:param``fmt:setBundle` | 为特定标签或范围设置bundle。检索消息，输出其内容，传递可选参数。
    |'
- en: '| `Number and Date Formatting` | `fmt:formatNumber``fmt:formatDate``fmt:parseDate``fmt:parseNumber``fmt:setTimeZone``fmt:timeZone`
    | Outputs different contents in different formats. Parse dates and number.Sets
    timezone for a specific tag or scope. |'
  id: totrans-1113
  prefs: []
  type: TYPE_TB
  zh: '| `数字和日期格式化` | `fmt:formatNumber``fmt:formatDate``fmt:parseDate``fmt:parseNumber``fmt:setTimeZone``fmt:timeZone`
    | 以不同格式输出不同内容。解析日期和数字。为特定标签或范围设置时区。 |'
- en: 'These presented tags are not the only capabilities of the JSTL, visit the Java
    EE tutorial for more details:'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些介绍的标签并不是JSTL的唯一功能，访问Java EE教程以获取更多详细信息：
- en: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html)'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html)'
- en: Taglib directives in JSPs
  id: totrans-1116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JSP中的Taglib指令
- en: 'If we plan to make use of one or the other of the above tags, we first need
    to include the suited directive(s) in the JSP page:'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计划使用上述任何一个标签，我们首先需要在JSP页面中包含适当的指令：
- en: '[PRE82]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: There's more...
  id: totrans-1119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: More about JSP EL
  id: totrans-1120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于JSP EL的更多信息
- en: There is more features covered by the JSP EL. Feel free to read the Oracle tutorials
    such as [http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html).
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: JSP EL还涵盖了更多功能。请随时阅读Oracle教程，比如[http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html)。
- en: More about the JavaBeans standard
  id: totrans-1122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于JavaBeans标准的更多信息
- en: 'We have talked about the expected JavaBean standard when using the JSP EL.
    More information about JavaBeans can be found in the Oracle tutorial again:'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JSP EL时，我们已经谈到了预期的JavaBean标准。关于JavaBeans的更多信息可以再次在Oracle教程中找到：
- en: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html)'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html)'
- en: More about the JSTL
  id: totrans-1125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于JSTL的更多信息
- en: 'As announced, you can discover more modules of the JSTL on the Java EE tutorial:'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如宣布的那样，您可以在Java EE教程中发现JSTL的更多模块：
- en: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html)'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html)'
- en: Defining a common WebContentInterceptor
  id: totrans-1128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个通用的WebContentInterceptor
- en: In this recipe, we will highlight how we have implemented a `WebContentInterceptor`
    superclass for Controllers.
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将重点介绍我们如何为控制器实现了一个`WebContentInterceptor`超类。
- en: Getting ready
  id: totrans-1130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are about to present a Controller superclass having the specificity of being
    registered as a `WebContentInterceptor`. This superclass allows us to globally
    control sessions and to manage caching options.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍一个控制器超类，具有作为`WebContentInterceptor`注册的特性。这个超类允许我们全局控制会话并管理缓存选项。
- en: It will help us understanding the request lifecycle throughout the Framework
    and through other potential interceptors.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 它将帮助我们理解整个框架和其他潜在拦截器的请求生命周期。
- en: How to do it...
  id: totrans-1133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Registering a default `WebContentInterceptor` with its specific configuration
    can be done entirely with the configuration approach:'
  id: totrans-1134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用特定配置注册默认的`WebContentInterceptor`可以完全通过配置方法完成：
- en: '[PRE83]'
  id: totrans-1135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Tip
  id: totrans-1136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In our application, we have registered custom `WebContentInterceptors` to override
    the behaviors of the default one.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们已经注册了自定义的`WebContentInterceptors`来覆盖默认的行为。
- en: 'In the codebase, still from the previously checked-out `v2.x.x` branch, a new
    `cloudstreetApiWCI` class can be found in `cloudstreetmarket-api`:'
  id: totrans-1138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码库中，仍然从先前检出的`v2.x.x`分支中，可以在`cloudstreetmarket-api`中找到一个新的`cloudstreetApiWCI`类：
- en: '[PRE84]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'A similar `CloudstreetWebAppWCI` is also present in **cloudstreetmarket-webapp**:'
  id: totrans-1140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-webapp**中也有一个类似的`CloudstreetWebAppWCI`：
- en: '[PRE85]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'In **cloudstreetmarket-webapp**, `DefaultController` and `InfoTagController`
    now both inherit `CloudstreetWebAppWCI`:'
  id: totrans-1142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-webapp**中，`DefaultController`和`InfoTagController`现在都继承自`CloudstreetWebAppWCI`：
- en: '[PRE86]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'In **cloudstreetmarket-webapp** the `dispatcher-context.xml` context file registers
    the interceptor:'
  id: totrans-1144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-webapp**中，`dispatcher-context.xml`上下文文件注册了拦截器：
- en: '[PRE87]'
  id: totrans-1145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'In the **cloudstreetmarket-api**, `dispatcher-context.xml`, the other interceptor
    has also been registered:'
  id: totrans-1146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-api**的`dispatcher-context.xml`中，另一个拦截器也已经注册：
- en: '[PRE88]'
  id: totrans-1147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Finally, in both `dispatcher-context.xml`, the `RequestMappingHandlerAdapter`
    bean has been given the `synchronizeOnSession` property:'
  id: totrans-1148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`dispatcher-context.xml`中，`RequestMappingHandlerAdapter` bean已经设置了`synchronizeOnSession`属性：
- en: '[PRE89]'
  id: totrans-1149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: How it works...
  id: totrans-1150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In each web module, we have created a superclass for Controllers. In the **cloudstreetmarket-webapp**
    module for example, both `InfoTagController` and `DefaultController` now inherit
    the `CloudstreetWebAppWCI` superclass.
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个web模块中，我们都为控制器创建了一个超类。例如，在**cloudstreetmarket-webapp**模块中，`InfoTagController`和`DefaultController`现在都继承自`CloudstreetWebAppWCI`超类。
- en: Common behaviors for Controllers
  id: totrans-1152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器的常见行为
- en: Beyond the `WebContentInterceptor` capabilities, it is more than a good practice
    to share common logic and attributes between controllers if they relate to configuration
    (application or business); the idea is to avoid creating another service layer.
    We will see with further implementations that it is a good place for defining
    user contexts.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`WebContentInterceptor`的功能，如果它们与配置（应用程序或业务）相关，共享公共逻辑和属性是一个很好的做法；这样可以避免创建另一个服务层。我们将在进一步的实现中看到，这是一个定义用户上下文的好地方。
- en: A `WebContentInterceptor` through its `WebContentGenerator` superclass offers
    useful request and session management tools that we are going to present now.
    As an interceptor, it must be registered declaratively. This is the reason why
    we have added two `<mvc:interceptors>` entries in our context files.
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其`WebContentGenerator`超类，`WebContentInterceptor`提供了有用的请求和会话管理工具，我们现在将介绍。作为拦截器，它必须以声明方式注册。这就是为什么我们在上下文文件中添加了两个`<mvc:interceptors>`条目的原因。
- en: Global session control
  id: totrans-1155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局会话控制
- en: A `WebContentInterceptor`, handling requests provides the ability to control
    how the application should react with HTTP sessions.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`WebContentInterceptor`，处理请求提供了控制应用程序如何与HTTP会话交互的能力。
- en: Requiring sessions
  id: totrans-1157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 需要会话
- en: The `WebContentInterceptor` through `WebContentGenerator` offers the `setRequireSession(boolean)`
    method. This allows defining whether or not a session should be required when
    handling a request.
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebContentInterceptor`通过`WebContentGenerator`提供了`setRequireSession(boolean)`方法。这允许定义处理请求时是否需要会话。'
- en: If there is no session bound to the request (if the session has expired for
    example), the controller will throw a `SessionRequiredException` method. In such
    cases, it is good to have a global `ExceptionHandler` defined. We will set up
    a global exception mapper when we will build the REST API. By default, the sessions
    are not required.
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求没有绑定到会话（例如，会话已过期），控制器将抛出`SessionRequiredException`方法。在这种情况下，最好定义一个全局的`ExceptionHandler`。我们将在构建REST
    API时设置全局异常映射器。默认情况下，不需要会话。
- en: Synchronizing sessions
  id: totrans-1160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 同步会话
- en: Another interesting feature comes with the `synchronizeOnSession` property that
    we have set to true in the `RequestMappingHandlerAdapter` definition. When set
    it to true, the session object is serialized and access to it is made in a synchronized
    block. This allows concurrent access to identical sessions and avoids issues that
    sometimes occur when using multiple browser windows or tabs.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的特性是我们在`RequestMappingHandlerAdapter`定义中将`synchronizeOnSession`属性设置为true。当设置为true时，会话对象被序列化，并且在同步块中进行访问。这允许对相同会话进行并发访问，并避免在使用多个浏览器窗口或选项卡时有时会发生的问题。
- en: Cache-header management
  id: totrans-1162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存头管理
- en: With the `setCacheSeconds(int)` method that we have used in the constructors
    of `CloudstreetWebAppWCI` and `CloudstreetApiWCI`; the `WebContentInterceptor`
    with `WebContentGenerator` can manage a couple of HTTP response headers related
    to caching.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`CloudstreetWebAppWCI`和`CloudstreetApiWCI`的构造函数中使用了`setCacheSeconds(int)`方法；`WebContentInterceptor`与`WebContentGenerator`可以管理与缓存相关的一些HTTP响应头。
- en: Set to zero, it adds the extra headers in the response such as Pragma, Expires,
    Cache-control, and so on.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为零，会在响应中添加额外的头，如Pragma、Expires、Cache-control等。
- en: 'We have also defined custom caching for static files at the configuration level:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在配置级别为静态文件定义了自定义缓存：
- en: '[PRE90]'
  id: totrans-1166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: All our static resources are cached in this way for 24 hours, thanks to the
    native `WebContentInterceptor.preHandle` method.
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的静态资源都是以这种方式缓存的，有效期为24小时，这要归功于原生的`WebContentInterceptor.preHandle`方法。
- en: HTTP method support
  id: totrans-1168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP方法支持
- en: 'We have also defined a high-level restriction for HTTP methods. It can be narrowed
    down by the `@RequestMapping` method attribute at the Controller level. Accessing
    a disallowed method will result in `405 HTTP error: Method not supported`.'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为HTTP方法定义了高级限制。可以通过控制器级别的`@RequestMapping`方法属性进行缩小。访问不允许的方法将导致`405 HTTP错误：方法不受支持`。
- en: A high-level interceptor
  id: totrans-1170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级拦截器
- en: In the Interceptor registration in `dispatcher-context.xml`, we haven't defined
    a path mapping for the interceptor to operate on. It is because by default Spring
    applies the double wildcard operator `/**` on such standalone interceptor definitions.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dispatcher-context.xml`中的拦截器注册中，我们没有为拦截器定义操作的路径映射。这是因为默认情况下，Spring在这种独立的拦截器定义上应用双通配符操作符`/**`。
- en: 'It is not because we have made `DefaultController`, extending an interceptor,
    that the interceptor is acting on the Controller `@RequestMapping` path. The interceptor''s
    registration is only made through configuration. If the covered path mapping needs
    to be modified, we could override our registration in the following way:'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是因为我们让`DefaultController`扩展了一个拦截器，拦截器就会在控制器的`@RequestMapping`路径上起作用。拦截器的注册只是通过配置进行的。如果需要修改覆盖的路径映射，我们可以以以下方式覆盖我们的注册：
- en: '[PRE91]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: We have also overridden the `WebContentInterceptor` method's `preHandle`, `postHandle`,
    and `afterCompletion`. It will allow us later to define common business related
    operations before and after the Controller request handling.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还重写了`WebContentInterceptor`方法的`preHandle`、`postHandle`和`afterCompletion`。这将允许我们在控制器请求处理之前和之后定义常见的业务相关操作。
- en: Request lifecycle
  id: totrans-1175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求生命周期
- en: 'Throughout the interceptor(s), each request is processed according to the following
    lifecycle:'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 在拦截器的整个过程中，每个请求都按照以下生命周期进行处理：
- en: Prepare the request's context
  id: totrans-1177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备请求的上下文
- en: Locate the Controller's handler
  id: totrans-1178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定位控制器的处理程序
- en: Execute interceptor's preHandle methods
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行拦截器的`preHandle`方法
- en: Invoke the Controller's handler
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用控制器的处理程序
- en: Execute interceptor's `postHandle` methods
  id: totrans-1181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行拦截器的`postHandle`方法
- en: Handle the Exceptions
  id: totrans-1182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理异常
- en: Process the View
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理视图
- en: Execute interceptor's `afterCompletion` methods
  id: totrans-1184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行拦截器的`afterCompletion`方法
- en: 'To better understand the sequence, especially when Exceptions occur, the following
    workflow is very useful:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解顺序，特别是在发生异常时，以下工作流程非常有用：
- en: '![Request lifecycle](img/image00836.jpeg)'
  id: totrans-1186
  prefs: []
  type: TYPE_IMG
  zh: '![请求生命周期](img/image00836.jpeg)'
- en: '*Reference: Spring And Hibernate by Santosh Kumar K.*'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '*参考：Santosh Kumar K.的Spring和Hibernate*'
- en: 'From this diagram, you can see that:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个图表中，你可以看到：
- en: The controller handler is invoked, unless one of the interceptors' `preHandle`
    methods throws an exception.
  id: totrans-1189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用控制器的处理程序，除非其中一个拦截器的`preHandle`方法抛出异常。
- en: An interceptor's `postHandle` method is called when the controller's handler
    finishes without throwing an exception and if no preceding `postHandler` method
    has thrown an exception.
  id: totrans-1190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当控制器的处理程序完成而没有抛出异常，并且没有前面的`postHandler`方法抛出异常时，将调用拦截器的`postHandle`方法。
- en: An interceptor's `afterCompletion` is always called, unless a preceding `afterCompletion`
    throws an exception.
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非前面的`afterCompletion`抛出异常，否则总是调用拦截器的`afterCompletion`。
- en: Obviously, if no Interceptor is registered, the same sequence applies, skipping
    the interceptors' steps.
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果没有注册拦截器，同样的顺序适用，跳过拦截器的步骤。
- en: There is more...
  id: totrans-1193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is more to say about the `WebContentGenerator` class.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`WebContentGenerator`类还有更多要说。
- en: More features offered by WebContentGenerator
  id: totrans-1195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WebContentGenerator提供的更多功能
- en: 'Again, `WebContentGenerator` is a superclass of `WebContentInterceptor`. From
    its JavaDoc page: [http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html)
    you can find the following for example:'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`WebContentGenerator`是`WebContentInterceptor`的超类。从其JavaDoc页面：[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html)
    您可以找到例如以下内容：
- en: Three constants (String) `METHOD_GET`, `METHOD_POST`, and `METHOD_HEAD` refer
    to the values `GET`, `POST`, and `HEAD`
  id: totrans-1197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个常量（String）`METHOD_GET`，`METHOD_POST`和`METHOD_HEAD`分别指代`GET`，`POST`和`HEAD`的值
- en: Some caching specific methods such as `setUseExpiresHeader`, `setUseCacheControlHeader`,
    `setUseCacheControlNoStore`, `setAlwaysMustRevalidate`, and `preventCaching`
  id: totrans-1198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些特定于缓存的方法，如`setUseExpiresHeader`，`setUseCacheControlHeader`，`setUseCacheControlNoStore`，`setAlwaysMustRevalidate`和`preventCaching`
- en: 'Also, with `WebApplicationObjectSupport`, `WebContentGenerator` provides:'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过`WebApplicationObjectSupport`，`WebContentGenerator`提供：
- en: Access to `ServletContext` out of the request or response object through `getServletContext()`.
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getServletContext()`从请求或响应对象中访问`ServletContext`。
- en: Access to the temporary directory for the current web application, as provided
    by the servlet container through `getTempDir()`.
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getTempDir()`从当前Web应用程序的临时目录访问，由Servlet容器提供。
- en: Access to the `WebApplicationContext` through `getWebApplicationContext()`.
  id: totrans-1202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getWebApplicationContext()`访问`WebApplicationContext`。
- en: Also, a couple of tools to set and initialize the `ServletContext` and the `WebApplicationContext`,
    even if these tools are initially intended for use within the Framework itself.
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，还有一些工具可以设置和初始化`ServletContext`和`WebApplicationContext`，即使这些工具最初是用于Framework内部使用的。
- en: See also...
  id: totrans-1204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: We quickly passed through web caching. There are a lot of customizations and
    standards in this domain. Also, a new `RequestMappingHandlerAdapter` has been
    created with Spring MVC 3.1\. It will be helpful to understand the change.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快就通过了Web缓存。在这个领域有很多定制和标准。此外，Spring MVC 3.1中还创建了一个新的`RequestMappingHandlerAdapter`。这将有助于理解这一变化。
- en: Web caching
  id: totrans-1206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web缓存
- en: 'Find out more about web caching through this very complete caching tutorial:'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个非常完整的缓存教程了解更多关于Web缓存的信息：
- en: '[https://www.mnot.net/cache_docs](https://www.mnot.net/cache_docs)'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.mnot.net/cache_docs](https://www.mnot.net/cache_docs)'
- en: New support classes for @RequestMapping since Spring MVC 3.1
  id: totrans-1209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring MVC 3.1以来的新的@RequestMapping支持类
- en: We have used the `RequestMappingHandlerAdapter` with its bean definition in
    `dispatcher-context.xml`. This bean is a new feature with Spring MVC 3.1 and has
    replaced the former `AnnotationMethodHandlerAdapter`. Also, the support class
    `DefaultAnnotationHandlerMapping` has now been replaced by `RequestMappingHandlerMapping`.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`dispatcher-context.xml`中使用了`RequestMappingHandlerAdapter`及其bean定义。这个bean是Spring
    MVC 3.1的一个新特性，取代了以前的`AnnotationMethodHandlerAdapter`。此外，支持类`DefaultAnnotationHandlerMapping`现在已被`RequestMappingHandlerMapping`取代。
- en: We will go deeper into `RequestMappingHandlerAdapter` in [Chapter 4](part0095.xhtml#aid-2QJ5E1
    "Chapter 4. Building a REST API for a Stateless Architecture"), *Building a REST
    API for a Stateless Architecture*.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building a REST API for a Stateless
    Architecture")中更深入地了解`RequestMappingHandlerAdapter`，*为无状态架构构建REST API*。
- en: 'In the meantime, you can read the official change note:'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，您可以阅读官方的变更说明：
- en: '[http://docs.spring.io/spring-framework/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-31-vs-30](http://docs.spring.io/spring-framework/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-31-vs-30)'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-framework/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-31-vs-30](http://docs.spring.io/spring-framework/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-31-vs-30)'
- en: Designing a client-side MVC pattern with AngularJS
  id: totrans-1214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AngularJS设计客户端MVC模式
- en: This recipe explains the installation and the configuration of AngularJS to
    manage a single-page web application.
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程解释了安装和配置AngularJS来管理单页Web应用程序。
- en: Getting ready
  id: totrans-1216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we explain how we got rid of the rendering logic introduced
    previously in the JSPs to build the DOM. We will now rely on AngularJS for this
    job.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将解释如何摆脱先前在JSP中引入的渲染逻辑来构建DOM。我们现在将依赖AngularJS来完成这项工作。
- en: Even if we don't have yet a REST API that our frontend could query, we will
    temporarily make the JSP build the needed JavaScript objects as if they were provided
    by the API.
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们还没有一个REST API，我们的前端可以查询，我们暂时会让JSP构建所需的JavaScript对象，就好像它们是由API提供的一样。
- en: AngularJS is an open source Web application Framework. It provides support for
    building single-page applications that can directly accommodate microservice architecture
    requirements. The first version of AngularJS was released in 2009\. It is now
    maintained by Google and an open source community.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS是一个开源的Web应用程序框架。它支持构建可以直接满足微服务架构要求的单页应用程序。AngularJS的第一个版本于2009年发布。现在由Google和开源社区维护。
- en: AngularJS is a whole topic in itself. As a Framework, it's deep and wide at
    the same time. Trying to present it as a whole would take us beyond the scope
    of this book and wouldn't really suit our approach.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS本身就是一个完整的话题。作为一个框架，它既深又广。试图将其作为一个整体呈现将超出本书的范围，也不太适合我们的方法。
- en: For this reason, we are going to highlight details, features, and characteristics
    of the Framework that we can use to our advantage for the application.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将重点介绍Framework的细节、特性和特点，以便我们可以利用它们来开发应用程序。
- en: How to do it...
  id: totrans-1222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Setting up the DOM and creating modules
  id: totrans-1223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置DOM和创建模块
- en: 'Still from the previously checked-out `v2.x.x` branch, the `index.jsp` file
    has been added an Angular directive to the HTML tag:'
  id: totrans-1224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然是之前检出的`v2.x.x`分支，`index.jsp`文件已经添加了一个Angular指令到HTML标签中：
- en: '[PRE92]'
  id: totrans-1225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The AngularJS JavaScript library (angular.min.js from [https://angularjs.org](https://angularjs.org))
    has been placed in the `cloudstreetmarket-webapp/src/main/webapp/js` directory.
  id: totrans-1226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AngularJS JavaScript库（来自[https://angularjs.org](https://angularjs.org)的angular.min.js）已放置在`cloudstreetmarket-webapp/src/main/webapp/js`目录中。
- en: 'The `index.jsp` file has been added a wrapper `landingGraphContainerAndTools`
    div around `landingGraphContainer`, a select box and an `ng-controller="homeFinancialGraphController"`:'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.jsp`文件在`landingGraphContainer`周围添加了一个包装器`landingGraphContainerAndTools`
    div，一个选择框和一个`ng-controller="homeFinancialGraphController"`：'
- en: '[PRE93]'
  id: totrans-1228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The whole tableMarketPrices div has been reshaped in the following way:'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 整个tableMarketPrices div已经以以下方式重新塑造：
- en: '[PRE94]'
  id: totrans-1230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Then, the `<div id="divRss3">` div has received significant refactoring:'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`<div id="divRss3">` div已经进行了重大的重构：
- en: '[PRE95]'
  id: totrans-1232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The graph generation section has disappeared, and it is now replaced with:'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 图表生成部分已经消失，现在被替换为：
- en: '[PRE96]'
  id: totrans-1234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'This graph generation has been externalized in one of the three custom JavaScript
    files, included with the declarations:'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表生成已经外部化在其中一个三个自定义的JavaScript文件中，包括声明：
- en: '[PRE97]'
  id: totrans-1236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: We are going to see those three custom JavaScript files next.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将看到这三个自定义的JavaScript文件。
- en: Defining the module's components
  id: totrans-1238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义模块的组件
- en: As introduced, three custom JavaScript files are located in the `cloudstreetmarket-webapp/src/main/webapp/js`
    directory.
  id: totrans-1239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，三个自定义的JavaScript文件位于`cloudstreetmarket-webapp/src/main/webapp/js`目录中。
- en: 'The first one, `home_financial_graph.js`, relates to the graph. It creates
    a factory whose ultimate role is to pull and provide data:'
  id: totrans-1240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个文件`home_financial_graph.js`与图表相关。它创建了一个工厂，其最终作用是拉取和提供数据：
- en: '[PRE98]'
  id: totrans-1241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'This same file also creates a controller:'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的文件还创建了一个控制器：
- en: '[PRE99]'
  id: totrans-1243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The second file: `home_financial_table.js` relates to the markets overview
    table. Just like `home_financial_graph.js`, it creates a factory:'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个文件：`home_financial_table.js`与市场概览表相关。就像`home_financial_graph.js`一样，它创建了一个工厂：
- en: '[PRE100]'
  id: totrans-1245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The `home_financial_table.js` file also have its own controller:'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '`home_financial_table.js`文件也有自己的控制器：'
- en: '[PRE101]'
  id: totrans-1247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The third and last file, `home_community_activity.js` relates to the community
    activity table. It defines a factory:'
  id: totrans-1248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个也是最后一个文件`home_community_activity.js`与社区活动表相关。它定义了一个工厂：
- en: '[PRE102]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'And its controller:'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 以及它的控制器：
- en: '[PRE103]'
  id: totrans-1251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: How it works...
  id: totrans-1252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To understand better how our AngularJS deployment works, we will see how AngularJS
    is started and how our Angular module (app) is started. Then, we will discover
    the AngularJS Controllers and factories and finally the implemented Angular directives.
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解我们的AngularJS部署是如何工作的，我们将看到AngularJS是如何启动的，以及我们的Angular模块（应用程序）是如何启动的。然后，我们将了解AngularJS控制器和工厂，最后是实现的Angular指令。
- en: One app per HTML document
  id: totrans-1254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个HTML文档只能有一个应用程序
- en: AngularJS is automatically initialized when the DOM is loaded.
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 当DOM加载时，AngularJS会自动初始化。
- en: Note
  id: totrans-1256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Document Object Model** (**DOM**) is the cross-platform convention for
    interacting with HTML, XHTML objects. When the browser loads a web page, it creates
    a Document Object Model of this page.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型**（**DOM**）是与HTML、XHTML对象交互的跨平台约定。当浏览器加载网页时，它会创建该页面的文档对象模型。'
- en: AngularJS looks up the DOM for an `ng-app` declaration in order to bind a module
    against a DOM element and start (autobootstrap) this module. Only one application
    (or module) can be autobootstrapped per HTML document.
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS会查找DOM中的`ng-app`声明，以便将模块绑定到DOM元素并启动（自动引导）该模块。每个HTML文档只能自动引导一个应用程序（或模块）。
- en: We can still define more than one application per document and bootstrap them
    manually, though, if required. But the AngularJS community drives us towards binding
    an app to an HTML or BODY tag.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然可以为每个文档定义多个应用程序，并在需要时手动引导它们。但是，AngularJS社区推动我们将应用程序绑定到HTML或BODY标记。
- en: Module autobootstrap
  id: totrans-1260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块自动引导
- en: 'Our application is autobootstrapped because it''s referenced in the HTML tag:'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序是自动引导的，因为它在HTML标记中被引用：
- en: '[PRE104]'
  id: totrans-1262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Also, because the module has been created (directly in a `<script>` element
    of the HTML document):'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 还有，因为模块已经创建（直接在HTML文档的`<script>`元素中）：
- en: '[PRE105]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Tip
  id: totrans-1265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note the empty array in the module creation; it allows the injection of dependencies
    into the module. We will detail the AngularJS dependency injection shortly.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 注意模块创建中的空数组；它允许将依赖项注入到模块中。我们将很快详细介绍AngularJS依赖注入。
- en: Manual module bootstrap
  id: totrans-1267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 手动模块引导
- en: 'As introduced before, we can bootstrap an app manually, especially if we want
    to control the initialization flow, or if we have more than one app per document.
    The code is as follows:'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以手动引导应用程序，特别是如果我们想要控制初始化流程，或者如果我们在一个文档中有多个应用程序。代码如下：
- en: '[PRE106]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: AngularJS Controllers
  id: totrans-1270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AngularJS控制器
- en: AngularJS controllers are the central piece of the Framework. They monitor all
    the data changes occurring on the frontend. A controller is bound to a DOM element
    and corresponds to a functional and visual area of the screen.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS控制器是框架的核心部分。它们监视前端发生的所有数据变化。控制器绑定到DOM元素，对应于屏幕的功能和视觉区域。
- en: At the moment, we have defined three controllers for the market graph, the markets
    list, and for the community activity feed. We will also need controllers for the
    menus and for the footer elements.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经为市场图表、市场列表和社区活动订阅定义了三个控制器。我们还需要为菜单和页脚元素定义控制器。
- en: '![AngularJS Controllers](img/image00837.jpeg)'
  id: totrans-1273
  prefs: []
  type: TYPE_IMG
  zh: '![AngularJS控制器](img/image00837.jpeg)'
- en: 'The DOM binding is operated with the directive''s ng-controller:'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: DOM绑定是通过指令的ng-controller操作的：
- en: '[PRE107]'
  id: totrans-1275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Each controller has a scope and this scope is being passed as a function-argument
    on the controller''s declaration. We can read and alter it as an object:'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控制器都有一个作用域，这个作用域作为函数参数传递给控制器的声明。我们可以将其作为对象读取和更改：
- en: '[PRE108]'
  id: totrans-1277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Bidirectional DOM-scope binding
  id: totrans-1278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 双向DOM-scope绑定
- en: The scope is synchronized with the DOM area the controller is bound to. AngularJS
    manages a bidirectional data-binding between the DOM and the controller's scope.
    This is probably the most important AngularJS feature to understand.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域与控制器绑定的DOM区域同步。AngularJS管理DOM和控制器作用域之间的双向数据绑定。这可能是理解AngularJS最重要的特性。
- en: Tip
  id: totrans-1280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The AngularJS model is the controller's scope object. Unlike Backbone.js, for
    example, there is not really a view layer in Angular since the model is directly
    reflected in the DOM.
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS模型是控制器的作用域对象。与Backbone.js不同，例如，Angular中没有真正的视图层，因为模型直接反映在DOM中。
- en: The content of a scope variable can be rendered in the DOM using the `{{…}}`
    notation. For example, the `$scope.example` variable can be fetched in the DOM
    with `{{example}}`.
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`{{...}}`符号在DOM中呈现作用域变量的内容。例如，`$scope.example`变量可以在DOM中使用`{{example}}`获取。
- en: AngularJS directives
  id: totrans-1283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AngularJS指令
- en: The directives are also a famous feature of AngularJS. They provide the ability
    of attaching directly to the DOM some. We can create our own directives or use
    built-in ones.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 指令也是AngularJS的一个著名特性。它们提供了直接附加到DOM的能力。我们可以创建自己的指令或使用内置的指令。
- en: We will try to visit as many directives as we can along this book. For the moment,
    we have used the following.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尽量在本书中讨论尽可能多的指令。目前，我们已经使用了以下指令。
- en: ng-repeat
  id: totrans-1286
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ng-repeat
- en: 'In order to iterate the `communityActivities` and `financialMarkets` collections,
    we define a local variable name as part of the loop and each item is accessed
    individually with the `{{…}}` notation. The code is as follows:'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 为了迭代`communityActivities`和`financialMarkets`集合，我们在循环中定义一个本地变量名称，并使用`{{...}}`符号单独访问每个项目。
    代码如下：
- en: '[PRE109]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: ng-if
  id: totrans-1289
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ng-if
- en: This directive allows removing, creating, or recreating an entire DOM element
    or DOM hierarchy depending on a condition.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令允许根据条件删除、创建或重新创建整个DOM元素或DOM层次结构。
- en: In the next example, the `{{value.defaultProfileImage}}` variable only renders
    the CSS class `".ico-user"` when the user doesn't have a custom profile image
    (in order to display a default generic profile picture).
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，当用户没有自定义配置文件图片时，`{{value.defaultProfileImage}}`变量只会呈现CSS类`".ico-user"`（以显示默认的通用配置文件图片）。
- en: 'When the user has a profile picture, the `value.urlProfilePicture` variable
    is therefore populated, the `ng-if` condition is satisfied, and the `<img>` element
    is created in the DOM. The code is as follows:'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户有配置文件图片时，`value.urlProfilePicture`变量因此被填充，`ng-if`条件得到满足，并且在DOM中创建`<img>`元素。
    代码如下：
- en: '[PRE110]'
  id: totrans-1293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: AngularJS factories
  id: totrans-1294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AngularJS工厂
- en: 'Factories are used to obtain new object instances. We have used factories as
    data generator. We will also use them as services coordinator and intermediate
    layer between the services and Controller. The Services will pull the data from
    the server APIs. The code is as follows:'
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂被用来获取新的对象实例。我们已经将工厂用作数据生成器。我们还将把它们用作服务协调员和服务与控制器之间的中间层。服务将从服务器API中拉取数据。 代码如下：
- en: '[PRE111]'
  id: totrans-1296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'In this factory, we define two functions: `pull()` and `fetchData()` that populate
    and retrieve the data:'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个工厂中，我们定义了两个函数：`pull()`和`fetchData()`来填充和检索数据：
- en: '[PRE112]'
  id: totrans-1298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Once the controller is loaded, it will `pull()` and `fetchData()` into the `$scope.communityActivities`.
    These operations are in this case executed only once.
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦控制器加载，它将`pull()`和`fetchData()`到`$scope.communityActivities`。这些操作在这种情况下只执行一次。
- en: Tip
  id: totrans-1300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Our factories are injected as dependencies into our controller declarations:'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工厂被注入为依赖项到我们的控制器声明中：
- en: cloudStreetMarketApp.controller(`'homeCommunityActivityController'`, function
    `($scope`, `communityFactory`)
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: cloudStreetMarketApp.controller(`'homeCommunityActivityController'`，function
    `($scope`，`communityFactory`)
- en: Dependency injection
  id: totrans-1303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 依赖注入
- en: In our factories, controllers, and module definitions, we use AngularJS Dependency
    Injection to handle the components' lifecycle and their dependencies.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工厂、控制器和模块定义中，我们使用AngularJS依赖注入来处理组件的生命周期和它们的依赖关系。
- en: 'AngularJS uses an injector to perform the configured injections. There are
    three ways of annotating dependencies to make them eligible for injection:'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS使用注入器执行配置的注入。有三种注释依赖的方式使它们符合注入的条件：
- en: 'Using the inline array annotation:'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内联数组注释：
- en: '[PRE113]'
  id: totrans-1307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Using the `$inject` property annotation:'
  id: totrans-1308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`$inject`属性注释：
- en: '[PRE114]'
  id: totrans-1309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Using the implicit annotation mode from the function parameter names:'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数参数名称的隐式注释模式：
- en: '[PRE115]'
  id: totrans-1311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: While we have been using mostly the implicit annotation style and the inline
    array annotation style, we have to highlight the fact that the implicit annotation
    dependency injection will not work using JavaScript minification.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们主要使用了隐式注释样式和内联数组注释样式，但我们必须强调隐式注释依赖注入在使用JavaScript缩小时将无法工作。
- en: There's more...
  id: totrans-1313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As you may imagine, this has been a quick introduction of AngularJS. We will
    discover more of it in-situ when we have a REST API and more features in our application.
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能想象的那样，这是对AngularJS的一个快速介绍。当我们的应用程序有一个REST API和更多功能时，我们将在现场发现更多关于它的内容。
- en: AngularJS is becoming very popular and an active community is supporting it.
    Its core idea and implementation, based on an explicit DOM, provide a radical
    and simplified way of getting in touch with an application.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS变得非常流行，一个活跃的社区正在支持它。它的核心思想和实现，基于显式的DOM，提供了一种与应用程序联系的激进和简化的方式。
- en: 'The documentation is very detailed: [https://docs.angularjs.org](https://docs.angularjs.org).'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 文档非常详细：[https://docs.angularjs.org](https://docs.angularjs.org)。
- en: 'There are loads of tutorials and videos on the web:'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上有大量的教程和视频：
- en: '[http://www.w3schools.com/angular](http://www.w3schools.com/angular)'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.w3schools.com/angular](http://www.w3schools.com/angular)'
- en: '[http://tutorials.jenkov.com/angularjs](http://tutorials.jenkov.com/angularjs)'
  id: totrans-1319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tutorials.jenkov.com/angularjs](http://tutorials.jenkov.com/angularjs)'
- en: '[https://egghead.io](https://egghead.io)'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://egghead.io](https://egghead.io)'
- en: Chapter 3. Working with Java Persistence and Entities
  id: totrans-1321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用Java持久性和实体
- en: 'In this chapter, we will develop the following recipes:'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发以下配方：
- en: Configuring the **Java Persistence API** (**JPA**) in Spring
  id: totrans-1323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring中配置**Java持久性API**（**JPA**）
- en: Defining useful EJB3 entities and relationships
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义有用的EJB3实体和关系
- en: Making use of the JPA and Spring Data JPA
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用JPA和Spring Data JPA
- en: Introduction
  id: totrans-1326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The **Java Persistence API** (**JPA**) is a specification that has been produced
    in different releases from 2006 (JPA 1.0) to 2013 (JPA 2.1) by a group of various
    experts. Historically, it is one of the three pieces of the EJB 3.0 specification,
    which has come along with JEE5.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java持久化API**（**JPA**）是一个规范，从2006年（JPA 1.0）到2013年（JPA 2.1）由一组各种专家发布了不同版本。从历史上看，它是EJB
    3.0规范的三个部分之一，它随JEE5一起出现。'
- en: More than an upgrade of **Enterprise JavaBeans** (**EJB**), JPA was pretty much
    a complete redesign. At the time, the leading providers of Object Relational Mapping
    solution (such as Hibernate) and of J2EE application servers (such as WebSphere,
    JBoss) have been involved, and the global result has been unarguably simpler.
    All the types of EJBs (stateful, stateless, and entities) are now simple **Plain
    Old Java Objects** (**POJOs**) that are enriched with specific metadata that is
    nicely presented as annotations.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: JPA不仅仅是**企业JavaBean**（**EJB**）的升级，它在很大程度上是一次完全的重新设计。当时，领先的对象关系映射解决方案提供商（如Hibernate）和J2EE应用服务器提供商（如WebSphere，JBoss）都参与其中，全局结果无疑更简单。所有类型的EJB（有状态的，无状态的和实体）现在都是简单的**普通的旧Java对象**（**POJOs**），它们被特定的元数据丰富，这些元数据以注解的形式呈现。
- en: The Entities' benefits
  id: totrans-1329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体的好处
- en: Entities play a key role in the EJB3 model. As simple POJOs, they can be used
    in every single layer of the application.
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 实体在EJB3模型中扮演着关键角色。作为简单的POJO，它们可以在应用程序的每一层中使用。
- en: Ideally, an entity represents an identifiable functional unit within a business
    domain. The norm is to make an entity representing a database table row. As simple
    POJOs, entities can rely on inheritance (the IS-A relationship) and can have attributes
    (the HAS-A relationship), just as a database schema is normally be described with.
    Through these relationships, an entity establishes connections with other Entities.
    These connections are described with `@Annotations`, which make the entity metadata.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，一个实体代表着业务领域内可识别的功能单元。通常是使一个实体代表数据库表行。作为简单的POJO，实体可以依赖继承（IS-A关系）并且可以有属性（HAS-A关系），就像数据库模式通常描述的那样。通过这些关系，实体与其他实体建立连接。这些连接用`@Annotations`描述，这些注解构成了实体的元数据。
- en: An entity must be seen as the application-equivalent element of a database table
    row. JPA allows to operate this element and its whole ecosystem as a Java object
    hierarchy and to persist it as such.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 实体必须被视为数据库表行的应用程序等价元素。JPA允许操作这个元素及其整个生态系统作为Java对象层次结构，并将其持久化为这样的对象。
- en: Entities have brought an amazing radicalization of the persistence layer (by
    decreasing the number of hardcoded SQL queries to be maintained), and also the
    simplification of the service and transformation layers. Being able to pass through
    all the levels (they are used even in views), they dramatically drive the domain-specific
    names and concepts used within the application (methods, classes, and attributes).
    They indirectly focus on the essentials, and impose consistency between application
    concepts and database concepts.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 实体已经带来了对持久化层的惊人革新（通过减少需要维护的硬编码SQL查询的数量），以及对服务和转换层的简化。能够通过所有层级（甚至在视图中使用），它们极大地驱动了应用程序中使用的领域特定名称和概念（方法，类和属性）。它们间接地专注于基本要素，并在应用程序概念和数据库概念之间强加一致性。
- en: It is obviously a plus to have a solid and well-thought schema from the beginning.
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始就拥有一个坚实而深思熟虑的模式显然是一个加分项。
- en: Note
  id: totrans-1335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JPA brings amazing performance and maintainability results on UI applications.
    However, it may not always suit performance expectations if it is used to accomplish
    batches or bulk database operations. It can sometimes be sensible to instead consider
    direct JDBC accesses.
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: JPA在UI应用程序上带来了惊人的性能和可维护性结果。然而，如果用于执行批处理或大量数据库操作，它可能并不总是符合性能期望。有时候，考虑直接使用JDBC访问可能更明智。
- en: The Entity manager and its persistence context
  id: totrans-1337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体管理器及其持久化上下文
- en: We have seen that an entity can have relations with other entities. In order
    for us to be able to operate on an entity (read from a database, update, delete,
    and persist), there is a background API that generates the preparation of SQL
    queries. This API in a persistence provider (Hibernate, Toplink, and so on) is
    the EntityManager. Once it loads the object for the purpose of the application,
    we can trust it to manage its life cycle.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到实体可以与其他实体有关系。为了我们能够对实体进行操作（从数据库中读取，更新，删除和持久化），有一个后台API生成SQL查询的准备工作。这个API在持久化提供者（Hibernate，Toplink等）中被称为EntityManager。一旦它为应用程序加载了对象，我们就可以信任它来管理其生命周期。
- en: There are a couple of concepts attached to the EntityManager that we need to
    review before moving forward. An entity is managed once the EntityManager gets
    an instance of it from a database read (explicit or implicit). The JPA persistence
    context is formed by the conceptual aggregation of the whole set of managed entities.
    A persistence context will always carry no more than one instance of an entity
    discriminated by its identifier (`@Id` or a unique ID class).
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要回顾一下与EntityManager相关的一些概念。一旦EntityManager从数据库读取（显式或隐式）获取了实体的实例，该实体就被管理。JPA持久化上下文由整个受管理实体集的概念聚合形成。持久化上下文始终只携带一个实体的实例，通过其标识符（`@Id`或唯一ID类）进行区分。
- en: If, for some reason, an entity is not managed, it is said to be detached (understand
    detached from the persistence context).
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，一个实体没有被管理，那么它被称为脱管（即脱离持久化上下文）。
- en: Configuring the Java Persistence API in Spring
  id: totrans-1341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring中配置Java持久化API
- en: Now that we have introduced JPA, its role, and the benefits of using Entities,
    we can now focus on how to configure our Spring application to handle them.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了JPA，它的作用以及使用实体的好处，我们现在可以专注于如何配置我们的Spring应用程序来处理它们。
- en: Getting ready
  id: totrans-1343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we said earlier, the JPA is a specification. Choosing a persistence provider
    (Hibernate, OpenJPA, TopLink, and so on) or a database provider for an application
    won't be a commitment as long as they match the standards.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，JPA是一个规范。选择持久性提供程序（Hibernate、OpenJPA、TopLink等）或应用程序的数据库提供程序不会成为承诺，只要它们符合标准。
- en: 'We will see that our JPA configuration in Spring is done by defining two beans:
    **datasource** and **entityManagerFactory**. Then, the optional `Spring Data JPA`
    library offers a `JPA` repository abstraction that is able to surprisingly simplify
    some database operations.'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到，在Spring中，我们的JPA配置是通过定义两个bean来完成的：**dataSource**和**entityManagerFactory**。然后，可选的`Spring
    Data JPA`库提供了一个`JPA`存储库抽象，能够令一些数据库操作出人意料地简化。
- en: How to do it...
  id: totrans-1346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: From the **Git Perspective** in Eclipse, check out the latest version of the
    `v3.x.x` branch.
  id: totrans-1347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse的**Git Perspective**中，检出`v3.x.x`分支的最新版本。
- en: 'As previously introduced, we have added a couple of beans to the Spring configuration
    file (in the core module) `csmcore-config.xml`:'
  id: totrans-1348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所介绍的，我们已经在Spring配置文件（核心模块中的`csmcore-config.xml`）中添加了一些bean：
- en: '[PRE116]'
  id: totrans-1349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Finally, the following dependencies have been added to the parent and core
    projects:'
  id: totrans-1350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，以下依赖项已添加到父项目和核心项目中：
- en: '`org.springframework.data:spring-data-jpa` (1.0.2.RELEASE)'
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.data:spring-data-jpa` (1.0.2.RELEASE)'
- en: '`org.hibernate.javax.persistence:hibernate-jpa-2.0-api` (1.0.1.Final)'
  id: totrans-1352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.hibernate.javax.persistence:hibernate-jpa-2.0-api` (1.0.1.Final)'
- en: '`org.hibernate:hibernate-core` (4.1.5.SP1)'
  id: totrans-1353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.hibernate:hibernate-core` (4.1.5.SP1)'
- en: 'Adding this dependency causes the Maven enforcer plugin to raise a version
    conflict with `jboss-logging`. This is why jboss-logging has been excluded from
    this third-party library and referenced as a dependency on its own:'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此依赖项会导致Maven强制执行插件与`jboss-logging`引发版本冲突。这就是为什么jboss-logging已从这个第三方库中排除，并作为自己的依赖项引用的原因：
- en: '`org.hibernate:hibernate-entitymanager` (4.1.5.SP1)'
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.hibernate:hibernate-entitymanager` (4.1.5.SP1)'
- en: '`jboss-logging` has also been excluded from this third-party library because,
    it is now referenced as a dependency on its own:'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: '`jboss-logging`也已从这个第三方库中排除，因为它现在被引用为自己的依赖项：'
- en: '`org.jboss.logging:jboss-logging` (3.1.0.CR1)'
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jboss.logging:jboss-logging` (3.1.0.CR1)'
- en: '`org.hsqldb:hsqldb` (2.3.2)'
  id: totrans-1358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.hsqldb:hsqldb` (2.3.2)'
- en: '`org.javassist:javassist` (3.18.2-GA)'
  id: totrans-1359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.javassist:javassist` (3.18.2-GA)'
- en: '`org.apache.commons:commons-dbcp2` (2.0.1)'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons:commons-dbcp2` (2.0.1)'
- en: How it works...
  id: totrans-1361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are going to review these three configuration points: the **dataSource**
    bean, the **entityManagerFactory** bean, and Spring Data JPA.'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将审查这三个配置点：**dataSource** bean、**entityManagerFactory** bean和Spring Data JPA。
- en: The Spring-managed DataSource bean
  id: totrans-1363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 由Spring管理的DataSource bean
- en: Because creating a database connection is time consuming, especially through
    the network layers, and because it is sensible to share and reuse an opened connection
    or a connection pool, a **datasource** has the duty of optimizing the use of these
    connections. It is a scalability indicator and also a highly configurable interface
    between the database and the application.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 因为创建数据库连接是耗时的，特别是通过网络层，而且共享和重用已打开的连接或连接池是明智的，**数据源**有责任优化这些连接的使用。它是一个可扩展性指标，也是数据库和应用程序之间高度可配置的接口。
- en: In our example, Spring manages the datasource just as for any other bean. The
    datasource can be created through the application or can be accessed remotely
    from a JNDI lookup (if the choice is made of giving up the connection management
    to the container). In both cases, Spring will manage the configured bean, providing
    the proxy that our application needs.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，Spring管理数据源就像管理任何其他bean一样。数据源可以通过应用程序创建，也可以通过JNDI查找远程访问（如果选择放弃连接管理给容器）。在这两种情况下，Spring将管理配置的bean，提供我们的应用程序所需的代理。
- en: Also in our example, we are making use of the Apache Common DBCP 2 datasource
    (released in 2014).
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们正在使用于2014年发布的Apache Common DBCP 2数据源。
- en: Tip
  id: totrans-1367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In a production environment, it might be a good idea to switch to a JNDI-based
    datasource, such as the native Tomcat JDBC pool.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，切换到基于JNDI的数据源，例如本机Tomcat JDBC池，可能是一个好主意。
- en: The Tomcat website clearly suggests a significant gain in performance when using
    the Tomcat JDBC pool instead of DBCP1.x on highly concurrent systems.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat网站明确建议，在高并发系统上，使用Tomcat JDBC池而不是DBCP1.x可以显著提高性能。
- en: The EntityManagerFactory bean and its persistence unit
  id: totrans-1370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EntityManagerFactory bean及其持久单元
- en: As its name suggests, the `EntityManagerFactory` bean produces entity managers.
    The configuration of `EntityManagerFactory` conditions the entity manager behavior.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`EntityManagerFactory` bean生成实体管理器。`EntityManagerFactory`的配置条件了实体管理器的行为。
- en: The configuration of the `EntityManagerFactory` bean reflects the configuration
    of one persistence unit. In a Java EE environment, one or more persistent units
    can be defined and configured inside a `persistence.xml` file, which is unique
    in the application archive.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '`EntityManagerFactory` bean的配置反映了一个持久单元的配置。在Java EE环境中，可以在`persistence.xml`文件中定义和配置一个或多个持久单元，该文件在应用程序存档中是唯一的。'
- en: In a Java SE environment (our case), the presence of a `persistence.xml` file
    is made optional with Spring. The configuration of the `EntityManagerFactory`
    bean almost completely overrides the configuration of the persistence unit.
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java SE环境中（我们的情况），使用Spring可以使`persistence.xml`文件的存在变得可选。`EntityManagerFactory`
    bean的配置几乎完全覆盖了持久单元的配置。
- en: The configuration of a persistence unit, and, therefore, of an `EntityManagerFactory`
    bean, can either declare the covered Entities individually or scan packages to
    find them.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 持久单元的配置，因此`EntityManagerFactory` bean的配置，可以声明覆盖的实体，也可以扫描包以找到它们。
- en: Note
  id: totrans-1375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A persistence unit can be seen as a subarea among the horizontal scaling ecosystem.
    A product can be broken down into wars (web archives) for each the functional
    area. Functional areas can be represented with a selection of Entities that are
    delimited by a persistence unit.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 持久性单元可以被视为水平扩展生态系统中的一个子区域。产品可以被分解为每个功能区域的war（web存档）。功能区域可以用持久性单元限定的一组实体来表示。
- en: The main point is to avoid creating Entities that overlap different persistence
    units.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的重点是避免创建与不同持久性单元重叠的实体。
- en: The Spring Data JPA configuration
  id: totrans-1378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Data JPA配置
- en: We are about to use some very useful tools from the Spring Data JPA project.
    These tools aim to simplify the development (and maintenance) of the persistence
    layers. The most interesting tool is probably the repository abstraction. You
    will see that providing implementations for some database queries can be optional.
    An implementation of the repository interface will be generated at runtime from
    the method signatures if they match a standard in their declarations.
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Spring Data JPA项目中的一些非常有用的工具。这些工具旨在简化持久性层的开发（和维护）。最有趣的工具可能是存储库抽象。您将看到，为一些数据库查询提供实现可能是可选的。如果它们的声明符合标准，存储库接口的实现将在运行时从方法签名中生成。
- en: 'For example, Spring will infer the implementation of the following method `signature`
    (if the `User` entity has a `String userName` field):'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Spring将推断以下方法`signature`的实现（如果`User`实体具有`String userName`字段）：
- en: '[PRE117]'
  id: totrans-1381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'A more extended example of our bean configuration on Spring Data JPA could
    be the following:'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA上我们的bean配置的更详细的例子可能是以下内容：
- en: '[PRE118]'
  id: totrans-1383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'As you can see, Spring Data JPA contains a custom namespace that allows us
    to define the following repository beans. This namespace can be configured as
    follow:'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Spring Data JPA包含一个自定义命名空间，允许我们定义以下存储库bean。可以按照以下方式配置此命名空间：
- en: Providing a `base-package` attribute in this namespace is mandatory to restrict
    the lookup for Spring Data repositories.
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个命名空间中提供`base-package`属性是强制性的，以限制Spring Data repositories的查找。
- en: Providing an `entity-manager-factory-ref` attribute is optional if you have
    only one `EntityManagerFactory` bean configured in `ApplicationContext`. It explicitly
    wires `EntityManagerFactory`, which is to be used with the detected repositories.
  id: totrans-1386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供`entity-manager-factory-ref`属性是可选的，如果在`ApplicationContext`中只配置了一个`EntityManagerFactory`
    bean。它明确地连接`EntityManagerFactory`，用于检测到的repositories。
- en: Providing a `transaction-manager-ref` attribute is also optional if you have
    only one `PlatformTransactionManager` bean configured in `ApplicationContext`.
    It explicitly wires `PlatformTransactionManager`, which is to be used with the
    detected repositories.
  id: totrans-1387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在`ApplicationContext`中只配置了一个`PlatformTransactionManager` bean，提供`transaction-manager-ref`属性也是可选的。它明确地连接`PlatformTransactionManager`，用于检测到的repositories。
- en: 'More details can be found about this configuration on the project website at:'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此配置的更多详细信息，请访问项目网站：
- en: '[http://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html](http://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html).'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html](http://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html)。'
- en: See also
  id: totrans-1390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**HikariCP DataSource**: HikariCP (from its BoneCP ancestor) is an open source
    Apache v2 licensed project. It appears to perform better in speed and reliability
    than any other DataSource. This product should probably be considered considered
    when choosing a datasource nowadays. Refer to [https://brettwooldridge.github.io/HikariCP](https://brettwooldridge.github.io/HikariCP)
    for more information on this.'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HikariCP DataSource**：HikariCP（从其BoneCP祖先）是一个开源的Apache v2许可项目。它似乎在速度和可靠性方面表现比任何其他数据源都要好。在选择数据源时，现在可能应该考虑这个产品。有关更多信息，请参阅[https://brettwooldridge.github.io/HikariCP](https://brettwooldridge.github.io/HikariCP)。'
- en: Defining useful EJB3 entities and relationships
  id: totrans-1392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义有用的EJB3实体和关系
- en: This topic is critical because a well-designed mapping prevents errors, saves
    a lot of time and has a big impact on performance.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题很重要，因为良好设计的映射可以防止错误，节省大量时间，并对性能产生重大影响。
- en: Getting ready
  id: totrans-1394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we are going to present most of the Entities that we needed
    for the application. A couple of implementation techniques (from inheritance types
    to relationship cases) have been chosen here and highlighted for example purposes.
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍大部分我们应用程序所需的实体。这里选择了一些实现技术（从继承类型到关系案例），并且为了示例目的进行了突出显示。
- en: The *How it works…* section will explain why and how things are defined in the
    way they are and what were the thoughts that drove us toward the Entities' definitions
    we made.
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '*它是如何工作的…*部分将解释为什么以及如何定义它们的方式，以及是什么思想驱使我们朝着我们所做的实体定义的方向前进。'
- en: How to do it...
  id: totrans-1397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps will help you create Entities in the application:'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您在应用程序中创建实体：
- en: 'All the changes from this recipe are located in the new package `edu.zipcloud.cloudstreetmarket.core.entities`.
    First, created three simple entities as shown here:'
  id: totrans-1399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个配方的所有更改都位于新包`edu.zipcloud.cloudstreetmarket.core.entities`中。首先，按照这里所示创建了三个简单的实体：
- en: 'The `User` entity:'
  id: totrans-1400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`实体：'
- en: '[PRE119]'
  id: totrans-1401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The `Transaction` entity:'
  id: totrans-1402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Transaction`实体：'
- en: '[PRE120]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'And the `Market` entity:'
  id: totrans-1404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有`Market`实体：
- en: '[PRE121]'
  id: totrans-1405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Then, we have created some more complex entity Types such as the abstract `Historic`
    entity:'
  id: totrans-1406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建了一些更复杂的实体类型，比如抽象的`Historic`实体：
- en: '[PRE122]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'We have also created the two Historic subtypes, `HistoricalIndex` and `HistoricalStock`:'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了两个Historic子类型，`HistoricalIndex`和`HistoricalStock`：
- en: '[PRE123]'
  id: totrans-1409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Then, we also created the `Product` entity with its StockProduct subtypes:'
  id: totrans-1410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还创建了带有其StockProduct子类型的`Product`实体：
- en: '[PRE124]'
  id: totrans-1411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'In reality, in the financial world, an index (S&P 500 or NASDAQ) cannot be
    bought as such; therefore, indices haven’t been considered as products:'
  id: totrans-1412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际上，在金融世界中，指数（标普500或纳斯达克）不能直接购买；因此，指数没有被视为产品：
- en: '[PRE125]'
  id: totrans-1413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Finally, the `Quote` abstract entity with its two subtypes, `StockQuote` and
    `IndexQuote`, have created (indices are not products, but we can still get instant
    snapshots from them, and the Yahoo! financial data provider will later be called
    to get these instant quotes):'
  id: totrans-1414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，具有两个子类型`StockQuote`和`IndexQuote`的`Quote`抽象实体已经创建（指数不是产品，但我们仍然可以从中获得即时快照，并且稍后将调用Yahoo!财务数据提供商来获取这些即时报价）：
- en: '[PRE126]'
  id: totrans-1415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: How it works...
  id: totrans-1416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We are going to go through some basic and more advanced concepts that we have
    used to build our relational mapping.
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍一些基本和更高级的概念，这些概念我们用来构建我们的关系映射。
- en: Entity requirements
  id: totrans-1418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实体要求
- en: 'An entity, to be considered as such by the API requires the following conditions:'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 要被API视为实体，实体需要满足以下条件：
- en: It has to be annotated on The type level with the `@Entity` annotation.
  id: totrans-1420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须在类型级别上用`@Entity`注解进行注释。
- en: It needs to have a defined **identifier** with either a basic or a complex type.
    In most cases, a basic identifier is sufficient (the `@Id` annotation on a specific
    entity field).
  id: totrans-1421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要具有已定义的**标识符**，可以是基本类型或复杂类型。在大多数情况下，基本标识符就足够了（在特定实体字段上的`@Id`注解）。
- en: It must be defined as public and not declared as final.
  id: totrans-1422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须被定义为public并且不能声明为final。
- en: It needs to have a default constructor (implicit or not).
  id: totrans-1423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要有一个默认构造函数（隐式或非隐式）。
- en: Mapping the schema
  id: totrans-1424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射模式
- en: Both databases and Java objects have specific concepts. The metadata annotations
    for Entities, along with the configuration by default, describe the relational
    mapping.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库和Java对象都有特定的概念。实体的元数据注解以及默认配置描述了关系映射。
- en: Mapping tables
  id: totrans-1426
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 映射表
- en: An entity class maps a table. Not specifying a `@Table(name="xxx")` annotation
    on the Type level will map the entity class to the table named with the entity
    name (this is the default naming).
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类映射一个表。在类型级别上不指定`@Table(name="xxx")`注解将实体类映射到以实体名称命名的表（这是默认命名）。
- en: Note
  id: totrans-1428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Java's class-naming standard is CamelCased with a capital case for the first
    letter. This naming scheme doesn't really match the database table-naming standards.
    For this reason, the `@Table` annotation is often used.
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: Java的类命名标准是驼峰式命名，首字母大写。这种命名方案实际上并不符合数据库表命名标准。因此，经常使用`@Table`注解。
- en: The `@Table` annotation also has an optional `schema` attribute, which allows
    us to bind the table to a schema in the SQL queries (for example `public.user.ID`).
    This `schema` attribute will override the default schema JPA property, which can
    be defined on the persistence unit.
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Table`注解还具有一个可选的`schema`属性，允许我们在SQL查询中将表绑定到模式（例如`public.user.ID`）。这个`schema`属性将覆盖默认的模式JPA属性，可以在持久性单元上定义。'
- en: Mapping columns
  id: totrans-1431
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 映射列
- en: As with the table names, the column name to map a field to is specified with
    the `@Column(name="xxx")` annotation. Again, this annotation is optional, and
    not specifying it will make the mapping fall back to the default naming scheme,
    which is literally the cased name of the field (in case of single words, it is
    often a good option).
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 与表名一样，将字段映射到列名是使用`@Column(name="xxx")`注解指定的。同样，这个注解是可选的，不指定将使映射回退到默认命名方案，即字段的大小写名称（在单词的情况下，这通常是一个不错的选择）。
- en: The fields of an entity class must not be defined as public. Also keep in mind
    that you can almost persist all the standard Java Types (primitive Types, wrappers,
    Strings, Bytes or Character arrays, and enumerated) and large numeric Types, such
    as `BigDecimals` or `BigIntegers`, but also JDBC temporal types (`java.sql.Date`,
    `java.sql.TimeStamp`) and even serializable objects.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类的字段不能定义为public。还要记住，几乎可以持久化所有标准的Java类型（原始类型、包装器、字符串、字节或字符数组和枚举）以及大型数值类型，如`BigDecimals`或`BigIntegers`，还有JDBC时间类型（`java.sql.Date`、`java.sql.TimeStamp`）甚至可序列化对象。
- en: Annotating fields or getters
  id: totrans-1434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注释字段或getter
- en: The fields of an entity (if not tagged as `@Transient`) correspond to the values
    that the database row will have for each column. A column mapping can also be
    defined from a getter (without necessarily having a corresponding field).
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 实体的字段（如果未标记为`@Transient`）对应于数据库行每列将具有的值。还可以从getter中定义列映射（而不一定要有相应的字段）。
- en: The `@Id` annotation defines the entity identifier. Also, defining this `@Id`
    annotation on a field or getter defines whether the table columns should be mapped
    by a field or on a by getters.
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Id`注解定义了实体标识符。同时，在字段或getter上定义这个`@Id`注解会定义表列是应该由字段还是getter映射的。'
- en: When using a getter access mode, and when a `@Column` annotation is not specified,
    the default naming scheme for the column name uses the JavaBeans property naming
    standard (for example, the `getUser()` getter would correspond to the `user` column).
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用getter访问模式时，如果未指定`@Column`注解，则列名的默认命名方案使用JavaBeans属性命名标准（例如，`getUser()` getter对应于`user`列）。
- en: Mapping primary keys
  id: totrans-1438
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 映射主键
- en: As we have seen already, the `@Id` annotation defines the entity's identifier.
    A persistence context will always manage no more than one instance of an entity
    with a single identifier.
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，`@Id`注解定义了实体的标识符。持久性上下文将始终管理具有单个标识符的实体的不超过一个实例。
- en: The `@Id` annotation on an entity class must map the persistent identifier for
    a table, which is the primary key.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Id`注解在实体类上必须映射表的持久标识符，即主键。'
- en: Identifier generation
  id: totrans-1441
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 标识符生成
- en: A `@GeneratedValue` annotation allows ID generation from the JPA level. This
    value may not be populated until the object is persisted.
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: '`@GeneratedValue`注解允许从JPA级别生成ID。在对象持久化之前，这个值可能不会被填充。'
- en: A `@GeneratedValue` annotation has a `strategy` attribute that is used to configure
    the generation method (to rely, for example, on existing database sequences).
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: '`@GeneratedValue`注解具有`strategy`属性，用于配置生成方法（例如，依赖于现有的数据库序列）。'
- en: Defining inheritance
  id: totrans-1444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义继承
- en: We have defined entity inheritance for subtypes of `Products`, `Historics`,
    and `Quotes`. When two Entities are close enough to be grouped into a single concept,
    and if they actually can be associated with a parent entity in the application,
    it is worth using the JPA inheritance.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为“产品”、“历史”和“报价”的子类型定义了实体继承。当两个实体足够接近以被分组为单一概念，并且如果它们实际上可以与应用程序中的父实体关联，那么值得使用JPA继承。
- en: Depending upon the persistence strategy for specific data, different storage
    options can be considered for inheritance mapping.
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 根据特定数据的持久化策略，可以考虑不同的存储选项来进行继承映射。
- en: The JPA allows us to configure an inheritance model from different strategies.
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: JPA允许我们从不同的策略中配置继承模型。
- en: The single-table strategy
  id: totrans-1448
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单表策略
- en: This strategy expects or creates one big table with a discriminator field on
    the schema. This table hosts the parent-entity fields; these are common to all
    subentities. It also hosts all the fields of subentity classes. Consequently,
    if an entity corresponds to one subtype or another, it will populate the specific
    fields and leave the others blank.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略期望或创建一个带有模式上的鉴别器字段的大表。这个表包含父实体字段；这些字段对所有子实体都是通用的。它还包含所有子实体类的字段。因此，如果一个实体对应于一个子类型或另一个子类型，它将填充特定字段并留下其他字段为空。
- en: 'The following table represents the `Historic` table with its `HISTORIC_TYPE`
    discriminator:'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格代表了具有其`HISTORIC_TYPE`鉴别器的`Historic`表：
- en: '![The single-table strategy](img/image00838.jpeg)'
  id: totrans-1451
  prefs: []
  type: TYPE_IMG
  zh: '![单表策略](img/image00838.jpeg)'
- en: The table-per-class strategy
  id: totrans-1452
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表格每类策略
- en: This strategy uses specific tables for concrete Entities. There is no discriminator
    involved here, just specific tables for subtypes. These tables carry both common
    and specific fields.
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略针对具体实体使用特定的表。这里没有涉及鉴别器，只是针对子类型的特定表。这些表包含通用和特定字段。
- en: 'We have, for example, implemented this strategy for the `Quote` entity and
    its concrete `StockQuote` and `IndexQuote` Entities:'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们已经为“报价”实体及其具体的“股票报价”和“指数报价”实体实施了这种策略：
- en: '![The table-per-class strategy](img/image00839.jpeg)'
  id: totrans-1455
  prefs: []
  type: TYPE_IMG
  zh: '![表格每类策略](img/image00839.jpeg)'
- en: Defining relationships
  id: totrans-1456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义关系
- en: Entities have the capability to reflect database foreign keys and table to table
    relationships in their class attributes.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 实体具有反映其类属性中的数据库外键和表与表之间关系的能力。
- en: On the application side, because these relationships are built transparently
    by the entity managers, a huge amount of developments are bypassed.
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序端，由于这些关系是由实体管理器透明地构建的，因此可以绕过大量的开发工作。
- en: How relationships between entities have been chosen
  id: totrans-1459
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实体之间的关系是如何选择的
- en: Before talking about relationships between entities, it is necessary to understand
    what we plan to do in the *cloudstreet-market* application.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论实体之间的关系之前，有必要了解我们计划在*cloudstreet-market*应用程序中做什么。
- en: As introduced in [Chapter 1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine
    for an Enterprise Spring Application"), Setup *Routine for an Enterprise Spring
    Application*, we will pull financial data from providers that open their APIs
    (Yahoo! actually). To do so, there are always limitations to keep in mind in terms
    of call frequency per IP or per authenticated user. Our application will also
    have its community inside of which financial data will be shared. For financial
    data providers, when talking about a given stock, the historical view of a stock
    and an instant quote of a stock are two different things. We had to deal with
    these two concepts to build our own data set.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第1章](part0079.xhtml#aid-2BASE1 "第1章。企业Spring应用程序的设置例程")中介绍的，企业Spring应用程序的设置例程，我们将从开放其API的提供者（实际上是Yahoo!）那里获取财务数据。为此，始终需要牢记每个IP或经过身份验证的用户的调用频率方面的限制。我们的应用程序还将在其内部拥有社区，其中将共享财务数据。对于财务数据提供者来说，当谈论给定股票时，股票的历史视图和股票的即时报价是两个不同的概念。我们必须处理这两个概念来构建我们自己的数据集。
- en: 'In our application, `Users` will be able to buy and sell `Products` (stock,
    fund, option, and so on) by executing `Transactions`:'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，用户将能够通过执行“交易”来购买和出售“产品”（股票、基金、期权等）：
- en: First, let's consider the User(s)/Transaction(s) relationship with the following
    screenshot:![How relationships between entities have been chosen](img/image00840.jpeg)
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，让我们考虑用户/交易关系的以下截图：![实体之间的关系是如何选择的](img/image00840.jpeg)
- en: A `User` entity can have many `Transactions` Entities.
  id: totrans-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个“用户”实体可以有多个“交易”实体。
- en: Note
  id: totrans-1465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the User class, the second part of the `@OneToMany` relationship annotation
    (the `Many` element) drives the Type of attribute we are creating. Specifying
    `Many` as the second part declares that the origin entity (`User`) can have several
    target Entities (`Transactions`). These targets will have to be wrapped in a collection
    type. If the origin entity cannot have several targets, then the second part of
    the relationship has to be `One`.
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户类中，`@OneToMany`关系注解的第二部分（`Many`元素）驱动我们正在创建的属性类型。将`Many`指定为第二部分声明了起源实体（`User`）可以有多个目标实体（`Transactions`）。这些目标将必须包含在一个集合类型中。如果起源实体不能有多个目标，则关系的第二部分必须是`One`。
- en: A `Transaction` can have only one `User` entity.
  id: totrans-1467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个“交易”只能有一个“用户”实体。
- en: Note
  id: totrans-1468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Still in the User class, the first part of the `@OneToMany` relationship (the
    `@One` element) is the second part of the relationship annotation defined in the
    target entity (if defined). It is necessary to know whether the target entity
    can have several origins or not, in order to complete the annotation in the origin.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户类中，`@OneToMany`关系的第一部分（`@One`元素）是目标实体中定义的关系注解的第二部分（如果已定义）。必须知道目标实体是否可以有多个起源，以便完成起源中的注解。
- en: 'We can then deduce the two annotations: `@OneToMany` in `User` and `@ManyToOne`
    in `Transactions`.'
  id: totrans-1470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们可以推断出两个注解：`User`中的`@OneToMany`和`Transactions`中的`@ManyToOne`。
- en: If we are not in the case of a `@ManyToMany` relationship, we are talking about
    a unidirectional relationships. From a database's point of view, this means that
    one of the two tables having a join column that targets the other table. In the
    JPA, the table that has this join column is the relationship's **owner**.
  id: totrans-1471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们不是`@ManyToMany`关系的情况，我们谈论的是单向关系。从数据库的角度来看，这意味着两个表中的一个具有指向另一个表的连接列。在JPA中，具有这个连接列的表是关系的**所有者**。
- en: Tip
  id: totrans-1472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The entity, which is the relationship's owner has to be specified by a `@JoinColumn`
    annotation on the relationship. The entity that is not the owner, has to provide
    for its relationship annotation a `mappedBy` attribute that targets the corresponding
    Java field name in the opposite entity.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 关系的所有者实体必须在关系上指定一个`@JoinColumn`注解。不是所有者的实体必须为其关系注解提供一个`mappedBy`属性，该属性指向相对实体中的相应Java字段名称。
- en: 'This can now explain the relationship in `Transaction`:'
  id: totrans-1474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可以解释`Transaction`中的关系：
- en: '[PRE127]'
  id: totrans-1475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: The `user_name` column is expected (or automatically added) in the transaction
    table. We will talk about the fetch type later in the *There’s more… section*.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_name`列预期（或自动添加）在交易表中。我们将在*还有更多……部分*中讨论fetch类型。'
- en: 'The relationship in the `User` entity is defined as follows:'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`实体中的关系定义如下：'
- en: '[PRE128]'
  id: totrans-1478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Tip
  id: totrans-1479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `@OrderBy` annotation tells the JPA implementation to add an `ORDER BY`
    clause to its SQL query.
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: '`@OrderBy`注解告诉JPA实现在其SQL查询中添加一个`ORDER BY`子句。'
- en: An `Index` entity has one `Market` entity. We have decided that a market is
    the geographical area (Europe, the US, Asia, and so on). A market has several
    concrete indices.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Index`实体有一个`Market`实体。我们决定市场是地理区域（欧洲、美国、亚洲等）。一个市场有几个具体的指数。
- en: This looks like a `@OneToMany`/`@ManyToOne` relation again. The relationship's
    owner is the `Index` entity because we expect to have a `Market` column in the
    `Index` table (and not an `Index` column in the `Market` table).
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来又像是`@OneToMany`/`@ManyToOne`关系。关系的所有者是`Index`实体，因为我们期望在`Index`表中有一个`Market`列（而不是`Market`表中的`Index`列）。
- en: It is the same story between the concrete `Product` (such as `StockProduct`)
    and `Market` entities, except that, since it doesn't look mandatory in the application
    to retrieve stocks directly from `Market`, the relationship has not been declared
    on the `Market` entity side. We have kept only the owner side.
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 在具体的`Product`（如`StockProduct`）和`Market`实体之间，情况与之前类似，只是因为在应用程序中直接从`Market`检索股票看起来不是必需的，关系没有在`Market`实体方面声明。我们只保留了所有者方面。
- en: About the concrete `Quotes` entity (such as `StockQuote`) and the concrete `Products`
    entity (such as `StockProduct`), one quote will have one product. If we were interested
    in retrieving `Quote` from a `Product` entity, one product would have many quotes.
    The owner of the relationship is the concrete `Quote` entity.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 关于具体的`Quotes`实体（如`StockQuote`）和具体的`Products`实体（如`StockProduct`），一个报价将有一个产品。如果我们有兴趣从`Product`实体中检索`Quote`，一个产品将有多个报价。关系的所有者是具体的`Quote`实体。
- en: It is the same logic as the previous point for `IndexQuote` and `Index`.
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`IndexQuote`和`Index`，情况与之前的点相同。
- en: 'Between `Index` and `StockProduct`, in reality, indices (S&P 500, NASDAQ, and
    so on) have constituents, and the sum of the constituents'' values makes the index
    value. Thus, one `Index` entity has several potential `StockProduct` entities.
    Also one `StockProduct` can belong to several `Indices`. This looks like a bidirectional
    relationship. We present here the `Index` side:'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Index`和`StockProduct`之间，实际上，指数（标普500、纳斯达克等）有组成部分，组成部分的值之和构成指数值。因此，一个`Index`实体有几个潜在的`StockProduct`实体。同样，一个`StockProduct`可以属于几个`Indices`。这看起来像是一个双向关系。我们在这里展示了`Index`方面：
- en: '[PRE129]'
  id: totrans-1487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: This relationship is specified an extra join table (expected or generated by
    the JPA). It is basically a table with two join columns pointing to the `@Ids`
    fields of the respective entities.
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 这个关系指定了一个额外的连接表（JPA预期或生成的）。基本上是一个具有两个连接列指向各自实体的`@Ids`字段的表。
- en: There's more...
  id: totrans-1489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We are going to visit two metadata attributes that we didn’t explain yet: the
    `FetchType` attribute and the `Cascade` attribute.'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论两个尚未解释的元数据属性：`FetchType`属性和`Cascade`属性。
- en: The FetchType attribute
  id: totrans-1491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FetchType属性
- en: We have seen that the relationship annotations `@OneToOne`, `@OneToMany`, and
    `@ManyToMany` can be specified in a fetch attribute, which can either be `FetchType.EAGER`
    or `FetchType.LAZY`.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到关系注解`@OneToOne`、`@OneToMany`和`@ManyToMany`可以在fetch属性中指定，可以是`FetchType.EAGER`或`FetchType.LAZY`。
- en: When a `FetchType.EAGER` attribute is chosen, relationships are automatically
    loaded by the `entityManager` when the entity gets managed. The overall amount
    of SQL queries executed by JPA is significantly increased, especially because
    some related entities that may not be required each time are loaded anyway. If
    we have two, three, or more levels of entities bound to a root entity, we should
    probably consider switching some fields locally to `FetchType.LAZY`.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择`FetchType.EAGER`属性时，当实体被管理时，关系会被`entityManager`自动加载。JPA执行的SQL查询总量显著增加，特别是因为一些可能每次都不需要的相关实体仍然被加载。如果我们有两个、三个或更多级别的实体绑定到根实体，我们可能应该考虑将一些字段本地切换到`FetchType.LAZY`。
- en: A `FetchType.LAZY` attribute specifies the JPA implementation not to populate
    a field value on the entity-loading SQL query. The JPA implementation generates
    extra-asynchronous SQL queries to populate the `LAZY` fields when the program
    specifically asks for it (for example, when `getStock()` is called in the case
    of a `HistoricalStock` entity). When using Hibernate as an implementation, `FetchType.LAZY`
    is taken as the default fetch type for relationships.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: '`FetchType.LAZY`属性指定JPA实现在实体加载的SQL查询中不填充字段值。当程序明确要求时（例如，在`HistoricalStock`实体的情况下调用`getStock()`时），JPA实现会生成额外的异步SQL查询来填充`LAZY`字段。在使用Hibernate作为实现时，`FetchType.LAZY`被视为关系的默认获取类型。'
- en: It is important to think about lightening the relationship loading, especially
    on collections.
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要考虑减轻关系加载的负担，特别是在集合上。
- en: The Cascade attribute
  id: totrans-1496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 级联属性
- en: Another attribute to be mentioned in relationship annotations is the Cascade
    attribute. This attribute can take the values `CascadeType.DETACH`, `CascadeType.MERGE`,
    `CascadeType.PERSIST`, `CascadeType.REFRESH`, `CascadeType.REMOVE`, and `CascadeType.ALL`.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系注解中要提到的另一个属性是Cascade属性。这个属性可以取值`CascadeType.DETACH`、`CascadeType.MERGE`、`CascadeType.PERSIST`、`CascadeType.REFRESH`、`CascadeType.REMOVE`和`CascadeType.ALL`。
- en: This attribute specifies how the JPA implementation should process the related
    Entities when asked to perform an operation (such as persist, update, delete,
    find, and so on.) on the main Entity. It is an optional attribute which is usually
    defaulted to **no-cascaded operations**.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性指定了JPA实现在被要求对主实体执行操作（如持久化、更新、删除、查找等）时应该如何处理相关实体。这是一个可选属性，通常默认为**不进行级联操作**。
- en: See also
  id: totrans-1499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'There is a third strategy to define Entity inheritance:'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 有第三种定义实体继承的策略：
- en: '**The joined-table inheritance strategy**: We haven''t implemented it yet,
    but this strategy is a bit similar to the table-per-class strategy. It differs
    from it in the fact that, instead of repeating the parent-entity fields (columns)
    in the concrete tables, the JPA creates or expects an extra table with only the
    parent-entity columns and manages the joins transparently with this table.'
  id: totrans-1501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**联接表继承策略**：我们还没有实现它，但这个策略与表对应的类策略有些相似。它与之不同之处在于，JPA不会在具体的表中重复父实体字段（列），而是创建或期望一个只包含父实体列的额外表，并通过这个表透明地管理连接。'
- en: Making use of the JPA and Spring Data JPA
  id: totrans-1502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用JPA和Spring Data JPA
- en: In this section, we are going to wire the business logic we need for our application.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为我们的应用程序连接所需的业务逻辑。
- en: Because we have set up the configuration for the JPA and Spring Data JPA, and
    because we have defined our entities and their relationships, we can now use this
    model for time and energy-saving.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经为JPA和Spring Data JPA设置了配置，并且已经定义了我们的实体及其关系，现在我们可以使用这个模型来节省时间和精力。
- en: How to do it...
  id: totrans-1505
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will guide you through the changes:'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您完成这些更改：
- en: 'In the `edu.zipcloud.cloudstreetmarket.core.daos` package, we can find the
    following two interfaces:'
  id: totrans-1507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`edu.zipcloud.cloudstreetmarket.core.daos`包中，我们可以找到以下两个接口：
- en: '[PRE130]'
  id: totrans-1508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'These two interfaces come with their respective implementations. The `HistoricalIndexRepositoryImpl`
    implementation out of the two is defined as follows:'
  id: totrans-1509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个接口都带有各自的实现。其中两个中的`HistoricalIndexRepositoryImpl`实现定义如下：
- en: '[PRE131]'
  id: totrans-1510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'And the `TransactionRepositoryImpl` implementation is as follows:'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '`TransactionRepositoryImpl`的实现如下：'
- en: '[PRE132]'
  id: totrans-1512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: All the other interfaces in the `dao` package don't have explicitly defined
    implementations.
  id: totrans-1513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dao`包中的所有其他接口都没有明确定义的实现。'
- en: 'The following bean has been added to the Spring configuration file:'
  id: totrans-1514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下bean已经添加到Spring配置文件中：
- en: '[PRE133]'
  id: totrans-1515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: This last configuration allows the application to execute the created `init.sql`
    file **on startup**.
  id: totrans-1516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个最后的配置允许应用在启动时执行创建的`init.sql`文件。
- en: You will notice that the `cloudstreetmarket-core` module has been added in its
    `pom.xml` file, a dependency to `zipcloud-core` for the `DateUtil` class that
    we created.
  id: totrans-1517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到`cloudstreetmarket-core`模块已经在其`pom.xml`文件中添加了一个依赖项，即我们创建的`zipcloud-core`的`DateUtil`类。
- en: To replace the two dummy implementations that we created in [Chapter 2](part0084.xhtml#aid-2G3F81
    "Chapter 2. Designing a Microservice Architecture with Spring MVC"), *Designing
    a Microservice Architecture with Spring MVC*, the `CommunityServiceImpl` and `MarketServiceImpl`
    implementations have been created.
  id: totrans-1518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了替换我们在[第2章](part0084.xhtml#aid-2G3F81 "Chapter 2. Designing a Microservice
    Architecture with Spring MVC")中创建的两个虚拟实现，*使用Spring MVC设计微服务架构*，已经创建了`CommunityServiceImpl`和`MarketServiceImpl`的实现。
- en: Note
  id: totrans-1519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have injected repository dependencies in these implementations using `@Autowired`
    annotations.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`@Autowired`注解在这些实现中注入了存储库依赖。
- en: 'Also,we have tagged these two implementations with the Spring `@Service` annotations
    using a declared `value` identifier:'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们使用声明的`value`标识符为这两个实现添加了Spring `@Service`注解：
- en: '[PRE134]'
  id: totrans-1522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: In the `cloudstreetmarket-webapp` module, the `DefaultController` has been modified
    in its `@Autowired` field to target these new implementations and no longer the
    dummy ones. This is achieved by specifying the `@Qualifier` annotations on the
    `@Autowired` fields.
  id: totrans-1523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-webapp`模块中，`DefaultController`已经在其`@Autowired`字段中修改为针对这些新实现，而不再是虚拟的。这是通过在`@Autowired`字段上指定`@Qualifier`注解来实现的。
- en: Starting the server and calling the home page URL, `http://localhost:8080/portal/index`,
    should log a couple of SQL queries into the console:![How to do it...](img/image00841.jpeg)
  id: totrans-1524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器并调用主页URL，`http://localhost:8080/portal/index`，应该在控制台中记录一些SQL查询：![如何做...](img/image00841.jpeg)
- en: Also, the **Welcome** page should remain the same.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，**欢迎**页面应该保持不变。
- en: How it works...
  id: totrans-1526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's see the breakdown of this recipe with the following sections.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下几个部分来分解这个配方。
- en: Injecting an EntityManager instance
  id: totrans-1528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注入EntityManager实例
- en: We saw in the first recipe of this chapter that the configuration of the `entityManagerFactory`
    bean reflects the persistence unit's configuration.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章的第一个配方中看到，`entityManagerFactory` bean的配置反映了持久化单元的配置。
- en: Historically created by the container, EntityManagers need to handle transactions
    (user or container-manager transactions).
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 由容器历史创建的EntityManagers需要处理事务（用户或容器管理器事务）。
- en: The `@PersistenceContext` annotation is a JPA annotation. It allows us to inject
    an instance of EntityManager, whose lifecycle is managed by the container. In
    our case, Spring handles this role. With an EntityManager, we can interact with
    the persistence context, get managed or detached entities, and indirectly query
    the database.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PersistenceContext`注解是一个JPA注解。它允许我们注入一个由容器管理生命周期的EntityManager实例。在我们的情况下，Spring处理了这个角色。有了EntityManager，我们可以与持久化上下文交互，获取受管理或分离的实体，并间接地查询数据库。'
- en: Using JPQL
  id: totrans-1532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用JPQL
- en: Using **Java Persistence Query Language** (**JPQL**) is a standardized way of
    querying the persistence context and, indirectly, the database. JPQL looks like
    SQL in the syntax, but operates on the JPA-managed entities.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Java持久化查询语言**（**JPQL**）是一种标准化的查询持久化上下文和间接地查询数据库的方式。JPQL在语法上类似于SQL，但是操作的是JPA管理的实体。
- en: 'You must have noticed the following query in the repositories:'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定注意到了存储库中的以下查询：
- en: '[PRE135]'
  id: totrans-1535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The select part of the query is optional. Parameters can be injected into the
    query and this step is managed by the persistence providers’ implementation. Those
    implementations offer protections against SQL injection (using Prepared Statements)
    With the example here, take a look at how practical it is to filter a subentity
    attribute:'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的选择部分是可选的。参数可以注入到查询中，这一步由持久性提供者的实现来管理。这些实现提供了防止SQL注入的保护（使用预编译语句）。通过这个例子，看看过滤子实体属性有多实用：
- en: '[PRE136]'
  id: totrans-1537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'It avoids declaring a join when the situation is appropriate. We can still
    declare a `JOIN` though:'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的情况下，它避免了声明连接。尽管如此，我们仍然可以声明`JOIN`：
- en: '[PRE137]'
  id: totrans-1539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: A couple of keywords (such as `ORDER`) can be used as part of JPQL to operate
    functions that are usually available in SQL. Find the full list of keywords in
    the JPQL grammar from the JavaEE 6 tutorial at [http://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html](http://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html).
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 一些关键字（如`ORDER`）可以作为JPQL的一部分来操作通常在SQL中可用的函数。在JavaEE 6教程的JPQL语法中找到关键字的完整列表：[http://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html](http://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html)。
- en: JPQL has been inspired from the earlier-created **Hibernate Query Language**
    (**HQL**).
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: JPQL受到早期创建的**Hibernate查询语言**（**HQL**）的启发。
- en: Reducing boilerplate code with Spring Data JPA
  id: totrans-1542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Spring Data JPA减少样板代码
- en: We have discussed in the *How to do it…* section that some of our repository
    interfaces don't have explicitly defined implementations. This is a very powerful
    feature of Spring Data JPA.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*如何做…*部分讨论了一些我们的存储库接口没有明确定义实现的情况。这是Spring Data JPA非常强大的功能。
- en: Query creation
  id: totrans-1544
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查询创建
- en: 'Our `UserRepository` interface is defined as follows:'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`UserRepository`接口定义如下：
- en: '[PRE138]'
  id: totrans-1546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: We have made it extend the `JpaRepository` interface, passing through the generic
    types `User` (the entity type this repository will relate to) and `String` (the
    type of the user's identifier field).
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让它扩展了`JpaRepository`接口，通过通用类型`User`（这个存储库将关联的实体类型）和`String`（用户标识字段的类型）。
- en: By extending `JpaRepository`, `UserRepository` gets from Spring Data JPA capability
    to define query methods from Spring Data JPA by simply declaring their method
    signature. We have done this with the methods `findByUserName` and `findByUserNameAndPassword`.
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展`JpaRepository`，`UserRepository`从Spring Data JPA获得了定义查询方法的能力，只需声明它们的方法签名。我们已经在方法`findByUserName`和`findByUserNameAndPassword`中这样做了。
- en: Spring Data JPA transparently creates an implementation of our `UserRepository`
    interface at runtime. It infers the JPA queries from the way we have named our
    methods in the interface. Keywords and field names are used for this inference.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA会在运行时透明地创建我们的`UserRepository`接口的实现。它会根据我们在接口中命名方法的方式推断JPA查询。关键字和字段名用于这种推断。
- en: 'Find the following keywords table from the Spring Data JPA doc:'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 从Spring Data JPA文档中找到以下关键字表：
- en: '![Query creation](img/image00842.jpeg)'
  id: totrans-1551
  prefs: []
  type: TYPE_IMG
  zh: '![查询创建](img/image00842.jpeg)'
- en: Without specifying anything in the configuration, we have fallen back to the
    configuration by default for JPA repositories, which injects an instance of our
    single `EntityManagerFactory` bean and of our single `TransactionManager` bean.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 在不指定任何配置的情况下，我们已经默认回到了JPA存储库的配置，它会注入我们单一的`EntityManagerFactory` bean的实例和我们单一的`TransactionManager`
    bean的实例。
- en: Our custom `TransactionRepositoryImpl` is an example that uses both custom JPQL
    queries and a `JpaRepository` implementation. As you might guess, the `TransactionRepositoryJpa`
    implementation , which is autowired in `TransactionRepositoryImpl`, inherits several
    methods for saving, deleting, and finding, `Transaction` Entities.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义`TransactionRepositoryImpl`是一个示例，它同时使用自定义的JPQL查询和`JpaRepository`实现。正如你可能猜到的那样，在`TransactionRepositoryImpl`中自动装配的`TransactionRepositoryJpa`实现继承了用于保存、删除和查找`Transaction`实体的多个方法。
- en: We will also use interesting paging features offered with these methods. The
    `findAll()` method, which we have pulled, is one of them.
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用这些方法提供的有趣的分页功能。我们提取的`findAll()`方法就是其中之一。
- en: Persisting Entities
  id: totrans-1555
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 持久化实体
- en: 'Spring Data JPA also specifies the following:'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA还指定了以下内容：
- en: Saving an entity can be performed via the `CrudRepository.save(…)` method. It
    will persist or merge the given entity using the underlying JPA EntityManager.
    If the entity has not been persisted yet, Spring Data JPA will save the entity
    via a call to the `entityManager.persist(…)` method; otherwise, the `entityManager.merge(…)`
    will be called.
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`CrudRepository.save(…)`方法来保存实体。它将使用底层的JPA EntityManager来持久化或合并给定的实体。如果实体尚未持久化，Spring
    Data JPA将通过调用`entityManager.persist(…)`方法来保存实体；否则，将调用`entityManager.merge(…)`方法。
- en: This is interesting behavior that we will use to prevent again, a significant
    amount of boilerplate code.
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的行为，我们将再次使用它来减少大量样板代码。
- en: There's more...
  id: totrans-1559
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are more aspects that can be explored around this topic.
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多可以探索的方面。
- en: Using native SQL queries
  id: totrans-1561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用本地SQL查询
- en: We haven't made use of native SQL queries yet, but we will. It is important
    to know how to implement them because bypassing the JPA layer can sometimes be
    a better option performance-wise.
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有使用原生SQL查询，但我们将会使用。了解如何实现它们很重要，因为有时绕过JPA层在性能上可能是更好的选择。
- en: 'The following link points to an article from the Oracle website, which is interesting
    as it relates to native SQL queries:'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接指向Oracle网站的一篇文章，与原生SQL查询相关，非常有趣。
- en: '[http://www.oracle.com/technetwork/articles/vasiliev-jpql-087123.html](http://www.oracle.com/technetwork/articles/vasiliev-jpql-087123.html)'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.oracle.com/technetwork/articles/vasiliev-jpql-087123.html](http://www.oracle.com/technetwork/articles/vasiliev-jpql-087123.html)'
- en: Transactions
  id: totrans-1565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交易
- en: We haven't applied any specific transaction configuration to our repository
    implementations. Refer to [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations"), *Developing CRUD Operations and Validations*,
    for more details about transactions.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有对我们的存储库实现应用任何特定的事务配置。有关事务的更多详细信息，请参阅[第7章](part0113.xhtml#aid-3BOFI1 "第7章。开发CRUD操作和验证")，“开发CRUD操作和验证”。
- en: See also
  id: totrans-1567
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Custom implementations for Spring Data repositories**: With the `TransactionRepositoryImpl`
    example, by redefining the methods we need from `TransactionRepositoryJpa`, we
    present a pattern for creating custom implementations of data repositories. It
    somehow forces us to maintain an intermediate proxy. The related Spring document
    proposes a different technique that solves this issue. This technique is detailed
    online at [http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-implementations](http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-implementations).'
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data存储库的自定义实现：通过重新定义我们从TransactionRepositoryJpa中需要的方法的示例TransactionRepositoryImpl，我们提出了创建数据存储库的自定义实现的模式。这在某种程度上迫使我们维护一个中间代理。相关的Spring文档提出了解决这个问题的不同技术。这种技术在[http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-implementations](http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-implementations)上有详细介绍。
- en: Chapter 4. Building a REST API for a Stateless Architecture
  id: totrans-1569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。为无状态架构构建REST API
- en: 'This chapter will present the following recipes:'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下配方：
- en: Binding requests and marshalling responses
  id: totrans-1571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定请求和编组响应
- en: Configuring the content-negotiation (`json`, `xml`, and so on)
  id: totrans-1572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置内容协商（`json`、`xml`等）
- en: Adding pagination, filters, and sorting capabilities
  id: totrans-1573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加分页、过滤和排序功能
- en: Handling exceptions globally
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局处理异常
- en: Documenting and exposing an API with Swagger
  id: totrans-1575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swagger文档化和公开API
- en: Introduction
  id: totrans-1576
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, quite a few changes will be implemented. In fact, this chapter
    really sets our application development on an acceleration ramp.
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将实施相当多的变化。实际上，这一章真正加速了我们的应用程序开发。
- en: Before diving into the code, we need to brush up on a few concepts about REST.
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解代码之前，我们需要复习一下关于REST的一些概念。
- en: A definition of REST
  id: totrans-1579
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REST的定义
- en: 'REST is an architecture style. Its name is an abbreviation for Representational
    State Transfer. The term was invented by Roy Fielding, one of the principal authors
    of the HTTP specification. A REST architecture is designed around a few markers:'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: REST是一种架构风格。它的名称是表述状态转移的缩写。这个术语是由HTTP规范的主要作者之一Roy Fielding发明的。REST架构围绕着一些标记设计：
- en: '**Identifiable resources**: Resources define the domain. A resource must be
    identifiable by a URI. This URI must be as self-explanatory as possible using
    resource categories and hierarchies. Our resources will be indices snapshots,
    stock snapshots, historical index data, historical stock data, users, and so on.'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可识别资源：资源定义了领域。资源必须通过URI进行标识。这个URI必须尽可能清晰地使用资源类别和层次结构。我们的资源将是指数快照、股票快照、历史指数数据、历史股票数据、用户等等。
- en: '**HTTP as a communication protocol**: We interact with resources using a limited
    number of HTTP methods (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, and `OPTIONS`).'
  id: totrans-1582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP作为通信协议：我们使用有限数量的HTTP方法（`GET`、`POST`、`PUT`、`DELETE`、`HEAD`和`OPTIONS`）与资源进行交互。
- en: '**Resource representation**: A resource is visualized under a specific representation.
    A representation usually corresponds to a media type (`application/json`, `application/xml`,
    `text/html`) and/or a file extension (`*.json`, `*.xml`, `*.html`).'
  id: totrans-1583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源表示：资源以特定的表示形式呈现。表示通常对应于媒体类型（`application/json`、`application/xml`、`text/html`）和/或文件扩展名（`*.json`、`*.xml`、`*.html`）。
- en: '**Stateless conversations**: The server must not keep traces of a conversation.
    The use of HTTP sessions must be forbidden and replaced by navigating through
    the links provided with resources (hypermedia). The client authentication is repeated
    on every single request.'
  id: totrans-1584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态对话：服务器不得保留对话的痕迹。禁止使用HTTP会话，而是通过资源提供的链接（超媒体）进行导航。客户端身份验证在每个请求中都会重复。
- en: '**Scalability**: Stateless design implies easy scalability. One request can
    be dispatched to one or another server. This is the role of the load balancers.'
  id: totrans-1585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性：无状态设计意味着易于扩展。一个请求可以分派到一个或另一个服务器。这是负载均衡器的作用。
- en: '**Hypermedia**: As we just mentioned, with resources come links, and those
    links drive conversation transitions.'
  id: totrans-1586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超媒体：正如我们刚才提到的，资源带来了链接，这些链接驱动了对话的转换。
- en: RESTful CloudStreetMarket
  id: totrans-1587
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful CloudStreetMarket
- en: From this chapter on, all of the implemented data retrievals are now handled
    with REST using AngularJS. We use Angular routing to complete single-page application
    design (loaded once from the server).There are also a couple of new services that
    support three new screens about stocks and indices.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章开始，所有实现的数据检索现在都使用AngularJS通过REST处理。我们使用Angular路由来完成单页应用程序设计（从服务器加载一次）。还有一些新的服务，支持关于股票和指数的三个新屏幕。
- en: The REST implementation is still partial though. We have only implemented data
    retrievals (`GET`); we haven't got an effective authentication yet, and hypermedia
    will also be introduced later on.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管REST实现仍然是部分的。我们只实现了数据检索（`GET`）；我们还没有有效的身份验证，超媒体也将在以后介绍。
- en: Binding requests and marshalling responses
  id: totrans-1590
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定请求和编组响应
- en: This recipe explains how to configure Spring MVC for REST handlers to be as
    integrated as possible with their business domain. We focus on designing self-explanatory
    method handlers, externalized type conversions, and abstracted response marshalling
    (serialization to specific formats such as `json`, `xml`, `csv`, and so on).
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方解释了如何配置Spring MVC以使REST处理程序尽可能与其业务领域集成。我们专注于设计自解释的方法处理程序，外部化类型转换以及抽象响应编组（序列化为特定格式，如`json`，`xml`，`csv`等）。
- en: Getting ready
  id: totrans-1592
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to review the configuration changes applied to the `cloudstreetmarket-api`
    webapp in order to set up a Type conversion from either a request parameter or
    a URI template variable.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将审查应用于`cloudstreetmarket-api` webapp的配置更改，以便从请求参数或URI模板变量设置类型转换。
- en: We will see how to configure automatic marshalling (for responses) into `json`.
    We will focus on two very simple method handlers created for this chapter.
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何配置自动编组（用于响应）为`json`。我们将专注于为本章创建的两个非常简单的方法处理程序。
- en: How to do it...
  id: totrans-1595
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps describe the codebase changes that relate to the request
    binding and the response marshalling configuration:'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了与请求绑定和响应编组配置相关的代码库更改：
- en: From the **Git Perspective** in Eclipse, check out the latest version of the
    branch `v4.x.x`. Then run a `maven clean install` command on the `cloudstreetmarket-parent`
    module. To do this, right-click on the module, select **Run as…** | **Maven Clean**,
    then select **Run as…** | **Maven Install** again. After this, select **Maven
    Update Project** to synchronize Eclipse with the Maven configuration. To do so,
    right-click on the module and then select **Maven** | **Update Project…**.
  id: totrans-1597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的**Git Perspective**中，检出分支`v4.x.x`的最新版本。然后在`cloudstreetmarket-parent`模块上运行`maven
    clean install`命令。要这样做，右键单击模块，选择**Run as...** | **Maven Clean**，然后再次选择**Run as...**
    | **Maven Install**。之后，选择**Maven Update Project**以将Eclipse与Maven配置同步。要这样做，右键单击模块，然后选择**Maven**
    | **Update Project...**。
- en: 'The main configuration changes are in the `dispatcher-context.xml` file (in
    the **cloudstreetmarket-api** module). The `RequestMappingHandlerAdapter` bean
    has been defined the three `webBindingInitializer`, `messageConverters` and `customArgumentResolvers`
    properties:'
  id: totrans-1598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要的配置更改在`dispatcher-context.xml`文件中（在**cloudstreetmarket-api**模块中）。已定义`RequestMappingHandlerAdapter`
    bean的三个`webBindingInitializer`，`messageConverters`和`customArgumentResolvers`属性：
- en: '[PRE139]'
  id: totrans-1599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The following Maven dependencies have been added to the parent project (and
    indirectly to the core and API projects):'
  id: totrans-1600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下Maven依赖项已添加到父项目（间接添加到核心和API项目）中：
- en: '[PRE140]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'In our controllers'' superclass `CloudstreetApiWCI`, the `allowDateBinding`
    method has been created with an `@InitBinder` annotation:'
  id: totrans-1602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们控制器的超类`CloudstreetApiWCI`中，使用`@InitBinder`注解创建了`allowDateBinding`方法：
- en: '[PRE141]'
  id: totrans-1603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'All this configuration allows us to define self-explanatory and logic-less
    method handlers such as the `getHistoIndex()` method in `IndexController`:'
  id: totrans-1604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些配置使我们能够定义自解释和无逻辑的方法处理程序，例如`IndexController`中的`getHistoIndex()`方法：
- en: '[PRE142]'
  id: totrans-1605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Now deploy the `cloudstreetmarket-api` module and restart the server. To do
    so, start by right-clicking on the Tomcat server in the **Servers** tab:![How
    to do it...](img/image00843.jpeg)
  id: totrans-1606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在部署`cloudstreetmarket-api`模块并重新启动服务器。要这样做，首先在**服务器**选项卡中右键单击Tomcat服务器：![操作步骤...](img/image00843.jpeg)
- en: Then select **Add and Remove…**from the right-click menu. In the Add and Remove…
    window, make sure you have the following configuration set up, and start the server.![How
    to do it...](img/image00844.jpeg)
  id: totrans-1607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后从右键菜单中选择**添加和删除...**。在添加和删除...窗口中，确保已设置以下配置，并启动服务器。![操作步骤...](img/image00844.jpeg)
- en: Try to call the URL `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.json`.
  id: totrans-1608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试调用URL `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.json`。
- en: This URL targets the presented `getHistoIndex` method handler and produces the
    following `json` output:![How to do it...](img/image00845.jpeg)
  id: totrans-1609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此URL针对所呈现的`getHistoIndex`方法处理程序，并生成以下`json`输出：![操作步骤...](img/image00845.jpeg)
- en: 'Now let''s have a look at `StockProductController`. It hosts the following
    method handler:'
  id: totrans-1610
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们看看`StockProductController`。它托管以下方法处理程序：
- en: '[PRE143]'
  id: totrans-1611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Tip
  id: totrans-1612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are no explicit calls to any service layer here. Also, the return. Type
    of the method handler, which is `StockProductOverviewDTO`, is a simple POJO. The
    marshalling of the response body is done transparently.
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有对任何服务层进行显式调用。方法处理程序的返回类型是`StockProductOverviewDTO`，这是一个简单的POJO。响应主体的编组是透明进行的。
- en: 'In the **cloudstreetmarket-core** module, the `StringToStockProduct` converter
    must be presented because it was required to achieve the previous step:'
  id: totrans-1614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**cloudstreetmarket-core**模块中，必须呈现`StringToStockProduct`转换器，因为它是实现前一步所需的：
- en: '[PRE144]'
  id: totrans-1615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Tip
  id: totrans-1616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This converter was registered earlier (*step 2*) in `conversionService`.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 此转换器已在*步骤2*中注册到`conversionService`。
- en: Try to call the URL `http://localhost:8080/api/products/stocks/NXT.L.json`.
    This should target the presented `getByCode` handler and produce the following
    `json` response:![How to do it...](img/image00846.jpeg)
  id: totrans-1618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试调用URL `http://localhost:8080/api/products/stocks/NXT.L.json`。这应该针对所呈现的`getByCode`处理程序，并生成以下`json`响应：![操作步骤...](img/image00846.jpeg)
- en: How it works...
  id: totrans-1619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To understand how the preceding elements work together, we must introduce the
    key role of `RequestMappingHandlerAdapter`.
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解前面的元素如何一起工作，我们必须介绍`RequestMappingHandlerAdapter`的关键作用。
- en: A super RequestMappingHandlerAdapter bean
  id: totrans-1621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个超级RequestMappingHandlerAdapter bean
- en: We briefly introduced `RequestMappingHandlerAdapter` in [Chapter 2](part0084.xhtml#aid-2G3F81
    "Chapter 2. Designing a Microservice Architecture with Spring MVC"), *Designing
    a Microservice Architecture with Spring MVC*. This bean implements the high-level
    `HandlerAdapter` interface, which allows custom MVC core-workflow implementations.
    `RequestMappingHandlerAdapter` is the native implementation that comes with the
    framework.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](part0084.xhtml#aid-2G3F81 "Chapter 2. Designing a Microservice Architecture
    with Spring MVC")中简要介绍了`RequestMappingHandlerAdapter`，*使用Spring MVC设计微服务架构*。这个bean实现了高级的`HandlerAdapter`接口，允许自定义MVC核心工作流实现。`RequestMappingHandlerAdapter`是框架自带的原生实现。
- en: We mentioned that `RequestMappingHandlerAdapter` and `RequestMappingHandlerMapping`
    respectively are two replacement classes for the now deprecated `AnnotationMethodHandlerAdapter`
    and `DefaultAnnotationHandlerMapping`.
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到`RequestMappingHandlerAdapter`和`RequestMappingHandlerMapping`分别是现在已经弃用的`AnnotationMethodHandlerAdapter`和`DefaultAnnotationHandlerMapping`的两个替代类。
- en: In fact, `RequestMappingHandlerAdapter` provides better centralization for all
    the method handlers. Also, some new capabilities have been opened for `HandlerInterceptors`
    and `HandlerExceptionResolver`.
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`RequestMappingHandlerAdapter`为所有方法处理程序提供了更好的集中化。此外，一些新的功能已经为`HandlerInterceptors`和`HandlerExceptionResolver`打开。
- en: Tip
  id: totrans-1625
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Practically, the handler argument that can be found in the `preHandle`, `postHandle`,
    and `afterCompletion` methods’ signature (`WebContentInterceptors`) can be casted
    into `HandlerMethod` objects. The `HandlerMethod` Type offers interesting examination
    methods such as `getReturnType`, `getMethodAnnotation`, `getMethodParameters`.
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在`preHandle`、`postHandle`和`afterCompletion`方法的签名中可以找到的处理程序参数（`WebContentInterceptors`）可以被转换为`HandlerMethod`对象。`HandlerMethod`类型提供了一些有趣的检查方法，比如`getReturnType`、`getMethodAnnotation`、`getMethodParameters`。
- en: 'Also, in regard to `RequestMappingHandlerAdapter` and `RequestMappingHandlerMapping`,
    the Spring documentation specifies that:'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，关于`RequestMappingHandlerAdapter`和`RequestMappingHandlerMapping`，Spring文档指定：
- en: '|   | *"The new support classes are enabled by default by the MVC namespace
    and the MVC Java config but must be configured explicitly if using neither."*
    |   |'
  id: totrans-1628
  prefs: []
  type: TYPE_TB
  zh: '|   | *"MVC命名空间和MVC Java配置默认情况下启用了新的支持类，但如果不使用这两者，则必须显式配置。"* |   |'
- en: '|   | --*JavaDoc* |'
  id: totrans-1629
  prefs: []
  type: TYPE_TB
  zh: '|   | --*JavaDoc* |'
- en: In both our web apps, we make use of the MVC namespace specifically with the
    `<mvc:annotation-driven/>` element.
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的web应用程序中，我们都使用了`<mvc:annotation-driven/>`元素来特别使用MVC命名空间。
- en: This element is enjoyable from the configuration-by-default feature it activates
    on a couple of web features. However, in a lot of situations, different behaviors
    might still be expected.
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素很受欢迎，因为它在一些web功能上激活了默认配置功能。然而，在许多情况下，可能仍然期望不同的行为。
- en: In most cases, custom definitions are made either on the namespace itself or
    on with `RequestMappingHandlerAdapter`.
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，自定义定义要么在命名空间本身上，要么在`RequestMappingHandlerAdapter`上。
- en: Broad support for @RequestMapping annotations
  id: totrans-1633
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '@RequestMapping注解得到了广泛的支持'
- en: The main role of `RequestMappingHandlerAdapter` is to provide support and customization
    for handlers of the Type `HandlerMethod`. These handlers are bound to `@RequestMapping`
    annotations.
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: '`RequestMappingHandlerAdapter`的主要作用是为`HandlerMethod`类型的处理程序提供支持和定制。这些处理程序与`@RequestMapping`注解绑定。'
- en: '|   | *"A HandlerMethod object encapsulates information about a handler method
    consisting of a method and a bean. Provides convenient access to method parameters,
    the method return value, method annotations."* |   |'
  id: totrans-1635
  prefs: []
  type: TYPE_TB
  zh: '|   | *"HandlerMethod对象封装了有关处理程序方法的信息，包括方法和bean。提供了对方法参数、方法返回值、方法注解的便捷访问。"*
    |   |'
- en: '|   | --*JavaDoc* |'
  id: totrans-1636
  prefs: []
  type: TYPE_TB
  zh: '|   | --*JavaDoc* |'
- en: The `RequestMappingHandlerAdapter` gets most of its support methods from the
    historical `DefaultAnnotationHandlerMapping`. Let's take a closer look at the
    methods that particularly interest us.
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: '`RequestMappingHandlerAdapter`大部分的支持方法都来自于历史悠久的`DefaultAnnotationHandlerMapping`。让我们更仔细地看看特别让我们感兴趣的方法。'
- en: setMessageConverters
  id: totrans-1638
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: setMessageConverters
- en: The `messageConverters` template can be registered through the `setMessageConverters`
    setter as `List<HttpMessageConverter>`. Spring will perform the unmarshalling
    of an HTTP request's body for us into Java object(s) and the marshalling of a
    Java resource into an HTTP response's body.
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: '`messageConverters`模板可以通过`setMessageConverters` setter注册为`List<HttpMessageConverter>`。Spring将为我们执行将HTTP请求体解组成Java对象和将Java资源组成HTTP响应体的编组。'
- en: It is important to remember that the framework provides converter implementations
    for the main media types. These are registered by default with `RequestMappingHandlerAdapter`
    and `RestTemplate` (on the client side).
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，框架为主要的媒体类型提供了转换器实现。这些默认情况下与`RequestMappingHandlerAdapter`和`RestTemplate`（在客户端上）注册。
- en: 'The following table summarizes the native converters we can make use of:'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了我们可以利用的原生转换器：
- en: '| Provided implementations | Supported media types by default | (Default) behavior
    |'
  id: totrans-1642
  prefs: []
  type: TYPE_TB
  zh: '| 提供的实现 | 默认支持的媒体类型 | (默认)行为 |'
- en: '| --- | --- | --- |'
  id: totrans-1643
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `StringHttpMessageConverter` | `text/*` | Writes with a `text/plain` content
    type. |'
  id: totrans-1644
  prefs: []
  type: TYPE_TB
  zh: '| `StringHttpMessageConverter` | `text/*` | 使用`text/plain`内容类型进行写入。 |'
- en: '| `FormHttpMessageConverter` | `application/x-www-form-urlencoded` | Form data
    is read from and written into `MultiValueMap<String, String>`. |'
  id: totrans-1645
  prefs: []
  type: TYPE_TB
  zh: '| `FormHttpMessageConverter` | `application/x-www-form-urlencoded` | 表单数据从`MultiValueMap<String,
    String>`中读取和写入。'
- en: '| `ByteArrayHttpMessageConverter` | `*/*` | Writes with an `application/octet-stream`
    content type (can be overridden). |'
  id: totrans-1646
  prefs: []
  type: TYPE_TB
  zh: '| `ByteArrayHttpMessageConverter` | `*/*` | 使用`application/octet-stream`内容类型进行写入（可以被覆盖）。'
- en: '| `MarshallingHttpMessageConverter` | `text/xml and application/xml` | Requires
    `org.springframework.oxm` and a `Marshaller` /`Unmarshaller`. |'
  id: totrans-1647
  prefs: []
  type: TYPE_TB
  zh: '| `MarshallingHttpMessageConverter` | `text/xml和application/xml` | 需要`org.springframework.oxm`和`Marshaller`/`Unmarshaller`。
    |'
- en: '| `MappingJackson2HttpMessageConverter` | `application/json` | JSON mapping
    can be customized with Jackson annotations. If specific types need to be mapped,
    a custom `ObjectMapper` property has to be injected. |'
  id: totrans-1648
  prefs: []
  type: TYPE_TB
  zh: '| `MappingJackson2HttpMessageConverter` | `application/json` | 可以使用Jackson注解自定义JSON映射。如果需要映射特定类型，必须注入自定义的`ObjectMapper`属性。'
- en: '| `MappingJackson2XmlHttpMessageConverter` | `application/xml` | XML mapping
    can be customized with JAXB or Jackson annotations. If specific types need to
    be mapped, a custom `XmlMapper` property has to be injected into the `ObjectMapper`
    property. |'
  id: totrans-1649
  prefs: []
  type: TYPE_TB
  zh: '| `MappingJackson2XmlHttpMessageConverter` | `application/xml` | XML映射可以使用JAXB或Jackson注解进行自定义。如果需要映射特定类型，必须将自定义的`XmlMapper`属性注入到`ObjectMapper`属性中。|'
- en: '| `SourceHttpMessageConverter` | `text/xml and application/xml` | Can read
    and write `javax.xml.transform`.`Source` from the HTTP request and response. Only
    `DOMSource`, `SAXSource`, and `StreamSource` are supported. |'
  id: totrans-1650
  prefs: []
  type: TYPE_TB
  zh: '| `SourceHttpMessageConverter` | `text/xml和application/xml` | 可以从HTTP请求和响应中读取和写入`javax.xml.transform`.`Source`。只支持`DOMSource`、`SAXSource`和`StreamSource`。|'
- en: '| `BufferedImageHttpMessageConverter` |   | Can read and write `java.awt.image.BufferedImage`
    from the HTTP request and response. |'
  id: totrans-1651
  prefs: []
  type: TYPE_TB
  zh: '| `BufferedImageHttpMessageConverter` |   | 可以从HTTP请求和响应中读取和写入`java.awt.image.BufferedImage`。|'
- en: 'Have a look at the following address to get information on remoting and web
    services using Spring: [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html).'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下地址，获取有关使用Spring进行远程和Web服务的信息：[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html)。
- en: In our application, we have overridden the definition of the two native `MappingJackson2HttpMessageConverter`
    and `MarshallingHttpMessageConverter` classes.
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们已经重写了两个本地`MappingJackson2HttpMessageConverter`和`MarshallingHttpMessageConverter`类的定义。
- en: setCustomArgumentResolvers
  id: totrans-1654
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: setCustomArgumentResolvers
- en: The `setCustomArgumentResolvers` setter provides to `RequestMappingHandlerAdapter`
    a support for custom arguments. If you remember back in [Chapter 2](part0084.xhtml#aid-2G3F81
    "Chapter 2. Designing a Microservice Architecture with Spring MVC"), *Using Spring
    MVC to Support Responsive Designs*, the very first recipe talks about supported
    annotations for arguments. At the time, we saw `@PathVariable`, `@MatrixVariable`,
    `@RequestBody`, `@RequestParam`, and so on.
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: '`setCustomArgumentResolvers` setter为`RequestMappingHandlerAdapter`提供了对自定义参数的支持。如果你还记得[第2章](part0084.xhtml#aid-2G3F81
    "第2章。使用Spring MVC支持响应式设计")中的内容，*使用Spring MVC支持响应式设计*，第一个配方谈到了支持参数的注解。当时，我们看到了`@PathVariable`、`@MatrixVariable`、`@RequestBody`、`@RequestParam`等。'
- en: All these annotations are built-in `ArgumentResolver`. They are mapped to registered
    implementations to externally prepopulate arguments from different sources.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些注解都是内置的`ArgumentResolver`。它们被映射到注册的实现，以从不同的来源外部预填充参数。
- en: We have the possibility to define our own annotations and prepopulate our method
    arguments following the required business logic. These resolvers must implement
    the `HandlerMethodArgumentResolver` interface.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有可能定义自己的注解，并根据所需的业务逻辑预填充我们的方法参数。这些解析器必须实现`HandlerMethodArgumentResolver`接口。
- en: 'The development of our application didn''t specifically require the development
    of `customArgumentResolver`. However, we have registered two of them:'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序开发并没有特别需要开发`customArgumentResolver`。但是，我们已经注册了其中两个：
- en: '`net.kaczmarzyk.spring.data.jpa.web.SpecificationArgumentResolver`: This resolver
    is a third-party library that we are going to explain in the 3rd recipe of this
    chapter'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net.kaczmarzyk.spring.data.jpa.web.SpecificationArgumentResolver`：这个解析器是一个第三方库，我们将在本章的第3个配方中进行解释'
- en: '`org.springframework.data.web.PageableHandlerMethodArgumentResolver`: This
    will allow the automatic resolution of pagination parameters in order to use the
    native Spring Data pagination support'
  id: totrans-1660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.data.web.PageableHandlerMethodArgumentResolver`：这将允许自动解析分页参数，以使用原生Spring
    Data分页支持'
- en: setWebBindingInitializer
  id: totrans-1661
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: setWebBindingInitializer
- en: A `WebBindingInitializer` interface is a callback interface to globally initialize
    `WebDataBinder` and perform data binding in the context of web requests.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebBindingInitializer`接口是一个回调接口，用于全局初始化`WebDataBinder`并在web请求的上下文中执行数据绑定。'
- en: 'Before going forward, we must stop and revisit the 4th step of the recipe that
    defined the following method:'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们必须停下来重新访问配方的第4步，定义了以下方法：
- en: '[PRE145]'
  id: totrans-1664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: We define this method in a controller to register an abstracted Date conversion
    binding using a `PropertyEditor`.
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在控制器中定义了这个方法，以注册使用`PropertyEditor`进行抽象日期转换绑定。
- en: Now let's focus on the `WebDataBinder` argument. In this section, we are talking
    about the initialized part. The `WebDataBinder` interface provides a couple of
    interesting methods. These methods are mostly validation-related (`validate`,
    `setRequiredFields`, `isAllowed`, `getErrors`, and so on) and conversion-related
    (`getTypeConverter`, `registerCustomEditor`, `setBindingErrorProcessor`, `getBindingResult`,
    and so on).
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们专注于`WebDataBinder`参数。在这一部分，我们谈论的是初始化部分。`WebDataBinder`接口提供了一些有趣的方法。这些方法大多与验证相关（`validate`、`setRequiredFields`、`isAllowed`、`getErrors`等）和转换相关（`getTypeConverter`、`registerCustomEditor`、`setBindingErrorProcessor`、`getBindingResult`等）。
- en: A `WebDataBinder` argument can also be set as a `ConversionService` object.
    Rather than doing this locally in our `allowDateBinding` method (with the `WebDataBinder.setConversion`
    setter), we are going to use a global and declarative initialization.
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDataBinder`参数也可以设置为`ConversionService`对象。我们将使用全局和声明性初始化，而不是在我们的`allowDateBinding`方法中本地执行（使用`WebDataBinder.setConversion`
    setter）。'
- en: The `WebBindingInitializer` implementation we have chosen is the Spring `ConfigurableWebBindingInitializer`
    bean. It is indeed a convenient class for declarative configurations in a Spring
    application context. It enables the reusability of preconfigured initializers
    over multiple controllers/handlers.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的`WebBindingInitializer`实现是Spring的`ConfigurableWebBindingInitializer` bean。这确实是一个在Spring应用程序上下文中进行声明性配置的方便类。它使得预配置的初始化器可以在多个控制器/处理程序上重复使用。
- en: In our case, the `WebBindingInitializer` will be useful to globally initialize
    registered Type converters such as `StringToStockProduct`, but also to achieve
    the global exception handling we are aiming for.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，`WebBindingInitializer`将有助于全局初始化注册的类型转换器，比如`StringToStockProduct`，同时也可以实现我们的全局异常处理目标。
- en: The ConversionService API
  id: totrans-1670
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ConversionService API
- en: 'The 11th step defines a `StringToStockProduct` converter that allows the definition
    of a lean and clean `getByCode` method handler:'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 第11步定义了一个`StringToStockProduct`转换器，允许定义一个简洁清晰的`getByCode`方法处理程序：
- en: '[PRE146]'
  id: totrans-1672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: These converters can be used broadly among the Spring application for any conversion
    without being restricted to a request scope. Their use of Generics can be very
    beneficial. They are bound to a `conversionService` bean and there is no specific
    way to avoid their individual declaration.
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: 这些转换器可以在Spring应用程序中广泛使用，而不限于请求范围。它们的泛型使用可能非常有益。它们绑定到`conversionService` bean，没有特定的方法可以避免它们的单独声明。
- en: Choosing between PropertyEditors or converters
  id: totrans-1674
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在`PropertyEditors`和转换器之间进行选择
- en: The `PropertyEditors` and the converters from `ConversionService` might appear
    as an alternative to each other in their String-to-type use.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: '`PropertyEditors`和`ConversionService`中的转换器在它们的字符串到类型使用中可能看起来是彼此的替代品。'
- en: Spring heavily uses the concept of `PropertyEditors` to set properties for beans.
    In Spring MVC, they are meant to parse HTTP requests. Their declaration in Spring
    MVC is bound to the request scope.
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: Spring在设置bean属性时大量使用`PropertyEditors`的概念。在Spring MVC中，它们用于解析HTTP请求。它们在Spring
    MVC中的声明与请求范围相关。
- en: Even if they can be initialized globally, you must see `PropertyEditors` as
    initially restricted scope elements. Seeing them this way legitimates their attachment
    to `@InitBinder` methods and `WebBinderData`. They are less generic than converters.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 即使它们可以在全局初始化，你必须将`PropertyEditors`视为最初受限范围的元素。以这种方式看待它们合法地将它们附加到`@InitBinder`方法和`WebBinderData`上。它们比转换器更不通用。
- en: When using `PropertyEditors` for enums, Spring offers a naming convention that
    can avoid the individual declaration of enums. We will make use of this handy
    convention later on.
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`PropertyEditors`处理枚举时，Spring提供了一种命名约定，可以避免单独声明枚举。我们稍后将利用这个方便的约定。
- en: There's more...
  id: totrans-1679
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We are going to look at other `RequestMappingHandlerAdapter` properties in the
    next recipes. For now, there is more to discuss about `PropertyEditors` and especially
    the built-in ones.
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一个示例中查看其他`RequestMappingHandlerAdapter`属性。目前，还有更多关于`PropertyEditors`特别是内置编辑器的讨论。
- en: Built-in PropertyEditor implementations
  id: totrans-1681
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置的PropertyEditor实现
- en: The following `PropertyEditors` implementations come natively with Spring. They
    can be applied manually in all controllers for the purpose of binding. You will
    probably recognize `CustomDateEditor`, which has been registered in `CloudstreetApiWCI`.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`PropertyEditors`实现是Spring原生支持的。它们可以在所有控制器中手动应用以进行绑定。你可能会认出`CustomDateEditor`，它已在`CloudstreetApiWCI`中注册。
- en: '| Provided implementations | Default behavior |'
  id: totrans-1683
  prefs: []
  type: TYPE_TB
  zh: '| 提供的实现 | 默认行为 |'
- en: '| --- | --- |'
  id: totrans-1684
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ByteArrayPropertyEditor` | This is the editor for byte arrays. Strings will
    simply be converted to their corresponding byte representations. It is registered
    by default by `BeanWrapperImpl`. |'
  id: totrans-1685
  prefs: []
  type: TYPE_TB
  zh: '| `ByteArrayPropertyEditor` | 这是字节数组的编辑器。字符串将简单地转换为它们对应的字节表示。默认情况下由`BeanWrapperImpl`注册。'
- en: '| `ClassEditor` | Parses strings represent classes to actual classes and the
    other way around. When a class is not found, an `IllegalArgumentException` exception
    is thrown. It is registered by default by `BeanWrapperImpl`. |'
  id: totrans-1686
  prefs: []
  type: TYPE_TB
  zh: '| `ClassEditor` | 将字符串表示的类解析为实际类，反之亦然。当找不到类时，会抛出`IllegalArgumentException`异常。默认情况下由`BeanWrapperImpl`注册。'
- en: '| `CustomBooleanEditor` | This is a customizable property editor for Boolean
    properties. It is registered by default by `BeanWrapperImpl`, but it can be overridden
    by registering a custom instance of it as a custom editor. |'
  id: totrans-1687
  prefs: []
  type: TYPE_TB
  zh: '| `CustomBooleanEditor` | 这是一个可定制的布尔属性编辑器。默认情况下由`BeanWrapperImpl`注册，但可以通过注册自定义实例来覆盖它。'
- en: '| `CustomCollectionEditor` | This is the property editor for collections, converting
    any source collection to a given target collection type. |'
  id: totrans-1688
  prefs: []
  type: TYPE_TB
  zh: '| `CustomCollectionEditor` | 这是集合的属性编辑器，将任何源集合转换为给定的目标集合类型。'
- en: '| `CustomDateEditor` | This is a customizable property editor for `java.util.Date`,
    and supports a custom `DateFormat`. It is not registered by default. The user
    must register it as required in the appropriate format. |'
  id: totrans-1689
  prefs: []
  type: TYPE_TB
  zh: '| `CustomDateEditor` | 这是一个可定制的`java.util.Date`属性编辑器，并支持自定义的`DateFormat`。默认情况下未注册。用户必须根据需要以适当的格式注册它。'
- en: '| `CustomNumberEditor` | This is a customizable property editor for any number
    subclass such as `Integer`, `Long`, `Float`, or `Double`. It is registered by
    default by `BeanWrapperImpl`, but it can be overridden by registering a custom
    instance of it as a custom editor. |'
  id: totrans-1690
  prefs: []
  type: TYPE_TB
  zh: '| `CustomNumberEditor` | 这是任何数字子类（如`Integer`、`Long`、`Float`或`Double`）的可定制属性编辑器。默认情况下由`BeanWrapperImpl`注册，但可以通过注册自定义实例来覆盖它。'
- en: '| `FileEditor` | This editor is capable of resolving strings to `java.io.File`
    objects. It is registered by default by `BeanWrapperImpl`. |'
  id: totrans-1691
  prefs: []
  type: TYPE_TB
  zh: '| `FileEditor` | 这个编辑器能够将字符串解析为`java.io.File`对象。默认情况下由`BeanWrapperImpl`注册。'
- en: '| `InputStreamEditor` | This is a one-way property editor capable of taking
    a text string and producing `InputStream` (via an intermediate `ResourceEditor`
    and `Resource`). The `InputStream` properties may be directly set as strings.
    The default usage will not close the `InputStream` property. It is registered
    by default by `BeanWrapperImpl`. |'
  id: totrans-1692
  prefs: []
  type: TYPE_TB
  zh: '| `InputStreamEditor` | 这是一个单向属性编辑器，能够接受文本字符串并生成`InputStream`（通过中间的`ResourceEditor`和`Resource`）。`InputStream`属性可以直接设置为字符串。默认情况下不会关闭`InputStream`属性。它默认由`BeanWrapperImpl`注册。'
- en: The Spring IO reference document
  id: totrans-1693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring IO参考文档
- en: 'Find more details about Type conversion and `PropertyEditors` in the Spring
    IO Reference document, check out: [http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/validation.html](http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/validation.html).'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring IO参考文档中查找有关类型转换和`PropertyEditors`的更多详细信息，请访问：[http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/validation.html](http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/validation.html)。
- en: Configuring content-negotiation (JSON, XML, and so on)
  id: totrans-1695
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置内容协商（JSON、XML等）
- en: In this recipe, we will see how to configure the way we want the system to decide
    which format to render depending upon the client expectations.
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何配置系统根据客户端的期望来决定渲染格式的方式。
- en: Getting ready
  id: totrans-1697
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are mostly going to review the XML configuration here. Then, we will test
    the API with different requests to ensure support is provided to the XML format.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要将在这里审查XML配置。然后，我们将使用不同的请求测试API，以确保对XML格式提供支持。
- en: How to do it...
  id: totrans-1699
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `RequestMappingHandlerAdapter` configuration has been altered in `dispatcher-context.xml`.
    A `contentNegotiationManager` property has been added, as well as an `xmlConverter`
    bean:'
  id: totrans-1700
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RequestMappingHandlerAdapter`配置已在`dispatcher-context.xml`中更改。已添加了`contentNegotiationManager`属性，以及一个`xmlConverter`
    bean：'
- en: '[PRE147]'
  id: totrans-1701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'A Maven dependency has been added to `XStream` as follows:'
  id: totrans-1702
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已添加了`XStream`的Maven依赖项如下：
- en: '[PRE148]'
  id: totrans-1703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Calling the URL: `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.json`
    should target the `getHistoIndex()` handler the same way as before and you should
    receive the same `json` response:![How to do it...](img/image00845.jpeg)'
  id: totrans-1704
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用URL：`http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.json`应该像以前一样定位`getHistoIndex()`处理程序，您应该收到相同的`json`响应：![如何做...](img/image00845.jpeg)
- en: Also, calling the URL `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.xml`
    should now generate the following XML formatted response:![How to do it...](img/image00847.jpeg)
  id: totrans-1705
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，现在调用URL `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.xml`应该生成以下XML格式的响应：![如何做...](img/image00847.jpeg)
- en: How it works...
  id: totrans-1706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have added support for XML using the `MarshallingHttpMessageConverter` bean,
    defined a default media type (`application/json`), and defined a global content
    negotiation strategy.
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了对XML的支持，使用了`MarshallingHttpMessageConverter` bean，定义了默认媒体类型(`application/json`)，并定义了全局内容协商策略。
- en: Support for XML marshalling
  id: totrans-1708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持XML编组
- en: 'As we said in the previous recipe, `MarshallingHttpMessageConverter` comes
    with the framework, but it requires the `spring-oxm` dependency, as well as a
    definition for a marshaller and unmarshaller. `spring-oxm` is the Maven artefact
    to reference here:'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一个示例中所说的，`MarshallingHttpMessageConverter`随框架提供，但它需要`spring-oxm`依赖项，以及编组器和解组器的定义。`spring-oxm`是要引用的Maven构件：
- en: '[PRE149]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: The XStream marshaller
  id: totrans-1711
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: XStream编组器
- en: 'We chose `XStreamMarshaller` as the provider for the XML marshalling operations:'
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择`XStreamMarshaller`作为XML编组操作的提供者：
- en: '[PRE150]'
  id: totrans-1713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: The `XStream` marshaller is part of the `spring-oxm` project. Even if it is
    *not recommended* for external source parsing (which is *not* what we intend to
    do), it is very good and requires very few configuration by default (no specific
    class registration or initial mapping strategy required).
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: '`XStream`编组器是`spring-oxm`项目的一部分。即使它*不建议*用于外部源解析（这*不*是我们的意图），它非常好，并且默认情况下需要非常少的配置（不需要特定的类注册或初始映射策略）。'
- en: 'Types and fields can be annotated to customize the default behavior. You can
    find some examples here from their documentation:'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 类型和字段可以被注释以自定义默认行为。您可以在这里找到一些来自他们文档的例子：
- en: '`@XStreamAlias`: Used on the type, field, or attribute'
  id: totrans-1716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@XStreamAlias`：用于类型、字段或属性'
- en: '`@XStreamImplicit`: Used in collections or arrays'
  id: totrans-1717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@XStreamImplicit`：用于集合或数组'
- en: '`@XStreamAsAttribute`: Used to mark a field as an attribute'
  id: totrans-1718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@XStreamAsAttribute`：用于将字段标记为属性'
- en: '`@XStreamConverter`: Targets a specific converter for the field'
  id: totrans-1719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@XStreamConverter`：为字段指定特定的转换器'
- en: In our case, we have applied a minimal marshalling customization in DTOs.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们在DTO中应用了最小的编组自定义。
- en: 'You can find more information about `XStream` on their official website: [http://xstream.codehaus.org](http://xstream.codehaus.org).'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站[http://xstream.codehaus.org](http://xstream.codehaus.org)上找到有关`XStream`的更多信息。
- en: Negotiation strategies with ContentNegotiationManager
  id: totrans-1722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ContentNegotiationManager中的协商策略
- en: Here, we are talking about the way we configure the system to choose one media
    type over another, for responses. The client shows expectations in its request
    and the server tries to satisfy them at best from the available resolutions.
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们谈论的是我们配置系统选择响应的媒体类型的方式。客户端在其请求中显示期望，服务器会尽力满足这些期望，以最大程度地满足可用的分辨率。
- en: There are three ways for the client to specify its media type expectations.
    We discuss them in the following sections.
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端有三种方式来指定其媒体类型的期望。我们将在以下部分讨论它们。
- en: The Accept header
  id: totrans-1725
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 接受标头
- en: The client request specifies a mime type or a list of mime types (`application/json`,
    `application/xml`, and so on) as a value of the `Accept` header. It is the default
    choice for Spring MVC.
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端请求指定mime类型或mime类型列表（`application/json`、`application/xml`等）作为`Accept`标头的值。这是Spring
    MVC的默认选择。
- en: Web browsers can send various `Accept` headers though, and it would be risky
    to rely entirely on these headers. Therefore, it is good to support at least one
    alternative.
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: Web浏览器可以发送各种`Accept`标头，因此完全依赖这些标头是有风险的。因此，至少支持一种替代方案是很好的。
- en: These headers can even be completely ignored with the `ignoreAcceptHeader` Boolean
    property in `ContentNegotiationManager`.
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标头甚至可以完全忽略`ContentNegotiationManager`中的`ignoreAcceptHeader`布尔属性。
- en: The file extension suffix in the URL path
  id: totrans-1729
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: URL路径中的文件扩展名后缀
- en: Allowing the specification of a file extension suffix in the URL path is one
    alternative. It is the discriminator option in our configuration.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 在URL路径中允许指定文件扩展名后缀是一种替代方案。这是我们配置中的判别器选项。
- en: The `favorPathExtension` Boolean property in `ContentNegotiationManager` has
    been set to true for this purpose and our AngularJS factories actually request
    `.json` paths.
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，`ContentNegotiationManager`中的`favorPathExtension`布尔属性已设置为true，我们的AngularJS工厂实际上请求`.json`路径。
- en: The request parameter
  id: totrans-1732
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 请求参数
- en: You can define a specific query parameter if you dislike the path extension
    option. The default name of this parameter is `format`. It is customizable with
    the `parameterName` property, and the potential expected values are the registered
    format suffixes (`xml`, `html`, `json`, `csv`, and so on).
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不喜欢路径扩展选项，可以定义特定的查询参数。此参数的默认名称是`format`。它可以通过`parameterName`属性进行自定义，并且可能的预期值是已注册的格式后缀（`xml`、`html`、`json`、`csv`等）。
- en: This option can be set as the discriminator option with the `favorParameter`
    Boolean property.
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项可以作为`favorParameter`布尔属性的判别器选项设置。
- en: Java Activation Framework
  id: totrans-1735
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Java激活框架
- en: Setting the `useJaf` Boolean property to true configures to rely on the Java
    Activation Framework, rather than Spring MVC itself, for the suffix to-media type
    mappings (`json` to correspond to `application/json`, `xml` to correspond to `application/xml`,
    and so on).
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: 将`useJaf`布尔属性设置为true，配置为依赖于Java激活框架，而不是Spring MVC本身，用于后缀到媒体类型的映射（`json`对应`application/json`，`xml`对应`application/xml`等）。
- en: '@RequestMapping annotations as ultimate filters'
  id: totrans-1737
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@RequestMapping注解作为最终过滤器'
- en: Finally, the controller with the `@RequestMapping` annotations and especially
    the `produces` attribute should have the final word on which format will be rendered.
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，带有`@RequestMapping`注解的控制器，特别是`produces`属性，应该对将呈现的格式有最终决定权。
- en: There's more...
  id: totrans-1739
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Now we will look at the implementation of JAXB2 as an XML parser and the `ContentNegotiationManagerFactoryBean`
    configuration.
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下JAXB2作为XML解析器的实现和`ContentNegotiationManagerFactoryBean`的配置。
- en: Using a JAXB2 implementation as an XML parser
  id: totrans-1741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用JAXB2实现作为XML解析器
- en: 'JAXB2 is the current Java specification for XML bindings. Our example with
    `XStream` was just an example and another XML marshaller can of course be used.
    Spring supports JAXB2\. It even provides a default JAXB2 implementation in the
    `spring-oxm` package: `org.springframework.oxm.jaxb.Jaxb2Marshaller`.'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: JAXB2是当前的Java XML绑定规范。我们使用`XStream`的示例只是一个示例，当然可以使用另一个XML编组器。Spring支持JAXB2。它甚至在`spring-oxm`包中提供了默认的JAXB2实现：`org.springframework.oxm.jaxb.Jaxb2Marshaller`。
- en: 'Using JAXB2 annotations in DTOs is probably a better choice for portability.
    Visit the `Jaxb2Marshaller` JavaDoc for more details about its configuration:
    [http://docs.spring.io/autorepo/docs/spring/4.0.4.RELEASE/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html](http://docs.spring.io/autorepo/docs/spring/4.0.4.RELEASE/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html).'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: 在DTO中使用JAXB2注解可能是可移植性更好的选择。访问`Jaxb2Marshaller`的JavaDoc以获取有关其配置的更多详细信息：[http://docs.spring.io/autorepo/docs/spring/4.0.4.RELEASE/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html](http://docs.spring.io/autorepo/docs/spring/4.0.4.RELEASE/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html)。
- en: The ContentNegotiationManagerFactoryBean JavaDoc
  id: totrans-1744
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ContentNegotiationManagerFactoryBean JavaDoc
- en: 'The full possible configuration for `ContentNegotiationManagerFactoryBean`
    is accessible again in its JavaDoc:'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentNegotiationManagerFactoryBean`的完整配置在其JavaDoc中再次可访问：'
- en: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html)'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html)'
- en: Adding pagination, filters, and sorting capabilities
  id: totrans-1747
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加分页、过滤和排序功能
- en: Now we have introduced the basis for a REST configuration of Spring MVC, we
    will improve our REST services by adding pagination, filtering, and sorting capabilities.
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Spring MVC的REST配置的基础，我们将通过添加分页、过滤和排序功能来改进我们的REST服务。
- en: Getting ready
  id: totrans-1749
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: Pagination is a concept developed in the Spring Data project. To add pagination,
    we will introduce the `Pageable` interface for wrapper implementations populated
    from the request. These are further on recognized and handled by Spring Data.
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 分页是Spring Data项目中开发的一个概念。为了添加分页，我们将引入`Pageable`接口，用于从请求中填充的包装器实现。这些接口随后被Spring
    Data识别和处理。
- en: The `Page` interface and specifically the `PageImpl` instances can be produced
    by Spring Data to format its results. We will use them, as they are perfectly
    suited to REST rendering.
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: '`Page`接口，特别是`PageImpl`实例，可以由Spring Data生成以格式化其结果。我们将使用它们，因为它们非常适合于REST呈现。'
- en: Finally, we will detail two data-binding tools used here to abstract filtering
    and pagination from our controllers' logic.
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将详细介绍这里使用的两个数据绑定工具，以将过滤和分页从我们的控制器逻辑中抽象出来。
- en: How to do it...
  id: totrans-1753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To the method handlers, we have added the parameters we want them to support.
    The following handler in `IndexController` now offers pagination and sorting:'
  id: totrans-1754
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于方法处理程序，我们已经添加了我们希望它们支持的参数。`IndexController`中的以下处理程序现在提供分页和排序：
- en: '[PRE151]'
  id: totrans-1755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'In the corresponding service layer implementation, the `pageable` instance
    is passed to the Spring Data JPA abstracted implementation:'
  id: totrans-1756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相应的服务层实现中，将`pageable`实例传递给Spring Data JPA的抽象实现：
- en: '[PRE152]'
  id: totrans-1757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'That''s pretty much all about the pagination and sorting pattern! All the boilerplate
    code is transparent. It allows us to magically retrieve a resource wrapped in
    a page element that carries the tools that the front end may need for pagination.
    For our specific method handler, calling the URL:'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是关于分页和排序模式的全部内容！所有样板代码都是透明的。它使我们能够神奇地检索一个包装在页面元素中的资源，该元素携带了前端可能需要的分页工具。对于我们特定的方法处理程序，调用URL：
- en: '`http://localhost:8080/api/indices/US.json?size=2&page=0&sort=dailyLatestValue`,`asc`
    results in the following JSON response:'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/api/indices/US.json?size=2&page=0&sort=dailyLatestValue`,`asc`的结果是以下JSON响应：'
- en: '![How to do it...](img/image00848.jpeg)'
  id: totrans-1760
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image00848.jpeg)'
- en: We have also applied this pattern to dynamically retrieve indices with pagination
    even though it is almost the same method handler definition.
  id: totrans-1761
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将此模式应用于动态检索带有分页的索引，即使它几乎是相同的方法处理程序定义。
- en: 'We also applied the same pattern again to retrieve user activities (in `CommunityController`):'
  id: totrans-1762
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将相同的模式应用于检索用户活动（在`CommunityController`中）：
- en: '[PRE153]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Now we have adapted the AngularJS layer (detailed in the *See also...* section
    of this recipe), we have been able to entirely rewire our welcome page to use
    REST services with also an infinite scrolling for user activities:![How to do
    it...](img/image00849.jpeg)
  id: totrans-1764
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经调整了AngularJS层（在本配方的*另请参阅...*部分有详细介绍），我们已经能够完全重构我们的欢迎页面，使用REST服务，并为用户活动提供无限滚动：![如何做...](img/image00849.jpeg)
- en: To fully use the REST service's capabilities, there is now a new screen called
    *INDICES BY MARKET* accessible from the **Prices and markets** menu:![How to do
    it...](img/image00850.jpeg)
  id: totrans-1765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了充分利用REST服务的功能，现在有一个名为*INDICES BY MARKET*的新屏幕，可以从**价格和市场**菜单访问：![如何做...](img/image00850.jpeg)
- en: The table presented here is entirely autonomous since it features the fully
    angularized (AngularJS) and asynchronous pagination/sorting capabilities.
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 这里呈现的表格是完全自主的，因为它具有完全的angular化（AngularJS）和异步分页/排序功能。
- en: 'The `StockProductController` object, in its `search()` method handler, has
    implemented the pagination and sorting pattern, but also a filtering feature that
    allows the user to operate `LIKE` SQL operators combined with `AND` restrictions:'
  id: totrans-1767
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StockProductController`对象在其`search()`方法处理程序中实现了分页和排序模式，还提供了一个过滤功能，允许用户操作`LIKE`
    SQL操作符与`AND`限制相结合：'
- en: '[PRE154]'
  id: totrans-1768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The `productService` implementation, in its `getProductsOverview` method (as
    shown), refers to a created `nameStartsWith` method:'
  id: totrans-1769
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`productService`实现，在其`getProductsOverview`方法中（如所示），引用了一个创建的`nameStartsWith`方法：'
- en: '[PRE155]'
  id: totrans-1770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The `nameStartsWith` method is a specification factory located in the core
    module inside the `ProductSpecifications` class:'
  id: totrans-1771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nameStartsWith`方法是位于核心模块内的`ProductSpecifications`类中的规范工厂：'
- en: '[PRE156]'
  id: totrans-1772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Overall, the `search()` REST service is extensively used over three new screens
    related to stocks retrieval. These screens are accessible through the **Prices
    and markets** menu. Here is the new **ALL PRICES SEARCH** form:![How to do it...](img/image00851.jpeg)
  id: totrans-1773
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总的来说，`search()` REST服务广泛地用于与股票检索相关的三个新屏幕。这些屏幕可以通过**价格和市场**菜单访问。这是新的**ALL PRICES
    SEARCH**表单：![如何做...](img/image00851.jpeg)
- en: The following screenshot corresponds to the **SEARCH BY MARKET** form:![How
    to do it...](img/image00852.jpeg)
  id: totrans-1774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图对应于**SEARCH BY MARKET**表单：![如何做...](img/image00852.jpeg)
- en: Finally, find the following new **Risers and Fallers** screen:![How to do it...](img/image00853.jpeg)
  id: totrans-1775
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，找到以下新的**Risers and Fallers**屏幕：![如何做...](img/image00853.jpeg)
- en: How it works...
  id: totrans-1776
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Again, this recipe is mostly about Spring Data and how to make Spring MVC support
    Spring Data for us.
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这个配方主要是关于Spring Data以及如何让Spring MVC为我们支持Spring Data。
- en: Spring Data pagination support (you will love it!)
  id: totrans-1778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Data分页支持（你会喜欢它！）
- en: We already looked at some of the benefits of the Spring Data repository abstraction
    in the previous chapter.
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中看到了Spring Data存储库抽象的一些好处。
- en: In this section, we will see how Spring Data supports the pagination concepts
    in its abstracted repositories. A very beneficial extension of that, is offered
    to Spring MVC with a specific argument-resolver to prevent any custom adaption
    logic.
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到Spring Data如何在其抽象的存储库中支持分页概念。Spring MVC还提供了一个非常有益的扩展，通过特定的参数解析器来防止任何自定义适配逻辑。
- en: Pagination and sorting in repositories
  id: totrans-1781
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 存储库中的分页和排序
- en: 'You can notice the use of Pageable arguments in the methods of our repository
    interfaces. For example below is the `IndexRepositoryJpa` repository:'
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注意到我们的存储库接口的方法中使用了Pageable参数。例如下面是`IndexRepositoryJpa`存储库：
- en: '[PRE157]'
  id: totrans-1783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Spring Data recognizes the `org.springframework.data.domain.Pageable` Type as
    the method argument. It also recognizes the `org.springframework.data.domain.Sort`
    Type when a full `Pageable` instance is not necessary. It applies pagination and
    sorting to our queries dynamically.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data将`org.springframework.data.domain.Pageable`类型识别为方法参数。当不需要完整的`Pageable`实例时，它还识别`org.springframework.data.domain.Sort`类型。它动态地应用分页和排序到我们的查询中。
- en: 'You can see more examples here (taken from the Spring reference document):'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到更多例子（摘自Spring参考文档）：
- en: '[PRE158]'
  id: totrans-1786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Tip
  id: totrans-1787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Bear in mind that sorting options are also handled through `Pageable`. Incidentally,
    this is the way we sort in the application.
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，排序选项也是通过`Pageable`处理的。顺便说一句，这就是我们在应用程序中进行排序的方式。
- en: From these extra examples, you can see that Spring Data can return a `Page`
    `(org.springframework.data.domain.Page)`, a `Slice` `(org.springframework.data.domain.Slice)`
    or simply a `List`.
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些额外的例子中，你可以看到Spring Data可以返回一个`Page`（`org.springframework.data.domain.Page`）、一个`Slice`（`org.springframework.data.domain.Slice`）或者简单的`List`。
- en: 'But here is the amazing part: a `Page` object contains everything we need to
    build powerful pagination tools at the front end! Earlier, we saw the `json` response
    provided with one `Page` of elements.'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这里有一个惊人的部分：`Page`对象包含了构建强大分页工具所需的一切！之前，我们看到了提供了一个`Page`元素的`json`响应。
- en: 'With With the following request: `http://localhost:8080/api/indices/US.json?size=2&page=0&sort=dailyLatestValue,asc`,
    we have asked for the first page and received a `Page` object telling us whether
    or not this page is the first or the last one (`firstPage: true/false`, `lastPage:
    true/false`), the number of elements within the page (`numberOfElements: 2`),
    the total number of pages, and the total number of elements (`totalPages: 2`,
    `totalElements: 3`).'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: '通过以下请求：`http://localhost:8080/api/indices/US.json?size=2&page=0&sort=dailyLatestValue,asc`，我们要求第一页，并收到一个`Page`对象告诉我们这一页是不是第一页或最后一页（`firstPage:
    true/false`，`lastPage: true/false`），页面内的元素数量（`numberOfElements: 2`），总页数和总元素数量（`totalPages:
    2`，`totalElements: 3`）。'
- en: Tip
  id: totrans-1792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This means that Spring Data first executed the query we wanted it to execute,
    and then executed transparently a count query without the pagination filters.
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Spring Data首先执行了我们想要执行的查询，然后透明地执行了一个不带分页过滤的计数查询。
- en: A `Slice` object is a super interface of `Page`, which does not carry the counts
    for `numberOfElements` and `totalElements`.
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: '`Slice`对象是`Page`的超级接口，不包含`numberOfElements`和`totalElements`的计数。'
- en: PagingAndSortingRepository<T,ID>
  id: totrans-1795
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PagingAndSortingRepository<T,ID>
- en: 'If a repository does not already extend `JpaRepository<T,ID>`, we can make
    it extend `PagingAndSortingRepository<T,ID>`, which is an extension of `CrudRepository<T,ID>`.
    It will provide extra methods to retrieve Entities using the pagination and sorting
    abstraction. These methods are:'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个仓库还没有扩展`JpaRepository<T,ID>`，我们可以让它扩展`PagingAndSortingRepository<T,ID>`，这是`CrudRepository<T,ID>`的扩展。它将提供额外的方法来使用分页和排序抽象检索实体。这些方法包括：
- en: '[PRE159]'
  id: totrans-1797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The web part – PageableHandlerMethodArgumentResolver
  id: totrans-1798
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Web部分 - PageableHandlerMethodArgumentResolver
- en: As introduced earlier, we have added the `org.springframework.data.web.PageableHandlerMethodArgumentResolver`
    bean to our `RequestMappingHandlerAdapter` as a `customArgumentResolver`. Doing
    so has allowed us to rely on the Spring data binding to transparently prepopulate
    a `Pageable` instance available as a method handler argument (highlighted in bold
    in the 1st step of this recipe).
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前介绍的，我们已经将`org.springframework.data.web.PageableHandlerMethodArgumentResolver`
    bean添加到我们的`RequestMappingHandlerAdapter`中作为`customArgumentResolver`。这样做使我们能够依赖Spring数据绑定来透明地预填充一个作为方法处理程序参数可用的`Pageable`实例（在本教程的第一步中以粗体显示）。
- en: 'Here is some more information about the request parameters we can use for the
    binding:'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于我们可以用于绑定的请求参数的更多信息：
- en: '| Parameter name | Purpose / usage | Default values |'
  id: totrans-1801
  prefs: []
  type: TYPE_TB
  zh: '| 参数名称 | 目的/用法 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-1802
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `page` | The page we want to retrieve. | 0 |'
  id: totrans-1803
  prefs: []
  type: TYPE_TB
  zh: '| `page` | 我们想要检索的页面。 | 0 |'
- en: '| `size` | The size of the page we want to retrieve. | 10 |'
  id: totrans-1804
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 我们想要检索的页面大小。 | 10 |'
- en: '| `sort` | The properties that should be sorted in the format `property,property(,ASC&#124;DESC)`.We
    should use multiple `sort` parameters if we want to switch directions, for example:
    `?sort=firstname&sort=lastname,asc`. | The default sort direction is ascending.
    |'
  id: totrans-1805
  prefs: []
  type: TYPE_TB
  zh: '| `sort` | 应该按照`property,property(,ASC|DESC)`格式进行排序的属性。如果我们想要切换方向，例如：`?sort=firstname&sort=lastname,asc`，我们应该使用多个`sort`参数。
    | 默认排序方向是升序。 |'
- en: 'As implemented in our first step, default values can be customized in cases
    where specific parameters are missing. This is achieved with the `@PageableDefault`
    annotation:'
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第一步中实现的那样，在特定参数缺失的情况下，可以自定义默认值。这是通过`@PageableDefault`注解实现的：
- en: '[PRE160]'
  id: totrans-1807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Tip
  id: totrans-1808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The page, size, and sort parameter names can be overridden by setting the appropriate
    `PageableHandlerMethodArgumentResolver` properties in the Spring configuration.
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 页面、大小和排序参数名称可以通过在Spring配置中设置适当的`PageableHandlerMethodArgumentResolver`属性来进行覆盖。
- en: If for some reason we don't make use of `PageableHandlerMethodArgumentResolver`,
    we can still catch our own request parameters (for pagination) and build a `PageRequest`
    instance from them (for example, `org.springframework.data.domain.PageRequest`
    is a `Pageable` implementation).
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因我们不使用`PageableHandlerMethodArgumentResolver`，我们仍然可以捕获我们自己的请求参数（用于分页），并从中构建一个`PageRequest`实例（例如，`org.springframework.data.domain.PageRequest`是一个`Pageable`实现）。
- en: A useful specification argument resolver
  id: totrans-1811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个有用的规范参数解析器
- en: Before introducing this useful specification argument resolver, we must introduce
    the concept of specification.
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入这个有用的规范参数解析器之前，我们必须介绍规范的概念。
- en: The JPA2 criteria API and Spring Data JPA specifications
  id: totrans-1813
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JPA2 criteria API和Spring Data JPA规范
- en: The Spring Data reference document tells us that JPA 2 has introduced a criteria
    API that can be used to build queries programmatically. When writing `criteria`,
    we actually define the where clause of a query for a domain class.
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data参考文档告诉我们，JPA 2引入了一个可以用于以编程方式构建查询的criteria API。在编写`criteria`时，我们实际上为域类定义了查询的where子句。
- en: The Spring Data JPA takes the concept of specification from Eric Evans's book
    *Domain Driven Design*, following the same semantics and providing an API to define
    such specifications using the JPA criteria API.
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA从Eric Evans的书*Domain Driven Design*中引入了规范的概念，遵循相同的语义，并提供了使用JPA
    criteria API定义这些规范的API。
- en: 'To support specifications, we can extend our repository interface with the
    `JpaSpecificationExecutor` interface, as we did in our `ProductRepository` interface:'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持规范，我们可以在我们的仓库接口中扩展`JpaSpecificationExecutor`接口，就像我们在我们的`ProductRepository`接口中所做的那样：
- en: '[PRE161]'
  id: totrans-1817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: In our example, the `findByNameStartingWith` method retrieves all the products
    of a specific Type (`StockProduct`) that have a name starting with the `param`
    argument and that match the `spec` specification.
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`findByNameStartingWith`方法检索特定类型（`StockProduct`）的所有产品，这些产品的名称以`param`参数开头，并且与`spec`规范匹配。
- en: SpecificationArgumentResolver
  id: totrans-1819
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 规范参数解析器
- en: As we said earlier, this `CustomArgumentResolver` is not bound to an official
    Spring project (yet). Its use can fit some use cases such as local search engines
    to complement Spring Data dynamic queries, pagination, and sorting features.
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，这个`CustomArgumentResolver`还没有绑定到官方的Spring项目中。它的使用可以适用于一些用例，比如本地搜索引擎，以补充Spring
    Data动态查询、分页和排序功能。
- en: In the same way we build a `Pageable` instance from specific parameters, this
    argument resolver also allows us to transparently build a `Specification` instance
    from specific parameters.
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们从特定参数构建`Pageable`实例的方式相同，这个参数解析器也允许我们从特定参数透明地构建一个`Specification`实例。
- en: It uses `@Spec` annotations to define `where` clauses such as `like`, `equal`,
    `likeIgnoreCase`, `in`, and so on. These `@Spec` annotations can then be combined
    with each other to form groups of `AND` and `OR` clauses with the help of `@And`
    and `@Or` annotations. A perfect use case is to develop our search features as
    a complement to the pagination and sorting function.
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用`@Spec`注解来定义`like`、`equal`、`likeIgnoreCase`、`in`等`where`子句。这些`@Spec`注解可以通过`@And`和`@Or`注解的帮助组合在一起，形成`AND`和`OR`子句的组。一个完美的用例是开发我们的搜索功能，作为分页和排序功能的补充。
- en: 'You should read the following article which is an introduction to the project.
    This article is entitled *"an alternative API for filtering data with Spring MVC
    & Spring Data JPA"*:'
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该阅读以下文章，这是该项目的介绍。这篇文章的标题是“使用Spring MVC和Spring Data JPA过滤数据的另一种API”：
- en: '[http://blog.kaczmarzyk.net/2014/03/23/alternative-api-for-filtering-data-with-spring-mvc-and-spring-data](http://blog.kaczmarzyk.net/2014/03/23/alternative-api-for-filtering-data-with-spring-mvc-and-spring-data)'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://blog.kaczmarzyk.net/2014/03/23/alternative-api-for-filtering-data-with-spring-mvc-and-spring-data](http://blog.kaczmarzyk.net/2014/03/23/alternative-api-for-filtering-data-with-spring-mvc-and-spring-data)'
- en: 'Also, find with the following address the project’s repository and its documentation:'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用以下地址找到项目的存储库和文档：
- en: '[https://github.com/tkaczmarzyk/specification-arg-resolver](https://github.com/tkaczmarzyk/specification-arg-resolver)'
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/tkaczmarzyk/specification-arg-resolver](https://github.com/tkaczmarzyk/specification-arg-resolver)'
- en: Tip
  id: totrans-1827
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As useful as it can be, do bear in mind that the number of users of this library
    is still much lower than the Spring community.
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个库的用户数量远远低于Spring社区，但它仍然非常有用。
- en: There's more...
  id: totrans-1829
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have been focusing on Spring MVC so far. However with the presented new screens,
    there are also changes at the front end (AngularJS).
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在关注Spring MVC。然而，随着呈现的新屏幕，前端（AngularJS）也发生了变化。
- en: Spring Data
  id: totrans-1831
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Data
- en: 'To find out more about Spring Data capabilities, check out the official reference
    document:'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Spring Data功能的信息，请查看官方参考文档：
- en: '[http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html](http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html)'
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html](http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html)'
- en: Angular routes
  id: totrans-1834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular路由
- en: If you navigate between the **Home** and **Prices and Market** menus, you will
    see that the whole page is never entirely refreshed. All the content is loaded
    asynchronously.
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在**主页**和**价格和市场**菜单之间导航，您会发现整个页面从未完全刷新。所有内容都是异步加载的。
- en: 'To achieve this, we used the AngularJS routing. The `global_routes.js` file
    has been created for this purpose:'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们使用了AngularJS路由。`global_routes.js`文件是为此目的而创建的：
- en: '[PRE162]'
  id: totrans-1837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Here, we defined a mapping table between routes (URL paths that the application
    queries, as part of the navigation through the `href` tags) and HTML templates
    (which are available on the server as public static resources). We have created
    an `html` directory for these templates.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了路由（应用程序通过`href`标签的URL路径查询的一部分）和HTML模板（作为公共静态资源在服务器上可用）之间的映射表。我们为这些模板创建了一个`html`目录。
- en: Then, AngularJS asynchronously loads a template each time we request a specific
    URL path. As often, AngularJS operates transclusions do to this (it basically
    drops and replace entire DOM sections). Since templates are just templates, they
    need to be bound to controllers, which operate other AJAX requests through our
    factories, pull data from our REST API, and render the expected content.
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，AngularJS在每次请求特定URL路径时异步加载一个模板。通常情况下，AngularJS通过transclusions来操作这一点（它基本上删除并替换整个DOM部分）。由于模板只是模板，它们需要绑定到控制器，这些控制器通过我们的工厂操作其他AJAX请求，从我们的REST
    API中提取数据，并呈现预期的内容。
- en: 'In the previous example:'
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中：
- en: '`/portal/index` is a route, that is, a requested path'
  id: totrans-1841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/portal/index`是一个路由，也就是一个请求的路径'
- en: '`/portal/html/home.html` is the mapped template'
  id: totrans-1842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/portal/html/home.html`是映射的模板'
- en: '`homeMainController` is the target controller'
  id: totrans-1843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`homeMainController`是目标控制器'
- en: See also
  id: totrans-1844
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can read more about AngularJS routing at:'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址了解更多关于AngularJS路由的信息：
- en: '[https://docs.angularjs.org/tutorial/step_07](https://docs.angularjs.org/tutorial/step_07)'
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.angularjs.org/tutorial/step_07](https://docs.angularjs.org/tutorial/step_07)'
- en: Bootstrap pagination with the Angular UI
  id: totrans-1847
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Angular UI实现Bootstrap分页
- en: We have used the pagination component of the UI Bootstrap project ([http://angular-ui.github.io/bootstrap](http://angular-ui.github.io/bootstrap))
    from the AngularUI team ([http://angular-ui.github.io](http://angular-ui.github.io)).
    This project provides a `Boostrap` component operated with and for AngularJS.
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了来自AngularUI团队（[http://angular-ui.github.io](http://angular-ui.github.io)）的UI
    Bootstrap项目（[http://angular-ui.github.io/bootstrap](http://angular-ui.github.io/bootstrap)）的分页组件。该项目提供了一个与AngularJS一起操作的`Boostrap`组件。
- en: In the case of pagination, we obtain a `Bootstrap` component (perfectly integrated
    with the Bootstrap stylesheet) driven by specific AngularJS directives.
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: 在分页的情况下，我们获得了一个`Bootstrap`组件（与Bootstrap样式表完美集成），由特定的AngularJS指令驱动。
- en: 'One of our pagination components can be found in the `stock-search.html` template:'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的分页组件之一可以在`stock-search.html`模板中找到：
- en: '[PRE163]'
  id: totrans-1851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: The `page`, `ng-model`, `items-per-page`, `total-items`, and `ng-change` directives
    use variables (`paginationCurrentPage`, `pageSize` and `paginationTotalItems`),
    which are attached to the `stockSearchController` scope.
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`，`ng-model`，`items-per-page`，`total-items`和`ng-change`指令使用变量（`paginationCurrentPage`，`pageSize`和`paginationTotalItems`），这些变量附加到`stockSearchController`范围。'
- en: Tip
  id: totrans-1853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'To find out more about this project, visit its documentation at:'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关该项目的更多信息，请访问其文档：
- en: '[http://angular-ui.github.io/bootstrap](http://angular-ui.github.io/bootstrap)'
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://angular-ui.github.io/bootstrap](http://angular-ui.github.io/bootstrap)'
- en: Handling exceptions globally
  id: totrans-1856
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局处理异常
- en: This recipe presents a technique for handling exception globally in a web application.
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程介绍了在Web应用程序中全局处理异常的技术。
- en: Getting ready
  id: totrans-1858
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are different ways to handle exceptions in Spring MVC. We can choose to
    define controller-specific `@ExceptionHandler` or we can choose to register `@ExceptionHandler`
    globally in the `@ControllerAdvice` classes.
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC中处理异常有不同的方法。我们可以选择定义特定于控制器的`@ExceptionHandler`，或者我们可以选择在`@ControllerAdvice`类中全局注册`@ExceptionHandler`。
- en: We developed the second option in our REST API, even if our `CloudstreetApiWCI`
    super-class could have shared `@ExceptionHandler` among its controllers.
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在REST API中开发了第二个选项，即使我们的`CloudstreetApiWCI`超类可以在其控制器之间共享`@ExceptionHandler`。
- en: Now we will see how to automatically map custom and generic exception types
    to HTTP status codes, and how to wrap the right error messages in a generic response
    object that can be used by any client.
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何自动将自定义和通用异常类型映射到HTTP状态代码，以及如何将正确的错误消息包装在通用响应对象中，该对象可被任何客户端使用。
- en: How to do it...
  id: totrans-1862
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We need a wrapper object to be sent back to the client when an error occurs:'
  id: totrans-1863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当发生错误时，我们需要一个包装对象发送回客户端：
- en: '[PRE164]'
  id: totrans-1864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'We create a `RestExceptionHandler` class annotated with `@ControllerAdvice`.
    This `RestExceptionHandler` class also inherits the `ResponseEntityExceptionHandler`
    support class, which gives us access to a default mapping exception/response status
    ready to be overridden:'
  id: totrans-1865
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个带有`@ControllerAdvice`注释的`RestExceptionHandler`类。这个`RestExceptionHandler`类还继承了`ResponseEntityExceptionHandler`支持类，这使我们可以访问一个默认的映射异常/响应状态，可以被覆盖：
- en: '[PRE165]'
  id: totrans-1866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Tip
  id: totrans-1867
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Both the `ErrorInfo` wrapper and this `RestExceptionHandler` will support internationalization.
    It will be demonstrated in [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations"), *Developing CRUD Operations and Validations*.
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: '`ErrorInfo`包装器和`RestExceptionHandler`都将支持国际化。这将在[第7章](part0113.xhtml#aid-3BOFI1
    "第7章。开发CRUD操作和验证")中进行演示，*开发CRUD操作和验证*。'
- en: 'We have created the two following property editors for the MarketCode and QuotesInterval
    Enums:'
  id: totrans-1869
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为MarketCode和QuotesInterval Enums创建了以下两个属性编辑器：
- en: '[PRE166]'
  id: totrans-1870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Tip
  id: totrans-1871
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: These two property editors are automatically registered because they are satisfying
    a naming and location convention. Since `MarketCode` and `QuotesInterval` are
    enum values, Spring looks for `MarketCodeEditor` (Editor suffix) and `QuotesIntervalEditor`
    in the Enums’ packages.
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个属性编辑器会自动注册，因为它们满足命名和位置约定。由于`MarketCode`和`QuotesInterval`是枚举值，Spring会在枚举包中查找`MarketCodeEditor`（Editor后缀）和`QuotesIntervalEditor`。
- en: That's it! You can test it by providing an incorrect market code in the `getHistoIndex`
    method of the AngularJS factory (in the `home_financial_graph.js` file). Change
    the call from `$http.get("/api/indices/"+market+"wrong/"+index+"/histo.json")`
    to `$http.get("/api/indices/"+market+"/"+index+"/histo.json")`.
  id: totrans-1873
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！您可以通过在AngularJS工厂的`getHistoIndex`方法中提供一个不正确的市场代码来测试它（在`home_financial_graph.js`文件中）。将调用从`$http.get("/api/indices/"+market+"wrong/"+index+"/histo.json")`更改为`$http.get("/api/indices/"+market+"/"+index+"/histo.json")`。
- en: After restarting the whole application (**cloudstreetmarket-webapp** and **cloudstreetmarket-api**),
    the call to `http://localhost:8080/portal/index` will induce the **Ajax GET**
    request for the index loading to result in a **400** status code:![How to do it...](img/image00854.jpeg)
  id: totrans-1874
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动整个应用程序（**cloudstreetmarket-webapp**和**cloudstreetmarket-api**）后，对`http://localhost:8080/portal/index`的调用将导致**Ajax
    GET**请求加载索引的结果为**400**状态码：![操作步骤...](img/image00854.jpeg)
- en: More details about this failed request will show up in the `json` response:![How
    to do it...](img/image00855.jpeg)
  id: totrans-1875
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有关此失败请求的更多详细信息将显示在`json`响应中：![操作步骤...](img/image00855.jpeg)
- en: The received error message—**The provided value for the market variable is invalid!**
    is acceptable for now.
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: 接收到的错误消息——**提供的市场变量值无效！**现在是可以接受的。
- en: You can reset the `home_financial_graph.js` file after getting this result.
  id: totrans-1877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在获得这个结果后，您可以重置`home_financial_graph.js`文件。
- en: How it works...
  id: totrans-1878
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Here, we are focusing on the way we handle exceptions in a REST environment.
    The expectations are slightly different than in a pure web app because the direct
    user may not necessarily be a human. For this reason, a REST API has to maintain
    standard, consistent, and self-explanatory communication even if a process has
    generated an error or has been unsuccessful.
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们关注的是在REST环境中处理异常的方式。期望与纯Web应用程序略有不同，因为直接用户可能不一定是人类。因此，REST API必须保持标准、一致和自解释的通信，即使过程生成了错误或失败。
- en: This consistency is achieved by always returning an appropriate HTTP status
    code feedback to the client from the server about the request treatment, and by
    always returning a response body in a format that is expected by the client (a
    format that matches one of the mime types listed in the **Accept** header of the
    HTTP request).
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: 这种一致性是通过始终向客户端返回适当的HTTP状态码反馈来实现的，服务器关于请求处理，并始终以客户端期望的格式返回响应主体（与HTTP请求的**Accept**头中列出的MIME类型之一匹配的格式）。
- en: Global exception handling with @ControllerAdvice
  id: totrans-1881
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用@ControllerAdvice进行全局异常处理
- en: Spring 3.2 has brought a solution that is much more suitable to REST environments
    than the previous exception handling mechanisms. With this solution, classes annotated
    with `@ControllerAdvice` can be registered in a different locations of the API.
    These annotations are looked-up by classpath scanning and are auto-registered
    in a common repository to support all of the controllers (by default) or subsets
    of controllers (using the annotation options).
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 3.2带来了一种比以前的异常处理机制更适合REST环境的解决方案。使用这种解决方案，使用`@ControllerAdvice`注释的类可以在API的不同位置注册。这些注释通过类路径扫描查找，并自动注册到一个公共存储库中，以支持所有控制器（默认情况下）或控制器的子集（使用注释选项）。
- en: In our case, we defined one single `@ControllerAdvice` to monitor this entire
    API. The idea is to define, in the `@ControllerAdvice` annotated `class(es)`,
    the relevant methods that can match match specific exception Type(s) to specific
    ResponseEntity(ies). A ReponseEntity carries a body and a response status code.
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们定义了一个单一的`@ControllerAdvice`来监视整个API。这个想法是在`@ControllerAdvice`注释的`class(es)`中定义相关的方法，这些方法可以将特定的异常类型匹配到特定的ResponseEntity。一个ResponseEntity携带一个主体和一个响应状态码。
- en: These methods to define are annotated with `@ExceptionHandler`. The options
    of this annotation allow you to target specific exception Types. A common pattern
    when defining a `@ControllerAdvice` is to make it extend the support class `ResponseEntityExceptionHandler`.
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的定义都带有`@ExceptionHandler`注释。此注释的选项允许您针对特定的异常类型。在定义`@ControllerAdvice`时的一个常见模式是使其扩展支持类`ResponseEntityExceptionHandler`。
- en: The support ResponseEntityExceptionHandler class
  id: totrans-1885
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 支持ResponseEntityExceptionHandler类
- en: The support `ResponseEntityExceptionHandler` class provides a predefined mapping
    between native exceptions (such as `NoSuchRequestHandlingMethodException`, `ConversionNotSupportedException`,
    `TypeMismatchException`, and so on) and HTTP status codes.
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: 支持`ResponseEntityExceptionHandler`类提供了本机异常（如`NoSuchRequestHandlingMethodException`、`ConversionNotSupportedException`、`TypeMismatchException`等）和HTTP状态码之间的预定义映射。
- en: The `ResponseEntityExceptionHandler` implements a common pattern for response
    rendering. It invokes case-specific rendering methods declared as protected, such
    the following `handleNoSuchRequestHandlingMethod`.
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResponseEntityExceptionHandler`实现了响应呈现的常见模式。它调用了声明为受保护的特定情况呈现方法，比如下面的`handleNoSuchRequestHandlingMethod`。'
- en: '[PRE167]'
  id: totrans-1888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: These methods are obviously fully overridable in the `@ControllerAdvice` annotated
    class(es). The important thing is to return the `handleExceptionInternal` method.
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法显然可以在`@ControllerAdvice`注解的类中完全重写。重要的是返回`handleExceptionInternal`方法。
- en: 'This `handleExceptionInternal` method is also defined as protected and then
    overridable. This is what we have done—returned a uniform `ErrorInfo` instance:'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`handleExceptionInternal`方法也被定义为受保护的，然后可以被重写。这就是我们所做的——返回一个统一的`ErrorInfo`实例：
- en: '[PRE168]'
  id: totrans-1891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: A uniform error response object
  id: totrans-1892
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 统一的错误响应对象
- en: 'There are no specific standard practices about the fields that the uniform
    error response object should expose. We decided to offer the following structure
    for the `ErrorInfo` object:'
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 关于统一错误响应对象应该公开的字段，没有具体的标准实践。我们决定为`ErrorInfo`对象提供以下结构：
- en: '[PRE169]'
  id: totrans-1894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Using two different levels of messages (the global error message coming from
    the exception Type and the case-specific message) allows the client side to choose
    the more appropriate one (or even both!) to be rendered in the application for
    each situation.
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个不同级别的消息（来自异常类型的全局错误消息和特定情况的消息）允许客户端选择更合适的消息（甚至两者都选择！）在每种情况下呈现在应用程序中。
- en: As we already said, this `ErrorInfo` object doesn't support internationalization
    yet. We will improve it later in the [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations"), *Developing CRUD Operations and Validations*.
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经说过的，这个`ErrorInfo`对象目前还不支持国际化。我们将在[第7章](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations") *开发CRUD操作和验证*中进行改进。
- en: There's more...
  id: totrans-1897
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We provide here a collection of resources related to exception handling in
    a web environment:'
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里提供了一系列与Web环境中异常处理相关的资源：
- en: HTTP Status Codes
  id: totrans-1899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP状态码
- en: 'The **World** **Wide Web Consortium** specifies explicit response status codes
    for HTTP/1.1\. More important than the error messages themselves, it is critical
    for a REST API to implement them. You can read more about this at:'
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: '**万维网联盟**为HTTP/1.1指定了明确的响应状态码。比错误消息本身更重要的是，对于REST API来说，实现它们至关重要。您可以在这里阅读更多相关信息：'
- en: '[http://www.w3.org/Protocols/rfc2616/rfc2616-sec010.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec010.html)'
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/Protocols/rfc2616/rfc2616-sec010.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec010.html)'
- en: The official article about exception handling in Spring MVC
  id: totrans-1902
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring MVC异常处理的官方文章
- en: 'An article from in the spring.io blog is a very interesting resource. It is
    not limited to the REST use case. It can be accessed from this address: [http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc](http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc).'
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: spring.io博客中的一篇文章是一个非常有趣的资源。它不仅限于REST用例。可以从这个地址访问：[http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc](http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc)。
- en: JavaDocs
  id: totrans-1904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaDocs
- en: 'Here we provide for configuration or simply usage, the URL for two JavaDoc
    resources:'
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提供了两个JavaDoc资源的URL，用于配置或简单使用：
- en: 'ExceptionHandlerExceptionResolver:'
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: ExceptionHandlerExceptionResolver：
- en: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html)'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html)'
- en: 'ResponseEntityExceptionHandler:'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: ResponseEntityExceptionHandler：
- en: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html)'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html)'
- en: See also
  id: totrans-1910
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Check out the official demo website, which exposes how the different Types
    of Spring MVC exceptions can be rendered: [http://mvc-exceptions-v2.cfapps.io](http://mvc-exceptions-v2.cfapps.io)'
  id: totrans-1911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看官方演示网站，展示了Spring MVC不同类型异常的呈现方式：[http://mvc-exceptions-v2.cfapps.io](http://mvc-exceptions-v2.cfapps.io)
- en: Documenting and exposing an API with Swagger
  id: totrans-1912
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swagger文档化和公开API
- en: This section details how to provide and expose metadata about the REST API using
    Swagger.
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了如何使用Swagger提供和公开关于REST API的元数据。
- en: Getting ready
  id: totrans-1914
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are often required to document APIs for users and customers. When documenting
    an API, depending on the tools we use, we often get a few extras such as the ability
    to generate client code from the API metadata or even the generation of integrated
    test harnesses for the API.
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要为用户和客户文档化API。在文档化API时，根据我们使用的工具，我们经常会得到一些额外的功能，比如能够从API元数据生成客户端代码，甚至生成API的集成测试工具。
- en: There isn't yet a recognized and universal standard for the format of the API
    metadata. This lack of standards leads to a quite a few different solutions on
    the market for the REST documentation.
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有公认的和通用的API元数据格式标准。这种标准的缺乏导致了市场上有很多不同的REST文档解决方案。
- en: We have chosen Swagger here because it has the largest and the most active community.
    It has existed since 2011, and it offers a very nice UI/test harness and great
    configuration by default.
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了Swagger，因为它拥有最大和最活跃的社区。它自2011年以来一直存在，并且默认提供了非常好的UI/测试工具和出色的配置。
- en: How to do it...
  id: totrans-1918
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This section details what can be done and also what we have done in the code
    base of the checked-out v4.x.x branch.
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了在已检出的v4.x.x分支的代码库中可以做什么，以及我们已经做了什么。
- en: 'We have added a Maven dependency for the `swagger-springmvc` project (version
    0.9.5) to **cloudstreetmarket-core** and **cloudstreetmarket-parent**:'
  id: totrans-1920
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经为**cloudstreetmarket-core**和**cloudstreetmarket-parent**添加了`swagger-springmvc`项目（版本0.9.5）的Maven依赖：
- en: '[PRE170]'
  id: totrans-1921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The following swagger `configuration` class has been created:'
  id: totrans-1922
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已创建以下swagger `configuration`类：
- en: '[PRE171]'
  id: totrans-1923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'The following configuration has been added to the `dispatch-context.xml`:'
  id: totrans-1924
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下配置已添加到`dispatch-context.xml`中：
- en: '[PRE172]'
  id: totrans-1925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'As per the previous configuration, a swagger.properties file has been added
    at the path `src/main/resources/META-INF/properties` with the content:'
  id: totrans-1926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据先前的配置，在路径`src/main/resources/META-INF/properties`添加了一个swagger.properties文件，内容如下：
- en: '[PRE173]'
  id: totrans-1927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Our three controllers have been added a basic documentation. See the following
    documentation annotations added to `IndexController`:'
  id: totrans-1928
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的三个控制器已经添加了基本文档。请参阅添加到`IndexController`的以下文档注释：
- en: '[PRE174]'
  id: totrans-1929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: We have downloaded the swagger UI project from [https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui).This
    is a collection of static files (JS, CSS, HTML, and pictures). It has been pasted
    in the webapp directory of our **cloudstreetmarket-api** project.
  id: totrans-1930
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从[https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui)下载了swagger
    UI项目。这是一个静态文件集合（JS、CSS、HTML和图片）。它已经被粘贴到我们的**cloudstreetmarket-api**项目的webapp目录中。
- en: 'Finally, the following mvc namespace configuration has been added to `dispatch-context.xml`
    again in order for the Spring MVC to open access to static files in the project:'
  id: totrans-1931
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，以下mvc命名空间配置再次添加到`dispatch-context.xml`中，以便Spring MVC打开项目中的静态文件的访问权限：
- en: '[PRE175]'
  id: totrans-1932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: When we have this configuration, accessing the following URL on the server `http://localhost:8080/api/index.html`
    brings up the Swagger UI documentation portal:![How to do it...](img/image00856.jpeg)
  id: totrans-1933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们有了这个配置，访问服务器上的以下URL `http://localhost:8080/api/index.html` 就会打开Swagger UI文档门户：![如何做...](img/image00856.jpeg)
- en: 'More than just a REST documentation repository, it is also a handy test harness:'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是一个REST文档存储库，它也是一个方便的测试工具：
- en: '![How to do it...](img/image00857.jpeg)'
  id: totrans-1935
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00857.jpeg)'
- en: How it works...
  id: totrans-1936
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Swagger has its own controller that publishes the metadata of our API. The Swagger
    UI targets this metadata, parses it, and represents it as a usable interface.
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger有自己的控制器，发布我们的API的元数据。Swagger UI针对此元数据，解析它，并将其表示为可用的接口。
- en: An exposed metadata
  id: totrans-1938
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个公开的元数据
- en: 'On the server side, with the `com.mangofactory/swagger-springmvc` dependency
    added to the `swagger-springmvc` project and with the presented `SwaggerConfig`
    class, the library creates a controller on the root path: `/api-docs` and publishes
    the entire metadata there for the REST API.'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，通过将`com.mangofactory/swagger-springmvc`依赖添加到`swagger-springmvc`项目，并使用提供的`SwaggerConfig`类，该库在根路径上创建一个控制器：`/api-docs`，并在那里发布整个元数据供REST
    API使用。
- en: 'If you visit `http://localhost:8080/api/api-docs`, you will reach the root
    of our REST API documentation:'
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问`http://localhost:8080/api/api-docs`，您将到达我们的REST API文档的根目录：
- en: '![An exposed metadata](img/image00858.jpeg)'
  id: totrans-1941
  prefs: []
  type: TYPE_IMG
  zh: '![一个公开的元数据](img/image00858.jpeg)'
- en: This content is the exposed metadata that implements the Swagger specification.
    The metadata is a navigable structure. Links to other parts of the metadata can
    be found in the `<path>` nodes of the XML content.
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
  zh: 这个内容是实现Swagger规范的公开元数据。元数据是一个可导航的结构。在XML内容的`<path>`节点中可以找到到元数据其他部分的链接。
- en: The Swagger UI
  id: totrans-1943
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Swagger UI
- en: The Swagger UI is only made of static files (CSS, HTML, JavaScript, and so on).
    The JavaScript logic implements the Swagger specification and recursively parses
    the entire exposed metadata. It then dynamically builds the API documentation
    website and test harness that we have presented, digging out every single endpoint
    and its metadata.
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger UI只由静态文件（CSS、HTML、JavaScript等）组成。JavaScript逻辑实现了Swagger规范，并递归解析了整个公开的元数据。然后动态构建API文档网站和测试工具，挖掘出每个端点及其元数据。
- en: There's more...
  id: totrans-1945
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this section, we suggest you to look further into Swagger and its Spring
    MVC project implementation.
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们建议您进一步了解Swagger及其Spring MVC项目的实现。
- en: The Swagger.io
  id: totrans-1947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Swagger.io
- en: 'Visit the framework''s website and its specification: [http://swagger.io](http://swagger.io).'
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: 访问框架的网站和规范：[http://swagger.io](http://swagger.io)。
- en: The swagger-springmvc documentation
  id: totrans-1949
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: swagger-springmvc文档
- en: 'The swagger-springmvc project is changing as it is becoming part of a bigger
    project named SpringFox. SpringFox now also supports the second version of the
    Swagger specification. We recommend you to visit their current reference document:'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: swagger-springmvc项目正在发生变化，因为它正在成为一个名为SpringFox的更大的项目的一部分。SpringFox现在还支持Swagger规范的第二个版本。我们建议您访问他们当前的参考文档：
- en: '[http://springfox.github.io/springfox/docs/current](http://springfox.github.io/springfox/docs/current)'
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://springfox.github.io/springfox/docs/current](http://springfox.github.io/springfox/docs/current)'
- en: 'They also provide a migration guide to move from the swagger specification
    1.2 (that we have implemented here) to the swagger specification 2.0:'
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还提供了一个迁移指南，从我们实现的swagger规范1.2迁移到swagger规范2.0：
- en: '[https://github.com/springfox/springfox/blob/master/docs/transitioning-to-v2.md](https://github.com/springfox/springfox/blob/master/docs/transitioning-to-v2.md)'
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/springfox/springfox/blob/master/docs/transitioning-to-v2.md](https://github.com/springfox/springfox/blob/master/docs/transitioning-to-v2.md)'
- en: See also
  id: totrans-1954
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'This section guides you toward alternative tools and specification to Swagger:'
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: 本节指导您使用Swagger的替代工具和规范：
- en: Different tools, different standards
  id: totrans-1956
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不同的工具，不同的标准
- en: 'We have mentioned that there isn''t a common standard yet that would clearly
    legitimize one tool over another. Thus, it is probably good to acknowledge tools
    other than Swagger because things are moving quite fast in this domain. Here,
    you can find two great comparison articles:'
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到还没有一个明确合法化一个工具胜过另一个的共同标准。因此，可能很好地承认除了Swagger之外的工具，因为在这个领域事情发展得非常快。在这里，您可以找到两篇很好的比较文章：
- en: '[http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php](http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php)'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php](http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php)'
- en: '[http://apiux.com/2013/04/09/rest-metadata-formats](http://apiux.com/2013/04/09/rest-metadata-formats)'
  id: totrans-1959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://apiux.com/2013/04/09/rest-metadata-formats](http://apiux.com/2013/04/09/rest-metadata-formats)'
- en: Chapter 5. Authenticating with Spring MVC
  id: totrans-1960
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用Spring MVC进行身份验证
- en: 'This chapter covers the following recipes:'
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下内容：
- en: Configuring Apache HTTP to proxy your Tomcat(s)
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Apache HTTP以代理您的Tomcat
- en: Adapting users and roles to fit Spring Security
  id: totrans-1963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整用户和角色以适应Spring安全
- en: Authenticating over a BASIC scheme
  id: totrans-1964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过BASIC方案进行身份验证
- en: Storing credentials in a REST environment
  id: totrans-1965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在REST环境中存储凭据
- en: Authenticating with a third-party OAuth2 scheme
  id: totrans-1966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方OAuth2方案进行身份验证
- en: Authorizing on services and controllers
  id: totrans-1967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务和控制器上进行授权
- en: Introduction
  id: totrans-1968
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, developing the `CloudStreetMarket` application, we cover two
    ways of authenticating in a Spring environment.
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍在Spring环境中进行身份验证的两种方式。
- en: We believe that only providing Security annotations to restrict controllers
    and services wouldn't be sufficient to give a big picture of Spring Authentication.
    It's clearly not possible to feel confident about the Security tools that can
    be used with Spring MVC, without a few key concepts such as the role of the `Authentication`
    object, the Spring Security filter-chain, the `SecurityInterceptor` workflow,
    and so on. As it is necessary for configuring OAuth, we will also show you how
    to set up an Apache HTTP proxy and a host alias on your machine to emulate the
    `cloudstreetmarket.com` domain locally.
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为只提供安全注释来限制控制器和服务不足以给出Spring身份验证的整体图景。如果没有一些关键概念，如`Authentication`对象的作用，Spring安全过滤器链，`SecurityInterceptor`工作流程等，就不可能对可以与Spring
    MVC一起使用的安全工具感到自信。由于需要配置OAuth，我们还将向您展示如何在您的机器上设置Apache HTTP代理和主机别名，以在本地模拟`cloudstreetmarket.com`域。
- en: Configuring Apache HTTP to proxy your Tomcat(s)
  id: totrans-1971
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Apache HTTP以代理您的Tomcat
- en: We are going to access the application using a local alias `cloudstreetmarket.com`
    (on the port `80`) rather than the former `localhost:8080`. Implementing the configuration
    for that is sometimes a mandatory step, when developing third-party integrations.
    In our case, the third-party will be Yahoo! and its OAuth2 authentication servers.
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本地别名`cloudstreetmarket.com`（端口`80`）访问应用程序，而不是以前的`localhost:8080`。在开发第三方集成时，实施该配置有时是一个强制性步骤。在我们的情况下，第三方将是Yahoo！及其OAuth2身份验证服务器。
- en: Getting ready
  id: totrans-1973
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: It will mostly be about configuration. We will install an Apache HTTP server
    and stick to the Apache Tomcat How-To. This will drive us to update our Tomcat
    connector and to create a virtual host in the Apache configuration file.
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要是关于配置。我们将安装Apache HTTP服务器，并遵循Apache Tomcat操作指南。这将使我们更新Tomcat连接器并在Apache配置文件中创建虚拟主机。
- en: You will discover how this configuration can allow a great flexibility and simply
    serve web content to the customers with an advanced and scalable architecture.
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: 您将发现这种配置如何允许灵活性，并简单地为客户提供高级和可扩展的架构来提供网页内容。
- en: How to do it...
  id: totrans-1976
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: On MS Windows, download and install Apache HTTP Server.
  id: totrans-1977
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MS Windows上，下载并安装Apache HTTP服务器。
- en: 'The easiest way is probably to download directly the binaries from an official
    distributor. Select and download the appropriated latest Zip archive from one
    of the following URLs:'
  id: totrans-1978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最简单的方法可能是直接从官方分发商下载二进制文件。从以下URL之一选择并下载适当的最新Zip存档：
- en: Create a directory `C:\apache24` and unzip the downloaded archive into this
    location.
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个目录`C:\apache24`，并将下载的存档解压缩到此位置。
- en: '[http://www.apachelounge.com/download](http://www.apachelounge.com/download)'
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.apachelounge.com/download](http://www.apachelounge.com/download)'
- en: '[http://www.apachehaus.com/cgi-bin/download.plx](http://www.apachehaus.com/cgi-bin/download.plx)'
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.apachehaus.com/cgi-bin/download.plx](http://www.apachehaus.com/cgi-bin/download.plx)'
- en: Note
  id: totrans-1982
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You should be able to reach the bin directory through this form: `C:\apache24\bin`.'
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够通过此表格访问bin目录：`C:\apache24\bin`。
- en: On Linux / Mac OS, download and install Apache HTTP Server.
  id: totrans-1984
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux / Mac OS上，下载并安装Apache HTTP服务器。
- en: 'Download the latest sources (compressed in a `tar.gz` archive) from the apache
    website:'
  id: totrans-1985
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Apache网站下载最新的源代码（压缩在`tar.gz`存档中）：
- en: '[http://httpd.apache.org/download.cgi#apache24](http://httpd.apache.org/download.cgi#apache24)'
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://httpd.apache.org/download.cgi#apache24](http://httpd.apache.org/download.cgi#apache24)'
- en: 'From the downloaded archive, extract the sources:'
  id: totrans-1987
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下载的存档中提取源代码：
- en: '[PRE176]'
  id: totrans-1988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Note
  id: totrans-1989
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `NN` command being the current version of Apache HTTP.
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: '`NN`命令是当前版本的Apache HTTP。'
- en: 'Autoconfigure the arborescence:'
  id: totrans-1991
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动配置目录结构：
- en: '[PRE177]'
  id: totrans-1992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Compile the package:'
  id: totrans-1993
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译软件包：
- en: '[PRE178]'
  id: totrans-1994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'Install the arborescence:'
  id: totrans-1995
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装目录结构：
- en: '[PRE179]'
  id: totrans-1996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: On MS Windows, add a new alias in the hosts file.
  id: totrans-1997
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MS Windows上，在hosts文件中添加一个新的别名。
- en: 'Edit with Notepad the file that can be found at the following path:'
  id: totrans-1998
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用记事本编辑可以在以下路径找到的文件：
- en: '[PRE180]'
  id: totrans-1999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Note
  id: totrans-2000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This file has no extension, Notepad 'doesn't complain about that when you want
    to save the file.
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件没有扩展名，记事本在保存文件时不会抱怨。
- en: 'Add the following entry at the end of the file:'
  id: totrans-2002
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下条目：
- en: '[PRE181]'
  id: totrans-2003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Save the modification.
  id: totrans-2004
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存修改。
- en: On Linux/Mac OS, add a new alias in the hosts file.
  id: totrans-2005
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux / Mac OS上，在hosts文件中添加一个新的别名。
- en: 'Edit the file that can be found at the following path: `/etc/hosts`'
  id: totrans-2006
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑可以在以下路径找到的文件：`/etc/hosts`
- en: 'Add the following entry at the end of the file:'
  id: totrans-2007
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下条目：
- en: '[PRE182]'
  id: totrans-2008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Save the modification.
  id: totrans-2009
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存修改。
- en: For all Operation Systems, edit the `httpd.conf` Apache configuration file.
  id: totrans-2010
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于所有操作系统，编辑`httpd.conf` Apache配置文件。
- en: This file can either be found at `C:\apache24\conf` (on Windows) or at `/usr/local/apache2/conf`
    (on Linux or Mac).
  id: totrans-2011
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此文件可以在`C:\apache24\conf`（Windows上）或`/usr/local/apache2/conf`（Linux或Mac上）找到。
- en: 'Uncomment the following two lines:'
  id: totrans-2012
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消以下两行的注释：
- en: '[PRE183]'
  id: totrans-2013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Add the following block at the very bottom of the file:'
  id: totrans-2014
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的最底部添加以下块：
- en: '[PRE184]'
  id: totrans-2015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Note
  id: totrans-2016
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A sample of a modified `httpd.conf` file (for Apache HTTP 2.4.18) can be found
    in the `chapter_5/source_code/app/apache` directory.
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`chapter_5/source_code/app/apache`目录中找到修改后的`httpd.conf`文件示例（适用于Apache HTTP
    2.4.18）。
- en: Edit the `server.xml` Tomcat configuration file.
  id: totrans-2018
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`server.xml` Tomcat配置文件。
- en: This file can either be found at `C:\tomcat8\conf` (on Windows) or at `/home/usr/{system.username}/tomcat8/conf`
    (on Linux or Mac).
  id: totrans-2019
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此文件可以在`C:\tomcat8\conf`（在Windows上）或`/home/usr/{system.username}/tomcat8/conf`（在Linux或Mac上）找到。
- en: 'Find the `<Connector port"="8080"" protocol"="HTTP/1.1""... >` definition and
    edit it as follows:'
  id: totrans-2020
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`<Connector port"="8080"" protocol"="HTTP/1.1""... >`定义并编辑如下：
- en: '[PRE185]'
  id: totrans-2021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Note
  id: totrans-2022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A sample of a modified `server.xml` file (for Apache Tomcat 8.0.30) can be found
    in the `chapter_5/source_code/app/tomcat` directory.
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`chapter_5/source_code/app/tomcat`目录中找到修改后的`server.xml`文件示例（适用于Apache Tomcat
    8.0.30）。
- en: On MS Windows, start the Apache HTTP server.
  id: totrans-2024
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MS Windows上，启动Apache HTTP服务器。
- en: Open a command prompt window.
  id: totrans-2025
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符窗口。
- en: 'Enter the following command:'
  id: totrans-2026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE186]'
  id: totrans-2027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Install an Apache service:'
  id: totrans-2028
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Apache服务：
- en: '[PRE187]'
  id: totrans-2029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Start the server:'
  id: totrans-2030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE188]'
  id: totrans-2031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'On Linux/Mac OS, start the Apache HTTP server:'
  id: totrans-2032
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux/Mac OS上，启动Apache HTTP服务器：
- en: 'Start the server:'
  id: totrans-2033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE189]'
  id: totrans-2034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Now start the Tomcat server and open your favorite web browser. Go to `http://cloudstreetmarket.com`,
    you should obtain the following landing-page:'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动Tomcat服务器并打开您喜欢的网络浏览器。转到`http://cloudstreetmarket.com`，您应该获得以下着陆页：
- en: '![How to do it...](img/image00859.jpeg)'
  id: totrans-2036
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00859.jpeg)'
- en: How it works...
  id: totrans-2037
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Apache HTTP configuration we made here is somehow a standard nowadays. It
    supplies an infinite level of customization on a network. It also allows us to
    initiate the scalability.
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里进行的Apache HTTP配置现在在某种程度上是标准的。它提供了无限级别的网络定制。它还允许我们启动可扩展性。
- en: DNS configuration or host aliasing
  id: totrans-2039
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DNS配置或主机别名
- en: Let's revisit how web browsers work. When we target a URL in the web browser,
    the final server is accessed from its IP, to establish a TCP connection on a specific
    port. The browser needs to resolve this IP for the specified name.
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视一下网络浏览器的工作原理。当我们在网络浏览器中输入URL时，最终服务器是通过其IP访问的，以在特定端口上建立TCP连接。浏览器需要解析指定名称的IP。
- en: 'To do so, it queries a chain of Domain Name Servers (on the Internet, the chain
    often starts with the user''s **Internet** **Service Provider** (**ISP**). Each
    DNS basically works this way:'
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，它查询一系列域名服务器（在互联网上，该链通常从用户的**互联网服务提供商**（**ISP**）开始）。每个DNS基本上都是这样工作的：
- en: It tries to resolve the IP by itself, looking-up in its database or its cache
  id: totrans-2042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它尝试自行解析IP，查找其数据库或缓存中的IP
- en: If unsuccessful, it asks another DNS and waits for the response to cache the
    result and sends it back to the caller
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不成功，它会询问另一个DNS并等待响应以缓存结果并将其发送回调用者
- en: A DNS managing one specific domain is called a **Start Of Authority** (**SOA**).
    Such DNS are usually provided by registrars, and we usually use their services
    to configure records (and our server IP) for a domain zone.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: 管理特定域名的DNS称为**权威起始**（**SOA**）。这样的DNS通常由注册商提供，我们通常使用他们的服务来为域区配置记录（和我们的服务器IP）。
- en: Around the web, each DNS tries to resolve the ultimate SOA. The top hierarchy
    of DNS servers is called **root name** **servers**. There are hundreds of them
    bound to one specific **Top-Level Domain** (**TLD** such as .com, `.net`, `.org`…).
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上，每个DNS都尝试解析最终的SOA。DNS服务器的顶层层次结构称为**根名称服务器**。有数百个根名称服务器绑定到一个特定的**顶级域**（**TLD**，如.com、.net、.org...）。
- en: When the browser gets the IP, it tries to establish a TCP connection on the
    specified port (it defaults to 80). The remote server accepts the connection and
    the HTTP request is sent over the network.
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器获得IP时，它会尝试在指定端口上建立TCP连接（默认为80）。远程服务器接受连接并通过网络发送HTTP请求。
- en: In production – editing DNS records
  id: totrans-2047
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在生产中-编辑DNS记录
- en: 'As soon as we approach the production stage, we need the real domain name to
    be configured for DNS records, online, with a domain-name provider. There are
    different types of records to edit. Each one serves a specific purpose or resource
    type: host, canonical names, mail-exchanger, name server, and others. Specific
    guidance can usually be found on the domain name provider website.'
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们接近生产阶段，我们需要真正的域名在域名提供商的网站上在线配置DNS记录。有不同类型的记录需要编辑。每个记录都有特定的目的或资源类型：主机、规范名称、邮件交换器、名称服务器等。通常可以在域名提供商的网站上找到具体的指导。
- en: An alias for the host
  id: totrans-2049
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机的别名
- en: Before contacting any kind of DNS, the operating system may be able to resolve
    the IP by itself. For this purpose, the host file is a plain-text `registry`.
    Adding aliases to this registry defines proxies to whatever final server. Doing
    so is a common technique for development environments but isn't restricted to
    them.
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: 在联系任何类型的DNS之前，操作系统可能能够自行解析IP。为此，主机文件是一个纯文本的`注册表`。向此注册表添加别名定义了对任何最终服务器的代理。这是开发环境的常见技术，但不限于它们。
- en: Each line represents an IP address followed by one or more host names. Each
    field is separated by white space or tabs. Comments can be specified at the very
    beginning of a line with a `#`character. Blank lines are ignored and IPs can be
    defined in *IPv4* or *IPv6*.
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行代表一个IP地址，后面跟着一个或多个主机名。每个字段由空格或制表符分隔。可以在一行的开头用`#`字符指定注释。空行将被忽略，IP可以用*IPv4*或*IPv6*定义。
- en: This file is only for hosts aliasing, we don't deal with ports at this stage!
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件仅用于主机别名，我们在此阶段不处理端口！
- en: Alias definition for OAuth developments
  id: totrans-2053
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OAuth开发的别名定义
- en: In this chapter, we will authenticate with an OAuth2 protocol. In OAuth, there
    is an **Authentication** **Server (AS)** and a **Service Provider** (**SP**).
    In our case, the authentication server will be a third-party system (Yahoo!) and
    the service provider will be our application (`cloudstreetmarket.com`).
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用OAuth2协议进行身份验证。在OAuth中，有一个**认证服务器（AS）**和一个**服务提供商（SP）**。在我们的情况下，认证服务器将是一个第三方系统（Yahoo！），服务提供商将是我们的应用程序（`cloudstreetmarket.com`）。
- en: The OAuth2 authentication and authorization happen on the third-party side.
    As soon as these steps are completed, the authentication Server redirects the
    HTTP request to the service provider using a call-back URL passed as a parameter
    or stored as a variable.
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth2认证和授权发生在第三方端。一旦完成这些步骤，认证服务器将HTTP请求重定向到服务提供商，使用作为参数传递或存储为变量的回调URL。
- en: Third-parties sometimes block call-back URLs that are pointing to `localhost:8080`.
    Testing and developing OAuth2 conversations locally remains a necessity.
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方有时会阻止指向`localhost:8080`的回调URL。在本地测试和开发OAuth2对话仍然是必要的。
- en: Configuring a proxy for the hostname (in the hosts file) and a virtual host
    in an HTTP server to manage ports, URL rewriting, and redirections is a good solution
    for the local environment but also for a production infrastructure.
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
  zh: 为主机名配置代理（在hosts文件中）和在HTTP服务器中管理端口、URL重写和重定向的虚拟主机是本地环境以及生产基础设施的一个好解决方案。
- en: Apache HTTP configuration
  id: totrans-2058
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache HTTP配置
- en: The Apache HTTP server uses the TCP/IP protocol and provides an implementation
    of HTTP. TCP/IP allows computers to talk with each other throughout a network.
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: Apache HTTP服务器使用TCP/IP协议并提供了HTTP的实现。TCP/IP允许计算机在整个网络中相互通信。
- en: Each computer using TCP/IP on a network (Local Network Area or Wide Network
    Area) has an IP address. When a request arrives on an interface (an Ethernet connection
    for example), it is attempted to be mapped to a service on the machine (DNS, SMTP,
    HTTP, and so on) using the targeted port number. Apache usually uses the port
    80 to listen to. This is a situation when Apache HTTP takes care of one site.
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上使用TCP/IP的每台计算机（局域网或广域网）都有一个IP地址。当请求到达接口（例如以太网连接）时，会尝试将其映射到机器上的服务（DNS、SMTP、HTTP等）使用目标端口号。Apache通常使用端口80进行监听。这是Apache
    HTTP处理一个站点的情况。
- en: Virtual-hosting
  id: totrans-2061
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 虚拟主机
- en: This feature allows us to run and maintain more than one website from a single
    instance of Apache. We usually group in a `<VirtualHost...>` section, a set of
    Apache directives for a dedicated site. Each group is identified by a **site ID**.
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能允许我们从单个Apache实例运行和维护多个网站。我们通常在`<VirtualHost...>`部分中对一组专用站点的Apache指令进行分组。每个组由一个**站点ID**标识。
- en: 'Different sites can be defined as follows:'
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的站点可以定义如下：
- en: 'By name:'
  id: totrans-2064
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按名称：
- en: '[PRE190]'
  id: totrans-2065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'By IP (you will still have to define a `ServerName` inside the block):'
  id: totrans-2066
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按IP（你仍然需要在块内定义一个`ServerName`）：
- en: '[PRE191]'
  id: totrans-2067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'By port:'
  id: totrans-2068
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按端口：
- en: '[PRE192]'
  id: totrans-2069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Our current configuration with one machine and one Tomcat server is not the
    ideal scenario to demonstrate all the benefits of virtual hosting. However, we
    have delimited one site with its configuration. It's a first step towards scalability
    and load-balancing.
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的配置只有一台机器和一个Tomcat服务器，并不是展示虚拟主机所有好处的理想场景。然而，我们已经限定了一个站点及其配置。这是朝着可扩展性和负载平衡迈出的第一步。
- en: The mod_proxy module
  id: totrans-2071
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mod_proxy模块
- en: This Apache module offers proxy/gateway capabilities to Apache HTTP server.
    It's a central feature as it can turn an Apache instance into a unique interface
    able to manage a complex set of applications balanced across multiple machines
    on the network.
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Apache模块为Apache HTTP服务器提供了代理/网关功能。这是一个核心功能，因为它可以将Apache实例转变为一个能够管理网络上多台机器上的复杂应用程序集的独特接口。
- en: 'It pushes Apache beyond its initial purpose: exposing a directory on the filesystem
    via HTTP. It depends on five specific sub-modules: `mod_proxy_http`, `mod_proxy_ftp`,
    `mod_proxy_ajp`, `mod_proxy_balancer`, and `mod_proxy_connect`. Each of them,
    when needed, requires the main `mod_proxy` dependency. Proxies can be defined
    as forward (`ProxyPass`) and/or as reverse (`ProxyPassReverse`). They are often
    used to provide internet-access to servers located behind firewalls.'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: 它将Apache推向了其初始目的之外：通过HTTP在文件系统上公开目录。它依赖于五个特定的子模块：`mod_proxy_http`、`mod_proxy_ftp`、`mod_proxy_ajp`、`mod_proxy_balancer`和`mod_proxy_connect`。每当需要时，它们都需要主要的`mod_proxy`依赖项。代理可以被定义为正向（`ProxyPass`）和/或反向（`ProxyPassReverse`）。它们经常用于为位于防火墙后面的服务器提供互联网访问。
- en: The `ProxyPass` can be replaced with `ProxyPassMatch` to offer regex-matching
    capabilities.
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProxyPass`可以被替换为`ProxyPassMatch`以提供正则匹配功能。'
- en: ProxyPassReverse
  id: totrans-2075
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ProxyPassReverse
- en: 'Reverse-proxies handle responses and redirections exactly as if they were webservers
    on their own. To be activated, they are usually bound to a `ProxyPass` definition
    as in our use case here:'
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: 反向代理处理响应和重定向，就好像它们是自己的Web服务器一样。要激活它们，它们通常绑定到`ProxyPass`定义，就像我们在这里的用例中一样：
- en: '[PRE193]'
  id: totrans-2077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Workers
  id: totrans-2078
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 工作者
- en: 'Proxies manage the configuration of underlying servers and also the communication
    parameters between them with objects called **workers** (see them as a set of
    parameters). When used for a reverse-proxy, these workers are configured using
    `ProxyPass` or `ProxyPassMatch`:'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: 代理管理底层服务器的配置，还管理它们之间的通信参数，使用称为**workers**的对象（将它们视为一组参数）。当用于反向代理时，这些workers使用`ProxyPass`或`ProxyPassMatch`进行配置：
- en: '[PRE194]'
  id: totrans-2080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'Some examples of worker-parameters are: `connectiontimeout` (in seconds), `keepalive`
    (On/Off), `loadfactor` (from 1 to 100), `route` (bound to `sessionid` when used
    inside a load balancer), `ping` (it sends CPING requests to ajp13 connections
    to ensure Tomcat is not busy), `min/max` (number of connection pool entries to
    the underlying server), `ttl` (expiry time for connections to underlying server).'
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: 一些worker-parameters的例子是：`connectiontimeout`（以秒为单位），`keepalive`（开/关），`loadfactor`（从1到100），`route`（在负载均衡器内使用时绑定到`sessionid`），`ping`（它向ajp13连接发送CPING请求以确保Tomcat没有忙），`min/max`（到底层服务器的连接池条目数），`ttl`（到底层服务器的连接的到期时间）。
- en: The mod_alias module
  id: totrans-2082
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: mod_alias模块
- en: This module provides URL aliasing and client-request redirecting. We have used
    this module for redirecting (by default) the requests to `cloudstreetmarket.com`
    to the index page of the portal web application (`cloudstreetmarket.com/portal/index`).
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块提供了URL别名和客户端请求重定向。我们已经使用这个模块将请求（默认情况下）重定向到`cloudstreetmarket.com`到门户网站应用程序的索引页面（`cloudstreetmarket.com/portal/index`）。
- en: Note that, in the same way `ProxyPassMatch` improves `ProxyPass`, `RedirectMatch`
    improves `Redirect` with regex-matching capability.
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与`ProxyPass`改进`ProxyPassMatch`的方式相同，`RedirectMatch`通过正则匹配功能改进了`Redirect`。
- en: Tomcat connectors
  id: totrans-2085
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tomcat连接器
- en: 'A **connector** represents a process unit that: listens to a specific port
    to receive requests, forwards these requests to a specific engine, receives the
    dynamic content generated by the engine and finally sends back the generated content
    to the port. Several connectors can be defined in a `Service` component, sharing
    one single *engine*. One or more *service(s)* can be defined for one Tomcat instance
    (`Server`). There are two types of connectors in Tomcat.'
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接器**代表一个处理单元，它：监听特定端口以接收请求，将这些请求转发到特定的引擎，接收引擎生成的动态内容，最后将生成的内容发送回端口。在`Service`组件中可以定义多个连接器，共享一个*engine*。一个Tomcat实例（`Server`）可以定义一个或多个*service*。Tomcat有两种类型的连接器。'
- en: HTTP connectors
  id: totrans-2087
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: HTTP连接器
- en: This connector is setup by default in Tomcat on the 8080 port. It supports the
    HTTP1/1 protocol and allows Catalina to work as a standalone webserver. HTTP connectors
    can be used behind a proxy. Tomcat supports `mod_proxy` as a load balancer. This
    is our intended configuration. When implemented behind a proxy, the attributes
    `proxyName` and `proxyPort` can be set so the servlets bind the specified values
    to the request attributes `request.getServerPort()` and `request.getServerName()`.
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: 这个连接器在Tomcat的8080端口上默认设置。它支持HTTP1/1协议，并允许Catalina作为独立的Web服务器运行。HTTP连接器可以在代理后面使用。Tomcat支持`mod_proxy`作为负载均衡器。这是我们的预期配置。当在代理后面实现时，可以设置`proxyName`和`proxyPort`属性，以便Servlet将指定的值绑定到请求属性`request.getServerPort()`和`request.getServerName()`。
- en: '*"This connector features the lowest latency and best overall performance."*'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: “这个连接器具有最低的延迟和最佳的整体性能。”
- en: 'The Tomcat documentation also states the following about HTTP proxying:'
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat文档还指出了以下关于HTTP代理的内容：
- en: '*"It should be noted that the performance of HTTP proxying is usually lower
    than the performance of AJP."*'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: “应该注意到，HTTP代理的性能通常低于AJP的性能。”
- en: However, configuring an AJP clustering adds an extra layer on the architecture.
    The necessity for this extra-layer is arguable for a stateless architecture.
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，配置AJP集群会在架构上增加一个额外的层。对于无状态架构来说，这个额外层的必要性是值得商榷的。
- en: AJP connectors
  id: totrans-2093
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AJP连接器
- en: AJP connectors behave as HTTP connectors except that they support the AJP protocol
    instead of HTTP. **Apache JServ Protocol** (**AJP**) is an optimized binary version
    of HTTP connector.
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: AJP连接器的行为与HTTP连接器相似，只是它们支持AJP协议而不是HTTP。**Apache JServ Protocol**（**AJP**）是HTTP连接器的优化二进制版本。
- en: It allows Apache HTTP to balance effectively requests among different Tomcats.
    It also allows Apache HTTP to serve the static content of web applications while
    Tomcat focuses on the dynamic content.
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许Apache HTTP有效地在不同的Tomcat之间平衡请求。它还允许Apache HTTP提供Web应用的静态内容，而Tomcat专注于动态内容。
- en: 'On the Apache HTTP side, this connector requires `mod_proxy_ajp`. Our configuration
    would probably have been:'
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache HTTP方面，这个连接器需要`mod_proxy_ajp`。我们的配置可能是：
- en: '[PRE195]'
  id: totrans-2097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: There is more…
  id: totrans-2098
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this section, we will provide a few links for a deeper understanding on
    the topics:'
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提供一些更深入了解这些主题的链接：
- en: 'DNS and the distributed system:'
  id: totrans-2100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS和分布式系统：
- en: '[http://computer.howstuffworks.com/dns.htm](http://computer.howstuffworks.com/dns.htm)'
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://computer.howstuffworks.com/dns.htm](http://computer.howstuffworks.com/dns.htm)'
- en: '[https://en.wikipedia.org/wiki/Root_name_server](https://en.wikipedia.org/wiki/Root_name_server)'
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Root_name_server](https://en.wikipedia.org/wiki/Root_name_server)'
- en: 'How the domain name system works:'
  id: totrans-2103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域名系统的工作原理：
- en: '[http://wiki.bravenet.com/How_the_domain_name_system_works](http://wiki.bravenet.com/How_the_domain_name_system_works)'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wiki.bravenet.com/How_the_domain_name_system_works](http://wiki.bravenet.com/How_the_domain_name_system_works)'
- en: 'Apache HTTP:'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP：
- en: '[http://httpd.apache.org/docs/trunk/getting-started.html](http://httpd.apache.org/docs/trunk/getting-started.html)'
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://httpd.apache.org/docs/trunk/getting-started.html](http://httpd.apache.org/docs/trunk/getting-started.html)'
- en: 'The modules we have used:'
  id: totrans-2107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用的模块：
- en: '[http://httpd.apache.org/docs/2.2/mod/mod_alias.html](http://httpd.apache.org/docs/2.2/mod/mod_alias.html)'
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://httpd.apache.org/docs/2.2/mod/mod_alias.html](http://httpd.apache.org/docs/2.2/mod/mod_alias.html)'
- en: '[http://httpd.apache.org/docs/2.2/en/mod/mod_proxy.html](http://httpd.apache.org/docs/2.2/en/mod/mod_proxy.html)'
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://httpd.apache.org/docs/2.2/en/mod/mod_proxy.html](http://httpd.apache.org/docs/2.2/en/mod/mod_proxy.html)'
- en: 'Tomcat connectors:'
  id: totrans-2110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat连接器：
- en: '[http://tomcat.apache.org/tomcat-8.0-doc/connectors.html](http://tomcat.apache.org/tomcat-8.0-doc/connectors.html)'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://tomcat.apache.org/tomcat-8.0-doc/connectors.html](http://tomcat.apache.org/tomcat-8.0-doc/connectors.html)'
- en: '[http://wiki.apache.org/tomcat/FAQ/Connectors](http://wiki.apache.org/tomcat/FAQ/Connectors)'
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wiki.apache.org/tomcat/FAQ/Connectors](http://wiki.apache.org/tomcat/FAQ/Connectors)'
- en: '[https://www.mulesoft.com/tcat/tomcat-connectors](https://www.mulesoft.com/tcat/tomcat-connectors)'
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.mulesoft.com/tcat/tomcat-connectors](https://www.mulesoft.com/tcat/tomcat-connectors)'
- en: 'In proxy mode:'
  id: totrans-2114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代理模式下：
- en: '[http://tomcat.apache.org/tomcat-8.0-doc/proxy-howto.html#Apache_2.0_Proxy_Support](http://tomcat.apache.org/tomcat-8.0-doc/proxy-howto.html#Apache_2.0_Proxy_Support)'
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://tomcat.apache.org/tomcat-8.0-doc/proxy-howto.html#Apache_2.0_Proxy_Support](http://tomcat.apache.org/tomcat-8.0-doc/proxy-howto.html#Apache_2.0_Proxy_Support)'
- en: See also
  id: totrans-2116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'When using an AJP connector, the ProxyPassReverse definition is slightly different
    from an HTTP connector:'
  id: totrans-2117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AJP连接器时，ProxyPassReverse的定义与HTTP连接器略有不同：
- en: '[http://www.apachetutor.org/admin/reverseproxies](http://www.apachetutor.org/admin/reverseproxies)'
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.apachetutor.org/admin/reverseproxies](http://www.apachetutor.org/admin/reverseproxies)'
- en: '[http://www.humboldt.co.uk/the-mystery-of-proxypassreverse](http://www.humboldt.co.uk/the-mystery-of-proxypassreverse)'
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.humboldt.co.uk/the-mystery-of-proxypassreverse](http://www.humboldt.co.uk/the-mystery-of-proxypassreverse)'
- en: 'If you wish to implement an AJP Cluster, go through the following URL:'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望实现AJP集群，请查看以下网址：
- en: '[http://www.richardnichols.net/2010/08/5-minute-guide-clustering-apache-tomcat/](http://www.richardnichols.net/2010/08/5-minute-guide-clustering-apache-tomcat/)'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.richardnichols.net/2010/08/5-minute-guide-clustering-apache-tomcat/](http://www.richardnichols.net/2010/08/5-minute-guide-clustering-apache-tomcat/)'
- en: Alternatives to Apache HTTP
  id: totrans-2122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代方案Apache HTTP
- en: The use of Apache HTTP can be argued on very high traffic, especially because
    the default configuration can lead the program to create a new process for every
    single connection.
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以争论使用Apache HTTP在非常高的流量上，特别是因为默认配置可能导致程序为每个连接创建一个新进程。
- en: If we only look for a proxy and load-balancer, we should also consider HAProxy.
    HAProxy is a high-availability load-balancer and proxy server. It is a free and
    open source (GPL v2) product used in references such as GitHub, StackOverflow,
    Reddit, Twitter, and others ([http://haproxy.org](http://haproxy.org)).
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只是寻找代理和负载均衡器，我们也应该考虑HAProxy。HAProxy是一个高可用的负载均衡器和代理服务器。它是一个免费的开源产品，被GitHub、StackOverflow、Reddit、Twitter等引用（[http://haproxy.org](http://haproxy.org)）。
- en: Nginx is probably (and currently) the most adopted alternative to Apache HTTP.
    Being focused on high concurrency and low memory usage, its license is a 2-clause
    BSD license ([http://nginx.org](http://nginx.org)).
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx可能（目前）是对Apache HTTP最受欢迎的替代品。它专注于高并发和低内存使用，其许可证是2条款的BSD许可证（[http://nginx.org](http://nginx.org)）。
- en: Adapting users and roles to Spring Security
  id: totrans-2126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将用户和角色调整到Spring Security
- en: We have thought interesting to split apart this section, since users and roles
    are usually borderline between the application and Spring Security.
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为将这一部分拆分开是有趣的，因为用户和角色通常处于应用程序和Spring Security之间的边界。
- en: Getting ready
  id: totrans-2128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will install the Spring Security dependencies and update
    the `User` Entity. We will also create an `Authority` entity that is based on
    a custom `Role` enum that we created. Finally, we update the `init.sql` script
    to add a set of existing users.
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将安装Spring Security依赖项并更新`User`实体。我们还将创建一个基于我们创建的自定义`Role`枚举的`Authority`实体。最后，我们更新`init.sql`脚本以添加一组现有用户。
- en: How to do it...
  id: totrans-2130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v5.x.x`. Then, run a `maven clean install` command on the `cloudstreetmarket-parent`
    module (right-click on the module, go to **Run as…** | **Maven Clean**, and then
    navigate to **Run as…** | **Maven Install**). Execute a `Maven Update Project`
    to synchronize Eclipse with the maven configuration (right-click on the module
    and then navigate to **Maven** | **Update Project…)**.
  id: totrans-2131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse的**Git Perspective**中，检出分支`v5.x.x`的最新版本。然后，在`cloudstreetmarket-parent`模块上运行`maven
    clean install`命令（右键单击模块，转到**Run as…** | **Maven Clean**，然后转到**Run as…** | **Maven
    Install**）。执行`Maven Update Project`以将Eclipse与maven配置同步（右键单击模块，然后转到**Maven** |
    **Update Project…)**。
- en: Note
  id: totrans-2132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will notice a few changes both in the frontend and backend of the code.
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到前端和后端代码都有一些变化。
- en: 'Spring Security comes with the following dependencies, added in `cloudstreetmarket-parent`,
    `cloudstreetmarket-core` and `cloudstreetmarket-api`::'
  id: totrans-2134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Security附带以下依赖项，添加到`cloudstreetmarket-parent`、`cloudstreetmarket-core`和`cloudstreetmarket-api`中：
- en: '[PRE196]'
  id: totrans-2135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'The `User` entity has been updated. It now reflects the `users` table (instead
    of the previous `user` table). It also implements the `UserDetails` interface:'
  id: totrans-2136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`User`实体已更新。它现在反映了`users`表（而不是以前的`user`表）。它还实现了`UserDetails`接口：'
- en: '[PRE197]'
  id: totrans-2137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: This `User` Entity has a relationship with `SocialUser`. `SocialUser` comes
    into play with the OAuth2 authentication, and we will develop this part later.
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`User`实体与`SocialUser`有关联。`SocialUser`在OAuth2认证中发挥作用，我们将在稍后开发这部分。
- en: 'An Authority Entity has been created and maps a `authorities` table. This Entity
    also implements the `GrantedAuthority` interface. The class is the following:'
  id: totrans-2139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已创建一个Authority实体并映射了`authorities`表。该实体还实现了`GrantedAuthority`接口。该类如下：
- en: '[PRE198]'
  id: totrans-2140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'For a more readable code, we have created a `Role` Enum in the `cloudstreetmarket-core`
    module, for the different roles:'
  id: totrans-2141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使代码更易读，我们在`cloudstreetmarket-core`模块中创建了一个`Role`枚举，用于不同的角色：
- en: '[PRE199]'
  id: totrans-2142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Also, we have made a few changes in the `init.sql` file. The existing pre-initialization
    scripts related to users, have been adapted to suit the new schema:'
  id: totrans-2143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们在`init.sql`文件中进行了一些更改。现有的与用户相关的预初始化脚本已经适应了新的模式：
- en: '[PRE200]'
  id: totrans-2144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Start the application. (No exceptions should be observed).
  id: totrans-2145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序。（不应观察到任何异常）。
- en: Click on the **login** button (on the right-hand side of the main menu). You
    will see the following popup that allows entering a username and a password to
    log in:![How to do it...](img/image00860.jpeg)
  id: totrans-2146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击主菜单右侧的**登录**按钮。您将看到以下弹出窗口，允许输入用户名和密码进行登录：![如何做...](img/image00860.jpeg)
- en: You also have the option to create a new user. In the previous popup, click
    on the **Create new account** link that can be found at the bottom right. This
    will load the following pop-up content:![How to do it...](img/image00861.jpeg)
  id: totrans-2147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以选择创建一个新用户。在上一个弹出窗口中，单击右下角的**创建新帐户**链接。这将加载以下弹出内容：![如何做...](img/image00861.jpeg)
- en: 'Let''s create a new user with the following values:'
  id: totrans-2148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用以下值创建一个新用户：
- en: '[PRE201]'
  id: totrans-2149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Note
  id: totrans-2150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the profile picture, you must create on your file system, the directory
    structure corresponding to the property `pictures.user.path` in `cloudstreetmarket-api/src/main/resources/application.properties`.
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于个人资料图片，您必须在文件系统上创建与`cloudstreetmarket-api/src/main/resources/application.properties`中的属性`pictures.user.path`相对应的目录结构。
- en: Then, click on the user icon in order to upload a profile picture.
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击用户图标以上传个人资料图片。
- en: '![How to do it...](img/image00862.jpeg)'
  id: totrans-2153
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00862.jpeg)'
- en: Finally, hit the **Sign up** button and the popup should disappear.
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击**注册**按钮，弹出窗口应该消失。
- en: 'Now, call the following URI: `http://cloudstreetmarket.com/api/users/marcus`.
    The application should fetch the following persisted data for the Marcus user:![How
    to do it...](img/image00863.jpeg)'
  id: totrans-2155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，调用以下URI：`http://cloudstreetmarket.com/api/users/marcus`。应用程序应该获取Marcus用户的以下持久数据：![如何做...](img/image00863.jpeg)
- en: How it works...
  id: totrans-2156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The recipe at this stage preconfigures our entities so they comply with Spring
    Security. A couple of concepts about Spring Security are mentioned in this part
    and developed in the following sections.
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们预先配置了我们的实体，使它们符合Spring Security。关于Spring Security的一些概念在这部分提到，并在接下来的部分中进行了开发。
- en: Introduction to Spring Security
  id: totrans-2158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Security简介
- en: 'Spring Security is built around three core components: the `SecurityContextHolder`
    object, the `SecurityContext`, and the `Authentication` object.'
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security围绕三个核心组件构建：`SecurityContextHolder`对象、`SecurityContext`和`Authentication`对象。
- en: The `SecurityContextHolder` object allows us to define and carry for one JVM
    a `SecurityContextHolderStrategy` implementation (focused on storing and retrieving
    a `SecurityContext`).
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityContextHolder`对象允许我们为一个JVM定义并携带一个`SecurityContextHolderStrategy`实现（专注于存储和检索`SecurityContext`）。'
- en: Note
  id: totrans-2161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `SecurityContextHolder` has the following `static` field:'
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityContextHolder`有以下`static`字段：'
- en: '[PRE202]'
  id: totrans-2163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: By default, and in most of the designs, the selected-strategy uses `Threadlocals`
    (`ThreadLocalSecurityContextHolderStrategy`).
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在大多数设计中，所选的策略使用`Threadlocals`（`ThreadLocalSecurityContextHolderStrategy`）。
- en: ThreadLocal context holders
  id: totrans-2165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ThreadLocal上下文持有者
- en: 'A Tomcat instance manages a Spring MVC servlet (like any other servlet) with
    multiple threads as the multiple HTTP requests come in. The code is as follows:'
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Tomcat实例管理一个Spring MVC servlet（像任何其他servlet一样）并使用多个线程来处理多个HTTP请求。代码如下：
- en: '[PRE203]'
  id: totrans-2167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Each thread allocated to a request on Spring MVC has access to a copy of the
    `SecurityContext` carrying an `Authentication` object for one user (or one other
    identifiable thing).
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC上为请求分配的每个线程都可以访问携带一个用户（或其他可识别的事物）的`Authentication`对象的`SecurityContext`的副本。
- en: Once a copy of the `SecurityContext` is no longer referred, it gets garbage-collected.
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`SecurityContext`的副本不再被引用，它就会被垃圾回收。
- en: Noticeable Spring Security interfaces
  id: totrans-2170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显著的Spring Security接口
- en: There is a bunch of noticeable interfaces in Spring Security. We will particularly
    visit `Authentication`, `UserDetails`, `UserDetailsManager`, and `GrantedAuthority`.
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security中有一堆显著的接口。我们将特别访问`Authentication`、`UserDetails`、`UserDetailsManager`和`GrantedAuthority`。
- en: The Authentication interface
  id: totrans-2172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Authentication接口
- en: The Spring `Authentication` object can be retrieved from the `SecurityContext`.
    This object is usually managed by Spring Security but applications still often
    need to access it for their business.
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: Spring `Authentication`对象可以从`SecurityContext`中检索。这个对象通常由Spring Security管理，但应用程序仍经常需要访问它来进行业务处理。
- en: 'Here is the interface for the `Authentication` object:'
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Authentication`对象的接口：
- en: '[PRE204]'
  id: totrans-2175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'It provides access to the `Principal` (representing the identified user, entity,
    company or customer), its credentials, its authorities and to some extra-details
    that may be needed. Now let''s see how, from the `SecurityContextHolder`, a user
    can be retrieved:'
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供对`Principal`（代表已识别的用户、实体、公司或客户）、其凭据、其权限以及可能需要的一些额外详细信息的访问。现在让我们看看如何从`SecurityContextHolder`中检索用户：
- en: '[PRE205]'
  id: totrans-2177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: The `Principal` class can be cast into the Spring `UserDetails` Type, which
    is exposed by the core framework. This interface is used as a standard bridge
    in several extension-modules (*Spring Social*, *Connect*, *Spring Security SAML*,
    *Spring Security LDAP*, and so on.).
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: '`Principal`类可以转换为Spring `UserDetails`类型，该类型由核心框架公开。该接口用作几个扩展模块（*Spring Social*、*Connect*、*Spring
    Security SAML*、*Spring Security LDAP*等）中的标准桥梁。'
- en: The UserDetails interface
  id: totrans-2179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UserDetails接口
- en: The `UserDetails` implementations represent a Principal in an extensible and
    application-specific way.
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserDetails`实现以可扩展和特定于应用程序的方式表示主体。'
- en: 'You must be aware of the one-method `UserDetailsService` interface that provides
    the key-method `loadUserByUsername` for account-retrieval within the core framework:'
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须了解提供核心框架中账户检索的关键方法`loadUserByUsername`的单方法`UserDetailsService`接口：
- en: '[PRE206]'
  id: totrans-2182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Spring Security offers two implementations for this interface: `CachingUserDetailsService`
    and `JdbcDaoImpl`, whether we want to benefit from an in-memory `UserDetailsService`
    or from a JDBC-based `UserDetailsService` implementation. More globally, what
    usually matters is where and how users and roles are persisted so Spring Security
    can access this data on itself and process authentications.'
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security为这个接口提供了两种实现：`CachingUserDetailsService`和`JdbcDaoImpl`，无论我们是想要从内存中的`UserDetailsService`还是从基于JDBC的`UserDetailsService`实现中受益。更普遍地，通常重要的是用户和角色在哪里以及如何持久化，以便Spring
    Security可以自行访问这些数据并处理认证。
- en: Authentication providers
  id: totrans-2184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 认证提供者
- en: The way Spring Security accesses the user and role data is configured with the
    selection or the reference of an authentication-provider in the Spring Security
    configuration file with the security namespace.
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security访问用户和角色数据的方式是通过在Spring Security配置文件中使用安全命名空间中的身份验证提供程序的选择或引用进行配置的。
- en: 'Here are two examples of configuration when using the native `UserDetailsService`
    implementations:'
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用原生`UserDetailsService`实现时的两个配置示例：
- en: '[PRE207]'
  id: totrans-2187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: This first example specifies a JDBC-based `UserDetailsService`. The next example
    specifies an in-memory `UserDetailsService.`
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个例子指定了基于JDBC的`UserDetailsService`。下一个例子指定了一个内存中的`UserDetailsService`。
- en: '[PRE208]'
  id: totrans-2189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'In our case, we have registered our own `UserDetailsService` implementation
    (`communityServiceImpl)` as follows:'
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们已经注册了我们自己的`UserDetailsService`实现（`communityServiceImpl`）如下：
- en: '[PRE209]'
  id: totrans-2191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: We thought more appropriate to continue accessing the database layer through
    the JPA abstraction.
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为通过JPA抽象继续访问数据库层更合适。
- en: The UserDetailsManager interface
  id: totrans-2193
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: UserDetailsManager接口
- en: 'Spring Security provides a `UserDetails` implementation `org.sfw.security.core.userdetails.User`,
    which can be used directly or extended. The User class is defined as follows:'
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了一个`UserDetails`实现`org.sfw.security.core.userdetails.User`，可以直接使用或扩展。User类定义如下：
- en: '[PRE210]'
  id: totrans-2195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Note
  id: totrans-2196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Managing users (create, update, and so on) can be a shared responsibility for
    Spring Security. It is usually mainly performed by the application though.
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: 管理用户（创建、更新等）可以是Spring Security的共同责任。尽管通常主要由应用程序执行。
- en: 'Guiding us towards a structure for `UserDetails`, Spring Security also provides
    a `UserDetailsManager` interface for managing users:'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: 引导我们朝着`UserDetails`的结构，Spring Security还提供了一个用于管理用户的`UserDetailsManager`接口：
- en: '[PRE211]'
  id: totrans-2199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Spring Security has two native implementations for non-persistent (`InMemoryUserDetailsManager`)
    and JDBC-based (`JdbcUserDetailsManager`) user-managements.
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security有两个原生实现，用于非持久化（`InMemoryUserDetailsManager`）和基于JDBC的（`JdbcUserDetailsManager`）用户管理。
- en: When deciding not to use a built-in authentication-provider, it is a good practice
    to implement the presented interfaces, especially for guaranteeing backward compatibility
    on the coming versions of Spring Security.
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: 当决定不使用内置的身份验证提供程序时，实现所提供的接口是一个很好的做法，特别是为了保证在Spring Security的未来版本中向后兼容。
- en: The GrantedAuthority interface
  id: totrans-2202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GrantedAuthority接口
- en: Within Spring Security, `GrantedAuthorities` reflects the application-wide permissions
    granted to a `Principal`. Spring Security guides us towards a role-based authentication.
    This kind of authentication imposes the creation of groups of users able to perform
    operations.
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security中，`GrantedAuthorities`反映了授予`Principal`的应用程序范围的权限。Spring Security引导我们朝着基于角色的身份验证。这种身份验证要求创建能够执行操作的用户组。
- en: Note
  id: totrans-2204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unless there is a strong business meaning for a feature, do prefer for example
    `ROLE_ADMIN` or `ROLE_GUEST` to `ROLE_DASHBOARD` or `ROLE_PAYMENT`…
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: 除非某个功能有强烈的业务意义，最好使用例如`ROLE_ADMIN`或`ROLE_GUEST`而不是`ROLE_DASHBOARD`或`ROLE_PAYMENT`…
- en: Roles can be pulled out of the `Authentication` object from `getAuthorities()`,
    as an array of `GrantedAuthority` implementations.
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: 角色可以从`Authentication`对象的`getAuthorities()`中提取，作为`GrantedAuthority`实现的数组。
- en: 'The `GrantedAuthority` interface is quite simple:'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: '`GrantedAuthority`接口非常简单：'
- en: '[PRE212]'
  id: totrans-2208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: The `GrantedAuthority` implementations are wrappers carrying a textual representation
    for a role. These textual representations are potentially matched against the
    configuration attributes of secure objects (we will detail this concept in the
    *Authorizing on services and controllers* recipe).
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: '`GrantedAuthority`实现是包装器，携带角色的文本表示。这些文本表示可能与安全对象的配置属性匹配（我们将在*服务和控制器授权*中详细介绍这个概念）。'
- en: The `Role` embedded in a `GrantedAuthority`, which is accessed from the `getAuthority()`
    getter, is more important to Spring Security than the wrapper itself.
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Role`嵌入在`GrantedAuthority`中，可以通过`getAuthority()` getter访问，对于Spring Security来说，这比包装器本身更重要。'
- en: 'We have created our own implementation: the `Authority` that entity that has
    an association to `User`. The framework also provides the `SimpleGrantedAuthority`
    implementation.'
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了自己的实现：`Authority`实体与`User`有关联。框架还提供了`SimpleGrantedAuthority`的实现。
- en: In the last recipe, we will talk about the Spring Security authorization process.
    We will see that Spring Security provides an `AccessDecisionManager` interface
    and several `AccessDecisionManager` implementations. These implementations are
    based on voting and use `AccessDecisionVoter` implementations. The most commonly
    used of these implementations is the `RoleVoter` class.
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个配方中，我们将讨论Spring Security的授权过程。我们将看到Spring Security提供了`AccessDecisionManager`接口和几个`AccessDecisionManager`实现。这些实现是基于投票的，并使用`AccessDecisionVoter`实现。其中最常用的是`RoleVoter`类。
- en: Note
  id: totrans-2213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `RoleVoter` implementation votes positively for the user authorization when
    a configuration attribute (the textual representation of an Authority) starts
    with a predefined prefix. By default, this prefix is set to `ROLE_`.
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoleVoter`实现在配置属性（Authority的文本表示）以预定义前缀开头时，对用户授权进行积极投票。默认情况下，此前缀设置为`ROLE_`。'
- en: There is more…
  id: totrans-2215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The Spring Security authentication and authorization process will be covered
    in depth in the Authorizing on services and controllers recipe. This section introduces
    more details from the Spring Security reference document.
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security的身份验证和授权过程将在服务和控制器授权的深度覆盖中进行。本节介绍了Spring Security参考文档中更多的细节。
- en: Spring Security reference
  id: totrans-2217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Security参考
- en: The Spring Securitysecurity reference is an amazing source of theoretical and
    practical information.
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security安全参考是理论和实践信息的绝佳来源。
- en: Technical overview
  id: totrans-2219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 技术概述
- en: 'The technical overview is a great introduction to the Spring Security Framework:'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 技术概述是Spring Security框架的一个很好的介绍：
- en: '[http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html](http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html)'
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html](http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html)'
- en: Sample applications
  id: totrans-2222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例应用程序
- en: 'The Spring Security reference provides many Spring Security examples on different
    authentications types (*LDAP*, *OPENID*, *JAAS*, and so on.). Other role-based
    examples can also be found at:'
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security参考提供了许多不同身份验证类型（*LDAP*、*OPENID*、*JAAS*等）的Spring Security示例。其他基于角色的示例也可以在以下找到：
- en: '[http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/sample-apps.html](http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/sample-apps.html)'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/sample-apps.html](http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/sample-apps.html)'
- en: Core services
  id: totrans-2225
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 核心服务
- en: 'Find out more about the built-in `UserDetailsService` implementations (in-memory
    or JDBC) at:'
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于内置的`UserDetailsService`实现（内存或JDBC）的信息：
- en: '[http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/core-services.html](http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/core-services.html)'
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/core-services.html](http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/core-services.html)'
- en: Authenticating over a BASIC scheme
  id: totrans-2228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过BASIC方案进行身份验证
- en: Authenticating through a BASIC scheme is a popular solution for stateless applications
    like ours. Credentials are sent over with HTTP requests.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 通过BASIC方案进行身份验证是我们这种无状态应用程序的一种流行解决方案。凭据随着HTTP请求发送。
- en: Getting ready
  id: totrans-2230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we complete the Spring Security configuration. We make it support
    the BASIC authentication scheme required for the application.
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们完成了Spring Security配置。我们使其支持应用程序所需的BASIC身份验证方案。
- en: We slightly customize the generated response-headers, so they don't trigger
    the browser to show-up a native BASIC authentication form (which is not an optimal
    experience for our users).
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍微定制了生成的响应头，这样它们就不会触发浏览器显示原生的BASIC认证表单（这对我们的用户来说不是最佳体验）。
- en: How to do it...
  id: totrans-2233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In order to use the Spring security namespace, we add the following filter
    to the `cloudstreetmarket-api web.xml`:'
  id: totrans-2234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用Spring安全命名空间，我们将以下过滤器添加到`cloudstreetmarket-api web.xml`中：
- en: '[PRE213]'
  id: totrans-2235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'A Spring configuration file has been created specifically for Spring Security
    in the `cloudstreetmarket-api` module. This file hosts the following bean definitions:'
  id: totrans-2236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个Spring配置文件已经专门为`cloudstreetmarket-api`模块的Spring Security创建。这个文件包含以下bean定义：
- en: '[PRE214]'
  id: totrans-2237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'This new configuration refers to the `CustomBasicAuthenticationEntryPoint`
    class. This class has the following content:'
  id: totrans-2238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个新的配置是指`CustomBasicAuthenticationEntryPoint`类。这个类有以下内容：
- en: '[PRE215]'
  id: totrans-2239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'A new `@ExceptionHandler` has been added to catch authentication Exceptions:'
  id: totrans-2240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已添加新的`@ExceptionHandler`来捕获认证异常：
- en: '[PRE216]'
  id: totrans-2241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Note
  id: totrans-2242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: That's pretty much it! We have made our backend support a BASIC authentication.
    However, we haven't restricted our services (as secure objects) yet. We will do
    that now.
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样了！我们已经让我们的后端支持了BASIC认证。但是，我们还没有限制我们的服务（作为安全对象）。我们现在将这样做。
- en: 'For the example purpose, please do update the `IMarketService` interface in
    `cloudstreetmarket-core`. Add the `@Secured("ROLE_BASIC")` annotation to the `Type`
    as follows:'
  id: totrans-2244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于示例目的，请更新`cloudstreetmarket-core`中的`IMarketService`接口。将`@Secured("ROLE_BASIC")`注解添加到`Type`中，如下所示：
- en: '[PRE217]'
  id: totrans-2245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: Now restart the Tomcat server (doing this will drop your previous user creation).
  id: totrans-2246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在重新启动Tomcat服务器（这样做将删除您之前创建的用户）。
- en: In your favorite web browser, open the developer-tab and observe the AJAX queries
    when you refresh the home page. You should notice that two AJAX queries have returned
    a `403` status code (`FORBIDDEN`).![How to do it...](img/image00864.jpeg)
  id: totrans-2247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的Web浏览器中，打开开发者选项卡，并在刷新主页时观察AJAX查询。您应该注意到有两个AJAX查询返回了`403`状态码（`禁止`）。![如何做...](img/image00864.jpeg)
- en: 'These queries have also returned the JSON response:'
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: 这些查询也返回了JSON响应：
- en: '[PRE218]'
  id: totrans-2249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Now, using the login feature/popup, do log in with one of the previously created
    users that have a `BASIC` role:'
  id: totrans-2250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用登录功能/弹出窗口，请使用之前创建的具有`BASIC`角色的用户之一登录：
- en: '[PRE219]'
  id: totrans-2251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Refresh the page and observe the same two AJAX queries. Amongst the request
    headers, you can see that our frontend has sent a special **Authorization** header:![How
    to do it...](img/image00865.jpeg)
  id: totrans-2252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面并观察相同的两个AJAX查询。在请求头中，您可以看到我们的前端发送了一个特殊的**Authorization**头：![如何做...](img/image00865.jpeg)
- en: 'This Authorization header carries the value: `Basic dXNlckM6MTIzNDU2`. The
    encoded `dXNlckM6MTIzNDU2` is the base64-encoded value for `userC:123456`.'
  id: totrans-2253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个授权头携带的值是：`Basic dXNlckM6MTIzNDU2`。编码后的`dXNlckM6MTIzNDU2`是`userC:123456`的base64编码值。
- en: Let's have a look at the response to these queries:![How to do it...](img/image00866.jpeg)
  id: totrans-2254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看对这些查询的响应：![如何做...](img/image00866.jpeg)
- en: 'The status is now `200 (OK)` and you should also have received the right JSON
    result:'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 状态现在是`200 (OK)`，您还应该收到正确的JSON结果：
- en: '![How to do it...](img/image00867.jpeg)'
  id: totrans-2256
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00867.jpeg)'
- en: 'The Server sent back a `WWW-Authenticate` header in the response to the value:
    **CSM_Basic realm"="cloudstreetmarket.com"**'
  id: totrans-2257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器在响应中发送了一个`WWW-Authenticate`头，其值为：**CSM_Basic realm"="cloudstreetmarket.com"**
- en: Finally, do revert the change you made in `IMarketService` (in the 5th step).
  id: totrans-2258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，撤销您在`IMarketService`（第5步）中所做的更改。
- en: How it works...
  id: totrans-2259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are going to explore the concepts behind a BASIC authentication with Spring
    Security:'
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨使用Spring Security进行BASIC认证背后的概念：
- en: The Spring Security namespace
  id: totrans-2261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Security命名空间
- en: As always, a Spring configuration namespace brings a specific syntax that suits
    the needs and uses for a module. It lightens the overall Spring configuration
    with a better readability. Namespaces often come with configuration by default
    or auto configuration tools.
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，Spring配置命名空间带来了一个特定的语法，适合模块的需求和用法。它通过更好的可读性减轻了整体的Spring配置。命名空间通常带有默认配置或自动配置工具。
- en: 'The Spring Security namespace comes with the spring-security-config dependency
    and can be defined as follows in a Spring configuration file:'
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security命名空间带有spring-security-config依赖项，并可以在Spring配置文件中定义如下：
- en: '[PRE220]'
  id: totrans-2264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'The namespace stages three top-level components: `<http>` (about web and HTTP
    security), `<authentication-manager>,` and `<global-method-security>` (service
    or controller restriction).'
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间分为三个顶级组件：`<http>`（关于Web和HTTP安全），`<authentication-manager>`和`<global-method-security>`（服务或控制器限制）。
- en: 'Then, other concepts are referenced by those top-level components as attribute
    or as child element: `<authentication-provider>`, `<access-decision-manager>`
    (provides access decisions for web and security methods), and `<user-service>`
    (as `UserDetailsService` implementations).'
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，其他概念被这些顶级组件引用为属性或子元素：`<authentication-provider>`，`<access-decision-manager>`（为Web和安全方法提供访问决策），和`<user-service>`（作为`UserDetailsService`实现）。
- en: The <http> component
  id: totrans-2267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`<http>`组件'
- en: 'The `<http>` component of the namespace provides an `auto-config` attribute
    that we didn''t use here. The `<http auto-config"="true">` definition would have
    been a shortcut for the following definition:'
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间的`<http>`组件提供了一个我们没有在这里使用的`auto-config`属性。`<http auto-config"="true">`的定义将是以下定义的快捷方式：
- en: '[PRE221]'
  id: totrans-2269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: It isn't worth it for our REST API because we didn't plan to implement a server-side
    generated view for a form login. Also, the `<logout>` component would have been
    useless for us since our API doesn't manage sessions.
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的REST API来说不值得，因为我们没有计划为表单登录实现服务器端生成的视图。此外，`<logout>`组件对我们来说是无用的，因为我们的API不管理会话。
- en: Finally, the `<http-basic>` element creates underlying `BasicAuthenticationFilter`
    and `BasicAuthenticationEntryPoint` to the configuration.
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`<http-basic>`元素创建了基础的`BasicAuthenticationFilter`和`BasicAuthenticationEntryPoint`到配置中。
- en: We have made use of our own `BasicAuthenticationFilter` in order to customize
    the `WWW-Authenticate` response's header value from `Basic base64token` to `CSM_Basic
    base64token`. This because the AJAX HTTP responses (from our API) containing a
    `WWW-Authenticate` header with a value starting with a **Basic** keyword automatically
    trigger the web-browser to open a native Basic-form popup. It was not the type
    of user experience we wanted to set up.
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用我们自己的`BasicAuthenticationFilter`来自定义`WWW-Authenticate`响应头的值，从`Basic base64token`到`CSM_Basic
    base64token`。这是因为包含以**Basic**关键字开头的值的AJAX HTTP响应（来自我们的API）会自动触发Web浏览器打开本机的基本表单弹出窗口。这不是我们想要建立的用户体验类型。
- en: The Spring Security filter-chain
  id: totrans-2273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring Security过滤器链
- en: 'In the very first step of the recipe, we have declared a filter named `springSecurityFilterChain`
    in `web.xml`:'
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱的第一步中，我们在`web.xml`中声明了一个名为`springSecurityFilterChain`的过滤器：
- en: '[PRE222]'
  id: totrans-2275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Here, `springSecurityFilterChain` is also a Spring bean that is created internally
    by the Spring Security namespace (specifically the `http` component). A `DelegatingFilterProxy`
    is a Spring infrastructure that looks for a specific bean in the application context
    and invokes it. The targeted bean has to implement the `Filter` interface.
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`springSecurityFilterChain`也是一个Spring bean，它是由Spring Security命名空间（特别是`http`组件）在内部创建的。`DelegatingFilterProxy`是Spring的基础设施，它在应用程序上下文中寻找特定的bean并调用它。目标bean必须实现`Filter`接口。
- en: The whole Spring Security machinery is hooked-up in this way through finally
    one single bean.
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 整个Spring Security机制是通过一个单一的bean连接起来的。
- en: The configuration of the `<http>` element plays a central-role in the definition
    of what the filter-chain is made of. It is directly the elements it defines, that
    create the related filters.
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: '`<http>`元素的配置在定义过滤器链的制定中起着核心作用。它直接定义的元素创建了相关的过滤器。'
- en: '|   | *"Some core filters are always created in a filter chain and others will
    be added to the stack depending on the attributes and child elements which are
    present."* |   |'
  id: totrans-2279
  prefs: []
  type: TYPE_TB
  zh: '|   | *"一些核心过滤器总是在过滤器链中创建，其他的将根据存在的属性和子元素添加到堆栈中。"* |   |'
- en: '|   | --*Spring Security* |'
  id: totrans-2280
  prefs: []
  type: TYPE_TB
  zh:   | --*Spring Security* |
- en: It is important to distinguish between the configuration-dependant filters and
    the core filters that cannot be removed. As core filters, we can count `SecurityContextPersistenceFilter`,
    `ExceptionTranslationFilter,` and `FilterSecurityInterceptor`. These three filters
    are natively bound to the `<http>` element and can be found in the next table.
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要区分配置相关的过滤器和不能被移除的核心过滤器。作为核心过滤器，我们可以计算`SecurityContextPersistenceFilter`、`ExceptionTranslationFilter`和`FilterSecurityInterceptor`。这三个过滤器是与`<http>`元素本地绑定的，并且可以在下一个表中找到。
- en: This table comes from the Spring Security reference document and it contains
    all the core filters (coming with the framework) that can be activated using specific
    elements or attributes. They are listed here in the order of their position in
    the chain.
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表来自Spring Security参考文档，它包含了所有核心过滤器（随框架提供）的内容，可以使用特定的元素或属性激活。它们按照它们在链中的位置顺序列在这里。
- en: '| Alias | Filter Class | Namespace Element or Attribute |'
  id: totrans-2283
  prefs: []
  type: TYPE_TB
  zh: 别名 | 过滤器类 | 命名空间元素或属性 |
- en: '| --- | --- | --- |'
  id: totrans-2284
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- |'
- en: '| `CHANNEL_FILTER` | ChannelProcessingFilter | http/intercept-url@requires-channel
    |'
  id: totrans-2285
  prefs: []
  type: TYPE_TB
  zh: '`CHANNEL_FILTER` | ChannelProcessingFilter | http/intercept-url@requires-channel
    |'
- en: '| `SECURITY_CONTEXT_FILTER` | SecurityContextPersistenceFilter | http |'
  id: totrans-2286
  prefs: []
  type: TYPE_TB
  zh: '`SECURITY_CONTEXT_FILTER` | SecurityContextPersistenceFilter | http |'
- en: '| `CONCURRENT_SESSION_FILTER` | ConcurrentSessionFilter | session-management/concurrency-control
    |'
  id: totrans-2287
  prefs: []
  type: TYPE_TB
  zh: '`CONCURRENT_SESSION_FILTER` | ConcurrentSessionFilter | session-management/concurrency-control
    |'
- en: '| `HEADERS_FILTER` | HeaderWriterFilter | http/headers |'
  id: totrans-2288
  prefs: []
  type: TYPE_TB
  zh: '`HEADERS_FILTER` | HeaderWriterFilter | http/headers |'
- en: '| `CSRF_FILTER` | CsrfFilter | http/csrf |'
  id: totrans-2289
  prefs: []
  type: TYPE_TB
  zh: '`CSRF_FILTER` | CsrfFilter | http/csrf |'
- en: '| `LOGOUT_FILTER` | LogoutFilter | http/logout |'
  id: totrans-2290
  prefs: []
  type: TYPE_TB
  zh: '`LOGOUT_FILTER` | LogoutFilter | http/logout |'
- en: '| `X509_FILTER` | X509AuthenticationFilter | http/x509 |'
  id: totrans-2291
  prefs: []
  type: TYPE_TB
  zh: '`X509_FILTER` | X509AuthenticationFilter | http/x509 |'
- en: '| `PRE_AUTH_FILTER` | AbstractPreAuthenticatedProcessingFilter Subclasses |
    N/A |'
  id: totrans-2292
  prefs: []
  type: TYPE_TB
  zh: '`PRE_AUTH_FILTER` | AbstractPreAuthenticatedProcessingFilter Subclasses | N/A
    |'
- en: '| `CAS_FILTER` | CasAuthenticationFilter | N/A |'
  id: totrans-2293
  prefs: []
  type: TYPE_TB
  zh: '`CAS_FILTER` | CasAuthenticationFilter | N/A |'
- en: '| `FORM_LOGIN_FILTER` | UsernamePasswordAuthenticationFilter | http/form-login
    |'
  id: totrans-2294
  prefs: []
  type: TYPE_TB
  zh: '`FORM_LOGIN_FILTER` | UsernamePasswordAuthenticationFilter | http/form-login
    |'
- en: '| `BASIC_AUTH_FILTER` | BasicAuthenticationFilter | http/http-basic |'
  id: totrans-2295
  prefs: []
  type: TYPE_TB
  zh: '`BASIC_AUTH_FILTER` | BasicAuthenticationFilter | http/http-basic |'
- en: '| `SERVLET_API_SUPPORT_FILTER` | SecurityContextHolderAwareRequestFilter |
    http/@servlet-api-provision |'
  id: totrans-2296
  prefs: []
  type: TYPE_TB
  zh: '`SERVLET_API_SUPPORT_FILTER` | SecurityContextHolderAwareRequestFilter | http/@servlet-api-provision
    |'
- en: '| `JAAS_API_SUPPORT_FILTER` | JaasApiIntegrationFilter | http/@jaas-api-provision
    |'
  id: totrans-2297
  prefs: []
  type: TYPE_TB
  zh: '`JAAS_API_SUPPORT_FILTER` | JaasApiIntegrationFilter | http/@jaas-api-provision
    |'
- en: '| `REMEMBER_ME_FILTER` | RememberMeAuthenticationFilter | http/remember-me
    |'
  id: totrans-2298
  prefs: []
  type: TYPE_TB
  zh: '`REMEMBER_ME_FILTER` | RememberMeAuthenticationFilter | http/remember-me |'
- en: '| `ANONYMOUS_FILTER` | AnonymousAuthenticationFilter | http/anonymous |'
  id: totrans-2299
  prefs: []
  type: TYPE_TB
  zh: '`ANONYMOUS_FILTER` | AnonymousAuthenticationFilter | http/anonymous |'
- en: '| `SESSION_MANAGEMENT_FILTER` | SessionManagementFilter | session-management
    |'
  id: totrans-2300
  prefs: []
  type: TYPE_TB
  zh: '`SESSION_MANAGEMENT_FILTER` | SessionManagementFilter | session-management
    |'
- en: '| `EXCEPTION_TRANSLATION_FILTER` | ExceptionTranslationFilter | http |'
  id: totrans-2301
  prefs: []
  type: TYPE_TB
  zh: '`EXCEPTION_TRANSLATION_FILTER` | ExceptionTranslationFilter | http |'
- en: '| `FILTER_SECURITY_INTERCEPTOR` | FilterSecurityInterceptor | http |'
  id: totrans-2302
  prefs: []
  type: TYPE_TB
  zh: '`FILTER_SECURITY_INTERCEPTOR` | FilterSecurityInterceptor | http |'
- en: '| `SWITCH_USER_FILTER` | SwitchUserFilter | N/A |'
  id: totrans-2303
  prefs: []
  type: TYPE_TB
  zh: '`SWITCH_USER_FILTER` | SwitchUserFilter | N/A |'
- en: 'Remember that custom filters can be positioned relatively, or can replace any
    of these filters using the `custom-filter` element:'
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，自定义过滤器可以相对地定位，或者可以使用`custom-filter`元素替换这些过滤器中的任何一个：
- en: '[PRE223]'
  id: totrans-2305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Our <http> configuration
  id: totrans-2306
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 我们的<http>配置
- en: 'We have defined the following configuration for the `<http>` ''namespace''s
    component:'
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`<http>`的'命名空间'组件定义了以下配置：
- en: '[PRE224]'
  id: totrans-2308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Here, we tell Spring not to create sessions and to ignore incoming sessions
    using `create-session=="stateless"`. We have done this to pursue the stateless
    and scalable Microservices design.
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉Spring不要创建会话，并使用`create-session=="stateless"`忽略传入的会话。我们这样做是为了追求无状态和可扩展的微服务设计。
- en: We have also disabled the **Cross-Site Request Forgery** (**csrf**) support
    for now, for the same reason. This feature has been enabled by default by the
    framework since the Version 3.2.
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: 出于同样的原因，我们目前已经禁用了**跨站请求伪造**（**csrf**）支持。这个功能自3.2版本以来默认已经被框架启用。
- en: It has been necessary to define an `entry-point-ref` because we didn't implement
    any authentication strategy preconfigured by the namespace (`http-basic` or `login-form`).
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有实现命名空间预配置的任何身份验证策略（`http-basic`或`login-form`），因此需要定义一个`entry-point-ref`。
- en: We have defined a custom filter `BasicAuthenticationFilter` to be executed after
    the theoretical position of the core `BASIC_AUTH_FILTER`.
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个自定义过滤器`BasicAuthenticationFilter`，在核心`BASIC_AUTH_FILTER`的理论位置之后执行。
- en: 'We are now going to see which roles play the three references made to: `authenticationEntryPoint`,
    `authenticationManager`, and `basicAuthenticationFilter`.'
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看三个引用的角色：`authenticationEntryPoint`、`authenticationManager`和`basicAuthenticationFilter`。
- en: The AuthenticationManager interface
  id: totrans-2314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AuthenticationManager接口
- en: 'First of all, `AuthenticationManager` is a single-method interface:'
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`AuthenticationManager`是一个单方法接口：
- en: '[PRE225]'
  id: totrans-2316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'Spring Security provides one implementation: `ProviderManager`. This implementation
    allows us to plug in several `AuthenticationProviders`. The `ProviderManager`
    tries all the `AuthenticationProviders` in order, calling their `authenticate`
    method. The code is as follows:'
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了一个实现：`ProviderManager`。这个实现允许我们插入多个`AuthenticationProviders`。`ProviderManager`按顺序尝试所有`AuthenticationProviders`，调用它们的`authenticate`方法。代码如下：
- en: '[PRE226]'
  id: totrans-2318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: The `ProviderManager` stops its iteration when it finds a non-null `Authentication`
    object. Alternatively, it fails the `Authentication` when an `AuthenticationException`
    is thrown.
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProviderManager`在找到非空的`Authentication`对象时停止迭代。或者，在抛出`AuthenticationException`时，它会失败`Authentication`。'
- en: 'Using the namespace, a specific `AuthenticationProviders` can be targeted using
    the `ref` element as shown here:'
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名空间，可以使用`ref`元素来针对特定的`AuthenticationProviders`，如下所示：
- en: '[PRE227]'
  id: totrans-2321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'Now, here is our configuration:'
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是我们的配置：
- en: '[PRE228]'
  id: totrans-2323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'There is no `ref` element in our configuration. The namespace will by default
    instantiate a `DaoAuthenticationProvider`. It will also inject our `UserDetailsService`
    implementation: `communityServiceImpl`, because we have specified it with `user-service-ref`.'
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配置中没有`ref`元素。命名空间将默认实例化一个`DaoAuthenticationProvider`。它还将注入我们的`UserDetailsService`实现：`communityServiceImpl`，因为我们已经用`user-service-ref`指定了它。
- en: This `DaoAuthenticationProvider` throws an `AuthenticationException` when the
    password submitted in a `UsernamePasswordAuthenticationToken` doesn't match the
    one which is loaded by `UserDetailsService` (making use of the `loadUserByUsername`
    method).
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
  zh: 当`DaoAuthenticationProvider`中`UserDetailsService`加载的密码与`UsernamePasswordAuthenticationToken`中提交的密码不匹配时，会抛出`AuthenticationException`。
- en: It exists a few other `AuthenticationProviders` that could be used in our projects,
    for example,, `RememberMeAuthenticationProvider`, `LdapAuthenticationProvider`,
    `CasAuthenticationProvider`, or `JaasAuthenticationProvider`.
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中还有一些其他`AuthenticationProviders`可以使用，例如`RememberMeAuthenticationProvider`、`LdapAuthenticationProvider`、`CasAuthenticationProvider`或`JaasAuthenticationProvider`。
- en: Basic authentication
  id: totrans-2327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本认证
- en: As we have said using a BASIC scheme is a great technique for REST applications.
    However when using it, it is critical to use an encrypted communication protocol
    (HTTPS) as the passwords are sent in plain text.
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，使用BASIC方案是REST应用程序的一个很好的技术。但是，在使用它时，使用加密通信协议（HTTPS）是至关重要的，因为密码是以明文形式发送的。
- en: As demonstrated in the *How to do it* section, the principle is very simple.
    The HTTP requests are the same as usual with an extra header `Authentication`.
    This header has the value made of the keyword `Basic` followed by a space, followed
    by a String encoded in base 64.
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做*部分演示的，原则非常简单。HTTP请求与通常相同，只是多了一个`Authentication`头。这个头的值由关键词`Basic`后跟一个空格，再跟一个base
    64编码的字符串组成。
- en: 'We can find online a bunch of free services to quickly encode/decode in base
    64 a String. The String to be encoded in base 64 has to be in the following form:
    `<username>:<password>`.'
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在线找到一堆免费的服务，快速对一个字符串进行base 64编码/解码。要进行base 64编码的字符串必须是以下形式：`<username>:<password>`。
- en: BasicAuthenticationFilter
  id: totrans-2331
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: BasicAuthenticationFilter
- en: To implement our Basic authentication, we have added `BasicAuthenticationFilter`
    to our filter chain. This `BasicAuthenticationFilter` (`org.sfw.security.web.authentication.www.BasicAuthenticationFilter`)
    requires an `authenticationManager` and optionally an `authenticationEntryPoint`.
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的基本认证，我们已经将`BasicAuthenticationFilter`添加到了我们的过滤器链中。这个`BasicAuthenticationFilter`（`org.sfw.security.web.authentication.www.BasicAuthenticationFilter`）需要一个`authenticationManager`，并且可以选择一个`authenticationEntryPoint`。
- en: The optional configuration of an `authenticationEntryPoint` drives the filter
    towards two different behaviours presented next.
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`authenticationEntryPoint`配置驱动过滤器朝着下面介绍的两种不同行为。
- en: 'Both starts the same way: the filter is triggered from its position in the
    chain. It looks for the authentication header in the request and delegates to
    the `authenticationManager`, which then relies on the `UserDetailsService` implementation
    to compare it with the user credentials from the database.'
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都是从相同的方式开始：过滤器从链中的位置触发。它在请求中查找认证头，并委托给`authenticationManager`，后者依赖于`UserDetailsService`实现来与数据库中的用户凭据进行比较。
- en: With an authenticationEntryPoint
  id: totrans-2335
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用authenticationEntryPoint
- en: 'This is our configuration, which behaves in the following way:'
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的配置，它的行为如下：
- en: When the authentication succeeds, the filter-chain stops, and an `Authentication`
    object is returned.
  id: totrans-2337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当认证成功时，过滤器链停止，并返回一个`Authentication`对象。
- en: When the authentication fails, the `authenticationEntryPoint` method is invoked
    in an interruption of the filter-chain. Our authentication entry-point sets a
    custom `WWW-Authenticate` response header and a `401` status-code (`FORBIDDEN`).
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当认证失败时，`authenticationEntryPoint`方法会在过滤器链中断时被调用。我们的认证入口点设置了一个自定义的`WWW-Authenticate`响应头和一个`401`状态码（`FORBIDDEN`）。
- en: This type of configuration provides a preauthentication where the `Authentication
    Header` in the HTTP Request is checked to see whether or not the business services
    require an authorization (Secure Object).
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的配置提供了一个预身份验证，其中检查HTTP请求中的`Authentication Header`，以查看业务服务是否需要授权（安全对象）。
- en: This configuration allows a quick feedback with a potential native BASIC form
    prompted by the web browser. We have chosen this configuration for now in our
    application.
  id: totrans-2340
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置允许通过Web浏览器快速反馈，可能会提示一个本地BASIC表单。我们目前选择了这种配置在我们的应用程序中。
- en: Without an authenticationEntryPoint
  id: totrans-2341
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 没有authenticationEntryPoint
- en: 'Without an authenticationEntryPoint, the filter behaves as follows:'
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: 没有authenticationEntryPoint，过滤器的行为如下：
- en: When the authentication succeeds, the filter-chain stops, and an `Authentication`
    object is returned.
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当身份验证成功时，过滤器链停止，并返回一个`Authentication`对象。
- en: When the authentication fails, the filter chain continues. After that, if another
    authentication succeeds in the chain, the user is authenticated accordingly. But,
    if no other authentication succeeds in the chain, then the user is authenticated
    with an anonymous role and this may or may not suit the services access levels.
  id: totrans-2344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当身份验证失败时，过滤器链继续。之后，如果链中的另一个身份验证成功，用户将相应地进行身份验证。但是，如果链中没有其他身份验证成功，那么用户将以匿名角色进行身份验证，这可能适合或不适合服务访问级别。
- en: There is more…
  id: totrans-2345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the Spring Security reference
  id: totrans-2346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Spring Security参考中
- en: 'This section has been largely inspired from the Spring rsecurity reference,
    which is again a great resource:'
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分在很大程度上受到了Spring rsecurity参考的启发，这又是一个很好的资源：
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle)'
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle)'
- en: 'An appendix provides a very complete guide to the Spring Security namespace:'
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: 附录提供了Spring Security命名空间的非常完整的指南：
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-namespace.html](http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-namespace.html)'
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-namespace.html](http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-namespace.html)'
- en: The remember-me cookie/feature
  id: totrans-2351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记住我cookie/功能
- en: We passed over the `RememberMeAuthenticationFilter` that provides different
    ways for the server to remember the identity of a Principal between sessions.
    The Spring Security reference provides extensive information on this topic.
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们跳过了`RememberMeAuthenticationFilter`，它提供了服务器在会话之间记住Principal身份的不同方式。Spring
    Security参考提供了关于这个主题的广泛信息。
- en: Authenticating with a third-party OAuth2 scheme
  id: totrans-2353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方OAuth2方案进行身份验证
- en: This recipe uses the Spring social project in order to use the OAuth2 protocol
    from a client perspective.
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用Spring social项目，以便从客户端的角度使用OAuth2协议。
- en: Getting ready
  id: totrans-2355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We won't create an OAuth2 **Authentication Server** (**AS**) here. We will establish
    connections to third-party Authentication servers (Yahoo!) to authenticate on
    our application. Our application will be acting as a **Service Provider** (**SP**).
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里创建一个OAuth2 **身份验证服务器** (**AS**)。我们将建立到第三方身份验证服务器（Yahoo!）的连接，以在我们的应用程序上进行身份验证。我们的应用程序将充当**服务提供商**
    (**SP**)。
- en: We will use Spring social whose first role is to manage social connections transparently
    and to provide a facade to invoke the provider APIs (Yahoo! Finance) using Java
    objects.
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Spring social，其第一个作用是透明地管理社交连接，并提供一个调用提供者API（Yahoo! Finance）的外观，使用Java对象。
- en: How to do it...
  id: totrans-2358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Two Maven dependencies have been added for Spring social:'
  id: totrans-2359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Spring social添加了两个Maven依赖项：
- en: '[PRE229]'
  id: totrans-2360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'If we want to handle an OAuth2 connection to Twitter or Facebook, we would
    have to add the following dependencies as well:'
  id: totrans-2361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要处理到Twitter或Facebook的OAuth2连接，我们还需要添加以下依赖项：
- en: '[PRE230]'
  id: totrans-2362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'After the BASIC authentication section, the Spring Security configuration file
    hasn''t changed much. A few interceptors can be noticed in the `http` bean:'
  id: totrans-2363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在BASIC身份验证部分之后，Spring Security配置文件并没有太多改变。在`http` bean中可以注意到一些拦截器：
- en: '[PRE231]'
  id: totrans-2364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'With the following `SocialUserConnectionRepositoryImpl`, we have created our
    own implementation of `org.sfw.social.connect.ConnectionRepository`, which is
    a `Spring Social` c`ore` interface with methods to manage the social-users connections.
    The code is as follows:'
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下`SocialUserConnectionRepositoryImpl`，我们已经创建了自己的`org.sfw.social.connect.ConnectionRepository`的实现，这是一个`Spring
    Social`的`core`接口，具有管理社交用户连接的方法。代码如下：
- en: '[PRE232]'
  id: totrans-2366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Note
  id: totrans-2367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In reality, this custom implementation extends and adapts the work from [https://github.com/mschipperheyn/spring-social-jpa](https://github.com/mschipperheyn/spring-social-jpa)
    published under a GNU GPL license.
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个自定义实现扩展并调整了[https://github.com/mschipperheyn/spring-social-jpa](https://github.com/mschipperheyn/spring-social-jpa)的工作，该工作是在GNU
    GPL许可下发布的。
- en: 'As you can see, `SocialUserConnectionRepositoryImpl` makes use of a custom
    Spring Data JPA `SocialUserRepository` interface whose definition is as follows:'
  id: totrans-2369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，`SocialUserConnectionRepositoryImpl` 使用了一个自定义的Spring Data JPA `SocialUserRepository`
    接口，其定义如下：
- en: '[PRE233]'
  id: totrans-2370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'This Spring Data JPA repository supports a `SocialUser` entity (social connections)
    that we have created. This Entity is the direct model of the `UserConnection`
    SQL table that `JdbcUsersConnectionRepository` would expect to find if we would
    use this implementation rather than ours. The `SocialUser` definition is the following
    code:'
  id: totrans-2371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个Spring Data JPA存储库支持我们创建的`SocialUser`实体（社交连接）。这个实体是`JdbcUsersConnectionRepository`期望找到的`UserConnection`
    SQL表的直接模型，如果我们使用这个实现而不是我们自己的实现。`SocialUser`的定义如下代码：
- en: '[PRE234]'
  id: totrans-2372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'The `SocialUserConnectionRepositoryImpl` is instantiated in a higher-level
    service layer: `SocialUserServiceImpl`, which is an implementation of the Spring
    `UsersConnectionRepository` interface. This implementation is created as follows:'
  id: totrans-2373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SocialUserConnectionRepositoryImpl` 在更高级别的服务层中实例化：`SocialUserServiceImpl`，这是Spring
    `UsersConnectionRepository`接口的实现。该实现如下创建：'
- en: '[PRE235]'
  id: totrans-2374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'This higher level `SocialUserServiceImpl` is registered in the `cloudstreetmarket-api`
    Spring configuration file (`dispatcher-context.xml`) as a factory-bean that has
    the capability to produce `SocialUserConnectionRepositoryImpl` under a request-scope
    (for a specific social-user profile). The code is as follows:'
  id: totrans-2375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个更高级别的`SocialUserServiceImpl`在`cloudstreetmarket-api` Spring配置文件（`dispatcher-context.xml`）中注册为一个工厂bean，具有在请求范围内（对于特定的社交用户配置文件）生成`SocialUserConnectionRepositoryImpl`的能力。代码如下：
- en: '[PRE236]'
  id: totrans-2376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Three other beans are defined in this `dispatcher-context.xml` file:'
  id: totrans-2377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dispatcher-context.xml`文件中定义了另外三个bean：
- en: '[PRE237]'
  id: totrans-2378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'The The `SignInAdapterImpl` signs in a user in our application after the OAuth2
    authentication. It performs what we want it to perform at this step from the application
    business point of view. The code is as follows:'
  id: totrans-2379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SignInAdapterImpl`在我们的应用程序中对OAuth2认证后登录用户。从应用程序业务角度来看，它执行我们希望在这一步执行的操作。代码如下：'
- en: '[PRE238]'
  id: totrans-2380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'The `connectionFactoryLocator` can also refer to more than one connection factories.
    In our case, we have only one: `YahooOAuth2ConnectionFactory`. These classes are
    the entry points of social providers APIs (written for Java). We can normally
    find them on the web (from official sources or not) for the OAuth protocol we
    target (OAuth1, OAuth1.0a, and OAuth2).'
  id: totrans-2381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`connectionFactoryLocator`也可以引用多个连接工厂。在我们的情况下，我们只有一个：`YahooOAuth2ConnectionFactory`。这些类是社交提供商API的入口点（为Java编写）。我们通常可以在网络上找到它们（来自官方来源或其他来源），以满足我们的OAuth协议目标（OAuth1、OAuth1.0a和OAuth2）。'
- en: Note
  id: totrans-2382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are few existing OAuth2 adaptors right now for Yahoo! We've had to do
    it ourselves. That's why these classes are available as sources and not as jar
    dependencies (in the Zipcloud project).
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: 目前对于Yahoo!来说，现有的OAuth2适配器很少。我们不得不自己做。这就是为什么这些类作为源代码而不是作为jar依赖项（在Zipcloud项目中）可用的原因。
- en: 'When it comes to controllers'' declarations, the `dispatcher-context.xml` configures
    a `ProviderSignInController`, which is completely abstracted in `Spring Social
    Core`. However, to register a OAuth2 user in our application (the first time the
    user visits the site), we have created a custom `SignUpController`:'
  id: totrans-2384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器声明方面，`dispatcher-context.xml`配置了一个`ProviderSignInController`，它在`Spring Social
    Core`中完全抽象。然而，为了在我们的应用程序中注册OAuth2用户（用户第一次访问网站时），我们创建了一个自定义的`SignUpController`：
- en: '[PRE239]'
  id: totrans-2385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: It's time to try it now. To proceed, we suggest you to create a Yahoo! account.
    We are not actually sponsored by Yahoo! It is only for the strategy of our great
    Zipcloud company which is oriented on financial services. It is not only for Marissa
    Mayer's blue eyes! ([https://login.yahoo.com](https://login.yahoo.com)).
  id: totrans-2386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候试一试了。为了继续，我们建议您创建一个Yahoo!账户。我们实际上并不是雅虎的赞助商。这只是为了我们伟大的Zipcloud公司的战略，该公司以金融服务为导向。这不仅仅是为了玛丽莎·梅耶尔的蓝眼睛！（[https://login.yahoo.com](https://login.yahoo.com)）。
- en: Start your Tomcat server and click on the login button (at the far right of
    the main menu). Then hit the **Sign-in with Yahoo!** button
  id: totrans-2387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Tomcat服务器，然后单击主菜单最右侧的登录按钮。然后点击**使用Yahoo!登录**按钮
- en: You should be redirected to the Yahoo! servers in order for you to authenticate
    on their side (if you are not logged-in already):![How to do it...](img/image00868.jpeg)
  id: totrans-2388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该被重定向到Yahoo!服务器，以便您在他们的一侧进行身份验证（如果您尚未登录）：![如何做...](img/image00868.jpeg)
- en: Once logged-in, agree that Cloudstreet Market will be able to access your profile
    and your contacts. We won't make use of contacts; however, we have the Java adaptors
    to access them. If it's too scary, just create an empty new Yahoo! account:![How
    to do it...](img/image00869.jpeg)
  id: totrans-2389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，同意Cloudstreet Market将能够访问您的个人资料和联系人。我们不会使用联系人；但是，我们有Java适配器来访问它们。如果这太可怕了，只需创建一个空的新Yahoo!账户：![如何做...](img/image00869.jpeg)
- en: Click on the **Agree** button.
  id: totrans-2390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**同意**按钮。
- en: Yahoo! should now redirect to the local `cloudstreetmarket.com` server and specifically
    to the `/api/signin/yahoo` handler with an authorization code as URL parameter.
  id: totrans-2391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Yahoo!现在应该重定向到本地的`cloudstreetmarket.com`服务器，特别是到`/api/signin/yahoo`处理程序，并带有授权码作为URL参数。
- en: The application detects when in the `Cloudstreet Market` database there isn't
    any `User` registered for the `SocialUser`. This triggers the following popup
    and it should come back to the user until the account actually gets created:![How
    to do it...](img/image00870.jpeg)
  id: totrans-2392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序检测到`Cloudstreet Market`数据库中没有为`SocialUser`注册的`User`。这将触发以下弹出窗口，并应该一直返回给用户，直到账户实际上被创建：![如何做...](img/image00870.jpeg)
- en: 'Fill the form with the following data:'
  id: totrans-2393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下数据填写表格：
- en: '[PRE240]'
  id: totrans-2394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Also, click on the user icon in order to upload a profile picture (if you wish).
    While doing so, make sure the property `pictures.user.path` in `cloudstreetmarket-api/src/main/resources/application.properties`
    is pointing to a created path on the filesystem.
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，单击用户图标以上传个人资料图片（如果需要）。在这样做时，请确保`cloudstreetmarket-api/src/main/resources/application.properties`中的`pictures.user.path`属性指向文件系统上创建的路径。
- en: Once this step is done, the new public activity **Marcus registers a new account**
    should appear on the welcome page.
  id: totrans-2396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此步骤后，欢迎页面上应该出现新的公共活动**Marcus注册了一个新账户**。
- en: Also, bound to each REST response from the API, the extra-headers **Authenticated**
    and **WWW-Authenticate** must be present. This is proof that we are authenticated
    with OAuth2 capability in the application.![How to do it...](img/image00871.jpeg)
  id: totrans-2397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，与API的每个REST响应绑定，额外的头部**Authenticated**和**WWW-Authenticate**必须存在。这证明我们在应用程序中具有OAuth2功能的身份验证。![如何做...](img/image00871.jpeg)
- en: How it works...
  id: totrans-2398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We perform in this recipe a social integration within our application. An OAuth2
    authentication involves a service provider (cloudstreetmarket.com) and an identity
    provider (Yahoo!).
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们在我们的应用程序中进行了社交集成。OAuth2认证涉及服务提供商（cloudstreetmarket.com）和身份提供商（Yahoo!）。
- en: This can only happen if a user owns (or is ready to own) an account on both
    parties. It is a very popular authentication protocol nowadays. As most of Internet
    users have at least one account in one of the main Social SaaS providers (Facebook,
    Twitter, LinkedIn, Yahoo!, and so on), this technique dramatically drops the registration
    time and login time spent on web service providers.
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当用户拥有（或准备拥有）双方账户时才能发生这种情况。这是一种非常流行的身份验证协议。由于大多数互联网用户至少在主要的社交SaaS提供商（Facebook、Twitter、LinkedIn、Yahoo!等）中拥有一个账户，这种技术大大减少了在网络服务提供商上花费的注册时间和登录时间。
- en: From the application point of view
  id: totrans-2401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从应用程序的角度来看
- en: When the sign in with Yahoo! button is clicked by the user, a HTTP POST request
    is made to one of our API handler `/api/signin/yahoo`. This handler corresponds
    to `ProviderSignInController`, which is abstracted by `Spring Social`.
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“使用Yahoo!登录”按钮时，将向我们的API处理程序`/api/signin/yahoo`发出HTTP POST请求。这个处理程序对应于`ProviderSignInController`，由`Spring
    Social`抽象。
- en: This handler redirects the user to the Yahoo! servers where he can authenticate
    and give the right for the application to use his social identity and access some
    of his Yahoo! data.
  id: totrans-2403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个处理程序将用户重定向到Yahoo!服务器，用户可以在那里进行身份验证，并授权应用程序使用他的社交身份和访问他的一些Yahoo!数据。
- en: Yahoo! sends an authorization-code to the application as a parameter of the
    redirection to the callback URL it performs.
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo!将授权码作为重定向到回调URL的参数发送给应用程序。
- en: The application processes the callback with the authorization code as parameter.
    This callback targets a different method-handler in the abstracted `ProviderSignInController`.
    This handler completes the connection recalling Yahoo! in order to exchange the
    authorization code against a **refresh token** and an **access token**. This operation
    is done transparently in the `Spring Social` background.
  id: totrans-2405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序使用授权码作为参数处理回调。此回调针对抽象的`ProviderSignInController`中的不同方法处理程序。这个处理程序完成连接，回调Yahoo!以交换授权码和**刷新令牌**和**访问令牌**。这个操作在`Spring
    Social`后台透明地完成。
- en: 'The same handler looks-up in database for an existing persisted social connection
    for that user:'
  id: totrans-2406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的处理程序在数据库中查找该用户的现有持久化社交连接：
- en: If one connection is found, the user is authenticated with it in `Spring Security`
    and redirected to the home page of the portal with the Yahoo! user-ID as request
    parameter (parameter named `spi`).
  id: totrans-2407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找到一个连接，用户将在`Spring Security`中进行身份验证，并被重定向到门户的首页，Yahoo!用户ID作为请求参数（参数名为`spi`）。
- en: If no connection is found, the user is redirected to the `SignupController`
    where his connection is created and persisted. He is then authenticated in Spring
    Security and redirected to the portal's home page with the Yahoo! user ID as request
    parameter (named `spi`).
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找不到连接，用户将被重定向到`SignupController`，在那里创建和持久化他的连接。然后在Spring Security中进行身份验证，并被重定向到门户的首页，Yahoo!用户ID作为请求参数（名为`spi`）。
- en: When the portal home page is loaded, the Yahoo! user ID request parameter is
    detected and this identifier is stored in the HTML5 `sessionStorage` (we have
    done all this).
  id: totrans-2409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当加载门户首页时，检测到Yahoo!用户ID请求参数，并将该标识符存储在HTML5的`sessionStorage`中（我们已经完成了所有这些）。
- en: From now on, in every single AJAX request the user makes to the API, the `spi`
    identifier will be passed as a request header, until the user actually logs out
    or closes his browser.
  id: totrans-2410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现在开始，在用户向API发出的每个单独的AJAX请求中，`spi`标识符将作为请求头传递，直到用户实际注销或关闭浏览器。
- en: From the Yahoo! point of view
  id: totrans-2411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Yahoo!的角度来看
- en: 'The Yahoo! APIs provide two ways of authenticating with OAuth2\. This induces
    two different flows: the Explicit OAuth2 flow, suited for a server-side (web)
    application and the Implicit OAuth2 flow that particularly benefits to frontend
    web clients. We will focus on the implemented explicit flow here.'
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo! API提供了两种OAuth2认证方式。这导致了两种不同的流程：适用于服务器端（Web）应用程序的显式OAuth2流程，以及特别适用于前端Web客户端的隐式OAuth2流程。我们将重点介绍实现的显式流程。
- en: OAuth2 explicit grant flow
  id: totrans-2413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OAuth2显式授权流程
- en: 'Here''s a summary picture of the communication protocol between our application
    and Yahoo!. This is more or less a standard OAuth2 conversation:'
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的应用程序和Yahoo!之间通信协议的摘要图片。这更或多或少是一个标准的OAuth2对话：
- en: '![OAuth2 explicit grant flow](img/image00872.jpeg)'
  id: totrans-2415
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth2显式授权流程](img/image00872.jpeg)'
- en: 'The parameters marked with the `*` symbol are optional in the communication.
    This flow is also detailed on the OAuth2 Yahoo! guide:'
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
  zh: 在通信中带有`*`符号标记的参数是可选的。这个流程也在OAuth2 Yahoo!指南中有详细说明：
- en: '[https://developer.yahoo.com/oauth2/guide/flows_authcode](https://developer.yahoo.com/oauth2/guide/flows_authcode)'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.yahoo.com/oauth2/guide/flows_authcode](https://developer.yahoo.com/oauth2/guide/flows_authcode)'
- en: Refresh-token and access-token
  id: totrans-2418
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 刷新令牌和访问令牌
- en: 'The difference between these two tokens must be understood. An access-token
    is used to identify the user (Yahoo! user) when performing operations on the Yahoo!
    API. As an example, below is a GET request that can be performed to retrieve the
    Yahoo! profile of a user identified by the Yahoo! ID abcdef123:'
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
  zh: 必须理解这两个令牌之间的区别。访问令牌用于在Yahoo! API上执行操作时识别用户（Yahoo!用户）。例如，下面是一个可以执行的GET请求的示例，用于检索由Yahoo!
    ID abcdef123标识的用户的Yahoo!个人资料：
- en: '[PRE241]'
  id: totrans-2420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: To provide identification to this call, the **access-token** must be passed
    in as the value of the `Authorization` request header with the `Bearer` keyword.
    In general, access-tokens have a very limited life (for Yahoo!, it is an hour).
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对这个调用提供标识，**访问令牌**必须作为`Authorization`请求头的值传递，带有`Bearer`关键字。一般来说，访问令牌的生命周期非常有限（对于Yahoo!来说，它是一个小时）。
- en: A refresh-token is used to request new access-tokens. Refresh-tokens have much
    longer lives (for Yahoo!, they actually never expire, but they can be revoked).
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新令牌用于请求新的访问令牌。刷新令牌的生命周期更长（对于Yahoo!来说，它们实际上永远不会过期，但可以被撤销）。
- en: Spring social – role and key features
  id: totrans-2423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring social - 角色和关键特性
- en: The role of Spring social is to establish connections with **Software-as-a-Service**
    (**SaaS**) providers such as Facebook, Twitter, or Yahoo! Spring social is also
    responsible for invoking APIs on the application (Cloudstreet Market) server side
    on behalf of the users.
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: Spring social的作用是与Facebook、Twitter或Yahoo!等“软件即服务”（SaaS）提供商建立连接。Spring social还负责代表用户在应用程序（Cloudstreet
    Market）服务器端调用API。
- en: These two duties are both served in the spring-social-core dependency using
    the Connect Framework and the OAuth client support, respectively.
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个职责都在spring-social-core依赖中使用“连接框架”和OAuth客户端支持来实现。
- en: 'In short, Spring social is:'
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Spring social是：
- en: A `Connect Framework` handling the core authorization and connection flow with
    service providers
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个处理与服务提供商的核心授权和连接流程的“连接框架”
- en: A `Connect Controller` that handles the OAuth exchange between a service provider,
    consumer, and user in a web application environment
  id: totrans-2428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个“连接控制器”，处理Web应用环境中服务提供商、消费者和用户之间的OAuth交换
- en: A `Sign-in Controller` that allows users to authenticate in our application,
    signing in with their Saas provider account
  id: totrans-2429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个“登录控制器”，允许用户在我们的应用程序中进行身份验证，使用他们的Saas提供商账户登录
- en: Social connection persistence
  id: totrans-2430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 社交连接持久性
- en: 'The Spring social core provides classes able to persist social connections
    in database using JDBC (especially with `JdbcUsersConnectionRepository`). The
    module even embeds a SQL script for the schema definition:'
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: Spring social core提供了能够使用JDBC在数据库中持久化社交连接的类（特别是使用“JdbcUsersConnectionRepository”）。该模块甚至嵌入了用于模式定义的SQL脚本：
- en: '[PRE242]'
  id: totrans-2432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: When an application (like ours) uses JPA, an Entity can be created to represent
    this table in the persistence context. We have created the `SocialUser` Entity
    for this purpose in the *sixth step* of the recipe.
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序（比如我们的应用）使用JPA时，可以创建一个实体来表示持久化上下文中的表。我们在配方的第六步中为此目的创建了“SocialUser”实体。
- en: 'In this table Entity, you can see the following fields:'
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表实体中，你可以看到以下字段：
- en: '`userId`: This field matches the `@Id` (username) of the `User` when the user
    is registered. If the user is not yet registered, `userId` is the GUID (Yahoo!
    user ID, also called `spi` on the web side)'
  id: totrans-2435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “userId”：这个字段匹配用户注册时的“@Id”（用户名）。“userId”是GUID（Yahoo！用户ID，在Web端也称为“spi”），如果用户尚未注册。
- en: '`providerId`: This field is the lowercase name of the provider: Yahoo, Facebook
    or Twitter.'
  id: totrans-2436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “providerId”：这个字段是提供商的小写名称：Yahoo，Facebook或Twitter。
- en: '`providerUserId`: This field is the GUID, the unique identifier in the provider''s
    system (Yahoo! user ID or **spi**.).'
  id: totrans-2437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “providerUserId”：这个字段是提供商系统中的GUID，即唯一标识符（Yahoo！用户ID或“spi”）。
- en: '`accessToken, secret, refreshToken, and expireTime`: These are the OAuth2 tokens
    (credentials) for the connection and their related information.'
  id: totrans-2438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “accessToken，secret，refreshToken和expireTime”：这些是连接的OAuth2令牌（凭证）及其相关信息。
- en: 'Two interfaces come with the framework:'
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 框架附带了两个接口：
- en: '`ConnectionRepository`: This manages the persistence of one user connection.
    Implementations are request-scoped for the identified user.'
  id: totrans-2440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ConnectionRepository”：这个管理一个用户连接的持久化。实现是为了识别用户的请求范围。
- en: '`UsersConnectionRepository`: This provides access to the global store of connections
    across all users.'
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “UsersConnectionRepository”：这提供了对所有用户的全局连接存储的访问。
- en: 'If you remember, we created our own `UsersConnectionRepository` implementation
    (`SocialUserServiceImpl`). Registered in the `dispatcher-servlet.xml` file, this
    implementation acts as a factory to produce request-scope `connectionRepository`
    implementations (`SocialUserConnectionRepositoryImpl`):'
  id: totrans-2442
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得的话，我们创建了我们自己的“UsersConnectionRepository”实现（“SocialUserServiceImpl”）。在“dispatcher-servlet.xml”文件中注册，这个实现充当一个工厂，用于生成请求范围的“connectionRepository”实现（“SocialUserConnectionRepositoryImpl”）：
- en: '[PRE243]'
  id: totrans-2443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: Those two custom implementations both use the Spring Data JPA `SocialUserRepository`
    that we have created for finding, updating, persisting, and removing connections.
  id: totrans-2444
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个自定义实现都使用了我们为查找、更新、持久化和移除连接创建的Spring Data JPA“SocialUserRepository”。
- en: In the `SocialUserServiceImpl` implementation of the `UsersConnectionRepository`
    interface, a `ConnectionFactoryLocator` property is `autowired` and a `TextEncryptor`
    property is initialized with a default `NoOpTextEncryptor` instance.
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: 在“SocialUserServiceImpl”实现“UsersConnectionRepository”接口时，一个“ConnectionFactoryLocator”属性被“autowired”，并且一个“TextEncryptor”属性被初始化为默认的“NoOpTextEncryptor”实例。
- en: Note
  id: totrans-2446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The default `TextEncryptor` instance can be replaced with a proper encryption
    for the SocialUser data maintained in the database. Take a look at the spring-security-crypto
    module:'
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的“TextEncryptor”实例可以被适当的加密替换，用于在数据库中维护的SocialUser数据。查看spring-security-crypto模块：
- en: '[http://docs.spring.io/spring-security/site/docs/3.1.x/reference/crypto.html](http://docs.spring.io/spring-security/site/docs/3.1.x/reference/crypto.html)'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/3.1.x/reference/crypto.html](http://docs.spring.io/spring-security/site/docs/3.1.x/reference/crypto.html)'
- en: Provider-specific configuration
  id: totrans-2449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特定于提供商的配置
- en: The provider-specific configuration (Facebook, Twitter, Yahoo!) starts with
    definitions of the `connectionFactoryLocator` bean.
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于提供商的配置（Facebook，Twitter，Yahoo！）从“connectionFactoryLocator” bean的定义开始。
- en: One entry-point – connectionFactoryLocator
  id: totrans-2451
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个入口点 - connectionFactoryLocator
- en: 'The `connectionFactoryLocator` bean that we have defined in the `dispatcher-servlet.xml`
    plays a central role in Spring Social. Its registration is as follows:'
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在“dispatcher-servlet.xml”中定义的“connectionFactoryLocator” bean在Spring Social中扮演着一个核心角色。它的注册如下：
- en: '[PRE244]'
  id: totrans-2453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: With this bean, Spring social implements a `ServiceLocator` pattern that allows
    us to easily plug-in/plug-out new social connectors. Most importantly, it allows
    the system to resolve at runtime a provider-specific connector (a `connectionFactory`).
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个bean，Spring social实现了一个“ServiceLocator”模式，允许我们轻松地插入/拔出新的社交连接器。最重要的是，它允许系统在运行时解析特定于提供商的连接器（一个“connectionFactory”）。
- en: 'The specified Type for our `connectionFactoryLocator` is `ConnectionFactoryRegistry`,
    which is a provided implementation of the `ConnectionFactoryLocator` interface:'
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“connectionFactoryLocator”的指定类型是“ConnectionFactoryRegistry”，这是“ConnectionFactoryLocator”接口的提供的实现：
- en: '[PRE245]'
  id: totrans-2456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'We have an example of the `connectionFactory` lookup in the `ProviderSignInController.signin`
    method:'
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`ProviderSignInController.signin`方法中有一个`connectionFactory`查找的示例：
- en: '[PRE246]'
  id: totrans-2458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Here, the `providerId` argument is a simple String (yahoo in our case).
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`providerId`参数是一个简单的字符串（在我们的例子中是yahoo）。
- en: Provider-specific ConnectionFactories
  id: totrans-2460
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 特定于提供者的ConnectionFactories
- en: The `ConnectionFactory` such as `YahooOAuth2ConnectionFactory` are registered
    in `ConnectionFactoryRegistry` with the OAuth2 consumer key and consumer secret,
    which identify (with authorization) our application on the provider's side.
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConnectionFactory`，如`YahooOAuth2ConnectionFactory`，在`ConnectionFactoryRegistry`中注册了OAuth2消费者密钥和消费者密钥，这些密钥（通过授权）在提供者端标识了我们的应用程序。'
- en: We have developed the `YahooOAuth2ConnectionFactory` class, but you should be
    able to find your `ProviderSpecificConnectionFactory` either from official `Spring
    Social` subprojects (`spring-social-facebook`, `spring-social-twitter`, and so
    on) or from open sources projects.
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开发了`YahooOAuth2ConnectionFactory`类，但您应该能够从官方的`Spring Social`子项目（`spring-social-facebook`，`spring-social-twitter`等）或开源项目中找到您的`ProviderSpecificConnectionFactory`。
- en: Signing in with provider accounts
  id: totrans-2463
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用提供者帐户登录
- en: 'In order to perform the OAuth2 authentication steps, Spring social provides
    an abstracted Spring MVC Controller: `ProviderSignInController`.'
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行OAuth2认证步骤，Spring social提供了一个抽象的Spring MVC控制器：`ProviderSignInController`。
- en: This controller performs the OAuth flows and establishes connections with the
    provider. It tries to find a previously established connection and uses the connected
    account to authenticate the user in the application.
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: 这个控制器执行OAuth流程并与提供者建立连接。它尝试找到先前建立的连接，并使用连接的帐户来验证应用程序中的用户。
- en: If no previous connection matches, the flow is sent to the created `SignUpController`
    matching the specific request mapping`/signup`. The user is not automatically
    registered as a CloudStreetMarket `User` at this point. We force the user to create
    his account manually via a `Must-Register` response header when an API call appears
    OAuth2 authenticated without a bound local user. This `Must-Register` response
    header triggers the **create an account now** popup on the client side (see in
    `home_community_activity.js`, the `loadMore` function).
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有匹配的先前连接，流程将发送到创建的`SignUpController`，匹配特定的请求映射`/signup`。此时，用户不会自动注册为CloudStreetMarket的`User`。当API调用出现OAuth2认证但没有绑定本地用户时，我们会强制用户通过`Must-Register`响应头手动创建他的帐户。这个`Must-Register`响应头会在客户端触发**立即创建帐户**弹出窗口（请参见`home_community_activity.js`中的`loadMore`函数）。
- en: It is during this registration that the connection (the `SocialUser` Entity)
    is synchronized with the created `User` Entity (see the `CommunityController.createUser`
    method).
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
  zh: 就是在这个注册过程中，连接（`SocialUser`实体）与创建的`User`实体同步（请参见`CommunityController.createUser`方法）。
- en: The `ProviderSignInController` works closely with a `SignInAdapter` implementation
    (that we had to build as well) which actually authenticates the user into CloudStreetMarket
    with Spring Security. The authentication is triggered with the call to `communityService.signInUser(user)`.
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProviderSignInController`与`SignInAdapter`实现密切配合（我们也必须构建），实际上使用Spring Security将用户验证到CloudStreetMarket。通过调用`communityService.signInUser(user)`触发验证。'
- en: 'Here are the details of the method that creates the `Authentication` object
    and stores it into the `SecurityContext`:'
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建`Authentication`对象并将其存储到`SecurityContext`的方法的详细信息：
- en: '[PRE247]'
  id: totrans-2470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'We register and initialize a Spring bean for `ProviderSigninController` with
    the following configuration:'
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下配置为`ProviderSigninController`注册和初始化Spring bean：
- en: '[PRE248]'
  id: totrans-2472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: As you can see, we have specified the `signUpUrl` request mapping to redirect
    to our custom `SignupController` when no previous connection is found in database.
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已将`signUpUrl`请求映射指定为在数据库中找不到先前连接时重定向到我们自定义的`SignupController`。
- en: Alternatively, the specified `postSignInUrl` allows the user to be redirected
    to the home page of the portal when the `ProviderSignInController` resolves an
    existing connection to reuse.
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，指定的`postSignInUrl`允许用户在`ProviderSignInController`解析现有连接以重用时重定向到门户的主页。
- en: There is more…
  id: totrans-2475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's have a look at other features of Spring social.
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Spring social的其他特性。
- en: Performing authenticated API calls
  id: totrans-2477
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行经过身份验证的API调用
- en: In this recipe, we focused on presenting the OAuth2-client authentication process.
    In the next chapter, we will see how to use Spring social to perform requests
    to Yahoo! APIs on behalf of the users. We will see how can be used existing libraries
    in this purpose and how they work. In our case, we had to develop API connectors
    to Yahoo! financial APIs.
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们专注于介绍OAuth2客户端认证过程。在下一章中，我们将看到如何使用Spring social代表用户对Yahoo! API执行请求。我们将看到如何在此目的中使用现有库以及它们的工作原理。在我们的案例中，我们不得不开发API连接器到Yahoo!金融API。
- en: The Spring social ConnectController
  id: totrans-2479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring social ConnectController
- en: 'Spring social web provides another abstracted controller which allows social
    users to directly interact with their social connections to connect, disconnect,
    and obtain their connection status. The `ConnectController` can also be used to
    build an interactive monitoring screen for managing connections to all the providers
    a site could possibly handle. Check out the Spring social reference for more details:'
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: Spring social web提供了另一个抽象的控制器，允许社交用户直接与他们的社交连接进行交互，连接、断开连接并获取他们的连接状态。`ConnectController`也可以用于构建一个交互式监控屏幕，用于管理站点可能处理的所有提供者的连接。查看Spring
    social参考了解更多详情：
- en: '[http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#connecting](http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#connecting)'
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#connecting](http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#connecting)'
- en: See also
  id: totrans-2482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: SocialAuthenticationFilter
  id: totrans-2483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SocialAuthenticationFilter
- en: This is a filter to be added to Spring Security so that a social authentication
    can be performed from the Spring Security filter-chain (and not externally as
    we did).
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个要添加到Spring Security中的过滤器，以便可以从Spring Security过滤器链（而不是像我们之前那样外部地）执行社交认证。
- en: '[http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#enabling-provider-sign-in-with-code-socialauthenticationfilter-code](http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#enabling-provider-sign-in-with-code-socialauthenticationfilter-code)'
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#enabling-provider-sign-in-with-code-socialauthenticationfilter-code](http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#enabling-provider-sign-in-with-code-socialauthenticationfilter-code)'
- en: The list of Spring social connectors
  id: totrans-2486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring社交连接器列表
- en: 'You will find a list of implemented connectors to Saas-providers from the main
    page of the project: [http://projects.spring.io/spring-social](http://projects.spring.io/spring-social)'
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在项目的主页上找到一系列已实现的Saas提供商连接器：[http://projects.spring.io/spring-social](http://projects.spring.io/spring-social)
- en: Implementing an OAuth2 authentication server
  id: totrans-2488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现OAuth2认证服务器
- en: 'You can use the Spring Security OAuth project:'
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Spring Security OAuth项目：
- en: '[http://projects.spring.io/spring-security-oauth](http://projects.spring.io/spring-security-oauth)'
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://projects.spring.io/spring-security-oauth](http://projects.spring.io/spring-security-oauth)'
- en: The harmonic development blog
  id: totrans-2491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 和谐发展博客
- en: 'The articles about Spring social have inspired this recipe. Feel free to visit
    this blog:'
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Spring社交的文章启发了这个配方。欢迎访问这个博客：
- en: '[http://harmonicdevelopment.tumblr.com/post/13613051804/adding-spring-social-to-a-spring-mvc-and-spring](http://harmonicdevelopment.tumblr.com/post/13613051804/adding-spring-social-to-a-spring-mvc-and-spring)'
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://harmonicdevelopment.tumblr.com/post/13613051804/adding-spring-social-to-a-spring-mvc-and-spring](http://harmonicdevelopment.tumblr.com/post/13613051804/adding-spring-social-to-a-spring-mvc-and-spring)'
- en: Storing credentials in a REST environment
  id: totrans-2494
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在REST环境中存储凭据
- en: This recipe presents a solution for storing credentials in RESTful applications.
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方提供了在RESTful应用程序中存储凭据的解决方案。
- en: Getting ready
  id: totrans-2496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The solution is a compromise between temporary client-side storage and permanent
    server-side storage.
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案是临时客户端存储和永久服务器端存储之间的折衷。
- en: On the client side, we are using HTML5 session storage to store temporarily
    the usernames and passwords encoded in base 64\. On the server side, only hashes
    are stored for passwords. Those hashes are created with `passwordEncoder`. This
    `passwordEncoder` is registered in Spring Security, autowired, and used in the
    `UserDetailsService` implementation.
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们使用HTML5会话存储来临时存储以base 64编码的用户名和密码。在服务器端，只有密码的哈希值被存储。这些哈希值是使用`passwordEncoder`创建的。这个`passwordEncoder`被注册在Spring
    Security中，自动装配，并在`UserDetailsService`实现中使用。
- en: How to do it...
  id: totrans-2499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Client side (AngularJS)
  id: totrans-2500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端（AngularJS）
- en: 'We have made use of the HTML5 `sessionStorage` attribute. The main change has
    been the creation of a `httpAuth` factory. Presented in the `http_authorized.js`
    file, this factory is a wrapper around `$http` to take care transparently of client-side
    storage and authentication headers. The code for this factory is as follows:'
  id: totrans-2501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经使用了HTML5的`sessionStorage`属性。主要的变化是创建了一个`httpAuth`工厂。这个工厂在`http_authorized.js`文件中呈现，它是一个围绕`$http`的包装器，用于透明地处理客户端存储和身份验证头。这个工厂的代码如下：
- en: '[PRE249]'
  id: totrans-2502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: This factory is invoked everywhere (or almost) in the former place of `$http`
    to pass and handle transparently the credentials or identification headers required
    for AJAX requests.
  id: totrans-2503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个工厂在以前的地方（或几乎在所有地方）被调用，用于传递和处理AJAX请求所需的凭据或身份验证头。
- en: We have avoided dealing directly with the `sessionStorage` attribute from the
    different controllers, in order to prevent being tightly coupled with this storage
    solution.
  id: totrans-2504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经避免直接处理不同控制器中的`sessionStorage`属性，以防止与这个存储解决方案紧密耦合。
- en: The `account_management.js` file regroups different controllers (`LoginByUsernameAndPasswordController`,
    `createNewAccountController`, and `OAuth2Controller`) that store credentials and
    provider IDs in `sessionStorage` through `httpAuth`.
  id: totrans-2505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`account_management.js`文件汇集了不同的控制器（`LoginByUsernameAndPasswordController`、`createNewAccountController`和`OAuth2Controller`），通过`httpAuth`将凭据和提供商ID存储在`sessionStorage`中。'
- en: 'A couple of factories have also been modified to pull and push data through
    the `httpAuth` factory. For example, the `indiceTableFactory` (from `home_financial_table.js`)
    requests the indices of a market with credentials handled transparently:'
  id: totrans-2506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些工厂也已经被修改，通过`httpAuth`工厂来拉取和推送数据。例如，`indiceTableFactory`（来自`home_financial_table.js`）透明地处理凭据来请求市场的指数：
- en: '[PRE250]'
  id: totrans-2507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Server side
  id: totrans-2508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器端
- en: 'We have declared a `passwordEncoder` bean in `security-config.xml` (in the
    `cloudstreetmarket-core` module):'
  id: totrans-2509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`security-config.xml`（在`cloudstreetmarket-core`模块中）中声明了一个`passwordEncoder`
    bean：
- en: '[PRE251]'
  id: totrans-2510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: In `security-config.xml`, a reference to the password-encoder is made, as follows,
    in our `authenticationProvider` to.
  id: totrans-2511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`security-config.xml`中，我们在`authenticationProvider`中做了对`password-encoder`的引用。
- en: '[PRE252]'
  id: totrans-2512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'The `passwordEncoder` bean is autowired in `CommunityServiceImpl` (our `UserDetailsService`
    implementation). Passwords are hashed here with `passwordEncoder` when accounts
    are registered. The stored hash is then compared to the user-submitted password
    when the user attempts to log in. The `CommunityServiceImpl` code is as follows:'
  id: totrans-2513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`passwordEncoder` bean在`CommunityServiceImpl`（我们的`UserDetailsService`实现）中被自动装配。在这里，当账户被注册时，密码会被哈希化。存储的哈希值然后与用户提交的密码进行比较，当用户尝试登录时。`CommunityServiceImpl`的代码如下：'
- en: '[PRE253]'
  id: totrans-2514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Our `ConnectionFactory` implementation `SocialUserConnectionRepositoryImpl`
    is instantiated in `SocialUserServiceImpl` with an instance of the Spring `TextEncryptor`.
    This gives the possibility to encrypt the stored connection-data for OAuth2 (most
    importantly, the access-tokens and refresh-tokens). At the moment, this data is
    not encrypted in our code.
  id: totrans-2515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`ConnectionFactory`实现`SocialUserConnectionRepositoryImpl`在`SocialUserServiceImpl`中被实例化，使用Spring的`TextEncryptor`实例。这使得可以加密OAuth2的存储连接数据（最重要的是访问令牌和刷新令牌）。目前，这些数据在我们的代码中没有加密。
- en: How it works...
  id: totrans-2516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this chapter, wetried to maintain the statelessness of our RESTful API for
    the benefits it provides (scalability, easy deployment, fault tolerance, and so
    on).
  id: totrans-2517
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们试图保持我们的RESTful API的无状态性，以获得它所提供的好处（可扩展性、易部署、容错性等）。
- en: Authenticating for Microservices
  id: totrans-2518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微服务认证
- en: 'Staying stateless matches a key concept of Microservices: the self-sufficiency
    of our modules. We won''t be using sticky sessions for scalability. When a state
    is maintained, it is only by the client, keeping for a limited time the user''s
    identifier and/or his credentials.'
  id: totrans-2519
  prefs: []
  type: TYPE_NORMAL
  zh: 保持无状态符合微服务的一个关键概念：我们的模块的自给自足。我们不会使用粘性会话来实现可扩展性。当状态被维护时，仅由客户端保留，有限时间内保留用户的标识和/或凭据。
- en: Another key concept of Microservices is the concept of limited and identified
    responsibilities (horizontal scalability). Our design supports this principle
    even if the size of the application doesn't require domain segmentation. We can
    fully imagine splitting our API by domains (community, indices and stocks, monitoring,
    and so on). Spring Security, which is located in the core-module, would be embedded
    in every API war without any problem.
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的另一个关键概念是有限和确定的责任（水平可扩展性）的概念。即使应用程序的大小不需要领域分割，我们的设计也支持这一原则。我们完全可以想象按领域（社区、指数和股票、监控等）拆分我们的API。Spring
    Security位于核心模块中，可以在每个API war中嵌入而不会出现任何问题。
- en: 'Let''s focus on how a state is maintained on the client side. We offer to our
    users two ways of signing-in: using a BASIC scheme or using OAuth2.'
  id: totrans-2521
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于客户端如何维护状态。我们为用户提供了两种登录方式：使用基本方案或使用OAuth2。
- en: A user can register his account for a BASIC authentication and then later decide
    to sign-in using OAuth2 (to do so, he has to bind his social account to his existing
    account).
  id: totrans-2522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以为基本认证注册帐户，然后决定以OAuth2登录（为此，他必须将他的社交帐户绑定到他现有的帐户）。
- en: Alternatively, a user can register his account with OAuth2 and later sign in
    with a BASIC form. His OAuth2 credentials will naturally be bound to his authentication.
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，用户可以使用OAuth2注册他的帐户，然后以基本表单登录。他的OAuth2凭据自然会绑定到他的身份验证。
- en: Using the BASIC authentication
  id: totrans-2524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用基本认证
- en: When a user registers an account, he defines a username and a password. These
    credentials are stored using the `httpAuth` factory and the `setCredentials` method.
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户注册帐户时，他定义了用户名和密码。这些凭据使用`httpAuth`工厂和`setCredentials`方法存储。
- en: 'In the `account_management.js` file and especially in the `createNewAccountController`
    (invoked through the `create_account_modal.html` modal), the `setCredentials`
    call can be found in the success handler of the `createAccount` method:'
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
  zh: 在`account_management.js`文件中，特别是在`createNewAccountController`（通过`create_account_modal.html`模态调用），`setCredentials`调用可以在`createAccount`方法的成功处理程序中找到：
- en: '[PRE254]'
  id: totrans-2527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'Right now, this method uses HTML5 `sessionStorage` as storage device:'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，该方法使用HTML5的`sessionStorage`作为存储设备：
- en: '[PRE255]'
  id: totrans-2529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: The `window.btoa(...)` function encodes in base 64 the provided String. The
    `$httpProvider.defaults.headers` configuration object is also added a new header
    which will potentially be used by the next AJAX request.
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.btoa(...)`函数对提供的字符串进行base64编码。`$httpProvider.defaults.headers`配置对象也添加了一个新的标头，可能会被下一个AJAX请求使用。'
- en: 'When a user signs in using the BASIC form (see also the `account_management.js`
    and especially the `LoginByUsernameAndPasswordController` that is invoked from
    the `auth_modal.html` modal), the username and password are stored using the same
    method:'
  id: totrans-2531
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用基本表单登录（也可以参见`account_management.js`和特别是从`auth_modal.html`模态调用的`LoginByUsernameAndPasswordController`）时，用户名和密码也是使用相同的方法存储的：
- en: '[PRE256]'
  id: totrans-2532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Now with the `httpAuth` abstraction layer the angular `$http` service, we make
    sure that the **Authorization** header is set in each call to the API that is
    made using `$http`.
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过`httpAuth`抽象层，我们确保每次使用`$http`进行API调用时都设置了**Authorization**标头。
- en: '![Using the BASIC authentication](img/image00873.jpeg)'
  id: totrans-2534
  prefs: []
  type: TYPE_IMG
  zh: '![使用基本认证](img/image00873.jpeg)'
- en: Using OAuth2
  id: totrans-2535
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用OAuth2
- en: Initiated from `auth_modal.html`, signing in using OAuth2 creates a POST HTTP
    request to the API handler `/api/signin/yahoo` (this handler is located in the
    abstracted `ProviderSignInController`).
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
  zh: 从`auth_modal.html`发起，使用OAuth2登录会创建一个POST HTTP请求到API处理程序`/api/signin/yahoo`（此处理程序位于抽象的`ProviderSignInController`中）。
- en: 'The sign in request is redirected to the Yahoo! authentication screens. The
    whole page goes to Yahoo! until completion. When the API ultimately redirects
    the request to the home page of the portal, a `spi` request parameter is added:
    `http://cloudstreetmarket.com/portal/index?spi=F2YY6VNSXIU7CTAUB2A6U6KD7E`'
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: 登录请求被重定向到Yahoo!身份验证屏幕。整个页面都会跳转到Yahoo!直到完成。当API最终将请求重定向到门户的主页时，会添加一个`spi`请求参数：`http://cloudstreetmarket.com/portal/index?spi=F2YY6VNSXIU7CTAUB2A6U6KD7E`
- en: 'This `spi` parameter is the Yahoo! user ID (GUID). It is caught by the `DefaultController`
    (`cloudstreetmarket-webapp`) and injected into the model:'
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`spi`参数是Yahoo!用户ID（GUID）。它被`DefaultController`（`cloudstreetmarket-webapp`）捕获并注入到模型中：
- en: '[PRE257]'
  id: totrans-2539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'The `index.jsp` file renders the value directly in the top menu''s DOM:'
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.jsp`文件直接在顶部菜单的DOM中呈现该值：'
- en: '[PRE258]'
  id: totrans-2541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'When the `menuController` (bound to the top menu) initializes itself, this
    value is read and stored in `sessionStorage`:'
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
  zh: 当`menuController`（绑定到顶部菜单）初始化自身时，会读取并将该值存储在`sessionStorage`中：
- en: '[PRE259]'
  id: totrans-2543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'In our `httpAuth` factory (`http_authorized.js`), the `refresh()` method that
    is invoked before every single call to the API checks if this value is present
    and add two extra headers: `Spi` with the GUID value and the **OAuthProvider**
    (yahoo in our case). The code is as follows:'
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`httpAuth`工厂（`http_authorized.js`）中，每次调用API之前调用的`refresh()`方法都会检查是否存在该值，并添加两个额外的标头：带有GUID值的`Spi`和**OAuthProvider**（在我们的情况下是雅虎）。代码如下：
- en: '[PRE260]'
  id: totrans-2545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'The screenshot here shows those two headers for one of our an AJAX requests:'
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的屏幕截图显示了我们的一个AJAX请求的这两个标头：
- en: '![Using OAuth2](img/image00874.jpeg)'
  id: totrans-2547
  prefs: []
  type: TYPE_IMG
  zh: '![使用OAuth2](img/image00874.jpeg)'
- en: HTML5 SessionStorage
  id: totrans-2548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML5 SessionStorage
- en: We used the SessionStorage as storage solution on the client side for user credentials
    and social identifiers (GUIDs).
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在客户端使用SessionStorage作为用户凭据和社交标识（GUID）的存储解决方案。
- en: In HTML5, web pages have the capability to store data locally in the browser
    using the Web Storage technology. Data in stored Web Storage can be accessed from
    the page scripts' and values can be relatively large (up to 5MB) with no impact
    on client-side performance.
  id: totrans-2550
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5中，网页可以使用Web Storage技术在浏览器中本地存储数据。存储在Web Storage中的数据可以从页面脚本中访问，值可以相对较大（最多5MB），对客户端性能没有影响。
- en: 'Web Storage is per origin (the combination of protocol, hostname, and port
    number). All pages from one origin can store and access the same data. There are
    two types of objects that can be used for storing data locally:'
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
  zh: Web Storage是按来源（协议、主机名和端口号的组合）进行的。来自一个来源的所有页面都可以存储和访问相同的数据。有两种类型的对象可以用于本地存储数据：
- en: '`window.localStorage`: This stores data with no expiration date.'
  id: totrans-2552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.localStorage`：这会存储没有过期日期的数据。'
- en: '`window.sessionStorage`: This stores data for one session (data is lost when
    the tab is closed).'
  id: totrans-2553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.sessionStorage`：这会为一个会话存储数据（在标签关闭时数据丢失）。'
- en: 'These two objects can be accessed directly from the window object and they
    both come with the self-explanatory methods:'
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个对象可以直接从window对象中访问，并且它们都带有自解释的方法：
- en: '[PRE261]'
  id: totrans-2555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'As indicated by [http://www.w3schools.com/](http://www.w3schools.com/), localStorage
    is almost supported by all browsers nowadays (between 94% and 98% depending upon
    your market). The following table shows the first versions that fully support
    it:'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[http://www.w3schools.com/](http://www.w3schools.com/)，localStorage现在几乎被所有浏览器支持（根据市场情况在94%到98%之间）。以下表格显示了完全支持它的第一个版本：
- en: '![HTML5 SessionStorage](img/image00875.jpeg)'
  id: totrans-2557
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5 SessionStorage](img/image00875.jpeg)'
- en: We should implement a fallback option with cookies for noncompliant web browsers,
    or at least a warning message when the browsers seem outdated.
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该为不兼容的网络浏览器实现一个使用cookies的备用选项，或者至少在浏览器看起来过时时显示警告消息。
- en: SSL/TLS
  id: totrans-2559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSL/TLS
- en: An encrypted communication protocol must be setup when using a BASIC authentication.
    We have seen that the credentials username:password and the Yahoo! GUID are sent
    as request headers. Even though those credentials are encoded in base 64, this
    doesn't represent a sufficient protection.
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用基本身份验证时必须设置加密通信协议。我们已经看到凭据用户名:密码和Yahoo! GUID被发送为请求头。即使这些凭据被编码为base 64，这也不足以提供足够的保护。
- en: BCryptPasswordEncoder
  id: totrans-2561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BCryptPasswordEncoder
- en: On the server side, we don't store the `User` passwords in plain text. We only
    store an encoded description of them (a hash). Therefore, a hashing function is
    supposedly not reversible.
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，我们不以明文形式存储`User`密码。我们只存储它们的编码描述（哈希）。因此，哈希函数被认为是不可逆的。
- en: '|   | *"A hash function is any function that can be used to map digital data
    of arbitrary size to digital data of fixed size".* |   |'
  id: totrans-2563
  prefs: []
  type: TYPE_TB
  zh: '|   | *"哈希函数是任何可以用于将任意大小的数字数据映射到固定大小数字数据的函数。"* |   |'
- en: '|   | --*Wikipedia* |'
  id: totrans-2564
  prefs: []
  type: TYPE_TB
  zh: '|   | --*维基百科* |'
- en: 'Let''s have a look at the following mapping:'
  id: totrans-2565
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下映射：
- en: '![BCryptPasswordEncoder](img/image00876.jpeg)'
  id: totrans-2566
  prefs: []
  type: TYPE_IMG
  zh: '![BCryptPasswordEncoder](img/image00876.jpeg)'
- en: This diagram shows a hash function that maps `names` `to` `integers` from 0
    to 15.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表显示了一个将`names`映射到0到15之间的`integers`的哈希函数。
- en: 'We used a `PasswordEncoder` implementation invoked manually while persisting
    and updating `Users`. Also `PasswordEncoder` is an Interface of Spring Security
    core:'
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在持久化和更新`Users`时手动调用了`PasswordEncoder`实现。`PasswordEncoder`也是Spring Security核心的一个接口。
- en: '[PRE262]'
  id: totrans-2569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Spring Security provides three implementations: `StandardPasswordEncoder`,
    `NoOpPasswordEncoder`, and `BCryptPasswordEncoder`.'
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了三种实现：`StandardPasswordEncoder`，`NoOpPasswordEncoder`和`BCryptPasswordEncoder`。
- en: We used `BCryptPasswordEncoder` as it is recommended on new projects. Instead
    of implementing a MD5 or SHA hashing algorithm, `BCryptPasswordEncoder` uses a
    stronger hashing algorithm with randomly generated `salt`.
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在新项目中推荐使用`BCryptPasswordEncoder`。`BCryptPasswordEncoder`使用更强大的哈希算法和随机生成的`salt`，而不是实现MD5或SHA哈希算法。
- en: 'This allows the storage of different HASH values for the same password. Here''s
    an example of different `BCrypt` hashes for the `123456` value:'
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许为相同密码存储不同的哈希值。以下是`123456`值的不同`BCrypt`哈希的示例：
- en: '[PRE263]'
  id: totrans-2573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: There is more…
  id: totrans-2574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Setting HTTP headers with AngularJS
  id: totrans-2575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AngularJS设置HTTP头
- en: 'As we have set Headers, check out the following page for more information about
    headers management with AngularJS:'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经设置了头部，请查看以下页面以获取有关使用AngularJS管理头部的更多信息：
- en: '[https://docs.angularjs.org/api/ng/service/$http](https://docs.angularjs.org/api/ng/service/%24http)'
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.angularjs.org/api/ng/service/$http](https://docs.angularjs.org/api/ng/service/%24http)'
- en: Browser support for localStorage
  id: totrans-2578
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: localStorage的浏览器支持
- en: 'Get an insight about the overall support per bbrowser version:'
  id: totrans-2579
  prefs: []
  type: TYPE_NORMAL
  zh: 了解每个浏览器版本的整体支持情况：
- en: '[http://caniuse.com/#search=localstorage](http://caniuse.com/#search=localstorage)'
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://caniuse.com/#search=localstorage](http://caniuse.com/#search=localstorage)'
- en: About SSL and TLS
  id: totrans-2581
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于SSL和TLS
- en: We have installed a SSL certificate on our production server. To buy and get
    issued a SSL certificate, we have had to provide our web server type (Apache 2)
    and a **Certificate Signing Request** (**CSR**) generated from the keytool program
    (embedded in the JDK).
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在生产服务器上安装了SSL证书。为了购买和颁发SSL证书，我们必须提供我们的Web服务器类型（Apache 2）和从keytool程序（嵌入在JDK中）生成的**证书签名请求**（**CSR**）。
- en: '[http://arstechnica.com/information-technology/2012/11/securing-your-web-server-with-ssltls/](http://arstechnica.com/information-technology/2012/11/securing-your-web-server-with-ssltls/)'
  id: totrans-2583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://arstechnica.com/information-technology/2012/11/securing-your-web-server-with-ssltls/](http://arstechnica.com/information-technology/2012/11/securing-your-web-server-with-ssltls/)'
- en: '[http://en.wikipedia.org/wiki/Certificate_signing_request](http://en.wikipedia.org/wiki/Certificate_signing_request)'
  id: totrans-2584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Certificate_signing_request](http://en.wikipedia.org/wiki/Certificate_signing_request)'
- en: '[https://www.namecheap.com/support/knowledgebase/article.aspx/9422/0/tomcat-using-keytool](https://www.namecheap.com/support/knowledgebase/article.aspx/9422/0/tomcat-using-keytool)'
  id: totrans-2585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.namecheap.com/support/knowledgebase/article.aspx/9422/0/tomcat-using-keytool](https://www.namecheap.com/support/knowledgebase/article.aspx/9422/0/tomcat-using-keytool)'
- en: Authorizing on services and controllers
  id: totrans-2586
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对服务和控制器进行授权
- en: In this recipe, we restrict the access to services and controllers depending
    upon the authorities that are granted to users.
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们根据授予用户的权限限制对服务和控制器的访问。
- en: Getting ready
  id: totrans-2588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We are going to install interceptors on specific URL paths and method-invocations,
    which will trigger a predefined authorization workflow: the `AbstractSecurityInterceptor`
    workflow.'
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在特定的URL路径和方法调用上安装拦截器，这将触发预定义的授权工作流程：`AbstractSecurityInterceptor`工作流程。
- en: In order for us to test these services' restrictions, we also slightly customized
    the Swagger UI to use it over a BASIC authentication.
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这些服务的限制，我们还稍微定制了Swagger UI，以便在基本身份验证下使用它。
- en: How to do it...
  id: totrans-2591
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We updated our `CustomBasicAuthenticationEntryPoint` class for this new version
    that allows the browser native BASIC-form to be prompted when the call is made
    from Swagger UI:'
  id: totrans-2592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为这个新版本更新了我们的`CustomBasicAuthenticationEntryPoint`类，允许在从Swagger UI发出调用时提示浏览器原生的基本表单：
- en: '[PRE264]'
  id: totrans-2593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: We created a `MonitoringController` (a `RestController`) that offers the possibility
    to manage users for an administration purpose.
  id: totrans-2594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`MonitoringController`（一个`RestController`），它提供了管理用户以进行管理目的的可能性。
- en: 'The `GET` method returns `User` objects directly (and not the `UserDTO`), which
    provides all the data about the users. Also, a `delete` method shows up at this
    location. The `MonitoringController` code is as follows:'
  id: totrans-2595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GET`方法直接返回`User`对象（而不是`UserDTO`），其中包含有关用户的所有数据。此外，此位置还显示了一个`delete`方法。`MonitoringController`代码如下：'
- en: '[PRE265]'
  id: totrans-2596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: 'In the `communityService` implementation, the two used methods (`findAll`,
    `delete` ) have been secured:'
  id: totrans-2597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`communityService`实现中，两个使用的方法（`findAll`，`delete`）已被保护：
- en: '[PRE266]'
  id: totrans-2598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: 'As a reminder, we have set a global method-security in `security-config.xml`:'
  id: totrans-2599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为提醒，我们在`security-config.xml`中设置了全局方法安全性：
- en: '[PRE267]'
  id: totrans-2600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Let's try it now. Restart your Tomcat and open a new window in your favorite
    browser. Open **Swagger UI** (`http://cloudstreetmarket.com/api/index.html`) as
    shown here:![How to do it...](img/image00877.jpeg)
  id: totrans-2601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们试一下。重新启动Tomcat，并在您喜欢的浏览器中打开一个新窗口。打开**Swagger UI**（`http://cloudstreetmarket.com/api/index.html`），如下所示：![如何做...](img/image00877.jpeg)
- en: Open the **monitoring** tab. Try to call the **GET /monitoring/users** method
    in order to list user accounts.
  id: totrans-2602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**监控**选项卡。尝试调用**GET /monitoring/users**方法以列出用户帐户。
- en: Your web browser should prompt a BASIC authentication form as follows:![How
    to do it...](img/image00878.jpeg)
  id: totrans-2603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的网络浏览器应提示如下的基本身份验证表单：![如何做...](img/image00878.jpeg)
- en: If you cancel this form, you should receive a **401 (Unauthorized)** response
    code.
  id: totrans-2604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果取消此表单，您应该收到**401（未经授权）**的响应代码。
- en: 'For test purpose, there is a `delete` method in `communityController` that
    is not secured by any annotation. Also, remember that there is no specific URL
    interceptor defined for the `communityController` path:'
  id: totrans-2605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于测试目的，在`communityController`中有一个未受任何注释保护的`delete`方法。还要记住，`communityController`路径没有定义特定的URL拦截器：
- en: '[PRE268]'
  id: totrans-2606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Without sign in, try to call this handler from Swagger UI. As shown in the following
    screenshot, try to delete the user named **other10**.![How to do it...](img/image00879.jpeg)
  id: totrans-2607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 未登录的情况下，尝试从Swagger UI调用此处理程序。如下图所示，尝试删除名为**other10**的用户。![如何做...](img/image00879.jpeg)
- en: You should receive a **403 (Forbidden)** response status because the underlying
    service-method is secured!
  id: totrans-2608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该收到**403（禁止）**的响应状态，因为底层服务方法受到了保护！
- en: You will see that you haven't been prompted a BASIC login form. Also, take a
    look at the response headers. You shouldn't see any **WWW-Authenticate** header,
    which could have triggered this popup.
  id: totrans-2609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会发现您没有收到基本登录表单的提示。还要查看响应头。您不应该看到任何**WWW-Authenticate**头，这可能会触发此弹出窗口。
- en: Tip
  id: totrans-2610
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: An `AuthenticationEntryPoint` is called if the user is not authenticated and
    if the requested HTTP resource appears to be secured. Securing the service alone
    is not sufficient for Spring Security to consider the Controller method-handler
    as secured.
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未经身份验证，并且所请求的HTTP资源似乎受到了保护，则会调用`AuthenticationEntryPoint`。仅保护服务对于Spring
    Security来说不足以将Controller方法处理程序视为受保护的。
- en: 'Try to `GET` the users again in the **monitoring** tab. You should see again
    the BASIC authentication form. Fill it with the following details:'
  id: totrans-2612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在**监控**选项卡中再次`GET`用户。您应该再次看到基本身份验证表单。用以下详细信息填写它：
- en: '[PRE269]'
  id: totrans-2613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'You should now receive the following response with a **200 status code**:'
  id: totrans-2614
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该收到以下响应，状态码为**200**：
- en: '![How to do it...](img/image00880.jpeg)'
  id: totrans-2615
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image00880.jpeg)'
- en: Swagger UI cannot beautify the body when we request a JSON response but everything
    is there.
  id: totrans-2616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们请求JSON响应时，Swagger UI无法美化正文，但一切都在那里。
- en: Note
  id: totrans-2617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Notice the response code: **WWW-Authenticate: CSM_Basic realm"="cloudstreetmarket.com"**.'
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: '注意响应代码：**WWW-Authenticate: CSM_Basic realm"="cloudstreetmarket.com"**。'
- en: How it works...
  id: totrans-2619
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We will see how the Spring Security authorization process works and how to configure
    it.
  id: totrans-2620
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到Spring Security授权过程的工作原理以及如何配置它。
- en: Spring Security authorities
  id: totrans-2621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Security权限
- en: An `AuthenticationManager` implementation stores `GrantedAuthorities` into an
    `Authentication` object in the `SecurityContext`. These `GrantedAuthorities` are
    read by the `AccessDecisionManager` in an attempt to match them against accesses'
    requirements.
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationManager`实现将`GrantedAuthorities`存储到`SecurityContext`中的`Authentication`对象中。`AccessDecisionManager`将尝试读取这些`GrantedAuthorities`，并将它们与访问要求进行匹配。'
- en: The `AccessDecisionManager` implementations can be native or external and this
    explains why the infrastructure forces the authorities to be rendered as Strings.
  id: totrans-2623
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccessDecisionManager`实现可以是本地的或外部的，这解释了为什么基础设施强制要求权限被呈现为字符串。'
- en: If a `getAuthority()` method is not able to represent the `GrantedAuthority`
    as a String, then it should return `null`, indicating to the `AuthenticationManager`
    that it has to support this type of `Authority`.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`getAuthority()`方法无法将`GrantedAuthority`表示为字符串，则应返回`null`，表示`AuthenticationManager`必须支持此类型的`Authority`。
- en: This mechanism constraints the different `getAuthority()` implementations into
    limited responsibilities.
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机制将不同的`getAuthority()`实现约束为有限的责任。
- en: Configuration attributes
  id: totrans-2626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置属性
- en: We have mentioned the Configuration attributes when we were introducing the
    `GrantedAuthority` objects (*Authenticating over a BASIC scheme* recipe).
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在介绍`GrantedAuthority`对象（*在BASIC方案上进行身份验证*配方）时提到了配置属性。
- en: 'Configuration attributes play a key role in `SecurityInterceptor` and indirectly
    in `AccessDecisionManager` implementations, since `SecurityInterceptor` delegates
    to `AccessDecisionManager`. Configuration attributes implement the one-method
    `ConfigAttribute` interface:'
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
  zh: 配置属性在`SecurityInterceptor`中起着关键作用，间接影响`AccessDecisionManager`的实现，因为`SecurityInterceptor`委托给`AccessDecisionManager`。配置属性实现了一个方法的`ConfigAttribute`接口：
- en: '[PRE270]'
  id: totrans-2629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Note
  id: totrans-2630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Configuration attributes are specified as annotations on secured methods or
    as access attributes on secured URLs (intercept-urls).
  id: totrans-2631
  prefs: []
  type: TYPE_NORMAL
  zh: 配置属性被指定为受保护方法上的注释，或者作为受保护URL（拦截URL）上的访问属性。
- en: 'We have defined the following instruction in our `security-config.xml` file
    as a way to tell Spring Security to expect the configuration attributes `ROLE_BASIC`
    on web requests matching the `/basic.html` pattern:'
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`security-config.xml`文件中定义了以下指令，告诉Spring Security在匹配`/basic.html`模式的Web请求上期望配置属性`ROLE_BASIC`：
- en: '[PRE271]'
  id: totrans-2633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: With the default `AccessDecisionManager` implementation, any user having a matching
    `GrantedAuthority` will be granted the access.
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的`AccessDecisionManager`实现，任何具有匹配的`GrantedAuthority`的用户都将被授予访问权限。
- en: For a voter-based `AccessDecisionManager` implementation, a configuration attribute
    beginning with `ROLE_` the prefix will be considered as a role and should be examined
    by a `RoleVoter`. We will see more about `AccessDecisionManager` in the next sections.
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
  zh: 基于投票者的`AccessDecisionManager`实现，以`ROLE_`开头的配置属性将被视为角色，并应由`RoleVoter`检查。我们将在接下来的部分中更多地了解`AccessDecisionManager`。
- en: 'SecurityInterceptor protecting Secure objects are objects or actions that require
    a security examination. There are two types of secure objects that are handled
    by the Framework:'
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: SecurityInterceptor保护的安全对象是需要进行安全检查的对象或操作。框架处理的两种类型的安全对象：
- en: 'Web resources such as `ServletRequest` or `ServletResponse.` Those are checked
    by **FilterSecurityInterceptor**: a core Filter positioned almost at the end of
    the filter chain.'
  id: totrans-2637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web资源，如`ServletRequest`或`ServletResponse`。这些将由**FilterSecurityInterceptor**检查：一个核心过滤器，位于过滤器链的最后。
- en: Method invocations, which are implementations of `org.aopalliance.intercept.MethodInvocation`.
    Those are checked by **MethodSecurityInterceptor**.
  id: totrans-2638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法调用，这些是`org.aopalliance.intercept.MethodInvocation`的实现。这些将由**MethodSecurityInterceptor**检查。
- en: A security interceptor (method or HTTP request) intercepts asynchronously (event-based)
    every single secure object invocations before they actually reach the resource.
    Spring Security always applies a simple pattern when handling those invocations.
    This pattern comes from the use of `AbstractSecurityInterceptor` subclasses.
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 安全拦截器（方法或HTTP请求）在实际到达资源之前异步拦截（基于事件）每个安全对象调用。Spring Security在处理这些调用时总是应用简单的模式。这种模式来自于使用`AbstractSecurityInterceptor`子类。
- en: 'The `AbstractSecurityInterceptor` examinations impose a consistent workflow
    to Secure Objects:'
  id: totrans-2640
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractSecurityInterceptor`的检查对安全对象施加了一致的工作流程：'
- en: Looking up the **configuration attributes** associated with the .secure object.
  id: totrans-2641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找与.secure对象关联的**配置属性**。
- en: Submitting the secure object, current authentication object, and configuration
    attributes to the `AccessDecisionManager` interface for an authorization decision.
  id: totrans-2642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将安全对象、当前身份验证对象和配置属性提交给`AccessDecisionManager`接口进行授权决定。
- en: Optionally changing the `Authentication` object under which the invocation takes
    place.
  id: totrans-2643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地更改调用发生的`Authentication`对象。
- en: Allowing the secure object invocation to proceed (assuming access was granted).
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许安全对象调用继续（假设已授予访问权限）。
- en: Calling the `AfterInvocationManager` interface if configured, once the invocation
    has returned. If the invocation raised an exception, the `AfterInvocationManager`
    will not be invoked.
  id: totrans-2645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果配置了，调用`AfterInvocationManager`接口，一旦调用返回。如果调用引发异常，则不会调用`AfterInvocationManager`。
- en: 'This workflow can be summarized with the following diagram:'
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作流程可以用以下图表总结：
- en: '![Configuration attributes](img/image00881.jpeg)'
  id: totrans-2647
  prefs: []
  type: TYPE_IMG
  zh: '![配置属性](img/image00881.jpeg)'
- en: The original graph for this picture comes from the Spring Security reference.
    It is interesting because it highlights the different elements that `SecurityInterceptor`
    can use when examining a secure object.
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
  zh: 此图片的原始图来自Spring Security参考。它很有趣，因为它突出了`SecurityInterceptor`在检查安全对象时可以使用的不同元素。
- en: Note
  id: totrans-2649
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The main idea is the delegation to an `AccessDecisionManager` interface and
    then optionally to an `AfterInvocationManager` interface, using the pulled attributes
    from `SecurityMetadaSource` and eventually the `AuthenticationManager` capability
    to authenticate.
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是委托给`AccessDecisionManager`接口，然后可选地委托给`AfterInvocationManager`接口，使用从`SecurityMetadaSource`中提取的属性，最终使用`AuthenticationManager`的能力进行身份验证。
- en: 'A `RunAsManager` dependency can optionally be added to `SecurityInterceptor`
    on rare occasions where the `SecurityContext Authentication` object may need to
    be altered (*step 3* of the workflow). The interface is defined as follows:'
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SecurityInterceptor`上可以可选地添加`RunAsManager`依赖项，这种情况很少发生，其中`SecurityContext
    Authentication`对象可能需要被更改（*工作流程的第3步*）。该接口定义如下：
- en: '[PRE272]'
  id: totrans-2652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: If no dependency is set for `RunAsManager`, the `SecurityInterceptor` will run
    a `NullRunAsManager` implementation. An `AfterInvocationManager` interface may
    optionally be configured and used to alter the `statusToken` object returned by
    the invocation (*step 5* of the workflow).
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未设置`RunAsManager`的依赖项，`SecurityInterceptor`将运行`NullRunAsManager`实现。可以可选地配置`AfterInvocationManager`接口，并用于更改调用返回的`statusToken`对象（*工作流程的第5步*）。
- en: Pre-invocation handling
  id: totrans-2654
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预调用处理
- en: An `AccessDecisionManager` decides whether an access must be allowed or not.
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccessDecisionManager`决定是否允许访问。'
- en: AccessDecisionManager
  id: totrans-2656
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AccessDecisionManager
- en: The `AccessDecisionManager` interface is called by the `SecurityInterceptor`
    (in *step 2* of its workflow) and is responsible for making the final access control
    decision.
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccessDecisionManager` 接口由 `SecurityInterceptor`（在其工作流程的 *步骤 2* 中）调用，并负责做出最终的访问控制决策。'
- en: 'The interface is made of the following three methods:'
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
  zh: 该接口由以下三个方法组成：
- en: '[PRE273]'
  id: totrans-2659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'As you can see, the method names are pretty explicit:'
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，方法名非常明确：
- en: The `decide` method resolves an access control decision for the provided arguments.
    The `Authentication` object represents the caller invoking the method, the object
    is the Secured Object to be examined, the `configAttributes` are the configuration
    attributes associated with the secured object. Also, it throws an `AccessDeniedException`
    when access is denied.
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decide` 方法解决了提供的参数的访问控制决策。`Authentication` 对象代表调用该方法的调用者，对象是要检查的受保护对象，`configAttributes`
    是与受保护对象关联的配置属性。当拒绝访问时，它还会抛出 `AccessDeniedException`。'
- en: The `supports(ConfigAttribute attribute)` method is called at an early stage
    of the examination to determine whether the `AccessDecisionManager` can process
    a specific `ConfigAttribute`.
  id: totrans-2662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supports(ConfigAttribute attribute)` 方法在检查的早期阶段被调用，以确定 `AccessDecisionManager`
    是否可以处理特定的 `ConfigAttribute`。'
- en: The `supports(Class<?> clazz)` method is called prior the invocation to ensure
    the configured `AccessDecisionManager` supports the type of Secure Object that
    will be presented.
  id: totrans-2663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用之前，会调用 `supports(Class<?> clazz)` 方法，以确保配置的 `AccessDecisionManager` 支持将要呈现的安全对象类型。
- en: Tip
  id: totrans-2664
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When using a namespace configuration, Spring Security automatically registers
    a default instance of `AccessDecisionManager` for assessing method invocations
    and web accesses, based on the access attributes which are specified in the intercept-url
    and protect-pointcut declarations (and in annotations if using annotations to
    secure methods).
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用命名空间配置时，Spring Security 会根据在 intercept-url 和 protect-pointcut 声明中指定的访问属性（以及在使用注释来保护方法时的注释）自动注册一个默认的
    `AccessDecisionManager` 实例，用于评估方法调用和 Web 访问。
- en: 'A specific or custom `AccessDecisionManager` can be specified in the following
    cases:'
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下可以指定特定或自定义的 `AccessDecisionManager`：
- en: 'On the **http** Namespace when handling web resources:'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理 Web 资源时的 **http** 命名空间：
- en: '[PRE274]'
  id: totrans-2668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'On the **global-method-security** Namespace when handling method invocations:'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理方法调用时的 **global-method-security** 命名空间：
- en: '[PRE275]'
  id: totrans-2670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Spring Security includes three `AccessDecisionManager` implementations (`AffirmativeBased`,
    `ConsensusBased`, and `UnanimousBased`) that are based on voting. Voters are eligible
    `AccessDecisionVoter` implementations. The interface is defined as follows:'
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 包括三个 `AccessDecisionManager` 实现（`AffirmativeBased`、`ConsensusBased`
    和 `UnanimousBased`），这些实现是基于投票的。投票者是合格的 `AccessDecisionVoter` 实现。该接口定义如下：
- en: '[PRE276]'
  id: totrans-2672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: A few `AccessDecisionVoter` implementations come along with the Framework (`AuthenticatedVoter`,
    `Jsr250Voter`, `PreInvocationAuthorizationAdviceVoter`, `WebExpressionVoter`,
    `RoleVoter`, and so on). During the examination, eligible `AccessDecisionVoters`
    are polled on the authorization decision. Voters' eligibility depends on the voters'
    registration in the `AccessDecisionManager.decisionVoters` property. It also depends
    on the voters' supports methods.
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 `AccessDecisionVoter` 实现与框架一起提供（`AuthenticatedVoter`、`Jsr250Voter`、`PreInvocationAuthorizationAdviceVoter`、`WebExpressionVoter`、`RoleVoter`
    等）。在检查过程中，合格的 `AccessDecisionVoters` 将被轮询进行授权决策。投票者的合格性取决于其在 `AccessDecisionManager.decisionVoters`
    属性中的注册，也取决于其支持的方法。
- en: The `AccessDecisionManager` decides whether or not it should be thrown an `AccessDeniedException`
    based on its assessment of the votes. Each `AccessDecisionVoter` assesses the
    Secure Object against different criteria.
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccessDecisionManager` 根据其对票数的评估决定是否应该抛出 `AccessDeniedException`。每个 `AccessDecisionVoter`
    根据不同的标准评估安全对象。'
- en: '|   | *"The most commonly used AccessDecisionVoter provided with Spring Security
    is the simple RoleVoter, which treats configuration attributes as simple role
    names and votes to grant access if the user has been assigned that role"."* |
      |'
  id: totrans-2675
  prefs: []
  type: TYPE_TB
  zh: '|   | *"Spring Security 提供的最常用的 AccessDecisionVoter 是简单的 RoleVoter，它将配置属性视为简单的角色名称，并在用户被分配该角色时投票以授予访问权限。"*
    |   |'
- en: '|   | --*Spring Security reference* |'
  id: totrans-2676
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Spring Security reference* |'
- en: After invocation handling
  id: totrans-2677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用后处理
- en: 'There is only one `AfterInvocationManager` implementation in Spring Security:
    `AfterInvocationProviderManager`. This class aligns all the eligible `AfterInvocationProvider`
    implementations to give them the opportunity to alter the `SecurityInterceptor`
    result.'
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 中只有一个 `AfterInvocationManager` 实现：`AfterInvocationProviderManager`。这个类将所有合格的
    `AfterInvocationProvider` 实现对齐，让它们有机会改变 `SecurityInterceptor` 的结果。
- en: 'Similar to the `AccessDecisionManager` interface, the `AfterInvocationProvider`
    interface looks like this:'
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `AccessDecisionManager` 接口类似，`AfterInvocationProvider` 接口如下所示：
- en: '[PRE277]'
  id: totrans-2680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Expression-based access control
  id: totrans-2681
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于表达式的访问控制
- en: Since Spring Security 3, it is now possible to use Spring **Expression Language**
    (**EL**) in order to define the Web security and methods security.
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Spring Security 3 开始，现在可以使用 Spring **Expression Language** (**EL**) 来定义 Web
    安全和方法安全。
- en: '|   | *"Expressions are evaluated with a root object as part of the evaluation
    context. Spring Security uses specific classes for web and method security as
    the root object, in order to provide built-in expressions and access to values
    such as the current principal."* |   |'
  id: totrans-2683
  prefs: []
  type: TYPE_TB
  zh: '|   | *"表达式作为评估上下文的一部分与根对象一起进行评估。Spring Security 使用特定的类作为根对象，用于提供内置表达式和访问值，如当前主体。"*
    |   |'
- en: '|   | --*Spring Security reference* |'
  id: totrans-2684
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Spring Security reference* |'
- en: 'The base class for expression root objects is `SecurityExpressionRoot`. This
    abstract class gives access to the following methods and properties which represent
    the common built-in expressions:'
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式根对象的基类是 `SecurityExpressionRoot`。这个抽象类提供了以下方法和属性，代表了常见的内置表达式：
- en: '| Expression | Description |'
  id: totrans-2686
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2687
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `hasRole([role])` | Returns `true` if the current principal has the specified
    role. By default if the supplied role does not start with `ROLE_` it will be added.
    This can be customized by modifying the `defaultRolePrefix onDefaultWebSecurityExpressionHandler`.
    |'
  id: totrans-2688
  prefs: []
  type: TYPE_TB
  zh: '`hasRole([role])` | 如果当前主体具有指定的角色，则返回`true`。默认情况下，如果提供的角色不以`ROLE_`开头，则将其添加。这可以通过修改`DefaultWebSecurityExpressionHandler`上的`defaultRolePrefix`进行自定义。'
- en: '| `hasAnyRole([role1,role2])` | Returns `true` if the current principal has
    any of the supplied roles (given as a comma-separated list of strings). By default,
    if the supplied role does not start with `ROLE_` it will be added. This can be
    customized by modifying the `defaultRolePrefix` on `DefaultWebSecurityExpressionHandler`.
    |'
  id: totrans-2689
  prefs: []
  type: TYPE_TB
  zh: '`hasAnyRole([role1,role2])` | 如果当前主体具有所提供的角色中的任何一个（以逗号分隔的字符串列表形式给出）则返回`true`。默认情况下，如果提供的角色不以`ROLE_`开头，则将其添加。这可以通过修改`DefaultWebSecurityExpressionHandler`上的`defaultRolePrefix`进行自定义。'
- en: '| `hasAuthority([authority])` | Returns `true` if the current principal has
    the specified authority. |'
  id: totrans-2690
  prefs: []
  type: TYPE_TB
  zh: '`hasAuthority([authority])` | 如果当前主体具有指定的权限，则返回`true`。'
- en: '| `hasAnyAuthority([authority1,authority2])` | Returns `true` if the current
    principal has any of the supplied roles (given as a comma-separated list of strings).
    |'
  id: totrans-2691
  prefs: []
  type: TYPE_TB
  zh: '`hasAnyAuthority([authority1,authority2])` | 如果当前主体具有所提供的角色中的任何一个（以逗号分隔的字符串列表形式给出）则返回`true`。'
- en: '| `principal` | Allows direct access to the principal object representing the
    current user. |'
  id: totrans-2692
  prefs: []
  type: TYPE_TB
  zh: '`principal` | 允许直接访问表示当前用户的主体对象。'
- en: '| `authentication` | Allows direct access to the current `Authentication` object
    obtained from the `SecurityContext`. |'
  id: totrans-2693
  prefs: []
  type: TYPE_TB
  zh: '`authentication` | 允许直接访问从`SecurityContext`获取的当前`Authentication`对象。'
- en: '| `permitAll` | Always evaluates to `true.` |'
  id: totrans-2694
  prefs: []
  type: TYPE_TB
  zh: '`permitAll` | 始终评估为`true`。'
- en: '| `denyAll` | Always evaluates to `false.` |'
  id: totrans-2695
  prefs: []
  type: TYPE_TB
  zh: '`denyAll` | 始终评估为`false`。'
- en: '| `isAnonymous()` | Returns `true` if the current principal is an anonymous
    user. |'
  id: totrans-2696
  prefs: []
  type: TYPE_TB
  zh: '`isAnonymous()` | 如果当前主体是匿名用户，则返回`true`。'
- en: '| `isRememberMe()` | Returns `true` if the current principal is a remember-me
    user. |'
  id: totrans-2697
  prefs: []
  type: TYPE_TB
  zh: '`isRememberMe()` | 如果当前主体是记住我用户，则返回`true`。'
- en: '| `isAuthenticated()` | Returns `true` if the user is not anonymous. |'
  id: totrans-2698
  prefs: []
  type: TYPE_TB
  zh: '`isAuthenticated()` | 如果用户不是匿名用户，则返回`true`。'
- en: '| `isFullyAuthenticated()` | Returns `true` if the user is not an anonymous
    or a remember-me user. |'
  id: totrans-2699
  prefs: []
  type: TYPE_TB
  zh: '`isFullyAuthenticated()` | 如果用户不是匿名用户或记住我用户，则返回`true`。'
- en: '| `hasPermission(Object target, Object permission)` | Returns `true` if the
    user has access to the provided target for the given permission. For example,
    `hasPermission(domainObject, ''read'').` |'
  id: totrans-2700
  prefs: []
  type: TYPE_TB
  zh: '`hasPermission(Object target, Object permission)` | 如果用户对给定权限的提供的目标有访问权限，则返回`true`。例如，`hasPermission(domainObject,
    ''read'').`。'
- en: '| `hasPermission(Object targetId, String targetType, Object permission)` |
    Returns `true` if the user has access to the provided target for the given permission.
    For example, `hasPermission(1,''com.example.domain.Message'', ''read'')`. |'
  id: totrans-2701
  prefs: []
  type: TYPE_TB
  zh: '`hasPermission(Object targetId, String targetType, Object permission)` | 如果用户对给定权限的提供的目标有访问权限，则返回`true`。例如，`hasPermission(1,''com.example.domain.Message'',
    ''read'')`。'
- en: Web Security expressions
  id: totrans-2702
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Web安全表达式
- en: Using the Spring Security namespace, the `<http>` block has a `use-expression`
    attribute that defaults to true. This property makes the access attributes in
    the `intercept-url` elements expecting expressions as values.
  id: totrans-2703
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Security命名空间，`<http>`块有一个`use-expression`属性，默认为true。此属性使`intercept-url`元素中的访问属性期望表达式作为值。
- en: 'For Web security, the base class for expression root objects is `WebSecurityExpressionRoot`,
    which inherits the methods of `SecurityExpressionRoot` and provides one extra
    method: `hasIpAddress(…)`.'
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web安全，表达式根对象的基类是`WebSecurityExpressionRoot`，它继承了`SecurityExpressionRoot`的方法并提供了一个额外的方法：`hasIpAddress(…)`。
- en: Also, `WebSecurityExpressionRoot` exposes in the evaluation context the `HttpServletRequest`
    object accessible under the name `request`.
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`WebSecurityExpressionRoot`在评估上下文中公开了`HttpServletRequest`对象，可在名称为`request`下访问。
- en: If expressions are being used, a `WebExpressionVoter` will be added to the `AccessDecisionManager`.
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正在使用表达式，将向`AccessDecisionManager`添加`WebExpressionVoter`。
- en: Method security expressions
  id: totrans-2707
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方法安全表达式
- en: 'Expressions for methods security have been introduced with Spring Security
    3.0\. Four security annotations support the use of expressions: `@PreAuthorize`,
    `@PostAuthorize`, `@PreFilter`, and `@PostFilter`.'
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 3.0引入了用于方法安全的表达式。四个安全注释支持表达式的使用：`@PreAuthorize`，`@PostAuthorize`，`@PreFilter`和`@PostFilter`。
- en: Access control using @PreAuthorize and @PostAuthorize
  id: totrans-2709
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用@PreAuthorize和@PostAuthorize进行访问控制
- en: 'The use of these annotations has to be activated in the global security bean:'
  id: totrans-2710
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释的使用必须在全局安全bean中激活：
- en: '[PRE278]'
  id: totrans-2711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '`@PreAuthorize` is commonly used to allow or disallow methods'' invocations.'
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PreAuthorize`通常用于允许或禁止方法的调用。'
- en: 'We have implemented this annotation on the `MonitoringController` class:'
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`MonitoringController`类上实现了这个注释：
- en: '[PRE279]'
  id: totrans-2714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: The specified Expression `hasRole('ADMIN')` meant that the accesses to the controller
    will only be allowed to users within the role `ROLE_ADMIN`.
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的表达式`hasRole('ADMIN')`表示对控制器的访问仅允许具有`ROLE_ADMIN`角色的用户。
- en: Tip
  id: totrans-2716
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can note the automatic prefixing of `ROLE`_ that avoids a word repetition.
    This nice feature can be used in Expressions, both in web security (intercept-url:
    access attribute) and methods security.'
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以注意到`ROLE`_的自动前缀，避免了单词重复。这个很好的特性可以在表达式中使用，无论是在Web安全（intercept-url: access属性）还是方法安全中。'
- en: 'Let''s also consider this example from the Spring security reference documents:'
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也考虑一下Spring安全参考文档中的这个例子：
- en: '[PRE280]'
  id: totrans-2719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Here, a method argument is passed into the expression to decide whether the
    current user has the `admin` permission for the given contact.
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将方法参数传递到表达式中，以决定当前用户是否对给定联系人具有`admin`权限。
- en: The `@PostAuthorize` is less commonly used but can perform an access-control
    check after the method has been invoked. To access the `AccessDecisionManager`
    return value in the Expression, use the built-in name `returnObject`.
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PostAuthorize`较少使用，但可以在方法调用后执行访问控制检查。要在表达式中访问`AccessDecisionManager`的返回值，请使用内置名称`returnObject`。'
- en: Filtering collections using @PreFilter and @PostFilter
  id: totrans-2722
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用@PreFilter和@PostFilter进行集合过滤
- en: It is now possible to rely on Spring Security to filter collections (using expressions)
    that may be returned from a method invocation.
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以依靠Spring Security来过滤可能从方法调用返回的集合（使用表达式）。
- en: 'Consider this example from the reference document:'
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下参考文档中的这个例子：
- en: '[PRE281]'
  id: totrans-2725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: Spring Security iterates through the returned collection and removes any elements
    for which the supplied expression is false. The name filter object refers to the
    current object in the collection. You can also filter before the method call,
    using `@PreFilter`, though this is a less common requirement.
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security遍历返回的集合，并删除供应的表达式为false的任何元素。名称过滤对象指的是集合中的当前对象。您还可以在方法调用之前进行过滤，使用`@PreFilter`，尽管这是一个不太常见的要求。
- en: 'Actually, in order to use `hasPermission()` in expressions, it is necessary
    to explicitly configure a `PermissionEvaluator` in the application context. The
    following code is a example:'
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，为了在表达式中使用`hasPermission()`，需要在应用程序上下文中显式配置`PermissionEvaluator`。以下代码是一个例子：
- en: '[PRE282]'
  id: totrans-2728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'With `myPermissionEvaluator` being a `PermissionEvaluator` implementation:'
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: '`myPermissionEvaluator`是`PermissionEvaluator`的实现：'
- en: '[PRE283]'
  id: totrans-2730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: JSR-250 and legacy method security
  id: totrans-2731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSR-250和传统的方法安全
- en: 'JSR-250 is a Java specification request that has been released in 2006\. It
    specifies a set of annotations to address common semantic patterns. Among these
    annotations, some relate to security:'
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: JSR-250是一个Java规范请求，已于2006年发布。它指定了一组注解来解决常见的语义模式。在这些注解中，有些与安全有关：
- en: '| Annotation name | Description |'
  id: totrans-2733
  prefs: []
  type: TYPE_TB
  zh: '| 注解名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2734
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `RolesAllowed` | Specifies the security roles permitted to access method(s)
    in an application |'
  id: totrans-2735
  prefs: []
  type: TYPE_TB
  zh: '| `RolesAllowed` | 指定允许访问应用程序中方法的安全角色 |'
- en: '| `PermitAll` | Specifies that all security roles are permitted to access the
    annotated method, or all methods in the annotated class |'
  id: totrans-2736
  prefs: []
  type: TYPE_TB
  zh: '| `PermitAll` | 指定所有安全角色都可以访问被注解的方法，或者注解类中的所有方法 |'
- en: '| `DenyAll` | Specifies that no security roles are allowed to invoke the specified
    method(s) |'
  id: totrans-2737
  prefs: []
  type: TYPE_TB
  zh: '| `DenyAll` | 指定不允许任何安全角色调用指定的方法 |'
- en: '| `DeclareRoles` | Used to specify the security roles by the application |'
  id: totrans-2738
  prefs: []
  type: TYPE_TB
  zh: '| `DeclareRoles` | 用于指定应用程序的安全角色 |'
- en: 'Spring Security supports these annotations but this support has to be activated:'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security支持这些注解，但必须激活此支持：
- en: '[PRE284]'
  id: totrans-2740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Spring Security also supports its legacy `@Secured` annotations, if enabled:'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security还支持其传统的`@Secured`注解，如果启用：
- en: '[PRE285]'
  id: totrans-2742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: There is more…
  id: totrans-2743
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Domain Object Security (ACLs)
  id: totrans-2744
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 领域对象安全（ACL）
- en: 'Some more complex applications may require authorization decisions to be taken,
    depending upon the actual domain object that is subject to method invocation:'
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更复杂的应用程序可能需要根据实际的领域对象对授权决策进行处理，这些对象受到方法调用的影响：
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls)'
  id: totrans-2746
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls)'
- en: Spring EL
  id: totrans-2747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring EL
- en: 'You might need to find extra information about the Spring EL:'
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要查找有关Spring EL的额外信息：
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html)'
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html)'
- en: The Spring Security reference
  id: totrans-2750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring安全参考
- en: The Spring and Security reference and the Spring JavaDoc have been the main
    source of information for this recipe. We hope you have enjoyed our information
    selection, analysis, and point of view.
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: Spring和Security参考以及Spring JavaDoc一直是本文的主要信息来源。我们希望您喜欢我们的信息选择、分析和观点。
- en: '[http://docs.spring.io/spring-security/site/docs/current/apidocs/](http://docs.spring.io/spring-security/site/docs/current/apidocs/)'
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/current/apidocs/](http://docs.spring.io/spring-security/site/docs/current/apidocs/)'
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle)'
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle)'
- en: See also
  id: totrans-2754
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Hierarchical Roles and role nesting appear to be recurring requirements:'
  id: totrans-2755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层次角色和角色嵌套似乎是经常出现的要求：
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authz-hierarchical-roles](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authz-hierarchical-roles)'
  id: totrans-2756
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authz-hierarchical-roles](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authz-hierarchical-roles)'
- en: Chapter 6. Implementing HATEOAS
  id: totrans-2757
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。实施HATEOAS
- en: 'This chapter contains the following recipes:'
  id: totrans-2758
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下配方：
- en: Turning DTOs into Spring HATEOAS resources
  id: totrans-2759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将DTO转换为Spring HATEOAS资源
- en: Building links for a Hypermedia-driven API
  id: totrans-2760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为超媒体驱动的API构建链接
- en: Choosing a strategy to expose JPA entities
  id: totrans-2761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择暴露JPA实体的策略
- en: Retrieving data from a third-party API with OAuth
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OAuth从第三方API检索数据
- en: Introduction
  id: totrans-2763
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: What is HATEOAS? If you have never seen this word before, it can appear to be
    difficult to pronounce. Some pronounce it hate-ee-os; others say hate O-A-S. The
    important point is to remember that this abbreviation stands for **Hypermedia
    as the Engine of Application State** (**HATEOAS**). At the very least, you should
    remember Hypermedia. Hypermedia as a resource's capability to embed nodes that
    target external resources. Being connected to other resources, a hypermedia resource
    is also constrained to its domain, as it can't technically develop (as part of
    itself) other resources' domains.
  id: totrans-2764
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是HATEOAS？如果你以前从未见过这个词，它可能很难发音。有些人发音为hate-ee-os；其他人说hate O-A-S。重要的是要记住这个缩写代表**超媒体作为应用状态的引擎**（**HATEOAS**）。至少，你应该记住超媒体。超媒体作为资源嵌入节点，指向外部资源的能力。作为与其他资源连接的资源，超媒体资源也受到其领域的限制，因为它在技术上不能开发其他资源的领域（作为其一部分）。
- en: Think of it as **Wikipedia**. If we create a page whose sections are not self
    contained in the page title (domain), and if one of these sections is already
    covered in an external page, there are few chances that this situation will be
    raised by an administrator.
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: 把它想象成**维基百科**。如果我们创建一个页面，其各个部分不是在页面标题（域）中自包含的，如果其中一个部分已经在外部页面中涵盖，那么管理员几乎不可能提出这种情况。
- en: HATEOAS is a constraint applicable to a REST architecture. It imposes on its
    resources a domain consistency, and at the same time, it imposes an explicit self
    documentation that the owner has to maintained for the sake of the whole cohesion.
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
  zh: HATEOAS是适用于REST架构的约束。它对其资源施加域一致性，并同时对所有权者施加明确的自我文档化，以维护整体凝聚力。
- en: The Richardson Maturity Model
  id: totrans-2767
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Richardson成熟度模型
- en: 'The Richardson Maturity Model (by Leonard Richardson) provides a way to grade
    and qualify a REST API by its level of REST constraints:'
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: Richardson成熟度模型（Leonard Richardson编写）提供了一种通过REST约束级别对REST API进行评分和资格认定的方法：
- en: '![The Richardson Maturity Model](img/image00882.jpeg)'
  id: totrans-2769
  prefs: []
  type: TYPE_IMG
  zh: '![Richardson成熟度模型](img/image00882.jpeg)'
- en: The more REST-compliant an API is, the higher its grade.
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: API越符合REST标准，评分越高。
- en: 'The initial state in this model is **Level 0**: **The Swamp of POX**. Here,
    the protocol (usually HTTP) is only used for its transport capabilities (not for
    its state description features). Also, there are no resource-specific URIs here,
    just one endpoint is used for one method (normally, `POST` in HTTP).'
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型中的初始状态是**Level 0**：**POX的沼泽**。在这里，协议（通常是HTTP）仅用于其传输功能（而不是用于其状态描述功能）。此外，这里没有特定于资源的URI，只使用一个端点用于一个方法（通常是HTTP中的`POST`）。
- en: '**Level 1: Resources** is characterized by the implementation of resource-specific
    URIs. The resource identifiers can be found in URIs. However, still, only one
    method of the protocol is used (POST for HTTP again).'
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: '**Level 1: 资源**的特征是实现特定于资源的URI。资源标识符可以在URI中找到。然而，仍然只使用协议的一个方法（再次是HTTP的POST）。'
- en: '**Level 2: HTTP Verbs** reflects an improved use of the protocol properties.
    For HTTP, this actually means that the API is making use of the HTTP methods for
    their purpose (`GET` to read, `POST` to create, `PUT` to edit, `DELETE` to delete,
    and so on). Also, the API provides response codes that reliably inform the user
    about the operation state.'
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: '**Level 2: HTTP动词**反映了对协议属性的改进使用。对于HTTP，这实际上意味着API正在使用HTTP方法来实现其目的（`GET`用于读取，`POST`用于创建，`PUT`用于编辑，`DELETE`用于删除等）。此外，API提供可靠地通知用户有关操作状态的响应代码。'
- en: '**Level 3: Hypermedia Controls** is the highest level in this model. It indicates
    the use of HATEOAS, which provides API-discovery features to the client.'
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
  zh: '**Level 3: 超媒体控制**是该模型中的最高级别。它指示使用HATEOAS，为客户端提供API发现功能。'
- en: 'You can read more on the Richardson Maturity Model on Martin Fowler''s blog
    at:'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Martin Fowler的博客上阅读有关Richardson成熟度模型的更多信息：
- en: '[http://martinfowler.com/articles/richardsonMaturityModel.html](http://martinfowler.com/articles/richardsonMaturityModel.html)'
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://martinfowler.com/articles/richardsonMaturityModel.html](http://martinfowler.com/articles/richardsonMaturityModel.html)'
- en: Turning DTOs into Spring HATEOAS resources
  id: totrans-2777
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将DTO转换为Spring HATEOAS资源
- en: This recipe presents how to create Spring HATEOAS resources. Even if the emphasis
    here is on one specific resource—`IndexResource` (in place of the former `IndexOverviewDTO`),
    feel free to browse **cloudstreetmarket-api** and **cloudstreetmarket-core** to
    discover more changes.
  id: totrans-2778
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程介绍了如何创建Spring HATEOAS资源。即使这里的重点是一个特定资源——`IndexResource`（代替以前的`IndexOverviewDTO`），也可以随意浏览**cloudstreetmarket-api**和**cloudstreetmarket-core**以发现更多更改。
- en: The HATEOAS principle has been applied at this stage to all the resources that
    make the core of our business, which strongly reflects the financial data structure
    of Yahoo! (indices, quotes, products, historical data, graphs, and so on).
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
  zh: HATEOAS原则已应用于构成我们业务核心的所有资源，这在很大程度上反映了Yahoo!的财务数据结构（指数、报价、产品、历史数据、图表等）。
- en: How to do it…
  id: totrans-2780
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    `v6.x.x` branch. Then, run a `maven clean install` command on the **cloudstreetmarket-parent**
    module (right-click on the **Maven Clean** menu under **Run as…** and then again
    on **Maven Install** under **Run as…**) followed by a click on **Maven Update
    Project** menu to synchronize Eclipse with the Maven configuration (right-click
    on the module and then navigate to **Maven** | **Update Project…**.)
  id: totrans-2781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse的**Git Perspective**中，检出`v6.x.x`分支的最新版本。然后，在**cloudstreetmarket-parent**模块上运行`maven
    clean install`命令（右键单击**Run as…**下的**Maven Clean**菜单，然后再次单击**Run as…**下的**Maven
    Install**菜单），然后单击**Maven Update Project**菜单以将Eclipse与Maven配置同步（右键单击模块，然后导航到**Maven**
    | **Update Project…**）。
- en: Note
  id: totrans-2782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This branch includes SQL scripts that prepopulate the database with real financial
    data coming from Yahoo!.
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
  zh: 此分支包括使用来自Yahoo!的真实财务数据预填充数据库的SQL脚本。
- en: 'Among the pulled changes, a new `/app` configuration directory shows up at
    the same level as `cloudstreetmarket-parent` and `zipcloud-parent`. This `/app`
    directory has to be copied to your system''s home directory:'
  id: totrans-2784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拉取的更改中，一个新的`/app`配置目录出现在与`cloudstreetmarket-parent`和`zipcloud-parent`相同级别。必须将此`/app`目录复制到您系统的主目录：
- en: Copy it to `C:\Users\{system.username}\app` if you are on Windows
  id: totrans-2785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其复制到`C:\Users\{system.username}\app`，如果您使用的是Windows
- en: Copy it to `/home/usr/{system.username}/app` if you are on Linux
  id: totrans-2786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是Linux，请将其复制到`/home/usr/{system.username}/app`
- en: If you are on Mac OS X, copy it at `/Users/{system.username}/app`
  id: totrans-2787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是Mac OS X，请将其复制到`/Users/{system.username}/app`
- en: Spring HATEOAS comes with the following dependency. This dependency has been
    added to **cloudstreetmarket-parent**, **cloudstreetmarket-core**, `and` **cloudstreetmarket-api**`:`
  id: totrans-2788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring HATEOAS附带以下依赖项。此依赖项已添加到**cloudstreetmarket-parent**、**cloudstreetmarket-core**和**cloudstreetmarket-api**`：`
- en: '[PRE286]'
  id: totrans-2789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: As the recipe title suggests, the goal is to get rid of the existing DTOs that
    were exposed with the REST API. We have, for now, removed IndexOverviewDTO, MarketOverviewDTO,
    ProductOverviewDTO, and StockProductOverviewDTO.
  id: totrans-2790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如教程标题所示，目标是摆脱以前使用REST API公开的现有DTO。目前，我们已删除了IndexOverviewDTO、MarketOverviewDTO、ProductOverviewDTO和StockProductOverviewDTO。
- en: 'Those DTOs have been replaced by these classes: IndexResource, StockProductResource,
    ChartResource, ExchangeResource, IndustryResource, and MarketResource.'
  id: totrans-2791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些DTO已被这些类替换：IndexResource，StockProductResource，ChartResource，ExchangeResource，IndustryResource和MarketResource。
- en: 'As shown with IndexResource, which is presented as follows, all these new classes
    inherit the Spring HATEOAS Resource class:'
  id: totrans-2792
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如所示的IndexResource，它如下所示，所有这些新类都继承了Spring HATEOAS Resource类：
- en: '[PRE287]'
  id: totrans-2793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: As you can see, with IndexResource, resources are created from JPA entities
    (here, Index.java). These entities are stored in the Resource supertype under
    the content property name.
  id: totrans-2794
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您所看到的，使用IndexResource，资源是从JPA实体（这里是Index.java）创建的。这些实体存储在资源超类型中的content属性名称下。
- en: 'We have transformed the JPA entities, abstracting their @Id in an implementation
    of the Identifiable interface:'
  id: totrans-2795
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经将JPA实体转换为实现`Identifiable`接口的抽象类：
- en: '[PRE288]'
  id: totrans-2796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'Here are the details of the ProvidedId class, which is one of our Identifiable
    implementations:'
  id: totrans-2797
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是ProvidedId类的详细信息，它是我们可识别实现中的一个：
- en: '[PRE289]'
  id: totrans-2798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: How it works...
  id: totrans-2799
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: One new Spring dependency, a few new resource objects (Resource subclasses),
    and finally some modifications to our Entities so that they implement the `Identifiable`
    interface. Let's debrief all this in detail.
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的Spring依赖项，一些新的资源对象（Resource子类），最后对我们的实体进行一些修改，以便它们实现`Identifiable`接口。让我们详细讨论所有这些。
- en: Spring HATEOAS resources
  id: totrans-2801
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring HATEOAS资源
- en: As introduced at the beginning of this chapter, HATEOAS is about links. It is
    fair to say that we can expect, as part of the Framework, an existing Type that
    supports and standardizes the representation of links.
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在本章开头介绍的，HATEOAS是关于链接的。可以说，作为框架的一部分，我们可以期望存在一种现有类型来支持和标准化链接的表示。
- en: 'This is the role of the `ResourceSupport` class (part of Spring HATEOAS): to
    support the collection and management of links attached to a resource.'
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`ResourceSupport`类（Spring HATEOAS的一部分）的作用：支持附加到资源的链接的收集和管理。
- en: Alternatively, a REST resource is also a content. The Framework also offers
    a `Resource` class that already inherits `ResourceSupport`.
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，REST资源也是一种内容。框架还提供了一个`Resource`类，它已经继承了`ResourceSupport`。
- en: 'To summarize, using Spring HATEOAS, we can decide to model our resource objects
    (`IndexResource`, `StockProductResource`, and so on) in two different ways:'
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，使用Spring HATEOAS，我们可以决定以两种不同的方式对我们的资源对象（`IndexResource`，`StockProductResource`等）进行建模：
- en: We can model them either by making them inherit `ResourceSupport` directly.
    By doing so, we have to manage the resource-content as part of the wrapper object
    by ourselves. The content here is out of control for the Framework.
  id: totrans-2806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过直接让它们继承`ResourceSupport`来对它们进行建模。这样做的话，我们必须自己管理包装对象的资源内容。这里的内容对于框架来说是不受控制的。
- en: We can also model them by making them inherit the generic `Resource<T>` class
    whose Type `T` corresponds to the Type of the `POJO` content for the resource.
    This is the strategy we have chosen. The Framework offers goodies for our resource-object
    (`Inde3xResource`) on content binding, link creation, and even at the controller's
    level. We will see all this soon.
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以通过让它们继承泛型`Resource<T>`类来对它们进行建模，其中类型`T`对应于资源的`POJO`内容的类型。这是我们选择的策略。框架为我们的资源对象（`Inde3xResource`）提供了内容绑定、链接创建，甚至在控制器级别也是如此。我们很快就会看到这一切。
- en: The ResourceSupport class
  id: totrans-2808
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ResourceSupport类
- en: 'The `ResourceSupport` class is an object that implements `Identifiable<Link>`:'
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceSupport`类是一个实现`Identifiable<Link>`的对象：'
- en: '[PRE290]'
  id: totrans-2810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'The following is a sample from the `ResourceSupport` JavaDoc, which will provide
    you with an insight on its constructors and methods:'
  id: totrans-2811
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`ResourceSupport` JavaDoc中的示例，它将为您提供有关其构造函数和方法的见解：
- en: '| Constructors | Description |'
  id: totrans-2812
  prefs: []
  type: TYPE_TB
  zh: 构造函数
- en: '| --- | --- |'
  id: totrans-2813
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ResourceSupport()` | This creates a new `ResourceSupport` class |'
  id: totrans-2814
  prefs: []
  type: TYPE_TB
  zh: '| `ResourceSupport()` | 这将创建一个新的`ResourceSupport`类 |'
- en: '| Methods | Description |'
  id: totrans-2815
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2816
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Void add(Iterable<Link> links)` | This adds all the given links to the resource
    |'
  id: totrans-2817
  prefs: []
  type: TYPE_TB
  zh: '| `Void add(Iterable<Link> links)` | 这将所有给定的链接添加到资源中 |'
- en: '| `Void add(Link... links)` | This adds all the given links to the resource
    |'
  id: totrans-2818
  prefs: []
  type: TYPE_TB
  zh: '| `Void add(Link... links)` | 这将所有给定的链接添加到资源中 |'
- en: '| `Void add(Link link)` | This adds the given link to the resource |'
  id: totrans-2819
  prefs: []
  type: TYPE_TB
  zh: '| `Void add(Link link)` | 这将添加给定的链接到资源中 |'
- en: '| `Link getId()` | This returns the link with `rel` of `Link.REL_SELF` |'
  id: totrans-2820
  prefs: []
  type: TYPE_TB
  zh: '| `Link getId()` | 这将返回具有`Link.REL_SELF`的`rel`的链接 |'
- en: '| `Link getLink(String rel)` | This returns the link with the given `rel` |'
  id: totrans-2821
  prefs: []
  type: TYPE_TB
  zh: '| `Link getLink(String rel)` | 这将返回具有给定`rel`的链接 |'
- en: '| `List<Link> getLinks()` | This returns all the links contained in this resource
    |'
  id: totrans-2822
  prefs: []
  type: TYPE_TB
  zh: '| `List<Link> getLinks()` | 这将返回资源中包含的所有链接 |'
- en: '| `boolean hasLink(String rel)` | This returns whether the resource contains
    a link with the given `rel` |'
  id: totrans-2823
  prefs: []
  type: TYPE_TB
  zh: '| `boolean hasLink(String rel)` | 这将返回资源是否包含具有给定`rel`的链接 |'
- en: '| `boolean hasLinks()` | This returns whether the resource contains links at
    all |'
  id: totrans-2824
  prefs: []
  type: TYPE_TB
  zh: '| `boolean hasLinks()` | 这将返回资源是否包含链接 |'
- en: '| `boolean removeLinks()` | This removes all the links added to the resource
    so far |'
  id: totrans-2825
  prefs: []
  type: TYPE_TB
  zh: '| `boolean removeLinks()` | 这将删除到目前为止添加到资源中的所有链接 |'
- en: '| `Boolean equals(Object obj)` |   |'
  id: totrans-2826
  prefs: []
  type: TYPE_TB
  zh: '| `Boolean equals(Object obj)` |   |'
- en: '| `int hashCode()` |   |'
  id: totrans-2827
  prefs: []
  type: TYPE_TB
  zh: '| `int hashCode()` |   |'
- en: '| `String toString()` |   |'
  id: totrans-2828
  prefs: []
  type: TYPE_TB
  zh: '| `String toString()` |   |'
- en: As introduced earlier, this class is all about links! We will see that Spring
    HATEOAS provides a small machinery around links.
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前介绍的，这个类与链接有关！我们将看到Spring HATEOAS提供了围绕链接的一些小机制。
- en: The Resource class
  id: totrans-2830
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 资源类
- en: 'The `Resource` class is a wrapper for a `POJO`. The `POJO` is stored in a `content`
    property of this class. A `Resource` class natively extends `ResourceSupport`:'
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resource`类是`POJO`的包装器。`POJO`存储在这个类的`content`属性中。`Resource`类本质上扩展了`ResourceSupport`：'
- en: '[PRE291]'
  id: totrans-2832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'Here is a sample from the `Resource` JavaDoc that provides an insight into
    its constructors and methods:'
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Resource` JavaDoc中的示例，它提供了有关其构造函数和方法的见解：
- en: '| Constructors | Description |'
  id: totrans-2834
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2835
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Resource(T content, Iterable<Link> links)` | This creates a new resource
    with the given content and links |'
  id: totrans-2836
  prefs: []
  type: TYPE_TB
  zh: '| `Resource(T content, Iterable<Link> links)` | 这将使用给定的内容和链接创建一个新的资源 |'
- en: '| `Resource(T content, Link... links)` | This creates a new resource with the
    given content and links (optional) |'
  id: totrans-2837
  prefs: []
  type: TYPE_TB
  zh: '| `Resource(T content, Link... links)` | 这将使用给定的内容和链接（可选）创建一个新资源 |'
- en: '| Methods | Description |'
  id: totrans-2838
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2839
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `TgetContent()` | This returns the underlying entity |'
  id: totrans-2840
  prefs: []
  type: TYPE_TB
  zh: '| `TgetContent()` | 这将返回底层实体 |'
- en: '| `void add(Iterable<Link> links)` | This adds all the given links to the resource
    |'
  id: totrans-2841
  prefs: []
  type: TYPE_TB
  zh: '| `void add(Iterable<Link> links)` | 这将所有给定的链接添加到资源中 |'
- en: '| `void add(Link... links)` | This adds all the given links to the resource
    |'
  id: totrans-2842
  prefs: []
  type: TYPE_TB
  zh: '| `void add(Link... links)` | 这将所有给定的链接添加到资源中 |'
- en: '| `void add(Link link)` | This adds the given link to the resource |'
  id: totrans-2843
  prefs: []
  type: TYPE_TB
  zh: '| `void add(Link link)` | 这将给定的链接添加到资源中 |'
- en: '| `Link getId()` | This returns the link with a `rel` of `Link.REL_SELF` |'
  id: totrans-2844
  prefs: []
  type: TYPE_TB
  zh: '| `Link getId()` | 这将返回具有`Link.REL_SELF`的`rel`的链接 |'
- en: '| `Link getLink(String rel)` | This returns the link with the given `rel` |'
  id: totrans-2845
  prefs: []
  type: TYPE_TB
  zh: '| `Link getLink(String rel)` | 这将返回具有给定`rel`的链接 |'
- en: '| `List<Link> getLinks()` | This returns all the links contained in this resource
    |'
  id: totrans-2846
  prefs: []
  type: TYPE_TB
  zh: '| `List<Link> getLinks()` | 这将返回此资源中包含的所有链接 |'
- en: '| `boolean hasLink(String rel)` | This returns whether the resource contains
    a link with the given `rel` |'
  id: totrans-2847
  prefs: []
  type: TYPE_TB
  zh: '| `boolean hasLink(String rel)` | 这将返回资源是否包含具有给定`rel`的链接 |'
- en: '| `boolean hasLinks()` | This returns whether the resource contains links at
    all |'
  id: totrans-2848
  prefs: []
  type: TYPE_TB
  zh: '| `boolean hasLinks()` | 这将返回资源是否包含任何链接 |'
- en: '| `boolean removeLinks()` | This removes all the links added to the resource
    so far |'
  id: totrans-2849
  prefs: []
  type: TYPE_TB
  zh: '| `boolean removeLinks()` | 这将删除到目前为止添加到资源中的所有链接 |'
- en: '| `Boolean equals(Object obj)` |   |'
  id: totrans-2850
  prefs: []
  type: TYPE_TB
  zh: '| `Boolean equals(Object obj)` |   |'
- en: '| `int hashCode()` |   |'
  id: totrans-2851
  prefs: []
  type: TYPE_TB
  zh: '| `int hashCode()` |   |'
- en: '| `String toString()` |   |'
  id: totrans-2852
  prefs: []
  type: TYPE_TB
  zh: '| `String toString()` |   |'
- en: Two handy constructors, one getter for the content, and all the link-related
    helpers, this is what the Resource class is made of.
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
  zh: 两个方便的构造函数，一个用于获取内容的getter，以及所有与链接相关的辅助函数，这就是Resource类的组成部分。
- en: The Identifiable interface
  id: totrans-2854
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可识别的接口
- en: The `Identifiable` interface plays a central role in Spring HATEOAS, since the
    key classes `Resource`, `ResourceSupport`, `Resources`, and `PagedResources` classes,
    which we'll present later on, are all `Identifiable` implementations. We will
    present later on, all these key classes.
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
  zh: '`Identifiable`接口在Spring HATEOAS中扮演着重要角色，因为关键类`Resource`、`ResourceSupport`、`Resources`和`PagedResources`类，我们稍后将介绍的这些类都是`Identifiable`的实现。稍后我们将介绍所有这些关键类。'
- en: 'The `Identifiable` interface is a Spring HATEOAS one-method interface (a generic
    interface) that is used to define an `Id` in an object:'
  id: totrans-2856
  prefs: []
  type: TYPE_NORMAL
  zh: '`Identifiable`接口是Spring HATEOAS的一个单方法接口（通用接口），用于在对象中定义`Id`：'
- en: '[PRE292]'
  id: totrans-2857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: Consequently, the Framework uses this method to retrieve the ID with very few
    requirements about the nature of the passed-in object. With the capability of
    a class to implement several interfaces, it is costless to add such a qualifier
    to an object. Also, the contract of this interface is minimal.
  id: totrans-2858
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，框架使用这种方法来检索ID，对传入对象的性质几乎没有要求。由于一个类可以实现多个接口的能力，向对象添加这样的限定符是没有成本的。此外，这个接口的契约是最小的。
- en: The most important use of this interface (and method) by the framework is to
    build links out of a `Resource` object. Have a look at the `slash` method of `LinkBuilderSupport`.
    You will note that, if `ID` is not an instance of `Identifiable` (this is what
    it usually ends up with), the `Link` is appended with the `toString()` representation
    of the `ID` type.
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
  zh: 框架对这个接口（和方法）最重要的用途是从`Resource`对象构建链接。看一下`LinkBuilderSupport`的`slash`方法。您会注意到，如果`ID`不是`Identifiable`的实例（这通常是最终结果），则`Link`将附加到`ID`类型的`toString()`表示。
- en: Tip
  id: totrans-2860
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Bear this behavior in mind if you are thinking of implementing custom ID types.
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您考虑实现自定义ID类型，请记住这种行为。
- en: Abstracting the Entities' @Id
  id: totrans-2862
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽象化实体的@Id
- en: If you plan to stick with Spring HATEOAS without extending it to Spring Data
    REST, it is probably not an absolute necessity to decouple the base entities from
    their `@Id`. At least not in the way we did it.
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划坚持使用Spring HATEOAS而不将其扩展到Spring Data REST，那么将基本实体与它们的`@Id`解耦可能并不是绝对必要的。至少不是我们所做的方式。
- en: Here, this practice comes from Oliver Gierke, in his `Spring RestBucks` application.
    Spring RestBucks is a showcase application for several modern Spring REST features.
  id: totrans-2864
  prefs: []
  type: TYPE_NORMAL
  zh: 这种做法来自Oliver Gierke，在他的`Spring RestBucks`应用程序中。Spring RestBucks是一个展示现代Spring
    REST功能的示例应用程序。
- en: Note
  id: totrans-2865
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Oliver Gierke is the Spring Data lead developer at Pivotal Software, Inc.. He
    has also been involved in Spring HATEOAS. Spring Data is an amazing project and
    product. We can trust Oliver Gierke for his vision and decisions.
  id: totrans-2866
  prefs: []
  type: TYPE_NORMAL
  zh: Oliver Gierke是Pivotal Software, Inc.的Spring Data首席开发人员。他还参与了Spring HATEOAS。Spring
    Data是一个令人惊叹的项目和产品。我们可以信任Oliver Gierke的愿景和决定。
- en: In his `AsbtractId` implementation, O. Gierke defines the `Id` property as private
    and annotates it as `@JsonIgnore`. He drives us toward the nonexposure of the
    `Id` attribute as part of the resource-content. In REST, the ID of a resource
    should be its URI.
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的`AsbtractId`实现中，O. Gierke将`Id`属性定义为私有，并将其注释为`@JsonIgnore`。他引导我们不将`Id`属性作为资源内容的一部分暴露出来。在REST中，资源的ID应该是其URI。
- en: If you have the chance to take a look at Spring Data REST, this approach fully
    makes sense as part of the Framework, which strongly correlates REST resources
    to Spring Data repositories.
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有机会查看Spring Data REST，这种方法完全符合框架的一部分，它将REST资源与Spring Data存储库强烈相关联。
- en: We have made the choice of not covering Spring Data REST as part of this book.
    However, not exposing entity IDs is not critical for our application. For these
    reasons, and also because we wish to maintain conventionality on this point in
    regard to the [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing CRUD
    Operations and Validations"), *Developing CRUD Operations and Validati* *ons*,
    IDs will be exposed as resource-attributes.
  id: totrans-2869
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择不在本书的范围内涵盖Spring Data REST。然而，不暴露实体ID对我们的应用程序并不是关键的。出于这些原因，也因为我们希望在这一点上保持与[第7章](part0113.xhtml#aid-3BOFI1
    "第7章。开发CRUD操作和验证")“开发CRUD操作和验证”一致，ID将作为资源属性公开。
- en: There's more…
  id: totrans-2870
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If our HATEOAS introduction wasn''t clear enough to give you an idea of the
    principle, do read this presentation from Pivotal ([Spring.io](http://Spring.io))
    at:'
  id: totrans-2871
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的HATEOAS介绍还不够清晰，无法让您了解原则，请阅读Pivotal（[Spring.io](http://Spring.io)）的这个演示：
- en: '[https://spring.io/understanding/HATEOAS](https://spring.io/understanding/HATEOAS)'
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://spring.io/understanding/HATEOAS](https://spring.io/understanding/HATEOAS)'
- en: See also
  id: totrans-2873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: We recommend that you visit O. Gierke's Spring REST showcase application, which
    presents both Spring HATEOAS in practice coupled or not to Spring Data REST, at
    [https://github.com/olivergierke/spring-restbucks](https://github.com/olivergierke/spring-restbucks).
  id: totrans-2874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们建议您访问O. Gierke的Spring REST展示应用，该应用展示了Spring HATEOAS的实践，无论是否与Spring Data REST配合使用，网址为[https://github.com/olivergierke/spring-restbucks](https://github.com/olivergierke/spring-restbucks)。
- en: You can find a few discussions about ID exposure at [https://github.com/spring-projects/spring-hateoas/issues/66](https://github.com/spring-projects/spring-hateoas/issues/66).
  id: totrans-2875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/spring-projects/spring-hateoas/issues/66](https://github.com/spring-projects/spring-hateoas/issues/66)找到一些关于ID暴露的讨论。
- en: We advise you to read more about Spring Data REST since we have only introduced
    a little bit of it. Spring Data REST builds REST resources on top of Spring Data
    repositories and automatically publishes their CRUD services. You can learn more
    about it at [http://docs.spring.io/spring-data/rest/docs/current/reference/html](http://docs.spring.io/spring-data/rest/docs/current/reference/html).
  id: totrans-2876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们建议您阅读更多关于Spring Data REST的内容，因为我们只是介绍了一点点。Spring Data REST在Spring Data存储库的基础上构建REST资源，并自动发布它们的CRUD服务。您可以在[http://docs.spring.io/spring-data/rest/docs/current/reference/html](http://docs.spring.io/spring-data/rest/docs/current/reference/html)了解更多信息。
- en: Building links for a hypermedia-driven API
  id: totrans-2877
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为超媒体驱动的API构建链接
- en: In this recipe, we will focus on how to create links with Spring HATEOAS and
    how to bind them to resources.
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将重点介绍如何使用Spring HATEOAS创建链接以及如何将它们绑定到资源上。
- en: We will detail the resource assemblers, which are reusable transition components
    used to pass from entities (such as `Index`) to their resources (`IndexResource`).
    These components also provide support for link creation.
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍资源装配器，这些是可重用的过渡组件，用于从实体（如`Index`）到它们的资源（`IndexResource`）的转换。这些组件还提供了链接创建的支持。
- en: How to do it…
  id: totrans-2880
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The created resources (IndexResource, ChartResource, ExchangeResource, IndustryResource,
    MarketResource, and so on) are created from their associated Entity (Index, ChartIndex,
    ChartStock, Exchange, Industry, Market, and so on) using resource assemblers registered
    as `@Component`:'
  id: totrans-2881
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的资源（IndexResource，ChartResource，ExchangeResource，IndustryResource，MarketResource等）是从它们关联的实体（Index，ChartIndex，ChartStock，Exchange，Industry，Market等）使用资源装配器注册为`@Component`创建的：
- en: '[PRE293]'
  id: totrans-2882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: Tip
  id: totrans-2883
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We've used these assemblers to generate the links that come with a resource.
    They use static methods from `ControllerLinkBuilder` (`linkTo` and `methodOn`)
    and explicit labels defined as constants in the resources themselves (`EXCHANGE`,
    `CHART`, and `COMPONENTS`).
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这些装配器来生成资源的链接。它们使用`ControllerLinkBuilder`的静态方法（`linkTo`和`methodOn`）和在资源本身中定义为常量的显式标签（`EXCHANGE`，`CHART`和`COMPONENTS`）。
- en: We have altered our previous SwaggerConfig class so that this class can be used
    for annotation-based configuration in other domains that Swagger. This class has
    been renamed to AnnotationConfig.
  id: totrans-2885
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经修改了之前的SwaggerConfig类，使得这个类可以用于Swagger以外的其他领域的基于注解的配置。这个类已经改名为AnnotationConfig。
- en: 'We have also added to this AnnotationConfig class the following two annotations:'
  id: totrans-2886
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还在AnnotationConfig类中添加了以下两个注解：
- en: '[PRE294]'
  id: totrans-2887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: (`Because these two annotations don't have an XML equivalent yet`).
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: （因为这两个注解目前还没有XML等效项）。
- en: All the targeted controllers in these converters have been annotated with the
    @ExposesResourceFor annotation (on the class level).
  id: totrans-2889
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些转换器中的所有目标控制器都已经在类级别上用@ExposesResourceFor注解进行了注释。
- en: 'These controllers now also return the created resources or pages of resources:'
  id: totrans-2890
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些控制器现在也返回创建的资源或资源页面：
- en: '[PRE295]'
  id: totrans-2891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: 'Here, we have made CloudstreetApiWCI generic. In this way, CloudstreetApiWCI
    can have a generic PagedResourcesAssembler @Autowired:'
  id: totrans-2892
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们使CloudstreetApiWCI成为通用的。这样，CloudstreetApiWCI可以有一个通用的PagedResourcesAssembler
    @Autowired：
- en: '[PRE296]'
  id: totrans-2893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: Tip
  id: totrans-2894
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Since it is not the legacy purpose of a `WebCommonInterceptor` class to be used
    as a super controller sharing properties and utility methods, we will create an
    intermediate component between controllers and `WebCommonInterceptor`.
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`WebCommonInterceptor`类的传统目的不是作为一个超级控制器共享属性和实用方法，我们将在控制器和`WebCommonInterceptor`之间创建一个中间组件。
- en: 'In order to @Autowire the PagedResourcesAssemblers, as we did, we have registered
    a PagedResourcesAssembler bean in dispatcher-servlet.xml:'
  id: totrans-2896
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了@Autowire PagedResourcesAssemblers，就像我们做的那样，我们在dispatcher-servlet.xml中注册了一个PagedResourcesAssembler
    bean：
- en: '[PRE297]'
  id: totrans-2897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: As a result, now calling the API for a ^GDAXI index code (http://cloudstreetmarket.com/api/indices/%5EGDAXI.xml)
    produces the following output:![How to do it…](img/image00883.jpeg)
  id: totrans-2898
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，现在调用^GDAXI指数代码的API（http://cloudstreetmarket.com/api/indices/%5EGDAXI.xml）会产生以下输出：![如何做…](img/image00883.jpeg)
- en: Tip
  id: totrans-2899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As links, we have expressed endpoints and URI paths. From those links we can
    retrieve other Entities in relationship with an index (if we want to expose them
    obviously).
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: 作为链接，我们表达了端点和URI路径。从这些链接中，我们可以检索与指数相关的其他实体（如果我们想要公开它们的话）。
- en: How it works...
  id: totrans-2901
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This section specifically details the links creation.
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
  zh: 本节具体详细介绍了链接的创建。
- en: Resource assemblers
  id: totrans-2903
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源装配器
- en: 'This kind of specialized converters (Resource assemblers) are thought for reusability.
    Their main functions are as follows:'
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: 这种专门的转换器（资源装配器）是为了可重用性而设计的。它们的主要功能如下：
- en: Instantiating the resource and hydrating it with content
  id: totrans-2905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化资源并用内容进行填充
- en: Creating the resource's links from the Entity state or from the static global
    design
  id: totrans-2906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从实体状态或静态全局设计创建资源的链接
- en: The Framework provides a `ResourceAssemblerSupport` super-class whose role is
    to reduce boilerplate code in the assemblers' duties.
  id: totrans-2907
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架提供了一个`ResourceAssemblerSupport`超类，其作用是减少装配器职责中的样板代码。
- en: 'The `ResourceAssemblerSupport` class is an abstract generic class. It enriches
    an assembler by providing a couple of extra methods. With `T` being a controller''s
    class or super. Type, its signature is the following:'
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceAssemblerSupport`类是一个抽象的泛型类。它通过提供一些额外的方法来丰富组装器。以`T`作为控制器的类或超级类型，其签名如下：'
- en: '[PRE298]'
  id: totrans-2909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'The table here provides a glimpse of the `ResourceAssemblerSupport` JavaDoc:'
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的表格提供了`ResourceAssemblerSupport`的JavaDoc的一瞥：
- en: '| Methods | Description |'
  id: totrans-2911
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-2912
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `List<D> toResources(Iterable<? extends T> entities)` | This converts all
    the given entities into resources |'
  id: totrans-2913
  prefs: []
  type: TYPE_TB
  zh: '| `List<D> toResources(Iterable<? extends T> entities)` | 这将所有给定的实体转换为资源 |'
- en: '| `protected D createResourceWithId(Object id, T entity)` | This creates a
    new resource with a self link to the given ID |'
  id: totrans-2914
  prefs: []
  type: TYPE_TB
  zh: '| `protected D createResourceWithId(Object id, T entity)` | 这将创建一个带有给定ID的自链接的新资源
    |'
- en: '| `D createResourceWithId(Object id, T entity, Object... parameters)` | - |'
  id: totrans-2915
  prefs: []
  type: TYPE_TB
  zh: '| `D createResourceWithId(Object id, T entity, Object... parameters)` | - |'
- en: '| `protected D instantiateResource(T entity)` | This instantiates the resource
    object. The default implementation will assume a `no-arg` constructor and use
    a reflection. However it can be overridden to manually set up the object instance
    initially (for example, to improve performance if this becomes an issue) |'
  id: totrans-2916
  prefs: []
  type: TYPE_TB
  zh: '| `protected D instantiateResource(T entity)` | 这将实例化资源对象。默认实现将假定一个`no-arg`构造函数并使用反射。但是，如果需要，可以重写它以手动设置对象实例（例如，以改善性能）
    |'
- en: 'The `ResourceAssemblerSupport` class also implements `ResourceAssembler`, which
    is the one-method interface presented here that forces the assembler to provide
    a `toResource(T entity)` method:'
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceAssemblerSupport`类还实现了`ResourceAssembler`，这是一个单方法接口，强制组装器提供`toResource(T
    entity)`方法：'
- en: '[PRE299]'
  id: totrans-2918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: It can be noticed that we have overridden the `instantiateResource` method in
    our assemblers. As specified in the JavaDoc, not overriding it causes the Framework
    to instantiate the resource by reflection, looking for a `no-arg` constructor
    in the resource.
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
  zh: 可以注意到我们在组装器中重写了`instantiateResource`方法。如JavaDoc中所述，不重写它会导致框架通过反射实例化资源，寻找资源中的`no-arg`构造函数。
- en: We have preferred here to avoid such constructors in our resources, as they
    can be a bit of an overhead.
  id: totrans-2920
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更倾向于避免在我们的资源中使用这样的构造器，因为它们可能会有点超负荷。
- en: PagedResourcesAssembler
  id: totrans-2921
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PagedResourcesAssembler
- en: This amazing, generic super assembler is used to build link-based pages of resources
    for the client. With an incredibly small amount of configuration, Spring HATEOAS
    builds for us a complete and out-of-the-box, fully populated page of typed-resources.
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
  zh: 这个令人惊奇的通用超级组装器用于为客户端构建基于链接的资源页面。通过极少量的配置，Spring HATEOAS为我们构建了一个完整且开箱即用的、完全填充的类型资源页面。
- en: 'Based on our presented configuration, you can try calling the following URL:'
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们呈现的配置，您可以尝试调用以下URL：
- en: '[http://cloudstreetmarket.com/api/indices.xml](http://cloudstreetmarket.com/api/indices.xml)'
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://cloudstreetmarket.com/api/indices.xml](http://cloudstreetmarket.com/api/indices.xml)'
- en: 'Doing this, you should obtain the following output:'
  id: totrans-2925
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，您应该获得以下输出：
- en: '![PagedResourcesAssembler](img/image00884.jpeg)'
  id: totrans-2926
  prefs: []
  type: TYPE_IMG
  zh: '![PagedResourcesAssembler](img/image00884.jpeg)'
- en: Can you see the **next rel** link and how it has been built by reflection from
    our method-handler annotations and their default and used values? Try to follow
    the **next** link to see how the navigation gets updated and incremented smoothly.
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到**next rel**链接吗？它是如何通过反射从我们的方法处理程序注解及其默认和使用的值构建的？尝试跟随**next**链接，看看导航如何更新并平滑增加。
- en: 'In the `IndexController.getSeveral()` method-handler (shown in the following
    snippet), we make sure that every single resource is built properly (content and
    links) by making the `PagedResourcesAssembler` using our custom `IndexResourceAssembler`:'
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
  zh: 在`IndexController.getSeveral()`方法处理程序（如下面的代码片段所示）中，我们确保每个单独的资源都通过使用我们自定义的`IndexResourceAssembler`来构建（内容和链接）：
- en: '[PRE300]'
  id: totrans-2929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Building links
  id: totrans-2930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建链接
- en: Let's have a look at the way we build resource links in assemblers. The presented
    `toResource()` method in `IndexResourceAssembler` uses two different techniques.
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在组装器中构建资源链接的方式。在`IndexResourceAssembler`中呈现的`toResource()`方法使用了两种不同的技术。
- en: The first technique through **EntityLinks** uses JPA Entities; the second one,
    through the `ControllerLinkBuilder` static methods, uses `Controllers` directly.
  id: totrans-2932
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**EntityLinks**的第一种技术使用JPA实体；第二种技术通过`ControllerLinkBuilder`静态方法直接使用`Controllers`。
- en: EntityLinks
  id: totrans-2933
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: EntityLinks
- en: 'By declaring the `@EnableEntityLinks` annotation in a configuration class,
    an `EntityLinks` implementation gets registered: `ControllerEntityLinks`. All
    the Spring MVC controllers of **ApplicationContext** are looked up to search for
    the ones carrying a `@ExposesResourceFor(xxx.class)` annotation.'
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在配置类中声明`@EnableEntityLinks`注解，会注册一个`EntityLinks`实现：`ControllerEntityLinks`。查找**ApplicationContext**的所有Spring
    MVC控制器，以寻找携带`@ExposesResourceFor(xxx.class)`注解的控制器。
- en: The `@ExposesResourceFor` annotation on a Spring MVC controller exposes the
    model Type that the controller manages. This registration enables the required
    mapping between the controller and a JPA entity.
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC控制器上的`@ExposesResourceFor`注解公开了控制器管理的模型类型。这种注册使控制器和JPA实体之间的必要映射得以实现。
- en: 'It must also be noted that the registered `ControllerEntityLinks` implementation
    assumes a certain `@RequestMapping` configuration on controllers. The `@RequestMapping`
    configuration is made as follows:'
  id: totrans-2936
  prefs: []
  type: TYPE_NORMAL
  zh: 还必须注意，注册的`ControllerEntityLinks`实现假定控制器上有特定的`@RequestMapping`配置。`@RequestMapping`配置如下所示：
- en: For a collection of resources, a class-level `@RequestMapping` annotation is
    expected. The controller then has to expose a method-handler mapped to an empty
    path, for example, `@RequestMapping(method = RequestMethod.GET)`.
  id: totrans-2937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于资源集合，期望有一个类级别的`@RequestMapping`注解。然后控制器必须暴露一个映射到空路径的方法处理程序，例如`@RequestMapping(method
    = RequestMethod.GET)`。
- en: For individual resources, those are exposed with the `id` of the managed JPA
    Entity, for example, `@RequestMapping("/{id}")`.
  id: totrans-2938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于单个资源，这些资源使用所管理的JPA实体的`id`公开，例如`@RequestMapping("/{id}")`。
- en: 'Acknowledging these points, the `EntityLinks` implementation (`ControllerEntityLinks`)
    is used from `@Autowiring` to generate `Links` using the collection of methods
    it provides:'
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: 承认这些观点，`EntityLinks`实现（`ControllerEntityLinks`）从`@Autowiring`中使用以生成使用其提供的方法集的`Links`：
- en: '[PRE301]'
  id: totrans-2940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: ControllerLinkBuilder
  id: totrans-2941
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ControllerLinkBuilder
- en: 'As introduced, Spring HATEOAS provides the `ControllerLinkBuilder` utility,
    which allows the creation of links by pointing to controller classes:'
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: 正如介绍的那样，Spring HATEOAS提供了`ControllerLinkBuilder`实用程序，它允许通过指向控制器类来创建链接：
- en: '[PRE302]'
  id: totrans-2943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: As specified in the Spring HATEOAS reference, `ControllerLinkBuilder` uses Spring's
    `ServletUriComponentsBuilder` under the hood to obtain the basic URI information
    from the current request.
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: 如Spring HATEOAS参考中所指定的，`ControllerLinkBuilder`在底层使用Spring的`ServletUriComponentsBuilder`来从当前请求中获取基本URI信息。
- en: If our application runs at `http://cloudstreetmarket/api`, then the Framework
    builds `Links` on top of this root URI, appending it with the root controller
    mapping (`/indices`) and then with the subsequent method-handler specific path.
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序在`http://cloudstreetmarket/api`上运行，那么框架将在这个根URI的基础上构建`Links`，并将其附加到根控制器映射（`/indices`），然后再附加到后续方法处理程序特定的路径。
- en: There's more…
  id: totrans-2946
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The use of regular expressions in @RequestMapping
  id: totrans-2947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在@RequestMapping中使用正则表达式
- en: In `IndexController`, `StockProductController`, `ChartStockController`, and
    `ChartIndexController`, the `GET` method-handlers to retrieve single resources
    have a special `@RequestMapping` definition.
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
  zh: 在`IndexController`、`StockProductController`、`ChartStockController`和`ChartIndexController`中，用于检索单个资源的`GET`方法处理程序具有特殊的`@RequestMapping`定义。
- en: 'Here is the IndexController''s `get()` method:'
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: 这是IndexController的`get()`方法：
- en: '[PRE303]'
  id: totrans-2950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: We ended up with this option because the Yahoo! Index codes appeared a bit more
    complex than simple strings. Especially considering the fact that these codes
    can carry one or more dots.
  id: totrans-2951
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终选择了这个选项，因为Yahoo!的指数代码似乎比简单的字符串复杂一些。特别是考虑到这些代码可能携带一个或多个点。
- en: This situation caused Spring MVC not to be able to distinguish correctly the
    `@PathVariable` index from `extension` (stripping them out half the way).
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况导致Spring MVC无法正确区分`@PathVariable`索引和`extension`（在一半的情况下将它们剥离）。
- en: Luckily, Spring MVC allows us to define URI template patterns with regular expressions.
    The syntax is `{varName:regex}`, where the first part defines the variable name
    and the second defines the regular expression.
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Spring MVC允许我们使用正则表达式定义URI模板模式。语法是`{varName:regex}`，其中第一部分定义变量名，第二部分定义正则表达式。
- en: 'You will note the regular expression we defined for our indices:'
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到我们为我们的指数定义的正则表达式：
- en: The `[a-zA-Z0-9^.-]+` expression, which specifically allows the `^` and `.`
    characters, is commonly used in the index code by Yahoo!
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
  zh: '`[a-zA-Z0-9^.-]+`表达式，特别允许`^`和`.`字符，在Yahoo!的指数代码中通常使用。'
- en: See also
  id: totrans-2956
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: To know more about Spring HATEOAS, refer to [http://docs.spring.io/spring-hateoas/docs/current/reference/html/](http://docs.spring.io/spring-hateoas/docs/current/reference/html/).
  id: totrans-2957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解有关Spring HATEOAS的更多信息，请参考[http://docs.spring.io/spring-hateoas/docs/current/reference/html/](http://docs.spring.io/spring-hateoas/docs/current/reference/html/)。
- en: The introduced HATEOAS representation implements the **Hypertext Application
    Language** (**HAL**). HAL is supported by Spring HATEOAS as the default rendering.
    Learn more about the HAL specification at [https://tools.ietf.org/html/draft-kelly-json-hal-06](https://tools.ietf.org/html/draft-kelly-js)
    and [http://stateless.co/hal_specification.html](http://stateless.co/hal_specification.html).
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍的HATEOAS表示实现了**Hypertext Application Language** (**HAL**)。 HAL是Spring HATEOAS支持的默认渲染。在[https://tools.ietf.org/html/draft-kelly-json-hal-06](https://tools.ietf.org/html/draft-kelly-js)和[http://stateless.co/hal_specification.html](http://stateless.co/hal_specification.html)了解更多关于HAL规范的信息。
- en: Choosing a strategy to expose JPA Entities
  id: totrans-2959
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一种公开JPA实体的策略
- en: The `content` object(s) exposed in resources are JPA Entities. The interesting
    point about wrapping a JPA Entity in a resource comes with the low-level nature
    of an Entity itself, which supposedly represents a restricted identifiable domain
    area. This definition should ideally be entirely translated to the exposed REST
    resources.
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源中公开的`content`对象是JPA实体。将JPA实体包装在资源中的有趣之处在于实体本身的低级性质，它据说代表了一个受限的可识别领域。这个定义理想情况下应该完全转换为公开的REST资源。
- en: So, how do we represent an Entity in REST HATEOAS? How do we safely and uniformly
    represent the JPA associations?
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何在REST HATEOAS中表示一个实体？我们如何安全而统一地表示JPA关联？
- en: This recipe presents a simple and conservative method to answer these questions.
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例提供了一种简单而保守的方法来回答这些问题。
- en: How to do it…
  id: totrans-2963
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We have presented one entity used as a resource (`Index.java`). Here is another
    entity that is used: `Exchange.java`. This entity presents a similar strategy
    to expose its JPA associations:'
  id: totrans-2964
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们介绍了一个用作资源的实体（`Index.java`）。这里还有另一个用到的实体：`Exchange.java`。这个实体提供了一种类似的策略来公开其JPA关联：
- en: '[PRE304]'
  id: totrans-2965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: 'The `Exchange.java` Entity references two custom utility classes that are used
    to transform the way external Entities are fetched as part of the main entity
    rendering (JSON or XML). Those utility classes are the following `IdentifiableSerializer`
    and the `IdentifiableToIdConverter`:'
  id: totrans-2966
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Exchange.java`实体引用了两个自定义实用程序类，用于以特定的方式转换外部实体作为主实体渲染的一部分（JSON或XML）。这些实用程序类是`IdentifiableSerializer`和`IdentifiableToIdConverter`：'
- en: 'The `IdentifiableSerializer` class is used for JSON marshalling:'
  id: totrans-2967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IdentifiableSerializer`类用于JSON marshalling：'
- en: '[PRE305]'
  id: totrans-2968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'The `IdentifiableToIdConverter` class is used for XML marshlling and is built
    with XStream dependencies:'
  id: totrans-2969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IdentifiableToIdConverter`类用于XML marshlling，并且构建了XStream依赖项：'
- en: '[PRE306]'
  id: totrans-2970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: How it works...
  id: totrans-2971
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's understand how this strategy works.
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下这个策略是如何工作的。
- en: The REST CRUD principle
  id: totrans-2973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: REST CRUD原则
- en: One REST architectural constraint is to present a uniform interface. A uniform
    interface is achieved by exposing resources from endpoints that can all be targeted
    from different HTTP methods (if applicable).
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
  zh: REST的一个架构约束是提供统一的接口。通过从可以从不同的HTTP方法（如果适用）针对的端点公开资源来实现统一的接口。
- en: Resources can also be exposed under several representations (`json`, `xml`,
    and so on), and information or error messages must be self-descriptive. The implementation
    of HATEOAS provides a great bonus for the self-explanatory character of an API.
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: 资源也可以以多种表示形式（`json`，`xml`等）公开，并且信息或错误消息必须是自描述的。 HATEOAS的实现为API的自解释特性提供了巨大的奖励。
- en: 'In REST, the more intuitive and inferable things are, the better. From this
    perspective, as a web/UI developer, I should be able to assume the following:'
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST中，越直观和可推断的事物越好。从这个角度来看，作为Web/UI开发人员，我应该能够假设以下内容：
- en: The structure of the object I receive from the `GET` call on an endpoint will
    be the expected structure that I have to send back with a `PUT` call (the edition
    of the object)
  id: totrans-2977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我从端点的`GET`调用接收到的对象的结构将是我必须在`PUT`调用（对象的编辑）中发送回去的预期结构
- en: Similarly, the same structure should be used for the creation of a new object
    (the `POST` method)
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，相同的结构应该用于创建新对象（`POST`方法）
- en: This consistency of payload structures among different HTTP methods is a *SOLID*
    and conservative argument that is used when it is time to defend the API interests.
    *It's pretty much always the time to defend the API interests*.
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的HTTP方法之间保持一致的有效负载结构是在捍卫API利益时使用的*SOLID*和保守的论点。*捍卫API利益几乎总是时候*。
- en: Exposing the minimum
  id: totrans-2980
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴露最少
- en: Exposing the minimum amount of information has been the core idea during the
    refactoring for this chapter. It's usually a great way to ensure that one endpoint
    won't be used to expose information data that would be external to the initial
    controller.
  id: totrans-2981
  prefs: []
  type: TYPE_NORMAL
  zh: 在重构本章期间，暴露最少量的信息是核心思想。通常这是确保一个端点不会用于暴露初始控制器之外的信息数据的好方法。
- en: A JPA Entity can have associations to other Entities (`@OneToOne`, `@OneToMany`,
    `@ManyToOne`, or `@ManyToMany`).
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: JPA实体可以与其他实体（`@OneToOne`，`@OneToMany`，`@ManyToOne`或`@ManyToMany`）关联。
- en: Some of these associations have been annotated with `@JsonIgnore` (and `@XStreamOmitField`),
    and some other associations have been annotated with `@JsonSerialize` and `@JsonProperty`
    (and `@XStreamConverter` and `@XStreamAlias`).
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些关联已经用`@JsonIgnore`（和`@XStreamOmitField`）进行了注释，另一些关联已经用`@JsonSerialize`和`@JsonProperty`（和`@XStreamConverter`和`@XStreamAlias`）进行了注释。
- en: If the Entity doesn't own the relationship
  id: totrans-2984
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如果实体不拥有关系
- en: In this situation, the database table of the Entity doesn't have a foreign key
    to the table of the targeted second Entity.
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，实体的数据库表没有指向目标第二实体表的外键。
- en: The strategy here is to completely ignore the relationship in REST to reflect
    the database state.
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的策略是完全忽略REST中的关系，以反映数据库状态。
- en: The `ignore` instructions depend on the supported representations and the chosen
    implementations.
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
  zh: '`ignore`指令取决于支持的表示和选择的实现。'
- en: 'For `json`, we are using `Jackson`, the solution has been: `@JsonIgnore`.'
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`json`，我们使用`Jackson`，解决方案是：`@JsonIgnore`。
- en: 'For `xml`, we are using `XStream`, the solution has been: `@XstreamOmitField`.'
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`xml`，我们使用`XStream`，解决方案是：`@XstreamOmitField`。
- en: If the Entity owns the relationship
  id: totrans-2990
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如果实体拥有关系
- en: Here, the database table of the Entity has a foreign key the table of the targeted
    second Entity.
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，实体的数据库表具有指向目标第二实体表的外键。
- en: If we plan to update an entity of this table, which depends on an entity of
    the other table, we will have to provide this foreign key for the entity.
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计划更新此表的实体，该实体依赖于另一个表的实体，我们将不得不为该实体提供此外键。
- en: The idea then is to expose this foreign key as a dedicated field just as all
    the other columns of the database table. Again, the solution to implement this
    depends on the supported representations and the configured marshallers.
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
  zh: 然后的想法是将这个外键作为专用字段公开，就像数据库表的所有其他列一样。再次，实现此的解决方案取决于支持的表示和配置的编组器。
- en: 'For `json` and `Jackson`, we have done it with the following code snippet:'
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`json`和`Jackson`，我们使用以下代码片段完成了这一点：
- en: '[PRE307]'
  id: totrans-2995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: As you can see, we rename the attribute to suggest that we are presenting (and
    expecting) an ID. We have created the `IdentifiableSerializer` class that extracts
    the `ID` from the entity (from the `Identifiable` interface) and places only this
    `ID` into the value of the attribute.
  id: totrans-2996
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们重命名属性以表明我们正在呈现（并期望）一个ID。我们创建了`IdentifiableSerializer`类，从实体（从`Identifiable`接口）中提取`ID`，并将仅此`ID`放入属性的值中。
- en: 'For `xml` and `XStream`, it has been:'
  id: totrans-2997
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`xml`和`XStream`，它已经是：
- en: '[PRE308]'
  id: totrans-2998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: In the same way, we rename the attribute to suggest that we are presenting an
    `ID`, and we target the custom converter `IdentifiableToIdConverter` that also
    chooses only the **ID** of the Entity as a value for the attribute.
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们重命名属性以表明我们正在呈现一个`ID`，并且我们针对自定义转换器`IdentifiableToIdConverter`，该转换器也仅选择实体的**ID**作为属性的值。
- en: 'Here is an example of the `xml` representation example of the `^AMBAPT` index:'
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`xml`表示示例的`^AMBAPT`索引的示例：
- en: '![If the Entity owns the relationship](img/image00885.jpeg)'
  id: totrans-3001
  prefs: []
  type: TYPE_IMG
  zh: '![如果实体拥有关系](img/image00885.jpeg)'
- en: Separation of resources
  id: totrans-3002
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源的分离
- en: This strategy promotes a clear separation between resources. The displayed fields
    for each resource match the database schema entirely. This is a standard practice
    in web developments to keep the HTTP request payload unchanged for the different
    HTTP methods.
  id: totrans-3003
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略促进了资源之间的明确分离。每个资源的显示字段完全匹配数据库模式。这是Web开发中的标准做法，以保持不同HTTP方法的HTTP请求有效负载不变。
- en: When HATEOAS is adopted, we should then fully encourage the use of links to
    access related entities instead of nested views.
  id: totrans-3004
  prefs: []
  type: TYPE_NORMAL
  zh: 当采用HATEOAS时，我们应该充分鼓励使用链接来访问相关实体，而不是嵌套视图。
- en: 'The previous recipe *Building links for a Hypermedia-Driven API* features examples
    to access (using links) the Entities that are associated with `@...ToOne` and
    `@...ToMany`. Below is an example of these links in an exposed Entity as it is
    achieved in the previous recipe:'
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的配方*为超媒体驱动的API构建链接*提供了使用链接访问（使用链接）与`@...ToOne`和`@...ToMany`相关联的实体的示例。以下是在先前的配方中实现的公开实体中的这些链接的示例：
- en: '![Separation of resources](img/image00886.jpeg)'
  id: totrans-3006
  prefs: []
  type: TYPE_IMG
  zh: '![资源的分离](img/image00886.jpeg)'
- en: There's more…
  id: totrans-3007
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We detail here official sources of information for the implemented marshallers.
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里详细介绍了实现的编组器的官方信息来源。
- en: Jackson custom serializers
  id: totrans-3009
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jackson自定义序列化器
- en: 'You can find the official wiki page guide for these serializers at:'
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下位置找到这些序列化器的官方wiki页面指南：
- en: '[http://wiki.fasterxml.com/JacksonHowToCustomSerializers](http://wiki.fasterxml.com/JacksonHowToCustomSerializers)'
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wiki.fasterxml.com/JacksonHowToCustomSerializers](http://wiki.fasterxml.com/JacksonHowToCustomSerializers)'
- en: XStream converters
  id: totrans-3012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XStream转换器
- en: 'XStream has been migrated from [codehaus.org](http://codehaus.org) to **Github**.
    To follow an official tutorial about XStream converters, go to:'
  id: totrans-3013
  prefs: []
  type: TYPE_NORMAL
  zh: XStream已从[codehaus.org](http://codehaus.org)迁移到**Github**。要查看有关XStream转换器的官方教程，请转到：
- en: '[http://x-stream.github.io/converter-tutorial.html](http://x-stream.github.io/converter-tutorial.html)'
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://x-stream.github.io/converter-tutorial.html](http://x-stream.github.io/converter-tutorial.html)'
- en: Retrieving data from a third-party API with OAuth
  id: totrans-3015
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OAuth从第三方API检索数据
- en: After having authenticated a user with OAuth2, it is useful to know how to call
    a remote third-party API with the user's OAuth2 account.
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用OAuth2对用户进行身份验证后，了解如何使用用户的OAuth2帐户调用远程第三方API是很有用的。
- en: How to do it…
  id: totrans-3017
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: You may have noticed that `IndexController`, `StockProductController`, `ChartIndexController`,
    and `ChartStockController` invoke underlying service methods named `gather(…)`.
    This concept suggests that lookups to third-party providers (Yahoo!) are proceeded.
  id: totrans-3018
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能已经注意到`IndexController`，`StockProductController`，`ChartIndexController`和`ChartStockController`调用了名为`gather(…)`的底层服务方法。这个概念表明对第三方提供商（Yahoo!）的查找是进行的。
- en: 'In `IndexServiceImpl`, for example, you can find the `gather(String indexId)`
    method:'
  id: totrans-3019
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，在`IndexServiceImpl`中，您可以找到`gather(String indexId)`方法：
- en: '[PRE309]'
  id: totrans-3020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'It is really the `updateIndexAndQuotesFromYahoo(…)` method that bridges the
    service layer to the third-party API:'
  id: totrans-3021
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真正起到了服务层与第三方API之间的桥梁的是`updateIndexAndQuotesFromYahoo(…)`方法：
- en: '[PRE310]'
  id: totrans-3022
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: In the case of Facebook, Twitter, or LinkedIn, you should be able to find a
    complete API adaptor to execute calls to their APIs without having to alter it.
    In our case, we had to develop the needed adaptor so that financial data can be
    retrieved and exploited from Yahoo!
  id: totrans-3023
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Facebook、Twitter或LinkedIn的情况下，您应该能够找到一个完整的API适配器，以执行对其API的调用，而无需进行修改。在我们的情况下，我们不得不开发所需的适配器，以便从Yahoo!中检索和利用财务数据。
- en: 'We added two methods to a `FinancialOperations` interface as shown in this
    code snippet:'
  id: totrans-3024
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`FinancialOperations`接口中添加了两个方法，如下所示：
- en: '[PRE311]'
  id: totrans-3025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: 'This interface has a `FinancialTemplate` implementation as follows:'
  id: totrans-3026
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个接口有一个`FinancialTemplate`实现，如下所示：
- en: '[PRE312]'
  id: totrans-3027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: The `FinancialTemplate` class is initialized as part of the global `Yahoo2Template`
    that is returned with the `connection.getApi()` calls of `IndexServiceImpl`.
  id: totrans-3028
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FinancialTemplate`类作为全局`Yahoo2Template`的一部分进行初始化，并在`IndexServiceImpl`的`connection.getApi()`调用中返回。'
- en: Using this technique to pull (as needed) not only indices and stock quotes from
    Yahoo! but also graphs, we are now able to display real-time data from more than
    25,000 stocks and 30,000 indices.![How to do it…](img/image00887.jpeg)
  id: totrans-3029
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这种技术，不仅可以从Yahoo!中检索指数和股票报价，还可以检索图表，现在我们能够显示来自25000多支股票和30000多个指数的实时数据。![如何做…](img/image00887.jpeg)
- en: The client side is capable of using the provided HATEOAS links that come along
    with each result element. It uses these links to render detail views such as **Index
    detail** or **Stock detail** (new screens).![How to do it…](img/image00888.jpeg)
  id: totrans-3030
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端能够使用随每个结果元素一起提供的HATEOAS链接。它使用这些链接来呈现详细视图，如**指数详情**或**股票详情**（新屏幕）。![如何做…](img/image00888.jpeg)
- en: How it works...
  id: totrans-3031
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's understand the theory behind this recipe.
  id: totrans-3032
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这个配方背后的理论。
- en: Introduction to the financial data of Yahoo!
  id: totrans-3033
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍Yahoo!的财务数据
- en: In the context of our application, there is still one refactoring that needs
    to be explained. It is about historical data and graphs.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序环境中，仍然有一个需要解释的重构。这是关于历史数据和图表的。
- en: The Yahoo! financial API provides historical data. This data can be used to
    build graphs, and it was initially planned to do it this way. Now, Yahoo! also
    generates graphs (for both historical and intraday data) and these graphs are
    quite customizable (time period, average lines, chart or stock's display option,
    and so on).
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo!财务API提供了历史数据。这些数据可以用来构建图表，最初计划是这样做的。现在，Yahoo!也生成图表（用于历史和盘中数据），这些图表是相当可定制的（时间段、平均线、图表或股票的显示选项等）。
- en: We have decided to drop the historical part, which technically is very similar
    to quote retrieval (data snapshots), to exclusively use graphs generated by Yahoo!
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定放弃历史部分，这在技术上与报价检索（数据快照）非常相似，专门使用由Yahoo!生成的图表。
- en: Graph generation/display
  id: totrans-3037
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 图表生成/显示
- en: Our implementation provides an interesting example of image serving in REST.
    Have a look at `ChartIndexController` (or `ChartStockController`) and see how
    images are returned as byte arrays.
  id: totrans-3038
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现提供了一个有趣的REST图像服务示例。看看`ChartIndexController`（或`ChartStockController`）并看看图像如何以字节数组返回。
- en: Also have a look at the `home_financial_graph.js` file, how the received content
    is set into an HTML `<img…>` markup.
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
  zh: 还要看一下`home_financial_graph.js`文件，了解接收到的内容是如何设置到HTML `<img…>`标记中的。
- en: How is the financial data pulled/refreshed?
  id: totrans-3040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 财务数据是如何拉取/刷新的？
- en: The idea here is to rely on OAuth authenticated users. Yahoo! provides different
    rates and limits for authenticated and non-authenticated users. Non-authenticated
    calls are identified on the Yahoo! side by the calling IP, which will be (more
    or less) the entire `CloudstreetMarket` application IP in our case. If Yahoo!
    considers that there are too many calls coming from our IP, that will be an issue.
    However, if there are too many calls coming from one specific user, Yahoo! will
    restrict that user without affecting the rest of the application (and this situation
    can further be recovered by the application).
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是依赖于OAuth认证的用户。雅虎！为经过身份验证和未经身份验证的用户提供不同的费率和限制。雅虎！认为来自我们IP的调用太多，这将是一个问题。但是，如果有太多来自特定用户的调用，雅虎！将限制该用户，而不会影响应用程序的其余部分（应用程序可以进一步通过应用程序恢复）。
- en: As you can see, the method-handlers that potentially deal with the financial
    data of Yahoo! call the appropriated underlying service through methods named
    `gather()`.
  id: totrans-3042
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，潜在处理雅虎！金融数据的方法处理程序通过名为`gather()`的方法调用适当的底层服务。
- en: In these `gather()` methods, the Yahoo! third-party API interferes between our
    database and our controllers.
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些`gather()`方法中，雅虎第三方API介入了我们的数据库和我们的控制器之间。
- en: 'If the user is authenticated with OAuth2, the underlying service checks whether
    the data exists or not in the database and whether it has been updated recently
    enough to match a predefined buffer period for the data type (one minute for `indices`
    and `stocks`):'
  id: totrans-3044
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户使用OAuth2进行了身份验证，则底层服务会检查数据是否存在于数据库中，以及是否已经更新到足够近的时间来匹配数据类型的预定义缓冲期（`indices`和`stocks`为一分钟）：
- en: If the answer is yes, this data is returned to the client
  id: totrans-3045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果答案是肯定的，则将这些数据返回给客户端
- en: If the answer is no, the expected data is requested from Yahoo!, transformed,
    stored in the database, and returned to the client
  id: totrans-3046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果答案是否定的，则从雅虎！请求预期的数据，转换，存储在数据库中，并返回给客户端
- en: There is nothing planned at the moment for users who are not authenticated with
    OAuth, but we can imagine easily making them using a common Yahoo! OAuth account.
  id: totrans-3047
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有计划针对未经OAuth认证的用户，但我们可以想象很容易使用通用的雅虎！OAuth账户来创建它们。
- en: Calling third-party services
  id: totrans-3048
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用第三方服务
- en: For the presented recipe, this part is done in the `updateIndexAndQuotesFromYahoo`
    method. Our Spring configuration defines a `connectionRepository` bean created
    with a `request` scope for each user. The `connectionRepository` instance is created
    from the `createConnectionRepository` factory method of our `SocialUserServiceImpl`.
  id: totrans-3049
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所呈现的配方，这部分是在`updateIndexAndQuotesFromYahoo`方法中完成的。我们的Spring配置定义了一个`connectionRepository`
    bean，为每个用户创建了一个`request`范围。`connectionRepository`实例是从我们的`SocialUserServiceImpl`的`createConnectionRepository`工厂方法创建的。
- en: 'Based on this, we `@Autowire` these two beans in our service layer:'
  id: totrans-3050
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，我们在服务层中`@Autowire`这两个bean：
- en: '[PRE313]'
  id: totrans-3051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'Then, the `updateIndexAndQuotesFromYahoo` method obtains the logged-in `userId`
    (`guid`) from the Spring Security:'
  id: totrans-3052
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`updateIndexAndQuotesFromYahoo`方法从Spring Security中获取已登录的`userId`（`guid`）：
- en: '[PRE314]'
  id: totrans-3053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: 'The access token is extracted from the `SocialUser` Entity (coming from the
    database):'
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
  zh: 访问令牌从`SocialUser`实体（来自数据库）中提取：
- en: '[PRE315]'
  id: totrans-3055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: 'The Yahoo! connection is retrieved from the database:'
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中检索雅虎！连接：
- en: '[PRE316]'
  id: totrans-3057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'If the connection is not null, the third-party API is called from the connection
    object:'
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接不为空，则从连接对象调用第三方API：
- en: '[PRE317]'
  id: totrans-3059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Once again, we had to develop the actual `FinancialTemplate` (the Java representation
    of the Yahoo! financial API), but you should be able to find such existing implementations
    for your third-party provider.
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们不得不开发实际的`FinancialTemplate`（雅虎！金融API的Java表示），但是您应该能够为您的第三方提供商找到这样的现有实现。
- en: There's more…
  id: totrans-3061
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This section provides a list of many existing open-source Spring Social adaptors
    that we can use in our projects
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了许多现有的开源Spring Social适配器的列表，我们可以在我们的项目中使用
- en: Spring Social — existing API providers
  id: totrans-3063
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Social - 现有的API提供商
- en: 'The following address provides an up-to-date aggregation of Spring social extensions
    for connection-support and API-binding to many popular service providers:'
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
  zh: 以下地址提供了连接支持和API绑定到许多热门服务提供商的Spring社交扩展的最新聚合：
- en: '[https://github.com/spring-projects/spring-social/wiki/Api-Providers](https://github.com/spring-projects/spring-social/wiki/Api-Providers)'
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/spring-projects/spring-social/wiki/Api-Providers](https://github.com/spring-projects/spring-social/wiki/Api-Providers)'
- en: See also
  id: totrans-3066
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Yahoo! financial stock tickers**: We have prefilled our database with a set
    of financial references to Yahoo! (stock references and index references), which
    allows us to point and search for resources that can, for the second time, be
    updated with real-time data through the Yahoo! APIs. This set of references comes
    from the great work published by **Samir Khan** on his blog accessible at [http://investexcel.net/all-yahoo-finance-stock-tickers](http://investexcel.net/all-yahoo-finance-stock-tickers).
    This XLS data has then been transformed into SQL by us, using a basic text editor
    and macros.'
  id: totrans-3067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**雅虎！金融股票代码**：我们已经在数据库中预先填充了一组对雅虎的金融引用（股票引用和指数引用），这使我们能够指向和搜索可以通过雅虎API第二次更新的资源。这组引用来自**Samir
    Khan**在他的博客[http://investexcel.net/all-yahoo-finance-stock-tickers](http://investexcel.net/all-yahoo-finance-stock-tickers)上发布的伟大工作。然后，我们使用基本文本编辑器和宏将这些XLS数据转换为SQL。'
- en: Chapter 7. Developing CRUD Operations and Validations
  id: totrans-3068
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。开发CRUD操作和验证
- en: 'Until now, we have seen how to build the read-only HTTP methods of an API.
    These methods in Spring MVC Controllers required you to master, or at least understand
    the presentation of a few techniques. Developing non-readonly HTTP methods raises
    a new set of underlying topics. Each of these topics has a direct impact on the
    customer experience and therefore each of them is important. We introduce the
    following four recipes as a frame to cover the subject:'
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何构建API的只读HTTP方法。Spring MVC控制器中的这些方法要求您掌握或至少了解一些技术的呈现。开发非只读的HTTP方法会引发一系列新的基础主题。每个主题都直接影响客户体验，因此每个主题都很重要。我们引入以下四个配方作为涵盖主题的框架：
- en: Extending REST handlers to all HTTP methods
  id: totrans-3070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将REST处理程序扩展到所有HTTP方法
- en: Validating resources using bean validation support
  id: totrans-3071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用bean验证支持验证资源
- en: Internationalizing messages and contents for REST
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为REST国际化消息和内容
- en: Validating client-side forms with HTML5 and AngularJS
  id: totrans-3073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5和AngularJS验证客户端表单
- en: Introduction
  id: totrans-3074
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Developing CRUD operations and validations at this stage turns out to be one
    of the topics with the widest spectrum.
  id: totrans-3075
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段开发CRUD操作和验证结果是最广泛的主题之一。
- en: Our application will be transformed in many ways, from the transaction management
    standardisation to the internationalization of errors (and content), passing through
    the REST handlers, HTTP compliance.
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将在许多方面进行转变，从交易管理标准化到错误（和内容）的国际化，通过REST处理程序、HTTP合规性。
- en: In line with the previous chapters and with the global strategy of this book,
    we are focusing on how Spring MVC plays a key role in today's and tomorrow's best
    practices in regards to scalability and Microservices communications. It is a
    hard choice to decide skipping bits, but the Framework keeps adapting itself to
    new designs and challenges. This book tries to present a consistent integration
    of Spring MVC in a modern, sustainable, and scalable application.
  id: totrans-3077
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章和本书的全局策略一致，我们专注于Spring MVC在可伸缩性和微服务通信方面的最佳实践。决定跳过一些内容是一个艰难的选择，但框架不断适应新的设计和挑战。本书试图在现代、可持续和可伸缩的应用程序中呈现Spring
    MVC的一致集成。
- en: Four recipes are presented here. The first one transforms two controllers to
    support the CRUD operations for their respective resources. Doing so requires
    a review of the database transactions and a review of the HTTP specification.
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍了四个配方。第一个配方将两个控制器转换为支持其各自资源的CRUD操作。这样做需要对数据库事务和HTTP规范进行审查。
- en: This chapter presents two validation strategies supported by Spring MVC. Since
    validation errors are often meant to be rendered in more than one language, we
    have made sure that our application supports internationalization. We briefly
    see how AngularJS can be used in this perspective and how it can be used to process
    frontend validations that are always necessary to constrain the customer experience
    into the reality of the business-specific data management.
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Spring MVC支持的两种验证策略。由于验证错误通常需要以多种语言呈现，我们确保我们的应用程序支持国际化。我们简要介绍了AngularJS如何在这个视角中使用，以及如何用它来处理前端验证，这总是必要的，以将客户体验限制在业务特定数据管理的现实中。
- en: Extending REST handlers to all HTTP methods
  id: totrans-3080
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将REST处理程序扩展到所有HTTP方法
- en: 'This is the core recipe of the chapter. We will detail how to use the Spring
    MVC method-handlers for HTTP methods that we haven''t covered yet: the non-readonly
    ones.'
  id: totrans-3081
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章的核心配方。我们将详细介绍如何使用Spring MVC方法处理程序处理我们尚未涵盖的HTTP方法：非只读方法。
- en: Getting ready
  id: totrans-3082
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will see the returned status codes and the HTTP standards driving the use
    of the `PUT`, `POST`, and `DELETE` methods. This will get us to configure HTTP-compliant
    Spring MVC controllers.
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到返回的状态代码和驱动`PUT`、`POST`和`DELETE`方法使用的HTTP标准。这将使我们配置符合HTTP规范的Spring MVC控制器。
- en: We will also review how request-payload mapping annotations such as `@RequestBody`
    work under the hood and how to use them efficiently.
  id: totrans-3084
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将审查请求负载映射注释，如`@RequestBody`是如何在幕后工作的，以及如何有效地使用它们。
- en: Finally, we open a window on Spring transactions, as it is a broad and important
    topic in itself.
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将打开Spring事务的窗口，因为这本身是一个广泛而重要的主题。
- en: How to do it…
  id: totrans-3086
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Following the next steps will present the changes applied to two controllers,
    a service and a repository:'
  id: totrans-3087
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将介绍对两个控制器、一个服务和一个存储库所应用的更改：
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v7.x.x`. Then, run a `maven clean install` on the `cloudstreetmarket-parent`
    module (right-click on the module and go to **Run as…** | **Maven Clean** and
    then again go to **Run as…** | **Maven Install**) followed by a `Maven Update`
    project to synchronize Eclipse with the maven configuration (right-click on the
    module and then go to **Maven** | **Update Project…**).
  id: totrans-3088
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse的**Git Perspective**中，检出分支`v7.x.x`的最新版本。然后，在`cloudstreetmarket-parent`模块上运行`maven
    clean install`（右键单击模块，转到**Run as…** | **Maven Clean**，然后再次转到**Run as…** | **Maven
    Install**），然后进行`Maven Update`项目以使Eclipse与maven配置同步（右键单击模块，然后转到**Maven** | **Update
    Project…**）。
- en: Run the `Maven clean` and `Maven install` commands on `zipcloud-parent` and
    then on `cloudstreetmarket-parent`. Then, go to **Maven** | **Update Project**.
  id: totrans-3089
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`zipcloud-parent`和`cloudstreetmarket-parent`上运行`Maven clean`和`Maven install`命令。然后，转到**Maven**
    | **Update Project**。
- en: 'In this chapter, we are focused on two REST controllers: the `UsersController`
    and a newly created `TransactionController`.'
  id: totrans-3090
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于两个REST控制器：`UsersController`和新创建的`TransactionController`。
- en: Note
  id: totrans-3091
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `TransactionController` allows users to process financial transactions (and
    thus to buy or sell products).
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
  zh: '`TransactionController`允许用户处理财务交易（从而购买或出售产品）。'
- en: 'A simplified version of `UserController` is given here:'
  id: totrans-3093
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里提供了`UserController`的简化版本：
- en: '[PRE318]'
  id: totrans-3094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: 'The **TransactionController** is represented here in a simplified version:'
  id: totrans-3095
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里以简化版本呈现了**TransactionController**：
- en: '[PRE319]'
  id: totrans-3096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: (The `GET` method-handlers given here come from previous recipes.)
  id: totrans-3097
  prefs: []
  type: TYPE_NORMAL
  zh: （这里提供的`GET`方法处理程序来自先前的配方。）
- en: '[PRE320]'
  id: totrans-3098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: (The `PUT` and `DELETE` method-handlers introduced here are non-readonly methods.)
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: （这里介绍的`PUT`和`DELETE`方法处理程序是非只读方法。）
- en: '[PRE321]'
  id: totrans-3100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: The call to the `hydrate` method in the `post` method prepares the Entity for
    underlying service uses. It populates its relationships from IDs received in the
    request payload.
  id: totrans-3101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`post`方法中调用`hydrate`方法，为底层服务使用准备实体。它从请求有效负载中接收的ID填充了它的关系。
- en: Note
  id: totrans-3102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This technique will be applied to all the REST resources used for CRUD.
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术将应用于用于CRUD的所有REST资源。
- en: 'Here are the details of the `hydrate` method in `transactionServiceImpl`:'
  id: totrans-3104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是`transactionServiceImpl`中`hydrate`方法的详细信息：
- en: '[PRE322]'
  id: totrans-3105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: Note
  id: totrans-3106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Nothing amazing here; it is mainly about building our Entity to suit our needs.
    An interface can be created to standardize the practice.
  id: totrans-3107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么惊人的；主要是为了构建我们的实体以满足我们的需求。可以创建一个接口来标准化这种做法。
- en: All the service layers have been reviewed to drive uniform database transactions.
  id: totrans-3108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有服务层都经过审查，以驱动统一的数据库事务。
- en: 'The service implementations are now annotated by default with `@Transactional(readOnly
    = true)`. Check the following `TransactionServiceImpl` example:'
  id: totrans-3109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务实现现在默认使用`@Transactional(readOnly = true)`进行注释。检查以下`TransactionServiceImpl`示例：
- en: '[PRE323]'
  id: totrans-3110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'The non-readonly methods of these service implementations override the class
    definition with the `@Transactional` annotation:'
  id: totrans-3111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些服务实现的非只读方法使用`@Transactional`注解覆盖了类定义：
- en: '[PRE324]'
  id: totrans-3112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'This principle has also been applied to custom repository implementations (such
    as `IndexRepositoryImpl`):'
  id: totrans-3113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个原则也适用于自定义存储库实现（如`IndexRepositoryImpl`）：
- en: '[PRE325]'
  id: totrans-3114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: How it works...
  id: totrans-3115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'First, let''s quickly review the different CRUD services presented in the controllers
    of this recipe. The following table summarizes them:'
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们快速回顾一下本文中控制器中介绍的不同CRUD服务。以下表格对它们进行了总结：
- en: '| URI | Method | Purpose | Normal response codes |'
  id: totrans-3117
  prefs: []
  type: TYPE_TB
  zh: '| URI | 方法 | 目的 | 正常响应代码 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-3118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `/actions/transactions` | GET | Search transactions | 200 OK |'
  id: totrans-3119
  prefs: []
  type: TYPE_TB
  zh: '| `/actions/transactions` | GET | 搜索交易 | 200 OK |'
- en: '| `/actions/transactions/{id}` | GET | Get a transaction | 200 OK |'
  id: totrans-3120
  prefs: []
  type: TYPE_TB
  zh: '| `/actions/transactions/{id}` | GET | 获取交易 | 200 OK |'
- en: '| `/actions/transactions` | POST | Create a transaction | 201 Created |'
  id: totrans-3121
  prefs: []
  type: TYPE_TB
  zh: '| `/actions/transactions` | POST | 创建交易 | 201 Created |'
- en: '| `/actions/transactions/{id}` | DELETE | Delete a transaction | 204 No Content
    |'
  id: totrans-3122
  prefs: []
  type: TYPE_TB
  zh: '| `/actions/transactions/{id}` | DELETE | 删除交易 | 204 No Content |'
- en: '| `/users/login` | POST | Logs in a user | 200 OK |'
  id: totrans-3123
  prefs: []
  type: TYPE_TB
  zh: '| `/users/login` | POST | 登录用户 | 200 OK |'
- en: '| `/users` | GET | Get all | 200 OK |'
  id: totrans-3124
  prefs: []
  type: TYPE_TB
  zh: '| `/users` | GET | 获取所有 | 200 OK |'
- en: '| `/users/{username}` | GET | Get a user | 200 OK |'
  id: totrans-3125
  prefs: []
  type: TYPE_TB
  zh: '| `/users/{username}` | GET | 获取用户 | 200 OK |'
- en: '| `/users` | POST | Create a user | 201 Created |'
  id: totrans-3126
  prefs: []
  type: TYPE_TB
  zh: '| `/users` | POST | 创建用户 | 201 Created |'
- en: '| `/users/{username}` | PUT | Update a user | 200 OK |'
  id: totrans-3127
  prefs: []
  type: TYPE_TB
  zh: '| `/users/{username}` | PUT | 更新用户 | 200 OK |'
- en: '| `/users/{username}` | DELETE | Delete a user | 204 No Content |'
  id: totrans-3128
  prefs: []
  type: TYPE_TB
  zh: '| `/users/{username}` | DELETE | 删除用户 | 204 No Content |'
- en: HTTP/1.1 specifications – RFC 7231 semantics and content
  id: totrans-3129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP/1.1规范 - RFC 7231语义和内容
- en: To understand the few decisions that have been taken in this recipe (and to
    legitimate them), we must shed some light on a few points of the HTTP specification.
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解本文中所做的一些决定（并合理化它们），我们必须对HTTP规范的一些要点进行一些解释。
- en: 'Before starting, feel free to visit Internet standards track document (RFC
    7231) for **HTTP 1/1** related to Semantics and Content:'
  id: totrans-3131
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，可以随意访问与语义和内容相关的**HTTP 1/1**的互联网标准跟踪文档（RFC 7231）：
- en: '[https://tools.ietf.org/html/rfc7231](https://tools.ietf.org/html/rfc7231)'
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://tools.ietf.org/html/rfc7231](https://tools.ietf.org/html/rfc7231)'
- en: Basic requirements
  id: totrans-3133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基本要求
- en: In the HTTP specification document, the request methods overview (section 4.1)
    states that it is a requirement for a server to support the `GET` and `HEAD` methods.
    All other request methods are optional.
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTP规范文档中，请求方法概述（第4.1节）规定服务器必须支持`GET`和`HEAD`方法。所有其他请求方法都是可选的。
- en: The same section also specifies that a request made with a recognized method
    name (`GET`, `POST`, `PUT`, `DELETE`, and so on) but that doesn't match any method-handler
    should be responded with a `405 Not supported` status code. Similarly, a request
    made with an unrecognized method name (nonstandard) should be responded with a
    `501 Not implemented` status code. These two statements are natively supported
    and auto-configured by Spring MVC.
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
  zh: 同一节还指定，使用已识别的方法名（`GET`、`POST`、`PUT`、`DELETE`等）进行的请求，但不匹配任何方法处理程序的请求应该以`405 Not
    supported`状态代码进行响应。同样，使用未识别的方法名（非标准）进行的请求应该以`501 Not implemented`状态代码进行响应。这两个语句都受Spring
    MVC的本地支持和自动配置。
- en: Safe and Idempotent methods
  id: totrans-3136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安全和幂等方法
- en: The document introduces introduces the Safe and Idempotent qualifiers that can
    be used to describe a request method. Safe methods are basically readonly methods.
    A client using such a method does not explicitly requests a state change and cannot
    expect a state change as a result of the request.
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
  zh: 该文档介绍了可以用来描述请求方法的安全和幂等限定符。安全方法基本上是只读方法。使用这种方法的客户端不会显式请求状态更改，并且不能期望请求的结果会导致状态更改。
- en: As the Safe word suggests, such methods can be trusted to not cause any harm
    to the system.
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如“安全”一词所暗示的那样，这样的方法可以信任不会对系统造成任何伤害。
- en: An important element is that we are considering the client's point of view.
    The concept of Safe methods don't prohibit the system from implementing "potentially"
    harmful operations or processes that are not effectively read only. Whatever happens,
    the client cannot be held responsible for it. Among all the HTTP methods, only
    the `GET`, `HEAD`, `OPTIONS`, and `TRACE` methods are defined as safe.
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的元素是我们正在考虑客户端的观点。安全方法的概念不会阻止系统实施“潜在”有害的操作或过程，这些操作或过程实际上并非只读。无论发生什么，客户端都不会对此负责。在所有HTTP方法中，只有`GET`、`HEAD`、`OPTIONS`和`TRACE`方法被定义为安全方法。
- en: The specification makes use of the idempotent qualifier to identify HTTP requests
    that, when identically repeated, always produce the same consequences as the very
    first one. The client's point of view must be considered here.
  id: totrans-3140
  prefs: []
  type: TYPE_NORMAL
  zh: 规范使用幂等限定符来识别HTTP请求，当完全重复时，总是产生与第一个请求相同的后果。这里必须考虑客户端的观点。
- en: The idempotent HTTP methods are `GET`, `HEAD`, `OPTIONS`, `TRACE` (the Safe
    methods) as well as `PUT` and `DELETE`.
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等的HTTP方法是`GET`，`HEAD`，`OPTIONS`，`TRACE`（安全方法），以及`PUT`和`DELETE`。
- en: A method's idempotence guarantees a client for example that sending a **PUT**
    request can be repeated even if a connection problem has occurred before any response
    is received.
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的幂等性保证客户端，例如，即使在接收到任何响应之前发生连接问题，发送**PUT**请求也可以重复。
- en: Note
  id: totrans-3143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The client knows that repeating the request will have the same intended effect,
    even if the original request succeeded, though the response might differ.
  id: totrans-3144
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端知道重复请求将产生相同的预期效果，即使原始请求成功，响应可能会有所不同。
- en: Other method-specific constraints
  id: totrans-3145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他特定于方法的约束
- en: The `POST` methods are usually associated with the creation of resources on
    a server. Therefore, this method should return the `201 (Created)` status code
    with a location header that provides an identifier for the created resource.
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`方法通常与在服务器上创建资源相关联。因此，该方法应返回`201（已创建）`状态码，并提供一个标识符来创建资源的位置头字段。'
- en: However, if there hasn't been creation of resource, a `POST` method can (in
    practice) potentially return all types of status codes except `206 (Partial Content)`,
    `304 (Not Modified)`, and `416 (Range Not Satisfiable)`.
  id: totrans-3147
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果没有创建资源，`POST`方法（实际上）可能返回除`206（部分内容）`，`304（未修改）`和`416（范围不可满足）`之外的所有类型的状态码。
- en: The result of a `POST` can sometimes be the representation of an existing resource.
    In that case, for example, the client can be redirected to that resource with
    a `303` status code and a `Location` header field. As an alternative to `POST`
    methods, `PUT` methods are usually chosen to update or alter the state of an existing
    resource, sending a `200 (OK)` or a `204 (No Content)` to the client.
  id: totrans-3148
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`的结果有时可能是现有资源的表示。在这种情况下，例如，客户端可以通过`303`状态码和`Location`头字段重定向到该资源。作为`POST`方法的替代，`PUT`方法通常被选择来更新或更改现有资源的状态，并向客户端发送`200（OK）`或`204（无内容）`。'
- en: Edge cases with inconsistent matches raise errors with `409 (Conflict)` or `415
    (Unsupported Media Type)`.
  id: totrans-3149
  prefs: []
  type: TYPE_NORMAL
  zh: 不一致匹配的边缘情况会引发`409（冲突）`或`415（不支持的媒体类型）`错误。
- en: Edge cases of no match found for an update should induce the creation of the
    resource with a `201 (Created)` status code.
  id: totrans-3150
  prefs: []
  type: TYPE_NORMAL
  zh: 更新时找不到匹配项的边缘情况应该引发使用`201（已创建）`状态码创建资源。
- en: Another set of constraints applies on the `DELETE` requests that are successfully
    received. Those should return a `204 (No Content)` status code or a `200 (OK)`
    if the deletion has been processed. If not, the status code should be `202 (Accepted)`.
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组约束适用于成功接收的`DELETE`请求。这些请求应返回`204（无内容）`状态码，或者如果删除已经被处理，则返回`200（OK）`。如果没有，则状态码应为`202（已接受）`。
- en: Mapping request payloads with @RequestBody
  id: totrans-3152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用@RequestBody映射请求有效载荷
- en: In [Chapter 4](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building a REST API for
    a Stateless Architecture"), *Building a REST API for a Stateless Architecture*,
    we have presented the `RequestMappingHandlerAdapter`. We have seen that Spring
    MVC delegates to this bean to provide an extended support to `@RequestMapping`
    annotations.
  id: totrans-3153
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0095.xhtml#aid-2QJ5E1 "第4章。为无状态架构构建REST API")中，*为无状态架构构建REST API*，我们介绍了`RequestMappingHandlerAdapter`。我们已经看到Spring
    MVC委托给这个bean来提供对`@RequestMapping`注解的扩展支持。
- en: In this perspective, `RequestMappingHandlerAdapter` is the central piece to
    access and override `HttpMessageConverters` through `getMessageConverters()` and
    `setMessageConverters(List<HttpMessageConverter<?>> messageConverters)`.
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个角度来看，`RequestMappingHandlerAdapter`是访问和重写`HttpMessageConverters`的中心组件，通过`getMessageConverters()`和`setMessageConverters(List<HttpMessageConverter<?>>
    messageConverters)`。
- en: The role of `@RequestBody` annotations is tightly coupled to `HttpMessageConverters`.
    We will introduce the `HttpMessageConverters` now.
  id: totrans-3155
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestBody`注解的作用与`HttpMessageConverters`紧密耦合。我们现在将介绍`HttpMessageConverters`。'
- en: HttpMessageConverters
  id: totrans-3156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HttpMessageConverters
- en: '`HttpMessageConverters`, custom or native, are bound to specific mime types.
    They are used in the following instances:'
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpMessageConverters`，自定义或本机，绑定到特定的MIME类型。它们在以下情况下使用：'
- en: To convert Java objects into HTTP response payloads. Selected from `Accept`
    request header mime types, they serve the `@ResponseBody` annotation's purposes
    (and indirectly `@RestController` annotations that abstract the `@ResponseBody`
    annotations).
  id: totrans-3158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java对象转换为HTTP响应有效载荷。从`Accept`请求头MIME类型中选择，它们为`@ResponseBody`注解的目的提供服务（间接地为抽象`@ResponseBody`注解的`@RestController`注解提供服务）。
- en: To convert HTTP request payloads into Java objects. Selected from the `Content-Type`
    request header mime types, these converters are called when the `@RequestBody`
    annotation are present on a method handler argument.
  id: totrans-3159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTTP请求有效载荷转换为Java对象。从`Content-Type`请求头MIME类型中选择，这些转换器在方法处理程序参数上存在`@RequestBody`注解时被调用。
- en: 'More generally, `HttpMessageConverters` match the following `HttpMessageConverter`
    interface:'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，`HttpMessageConverters`匹配以下`HttpMessageConverter`接口：
- en: '[PRE326]'
  id: totrans-3161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'The `getSupportedMediaTypes()` method returns the list of `mediaTypes` (mime
    types) that a specific converter supports. This method is mainly used for reporting
    purposes and for the `canRead` and `canWrite` implementations. These `canRead`
    and `canWrite` eligibility methods are used by the framework to pick up at runtime
    the first `HttpMessageConverter` that either:'
  id: totrans-3162
  prefs: []
  type: TYPE_NORMAL
  zh: '`getSupportedMediaTypes()`方法返回特定转换器支持的`mediaTypes`（MIME类型）列表。这个方法主要用于报告目的和`canRead`和`canWrite`实现。这些`canRead`和`canWrite`资格方法由框架在运行时使用，首先选择`HttpMessageConverter`，它要么：'
- en: Matches the client-provided `Content-Type` request header for the given Java
    class targeted by `@RequestBody`
  id: totrans-3163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配客户端提供的`Content-Type`请求头，针对`@RequestBody`指定的Java类。
- en: Matches the client-provided `Accept` request header for the Java class that
    the HTTP response-payload will correspond to `(`the Type targeted by `@ResponseBody`)
  id: totrans-3164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配客户端提供的`Accept`请求头，以便HTTP响应有效载荷对应于`@ResponseBody`指定的Java类（`@ResponseBody`指定的类型）。
- en: Provided HttpMessageConverters
  id: totrans-3165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提供了HttpMessageConverters
- en: With the latest versions of Spring MVC (4+), a few extra `HttpMessageConverters`
    come natively with the framework. We have thought that summarizing them would
    be helpful. The following table represents all the native `HttpMessageConverters`,
    the mime types, and the Java Types they can be associated with. Short descriptions,
    mostly coming from the JavaDoc, give more insight about each of them.
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在最新版本的Spring MVC（4+）中，一些额外的`HttpMessageConverters`与框架一起自然而然地出现。我们认为总结它们会有所帮助。以下表格表示了所有本地的`HttpMessageConverters`，mime类型以及它们可以关联的Java类型。大部分来自JavaDoc的简短描述更多地揭示了它们的特点。
    |'
- en: '| URI | Supported MediaTypes (by default) | Convert to/from |'
  id: totrans-3167
  prefs: []
  type: TYPE_TB
  zh: '| URI | 支持的媒体类型（默认） | 转换为/从 |'
- en: '| --- | --- | --- |'
  id: totrans-3168
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `FormHttpMessage Converter` | Can READ/WRITE application/x-www-form-urlencoded,Can
    READ multipart/form-data. | `MultiValueMap<String, ?>` |'
  id: totrans-3169
  prefs: []
  type: TYPE_TB
  zh: '| `FormHttpMessage Converter` | 可以读/写application/x-www-form-urlencoded，可以读取multipart/form-data。
    | `MultiValueMap<String, ?>` |'
- en: '| For part conversions, it also embeds (by default) `ByteArrayHttpMessageConverter`,
    `StringHttpMessageConverter` and `ResourceHttpMessageConverter`. |'
  id: totrans-3170
  prefs: []
  type: TYPE_TB
  zh: '| 对于部分转换，默认还嵌入了`ByteArrayHttpMessageConverter`、`StringHttpMessageConverter`和`ResourceHttpMessageConverter`。
    |'
- en: '| `AllEncompassing FormHttpMessage Converter` | Can READ/WRITE application/x-www-form-urlencoded,Can
    READ multipart/form-data. | `MultiValueMap<String, ?>` |'
  id: totrans-3171
  prefs: []
  type: TYPE_TB
  zh: '| `AllEncompassing FormHttpMessage Converter` | 可以读/写application/x-www-form-urlencoded，可以读取multipart/form-data。
    | `MultiValueMap<String, ?>` |'
- en: '| This converter extends `FormHttpMessageConverter` embedding extra `HttpMessageConverters`
    JAXB or Jackson if they are found in the classpath for XML/JSON-based parts. |'
  id: totrans-3172
  prefs: []
  type: TYPE_TB
  zh: '| 这个转换器扩展了`FormHttpMessageConverter`，通过在类路径上找到XML/JSON-based部分的JAXB或Jackson来嵌入额外的`HttpMessageConverters`。
    |'
- en: '| `XmlAwareFormHttp MessageConverter` | Can READ/WRITE application/x-www-form-urlencoded,Can
    READ multipart/form-data. | `MultiValueMap<String, ?>` |'
  id: totrans-3173
  prefs: []
  type: TYPE_TB
  zh: '| `XmlAwareFormHttp MessageConverter` | 可以读/写application/x-www-form-urlencoded，可以读取multipart/form-data。
    | `MultiValueMap<String, ?>` |'
- en: '| This converter extends `FormHttpMessageConverter`, adding support for XML-based
    parts through a `SourceHttpMessageConverter`. |'
  id: totrans-3174
  prefs: []
  type: TYPE_TB
  zh: '| 这个转换器扩展了`FormHttpMessageConverter`，通过`SourceHttpMessageConverter`添加了对基于XML的部分的支持。
    |'
- en: '| `BufferedImageHttp MessageConverter` | Can READ all media types that are
    supported by the registered image readers.Can WRITE the media type of the first
    available registered image writer. | `java.awt.image.BufferedImage` |'
  id: totrans-3175
  prefs: []
  type: TYPE_TB
  zh: '| `BufferedImageHttp MessageConverter` | 可以读取所有已注册的图像阅读器支持的媒体类型。可以写入第一个可用的已注册图像写入器的媒体类型。
    | `java.awt.image.BufferedImage` |'
- en: '| `ByteArrayHttp MessageConverter` | Can READ */*,WRITE with application/octet-stream.
    | `byte[]` |'
  id: totrans-3176
  prefs: []
  type: TYPE_TB
  zh: '| `ByteArrayHttp MessageConverter` | 可以读取*/*，可以写入application/octet-stream。
    | `byte[]` |'
- en: '| `GsonHttpMessage Converter` | CAN READ/WRITE application/json, application/*+json.
    | `java.lang.Object` |'
  id: totrans-3177
  prefs: []
  type: TYPE_TB
  zh: '| `GsonHttpMessage Converter` | 可以读/写application/json, application/*+json。
    | `java.lang.Object` |'
- en: '| Uses the Google Gson library''s `Gson` class. This converter can be used
    to bind with typed beans or untyped HashMaps. |'
  id: totrans-3178
  prefs: []
  type: TYPE_TB
  zh: '| 使用Google Gson库的`Gson`类。这个转换器可以用来绑定带有类型的bean或无类型的HashMap。 |'
- en: '| `Jaxb2Collection HttpMessage Converter` | Can READ XML collections. | `T
    extends java.util.Collection` |'
  id: totrans-3179
  prefs: []
  type: TYPE_TB
  zh: '| `Jaxb2Collection HttpMessage Converter` | 可以读取XML集合。 | `T extends java.util.Collection`
    |'
- en: '| This converter can read collections that contain classes annotated with `XmlRootElement`
    and `XmlType`. Note that this converter does not support writing. (JAXB2 must
    be present on the classpath.) |'
  id: totrans-3180
  prefs: []
  type: TYPE_TB
  zh: '| 这个转换器可以读取包含带有`XmlRootElement`和`XmlType`注释的类的集合。请注意，这个转换器不支持写入。（JAXB2必须存在于类路径上。）
    |'
- en: '| `Jaxb2RootElement HttpMessage Converter` | Can READ/WRITE XML | `java.lang.Object`
    |'
  id: totrans-3181
  prefs: []
  type: TYPE_TB
  zh: '| `Jaxb2RootElement HttpMessage Converter` | 可以读/写XML | `java.lang.Object`
    |'
- en: '| This converter can read classes annotated with `XmlRootElement` and `XmlType`,
    and write classes annotated with `XmlRootElement` or subclasses thereof. (JAXB2
    must be present on the classpath.) |'
  id: totrans-3182
  prefs: []
  type: TYPE_TB
  zh: '| 这个转换器可以读取带有`XmlRootElement`和`XmlType`注释的类，并写入带有`XmlRootElement`或其子类注释的类。（JAXB2必须存在于类路径上。）
    |'
- en: '| `MappingJackson2 HttpMessage Converter` | Can READ/WRITE application/json,
    application/*+json. | `java.lang.Object` |'
  id: totrans-3183
  prefs: []
  type: TYPE_TB
  zh: '| `MappingJackson2 HttpMessage Converter` | 可以读/写application/json, application/*+json。
    | `java.lang.Object` |'
- en: '| Uses Jackson 2.x ObjectMapper. This converter can be used to bind with typed
    beans or untyped HashMap instances. (Jackson 2 must present on the classpath.)
    |'
  id: totrans-3184
  prefs: []
  type: TYPE_TB
  zh: '| 使用Jackson 2.x ObjectMapper。这个转换器可以用来绑定带有类型的bean或无类型的HashMap实例。（Jackson 2必须存在于类路径上。）
    |'
- en: '| `MappingJackson2 XmlHttpMessage Converter` | Can READ/WRITE application/xml,
    text/xml, application/*+xml. | `java.lang.Object` |'
  id: totrans-3185
  prefs: []
  type: TYPE_TB
  zh: '| `MappingJackson2 XmlHttpMessage Converter` | 可以读/写application/xml, text/xml,
    application/*+xml。 | `java.lang.Object` |'
- en: '| This uses the Jackson 2.x extension component for reading and writing XML
    encoded data ([https://github.com/FasterXML/jackson-dataformat-xml](https://github.com/FasterXML/jackson-dataformat-xml)).
    (Jackson 2 must be present on the classpath.) |'
  id: totrans-3186
  prefs: []
  type: TYPE_TB
  zh: '| 这使用了Jackson 2.x扩展组件来读取和写入XML编码的数据（[https://github.com/FasterXML/jackson-dataformat-xml](https://github.com/FasterXML/jackson-dataformat-xml)）。（Jackson
    2必须存在于类路径上。） |'
- en: '| `MarshallingHttp MessageConverter` | Can READ/WRITE text/xml application/xml.
    | `java.lang.Object` |'
  id: totrans-3187
  prefs: []
  type: TYPE_TB
  zh: '| `MarshallingHttp MessageConverter` | 可以读/写text/xml application/xml。 | `java.lang.Object`
    |'
- en: '| This uses Spring''s Marshaller and Unmarshaller abstractions (OXM). |'
  id: totrans-3188
  prefs: []
  type: TYPE_TB
  zh: '| 这使用了Spring的Marshaller和Unmarshaller抽象（OXM）。 |'
- en: '| `ObjectToStringHttp MessageConverter` | Can READ/WRITE text/plain. | `java.lang.Object`
    |'
  id: totrans-3189
  prefs: []
  type: TYPE_TB
  zh: '| `ObjectToStringHttp MessageConverter` | 可以读/写text/plain。 | `java.lang.Object`
    |'
- en: '| This uses `StringHttpMessageConverter` for reading and writing content and
    a `ConversionService` for converting the String content to and from the target
    object type. (It must be configured). |'
  id: totrans-3190
  prefs: []
  type: TYPE_TB
  zh: '| 这使用`StringHttpMessageConverter`来读取和写入内容，并使用`ConversionService`来将字符串内容转换为目标对象类型和从目标对象类型转换为字符串内容。（必须进行配置。）
    |'
- en: '| `ProtobufHttp MessageConverter` | Can READ application/json, application/xml,
    text/plain and application/x-protobuf.Can WRITE application/json, application/xml,
    text/plain and application/x-protobuf, text/html. | `javax.mail.Message` |'
  id: totrans-3191
  prefs: []
  type: TYPE_TB
  zh: '| `ProtobufHttp MessageConverter` | 可以读取application/json, application/xml,
    text/plain和application/x-protobuf。可以写入application/json, application/xml, text/plain和application/x-protobuf,
    text/html。 | `javax.mail.Message` |'
- en: '| This uses Google protocol buffers ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    to generate message Java classes you need to install the `protoc` binary. |'
  id: totrans-3192
  prefs: []
  type: TYPE_TB
  zh: 使用Google协议缓冲区（[https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers)）生成消息Java类，您需要安装`protoc`二进制文件。
- en: '| `ResourceHttp MessageConverter` | Can READ/WRITE */*. | `org.springframework.core.io.Resource`
    |'
  id: totrans-3193
  prefs: []
  type: TYPE_TB
  zh: '`ResourceHttp MessageConverter` | 可以读取/写入*/*。| `org.springframework.core.io.Resource`'
- en: '| The **Java Activation Framework** (**JAF**), if available, is used to determine
    the content-type of written resources. If JAF is not available, application/octet-stream
    is used. |'
  id: totrans-3194
  prefs: []
  type: TYPE_TB
  zh: 如果可用，**Java激活框架**（**JAF**）用于确定写入资源的内容类型。如果JAF不可用，则使用application/octet-stream。
- en: '| `RssChannelHttp MessageConverter` | Can READ/WRITE application/rss+xml. |
    `com.rometools.rome.feed.rss.Channel` |'
  id: totrans-3195
  prefs: []
  type: TYPE_TB
  zh: '`RssChannelHttp MessageConverter` | 可以读取/写入application/rss+xml。| `com.rometools.rome.feed.rss.Channel`'
- en: '| This converter can handle Channel objects from the ROME project ([https://github.com/rometools](https://github.com/rometools)).
    (ROME must be present on the classpath.) |'
  id: totrans-3196
  prefs: []
  type: TYPE_TB
  zh: 此转换器可以处理来自ROME项目（[https://github.com/rometools](https://github.com/rometools)）的Channel对象。（ROME必须存在于类路径上。）
- en: '| `AtomFeedHttp MessageConverter` | Can READ/WRITE application/atom+xml. |
    `com.rometools.rome.feed.atom.Feed` |'
  id: totrans-3197
  prefs: []
  type: TYPE_TB
  zh: '`AtomFeedHttp MessageConverter` | 可以读取/写入application/atom+xml。| `com.rometools.rome.feed.atom.Feed`'
- en: '| This can handle Atom feeds from the ROME project ([https://github.com/rometools](https://github.com/rometools)).
    (ROME must be present on the classpath.) |'
  id: totrans-3198
  prefs: []
  type: TYPE_TB
  zh: 这可以处理来自ROME项目（[https://github.com/rometools](https://github.com/rometools)）的Atom
    feeds。（ROME必须存在于类路径上。）
- en: '| SourceHttpMessageConverter | Can READ/WRITE text/xml, application/xml, application/*-xml.
    | `javax.xml.transform.Source` |'
  id: totrans-3199
  prefs: []
  type: TYPE_TB
  zh: '`SourceHttpMessageConverter` | 可以读取/写入text/xml，application/xml，application/*-xml。|
    `javax.xml.transform.Source`'
- en: '| `StringHttpMessageConverter` | Can READ/WRITE */*. | `java.lang.String` |'
  id: totrans-3200
  prefs: []
  type: TYPE_TB
  zh: '`StringHttpMessageConverter` | 可以读取/写入*/*。| `java.lang.String`'
- en: Using MappingJackson2HttpMessageConverter
  id: totrans-3201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用MappingJackson2HttpMessageConverter
- en: In this recipe, the `MappingJackson2HttpMessageConverter` is used extensively.
    We used this converter for both the financial transaction creation/update side
    and the User-Preferences update side.
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`MappingJackson2HttpMessageConverter`被广泛使用。我们将此转换器用于财务交易创建/更新方面和用户首选项更新方面。
- en: Alternatively, we used AngularJS to map an HTML form to a built json object
    whose properties match our Entities. Proceeding this way, we `POST`/`PUT` the
    `json` object as the `application/json` mime type.
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们使用AngularJS将HTML表单映射到构建的json对象，其属性与我们的实体匹配。通过这种方式，我们将`json`对象作为`application/json`媒体类型进行`POST`/`PUT`。
- en: This method has been preferred to posting an `application/x-www-form-urlencoded`
    form content, because we can actually map the object to an Entity. In our case,
    the form matches exactly a backend resource. This is a beneficial result (and
    constraint) of a REST design.
  id: totrans-3204
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以选择这种方法而不是发布`application/x-www-form-urlencoded`表单内容，是因为我们实际上可以将对象映射到实体。在我们的情况下，表单与后端资源完全匹配。这是REST设计的一个有益结果（和约束）。
- en: Using @RequestPart to upload an image
  id: totrans-3205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用@RequestPart上传图像
- en: The `@RequestPart` annotation can be used to associate part of a `multipart/form-data`
    request with a method argument. It can be used with argument Types such as `org.springframework.web.multipart.MultipartFile`
    and `javax.servlet.http.Part`.
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestPart`注解可用于将`multipart/form-data`请求的一部分与方法参数关联起来。它可以与参数类型一起使用，例如`org.springframework.web.multipart.MultipartFile`和`javax.servlet.http.Part`。'
- en: For any other argument Types, the content of the part is passed through an `HttpMessageConverter`
    just like `@RequestBody`.
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何其他参数类型，部分内容都会像`@RequestBody`一样通过`HttpMessageConverter`传递。
- en: 'The `@RequestBody` annotation has been implemented to handle the user-profile
    picture. Here''s our sample implementation from the `UserImageController`:'
  id: totrans-3208
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestBody`注解已被实现以处理用户个人资料图片。以下是我们从`UserImageController`的示例实现：'
- en: '[PRE327]'
  id: totrans-3209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: The file part of the request is injected as an argument. A new file is created
    on the server filesystem from the content of the request file. A new `Location`
    header is added to the Response with a link to the created image.
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的文件部分被注入为参数。从请求文件的内容在服务器文件系统上创建一个新文件。响应中添加了一个新的`Location`头，其中包含指向创建的图像的链接。
- en: On the client side, this header is read and injected as `background-image` CSS
    property for our div (see `user-account.html`).
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端上，此标头被读取并注入为我们div的`background-image` CSS属性（请参见`user-account.html`）。
- en: Transaction management
  id: totrans-3212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事务管理
- en: The recipe highlights the basic principles we applied to handle transactions
    across the different layers of our REST architecture. Transaction management is
    a whole chapter in itself and we are constrained here to present just an overview.
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例突出了我们在处理REST架构不同层之间的事务时应用的基本原则。事务管理本身是一个完整的章节，我们在这里只能呈现概述。
- en: The simplistic approach
  id: totrans-3214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简单的方法
- en: To build our transaction management, we kept in mind that Spring MVC Controllers
    are not transactional. Under this light, we cannot expect a transaction management
    over two different service calls in the same method handler of a Controller. Each
    service call starts a new transaction, and this transaction is expected to terminate
    when the result is returned.
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建事务管理时，我们牢记Spring MVC控制器不是事务性的。在这种情况下，我们不能期望在控制器的同一方法处理程序中通过两个不同的服务调用进行事务管理。每个服务调用都会启动一个新的事务，并且预期该事务在返回结果时终止。
- en: We defined our services as `@Transactional(readonly="true")` at the Type level,
    then methods the that need Write access override this definition with an extra
    `@Transactional` annotation at the method level. The *tenth step* of our recipe
    presents the Transactional changes on the `TransactionServiceImpl` service**.**
    With the default propagation, transactions are maintained and reused between Transactional
    services, repositories, or methods.
  id: totrans-3216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将服务定义为`@Transactional(readonly="true")`在类型级别，然后需要写访问权限的方法会在方法级别覆盖此定义，添加额外的`@Transactional`注解。我们的示例的第十步介绍了`TransactionServiceImpl`服务上的事务更改。使用默认传播，事务在事务性服务、存储库或方法之间得到维护和重用。
- en: By default, abstracted Spring Data JPA repositories are transactional. We only
    had to specify transactional behaviors to our custom repositories, as we did for
    our services.
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，抽象的Spring Data JPA存储库是事务性的。我们只需要为我们的自定义存储库指定事务行为，就像我们为我们的服务所做的那样。
- en: The *eleventh step* of our recipe shows the Transactional changes made on the
    custom repository `IndexRepositoryImpl`.
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配方的*第十一步*显示了对自定义存储库`IndexRepositoryImpl`进行的事务更改。
- en: There's more…
  id: totrans-3219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: As mentioned earlier, we configured a consistent transaction management over
    the different layers of our application.
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们在应用程序的不同层上配置了一致的事务管理。
- en: Transaction management
  id: totrans-3221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事务管理
- en: Our coverage is limited and we advise you to find external information about
    the following topics if you are not familiar with them.
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的覆盖范围有限，如果您对以下主题不熟悉，我们建议您寻找外部信息。
- en: ACID properties
  id: totrans-3223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ACID属性
- en: 'Four properties/concepts are frequently used to assess the transaction''s reliability.
    It is therefore useful and important to keep them in mind when designing transactions.
    Those properties are Atomicity, Consistency, Isolation and Durability. Read more
    about ACID transactions on the Wikipedia page:'
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个属性/概念经常用于评估事务的可靠性。因此，在设计事务时将它们牢记在心是有用且重要的。这些属性是原子性，一致性，隔离性和持久性。在维基百科页面上了解更多关于ACID事务的信息：
- en: '[https://en.wikipedia.org/wiki/ACID](https://en.wikipedia.org/wiki/ACID)'
  id: totrans-3225
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/ACID](https://en.wikipedia.org/wiki/ACID)'
- en: Global versus local transactions
  id: totrans-3226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全局与本地事务
- en: We only defined local transactions in the application. Local transactions are
    managed at the application level and cannot be propagated across multiple Tomcat
    servers. Also, local transactions cannot ensure consistency when more than one
    transactional resource type is involved. For example, in a use case of database
    operations associated with messaging, when we rollback a message that couldn’t
    have been delivered, we might need to also rollback the related database operations
    that have happened beforehand. Only global transactions implementing 2-step commits
    can take on this kind of responsibility. Global transactions are handled by JTA
    transaction manager implementations.
  id: totrans-3227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只在应用程序中定义了本地事务。本地事务是在应用程序级别管理的，不能在多个Tomcat服务器之间传播。此外，当涉及多个事务资源类型时，本地事务无法确保一致性。例如，在与消息相关的数据库操作的用例中，当我们回滚无法传递的消息时，我们可能还需要回滚之前发生的相关数据库操作。只有实现了两阶段提交的全局事务才能承担这种责任。全局事务由JTA事务管理器实现处理。
- en: 'Read more about the difference in this Spring reference document:'
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Spring参考文档中了解更多关于这个差异：
- en: '[http://docs.spring.io/spring/docs/2.0.8/reference/transaction.html](http://docs.spring.io/spring/docs/2.0.8/reference/transaction.html)'
  id: totrans-3229
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/2.0.8/reference/transaction.html](http://docs.spring.io/spring/docs/2.0.8/reference/transaction.html)'
- en: Historically, JTA transaction managers were exclusively provided by J2EE/JEE
    containers. With application-level JTA transaction manager implementations, we
    now have other alternatives such as Atomikos ([http://www.atomikos.com](http://www.atomikos.com)),
    Bitronix ([https://github.com/bitronix/btm](https://github.com/bitronix/btm)),
    or JOTM ([http://jotm.ow2.org/xwiki/bin/view/Main/WebHome](http://jotm.ow2.org/xwiki/bin/view/Main/WebHome))
    to assure global transactions in J2SE environments.
  id: totrans-3230
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，JTA事务管理器是由J2EE/JEE容器专门提供的。现在，我们有其他选择，如Atomikos ([http://www.atomikos.com](http://www.atomikos.com))，Bitronix
    ([https://github.com/bitronix/btm](https://github.com/bitronix/btm))或JOTM ([http://jotm.ow2.org/xwiki/bin/view/Main/WebHome](http://jotm.ow2.org/xwiki/bin/view/Main/WebHome))等应用级JTA事务管理器实现，以确保J2SE环境中的全局事务。
- en: Tomcat (7+) can also work along with application-level JTA transaction manager
    implementations to reflect the transaction management in the container using the
    `TransactionSynchronizationRegistry` and JNDI datasources.
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat（7+）也可以与应用级JTA事务管理器实现一起工作，以反映容器中的事务管理，使用`TransactionSynchronizationRegistry`和JNDI数据源。
- en: '[https://codepitbull.wordpress.com/2011/07/08/tomcat-7-with-full-jta](https://codepitbull.wordpress.com/2011/07/08/tomcat-7-with-full-jta)'
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://codepitbull.wordpress.com/2011/07/08/tomcat-7-with-full-jta](https://codepitbull.wordpress.com/2011/07/08/tomcat-7-with-full-jta)'
- en: See also
  id: totrans-3233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Performance and useful metadata benefits can be obtained from these three headers
    that are not detailed in the recipe.
  id: totrans-3234
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个标头可以从中获得性能和有用的元数据优势，这些在配方中没有详细说明。
- en: '**Cache-Control, ETag, and Last-Modified**: Spring MVC supports these headers
    and as an entry point, we suggest you check out the Spring reference: [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-caching-etag-lastmodified](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-caching-etag-lastmodified)'
  id: totrans-3235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cache-Control，ETag和Last-Modified**：Spring MVC支持这些标头，作为入口点，我们建议您查看Spring参考：[http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-caching-etag-lastmodified](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-caching-etag-lastmodified)'
- en: Validating resources using bean validation support
  id: totrans-3236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用bean验证支持来验证资源
- en: After introducing the request-payload data binding process, we must talk about
    validation.
  id: totrans-3237
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍请求有效负载数据绑定过程之后，我们必须谈论验证。
- en: Getting ready
  id: totrans-3238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The goal of this recipe is to show how to get Spring MVC to reject request body
    payloads that are not satisfying a bean validation (JSR-303) or not satisfying
    the constraints of a defined Spring validator implementation.
  id: totrans-3239
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的目标是展示如何让Spring MVC拒绝不满足bean验证（JSR-303）或不满足定义的Spring验证器实现约束的请求体有效负载。
- en: After the Maven and Spring configuration, we will see how to bind a validator
    to an incoming request, how to define the validator to perform custom rules, how
    to set up a JSR-303 validation, and how to handle the validation results.
  id: totrans-3240
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maven和Spring配置之后，我们将看到如何将验证器绑定到传入请求，如何定义验证器执行自定义规则，如何设置JSR-303验证，以及如何处理验证结果。
- en: How to do it…
  id: totrans-3241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We added a Maven dependency to the hibernate validator:'
  id: totrans-3242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个Maven依赖项到hibernate验证器：
- en: '[PRE328]'
  id: totrans-3243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'A `LocalValidatorFactoryBean` has been registered in our `dispatcher-servlet.xml`
    (`cloudstreetmarket-api`):'
  id: totrans-3244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`dispatcher-servlet.xml`（`cloudstreetmarket-api`）中注册了一个`LocalValidatorFactoryBean`：
- en: '[PRE329]'
  id: totrans-3245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'The `UsersController` and `TransactionController` have seen their `POST` and
    `PUT` method signature altered with the addition of a `@Valid` annotation on the
    `@RequestBody` arguments:'
  id: totrans-3246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`UsersController`和`TransactionController`的`POST`和`PUT`方法签名已经改变，增加了`@Valid`注释在`@RequestBody`参数上：'
- en: '[PRE330]'
  id: totrans-3247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Note
  id: totrans-3248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note here the `BindingResult` object injected as method argument. Also we will
    present the `ValidatorUtil` class in about a minute.
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里作为方法参数注入的`BindingResult`对象。我们将在大约一分钟内介绍`ValidatorUtil`类。
- en: 'Our two CRUD controllers now have a new `@InitBinder` annotated method:'
  id: totrans-3250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的两个CRUD控制器现在有了一个新的`@InitBinder`注释的方法：
- en: '[PRE331]'
  id: totrans-3251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: 'This method binds an instance of a created Validator implementation to the
    requests. Check out the created `UserValidator` which is `Validator` implementation:'
  id: totrans-3252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个方法将一个创建的验证器实现的实例绑定到请求。查看创建的`UserValidator`，它是`Validator`的实现：
- en: '[PRE332]'
  id: totrans-3253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'In the `User` entity, a couple of special annotations have been added:'
  id: totrans-3254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`User`实体中，添加了一些特殊的注释：
- en: '[PRE333]'
  id: totrans-3255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'We have created the `ValidatorUtil` class to make those validations easier
    and to reduce the amount of boilerplate code:'
  id: totrans-3256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了`ValidatorUtil`类，以使这些验证更容易，并减少样板代码的数量：
- en: '[PRE334]'
  id: totrans-3257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: 'The following `validate` method allows us to call for a JSR validation from
    whichever location that may require it:'
  id: totrans-3258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`validate`方法允许我们从任何可能需要的位置调用JSR验证：
- en: '[PRE335]'
  id: totrans-3259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'The following `raiseFirstError` method is not of a specific standard, it is
    our way of rendering to the client the server side errors:'
  id: totrans-3260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`raiseFirstError`方法不是特定标准的，这是我们向客户端呈现服务器端错误的方式：
- en: '[PRE336]'
  id: totrans-3261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'As per [Chapter 4](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building a REST API
    for a Stateless Architecture"), *Building a REST API for a Stateless Architecture*,
    the cloudstreetmarket-api''s `RestExceptionHandler` is still configured to handle
    `IllegalArgumentExceptions`, rendering them with `ErrorInfo` formatted responses:'
  id: totrans-3262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[第4章](part0095.xhtml#aid-2QJ5E1 "第4章。为无状态架构构建REST API")，*为无状态架构构建REST API*，cloudstreetmarket-api的`RestExceptionHandler`仍然配置为处理`IllegalArgumentExceptions`，并以`ErrorInfo`格式化的响应呈现它们：
- en: '[PRE337]'
  id: totrans-3263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Navigating through the UI improvements, you will notice a new form for updating
    the user's **Preferences**. This form is accessible via the **Login** menu, as
    shown in the following screenshots:![How to do it…](img/image00889.jpeg)![How
    to do it…](img/image00890.jpeg)
  id: totrans-3264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UI改进中浏览，您会注意到一个用于更新用户**首选项**的新表单。通过**登录**菜单可以访问这个表单，如下面的截图所示：![如何做…](img/image00889.jpeg)![如何做…](img/image00890.jpeg)
- en: 'In this user **Preferences** form, when the frontend validations are deactivated
    (frontend validations will be developed in the last recipe of this chapter), not
    filling the e-mail field results in the following (customizable) `ErrorInfo` object
    in the HTTP response:'
  id: totrans-3265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个用户**首选项**表单中，当前端验证被停用（前端验证将在本章的最后一个配方中开发），不填写电子邮件字段会导致以下（可定制的）`ErrorInfo`对象在HTTP响应中：
- en: '[PRE338]'
  id: totrans-3266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'On the frontend side, in order to handle this error, the `accountController`
    (in `account_management.js`) is instantiated with a dependency to a custom `errorHandler`
    factory. The code is as follows:'
  id: totrans-3267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前端，为了处理这个错误，`accountController`（在`account_management.js`中）实例化时依赖于一个自定义的`errorHandler`工厂。代码如下：
- en: '[PRE339]'
  id: totrans-3268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'The `accountController` has an `update` method that invokes the `errorHandler.renderOnForm`
    method:'
  id: totrans-3269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`accountController`有一个`update`方法，调用`errorHandler.renderOnForm`方法：'
- en: '[PRE340]'
  id: totrans-3270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: 'The `errorHandler` is defined as follows in `main_menu.js`. It has the capability
    to pull translations messages from `i18n` codes:'
  id: totrans-3271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main_menu.js`中定义了`errorHandler`如下。它具有从`i18n`代码中提取翻译消息的能力：'
- en: '[PRE341]'
  id: totrans-3272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'The **Preferences** form is as shown here:'
  id: totrans-3273
  prefs: []
  type: TYPE_NORMAL
  zh: '**首选项**表单如下所示：'
- en: '![How to do it…](img/image00891.jpeg)'
  id: totrans-3274
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image00891.jpeg)'
- en: Tip
  id: totrans-3275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As we said, to simulate this error, frontend validations need to be deactivated.
    This can be done adding a `novalidate` attribute to the `<form name="updateAccount"
    … novalidate>` markup in `user-account.html`.
  id: totrans-3276
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，要模拟这个错误，前端验证需要被停用。这可以通过在`user-account.html`中的`<form name="updateAccount"
    … novalidate>`标记中添加一个`novalidate`属性来实现。
- en: 'Back in the server side, we have also created a custom validator for the financial
    Transaction Entity. This validator makes use of the Spring `ValidationUtils`:'
  id: totrans-3277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端，我们还为财务交易实体创建了一个自定义验证器。这个验证器利用了Spring的`ValidationUtils`：
- en: '[PRE342]'
  id: totrans-3278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: How it works...
  id: totrans-3279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Using Spring validator
  id: totrans-3280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Spring验证器
- en: 'Spring offers a `Validator` interface (`org.sfw.validation.Validator`) for
    creating components to be injected or instantiated in the layer we want. Therefore,
    Spring validation components can be used in Spring MVC Controllers. The `Validator`
    interface is the following:'
  id: totrans-3281
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一个`Validator`接口(`org.sfw.validation.Validator`)，用于创建要注入或实例化在我们想要的层中的组件。因此，Spring验证组件可以在Spring
    MVC控制器中使用。`Validator`接口如下：
- en: '[PRE343]'
  id: totrans-3282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: The `supports(Class<?> clazz)` method is used to assess the domain of a `Validator`
    implementation, and also to restrict its use to a specific Type or super-Type.
  id: totrans-3283
  prefs: []
  type: TYPE_NORMAL
  zh: '`supports(Class<?> clazz)`方法用于评估`Validator`实现的域，也用于限制其使用到特定类型或超类型。'
- en: 'The `validate(Object target, Errors errors)` method imposes its standard so
    that the validation logic of the validator lives in this place. The passed `target`
    object is assessed, and the result of the validation is stored in an instance
    of the `org.springframework.validation.Errors` interface. A partial preview of
    the `Errors` interface is shown here:'
  id: totrans-3284
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate(Object target, Errors errors)`方法规定了其标准，使得验证器的验证逻辑存在于这个位置。传递的`target`对象被评估，验证的结果存储在`org.springframework.validation.Errors`接口的实例中。这里显示了`Errors`接口的部分预览：'
- en: '[PRE344]'
  id: totrans-3285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: 'Using Spring MVC, we have the possibility to bind and trigger a `Validator`
    to a specific method-handler. The framework looks for a validator instance bound
    to the incoming request. We have configured such a binding in our recipe at the
    *fourth step*:'
  id: totrans-3286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring MVC，我们有可能将`Validator`绑定和触发到特定的方法处理程序。框架会寻找绑定到传入请求的验证器实例。我们在*第四步*的配方中配置了这样的绑定：
- en: '[PRE345]'
  id: totrans-3287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Tip
  id: totrans-3288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We have already used the `@InitBinder` annotation to attach other objects (formatters)
    to incoming requests (see the *Binding requests, marshalling responses* recipe
    of the Chapter 4, *Building a REST API for a Stateless Architecture*).
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了 `@InitBinder` 注解将其他对象（格式化程序）附加到传入请求（参见第 4 章 *构建无状态架构的 REST API* 中的 *绑定请求，编组响应*
    教程）。
- en: The `Binders` (`org.springframework.validation.DataBinder`) allow setting property
    values onto a target object. Binders also provide support for validation and binding-results
    analysis.
  id: totrans-3290
  prefs: []
  type: TYPE_NORMAL
  zh: '`Binders` (`org.springframework.validation.DataBinder`) 允许将属性值设置到目标对象上。Binders
    还提供了对验证和绑定结果分析的支持。'
- en: The `DataBinder.validate()` method is called after each binding step and this
    method calls the `validate` of the primary validator attached to the `DataBinder`.
  id: totrans-3291
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataBinder.validate()` 方法在每个绑定步骤之后被调用，这个方法调用了附加到 `DataBinder` 的主验证器的 `validate`。'
- en: The binding-process populates a result object, which is an instance of the `org.springframework.validation.BindingResult`
    interface. This result object can be retrieved using the `DataBinder.getBindingResult()`
    method.
  id: totrans-3292
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定过程填充了一个结果对象，这是 `org.springframework.validation.BindingResult` 接口的一个实例。可以使用
    `DataBinder.getBindingResult()` 方法检索此结果对象。
- en: 'Actually, a `BindingResult` implementation is also an `Errors` implementation
    (as shown here). We have presented the `Errors` interface earlier. Check out the
    following code:'
  id: totrans-3293
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`BindingResult` 实现也是一个 `Errors` 实现（如此处所示）。我们之前介绍过 `Errors` 接口。查看以下代码：
- en: '[PRE346]'
  id: totrans-3294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'The whole design can be summarized as follows:'
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
  zh: 整个设计可以总结如下：
- en: We create a validator implementation. When an incoming request comes in for
    a specific Controller method handler, the request payload is converted into the
    class that is targeted by the `@RequestBody` annotation (an `Entity` in our case).
    An instance of our validator implementation is bound to the injected `@RequestBody`
    object. If the injected `@RequestBody` object is defined with a `@Valid` annotation,
    the framework asks `DataBinder` to validate the object on each binding step and
    to store errors in the `BindingResultobject` of `DataBinder`.
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个验证器实现。当特定控制器方法处理程序的传入请求到达时，请求有效负载将转换为由 `@RequestBody` 注解（在我们的案例中是一个 `Entity`）所针对的类的实例。我们的验证器实现的一个实例绑定到注入的
    `@RequestBody` 对象上。如果注入的 `@RequestBody` 对象使用 `@Valid` 注解定义，框架会要求 `DataBinder`
    在每个绑定步骤上验证对象，并将错误存储在 `DataBinder` 的 `BindingResultobject` 中。
- en: 'Finally, this `BindingResult` object is injected as argument of the method
    handler, so we can decide what to do with its errors (if any). During the binding
    process, missing fields and property access exceptions are converted into `FieldErrors`.
    These `FieldErrors` are also stored into the Errors instance. The following error
    codes are used for `FieldErrors`:'
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这个 `BindingResult` 对象被注入为方法处理程序的参数，因此我们可以决定如何处理它的错误（如果有的话）。在绑定过程中，缺少字段和属性访问异常被转换为
    `FieldErrors`。这些 `FieldErrors` 也被存储到 `Errors` 实例中。以下错误代码用于 `FieldErrors`：
- en: '[PRE347]'
  id: totrans-3298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'When it is necessary to return nicer error messages for the user, a `MessageSource`
    helps us to process a lookup and retrieve the right localized message from a `MessageSourceResolvable`
    implementation with the following method:'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要为用户返回更好的错误消息时，`MessageSource` 帮助我们处理查找并从 `MessageSourceResolvable` 实现中检索正确的本地化消息，方法如下：
- en: '[PRE348]'
  id: totrans-3300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: Tip
  id: totrans-3301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `FieldError` extends `ObjectError` and `ObjectError` extends `DefaultMessageSourceResolvable`,
    which is a `MessageSourceResolvable` implementation.
  id: totrans-3302
  prefs: []
  type: TYPE_NORMAL
  zh: '`FieldError` 扩展了 `ObjectError`，而 `ObjectError` 扩展了 `DefaultMessageSourceResolvable`，它是
    `MessageSourceResolvable` 的实现。'
- en: ValidationUtils
  id: totrans-3303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ValidationUtils
- en: The `ValodationUtils` utility class (`org.sfw.validation.ValidationUtils`) provides
    a couple of convenient static methods for invoking validators and rejecting empty
    fields. These utility methods allow one-line assertions that also handle at the
    same time, the population of the `Errors` objects. In this recipe, the 14th step
    details our `TransactionValidator` that makes use of `ValidationUtils`.
  id: totrans-3304
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValodationUtils` 实用程序类 (`org.sfw.validation.ValidationUtils`) 提供了一些方便的静态方法，用于调用验证器和拒绝空字段。这些实用方法允许一行断言，同时处理
    `Errors` 对象的填充。在这个教程中，第 14 步详细介绍了我们的 `TransactionValidator` 如何使用 `ValidationUtils`。'
- en: I18n validation errors
  id: totrans-3305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: I18n 验证错误
- en: 'The next recipe will focus on internationalization of errors and content. However,
    let''s see how we catch our errors from the controllers and how we display them.
    The `update` method of `UserController` has this custom method call on its first
    line:'
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个教程将专注于错误和内容的国际化。然而，让我们看看我们如何从控制器捕获错误以及如何显示它们。`UserController` 的 `update`
    方法在第一行有这个自定义方法调用：
- en: '[PRE349]'
  id: totrans-3307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: We created the `ValidatorUtil` support class for our needs; the idea was to
    throw an `IllegalArgumentException` for any type of error that can be detected
    by our validator. The `ValidatorUtil.raiseFirstError(result)` method call can
    also be found in the `TransactionController.update(…)` method-handler. This method-handler
    relies on the `TransactionValidator` presented in the *14th step.*
  id: totrans-3308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的需求创建了 `ValidatorUtil` 支持类；想法是对我们的验证器可以检测到的任何类型的错误抛出 `IllegalArgumentException`。`ValidatorUtil.raiseFirstError(result)`
    方法调用也可以在 `TransactionController.update(…)` 方法处理程序中找到。这个方法处理程序依赖于 *第 14 步* 中介绍的
    `TransactionValidator`。
- en: If you remember this `TransactionValidator`, it creates an error with a `transaction.quote.empty`
    message code when a quote object is not present in the financial Transaction object.
    An `IllegalArgumentException` is then thrown with the `transaction.quote.empty`
    message detail.
  id: totrans-3309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得这个 `TransactionValidator`，当财务交易对象中不存在报价对象时，它会创建一个带有 `transaction.quote.empty`
    消息代码的错误。然后会抛出一个带有 `transaction.quote.empty` 消息详细信息的 `IllegalArgumentException`。
- en: In the next recipe, we will revisit how a proper internationalized JSON response
    is built and sent back to the client from an `IllegalArgumentException`.
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个教程中，我们将重新审视如何构建并从 `IllegalArgumentException` 发送适当的国际化 JSON 响应给客户端。
- en: Using JSR-303/JSR-349 Bean Validation
  id: totrans-3311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 JSR-303/JSR-349 Bean 验证
- en: Spring Framework version 4 and above supports bean validation 1.0 (JSR-303)
    and bean validation 1.1 (JSR-349). It also adapts this bean validation to work
    with the `Validator` interface, and it allows the creation of class-level validators
    using annotations.
  id: totrans-3312
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 4及以上版本支持bean验证1.0（JSR-303）和bean验证1.1（JSR-349）。它还将此bean验证适配到`Validator`接口，并允许使用注解创建类级验证器。
- en: The two specifications, JSR-303 and JSR-349, define a set of constraints applicable
    to beans, as annotations from the `javax.validation.constraints` package.
  id: totrans-3313
  prefs: []
  type: TYPE_NORMAL
  zh: JSR-303和JSR-349这两个规范定义了一组适用于bean的约束，作为`javax.validation.constraints`包中的注解。
- en: Generally, a big advantage of using the code from specifications instead of
    the code from implementations is that we don't have to know which implementation
    is used. Also, the implementation can always potentially be replaced with another
    one.
  id: totrans-3314
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用规范中的代码而不是实现中的代码的一个很大的优势是我们不必知道使用的是哪个实现。此外，实现总是可以潜在地被另一个实现替换。
- en: Bean validation was originally designed for persistent beans. Even if the specification
    has a relatively low coupling to JPA, the reference implementation stays Hibernate
    validator. Having a persistence provider that supports those validation specifications
    is definitely an advantage. Now with JPA2, the persistent provider automatically
    calls for JSR-303 validation before persisting. Ensuring such validations from
    two different layers (controller and model) raises our confidence level.
  id: totrans-3315
  prefs: []
  type: TYPE_NORMAL
  zh: Bean验证最初是为持久性bean设计的。即使规范与JPA的耦合度相对较低，参考实现仍然是Hibernate验证器。具有支持这些验证规范的持久性提供程序绝对是一个优势。现在有了JPA2，持久性提供程序在持久化之前会自动调用JSR-303验证。确保来自两个不同层（控制器和模型）的这些验证会提高我们的信心水平。
- en: On-field constraint annotations
  id: totrans-3316
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字段约束注解
- en: We defined the `@NotNull` and `@Size` JSR-303 annotations on the presented `User`
    entity. There are obviously more than two annotations to be found in the specification.
  id: totrans-3317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在所呈现的`User`实体上定义了`@NotNull`和`@Size` JSR-303注解。显然，在规范中可以找到的注解不止两个。
- en: 'Here''s a table summarizing the package of annotations (`javax.validation.constraints`)
    in JEE7:'
  id: totrans-3318
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是JEE7中`javax.validation.constraints`注解包的摘要表：
- en: '| Annotation Type | Description |'
  id: totrans-3319
  prefs: []
  type: TYPE_TB
  zh: 注解类型 | 描述
- en: '| --- | --- |'
  id: totrans-3320
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `AssertFalse` | The annotated element must be false. |'
  id: totrans-3321
  prefs: []
  type: TYPE_TB
  zh: '`AssertFalse` | 被注释的元素必须为false。'
- en: '| `AssertFalse.List` | Defines several `AssertFalse` annotations on the same
    element. |'
  id: totrans-3322
  prefs: []
  type: TYPE_TB
  zh: '`AssertFalse.List` | 在同一个元素上定义了几个`AssertFalse`注解。'
- en: '| `AssertTrue` | The annotated element must be true. |'
  id: totrans-3323
  prefs: []
  type: TYPE_TB
  zh: '`AssertTrue` | 被注释的元素必须为true。'
- en: '| `AssertTrue.List` | Defines several `AssertTrue` annotations on the same
    element. |'
  id: totrans-3324
  prefs: []
  type: TYPE_TB
  zh: '`AssertTrue.List` | 在同一个元素上定义了几个`AssertTrue`注解。'
- en: '| `DecimalMax` | The annotated element must be a number whose value must be
    lower or equal to the specified maximum. |'
  id: totrans-3325
  prefs: []
  type: TYPE_TB
  zh: '`DecimalMax` | 被注释的元素必须是一个数，其值必须低于或等于指定的最大值。'
- en: '| `DecimalMax.List` | Defines several `DecimalMax` annotations on the same
    element. |'
  id: totrans-3326
  prefs: []
  type: TYPE_TB
  zh: '`DecimalMax.List` | 在同一个元素上定义了几个`DecimalMax`注解。'
- en: '| `DecimalMin` | The annotated element must be a number whose value must be
    higher or equal to the specified minimum. |'
  id: totrans-3327
  prefs: []
  type: TYPE_TB
  zh: '`DecimalMin` | 被注释的元素必须是一个数，其值必须高于或等于指定的最小值。'
- en: '| `DecimalMin.List` | Defines several `DecimalMin` annotations on the same
    element. |'
  id: totrans-3328
  prefs: []
  type: TYPE_TB
  zh: '`DecimalMin.List` | 在同一个元素上定义了几个`DecimalMin`注解。'
- en: '| `Digits` | The annotated element must be a number within the accepted range.
    Supported types are: `BigDecimal`, `BigInteger`, `CharSequence`, `byte`, `short`,
    `int`, `long`, and their respective wrapper types. However, null elements are
    considered valid. |'
  id: totrans-3329
  prefs: []
  type: TYPE_TB
  zh: '`Digits` | 被注释的元素必须是在接受范围内的数字。支持的类型有：`BigDecimal`、`BigInteger`、`CharSequence`、`byte`、`short`、`int`、`long`及其相应的包装类型。但是，`null`元素被视为有效。'
- en: '| `Digits.List` | Defines several `Digits` annotations on the same element.
    |'
  id: totrans-3330
  prefs: []
  type: TYPE_TB
  zh: '`Digits.List` | 在同一个元素上定义了几个`Digits`注解。'
- en: '| `Future` | The annotated element must be a date in the future. |'
  id: totrans-3331
  prefs: []
  type: TYPE_TB
  zh: '`Future` | 被注释的元素必须是将来的日期。'
- en: '| `Future.List` | Defines several `Future` annotations on the same element.
    |'
  id: totrans-3332
  prefs: []
  type: TYPE_TB
  zh: '`Future.List` | 在同一个元素上定义了几个`Future`注解。'
- en: '| `Max` | The annotated element must be a number whose value must be lower
    than or equal to the specified maximum. |'
  id: totrans-3333
  prefs: []
  type: TYPE_TB
  zh: '`Max` | 被注释的元素必须是一个数，其值必须低于或等于指定的最大值。'
- en: '| `Max.List` | Defines several `Max` annotations on the same element. |'
  id: totrans-3334
  prefs: []
  type: TYPE_TB
  zh: '`Max.List` | 在同一个元素上定义了几个`Max`注解。'
- en: '| `Min` | The annotated element must be a number whose value must be higher
    than or equal to the specified minimum. |'
  id: totrans-3335
  prefs: []
  type: TYPE_TB
  zh: '`Min` | 被注释的元素必须是一个数，其值必须高于或等于指定的最小值。'
- en: '| `Min.List` | Defines several `Min` annotations on the same element. |'
  id: totrans-3336
  prefs: []
  type: TYPE_TB
  zh: '`Min.List` | 在同一个元素上定义了几个`Min`注解。'
- en: '| `NotNull` | The annotated element must not be `null`. |'
  id: totrans-3337
  prefs: []
  type: TYPE_TB
  zh: '`NotNull` | 被注释的元素不得为`null`。'
- en: '| `NotNull.List` | Defines several `NotNull` annotations on the same element.
    |'
  id: totrans-3338
  prefs: []
  type: TYPE_TB
  zh: '`NotNull.List` | 在同一个元素上定义了几个`NotNull`注解。'
- en: '| `Past` | The annotated element must be a date in the past. |'
  id: totrans-3339
  prefs: []
  type: TYPE_TB
  zh: '`Past` | 被注释的元素必须是过去的日期。'
- en: '| `Past.List` | Defines several `Past` annotations on the same element. |'
  id: totrans-3340
  prefs: []
  type: TYPE_TB
  zh: '`Past.List` | 在同一个元素上定义了几个`Past`注解。'
- en: '| `Pattern` | The annotated `CharSequence` must match the specified regular
    expression. |'
  id: totrans-3341
  prefs: []
  type: TYPE_TB
  zh: '`Pattern` | 被注释的`CharSequence`必须匹配指定的正则表达式。'
- en: '| `Pattern.List` | Defines several `Pattern` annotations on the same element.
    |'
  id: totrans-3342
  prefs: []
  type: TYPE_TB
  zh: '`Pattern.List` | 在同一个元素上定义了几个`Pattern`注解。'
- en: '| `Size` | The annotated element size must be between the specified boundaries
    (included). |'
  id: totrans-3343
  prefs: []
  type: TYPE_TB
  zh: '`Size` | 被注释的元素大小必须在指定的边界之间（包括在内）。'
- en: '| `Size.List` | Defines several `Size` annotations on the same element. |'
  id: totrans-3344
  prefs: []
  type: TYPE_TB
  zh: '`Size.List` | 在同一个元素上定义了几个`Size`注解。'
- en: Implementation-specific constraints
  id: totrans-3345
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 特定于实现的约束
- en: Bean validation implementations can also go beyond the specification and offer
    their set of extra validation annotations. Hibernate validator has a few interesting
    ones such as `@NotBlank`, `@SafeHtml`, `@ScriptAssert`, `@CreditCardNumber`, `@Email`,
    and so on. These are all listed from the hibernate documentation accessible at
    the following URL
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: Bean验证实现也可以超出规范，并提供它们自己的一组额外验证注释。Hibernate验证器有一些有趣的注释，如`@NotBlank`，`@SafeHtml`，`@ScriptAssert`，`@CreditCardNumber`，`@Email`等。这些都列在hibernate文档中，可在以下URL访问
- en: '[http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#table-custom-constraints](http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#table-custom-constraints)'
  id: totrans-3347
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#table-custom-constraints](http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#table-custom-constraints)'
- en: LocalValidator (reusable)
  id: totrans-3348
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: LocalValidator（可重用）
- en: 'We have defined the following validator bean in our Spring context:'
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Spring上下文中定义了以下验证器bean：
- en: '[PRE350]'
  id: totrans-3350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: This bean produces validator instances that implement JSR-303 and JSR-349\.
    You can configure a specific provider class here. By default, Spring looks in
    the classpath for the Hibernate Validator JAR. Once this bean is defined, it can
    be injected wherever it is needed.
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: 此bean生成实现JSR-303和JSR-349的验证器实例。您可以在这里配置特定的提供程序类。默认情况下，Spring在类路径中查找Hibernate
    Validator JAR。一旦定义了这个bean，它就可以被注入到需要的任何地方。
- en: We have injected such validator instances in our `UserValidator` and this makes
    it compliant with JSR-303 and JSR-349.
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的`UserValidator`中注入了这样的验证器实例，这使其符合JSR-303和JSR-349。
- en: 'For internationalization, the validator produces its set of default message
    codes. These default message codes and values look like the following ones:'
  id: totrans-3353
  prefs: []
  type: TYPE_NORMAL
  zh: 对于国际化，验证器生成其一组默认消息代码。这些默认消息代码和值看起来像下面这样：
- en: '[PRE351]'
  id: totrans-3354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: Feel free to override them in your own resource files!
  id: totrans-3355
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意在您自己的资源文件中覆盖它们！
- en: There's more…
  id: totrans-3356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In this section we highlight a few validation concepts and components that we
    didn’t explain.
  id: totrans-3357
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们突出了一些我们没有解释的验证概念和组件。
- en: ValidationUtils
  id: totrans-3358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ValidationUtils
- en: 'The `ValidationUtils` Spring utility class provides convenient static methods
    for invoking a `Validator` and rejecting empty fields populating the error object
    in one line:'
  id: totrans-3359
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidationUtils` Spring实用程序类提供了方便的静态方法，用于调用`Validator`并拒绝填充错误对象的空字段，一行中的错误对象：'
- en: '[http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/validation/ValidationUtils.html](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/validation/ValidationUtils.html)'
  id: totrans-3360
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/validation/ValidationUtils.html](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/validation/ValidationUtils.html)'
- en: Grouping constraints
  id: totrans-3361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组约束
- en: 'We can couple constraints across more than one field to define a set of more
    advanced constraints:'
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将约束耦合到多个字段上，以定义一组更高级的约束：
- en: '[http://beanvalidation.org/1.1/spec/#constraintdeclarationvalidationpr ocess-groupsequence](http://beanvalidation.org/1.1/spec/#constraintdeclarationvalidationpr%20ocess-groupsequence)'
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://beanvalidation.org/1.1/spec/#constraintdeclarationvalidationpr ocess-groupsequence](http://beanvalidation.org/1.1/spec/#constraintdeclarationvalidationpr%20ocess-groupsequence)'
- en: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/ html_single/#chapter-groups](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/%20html_single/#chapter-groups)'
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/ html_single/#chapter-groups](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/%20html_single/#chapter-groups)'
- en: Creating a custom validator
  id: totrans-3365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义验证器
- en: 'It can sometimes be useful to create a specific validator that has its own
    annotation. Check link, it should get us to:'
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: 有时创建一个具有自己注释的特定验证器可能很有用。检查链接，它应该带我们到：
- en: '[http://howtodoinjava.com/2015/02/12/spring-mvc-custom-validator-example/](http://howtodoinjava.com/2015/02/12/spring-mvc-custom-validator-example/)'
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://howtodoinjava.com/2015/02/12/spring-mvc-custom-validator-example/](http://howtodoinjava.com/2015/02/12/spring-mvc-custom-validator-example/)'
- en: The Spring reference on validation
  id: totrans-3368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于验证的Spring参考
- en: 'The best source of information remains the Spring reference on `Validation`.
    Check link, it should get us to:'
  id: totrans-3369
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的信息来源仍然是Spring关于`Validation`的参考。检查链接，它应该带我们到：
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html)'
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html)'
- en: See also
  id: totrans-3371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'The whole bean validation specification (JSR-303 and JSR-349) has its own website:
    [http://beanvalidation.org/1.1/spec](http://beanvalidation.org/1.1/spec).'
  id: totrans-3372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个bean验证规范（JSR-303和JSR-349）都有自己的网站：[http://beanvalidation.org/1.1/spec](http://beanvalidation.org/1.1/spec)。
- en: Internationalizing messages and contents for REST
  id: totrans-3373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为REST国际化消息和内容
- en: It was necessary to talk about validation before talking about internationalizing
    content and messages. With global and cloud-based services, supporting content
    in only one language is often not sufficient.
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论国际化内容和消息之前，有必要谈论验证。对于全球和基于云的服务，仅支持一种语言的内容通常是不够的。
- en: In this recipe, we provide an implementation that suits our design and therefore
    continue to meet our scalability standards for not relying on HTTP Sessions.
  id: totrans-3375
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们提供了一个适合我们设计的实现，因此继续满足我们的可扩展性标准，不依赖于HTTP会话。
- en: We will see how to define the `MessageSource` beans in charge of fetching the
    most suited message for a given location. We will see how to serialize resource
    properties to make them available to the frontend. We will implement a dynamic
    translation of content on this frontend with AngularJS and angular-translate.
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何定义`MessageSource` bean来获取给定位置的最合适的消息。我们将看到如何序列化资源属性，使其可用于前端。我们将在前端使用AngularJS和angular-translate实现内容的动态翻译。
- en: How to do it…
  id: totrans-3377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: There is both backend and a frontend work in this recipe.
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，既有后端工作，也有前端工作。
- en: Backend
  id: totrans-3379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端
- en: 'The following bean has been registered in the core context (`csm-core-config.xml`):'
  id: totrans-3380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下bean已在核心上下文（`csm-core-config.xml`）中注册：
- en: '[PRE352]'
  id: totrans-3381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: 'This bean references a created `SerializableResourceBundleMessageSource` that
    gathers the resource files and extracts properties:'
  id: totrans-3382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个bean引用了一个创建的`SerializableResourceBundleMessageSource`，它收集资源文件并提取属性：
- en: '[PRE353]'
  id: totrans-3383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: 'This bean bundle is accessed from two places:'
  id: totrans-3384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个bean包从两个地方访问：
- en: 'A newly created `PropertiesController` exposes publicly (serializing) all the
    messages and errors for a specific location (here, just a language):'
  id: totrans-3385
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的`PropertiesController`公开（序列化）特定位置（这里只是语言）的所有消息和错误：
- en: '[PRE354]'
  id: totrans-3386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: 'A specific service layer has been built to easily serve messages and errors
    across controllers and services:'
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
  zh: 已构建了一个特定的服务层，用于轻松地在控制器和服务之间提供消息和错误：
- en: '[PRE355]'
  id: totrans-3388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: Note
  id: totrans-3389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `ResourceBundleServiceImpl` uses the same `SerializableResourceBundleMessageSource`
    for now. It also extracts the locale from the logged-in user (Spring Security)
    with a fallback to English.
  id: totrans-3390
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceBundleServiceImpl`目前使用相同的`SerializableResourceBundleMessageSource`。它还从已登录用户（Spring
    Security）中提取区域设置，如果失败则回退到英语。'
- en: This `ResourceBundleServiceImpl` service is injected in our `WebContentInterceptor`
    `CloudstreetApiWCI:`
  id: totrans-3391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`ResourceBundleServiceImpl`服务被注入到我们的`WebContentInterceptor` `CloudstreetApiWCI:`中
- en: '[PRE356]'
  id: totrans-3392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: 'In the `TransactionController`, for example, the bundle is targeted to extract
    error messages:'
  id: totrans-3393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，在`TransactionController`中，bundle被定位以提取错误消息：
- en: '[PRE357]'
  id: totrans-3394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '`I18nKeys` is just a class that hosts resource keys as constants:'
  id: totrans-3395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`I18nKeys`只是一个承载资源键的常量的类：'
- en: '[PRE358]'
  id: totrans-3396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: The resource files are located in the core module:![Backend](img/image00892.jpeg)
  id: totrans-3397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源文件位于核心模块中：![后端](img/image00892.jpeg)
- en: Frontend
  id: totrans-3398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前端
- en: 'Two dependencies for angular-translate have been added in the `index.jsp`:'
  id: totrans-3399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.jsp`中添加了两个angular-translate的依赖项：
- en: '[PRE359]'
  id: totrans-3400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'The translate module is configured as follows in the `index.jsp`:'
  id: totrans-3401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.jsp`中配置翻译模块如下：
- en: '[PRE360]'
  id: totrans-3402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: Note
  id: totrans-3403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see that it targets our API endpoint that only serves messages and errors.
  id: totrans-3404
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到它定位到我们的API端点，只提供消息和错误。
- en: 'The user language is set from the main menu (`main_menu.js`). The user is loaded
    and the language is extracted from user object (defaulted to EN):'
  id: totrans-3405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户语言是从主菜单(`main_menu.js`)中设置的。用户被加载，并且语言从用户对象中提取（默认为EN）：
- en: '[PRE361]'
  id: totrans-3406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'In the DOM, the i18n content is directly referenced to be translated through
    a translate directive. Check out in the `stock-detail.html` file for example:'
  id: totrans-3407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DOM中，i18n内容直接引用通过翻译指令进行翻译。例如，在`stock-detail.html`文件中查看：
- en: '[PRE362]'
  id: totrans-3408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: 'Another example from the `index-detail.html` file is the following:'
  id: totrans-3409
  prefs: []
  type: TYPE_NORMAL
  zh: '`index-detail.html`文件中的另一个例子如下：'
- en: '[PRE363]'
  id: totrans-3410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'In `home.html`, you can find scope variables whose values are translated as
    follows:'
  id: totrans-3411
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home.html`中，您可以找到其值如下翻译的作用域变量：
- en: '[PRE364]'
  id: totrans-3412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: In the application, update your personal preferences and set your language to
    **French** for example. Try to access, for example, a **stock-detail** page that
    can be reached from the **stock-search** results:![Frontend](img/image00893.jpeg)
  id: totrans-3413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中，更新您的个人偏好设置，并将您的语言设置为**法语**。例如，尝试访问可以从**stock-search**结果到达的**stock-detail**页面：![前端](img/image00893.jpeg)
- en: From a **stock-detail** page, you can process a transaction (in French!):![Frontend](img/image00894.jpeg)
  id: totrans-3414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**stock-detail**页面，您可以处理一个交易（用法语！）：![前端](img/image00894.jpeg)
- en: How it works...
  id: totrans-3415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's have a look at the backend changes. What you first need to understand
    is the autowired `SerializableResourceBundleMessageSource` bean from which internationalized
    messages are extracted using a message key.
  id: totrans-3416
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看后端的变化。您首先需要了解的是自动装配的`SerializableResourceBundleMessageSource` bean，从中使用消息键提取国际化消息。
- en: This bean extends a specific `MessageSource` implementation. Several types of
    `MessageSource` exist and it is important to understand the differences between
    them. We will revisit the way we extract a Locale from our users and we will see
    how it is possible to use a `LocaleResolver` to read or guess the user language
    based on different readability paths (Sessions, Cookies, Accept header, and so
    on).
  id: totrans-3417
  prefs: []
  type: TYPE_NORMAL
  zh: 这个bean扩展了特定的`MessageSource`实现。存在几种类型的`MessageSource`，重要的是要理解它们之间的区别。我们将重新访问从用户那里提取`Locale`的方式，并看看如何使用`LocaleResolver`根据不同的可读性路径（会话、Cookie、接受标头等）来读取或猜测用户语言。
- en: MessageSource beans
  id: totrans-3418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MessageSource beans
- en: First of all, a `MessageSource` is a Spring interface (`org.sfw.context.MessageSource`).
    The `MessageSource` objects are responsible for resolving messages from different
    arguments.
  id: totrans-3419
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`MessageSource`是一个Spring接口（`org.sfw.context.MessageSource`）。`MessageSource`对象负责从不同的参数解析消息。
- en: The most interesting arguments being the key of the message we want and the
    `Locale` (language/country combination) that will drive the right language selection.
    If no `Locale` is provided or if the `MessageSource` fails to resolve a matching
    language/country file or message entry, it falls back to a more generic file and
    tries again until it reaches a successful resolution.
  id: totrans-3420
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的参数是我们想要的消息的键和`Locale`（语言/国家组合），它将驱动正确的语言选择。如果没有提供`Locale`，或者`MessageSource`无法解析匹配的语言/国家文件或消息条目，它将退回到更通用的文件，并再次尝试，直到达到成功的解析。
- en: 'As shown here, `MessageSource` implementations expose only `getMessage(…)`
    methods:'
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，`MessageSource`实现仅公开`getMessage(…)`方法：
- en: '[PRE365]'
  id: totrans-3422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: This lightweight interface is implemented by several objects in Spring (especially
    in context components). However, we are looking specifically for `MessageSource`
    implementations and three of them in Spring 4+ particularly deserve to be mentioned.
  id: totrans-3423
  prefs: []
  type: TYPE_NORMAL
  zh: 这个轻量级接口由Spring中的几个对象实现（特别是在上下文组件中）。但是，我们特别寻找`MessageSource`实现，Spring 4+中有三个特别值得一提。
- en: ResourceBundleMessageSource
  id: totrans-3424
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ResourceBundleMessageSource
- en: This `MessageSource` implementation accesses the resource bundles using specified
    basenames. It relies on the underlying JDK's `ResourceBundle` implementation,
    in combination with the JDK's standard message-parsing provided by `MessageFormat`
    (`java.text.MessageFormat`).
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`MessageSource`实现使用指定的基本名称访问资源包。它依赖于底层JDK的`ResourceBundle`实现，结合JDK的标准消息解析提供的`MessageFormat`(`java.text.MessageFormat`)。
- en: Both the accessed `ResourceBundle` instances and the generated `MessageFormat`
    are cached for each message. The caching provided by `ResourceBundleMessageSource`
    is significantly faster than the built-in caching of the `java.util.ResourceBundle`
    class.
  id: totrans-3426
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每条消息，访问的`ResourceBundle`实例和生成的`MessageFormat`都被缓存。`ResourceBundleMessageSource`提供的缓存比`java.util.ResourceBundle`类的内置缓存要快得多。
- en: With `java.util.ResourceBundle`, it's not possible to reload a bundle when the
    JVM is running. Because `ResourceBundleMessageSource` relies on `ResourceBundle`,
    it faces the same limitation.
  id: totrans-3427
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`java.util.ResourceBundle`时，当JVM正在运行时无法重新加载bundle。因为`ResourceBundleMessageSource`依赖于`ResourceBundle`，它面临着相同的限制。
- en: ReloadableResourceBundleMessageSource
  id: totrans-3428
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ReloadableResourceBundleMessageSource
- en: In contrast to `ResourceBundleMessageSource`, this class uses `Properties` instances
    as custom data structure for messages. It loads them via a `PropertiesPersister`
    strategy using Spring Resource objects.
  id: totrans-3429
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ResourceBundleMessageSource`相比，这个类使用`Properties`实例作为消息的自定义数据结构。它通过使用Spring
    Resource对象的`PropertiesPersister`策略加载它们。
- en: This strategy is not only capable of reloading files based on timestamp changes,
    but also loads properties files with a specific character encoding.
  id: totrans-3430
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略不仅能够根据时间戳更改重新加载文件，还能以特定字符编码加载属性文件。
- en: '`ReloadableResourceBundleMessageSource` supports reloading of properties files
    using the `cacheSeconds` setting and also supports the programmatic clearing of
    the properties cache.'
  id: totrans-3431
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReloadableResourceBundleMessageSource`支持使用`cacheSeconds`设置重新加载属性文件，并支持以编程方式清除属性缓存。'
- en: 'The base names for identifying resource files are defined with the `basenames`
    property (in the ReloadableResourceBundleMessageSource configuration). The defined
    base names follow the basic `ResourceBundle` convention that consists in not specifying
    the file extension nor the language code. We can refer to any Spring resource
    location. With a `classpath`: prefix, resources can still be loaded from the classpath,
    but `cacheSeconds` values other than `-1` (caching forever) will not work in this
    case.'
  id: totrans-3432
  prefs: []
  type: TYPE_NORMAL
  zh: 用于识别资源文件的基本名称是使用`basenames`属性（在ReloadableResourceBundleMessageSource配置中）定义的。定义的基本名称遵循基本的`ResourceBundle`约定，不指定文件扩展名或语言代码。我们可以引用任何Spring资源位置。使用`classpath`前缀，资源仍然可以从类路径加载，但在这种情况下，除了`-1`（永久缓存）之外的`cacheSeconds`值将不起作用。
- en: StaticMessageSource
  id: totrans-3433
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: StaticMessageSource
- en: The `StaticMessageSource` is a simple implementation that allows messages to
    be registered programmatically. It is intended for testing rather than for a use
    in production.
  id: totrans-3434
  prefs: []
  type: TYPE_NORMAL
  zh: '`StaticMessageSource`是一个简单的实现，允许以编程方式注册消息。它适用于测试而不是在生产中使用。'
- en: Our MessageSource bean definition
  id: totrans-3435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们的MessageSource bean定义
- en: We have implemented a specific controller that serializes and exposes the whole
    aggregation of our resource bundle properties-files (errors and message) for a
    given language passed in as a query parameter.
  id: totrans-3436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个特定的控制器，用于序列化和公开我们资源包属性文件（错误和消息）的整个聚合，传递给作为查询参数的特定语言。
- en: To achieve this, we have created a custom `SerializableResourceBundleMessageSource`
    object, borrowed from Roger Villars, and its *bookapp-rest* application ([https://github.com/rvillars/bookapp-rest](https://github.com/rvillars/bookapp-rest)).
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们创建了一个自定义的`SerializableResourceBundleMessageSource`对象，借鉴了Roger Villars的*bookapp-rest*应用程序（[https://github.com/rvillars/bookapp-rest](https://github.com/rvillars/bookapp-rest)）。
- en: 'This custom `MessageSource` object extends `ReloadableResourceBundleMessageSource`.
    We have made a Spring bean of it with the following definition:'
  id: totrans-3438
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义的`MessageSource`对象扩展了`ReloadableResourceBundleMessageSource`。我们已经用以下定义将其作为Spring
    bean：
- en: '[PRE366]'
  id: totrans-3439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'We have specifically specified the paths to our resource files in the classpath.
    This can be avoided with a global resource bean in our context:'
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在类路径中具体指定了资源文件的路径。这可以通过上下文中的全局资源bean来避免：
- en: '[PRE367]'
  id: totrans-3441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: Note that Spring MVC, by default, expects the i18n resource files to be located
    in a `/WEB-INF/i18n` folder.
  id: totrans-3442
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Spring MVC默认情况下期望i18n资源文件位于`/WEB-INF/i18n`文件夹中。
- en: Using a LocaleResolver
  id: totrans-3443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用LocaleResolver
- en: In our application, in order to switch the `Locale` to another language/country,
    we pass through the user preferences screen. This means that we somehow persist
    this information in the database. This makes easy the `LocaleResolution` that
    is actually operated on the client side, reading the user data and calling the
    internationalized messages for the language preference asynchronously.
  id: totrans-3444
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，为了将`Locale`切换到另一种语言/国家，我们通过用户偏好屏幕。这意味着我们以某种方式将这些信息持久化到数据库中。这使得`LocaleResolution`变得容易，实际上是在客户端上操作，读取用户数据并异步调用语言偏好的国际化消息。
- en: However, some other applications might want to operate `LocaleResolution` on
    the server side. To do so, a `LocaleResolver` bean must be registered.
  id: totrans-3445
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一些其他应用程序可能希望在服务器端操作`LocaleResolution`。为此，必须注册一个`LocaleResolver` bean。
- en: '`LocaleResolver` is a Spring Interface (`org.springframework.web.servlet. LocaleResolver`):'
  id: totrans-3446
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocaleResolver`是一个Spring接口（`org.springframework.web.servlet.LocaleResolver`）：'
- en: '[PRE368]'
  id: totrans-3447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: 'There are four concrete implementations in Spring MVC (version four and above):'
  id: totrans-3448
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC（版本四及以上）中有四种具体的实现：
- en: AcceptHeaderLocaleResolver
  id: totrans-3449
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AcceptHeaderLocaleResolver
- en: The AcceptHeaderLocaleResolver makes use of the `Accept-Language` header of
    the HTTP request. It extracts the first Locale that the value contains. This value
    is usually set by the client’s web browser that reads it from OS configuration.
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: AcceptHeaderLocaleResolver利用HTTP请求的`Accept-Language`头。它提取值中包含的第一个Locale。这个值通常由客户端的Web浏览器设置，从操作系统配置中读取。
- en: FixedLocaleResolver
  id: totrans-3451
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FixedLocaleResolver
- en: This resolver always returns a fixed default Locale with optionally a time zone.
    The default Locale is the current JVM's default Locale.
  id: totrans-3452
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解析器总是返回一个固定的默认Locale，可选地带有一个时区。默认的Locale是当前JVM的默认Locale。
- en: SessionLocaleResolver
  id: totrans-3453
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SessionLocaleResolver
- en: 'This resolver is the most appropriate when the application actually uses user
    sessions. It reads and sets a session attribute whose name is only intended for
    internal use:'
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序实际上使用用户会话时，这个解析器是最合适的。它读取并设置一个会话属性，其名称仅用于内部使用：
- en: '[PRE369]'
  id: totrans-3455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: By default, it sets the value from the default `Locale` or from the `Accept-Language`
    header. The session may also optionally contain an associated time zone attribute.
    Alternatively, we may specify a default time zone.
  id: totrans-3456
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它从默认的`Locale`或`Accept-Language`头部设置值。会话还可以可选地包含一个关联的时区属性。或者，我们可以指定一个默认时区。
- en: The practice in these cases is to create an extra and specific web filter.
  id: totrans-3457
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下的最佳实践是创建一个额外的特定的Web过滤器。
- en: CookieLocaleResolver
  id: totrans-3458
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CookieLocaleResolver
- en: '`CookieLocaleResolver` is a resolver that is well suited to stateless applications
    like ours. The cookie name can be customized with the `cookieName` property. If
    the `Locale` is not found in an internally defined request parameter, it tries
    to read the cookie value and falls back to the `Accept-Language` header.'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: '`CookieLocaleResolver`是一个适用于像我们这样的无状态应用程序的解析器。可以使用`cookieName`属性自定义cookie名称。如果在内部定义的请求参数中找不到`Locale`，它会尝试读取cookie值，并回退到`Accept-Language`头部。'
- en: The cookie may optionally contain an associated time zone value as well. We
    can still specify a default time zone as well.
  id: totrans-3460
  prefs: []
  type: TYPE_NORMAL
  zh: cookie还可以可选地包含一个关联的时区值。我们也可以指定一个默认时区。
- en: There's more…
  id: totrans-3461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Translating client-side with angular-translate.js
  id: totrans-3462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用angular-translate.js在客户端进行翻译
- en: We used `angular-translate.js` to handle translations and to switch the user
    Locale from the client side. `angular-translate.js` library is very complete and
    well documented. As a dependency, it turns out to be extremely useful.
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`angular-translate.js`来处理翻译，并从客户端端切换用户区域设置。`angular-translate.js`库非常完整并且有很好的文档。作为一个依赖项，它非常有用。
- en: 'The main points of this product are to provide:'
  id: totrans-3464
  prefs: []
  type: TYPE_NORMAL
  zh: 这个产品的主要点是提供：
- en: Components (filters/directives) to translate contents
  id: totrans-3465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件（过滤器/指令）来翻译内容
- en: Asynchronous loading of i18n data
  id: totrans-3466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步加载i18n数据
- en: Pluralization support using `MessageFormat.js`
  id: totrans-3467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MessageFormat.js`支持复数形式
- en: Expandability through easy to use interfaces
  id: totrans-3468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过易于使用的接口进行扩展
- en: 'A quick overview of **angular-translate** is shown in this figure:'
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图中显示了**angular-translate**的简要概述：
- en: '![Translating client-side with angular-translate.js](img/image00895.jpeg)'
  id: totrans-3470
  prefs: []
  type: TYPE_IMG
  zh: '![使用angular-translate.js在客户端进行翻译](img/image00895.jpeg)'
- en: International resources are pulled down either dynamically from an API endpoint
    (as we did), either from static resource files published on the web application
    path. These resources for their specific Locale are stored on the client-side
    using `LocalStorage` or using `cookies`.
  id: totrans-3471
  prefs: []
  type: TYPE_NORMAL
  zh: 国际资源可以从API端点动态拉取（就像我们所做的那样），也可以从发布在Web应用程序路径上的静态资源文件中拉取。这些特定区域设置的资源存储在客户端上，可以使用`LocalStorage`或`cookies`。
- en: The stored data corresponds to a variable (`UrlLanguageStorage` in our case)
    that is accessible and injectable in whatever module that may require translation
    capabilities.
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的数据对应于一个变量（在我们的情况下是`UrlLanguageStorage`），该变量可以在任何可能需要翻译功能的模块中访问和注入。
- en: 'As shown in the following examples, the `translate` directive can be used to
    actually render translated messages:'
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
  zh: 如下例所示，`translate`指令可用于实际呈现翻译的消息：
- en: '[PRE370]'
  id: totrans-3474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'Alternatively, we can use a predefined translate filter to translate our translation
    keys in the DOM, without letting any controller or service know of them:'
  id: totrans-3475
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用预定义的翻译过滤器来在DOM中翻译我们的翻译键，而不让任何控制器或服务知道它们：
- en: '[PRE371]'
  id: totrans-3476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'You can read more about angular-translate on their very well done documentation:'
  id: totrans-3477
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在他们非常完善的文档中了解更多关于angular-translate的信息：
- en: '[https://angular-translate.github.io](https://angular-translate.github.io)'
  id: totrans-3478
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://angular-translate.github.io](https://angular-translate.github.io)'
- en: Validating client-side forms with HTML5 AngularJS
  id: totrans-3479
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML5 AngularJS验证客户端表单
- en: It is a good practice to validate submitted data both on the frontend and the
    backend. It is also good, talking about validation, to distinguish the user experience,
    from the data integrity conservation from the data integrity conservation. Both
    are two different responsibilities, potentially for different teams.
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
  zh: 验证提交的数据在前端和后端都是一个很好的实践。谈到验证，区分用户体验和数据完整性保护也是很好的。这两者是两个不同的责任，可能由不同的团队负责。
- en: We believe the *frontend* validation has replaced the form-validations that
    was previously managed by the *backend*. In a scalable environment where API is
    decoupled from web content, the validation experiences are now the responsibility
    of client interfaces that can be multiples (even implemented by third parties)
    such as websites, mobile websites, mobile apps, and so on.
  id: totrans-3481
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信*前端*验证已经取代了以前由*后端*管理的表单验证。在一个API与Web内容解耦的可扩展环境中，验证体验现在是客户端界面的责任，可以是多个（甚至由第三方实现）如网站、移动网站、移动应用等。
- en: In this recipe, we will focus on form validation and more specifically on AngularJS
    form validation.
  id: totrans-3482
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将专注于表单验证，更具体地说是AngularJS表单验证。
- en: How to do it…
  id: totrans-3483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s consider the **User Preferences** form again. Here is the HTML definition
    (`user-account.html`):'
  id: totrans-3484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次考虑**用户首选项**表单。这是HTML定义（`user-account.html`）：
- en: '[PRE372]'
  id: totrans-3485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'The JavaScript side of things in the controller of `account_management.js`
    includes two referenced functions and four variables to control form validation
    and its style:'
  id: totrans-3486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`account_management.js`控制器中的JavaScript部分包括两个引用函数和四个变量，用于控制表单验证及其样式：'
- en: '[PRE373]'
  id: totrans-3487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'Two CSS classes have been created to render properly errors on fields:'
  id: totrans-3488
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建两个CSS类以正确呈现字段上的错误：
- en: '[PRE374]'
  id: totrans-3489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: If you try to enter a wrong e-mail or if you try to submit the form without
    entering your password, you should observe the following validation control:![How
    to do it…](img/image00896.jpeg)
  id: totrans-3490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尝试输入错误的电子邮件或者尝试在不输入密码的情况下提交表单，您应该观察到以下验证控件：![如何做...](img/image00896.jpeg)
- en: How it works...
  id: totrans-3491
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: AngularJS provides tools to set up a client-side form validation. As usual with
    AngularJS, these tools integrate well with modern HTML5 techniques and standards.
  id: totrans-3492
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS提供了设置客户端表单验证的工具。与AngularJS一样，这些工具与现代HTML5技术和标准很好地集成在一起。
- en: HTML5 forms provide a native validation that can be defined using tags and attributes
    on the different form elements (input, select…) to set up a basic field validation
    (max-length, required…)
  id: totrans-3493
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5表单提供了本地验证，可以使用标签和属性在不同的表单元素（输入、选择...）上定义基本字段验证（最大长度、必填...）
- en: AngularJS completes and extends fluently these standard definitions to make
    them interactive and responsive from the beginning and with no overhead.
  id: totrans-3494
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS从一开始就完善和扩展了这些标准定义，使它们具有交互性和响应性，而且没有额外开销。
- en: Validation-constraints
  id: totrans-3495
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证约束
- en: Let's have a closer look at the available validation-options that can be placed
    on form controls.
  id: totrans-3496
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下可以放置在表单控件上的可用验证选项。
- en: Required
  id: totrans-3497
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 必填
- en: 'An `input` field can be tagged as `required` (HTML5 tag):'
  id: totrans-3498
  prefs: []
  type: TYPE_NORMAL
  zh: '`input`字段可以被标记为`required`（HTML5标签）：'
- en: '[PRE375]'
  id: totrans-3499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: Minimum/maximum length
  id: totrans-3500
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最小/最大长度
- en: 'The `ng-minlength` directive can be used to assert that the number of entered
    characters matches a given threshold:'
  id: totrans-3501
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng-minlength`指令可用于断言输入字符的数量是否达到给定的阈值：'
- en: '[PRE376]'
  id: totrans-3502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'Similarly, `ng-maxlength` drastically limits the number of entered characters
    to a maximum:'
  id: totrans-3503
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`ng-maxlength`可以大大限制输入字符的数量到最大值：
- en: '[PRE377]'
  id: totrans-3504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: Regex pattern
  id: totrans-3505
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正则表达式模式
- en: 'The `ng-pattern` directive is often used to make sure that the entered data
    matches a predefined shape:'
  id: totrans-3506
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng-pattern`指令通常用于确保输入的数据与预定义的形状匹配：'
- en: '[PRE378]'
  id: totrans-3507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Number/e-mail/URL
  id: totrans-3508
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数字/电子邮件/URL
- en: 'Those HTML5 input types are handled by AngularJS to be constrained within the
    format they represent:'
  id: totrans-3509
  prefs: []
  type: TYPE_NORMAL
  zh: 这些HTML5输入类型由AngularJS处理，以便限制在它们所代表的格式内：
- en: '[PRE379]'
  id: totrans-3510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: Control variables in forms
  id: totrans-3511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单中的控制变量
- en: AngularJS publishes properties on the containing `$scope` to match the form
    state in the DOM. This makes the JavaScript form validation very easy to control
    errors and to render the state.
  id: totrans-3512
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS在包含的`$scope`上发布属性，以匹配DOM中的表单状态。这使得JavaScript表单验证非常容易控制错误并呈现状态。
- en: 'These properties are accessible from the following structure:'
  id: totrans-3513
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性可以从以下结构中访问：
- en: '[PRE380]'
  id: totrans-3514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Modified/Unmodified state
  id: totrans-3515
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修改/未修改状态
- en: 'This state can be assessed using the following properties:'
  id: totrans-3516
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下属性来评估这种状态：
- en: '[PRE381]'
  id: totrans-3517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: Valid/Invalid state
  id: totrans-3518
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有效/无效状态
- en: 'This valid state of a form can be assessed in regards to the defined validation
    for a field or globally:'
  id: totrans-3519
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据字段或全局定义的验证来评估表单的有效状态：
- en: '[PRE382]'
  id: totrans-3520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: Errors
  id: totrans-3521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 错误
- en: 'After the validity assessment that we have defined previously, more information
    about what went wrong can be extracted from the `$error` property:'
  id: totrans-3522
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前定义的有效性评估之后，可以从`$error`属性中提取有关出现了什么问题的更多信息：
- en: '[PRE383]'
  id: totrans-3523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: The `$error` object contains all about the validations of a particular form
    and reflects whether those validations are satisfactory or not.
  id: totrans-3524
  prefs: []
  type: TYPE_NORMAL
  zh: '`$error`对象包含特定表单的所有验证信息，并反映这些验证是否令人满意。'
- en: Form state transclusions and style
  id: totrans-3525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单状态转置和样式
- en: 'As often with AngularJS, transclusions are proceeded to bind the DOM state
    with the scope. Thus, the form state and the control state are reflected in real
    time with CSS classes. These CSS classes can obviously be defined/overridden,
    so that a global validation style can be defined:'
  id: totrans-3526
  prefs: []
  type: TYPE_NORMAL
  zh: 与AngularJS一样，转置是为了将DOM状态与作用域绑定。因此，表单状态和控件状态会实时反映在CSS类中。这些CSS类可以被定义/覆盖，以便定义全局验证样式：
- en: '[PRE384]'
  id: totrans-3527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: See also
  id: totrans-3528
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '**AngularJS documentation on forms**: Read more about AngularJS validation
    capabilities on Forms (we have only introduced them here): [https://docs.angularjs.org/guide/forms](https://docs.angularjs.org/guide/forms)'
  id: totrans-3529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AngularJS表单文档**：了解有关AngularJS表单验证功能的更多信息（我们只是在这里介绍了它们）：[https://docs.angularjs.org/guide/forms](https://docs.angularjs.org/guide/forms)'
- en: Chapter 8. Communicating Through WebSockets and STOMP
  id: totrans-3530
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。通过WebSockets和STOMP进行通信
- en: Four recipes are covered in this chapter. All of them fully embrace our CloudStreet
    Market application. Improving, they make it more reactive, more interactive.
  id: totrans-3531
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了四个配方。它们都充分拥抱了我们的CloudStreet Market应用程序。通过改进，使其更具反应性，更具互动性。
- en: 'These recipes have the following titles:'
  id: totrans-3532
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配方有以下标题：
- en: Streaming social events with STOMP over SockJS
  id: totrans-3533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用STOMP通过SockJS流式传输社交事件
- en: Using RabbitMQ as a multiprotocol message broker
  id: totrans-3534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RabbitMQ作为多协议消息代理
- en: Stacking and consuming tasks in RabbitMQ with AMQP
  id: totrans-3535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在RabbitMQ中堆叠和消费任务与AMQP
- en: Securing messages with Spring Session and Redis
  id: totrans-3536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Session和Redis保护消息
- en: Introduction
  id: totrans-3537
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Let''s quickly review what we hope you have learned so far in the previous
    chapters. Chapter by chapter, you must have found out:'
  id: totrans-3538
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下在前几章中希望你已经学到的内容。逐章，你必须已经发现：
- en: How to initiate a project, and how to rely on standards to keep the code base
    scalable and adaptive. These standards came from a selection of tools such as
    Maven or the Java Persistence API. The presented standards also came with a selection
    of common practices, on the client side for example, with the AngularJS MVC pattern
    or the Bootstrap Framework UI.
  id: totrans-3539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动一个项目，以及如何依赖标准来保持代码库的可扩展性和适应性。这些标准来自于一系列工具的选择，例如Maven或Java Persistence API。所呈现的标准还伴随着一系列常见实践，例如在客户端，使用AngularJS
    MVC模式或Bootstrap Framework UI。
- en: How to make the most of Spring MVC while facing modern challenges. Spring MVC
    has been demonstrated as a web MVC framework (with its request flow, the content
    negotiation, the view resolution, the model binding, the exception handling, and
    so on), but also demonstrated as an integrated Spring component within its Spring
    environment. An integrated framework able to relay the Spring Security authentication
    or the Spring Social abstraction. It is also able to serve Spring Data pagination
    tools as well as a very competitive implementation of the HTTP specification.
  id: totrans-3540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在面对现代挑战时充分利用Spring MVC。Spring MVC已被证明是一个Web MVC框架（具有其请求流程、内容协商、视图解析、模型绑定、异常处理等），但也作为Spring环境中集成的Spring组件进行了演示。它是一个集成框架，能够传递Spring
    Security身份验证或Spring Social抽象。它还能够提供Spring Data分页工具以及对HTTP规范的竞争性实现。
- en: How to design a Microservice architecture implementing an advanced stateless
    and HyperMedia API that promotes the segregation of duties. A segregation of duties
    between the front end and the back end, but also a segregation of duties in the
    functional divisibility of components (horizontal scalability) into independent
    web archives (`.war`).
  id: totrans-3541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设计一个实现高级无状态和超媒体API的微服务架构，促进职责的分离。前端和后端之间的职责分离，以及组件的功能可分割性（水平可伸缩性）在独立的Web存档（`.war`）中的职责分离。
- en: This chapter focuses on the emerging WebSocket technology and on building a
    **Messaging-oriented-middleware** (**MOM**) for our application. It is a rare
    showcase that implements so much about WebSockets in Spring. From the use of the
    default embedded WebSocket message broker to a full-featured RabbitMQ broker (using
    STOMP and AMQP protocols). We will see how to broadcast messages to multiple clients
    and defer the execution of time-consuming tasks, offering significant scalability
    benefits.
  id: totrans-3542
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍新兴的WebSocket技术以及为我们的应用程序构建**面向消息的中间件**（**MOM**）。这是一个罕见的展示，它在Spring中实现了如此多关于WebSocket的内容。从使用默认的嵌入式WebSocket消息代理到完整功能的RabbitMQ代理（使用STOMP和AMQP协议）。我们将看到如何向多个客户端广播消息并推迟执行耗时任务，提供显著的可伸缩性优势。
- en: With a new Java project dedicated to WebSockets that required access to the
    common database Server, and also in the perspective of a production-like environment,
    we are going to replace HSQLDB with MySQL Server.
  id: totrans-3543
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个专门用于需要访问常见数据库服务器的WebSockets的新Java项目，并且在类似生产环境的角度上，我们将用MySQL服务器替换HSQLDB。
- en: We will see how to dynamically create private queues and how to get authenticated
    clients to post and receive messages from these private queues. We will do all
    of this, to implement real application features in our application.
  id: totrans-3544
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何动态创建私有队列以及如何让经过身份验证的客户端从这些私有队列中发布和接收消息。我们将做所有这些，以在我们的应用程序中实现真正的应用程序功能。
- en: To achieve a WebSocket authentication and an authentication of messages, we
    will turn the API stateful. By stateful, this means that the API will use HTTP
    sessions to keep users authenticated between their requests. With the support
    of Spring Session and the use of the highly clusterable Redis Server, the sessions
    will be shared across multiple webapps.
  id: totrans-3545
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现WebSocket身份验证和消息认证，我们将使API有状态。有状态意味着API将使用HTTP会话在用户请求之间保持用户经过身份验证。借助Spring
    Session的支持和高度可集群化的Redis服务器的使用，会话将在多个Web应用程序之间共享。
- en: Streaming social events with STOMP over SockJS
  id: totrans-3546
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用STOMP通过SockJS流式传输社交事件
- en: In this recipe, we broadcast user activities (events) with STOMP over SockJS.
    SockJS provides a custom implementation of WebSocket.
  id: totrans-3547
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用STOMP通过SockJS广播用户活动（事件）。SockJS提供了WebSocket的自定义实现。
- en: Getting ready
  id: totrans-3548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is some configuration work to be done beforehand, especially on the Apache
    HTTP proxy. After that, we will see how to initiate a WebSocket with SockJS and
    with AngularJS on the client side.
  id: totrans-3549
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些配置工作需要事先完成，特别是在Apache HTTP代理上。之后，我们将看到如何在客户端使用SockJS和AngularJS初始化WebSocket。
- en: Our WebSocket will subscribe to a topic (for broadcasting) published via Spring
    from the `cloudstreetmarket-api` module.
  id: totrans-3550
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的WebSocket将订阅通过Spring从`cloudstreetmarket-api`模块发布的主题（用于广播）。
- en: How to do it…
  id: totrans-3551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v8.1.x`.
  id: totrans-3552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的**Git Perspective**中，检出`v8.1.x`分支的最新版本。
- en: Run the `Maven clean` and `Maven install` commands on the `zipcloud-parent`
    project (right-click on the project, select **Run as…** | **Maven Clean**, then
    select **Run as…** | **Maven Install)**. After this, operate a **Maven | Update**
    **Project** to synchronize Eclipse with the Maven configuration (right-click on
    the project and then click **Maven** | **Update Project…**).
  id: totrans-3553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`zipcloud-parent`项目上运行`Maven clean`和`Maven install`命令（右键单击项目，选择**Run as…**
    | **Maven Clean**，然后选择**Run as…** | **Maven Install)**。之后，进行**Maven | Update**
    **Project**以使Eclipse与Maven配置同步（右键单击项目，然后单击**Maven** | **Update Project…**）。
- en: Similarly, run the **Maven clean** and **Maven install** commands on `cloudstreetmarket-parent`
    followed by a **Maven** | **Update Project…** (in order to update all `cloudstreetmarket-parent`
    modules).
  id: totrans-3554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，在`cloudstreetmarket-parent`上运行**Maven clean**和**Maven install**命令，然后运行**Maven**
    | **Update Project…**（以更新所有`cloudstreetmarket-parent`模块）。
- en: Apache HTTP Proxy configuration
  id: totrans-3555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache HTTP代理配置
- en: 'In the Apache `httpd.conf` file, change the `VirtualHost` definition to:'
  id: totrans-3556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Apache `httpd.conf`文件中，更改`VirtualHost`定义为：
- en: '[PRE385]'
  id: totrans-3557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: 'Still in `httpd.conf`, uncomment the line:'
  id: totrans-3558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`httpd.conf`中，取消注释以下行：
- en: '[PRE386]'
  id: totrans-3559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: Frontend
  id: totrans-3560
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前端
- en: 'In the `index.jsp` file (in the `cloudstreetmarket-webapp` module), two extra
    JavaScript files are imported:'
  id: totrans-3561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-webapp`模块的`index.jsp`文件中，导入了两个额外的JavaScript文件：
- en: '[PRE387]'
  id: totrans-3562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: Note
  id: totrans-3563
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'These two files have been copied locally, but originally, both were found online
    at:'
  id: totrans-3564
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件已经被本地复制，但最初，两者都是在线找到的：
- en: '[https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.0.2/sockjs.min.js](https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.0.2/sockjs.min.js)'
  id: totrans-3565
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.0.2/sockjs.min.js](https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.0.2/sockjs.min.js)'
- en: '[https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.js](https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.js)'
  id: totrans-3566
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.js](https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.js)'
- en: For this recipe, all the changes on the client side, are related to the file
    `src/main/webapp/js/home/home_community_activity.js` (which drives the feed of
    **User Activities** on the landing page). This file is associated with the template
    `/src/main/webapp/html/home.html`.
  id: totrans-3567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个示例，客户端方面的所有更改都与文件`src/main/webapp/js/home/home_community_activity.js`有关（它驱动着登陆页面上**用户活动**的反馈）。这个文件与模板`/src/main/webapp/html/home.html`相关联。
- en: 'As part of the `init()` function of `homeCommunityActivityController`, the
    following section was added:'
  id: totrans-3568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`homeCommunityActivityController`的`init()`函数中，添加了以下部分：
- en: '[PRE388]'
  id: totrans-3569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'The `loadMore()` function is still invoked to pull new activities when the
    bottom of the scroll is reached. However now, because new activities can be inserted
    asynchronously, the `communityActivities` variable is no longer an array but an
    object used as a map with activity IDs as keys. Doing so allows us to merge the
    synchronous results with the asynchronous ones:'
  id: totrans-3570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`loadMore()`函数仍然被调用以在滚动到底部时拉取新的活动。但是现在，因为新的活动可以异步插入，`communityActivities`变量不再是数组，而是一个用作映射的对象，其中活动ID作为键。这样做可以让我们将同步结果与异步结果合并：'
- en: '[PRE389]'
  id: totrans-3571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: As before (since the [Chapter4](part0053.xhtml#aid-1IHDQ2 "Chapter 4. Understanding
    WebSocket"), *Building a REST API for a Stateless Architecture*), we loop over
    the community activities to build the activity feed. Now each activity carries
    a number of **likes** and **comments**. Currently, if a user is authenticated,
    he has the capability to see the number of **likes**:![Frontend](img/image00897.jpeg)
  id: totrans-3572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与以前一样（自[第4章](part0053.xhtml#aid-1IHDQ2 "第4章。理解WebSocket")，“为无状态架构构建REST API”），我们循环遍历社区活动以构建活动源。现在，每个活动都带有一定数量的**喜欢**和**评论**。目前，如果用户已经通过身份验证，他就有能力看到**喜欢**的数量：![前端](img/image00897.jpeg)
- en: 'TheAngularized HTML bound to the thumb-up image is the following:'
  id: totrans-3573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与点赞图像绑定的Angular化HTML如下：
- en: '[PRE390]'
  id: totrans-3574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'In the controller, the `like()` scope function supports this DOM element to
    create a new `like` activity that targets the original activity:'
  id: totrans-3575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中，`like()`作用域函数支持此DOM元素来创建一个新的`like`活动，该活动针对原始活动：
- en: '[PRE391]'
  id: totrans-3576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: The opposite logic can also be found to **unlike** an activity.
  id: totrans-3577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相反的逻辑也可以找到**不喜欢**一个活动。
- en: Backend
  id: totrans-3578
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端
- en: 'The following Maven dependencies have been added to `cloudstreetmarket-api`:'
  id: totrans-3579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已添加以下Maven依赖项到`cloudstreetmarket-api`：
- en: '[PRE392]'
  id: totrans-3580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'In the `web.xml` file (the one from `cloudstreetmarket-api`), the following
    attribute must be added to our servlet and to each of its filters:'
  id: totrans-3581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web.xml`文件（来自`cloudstreetmarket-api`），必须将以下属性添加到我们的servlet及其每个过滤器中：
- en: '[PRE393]'
  id: totrans-3582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: 'The following dedicated configuration bean has been created:'
  id: totrans-3583
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已创建以下专用配置bean：
- en: '[PRE394]'
  id: totrans-3584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: 'A new controller `ActivityFeedWSController`has been added as follows:'
  id: totrans-3585
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加新的控制器`ActivityFeedWSController`如下：
- en: '[PRE395]'
  id: totrans-3586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'As Spring configuration, we have added the following bean to the `dispatcher-servlet.xml`:'
  id: totrans-3587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为Spring配置，我们已将以下bean添加到`dispatcher-servlet.xml`中：
- en: '[PRE396]'
  id: totrans-3588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'In `security-config.xml`, the following configuration has been added to the
    http Spring Security namespace:'
  id: totrans-3589
  prefs: []
  type: TYPE_NORMAL
  zh: 在`security-config.xml`中，已将以下配置添加到http Spring Security命名空间：
- en: '[PRE397]'
  id: totrans-3590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Now let's see how events are generated.
  id: totrans-3591
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看事件是如何生成的。
- en: 'When a new financial transaction is created, a message is sent to the topic
    `/topic/actions`. This is done in the `TransactionController`:'
  id: totrans-3592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的财务交易时，会向主题`/topic/actions`发送消息。这是在`TransactionController`中完成的：
- en: '[PRE398]'
  id: totrans-3593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'Similarly, when a `like` activity is created, a message is also sent to the
    `/topic/actions` topic in `LikeActionController`:'
  id: totrans-3594
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当创建一个`like`活动时，也会向`/topic/actions`主题发送消息，这是在`LikeActionController`中完成的：
- en: '[PRE399]'
  id: totrans-3595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: Now start the Tomcat server. Log in to the application using Yahoo! Oauth2 and
    your personal Yahoo! account (if you don't have one yet, please create one). Register
    a new user for the `Cloudstreet Market` application.
  id: totrans-3596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在启动Tomcat服务器。使用Yahoo! Oauth2和您的个人Yahoo!帐户登录应用程序（如果您还没有，请创建一个）。为`Cloudstreet
    Market`应用程序注册一个新用户。
- en: In your web browser, open two different tabs in the application with your logged-in
    user. Keep one of these tabs on the landing page.
  id: totrans-3597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中，使用已登录的用户在应用程序中打开两个不同的选项卡。将其中一个选项卡保留在登陆页面上。
- en: With the other tab, navigate to the **Prices and market** | **All prices search**
    menu. Search for a ticker, let's say Facebook, and buy three stocks of it.
  id: totrans-3598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用另一个选项卡，导航到**价格和市场** | **所有价格搜索**菜单。搜索一个股票代码，比如Facebook，并购买三股。
- en: Wait to receive the information message:![Backend](img/image00898.jpeg)
  id: totrans-3599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待接收信息消息：![后端](img/image00898.jpeg)
- en: Then check the first tab of the browser (the tab you were not using).
  id: totrans-3600
  prefs: []
  type: TYPE_NORMAL
  zh: 然后检查浏览器的第一个选项卡（您没有使用的选项卡）。
- en: '![Backend](img/image00899.jpeg)'
  id: totrans-3601
  prefs: []
  type: TYPE_IMG
  zh: '![后端](img/image00899.jpeg)'
- en: You will notice that the activity feed has received a new element at the top!
  id: totrans-3602
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到活动源在顶部收到了一个新元素！
- en: Also, in the console you should have the following log trace:![Backend](img/image00900.jpeg)
  id: totrans-3603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在控制台中，您应该有以下日志跟踪：![后端](img/image00900.jpeg)
- en: Similarly, **like** events are refreshed in real time:![Backend](img/image00901.jpeg)
  id: totrans-3604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，**like**事件会实时刷新：![后端](img/image00901.jpeg)
- en: How it works...
  id: totrans-3605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here, we are going to look at a couple of general concepts about WebSockets,
    STOMP, and SockJS before introducing the Spring-WebSocket support tools.
  id: totrans-3606
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在介绍Spring-WebSocket支持工具之前，看一下关于WebSocket、STOMP和SockJS的一些一般概念。
- en: An introduction to WebSockets
  id: totrans-3607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WebSocket简介
- en: WebSocket is a full-duplex communication protocol based on TCP. A full-duplex
    communication system allows two parties to *speak* and to be *heard* simultaneously
    through a bidirectional channel. A conversation by telephone is probably the best
    example of a full-duplex system.
  id: totrans-3608
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket是基于TCP的全双工通信协议。全双工通信系统允许两方通过双向通道同时*发言*和*被听到*。电话对话可能是全双工系统的最佳例子。
- en: This technology is particularly useful for applications that need to leverage
    the overhead induced by new HTTP connections. Since 2011, the WebSocket protocol
    has been an Internet Standard ([https://tools.ietf.org/html/rfc6455](https://tools.ietf.org/html/rfc6455)).
  id: totrans-3609
  prefs: []
  type: TYPE_NORMAL
  zh: 这项技术特别适用于需要利用新HTTP连接引起的开销的应用程序。自2011年以来，WebSocket协议一直是互联网标准（[https://tools.ietf.org/html/rfc6455](https://tools.ietf.org/html/rfc6455)）。
- en: WebSocket Lifecycle
  id: totrans-3610
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: WebSocket生命周期
- en: Before the WebSocket connection is established, the client initiates a handshake
    HTTP to which the server responds. The handshake request also represents a protocol
    upgrade request (from HTTP to WebSocket), formalized with an `Upgrade` header.
    The server confirms this protocol upgrade with the same `Upgrade` header (and
    value) in its response. In addition to the `Upgrade` header, and in a perspective
    of protection against caching-proxy attacks, the client also sends a base-64 encoded
    random key. To this, the server sends back a hash of this key in a `Sec-WebSocket-Accept`
    header.
  id: totrans-3611
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立WebSocket连接之前，客户端发起握手HTTP请求，服务器做出响应。握手请求还代表了一个协议升级请求（从HTTP到WebSocket），用`Upgrade`头正式化。服务器通过响应中相同的`Upgrade`头（和值）确认了这个协议升级。除了`Upgrade`头之外，为了防范缓存代理攻击，客户端还发送了一个base-64编码的随机密钥。对此，服务器在`Sec-WebSocket-Accept`头中发送了这个密钥的哈希。
- en: 'Here is an example of a handshake occurring in our application:'
  id: totrans-3612
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应用程序中发生的握手的示例：
- en: '![WebSocket Lifecycle](img/image00902.jpeg)'
  id: totrans-3613
  prefs: []
  type: TYPE_IMG
  zh: '![WebSocket生命周期](img/image00902.jpeg)'
- en: 'The protocol lifecycle can be summarized by the following sequence diagram:'
  id: totrans-3614
  prefs: []
  type: TYPE_NORMAL
  zh: 该协议生命周期可以通过以下序列图进行总结：
- en: '![WebSocket Lifecycle](img/image00903.jpeg)'
  id: totrans-3615
  prefs: []
  type: TYPE_IMG
  zh: '![WebSocket生命周期](img/image00903.jpeg)'
- en: Two dedicated URI schemes
  id: totrans-3616
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 两个专用的URI方案
- en: The protocol defines two URI schemes for `WebSockets ws://` and `wss://` (with
    `wss` allowing encrypted connections).
  id: totrans-3617
  prefs: []
  type: TYPE_NORMAL
  zh: 该协议为`WebSockets ws://`和`wss://`定义了两个URI方案（`wss`允许加密连接）。
- en: The STOMP protocol
  id: totrans-3618
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: STOMP协议
- en: '**STOMP** stands for **Simple Text Oriented Messaging Protocol**. This protocol
    provides a frame-based interoperable format that allows STOMP clients to communicate
    with STOMP message brokers.'
  id: totrans-3619
  prefs: []
  type: TYPE_NORMAL
  zh: '**STOMP**代表**简单文本定向消息协议**。该协议提供了一种基于帧的可互操作格式，允许STOMP客户端与STOMP消息代理通信。'
- en: It is a messaging protocol that requires and trusts an existing 2-way streaming
    network protocol on a higher level. WebSocket provides a frame-based data-transfer,
    and the WebSocket frames can indeed be STOMP-formatted frames.
  id: totrans-3620
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个需要并信任现有的双向流式网络协议的消息协议。WebSocket提供基于帧的数据传输，WebSocket帧确实可以是STOMP格式的帧。
- en: 'Here is an example of a STOMP frame:'
  id: totrans-3621
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个STOMP帧的示例：
- en: '[PRE400]'
  id: totrans-3622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: 'A frame has the following structure:'
  id: totrans-3623
  prefs: []
  type: TYPE_NORMAL
  zh: 帧具有以下结构：
- en: '![The STOMP protocol](img/image00904.jpeg)'
  id: totrans-3624
  prefs: []
  type: TYPE_IMG
  zh: '![STOMP协议](img/image00904.jpeg)'
- en: The STOMP protocol specification defines a set of client commands (`SEND`, `SUBSCRIBE`,
    `UNSUBSCRIBE`, `BEGIN`, `COMMIT`, `ABORT`, `ACK`, `NACK`, `DISCONNECT`, `CONNECT`,
    and `STOMP`) and server commands (`CONNECTED`, `MESSAGE`, `RECEIPT`, and `ERROR`).
  id: totrans-3625
  prefs: []
  type: TYPE_NORMAL
  zh: STOMP协议规范定义了一组客户端命令（`SEND`，`SUBSCRIBE`，`UNSUBSCRIBE`，`BEGIN`，`COMMIT`，`ABORT`，`ACK`，`NACK`，`DISCONNECT`，`CONNECT`和`STOMP`）和服务器命令（`CONNECTED`，`MESSAGE`，`RECEIPT`和`ERROR`）。
- en: 'Only `SEND`, `MESSAGE`, and `ERROR` frames can have a body. The protocol specification
    can be found online at: [http://stomp.github.io/stomp-specification-1.2.html](http://stomp.github.io/stomp-specification-1.2.html).'
  id: totrans-3626
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`SEND`，`MESSAGE`和`ERROR`帧可以有主体。协议规范可以在网上找到：[http://stomp.github.io/stomp-specification-1.2.html](http://stomp.github.io/stomp-specification-1.2.html)。
- en: On the client side, we have used the JavaScript library **STOMP Over WebSocket**
    identified with the file `stomp.js`. This library maps STOMP formatted frames
    to WebSocket frames. By default, it looks up the web browser `WebSocket` class
    to make the STOMP client create the WebSocket.
  id: totrans-3627
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们使用了JavaScript库**STOMP Over WebSocket**，文件名为`stomp.js`。该库将STOMP格式的帧映射到WebSocket帧。默认情况下，它查找web浏览器的`WebSocket`类，以使STOMP客户端创建WebSocket。
- en: 'The library can also create STOMP clients from custom `WebSocket` implementations.
    From the SockJS WebSockets, we create STOMP clients like so:'
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
  zh: 该库还可以从自定义的`WebSocket`实现中创建STOMP客户端。从SockJS WebSockets，我们可以这样创建STOMP客户端：
- en: '[PRE401]'
  id: totrans-3629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: SockJS
  id: totrans-3630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SockJS
- en: WebSockets are supported by almost all browsers nowadays. Still, we don't have
    control over the versions that our customers are using. In many cases, hiding
    such a technology from 7 to 15% of the audience is simply not an option.
  id: totrans-3631
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets现在几乎被所有浏览器支持。但是，我们无法控制客户使用的版本。在许多情况下，对7%到15%的受众隐藏这样的技术根本不是一个选择。
- en: On the client side, SockJS provides a custom implementation that can be seen
    as a decorator around the browser-native `WebSocket` implementation. With a simple
    and handy library, SockJS ensures cross-browser compatibility. With a list of
    fallback transport options (`xhr-streaming`, `xdr-streaming`, `iframe-eventsource`,
    `iframe-htmlfile`, `xhr-polling`, and so on), it emulates WebSockets as much as
    possible.
  id: totrans-3632
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，SockJS提供了一个自定义实现，可以看作是浏览器原生`WebSocket`实现的装饰器。通过一个简单而方便的库，SockJS确保了跨浏览器的兼容性。通过一系列回退传输选项（`xhr-streaming`，`xdr-streaming`，`iframe-eventsource`，`iframe-htmlfile`，`xhr-polling`等），它尽可能地模拟了WebSockets。
- en: 'For server implementations, to match the clients'' fallback behaviors, SockJS
    also defines its own protocol:'
  id: totrans-3633
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器实现，为了匹配客户端的回退行为，SockJS还定义了自己的协议：
- en: '[http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html](http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html)'
  id: totrans-3634
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html](http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html)'
- en: Spring WebSocket support
  id: totrans-3635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring WebSocket支持
- en: 'As per the Java WebSocket API specification (JSR-356), Spring 4+ provides a
    solution that is packaged within the modules `spring-websocket` and `spring-messaging`.
    But Spring provides more than just an implementation of JSR-356\. For example,
    based upon the facts that:'
  id: totrans-3636
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Java WebSocket API规范（JSR-356），Spring 4+提供了一个解决方案，该解决方案打包在模块`spring-websocket`和`spring-messaging`中。但是Spring提供的不仅仅是JSR-356的实现。例如，基于以下事实：
- en: 'WebSockets without the use of a message protocol are too low level to be directly
    used in applications without custom handling frameworks: the Spring team made
    the choice to provide and support a messaging protocol implementation (STOMP).'
  id: totrans-3637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有使用消息协议的WebSocket太低级，无法直接在应用程序中使用，需要自定义处理框架：Spring团队选择提供和支持消息协议实现（STOMP）。
- en: 'WebSockets are not supported by all browsers yet: Spring also provides a WebSocket
    fallback support with its implementation of the SockJS protocol.'
  id: totrans-3638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSockets目前并不受所有浏览器支持：Spring还通过其实现的SockJS协议提供了WebSocket回退支持。
- en: All-in-one configuration
  id: totrans-3639
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一体化配置
- en: 'We have enabled the WebSocket engine and configured it for SockJS and STOMP
    from only one configuration bean—`WebSocketConfig`::'
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经启用了WebSocket引擎，并为SockJS和STOMP配置了一个配置bean——`WebSocketConfig`：
- en: '[PRE402]'
  id: totrans-3641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: 'The WebSocket endPoint is defined for the context path `/users/feed/add`. It
    matches on the client side, the defined SockJS client constructor argument:'
  id: totrans-3642
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket端点定义为上下文路径`/users/feed/add`。它在客户端端匹配了定义的SockJS客户端构造函数参数：
- en: '[PRE403]'
  id: totrans-3643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: From the endpoint (`clientInboundChannel`), the WebSocket engine needs to choose
    where to route the message to, and we have two options here for this. Depending
    on the situation and what we want to achieve, we can target an in-app consumer
    (message handler) or directly the message broker in order to dispatch the message
    to the subscribed clients.
  id: totrans-3644
  prefs: []
  type: TYPE_NORMAL
  zh: 从端点（`clientInboundChannel`）到消息处理程序的路由，WebSocket引擎需要选择将消息路由到何处，我们在这里有两个选项。根据情况和我们想要实现的目标，我们可以将消息定位到应用内消费者（消息处理程序）或直接将消息路由到消息代理，以便将消息分发给订阅的客户端。
- en: This split is configured by defining two different destination prefixes. In
    our case, we decided to use the `/app` prefix to route messages to the corresponding
    message handlers and the `/topic` prefix to identify messages that are ready to
    be dispatched to clients.
  id: totrans-3645
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分割是通过定义两个不同的目的地前缀来配置的。在我们的情况下，我们决定使用`/app`前缀将消息路由到相应的消息处理程序，使用`/topic`前缀来识别准备分发给客户端的消息。
- en: Let's see now how message handlers can be defined and how they can be used.
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何定义消息处理程序以及如何使用它们。
- en: Defining message handlers via @MessageMapping
  id: totrans-3647
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过@MessageMapping定义消息处理程序
- en: '`@MessageMapping` annotations are used in Spring MVC controller methods to
    mark them available as message handler methods.'
  id: totrans-3648
  prefs: []
  type: TYPE_NORMAL
  zh: '`@MessageMapping`注解用于Spring MVC控制器方法，标记它们可用作消息处理程序方法。'
- en: From a message in the `clientInboundChannel` to be routed to a message handler,
    the WebSocket engine narrows down the right `@MessageMapping` method based upon
    their configured value.
  id: totrans-3649
  prefs: []
  type: TYPE_NORMAL
  zh: 从`clientInboundChannel`中的消息到路由到消息处理程序，WebSocket引擎根据它们配置的值缩小到正确的`@MessageMapping`方法。
- en: 'As usual in Spring MVC, this value can be defined in an Ant-style (such as`/targets/**`
    for example). However, in the same way as the `@RequestParam` and `@PathVariable`
    annotations, template variables can also be passed through using `@DestinationVariable`
    annotations on method arguments (destination templates are defined like so: `/targets/{target}`).'
  id: totrans-3650
  prefs: []
  type: TYPE_NORMAL
  zh: 与Spring MVC一样，这个值可以用Ant样式（例如`/targets/**`）来定义。然而，与`@RequestParam`和`@PathVariable`注解一样，模板变量也可以通过在方法参数上使用`@DestinationVariable`注解来传递（目标模板定义如下：`/targets/{target}`）。
- en: Sending a message to dispatch
  id: totrans-3651
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送消息以进行分发
- en: A message broker must be configured. In the case of this recipe, we are using
    a `simple` message broker (`simpMessageBroker`) that we have enabled from `MessageBrokerRegistry`.
    This type of in-memory broker is suited to stack STOMP messages when there is
    no need for external brokers (RabbitMQ, ActiveMQ, and so on). When there is availability
    to dispatch messages to WebSocket clients, these messages are sent to `clientOutboundChannel`.
  id: totrans-3652
  prefs: []
  type: TYPE_NORMAL
  zh: 必须配置消息代理。在这个示例中，我们使用了一个`simple`消息代理（`simpMessageBroker`），我们已经从`MessageBrokerRegistry`中启用了它。这种内存中的代理适用于在没有外部代理（RabbitMQ、ActiveMQ等）的情况下堆叠STOMP消息。当有可用性将消息分发给WebSocket客户端时，这些消息被发送到`clientOutboundChannel`。
- en: We have seen that when message destinations are prefixed with `/topic` (like
    in our case), messages are directly sent to the message broker. But what about
    sending messages for dispatch when we are in a message handler method or elsewhere
    in the back-end code? We can use for this the `SimpMessagingTemplate` described
    in the next section.
  id: totrans-3653
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，当消息目的地以`/topic`为前缀时（就像我们的情况一样），消息会直接发送到消息代理。但是当我们在消息处理程序方法或后端代码的其他地方发送调度消息时怎么办？我们可以使用下一节中描述的`SimpMessagingTemplate`来实现这一点。
- en: SimpMessagingTemplate
  id: totrans-3654
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SimpMessagingTemplate
- en: We auto-wired a `SimpMessagingTemplate` in the CSMReceiver class and we will
    use it later to forward the payload of AMQP messages to WebSocket clients.
  id: totrans-3655
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在CSMReceiver类中自动装配了一个`SimpMessagingTemplate`，稍后我们将使用它将AMQP消息的有效载荷转发给WebSocket客户端。
- en: A `SimpMessagingTemplate` serves the same purpose as the Spring `JmsTemplate`
    (if you are familiar with it), but it suits simple messaging protocols (such as
    STOMP).
  id: totrans-3656
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpMessagingTemplate`与Spring的`JmsTemplate`具有相同的目的（如果您熟悉它），但它适用于简单的消息协议（如STOMP）。'
- en: 'A handy and inherited famous method is the `convertAndSend` method, which tries
    to identify and use a `MessageConverter` to serialize an object and put it into
    a new message before sending this message to the specified destination:'
  id: totrans-3657
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便且继承自著名的方法是`convertAndSend`方法，它尝试识别并使用`MessageConverter`来序列化一个对象，并将其放入一个新消息中，然后将此消息发送到指定的目的地：
- en: '[PRE404]'
  id: totrans-3658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: The idea is to target an identified destination (with a `/topic` prefix in our
    case) for a message broker.
  id: totrans-3659
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是为消息代理目标（在我们的情况下是带有`/topic`前缀）定位。
- en: The @SendTo annotation
  id: totrans-3660
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '@SendTo注解'
- en: 'This annotation saves us from having to explicitly use the `SimpMessagingTemplate`.
    The destination is specified as the annotation value. This method will also handle
    the conversion from payload to message:'
  id: totrans-3661
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注解使我们不必显式使用`SimpMessagingTemplate`。目的地被指定为注解值。这个方法还将处理从有效载荷到消息的转换：
- en: '[PRE405]'
  id: totrans-3662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: There's more…
  id: totrans-3663
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this section, we provide and extra source of information related to the SockJS
    fallback options.
  id: totrans-3664
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们提供了与SockJS回退选项相关的额外信息来源。
- en: As introduced earlier, Spring provides a SockJS protocol implementation. It
    is easy to configure SockJS in Spring using the `withSockJS()` functional method
    during the `StompEndPoint` registration. This little piece of configuration alone,
    tells Spring to activate SockJS fallback options on our endpoint.
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前介绍的，Spring提供了SockJS协议实现。在Spring中使用`withSockJS()`功能方法配置SockJS很容易，在`StompEndPoint`注册期间。这个小小的配置片段告诉Spring在我们的端点上激活SockJS回退选项。
- en: The very first call of the SockJS client to the server is an HTTP request to
    the endpoint path concatenated with `/info` to assess the server configuration.
    If this HTTP request does not succeed, no other transport is attempted (not even
    WebSocket).
  id: totrans-3666
  prefs: []
  type: TYPE_NORMAL
  zh: SockJS客户端对服务器的第一个调用是一个HTTP请求，到端点路径连接`/info`以评估服务器配置。如果此HTTP请求不成功，则不会尝试任何其他传输（甚至不会尝试WebSocket）。
- en: 'You can read more in the Spring reference guide if you want to understand how
    a SockJS client queries the server for a suitable fallback option:'
  id: totrans-3667
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解SockJS客户端如何查询服务器以获取合适的回退选项，可以在Spring参考指南中阅读更多内容：
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake)'
  id: totrans-3668
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake)'
- en: See also
  id: totrans-3669
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**JSR-356**: You can find the specification document online to read more about
    the Java API for WebSocket specification that spring-websocket is complying with:
    [https://jcp.org/en/jsr/detail?id=356](https://jcp.org/en/jsr/detail?id=356)'
  id: totrans-3670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSR-356**：您可以在线找到规范文档，了解有关Java WebSocket规范的更多信息，spring-websocket正在遵循该规范：[https://jcp.org/en/jsr/detail?id=356](https://jcp.org/en/jsr/detail?id=356)'
- en: Using RabbitMQ as a multiprotocol message broker
  id: totrans-3671
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RabbitMQ作为多协议消息代理
- en: Installing and using an external RabbitMQ as a full-featured message broker
    enables new technological opportunities and the design of a production-like infrastructure.
  id: totrans-3672
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和使用外部RabbitMQ作为功能齐全的消息代理可以开启新的技术机会，并设计类似生产环境的基础设施。
- en: Getting ready
  id: totrans-3673
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will install RabbitMQ as a standalone server and configure
    it so it supports STOMP messages.
  id: totrans-3674
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将安装RabbitMQ作为独立服务器，并配置它以支持STOMP消息。
- en: We will also update our WebSocket Spring configuration to rely on this full-featured
    message broker, instead of the internal simple message broker.
  id: totrans-3675
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将更新我们的WebSocket Spring配置，以依赖于这个功能齐全的消息代理，而不是内部简单的消息代理。
- en: How to do it…
  id: totrans-3676
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: From the **Git Perspective** in Eclipse, check out the `v8.2.x` branch this
    time.
  id: totrans-3677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的**Git Perspective**中，这次检出`v8.2.x`分支。
- en: Two new Java projects have been added, and they must be imported. From Eclipse,
    select the **File** | **Import…** menu.
  id: totrans-3678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已添加了两个新的Java项目，必须导入。从Eclipse中，选择**File** | **Import…**菜单。
- en: The **Import** wizard opens so you can select a type of project within a hierarchy.
    Open the **Maven** category, select **Existing Maven Projects** option, and click
    on **Next**.
  id: totrans-3679
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入**向导打开，以便您可以在层次结构中选择项目类型。打开**Maven**类别，选择**Existing Maven Projects**选项，然后单击**Next**。'
- en: The **Import Maven Project** wizard opens. As the root directory, select (or
    type) the workspace location (which should be `<home-directory>/workspace`).
  id: totrans-3680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入Maven项目**向导打开。选择（或输入）工作区位置（应为`<home-directory>/workspace`）作为根目录。'
- en: 'As shown in the following screenshot, select the following two **pom.xml**
    files: **cloudstreetmarket-shared/pom.xml** and **cloudstreetmarket-websocket/pom.xml**.![How
    to do it…](img/image00905.jpeg)'
  id: totrans-3681
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，选择以下两个**pom.xml**文件：**cloudstreetmarket-shared/pom.xml**和**cloudstreetmarket-websocket/pom.xml**。![如何做…](img/image00905.jpeg)
- en: The two projects `cloudstreetmarket-shared` and `cloudstreetmarket-websocket`
    must show up in the project hierarchy.
  id: totrans-3682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个项目`cloudstreetmarket-shared`和`cloudstreetmarket-websocket`必须显示在项目层次结构中。
- en: 'Target a runtime environment on the web module with the following instructions:
    In Eclipse, right-click on the **cloudmarket-websocket** project, select the **Properties**
    menu, in the navigation panel, select **Targeted Runtimes**. In the central window,
    check the tick of the Server **Apache Tomcat v8.0**.'
  id: totrans-3683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web模块上定位运行时环境，按照以下说明操作：在Eclipse中，右键单击**cloudmarket-websocket**项目，选择**Properties**菜单，在导航面板中选择**Targeted
    Runtimes**。在中央窗口中，勾选服务器**Apache Tomcat v8.0**的复选框。
- en: In the `/app` directory, the `cloudstreetmarket.properties` file has been updated.
    Reflect the changes in your file located in `<home-directory>/app/cloudstreetmarket.properties`.
  id: totrans-3684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/app`目录中，`cloudstreetmarket.properties`文件已更新。反映在位于`<home-directory>/app/cloudstreetmarket.properties`的文件中的更改。
- en: Run the `Maven clean` and `Maven install` commands on `zipcloud-parent` and
    then on `cloudstreetmarket-parent`, followed by a **Maven** | **Update Project**
    on all the modules.
  id: totrans-3685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`zipcloud-parent`上运行`Maven clean`和`Maven install`命令，然后在`cloudstreetmarket-parent`上运行，然后在所有模块上运行**Maven**
    | **Update Project**。
- en: Running RabbitMQ in the way we want, requires us to download and install the
    product as a standalone product.
  id: totrans-3686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以我们想要的方式运行RabbitMQ，需要我们下载并安装该产品作为独立产品。
- en: 'Depending upon the configuration of the local machine, different ways of proceeding
    apply. You will find the appropriate links and installation guides on the RabbitMQ
    website: [https://www.rabbitmq.com/download.html](https://www.rabbitmq.com/download.html)'
  id: totrans-3687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据本地机器的配置，不同的操作方式适用。您将在RabbitMQ网站上找到适当的链接和安装指南：[https://www.rabbitmq.com/download.html](https://www.rabbitmq.com/download.html)
- en: Tip
  id: totrans-3688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are using Windows OS, please note that it is a prerequisite to download
    and install Erlang ([http://www.erlang.org/download.html](http://www.erlang.org/download.html)).
  id: totrans-3689
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Windows操作系统，请注意，下载和安装Erlang（[http://www.erlang.org/download.html](http://www.erlang.org/download.html)）是先决条件。
- en: 'Once RabbitMQ is installed and once its service is running, open your favourite
    web browser in order to check that RabbitMQ is running as a web console at the
    URL: `http://localhost:15672` (like in the following screenshot).![How to do it…](img/image00906.jpeg)'
  id: totrans-3690
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了RabbitMQ并且其服务正在运行，打开您喜欢的Web浏览器，以检查RabbitMQ是否作为Web控制台运行在URL：`http://localhost:15672`（就像下面的截图中一样）。![如何做…](img/image00906.jpeg)
- en: Note
  id: totrans-3691
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will come back to this later to set up the RabbitMQ configuration. For now,
    just remember that this console can be used to monitor messages and administrate
    connections, queues, topics, and exchanges.
  id: totrans-3692
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后回来设置RabbitMQ配置。现在，只需记住这个控制台可以用于监视消息和管理连接、队列、主题和交换。
- en: 'The RabbitMQ STOMP plugin needs to be activated. This is done from the `rabbitmq_server-x.x.x\sbin`
    directory, by executing the command line:'
  id: totrans-3693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要激活RabbitMQ STOMP插件。这是从`rabbitmq_server-x.x.x\sbin`目录中执行以下命令行完成的：
- en: '[PRE406]'
  id: totrans-3694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: 'The following Maven dependencies have been added:'
  id: totrans-3695
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已添加以下Maven依赖项：
- en: '[PRE407]'
  id: totrans-3696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: 'In the `dispatcher-servlet.xml` of the `cloudstreetmarket-api` module, the
    following beans have been added making use of the `rabbit` namespace:'
  id: totrans-3697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-api`模块的`dispatcher-servlet.xml`中，已添加以下bean，使用`rabbit`命名空间：
- en: '[PRE408]'
  id: totrans-3698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: 'In the `csmcore-config.xml` file (in `cloudstreetmarket-core`), the following
    beans have been added with the `task` namespace:'
  id: totrans-3699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`csmcore-config.xml`文件（在`cloudstreetmarket-core`中），以下bean已添加了`task`命名空间：
- en: '[PRE409]'
  id: totrans-3700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: 'Still in the Spring configuration side of things, our `AnnotationConfig` bean
    (the main configuration bean for `cloudstreetmarket-api`) has been added the two
    annotations:'
  id: totrans-3701
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置方面，我们的`AnnotationConfig` bean（`cloudstreetmarket-api`的主配置bean）已添加了两个注释：
- en: '[PRE410]'
  id: totrans-3702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: 'Finally, the `WebSocketConfig` bean has been updated as well; especially the
    broker registration. We now make use of a `StompBrokerRelay` instead of a simples
    broker:'
  id: totrans-3703
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`WebSocketConfig` bean也已更新；特别是经纪人注册。我们现在使用的是`StompBrokerRelay`而不是简单的经纪人：
- en: '[PRE411]'
  id: totrans-3704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: Tip
  id: totrans-3705
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: That's it! Everything is set to use RabbitMQ as external broker for our system.
    However, please note that if you try to start the server right now, the code will
    be expecting MySQL to be installed as well as the Redis Server. These two third-party
    systems are going to be detailed over the two next recipes.
  id: totrans-3706
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！一切都准备好使用RabbitMQ作为我们系统的外部代理。但是，请注意，如果您现在尝试启动服务器，代码将期望MySQL已安装以及Redis服务器。这两个第三方系统将在接下来的两个配方中详细介绍。
- en: How it works...
  id: totrans-3707
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Using a full-featured message broker
  id: totrans-3708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用全功能消息代理
- en: In comparison to a simple message broker, using a full-featured message broker
    such as RabbitMQ provides interesting benefits, which we will discuss now.
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单消息代理相比，使用RabbitMQ等全功能消息代理提供了有趣的好处，我们现在将讨论这些好处。
- en: Clusterability – RabbitMQ
  id: totrans-3710
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 集群性-RabbitMQ
- en: A RabbitMQ broker is made of one or more Erlang nodes. Each of these nodes represent
    an instance of RabbitMQ in itself and can be started independently. Nodes can
    be linked with each other using the command line tool `rabbitmqctl`. For example,
    `rabbitmqctl join_cluster rabbit@rabbit.cloudstreetmarket.com` would actually
    connect one node to an existing cluster network. RabbitMQ nodes use cookies to
    communicate with one another. To be connected on the same cluster, two nodes must
    have the same cookie.
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
  zh: RabbitMQ代理由一个或多个Erlang节点组成。这些节点分别代表RabbitMQ的一个实例，并可以独立启动。节点可以使用命令行工具`rabbitmqctl`相互链接。例如，`rabbitmqctl
    join_cluster rabbit@rabbit.cloudstreetmarket.com`实际上会将一个节点连接到现有的集群网络。RabbitMQ节点使用cookie相互通信。为了连接到同一个集群，两个节点必须具有相同的cookie。
- en: More STOMP message types
  id: totrans-3712
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多的STOMP消息类型
- en: A full-featured message message broker (in comparison with a simple message
    broker) supports additional STOMP frame commands. For example, `ACK` and `RECEIPT`
    are not supported by simple message brokers.
  id: totrans-3713
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单消息代理相比，使用全功能消息代理（而不是简单消息代理）支持额外的STOMP帧命令。例如，简单消息代理不支持`ACK`和`RECEIPT`。
- en: StompMessageBrokerRelay
  id: totrans-3714
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StompMessageBrokerRelay
- en: In the previous recipe, we talked about the flow that a message passes through
    in the Spring WebSocket engine. As shown with the following image, this flow is
    not affected at all when switching to an external message broker relay.
  id: totrans-3715
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们讨论了消息在Spring WebSocket引擎中经过的流程。如下图所示，当切换到外部消息代理中继时，这个流程不受影响。
- en: '![StompMessageBrokerRelay](img/image00907.jpeg)'
  id: totrans-3716
  prefs: []
  type: TYPE_IMG
  zh: '![StompMessageBrokerRelay](img/image00907.jpeg)'
- en: Only the RabbitMQ external message broker shows up as an extra piece.`BrokerMessageHandler`
    (`StompBrokerRelayMessageHandler`) acts only as a proxy targeting a RabbitMQ node
    behind the scenes. Only one TCP connection is maintained between the `StompBrokerRelay`
    and its message broker. The `StompBrokerRelay` maintains the connection by sending
    heartbeat messages.
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
  zh: 只有RabbitMQ外部消息代理显示为额外的部分。`BrokerMessageHandler`（`StompBrokerRelayMessageHandler`）只充当一个代理，将目标定位到幕后的RabbitMQ节点。`StompBrokerRelay`和其消息代理之间只维护一个TCP连接。`StompBrokerRelay`通过发送心跳消息来维护连接。
- en: See also
  id: totrans-3718
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**RabbitMQ guide and documentation**: This recipe is just an overview, however
    the RabbitMQ documentation is well done and very complete. It is a great source
    of information, and you can find it at:'
  id: totrans-3719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RabbitMQ指南和文档**：这个配方只是一个概述，但RabbitMQ文档做得很好，非常完整。这是一个很好的信息来源，你可以在这里找到：'
- en: '[http://www.rabbitmq.com/documentation.html](http://www.rabbitmq.com/documentation.html)'
  id: totrans-3720
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.rabbitmq.com/documentation.html](http://www.rabbitmq.com/documentation.html)'
- en: '[http://www.rabbitmq.com/stomp.html](http://www.rabbitmq.com/stomp.html)'
  id: totrans-3721
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.rabbitmq.com/stomp.html](http://www.rabbitmq.com/stomp.html)'
- en: Stacking and consuming tasks with RabbitMQ and AMQP
  id: totrans-3722
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RabbitMQ和AMQP堆叠和消费任务
- en: This recipe will demonstrate how to implement a **Message-oriented-Middleware**
    (**MoM**). This is a very popular technique in scalability based on asynchronous
    communication between components.
  id: totrans-3723
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将演示如何实现**面向消息的中间件**（**MoM**）。这是一种基于组件之间异步通信的可伸缩性技术。
- en: Getting ready
  id: totrans-3724
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have already introduced the new `cloudstreetmarket-shared` and `cloudstreetmarket-websocket`
    Java projects. WebSockets are now split away from `cloudstreetmarket-api`, but
    `cloudstreetmarket-websocket` and `cloudstreetmarket-api` will still communicate
    with each other using messaging.
  id: totrans-3725
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了新的`cloudstreetmarket-shared`和`cloudstreetmarket-websocket` Java项目。现在，WebSockets已从`cloudstreetmarket-api`中分离出来，但`cloudstreetmarket-websocket`和`cloudstreetmarket-api`仍将使用消息进行通信。
- en: In order to decouple secondary tasks from the request thread (secondary tasks
    like event producing), you need to learn how to configure and use AMQP message
    templates and listeners with RabbitMQ.
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将次要任务（如事件生成）与请求线程解耦，您需要学习如何使用RabbitMQ配置和使用AMQP消息模板和监听器。
- en: How to do it…
  id: totrans-3727
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Access the RabbitMQ web console at `http://localhost:15672`.
  id: totrans-3728
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问RabbitMQ Web控制台`http://localhost:15672`。
- en: Note
  id: totrans-3729
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you cannot reach the web console for some reason, please return to the previous
    recipe where the download and installation guidance can be found.
  id: totrans-3730
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因无法访问网络控制台，请返回到先前的教程，在那里可以找到下载和安装指南。
- en: 'In the **Queue** tab of the web console, create a new queue named `AMQP_USER_ACTIVITY`.
    Create it with the parameters **Durable** and **Auto-delete: "No"**:![How to do
    it…](img/image00908.jpeg)'
  id: totrans-3731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在网络控制台的**队列**选项卡中，创建一个名为`AMQP_USER_ACTIVITY`的新队列。使用**持久**和**自动删除: "否"**参数创建它：![如何做…](img/image00908.jpeg)'
- en: Sender side
  id: totrans-3732
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送方
- en: When the API is requested to perform operations such as **create a transaction**
    or **create a like activity**, we produce events.
  id: totrans-3733
  prefs: []
  type: TYPE_NORMAL
  zh: 当API被请求执行操作，如**创建交易**或**创建喜欢活动**时，我们会产生事件。
- en: Tip
  id: totrans-3734
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: With very few adjustments changes, we now use the `RabbitTemplate` rather than
    the former `SimpMessagingTemplate` and we target an intermediate AMQP queue instead
    of the ultimate STOMP client.
  id: totrans-3735
  prefs: []
  type: TYPE_NORMAL
  zh: 通过非常少的调整，我们现在使用`RabbitTemplate`而不是以前的`SimpMessagingTemplate`，并且将目标定位到一个中间的AMQP队列，而不是最终的STOMP客户端。
- en: 'In the `TransactionController`, the POST handler has been updated as follows:'
  id: totrans-3736
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TransactionController`中，POST处理程序已更新如下：
- en: '[PRE412]'
  id: totrans-3737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'In the `LikeActionController`, the POST handler has been updated as follows:'
  id: totrans-3738
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LikeActionController`中，POST处理程序已更新如下：
- en: '[PRE413]'
  id: totrans-3739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Consumer side
  id: totrans-3740
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消费方
- en: As explained previously, the `cloudstreetmarket-websocket` module now listens
    to the `AMQP_USER_ACTIVITY` queue.
  id: totrans-3741
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`cloudstreetmarket-websocket`模块现在监听`AMQP_USER_ACTIVITY`队列。
- en: 'The necessary configuration is set in the `displatcher-servlet.xml` (`cloudstreetmarket-websocket`).
    There, we create a `rabbitConnectionFactory` and a `rabbitListenerContainerFactory`
    bean:'
  id: totrans-3742
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必要的配置设置在`displatcher-servlet.xml`（`cloudstreetmarket-websocket`）中。在那里，我们创建了一个`rabbitConnectionFactory`和一个`rabbitListenerContainerFactory`
    bean：
- en: '[PRE414]'
  id: totrans-3743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'Finally, the listener bean is created as follows with a `CSMReceiver` class:'
  id: totrans-3744
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，监听器bean的创建如下，使用`CSMReceiver`类：
- en: '[PRE415]'
  id: totrans-3745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: Tip
  id: totrans-3746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can recognize the `SimpMessagingTemplate` used here to forward incoming
    message payloads to the final STOMP clients.
  id: totrans-3747
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里识别使用的`SimpMessagingTemplate`，将传入的消息负载转发给最终的STOMP客户端。
- en: A new `WebSocketConfig` bean has been created in `cloudstreetmarket-websocket`.
    This one is very similar to the one we had in `cloudstreetmarket-api`.
  id: totrans-3748
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-websocket`中创建了一个新的`WebSocketConfig` bean。这个bean与我们在`cloudstreetmarket-api`中的bean非常相似。
- en: Client-side
  id: totrans-3749
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端
- en: We haven't changed many things on the client side (`cloudstreetmarket-webapp`),
    as we are still focused on the landing page (`home_community_activity.js`) at
    this point.
  id: totrans-3750
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在客户端（`cloudstreetmarket-webapp`）上没有改变太多东西，因为我们目前仍专注于着陆页（`home_community_activity.js`）。
- en: 'The main difference is that the STOMP endpoint now targets the `/ws` context
    path. WebSockets are initiated from the `init()` function after a 5-second delay.
    Also, the `SockJS` socket and the STOMP client are now centralized in global variables
    (using the `Window` object) to simplify the WebSockets lifecycle during user navigation:'
  id: totrans-3751
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别在于STOMP端点现在将目标定位到`/ws`上下文路径。WebSockets在5秒延迟后从`init()`函数中启动。此外，`SockJS`套接字和STOMP客户端现在集中在全局变量（使用`Window`对象）中，以简化用户导航期间的WebSockets生命周期：
- en: '[PRE416]'
  id: totrans-3752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: How it works...
  id: totrans-3753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This type of infrastructure couples application components together in a loose
    but reliable way.
  id: totrans-3754
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的基础设施以一种松散但可靠的方式将应用程序组件耦合在一起。
- en: Messaging architecture overview
  id: totrans-3755
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息架构概述
- en: In this recipe, we have given our application a MoM. The main idea was to decouple
    processes as much as possible from the client-request lifecycle.
  id: totrans-3756
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们给我们的应用程序添加了一个MoM。主要想法是尽可能地将进程与客户端请求生命周期解耦。
- en: 'In an effort to keep our REST API focused on resource handling, some business
    logic clearly appeared secondary, such as:'
  id: totrans-3757
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的REST API专注于资源处理，一些业务逻辑显然是次要的，比如：
- en: Notifying the community that a new user has registered an account
  id: totrans-3758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知社区有新用户注册了一个帐户
- en: Notifying the community that a user has performed a specific transaction
  id: totrans-3759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知社区用户执行了特定交易
- en: Notifying the community that a user has liked another user's action
  id: totrans-3760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知社区用户已喜欢另一个用户的动作
- en: We have decided to create a new webapp dedicated to handle WebSockets. Our API
    now communicates with the `ws` web app by sending messages to it.
  id: totrans-3761
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定创建一个专门处理WebSockets的新webapp。我们的API现在通过向`ws` web app发送消息与之通信。
- en: The message payloads are community `Action` objects (from the `Action.java`
    superclass). From the `cloudstreetmarket-api` web app to the `cloudstreetmarket-websocket`
    webapp, these action objects are serialized and wrapped in AMQP messages. Once
    sent, they are stacked in one single RabbitMQ queue (`AMQP_USER_ACTIVITY`).
  id: totrans-3762
  prefs: []
  type: TYPE_NORMAL
  zh: 消息负载是社区`Action`对象（来自`Action.java`超类）。从`cloudstreetmarket-api` web app到`cloudstreetmarket-websocket`
    webapp，这些动作对象被序列化并包装在AMQP消息中。一旦发送，它们被堆叠在一个单一的RabbitMQ队列（`AMQP_USER_ACTIVITY`）中。
- en: Both the sender and the receiver parts are AMQP implementations (`RabbitTemplate`
    and `RabbitListener`). This logic will now be processed at the pace that the `websocket`
    web app can afford without having an impact on the user experience. When received
    (on the `cloudstreetmarket-websocket` side), message payloads are sent on the
    fly to WebSocket clients as STOMP messages.
  id: totrans-3763
  prefs: []
  type: TYPE_NORMAL
  zh: 发送方和接收方部分都是AMQP实现（`RabbitTemplate`和`RabbitListener`）。这种逻辑现在将以`websocket` web
    app可以承受的速度进行处理，而不会对用户体验产生影响。当在`cloudstreetmarket-websocket`端接收到时，消息负载将作为STOMP消息即时发送到WebSocket客户端。
- en: The benefit in direct performance here is arguable (in this example). We have
    after all mostly deferred the publishing of secondary events with an extra messaging
    layer. However, the benefits in design clarity and business components separation
    are priceless.
  id: totrans-3764
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里直接性能的好处是值得商榷的（在这个例子中）。毕竟，我们大部分时间都是通过额外的消息传递层推迟了次要事件的发布。然而，在设计清晰度和业务组件分离方面的好处是无价的。
- en: A scalable model
  id: totrans-3765
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可扩展的模型
- en: We have talked much about the benefits of keeping web apps stateless. This is
    what we have tried to do so far with the API and we have been proud of it!
  id: totrans-3766
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈论了保持web应用程序无状态的好处。这是我们迄今为止尝试做的事情，我们为此感到自豪！
- en: Without HTTP sessions, it would be pretty easy for us to react to traffic surges
    on the `api` web app, or on the `portal` web app. Without too much hassle, we
    would be able to set up a load balancer on the Apache HTTP proxy with `mod_proxy_balancer`
    for HTTP connections.
  id: totrans-3767
  prefs: []
  type: TYPE_NORMAL
  zh: 没有HTTP会话，我们很容易就能对`api`网络应用程序或`portal`网络应用程序的流量激增做出反应。在Apache HTTP代理上，我们可以很容易地使用`mod_proxy_balancer`设置负载均衡器来处理HTTP连接。
- en: 'You can read more about this in the Apache HTTP doc: [http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html](http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html)'
  id: totrans-3768
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Apache HTTP文档中了解更多信息：[http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html](http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html)
- en: '![A scalable model](img/image00909.jpeg)'
  id: totrans-3769
  prefs: []
  type: TYPE_IMG
  zh: '![可扩展模型](img/image00909.jpeg)'
- en: For WebSocket web apps, it would work basically the same in stateless. In the
    Apache HTTP configuration, a configured `mod_proxy_wstunnel` should handle load
    balancing over WebSockets and provide an application failover.
  id: totrans-3770
  prefs: []
  type: TYPE_NORMAL
  zh: 对于WebSocket网络应用程序，它在无状态时基本上是一样的。在Apache HTTP配置中，配置的`mod_proxy_wstunnel`应该处理WebSocket的负载平衡，并提供应用程序故障转移。
- en: AMQP or JMS?
  id: totrans-3771
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AMQP还是JMS？
- en: '**Advanced** **Message Queuing Protocol** (**AMQP**) defines a **wire-level**
    protocol and guarantees interoperability between senders and consumers. Any party
    compliant with this protocol can create and interpret messages, and thus interoperate
    with any other compliant component regardless of the underlying technologies.'
  id: totrans-3772
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级消息队列协议**（AMQP）定义了一种**线级**协议，并保证了发送方和消费方之间的互操作性。符合该协议的任何一方都可以创建和解释消息，因此可以与任何其他符合该协议的组件进行互操作，而不受底层技术的影响。'
- en: In comparison, JMS is part of Java platform **Enterprise Edition (EE)**. Coming
    with the JSR-914, JMS is a standard for APIs that defines how APIs should create,
    send, receive, and read messages. JMS does not provide wire-level guidance, and
    it doesn't guarantee interoperability between parties either.
  id: totrans-3773
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，JMS是Java平台**企业版（EE）**的一部分。随着JSR-914的到来，JMS是一个定义API应该如何创建、发送、接收和读取消息的标准。JMS不提供线级指导，也不保证各方之间的互操作性。
- en: AMQP controls the format of the messages and the flow these messages go through,
    while JMS controls the technical implementations of the boundaries (operators).
    When we look for communication consistency within a potentially complex environment,
    AMQP appears to be a good choice for MoM protocols.
  id: totrans-3774
  prefs: []
  type: TYPE_NORMAL
  zh: AMQP控制消息的格式和这些消息经过的流程，而JMS控制边界（操作员）的技术实现。当我们在一个潜在复杂的环境中寻求通信一致性时，AMQP似乎是MoM协议的一个不错的选择。
- en: There's more…
  id: totrans-3775
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This section provides external resources to extend your knowledge about AMQP
    and about event publishing methods.
  id: totrans-3776
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了扩展您对AMQP和事件发布方法的知识的外部资源。
- en: A great introduction to AMQP by pivotal
  id: totrans-3777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pivotal公司对AMQP的很好介绍
- en: 'If you want to get a better understanding of AMQP and its differences with
    JMS, check out the following article on the [spring.io](http://spring.io) website:'
  id: totrans-3778
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更好地了解AMQP及其与JMS的区别，请查看[spring.io](http://spring.io)网站上的以下文章：
- en: '[https://spring.io/understanding/AMQP](https://spring.io/understanding/AMQP)'
  id: totrans-3779
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://spring.io/understanding/AMQP](https://spring.io/understanding/AMQP)'
- en: A better way to publish application events
  id: totrans-3780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布应用程序事件的更好方法
- en: 'Right now, we didn''t implement a proper pattern to publish events. The article
    accessible from the link below comes from the [spring.io](http://spring.io) blog.
    It introduces best practices for event publishing with Spring 4.2+:'
  id: totrans-3781
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还没有实现一个适当的模式来发布事件。下面链接的文章来自[spring.io](http://spring.io)博客。它介绍了在Spring
    4.2+中发布事件的最佳实践：
- en: '[https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2](https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2)'
  id: totrans-3782
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2](https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2)'
- en: See also
  id: totrans-3783
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Load balancing WebSockets**: Read more about this topic in the following
    article by Arun Gupta (at Red Hat at the time):'
  id: totrans-3784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡WebSockets**：在以下文章中了解更多关于这个主题的内容，作者是Arun Gupta（当时在红帽公司）：'
- en: '[http://blog.arungupta.me/load-balance-websockets-apache-httpd-techtip48](http://blog.arungupta.me/load-balance-websockets-apache-httpd-techtip48)'
  id: totrans-3785
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://blog.arungupta.me/load-balance-websockets-apache-httpd-techtip48](http://blog.arungupta.me/load-balance-websockets-apache-httpd-techtip48)'
- en: Securing messages with Spring Session and Redis
  id: totrans-3786
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Session和Redis保护消息
- en: To summarize, so far we have seen how to broadcast STOMP messages to StockJS
    clients, how to stack messages in an external multi-protocol broker, and how to
    interact with this broker (RabbitMQ) in the Spring ecosystem.
  id: totrans-3787
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，到目前为止，我们已经看到了如何向StockJS客户端广播STOMP消息，如何在外部多协议代理中堆叠消息，以及如何与这个代理（RabbitMQ）在Spring生态系统中进行交互。
- en: Getting ready
  id: totrans-3788
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is about implementing dedicated queues, no longer topics (broadcast),
    so that users can receive real-time updates related to the specific content they
    are viewing. It is also a demonstration of how SockJS clients can send data to
    their private queues.
  id: totrans-3789
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是关于实现专用队列，而不再是主题（广播），以便用户可以接收与他们正在查看的特定内容相关的实时更新。这也演示了SockJS客户端如何将数据发送到他们的私有队列。
- en: For private queues, we had to secure messages and queue accesses. We have broken
    down our stateless rule of thumb for the API to make use of Spring Session. This
    extends the authentication performed by `cloudstreetmarket-api` and reuses the
    Spring Security context within `cloudstreetmarket-websocket`.
  id: totrans-3790
  prefs: []
  type: TYPE_NORMAL
  zh: 对于私有队列，我们必须保护消息和队列访问。我们已经打破了我们对API的无状态原则，以利用Spring Session。这扩展了`cloudstreetmarket-api`执行的身份验证，并在`cloudstreetmarket-websocket`中重用了Spring
    Security上下文。
- en: How to do it…
  id: totrans-3791
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Apache HTTP proxy configuration
  id: totrans-3792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache HTTP代理配置
- en: 'Because the `v8.2.x` branch introduced the new `cloudstreetmarket-websocket`
    web app, the Apache HTTP proxy configuration needs to be updated to fully support
    our WebSocket implementation. Our `VirtualHost` definition is now:'
  id: totrans-3793
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`v8.2.x`分支引入了新的`cloudstreetmarket-websocket`网络应用程序，Apache HTTP代理配置需要更新以完全支持我们的WebSocket实现。我们的`VirtualHost`定义现在是：
- en: '[PRE417]'
  id: totrans-3794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: Redis server installation
  id: totrans-3795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Redis服务器安装
- en: If you are on a Linux-based machine, download the latest stable version (3+)
    at [http://redis.io/download](http://redis.io/download). The format of the archive
    to download is `tar.gz`. Follow the instructions on the page to install it (unpackage
    it, uncompress it, and build it with the make command).
  id: totrans-3796
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是基于Linux的机器，请在[http://redis.io/download](http://redis.io/download)下载最新稳定版本（3+）。要下载的存档格式是`tar.gz`。按照页面上的说明进行安装（解包，解压缩，并使用make命令构建）。
- en: 'Once installed, for a quick start, run Redis with:'
  id: totrans-3797
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，要快速启动Redis，请运行：
- en: '[PRE418]'
  id: totrans-3798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'If you are on a Windows-based machine, we recommend this repository: [https://github.com/ServiceStack/redis-windows](https://github.com/ServiceStack/redis-windows).
    Follow the instructions on the `README.md` page. Running Microsoft''s native port
    of Redis allows you to run Redis without any other third-party installations.'
  id: totrans-3799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是基于Windows的机器，我们建议使用此存储库：[https://github.com/ServiceStack/redis-windows](https://github.com/ServiceStack/redis-windows)。请按照`README.md`页面上的说明进行操作。运行Microsoft的Redis本机端口允许您在没有任何其他第三方安装的情况下运行Redis。
- en: 'To quickly start Redis server, run the following command:'
  id: totrans-3800
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速启动Redis服务器，运行以下命令：
- en: '[PRE419]'
  id: totrans-3801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: When Redis is running, you should be able to see the following welcome screen:![Redis
    server installation](img/image00910.jpeg)
  id: totrans-3802
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Redis运行时，您应该能够看到以下欢迎屏幕：![Redis服务器安装](img/image00910.jpeg)
- en: Update your Tomcat configuration in Eclipse to use the local Tomcat installation.
    To do so, double-click on your current server (the **Servers** tab):![Redis server
    installation](img/image00911.jpeg)
  id: totrans-3803
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中更新Tomcat配置以使用本地Tomcat安装。要这样做，请双击当前服务器（**服务器**选项卡）：![Redis服务器安装](img/image00911.jpeg)
- en: This should open the configuration panel as follows:![Redis server installation](img/image00912.jpeg)
  id: totrans-3804
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开以下配置面板：![Redis服务器安装](img/image00912.jpeg)
- en: Make sure the **Use Tomcat installation** radio button is checked.
  id: totrans-3805
  prefs: []
  type: TYPE_NORMAL
  zh: 确保**使用Tomcat安装**单选按钮已被选中。
- en: Tip
  id: totrans-3806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If the panel is greyed out, right-click on your current server again, then click
    **Add**, **Remove**... Remove the three deployed web apps from your server and
    right click on the server once more, then click **Publish**.
  id: totrans-3807
  prefs: []
  type: TYPE_NORMAL
  zh: 如果面板变灰，右键单击当前服务器，然后单击**添加**，**删除**...从服务器中删除三个部署的web应用程序，然后再次右键单击服务器，然后单击**发布**。
- en: 'Now, download the following jars:'
  id: totrans-3808
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，下载以下jar包：
- en: '**jedis-2.5.2.jar**: A small Redis Java client library'
  id: totrans-3809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jedis-2.5.2.jar**：一个小型的Redis Java客户端库'
- en: '**commons-pool2-2.2.jar**: The Apache common object pooling library'
  id: totrans-3810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**commons-pool2-2.2.jar**：Apache通用对象池库'
- en: You can download them respectively from [http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar](http://%20http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar)
    and [http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar](http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar)
  id: totrans-3811
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以分别从[http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar](http://%20http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar)和[http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar](http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar)下载它们。
- en: You can also find these jars in the `chapter_8/libs` directory.
  id: totrans-3812
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`chapter_8/libs`目录中找到这些jar包。
- en: In the `chapter_8/libs` directory, you will also find the **tomcat-redis-session-manager-2.0-tomcat-8.jar**
    archive. Copy the three jars `tomcat-redis-session-manager-2.0-tomcat-8.jar`,
    `commons-pool2-2.2.jar`, and `jedis-2.5.2.jar` into the `lib` directory of your
    local Tomcat installation that Eclipse is referring to. This should be `C:\tomcat8\lib
    or /home/usr/{system.username}/tomcat8/lib` if our instructions have been followed
    in [Chapter 1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise
    Spring Application"), *Setup Routine for an Enterprise Spring Application*.
  id: totrans-3813
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter_8/libs`目录中，您还将找到**tomcat-redis-session-manager-2.0-tomcat-8.jar**存档。将三个jar包`tomcat-redis-session-manager-2.0-tomcat-8.jar`，`commons-pool2-2.2.jar`和`jedis-2.5.2.jar`复制到Eclipse引用的本地Tomcat安装的`lib`目录中。如果我们在[第1章](part0079.xhtml#aid-2BASE1
    "第1章。企业Spring应用程序的设置例程")中的说明已经被遵循，那么这应该是`C:\tomcat8\lib`或`/home/usr/{system.username}/tomcat8/lib`。
- en: Now in your workspace, open the **context.xml** file of your **Server** project.![Redis
    server installation](img/image00913.jpeg)
  id: totrans-3814
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在你的工作空间中，打开**Server**项目的**context.xml**文件。![Redis服务器安装](img/image00913.jpeg)
- en: 'Add the following `Valve` configuration:'
  id: totrans-3815
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`Valve`配置：
- en: '[PRE420]'
  id: totrans-3816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: MySQL server installation
  id: totrans-3817
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL服务器安装
- en: While creating the new `cloudstreetmarket-websocket` web app, we have also changed
    the database engine from HSQLDB to MySQL. Doing so has allowed us to share the
    database between the `api` and `websocket` modules.
  id: totrans-3818
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的`cloudstreetmarket-websocket`web应用程序时，我们还将数据库引擎从HSQLDB更改为了MySQL。这样做使我们能够在`api`和`websocket`模块之间共享数据库。
- en: The first step for this section is to download and install the MySQL community
    server from [http://dev.mysql.com/downloads/mysql](http://dev.mysql.com/downloads/mysql)..
    Download the generally available release suited to your system. If you are using
    MS Windows, we recommend installing the installer.
  id: totrans-3819
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本节的第一步是从[http://dev.mysql.com/downloads/mysql](http://dev.mysql.com/downloads/mysql)下载并安装MySQL社区服务器。下载适合您系统的通用版本。如果您使用的是MS
    Windows，我们建议安装安装程序。
- en: You can follow the installation instructions provided by the MySQL team at [http://dev.mysql.com/doc/refman/5.7/en/installing.html](http://dev.mysql.com/doc/refman/5.7/en/installing.html).
  id: totrans-3820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以按照MySQL团队在[http://dev.mysql.com/doc/refman/5.7/en/installing.html](http://dev.mysql.com/doc/refman/5.7/en/installing.html)提供的安装说明进行操作。
- en: We are now going to define a common configuration for schema users and a database
    name.
  id: totrans-3821
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在要为模式用户和数据库名称定义一个通用配置。
- en: Create a root user with the password of your choice.
  id: totrans-3822
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个以您选择的密码为密码的根用户。
- en: Create a technical user (with the administrator role) that the application will
    use. This user needs to be called `csm_tech` and needs to have the password `csmDB1$55`:![MySQL
    server installation](img/image00914.jpeg)
  id: totrans-3823
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个技术用户（具有管理员角色），应用程序将使用该用户。此用户需要被称为`csm_tech`，并且需要有密码`csmDB1$55`：![MySQL服务器安装](img/image00914.jpeg)
- en: 'Start the MySQL Client (the command line tool), as follows:'
  id: totrans-3824
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MySQL客户端（命令行工具），如下所示：
- en: On MS Windows, start the program `mysql.exe` in the MySQL servers installation
    directory:`\MySQL Server 5.6\bin\mysql.exe`
  id: totrans-3825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MS Windows上，启动MySQL服务器安装目录中的`mysql.exe`程序：`\MySQL Server 5.6\bin\mysql.exe`
- en: On Linux or Mac OS, invoke the `mysql` command from the terminal
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux或Mac OS上，从终端调用`mysql`命令
- en: On both platforms, the first step is then to provide the root password chosen
    earlier.
  id: totrans-3827
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个平台上，第一步是提供之前选择的root密码。
- en: 'Create a `csm` database either with the MySQL workbench or with MySQL client:'
  id: totrans-3828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用MySQL Workbench或MySQL客户端创建`csm`数据库：
- en: '[PRE421]'
  id: totrans-3829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'Select the `csm` database as the current database:'
  id: totrans-3830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`csm`数据库作为当前数据库：
- en: '[PRE422]'
  id: totrans-3831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: From Eclipse, start the local Tomcat server. Once it has started, you can shut
    it down again; this step was only to get Hibernate to generate the schema.
  id: totrans-3832
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Eclipse启动本地Tomcat服务器。一旦它启动，您可以再次关闭它；这一步只是为了让Hibernate生成模式。
- en: 'We need then to insert the data manually. To do so, execute the following import
    commands one after the other:'
  id: totrans-3833
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要手动插入数据。为此，依次执行以下导入命令：
- en: '[PRE423]'
  id: totrans-3834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Application-level changes
  id: totrans-3835
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用级别的更改
- en: 'In `cloudstreetmarket-api` and `cloudstreetmarket-websocket`, the following
    filter has been added to the `web.xml` files. This filter has to be positioned
    before the Spring Security chain definition:'
  id: totrans-3836
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-api`和`cloudstreetmarket-websocket`中，已向`web.xml`文件添加了以下过滤器。此过滤器必须在Spring
    Security链定义之前放置：
- en: '[PRE424]'
  id: totrans-3837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: 'A couple of Maven dependencies have also been added to `cloudstreetmarket-api`:'
  id: totrans-3838
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还添加了一些Maven依赖项到`cloudstreetmarket-api`：
- en: '[PRE425]'
  id: totrans-3839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'In `cloudstreetmarket-api` again, `security-config.xml` has been updated to
    reflect the following changes in the Spring Security filter chain:'
  id: totrans-3840
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在`cloudstreetmarket-api`中，`security-config.xml`已更新以反映Spring Security过滤器链中的以下更改：
- en: '[PRE426]'
  id: totrans-3841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: 'Also, this same `security-config.xml` file, as well as the `security-config.xml`
    file in `cloudstreetmarket-websocket` now define three extra beans:'
  id: totrans-3842
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，`security-config.xml`文件和`cloudstreetmarket-websocket`中的`security-config.xml`文件现在定义了三个额外的bean：
- en: '[PRE427]'
  id: totrans-3843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'Care was taken with `cloudstreetmarket-webapp` not to create sessions. We wanted
    sessions to be created only in the `cloudstreetmarket-api`. We have achieved this
    with adding the following configuration to the `web.xml` file in `cloudstreetmarket-webapp`:'
  id: totrans-3844
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-webapp`中小心翼翼地不要创建会话。我们希望会话只在`cloudstreetmarket-api`中创建。我们通过向`cloudstreetmarket-webapp`中的`web.xml`文件添加以下配置来实现这一点：
- en: '[PRE428]'
  id: totrans-3845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Regarding Spring Security, `cloudstreetmarket-websocket` has the following
    configuration:'
  id: totrans-3846
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于Spring Security，`cloudstreetmarket-websocket`具有以下配置：
- en: '[PRE429]'
  id: totrans-3847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'Two configuration-beans in `cloudstreetmarket-websocket` complete the XML configuration:'
  id: totrans-3848
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cloudstreetmarket-websocket`中的两个配置bean完成了XML配置：'
- en: 'The WebSocketConfig bean in edu.zipcloud.cloudstreetmarket.ws.config is defined
    as follows:'
  id: totrans-3849
  prefs: []
  type: TYPE_NORMAL
  zh: 在`edu.zipcloud.cloudstreetmarket.ws.config`中定义的`WebSocketConfig` bean如下：
- en: '[PRE430]'
  id: totrans-3850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: 'The `WebSocketSecurityConfig` bean in `edu.zipcloud.cloudstreetmarket.ws.config`
    is defined as follows:'
  id: totrans-3851
  prefs: []
  type: TYPE_NORMAL
  zh: 在`edu.zipcloud.cloudstreetmarket.ws.config`中定义的`WebSocketSecurityConfig` bean如下：
- en: '[PRE431]'
  id: totrans-3852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'The `ActivityFeedWSController` class has been copied over to `cloudstreetmarket-websocket`
    to broadcast user activities. It still doesn''t require any specific role or authentication:'
  id: totrans-3853
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ActivityFeedWSController`类已复制到`cloudstreetmarket-websocket`以广播用户活动。它仍然不需要任何特定的角色或身份验证：'
- en: '[PRE432]'
  id: totrans-3854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: 'One extra controller sends messages (which are up-to-date stocks values) into
    private queues:'
  id: totrans-3855
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个额外的控制器将消息（即最新的股票价值）发送到私有队列：
- en: '[PRE433]'
  id: totrans-3856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'On the client side, new WebSockets are initiated from the stock-search screens
    (stocks result lists). Especially in `stock_search.js` and `stock_search_by_market.js`,
    the following block has been added in order to regularly request data updates
    for the set of results that is displayed to the authenticated user:'
  id: totrans-3857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端上，新的WebSockets是从股票搜索屏幕（股票结果列表）发起的。特别是在`stock_search.js`和`stock_search_by_market.js`中，已添加以下块，以便定期请求对已显示给经过身份验证的用户的结果集的数据更新：
- en: '[PRE434]'
  id: totrans-3858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: The `httpAuth.generatedQueueId()`function generates a random queue name based
    on the authenticated username (see `http_authorized.js` for more details).
  id: totrans-3859
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpAuth.generatedQueueId()`函数基于经过身份验证的用户名生成一个随机队列名称（有关详细信息，请参见`http_authorized.js`）。'
- en: RabbitMQ configuration
  id: totrans-3860
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RabbitMQ配置
- en: Open the RabbitMQ WebConsole, select the **Admin** tab, then select the **Policy**
    menu (also accessible from the `http://localhost:15672/#/policies` URL).
  id: totrans-3861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开RabbitMQ WebConsole，选择**Admin**选项卡，然后选择**Policy**菜单（也可以从`http://localhost:15672/#/policies`
    URL访问）。
- en: Add the following policy:![RabbitMQ configuration](img/image00915.jpeg)
  id: totrans-3862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下策略：![RabbitMQ配置](img/image00915.jpeg)
- en: This policy (named `PRIVATE`) applies to all auto-generated queues matching
    the pattern `CSM_QUEUE_*`, with an auto-expiration of 24 hours.
  id: totrans-3863
  prefs: []
  type: TYPE_NORMAL
  zh: 此策略（命名为`PRIVATE`）适用于所有与模式`CSM_QUEUE_*`匹配的自动生成的队列，自动过期时间为24小时。
- en: The results
  id: totrans-3864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: 'Let''s have a look ... before starting the Tomcat Server, ensure that:'
  id: totrans-3865
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看...在启动Tomcat服务器之前，请确保：
- en: MySQL is running with the loaded data
  id: totrans-3866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL正在加载数据运行
- en: The Redis server is running
  id: totrans-3867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis服务器正在运行
- en: RabbitMQ is running
  id: totrans-3868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ正在运行
- en: Apache HTTP has been restarted/reloaded
  id: totrans-3869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP已重新启动/重新加载
- en: When all these signals are green, start the Tomcat servers.
  id: totrans-3870
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当所有这些信号都是绿色时，启动Tomcat服务器。
- en: 'Log in to the application with your Yahoo! account, register a new user, and
    navigate to the screen: **Prices and markets** | **Search by markets**. If you
    target a market that is potentially open at your time, you should be able to notice
    real-time updates on the result list:![The results](img/image00916.jpeg)'
  id: totrans-3871
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Yahoo!帐户登录应用程序，注册新用户，并导航到屏幕：**价格和市场** | **按市场搜索**。如果您选择的市场可能在您的时间开放，您应该能够注意到结果列表上的实时更新：![结果](img/image00916.jpeg)
- en: How it works...
  id: totrans-3872
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Redis server
  id: totrans-3873
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Redis服务器
- en: Redis is an open source in-memory data-structure store. Day-after-day, it is
    becoming increasingly popular as a NoSQL database and as a key-value store.
  id: totrans-3874
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一个开源的内存数据结构存储。日复一日，它越来越受欢迎，作为NoSQL数据库和键值存储。
- en: Its ability to store keys with optional expiration times and with very high
    availability (over its remarkable cluster) makes it a very solid underlying technology
    for session manager implementations. This is precisely the use we make of it through
    Spring Session.
  id: totrans-3875
  prefs: []
  type: TYPE_NORMAL
  zh: 它能够存储具有可选过期时间和非常高的可用性（在其显著的集群中）的键，使其成为会话管理器实现的非常可靠的底层技术。这正是我们通过Spring Session所做的使用。
- en: Spring session
  id: totrans-3876
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring会话
- en: Spring Session is a relatively new Spring project, but it is meant to grow up
    and take a substantial space in the Spring ecosystem, especially with the recent
    Microservices and IoT trends. The project is managed by Rob Winch at Pivotal inc.
    As introduced previously, Spring Session provides an API to manage users' sessions
    from different Spring components.
  id: totrans-3877
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Session是一个相对较新的Spring项目，但它旨在成长并在Spring生态系统中占据重要位置，特别是最近的微服务和物联网趋势。该项目由Pivotal
    inc的Rob Winch管理。正如之前介绍的，Spring Session提供了一个API来管理不同Spring组件的用户会话。
- en: The most interesting and notable feature of Spring Session is its ability to
    integrate with the container (Apache Tomcat) to supply a custom implementation
    of `HttpSession`.
  id: totrans-3878
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Session最有趣和显著的特性是其能够与容器（Apache Tomcat）集成，以提供`HttpSession`的自定义实现。
- en: SessionRepositoryFilter
  id: totrans-3879
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SessionRepositoryFilter
- en: To make use of a custom `HttpSession` implementation, Spring Session completely
    replaces the `HttpServletRequest` with a custom wrapper (`SessionRepositoryRequestWrapper`).
    This operation is performed inside `SessionRepositoryFilter`, which is the servlet
    filter that needs to be configured in the `web.xml` to intercept the request flow
    (before Spring MVC).
  id: totrans-3880
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用自定义的`HttpSession`实现，Spring Session完全替换了`HttpServletRequest`，使用自定义包装器（`SessionRepositoryRequestWrapper`）。这个操作是在`SessionRepositoryFilter`内执行的，它是需要在`web.xml`中配置的servlet过滤器，以拦截请求流（在Spring
    MVC之前）。
- en: To do its job, the `SessionRepositoryFilter` must have an `HttpSession` implementation.
    At some point, we registered the `RedisHttpSessionConfiguration` bean. This bean
    defines a couple of other beans, and among them is a `sessionRepository`, which
    is a `RedisOperationsSessionRepository`.
  id: totrans-3881
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成其工作，`SessionRepositoryFilter`必须有一个`HttpSession`实现。在某个时候，我们注册了`RedisHttpSessionConfiguration`
    bean。这个bean定义了其他几个bean，其中包括一个`sessionRepository`，它是一个`RedisOperationsSessionRepository`。
- en: See how the `SessionRepositoryFilter` is important for bridging across the application
    all the performed session operations to the actual engine implementation that
    will execute those operations.
  id: totrans-3882
  prefs: []
  type: TYPE_NORMAL
  zh: 看到`SessionRepositoryFilter`如何对跨应用程序的所有执行的会话操作进行桥接，以实际执行这些操作的引擎实现。
- en: RedisConnectionFactory
  id: totrans-3883
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: RedisConnectionFactory
- en: A `RedisConnectionFactory` implementation is necessary in order to produce a
    suitable connection to Redis. Selecting a `RedisConnectionFactory` implementation,
    we have been following the Spring team's choice which appeared to be the `JedisConnectionFactory`.
    This `RedisConnectionFactory` relies on Jedis (a lightweight Redis Java client).
    [https://github.com/xetorthio/jedis](https://github.com/xetorthio/jedis).
  id: totrans-3884
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成适合连接到Redis的连接，需要一个`RedisConnectionFactory`实现。在选择`RedisConnectionFactory`实现时，我们一直遵循Spring团队的选择，这似乎是`JedisConnectionFactory`。这个`RedisConnectionFactory`依赖于Jedis（一个轻量级的Redis
    Java客户端）。[https://github.com/xetorthio/jedis](https://github.com/xetorthio/jedis)。
- en: CookieHttpSessionStrategy
  id: totrans-3885
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CookieHttpSessionStrategy
- en: 'We have registered an `HttpSessionStrategy` implementation: `RootPathCookieHttpSessionStrategy`.
    This class is a customized version (in our codebase) of the Spring `CookieHttpSessionStrategy`.'
  id: totrans-3886
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注册了一个`HttpSessionStrategy`实现：`RootPathCookieHttpSessionStrategy`。这个类是我们代码库中Spring
    `CookieHttpSessionStrategy`的定制版本。
- en: Because we wanted to pass the cookie from `cloudstreetmarket-api` to `cloudstreetmarket-websocket`,
    the cookie path (which is a property of a cookie) needed to be set to the root
    path (and not the servlet context path). Spring Session 1.1+ should offer a configurable
    path feature.
  id: totrans-3887
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们想要将cookie从`cloudstreetmarket-api`传递到`cloudstreetmarket-websocket`，所以cookie路径（cookie的属性）需要设置为根路径（而不是servlet上下文路径）。Spring
    Session 1.1+应该提供可配置的路径功能。
- en: '[https://github.com/spring-projects/spring-session/issues/155](https://github.com/spring-projects/spring-session/issues/155)'
  id: totrans-3888
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/spring-projects/spring-session/issues/155](https://github.com/spring-projects/spring-session/issues/155)'
- en: 'For now, our `RootPathCookieHttpSessionStrategy` (basically `CookieHttpSessionStrategy`)
    produces and expects cookies with a **SESSION** name:'
  id: totrans-3889
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的`RootPathCookieHttpSessionStrategy`（基本上是`CookieHttpSessionStrategy`）生成并期望带有**SESSION**名称的cookie：
- en: '![CookieHttpSessionStrategy](img/image00917.jpeg)'
  id: totrans-3890
  prefs: []
  type: TYPE_IMG
  zh: '![CookieHttpSessionStrategy](img/image00917.jpeg)'
- en: Currently, only `cloudstreetmarket-api` produces such cookies (the two other
    web apps have been restricted in their cookie generation capabilities so they
    don't mess up our sessions).
  id: totrans-3891
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只有`cloudstreetmarket-api`生成这样的cookie（其他两个web应用程序在生成cookie时受到限制，以免干扰我们的会话）。
- en: Spring Data Redis and Spring Session Data Redis
  id: totrans-3892
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Spring Data Redis和Spring Session Data Redis
- en: 'Do you remember our good friend Spring Data JPA? Well now, Spring Data Redis
    follows a similar purpose but for the Redis NoSQL key-value store:'
  id: totrans-3893
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得我们的好朋友Spring Data JPA吗？现在，Spring Data Redis遵循类似的目的，但用于Redis NoSQL键值存储：
- en: '|   | *"The Spring Data Redis (framework makes it easy to write Spring applications
    that use the Redis key value store by eliminating the redundant tasks and boiler
    plate code required for interacting with the store through Spring''s excellent
    infrastructure support."* |   |'
  id: totrans-3894
  prefs: []
  type: TYPE_TB
  zh: '|   | *"Spring Data Redis（框架通过消除与Spring的出色基础设施支持交互所需的冗余任务和样板代码，使编写使用Redis键值存储的Spring应用程序变得容易。"*
    |   |'
- en: '|   | --*Spring Data Redis reference* |'
  id: totrans-3895
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Spring Data Redis参考* |'
- en: Spring Session Data Redis is the Spring module that specifically implements
    Spring Data Redis for the purpose of Spring Session management.
  id: totrans-3896
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Session Data Redis是专门为Spring Session管理目的实现Spring Data Redis的Spring模块。
- en: The Redis Session manager for Tomcat
  id: totrans-3897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Tomcat的Redis会话管理器
- en: Apache Tomcat natively provides clustering and session-replication features.
    However, these features rely on load balancers sticky sessions. Sticky sessions
    have pros and cons for scalability. As cons, we can remember that sessions can
    be lost when servers go down. Also the stickiness of sessions can induce a slow
    loading time when we actually need to respond to a surge of traffic.
  id: totrans-3898
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Tomcat本身提供了集群和会话复制功能。然而，这些功能依赖于负载均衡器的粘性会话。粘性会话在可伸缩性方面有利有弊。作为缺点，我们可以记住当服务器宕机时会话可能丢失。此外，会话的粘性可能会在我们实际需要应对交通激增时导致加载时间缓慢。
- en: 'We have also been using an open source project from James Coleman that allows
    a Tomcat servers to store non-sticky sessions in Redis immediately on session
    creation for potential uses by other Tomcat instances. This open source project
    can be reached at the following address:'
  id: totrans-3899
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了James Coleman的一个开源项目，允许Tomcat服务器在会话创建时立即将非粘性会话存储在Redis中，以供其他Tomcat实例使用。这个开源项目可以在以下地址找到：
- en: '[https://github.com/jcoleman/tomcat-redis-session-manager](https://github.com/jcoleman/tomcat-redis-session-manager)'
  id: totrans-3900
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jcoleman/tomcat-redis-session-manager](https://github.com/jcoleman/tomcat-redis-session-manager)'
- en: 'However, this project doesn''t officially support Tomcat 8\. Thus, another
    fork went further in the Tomcat Release process and is closer from the Tomcat
    8 requirements:'
  id: totrans-3901
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个项目并不正式支持Tomcat 8。因此，另一个分支在Tomcat发布过程中更进一步，并且更接近Tomcat 8的要求：
- en: '[https://github.com/rmohr/tomcat-redis-session-manager](https://github.com/rmohr/tomcat-redis-session-manager)'
  id: totrans-3902
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/rmohr/tomcat-redis-session-manager](https://github.com/rmohr/tomcat-redis-session-manager)'
- en: We forked this repository and provided an adaptation for Tomcat 8 in https://github.com/alex-bretet/tomcat-redis-session-manager.
  id: totrans-3903
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分叉了这个存储库，并为Tomcat 8提供了一个适配器，网址是https://github.com/alex-bretet/tomcat-redis-session-manager。
- en: The `tomcat-redis-session-manager-2.0-tomcat-8.jar` copied to `tomcat/lib` comes
    from this repository.
  id: totrans-3904
  prefs: []
  type: TYPE_NORMAL
  zh: '`tomcat-redis-session-manager-2.0-tomcat-8.jar`复制到`tomcat/lib`来自这个存储库。'
- en: Note
  id: totrans-3905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Tomcat 8 is still recent, and time is required for peripheral tools to follow
    releases. We don't provide `tomcat-redis-session-manager-2.0-tomcat-8.jar` for
    production use.
  id: totrans-3906
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat 8仍然很新，外围工具需要时间来跟进发布。我们不提供`tomcat-redis-session-manager-2.0-tomcat-8.jar`供生产使用。
- en: Viewing/flushing sessions in Redis
  id: totrans-3907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Redis中查看/清除会话
- en: 'In the main installation directory for Redis, an executable for a command line
    tool (`Cli`) can be found. This executable can be launched from the command:'
  id: totrans-3908
  prefs: []
  type: TYPE_NORMAL
  zh: 在Redis的主安装目录中，可以找到一个命令行工具（`Cli`）的可执行文件。可以从命令行启动这个可执行文件：
- en: '[PRE435]'
  id: totrans-3909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: 'Or:'
  id: totrans-3910
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE436]'
  id: totrans-3911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: 'This executable gives access to the Redis console. From there, for example,
    the `KEY *` command lists all the active sessions:'
  id: totrans-3912
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可执行文件可以访问Redis控制台。例如，`KEY *`命令列出所有活动会话：
- en: '[PRE437]'
  id: totrans-3913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: 'The `FLUSHALL` command clears all the active sessions:'
  id: totrans-3914
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLUSHALL`命令清除所有活动会话：'
- en: '[PRE438]'
  id: totrans-3915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: Tip
  id: totrans-3916
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Discover the Redis client language with their online tutorial accessible at
    [http://try.redis.io](http://try.redis.io).
  id: totrans-3917
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在线教程了解Redis客户端语言，网址是[http://try.redis.io](http://try.redis.io)。
- en: securityContextPersistenceFilter
  id: totrans-3918
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: securityContextPersistenceFilter
- en: 'We make use of this filter in the `cloudstreetmarket-websocket` Spring Security
    filter chain. Its role consists of injecting an external Spring Security context
    into a `SecurityContextHolder` from the configured `SecurityContextRepository`:'
  id: totrans-3919
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`cloudstreetmarket-websocket` Spring Security过滤器链中使用这个过滤器。它的作用是从配置的`SecurityContextRepository`中将外部Spring
    Security上下文注入到`SecurityContextHolder`中：
- en: '[PRE439]'
  id: totrans-3920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: This filter interacts with `SecurityContextRepository` to persist the context
    once the filter chain has been completed. Combined with Spring Session, this filter
    is very useful when you need to reuse an authentication that has been performed
    in another component (another web app in our case).
  id: totrans-3921
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过滤器与`SecurityContextRepository`交互，以便在过滤器链完成后持久化上下文。结合Spring Session，当您需要重用在另一个组件（在我们的情况下是另一个Web应用程序）中执行的身份验证时，这个过滤器非常有用。
- en: 'After this point, we have also been able to declare a `global-method-security`
    element (of the Spring Security namespace) that allows us to make use of `@PreAuthorize`
    annotations in `@MessageMapping` annotated methods (our message handling methods)::'
  id: totrans-3922
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们还能够声明一个`global-method-security`元素（Spring Security命名空间的一部分），允许我们在`@MessageMapping`注释的方法（我们的消息处理方法）中使用`@PreAuthorize`注释：
- en: '[PRE440]'
  id: totrans-3923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: AbstractSessionWebSocketMessageBrokerConfigurer
  id: totrans-3924
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AbstractSessionWebSocketMessageBrokerConfigurer
- en: 'This is a long title. We have used this abstract class to give our `WebSocketConfig`
    the ability to:'
  id: totrans-3925
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很长的标题。我们使用这个抽象类为我们的`WebSocketConfig`提供以下功能：
- en: Ensure sessions are kept alive on incoming web socket messages
  id: totrans-3926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保会话在传入的WebSocket消息上保持活动状态
- en: Ensure that WebSocket sessions are destroyed when session terminate
  id: totrans-3927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保WebSocket会话在会话终止时被销毁
- en: AbstractSecurityWebSocketMessageBrokerConfigurer
  id: totrans-3928
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AbstractSecurityWebSocketMessageBrokerConfigurer
- en: In a similar fashion, this abstract class provides authorization capabilities
    to our `WebSocketSecurityConfig` bean. Thanks to it, the `WebSocketSecurityConfig`
    bean now controls the destinations that are allowed for incoming messages.
  id: totrans-3929
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，这个抽象类为我们的`WebSocketSecurityConfig` bean提供了授权功能。有了它，`WebSocketSecurityConfig`
    bean现在控制着允许传入消息的目的地。
- en: There's more…
  id: totrans-3930
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Spring Session
  id: totrans-3931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Session
- en: 'Once again, we recommend the Spring reference document on Spring Session, which
    is very well done. Please check it out:'
  id: totrans-3932
  prefs: []
  type: TYPE_NORMAL
  zh: 再次推荐Spring Session的Spring参考文档，非常好。请查看：
- en: '[http://docs.spring.io/spring-session/docs/current/reference/html5](http://docs.spring.io/spring-session/docs/current/reference/html5)'
  id: totrans-3933
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-session/docs/current/reference/html5](http://docs.spring.io/spring-session/docs/current/reference/html5)'
- en: Apache HTTP proxy extra configuration
  id: totrans-3934
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache HTTP代理额外配置
- en: The few lines added to `httpd.conf` serve the purpose of rewriting the WebSocket
    scheme to `ws` during the WebSocket handshake. Not doing this causes SockJS to
    fall back to its **XHR** options (one WebSocket emulation).
  id: totrans-3935
  prefs: []
  type: TYPE_NORMAL
  zh: 在`httpd.conf`中添加的几行用于在WebSocket握手期间将WebSocket方案重写为`ws`。不这样做会导致SockJS退回到其**XHR**选项（WebSocket模拟）。
- en: Spring Data Redis
  id: totrans-3936
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring Data Redis
- en: 'Also, we recommend that you read more about the Spring Data Redis project (in
    its reference document):'
  id: totrans-3937
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们建议您阅读有关Spring Data Redis项目的更多信息（在其参考文档中）：
- en: '[http://docs.spring.io/spring-data/data-redis/docs/current/reference/html](http://docs.spring.io/spring-data/data-redis/docs/current/reference/html)'
  id: totrans-3938
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring-data/data-redis/docs/current/reference/html](http://docs.spring.io/spring-data/data-redis/docs/current/reference/html)'
- en: See also
  id: totrans-3939
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Deep-dive into Spring WebSockets** by Sergi Almar: This is the presentation
    that occurred at SpringOne2GX 2014:'
  id: totrans-3940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深入了解Spring WebSockets** by Sergi Almar: 这是在SpringOne2GX 2014上进行的演示：'
- en: '[http://www.slideshare.net/sergialmar/websockets-with-spring-4](http://www.slideshare.net/sergialmar/websockets-with-spring-4)'
  id: totrans-3941
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.slideshare.net/sergialmar/websockets-with-spring-4](http://www.slideshare.net/sergialmar/websockets-with-spring-4)'
- en: '**Spring-websocket-portfolio, showcase application**: We must also highlight
    the Spring WebSocket showcase application from Rossen Stoyanchev:'
  id: totrans-3942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring-websocket-portfolio，展示应用程序**：我们还必须强调Rossen Stoyanchev的Spring WebSocket展示应用程序：'
- en: '[https://github.com/rstoyanchev/spring-websocket-portfolio](https://github.com/rstoyanchev/spring-websocket-portfolio)'
  id: totrans-3943
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/rstoyanchev/spring-websocket-portfolio](https://github.com/rstoyanchev/spring-websocket-portfolio)'
- en: Chapter 9. Testing and Troubleshooting
  id: totrans-3944
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。测试和故障排除
- en: 'With the following listed recipes, this chapter introduces a set of common
    practices for maintaining, debugging, and improving an application state:'
  id: totrans-3945
  prefs: []
  type: TYPE_NORMAL
  zh: 通过列出的以下配方，本章介绍了一套用于维护、调试和改进应用程序状态的常见实践：
- en: Automating Database Migrations with Flyway
  id: totrans-3946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flyway自动化数据库迁移
- en: Unit testing with Mockito and Maven Surefire
  id: totrans-3947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mockito和Maven Surefire进行单元测试
- en: Integration testing with Cargo, Rest-assured, and Maven Failsafe
  id: totrans-3948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cargo、Rest-assured和Maven Failsafe进行集成测试
- en: Injecting Spring Bean in Integration tests
  id: totrans-3949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集成测试中注入Spring Bean
- en: Modern application Logging with Log4j2
  id: totrans-3950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Log4j2进行现代应用程序日志记录
- en: Introduction
  id: totrans-3951
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As we are now approaching the end of this journey, we must see how to consolidate
    the work. In the real world, tests must be written before a feature is developed
    (or at least at the same time). Writing automated tests in software development
    conveys a massive confidence about the application state. It is the best way of
    ensuring that nothing has been forgotten. Having a system that has the ability
    to test itself, with the help of modern continuous integration tools, ensures
    that features will not be damaged at any time.
  id: totrans-3952
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们现在接近这段旅程的结束，我们必须看到如何巩固工作。在现实世界中，测试必须在开发功能之前编写（或至少同时进行）。在软件开发中编写自动化测试传达了对应用程序状态的巨大信心。这是确保没有遗漏的最佳方式。拥有一个能够通过现代持续集成工具自行测试的系统，确保功能不会在任何时候受到损害。
- en: Manual testing through UI cannot be trusted to cover every single edge case
    that a developer has to think about. It is the responsibility of the developer
    to secure all the breaches and to cover all the possible paths, and this is a
    big responsibility.
  id: totrans-3953
  prefs: []
  type: TYPE_NORMAL
  zh: 通过UI进行手动测试不能被信任来覆盖开发人员必须考虑的每一个边缘情况。开发人员有责任确保所有漏洞并覆盖所有可能的路径，这是一个很大的责任。
- en: Our developer job is an amazing job. The perpetual technology enhancement sets
    an incomparable pace for every one of us—to stay in the race, to respond to the
    market, and sometimes to lead the market.
  id: totrans-3954
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的开发人员工作是一项了不起的工作。永恒的技术提升为我们每个人设定了无与伦比的步伐-保持竞争，应对市场，有时引领市场。
- en: Our job is made of long hours of intense focus, search for information, design,
    redesign, and so on. Writing tests brings a healthy stability in the cycle. It
    allows us to finish our day happier with the features we develop, even weeks and
    months later.
  id: totrans-3955
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作是长时间的高度专注、搜索信息、设计、重新设计等。编写测试为周期带来了健康的稳定性。它使我们能够在开发的功能上完成一天，甚至在几周和几个月后也是如此。
- en: Automating Database Migrations with FlyWay
  id: totrans-3956
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FlyWay自动化数据库迁移
- en: In the delivery life cycle, maintaining databases across versions and multiple
    environments can be a real headache. Flyway is an assertive protection against
    the entropy that schema changes can induce. Managing and automating migrations,
    Flyway stands as a tremendously valuable asset for software makers.
  id: totrans-3957
  prefs: []
  type: TYPE_NORMAL
  zh: 在交付生命周期中，跨版本和多个环境维护数据库可能会成为一个真正的头疼事。Flyway是对模式更改可能引起的熵的肯定保护。管理和自动化迁移，Flyway是软件制造商的一项非常有价值的资产。
- en: Getting ready
  id: totrans-3958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In this recipe, we review the Flyway configuration. We especially review its
    integration in to Maven. This will get every build to upgrade (if necessary) the
    corresponding database so that it matches the expectation level.
  id: totrans-3959
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们审查了Flyway配置。我们特别审查了它与Maven的集成。这将使每个构建都升级（如果有必要）相应的数据库，以使其达到期望水平。
- en: How to do it…
  id: totrans-3960
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v9.x.x.`
  id: totrans-3961
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的**Git Perspective**中，检出分支`v9.x.x`的最新版本。
- en: In the`/app` directory of your workspace, the `cloudstreetmarket.properties`
    file has been updated. Also, one extra `db/migration` directory shows up with
    a `Migration-1_0__init.sql` file inside, as well as a new `/logs` directory.
  id: totrans-3962
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作区的`/app`目录中，`cloudstreetmarket.properties`文件已更新。此外，还出现了一个额外的`db/migration`目录，其中包含一个`Migration-1_0__init.sql`文件，以及一个新的`/logs`目录。
- en: 'Please do reflect all these changes to the app directory located in your OS
    user `home` `directory`: `<home-directory>/app`.'
  id: totrans-3963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请确保将所有这些更改反映到位于您的操作系统用户`home` `directory`中的app目录中：`<home-directory>/app`。
- en: Also ensure that your **MySQL Server** is running.
  id: totrans-3964
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保您的**MySQL服务器**正在运行。
- en: Run the **Maven clean** and **Maven install** commands on the `zipcloud-parent`
    project (right-click on the project **Run as…** | **Maven Clean** and then **Run
    as…** | **Maven Install**).
  id: totrans-3965
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`zipcloud-parent`项目上运行**Maven clean**和**Maven install**命令（右键单击项目**Run as…**
    | **Maven Clean**，然后**Run as…** | **Maven Install**）。
- en: Now, run the **Maven clean** and **Maven install** commands on the `cloudstreetmarket-parent`
    project.
  id: totrans-3966
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`cloudstreetmarket-parent`项目上运行**Maven clean**和**Maven install**命令。
- en: At the top of the stack trace (at the package Maven phase), you should see the
    following logs:![How to do it…](img/image00918.jpeg)
  id: totrans-3967
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在堆栈跟踪的顶部（在Maven阶段的包），您应该看到以下日志：![如何做…](img/image00918.jpeg)
- en: At this stage, the database should have been reset to match a standard state
    of structure and data.
  id: totrans-3968
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，数据库应该已经被重置，以匹配结构和数据的标准状态。
- en: If you rerun the build again, you should now see the following logs:![How to
    do it…](img/image00919.jpeg)
  id: totrans-3969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您重新运行构建，现在应该看到以下日志：![如何做…](img/image00919.jpeg)
- en: 'In the parent `pom.xml` (in `cloudstreetmarket-parent`), you can notice a new
    plugin definition:'
  id: totrans-3970
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在父`pom.xml`（在`cloudstreetmarket-parent`中），您可以注意到一个新的插件定义：
- en: '[PRE441]'
  id: totrans-3971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'A few variables (for example**,** `${database.driver})` used in this definition
    correspond to default properties, set at the top level of this `pom.xml`:'
  id: totrans-3972
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些变量（例如`${database.driver}`）在此定义中使用的默认属性对应于`pom.xml`的顶层设置：
- en: '[PRE442]'
  id: totrans-3973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: The `database.serverId` must match a new `Server` entry in the Maven `settings.xml`
    file (described in the next point).
  id: totrans-3974
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`database.serverId`必须与Maven `settings.xml`文件中的新`Server`条目匹配（在下一点中描述）。'
- en: 'Edit the Maven `settings.xml` file (that you must have created in [Chapter
    1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise Spring
    Application"), *Setup Routine for an Enterprise Spring Application*) located at
    `<home-directory>/.m2/settings.xml`. Add somewhere in the root node the following
    block:'
  id: totrans-3975
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑Maven `settings.xml`文件（您必须在[第1章](part0079.xhtml#aid-2BASE1 "第1章。企业Spring应用程序的设置例程")中创建的*企业Spring应用程序的设置例程*中找到位于`<home-directory>/.m2/settings.xml`）。在根节点的某个位置添加以下块：
- en: '[PRE443]'
  id: totrans-3976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'In the parent `pom.xml` (in `cloudstreetmarket-parent`), a new `Profile` has
    been added to optionally override the default properties (of this `pom.xml`):'
  id: totrans-3977
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在父`pom.xml`（在`cloudstreetmarket-parent`中），已添加了一个新的`Profile`，用于可选地覆盖此`pom.xml`的默认属性：
- en: '[PRE444]'
  id: totrans-3978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: Tip
  id: totrans-3979
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Running `Maven Clean Install` with the `csm_integration` profile (`mvn clean
    install –Pcsm_integration`) would upgrade in this case, if necessary, a `csm_integration`
    database.
  id: totrans-3980
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`csm_integration`配置文件运行`Maven Clean Install`（`mvn clean install –Pcsm_integration`）在这种情况下会升级`csm_integration`数据库（如果有必要）。
- en: How it works...
  id: totrans-3981
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Flyway is a database versioning and migration tool licensed Apache v2 (free
    software). It is a registered trademark of the company Boxfuse GmbH.
  id: totrans-3982
  prefs: []
  type: TYPE_NORMAL
  zh: Flyway是一个数据库版本控制和迁移工具，采用Apache v2许可证（免费软件）。它是Boxfuse GmbH公司的注册商标。
- en: Flyway is not the only product in this category but is widely present in the
    industry for its simplicity and easy configuration. The migration scripts can
    be written in plain old SQL and many providers are supported. From classical RDBMS
    (Oracle, MySQL, SQL Server, and so on) to in-memory DB (HSQLDB, solidDB, and so
    on), and even cloud-based solutions (AWS Redshift, SQL Azure, and so on).
  id: totrans-3983
  prefs: []
  type: TYPE_NORMAL
  zh: Flyway不是这个类别中唯一的产品，但在行业中以其简单性和易配置性而广泛存在。迁移脚本可以用普通的SQL编写，并支持许多提供程序。从传统的RDBMS（Oracle、MySQL、SQL
    Server等）到内存数据库（HSQLDB、solidDB等），甚至云解决方案（AWS Redshift、SQL Azure等）都得到支持。
- en: A limited number of commands
  id: totrans-3984
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有限数量的命令
- en: Flyway provides the six following commands for reporting and operation purposes.
  id: totrans-3985
  prefs: []
  type: TYPE_NORMAL
  zh: Flyway提供了以下六个命令，用于报告和操作目的。
- en: Migrate
  id: totrans-3986
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 迁移
- en: The `Migrate` command is the goal we have integrated to the Maven package phase.
    It looks up the classpath or the filesystem for potential migrations to be executed.
    Several `locations` (script repositories) can be configured. In the Flyway Maven
    plugin, these `locations` are defined in the root `configuration` node. Patterns
    are set up to retain specific filenames.
  id: totrans-3987
  prefs: []
  type: TYPE_NORMAL
  zh: '`Migrate`命令是我们集成到Maven打包阶段的目标。它查找类路径或文件系统以执行潜在的迁移。可以配置多个`locations`（脚本存储库）。在Flyway
    Maven插件中，这些`locations`在根`configuration`节点中定义。设置模式以保留特定的文件名。'
- en: Clean
  id: totrans-3988
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 清理
- en: The `Clean` command restores pristine a database schema. All the objects (tables,
    views, functions, and so on) are dropped with this command.
  id: totrans-3989
  prefs: []
  type: TYPE_NORMAL
  zh: '`Clean`命令还原了数据库模式的原始状态。使用此命令删除所有对象（表、视图、函数等）。'
- en: Info
  id: totrans-3990
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 信息
- en: The `Info` command provides feedback about the current state and the migration
    history of a given schema. If you have a look into your local MySQL server, in
    the `csm` schema, you will notice that a metadata table has been created with
    the name `schema_version`. Flyway uses the following table to compare the script
    repository state with the database state and to fill the gaps.
  id: totrans-3991
  prefs: []
  type: TYPE_NORMAL
  zh: '`Info`命令提供有关给定模式的当前状态和迁移历史的反馈。如果您查看本地MySQL服务器，在`csm`模式中，您会注意到已创建一个名为`schema_version`的元数据表。Flyway使用以下表来比较脚本存储库状态与数据库状态，并填补差距。'
- en: '| version | description | script | installed on | success |'
  id: totrans-3992
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 描述 | 脚本 | 安装于 | 成功 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-3993
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `0` | `<< Flyway Schema Creation >>` | `''csm''` | `12/11/2015 18:11` | `1`
    |'
  id: totrans-3994
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `<< Flyway模式创建 >>` | `''csm''` | `2015年11月12日18:11` | `1` |'
- en: '| `1` | `drop and create` | `/Migration-1_0__drop_and_create.sql` | `12/11/2015
    18:11` | `1` |'
  id: totrans-3995
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `删除并创建` | `/Migration-1_0__drop_and_create.sql` | `2015年11月12日18:11`
    | `1` |'
- en: The `Info` command basically prints out this table as a report.
  id: totrans-3996
  prefs: []
  type: TYPE_NORMAL
  zh: '`Info`命令基本上将此表打印为报告。'
- en: Validate
  id: totrans-3997
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证
- en: The `Validate` command can be useful to ensure that the migrations executed
    on a database actually correspond to the scripts currently present in the repositories.
  id: totrans-3998
  prefs: []
  type: TYPE_NORMAL
  zh: '`Validate`命令可用于确保在数据库上执行的迁移实际上与当前存储库中的脚本相对应。'
- en: Baseline
  id: totrans-3999
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Baseline
- en: The `Baseline` command can be used when we have an existing database that hasn't
    been managed yet by Flyway. A Baseline version is created to tag the state of
    this database and to make it ready to live with upcoming versions. Versions prior
    to this Baseline will simply be ignored.
  id: totrans-4000
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个尚未由Flyway管理的现有数据库时，可以使用`Baseline`命令。创建一个Baseline版本来标记数据库的状态，并使其准备好与即将到来的版本一起使用。在此Baseline之前的版本将被简单地忽略。
- en: Repair
  id: totrans-4001
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修复
- en: The `Repair` command can clean up a corrupted state of the metadata table. To
    do that, Flyway removes the failed migration entries and resets the stored checksums
    to match the scripts checksums.
  id: totrans-4002
  prefs: []
  type: TYPE_NORMAL
  zh: '`Repair`命令可以清理元数据表的损坏状态。为此，Flyway删除了失败的迁移条目，并重置了存储的校验和以匹配脚本的校验和。'
- en: About Flyway Maven plugin
  id: totrans-4003
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于Flyway Maven插件
- en: 'The Flyway Maven plugin provides the interface for Maven to control the Flyway
    program. Our configuration of the plugin has been the following:'
  id: totrans-4004
  prefs: []
  type: TYPE_NORMAL
  zh: Flyway Maven插件提供了Maven控制Flyway程序的接口。我们对插件的配置如下：
- en: '[PRE445]'
  id: totrans-4005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: As usual with Maven plugins, the executions section allows the binding of Maven
    phases to one or more Goals of the plugin. For Flyway Maven plugin, the goals
    are the Flyway commands presented previously. We tell Maven when to consider the
    plugin and what to invoke in this plugin.
  id: totrans-4006
  prefs: []
  type: TYPE_NORMAL
  zh: 与Maven插件一样，执行部分允许将Maven阶段绑定到插件的一个或多个目标。对于Flyway Maven插件，目标是先前介绍的Flyway命令。我们告诉Maven何时考虑插件以及在该插件中调用什么。
- en: 'Our `configuration` section presents a few parameters checked during migrations.
    For example, the `locations` specifies migration repositories to be scanned recursively
    (they can start with `classpath`: or `filesystem:`). The `schemas` defines the
    list of schemas managed by Flyway for the whole set of migrations. The first schema
    will be the default one across migrations.'
  id: totrans-4007
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`configuration`部分介绍了在迁移期间检查的一些参数。例如，`locations`指定要递归扫描的迁移存储库（它们可以以`classpath`:或`filesystem:`开头）。`schemas`定义了Flyway管理的整套迁移的模式列表。第一个模式将成为迁移中的默认模式。
- en: An interesting feature is the ability to use variables in migration scripts
    so that these scripts can be used as template for multiple environments. Variable
    names are defined with `placeholders`, and the way variables are identified in
    scripts is configurable with `placeholderPrefix` and `placeholderSuffix`.
  id: totrans-4008
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的功能是能够在迁移脚本中使用变量，以便这些脚本可以用作多个环境的模板。变量名称使用`placeholders`定义，并且脚本中标识变量的方式可以通过`placeholderPrefix`和`placeholderSuffix`进行配置。
- en: 'The whole list of configuration parameters can be found at:'
  id: totrans-4009
  prefs: []
  type: TYPE_NORMAL
  zh: 整个配置参数列表可以在以下位置找到：
- en: '[http://flywaydb.org/documentation/maven/migrate.html](http://flywaydb.org/documentation/maven/migrate.html).'
  id: totrans-4010
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://flywaydb.org/documentation/maven/migrate.html](http://flywaydb.org/documentation/maven/migrate.html)。'
- en: There is more…
  id: totrans-4011
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The official documentation
  id: totrans-4012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 官方文档
- en: Flyway is well-documented and actively supported by its community. Read more
    about the product online at [http://flywaydb.org](http://flywaydb.org).
  id: totrans-4013
  prefs: []
  type: TYPE_NORMAL
  zh: Flyway有很好的文档，并得到其社区的积极支持。在[http://flywaydb.org](http://flywaydb.org)上在线阅读有关该产品的更多信息。
- en: You can also follow or contribute to the project through the GitHub repository
    at [https://github.com/flyway/flyway](https://github.com/flyway/flyway).
  id: totrans-4014
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过GitHub存储库[https://github.com/flyway/flyway](https://github.com/flyway/flyway)来关注或贡献该项目。
- en: See also
  id: totrans-4015
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Liquibase**: The main Flyway competitor is probably Liquibase. Liquibase
    doesn''t use plain SQL for its scripts; it has instead its own multirepresentation
    DSL. For more information, visit:'
  id: totrans-4016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Liquibase**：Flyway的主要竞争对手可能是Liquibase。Liquibase不使用纯SQL来编写脚本；它有自己的多重表示DSL。有关更多信息，请访问：'
- en: '[http://www.liquibase.org](http://www.liquibase.org).'
  id: totrans-4017
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.liquibase.org](http://www.liquibase.org)。'
- en: Unit testing with Mockito and Maven Surefire
  id: totrans-4018
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mockito和Maven Surefire进行单元测试
- en: Unit Tests are useful to keep an eye on the components' implementation. The
    legacy philosophy of Spring promotes reusable components application-wide. The
    core implementations of these components may either alter states (states of transitory
    objects) or trigger interactions with other components.
  id: totrans-4019
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试对于监视组件的实现非常有用。Spring的传统理念促进了应用程序范围内可重用的组件。这些组件的核心实现可能会改变状态（瞬时对象的状态）或触发与其他组件的交互。
- en: Using Mocks in Unit Tests specifically assesses the **behavior** of component's
    methods in regard to other components. When the developer gets used to Mocks,
    it is amazing to see how much the design becomes influenced toward the use of
    different layers and logic externalization. Similarly, object names and method
    names are given more importance. Because they summarize something that is happening
    elsewhere, Mocks save the energy of the next developer that will have to operate
    in the area of code.
  id: totrans-4020
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试中使用模拟特别评估了组件方法的行为，以及与其他组件的关系。当开发人员习惯于使用模拟时，令人惊讶的是设计在多大程度上受到了不同层和逻辑外部化的影响。同样，对象名称和方法名称变得更加重要。因为它们总结了在其他地方发生的事情，模拟节省了下一个开发人员在代码区域操作时的精力。
- en: Developing Unit Tests is by definition an Enterprise policy. As the percentage
    of code covered by tests can easily reflect the maturity of a product, this code-coverage
    rate is also becoming a standard reference to assess companies in regard to their
    products. It must also be noted that companies practicing code reviews as a development
    process find valuable insights from Pull Requests. When Pull Requests highlight
    behavioral changes through tests, the impact of potential changes becomes clear
    faster.
  id: totrans-4021
  prefs: []
  type: TYPE_NORMAL
  zh: 开发单元测试在本质上是企业政策。由于测试覆盖的代码百分比可以很容易地反映产品的成熟度，这种代码覆盖率也正在成为评估公司及其产品的标准参考。还必须指出，作为开发流程进行代码审查的公司从拉取请求中获得了有价值的见解。当拉取请求通过测试突出显示行为变化时，潜在变化的影响变得更加清晰。
- en: How to do it…
  id: totrans-4022
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Rerun a `Maven Install` on the `cloudstreetmarket-parent` project as in the
    previous recipe. When the build process comes to build the core module, you should
    see the following logs that suggest the execution of unit tests during the **test**
    phase (between **compile** and **package**):![How to do it…](img/image00920.jpeg)
  id: totrans-4023
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cloudstreetmarket-parent`项目上重新运行`Maven Install`，就像在上一个示例中一样。当构建过程开始构建核心模块时，您应该看到以下日志，表明在**test**阶段（在**compile**和**package**之间）执行了单元测试：![如何做…](img/image00920.jpeg)
- en: Those tests can be found in the `cloudstreetmarket-core` module, specifically
    in the `src/test/java` source folder:![How to do it…](img/image00921.jpeg)
  id: totrans-4024
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些测试可以在`cloudstreetmarket-core`模块中找到，特别是在`src/test/java`源文件夹中：![如何做…](img/image00921.jpeg)
- en: 'Both unit tests and integration tests use JUnit:'
  id: totrans-4025
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试和集成测试都使用JUnit：
- en: '[PRE446]'
  id: totrans-4026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: JUnit is natively supported by Eclipse IDE, and this last one offers handles
    to **Run** and **Debug** tests from a class or a method outside Maven:![How to
    do it…](img/image00922.jpeg)
  id: totrans-4027
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JUnit在Eclipse IDE中得到了原生支持，该IDE提供了从类或方法外部运行和调试测试的处理程序：![如何做…](img/image00922.jpeg)
- en: 'A very simple JUnit test class is `IdentifiableToIdConverterTest` (see the
    following code). This class asserts that all the registered Entities can be converted
    by `IdentifiableToIdConverter` for being `Identifiable` implementations (remember
    HATEOAS:):'
  id: totrans-4028
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个非常简单的JUnit测试类是`IdentifiableToIdConverterTest`（见下面的代码）。该类断言所有注册的实体都可以通过`IdentifiableToIdConverter`进行转换，以成为`Identifiable`实现（记住HATEOAS）：
- en: '[PRE447]'
  id: totrans-4029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: 'More advanced unit tests use the Mockito library. For instance, in the following
    `YahooQuoteToCurrencyExchangeConverterTest`:'
  id: totrans-4030
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更高级的单元测试使用Mockito库。例如，在以下`YahooQuoteToCurrencyExchangeConverterTest`中：
- en: '[PRE448]'
  id: totrans-4031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: Here, the highlighted `transferCriticalData()`test gets an instance of `YahooQuoteToCurrencyExchangeConverter`
    that is not initialized with a real `@Autowired CurrencyExchangeRepository` but
    instead with a **Mock**. The converter gets its `convert()` method invoked with
    a `YahooQuote` instance.
  id: totrans-4032
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，突出显示的`transferCriticalData()`测试获取了一个未使用真实的`@Autowired CurrencyExchangeRepository`而是使用**Mock**的`YahooQuoteToCurrencyExchangeConverter`实例。转换器使用`convert()`方法调用`YahooQuote`实例。
- en: Note
  id: totrans-4033
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Mock is told to return a specific `CurrencyExchange` instance when its `findOne`(`String
    s`) method is called inside `convert()`. Then, the returned `currencyExchange`
    object is assessed field by field to ensure they are matching their individual
    expectations.
  id: totrans-4034
  prefs: []
  type: TYPE_NORMAL
  zh: Mock被告知在其`convert()`方法内调用其`findOne`(`String s`)方法时返回特定的`CurrencyExchange`实例。然后，返回的`currencyExchange`对象逐个字段进行评估，以确保它们与各自的期望匹配。
- en: 'The following Maven dependency to Mockito has been added across the different
    modules:'
  id: totrans-4035
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已在不同的模块中添加了对Mockito的Maven依赖项：
- en: '[PRE449]'
  id: totrans-4036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: 'A more extended use of Mockito for unit tests can be found in `CommunityServiceImplTest.`
    For example, in the following example, the `registerUser_generatePasswordAndEncodeIt`
    test makes use of the `ArgumentCaptor`:'
  id: totrans-4037
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CommunityServiceImplTest`中可以找到对Mockito的更广泛使用。例如，在以下示例中，`registerUser_generatePasswordAndEncodeIt`测试使用了`ArgumentCaptor`：
- en: '[PRE450]'
  id: totrans-4038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: How it works...
  id: totrans-4039
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '@Test annotation'
  id: totrans-4040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@Test注释'
- en: The `@Test` annotation must be placed on public void methods so that JUnit considers
    them as test cases. An exception thrown within one of these methods will be considered
    as a test failure. Consequently, an execution without any exception thrown represents
    a success.
  id: totrans-4041
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Test`注释必须放置在public void方法上，以便JUnit将其视为测试用例。在这些方法中引发的异常将被视为测试失败。因此，没有引发任何异常的执行代表成功。'
- en: The `@Test` annotation can be customized, passing the following two optional
    arguments.
  id: totrans-4042
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Test`注释可以通过传递以下两个可选参数进行自定义。'
- en: The expected and timeout arguments
  id: totrans-4043
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预期和超时参数
- en: An **expected** parameter on an `@Test` annotation specifies that the test is
    expected to throw a specific type of exception to be successful. When a different
    Type of exception is thrown or when no exception is thrown at all, JUnit must
    consider the execution as a failure. When a test case is provided a **timeout**
    parameter in its `@Test` annotation, this test will fail when the execution lasts
    more than the indicated time.
  id: totrans-4044
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Test`注释上的**expected**参数指定测试预期引发特定类型的异常才能成功。当引发不同类型的异常或根本没有引发异常时，JUnit必须将执行视为失败。当测试用例在其`@Test`注释中提供了**timeout**参数时，当执行时间超过指定时间时，此测试将失败。'
- en: The @RunWith annotation
  id: totrans-4045
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@RunWith注释'
- en: 'As introduced in the recipe, the `@RunWith` annotation permits the use of external
    test runners (instead of the default `BlockJUnit4ClassRunner` coming with JUnit).
    By the way, a declarative technique for specifying the default JUnit runner could
    be to get `@RunWith` targeting `JUnit4.class` like so: `@RunWith(JUnit4.class)`.'
  id: totrans-4046
  prefs: []
  type: TYPE_NORMAL
  zh: 如配方中介绍的，`@RunWith`注释允许使用外部测试运行器（而不是默认的`BlockJUnit4ClassRunner`）。顺便说一句，指定默认JUnit运行器的声明性技术可能是将`@RunWith`定位到`JUnit4.class`，如下所示：`@RunWith(JUnit4.class)`。
- en: '|   | *A runner runs tests and notifies a `RunNotifier` of significant events
    as it does so* |   |'
  id: totrans-4047
  prefs: []
  type: TYPE_TB
  zh: '| | *运行器运行测试并在执行过程中通知`RunNotifier`发生重要事件* | |'
- en: '|   | --*JUnit.org Javadoc* |'
  id: totrans-4048
  prefs: []
  type: TYPE_TB
  zh: '| | --*JUnit.org Javadoc* |'
- en: A custom `Runner` must implement abstract methods from `org.junit.runner.Runner`
    such as `run(RunNotifier notifier)` and `getDescription()`. It must also follow
    up on core JUnit functions, driving for example, the test execution flow. JUnit
    has a set of annotations such as `@BeforeClass`, `@Before`, `@After`, and `@AfterClass`
    natively handled by `org.junit.runner.ParentRunner`. We are going to visit these
    annotations next.
  id: totrans-4049
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的`Runner`必须实现`org.junit.runner.Runner`中的抽象方法，例如`run(RunNotifier notifier)`和`getDescription()`。它还必须跟进核心JUnit函数，例如驱动测试执行流程。JUnit具有一组注释，例如`@BeforeClass`，`@Before`，`@After`和`@AfterClass`，这些注释由`org.junit.runner.ParentRunner`本地处理。我们将在下面讨论这些注释。
- en: '@Before and @After annotations'
  id: totrans-4050
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@Before和@After注释'
- en: In test classes that contains several test cases, it is a good practice to try
    making the test logic as clear as possible. From this perspective, variable initialization
    and context reinitialization are operations that people often attempt to externalize
    for reusability. `@Before` annotations can be defined on `public void` methods
    to get them executed by the Runner before **every single test**. Similarly, `@After`
    annotations mark the `public void` method again to be executed after **each test**
    (usually for cleanup resources or destroying a context).
  id: totrans-4051
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含多个测试用例的测试类中，尝试使测试逻辑尽可能清晰是一个很好的做法。从这个角度来看，变量初始化和上下文重新初始化是人们经常尝试外部化以实现可重用性的操作。`@Before`注释可以定义在`public
    void`方法上，以便Runner在**每个单独的测试**之前执行它们。同样，`@After`注释标记了`public void`方法，以便在**每个测试**之后执行（通常用于清理资源或销毁上下文）。
- en: For information, on inheritance, `@Before` methods of parent classes will be
    run before those of the current class. Similarly, `@After` methods declared in
    superclasses will be run after those of the current class.
  id: totrans-4052
  prefs: []
  type: TYPE_NORMAL
  zh: 关于继承，父类的`@Before`方法将在当前类的`@Before`方法之前运行。同样，超类中声明的`@After`方法将在当前类的`@After`方法之后运行。
- en: Another interesting point from the Javadoc specifies that **all** `@After` methods
    are guaranteed to run, **even if** a `@Before` or a `@Test` annotated method throws
    an exception.
  id: totrans-4053
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc中的另一个有趣的点指定了**所有**`@After`方法都保证会运行，**即使**`@Before`或`@Test`注释的方法引发异常。
- en: '@BeforeClass and @AfterClass annotations'
  id: totrans-4054
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@BeforeClass 和 @AfterClass 注解'
- en: The `@BeforeClass` and `@AfterClass` annotations can be applied to **public
    static void** methods. `@BeforeClass` causes a method to be run **once** in the
    test life cycle. The method will be run before any other `@Test` or `@Before`
    annotated methods.
  id: totrans-4055
  prefs: []
  type: TYPE_NORMAL
  zh: '`@BeforeClass` 和 `@AfterClass` 注解可以应用于**public static void** 方法。`@BeforeClass`
    使方法在测试生命周期中运行**一次**。该方法将在任何其他 `@Test` 或 `@Before` 标注的方法之前运行。'
- en: A method annotated `@AfterClass` is guaranteed to be run **once** after all
    tests and also after all `@BeforeClass`, `@Before,` or `@After` annotated methods
    even if one of them throws an exception.
  id: totrans-4056
  prefs: []
  type: TYPE_NORMAL
  zh: 一个被标注为 `@AfterClass` 的方法保证在所有测试之后运行**一次**，并且在所有 `@BeforeClass`，`@Before` 或 `@After`
    标注的方法之后运行，即使其中一个抛出异常。
- en: '`@BeforeClass` and `@AfterClass` are valuable tools for handling performance-consuming
    operations related to the preparation of test context (database connection management
    and pre/post business treatments).'
  id: totrans-4057
  prefs: []
  type: TYPE_NORMAL
  zh: '`@BeforeClass` 和 `@AfterClass` 对于处理与测试上下文准备相关的消耗性能的操作（数据库连接管理和前/后业务处理）是有价值的工具。'
- en: For information, on inheritance, `@BeforeClass` annotated methods in superclasses
    will be executed **before** the ones of the current class, and `@AfterClass` annotated
    methods in the superclasses will be executed **after** those of the current class.
  id: totrans-4058
  prefs: []
  type: TYPE_NORMAL
  zh: 关于继承，超类中标注为 `@BeforeClass` 的方法将在当前类的方法**之前**执行，而超类中标注为 `@AfterClass` 的方法将在当前类的方法**之后**执行。
- en: Using Mockito
  id: totrans-4059
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Mockito
- en: Mockito is an Open Source testing framework that supports Test-Driven Developments
    and Behavior-Driven developments. It permits the creation of double objects (Mock
    objects) and helps in isolating the system under test.
  id: totrans-4060
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito 是一个支持测试驱动开发和行为驱动开发的开源测试框架。它允许创建双对象（模拟对象）并有助于隔离被测试系统。
- en: MockitoJUnitRunner
  id: totrans-4061
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MockitoJUnitRunner
- en: We have been talking about custom runners. The `MockitoJUnitRunner` is a bit
    particular in the way that it implements a decoration pattern around the default
    `JUnitRunner`.
  id: totrans-4062
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在谈论自定义运行器。`MockitoJUnitRunner` 在实现上实际上是在默认的 `JUnitRunner` 周围实现了一个装饰模式。
- en: Such design makes optional the use of this runner (all the provided services
    could also be implemented declaratively with Mockito).
  id: totrans-4063
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计使得使用这个运行器是可选的（所有提供的服务也可以用 Mockito 声明式地实现）。
- en: The `MockitoJUnitRunner` automatically initializes `@Mock` annotated dependencies
    (this saves us a call to `MockitoAnnotations.initMocks(this)`, in a `@Before`
    annotated method for example).
  id: totrans-4064
  prefs: []
  type: TYPE_NORMAL
  zh: '`MockitoJUnitRunner` 自动初始化 `@Mock` 注解的依赖项（这样我们就不需要在 `@Before` 标注的方法中调用 `MockitoAnnotations.initMocks(this)`）。'
- en: '`initMocks(java.lang.Object testClass)`'
  id: totrans-4065
  prefs: []
  type: TYPE_NORMAL
  zh: '`initMocks(java.lang.Object testClass)`'
- en: '|   | *Initializes objects annotated with Mockito annotations for given testClass:
    `@Mock`* |   |'
  id: totrans-4066
  prefs: []
  type: TYPE_TB
  zh: '|   | *为给定的 testClass 初始化使用 Mockito 注解标注的对象：`@Mock`* |   |'
- en: '|   | --*Javadoc* |'
  id: totrans-4067
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Javadoc* |'
- en: The `MockitoJUnitRunner` also validates the way we implement the framework,
    after each test method, by invoking `Mockito.validateMockitoUsage()`.This validation
    assertively gets us to make an optimal use of the library with the help of explicit
    error outputs.
  id: totrans-4068
  prefs: []
  type: TYPE_NORMAL
  zh: '`MockitoJUnitRunner` 也通过在每个测试方法之后调用 `Mockito.validateMockitoUsage()` 来验证我们实现框架的方式。这种验证通过明确的错误输出使我们更有效地使用库。'
- en: The transferCriticalData example
  id: totrans-4069
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: transferCriticalData 示例
- en: The system under test is the `YahooQuoteToCurrencyExchangeConverter`. The `@InjectMocks`
    annotation tells Mockito to perform injection of dependencies (constructor injection,
    property setter, or field injection) on the targeted converter using initialized
    Mocks before each test.
  id: totrans-4070
  prefs: []
  type: TYPE_NORMAL
  zh: 被测试系统是 `YahooQuoteToCurrencyExchangeConverter`。`@InjectMocks` 注解告诉 Mockito 在每个测试之前使用初始化的
    Mock 对象对目标转换器执行依赖注入（构造函数注入、属性设置器或字段注入）。
- en: The `Mockito.when(T methodCall)` method, coupled with `thenReturn(T value)`
    allows the definition of a fake `CurrencyExchange` returned object when a call
    to `currencyExchangeRepository.findOne` will actually be made inside the `converter.convert(...)`
    tested method.
  id: totrans-4071
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mockito.when(T methodCall)` 方法，结合 `thenReturn(T value)`，允许在 `converter.convert(...)`
    测试方法内部实际调用 `currencyExchangeRepository.findOne` 时定义一个假的 `CurrencyExchange` 返回对象。'
- en: The `Mockito verify` method with `verify(currencyExchangeRepository, times(1)).findOne(any(String.class))`
    tells Mockito to validate how the tested `convert` method has interacted with
    the Mock(s). In the following example, we want the `convert` method to have called
    the repository only once.
  id: totrans-4072
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mockito verify` 方法与 `verify(currencyExchangeRepository, times(1)).findOne(any(String.class))`
    告诉 Mockito 验证被测试的 `convert` 方法如何与 Mock(s) 交互。在下面的例子中，我们希望 `convert` 方法只调用了存储库一次。'
- en: The registerUser example
  id: totrans-4073
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: registerUser 示例
- en: More specifically in the `registerUser_generatesPasswordAndEncodesIt` test,
    we make use of a `MockitoArgumentCaptor` to manually perform deeper analyses on
    the object that a mocked method has been called with.
  id: totrans-4074
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地，在 `registerUser_generatesPasswordAndEncodesIt` 测试中，我们使用 `MockitoArgumentCaptor`
    手动对被调用的模拟方法的对象进行更深入的分析。
- en: A `MockitoArgumentCaptor` is useful when we don't have an intermediate layer
    and when results are reused to invoke other methods.
  id: totrans-4075
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们没有中间层并且结果被重用来调用其他方法时，`MockitoArgumentCaptor` 是很有用的。
- en: More introspection tools than the superficial (but still very useful) Type checking
    can be required (for example, `any(String.class)`). An `ArgumentCaptor` as a solution
    is used with extra local variables in test methods.
  id: totrans-4076
  prefs: []
  type: TYPE_NORMAL
  zh: 比表面的（但仍然非常有用的）类型检查更多的内省工具可能是必需的（例如，`any(String.class)`）。解决方案是在测试方法中使用 `ArgumentCaptor`
    与额外的局部变量。
- en: Tip
  id: totrans-4077
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that local variables and transitory states in implementation methods
    will always increase the complexity of their related tests. Shorter, explicit,
    and cohesive methods are always better options.
  id: totrans-4078
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，实现方法中的局部变量和瞬态状态总是增加相关测试的复杂性。更短、明确和内聚的方法总是更好的选择。
- en: There is more…
  id: totrans-4079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: About Mockito
  id: totrans-4080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于 Mockito
- en: We advise the Mockito's Javadoc that is very well done and full of practical
    examples
  id: totrans-4081
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议查看 Mockito 的 Javadoc，它非常完善并且包含了很多实用的例子。
- en: '[http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html](http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html)'
  id: totrans-4082
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html](http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html)'
- en: JUnit Rules
  id: totrans-4083
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JUnit规则
- en: We didn't cover JUnit Rules in any way so far. JUnit offers `@Rule` annotations
    that can be applied on test-class fields to abstract recurring business-specific
    preparations. It is often used to prepare test context objects (fixtures).
  id: totrans-4084
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有涵盖JUnit规则。JUnit提供了`@Rule`注解，可以应用于测试类字段，以抽象出重复的业务特定准备工作。通常用于准备测试上下文对象（固定装置）。
- en: '[http://www.codeaffine.com/2012/09/24/junit-rules](http://www.codeaffine.com/2012/09/24/junit-rules)'
  id: totrans-4085
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.codeaffine.com/2012/09/24/junit-rules](http://www.codeaffine.com/2012/09/24/junit-rules)'
- en: '[http://junit.org/javadoc/latest/org/junit/Rule.html](http://junit.org/javadoc/latest/org/junit/Rule.html)'
  id: totrans-4086
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://junit.org/javadoc/latest/org/junit/Rule.html](http://junit.org/javadoc/latest/org/junit/Rule.html)'
- en: See also
  id: totrans-4087
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '**Code coverage, JaCoCo**: JaCoCo is a library used to help maintain and increase
    the percentage of code covered by tests in applications; it is available at: [http://eclemma.org/jacoco](http://eclemma.org/jacoco).'
  id: totrans-4088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码覆盖率，JaCoCo**：JaCoCo是一个库，用于帮助维护和增加应用程序中测试覆盖的代码百分比；它位于：[http://eclemma.org/jacoco](http://eclemma.org/jacoco)。'
- en: 'Read more about JaCoCo Maven plugin at:'
  id: totrans-4089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下位置阅读有关JaCoCo Maven插件的更多信息：
- en: '[http://eclemma.org/jacoco/trunk/doc/maven.html](http://eclemma.org/jacoco/trunk/doc/maven.html)'
  id: totrans-4090
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://eclemma.org/jacoco/trunk/doc/maven.html](http://eclemma.org/jacoco/trunk/doc/maven.html)'
- en: Integration testing with Cargo, Rest-assured, and Maven failsafe
  id: totrans-4091
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cargo、Rest-assured和Maven failsafe进行集成测试
- en: Integration Tests are as important as unit tests. They validate a feature from
    a higher level, and involve more components or layers at the same time. Integration
    tests (IT tests) are given more importance when an environment needs to evolve
    fast. Design processes often require iterations, and unit tests sometimes seriously
    impact our ability to refactor, while higher level testing is less impacted comparatively.
  id: totrans-4092
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试与单元测试一样重要。它们从更高的层面验证功能，并同时涉及更多的组件或层。当环境需要快速演变时，集成测试（IT测试）变得更加重要。设计过程通常需要迭代，而单元测试有时会严重影响我们重构的能力，而高级别测试相对来说受到的影响较小。
- en: Getting ready
  id: totrans-4093
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe shows how to develop automated IT tests that focus on Spring MVC
    web services. Such IT Tests are not behavioral tests as they don't assess the
    user interface at all. To test behaviors, an even higher testing level would be
    necessary, simulating the User journey through the application interface.
  id: totrans-4094
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了如何开发重点放在Spring MVC Web服务上的自动化IT测试。这些IT测试不是行为测试，因为它们根本不评估用户界面。要测试行为，需要更高的测试级别，模拟用户通过应用程序界面的旅程。
- en: We will configure the Cargo Maven Plugin to stand up a test environment as part
    of the pre-integration-test Maven phase. On the integration-test phase, we will
    get the Maven failsafe plugin to execute our IT Tests. Those IT Tests will make
    use of the REST-assured library to run HTTP requests against the test environment
    and assert the HTTP responses.
  id: totrans-4095
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置Cargo Maven插件，作为pre-integration-test Maven阶段的一部分来建立一个测试环境。在integration-test阶段，我们将让Maven
    failsafe插件执行我们的IT测试。这些IT测试将使用Rest-assured库对测试环境运行HTTP请求并断言HTTP响应。
- en: How to do it…
  id: totrans-4096
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We have designed Integration tests in the `cloudstreetmarket-api` module. These
    tests are intended to test the API controller methods.![How to do it…](img/image00923.jpeg)
  id: totrans-4097
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经在`cloudstreetmarket-api`模块中设计了集成测试。这些测试旨在测试API控制器方法。![如何做…](img/image00923.jpeg)
- en: 'The great Rest-assured library comes with the following Maven dependency:'
  id: totrans-4098
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伟大的Rest-assured库附带以下Maven依赖项：
- en: '[PRE451]'
  id: totrans-4099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'A typical example of an IT Test using REST-assured would be the following `UserControllerIT.createUserBasicAuth()`:'
  id: totrans-4100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REST-assured进行IT测试的典型示例是`UserControllerIT.createUserBasicAuth()`：
- en: '[PRE452]'
  id: totrans-4101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: Because they take longer to execute, we wanted to decouple the IT Tests execution
    from the main Maven life cycle. We have associated those IT Tests to a Maven profile
    named `integration`.
  id: totrans-4102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为它们需要更长的时间来执行，我们希望将IT测试的执行与主Maven生命周期解耦。我们已将这些IT测试关联到名为`integration`的Maven配置文件。
- en: Note
  id: totrans-4103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Maven profiles offer the possibility to optionally enrich a Maven build with
    extra life cycle bindings. For instance, our integration profile is activated
    passing this profile id as `Profile` argument in the usual command:'
  id: totrans-4104
  prefs: []
  type: TYPE_NORMAL
  zh: Maven配置文件提供了使用额外生命周期绑定来丰富Maven构建的可能性。例如，我们的集成配置文件是通过在通常的命令中传递此配置文件ID作为`Profile`参数来激活的：
- en: '`$ mvn clean install -P integration`'
  id: totrans-4105
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ mvn clean install -P integration`'
- en: 'For our API IT tests, we have located the profile-specific configuration in
    the `cloudstreetmarket-api pom.xml` file:'
  id: totrans-4106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的API IT测试，我们已将特定于配置文件的配置放在了`cloudstreetmarket-api pom.xml`文件中：
- en: '[PRE453]'
  id: totrans-4107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'Before attempting to run them on your machine, check that you have a **CATALINA_HOME**
    environment variable pointing to your Tomcat directory. If not, you must create
    it. The variable to set should be the following (if you have followed [Chapter
    1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise Spring
    Application"), *Setup Routine for an Enterprise Spring Application*):'
  id: totrans-4108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在尝试在您的计算机上运行它们之前，请检查您的**CATALINA_HOME**环境变量是否指向Tomcat目录。如果没有，您必须创建它。要设置的变量应该是以下内容（如果您已经按照[第1章](part0079.xhtml#aid-2BASE1
    "第1章。企业Spring应用程序的设置例程")进行了设置，则应该是）：
- en: '`C:\tomcat8`: on MS Windows'
  id: totrans-4109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\tomcat8`：在MS Windows上'
- en: '`/home/usr/{system.username}/tomcat8`: on Linux'
  id: totrans-4110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home/usr/{system.username}/tomcat8`：在Linux上'
- en: '`/Users/{system.username}/tomcat8`: on Mac OS X'
  id: totrans-4111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Users/{system.username}/tomcat8`：在Mac OS X上'
- en: Also, ensure that Apache HTTP, Redis, and MySQL are up and running on your local
    machine (see previous chapter if you have skipped it).
  id: totrans-4112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '此外，请确保Apache HTTP、Redis和MySQL在您的本地计算机上运行正常（如果您跳过了上一章，请参阅上一章）。 '
- en: 'When ready:'
  id: totrans-4113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备就绪后：
- en: 'either execute the following Maven command in your Terminal (if you have the
    Maven directory in your path):'
  id: totrans-4114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端中执行以下Maven命令（如果Maven目录在您的路径中）：
- en: '[PRE454]'
  id: totrans-4115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: 'or create a shortcut for this custom build in your Eclipse IDE from the **Run**
    | **Run Configurations…** menu. The Build configuration to create is the following:'
  id: totrans-4116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者在Eclipse IDE中从**Run** | **Run Configurations…**菜单中创建此自定义构建的快捷方式。要创建的构建配置如下：
- en: '![How to do it…](img/image00924.jpeg)'
  id: totrans-4117
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/image00924.jpeg)'
- en: 'Running this command (or shortcut) should:'
  id: totrans-4118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令（或快捷方式）应该：
- en: deploy the **api.war** to the local Tomcat Server
  id: totrans-4119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**api.war**部署到本地Tomcat服务器
- en: start the local Tomcat
  id: totrans-4120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动本地Tomcat
- en: execute the test classes matching the **/*IT.java pattern
  id: totrans-4121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行与**/*IT.java模式匹配的测试类
- en: If all the tests pass, you should see the `[INFO] BUILD SUCCESS` message.
  id: totrans-4122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有测试都通过，您应该看到`[INFO] BUILD SUCCESS`消息。
- en: In between, when the build comes to the API, you should see the following bit
    of stack trace suggesting the successful execution of our IT tests:![How to do
    it…](img/image00925.jpeg)
  id: totrans-4123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建到API时，您应该看到以下一小段堆栈跟踪，表明我们的IT测试成功执行：![如何做…](img/image00925.jpeg)
- en: How it works...
  id: totrans-4124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We will explain in this section why we have introduced the Maven failsafe plugin,
    how the Cargo Plugin configuration satisfies our needs, how we have used REST-assured,
    and how useful this REST-assured library is.
  id: totrans-4125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中解释为什么我们引入了Maven failsafe插件，Cargo插件配置如何满足我们的需求，我们如何使用REST-assured，以及这个REST-assured库有多有用。
- en: Maven Failsafe versus Maven Surefire
  id: totrans-4126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Maven Failsafe与Maven Surefire
- en: 'We are using Maven failsafe to run Integration tests and Maven Surefire for
    unit tests. This is a standard way of using these plugins. The following table
    reflects this point, with the Plugins'' default naming patterns for test classes:'
  id: totrans-4127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Maven failsafe来运行集成测试，使用Maven Surefire来运行单元测试。这是使用这些插件的标准方式。以下表反映了这一点，插件的默认命名模式用于测试类：
- en: '|   | Maven Surefire | Maven Failsafe |'
  id: totrans-4128
  prefs: []
  type: TYPE_TB
  zh: '|   | Maven Surefire | Maven Failsafe |'
- en: '| --- | --- | --- |'
  id: totrans-4129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Default tests inclusion patterns** |'
  id: totrans-4130
  prefs: []
  type: TYPE_TB
  zh: '| **默认测试包含模式** |'
- en: '[PRE455]'
  id: totrans-4131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '|'
  id: totrans-4132
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE456]'
  id: totrans-4133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '|'
  id: totrans-4134
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Default output directory** |'
  id: totrans-4135
  prefs: []
  type: TYPE_TB
  zh: '| **默认输出目录** |'
- en: '[PRE457]'
  id: totrans-4136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '|'
  id: totrans-4137
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE458]'
  id: totrans-4138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '|'
  id: totrans-4139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Bound to build phase** |'
  id: totrans-4140
  prefs: []
  type: TYPE_TB
  zh: '| **绑定到构建阶段** |'
- en: '[PRE459]'
  id: totrans-4141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '|'
  id: totrans-4142
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE460]'
  id: totrans-4143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '|'
  id: totrans-4144
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: For Maven Failsafe, you can see that our overridden pattern inclusion/exclusion
    was optional. About the binding to Maven build phases, we have chosen to trigger
    the execution of our integration tests on the `integration-test` and `verify`
    phases.
  id: totrans-4145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Maven Failsafe，您可以看到我们覆盖的模式包含/排除是可选的。关于绑定到Maven构建阶段，我们选择在`integration-test`和`verify`阶段触发我们的集成测试的执行。
- en: Code Cargo
  id: totrans-4146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Code Cargo
- en: Cargo is a lightweight library that offers standard API for operating several
    supported containers (Servlet and JEE containers). Examples of covered API operations
    are artifacts' deployments, remote deployments and container start/stop. When
    used through Maven, Ant, or Gradle, it is mostly used for its ability to provide
    support to Integration Tests but can also serve other scopes.
  id: totrans-4147
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo是一个轻量级库，为操作多个支持的容器（Servlet和JEE容器）提供标准API。覆盖的API操作示例包括部署构件、远程部署和容器启动/停止。当通过Maven、Ant或Gradle使用时，它主要用于提供对集成测试的支持，但也可以用于其他范围。
- en: Cargo Maven Plugin
  id: totrans-4148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cargo Maven插件
- en: We have used Cargo through its Maven plugin `org.codehaus.cargo:cargo-maven2-plugin`
    to automatically prepare an integration environment that we can run integration
    tests against. After the integration tests, we expect this environment to shut
    down.
  id: totrans-4149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过其Maven插件`org.codehaus.cargo:cargo-maven2-plugin`使用Cargo自动准备一个集成环境，我们可以对其运行集成测试。在集成测试之后，我们期望此环境关闭。
- en: Binding to Maven phases
  id: totrans-4150
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 绑定到Maven阶段
- en: 'The following executions have been declared as part of the `cargo-maven2-plugin`
    configuration:'
  id: totrans-4151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下执行已声明为`cargo-maven2-plugin`配置的一部分：
- en: '[PRE461]'
  id: totrans-4152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: Let's visit what happens when the `mvn install` command is executed.
  id: totrans-4153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看执行`mvn install`命令时会发生什么。
- en: The `install` is a phase of the default Maven life cycle. As explained in [Chapter
    1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise Spring
    Application"), *Setup Routine for an Enterprise Spring Application* *,* the default
    life cycle has 23 build phases from `validate` to `deploy`. The `install` phase
    is the 22nd, so 22 phases are checked to see whether there are plugin goals that
    could be attached to them.
  id: totrans-4154
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`是默认Maven生命周期的一个阶段。如[第1章](part0079.xhtml#aid-2BASE1 "第1章。企业Spring应用程序的设置例程")中所解释的*企业Spring应用程序的设置例程*，默认生命周期有23个构建阶段，从`validate`到`deploy`。`install`阶段是第22个阶段，因此会检查22个阶段，看是否有插件目标可以附加到它们上面。'
- en: Here, the `pre-integration-test` phase (that appears in the default life cycle
    between `validate` and `install`) will trigger the processes that are located
    under the `start` and `deploy` goals of our maven Cargo plugin. It is the same
    logic with `post-integration-test` triggers the `undeploy` and `stop` goals.
  id: totrans-4155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`pre-integration-test`阶段（出现在默认生命周期的`validate`和`install`之间）将触发位于我们的maven
    Cargo插件的`start`和`deploy`目标下的进程。与此相同的逻辑是`post-integration-test`触发`undeploy`和`stop`目标。
- en: Before the IT tests execution, we start and deploy the Tomcat server. These
    IT tests are processed with Maven failsafe in the `integration-test` phase. Finally,
    the Tomcat server is undeployed and stopped.
  id: totrans-4156
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行IT测试之前，我们启动和部署Tomcat服务器。这些IT测试在`integration-test`阶段使用Maven failsafe进行处理。最后，Tomcat服务器被取消部署并停止。
- en: IT Tests can also be executed with the `verify` phase (if the server is started
    out of the default Maven life cycle).
  id: totrans-4157
  prefs: []
  type: TYPE_NORMAL
  zh: IT测试也可以在`verify`阶段执行（如果服务器在默认Maven生命周期之外启动）。
- en: Using an existing Tomcat instance
  id: totrans-4158
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用现有的Tomcat实例
- en: In the Cargo Maven plugin configuration, we are targeting an existing instance
    of Tomcat. Our application is currently depending upon MySQL, Redis, Apache HTTP,
    and a custom session management. We have decided that the IT Tests execution will
    be required to be run in a proper integration environment.
  id: totrans-4159
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cargo Maven插件配置中，我们针对现有的Tomcat实例。我们的应用当前依赖于MySQL、Redis、Apache HTTP和自定义会话管理。我们决定IT测试执行将需要在适当的集成环境中运行。
- en: Without all these dependencies, we would have got Cargo to download a Tomcat
    8 instance.
  id: totrans-4160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有这些依赖关系，我们将让Cargo下载Tomcat 8实例。
- en: Rest assured
  id: totrans-4161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rest assured
- en: REST-assured is an open source library licensed Apache v2 and supported by the
    company Jayway. It is written with Groovy and allows making HTTP requests and
    validating JSON or XML responses through its unique functional DSL that drastically
    simplify the tests of REST services.
  id: totrans-4162
  prefs: []
  type: TYPE_NORMAL
  zh: REST-assured是一个由Jayway公司支持的Apache v2许可的开源库。它是用Groovy编写的，允许通过其独特的功能DSL进行HTTP请求和验证JSON或XML响应，从而大大简化了REST服务的测试。
- en: Static imports
  id: totrans-4163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 静态导入
- en: 'To effectively use REST-assured, the documentation recommends adding static
    imports of the following packages:'
  id: totrans-4164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地使用REST-assured，文档建议添加以下包的静态导入：
- en: '`com.jayway.restassured.RestAssured.*`'
  id: totrans-4165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.jayway.restassured.RestAssured.*`'
- en: '`com.jayway.restassured.matcher.RestAssuredMatchers.*`'
  id: totrans-4166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.jayway.restassured.matcher.RestAssuredMatchers.*`'
- en: '`org.hamcrest.Matchers.*`'
  id: totrans-4167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.hamcrest.Matchers.*`'
- en: A Given, When, Then approach
  id: totrans-4168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一种给定、当、然后的方法
- en: 'To understand the basics of the REST-assured DSL, let''s consider one of our
    tests (in `UserControllerIT`) that provides a short overview of REST-assured usage:'
  id: totrans-4169
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解REST-assured DSL的基础知识，让我们考虑我们的一个测试（在`UserControllerIT`中），它提供了REST-assured使用的简要概述：
- en: '[PRE462]'
  id: totrans-4170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: The `given` part of the statement is the HTTP Request specification. With REST-assured,
    some request headers like `Content-Type` or `Accept` can be defined in an intuitive
    way with `contentType(…)` and `accept(…)`. Other **headers** can be reached with
    the generic `.header(…)`. Request parameters and authentication can also be defined
    in a same fashion.
  id: totrans-4171
  prefs: []
  type: TYPE_NORMAL
  zh: 语句的`given`部分是HTTP请求规范。使用REST-assured，一些请求头，如`Content-Type`或`Accept`，可以以直观的方式使用`contentType(…)`和`accept(…)`来定义。其他**头部**可以通过通用的`.header(…)`来访问。请求参数和身份验证也可以以相同的方式定义。
- en: For `POST` and `PUT` requests, it is necessary to pass a body to the request.
    This `body` can either be plain JSON or XML or directly the Java object (as we
    did here). This `body`, as a Java object, will be converted by the library depending
    upon the `content-type` defined in the specification (JSON or XML).
  id: totrans-4172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`POST`和`PUT`请求，有必要向请求传递一个body。这个`body`可以是普通的JSON或XML，也可以直接是Java对象（就像我们在这里做的那样）。这个`body`作为Java对象，将根据规范中定义的`content-type`（JSON或XML）由库进行转换。
- en: After the HTTP Request specification, the `when()` statement provides information
    about the actual HTTP method and destination.
  id: totrans-4173
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTP请求规范之后，`when()`语句提供了有关实际HTTP方法和目的地的信息。
- en: At this stage, the returned object allows us either to define expectations from
    a `then()` block or, as we did here, to retrieve the `Response` object from where
    constraints can be defined separately. In our test case, the `Location` header
    of the `Response` is expected to be filled.
  id: totrans-4174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，返回的对象允许我们从`then()`块中定义期望，或者像我们在这里做的那样，从中检索`Response`对象，从中可以单独定义约束。在我们的测试用例中，预期`Response`的`Location`头部应该被填充。
- en: There is more…
  id: totrans-4175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'More information can be found at the following Cargo and REST-assured respective
    documentations:'
  id: totrans-4176
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在以下Cargo和REST-assured各自的文档中找到：
- en: About Cargo
  id: totrans-4177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于Cargo
- en: For more information about the product and its integration with third-party
    systems, refer to [https://codehaus-cargo.github.io/cargo/Home.html](https://codehaus-cargo.github.io/cargo/Home.html).
  id: totrans-4178
  prefs: []
  type: TYPE_NORMAL
  zh: 有关产品及其与第三方系统集成的更多信息，请参阅[https://codehaus-cargo.github.io/cargo/Home.html](https://codehaus-cargo.github.io/cargo/Home.html)。
- en: More REST-assured examples
  id: totrans-4179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多REST-assured示例
- en: 'For more examples, the REST-assured online Wiki provides plenty:'
  id: totrans-4180
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多示例，REST-assured在线Wiki提供了大量信息：
- en: '[https://github.com/jayway/rest-assured/wiki/Usage](https://github.com/jayway/rest-assured/wiki/Usage)'
  id: totrans-4181
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jayway/rest-assured/wiki/Usage](https://github.com/jayway/rest-assured/wiki/Usage)'
- en: Injecting Spring Beans into integration tests
  id: totrans-4182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Bean注入集成测试
- en: This recipe is an example of how to inject Spring managed beans into integration
    test classes. Even for IT tests, whose first objective is to assess the backend
    as a blackbox, it is sometimes necessary to reach out technical objects from the
    intermediate layer.
  id: totrans-4183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是如何将Spring管理的bean注入到集成测试类中的一个示例。即使对于其首要目标是将后端作为黑匣子进行评估的IT测试，有时也需要从中间层访问技术对象。
- en: Getting ready
  id: totrans-4184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will see how to reuse an instance of a Spring managed `datasource` to be
    injected in our test class. This `datasource` will help us to build an instance
    of `jdbcTemplate`. From this `jdbcTemplate`, we will query the database and simulate/validate
    processes that couldn't be tested otherwise.
  id: totrans-4185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何重用Spring管理的`datasource`实例，将其注入到我们的测试类中。这个`datasource`将帮助我们构建一个`jdbcTemplate`的实例。从这个`jdbcTemplate`，我们将查询数据库并模拟/验证否则无法测试的过程。
- en: How to do it…
  id: totrans-4186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We have `@Autowired` a `dataSource` SpringBean in our `UserControllerIT` test.
    This bean is defined in the test-specific Spring configuration file (`spring-context-api-test.xml`)
    `resources` directory (`cloudstreetmarket-api`):![How to do it…](img/image00926.jpeg)
  id: totrans-4187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在我们的`UserControllerIT`测试中`@Autowired`了一个`dataSource` SpringBean。这个bean在测试特定的Spring配置文件（`spring-context-api-test.xml`）`resources`目录（`cloudstreetmarket-api`）中定义：![如何做…](img/image00926.jpeg)
- en: '[PRE463]'
  id: totrans-4188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: 'A `jdbcTemplate` instance is created in the `UserControllerIT` class from the
    `@Autowired dataSource` bean:'
  id: totrans-4189
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserControllerIT`类中，从`@Autowired dataSource` bean创建了一个`jdbcTemplate`实例：
- en: '[PRE464]'
  id: totrans-4190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: We use `jdbcTemplate` to insert and delete `Social Connections` directly in
    the database (see [Chapter 5](part0101.xhtml#aid-30A8Q1 "Chapter 5. Authenticating
    with Spring MVC"), *Authenticati**ng with Spring MVCA*). This allows us to bypass
    and simulate a successful user OAuth2 authentication flow (that normally happens
    through the web browser).
  id: totrans-4191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`jdbcTemplate`直接在数据库中插入和删除`Social Connections`（参见[第5章](part0101.xhtml#aid-30A8Q1
    "第5章。使用Spring MVC进行身份验证")，“使用Spring MVC进行身份验证”）。这使我们能够绕过并模拟成功的用户OAuth2身份验证流程（通常通过Web浏览器进行）。
- en: 'For deleting social connections, we have created the following private method
    that is called as needed by the test(s:):'
  id: totrans-4192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于删除社交连接，我们创建了以下私有方法，根据需要由测试调用：
- en: '[PRE465]'
  id: totrans-4193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: 'At the very top of the `UserControllerIT` class, the following two annotations
    can be noticed:'
  id: totrans-4194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UserControllerIT`类的顶部，可以注意到以下两个注解：
- en: '`@RunWith(SpringJUnit4ClassRunner.class)` tells JUnit to run with a custom
    extension of JUnit (`SpringJUnit4ClassRunner`) that supports the Spring `TestContext`
    Framework.'
  id: totrans-4195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith(SpringJUnit4ClassRunner.class)`告诉JUnit使用JUnit的自定义扩展（`SpringJUnit4ClassRunner`）来运行，支持Spring`TestContext`框架。'
- en: '`@ContextConfiguration("classpath:spring-context-api-test.xml")`specifies where
    and how to load and configure the Spring application context:'
  id: totrans-4196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ContextConfiguration("classpath:spring-context-api-test.xml")`指定了加载和配置Spring应用程序上下文的位置和方式：'
- en: '[PRE466]'
  id: totrans-4197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: How it works...
  id: totrans-4198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: SpringJUnit4ClassRunner
  id: totrans-4199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SpringJUnit4ClassRunner
- en: In its design, the `SpringJUnit4ClassRunner` is a direct subclass of the JUnit's
    `BlockJUnit4ClassRunner`. `SpringJUnit4ClassRunner` that initializes when a `TestContextManager`
    is loaded. A `TestContextManager` manages the life cycle of a `TestContext` and
    can also reflect test events to the registered `TestExecutionListeners` (from
    `@BeforeClass`, `@AfterClass`, `@Before`, and `@After` annotations).
  id: totrans-4200
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计上，`SpringJUnit4ClassRunner`是JUnit的`BlockJUnit4ClassRunner`的直接子类。`SpringJUnit4ClassRunner`在加载`TestContextManager`时初始化。`TestContextManager`管理`TestContext`的生命周期，并且还可以将测试事件反映给注册的`TestExecutionListeners`（来自`@BeforeClass`、`@AfterClass`、`@Before`和`@After`注解）。
- en: By loading a Spring context, the `SpringJUnit4ClassRunner` Spring context, `SpringJUnit4ClassRunner`
    enables the possibility use Spring managed beans in test classes. The `SpringJUnit4ClassRunner`
    also supports a set of annotations (either from JUnit or from Spring test) that
    can be used in test classes. The use of these annotations can be trusted for subsequently
    providing suitable life cycle management to context-defined objects.
  id: totrans-4201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过加载Spring上下文，`SpringJUnit4ClassRunner` Spring上下文，`SpringJUnit4ClassRunner`使得在测试类中可以使用Spring管理的bean。`SpringJUnit4ClassRunner`还支持一组注解（来自JUnit或Spring测试），可以在测试类中使用。可以信任这些注解的使用，以便随后为上下文定义的对象提供适当的生命周期管理。
- en: Those annotations are `@Test` (with its `expected` and `timeout` annotation
    parameters), `@Timed`, `@Repeat`, `@Ignore`, `@ProfileValueSourceConfiguration`,
    and `@IfProfileValue`.
  id: totrans-4202
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注解是`@Test`（带有其`expected`和`timeout`注解参数）、`@Timed`、`@Repeat`、`@Ignore`、`@ProfileValueSourceConfiguration`和`@IfProfileValue`。
- en: The @ContextConfiguration annotation
  id: totrans-4203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@ContextConfiguration注解'
- en: This class-level annotation is specific to Spring Test. It defines how and where
    to load a Spring Context for the test class.
  id: totrans-4204
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类级别的注解是特定于Spring测试的。它定义了如何以及从哪里加载Spring上下文用于测试类。
- en: Our definition in the recipe targets a specific Spring XML configuration file
    `@ContextConfiguration("classpath:spring-context-api-test.xml").`
  id: totrans-4205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在配方中的定义针对特定的Spring XML配置文件`@ContextConfiguration("classpath:spring-context-api-test.xml")`。
- en: 'However, since Spring 3.1 the contexts can be defined programmatically, `@ContextConfiguration`
    can also target configuration classes as follows:'
  id: totrans-4206
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自Spring 3.1以来，上下文可以以编程方式定义，`@ContextConfiguration`也可以以以下方式针对配置类：
- en: '`@ContextConfiguration(classes={AnnotationConfig.class,` `WebSocketConfig.class})`'
  id: totrans-4207
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ContextConfiguration(classes={AnnotationConfig.class,` `WebSocketConfig.class})`'
- en: 'As shown in the following snippet, both declaration types can be combined in
    the same annotation:'
  id: totrans-4208
  prefs: []
  type: TYPE_NORMAL
  zh: 如下面的片段所示，两种声明类型可以组合在同一个注解中：
- en: '`@ContextConfiguration(classes={AnnotationConfig.class,` `WebSocketConfig.class},
    locations={`"`classpath:spring-context-api-test.xml`"`})`'
  id: totrans-4209
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ContextConfiguration(classes={AnnotationConfig.class,` `WebSocketConfig.class},
    locations={`"`classpath:spring-context-api-test.xml`"`})`'
- en: There is more…
  id: totrans-4210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We will see more in this section about the Spring JdbcTemplate that has been
    used for test purposes.
  id: totrans-4211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中更多地了解为测试目的而使用的Spring JdbcTemplate。
- en: JdbcTemplate
  id: totrans-4212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JdbcTemplate
- en: In *Chapter1, Setup Routine for an Enterprise Spring Application*, we have introduced
    the different modules that make the Spring Framework what it is today. One group
    of modules is **Data Access and Integration**. This group contains the JDBC, ORM,
    OXM, JMS, and transactions modules.
  id: totrans-4213
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1章，企业Spring应用程序的设置例程*中，我们介绍了使Spring框架成为今天的样子的不同模块。其中一组模块是**数据访问和集成**。这个组包含了JDBC、ORM、OXM、JMS和事务模块。
- en: The `JdbcTemplate` is a key-class part of the Spring JDBC core package. It reliably
    allows performing of database operations with straightforward utility methods
    and also provides an abstraction for big chunks of boilerplate code. Once more,
    this tool saves us time and offers patterns to design quality products.
  id: totrans-4214
  prefs: []
  type: TYPE_NORMAL
  zh: '`JdbcTemplate`是Spring JDBC核心包的关键部分。它可靠地允许使用简单的实用方法执行数据库操作，并为大量的模板代码提供了抽象。再次，这个工具节省了我们的时间，并提供了设计高质量产品的模式。'
- en: Abstraction of boilerplate logic
  id: totrans-4215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板逻辑的抽象
- en: 'Let''s consider as an example the method in our test class that deletes connections:'
  id: totrans-4216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以我们的测试类中删除连接的方法为例：
- en: '[PRE467]'
  id: totrans-4217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: Using `jdbcTemplate`, deleting a database element is a one-line instruction.
    It creates a `PreparedStatement` under the hood, chooses the right Type, depending
    upon the arguments we actually pass as values, and it manages the database connection
    for us, making sure to close this connection whatever happens.
  id: totrans-4218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jdbcTemplate`，删除数据库元素是一条指令。它在内部创建一个`PreparedStatement`，根据我们实际传递的值选择正确的类型，并为我们管理数据库连接，确保无论发生什么都关闭这个连接。
- en: The `jdbcTemplate.update` method has been designed to issue a single SQL update
    operation. It can be used for inserts, updates, and also deletes.
  id: totrans-4219
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdbcTemplate.update`方法被设计用于发出单个SQL更新操作。它可以用于插入、更新，也可以删除。'
- en: As often in Spring, `jdbcTemplate` also transforms the produced checked exceptions
    (if any) into unchecked exceptions. Here, the potential `SQLExceptions` would
    be wrapped in a `RuntimeException`.
  id: totrans-4220
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Spring中经常发生的那样，`jdbcTemplate`也会将产生的已检查异常（如果有的话）转换为未检查异常。在这里，潜在的`SQLExceptions`将被包装在`RuntimeException`中。
- en: Extraction of auto-generated IDs
  id: totrans-4221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动生成ID的提取
- en: 'The `jdbcTemplate.update` method also offers other argument Types:'
  id: totrans-4222
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdbcTemplate.update`方法还提供其他参数类型：'
- en: '[PRE468]'
  id: totrans-4223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: In the case of an insert, this method can be called when needed to read and
    potentially reuse the generated ID (which is unknown before the query execution).
  id: totrans-4224
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入的情况下，可以在需要时调用此方法来读取并可能重用生成的ID（在查询执行之前是未知的）。
- en: 'In our example, if we would have wanted to reuse the generated connection IDs
    when inserting new connections, we would have done it as follows:'
  id: totrans-4225
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，如果我们想要在插入新连接时重用生成的连接ID，我们将这样做：
- en: '[PRE469]'
  id: totrans-4226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: But we didn't specifically require such a use case.
  id: totrans-4227
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们并没有明确要求这样的用例。
- en: Modern application Logging with Log4j2
  id: totrans-4228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Log4j2的现代应用程序日志记录
- en: After 20 years of evolution in the Java ecosystem, the ways of Logging have
    seen different strategies, trends, and architectures. Nowadays, several Logging
    frameworks can be found among the used third-party dependencies. We must support
    them all to debug an application or to trace runtime events.
  id: totrans-4229
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java生态系统的20年演变之后，日志记录的方式已经看到了不同的策略、趋势和架构。如今，可以在使用的第三方依赖项中找到几种日志框架。我们必须支持它们所有来调试应用程序或跟踪运行时事件。
- en: Getting ready
  id: totrans-4230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe provides a future-proof implementation of `Log4j2` for the `CloudStreet
    Market` application. It requires several Maven dependencies to be added to our
    modules. As a solution, it can appear quite complicated, but in reality the amount
    of Logging frameworks to support is limited, and the logic behind a `Log4j2` migration
    is fairly straightforward.
  id: totrans-4231
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方为`CloudStreet Market`应用程序提供了一个未来的`Log4j2`实现。它需要将几个Maven依赖项添加到我们的模块中。作为解决方案，它可能看起来相当复杂，但实际上需要支持的日志框架数量有限，`Log4j2`迁移背后的逻辑相当简单。
- en: How to do it…
  id: totrans-4232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following Maven dependencies have been added to the dependency-management
    section of the parent-module (`cloudstreetmarket-parent`):'
  id: totrans-4233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已将以下Maven依赖项添加到父模块（`cloudstreetmarket-parent`）的依赖项管理部分：
- en: '[PRE470]'
  id: totrans-4234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: Tip
  id: totrans-4235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The last dependency-management, `org.slf4j`, allows us to make sure one single
    version of `slf4j` will be used everywhere.
  id: totrans-4236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个依赖项管理，`org.slf4j`，允许我们确保`slf4j`的一个版本将在所有地方使用。
- en: 'In the `api`, `ws`, and `core` modules, the following dependencies have then
    been added: `log4j-api`, `log4j-core`, `log4j-slf4j-impl`, `log4j-1.2-api`,and
    `log4j-jcl`.'
  id: totrans-4237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在`api`，`ws`和`core`模块中添加了以下依赖项：`log4j-api`，`log4j-core`，`log4j-slf4j-impl`，`log4j-1.2-api`和`log4j-jcl`。
- en: In the web modules (`api`, `ws`, and `webapp`), `log4j-web` has been added.
  id: totrans-4238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web模块（`api`，`ws`和`webapp`）中，已添加了`log4j-web`。
- en: Notice that `slf4j-api` has only been added for dependency management.
  id: totrans-4239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，`slf4j-api`仅用于依赖项管理。
- en: 'Start the Tomcat Server with **the extra JVM argument**:'
  id: totrans-4240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**额外的JVM参数**启动Tomcat服务器：
- en: '[PRE471]'
  id: totrans-4241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: Tip
  id: totrans-4242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Replace `<home-directory>` with the path you actually use on your machine.
  id: totrans-4243
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<home-directory>`替换为您在计算机上实际使用的路径。
- en: 'The app directory in the user home now contains the `log4j2` configuration
    file:'
  id: totrans-4244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户主目录中的应用程序目录现在包含`log4j2`配置文件：
- en: '[PRE472]'
  id: totrans-4245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: As a fall back option, a `log4j2.xml` file is also present in the classpath
    (`src/main/resources`) of every single module.
  id: totrans-4246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为备选方案，每个单个模块的类路径（`src/main/resources`）中也存在一个`log4j2.xml`文件。
- en: A couple of log instructions have been placed in different classes to trace
    the user journey.
  id: totrans-4247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已在不同的类中放置了一些日志说明，以跟踪用户的旅程。
- en: 'Log instructions in `SignInAdapterImpl`:'
  id: totrans-4248
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SignInAdapterImpl`中记录说明：
- en: '[PRE473]'
  id: totrans-4249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: 'Log instructions in `UsersController`:'
  id: totrans-4250
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UsersController`中记录说明：
- en: '[PRE474]'
  id: totrans-4251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: 'Start your local Tomcat Server and navigate briefly through the application.
    As with the following example, you should be able to observe a trace of the customer
    activity in the aggregated file: `<home-directory>/apps/logs/cloudstreetmarket.log`:![How
    to do it…](img/image00927.jpeg)'
  id: totrans-4252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动本地Tomcat服务器，并简要浏览应用程序。与以下示例一样，您应该能够在聚合文件`<home-directory>/apps/logs/cloudstreetmarket.log`中观察到客户活动的跟踪：![如何做...](img/image00927.jpeg)
- en: Tip
  id: totrans-4253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: With the `log4j2.xml` configuration we have made, the `cloudstreetmarket.log`
    files will automatically be zipped and categorized in directories as they reach
    250 MB.
  id: totrans-4254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们制作的`log4j2.xml`配置，`cloudstreetmarket.log`文件将在达到250MB时自动被压缩并分类到目录中。
- en: How it works...
  id: totrans-4255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We are mainly going to review in this section how Log4j2 has been set up to
    work along with the other Logging frameworks. The other parts of the configuration
    (not covered here) have been considered more intuitive.
  id: totrans-4256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要将在本节中审查Log4j2如何设置与其他日志框架一起工作。配置的其他部分（此处未涵盖）被认为更直观。
- en: Apache Log4j2 among other logging frameworks
  id: totrans-4257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache Log4j2和其他日志框架
- en: Log4j1+ is dying as a project since it is not compatible any longer with Java
    5+.
  id: totrans-4258
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j1+作为一个项目正在消亡，因为它不再与Java 5+兼容。
- en: Log4j 2 has been built as a fork of the log4j codebase. In this perspective,
    it competes with the Logback project. Logback was initially the legitimate continuation
    of Log4j.
  id: totrans-4259
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j 2是作为log4j代码库的一个分支构建的。从这个角度来看，它与Logback项目竞争。Logback最初是Log4j的合法继续。
- en: Log4j 2 actually implements many of the Logback's improvements but also fixes
    problems that are inherent to the Logback's architecture.
  id: totrans-4260
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j 2实际上实现了Logback的许多改进，但也修复了Logback架构固有的问题。
- en: Logback provides great performance improvements, especially with multithreading.
    Comparatively, Log4j 2 offers similar performance.
  id: totrans-4261
  prefs: []
  type: TYPE_NORMAL
  zh: Logback提供了很好的性能改进，特别是在多线程方面。相比之下，Log4j 2提供了类似的性能。
- en: The case of SLF4j
  id: totrans-4262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SLF4j的情况
- en: SLF4j is not a Logging framework as such; it is an abstraction layer that allows
    the user to plug in any logging system at deployment time.
  id: totrans-4263
  prefs: []
  type: TYPE_NORMAL
  zh: SLF4j本身不是一个日志框架；它是一个抽象层，允许用户在部署时插入任何日志系统。
- en: 'SLF4j requires a SLF4j binding in the classpath. Examples of bindings are the
    following:'
  id: totrans-4264
  prefs: []
  type: TYPE_NORMAL
  zh: SLF4j在类路径中需要一个SLF4j绑定。绑定的示例如下：
- en: '`slf4j-log4j12-xxx.jar`: (log4j version 1.2),'
  id: totrans-4265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slf4j-log4j12-xxx.jar`：（log4j版本1.2），'
- en: '`slf4j-jdk14-xxx.jar`: (`java.util.logging` from the jdk 1.4),'
  id: totrans-4266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slf4j-jdk14-xxx.jar`：（来自jdk 1.4的`java.util.logging`），'
- en: '`slf4j-jcl-xxx.jar`: (Jakarta Commons Logging)'
  id: totrans-4267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slf4j-jcl-xxx.jar`：（Jakarta Commons Logging）'
- en: '`logback-classic-xxx.jar`.'
  id: totrans-4268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logback-classic-xxx.jar`。'
- en: It also often requires core libraries of the targeted Logging framework.
  id: totrans-4269
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常还需要目标日志框架的核心库。
- en: Migrating to log4j 2
  id: totrans-4270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到log4j 2
- en: Log4j2 does not offer backward compatibility for Log4j1+. It may sound like
    a problem because applications (like `CloudStreetMarket`) often use third-party
    libraries that embed their own logging framework. Spring core, for example, has
    a transitive dependency to Jakarta Commons Logging.
  id: totrans-4271
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j2不提供对Log4j1+的向后兼容性。 这可能听起来像一个问题，因为应用程序（如`CloudStreetMarket`）经常使用嵌入其自己的日志框架的第三方库。
    例如，Spring核心具有对Jakarta Commons Logging的传递依赖。
- en: To solve this situation, Log4j 2 provides adapters guaranteeing that internal
    logs won't be lost and will be bridged to join the log4j 2 flow of logs. There
    are adapters pretty much for all the systems that may produce logs.
  id: totrans-4272
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这种情况，Log4j 2提供了适配器，确保内部日志不会丢失，并将桥接到加入log4j 2日志流的日志。 几乎所有可能产生日志的系统都有适配器。
- en: Log4j 2 API and Core
  id: totrans-4273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Log4j 2 API和核心
- en: 'Log4j 2 comes with an API and an implementation. Both are required and come
    with the following dependencies:'
  id: totrans-4274
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j 2带有API和实现。 两者都是必需的，并且具有以下依赖项：
- en: '[PRE475]'
  id: totrans-4275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: Log4j 2 Adapters
  id: totrans-4276
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Log4j 2适配器
- en: As introduced earlier, a set of **Adapters** and **Bridges** are available to
    provide backward compatibility to our applications.
  id: totrans-4277
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所介绍，一组**适配器**和**桥接**可用于为我们的应用程序提供向后兼容性。
- en: Log4j 1.x API Bridge
  id: totrans-4278
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Log4j 1.x API桥接
- en: 'When transitive dependencies to Log4j 1+ are noticed in specific modules, the
    following bridge should be added:'
  id: totrans-4279
  prefs: []
  type: TYPE_NORMAL
  zh: 当在特定模块中注意到对Log4j 1+的传递依赖时，应添加以下桥接：
- en: '[PRE476]'
  id: totrans-4280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Apache Commons Logging Bridge
  id: totrans-4281
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Apache Commons Logging桥接
- en: 'When transitive dependencies to Apache (Jakarta) Commons Logging are noticed
    in specific modules, the following bridge should be added:'
  id: totrans-4282
  prefs: []
  type: TYPE_NORMAL
  zh: 当在特定模块中注意到对Apache（Jakarta）Commons Logging的传递依赖时，应添加以下桥接：
- en: '[PRE477]'
  id: totrans-4283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: SLF4J Bridge
  id: totrans-4284
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: SLF4J桥接
- en: 'The same logic is applied to cover slf4j uses; the following bridge should
    be added:'
  id: totrans-4285
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的逻辑适用于覆盖slf4j的使用；应添加以下桥接：
- en: '[PRE478]'
  id: totrans-4286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Java Util Logging Adapters
  id: totrans-4287
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Java Util Logging适配器
- en: 'No transitive dependencies to `java.util.logging` have been noticed in our
    application, but if it would have been the case, we would have used the following
    bridge:'
  id: totrans-4288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序中没有注意到对`java.util.logging`的传递依赖，但如果有的话，我们将使用以下桥接：
- en: '[PRE479]'
  id: totrans-4289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Web Servlet Support
  id: totrans-4290
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Web Servlet支持
- en: The Apache Tomcat container has its own set of libraries that also produce logs.
    Adding the following dependency on web modules is a way to ensure that container
    logs are routed to the main Log4j2 pipeline.
  id: totrans-4291
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Tomcat容器有自己的一组库，也会产生日志。 在Web模块上添加以下依赖项是确保容器日志路由到主Log4j2管道的一种方法。
- en: '[PRE480]'
  id: totrans-4292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: Configuration files
  id: totrans-4293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置文件
- en: The sixth step of this recipe details our log4j2 configuration. It is made of
    different and configurable `Appenders` (output channels basically). We are using
    the console and a file-based `Appender`, but Log4j 2 has a plugin-based architecture
    about `Appenders` that allows the use of external output channels if needed (SMTP,
    Printer, Database, and so on).
  id: totrans-4294
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的第六步详细介绍了我们的log4j2配置。 它由不同的可配置的`Appenders`（基本上是输出通道）组成。 我们正在使用控制台和基于文件的`Appender`，但是Log4j
    2具有关于`Appenders`的基于插件的架构，如果需要，可以使用外部输出通道（SMTP，打印机，数据库等）。
- en: There is more…
  id: totrans-4295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As external sources of information, we point out the interesting Log4j2 auto-configuration
    which is made of a cascading lookup for configuration files, the official documentation,
    and an `Appender` for logging directly into Redis.
  id: totrans-4296
  prefs: []
  type: TYPE_NORMAL
  zh: 作为外部信息源，我们指出了有趣的Log4j2自动配置，该配置由级联查找配置文件、官方文档和用于直接记录到Redis的`Appender`组成。
- en: Automatic configuration
  id: totrans-4297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动配置
- en: 'Log4j2 implements a cascading lookup in order to locate log4j2 configuration
    files. Starting from looking for a provided `log4j.configurationFile` system property,
    to `log4j2-test.xml` and `log4j2.xml` files in the classpath, the official documentation
    details all the followed waterfall steps. This documentation is available at:'
  id: totrans-4298
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j2实现级联查找以定位log4j2配置文件。 从查找提供的`log4j.configurationFile`系统属性开始，到类路径中的`log4j2-test.xml`和`log4j2.xml`文件，官方文档详细介绍了所有遵循的级联步骤。
    此文档可在以下地址找到：
- en: '[https://logging.apache.org/log4j/2.x/manual/configuration.html](https://logging.apache.org/log4j/2.x/manual/configuration.html)'
  id: totrans-4299
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://logging.apache.org/log4j/2.x/manual/configuration.html](https://logging.apache.org/log4j/2.x/manual/configuration.html)'
- en: Official documentation
  id: totrans-4300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 官方文档
- en: 'The official documentation is very well made and complete, and is available
    at:'
  id: totrans-4301
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档非常完善，可在以下地址找到：
- en: '[https://logging.apache.org/log4j/2.x.](https://logging.apache.org/log4j/2.x.)'
  id: totrans-4302
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://logging.apache.org/log4j/2.x.](https://logging.apache.org/log4j/2.x.)'
- en: Interesting Redis Appender implementation
  id: totrans-4303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有趣的Redis Appender实现
- en: 'The following address introduces an Apache licensed project that provides a
    Log4j2 **Appender** to log straight into Redis:'
  id: totrans-4304
  prefs: []
  type: TYPE_NORMAL
  zh: 以下地址介绍了一个Apache许可的项目，该项目提供了一个Log4j2 **Appender**，可以直接记录到Redis中：
- en: '[https://github.com/pavlobaron/log4j2redis](https://github.com/pavlobaron/log4j2redis)'
  id: totrans-4305
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/pavlobaron/log4j2redis](https://github.com/pavlobaron/log4j2redis)'
- en: Part III. Module 3
  id: totrans-4306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分。 模块3
- en: '**Mastering Spring MVC 4**'
  id: totrans-4307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**精通Spring MVC 4**'
- en: '>'
  id: totrans-4308
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*Gain expertise in designing real-world web applications using the Spring MVC
    framework*'
  id: totrans-4309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*掌握使用Spring MVC框架设计真实世界的Web应用程序的专业知识*'
- en: Chapter 1. Mastering the MVC Architecture
  id: totrans-4310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。 掌握MVC架构
- en: In this chapter, we will discuss the MVC architecture principles and see how
    Spring MVC implements those.
  id: totrans-4311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论MVC架构原则，并了解Spring MVC如何实现这些原则。
- en: Our goal is to design a simple page where users can search for tweets corresponding
    to certain criteria and display them to our users.
  id: totrans-4312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是设计一个简单的页面，用户可以在其中搜索符合某些条件的推文，并将它们显示给我们的用户。
- en: To achieve this, we will use the Spring Social Twitter project, which is available
    at [http://projects.spring.io/spring-social-twitter/](http://projects.spring.io/spring-social-twitter/).
  id: totrans-4313
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将使用Spring Social Twitter项目，该项目可在[http://projects.spring.io/spring-social-twitter/](http://projects.spring.io/spring-social-twitter/)上找到。
- en: We will see how to make Spring MVC work with a modern template engine, Thymeleaf,
    and try to understand the inner mechanics of the framework. We will route our
    users through different views, and finally, we will give a stellar look to our
    application using WebJars and Materialize ([http://materializecss.com](http://materializecss.com)).
  id: totrans-4314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何使Spring MVC与现代模板引擎Thymeleaf配合工作，并尝试理解框架的内部机制。我们将引导用户通过不同的视图，最后，我们将使用WebJars和Materialize（[http://materializecss.com](http://materializecss.com)）为我们的应用程序提供出色的外观。
- en: The MVC architecture
  id: totrans-4315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC架构
- en: I expect the meaning of the MVC acronym to be familiar to most. It stands for
    Model View Controller, and it is considered to be a very popular way to build
    a user interface by decoupling the data and the presentation layers.
  id: totrans-4316
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望MVC首字母缩略词的含义对大多数人来说是熟悉的。它代表模型视图控制器，被认为是一种非常流行的通过解耦数据和表示层构建用户界面的方式。
- en: '![The MVC architecture](img/image00928.jpeg)'
  id: totrans-4317
  prefs: []
  type: TYPE_IMG
  zh: '![MVC架构](img/image00928.jpeg)'
- en: The MVC pattern became wildly popular after emerging from the world of Smalltalk
    and landing in the Ruby on Rails framework.
  id: totrans-4318
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模式在从Smalltalk世界中出现并进入Ruby on Rails框架后变得非常流行。
- en: 'The architectural pattern features three layers:'
  id: totrans-4319
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构模式包括三个层：
- en: '**The Model**: This consists of various representations of the data your application
    knows about.'
  id: totrans-4320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这包括应用程序了解的数据的各种表示形式。'
- en: '**The View**: This is made up of several representations of the data that will
    be displayed to your users.'
  id: totrans-4321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这由将显示给用户的数据的几种表示形式组成。'
- en: '**The Controller**: This is the part of the application that will handle user
    interactions. It''s a bridge between the model and the view.'
  id: totrans-4322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这是应用程序处理用户交互的部分。它是模型和视图之间的桥梁。'
- en: The idea behind MVC is to decouple the View from the Model. The model must be
    self-contained and ignorant of the UI. This basically allows the same data to
    be reused across multiple views. These views are different way to look at the
    data. Drill down or using different renderers (HTML, PDF) are good illustrations
    of this principle.
  id: totrans-4323
  prefs: []
  type: TYPE_NORMAL
  zh: MVC背后的理念是将视图与模型解耦。模型必须是自包含的，并且对UI一无所知。这基本上允许相同的数据在多个视图中重复使用。这些视图是查看数据的不同方式。深入或使用不同的渲染器（HTML，PDF）是这一原则的很好的例证。
- en: The Controller acts as a mediator between the user and the data. Its role is
    to control actions available to the end user, as well as routing through the different
    views of the application.
  id: totrans-4324
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器充当用户和数据之间的中介。它的作用是控制最终用户可用的操作，以及在应用程序的不同视图之间进行路由。
- en: MVC critics and best practices
  id: totrans-4325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC的批评和最佳实践
- en: While MVC remains the go-to approach for designing a UI, many criticisms arose
    with its prevalence. Most critics are actually pointing a finger at the incorrect
    use of the pattern.
  id: totrans-4326
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然MVC仍然是设计UI的首选方法，但随着其流行，出现了许多批评。大多数批评者实际上是在指责模式的错误使用。
- en: Anemic Domain Model
  id: totrans-4327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贫血领域模型
- en: Eric Evans' influential book *Domain Driven Design*, also abbreviated as **DDD**,
    defines a set of architecture rules leading to a better integration of the business
    domain inside the code.
  id: totrans-4328
  prefs: []
  type: TYPE_NORMAL
  zh: Eric Evans的具有影响力的书籍《领域驱动设计》，也缩写为**DDD**，定义了一组架构规则，以实现更好地将业务领域整合到代码中。
- en: One of the core ideas is to take advantage of the object-oriented paradigms
    inside the domain objects. Going against this principle is sometimes referred
    to as **Anemic Domain Model**. A good definition of this problem can be found
    on Martin Fowler's blog ([http://www.martinfowler.com/bliki/AnemicDomainModel.html](http://www.martinfowler.com/bliki/AnemicDomainModel.html)).
  id: totrans-4329
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个核心思想是利用领域对象内的面向对象范例。违背这一原则有时被称为**贫血领域模型**。这个问题的一个很好的定义可以在Martin Fowler的博客上找到（[http://www.martinfowler.com/bliki/AnemicDomainModel.html](http://www.martinfowler.com/bliki/AnemicDomainModel.html)）。
- en: 'An Anemic Model typically exhibits the following symptoms:'
  id: totrans-4330
  prefs: []
  type: TYPE_NORMAL
  zh: 贫血模型通常表现出以下症状：
- en: The model is constituted from very simple **plain old Java objects** (**POJO**s)
    with only getters and setters
  id: totrans-4331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型由非常简单的**普通的Java对象**（**POJO**）组成，只有getter和setter
- en: All the business logic is handled inside a service layer
  id: totrans-4332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有业务逻辑都在服务层内处理
- en: Validation of the model is found outside this model, for instance, in controllers
  id: totrans-4333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的验证在模型之外，例如在控制器中
- en: This can be a bad practice depending on the complexity of your business domain.
    Generally speaking, DDD practices require additional efforts to isolate the domain
    from the application logic.
  id: totrans-4334
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于您的业务领域的复杂性，这可能是一种不良实践。一般来说，领域驱动设计（DDD）实践需要额外的努力来将领域与应用程序逻辑隔离开来。
- en: Architecture is always a tradeoff. It is good to note that typical ways of designing
    a Spring application can lead to complicated maintenance somewhere along the road.
  id: totrans-4335
  prefs: []
  type: TYPE_NORMAL
  zh: 架构始终是一种权衡。值得注意的是，设计Spring应用程序的典型方式可能会导致在某个时候出现复杂的维护。
- en: 'How to avoid domain anemia is explained here:'
  id: totrans-4336
  prefs: []
  type: TYPE_NORMAL
  zh: 如何避免领域贫血在这里有解释：
- en: The Service layer is good for application-level abstraction like transaction
    handling, not business logic.
  id: totrans-4337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务层适用于应用级抽象，如事务处理，而不是业务逻辑。
- en: Your domain should always be in a valid state. Leave validation inside the form
    objects using validators or JSR-303's validation annotations.
  id: totrans-4338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的领域应始终处于有效状态。使用验证器或JSR-303的验证注释将验证留在表单对象内。
- en: translate the inputs into meaningful domain objects.
  id: totrans-4339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输入转化为有意义的领域对象。
- en: Think of your data layer in term of repositories with domain queries (refer
    to Spring Data Specification, for example)
  id: totrans-4340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据层视为具有领域查询的存储库（例如参考Spring Data规范）
- en: Decouple your domain logic from the underlying persistence framework
  id: totrans-4341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将领域逻辑与底层持久性框架解耦
- en: Use real objects as much as possible. For instance, manipulate the `FirstName`
    class rather than a string.
  id: totrans-4342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用真实对象。例如，操作`FirstName`类而不是字符串。
- en: 'There is much more to DDD than these simple rules: Entities, value types, Ubiquitous
    Language, Bounded Context, Onion Architecture, and anti corruption layers. I strongly
    encourage you to study these principles on your own. As far as we are concerned,
    with this book we will try to keep in mind the guidelines listed earlier as we
    craft our web application. These concerns will become more familiar to you as
    we advance through this book.'
  id: totrans-4343
  prefs: []
  type: TYPE_NORMAL
  zh: 领域驱动设计比这些简单的规则要复杂得多：实体、值类型、通用语言、有界上下文、洋葱架构和防腐层。我强烈鼓励您自行研究这些原则。就我们而言，通过本书，我们将努力记住前面列出的指导方针，因为我们打造我们的Web应用程序时，这些问题将变得更加熟悉。
- en: Learning from the sources
  id: totrans-4344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码中学习
- en: If you're familiar with Spring, you have probably already landed on Spring's
    website, [http://spring.io](http://spring.io). It is entirely made with Spring
    and the good news is that it is open source.
  id: totrans-4345
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉Spring，您可能已经访问过Spring的网站[http://spring.io](http://spring.io)。它完全由Spring制作，好消息是它是开源的。
- en: 'The code name of the project is sagan. It has numerous interesting features:'
  id: totrans-4346
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的代号是sagan。它有许多有趣的特性：
- en: A gradle multimodule project
  id: totrans-4347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个gradle多模块项目
- en: Security integration
  id: totrans-4348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全集成
- en: Github integration
  id: totrans-4349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Github集成
- en: Elasticsearch integration
  id: totrans-4350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elasticsearch集成
- en: A JavaScript frontend application
  id: totrans-4351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript前端应用程序
- en: The GitHub wiki associated with the project is really detailed and will help
    you get started easily with the project.
  id: totrans-4352
  prefs: []
  type: TYPE_NORMAL
  zh: 与该项目相关的GitHub维基非常详细，将帮助您轻松开始使用该项目。
- en: Note
  id: totrans-4353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Visit the following URL if you''re interested in the Spring''s architecture
    of a real world application:'
  id: totrans-4354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Spring的真实世界应用程序架构感兴趣，请访问以下网址：
- en: '[https://github.com/spring-io/sagan](https://github.com/spring-io/sagan)'
  id: totrans-4355
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/spring-io/sagan](https://github.com/spring-io/sagan)'
- en: Spring MVC 1-0-1
  id: totrans-4356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring MVC 1-0-1
- en: 'In spring MVC, the model is a simple map encapsulated in the `Model` or `ModelAndView`
    classes of Spring MVC. It can come from a database, files, external services,
    and so on. It is up to you to define how to fetch the data and put it into the
    model. The recommended way of interacting with the data layer is through Spring
    Data libraries: Spring Data JPA, Spring Data MongoDB, and so on. There are a dozen
    projects related to Spring Data and I encourage you to take a look at [http://projects.spring.io/spring-data](http://projects.spring.io/spring-data).'
  id: totrans-4357
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC中，模型是Spring MVC的`Model`或`ModelAndView`类中封装的简单映射。它可以来自数据库、文件、外部服务等。由您定义如何获取数据并将其放入模型。与数据层交互的推荐方式是通过Spring
    Data库：Spring Data JPA、Spring Data MongoDB等。有数十个与Spring Data相关的项目，我鼓励您查看[http://projects.spring.io/spring-data](http://projects.spring.io/spring-data)。
- en: The controller side of Spring MVC is handled through the use of the `@Controller`
    annotation. In a web application, the controller's role is to respond to HTTP
    requests. Classes annotated with the `@Controller` annotation will be picked up
    by Spring and given a chance to handle upcoming requests.
  id: totrans-4358
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC的控制器端通过使用`@Controller`注解来处理。在Web应用程序中，控制器的作用是响应HTTP请求。使用`@Controller`注解标记的类将被Spring捕获，并有机会处理即将到来的请求。
- en: Via the `@RequestMapping` annotation, Controllers declare handling specific
    requests based on their HTTP method (`GET` or `POST` methods, for instance) and
    their URLs. The Controller then decides to either write content directly in the
    web response or route the application to a view and inject properties into that
    view.
  id: totrans-4359
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`@RequestMapping`注解，控制器声明处理特定请求，基于它们的HTTP方法（例如`GET`或`POST`方法）和它们的URL。然后控制器决定是直接在Web响应中写入内容，还是将应用程序路由到视图并将属性注入该视图。
- en: A pure RESTful application would choose the first approach and expose a JSON
    or XML representation of the model directly in the HTTP response with the `@ResponseBody`
    annotation. In the case of a web application, this type of architecture is often
    associated with a frontend JavaScript framework such as Backbone.js, AngularJS,
    or React. In this case, the Spring application would then only handle the Model
    layer of the MVC model. We will study this kind of architecture in [Chapter 3](part0147.xhtml#aid-4C62M2
    "Chapter 3. File Upload and Error Handling"), *File Upload and Error Handling*.
  id: totrans-4360
  prefs: []
  type: TYPE_NORMAL
  zh: 一个纯粹的RESTful应用程序将选择第一种方法，并使用`@ResponseBody`注解直接在HTTP响应中公开模型的JSON或XML表示。在Web应用程序的情况下，这种类型的架构通常与前端JavaScript框架（如Backbone.js、AngularJS或React）相关联。在这种情况下，Spring应用程序将仅处理MVC模型的模型层。我们将在[第3章](part0147.xhtml#aid-4C62M2
    "Chapter 3. File Upload and Error Handling")中学习这种类型的架构，*文件上传和错误处理*。
- en: With the second approach, the Model is passed to the View, which is rendered
    by a templating engine and then written to the response.
  id: totrans-4361
  prefs: []
  type: TYPE_NORMAL
  zh: 通过第二种方法，模型被传递到视图，由模板引擎呈现，然后写入响应。
- en: The view is often associated with a templating dialect, which will allow navigation
    inside the model. Popular dialects for templating are JSPs, FreeMarker, or Thymeleaf.
  id: totrans-4362
  prefs: []
  type: TYPE_NORMAL
  zh: 视图通常与模板方言相关联，这将允许在模型内进行导航。用于模板的流行方言包括JSP、FreeMarker或Thymeleaf。
- en: Hybrid approaches may take advantage of the templating engine to interact with
    some aspects of the application and then delegate the view layer to a frontend
    framework.
  id: totrans-4363
  prefs: []
  type: TYPE_NORMAL
  zh: 混合方法可以利用模板引擎与应用程序的某些方面进行交互，然后将视图层委托给前端框架。
- en: Using Thymeleaf
  id: totrans-4364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Thymeleaf
- en: Thymeleaf is a templating engine that gets particular attention from the Spring
    community.
  id: totrans-4365
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf是一个模板引擎，受到Spring社区的特别关注。
- en: Its success is due mostly to its friendly syntax (it almost looks like HTML)
    and the ease with which it can be extended.
  id: totrans-4366
  prefs: []
  type: TYPE_NORMAL
  zh: 它的成功主要归功于其友好的语法（它几乎看起来像HTML）和它可以轻松扩展的特性。
- en: 'Various extensions are available and integrated with Spring Boot:'
  id: totrans-4367
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot有各种可用的扩展和集成：
- en: '| Support | Dependency |'
  id: totrans-4368
  prefs: []
  type: TYPE_TB
  zh: '| 支持 | 依赖 |'
- en: '| --- | --- |'
  id: totrans-4369
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Layouts | `nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect` |'
  id: totrans-4370
  prefs: []
  type: TYPE_TB
  zh: '| 布局 | `nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect` |'
- en: '| HTML5 data-* attributes | `com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute`
    |'
  id: totrans-4371
  prefs: []
  type: TYPE_TB
  zh: '| HTML5 data-* 属性 | `com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute`
    |'
- en: '| Internet Explorer conditional comments | `org.thymeleaf.extras:thymeleaf-extras-conditionalcomments`
    |'
  id: totrans-4372
  prefs: []
  type: TYPE_TB
  zh: '| Internet Explorer条件注释 | `org.thymeleaf.extras:thymeleaf-extras-conditionalcomments`
    |'
- en: '| Support for spring security | `org.thymeleaf.extras:thymeleaf-extras-springsecurity3`
    |'
  id: totrans-4373
  prefs: []
  type: TYPE_TB
  zh: '| 支持spring安全 | `org.thymeleaf.extras:thymeleaf-extras-springsecurity3` |'
- en: A very good tutorial on Thymeleaf's integration with Spring can be found at
    [http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html](http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html).
  id: totrans-4374
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf与Spring集成的非常好的教程可以在[http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html](http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html)找到。
- en: 'Without further ado, let''s add the `spring-boot-starter-thymeleaf` dependency
    to bootstrap the thymeleaf templating engine:'
  id: totrans-4375
  prefs: []
  type: TYPE_NORMAL
  zh: 不多说了，让我们添加`spring-boot-starter-thymeleaf`依赖项来启动thymeleaf模板引擎：
- en: '[PRE481]'
  id: totrans-4376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Our first page
  id: totrans-4377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个页面
- en: 'We will now add the first page to our application. It will be located in `src/main/resources/templates`.
    Let''s call the file `resultPage.html`:'
  id: totrans-4378
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将第一个页面添加到我们的应用程序中。它将位于`src/main/resources/templates`。让我们把文件命名为`resultPage.html`：
- en: '[PRE482]'
  id: totrans-4379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: We can see from the very start that Thymeleaf integrates perfectly with html
    and its syntax almost feels natural.
  id: totrans-4380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一开始就可以看到Thymeleaf与html完美地集成在一起，它的语法几乎感觉自然。
- en: The `th:text` value is put between pipes. It means that all the values inside
    the text will be concatenated.
  id: totrans-4381
  prefs: []
  type: TYPE_NORMAL
  zh: '`th:text`的值放在管道符号之间。这意味着文本中的所有值将被连接起来。'
- en: It might seem a bit awkward at first, but in practice, text will rarely be hardcoded
    in our pages; so, Thymeleaf makes an opinionated design decision here.
  id: totrans-4382
  prefs: []
  type: TYPE_NORMAL
  zh: 起初可能有点尴尬，但实际上，在我们的页面中很少会硬编码文本；因此，Thymeleaf在这里做出了一个有见地的设计决定。
- en: 'Thymeleaf has a big advantage for web designers: everything that is dynamic
    inside the templates can fall back to a default value in the case where they are
    opened without the server running. Resource URLs can be specified relatively and
    every markup can contain placeholders. In our previous example, the text "Hello
    html" would not be displayed when the view is rendered in the context of our application,
    but it will if the file is opened directly with a web browser.'
  id: totrans-4383
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf对于网页设计师有一个很大的优势：模板中的所有动态内容都可以在没有运行服务器的情况下回退到默认值。资源URL可以相对指定，每个标记都可以包含占位符。在我们之前的例子中，当视图在我们的应用程序的上下文中呈现时，文本"Hello
    html"将不会被显示，但如果文件直接在Web浏览器中打开，它将会被显示。
- en: 'To speed up development, add this property to your `application.properties`
    file:'
  id: totrans-4384
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快开发速度，将这个属性添加到你的`application.properties`文件中：
- en: '[PRE483]'
  id: totrans-4385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: This will disable the view cache and cause templates to reload every time they
    are accessed.
  id: totrans-4386
  prefs: []
  type: TYPE_NORMAL
  zh: 这将禁用视图缓存，并导致模板在每次访问时重新加载。
- en: Of course, this setting will need to be disabled when we go into production.
    We will see that in [Chapter 7](part0187.xhtml#aid-5IAP61 "Chapter 7. Optimizing
    Your Requests"), *Optimizing Your Requests*.
  id: totrans-4387
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当我们进入生产阶段时，这个设置将需要被禁用。我们将在[第7章](part0187.xhtml#aid-5IAP61 "第7章 优化您的请求")中看到这一点，*优化您的请求*。
- en: Tip
  id: totrans-4388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Reloading the views**'
  id: totrans-4389
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新加载视图**'
- en: With the cache disabled, simply save your view with eclipse or use the `Build
    > Make Project` action in IntelliJ to refresh the views after a change.
  id: totrans-4390
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用缓存后，只需在eclipse中保存你的视图，或者在IntelliJ中使用`Build > Make Project`操作来在更改后刷新视图。
- en: Lastly, we will need to modify our `HelloController` class. Instead of displaying
    plain text, it must now route to our freshly created view. To accomplish this,
    we will remove the `@ResponseBody` annotation. Doing so and still returning a
    string will tell Spring MVC to map this string to a view name instead of displaying
    a particular model directly in the response.
  id: totrans-4391
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要修改我们的`HelloController`类。现在，它不再显示纯文本，而是必须路由到我们新创建的视图。为了实现这一点，我们将删除`@ResponseBody`注解。这样做并且仍然返回一个字符串将告诉Spring
    MVC将这个字符串映射到一个视图名称，而不是直接在响应中显示特定的模型。
- en: 'Here is what our controller now looks like:'
  id: totrans-4392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器现在看起来像这样：
- en: '[PRE484]'
  id: totrans-4393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: In this example, the controller will redirect the user to the view name `resultPage`.
    The `ViewResolver` interface will then associate this name with our page.
  id: totrans-4394
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，控制器将重定向用户到视图名称`resultPage`。`ViewResolver`接口将把这个名称与我们的页面关联起来。
- en: Let's launch our application again and go to `http://localhost:8080`.
  id: totrans-4395
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次启动我们的应用程序，然后转到`http://localhost:8080`。
- en: 'You will see the following page:'
  id: totrans-4396
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下页面：
- en: '![Our first page](img/image00929.jpeg)'
  id: totrans-4397
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个页面](img/image00929.jpeg)'
- en: Spring MVC architecture
  id: totrans-4398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring MVC架构
- en: Let's take a step back from this spectacular new "Hello World" and try to understand
    what happened inside our web application. To do this, we will retrace the journey
    of the HTTP request our browser sent and the response it got from the server.
  id: totrans-4399
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个令人惊叹的新的"Hello World"中退一步，试着理解我们的Web应用程序内部发生了什么。为了做到这一点，我们将追溯浏览器发送的HTTP请求的旅程，以及它从服务器得到的响应。
- en: DispatcherServlet
  id: totrans-4400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DispatcherServlet
- en: 'The entry point of every Spring web application is the `DispatcherServlet`.
    The following figure illustrates the Dispatcher Servlet architecture:'
  id: totrans-4401
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Spring Web应用程序的入口点是`DispatcherServlet`。下图说明了Dispatcher Servlet的架构：
- en: '![DispatcherServlet](img/image00930.jpeg)'
  id: totrans-4402
  prefs: []
  type: TYPE_IMG
  zh: '![DispatcherServlet](img/image00930.jpeg)'
- en: This is a classical `HttpServlet` class that dispatches HTTP requests to HandlerMapping.
    A **HandlerMapping** is an association of resources (URLs) and Controllers.
  id: totrans-4403
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个经典的`HttpServlet`类，它将HTTP请求分派给HandlerMapping。**HandlerMapping**是资源（URL）和控制器的关联。
- en: The appropriate methods—those annotated with `@RequestMapping` annotation—are
    then called on the Controller. In this method, the controller sets the model data
    and returns the view name to the dispatcher.
  id: totrans-4404
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在Controller上调用带有`@RequestMapping`注解的适当方法。在这个方法中，控制器设置模型数据并返回视图名称给分派程序。
- en: The `DispatcherServlet` will then interrogate the `ViewResolver` interface to
    find the corresponding implementation of the view.
  id: totrans-4405
  prefs: []
  type: TYPE_NORMAL
  zh: '`DispatcherServlet`然后将询问`ViewResolver`接口以找到视图的相应实现。'
- en: In our case, the `ThymeleafAutoConfiguration` class has set up the view resolver
    for us.
  id: totrans-4406
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，`ThymeleafAutoConfiguration`类已经为我们设置了视图解析器。
- en: You can see in the `ThymeleafProperties` class that the default prefix for our
    views is `classpath:/templates/` the default suffix is `.html`.
  id: totrans-4407
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ThymeleafProperties`类中看到，我们视图的默认前缀是`classpath:/templates/`，默认后缀是`.html`。
- en: This means that, given the view name `resultPage`, the view resolver will look
    in the templates directory of our classpath, looking for a file called `resultPage.html`.
  id: totrans-4408
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，鉴于视图名称`resultPage`，视图解析器将在我们类路径的模板目录中查找名为`resultPage.html`的文件。
- en: In our application our `ViewResolver` interface is static, but more advanced
    implementation can return different results given the request headers or the user's
    locale.
  id: totrans-4409
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，`ViewResolver`接口是静态的，但更高级的实现可以根据请求标头或用户的区域设置返回不同的结果。
- en: The view will finally be rendered and the result written to the response.
  id: totrans-4410
  prefs: []
  type: TYPE_NORMAL
  zh: 视图最终将被呈现，并将结果写入响应。
- en: Passing data to the view
  id: totrans-4411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据传递给视图
- en: Our first page is completely static; it does not really take advantage of the
    power of Spring MVC. Let's spice things up a little bit. What if the "Hello World"
    string, instead of being hardcoded, came from the server?
  id: totrans-4412
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个页面完全是静态的；它实际上并没有充分利用Spring MVC的强大功能。让我们稍微调整一下。如果“Hello World”字符串不是硬编码的，而是来自服务器呢？
- en: 'It would still be a lame "hello world" you say? Yes, but it will open up many
    more possibilities. Let''s change our `resultPage.html` file to display a message
    coming from the model:'
  id: totrans-4413
  prefs: []
  type: TYPE_NORMAL
  zh: 你说这仍然是一个无聊的“hello world”？是的，但它将开启更多的可能性。让我们修改我们的`resultPage.html`文件，以显示来自模型的消息：
- en: '[PRE485]'
  id: totrans-4414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: 'Then, let''s modify our controller so it puts this message inside this model:'
  id: totrans-4415
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们修改我们的控制器，以便将此消息放入此模型中：
- en: '[PRE486]'
  id: totrans-4416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: I know, the suspense is killing you! Let's see what `http://localhost:8080`
    looks like.
  id: totrans-4417
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，悬念让你着急！让我们看看`http://localhost:8080`是什么样子。
- en: '![Passing data to the view](img/image00931.jpeg)'
  id: totrans-4418
  prefs: []
  type: TYPE_IMG
  zh: '![将数据传递给视图](img/image00931.jpeg)'
- en: The first thing to note is that we passed a new argument to the controller's
    method and that the `DispatcherServlet` provided the correct object for us. There
    are, in fact, many objects that can be injected into the controller's methods
    such as `HttpRequest` or `HttpResponse`, the `Locale`, the `TimeZone`, and the
    `Principal`, which represent an authenticated user. The full list of such objects
    is available in the documentation, which can be found at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments).
  id: totrans-4419
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，我们向控制器的方法传递了一个新的参数，`DispatcherServlet`为我们提供了正确的对象。实际上，控制器的方法可以注入许多对象，例如`HttpRequest`或`HttpResponse`，`Locale`，`TimeZone`和`Principal`，代表经过身份验证的用户。此类对象的完整列表可在文档中找到，网址为[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments)。
- en: Spring Expression Language
  id: totrans-4420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring表达式语言
- en: When using the `${}` syntax, you are in fact using **Spring Expression Language**
    (**SpEL**). There are several variants of EL available in the wild; SpEl is one
    of the most powerful variants.
  id: totrans-4421
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`${}`语法时，实际上使用的是**Spring表达式语言**（**SpEL**）。在野外有几种变体的EL可用；SpEl是最强大的变体之一。
- en: 'Here is an overview of its main features:'
  id: totrans-4422
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其主要特点的概述：
- en: '| Feature | Syntax | Explanation |'
  id: totrans-4423
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 语法 | 解释 |'
- en: '| --- | --- | --- |'
  id: totrans-4424
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Accessing a list element | `list[0]` |   |'
  id: totrans-4425
  prefs: []
  type: TYPE_TB
  zh: '| 访问列表元素 | `list[0]` |   |'
- en: '| Accessing a map entry | `map[key]` |   |'
  id: totrans-4426
  prefs: []
  type: TYPE_TB
  zh: '| 访问映射条目 | `map[key]` |   |'
- en: '| Ternary operator | `condition ? ''yes'' : ''no''` |   |'
  id: totrans-4427
  prefs: []
  type: TYPE_TB
  zh: '| 三元运算符 | `condition ? ''yes'' : ''no''` |   |'
- en: '| Elvis operator | `person ?: default` | Returns `default` if person''s value
    is null |'
  id: totrans-4428
  prefs: []
  type: TYPE_TB
  zh: '| Elvis运算符 | `person ?: default` | 如果person的值为null，则返回default |'
- en: '| Safe navigation | `person?.name` | Returns `null` if person or her name is
    null |'
  id: totrans-4429
  prefs: []
  type: TYPE_TB
  zh: '| 安全导航 | `person?.name` | 如果person或她的姓名为null，则返回null |'
- en: '| Templating | `''Your name is #{person.name}''` | Injects values into a string
    |'
  id: totrans-4430
  prefs: []
  type: TYPE_TB
  zh: '| 模板化 | `''Your name is #{person.name}''` | 将值注入到字符串中 |'
- en: '| Projections | `${persons.![name]}` | Extracts the names of all the persons
    and puts them into a list |'
  id: totrans-4431
  prefs: []
  type: TYPE_TB
  zh: '| 投影 | `${persons.![name]}` | 提取所有人的姓名并将它们放入列表中 |'
- en: '| Selection | `persons.?[name == ''Bob'']''` | Retrieves the person whose name
    is Bob inside a list |'
  id: totrans-4432
  prefs: []
  type: TYPE_TB
  zh: '| 选择 | `persons.?[name == ''Bob'']''` | 从列表中检索姓名为Bob的人 |'
- en: '| Function call | `person.sayHello()` |   |'
  id: totrans-4433
  prefs: []
  type: TYPE_TB
  zh: '| 函数调用 | `person.sayHello()` |   |'
- en: Note
  id: totrans-4434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For complete reference, check the manual at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html).
  id: totrans-4435
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整参考，请查看[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html)的手册。
- en: The SpEl usage is not limited to views. You can also use it in various places
    inside the Spring framework, for instance, when injecting properties inside beans
    with the `@Value` annotation.
  id: totrans-4436
  prefs: []
  type: TYPE_NORMAL
  zh: SpEl的用法不仅限于视图。您还可以在Spring框架内的各个地方使用它，例如，在使用`@Value`注解将属性注入到bean中时。
- en: Getting data with a request parameter
  id: totrans-4437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用请求参数获取数据
- en: We are able to display data coming from the server inside the view. However,
    what if we wanted to get input from the user? With the HTTP protocol, there are
    multiple ways to do this. The simplest way is to pass a query parameter to our
    URL.
  id: totrans-4438
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在视图中显示来自服务器的数据。但是，如果我们想要从用户那里获取输入怎么办？使用HTTP协议，有多种方法可以做到这一点。最简单的方法是将查询参数传递给我们的URL。
- en: Note
  id: totrans-4439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Query parameters**'
  id: totrans-4440
  prefs: []
  type: TYPE_NORMAL
  zh: '**查询参数**'
- en: You certainly know query parameters. They are found after the `?` character
    in a URL. They consist of a list of name and values separated by the & symbol
    (Ampersand), for example, `page?var1=value1&var2=value2`.
  id: totrans-4441
  prefs: []
  type: TYPE_NORMAL
  zh: 您肯定知道查询参数。它们在URL中的`?`字符之后找到。它们由名称和值的列表组成，由&符号（和号）分隔，例如，`page?var1=value1&var2=value2`。
- en: 'We can leverage this technique to ask our user for their name. Let''s modify
    our `HelloController` class again:'
  id: totrans-4442
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这种技术来询问用户的姓名。让我们再次修改我们的`HelloController`类：
- en: '[PRE487]'
  id: totrans-4443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: 'If we navigate to `localhost:8080/?name=Geoffroy`, we can see the following:'
  id: totrans-4444
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到`localhost:8080/?name=Geoffroy`，我们可以看到以下内容：
- en: '![Getting data with a request parameter](img/image00932.jpeg)'
  id: totrans-4445
  prefs: []
  type: TYPE_IMG
  zh: '![使用请求参数获取数据](img/image00932.jpeg)'
- en: By default, the request parameter is mandatory. This means that if we were to
    navigate to `localhost:8080`, we would see an error message.
  id: totrans-4446
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，请求参数是必需的。这意味着如果我们导航到`localhost:8080`，我们将看到错误消息。
- en: 'Looking at the `@RequestParam` code, we can see that in addition to the value
    parameter, there are two other attributes possible: `required` and `defaultValue`.'
  id: totrans-4447
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`@RequestParam`代码，我们可以看到除了值参数之外，还有两个可能的属性：`required`和`defaultValue`。
- en: 'Therefore, we can change our code and specify a default value for our parameter
    or indicate that it is not required:'
  id: totrans-4448
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以更改我们的代码，并为我们的参数指定默认值，或指示它不是必需的：
- en: '[PRE488]'
  id: totrans-4449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: Tip
  id: totrans-4450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In Java 8, it is possible not to specify the value parameter. In that case,
    the name of the annotated method parameter will be used.
  id: totrans-4451
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 8中，可以不指定值参数。在这种情况下，将使用带注释的方法参数的名称。
- en: Enough Hello Worlds, let's fetch tweets!
  id: totrans-4452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 够了，Hello World，让我们获取推文！
- en: All right, the name of the book isn't "Mastering Hello Worlds", after all. With
    Spring, interrogating Twitter's API is really easy.
  id: totrans-4453
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这本书的名字毕竟不是“精通Hello Worlds”。使用Spring，查询Twitter的API真的很容易。
- en: Registering your application
  id: totrans-4454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册您的应用程序
- en: Before you start, you have to register your application in the Twitter developer
    console.
  id: totrans-4455
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您必须在Twitter开发者控制台中注册您的应用程序。
- en: Go to [https://apps.twitter.com](https://apps.twitter.com) and create a new
    application.
  id: totrans-4456
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://apps.twitter.com](https://apps.twitter.com)并创建一个新应用程序。
- en: Give it the name you please. Under the website and Callback URL sections, just
    enter `http://127.0.0.1:8080`. This will allow you to test your application in
    development on your local machine.
  id: totrans-4457
  prefs: []
  type: TYPE_NORMAL
  zh: 随便给它起个名字。在网站和回调URL部分，只需输入`http://127.0.0.1:8080`。这将允许您在本地开发环境中测试应用程序。
- en: '![Registering your application](img/image00933.jpeg)'
  id: totrans-4458
  prefs: []
  type: TYPE_IMG
  zh: '![注册您的应用程序](img/image00933.jpeg)'
- en: 'Now, navigate to the keys, access the token, and copy the **Consumer Key**
    and the **Consumer Secret**. We will use this in a moment. Take a look at the
    following screenshot:'
  id: totrans-4459
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到密钥，访问令牌，并复制**Consumer Key**和**Consumer Secret**。我们马上会用到这个。看一下下面的屏幕截图：
- en: '![Registering your application](img/image00934.jpeg)'
  id: totrans-4460
  prefs: []
  type: TYPE_IMG
  zh: '![注册您的应用程序](img/image00934.jpeg)'
- en: By default, our application has read only permissions. This will be enough for
    our application, but you can tweak it if you wish.
  id: totrans-4461
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们的应用程序具有只读权限。这对我们的应用程序足够了，但如果您愿意，可以进行调整。
- en: Setting up Spring Social Twitter
  id: totrans-4462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Spring Social Twitter
- en: 'We will add the following dependency to our `build.gradle` file:'
  id: totrans-4463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的`build.gradle`文件中添加以下依赖项：
- en: '[PRE489]'
  id: totrans-4464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Note
  id: totrans-4465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Spring Social** is a set of projects providing access to the public APIs
    of various social networks. Out of the box, Spring Boot provides integration with
    Twitter, Facebook, and LinkedIn. Spring Social includes about 30 projects overall,
    which can be found at [http://projects.spring.io/spring-social/](http://projects.spring.io/spring-social/).'
  id: totrans-4466
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Social**是一组项目，提供对各种社交网络的公共API的访问。Spring Boot默认提供与Twitter、Facebook和LinkedIn的集成。Spring
    Social总共包括约30个项目，可以在[http://projects.spring.io/spring-social/](http://projects.spring.io/spring-social/)找到。'
- en: 'Add the following two lines to the `application.properties`:'
  id: totrans-4467
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下两行添加到`application.properties`中：
- en: '[PRE490]'
  id: totrans-4468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: These are the keys associated with the application we just created.
  id: totrans-4469
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与我们刚创建的应用程序相关联的密钥。
- en: You will learn more about OAuth in [Chapter 5](part0168.xhtml#aid-506UG2 "Chapter 5. Securing
    Your Application"), *Securing Your Application*. For now, we will just use those
    credentials to issue requests to Twitter's API on behalf of our application.
  id: totrans-4470
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[第5章](part0168.xhtml#aid-506UG2 "第5章。保护您的应用程序")中了解有关OAuth的更多信息，*保护您的应用程序*。目前，我们将只使用这些凭据代表我们的应用程序向Twitter的API发出请求。
- en: Accessing Twitter
  id: totrans-4471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问Twitter
- en: 'We can now use Twitter in our controller. Let''s change its name to `TweetController`
    as a variable to reflect its new responsibility in a better manner:'
  id: totrans-4472
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们的控制器中使用Twitter。让我们将其名称更改为`TweetController`，以便更好地反映其新的责任：
- en: '[PRE491]'
  id: totrans-4473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: 'As you can see, the code searches for tweets matching the request parameter.
    If it all goes well, you will see the text of the first one being displayed on
    your screen:'
  id: totrans-4474
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该代码搜索与请求参数匹配的推文。如果一切顺利，您将在屏幕上看到第一条推文的文本被显示出来：
- en: '![Accessing Twitter](img/image00935.jpeg)'
  id: totrans-4475
  prefs: []
  type: TYPE_IMG
  zh: '![访问Twitter](img/image00935.jpeg)'
- en: Of course, if the search doesn't yield any result, our clumsy code will fail
    with an `ArrayOutOfBoundException`. So, do not hesitate to tweet to solve the
    problem!
  id: totrans-4476
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果搜索没有结果，我们笨拙的代码将会出现`ArrayOutOfBoundException`错误。所以，不要犹豫，发推文来解决问题！
- en: 'What if we wanted to display a list of tweets? Let''s modify the `resultPage.html`
    file:'
  id: totrans-4477
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要显示一系列推文怎么办？让我们修改`resultPage.html`文件：
- en: '[PRE492]'
  id: totrans-4478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: Note
  id: totrans-4479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `th:each` is a tag defined in Thymeleaf that allows it to iterate over a
    collection and assign each value to a variable inside a loop.
  id: totrans-4480
  prefs: []
  type: TYPE_NORMAL
  zh: '`th:each`是Thymeleaf中定义的一个标签，允许它遍历集合并将每个值分配给循环内的变量。'
- en: 'We will need to change our controller as well:'
  id: totrans-4481
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更改我们的控制器：
- en: '[PRE493]'
  id: totrans-4482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: 'Note that we are using Java 8 streams to collect only the messages from the
    tweets. The `Tweet` class contains many other attributes such as the sender, the
    retweet count, and so on. However, we will keep it simple for now, as shown in
    the following screenshot:'
  id: totrans-4483
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用Java 8流来仅收集推文中的消息。`Tweet`类包含许多其他属性，例如发送者、转发计数等。但是，目前我们将保持简单，如下面的屏幕截图所示：
- en: '![Accessing Twitter](img/image00936.jpeg)'
  id: totrans-4484
  prefs: []
  type: TYPE_IMG
  zh: '![访问Twitter](img/image00936.jpeg)'
- en: Java 8 streams and lambdas
  id: totrans-4485
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 8流和lambda
- en: You might not be familiar with lambdas yet. In Java 8, every collection gets
    a default method `stream()`, which gives access to functional-style operations.
  id: totrans-4486
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还不熟悉lambda。在Java 8中，每个集合都有一个默认方法`stream()`，它可以访问函数式操作。
- en: These operations can be either intermediate operations returning a stream, and
    thus allowing chaining, or a terminal operation that returns a value.
  id: totrans-4487
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作可以是返回流的中间操作，从而允许链接，也可以是返回值的终端操作。
- en: 'The most famous intermediate operations are as follows:'
  id: totrans-4488
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的中间操作如下：
- en: '`map`: This applies a method to every element of a list and returns the list
    of results'
  id: totrans-4489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map`：这将对列表中的每个元素应用一个方法，并返回结果列表'
- en: '`filter`: This returns a list of every element matching a predicate'
  id: totrans-4490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter`：这返回与谓词匹配的每个元素的列表'
- en: '`reduce`: This projects a list into a single value using an operation and an
    accumulator'
  id: totrans-4491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce`：这使用操作和累加器将列表投影到单个值'
- en: Lambdas are shorthand syntax for function expressions. They can be coerced into
    a Single Abstract Method, an interface with only one function.
  id: totrans-4492
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda是函数表达式的简写语法。它们可以被强制转换为Single Abstract Method，即只有一个函数的接口。
- en: 'For instance, you can implement the `Comparator` interface as follows:'
  id: totrans-4493
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以按照以下方式实现`Comparator`接口：
- en: '[PRE494]'
  id: totrans-4494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: Within lambdas, the return keyword is implicitly its last expression.
  id: totrans-4495
  prefs: []
  type: TYPE_NORMAL
  zh: 在lambda中，return关键字隐式地是其最后的表达式。
- en: The double colon operator we used earlier is a shortcut to get a reference to
    a function on a class,
  id: totrans-4496
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用的双冒号运算符是获取类上函数引用的快捷方式，
- en: '[PRE495]'
  id: totrans-4497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: 'The preceding is equivalent to the following:'
  id: totrans-4498
  prefs: []
  type: TYPE_NORMAL
  zh: 上述等同于以下内容：
- en: '[PRE496]'
  id: totrans-4499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: The `collect` method allows us to call a terminal operation. The `Collectors`
    class is a set of terminal operations that will put results into lists, sets,
    or maps, allowing grouping, joining, and so on.
  id: totrans-4500
  prefs: []
  type: TYPE_NORMAL
  zh: '`collect`方法允许我们调用终端操作。`Collectors`类是一组终端操作，它将结果放入列表、集合或映射中，允许分组、连接等。'
- en: Calling the `collect(Collectors.toList())` method will produce a list with every
    element within the stream; in our case, the tweet names.
  id: totrans-4501
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`collect(Collectors.toList())`方法将产生一个包含流中每个元素的列表；在我们的例子中，是推文名称。
- en: Material design with WebJars
  id: totrans-4502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WebJars的Material设计
- en: Our application is already great but it seriously leaves something to be desired
    in terms of aesthetics. You may have heard of material design. It is Google's
    take on flat design.
  id: totrans-4503
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序已经很棒了，但在美学方面确实还有些不足。您可能听说过Material设计。这是谷歌对扁平设计的看法。
- en: We will use Materialize ([http://materializecss.com](http://materializecss.com)),
    a great looking responsive CSS and JavaScript library, just like Bootstrap.
  id: totrans-4504
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Materialize ([http://materializecss.com](http://materializecss.com))，一个外观极佳的响应式CSS和JavaScript库，就像Bootstrap一样。
- en: '![Material design with WebJars](img/image00937.jpeg)'
  id: totrans-4505
  prefs: []
  type: TYPE_IMG
  zh: '![使用WebJars的Material设计](img/image00937.jpeg)'
- en: 'We will now get to use WebJars. Add jQuery and Materialize CSS to our dependencies:'
  id: totrans-4506
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用WebJars。将jQuery和Materialize CSS添加到我们的依赖项中：
- en: '[PRE497]'
  id: totrans-4507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: The way a WebJar is organized is completely standardized. You will find the
    JS and CSS files of any library in `/webjars/{lib}/{version}/*.js`.
  id: totrans-4508
  prefs: []
  type: TYPE_NORMAL
  zh: WebJar的组织方式是完全标准化的。您将在`/webjars/{lib}/{version}/*.js`中找到任何库的JS和CSS文件。
- en: 'For instance, to add jQuery to our page, the following to a web page:'
  id: totrans-4509
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将jQuery添加到我们的页面，可以在网页中添加以下内容：
- en: '[PRE498]'
  id: totrans-4510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: 'Let''s modify our controller so that it gives us a list of all tweet objects
    instead of simple text:'
  id: totrans-4511
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们的控制器，以便它给我们一个所有推文对象的列表，而不是简单的文本：
- en: '[PRE499]'
  id: totrans-4512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: 'Let''s include materialize CSS in our view:'
  id: totrans-4513
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在视图中包含materialize CSS：
- en: '[PRE500]'
  id: totrans-4514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: The result already looks way better!
  id: totrans-4515
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来已经好多了！
- en: '![Material design with WebJars](img/image00938.jpeg)'
  id: totrans-4516
  prefs: []
  type: TYPE_IMG
  zh: '![使用WebJars的Material设计](img/image00938.jpeg)'
- en: Using layouts
  id: totrans-4517
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用布局
- en: The last thing we want to do is to put the reusable chunks of our UI into templates.
    To do this, we will use the `thymeleaf-layout-dialect` dependency, which is included
    in the `spring-boot-starter-thymeleaf` dependency of our project.
  id: totrans-4518
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的最后一件事是将我们的UI的可重用部分放入模板中。为此，我们将使用`thymeleaf-layout-dialect`依赖项，该依赖项包含在我们项目的`spring-boot-starter-thymeleaf`依赖项中。
- en: 'We will create a new file called `default.html` in `src/main/resources/templates/layout`.
    It will contain the code we will repeat from page to page:'
  id: totrans-4519
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`src/main/resources/templates/layout`中创建一个名为`default.html`的新文件。它将包含我们将从页面到页面重复的代码：
- en: '[PRE501]'
  id: totrans-4520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: 'We will now modify the `resultPage.html` file so it uses the layout, which
    will simplify its contents:'
  id: totrans-4521
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将修改`resultPage.html`文件，使其使用布局，这将简化其内容：
- en: '[PRE502]'
  id: totrans-4522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: The `layout:decorator="layout/default"` will indicate where our layout can be
    found. We can then inject content into the different `layout:fragment` sections
    of the layout. Note that each template are valid HTML files. You can also override
    the title very easily.
  id: totrans-4523
  prefs: []
  type: TYPE_NORMAL
  zh: '`layout:decorator="layout/default"`将指示我们的布局的位置。然后我们可以将内容注入到布局的不同`layout:fragment`部分中。请注意，每个模板都是有效的HTML文件。您也可以非常容易地覆盖标题。'
- en: Navigation
  id: totrans-4524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航
- en: We have a nice little tweet display application, but how are our users supposed
    to figure out that they need to supply a "search" request parameter?
  id: totrans-4525
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个很好的推文显示应用程序，但是我们的用户应该如何找出他们需要提供一个“搜索”请求参数呢？
- en: It would be nice if we added a little form to our application.
  id: totrans-4526
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为我们的应用程序添加一个小表单会很好。
- en: 'Let''s do something like this:'
  id: totrans-4527
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些类似这样的事情：
- en: '![Navigation](img/image00939.jpeg)'
  id: totrans-4528
  prefs: []
  type: TYPE_IMG
  zh: '![导航](img/image00939.jpeg)'
- en: 'First, we need to modify our `TweetController` to add a second view to our
    application. The search page will be available directly at the root of our application
    and the result page when hit enter in the `search` field:'
  id: totrans-4529
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要修改我们的`TweetController`，以在我们的应用程序中添加第二个视图。搜索页面将直接在我们的应用程序的根目录下可用，当在`search`字段中按下回车时，结果页面将可用：
- en: '[PRE503]'
  id: totrans-4530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: 'We will add another page to the `templates` folder called the `searchPage.html`
    file. It will contain a simple form, which will pass the search term to the result
    page via the `get` method:'
  id: totrans-4531
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`templates`文件夹中添加另一个页面，名为`searchPage.html`文件。它将包含一个简单的表单，通过`get`方法将搜索词传递到结果页面：
- en: '[PRE504]'
  id: totrans-4532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: This is very simple HTML and it works perfectly. You can try it now.
  id: totrans-4533
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常简单的HTML，它完美地工作。您现在可以尝试一下。
- en: What if we wanted to disallow some search result? Let's say we want to display
    an error message if the user types in `struts`.
  id: totrans-4534
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要禁止某些搜索结果怎么办？假设我们想要在用户输入`struts`时显示错误消息。
- en: The best way to achieve this would be to modify the form to post the data. In
    the controller, we can then intercept what is posted and implement this business
    rule accordingly.
  id: totrans-4535
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的最佳方法是修改表单以发布数据。在控制器中，我们可以拦截所发布的内容，并相应地实现这个业务规则。
- en: 'First, we need to change the form in the `searchPage`, which is as follows:'
  id: totrans-4536
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要更改`searchPage`中的表单，如下所示：
- en: '[PRE505]'
  id: totrans-4537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: 'Now, we change the form to this:'
  id: totrans-4538
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将表单更改为：
- en: '[PRE506]'
  id: totrans-4539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: 'We also need to handle this post on the server. Add this method to the `TweetController`:'
  id: totrans-4540
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在服务器上处理这个发布。将这个方法添加到`TweetController`中：
- en: '[PRE507]'
  id: totrans-4541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: 'There are several novelties here:'
  id: totrans-4542
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个新奇之处：
- en: In the request mapping annotation, we specify the HTTP method we want to handle,
    that is, `POST`.
  id: totrans-4543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在请求映射注解中，我们指定了要处理的HTTP方法，即`POST`。
- en: We inject two attributes directly as method parameters. They are the request
    and `RedirectAttributes`.
  id: totrans-4544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们直接将两个属性作为方法参数注入。它们是请求和`RedirectAttributes`。
- en: We retrieve the value posted on the request and pass it on to the next view.
  id: totrans-4545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们检索请求上发布的值，并将其传递给下一个视图。
- en: Instead of returning the name of the view, we make a redirection to a URL.
  id: totrans-4546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不再返回视图的名称，而是重定向到一个URL。
- en: The `RedirectAttributes` is a Spring model that will be specifically used to
    propagate values in a redirect scenario.
  id: totrans-4547
  prefs: []
  type: TYPE_NORMAL
  zh: '`RedirectAttributes`是一个Spring模型，将专门用于在重定向场景中传播值。'
- en: Note
  id: totrans-4548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Redirect/Forward** are classical options in the context of a Java web application.
    They both change the view that is displayed on the user''s browser. The difference
    is that `Redirect` will send a 302 header that will trigger navigation inside
    the browser, whereas `Forward` will not cause the URL to change. In Spring MVC,
    you can use either option simply by prefixing your method return strings with
    `redirect:` or `forward:`. In both cases, the string you return will not be resolved
    to a view like we saw earlier, but will instead trigger navigation to a specific
    URL.'
  id: totrans-4549
  prefs: []
  type: TYPE_NORMAL
  zh: '**重定向/转发**是Java Web应用程序上下文中的经典选项。它们都会改变用户浏览器上显示的视图。不同之处在于`Redirect`将发送一个触发浏览器内导航的302标头，而`Forward`不会导致URL更改。在Spring
    MVC中，您可以通过简单地在方法返回字符串前加上`redirect:`或`forward:`来使用任一选项。在这两种情况下，您返回的字符串不会像我们之前看到的那样解析为视图，而是会触发导航到特定的URL。'
- en: The preceding example is a bit contrived, and we will see smarter form handling
    in the next chapter. If you put a breakpoint in the `postSearch` method, you will
    see that it will be called right after a post in our form.
  id: totrans-4550
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子有点牵强，我们将在下一章中看到更智能的表单处理。如果您在`postSearch`方法中设置断点，您将看到它将在我们的表单发布后立即被调用。
- en: So what about the error message?
  id: totrans-4551
  prefs: []
  type: TYPE_NORMAL
  zh: 那么错误消息呢？
- en: 'Let''s change the `postSearch` method:'
  id: totrans-4552
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改`postSearch`方法：
- en: '[PRE508]'
  id: totrans-4553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: If the user's search terms contain "struts", we redirect them to the `searchPage`
    and add a little error message using flash attributes.
  id: totrans-4554
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户的搜索词包含"struts"，我们将重定向他们到`searchPage`并使用flash属性添加一条小错误消息。
- en: These special kinds of attributes live only for the time of a request and will
    disappear when the page is refreshed. This is very useful when we use the `POST-REDIRECT-GET`
    pattern, as we just did.
  id: totrans-4555
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特殊类型的属性仅在请求的时间内存在，并且在刷新页面时会消失。当我们使用`POST-REDIRECT-GET`模式时，这是非常有用的，就像我们刚才做的那样。
- en: 'We will need to display this message in the `searchPage` result:'
  id: totrans-4556
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`searchPage`结果中显示这条消息：
- en: '[PRE509]'
  id: totrans-4557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: 'Now, if users try to search for "struts2" tweets, they will get a useful and
    appropriate answer:'
  id: totrans-4558
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果用户尝试搜索"struts2"的推文，他们将得到一个有用且合适的答案：
- en: '![Navigation](img/image00940.jpeg)'
  id: totrans-4559
  prefs: []
  type: TYPE_IMG
  zh: '![导航](img/image00940.jpeg)'
- en: The check point
  id: totrans-4560
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: 'At the end of this chapter, you should have one controller, the `TweetController`,
    handling the search and the untouched generated configuration class, `MasterSpringMvcApplication`,
    in the `src/main/java` directory:'
  id: totrans-4561
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该有一个控制器，`TweetController`，处理搜索和未经修改的生成配置类`MasterSpringMvcApplication`，在`src/main/java`目录中：
- en: '![The check point](img/image00941.jpeg)'
  id: totrans-4562
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00941.jpeg)'
- en: In the `src/main/resources` directory, you should have one default layout and
    two pages using it.
  id: totrans-4563
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/resources`目录中，您应该有一个默认布局和两个使用它的页面。
- en: 'In the `application.properties` file, we added the Twitter application credentials
    as well as a property telling Spring not to cache the templates to ease development:'
  id: totrans-4564
  prefs: []
  type: TYPE_NORMAL
  zh: 在`application.properties`文件中，我们添加了Twitter应用程序凭据，以及一个属性告诉Spring不要缓存模板以便开发：
- en: '![The check point](img/image00942.jpeg)'
  id: totrans-4565
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00942.jpeg)'
- en: Summary
  id: totrans-4566
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what it takes to make a good MVC architecture.
    We saw some of the inner workings of Spring MVC and used Spring Social Twitter
    with very little configuration. We can now design a beautiful web application,
    thanks to WebJars.
  id: totrans-4567
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了构建良好的MVC架构需要什么。我们看到了Spring MVC的一些内部工作原理，并且使用了Spring Social Twitter，几乎没有配置。现在，我们可以设计一个美丽的Web应用程序，这要归功于WebJars。
- en: In the next chapter, we will ask the user to fill in their profile, so that
    we can fetch tweets they might like automatically. This will give you the opportunity
    to learn more about forms, formatting, validation, and internationalization.
  id: totrans-4568
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将要求用户填写他们的个人资料，以便我们可以自动获取他们可能喜欢的推文。这将让您有机会了解更多关于表单、格式化、验证和国际化的知识。
- en: Chapter 2. Handling Forms and Complex URL Mapping
  id: totrans-4569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。处理表单和复杂的URL映射
- en: Our application, as beautiful as it looks, would benefit from more informations
    about our users.
  id: totrans-4570
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序，尽管看起来很漂亮，但会受益于更多关于我们用户的信息。
- en: We could as them to provide the topics they are interested in.
  id: totrans-4571
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以要求他们提供他们感兴趣的主题。
- en: In this chapter, we will build a profile page. It will feature server- and client-side
    validation and file upload for a profile picture. We will save that information
    in the user session and also ensure that our audience is as large as possible
    by translating the application into several languages. Finally, we will display
    a summary of Twitter activity matching users' tastes.
  id: totrans-4572
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个个人资料页面。它将具有服务器端和客户端验证以及用于个人资料图片上传的文件上传。我们将保存该信息在用户会话中，并通过将应用程序翻译成多种语言来确保我们的受众尽可能广泛。最后，我们将显示与用户口味匹配的Twitter活动摘要。
- en: Sounds good? Let's get started, we have some work to do.
  id: totrans-4573
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来不错吧？让我们开始吧，我们有一些工作要做。
- en: The profile page – a form
  id: totrans-4574
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个人资料页面 - 一个表单
- en: Forms are the cornerstones of every web application. They have been the main
    way to get user input since the very beginning of the Internet!
  id: totrans-4575
  prefs: []
  type: TYPE_NORMAL
  zh: 表单是每个Web应用程序的基石。自互联网诞生以来，它们一直是获取用户输入的主要方式！
- en: 'Our first task here is to create a profile page like this one:'
  id: totrans-4576
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里的第一个任务是创建一个像这样的个人资料页面：
- en: '![The profile page – a form](img/image00943.jpeg)'
  id: totrans-4577
  prefs: []
  type: TYPE_IMG
  zh: '![个人资料页面 - 一个表单](img/image00943.jpeg)'
- en: It will let the user enter some personal information as well as a list of tastes.
    These tastes will then be fed to our search engine.
  id: totrans-4578
  prefs: []
  type: TYPE_NORMAL
  zh: 它将允许用户输入一些个人信息以及一系列口味。然后，这些口味将被提供给我们的搜索引擎。
- en: 'Let''s create a new page in `templates/profile/profilePage.html`:'
  id: totrans-4579
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`templates/profile/profilePage.html`中创建一个新页面：
- en: '[PRE510]'
  id: totrans-4580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: Note the `@{}` syntax that will construct the full path to a resource by prepending
    the server context path (in our case, `localhost:8080`) to its argument.
  id: totrans-4581
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`@{}`语法，它将通过将服务器上下文路径（在我们的情况下为`localhost:8080`）前置到其参数来构造资源的完整路径。
- en: 'We will also create the associated controller named `ProfileController` in
    the `profile` package:'
  id: totrans-4582
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在`profile`包中创建名为`ProfileController`的相关控制器：
- en: '[PRE511]'
  id: totrans-4583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: Now, you can go to `http://localhost:8080` and behold a beautiful form that
    does nothing. That's because we didn't map any action to the post URL.
  id: totrans-4584
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以转到`http://localhost:8080`，看到一个漂亮的表单，什么也不做。这是因为我们没有将任何操作映射到post URL。
- en: 'Let''s create a **Data Transfer Object** (**DTO**) in the same package as our
    controller. We will name it `ProfileForm`. Its role will be to map the fields
    of our web form and describe validation rules:'
  id: totrans-4585
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在与我们的控制器相同的包中创建一个**数据传输对象**（**DTO**）。我们将其命名为`ProfileForm`。它的作用将是映射我们的Web表单字段并描述验证规则：
- en: '[PRE512]'
  id: totrans-4586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: This is a regular **Plain Old Java Object** (**POJO**). Don't forget to generate
    the getters and setters, without which our data binding will not work properly.
    Note that we have a list of tastes that we will not populate right now but a bit
    later.
  id: totrans-4587
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常规的**普通旧Java对象**（**POJO**）。不要忘记生成getter和setter，否则我们的数据绑定将无法正常工作。请注意，我们有一个口味列表，我们现在不会填充，稍后再填充。
- en: Since we are using Java 8, the birth date of our user will be using the new
    Java date-time API (JSR 310). This API is much better than the old `java.util.Date`
    API because it makes strong distinctions between all the nuances of human dates
    and uses a fluent API and immutable data structures.
  id: totrans-4588
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是Java 8，我们的用户的出生日期将使用新的Java日期时间API（JSR 310）。这个API比旧的`java.util.Date`
    API要好得多，因为它在人类日期的所有细微差别之间做出了明确的区分，并使用了流畅的API和不可变的数据结构。
- en: In our example, a `LocalDate` class is a simple day without time associated
    to it. It can be differentiated from the `LocalTime` class, which represents a
    time within a day, the `LocalDateTime` class, which represents both, or the `ZonedDateTime`
    class, which uses a time zone.
  id: totrans-4589
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`LocalDate`类是一个简单的没有与之关联的时间的日期。它可以与`LocalTime`类区分开，后者表示一天内的时间，`LocalDateTime`类表示两者，或者`ZonedDateTime`类使用时区。
- en: Note
  id: totrans-4590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you wish to learn more about the Java 8 date time API, refer to the Oracle
    tutorial available at [https://docs.oracle.com/javase/tutorial/datetime/TOC.html](https://docs.oracle.com/javase/tutorial/datetime/TOC.html).
  id: totrans-4591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于Java 8日期时间API的信息，请参考Oracle教程，网址为[https://docs.oracle.com/javase/tutorial/datetime/TOC.html](https://docs.oracle.com/javase/tutorial/datetime/TOC.html)。
- en: Tip
  id: totrans-4592
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Good advice is to always generate the `toString` method of our data objects
    like this form. It is extremely useful for debugging.
  id: totrans-4593
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的建议是始终生成我们的数据对象的`toString`方法，就像这个表单一样。这对于调试非常有用。
- en: 'To instruct Spring to bind our field to this DTO, we will have to add some
    metadata in the `profilePage`:'
  id: totrans-4594
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指示Spring将我们的字段绑定到此DTO，我们必须在`profilePage`中添加一些元数据：
- en: '[PRE513]'
  id: totrans-4595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: 'You will notice two things:'
  id: totrans-4596
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到两件事：
- en: The `th:object` attribute in the form
  id: totrans-4597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单中的`th:object`属性
- en: The `th:field` attributes in all the fields
  id: totrans-4598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有字段中的`th:field`属性
- en: The first one will bind an object by its type to the controller. The second
    ones will bind the actual fields to our form bean attributes.
  id: totrans-4599
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个将通过其类型将对象绑定到控制器。第二个将将实际字段绑定到我们的表单bean属性。
- en: 'For the `th:object` field to work, we need to add an argument of the type `ProfileForm`
    to our request mapping methods:'
  id: totrans-4600
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`th:object`字段起作用，我们需要在我们的请求映射方法中添加一个`ProfileForm`类型的参数：
- en: '[PRE514]'
  id: totrans-4601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: We also added a mapping for the `POST` method that will be called when the form
    is submitted. At this point, if you try to submit the form with a date (for instance
    10/10/1980), it won't work at all and give you an error 400 and no useful logging
    information.
  id: totrans-4602
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个`POST`方法的映射，当表单提交时将被调用。此时，如果您尝试使用日期（例如1980年10月10日）提交表单，它将完全不起作用，并且会给您一个400错误和没有有用的日志信息。
- en: Tip
  id: totrans-4603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Logging in Spring Boot**'
  id: totrans-4604
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Boot中的日志记录**'
- en: With Spring Boot, logging configuration is extremely simple. Just add `logging.level.{package}
    = DEBUG` to the `application.properties` file, where `{package}` is the fully
    qualified name of one of the classes or a package in your application. You can,
    of course, replace debug by any logging level you want. You can also add a classic
    logging configuration. Refer to [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html)
    for more information.
  id: totrans-4605
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Boot，日志配置非常简单。只需在`application.properties`文件中添加`logging.level.{package}
    = DEBUG`，其中`{package}`是应用程序中一个类或包的完全限定名称。当然，您可以将debug替换为任何您想要的日志级别。您还可以添加经典的日志配置。有关更多信息，请参阅[http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html)。
- en: 'We will need to debug our application a little bit to understand what happened.
    Add this line to your file `application.properties`:'
  id: totrans-4606
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微调试我们的应用程序以了解发生了什么。将此行添加到您的文件`application.properties`中：
- en: '[PRE515]'
  id: totrans-4607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: 'The `org.springframework.web` package is the base package of Spring MVC. This
    will allow us to see debug information generated by Spring web. If you submit
    the form again, you will see the following error in the log:'
  id: totrans-4608
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.web`包是Spring MVC的基本包。这将允许我们查看Spring web生成的调试信息。如果您再次提交表单，您将在日志中看到以下错误：'
- en: '[PRE516]'
  id: totrans-4609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: To understand what's going on, we need to have a look at the `DateTimeFormatterRegistrar`
    class of Spring.
  id: totrans-4610
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解发生了什么，我们需要查看Spring的`DateTimeFormatterRegistrar`类。
- en: In this class, you will see half a dozen parsers and printers for the JSR 310\.
    They will all fall back on the short style date format, which is either `MM/dd/yy`
    if you live in the US or `dd/MM/yy` otherwise.
  id: totrans-4611
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，您将看到半打JSR 310的解析器和打印机。它们都将回退到短格式日期格式，如果您住在美国，则为`MM/dd/yy`，否则为`dd/MM/yy`。
- en: This will instruct Spring Boot to create a `DateFormatter` class when our application
    starts.
  id: totrans-4612
  prefs: []
  type: TYPE_NORMAL
  zh: 这将指示Spring Boot在我们的应用程序启动时创建一个`DateFormatter`类。
- en: We need to do the same thing in our case and create our own formatter since
    writing a year with two digits is a bit akward.
  id: totrans-4613
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要做同样的事情，并创建我们自己的格式化程序，因为用两位数写年份有点奇怪。
- en: A `Formatter` in Spring is a class that can both `print` and `parse` an object.
    It will be used to decode and print a value from and to a String.
  id: totrans-4614
  prefs: []
  type: TYPE_NORMAL
  zh: Spring中的`Formatter`是一个可以同时`print`和`parse`对象的类。它将用于解码和打印值从和到字符串。
- en: 'We will create a very simple formatter in the `date` package called `USLocalDateFormatter`:'
  id: totrans-4615
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`date`包中创建一个非常简单的格式化程序，名为`USLocalDateFormatter`：
- en: '[PRE517]'
  id: totrans-4616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: This little class will allow us to parse the date in a more common format (with
    years in four digits) according to the user's locale.
  id: totrans-4617
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小类将允许我们以更常见的格式（年份为四位数）解析日期，根据用户的语言环境。
- en: 'Let''s create a new class in the `config` package called `WebConfiguration`:'
  id: totrans-4618
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`config`包中创建一个名为`WebConfiguration`的新类：
- en: '[PRE518]'
  id: totrans-4619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: This class extends the `WebMvcConfigurerAdapter`, which is a very handy class
    to customize the Spring MVC configuration. It provides a lot of common extension
    points that you can access by overriding methods such as the `addFormatters()`
    method.
  id: totrans-4620
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类扩展了`WebMvcConfigurerAdapter`，这是一个非常方便的类，可以自定义Spring MVC配置。它提供了许多常见的扩展点，您可以通过覆盖方法来访问，比如`addFormatters()`方法。
- en: This time, submitting our form won't result in any error except if you don't
    type the date with the correct date format.
  id: totrans-4621
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，提交我们的表单不会导致任何错误，除非您没有使用正确的日期格式输入日期。
- en: For the moment, it is impossible for the users to see the format in which they
    are supposed to enter their birth date, so let's add this information to the form.
  id: totrans-4622
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，用户无法看到他们应该输入出生日期的格式，所以让我们将这些信息添加到表单中。
- en: 'In the `ProfileController`, let''s add a `dateFormat` attribute:'
  id: totrans-4623
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProfileController`中，让我们添加一个`dateFormat`属性：
- en: '[PRE519]'
  id: totrans-4624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: The `@ModelAttribute` annotation will allow us to expose a property to the web
    page, exactly like the `model.addAttribute()` method that we saw in the previous
    chapter.
  id: totrans-4625
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ModelAttribute`注释将允许我们将属性暴露给网页，就像我们在上一章中看到的`model.addAttribute()`方法一样。'
- en: 'Now, we can use this information in our page by adding a placeholder to our
    date field:'
  id: totrans-4626
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过为我们的日期字段添加占位符来在我们的页面中使用这些信息：
- en: '[PRE520]'
  id: totrans-4627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: 'This information will now be displayed to the user:'
  id: totrans-4628
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息现在将显示给用户：
- en: '![The profile page – a form](img/image00944.jpeg)'
  id: totrans-4629
  prefs: []
  type: TYPE_IMG
  zh: '![个人资料页面-表单](img/image00944.jpeg)'
- en: Validation
  id: totrans-4630
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: We wouldn't want our user to enter invalid or empty information and that's why
    we will need to add some validation logic to our `ProfileForm`.
  id: totrans-4631
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望用户输入无效或空信息，这就是为什么我们需要向我们的`ProfileForm`添加一些验证逻辑。
- en: '[PRE521]'
  id: totrans-4632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: As you can see, we added a few validation constraints. These annotations come
    from the JSR-303 specification, which specifies bean validation. The most popular
    implementation of this specification is `hibernate-validator`, which is included
    in Spring Boot.
  id: totrans-4633
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们添加了一些验证约束。这些注释来自JSR-303规范，该规范指定了bean验证。这个规范最流行的实现是`hibernate-validator`，它包含在Spring
    Boot中。
- en: You can see that we use annotations coming from the `javax.validation.constraints`
    package (defined in the API) and some coming from the `org.hibernate.validator.constraints`
    package (additional constraints). Both work, I encourage you to take a look at
    what is available in those packages in the jars `validation-api` and `hibernate-validator`.
  id: totrans-4634
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们使用来自`javax.validation.constraints`包（在API中定义）的注释和一些来自`org.hibernate.validator.constraints`包（附加约束）的注释。两者都有效，我鼓励您查看这些包中在`validation-api`和`hibernate-validator`中可用的内容。
- en: You can also take a look at the constraints available in the hibernate validator
    in the documentation at [http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints).
  id: totrans-4635
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints)的文档中查看hibernate验证器中可用的约束。
- en: 'We will need to add a few more things for validation to work. First, the controller
    needs to say that it wants a valid model on form submission. Adding the `javax.validation.Valid`
    annotation to the parameter representing the form does just that:'
  id: totrans-4636
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一些其他内容才能使验证工作。首先，控制器需要声明它希望在表单提交时获得一个有效的模型。通过向表示表单的参数添加`javax.validation.Valid`注释来实现这一点：
- en: '[PRE522]'
  id: totrans-4637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: Note that we do not redirect the user if the form contains any errors. This
    will allow us to display them on the same web page.
  id: totrans-4638
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果表单包含任何错误，我们不会重定向用户。这将允许我们在同一网页上显示它们。
- en: Speaking of which, we need to add a place on the web page where those errors
    will be displayed.
  id: totrans-4639
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，我们需要在网页上添加一个地方来显示这些错误。
- en: 'Add these lines just at the beginning of the form tag in `profilePage.html`:'
  id: totrans-4640
  prefs: []
  type: TYPE_NORMAL
  zh: 在`profilePage.html`的表单标签的开头添加以下行：
- en: '[PRE523]'
  id: totrans-4641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: 'This will iterate through every error found in the form and display them in
    a list. If you try to submit an empty form, you will see a bunch of errors:'
  id: totrans-4642
  prefs: []
  type: TYPE_NORMAL
  zh: 这将遍历表单中发现的每个错误，并在列表中显示它们。如果您尝试提交空表单，您将看到一堆错误：
- en: '![Validation](img/image00945.jpeg)'
  id: totrans-4643
  prefs: []
  type: TYPE_IMG
  zh: '![验证](img/image00945.jpeg)'
- en: Note that the `@NotEmpty` check on the tastes will prevent the form from being
    submitted. Indeed, we do not yet have a way to provide them.
  id: totrans-4644
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于口味的`@NotEmpty`检查将阻止表单被提交。事实上，我们还没有提供一种方法来提供它们。
- en: Customize validation messages
  id: totrans-4645
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义验证消息
- en: 'These error messages are not very useful for our user yet. The first thing
    we need to do is to associate them properly to their respective fields. Let''s
    modify `profilePage.html`:'
  id: totrans-4646
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误消息对我们的用户来说还不是很有用。我们需要做的第一件事是将它们正确地与它们各自的字段关联起来。让我们修改`profilePage.html`：
- en: '[PRE524]'
  id: totrans-4647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: You will notice that we added a `th:errors` tag below each field in the form.
    We also added a `th:errorclass` tag to each field. If the field contains an error,
    the associated css class will be added to the DOM.
  id: totrans-4648
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们在表单中的每个字段下面添加了一个`th:errors`标签。我们还为每个字段添加了一个`th:errorclass`标签。如果字段包含错误，则相关的css类将添加到DOM中。
- en: 'The validation looks much better already:'
  id: totrans-4649
  prefs: []
  type: TYPE_NORMAL
  zh: 验证看起来已经好多了：
- en: '![Customize validation messages](img/image00946.jpeg)'
  id: totrans-4650
  prefs: []
  type: TYPE_IMG
  zh: 自定义验证消息
- en: The next thing we need to do is to customize the error messages to reflect the
    business rules of our application in a better way.
  id: totrans-4651
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是自定义错误消息，以更好地反映我们应用程序的业务规则。
- en: Remember that Spring Boot takes care of creating a message source bean for us?
    The default location for this message source is in `src/main/resources/messages.properties`.
  id: totrans-4652
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Spring Boot会为我们创建一个消息源bean？这个消息源的默认位置在`src/main/resources/messages.properties`中。
- en: 'Let''s create such a bundle, and add the following text:'
  id: totrans-4653
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这样一个包，并添加以下文本：
- en: '[PRE525]'
  id: totrans-4654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: Tip
  id: totrans-4655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'It can be very handy in development to configure the message source to always
    reload our bundles. Add the following property to `application.properties`:'
  id: totrans-4656
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发中，将消息源配置为始终重新加载我们的包可能非常方便。在`application.properties`中添加以下属性：
- en: '`spring.messages.cache-seconds=0`'
  id: totrans-4657
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring.messages.cache-seconds=0`'
- en: 0 means always reload, whereas -1 means never reload.
  id: totrans-4658
  prefs: []
  type: TYPE_NORMAL
  zh: 0表示始终重新加载，而-1表示永不重新加载。
- en: 'The class responsible for resolving the error messages in Spring is `DefaultMessageCodesResolver`.
    In the case of field validation, this class tries to resolve the following messages
    in the given order:'
  id: totrans-4659
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring中负责解析错误消息的类是`DefaultMessageCodesResolver`。在字段验证的情况下，该类尝试按照给定的顺序解析以下消息：
- en: code + "." + object name + "." + field
  id: totrans-4660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码+“。”+对象名称+“。”+字段
- en: code + "." + field
  id: totrans-4661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码+“。”+字段
- en: code + "." + field type
  id: totrans-4662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码+“。”+字段类型
- en: code
  id: totrans-4663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码
- en: 'In the preceding rules, the code part can be two things: an annotation type
    such as `Size` or `Email`, or an exception code such as `typeMismatch`. Remember
    when we got an exception caused by an incorrect date format? The associated error
    code was indeed `typeMismatch`.'
  id: totrans-4664
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的规则中，代码部分可以是两种情况：注释类型，如`Size`或`Email`，或异常代码，如`typeMismatch`。还记得我们因日期格式不正确而引发异常吗？相关的错误代码确实是`typeMismatch`。
- en: 'With the preceding messages, we chose to be very specific. A good practice
    is to define default messages as follows:'
  id: totrans-4665
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的消息中，我们选择了非常具体的方式。一个好的做法是定义默认消息如下：
- en: '[PRE526]'
  id: totrans-4666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: Note the placeholders; each validation error has a number of arguments associated
    with it.
  id: totrans-4667
  prefs: []
  type: TYPE_NORMAL
  zh: 注意占位符；每个验证错误都有与之关联的一些参数。
- en: 'The last way to declare error messages would involve defining the error message
    directly in the validation annotations as follows:'
  id: totrans-4668
  prefs: []
  type: TYPE_NORMAL
  zh: 声明错误消息的最后一种方式将涉及直接在验证注释中定义错误消息，如下所示：
- en: '[PRE527]'
  id: totrans-4669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: However, the downside of this method is that it is not compatible with internationalization.
  id: totrans-4670
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法的缺点是它与国际化不兼容。
- en: Custom annotation for validation
  id: totrans-4671
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义验证的自定义注释
- en: For Java dates, there is an annotation called `@Past`, which ensures that a
    date is from the past.
  id: totrans-4672
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java日期，有一个名为`@Past`的注释，它确保日期是过去的日期。
- en: 'We don''t want our user to pretend they are coming from the future, so we need
    to validate the birth date. To do this, we will define our own annotation in the
    `date` package:'
  id: totrans-4673
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望我们的用户假装他们来自未来，所以我们需要验证出生日期。为此，我们将在`date`包中定义我们自己的注释：
- en: '[PRE528]'
  id: totrans-4674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: Simple isn't it? This code will verify that our date is really from the past.
  id: totrans-4675
  prefs: []
  type: TYPE_NORMAL
  zh: 简单吧？这段代码将验证我们的日期确实是过去的日期。
- en: 'We can now add it to the `birthDate` field in the profile form:'
  id: totrans-4676
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将其添加到个人资料表单中的`birthDate`字段中：
- en: '[PRE529]'
  id: totrans-4677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: Internationalization
  id: totrans-4678
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化
- en: Internationalization, frequently abbreviated i18n, is the process of designing
    an application that can be translated into various languages.
  id: totrans-4679
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化，通常缩写为i18n，是设计可以翻译成各种语言的应用程序的过程。
- en: This generally involves placing translations in properties bundles with their
    names suffixed with the target locale, for instance, the `messages_en.properties`,
    `messages_en_US.properties`, and `messages_fr.properties` files.
  id: totrans-4680
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这涉及将翻译放在名称后缀为目标区域设置的属性包中，例如，`messages_en.properties`，`messages_en_US.properties`和`messages_fr.properties`文件。
- en: The correct property bundle is resolved by trying the most specific locale first
    and then falling back to the less specific ones.
  id: totrans-4681
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的属性包是通过首先尝试最具体的区域设置，然后回退到不太具体的区域设置来解析的。
- en: For U.S English, if you try to get a translation from a bundle named `x`, the
    application would first look in the `x_en_US.properties` file, then the `x_en.properties`
    file, and finally, the `x.properties` file.
  id: totrans-4682
  prefs: []
  type: TYPE_NORMAL
  zh: 对于美国英语，如果尝试从名为`x`的包中获取翻译，应用程序首先会查找`x_en_US.properties`文件，然后是`x_en.properties`文件，最后是`x.properties`文件。
- en: The first thing we will do is translate our error messages into French. To do
    this, we will rename our existing `messages.properties` file to `messages_en.properties`.
  id: totrans-4683
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是将我们的错误消息翻译成法语。为此，我们将现有的`messages.properties`文件重命名为`messages_en.properties`。
- en: 'We will also create a second bundle named `messages_fr.properties`:'
  id: totrans-4684
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个名为`messages_fr.properties`的第二个包：
- en: '[PRE530]'
  id: totrans-4685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: 'By default, Spring Boot uses a fixed `LocaleResolver` interface. The `LocaleResolver`
    is a simple interface with two methods:'
  id: totrans-4686
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot使用固定的`LocaleResolver`接口。`LocaleResolver`是一个简单的接口，有两个方法：
- en: '[PRE531]'
  id: totrans-4687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: 'Spring provides a bunch of implementations of this interface, such as `FixedLocaleResolver`.
    This local resolver is very simple; we can configure the application locale via
    a property and cannot change it once it is defined. To configure the locale of
    our application, let''s add the following property to our `application.properties`
    file:'
  id: totrans-4688
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一堆这个接口的实现，比如`FixedLocaleResolver`。这个本地解析器非常简单；我们可以通过属性配置应用程序的区域设置，一旦定义就无法更改。要配置我们应用程序的区域设置，让我们在`application.properties`文件中添加以下属性：
- en: '[PRE532]'
  id: totrans-4689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: This will add our validation messages in French.
  id: totrans-4690
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在法语中添加我们的验证消息。
- en: 'If we take a look at the different `LocaleResolver` interfaces that are bundled
    in Spring MVC, we will see the following:'
  id: totrans-4691
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下Spring MVC中捆绑的不同`LocaleResolver`接口，我们会看到以下内容：
- en: '`FixedLocaleResolver`: This fixes the locale defined in configuration. It cannot
    be changed once fixed.'
  id: totrans-4692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FixedLocaleResolver`：这会固定在配置中定义的区域设置。一旦固定，就无法更改。'
- en: '`CookieLocaleResolver`: This allows the locale to be retrieved and saved in
    a cookie.'
  id: totrans-4693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CookieLocaleResolver`：这允许从cookie中检索和保存区域设置。'
- en: '`AcceptHeaderLocaleResolver`: This uses the HTTP header sent by the user''s
    browser to find the locale.'
  id: totrans-4694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AcceptHeaderLocaleResolver`：这使用用户浏览器发送的HTTP标头来查找区域设置。'
- en: '`SessionLocaleResolver`: This finds and stores the locale in an HTTP session.'
  id: totrans-4695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SessionLocaleResolver`：这在HTTP会话中查找并存储区域设置。'
- en: These implementations cover a number of use cases, but in a more complex application
    one might implement `LocaleResolver` directly to allow more complex logic such
    as fetching the locale from the database and falling back to browser locale, for
    instance.
  id: totrans-4696
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实现涵盖了许多用例，但在更复杂的应用程序中，可以直接实现`LocaleResolver`以允许更复杂的逻辑，例如从数据库获取区域设置并回退到浏览器区域设置。
- en: Changing the locale
  id: totrans-4697
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改区域设置
- en: In our application, the locale is linked to the user. We will save their profile
    in session.
  id: totrans-4698
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，区域设置与用户相关联。我们将在会话中保存他们的个人资料。
- en: 'We will allow the user to change the language of the site using a small menu.
    That''s why we will use the `SessionLocaleResolver`. Let''s edit `WebConfiguration`
    once more:'
  id: totrans-4699
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将允许用户使用一个小菜单更改站点的语言。这就是为什么我们将使用`SessionLocaleResolver`。让我们再次编辑`WebConfiguration`：
- en: '[PRE533]'
  id: totrans-4700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: We declared a `LocaleChangeInterceptor` bean as a Spring MVC interceptor. It
    will intercept any request made to `Controller` and check for the `lang` query
    parameter. For instance, navigating to `http://localhost:8080/profile?lang=fr`
    would cause the locale to change.
  id: totrans-4701
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个`LocaleChangeInterceptor` bean作为Spring MVC拦截器。它将拦截对`Controller`的任何请求，并检查`lang`查询参数。例如，导航到`http://localhost:8080/profile?lang=fr`将导致区域设置更改。
- en: Tip
  id: totrans-4702
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Spring MVC Interceptors** can be compared to Servlet filters in a web application.
    Interceptors allow custom preprocessing, skipping the execution of a handler,
    and custom post-processing. Filters are more powerful, for example, they allow
    for exchanging the request and response objects that are handed down the chain.
    Filters are configured in a `web.xml` file, while interceptors are declared as
    beans in the application context.'
  id: totrans-4703
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring MVC拦截器**可以与Web应用程序中的Servlet过滤器进行比较。拦截器允许自定义预处理，跳过处理程序的执行以及自定义后处理。过滤器更强大，例如，它们允许交换传递给链的请求和响应对象。过滤器在`web.xml`文件中配置，而拦截器在应用程序上下文中声明为bean。'
- en: 'Now, we can change the locale by entering the correct URL ourselves, but it
    would be better to add a navigation bar allowing the user to change the language.
    We will modify the default layout (`templates/layout/default.html`) to add a drop-down
    menu:'
  id: totrans-4704
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过输入正确的URL来更改区域设置，但最好是添加一个导航栏，允许用户更改语言。我们将修改默认布局（`templates/layout/default.html`）以添加一个下拉菜单：
- en: '[PRE534]'
  id: totrans-4705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: This will allow the user to choose between the two supported languages.
  id: totrans-4706
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许用户在两种支持的语言之间进行选择。
- en: '![Changing the locale](img/image00947.jpeg)'
  id: totrans-4707
  prefs: []
  type: TYPE_IMG
  zh: '![更改区域设置](img/image00947.jpeg)'
- en: Translating the application text
  id: totrans-4708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译应用程序文本
- en: 'The last thing we need to do in order to have a fully bilingual application
    is to translate the titles and labels of our application. To do this, we will
    edit our web pages and use the `th:text` attribute, for instance, in `profilePage.html`:'
  id: totrans-4709
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的应用程序完全支持双语，我们需要做的最后一件事是翻译应用程序的标题和标签。为此，我们将编辑我们的网页并使用`th:text`属性，例如在`profilePage.html`中：
- en: '[PRE535]'
  id: totrans-4710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: The `th:text` attribute will replace the contents of a HTML element with an
    expression. Here, we use the `#{}` syntax, which indicates we want to display
    a message coming from a property source like `messages.properties`.
  id: totrans-4711
  prefs: []
  type: TYPE_NORMAL
  zh: '`th:text`属性将使用表达式替换HTML元素的内容。在这里，我们使用`#{}`语法，表示我们要显示来自属性源（如`messages.properties`）的消息。'
- en: 'Let''s add the corresponding translations to our English bundle:'
  id: totrans-4712
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的英语包中添加相应的翻译：
- en: '[PRE536]'
  id: totrans-4713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: 'Now to the French ones:'
  id: totrans-4714
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是法语的：
- en: '[PRE537]'
  id: totrans-4715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: Some of the translations are not used yet, but will be used in just a moment.
    Et voilà! The French market is ready for the Twitter search flood.
  id: totrans-4716
  prefs: []
  type: TYPE_NORMAL
  zh: 一些翻译尚未使用，但很快就会用到。Et voilà！法国市场已经准备好迎接Twitter搜索风暴。
- en: A list in a form
  id: totrans-4717
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单中的列表
- en: We now want the user to enter a list of "tastes", which are, in fact, a list
    of keywords we will use to search tweets.
  id: totrans-4718
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们希望用户输入一个“品味”列表，实际上是一个我们将用于搜索推文的关键字列表。
- en: 'A button will be displayed, allowing our user to enter a new keyword and add
    it to a list. Each item of this list will be an editable input text and will be
    removable thanks to a remove button:'
  id: totrans-4719
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示一个按钮，允许用户输入新关键字并将其添加到列表中。该列表的每个项目将是可编辑的输入文本，并且可以通过删除按钮进行删除：
- en: '![A list in a form](img/image00948.jpeg)'
  id: totrans-4720
  prefs: []
  type: TYPE_IMG
  zh: '![表单中的列表](img/image00948.jpeg)'
- en: Handling list data in a form can be a chore with some frameworks. However, with
    Spring MVC and Thymeleaf it is relatively straightforward, when you understand
    the principle.
  id: totrans-4721
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单中处理列表数据可能是一项繁琐的工作，但是使用Spring MVC和Thymeleaf相对来说比较简单，只要你理解了原则。
- en: 'Add the following lines in the `profilePage.html` file right below the row
    containing the birth date, and just over the submit button:'
  id: totrans-4722
  prefs: []
  type: TYPE_NORMAL
  zh: 在`profilePage.html`文件中添加以下行，就在包含出生日期的行下方，正好在提交按钮上方：
- en: '[PRE538]'
  id: totrans-4723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: The purpose of this snippet is to iterate over the `tastes` variable of our
    `LoginForm`. This can be achieved with the `th:each` attribute, which looks a
    lot like a `for…in` loop in java.
  id: totrans-4724
  prefs: []
  type: TYPE_NORMAL
  zh: 此片段的目的是对我们的`LoginForm`的`tastes`变量进行迭代。这可以通过`th:each`属性实现，它看起来很像Java中的`for…in`循环。
- en: Compared to the search result loop we saw earlier, the iteration is stored in
    two variables instead of one. The first one will actually contain each row of
    the data. The `rowStat` variable will contain additional information on the current
    state of the iteration.
  id: totrans-4725
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前看到的搜索结果循环相比，迭代存储在两个变量中而不是一个。第一个变量实际上将包含数据的每一行。`rowStat`变量将包含有关迭代当前状态的附加信息。
- en: 'The strangest thing in the new piece of code is:'
  id: totrans-4726
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码片段中最奇怪的事情是：
- en: '[PRE539]'
  id: totrans-4727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: 'This is quite a complicated syntax. You could come up with something simpler
    on your own, such as:'
  id: totrans-4728
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当复杂的语法。你可以自己想出一些更简单的东西，比如：
- en: '[PRE540]'
  id: totrans-4729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: Well, that wouldn't work. The `${rowStat.index}` variable, which represents
    the current index of the iteration loop, needs to be evaluated before the rest
    of the expression. To achieve this, we need to use preprocessing.
  id: totrans-4730
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那行不通。`${rowStat.index}`变量代表迭代循环的当前索引，需要在表达式的其余部分之前进行评估。为了实现这一点，我们需要使用预处理。
- en: The expression surrounded by double underscores will be preprocessed, which
    means that it will be processed before the normal processing phase, allowing it
    to be evaluated twice.
  id: totrans-4731
  prefs: []
  type: TYPE_NORMAL
  zh: 双下划线包围的表达式将被预处理，这意味着它将在正常处理阶段之前进行处理，允许它被评估两次。
- en: There are two new submit buttons on our form now. They all have a name. The
    global submit button we had earlier is called `save`. The two new buttons are
    called `addTaste` and `removeTaste`.
  id: totrans-4732
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的表单上有两个新的提交按钮。它们都有一个名称。我们之前有的全局提交按钮称为`save`。两个新按钮分别称为`addTaste`和`removeTaste`。
- en: 'On the controller side, this will allow us to easily discriminate the different
    actions coming from our form. Let''s add two new actions to our `ProfileController`:'
  id: totrans-4733
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器端，这将使我们能够轻松区分来自我们表单的不同操作。让我们在`ProfileController`中添加两个新的操作：
- en: '[PRE541]'
  id: totrans-4734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: We added a `param` parameter to each of our post actions to differentiate them.
    The one we had previously is now bound to the `save` parameter.
  id: totrans-4735
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个提交操作添加了一个`param`参数以加以区分。我们之前使用的那个现在绑定到`save`参数。
- en: 'When we click on a button, its name will automatically be added to the form
    data sent by the browser. Note that we specified a particular value with the remove
    button: `th:value="${rowStat.index}"`. This attribute will indicate which value
    the associated parameter should specifically take. A blank value will be sent
    if this attribute is not present. This means that when we click on the remove
    button, a `removeTaste` parameter will be added to the `POST` request, containing
    the index of the row we would like to remove. We can then get it back into the
    `Controller` with the following code:'
  id: totrans-4736
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们单击按钮时，其名称将自动添加到浏览器发送的表单数据中。请注意，我们在删除按钮中指定了一个特定值：`th:value="${rowStat.index}"`。该属性将指示相关参数应具体采用哪个值。如果不存在此属性，将发送空值。这意味着当我们单击删除按钮时，将向`POST`请求添加一个`removeTaste`参数，其中包含我们想要删除的行的索引。然后我们可以在`Controller`中使用以下代码获取它：
- en: '[PRE542]'
  id: totrans-4737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: The only downside with this method is that the whole form data will be sent
    every time we click on the button, even if it is not strictly required. Our form
    is small enough, so a tradeoff is acceptable.
  id: totrans-4738
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的唯一缺点是每次单击按钮时都会发送整个表单数据，即使并不严格需要。我们的表单足够小，因此可以接受这种折衷方案。
- en: That's it! The form is now complete, with the possibility of adding one or more
    tastes.
  id: totrans-4739
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！表单现在已经完成，可以添加一个或多个口味。
- en: Client validation
  id: totrans-4740
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端验证
- en: As a little bonus, client-side validation has become very easy nowadays with
    the HTML5 form validation specification. If your target browsers are Internet
    Explorer 10 and above, adding client-side validation is as easy as specifying
    the correct input type instead of just using text.
  id: totrans-4741
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的奖励，客户端验证现在变得非常容易，因为HTML5表单验证规范。如果你的目标浏览器是Internet Explorer 10及以上版本，添加客户端验证就像指定正确的输入类型一样容易，而不仅仅是使用文本。
- en: By adding the client-side validation, we can prevalidate the form and avoid
    overloading the server with requests that we know are incorrect. More information
    on the client-side validation specification is available at [http://caniuse.com/#search=validation](http://caniuse.com/#search=validation).
  id: totrans-4742
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加客户端验证，我们可以预先验证表单，并避免向服务器发送我们知道是不正确的请求。有关客户端验证规范的更多信息，请访问[http://caniuse.com/#search=validation](http://caniuse.com/#search=validation)。
- en: 'We can modify our inputs to enable simple client-side validation. The previous
    inputs, as shown in the following code:'
  id: totrans-4743
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改我们的输入以启用简单的客户端验证。之前的输入，如下面的代码所示：
- en: '[PRE543]'
  id: totrans-4744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: 'This becomes:'
  id: totrans-4745
  prefs: []
  type: TYPE_NORMAL
  zh: 变成了：
- en: '[PRE544]'
  id: totrans-4746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: With this method, your browser will detect when the form is submitted and validate
    each attribute according to its type. The `required` attribute forces the user
    to enter a nonblank value. The `email` type enforces basic e-mail validation rules
    on the corresponding field.
  id: totrans-4747
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，您的浏览器将在提交表单时检测并根据其类型验证每个属性。`required`属性强制用户输入非空值。`email`类型对相应字段强制执行基本的电子邮件验证规则。
- en: '![Client validation](img/image00949.jpeg)'
  id: totrans-4748
  prefs: []
  type: TYPE_IMG
  zh: '![客户端验证](img/image00949.jpeg)'
- en: Other types of validators also exist. Take a look at [http://www.the-art-of-web.com/html/html5-form-validation](http://www.the-art-of-web.com/html/html5-form-validation).
  id: totrans-4749
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他类型的验证器。请查看[http://www.the-art-of-web.com/html/html5-form-validation](http://www.the-art-of-web.com/html/html5-form-validation)。
- en: The downside of this method is that our add taste and remove taste buttons will
    now trigger validation. To fix this, we need to include a script at the bottom
    of the default layout, right after the jQuery declaration.
  id: totrans-4750
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是我们的添加口味和删除口味按钮现在会触发验证。为了解决这个问题，我们需要在默认布局的底部包含一个脚本，就在jQuery声明之后。
- en: 'However, it would be best to include it only on the profile page. To do this,
    we can add a new fragment section in the `layout/default.html` page, just before
    the end of the body tag:'
  id: totrans-4751
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好只在个人资料页面上包含它。为了做到这一点，我们可以在`layout/default.html`页面中，在body标签结束之前添加一个新的片段部分：
- en: '[PRE545]'
  id: totrans-4752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: This will allow us to include an additional script on each page if needed.
  id: totrans-4753
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在需要时在每个页面上包含额外的脚本。
- en: 'Now, we can add the following script to our profile page, just before closing
    the body tag:'
  id: totrans-4754
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在个人资料页面中添加以下脚本，就在关闭body标签之前：
- en: '[PRE546]'
  id: totrans-4755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: Form validation won't be triggered when a `novalidate` attribute is present
    on the form. This little script will dynamically remove the `novalidate` attribute
    if the action of the form is named `save` if the name of the input is different,
    the `novalidate` attribute will always be added. Validation will thus be triggered
    only by the save button.
  id: totrans-4756
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单上存在`novalidate`属性时，表单验证不会被触发。这个小脚本将动态地移除`novalidate`属性，如果表单的操作名称是`save`，如果输入的名称不同，`novalidate`属性将始终被添加。因此，验证只会被保存按钮触发。
- en: The check point
  id: totrans-4757
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: Before moving on to the next chapter, let's check whether everything is in the
    right place.
  id: totrans-4758
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，让我们检查一下是否一切就绪。
- en: 'In the Java sources, you should have the following:'
  id: totrans-4759
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java源代码中，你应该有以下内容：
- en: A new controller, the `ProfileController`
  id: totrans-4760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的控制器，`ProfileController`
- en: 'Two new classes related to date: a date formatter and an annotation to validate
    `LocalDate`s'
  id: totrans-4761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与日期相关的两个新类：日期格式化程序和验证`LocalDate`的注释
- en: A new `WebConfiguration` folder to customize Spring MVC's configuration
  id: totrans-4762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的`WebConfiguration`文件夹来自定义Spring MVC的配置
- en: '![The check point](img/image00950.jpeg)'
  id: totrans-4763
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00950.jpeg)'
- en: 'In the resources, you should have a new template inside the profile directory
    and two new bundles:'
  id: totrans-4764
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源中，你应该有一个新的模板在profile目录下和两个新的包：
- en: '![The check point](img/image00951.jpeg)'
  id: totrans-4765
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00951.jpeg)'
- en: Summary
  id: totrans-4766
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to make a complete form. We created a model
    using Java 8 dates, and you learned how to format information coming from the
    user and display it accordingly.
  id: totrans-4767
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何制作一个完整的表单。我们使用Java 8日期创建了一个模型，并学会了如何格式化来自用户的信息并相应地显示它。
- en: We ensured that the form was filled with valid information, with validator annotations,
    including our own. Also, we prevented obviously incorrect information from even
    hitting the server by including some client-side validation very easily.
  id: totrans-4768
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确保表单填写了有效的信息，包括我们自己的验证器注解。此外，我们通过包括一些客户端验证非常容易地阻止明显不正确的信息甚至触及服务器。
- en: Finally, we even translated the whole application into English and French, date
    formats included!
  id: totrans-4769
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们甚至将整个应用程序翻译成了英语和法语，包括日期格式！
- en: In the next chapter, we will build a space where the users will be able to upload
    their pictures and learn more about error handling in Spring MVC applications.
  id: totrans-4770
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将建立一个空间，用户将能够上传他们的图片，并了解更多关于Spring MVC应用程序中的错误处理。
- en: Chapter 3. File Upload and Error Handling
  id: totrans-4771
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。文件上传和错误处理
- en: In this chapter, we will enable our user to upload a profile picture. We will
    also see how to handle errors in Spring MVC.
  id: totrans-4772
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用户能够上传个人资料图片。我们还将看到如何在Spring MVC中处理错误。
- en: Uploading a file
  id: totrans-4773
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: 'We will now make it possible for our user to upload a profile picture. This
    will be available from the profile page later on, but for now, we will simplify
    things and create a new page in the templates directory under `profile/uploadPage.html`:'
  id: totrans-4774
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用户能够上传个人资料图片。这将在以后的个人资料页面上可用，但现在，我们将简化事情，并在`profile/uploadPage.html`目录下的模板目录中创建一个新页面：
- en: '[PRE547]'
  id: totrans-4775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: 'Not much to see besides the `enctype` attribute on the form. The file will
    be sent by the `POST` method to the `upload` URL. We will now create the corresponding
    controller right beside `ProfileController` in the `profile` package:'
  id: totrans-4776
  prefs: []
  type: TYPE_NORMAL
  zh: 除了表单上的`enctype`属性外，没有什么可看的。文件将通过`POST`方法发送到`upload` URL。我们现在将在`profile`包中的`ProfileController`旁边创建相应的控制器：
- en: '[PRE548]'
  id: totrans-4777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: The first thing this code will do is create a temporary file in the `pictures`
    directory, which can be found inside the project's root folder; so, ensure that
    it exists. In Java, a temporary file is just a commodity to obtain a unique file
    identifier on the filesystem. It is up to the user to optionally delete it.
  id: totrans-4778
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将做的第一件事是在`pictures`目录中创建一个临时文件，该目录位于项目的根目录内；因此，请确保它存在。在Java中，临时文件只是一个方便的方法，用于在文件系统上获取唯一的文件标识符。用户可以选择删除它。
- en: Create a pictures directory at the root of the project and add an empty file
    called `.gitkeep` to ensure that you can commit it in Git.
  id: totrans-4779
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的根目录下创建一个pictures目录，并添加一个名为`.gitkeep`的空文件，以确保您可以在Git中提交它。
- en: Tip
  id: totrans-4780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Empty directories in Git**'
  id: totrans-4781
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git中的空目录**'
- en: Git is file-based and it is not possible to commit an empty directory. A common
    workaround is to commit an empty file, such as `.gitkeep`, in a directory to force
    Git to keep it under version control.
  id: totrans-4782
  prefs: []
  type: TYPE_NORMAL
  zh: Git是基于文件的，不可能提交一个空目录。一个常见的解决方法是在目录中提交一个空文件，比如`.gitkeep`，以强制Git将其纳入版本控制。
- en: The file uploaded by the user will be injected as a `MultipartFile` interface
    in our controller. This interface provides several methods to get the name of
    the file, its size, and its contents.
  id: totrans-4783
  prefs: []
  type: TYPE_NORMAL
  zh: 用户上传的文件将作为`MultipartFile`接口注入到我们的控制器中。该接口提供了几种方法来获取文件的名称、大小和内容。
- en: The method that particularly interests us here is `getInputStream()`. We will
    indeed copy this stream to a `fileOutputStream` method, thanks to the `IOUtils.copy`
    method. The code to write an input stream to an output stream is pretty boring,
    so it's handy to have the Apache Utils in the classpath (it is part of the `tomcat-embedded-core.jar`
    file).
  id: totrans-4784
  prefs: []
  type: TYPE_NORMAL
  zh: 这里特别感兴趣的方法是`getInputStream()`。我们确实将复制这个流到一个`fileOutputStream`方法，感谢`IOUtils.copy`方法。将输入流写入输出流的代码非常无聊，所以在类路径中有Apache
    Utils很方便（它是`tomcat-embedded-core.jar`文件的一部分）。
- en: 'We make heavy use of the pretty cool Spring and Java 7 NIO features:'
  id: totrans-4785
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大量使用了相当酷的Spring和Java 7 NIO功能：
- en: The resource class of string is a utility class that represents an abstraction
    of resources that can be found in different ways
  id: totrans-4786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串的资源类是一个实用类，表示可以以不同方式找到的资源的抽象
- en: The `try…with` block will automatically close our streams even in the case of
    an exception, removing the boilerplate of writing a `finally` block
  id: totrans-4787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`try…with`块将自动关闭我们的流，即使出现异常，删除了编写`finally`块的样板'
- en: With the preceding code, any file uploaded by the user will be copied into the
    `pictures` directory.
  id: totrans-4788
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述代码，用户上传的任何文件都将被复制到`pictures`目录中。
- en: There are a handful of properties available in Spring Boot to customize file
    upload. Take a look at the `MultipartProperties` class.
  id: totrans-4789
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot中有一些可用的属性来自定义文件上传。看一下`MultipartProperties`类。
- en: 'The most interesting ones are:'
  id: totrans-4790
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的是：
- en: '`multipart.maxFileSize`: This defines the maximum file size allowed for the
    uploaded files. Trying to upload a bigger one will result in a `MultipartException`
    class. The default value is `1Mb`.'
  id: totrans-4791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multipart.maxFileSize`：这定义了上传文件的最大文件大小。尝试上传更大的文件将导致`MultipartException`类。默认值为`1Mb`。'
- en: '`multipart.maxRequestSize`: This defines the maximum size of the multipart
    request. The default value is `10Mb`.'
  id: totrans-4792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multipart.maxRequestSize`：这定义了多部分请求的最大大小。默认值为`10Mb`。'
- en: 'The defaults are good enough for our application. After a few uploads, our
    picture directory will look like this:'
  id: totrans-4793
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值对我们的应用程序已经足够好了。经过几次上传后，我们的图片目录将如下所示：
- en: '![Uploading a file](img/image00952.jpeg)'
  id: totrans-4794
  prefs: []
  type: TYPE_IMG
  zh: '![上传文件](img/image00952.jpeg)'
- en: 'Wait! Somebody uploaded a ZIP file! I cannot believe it. We better add some
    checks in our controller to ensure that the uploaded files are real images:'
  id: totrans-4795
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！有人上传了一个ZIP文件！我简直不敢相信。我们最好在我们的控制器中添加一些检查，以确保上传的文件是真实的图片：
- en: '[PRE549]'
  id: totrans-4796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: Pretty easy! The `getContentType()` method returns the **Multipurpose Internet
    Mail Extensions** (**MIME**) type of the file. It will be `image/png`, `image/jpg`,
    and so on. So we just have to check if the MIME type starts with "image".
  id: totrans-4797
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单！`getContentType()`方法返回文件的**多用途互联网邮件扩展**（**MIME**）类型。它将是`image/png`，`image/jpg`等等。因此，我们只需检查MIME类型是否以"image"开头。
- en: 'We added an error message to the form so we should add something in our web
    page to display it. Place the following code just under the title in the `uploadPage`:'
  id: totrans-4798
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在表单中添加了一个错误消息，因此我们应该在我们的网页中添加一些内容来显示它。将以下代码放在`uploadPage`标题下方：
- en: '[PRE550]'
  id: totrans-4799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: 'The next time you try to upload a ZIP file, you will get an error! This is
    shown in the following screenshot:'
  id: totrans-4800
  prefs: []
  type: TYPE_NORMAL
  zh: 下次您尝试上传ZIP文件时，将会收到错误！如下截图所示：
- en: '![Uploading a file](img/image00953.jpeg)'
  id: totrans-4801
  prefs: []
  type: TYPE_IMG
  zh: '![上传文件](img/image00953.jpeg)'
- en: Writing an image to the response
  id: totrans-4802
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图像写入响应
- en: The uploaded images are not served from the static directories. We will need
    to take special measures to display them in our web page.
  id: totrans-4803
  prefs: []
  type: TYPE_NORMAL
  zh: 上传的图片不是从静态目录中提供的。我们需要采取特殊措施来在我们的网页中显示它们。
- en: 'Let''s add the following lines to our upload page, just above the form:'
  id: totrans-4804
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的上传页面上方添加以下行，就在表单上方：
- en: '[PRE551]'
  id: totrans-4805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: 'This will try and get the image from our controller. Let''s add the corresponding
    method to the `PictureUploadController` class:'
  id: totrans-4806
  prefs: []
  type: TYPE_NORMAL
  zh: 这将尝试从我们的控制器获取图像。让我们在`PictureUploadController`类中添加相应的方法：
- en: '[PRE552]'
  id: totrans-4807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: This code will write an image found in the `src/main/resources/images/anonymous.png`
    directory directly to the response! How exciting!
  id: totrans-4808
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将直接将`src/main/resources/images/anonymous.png`目录中找到的图像写入响应！多么令人兴奋！
- en: 'If we go to our page again, we will see the following image:'
  id: totrans-4809
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次转到我们的页面，我们会看到以下图片：
- en: '![Writing an image to the response](img/image00954.jpeg)'
  id: totrans-4810
  prefs: []
  type: TYPE_IMG
  zh: '![将图像写入响应](img/image00954.jpeg)'
- en: Tip
  id: totrans-4811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I found the anonymous user image on iconmonstr ([http://iconmonstr.com/user-icon](http://iconmonstr.com/user-icon))
    and downloaded it as a 128 x 128 PNG file.
  id: totrans-4812
  prefs: []
  type: TYPE_NORMAL
  zh: 我在iconmonstr（[http://iconmonstr.com/user-icon](http://iconmonstr.com/user-icon)）上找到了匿名用户图片，并将其下载为128
    x 128的PNG文件。
- en: Managing upload properties
  id: totrans-4813
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理上传属性
- en: A good thing to do at this point is to allow the configuration of the upload
    directory and the path to the anonymous user image through the `application.properties`
    file.
  id: totrans-4814
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，一个好的做法是允许通过`application.properties`文件配置上传目录和匿名用户图片的路径。
- en: 'Let''s create a `PicturesUploadProperties` class inside a newly created `config`
    package:'
  id: totrans-4815
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在新创建的`config`包内创建一个`PicturesUploadProperties`类：
- en: '[PRE553]'
  id: totrans-4816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: In this class, we make use of the Spring Boot `ConfigurationProperties`. This
    will tell Spring Boot to automatically map properties found in the classpath (by
    default, in the `application.properties` file) in a type-safe fashion.
  id: totrans-4817
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们使用了Spring Boot的`ConfigurationProperties`。这将告诉Spring Boot以类型安全的方式自动映射类路径中发现的属性（默认情况下，在`application.properties`文件中）。
- en: Notice that we defined setters taking 'String's as arguments but are at liberty
    to let the getters return any type is the most useful.
  id: totrans-4818
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们定义了以'String'作为参数的setter，但可以自由地让getter返回任何类型是最有用的。
- en: 'We now need to add the `PicturesUploadProperties` class to our configuration:'
  id: totrans-4819
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将`PicturesUploadProperties`类添加到我们的配置中：
- en: '[PRE554]'
  id: totrans-4820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: 'We can now add the properties'' values inside the `application.properties`
    file:'
  id: totrans-4821
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在`application.properties`文件中添加属性值：
- en: '[PRE555]'
  id: totrans-4822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: Because we use Spring's `DefaultResourceLoader` class, we can use prefixes such
    as `file:` or `classpath:` to specify where our resources can be found.
  id: totrans-4823
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了Spring的`DefaultResourceLoader`类，我们可以使用诸如`file:`或`classpath:`之类的前缀来指定我们的资源可以被找到的位置。
- en: This would be the equivalent of creating a `FileSystemResource` class or a `ClassPathResource`
    class.
  id: totrans-4824
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于创建一个`FileSystemResource`类或`ClassPathResource`类。
- en: This approach also has the advantage of documenting the code. We can easily
    see that the picture directory will be found in the application root, whereas
    the anonymous picture will be found in the classpath.
  id: totrans-4825
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法还有一个优点，就是可以对代码进行文档化。我们可以很容易地看到图片目录将在应用程序根目录中找到，而匿名图片将在类路径中找到。
- en: 'That''s it. We can now use our properties inside our controller. The following
    are the relevant parts of the `PictureUploadController` class:'
  id: totrans-4826
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们现在可以在我们的控制器中使用我们的属性。以下是`PictureUploadController`类的相关部分：
- en: '[PRE556]'
  id: totrans-4827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: At this point, if you launch your application again, you will see that the result
    hasn't changed. The anonymous picture is still displayed and the pictures uploaded
    by our users still end up in the `pictures` directory at the project root.
  id: totrans-4828
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果您再次启动应用程序，您会发现结果并没有改变。匿名图片仍然显示，用户上传的图片仍然会出现在项目根目录的`pictures`目录中。
- en: Displaying the uploaded picture
  id: totrans-4829
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示上传的图片
- en: 'It would be nice to display the user''s picture now, wouldn''t it? To do this,
    we will add a model attribute to our `PictureUploadController` class:'
  id: totrans-4830
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要向我们的`PictureUploadController`类添加一个模型属性来显示用户的图片：
- en: '[PRE557]'
  id: totrans-4831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: 'We can now inject it to retrieve its value when we serve the uploaded picture:'
  id: totrans-4832
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以注入它以在提供上传的图片时检索其值：
- en: '[PRE558]'
  id: totrans-4833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: The `@ModelAttribute` annotation is a handy way to create model attributes with
    an annotated method. They can then be injected with the same annotation into controller
    methods. With this code, a `picturePath` parameter will be available in the model
    as long as we are not redirected to another page. Its default value is the anonymous
    picture we defined in our properties.
  id: totrans-4834
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ModelAttribute`注解是一种方便的方法，可以使用带注解的方法创建模型属性。然后可以使用相同的注解将它们注入到控制器方法中。使用此代码，只要我们没有重定向到另一个页面，模型中就会有一个`picturePath`参数。它的默认值是我们在属性中定义的匿名图片。'
- en: 'We need to update this value when the file is uploaded. Update the `onUpload`
    method:'
  id: totrans-4835
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件上传时，我们需要更新此值。更新`onUpload`方法：
- en: '[PRE559]'
  id: totrans-4836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: By injecting the model, we can update the `picturePath` parameter after the
    upload is complete.
  id: totrans-4837
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注入模型，我们可以在上传完成后更新`picturePath`参数。
- en: Now, the problem is that our two methods, `onUpload` and `getUploadedPicture`,
    will occur in different requests. Unfortunately, the model attributes will be
    reset between each.
  id: totrans-4838
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，问题是我们的两个方法`onUpload`和`getUploadedPicture`将出现在不同的请求中。不幸的是，模型属性将在每次之间重置。
- en: 'That''s why we will define the `picturePath` parameter as a session attribute.
    We can do this by adding another annotation to our controller class:'
  id: totrans-4839
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们将`picturePath`参数定义为会话属性。我们可以通过向我们的控制器类添加另一个注解来实现这一点：
- en: '[PRE560]'
  id: totrans-4840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: 'Phew! That''s a lot of annotations just to handle a simple session attribute.
    You will get the following output:'
  id: totrans-4841
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！这么多注解只是为了处理一个简单的会话属性。您将获得以下输出：
- en: '![Displaying the uploaded picture](img/image00955.jpeg)'
  id: totrans-4842
  prefs: []
  type: TYPE_IMG
  zh: '![显示上传的图片](img/image00955.jpeg)'
- en: This approach makes code composition really easy. Plus, we didn't use `HttpServletRequest`
    or `HttpSession` directly. Moreover, our object can be typed easily.
  id: totrans-4843
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使代码组合变得非常容易。此外，我们没有直接使用`HttpServletRequest`或`HttpSession`。此外，我们的对象可以很容易地进行类型化。
- en: Handling file upload errors
  id: totrans-4844
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理文件上传错误
- en: 'It must have certainly occurred to my attentive readers that our code is susceptible
    to throw two kinds of exceptions:'
  id: totrans-4845
  prefs: []
  type: TYPE_NORMAL
  zh: 我的细心读者一定会想到我们的代码可能会抛出两种异常：
- en: '`IOException`: This error is thrown if something bad happens while writing
    the file to disk.'
  id: totrans-4846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IOException`: 如果在将文件写入磁盘时发生了不好的情况，就会抛出此错误。'
- en: '`MultipartException`: This error is thrown if an error occurs while uploading
    the file. For instance, when the maximum file size is exceeded.'
  id: totrans-4847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultipartException`: 如果上传文件时发生错误，则会抛出此错误。例如，当超过最大文件大小时。'
- en: 'This will give us a good opportunity to look at two ways of handling exceptions
    in Spring:'
  id: totrans-4848
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供一个很好的机会来看一下在Spring中处理异常的两种方式：
- en: Using the `@ExceptionHandler` annotation locally in a controller method
  id: totrans-4849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器方法中使用`@ExceptionHandler`注解
- en: Using a global exception handler defined at the Servlet container level
  id: totrans-4850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用在Servlet容器级别定义的全局异常处理程序
- en: 'Let''s handle `IOException` with the `@ExceptionHandler` annotation inside
    our `PictureUploadController` class by adding the following method:'
  id: totrans-4851
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在我们的`PictureUploadController`类中使用`@ExceptionHandler`注解来处理`IOException`，添加以下方法：
- en: '[PRE561]'
  id: totrans-4852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: This is a simple yet powerful approach. This method will be called every time
    an `IOException` is thrown in our controller.
  id: totrans-4853
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简单而强大的方法。每当我们的控制器中抛出`IOException`时，将调用此方法。
- en: 'In order to test the exception handler, since making the Java IO code throw
    an exception can be tricky, just replace the `onUpload` method body during the
    test:'
  id: totrans-4854
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试异常处理程序，由于使Java IO代码抛出异常可能会很棘手，只需在测试期间替换`onUpload`方法体：
- en: '[PRE562]'
  id: totrans-4855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: 'After this change, if we try to upload a picture, we will see the error message
    of this exception displayed on the upload page:'
  id: totrans-4856
  prefs: []
  type: TYPE_NORMAL
  zh: 更改后，如果我们尝试上传图片，将在上传页面上看到此异常的错误消息显示：
- en: '![Handling file upload errors](img/image00956.jpeg)'
  id: totrans-4857
  prefs: []
  type: TYPE_IMG
  zh: '![处理文件上传错误](img/image00956.jpeg)'
- en: Now, we will handle the `MultipartException`. This needs to happen at the Servlet
    container level (that is, at the Tomcat level), as this exception is not thrown
    directly by our controller.
  id: totrans-4858
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将处理`MultipartException`。这需要在Servlet容器级别（即在Tomcat级别）进行，因为此异常不是直接由我们的控制器抛出的。
- en: 'We will need to add a new `EmbeddedServletContainerCustomizer` bean to our
    configuration. Add this method to the `WebConfiguration` class:'
  id: totrans-4859
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向我们的配置中添加一个新的`EmbeddedServletContainerCustomizer` bean。将此方法添加到`WebConfiguration`类中：
- en: '[PRE563]'
  id: totrans-4860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: 'This is a little verbose. Note that `EmbeddedServletContainerCustomizer` is
    an interface that contains a single method; it can therefore be replaced by a
    lambda expression:'
  id: totrans-4861
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点啰嗦。请注意，`EmbeddedServletContainerCustomizer`是一个包含单个方法的接口；因此，它可以被lambda表达式替换：
- en: '[PRE564]'
  id: totrans-4862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: 'So, let''s just write the following:'
  id: totrans-4863
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只需编写以下内容：
- en: '[PRE565]'
  id: totrans-4864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: This code creates a new error page, which will be called when a `MultipartException`
    happens. It can also be mapped to an HTTP status. The `EmbeddedServletContainerCustomizer`
    interface has many other features that will allow the customization of the Servlet
    container in which our application runs. Visit [http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-customizing-embedded-containers](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-customizing-embedded-containers)
    for more information.
  id: totrans-4865
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了一个新的错误页面，当发生`MultipartException`时将调用该页面。它还可以映射到HTTP状态。`EmbeddedServletContainerCustomizer`接口还具有许多其他功能，将允许自定义我们的应用程序运行的Servlet容器。有关更多信息，请访问[http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-customizing-embedded-containers](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-customizing-embedded-containers)。
- en: 'We now need to handle this `uploadError` URL in our `PictureUploadController`
    class:'
  id: totrans-4866
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在我们的`PictureUploadController`类中处理这个`uploadError` URL：
- en: '[PRE566]'
  id: totrans-4867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: 'The error pages defined in a Servlet environment contain a number of interesting
    attributes that will help debug the error:'
  id: totrans-4868
  prefs: []
  type: TYPE_NORMAL
  zh: 在Servlet环境中定义的错误页面包含许多有助于调试错误的有趣属性：
- en: '| Attribute | Description |'
  id: totrans-4869
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4870
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `javax.servlet.error.status_code` | This is the HTTP status code of the error.
    |'
  id: totrans-4871
  prefs: []
  type: TYPE_TB
  zh: '| `javax.servlet.error.status_code` | 这是错误的HTTP状态码。 |'
- en: '| `javax.servlet.error.exception_type` | This is the exception class. |'
  id: totrans-4872
  prefs: []
  type: TYPE_TB
  zh: '| `javax.servlet.error.exception_type` | 这是异常类。 |'
- en: '| `javax.servlet.error.message` | This is the message of the exception thrown.
    |'
  id: totrans-4873
  prefs: []
  type: TYPE_TB
  zh: '| `javax.servlet.error.message` | 这是抛出的异常的消息。 |'
- en: '| `javax.servlet.error.request_uri` | This is the URI on which the exception
    occurred. |'
  id: totrans-4874
  prefs: []
  type: TYPE_TB
  zh: '| `javax.servlet.error.request_uri` | 这是发生异常的URI。 |'
- en: '| `javax.servlet.error.exception` | This is the actual exception. |'
  id: totrans-4875
  prefs: []
  type: TYPE_TB
  zh: '| `javax.servlet.error.exception` | 这是实际的异常。 |'
- en: '| `javax.servlet.error.servlet_name` | This is the name of the Servlet that
    caught the exception. |'
  id: totrans-4876
  prefs: []
  type: TYPE_TB
  zh: '| `javax.servlet.error.servlet_name` | 这是捕获异常的Servlet的名称。 |'
- en: All these attributes are conveniently accessible on the `WebUtils` class of
    Spring Web.
  id: totrans-4877
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些属性都可以方便地在Spring Web的`WebUtils`类上访问。
- en: If someone tries to upload too big a file, they will get a very clear error
    message.
  id: totrans-4878
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人试图上传太大的文件，他们将收到非常明确的错误消息。
- en: 'You can now test that the error is handled correctly by uploading a really
    big file (> 1Mb) or setting the `multipart.maxFileSize` property to a lower value:
    1kb for instance:'
  id: totrans-4879
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过上传一个非常大的文件（> 1Mb）或将`multipart.maxFileSize`属性设置为较低的值（例如1kb）来测试错误是否被正确处理：
- en: '![Handling file upload errors](img/image00957.jpeg)'
  id: totrans-4880
  prefs: []
  type: TYPE_IMG
  zh: '![处理文件上传错误](img/image00957.jpeg)'
- en: Translating the error messages
  id: totrans-4881
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译错误消息
- en: 'It is really good for a developer to see the exceptions thrown by the application.
    However, for our users, they bear little value. We will therefore translate them.
    In order to do that, we have to inject our application''s `MessageSource` class
    into our controller''s constructor:'
  id: totrans-4882
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员来说，看到应用程序抛出的异常是非常好的。然而，对于我们的用户来说，它们的价值很小。因此，我们将对它们进行翻译。为了做到这一点，我们必须将我们应用程序的`MessageSource`类注入到我们控制器的构造函数中：
- en: '[PRE567]'
  id: totrans-4883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: 'Now, we can retrieve messages from our messages bundle:'
  id: totrans-4884
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从消息包中检索消息：
- en: '[PRE568]'
  id: totrans-4885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: 'Here are the English messages:'
  id: totrans-4886
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是英文消息：
- en: '[PRE569]'
  id: totrans-4887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: 'Now, the French ones:'
  id: totrans-4888
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，法语消息：
- en: '[PRE570]'
  id: totrans-4889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: Placing the profile in a session
  id: totrans-4890
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将配置文件放入会话中
- en: The next thing we want is the profile to be stored in a session so that it does
    not get reset every time we go on the profile page. This can apparently prove
    tiresome to some users and we have to address it.
  id: totrans-4891
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望的下一步是将配置文件存储在会话中，以便每次进入配置文件页面时都不会被重置。这对一些用户来说可能会很烦人，我们必须解决这个问题。
- en: Tip
  id: totrans-4892
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**HTTP sessions** are a way to store information between requests. HTTP is
    a stateless protocol, which means that there is no way to relate two requests
    coming from the same user. What most Servlet containers do is they associate a
    cookie called `JSESSIONID` to each user. This cookie will be transmitted in the
    request header and will allow you to store arbitrary objects in a map, an abstraction
    called `HttpSession`. Such a session will typically end when the user closes or
    switches web browsers or after a predefined period of inactivity.'
  id: totrans-4893
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP会话**是在请求之间存储信息的一种方式。HTTP是一种无状态协议，这意味着没有办法将来自同一用户的两个请求联系起来。大多数Servlet容器所做的是将名为`JSESSIONID`的cookie与每个用户关联起来。该cookie将在请求头中传输，并允许您在一个称为`HttpSession`的抽象中存储任意对象。这样的会话通常会在用户关闭或切换Web浏览器或预定义的不活动期之后结束。'
- en: We just saw a method to put objects in a session using the `@SessionAttributes`
    annotation. This works well within a controller but makes the data difficult to
    share when spread across multiple controllers. We have to rely on a string to
    resolve the attribute from its name, which is hard to refactor. For the same reason,
    we don't want to manipulate the `HttpSession` directly. Another argument that
    will discourage the direct usage of the session is how difficult it is to unit
    test the controller that depends on it.
  id: totrans-4894
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了一种使用`@SessionAttributes`注解将对象放入会话中的方法。这在控制器内部效果很好，但在多个控制器之间共享数据时会变得困难。我们必须依赖字符串来从其名称解析属性，这很难重构。出于同样的原因，我们不希望直接操作`HttpSession`。另一个阻止直接使用会话的论点是，依赖于它的控制器很难进行单元测试。
- en: 'There is another popular approach when it comes to saving things in a session
    with Spring: annotate a bean with `@Scope("session")`.'
  id: totrans-4895
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Spring保存会话中的内容时，还有另一种流行的方法：使用`@Scope("session")`为bean添加注释。
- en: You will then be able to inject your session bean in your controllers and other
    Spring components to either set or retrieve values from it.
  id: totrans-4896
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将能够在控制器和其他Spring组件中注入会话bean，以设置或检索其中的值。
- en: 'Let''s create a `UserProfileSession` class in the `profile` package:'
  id: totrans-4897
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`profile`包中创建一个`UserProfileSession`类：
- en: '[PRE571]'
  id: totrans-4898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: 'We have conveniently provided a way to convert from and to a `ProfileForm`
    object. This will help us store and retrieve the form data from our `ProfileController`
    constructor. We need to inject our `UserProfileSession` variable in the controller''s
    constructor and store it as a field. We also need to expose the `ProfileForm`
    as a model attribute, which will remove the need to inject it in the `displayProfile`
    method. Finally, we can save the profile once it has been validated:'
  id: totrans-4899
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经方便地提供了一种从`ProfileForm`对象转换的方法。这将帮助我们从`ProfileController`构造函数中存储和检索表单数据。我们需要在控制器的构造函数中注入我们的`UserProfileSession`变量并将其存储为字段。我们还需要将`ProfileForm`公开为模型属性，这将消除在`displayProfile`方法中注入它的需要。最后，一旦验证通过，我们就可以保存配置文件：
- en: '[PRE572]'
  id: totrans-4900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: That's all it takes to save data in a session with Spring MVC.
  id: totrans-4901
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用Spring MVC在会话中保存数据所需的全部内容。
- en: Now, if you complete the profile form and refresh the page, the data will be
    persisted between requests.
  id: totrans-4902
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您完成了配置文件表单并刷新页面，数据将在请求之间持久保存。
- en: Just before moving on to the next chapter, I want to detail a couple of concepts
    we just used.
  id: totrans-4903
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，我想详细介绍一些我们刚刚使用的概念。
- en: 'The first is the injection by the constructor. The `ProfileController` constructor
    is annotated with `@Autowired`, which means Spring will resolve the constructor
    arguments from the application context before instantiating the bean. The alternative,
    which is a little less verbose, would have been to use field injection:'
  id: totrans-4904
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是通过构造函数进行注入。`ProfileController`构造函数使用`@Autowired`进行注释，这意味着Spring将在实例化bean之前从应用程序上下文中解析构造函数参数。另一种稍微不那么冗长的替代方法是使用字段注入：
- en: '[PRE573]'
  id: totrans-4905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: Constructor injection is arguably better because it makes the unit testing of
    our controller easier if we were to move away from the `spring-test` framework
    and it makes the dependencies of our bean somewhat more explicit.
  id: totrans-4906
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数注入可能更好，因为如果我们要远离`spring-test`框架，它会使我们的控制器的单元测试更容易，并且它会使我们的bean的依赖关系更加明确。
- en: For a detailed discussion on field injection and constructor injection, refer
    to the excellent blog post by Oliver Gierke at [http://olivergierke.de/2013/11/why-field-injection-is-evil/](http://olivergierke.de/2013/11/why-field-injection-is-evil/).
  id: totrans-4907
  prefs: []
  type: TYPE_NORMAL
  zh: 有关字段注入和构造函数注入的详细讨论，请参阅Oliver Gierke在[http://olivergierke.de/2013/11/why-field-injection-is-evil/](http://olivergierke.de/2013/11/why-field-injection-is-evil/)上的出色博客文章。
- en: 'Another thing that might need clarification is the `proxyMode` parameter on
    the `Scope` annotation:'
  id: totrans-4908
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要澄清的另一件事是`Scope`注解上的`proxyMode`参数：
- en: '[PRE574]'
  id: totrans-4909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: 'There are three `proxyMode` parameters available with Spring, if we don''t
    count the default one:'
  id: totrans-4910
  prefs: []
  type: TYPE_NORMAL
  zh: Spring有三个`proxyMode`参数可用，如果不计算默认值：
- en: '`TARGET_CLASS`: This uses a CGI proxy'
  id: totrans-4911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TARGET_CLASS`：这使用CGI代理'
- en: '`INTERFACES`: This creates a JDK proxy'
  id: totrans-4912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INTERFACES`：这将创建一个JDK代理'
- en: '`NO`: This does not create any proxy'
  id: totrans-4913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO`：这不会创建任何代理'
- en: The advantage of a proxy typically comes into play when you inject something
    into a long-lived component such as a singleton. Because injection only happens
    once, when the bean is created, subsequent calls to the injected bean might not
    reflect its actual state.
  id: totrans-4914
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的优势通常在将某些东西注入到长期存在的组件中（如单例）时发挥作用。因为注入只发生一次，当bean被创建时，对注入的bean的后续调用可能不会反映其实际状态。
- en: 'In our case, a session bean''s actual state is stored in the session and not
    directly on the bean. This explains why Spring has to create a proxy: it needs
    to intercept calls to our bean methods and listen for its mutations. This way,
    the state of the bean can be transparently stored and retrieved from the underlying
    HTTP session.'
  id: totrans-4915
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，会话bean的实际状态存储在会话中，而不是直接存储在bean中。这解释了为什么Spring必须创建代理：它需要拦截对我们bean方法的调用，并监听其变化。这样，bean的状态可以透明地存储和检索到底层的HTTP会话中。
- en: For a session bean, we are forced to use a proxy mode. The CGI proxy will instrument
    your bytecode and work on any class, whereas the JDK approach might be a bit more
    lightweight but requires you to implement an interface.
  id: totrans-4916
  prefs: []
  type: TYPE_NORMAL
  zh: 对于会话bean，我们被迫使用代理模式。CGI代理将对您的字节码进行检测，并在任何类上工作，而JDK方法可能会更轻量级一些，但需要您实现一个接口。
- en: Lastly, we made the `UserProfileSession` bean implement the `Serializable` interface.
    This is not strictly required because the HTTP sessions can store arbitrary objects
    in memory, but making objects that end up in the session serializable really is
    a good practice.
  id: totrans-4917
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使`UserProfileSession` bean实现了`Serializable`接口。这并不是严格要求的，因为HTTP会话可以在内存中存储任意对象，但是使最终存储在会话中的对象可序列化确实是一个好习惯。
- en: Indeed, we might change the way the session is persisted. In fact, we will store
    the session in a Redis database in [Chapter 7](part0187.xhtml#aid-5IAP61 "Chapter 7. Optimizing
    Your Requests"), *Optimizing Your Requests*, where Redis has to work with `Serializable`
    objects. It's always best to think of the session of a generic data store. We
    have to provide a way to write and read objects from this storage system.
  id: totrans-4918
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可能会更改会话的持久化方式。事实上，我们将在[第7章](part0187.xhtml#aid-5IAP61 "第7章。优化您的请求")中将会话存储在Redis数据库中，*优化您的请求*，在那里Redis必须使用`Serializable`对象。最好始终将会话视为通用数据存储。我们必须提供一种从该存储系统中写入和读取对象的方法。
- en: For serialization to work properly on our bean, we also need every one of its
    field to be serializable. In our case, strings and dates are serializable so we
    are good to go.
  id: totrans-4919
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的bean上的序列化正常工作，我们还需要使其每个字段都可序列化。在我们的情况下，字符串和日期是可序列化的，所以我们可以继续。
- en: Custom error pages
  id: totrans-4920
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义错误页面
- en: Spring Boot lets you define your own error view instead of the Whitelabel error
    page that we saw earlier. It must have the name `error` and its purpose is to
    handle all exceptions. The default `BasicErrorController` class will expose a
    lot of useful model attributes that you can display on this page.
  id: totrans-4921
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot允许您定义自己的错误视图，而不是我们之前看到的Whitelabel错误页面。它必须具有名称`error`，其目的是处理所有异常。默认的`BasicErrorController`类将公开许多有用的模型属性，您可以在此页面上显示这些属性。
- en: 'Let''s create a custom error page in `src/main/resources/templates`. Let''s
    call it `error.html`:'
  id: totrans-4922
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`src/main/resources/templates`中创建一个自定义错误页面。让我们称之为`error.html`：
- en: '[PRE575]'
  id: totrans-4923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: 'Now, if we navigate to a URL that is not handled by our application, we see
    our custom error page:'
  id: totrans-4924
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们导航到我们的应用程序未处理的URL，我们会看到我们的自定义错误页面：
- en: '![Custom error pages](img/image00958.jpeg)'
  id: totrans-4925
  prefs: []
  type: TYPE_IMG
  zh: '![自定义错误页面](img/image00958.jpeg)'
- en: A more advanced option to handle errors is to define your own implementation
    of the `ErrorController` class, a controller in charge of handling all the exceptions
    at a global level. Take a look at the `ErrorMvcAutoConfiguration` class and the
    `BasicErrorController` class, which is the default implementation.
  id: totrans-4926
  prefs: []
  type: TYPE_NORMAL
  zh: 处理错误的更高级选项是定义自己的`ErrorController`类的实现，这是负责全局处理所有异常的控制器。查看`ErrorMvcAutoConfiguration`类和`BasicErrorController`类，它是默认实现。
- en: URL mapping with matrix variables
  id: totrans-4927
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用矩阵变量的URL映射
- en: We are now aware of what our user is interested in. It would be a good idea
    to improve our Tweet controller so that it allows searching from a list of keywords.
  id: totrans-4928
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道我们的用户对什么感兴趣。改进我们的Tweet控制器，以便它允许从关键字列表中进行搜索，这是一个好主意。
- en: 'One interesting way to pass key-value pairs in a URL is to use a matrix variable.
    It is pretty similar to request parameters. Consider the following code:'
  id: totrans-4929
  prefs: []
  type: TYPE_NORMAL
  zh: 在URL中传递键值对的一个有趣方式是使用矩阵变量。这与请求参数非常相似。考虑以下代码：
- en: '[PRE576]'
  id: totrans-4930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: 'Instead of the preceding parameter, matrix variables understand this:'
  id: totrans-4931
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵变量理解前面的参数：
- en: '[PRE577]'
  id: totrans-4932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'They also allow each parameter to be a list:'
  id: totrans-4933
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还允许每个参数都是一个列表：
- en: '[PRE578]'
  id: totrans-4934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: 'A matrix variable can be mapped to different object types inside a controller:'
  id: totrans-4935
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵变量可以映射到控制器内的不同对象类型：
- en: '`Map<String, List<?>>`: This handles multiple variables and multiple values'
  id: totrans-4936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map<String, List<?>>`：这处理多个变量和多个值'
- en: '`Map<String, ?>`: This handles a case in which each variable has only one value'
  id: totrans-4937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map<String, ?>`：这处理每个变量只有一个值的情况'
- en: '`List<?>`: This is used if we are interested in a single variable whose name
    can be configured'
  id: totrans-4938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<?>`：如果我们对一个可以配置名称的单个变量感兴趣，就会使用这个'
- en: 'In our case, we want to handle something like this:'
  id: totrans-4939
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们想要处理这样的情况：
- en: '[PRE579]'
  id: totrans-4940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: 'The first parameter, `popular`, is the result type known by the Twitter search
    API. It can take the following values: `mixed`, `recent`, or `popular`.'
  id: totrans-4941
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数`popular`是Twitter搜索API已知的结果类型。它可以取以下值：`mixed`、`recent`或`popular`。
- en: The rest of our URL is a list of keywords. We will therefore map them to a simple
    `List<String>` object.
  id: totrans-4942
  prefs: []
  type: TYPE_NORMAL
  zh: 我们URL的其余部分是关键字列表。因此，我们将它们映射到一个简单的`List<String>`对象。
- en: By default, Spring MVC removes every character following a semicolon in a URL.
    The first thing we need to do to enable matrix variables in our application is
    to turn off this behavior.
  id: totrans-4943
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring MVC会删除URL中分号后面的每个字符。我们需要做的第一件事是关闭这种行为，以启用我们应用程序中的矩阵变量。
- en: 'Let''s add the following code to our `WebConfiguration` class:'
  id: totrans-4944
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`WebConfiguration`类中添加以下代码：
- en: '[PRE580]'
  id: totrans-4945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: 'Let''s create a new controller in the `search` package, which we will call
    `SearchController`. Its role is to handle the following request:'
  id: totrans-4946
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`search`包中创建一个新的控制器，我们将其称为`SearchController`。它的作用是处理以下请求：
- en: '[PRE581]'
  id: totrans-4947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: 'As you can see, we are able reuse the existing result page to display the tweets.
    We also want to delegate the search to another class called `SearchService`. We
    will create this service in the same package as `SearchController`:'
  id: totrans-4948
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们能够重用现有的结果页面来显示推文。我们还希望将搜索委托给另一个名为`SearchService`的类。我们将在与`SearchController`相同的包中创建这个服务：
- en: '[PRE582]'
  id: totrans-4949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: Now, we need to implement the `search()` method.
  id: totrans-4950
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要实现`search()`方法。
- en: The search operation accessible on `twitter.searchOperations().search(params)`
    takes `searchParameters` as an argument for an advanced search. This object allows
    us to conduct a search on a dozen of criteria. We are interested in the `query`,
    `resultType`, and `count` attributes.
  id: totrans-4951
  prefs: []
  type: TYPE_NORMAL
  zh: '`twitter.searchOperations().search(params)`上可访问的搜索操作以`searchParameters`作为高级搜索的参数。这个对象允许我们根据十几个标准进行搜索。我们对`query`、`resultType`和`count`属性感兴趣。'
- en: 'First, we need to create a `ResultType` constructor with the `searchType` path
    variable. The `ResultType` is an enum, so we can iterate over its different values
    and find one that matches the input, ignoring the case:'
  id: totrans-4952
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个`ResultType`构造函数，其中包含`searchType`路径变量。`ResultType`是一个枚举，所以我们可以迭代它的不同值，并找到与输入匹配的值，忽略大小写：
- en: '[PRE583]'
  id: totrans-4953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: 'We can now create a `SearchParameters` constructor with the following method:'
  id: totrans-4954
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个带有以下方法的`SearchParameters`构造函数：
- en: '[PRE584]'
  id: totrans-4955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: 'Now, creating a list of the `SearchParameters` constructor is as easy as conducting
    a map operation (taking a list of keywords and returning a `SearchParameters`
    constructor for each one):'
  id: totrans-4956
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建`SearchParameters`构造函数的列表就像进行映射操作一样简单（获取关键字列表并为每个关键字返回一个`SearchParameters`构造函数）：
- en: '[PRE585]'
  id: totrans-4957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: 'Now, we want to fetch the tweets for each `SearchParameters` constructor. You
    might think of something like this:'
  id: totrans-4958
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要为每个`SearchParameters`构造函数获取推文。你可能会想到这样的东西：
- en: '[PRE586]'
  id: totrans-4959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: 'However, if you think about it, this will return a list of tweets. What we
    want is to flatten all the tweets to get them as a simple list. It turns out that
    calling `map` and then flattening the result is an operation known as `flatMap`.
    So we can write:'
  id: totrans-4960
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你仔细想想，这将返回一个推文列表。我们想要的是将所有推文展平，以便得到一个简单的列表。原来调用`map`然后展平结果的操作称为`flatMap`。所以我们可以写：
- en: '[PRE587]'
  id: totrans-4961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: 'The syntax of `flatMap` function, that takes a stream as a parameter, is a
    bit difficult to understand at first. Let me show you the entire code of the `SearchService`
    class so we can take a step back:'
  id: totrans-4962
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatMap`函数的语法，它以流作为参数，一开始有点难以理解。让我向你展示`SearchService`类的整个代码，这样我们就可以退一步看看：'
- en: '[PRE588]'
  id: totrans-4963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: 'Now, if we navigate to `http://localhost:8080/search/mixed;keywords=scala,java`,
    we get the expected result. A search for the Scala keyword and then for Java:'
  id: totrans-4964
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们导航到`http://localhost:8080/search/mixed;keywords=scala,java`，我们会得到预期的结果。首先搜索Scala关键字，然后搜索Java：
- en: '![URL mapping with matrix variables](img/image00959.jpeg)'
  id: totrans-4965
  prefs: []
  type: TYPE_IMG
  zh: '![带矩阵变量的URL映射](img/image00959.jpeg)'
- en: Putting it together
  id: totrans-4966
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把它放在一起
- en: 'Now that everything works separately, it''s time to assemble everything. We
    will do this in three steps:'
  id: totrans-4967
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切都可以单独工作，是时候将一切组合起来了。我们将分三步完成这个过程：
- en: Move the upload form to the profile page and remove the old upload page.
  id: totrans-4968
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上传表单移动到个人资料页面，并删除旧的上传页面。
- en: Change the submit button on the profile page to trigger the taste search directly.
  id: totrans-4969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将个人资料页面上的提交按钮更改为直接触发口味搜索。
- en: Change the home page of our application. It should display search results matching
    our users' tastes right away. If they are unavailable, go to the profile page.
  id: totrans-4970
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改我们应用程序的主页。它应该立即显示与我们用户口味匹配的搜索结果。如果不可用，转到个人资料页面。
- en: I encourage you to try to do it on your own. You will run into very manageable
    problems along the way but you should know enough to resolve them on your own.
    I believe in you.
  id: totrans-4971
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你尝试自己做。你会在途中遇到一些很容易解决的问题，但你应该知道足够的知识来自己解决它们。我相信你。
- en: OK, now that you have done the work (you have, haven't you?), let's take a look
    at my solution.
  id: totrans-4972
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在你已经完成了工作（你已经完成了，对吧？），让我们来看看我的解决方案。
- en: The first step is to remove the old `uploadPage` title. Don't look back, just
    do it.
  id: totrans-4973
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是删除旧的`uploadPage`标题。不要回头，就这么做。
- en: 'Next, put these lines just below the `profilePage` title:'
  id: totrans-4974
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将这些行放在`profilePage`标题的下方：
- en: '[PRE589]'
  id: totrans-4975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: It is very similar to the content of the late `uploadPage`. We just removed
    the title and changed the label of the submit button. Add the corresponding translation
    to the bundles.
  id: totrans-4976
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以前的`uploadPage`的内容非常相似。我们只是删除了标题，并更改了提交按钮的标签。将相应的翻译添加到包中。
- en: 'In English:'
  id: totrans-4977
  prefs: []
  type: TYPE_NORMAL
  zh: 在英语中：
- en: '[PRE590]'
  id: totrans-4978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: 'In French:'
  id: totrans-4979
  prefs: []
  type: TYPE_NORMAL
  zh: 用法语：
- en: '[PRE591]'
  id: totrans-4980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: We also changed the name of the submit button to `upload`. That will help us
    identify this action on the controller side.
  id: totrans-4981
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将提交按钮的名称更改为`upload`。这将帮助我们在控制器端识别这个操作。
- en: 'Now, if we try to upload our picture, it will redirect us to the old upload
    page. We need to fix this in the `onUpload` method of our `PictureUploadController`
    class:'
  id: totrans-4982
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试上传我们的图片，它会将我们重定向到旧的上传页面。我们需要在`PictureUploadController`类的`onUpload`方法中修复这个问题：
- en: '[PRE592]'
  id: totrans-4983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: Note that we changed the URL that handles the post. It is now `/profile` instead
    of `/upload`. Form handling is much simpler when the `GET` and `POST` requests
    have the same URL, and will save us a lot of trouble especially when dealing with
    exceptions. This way, we will not have to redirect the user after an error.
  id: totrans-4984
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们更改了处理POST的URL。现在是`/profile`而不是`/upload`。当`GET`和`POST`请求具有相同的URL时，表单处理会更简单，并且在处理异常时会节省我们很多麻烦。这样，我们就不必在错误发生后重定向用户。
- en: We also removed the model attribute, `picturePath`. Since we now have a bean
    representing our user in a session, `UserProfileSession`, we decided to add it
    there. We added a `picturePath` attribute to the `UserProfileSession` class and
    the associated getters and setters.
  id: totrans-4985
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还删除了模型属性`picturePath`。因为我们现在在会话中有一个代表用户的bean，`UserProfileSession`，我们决定将其添加在那里。我们在`UserProfileSession`类中添加了一个`picturePath`属性以及相关的getter和setter。
- en: Don't forget to inject the `UserProfileSession` class and make it available
    as a field in our `PictureUploadController` class.
  id: totrans-4986
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在我们的`PictureUploadController`类中注入`UserProfileSession`类，并将其作为字段可用。
- en: 'Remember that all the properties of our session bean must be serializable,
    unlike resources. So we need to store it differently. The URL class seems to be
    a good fit. It is serializable and it is easy to create a resource from a URL
    with the `UrlResource` class:'
  id: totrans-4987
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们会话bean的所有属性都必须是可序列化的，与资源不同。因此我们需要以不同的方式存储它。URL类似乎是一个很好的选择。它是可序列化的，而且很容易使用`UrlResource`类从URL创建资源：
- en: '[PRE593]'
  id: totrans-4988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: The last thing that I had to do is to make the `profileForm` available as a
    model attribute after an error. This is because the `profilePage` requires it
    when it is rendered.
  id: totrans-4989
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要做的最后一件事是在错误后将`profileForm`作为模型属性可用。这是因为在呈现`profilePage`时需要它。
- en: 'To sum up, here is the final version of the `PictureUploadController` class:'
  id: totrans-4990
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，这是`PictureUploadController`类的最终版本：
- en: '[PRE594]'
  id: totrans-4991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: 'So, now we can go to the profile page and upload our picture as well as provide
    personal information, as shown in the following screenshot:'
  id: totrans-4992
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们可以转到个人资料页面，上传我们的图片，并提供个人信息，如下截图所示：
- en: '![Putting it together](img/image00960.jpeg)'
  id: totrans-4993
  prefs: []
  type: TYPE_IMG
  zh: '![将其放在一起](img/image00960.jpeg)'
- en: 'Now, let''s redirect our user to its search after the profile is completed.
    For this, we need to modify the `saveProfile` method in the `ProfileController`
    class:'
  id: totrans-4994
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在个人资料完成后将用户重定向到搜索页面。为此，我们需要修改`ProfileController`类中的`saveProfile`方法：
- en: '[PRE595]'
  id: totrans-4995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Now that we are able to search for tweets from our profile, we don't need the
    `searchPage` or `TweetController` we previously made. Simply delete the `searchPage.html`
    page and the `TweetController`.
  id: totrans-4996
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够从我们的个人资料搜索推文，我们不再需要之前创建的`searchPage`或`TweetController`。只需删除`searchPage.html`页面和`TweetController`。
- en: To finish, we can modify our home page so that it redirects us to a search matching
    our tastes if we have already completed our profile.
  id: totrans-4997
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以修改我们的主页，这样如果我们已经完成了我们的个人资料，它就会重定向我们到一个符合我们口味的搜索页面。
- en: 'Let''s create a new controller in the controller package. It is responsible
    for redirecting a user arriving at the root of our website either to their profile
    if it''s incomplete or to the `resultPage` if their tastes are available:'
  id: totrans-4998
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在控制器包中创建一个新的控制器。它负责将访问我们网站根目录的用户重定向到他们的个人资料（如果资料不完整）或`resultPage`（如果他们的口味可用）：
- en: '[PRE596]'
  id: totrans-4999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: The check point
  id: totrans-5000
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: In this chapter, we added two controllers, the `PictureUploadController`, which
    is in charge of writing uploaded files to the disk and handling upload errors,
    and the `SearchController` that can search tweets from a list of keywords with
    matrix parameters.
  id: totrans-5001
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了两个控制器，`PictureUploadController`负责将上传的文件写入磁盘并处理上传错误，`SearchController`可以使用矩阵参数从关键字列表中搜索推文。
- en: This controller then delegates the search to a new service, `SearchService`.
  id: totrans-5002
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该控制器将搜索委托给一个新的服务，`SearchService`。
- en: We deleted the old `TweetController`.
  id: totrans-5003
  prefs: []
  type: TYPE_NORMAL
  zh: 我们删除了旧的`TweetController`。
- en: We created a session bean, `UserProfileSession`, to store the information about
    our user.
  id: totrans-5004
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个会话bean，`UserProfileSession`，来存储关于用户的信息。
- en: Finally, we added two things to `WebConfiguration`. We added the error pages
    for our Servlet container and support for matrix variables.
  id: totrans-5005
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在`WebConfiguration`中添加了两个内容。我们为Servlet容器添加了错误页面，并支持矩阵变量。
- en: '![The check point](img/image00961.jpeg)'
  id: totrans-5006
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00961.jpeg)'
- en: On the resources side, we added a picture representing an anonymous user and
    a static page to handle errors. We added the file upload to `profilePage` and
    got rid of the old `searchPage`.
  id: totrans-5007
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源方面，我们添加了一个代表匿名用户的图片和一个处理错误的静态页面。我们将文件上传到`profilePage`，并且删除了旧的`searchPage`。
- en: '![The check point](img/image00962.jpeg)'
  id: totrans-5008
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00962.jpeg)'
- en: Summary
  id: totrans-5009
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed file upload and error handling. Uploading a file
    is not really complicated. However, a big design decision is what to do with the
    uploaded files. We could have stored the images it in a database, but instead
    we chose to write it to the disk and save the location of each user's picture
    in their session.
  id: totrans-5010
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了文件上传和错误处理。上传文件并不是很复杂。然而，一个重要的设计决定是如何处理上传的文件。我们本可以将图片存储在数据库中，但我们选择将其写入磁盘，并将每个用户的图片位置保存在他们的会话中。
- en: We saw typical ways to handle exceptions at the controller level and at the
    servlet container level. For additional resources on Spring MVC error handling,
    you can refer to the blog post at [https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc](https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc).
  id: totrans-5011
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了在控制器级别和Servlet容器级别处理异常的典型方法。有关Spring MVC错误处理的其他资源，您可以参考[https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc](https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc)上的博客文章。
- en: Our application is looking pretty good already and yet the amount of code we
    had to write is very reasonable.
  id: totrans-5012
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序已经看起来相当不错，但我们需要编写的代码量非常合理。
- en: Stay tuned for the next chapter where we will see that Spring MVC is also a
    powerful framework to build REST applications.
  id: totrans-5013
  prefs: []
  type: TYPE_NORMAL
  zh: 敬请关注下一章，我们将看到Spring MVC也是构建REST应用程序的强大框架。
- en: Chapter 4. Crafting a RESTful Application
  id: totrans-5014
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。打造RESTful应用程序
- en: In this chapter, we will have a look at the main principles of a RESTful architecture.
    Then, with the help of very handy tools, we will design a friendly API, leveraging
    Jackson's capabilities to serialize our model in JSON.
  id: totrans-5015
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍RESTful架构的主要原则。然后，借助非常方便的工具，我们将设计一个友好的API，利用Jackson的能力将我们的模型序列化为JSON。
- en: We will document our application with the appropriate error codes and HTTP verbs
    and automatically generate a neat frontend for our application by using Swagger
    UI.
  id: totrans-5016
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用适当的错误代码和HTTP动词记录我们的应用程序，并使用Swagger UI自动生成我们应用程序的整洁前端。
- en: Finally, we will look at the other forms of serialization and learn more about
    the content negotiation mechanism of Spring MVC.
  id: totrans-5017
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将研究其他形式的序列化，并了解更多关于Spring MVC的内容协商机制。
- en: What is REST?
  id: totrans-5018
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是REST？
- en: '**REST** (**Representational State Transfer**) is an architectural style that
    defines best practices for creating scalable web services leveraging the capabilities
    of the HTTP protocol.'
  id: totrans-5019
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST**（表述状态转移）是一种定义创建可扩展Web服务的最佳实践的架构风格，利用了HTTP协议的能力。'
- en: 'A RESTful web service should naturally exhibit the following properties:'
  id: totrans-5020
  prefs: []
  type: TYPE_NORMAL
  zh: 一个RESTful的Web服务应该自然地表现出以下特性：
- en: '**Client-server**: The UI is separated from data storage'
  id: totrans-5021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端-服务器**: UI与数据存储分离'
- en: '**Stateless**: Each request contains enough information for the server to operate
    without maintaining any state'
  id: totrans-5022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**: 每个请求都包含足够的信息，以便服务器在不维护任何状态的情况下运行'
- en: '**Cacheable**: The server''s responses contain enough information to allow
    the clients to make sensible decisions about data storage'
  id: totrans-5023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可缓存**: 服务器的响应包含足够的信息，允许客户端对数据存储做出明智的决定'
- en: '**Uniform interface**: URIs uniquely identify resources and hyperlinks allow
    the API to be discovered'
  id: totrans-5024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一接口**: URI唯一标识资源，超链接允许发现API'
- en: '**Layered**: Each resource of the API provides a sensible level of detail'
  id: totrans-5025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层**: API的每个资源提供了合理的细节水平'
- en: The advantage of such an architecture is that it is simple to maintain and easy
    to discover. It also scales well because there is no need to maintain a persistent
    connection between the server and the client, which eliminates the need for load
    balancing or sticky sessions. Finally, the service is more efficient because the
    information is neatly laid out and easy to cache.
  id: totrans-5026
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的优势在于它易于维护和发现。它还具有良好的可扩展性，因为无需在服务器和客户端之间维护持久连接，这消除了负载平衡或粘性会话的需要。最后，服务更有效，因为信息布局整齐，易于缓存。
- en: Let's see how we can design better APIs incrementally by using Richardson's
    maturity model.
  id: totrans-5027
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过使用Richardson的成熟度模型逐步设计更好的API。
- en: Richardson's maturity model
  id: totrans-5028
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Richardson的成熟度模型
- en: Leonard Richardson is famous for having defined four levels, ranked from 0 to
    3, that describe the level of "RESTfulness" of a web API. Each level requires
    additional work and investment in the API but also provides additional benefits.
  id: totrans-5029
  prefs: []
  type: TYPE_NORMAL
  zh: Leonard Richardson因定义了从0到3的四个级别而闻名，描述了Web API的“RESTfulness”级别。每个级别都需要额外的工作和投资在API中，但也提供了额外的好处。
- en: Level 0 – HTTP
  id: totrans-5030
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级别0 – HTTP
- en: Level 0 is really easy to reach; you just have to make your resource available
    on a network through the HTTP protocol. You can use any data representation you
    find best suited for your use case (XML, JSON, and so on).
  id: totrans-5031
  prefs: []
  type: TYPE_NORMAL
  zh: 级别0真的很容易达到；你只需要通过HTTP协议在网络上提供你的资源。你可以使用你认为最适合你的用例的任何数据表示（XML、JSON等）。
- en: Level 1 – Resources
  id: totrans-5032
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级别1 – 资源
- en: 'Most people think of resources when they hear the term REST. A resource is
    a unique identifier for an element of our model, a user or a tweet, for instance.
    With HTTP, a resource is obviously associated with a unified resource identifier
    URI, as shown in this example:'
  id: totrans-5033
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在听到REST这个词时会想到资源。资源是我们模型中元素的唯一标识符，例如用户或推文。使用HTTP，资源显然与统一资源标识符URI相关联，如下例所示：
- en: '`/users` contains the list of all our users'
  id: totrans-5034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/users` 包含我们所有用户的列表'
- en: '`/user/42` contains a specific user'
  id: totrans-5035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/user/42` 包含特定用户'
- en: '`/user/42/tweets` contains the list of all the tweets associated to this particular
    user'
  id: totrans-5036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/user/42/tweets` 包含与特定用户关联的所有推文的列表'
- en: Maybe your API could allow access to a particular tweet related to a user with
    `/user/42/tweet/3` or maybe each tweet is uniquely identified, in which case you
    might prefer `/tweet/3`.
  id: totrans-5037
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你的API可以允许访问与用户相关的特定推文，使用`/user/42/tweet/3`，或者每条推文都有唯一标识，这种情况下你可能更喜欢`/tweet/3`。
- en: The goal of this level is to deal with the complexity of an application by exposing
    multiple specialized resources.
  id: totrans-5038
  prefs: []
  type: TYPE_NORMAL
  zh: 这个级别的目标是通过公开多个专门的资源来处理应用程序的复杂性。
- en: There is no rule regarding the type of response that your server can return.
    You might want to include only scarce information when you list all the resources
    with `/users` and give more details when a specific resource is requested. Some
    APIs even let you list the fields you are interested in before serving them to
    you.
  id: totrans-5039
  prefs: []
  type: TYPE_NORMAL
  zh: 关于服务器可以返回的响应类型没有规则。当你列出所有资源时，你可能只想包含稀缺信息，并在请求特定资源时提供更多细节。一些API甚至允许你在提供给你之前列出你感兴趣的字段。
- en: 'It really is up to you to define the form of your API, keeping one simple rule
    in mind: the principle of least astonishment. Give your users what they expect
    and your API will already be in good shape.'
  id: totrans-5040
  prefs: []
  type: TYPE_NORMAL
  zh: 真的取决于你来定义API的形式，记住一个简单的规则：最少惊讶原则。给你的用户他们期望的东西，你的API就已经很好了。
- en: Level 2 – HTTP verbs
  id: totrans-5041
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级别2 – HTTP动词
- en: This level is about using the HTTP verbs to identify possible actions on the
    resources. This is a very good way to describe what can be done with your API
    since the HTTP verbs are a well-known standard among developers.
  id: totrans-5042
  prefs: []
  type: TYPE_NORMAL
  zh: 这个级别是关于使用HTTP动词来识别资源上可能的操作。这是描述API可以做什么的一个非常好的方式，因为HTTP动词是开发人员之间的一个众所周知的标准。
- en: 'The main verbs are listed here:'
  id: totrans-5043
  prefs: []
  type: TYPE_NORMAL
  zh: 主要动词列在这里：
- en: '`GET`: This reads data on a particular URI.'
  id: totrans-5044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`: 这读取特定URI上的数据。'
- en: '`HEAD`: This does the same as `GET` without the response body. This is useful
    for getting metadata on a resource (cache information and so on).'
  id: totrans-5045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`：这与`GET`相同，但没有响应主体。这对于获取资源的元数据（缓存信息等）很有用。'
- en: '`DELETE`: This deletes a resource.'
  id: totrans-5046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：这会删除一个资源。'
- en: '`PUT`: This updates or creates a resource.'
  id: totrans-5047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：这会更新或创建一个资源。'
- en: '`POST`: This updates or creates a resource.'
  id: totrans-5048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：这会更新或创建一个资源。'
- en: '`PATCH`: This partially updates a resource.'
  id: totrans-5049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`：这会部分更新一个资源。'
- en: '`OPTIONS`: This returns the list of methods that the server supports on a particular
    resource.'
  id: totrans-5050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`：这会返回服务器在特定资源上支持的方法列表。'
- en: 'Most applications that allow **Create Read Update Delete** (**CRUD**) operations
    get by with only three verbs: `GET`, `DELETE`, and `POST`. The more verbs you
    implement, the richer and more semantic your API becomes. It helps third parties
    to interact with your service by allowing them to type a few commands and see
    what happens.'
  id: totrans-5051
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数允许**创建读取更新删除**（**CRUD**）操作的应用只需要三个动词：`GET`、`DELETE`和`POST`。你实现的动词越多，你的API就会变得越丰富和更有语义。它帮助第三方通过允许他们输入一些命令并查看发生了什么来与你的服务交互。
- en: The `OPTIONS` and `HEAD` verbs are rarely seen because they work on the metadata
    level and are typically not vital to any application.
  id: totrans-5052
  prefs: []
  type: TYPE_NORMAL
  zh: '`OPTIONS`和`HEAD`动词很少见，因为它们在元数据级别上工作，通常对任何应用程序都不是至关重要的。'
- en: At first sight, the `PUT` and `POST` verbs appear to do the same thing. The
    main difference is that the `PUT` verb is said to be idempotent, which means that
    sending the same request multiple times should result in the same server state.
    The implication of that rule is essentially that the `PUT` verb should operate
    on a given URI and contain enough information for the request to succeed.
  id: totrans-5053
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，`PUT`和`POST`动词似乎做着相同的事情。主要区别在于`PUT`动词被认为是幂等的，这意味着多次发送相同的请求应该导致相同的服务器状态。这条规则的含义基本上是，`PUT`动词应该在给定的URI上操作，并包含足够的信息使请求成功。
- en: For instance, a client can use `PUT` data on `/user/42`, and the result will
    be either an update or a creation, depending on whether the entity existed prior
    to the request.
  id: totrans-5054
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，客户端可以在`/user/42`上使用`PUT`数据，结果将是更新或创建，取决于请求之前实体是否存在。
- en: On the other hand, `POST` should be used when you don't exactly know what URI
    you should write to. You could send `POST` to `/users` without specifying an ID
    in the request and expect the user to be created. You could also send `POST` to
    the same `/users` resource, this time specifying a user ID inside the request
    entity and expect the server to update the corresponding user.
  id: totrans-5055
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当你不确定应该写入什么URI时，应该使用`POST`。你可以发送`POST`到`/users`而不在请求中指定ID，并期望用户被创建。你也可以发送`POST`到相同的`/users`资源，这次在请求实体中指定一个用户ID，并期望服务器更新相应的用户。
- en: As you can see, both of these options work. One frequent use case is to use
    `POST` for creation (because, most of the time, the server should be in charge
    of the IDs) and to use `PUT` to update a resource whose ID is already known.
  id: totrans-5056
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这两个选项都有效。一个常见的用例是使用`POST`进行创建（因为大多数情况下，服务器应该负责ID），并使用`PUT`来更新已知ID的资源。
- en: The server might also allow a resource to be modified partially (without the
    client sending the full contents of the resource). It should respond to the `PATCH`
    method in that case.
  id: totrans-5057
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器也可能允许部分修改资源（而不需要客户端发送完整的资源内容）。在这种情况下，它应该响应`PATCH`方法。
- en: At this level, I also encourage you to use meaningful HTTP codes when providing
    responses. We will see the most common codes in a moment.
  id: totrans-5058
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个级别上，我也鼓励你在提供响应时使用有意义的HTTP代码。我们马上会看到最常见的代码。
- en: Level 3 – Hypermedia controls
  id: totrans-5059
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Level 3 - 超媒体控制
- en: 'Hypermedia controls are also known as **Hypertext As The Engine Of Application
    State** (**HATEOAS**). Behind this barbarous acronym lies the most important property
    of a RESTful service: making it discoverable through the use of hypertext links.
    This is essentially the server telling the client what its options are, using
    the response headers or the response entity.'
  id: totrans-5060
  prefs: []
  type: TYPE_NORMAL
  zh: 超媒体控制也被称为**超文本作为应用状态的引擎**（**HATEOAS**）。在这个生僻的首字母缩略词背后，隐藏着RESTful服务最重要的特性：通过超文本链接使其可发现。这本质上是服务器告诉客户端它的选项是什么，使用响应头或响应实体。
- en: For instance, after the creation of a resource with `PUT`, the server should
    return a response with the code `201 CREATED` and send a `Location` header containing
    the URI of the created resource.
  id: totrans-5061
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在使用`PUT`创建资源后，服务器应该返回一个带有`201 CREATED`代码的响应，并发送一个包含创建的资源URI的`Location`头。
- en: 'There is no standard that defines how the link to the other parts of the API
    should look. Spring Data REST, a Spring project that allows you to create a RESTful
    backend with minimal configuration, typically outputs this:'
  id: totrans-5062
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一个标准定义了API其他部分的链接应该是什么样子。Spring Data REST，一个允许你使用最少的配置创建RESTful后端的Spring项目，通常会输出这样：
- en: '[PRE597]'
  id: totrans-5063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: 'Then, go to `/users`:'
  id: totrans-5064
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，去`/users`：
- en: '[PRE598]'
  id: totrans-5065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: This gives you a good idea of what you can do with the API, doesn't it?
  id: totrans-5066
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了你一个关于你可以用API做什么的好主意，不是吗？
- en: API versioning
  id: totrans-5067
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API版本控制
- en: If third-party clients use your API, you could consider versioning your API
    to avoid breaking changes when you update your application.
  id: totrans-5068
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第三方客户端使用你的API，你可以考虑对API进行版本控制，以避免在更新应用程序时出现破坏性变化。
- en: Versioning an API is often a matter of making a set of stable resources available
    under subdomains. For instance, GitLab maintains three versions of its API. They
    are accessible under `https://example/api/v3`, and so on. Like a lot of architectural
    decisions in software, versioning is a tradeoff.
  id: totrans-5069
  prefs: []
  type: TYPE_NORMAL
  zh: 对API进行版本控制通常是提供一组稳定资源在子域下可用的问题。例如，GitLab维护其API的三个版本。它们可以在`https://example/api/v3`下访问，等等。像软件中的许多架构决策一样，版本控制是一种权衡。
- en: It will require more work to design such an API and identify breaking changes
    in the API. Often, the addition of new fields will not be as problematic as removing
    or transforming the API entity results or requests.
  id: totrans-5070
  prefs: []
  type: TYPE_NORMAL
  zh: 设计这样的API并识别API中的破坏性变化将需要更多的工作。通常情况下，添加新字段不会像移除或转换API实体结果或请求那样成为问题。
- en: Most of the time, you will be in charge of both the API and the client, thereby
    removing the need for such sophistication.
  id: totrans-5071
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，您将负责API和客户端，因此不需要这样的复杂性。
- en: Note
  id: totrans-5072
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'See this blog post for a more in-depth discussion about API versioning:'
  id: totrans-5073
  prefs: []
  type: TYPE_NORMAL
  zh: 有关API版本控制的更深入讨论，请参阅此博客文章：
- en: '[http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html](http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html)'
  id: totrans-5074
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html](http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html)'
- en: Useful HTTP codes
  id: totrans-5075
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的HTTP代码
- en: 'Another important aspect of a good RESTful API is to use HTTP codes in a sensible
    way. The HTTP specification defines a lot of standard codes. They should cover
    99 percent of what a good API needs to communicate to its users. The following
    list contains the most important codes, the ones every API should use and every
    developer should know:'
  id: totrans-5076
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的RESTful API的另一个重要方面是以明智的方式使用HTTP代码。HTTP规范定义了许多标准代码。它们应该涵盖良好API需要向其用户传达的99%内容。以下列表包含最重要的代码，每个API都应该使用并且每个开发人员都应该知道：
- en: '| Code | Meaning | Usage |'
  id: totrans-5077
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 意义 | 用法 |'
- en: '| --- | --- | --- |'
  id: totrans-5078
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **2xx - Success** | **These codes are used when everything goes well.** |
      |'
  id: totrans-5079
  prefs: []
  type: TYPE_TB
  zh: '| **2xx - 成功** | **当一切顺利时使用这些代码。** |   |'
- en: '| `200` | Everything is okay. | The request succeeded. |'
  id: totrans-5080
  prefs: []
  type: TYPE_TB
  zh: '| `200` | 一切正常。 | 请求成功。 |'
- en: '| `201` | A resource has been created. | The successful creation of a resource.
    The response should include a list of locations associated with the creation.
    |'
  id: totrans-5081
  prefs: []
  type: TYPE_TB
  zh: '| `201` | 已创建资源 | 资源已成功创建。响应应包括与创建相关联的位置列表。 |'
- en: '| `204` | There is no content to return. | The server has successfully handled
    the request but there is no content to return. |'
  id: totrans-5082
  prefs: []
  type: TYPE_TB
  zh: '| `204` | 没有内容可返回。 | 服务器已成功处理请求，但没有内容可返回。 |'
- en: '| **3xx - Redirection** | **These codes are used when further action is needed
    on the client to fulfill the request**. |   |'
  id: totrans-5083
  prefs: []
  type: TYPE_TB
  zh: '| **3xx - 重定向** | **当客户端需要进一步操作以满足请求时使用这些代码**。 |   |'
- en: '| `301` | Moved permanently | The resource has a changed URI and its new location
    is indicated in the `Location` header. |'
  id: totrans-5084
  prefs: []
  type: TYPE_TB
  zh: '| `301` | 永久移动 | 资源的URI已更改，并且其新位置在`Location`标头中指示。 |'
- en: '| `304` | The resource has not been modified. | The resource has not changed
    since the last time. This response must include the date, ETag, and cache information.
    |'
  id: totrans-5085
  prefs: []
  type: TYPE_TB
  zh: '| `304` | 资源未被修改。 | 资源自上次以来未发生更改。此响应必须包括日期、ETag和缓存信息。 |'
- en: '| **4xx - Client error** | **The request was not successfully performed because
    of a mistake made by the client**. |   |'
  id: totrans-5086
  prefs: []
  type: TYPE_TB
  zh: '| **4xx - 客户端错误** | **由于客户端的错误而导致请求未成功执行**。 |   |'
- en: '| `400` | Bad request | The data sent by the client could not be understood.
    |'
  id: totrans-5087
  prefs: []
  type: TYPE_TB
  zh: '| `400` | 错误的请求 | 服务器无法理解客户端发送的数据。 |'
- en: '| `403` | Forbidden | The request was understood but not allowed. This can
    be enriched with information describing the error. |'
  id: totrans-5088
  prefs: []
  type: TYPE_TB
  zh: '| `403` | 禁止 | 请求已理解但不允许。这可以丰富错误描述信息。 |'
- en: '| `404` | Not found | Nothing matches this URI. This can be used instead of
    403 if information about security shouldn''t be disclosed. |'
  id: totrans-5089
  prefs: []
  type: TYPE_TB
  zh: '| `404` | 未找到 | 没有与此URI匹配的内容。这可以用来替代403，如果不应该透露有关安全性的信息。 |'
- en: '| `409` | Conflict | The request conflicts with another modification. The response
    should include information on how to resolve the conflict. |'
  id: totrans-5090
  prefs: []
  type: TYPE_TB
  zh: '| `409` | 冲突 | 请求与另一个修改冲突。响应应包括有关如何解决冲突的信息。 |'
- en: '| **5xx - Server error** | **An error occurred on the server side**. |   |'
  id: totrans-5091
  prefs: []
  type: TYPE_TB
  zh: '| **5xx - 服务器错误** | **服务器端发生错误**。 |   |'
- en: '| `500` | An internal server error | The server unexpectedly failed to process
    the request. |'
  id: totrans-5092
  prefs: []
  type: TYPE_TB
  zh: '| `500` | 内部服务器错误 | 服务器意外地未能处理请求。 |'
- en: Note
  id: totrans-5093
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a more detailed list, see [http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html).
  id: totrans-5094
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更详细的列表，请参阅[http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html)。
- en: Client is the king
  id: totrans-5095
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户是王者
- en: We will allow third-party clients to retrieve the search results via a REST
    API. These results will be available either in JSON or XML.
  id: totrans-5096
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将允许第三方客户端通过REST API检索搜索结果。这些结果将以JSON或XML的形式提供。
- en: We want to handle requests of the `/api/search/mixed;keywords=springFramework`
    form. This is really similar to the search form we already made, except that the
    request path begins with `api`. Every URI found in this namespace should return
    binary results.
  id: totrans-5097
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望处理`/api/search/mixed;keywords=springFramework`形式的请求。这与我们已经创建的搜索表单非常相似，只是请求路径以`api`开头。在此命名空间中找到的每个URI都应返回二进制结果。
- en: 'Let''s create a new `SearchApiController` class in the `search.api` package:'
  id: totrans-5098
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`search.api`包中创建一个新的`SearchApiController`类：
- en: '[PRE599]'
  id: totrans-5099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: 'This is quite similar to our previous controller, with three subtle differences:'
  id: totrans-5100
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们以前的控制器非常相似，有三个细微的差异：
- en: The controller class is annotated with a `@RequestMapping` annotation. This
    will be our base address and will prefix every other mapping declared in this
    controller.
  id: totrans-5101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类使用`@RequestMapping`注解。这将是我们的基本地址，并将前缀在此控制器中声明的每个其他映射。
- en: We no longer redirect to a view but return a plain object in the search method.
  id: totrans-5102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不再重定向到视图，而是在搜索方法中返回一个普通对象。
- en: The controller is annotated with `@RestController` instead of `@Controller`.
  id: totrans-5103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器使用`@RestController`而不是`@Controller`进行注释。
- en: The `RestController` is a shortcut to declare controllers that will return each
    response as if it were annotated with the `@ResponseBody` annotation. It tells
    Spring to serialize the return type to the appropriate format, which is JSON by
    default.
  id: totrans-5104
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestController`是一种快捷方式，用于声明将每个响应返回为如果使用`@ResponseBody`注解进行注释的控制器。它告诉Spring将返回类型序列化为适当的格式，默认为JSON。'
- en: When working with a REST API, a good practice is to always specify the method
    you will respond to. It's rather unlikely that a request can be handled the same
    way for a `GET` or a `POST` method.
  id: totrans-5105
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用REST API时，一个良好的实践是始终指定您将响应的方法。对于`GET`或`POST`方法，请求能够以相同的方式处理的可能性非常小。
- en: 'If you go to `http://localhost:8080/api/search/mixed;keywords=springFramework`,
    you should get a really large result, as follows:'
  id: totrans-5106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问`http://localhost:8080/api/search/mixed;keywords=springFramework`，您应该会得到一个非常大的结果，如下所示：
- en: '![Client is the king](img/image00963.jpeg)'
  id: totrans-5107
  prefs: []
  type: TYPE_IMG
  zh: '![客户端是王者](img/image00963.jpeg)'
- en: Indeed, Spring handled the serialization of the whole `Tweet` class' attributes
    automatically, using Jackson.
  id: totrans-5108
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，Spring自动处理了整个`Tweet`类的属性的序列化，使用了Jackson。
- en: Debugging a RESTful API
  id: totrans-5109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试RESTful API
- en: With your browser, you will only be able to perform `GET` requests on a specific
    API. The good tools will make your developments much simpler. There are lots of
    tools to test a RESTful API. I will just list the one I use and love.
  id: totrans-5110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器，您只能对特定API执行`GET`请求。好的工具将使您的开发变得更简单。有很多工具可以测试RESTful API。我只会列出我使用和喜爱的工具。
- en: A JSON formatting extension
  id: totrans-5111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON格式化扩展
- en: Often, you will just test the `GET` method and your first reflex will be to
    copy the address into your browser to check the result. In that case, you have
    the possibility to get more than plain text with extensions such as JSON Formatter
    for Chrome or JSONView for Firefox.
  id: totrans-5112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您只会测试`GET`方法，您的第一反应将是将地址复制到浏览器中检查结果。在这种情况下，您有可能获得更多的内容，而不仅仅是纯文本，例如Chrome的JSON
    Formatter或Firefox的JSONView等扩展。
- en: A RESTful client in your browser
  id: totrans-5113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器中的RESTful客户端
- en: The browser is the natural tool for dealing with HTTP requests. However, using
    the address bar will rarely allow you to test your API in detail.
  id: totrans-5114
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器是处理HTTP请求的自然工具。然而，使用地址栏很少能够详细测试您的API。
- en: Postman is an extension for Chrome, and RESTClient is its Firefox counterpart.
    They both have similar features, such as creating and sharing collections of queries,
    modification of the headers, and handling authentication (basic, digest, and OAuth).
    At the time of writing, only RESTClient handles OAuth2.
  id: totrans-5115
  prefs: []
  type: TYPE_NORMAL
  zh: Postman是Chrome的一个扩展，RESTClient是其Firefox的对应物。它们都具有类似的功能，例如创建和共享查询集合、修改标头以及处理身份验证（基本、摘要和OAuth）。在撰写本文时，只有RESTClient处理OAuth2。
- en: httpie
  id: totrans-5116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: httpie
- en: '**httpie** is a command line utility à la curl but oriented towards REST querying.
    It allows you to type commands such as this:'
  id: totrans-5117
  prefs: []
  type: TYPE_NORMAL
  zh: '**httpie**是一个类似curl但面向REST查询的命令行实用程序。它允许您输入诸如此类的命令：'
- en: '[PRE600]'
  id: totrans-5118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: 'It''s a lot friendlier than this ugly version:'
  id: totrans-5119
  prefs: []
  type: TYPE_NORMAL
  zh: 这比这个丑陋的版本要友好得多：
- en: '[PRE601]'
  id: totrans-5120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: Customizing the JSON output
  id: totrans-5121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义JSON输出
- en: Using our tools we are able to easily see the request generated by our server.
    It is huge. By default, Jackson, the JSON serialization library used by Spring
    Boot, will serialize everything that is accessible with a getter method.
  id: totrans-5122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的工具，我们能够轻松地查看服务器生成的请求。它很大。默认情况下，Spring Boot使用的JSON序列化库Jackson将序列化所有可以通过getter方法访问的内容。
- en: 'We would like something lighter, such as this:'
  id: totrans-5123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有一些更轻量级的东西，比如这样：
- en: '[PRE602]'
  id: totrans-5124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: The easiest way to customize which fields will be serialized is by adding annotations
    to our beans. You can either use the `@JsonIgnoreProperties` annotation at the
    class level to ignore a set of properties or add `@JsonIgnore` on the getters
    of the properties you wish to ignore.
  id: totrans-5125
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义将被序列化的字段的最简单方法是向我们的bean添加注释。您可以在类级别使用`@JsonIgnoreProperties`注释来忽略一组属性，或者在希望忽略的属性的getter上添加`@JsonIgnore`。
- en: In our case, the `Tweet` class is not one of our own. It is part of Spring Social
    Twitter, and we do not have the ability to annotate it.
  id: totrans-5126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，`Tweet`类不是我们自己的类。它是Spring Social Twitter的一部分，我们无法对其进行注释。
- en: Using the model classes directly for serialization is rarely a good option.
    It would tie your model to your serialization library, which should remain an
    implementation detail.
  id: totrans-5127
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用模型类进行序列化很少是一个好选择。这将使您的模型与您的序列化库绑定在一起，而这应该保持为一个实现细节。
- en: 'When dealing with unmodifiable code, Jackson provides two options:'
  id: totrans-5128
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理不可修改的代码时，Jackson提供了两个选项：
- en: Creating a new class dedicated to serialization.
  id: totrans-5129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个专门用于序列化的新类。
- en: Using mixins, which are simple classes that will be linked to your model. These
    will be declared in your code and can be annotated with any Jackson annotation.
  id: totrans-5130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用mixins，这些是简单的类，将与您的模型关联起来。这些将在您的代码中声明，并且可以用任何Jackson注释进行注释。
- en: Since we only need to perform some simple transformation on the fields of our
    model (a lot of hiding and a little renaming), we could opt for the mixins.
  id: totrans-5131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只需要对模型的字段进行一些简单的转换（大量隐藏和少量重命名），我们可以选择使用mixins。
- en: It's a good, non-invasive way to rename and exclude fields on the fly with a
    simple class or interface.
  id: totrans-5132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种良好的、非侵入式的方式，可以通过一个简单的类或接口在运行时重命名和排除字段。
- en: Another option to specify subsets of fields used in different parts of the application
    is to annotate them with the `@JsonView` annotation. This won't be covered in
    this chapter, but I encourage you to check out this excellent blog post [https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring](https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring).
  id: totrans-5133
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种指定应用程序不同部分中使用的字段子集的选项是使用`@JsonView`注解对其进行注释。这不会在本章中涵盖，但我鼓励您查看这篇优秀的博客文章[https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring](https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring)。
- en: 'We want to be in control of the output of our APIs, so let''s just create a
    new class called `LightTweet` that can be constructed from a tweet:'
  id: totrans-5134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够控制我们API的输出，所以让我们创建一个名为`LightTweet`的新类，可以从一条推文中构建出来：
- en: '[PRE603]'
  id: totrans-5135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: 'We now need to make our `SearchService` class return the `LightTweets` class
    instead of tweets:'
  id: totrans-5136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要让我们的`SearchService`类返回`LightTweets`类而不是tweets：
- en: '[PRE604]'
  id: totrans-5137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: This will impact the return type of the `SearchApiController` class as well
    as the tweets model attribute in the `SearchController` class. Make the necessary
    modification in those two classes.
  id: totrans-5138
  prefs: []
  type: TYPE_NORMAL
  zh: 这将影响`SearchApiController`类的返回类型，以及`SearchController`类中的tweets模型属性。在这两个类中进行必要的修改。
- en: 'We also need to change the code of the `resultPage.html` file because some
    properties changed (we no longer have a nested `user` property):'
  id: totrans-5139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更改`resultPage.html`文件的代码，因为一些属性已更改（我们不再有嵌套的`user`属性）：
- en: '[PRE605]'
  id: totrans-5140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: 'We''re almost done. If you restart your application and go to `http://localhost:8080/api/search/mixed;keywords=springFramework`,
    you''ll see that the date format is not the one we expected:'
  id: totrans-5141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快要完成了。如果重新启动应用程序并转到`http://localhost:8080/api/search/mixed;keywords=springFramework`，您会发现日期格式不是我们期望的那个：
- en: '![Customizing the JSON output](img/image00964.jpeg)'
  id: totrans-5142
  prefs: []
  type: TYPE_IMG
  zh: '![自定义JSON输出](img/image00964.jpeg)'
- en: 'That''s because Jackson doesn''t have built-in support for JSR-310 dates. Luckily,
    this is easy to fix. Simply add the following library to the dependencies in the
    `build.gradle` file:'
  id: totrans-5143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Jackson没有内置对JSR-310日期的支持。幸运的是，这很容易解决。只需将以下库添加到build.gradle文件中的依赖项中：
- en: '[PRE606]'
  id: totrans-5144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: This indeed changes the date format, but it now outputs an array instead of
    a formatted date.
  id: totrans-5145
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实改变了日期格式，但现在它输出的是一个数组而不是格式化的日期。
- en: To change that, we need to understand what the library did. It includes a new
    Jackson module called JSR-310 Module. A Jackson module is an extension point to
    customize serialization and deserialization. This one will automatically be registered
    by Spring Boot at startup in the `JacksonAutoConfiguration` class, which will
    create a default Jackson `ObjectMapper` method with support for well-known modules.
  id: totrans-5146
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改这一点，我们需要了解库做了什么。它包括一个名为JSR-310 Module的新Jackson模块。Jackson模块是一个扩展点，用于自定义序列化和反序列化。这个模块将由Spring
    Boot在启动时自动注册到JacksonAutoConfiguration类中，该类将创建一个默认的Jackson ObjectMapper方法，并支持众所周知的模块。
- en: We can see that the former module adds a bunch of serializers and deserializers
    for all the new classes defined in JSR-310\. This will try to convert every date
    to an ISO format, whenever possible. See [https://github.com/FasterXML/jackson-datatype-jsr310](https://github.com/FasterXML/jackson-datatype-jsr310).
  id: totrans-5147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到前一个模块为JSR-310中定义的所有新类添加了一堆序列化器和反序列化器。这将尝试将每个日期转换为ISO格式，如果可能的话。请参阅[https://github.com/FasterXML/jackson-datatype-jsr310](https://github.com/FasterXML/jackson-datatype-jsr310)。
- en: If we take a closer look at `LocalDateTimeSerializer`, for instance, we can
    see that it actually has two modes and can switch between the two with a serialization
    feature called `WRITE_DATES_AS_TIMESTAMPS`.
  id: totrans-5148
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们仔细看LocalDateTimeSerializer，我们会发现它实际上有两种模式，并且可以使用称为WRITE_DATES_AS_TIMESTAMPS的序列化特性在两种模式之间切换。
- en: 'To define this property, we need to customize Spring''s default object mapper.
    As we can gather from looking at the auto configuration, Spring MVC provides a
    utility class to create the `ObjectMapper` method that we can use. Add the following
    bean to your `WebConfiguration` class:'
  id: totrans-5149
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义此属性，我们需要自定义Spring的默认对象映射器。从自动配置中可以看出，Spring MVC提供了一个实用类来创建我们可以使用的ObjectMapper方法。将以下bean添加到您的WebConfiguration类中：
- en: '[PRE607]'
  id: totrans-5150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: 'This time, we are done and the dates are properly formatted, as you can see
    here:'
  id: totrans-5151
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们完成了，日期已经格式化正确，如您在这里所见：
- en: '![Customizing the JSON output](img/image00965.jpeg)'
  id: totrans-5152
  prefs: []
  type: TYPE_IMG
  zh: '![自定义JSON输出](img/image00965.jpeg)'
- en: A user management API
  id: totrans-5153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户管理API
- en: 'Our search API is quite good, but let''s do something more interesting. Like
    a lot of web applications, we will need a user management module to identify our
    users. For that, we will create a new `user` package. In this package, we will
    add a model class as follows:'
  id: totrans-5154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的搜索API非常好，但让我们做一些更有趣的事情。像许多Web应用程序一样，我们将需要一个用户管理模块来识别我们的用户。为此，我们将创建一个新的user包。在此包中，我们将添加一个模型类，如下所示：
- en: '[PRE608]'
  id: totrans-5155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: 'Since we do not want to use a database just yet, we will create a `UserRepository`
    class in the same package, backed by a simple `Map`:'
  id: totrans-5156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们暂时不想使用数据库，我们将在同一个包中创建一个UserRepository类，由一个简单的Map支持：
- en: '[PRE609]'
  id: totrans-5157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: 'Finally, in the `user.api` package, we will create a very naive controller
    implementation:'
  id: totrans-5158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在user.api包中，我们将创建一个非常天真的控制器实现：
- en: '[PRE610]'
  id: totrans-5159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: We implemented all the classic CRUD operations with a RESTful repository by
    using the user's e-mail address as a unique identifier.
  id: totrans-5160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用RESTful存储库实现了所有经典的CRUD操作，使用用户的电子邮件地址作为唯一标识符。
- en: In this scenario, you will quickly face problems as Spring strips contents found
    after a dot. The solution is very similar to what we use to support semicolons
    in URLs in the URL mapping with matrix variables section in [Chapter 3](part0147.xhtml#aid-4C62M2
    "Chapter 3. File Upload and Error Handling"), *File Upload and Error Handling*.
  id: totrans-5161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您将很快面临问题，因为Spring会删除点后面找到的内容。解决方案与我们在URL映射中使用的支持URL中的分号的解决方案非常相似，该解决方案在[第3章](part0147.xhtml#aid-4C62M2
    "第3章。文件上传和错误处理")中有所介绍，*文件上传和错误处理*。
- en: 'Add the `useRegisteredSuffixPatternMatch` property that is set to false in
    the `configurePathMatch()` method that we have already defined in the `WebConfiguration`
    class:'
  id: totrans-5162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们已经在WebConfiguration类中定义的configurePathMatch（）方法中添加useRegisteredSuffixPatternMatch属性，该属性设置为false：
- en: '[PRE611]'
  id: totrans-5163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: Now that we've got our API, we can start interacting with it.
  id: totrans-5164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了API，可以开始与之交互了。
- en: 'Here are a few sample commands with httpie:'
  id: totrans-5165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用httpie的示例命令：
- en: '[PRE612]'
  id: totrans-5166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: This is good but not great. Status codes are not yet handled. We will need more
    RESTfulness to climb up the Richardson ladder.
  id: totrans-5167
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但不够好。状态码还没有处理。我们需要更多的RESTfulness来爬上Richardson阶梯。
- en: Status codes and exception handling
  id: totrans-5168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态码和异常处理
- en: 'The first thing we want to do is to correctly handle response statuses. By
    default, Spring automatically deals with some statuses:'
  id: totrans-5169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是正确处理响应状态。默认情况下，Spring会自动处理一些状态：
- en: '`500 Server Error`: This indicates that an exception occurred while handling
    the request.'
  id: totrans-5170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`500 Server Error`：表示处理请求时发生异常。'
- en: '`405 Method not Supported`: This comes up when you use an incorrect method
    on an existing handler.'
  id: totrans-5171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`405 Method not Supported`：当在现有处理程序上使用不正确的方法时出现。'
- en: '`404 Not Found`: This comes up when the handler does not exist.'
  id: totrans-5172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`404 Not Found`：当处理程序不存在时出现。'
- en: '`400 Bad Request`: This indicates that the request body or parameter does not
    match the server''s expectation.'
  id: totrans-5173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`400 Bad Request`：表示请求体或参数与服务器的期望不匹配。'
- en: '`200 OK`: It is thrown for any request handled without an error.'
  id: totrans-5174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200 OK`：对于任何没有错误处理的请求抛出。'
- en: 'With Spring MVC, there are two ways to return status codes:'
  id: totrans-5175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring MVC，有两种返回状态码的方式：
- en: Returning a `ResponseEntity` class from a REST controller
  id: totrans-5176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从REST控制器返回ResponseEntity类
- en: Throwing an exception that will be caught in dedicated handlers
  id: totrans-5177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抛出一个异常，将在专用处理程序中捕获
- en: Status code with ResponseEntity
  id: totrans-5178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ResponseEntity的状态码
- en: The HTTP protocol specifies that we should return a `201 Created` status when
    we create a new user. With our API, this can happen with a `POST` method. We also
    need to throw some 404 errors on operation while working on an entity that does
    not exist.
  id: totrans-5179
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议规定我们在创建新用户时应返回`201 Created`状态。在我们的API中，可以使用`POST`方法实现这一点。在处理不存在的实体时，我们还需要抛出一些404错误。
- en: 'Spring MVC has a class that associates an HTTP status with a response entity.
    It is called `ResponseEntity`. Let''s update our `UserApiController` class to
    handle error codes:'
  id: totrans-5180
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC有一个将HTTP状态与响应实体关联起来的类，称为`ResponseEntity`。让我们更新我们的`UserApiController`类来处理错误代码：
- en: '[PRE613]'
  id: totrans-5181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: You can see that we evolve towards the first level of RESTfulness but there
    is a lot of boilerplate code involved.
  id: totrans-5182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们朝着第一级RESTful发展，但涉及了大量样板代码。
- en: Status codes with exceptions
  id: totrans-5183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常状态代码
- en: 'Another way to handle errors in our API is to throw exceptions. There are two
    ways to map exceptions with Spring MVC:'
  id: totrans-5184
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的API中处理错误的另一种方法是抛出异常。有两种方法可以将异常映射到Spring MVC中：
- en: Using `@ExceptionHandler` at the class level, like we did for `IOException`
    in our upload controller in [Chapter 3](part0147.xhtml#aid-4C62M2 "Chapter 3. File
    Upload and Error Handling"), *File Upload and Error Handling*
  id: totrans-5185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类级别使用`@ExceptionHandler`，就像我们在[第3章](part0147.xhtml#aid-4C62M2 "第3章。文件上传和错误处理")中的上传控制器中对`IOException`所做的那样，*文件上传和错误处理*
- en: Using `@ControllerAdvice` to catch global exceptions thrown by all controllers
    or a subset of your controllers
  id: totrans-5186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@ControllerAdvice`来捕获所有控制器抛出的全局异常或一部分控制器抛出的异常
- en: These two options help you make some business-oriented decisions and define
    a set of practices within your application.
  id: totrans-5187
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个选项可以帮助您做出一些面向业务的决策，并在应用程序中定义一套实践。
- en: To associate these handlers with HTTP status codes, we can either inject the
    response in the annotated method and use the `HttpServletResponse.sendError()`
    method or just annotate the method with the `@ResponseStatus` annotation.
  id: totrans-5188
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些处理程序与HTTP状态代码关联起来，我们可以在注释方法中注入响应，并使用`HttpServletResponse.sendError()`方法，或者只需在方法上注释`@ResponseStatus`注解。
- en: We will define our own exception, `EntityNotFoundException`. Our business repositories
    will throw this exception when the entity the user is working on cannot be found.
    This will help relieve the API code.
  id: totrans-5189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义自己的异常，`EntityNotFoundException`。当用户正在处理的实体找不到时，我们的业务存储库将抛出此异常。这将有助于简化API代码。
- en: 'Here is the code for the exception. We can put it in a new package called `error`:'
  id: totrans-5190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是异常的代码。我们可以将其放在一个名为`error`的新包中：
- en: '[PRE614]'
  id: totrans-5191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: 'Our repository will now throw exceptions in various locations. We will also
    differentiate between saving and updating a user:'
  id: totrans-5192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的存储库现在将在各个位置抛出异常。我们还将区分保存和更新用户：
- en: '[PRE615]'
  id: totrans-5193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: 'Our controller becomes simpler since it doesn''t have to handle the 404 status.
    We now throw the `EntityNotFound` exception from our controller methods:'
  id: totrans-5194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器变得更简单，因为它不必处理404状态。我们现在从我们的控制器方法中抛出`EntityNotFound`异常：
- en: '[PRE616]'
  id: totrans-5195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: 'If we don''t handle this exception, Spring will throw a 500 error by default.
    To handle it we will create a small class in the error package, right next to
    our `EntityNotFoundException` class. It will be called `EntityNotFoundMapper`
    class and will be in charge of handling the exception:'
  id: totrans-5196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不处理此异常，Spring将默认抛出500错误。为了处理它，我们将在错误包中创建一个小类，就在我们的`EntityNotFoundException`类旁边。它将被称为`EntityNotFoundMapper`类，并负责处理异常：
- en: '[PRE617]'
  id: totrans-5197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: The `@ControllerAdvice` annotation allows us to add some behaviors to a set
    of controllers by annotating a bean. Those controller advice can handle exceptions
    but also declare model attributes with `@ModelAttribute` or validator policies
    with `@InitBinder`.
  id: totrans-5198
  prefs: []
  type: TYPE_NORMAL
  zh: '@ControllerAdvice`注解允许我们通过对bean进行注解来为一组控制器添加一些行为。这些控制器建议可以处理异常，还可以使用`@ModelAttribute`声明模型属性或使用`@InitBinder`声明验证器策略。'
- en: With the code we just wrote, we handle all the `EntityNotFoundException` class
    thrown by our controllers in one place and associate it with the 404 status. That
    way, we can abstract this notion and ensure that our application will handle it
    consistently in all controllers.
  id: totrans-5199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们刚刚编写的代码，我们可以在一个地方处理我们的控制器抛出的所有`EntityNotFoundException`类，并将其与404状态关联起来。这样，我们可以抽象这个概念，并确保我们的应用程序在所有控制器中一致地处理它。
- en: We are not going to deal with hyperlinks in our API at our level. Instead, I
    encourage you to have a look at Spring HATEOAS and Spring Data REST, which provide
    very elegant solutions to make your resources more discoverable.
  id: totrans-5200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算在我们的API中处理超链接。相反，我鼓励您查看Spring HATEOAS和Spring Data REST，它们提供了非常优雅的解决方案，使您的资源更易发现。
- en: Documentation with Swagger
  id: totrans-5201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swagger文档
- en: 'Swagger is a really awesome project that will allow you to document and interact
    with your API within an HTML5 webpage. The following screenshot illustrates the
    API documentation:'
  id: totrans-5202
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger是一个非常棒的项目，它可以让您在HTML5网页中记录和与API进行交互。以下截图展示了API文档：
- en: '![Documentation with Swagger](img/image00966.jpeg)'
  id: totrans-5203
  prefs: []
  type: TYPE_IMG
  zh: '![Swagger文档](img/image00966.jpeg)'
- en: Swagger used to be big (written in Scala) and somewhat complicated to configure
    with a Spring setup. Since version 2.0, the library has been rewritten and a really
    neat project called `spring-fox` will allow for easy integration.
  id: totrans-5204
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger以前很庞大（用Scala编写）并且在Spring设置中有些复杂。自2.0版本以来，该库已经被重写，一个名为`spring-fox`的非常整洁的项目将允许轻松集成。
- en: Note
  id: totrans-5205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`spring-fox`, formerly known as `swagger-springmvc`, has been in existence
    for more than three years and is still a very active project.'
  id: totrans-5206
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-fox`，以前称为`swagger-springmvc`，已经存在三年多了，仍然是一个非常活跃的项目。'
- en: 'Add the following dependencies to your build file:'
  id: totrans-5207
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到构建文件中：
- en: '[PRE618]'
  id: totrans-5208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: The first one will provide an annotation to enable Swagger in your application
    as well as an API to describe your resources with annotations. Swagger will then
    generate a JSON representation of your API.
  id: totrans-5209
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个将提供一个注解，以在您的应用程序中启用Swagger，并使用注解描述您的资源。Swagger然后将生成您的API的JSON表示。
- en: The second is a WebJar that contains static resources consuming the generated
    JSON through a web client.
  id: totrans-5210
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是一个WebJar，其中包含通过Web客户端使用生成的JSON的静态资源。
- en: 'The only thing you need to do now is add the `@EnableSwagger2` annotation to
    your `WebConfiguration` class:'
  id: totrans-5211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您唯一需要做的就是将`@EnableSwagger2`注解添加到您的`WebConfiguration`类中：
- en: '[PRE619]'
  id: totrans-5212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: The `swagger-ui.jar` file we just added contains an HTML file in `META-INF/resources`.
  id: totrans-5213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的`swagger-ui.jar`文件中包含了`META-INF/resources`中的HTML文件。
- en: It will automatically be served by Spring Boot when you go to `http://localhost:8080/swagger-ui.html`.
  id: totrans-5214
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问`http://localhost:8080/swagger-ui.html`时，Spring Boot会自动提供它。
- en: By default, Springfox will scan your whole classpath and show all the request
    mappings declared in your application.
  id: totrans-5215
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Springfox将扫描整个类路径，并显示应用程序中声明的所有请求映射。
- en: 'In our case, we only want to expose the API:'
  id: totrans-5216
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们只想公开API：
- en: '[PRE620]'
  id: totrans-5217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: Springfox works with groups of `Docket`s that you have to define as beans in
    your configuration classes. They are logical grouping for RESTful resources. An
    application can have many of them.
  id: totrans-5218
  prefs: []
  type: TYPE_NORMAL
  zh: Springfox与`Docket`组合一起工作，您必须在配置类中定义它们作为bean。它们是RESTful资源的逻辑分组。一个应用程序可以有很多。
- en: Have a look at the documentation ([http://springfox.github.io/springfox](http://springfox.github.io/springfox))
    to see all the different setups available.
  id: totrans-5219
  prefs: []
  type: TYPE_NORMAL
  zh: 查看文档（[http://springfox.github.io/springfox](http://springfox.github.io/springfox)）以查看所有可用的不同设置。
- en: Generating XML
  id: totrans-5220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成XML
- en: RESTful APIs sometimes return responses in different media types (JSON, XML,
    and so on). The mechanism responsible for choosing the correct media type is known
    as content negotiation in Spring.
  id: totrans-5221
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API有时会以不同的媒体类型（JSON、XML等）返回响应。负责选择正确媒体类型的机制在Spring中称为内容协商。
- en: By default, in Spring MVC, the `ContentNegotiatingViewResolver` bean will be
    in charge of resolving the correct content according to the content negotiation
    policies defined in your application.
  id: totrans-5222
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC中，默认情况下，`ContentNegotiatingViewResolver` bean将负责根据应用程序中定义的内容协商策略来解析正确的内容。
- en: You can have a look at `ContentNegotiationManagerFactoryBean` to see how these
    policies are applied within Spring MVC.
  id: totrans-5223
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看`ContentNegotiationManagerFactoryBean`，了解这些策略在Spring MVC中是如何应用的。
- en: 'Content type can be resolved with the following strategies:'
  id: totrans-5224
  prefs: []
  type: TYPE_NORMAL
  zh: 内容类型可以通过以下策略解析：
- en: According to the `Accept` header sent by the client
  id: totrans-5225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据客户端发送的`Accept`头部
- en: With a parameter such as `?format=json`
  id: totrans-5226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用参数，如`?format=json`
- en: With a path extension such as `/myResource.json` or `/myResource.xml`
  id: totrans-5227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路径扩展，如`/myResource.json`或`/myResource.xml`
- en: You can customize these strategies in your Spring configuration by overriding
    the `configureContentNegotiation()` method of the `WebMvcConfigurerAdapter` class.
  id: totrans-5228
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过覆盖`WebMvcConfigurerAdapter`类的`configureContentNegotiation()`方法来自定义这些策略在Spring配置中的使用。
- en: By default, Spring will use the `Accept` header and the path extension.
  id: totrans-5229
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring将使用`Accept`头部和路径扩展。
- en: 'To enable XML serialization with Spring Boot, you can add the following dependency
    to your classpath:'
  id: totrans-5230
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Spring Boot中启用XML序列化，您可以将以下依赖项添加到类路径中：
- en: '[PRE621]'
  id: totrans-5231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: 'If you explore your API with your browser and go to `http://localhost:8080/api/users`,
    you will see the result as XML, as follows:'
  id: totrans-5232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用浏览器浏览您的API并转到`http://localhost:8080/api/users`，您将看到以下结果为XML：
- en: '![Generating XML](img/image00967.jpeg)'
  id: totrans-5233
  prefs: []
  type: TYPE_IMG
  zh: '![生成XML](img/image00967.jpeg)'
- en: 'That''s because your browser doesn''t usually request JSON, but XML is second
    after HTML. This is shown in the following screenshot:'
  id: totrans-5234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为您的浏览器通常不会请求JSON，但XML在HTML之后。如下截图所示：
- en: '![Generating XML](img/image00968.jpeg)'
  id: totrans-5235
  prefs: []
  type: TYPE_IMG
  zh: '![生成XML](img/image00968.jpeg)'
- en: To get JSON back, you can either go to `http://localhost:8080/api/users.json`
    or send the appropriate `Accept` header with Postman or httpie.
  id: totrans-5236
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取JSON，您可以转到`http://localhost:8080/api/users.json`，或者使用Postman或httpie发送适当的`Accept`头部。
- en: The check point
  id: totrans-5237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: In this chapter, we added a search `ApiController` class. Because the tweets
    returned by the Twitter API were not adapted to our usage, we introduced a `LightTweet`
    class to transform them into a friendlier format.
  id: totrans-5238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了一个搜索`ApiController`类。因为Twitter API返回的推文不适合我们的使用，我们引入了一个`LightTweet`类来将它们转换为更友好的格式。
- en: We also developed a user API. The `User` class is the model. The users are stored
    and retrieved via the `UserRepository` class, and the `UserApiController` class
    exposes HTTP endpoints to perform CRUD operations on the users. We also added
    a generic exception and a mapper to associate the exception to an HTTP status.
  id: totrans-5239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还开发了一个用户API。`User`类是模型。用户通过`UserRepository`类存储和检索，`UserApiController`类公开HTTP端点以执行用户的CRUD操作。我们还添加了一个通用异常和一个将异常与HTTP状态关联的映射器。
- en: 'In the configuration, we added a bean that documents our API, thanks to Swagger,
    and we customized the serialization of our JSR-310 dates. Our code base should
    look like the following:'
  id: totrans-5240
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置中，我们添加了一个文档化我们的API的bean，感谢Swagger，并且我们自定义了JSR-310日期的序列化。我们的代码库应该如下所示：
- en: '![The check point](img/image00969.jpeg)'
  id: totrans-5241
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00969.jpeg)'
- en: Summary
  id: totrans-5242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to create a RESTful API with Spring MVC. This
    kind of backend yields great benefits in terms of performance and maintenance
    and can do wonders when coupled with a JavaScript MVC framework such as Backbone,
    Angular JS, or React.js.
  id: totrans-5243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何使用Spring MVC创建RESTful API。这种后端在性能和维护方面都有很大的好处，当与JavaScript MVC框架（如Backbone、Angular
    JS或React.js）配合使用时，效果更佳。
- en: We saw how to handle errors and exceptions properly and learned how to leverage
    the HTTP status to make a better API.
  id: totrans-5244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何正确处理错误和异常，并学会了如何利用HTTP状态来创建更好的API。
- en: Finally we added automatic documentation with Swagger and added the ability
    to produce both XML and JSON.
  id: totrans-5245
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用Swagger添加了自动文档，并增加了生成XML和JSON的能力。
- en: In the next chapter, we will learn how to secure our application as well as
    use the Twitter API to sign our users up.
  id: totrans-5246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何保护我们的应用程序，并使用Twitter API注册我们的用户。
- en: Chapter 5. Securing Your Application
  id: totrans-5247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。保护您的应用程序
- en: In this chapter, we'll learn how to secure our web application and also how
    to cope with the security challenges of modern, distributed web applications.
  id: totrans-5248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何保护我们的Web应用程序，以及如何应对现代分布式Web应用程序的安全挑战。
- en: 'This chapter will be broken up into five parts:'
  id: totrans-5249
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分为五个部分：
- en: First, we will set up basic HTTP authentication in a few minutes
  id: totrans-5250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将在几分钟内设置基本的HTTP认证
- en: Then, we will design a form-based authentication for the web pages, keeping
    the basic authentication for the RESTful API
  id: totrans-5251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将为网页设计基于表单的认证，保留RESTful API的基本认证
- en: We will allow the users to sign up via the Twitter OAuth API
  id: totrans-5252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将允许用户通过Twitter OAuth API进行注册
- en: Then, we will leverage Spring Session to make sure our application can scale
    using a distributed session mechanism
  id: totrans-5253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将利用Spring Session来确保我们的应用程序可以使用分布式会话机制进行扩展
- en: Finally, we will configure Tomcat to use a secured connection through SSL
  id: totrans-5254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将配置Tomcat使用SSL进行安全连接
- en: Basic authentication
  id: totrans-5255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本认证
- en: The simplest possible authentication mechanism is basic authentication ([http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)).
    In a nutshell, our pages will not be available without username and password.
  id: totrans-5256
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的身份验证机制是基本认证（[http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)）。简而言之，如果没有用户名和密码，我们的页面将无法访问。
- en: Our server will indicate our resources are secured by sending the `401 Not Authorized`
    HTTP status code and generate a `WWW-Authenticate` header.
  id: totrans-5257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务器将通过发送“401未经授权”的HTTP状态码并生成“WWW-Authenticate”头来指示我们的资源受到保护。
- en: To successfully pass the security check, the client must send an `Authorization`
    header containing the `Basic` value followed by a base 64 encoding of the `user:password`
    string. A browser window will prompt the user for a username and a password, granting
    them access to the secured pages if authentication is successful.
  id: totrans-5258
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功通过安全检查，客户端必须发送一个包含“Basic”值后面跟着“user:password”字符串的base 64编码的“Authorization”头。浏览器窗口将提示用户输入用户名和密码，如果认证成功，用户将获得对受保护页面的访问权限。
- en: 'Let''s add Spring Security to our dependencies:'
  id: totrans-5259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将Spring Security添加到我们的依赖项中：
- en: '[PRE622]'
  id: totrans-5260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: 'Relaunch your application and navigate to any URL in your application. You
    will be prompted for a username and a password:'
  id: totrans-5261
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动应用程序并导航到应用程序中的任何URL。系统将提示您输入用户名和密码：
- en: '![Basic authentication](img/image00970.jpeg)'
  id: totrans-5262
  prefs: []
  type: TYPE_IMG
  zh: '![基本认证](img/image00970.jpeg)'
- en: 'If you fail to authenticate, you will see that a `401` error is thrown. The
    default username is `user`. The correct password for authentication will be randomly
    generated each time the application launches and will be displayed in the server
    log:'
  id: totrans-5263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您未能进行身份验证，您将看到抛出“401”错误。默认用户名是“user”。身份验证的正确密码将在每次应用程序启动时随机生成，并显示在服务器日志中：
- en: '[PRE623]'
  id: totrans-5264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: By default, Spring Security secures every resource except a handful of classic
    routes such as `/css/`, `/js/`, `/images/`, and `**/favicon.ico`.
  id: totrans-5265
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Security保护除“/css/”、“/js/”、“/images/”和“**/favicon.ico”等少数经典路由之外的所有资源。
- en: 'If you wish to configure the default credentials, you can add the following
    properties to the `application.properties` file:'
  id: totrans-5266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望配置默认凭据，可以将以下属性添加到“application.properties”文件中：
- en: '[PRE624]'
  id: totrans-5267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: Authorized users
  id: totrans-5268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权用户
- en: 'Having only one user in our application does not allow fine-grained security.
    If we wanted more control over the user credentials, we could add the following
    `SecurityConfiguration` class in the `config` package:'
  id: totrans-5269
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中只有一个用户不允许进行细粒度的安全控制。如果我们想要更多地控制用户凭据，我们可以在“config”包中添加以下“SecurityConfiguration”类：
- en: '[PRE625]'
  id: totrans-5270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: This snippet will set up an in-memory system containing our application's users
    as well as their roles. It will override the security name and password previously
    defined in the application's properties.
  id: totrans-5271
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将设置一个包含我们应用程序用户及其角色的内存系统。它将覆盖先前在应用程序属性中定义的安全名称和密码。
- en: The `@EnableGlobalMethodSecurity` annotation will allow us to annotate our application's
    method and classes to define their security level.
  id: totrans-5272
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableGlobalMethodSecurity`注释将允许我们对应用程序的方法和类进行注释，以定义它们的安全级别。'
- en: 'For example, let''s say that only the administrators of our application can
    access the user API. In this case, we just have to add the `@Secured` annotation
    to our resource to allow access only to ADMIN roles:'
  id: totrans-5273
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们的应用程序只有管理员才能访问用户API。在这种情况下，我们只需在资源中添加“@Secured”注释，以允许仅对ADMIN角色进行访问：
- en: '[PRE626]'
  id: totrans-5274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: We can easily test that with httpie by using the `-a` switch to use basic authentication
    and the `-p=h` switch, which will only display the response headers.
  id: totrans-5275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用httpie轻松测试，通过使用“-a”开关使用基本认证和“-p=h”开关，只显示响应头。
- en: 'Let''s try this with a user without the admin profile:'
  id: totrans-5276
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下没有管理员配置文件的用户：
- en: '[PRE627]'
  id: totrans-5277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: 'Now, with the administrator:'
  id: totrans-5278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用管理员：
- en: '[PRE628]'
  id: totrans-5279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: 'You will also notice that Spring Security automatically added some common security
    headers:'
  id: totrans-5280
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到Spring Security自动添加了一些常见的安全头：
- en: '`Cache Control`: This prevents the user from caching secured resources'
  id: totrans-5281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cache Control`：这可以防止用户缓存受保护的资源'
- en: '`X-XSS-Protection`: This tells the browser to block what looks like CSS'
  id: totrans-5282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-XSS-Protection`：这告诉浏览器阻止看起来像CSS的东西'
- en: '`X-Frame-Options`: This disallows our site from being embedded in an IFrame'
  id: totrans-5283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Frame-Options`：这将禁止我们的网站嵌入到IFrame中'
- en: '`X-Content-Type-Options`: This prevents browsers from guessing the MIME types
    of malicious resources used to forge XSS attacks'
  id: totrans-5284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Content-Type-Options`：这可以防止浏览器猜测用于伪造XSS攻击的恶意资源的MIME类型'
- en: Note
  id: totrans-5285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A comprehensive list of these headers is available at [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers).
  id: totrans-5286
  prefs: []
  type: TYPE_NORMAL
  zh: 这些头的全面列表可在[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers)上找到。
- en: Authorized URLs
  id: totrans-5287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权的URL
- en: Annotating our controller is very easy but isn't always the most viable option.
    Sometimes, we just want total control over our authorization.
  id: totrans-5288
  prefs: []
  type: TYPE_NORMAL
  zh: 注释我们的控制器非常容易，但并不总是最可行的选择。有时，我们只想完全控制我们的授权。
- en: Remove the `@Secured` annotation; we will come up with something better.
  id: totrans-5289
  prefs: []
  type: TYPE_NORMAL
  zh: 删除“@Secured”注释；我们将想出更好的办法。
- en: 'Let''s see what Spring Security will allow us to do by modifying the `SecurityConfiguration`
    class:'
  id: totrans-5290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看通过修改“SecurityConfiguration”类，Spring Security允许我们做什么：
- en: '[PRE629]'
  id: totrans-5291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: In the preceding code sample, we configured our application's security policy
    by using Spring Security's fluent API.
  id: totrans-5292
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用Spring Security的流畅API配置了应用程序的安全策略。
- en: This API allows us to configure Spring Security globally by invoking methods
    associated with different security concerns and chaining with the `and()` method.
  id: totrans-5293
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用与不同安全问题相关的方法并与`and()`方法链接，此API允许我们全局配置Spring Security。
- en: What we just defined is a basic authentication, without CSRF protection. Requests
    on `/login` and `/logout` will be allowed for all users. `GET` requests on the
    API will only be permitted for users with the `USER` role, whereas `POST`, `PUT`,
    and `DELETE` requests on the API will only be accessible to users with the ADMIN
    roles. Finally, every other request will require authentication with any role.
  id: totrans-5294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚定义的是基本身份验证，没有CSRF保护。所有用户将允许在`/login`和`/logout`上的请求。对API的`GET`请求只允许具有`USER`角色的用户，而对API的`POST`、`PUT`和`DELETE`请求只对具有ADMIN角色的用户可访问。最后，每个其他请求将需要任何角色的身份验证。
- en: CSRF stands for **Cross Site Request Forgery** and refers to an attack where
    a malicious website would display a form on its website and post the form data
    on yours. If the user of your site is not signed out, the `POST` request would
    retain the user cookies and would therefore be authorized.
  id: totrans-5295
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF代表**跨站点请求伪造**，指的是一种攻击，恶意网站会在其网站上显示一个表单，并在您的网站上发布表单数据。如果您网站的用户没有注销，`POST`请求将保留用户的cookie，因此将被授权。
- en: CSRF protection will generate short-lived tokens that will be posted along with
    the form data. We will see how to properly enable it in the next section; for
    now, let's just disable it. See [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf)
    for more details.
  id: totrans-5296
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF保护将生成短暂的令牌，这些令牌将与表单数据一起发布。我们将在下一节中看到如何正确启用它；现在，让我们先禁用它。有关更多详细信息，请参见[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf)。
- en: Note
  id: totrans-5297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the authorize request API, have a look at [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests).
  id: totrans-5298
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关授权请求API的更多信息，请查看[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests)。
- en: Thymeleaf security tags
  id: totrans-5299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Thymeleaf安全标签
- en: Sometimes, you will need to display data coming from the authentication layer,
    for example the user's name and roles, or hide and display part of a web page
    according to users' authorities. The `thymeleaf-extras-springsecurity` module
    will allow us to do so.
  id: totrans-5300
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要显示来自身份验证层的数据，例如用户的名称和角色，或根据用户的权限隐藏和显示网页的一部分。`thymeleaf-extras-springsecurity`模块将允许我们这样做。
- en: 'Add the following dependency to your `build.gradle` file:'
  id: totrans-5301
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到您的`build.gradle`文件中：
- en: '[PRE630]'
  id: totrans-5302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: 'With this library, we can add a little block under our navigation bar in `layout/default.html`
    to display the logged-in user:'
  id: totrans-5303
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此库，我们可以在`layout/default.html`的导航栏下添加一个小块，以显示已登录的用户：
- en: '[PRE631]'
  id: totrans-5304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: 'Note the new namespace in the HTML declaration and the `sec:authentication`
    attributes. It allows access to the properties of the `org.springframework.security.core.Authentication`
    object, which represents the user who is currently logged in, as shown in the
    following screenshot:'
  id: totrans-5305
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意HTML声明中的新命名空间和`sec:authentication`属性。它允许访问`org.springframework.security.core.Authentication`对象的属性，该对象表示当前登录的用户，如下截图所示：
- en: '![Thymeleaf security tags](img/image00971.jpeg)'
  id: totrans-5306
  prefs: []
  type: TYPE_IMG
  zh: '![Thymeleaf安全标签](img/image00971.jpeg)'
- en: Don't click on the logout link just yet as it doesn't work with basic authentication.
    We will get it to work in the next part.
  id: totrans-5307
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时不要点击注销链接，因为它与基本身份验证不兼容。我们将在下一部分使其工作。
- en: 'The `lib` tag also has a handful of other tags, such as the one to check user
    authorizations:'
  id: totrans-5308
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`标签还有一些其他标签，例如用于检查用户授权的标签：'
- en: '[PRE632]'
  id: totrans-5309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: Note
  id: totrans-5310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to the documentation available at [https://github.com/thymeleaf/thymeleaf-extras-springsecurity](https://github.com/thymeleaf/thymeleaf-extras-springsecurity)
    to learn more about the library.
  id: totrans-5311
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://github.com/thymeleaf/thymeleaf-extras-springsecurity](https://github.com/thymeleaf/thymeleaf-extras-springsecurity)上可用的文档，以了解有关该库的更多信息。
- en: The login form
  id: totrans-5312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录表单
- en: Basic authentication is good for our RESTful API, but we would rather have a
    login page carefully designed by our team to improve the web experience.
  id: totrans-5313
  prefs: []
  type: TYPE_NORMAL
  zh: 基本身份验证对于我们的RESTful API很好，但我们更希望有一个由我们团队精心设计的登录页面，以改善网页体验。
- en: 'Spring Security allows us to define as many `WebSecurityConfigurerAdapter`
    classes as we need. We will split our `SecurityConfiguration` class into two parts:'
  id: totrans-5314
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security允许我们定义尽可能多的`WebSecurityConfigurerAdapter`类。我们将把我们的`SecurityConfiguration`类分成两部分：
- en: '`ApiSecurityConfiguration`: This will be configured first. This will secure
    the RESTful endpoints with basic authentication.'
  id: totrans-5315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApiSecurityConfiguration`：这将首先进行配置。这将使用基本身份验证保护RESTful端点。'
- en: '`WebSecurityConfiguration`: This will then configure login form for the rest
    of our application.'
  id: totrans-5316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebSecurityConfiguration`：然后将为我们应用程序的其余部分配置登录表单。'
- en: 'You can remove or rename `SecurityConfiguration` and create `ApiSecurityConfiguration`
    instead:'
  id: totrans-5317
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以删除或重命名`SecurityConfiguration`，并创建`ApiSecurityConfiguration`代替：
- en: '[PRE633]'
  id: totrans-5318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: 'Note the `@Order(1)` annotation, which will ensure that this configuration
    is executed before the other one. Then, create a second configuration for the
    web, called `WebSecurityConfiguration`:'
  id: totrans-5319
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`@Order(1)`注解，这将确保在执行其他配置之前执行此配置。然后，创建第二个用于Web的配置，称为`WebSecurityConfiguration`：
- en: '[PRE634]'
  id: totrans-5320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: The result of this code is that anything matching `/api/**` will be secured
    with basic authentication, without CSRF protection. Then, the second configuration
    will be loaded. It will secure anything else. Everything in this part of the application
    requires the client to be authenticated, except requests on WebJars and on the
    login page (this will avoid the redirection loop).
  id: totrans-5321
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的结果是，与`/api/**`匹配的任何内容都将受到基本身份验证的保护，而不受CSRF保护。然后，将加载第二个配置。它将保护其他所有内容。应用程序的这一部分中的所有内容都需要客户端进行身份验证，除了WebJars上的请求和登录页面上的请求（这将避免重定向循环）。
- en: If an unauthenticated user tries to access a protected resource, they will automatically
    be redirected to the login page.
  id: totrans-5322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未经身份验证的用户尝试访问受保护的资源，他们将自动重定向到登录页面。
- en: 'By default, the login URL is `GET /login`. The default login will be posted
    via a `POST /login` request that will contain three values: a user name (`username`),
    a password (`password`) and a CSRF token (`_csrf`). If the login is unsuccessful,
    the user will be redirected to `/login?error`. The default logout page is a `POST
    /logout` request with a CSRF token.'
  id: totrans-5323
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，登录URL是`GET /login`。默认登录将通过`POST /login`请求发布，其中将包含三个值：用户名（`username`）、密码（`password`）和CSRF令牌（`_csrf`）。如果登录不成功，用户将被重定向到`/login?error`。默认注销页面是一个带有CSRF令牌的`POST
    /logout`请求。
- en: Now, if you try to navigate on your application, this form will be generated
    automatically!
  id: totrans-5324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试在应用程序上导航，此表单将自动生成！
- en: If you are already logged in from a previous attempt, close your browser; this
    will clear up the session.
  id: totrans-5325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经从以前的尝试中登录，请关闭浏览器；这将清除会话。
- en: '![The login form](img/image00972.jpeg)'
  id: totrans-5326
  prefs: []
  type: TYPE_IMG
  zh: '![登录表单](img/image00972.jpeg)'
- en: We can now log in and out of our application!
  id: totrans-5327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以登录和退出应用程序了！
- en: 'This is lovely but we can do a lot better with very little effort. First, we
    will define a login page on `/login` in the `WebSecurityConfiguration` class:'
  id: totrans-5328
  prefs: []
  type: TYPE_NORMAL
  zh: 这很可爱，但我们可以用很少的努力做得更好。首先，我们将在`WebSecurityConfiguration`类中定义一个`/login`登录页面：
- en: '[PRE635]'
  id: totrans-5329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: 'This will let us create our own login page. To do that, we will need a very
    simple controller to handle the `GET login` request. You can create one in the
    `authentication` package:'
  id: totrans-5330
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让我们创建自己的登录页面。为此，我们需要一个非常简单的控制器来处理`GET login`请求。您可以在`authentication`包中创建一个：
- en: '[PRE636]'
  id: totrans-5331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: 'This will trigger the display of the `login.html` page located in the template
    directory. Let''s create it:'
  id: totrans-5332
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发位于模板目录中的`login.html`页面的显示。让我们创建它：
- en: '[PRE637]'
  id: totrans-5333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: Note that we handle the error message and that we post a CSRF token. We also
    use the default username and password input names, but those are configurable
    if needed. The result looks much better already!
  id: totrans-5334
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们处理错误消息，并发布CSRF令牌。我们还使用默认的用户名和密码输入名称，但如果需要，这些是可配置的。结果看起来已经好多了！
- en: '![The login form](img/image00973.jpeg)'
  id: totrans-5335
  prefs: []
  type: TYPE_IMG
  zh: '![登录表单](img/image00973.jpeg)'
- en: You can see right away that Spring Security assigns anonymous credentials to
    all non-authenticated users by default.
  id: totrans-5336
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以立即看到，Spring Security默认为所有非经过身份验证的用户分配匿名凭据。
- en: 'We shouldn''t show the sign-out button to an anonymous user so we can wrap
    the corresponding HTML part in `sec:authorize="isAuthenticated()"` to display
    it to authenticated users only, like so:'
  id: totrans-5337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不应该向匿名用户显示登出按钮，因此我们可以将相应的HTML部分包装在`sec:authorize="isAuthenticated()"`中，只显示给经过身份验证的用户，如下所示：
- en: '[PRE638]'
  id: totrans-5338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: Twitter authentication
  id: totrans-5339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter身份验证
- en: Our application is strongly integrated with Twitter, so it seems logical that
    we would allow authentication through Twitter.
  id: totrans-5340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序与Twitter强烈集成，因此允许我们通过Twitter进行身份验证似乎是合乎逻辑的。
- en: 'Before going further, make sure that you have enabled Twitter sign in on your
    app on Twitter ([https://apps.twitter.com](https://apps.twitter.com)):'
  id: totrans-5341
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您已在Twitter应用程序上启用了Twitter登录（[https://apps.twitter.com](https://apps.twitter.com)）：
- en: '![Twitter authentication](img/image00974.jpeg)'
  id: totrans-5342
  prefs: []
  type: TYPE_IMG
  zh: '![Twitter身份验证](img/image00974.jpeg)'
- en: Setting up social authentication
  id: totrans-5343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置社交身份验证
- en: Spring social enables authentication through an OAuth provider such as Twitter
    through a signin/signup scenario. It will intercept a `POST` request on `/signin/twitter`.
    If the user is not known to the `UsersConnectionRepository` interface, the `signup`
    endpoint will be called. It will allow us to take the necessary measures to register
    the user on our system and maybe ask them for additional details.
  id: totrans-5344
  prefs: []
  type: TYPE_NORMAL
  zh: Spring social通过OAuth提供程序（如Twitter）实现身份验证，通过登录/注册场景。它将拦截`/signin/twitter`上的`POST`请求。如果用户未知于`UsersConnectionRepository`接口，则将调用`signup`端点。这将允许我们采取必要措施在我们的系统上注册用户，也许要求他们提供额外的细节。
- en: 'Let''s get to work. The first thing we need to do is to add the `signin/**`
    and `/signup` URLs as publicly available resources. Let''s modify our `WebSecurityConfiguration`
    class, changing the `permitAll` line:'
  id: totrans-5345
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始工作。我们需要做的第一件事是将`signin/**`和`/signup` URL添加为公开可用的资源。让我们修改我们的`WebSecurityConfiguration`类，更改`permitAll`行：
- en: '[PRE639]'
  id: totrans-5346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: To enable the signin/signup scenario, we also need a `SignInAdapter` interface,
    a simple listener that will be called when an already known user signs in again.
  id: totrans-5347
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用登录/注册场景，我们还需要一个`SignInAdapter`接口，一个简单的监听器，当已知用户再次登录时将被调用。
- en: 'We can create an `AuthenticatingSignInAdapter` class right next to our `LoginController`:'
  id: totrans-5348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的`LoginController`旁边创建一个`AuthenticatingSignInAdapter`类。
- en: '[PRE640]'
  id: totrans-5349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: 'As you can see, this handler is called at the perfect time to allow user authentication
    with Spring Security. We''ll come back to that in just a moment. For now, we need
    to define our `SignupController` class in the same package, the one in charge
    of first-time visiting users:'
  id: totrans-5350
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，此处理程序在完美的时间调用，允许用户使用Spring Security进行身份验证。我们马上就会回到这一点。现在，我们需要在同一个包中定义我们的`SignupController`类，负责首次访问用户：
- en: '[PRE641]'
  id: totrans-5351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: First, this controller retrieves the current connection from the session. Then,
    it authenticates the user through the same method as before. Lastly, it will trigger
    the `doPostSignUp` event, which will allow Spring Social to store information
    relative to our user in the `UsersConnectionRepository` interface that we mentioned
    earlier.
  id: totrans-5352
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，此控制器从会话中检索当前连接。然后，它通过与之前相同的方法对用户进行身份验证。最后，它将触发`doPostSignUp`事件，这将允许Spring
    Social在我们之前提到的`UsersConnectionRepository`接口中存储与我们的用户相关的信息。
- en: 'The last thing we need to do is add a triumphant "login with twitter" button
    to our login page, right below the previous form:'
  id: totrans-5353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是在我们的登录页面下方的前一个表单下面添加一个成功的“使用Twitter登录”按钮：
- en: '[PRE642]'
  id: totrans-5354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '![Setting up social authentication](img/image00975.jpeg)'
  id: totrans-5355
  prefs: []
  type: TYPE_IMG
  zh: '![设置社交身份验证](img/image00975.jpeg)'
- en: 'When the user clicks on the **CONNECT WITH TWITTER** button, they will be redirected
    to a Twitter sign in page:'
  id: totrans-5356
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**使用Twitter连接**按钮时，他们将被重定向到Twitter登录页面：
- en: '![Setting up social authentication](img/image00976.jpeg)'
  id: totrans-5357
  prefs: []
  type: TYPE_IMG
  zh: '![设置社交身份验证](img/image00976.jpeg)'
- en: Explanation
  id: totrans-5358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释
- en: There isn't much code, but it is a bit tricky to understand all the parts. The
    first step to getting what's going on is to have a look at the `SocialWebAutoConfiguration`
    class of Spring Boot.
  id: totrans-5359
  prefs: []
  type: TYPE_NORMAL
  zh: 代码不多，但要理解所有部分有点棘手。理解正在发生的事情的第一步是查看Spring Boot的`SocialWebAutoConfiguration`类。
- en: 'The `SocialAutoConfigurationAdapter` class declared in this class contains
    the following bean:'
  id: totrans-5360
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中声明的`SocialAutoConfigurationAdapter`类包含以下bean：
- en: '[PRE643]'
  id: totrans-5361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: 'The `ProviderSignInController` class will automatically be set up if one `ProviderSignInController`
    class is detected in our configuration. This controller is the cornerstone of
    the sign-in process. Have a look at what it does (I will only summarize the important
    parts):'
  id: totrans-5362
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在我们的配置中检测到一个`ProviderSignInController`类，那么`ProviderSignInController`类将自动设置。这个控制器是登录过程的基石。看一下它的功能（我只会总结重要的部分）：
- en: It will handle the `POST /signin/{providerId}` from our connect button
  id: totrans-5363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将处理我们的连接按钮的`POST /signin/{providerId}`
- en: It will redirect the user to the appropriate sign-in URL of our identification
    provider
  id: totrans-5364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将重定向用户到我们身份提供者的适当登录URL
- en: It will be notified of the OAuth token by a `GET /signin/{providerId}` from
    the identification provider
  id: totrans-5365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将通过`GET /signin/{providerId}`从身份提供者接收到OAuth令牌
- en: It will then handle the sign in
  id: totrans-5366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后它将处理登录
- en: If the user is not found in the `UsersConnectionRepository` interface, it will
    use a `SessionStrategy` interface to store the pending login request and will
    then redirect to the `signupUrl` page
  id: totrans-5367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在`UsersConnectionRepository`接口中找不到用户，它将使用`SessionStrategy`接口来存储待处理的登录请求，然后重定向到`signupUrl`页面
- en: If the user is found, the `SignInAdapter` interface is called and the user is
    redirected to the `postSignupUrl` page
  id: totrans-5368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找到用户，则会调用`SignInAdapter`接口，并将用户重定向到`postSignupUrl`页面。
- en: The two important components of this identification are the `UsersConnectionRepository`
    interface in charge of storing and retrieving users from some kind of storage
    and the `SessionStrategy` interface that will temporarily store the user connection
    so it can be retrieved from the `SignupController` class.
  id: totrans-5369
  prefs: []
  type: TYPE_NORMAL
  zh: 这个身份验证的两个重要组件是`UsersConnectionRepository`接口，负责从某种存储中存储和检索用户，以及`SessionStrategy`接口，它将临时存储用户连接，以便可以从`SignupController`类中检索到。
- en: By default, Spring Boot creates an `InMemoryUsersConnectionRepository` interface
    for each authentication provider, which means that our user connection data will
    be stored in memory. If we restart the server, the user will become unknown and
    will go through the sign-up process again.
  id: totrans-5370
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot为每个身份验证提供程序创建一个`InMemoryUsersConnectionRepository`接口，这意味着我们的用户连接数据将存储在内存中。如果重新启动服务器，用户将变为未知用户，并且将再次通过注册流程。
- en: The `ProviderSignInController` class defaults to `HttpSessionSessionStrategy`,
    which will store the connection in the HTTP session. The `ProviderSignInUtils`
    class that we use in our `SignupController` class also uses this strategy by default.
    If we were distributing our application on multiple servers, this would be problematic
    because the session would likely not be available on every server.
  id: totrans-5371
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProviderSignInController`类默认使用`HttpSessionSessionStrategy`，它会将连接存储在HTTP会话中。我们在`SignupController`类中使用的`ProviderSignInUtils`类也默认使用这个策略。如果我们在多个服务器上分发我们的应用程序，这可能会有问题，因为会话可能不会在每台服务器上都可用。'
- en: It is easy enough to override these defaults by providing a custom `SessionStrategy`
    interface to both the `ProviderSignInController` and `ProviderSignInUtils` classes
    to store data somewhere other than in the HTTP session.
  id: totrans-5372
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为`ProviderSignInController`和`ProviderSignInUtils`类提供自定义的`SessionStrategy`接口，可以轻松地覆盖这些默认设置，以将数据存储在HTTP会话之外的其他位置。
- en: Likewise, we can use another kind of storage for our user connection data by
    providing another implementation of the `UsersConnectionRepository` interface.
  id: totrans-5373
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过提供`UsersConnectionRepository`接口的另一个实现来为我们的用户连接数据使用另一种存储方式。
- en: 'Spring Social provides a `JdbcUsersConnectionRepository` interface that will
    automatically save authenticated users in a `UserConnection` table in your database.
    This won''t be covered in this book extensively, but you should be able to configure
    it easily by adding the following bean to your configuration:'
  id: totrans-5374
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Social提供了一个`JdbcUsersConnectionRepository`接口，它会自动将经过身份验证的用户保存在数据库中的`UserConnection`表中。这本书不会对此进行详细介绍，但您应该可以通过将以下bean添加到配置中来轻松配置它：
- en: '[PRE644]'
  id: totrans-5375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: Note
  id: totrans-5376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Check out this article [http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html](http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html)
    on my blog for more details.
  id: totrans-5377
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我的博客上的这篇文章[http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html](http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html)以获取更多详细信息。
- en: Distributed sessions
  id: totrans-5378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式会话
- en: As we have seen in the preceding section, there are several moments when Spring
    Social stores things in the HTTP session. Our user profile is also stored in the
    session. This is a classical approach to keeping things in memory as long as a
    user is navigating the site.
  id: totrans-5379
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的部分中看到的，Spring Social在几个时刻将东西存储在HTTP会话中。我们的用户配置文件也存储在会话中。这是一个经典的方法，可以在用户浏览网站时将东西保存在内存中。
- en: However, this can prove troublesome if we want to scale our application and
    distribute the load to multiple backend servers. We have now entered the cloud
    era, and [Chapter 7](part0187.xhtml#aid-5IAP61 "Chapter 7. Optimizing Your Requests"),
    *Optimizing Your Requests* will be about deploying our application to the cloud.
  id: totrans-5380
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们想要扩展我们的应用程序并将负载分布到多个后端服务器，这可能会带来麻烦。我们现在已经进入了云时代，[第7章](part0187.xhtml#aid-5IAP61
    "第7章。优化您的请求")，“优化您的请求”将讨论将我们的应用程序部署到云端。
- en: 'To make our session work in a distributed environment, we have a few options:'
  id: totrans-5381
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的会话在分布式环境中工作，我们有几种选择：
- en: We could use sticky sessions. This will ensure that a specific user will always
    be redirected to the same server and keep its session. It requires additional
    configuration for the deployment and isn't a particularly elegant approach.
  id: totrans-5382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用粘性会话。这将确保特定用户始终被重定向到同一台服务器并保持其会话。这需要额外的部署配置，并不是特别优雅的方法。
- en: Refactor our code to put data in a database instead of the session. We can then
    load the user's data from the database if we associate it with a cookie or a token
    sent by the client with each request.
  id: totrans-5383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构我们的代码，将数据放入数据库而不是会话中。然后，如果我们将其与客户端发送的每个请求一起使用的cookie或令牌相关联，我们可以从数据库中加载用户的数据。
- en: Use the Spring Session project to transparently use a distributed database such
    as Redis as the underlying session provider.
  id: totrans-5384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Session项目透明地使用分布式数据库，如Redis作为底层会话提供程序。
- en: In this chapter, we will see how to set up the third approach. It is really
    easy to set up and provides the amazing benefit that it can be turned off without
    impacting the functionality of our application.
  id: totrans-5385
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何设置第三种方法。设置起来非常容易，并且提供了惊人的好处，即可以在不影响应用程序功能的情况下关闭它。
- en: 'The first thing we need to do is to install Redis. To install it on Mac, use
    the `brew` command:'
  id: totrans-5386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是安装Redis。在Mac上安装它，使用`brew`命令：
- en: '[PRE645]'
  id: totrans-5387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: For other platforms, follow the instructions at [http://redis.io/download](http://redis.io/download).
  id: totrans-5388
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他平台，请按照[http://redis.io/download](http://redis.io/download)上的说明进行操作。
- en: 'You can then start the server by using the following command:'
  id: totrans-5389
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下命令启动服务器：
- en: '[PRE646]'
  id: totrans-5390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: 'Add the following dependencies to your `build.gradle` file:'
  id: totrans-5391
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到您的`build.gradle`文件中：
- en: '[PRE647]'
  id: totrans-5392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: 'Create a new configuration file next to `application.properties` called `application-redis.properties`:'
  id: totrans-5393
  prefs: []
  type: TYPE_NORMAL
  zh: 在`application.properties`旁边创建一个名为`application-redis.properties`的新配置文件：
- en: '[PRE648]'
  id: totrans-5394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: Spring Boot provides a convenient way of associating configuration files with
    a profile. In this case, the `application-redis.properties` file will only be
    loaded if the Redis profile is active.
  id: totrans-5395
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了一种方便的方式来将配置文件与配置文件关联。在这种情况下，只有在Redis配置文件处于活动状态时，才会加载`application-redis.properties`文件。
- en: 'Then, create a `RedisConfig` class in the `config` package:'
  id: totrans-5396
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`config`包中创建一个`RedisConfig`类：
- en: '[PRE649]'
  id: totrans-5397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: As you can see, this configuration will only be active if the `redis` profile
    is on.
  id: totrans-5398
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，此配置仅在`redis`配置文件处于活动状态时才会生效。
- en: 'We''re done! We can now launch our app with the following flag:'
  id: totrans-5399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！现在我们可以使用以下标志启动我们的应用程序：
- en: '[PRE650]'
  id: totrans-5400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: 'You can also generate the JAR with `gradlew build` and launch it with the following
    command:'
  id: totrans-5401
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`gradlew build`生成JAR文件，并使用以下命令启动它：
- en: '[PRE651]'
  id: totrans-5402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: 'Alternatively, you can launch it with Gradle in Bash, as follows:'
  id: totrans-5403
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在Bash中使用Gradle启动它，如下所示：
- en: '[PRE652]'
  id: totrans-5404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: You can also simply set it up as a JVM option in the run configuration of your
    IDE.
  id: totrans-5405
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以简单地将其设置为IDE运行配置中的JVM选项。
- en: And that's it! You now have a server storing the details of your logged-in users.
    This means that we can scale and have multiple servers for our web resources and
    our users won't notice. And we didn't have to write any code on our side.
  id: totrans-5406
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在您有一个服务器存储着您已登录用户的详细信息。这意味着我们可以扩展并为我们的Web资源拥有多个服务器，而我们的用户不会注意到。而且我们不必在我们这边编写任何代码。
- en: This also means that you will keep your session even if you restart your server.
  id: totrans-5407
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着即使重新启动服务器，您也将保留会话。
- en: 'To see that it works, connect to Redis with the `redis-cli` command. At the
    beginning, it will not contain any keys:'
  id: totrans-5408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证它是否有效，请使用`redis-cli`命令连接到Redis。一开始，它将不包含任何键：
- en: '[PRE653]'
  id: totrans-5409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: 'Navigate to your app and start putting things in the session:'
  id: totrans-5410
  prefs: []
  type: TYPE_NORMAL
  zh: 转到您的应用程序并开始将内容放入会话中：
- en: '[PRE654]'
  id: totrans-5411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: Note
  id: totrans-5412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can consult the list of available commands at [http://redis.io/commands](http://redis.io/commands).
  id: totrans-5413
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://redis.io/commands](http://redis.io/commands)上查看可用命令的列表。
- en: SSL
  id: totrans-5414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSL
- en: '**Secure Sockets Layer** (**SSL**) is a security protocol in which data is
    encrypted and sent to a trusted party via a certificate. In this part, I will
    show you the different ways to create a secured connection with Spring Boot. The
    completion of these steps is not mandatory to start the next chapter. They are
    included for completeness, so feel free to skip them if you are in a hurry to
    deploy your application to the cloud.'
  id: totrans-5415
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全套接字层**（**SSL**）是一种安全协议，其中数据经过加密并通过证书发送给受信任的一方。在本部分中，我将向您展示使用Spring Boot创建安全连接的不同方法。完成这些步骤对于开始下一章并不是强制性的。它们包含在内是为了完整起见，因此如果您急于将应用程序部署到云端，可以随意跳过它们。'
- en: In [Chapter 8](part0196.xhtml#aid-5QTE81 "Chapter 8. Deploying Your Web Application
    to the Cloud"), *Deploying Your Web Application to the Cloud*, we will see that
    most cloud platforms already handle SSL so we don't have to configure it at our
    end.
  id: totrans-5416
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0196.xhtml#aid-5QTE81 "第8章。将您的Web应用程序部署到云端")，“将您的Web应用程序部署到云端”中，我们将看到大多数云平台已经处理SSL，因此我们不必在我们这边进行配置。
- en: Generating a self-signed certificate
  id: totrans-5417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成自签名证书
- en: Normally, X.509 certificates are delivered by a Certificate Authority. They
    generally bill you for the service, so for testing purposes, we can create our
    own self-signed keystore file.
  id: totrans-5418
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，X.509证书由证书颁发机构提供。他们通常会向您收费，因此，为了测试目的，我们可以创建自己的自签名密钥库文件。
- en: 'The JDK comes with a binary called keytool, which is used to manage certificates.
    With it, you can create a keystore and import certificates into an existing keystore.
    You can issue the following command inside your project root to create one:'
  id: totrans-5419
  prefs: []
  type: TYPE_NORMAL
  zh: JDK自带一个名为keytool的二进制文件，用于管理证书。使用它，您可以创建一个密钥库并将证书导入现有的密钥库中。您可以在项目根目录内发出以下命令来创建一个：
- en: '[PRE655]'
  id: totrans-5420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: This will generate a keystore named `masterspringmvc` with the RSA algorithm
    and will store it in a keystore in `src/main/resources`.
  id: totrans-5421
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为`masterspringmvc`的密钥库，使用RSA算法，并将其存储在`src/main/resources`中的密钥库中。
- en: Tip
  id: totrans-5422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Do not push the keystore to your repository. It can be brute-forced, which would
    void the security of your website. You should also generate keystores with strong,
    randomly generated passwords.
  id: totrans-5423
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将密钥库推送到您的存储库中。它可能会被暴力破解，这将使您的网站的安全性失效。您还应该使用强大的、随机生成的密码生成密钥库。
- en: The easy way
  id: totrans-5424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的方法
- en: 'If all you care about is having one secure https channel and no http channel,
    it is as easy as it gets:'
  id: totrans-5425
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只关心有一个安全的https通道而没有http通道，那就很容易了：
- en: '[PRE656]'
  id: totrans-5426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: Tip
  id: totrans-5427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Do not push your passwords to your repository. Use the `${}` notation to import
    environment variables.
  id: totrans-5428
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将密码推送到您的存储库中。使用`${}`符号导入环境变量。
- en: The dual way
  id: totrans-5429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双重方式
- en: 'If you want to have both the http and the https channels available in your
    application, you should add this kind of configuration to your application:'
  id: totrans-5430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在应用程序中同时使用http和https通道，您应该向应用程序添加这种配置：
- en: '[PRE657]'
  id: totrans-5431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: This will load the previously generated keystore to create an additional channel
    on port 8443 in addition to port 8080.
  id: totrans-5432
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载先前生成的密钥库，以在8080端口之外创建一个额外的8443端口的通道。
- en: 'You can use Spring Security to automatically redirect connections from `http`
    to `https` with the following configuration:'
  id: totrans-5433
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Spring Security自动将连接从`http`重定向到`https`，配置如下：
- en: '[PRE658]'
  id: totrans-5434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: Behind a secured server
  id: totrans-5435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在一个安全的服务器后面
- en: The most convenient way to secure your application with SSL is often to put
    it behind an SSL-enabled web server such as Apache or CloudFlare. These will often
    use de facto headers to indicate that the connection was previously initiated
    with SSL.
  id: totrans-5436
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用SSL保护应用程序的最便捷方式是将其放在一个启用了SSL的Web服务器后面，如Apache或CloudFlare。这些通常会使用事实上的标头来指示连接先前是使用SSL发起的。
- en: 'Spring Boot can understand this protocol if you tell it what the correct headers
    are in your `application.properties` file:'
  id: totrans-5437
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您告诉Spring Boot您的`application.properties`文件中正确的标头是什么，它就可以理解这个协议：
- en: '[PRE659]'
  id: totrans-5438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: Note
  id: totrans-5439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the documentation here for more details at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server).
  id: totrans-5440
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅此处的文档[http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server)。
- en: The check point
  id: totrans-5441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: 'In this chapter, we added three pieces of configuration: `ApiSecurityConfiguration`,
    which configures our REST API to use basic HTTP authentication; `WebSecurityConfiguration`,
    which sets up a login form for our web users to sign in with either an account
    or with Twitter; and `RedisConfig`, which allows our sessions to be stored and
    retrieved from a Redis server.'
  id: totrans-5442
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了三个配置项：`ApiSecurityConfiguration`，用于配置我们的REST API使用基本的HTTP身份验证；`WebSecurityConfiguration`，为我们的Web用户设置一个登录表单，以便使用帐户或Twitter登录；以及`RedisConfig`，允许我们的会话存储和从Redis服务器检索。
- en: 'In the authentication package, we added a `LoginController` class that redirects
    to our login page, a `SignupController` class that will be called the first time
    a user signs up with Twitter, and an `AuthenticatingSignInAdapater` class that
    will be called on every login with Twitter:'
  id: totrans-5443
  prefs: []
  type: TYPE_NORMAL
  zh: 在认证包中，我们添加了一个`LoginController`类，用于重定向到我们的登录页面，一个`SignupController`类，第一次用户使用Twitter注册时将调用它，以及一个`AuthenticatingSignInAdapater`类，每次使用Twitter登录时都会调用它：
- en: '![The check point](img/image00977.jpeg)'
  id: totrans-5444
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00977.jpeg)'
- en: Summary
  id: totrans-5445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Securing our web application with Spring is really simple. The possibilities
    are endless, and advanced configurations such as social sign in are at your fingertips.
    Distributing sessions and scaling also take a matter of minutes.
  id: totrans-5446
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring来保护我们的Web应用程序非常简单。可能性是无限的，高级配置如社交登录也近在咫尺。分发会话和扩展也只需要几分钟。
- en: In the next chapter, we will see how to test our application and ensure it never
    regresses.
  id: totrans-5447
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何测试我们的应用程序，并确保它永远不会退化。
- en: Chapter 6. Leaving Nothing to Luck – Unit Tests and Acceptance Tests
  id: totrans-5448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。不留任何机会——单元测试和验收测试
- en: In this chapter, we will see why and how our application should be tested. We
    will see the differences between unit tests and acceptance tests, and learn how
    to do both.
  id: totrans-5449
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到为什么以及如何测试我们的应用程序。我们将看到单元测试和验收测试之间的区别，并学习如何进行两者。
- en: This chapter is divided in two parts. In the first part, we will write tests
    in Java while studying the different ways of testing. In the second part, which
    is shorter, we will write the exact same tests in Groovy, and see how we can improve
    our code readability with this awesome language.
  id: totrans-5450
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为两部分。在第一部分中，我们将使用Java编写测试，同时学习不同的测试方法。在第二部分中，我们将使用Groovy编写完全相同的测试，并看看如何使用这种令人敬畏的语言来提高我们的代码可读性。
- en: If you do everything in this chapter, you will have double tests, so feel free
    to keep only the tests that are most readable for you.
  id: totrans-5451
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本章中做了所有的事情，您将有双重测试，所以请随意保留对您最易读的测试。
- en: Why should I test my code?
  id: totrans-5452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我要测试我的代码？
- en: Working in the Java world has made a lot of developers aware of the importance
    of tests. A good series of tests can catch regressions early and allows us to
    be more confident when we ship our product.
  id: totrans-5453
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java世界工作使许多开发人员意识到测试的重要性。一系列良好的测试可以及早发现回归，并在我们发布产品时让我们更有信心。
- en: A lot of people are now familiar with the notion of continuous integration ([http://www.thoughtworks.com/continuous-integration](http://www.thoughtworks.com/continuous-integration)).
    This is a practice where a server is in charge of building the application every
    time a change is made on the source control system.
  id: totrans-5454
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很多人都熟悉持续集成的概念（[http://www.thoughtworks.com/continuous-integration](http://www.thoughtworks.com/continuous-integration)）。这是一种实践，其中服务器负责在源代码控制系统上进行更改时构建应用程序。
- en: The build should be as fast as possible and capable of self testing. The main
    idea of this practice is to get a fast feedback loop; you should get details about
    what went wrong as soon as something in the system breaks.
  id: totrans-5455
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应该尽可能快，并且能够自我测试。这种实践的主要思想是获得快速的反馈循环；一旦系统中的某些东西出现问题，你应该尽快了解出了什么问题。
- en: Why should you care? After all, testing your application is an additional cost;
    the time spent designing and maintaining tests will necessarily eat into some
    development time.
  id: totrans-5456
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么要在意？毕竟，测试你的应用程序是额外的成本；花在设计和维护测试上的时间必然会占用一些开发时间。
- en: 'Actually, the later a bug is found, the costlier it gets. If you think about
    it, even a bug found by your QA team begins to cost more than a bug you find on
    your own. It forces you to switch back to the context you were in when writing
    the code: why did I write this line? What was the underlying business rule of
    that function?'
  id: totrans-5457
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，bug 被发现得越晚，成本就越高。如果你仔细想想，甚至由你的 QA 团队发现的 bug 的成本也比你自己发现的 bug 更高。它迫使你回到编写代码时的上下文：我为什么写这一行？那个函数的基础业务规则是什么？
- en: If you write tests early on and are able to launch them in a few seconds, it
    will certainly cost less time to address potential bugs in your code.
  id: totrans-5458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你早早地编写测试，并且能够在几秒钟内启动它们，那么在你的代码中解决潜在 bug 肯定会花费更少的时间。
- en: Another benefit of tests is that they act as a living documentation of your
    code. While writing extensive documentation, and even code comments, can prove
    ineffective because they easily become outdated, forming the habit of writing
    a good test for limit cases or surprising behaviors will act as a safety net for
    the future.
  id: totrans-5459
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的另一个好处是它们作为代码的活文档。写大量的文档，甚至是代码注释，可能会变得无效，因为它们很容易过时，养成为极限情况或意外行为编写良好测试的习惯将成为未来的安全网。
- en: What is this line of code for? Have you ever found yourself asking this kind
    of question? Well, if you have a good set of unit tests, you can just remove it
    and see what breaks! Tests give us an unprecedented confidence in our code and
    in our ability to refactor it. Software is very fragile. If you stop caring, it
    will slowly rot and die.
  id: totrans-5460
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码是干什么用的？你有没有发现自己问过这种问题？如果你有一套良好的单元测试，你可以删除它并查看结果！测试给了我们对代码和重构能力前所未有的信心。软件非常脆弱。如果你不在乎它，它会慢慢腐烂和死亡。
- en: Be responsible—don't let your code die!
  id: totrans-5461
  prefs: []
  type: TYPE_NORMAL
  zh: 要负责任——不要让你的代码死掉！
- en: How should I test my code?
  id: totrans-5462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该如何测试我的代码？
- en: There are different kinds of tests that we can perform on a piece of software,
    such as security tests, performances test, and so on. As developers, we will focus
    on the tests we can automate and that will help improve our code.
  id: totrans-5463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对软件进行不同类型的测试，比如安全测试、性能测试等。作为开发人员，我们将专注于我们可以自动化的测试，并且将有助于改进我们的代码。
- en: 'The tests fall under two categories: unit tests and acceptance tests. The test
    pyramid ([http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html))
    shows in what proportions these tests should be written:'
  id: totrans-5464
  prefs: []
  type: TYPE_NORMAL
  zh: 测试分为两类：单元测试和验收测试。测试金字塔（[http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html)）显示了这些测试应该以什么比例编写：
- en: '![How should I test my code?](img/image00978.jpeg)'
  id: totrans-5465
  prefs: []
  type: TYPE_IMG
  zh: '![我应该如何测试我的代码？](img/image00978.jpeg)'
- en: 'At the bottom of the pyramid, you have the unit tests (fast to launch and relatively
    easy to maintain), and at the top, UI tests (costlier and slower to execute).
    Integration tests sit in the middle: they can be viewed as big unit tests with
    complex interactions between units.'
  id: totrans-5466
  prefs: []
  type: TYPE_NORMAL
  zh: 在金字塔的底部，你有单元测试（启动快，相对容易维护），在顶部是 UI 测试（成本更高，执行速度更慢）。集成测试位于中间：它们可以被视为具有单元之间复杂交互的大型单元测试。
- en: The idea of the pyramid is to remind you to put your focus where you have the
    most impact and get the best feedback loops.
  id: totrans-5467
  prefs: []
  type: TYPE_NORMAL
  zh: 金字塔的理念是提醒你把焦点放在你影响最大并且获得最佳反馈循环的地方。
- en: Test-driven development
  id: totrans-5468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: 'Many developers develop the healthy habit of **Test-driven Development** (**TTD**).
    This practice, inherited from Extreme Programming (XP), is the process of splitting
    each development stage into small steps and then writing a failing test for every
    one of them. You make the necessary modifications so that the tests pass again
    (test are green). You can then refactor your code as long as the tests remain
    green. The following figure illustrates the TDD cycle:'
  id: totrans-5469
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员养成了良好的测试驱动开发（TTD）的习惯。这种实践是从极限编程（XP）继承而来的，它将每个开发阶段分成小步骤，然后为每个步骤编写一个失败的测试。你进行必要的修改，使测试再次通过（测试变绿）。然后你可以重构你的代码，只要测试仍然是绿色的。以下图示了
    TDD 的循环：
- en: '![Test-driven development](img/image00979.jpeg)'
  id: totrans-5470
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发](img/image00979.jpeg)'
- en: You can iterate until the feature is done with very short feedback loops, with
    the insurance of no regressions, and the guarantee that all the code you write
    will be tested from the very beginning.
  id: totrans-5471
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过非常短的反馈循环迭代，直到功能完成，保证没有回归，并且保证你从一开始就测试了所有的代码。
- en: 'TDD gets its share of criticisms. The most interesting ones are these:'
  id: totrans-5472
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 受到了批评。最有趣的批评是这些：
- en: It takes more time to write the tests than to do the actual implementation
  id: totrans-5473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写测试比实际实现需要更多的时间
- en: It can lead to poorly designed applications
  id: totrans-5474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能导致设计不良的应用程序
- en: The truth of the matter is that it takes time to become a good TDD practitioner.
    Once you get the feeling of what should be tested and know your tools well enough,
    you won't lose much time at all.
  id: totrans-5475
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，成为一个优秀的 TDD 实践者需要时间。一旦你知道应该测试什么，并且足够了解你的工具，你将不会浪费太多时间。
- en: It also takes experienced developers to craft an application with a proper design
    using TDD (or with any other methodology). Poor design can be a side effect of
    TDD if you get trapped in the baby steps mantra and forget to look at the big
    picture. It is true that TDD won't magically lead to great application design,
    so be careful and remember to take a step back after completing each feature.
  id: totrans-5476
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD（或任何其他方法）来设计一个具有良好设计的应用程序也需要有经验的开发人员。如果你陷入了baby steps的咒语并忘记了看大局，那么糟糕的设计可能是TDD的副作用。TDD不会奇迹般地导致出色的应用程序设计，所以要小心，并记得在完成每个功能后退一步。
- en: From the beginning of the book, we have only had one autogenerated unit test
    in our code. This is bad! We didn't follow good practice. This chapter is here
    to address this problem.
  id: totrans-5477
  prefs: []
  type: TYPE_NORMAL
  zh: 从书的开头，我们的代码中只有一个自动生成的单元测试。这很糟糕！我们没有遵循良好的实践。这一章是为了解决这个问题而存在的。
- en: The unit tests
  id: totrans-5478
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: The lower level tests we can write are called unit tests. They should test a
    small portion of code, hence the notion of unit. How you define a unit is up to
    you; it can be a class or a bunch of closely related classes. Defining this notion
    will determine what will be mocked (replaced with a dummy object). Are you going
    to replace the database with a lightweight alternative? Are you going to replace
    interactions with external services? Are you going to mock-up closely related
    objects whose behavior is not relevant to the context of what's being tested?
  id: totrans-5479
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写的较低级别的测试称为单元测试。它们应该测试代码的一小部分，因此称为单元。如何定义一个单元取决于你；它可以是一个类或一组密切相关的类。定义这个概念将决定什么将被模拟（用虚拟对象替换）。你要用轻量级替代品替换数据库吗？你要替换与外部服务的交互吗？你要模拟行为与被测试的上下文无关的密切相关的对象吗？
- en: My advice here is to keep a balanced approach. Keep your tests clean and fast,
    and everything else will follow.
  id: totrans-5480
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是保持平衡的态度。保持你的测试干净和快速，其他一切都会随之而来。
- en: I rarely completely mock the data layer. I tend to use embedded databases for
    testing. They provide an easy way to load data while testing.
  id: totrans-5481
  prefs: []
  type: TYPE_NORMAL
  zh: 我很少完全模拟数据层。我倾向于在测试中使用嵌入式数据库。它们提供了一种在测试时加载数据的简单方法。
- en: 'As a rule, I always mock collaboration with external services for two reasons,
    as follows:'
  id: totrans-5482
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个规则，我总是模拟与外部服务的协作，原因有两个，如下：
- en: The speed of the tests and the possibility to run the tests without connecting
    to the network
  id: totrans-5483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试的速度和在不连接到网络的情况下运行测试的可能性
- en: To be able to test error cases while communicating with those services
  id: totrans-5484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了能够在与这些服务通信时测试错误情况
- en: Additionally, there is a subtle difference between mocking and stubbing. We
    will try to use both approaches to see how they relate to each other.
  id: totrans-5485
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，模拟和存根之间存在微妙的区别。我们将尝试使用这两种方法来看它们之间的关系。
- en: The right tools for the job
  id: totrans-5486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适合工作的正确工具
- en: The first barrier for test novices is the lack of knowledge of the good tools
    and libraries for writing relevant and maintainable tests.
  id: totrans-5487
  prefs: []
  type: TYPE_NORMAL
  zh: 测试新手的第一个障碍是缺乏编写相关和可维护测试的好工具和库的知识。
- en: 'I''m going to list a few here. This list is by no means exhaustive, but it
    contains the tools we are going to use and that are easily compatible with Spring:'
  id: totrans-5488
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在这里列出一些。这个列表绝不是详尽无遗的，但它包含了我们将要使用的工具，并且与Spring轻松兼容：
- en: '| JUnit | The most universally adopted Java test runner. Launched by default
    by all build tools. |'
  id: totrans-5489
  prefs: []
  type: TYPE_TB
  zh: '| JUnit | 最广泛采用的Java测试运行器。默认由所有构建工具启动。 |'
- en: '| AssertJ | A fluent assertion library. It''s way easier to use than Hamcrest.
    |'
  id: totrans-5490
  prefs: []
  type: TYPE_TB
  zh: '| AssertJ | 一种流畅的断言库。比Hamcrest更容易使用。 |'
- en: '| Mockito | An easy mocking framework. |'
  id: totrans-5491
  prefs: []
  type: TYPE_TB
  zh: '| Mockito | 一个简单的模拟框架。 |'
- en: '| DbUnit | For mocking and asserting your database content with XML datasets.
    |'
  id: totrans-5492
  prefs: []
  type: TYPE_TB
  zh: '| DbUnit | 用于使用XML数据集模拟和断言数据库内容。 |'
- en: '| Spock | An elegant Groovy DSL to write tests with Behaviour Driven Development
    (BDD) style (Given/When/Then). |'
  id: totrans-5493
  prefs: []
  type: TYPE_TB
  zh: '| Spock | 一种优雅的Groovy DSL，用于以行为驱动开发（BDD）风格（Given/When/Then）编写测试。 |'
- en: Groovy has a place of choice in my testing toolset. Even if you're not ready
    yet to put some Groovy code into production, you can easily use the convenience
    of the language in your tests. With Gradle, this is very easy to do, but we will
    see that in a few minutes.
  id: totrans-5494
  prefs: []
  type: TYPE_NORMAL
  zh: Groovy在我的测试工具集中占据了重要位置。即使你还没有准备好将一些Groovy代码投入生产，你仍然可以在测试中轻松使用这种语言的便利性。使用Gradle非常容易实现，但我们将在几分钟内看到。
- en: The acceptance tests
  id: totrans-5495
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验收测试
- en: In the context of a web application, "acceptance test" will often refer to in-browser,
    end-to-end testing. In the Java world, Selenium is clearly one of the most reliable
    and mature libraries.
  id: totrans-5496
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序的背景下，“验收测试”通常指的是在浏览器中的端到端测试。在Java世界中，Selenium显然是最可靠和成熟的库之一。
- en: 'In the JavaScript world, we can find other alternatives, such as PhantomJS
    or Protractor. PhantomJS is very relevant in our case because there is a web driver
    available to run Selenium tests inside of this headless browser, which will improve
    launch time and won''t require emulating an X Server or launching a separate Selenium
    server:'
  id: totrans-5497
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript世界中，我们可以找到其他替代方案，如PhantomJS或Protractor。PhantomJS在我们的案例中非常相关，因为这里有一个Web驱动程序可用于在这个无头浏览器中运行Selenium测试，这将提高启动时间，而且不需要模拟X服务器或启动单独的Selenium服务器：
- en: '| Selenium 2 | This provides web drivers to pilot browsers for automated testing.
    |'
  id: totrans-5498
  prefs: []
  type: TYPE_TB
  zh: '| Selenium 2 | 提供Web驱动程序以操纵浏览器进行自动化测试。 |'
- en: '| PhantomJS | A headless browser (without GUI). Probably the fastest browser.
    |'
  id: totrans-5499
  prefs: []
  type: TYPE_TB
  zh: '| PhantomJS | 一个无头浏览器（没有GUI）。可能是最快的浏览器。 |'
- en: '| FluentLenium | A fluent library for piloting Selenium tests. |'
  id: totrans-5500
  prefs: []
  type: TYPE_TB
  zh: '| FluentLenium | 用于操纵Selenium测试的流畅库。 |'
- en: '| Geb | A Groovy library for piloting Selenium tests. |'
  id: totrans-5501
  prefs: []
  type: TYPE_TB
  zh: '| Geb | 用于操纵Selenium测试的Groovy库。 |'
- en: Our first unit test
  id: totrans-5502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个单元测试
- en: It is now time to write our first unit test.
  id: totrans-5503
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候编写我们的第一个单元测试了。
- en: 'We will focus on writing tests at the controller level because we have little
    to no business code or service. The key to writing tests for Spring MVC is the
    `org.springframework.boot:spring-boot-starter-test` dependency in our classpath.
    It will add a few very useful libraries, such as these:'
  id: totrans-5504
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于在控制器级别编写测试，因为我们几乎没有业务代码或服务。编写Spring MVC测试的关键是我们类路径中的`org.springframework.boot:spring-boot-starter-test`依赖项。它将添加一些非常有用的库，比如这些：
- en: '`hamcrest`: This is JUnit''s assertion library'
  id: totrans-5505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hamcrest`：这是JUnit的断言库'
- en: '`mockito`: This is a mocking library'
  id: totrans-5506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mockito`：这是一个模拟库'
- en: '`spring-test`: This is the Spring testing library'
  id: totrans-5507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test`：这是Spring测试库'
- en: We will test the redirection to the profile page that is created when the user
    hasn't created their profile yet.
  id: totrans-5508
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将测试当用户尚未创建其个人资料时，重定向到个人资料页面的情况。
- en: 'We already have an autogenerated test called `MasterSpringMvc4ApplicationTests`.
    It is the most basic kind of test one can write with the Spring test framework:
    it does nothing but blow up if the context cannot be loaded:'
  id: totrans-5509
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个名为`MasterSpringMvc4ApplicationTests`的自动生成测试。这是使用Spring测试框架编写的最基本的测试：如果上下文无法加载，它将什么也不做，只会失败。
- en: '[PRE660]'
  id: totrans-5510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: We can delete this test and create one that will ensure that a user with no
    profile will be redirected to the profile page by default. It will actually test
    the code of the `HomeController` class, so let's call it `HomeControllerTest`
    class and put it in the same package as `HomeController`, in `src/test/java`.
    All IDEs have shortcuts for creating a JUnit test case from a class. Find out
    how to do it with yours now!
  id: totrans-5511
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以删除这个测试，并创建一个新的测试，确保没有个人资料的用户将默认重定向到个人资料页面。它实际上测试了`HomeController`类的代码，所以让我们称之为`HomeControllerTest`类，并将其放在与`HomeController`相同的包中，即`src/test/java`。所有的IDE都有从类创建JUnit测试用例的快捷方式。现在找出如何使用您的IDE来完成这个操作！
- en: 'Here is the test:'
  id: totrans-5512
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试：
- en: '[PRE661]'
  id: totrans-5513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: We use `MockMvc` to simulate interactions with a Spring controller without the
    actual overhead of a Servlet container.
  id: totrans-5514
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`MockMvc`来模拟与Spring控制器的交互，而不会产生Servlet容器的实际开销。
- en: We also use a couple of matchers that Spring provides to assert our result.
    They actually implement Hamcrest matchers.
  id: totrans-5515
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了Spring提供的一些匹配器来断言我们的结果。它们实际上实现了Hamcrest匹配器。
- en: The `.andDo(print())` statement will produce a neat debug output for the request
    and response of the scenario under test. You can comment it if you find it too
    verbose.
  id: totrans-5516
  prefs: []
  type: TYPE_NORMAL
  zh: '`.andDo(print())`语句将为测试场景的请求和响应生成整洁的调试输出。如果您觉得太啰嗦，可以将其注释掉。'
- en: That's all there is to it! The syntax is a bit tricky at the beginning, but
    an IDE with good completion will be able to help you.
  id: totrans-5517
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！语法在开始时有点棘手，但一个具有良好代码补全功能的IDE将能够帮助您。
- en: 'Now we want to test whether, if the user has filled in the test part of their
    profile, we can redirect them to the correct search. For that, we will need to
    stub the session with the `MockHttpSession` class:'
  id: totrans-5518
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想测试的是，如果用户填写了其个人资料的测试部分，我们是否可以将其重定向到正确的搜索。为此，我们需要使用`MockHttpSession`类对会话进行存根。
- en: '[PRE662]'
  id: totrans-5519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: You will have to add the `setTastes()` setter to the `UserProfileSession` bean
    for the test to work.
  id: totrans-5520
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不得不为测试添加`setTastes()` setter到`UserProfileSession` bean中。
- en: There are a lot of mocking utilities for the Servlet environment in the `org.springframework.mock.web`
    package.
  id: totrans-5521
  prefs: []
  type: TYPE_NORMAL
  zh: 在`org.springframework.mock.web`包中有很多用于Servlet环境的模拟工具。
- en: Note that the attribute representing our bean in session is prefixed by `scopedTarget`.
    That's because session beans are proxified by Spring. Therefore, there are actually
    two objects in the Spring context, the actual bean that we defined and its proxy
    that will end up in the session.
  id: totrans-5522
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，表示我们会话中的bean的属性以`scopedTarget`为前缀。这是因为Spring会对会话bean进行代理。因此，在Spring上下文中实际上有两个对象，我们定义的实际bean和最终会出现在会话中的代理。
- en: 'The mock session is a neat class, but we can refactor the test with a builder
    that will hide implementation details and can be reused later:'
  id: totrans-5523
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟会话是一个很好的类，但我们可以使用一个构建器来重构测试，该构建器将隐藏实现细节，并且以后可以重复使用：
- en: '[PRE663]'
  id: totrans-5524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: 'The code for the builder is as follows:'
  id: totrans-5525
  prefs: []
  type: TYPE_NORMAL
  zh: 构建器的代码如下：
- en: '[PRE664]'
  id: totrans-5526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: After this refactoring, your test should always pass, of course.
  id: totrans-5527
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次重构之后，您的测试应该始终通过，当然。
- en: Mocks and stubs
  id: totrans-5528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟和存根
- en: If we wanted to test the search request handled by the `SearchController` class,
    we would certainly want to mock `SearchService`.
  id: totrans-5529
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想测试`SearchController`类处理的搜索请求，我们肯定会想要模拟`SearchService`。
- en: 'There are two ways of doing this: with a mock or with a stub.'
  id: totrans-5530
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以做到这一点：使用模拟对象或存根。
- en: Mocking with Mockito
  id: totrans-5531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Mockito进行模拟
- en: 'First, we can create a mock object with Mockito:'
  id: totrans-5532
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以使用Mockito创建一个模拟对象：
- en: '[PRE665]'
  id: totrans-5533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: You can see that instead of setting up `MockMvc` with the web application context,
    we have created a standalone context. This context will only contain our controller.
    That means we have full control over the instantiation and initialization of controllers
    and their dependencies. It will allow us to easily inject a mock inside of our
    controller.
  id: totrans-5534
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们创建了一个独立的上下文，而不是使用web应用程序上下文来设置`MockMvc`。这个上下文只包含我们的控制器。这意味着我们可以完全控制控制器及其依赖项的实例化和初始化。这将使我们能够轻松地在我们的控制器中注入一个模拟对象。
- en: The downside is that we have to redeclare pieces of our configuration like the
    one saying we don't want to remove URL characters after a semicolon.
  id: totrans-5535
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是我们必须重新声明我们的配置的一部分，比如说我们不想在分号后删除URL字符的配置。
- en: We use a couple of Hamcrest matchers to assert the properties that will end
    up in the view model.
  id: totrans-5536
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一些Hamcrest匹配器来断言最终会出现在视图模型中的属性。
- en: The mocking approach has its benefits, such as the ability to verify interactions
    with the mock and create expectations at runtime.
  id: totrans-5537
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟的方法有其好处，比如能够验证与模拟对象的交互并在运行时创建期望。
- en: This will also couple your test with the actual implementation of the object.
    For instance, if you changed how a tweet is fetched in the controller, you would
    likely break the tests related to this controller because they still try to mock
    the service we no longer rely on.
  id: totrans-5538
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会使您的测试与对象的实际实现耦合。例如，如果您更改了控制器中获取推文的方式，您很可能会破坏与该控制器相关的测试，因为它们仍然尝试模拟我们不再依赖的服务。
- en: Stubbing our beans while testing
  id: totrans-5539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试时存根我们的bean
- en: Another approach is to replace the implementation of our `SearchService` class
    with another one in our test.
  id: totrans-5540
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在我们的测试中用另一个实现类替换`SearchService`类的实现。
- en: We were a bit lazy early on and did not define an interface for `SearchService`.
    *Always program to an interface and not to an implementation*. Behind this proverbial
    wisdom lies the most important lesson from the *Gang of Four*.
  id: totrans-5541
  prefs: []
  type: TYPE_NORMAL
  zh: 我们早些时候有点懒，没有为`SearchService`定义一个接口。*始终根据接口而不是实现进行编程*。在这句谚语背后的智慧中，隐藏着*四人帮*最重要的教训。
- en: 'One of the benefits of the Inversion of Control is to allow for the easy replacement
    of our implementations in tests or in a real system. For this to work, we will
    have to modify all the usages `SearchService` with the new interface. With a good
    IDE, there is a refactoring called `extract interface` that will do just that.
    This should create an interface that contains the public method `search()` of
    our `SearchService` class:'
  id: totrans-5542
  prefs: []
  type: TYPE_NORMAL
  zh: 控制反转的好处之一是允许在测试或实际系统中轻松替换我们的实现。为了使其工作，我们将不得不修改所有使用`SearchService`的地方，使用新的接口。有了一个好的IDE，有一个叫做`提取接口`的重构，它会做到这一点。这应该创建一个包含我们的`SearchService`类的`search()`公共方法的接口：
- en: '[PRE666]'
  id: totrans-5543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: Of course, our two controllers, `SearchController` and `SearchApiController`,
    must now use the interface and not the implementation.
  id: totrans-5544
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们的两个控制器，`SearchController`和`SearchApiController`，现在必须使用接口而不是实现。
- en: 'We now have the ability to create a test double for the `TwitterSearch` class
    specially for our test case. For this to work, we will need to declare a new Spring
    configuration named `StubTwitterSearchConfig` that will contain another implementation
    for `TwitterSearch`. I placed it in the search package, next to `SearchControllerMockTest`:'
  id: totrans-5545
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有能力为`TwitterSearch`类创建一个测试替身，专门用于我们的测试用例。为了使其工作，我们将需要声明一个名为`StubTwitterSearchConfig`的新Spring配置，其中将包含`TwitterSearch`的另一个实现。我将其放在search包中，紧邻`SearchControllerMockTest`：
- en: '[PRE667]'
  id: totrans-5546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: In this configuration class, we redeclare the `TwitterSearch` bean with the
    `@Primary` annotation, which will tell Spring to use this implementation on priority
    if other implementations are found in the classpath.
  id: totrans-5547
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配置类中，我们使用`@Primary`注解重新声明了`TwitterSearch` bean，这将告诉Spring优先使用这个实现，如果在类路径中找到其他实现。
- en: Since the `TwitterSearch` interface contains only one method, we can implement
    it with a lambda expression.
  id: totrans-5548
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`TwitterSearch`接口只包含一个方法，我们可以使用lambda表达式来实现它。
- en: 'Here is the complete test that uses our `StubConfiguration` class along with
    our main configuration with the `SpringApplicationConfiguration` annotation:'
  id: totrans-5549
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用我们的`StubConfiguration`类以及带有`SpringApplicationConfiguration`注解的主配置的完整测试：
- en: '[PRE668]'
  id: totrans-5550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: Should I use mocks or stubs?
  id: totrans-5551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该使用模拟对象还是存根对象？
- en: 'Both approaches have their own merits. For a detailed explanation, check out
    this great essay by Martin Fowler: [http://martinfowler.com/articles/mocksArentStubs.html](http://martinfowler.com/articles/mocksArentStubs.html).'
  id: totrans-5552
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都有各自的优点。有关详细解释，请查看Martin Fowler的这篇伟大的文章：[http://martinfowler.com/articles/mocksArentStubs.html](http://martinfowler.com/articles/mocksArentStubs.html)。
- en: My testing routine is more about writing stubs because I like the idea of testing
    the output of my objects more than their inner workings. But that's up to you.
    Spring being a dependency injection framework at its core means that you can easily
    choose what your favorite approach is.
  id: totrans-5553
  prefs: []
  type: TYPE_NORMAL
  zh: 我的测试例程更多地是关于编写存根，因为我喜欢测试对象的输出而不是它们的内部工作原理。但这取决于你。Spring作为一个依赖注入框架，意味着你可以轻松选择你喜欢的方法。
- en: Unit testing REST controllers
  id: totrans-5554
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试REST控制器
- en: We have just tested a traditional controller redirecting to a view. Testing
    a REST controller is very similar in principle, but there are a few subtleties.
  id: totrans-5555
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚测试了一个传统的控制器重定向到视图。原则上，测试REST控制器非常类似，但有一些微妙之处。
- en: 'Since we are going to test the JSON output of our controller, we need a JSON
    assertion library. Add the following dependency to your `build.gradle` file:'
  id: totrans-5556
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将测试控制器的JSON输出，我们需要一个JSON断言库。将以下依赖项添加到您的`build.gradle`文件中：
- en: '[PRE669]'
  id: totrans-5557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: 'Let''s write a test for the `SearchApiController` class, the controller that
    allows searching for a tweet and returns results as JSON or XML:'
  id: totrans-5558
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`SearchApiController`类编写一个测试，该控制器允许搜索推文并以JSON或XML格式返回结果：
- en: '[PRE670]'
  id: totrans-5559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: Note the simple and elegant assertions on the JSON output. Testing our user
    controller will require a bit more work.
  id: totrans-5560
  prefs: []
  type: TYPE_NORMAL
  zh: 注意JSON输出上的简单而优雅的断言。测试我们的用户控制器将需要更多的工作。
- en: 'First, let''s add `assertj` to the classpath; it will help us write cleaner
    tests:'
  id: totrans-5561
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将`assertj`添加到类路径中；它将帮助我们编写更清晰的测试：
- en: '[PRE671]'
  id: totrans-5562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: 'Then, to simplify testing, add a `reset()` method to our `UserRepository` class
    that will help us with the test:'
  id: totrans-5563
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了简化测试，在我们的`UserRepository`类中添加一个`reset()`方法，这将帮助我们进行测试：
- en: '[PRE672]'
  id: totrans-5564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: In real life, we should probably extract an interface and create a stub for
    testing. I will leave that as an exercise for you.
  id: totrans-5565
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，我们可能应该提取一个接口并创建一个存根进行测试。我会把这留给你作为练习。
- en: 'Here is the first test that gets the list of users:'
  id: totrans-5566
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一个获取用户列表的测试：
- en: '[PRE673]'
  id: totrans-5567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: 'For this to work, add a constructor to the `User` class, taking the e-mail
    property as a parameter. Be careful: you also need to have a default constructor
    for Jackson.'
  id: totrans-5568
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，为`User`类添加一个构造函数，以电子邮件属性作为参数。注意：您还需要为Jackson添加一个默认构造函数。
- en: The test is very similar to the previous test with the additional setup of `UserRepository`.
  id: totrans-5569
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试与之前的测试非常相似，另外设置了`UserRepository`。
- en: 'Let''s test the `POST` method that creates a user now:'
  id: totrans-5570
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们测试创建用户的`POST`方法：
- en: '[PRE674]'
  id: totrans-5571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: 'There are two things to be noted. The first one is the use of AssertJ to assert
    the content of the repository after the test. You will need the following static
    import for that to work:'
  id: totrans-5572
  prefs: []
  type: TYPE_NORMAL
  zh: 有两件事需要注意。第一件事是使用AssertJ来断言测试后存储库的内容。您需要以下静态导入才能使其工作：
- en: '[PRE675]'
  id: totrans-5573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: 'The second is that we use a utility method to convert our object to JSON before
    sending it to the controller. For that purpose, I created a simple utility class
    in the `utils` package, as follows:'
  id: totrans-5574
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是我们使用一个实用方法，在将对象发送到控制器之前将其转换为JSON。为此，我在`utils`包中创建了一个简单的实用程序类，如下所示：
- en: '[PRE676]'
  id: totrans-5575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: 'The tests for the `DELETE` method are as follows:'
  id: totrans-5576
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`方法的测试如下：'
- en: '[PRE677]'
  id: totrans-5577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: 'Finally, here''s the test for the `PUT` method, which updates a user:'
  id: totrans-5578
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是用于更新用户的`PUT`方法的测试：
- en: '[PRE678]'
  id: totrans-5579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'Whoops! The last test does not pass! By checking the implementation of `UserApiController`,
    we can easily see why:'
  id: totrans-5580
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕！最后一个测试没有通过！通过检查`UserApiController`的实现，我们很容易看出原因：
- en: '[PRE679]'
  id: totrans-5581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: We returned the wrong status in the controller! Change it to `HttpStatus.OK`
    and the test should be green again.
  id: totrans-5582
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在控制器中返回了错误的状态！将其更改为`HttpStatus.OK`，测试应该再次变为绿色。
- en: With Spring, one can easily write controller tests using the same configuration
    of our application, but we can just as efficiently override or change some elements
    in our testing setup.
  id: totrans-5583
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring，可以轻松地使用应用程序的相同配置编写控制器测试，但我们也可以有效地覆盖或更改测试设置中的一些元素。
- en: Another interesting thing that you will notice while running all the tests is
    that the application context is only loaded once, which means that the overhead
    is actually very small.
  id: totrans-5584
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行所有测试时，您将注意到的另一件有趣的事情是应用程序上下文只加载一次，这意味着开销实际上非常小。
- en: Our application is small too, so we did not make any effort to split our configuration
    into reusable chunks. It can be a really good practice not to load the full application
    context inside of every test. You can actually split the component scanned into
    different units with the `@ComponentScan` annotation.
  id: totrans-5585
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序也很小，因此我们没有努力将配置拆分为可重用的部分。不在每个测试中加载完整的应用程序上下文可能是一个非常好的做法。您实际上可以使用`@ComponentScan`注释将组件扫描拆分为不同的单元。
- en: This annotation has several attributes that allow you to define filters with
    `includeFilter` and `excludeFilter` (loading only the controller for instance)
    and scan specific packages with the `basePackageClasses` and `basePackages` annotations.
  id: totrans-5586
  prefs: []
  type: TYPE_NORMAL
  zh: 此注释有几个属性，允许您使用`includeFilter`和`excludeFilter`定义过滤器（例如仅加载控制器）并使用`basePackageClasses`和`basePackages`注释扫描特定包。
- en: You can also split your configuration into multiple `@Configuration` classes.
    A good example would be splitting the code for the users and for the tweet parts
    of our application into two independent parts.
  id: totrans-5587
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将配置拆分为多个`@Configuration`类。一个很好的例子是将我们应用程序的用户和推文部分的代码拆分为两个独立的部分。
- en: We will now have a look at acceptance tests, which are a very different kind
    of beast.
  id: totrans-5588
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下验收测试，这是一种非常不同的测试。
- en: Testing the authentication
  id: totrans-5589
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试身份验证
- en: 'If you wish to set up Spring Security in a MockMvc test, you can write this
    test next to our previous test:'
  id: totrans-5590
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在MockMvc测试中设置Spring Security，可以在我们之前的测试旁边编写此测试：
- en: '[PRE680]'
  id: totrans-5591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: In the preceding example, we added `SpringSecurityFilter` to our configuration.
    This will activate Spring Security checks. To test if the authentication works,
    we simply send the correct headers along with the request we would like to perform.
  id: totrans-5592
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`SpringSecurityFilter`添加到了我们的配置中。这将激活Spring安全检查。要测试身份验证是否有效，我们只需在请求中发送正确的标头。
- en: The advantage of basic authentication is that it's really straightforward to
    simulate. With a more complicated setup, you would have to perform a mock request
    on the authentication endpoint.
  id: totrans-5593
  prefs: []
  type: TYPE_NORMAL
  zh: 基本身份验证的优势在于它非常容易模拟。对于更复杂的设置，您将不得不在身份验证端点上执行模拟请求。
- en: At the time of writing, Spring Boot is at version 1.2.3 and depends on Spring
    Security 3.
  id: totrans-5594
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Spring Boot的版本为1.2.3，并依赖于Spring Security 3。
- en: In a few weeks, Spring Boot 1.3.0 will be available, it will update Spring Security
    and use version 4.
  id: totrans-5595
  prefs: []
  type: TYPE_NORMAL
  zh: 几周后，Spring Boot 1.3.0将可用，它将更新Spring Security并使用版本4。
- en: This is good news because Spring Security 4 includes a really easy setup of
    the authenticated user with simple annotations. See [http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test](http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test)
    for more details.
  id: totrans-5596
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个好消息，因为Spring Security 4包括使用简单注释轻松设置经过身份验证的用户。有关更多详细信息，请参见[http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test](http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test)。
- en: Writing acceptance tests
  id: totrans-5597
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写验收测试
- en: Unit tests can only cover a subset of the different interactions between the
    components of our application. To go a little further, we will need to set up
    acceptance tests, tests that will actually boot up the complete application and
    allow us to interact with its interface.
  id: totrans-5598
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试只能覆盖应用程序组件之间的不同交互的子集。为了再进一步，我们需要设置验收测试，这些测试将实际启动完整的应用程序，并允许我们与其界面进行交互。
- en: The Gradle configuration
  id: totrans-5599
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle配置
- en: The first thing we will want to do when we add integration tests to a project
    is to put them in a different location to that of the unit tests.
  id: totrans-5600
  prefs: []
  type: TYPE_NORMAL
  zh: 在将集成测试添加到项目中时，我们想要做的第一件事是将它们放在与单元测试不同的位置。
- en: 'The reason for this is, essentially, that acceptance tests are slower than
    unit tests. They can be part of a different integration job, such as a nightly
    build, and we want developers to be able to launch the different kinds of tests
    easily from their IDE. To do this with Gradle, we will have to add a new configuration
    called `integrationTest`. For Gradle, a configuration is a group of artifacts
    and their dependencies. We already have several configurations in our project:
    `compile`, `testCompile`, and so on.'
  id: totrans-5601
  prefs: []
  type: TYPE_NORMAL
  zh: 其原因实质上是，验收测试比单元测试慢。它们可以成为不同集成作业的一部分，例如每晚构建，我们希望开发人员能够轻松地从他们的IDE启动不同类型的测试。要使用Gradle实现这一点，我们将不得不添加一个名为`integrationTest`的新配置。对于Gradle来说，配置是一组工件及其依赖项。我们的项目中已经有几个配置：`compile`，`testCompile`等。
- en: You can have a look at the configurations of your project, and much more, by
    typing `./gradlew properties` at the root of your project.
  id: totrans-5602
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在项目的根目录键入`./gradlew properties`来查看项目的配置等更多信息。
- en: 'Add a new configuration at the end of `build.gradle` file:'
  id: totrans-5603
  prefs: []
  type: TYPE_NORMAL
  zh: 在`build.gradle`文件的末尾添加新的配置：
- en: '[PRE681]'
  id: totrans-5604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: This will allow you to declare dependencies for `integrationTestCompile` and
    `integrationTestRuntime`. More importantly, by inheriting the test configurations,
    we have access to their dependencies.
  id: totrans-5605
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您为`integrationTestCompile`和`integrationTestRuntime`声明依赖项。更重要的是，通过继承测试配置，我们可以访问它们的依赖项。
- en: Tip
  id: totrans-5606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I do not recommend declaring your integration test dependencies as `integrationTestCompile`.
    It will work as far as Gradle is concerned, but support inside of IDE is non-existent.
    What I usually do is declare my integration test dependencies as `testCompile`
    dependencies instead. This is only a small inconvenience.
  id: totrans-5607
  prefs: []
  type: TYPE_NORMAL
  zh: 我不建议将集成测试依赖项声明为`integrationTestCompile`。就Gradle而言，这样做是可以的，但IDE内的支持是不存在的。我通常会将我的集成测试依赖项声明为`testCompile`依赖项。这只是一个小不便。
- en: 'Now that we have our new configurations, we must create a `sourceSet` class
    associated with them. A `sourceSet` class represents a logical group of Java source
    and resources. Naturally, they also have to inherit from the test and main classes;
    see the following code:'
  id: totrans-5608
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了新的配置，我们必须创建一个与它们关联的`sourceSet`类。`sourceSet`类表示Java源代码和资源的逻辑组。当然，它们也必须继承自测试和主类；请参阅以下代码：
- en: '[PRE682]'
  id: totrans-5609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: 'Finally, we need to add a task to run them from our build, as follows:'
  id: totrans-5610
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一个任务来从我们的构建中运行它们，如下所示：
- en: '[PRE683]'
  id: totrans-5611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: To run our test, we can type `./gradlew integrationTest`. Besides configuring
    our classpath and where to find our test classes, we also defined a directory
    where the test report will be generated.
  id: totrans-5612
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行我们的测试，我们可以输入`./gradlew integrationTest`。除了配置我们的类路径和查找测试类的位置之外，我们还定义了一个目录，用于生成测试报告。
- en: This configuration allows us to write our tests in `src/integrationTest/java`
    or `src/integrationTest/groovy`, which will make it easier to identify them and
    run them separately from our unit tests.
  id: totrans-5613
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置允许我们在`src/integrationTest/java`或`src/integrationTest/groovy`中编写我们的测试，这将使我们更容易识别它们并单独运行它们，而不是与我们的单元测试一起运行。
- en: By default, they will be generated in `build/reports/tests`. If we do not override
    them, if we launch both tests and integration tests with `gradle clean test integrationTest`,
    they will override each other.
  id: totrans-5614
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它们将生成在`build/reports/tests`中。如果我们不覆盖它们，如果我们使用`gradle clean test integrationTest`同时运行测试和集成测试，它们将互相覆盖。
- en: It's also worth mentioning that a young plugin in the Gradle ecosystem aims
    to simplify declaring new test configurations, visit [https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets](https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets)
    for detailed information.
  id: totrans-5615
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Gradle生态系统中的一个新插件旨在简化声明新的测试配置，详细信息请访问[https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets](https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets)。
- en: Our first FluentLenium test
  id: totrans-5616
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个FluentLenium测试
- en: 'FluentLenium is an amazing library for piloting Selenium tests. Let''s add
    a few dependencies to our build script:'
  id: totrans-5617
  prefs: []
  type: TYPE_NORMAL
  zh: FluentLenium是一个用于操纵Selenium测试的惊人库。让我们向我们的构建脚本添加一些依赖项：
- en: '[PRE684]'
  id: totrans-5618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: By default, `fluentlenium` comes with `selenium-java`. We redeclare it just
    to explicitly require the latest version available. We also added a dependency
    to the `PhantomJS` driver, which is not officially supported by Selenium. The
    problem with the `selenium-java` library is that it comes bundled with all the
    supported web drivers.
  id: totrans-5619
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`fluentlenium`带有`selenium-java`。我们重新声明它，只是为了明确要求使用最新版本。我们还添加了对`PhantomJS`驱动程序的依赖，这不是Selenium官方支持的。`selenium-java`库的问题在于它捆绑了所有支持的web驱动程序。
- en: 'You can see the dependency tree of our project by typing `gradle dependencies`.
    At the bottom, you will see something like this:'
  id: totrans-5620
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入`gradle dependencies`来查看我们项目的依赖树。在底部，您将看到类似于以下内容：
- en: '[PRE685]'
  id: totrans-5621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: 'Having all those dependencies in the classpath is highly unnecessary since
    we will just use the `PhantomJS` driver. To exclude the dependencies we won''t
    need, we can add the following part to our buildscript, right before the dependencies
    declaration:'
  id: totrans-5622
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只会使用`PhantomJS`驱动程序，将所有这些依赖项放在类路径中是非常不必要的。为了排除我们不需要的依赖项，我们可以在依赖项声明之前的构建脚本中添加以下部分：
- en: '[PRE686]'
  id: totrans-5623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: We just keep the `firefox` driver at hand. `PhantomJS` driver is a headless
    browser, so understanding what happens without a GUI can prove tricky. It can
    be nice to switch to Firefox to debug a complex test.
  id: totrans-5624
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需将`firefox`驱动程序准备好。`PhantomJS`驱动程序是一个无头浏览器，因此理解没有GUI发生的事情可能会很棘手。切换到Firefox来调试复杂的测试可能会很好。
- en: 'With our classpath correctly configured, we can now write our first integration
    test. Spring Boot has a very convenient annotation to support this test:'
  id: totrans-5625
  prefs: []
  type: TYPE_NORMAL
  zh: 有了正确配置的类路径，我们现在可以编写我们的第一个集成测试。Spring Boot有一个非常方便的注解来支持这个测试：
- en: '[PRE687]'
  id: totrans-5626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: Note that FluentLenium has a neat API for requesting DOM elements. With AssertJ,
    we can then write easy-to read-assertions on the page content.
  id: totrans-5627
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，FluentLenium具有一个用于请求DOM元素的简洁API。使用AssertJ，我们可以在页面内容上编写易于阅读的断言。
- en: Note
  id: totrans-5628
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Have a look at the documentation at [https://github.com/FluentLenium/FluentLenium](https://github.com/FluentLenium/FluentLenium)
    for further information.
  id: totrans-5629
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[https://github.com/FluentLenium/FluentLenium](https://github.com/FluentLenium/FluentLenium)上的文档以获取更多信息。
- en: With the `@WebIntegrationTest` annotation, Spring will actually create the embedded
    Servlet container (Tomcat) and launch our web application on a random port! We
    need to retrieve this port number at runtime. This will allow us to provide a
    base URL for our tests, a URL that will be the prefix for all the navigation we
    do in our tests.
  id: totrans-5630
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@WebIntegrationTest`注解，Spring实际上会创建嵌入式Servlet容器（Tomcat）并在随机端口上启动我们的Web应用程序！我们需要在运行时检索此端口号。这将允许我们为我们的测试提供一个基本URL，这个URL将成为我们在测试中进行的所有导航的前缀。
- en: 'If you try to run the test at this stage, you will see the following error
    message:'
  id: totrans-5631
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试在这个阶段运行测试，您将看到以下错误消息：
- en: '[PRE688]'
  id: totrans-5632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: Indeed, PhantomJS needs to be installed on your machine for this to work correctly.
    On a Mac, simply use `brew install phantomjs`. For other platforms, see the documentation
    at [http://phantomjs.org/download.html](http://phantomjs.org/download.html).
  id: totrans-5633
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，PhantomJS需要安装在您的机器上才能正常工作。在Mac上，只需使用`brew install phantomjs`。对于其他平台，请参阅[http://phantomjs.org/download.html](http://phantomjs.org/download.html)上的文档。
- en: If you don't want to install a new binary on your machine, replace `new PhantomJSDriver()`
    with `new FirefoxDriver()`. Your test will be a bit slower, but you will have
    a GUI.
  id: totrans-5634
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想在您的机器上安装新的二进制文件，请用`new FirefoxDriver()`替换`new PhantomJSDriver()`。您的测试会慢一点，但您会有一个GUI。
- en: Our first test is landing on the profile page, right? We need to find a way
    to log in now.
  id: totrans-5635
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个测试是着陆在个人资料页面，对吧？现在我们需要找到一种登录的方法。
- en: What about faking login with a stub?
  id: totrans-5636
  prefs: []
  type: TYPE_NORMAL
  zh: 使用存根进行伪登录怎么样？
- en: 'Put this class in the test sources (`src/test/java`):'
  id: totrans-5637
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个类放在测试源代码中（`src/test/java`）：
- en: '[PRE689]'
  id: totrans-5638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: This will authenticate any user clicking on the Twitter sign in button as geowarin.
  id: totrans-5639
  prefs: []
  type: TYPE_NORMAL
  zh: 这将认证任何点击Twitter登录按钮的用户为geowarin。
- en: 'We will write a second test that will fill the profile form and assert that
    the search result is displayed:'
  id: totrans-5640
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写第二个测试，填写个人资料表单并断言搜索结果是否显示：
- en: '[PRE690]'
  id: totrans-5641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: 'Note that we can easily ask our web driver to take a screenshot of the current
    browser used for testing. This will produce the following output:'
  id: totrans-5642
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以轻松地要求我们的网络驱动程序对当前用于测试的浏览器进行截图。这将产生以下输出：
- en: '![Our first FluentLenium test](img/image00980.jpeg)'
  id: totrans-5643
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个FluentLenium测试](img/image00980.jpeg)'
- en: Page Objects with FluentLenium
  id: totrans-5644
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用FluentLenium的页面对象
- en: The previous test was a bit messy. We have hardcoded all the selectors in our
    test. This can become very risky when we write a lot of tests using the same elements
    because whenever we change the page layout, all the tests will break. Moreover,
    the test is a little difficult to read.
  id: totrans-5645
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的测试有点混乱。我们在测试中硬编码了所有选择器。当我们使用相同的元素编写大量测试时，这可能变得非常危险，因为每当我们更改页面布局时，所有测试都会失败。此外，测试有点难以阅读。
- en: To fix this, a common practice is to use a page object that will represent a
    specific web page in our application. With FluentLenium, page objects must inherit
    the `FluentPage` class.
  id: totrans-5646
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，一个常见的做法是使用一个页面对象来表示我们应用程序中的特定网页。使用FluentLenium，页面对象必须继承`FluentPage`类。
- en: We will create three pages, one for each element of our GUI. The first one will
    be the login page with the option to click on the `twitterSignin` button, the
    second one will be the profile page with convenience methods for filling in the
    profile form, and the last one will be the result page on which we can assert
    the results displayed.
  id: totrans-5647
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建三个页面，分别对应我们GUI的每个元素。第一个将是具有单击`twitterSignin`按钮选项的登录页面，第二个将是具有填写个人资料表单的便利方法的个人资料页面，最后一个将是我们可以断言显示结果的结果页面。
- en: 'Let''s create the login page at once. I put all the three pages in a `pages`
    package:'
  id: totrans-5648
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即创建登录页面。我把所有三个页面都放在了`pages`包中：
- en: '[PRE691]'
  id: totrans-5649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: 'Let''s create one page for our profile page:'
  id: totrans-5650
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的个人资料页面创建一个页面：
- en: '[PRE692]'
  id: totrans-5651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: 'Let''s also create another one for the search result page:'
  id: totrans-5652
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也为搜索结果页面创建另一个：
- en: '[PRE693]'
  id: totrans-5653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: 'We can now refactor the test using those Page Objects:'
  id: totrans-5654
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这些页面对象重构测试：
- en: '[PRE694]'
  id: totrans-5655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: Much more readable, isn't it?
  id: totrans-5656
  prefs: []
  type: TYPE_NORMAL
  zh: 更易读了，不是吗？
- en: Making our tests more Groovy
  id: totrans-5657
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使我们的测试更加Groovy
- en: If you don't know Groovy, consider it like a close cousin of Java, without the
    verbosity. Groovy is a dynamic language with optional typing. This means that
    you can have the guarantees of a type system when it matters and the versatility
    of duck typing when you know what you are doing.
  id: totrans-5658
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不了解Groovy，可以将其视为Java的近亲，但没有冗长。Groovy是一种具有可选类型的动态语言。这意味着当需要时，您可以获得类型系统的保证，并且在知道自己在做什么时，可以使用鸭子类型的多功能性。
- en: With this language, you can write POJOs without getters, setters, `equals` and
    `hashcode` methods. Everything is handled for you.
  id: totrans-5659
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种语言，您可以编写没有getter、setter、`equals`和`hashcode`方法的POJOs。一切都为您处理。
- en: Writing `==` will actually call the `equals` method. The operators can be overloaded,
    which allows a neat syntax with little arrows, such as `<<`, to write text to
    a file, for instance. It also means that you can add integers to `BigIntegers`
    and get a correct result.
  id: totrans-5660
  prefs: []
  type: TYPE_NORMAL
  zh: 写`==`实际上会调用`equals`方法。操作符可以被重载，这允许使用小箭头（例如`<<`）向文件中写入文本。这也意味着您可以将整数添加到`BigIntegers`并获得正确的结果。
- en: The **Groovy Development Kit** (**GDK**) also adds several very interesting
    methods to classic Java objects. It also considers regular expressions and closures
    as first-class citizens.
  id: totrans-5661
  prefs: []
  type: TYPE_NORMAL
  zh: '**Groovy开发工具包**（**GDK**）还为经典的Java对象添加了几种非常有趣的方法。它还将正则表达式和闭包视为一等公民。'
- en: Note
  id: totrans-5662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want a solid introduction to Groovy, check out the Groovy style guide
    at [http://www.groovy-lang.org/style-guide.html](http://www.groovy-lang.org/style-guide.html).
  id: totrans-5663
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想对Groovy有一个扎实的介绍，请查看[http://www.groovy-lang.org/style-guide.html](http://www.groovy-lang.org/style-guide.html)上的Groovy风格指南。
- en: You can also watch this amazing presentation by Peter Ledbrook at [http://www.infoq.com/presentations/groovy-for-java](http://www.infoq.com/presentations/groovy-for-java).
  id: totrans-5664
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以观看Peter Ledbrook在[http://www.infoq.com/presentations/groovy-for-java](http://www.infoq.com/presentations/groovy-for-java)上的精彩演示。
- en: As far as I am concerned, I always try to push Groovy on the testing side of
    the application I work on. It really improves the readability of the code and
    the productivity of developers.
  id: totrans-5665
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我总是试图在我工作的应用程序的测试方面推动Groovy。这确实提高了代码的可读性和开发人员的生产力。
- en: Unit tests with Spock
  id: totrans-5666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spock进行单元测试
- en: To be able to write Groovy tests in our project, we need to use the Groovy plugin
    instead of the Java plugin.
  id: totrans-5667
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在我们的项目中编写Groovy测试，我们需要使用Groovy插件而不是Java插件。
- en: 'Here''s what you have in your build script:'
  id: totrans-5668
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您构建脚本中的内容：
- en: '[PRE695]'
  id: totrans-5669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: 'Change it to the following:'
  id: totrans-5670
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE696]'
  id: totrans-5671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: This modification is perfectly harmless. The Groovy plugin extends the Java
    plugin, so the only difference it makes is that it gives the ability to add Groovy
    source in `src/main/groovy`, `src/test/groovy` and `src/integrationTest/groovy`.
  id: totrans-5672
  prefs: []
  type: TYPE_NORMAL
  zh: 这种修改是完全无害的。Groovy插件扩展了Java插件，因此它唯一的区别是它可以在`src/main/groovy`、`src/test/groovy`和`src/integrationTest/groovy`中添加Groovy源。
- en: 'Obviously, we also need to add Groovy to the classpath. We will also add Spock,
    the most popular Groovy testing library, via the `spock-spring` dependency, which
    will enable compatibility with Spring:'
  id: totrans-5673
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们还需要将Groovy添加到类路径中。我们还将通过`spock-spring`依赖项添加Spock，这将使其与Spring兼容，这是最受欢迎的Groovy测试库：
- en: '[PRE697]'
  id: totrans-5674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: 'We can now rewrite `HomeControllerTest` with a different approach. Let''s create
    a `HomeControllerSpec` class in `src/test/groovy`. I added it to the `masterSpringMvc.controller`
    package just like our first instance of `HomeControllerTest`:'
  id: totrans-5675
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以用不同的方法重写`HomeControllerTest`。让我们在`src/test/groovy`中创建一个`HomeControllerSpec`类。我将其添加到`masterSpringMvc.controller`包中，就像我们的第一个`HomeControllerTest`实例一样：
- en: '[PRE698]'
  id: totrans-5676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: Our test instantaneously became more readable with the ability to use strings
    as method names and the little BDD DSL (Domain Specific Language) provided by
    Spock. This is not directly visible here, but every statement inside of a `then`
    block will implicitly be an assertion.
  id: totrans-5677
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试立即变得更易读，因为我们可以使用字符串作为方法名，并且Spock提供了小的BDD DSL（领域特定语言）。这在这里并不直接可见，但`then`块内的每个语句都将隐式地成为一个断言。
- en: At the time of writing, because Spock doesn't read meta annotations, the `@SpringApplicationConfiguration`
    annotation cannot be used so we just replaced it with `@ContextConfiguration(loader
    = SpringApplicationContextLoader)`, which is essentially the same thing.
  id: totrans-5678
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，由于Spock不读取元注解，因此无法使用`@SpringApplicationConfiguration`注解，因此我们只是用`@ContextConfiguration(loader
    = SpringApplicationContextLoader)`替换了它，这本质上是一样的。
- en: We now have two versions of the same test, one in Java and the other in Groovy.
    It is up to you to choose the one that best fits your style of coding and remove
    the other one. If you decide to stick with Groovy, you will have to rewrite the
    `should_redirect_to_tastes()` test in Groovy. It should be easy enough.
  id: totrans-5679
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了相同测试的两个版本，一个是Java，另一个是Groovy。由您来选择最适合您编码风格的版本，并删除另一个版本。如果您决定坚持使用Groovy，您将不得不用Groovy重写`should_redirect_to_tastes()`测试。这应该很容易。
- en: 'Spock also has powerful support for mocks. We can rewrite the previous `SearchControllerMockTest`
    class a bit differently:'
  id: totrans-5680
  prefs: []
  type: TYPE_NORMAL
  zh: Spock还对模拟有强大的支持。我们可以稍微不同地重写之前的`SearchControllerMockTest`类：
- en: '[PRE699]'
  id: totrans-5681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: All the verbosity of Mockito is now gone. The `then` block actually asserts
    that the `twitterSearch` method is called once (`1 *`) with any parameter (`_,
    _`). Like with mockito, we could have expected specific parameters.
  id: totrans-5682
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito的所有冗长都已经消失。`then`块实际上断言了`twitterSearch`方法被调用一次(`1 *`)，并且带有任何参数(`_, _`)。与mockito一样，我们也可以期望特定的参数。
- en: The double arrow `>>` syntax is used to return an object from the mocked method.
    In our case, it's a list containing only one element.
  id: totrans-5683
  prefs: []
  type: TYPE_NORMAL
  zh: 双箭头`>>`语法用于从模拟方法返回对象。在我们的情况下，它是包含一个元素的列表。
- en: With only a little dependency in our classpath, we have already written more
    readable tests, but we're not done yet. We will also refactor our acceptance tests
    to use Geb, a Groovy library that pilots Selenium tests.
  id: totrans-5684
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在我们的类路径中添加少量依赖，我们就已经编写了更易读的测试，但我们还没有完成。我们还将重构我们的验收测试以使用Geb，这是一个可以驱动Selenium测试的Groovy库。
- en: Integration tests with Geb
  id: totrans-5685
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Geb进行集成测试
- en: Geb is the de facto library for writing tests in the Grails framework. Although
    its version is 0.12.0, it is very stable and extremely comfortable to work with.
  id: totrans-5686
  prefs: []
  type: TYPE_NORMAL
  zh: Geb是在Grails框架中编写测试的事实上的库。尽管它的版本是0.12.0，但它非常稳定，非常舒适。
- en: It provides a selector API à la jQuery, which makes tests easy to write, even
    for frontend developers. Groovy is also a language that has some JavaScript influences
    that will also appeal to them.
  id: totrans-5687
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了类似jQuery的选择器API，使得即使对于前端开发人员来说，编写测试也变得很容易。Groovy也是一种具有一些JavaScript影响的语言，这也会吸引他们。
- en: 'Let''s add Geb with the support for Spock specifications to our classpath:'
  id: totrans-5688
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在类路径中添加支持Spock规范的Geb：
- en: '[PRE700]'
  id: totrans-5689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: 'Geb can be configured via a Groovy script found directly at the root of `src/integrationTest/groovy`,
    called `GebConfig.groovy`:'
  id: totrans-5690
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在`src/integrationTest/groovy`的根目录下找到的Groovy脚本`GebConfig.groovy`来配置Geb：
- en: '[PRE701]'
  id: totrans-5691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: In this configuration, we indicate where Geb will generate its reports and which
    driver to use. Reports in Geb are an enhanced version of screenshots, which also
    contains the current page in HTML. Their generation can be triggered at any moment
    by calling the `report` function inside a Geb test.
  id: totrans-5692
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配置中，我们指示Geb将生成其报告的位置以及要使用的驱动程序。Geb中的报告是增强版的屏幕截图，还包含当前页面的HTML。可以通过在Geb测试中调用`report`函数来随时触发它们的生成。
- en: 'Let''s rewrite out first integration test with Geb:'
  id: totrans-5693
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用Geb重写我们的第一个集成测试：
- en: '[PRE702]'
  id: totrans-5694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: For the moment, it is very similar to FluentLenium. We can already see the `$`
    function, which will allow us to grab a DOM element via its selector. Here, we
    also state that we want the first `h2` in the page by giving the `0` index.
  id: totrans-5695
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它与FluentLenium非常相似。我们已经可以看到`$`函数，它将允许我们通过其选择器抓取DOM元素。在这里，我们还声明了我们要通过给定的`0`索引在页面中找到第一个`h2`。
- en: Page Objects with Geb
  id: totrans-5696
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Geb的页面对象
- en: Page objects with Geb are a real pleasure to work with. We will create the same
    page objects that we did previously so that you can appreciate the differences.
  id: totrans-5697
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Geb的页面对象真是一种真正的乐趣。我们将创建与之前相同的页面对象，以便您可以欣赏到其中的区别。
- en: 'With Geb, the Page Objects must inherit from the `geb.Page` class. First, let''s
    create the `LoginPage`. I suggest avoiding putting it in the same package as the
    previous one. I created a package called `geb.pages`:'
  id: totrans-5698
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Geb，页面对象必须继承自`geb.Page`类。首先，让我们创建`LoginPage`。我建议避免将其放在与之前相同的包中。我创建了一个名为`geb.pages`的包：
- en: '[PRE703]'
  id: totrans-5699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: 'Then we can create the `ProfilePage`:'
  id: totrans-5700
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以创建`ProfilePage`：
- en: '[PRE704]'
  id: totrans-5701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: This is basically the same page as before. Note the little `<<` to assign values
    to an input element. You could also call `setText` on them.
  id: totrans-5702
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上与以前的页面相同。请注意小的`<<`用于为输入元素分配值。您也可以在它们上调用`setText`。
- en: The `at` method is completely part of the framework, and Geb will automatically
    assert those when you navigate to the corresponding page.
  id: totrans-5703
  prefs: []
  type: TYPE_NORMAL
  zh: '`at`方法完全属于框架的一部分，当您导航到相应的页面时，Geb将自动断言这些方法。'
- en: 'Let''s create the `SearchResultPage`:'
  id: totrans-5704
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`SearchResultPage`：
- en: '[PRE705]'
  id: totrans-5705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: It's a bit shorter, thanks to the ability to reuse previously defined content
    for the results.
  id: totrans-5706
  prefs: []
  type: TYPE_NORMAL
  zh: 由于能够重用先前定义的内容，它会变得更短。
- en: 'With out the Page Object set up, we can write the test as follows:'
  id: totrans-5707
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有设置页面对象的情况下，我们可以编写以下测试：
- en: '[PRE706]'
  id: totrans-5708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: My, what a beauty! You can certainly write your user stories directly with Geb!
  id: totrans-5709
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，多么美丽！您肯定可以直接使用Geb编写用户故事！
- en: With our simple tests, we only scratched the surface of Geb. There is much more
    functionality available, and I encourage you to read the *Book of Geb*, a very
    fine piece of documentation available at [http://www.gebish.org/manual/current/](http://www.gebish.org/manual/current/).
  id: totrans-5710
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们简单的测试，我们只是触及了Geb的表面。还有更多功能可用，我鼓励您阅读*Geb之书*，这是一份非常好的文档，可在[http://www.gebish.org/manual/current/](http://www.gebish.org/manual/current/)上找到。
- en: The check point
  id: totrans-5711
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: 'In this chapter, we added a bunch of tests in `src/test/java`. I chose to go
    with Groovy, so I deleted the duplicated tests:'
  id: totrans-5712
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在 `src/test/java` 中添加了一堆测试。我选择使用 Groovy，所以我删除了重复的测试：
- en: '![The check point](img/image00981.jpeg)'
  id: totrans-5713
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00981.jpeg)'
- en: 'In the `src/test/groovy` directory, I have refactored two tests as follows:'
  id: totrans-5714
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/test/groovy` 目录中，我已经重构了两个测试如下：
- en: '![The check point](img/image00982.jpeg)'
  id: totrans-5715
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00982.jpeg)'
- en: 'In `src/integrationTest/groovy`, we have an integration test written with Geb:'
  id: totrans-5716
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/integrationTest/groovy` 中，我们有一个使用 Geb 编写的集成测试：
- en: '![The check point](img/image00983.jpeg)'
  id: totrans-5717
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00983.jpeg)'
- en: Finally, we added an `integrationTest` task to the Gradle build. Run `gradle
    clean test` and `gradle clean integrationTest` to make sure that all your tests
    pass.
  id: totrans-5718
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在 Gradle 构建中添加了一个 `integrationTest` 任务。运行 `gradle clean test` 和 `gradle
    clean integrationTest` 来确保所有测试都通过。
- en: If the build is successful, we are ready for the next chapter.
  id: totrans-5719
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建成功，我们准备进入下一章。
- en: Summary
  id: totrans-5720
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've studied the differences between unit and integration
    tests.
  id: totrans-5721
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了单元测试和集成测试之间的区别。
- en: We saw how testing is a healthy habit that will give us confidence in what we
    build and what we ship. It will save us money and spare some headaches in the
    long run.
  id: totrans-5722
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到测试是一个健康的习惯，将使我们对我们构建和发布的内容充满信心。这将在长远来看为我们节省金钱并减少一些头痛。
- en: Spring works well with classical JUnit tests written in Java, and it has first-class
    support for integration tests. But we can also easily use other languages, such
    as Groovy, to make the tests more readable and easier to write.
  id: totrans-5723
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 与经典的使用 Java 编写的 JUnit 测试很好配合，并且对集成测试有一流的支持。但我们也可以轻松地使用其他语言，比如 Groovy，使测试更易读和更易写。
- en: Testing is undeniably one of the strongest points of the Spring framework and
    one of the main reasons to use dependency injection in the first place.
  id: totrans-5724
  prefs: []
  type: TYPE_NORMAL
  zh: 测试无疑是 Spring 框架的最大优势之一，也是首次使用依赖注入的主要原因之一。
- en: Stay tuned for the next chapter, where we will optimize our application so that
    it is ready to be deployed in the cloud!
  id: totrans-5725
  prefs: []
  type: TYPE_NORMAL
  zh: 敬请关注下一章，我们将优化我们的应用程序，使其准备好在云中部署！
- en: Chapter 7. Optimizing Your Requests
  id: totrans-5726
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。优化您的请求
- en: In this chapter, we will be looking at different techniques to improve our application's
    performance.
  id: totrans-5727
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究不同的技术来提高我们应用程序的性能。
- en: 'We will implement classical ways of optimizing a web application: cache control
    headers, Gzipping, an application cache, and ETags, as well as more reactive stuff,
    such as asynchronous method calls and WebSockets.'
  id: totrans-5728
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现优化 Web 应用程序的经典方法：缓存控制头、Gzipping、应用程序缓存和 ETags，以及更具反应性的内容，如异步方法调用和 WebSockets。
- en: A production profile
  id: totrans-5729
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产配置文件
- en: In the previous chapter, we saw how to define an application properties file
    that will only be read while launching the application with a specific profile.
    We will use the same approach and create an `application-prod.properties` file
    in `src/main/resources`, right next to the existing `application.properties` file.
    This way, we will be able to configure the production environment with optimized
    settings.
  id: totrans-5730
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何定义一个应用程序属性文件，该文件只在使用特定配置文件启动应用程序时才会被读取。我们将使用相同的方法，在 `src/main/resources`
    目录中创建一个 `application-prod.properties` 文件，就在现有的 `application.properties` 文件旁边。这样，我们将能够使用优化设置配置生产环境。
- en: We will put a few properties in this file to get started. In [Chapter 2](part0141.xhtml#aid-46EVA2
    "Chapter 2. Handling Forms and Complex URL Mapping"), *Handling Forms and Complex
    URL Mapping*, we deactivated the Thymeleaf cache and forced translation bundles
    to reload on every access.
  id: totrans-5731
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个文件中放入一些属性以开始。在[第 2 章](part0141.xhtml#aid-46EVA2 "第 2 章。处理表单和复杂的 URL 映射")中，*处理表单和复杂的
    URL 映射*，我们停用了 Thymeleaf 缓存，并强制翻译捆绑包在每次访问时重新加载。
- en: 'This is great for developing but is useless and time consuming in production.
    So let''s fix that:'
  id: totrans-5732
  prefs: []
  type: TYPE_NORMAL
  zh: 这对开发很有用，但在生产中是无用且耗时的。所以让我们来解决这个问题：
- en: '[PRE707]'
  id: totrans-5733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: A cache period of `-1` means caching the bundle forever.
  id: totrans-5734
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存期限为 `-1` 表示永久缓存捆绑包。
- en: Now, if we launch our application with the "prod" profile, templates and bundles
    should be cached forever.
  id: totrans-5735
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用 "prod" 配置文件启动应用程序，模板和捆绑包应该永久缓存。
- en: The properties coming from the "prod" profile will indeed overwrite the ones
    declared in our `application.properties` file.
  id: totrans-5736
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 "prod" 配置文件的属性确实会覆盖我们 `application.properties` 文件中声明的属性。
- en: Gzipping
  id: totrans-5737
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gzipping
- en: '**Gzipping** is a compression algorithm widely understood by browsers. Your
    server will serve compressed responses, which will consume a few more CPU cycles
    but will save bandwidth.'
  id: totrans-5738
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gzipping** 是一种被浏览器广泛理解的压缩算法。您的服务器将提供压缩响应，这将消耗更多的 CPU 周期，但将节省带宽。'
- en: The client browser will then be charged for unzipping the resources and displaying
    them to the user.
  id: totrans-5739
  prefs: []
  type: TYPE_NORMAL
  zh: 然后客户端浏览器将为解压资源和向用户显示资源而付费。
- en: 'To leverage Tomcat''s Gzipping abilities, simply add the following line to
    the `application-prod.properties` file:'
  id: totrans-5740
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用 Tomcat 的 Gzipping 能力，只需将以下行添加到 `application-prod.properties` 文件中：
- en: '[PRE708]'
  id: totrans-5741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: This will enable Tomcat's Gzipping compression when serving any file matching
    the MIME types specified in the list, and whose length is greater than 2048 bytes.
    You can set `server.tomcat.compression` to `force` to enforce compression or set
    it to a numerical value if you want to change the value for the minimal length
    of Gzipped assets.
  id: totrans-5742
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在提供与列表中指定的 MIME 类型匹配且长度大于 2048 字节的任何文件时启用 Tomcat 的 Gzipping 压缩。您可以将 `server.tomcat.compression`
    设置为 `force` 以强制压缩，或者将其设置为数字值，如果您想更改 Gzipped 资产的最小长度值。
- en: If you want more control over the compression, say over the level of compression,
    or want to exclude user agents from compression, you can use the `GzipFilter`
    class in Jetty by adding the `org.eclipse.jetty:jetty-servlets` dependency to
    your project.
  id: totrans-5743
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更多地控制压缩，比如压缩级别，或者想排除用户代理不进行压缩，您可以通过将 `org.eclipse.jetty:jetty-servlets`
    依赖项添加到您的项目中，使用 Jetty 中的 `GzipFilter` 类。
- en: This will automatically trigger the `GzipFilterAutoConfiguration` class, which
    can be configured with a handful of properties prefixed by `spring.http.gzip`.
    Have a look at `GzipFilterProperties` to understand its level of customization.
  id: totrans-5744
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动触发`GzipFilterAutoConfiguration`类，可以通过以`spring.http.gzip`为前缀的一些属性进行配置。查看`GzipFilterProperties`以了解其自定义级别。
- en: Note
  id: totrans-5745
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to the documentation at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#how-to-enable-http-response-compression](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#how-to-enable-http-response-compression)
    for additional information.
  id: totrans-5746
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#how-to-enable-http-response-compression](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#how-to-enable-http-response-compression)上的文档。
- en: Cache control
  id: totrans-5747
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存控制
- en: Cache control is a set of HTTP headers sent by the server to control how the
    user's browser is allowed to cache resources.
  id: totrans-5748
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存控制是由服务器发送的一组HTTP头，用于控制用户的浏览器允许缓存资源的方式。
- en: In the previous chapter, we have seen that Spring Security automatically disables
    caching for secured resources.
  id: totrans-5749
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经看到Spring Security自动禁用了受保护资源的缓存。
- en: 'If we want to benefit from cache control, we must first disable that feature:'
  id: totrans-5750
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从缓存控制中受益，我们必须首先禁用该功能：
- en: '[PRE709]'
  id: totrans-5751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: 'Now, launch the application, go to the main page, and check the Chrome developer
    console. You will see that our JavaScript files are Gzipped and cached, as marked
    in the following screenshot:'
  id: totrans-5752
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动应用程序，转到主页，并检查Chrome开发者控制台。您会看到我们的JavaScript文件已经被Gzip压缩和缓存，如下截图所示：
- en: '![Cache control](img/image00984.jpeg)'
  id: totrans-5753
  prefs: []
  type: TYPE_IMG
  zh: '![缓存控制](img/image00984.jpeg)'
- en: 'If you want more control over your cache, you could add handlers for your own
    resources in your configuration:'
  id: totrans-5754
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想对缓存有更多控制，可以在配置中为自己的资源添加处理程序：
- en: '[PRE710]'
  id: totrans-5755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: 'We could also override the Spring Security default settings. If we want to
    deactivate the "no cache control" policy for our API, we can change the `ApiSecurityConfiguration`
    class like this:'
  id: totrans-5756
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以覆盖Spring Security的默认设置。如果我们想要为我们的API停用“无缓存控制”策略，我们可以像这样更改`ApiSecurityConfiguration`类：
- en: '[PRE711]'
  id: totrans-5757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: Application cache
  id: totrans-5758
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序缓存
- en: Now that our web requests have been compressed and cached, the next step we
    can take to reduce server load is to put the results of costly operations in a
    cache. The Twitter search takes some time and will consume our application request
    ratio on the Twitter API. With Spring, we can easily cache the search and return
    the same result each time the search is called with the same parameters.
  id: totrans-5759
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的网络请求已经被压缩和缓存，我们可以采取的下一步措施是将昂贵操作的结果放入缓存以减少服务器负载。Twitter搜索需要一些时间，并且会消耗我们在Twitter
    API上的应用程序请求比例。使用Spring，我们可以轻松地缓存搜索并在每次使用相同参数调用搜索时返回相同的结果。
- en: 'The first thing that we need to do is activate Spring caching with the `@EnableCache`
    annotation. We also need to create a `CacheManager` that will resolve our caches.
    Let''s create a `CacheConfiguration` class in the `config` package:'
  id: totrans-5760
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是使用`@EnableCache`注解激活Spring缓存。我们还需要创建一个`CacheManager`来解析我们的缓存。让我们在`config`包中创建一个`CacheConfiguration`类：
- en: '[PRE712]'
  id: totrans-5761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: In the previous example, we use the simplest possible cache abstraction. Other
    implementations are also available, such as `EhCacheCacheManager` or `GuavaCacheManager`,
    which we will use in a moment.
  id: totrans-5762
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们使用了最简单的缓存抽象。还有其他可用的实现，比如`EhCacheCacheManager`或`GuavaCacheManager`，我们一会儿会用到。
- en: Now that we have configured our cache, we can use the `@Cacheable` annotation
    on our methods. When we do that, Spring will automatically cache the result of
    the method and associate it with the current parameters for retrieval.
  id: totrans-5763
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了缓存，我们可以在我们的方法上使用`@Cacheable`注解。这样做时，Spring将自动缓存方法的结果，并将其与当前参数关联以进行检索。
- en: Spring needs to create a proxy around beans whose methods are cached. This typically
    means that calling a cached method inside of the same bean will not fail to use
    Spring's cache.
  id: totrans-5764
  prefs: []
  type: TYPE_NORMAL
  zh: Spring需要在缓存方法的bean周围创建代理。这通常意味着在同一个bean内调用缓存方法不会失败地使用Spring的缓存。
- en: In our case, in the `SearchService` class, the part where we call the search
    operations, would benefit greatly from caching.
  id: totrans-5765
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，在`SearchService`类中，我们调用搜索操作的部分将受益于缓存。
- en: 'As a preliminary step, it would be good to put the code responsible for creating
    the `SearchParameters` class in a dedicated object called `SearchParamsBuilder`:'
  id: totrans-5766
  prefs: []
  type: TYPE_NORMAL
  zh: 作为预备步骤，最好将负责创建`SearchParameters`类的代码放在一个名为`SearchParamsBuilder`的专用对象中：
- en: '[PRE713]'
  id: totrans-5767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: This will help us to create search parameters in our service.
  id: totrans-5768
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助我们在我们的服务中创建搜索参数。
- en: Now we want to create a cache for our search results. We want each call to the
    Twitter API to be cached. Spring cache annotations rely on proxies to instrument
    the `@Cacheable` methods. We therefore need a new class with a method annotated
    with the `@Cacheable` annotation.
  id: totrans-5769
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想为我们的搜索结果创建一个缓存。我们希望每次调用Twitter API时都会缓存。Spring缓存注解依赖于代理来对`@Cacheable`方法进行检测。因此，我们需要一个新的类，其中的方法带有`@Cacheable`注解。
- en: When you use the Spring abstraction API, you don't know about the underlying
    implementation of the cache. Many will require both the return type and the parameter
    types of the cached method to be Serializable.
  id: totrans-5770
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Spring抽象API时，您不知道缓存的底层实现。许多都要求缓存方法的返回类型和参数类型都是可序列化的。
- en: '`SearchParameters` is not Serializable, that''s why we will pass both the search
    type and the keyword (both strings) in the cached method.'
  id: totrans-5771
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchParameters`不是可序列化的，这就是为什么我们将搜索类型和关键字（都是字符串）传递给缓存方法的原因。'
- en: 'Since we want to put the `LightTweets` object in cache, we want to make them
    `Serializable`; this will ensure that they can always be written and read from
    any cache abstraction:'
  id: totrans-5772
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要将`LightTweets`对象放入缓存，我们希望使它们可序列化；这将确保它们始终可以从任何缓存抽象中写入和读取：
- en: '[PRE714]'
  id: totrans-5773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: 'Let''s create a `SearchCache` class and put it in the `search.cache` package:'
  id: totrans-5774
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`SearchCache`类，并将其放在`search.cache`包中：
- en: '[PRE715]'
  id: totrans-5775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: It can't really get simpler than that. We used the `@Cacheable` annotation to
    specify the name of the cache that will be used. Different caches may have different
    policies.
  id: totrans-5776
  prefs: []
  type: TYPE_NORMAL
  zh: 它真的不能再简单了。我们使用`@Cacheable`注释来指定将使用的缓存的名称。不同的缓存可能有不同的策略。
- en: Note that we manually created a new `TwitterTemplate` method rather than injecting
    it like before. That's because we will have to access the cache from other threads
    a little bit later. In Spring Boot's `TwitterAutoConfiguration` class, the `Twitter`
    bean is bound to the request scope and is therefore not available outside of a
    Servlet thread.
  id: totrans-5777
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们手动创建了一个新的`TwitterTemplate`方法，而不是像以前那样注入它。这是因为稍后我们将不得不从其他线程访问缓存。在Spring
    Boot的`TwitterAutoConfiguration`类中，`Twitter` bean绑定到请求范围，因此在Servlet线程之外不可用。
- en: 'With those two new objects, the code of our `SearchService` class simply becomes
    this:'
  id: totrans-5778
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这两个新对象，我们的`SearchService`类的代码就变成了这样：
- en: '[PRE716]'
  id: totrans-5779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: Note that we annotated the service with `@Profile("!async")`. This means that
    we only create this bean if the profile `async` is not activated.
  id: totrans-5780
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用`@Profile("!async")`对服务进行了注释。这意味着只有在未激活`async`配置文件时，我们才会创建这个bean。
- en: Later, we will create another implementation of the `TwitterSearch` class to
    be able to switch between the two.
  id: totrans-5781
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将创建`TwitterSearch`类的另一个实现，以便能够在两者之间切换。
- en: 'Neat! Say we restart our application and try a big request such as the following:'
  id: totrans-5782
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！假设我们重新启动应用程序并尝试一个大请求，比如以下内容：
- en: '`http://localhost:8080/search/mixed;keywords=docker,spring,spring%20boot,spring%20mvc,groovy,grails`'
  id: totrans-5783
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/search/mixed;keywords=docker,spring,spring%20boot,spring%20mvc,groovy,grails`'
- en: 'It will take a little time at first, but then our console will display the
    following log:'
  id: totrans-5784
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始可能需要一点时间，但然后我们的控制台将显示以下日志：
- en: '[PRE717]'
  id: totrans-5785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: After that, if we hit refresh, the result will be displayed immediately and
    no cache miss will be seen in the console.
  id: totrans-5786
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，如果我们点击刷新，结果将立即显示，并且控制台中不会出现缓存未命中。
- en: 'That''s it for our cache, but there is much more to the cache API. You can
    annotate methods with the following:'
  id: totrans-5787
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们的缓存而言，就缓存API而言还有很多内容。您可以使用以下方法对方法进行注释：
- en: '`@CachEvict`: This will remove an entry from the cache'
  id: totrans-5788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@CachEvict`：这将从缓存中删除条目'
- en: '`@CachePut`: This will put the result of a method into a cache without interfering
    with the method itself'
  id: totrans-5789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@CachePut`：这将把方法的结果放入缓存，而不会干扰方法本身'
- en: '`@Caching`: This regroups the caching annotation'
  id: totrans-5790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Caching`：这将重新组合缓存注释'
- en: '`@CacheConfig`: This points to different caching configurations'
  id: totrans-5791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@CacheConfig`：这指向不同的缓存配置'
- en: The `@Cacheable` annotation can also be configured to cache results on certain
    conditions.
  id: totrans-5792
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Cacheable`注释也可以配置为根据某些条件缓存结果。'
- en: Note
  id: totrans-5793
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on Spring cache, please see the following documentation:'
  id: totrans-5794
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Spring缓存的更多信息，请参阅以下文档：
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html)'
  id: totrans-5795
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html)'
- en: Cache invalidation
  id: totrans-5796
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存失效
- en: 'Currently, search results will be cached forever. Using the default simple
    cache manager doesn''t give us a lot of options. There is one more thing that
    we can do to improve our application caching. Since we have Guava in our classpath,
    we can replace the existing cache manager in the cache configuration with the
    following code:'
  id: totrans-5797
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，搜索结果将被永久缓存。使用默认的简单缓存管理器并不能给我们很多选项。我们可以做的另一件事是改进我们的应用程序缓存。由于我们的类路径中有Guava，我们可以用以下代码替换缓存配置中的现有缓存管理器：
- en: '[PRE718]'
  id: totrans-5798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: This will build a cache expiring after 10 minutes and using soft values, meaning
    that the entries will be cleaned up if the JVM runs low on memory.
  id: totrans-5799
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建一个在10分钟后过期并使用软值的缓存，这意味着如果JVM内存不足，条目将被清理。
- en: Try to fiddle around with Guava's cache builder. You can specify a smaller time
    unit for your testing, and even specify different cache policies.
  id: totrans-5800
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试玩弄Guava的缓存构建器。您可以为测试指定更小的时间单位，甚至指定不同的缓存策略。
- en: Note
  id: totrans-5801
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the documentation at [https://code.google.com/p/guava-libraries/wiki/CachesExplained](https://code.google.com/p/guava-libraries/wiki/CachesExplained).
  id: totrans-5802
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://code.google.com/p/guava-libraries/wiki/CachesExplained](https://code.google.com/p/guava-libraries/wiki/CachesExplained)上的文档。
- en: Distributed cache
  id: totrans-5803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式缓存
- en: 'We already have a Redis profile. If Redis is available, we could also use it
    as our cache provider. It would allow us to distribute the cache across multiple
    servers. Let''s change the `RedisConfig` class:'
  id: totrans-5804
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个Redis配置文件。如果Redis可用，我们还可以将其用作缓存提供程序。这将允许我们在多个服务器上分发缓存。让我们更改`RedisConfig`类：
- en: '[PRE719]'
  id: totrans-5805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: With this configuration, if we run our application with the "Redis" profile,
    the Redis cache manager will be used instead of the one defined in the `CacheConfig`
    class since it is annotated with `@Primary`.
  id: totrans-5806
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个配置，如果我们使用"Redis"配置文件运行我们的应用程序，那么Redis缓存管理器将被用来代替`CacheConfig`类中定义的缓存管理器，因为它被`@Primary`注释。
- en: This will allow the cache to be distributed in case we want to scale on more
    than one server. The Redis template is used to serialize the cache return values
    and parameters, and will require objects to be `Serializable`.
  id: totrans-5807
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许缓存在需要在多个服务器上进行扩展时进行分布。Redis模板用于序列化缓存返回值和参数，并且需要对象是`Serializable`。
- en: Async methods
  id: totrans-5808
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步方法
- en: There is still a bottleneck in our application; when a user searches ten keywords,
    each search will be executed sequentially. We could easily improve the speed of
    our application by using different threads and launching all the searches at the
    same time.
  id: totrans-5809
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序仍然存在瓶颈；当用户搜索十个关键字时，每次搜索都会按顺序执行。我们可以通过使用不同的线程并同时启动所有搜索来轻松提高应用程序的速度。
- en: To enable Spring's asynchronous capabilities, one must use the `@EnableAsync`
    annotation. This will transparently execute any method annotated with `@Async`
    using a `java.util.concurrent.Executor`.
  id: totrans-5810
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用Spring的异步功能，必须使用`@EnableAsync`注释。这将透明地执行任何使用`@Async`注释的方法，使用`java.util.concurrent.Executor`。
- en: 'It is possible to customize the default executor used by implementing the `AsyncConfigurer`
    interface. Let''s create a new configuration class called `AsyncConfig` in the
    `config` package:'
  id: totrans-5811
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过实现`AsyncConfigurer`接口来自定义默认的执行程序。让我们在`config`包中创建一个名为`AsyncConfig`的新配置类：
- en: '[PRE720]'
  id: totrans-5812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: With this configuration, we ensure that no more than 10 threads will be allocated
    to handle our asynchronous tasks in the whole application. This is very important
    in a web application where each client has a dedicated thread. The more threads
    you use and the longer they block, the fewer client requests you can process.
  id: totrans-5813
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种配置，我们确保在整个应用程序中不会分配超过10个线程来处理我们的异步任务。这在Web应用程序中非常重要，因为每个客户端都有一个专用的线程。您使用的线程越多，它们阻塞的时间越长，您可以处理的客户端请求就越少。
- en: Let's annotate our search method and make it asynchronous. We will need to make
    it return a subtype of `Future`, a java concurrent class that represents an asynchronous
    result.
  id: totrans-5814
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们注释我们的搜索方法并使其异步化。我们需要使其返回`Future`的子类型，这是一个表示异步结果的Java并发类。
- en: We will create a new implementation of the `TwitterSearch` class that will query
    the search API in different threads. The implementation is a bit tricky so I'll
    break it down into small parts.
  id: totrans-5815
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建`TwitterSearch`类的新实现，该实现将在不同的线程中查询搜索API。该实现有点棘手，所以我会将其分解成小部分。
- en: 'First, we need to annotate the method that will query the API with the `@Async`
    annotation to tell Spring to schedule the task using our executor. Again, Spring
    will use proxy to do its magic so this method has to be in a different class to
    the service calling it. It would also be nice if this component could use our
    cache. That would lead us to create this component:'
  id: totrans-5816
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`@Async`注解对将查询API的方法进行注释，以告诉Spring使用我们的执行程序安排任务。同样，Spring将使用代理来完成其工作，因此这个方法必须在调用它的服务的不同类中。如果这个组件也能使用我们的缓存，那就太好了。这将导致我们创建这个组件：
- en: '[PRE721]'
  id: totrans-5817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: Don't create this class yet. Let's see what our service needs first.
  id: totrans-5818
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要创建这个类。让我们先看看我们的服务需要什么。
- en: The `ListenableFuture` abstraction allows us to add callbacks after the completion
    of the future, either in the case of correct results or if an exception occurs.
  id: totrans-5819
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListenableFuture`抽象允许我们在未来完成后添加回调，无论是在正确结果的情况下还是在发生异常时。'
- en: 'The algorithm to wait for a bunch of asynchronous tasks would look like this:'
  id: totrans-5820
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一堆异步任务的算法看起来像这样：
- en: '[PRE722]'
  id: totrans-5821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: If you don't know the `CountDownLatch` method, it is just a simple blocking
    counter.
  id: totrans-5822
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不了解`CountDownLatch`方法，它只是一个简单的阻塞计数器。
- en: The `await()` method will wait until the latch reaches 0 to unlock the thread.
  id: totrans-5823
  prefs: []
  type: TYPE_NORMAL
  zh: '`await()`方法将等待，直到锁存器达到0才解锁线程。'
- en: The `asyncFetch` method, shown in the preceding code, will attach a callback
    to each of our `asynFetch` methods. The callback will add the results to the `allTweets`
    list and decrement the latch. Once each callback has been called, the method will
    return all the tweets.
  id: totrans-5824
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中显示的`asyncFetch`方法将为我们的`asynFetch`方法附加一个回调。回调将结果添加到`allTweets`列表中，并递减锁存器。一旦每个回调都被调用，该方法将返回所有推文。
- en: 'Got it? Here is the final code:'
  id: totrans-5825
  prefs: []
  type: TYPE_NORMAL
  zh: 明白了吗？这是最终代码：
- en: '[PRE723]'
  id: totrans-5826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: Now, to use this implementation, we need to run the application with the `async`
    profile.
  id: totrans-5827
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要使用这个实现，我们需要使用`async`配置文件运行应用程序。
- en: 'We can run it with multiple profiles active at the same time by separating
    them with commas, as follows:'
  id: totrans-5828
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过用逗号分隔它们来同时运行多个活动配置文件，如下所示：
- en: '`--spring.profiles.active=redis,async`'
  id: totrans-5829
  prefs: []
  type: TYPE_NORMAL
  zh: '`--spring.profiles.active=redis,async`'
- en: 'If we launch a search on multiple terms, we can see something like this:'
  id: totrans-5830
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对多个术语进行搜索，我们可以看到类似这样的东西：
- en: '[PRE724]'
  id: totrans-5831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: This shows that the different searches are done in parallel.
  id: totrans-5832
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明不同的搜索是并行进行的。
- en: 'Java 8 actually introduced a new type called `CompletableFuture`, which is
    a much better API to manipulate futures. The main problem with completable futures
    is that no executor can work with them without a bit of code. This is outside
    of the scope of the article, but you can check my blog for an article on the subject:
    [http://geowarin.github.io/spring/2015/06/12/completable-futures-with-spring-async.html](http://geowarin.github.io/spring/2015/06/12/completable-futures-with-spring-async.html).'
  id: totrans-5833
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8实际上引入了一种称为`CompletableFuture`的新类型，这是一个更好的API来操作futures。可完成的未来的主要问题是没有执行程序可以在没有一点代码的情况下与它们一起工作。这超出了本文的范围，但您可以查看我的博客了解有关该主题的文章：[http://geowarin.github.io/spring/2015/06/12/completable-futures-with-spring-async.html](http://geowarin.github.io/spring/2015/06/12/completable-futures-with-spring-async.html)。
- en: Note
  id: totrans-5834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Disclaimer**'
  id: totrans-5835
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明**'
- en: The following sections contains a lot of JavaScript. Obviously, I think you
    should have a look at the code, especially if JavaScript is not your favorite
    language. It is time to learn it. That being said, even if WebSocket is insanely
    cool, it is not a requirement. You can safely skip ahead to the last chapter and
    deploy your application right now.
  id: totrans-5836
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分包含大量的JavaScript。显然，我认为你应该看一下代码，特别是如果JavaScript不是你最喜欢的语言的话。现在是学习它的时候了。话虽如此，即使WebSocket非常酷，也不是必需的。您可以放心地跳到最后一章并立即部署您的应用程序。
- en: ETags
  id: totrans-5837
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ETags
- en: Our Twitter results are neatly cached, so a user refreshing the result page
    will not trigger an additional search on the Twitter API. However, the response
    will be sent to this user multiple times even if the results do not change, which
    will waste bandwidth.
  id: totrans-5838
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Twitter结果被整洁地缓存，因此刷新结果页面的用户不会触发对Twitter API的额外搜索。但是，即使结果没有改变，响应也会多次发送给这个用户，这将浪费带宽。
- en: An ETag is a hash of the data of a web response and is sent as a header. The
    client can memorize the ETag of a resource and send the last known version to
    the server with the `If-None-Match` header. This allows the server to answer `304
    Not Modified` if the request does not change in the meantime.
  id: totrans-5839
  prefs: []
  type: TYPE_NORMAL
  zh: ETag是Web响应数据的哈希值，并作为标头发送。客户端可以记住资源的ETag，并使用`If-None-Match`标头将最后已知版本发送到服务器。这使得服务器可以在请求在此期间不发生变化时回答`304
    Not Modified`。
- en: 'Spring has a special Servlet filter, called `ShallowEtagHeaderFilter`, to handle
    ETags. Simply add it as a bean in the `MasterSpringMvc4Application` configuration
    class:'
  id: totrans-5840
  prefs: []
  type: TYPE_NORMAL
  zh: Spring有一个特殊的Servlet过滤器，称为`ShallowEtagHeaderFilter`，用于处理ETags。只需将其添加为`MasterSpringMvc4Application`配置类中的一个bean：
- en: '[PRE725]'
  id: totrans-5841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: This will automatically generate ETags for your responses as long as the response
    has no cache control headers.
  id: totrans-5842
  prefs: []
  type: TYPE_NORMAL
  zh: 只要响应没有缓存控制标头，这将自动生成响应的ETags。
- en: 'Now if we interrogate our RESTful API, we can see that an ETag is sent along
    with the server response:'
  id: totrans-5843
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查询我们的RESTful API，我们可以看到ETag随服务器响应一起发送：
- en: '[PRE726]'
  id: totrans-5844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: 'Now if we request the same resource one more time, specifying the last ETag
    that we know of in the `If-None-Match` headers, the server will automatically
    respond with a `304 Not Modified` status:'
  id: totrans-5845
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次请求相同的资源，在`If-None-Match`标头中指定我们知道的最后一个ETag，服务器将自动以`304 Not Modified`状态响应：
- en: '[PRE727]'
  id: totrans-5846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: Tip
  id: totrans-5847
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Due to the parallel nature of our search, the tweets fetched for different keywords
    might arrive in different orders, which will make the ETag change. If you want
    this technique to work for multiple searches, please consider ordering your search
    results before sending them to the client.
  id: totrans-5848
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们搜索的并行性质，不同关键字获取的推文可能以不同的顺序到达，这将导致ETag发生变化。如果您希望这种技术适用于多个搜索，请在将搜索结果发送到客户端之前考虑对搜索结果进行排序。
- en: If we want to take advantage of that, we obviously need to rewrite our client
    code to handle them. We will see a simple solution to do that with jQuery, using
    the local storage of the browser to save the latest query of the user.
  id: totrans-5849
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想利用它，显然需要重写我们的客户端代码来处理它们。我们将看到一个简单的解决方案，使用jQuery来做到这一点，使用浏览器的本地存储来保存用户的最新查询。
- en: First, remove the `tweets` variable from our model; we won't do the search from
    the server anymore. You will have to modify a test or two to reflect this change.
  id: totrans-5850
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从我们的模型中删除`tweets`变量；我们将不再从服务器进行搜索。您将需要修改一个或两个测试以反映这一变化。
- en: 'Before going further, let''s add lodash to our JavaScript libraries. If you
    don''t know lodash, let''s say it is the Apache Utils of JavaScript. You can add
    it to your project dependencies like so:'
  id: totrans-5851
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们将lodash添加到我们的JavaScript库中。如果您不了解lodash，可以将其添加到项目依赖项中，如下所示：
- en: '[PRE728]'
  id: totrans-5852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: 'Add it to the `default.html` layout, just under the materialize''s JavaScript:'
  id: totrans-5853
  prefs: []
  type: TYPE_NORMAL
  zh: 将其添加到`default.html`布局中，就在materialize的JavaScript下面：
- en: '[PRE729]'
  id: totrans-5854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: 'We will modify the `resultPage.html` file and leave the part where the tweets
    should appear empty:'
  id: totrans-5855
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`resultPage.html`文件，并将推文应该出现的部分留空：
- en: '[PRE730]'
  id: totrans-5856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: 'Then, we will add a script element at the bottom of the page, just before closing
    the body:'
  id: totrans-5857
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在页面底部添加一个脚本元素，就在关闭body之前：
- en: '[PRE731]'
  id: totrans-5858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: 'The preceding script will just be in charge of constructing the URL for our
    request. We will use it by issuing a simple jQuery AJAX call:'
  id: totrans-5859
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本将负责构建我们请求的URL。我们将通过发出简单的jQuery AJAX调用来使用它：
- en: '[PRE732]'
  id: totrans-5860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: 'We will use the `beforeSend` callback to have a chance to modify the request
    headers just before the call is made:'
  id: totrans-5861
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`beforeSend`回调在发出调用之前有机会修改请求标头：
- en: '[PRE733]'
  id: totrans-5862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: As you can see, we can easily read and write from local storage. The gotcha
    here is that local storage only works with strings so we have to parse and serialize
    the query object to JSON.
  id: totrans-5863
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以轻松地从本地存储中读取和写入。这里的问题是本地存储只能处理字符串，因此我们必须将查询对象解析和序列化为JSON。
- en: 'We can handle the response by retrieving the content from local storage if
    the HTTP status is `304 Not Modified`:'
  id: totrans-5864
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HTTP状态是`304 Not Modified`，我们可以通过从本地存储中检索内容来处理响应：
- en: '[PRE734]'
  id: totrans-5865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: 'For the `addTweet` function that you will see next, I''m using lodash, a very
    useful JavaScript utility library, to generate templates. The function to add
    tweets to the page can be written as follows:'
  id: totrans-5866
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来将看到的`addTweet`函数，我使用了lodash，这是一个非常有用的JavaScript实用程序库，用于生成模板。将推文添加到页面的函数可以编写如下：
- en: '[PRE735]'
  id: totrans-5867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: That was a lot of JavaScript! It would make more sense to generalize this pattern
    in a Single Page Application using a library such as Backbone.js. Hopefully, though,
    this will serve as a simple example of how to implement ETags in your application.
  id: totrans-5868
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多JavaScript！使用Backbone.js等库将这种模式概括为单页面应用程序可能更有意义。尽管如此，这将作为一个简单的示例，展示如何在应用程序中实现ETags。
- en: 'If you try to refresh the search page multiple times, you will see that the
    contents do not change and will be displayed immediately:'
  id: totrans-5869
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试多次刷新搜索页面，您会发现内容不会改变，并且会立即显示：
- en: '![ETags](img/image00985.jpeg)'
  id: totrans-5870
  prefs: []
  type: TYPE_IMG
  zh: '![ETags](img/image00985.jpeg)'
- en: There are other uses for ETags, such as optimistic locking for transactions
    (it lets you know on which version of an object the client is supposed to be working
    on at any time). It is also extra work on the server side to hash the data before
    sending it across, but it will save bandwidth.
  id: totrans-5871
  prefs: []
  type: TYPE_NORMAL
  zh: ETags还有其他用途，例如用于事务的乐观锁定（它让您知道客户端应该在任何时间上使用对象的哪个版本）。在服务器端在发送数据之前对数据进行哈希处理也是额外的工作，但它将节省带宽。
- en: WebSockets
  id: totrans-5872
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets
- en: Another kind of optimization we can think about is sending the data to the client
    as it becomes available to the server. Since we fetch results of the search in
    multiple threads, the data will come in multiple chunks. We could send them bit
    by bit instead of waiting for all the results.
  id: totrans-5873
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以考虑的另一种优化是在数据可用时将数据发送到客户端。由于我们在多个线程中获取搜索结果，数据将以多个块的形式到达。我们可以逐步发送它们，而不是等待所有结果。
- en: Spring has excellent support for WebSockets, which is a protocol that allows
    clients to maintain a long-running connection to the server. Data can be pushed
    in web sockets on both ends of the connection and consumers will get the data
    in real-time.
  id: totrans-5874
  prefs: []
  type: TYPE_NORMAL
  zh: Spring对WebSockets有很好的支持，这是一种允许客户端与服务器保持长时间连接的协议。数据可以在连接的两端推送到WebSockets，消费者将实时获取数据。
- en: We will use a JavaScript library called SockJS to ensure compatibility with
    all browsers. Sockjs will transparently fall back on another strategy if our users
    have an outdated browser.
  id: totrans-5875
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为SockJS的JavaScript库，以确保与所有浏览器兼容。如果我们的用户使用过时的浏览器，Sockjs将自动切换到另一种策略。
- en: We will also use StompJS to connect to our message broker.
  id: totrans-5876
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用StompJS连接到我们的消息代理。
- en: 'Add the following library to your build:'
  id: totrans-5877
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下库添加到您的构建中：
- en: '[PRE736]'
  id: totrans-5878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: 'Add the WebJars to our default Thymeleaf template:'
  id: totrans-5879
  prefs: []
  type: TYPE_NORMAL
  zh: 将WebJars添加到我们的默认Thymeleaf模板中：
- en: '[PRE737]'
  id: totrans-5880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: 'To configure WebSockets in our application, we need to add a bit of configuration
    as well:'
  id: totrans-5881
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中配置WebSockets，我们还需要添加一些配置：
- en: '[PRE738]'
  id: totrans-5882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: This will configure the different channels available in our application. SockJS
    clients will connect to the `twitterSearch` endpoint and will push data to the
    server on `/ws/ channel` and be able to listen to `/topic/` for changes.
  id: totrans-5883
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置我们应用程序中可用的不同频道。SockJS客户端将连接到`twitterSearch`端点，并将数据推送到服务器上的`/ws/ channel`，并能够监听`/topic/`以进行更改。
- en: 'This will allow us to inject a `SimpMessagingTemplate` in a new controller
    to push data to the client in the `/topic/searchResult` channel, as follows:'
  id: totrans-5884
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在新的控制器中注入`SimpMessagingTemplate`，以便通过`/topic/searchResult`频道向客户端推送数据，如下所示：
- en: '[PRE739]'
  id: totrans-5885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: 'In our `resultPage`, the JavaScript code is really simple:'
  id: totrans-5886
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`resultPage`中，JavaScript代码非常简单：
- en: '[PRE740]'
  id: totrans-5887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: 'The `displayTweets` function remains essentially the same as before:'
  id: totrans-5888
  prefs: []
  type: TYPE_NORMAL
  zh: '`displayTweets`函数基本上与以前相同：'
- en: '[PRE741]'
  id: totrans-5889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: Here you go! The client will now receive the results of all the searches in
    the application-- live!
  id: totrans-5890
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！客户端现在将实时接收应用程序中所有搜索的结果！
- en: 'Before pushing this to production, it will require a little bit more work.
    Here are some ideas:'
  id: totrans-5891
  prefs: []
  type: TYPE_NORMAL
  zh: 在将其推向生产之前，这将需要更多的工作。以下是一些想法：
- en: Create subchannels for clients to privately listen to changes
  id: totrans-5892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为客户端创建子频道，以便私下监听更改
- en: Close the channel when a client is done using it
  id: totrans-5893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当客户端使用完毕时关闭频道
- en: Add CSS transitions to the new tweets so the user can feel that it's real-time
  id: totrans-5894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新推文添加CSS过渡，以便用户感觉到它是实时的
- en: Use a real broker, such as RabbitMQ, to allow the backend to scale with connections
  id: totrans-5895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用真正的代理，如RabbitMQ，允许后端与连接一起扩展
- en: There is much more to WebSocket than just this simple example. Don't forget
    to have a look at the documentation at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html)
    for more information.
  id: totrans-5896
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket还有比这个简单示例更多的内容。不要忘记查看[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html)上的文档以获取更多信息。
- en: The check point
  id: totrans-5897
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: 'In this chapter, we created two new configurations: `AsyncConfiguration`, which
    will allow us to use the `@Async` annotation to submit tasks to an executor, and
    `CacheConfiguration`, which will create a `CacheManager` interface and allow us
    to use the `@Cacheable` annotation. Since we can use Redis as a cache manager,
    we also amended the `RedisConfig` class.'
  id: totrans-5898
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了两个新的配置：`AsyncConfiguration`，它将允许我们使用`@Async`注解将任务提交给执行器，并且`CacheConfiguration`，它将创建一个`CacheManager`接口，并允许我们使用`@Cacheable`注解。由于我们可以使用Redis作为缓存管理器，我们还修改了`RedisConfig`类。
- en: 'We created a `SearchCache` class, which contained a cache of tweets, and we
    now have two `TwitterSearch` implementations to choose from: good old `SearchService`,
    which will fetch each result synchronously, and `ParallelSearchService`, which
    will issue each query in a different thread:'
  id: totrans-5899
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`SearchCache`类，其中包含了推文的缓存，现在我们有两个`TwitterSearch`实现可供选择：老旧的`SearchService`，它将同步获取每个结果，以及`ParallelSearchService`，它将在不同的线程中发出每个查询：
- en: '![The check point](img/image00986.jpeg)'
  id: totrans-5900
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/image00986.jpeg)'
- en: Summary
  id: totrans-5901
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen two different philosophies relating to performance
    improvement. At the beginning, we tried to reduce the bandwidth used by our clients
    by caching data and using as few connections to our server as possible.
  id: totrans-5902
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了与性能改进相关的两种不同哲学。一开始，我们试图通过缓存数据并尽可能少地使用与服务器的连接来减少客户端使用的带宽。
- en: In the second part, though, we began to do something more advanced by allowing
    searches to be run in parallel and each client to remain in sync with a persistent
    connection to the server through web sockets. This will allow clients to receive
    updates in real time, and our application will feel more reactive but consume
    more threads.
  id: totrans-5903
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第二部分，我们开始做一些更高级的事情，允许搜索并行运行，并且每个客户端通过Web套接字与服务器保持同步的持久连接。这将允许客户端实时接收更新，我们的应用程序将感觉更具反应性，但会消耗更多的线程。
- en: I strongly encourage you to polish the result before we move on to the next
    chapter and deploy our application for good!
  id: totrans-5904
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您在我们进入下一章并永久部署我们的应用程序之前，对结果进行完善！
- en: Chapter 8. Deploying Your Web Application to the Cloud
  id: totrans-5905
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。将您的Web应用部署到云端
- en: In this chapter, we'll take a tour of the different cloud providers, understand
    the challenges and benefits of a distributed architecture, and see how to deploy
    your web application to Pivotal Web Services and to Heroku.
  id: totrans-5906
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将参观不同的云提供商，了解分布式架构的挑战和好处，并了解如何将您的Web应用程序部署到Pivotal Web Services和Heroku。
- en: Choosing your host
  id: totrans-5907
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的主机
- en: There are many forms of cloud hosting. For developers, the choice will be mainly
    between a Platform as a Service (PaaS) and an Infrastructure as a Service (IaaS).
  id: totrans-5908
  prefs: []
  type: TYPE_NORMAL
  zh: 云托管有许多形式。对于开发人员来说，选择主要将在平台即服务（PaaS）和基础设施即服务（IaaS）之间进行。
- en: Using the latest, you will often have a bare metal machine that you can manage
    and on which you can install all the services required by your application.
  id: totrans-5909
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新的技术，您通常会有一台裸机，您可以管理并在其中安装应用程序所需的所有服务。
- en: If we leave aside technologies such as Docker (which is absolutely amazing,
    you should absolutely give it a try), this is really similar to traditional hosting
    where your operation team will have to set up and maintain an environment in which
    the application can run.
  id: totrans-5910
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不考虑Docker等技术（这绝对是令人惊叹的，您绝对应该尝试一下），这与传统托管非常相似，其中您的运营团队将不得不设置和维护应用程序可以运行的环境。
- en: On the other hand, PaaS makes it easy to deploy your application as you develop
    it with a simple push-to-deploy workflow.
  id: totrans-5911
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，PaaS使得在开发应用程序时轻松部署应用程序，只需简单的推送即可部署工作流程。
- en: 'The most well known providers are:'
  id: totrans-5912
  prefs: []
  type: TYPE_NORMAL
  zh: 最知名的提供商有：
- en: Cloud Foundry backed by Pivotal
  id: totrans-5913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Pivotal支持的Cloud Foundry
- en: OpenShift by Red Hat
  id: totrans-5914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由红帽提供的OpenShift
- en: Heroku acquired by Salesforce in 2010
  id: totrans-5915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku于2010年被Salesforce收购
- en: Each of these three providers come with different pros and cons. I will try
    to give you an overview of these.
  id: totrans-5916
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个提供商各有优缺点。我将尝试为您概述这些。
- en: Cloud Foundry
  id: totrans-5917
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: Backed by Pivotal, the company behind Spring, Pivotal Web Service runs on Cloud
    Foundry, an open source PaaS maintained by a foundation, and comes with an interesting
    package.
  id: totrans-5918
  prefs: []
  type: TYPE_NORMAL
  zh: 由Pivotal支持，Pivotal Web服务是由Spring背后的公司Pivotal维护的开源PaaS Cloud Foundry运行，并提供有趣的套餐。
- en: They offer a 60 day free trial and their pricing is a function of the memory
    allocated for your instances and the number of instances you own.
  id: totrans-5919
  prefs: []
  type: TYPE_NORMAL
  zh: 他们提供60天的免费试用，其定价是您为实例分配的内存和您拥有的实例数量的函数。
- en: Their prices range from $2.70 per month for the smallest (128 Mb) instance to
    $43.20 per month for the 2 GB instance.
  id: totrans-5920
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的价格范围从每月2.70美元的最小（128 Mb）实例到每月43.20美元的2 GB实例。
- en: If you want to give it a try, no credit card is required for the free trial.
    They have a market place to easily install services, such as Redis or Postgre
    SQL, with rather limited free options. They have a good command-line utility to
    manage your application from your console. You can either use buildpacks or push
    a JAR directly for deployment.
  id: totrans-5921
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试一下，免费试用不需要信用卡。他们有一个市场，可以轻松安装服务，如Redis或Postgre SQL，但免费选项相对有限。他们有一个很好的命令行实用程序，可以从控制台管理您的应用程序。您可以使用构建包，也可以直接推送JAR文件进行部署。
- en: Tip
  id: totrans-5922
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Build packs will try to guess the stack that you are using and build your application
    in the most standard way (`mvn package` for Maven, `./gradlew stage` for Gradle,
    and so on).
  id: totrans-5923
  prefs: []
  type: TYPE_NORMAL
  zh: 构建包将尝试猜测您正在使用的堆栈，并以最标准的方式构建您的应用程序（Maven的`mvn package`，Gradle的`./gradlew stage`等）。
- en: Note
  id: totrans-5924
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Refer to the tutorial available at the following URL to deploy your application
    to Cloud Foundry:'
  id: totrans-5925
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下网址提供的教程，将您的应用程序部署到Cloud Foundry：
- en: '[http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html](http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html)'
  id: totrans-5926
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html](http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html)'
- en: OpenShift
  id: totrans-5927
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift
- en: '**OpenShift** is maintained by Red Hat and powered by OpenShift Origin, an
    open source facility running Docker containers on top of Google''s Kubernetes.'
  id: totrans-5928
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenShift**由Red Hat维护，并由OpenShift Origin提供支持，这是一个在Google的Kubernetes之上运行Docker容器的开源设施。'
- en: It is priced well and offers a lot of freedom, as it is both a PaaS and an IaaS.
    Its pricing is based on gears, containers running an application, or a service
    such as Jenkins, or a database.
  id: totrans-5929
  prefs: []
  type: TYPE_NORMAL
  zh: 它的定价合理，并提供了很多自由度，因为它既是PaaS又是IaaS。其定价是基于齿轮、运行应用程序的容器或服务（如Jenkins或数据库）。
- en: OpenShift has a free plan offering three small gears. Your application must
    be idle for 24 hours per month unless you enter your billing information.
  id: totrans-5930
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift有一个免费计划，提供三个小齿轮。您的应用程序每月必须闲置24小时，除非您输入您的计费信息。
- en: Additional or bigger gears are billed at approximately $15 a month for the smallest,
    and $72 for the biggest.
  id: totrans-5931
  prefs: []
  type: TYPE_NORMAL
  zh: 额外或更大的齿轮按月收费，最小的约为15美元，最大的为72美元。
- en: To deploy a Spring Boot application on OpenShift, you will have to use the Do
    It Yourself cartridge. It is a bit more work than other buildpack-based PaaS but
    it is also easier to configure.
  id: totrans-5932
  prefs: []
  type: TYPE_NORMAL
  zh: 要在OpenShift上部署Spring Boot应用程序，您将需要使用自定义的Do It Yourself cartridge。这比其他基于构建包的PaaS需要更多的工作，但也更容易配置。
- en: Take a look at the blog post for a Spring Boot tutorial with OpenShift, which
    is available at [http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html](http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html).
  id: totrans-5933
  prefs: []
  type: TYPE_NORMAL
  zh: 查看博客文章，了解有关在OpenShift上使用Spring Boot的教程，网址为[http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html](http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html)。
- en: Heroku
  id: totrans-5934
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku
- en: Heroku is a well known PaaS with extensive documentation and a code-centric
    approach based on build packs. It can connect to a lot of services called add-ons,
    but using them requires your billing information.
  id: totrans-5935
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku是一个知名的PaaS，拥有广泛的文档和基于构建包的代码中心方法。它可以连接到许多称为附加组件的服务，但使用它们需要您的计费信息。
- en: It is really interesting for a free project and is very fast to get started
    with. The downside is that it directly costs more than $25 per month if you want
    to scale up. Free instances will go into the sleep mode after 30 minutes of inactivity,
    which means free Heroku apps will always take as much as 30 seconds to load.
  id: totrans-5936
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个免费项目来说真的很有趣，而且很快就可以开始。不足之处是，如果您想扩展规模，它的直接成本将超过每月25美元。免费实例在30分钟的不活动后将进入睡眠模式，这意味着免费的Heroku应用程序加载时间总是需要30秒。
- en: Heroku has a great administration dashboard and command-line tools. For this
    chapter, I chose Heroku because it is very straightforward. The concepts you will
    grasp here are applicable to most PaaS.
  id: totrans-5937
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku拥有出色的管理仪表板和命令行工具。在本章中，我选择了Heroku，因为它非常直接。您在这里掌握的概念适用于大多数PaaS。
- en: You can follow most of the chapter and deploy your application without providing
    your credit card information as long as you do not use the Redis add-on. You won't
    be charged if you select the free plan.
  id: totrans-5938
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您不使用Redis附加组件，您可以遵循本章的大部分内容并部署您的应用程序，而无需提供信用卡信息。如果选择免费计划，您将不会被收费。
- en: Deploying your web application to Pivotal Web Services
  id: totrans-5939
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的Web应用程序部署到Pivotal Web服务
- en: Follow this section if you want to deploy your application to Pivotal Web Services
    (PWS).
  id: totrans-5940
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将您的应用程序部署到Pivotal Web服务（PWS），请参考本节。
- en: Installing the Cloud Foundry CLI tools
  id: totrans-5941
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Cloud Foundry CLI工具
- en: The first thing we need to do to create a Cloud Foundry application is to set
    up an account on PWS. This is documented at [http://docs.run.pivotal.io/starting/](http://docs.run.pivotal.io/starting/).
  id: totrans-5942
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Cloud Foundry应用程序的第一步是在PWS上设置一个帐户。这在[http://docs.run.pivotal.io/starting/](http://docs.run.pivotal.io/starting/)中有记录。
- en: 'You will be asked to create an organization and each new organization will
    have a default space (development) created within the organization. As shown in
    the following screenshot:'
  id: totrans-5943
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被要求创建一个组织，每个新组织都将在组织内创建一个默认空间（开发）。如下图所示：
- en: '![Installing the Cloud Foundry CLI tools](img/image00987.jpeg)'
  id: totrans-5944
  prefs: []
  type: TYPE_IMG
  zh: '![安装Cloud Foundry CLI工具](img/image00987.jpeg)'
- en: 'On the left-hand side navigation bar, you will see a link to **Tools** from
    which you download the CLI. It is also available from the developer console. Select
    the appropriate package for your operating system:'
  id: totrans-5945
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧导航栏中，您将看到一个指向**工具**的链接，您可以从中下载CLI。它也可以从开发者控制台中获得。选择适合您操作系统的适当软件包：
- en: '![Installing the Cloud Foundry CLI tools](img/image00988.jpeg)'
  id: totrans-5946
  prefs: []
  type: TYPE_IMG
  zh: '![安装Cloud Foundry CLI工具](img/image00988.jpeg)'
- en: Assembling the application
  id: totrans-5947
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组装应用程序
- en: Our application simply needs to be assembled for deployment.
  id: totrans-5948
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序只需要组装以进行部署。
- en: The good thing with PWS is that you don't have to push your sources to deploy.
    You can generate the JAR, push it, and everything will be autodetected.
  id: totrans-5949
  prefs: []
  type: TYPE_NORMAL
  zh: PWS的好处是您无需推送源代码即可部署。您可以生成JAR，推送它，一切都将被自动检测。
- en: 'We can package this for deployment with the following command:'
  id: totrans-5950
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令将其打包以进行部署：
- en: '[PRE742]'
  id: totrans-5951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: 'This will create a jar file in the `build/libs` directory. At this point, you
    can execute the following command. The following command targets your deployment
    to your space within PWS (`run.pivotal.io`):'
  id: totrans-5952
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`build/libs`目录中创建一个jar文件。此时，您可以执行以下命令。以下命令将将您的部署目标定位到PWS（`run.pivotal.io`）中的空间：
- en: '[PRE743]'
  id: totrans-5953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: 'Once you have successfully logged in, you can push your jar with the following
    command. You will need to come up with an available name:'
  id: totrans-5954
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，您可以使用以下命令推送您的jar文件。您需要想出一个可用的名称：
- en: '[PRE744]'
  id: totrans-5955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: There is a lot that the platform is performing on your behalf. It provisions
    a container and detects which buildpack is needed, in this case, Java.
  id: totrans-5956
  prefs: []
  type: TYPE_NORMAL
  zh: 平台正在为您执行很多工作。它提供了一个容器，并检测所需的构建包，本例中为Java。
- en: It then installs the required JDK and uploads the application we pointed it
    to. It creates a route to the application, which it reports to us, and then launches
    the application for us.
  id: totrans-5957
  prefs: []
  type: TYPE_NORMAL
  zh: 然后安装所需的JDK并上传我们指向的应用程序。它创建了一个应用程序的路由，并向我们报告，然后为我们启动了应用程序。
- en: 'Now you can view the application on the developer console:'
  id: totrans-5958
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在开发者控制台上查看应用程序：
- en: '![Assembling the application](img/image00989.jpeg)'
  id: totrans-5959
  prefs: []
  type: TYPE_IMG
  zh: '![组装应用程序](img/image00989.jpeg)'
- en: 'On selecting the highlighted route, the application will be available for use.
    Visit [http://msmvc4.cfapps.io](http://msmvc4.cfapps.io), then you will see the
    following screenshot:'
  id: totrans-5960
  prefs: []
  type: TYPE_NORMAL
  zh: 选择突出显示的路由后，应用程序将可供使用。访问[http://msmvc4.cfapps.io](http://msmvc4.cfapps.io)，然后您将看到以下截图：
- en: '![Assembling the application](img/image00990.jpeg)'
  id: totrans-5961
  prefs: []
  type: TYPE_IMG
  zh: '![组装应用程序](img/image00990.jpeg)'
- en: Bravo!
  id: totrans-5962
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: The only thing that will not work yet is the file upload. However, we will fix
    that in a minute.
  id: totrans-5963
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一还不能工作的是文件上传。但是，我们将在一分钟内解决这个问题。
- en: Activating Redis
  id: totrans-5964
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活Redis
- en: In your application services, you can choose between many services. One of them
    is Redis Cloud, which has a free plan with 30 MB of storage. Go ahead and select
    this plan.
  id: totrans-5965
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序服务中，您可以在许多服务之间进行选择。其中之一是Redis Cloud，它具有30MB免费存储空间的免费计划。继续选择此计划。
- en: 'In the form, choose whatever name you fancy and bind the service to your application.
    By default, Cloud Foundry will inject some properties in relation to the service
    in your environment:'
  id: totrans-5966
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格中，选择你喜欢的任何名称，并将服务绑定到你的应用程序。默认情况下，Cloud Foundry将在你的环境中注入与服务相关的一些属性：
- en: '`cloud.services.redis.connection.host`'
  id: totrans-5967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.host`'
- en: '`cloud.services.redis.connection.port`'
  id: totrans-5968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.port`'
- en: '`cloud.services.redis.connection.password`'
  id: totrans-5969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.password`'
- en: '`cloud.services.redis.connection.uri`'
  id: totrans-5970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.uri`'
- en: These properties will always follow the same convention, so it will be easy
    to keep track of your services as you add more.
  id: totrans-5971
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性将始终遵循相同的约定，因此在添加更多服务时很容易跟踪您的服务。
- en: By default, Cloud Foundry launches Spring applications and activates the Cloud
    profile.
  id: totrans-5972
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Cloud Foundry启动Spring应用程序并激活Cloud配置文件。
- en: 'We can take advantage of this and create an `application-cloud.properties`
    file in `src/main/resources`, which will be used when our application is running
    on PWS:'
  id: totrans-5973
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这一点，在`src/main/resources`中创建一个`application-cloud.properties`文件，当我们的应用程序在PWS上运行时将使用该文件：
- en: '[PRE745]'
  id: totrans-5974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: 'This will bind our Redis instance to our application and activate two additional
    profiles: `prod` and `redis`.'
  id: totrans-5975
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绑定我们的Redis实例到我们的应用程序，并激活两个额外的配置文件：`prod`和`redis`。
- en: 'We also changed the path where the uploaded pictures will land. Note that using
    the file system on the cloud obeys different rules. Refer to the following link
    for more details:'
  id: totrans-5976
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还更改了上传图片的路径。请注意，在云上使用文件系统遵守不同的规则。请参考以下链接获取更多详细信息：
- en: '[http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem)'
  id: totrans-5977
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem)'
- en: 'The last thing we need to do is deactivate one Spring Session feature that
    will not be available on our hosted instance:'
  id: totrans-5978
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是停用一个Spring Session功能，在我们托管的实例上将不可用：
- en: '[PRE746]'
  id: totrans-5979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: Note
  id: totrans-5980
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information, visit [http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent).
  id: totrans-5981
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请访问[http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent)。
- en: You will see that this configuration will also be applied on Heroku.
  id: totrans-5982
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到此配置也将应用于Heroku。
- en: That's it. You can reassemble your web application and push it again. Now, your
    sessions and application cache will be stored on Redis!
  id: totrans-5983
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。您可以重新组装您的Web应用程序并再次推送它。现在，您的会话和应用程序缓存将存储在Redis中！
- en: You may want to explore the marketplace for other available features such as
    binding to data or messaging services, scaling the application, and managing the
    health of the applications that are beyond the scope of this introduction.
  id: totrans-5984
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望探索市场，寻找其他可用功能，例如绑定到数据或消息服务，扩展应用程序以及管理超出本介绍范围的应用程序的健康状况。
- en: Have fun and enjoy the productivity the platform provides!
  id: totrans-5985
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心，享受平台提供的生产力！
- en: Deploying your web application on Heroku
  id: totrans-5986
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Heroku上部署您的Web应用程序
- en: In this section, we will deploy your application on Heroku for free. We will
    even use the free Redis instance available to store our session and cache.
  id: totrans-5987
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将免费在Heroku上部署您的应用程序。我们甚至将使用免费的Redis实例来存储我们的会话和缓存。
- en: Installing the tools
  id: totrans-5988
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装工具
- en: The first thing we need to do to create a Heroku application is to download
    the command-line tools available at [https://toolbelt.heroku.com](https://toolbelt.heroku.com).
  id: totrans-5989
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Heroku应用程序的第一件事是下载[https://toolbelt.heroku.com](https://toolbelt.heroku.com)上可用的命令行工具。
- en: 'On Mac, you can also install it with `brew` command:'
  id: totrans-5990
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，您还可以使用`brew`命令进行安装：
- en: '[PRE747]'
  id: totrans-5991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: 'Create an account on Heroku and use `heroku login` to link the toolbelt to
    your account:'
  id: totrans-5992
  prefs: []
  type: TYPE_NORMAL
  zh: 在Heroku上创建一个帐户，并使用`heroku login`将工具包链接到您的帐户：
- en: '[PRE748]'
  id: totrans-5993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: 'Then, go to your application root and type `heroku create appName --region
    eu`. Replace `appName` with a name of your choice. If you don''t provide a name,
    it will be generated automatically:'
  id: totrans-5994
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到您的应用程序根目录，输入`heroku create appName --region eu`。将`appName`替换为您选择的名称。如果您不提供名称，它将自动生成：
- en: '[PRE749]'
  id: totrans-5995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: If you have already created an application with the UI, then go to your application
    root and simply add the remote `heroku git:remote -a yourapp`.
  id: totrans-5996
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经使用UI创建了一个应用程序，那么转到您的应用程序根目录，然后简单地添加远程`heroku git:remote -a yourapp`。
- en: What these commands do is add a Git remote called `heroku` to our Git repository.
    The process of deploying on Heroku is just pushing one of your branches to Heroku.
    The Git hooks installed on the remote will take care of the rest.
  id: totrans-5997
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令的作用是向我们的Git存储库添加一个名为`heroku`的Git远程。在Heroku上部署的过程只是将您的分支之一推送到Heroku。远程安装的Git挂钩将负责其余的工作。
- en: 'If you type `git remote -v` command, you should see the `heroku` version:'
  id: totrans-5998
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您输入`git remote -v`命令，您应该会看到`heroku`版本：
- en: '[PRE750]'
  id: totrans-5999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: Setting up the application
  id: totrans-6000
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: 'We need two ingredients to run a Gradle application with Heroku: a task in
    our build file called `stage` and a tiny file that contains the command used to
    run our application, called `ProcFile`.'
  id: totrans-6001
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个要素来在Heroku上运行Gradle应用程序：构建文件中的一个名为`stage`的任务，以及一个包含用于运行我们的应用程序的命令的小文件，名为`ProcFile`。
- en: Gradle
  id: totrans-6002
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gradle
- en: The Gradle build pack will automatically try to run the `./gradlew stage` command
    on the root of your application.
  id: totrans-6003
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle构建包将自动尝试在您的应用程序根目录上运行`./gradlew stage`命令。
- en: Note
  id: totrans-6004
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can get more information on the Gradle build pack at [https://github.com/heroku/heroku-buildpack-gradle](https://github.com/heroku/heroku-buildpack-gradle).
  id: totrans-6005
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/heroku/heroku-buildpack-gradle](https://github.com/heroku/heroku-buildpack-gradle)上获取有关Gradle构建包的更多信息。
- en: 'We do not have a "stage" task yet. Add the following code to your `build.gradle`
    file:'
  id: totrans-6006
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有"stage"任务。将以下代码添加到您的`build.gradle`文件中：
- en: '[PRE751]'
  id: totrans-6007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: This will define a task called `stage`, which will copy the jar generated by
    Spring Boot at the root of the application and call it `app.jar`.
  id: totrans-6008
  prefs: []
  type: TYPE_NORMAL
  zh: 这将定义一个名为`stage`的任务，它将复制Spring Boot在应用程序根目录生成的jar文件，并将其命名为`app.jar`。
- en: The jar be much easier to find this way. The `stage` task depends on the `clean`
    task and the `build` task, which means that both of them will be executed before
    the stage task starts.
  id: totrans-6009
  prefs: []
  type: TYPE_NORMAL
  zh: 这样查找jar文件会容易得多。`stage`任务依赖于`clean`任务和`build`任务，这意味着在开始`stage`任务之前，两者都将被执行。
- en: By default, Gradle will try to optimize the task dependency graph. So, we must
    provide a hint and force the `clean` task to be run before `stage`.
  id: totrans-6010
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Gradle将尝试优化任务依赖图。因此，我们必须提供一个提示，并强制运行`stage`之前运行`clean`任务。
- en: Finally, we add a new instruction to the already existing `clean` task, which
    is to delete the generated `app.jar` file.
  id: totrans-6011
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们向已经存在的`clean`任务添加了一个新的指令，即删除生成的`app.jar`文件。
- en: Now, if you run `./gradlew stage`, it should run the tests and put the packaged
    app at the root of the project.
  id: totrans-6012
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您运行`./gradlew stage`，它应该运行测试并将打包的应用程序放在项目的根目录。
- en: Procfile
  id: totrans-6013
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Procfile
- en: When Heroku detects a Gradle application, it will automatically run a container
    with Java 8 installed. So, we have very little configuration to take care of.
  id: totrans-6014
  prefs: []
  type: TYPE_NORMAL
  zh: 当Heroku检测到一个Gradle应用程序时，它将自动运行一个安装了Java 8的容器。因此，我们需要非常少的配置。
- en: 'We will need a file containing the shell command used to run our application.
    Create a file named `Procfile` at the root of your application:'
  id: totrans-6015
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个包含用于运行我们的应用程序的shell命令的文件。在您的应用程序根目录创建一个名为`Procfile`的文件：
- en: '[PRE752]'
  id: totrans-6016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: There are several things to note here. First, we declare our application as
    a web application. We also redefine the port on which our application will run
    using an environment variable. This is very important as your app will cohabit
    with many others and only one port will be allocated to each one.
  id: totrans-6017
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事情需要注意。首先，我们将我们的应用程序声明为Web应用程序。我们还重新定义了应用程序将在其上运行的端口，使用环境变量。这非常重要，因为您的应用程序将与许多其他应用程序共存，每个应用程序只分配一个端口。
- en: Finally, you can see that our application will run using two profiles. The first
    is the `prod` profile, which we created in the previous chapter, to optimize the
    performance, and a new `heroku` profile that we will create in a moment.
  id: totrans-6018
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以看到我们的应用程序将使用两个配置文件运行。第一个是我们在上一章中创建的`prod`配置文件，用于优化性能，还有一个新的`heroku`配置文件，我们将在稍后创建。
- en: A Heroku profile
  id: totrans-6019
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个Heroku配置文件
- en: 'We do not want to put sensible information, such as our Twitter app keys, into
    source control. So, we have to create some properties that will read those from
    the application environment:'
  id: totrans-6020
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望将诸如我们的Twitter应用程序密钥之类的敏感信息放入源代码控制中。因此，我们必须创建一些属性，以从应用程序环境中读取这些属性：
- en: '[PRE753]'
  id: totrans-6021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: 'For this to work, you have to configure the two environment variables, which
    we discussed earlier, on Heroku. You can do this with the toolbelt:'
  id: totrans-6022
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个工作，您必须在Heroku上配置我们之前讨论过的两个环境变量。您可以使用工具包来完成这个任务：
- en: '[PRE754]'
  id: totrans-6023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: 'Alternatively, you can go to your dashboard and configure the environment in
    the settings tab:'
  id: totrans-6024
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以转到您的仪表板，并在设置选项卡中配置环境：
- en: '![A Heroku profile](img/image00991.jpeg)'
  id: totrans-6025
  prefs: []
  type: TYPE_IMG
  zh: '![一个Heroku配置文件](img/image00991.jpeg)'
- en: Note
  id: totrans-6026
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Visit [https://devcenter.heroku.com/articles/config-vars](https://devcenter.heroku.com/articles/config-vars)
    for more information.
  id: totrans-6027
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://devcenter.heroku.com/articles/config-vars](https://devcenter.heroku.com/articles/config-vars)获取更多信息。
- en: Running your application
  id: totrans-6028
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行您的应用程序
- en: It is now time to run our application on Heroku!
  id: totrans-6029
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在Heroku上运行我们的应用程序了！
- en: 'If you haven''t already done so, commit all your changes to your master branch.
    Now, simply push your master branch to the `heroku` remote with `git push heroku
    master`. This will download all the dependencies and build your application from
    scratch, so it can take a little time:'
  id: totrans-6030
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请将所有更改提交到主分支。现在，只需将主分支推送到`heroku`远程，使用`git push heroku master`。这将下载所有依赖项并从头构建您的应用程序，因此可能需要一些时间：
- en: '[PRE755]'
  id: totrans-6031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: Once the application has been built, it will automatically run. Type `heroku
    logs` to see the latest logs or `heroku logs -t` to tail them.
  id: totrans-6032
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序构建完成后，它将自动运行。输入`heroku logs`以查看最新日志，或者输入`heroku logs -t`以跟踪它们。
- en: 'You can see your application running in the console and if all goes as planned,
    you will be able to connect to [http://yourapp.herokuapp.com](http://yourapp.herokuapp.com).
    As shown in the following screenshot:'
  id: totrans-6033
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在控制台上看到您的应用程序正在运行，如果一切按计划进行，您将能够连接到[http://yourapp.herokuapp.com](http://yourapp.herokuapp.com)。如下面的截图所示：
- en: '![Running your application](img/image00992.jpeg)'
  id: totrans-6034
  prefs: []
  type: TYPE_IMG
  zh: '![运行您的应用程序](img/image00992.jpeg)'
- en: We are live! It's time to tell your friends!
  id: totrans-6035
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在线了！是时候告诉您的朋友了！
- en: Activating Redis
  id: totrans-6036
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活Redis
- en: To activate Redis in our application, we can choose between a few alternatives.
    The Heroku Redis add-on is the beta version. It is entirely free with 20 MB of
    storage, analytics, and logs.
  id: totrans-6037
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中激活Redis，我们可以在几种选择之间进行选择。Heroku Redis附加组件是测试版。它完全免费，带有20MB的存储空间，分析和日志记录。
- en: Note
  id: totrans-6038
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Visit [https://elements.heroku.com/addons/heroku-redis](https://elements.heroku.com/addons/heroku-redis)
    for more details.
  id: totrans-6039
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://elements.heroku.com/addons/heroku-redis](https://elements.heroku.com/addons/heroku-redis)以获取更多详细信息。
- en: At this stage, you will have to provide your credit card details to proceed.
  id: totrans-6040
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您将需要提供您的信用卡详细信息以继续。
- en: 'To install the Redis add-on for your application, type the following:'
  id: totrans-6041
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的应用程序安装Redis附加组件，请输入以下内容：
- en: '[PRE756]'
  id: totrans-6042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: Now, that we have activated the add-on, an environment variable called `REDIS_URL`
    will be available when our application will be running on Heroku.
  id: totrans-6043
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经激活了附加组件，当我们的应用程序在Heroku上运行时，将会有一个名为`REDIS_URL`的环境变量可用。
- en: 'You can check that the variable is defined with the `heroku config` command:'
  id: totrans-6044
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`heroku config`命令检查该变量是否已定义：
- en: '[PRE757]'
  id: totrans-6045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: 'Since the `RedisConnectionFactory` class does not understand URIs, we need
    to tweak it a little bit:'
  id: totrans-6046
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`RedisConnectionFactory`类不理解URI，我们需要稍微调整一下：
- en: '[PRE758]'
  id: totrans-6047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: We now have two Heroku-specific beans in the `RedisConfig` class. These beans
    will only be active if both the `redis` and `heroku` profiles are active.
  id: totrans-6048
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在`RedisConfig`类中有两个Heroku特定的bean。这些bean只有在`redis`和`heroku`配置文件都激活时才会生效。
- en: Note that we also deactivated some Spring Session configuration.
  id: totrans-6049
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还停用了一些Spring Session配置。
- en: Spring Session will normally listen to events associated to destroyed session
    keys via the Redis Pub/Sub interface.
  id: totrans-6050
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Session通常会通过Redis Pub/Sub接口监听与销毁会话密钥相关的事件。
- en: It will automatically try to configure the Redis environment to activate listeners
    on startup. In a secured environment like ours, adding listeners is not permitted
    unless you have an admin access.
  id: totrans-6051
  prefs: []
  type: TYPE_NORMAL
  zh: 它将自动尝试配置Redis环境以在启动时激活监听器。在我们这样的安全环境中，除非您拥有管理员访问权限，否则不允许添加监听器。
- en: These redis listeners are not really important in our case, so we can safely
    disable this behavior. For more information, visit [http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent).
  id: totrans-6052
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这些redis监听器并不是非常重要，所以我们可以安全地禁用这种行为。欲了解更多信息，请访问[http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent)。
- en: 'We need to modify our `Procfile` file so that Heroku runs our application with
    the `redis` profile:'
  id: totrans-6053
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改我们的`Procfile`文件，以便Heroku使用`redis`配置运行我们的应用程序：
- en: '[PRE759]'
  id: totrans-6054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: Commit your change and push the code to Heroku.
  id: totrans-6055
  prefs: []
  type: TYPE_NORMAL
  zh: 提交您的更改并将代码推送到Heroku。
- en: Improving your application
  id: totrans-6056
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进您的应用程序
- en: We have a pretty good application deployed online but it's not uber useful nor
    original until you make it so.
  id: totrans-6057
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在线部署了一个相当不错的应用程序，但在您进行改进之前，它既不是非常有用，也不是非常原创。
- en: Try to make it better and more personal. Once you're proud of your achievement,
    tweet your application URL with the `#masterspringmvc` hashtag on Twitter.
  id: totrans-6058
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使其更好，更个性化。一旦您为自己的成就感到自豪，请在Twitter上使用`#masterspringmvc`标签推文您的应用程序URL。
- en: 'Try to push the best application possible. There is so much that we didn''t
    do. Here are some ideas:'
  id: totrans-6059
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试推出尽可能最好的应用程序。我们还有很多事情没有做。以下是一些想法：
- en: Delete users' old pictures to avoid keeping unused pictures
  id: totrans-6060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户的旧图片以避免保留未使用的图片
- en: Use Twitter authentication information to fill the user profile
  id: totrans-6061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Twitter身份验证信息填充用户配置文件
- en: Interact with the user's account
  id: totrans-6062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与用户帐户进行交互
- en: See real-time searches happening on your app with a web socket channel
  id: totrans-6063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web套接字频道查看应用程序上正在进行的实时搜索
- en: Let your imagination fly!
  id: totrans-6064
  prefs: []
  type: TYPE_NORMAL
  zh: 让您的想象力飞翔！
- en: My version of the application is deployed on [http://masterspringmvc.herokuapp.com](http://masterspringmvc.herokuapp.com).
    I will improve some details to make the application a little more reactive. Try
    to spot the differences!
  id: totrans-6065
  prefs: []
  type: TYPE_NORMAL
  zh: 我的版本的应用程序部署在[http://masterspringmvc.herokuapp.com](http://masterspringmvc.herokuapp.com)。我将改进一些细节，使应用程序更具反应性。试着找出不同之处！
- en: Summary
  id: totrans-6066
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Deploying our application on a cloud provider is really straightforward as it
    is a runnable jar, thanks to Spring Boot. Cloud deployment is very affordable
    nowadays and deploying a Java application has become almost too easy.
  id: totrans-6067
  prefs: []
  type: TYPE_NORMAL
  zh: 在云提供商上部署我们的应用程序非常简单，因为它是一个可运行的jar包，这要归功于Spring Boot。云部署现在非常实惠，部署Java应用程序几乎变得太容易了。
- en: With sessions backed by Redis, we laid the basics of a scalable application.
    Indeed, we can effortlessly add multiple servers behind a load balancer and absorb
    high traffic on demand.
  id: totrans-6068
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Redis支持的会话，我们奠定了可扩展应用程序的基础。事实上，我们可以轻松地在负载均衡器后面添加多个服务器，并根据需求吸收高流量。
- en: The only thing that is not scalable is our WebSocket that will need additional
    work to run on top of a message broker, such as Rabbit MQ.
  id: totrans-6069
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一不可扩展的是我们的WebSocket，它需要额外的工作才能在消息代理（如Rabbit MQ）之上运行。
- en: I can certainly remember a time where finding a host running a Tomcat was rare
    and pricey. Those days are long gone and the future belongs to web developers,
    so make it happen!
  id: totrans-6070
  prefs: []
  type: TYPE_NORMAL
  zh: 我肯定还记得以前很难找到运行Tomcat的主机，并且价格昂贵。那些日子已经一去不复返，未来属于Web开发人员，所以让它发生吧！
- en: In the next chapter, we will see what we can do to make our application even
    better, discuss the technologies we haven't covered, talk about the Spring ecosystem
    in general, and the challenges of modern web applications.
  id: totrans-6071
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何使我们的应用程序变得更好，讨论我们尚未涵盖的技术，谈论Spring生态系统的一般情况以及现代Web应用程序的挑战。
- en: Chapter 9. Beyond Spring Web
  id: totrans-6072
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。超越Spring Web
- en: In this chapter, we'll see how far we have come, the problems we've solved,
    and the ones left to be addressed.
  id: totrans-6073
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到我们已经走了多远，我们解决了哪些问题，还有哪些问题有待解决。
- en: We will talk about the Spring ecosystem in general, and persistence, deployment,
    and Single Page Applications in particular.
  id: totrans-6074
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论Spring生态系统的一般情况，以及持久性、部署和单页应用程序。
- en: The Spring ecosystem
  id: totrans-6075
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring生态系统
- en: 'From the Web to data, Spring is a comprehensive ecosystem aiming to resolve
    all sorts of problems in a modular way:'
  id: totrans-6076
  prefs: []
  type: TYPE_NORMAL
  zh: 从Web到数据，Spring是一个全面的生态系统，旨在以模块化的方式解决各种问题：
- en: '![The Spring ecosystem](img/image00993.jpeg)'
  id: totrans-6077
  prefs: []
  type: TYPE_IMG
  zh: '![Spring生态系统](img/image00993.jpeg)'
- en: Check out the Spring IO platform at [https://spring.io/platform](https://spring.io/platform).
  id: totrans-6078
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看Spring IO平台[https://spring.io/platform](https://spring.io/platform)。
- en: Core
  id: totrans-6079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 核心
- en: At the core of the Spring framework, there is obviously a dependency injection
    mechanism.
  id: totrans-6080
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring框架的核心，显然有一个依赖注入机制。
- en: We only scratched the surface of the security features and the great integration
    of the framework with Groovy.
  id: totrans-6081
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是浅尝了安全功能和框架与Groovy的出色集成。
- en: Execution
  id: totrans-6082
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行
- en: We saw in detail what Spring Boot is about -- bringing simplicity and cohesion
    to a vast network of subprojects.
  id: totrans-6083
  prefs: []
  type: TYPE_NORMAL
  zh: 我们详细了解了Spring Boot的内容——将简单性和内聚性带入庞大的子项目网络。
- en: It allows you to focus on what really matters, that is, your business code.
  id: totrans-6084
  prefs: []
  type: TYPE_NORMAL
  zh: 它使您能够专注于真正重要的事情，即您的业务代码。
- en: The Spring XD project is also really interesting. Its goal is to provide tools
    to process, analyze, and transform or export your data, and has a clear focus
    on big data. For more information, visit [http://projects.spring.io/spring-xd](http://projects.spring.io/spring-xd).
  id: totrans-6085
  prefs: []
  type: TYPE_NORMAL
  zh: Spring XD项目也非常有趣。其目标是提供处理、分析、转换或导出数据的工具，并且明确关注大数据。有关更多信息，请访问[http://projects.spring.io/spring-xd](http://projects.spring.io/spring-xd)。
- en: Data
  id: totrans-6086
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: One of the things we haven't looked at while developing our application is how
    to store data in a database. In Pivotal's reference architecture, there is a tier
    devoted to both relational data and non-relational (NoSQL) data.
  id: totrans-6087
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发我们的应用程序时，我们还没有考虑如何在数据库中存储数据。在Pivotal的参考架构中，有一个专门用于关系数据和非关系（NoSQL）数据的层。
- en: The Spring ecosystem has provided a lot of interesting solutions under the label
    `spring-data`, which can be found at [http://projects.spring.io/spring-data/](http://projects.spring.io/spring-data/).
  id: totrans-6088
  prefs: []
  type: TYPE_NORMAL
  zh: Spring生态系统在`spring-data`标签下提供了许多有趣的解决方案，可以在[http://projects.spring.io/spring-data/](http://projects.spring.io/spring-data/)找到。
- en: We glanced at Spring Data Redis when we built the cache but there is much more
    to Spring Data.
  id: totrans-6089
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建缓存时，我们瞥见了Spring Data Redis，但Spring Data还有更多内容。
- en: The basic concepts are shared among all the Spring Data projects, such as the
    template API, which is an abstraction to retrieve and store objects from a persistence
    system.
  id: totrans-6090
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Spring Data项目都共享基本概念，例如模板API，这是一个从持久性系统中检索和存储对象的抽象。
- en: Spring Data JPA ([http://projects.spring.io/spring-data-jpa/](http://projects.spring.io/spring-data-jpa/))
    and Spring Data Mongo ([http://projects.spring.io/spring-data-mongodb/](http://projects.spring.io/spring-data-mongodb/))
    are some of the most well known Spring Data projects. They let you operate on
    entities through repositories, simple interfaces that provide facilities to create
    queries, persisting objects, and so on.
  id: totrans-6091
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA（[http://projects.spring.io/spring-data-jpa/](http://projects.spring.io/spring-data-jpa/)）和Spring
    Data Mongo（[http://projects.spring.io/spring-data-mongodb/](http://projects.spring.io/spring-data-mongodb/)）是一些最著名的Spring
    Data项目。它们让您通过存储库操作实体，这些存储库是提供创建查询、持久化对象等功能的简单接口。
- en: Petri Kainulainen ([http://www.petrikainulainen.net/spring-data-jpa-tutorial/](http://www.petrikainulainen.net/spring-data-jpa-tutorial/))
    has a lot of thorough examples on Spring Data. It does not use the facilities
    that Spring Boot provides but you should be able to get started quite easily with
    guides, such as the one available at [https://spring.io/guides/gs/accessing-data-jpa/](https://spring.io/guides/gs/accessing-data-jpa/).
  id: totrans-6092
  prefs: []
  type: TYPE_NORMAL
  zh: Petri Kainulainen（[http://www.petrikainulainen.net/spring-data-jpa-tutorial/](http://www.petrikainulainen.net/spring-data-jpa-tutorial/)）在Spring
    Data上有很多深入的例子。它没有使用Spring Boot提供的设施，但您应该能够很容易地开始使用指南，例如[https://spring.io/guides/gs/accessing-data-jpa/](https://spring.io/guides/gs/accessing-data-jpa/)。
- en: Spring Data REST is also a magical project that will semiautomatically expose
    your entities through a RESTful API. Visit [https://spring.io/guides/gs/accessing-data-rest/](https://spring.io/guides/gs/accessing-data-rest/)
    for a detailed tutorial.
  id: totrans-6093
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data REST也是一个神奇的项目，它将通过RESTful API半自动地公开您的实体。请访问[https://spring.io/guides/gs/accessing-data-rest/](https://spring.io/guides/gs/accessing-data-rest/)获取详细教程。
- en: Other noteworthy projects
  id: totrans-6094
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他值得注意的项目
- en: Spring Integration ([http://projects.spring.io/spring-integration](http://projects.spring.io/spring-integration))
    and Spring Reactor ([http://projectreactor.io](http://projectreactor.io)) are
    also two of my favorite Spring projects.
  id: totrans-6095
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration（[http://projects.spring.io/spring-integration](http://projects.spring.io/spring-integration)）和Spring
    Reactor（[http://projectreactor.io](http://projectreactor.io)）也是我最喜欢的Spring项目之一。
- en: Spring Reactor is the implementation of reactive streams by Pivotal. The idea
    is to provide fully nonblocking IO on the server side.
  id: totrans-6096
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Reactor是Pivotal实现的反应流。其想法是在服务器端提供完全非阻塞的IO。
- en: Spring Integration, on the other hand, focuses on Enterprise Integration Patterns
    and lets you design channels to load and transform data coming from heterogeneous
    systems.
  id: totrans-6097
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Spring Integration专注于企业集成模式，并允许你设计通道来加载和转换来自异构系统的数据。
- en: 'A good, and simple, example of what you can accomplish with channels can be
    seen here: [http://ilopmar.github.io/contest/#_spring_boot_application](http://ilopmar.github.io/contest/#_spring_boot_application).'
  id: totrans-6098
  prefs: []
  type: TYPE_NORMAL
  zh: 关于你可以通过通道实现的一个很好而简单的例子可以在这里看到：[http://ilopmar.github.io/contest/#_spring_boot_application](http://ilopmar.github.io/contest/#_spring_boot_application)。
- en: If you have heterogeneous and/or complex subsystems with which your application
    has to communicate, it is definitely worth taking a look at.
  id: totrans-6099
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用需要与异构和/或复杂的子系统进行通信，那么一定值得一看。
- en: The last project in the Spring ecosystem we haven't is Spring Batch, a really
    useful abstraction for processing high volumes of data for the daily operations
    of enterprise systems.
  id: totrans-6100
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring生态系统中，我们还没有提到的最后一个项目是Spring Batch，它是一个非常有用的抽象，用于处理企业系统的日常运营中的大量数据。
- en: The deployment
  id: totrans-6101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: Spring Boot provides the ability to run and distribute your Spring application
    as a simple JAR and is a wonderful success in that regard.
  id: totrans-6102
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了将你的Spring应用程序作为简单的JAR运行和分发的能力，在这方面取得了很大的成功。
- en: It is, without a doubt, a step in the right direction, but sometimes your web
    application isn't the only thing you want to deploy.
  id: totrans-6103
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是朝着正确方向迈出的一步，但有时你不只是想部署你的Web应用。
- en: When dealing with a complex system with multiple servers and datasources, the
    work of the operation team can become quite a headache.
  id: totrans-6104
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理具有多个服务器和数据源的复杂系统时，运维团队的工作可能会变得非常头疼。
- en: Docker
  id: totrans-6105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: Who hasn't heard about Docker? It is the new cool kid in the container world
    and has become quite a success, thanks to its vibrant community.
  id: totrans-6106
  prefs: []
  type: TYPE_NORMAL
  zh: 谁没有听说过Docker呢？它是容器世界中的新宠儿，并且由于其充满活力的社区而取得了相当大的成功。
- en: The ideas behind Docker are not new, it leverages LinuX Containers (LXC) and
    cgroups to provide a fully isolated environment for applications to run in.
  id: totrans-6107
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的理念并不新颖，它利用了Linux容器（LXC）和cgroups来为应用程序提供完全隔离的环境。
- en: You can find a tutorial on the Spring website that will guide you through your
    first steps with Docker at [https://spring.io/guides/gs/spring-boot-docker](https://spring.io/guides/gs/spring-boot-docker).
  id: totrans-6108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Spring网站上找到一个关于Docker的教程，它会指导你进行第一步：[https://spring.io/guides/gs/spring-boot-docker](https://spring.io/guides/gs/spring-boot-docker)。
- en: Pivotal Cloud Foundry has been using container technology for years in their
    container manager called Warden. They recently moved to Garden, an abstraction
    that supports not only Linux containers, but also Windows containers.
  id: totrans-6109
  prefs: []
  type: TYPE_NORMAL
  zh: Pivotal Cloud Foundry多年来一直在使用容器技术，他们的容器管理器叫做Warden。他们最近转向了Garden，这是一个支持不仅仅是Linux容器，还有Windows容器的抽象。
- en: Garden is part of the latest release of Cloud Foundry (called Diego) that also
    allows Docker images as units of deployment.
  id: totrans-6110
  prefs: []
  type: TYPE_NORMAL
  zh: Garden是Cloud Foundry的最新版本（称为Diego）的一部分，它还允许Docker镜像作为部署单元。
- en: A developer version of Cloud Foundry has also been released under the name Lattice,
    which can be found at [https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications](https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications).
  id: totrans-6111
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Foundry的开发人员版本也以Lattice的名字发布了，可以在[https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications](https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications)找到。
- en: If you want to test containers without the hassles of the command line, I recommend
    that you look at Kitematic. With this, you can run a Jenkins container or a MongoDB
    without installing the binaries on your system. Visit [https://kitematic.com/](https://kitematic.com/)
    for more information on Kitematic.
  id: totrans-6112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在不使用命令行的情况下测试容器，我建议你看看Kitematic。通过这个工具，你可以在不在系统上安装二进制文件的情况下运行Jenkins容器或MongoDB。访问[https://kitematic.com/](https://kitematic.com/)了解更多关于Kitematic的信息。
- en: Another tool in the Docker ecosystem that's worth mentioning is Docker Compose.
    It allows you to run and link multiple containers with a single configuration
    file.
  id: totrans-6113
  prefs: []
  type: TYPE_NORMAL
  zh: Docker生态系统中另一个值得一提的工具是Docker Compose。它允许你通过一个配置文件运行和链接多个容器。
- en: Refer to [http://java.dzone.com/articles/spring-session-demonstration](http://java.dzone.com/articles/spring-session-demonstration)
    for a good example of a Spring Boot application composed of two web servers, a
    Redis to store users' sessions, and an Nginx instance to do the load balancing.
    Of course, there is much more to learn about Docker Swarm, which will allow you
    to scale your application with a simple command, and Docker Machine, which will
    create Docker hosts for you on any machine, including Cloud providers.
  id: totrans-6114
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[http://java.dzone.com/articles/spring-session-demonstration](http://java.dzone.com/articles/spring-session-demonstration)，这是一个由两个Web服务器、一个用于存储用户会话的Redis和一个用于负载均衡的Nginx实例组成的Spring
    Boot应用的很好的例子。当然，关于Docker Swarm还有很多值得学习的地方，它可以让你通过简单的命令来扩展你的应用，还有Docker Machine，它可以在任何机器上为你创建Docker主机，包括云提供商。
- en: Google Kurbernetes and Apache Mesos are also great examples of distributed systems
    that benefit greatly from Docker containers.
  id: totrans-6115
  prefs: []
  type: TYPE_NORMAL
  zh: Google的Kubernetes和Apache Mesos也是Docker容器大大受益的分布式系统的很好的例子。
- en: Single Page Applications
  id: totrans-6116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用
- en: Most of today's web applications are written in JavaScript. Java is relegated
    to the backend and has the important role of dealing with data and business rules.
    However, much of the GUI stuff is now happening on the client side.
  id: totrans-6117
  prefs: []
  type: TYPE_NORMAL
  zh: 今天大多数的Web应用都是用JavaScript编写的。Java被放在后端，并且在处理数据和业务规则方面起着重要作用。然而，现在很多GUI的工作都是在客户端进行的。
- en: There is a good reason for that in terms of responsiveness and user experience,
    but those applications add extra complexity.
  id: totrans-6118
  prefs: []
  type: TYPE_NORMAL
  zh: 这在响应性和用户体验方面有很好的原因，但这些应用增加了额外的复杂性。
- en: Developers now have to be fluent in both Java and JavaScript and the number
    of frameworks can be a little overwhelming at first.
  id: totrans-6119
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员现在必须精通Java和JavaScript，而且一开始可能会对各种框架感到有些不知所措。
- en: The players
  id: totrans-6120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参与者
- en: If you want to dig deeper into JavaScript, I would highly recommend Dave Syer's
    tutorial with Spring and AngularJS, which is available at [https://spring.io/guides/tutorials/spring-security-and-angular-js](https://spring.io/guides/tutorials/spring-security-and-angular-js).
  id: totrans-6121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解JavaScript，我强烈推荐Dave Syer的Spring和AngularJS教程，可在[https://spring.io/guides/tutorials/spring-security-and-angular-js](https://spring.io/guides/tutorials/spring-security-and-angular-js)上找到。
- en: Choosing a JavaScript MVC framework can be a little difficult too. AngularJS
    has had the favor of the Java community for years but people seem to be moving
    away from it. For more information, visit [https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa](https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa).
  id: totrans-6122
  prefs: []
  type: TYPE_NORMAL
  zh: 选择JavaScript MVC框架也可能有些困难。多年来，AngularJS一直受到Java社区的青睐，但人们似乎正在远离它。欲了解更多信息，请访问[https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa](https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa)。
- en: 'Other alternatives include the following:'
  id: totrans-6123
  prefs: []
  type: TYPE_NORMAL
  zh: 其他选择包括以下内容：
- en: '**BackboneJS**: This is a really simple MVC framework that sits on top of Underscore
    and jQuery.'
  id: totrans-6124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BackboneJS**：这是一个非常简单的MVC框架，建立在Underscore和jQuery之上。'
- en: '**Ember**: This is a comprehensive system that provides more facilities for
    interacting with data and more.'
  id: totrans-6125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ember**：这是一个全面的系统，提供了更多与数据交互的便利设施。'
- en: '**React**: This is the newest project from Facebook. It has a new and very
    interesting philosophy for dealing with views. Its learning curve is quite steep,
    but it is a very interesting system to look at in terms of designing a GUI framework.'
  id: totrans-6126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React**：这是Facebook的最新项目。它有一种处理视图的新而非常有趣的哲学。它的学习曲线相当陡峭，但在设计GUI框架方面，它是一个非常有趣的系统。'
- en: React is my favorite project right now. It lets you focus on the view and its
    one-way data flow makes it easy to reason with the state of your application.
    However, it is still in version 0.13\. This makes it both very interesting, as
    the vibrant community always comes up with new solutions and ideas, and somewhat
    disturbing, as the road ahead stills seems long even after more than 2 years of
    open source development. Visit [https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html](https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html)
    for information on "The Road to 1.0".
  id: totrans-6127
  prefs: []
  type: TYPE_NORMAL
  zh: React是我目前最喜欢的项目。它让你专注于视图，其单向数据流使得应用程序的状态易于理解。然而，它仍处于0.13版本。这使得它非常有趣，因为充满活力的社区总是提出新的解决方案和想法，但也有些令人不安，因为即使经过两年多的开源开发，前方的道路似乎仍然很长。请访问[https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html](https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html)了解有关“通往1.0版本的道路”的信息。
- en: The future
  id: totrans-6128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来
- en: I see a lot of Java developers ranting about the permissiveness of JavaScript
    and having a hard time dealing with the fact that it is not a strongly typed language.
  id: totrans-6129
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到很多Java开发人员抱怨JavaScript的宽松性，并且很难处理它不是一种强类型语言的事实。
- en: 'There are other alternatives, such as **Typescript** ([http://www.typescriptlang.org/](http://www.typescriptlang.org/)),
    which are really interesting and provide the things that we, Java developers,
    have always used to make our lives simpler: interfaces, classes, helpful support
    in IDE, and autocompletion.'
  id: totrans-6130
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他选择，比如**Typescript**（[http://www.typescriptlang.org/](http://www.typescriptlang.org/)），非常有趣并提供了我们Java开发人员一直用来简化生活的东西：接口、类、IDE中的有用支持和自动完成。
- en: A lot of people place bets on the next version (2.0) of Angular that will quite
    notoriously break everything. I think it's for the best. Their collaboration with
    Microsoft's team that makes Typescript is really unique.
  id: totrans-6131
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人押注下一个版本（2.0）的Angular将会彻底改变一切。我认为这是最好的。他们与微软的Typescript团队的合作真的很独特。
- en: 'Most JEE developers will smile when they hear that one of the big new features
    of ECMAScript, that allows the development of this new framework, is decorators,
    some kind of annotation mechanism:'
  id: totrans-6132
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数JEE开发人员听到ECMAScript的一个重大新功能是装饰器时会微笑，这允许开发这个新框架的装饰器是一种注解机制：
- en: Note
  id: totrans-6133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn about the difference between annotation and decorators, visit [http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html](http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html).
  id: totrans-6134
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解注解和装饰器之间的区别，请访问[http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html](http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html)。
- en: JavaScript is evolving quickly and ECMAScript 6 has a lot of interesting features
    that makes it a really advanced and sophisticated language. Don't miss the boat;
    take a look at [https://github.com/lukehoban/es6features](https://github.com/lukehoban/es6features)
    before it's too late!
  id: totrans-6135
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript正在迅速发展，ECMAScript 6具有许多有趣的功能，使其成为一种非常先进和复杂的语言。不要错过机会，在为时已晚之前查看[https://github.com/lukehoban/es6features](https://github.com/lukehoban/es6features)！
- en: The web component specification is also a game changer. The goal is to provide
    reusable UI components, and both the React team and the Angular 2 teams have plans
    to interface with it. Google has developed an interesting project on top of web
    components called Polymer that is now in version 1.0.
  id: totrans-6136
  prefs: []
  type: TYPE_NORMAL
  zh: Web组件规范也是一个改变游戏规则的因素。其目标是提供可重用的UI组件，React团队和Angular 2团队都计划与其进行接口交互。谷歌已经在Web组件之上开发了一个名为Polymer的有趣项目，现在已经是1.0版本。
- en: Note
  id: totrans-6137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to the article at [http://ng-learn.org/2014/12/Polymer/](http://ng-learn.org/2014/12/Polymer/)
    to learn more about the state of these projects.
  id: totrans-6138
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[http://ng-learn.org/2014/12/Polymer/](http://ng-learn.org/2014/12/Polymer/)的文章，以了解更多关于这些项目的情况。
- en: Going stateless
  id: totrans-6139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无状态
- en: When dealing with a JavaScript client, relying on session cookies isn't the
    best option. Most applications choose to go completely stateless and identify
    clients with a token.
  id: totrans-6140
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理JavaScript客户端时，依赖会话cookie并不是最佳选择。大多数应用程序选择完全无状态，并使用令牌识别客户端。
- en: If you want to stick with Spring Session, take a look at the `HeaderHttpSessionStrategy`
    class. It has an implementation that sends and retrieves sessions with an HTTP
    header. An example of this can be found at [https://drissamri.be/blog/2015/05/21/spr](https://drissamri.be/blog/2015/05/21/spr).
  id: totrans-6141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想坚持使用Spring Session，请查看`HeaderHttpSessionStrategy`类。它具有通过HTTP标头发送和检索会话的实现。可以在[https://drissamri.be/blog/2015/05/21/spr](https://drissamri.be/blog/2015/05/21/spr)找到示例。
- en: Summary
  id: totrans-6142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The Spring ecosystem is wide and has a lot to offer to modern web application
    developers.
  id: totrans-6143
  prefs: []
  type: TYPE_NORMAL
  zh: Spring生态系统广泛，为现代Web应用程序开发人员提供了很多选择。
- en: It is hard to find a problem that hasn't been addressed by one of the Spring
    projects.
  id: totrans-6144
  prefs: []
  type: TYPE_NORMAL
  zh: 很难找到一个Spring项目没有解决的问题。
- en: Time to say good bye! I hope you enjoyed our little journey with Spring MVC
    and that it will help you develop with pleasure and create amazing projects, at
    work or in your spare time.
  id: totrans-6145
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候说再见了！我希望您喜欢我们与Spring MVC的小旅程，并且它将帮助您愉快地开发并创建令人惊叹的项目，无论是在工作中还是在业余时间。
- en: Appendix A. Bibliography
  id: totrans-6146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 参考文献
- en: 'This learning path has been prepared for you to create enterprise-level applications
    using the Spring MVC framework. It comprises of the following Packt products:'
  id: totrans-6147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个学习路径已经为您准备好，使用Spring MVC框架创建企业级应用程序。它包括以下Packt产品：
- en: '*Spring Essentials, Shameer Kunjumohamed and Hamidreza Sattari*'
  id: totrans-6148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Essentials, Shameer Kunjumohamed and Hamidreza Sattari*'
- en: '*Spring MVC Cookbook, Alex Bretet*'
  id: totrans-6149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring MVC Cookbook, Alex Bretet*'
- en: '*Mastering Spring MVC 4, Geoffroy Warins*'
  id: totrans-6150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Mastering Spring MVC 4, Geoffroy Warins*'
- en: Index
  id: totrans-6151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引
- en: A
  id: totrans-6152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A
- en: '@After annotation / [@Before and @After annotations](part0125.xhtml#aid-3N6MA2
    "@Before and @After annotations")'
  id: totrans-6153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@After注释 / [@Before和@After注释](part0125.xhtml#aid-3N6MA2 "@Before和@After注释")'
- en: '@AfterClass annotation / [@BeforeClass and @AfterClass annotations](part0125.xhtml#aid-3N6MA2
    "@BeforeClass and @AfterClass annotations")'
  id: totrans-6154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@AfterClass注释 / [@BeforeClass和@AfterClass注释](part0125.xhtml#aid-3N6MA2 "@BeforeClass和@AfterClass注释")'
- en: '@AspectJ annotation'
  id: totrans-6155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@AspectJ注释'
- en: declaring / [Declaring an @Aspect annotation](part0025.xhtml#aid-NQU22 "Declaring
    an @Aspect annotation")
  id: totrans-6156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明 / [声明@Aspect注释](part0025.xhtml#aid-NQU22 "声明@Aspect注释")
- en: pointcuts / [Pointcuts](part0025.xhtml#aid-NQU22 "Pointcuts")
  id: totrans-6157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切入点 / [切入点](part0025.xhtml#aid-NQU22 "切入点")
- en: Advices / [Advices](part0025.xhtml#aid-NQU22 "Advices")
  id: totrans-6158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议 / [建议](part0025.xhtml#aid-NQU22 "建议")
- en: '@AspectJ annotation based AOP'
  id: totrans-6159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于@AspectJ注释的AOP
- en: about / [@AspectJ annotation-based AOP](part0025.xhtml#aid-NQU22 "@AspectJ annotation-based
    AOP")
  id: totrans-6160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [基于@AspectJ注释的AOP](part0025.xhtml#aid-NQU22 "@AspectJ注释的AOP")
- en: acceptance tests
  id: totrans-6161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验收测试
- en: about / [How should I test my code?](part0176.xhtml#aid-57R301 "How should I
    test my code?"), [The acceptance tests](part0179.xhtml#aid-5AMKM1 "The acceptance
    tests"), [Writing acceptance tests](part0184.xhtml#aid-5FF7G2 "Writing acceptance
    tests")
  id: totrans-6162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [我应该如何测试我的代码？](part0176.xhtml#aid-57R301 "我应该如何测试我的代码？"), [验收测试](part0179.xhtml#aid-5AMKM1
    "验收测试"), [编写验收测试](part0184.xhtml#aid-5FF7G2 "编写验收测试")
- en: Gradle, configuration / [The Gradle configuration](part0184.xhtml#aid-5FF7G2
    "The Gradle configuration")
  id: totrans-6163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle，配置 / [Gradle配置](part0184.xhtml#aid-5FF7G2 "Gradle配置")
- en: with FluentLenium / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2
    "Our first FluentLenium test")
  id: totrans-6164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FluentLenium / [我们的第一个FluentLenium测试](part0184.xhtml#aid-5FF7G2 "我们的第一个FluentLenium测试")
- en: with Groovy / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making
    our tests more Groovy")
  id: totrans-6165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy / [使我们的测试更加Groovy](part0184.xhtml#aid-5FF7G2 "使我们的测试更加Groovy")
- en: ACID (Atomic, Consistent, Isolated, Durable)
  id: totrans-6166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACID（原子性，一致性，隔离性，持久性）
- en: about / [Spring Transaction support](part0050.xhtml#aid-1FLS41 "Spring Transaction
    support")
  id: totrans-6167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring事务支持](part0050.xhtml#aid-1FLS41 "Spring事务支持")
- en: ACID properties
  id: totrans-6168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACID属性
- en: about / [ACID properties](part0114.xhtml#aid-3CN042 "ACID properties")
  id: totrans-6169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [ACID属性](part0114.xhtml#aid-3CN042 "ACID属性")
- en: reference link / [ACID properties](part0114.xhtml#aid-3CN042 "ACID properties")
  id: totrans-6170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [ACID属性](part0114.xhtml#aid-3CN042 "ACID属性")
- en: Advanced Message Queuing Protocol (AMQP)
  id: totrans-6171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级消息队列协议（AMQP）
- en: tasks, stacking with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  id: totrans-6172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务，与之堆叠 / [准备就绪](part0121.xhtml#aid-3JCK22 "准备就绪")
- en: tasks, consuming with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  id: totrans-6173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务，与之消耗 / [准备就绪](part0121.xhtml#aid-3JCK22 "准备就绪")
- en: about / [AMQP or JMS?](part0121.xhtml#aid-3JCK22 "AMQP or JMS?")
  id: totrans-6174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [AMQP还是JMS？](part0121.xhtml#aid-3JCK22 "AMQP还是JMS？")
- en: by pivotal, URL / [A great introduction to AMQP by pivotal](part0121.xhtml#aid-3JCK22
    "A great introduction to AMQP by pivotal")
  id: totrans-6175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由pivotal提供的URL / [pivotal提供的AMQP简介](part0121.xhtml#aid-3JCK22 "pivotal提供的AMQP简介")
- en: application events, publishing / [A better way to publish application events](part0121.xhtml#aid-3JCK22
    "A better way to publish application events")
  id: totrans-6176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序事件，发布 / [发布应用程序事件的更好方法](part0121.xhtml#aid-3JCK22 "发布应用程序事件的更好方法")
- en: Advices, @AspectJ annotation
  id: totrans-6177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议，@AspectJ注释
- en: about / [Advices](part0025.xhtml#aid-NQU22 "Advices")
  id: totrans-6178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [建议](part0025.xhtml#aid-NQU22 "建议")
- en: annotations / [Advices](part0025.xhtml#aid-NQU22 "Advices")
  id: totrans-6179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释 / [建议](part0025.xhtml#aid-NQU22 "建议")
- en: '@Around Advice / [The @Around Advice](part0025.xhtml#aid-NQU22 "The @Around
    Advice")'
  id: totrans-6180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Around建议 / [@Around建议](part0025.xhtml#aid-NQU22 "@Around建议")'
- en: Advice parameters, accessing / [Accessing Advice parameters](part0025.xhtml#aid-NQU22
    "Accessing Advice parameters")
  id: totrans-6181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问建议参数 / [访问建议参数](part0025.xhtml#aid-NQU22 "访问建议参数")
- en: Anemic Domain Model
  id: totrans-6182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贫血领域模型
- en: URL / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  id: totrans-6183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [贫血领域模型](part0131.xhtml#aid-3STPM1 "贫血领域模型")
- en: about / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  id: totrans-6184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [贫血领域模型](part0131.xhtml#aid-3STPM1 "贫血领域模型")
- en: angular-translate.js
  id: totrans-6185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: angular-translate.js
- en: used, for translating client-side / [Translating client-side with angular-translate.js](part0116.xhtml#aid-3EK182
    "Translating client-side with angular-translate.js")
  id: totrans-6186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于客户端翻译 / [使用angular-translate.js进行客户端翻译](part0116.xhtml#aid-3EK182 "使用angular-translate.js进行客户端翻译")
- en: URL / [Translating client-side with angular-translate.js](part0116.xhtml#aid-3EK182
    "Translating client-side with angular-translate.js")
  id: totrans-6187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [使用angular-translate.js进行客户端翻译](part0116.xhtml#aid-3EK182 "使用angular-translate.js进行客户端翻译")
- en: AngularJS
  id: totrans-6188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  id: totrans-6189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架")
- en: used, for designing client-side MVC pattern / [Designing a client-side MVC pattern
    with AngularJS](part0090.xhtml#aid-2LQIK2 "Designing a client-side MVC pattern
    with AngularJS")
  id: totrans-6190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于设计客户端MVC模式 / [Designing a client-side MVC pattern with AngularJS](part0090.xhtml#aid-2LQIK2
    "Designing a client-side MVC pattern with AngularJS")
- en: URL / [There's more...](part0090.xhtml#aid-2LQIK2 "There's more...")
  id: totrans-6191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [There's more...](part0090.xhtml#aid-2LQIK2 "There's more...")
- en: URL, for documentation on forms / [See also](part0117.xhtml#aid-3FIHQ2 "See
    also")
  id: totrans-6192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL，用于表单文档 / [See also](part0117.xhtml#aid-3FIHQ2 "See also")
- en: AngularJS Controllers
  id: totrans-6193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS Controllers
- en: about / [AngularJS Controllers](part0090.xhtml#aid-2LQIK2 "AngularJS Controllers")
  id: totrans-6194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [AngularJS Controllers](part0090.xhtml#aid-2LQIK2 "AngularJS Controllers")
- en: Bi-directional DOM-scope binding / [Bidirectional DOM-scope binding](part0090.xhtml#aid-2LQIK2
    "Bidirectional DOM-scope binding")
  id: totrans-6195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向DOM-scope绑定 / [Bidirectional DOM-scope binding](part0090.xhtml#aid-2LQIK2
    "Bidirectional DOM-scope binding")
- en: AngularJS Directives
  id: totrans-6196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS Directives
- en: about / [AngularJS directives](part0090.xhtml#aid-2LQIK2 "AngularJS directives")
  id: totrans-6197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [AngularJS directives](part0090.xhtml#aid-2LQIK2 "AngularJS directives")
- en: ng-repeat / [ng-repeat](part0090.xhtml#aid-2LQIK2 "ng-repeat")
  id: totrans-6198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ng-repeat / [ng-repeat](part0090.xhtml#aid-2LQIK2 "ng-repeat")
- en: ng-if / [ng-if](part0090.xhtml#aid-2LQIK2 "ng-if")
  id: totrans-6199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ng-if / [ng-if](part0090.xhtml#aid-2LQIK2 "ng-if")
- en: AngularJS factories
  id: totrans-6200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS factories
- en: about / [AngularJS factories](part0090.xhtml#aid-2LQIK2 "AngularJS factories")
  id: totrans-6201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [AngularJS factories](part0090.xhtml#aid-2LQIK2 "AngularJS factories")
- en: dependency injection / [Dependency injection](part0090.xhtml#aid-2LQIK2 "Dependency
    injection")
  id: totrans-6202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入 / [Dependency injection](part0090.xhtml#aid-2LQIK2 "Dependency injection")
- en: AngularJS JavaScript library
  id: totrans-6203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS JavaScript library
- en: URL / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2 "Setting
    up the DOM and creating modules")
  id: totrans-6204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2 "Setting
    up the DOM and creating modules")
- en: angular routes
  id: totrans-6205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: angular路由
- en: about / [Angular routes](part0098.xhtml#aid-2TEN42 "Angular routes")
  id: totrans-6206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Angular routes](part0098.xhtml#aid-2TEN42 "Angular routes")
- en: Angular UI
  id: totrans-6207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular UI
- en: Bootstrap pagination with / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42
    "Bootstrap pagination with the Angular UI")
  id: totrans-6208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap分页 / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42
    "Bootstrap pagination with the Angular UI")
- en: annotation-defined controllers
  id: totrans-6209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解定义的控制器
- en: '@Controller annotation / [@Controller](part0085.xhtml#aid-2H1VQ2 "@Controller")'
  id: totrans-6210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Controller annotation / [@Controller](part0085.xhtml#aid-2H1VQ2 "@Controller")'
- en: '@RequestMapping annotation / [@RequestMapping](part0085.xhtml#aid-2H1VQ2 "@RequestMapping")'
  id: totrans-6211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestMapping annotation / [@RequestMapping](part0085.xhtml#aid-2H1VQ2 "@RequestMapping")'
- en: annotations
  id: totrans-6212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解
- en: defining / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing with
    Spring Data")
  id: totrans-6213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing with Spring
    Data")
- en: '@CreatedBy / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  id: totrans-6214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@CreatedBy / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
- en: '@CreatedDate / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  id: totrans-6215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@CreatedDate / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
- en: '@LastModifiedBy / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  id: totrans-6216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@LastModifiedBy / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
- en: '@LastModifiedDate / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  id: totrans-6217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@LastModifiedDate / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
- en: AssertFalse / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AssertFalse / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: AssertFalse.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  id: totrans-6219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AssertFalse.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
- en: AssertTrue / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AssertTrue / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: AssertTrue.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  id: totrans-6221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AssertTrue.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
- en: DecimalMax / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalMax / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: DecimalMax.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  id: totrans-6223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalMax.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
- en: DecimalMin / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalMin / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: DecimalMin.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  id: totrans-6225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalMin.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
- en: Digits / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Digits / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Digits.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Digits.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Future / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Future / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Future.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Future.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Max / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Max / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Max.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Max.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Min / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Min / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: Min.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Min.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: NotNull / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NotNull / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
- en: NotNull.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NotNull.列表/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Past / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Past.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去.列表/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Pattern / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Pattern.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式.列表/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Size / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Size.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  id: totrans-6241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小.列表/ [现场约束注释](part0115.xhtml#aid-3DLGM2 "现场约束注释")
- en: Apache Commons Logging Bridge / [Apache Commons Logging Bridge](part0128.xhtml#aid-3Q2802
    "Apache Commons Logging Bridge")
  id: totrans-6242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Commons日志桥接/ [Apache Commons日志桥接](part0128.xhtml#aid-3Q2802 "Apache Commons日志桥接")
- en: Apache HTTP
  id: totrans-6243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  id: totrans-6244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [还有更多...](part0102.xhtml#aid-318PC2 "还有更多...")
- en: alternatives / [Alternatives to Apache HTTP](part0102.xhtml#aid-318PC2 "Alternatives
    to Apache HTTP")
  id: totrans-6245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代方案/ [替代方案Apache HTTP](part0102.xhtml#aid-318PC2 "替代方案Apache HTTP")
- en: Apache HTTP configuration
  id: totrans-6246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP配置
- en: to proxy Tomcats(s) / [Configuring Apache HTTP to proxy your Tomcat(s)](part0102.xhtml#aid-318PC2
    "Configuring Apache HTTP to proxy your Tomcat(s)"), [How to do it...](part0102.xhtml#aid-318PC2
    "How to do it..."), [How it works...](part0102.xhtml#aid-318PC2 "How it works...")
  id: totrans-6247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理Tomcat/ [配置Apache HTTP代理您的Tomcat](part0102.xhtml#aid-318PC2 "配置Apache HTTP代理您的Tomcat"),
    [如何做...](part0102.xhtml#aid-318PC2 "如何做..."), [它是如何工作的...](part0102.xhtml#aid-318PC2
    "它是如何工作的...")
- en: about / [Apache HTTP configuration](part0102.xhtml#aid-318PC2 "Apache HTTP configuration")
  id: totrans-6248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Apache HTTP配置](part0102.xhtml#aid-318PC2 "Apache HTTP配置")
- en: virtual-hosting / [Virtual-hosting](part0102.xhtml#aid-318PC2 "Virtual-hosting")
  id: totrans-6249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟主机/ [虚拟主机](part0102.xhtml#aid-318PC2 "虚拟主机")
- en: mod_proxy module / [The mod_proxy module](part0102.xhtml#aid-318PC2 "The mod_proxy
    module")
  id: totrans-6250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mod_proxy模块/ [mod_proxy模块](part0102.xhtml#aid-318PC2 "mod_proxy模块")
- en: ProxyPassReverse / [ProxyPassReverse](part0102.xhtml#aid-318PC2 "ProxyPassReverse")
  id: totrans-6251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ProxyPassReverse/ [ProxyPassReverse](part0102.xhtml#aid-318PC2 "ProxyPassReverse")
- en: mod_alias module / [The mod_alias module](part0102.xhtml#aid-318PC2 "The mod_alias
    module")
  id: totrans-6252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mod_alias模块/ [mod_alias模块](part0102.xhtml#aid-318PC2 "mod_alias模块")
- en: Tomcat connectors / [Tomcat connectors](part0102.xhtml#aid-318PC2 "Tomcat connectors")
  id: totrans-6253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat连接器/ [Tomcat连接器](part0102.xhtml#aid-318PC2 "Tomcat连接器")
- en: Apache HTTP doc
  id: totrans-6254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP文档
- en: URL / [A scalable model](part0121.xhtml#aid-3JCK22 "A scalable model")
  id: totrans-6255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [可扩展模型](part0121.xhtml#aid-3JCK22 "可扩展模型")
- en: Apache HTTP Server
  id: totrans-6256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP服务器
- en: installing on MS Windows, URL / [How to do it...](part0102.xhtml#aid-318PC2
    "How to do it...")
  id: totrans-6257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MS Windows上安装，URL/ [如何做...](part0102.xhtml#aid-318PC2 "如何做...")
- en: installing on Linux / Mac OS, URL / [How to do it...](part0102.xhtml#aid-318PC2
    "How to do it...")
  id: totrans-6258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux/Mac OS上安装，URL/ [如何做...](part0102.xhtml#aid-318PC2 "如何做...")
- en: Apache JServ Protocol (AJP) connectors / [AJP connectors](part0102.xhtml#aid-318PC2
    "AJP connectors")
  id: totrans-6259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache JServ协议（AJP）连接器/ [AJP连接器](part0102.xhtml#aid-318PC2 "AJP连接器")
- en: API
  id: totrans-6260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API
- en: documenting, with Swagger / [Documenting and exposing an API with Swagger](part0100.xhtml#aid-2VBO82
    "Documenting and exposing an API with Swagger"), [How to do it...](part0100.xhtml#aid-2VBO82
    "How to do it...")
  id: totrans-6261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swagger记录/ [使用Swagger记录和公开API](part0100.xhtml#aid-2VBO82 "使用Swagger记录和公开API"),
    [如何做...](part0100.xhtml#aid-2VBO82 "如何做...")
- en: exposing, with Swagger / [Documenting and exposing an API with Swagger](part0100.xhtml#aid-2VBO82
    "Documenting and exposing an API with Swagger"), [How to do it...](part0100.xhtml#aid-2VBO82
    "How to do it...")
  id: totrans-6262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swagger公开/ [使用Swagger记录和公开API](part0100.xhtml#aid-2VBO82 "使用Swagger记录和公开API"),
    [如何做...](part0100.xhtml#aid-2VBO82 "如何做...")
- en: exposed metadata / [An exposed metadata](part0100.xhtml#aid-2VBO82 "An exposed
    metadata")
  id: totrans-6263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公开的元数据/ [公开的元数据](part0100.xhtml#aid-2VBO82 "公开的元数据")
- en: API endpoints
  id: totrans-6264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API端点
- en: building, for Taskify app / [Building API endpoints for the Taskify app](part0072.xhtml#aid-24L8G1
    "Building API endpoints for the Taskify app")
  id: totrans-6265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Taskify应用程序构建/ [为Taskify应用程序构建API端点](part0072.xhtml#aid-24L8G1 "为Taskify应用程序构建API端点")
- en: UserController.java / [UserController.java](part0072.xhtml#aid-24L8G1 "UserController.java")
  id: totrans-6266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UserController.java/ [UserController.java](part0072.xhtml#aid-24L8G1 "UserController.java")
- en: TaskController.java / [TaskController.java](part0072.xhtml#aid-24L8G1 "TaskController.java")
  id: totrans-6267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TaskController.java/ [TaskController.java](part0072.xhtml#aid-24L8G1 "TaskController.java")
- en: API server app
  id: totrans-6268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API服务器应用
- en: building / [Building the API server app](part0072.xhtml#aid-24L8G1 "Building
    the API server app")
  id: totrans-6269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建/ [构建API服务器应用](part0072.xhtml#aid-24L8G1 "构建API服务器应用")
- en: project, setting up / [Setting up and configuring the project](part0072.xhtml#aid-24L8G1
    "Setting up and configuring the project")
  id: totrans-6270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目，设置/ [设置和配置项目](part0072.xhtml#aid-24L8G1 "设置和配置项目")
- en: User and Task, defining / [Defining the model definitions – User and Task](part0072.xhtml#aid-24L8G1
    "Defining the model definitions – User and Task")
  id: totrans-6271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义用户和任务/ [定义模型定义-用户和任务](part0072.xhtml#aid-24L8G1 "定义模型定义-用户和任务")
- en: API versioning
  id: totrans-6272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API版本控制
- en: about / [API versioning](part0157.xhtml#aid-4LN8A1 "API versioning")
  id: totrans-6273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [API版本控制](part0157.xhtml#aid-4LN8A1 "API版本控制")
- en: reference link / [API versioning](part0157.xhtml#aid-4LN8A1 "API versioning")
  id: totrans-6274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [API版本控制](part0157.xhtml#aid-4LN8A1 "API版本控制")
- en: application
  id: totrans-6275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序
- en: logging, Log4j2 used / [Modern application Logging with Log4j2](part0128.xhtml#aid-3Q2802
    "Modern application Logging with Log4j2"), [How to do it…](part0128.xhtml#aid-3Q2802
    "How to do it…")
  id: totrans-6276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录，使用Log4j2/ [使用Log4j2进行现代应用程序日志记录](part0128.xhtml#aid-3Q2802 "使用Log4j2进行现代应用程序日志记录"),
    [如何做...](part0128.xhtml#aid-3Q2802 "如何做...")
- en: application cache
  id: totrans-6277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序缓存
- en: creating / [Application cache](part0190.xhtml#aid-5L6AS2 "Application cache")
  id: totrans-6278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [应用程序缓存](part0190.xhtml#aid-5L6AS2 "应用程序缓存")
- en: reference link / [Application cache](part0190.xhtml#aid-5L6AS2 "Application
    cache")
  id: totrans-6279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [应用程序缓存](part0190.xhtml#aid-5L6AS2 "应用程序缓存")
- en: invalidation / [Cache invalidation](part0190.xhtml#aid-5L6AS2 "Cache invalidation")
  id: totrans-6280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失效/ [缓存失效](part0190.xhtml#aid-5L6AS2 "缓存失效")
- en: distributed cache / [Distributed cache](part0190.xhtml#aid-5L6AS2 "Distributed
    cache")
  id: totrans-6281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式缓存/ [分布式缓存](part0190.xhtml#aid-5L6AS2 "分布式缓存")
- en: argument resolver
  id: totrans-6282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数解析器
- en: JPA2 criteria API / [The JPA2 criteria API and Spring Data JPA specifications](part0098.xhtml#aid-2TEN42
    "The JPA2 criteria API and Spring Data JPA specifications")
  id: totrans-6283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA2标准API / [JPA2标准API和Spring Data JPA规范](part0098.xhtml#aid-2TEN42 "JPA2标准API和Spring
    Data JPA规范")
- en: Spring Data JPA specifications / [The JPA2 criteria API and Spring Data JPA
    specifications](part0098.xhtml#aid-2TEN42 "The JPA2 criteria API and Spring Data
    JPA specifications")
  id: totrans-6284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA规范 / [JPA2标准API和Spring Data JPA规范](part0098.xhtml#aid-2TEN42
    "JPA2标准API和Spring Data JPA规范")
- en: SpecificationArgumentResolver / [SpecificationArgumentResolver](part0098.xhtml#aid-2TEN42
    "SpecificationArgumentResolver")
  id: totrans-6285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpecificationArgumentResolver/ [SpecificationArgumentResolver](part0098.xhtml#aid-2TEN42
    "SpecificationArgumentResolver")
- en: Aspect Oriented Programing (AOP)
  id: totrans-6286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向方面的编程（AOP）
- en: about / [Aspect Oriented Programming](part0025.xhtml#aid-NQU22 "Aspect Oriented
    Programming")
  id: totrans-6287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [面向方面的编程](part0025.xhtml#aid-NQU22 "面向方面的编程")
- en: static AOP / [Static and dynamic AOP](part0025.xhtml#aid-NQU22 "Static and dynamic
    AOP")
  id: totrans-6288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态AOP/ [静态和动态AOP](part0025.xhtml#aid-NQU22 "静态和动态AOP")
- en: dynamic AOP / [Static and dynamic AOP](part0025.xhtml#aid-NQU22 "Static and
    dynamic AOP")
  id: totrans-6289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态AOP / [静态和动态AOP](part0025.xhtml#aid-NQU22 "静态和动态AOP")
- en: concepts / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-6290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概念/ [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: terminology / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-6291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语/ [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: Spring AOP / [Spring AOP – definition and configuration styles](part0025.xhtml#aid-NQU22
    "Spring AOP – definition and configuration styles")
  id: totrans-6292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring AOP / [Spring AOP-定义和配置样式](part0025.xhtml#aid-NQU22 "Spring AOP-定义和配置样式")
- en: XML schema based AOP / [XML schema-based AOP](part0025.xhtml#aid-NQU22 "XML
    schema-based AOP")
  id: totrans-6293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于XML模式的AOP/ [基于XML模式的AOP](part0025.xhtml#aid-NQU22 "基于XML模式的AOP")
- en: '@AspectJ annotation based AOP / [@AspectJ annotation-based AOP](part0025.xhtml#aid-NQU22
    "@AspectJ annotation-based AOP")'
  id: totrans-6294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@AspectJ基于注释的AOP/ [@AspectJ基于注释的AOP](part0025.xhtml#aid-NQU22 "@AspectJ基于注释的AOP")'
- en: asynchronous request processing
  id: totrans-6295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步请求处理
- en: in Spring MVC / [Asynchronous request processing in Spring MVC](part0035.xhtml#aid-11C3M1
    "Asynchronous request processing in Spring MVC")
  id: totrans-6296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring MVC中/ [Spring MVC中的异步请求处理](part0035.xhtml#aid-11C3M1 "Spring MVC中的异步请求处理")
- en: async methods
  id: totrans-6297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步方法
- en: using / [Async methods](part0191.xhtml#aid-5M4RE2 "Async methods")
  id: totrans-6298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [异步方法](part0191.xhtml#aid-5M4RE2 "异步方法")
- en: reference link / [Async methods](part0191.xhtml#aid-5M4RE2 "Async methods")
  id: totrans-6299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [异步方法](part0191.xhtml#aid-5M4RE2 "异步方法")
- en: Atomikos
  id: totrans-6300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atomikos
- en: URL / [Global versus local transactions](part0114.xhtml#aid-3CN042 "Global versus
    local transactions")
  id: totrans-6301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: authentication
  id: totrans-6302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: about / [Authentication](part0057.xhtml#aid-1MBG22 "Authentication")
  id: totrans-6303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [认证](part0057.xhtml#aid-1MBG22 "认证")
- en: testing / [Testing the authentication](part0183.xhtml#aid-5EGMU1 "Testing the
    authentication")
  id: totrans-6304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试/ [测试认证](part0183.xhtml#aid-5EGMU1 "测试认证")
- en: AuthenticationManager interface / [The AuthenticationManager interface](part0104.xhtml#aid-335QG2
    "The AuthenticationManager interface")
  id: totrans-6305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AuthenticationManager接口/ [AuthenticationManager接口](part0104.xhtml#aid-335QG2
    "AuthenticationManager接口")
- en: authorization
  id: totrans-6306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权
- en: about / [Authorization](part0058.xhtml#aid-1NA0K2 "Authorization")
  id: totrans-6307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [授权](part0058.xhtml#aid-1NA0K2 "授权")
- en: authorized URLs
  id: totrans-6308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权的URL
- en: authenticating / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized URLs")
  id: totrans-6309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证/ [授权的URL](part0168.xhtml#aid-506UG2 "授权的URL")
- en: authorized users
  id: totrans-6310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权用户
- en: authenticating / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized users")
  id: totrans-6311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证/ [授权用户](part0168.xhtml#aid-506UG2 "授权用户")
- en: B
  id: totrans-6312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B
- en: '@Before annotation / [@Before and @After annotations](part0125.xhtml#aid-3N6MA2
    "@Before and @After annotations")'
  id: totrans-6313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Before注释 / [@Before和@After注释](part0125.xhtml#aid-3N6MA2 "@Before和@After注释")'
- en: '@BeforeClass annotation / [@BeforeClass and @AfterClass annotations](part0125.xhtml#aid-3N6MA2
    "@BeforeClass and @AfterClass annotations")'
  id: totrans-6314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@BeforeClass注释 / [@BeforeClass和@AfterClass注释](part0125.xhtml#aid-3N6MA2 "@BeforeClass和@AfterClass注释")'
- en: BackboneJS
  id: totrans-6315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BackboneJS
- en: about / [The players](part0203.xhtml#aid-61J261 "The players")
  id: totrans-6316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [玩家](part0203.xhtml#aid-61J261 "玩家")
- en: basic authentication
  id: totrans-6317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: URL / [Basic authentication](part0168.xhtml#aid-506UG2 "Basic authentication")
  id: totrans-6318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [基本身份验证](part0168.xhtml#aid-506UG2 "基本身份验证")
- en: about / [Basic authentication](part0168.xhtml#aid-506UG2 "Basic authentication")
  id: totrans-6319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [基本身份验证](part0168.xhtml#aid-506UG2 "基本身份验证")
- en: configuring / [Basic authentication](part0168.xhtml#aid-506UG2 "Basic authentication")
  id: totrans-6320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置/ [基本身份验证](part0168.xhtml#aid-506UG2 "基本身份验证")
- en: for authorized users / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized
    users")
  id: totrans-6321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于授权用户/ [授权用户](part0168.xhtml#aid-506UG2 "授权用户")
- en: for authorized URLs / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized
    URLs")
  id: totrans-6322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于授权的URL/ [授权的URL](part0168.xhtml#aid-506UG2 "授权的URL")
- en: thymeleaf security tags, using / [Thymeleaf security tags](part0168.xhtml#aid-506UG2
    "Thymeleaf security tags")
  id: totrans-6323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用thymeleaf安全标签/ [Thymeleaf安全标签](part0168.xhtml#aid-506UG2 "Thymeleaf安全标签")
- en: BasicAuthenticationFilter
  id: totrans-6324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BasicAuthenticationFilter
- en: about / [BasicAuthenticationFilter](part0104.xhtml#aid-335QG2 "BasicAuthenticationFilter")
  id: totrans-6325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [BasicAuthenticationFilter](part0104.xhtml#aid-335QG2 "BasicAuthenticationFilter")
- en: with authenticationEntryPoint / [With an authenticationEntryPoint](part0104.xhtml#aid-335QG2
    "With an authenticationEntryPoint")
  id: totrans-6326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用authenticationEntryPoint/ [使用authenticationEntryPoint](part0104.xhtml#aid-335QG2
    "使用authenticationEntryPoint")
- en: BASIC scheme
  id: totrans-6327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本方案
- en: authenticating / [Authenticating over a BASIC scheme](part0104.xhtml#aid-335QG2
    "Authenticating over a BASIC scheme"), [How to do it...](part0104.xhtml#aid-335QG2
    "How to do it...")
  id: totrans-6328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证/ [通过基本方案进行认证](part0104.xhtml#aid-335QG2 "通过基本方案进行认证"), [如何做...](part0104.xhtml#aid-335QG2
    "如何做...")
- en: Spring security namespace / [The Spring Security namespace](part0104.xhtml#aid-335QG2
    "The Spring Security namespace")
  id: totrans-6329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring安全命名空间/ [Spring安全命名空间](part0104.xhtml#aid-335QG2 "Spring安全命名空间")
- en: AuthenticationManager interface / [The AuthenticationManager interface](part0104.xhtml#aid-335QG2
    "The AuthenticationManager interface")
  id: totrans-6330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AuthenticationManager接口/ [AuthenticationManager接口](part0104.xhtml#aid-335QG2
    "AuthenticationManager接口")
- en: Spring security reference / [In the Spring Security reference](part0104.xhtml#aid-335QG2
    "In the Spring Security reference")
  id: totrans-6331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring安全参考/ [在Spring安全参考中](part0104.xhtml#aid-335QG2 "在Spring安全参考中")
- en: remember-me cookie/feature / [The remember-me cookie/feature](part0104.xhtml#aid-335QG2
    "The remember-me cookie/feature")
  id: totrans-6332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住我cookie/功能/ [记住我cookie/功能](part0104.xhtml#aid-335QG2 "记住我cookie/功能")
- en: bean definition profiles
  id: totrans-6333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bean定义配置文件
- en: working with / [Working with bean definition profiles](part0020.xhtml#aid-J2B81
    "Working with bean definition profiles")
  id: totrans-6334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用bean定义配置文件](part0020.xhtml#aid-J2B81 "使用bean定义配置文件")
- en: bean dependencies
  id: totrans-6335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bean依赖项
- en: injecting / [Injecting bean dependencies](part0017.xhtml#aid-G6PI2 "Injecting
    bean dependencies")
  id: totrans-6336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入/ [注入bean依赖项](part0017.xhtml#aid-G6PI2 "注入bean依赖项")
- en: constructor-based dependency injection / [Constructor-based Dependency Injection](part0017.xhtml#aid-G6PI2
    "Constructor-based Dependency Injection")
  id: totrans-6337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于构造函数的依赖注入/ [基于构造函数的依赖注入](part0017.xhtml#aid-G6PI2 "基于构造函数的依赖注入")
- en: setter-based dependency injection / [Setter-based Dependency Injection](part0017.xhtml#aid-G6PI2
    "Setter-based Dependency Injection")
  id: totrans-6338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于setter的依赖注入/ [基于setter的依赖注入](part0017.xhtml#aid-G6PI2 "基于setter的依赖注入")
- en: BeanFactory interface
  id: totrans-6339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BeanFactory接口
- en: about / [The Spring IoC container](part0016.xhtml#aid-F8902 "The Spring IoC
    container")
  id: totrans-6340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Spring IoC容器](part0016.xhtml#aid-F8902 "Spring IoC容器")
- en: bean life cycles
  id: totrans-6341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bean生命周期
- en: hooking / [Hooking to bean life cycles](part0018.xhtml#aid-H5A41 "Hooking to
    bean life cycles")
  id: totrans-6342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接/ [连接到bean生命周期](part0018.xhtml#aid-H5A41 "连接到bean生命周期")
- en: InitializingBean, implementing / [Implementing InitializingBean and DisposableBean](part0018.xhtml#aid-H5A41
    "Implementing InitializingBean and DisposableBean")
  id: totrans-6343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InitializingBean，实现/ [实现InitializingBean和DisposableBean](part0018.xhtml#aid-H5A41
    "实现InitializingBean和DisposableBean")
- en: DisposableBean, implementing / [Implementing InitializingBean and DisposableBean](part0018.xhtml#aid-H5A41
    "Implementing InitializingBean and DisposableBean")
  id: totrans-6344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DisposableBean，实现/ [实现InitializingBean和DisposableBean](part0018.xhtml#aid-H5A41
    "实现InitializingBean和DisposableBean")
- en: '@PostConstruct, annotating on @Components / [Annotating @PostConstruct and
    @PreDestroy on @Components](part0018.xhtml#aid-H5A41 "Annotating @PostConstruct
    and @PreDestroy on @Components")'
  id: totrans-6345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@PostConstruct，对@Components进行注释/ [在@Components上注释@PostConstruct和@PreDestroy](part0018.xhtml#aid-H5A41
    "在@Components上注释@PostConstruct和@PreDestroy")'
- en: '@PreDestroy, annotating on @Components / [Annotating @PostConstruct and @PreDestroy
    on @Components](part0018.xhtml#aid-H5A41 "Annotating @PostConstruct and @PreDestroy
    on @Components")'
  id: totrans-6346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@PreDestroy，对@Components进行注释/ [在@Components上注释@PostConstruct和@PreDestroy](part0018.xhtml#aid-H5A41
    "在@Components上注释@PostConstruct和@PreDestroy")'
- en: init-method and destroy-method attributes / [The init-method and destroy-method
    attributes of <bean/>](part0018.xhtml#aid-H5A41 "The init-method and destroy-method
    attributes of <bean/>")
  id: totrans-6347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: init-method和destroy-method属性/ [<bean/>的init-method和destroy-method属性](part0018.xhtml#aid-H5A41
    "<bean/>的init-method和destroy-method属性")
- en: beans
  id: totrans-6348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: beans
- en: about / [The Spring IoC container](part0016.xhtml#aid-F8902 "The Spring IoC
    container"), [Beans in detail](part0017.xhtml#aid-G6PI2 "Beans in detail")
  id: totrans-6349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Spring IoC容器](part0016.xhtml#aid-F8902 "Spring IoC容器"), [详细介绍Beans](part0017.xhtml#aid-G6PI2
    "详细介绍Beans")
- en: definition / [Bean definition](part0017.xhtml#aid-G6PI2 "Bean definition")
  id: totrans-6350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义/ [Bean定义](part0017.xhtml#aid-G6PI2 "Bean定义")
- en: instantiating / [Instantiating beans](part0017.xhtml#aid-G6PI2 "Instantiating
    beans")
  id: totrans-6351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化/ [实例化beans](part0017.xhtml#aid-G6PI2 "实例化beans")
- en: instantiating, with constructors / [With constructors](part0017.xhtml#aid-G6PI2
    "With constructors")
  id: totrans-6352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化，使用构造函数/ [使用构造函数](part0017.xhtml#aid-G6PI2 "使用构造函数")
- en: instantiating, with static factory-method / [With a static factory-method](part0017.xhtml#aid-G6PI2
    "With a static factory-method")
  id: totrans-6353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化，使用静态工厂方法/ [使用静态工厂方法](part0017.xhtml#aid-G6PI2 "使用静态工厂方法")
- en: instantiating, with instance factory-method / [With an instance factory-method](part0017.xhtml#aid-G6PI2
    "With an instance factory-method")
  id: totrans-6354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化，使用实例工厂方法/ [使用实例工厂方法](part0017.xhtml#aid-G6PI2 "使用实例工厂方法")
- en: cleaner bean definitions, with namespace shortcuts / [Cleaner bean definitions
    with namespace shortcuts](part0017.xhtml#aid-G6PI2 "Cleaner bean definitions with
    namespace shortcuts")
  id: totrans-6355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名空间快捷方式进行更清晰的bean定义/ [使用命名空间快捷方式进行更清晰的bean定义](part0017.xhtml#aid-G6PI2 "使用命名空间快捷方式进行更清晰的bean定义")
- en: list, wiring as dependency / [Wiring a List as a dependency](part0017.xhtml#aid-G6PI2
    "Wiring a List as a dependency")
  id: totrans-6356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表，作为依赖项进行连线/ [将列表作为依赖项进行连线](part0017.xhtml#aid-G6PI2 "将列表作为依赖项进行连线")
- en: map, wiring as dependency / [Wiring a Map as a dependency](part0017.xhtml#aid-G6PI2
    "Wiring a Map as a dependency")
  id: totrans-6357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射，作为依赖项进行连线/ [将映射作为依赖项进行连线](part0017.xhtml#aid-G6PI2 "将映射作为依赖项进行连线")
- en: dependencies, autowiring / [Autowiring dependencies](part0017.xhtml#aid-G6PI2
    "Autowiring dependencies")
  id: totrans-6358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项，自动装配/ [自动装配依赖项](part0017.xhtml#aid-G6PI2 "自动装配依赖项")
- en: scoping / [Bean scoping](part0017.xhtml#aid-G6PI2 "Bean scoping")
  id: totrans-6359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作用域/ [Bean作用域](part0017.xhtml#aid-G6PI2 "Bean作用域")
- en: bean validation
  id: totrans-6360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bean验证
- en: used, for validating resources / [Getting ready](part0115.xhtml#aid-3DLGM2 "Getting
    ready"), [How to do it…](part0115.xhtml#aid-3DLGM2 "How to do it…")
  id: totrans-6361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于验证资源/ [准备工作](part0115.xhtml#aid-3DLGM2 "准备工作"), [如何做…](part0115.xhtml#aid-3DLGM2
    "如何做…")
- en: Spring validator, using / [Using Spring validator](part0115.xhtml#aid-3DLGM2
    "Using Spring validator")
  id: totrans-6362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring验证器/ [使用Spring验证器](part0115.xhtml#aid-3DLGM2 "使用Spring验证器")
- en: JSR-303/JSR-349 bean validation / [Using JSR-303/JSR-349 Bean Validation](part0115.xhtml#aid-3DLGM2
    "Using JSR-303/JSR-349 Bean Validation")
  id: totrans-6363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-303/JSR-349 bean验证 / [使用JSR-303/JSR-349 Bean验证](part0115.xhtml#aid-3DLGM2
    "使用JSR-303/JSR-349 Bean验证")
- en: ValidationUnits utility / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
  id: totrans-6364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ValidationUnits实用程序/ [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
- en: custom validator, creating / [Creating a custom validator](part0115.xhtml#aid-3DLGM2
    "Creating a custom validator")
  id: totrans-6365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义验证器 / [创建自定义验证器](part0115.xhtml#aid-3DLGM2 "创建自定义验证器")
- en: reference link / [The Spring reference on validation](part0115.xhtml#aid-3DLGM2
    "The Spring reference on validation")
  id: totrans-6366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [Spring关于验证的参考](part0115.xhtml#aid-3DLGM2 "Spring关于验证的参考")
- en: binding requests
  id: totrans-6367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定请求
- en: about / [Binding requests and marshalling responses](part0096.xhtml#aid-2RHM02
    "Binding requests and marshalling responses"), [Getting ready](part0096.xhtml#aid-2RHM02
    "Getting ready"), [How to do it...](part0096.xhtml#aid-2RHM02 "How to do it..."),
    [How it works...](part0096.xhtml#aid-2RHM02 "How it works...")
  id: totrans-6368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [绑定请求和编组响应](part0096.xhtml#aid-2RHM02 "绑定请求和编组响应"), [准备就绪](part0096.xhtml#aid-2RHM02
    "准备就绪"), [如何做...](part0096.xhtml#aid-2RHM02 "如何做..."), [它是如何工作的...](part0096.xhtml#aid-2RHM02
    "它是如何工作的...")
- en: Bitronix
  id: totrans-6369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitronix
- en: URL / [Global versus local transactions](part0114.xhtml#aid-3CN042 "Global versus
    local transactions")
  id: totrans-6370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: boilerplate logic
  id: totrans-6371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样板逻辑
- en: abstraction / [Abstraction of boilerplate logic](part0127.xhtml#aid-3P3NE2 "Abstraction
    of boilerplate logic")
  id: totrans-6372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象 / [样板逻辑的抽象](part0127.xhtml#aid-3P3NE2 "样板逻辑的抽象")
- en: auto-generated IDs, extracting / [Extraction of auto-generated IDs](part0127.xhtml#aid-3P3NE2
    "Extraction of auto-generated IDs")
  id: totrans-6373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动生成的ID，提取 / [提取自动生成的ID](part0127.xhtml#aid-3P3NE2 "提取自动生成的ID")
- en: bookapp-rest application
  id: totrans-6374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bookapp-rest应用程序
- en: URL / [Our MessageSource bean definition](part0116.xhtml#aid-3EK182 "Our MessageSource
    bean definition")
  id: totrans-6375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [我们的MessageSource bean定义](part0116.xhtml#aid-3EK182 "我们的MessageSource
    bean定义")
- en: Bootstrap
  id: totrans-6376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap
- en: responsive single page Webdesign, setting-up / [Setting up and customizing a
    responsive single page webdesign with Bootstrap](part0087.xhtml#aid-2IV0U2 "Setting
    up and customizing a responsive single page webdesign with Bootstrap"), [How to
    do it...](part0087.xhtml#aid-2IV0U2 "How to do it..."), [Installing a Bootstrap
    theme](part0087.xhtml#aid-2IV0U2 "Installing a Bootstrap theme")
  id: totrans-6377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式单页Web设计，设置 / [使用Bootstrap设置和自定义响应式单页Web设计](part0087.xhtml#aid-2IV0U2 "使用Bootstrap设置和自定义响应式单页Web设计"),
    [如何做...](part0087.xhtml#aid-2IV0U2 "如何做..."), [安装Bootstrap主题](part0087.xhtml#aid-2IV0U2
    "安装Bootstrap主题")
- en: highlights / [Bootstrap highlights](part0087.xhtml#aid-2IV0U2 "Bootstrap highlights")
  id: totrans-6378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亮点 / [Bootstrap亮点](part0087.xhtml#aid-2IV0U2 "Bootstrap亮点")
- en: URL / [There's more...](part0087.xhtml#aid-2IV0U2 "There's more...")
  id: totrans-6379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [还有更多...](part0087.xhtml#aid-2IV0U2 "还有更多...")
- en: Bootstrap Components
  id: totrans-6380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap组件
- en: Navbars / [Navbars](part0087.xhtml#aid-2IV0U2 "Navbars ")
  id: totrans-6381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏 / [导航栏](part0087.xhtml#aid-2IV0U2 "导航栏")
- en: hero units / [Hero units](part0087.xhtml#aid-2IV0U2 "Hero units")
  id: totrans-6382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英雄单元 / [英雄单元](part0087.xhtml#aid-2IV0U2 "英雄单元")
- en: alerts / [Alerts](part0087.xhtml#aid-2IV0U2 "Alerts")
  id: totrans-6383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报 / [警报](part0087.xhtml#aid-2IV0U2 "警报")
- en: badges and labels / [Badges and labels](part0087.xhtml#aid-2IV0U2 "Badges and
    labels")
  id: totrans-6384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 徽章和标签 / [徽章和标签](part0087.xhtml#aid-2IV0U2 "徽章和标签")
- en: Bootstrap CSS utilities
  id: totrans-6385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap CSS实用程序
- en: Uniform Buttons / [Uniform Buttons](part0087.xhtml#aid-2IV0U2 "Uniform Buttons")
  id: totrans-6386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一按钮 / [统一按钮](part0087.xhtml#aid-2IV0U2 "统一按钮")
- en: icons / [Icons](part0087.xhtml#aid-2IV0U2 "Icons")
  id: totrans-6387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图标 / [图标](part0087.xhtml#aid-2IV0U2 "图标")
- en: tables / [Tables](part0087.xhtml#aid-2IV0U2 "Tables")
  id: totrans-6388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格 / [表格](part0087.xhtml#aid-2IV0U2 "表格")
- en: Bootstrap pagination
  id: totrans-6389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap分页
- en: with Angular UI / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42
    "Bootstrap pagination with the Angular UI")
  id: totrans-6390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular UI / [使用Angular UI的Bootstrap分页](part0098.xhtml#aid-2TEN42 "使用Angular
    UI的Bootstrap分页")
- en: URL / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42 "Bootstrap
    pagination with the Angular UI")
  id: totrans-6391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [使用Angular UI的Bootstrap分页](part0098.xhtml#aid-2TEN42 "使用Angular UI的Bootstrap分页")
- en: Bootstrap scaffolding
  id: totrans-6392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap脚手架
- en: about / [Bootstrap scaffolding](part0087.xhtml#aid-2IV0U2 "Bootstrap scaffolding")
  id: totrans-6393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Bootstrap脚手架](part0087.xhtml#aid-2IV0U2 "Bootstrap脚手架")
- en: Grid System and responsive design / [Grid system and responsive design](part0087.xhtml#aid-2IV0U2
    "Grid system and responsive design")
  id: totrans-6394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格系统和响应式设计 / [网格系统和响应式设计](part0087.xhtml#aid-2IV0U2 "网格系统和响应式设计")
- en: columns, defining / [Defining columns](part0087.xhtml#aid-2IV0U2 "Defining columns")
  id: totrans-6395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义列 / [定义列](part0087.xhtml#aid-2IV0U2 "定义列")
- en: column, offsetting / [Offsetting and nesting](part0087.xhtml#aid-2IV0U2 "Offsetting
    and nesting")
  id: totrans-6396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列，偏移 / [偏移和嵌套](part0087.xhtml#aid-2IV0U2 "偏移和嵌套")
- en: nesting / [Offsetting and nesting](part0087.xhtml#aid-2IV0U2 "Offsetting and
    nesting")
  id: totrans-6397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套 / [偏移和嵌套](part0087.xhtml#aid-2IV0U2 "偏移和嵌套")
- en: fluid gridding / [Fluid gridding](part0087.xhtml#aid-2IV0U2 "Fluid gridding")
  id: totrans-6398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流体网格 / [流体网格](part0087.xhtml#aid-2IV0U2 "流体网格")
- en: Bootstrap theme
  id: totrans-6399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap主题
- en: customising / [Customising a Bootstrap theme](part0087.xhtml#aid-2IV0U2 "Customising
    a Bootstrap theme")
  id: totrans-6400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 / [自定义Bootstrap主题](part0087.xhtml#aid-2IV0U2 "自定义Bootstrap主题")
- en: installing / [The theme installation](part0087.xhtml#aid-2IV0U2 "The theme installation")
  id: totrans-6401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 / [主题安装](part0087.xhtml#aid-2IV0U2 "主题安装")
- en: Broker channel / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  id: totrans-6402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经纪人通道 / [Spring 4中STOMP over WebSocket和回退选项](part0054.xhtml#aid-1JFUC2 "Spring
    4中STOMP over WebSocket和回退选项")
- en: BSON (Binary JSON) format
  id: totrans-6403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BSON（二进制JSON）格式
- en: about / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
  id: totrans-6404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
- en: build life cycle, Maven
  id: totrans-6405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven构建生命周期
- en: about / [Maven's build life cycles](part0082.xhtml#aid-2E6E42 "Maven's build
    life cycles")
  id: totrans-6406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Maven的构建生命周期](part0082.xhtml#aid-2E6E42 "Maven的构建生命周期")
- en: clean life cycle / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean
    life cycle")
  id: totrans-6407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清洁生命周期 / [清洁生命周期](part0082.xhtml#aid-2E6E42 "清洁生命周期")
- en: default life cycle / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认生命周期 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: plugins / [Plugin goals](part0082.xhtml#aid-2E6E42 "Plugin goals")
  id: totrans-6409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件 / [插件目标](part0082.xhtml#aid-2E6E42 "插件目标")
- en: built-in life cycle / [Built-in life cycle bindings](part0082.xhtml#aid-2E6E42
    "Built-in life cycle bindings")
  id: totrans-6410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置生命周期 / [内置生命周期绑定](part0082.xhtml#aid-2E6E42 "内置生命周期绑定")
- en: Maven commands / [About Maven commands](part0082.xhtml#aid-2E6E42 "About Maven
    commands")
  id: totrans-6411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven命令 / [关于Maven命令](part0082.xhtml#aid-2E6E42 "关于Maven命令")
- en: C
  id: totrans-6412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C
- en: '@ComponentScan annotation / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")'
  id: totrans-6413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@ComponentScan注释 / [创建一个简单的WebSocket应用程序](part0053.xhtml#aid-1IHDQ2 "创建一个简单的WebSocket应用程序")'
- en: '@Configuration annotation / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")'
  id: totrans-6414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Configuration注释 / [创建一个简单的WebSocket应用程序](part0053.xhtml#aid-1IHDQ2 "创建一个简单的WebSocket应用程序")'
- en: '@ContextConfiguration annotation / [The @ContextConfiguration annotation](part0127.xhtml#aid-3P3NE2
    "The @ContextConfiguration annotation"), [There is more…](part0127.xhtml#aid-3P3NE2
    "There is more…")'
  id: totrans-6415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@ContextConfiguration注释 / [@ContextConfiguration注释](part0127.xhtml#aid-3P3NE2
    "@ContextConfiguration注释"), [还有更多…](part0127.xhtml#aid-3P3NE2 "还有更多…")'
- en: '@ControllerAdvice'
  id: totrans-6416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@ControllerAdvice'
- en: global exception handling with / [Global exception handling with @ControllerAdvice](part0099.xhtml#aid-2UD7M2
    "Global exception handling with @ControllerAdvice")
  id: totrans-6417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@ControllerAdvice进行全局异常处理 / [使用@ControllerAdvice进行全局异常处理](part0099.xhtml#aid-2UD7M2
    "使用@ControllerAdvice进行全局异常处理")
- en: support ResponseEntityExceptionHandler class / [The support ResponseEntityExceptionHandler
    class](part0099.xhtml#aid-2UD7M2 "The support ResponseEntityExceptionHandler class")
  id: totrans-6418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持ResponseEntityExceptionHandler类 / [支持ResponseEntityExceptionHandler类](part0099.xhtml#aid-2UD7M2
    "支持ResponseEntityExceptionHandler类")
- en: uniform error response object / [A uniform error response object](part0099.xhtml#aid-2UD7M2
    "A uniform error response object")
  id: totrans-6419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一的错误响应对象 / [统一的错误响应对象](part0099.xhtml#aid-2UD7M2 "统一的错误响应对象")
- en: '@Controller annotation / [@Controller](part0085.xhtml#aid-2H1VQ2 "@Controller")'
  id: totrans-6420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Controller注释 / [@Controller](part0085.xhtml#aid-2H1VQ2 "@Controller")'
- en: Cache-Control
  id: totrans-6421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存控制
- en: about / [See also](part0114.xhtml#aid-3CN042 "See also")
  id: totrans-6422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [另请参阅](part0114.xhtml#aid-3CN042 "另请参阅")
- en: cache control
  id: totrans-6423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存控制
- en: about / [Cache control](part0189.xhtml#aid-5K7QA1 "Cache control")
  id: totrans-6424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [缓存控制](part0189.xhtml#aid-5K7QA1 "缓存控制")
- en: configuring / [Cache control](part0189.xhtml#aid-5K7QA1 "Cache control")
  id: totrans-6425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 / [缓存控制](part0189.xhtml#aid-5K7QA1 "缓存控制")
- en: Cargo
  id: totrans-6426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 货物
- en: integration testing with / [Integration testing with Cargo, Rest-assured, and
    Maven failsafe](part0126.xhtml#aid-3O56S2 "Integration testing with Cargo, Rest-assured,
    and Maven failsafe"), [How to do it…](part0126.xhtml#aid-3O56S2 "How to do it…"),
    [How it works...](part0126.xhtml#aid-3O56S2 "How it works...")
  id: totrans-6427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与集成测试 / [使用Cargo，Rest-assured和Maven failsafe进行集成测试](part0126.xhtml#aid-3O56S2
    "使用Cargo，Rest-assured和Maven failsafe进行集成测试"), [如何做…](part0126.xhtml#aid-3O56S2
    "如何做…"), [它是如何工作的…](part0126.xhtml#aid-3O56S2 "它是如何工作的…")
- en: Codehaus Cargo / [Code Cargo](part0126.xhtml#aid-3O56S2 "Code Cargo")
  id: totrans-6428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codehaus Cargo / [Code Cargo](part0126.xhtml#aid-3O56S2 "Code Cargo")
- en: Maven Plugin / [Cargo Maven Plugin](part0126.xhtml#aid-3O56S2 "Cargo Maven Plugin")
  id: totrans-6429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven插件 / [Cargo Maven插件](part0126.xhtml#aid-3O56S2 "Cargo Maven插件")
- en: about / [About Cargo](part0126.xhtml#aid-3O56S2 "About Cargo")
  id: totrans-6430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [关于Cargo](part0126.xhtml#aid-3O56S2 "关于Cargo")
- en: URL / [About Cargo](part0126.xhtml#aid-3O56S2 "About Cargo")
  id: totrans-6431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [关于Cargo](part0126.xhtml#aid-3O56S2 "关于Cargo")
- en: Cargo Maven Plugin
  id: totrans-6432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cargo Maven插件
- en: about / [Cargo Maven Plugin](part0126.xhtml#aid-3O56S2 "Cargo Maven Plugin")
  id: totrans-6433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Cargo Maven插件](part0126.xhtml#aid-3O56S2 "Cargo Maven插件")
- en: Maven phases, binding to / [Binding to Maven phases](part0126.xhtml#aid-3O56S2
    "Binding to Maven phases")
  id: totrans-6434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven阶段，绑定到 / [绑定到Maven阶段](part0126.xhtml#aid-3O56S2 "绑定到Maven阶段")
- en: existing Tomcat instance, using / [Using an existing Tomcat instance](part0126.xhtml#aid-3O56S2
    "Using an existing Tomcat instance")
  id: totrans-6435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的Tomcat实例，使用 / [使用现有的Tomcat实例](part0126.xhtml#aid-3O56S2 "使用现有的Tomcat实例")
- en: Cascade attribute
  id: totrans-6436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级联属性
- en: about / [The Cascade attribute](part0093.xhtml#aid-2OM4A2 "The Cascade attribute")
  id: totrans-6437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [级联属性](part0093.xhtml#aid-2OM4A2 "级联属性")
- en: Certificate Signing Request (CSR)
  id: totrans-6438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证书签名请求（CSR）
- en: URL / [About SSL and TLS](part0106.xhtml#aid-352RK2 "About SSL and TLS")
  id: totrans-6439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [关于SSL和TLS](part0106.xhtml#aid-352RK2 "关于SSL和TLS")
- en: check point
  id: totrans-6440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查点
- en: about / [The check point](part0166.xhtml#aid-4U9TC1 "The check point")
  id: totrans-6441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [检查点](part0166.xhtml#aid-4U9TC1 "检查点")
- en: clean command / [Clean](part0124.xhtml#aid-3M85O2 "Clean")
  id: totrans-6442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理命令 / [清理](part0124.xhtml#aid-3M85O2 "清理")
- en: clean life cycle
  id: totrans-6443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理生命周期
- en: pre-clean phase / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean
    life cycle")
  id: totrans-6444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预清理阶段 / [清理生命周期](part0082.xhtml#aid-2E6E42 "清理生命周期")
- en: clean phase / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean life
    cycle")
  id: totrans-6445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理阶段 / [清理生命周期](part0082.xhtml#aid-2E6E42 "清理生命周期")
- en: post-clean phase / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean
    life cycle")
  id: totrans-6446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后清理阶段 / [清理生命周期](part0082.xhtml#aid-2E6E42 "清理生命周期")
- en: client-side forms
  id: totrans-6447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端表单
- en: validating, with HTML5/AngularJS / [Validating client-side forms with HTML5
    AngularJS](part0117.xhtml#aid-3FIHQ2 "Validating client-side forms with HTML5
    AngularJS"), [How to do it…](part0117.xhtml#aid-3FIHQ2 "How to do it…"), [How
    it works...](part0117.xhtml#aid-3FIHQ2 "How it works...")
  id: totrans-6448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5/AngularJS进行验证 / [使用HTML5 AngularJS验证客户端表单](part0117.xhtml#aid-3FIHQ2
    "使用HTML5 AngularJS验证客户端表单"), [如何做…](part0117.xhtml#aid-3FIHQ2 "如何做…"), [它是如何工作的…](part0117.xhtml#aid-3FIHQ2
    "它是如何工作的…")
- en: control variables / [Control variables in forms](part0117.xhtml#aid-3FIHQ2 "Control
    variables in forms")
  id: totrans-6449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制变量 / [表单中的控制变量](part0117.xhtml#aid-3FIHQ2 "表单中的控制变量")
- en: state transclusions / [Form state transclusions and style](part0117.xhtml#aid-3FIHQ2
    "Form state transclusions and style")
  id: totrans-6450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态转换 / [表单状态转换和样式](part0117.xhtml#aid-3FIHQ2 "表单状态转换和样式")
- en: style / [Form state transclusions and style](part0117.xhtml#aid-3FIHQ2 "Form
    state transclusions and style")
  id: totrans-6451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式 / [表单状态转换和样式](part0117.xhtml#aid-3FIHQ2 "表单状态转换和样式")
- en: client-side forms, validation-constraints
  id: totrans-6452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端表单，验证约束
- en: required / [Required](part0117.xhtml#aid-3FIHQ2 "Required")
  id: totrans-6453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必需的 / [必需的](part0117.xhtml#aid-3FIHQ2 "必需的")
- en: minimum/maximum length / [Minimum/maximum length](part0117.xhtml#aid-3FIHQ2
    "Minimum/maximum length")
  id: totrans-6454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小/最大长度 / [最小/最大长度](part0117.xhtml#aid-3FIHQ2 "最小/最大长度")
- en: regex pattern / [Regex pattern](part0117.xhtml#aid-3FIHQ2 "Regex pattern")
  id: totrans-6455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式模式 / [正则表达式模式](part0117.xhtml#aid-3FIHQ2 "正则表达式模式")
- en: client-side MVC pattern
  id: totrans-6456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端MVC模式
- en: designing, AngularJS used / [Designing a client-side MVC pattern with AngularJS](part0090.xhtml#aid-2LQIK2
    "Designing a client-side MVC pattern with AngularJS")
  id: totrans-6457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计，使用AngularJS / [使用AngularJS设计客户端MVC模式](part0090.xhtml#aid-2LQIK2 "使用AngularJS设计客户端MVC模式")
- en: client validation, profile page
  id: totrans-6458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端验证，配置文件页面
- en: enabling / [Client validation](part0144.xhtml#aid-49AH01 "Client validation")
  id: totrans-6459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 / [客户端验证](part0144.xhtml#aid-49AH01 "客户端验证")
- en: reference link / [Client validation](part0144.xhtml#aid-49AH01 "Client validation")
  id: totrans-6460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [客户端验证](part0144.xhtml#aid-49AH01 "客户端验证")
- en: Cloud Foundry
  id: totrans-6461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: about / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
  id: totrans-6462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
- en: URL / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
  id: totrans-6463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
- en: Cloud Foundry CLI tools
  id: totrans-6464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Foundry CLI工具
- en: installing / [Installing the Cloud Foundry CLI tools](part0197.xhtml#aid-5RRUQ2
    "Installing the Cloud Foundry CLI tools")
  id: totrans-6465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 / [安装Cloud Foundry CLI工具](part0197.xhtml#aid-5RRUQ2 "安装Cloud Foundry CLI工具")
- en: URL / [Installing the Cloud Foundry CLI tools](part0197.xhtml#aid-5RRUQ2 "Installing
    the Cloud Foundry CLI tools")
  id: totrans-6466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [安装Cloud Foundry CLI工具](part0197.xhtml#aid-5RRUQ2 "安装Cloud Foundry CLI工具")
- en: cloudstreetmarket-parent
  id: totrans-6467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cloudstreetmarket-parent
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  id: totrans-6468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [准备就绪](part0082.xhtml#aid-2E6E42 "准备就绪")
- en: code testing
  id: totrans-6469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码测试
- en: benefits / [Why should I test my code?](part0175.xhtml#aid-56SIE1 "Why should
    I test my code?")
  id: totrans-6470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好处 / [为什么我应该测试我的代码？](part0175.xhtml#aid-56SIE1 "为什么我应该测试我的代码？")
- en: unit tests / [How should I test my code?](part0176.xhtml#aid-57R301 "How should
    I test my code?")
  id: totrans-6471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 / [我应该如何测试我的代码？](part0176.xhtml#aid-57R301 "我应该如何测试我的代码？")
- en: acceptance tests / [How should I test my code?](part0176.xhtml#aid-57R301 "How
    should I test my code?")
  id: totrans-6472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验收测试 / [我应该如何测试我的代码？](part0176.xhtml#aid-57R301 "我应该如何测试我的代码？")
- en: component stereotype annotations
  id: totrans-6473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件类型注释
- en: '@Component / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  id: totrans-6474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Component / [组件类型注释](part0016.xhtml#aid-F8902 "组件类型注释")'
- en: '@Service / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  id: totrans-6475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Service / [组件类型注释](part0016.xhtml#aid-F8902 "组件类型注释")'
- en: '@Repository / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  id: totrans-6476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Repository / [组件类型注释](part0016.xhtml#aid-F8902 "组件类型注释")'
- en: '@Controller / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  id: totrans-6477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Controller / [组件类型注释](part0016.xhtml#aid-F8902 "组件类型注释")'
- en: '@RestController / [Component stereotype annotations](part0016.xhtml#aid-F8902
    "Component stereotype annotations")'
  id: totrans-6478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RestController / [组件类型注释](part0016.xhtml#aid-F8902 "组件类型注释")'
- en: configuration metadata, Dependency Injection
  id: totrans-6479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置元数据，依赖注入
- en: about / [Configuration metadata](part0016.xhtml#aid-F8902 "Configuration metadata")
  id: totrans-6480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [配置元数据](part0016.xhtml#aid-F8902 "配置元数据")
- en: XML-based configuration metadata / [XML-based configuration metadata](part0016.xhtml#aid-F8902
    "XML-based configuration metadata")
  id: totrans-6481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于XML的配置元数据 / [基于XML的配置元数据](part0016.xhtml#aid-F8902 "基于XML的配置元数据")
- en: annotation-based configuration metadata / [Annotation-based configuration metadata](part0016.xhtml#aid-F8902
    "Annotation-based configuration metadata")
  id: totrans-6482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于注释的配置元数据 / [基于注释的配置元数据](part0016.xhtml#aid-F8902 "基于注释的配置元数据")
- en: XML-based, versus annotation-based configuration / [XML-based versus annotation-based
    configuration](part0016.xhtml#aid-F8902 "XML-based versus annotation-based configuration")
  id: totrans-6483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于XML的与基于注释的配置 / [基于XML与基于注释的配置](part0016.xhtml#aid-F8902 "基于XML与基于注释的配置")
- en: component stereotype annotations / [Component stereotype annotations](part0016.xhtml#aid-F8902
    "Component stereotype annotations")
  id: totrans-6484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件类型注释 / [组件类型注释](part0016.xhtml#aid-F8902 "组件类型注释")
- en: Java-based configuration metadata / [Java-based configuration metadata](part0016.xhtml#aid-F8902
    "Java-based configuration metadata")
  id: totrans-6485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Java的配置元数据 / [基于Java的配置元数据](part0016.xhtml#aid-F8902 "基于Java的配置元数据")
- en: JSR 330 standard annotations / [JSR 330 standard annotations](part0016.xhtml#aid-F8902
    "JSR 330 standard annotations")
  id: totrans-6486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR 330标准注释 / [JSR 330标准注释](part0016.xhtml#aid-F8902 "JSR 330标准注释")
- en: constructor-based DI
  id: totrans-6487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于构造函数的依赖注入
- en: about / [Constructor-based or setter-based DI – which is better?](part0017.xhtml#aid-G6PI2
    "Constructor-based or setter-based DI – which is better?")
  id: totrans-6488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [基于构造函数还是基于setter的依赖注入 - 哪个更好？](part0017.xhtml#aid-G6PI2 "基于构造函数还是基于setter的依赖注入
    - 哪个更好？")
- en: constructor injection
  id: totrans-6489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数注入
- en: about / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2 "Placing
    the profile in a session")
  id: totrans-6490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [将配置文件放入会话中](part0149.xhtml#aid-4E33Q2 "将配置文件放入会话中")
- en: URL / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2 "Placing
    the profile in a session")
  id: totrans-6491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [将配置文件放入会话中](part0149.xhtml#aid-4E33Q2 "将配置文件放入会话中")
- en: container-level default init and destroy methods
  id: totrans-6492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器级默认初始化和销毁方法
- en: about / [Container-level default-init-method and default-destroy-method](part0019.xhtml#aid-I3QM1
    "Container-level default-init-method and default-destroy-method")
  id: totrans-6493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [容器级默认初始化方法和默认销毁方法](part0019.xhtml#aid-I3QM1 "容器级默认初始化方法和默认销毁方法")
- en: container-managed transactions (CMT)
  id: totrans-6494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器管理的事务（CMT）
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  id: totrans-6495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring事务的相关性](part0051.xhtml#aid-1GKCM2 "Spring事务的相关性")
- en: content negotiation
  id: totrans-6496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容协商
- en: configuring / [How to do it...](part0097.xhtml#aid-2SG6I2 "How to do it..."),
    [How it works...](part0097.xhtml#aid-2SG6I2 "How it works...")
  id: totrans-6497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 / [如何做...](part0097.xhtml#aid-2SG6I2 "如何做..."), [它是如何工作的...](part0097.xhtml#aid-2SG6I2
    "它是如何工作的...")
- en: XML marshalling, support for / [Support for XML marshalling](part0097.xhtml#aid-2SG6I2
    "Support for XML marshalling")
  id: totrans-6498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML编组，支持 / [支持XML编组](part0097.xhtml#aid-2SG6I2 "支持XML编组")
- en: ContentNegotiationManager
  id: totrans-6499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ContentNegotiationManager
- en: negotiation strategies with / [Negotiation strategies with ContentNegotiationManager](part0097.xhtml#aid-2SG6I2
    "Negotiation strategies with ContentNegotiationManager")
  id: totrans-6500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与ContentNegotiationManager的协商策略
- en: accept header / [The Accept header](part0097.xhtml#aid-2SG6I2 "The Accept header")
  id: totrans-6501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受头 / [接受头](part0097.xhtml#aid-2SG6I2 "接受头")
- en: file extension suffix, in URL path / [The file extension suffix in the URL path](part0097.xhtml#aid-2SG6I2
    "The file extension suffix in the URL path")
  id: totrans-6502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL路径中的文件扩展名后缀 / [URL路径中的文件扩展名后缀](part0097.xhtml#aid-2SG6I2 "URL路径中的文件扩展名后缀")
- en: request parameter / [The request parameter](part0097.xhtml#aid-2SG6I2 "The request
    parameter")
  id: totrans-6503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求参数 / [请求参数](part0097.xhtml#aid-2SG6I2 "请求参数")
- en: Java Activation Framework / [Java Activation Framework](part0097.xhtml#aid-2SG6I2
    "Java Activation Framework")
  id: totrans-6504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java激活框架 / [Java激活框架](part0097.xhtml#aid-2SG6I2 "Java激活框架")
- en: ContentNegotiationManagerFactoryBean JavaDoc
  id: totrans-6505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ContentNegotiationManagerFactoryBean JavaDoc
- en: about / [The ContentNegotiationManagerFactoryBean JavaDoc](part0097.xhtml#aid-2SG6I2
    "The ContentNegotiationManagerFactoryBean JavaDoc")
  id: totrans-6506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [ContentNegotiationManagerFactoryBean JavaDoc](part0097.xhtml#aid-2SG6I2
    "ContentNegotiationManagerFactoryBean JavaDoc")
- en: contents
  id: totrans-6507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容
- en: internationalizing, for REST / [Internationalizing messages and contents for
    REST](part0116.xhtml#aid-3EK182 "Internationalizing messages and contents for
    REST")
  id: totrans-6508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为REST国际化 / [为REST国际化消息和内容](part0116.xhtml#aid-3EK182 "为REST国际化消息和内容")
- en: dynamic translation, implementing on backend / [Backend](part0116.xhtml#aid-3EK182
    "Backend")
  id: totrans-6509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态翻译，后端实现 / [后端](part0116.xhtml#aid-3EK182 "后端")
- en: dynamic translation, implementing on frontend / [Frontend](part0116.xhtml#aid-3EK182
    "Frontend"), [How it works...](part0116.xhtml#aid-3EK182 "How it works...")
  id: totrans-6510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态翻译，前端实现 / [前端](part0116.xhtml#aid-3EK182 "前端"), [它是如何工作的...](part0116.xhtml#aid-3EK182
    "它是如何工作的...")
- en: continuous integration
  id: totrans-6511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: reference link / [Why should I test my code?](part0175.xhtml#aid-56SIE1 "Why
    should I test my code?")
  id: totrans-6512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [为什么我应该测试我的代码？](part0175.xhtml#aid-56SIE1 "为什么我应该测试我的代码？")
- en: controller
  id: totrans-6513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器
- en: configuring, with simple URL mapping / [Configuring a controller with simple
    URL mapping](part0085.xhtml#aid-2H1VQ2 "Configuring a controller with simple URL
    mapping"), [How to do it...](part0085.xhtml#aid-2H1VQ2 "How to do it...")
  id: totrans-6514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单URL映射进行配置 / [使用简单URL映射配置控制器](part0085.xhtml#aid-2H1VQ2 "使用简单URL映射配置控制器"),
    [如何做...](part0085.xhtml#aid-2H1VQ2 "如何做...")
- en: controller method-handler signatures
  id: totrans-6515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器方法处理程序签名
- en: about / [Controller method-handler signatures](part0085.xhtml#aid-2H1VQ2 "Controller
    method-handler signatures")
  id: totrans-6516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [控制器方法处理程序签名](part0085.xhtml#aid-2H1VQ2 "控制器方法处理程序签名")
- en: method arguments types, supported / [Supported method arguments types](part0085.xhtml#aid-2H1VQ2
    "Supported method arguments types")
  id: totrans-6517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的方法参数类型 / [支持的方法参数类型](part0085.xhtml#aid-2H1VQ2 "支持的方法参数类型")
- en: annotations for method arguments, supported / [Supported annotations for method
    arguments](part0085.xhtml#aid-2H1VQ2 "Supported annotations for method arguments")
  id: totrans-6518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法参数的支持注解 / [方法参数的支持注解](part0085.xhtml#aid-2H1VQ2 "方法参数的支持注解")
- en: return types, supported / [Supported return Types](part0085.xhtml#aid-2H1VQ2
    "Supported return Types")
  id: totrans-6519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的返回类型 / [支持的返回类型](part0085.xhtml#aid-2H1VQ2 "支持的返回类型")
- en: controllers
  id: totrans-6520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器
- en: about / [Controllers in detail](part0034.xhtml#aid-10DJ42 "Controllers in detail")
  id: totrans-6521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [详细的控制器](part0034.xhtml#aid-10DJ42 "详细的控制器")
- en: request URLs, mapping with @RequestMapping / [Mapping request URLs with @RequestMapping](part0034.xhtml#aid-10DJ42
    "Mapping request URLs with @RequestMapping")
  id: totrans-6522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@RequestMapping映射请求URL / [使用@RequestMapping映射请求URL](part0034.xhtml#aid-10DJ42
    "使用@RequestMapping映射请求URL")
- en: URI template patterns, with @PathVariable annotation / [URI template patterns
    with the @PathVariable annotation](part0034.xhtml#aid-10DJ42 "URI template patterns
    with the @PathVariable annotation")
  id: totrans-6523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@PathVariable注解的URI模板模式 / [使用@PathVariable注解的URI模板模式](part0034.xhtml#aid-10DJ42
    "使用@PathVariable注解的URI模板模式")
- en: parameters, binding with @RequestParam annotation / [Binding parameters with
    the @RequestParam annotation](part0034.xhtml#aid-10DJ42 "Binding parameters with
    the @RequestParam annotation")
  id: totrans-6524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@RequestParam注解绑定参数 / [使用@RequestParam注解绑定参数](part0034.xhtml#aid-10DJ42 "使用@RequestParam注解绑定参数")
- en: request handler method arguments / [Request handler method arguments](part0034.xhtml#aid-10DJ42
    "Request handler method arguments")
  id: totrans-6525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求处理程序方法参数 / [请求处理程序方法参数](part0034.xhtml#aid-10DJ42 "请求处理程序方法参数")
- en: request handler method return types / [Request handler method return types](part0034.xhtml#aid-10DJ42
    "Request handler method return types")
  id: totrans-6526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求处理程序方法返回类型 / [请求处理程序方法返回类型](part0034.xhtml#aid-10DJ42 "请求处理程序方法返回类型")
- en: model attributes, setting / [Setting Model attributes](part0034.xhtml#aid-10DJ42
    "Setting Model attributes")
  id: totrans-6527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型属性，设置 / [设置模型属性](part0034.xhtml#aid-10DJ42 "设置模型属性")
- en: RESTful services, building for JSON and XML media / [Building RESTful services
    for JSON and XML media](part0034.xhtml#aid-10DJ42 "Building RESTful services for
    JSON and XML media")
  id: totrans-6528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为JSON和XML媒体构建RESTful服务 / [为JSON和XML媒体构建RESTful服务](part0034.xhtml#aid-10DJ42
    "为JSON和XML媒体构建RESTful服务")
- en: RESTful service, building with RestController / [Building a RESTful service
    with RestController](part0034.xhtml#aid-10DJ42 "Building a RESTful service with
    RestController")
  id: totrans-6529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RestController构建RESTful服务 / [使用RestController构建RESTful服务](part0034.xhtml#aid-10DJ42
    "使用RestController构建RESTful服务")
- en: authorizing on / [Authorizing on services and controllers](part0107.xhtml#aid-361C62
    "Authorizing on services and controllers"), [How to do it...](part0107.xhtml#aid-361C62
    "How to do it...")
  id: totrans-6530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权 / [在服务和控制器上进行授权](part0107.xhtml#aid-361C62 "在服务和控制器上进行授权"), [如何做...](part0107.xhtml#aid-361C62
    "如何做...")
- en: control variables, client-side forms
  id: totrans-6531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制变量，客户端表单
- en: Modified/Unmodified state / [Modified/Unmodified state](part0117.xhtml#aid-3FIHQ2
    "Modified/Unmodified state")
  id: totrans-6532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改/未修改状态 / [修改/未修改状态](part0117.xhtml#aid-3FIHQ2 "修改/未修改状态")
- en: $error property / [Errors](part0117.xhtml#aid-3FIHQ2 "Errors")
  id: totrans-6533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: $error属性 / [错误](part0117.xhtml#aid-3FIHQ2 "错误")
- en: ConversionService API / [The ConversionService API](part0096.xhtml#aid-2RHM02
    "The ConversionService API")
  id: totrans-6534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ConversionService API / [ConversionService API](part0096.xhtml#aid-2RHM02 "ConversionService
    API")
- en: CookieHttpSessionStrategy / [CookieHttpSessionStrategy](part0122.xhtml#aid-3KB4K2
    "CookieHttpSessionStrategy")
  id: totrans-6535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CookieHttpSessionStrategy / [CookieHttpSessionStrategy](part0122.xhtml#aid-3KB4K2
    "CookieHttpSessionStrategy")
- en: core modules
  id: totrans-6536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心模块
- en: creating / [Why did we create core modules?](part0082.xhtml#aid-2E6E42 "Why
    did we create core modules?")
  id: totrans-6537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [为什么我们创建核心模块？](part0082.xhtml#aid-2E6E42 "为什么我们创建核心模块？")
- en: Create Read Update Delete (CRUD)
  id: totrans-6538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建读取更新删除（CRUD）
- en: about / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Level 2-HTTP动词](part0156.xhtml#aid-4KONO2 "Level 2-HTTP动词")
- en: Cross-Site Request Forgery (csrf) / [Our <http> configuration](part0104.xhtml#aid-335QG2
    "Our <http> configuration")
  id: totrans-6540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站点请求伪造（csrf）/ [我们的<http>配置](part0104.xhtml#aid-335QG2 "我们的<http>配置")
- en: cross-site request forgery (CSRF) attack
  id: totrans-6541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站点请求伪造（CSRF）攻击
- en: about / [Authentication](part0057.xhtml#aid-1MBG22 "Authentication")
  id: totrans-6542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [认证](part0057.xhtml#aid-1MBG22 "认证")
- en: Cross Site Request Forgery (CSRF)
  id: totrans-6543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站点请求伪造（CSRF）
- en: about / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized URLs")
  id: totrans-6544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [授权的URL](part0168.xhtml#aid-506UG2 "授权的URL")
- en: URL / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized URLs")
  id: totrans-6545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [授权的URL](part0168.xhtml#aid-506UG2 "授权的URL")
- en: custom constraints
  id: totrans-6546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义约束
- en: reference link / [Implementation-specific constraints](part0115.xhtml#aid-3DLGM2
    "Implementation-specific constraints")
  id: totrans-6547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [特定实现约束](part0115.xhtml#aid-3DLGM2 "特定实现约束")
- en: custom error page
  id: totrans-6548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义错误页面
- en: creating / [Custom error pages](part0150.xhtml#aid-4F1KC1 "Custom error pages")
  id: totrans-6549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [自定义错误页面](part0150.xhtml#aid-4F1KC1 "自定义错误页面")
- en: custom scope
  id: totrans-6550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义范围
- en: creating / [Creating a custom scope](part0017.xhtml#aid-G6PI2 "Creating a custom
    scope")
  id: totrans-6551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [创建自定义范围](part0017.xhtml#aid-G6PI2 "创建自定义范围")
- en: custom validator
  id: totrans-6552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义验证器
- en: URL / [Creating a custom validator](part0115.xhtml#aid-3DLGM2 "Creating a custom
    validator")
  id: totrans-6553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [创建自定义验证器](part0115.xhtml#aid-3DLGM2 "创建自定义验证器")
- en: D
  id: totrans-6554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: D
- en: DAO support
  id: totrans-6555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAO支持
- en: about / [DAO support and @Repository annotation](part0047.xhtml#aid-1CQAE1 "DAO
    support and @Repository annotation")
  id: totrans-6556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [DAO支持和@Repository注释](part0047.xhtml#aid-1CQAE1 "DAO支持和@Repository注释")
- en: data
  id: totrans-6557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据
- en: retrieving, from third-party API with OAuth / [Retrieving data from a third-party
    API with OAuth](part0112.xhtml#aid-3APV02 "Retrieving data from a third-party
    API with OAuth"), [How to do it…](part0112.xhtml#aid-3APV02 "How to do it…"),
    [How it works...](part0112.xhtml#aid-3APV02 "How it works...")
  id: totrans-6558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OAuth从第三方API检索/ [使用OAuth从第三方API检索数据](part0112.xhtml#aid-3APV02 "使用OAuth从第三方API检索数据"),
    [如何做...](part0112.xhtml#aid-3APV02 "如何做..."), [它是如何工作的...](part0112.xhtml#aid-3APV02
    "它是如何工作的...")
- en: Yahoo!, financial data / [Introduction to the financial data of Yahoo!](part0112.xhtml#aid-3APV02
    "Introduction to the financial data of Yahoo!")
  id: totrans-6559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo!，财务数据/ [Yahoo!财务数据介绍](part0112.xhtml#aid-3APV02 "Yahoo!财务数据介绍")
- en: graph, generation/display / [Graph generation/display](part0112.xhtml#aid-3APV02
    "Graph generation/display")
  id: totrans-6560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形，生成/显示/ [图形生成/显示](part0112.xhtml#aid-3APV02 "图形生成/显示")
- en: financial data, pulling / [How is the financial data pulled/refreshed?](part0112.xhtml#aid-3APV02
    "How is the financial data pulled/refreshed?")
  id: totrans-6561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 财务数据，拉取/ [财务数据是如何拉取/刷新的？](part0112.xhtml#aid-3APV02 "财务数据是如何拉取/刷新的？")
- en: financial data, refreshing / [How is the financial data pulled/refreshed?](part0112.xhtml#aid-3APV02
    "How is the financial data pulled/refreshed?")
  id: totrans-6562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 财务数据，刷新/ [财务数据是如何拉取/刷新的？](part0112.xhtml#aid-3APV02 "财务数据是如何拉取/刷新的？")
- en: third-party services, calling / [Calling third-party services](part0112.xhtml#aid-3APV02
    "Calling third-party services")
  id: totrans-6563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用第三方服务/ [调用第三方服务](part0112.xhtml#aid-3APV02 "调用第三方服务")
- en: API providers, existing / [Spring Social — existing API providers](part0112.xhtml#aid-3APV02
    "Spring Social — existing API providers")
  id: totrans-6564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的API提供商/ [Spring Social-现有的API提供商](part0112.xhtml#aid-3APV02 "Spring Social-现有的API提供商")
- en: data-supply implementation
  id: totrans-6565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据供应实现
- en: injection of services, via Interfaces / [Injection of services via interfaces](part0088.xhtml#aid-2JTHG2
    "Injection of services via interfaces")
  id: totrans-6566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过接口注入服务/ [通过接口注入服务](part0088.xhtml#aid-2JTHG2 "通过接口注入服务")
- en: dummy implementation, selecting / [How does Spring choose the dummy implementations?](part0088.xhtml#aid-2JTHG2
    "How does Spring choose the dummy implementations?")
  id: totrans-6567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟实现，选择/ [Spring如何选择虚拟实现？](part0088.xhtml#aid-2JTHG2 "Spring如何选择虚拟实现？")
- en: DTOs, used in View layer / [DTOs to be used in View layer](part0088.xhtml#aid-2JTHG2
    "DTOs to be used in View layer")
  id: totrans-6568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图层中使用的DTO/ [在视图层中使用的DTO](part0088.xhtml#aid-2JTHG2 "在视图层中使用的DTO")
- en: Dummy service implementations / [Dummy service implementations](part0088.xhtml#aid-2JTHG2
    "Dummy service implementations")
  id: totrans-6569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟服务实现/ [虚拟服务实现](part0088.xhtml#aid-2JTHG2 "虚拟服务实现")
- en: data access objects (DAOs) / [XML-based configuration metadata](part0016.xhtml#aid-F8902
    "XML-based configuration metadata")
  id: totrans-6570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据访问对象（DAO）/ [基于XML的配置元数据](part0016.xhtml#aid-F8902 "基于XML的配置元数据")
- en: Database Migrations
  id: totrans-6571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库迁移
- en: automating, FlyWay used / [Automating Database Migrations with FlyWay](part0124.xhtml#aid-3M85O2
    "Automating Database Migrations with FlyWay"), [How to do it…](part0124.xhtml#aid-3M85O2
    "How to do it…")
  id: totrans-6572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化，使用FlyWay/ [使用FlyWay自动化数据库迁移](part0124.xhtml#aid-3M85O2 "使用FlyWay自动化数据库迁移"),
    [如何做...](part0124.xhtml#aid-3M85O2 "如何做...")
- en: DataSource
  id: totrans-6573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源
- en: configuring / [Configuring DataSource](part0044.xhtml#aid-19UOO1 "Configuring
    DataSource")
  id: totrans-6574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置/ [配置数据源](part0044.xhtml#aid-19UOO1 "配置数据源")
- en: reference / [Configuring DataSource](part0044.xhtml#aid-19UOO1 "Configuring
    DataSource")
  id: totrans-6575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考/ [配置数据源](part0044.xhtml#aid-19UOO1 "配置数据源")
- en: datasource
  id: totrans-6576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源
- en: about / [The Spring-managed DataSource bean](part0092.xhtml#aid-2NNJO2 "The
    Spring-managed DataSource bean")
  id: totrans-6577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Spring管理的数据源bean](part0092.xhtml#aid-2NNJO2 "Spring管理的数据源bean")
- en: Data Transfer Object (DTO)
  id: totrans-6578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据传输对象（DTO）
- en: about / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  id: totrans-6579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: declarative transaction management
  id: totrans-6580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式事务管理
- en: about / [Declarative transaction management](part0051.xhtml#aid-1GKCM2 "Declarative
    transaction management")
  id: totrans-6581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [声明式事务管理](part0051.xhtml#aid-1GKCM2 "声明式事务管理")
- en: proxy mode / [Transactional modes – proxy and AspectJ](part0051.xhtml#aid-1GKCM2
    "Transactional modes – proxy and AspectJ")
  id: totrans-6582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理模式/ [事务模式-代理和AspectJ](part0051.xhtml#aid-1GKCM2 "事务模式-代理和AspectJ")
- en: AspectJ mode / [Transactional modes – proxy and AspectJ](part0051.xhtml#aid-1GKCM2
    "Transactional modes – proxy and AspectJ")
  id: totrans-6583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AspectJ模式 / [事务模式-代理和AspectJ](part0051.xhtml#aid-1GKCM2 "事务模式-代理和AspectJ")
- en: transactional behavior, defining / [Defining transactional behavior](part0051.xhtml#aid-1GKCM2
    "Defining transactional behavior")
  id: totrans-6584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义事务行为 / [定义事务行为](part0051.xhtml#aid-1GKCM2 "定义事务行为")
- en: rollback rules, setting / [Setting rollback rules](part0051.xhtml#aid-1GKCM2
    "Setting rollback rules")
  id: totrans-6585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚规则，设置 / [设置回滚规则](part0051.xhtml#aid-1GKCM2 "设置回滚规则")
- en: default life cycle
  id: totrans-6586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认生命周期
- en: validate / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: initialize / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: generate-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: generate-sources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: process-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: process-sources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: generate-resources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: generate-resources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: process-resources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: process-resources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: compile / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: process-classes / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: process-classes / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: generate-test-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: generate-test-sources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: process-test-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: process-test-sources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: generate-test-resources / [The default life cycle](part0082.xhtml#aid-2E6E42
    "The default life cycle")
  id: totrans-6597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: generate-test-resources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: process-test-resources / [The default life cycle](part0082.xhtml#aid-2E6E42
    "The default life cycle")
  id: totrans-6598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: process-test-resources / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: test-compile / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: test-compile / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: process-test-classes / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: process-test-classes / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: prepare-package / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备包 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: package / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: pre-integration-test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pre-integration-test / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: integration-test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  id: totrans-6605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: integration-test / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: post-integration-test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  id: totrans-6606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: post-integration-test / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: verify / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: install / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: install / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: deploy / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  id: totrans-6609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 / [默认生命周期](part0082.xhtml#aid-2E6E42 "默认生命周期")
- en: dependency injection / [Dependency injection](part0090.xhtml#aid-2LQIK2 "Dependency
    injection")
  id: totrans-6610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入 / [依赖注入](part0090.xhtml#aid-2LQIK2 "依赖注入")
- en: Dependency Injection (DI) / [The Spring Framework modules](part0012.xhtml#aid-BE6O1
    "The Spring Framework modules")
  id: totrans-6611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入（DI） / [Spring框架模块](part0012.xhtml#aid-BE6O1 "Spring框架模块")
- en: about / [Dependency Injection](part0016.xhtml#aid-F8902 "Dependency Injection"),
    [What does the Spring Framework bring?](part0079.xhtml#aid-2BASE1 "What does the
    Spring Framework bring?")
  id: totrans-6612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [依赖注入](part0016.xhtml#aid-F8902 "依赖注入"), [Spring框架带来了什么？](part0079.xhtml#aid-2BASE1
    "Spring框架带来了什么？")
- en: Spring IoC container / [The Spring IoC container](part0016.xhtml#aid-F8902 "The
    Spring IoC container")
  id: totrans-6613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring IoC容器 / [Spring IoC容器](part0016.xhtml#aid-F8902 "Spring IoC容器")
- en: configuration metadata / [Configuration metadata](part0016.xhtml#aid-F8902 "Configuration
    metadata")
  id: totrans-6614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置元数据 / [配置元数据](part0016.xhtml#aid-F8902 "配置元数据")
- en: Dependency Injection, with scoped beans
  id: totrans-6615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入，带有作用域的bean
- en: about / [Dependency Injection with scoped beans](part0017.xhtml#aid-G6PI2 "Dependency
    Injection with scoped beans")
  id: totrans-6616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [带有作用域的bean的依赖注入](part0017.xhtml#aid-G6PI2 "带有作用域的bean的依赖注入")
- en: deployable modules
  id: totrans-6617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可部署模块
- en: name, selecting / [How did we choose the names for deployable modules?](part0082.xhtml#aid-2E6E42
    "How did we choose the names for deployable modules?")
  id: totrans-6618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称，选择 / [我们如何选择可部署模块的名称？](part0082.xhtml#aid-2E6E42 "我们如何选择可部署模块的名称？")
- en: deployment
  id: totrans-6619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: about / [The deployment](part0202.xhtml#aid-60KHK1 "The deployment")
  id: totrans-6620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [部署](part0202.xhtml#aid-60KHK1 "部署")
- en: Docker / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  id: totrans-6621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
- en: development environment
  id: totrans-6622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发环境
- en: setting up / [Setting up the development environment](part0014.xhtml#aid-DB7S1
    "Setting up the development environment")
  id: totrans-6623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 / [设置开发环境](part0014.xhtml#aid-DB7S1 "设置开发环境")
- en: Dispatcher Servlet
  id: totrans-6624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dispatcher Servlet
- en: architecture / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
  id: totrans-6625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构 / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
- en: DispatcherServlet
  id: totrans-6626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DispatcherServlet
- en: about / [DispatcherServlet explained](part0033.xhtml#aid-VF2I1 "DispatcherServlet
    explained")
  id: totrans-6627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [DispatcherServlet解释](part0033.xhtml#aid-VF2I1 "DispatcherServlet解释")
- en: WebApplicationContext, using / [WebApplicationContext – ApplicationContext for
    the Web](part0033.xhtml#aid-VF2I1 "WebApplicationContext – ApplicationContext
    for the Web")
  id: totrans-6628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebApplicationContext/ [WebApplicationContext-Web的ApplicationContext](part0033.xhtml#aid-VF2I1
    "WebApplicationContext-Web的ApplicationContext")
- en: supporting beans / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-6629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持豆/ [支持DispatcherServlet的豆和它们的角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的豆和它们的角色")
- en: beans supporting / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")/ [DispatcherServlet – the
    Spring MVC entrypoint](part0085.xhtml#aid-2H1VQ2 "DispatcherServlet – the Spring
    MVC entrypoint")
  id: totrans-6630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的豆/ [支持DispatcherServlet的豆和它们的角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的豆和它们的角色")/
    [DispatcherServlet-Spring MVC入口点](part0085.xhtml#aid-2H1VQ2 "DispatcherServlet-Spring
    MVC入口点")
- en: distributed cache
  id: totrans-6631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式缓存
- en: configuring / [Distributed cache](part0190.xhtml#aid-5L6AS2 "Distributed cache")
  id: totrans-6632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置/ [分布式缓存](part0190.xhtml#aid-5L6AS2 "分布式缓存")
- en: distributed sessions
  id: totrans-6633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式会话
- en: about / [Distributed sessions](part0171.xhtml#aid-532G61 "Distributed sessions")
  id: totrans-6634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [分布式会话](part0171.xhtml#aid-532G61 "分布式会话")
- en: setting up / [Distributed sessions](part0171.xhtml#aid-532G61 "Distributed sessions")
  id: totrans-6635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置/ [分布式会话](part0171.xhtml#aid-532G61 "分布式会话")
- en: DNS
  id: totrans-6636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  id: totrans-6637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [还有更多...](part0102.xhtml#aid-318PC2 "还有更多...")
- en: DNS configuration / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  id: totrans-6638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS配置/ [DNS配置或主机别名](part0102.xhtml#aid-318PC2 "DNS配置或主机别名")
- en: DNS records
  id: totrans-6639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS记录
- en: edition / [In production – editing DNS records](part0102.xhtml#aid-318PC2 "In
    production – editing DNS records")
  id: totrans-6640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本/ [在生产中-编辑DNS记录](part0102.xhtml#aid-318PC2 "在生产中-编辑DNS记录")
- en: Docker
  id: totrans-6641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: about / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  id: totrans-6642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Docker](part0202.xhtml#aid-60KHK1 "Docker")
- en: URL / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  id: totrans-6643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [Docker](part0202.xhtml#aid-60KHK1 "Docker")
- en: reference link / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  id: totrans-6644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [Docker](part0202.xhtml#aid-60KHK1 "Docker")
- en: documentation
  id: totrans-6645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档
- en: with Swagger / [Documentation with Swagger](part0164.xhtml#aid-4SCS81 "Documentation
    with Swagger")
  id: totrans-6646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swagger/ [使用Swagger进行文档编制](part0164.xhtml#aid-4SCS81 "使用Swagger进行文档编制")
- en: Document Object Model (DOM) / [One app per HTML document](part0090.xhtml#aid-2LQIK2
    "One app per HTML document")
  id: totrans-6647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）/ [每个HTML文档一个应用程序](part0090.xhtml#aid-2LQIK2 "每个HTML文档一个应用程序")
- en: DOM
  id: totrans-6648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM
- en: setting up / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2
    "Setting up the DOM and creating modules")
  id: totrans-6649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置/ [设置DOM和创建模块](part0090.xhtml#aid-2LQIK2 "设置DOM和创建模块")
- en: DOM-scope binding
  id: totrans-6650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM范围绑定
- en: Bi-directional / [Bidirectional DOM-scope binding](part0090.xhtml#aid-2LQIK2
    "Bidirectional DOM-scope binding")
  id: totrans-6651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向/ [双向DOM范围绑定](part0090.xhtml#aid-2LQIK2 "双向DOM范围绑定")
- en: Domain Driven Design (DDD)
  id: totrans-6652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域驱动设计（DDD）
- en: about / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  id: totrans-6653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [贫血领域模型](part0131.xhtml#aid-3STPM1 "贫血领域模型")
- en: domain objects and entities
  id: totrans-6654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域对象和实体
- en: about / [Domain objects and entities](part0049.xhtml#aid-1ENBI2 "Domain objects
    and entities")
  id: totrans-6655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [领域对象和实体](part0049.xhtml#aid-1ENBI2 "领域对象和实体")
- en: Query resolution methods / [Query resolution methods](part0049.xhtml#aid-1ENBI2
    "Query resolution methods")
  id: totrans-6656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询解析方法/ [查询解析方法](part0049.xhtml#aid-1ENBI2 "查询解析方法")
- en: '@Query annotation, using / [Using the @Query annotation](part0049.xhtml#aid-1ENBI2
    "Using the @Query annotation")'
  id: totrans-6657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Query注释，使用/ [使用@Query注释](part0049.xhtml#aid-1ENBI2 "使用@Query注释")'
- en: Spring Data web support extensions / [Spring Data web support extensions](part0049.xhtml#aid-1ENBI2
    "Spring Data web support extensions")
  id: totrans-6658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data web支持扩展/ [Spring Data web支持扩展](part0049.xhtml#aid-1ENBI2 "Spring
    Data web支持扩展")
- en: auditing, with Spring Data / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2
    "Auditing with Spring Data")
  id: totrans-6659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计，使用Spring Data/ [使用Spring Data进行审计](part0049.xhtml#aid-1ENBI2 "使用Spring Data进行审计")
- en: Domain Object Security (ACLs)
  id: totrans-6660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域对象安全（ACLs）
- en: URL / [Domain Object Security (ACLs)](part0107.xhtml#aid-361C62 "Domain Object
    Security (ACLs)")
  id: totrans-6661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [领域对象安全（ACLs）](part0107.xhtml#aid-361C62 "领域对象安全（ACLs）")
- en: DTOs
  id: totrans-6662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DTO
- en: turning, into Spring HATEOAS resources / [Turning DTOs into Spring HATEOAS resources](part0109.xhtml#aid-37UDA2
    "Turning DTOs into Spring HATEOAS resources"), [How to do it…](part0109.xhtml#aid-37UDA2
    "How to do it…"), [How it works...](part0109.xhtml#aid-37UDA2 "How it works...")
  id: totrans-6663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换为Spring HATEOAS资源/ [将DTO转换为Spring HATEOAS资源](part0109.xhtml#aid-37UDA2 "将DTO转换为Spring
    HATEOAS资源"), [如何做...](part0109.xhtml#aid-37UDA2 "如何做..."), [它是如何工作的...](part0109.xhtml#aid-37UDA2
    "它是如何工作的...")
- en: E
  id: totrans-6664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E
- en: '@EnableAutoConfiguration annotation / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")'
  id: totrans-6665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@EnableAutoConfiguration注释/ [创建一个简单的WebSocket应用程序](part0053.xhtml#aid-1IHDQ2
    "创建一个简单的WebSocket应用程序")'
- en: Eclipse
  id: totrans-6666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse
- en: configuring, for Java 8 / [Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8](part0081.xhtml#aid-2D7TI2 "Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8"), [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-6667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Java 8配置/ [为Java 8，Maven 3和Tomcat 8配置Eclipse](part0081.xhtml#aid-2D7TI2 "为Java
    8，Maven 3和Tomcat 8配置Eclipse"), [如何做...](part0081.xhtml#aid-2D7TI2 "如何做...")
- en: configuring, for Maven 3 / [Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8](part0081.xhtml#aid-2D7TI2 "Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8"), [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-6668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Maven 3配置/ [为Java 8，Maven 3和Tomcat 8配置Eclipse](part0081.xhtml#aid-2D7TI2 "为Java
    8，Maven 3和Tomcat 8配置Eclipse"), [如何做...](part0081.xhtml#aid-2D7TI2 "如何做...")
- en: configuring, for Tomcat 8 / [Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8](part0081.xhtml#aid-2D7TI2 "Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8"), [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-6669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Tomcat 8配置/ [为Java 8，Maven 3和Tomcat 8配置Eclipse](part0081.xhtml#aid-2D7TI2 "为Java
    8，Maven 3和Tomcat 8配置Eclipse"), [如何做...](part0081.xhtml#aid-2D7TI2 "如何做...")
- en: eclipse.ini file / [The eclipse.ini file](part0081.xhtml#aid-2D7TI2 "The eclipse.ini
    file")
  id: totrans-6670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eclipse.ini文件/ [eclipse.ini文件](part0081.xhtml#aid-2D7TI2 "eclipse.ini文件")
- en: -vm option, setting / [Setting the –vm option](part0081.xhtml#aid-2D7TI2 "Setting
    the –vm option")
  id: totrans-6671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -vm选项，设置/ [设置-vm选项](part0081.xhtml#aid-2D7TI2 "设置-vm选项")
- en: JVM arguments, customizing / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2
    "Customizing JVM arguments")
  id: totrans-6672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM参数，自定义/ [自定义JVM参数](part0081.xhtml#aid-2D7TI2 "自定义JVM参数")
- en: JDK compliance level, modifying / [Changing the JDK compliance level](part0081.xhtml#aid-2D7TI2
    "Changing the JDK compliance level")
  id: totrans-6673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK兼容级别，修改/ [更改JDK兼容级别](part0081.xhtml#aid-2D7TI2 "更改JDK兼容级别")
- en: Maven, configuring / [Configuring Maven](part0081.xhtml#aid-2D7TI2 "Configuring
    Maven")
  id: totrans-6674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven，配置/ [配置Maven](part0081.xhtml#aid-2D7TI2 "配置Maven")
- en: repository manager / [A repository manager](part0081.xhtml#aid-2D7TI2 "A repository
    manager")
  id: totrans-6675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库管理器/ [存储库管理器](part0081.xhtml#aid-2D7TI2 "存储库管理器")
- en: Tomcat 8, integrating / [Tomcat 8 inside Eclipse](part0081.xhtml#aid-2D7TI2
    "Tomcat 8 inside Eclipse")
  id: totrans-6676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat 8，集成/ [Eclipse中的Tomcat 8](part0081.xhtml#aid-2D7TI2 "Eclipse中的Tomcat
    8")
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  id: totrans-6677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [还有更多...](part0081.xhtml#aid-2D7TI2 "还有更多...")
- en: GIT, configuring / [Configuring GIT in Eclipse](part0085.xhtml#aid-2H1VQ2 "Configuring
    GIT in Eclipse"), [How it works...](part0085.xhtml#aid-2H1VQ2 "How it works...")
  id: totrans-6678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GIT，配置/ [在Eclipse中配置GIT](part0085.xhtml#aid-2H1VQ2 "在Eclipse中配置GIT"), [它是如何工作的...](part0085.xhtml#aid-2H1VQ2
    "它是如何工作的...")
- en: Eclipse.ini file
  id: totrans-6679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse.ini文件
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  id: totrans-6680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [还有更多...](part0081.xhtml#aid-2D7TI2 "还有更多...")
- en: eclipse.ini file
  id: totrans-6681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: eclipse.ini文件
- en: about / [The eclipse.ini file](part0081.xhtml#aid-2D7TI2 "The eclipse.ini file")
  id: totrans-6682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [eclipse.ini文件](part0081.xhtml#aid-2D7TI2 "eclipse.ini文件")
- en: URL / [The eclipse.ini file](part0081.xhtml#aid-2D7TI2 "The eclipse.ini file")
  id: totrans-6683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [eclipse.ini文件](part0081.xhtml#aid-2D7TI2 "eclipse.ini文件")
- en: Eclipse IDE
  id: totrans-6684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse IDE
- en: need for / [Why making use of the Eclipse IDE?](part0079.xhtml#aid-2BASE1 "Why
    making use of the Eclipse IDE?")
  id: totrans-6685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要/ [为什么要使用Eclipse IDE？](part0079.xhtml#aid-2BASE1 "为什么要使用Eclipse IDE？")
- en: downloading, for Java EE developers / [How to do it...](part0080.xhtml#aid-2C9D01
    "How to do it...")
  id: totrans-6686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载，适用于Java EE开发人员/ [如何做...](part0080.xhtml#aid-2C9D01 "如何做...")
- en: installing, for Java EE developers / [How to do it...](part0080.xhtml#aid-2C9D01
    "How to do it..."), [Eclipse for Java EE developers](part0080.xhtml#aid-2C9D01
    "Eclipse for Java EE developers")
  id: totrans-6687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装，适用于Java EE开发人员/ [如何做...](part0080.xhtml#aid-2C9D01 "如何做..."), [Eclipse for
    Java EE developers](part0080.xhtml#aid-2C9D01 "Eclipse for Java EE developers")
- en: URL / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  id: totrans-6688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [如何做...](part0080.xhtml#aid-2C9D01 "如何做...")
- en: JVM, selecting / [Choosing a JVM](part0080.xhtml#aid-2C9D01 "Choosing a JVM")
  id: totrans-6689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM，选择/ [选择JVM](part0080.xhtml#aid-2C9D01 "选择JVM")
- en: Java SE 8 / [Java SE 8](part0080.xhtml#aid-2C9D01 "Java SE 8")
  id: totrans-6690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 8/ [Java SE 8](part0080.xhtml#aid-2C9D01 "Java SE 8")
- en: EJB3 entities
  id: totrans-6691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EJB3实体
- en: defining / [Getting ready](part0093.xhtml#aid-2OM4A2 "Getting ready"), [How
    to do it...](part0093.xhtml#aid-2OM4A2 "How to do it..."), [How it works...](part0093.xhtml#aid-2OM4A2
    "How it works...")
  id: totrans-6692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义/ [准备就绪](part0093.xhtml#aid-2OM4A2 "准备就绪"), [如何做...](part0093.xhtml#aid-2OM4A2
    "如何做..."), [它是如何工作的...](part0093.xhtml#aid-2OM4A2 "它是如何工作的...")
- en: requisites / [Entity requirements](part0093.xhtml#aid-2OM4A2 "Entity requirements")
  id: totrans-6693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求/ [实体要求](part0093.xhtml#aid-2OM4A2 "实体要求")
- en: schema, mapping / [Mapping the schema](part0093.xhtml#aid-2OM4A2 "Mapping the
    schema")
  id: totrans-6694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式，映射/ [映射模式](part0093.xhtml#aid-2OM4A2 "映射模式")
- en: inheritance, defining / [Defining inheritance](part0093.xhtml#aid-2OM4A2 "Defining
    inheritance")
  id: totrans-6695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承，定义/ [定义继承](part0093.xhtml#aid-2OM4A2 "定义继承")
- en: relationships, defining / [Defining relationships](part0093.xhtml#aid-2OM4A2
    "Defining relationships")
  id: totrans-6696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系，定义/ [定义关系](part0093.xhtml#aid-2OM4A2 "定义关系")
- en: embedded databases
  id: totrans-6697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式数据库
- en: using / [Using embedded databases](part0045.xhtml#aid-1AT9A1 "Using embedded
    databases")
  id: totrans-6698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用嵌入式数据库](part0045.xhtml#aid-1AT9A1 "使用嵌入式数据库")
- en: EmbeddedServletContainerCustomizer interface
  id: totrans-6699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EmbeddedServletContainerCustomizer接口
- en: about / [Handling file upload errors](part0147.xhtml#aid-4C62M2 "Handling file
    upload errors")
  id: totrans-6700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [处理文件上传错误](part0147.xhtml#aid-4C62M2 "处理文件上传错误")
- en: URL / [Handling file upload errors](part0147.xhtml#aid-4C62M2 "Handling file
    upload errors")
  id: totrans-6701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [处理文件上传错误](part0147.xhtml#aid-4C62M2 "处理文件上传错误")
- en: Ember
  id: totrans-6702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember
- en: about / [The players](part0203.xhtml#aid-61J261 "The players")
  id: totrans-6703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [玩家](part0203.xhtml#aid-61J261 "玩家")
- en: Ember.js
  id: totrans-6704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.js
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks"), [Introducing
    Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-6705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架"), [介绍Ember.js](part0062.xhtml#aid-1R42S1
    "介绍Ember.js")
- en: Ember application
  id: totrans-6706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember应用程序
- en: anatomy / [The anatomy of an Ember application](part0063.xhtml#aid-1S2JE1 "The
    anatomy of an Ember application")
  id: totrans-6707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解剖学/ [Ember应用程序的解剖学](part0063.xhtml#aid-1S2JE1 "Ember应用程序的解剖学")
- en: router / [Routers](part0063.xhtml#aid-1S2JE1 "Routers")
  id: totrans-6708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器/ [路由器](part0063.xhtml#aid-1S2JE1 "路由器")
- en: routes or route handlers / [Routes or route handlers](part0063.xhtml#aid-1S2JE1
    "Routes or route handlers")
  id: totrans-6709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由或路由处理程序/ [路由或路由处理程序](part0063.xhtml#aid-1S2JE1 "路由或路由处理程序")
- en: templates / [Templates](part0063.xhtml#aid-1S2JE1 "Templates")
  id: totrans-6710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板/ [模板](part0063.xhtml#aid-1S2JE1 "模板")
- en: components / [Components](part0063.xhtml#aid-1S2JE1 "Components")
  id: totrans-6711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件/ [组件](part0063.xhtml#aid-1S2JE1 "组件")
- en: models / [Models](part0063.xhtml#aid-1S2JE1 "Models")
  id: totrans-6712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型/ [模型](part0063.xhtml#aid-1S2JE1 "模型")
- en: controllers / [Controllers](part0063.xhtml#aid-1S2JE1 "Controllers")
  id: totrans-6713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器/ [控制器](part0063.xhtml#aid-1S2JE1 "控制器")
- en: input helpers / [Input helpers](part0063.xhtml#aid-1S2JE1 "Input helpers")
  id: totrans-6714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入助手/ [输入助手](part0063.xhtml#aid-1S2JE1 "输入助手")
- en: custom helpers / [Custom helpers](part0063.xhtml#aid-1S2JE1 "Custom helpers")
  id: totrans-6715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义助手/ [自定义助手](part0063.xhtml#aid-1S2JE1 "自定义助手")
- en: initializers / [Initializers](part0063.xhtml#aid-1S2JE1 "Initializers")
  id: totrans-6716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化程序/ [初始化程序](part0063.xhtml#aid-1S2JE1 "初始化程序")
- en: services / [Services](part0063.xhtml#aid-1S2JE1 "Services")
  id: totrans-6717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务/ [服务](part0063.xhtml#aid-1S2JE1 "服务")
- en: Ember CLI
  id: totrans-6718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember CLI
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js"),
    [Working with Ember CLI](part0064.xhtml#aid-1T1402 "Working with Ember CLI")
  id: totrans-6719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js"), [使用Ember CLI](part0064.xhtml#aid-1T1402
    "使用Ember CLI")
- en: working with / [Working with Ember CLI](part0064.xhtml#aid-1T1402 "Working with
    Ember CLI")
  id: totrans-6720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用Ember CLI](part0064.xhtml#aid-1T1402 "使用Ember CLI")
- en: features / [Working with Ember CLI](part0064.xhtml#aid-1T1402 "Working with
    Ember CLI")
  id: totrans-6721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: features / [使用Ember CLI](part0064.xhtml#aid-1T1402 "使用Ember CLI")
- en: setting up / [Setting up Ember CLI](part0064.xhtml#aid-1T1402 "Setting up Ember
    CLI")
  id: totrans-6722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setting up / [设置Ember CLI](part0064.xhtml#aid-1T1402 "设置Ember CLI")
- en: commands / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: commands / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: project structure / [The Ember project structure](part0064.xhtml#aid-1T1402
    "The Ember project structure")
  id: totrans-6724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: project structure / [Ember项目结构](part0064.xhtml#aid-1T1402 "Ember项目结构")
- en: POD structure / [Working with the POD structure](part0064.xhtml#aid-1T1402 "Working
    with the POD structure")
  id: totrans-6725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POD structure / [使用POD结构](part0064.xhtml#aid-1T1402 "使用POD结构")
- en: Ember CLI commands
  id: totrans-6726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember CLI命令
- en: about / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: ember / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: ember new <appname> / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember new <appname> / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: ember init / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember init / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: ember build / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember build / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: ember server (or serve) / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember server (or serve) / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember
    CLI命令入门")
- en: ember generate <generatortype> <name> <options> / [Getting started with Ember
    CLI commands](part0064.xhtml#aid-1T1402 "Getting started with Ember CLI commands")
  id: totrans-6733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember generate <generatortype> <name> <options> / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402
    "使用Ember CLI命令入门")
- en: ember destroy <generatortype> <name> <options> / [Getting started with Ember
    CLI commands](part0064.xhtml#aid-1T1402 "Getting started with Ember CLI commands")
  id: totrans-6734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember destroy <generatortype> <name> <options> / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402
    "使用Ember CLI命令入门")
- en: ember test / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember test / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember CLI命令入门")
- en: ember install <addon-name> / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  id: totrans-6736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ember install <addon-name> / [使用Ember CLI命令入门](part0064.xhtml#aid-1T1402 "使用Ember
    CLI命令入门")
- en: Ember Data
  id: totrans-6737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember Data
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-6738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: data, persisting with / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1
    "Persisting data with Ember Data")
  id: totrans-6739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: data, persisting with / [使用Ember Data持久化数据](part0070.xhtml#aid-22O7C1 "使用Ember
    Data持久化数据")
- en: DS.Model / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1 "Persisting
    data with Ember Data")
  id: totrans-6740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DS.Model / [使用Ember Data持久化数据](part0070.xhtml#aid-22O7C1 "使用Ember Data持久化数据")
- en: DS.Store / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1 "Persisting
    data with Ember Data")
  id: totrans-6741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DS.Store / [使用Ember Data持久化数据](part0070.xhtml#aid-22O7C1 "使用Ember Data持久化数据")
- en: DS.Adapter / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1 "Persisting
    data with Ember Data")
  id: totrans-6742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DS.Adapter / [使用Ember Data持久化数据](part0070.xhtml#aid-22O7C1 "使用Ember Data持久化数据")
- en: DS.Serializer / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1
    "Persisting data with Ember Data")
  id: totrans-6743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DS.Serializer / [使用Ember Data持久化数据](part0070.xhtml#aid-22O7C1 "使用Ember Data持久化数据")
- en: architecture / [Ember Data architecture](part0070.xhtml#aid-22O7C1 "Ember Data
    architecture")
  id: totrans-6744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: architecture / [Ember Data架构](part0070.xhtml#aid-22O7C1 "Ember Data架构")
- en: models, building / [Defining models](part0070.xhtml#aid-22O7C1 "Defining models")
  id: totrans-6745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: models, building / [定义模型](part0070.xhtml#aid-22O7C1 "定义模型")
- en: model relationships, defining / [Defining model relationships](part0070.xhtml#aid-22O7C1
    "Defining model relationships")
  id: totrans-6746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: model relationships, defining / [定义模型关系](part0070.xhtml#aid-22O7C1 "定义模型关系")
- en: Ember development stack
  id: totrans-6747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember开发堆栈
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-6748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: Ember Inspector
  id: totrans-6749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember Inspector
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-6750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: Ember object model
  id: totrans-6751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember object model
- en: about / [Understanding the Ember object model](part0065.xhtml#aid-1TVKI1 "Understanding
    the Ember object model")
  id: totrans-6752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [理解Ember对象模型](part0065.xhtml#aid-1TVKI1 "理解Ember对象模型")
- en: types (classes), declaring / [Declaring types (classes) and instances](part0065.xhtml#aid-1TVKI1
    "Declaring types (classes) and instances")
  id: totrans-6753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: types (classes), declaring / [声明类型（类）和实例](part0065.xhtml#aid-1TVKI1 "声明类型（类）和实例")
- en: instances, declaring / [Declaring types (classes) and instances](part0065.xhtml#aid-1TVKI1
    "Declaring types (classes) and instances")
  id: totrans-6754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: instances, declaring / [声明类型（类）和实例](part0065.xhtml#aid-1TVKI1 "声明类型（类）和实例")
- en: properties, accessing / [Accessing and mutating properties](part0065.xhtml#aid-1TVKI1
    "Accessing and mutating properties")
  id: totrans-6755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: properties, accessing / [访问和修改属性](part0065.xhtml#aid-1TVKI1 "访问和修改属性")
- en: properties, mutating / [Accessing and mutating properties](part0065.xhtml#aid-1TVKI1
    "Accessing and mutating properties")
  id: totrans-6756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: properties, mutating / [访问和修改属性](part0065.xhtml#aid-1TVKI1 "访问和修改属性")
- en: computed properties / [Computed properties](part0065.xhtml#aid-1TVKI1 "Computed
    properties")
  id: totrans-6757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: computed properties / [计算属性](part0065.xhtml#aid-1TVKI1 "计算属性")
- en: property observers / [Property observers](part0065.xhtml#aid-1TVKI1 "Property
    observers")
  id: totrans-6758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: property observers / [属性观察者](part0065.xhtml#aid-1TVKI1 "属性观察者")
- en: collections, working with / [Working with collections](part0066.xhtml#aid-1UU541
    "Working with collections")
  id: totrans-6759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: collections, working with / [处理集合](part0066.xhtml#aid-1UU541 "处理集合")
- en: Ember.Array / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  id: totrans-6760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.Array / [使用集合](part0066.xhtml#aid-1UU541 "使用集合")
- en: Ember.ArrayProxy / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  id: totrans-6761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.ArrayProxy / [使用集合](part0066.xhtml#aid-1UU541 "使用集合")
- en: Ember.MutableArray / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  id: totrans-6762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.MutableArray / [使用集合](part0066.xhtml#aid-1UU541 "使用集合")
- en: Ember.Enumerable / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  id: totrans-6763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.Enumerable / [使用集合](part0066.xhtml#aid-1UU541 "使用集合")
- en: Ember.NativeArray / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  id: totrans-6764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.NativeArray / [使用集合](part0066.xhtml#aid-1UU541 "使用集合")
- en: Enterprise Edition (EE) / [AMQP or JMS?](part0121.xhtml#aid-3JCK22 "AMQP or
    JMS?")
  id: totrans-6765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业版（EE）/ [AMQP还是JMS？](part0121.xhtml#aid-3JCK22 "AMQP还是JMS？")
- en: enterprise integration (EAI)
  id: totrans-6766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业集成（EAI）
- en: about / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  id: totrans-6767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring子项目](part0012.xhtml#aid-BE6O1 "Spring子项目")
- en: Enterprise JavaBeans (EJB)
  id: totrans-6768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业JavaBean（EJB）
- en: about / [Introduction](part0091.xhtml#aid-2MP361 "Introduction")
  id: totrans-6769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [介绍](part0091.xhtml#aid-2MP361 "介绍")
- en: Enterprise Java Beans (EJB)
  id: totrans-6770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业JavaBean（EJB）
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  id: totrans-6771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring事务的相关性](part0051.xhtml#aid-1GKCM2 "Spring事务的相关性")
- en: entities
  id: totrans-6772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体
- en: about / [The Entities' benefits](part0091.xhtml#aid-2MP361 "The Entities' benefits")
  id: totrans-6773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [实体的好处](part0091.xhtml#aid-2MP361 "实体的好处")
- en: benefits / [The Entities' benefits](part0091.xhtml#aid-2MP361 "The Entities'
    benefits")
  id: totrans-6774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好处 / [实体的好处](part0091.xhtml#aid-2MP361 "实体的好处")
- en: entities, OAuth2
  id: totrans-6775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体，OAuth2
- en: resource owner / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  id: totrans-6776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源所有者 / [OAuth2授权框架](part0058.xhtml#aid-1NA0K2 "OAuth2授权框架")
- en: client or third-party application / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  id: totrans-6777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端或第三方应用程序 / [OAuth2授权框架](part0058.xhtml#aid-1NA0K2 "OAuth2授权框架")
- en: authorization server / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  id: totrans-6778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权服务器 / [OAuth2授权框架](part0058.xhtml#aid-1NA0K2 "OAuth2授权框架")
- en: resource server / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  id: totrans-6779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源服务器 / [OAuth2授权框架](part0058.xhtml#aid-1NA0K2 "OAuth2授权框架")
- en: entity manager
  id: totrans-6780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体管理器
- en: about / [The Entity manager and its persistence context](part0091.xhtml#aid-2MP361
    "The Entity manager and its persistence context")
  id: totrans-6781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [实体管理器及其持久性上下文](part0091.xhtml#aid-2MP361 "实体管理器及其持久性上下文")
- en: persistence context / [The Entity manager and its persistence context](part0091.xhtml#aid-2MP361
    "The Entity manager and its persistence context")
  id: totrans-6782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久性上下文 / [实体管理器及其持久性上下文](part0091.xhtml#aid-2MP361 "实体管理器及其持久性上下文")
- en: EntityManagerFactory bean
  id: totrans-6783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EntityManagerFactory bean
- en: about / [The EntityManagerFactory bean and its persistence unit](part0092.xhtml#aid-2NNJO2
    "The EntityManagerFactory bean and its persistence unit")
  id: totrans-6784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [EntityManagerFactory bean及其持久性单元](part0092.xhtml#aid-2NNJO2 "EntityManagerFactory
    bean及其持久性单元")
- en: Erlang
  id: totrans-6785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 厄尔朗
- en: URL / [How to do it…](part0120.xhtml#aid-3IE3G2 "How to do it…")
  id: totrans-6786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [如何做...](part0120.xhtml#aid-3IE3G2 "如何做...")
- en: error messages
  id: totrans-6787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误消息
- en: translating / [Translating the error messages](part0148.xhtml#aid-4D4J81 "Translating
    the error messages")
  id: totrans-6788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译 / [翻译错误消息](part0148.xhtml#aid-4D4J81 "翻译错误消息")
- en: ETag
  id: totrans-6789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ETag
- en: about / [See also](part0114.xhtml#aid-3CN042 "See also")
  id: totrans-6790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [另请参阅](part0114.xhtml#aid-3CN042 "另请参阅")
- en: ETags
  id: totrans-6791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ETags
- en: about / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
  id: totrans-6792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
- en: generating / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
  id: totrans-6793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成 / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
- en: using / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
  id: totrans-6794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
- en: exception handling
  id: totrans-6795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理
- en: about / [Status codes and exception handling](part0163.xhtml#aid-4REBM1 "Status
    codes and exception handling")
  id: totrans-6796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [状态码和异常处理](part0163.xhtml#aid-4REBM1 "状态码和异常处理")
- en: exceptions
  id: totrans-6797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常
- en: handling, in Spring Data layer / [Handling exceptions in the Spring Data layer](part0046.xhtml#aid-1BRPS1
    "Handling exceptions in the Spring Data layer")
  id: totrans-6798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring数据层处理 / [在Spring数据层处理异常](part0046.xhtml#aid-1BRPS1 "在Spring数据层处理异常")
- en: handling, globally / [Getting ready](part0099.xhtml#aid-2UD7M2 "Getting ready"),
    [How to do it...](part0099.xhtml#aid-2UD7M2 "How to do it..."), [How it works...](part0099.xhtml#aid-2UD7M2
    "How it works...")
  id: totrans-6799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局处理 / [准备工作](part0099.xhtml#aid-2UD7M2 "准备工作"), [如何做...](part0099.xhtml#aid-2UD7M2
    "如何做..."), [工作原理...](part0099.xhtml#aid-2UD7M2 "工作原理...")
- en: F
  id: totrans-6800
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: F
- en: fallback controller
  id: totrans-6801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备用控制器
- en: configuring, ViewResolver used / [Configuring a fallback controller using ViewResolver](part0086.xhtml#aid-2I0GC2
    "Configuring a fallback controller using ViewResolver"), [How to do it...](part0086.xhtml#aid-2I0GC2
    "How to do it...")
  id: totrans-6802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置，使用ViewResolver / [使用ViewResolver配置备用控制器](part0086.xhtml#aid-2I0GC2 "使用ViewResolver配置备用控制器"),
    [如何做...](part0086.xhtml#aid-2I0GC2 "如何做...")
- en: URI template patterns / [URI template patterns](part0086.xhtml#aid-2I0GC2 "URI
    template patterns")
  id: totrans-6803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI模板模式 / [URI模板模式](part0086.xhtml#aid-2I0GC2 "URI模板模式")
- en: ViewResolvers / [ViewResolvers](part0086.xhtml#aid-2I0GC2 "ViewResolvers")
  id: totrans-6804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ViewResolvers / [ViewResolvers](part0086.xhtml#aid-2I0GC2 "ViewResolvers")
- en: fallback option
  id: totrans-6805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备用选项
- en: using / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  id: totrans-6806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [Spring 4中STOMP over WebSocket和备用选项](part0054.xhtml#aid-1JFUC2 "Spring
    4中STOMP over WebSocket和备用选项")
- en: Fastboot
  id: totrans-6807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fastboot
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-6808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: feedEk jQuery plugin
  id: totrans-6809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: feedEk jQuery插件
- en: URL / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating responsive
    content")
  id: totrans-6810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [创建响应式内容](part0087.xhtml#aid-2IV0U2 "创建响应式内容")
- en: FetchType attribute
  id: totrans-6811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FetchType属性
- en: about / [The FetchType attribute](part0093.xhtml#aid-2OM4A2 "The FetchType attribute")
  id: totrans-6812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [FetchType属性](part0093.xhtml#aid-2OM4A2 "FetchType属性")
- en: file upload
  id: totrans-6813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件上传
- en: about / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a file")
  id: totrans-6814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [上传文件](part0147.xhtml#aid-4C62M2 "上传文件")
- en: profile picture, uploading / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading
    a file")
  id: totrans-6815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人资料图片，上传/ [上传文件](part0147.xhtml#aid-4C62M2 "上传文件")
- en: uploaded images, displaying on web page / [Writing an image to the response](part0147.xhtml#aid-4C62M2
    "Writing an image to the response")
  id: totrans-6816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传的图片，在网页上显示/ [将图像写入响应](part0147.xhtml#aid-4C62M2 "将图像写入响应")
- en: upload properties, managing / [Managing upload properties](part0147.xhtml#aid-4C62M2
    "Managing upload properties")
  id: totrans-6817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传属性，管理/ [管理上传属性](part0147.xhtml#aid-4C62M2 "管理上传属性")
- en: uploaded picture, displaying / [Displaying the uploaded picture](part0147.xhtml#aid-4C62M2
    "Displaying the uploaded picture")
  id: totrans-6818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传的图片，显示/ [显示上传的图片](part0147.xhtml#aid-4C62M2 "显示上传的图片")
- en: errors, handling / [Handling file upload errors](part0147.xhtml#aid-4C62M2 "Handling
    file upload errors")
  id: totrans-6819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误，处理/ [处理文件上传错误](part0147.xhtml#aid-4C62M2 "处理文件上传错误")
- en: implementation / [Putting it together](part0152.xhtml#aid-4GULG2 "Putting it
    together")
  id: totrans-6820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现/ [将其放在一起](part0152.xhtml#aid-4GULG2 "将其放在一起")
- en: check point / [The check point](part0153.xhtml#aid-4HT621 "The check point")
  id: totrans-6821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查点/ [检查点](part0153.xhtml#aid-4HT621 "检查点")
- en: file uploads
  id: totrans-6822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件上传
- en: handling / [Handling file uploads](part0040.xhtml#aid-164MG1 "Handling file
    uploads")
  id: totrans-6823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理/ [处理文件上传](part0040.xhtml#aid-164MG1 "处理文件上传")
- en: filtering
  id: totrans-6824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤
- en: about / [How to do it...](part0098.xhtml#aid-2TEN42 "How to do it..."), [How
    it works...](part0098.xhtml#aid-2TEN42 "How it works...")
  id: totrans-6825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [如何做...](part0098.xhtml#aid-2TEN42 "如何做..."), [它是如何工作的...](part0098.xhtml#aid-2TEN42
    "它是如何工作的...")
- en: FluentLenium
  id: totrans-6826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FluentLenium
- en: used, for acceptance tests / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2
    "Our first FluentLenium test")
  id: totrans-6827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于验收测试/ [我们的第一个FluentLenium测试](part0184.xhtml#aid-5FF7G2 "我们的第一个FluentLenium测试")
- en: about / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2 "Our first FluentLenium
    test")
  id: totrans-6828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [我们的第一个FluentLenium测试](part0184.xhtml#aid-5FF7G2 "我们的第一个FluentLenium测试")
- en: URL / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2 "Our first FluentLenium
    test")
  id: totrans-6829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [我们的第一个FluentLenium测试](part0184.xhtml#aid-5FF7G2 "我们的第一个FluentLenium测试")
- en: Page Objects / [Page Objects with FluentLenium](part0184.xhtml#aid-5FF7G2 "Page
    Objects with FluentLenium")
  id: totrans-6830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面对象/ [使用FluentLenium的页面对象](part0184.xhtml#aid-5FF7G2 "使用FluentLenium的页面对象")
- en: FlyWay
  id: totrans-6831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FlyWay
- en: used, for automating Database Migrations / [Automating Database Migrations with
    FlyWay](part0124.xhtml#aid-3M85O2 "Automating Database Migrations with FlyWay"),
    [How to do it…](part0124.xhtml#aid-3M85O2 "How to do it…")
  id: totrans-6832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于自动化数据库迁移/ [使用FlyWay自动化数据库迁移](part0124.xhtml#aid-3M85O2 "使用FlyWay自动化数据库迁移"),
    [如何做...](part0124.xhtml#aid-3M85O2 "如何做...")
- en: commands / [A limited number of commands](part0124.xhtml#aid-3M85O2 "A limited
    number of commands")
  id: totrans-6833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令/ [有限的命令数量](part0124.xhtml#aid-3M85O2 "有限的命令数量")
- en: maven plugin / [About Flyway Maven plugin](part0124.xhtml#aid-3M85O2 "About
    Flyway Maven plugin")
  id: totrans-6834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: maven插件/ [关于Flyway Maven插件](part0124.xhtml#aid-3M85O2 "关于Flyway Maven插件")
- en: configuration parameters, URL / [About Flyway Maven plugin](part0124.xhtml#aid-3M85O2
    "About Flyway Maven plugin")
  id: totrans-6835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置参数，URL/ [关于Flyway Maven插件](part0124.xhtml#aid-3M85O2 "关于Flyway Maven插件")
- en: official documentation / [The official documentation](part0124.xhtml#aid-3M85O2
    "The official documentation")
  id: totrans-6836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档/ [官方文档](part0124.xhtml#aid-3M85O2 "官方文档")
- en: GitHub repository, URL / [The official documentation](part0124.xhtml#aid-3M85O2
    "The official documentation")
  id: totrans-6837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub仓库，URL/ [官方文档](part0124.xhtml#aid-3M85O2 "官方文档")
- en: FlyWay, commands
  id: totrans-6838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FlyWay，命令
- en: about / [A limited number of commands](part0124.xhtml#aid-3M85O2 "A limited
    number of commands")
  id: totrans-6839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [有限的命令数量](part0124.xhtml#aid-3M85O2 "有限的命令数量")
- en: migrate / [Migrate](part0124.xhtml#aid-3M85O2 "Migrate")
  id: totrans-6840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移/ [迁移](part0124.xhtml#aid-3M85O2 "迁移")
- en: clean / [Clean](part0124.xhtml#aid-3M85O2 "Clean")
  id: totrans-6841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清洁/ [清洁](part0124.xhtml#aid-3M85O2 "清洁")
- en: info / [Info](part0124.xhtml#aid-3M85O2 "Info")
  id: totrans-6842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息/ [信息](part0124.xhtml#aid-3M85O2 "信息")
- en: validate / [Validate](part0124.xhtml#aid-3M85O2 "Validate")
  id: totrans-6843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证/ [验证](part0124.xhtml#aid-3M85O2 "验证")
- en: baseline / [Baseline](part0124.xhtml#aid-3M85O2 "Baseline")
  id: totrans-6844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基线/ [基线](part0124.xhtml#aid-3M85O2 "基线")
- en: G
  id: totrans-6845
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: G
- en: garbage collection
  id: totrans-6846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾收集
- en: reference link / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  id: totrans-6847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [还有更多...](part0081.xhtml#aid-2D7TI2 "还有更多...")
- en: GDAXI index code
  id: totrans-6848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GDAXI指数代码
- en: URL / [How to do it…](part0110.xhtml#aid-38STS2 "How to do it…")
  id: totrans-6849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [如何做...](part0110.xhtml#aid-38STS2 "如何做...")
- en: Geb
  id: totrans-6850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Geb
- en: used, for integration tests / [Integration tests with Geb](part0184.xhtml#aid-5FF7G2
    "Integration tests with Geb")
  id: totrans-6851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于集成测试/ [使用Geb进行集成测试](part0184.xhtml#aid-5FF7G2 "使用Geb进行集成测试")
- en: about / [Integration tests with Geb](part0184.xhtml#aid-5FF7G2 "Integration
    tests with Geb")
  id: totrans-6852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [使用Geb进行集成测试](part0184.xhtml#aid-5FF7G2 "使用Geb进行集成测试")
- en: Page Objects / [Page Objects with Geb](part0184.xhtml#aid-5FF7G2 "Page Objects
    with Geb")
  id: totrans-6853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面对象/ [使用Geb的页面对象](part0184.xhtml#aid-5FF7G2 "使用Geb的页面对象")
- en: reference link / [Page Objects with Geb](part0184.xhtml#aid-5FF7G2 "Page Objects
    with Geb")
  id: totrans-6854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [使用Geb的页面对象](part0184.xhtml#aid-5FF7G2 "使用Geb的页面对象")
- en: Git
  id: totrans-6855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: about / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a file")
  id: totrans-6856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [上传文件](part0147.xhtml#aid-4C62M2 "上传文件")
- en: empty directory / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a
    file")
  id: totrans-6857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空目录/ [上传文件](part0147.xhtml#aid-4C62M2 "上传文件")
- en: GIT
  id: totrans-6858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GIT
- en: installing / [Downloading and installing GIT](part0085.xhtml#aid-2H1VQ2 "Downloading
    and installing GIT")
  id: totrans-6859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装/ [下载和安装GIT](part0085.xhtml#aid-2H1VQ2 "下载和安装GIT")
- en: downloading / [Downloading and installing GIT](part0085.xhtml#aid-2H1VQ2 "Downloading
    and installing GIT")
  id: totrans-6860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载/ [下载和安装GIT](part0085.xhtml#aid-2H1VQ2 "下载和安装GIT")
- en: URL / [Downloading and installing GIT](part0085.xhtml#aid-2H1VQ2 "Downloading
    and installing GIT")
  id: totrans-6861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [下载和安装GIT](part0085.xhtml#aid-2H1VQ2 "下载和安装GIT")
- en: configuring, in Eclipse / [Configuring GIT in Eclipse](part0085.xhtml#aid-2H1VQ2
    "Configuring GIT in Eclipse")
  id: totrans-6862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中配置/ [在Eclipse中配置GIT](part0085.xhtml#aid-2H1VQ2 "在Eclipse中配置GIT")
- en: global transactions
  id: totrans-6863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局事务
- en: versus local transactions / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  id: totrans-6864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局与本地事务/ [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: reference link / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  id: totrans-6865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: Google protocol buffers
  id: totrans-6866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google协议缓冲区
- en: URL / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided HttpMessageConverters")
  id: totrans-6867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [提供的HttpMessageConverters](part0114.xhtml#aid-3CN042 "提供的HttpMessageConverters")
- en: Gradle
  id: totrans-6868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle
- en: configuration / [The Gradle configuration](part0184.xhtml#aid-5FF7G2 "The Gradle
    configuration")
  id: totrans-6869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 / [Gradle配置](part0184.xhtml#aid-5FF7G2 "Gradle配置")
- en: running / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
  id: totrans-6870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
- en: URL / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
  id: totrans-6871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
- en: GrantedAuthority interface
  id: totrans-6872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GrantedAuthority接口
- en: about / [The GrantedAuthority interface](part0103.xhtml#aid-3279U2 "The GrantedAuthority
    interface")
  id: totrans-6873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [GrantedAuthority接口](part0103.xhtml#aid-3279U2 "GrantedAuthority接口")
- en: Groovy
  id: totrans-6874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Groovy
- en: acceptance tests / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2
    "Making our tests more Groovy")
  id: totrans-6875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受测试/ [使我们的测试更加灵活](part0184.xhtml#aid-5FF7G2 "使我们的测试更加灵活")
- en: about / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making our
    tests more Groovy")
  id: totrans-6876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [使我们的测试更加灵活](part0184.xhtml#aid-5FF7G2 "使我们的测试更加灵活")
- en: URL / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making our tests
    more Groovy")
  id: totrans-6877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [使我们的测试更加灵活](part0184.xhtml#aid-5FF7G2 "使我们的测试更加灵活")
- en: Groovy Development Kit (GDK)
  id: totrans-6878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Groovy开发工具包（GDK）
- en: about / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making our
    tests more Groovy")
  id: totrans-6879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [使我们的测试更加灵活](part0184.xhtml#aid-5FF7G2 "使我们的测试更加灵活")
- en: Gzipping
  id: totrans-6880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gzipping
- en: about / [Gzipping](part0188.xhtml#aid-5J99O1 "Gzipping")
  id: totrans-6881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Gzipping](part0188.xhtml#aid-5J99O1 "Gzipping")
- en: reference link / [Gzipping](part0188.xhtml#aid-5J99O1 "Gzipping")
  id: totrans-6882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [Gzipping](part0188.xhtml#aid-5J99O1 "Gzipping")
- en: H
  id: totrans-6883
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: H
- en: HandlerMapping
  id: totrans-6884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HandlerMapping
- en: about / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
  id: totrans-6885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
- en: HAProxy
  id: totrans-6886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HAProxy
- en: URL / [Alternatives to Apache HTTP](part0102.xhtml#aid-318PC2 "Alternatives
    to Apache HTTP")
  id: totrans-6887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [替代Apache HTTP的选择](part0102.xhtml#aid-318PC2 "替代Apache HTTP的选择")
- en: headers
  id: totrans-6888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: reference link / [See also](part0114.xhtml#aid-3CN042 "See also")
  id: totrans-6889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [另请参阅](part0114.xhtml#aid-3CN042 "另请参阅")
- en: Heap memory
  id: totrans-6890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆内存
- en: Young generation / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing
    JVM arguments")
  id: totrans-6891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年轻一代 / [自定义JVM参数](part0081.xhtml#aid-2D7TI2 "自定义JVM参数")
- en: Old generation / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing
    JVM arguments")
  id: totrans-6892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧一代 / [自定义JVM参数](part0081.xhtml#aid-2D7TI2 "自定义JVM参数")
- en: Heroku
  id: totrans-6893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku
- en: about / [Heroku](part0196.xhtml#aid-5QTE81 "Heroku")
  id: totrans-6894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Heroku](part0196.xhtml#aid-5QTE81 "Heroku")
- en: web application, deploying / [Deploying your web application on Heroku](part0198.xhtml#aid-5SQFC2
    "Deploying your web application on Heroku")
  id: totrans-6895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序，部署 / [在Heroku上部署您的Web应用程序](part0198.xhtml#aid-5SQFC2 "在Heroku上部署您的Web应用程序")
- en: command-line tools, installing / [Installing the tools](part0198.xhtml#aid-5SQFC2
    "Installing the tools")
  id: totrans-6896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行工具，安装 / [安装工具](part0198.xhtml#aid-5SQFC2 "安装工具")
- en: URL / [Installing the tools](part0198.xhtml#aid-5SQFC2 "Installing the tools")
  id: totrans-6897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [安装工具](part0198.xhtml#aid-5SQFC2 "安装工具")
- en: web application, setting up / [Setting up the application](part0198.xhtml#aid-5SQFC2
    "Setting up the application")
  id: totrans-6898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序，设置 / [设置应用程序](part0198.xhtml#aid-5SQFC2 "设置应用程序")
- en: Gradle, running / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
  id: totrans-6899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Gradle / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
- en: Procfile, running / [Procfile](part0198.xhtml#aid-5SQFC2 "Procfile")
  id: totrans-6900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Procfile / [Procfile](part0198.xhtml#aid-5SQFC2 "Procfile")
- en: profile, creating / [A Heroku profile](part0198.xhtml#aid-5SQFC2 "A Heroku profile")
  id: totrans-6901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件，创建 / [一个Heroku配置文件](part0198.xhtml#aid-5SQFC2 "一个Heroku配置文件")
- en: web application, executing / [Running your application](part0198.xhtml#aid-5SQFC2
    "Running your application")
  id: totrans-6902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序，执行 / [运行您的应用程序](part0198.xhtml#aid-5SQFC2 "运行您的应用程序")
- en: Redis, activating / [Activating Redis](part0198.xhtml#aid-5SQFC2 "Activating
    Redis")
  id: totrans-6903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活Redis / [激活Redis](part0198.xhtml#aid-5SQFC2 "激活Redis")
- en: Heroku Redis add-on
  id: totrans-6904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku Redis附加组件
- en: URL / [Activating Redis](part0198.xhtml#aid-5SQFC2 "Activating Redis")
  id: totrans-6905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [激活Redis](part0198.xhtml#aid-5SQFC2 "激活Redis")
- en: Hibernate Query Language (HQL)
  id: totrans-6906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate查询语言（HQL）
- en: about / [Using JPQL](part0094.xhtml#aid-2PKKS2 "Using JPQL")
  id: totrans-6907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [使用JPQL](part0094.xhtml#aid-2PKKS2 "使用JPQL")
- en: HikariCP DataSource
  id: totrans-6908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HikariCP数据源
- en: about / [See also](part0092.xhtml#aid-2NNJO2 "See also")
  id: totrans-6909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [另请参阅](part0092.xhtml#aid-2NNJO2 "另请参阅")
- en: URL / [See also](part0092.xhtml#aid-2NNJO2 "See also")
  id: totrans-6910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0092.xhtml#aid-2NNJO2 "另请参阅")
- en: host
  id: totrans-6911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机
- en: alias / [An alias for the host](part0102.xhtml#aid-318PC2 "An alias for the
    host")
  id: totrans-6912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名 / [主机的别名](part0102.xhtml#aid-318PC2 "主机的别名")
- en: selecting / [Choosing your host](part0196.xhtml#aid-5QTE81 "Choosing your host")
  id: totrans-6913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 / [选择您的主机](part0196.xhtml#aid-5QTE81 "选择您的主机")
- en: Cloud Foundry / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
  id: totrans-6914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Foundry / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
- en: OpenShift / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
  id: totrans-6915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
- en: Heroku / [Heroku](part0196.xhtml#aid-5QTE81 "Heroku")
  id: totrans-6916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku / [Heroku](part0196.xhtml#aid-5QTE81 "Heroku")
- en: hosts aliasing / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  id: totrans-6917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机别名 / [DNS配置或主机别名](part0102.xhtml#aid-318PC2 "DNS配置或主机别名")
- en: HTML5/AngularJS
  id: totrans-6918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5/AngularJS
- en: client-side forms, validating / [Validating client-side forms with HTML5 AngularJS](part0117.xhtml#aid-3FIHQ2
    "Validating client-side forms with HTML5 AngularJS"), [How to do it…](part0117.xhtml#aid-3FIHQ2
    "How to do it…"), [How it works...](part0117.xhtml#aid-3FIHQ2 "How it works...")
  id: totrans-6919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端表单，验证 / [使用HTML5 AngularJS验证客户端表单](part0117.xhtml#aid-3FIHQ2 "使用HTML5 AngularJS验证客户端表单"),
    [如何做...](part0117.xhtml#aid-3FIHQ2 "如何做..."), [它是如何工作的...](part0117.xhtml#aid-3FIHQ2
    "它是如何工作的...")
- en: HTML document
  id: totrans-6920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML文档
- en: module autobootstrap / [Module autobootstrap](part0090.xhtml#aid-2LQIK2 "Module
    autobootstrap")
  id: totrans-6921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块自动引导 / [模块自动引导](part0090.xhtml#aid-2LQIK2 "模块自动引导")
- en: module autobootstrap, manual / [Manual module bootstrap](part0090.xhtml#aid-2LQIK2
    "Manual module bootstrap")
  id: totrans-6922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块自动引导，手动 / [手动模块引导](part0090.xhtml#aid-2LQIK2 "手动模块引导")
- en: HTTP/1.1 specifications
  id: totrans-6923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP/1.1规范
- en: reference link / [HTTP/1.1 specifications – RFC 7231 semantics and content](part0114.xhtml#aid-3CN042
    "HTTP/1.1 specifications – RFC 7231 semantics and content")
  id: totrans-6924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [HTTP/1.1规范-RFC 7231语义和内容](part0114.xhtml#aid-3CN042 "HTTP/1.1规范-RFC
    7231语义和内容")
- en: requisites / [Basic requirements](part0114.xhtml#aid-3CN042 "Basic requirements")
  id: totrans-6925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要条件/【基本要求】
- en: Safe methods / [Safe and Idempotent methods](part0114.xhtml#aid-3CN042 "Safe
    and Idempotent methods")
  id: totrans-6926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全方法/【安全和幂等方法】
- en: Idempotent methods / [Safe and Idempotent methods](part0114.xhtml#aid-3CN042
    "Safe and Idempotent methods")
  id: totrans-6927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幂等方法/【安全和幂等方法】
- en: method-specific constraints / [Other method-specific constraints](part0114.xhtml#aid-3CN042
    "Other method-specific constraints")
  id: totrans-6928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于方法的约束/【其他特定于方法的约束】
- en: HTTP codes
  id: totrans-6929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP代码
- en: about / [Useful HTTP codes](part0158.xhtml#aid-4MLOS1 "Useful HTTP codes")
  id: totrans-6930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【有用的HTTP代码】
- en: URL / [Useful HTTP codes](part0158.xhtml#aid-4MLOS1 "Useful HTTP codes")
  id: totrans-6931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/【有用的HTTP代码】
- en: HTTP connectors / [HTTP connectors](part0102.xhtml#aid-318PC2 "HTTP connectors")
  id: totrans-6932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP连接器/【HTTP连接器】
- en: URL / [See also](part0102.xhtml#aid-318PC2 "See also")
  id: totrans-6933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/【另请参阅】
- en: httpie
  id: totrans-6934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: httpie
- en: about / [httpie](part0160.xhtml#aid-4OIQ01 "httpie")
  id: totrans-6935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【httpie】
- en: HttpMessageConverters
  id: totrans-6936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HttpMessageConverters
- en: using / [HttpMessageConverters](part0114.xhtml#aid-3CN042 "HttpMessageConverters")
  id: totrans-6937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/【HttpMessageConverters】
- en: native HttpMessageConverters / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042
    "Provided HttpMessageConverters")
  id: totrans-6938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本机HttpMessageConverters/【提供的HttpMessageConverters】
- en: MappingJackson2HttpMessageConverter, using / [Using MappingJackson2HttpMessageConverter](part0114.xhtml#aid-3CN042
    "Using MappingJackson2HttpMessageConverter")
  id: totrans-6939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MappingJackson2HttpMessageConverter，使用/【使用MappingJackson2HttpMessageConverter】
- en: HTTP methods
  id: totrans-6940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP方法
- en: REST handlers, extending to / [Extending REST handlers to all HTTP methods](part0114.xhtml#aid-3CN042
    "Extending REST handlers to all HTTP methods"), [How to do it…](part0114.xhtml#aid-3CN042
    "How to do it…"), [How it works...](part0114.xhtml#aid-3CN042 "How it works...")
  id: totrans-6941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST处理程序，扩展到/【将REST处理程序扩展到所有HTTP方法】，【如何做…】，【它是如何工作的…】
- en: HTTP sessions
  id: totrans-6942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP会话
- en: profile, storing / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2
    "Placing the profile in a session")
  id: totrans-6943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件，存储/【将配置文件放入会话中】
- en: about / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2 "Placing
    the profile in a session")
  id: totrans-6944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【将配置文件放入会话中】
- en: HTTP Status Codes / [HTTP Status Codes](part0099.xhtml#aid-2UD7M2 "HTTP Status
    Codes")
  id: totrans-6945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP状态码/【HTTP状态码】
- en: HTTP verbs
  id: totrans-6946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP动词
- en: GET / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取/【级别2 - HTTP动词】
- en: HEAD / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头/【级别2 - HTTP动词】
- en: DELETE / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除/【级别2 - HTTP动词】
- en: PUT / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置/【级别2 - HTTP动词】
- en: POST / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布/【级别2 - HTTP动词】
- en: PATCH / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PATCH/【级别2 - HTTP动词】
- en: OPTIONS / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  id: totrans-6953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项/【级别2 - HTTP动词】
- en: hypermedia-driven API
  id: totrans-6954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超媒体驱动的API
- en: links, building / [Building links for a hypermedia-driven API](part0110.xhtml#aid-38STS2
    "Building links for a hypermedia-driven API"), [How to do it…](part0110.xhtml#aid-38STS2
    "How to do it…"), [How it works...](part0110.xhtml#aid-38STS2 "How it works..."),
    [Building links](part0110.xhtml#aid-38STS2 "Building links")
  id: totrans-6955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接，构建/【为超媒体驱动的API构建链接】，【如何做…】，【它是如何工作的…】，【构建链接】
- en: resource assemblers / [Resource assemblers](part0110.xhtml#aid-38STS2 "Resource
    assemblers")
  id: totrans-6956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源装配器/【资源装配器】
- en: PagedResourcesAssembler / [PagedResourcesAssembler](part0110.xhtml#aid-38STS2
    "PagedResourcesAssembler")
  id: totrans-6957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PagedResourcesAssembler/【PagedResourcesAssembler】
- en: EntityLinks / [EntityLinks](part0110.xhtml#aid-38STS2 "EntityLinks")
  id: totrans-6958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EntityLinks/【EntityLinks】
- en: ControllerLinkBuilder / [ControllerLinkBuilder](part0110.xhtml#aid-38STS2 "ControllerLinkBuilder")
  id: totrans-6959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ControllerLinkBuilder/【ControllerLinkBuilder】
- en: regular expression, in @RequestMapping / [The use of regular expressions in
    @RequestMapping](part0110.xhtml#aid-38STS2 "The use of regular expressions in
    @RequestMapping")
  id: totrans-6960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestMapping中的正则表达式/【在@RequestMapping中使用正则表达式】'
- en: Hypermedia as the Engine of Application State (HATEOAS)
  id: totrans-6961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超媒体作为应用程序状态的引擎（HATEOAS）
- en: about / [Introduction](part0108.xhtml#aid-36VSO1 "Introduction")
  id: totrans-6962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【介绍】
- en: Hypertext Application Language (HAL)
  id: totrans-6963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超文本应用语言（HAL）
- en: URL / [See also](part0110.xhtml#aid-38STS2 "See also")
  id: totrans-6964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/【另请参阅】
- en: Hypertext As The Engine Of Application State (HATEOAS)
  id: totrans-6965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序状态的超文本作为引擎（HATEOAS）
- en: about / [Level 3 – Hypermedia controls](part0156.xhtml#aid-4KONO2 "Level 3 –
    Hypermedia controls")
  id: totrans-6966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【级别3 - 超媒体控件】
- en: I
  id: totrans-6967
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我
- en: iconmonstr
  id: totrans-6968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iconmonstr
- en: URL / [Writing an image to the response](part0147.xhtml#aid-4C62M2 "Writing
    an image to the response")
  id: totrans-6969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/【将图像写入响应】
- en: IDE (Integrated Development Environment)
  id: totrans-6970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE（集成开发环境）
- en: about / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1 "Spring Tool Suite
    (STS)")
  id: totrans-6971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【Spring工具套件（STS）】
- en: identifier
  id: totrans-6972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符
- en: about / [Entity requirements](part0093.xhtml#aid-2OM4A2 "Entity requirements")
  id: totrans-6973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/【实体要求】
- en: ID exposure
  id: totrans-6974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ID暴露
- en: URL / [See also](part0109.xhtml#aid-37UDA2 "See also")
  id: totrans-6975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/【另请参阅】
- en: info command / [Info](part0124.xhtml#aid-3M85O2 "Info")
  id: totrans-6976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息命令/ [信息](part0124.xhtml#aid-3M85O2 "信息")
- en: inheritance, EJB3 entities
  id: totrans-6977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承，EJB3实体
- en: defining / [Defining inheritance](part0093.xhtml#aid-2OM4A2 "Defining inheritance")
  id: totrans-6978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义/ [定义继承](part0093.xhtml#aid-2OM4A2 "定义继承")
- en: Single-table strategy / [The single-table strategy](part0093.xhtml#aid-2OM4A2
    "The single-table strategy")
  id: totrans-6979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单表策略/ [单表策略](part0093.xhtml#aid-2OM4A2 "单表策略")
- en: Table-per-class strategy / [The table-per-class strategy](part0093.xhtml#aid-2OM4A2
    "The table-per-class strategy")
  id: totrans-6980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按类策略/ [按类策略](part0093.xhtml#aid-2OM4A2 "按类策略")
- en: inheritance, of Maven dependencies
  id: totrans-6981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承，Maven依赖
- en: about / [Inheritance of Maven dependencies](part0083.xhtml#aid-2F4UM2 "Inheritance
    of Maven dependencies")
  id: totrans-6982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Maven依赖的继承](part0083.xhtml#aid-2F4UM2 "Maven依赖的继承")
- en: basic inheritance / [Basic inheritance](part0083.xhtml#aid-2F4UM2 "Basic inheritance")
  id: totrans-6983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本继承/ [基本继承](part0083.xhtml#aid-2F4UM2 "基本继承")
- en: managed inheritance / [Managed inheritance](part0083.xhtml#aid-2F4UM2 "Managed
    inheritance")
  id: totrans-6984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理继承/ [管理继承](part0083.xhtml#aid-2F4UM2 "管理继承")
- en: integration tests
  id: totrans-6985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: Spring Beans, injecting / [Injecting Spring Beans into integration tests](part0127.xhtml#aid-3P3NE2
    "Injecting Spring Beans into integration tests"), [How to do it…](part0127.xhtml#aid-3P3NE2
    "How to do it…")
  id: totrans-6986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Beans，注入/ [将Spring Beans注入集成测试](part0127.xhtml#aid-3P3NE2 "将Spring Beans注入集成测试"),
    [如何做...](part0127.xhtml#aid-3P3NE2 "如何做...")
- en: with Geb / [Integration tests with Geb](part0184.xhtml#aid-5FF7G2 "Integration
    tests with Geb")
  id: totrans-6987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Geb/ [使用Geb进行集成测试](part0184.xhtml#aid-5FF7G2 "使用Geb进行集成测试")
- en: Interceptors
  id: totrans-6988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拦截器
- en: about / [Changing the locale](part0143.xhtml#aid-48C0E2 "Changing the locale")
  id: totrans-6989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [更改区域设置](part0143.xhtml#aid-48C0E2 "更改区域设置")
- en: internationalization (i18n)
  id: totrans-6990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化（i18n）
- en: about / [Internationalization](part0143.xhtml#aid-48C0E2 "Internationalization")
  id: totrans-6991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [国际化](part0143.xhtml#aid-48C0E2 "国际化")
- en: locale, modifying / [Changing the locale](part0143.xhtml#aid-48C0E2 "Changing
    the locale")
  id: totrans-6992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域设置，修改/ [更改区域设置](part0143.xhtml#aid-48C0E2 "更改区域设置")
- en: application text, translating / [Translating the application text](part0143.xhtml#aid-48C0E2
    "Translating the application text")
  id: totrans-6993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用文本，翻译/ [翻译应用文本](part0143.xhtml#aid-48C0E2 "翻译应用文本")
- en: data list, handling in form / [A list in a form](part0143.xhtml#aid-48C0E2 "A
    list in a form")
  id: totrans-6994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据列表，在表单中处理/ [表单中的列表](part0143.xhtml#aid-48C0E2 "表单中的列表")
- en: Internet of Things (IoT) / [Microservice architectures](part0084.xhtml#aid-2G3F81
    "Microservice architectures")
  id: totrans-6995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网（IoT）/ [微服务架构](part0084.xhtml#aid-2G3F81 "微服务架构")
- en: Internet Service Provider (ISP) / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  id: totrans-6996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网服务提供商（ISP）/ [DNS配置或主机别名](part0102.xhtml#aid-318PC2 "DNS配置或主机别名")
- en: Inversion of Control(IOC)
  id: totrans-6997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制反转（IOC）
- en: about / [What does the Spring Framework bring?](part0079.xhtml#aid-2BASE1 "What
    does the Spring Framework bring?")
  id: totrans-6998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Spring框架带来了什么？](part0079.xhtml#aid-2BASE1 "Spring框架带来了什么？")
- en: Inversion of Control (IoC) container / [The Spring Framework modules](part0012.xhtml#aid-BE6O1
    "The Spring Framework modules")
  id: totrans-6999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制反转（IoC）容器/ [Spring框架模块](part0012.xhtml#aid-BE6O1 "Spring框架模块")
- en: J
  id: totrans-7000
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: J
- en: Jackson 2.x extension component
  id: totrans-7001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jackson 2.x扩展组件
- en: URL / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided HttpMessageConverters")
  id: totrans-7002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [提供的HttpMessageConverters](part0114.xhtml#aid-3CN042 "提供的HttpMessageConverters")
- en: JaCoCo
  id: totrans-7003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JaCoCo
- en: URL / [See also](part0125.xhtml#aid-3N6MA2 "See also")
  id: totrans-7004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [另请参阅](part0125.xhtml#aid-3N6MA2 "另请参阅")
- en: jar
  id: totrans-7005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jar
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  id: totrans-7006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [准备就绪](part0082.xhtml#aid-2E6E42 "准备就绪")
- en: jar dependency
  id: totrans-7007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jar依赖
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  id: totrans-7008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [准备就绪](part0082.xhtml#aid-2E6E42 "准备就绪")
- en: jar module
  id: totrans-7009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jar模块
- en: name, selecting / [How did we choose the jar module's name?](part0082.xhtml#aid-2E6E42
    "How did we choose the jar module's name?")
  id: totrans-7010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择名称/ [我们如何选择jar模块的名称？](part0082.xhtml#aid-2E6E42 "我们如何选择jar模块的名称？")
- en: Java 8
  id: totrans-7011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 8
- en: Eclipse, configuring / [Getting ready](part0081.xhtml#aid-2D7TI2 "Getting ready"),
    [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-7012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse，配置/ [准备就绪](part0081.xhtml#aid-2D7TI2 "准备就绪"), [如何做...](part0081.xhtml#aid-2D7TI2
    "如何做...")
- en: streams / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  id: totrans-7013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流/ [Java 8流和lambda表达式](part0137.xhtml#aid-42KT21 "Java 8流和lambda表达式")
- en: lambdas / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  id: totrans-7014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lambda表达式/ [Java 8流和lambda表达式](part0137.xhtml#aid-42KT21 "Java 8流和lambda表达式")
- en: Java 8 date time API
  id: totrans-7015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 8日期时间API
- en: reference link / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The
    profile page – a form")
  id: totrans-7016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: Java Activation Framework (JAF)
  id: totrans-7017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java激活框架（JAF）
- en: about / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided
    HttpMessageConverters")
  id: totrans-7018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [提供的HttpMessageConverters](part0114.xhtml#aid-3CN042 "提供的HttpMessageConverters")
- en: JavaBeans components / [Rendering variables with the JSP EL](part0088.xhtml#aid-2JTHG2
    "Rendering variables with the JSP EL")
  id: totrans-7019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaBeans组件/ [使用JSP EL呈现变量](part0088.xhtml#aid-2JTHG2 "使用JSP EL呈现变量")
- en: JavaBeans standard
  id: totrans-7020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaBeans标准
- en: URL / [More about the JavaBeans standard](part0088.xhtml#aid-2JTHG2 "More about
    the JavaBeans standard")
  id: totrans-7021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [关于JavaBeans标准的更多信息](part0088.xhtml#aid-2JTHG2 "关于JavaBeans标准的更多信息")
- en: JavaDoc
  id: totrans-7022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaDoc
- en: URL / [More features offered by WebContentGenerator](part0089.xhtml#aid-2KS222
    "More features offered by WebContentGenerator"), [Using a JAXB2 implementation
    as an XML parser](part0097.xhtml#aid-2SG6I2 "Using a JAXB2 implementation as an
    XML parser")
  id: totrans-7023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [WebContentGenerator提供的更多功能](part0089.xhtml#aid-2KS222 "WebContentGenerator提供的更多功能"),
    [使用JAXB2实现作为XML解析器](part0097.xhtml#aid-2SG6I2 "使用JAXB2实现作为XML解析器")
- en: Java EE tutorial
  id: totrans-7024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE教程
- en: URL / [Rendering variables with the JSTL](part0088.xhtml#aid-2JTHG2 "Rendering
    variables with the JSTL")
  id: totrans-7025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [使用JSTL呈现变量](part0088.xhtml#aid-2JTHG2 "使用JSTL呈现变量")
- en: Java Persistence API (JPA)
  id: totrans-7026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久化API（JPA）
- en: about / [Introduction](part0091.xhtml#aid-2MP361 "Introduction")
  id: totrans-7027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [介绍](part0091.xhtml#aid-2MP361 "介绍")
- en: configuring, in Spring / [Configuring the Java Persistence API in Spring](part0092.xhtml#aid-2NNJO2
    "Configuring the Java Persistence API in Spring"), [How to do it...](part0092.xhtml#aid-2NNJO2
    "How to do it..."), [How it works...](part0092.xhtml#aid-2NNJO2 "How it works...")
  id: totrans-7028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring中配置 / [在Spring中配置Java持久化API](part0092.xhtml#aid-2NNJO2 "在Spring中配置Java持久化API"),
    [如何做...](part0092.xhtml#aid-2NNJO2 "如何做..."), [它是如何工作的...](part0092.xhtml#aid-2NNJO2
    "它是如何工作的...")
- en: Spring-managed DataSource bean / [The Spring-managed DataSource bean](part0092.xhtml#aid-2NNJO2
    "The Spring-managed DataSource bean")
  id: totrans-7029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring管理的DataSource bean / [Spring管理的DataSource bean](part0092.xhtml#aid-2NNJO2
    "Spring管理的DataSource bean")
- en: EntityManagerFactory bean, configuring / [The EntityManagerFactory bean and
    its persistence unit](part0092.xhtml#aid-2NNJO2 "The EntityManagerFactory bean
    and its persistence unit")
  id: totrans-7030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EntityManagerFactory bean，配置 / [EntityManagerFactory bean及其持久化单元](part0092.xhtml#aid-2NNJO2
    "EntityManagerFactory bean及其持久化单元")
- en: persistence unit, configuring / [The EntityManagerFactory bean and its persistence
    unit](part0092.xhtml#aid-2NNJO2 "The EntityManagerFactory bean and its persistence
    unit")
  id: totrans-7031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化单元，配置 / [EntityManagerFactory bean及其持久化单元](part0092.xhtml#aid-2NNJO2 "EntityManagerFactory
    bean及其持久化单元")
- en: Spring Data JPA, configuring / [The Spring Data JPA configuration](part0092.xhtml#aid-2NNJO2
    "The Spring Data JPA configuration")
  id: totrans-7032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA，配置 / [Spring Data JPA配置](part0092.xhtml#aid-2NNJO2 "Spring Data
    JPA配置")
- en: using / [Making use of the JPA and Spring Data JPA](part0094.xhtml#aid-2PKKS2
    "Making use of the JPA and Spring Data JPA"), [How to do it...](part0094.xhtml#aid-2PKKS2
    "How to do it..."), [How it works...](part0094.xhtml#aid-2PKKS2 "How it works...")
  id: totrans-7033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [利用JPA和Spring Data JPA](part0094.xhtml#aid-2PKKS2 "利用JPA和Spring Data JPA"),
    [如何做...](part0094.xhtml#aid-2PKKS2 "如何做..."), [它是如何工作的...](part0094.xhtml#aid-2PKKS2
    "它是如何工作的...")
- en: Java Persistence Query Language (JPQL)
  id: totrans-7034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久化查询语言（JPQL）
- en: using / [Using JPQL](part0094.xhtml#aid-2PKKS2 "Using JPQL")
  id: totrans-7035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [使用JPQL](part0094.xhtml#aid-2PKKS2 "使用JPQL")
- en: reference link / [Using JPQL](part0094.xhtml#aid-2PKKS2 "Using JPQL")
  id: totrans-7036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [使用JPQL](part0094.xhtml#aid-2PKKS2 "使用JPQL")
- en: Java SE 8
  id: totrans-7037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 8
- en: using / [Java SE 8](part0080.xhtml#aid-2C9D01 "Java SE 8")
  id: totrans-7038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [Java SE 8](part0080.xhtml#aid-2C9D01 "Java SE 8")
- en: Java Server Pages (JSP)
  id: totrans-7039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java服务器页面（JSP）
- en: about / [Resolving JSP views](part0036.xhtml#aid-12AK81 "Resolving JSP views")
  id: totrans-7040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [解析JSP视图](part0036.xhtml#aid-12AK81 "解析JSP视图")
- en: Java Server Pages Tag Library (JSTL)
  id: totrans-7041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java服务器页面标签库（JSTL）
- en: about / [Resolving JSP views](part0036.xhtml#aid-12AK81 "Resolving JSP views")
  id: totrans-7042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [解析JSP视图](part0036.xhtml#aid-12AK81 "解析JSP视图")
- en: Java Server Tags Library (JSTL)
  id: totrans-7043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java服务器标签库（JSTL）
- en: used for displaying, model in view / [Displaying a model in the View, using
    the JSTL](part0088.xhtml#aid-2JTHG2 "Displaying a model in the View, using the
    JSTL"), [How to do it...](part0088.xhtml#aid-2JTHG2 "How to do it..."), [How it
    works...](part0088.xhtml#aid-2JTHG2 "How it works...")
  id: totrans-7044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在视图中显示模型 / [在视图中显示模型，使用JSTL](part0088.xhtml#aid-2JTHG2 "在视图中显示模型，使用JSTL"),
    [如何做...](part0088.xhtml#aid-2JTHG2 "如何做..."), [它是如何工作的...](part0088.xhtml#aid-2JTHG2
    "它是如何工作的...")
- en: URL / [More about the JSTL](part0088.xhtml#aid-2JTHG2 "More about the JSTL")
  id: totrans-7045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [更多关于JSTL](part0088.xhtml#aid-2JTHG2 "更多关于JSTL")
- en: Java Util Logging Adapters / [Java Util Logging Adapters](part0128.xhtml#aid-3Q2802
    "Java Util Logging Adapters")
  id: totrans-7046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Util日志适配器 / [Java Util日志适配器](part0128.xhtml#aid-3Q2802 "Java Util日志适配器")
- en: JAXB2 implementation
  id: totrans-7047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAXB2实现
- en: using, as XML parser / [Using a JAXB2 implementation as an XML parser](part0097.xhtml#aid-2SG6I2
    "Using a JAXB2 implementation as an XML parser")
  id: totrans-7048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为XML解析器使用 / [将JAXB2实现作为XML解析器使用](part0097.xhtml#aid-2SG6I2 "将JAXB2实现作为XML解析器使用")
- en: JDBC operations
  id: totrans-7049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDBC操作
- en: with Sql* classes / [JDBC operations with Sql* classes](part0048.xhtml#aid-1DOR02
    "JDBC operations with Sql* classes")
  id: totrans-7050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sql*类 / [使用Sql*类进行JDBC操作](part0048.xhtml#aid-1DOR02 "使用Sql*类进行JDBC操作")
- en: components / [JDBC operations with Sql* classes](part0048.xhtml#aid-1DOR02 "JDBC
    operations with Sql* classes")
  id: totrans-7051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件 / [使用Sql*类进行JDBC操作](part0048.xhtml#aid-1DOR02 "使用Sql*类进行JDBC操作")
- en: JdbcTemplate
  id: totrans-7052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JdbcTemplate
- en: methods / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  id: totrans-7053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法 / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
- en: callback interfaces / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  id: totrans-7054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调接口 / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
- en: NamedParameterJdbcTemplate / [NamedParameterJdbcTemplate](part0048.xhtml#aid-1DOR02
    "NamedParameterJdbcTemplate")/ [JdbcTemplate](part0127.xhtml#aid-3P3NE2 "JdbcTemplate")
  id: totrans-7055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NamedParameterJdbcTemplate / [NamedParameterJdbcTemplate](part0048.xhtml#aid-1DOR02
    "NamedParameterJdbcTemplate")/ [JdbcTemplate](part0127.xhtml#aid-3P3NE2 "JdbcTemplate")
- en: JDK 8
  id: totrans-7056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 8
- en: installing / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  id: totrans-7057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 / [如何做...](part0080.xhtml#aid-2C9D01 "如何做...")
- en: JDK compliance level
  id: totrans-7058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK兼容级别
- en: modifying / [Changing the JDK compliance level](part0081.xhtml#aid-2D7TI2 "Changing
    the JDK compliance level")
  id: totrans-7059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 / [更改JDK兼容级别](part0081.xhtml#aid-2D7TI2 "更改JDK兼容级别")
- en: JMS
  id: totrans-7060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMS
- en: about / [AMQP or JMS?](part0121.xhtml#aid-3JCK22 "AMQP or JMS?")
  id: totrans-7061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [AMQP还是JMS？](part0121.xhtml#aid-3JCK22 "AMQP还是JMS？")
- en: Joined-table inheritance strategy
  id: totrans-7062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联接表继承策略
- en: about / [See also](part0093.xhtml#aid-2OM4A2 "See also")
  id: totrans-7063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [另请参阅](part0093.xhtml#aid-2OM4A2 "另请参阅")
- en: JOTM
  id: totrans-7064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JOTM
- en: URL / [Global versus local transactions](part0114.xhtml#aid-3CN042 "Global versus
    local transactions")
  id: totrans-7065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: JPA (Java Persistence Architecture)
  id: totrans-7066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA（Java持久化架构）
- en: about / [Spring Data JPA](part0049.xhtml#aid-1ENBI2 "Spring Data JPA")
  id: totrans-7067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring Data JPA](part0049.xhtml#aid-1ENBI2 "Spring Data JPA")
- en: JPA entities
  id: totrans-7068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA实体
- en: strategy, selecting to expose / [Choosing a strategy to expose JPA Entities](part0111.xhtml#aid-39REE2
    "Choosing a strategy to expose JPA Entities"), [How to do it…](part0111.xhtml#aid-39REE2
    "How to do it…"), [How it works...](part0111.xhtml#aid-39REE2 "How it works...")
  id: totrans-7069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择公开的策略 / [选择公开JPA实体的策略](part0111.xhtml#aid-39REE2 "选择公开JPA实体的策略"), [如何做...](part0111.xhtml#aid-39REE2
    "如何做..."), [它是如何工作的...](part0111.xhtml#aid-39REE2 "它是如何工作的...")
- en: REST CRUD principle / [The REST CRUD principle](part0111.xhtml#aid-39REE2 "The
    REST CRUD principle")
  id: totrans-7070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST CRUD原则 / [REST CRUD原则](part0111.xhtml#aid-39REE2 "REST CRUD原则")
- en: minimum information, exposing / [Exposing the minimum](part0111.xhtml#aid-39REE2
    "Exposing the minimum"), [If the Entity owns the relationship](part0111.xhtml#aid-39REE2
    "If the Entity owns the relationship")
  id: totrans-7071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小信息，暴露/ [暴露最小信息](part0111.xhtml#aid-39REE2 "暴露最小信息"), [如果实体拥有关系](part0111.xhtml#aid-39REE2
    "如果实体拥有关系")
- en: separation of resources / [Separation of resources](part0111.xhtml#aid-39REE2
    "Separation of resources")
  id: totrans-7072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源分离/ [资源分离](part0111.xhtml#aid-39REE2 "资源分离")
- en: JSON output
  id: totrans-7073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON输出
- en: customizing / [Customizing the JSON output](part0161.xhtml#aid-4PHAI2 "Customizing
    the JSON output")
  id: totrans-7074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义/ [自定义JSON输出](part0161.xhtml#aid-4PHAI2 "自定义JSON输出")
- en: JSP EL
  id: totrans-7075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP EL
- en: URL / [More about JSP EL](part0088.xhtml#aid-2JTHG2 "More about JSP EL")
  id: totrans-7076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [更多关于JSP EL](part0088.xhtml#aid-2JTHG2 "更多关于JSP EL")
- en: JSP Expression Language (JSP EL) / [Getting ready](part0088.xhtml#aid-2JTHG2
    "Getting ready")
  id: totrans-7077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP表达式语言（JSP EL）/ [准备就绪](part0088.xhtml#aid-2JTHG2 "准备就绪")
- en: about / [Getting ready](part0088.xhtml#aid-2JTHG2 "Getting ready")
  id: totrans-7078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [准备就绪](part0088.xhtml#aid-2JTHG2 "准备就绪")
- en: JSPs
  id: totrans-7079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP
- en: Taglib directives / [Taglib directives in JSPs](part0088.xhtml#aid-2JTHG2 "Taglib
    directives in JSPs")
  id: totrans-7080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taglib指令/ [JSP中的Taglib指令](part0088.xhtml#aid-2JTHG2 "JSP中的Taglib指令")
- en: JSP Standard Tag Library (JSTL)
  id: totrans-7081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP标准标签库（JSTL）
- en: about / [Rendering variables with the JSTL](part0088.xhtml#aid-2JTHG2 "Rendering
    variables with the JSTL")
  id: totrans-7082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [使用JSTL呈现变量](part0088.xhtml#aid-2JTHG2 "使用JSTL呈现变量")
- en: JSR-250
  id: totrans-7083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-250
- en: about / [JSR-250 and legacy method security](part0107.xhtml#aid-361C62 "JSR-250
    and legacy method security")
  id: totrans-7084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [JSR-250和遗留方法安全](part0107.xhtml#aid-361C62 "JSR-250和遗留方法安全")
- en: JSR-303/JSR-349 bean validation
  id: totrans-7085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-303/JSR-349 bean验证
- en: using / [Using JSR-303/JSR-349 Bean Validation](part0115.xhtml#aid-3DLGM2 "Using
    JSR-303/JSR-349 Bean Validation")
  id: totrans-7086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用JSR-303/JSR-349 Bean验证](part0115.xhtml#aid-3DLGM2 "使用JSR-303/JSR-349
    Bean验证")
- en: on-field constraints annotations / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  id: totrans-7087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段约束注释/ [字段约束注释](part0115.xhtml#aid-3DLGM2 "字段约束注释")
- en: implementation-specific constraints / [Implementation-specific constraints](part0115.xhtml#aid-3DLGM2
    "Implementation-specific constraints")
  id: totrans-7088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于实现的约束/ [特定于实现的约束](part0115.xhtml#aid-3DLGM2 "特定于实现的约束")
- en: LocalValidator (reusable) / [LocalValidator (reusable)](part0115.xhtml#aid-3DLGM2
    "LocalValidator (reusable)")
  id: totrans-7089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LocalValidator（可重用）/ [LocalValidator（可重用）](part0115.xhtml#aid-3DLGM2 "LocalValidator（可重用）")
- en: JSR-310
  id: totrans-7090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-310
- en: URL / [Customizing the JSON output](part0161.xhtml#aid-4PHAI2 "Customizing the
    JSON output")
  id: totrans-7091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [自定义JSON输出](part0161.xhtml#aid-4PHAI2 "自定义JSON输出")
- en: JSR-356
  id: totrans-7092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-356
- en: URL / [See also](part0119.xhtml#aid-3HFIU2 "See also")
  id: totrans-7093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0119.xhtml#aid-3HFIU2 "另请参阅")
- en: JTA (Java Transaction API)
  id: totrans-7094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JTA（Java事务API）
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  id: totrans-7095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Spring事务的相关性](part0051.xhtml#aid-1GKCM2 "Spring事务的相关性")
- en: JUnit Rules
  id: totrans-7096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit规则
- en: URL / [JUnit Rules](part0125.xhtml#aid-3N6MA2 "JUnit Rules")
  id: totrans-7097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [JUnit规则](part0125.xhtml#aid-3N6MA2 "JUnit规则")
- en: JVM
  id: totrans-7098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM
- en: selecting / [Choosing a JVM](part0080.xhtml#aid-2C9D01 "Choosing a JVM")
  id: totrans-7099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择/ [选择JVM](part0080.xhtml#aid-2C9D01 "选择JVM")
- en: JVM arguments
  id: totrans-7100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM参数
- en: customizing / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing
    JVM arguments")
  id: totrans-7101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义/ [自定义JVM参数](part0081.xhtml#aid-2D7TI2 "自定义JVM参数")
- en: L
  id: totrans-7102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: L
- en: lambdas, Java 8
  id: totrans-7103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lambda，Java 8
- en: about / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  id: totrans-7104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Java 8流和lambda](part0137.xhtml#aid-42KT21 "Java 8流和lambda")
- en: layouts
  id: totrans-7105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: using / [Using layouts](part0138.xhtml#aid-43JDK2 "Using layouts")
  id: totrans-7106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用布局](part0138.xhtml#aid-43JDK2 "使用布局")
- en: links
  id: totrans-7107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接
- en: building, for hypermedia-driven API / [Building links for a hypermedia-driven
    API](part0110.xhtml#aid-38STS2 "Building links for a hypermedia-driven API"),
    [How to do it…](part0110.xhtml#aid-38STS2 "How to do it…")
  id: totrans-7108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为超媒体驱动的API构建/ [为超媒体驱动的API构建链接](part0110.xhtml#aid-38STS2 "为超媒体驱动的API构建链接"),
    [如何做…](part0110.xhtml#aid-38STS2 "如何做…")
- en: links! / [The ResourceSupport class](part0109.xhtml#aid-37UDA2 "The ResourceSupport
    class")
  id: totrans-7109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接！/ [ResourceSupport类](part0109.xhtml#aid-37UDA2 "ResourceSupport类")
- en: Liquibase
  id: totrans-7110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liquibase
- en: URL / [See also](part0124.xhtml#aid-3M85O2 "See also")
  id: totrans-7111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0124.xhtml#aid-3M85O2 "另请参阅")
- en: Liquid Fire
  id: totrans-7112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 液体火
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-7113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: Load balancing WebSockets
  id: totrans-7114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡WebSockets
- en: URL / [See also](part0121.xhtml#aid-3JCK22 "See also")
  id: totrans-7115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0121.xhtml#aid-3JCK22 "另请参阅")
- en: LocaleResolver
  id: totrans-7116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LocaleResolver
- en: used, for internationalizing messages / [Using a LocaleResolver](part0116.xhtml#aid-3EK182
    "Using a LocaleResolver")
  id: totrans-7117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于国际化消息/ [使用LocaleResolver](part0116.xhtml#aid-3EK182 "使用LocaleResolver")
- en: AcceptHeaderLocaleResolver / [AcceptHeaderLocaleResolver](part0116.xhtml#aid-3EK182
    "AcceptHeaderLocaleResolver")
  id: totrans-7118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AcceptHeaderLocaleResolver / [AcceptHeaderLocaleResolver](part0116.xhtml#aid-3EK182
    "AcceptHeaderLocaleResolver")
- en: FixedLocaleResolver / [FixedLocaleResolver](part0116.xhtml#aid-3EK182 "FixedLocaleResolver")
  id: totrans-7119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FixedLocaleResolver / [FixedLocaleResolver](part0116.xhtml#aid-3EK182 "FixedLocaleResolver")
- en: SessionLocaleResolver / [SessionLocaleResolver](part0116.xhtml#aid-3EK182 "SessionLocaleResolver")
  id: totrans-7120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SessionLocaleResolver / [SessionLocaleResolver](part0116.xhtml#aid-3EK182 "SessionLocaleResolver")
- en: CookieLocaleResolver / [CookieLocaleResolver](part0116.xhtml#aid-3EK182 "CookieLocaleResolver")
  id: totrans-7121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CookieLocaleResolver / [CookieLocaleResolver](part0116.xhtml#aid-3EK182 "CookieLocaleResolver")
- en: localStorage
  id: totrans-7122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地存储
- en: URL / [Browser support for localStorage](part0106.xhtml#aid-352RK2 "Browser
    support for localStorage")
  id: totrans-7123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [localStorage的浏览器支持](part0106.xhtml#aid-352RK2 "localStorage的浏览器支持")
- en: Log4j 1.x API Bridge / [Log4j 1.x API Bridge](part0128.xhtml#aid-3Q2802 "Log4j
    1.x API Bridge")
  id: totrans-7124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j 1.x API桥接/ [Log4j 1.x API桥接](part0128.xhtml#aid-3Q2802 "Log4j 1.x API桥接")
- en: Log4j2
  id: totrans-7125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2
- en: used, for application logging / [Modern application Logging with Log4j2](part0128.xhtml#aid-3Q2802
    "Modern application Logging with Log4j2"), [How to do it…](part0128.xhtml#aid-3Q2802
    "How to do it…")
  id: totrans-7126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于应用程序日志记录/ [Log4j2的现代应用程序日志记录](part0128.xhtml#aid-3Q2802 "Log4j2的现代应用程序日志记录"),
    [如何做…](part0128.xhtml#aid-3Q2802 "如何做…")
- en: and other logging frameworks / [Apache Log4j2 among other logging frameworks](part0128.xhtml#aid-3Q2802
    "Apache Log4j2 among other logging frameworks")
  id: totrans-7127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和其他日志框架/ [Apache Log4j2等其他日志框架](part0128.xhtml#aid-3Q2802 "Apache Log4j2等其他日志框架")
- en: SLF4j, case / [The case of SLF4j](part0128.xhtml#aid-3Q2802 "The case of SLF4j")
  id: totrans-7128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4j, 案例 / [SLF4j的案例](part0128.xhtml#aid-3Q2802 "SLF4j的案例")
- en: migrating to / [Migrating to log4j 2](part0128.xhtml#aid-3Q2802 "Migrating to
    log4j 2")
  id: totrans-7129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移到 / [迁移到log4j 2](part0128.xhtml#aid-3Q2802 "迁移到log4j 2")
- en: API and Core / [Log4j 2 API and Core](part0128.xhtml#aid-3Q2802 "Log4j 2 API
    and Core")
  id: totrans-7130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API和核心 / [Log4j 2 API和核心](part0128.xhtml#aid-3Q2802 "Log4j 2 API和核心")
- en: adapters / [Log4j 2 Adapters](part0128.xhtml#aid-3Q2802 "Log4j 2 Adapters")
  id: totrans-7131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配器 / [Log4j 2适配器](part0128.xhtml#aid-3Q2802 "Log4j 2适配器")
- en: configuration files / [Configuration files](part0128.xhtml#aid-3Q2802 "Configuration
    files")
  id: totrans-7132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件 / [配置文件](part0128.xhtml#aid-3Q2802 "配置文件")
- en: automatic configuration / [Automatic configuration](part0128.xhtml#aid-3Q2802
    "Automatic configuration")
  id: totrans-7133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动配置 / [自动配置](part0128.xhtml#aid-3Q2802 "自动配置")
- en: automatic configuration, URL / [Automatic configuration](part0128.xhtml#aid-3Q2802
    "Automatic configuration")
  id: totrans-7134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动配置, URL / [自动配置](part0128.xhtml#aid-3Q2802 "自动配置")
- en: official documentation / [Official documentation](part0128.xhtml#aid-3Q2802
    "Official documentation")
  id: totrans-7135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档 / [官方文档](part0128.xhtml#aid-3Q2802 "官方文档")
- en: official documentation, URL / [Official documentation](part0128.xhtml#aid-3Q2802
    "Official documentation")
  id: totrans-7136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档, URL / [官方文档](part0128.xhtml#aid-3Q2802 "官方文档")
- en: Redis Appender, implementation / [Interesting Redis Appender implementation](part0128.xhtml#aid-3Q2802
    "Interesting Redis Appender implementation")
  id: totrans-7137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis Appender, 实现 / [有趣的Redis Appender实现](part0128.xhtml#aid-3Q2802 "有趣的Redis
    Appender实现")
- en: Redis, URL / [Interesting Redis Appender implementation](part0128.xhtml#aid-3Q2802
    "Interesting Redis Appender implementation")
  id: totrans-7138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis, URL / [有趣的Redis Appender实现](part0128.xhtml#aid-3Q2802 "有趣的Redis Appender实现")
- en: Log4j2, adapters
  id: totrans-7139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2, 适配器
- en: about / [Log4j 2 Adapters](part0128.xhtml#aid-3Q2802 "Log4j 2 Adapters")
  id: totrans-7140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Log4j 2适配器](part0128.xhtml#aid-3Q2802 "Log4j 2适配器")
- en: Log4j 1.x API Bridge / [Log4j 1.x API Bridge](part0128.xhtml#aid-3Q2802 "Log4j
    1.x API Bridge")
  id: totrans-7141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j 1.x API桥接器 / [Log4j 1.x API桥接器](part0128.xhtml#aid-3Q2802 "Log4j 1.x API桥接器")
- en: Apache Commons Logging Bridge / [Apache Commons Logging Bridge](part0128.xhtml#aid-3Q2802
    "Apache Commons Logging Bridge")
  id: totrans-7142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Commons Logging桥接器 / [Apache Commons Logging桥接器](part0128.xhtml#aid-3Q2802
    "Apache Commons Logging桥接器")
- en: SLF4J Bridge / [SLF4J Bridge](part0128.xhtml#aid-3Q2802 "SLF4J Bridge")
  id: totrans-7143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4J桥接器 / [SLF4J桥接器](part0128.xhtml#aid-3Q2802 "SLF4J桥接器")
- en: Java Util Logging Adapters / [Java Util Logging Adapters](part0128.xhtml#aid-3Q2802
    "Java Util Logging Adapters")
  id: totrans-7144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Util Logging适配器 / [Java Util Logging适配器](part0128.xhtml#aid-3Q2802 "Java
    Util Logging适配器")
- en: Web Servlet Support / [Web Servlet Support](part0128.xhtml#aid-3Q2802 "Web Servlet
    Support")
  id: totrans-7145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web Servlet支持 / [Web Servlet支持](part0128.xhtml#aid-3Q2802 "Web Servlet支持")
- en: login form
  id: totrans-7146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录表单
- en: designing / [The login form](part0169.xhtml#aid-515F22 "The login form")
  id: totrans-7147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计 / [登录表单](part0169.xhtml#aid-515F22 "登录表单")
- en: Luna distribution
  id: totrans-7148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Luna分发
- en: URL / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  id: totrans-7149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [如何做...](part0080.xhtml#aid-2C9D01 "如何做...")
- en: M
  id: totrans-7150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: M
- en: '@MessageMapping'
  id: totrans-7151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@MessageMapping'
- en: used, for defining message handlers / [Defining message handlers via @MessageMapping](part0119.xhtml#aid-3HFIU2
    "Defining message handlers via @MessageMapping")
  id: totrans-7152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于定义消息处理程序 / [通过@MessageMapping定义消息处理程序](part0119.xhtml#aid-3HFIU2 "通过@MessageMapping定义消息处理程序")
- en: m2eclipse plugin
  id: totrans-7153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: m2eclipse插件
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  id: totrans-7154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [更多信息...](part0081.xhtml#aid-2D7TI2 "更多信息...")
- en: marshalling responses
  id: totrans-7155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编组响应
- en: about / [Binding requests and marshalling responses](part0096.xhtml#aid-2RHM02
    "Binding requests and marshalling responses"), [How to do it...](part0096.xhtml#aid-2RHM02
    "How to do it..."), [How it works...](part0096.xhtml#aid-2RHM02 "How it works...")
  id: totrans-7156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [绑定请求和编组响应](part0096.xhtml#aid-2RHM02 "绑定请求和编组响应"), [如何做...](part0096.xhtml#aid-2RHM02
    "如何做..."), [它是如何工作的...](part0096.xhtml#aid-2RHM02 "它是如何工作的...")
- en: material design
  id: totrans-7157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material Design
- en: with WebJars / [Material design with WebJars](part0138.xhtml#aid-43JDK2 "Material
    design with WebJars")
  id: totrans-7158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebJars / [使用WebJars进行Material Design](part0138.xhtml#aid-43JDK2 "使用WebJars进行Material
    Design")
- en: Materialize
  id: totrans-7159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Materialize
- en: URL / [Material design with WebJars](part0138.xhtml#aid-43JDK2 "Material design
    with WebJars")
  id: totrans-7160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [使用WebJars进行Material Design](part0138.xhtml#aid-43JDK2 "使用WebJars进行Material
    Design")
- en: matrix variables
  id: totrans-7161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵变量
- en: URL mapping / [URL mapping with matrix variables](part0151.xhtml#aid-4G04U2
    "URL mapping with matrix variables")
  id: totrans-7162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL映射 / [使用矩阵变量进行URL映射](part0151.xhtml#aid-4G04U2 "使用矩阵变量进行URL映射")
- en: Maven
  id: totrans-7163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven
- en: need for / [Why making use of Maven?](part0079.xhtml#aid-2BASE1 "Why making
    use of Maven?")
  id: totrans-7164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要 / [为什么要使用Maven?](part0079.xhtml#aid-2BASE1 "为什么要使用Maven?")
- en: configuring / [Configuring Maven](part0081.xhtml#aid-2D7TI2 "Configuring Maven")
  id: totrans-7165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 / [配置Maven](part0081.xhtml#aid-2D7TI2 "配置Maven")
- en: project structure, defining / [Defining the project structure with Maven](part0082.xhtml#aid-2E6E42
    "Defining the project structure with Maven"), [Getting ready](part0082.xhtml#aid-2E6E42
    "Getting ready"), [How to do it...](part0082.xhtml#aid-2E6E42 "How to do it...")
  id: totrans-7166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构, 定义 / [使用Maven定义项目结构](part0082.xhtml#aid-2E6E42 "使用Maven定义项目结构"), [准备工作](part0082.xhtml#aid-2E6E42
    "准备工作"), [如何做...](part0082.xhtml#aid-2E6E42 "如何做...")
- en: build life cycle / [Maven's build life cycles](part0082.xhtml#aid-2E6E42 "Maven's
    build life cycles")
  id: totrans-7167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建生命周期 / [Maven的构建生命周期](part0082.xhtml#aid-2E6E42 "Maven的构建生命周期")
- en: references / [There's more...](part0083.xhtml#aid-2F4UM2 "There's more...")
  id: totrans-7168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考资料 / [更多信息...](part0083.xhtml#aid-2F4UM2 "更多信息...")
- en: Maven 3
  id: totrans-7169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 3
- en: Eclipse, configuring / [Getting ready](part0081.xhtml#aid-2D7TI2 "Getting ready"),
    [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-7170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse, 配置 / [准备工作](part0081.xhtml#aid-2D7TI2 "准备工作"), [如何做...](part0081.xhtml#aid-2D7TI2
    "如何做...")
- en: Maven checkstyle plugin
  id: totrans-7171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven checkstyle插件
- en: about / [The Maven checkstyle plugin](part0083.xhtml#aid-2F4UM2 "The Maven checkstyle
    plugin")
  id: totrans-7172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Maven的checkstyle插件](part0083.xhtml#aid-2F4UM2 "Maven的checkstyle插件")
- en: URL / [The Maven checkstyle plugin](part0083.xhtml#aid-2F4UM2 "The Maven checkstyle
    plugin")
  id: totrans-7173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Maven的checkstyle插件](part0083.xhtml#aid-2F4UM2 "Maven的checkstyle插件")
- en: Maven Failsafe
  id: totrans-7174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven Failsafe
- en: versus Maven Surefire / [Maven Failsafe versus Maven Surefire](part0126.xhtml#aid-3O56S2
    "Maven Failsafe versus Maven Surefire")
  id: totrans-7175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Maven Surefire相比 / [Maven Failsafe与Maven Surefire](part0126.xhtml#aid-3O56S2
    "Maven Failsafe与Maven Surefire")
- en: Maven model
  id: totrans-7176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven模型
- en: reference link / [Using Maven properties](part0083.xhtml#aid-2F4UM2 "Using Maven
    properties")
  id: totrans-7177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [使用Maven属性](part0083.xhtml#aid-2F4UM2 "使用Maven属性")
- en: Maven plugins
  id: totrans-7178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven插件
- en: URL / [There's more...](part0083.xhtml#aid-2F4UM2 "There's more...")
  id: totrans-7179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [还有更多...](part0083.xhtml#aid-2F4UM2 "还有更多...")
- en: Maven Surefire
  id: totrans-7180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven Surefire
- en: about / [Unit testing with Mockito and Maven Surefire](part0125.xhtml#aid-3N6MA2
    "Unit testing with Mockito and Maven Surefire"), [How to do it…](part0125.xhtml#aid-3N6MA2
    "How to do it…")
  id: totrans-7181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [使用Mockito和Maven Surefire进行单元测试](part0125.xhtml#aid-3N6MA2 "使用Mockito和Maven
    Surefire进行单元测试"), [如何做…](part0125.xhtml#aid-3N6MA2 "如何做…")
- en: memory optimization
  id: totrans-7182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存优化
- en: reference link / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  id: totrans-7183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [还有更多...](part0081.xhtml#aid-2D7TI2 "还有更多...")
- en: Message-oriented-Middleware (MoM) / [Stacking and consuming tasks with RabbitMQ
    and AMQP](part0121.xhtml#aid-3JCK22 "Stacking and consuming tasks with RabbitMQ
    and AMQP")
  id: totrans-7184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向消息的中间件（MoM） / [使用RabbitMQ和AMQP堆叠和消费任务](part0121.xhtml#aid-3JCK22 "使用RabbitMQ和AMQP堆叠和消费任务")
- en: message broker
  id: totrans-7185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息代理
- en: full-featured message broker, using / [Using a full-featured message broker](part0120.xhtml#aid-3IE3G2
    "Using a full-featured message broker")
  id: totrans-7186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全功能消息代理 / [使用全功能消息代理](part0120.xhtml#aid-3IE3G2 "使用全功能消息代理")
- en: clusterability / [Clusterability – RabbitMQ](part0120.xhtml#aid-3IE3G2 "Clusterability
    – RabbitMQ")
  id: totrans-7187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群能力 / [集群能力 - RabbitMQ](part0120.xhtml#aid-3IE3G2 "集群能力 - RabbitMQ")
- en: STOMP message types / [More STOMP message types](part0120.xhtml#aid-3IE3G2 "More
    STOMP message types")
  id: totrans-7188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STOMP消息类型 / [更多STOMP消息类型](part0120.xhtml#aid-3IE3G2 "更多STOMP消息类型")
- en: StompMessageBrokerRelay / [StompMessageBrokerRelay](part0120.xhtml#aid-3IE3G2
    "StompMessageBrokerRelay")
  id: totrans-7189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StompMessageBrokerRelay / [StompMessageBrokerRelay](part0120.xhtml#aid-3IE3G2
    "StompMessageBrokerRelay")
- en: Message Driven Beans (MDB)
  id: totrans-7190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息驱动的Bean（MDB）
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  id: totrans-7191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring事务的相关性](part0051.xhtml#aid-1GKCM2 "Spring事务的相关性")
- en: messages
  id: totrans-7192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息
- en: internationalizing, for REST / [Internationalizing messages and contents for
    REST](part0116.xhtml#aid-3EK182 "Internationalizing messages and contents for
    REST")
  id: totrans-7193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于REST的国际化 / [为REST国际化消息和内容](part0116.xhtml#aid-3EK182 "为REST国际化消息和内容")
- en: internationalizing, with MessageSource beans / [MessageSource beans](part0116.xhtml#aid-3EK182
    "MessageSource beans")
  id: totrans-7194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MessageSource beans进行国际化 / [MessageSource beans](part0116.xhtml#aid-3EK182
    "MessageSource beans")
- en: internationalizing, LocaleResolver used / [Using a LocaleResolver](part0116.xhtml#aid-3EK182
    "Using a LocaleResolver")
  id: totrans-7195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LocaleResolver / [使用LocaleResolver](part0116.xhtml#aid-3EK182 "使用LocaleResolver")
- en: sending, to dispatch / [Sending a message to dispatch](part0119.xhtml#aid-3HFIU2
    "Sending a message to dispatch")
  id: totrans-7196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送，分发 / [发送消息以分发](part0119.xhtml#aid-3HFIU2 "发送消息以分发")
- en: SimpMessagingTemplate / [SimpMessagingTemplate](part0119.xhtml#aid-3HFIU2 "SimpMessagingTemplate")
  id: totrans-7197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SimpMessagingTemplate / [SimpMessagingTemplate](part0119.xhtml#aid-3HFIU2 "SimpMessagingTemplate")
- en: '@SendTo annotation / [The @SendTo annotation](part0119.xhtml#aid-3HFIU2 "The
    @SendTo annotation")'
  id: totrans-7198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@SendTo注释 / [The @SendTo注释](part0119.xhtml#aid-3HFIU2 "@SendTo注释")'
- en: securing, with Spring session / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  id: totrans-7199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Session进行安全保护 / [使用Spring Session和Redis保护消息](part0122.xhtml#aid-3KB4K2
    "使用Spring Session和Redis保护消息")
- en: securing, with Redis / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  id: totrans-7200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Redis进行安全保护 / [使用Spring Session和Redis保护消息](part0122.xhtml#aid-3KB4K2 "使用Spring
    Session和Redis保护消息")
- en: Apache HTTP proxy configuration / [Apache HTTP proxy configuration](part0122.xhtml#aid-3KB4K2
    "Apache HTTP proxy configuration")
  id: totrans-7201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP代理配置 / [Apache HTTP代理配置](part0122.xhtml#aid-3KB4K2 "Apache HTTP代理配置")
- en: Redis server installation / [Redis server installation](part0122.xhtml#aid-3KB4K2
    "Redis server installation")
  id: totrans-7202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis服务器安装 / [Redis服务器安装](part0122.xhtml#aid-3KB4K2 "Redis服务器安装")
- en: MySQL server installation / [MySQL server installation](part0122.xhtml#aid-3KB4K2
    "MySQL server installation")
  id: totrans-7203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL服务器安装 / [MySQL服务器安装](part0122.xhtml#aid-3KB4K2 "MySQL服务器安装")
- en: application-level changes / [Application-level changes](part0122.xhtml#aid-3KB4K2
    "Application-level changes")
  id: totrans-7204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用级别的更改 / [应用级别的更改](part0122.xhtml#aid-3KB4K2 "应用级别的更改")
- en: RabbitMQ configuration / [RabbitMQ configuration](part0122.xhtml#aid-3KB4K2
    "RabbitMQ configuration")
  id: totrans-7205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ配置 / [RabbitMQ配置](part0122.xhtml#aid-3KB4K2 "RabbitMQ配置")
- en: results / [The results](part0122.xhtml#aid-3KB4K2 "The results")
  id: totrans-7206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果 / [结果](part0122.xhtml#aid-3KB4K2 "结果")
- en: Redis server / [The Redis server](part0122.xhtml#aid-3KB4K2 "The Redis server")
  id: totrans-7207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis服务器 / [Redis服务器](part0122.xhtml#aid-3KB4K2 "Redis服务器")
- en: Spring session / [Spring session](part0122.xhtml#aid-3KB4K2 "Spring session")
  id: totrans-7208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring会话 / [Spring会话](part0122.xhtml#aid-3KB4K2 "Spring会话")
- en: SessionRepositoryFilter / [SessionRepositoryFilter](part0122.xhtml#aid-3KB4K2
    "SessionRepositoryFilter")
  id: totrans-7209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SessionRepositoryFilter / [SessionRepositoryFilter](part0122.xhtml#aid-3KB4K2
    "SessionRepositoryFilter")
- en: RedisConnectionFactory / [RedisConnectionFactory](part0122.xhtml#aid-3KB4K2
    "RedisConnectionFactory")
  id: totrans-7210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RedisConnectionFactory / [RedisConnectionFactory](part0122.xhtml#aid-3KB4K2
    "RedisConnectionFactory")
- en: CookieHttpSessionStrategy / [CookieHttpSessionStrategy](part0122.xhtml#aid-3KB4K2
    "CookieHttpSessionStrategy")
  id: totrans-7211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CookieHttpSessionStrategy / [CookieHttpSessionStrategy](part0122.xhtml#aid-3KB4K2
    "CookieHttpSessionStrategy")
- en: Redis Session manager, for Tomcat / [The Redis Session manager for Tomcat](part0122.xhtml#aid-3KB4K2
    "The Redis Session manager for Tomcat")
  id: totrans-7212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat的Redis会话管理器 / [Tomcat的Redis会话管理器](part0122.xhtml#aid-3KB4K2 "Tomcat的Redis会话管理器")
- en: sessions in Redis, viewing / [Viewing/flushing sessions in Redis](part0122.xhtml#aid-3KB4K2
    "Viewing/flushing sessions in Redis")
  id: totrans-7213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Redis中查看会话 / [查看/刷新Redis中的会话](part0122.xhtml#aid-3KB4K2 "查看/刷新Redis中的会话")
- en: sessions in Redis, flushing / [Viewing/flushing sessions in Redis](part0122.xhtml#aid-3KB4K2
    "Viewing/flushing sessions in Redis")
  id: totrans-7214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Redis中查看/刷新会话 / [查看/刷新Redis中的会话](part0122.xhtml#aid-3KB4K2 "查看/刷新Redis中的会话")
- en: securityContextPersistenceFilter / [securityContextPersistenceFilter](part0122.xhtml#aid-3KB4K2
    "securityContextPersistenceFilter")
  id: totrans-7215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: securityContextPersistenceFilter / [securityContextPersistenceFilter](part0122.xhtml#aid-3KB4K2
    "securityContextPersistenceFilter")
- en: AbstractSessionWebSocketMessageBrokerConfigurer / [AbstractSessionWebSocketMessageBrokerConfigurer](part0122.xhtml#aid-3KB4K2
    "AbstractSessionWebSocketMessageBrokerConfigurer")
  id: totrans-7216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AbstractSessionWebSocketMessageBrokerConfigurer / [AbstractSessionWebSocketMessageBrokerConfigurer](part0122.xhtml#aid-3KB4K2
    "AbstractSessionWebSocketMessageBrokerConfigurer")
- en: AbstractSecurityWebSocketMessageBrokerConfigurer / [AbstractSecurityWebSocketMessageBrokerConfigurer](part0122.xhtml#aid-3KB4K2
    "AbstractSecurityWebSocketMessageBrokerConfigurer")
  id: totrans-7217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AbstractSecurityWebSocketMessageBrokerConfigurer / [AbstractSecurityWebSocketMessageBrokerConfigurer](part0122.xhtml#aid-3KB4K2
    "AbstractSecurityWebSocketMessageBrokerConfigurer")
- en: Spring session, URL / [Spring Session](part0122.xhtml#aid-3KB4K2 "Spring Session")
  id: totrans-7218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring会话，URL / [Spring会话](part0122.xhtml#aid-3KB4K2 "Spring会话")
- en: Apache HTTP proxy, extra configuration / [Apache HTTP proxy extra configuration](part0122.xhtml#aid-3KB4K2
    "Apache HTTP proxy extra configuration")
  id: totrans-7219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP代理，额外配置 / [Apache HTTP代理额外配置](part0122.xhtml#aid-3KB4K2 "Apache HTTP代理额外配置")
- en: Spring Data Redis / [Spring Data Redis](part0122.xhtml#aid-3KB4K2 "Spring Data
    Redis")
  id: totrans-7220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data Redis / [Spring Data Redis](part0122.xhtml#aid-3KB4K2 "Spring Data
    Redis")
- en: MessageSource beans
  id: totrans-7221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MessageSource beans
- en: used, for internationalizing messages / [MessageSource beans](part0116.xhtml#aid-3EK182
    "MessageSource beans")
  id: totrans-7222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于国际化消息 / [MessageSource beans](part0116.xhtml#aid-3EK182 "MessageSource beans")
- en: ResourceBundleMessageSource / [ResourceBundleMessageSource](part0116.xhtml#aid-3EK182
    "ResourceBundleMessageSource")
  id: totrans-7223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ResourceBundleMessageSource / [ResourceBundleMessageSource](part0116.xhtml#aid-3EK182
    "ResourceBundleMessageSource")
- en: ReloadableResourceBundleMessageSource / [ReloadableResourceBundleMessageSource](part0116.xhtml#aid-3EK182
    "ReloadableResourceBundleMessageSource")
  id: totrans-7224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReloadableResourceBundleMessageSource / [ReloadableResourceBundleMessageSource](part0116.xhtml#aid-3EK182
    "ReloadableResourceBundleMessageSource")
- en: StaticMessageSource / [StaticMessageSource](part0116.xhtml#aid-3EK182 "StaticMessageSource")
  id: totrans-7225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StaticMessageSource / [StaticMessageSource](part0116.xhtml#aid-3EK182 "StaticMessageSource")
- en: defining / [Our MessageSource bean definition](part0116.xhtml#aid-3EK182 "Our
    MessageSource bean definition")
  id: totrans-7226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 / [我们的MessageSource bean定义](part0116.xhtml#aid-3EK182 "我们的MessageSource bean定义")
- en: Messaging-oriented-middleware (MOM)
  id: totrans-7227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向消息的中间件（MOM）
- en: about / [Introduction](part0118.xhtml#aid-3GH2C1 "Introduction")
  id: totrans-7228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [介绍](part0118.xhtml#aid-3GH2C1 "介绍")
- en: migrate command / [Migrate](part0124.xhtml#aid-3M85O2 "Migrate")
  id: totrans-7229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移命令 / [迁移](part0124.xhtml#aid-3M85O2 "迁移")
- en: Mockito
  id: totrans-7230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mockito
- en: unit testing with / [Unit testing with Mockito and Maven Surefire](part0125.xhtml#aid-3N6MA2
    "Unit testing with Mockito and Maven Surefire"), [How to do it…](part0125.xhtml#aid-3N6MA2
    "How to do it…")
  id: totrans-7231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 / [使用Mockito和Maven Surefire进行单元测试](part0125.xhtml#aid-3N6MA2 "使用Mockito和Maven
    Surefire进行单元测试"), [如何做...](part0125.xhtml#aid-3N6MA2 "如何做...")
- en: '@Test annotation / [@Test annotation](part0125.xhtml#aid-3N6MA2 "@Test annotation")'
  id: totrans-7232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Test注释 / [@Test注释](part0125.xhtml#aid-3N6MA2 "@Test注释")'
- en: using / [Using Mockito](part0125.xhtml#aid-3N6MA2 "Using Mockito")
  id: totrans-7233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [使用Mockito](part0125.xhtml#aid-3N6MA2 "使用Mockito")
- en: JUnitRunner / [MockitoJUnitRunner](part0125.xhtml#aid-3N6MA2 "MockitoJUnitRunner")
  id: totrans-7234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnitRunner / [MockitoJUnitRunner](part0125.xhtml#aid-3N6MA2 "MockitoJUnitRunner")
- en: transferCriticalData example / [The transferCriticalData example](part0125.xhtml#aid-3N6MA2
    "The transferCriticalData example")
  id: totrans-7235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: transferCriticalData示例 / [transferCriticalData示例](part0125.xhtml#aid-3N6MA2
    "transferCriticalData示例")
- en: registerUser example / [The registerUser example](part0125.xhtml#aid-3N6MA2
    "The registerUser example")
  id: totrans-7236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: registerUser示例 / [registerUser示例](part0125.xhtml#aid-3N6MA2 "registerUser示例")
- en: URL / [About Mockito](part0125.xhtml#aid-3N6MA2 "About Mockito")
  id: totrans-7237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [关于Mockito](part0125.xhtml#aid-3N6MA2 "关于Mockito")
- en: JUnit Rules / [JUnit Rules](part0125.xhtml#aid-3N6MA2 "JUnit Rules")
  id: totrans-7238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit规则 / [JUnit规则](part0125.xhtml#aid-3N6MA2 "JUnit规则")
- en: used, for creating mocks / [Mocking with Mockito](part0181.xhtml#aid-5CJLQ2
    "Mocking with Mockito")
  id: totrans-7239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建模拟 / [使用Mockito进行模拟](part0181.xhtml#aid-5CJLQ2 "使用Mockito进行模拟")
- en: MockitoJUnitRunner / [MockitoJUnitRunner](part0125.xhtml#aid-3N6MA2 "MockitoJUnitRunner")
  id: totrans-7240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MockitoJUnitRunner / [MockitoJUnitRunner](part0125.xhtml#aid-3N6MA2 "MockitoJUnitRunner")
- en: mocks
  id: totrans-7241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟
- en: about / [Mocks and stubs](part0181.xhtml#aid-5CJLQ2 "Mocks and stubs")
  id: totrans-7242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Mocks和stubs](part0181.xhtml#aid-5CJLQ2 "Mocks和stubs")
- en: and stubs, selecting between / [Should I use mocks or stubs?](part0181.xhtml#aid-5CJLQ2
    "Should I use mocks or stubs?")
  id: totrans-7243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和存根，选择 / [我应该使用模拟还是存根？](part0181.xhtml#aid-5CJLQ2 "我应该使用模拟还是存根？")
- en: reference link / [Should I use mocks or stubs?](part0181.xhtml#aid-5CJLQ2 "Should
    I use mocks or stubs?")
  id: totrans-7244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [我应该使用模拟还是存根？](part0181.xhtml#aid-5CJLQ2 "我应该使用模拟还是存根？")
- en: model
  id: totrans-7245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型
- en: displaying in view, JSTL used / [Displaying a model in the View, using the JSTL](part0088.xhtml#aid-2JTHG2
    "Displaying a model in the View, using the JSTL"), [How to do it...](part0088.xhtml#aid-2JTHG2
    "How to do it..."), [How it works...](part0088.xhtml#aid-2JTHG2 "How it works...")
  id: totrans-7246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中显示，使用JSTL / [在视图中显示模型，使用JSTL](part0088.xhtml#aid-2JTHG2 "在视图中显示模型，使用JSTL"),
    [如何做...](part0088.xhtml#aid-2JTHG2 "如何做..."), [它是如何工作的...](part0088.xhtml#aid-2JTHG2
    "它是如何工作的...")
- en: populating, in controller / [Populating the Model in the controller](part0088.xhtml#aid-2JTHG2
    "Populating the Model in the controller")
  id: totrans-7247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器中填充 / [在控制器中填充模型](part0088.xhtml#aid-2JTHG2 "在控制器中填充模型")
- en: variables, rendering with JSP EL / [Rendering variables with the JSP EL](part0088.xhtml#aid-2JTHG2
    "Rendering variables with the JSP EL")
  id: totrans-7248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSP EL渲染变量 / [使用JSP EL渲染变量](part0088.xhtml#aid-2JTHG2 "使用JSP EL渲染变量")
- en: implicit objects / [Implicit objects](part0088.xhtml#aid-2JTHG2 "Implicit objects")
  id: totrans-7249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐式对象 / [隐式对象](part0088.xhtml#aid-2JTHG2 "隐式对象")
- en: Model-View-Controller (MVC) architectural pattern
  id: totrans-7250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型-视图-控制器（MVC）架构模式
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-7251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: Model-View-Controller pattern
  id: totrans-7252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式
- en: about / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The Model-View-Controller
    pattern")
  id: totrans-7253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [模型-视图-控制器模式](part0029.xhtml#aid-RL0A1 "模型-视图-控制器模式")
- en: Model / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The Model-View-Controller
    pattern")
  id: totrans-7254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型 / [模型-视图-控制器模式](part0029.xhtml#aid-RL0A1 "模型-视图-控制器模式")
- en: View / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The Model-View-Controller
    pattern")
  id: totrans-7255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图 / [模型-视图-控制器模式](part0029.xhtml#aid-RL0A1 "模型-视图-控制器模式")
- en: Controller / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The
    Model-View-Controller pattern")
  id: totrans-7256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器 / [模型-视图-控制器模式](part0029.xhtml#aid-RL0A1 "模型-视图-控制器模式")
- en: modules
  id: totrans-7257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: creating / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2
    "Setting up the DOM and creating modules")
  id: totrans-7258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [设置DOM和创建模块](part0090.xhtml#aid-2LQIK2 "设置DOM和创建模块")
- en: components, defining / [Defining the module's components](part0090.xhtml#aid-2LQIK2
    "Defining the module's components"), [How it works...](part0090.xhtml#aid-2LQIK2
    "How it works...")
  id: totrans-7259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件，定义/ [定义模块的组件](part0090.xhtml#aid-2LQIK2 "定义模块的组件"), [工作原理…](part0090.xhtml#aid-2LQIK2
    "工作原理…")
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  id: totrans-7260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [还有更多…](part0102.xhtml#aid-318PC2 "还有更多…")
- en: mod_alias module / [The mod_alias module](part0102.xhtml#aid-318PC2 "The mod_alias
    module")
  id: totrans-7261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mod_alias模块/ [mod_alias模块](part0102.xhtml#aid-318PC2 "mod_alias模块")
- en: mod_proxy module / [The mod_proxy module](part0102.xhtml#aid-318PC2 "The mod_proxy
    module")
  id: totrans-7262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mod_proxy模块/ [mod_proxy模块](part0102.xhtml#aid-318PC2 "mod_proxy模块")
- en: morris.js library
  id: totrans-7263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: morris.js库
- en: URL / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating responsive
    content")
  id: totrans-7264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [创建响应式内容](part0087.xhtml#aid-2IV0U2 "创建响应式内容")
- en: Multipurpose Internet Mail Extensions (MIME)
  id: totrans-7265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多用途互联网邮件扩展（MIME）
- en: about / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a file")
  id: totrans-7266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [上传文件](part0147.xhtml#aid-4C62M2 "上传文件")
- en: MVC architecture
  id: totrans-7267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC架构
- en: about / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  id: totrans-7268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [MVC架构](part0130.xhtml#aid-3RV941 "MVC架构")
- en: Model / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  id: totrans-7269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型/ [MVC架构](part0130.xhtml#aid-3RV941 "MVC架构")
- en: View / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  id: totrans-7270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图/ [MVC架构](part0130.xhtml#aid-3RV941 "MVC架构")
- en: Controller / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  id: totrans-7271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器/ [MVC架构](part0130.xhtml#aid-3RV941 "MVC架构")
- en: best practice / [MVC critics and best practices](part0131.xhtml#aid-3STPM1 "MVC
    critics and best practices")
  id: totrans-7272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践/ [MVC评论家和最佳实践](part0131.xhtml#aid-3STPM1 "MVC评论家和最佳实践")
- en: critics / [MVC critics and best practices](part0131.xhtml#aid-3STPM1 "MVC critics
    and best practices")
  id: totrans-7273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评论家/ [MVC评论家和最佳实践](part0131.xhtml#aid-3STPM1 "MVC评论家和最佳实践")
- en: Anemic Domain Model / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic
    Domain Model")
  id: totrans-7274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贫血领域模型/ [贫血领域模型](part0131.xhtml#aid-3STPM1 "贫血领域模型")
- en: sagan project / [Learning from the sources](part0131.xhtml#aid-3STPM1 "Learning
    from the sources")
  id: totrans-7275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sagan项目/ [从源代码中学习](part0131.xhtml#aid-3STPM1 "从源代码中学习")
- en: sagan project, URL / [Learning from the sources](part0131.xhtml#aid-3STPM1 "Learning
    from the sources")
  id: totrans-7276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sagan项目，URL/ [从源代码中学习](part0131.xhtml#aid-3STPM1 "从源代码中学习")
- en: MVC design pattern / [MVC design pattern](part0085.xhtml#aid-2H1VQ2 "MVC design
    pattern")
  id: totrans-7277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC设计模式/ [MVC设计模式](part0085.xhtml#aid-2H1VQ2 "MVC设计模式")
- en: MVC exceptions
  id: totrans-7278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC异常
- en: URL / [See also](part0099.xhtml#aid-2UD7M2 "See also")
  id: totrans-7279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [另请参阅](part0099.xhtml#aid-2UD7M2 "另请参阅")
- en: N
  id: totrans-7280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: N
- en: native SQL queries
  id: totrans-7281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本机SQL查询
- en: using / [Using native SQL queries](part0094.xhtml#aid-2PKKS2 "Using native SQL
    queries")
  id: totrans-7282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用本机SQL查询](part0094.xhtml#aid-2PKKS2 "使用本机SQL查询")
- en: URL / [Using native SQL queries](part0094.xhtml#aid-2PKKS2 "Using native SQL
    queries")
  id: totrans-7283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [使用本机SQL查询](part0094.xhtml#aid-2PKKS2 "使用本机SQL查询")
- en: navigation
  id: totrans-7284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航
- en: using / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  id: totrans-7285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [导航](part0138.xhtml#aid-43JDK2 "导航")
- en: Redirect option / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  id: totrans-7286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向选项/ [导航](part0138.xhtml#aid-43JDK2 "导航")
- en: Forward option / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  id: totrans-7287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前向选项/ [导航](part0138.xhtml#aid-43JDK2 "导航")
- en: no-cascaded operations
  id: totrans-7288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无级联操作
- en: about / [The Cascade attribute](part0093.xhtml#aid-2OM4A2 "The Cascade attribute")
  id: totrans-7289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [级联属性](part0093.xhtml#aid-2OM4A2 "级联属性")
- en: Node.js
  id: totrans-7290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: URL / [Setting up Ember CLI](part0064.xhtml#aid-1T1402 "Setting up Ember CLI")
  id: totrans-7291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [设置Ember CLI](part0064.xhtml#aid-1T1402 "设置Ember CLI")
- en: O
  id: totrans-7292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: O
- en: OAuth
  id: totrans-7293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth
- en: data, retrieving from third-party API / [Retrieving data from a third-party
    API with OAuth](part0112.xhtml#aid-3APV02 "Retrieving data from a third-party
    API with OAuth"), [How to do it…](part0112.xhtml#aid-3APV02 "How to do it…")
  id: totrans-7294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据，从第三方API检索/ [使用OAuth从第三方API检索数据](part0112.xhtml#aid-3APV02 "使用OAuth从第三方API检索数据"),
    [操作方法…](part0112.xhtml#aid-3APV02 "操作方法…")
- en: OAuth2 Authentication Server (AS)
  id: totrans-7295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2认证服务器（AS）
- en: about / [Getting ready](part0105.xhtml#aid-344B22 "Getting ready")
  id: totrans-7296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [准备工作](part0105.xhtml#aid-344B22 "准备工作")
- en: OAuth2 Authorization Framework
  id: totrans-7297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2授权框架
- en: about / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2 "The
    OAuth2 Authorization Framework")
  id: totrans-7298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [OAuth2授权框架](part0058.xhtml#aid-1NA0K2 "OAuth2授权框架")
- en: entities / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2 "The
    OAuth2 Authorization Framework")
  id: totrans-7299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体/ [OAuth2授权框架](part0058.xhtml#aid-1NA0K2 "OAuth2授权框架")
- en: OAuth developments
  id: totrans-7300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth开发
- en: alias definition for / [Alias definition for OAuth developments](part0102.xhtml#aid-318PC2
    "Alias definition for OAuth developments")
  id: totrans-7301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名定义 / [OAuth开发的别名定义](part0102.xhtml#aid-318PC2 "OAuth开发的别名定义")
- en: Object Oriented Programming (OOP)
  id: totrans-7302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）
- en: about / [Aspect Oriented Programming](part0025.xhtml#aid-NQU22 "Aspect Oriented
    Programming")
  id: totrans-7303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [面向方面的编程](part0025.xhtml#aid-NQU22 "面向方面的编程")
- en: one thread per HTTP connection strategy / [Asynchronous request processing in
    Spring MVC](part0035.xhtml#aid-11C3M1 "Asynchronous request processing in Spring
    MVC")
  id: totrans-7304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个HTTP连接策略一个线程 / [Spring MVC中的异步请求处理](part0035.xhtml#aid-11C3M1 "Spring MVC中的异步请求处理")
- en: OpenShift
  id: totrans-7305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift
- en: about / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
  id: totrans-7306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
- en: URL / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
  id: totrans-7307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
- en: Oracle Hotspot JDK
  id: totrans-7308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle Hotspot JDK
- en: URL / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  id: totrans-7309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [操作方法…](part0080.xhtml#aid-2C9D01 "操作方法…")
- en: P
  id: totrans-7310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: P
- en: Page Objects
  id: totrans-7311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面对象
- en: with FluentLenium / [Page Objects with FluentLenium](part0184.xhtml#aid-5FF7G2
    "Page Objects with FluentLenium")
  id: totrans-7312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FluentLenium/ [使用FluentLenium的页面对象](part0184.xhtml#aid-5FF7G2 "使用FluentLenium的页面对象")
- en: with Geb / [Page Objects with Geb](part0184.xhtml#aid-5FF7G2 "Page Objects with
    Geb")
  id: totrans-7313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Geb/ [使用Geb的页面对象](part0184.xhtml#aid-5FF7G2 "使用Geb的页面对象")
- en: pagination
  id: totrans-7314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分页
- en: adding / [Adding pagination, filters, and sorting capabilities](part0098.xhtml#aid-2TEN42
    "Adding pagination, filters, and sorting capabilities"), [How to do it...](part0098.xhtml#aid-2TEN42
    "How to do it..."), [How it works...](part0098.xhtml#aid-2TEN42 "How it works...")
  id: totrans-7315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加/ [添加分页、过滤和排序功能](part0098.xhtml#aid-2TEN42 "添加分页、过滤和排序功能"), [如何做...](part0098.xhtml#aid-2TEN42
    "如何做..."), [它是如何工作的...](part0098.xhtml#aid-2TEN42 "它是如何工作的...")
- en: Spring Data pagination support / [Spring Data pagination support (you will love
    it!)](part0098.xhtml#aid-2TEN42 "Spring Data pagination support (you will love
    it!)")
  id: totrans-7316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring数据分页支持/ [Spring数据分页支持（您会喜欢它！）](part0098.xhtml#aid-2TEN42 "Spring数据分页支持（您会喜欢它！）")
- en: and sorting in repositories / [Pagination and sorting in repositories](part0098.xhtml#aid-2TEN42
    "Pagination and sorting in repositories")
  id: totrans-7317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和存储库中的排序/ [存储库中的分页和排序](part0098.xhtml#aid-2TEN42 "存储库中的分页和排序")
- en: PagingAndSortingRepository<T,ID> / [PagingAndSortingRepository<T,ID>](part0098.xhtml#aid-2TEN42
    "PagingAndSortingRepository<T,ID>")
  id: totrans-7318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PagingAndSortingRepository<T,ID>/ [PagingAndSortingRepository<T,ID>](part0098.xhtml#aid-2TEN42
    "PagingAndSortingRepository<T,ID>")
- en: PageableHandlerMethodArgumentResolver / [The web part – PageableHandlerMethodArgumentResolver](part0098.xhtml#aid-2TEN42
    "The web part – PageableHandlerMethodArgumentResolver")
  id: totrans-7319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PageableHandlerMethodArgumentResolver/ [web部分-PageableHandlerMethodArgumentResolver](part0098.xhtml#aid-2TEN42
    "web部分-PageableHandlerMethodArgumentResolver")
- en: payload mapping
  id: totrans-7320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载映射
- en: requesting, with @RequestBody / [Mapping request payloads with @RequestBody](part0114.xhtml#aid-3CN042
    "Mapping request payloads with @RequestBody")
  id: totrans-7321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@RequestBody请求/ [使用@RequestBody映射请求负载](part0114.xhtml#aid-3CN042 "使用@RequestBody映射请求负载")
- en: Permanent Generation(PermGen)
  id: totrans-7322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久代（PermGen）
- en: about / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing JVM
    arguments")
  id: totrans-7323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [自定义JVM参数](part0081.xhtml#aid-2D7TI2 "自定义JVM参数")
- en: persistence unit
  id: totrans-7324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化单元
- en: about / [The EntityManagerFactory bean and its persistence unit](part0092.xhtml#aid-2NNJO2
    "The EntityManagerFactory bean and its persistence unit")
  id: totrans-7325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [EntityManagerFactory bean及其持久化单元](part0092.xhtml#aid-2NNJO2 "EntityManagerFactory
    bean及其持久化单元")
- en: PhantomJS
  id: totrans-7326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhantomJS
- en: URL / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2 "Our first FluentLenium
    test")
  id: totrans-7327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [我们的第一个FluentLenium测试](part0184.xhtml#aid-5FF7G2 "我们的第一个FluentLenium测试")
- en: Pivotal Web Services (PWS)
  id: totrans-7328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pivotal Web Services（PWS）
- en: web application, deploying / [Deploying your web application to Pivotal Web
    Services](part0197.xhtml#aid-5RRUQ2 "Deploying your web application to Pivotal
    Web Services")
  id: totrans-7329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序，部署/ [将您的Web应用程序部署到Pivotal Web Services](part0197.xhtml#aid-5RRUQ2 "将您的Web应用程序部署到Pivotal
    Web Services")
- en: Plain Java Objects (POJOs)
  id: totrans-7330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通的Java对象（POJOs）
- en: about / [Introduction](part0091.xhtml#aid-2MP361 "Introduction")
  id: totrans-7331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [介绍](part0091.xhtml#aid-2MP361 "介绍")
- en: Plain Old Java Object (POJO)
  id: totrans-7332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通的旧Java对象（POJO）
- en: about / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  id: totrans-7333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: plain old Java objects (POJOs)
  id: totrans-7334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通的旧Java对象（POJOs）
- en: about / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  id: totrans-7335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [贫血领域模型](part0131.xhtml#aid-3STPM1 "贫血领域模型")
- en: Plain Old Java Objects (POJOs)
  id: totrans-7336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通的旧Java对象（POJOs）
- en: about / [Domain objects and entities](part0049.xhtml#aid-1ENBI2 "Domain objects
    and entities")
  id: totrans-7337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [领域对象和实体](part0049.xhtml#aid-1ENBI2 "领域对象和实体")
- en: plugins
  id: totrans-7338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件
- en: about / [Plugins](part0083.xhtml#aid-2F4UM2 "Plugins")
  id: totrans-7339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [插件](part0083.xhtml#aid-2F4UM2 "插件")
- en: Maven compiler plugin / [The Maven compiler plugin](part0083.xhtml#aid-2F4UM2
    "The Maven compiler plugin")
  id: totrans-7340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven编译器插件/ [Maven编译器插件](part0083.xhtml#aid-2F4UM2 "Maven编译器插件")
- en: Maven surefire plugin / [The Maven surefire plugin](part0083.xhtml#aid-2F4UM2
    "The Maven surefire plugin")
  id: totrans-7341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven surefire插件/ [Maven surefire插件](part0083.xhtml#aid-2F4UM2 "Maven surefire插件")
- en: Maven enforcer plugin / [The Maven enforcer plugin](part0083.xhtml#aid-2F4UM2
    "The Maven enforcer plugin")
  id: totrans-7342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven enforcer插件/ [Maven enforcer插件](part0083.xhtml#aid-2F4UM2 "Maven enforcer插件")
- en: Maven war plugin / [The Maven war plugin](part0083.xhtml#aid-2F4UM2 "The Maven
    war plugin")
  id: totrans-7343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven war插件/ [Maven war插件](part0083.xhtml#aid-2F4UM2 "Maven war插件")
- en: Maven checkstyle plugin / [The Maven checkstyle plugin](part0083.xhtml#aid-2F4UM2
    "The Maven checkstyle plugin")
  id: totrans-7344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven checkstyle插件/ [Maven checkstyle插件](part0083.xhtml#aid-2F4UM2 "Maven checkstyle插件")
- en: POD structure
  id: totrans-7345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POD结构
- en: working with / [Working with the POD structure](part0064.xhtml#aid-1T1402 "Working
    with the POD structure")
  id: totrans-7346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与之一起工作/ [与POD结构一起工作](part0064.xhtml#aid-1T1402 "与POD结构一起工作")
- en: pointcut designators (PCDs)
  id: totrans-7347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切入点设计者（PCDs）
- en: about / [Pointcut designators](part0025.xhtml#aid-NQU22 "Pointcut designators")
  id: totrans-7348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [切入点设计者](part0025.xhtml#aid-NQU22 "切入点设计者")
- en: pointcuts, @AspectJ annotation
  id: totrans-7349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切入点，@AspectJ注解
- en: about / [Pointcuts](part0025.xhtml#aid-NQU22 "Pointcuts")
  id: totrans-7350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [切入点](part0025.xhtml#aid-NQU22 "切入点")
- en: designators / [Pointcut designators](part0025.xhtml#aid-NQU22 "Pointcut designators")
  id: totrans-7351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计者/ [切入点设计者](part0025.xhtml#aid-NQU22 "切入点设计者")
- en: examples / [Pointcut examples](part0025.xhtml#aid-NQU22 "Pointcut examples")
  id: totrans-7352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例/ [切入点示例](part0025.xhtml#aid-NQU22 "切入点示例")
- en: POJO (Plain Old Java Objects) / [Design concepts behind Spring Framework](part0013.xhtml#aid-CCNA1
    "Design concepts behind Spring Framework")
  id: totrans-7353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POJO（普通的旧Java对象）/ [Spring框架背后的设计概念](part0013.xhtml#aid-CCNA1 "Spring框架背后的设计概念")
- en: Procfile
  id: totrans-7354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Procfile
- en: running / [Procfile](part0198.xhtml#aid-5SQFC2 "Procfile")
  id: totrans-7355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行/ [Procfile](part0198.xhtml#aid-5SQFC2 "Procfile")
- en: production profile
  id: totrans-7356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产配置文件
- en: configuring / [A production profile](part0187.xhtml#aid-5IAP61 "A production
    profile")
  id: totrans-7357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置/ [生产配置文件](part0187.xhtml#aid-5IAP61 "生产配置文件")
- en: profile
  id: totrans-7358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人资料
- en: storing, in session / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2
    "Placing the profile in a session")
  id: totrans-7359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储，在会话中/ [将个人资料放入会话中](part0149.xhtml#aid-4E33Q2 "将个人资料放入会话中")
- en: profile page
  id: totrans-7360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人资料页面
- en: about / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  id: totrans-7361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: creating / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile
    page – a form")
  id: totrans-7362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: validation, adding / [Validation](part0142.xhtml#aid-47DFS2 "Validation")
  id: totrans-7363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加验证/ [验证](part0142.xhtml#aid-47DFS2 "验证")
- en: client validation, enabling / [Client validation](part0144.xhtml#aid-49AH01
    "Client validation")
  id: totrans-7364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用客户端验证/ [客户端验证](part0144.xhtml#aid-49AH01 "客户端验证")
- en: check point / [The check point](part0145.xhtml#aid-4A91I1 "The check point")
  id: totrans-7365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查点/ [检查点](part0145.xhtml#aid-4A91I1 "检查点")
- en: Project Object Model (POM)
  id: totrans-7366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目对象模型（POM）
- en: about / [Why making use of Maven?](part0079.xhtml#aid-2BASE1 "Why making use
    of Maven?")
  id: totrans-7367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [为什么要使用Maven？](part0079.xhtml#aid-2BASE1 "为什么要使用Maven？")
- en: project structure
  id: totrans-7368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: defining, with Maven / [Defining the project structure with Maven](part0082.xhtml#aid-2E6E42
    "Defining the project structure with Maven"), [Getting ready](part0082.xhtml#aid-2E6E42
    "Getting ready"), [How to do it...](part0082.xhtml#aid-2E6E42 "How to do it...")
  id: totrans-7369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven定义/ [使用Maven定义项目结构](part0082.xhtml#aid-2E6E42 "使用Maven定义项目结构"), [准备就绪](part0082.xhtml#aid-2E6E42
    "准备就绪"), [如何做...](part0082.xhtml#aid-2E6E42 "如何做...")
- en: Maven project, creating / [New Maven project, new Maven module](part0082.xhtml#aid-2E6E42
    "New Maven project, new Maven module")
  id: totrans-7370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Maven项目/ [新的Maven项目，新的Maven模块](part0082.xhtml#aid-2E6E42 "新的Maven项目，新的Maven模块")
- en: Maven module, creating / [New Maven project, new Maven module](part0082.xhtml#aid-2E6E42
    "New Maven project, new Maven module")
  id: totrans-7371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Maven模块/ [新的Maven项目，新的Maven模块](part0082.xhtml#aid-2E6E42 "新的Maven项目，新的Maven模块")
- en: standard project hierarchy / [The standard project hierarchy](part0082.xhtml#aid-2E6E42
    "The standard project hierarchy")
  id: totrans-7372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准项目层次结构/ [标准项目层次结构](part0082.xhtml#aid-2E6E42 "标准项目层次结构")
- en: in IDE / [The project's structure in the IDE](part0082.xhtml#aid-2E6E42 "The
    project's structure in the IDE")
  id: totrans-7373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IDE中/ [IDE中的项目结构](part0082.xhtml#aid-2E6E42 "IDE中的项目结构")
- en: properties
  id: totrans-7374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: injecting, into Spring environment / [Injecting properties into the Spring environment](part0021.xhtml#aid-K0RQ1
    "Injecting properties into the Spring environment")
  id: totrans-7375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入到Spring环境中/ [将属性注入到Spring环境中](part0021.xhtml#aid-K0RQ1 "将属性注入到Spring环境中")
- en: PropertyEditor/ConversionService / [Choosing between PropertyEditors or converters](part0096.xhtml#aid-2RHM02
    "Choosing between PropertyEditors or converters")
  id: totrans-7376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PropertyEditor/ConversionService/ [在PropertyEditors或转换器之间进行选择](part0096.xhtml#aid-2RHM02
    "在PropertyEditors或转换器之间进行选择")
- en: PropertyEditor implementations
  id: totrans-7377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PropertyEditor实现
- en: about / [Built-in PropertyEditor implementations](part0096.xhtml#aid-2RHM02
    "Built-in PropertyEditor implementations")
  id: totrans-7378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [内置的PropertyEditor实现](part0096.xhtml#aid-2RHM02 "内置的PropertyEditor实现")
- en: PropertyPlaceholderConfigurer
  id: totrans-7379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PropertyPlaceholderConfigurer
- en: about / [Externalizing properties with PropertyPlaceholderConfigurer](part0022.xhtml#aid-KVCC1
    "Externalizing properties with PropertyPlaceholderConfigurer")
  id: totrans-7380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [使用PropertyPlaceholderConfigurer外部化属性](part0022.xhtml#aid-KVCC1 "使用PropertyPlaceholderConfigurer外部化属性")
- en: properties, externalizing with / [Externalizing properties with PropertyPlaceholderConfigurer](part0022.xhtml#aid-KVCC1
    "Externalizing properties with PropertyPlaceholderConfigurer")
  id: totrans-7381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性，外部化/ [使用PropertyPlaceholderConfigurer外部化属性](part0022.xhtml#aid-KVCC1 "使用PropertyPlaceholderConfigurer外部化属性")
- en: provider-specific configuration, third-party OAuth2 scheme
  id: totrans-7382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于提供程序的配置，第三方OAuth2方案
- en: about / [Provider-specific configuration](part0105.xhtml#aid-344B22 "Provider-specific
    configuration")
  id: totrans-7383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [特定于提供程序的配置](part0105.xhtml#aid-344B22 "特定于提供程序的配置")
- en: connectionFactoryLocator bean / [One entry-point – connectionFactoryLocator](part0105.xhtml#aid-344B22
    "One entry-point – connectionFactoryLocator")
  id: totrans-7384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: connectionFactoryLocator bean/ [一个入口点-connectionFactoryLocator](part0105.xhtml#aid-344B22
    "一个入口点-connectionFactoryLocator")
- en: Provider-specific ConnectionFactories / [Provider-specific ConnectionFactories](part0105.xhtml#aid-344B22
    "Provider-specific ConnectionFactories")
  id: totrans-7385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于提供程序的ConnectionFactories/ [特定于提供程序的ConnectionFactories](part0105.xhtml#aid-344B22
    "特定于提供程序的ConnectionFactories")
- en: provider accounts, signing in with / [Signing in with provider accounts](part0105.xhtml#aid-344B22
    "Signing in with provider accounts")
  id: totrans-7386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提供程序帐户登录/ [使用提供程序帐户登录](part0105.xhtml#aid-344B22 "使用提供程序帐户登录")
- en: authenticated API calls, performing / [Performing authenticated API calls](part0105.xhtml#aid-344B22
    "Performing authenticated API calls")
  id: totrans-7387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证的API调用，执行/ [执行验证的API调用](part0105.xhtml#aid-344B22 "执行验证的API调用")
- en: Spring social ConnectController / [The Spring social ConnectController](part0105.xhtml#aid-344B22
    "The Spring social ConnectController")
  id: totrans-7388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring social ConnectController/ [Spring social ConnectController](part0105.xhtml#aid-344B22
    "Spring social ConnectController")
- en: SocialAuthenticationFilter / [SocialAuthenticationFilter](part0105.xhtml#aid-344B22
    "SocialAuthenticationFilter ")
  id: totrans-7389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SocialAuthenticationFilter/ [SocialAuthenticationFilter](part0105.xhtml#aid-344B22
    "SocialAuthenticationFilter ")
- en: Spring social connectors, list / [The list of Spring social connectors](part0105.xhtml#aid-344B22
    "The list of Spring social connectors")
  id: totrans-7390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring社交连接器列表/ [Spring社交连接器列表](part0105.xhtml#aid-344B22 "Spring社交连接器列表")
- en: OAuth2 authentication server, implementing / [Implementing an OAuth2 authentication
    server](part0105.xhtml#aid-344B22 "Implementing an OAuth2 authentication server")
  id: totrans-7391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现OAuth2认证服务器/ [实现OAuth2认证服务器](part0105.xhtml#aid-344B22 "实现OAuth2认证服务器")
- en: harmonic development blog / [The harmonic development blog](part0105.xhtml#aid-344B22
    "The harmonic development blog")
  id: totrans-7392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和谐发展博客/ [和谐发展博客](part0105.xhtml#aid-344B22 "和谐发展博客")
- en: proxy mode
  id: totrans-7393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理模式
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  id: totrans-7394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [还有更多...](part0102.xhtml#aid-318PC2 "还有更多...")
- en: ProxyPassReverse
  id: totrans-7395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ProxyPassReverse
- en: about / [ProxyPassReverse](part0102.xhtml#aid-318PC2 "ProxyPassReverse")
  id: totrans-7396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [ProxyPassReverse](part0102.xhtml#aid-318PC2 "ProxyPassReverse")
- en: workers / [Workers](part0102.xhtml#aid-318PC2 "Workers")
  id: totrans-7397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作者/ [工作者](part0102.xhtml#aid-318PC2 "工作者")
- en: Q
  id: totrans-7398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q
- en: query lookup strategies
  id: totrans-7399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询查找策略
- en: defining / [Query resolution methods](part0049.xhtml#aid-1ENBI2 "Query resolution
    methods")
  id: totrans-7400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义/ [查询解析方法](part0049.xhtml#aid-1ENBI2 "查询解析方法")
- en: query parameters
  id: totrans-7401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询参数
- en: about / [Getting data with a request parameter](part0135.xhtml#aid-40NRU1 "Getting
    data with a request parameter")
  id: totrans-7402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [使用请求参数获取数据](part0135.xhtml#aid-40NRU1 "使用请求参数获取数据")
- en: R
  id: totrans-7403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: R
- en: '@Repository annotation'
  id: totrans-7404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Repository注释'
- en: about / [DAO support and @Repository annotation](part0047.xhtml#aid-1CQAE1 "DAO
    support and @Repository annotation")
  id: totrans-7405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [DAO支持和@Repository注释](part0047.xhtml#aid-1CQAE1 "DAO支持和@Repository注释")
- en: '@RequestBody'
  id: totrans-7406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestBody'
- en: payload mapping, requesting with / [Mapping request payloads with @RequestBody](part0114.xhtml#aid-3CN042
    "Mapping request payloads with @RequestBody")
  id: totrans-7407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求负载映射/ [使用@RequestBody映射请求负载](part0114.xhtml#aid-3CN042 "使用@RequestBody映射请求负载")
- en: '@RequestMapping'
  id: totrans-7408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestMapping'
- en: new support classes / [New support classes for @RequestMapping since Spring
    MVC 3.1](part0089.xhtml#aid-2KS222 "New support classes for @RequestMapping since
    Spring MVC 3.1")
  id: totrans-7409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的支持类/ [自Spring MVC 3.1以来@RequestMapping的新支持类](part0089.xhtml#aid-2KS222 "自Spring
    MVC 3.1以来@RequestMapping的新支持类")
- en: '@RequestMapping annotation / [@RequestMapping](part0085.xhtml#aid-2H1VQ2 "@RequestMapping")'
  id: totrans-7410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestMapping注释/ [@RequestMapping](part0085.xhtml#aid-2H1VQ2 "@RequestMapping")'
- en: '@RequestMapping annotations'
  id: totrans-7411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestMapping注释'
- en: support for / [Broad support for @RequestMapping annotations](part0096.xhtml#aid-2RHM02
    "Broad support for @RequestMapping annotations")
  id: totrans-7412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持/ [广泛支持@RequestMapping注释](part0096.xhtml#aid-2RHM02 "广泛支持@RequestMapping注释")
- en: setMessageConverters / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
  id: totrans-7413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setMessageConverters/ [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
- en: setCustomArgumentResolvers / [setCustomArgumentResolvers](part0096.xhtml#aid-2RHM02
    "setCustomArgumentResolvers")
  id: totrans-7414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setCustomArgumentResolvers/ [setCustomArgumentResolvers](part0096.xhtml#aid-2RHM02
    "setCustomArgumentResolvers")
- en: setWebBindingInitializer / [setWebBindingInitializer](part0096.xhtml#aid-2RHM02
    "setWebBindingInitializer")
  id: totrans-7415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setWebBindingInitializer / [setWebBindingInitializer](part0096.xhtml#aid-2RHM02
    "setWebBindingInitializer")
- en: as ultimate filters / [@RequestMapping annotations as ultimate filters](part0097.xhtml#aid-2SG6I2
    "@RequestMapping annotations as ultimate filters")
  id: totrans-7416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为终极过滤器使用/ [@RequestMapping注释作为终极过滤器](part0097.xhtml#aid-2SG6I2 "@RequestMapping注释作为终极过滤器")
- en: '@RequestPart'
  id: totrans-7417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestPart'
- en: used, for uploading image / [Using @RequestPart to upload an image](part0114.xhtml#aid-3CN042
    "Using @RequestPart to upload an image")
  id: totrans-7418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于上传图像/ [使用@RequestPart上传图像](part0114.xhtml#aid-3CN042 "使用@RequestPart上传图像")
- en: '@RunWith annotation'
  id: totrans-7419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RunWith注释'
- en: about / [The @RunWith annotation](part0125.xhtml#aid-3N6MA2 "The @RunWith annotation")
  id: totrans-7420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [@RunWith注释](part0125.xhtml#aid-3N6MA2 "@RunWith注释")
- en: RabbitMQ
  id: totrans-7421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ
- en: using, as multiprotocol message broker / [Using RabbitMQ as a multiprotocol
    message broker](part0120.xhtml#aid-3IE3G2 "Using RabbitMQ as a multiprotocol message
    broker"), [How to do it…](part0120.xhtml#aid-3IE3G2 "How to do it…")
  id: totrans-7422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为多协议消息代理使用/ [将RabbitMQ用作多协议消息代理](part0120.xhtml#aid-3IE3G2 "将RabbitMQ用作多协议消息代理"),
    [如何做...](part0120.xhtml#aid-3IE3G2 "如何做...")
- en: URL / [How to do it…](part0120.xhtml#aid-3IE3G2 "How to do it…")
  id: totrans-7423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [如何做...](part0120.xhtml#aid-3IE3G2 "如何做...")
- en: guide and documentation, URL / [See also](part0120.xhtml#aid-3IE3G2 "See also")
  id: totrans-7424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指南和文档，URL/ [另请参阅](part0120.xhtml#aid-3IE3G2 "另请参阅")
- en: tasks, securing with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  id: totrans-7425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务，使用Spring Session和Redis进行保护/ [准备工作](part0121.xhtml#aid-3JCK22 "准备工作")
- en: tasks, consuming with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  id: totrans-7426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务，使用Spring Session和Redis进行保护/ [准备工作](part0121.xhtml#aid-3JCK22 "准备工作")
- en: raphael.js library
  id: totrans-7427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: raphael.js库
- en: URL / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating responsive
    content")
  id: totrans-7428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [创建响应式内容](part0087.xhtml#aid-2IV0U2 "创建响应式内容")
- en: React
  id: totrans-7429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React
- en: about / [The players](part0203.xhtml#aid-61J261 "The players")
  id: totrans-7430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [玩家](part0203.xhtml#aid-61J261 "玩家")
- en: ReactJS
  id: totrans-7431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  id: totrans-7432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架")
- en: Redis
  id: totrans-7433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: messages, securing with / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  id: totrans-7434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息，使用Spring Session和Redis进行保护/ [使用Spring Session和Redis保护消息](part0122.xhtml#aid-3KB4K2
    "使用Spring Session和Redis保护消息")
- en: URL / [Redis server installation](part0122.xhtml#aid-3KB4K2 "Redis server installation"),
    [Distributed sessions](part0171.xhtml#aid-532G61 "Distributed sessions")
  id: totrans-7435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Redis服务器安装](part0122.xhtml#aid-3KB4K2 "Redis服务器安装"), [分布式会话](part0171.xhtml#aid-532G61
    "分布式会话")
- en: activating / [Activating Redis](part0197.xhtml#aid-5RRUQ2 "Activating Redis"),
    [Activating Redis](part0198.xhtml#aid-5SQFC2 "Activating Redis")
  id: totrans-7436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活/ [激活Redis](part0197.xhtml#aid-5RRUQ2 "激活Redis"), [激活Redis](part0198.xhtml#aid-5SQFC2
    "激活Redis")
- en: relationships, EJB3 entities
  id: totrans-7437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系，EJB3实体
- en: defining / [Defining relationships](part0093.xhtml#aid-2OM4A2 "Defining relationships")
  id: totrans-7438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义/ [定义关系](part0093.xhtml#aid-2OM4A2 "定义关系")
- en: selecting / [How relationships between entities have been chosen](part0093.xhtml#aid-2OM4A2
    "How relationships between entities have been chosen")
  id: totrans-7439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择/ [实体之间的关系是如何选择的](part0093.xhtml#aid-2OM4A2 "实体之间的关系是如何选择的")
- en: remoting
  id: totrans-7440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程
- en: URL / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
  id: totrans-7441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
- en: repair command / [Repair](part0124.xhtml#aid-3M85O2 "Repair"), [About Flyway
    Maven plugin](part0124.xhtml#aid-3M85O2 "About Flyway Maven plugin")
  id: totrans-7442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复命令/ [修复](part0124.xhtml#aid-3M85O2 "修复"), [关于Flyway Maven插件](part0124.xhtml#aid-3M85O2
    "关于Flyway Maven插件")
- en: repository manager
  id: totrans-7443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库管理器
- en: about / [A repository manager](part0081.xhtml#aid-2D7TI2 "A repository manager")
  id: totrans-7444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [存储库管理器](part0081.xhtml#aid-2D7TI2 "存储库管理器")
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  id: totrans-7445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [还有更多...](part0081.xhtml#aid-2D7TI2 "还有更多...")
- en: Representational State Transfer (REST)
  id: totrans-7446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REpresentational State Transfer (REST)
- en: about / [A definition of REST](part0095.xhtml#aid-2QJ5E1 "A definition of REST")
  id: totrans-7447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [REST的定义](part0095.xhtml#aid-2QJ5E1 "REST的定义")
- en: Restful CloudStreetMarket / [RESTful CloudStreetMarket](part0095.xhtml#aid-2QJ5E1
    "RESTful CloudStreetMarket")
  id: totrans-7448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Restful CloudStreetMarket/ [RESTful CloudStreetMarket](part0095.xhtml#aid-2QJ5E1
    "RESTful CloudStreetMarket")
- en: REpresentational State Transfer (REST)
  id: totrans-7449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REpresentational State Transfer (REST)
- en: about / [Building RESTful services for JSON and XML media](part0034.xhtml#aid-10DJ42
    "Building RESTful services for JSON and XML media")
  id: totrans-7450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [为JSON和XML媒体构建RESTful服务](part0034.xhtml#aid-10DJ42 "为JSON和XML媒体构建RESTful服务")
- en: Request channel / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  id: totrans-7451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求通道/ [Spring 4中STOMP over WebSocket和回退选项](part0054.xhtml#aid-1JFUC2 "Spring
    4中STOMP over WebSocket和回退选项")
- en: RequestMappingHandlerAdapter
  id: totrans-7452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RequestMappingHandlerAdapter
- en: URL / [New support classes for @RequestMapping since Spring MVC 3.1](part0089.xhtml#aid-2KS222
    "New support classes for @RequestMapping since Spring MVC 3.1")
  id: totrans-7453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [自Spring MVC 3.1以来@RequestMapping的新支持类](part0089.xhtml#aid-2KS222 "自Spring
    MVC 3.1以来@RequestMapping的新支持类")
- en: RequestMappingHandlerAdapter bean
  id: totrans-7454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RequestMappingHandlerAdapter bean
- en: about / [A super RequestMappingHandlerAdapter bean](part0096.xhtml#aid-2RHM02
    "A super RequestMappingHandlerAdapter bean")
  id: totrans-7455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [一个超级RequestMappingHandlerAdapter bean](part0096.xhtml#aid-2RHM02 "一个超级RequestMappingHandlerAdapter
    bean")
- en: resources
  id: totrans-7456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源
- en: handling / [Handling resources](part0023.xhtml#aid-LTSU1 "Handling resources")
  id: totrans-7457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 / [处理资源](part0023.xhtml#aid-LTSU1 "处理资源")
- en: ResourceSupport class / [The ResourceSupport class](part0109.xhtml#aid-37UDA2
    "The ResourceSupport class")
  id: totrans-7458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ResourceSupport类 / [ResourceSupport类](part0109.xhtml#aid-37UDA2 "ResourceSupport类")
- en: Response channel / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  id: totrans-7459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应通道 / [Spring 4中STOMP over WebSocket和回退选项](part0054.xhtml#aid-1JFUC2 "Spring
    4中STOMP over WebSocket和回退选项")
- en: ResponseEntityExceptionHandler
  id: totrans-7460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ResponseEntityExceptionHandler
- en: URL / [JavaDocs](part0099.xhtml#aid-2UD7M2 "JavaDocs")
  id: totrans-7461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [JavaDocs](part0099.xhtml#aid-2UD7M2 "JavaDocs")
- en: responsive content
  id: totrans-7462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式内容
- en: creating / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating
    responsive content")
  id: totrans-7463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 / [创建响应式内容](part0087.xhtml#aid-2IV0U2 "创建响应式内容")
- en: responsive single page Webdesign
  id: totrans-7464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式单页Web设计
- en: setting-up, with Bootstrap / [Setting up and customizing a responsive single
    page webdesign with Bootstrap](part0087.xhtml#aid-2IV0U2 "Setting up and customizing
    a responsive single page webdesign with Bootstrap"), [How to do it...](part0087.xhtml#aid-2IV0U2
    "How to do it...")
  id: totrans-7465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap设置 / [使用Bootstrap设置和自定义响应式单页Web设计](part0087.xhtml#aid-2IV0U2 "使用Bootstrap设置和自定义响应式单页Web设计"),
    [如何做...](part0087.xhtml#aid-2IV0U2 "如何做...")
- en: Bootstrap theme, customising / [Customising a Bootstrap theme](part0087.xhtml#aid-2IV0U2
    "Customising a Bootstrap theme")
  id: totrans-7466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义Bootstrap主题 / [自定义Bootstrap主题](part0087.xhtml#aid-2IV0U2 "自定义Bootstrap主题")
- en: responsive single page Webdesign
  id: totrans-7467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式单页Web设计
- en: Bootstrap theme, installing / [Installing a Bootstrap theme](part0087.xhtml#aid-2IV0U2
    "Installing a Bootstrap theme")
  id: totrans-7468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Bootstrap主题 / [安装Bootstrap主题](part0087.xhtml#aid-2IV0U2 "安装Bootstrap主题")
- en: Bootstrap theme, customising / [Customising a Bootstrap theme](part0087.xhtml#aid-2IV0U2
    "Customising a Bootstrap theme")
  id: totrans-7469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义Bootstrap主题 / [自定义Bootstrap主题](part0087.xhtml#aid-2IV0U2 "自定义Bootstrap主题")
- en: REST
  id: totrans-7470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST
- en: about / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  id: totrans-7471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [什么是REST？](part0155.xhtml#aid-4JQ761 "什么是REST？")
- en: Rest-assured
  id: totrans-7472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rest-assured
- en: integration testing with / [Integration testing with Cargo, Rest-assured, and
    Maven failsafe](part0126.xhtml#aid-3O56S2 "Integration testing with Cargo, Rest-assured,
    and Maven failsafe"), [How to do it…](part0126.xhtml#aid-3O56S2 "How to do it…"),
    [How it works...](part0126.xhtml#aid-3O56S2 "How it works...")
  id: totrans-7473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与之集成测试 / [使用Cargo，Rest-assured和Maven failsafe进行集成测试](part0126.xhtml#aid-3O56S2
    "使用Cargo，Rest-assured和Maven failsafe进行集成测试"), [如何做...](part0126.xhtml#aid-3O56S2
    "如何做..."), [它是如何工作的...](part0126.xhtml#aid-3O56S2 "它是如何工作的...")
- en: about / [Rest assured](part0126.xhtml#aid-3O56S2 "Rest assured")
  id: totrans-7474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Rest assured](part0126.xhtml#aid-3O56S2 "Rest assured")
- en: static imports / [Static imports](part0126.xhtml#aid-3O56S2 "Static imports")
  id: totrans-7475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态导入 / [静态导入](part0126.xhtml#aid-3O56S2 "静态导入")
- en: usage / [A Given, When, Then approach](part0126.xhtml#aid-3O56S2 "A Given, When,
    Then approach")
  id: totrans-7476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法 / [一种给定，当，然后的方法](part0126.xhtml#aid-3O56S2 "一种给定，当，然后的方法")
- en: REST-assured
  id: totrans-7477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST-assured
- en: example / [More REST-assured examples](part0126.xhtml#aid-3O56S2 "More REST-assured
    examples")
  id: totrans-7478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 / [更多REST-assured示例](part0126.xhtml#aid-3O56S2 "更多REST-assured示例")
- en: example, URL / [More REST-assured examples](part0126.xhtml#aid-3O56S2 "More
    REST-assured examples")
  id: totrans-7479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例，URL / [更多REST-assured示例](part0126.xhtml#aid-3O56S2 "更多REST-assured示例")
- en: REST controllers
  id: totrans-7480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST控制器
- en: unit testing / [Unit testing REST controllers](part0182.xhtml#aid-5DI6C2 "Unit
    testing REST controllers")
  id: totrans-7481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 / [单元测试REST控制器](part0182.xhtml#aid-5DI6C2 "单元测试REST控制器")
- en: REST environment
  id: totrans-7482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST环境
- en: credentials, storing / [Storing credentials in a REST environment](part0106.xhtml#aid-352RK2
    "Storing credentials in a REST environment")
  id: totrans-7483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭据，存储 / [在REST环境中存储凭据](part0106.xhtml#aid-352RK2 "在REST环境中存储凭据")
- en: client side (AngularJS) / [Client side (AngularJS)](part0106.xhtml#aid-352RK2
    "Client side (AngularJS)")
  id: totrans-7484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端（AngularJS） / [客户端（AngularJS）](part0106.xhtml#aid-352RK2 "客户端（AngularJS）")
- en: server side / [Server side](part0106.xhtml#aid-352RK2 "Server side")
  id: totrans-7485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端 / [服务器端](part0106.xhtml#aid-352RK2 "服务器端")
- en: microservices, authenticating for / [Authenticating for Microservices](part0106.xhtml#aid-352RK2
    "Authenticating for Microservices")
  id: totrans-7486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务，用于身份验证 / [用于微服务的身份验证](part0106.xhtml#aid-352RK2 "用于微服务的身份验证")
- en: BASIC authentication, using / [Using the BASIC authentication](part0106.xhtml#aid-352RK2
    "Using the BASIC authentication")
  id: totrans-7487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用BASIC身份验证 / [使用BASIC身份验证](part0106.xhtml#aid-352RK2 "使用BASIC身份验证")
- en: Sign-in, using with OAuth / [Using OAuth2](part0106.xhtml#aid-352RK2 "Using
    OAuth2")
  id: totrans-7488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OAuth进行登录 / [使用OAuth2](part0106.xhtml#aid-352RK2 "使用OAuth2")
- en: HTML5 SessionStorage / [HTML5 SessionStorage](part0106.xhtml#aid-352RK2 "HTML5
    SessionStorage")
  id: totrans-7489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 SessionStorage / [HTML5 SessionStorage](part0106.xhtml#aid-352RK2 "HTML5
    SessionStorage")
- en: BCryptPasswordEncoder / [BCryptPasswordEncoder](part0106.xhtml#aid-352RK2 "BCryptPasswordEncoder")
  id: totrans-7490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BCryptPasswordEncoder / [BCryptPasswordEncoder](part0106.xhtml#aid-352RK2 "BCryptPasswordEncoder")
- en: HTTP headers, setting with AngularJS / [Setting HTTP headers with AngularJS](part0106.xhtml#aid-352RK2
    "Setting HTTP headers with AngularJS")
  id: totrans-7491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP头，使用AngularJS设置 / [使用AngularJS设置HTTP头](part0106.xhtml#aid-352RK2 "使用AngularJS设置HTTP头")
- en: browser support, for localStorage / [Browser support for localStorage](part0106.xhtml#aid-352RK2
    "Browser support for localStorage")
  id: totrans-7492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器支持，用于localStorage / [用于localStorage的浏览器支持](part0106.xhtml#aid-352RK2 "用于localStorage的浏览器支持")
- en: SSL and TLS / [About SSL and TLS](part0106.xhtml#aid-352RK2 "About SSL and TLS")
  id: totrans-7493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL和TLS / [关于SSL和TLS](part0106.xhtml#aid-352RK2 "关于SSL和TLS")
- en: RESTful API, debugging
  id: totrans-7494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful API，调试
- en: about / [Debugging a RESTful API](part0160.xhtml#aid-4OIQ01 "Debugging a RESTful
    API")
  id: totrans-7495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [调试RESTful API](part0160.xhtml#aid-4OIQ01 "调试RESTful API")
- en: JSON formatting extension / [A JSON formatting extension](part0160.xhtml#aid-4OIQ01
    "A JSON formatting extension")
  id: totrans-7496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON格式化扩展 / [JSON格式化扩展](part0160.xhtml#aid-4OIQ01 "JSON格式化扩展")
- en: RESTful client, in browser / [A RESTful client in your browser](part0160.xhtml#aid-4OIQ01
    "A RESTful client in your browser")
  id: totrans-7497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器中的RESTful客户端 / [浏览器中的RESTful客户端](part0160.xhtml#aid-4OIQ01 "浏览器中的RESTful客户端")
- en: httpie / [httpie](part0160.xhtml#aid-4OIQ01 "httpie")
  id: totrans-7498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: httpie / [httpie](part0160.xhtml#aid-4OIQ01 "httpie")
- en: RESTful web service, properties
  id: totrans-7499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful web服务，属性
- en: client-server / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  id: totrans-7500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端-服务器 / [什么是REST？](part0155.xhtml#aid-4JQ761 "什么是REST？")
- en: stateless / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  id: totrans-7501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态的 / [什么是REST？](part0155.xhtml#aid-4JQ761 "什么是REST？")
- en: cacheable / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  id: totrans-7502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可缓存的 / [什么是REST？](part0155.xhtml#aid-4JQ761 "什么是REST？")
- en: uniform interface / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  id: totrans-7503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一接口 / [什么是REST？](part0155.xhtml#aid-4JQ761 "什么是REST？")
- en: layered / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  id: totrans-7504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分层的 / [什么是REST？](part0155.xhtml#aid-4JQ761 "什么是REST？")
- en: REST handlers
  id: totrans-7505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST处理程序
- en: extending, to HTTP methods / [Extending REST handlers to all HTTP methods](part0114.xhtml#aid-3CN042
    "Extending REST handlers to all HTTP methods"), [How to do it…](part0114.xhtml#aid-3CN042
    "How to do it…"), [How it works...](part0114.xhtml#aid-3CN042 "How it works...")
  id: totrans-7506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展，到HTTP方法 / [将REST处理程序扩展到所有HTTP方法](part0114.xhtml#aid-3CN042 "将REST处理程序扩展到所有HTTP方法"),
    [如何做…](part0114.xhtml#aid-3CN042 "如何做…"), [它是如何工作的...](part0114.xhtml#aid-3CN042
    "它是如何工作的...")
- en: HTTP/1.1 specifications / [HTTP/1.1 specifications – RFC 7231 semantics and
    content](part0114.xhtml#aid-3CN042 "HTTP/1.1 specifications – RFC 7231 semantics
    and content")
  id: totrans-7507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP/1.1规范 / [HTTP/1.1规范 - RFC 7231语义和内容](part0114.xhtml#aid-3CN042 "HTTP/1.1规范
    - RFC 7231语义和内容")
- en: payload mapping, requesting with @RequestBody / [Mapping request payloads with
    @RequestBody](part0114.xhtml#aid-3CN042 "Mapping request payloads with @RequestBody")
  id: totrans-7508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载映射，使用@RequestBody请求 / [使用@RequestBody映射请求负载](part0114.xhtml#aid-3CN042 "使用@RequestBody映射请求负载")
- en: HttpMessageConverters / [HttpMessageConverters](part0114.xhtml#aid-3CN042 "HttpMessageConverters")
  id: totrans-7509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HttpMessageConverters / [HttpMessageConverters](part0114.xhtml#aid-3CN042 "HttpMessageConverters")
- en: '@RequestPart, used for uploading image / [Using @RequestPart to upload an image](part0114.xhtml#aid-3CN042
    "Using @RequestPart to upload an image")'
  id: totrans-7510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RequestPart，用于上传图像 / [使用@RequestPart上传图像](part0114.xhtml#aid-3CN042 "使用@RequestPart上传图像")'
- en: transaction management / [Transaction management](part0114.xhtml#aid-3CN042
    "Transaction management")
  id: totrans-7511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理 / [事务管理](part0114.xhtml#aid-3CN042 "事务管理")
- en: Richardson's maturity model
  id: totrans-7512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Richardson的成熟模型
- en: about / [Richardson's maturity model](part0156.xhtml#aid-4KONO2 "Richardson's
    maturity model")
  id: totrans-7513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Richardson的成熟模型](part0156.xhtml#aid-4KONO2 "Richardson的成熟模型")
- en: level 0 - HTTP / [Level 0 – HTTP](part0156.xhtml#aid-4KONO2 "Level 0 – HTTP")
  id: totrans-7514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级别0 - HTTP / [级别0 - HTTP](part0156.xhtml#aid-4KONO2 "级别0 - HTTP")
- en: level 1 - Resources / [Level 1 – Resources](part0156.xhtml#aid-4KONO2 "Level
    1 – Resources")
  id: totrans-7515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级别1 - 资源 / [级别1 - 资源](part0156.xhtml#aid-4KONO2 "级别1 - 资源")
- en: "level 2 \x96 HTTP verbs / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2\
    \ \"Level 2 – HTTP verbs\")"
  id: totrans-7516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级别2 - HTTP动词 / [级别2 - HTTP动词](part0156.xhtml#aid-4KONO2 "级别2 - HTTP动词")
- en: "level 3 \x96 Hypermedia controls / [Level 3 – Hypermedia controls](part0156.xhtml#aid-4KONO2\
    \ \"Level 3 – Hypermedia controls\")"
  id: totrans-7517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级别3 - 超媒体控制 / [级别3 - 超媒体控制](part0156.xhtml#aid-4KONO2 "级别3 - 超媒体控制")
- en: Richardson Maturity Model
  id: totrans-7518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Richardson成熟模型
- en: about / [The Richardson Maturity Model](part0108.xhtml#aid-36VSO1 "The Richardson
    Maturity Model")
  id: totrans-7519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Richardson成熟模型](part0108.xhtml#aid-36VSO1 "Richardson成熟模型")
- en: URL / [The Richardson Maturity Model](part0108.xhtml#aid-36VSO1 "The Richardson
    Maturity Model")
  id: totrans-7520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Richardson成熟模型](part0108.xhtml#aid-36VSO1 "Richardson成熟模型")
- en: ROME project
  id: totrans-7521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROME项目
- en: URL / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided HttpMessageConverters")
  id: totrans-7522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [提供的HttpMessageConverters](part0114.xhtml#aid-3CN042 "提供的HttpMessageConverters")
- en: root name servers / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  id: totrans-7523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根名称服务器 / [DNS配置或主机别名](part0102.xhtml#aid-318PC2 "DNS配置或主机别名")
- en: routes
  id: totrans-7524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: handling / [Handling routes](part0068.xhtml#aid-20R681 "Handling routes")
  id: totrans-7525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 / [处理路由](part0068.xhtml#aid-20R681 "处理路由")
- en: routine
  id: totrans-7526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例行
- en: need for / [Why such a routine?](part0079.xhtml#aid-2BASE1 "Why such a routine?")
  id: totrans-7527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要 / [为什么需要这样的例行？](part0079.xhtml#aid-2BASE1 "为什么需要这样的例行？")
- en: S
  id: totrans-7528
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: S
- en: '@SendTo annotation / [The @SendTo annotation](part0119.xhtml#aid-3HFIU2 "The
    @SendTo annotation")'
  id: totrans-7529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@SendTo注释 / [ @SendTo注释](part0119.xhtml#aid-3HFIU2 " @SendTo注释")'
- en: Saas-providers
  id: totrans-7530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Saas提供商
- en: URL / [The list of Spring social connectors](part0105.xhtml#aid-344B22 "The
    list of Spring social connectors")
  id: totrans-7531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Spring社交连接器列表](part0105.xhtml#aid-344B22 "Spring社交连接器列表")
- en: schema, EJB3 entities
  id: totrans-7532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式，EJB3实体
- en: mapping / [Mapping the schema](part0093.xhtml#aid-2OM4A2 "Mapping the schema")
  id: totrans-7533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射 / [映射模式](part0093.xhtml#aid-2OM4A2 "映射模式")
- en: tables, mapping / [Mapping tables](part0093.xhtml#aid-2OM4A2 "Mapping tables")
  id: totrans-7534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表，映射 / [映射表](part0093.xhtml#aid-2OM4A2 "映射表")
- en: columns, mapping / [Mapping columns](part0093.xhtml#aid-2OM4A2 "Mapping columns")
  id: totrans-7535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列，映射 / [映射列](part0093.xhtml#aid-2OM4A2 "映射列")
- en: fields, annotating / [Annotating fields or getters](part0093.xhtml#aid-2OM4A2
    "Annotating fields or getters")
  id: totrans-7536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段，注释 / [注释字段或getter](part0093.xhtml#aid-2OM4A2 "注释字段或getter")
- en: getters, annotating / [Annotating fields or getters](part0093.xhtml#aid-2OM4A2
    "Annotating fields or getters")
  id: totrans-7537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: getter，注释 / [注释字段或getter](part0093.xhtml#aid-2OM4A2 "注释字段或getter")
- en: primary keys, mapping / [Mapping primary keys](part0093.xhtml#aid-2OM4A2 "Mapping
    primary keys")
  id: totrans-7538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键，映射 / [映射主键](part0093.xhtml#aid-2OM4A2 "映射主键")
- en: identifier generation / [Identifier generation](part0093.xhtml#aid-2OM4A2 "Identifier
    generation")
  id: totrans-7539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符生成 / [标识符生成](part0093.xhtml#aid-2OM4A2 "标识符生成")
- en: SearchApiController class
  id: totrans-7540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SearchApiController类
- en: creating, in search.api package / [Client is the king](part0159.xhtml#aid-4NK9E1
    "Client is the king")
  id: totrans-7541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在search.api包中创建 / [客户是王](part0159.xhtml#aid-4NK9E1 "客户是王")
- en: securityContextPersistenceFilter / [securityContextPersistenceFilter](part0122.xhtml#aid-3KB4K2
    "securityContextPersistenceFilter")
  id: totrans-7542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: securityContextPersistenceFilter / [securityContextPersistenceFilter](part0122.xhtml#aid-3KB4K2
    "securityContextPersistenceFilter")
- en: security headers
  id: totrans-7543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全头
- en: about / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized users")
  id: totrans-7544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [授权用户](part0168.xhtml#aid-506UG2 "授权用户")
- en: URL / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized users")
  id: totrans-7545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [授权用户](part0168.xhtml#aid-506UG2 "授权用户")
- en: self-signed certificate
  id: totrans-7546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自签名证书
- en: generating / [Generating a self-signed certificate](part0172.xhtml#aid-5410O2
    "Generating a self-signed certificate")
  id: totrans-7547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成 / [生成自签名证书](part0172.xhtml#aid-5410O2 "生成自签名证书")
- en: serializers
  id: totrans-7548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列化器
- en: URL / [Jackson custom serializers](part0111.xhtml#aid-39REE2 "Jackson custom
    serializers")
  id: totrans-7549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Jackson自定义序列化器](part0111.xhtml#aid-39REE2 "Jackson自定义序列化器")
- en: Service classes / [XML-based configuration metadata](part0016.xhtml#aid-F8902
    "XML-based configuration metadata")
  id: totrans-7550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务类 / [基于XML的配置元数据](part0016.xhtml#aid-F8902 "基于XML的配置元数据")
- en: Service Provider (SP)
  id: totrans-7551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务提供商（SP）
- en: about / [Getting ready](part0105.xhtml#aid-344B22 "Getting ready")
  id: totrans-7552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [准备就绪](part0105.xhtml#aid-344B22 "准备就绪")
- en: services
  id: totrans-7553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: authorizing on / [Authorizing on services and controllers](part0107.xhtml#aid-361C62
    "Authorizing on services and controllers"), [How to do it...](part0107.xhtml#aid-361C62
    "How to do it...")
  id: totrans-7554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权 / [在服务和控制器上进行授权](part0107.xhtml#aid-361C62 "在服务和控制器上进行授权"), [如何做...](part0107.xhtml#aid-361C62
    "如何做...")
- en: SessionRepositoryFilter
  id: totrans-7555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SessionRepositoryFilter
- en: about / [SessionRepositoryFilter](part0122.xhtml#aid-3KB4K2 "SessionRepositoryFilter")
  id: totrans-7556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [SessionRepositoryFilter](part0122.xhtml#aid-3KB4K2 "SessionRepositoryFilter")
- en: RedisConnectionFactory / [RedisConnectionFactory](part0122.xhtml#aid-3KB4K2
    "RedisConnectionFactory")
  id: totrans-7557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RedisConnectionFactory / [RedisConnectionFactory](part0122.xhtml#aid-3KB4K2
    "RedisConnectionFactory")
- en: setter-based DI
  id: totrans-7558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于setter的DI
- en: about / [Constructor-based or setter-based DI – which is better?](part0017.xhtml#aid-G6PI2
    "Constructor-based or setter-based DI – which is better?")
  id: totrans-7559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [基于构造函数还是基于setter的DI - 哪个更好？](part0017.xhtml#aid-G6PI2 "基于构造函数还是基于setter的DI
    - 哪个更好？")
- en: SimpleJdbc classes / [SimpleJdbc classes](part0048.xhtml#aid-1DOR02 "SimpleJdbc
    classes")
  id: totrans-7560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SimpleJdbc类 / [SimpleJdbc类](part0048.xhtml#aid-1DOR02 "SimpleJdbc类")
- en: Simple Text Oriented Messaging Protocol (STOMP)
  id: totrans-7561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单文本导向消息协议（STOMP）
- en: about / [The STOMP protocol](part0119.xhtml#aid-3HFIU2 "The STOMP protocol")
  id: totrans-7562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [STOMP协议](part0119.xhtml#aid-3HFIU2 "STOMP协议")
- en: URL / [The STOMP protocol](part0119.xhtml#aid-3HFIU2 "The STOMP protocol")
  id: totrans-7563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [STOMP协议](part0119.xhtml#aid-3HFIU2 "STOMP协议")
- en: simple URL mapping
  id: totrans-7564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单URL映射
- en: used, for configuring controller / [Configuring a controller with simple URL
    mapping](part0085.xhtml#aid-2H1VQ2 "Configuring a controller with simple URL mapping"),
    [How to do it...](part0085.xhtml#aid-2H1VQ2 "How to do it...")
  id: totrans-7565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于配置控制器 / [使用简单URL映射配置控制器](part0085.xhtml#aid-2H1VQ2 "使用简单URL映射配置控制器"), [如何做...](part0085.xhtml#aid-2H1VQ2
    "如何做...")
- en: simple WebSocket application
  id: totrans-7566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单WebSocket应用程序
- en: creating / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")
  id: totrans-7567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 / [创建一个简单的WebSocket应用程序](part0053.xhtml#aid-1IHDQ2 "创建一个简单的WebSocket应用程序")
- en: single-page application (SPA)
  id: totrans-7568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页应用程序（SPA）
- en: motivations / [The motivations behind SPAs](part0060.xhtml#aid-1P71O1 "The motivations
    behind SPAs")
  id: totrans-7569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动机 / [SPA背后的动机](part0060.xhtml#aid-1P71O1 "SPA背后的动机")
- en: about / [SPAs explained](part0061.xhtml#aid-1Q5IA1 "SPAs explained")
  id: totrans-7570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [解释SPA](part0061.xhtml#aid-1Q5IA1 "解释SPA")
- en: architectural benefits / [The architectural benefits of SPAs](part0061.xhtml#aid-1Q5IA1
    "The architectural benefits of SPAs")
  id: totrans-7571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构优势 / [SPA的架构优势](part0061.xhtml#aid-1Q5IA1 "SPA的架构优势")
- en: Single Page Applications
  id: totrans-7572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页应用
- en: about / [Single Page Applications](part0203.xhtml#aid-61J261 "Single Page Applications")
  id: totrans-7573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [单页应用程序](part0203.xhtml#aid-61J261 "单页应用程序")
- en: recommendations / [The players](part0203.xhtml#aid-61J261 "The players")
  id: totrans-7574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议 / [参与者](part0203.xhtml#aid-61J261 "参与者")
- en: future enhancements / [The future](part0203.xhtml#aid-61J261 "The future")
  id: totrans-7575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来的增强 / [未来](part0203.xhtml#aid-61J261 "未来")
- en: stateless option / [Going stateless](part0203.xhtml#aid-61J261 "Going stateless")
  id: totrans-7576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态选项 / [无状态化](part0203.xhtml#aid-61J261 "无状态化")
- en: reference link / [Going stateless](part0203.xhtml#aid-61J261 "Going stateless")
  id: totrans-7577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [无状态化](part0203.xhtml#aid-61J261 "无状态化")
- en: SLF4j
  id: totrans-7578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4j
- en: case / [The case of SLF4j](part0128.xhtml#aid-3Q2802 "The case of SLF4j")
  id: totrans-7579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例 / [SLF4j的案例](part0128.xhtml#aid-3Q2802 "SLF4j的案例")
- en: SLF4J Bridge / [SLF4J Bridge](part0128.xhtml#aid-3Q2802 "SLF4J Bridge")
  id: totrans-7580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4J桥接器 / [SLF4J桥接器](part0128.xhtml#aid-3Q2802 "SLF4J桥接器")
- en: social events
  id: totrans-7581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交事件
- en: streaming, with STOMP over SockJS / [Streaming social events with STOMP over
    SockJS](part0119.xhtml#aid-3HFIU2 "Streaming social events with STOMP over SockJS
    ") , [How to do it…](part0119.xhtml#aid-3HFIU2 "How to do it…")
  id: totrans-7582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用STOMP通过SockJS进行流式传输 / [使用STOMP通过SockJS进行流式传输社交事件](part0119.xhtml#aid-3HFIU2
    "使用STOMP通过SockJS进行流式传输社交事件 ") , [如何做...](part0119.xhtml#aid-3HFIU2 "如何做...")
- en: Apache HTTP Proxy configuration / [Apache HTTP Proxy configuration](part0119.xhtml#aid-3HFIU2
    "Apache HTTP Proxy configuration")
  id: totrans-7583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP代理配置 / [Apache HTTP代理配置](part0119.xhtml#aid-3HFIU2 "Apache HTTP代理配置")
- en: front end / [Frontend](part0119.xhtml#aid-3HFIU2 "Frontend")
  id: totrans-7584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端 / [前端](part0119.xhtml#aid-3HFIU2 "前端")
- en: front end, URL / [Frontend](part0119.xhtml#aid-3HFIU2 "Frontend")
  id: totrans-7585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端，URL / [前端](part0119.xhtml#aid-3HFIU2 "前端")
- en: back-end / [Backend](part0119.xhtml#aid-3HFIU2 "Backend"), [How it works...](part0119.xhtml#aid-3HFIU2
    "How it works...")
  id: totrans-7586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端 / [后端](part0119.xhtml#aid-3HFIU2 "后端"), [它是如何工作的...](part0119.xhtml#aid-3HFIU2
    "它是如何工作的...")
- en: SockJS
  id: totrans-7587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SockJS
- en: about / [SockJS](part0119.xhtml#aid-3HFIU2 "SockJS")
  id: totrans-7588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [SockJS](part0119.xhtml#aid-3HFIU2 "SockJS")
- en: URL / [SockJS](part0119.xhtml#aid-3HFIU2 "SockJS")
  id: totrans-7589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [SockJS](part0119.xhtml#aid-3HFIU2 "SockJS")
- en: fallback, options / [There's more…](part0119.xhtml#aid-3HFIU2 "There's more…")
  id: totrans-7590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回退，选项 / [还有更多...](part0119.xhtml#aid-3HFIU2 "还有更多...")
- en: client queries, URL / [There's more…](part0119.xhtml#aid-3HFIU2 "There's more…")
  id: totrans-7591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端查询，URL / [还有更多...](part0119.xhtml#aid-3HFIU2 "还有更多...")
- en: Sockjs
  id: totrans-7592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sockjs
- en: about / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  id: totrans-7593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
- en: SPA frameworks
  id: totrans-7594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPA框架
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  id: totrans-7595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架")
- en: AngularJS / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  id: totrans-7596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS / [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架")
- en: ReactJS / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  id: totrans-7597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS / [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架")
- en: Ember.js / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  id: totrans-7598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.js / [SPA框架](part0061.xhtml#aid-1Q5IA1 "SPA框架")
- en: SpEL (Spring Expression Language)
  id: totrans-7599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpEL（Spring表达式语言）
- en: about / [Query resolution methods](part0049.xhtml#aid-1ENBI2 "Query resolution
    methods")
  id: totrans-7600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [查询解析方法](part0049.xhtml#aid-1ENBI2 "查询解析方法")
- en: SpEL API
  id: totrans-7601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpEL API
- en: about / [The SpEL API](part0024.xhtml#aid-MSDG1 "The SpEL API")
  id: totrans-7602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [SpEL API](part0024.xhtml#aid-MSDG1 "SpEL API")
- en: interfaces and classes / [The SpEL API](part0024.xhtml#aid-MSDG1 "The SpEL API")
  id: totrans-7603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口和类 / [SpEL API](part0024.xhtml#aid-MSDG1 "SpEL API")
- en: Spock
  id: totrans-7604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spock
- en: used, for unit tests / [Unit tests with Spock](part0184.xhtml#aid-5FF7G2 "Unit
    tests with Spock")
  id: totrans-7605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于单元测试 / [使用Spock进行单元测试](part0184.xhtml#aid-5FF7G2 "使用Spock进行单元测试")
- en: Spring
  id: totrans-7606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring
- en: testing with / [Testing with Spring](part0026.xhtml#aid-OPEK1 "Testing with
    Spring")
  id: totrans-7607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [使用Spring进行测试](part0026.xhtml#aid-OPEK1 "使用Spring进行测试")
- en: installing / [Installing Spring, Spring MVC, and a web structure](part0083.xhtml#aid-2F4UM2
    "Installing Spring, Spring MVC, and a web structure"), [How to do it...](part0083.xhtml#aid-2F4UM2
    "How to do it..."), [How it works...](part0083.xhtml#aid-2F4UM2 "How it works...")
  id: totrans-7608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 / [安装Spring，Spring MVC和Web结构](part0083.xhtml#aid-2F4UM2 "安装Spring，Spring
    MVC和Web结构"), [如何做...](part0083.xhtml#aid-2F4UM2 "如何做..."), [它是如何工作的...](part0083.xhtml#aid-2F4UM2
    "它是如何工作的...")
- en: inheritance, of Maven dependencies / [Inheritance of Maven dependencies](part0083.xhtml#aid-2F4UM2
    "Inheritance of Maven dependencies")
  id: totrans-7609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven依赖项的继承 / [Maven依赖项的继承](part0083.xhtml#aid-2F4UM2 "Maven依赖项的继承")
- en: third-party dependencies, including / [Including third-party dependencies](part0083.xhtml#aid-2F4UM2
    "Including third-party dependencies")
  id: totrans-7610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括第三方依赖项 / [包括第三方依赖项](part0083.xhtml#aid-2F4UM2 "包括第三方依赖项")
- en: web resources / [The web resources](part0083.xhtml#aid-2F4UM2 "The web resources")
  id: totrans-7611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web资源 / [Web资源](part0083.xhtml#aid-2F4UM2 "Web资源")
- en: Java Persistence API (JPA), configuring / [Configuring the Java Persistence
    API in Spring](part0092.xhtml#aid-2NNJO2 "Configuring the Java Persistence API
    in Spring"), [How to do it...](part0092.xhtml#aid-2NNJO2 "How to do it..."), [How
    it works...](part0092.xhtml#aid-2NNJO2 "How it works...")
  id: totrans-7612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久性API（JPA），配置 / [在Spring中配置Java持久性API](part0092.xhtml#aid-2NNJO2 "在Spring中配置Java持久性API"),
    [如何做...](part0092.xhtml#aid-2NNJO2 "如何做..."), [它是如何工作的...](part0092.xhtml#aid-2NNJO2
    "它是如何工作的...")
- en: ecosystem / [The Spring ecosystem](part0201.xhtml#aid-5VM121 "The Spring ecosystem")
  id: totrans-7613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生态系统 / [Spring生态系统](part0201.xhtml#aid-5VM121 "Spring生态系统")
- en: URL / [The Spring ecosystem](part0201.xhtml#aid-5VM121 "The Spring ecosystem")
  id: totrans-7614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Spring生态系统](part0201.xhtml#aid-5VM121 "Spring生态系统")
- en: core / [Core](part0201.xhtml#aid-5VM121 "Core")
  id: totrans-7615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心 / [核心](part0201.xhtml#aid-5VM121 "核心")
- en: execution / [Execution](part0201.xhtml#aid-5VM121 "Execution")
  id: totrans-7616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 / [执行](part0201.xhtml#aid-5VM121 "执行")
- en: XD project, URL / [Execution](part0201.xhtml#aid-5VM121 "Execution")
  id: totrans-7617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XD项目，URL / [执行](part0201.xhtml#aid-5VM121 "执行")
- en: data / [Data](part0201.xhtml#aid-5VM121 "Data")
  id: totrans-7618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据 / [数据](part0201.xhtml#aid-5VM121 "数据")
- en: noteworthy projects / [Other noteworthy projects](part0201.xhtml#aid-5VM121
    "Other noteworthy projects")
  id: totrans-7619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值得注意的项目 / [其他值得注意的项目](part0201.xhtml#aid-5VM121 "其他值得注意的项目")
- en: Spring's JSF integration
  id: totrans-7620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring的JSF集成
- en: about / [Spring's JSF integration](part0075.xhtml#aid-27GQ62 "Spring's JSF integration")
  id: totrans-7621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring的JSF集成](part0075.xhtml#aid-27GQ62 "Spring的JSF集成")
- en: Spring's Struts integration
  id: totrans-7622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring的Struts集成
- en: about / [Spring's Struts integration](part0076.xhtml#aid-28FAO1 "Spring's Struts
    integration")
  id: totrans-7623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring的Struts集成](part0076.xhtml#aid-28FAO1 "Spring的Struts集成")
- en: Spring-managed DataSource bean
  id: totrans-7624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring管理的DataSource bean
- en: about / [The Spring-managed DataSource bean](part0092.xhtml#aid-2NNJO2 "The
    Spring-managed DataSource bean")
  id: totrans-7625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring管理的DataSource bean](part0092.xhtml#aid-2NNJO2 "Spring管理的DataSource
    bean")
- en: spring-messaging module
  id: totrans-7626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: spring-messaging模块
- en: about / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  id: totrans-7627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring 4中的STOMP over WebSocket和回退选项](part0054.xhtml#aid-1JFUC2 "Spring
    4中的STOMP over WebSocket和回退选项")
- en: spring-security-crypto
  id: totrans-7628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: spring-security-crypto
- en: URL / [Social connection persistence](part0105.xhtml#aid-344B22 "Social connection
    persistence")
  id: totrans-7629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [社交连接持久性](part0105.xhtml#aid-344B22 "社交连接持久性")
- en: Spring-websocket-portfolio
  id: totrans-7630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring-websocket-portfolio
- en: URL / [See also](part0122.xhtml#aid-3KB4K2 "See also")
  id: totrans-7631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0122.xhtml#aid-3KB4K2 "另请参阅")
- en: Spring 4.2+
  id: totrans-7632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 4.2+
- en: URL / [A better way to publish application events](part0121.xhtml#aid-3JCK22
    "A better way to publish application events")
  id: totrans-7633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [发布应用程序事件的更好方法](part0121.xhtml#aid-3JCK22 "发布应用程序事件的更好方法")
- en: Spring AOP
  id: totrans-7634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring AOP
- en: definition / [Spring AOP – definition and configuration styles](part0025.xhtml#aid-NQU22
    "Spring AOP – definition and configuration styles")
  id: totrans-7635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 / [Spring AOP - 定义和配置样式](part0025.xhtml#aid-NQU22 "Spring AOP - 定义和配置样式")
- en: configuration styles / [Spring AOP – definition and configuration styles](part0025.xhtml#aid-NQU22
    "Spring AOP – definition and configuration styles")
  id: totrans-7636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置样式 / [Spring AOP - 定义和配置样式](part0025.xhtml#aid-NQU22 "Spring AOP - 定义和配置样式")
- en: Spring application
  id: totrans-7637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring应用程序
- en: about / [Your first Spring application](part0015.xhtml#aid-E9OE1 "Your first
    Spring application")
  id: totrans-7638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [你的第一个Spring应用程序](part0015.xhtml#aid-E9OE1 "你的第一个Spring应用程序")
- en: Inversion of Control (IoC) / [Inversion of Control explained](part0015.xhtml#aid-E9OE1
    "Inversion of Control explained")
  id: totrans-7639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制反转（IoC）/ [控制反转解释](part0015.xhtml#aid-E9OE1 "控制反转解释")
- en: Spring Beans
  id: totrans-7640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Beans
- en: injecting, in integration tests / [Injecting Spring Beans into integration tests](part0127.xhtml#aid-3P3NE2
    "Injecting Spring Beans into integration tests"), [How to do it…](part0127.xhtml#aid-3P3NE2
    "How to do it…")
  id: totrans-7641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集成测试中注入 / [将Spring Beans注入集成测试](part0127.xhtml#aid-3P3NE2 "将Spring Beans注入集成测试"),
    [如何做...](part0127.xhtml#aid-3P3NE2 "如何做...")
- en: SpringJUnit4ClassRunner / [SpringJUnit4ClassRunner](part0127.xhtml#aid-3P3NE2
    "SpringJUnit4ClassRunner")
  id: totrans-7642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpringJUnit4ClassRunner / [SpringJUnit4ClassRunner](part0127.xhtml#aid-3P3NE2
    "SpringJUnit4ClassRunner")
- en: '@ContextConfiguration annotation / [The @ContextConfiguration annotation](part0127.xhtml#aid-3P3NE2
    "The @ContextConfiguration annotation"), [There is more…](part0127.xhtml#aid-3P3NE2
    "There is more…")'
  id: totrans-7643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@ContextConfiguration注释 / [ @ContextConfiguration注释](part0127.xhtml#aid-3P3NE2
    " @ContextConfiguration注释"), [还有更多...](part0127.xhtml#aid-3P3NE2 "还有更多...")'
- en: JdbcTemplate / [JdbcTemplate](part0127.xhtml#aid-3P3NE2 "JdbcTemplate")
  id: totrans-7644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JdbcTemplate / [JdbcTemplate](part0127.xhtml#aid-3P3NE2 "JdbcTemplate")
- en: boilerplate logic, abstraction / [Abstraction of boilerplate logic](part0127.xhtml#aid-3P3NE2
    "Abstraction of boilerplate logic")
  id: totrans-7645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样板逻辑，抽象 / [抽象样板逻辑](part0127.xhtml#aid-3P3NE2 "抽象样板逻辑")
- en: auto-generated IDs, extraction / [Extraction of auto-generated IDs](part0127.xhtml#aid-3P3NE2
    "Extraction of auto-generated IDs")
  id: totrans-7646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动生成的ID，提取 / [提取自动生成的ID](part0127.xhtml#aid-3P3NE2 "提取自动生成的ID")
- en: Spring Boot
  id: totrans-7647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot
- en: logging in / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile
    page – a form")
  id: totrans-7648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录 / [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: URL / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  id: totrans-7649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [个人资料页面-表单](part0141.xhtml#aid-46EVA2 "个人资料页面-表单")
- en: Spring Data
  id: totrans-7650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data
- en: about / [Spring Data](part0049.xhtml#aid-1ENBI2 "Spring Data"), [Spring Data](part0098.xhtml#aid-2TEN42
    "Spring Data")
  id: totrans-7651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring Data](part0049.xhtml#aid-1ENBI2 "Spring Data"), [Spring Data](part0098.xhtml#aid-2TEN42
    "Spring Data")
- en: subprojects, defining / [Spring Data](part0049.xhtml#aid-1ENBI2 "Spring Data")
  id: totrans-7652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子项目，定义 / [Spring Data](part0049.xhtml#aid-1ENBI2 "Spring Data")
- en: Commons / [Spring Data Commons](part0049.xhtml#aid-1ENBI2 "Spring Data Commons")
  id: totrans-7653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Commons / [Spring Data Commons](part0049.xhtml#aid-1ENBI2 "Spring Data Commons")
- en: repository specification / [Spring Data repository specification](part0049.xhtml#aid-1ENBI2
    "Spring Data repository specification")
  id: totrans-7654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库规范 / [Spring Data存储库规范](part0049.xhtml#aid-1ENBI2 "Spring Data存储库规范")
- en: MongoDB / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
  id: totrans-7655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
- en: domain objects and entities / [Domain objects and entities](part0049.xhtml#aid-1ENBI2
    "Domain objects and entities")
  id: totrans-7656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域对象和实体 / [领域对象和实体](part0049.xhtml#aid-1ENBI2 "领域对象和实体")
- en: Spring Transaction support / [Spring Transaction support](part0050.xhtml#aid-1FLS41
    "Spring Transaction support")
  id: totrans-7657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring事务支持 / [Spring事务支持](part0050.xhtml#aid-1FLS41 "Spring事务支持")
- en: Spring Data Commons
  id: totrans-7658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data Commons
- en: defining / [Spring Data Commons](part0049.xhtml#aid-1ENBI2 "Spring Data Commons")
  id: totrans-7659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 / [Spring Data Commons](part0049.xhtml#aid-1ENBI2 "Spring Data Commons")
- en: Spring Data JPA
  id: totrans-7660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: configuring / [The Spring Data JPA configuration](part0092.xhtml#aid-2NNJO2
    "The Spring Data JPA configuration")
  id: totrans-7661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 / [Spring Data JPA配置](part0092.xhtml#aid-2NNJO2 "Spring Data JPA配置")
- en: using / [Making use of the JPA and Spring Data JPA](part0094.xhtml#aid-2PKKS2
    "Making use of the JPA and Spring Data JPA"), [How to do it...](part0094.xhtml#aid-2PKKS2
    "How to do it..."), [How it works...](part0094.xhtml#aid-2PKKS2 "How it works...")
  id: totrans-7662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [利用JPA和Spring Data JPA](part0094.xhtml#aid-2PKKS2 "利用JPA和Spring Data JPA"),
    [如何做...](part0094.xhtml#aid-2PKKS2 "如何做..."), [它是如何工作的...](part0094.xhtml#aid-2PKKS2
    "它是如何工作的...")
- en: EntityManager instance, injecting / [Injecting an EntityManager instance](part0094.xhtml#aid-2PKKS2
    "Injecting an EntityManager instance")
  id: totrans-7663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入EntityManager实例 / [注入EntityManager实例](part0094.xhtml#aid-2PKKS2 "注入EntityManager实例")
- en: Java Persistence Query Language (JPQL), using / [Using JPQL](part0094.xhtml#aid-2PKKS2
    "Using JPQL")
  id: totrans-7664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久性查询语言（JPQL），使用 / [使用JPQL](part0094.xhtml#aid-2PKKS2 "使用JPQL")
- en: code, reducing / [Reducing boilerplate code with Spring Data JPA](part0094.xhtml#aid-2PKKS2
    "Reducing boilerplate code with Spring Data JPA")
  id: totrans-7665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码，减少 / [使用Spring Data JPA减少样板代码](part0094.xhtml#aid-2PKKS2 "使用Spring Data JPA减少样板代码")
- en: query, creating / [Query creation](part0094.xhtml#aid-2PKKS2 "Query creation")
  id: totrans-7666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询，创建 / [创建查询](part0094.xhtml#aid-2PKKS2 "创建查询")
- en: entities, persisting / [Persisting Entities](part0094.xhtml#aid-2PKKS2 "Persisting
    Entities")
  id: totrans-7667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体，持久化 / [持久化实体](part0094.xhtml#aid-2PKKS2 "持久化实体")
- en: native SQL queries, using / [Using native SQL queries](part0094.xhtml#aid-2PKKS2
    "Using native SQL queries")
  id: totrans-7668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地SQL查询，使用 / [使用本地SQL查询](part0094.xhtml#aid-2PKKS2 "使用本地SQL查询")
- en: transactions, configuring / [Transactions](part0094.xhtml#aid-2PKKS2 "Transactions")
  id: totrans-7669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置事务 / [事务](part0094.xhtml#aid-2PKKS2 "事务")
- en: URL / [Data](part0201.xhtml#aid-5VM121 "Data")
  id: totrans-7670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [数据](part0201.xhtml#aid-5VM121 "数据")
- en: Spring Data layer
  id: totrans-7671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data层
- en: exceptions, handling / [Handling exceptions in the Spring Data layer](part0046.xhtml#aid-1BRPS1
    "Handling exceptions in the Spring Data layer")
  id: totrans-7672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理 / [在Spring Data层处理异常](part0046.xhtml#aid-1BRPS1 "在Spring Data层处理异常")
- en: Spring Data Mongo
  id: totrans-7673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data Mongo
- en: URL / [Data](part0201.xhtml#aid-5VM121 "Data")
  id: totrans-7674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [数据](part0201.xhtml#aid-5VM121 "数据")
- en: Spring Data MongoDB
  id: totrans-7675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data MongoDB
- en: about / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
  id: totrans-7676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
- en: enabling / [Enabling Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Enabling
    Spring Data MongoDB")
  id: totrans-7677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 / [启用Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "启用Spring Data MongoDB")
- en: MongoRepository / [MongoRepository](part0049.xhtml#aid-1ENBI2 "MongoRepository")
  id: totrans-7678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoRepository / [MongoRepository](part0049.xhtml#aid-1ENBI2 "MongoRepository")
- en: Spring Data Redis (SDR) framework / [Spring Data Redis and Spring Session Data
    Redis](part0122.xhtml#aid-3KB4K2 "Spring Data Redis and Spring Session Data Redis")
  id: totrans-7679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data Redis（SDR）框架 / [Spring Data Redis和Spring Session Data Redis](part0122.xhtml#aid-3KB4K2
    "Spring Data Redis和Spring Session Data Redis")
- en: Spring Data repositories
  id: totrans-7680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data存储库
- en: custom implementations / [See also](part0094.xhtml#aid-2PKKS2 "See also")
  id: totrans-7681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义实现 / [另请参阅](part0094.xhtml#aid-2PKKS2 "另请参阅")
- en: reference link / [See also](part0094.xhtml#aid-2PKKS2 "See also")
  id: totrans-7682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [另请参阅](part0094.xhtml#aid-2PKKS2 "另请参阅")
- en: Spring Data repository specification
  id: totrans-7683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data存储库规范
- en: about / [Spring Data repository specification](part0049.xhtml#aid-1ENBI2 "Spring
    Data repository specification")
  id: totrans-7684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring Data存储库规范](part0049.xhtml#aid-1ENBI2 "Spring Data存储库规范")
- en: Spring Data JPA / [Spring Data JPA](part0049.xhtml#aid-1ENBI2 "Spring Data JPA")
  id: totrans-7685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA / [Spring Data JPA](part0049.xhtml#aid-1ENBI2 "Spring Data JPA")
- en: Spring Data JPA, enabling / [Enabling Spring Data JPA](part0049.xhtml#aid-1ENBI2
    "Enabling Spring Data JPA")
  id: totrans-7686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA，启用 / [启用Spring Data JPA](part0049.xhtml#aid-1ENBI2 "启用Spring
    Data JPA")
- en: JpaRepository / [JpaRepository](part0049.xhtml#aid-1ENBI2 "JpaRepository")
  id: totrans-7687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JpaRepository / [JpaRepository](part0049.xhtml#aid-1ENBI2 "JpaRepository")
- en: Spring Data REST
  id: totrans-7688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data REST
- en: URL / [See also](part0109.xhtml#aid-37UDA2 "See also"), [Data](part0201.xhtml#aid-5VM121
    "Data")
  id: totrans-7689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0109.xhtml#aid-37UDA2 "另请参阅"), [数据](part0201.xhtml#aid-5VM121
    "数据")
- en: Spring EL
  id: totrans-7690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring EL
- en: URL / [Spring EL](part0107.xhtml#aid-361C62 "Spring EL")
  id: totrans-7691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Spring EL](part0107.xhtml#aid-361C62 "Spring EL")
- en: Spring Expression Language
  id: totrans-7692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring表达式语言
- en: about / [Spring Expression Language](part0024.xhtml#aid-MSDG1 "Spring Expression
    Language")
  id: totrans-7693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring表达式语言](part0024.xhtml#aid-MSDG1 "Spring表达式语言")
- en: features / [SpEL features](part0024.xhtml#aid-MSDG1 "SpEL features")
  id: totrans-7694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性 / [SpEL特性](part0024.xhtml#aid-MSDG1 "SpEL特性")
- en: annotation support / [SpEL annotation support](part0024.xhtml#aid-MSDG1 "SpEL
    annotation support")
  id: totrans-7695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解支持 / [SpEL注解支持](part0024.xhtml#aid-MSDG1 "SpEL注解支持")
- en: Spring Expression Language (SpEL)
  id: totrans-7696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring表达式语言（SpEL）
- en: about / [Spring Expression Language](part0135.xhtml#aid-40NRU1 "Spring Expression
    Language")
  id: totrans-7697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring表达式语言](part0135.xhtml#aid-40NRU1 "Spring表达式语言")
- en: URL / [Spring Expression Language](part0135.xhtml#aid-40NRU1 "Spring Expression
    Language")
  id: totrans-7698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Spring表达式语言](part0135.xhtml#aid-40NRU1 "Spring表达式语言")
- en: data, obtaining with request parameter / [Getting data with a request parameter](part0135.xhtml#aid-40NRU1
    "Getting data with a request parameter")
  id: totrans-7699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用请求参数获取数据 / [使用请求参数获取数据](part0135.xhtml#aid-40NRU1 "使用请求参数获取数据")
- en: Spring forms
  id: totrans-7700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring表单
- en: composing, in JSP / [Composing a form in JSP](part0038.xhtml#aid-147LC1 "Composing
    a form in JSP")
  id: totrans-7701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JSP中组合 / [在JSP中组合表单](part0038.xhtml#aid-147LC1 "在JSP中组合表单")
- en: validating / [Validating forms](part0039.xhtml#aid-1565U1 "Validating forms")
  id: totrans-7702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 / [验证表单](part0039.xhtml#aid-1565U1 "验证表单")
- en: Spring form tag libraries
  id: totrans-7703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring表单标签库
- en: about / [Spring and Spring form tag libraries](part0037.xhtml#aid-1394Q1 "Spring
    and Spring form tag libraries")
  id: totrans-7704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring和Spring表单标签库](part0037.xhtml#aid-1394Q1 "Spring和Spring表单标签库")
- en: Springfox
  id: totrans-7705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Springfox
- en: URL / [Documentation with Swagger](part0164.xhtml#aid-4SCS81 "Documentation
    with Swagger")
  id: totrans-7706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Swagger文档](part0164.xhtml#aid-4SCS81 "Swagger文档")
- en: Spring framework
  id: totrans-7707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架
- en: URL / [Built-in PropertyEditor implementations](part0096.xhtml#aid-2RHM02 "Built-in
    PropertyEditor implementations")
  id: totrans-7708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [内置的PropertyEditor实现](part0096.xhtml#aid-2RHM02 "内置的PropertyEditor实现")
- en: Spring Framework
  id: totrans-7709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架
- en: design concepts / [Design concepts behind Spring Framework](part0013.xhtml#aid-CCNA1
    "Design concepts behind Spring Framework")
  id: totrans-7710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计概念 / [Spring框架背后的设计概念](part0013.xhtml#aid-CCNA1 "Spring框架背后的设计概念")
- en: about / [What does the Spring Framework bring?](part0079.xhtml#aid-2BASE1 "What
    does the Spring Framework bring?")
  id: totrans-7711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring框架带来了什么？](part0079.xhtml#aid-2BASE1 "Spring框架带来了什么？")
- en: Spring Framework modules
  id: totrans-7712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架模块
- en: about / [The Spring Framework modules](part0012.xhtml#aid-BE6O1 "The Spring
    Framework modules")
  id: totrans-7713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring框架模块](part0012.xhtml#aid-BE6O1 "Spring框架模块")
- en: Spring HATEOAS resources
  id: totrans-7714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring HATEOAS资源
- en: DTOs, turning into / [Turning DTOs into Spring HATEOAS resources](part0109.xhtml#aid-37UDA2
    "Turning DTOs into Spring HATEOAS resources"), [How to do it…](part0109.xhtml#aid-37UDA2
    "How to do it…")
  id: totrans-7715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DTO，转换成 / [将DTO转换为Spring HATEOAS资源](part0109.xhtml#aid-37UDA2 "将DTO转换为Spring
    HATEOAS资源"), [如何做…](part0109.xhtml#aid-37UDA2 "如何做…")
- en: about / [Spring HATEOAS resources](part0109.xhtml#aid-37UDA2 "Spring HATEOAS
    resources")
  id: totrans-7716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring HATEOAS资源](part0109.xhtml#aid-37UDA2 "Spring HATEOAS资源")
- en: ResourceSupport class / [The ResourceSupport class](part0109.xhtml#aid-37UDA2
    "The ResourceSupport class")
  id: totrans-7717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ResourceSupport类 / [ResourceSupport类](part0109.xhtml#aid-37UDA2 "ResourceSupport类")
- en: Resource class / [The Resource class](part0109.xhtml#aid-37UDA2 "The Resource
    class")
  id: totrans-7718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源类 / [资源类](part0109.xhtml#aid-37UDA2 "资源类")
- en: identifiable interface / [The Identifiable interface](part0109.xhtml#aid-37UDA2
    "The Identifiable interface")
  id: totrans-7719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可识别的接口 / [可识别的接口](part0109.xhtml#aid-37UDA2 "可识别的接口")
- en: entities' @Id, abstracting / [Abstracting the Entities' @Id](part0109.xhtml#aid-37UDA2
    "Abstracting the Entities' @Id"), [There's more…](part0109.xhtml#aid-37UDA2 "There's
    more…")
  id: totrans-7720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体的@Id，抽象化 / [抽象化实体的@Id](part0109.xhtml#aid-37UDA2 "抽象化实体的@Id"), [还有更多…](part0109.xhtml#aid-37UDA2
    "还有更多…")
- en: URL / [See also](part0109.xhtml#aid-37UDA2 "See also"), [See also](part0110.xhtml#aid-38STS2
    "See also")
  id: totrans-7721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0109.xhtml#aid-37UDA2 "另请参阅"), [另请参阅](part0110.xhtml#aid-38STS2
    "另请参阅")
- en: Spring Integration
  id: totrans-7722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring集成
- en: URL / [Other noteworthy projects](part0201.xhtml#aid-5VM121 "Other noteworthy
    projects")
  id: totrans-7723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [其他值得注意的项目](part0201.xhtml#aid-5VM121 "其他值得注意的项目")
- en: Spring IoC container
  id: totrans-7724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring IoC容器
- en: about / [The Spring IoC container](part0016.xhtml#aid-F8902 "The Spring IoC
    container")
  id: totrans-7725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring IoC容器](part0016.xhtml#aid-F8902 "Spring IoC容器")
- en: Spring IO reference document
  id: totrans-7726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring IO参考文档
- en: URL / [The Spring IO reference document](part0096.xhtml#aid-2RHM02 "The Spring
    IO reference document")
  id: totrans-7727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Spring IO参考文档](part0096.xhtml#aid-2RHM02 "Spring IO参考文档")
- en: Spring JDBC
  id: totrans-7728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring JDBC
- en: approaches / [Spring JDBC abstraction](part0048.xhtml#aid-1DOR02 "Spring JDBC
    abstraction")
  id: totrans-7729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法 / [Spring JDBC抽象](part0048.xhtml#aid-1DOR02 "Spring JDBC抽象")
- en: Spring JDBC abstraction
  id: totrans-7730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring JDBC抽象
- en: about / [Spring JDBC abstraction](part0048.xhtml#aid-1DOR02 "Spring JDBC abstraction")
  id: totrans-7731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring JDBC抽象](part0048.xhtml#aid-1DOR02 "Spring JDBC抽象")
- en: JdbcTemplate / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  id: totrans-7732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JdbcTemplate / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
- en: SimpleJdbc classes / [SimpleJdbc classes](part0048.xhtml#aid-1DOR02 "SimpleJdbc
    classes")
  id: totrans-7733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SimpleJdbc类 / [SimpleJdbc类](part0048.xhtml#aid-1DOR02 "SimpleJdbc类")
- en: SpringJUnit4ClassRunner / [SpringJUnit4ClassRunner](part0127.xhtml#aid-3P3NE2
    "SpringJUnit4ClassRunner")
  id: totrans-7734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpringJUnit4ClassRunner / [SpringJUnit4ClassRunner](part0127.xhtml#aid-3P3NE2
    "SpringJUnit4ClassRunner")
- en: Spring landscape
  id: totrans-7735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring景观
- en: about / [The Spring landscape](part0012.xhtml#aid-BE6O1 "The Spring landscape")
  id: totrans-7736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring景观](part0012.xhtml#aid-BE6O1 "Spring景观")
- en: Spring Framework modules / [The Spring Framework modules](part0012.xhtml#aid-BE6O1
    "The Spring Framework modules")
  id: totrans-7737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架模块 / [Spring框架模块](part0012.xhtml#aid-BE6O1 "Spring框架模块")
- en: Spring Tool Suite (STS) / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1
    "Spring Tool Suite (STS)")
  id: totrans-7738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring工具套件（STS） / [Spring工具套件（STS）](part0012.xhtml#aid-BE6O1 "Spring工具套件（STS）")
- en: Spring subprojects / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  id: totrans-7739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring子项目 / [Spring子项目](part0012.xhtml#aid-BE6O1 "Spring子项目")
- en: Spring MVC
  id: totrans-7740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC
- en: web application / [Spring MVC architecture](part0134.xhtml#aid-3VPBC1 "Spring
    MVC architecture")
  id: totrans-7741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序 / [Spring MVC架构](part0134.xhtml#aid-3VPBC1 "Spring MVC架构")
- en: Spring MVC
  id: totrans-7742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC
- en: features / [Features of Spring MVC](part0028.xhtml#aid-QMFO1 "Features of Spring
    MVC")
  id: totrans-7743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性 / [Spring MVC的特性](part0028.xhtml#aid-QMFO1 "Spring MVC的特性")
- en: architecture / [The architecture and components of Spring MVC](part0032.xhtml#aid-UGI01
    "The architecture and components of Spring MVC"), [Spring MVC architecture](part0134.xhtml#aid-3VPBC1
    "Spring MVC architecture")
  id: totrans-7744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: architecture / [Spring MVC的架构和组件](part0032.xhtml#aid-UGI01 "Spring MVC的架构和组件"),
    [Spring MVC架构](part0134.xhtml#aid-3VPBC1 "Spring MVC架构")
- en: components / [The architecture and components of Spring MVC](part0032.xhtml#aid-UGI01
    "The architecture and components of Spring MVC")
  id: totrans-7745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: components / [Spring MVC的架构和组件](part0032.xhtml#aid-UGI01 "Spring MVC的架构和组件")
- en: asynchronous request processing / [Asynchronous request processing in Spring
    MVC](part0035.xhtml#aid-11C3M1 "Asynchronous request processing in Spring MVC")
  id: totrans-7746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: asynchronous request processing / [Spring MVC中的异步请求处理](part0035.xhtml#aid-11C3M1
    "Spring MVC中的异步请求处理")
- en: installing / [Installing Spring, Spring MVC, and a web structure](part0083.xhtml#aid-2F4UM2
    "Installing Spring, Spring MVC, and a web structure"), [How to do it...](part0083.xhtml#aid-2F4UM2
    "How to do it..."), [How it works...](part0083.xhtml#aid-2F4UM2 "How it works...")
  id: totrans-7747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: installing / [安装Spring，Spring MVC和web结构](part0083.xhtml#aid-2F4UM2 "安装Spring，Spring
    MVC和web结构"), [如何做...](part0083.xhtml#aid-2F4UM2 "如何做..."), [它是如何工作的...](part0083.xhtml#aid-2F4UM2
    "它是如何工作的...")
- en: about / [Spring MVC overview](part0085.xhtml#aid-2H1VQ2 "Spring MVC overview")
  id: totrans-7748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Spring MVC概述](part0085.xhtml#aid-2H1VQ2 "Spring MVC概述")
- en: front controller / [Front controller](part0085.xhtml#aid-2H1VQ2 "Front controller")
  id: totrans-7749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: front controller / [前端控制器](part0085.xhtml#aid-2H1VQ2 "前端控制器")
- en: MVC design pattern / [MVC design pattern](part0085.xhtml#aid-2H1VQ2 "MVC design
    pattern")
  id: totrans-7750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC设计模式 / [MVC设计模式](part0085.xhtml#aid-2H1VQ2 "MVC设计模式")
- en: flow / [Spring MVC flow](part0085.xhtml#aid-2H1VQ2 "Spring MVC flow")
  id: totrans-7751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: flow / [Spring MVC流程](part0085.xhtml#aid-2H1VQ2 "Spring MVC流程")
- en: DispatcherServlet / [DispatcherServlet – the Spring MVC entrypoint](part0085.xhtml#aid-2H1VQ2
    "DispatcherServlet – the Spring MVC entrypoint")
  id: totrans-7752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DispatcherServlet / [DispatcherServlet-Spring MVC入口点](part0085.xhtml#aid-2H1VQ2
    "DispatcherServlet-Spring MVC入口点")
- en: annotation-defined controllers / [Annotation-defined controllers](part0085.xhtml#aid-2H1VQ2
    "Annotation-defined controllers")
  id: totrans-7753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: annotation-defined controllers / [注解定义的控制器](part0085.xhtml#aid-2H1VQ2 "注解定义的控制器")
- en: Spring MVC 1-0-1
  id: totrans-7754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC 1-0-1
- en: about / [Spring MVC 1-0-1](part0132.xhtml#aid-3TSA81 "Spring MVC 1-0-1")
  id: totrans-7755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Spring MVC 1-0-1](part0132.xhtml#aid-3TSA81 "Spring MVC 1-0-1")
- en: reference link / [Spring MVC 1-0-1](part0132.xhtml#aid-3TSA81 "Spring MVC 1-0-1")
  id: totrans-7756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: reference link / [Spring MVC 1-0-1](part0132.xhtml#aid-3TSA81 "Spring MVC 1-0-1")
- en: Spring MVC 3.1 / [New support classes for @RequestMapping since Spring MVC 3.1](part0089.xhtml#aid-2KS222
    "New support classes for @RequestMapping since Spring MVC 3.1")
  id: totrans-7757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC 3.1 / [自Spring MVC 3.1以来的@RequestMapping新支持类](part0089.xhtml#aid-2KS222
    "自Spring MVC 3.1以来的@RequestMapping新支持类")
- en: Spring MVC application
  id: totrans-7758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC应用程序
- en: creating / [Your first Spring MVC application](part0030.xhtml#aid-SJGS2 "Your
    first Spring MVC application")
  id: totrans-7759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: creating / [你的第一个Spring MVC应用程序](part0030.xhtml#aid-SJGS2 "你的第一个Spring MVC应用程序")
- en: setting up / [Setting up a Spring MVC application](part0031.xhtml#aid-TI1E2
    "Setting up a Spring MVC application")
  id: totrans-7760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setting up / [设置Spring MVC应用程序](part0031.xhtml#aid-TI1E2 "设置Spring MVC应用程序")
- en: project structure / [The project structure of a Spring MVC application](part0031.xhtml#aid-TI1E2
    "The project structure of a Spring MVC application")
  id: totrans-7761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: project structure / [Spring MVC应用程序的项目结构](part0031.xhtml#aid-TI1E2 "Spring MVC应用程序的项目结构")
- en: web.xml file / [The web.xml file – Springifying the web app](part0031.xhtml#aid-TI1E2
    "The web.xml file – Springifying the web app")
  id: totrans-7762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web.xml文件 / [将web.xml文件spring化的web应用程序](part0031.xhtml#aid-TI1E2 "将web.xml文件spring化的web应用程序")
- en: web app, springifying / [The web.xml file – Springifying the web app](part0031.xhtml#aid-TI1E2
    "The web.xml file – Springifying the web app")
  id: totrans-7763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web app, springifying / [将web.xml文件spring化的web应用程序](part0031.xhtml#aid-TI1E2
    "将web.xml文件spring化的web应用程序")
- en: ApplicationContext files / [ApplicationContext files in a Spring MVC application](part0031.xhtml#aid-TI1E2
    "ApplicationContext files in a Spring MVC application")
  id: totrans-7764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ApplicationContext文件 / [Spring MVC应用程序中的ApplicationContext文件](part0031.xhtml#aid-TI1E2
    "Spring MVC应用程序中的ApplicationContext文件")
- en: HomeController / [HomeController – @Controller for the home screen](part0031.xhtml#aid-TI1E2
    "HomeController – @Controller for the home screen")
  id: totrans-7765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HomeController / [HomeController-主屏幕的@Controller](part0031.xhtml#aid-TI1E2 "HomeController-主屏幕的@Controller")
- en: home.jsp file / [The home.jsp file – the landing screen](part0031.xhtml#aid-TI1E2
    "The home.jsp file – the landing screen")
  id: totrans-7766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: home.jsp文件 / [home.jsp文件-登陆界面](part0031.xhtml#aid-TI1E2 "home.jsp文件-登陆界面")
- en: incoming requests, handling / [Handling incoming requests](part0031.xhtml#aid-TI1E2
    "Handling incoming requests")
  id: totrans-7767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: incoming requests, handling / [处理传入请求](part0031.xhtml#aid-TI1E2 "处理传入请求")
- en: Spring Reactor
  id: totrans-7768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Reactor
- en: URL / [Other noteworthy projects](part0201.xhtml#aid-5VM121 "Other noteworthy
    projects")
  id: totrans-7769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [其他值得注意的项目](part0201.xhtml#aid-5VM121 "其他值得注意的项目")
- en: about / [Other noteworthy projects](part0201.xhtml#aid-5VM121 "Other noteworthy
    projects")
  id: totrans-7770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [其他值得注意的项目](part0201.xhtml#aid-5VM121 "其他值得注意的项目")
- en: Spring security
  id: totrans-7771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring安全
- en: users, adapting / [Adapting users and roles to Spring Security](part0103.xhtml#aid-3279U2
    "Adapting users and roles to Spring Security"), [How to do it...](part0103.xhtml#aid-3279U2
    "How to do it..."), [How it works...](part0103.xhtml#aid-3279U2 "How it works...")
  id: totrans-7772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: users, adapting / [将用户和角色适应Spring安全](part0103.xhtml#aid-3279U2 "将用户和角色适应Spring安全"),
    [如何做...](part0103.xhtml#aid-3279U2 "如何做..."), [它是如何工作的...](part0103.xhtml#aid-3279U2
    "它是如何工作的...")
- en: roles, adapting / [Adapting users and roles to Spring Security](part0103.xhtml#aid-3279U2
    "Adapting users and roles to Spring Security"), [How to do it...](part0103.xhtml#aid-3279U2
    "How to do it..."), [How it works...](part0103.xhtml#aid-3279U2 "How it works...")
  id: totrans-7773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: roles, adapting / [将用户和角色适应Spring安全](part0103.xhtml#aid-3279U2 "将用户和角色适应Spring安全"),
    [如何做...](part0103.xhtml#aid-3279U2 "如何做..."), [它是如何工作的...](part0103.xhtml#aid-3279U2
    "它是如何工作的...")
- en: about / [Introduction to Spring Security](part0103.xhtml#aid-3279U2 "Introduction
    to Spring Security")
  id: totrans-7774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Spring安全简介](part0103.xhtml#aid-3279U2 "Spring安全简介")
- en: ThreadLocal context holders / [ThreadLocal context holders](part0103.xhtml#aid-3279U2
    "ThreadLocal context holders")
  id: totrans-7775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ThreadLocal context holders / [ThreadLocal上下文持有者](part0103.xhtml#aid-3279U2
    "ThreadLocal上下文持有者")
- en: interfaces / [Noticeable Spring Security interfaces](part0103.xhtml#aid-3279U2
    "Noticeable Spring Security interfaces")
  id: totrans-7776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: interfaces / [Noticeable Spring Security interfaces](part0103.xhtml#aid-3279U2
    "Noticeable Spring Security interfaces")
- en: Authentication interface / [The Authentication interface](part0103.xhtml#aid-3279U2
    "The Authentication interface")
  id: totrans-7777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Authentication interface / [The Authentication interface](part0103.xhtml#aid-3279U2
    "The Authentication interface")
- en: UserDetails interface / [The UserDetails interface](part0103.xhtml#aid-3279U2
    "The UserDetails interface")
  id: totrans-7778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UserDetails interface / [The UserDetails interface](part0103.xhtml#aid-3279U2
    "The UserDetails interface")
- en: UserDetailsManager interface / [The UserDetailsManager interface](part0103.xhtml#aid-3279U2
    "The UserDetailsManager interface")
  id: totrans-7779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UserDetailsManager interface / [The UserDetailsManager interface](part0103.xhtml#aid-3279U2
    "The UserDetailsManager interface")
- en: GrantedAuthority interface / [The GrantedAuthority interface](part0103.xhtml#aid-3279U2
    "The GrantedAuthority interface")
  id: totrans-7780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GrantedAuthority interface / [The GrantedAuthority interface](part0103.xhtml#aid-3279U2
    "The GrantedAuthority interface")
- en: Spring security, reference
  id: totrans-7781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security, reference
- en: about / [Spring Security reference](part0103.xhtml#aid-3279U2 "Spring Security
    reference")
  id: totrans-7782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Spring Security reference](part0103.xhtml#aid-3279U2 "Spring Security
    reference")
- en: technical overview / [Technical overview](part0103.xhtml#aid-3279U2 "Technical
    overview")
  id: totrans-7783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: technical overview / [Technical overview](part0103.xhtml#aid-3279U2 "Technical
    overview")
- en: URL / [Technical overview](part0103.xhtml#aid-3279U2 "Technical overview"),
    [Sample applications](part0103.xhtml#aid-3279U2 "Sample applications")
  id: totrans-7784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Technical overview](part0103.xhtml#aid-3279U2 "Technical overview"),
    [Sample applications](part0103.xhtml#aid-3279U2 "Sample applications")
- en: sample applications / [Sample applications](part0103.xhtml#aid-3279U2 "Sample
    applications")
  id: totrans-7785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sample applications / [Sample applications](part0103.xhtml#aid-3279U2 "Sample
    applications")
- en: core services / [Core services](part0103.xhtml#aid-3279U2 "Core services")
  id: totrans-7786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: core services / [Core services](part0103.xhtml#aid-3279U2 "Core services")
- en: Spring Security 4
  id: totrans-7787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security 4
- en: reference link / [Testing the authentication](part0183.xhtml#aid-5EGMU1 "Testing
    the authentication")
  id: totrans-7788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: reference link / [Testing the authentication](part0183.xhtml#aid-5EGMU1 "Testing
    the authentication")
- en: Spring security authorities
  id: totrans-7789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security authorities
- en: about / [Spring Security authorities](part0107.xhtml#aid-361C62 "Spring Security
    authorities")
  id: totrans-7790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Spring Security authorities](part0107.xhtml#aid-361C62 "Spring Security
    authorities")
- en: configuration attributes / [Configuration attributes](part0107.xhtml#aid-361C62
    "Configuration attributes")
  id: totrans-7791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: configuration attributes / [Configuration attributes](part0107.xhtml#aid-361C62
    "Configuration attributes")
- en: Security Interceptor protecting secure objects / [Configuration attributes](part0107.xhtml#aid-361C62
    "Configuration attributes")
  id: totrans-7792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Security Interceptor protecting secure objects / [Configuration attributes](part0107.xhtml#aid-361C62
    "Configuration attributes")
- en: Spring security filter-chain
  id: totrans-7793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security filter-chain
- en: URL / [SocialAuthenticationFilter](part0105.xhtml#aid-344B22 "SocialAuthenticationFilter
    ")
  id: totrans-7794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [SocialAuthenticationFilter](part0105.xhtml#aid-344B22 "SocialAuthenticationFilter
    ")
- en: Spring security namespace
  id: totrans-7795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security namespace
- en: <http> component / [The <http> component](part0104.xhtml#aid-335QG2 "The <http>
    component")
  id: totrans-7796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <http> component / [The <http> component](part0104.xhtml#aid-335QG2 "The <http>
    component")
- en: Spring security filter-chain / [The Spring Security filter-chain](part0104.xhtml#aid-335QG2
    "The Spring Security filter-chain")
  id: totrans-7797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security filter-chain / [The Spring Security filter-chain](part0104.xhtml#aid-335QG2
    "The Spring Security filter-chain")
- en: <http> configuration / [Our <http> configuration](part0104.xhtml#aid-335QG2
    "Our <http> configuration")
  id: totrans-7798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <http> configuration / [Our <http> configuration](part0104.xhtml#aid-335QG2
    "Our <http> configuration")
- en: BasicAuthenticationFilter / [BasicAuthenticationFilter](part0104.xhtml#aid-335QG2
    "BasicAuthenticationFilter")
  id: totrans-7799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BasicAuthenticationFilter / [BasicAuthenticationFilter](part0104.xhtml#aid-335QG2
    "BasicAuthenticationFilter")
- en: with authenticationEntryPoint / [With an authenticationEntryPoint](part0104.xhtml#aid-335QG2
    "With an authenticationEntryPoint")
  id: totrans-7800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: with authenticationEntryPoint / [With an authenticationEntryPoint](part0104.xhtml#aid-335QG2
    "With an authenticationEntryPoint")
- en: URL / [In the Spring Security reference](part0104.xhtml#aid-335QG2 "In the Spring
    Security reference")
  id: totrans-7801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [In the Spring Security reference](part0104.xhtml#aid-335QG2 "In the Spring
    Security reference")
- en: Spring security OAuth project
  id: totrans-7802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security OAuth project
- en: URL / [Implementing an OAuth2 authentication server](part0105.xhtml#aid-344B22
    "Implementing an OAuth2 authentication server")
  id: totrans-7803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Implementing an OAuth2 authentication server](part0105.xhtml#aid-344B22
    "Implementing an OAuth2 authentication server")
- en: Spring security reference
  id: totrans-7804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring security reference
- en: URL / [In the Spring Security reference](part0104.xhtml#aid-335QG2 "In the Spring
    Security reference"), [The Spring Security reference](part0107.xhtml#aid-361C62
    "The Spring Security reference")
  id: totrans-7805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [In the Spring Security reference](part0104.xhtml#aid-335QG2 "In the Spring
    Security reference"), [The Spring Security reference](part0107.xhtml#aid-361C62
    "The Spring Security reference")
- en: Spring session
  id: totrans-7806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring session
- en: messages, securing with / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  id: totrans-7807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: messages, securing with / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
- en: Spring Social
  id: totrans-7808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Social
- en: about / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
  id: totrans-7809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
- en: URL / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
  id: totrans-7810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
- en: Spring social reference
  id: totrans-7811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring social reference
- en: URL / [The Spring social ConnectController](part0105.xhtml#aid-344B22 "The Spring
    social ConnectController")
  id: totrans-7812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [The Spring social ConnectController](part0105.xhtml#aid-344B22 "The Spring
    social ConnectController")
- en: Spring Social Twitter project
  id: totrans-7813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Social Twitter project
- en: creating / [Enough Hello Worlds, let's fetch tweets!](part0136.xhtml#aid-41MCG1
    "Enough Hello Worlds, let's fetch tweets!")
  id: totrans-7814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: creating / [Enough Hello Worlds, let's fetch tweets!](part0136.xhtml#aid-41MCG1
    "Enough Hello Worlds, let's fetch tweets!")
- en: application, registering / [Registering your application](part0136.xhtml#aid-41MCG1
    "Registering your application")
  id: totrans-7815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: application, registering / [Registering your application](part0136.xhtml#aid-41MCG1
    "Registering your application")
- en: setting up / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
  id: totrans-7816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: setting up / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
- en: Twitter, accessing / [Accessing Twitter](part0136.xhtml#aid-41MCG1 "Accessing
    Twitter")
  id: totrans-7817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter, accessing / [Accessing Twitter](part0136.xhtml#aid-41MCG1 "Accessing
    Twitter")
- en: Spring subprojects
  id: totrans-7818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring subprojects
- en: about / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  id: totrans-7819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: about / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
- en: URL / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  id: totrans-7820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
- en: Spring Tool Suite (STS)
  id: totrans-7821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Tool Suite (STS)
- en: about / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1 "Spring Tool Suite
    (STS)"), [Your first Spring MVC application](part0030.xhtml#aid-SJGS2 "Your first
    Spring MVC application")
  id: totrans-7822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于
- en: URL / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1 "Spring Tool Suite
    (STS)")
  id: totrans-7823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL
- en: Spring Transaction
  id: totrans-7824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring事务
- en: defining / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction"), [Spring Transaction fundamentals](part0051.xhtml#aid-1GKCM2
    "Spring Transaction fundamentals")
  id: totrans-7825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义
- en: declarative transaction management / [Declarative transaction management](part0051.xhtml#aid-1GKCM2
    "Declarative transaction management")
  id: totrans-7826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式事务管理
- en: '@Transactional annotation, using / [Using the @Transactional annotation](part0051.xhtml#aid-1GKCM2
    "Using the @Transactional annotation")'
  id: totrans-7827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@Transactional注解
- en: programmatic transaction management / [Programmatic transaction management](part0051.xhtml#aid-1GKCM2
    "Programmatic transaction management")
  id: totrans-7828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序化事务管理
- en: Spring validator
  id: totrans-7829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring验证器
- en: using / [Using Spring validator](part0115.xhtml#aid-3DLGM2 "Using Spring validator")
  id: totrans-7830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring验证器
- en: ValodationUtils utility / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
  id: totrans-7831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ValodationUtils实用程序
- en: I18n validation errors / [I18n validation errors](part0115.xhtml#aid-3DLGM2
    "I18n validation errors")
  id: totrans-7832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化验证错误
- en: Spring WebSockets
  id: totrans-7833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring WebSockets
- en: URL / [See also](part0122.xhtml#aid-3KB4K2 "See also")
  id: totrans-7834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL，参见
- en: Spring WebSocket support
  id: totrans-7835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring WebSocket支持
- en: about / [Spring WebSocket support](part0119.xhtml#aid-3HFIU2 "Spring WebSocket
    support")
  id: totrans-7836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Spring WebSocket支持
- en: all-in-one configuration / [All-in-one configuration](part0119.xhtml#aid-3HFIU2
    "All-in-one configuration")
  id: totrans-7837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一体化配置
- en: message handlers, defining via @MessageMapping / [Defining message handlers
    via @MessageMapping](part0119.xhtml#aid-3HFIU2 "Defining message handlers via
    @MessageMapping")
  id: totrans-7838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息处理程序，通过@MessageMapping定义
- en: Sql* classes
  id: totrans-7839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sql*类
- en: JDBC operations, defining with / [JDBC operations with Sql* classes](part0048.xhtml#aid-1DOR02
    "JDBC operations with Sql* classes")
  id: totrans-7840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sql*类定义JDBC操作
- en: SSL
  id: totrans-7841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL
- en: reference link / [Explanation](part0170.xhtml#aid-523VK2 "Explanation"), [Behind
    a secured server](part0172.xhtml#aid-5410O2 "Behind a secured server")
  id: totrans-7842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接
- en: about / [SSL](part0172.xhtml#aid-5410O2 "SSL")
  id: totrans-7843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于SSL
- en: self-signed certificate, generating / [Generating a self-signed certificate](part0172.xhtml#aid-5410O2
    "Generating a self-signed certificate")
  id: totrans-7844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成自签名证书
- en: creating / [The easy way](part0172.xhtml#aid-5410O2 "The easy way")
  id: totrans-7845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建
- en: creating, for http and https channels / [The dual way](part0172.xhtml#aid-5410O2
    "The dual way")
  id: totrans-7846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为http和https通道创建
- en: creating, behind secured server / [Behind a secured server](part0172.xhtml#aid-5410O2
    "Behind a secured server")
  id: totrans-7847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在受保护的服务器后面创建
- en: Start Of Authority (SOA) / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  id: totrans-7848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权威性（SOA）
- en: status code
  id: totrans-7849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态码
- en: 500 Server Error / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  id: totrans-7850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 500服务器错误，状态码和异常处理
- en: 405 Method not Supported / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  id: totrans-7851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 405方法不受支持，状态码和异常处理
- en: 404 Not Found / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  id: totrans-7852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 404未找到，状态码和异常处理
- en: 400 Bad Request / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  id: totrans-7853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 400错误请求
- en: 200 OK / [Status codes and exception handling](part0163.xhtml#aid-4REBM1 "Status
    codes and exception handling")
  id: totrans-7854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 200 OK，状态码和异常处理
- en: with ResponseEntity / [Status code with ResponseEntity](part0163.xhtml#aid-4REBM1
    "Status code with ResponseEntity")
  id: totrans-7855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ResponseEntity
- en: with exception / [Status codes with exceptions](part0163.xhtml#aid-4REBM1 "Status
    codes with exceptions")
  id: totrans-7856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带异常的状态码
- en: status codes
  id: totrans-7857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态码
- en: about / [Status codes and exception handling](part0163.xhtml#aid-4REBM1 "Status
    codes and exception handling")
  id: totrans-7858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于状态码和异常处理
- en: StompMessageBrokerRelay / [StompMessageBrokerRelay](part0120.xhtml#aid-3IE3G2
    "StompMessageBrokerRelay")
  id: totrans-7859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StompMessageBrokerRelay
- en: STOMP over SockJS
  id: totrans-7860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STOMP over SockJS
- en: social events, streaming with / [Streaming social events with STOMP over SockJS](part0119.xhtml#aid-3HFIU2
    "Streaming social events with STOMP over SockJS ") , [How to do it…](part0119.xhtml#aid-3HFIU2
    "How to do it…")
  id: totrans-7861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交事件，使用STOMP通过SockJS进行流式传输
- en: STOMP over WebSocket
  id: totrans-7862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STOMP over WebSocket
- en: about / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  id: totrans-7863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Spring 4中的STOMP over WebSocket和回退选项](part0054.xhtml#aid-1JFUC2 "Spring
    4中的STOMP over WebSocket和回退选项")
- en: streams, Java 8
  id: totrans-7864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流，Java 8
- en: about / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  id: totrans-7865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Java 8流和lambda](part0137.xhtml#aid-42KT21 "Java 8流和lambda")
- en: stubs
  id: totrans-7866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存根
- en: about / [Mocks and stubs](part0181.xhtml#aid-5CJLQ2 "Mocks and stubs")
  id: totrans-7867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [模拟和存根](part0181.xhtml#aid-5CJLQ2 "模拟和存根")
- en: creating, for testing beans / [Stubbing our beans while testing](part0181.xhtml#aid-5CJLQ2
    "Stubbing our beans while testing")
  id: totrans-7868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建，用于测试bean/ [在测试时存根化我们的bean](part0181.xhtml#aid-5CJLQ2 "在测试时存根化我们的bean")
- en: and mocks, selecting between / [Should I use mocks or stubs?](part0181.xhtml#aid-5CJLQ2
    "Should I use mocks or stubs?")
  id: totrans-7869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 和模拟，选择/ [我应该使用模拟还是存根？](part0181.xhtml#aid-5CJLQ2 "我应该使用模拟还是存根？")
- en: supporting beans, DispatcherServlet
  id: totrans-7870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的bean，DispatcherServlet
- en: HandlerMapping / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HandlerMapping/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: HandlerAdapter / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HandlerAdapter/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: HandlerExceptionResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HandlerExceptionResolver/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1
    "支持DispatcherServlet的Bean及其角色")
- en: ViewResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ViewResolver/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: LocaleResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LocaleResolver/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: LocaleContextResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LocaleContextResolver/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1
    "支持DispatcherServlet的Bean及其角色")
- en: ThemeResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ThemeResolver/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: MultipartResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MultipartResolver/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: FlashMapManager / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  id: totrans-7879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FlashMapManager/ [支持DispatcherServlet的Bean及其角色](part0033.xhtml#aid-VF2I1 "支持DispatcherServlet的Bean及其角色")
- en: Swagger
  id: totrans-7880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swagger
- en: API, documenting / [Getting ready](part0100.xhtml#aid-2VBO82 "Getting ready"),
    [How to do it...](part0100.xhtml#aid-2VBO82 "How to do it..."), [How it works...](part0100.xhtml#aid-2VBO82
    "How it works...")
  id: totrans-7881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API，文档/ [准备就绪](part0100.xhtml#aid-2VBO82 "准备就绪"), [如何做...](part0100.xhtml#aid-2VBO82
    "如何做..."), [它是如何工作的...](part0100.xhtml#aid-2VBO82 "它是如何工作的...")
- en: API, exposing / [How to do it...](part0100.xhtml#aid-2VBO82 "How to do it..."),
    [How it works...](part0100.xhtml#aid-2VBO82 "How it works...")
  id: totrans-7882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API，暴露/ [如何做...](part0100.xhtml#aid-2VBO82 "如何做..."), [它是如何工作的...](part0100.xhtml#aid-2VBO82
    "它是如何工作的...")
- en: different tools / [Different tools, different standards](part0100.xhtml#aid-2VBO82
    "Different tools, different standards")
  id: totrans-7883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的工具/ [不同的工具，不同的标准](part0100.xhtml#aid-2VBO82 "不同的工具，不同的标准")
- en: about / [Documentation with Swagger](part0164.xhtml#aid-4SCS81 "Documentation
    with Swagger")
  id: totrans-7884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Swagger文档](part0164.xhtml#aid-4SCS81 "Swagger文档")
- en: Swagger.io
  id: totrans-7885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swagger.io
- en: URL / [The Swagger.io](part0100.xhtml#aid-2VBO82 "The Swagger.io")
  id: totrans-7886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [Swagger.io](part0100.xhtml#aid-2VBO82 "Swagger.io")
- en: Swagger UI
  id: totrans-7887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swagger UI
- en: about / [The Swagger UI](part0100.xhtml#aid-2VBO82 "The Swagger UI")
  id: totrans-7888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Swagger UI](part0100.xhtml#aid-2VBO82 "Swagger UI")
- en: T
  id: totrans-7889
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: T
- en: '@Test annotation'
  id: totrans-7890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Test注释'
- en: about / [@Test annotation](part0125.xhtml#aid-3N6MA2 "@Test annotation")
  id: totrans-7891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [@Test注释](part0125.xhtml#aid-3N6MA2 "@Test注释")
- en: expected and timeout arguments / [The expected and timeout arguments](part0125.xhtml#aid-3N6MA2
    "The expected and timeout arguments")
  id: totrans-7892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期和超时参数/ [预期和超时参数](part0125.xhtml#aid-3N6MA2 "预期和超时参数")
- en: '@Transactional annotation'
  id: totrans-7893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@Transactional注释'
- en: using / [Using the @Transactional annotation](part0051.xhtml#aid-1GKCM2 "Using
    the @Transactional annotation")
  id: totrans-7894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [使用@Transactional注释](part0051.xhtml#aid-1GKCM2 "使用@Transactional注释")
- en: transaction management, enabling for / [Enabling transaction management for
    @Transactional](part0051.xhtml#aid-1GKCM2 "Enabling transaction management for
    @Transactional")
  id: totrans-7895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理，启用/ [启用@Transactional的事务管理](part0051.xhtml#aid-1GKCM2 "启用@Transactional的事务管理")
- en: Taskify application
  id: totrans-7896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taskify应用程序
- en: building / [Building a Taskify application](part0071.xhtml#aid-23MNU1 "Building
    a Taskify application")
  id: totrans-7897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建/ [构建Taskify应用程序](part0071.xhtml#aid-23MNU1 "构建Taskify应用程序")
- en: Taskify Ember app
  id: totrans-7898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taskify Ember应用
- en: building / [Building the Taskify Ember app](part0073.xhtml#aid-25JP22 "Building
    the Taskify Ember app")
  id: totrans-7899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建/ [构建Taskify Ember应用](part0073.xhtml#aid-25JP22 "构建Taskify Ember应用")
- en: Taskify, setting up as Ember CLI project / [Setting up Taskify as an Ember CLI
    project](part0073.xhtml#aid-25JP22 "Setting up Taskify as an Ember CLI project")
  id: totrans-7900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Taskify，设置为Ember CLI项目/ [将Taskify设置为Ember CLI项目](part0073.xhtml#aid-25JP22 "将Taskify设置为Ember
    CLI项目")
- en: Ember Data, setting up / [Setting up Ember Data](part0073.xhtml#aid-25JP22 "Setting
    up Ember Data")
  id: totrans-7901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember Data，设置/ [设置Ember Data](part0073.xhtml#aid-25JP22 "设置Ember Data")
- en: application routes, configuring / [Configuring application routes](part0073.xhtml#aid-25JP22
    "Configuring application routes")
  id: totrans-7902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序路由，配置/ [配置应用程序路由](part0073.xhtml#aid-25JP22 "配置应用程序路由")
- en: home screen, building / [Building the home screen](part0073.xhtml#aid-25JP22
    "Building the home screen")
  id: totrans-7903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主屏幕，构建/ [构建主屏幕](part0073.xhtml#aid-25JP22 "构建主屏幕")
- en: user screen, building / [Building the user screen](part0073.xhtml#aid-25JP22
    "Building the user screen")
  id: totrans-7904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建用户屏幕 / [构建用户屏幕](part0073.xhtml#aid-25JP22 "构建用户屏幕")
- en: custom helper, building / [Building a custom helper](part0073.xhtml#aid-25JP22
    "Building a custom helper")
  id: totrans-7905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义助手，构建 / [构建自定义助手](part0073.xhtml#aid-25JP22 "构建自定义助手")
- en: action handlers, adding / [Adding action handlers](part0073.xhtml#aid-25JP22
    "Adding action handlers")
  id: totrans-7906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作处理程序，添加 / [添加操作处理程序](part0073.xhtml#aid-25JP22 "添加操作处理程序")
- en: custom component, building / [Building a custom component – modal window](part0073.xhtml#aid-25JP22
    "Building a custom component – modal window")
  id: totrans-7907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义组件，构建 / [构建自定义组件-模态窗口](part0073.xhtml#aid-25JP22 "构建自定义组件-模态窗口")
- en: userEditModal, building with{{modal-window}} / [Building userEditModal using
    {{modal-window}}](part0073.xhtml#aid-25JP22 "Building userEditModal using {{modal-window}}")
  id: totrans-7908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用{{modal-window}}构建userEditModal / [使用{{modal-window}}构建userEditModal](part0073.xhtml#aid-25JP22
    "使用{{modal-window}}构建userEditModal")
- en: task screen, building / [Building the task screen](part0073.xhtml#aid-25JP22
    "Building the task screen")
  id: totrans-7909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建任务屏幕 / [构建任务屏幕](part0073.xhtml#aid-25JP22 "构建任务屏幕")
- en: tasks
  id: totrans-7910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务
- en: stacking, with RabbitMQ / [Stacking and consuming tasks with RabbitMQ and AMQP](part0121.xhtml#aid-3JCK22
    "Stacking and consuming tasks with RabbitMQ and AMQP"), [How to do it…](part0121.xhtml#aid-3JCK22
    "How to do it…")
  id: totrans-7911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RabbitMQ堆叠 / [使用RabbitMQ和AMQP堆叠和消费任务](part0121.xhtml#aid-3JCK22 "使用RabbitMQ和AMQP堆叠和消费任务"),
    [如何做…](part0121.xhtml#aid-3JCK22 "如何做…")
- en: consuming, with RabbitMQ / [Stacking and consuming tasks with RabbitMQ and AMQP](part0121.xhtml#aid-3JCK22
    "Stacking and consuming tasks with RabbitMQ and AMQP"), [How to do it…](part0121.xhtml#aid-3JCK22
    "How to do it…")
  id: totrans-7912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RabbitMQ消费 / [使用RabbitMQ和AMQP堆叠和消费任务](part0121.xhtml#aid-3JCK22 "使用RabbitMQ和AMQP堆叠和消费任务"),
    [如何做…](part0121.xhtml#aid-3JCK22 "如何做…")
- en: sender side / [Sender side](part0121.xhtml#aid-3JCK22 "Sender side")
  id: totrans-7913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送方 / [发送方](part0121.xhtml#aid-3JCK22 "发送方")
- en: consumer side / [Consumer side](part0121.xhtml#aid-3JCK22 "Consumer side")
  id: totrans-7914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者端 / [消费者端](part0121.xhtml#aid-3JCK22 "消费者端")
- en: client-side / [Client-side](part0121.xhtml#aid-3JCK22 "Client-side")
  id: totrans-7915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端 / [客户端](part0121.xhtml#aid-3JCK22 "客户端")
- en: messaging architecture overview / [Messaging architecture overview](part0121.xhtml#aid-3JCK22
    "Messaging architecture overview")
  id: totrans-7916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息架构概述 / [消息架构概述](part0121.xhtml#aid-3JCK22 "消息架构概述")
- en: scalable model / [A scalable model](part0121.xhtml#aid-3JCK22 "A scalable model")
  id: totrans-7917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展模型 / [可扩展模型](part0121.xhtml#aid-3JCK22 "可扩展模型")
- en: Template Method
  id: totrans-7918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板方法
- en: about / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  id: totrans-7919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
- en: terminology, Aspect Oriented Programing (AOP)
  id: totrans-7920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语，面向方面的编程（AOP）
- en: aspect / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-7921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方面 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: join point / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-7922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接点 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: advice / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-7923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: pointcut / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-7924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切入点 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: target object / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP
    concepts and terminology")
  id: totrans-7925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标对象 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: weaving / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  id: totrans-7926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编织 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: introduction / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP
    concepts and terminology")
  id: totrans-7927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 / [AOP概念和术语](part0025.xhtml#aid-NQU22 "AOP概念和术语")
- en: test-driven development (TDD) / [Testing with Spring](part0026.xhtml#aid-OPEK1
    "Testing with Spring")
  id: totrans-7928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD） / [使用Spring进行测试](part0026.xhtml#aid-OPEK1 "使用Spring进行测试")
- en: test-driven development (TTD)
  id: totrans-7929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发（TTD）
- en: about / [Test-driven development](part0177.xhtml#aid-58PJI1 "Test-driven development")
  id: totrans-7930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [测试驱动开发](part0177.xhtml#aid-58PJI1 "测试驱动开发")
- en: testing framework
  id: totrans-7931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试框架
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  id: totrans-7932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [介绍Ember.js](part0062.xhtml#aid-1R42S1 "介绍Ember.js")
- en: testing support, Spring
  id: totrans-7933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试支持，Spring
- en: mock objects / [Mock objects](part0026.xhtml#aid-OPEK1 "Mock objects")
  id: totrans-7934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟对象 / [模拟对象](part0026.xhtml#aid-OPEK1 "模拟对象")
- en: unit and integration testing utilities / [Unit and integration testing utilities](part0026.xhtml#aid-OPEK1
    "Unit and integration testing utilities")
  id: totrans-7935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元和集成测试工具 / [单元和集成测试工具](part0026.xhtml#aid-OPEK1 "单元和集成测试工具")
- en: th*each tag
  id: totrans-7936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: th*each标签
- en: about / [Accessing Twitter](part0136.xhtml#aid-41MCG1 "Accessing Twitter")
  id: totrans-7937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [访问Twitter](part0136.xhtml#aid-41MCG1 "访问Twitter")
- en: third-party dependencies, Spring
  id: totrans-7938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring第三方依赖
- en: Spring Framework dependency model / [The Spring Framework dependency model](part0083.xhtml#aid-2F4UM2
    "The Spring Framework dependency model")
  id: totrans-7939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架依赖模型 / [Spring框架依赖模型](part0083.xhtml#aid-2F4UM2 "Spring框架依赖模型")
- en: Spring MVC dependency / [The Spring MVC dependency](part0083.xhtml#aid-2F4UM2
    "The Spring MVC dependency")
  id: totrans-7940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring MVC依赖 / [Spring MVC依赖](part0083.xhtml#aid-2F4UM2 "Spring MVC依赖")
- en: Maven properties, using / [Using Maven properties](part0083.xhtml#aid-2F4UM2
    "Using Maven properties")
  id: totrans-7941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven属性 / [使用Maven属性](part0083.xhtml#aid-2F4UM2 "使用Maven属性")
- en: third-party OAuth2 scheme
  id: totrans-7942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方OAuth2方案
- en: authenticating with / [Authenticating with a third-party OAuth2 scheme](part0105.xhtml#aid-344B22
    "Authenticating with a third-party OAuth2 scheme"), [How to do it...](part0105.xhtml#aid-344B22
    "How to do it..."), [How it works...](part0105.xhtml#aid-344B22 "How it works...")
  id: totrans-7943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方OAuth2方案进行身份验证 / [使用第三方OAuth2方案进行身份验证](part0105.xhtml#aid-344B22 "使用第三方OAuth2方案进行身份验证"),
    [如何做…](part0105.xhtml#aid-344B22 "如何做…"), [它是如何工作的…](part0105.xhtml#aid-344B22
    "它是如何工作的…")
- en: application point of view / [From the application point of view](part0105.xhtml#aid-344B22
    "From the application point of view")
  id: totrans-7944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序角度 / [从应用程序角度](part0105.xhtml#aid-344B22 "从应用程序角度")
- en: Yahoo! point of view / [From the Yahoo! point of view](part0105.xhtml#aid-344B22
    "From the Yahoo! point of view")
  id: totrans-7945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo!观点 / [从Yahoo!的观点](part0105.xhtml#aid-344B22 "从Yahoo!的观点")
- en: OAuth2 explicit grant flow / [OAuth2 explicit grant flow](part0105.xhtml#aid-344B22
    "OAuth2 explicit grant flow")
  id: totrans-7946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2显式授权流程 / [OAuth2显式授权流程](part0105.xhtml#aid-344B22 "OAuth2显式授权流程")
- en: refresh-token and access-token / [Refresh-token and access-token](part0105.xhtml#aid-344B22
    "Refresh-token and access-token")
  id: totrans-7947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷新令牌和访问令牌 / [刷新令牌和访问令牌](part0105.xhtml#aid-344B22 "刷新令牌和访问令牌")
- en: Spring social / [Spring social – role and key features](part0105.xhtml#aid-344B22
    "Spring social – role and key features")
  id: totrans-7948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring社交 / [Spring社交-角色和关键功能](part0105.xhtml#aid-344B22 "Spring社交-角色和关键功能")
- en: social connections persistence / [Social connection persistence](part0105.xhtml#aid-344B22
    "Social connection persistence")
  id: totrans-7949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交连接持久性 / [社交连接持久性](part0105.xhtml#aid-344B22 "社交连接持久性")
- en: provider-specific configuration / [Provider-specific configuration](part0105.xhtml#aid-344B22
    "Provider-specific configuration")
  id: totrans-7950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于提供程序的配置 / [特定于提供程序的配置](part0105.xhtml#aid-344B22 "特定于提供程序的配置")
- en: Thymeleaf
  id: totrans-7951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thymeleaf
- en: about / [Resolving Thymeleaf views](part0041.xhtml#aid-173721 "Resolving Thymeleaf
    views"), [Using Thymeleaf](part0133.xhtml#aid-3UQQQ1 "Using Thymeleaf")
  id: totrans-7952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [解析Thymeleaf视图](part0041.xhtml#aid-173721 "解析Thymeleaf视图"), [使用Thymeleaf](part0133.xhtml#aid-3UQQQ1
    "使用Thymeleaf")
- en: views, resolving / [Resolving Thymeleaf views](part0041.xhtml#aid-173721 "Resolving
    Thymeleaf views")
  id: totrans-7953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图，解析 / [解析Thymeleaf视图](part0041.xhtml#aid-173721 "解析Thymeleaf视图")
- en: using / [Using Thymeleaf](part0133.xhtml#aid-3UQQQ1 "Using Thymeleaf")
  id: totrans-7954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [使用Thymeleaf](part0133.xhtml#aid-3UQQQ1 "使用Thymeleaf")
- en: reference link / [Using Thymeleaf](part0133.xhtml#aid-3UQQQ1 "Using Thymeleaf"),
    [Thymeleaf security tags](part0168.xhtml#aid-506UG2 "Thymeleaf security tags")
  id: totrans-7955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [使用Thymeleaf](part0133.xhtml#aid-3UQQQ1 "使用Thymeleaf"), [Thymeleaf安全标签](part0168.xhtml#aid-506UG2
    "Thymeleaf安全标签")
- en: page, adding / [Our first page](part0133.xhtml#aid-3UQQQ1 "Our first page")
  id: totrans-7956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面，添加 / [我们的第一个页面](part0133.xhtml#aid-3UQQQ1 "我们的第一个页面")
- en: thymeleaf security tags
  id: totrans-7957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: thymeleaf安全标签
- en: using / [Thymeleaf security tags](part0168.xhtml#aid-506UG2 "Thymeleaf security
    tags")
  id: totrans-7958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [Thymeleaf安全标签](part0168.xhtml#aid-506UG2 "Thymeleaf安全标签")
- en: Tomcat (7+)
  id: totrans-7959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat（7+）
- en: reference link / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  id: totrans-7960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: Tomcat 8
  id: totrans-7961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat 8
- en: Eclipse, configuring / [Getting ready](part0081.xhtml#aid-2D7TI2 "Getting ready"),
    [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-7962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse，配置 / [准备就绪](part0081.xhtml#aid-2D7TI2 "准备就绪"), [如何做...](part0081.xhtml#aid-2D7TI2
    "如何做...")
- en: URL / [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  id: totrans-7963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [如何做...](part0081.xhtml#aid-2D7TI2 "如何做...")
- en: Eclipse, integrating / [Tomcat 8 inside Eclipse](part0081.xhtml#aid-2D7TI2 "Tomcat
    8 inside Eclipse")
  id: totrans-7964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse，集成 / [Eclipse中的Tomcat 8](part0081.xhtml#aid-2D7TI2 "Eclipse中的Tomcat
    8")
- en: Tomcat connectors
  id: totrans-7965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat连接器
- en: about / [Tomcat connectors](part0102.xhtml#aid-318PC2 "Tomcat connectors")
  id: totrans-7966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Tomcat连接器](part0102.xhtml#aid-318PC2 "Tomcat连接器")
- en: HTTP connectors / [HTTP connectors](part0102.xhtml#aid-318PC2 "HTTP connectors")
  id: totrans-7967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP连接器 / [HTTP连接器](part0102.xhtml#aid-318PC2 "HTTP连接器")
- en: AJP connectors / [AJP connectors](part0102.xhtml#aid-318PC2 "AJP connectors")
  id: totrans-7968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJP连接器 / [AJP连接器](part0102.xhtml#aid-318PC2 "AJP连接器")
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  id: totrans-7969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [还有更多...](part0102.xhtml#aid-318PC2 "还有更多...")
- en: tools
  id: totrans-7970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: about / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  id: totrans-7971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [合适的工具](part0178.xhtml#aid-59O441 "合适的工具")
- en: JUnit / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  id: totrans-7972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit / [合适的工具](part0178.xhtml#aid-59O441 "合适的工具")
- en: AssertJ / [The right tools for the job](part0178.xhtml#aid-59O441 "The right
    tools for the job")
  id: totrans-7973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AssertJ / [合适的工具](part0178.xhtml#aid-59O441 "合适的工具")
- en: Mockito / [The right tools for the job](part0178.xhtml#aid-59O441 "The right
    tools for the job")
  id: totrans-7974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mockito / [合适的工具](part0178.xhtml#aid-59O441 "合适的工具")
- en: DbUnit / [The right tools for the job](part0178.xhtml#aid-59O441 "The right
    tools for the job")
  id: totrans-7975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DbUnit / [合适的工具](part0178.xhtml#aid-59O441 "合适的工具")
- en: Spock / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  id: totrans-7976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spock / [合适的工具](part0178.xhtml#aid-59O441 "合适的工具")
- en: transaction
  id: totrans-7977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易
- en: about / [Spring Transaction support](part0050.xhtml#aid-1FLS41 "Spring Transaction
    support")
  id: totrans-7978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [Spring事务支持](part0050.xhtml#aid-1FLS41 "Spring事务支持")
- en: transaction attributes
  id: totrans-7979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务属性
- en: defining / [Spring Transaction fundamentals](part0051.xhtml#aid-1GKCM2 "Spring
    Transaction fundamentals")
  id: totrans-7980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 / [Spring事务基础](part0051.xhtml#aid-1GKCM2 "Spring事务基础")
- en: transaction management
  id: totrans-7981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理
- en: about / [Transaction management](part0114.xhtml#aid-3CN042 "Transaction management")
  id: totrans-7982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [事务管理](part0114.xhtml#aid-3CN042 "事务管理")
- en: building / [The simplistic approach](part0114.xhtml#aid-3CN042 "The simplistic
    approach")
  id: totrans-7983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 / [简化的方法](part0114.xhtml#aid-3CN042 "简化的方法")
- en: ACID properties / [ACID properties](part0114.xhtml#aid-3CN042 "ACID properties")
  id: totrans-7984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACID属性 / [ACID属性](part0114.xhtml#aid-3CN042 "ACID属性")
- en: global transactions, versus local transactions / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  id: totrans-7985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局事务，本地事务 / [全局与本地事务](part0114.xhtml#aid-3CN042 "全局与本地事务")
- en: Twitter
  id: totrans-7986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推特
- en: URL / [Registering your application](part0136.xhtml#aid-41MCG1 "Registering
    your application"), [Twitter authentication](part0170.xhtml#aid-523VK2 "Twitter
    authentication")
  id: totrans-7987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [注册您的应用程序](part0136.xhtml#aid-41MCG1 "注册您的应用程序"), [Twitter身份验证](part0170.xhtml#aid-523VK2
    "Twitter身份验证")
- en: Twitter authentication
  id: totrans-7988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter身份验证
- en: setting up / [Twitter authentication](part0170.xhtml#aid-523VK2 "Twitter authentication")
  id: totrans-7989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 / [Twitter身份验证](part0170.xhtml#aid-523VK2 "Twitter身份验证")
- en: social authentication, setting up / [Setting up social authentication](part0170.xhtml#aid-523VK2
    "Setting up social authentication")
  id: totrans-7990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交身份验证，设置 / [设置社交身份验证](part0170.xhtml#aid-523VK2 "设置社交身份验证")
- en: coding / [Explanation](part0170.xhtml#aid-523VK2 "Explanation")
  id: totrans-7991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码 / [解释](part0170.xhtml#aid-523VK2 "解释")
- en: Typescript
  id: totrans-7992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typescript
- en: about / [The future](part0203.xhtml#aid-61J261 "The future")
  id: totrans-7993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [未来](part0203.xhtml#aid-61J261 "未来")
- en: URL / [The future](part0203.xhtml#aid-61J261 "The future")
  id: totrans-7994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [未来](part0203.xhtml#aid-61J261 "未来")
- en: U
  id: totrans-7995
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: U
- en: UI behavior
  id: totrans-7996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI行为
- en: handling, components used / [Handling UI behavior using components](part0069.xhtml#aid-21PMQ1
    "Handling UI behavior using components")
  id: totrans-7997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理，使用的组件 / [使用组件处理UI行为](part0069.xhtml#aid-21PMQ1 "使用组件处理UI行为")
- en: ToggleButton component, building step by step / [Building a ToggleButton component
    step by step](part0069.xhtml#aid-21PMQ1 "Building a ToggleButton component step
    by step")
  id: totrans-7998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ToggleButton组件，逐步构建 / [逐步构建ToggleButton组件](part0069.xhtml#aid-21PMQ1 "逐步构建ToggleButton组件")
- en: UI templates, building with Handlebars
  id: totrans-7999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Handlebars构建UI模板
- en: about / [Building UI templates using Handlebars](part0067.xhtml#aid-1VSLM2 "Building
    UI templates using Handlebars")
  id: totrans-8000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [使用Handlebars构建UI模板](part0067.xhtml#aid-1VSLM2 "使用Handlebars构建UI模板")
- en: Handlebars helpers / [Handlebars helpers](part0067.xhtml#aid-1VSLM2 "Handlebars
    helpers")
  id: totrans-8001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Handlebars助手 / [Handlebars助手](part0067.xhtml#aid-1VSLM2 "Handlebars助手")
- en: data binding, with input helpers / [Data binding with input helpers](part0067.xhtml#aid-1VSLM2
    "Data binding with input helpers")
  id: totrans-8002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据绑定，带输入助手 / [带输入助手的数据绑定](part0067.xhtml#aid-1VSLM2 "带输入助手的数据绑定")
- en: control flow helpers, using in Handlebars / [Using control flow helpers in Handlebars](part0067.xhtml#aid-1VSLM2
    "Using control flow helpers in Handlebars")
  id: totrans-8003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流助手，在Handlebars中使用 / [在Handlebars中使用控制流助手](part0067.xhtml#aid-1VSLM2 "在Handlebars中使用控制流助手")
- en: event helpers, using / [Using event helpers](part0067.xhtml#aid-1VSLM2 "Using
    event helpers")
  id: totrans-8004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件助手，使用 / [使用事件助手](part0067.xhtml#aid-1VSLM2 "使用事件助手")
- en: Unified Expression Language (UEL) / [Spring Expression Language](part0024.xhtml#aid-MSDG1
    "Spring Expression Language")
  id: totrans-8005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一表达式语言（UEL） / [Spring表达式语言](part0024.xhtml#aid-MSDG1 "Spring表达式语言")
- en: unit tests
  id: totrans-8006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: about / [How should I test my code?](part0176.xhtml#aid-57R301 "How should I
    test my code?"), [The unit tests](part0178.xhtml#aid-59O441 "The unit tests")
  id: totrans-8007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [我应该如何测试我的代码？](part0176.xhtml#aid-57R301 "我应该如何测试我的代码？"), [单元测试](part0178.xhtml#aid-59O441
    "单元测试")
- en: tools / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  id: totrans-8008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具 / [工作的正确工具](part0178.xhtml#aid-59O441 "工作的正确工具")
- en: writing / [Our first unit test](part0180.xhtml#aid-5BL581 "Our first unit test")
  id: totrans-8009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 / [我们的第一个单元测试](part0180.xhtml#aid-5BL581 "我们的第一个单元测试")
- en: REST controllers / [Unit testing REST controllers](part0182.xhtml#aid-5DI6C2
    "Unit testing REST controllers")
  id: totrans-8010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST控制器 / [对REST控制器进行单元测试](part0182.xhtml#aid-5DI6C2 "对REST控制器进行单元测试")
- en: with Spock / [Unit tests with Spock](part0184.xhtml#aid-5FF7G2 "Unit tests with
    Spock")
  id: totrans-8011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spock / [使用Spock进行单元测试](part0184.xhtml#aid-5FF7G2 "使用Spock进行单元测试")
- en: URI template patterns
  id: totrans-8012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI模板模式
- en: about / [URI template patterns](part0086.xhtml#aid-2I0GC2 "URI template patterns")
  id: totrans-8013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [URI模板模式](part0086.xhtml#aid-2I0GC2 "URI模板模式")
- en: Ant-style path patterns / [Ant-style path patterns](part0086.xhtml#aid-2I0GC2
    "Ant-style path patterns")
  id: totrans-8014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ant样式路径模式 / [Ant样式路径模式](part0086.xhtml#aid-2I0GC2 "Ant样式路径模式")
- en: Path pattern comparison / [Path pattern comparison](part0086.xhtml#aid-2I0GC2
    "Path pattern comparison")
  id: totrans-8015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径模式比较 / [路径模式比较](part0086.xhtml#aid-2I0GC2 "路径模式比较")
- en: ViewResolvers / [ViewResolvers](part0086.xhtml#aid-2I0GC2 "ViewResolvers")
  id: totrans-8016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ViewResolvers / [ViewResolvers](part0086.xhtml#aid-2I0GC2 "ViewResolvers")
- en: URL mapping
  id: totrans-8017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL映射
- en: with matrix variables / [URL mapping with matrix variables](part0151.xhtml#aid-4G04U2
    "URL mapping with matrix variables")
  id: totrans-8018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带矩阵变量 / [带矩阵变量的URL映射](part0151.xhtml#aid-4G04U2 "带矩阵变量的URL映射")
- en: UserDetails interface
  id: totrans-8019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UserDetails接口
- en: about / [The UserDetails interface](part0103.xhtml#aid-3279U2 "The UserDetails
    interface")
  id: totrans-8020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [UserDetails接口](part0103.xhtml#aid-3279U2 "UserDetails接口")
- en: authentication providers / [Authentication providers](part0103.xhtml#aid-3279U2
    "Authentication providers")
  id: totrans-8021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证提供者 / [认证提供者](part0103.xhtml#aid-3279U2 "认证提供者")
- en: UserDetailsManager interface
  id: totrans-8022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UserDetailsManager接口
- en: about / [The UserDetailsManager interface](part0103.xhtml#aid-3279U2 "The UserDetailsManager
    interface")
  id: totrans-8023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [UserDetailsManager接口](part0103.xhtml#aid-3279U2 "UserDetailsManager接口")
- en: User eXperience paradigm
  id: totrans-8024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户体验范式
- en: about / [The User eXperience paradigm](part0084.xhtml#aid-2G3F81 "The User eXperience
    paradigm")
  id: totrans-8025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [用户体验范式](part0084.xhtml#aid-2G3F81 "用户体验范式")
- en: user management API
  id: totrans-8026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户管理API
- en: about / [A user management API](part0162.xhtml#aid-4QFR42 "A user management
    API")
  id: totrans-8027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [用户管理API](part0162.xhtml#aid-4QFR42 "用户管理API")
- en: users
  id: totrans-8028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户
- en: Pre-invocation handling / [Pre-invocation handling](part0107.xhtml#aid-361C62
    "Pre-invocation handling")
  id: totrans-8029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预调用处理 / [预调用处理](part0107.xhtml#aid-361C62 "预调用处理")
- en: AccessDecisionManager interface / [AccessDecisionManager](part0107.xhtml#aid-361C62
    "AccessDecisionManager")
  id: totrans-8030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AccessDecisionManager接口 / [AccessDecisionManager](part0107.xhtml#aid-361C62
    "AccessDecisionManager")
- en: invocation handling / [After invocation handling](part0107.xhtml#aid-361C62
    "After invocation handling")
  id: totrans-8031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用处理 / [调用处理后](part0107.xhtml#aid-361C62 "调用处理后")
- en: expression-based access control / [Expression-based access control](part0107.xhtml#aid-361C62
    "Expression-based access control")
  id: totrans-8032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于表达式的访问控制 / [基于表达式的访问控制](part0107.xhtml#aid-361C62 "基于表达式的访问控制")
- en: Web security expressions / [Web Security expressions](part0107.xhtml#aid-361C62
    "Web Security expressions")
  id: totrans-8033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web安全表达式 / [Web安全表达式](part0107.xhtml#aid-361C62 "Web安全表达式")
- en: method security expressions / [Method security expressions](part0107.xhtml#aid-361C62
    "Method security expressions")
  id: totrans-8034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法安全表达式 / [方法安全表达式](part0107.xhtml#aid-361C62 "方法安全表达式")
- en: '@PreAuthorize, used for access control / [Access control using @PreAuthorize
    and @PostAuthorize](part0107.xhtml#aid-361C62 "Access control using @PreAuthorize
    and @PostAuthorize")'
  id: totrans-8035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@PreAuthorize，用于访问控制 / [使用@PreAuthorize和@PostAuthorize进行访问控制](part0107.xhtml#aid-361C62
    "使用@PreAuthorize和@PostAuthorize进行访问控制")'
- en: '@PostAuthorize, used for access control / [Access control using @PreAuthorize
    and @PostAuthorize](part0107.xhtml#aid-361C62 "Access control using @PreAuthorize
    and @PostAuthorize")'
  id: totrans-8036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@PostAuthorize，用于访问控制 / [使用@PreAuthorize和@PostAuthorize进行访问控制](part0107.xhtml#aid-361C62
    "使用@PreAuthorize和@PostAuthorize进行访问控制")'
- en: collections filtering, @PreFilter used / [Filtering collections using @PreFilter
    and @PostFilter](part0107.xhtml#aid-361C62 "Filtering collections using @PreFilter
    and @PostFilter")
  id: totrans-8037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合过滤，使用@PreFilter / [使用@PreFilter和@PostFilter过滤集合](part0107.xhtml#aid-361C62
    "使用@PreFilter和@PostFilter过滤集合")
- en: collections filtering, @PostFilter used / [Filtering collections using @PreFilter
    and @PostFilter](part0107.xhtml#aid-361C62 "Filtering collections using @PreFilter
    and @PostFilter")
  id: totrans-8038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@PostFilter进行集合过滤 / [使用@PreFilter和@PostFilter进行集合过滤](part0107.xhtml#aid-361C62
    "使用@PreFilter和@PostFilter进行集合过滤")
- en: JSR-250 / [JSR-250 and legacy method security](part0107.xhtml#aid-361C62 "JSR-250
    and legacy method security")
  id: totrans-8039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSR-250 / [JSR-250和传统方法安全](part0107.xhtml#aid-361C62 "JSR-250和传统方法安全")
- en: V
  id: totrans-8040
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: V
- en: validate command / [Validate](part0124.xhtml#aid-3M85O2 "Validate")
  id: totrans-8041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证命令 / [验证](part0124.xhtml#aid-3M85O2 "验证")
- en: validation, profile page
  id: totrans-8042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证，个人资料页面
- en: adding / [Validation](part0142.xhtml#aid-47DFS2 "Validation")
  id: totrans-8043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 / [验证](part0142.xhtml#aid-47DFS2 "验证")
- en: reference link / [Validation](part0142.xhtml#aid-47DFS2 "Validation")
  id: totrans-8044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [验证](part0142.xhtml#aid-47DFS2 "验证")
- en: validation messages, customizing / [Customize validation messages](part0142.xhtml#aid-47DFS2
    "Customize validation messages")
  id: totrans-8045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义验证消息 / [自定义验证消息](part0142.xhtml#aid-47DFS2 "自定义验证消息")
- en: custom annotation, defining / [Custom annotation for validation](part0142.xhtml#aid-47DFS2
    "Custom annotation for validation")
  id: totrans-8046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义自定义注释 / [自定义验证的自定义注释](part0142.xhtml#aid-47DFS2 "自定义验证的自定义注释")
- en: ValidationUnits utility
  id: totrans-8047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ValidationUnits实用程序
- en: URL / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
  id: totrans-8048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
- en: validators
  id: totrans-8049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证器
- en: reference link / [Client validation](part0144.xhtml#aid-49AH01 "Client validation")
  id: totrans-8050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [客户端验证](part0144.xhtml#aid-49AH01 "客户端验证")
- en: ViewResolver
  id: totrans-8051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ViewResolver
- en: used, for configuring fallback controller / [Configuring a fallback controller
    using ViewResolver](part0086.xhtml#aid-2I0GC2 "Configuring a fallback controller
    using ViewResolver"), [How to do it...](part0086.xhtml#aid-2I0GC2 "How to do it..."),
    [How it works...](part0086.xhtml#aid-2I0GC2 "How it works...")
  id: totrans-8052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于配置回退控制器 / [使用ViewResolver配置回退控制器](part0086.xhtml#aid-2I0GC2 "使用ViewResolver配置回退控制器"),
    [如何做...](part0086.xhtml#aid-2I0GC2 "如何做..."), [它是如何工作的...](part0086.xhtml#aid-2I0GC2
    "它是如何工作的...")
- en: view resolvers
  id: totrans-8053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图解析器
- en: AbstractCachingViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AbstractCachingViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: XmlViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving views")
  id: totrans-8055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XmlViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: ResourceBundleViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ResourceBundleViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: UrlBasedViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于URL的视图解析器/ [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: InternalResourceViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InternalResourceViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: VelocityViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VelocityViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: FreeMarkerViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FreeMarkerViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: JasperReportsViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  id: totrans-8061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JasperReportsViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: TilesViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving views")
  id: totrans-8062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TilesViewResolver / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: views
  id: totrans-8063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图
- en: working with / [Working with views](part0036.xhtml#aid-12AK81 "Working with
    views")
  id: totrans-8064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 / [使用视图](part0036.xhtml#aid-12AK81 "使用视图")
- en: resolving / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving views")
  id: totrans-8065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析 / [解析视图](part0036.xhtml#aid-12AK81 "解析视图")
- en: JSP views, resolving / [Resolving JSP views](part0036.xhtml#aid-12AK81 "Resolving
    JSP views")
  id: totrans-8066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP视图，解析 / [解析JSP视图](part0036.xhtml#aid-12AK81 "解析JSP视图")
- en: model attributes, binding in JSP pages / [Binding Model attributes in JSP pages
    using JSTL](part0036.xhtml#aid-12AK81 "Binding Model attributes in JSP pages using
    JSTL")
  id: totrans-8067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JSP页面中绑定模型属性 / [使用JSTL在JSP页面中绑定模型属性](part0036.xhtml#aid-12AK81 "使用JSTL在JSP页面中绑定模型属性")
- en: view technologies, Spring MVC / [More view technologies](part0042.xhtml#aid-181NK1
    "More view technologies")
  id: totrans-8068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图技术，Spring MVC / [更多视图技术](part0042.xhtml#aid-181NK1 "更多视图技术")
- en: W
  id: totrans-8069
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: W
- en: web.xml file
  id: totrans-8070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web.xml文件
- en: reference link / [There's more...](part0083.xhtml#aid-2F4UM2 "There's more...")
  id: totrans-8071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接 / [还有更多...](part0083.xhtml#aid-2F4UM2 "还有更多...")
- en: web application
  id: totrans-8072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用程序
- en: Dispatcher Servlet / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
  id: totrans-8073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dispatcher Servlet / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
- en: data, displaying / [Passing data to the view](part0134.xhtml#aid-3VPBC1 "Passing
    data to the view")
  id: totrans-8074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示数据 / [将数据传递给视图](part0134.xhtml#aid-3VPBC1 "将数据传递给视图")
- en: deploying, to Pivotal Web Services (PWS) / [Deploying your web application to
    Pivotal Web Services](part0197.xhtml#aid-5RRUQ2 "Deploying your web application
    to Pivotal Web Services")
  id: totrans-8075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到Pivotal Web Services（PWS） / [将您的Web应用程序部署到Pivotal Web Services](part0197.xhtml#aid-5RRUQ2
    "将您的Web应用程序部署到Pivotal Web Services")
- en: Cloud Foundry CLI tools, installing / [Installing the Cloud Foundry CLI tools](part0197.xhtml#aid-5RRUQ2
    "Installing the Cloud Foundry CLI tools")
  id: totrans-8076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Cloud Foundry CLI工具 / [安装Cloud Foundry CLI工具](part0197.xhtml#aid-5RRUQ2 "安装Cloud
    Foundry CLI工具")
- en: assembling / [Assembling the application](part0197.xhtml#aid-5RRUQ2 "Assembling
    the application")
  id: totrans-8077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装 / [组装应用程序](part0197.xhtml#aid-5RRUQ2 "组装应用程序")
- en: Redis, activating / [Activating Redis](part0197.xhtml#aid-5RRUQ2 "Activating
    Redis")
  id: totrans-8078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活Redis / [激活Redis](part0197.xhtml#aid-5RRUQ2 "激活Redis")
- en: deploying, on Heroku / [Deploying your web application on Heroku](part0198.xhtml#aid-5SQFC2
    "Deploying your web application on Heroku")
  id: totrans-8079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Heroku上部署 / [将您的Web应用程序部署到Heroku](part0198.xhtml#aid-5SQFC2 "将您的Web应用程序部署到Heroku")
- en: setting up, on Heroku / [Setting up the application](part0198.xhtml#aid-5SQFC2
    "Setting up the application")
  id: totrans-8080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Heroku上设置 / [设置应用程序](part0198.xhtml#aid-5SQFC2 "设置应用程序")
- en: executing, on Heroku / [Running your application](part0198.xhtml#aid-5SQFC2
    "Running your application")
  id: totrans-8081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Heroku上执行 / [运行您的应用程序](part0198.xhtml#aid-5SQFC2 "运行您的应用程序")
- en: improving / [Improving your application](part0199.xhtml#aid-5TOVU1 "Improving
    your application")
  id: totrans-8082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进 / [改进您的应用程序](part0199.xhtml#aid-5TOVU1 "改进您的应用程序")
- en: WebApplicationObjectSupport
  id: totrans-8083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebApplicationObjectSupport
- en: URL / [More features offered by WebContentGenerator](part0089.xhtml#aid-2KS222
    "More features offered by WebContentGenerator")
  id: totrans-8084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [WebContentGenerator提供的更多功能](part0089.xhtml#aid-2KS222 "WebContentGenerator提供的更多功能")
- en: web archives (war)
  id: totrans-8085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web存档（war）
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  id: totrans-8086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [准备就绪](part0082.xhtml#aid-2E6E42 "准备就绪")
- en: Web caching
  id: totrans-8087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web缓存
- en: URL / [Web caching](part0089.xhtml#aid-2KS222 "Web caching")
  id: totrans-8088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [Web缓存](part0089.xhtml#aid-2KS222 "Web缓存")
- en: WebContentGenerator
  id: totrans-8089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebContentGenerator
- en: about / [More features offered by WebContentGenerator](part0089.xhtml#aid-2KS222
    "More features offered by WebContentGenerator")
  id: totrans-8090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [WebContentGenerator提供的更多功能](part0089.xhtml#aid-2KS222 "WebContentGenerator提供的更多功能")
- en: WebContentInterceptor
  id: totrans-8091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebContentInterceptor
- en: defining / [Defining a common WebContentInterceptor](part0089.xhtml#aid-2KS222
    "Defining a common WebContentInterceptor"), [How to do it...](part0089.xhtml#aid-2KS222
    "How to do it..."), [How it works...](part0089.xhtml#aid-2KS222 "How it works...")
  id: totrans-8092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义/ [定义通用的WebContentInterceptor](part0089.xhtml#aid-2KS222 "定义通用的WebContentInterceptor"),
    [如何做...](part0089.xhtml#aid-2KS222 "如何做..."), [它是如何工作的...](part0089.xhtml#aid-2KS222
    "它是如何工作的...")
- en: controllers / [Common behaviors for Controllers](part0089.xhtml#aid-2KS222 "Common
    behaviors for Controllers")
  id: totrans-8093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器/ [控制器的常见行为](part0089.xhtml#aid-2KS222 "控制器的常见行为")
- en: sessions, requiring / [Requiring sessions](part0089.xhtml#aid-2KS222 "Requiring
    sessions")
  id: totrans-8094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话，需要/ [需要会话](part0089.xhtml#aid-2KS222 "需要会话")
- en: sessions, synchronizing / [Synchronizing sessions](part0089.xhtml#aid-2KS222
    "Synchronizing sessions")
  id: totrans-8095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话，同步/ [同步会话](part0089.xhtml#aid-2KS222 "同步会话")
- en: cache-headers management / [Cache-header management](part0089.xhtml#aid-2KS222
    "Cache-header management")
  id: totrans-8096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存头管理/ [缓存头管理](part0089.xhtml#aid-2KS222 "缓存头管理")
- en: HTTP methods support / [HTTP method support](part0089.xhtml#aid-2KS222 "HTTP
    method support")
  id: totrans-8097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP方法支持/ [HTTP方法支持](part0089.xhtml#aid-2KS222 "HTTP方法支持")
- en: high-level interceptor / [A high-level interceptor](part0089.xhtml#aid-2KS222
    "A high-level interceptor")
  id: totrans-8098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级拦截器/ [高级拦截器](part0089.xhtml#aid-2KS222 "高级拦截器")
- en: request lifecycle / [Request lifecycle](part0089.xhtml#aid-2KS222 "Request lifecycle")
  id: totrans-8099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求生命周期/ [请求生命周期](part0089.xhtml#aid-2KS222 "请求生命周期")
- en: WebJars
  id: totrans-8100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebJars
- en: used, for material design / [Material design with WebJars](part0138.xhtml#aid-43JDK2
    "Material design with WebJars")
  id: totrans-8101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于材料设计/ [使用WebJars进行材料设计](part0138.xhtml#aid-43JDK2 "使用WebJars进行材料设计")
- en: layouts, using / [Using layouts](part0138.xhtml#aid-43JDK2 "Using layouts")
  id: totrans-8102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局，使用/ [使用布局](part0138.xhtml#aid-43JDK2 "使用布局")
- en: navigation, using / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  id: totrans-8103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用导航/ [导航](part0138.xhtml#aid-43JDK2 "导航")
- en: TweetController, using / [The check point](part0139.xhtml#aid-44HU61 "The check
    point")
  id: totrans-8104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TweetController，使用/ [检查点](part0139.xhtml#aid-44HU61 "检查点")
- en: web resources
  id: totrans-8105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web资源
- en: about / [The web resources](part0083.xhtml#aid-2F4UM2 "The web resources")
  id: totrans-8106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Web资源](part0083.xhtml#aid-2F4UM2 "Web资源")
- en: target runtime environment / [The target runtime environment](part0083.xhtml#aid-2F4UM2
    "The target runtime environment")
  id: totrans-8107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标运行环境/ [目标运行环境](part0083.xhtml#aid-2F4UM2 "目标运行环境")
- en: Spring web application context / [The Spring web application context](part0083.xhtml#aid-2F4UM2
    "The Spring web application context")
  id: totrans-8108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Web应用程序上下文/ [Spring Web应用程序上下文](part0083.xhtml#aid-2F4UM2 "Spring Web应用程序上下文")
- en: plugins / [Plugins](part0083.xhtml#aid-2F4UM2 "Plugins")
  id: totrans-8109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件/ [插件](part0083.xhtml#aid-2F4UM2 "插件")
- en: web services
  id: totrans-8110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务
- en: URL / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
  id: totrans-8111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
- en: Web Servlet Support / [Web Servlet Support](part0128.xhtml#aid-3Q2802 "Web Servlet
    Support")
  id: totrans-8112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web Servlet支持/ [Web Servlet支持](part0128.xhtml#aid-3Q2802 "Web Servlet支持")
- en: WebSocket
  id: totrans-8113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSocket
- en: about / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  id: totrans-8114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
- en: using / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  id: totrans-8115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用/ [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
- en: reference link / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  id: totrans-8116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考链接/ [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
- en: WebSocket application
  id: totrans-8117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSocket应用程序
- en: message, broadcasting to single user / [Broadcasting a message to a single user
    in a WebSocket application](part0055.xhtml#aid-1KEEU1 "Broadcasting a message
    to a single user in a WebSocket application")
  id: totrans-8118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息，广播给单个用户/ [在WebSocket应用程序中向单个用户广播消息](part0055.xhtml#aid-1KEEU1 "在WebSocket应用程序中向单个用户广播消息")
- en: WebSockets
  id: totrans-8119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSockets
- en: about / [An introduction to WebSockets](part0119.xhtml#aid-3HFIU2 "An introduction
    to WebSockets")
  id: totrans-8120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [WebSockets简介](part0119.xhtml#aid-3HFIU2 "WebSockets简介")
- en: URL / [An introduction to WebSockets](part0119.xhtml#aid-3HFIU2 "An introduction
    to WebSockets")
  id: totrans-8121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL/ [WebSockets简介](part0119.xhtml#aid-3HFIU2 "WebSockets简介")
- en: lifecycle / [WebSocket Lifecycle](part0119.xhtml#aid-3HFIU2 "WebSocket Lifecycle")
  id: totrans-8122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期/ [WebSocket生命周期](part0119.xhtml#aid-3HFIU2 "WebSocket生命周期")
- en: URI schemes / [Two dedicated URI schemes](part0119.xhtml#aid-3HFIU2 "Two dedicated
    URI schemes")
  id: totrans-8123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URI方案/ [两个专用URI方案](part0119.xhtml#aid-3HFIU2 "两个专用URI方案")
- en: web structure
  id: totrans-8124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web结构
- en: about / [Installing Spring, Spring MVC, and a web structure](part0083.xhtml#aid-2F4UM2
    "Installing Spring, Spring MVC, and a web structure")
  id: totrans-8125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [安装Spring，Spring MVC和Web结构](part0083.xhtml#aid-2F4UM2 "安装Spring，Spring MVC和Web结构")
- en: creating / [Getting ready](part0083.xhtml#aid-2F4UM2 "Getting ready"), [How
    to do it...](part0083.xhtml#aid-2F4UM2 "How to do it..."), [How it works...](part0083.xhtml#aid-2F4UM2
    "How it works...")
  id: totrans-8126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建/ [准备就绪](part0083.xhtml#aid-2F4UM2 "准备就绪"), [如何做...](part0083.xhtml#aid-2F4UM2
    "如何做..."), [它是如何工作的...](part0083.xhtml#aid-2F4UM2 "它是如何工作的...")
- en: Web Tools Platform (WTP) plugins
  id: totrans-8127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web工具平台（WTP）插件
- en: about / [Tomcat 8 inside Eclipse](part0081.xhtml#aid-2D7TI2 "Tomcat 8 inside
    Eclipse")
  id: totrans-8128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [Eclipse中的Tomcat 8](part0081.xhtml#aid-2D7TI2 "Eclipse中的Tomcat 8")
- en: workers / [Workers](part0102.xhtml#aid-318PC2 "Workers")
  id: totrans-8129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作者/ [工作者](part0102.xhtml#aid-318PC2 "工作者")
- en: X
  id: totrans-8130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: X
- en: XML
  id: totrans-8131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML
- en: generating / [Generating XML](part0165.xhtml#aid-4TBCQ1 "Generating XML")
  id: totrans-8132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成/ [生成XML](part0165.xhtml#aid-4TBCQ1 "生成XML")
- en: XML marshalling, support for
  id: totrans-8133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML编组，支持
- en: about / [Support for XML marshalling](part0097.xhtml#aid-2SG6I2 "Support for
    XML marshalling")
  id: totrans-8134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于/ [支持XML编组](part0097.xhtml#aid-2SG6I2 "支持XML编组")
- en: XStream marshaller / [The XStream marshaller](part0097.xhtml#aid-2SG6I2 "The
    XStream marshaller")
  id: totrans-8135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XStream编组器/ [XStream编组器](part0097.xhtml#aid-2SG6I2 "XStream编组器")
- en: XML parser
  id: totrans-8136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML解析器
- en: JAXB2 implementation, using as / [Using a JAXB2 implementation as an XML parser](part0097.xhtml#aid-2SG6I2
    "Using a JAXB2 implementation as an XML parser")
  id: totrans-8137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAXB2实现，使用为 / [使用JAXB2实现作为XML解析器](part0097.xhtml#aid-2SG6I2 "使用JAXB2实现作为XML解析器")
- en: XML schema based AOP
  id: totrans-8138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于XML模式的AOP
- en: about / [XML schema-based AOP](part0025.xhtml#aid-NQU22 "XML schema-based AOP")
  id: totrans-8139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [基于XML模式的AOP](part0025.xhtml#aid-NQU22 "基于XML模式的AOP")
- en: XStream
  id: totrans-8140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XStream
- en: URL / [The XStream marshaller](part0097.xhtml#aid-2SG6I2 "The XStream marshaller")
  id: totrans-8141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [XStream编组器](part0097.xhtml#aid-2SG6I2 "XStream编组器")
- en: X Stream converters
  id: totrans-8142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X Stream转换器
- en: URL / [XStream converters](part0111.xhtml#aid-39REE2 "XStream converters")
  id: totrans-8143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [XStream转换器](part0111.xhtml#aid-39REE2 "XStream转换器")
- en: Y
  id: totrans-8144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Y
- en: Yahoo! APIs
  id: totrans-8145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo! API
- en: URL / [See also](part0112.xhtml#aid-3APV02 "See also")
  id: totrans-8146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL / [另请参阅](part0112.xhtml#aid-3APV02 "另请参阅")
- en: Yahoo! financial stock tickers / [See also](part0112.xhtml#aid-3APV02 "See also")
  id: totrans-8147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo!财务股票代码 / [另请参阅](part0112.xhtml#aid-3APV02 "另请参阅")
- en: Z
  id: totrans-8148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Z
- en: zipcloud-core
  id: totrans-8149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: zipcloud-core
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  id: totrans-8150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [准备工作](part0082.xhtml#aid-2E6E42 "准备工作")
- en: zipcloud-parent
  id: totrans-8151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: zipcloud-parent
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  id: totrans-8152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 / [准备工作](part0082.xhtml#aid-2E6E42 "准备工作")
