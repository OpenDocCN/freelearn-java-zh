- en: Chapter 10. Hardening the WildFly Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。强化WildFly通信
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下食谱：
- en: Securing WildFly using HTTPS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTPS保护WildFly
- en: Securing a specific application using HTTPS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTPS保护特定应用程序
- en: Securing the WildFly console using HTTPS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTPS保护WildFly控制台
- en: Securing domain and host controllers' communication using HTTPS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTPS保护域和主机控制器之间的通信
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to secure your WildFly systems from a communication
    channel point of view, which is the HTTPS protocol. If system security is a concern,
    you will need to provide such a capability. By the way, when securing your system
    at any layer, keep an eye on performance, because it may cause some overhead.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何从通信通道的角度来保护你的WildFly系统，即HTTPS协议。如果系统安全是一个关注点，你需要提供这样的功能。顺便说一句，在任何一个层面对系统进行安全保护时，都要关注性能，因为它可能会造成一些开销。
- en: 'We will learn how to provide security in a WildFly system at different stages,
    that is,:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在WildFly系统的不同阶段提供安全性，即：
- en: Securing your application communication access protocol
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护你的应用程序通信访问协议
- en: Securing the WildFly management console
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护WildFly管理控制台
- en: Securing the communication between the domain controller and all the host controllers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护域控制器与所有主机控制器之间的通信安全
- en: While the last two points do not impact performance that much as they are administrative
    tools, the first one may impact your performance. By the way, in an enterprise
    environment, often times, your WildFly middleware platform is behind a reverse
    proxy (that is, Apache HTTPD), and into a **Demilitarized Zone** (**DMZ**). For
    this reason, you should eventually secure the reverse proxy and not the traffic
    between Apache and WildFly, which will just cause CPU overhead. Avoid HTTPS between
    Apache and WildFly when your network infrastructure already provides security
    within a DMZ.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最后两点对性能的影响不大，因为它们是管理工具，但第一个可能会影响你的性能。顺便说一句，在企业环境中，通常情况下，你的WildFly中间件平台位于反向代理（即Apache
    HTTPD）之后，进入**非军事区**（**DMZ**）。因此，你应该最终保护反向代理，而不是Apache和WildFly之间的流量，这只会造成CPU开销。如果你的网络基础设施已经在DMZ内提供了安全，那么在Apache和WildFly之间避免使用HTTPS。
- en: Okay, now that I'm in peace with my conscience, let's start!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我已经与我的良心和解，让我们开始吧！
- en: Securing WildFly using HTTPS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTPS保护WildFly
- en: In this recipe, we will learn how to use a secure channel to provide your applications
    with services, which is by using the HTTPS protocol. If privacy is a concern for
    you, this recipe will show how you can protect your data traffic. By the way,
    securing your applications needs different considerations and aspects, which should
    be addressed and resolved by developers and operations team.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何使用安全通道为你的应用程序提供服务，这是通过使用HTTPS协议来实现的。如果你对隐私有顾虑，这个食谱将展示你如何保护你的数据流量。顺便说一句，保护你的应用程序需要不同的考虑和方面，这些问题应该由开发人员和运维团队解决。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们首先创建一个`ad-hoc`文件夹来运行我们的WildFly。在终端窗口中执行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now it's time to create our keystore which is used to encrypt the data traffic.
    We will be using one password to open the keystore file itself, and one password
    to load the alias.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建我们的密钥库，它用于加密数据流量。我们将使用一个密码来打开密钥库文件本身，并使用一个密码来加载别名。
- en: 'Open a new terminal window and give the following commands:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并输入以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Okay, now we have created the keystore to encrypt HTTP messages. Let''s check
    its integrity by executing the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在我们已经创建了用于加密HTTP消息的密钥库。让我们通过执行以下命令来检查其完整性：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Okay, everything is fine!!!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，一切正常！！！
- en: We are now ready to configure WildFly to expose itself and our applications
    via HTTPS.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好配置WildFly以通过HTTPS公开自身和我们的应用程序。
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We are now going to make a few changes to the WildFly configuration files in
    order to achieve our goal. We will see both the operational modes: standalone
    and domain.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将对WildFly的配置文件进行一些修改，以实现我们的目标。我们将看到两种操作模式：独立模式和域模式。
- en: Standalone
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立模式
- en: 'First of all, start a WildFly instance as usual:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，像往常一样启动一个WildFly实例：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Within a different terminal window, connect to the WildFly CLI and run the
    following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不同的终端窗口中，连接到WildFly CLI并运行以下代码：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Okay, we are done with the configuration.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了配置。
- en: Let's test everything by opening a browser and pointing it to `https://localhost:8443/`:![Standalone](img/3744_10_01.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过打开浏览器并将它指向 `https://localhost:8443/` 来测试一切：![独立](img/3744_10_01.jpg)
- en: Browser warning the user about a self-signed certificate, thus untrusted
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浏览器警告用户关于自签名证书，因此不受信任
- en: First the browser will warn you about a security issue; just hit the **Add exception**
    button, and then, in the next pop-up, hit the **Confirm security exception** button.
    Once you confirm, the browser displays our WildFy instance running on HTTPS, as
    follows:![Standalone](img/3744_10_02.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，浏览器会警告你关于一个安全问题；只需点击 **添加异常** 按钮，然后，在下一个弹出窗口中，点击 **确认安全异常** 按钮。一旦确认，浏览器将显示我们的
    WildFy 实例正在通过 HTTPS 运行，如下所示：![独立](img/3744_10_02.jpg)
- en: Browser showing WildFly via HTTPS
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浏览器通过 HTTPS 显示 WildFly
- en: Domain
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域
- en: 'First of all, create an `ad-hoc` folder to operate in the domain mode:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个 `ad-hoc` 文件夹以在域模式下操作：
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From the *Getting ready* section of this recipe, see how you can create a keystore,
    or copy it from the `sec-std-node-1` folder (if you followed the *Standalone*
    section steps), as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本食谱的 *准备就绪* 部分中，看看您如何创建密钥库，或者从 `sec-std-node-1` 文件夹中复制它（如果您遵循了 *独立* 部分的步骤），如下所示：
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now start WildFly in the domain mode as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按照以下方式以域模式启动 WildFly：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, within a different terminal window, connect to the WildFly CLI and execute
    the following:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在另一个终端窗口中，连接到 WildFly CLI 并执行以下操作：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As we know that the WildFly default domain configuration provides two server-groups,
    one bound to the `full` profile and one bound to the `full-ha` profile (this one
    without an active server), we can enable the HTTPS protocol for the `full` profile.
    Within the same CLI console, run the following code:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们所知，WildFly 默认域配置提供了两个服务器组，一个绑定到 `full` 配置文件，另一个绑定到 `full-ha` 配置文件（这个没有活动服务器），我们可以为
    `full` 配置文件启用 HTTPS 协议。在同一个 CLI 控制台中，运行以下代码：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Keep in mind that acting on the profile, once the configuration has been reloaded,
    will spread the changes to all servers belonging to the server-group referencing
    the `full` profile.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，一旦配置已重新加载，对配置文件的操作将对引用 `full` 配置文件的所有服务器组中的所有服务器传播更改。
- en: Okay, we are done with the configuration.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了配置。
- en: Let's test everything by opening a browser and pointing it to `https://localhost:8443/`:![Domain](img/3744_10_01.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过打开浏览器并将它指向 `https://localhost:8443/` 来测试一切：![域](img/3744_10_01.jpg)
- en: Browser warning the user about a self-signed certificate, thus untrusted
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浏览器警告用户关于自签名证书，因此不受信任
- en: First the browser will warn you about a security issue; just hit the **Add exception**
    button, and then, in the next pop-up, hit the **Confirm security exception** button.
    Once you confirm, the browser displays our WildFy instance running on HTTPS, as
    follows:![Domain](img/3744_10_02.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，浏览器会警告你关于一个安全问题；只需点击 **添加异常** 按钮，然后，在下一个弹出窗口中，点击 **确认安全异常** 按钮。一旦确认，浏览器将显示我们的
    WildFy 实例正在通过 HTTPS 运行，如下所示：![域](img/3744_10_02.jpg)
- en: Browser showing WildFly via HTTPS
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浏览器通过 HTTPS 显示 WildFly
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: On the WildFly side, we declared a new realm in the `management` section, calling
    it `SSLRealm`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WildFly 方面，我们在 `management` 部分中声明了一个新的域，命名为 `SSLRealm`。
- en: Within the new realm, we declared the keystore, which contains the certificates
    to be used by the HTTPS protocol to encrypt the data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的域中，我们声明了密钥库，其中包含用于 HTTPS 协议加密数据的证书。
- en: Lastly, for both the operational modes, we added the `https-listener` to the
    `Undertow` subsystem, referencing the newly created realm and the `https` socket-binding.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于两种操作模式，我们在 `Undertow` 子系统中添加了 `https-listener`，引用了新创建的域和 `https` 套接字绑定。
- en: That is all that is needed by WildFly to serve your application via a secure
    channel, that is, via HTTPS.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 WildFly 通过安全通道（即 HTTPS）提供服务所需的所有内容。
- en: There's more…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As you have noticed from the configuration files `standalone.xml` and `domain.xml`,
    we left the `http-listener`. As a matter of fact, our applications are also available
    via HTTP, which is clear, so both the following URLs would provide our WildFly
    welcome page and our applications, if any:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从配置文件 `standalone.xml` 和 `domain.xml` 中注意到的那样，我们保留了 `http-listener`。事实上，我们的应用程序也通过
    HTTP 可用，这是显而易见的，所以以下两个 URL 都会提供我们的 WildFly 欢迎页面以及任何应用程序：
- en: '`http://localhost:8080`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080`'
- en: '`https://localhost:8443`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://localhost:8443`'
- en: 'If you are seeing a page like the following, it is because you entered the
    hostname and the port correctly (that is, `localhost` and `8443`), but you used
    the HTTP schema, instead of the HTTPS schema:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下页面，那么是因为您正确地输入了主机名和端口号（即`localhost`和`8443`），但您使用了HTTP方案，而不是HTTPS方案：
- en: '![There''s more…](img/3744_10_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/3744_10_03.jpg)'
- en: Browser trying to show the encrypted data within US-ASCII encoding
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器尝试使用US-ASCII编码显示加密数据
- en: Nevertheless, if you want to provide just the secure channel, remove the `http-listener`
    declaration from the configuration, and you will be secured.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您只想提供安全通道，请从配置中删除`http-listener`声明，这样您就会得到安全保障。
- en: Bear in mind that disabling the `http-listener` needs a little attention, because
    it is referenced by other subsystems such as `ejb3` and `webservices` (both related
    to the `http-remoting-connector`, which is bound to the `http-listener`).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，禁用`http-listener`需要一点注意，因为它被其他子系统（如`ejb3`和`webservices`）引用（这两个都与`http-remoting-connector`相关，它绑定到`http-listener`）。
- en: 'Doing so, your application will not be reachable via HTTP, as seen in the following
    screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做，您的应用程序将无法通过HTTP访问，如下面的截图所示：
- en: '![There''s more…](img/3744_10_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/3744_10_04.jpg)'
- en: Browser cannot reach the application via HTTP
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器无法通过HTTP访问应用程序
- en: See also…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见…
- en: For a deeper understanding of the keytool command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要深入了解keytool命令，请参阅Oracle官方文档，链接为[https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)。
- en: Securing a specific application using HTTPS
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTPS保护特定应用程序
- en: In this recipe, we will learn how to use a secure channel for a specific application.
    This is related to how your application is reached, and not to how to secure your
    data model, functionality, and all the features that an application comes with.
    Securing applications needs different considerations and aspects, which should
    be addressed and resolved mostly on the dev-side.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何为特定应用程序使用安全通道。这与您的应用程序如何被访问有关，而不是与如何保护您的数据模型、功能以及应用程序附带的所有功能有关。保护应用程序需要不同的考虑和方面，这些通常需要在开发端解决。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following commands:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们首先创建一个`ad-hoc`文件夹来运行我们的WildFly。在终端窗口中执行以下命令：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now it''s time to create our keystore, which is used to encrypt data traffic
    for our specific application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建我们的密钥库了，它用于加密特定应用程序的数据流量：
- en: 'Open a new terminal window and run the following codes:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口，并运行以下代码：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Okay, now we have created the keystore to encrypt HTTP messages. Let''s check
    its integrity by executing the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在我们已经创建了用于加密HTTP消息的密钥库。让我们通过执行以下命令来检查其完整性：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Okay, everything is fine!
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，一切正常！
- en: We are now ready to configure WildFly to expose our specific application via
    HTTPS.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在准备好配置WildFly以通过HTTPS公开我们的特定应用程序。
- en: To test the HTTPS configuration, we will need two applications named `ssl-example`
    and `no-ssl-example`, which you can find in my GitHub repository. If you skipped
    the *Managing applications using the deployments folder* recipe in [Chapter 2](ch02.html
    "Chapter 2. Running WildFly in Standalone Mode"), *Running WildFly in Standalone
    Mode*, please refer to it to download all source code and projects that you will
    need.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试HTTPS配置，我们需要两个名为`ssl-example`和`no-ssl-example`的应用程序，您可以在我的GitHub仓库中找到它们。如果您跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中的*使用部署文件夹管理应用程序*菜谱，请参阅它以下载您将需要的所有源代码和项目。
- en: 'To build the application, execute the following:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建应用程序，请执行以下操作：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once done, copy the artifacts `no-ssl-example.war` and `ssl-example.war` (under
    their relative `target` folder) into your local `$WILDFLY_HOME` folder.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将`no-ssl-example.war`和`ssl-example.war`（位于它们各自的`target`文件夹下）复制到您的本地`$WILDFLY_HOME`文件夹中。
- en: How to do it…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We are now going to make a few changes to the WildFly configuration files in
    order to achieve our goal. We will see both the operational modes: standalone
    and domain.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将对WildFly的配置文件进行一些修改，以实现我们的目标。我们将看到两种操作模式：独立模式和域模式。
- en: Standalone
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立模式
- en: 'First of all, start a WildFly instance as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下方式启动一个WildFly实例：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Within a different terminal window, connect to the WildFly CLI and execute
    the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端窗口中，连接到WildFly CLI并执行以下操作：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Okay, we are done with the configuration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了配置。
- en: Testing
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试
- en: 'We now need to deploy our applications using the CLI, as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要使用CLI部署我们的应用程序，如下所示：
- en: '[PRE16]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To test the configuration, open your browser and point it to `http://localhost:8080/no-ssl-example`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试配置，请打开您的浏览器并将其指向`http://localhost:8080/no-ssl-example`。
- en: You should get a page similar to the following:![Testing](img/3744_10_05.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会看到一个类似于以下页面：![Testing](img/3744_10_05.jpg)
- en: Now, point the browser to `https://localhost:8443/ssl-example`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将浏览器指向`https://localhost:8443/ssl-example`。
- en: After the security warning, you should get a page similar to the following:![Testing](img/3744_10_06.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安全警告之后，你应该会看到一个类似于以下页面：![Testing](img/3744_10_06.jpg)
- en: Now if you try to mix the schema and port along with the context application,
    you will see that the `ssl-example` application is only reachable via HTTPS, and
    that the `no-ssl-example` is only reachable via HTTP.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你尝试将模式、端口和上下文应用程序混合，你会看到`ssl-example`应用程序只能通过HTTPS访问，而`no-ssl-example`只能通过HTTP访问。
- en: Domain
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域
- en: 'First of all, create an `ad-hoc` folder to operate in the domain mode:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个`ad-hoc`文件夹以在域模式下操作：
- en: '[PRE17]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'From the *Getting ready* section of this recipe, see how you can create a keystore,
    or copy it from the `sec-std-node-2` folder (if you followed the *Standalone*
    section steps), as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本食谱的*准备就绪*部分，看看您如何创建密钥库，或者从`sec-std-node-2`文件夹中复制它（如果您遵循了*独立*部分的步骤），如下所示：
- en: '[PRE18]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now start WildFly in the domain mode, as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在以域模式启动WildFly，如下所示：
- en: '[PRE19]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, within a different terminal window, connect to the WildFly CLI and execute
    the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在另一个终端窗口中，连接到WildFly CLI并执行以下命令：
- en: '[PRE20]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As we know that the WildFly default domain configuration provides two server-groups,
    one bound to the `full` profile and one bound to the `full-ha` profile (this one
    without an active server), we can enable the HTTPS protocol for the `full` profile.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们所知，WildFly默认域配置提供了两个服务器组，一个绑定到`full`配置文件，另一个绑定到`full-ha`配置文件（这个没有活动服务器），我们可以为`full`配置文件启用HTTPS协议。
- en: 'Within the same CLI console, execute the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的CLI控制台中，执行以下命令：
- en: '[PRE21]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Keep in mind that acting on the profile, once the configuration has been reloaded,
    will spread the changes to all servers belonging to the server-group referencing
    the `full` profile.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，一旦配置已重新加载，对配置文件的操作将影响所有属于引用`full`配置文件的服务器组中的服务器。
- en: Okay, we are done with the configuration.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了配置。
- en: Testing
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试
- en: 'We now need to deploy our applications using the CLI, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要使用CLI部署我们的应用程序，如下所示：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To test the configuration, open your browser and point it to the following
    URL:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试配置，请打开您的浏览器并将其指向以下URL：
- en: '`http://localhost:8080/no-ssl-example`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/no-ssl-example`'
- en: '`https://localhost:8443/ssl-example`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://localhost:8443/ssl-example`'
- en: You should follow the same steps as described for the standalone mode, along
    with the same final pages.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该遵循与独立模式中描述的相同步骤，以及相同的最终页面。
- en: How it works…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: On the WildFly side, using the CLI, we created a new realm in the `management`
    section, calling it `AppSSLRealm`. Within the new realm, we declared the keystore,
    which contains the certificates to be used by the HTTPS protocol to encrypt the
    data.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly端，使用CLI，我们在`management`部分创建了一个新的域，命名为`AppSSLRealm`。在新域中，我们声明了密钥库，其中包含用于HTTPS协议加密数据的证书。
- en: Working on the `Undertow` subsystem, we added a server named `secure-server`.
    We then added `https-listener` to it, binding the listener to the `https` socket
    binding configuration and to the `AppSSLRealm` security realm.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Undertow`子系统上工作，我们添加了一个名为`secure-server`的服务器。然后我们向其添加了`https-listener`，将监听器绑定到`https`套接字绑定配置和`AppSSLRealm`安全域。
- en: Lastly, we defined a host named `secure-host`, and made it the default host
    for our `secure-server`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义了一个名为`secure-host`的主机，并将其设置为我们的`secure-server`的默认主机。
- en: Wait a minute! How did we match the `ssl-example.war` application to the `secure-host`
    configuration declared in the `Undertow` subsystem?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下！我们是如何将`ssl-example.war`应用程序与在`Undertow`子系统声明的`secure-host`配置匹配的？
- en: 'Matching happens at the application level. Within the `jboss-web.xml` in the
    `WEB-INF` folder of our application, you need to declare the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配发生在应用程序级别。在我们的应用程序`WEB-INF`文件夹中的`jboss-web.xml`中，您需要声明以下内容：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding XML code instructs WildFly that the application needs to be bound
    to the server named `secure-server`, along with the host named `secure-host`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述XML代码指示WildFly，该应用程序需要绑定到名为`secure-server`的服务器，以及名为`secure-host`的主机。
- en: This way WildFly (actually Undertow) will serve your application using that
    specific host.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这样WildFly（实际上是Undertow）将使用该特定主机来提供服务。
- en: 'Let''s view both the configurations together to better understand the matches:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们同时查看这两个配置，以便更好地理解匹配：
- en: '| WildFly – Undertow | Application |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| WildFly – Undertow | 应用程序 |'
- en: '| --- | --- |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: In the `server` declaration, there is also an attribute named `default-host`
    set to `secure-host`, but it is just used to indicate which host to use if there
    is more than one.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server`声明中，还有一个名为`default-host`的属性设置为`secure-host`，但它只是用来指示如果有多于一个主机时使用哪个主机。
- en: There's more…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: If you try to mix our configuration via the browser, you will notice that the
    `ssl-example` application will not be found using the `http-listener` configuration.
    The same holds true for the `example` application using the `https-listener` configuration.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试通过浏览器混合我们的配置，你会注意到使用`http-listener`配置找不到`ssl-example`应用程序。对于使用`https-listener`配置的`example`应用程序，情况也是如此。
- en: 'If you try to open your browser and point it to `http://localhost:8080/ssl-example,`
    you should land on a **404 – Not Found** page as seen in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试打开浏览器并将它指向`http://localhost:8080/ssl-example`，你应该会看到一个**404 – Not Found**页面，如下截图所示：
- en: '![There''s more…](img/3744_10_07.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多……](img/3744_10_07.jpg)'
- en: The same applies if you visit `https://localhost:8443/no-ssl-example`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问`https://localhost:8443/no-ssl-example`，同样适用。
- en: See also…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见……
- en: For a deeper understanding of the `keytool` command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要深入了解`keytool`命令，请参阅Oracle官方文档[https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)。
- en: Securing the WildFly console using HTTPS
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTPS保护WildFly控制台
- en: In this recipe, we will learn how to secure your WildFly management console
    at the communication protocol level. To achieve such a configuration, we will
    need to create a certificate which will be used to encrypt all the traffic.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何在通信协议级别保护WildFly管理控制台。为了实现这种配置，我们需要创建一个证书，该证书将用于加密所有流量。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window run the following commands:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们首先创建一个`ad-hoc`文件夹来运行我们的WildFly。在终端窗口中运行以下命令：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now it's time to create our keystore which is used to encrypt data traffic.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建我们的密钥库，该密钥库用于加密数据传输。
- en: 'Open a new terminal window and execute the following:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并执行以下命令：
- en: '[PRE27]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Okay, now we have created the keystore to encrypt HTTP messages. Let''s check
    its integrity by executing the following command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在我们已经创建了用于加密HTTP消息的密钥库。让我们通过执行以下命令来检查其完整性：
- en: '[PRE28]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Okay, everything is fine!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，一切正常！
- en: We are now ready to configure WildFly to expose its management console via HTTPS.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好配置WildFly，通过HTTPS公开其管理控制台。
- en: How to do it…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'We are now going to make a few changes to the WildFly configuration files in
    order to achieve our goal. We will see both the operational modes: standalone
    and domain.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将对WildFly的配置文件进行一些修改，以达到我们的目标。我们将看到两种操作模式：独立模式和域模式。
- en: Standalone
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立模式
- en: First of all, as we will create and use a new management realm (named `SecureManagementRealm`),
    we need to add a new management user (named `securewildfly`) to it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，由于我们将创建并使用一个新的管理域（命名为`SecureManagementRealm`），我们需要向其中添加一个新的管理用户（命名为`securewildfly`）。
- en: 'Open a new terminal window and execute the following:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并执行以下命令：
- en: '[PRE29]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure to clear the OS history commands after running the preceding command,
    because the password will be displayed as well. To clear the history, invoke a
    `history -c` command in the same terminal.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在运行前面的命令后清除OS历史命令，因为密码也会显示。要清除历史记录，在相同终端中调用`history -c`命令。
- en: 'Now we can proceed with the effective configuration. Start WildFly as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以继续进行有效配置。以下是如何启动WildFly：
- en: '[PRE30]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, within a different terminal window, connect to the WildFly CLI and run
    the following commands:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在另一个终端窗口中连接到WildFly CLI并运行以下命令：
- en: '[PRE31]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Okay, we are done with the configuration.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了配置。
- en: Testing
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试
- en: 'Open your browser and point it at `https://localhost:9993`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器，将其指向`https://localhost:9993`：
- en: '![Testing](img/3744_10_08.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Testing](img/3744_10_08.jpg)'
- en: Browser warning the user about an untrusted certificate
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器警告用户关于不受信任的证书
- en: First, the browser will warn you about a security issue; just hit the **Add
    exception** button, and then, in the next pop-up, hit the **Confirm security exception**
    button.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，浏览器会警告您存在安全问题；只需点击**添加异常**按钮，然后在下一个弹出窗口中点击**确认安全异常**按钮。
- en: The browser will then prompt you to enter the credentials to access the WildFly
    management console for the `SecureManagementRealm`; just input `securewildfly`
    as the username and `cookbook.2015` as the password.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将提示您输入凭证以访问`SecureManagementRealm`的WildFly管理控制台；只需输入`securewildfly`作为用户名，`cookbook.2015`作为密码。
- en: 'You should now be inside the Web Console, as depicted in the following image:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该已经进入了Web控制台，如下图中所示：
- en: '![Testing](img/3744_10_09.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![Testing](img/3744_10_09.jpg)'
- en: WildFly's management console via HTTPS
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 通过HTTPS的WildFly管理控制台
- en: Great, we are done!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们完成了！
- en: By the way, securing the console via HTTPS might be okay by itself, but still,
    people with credentials can log into it, and mess around with it. To better secure
    your management console, you should concentrate on a **Role Based Access Control**
    (**RBAC**) feature, available in WildFly and discussed later in this book, which
    gives you finer control over who can do what.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，通过HTTPS保护控制台本身可能没问题，但仍然，有凭证的人可以登录并对其进行操作。为了更好地保护您的管理控制台，您应该专注于WildFly中可用的**基于角色的访问控制**（**RBAC**）功能，本书稍后讨论，它为您提供了更细粒度的控制，谁可以做什么。
- en: Domain
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域
- en: 'First of all, create an `ad-hoc` folder to operate in the domain mode:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个`ad-hoc`文件夹以在域模式下操作：
- en: '[PRE32]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'From the *Getting ready* section of this recipe, see how you can create a keystore,
    or copy it from the `sec-std-node-mgmt` folder (if you followed the *Standalone*
    section steps), as follows:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本食谱的`准备就绪`部分，看看您如何创建密钥库，或者从`sec-std-node-mgmt`文件夹中复制它（如果您遵循了`独立`部分的步骤），如下所示：
- en: '[PRE33]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Next, as we will create and use a new management realm (named `SecureManagementRealm`),
    we need to add a new management user (named `securewildfly`) to it.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，由于我们将创建并使用一个新的管理域（命名为`SecureManagementRealm`），我们需要向其中添加一个新的管理用户（命名为`securewildfly`）。
- en: 'Open a new terminal window and execute the following commands:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并执行以下命令：
- en: '[PRE34]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure to clear the OS history commands after running the preceding command,
    because the password will be displayed as well. To clear the history, invoke a
    `history -c` command in the same terminal.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在运行上述命令后清除OS历史命令，因为密码也会显示出来。要清除历史记录，在同一终端中调用`history -c`命令。
- en: 'Now start WildFly in the domain mode as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按照以下方式以域模式启动WildFly：
- en: '[PRE35]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, within a different terminal window, connect to the WildFly CLI and run
    the following:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在另一个终端窗口中，连接到WildFly CLI并运行以下命令：
- en: '[PRE36]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We are kicked out from the console because it is not reachable on port `9990`
    any more, but on port `9993` (by default) instead.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们被踢出控制台，因为它不再可以通过端口`9990`访问，而是通过默认的端口`9993`。
- en: Testing
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试
- en: 'On opening a browser and pointing it to the `https://localhost:9993` URL, you
    will see the same as is described in the standalone mode: a security warning complaining
    about a self-signed certificate, the login pop up and finally the WildFly Admin
    Console.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开浏览器并将指针指向`https://localhost:9993` URL时，您将看到与独立模式中描述的相同内容：一个关于自签名证书的安全警告，登录弹出窗口，最后是WildFly管理控制台。
- en: How it works…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we defined the security realm via CLI and added it to the host, in this
    case, `master`. Within the new realm, we declared the keystore to be used by the
    HTTPS protocol to encrypt the data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过CLI定义了安全域，并将其添加到主机，在本例中是`master`。在新域中，我们声明了HTTPS协议所使用的密钥库来加密数据。
- en: Next, we referenced the newly created `SecureManagementRealm` into the `http-interface`
    section of the `management-interface`. For this, we also had to specify the `secure-port`,
    otherwise we would have bound the whole management interface to the default port
    `9990`, which would have led us to a `ssl_error_rx_record_too_long` browser error.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将新创建的`SecureManagementRealm`引用到`management-interface`的`http-interface`部分。为此，我们还需要指定`secure-port`，否则我们会将整个管理接口绑定到默认端口`9990`，这会导致我们遇到`ssl_error_rx_record_too_long`浏览器错误。
- en: That is all that is needed by WildFly to provide its management console via
    HTTPS.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是WildFly通过HTTPS提供管理控制台所需的所有内容。
- en: There's more…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Within this recipe, we have created and used a new realm to secure the management
    console. Nonetheless, we could have used the default `ManagementRealm`, which
    was fine.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们已经创建并使用了一个新的领域来保护管理控制台。尽管如此，我们也可以使用默认的`ManagementRealm`，这是可以的。
- en: Using a different realm would free us to switch realms as needed. But more importantly,
    when you create a user using the `add-user.sh` script, the password being generated
    contains the string's username, the realm name, and the password, all of which
    are then hashed using MD5 and then decoded in hexadecimal value.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的领域将使我们能够根据需要切换领域。但更重要的是，当你使用`add-user.sh`脚本创建用户时，生成的密码包含用户名、领域名称和密码的字符串，然后使用MD5进行哈希处理，并以十六进制值解码。
- en: 'So, within the `*-user.properties` files of your configuration, when you see
    `username=SOMETHING`, you should read it as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在您的配置的`*-user.properties`文件中，当您看到`username=SOMETHING`时，您应该这样阅读：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: See also
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For a deeper understanding of the `keytool` command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要深入了解`keytool`命令，请参阅Oracle官方文档[https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)。
- en: Securing domain and host controller communication using HTTPS
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTPS确保域和主机控制器通信安全
- en: In this recipe, we will learn how to secure the communication between the domain
    controller and the host controller. To achieve this, we need to create a keystore
    and certificate, one for each controller, including the domain.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何确保域控制器和主机控制器之间的通信安全。为了实现这一点，我们需要为每个控制器创建一个密钥库和证书，包括域。
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create the `ad-hoc` folders to run our WildFly
    instances: one master and two hosts. In a terminal window execute the following:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们首先创建`ad-hoc`文件夹来运行我们的WildFly实例：一个主服务器和两个主机。在终端窗口中执行以下命令：
- en: '[PRE38]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We also better prepare our configuration folders to have the proper configuration
    files, using the preinstalled ones as templates and executing the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该准备配置文件夹，以便拥有适当的配置文件，使用预安装的文件作为模板并执行以下命令：
- en: '[PRE39]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now we can proceed towards creating the certificates.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续创建证书。
- en: How to do it…
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We will first create the keystores for each server; we will then extract the
    certificates out of them, and lastly, we will import the host's certificates into
    the domain controller keystore and the domain certificate into the host's keystores.
    It will become clear soon.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先为每个服务器创建密钥库；然后从中提取证书，最后将主机的证书导入到域控制器密钥库中，并将域证书导入到主机的密钥库中。很快就会变得清楚。
- en: 'Open a new terminal window and run the following:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并运行以下命令：
- en: '[PRE40]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now we need to export the certificate out of each keystore, and store it in
    a file. Within the same terminal of the previous `keytool` commands, execute the
    following commands:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将证书从每个密钥库中导出，并存储在文件中。在之前的`keytool`命令相同的终端中，执行以下命令：
- en: '[PRE41]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now if you look inside the `$WILDFLY_HOME` folder, you should see the following
    files:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果您查看`$WILDFLY_HOME`文件夹，您应该看到以下文件：
- en: '`sec-dmn-master.cer`'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sec-dmn-master.cer`'
- en: '`sec-dmn-master.jks`'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sec-dmn-master.jks`'
- en: '`sec-dmn-node-1.cer`'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sec-dmn-node-1.cer`'
- en: '`sec-dmn-node-1.jks`'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sec-dmn-node-1.jks`'
- en: '`sec-dmn-node-2.cer`'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sec-dmn-node-2.cer`'
- en: '`sec-dmn-node-2.jks`'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sec-dmn-node-2.jks`'
- en: 'Now we need to import the host''s certificates into the `domain` keystore,
    as follows:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将主机的证书导入到`domain`密钥库中，如下所示：
- en: '[PRE42]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Once done, let''s do the same for the other host:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们为其他主机做同样的操作：
- en: '[PRE43]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now it''s time for the hosts to import the `domain` certificate, as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是主机导入`domain`证书的时候了，如下所示：
- en: '[PRE44]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Once done, let''s do the same for the other host:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们为其他主机做同样的操作：
- en: '[PRE45]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Okay, we are done. Let''s copy each keystore to its `ad-hoc` configuration
    folder, as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了。让我们将每个密钥库复制到其`ad-hoc`配置文件夹中，如下所示：
- en: '[PRE46]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now we need to make some adjustments to the default domain configuration. Open
    the `sec-dmn-master/configuration/domain.xml` file and set the `default` profile
    to all `server-groups` declared in the file. Also set the `socket-binding-group`
    reference to `standard-sockets`, again to all the declared server-groups—we are
    doing this just to avoid complex configuration due to the `full` and `full-ha`
    profiles, which involve messaging and clustering.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要对默认域配置做一些调整。打开`sec-dmn-master/configuration/domain.xml`文件，并将`default`配置文件设置为文件中声明的所有`server-groups`。同时，将`socket-binding-group`引用设置为`standard-sockets`，再次为所有声明的服务器组——我们这样做只是为了避免由于`full`和`full-ha`配置文件导致的复杂配置，这些配置涉及消息传递和集群。
- en: 'Next, open `sec-dmn-node-1/configuration/host.xml` and change the host name
    as follows:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`sec-dmn-node-1/configuration/host.xml`并按照以下方式更改主机名：
- en: '[PRE47]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Also make sure to properly set the port-offset attribute for each configured
    server (default configuration provides two servers named `server-one` and `server-two`),
    as per the following example:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保为每个配置的服务器正确设置端口偏移量属性（默认配置提供了两个名为`server-one`和`server-two`的服务器），如下所示：
- en: '[PRE48]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s do the same for the other host. Open `sec-dmn-node-2/configuration/host.xml`
    and change the host name as follows:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们对另一个主机也做同样的操作。打开`sec-dmn-node-2/configuration/host.xml`并按照以下方式更改主机名：
- en: '[PRE49]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here too, make sure to properly set the port-offset attribute for each configured
    server, as follows:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，也要确保为每个配置的服务器正确设置端口偏移量属性，如下所示：
- en: '[PRE50]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We are not done yet. We need to configure our keystores, and we will use the
    CLI, so all our servers must be up and running.
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还没有完成。我们需要配置我们的密钥库，我们将使用CLI，因此所有服务器都必须启动并运行。
- en: 'Let''s start them up by executing each of the following commands in a separate
    terminal window:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在单独的终端窗口中执行以下每个命令来启动它们：
- en: '[PRE51]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'At this point, we need to declare our keystore into the WildFly configuration
    files. Again, in a separate terminal window, connect to the CLI as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要将我们的密钥库声明到WildFly配置文件中。再次，在另一个终端窗口中，按照以下方式连接到CLI：
- en: '[PRE52]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: For the moment, just don't mind about the errors; we need one more step.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，请不要在意错误；我们还需要再走一步。
- en: 'Stop the domain controller along with the host controllers and start them as
    follows:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止域控制器以及主机控制器，并按照以下方式启动它们：
- en: '[PRE53]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Now the domain controller is communicating with the host controllers using HTTPS.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，域控制器正在使用HTTPS与主机控制器通信。
- en: How it works…
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's try to explain in words what we needed and we what have done so far.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用言语来解释我们需要做什么以及我们已经做了什么。
- en: We needed to encrypt the traffic between the domain controller and the host
    controllers. To achieve this, we need a certificate. Thus, because communication
    between the domain and host controllers requires authentication, we also needed
    to create a kind of trusted communication between them. All this mechanism can
    be achieved using Java keystores.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要加密域控制器和主机控制器之间的流量。为了实现这一点，我们需要一个证书。因此，由于域和主机控制器之间的通信需要认证，我们还需要在它们之间创建一种可信的通信方式。所有这些机制都可以使用Java密钥库实现。
- en: 'We first create the keystore for the domain and the host controllers:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为域和主机控制器创建密钥库：
- en: '[PRE54]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We then extract a certificate out of each keystore, and store it in a `cer`
    file:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后从每个密钥库中提取一个证书，并将其存储在一个`cer`文件中：
- en: '[PRE55]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As we need the domain controller to remotely connect to the host controllers
    and vice versa, we needed to create a link within the keystore, thus importing
    the host controllers'' certificates into the domain controller keystore:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要域控制器远程连接到主机控制器，反之亦然，因此我们需要在密钥库中创建一个链接，从而将主机控制器的证书导入域控制器密钥库：
- en: '[PRE56]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This way, the `sec-dmn-master.jks` keystore file would work as a truststore
    too, having the host controllers'' certificates in it. As a matter of fact, on
    checking the `sec-dmn-master.jks` keystore, we should find three entries in it:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`sec-dmn-master.jks`密钥库文件将同时作为信任库使用，其中包含主机控制器的证书。实际上，在检查`sec-dmn-master.jks`密钥库时，我们应该在其中找到三个条目：
- en: '[PRE57]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The same mechanism applies to the host controllers, having them only import
    the domain controller''s certificate:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的机制也适用于主机控制器，它们只需导入域控制器的证书：
- en: '[PRE58]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'For brevity, I will not show you the check list for those two keystores; by
    the way you can issue the commands as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁，我将不会展示这两个密钥库的检查清单；顺便说一句，你可以按照以下方式发出命令：
- en: '[PRE59]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: They should both contain two entries.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都应该包含两个条目。
- en: After all this preparation, we had to start all servers in order to update our
    configuration. This is because in the domain mode we can only see the running
    hosts, not the declared ones. We then ran the CLI and executed a bunch of commands
    in the batch mode.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些准备工作之后，我们必须启动所有服务器以更新我们的配置。这是因为在我们处于域模式时，我们只能看到正在运行的主机，而不是声明的主机。然后我们运行了
    CLI 并在批处理模式下执行了一系列命令。
- en: After the `run-batch` command, which essentially runs each command and commits,
    we run the `reload` command against the `host=master`, that is the domain controller.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `run-batch` 命令之后，该命令实际上运行了每个命令并提交，然后我们对 `host=master` 运行 `reload` 命令，即域控制器。
- en: 'When the domain controller starts, it pushes its configuration to all the connected
    host controllers, but in this case, our host controllers got disconnected because
    of the following errors showing up in the `server.log`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当域控制器启动时，它会将其配置推送到所有连接的主机控制器，但在这个情况下，我们的主机控制器由于以下错误出现在 `server.log` 中而断开连接：
- en: 'The following error is for `sec-dmn-master`:'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下错误是针对 `sec-dmn-master` 的：
- en: '[PRE60]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The following error is for `sec-dmn-node-1`:'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下错误是针对 `sec-dmn-node-1` 的：
- en: '[PRE61]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The following error is for `sec-dmn-node-2`:'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下错误是针对 `sec-dmn-node-2` 的：
- en: '[PRE62]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The domain controller enabled the SSL communication, and the host controllers
    are not passing their own certificate because the default JVM `cacert` truststore
    file is passed instead. That's why we had to stop everything.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 域控制器启用了 SSL 通信，而主机控制器没有传递它们自己的证书，因为默认的 JVM `cacert` 信任存储文件被传递。这就是我们为什么必须停止一切的原因。
- en: When restarting the domain and host controllers, we had to add the `-Djavax.net.ssl.trustStore`
    property (specifying the proper keystore for the starting controller) so that
    the SSL Handshake phase would succeed, because at this time each controller would
    have passed its relative keystore.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 当重启域和主机控制器时，我们必须添加 `-Djavax.net.ssl.trustStore` 属性（指定启动控制器的正确密钥库），以便 SSL 握手阶段能够成功，因为在这个时候，每个控制器都会通过其相对密钥库。
- en: 'Follow the commands to start the domain and host controllers:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下命令启动域和主机控制器：
- en: '[PRE63]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: See also…
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见……
- en: For a deeper understanding of the `keytool` command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html).
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要深入了解 `keytool` 命令，请参阅 Oracle 官方文档 [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)。
- en: For more details on the `SSL` protocol, start looking at [http://en.wikipedia.org/wiki/Transport_Layer_Security](http://en.wikipedia.org/wiki/Transport_Layer_Security).
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 `SSL` 协议的更多详细信息，请从 [http://en.wikipedia.org/wiki/Transport_Layer_Security](http://en.wikipedia.org/wiki/Transport_Layer_Security)
    开始查找。
