- en: MicroProfile Implementations, Quarkus, and Interoperability via the Conference
    Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MicroProfile实现、Quarkus以及通过会议应用程序实现互操作性
- en: One of the benefits of Eclipse MicroProfile is that it provides a specification
    that allows many implementations to be interoperable with each other. This benefit
    has encouraged many vendors and community groups to implement the Eclipse MicroProfile specification
    as open source implementations. There are currently eight implementations of Eclipse
    MicroProfile in the market, with a ninth entrant, Quarkus.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile的好处之一是它提供了一个规范，使得许多实现之间可以相互操作。这个好处激励了许多供应商和社区组织将Eclipse
    MicroProfile规范作为开源实现。目前市场上共有八个Eclipse MicroProfile实现，第九个实现者是Quarkus。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: A description of the eight implementations of Eclipse MicroProfile and how to
    find further information on each
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Eclipse MicroProfile的八个实现以及如何找到每个实现的进一步信息的描述
- en: How to generate Eclipse MicroProfile sample code for each of these implementations
    ...
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为这些实现中的每一个生成Eclipse MicroProfile示例代码...
- en: Current MicroProfile implementations
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前MicroProfile实现
- en: 'At the time of writing, there are eight implementations of Eclipse MicroProfile,
    all of which are open source. Here is a table of these implementations:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 截至编写本书时，共有八个Eclipse MicroProfile实现，所有这些都是开源的。以下是这些实现的表格：
- en: '| **Open source project basis** | **Project location** | **Supporting vendor**
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **开源项目基础** | **项目位置** | **支持供应商** |'
- en: '| Thorntail ([http://thorntail.io/](http://thorntail.io/)) | [https://github.com/thorntail/thorntail](https://github.com/thorntail/thorntail)
    | Red Hat |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| Thorntail ([http://thorntail.io/](http://thorntail.io/)) | [https://github.com/thorntail/thorntail](https://github.com/thorntail/thorntail)
    | Red Hat |'
- en: '| Open Liberty ([https://openliberty.io/](https://openliberty.io/)) | [https://github.com/openliberty](https://github.com/openliberty)
    | IBM |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| Open Liberty ([https://openliberty.io/](https://openliberty.io/)) | [https://github.com/openliberty](https://github.com/openliberty)
    | IBM |'
- en: '| Apache TomEE ([http://tomee.apache.org/](http://tomee.apache.org/)) | [https://github.com/apache/tomee](https://github.com/apache/tomee)
    | Tomitribe |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| Apache TomEE ([http://tomee.apache.org/](http://tomee.apache.org/)) | [https://github.com/apache/tomee](https://github.com/apache/tomee)
    | Tomitribe |'
- en: '| Payara Micro ([https://www.payara.fish/payara_micro](https://www.payara.fish/payara_micro))
    | [https://github.com/payara/Payara](https://github.com/payara/Payara) | Payara
    Services Ltd. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| Payara Micro ([https://www.payara.fish/payara_micro](https://www.payara.fish/payara_micro))
    | [https://github.com/payara/Payara](https://github.com/payara/Payara) | Payara
    Services Ltd. |'
- en: '| Hammock ([https://hammock-project.github.io/](https://hammock-project.github.io/))
    | [https://github.com/hammock-project](https://github.com/hammock-project) | Hammock
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| Hammock ([https://hammock-project.github.io/](https://hammock-project.github.io/))
    | [https://github.com/hammock-project](https://github.com/hammock-project) | Hammock
    |'
- en: '| KumuluzEE ([https://ee.kumuluz.com/](https://ee.kumuluz.com/)) | [https://github.com/kumuluz](https://github.com/kumuluz)
    | KumuluzEE |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| KumuluzEE ([https://ee.kumuluz.com/](https://ee.kumuluz.com/)) | [https://github.com/kumuluz](https://github.com/kumuluz)
    | KumuluzEE |'
- en: '| Launcher ([https://github.com/fujitsu/launcher](https://github.com/fujitsu/launcher))
    | [https://github.com/fujitsu/launcher](https://github.com/fujitsu/launcher) |
    Fujitsu |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 启动器 ([https://github.com/fujitsu/launcher](https://github.com/fujitsu/launcher))
    | [https://github.com/fujitsu/launcher](https://github.com/fujitsu/launcher) |
    Fujitsu |'
- en: '| Helidon ([https://helidon.io/#](https://helidon.io/#)) | [https://github.com/oracle/helidon](https://github.com/oracle/helidon)
    | Oracle |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| Helidon ([https://helidon.io/#](https://helidon.io/#)) | [https://github.com/oracle/helidon](https://github.com/oracle/helidon)
    | Oracle |'
- en: Some of these implementations are based on *application servers*, such as Payara
    and Open Liberty, while others are based on *application assemblers* that include
    only the functionality that the application needs, instead of requiring an application
    server to be up and running, and commonly generate an executable JAR. However,
    the implementations based on application servers are also capable of producing
    executable JAR as well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实现中有一些是基于*应用程序服务器*的，如Payara和Open Liberty，而其他则是基于*应用程序组装器*，只包括应用程序需要的功能，而不是要求运行一个应用程序服务器，并且通常生成可执行JAR。然而，基于应用程序服务器的实现也具备生成可执行JAR的能力。
- en: An application assembler can generate an *uberjar*, a self-contained runnable
    JAR file, or an *application jar* with its runtime dependencies located in a subdirectory,
    for example, an accompanying `lib` or `libs` subdirectory.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序组装器可以生成一个*uberjar*，一个自包含的可运行JAR文件，或者一个将其运行时依赖位于子目录中的*应用程序jar*，例如，伴随的`lib`或`libs`子目录。
- en: Eclipse MicroProfile implementations that pass the MicroProfile **Test Compatibility
    Kit** (**TCK**) for the entire umbrella release, or a specific version of a MicroProfile
    API are listed at [https://wiki.eclipse.org/MicroProfile/Implementation](https://wiki.eclipse.org/MicroProfile/Implementation).
    At the moment, inclusion in this list uses the honor system because it does not
    require proof of the TCK results; it just requires that the publishers assert
    that their implementation has passed the TCK.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 符合Eclipse MicroProfile标准的实现通过整个伞状发布版本的**测试兼容性套件**（**TCK**），或者特定版本的MicroProfile
    API的实现，列表可在[https://wiki.eclipse.org/MicroProfile/Implementation](https://wiki.eclipse.org/MicroProfile/Implementation)找到。目前，这个列表采用荣誉制度，因为它不需要证明TCK的结果；它只需要发布者声明他们的实现已经通过了TCK。
- en: The project also has a site where organizations/groups can self-include in the
    list of production deployments of MicroProfile. This list can be found at [https://wiki.eclipse.org/MicroProfile/Adoptions](https://wiki.eclipse.org/MicroProfile/Adoptions).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目还有一个网站，组织/团体可以自行加入MicroProfile生产部署列表。这个列表可以在[https://wiki.eclipse.org/MicroProfile/Adoptions](https://wiki.eclipse.org/MicroProfile/Adoptions)找到。
- en: In the next sections, we provide brief descriptions of these implementations
    and how to get more information on each of them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们提供了这些实现简要介绍以及如何获取关于它们的更多信息。
- en: Thorntail
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Thorntail
- en: 'Red Hat are the sponsors of the open source Thorntail project, which implements
    the Eclipse MicroProfile specification. Thorntail is an application assembler
    that packages just the server runtime components required by your application
    and creates a runnable JAR (that is, an uberjar), which you can execute by invoking the
    following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 红帽公司是开源Thorntail项目的赞助商，该项目实现了Eclipse MicroProfile规范。Thorntail是一个应用程序组装器，它只包含您的应用程序所需的服务器运行时组件，并创建一个可执行的JAR（即uberjar），您可以通过调用以下命令来执行：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Not only is Thorntail MicroProfile-compatible, but it can also include functionality
    beyond MicroProfile in your application. It has the concept of a fraction, which
    is a specific library that contains functionality you want to include in your
    application. A fraction is included in the Maven POM file of your application
    as a dependency. Beyond the MicroProfile ...
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅Thorntail符合MicroProfile，它还可以在您的应用程序中包含超出MicroProfile的功能。它有一个分数的概念，这是一个包含您想要包含在应用程序中的功能的特定库。分数作为您应用程序的Maven
    POM文件的一个依赖项。超出MicroProfile ...
- en: Open Liberty
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Open Liberty
- en: 'IBM are the sponsors of the open source Open Liberty project, which implements
    the Eclipse MicroProfile specification. Open Liberty is the upstream open source
    project for the IBM WebSphere Liberty application server. Open Liberty is an application
    server capable of generating an uberjar, which contains your application with
    an embedded Open Liberty server inside of it. To run the uberjar, you need to
    enter the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: IBM是开源Open Liberty项目的赞助商，该项目实现了Eclipse MicroProfile规范。Open Liberty是IBM WebSphere
    Liberty应用服务器的上游开源项目。Open Liberty是一个能够生成uberjar的应用服务器，其中包含您的应用程序以及内嵌的Open Liberty服务器。要运行uberjar，您需要输入以下命令：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command will explode the JAR file into your username's temporary directory,
    and then it will execute the application from there.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将把JAR文件解压到您的用户名临时目录中，然后从那里执行应用程序。
- en: Ensure there are no spaces in the path to the JAR file, otherwise the start
    up process will fail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确保JAR文件路径中没有空格，否则启动过程将失败。
- en: The generated uberjar can contain only a subset of application server functionality
    as defined by the features included in the `server.xml` file. To build an uberjar
    with this minimal set of features, you need to use the `minify-runnable-package`
    profile when running Maven.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的uberjar只能包含`server.xml`文件中包含的功能的子集。要使用这些最小功能集构建uberjar，您需要在运行Maven时使用`minify-runnable-package`配置文件。
- en: The Open Liberty documentation is very thorough and replete with guides and
    reference documents.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Open Liberty文档非常全面，充满了指南和参考文献。
- en: You can find the Open Liberty documentation at [https://openliberty.io/docs/](https://openliberty.io/docs/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://openliberty.io/docs/](https://openliberty.io/docs/)找到Open Liberty文档。
- en: In their documentation, they have a section dedicated to MicroProfile guides,
    which provide well-documented tutorials.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的文档中，他们有一个专门介绍MicroProfile指南的部分，提供了文档齐全的教程。
- en: Apache TomEE
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache TomEE
- en: 'Tomitribe are the sponsors of the open source TomEE project, which implements
    the Eclipse MicroProfile specification. Apache TomEE is assembled from Apache
    Tomcat with added Java EE features. TomEE is Java EE 6 Web Profile-certified.
    As its GitHub describes it, *Apache TomEE is a lightweight, yet powerful, JavaEE
    Application server with feature-rich tooling*. There are a few different versions
    of TomEE that you can download; for example, TomEE, TomEE+, and TomEE WebApp,
    but the one we are interested in is TomEE MicroProfile. For MicroProfile, TomEE
    generates an uberjar for your microservice, which you can run as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 托米部落（Tomitribe）是开源TomEE项目的赞助商，该项目实现了Eclipse MicroProfile规范。Apache TomEE是由Apache
    Tomcat组装而成，增加了Java EE特性。TomEE是Java EE 6 Web Profile认证的。正如其GitHub所描述的，*Apache TomEE是一个轻量级但功能强大的Java
    EE应用服务器，拥有丰富的功能工具*。您可以下载几个不同版本的TomEE，例如TomEE、TomEE+、TomEE WebApp，但我们感兴趣的是TomEE
    MicroProfile。对于MicroProfile，TomEE为您生成了一个uberjar，您可以像以下这样运行：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although the TomEE MicroProfile documentation is scarce, a set of thorough ...
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TomEE MicroProfile文档不多，但有一套详尽的...
- en: Payara Micro
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帕雅拉（Payara）
- en: Payara are the sponsors of the open source Payara Micro project, which implements
    the Eclipse MicroProfile specification. Payara Server is based on the open source
    application server, GlassFish. Payara Micro is based on Payara Server, albeit
    a slimmed-down version of it. As their website describes, *Payara Micro is the
    microservices-ready version of Payara Server*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 帕雅拉（Payara）是开源Payara Micro项目的赞助商，该项目实现了Eclipse MicroProfile规范。Payara服务器基于开源应用服务器GlassFish。Payara
    Micro是基于Payara Server的一个精简版本。正如他们的网站所描述的，*Payara Micro是Payara Server的适用于微服务的版本*。
- en: 'The way Payara Micro works is that a Payara Micro instance starts and then
    your MicroProfile microservice is deployed to it as a WAR file. For example, to
    start a Payara Micro instance, you would enter the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Payara Micro的工作方式是Payara Micro实例启动，然后将MicroProfile微服务作为WAR文件部署到其中。例如，要启动一个Payara
    Micro实例，您将输入以下命令：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To start a Payara Micro instance and deploy your application to it, you would
    enter the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Payara Micro实例并将您的应用程序部署到其中，您将输入以下命令：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Payara Micro supports Java EE application deployments and it is also compatible
    with Eclipse MicroProfile.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Payara Micro支持Java EE应用程序部署，并且与Eclipse MicroProfile兼容。
- en: For the Payara Micro documentation, please refer to [https://docs.payara.fish/documentation/payara-micro/payara-micro.html](https://docs.payara.fish/documentation/payara-micro/payara-micro.html).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Payara Micro文档，请参考[https://docs.payara.fish/documentation/payara-micro/payara-micro.html](https://docs.payara.fish/documentation/payara-micro/payara-micro.html)。
- en: Lastly, Payara Micro supports automatic clustering by using a third-party in-memory
    data grid product.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Payara Micro通过使用第三方内存内数据网格产品支持自动集群。
- en: Hammock
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 吊床
- en: 'John Ament is the sponsor of the open source Hammock project, which implements
    the Eclipse MicroProfile specification. Similar to Thorntail, Hammock is an application
    assembler that generates uberjars. To run the uberjar, you need to enter the following
    command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·阿门特（John Ament）是开源Hammock项目的赞助商，该项目实现了Eclipse MicroProfile规范。与Thorntail相似，Hammock是一个应用程序组装器，生成uberjars。要运行uberjar，您需要输入以下命令：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hammock is an opinionated microservices framework for building applications. It
    is a CDI-based framework, meaning that it is on a CDI container with CDI-based
    beans that run in it. It supports two CDI implementations (JBoss Weld and Apache
    OpenWebBeans), three JAX-RS implementations (Apache CXF, Jersey, and JBoss RestEasy),
    and three different servlet containers (Apache Tomcat, JBoss Undertow, and Eclipse
    Jetty). Besides these, Hammock also ...
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 吊床是一个有观点的微服务框架，用于构建应用程序。它是一个基于CDI的框架，意味着它是基于CDI容器的，CDI基于的bean在其中运行。它支持两种CDI实现（JBoss
    Weld和Apache OpenWebBeans），三种JAX-RS实现（Apache CXF、Jersey和JBoss RestEasy），以及三种不同的servlet容器（Apache
    Tomcat、JBoss Undertow和Eclipse Jetty）。除此之外，Hammock还...
- en: KumuluzEE
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库穆鲁兹（KumuluzEE）
- en: 'Sunesis are the sponsors of the open source KumuluzEE project, which implements
    the Eclipse MicroProfile specification. KumuluzEE defines itself as a lightweight
    microservices framework using Java and Java EE technologies and as Eclipse MicroProfile-compliant
    implementation. KumuluzEE allows you to bootstrap a Java EE application using
    just the components that you need, and it also supports the packing and running
    microservices as uberjars. Just like other implementations that support uberjars,
    you can run your microservices by entering the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Sunesis 是开源 KumuluzEE 项目的赞助商，该项目实现了 Eclipse MicroProfile 规范。KumuluzEE 定义了自己作为一个使用
    Java 和 Java EE 技术的轻量级微服务框架，并且是 Eclipse MicroProfile 兼容的实现。KumuluzEE 允许你使用仅需要的组件来引导一个
    Java EE 应用程序，并且还支持将微服务打包和作为 uberjars 运行。与其他支持 uberjars 的实现一样，你可以通过输入以下命令来运行你的微服务：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: KumuluzEE also provides a POM generator that can create a `pom.xml` with the
    selected options and features you would like to include for the microservice you
    plan to develop. The POM generator provides a clear and organized list of profiles,
    components, and projects supported by KumuluzEE that you can select to include
    in the `pom.xml` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: KumuluzEE 还提供了一个 POM 生成器，它可以创建一个带有所选选项和功能的 `pom.xml`，用于你计划开发的微服务。POM 生成器提供了由
    KumuluzEE 支持的可选的清晰和组织的列表，包括在 `pom.xml` 文件中。
- en: KumuluzEE provides a handful of samples for the different MicroProfile APIs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: KumuluzEE 为不同的 MicroProfile API 提供了一些示例。
- en: For documentation related to the KumuluzEE implementation of Eclipse MicroProfile,
    refer to [https://ee.kumuluz.com/microprofile](https://ee.kumuluz.com/microprofile).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 KumuluzEE 实现 Eclipse MicroProfile 的文档，请参考 [https://ee.kumuluz.com/microprofile](https://ee.kumuluz.com/microprofile)。
- en: Lastly, KumuluzEE provides some interesting tutorials at [https://ee.kumuluz.com/tutorials/](https://ee.kumuluz.com/tutorials/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，KumuluzEE 提供了一些有趣的教程在 [https://ee.kumuluz.com/tutorials/](https://ee.kumuluz.com/tutorials/)。
- en: Launcher
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动器
- en: 'Fujitsu are the sponsors of the open source Launcher project, which implements
    the Eclipse MicroProfile specification. Launcher leverages an embedded GlassFish
    Server and Apache Geronimo MicroProfile API implementations. You can run your
    microservice as a WAR file, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Fujitsu 是开源 Launcher 项目的赞助商，该项目实现了 Eclipse MicroProfile 规范。Launcher 利用了内嵌的 GlassFish
    服务器和 Apache Geronimo MicroProfile API 实现。你可以将你的微服务作为 WAR 文件运行，如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition, Launcher can create uberjars. To create and run your microservice
    as an uberjar, first generate the uberjar and then invoke it using `java -jar`,
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Launcher 可以创建 uberjars。要创建并运行你的微服务作为 uberjar，首先生成 uberjar，然后使用 `java -jar`
    调用它，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The documentation for Launcher is very scarce and limited. You can find usage
    information about Launcher at [https://github.com/fujitsu/launcher/blob/master/doc/Usage.adoc
    ...](https://github.com/fujitsu/launcher/blob/master/doc/Usage.adoc)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Launcher 的文档非常稀少且有限。你可以找到有关 Launcher 的使用信息在 [https://github.com/fujitsu/launcher/blob/master/doc/Usage.adoc
    ...](https://github.com/fujitsu/launcher/blob/master/doc/Usage.adoc)。
- en: Helidon
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helidon
- en: 'Oracle Corporation are the sponsors of the open source Helidon project, which
    implements the Eclipse MicroProfile specification. Helidon is a set of Java libraries
    that enable a developer to write microservices. It leverages Netty, a non-blocking
    I/O client server framework. Helidon is an application assembler in that it generates
    application JAR. Once you have built the application JAR, you can execute it with
    the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Corporation 是开源 Helidon 项目的赞助商，该项目实现了 Eclipse MicroProfile 规范。Helidon
    是一组 Java 库，可让开发者编写微服务。它利用了 Netty，一个非阻塞的 I/O 客户端服务器框架。Helidon 是一个应用程序组装器，因为它可以生成应用程序
    JAR。一旦你构建了应用程序 JAR，你可以使用以下命令执行它：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Helidon comes in two flavors: SE and MP. Helidon SE is the functional programming
    style provided by all Helidon libraries and it provides a microservices framework
    called MicroFramework. Helidon MP implements the MicroProfile specification for
    microservices, and it''s built on top of Helidon libraries. There is no sample
    project generator tool, but Helidon provides a rich and thorough set of documentation
    manuals.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Helidon 有两种版本：SE 和 MP。Helidon SE 是由所有 Helidon 库提供的功能编程风格，它提供了一个名为 MicroFramework
    的微服务框架。Helidon MP 实现了微服务的 MicroProfile 规范，并建立在 Helidon 库之上。没有样本项目生成工具，但 Helidon
    提供了一组丰富且详尽的文档手册。
- en: The documentation for Helidon can be found at [https://helidon.io/docs/latest/#/about/01_overview](https://helidon.io/docs/latest/#/about/01_overview).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Helidon 的文档可以在 [https://helidon.io/docs/latest/#/about/01_overview](https://helidon.io/docs/latest/#/about/01_overview)
    找到。
- en: Helidon SE provides a WebServer, which is an asynchronous and reactive API for
    creating web applications. Helidon MP provides a MicroProfile server implementation
    that encapsulates the Helidon WebServer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Helidon SE提供了一个WebServer，这是一个用于创建Web应用程序的异步和反应式API。Helidon MP提供了一个封装Helidon
    WebServer的MicroProfile服务器实现。
- en: Generating sample code for the current implementations
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为当前实现生成示例代码
- en: As described in the previous sections, most MicroProfile implementations do
    not provide their own sample project generators. Instead, they just provide documentation.
    This is where the MicroProfile Starter comes to the rescue!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，大多数MicroProfile实现并没有提供自己的示例项目生成器。相反，它们只提供文档。这时MicroProfile Starter就派上用场了！
- en: The MicroProfile Starter is sponsored by the MicroProfile community and is a
    tool that generates sample project and source code for the MicroProfile specifications
    for all of the MicroProfile implementations that have passed the MicroProfile
    TCK. In [Chapter 2](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml), *Governance and
    Contributions*, we gave you a tour of the MicroProfile Starter. To avoid being
    repetitive, we just want to point out that you can select the MicroProfile version
    in the drop-down menu as follows:  ...
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Starter由MicroProfile社区赞助，是一个为所有通过MicroProfile TCK的MicroProfile规范生成示例项目和源代码的工具。在第二章*治理和贡献*中，我们为您提供了MicroProfile
    Starter的概览。为了避免重复，我们只想指出您可以在下拉菜单中选择MicroProfile版本如下：...
- en: Other projects that implement MicroProfile
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他实现MicroProfile的项目
- en: SmallRye is an open source project that develops implementations of Eclipse
    MicroProfile usable by any vendor or project. It's a community effort and everyone
    is welcome to participate and contribute to SmallRye, [https://smallrye.io](https://smallrye.io).
    As an example of this, the community recently contributed the Extensions for MicroProfile
    project into SmallRye, hence enriching its functionality with extensions for Config
    Sources, OpenAPI, Health, JAX-RS, and REST Client.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 小型Rye是一个开源项目，它开发了任何供应商或项目都可以使用的Eclipse MicroProfile实现。这是一个社区努力，每个人都可以参与和贡献给小型Rye,[https://smallrye.io](https://smallrye.io)。作为一个例子，社区最近将微服务扩展项目贡献给了小型Rye，从而使其通过配置源、OpenAPI、健康、JAX-RS和REST客户端扩展丰富了其功能。
- en: The Extensions for MicroProfile project website is [https://www.microprofile-ext.org](https://www.microprofile-ext.org),
    and its GitHub is [https://github.com/microprofile-extensions](https://github.com/microprofile-extensions).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务扩展项目网站是[https://www.microprofile-ext.org](https://www.microprofile-ext.org)，其GitHub是[https://github.com/microprofile-extensions](https://github.com/microprofile-extensions)。
- en: SmallRye implementations are tested against, and have passed, the Eclipse MicroProfile
    TCKs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 小型Rye实现已经通过了Eclipse MicroProfile TCKs的测试。
- en: Open source projects that consume SmallRye are Thorntail ([https://thorntail.io](https://thorntail.io)),
    WildFly ([https://wildfly.org](https://wildfly.org)), and Quarkus ([https://quarkus.io](https://quarkus.io)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 消费小型Rye的开源项目有Thorntail([https://thorntail.io](https://thorntail.io))、WildFly([https://wildfly.org](https://wildfly.org))和Quarkus([https://quarkus.io](https://quarkus.io))。
- en: Quarkus
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quarkus
- en: The open source Quarkus project made its debut in 2019\. Quarkus is a Kubernetes-native
    Java stack with that can compile to native machine language or building to HotSpot
    (OpenJDK). When using Quarkus, your application consumes very little memory, has
    great performance that allows it to handle a high throughput of invocations, and
    has a very fast start up time (that is, boot plus first response time), making
    Quarkus a great runtime for containers, as well as cloud-native and serverless
    deployments. Quarkus also provides an extension framework that allows the *quarking* of
    libraries and projects to make them work seamlessly with Quarkus.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的Quarkus项目于2019年首次亮相。Quarkus是一个可以编译成原生机器语言或构建到HotSpot（OpenJDK）的Kubernetes本地Java栈。使用Quarkus时，您的应用程序消耗非常少的内存，具有出色的性能，可以处理高调用吞吐量，并且启动时间非常快（即引导加上首次响应时间），使Quarkus成为容器、云本地和无服务器部署的绝佳运行时。Quarkus还提供了一个扩展框架，允许将库和项目*quarking*（注：此处应为“转化为Quarkus兼容的形式”），使它们与Quarkus无缝协作。
- en: Quarkus's mission is to transform your full application and the libraries it
    uses into an optimal ...
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus的使命是将您的整个应用程序及其使用的库转换为最优...
- en: How to quark a generated MicroProfile project
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将生成的MicroProfile项目*quarking*
- en: 'Before we start with the steps on how to *quark* a generated MicroProfile project
    by the MicroProfile Starter, we need to first make sure to have GRAALVM_HOME installed,
    defined, and configured in your environment. To this end, follow these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讲解如何使用MicroProfile Starter*quark*生成MicroProfile项目的步骤之前，我们首先需要确保已经在您的环境中安装、定义和配置了GRAALVM_HOME。为此，请按照以下步骤操作：
- en: Go to `https://github.com/oracle/graal/releases` and download the latest release
    of GraalVM for your operating system.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://github.com/oracle/graal/releases`，并根据您的操作系统下载GraalVM的最新版本。
- en: 'Unzip the downloaded file into a sub-directory of your choosing. By the way,
    the unzipping will create a sub-directory for GraalVM, `/Users/[YOUR HOME DIRECTORY]/graalvm-ce-1.0.0-rc13`,
    for example:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的文件解压缩到您选择的子目录中。顺便说一下，解压缩将创建一个GraalVM子目录，例如：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open a terminal window and create an environment variable called `GRAALVM_HOME`,
    for example:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，创建一个名为`GRAALVM_HOME`的环境变量，例如：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have installed GraalVM, we can move on to the steps on how to *quark* a
    generated MicroProfile project with MicroProfile Starter:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经安装了GraalVM，我们可以继续讲解如何使用MicroProfile Starter*quark*生成MicroProfile项目的步骤：
- en: First, point your browser to [https://start.microprofile.io](https://start.microprofile.io)
    and select Thorntail as the MicroProfile Server.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将您的浏览器指向[https://start.microprofile.io](https://start.microprofile.io)并选择Thorntail作为MicroProfile服务器。
- en: You can leverage the following steps to *quark* any existing Java application
    as well.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以利用以下步骤将任何现有的Java应用程序*quark*化。
- en: If you don't recall how to do this, go to [Chapter 2](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml),
    *Governance and Contributions*, and follow the instructions in the *Quick tour
    of the MicroProfile Starter* section up to step 5, where the `demo.zip` file is
    downloaded to your local `Downloads` directory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不记得如何进行此操作，请转到[第2章](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml)，*治理和贡献*，并遵循*MicroProfile
    Starter快速入门*部分中的说明，直到第5步，其中`demo.zip`文件下载到您的本地`Downloads`目录。
- en: 'Expand the `demo.zip` file that the MicroProfile Starter generated under your
    `Downloads` local directory using your favorite unzipping tool. If your `demo.zip`
    file didn''t get automatically expanded, here are the commands to do it (assuming
    Linux; for Windows, please use the equivalent commands):'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的解压缩工具展开`demo.zip`文件。如果您没有自动展开`demo.zip`文件，请使用以下命令（假设是Linux；对于Windows，请使用等效命令）：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will create a `demo` sub-directory with an entire directory tree structure
    under it with all the source files needed to build and run the Thorntail sample
    MicroProfile project using Maven.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`demo`的子目录，在其下有一个完整的目录树结构，包含所有使用Maven构建和运行Thorntail示例MicroProfile项目的源文件。
- en: 'Instead of making changes in the `demo` sub-directory, let''s create a second
    directory called `Qproj4MP` alongside the `demo` sub-directory, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与其在`demo`子目录中进行更改，不如让我们创建一个名为`Qproj4MP`的第二个目录，与`demo`子目录并列，如下所示：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This should create a sub-directory called `Qproj4MP` at the same level as your
    existing `demo` sub-directory in your `Downloads` directory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您`Downloads`目录中现有`demo`子目录的同级创建一个名为`Qproj4MP`的子目录。
- en: 'Change your directory to `Qproj4MP` and create an empty Quarkus project by
    entering the following commands:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的目录更改到`Qproj4MP`，并通过输入以下命令创建一个空的Quarkus项目：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Within the `Qproj4MP` directory, delete the `src` sub-directory and replace
    it with the `src` sub-directory from the Thorntail sample MicroProfile project
    by entering the following commands:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Qproj4MP`目录中，删除`src`子目录并用以下命令替换为Thorntail示例MicroProfile项目的`src`子目录：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Quarkus and Thorntail differ in their expectations of where some configuration
    and web app-related files need to be. So, in order to make Quarkus happy, let''s
    copy some files around by entering the following commands:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Quarkus和Thorntail对某些配置和web应用程序相关文件的位置有不同的期望。因此，为了使Quarkus满意，让我们通过输入以下命令来复制一些文件：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We could have moved these files from their original locations, but we chose
    to just copy them for this example.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以将这些文件从它们原来的位置移动，但我们选择在这个示例中只是复制它们。
- en: The Thorntail sample MicroProfile project that was generated by MicroProfile
    Starter and whose `src` sub-directory contents you copied to `Qproj4MP` uses a
    security library called `bouncycastle`. The reason for this is that the generated
    code includes an example for the MicroProfile JWT Propagation specification, which
    allows you propagate security across microservices. Because of this, we also need
    to add two more dependencies to the Quarkus project POM file, one for `bouncycastle`
    and one for `nimbusds`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MicroProfile Starter生成的Thorntail示例MicroProfile项目，其`src`子目录的内容你已经复制到了`Qproj4MP`，使用了一个名为`bouncycastle`的安全库。这是因为生成的代码包含了一个MicroProfile
    JWT Propagation规范的示例，该规范允许你在微服务之间传播安全性。因此，我们还需要在Quarkus项目的POM文件中再添加两个依赖，一个是`bouncycastle`，另一个是`nimbusds`。
- en: The `bouncycastle` dependency will be removed from the Thorntail server code
    generation in the next sprint release of MicroProfile Starter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个sprint版本的MicroProfile Starter将不再包含Thorntail服务器代码生成中的`bouncycastle`依赖。
- en: 'To add these dependencies, edit the `pom.xml` file under your `$HOME/Downloads/Qproj4MP`
    directory and, in the section for `<dependencies>`, enter the following code block:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加这些依赖项，请编辑你`$HOME/Downloads/Qproj4MP`目录下的`pom.xml`文件，并在`<dependencies>`部分输入以下代码块：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are now ready to compile the quarked MicroProfile project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备编译quarked的MicroProfile项目。
- en: 'In addition to supporting building a Java project to run on OpenJDK, Quarkus
    supports compiling a Java project all the way down to machine code. Enter the
    following command to compile the quarked sample project to native code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了支持构建可以在OpenJDK上运行的Java项目外，Quarkus还支持将Java项目编译到底层机器码。输入以下命令来编译quarked示例项目到原生代码：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To run the application, enter the following command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行应用程序，请输入以下命令：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To test the application, please follow the instructions listed in [Chapter 2](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml),
    *Governance and Contributions*, in the *Quick tour of MicroProfile Starter* section, starting
    at step 10.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，请遵循*Quick tour of MicroProfile Starter*章节中*治理和贡献*部分的说明，从第10步开始。
- en: 'If you''d like to run the quarked project in development mode, first stop the
    running process and then enter the following commands:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要在开发模式下运行quarked项目，首先停止正在运行的进程，然后输入以下命令：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At this point, you can open up the project with an IDE of your choice, such
    as Visual Studio Code or Eclipse IDE, and start making changes to the source code.
    Quarkus supports hot reloads, meaning that, as soon as you make any changes to
    the source code, Quarkus rebuilds and redeploys your application in the background
    so that you can immediately see and test the effect of the changes. In addition,
    if you make a syntactical mistake in your source code, Quarkus will propagate
    meaningful error messages to the web app to help you fix your errors, making you
    more productive.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，你可以选择一个IDE，比如Visual Studio Code或Eclipse IDE，来打开项目，并开始修改源代码。Quarkus支持热重载，这意味着，只要你对源代码做了任何更改，Quarkus会在后台重新构建并重新部署你的应用程序，这样你就可以立即看到并测试更改的效果。此外，如果你在源代码中犯了语法错误，Quarkus会将有意义的错误信息传播到网页应用程序中，帮助你修复错误，提高你的工作效率。
- en: 'If you''d like to generate an executable application JAR, enter the following
    commands:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要生成一个可执行的应用程序JAR，请输入以下命令：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To run the executable application JAR, enter the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行可执行的应用程序JAR，请输入以下命令：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A lib directory is created alongside the application JAR with the library files
    it needs to run.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个与应用程序JAR并列的lib目录，其中包含运行所需的所有库文件。
- en: We have shown you the steps to *quark* a MicroProfile project generated by MicroProfile
    Starter. Although these steps apply to a specific generated project, you could
    use the same instructions to *quark* an existing Java application or microservice
    so that you can take advantage of the benefits that Quarkus provides, such as
    low memory consumption, fast start up time, and native compilation of your Java
    code so that you can run it efficiently in containers, the cloud, and Function-as-a-Service
    environments. No matter which implementation of MicroProfile you are using, a
    big benefit that MicroProfile provides to end users is interoperability. This
    means that you can design an application with microservices that use different
    implementations of MicroProfile, which is the topic of the following section.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向您展示了使用MicroProfile Starter生成的MicroProfile项目的*quark*步骤。尽管这些步骤适用于特定的生成项目，但您可以使用相同的说明来*quark*一个现有的Java应用程序或微服务，以便您可以利用Quarkus提供的好处，如低内存消耗、快速的启动时间以及对Java代码的原生编译，以便您可以在容器、云和函数即服务环境中高效运行。无论您使用MicroProfile的哪个实现，MicroProfile为最终用户提供的很大好处就是互操作性。这意味着您可以设计一个使用不同MicroProfile实现的微服务应用程序，这是下一节的主题。
- en: MicroProfile interoperability – the conference application
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MicroProfile互操作性——会议应用程序
- en: The **Conference Application**, first presented ([https://www.youtube.com/watch?v=iG-XvoIfKtg](https://www.youtube.com/watch?v=iG-XvoIfKtg))
    during Devoxx Belgium in November 2016, is a MicroProfile demo that showcases
    the integration and interoperability of different MicroProfile vendor implementations.
    This is important because it demonstrates the separation between implementation
    and interfaces of the specification, which provides a platform that allows vendors
    to develop and provide their own implementation that could coexist side by side
    with other competing implementations. The common interfaces across all implementations
    also provided end users with the benefit of flexibility and choice to use whichever
    MicroProfile implementation(s) ...
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**会议应用程序**，首次介绍（[https://www.youtube.com/watch?v=iG-XvoIfKtg](https://www.youtube.com/watch?v=iG-XvoIfKtg)）于2016年11月在比利时Devoxx上，是一个展示不同MicroProfile供应商实现集成和互操作性的MicroProfile演示。这很重要，因为它展示了规范的实现和接口之间的分离，提供了一个允许供应商开发并提供自己的实现的平台，这些实现可以与其他竞争性实现共存。所有实现中的通用接口还为最终用户提供了使用任何MicroProfile实现...的好处。'
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about the open source MicroProfile implementations
    that currently exist on the market, what types of implementation they are, how
    to get more information about each of them, and how to generate sample code for
    these implementations using MicroProfile Starter. We have also covered the latest
    MicroProfile implementation entrant, Quarkus, which introduces significant improvements
    to Java in start up time and memory consumption in interpreted and compiled modes,
    improving MicroProfile for cloud-native microservices and serverless environments
    even more. You also learned about The Conference Application, which demonstrates
    the interoperability of MicroProfile across different implementations.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了市场上现有的开源MicroProfile实现，它们是什么类型的实现，如何获取关于它们的更多信息，以及如何使用MicroProfile
    Starter为这些实现生成示例代码。我们还介绍了最新的MicroProfile实现参与者Quarkus，它显著提高了Java在解释和编译模式下的启动时间和内存消耗，进一步优化了适用于云原生微服务和无服务器环境的MicroProfile。您还了解了The
    Conference Application，它展示了MicroProfile在不同实现之间的互操作性。
- en: As a consumer of Eclipse MicroProfile and its nature of being interoperable
    across implementations, you have the freedom to select the implementation that
    makes the most sense to your organization or is the best fit for your environment,
    ultimately giving you the option to choose the right tool for the right task.
    Moreover, you don't need to be stuck with a single vendor for a commercially supported
    version of Eclipse MicroProfile, and, as a result of this, you have the advantage
    to negotiate on your terms and select from a rich set of MicroProfile features
    offered by different vendors.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Eclipse MicroProfile的消费者，其跨实现互操作的特性，您有自由选择对您的组织最有意义或最适合您环境的实现，最终给您提供选择正确工具的正确任务的选项。此外，您不必局限于单一供应商的商业支持版Eclipse
    MicroProfile，因此，您可以根据自己的条件进行谈判，并从不同供应商提供的丰富的MicroProfile特性中进行选择。
- en: In the next chapter, we will cover a full code sample for the entire set of
    MicroProfile APIs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将涵盖整个MicroProfile API集的全代码示例。
- en: Questions
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: At present, how many implementations of MicroProfile exist in the market? List
    them.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前市场上存在多少种MicroProfile实现？请列出它们。
- en: What is the difference between an application server and an application assembler?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用服务器与应用组装器之间有什么区别？
- en: Describe each of the eight implementations of MicroProfile that exist in the
    market.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述市场上存在的八种MicroProfile实现。
- en: What is Quarkus?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Quarkus？
- en: What is compile-time boot?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译时启动是什么？
- en: What types of deployment is Quarkus a great runtime for?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Quarkus适用于哪种类型的部署？
- en: What is the Quarkus extension framework?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Quarkus扩展框架？
- en: What is the key benefit that The Conference Application demonstrates?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会议应用程序展示了什么关键优势？
