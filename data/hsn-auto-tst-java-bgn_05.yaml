- en: Everything You Need to Know About Interfaces and Inheritance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于接口和继承你需要知道的一切
- en: In this chapter, we will go through some important concepts, such as interfaces,
    how they work, and their usage in Java. We will discuss inheritance using a practical
    example. This chapter will also look at the concepts of function overloading and
    function overriding and the differences between them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些重要概念，例如接口、它们的工作原理以及在Java中的用法。我们将通过一个实际例子来讨论继承。本章还将探讨函数重载和函数重写的概念以及它们之间的区别。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍以下内容：
- en: Interfaces
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: Introduction to inheritance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承简介
- en: Function overloading
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数重载
- en: Function overriding
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数重写
- en: Interfaces
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口
- en: The interface is one of the core concepts used in Java OOPS, so it's necessary
    for us to familiarize ourselves with interfaces and their use.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接口是Java面向对象编程中使用的核心概念之一，因此我们有必要熟悉接口及其用法。
- en: 'Interfaces are similar to classes. The only difference between an interface
    and a class is that an interface will have methods but not a body. Confused? In
    a class, we generally define a method and then start writing code into it. For
    example, in a class, if we want to write any code, we just start off by declaring
    the class using `public void` and proceed with the rest of the code in that class,
    as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接口与类相似。接口与类之间的唯一区别是接口将包含方法但没有方法体。困惑了吗？在一个类中，我们通常定义一个方法然后开始向其中编写代码。例如，在一个类中，如果我们想编写任何代码，我们只需通过使用`public
    void`声明该类，然后在该类中继续编写其余的代码，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In interfaces, we can only define the signature of the method; we cannot write
    any code inside the method. But why? What is the use of writing a method signature
    inside an interface? What is the use of this object-oriented concept in Java?
    You might have these questions in your mind, so let's try to understand the concept
    of the interface with a real-life scenario.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在接口中，我们只能定义方法的签名；我们无法在方法内部编写任何代码。但为什么？在接口内部编写方法签名有什么用？这个面向对象的概念在Java中有什么用？你可能会有这些疑问，所以让我们尝试通过一个现实生活中的场景来理解接口的概念。
- en: Using interfaces with a traffic light system
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用接口的交通信号灯系统
- en: Consider the typical traffic light system, which is used everywhere around the
    world to maintain traffic regulations. Every country has its own traffic rules,
    such as driving on the left or right side of the road. Even though traffic rules
    differ from country to country, there are certain rules that apply globally and
    need to be followed by every country. One such rule is the use of traffic lights
    to govern the traffic flow, where a red light is an indication to stop, an amber/yellow
    light to ready your engine, and a green light to move your vehicle. Let's say
    that these global rules are imposed by a central traffic authority, and we want
    to implement, for example, the Australian traffic system. This system will have
    its own rules, but we need to make sure that it follows the global rules imposed
    by the central traffic authority.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑典型的交通信号灯系统，它被全世界用来维护交通规则。每个国家都有自己的交通规则，例如在道路的左侧或右侧驾驶。尽管各国交通规则不同，但有一些规则是全球通用的，并且每个国家都需要遵守。其中一条规则是使用交通信号灯来控制交通流量，红灯表示停车，琥珀/黄色灯表示准备引擎，绿灯表示移动车辆。假设这些全球规则是由一个中央交通当局制定的，我们想要实现，例如，澳大利亚的交通系统。这个系统将有自己的规则，但我们需要确保它遵循中央交通当局规定的全球规则。
- en: Using this example, we'll try to understand the concept of interfaces. Here,
    the central traffic authority acts as an interface and the Australian traffic
    rules act as a class that implements the interface; that is, the Australian traffic
    system will have to follow the rules/methods mentioned in the central traffic
    authority interface. The methods defined in any interface are just signatures,
    so the classes will define and implement the methods present in an interface.
    Let's look at this example in our Java code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个例子，我们将尝试理解接口的概念。在这里，中央交通当局充当接口，澳大利亚交通规则充当实现接口的类；也就是说，澳大利亚交通系统将必须遵循中央交通当局接口中提到的规则/方法。任何接口中定义的方法只是签名，因此类将定义并实现接口中存在的方法。让我们看看我们的Java代码中的这个例子。
- en: 'We define an interface in the same way that we define a class. In this traffic
    light example, let''s name the class as `CentralTraffic`. We now have a ready
    interface, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义接口的方式与定义类的方式相同。在这个交通信号灯示例中，让我们将类命名为`CentralTraffic`。我们现在有一个现成的接口，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can see in the syntax that instead of `class` we have written `interface`.
    We define a method in the interface using the same method that we use to define
    a method in a class, but remember that we cannot have a method body defining the
    method as this is an interface, and doing so will throw an error. Create another
    class to implement this interface and name it `AustralianTraffic`. Once we have
    a Java class, we need to implement the `CentralTraffic` interface to it, and we
    do that using the `implements` keyword, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在语法中看到，我们写的是`interface`而不是`class`。我们使用与在类中定义方法相同的方法在接口中定义一个方法，但请记住，我们不能有定义方法的主体，因为这是一个接口，这样做将引发错误。创建另一个类来实现这个接口，并将其命名为`AustralianTraffic`。一旦我们有了Java类，我们需要将`CentralTraffic`接口实现到它上面，我们使用`implements`关键字这样做，如下所示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After using the preceding sentence, our IDE will show an error, and when you
    hover over the error, you''ll see some suggestions related to the error. One suggestion
    would be to import `CentralTraffic`, and another would be to add unimplemented
    methods. Click on these suggestions to resolve the error and you should end up
    with the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用前面的句子后，我们的集成开发环境（IDE）将显示一个错误，当你将鼠标悬停在错误上时，你会看到一些与错误相关的建议。其中一个建议是导入`CentralTraffic`，另一个建议是添加未实现的方法。点击这些建议以解决错误，你应该得到以下代码：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All the methods defined in the `CentralTraffic` interface can be seen in the
    `AustralianTraffic` class, and here we can also implement these methods as we
    wish. Now, if we remove the `greenGo` method from our Java class, it'll give us
    an error. As it is a method defined in an interface, it is mandatory for us to
    implement all the methods defined in the interface.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CentralTraffic`接口中定义的所有方法都可以在`AustralianTraffic`类中看到，我们也可以按自己的意愿实现这些方法。现在，如果我们从我们的Java类中移除`greenGo`方法，它将给出一个错误。因为这个方法是接口中定义的，所以我们必须实现接口中定义的所有方法。
- en: 'The interface methods are defined outside `public static void main`, and to
    execute these methods, we should create a class object for them in the `main`
    method, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接口方法是在`public static void main`外部定义的，要执行这些方法，我们应该在`main`方法中为它们创建一个类对象，如下所示：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This line of code says that we have created an object for the `AustralianTraffic`
    class to implement the methods present in the `CentralTraffic` interface. The
    main class should look as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码表示我们为`AustralianTraffic`类创建了一个对象来实现`CentralTraffic`接口中的方法。主类应该如下所示：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, after implementing the methods from the interface, we can define our own
    country-specific methods (rules) in our Java class, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在实现了接口中的方法之后，我们可以在我们的Java类中定义我们自己的特定国家的方法（规则），如下所示：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In our `main` method, if we try calling our country-specific method using `a.`,
    like we did for the other methods in the `main` class, then we will find that
    we won''t be able to do so because the `walkonsymbol` method is specific to a
    particular country (that is, the `AustralianTraffic` class) and it''s not implemented
    in `CentralTraffic`. For the `walkonsymbol` method, we need to create another
    object in the `main` class specific to the `AustralianTraffic` class, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`main`方法中，如果我们尝试使用`a.`调用我们的特定国家的方法，就像我们在`main`类中的其他方法那样做，那么我们会发现我们无法这样做，因为`walkonsymbol`方法特定于某个国家（即`AustralianTraffic`类）并且没有在`CentralTraffic`中实现。对于`walkonsymbol`方法，我们需要在`main`类中为`AustralianTraffic`类创建另一个对象，如下所示：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another piece of information related to the interface is that a class can implement
    more than one interface. Let''s say that we create another interface, such as
    `ContinentalTraffic`, and define another rule related to traffic lights, such
    as a train symbol to indicate that a train is passing by. We can implement this
    interface in our `AustralianTraffic` class simply by adding a comma, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与接口相关的一条信息是，一个类可以实现多个接口。假设我们创建另一个接口，例如`ContinentalTraffic`，并定义另一个与交通信号灯相关的规则，例如一个火车符号来表示火车正在通过。我们可以在我们的`AustralianTraffic`类中简单地通过添加逗号来实现这个接口，如下所示：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For this interface, we need to follow the same steps as we did for the `CentralTraffic`
    interface, such as importing `ContinentalTraffic` to `AustralianTraffic`, adding
    unimplemented methods, creating an object specific to `ContinentalTraffic` in
    the main class, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个接口，我们需要遵循与 `CentralTraffic` 接口相同的步骤，例如将 `ContinentalTraffic` 导入到 `AustralianTraffic`
    中，添加未实现的方法，在主类中创建特定的 `ContinentalTraffic` 对象，等等。
- en: Now you have a fair idea of the differences between an interface and a class.
    We learned how to define the interfaces, how to implement them within another
    class, and how to call them using objects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对接口和类之间的区别有了相当的了解。我们学习了如何定义接口，如何在另一个类中实现它们，以及如何使用对象调用它们。
- en: Inheritance
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance is another important OOP concept in Java. Let's take an example
    of a vehicle to understand the concept of inheritance, just like we did in using
    the example of a traffic light system to understand interfaces. The basic properties
    of a vehicle are its color, gears, mirrors, brakes, and so on. Let's say that
    we are making a new vehicle with certain advancements to some of these properties,
    such as an engine with a higher CC, and maybe a different design than the old
    one. Now, to create a new vehicle with these new features, we still need the basic
    features of the old vehicle, such as mirrors and brakes, which are present in
    vehicles by default.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是 Java 中另一个重要的面向对象编程（OOP）概念。让我们以一个车辆为例来理解继承的概念，就像我们使用交通信号系统示例来理解接口一样。车辆的基本属性包括其颜色、档位、后视镜、刹车等。假设我们正在制造一种新的车辆，它对某些属性进行了改进，例如具有更高
    CC 的引擎，也许与旧款的设计不同。现在，要创建具有这些新功能的新的车辆，我们仍然需要旧车辆的基本功能，例如后视镜和刹车，这些功能在车辆中默认存在。
- en: Let's take the preceding example and use Java to reflect these relationships
    in order to understand the concept of inheritance. In our example, if we have
    a class for a vehicle and enter the basic features of the vehicle as methods that
    are present in that class, then when we create a class for a new vehicle, it can
    inherit the features of the class that is created for the vehicle, and we don't
    have to write the code for these features as they are available to us via inheritance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以先前的例子为例，使用 Java 来反映这些关系，以便理解继承的概念。在我们的例子中，如果我们有一个车辆类，并将车辆的基本特征作为存在于该类中的方法，那么当我们创建一个新的车辆类时，它可以继承为车辆创建的类的特征，我们不需要为这些特征编写代码，因为它们通过继承对我们可用。
- en: 'Let''s get started with the code. Create a `parentClassdemo` class, which will
    be our parent class. In this class, we will define our methods, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代码开始。创建一个 `parentClassdemo` 类，这将是我们的父类。在这个类中，我们将定义我们的方法，如下所示：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will now inherit these methods in our child class. Create a `childClassDemo` in
    Java. We inherit the parent class using the `extends` keyword, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在子类中继承这些方法。创建一个 Java 中的 `childClassDemo`。我们使用 `extends` 关键字继承父类，如下所示：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we inherited the `parentClassdemo` class in the `childClassDemo` class
    using the `extends` keyword. In this `childClassDemo` class, we defined our own
    `engine` method and used the `color` method, which we inherited from the `parentClassdemo`
    class. We then created a `cd` object and used it to call the methods from the
    inherited class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `extends` 关键字在 `childClassDemo` 类中继承了 `parentClassdemo` 类。在这个 `childClassDemo`
    类中，我们定义了自己的 `engine` 方法，并使用了从 `parentClassdemo` 类继承来的 `color` 方法。然后我们创建了一个 `cd`
    对象，并使用它来调用继承类中的方法。
- en: More on inheritance
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于继承
- en: Let's discuss some notorious tricky questions and misconceptions regarding inheritance
    in Java.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些关于 Java 继承中臭名昭著的棘手问题和误解。
- en: 'Let''s get started with some of the more well-known questions asked concerning
    inheritance. Take a look at the following block of code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始讨论一些关于继承的更常见问题。看一下以下代码块：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is also one of the differences between inheritance and interfaces, as an
    interface allows us to use multiple interfaces at a time.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是继承与接口之间区别之一，因为接口允许我们同时使用多个接口。
- en: 'Take a look at the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下示例：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we have an `A` class and it has an `i` variable. There is also a `B` class
    that extends the `A` class, and we also have its local `i` variable set as `20`.
    Now, in `MainClass`, we create an object for the `B` class. What does this step
    actually mean? Here, we are creating an object and saying that this object of
    this `B` class should refer to the properties of the `A` class. Though we have
    permission to access this `B` class through this `a` object, we can only access
    the properties or methods of the `A` class, because the `B` class has permission
    to access the `A` class here, as we are extending it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个`A`类，它有一个`i`变量。还有一个扩展了`A`类的`B`类，并且我们也将它的局部`i`变量设置为`20`。现在，在`MainClass`中，我们为`B`类创建了一个对象。这一步实际上意味着什么？在这里，我们正在创建一个对象，并说明这个`B`类的对象应该引用`A`类的属性。尽管我们有权限通过这个`a`对象访问`B`类，但我们只能访问`A`类的属性或方法，因为`B`类有权限在这里访问`A`类，因为我们正在扩展它。
- en: The question here is what will `a.i` print—`20` or `10`? The answer is, it will
    print the variable value of `10`, as `A a = new B();` explicitly tells `a` that
    it is an object of the `B` class, but we need to access the methods present in
    the `A` class. If we want this output as `20`, we change the syntax to `B a =
    new B();`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是`a.i`将打印什么——`20`还是`10`？答案是，它将打印变量值`10`，因为`A a = new B();`明确告诉`a`它是一个`B`类的对象，但我们需要访问`A`类中的方法。如果我们想得到`20`的输出，我们将语法改为`B
    a = new B();`。
- en: You may get such questions if you attend Java quizzes or a complex interview.
    These are the important pieces of information that you have to know regarding
    inheritance, and you can plan accordingly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你参加Java测验或复杂的面试，可能会遇到这样的问题。这些都是你必须知道的关于继承的重要信息，你可以据此进行规划。
- en: Function overloading
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数重载
- en: 'Function overloading happens when a class has multiple methods with the same
    name. If we define a `getData` method twice in our class, we can say that the
    `getData` function is overloaded, as shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个类有多个同名方法时，就会发生函数重载。如果我们在我们类中定义两次`getData`方法，我们可以说`getData`函数被重载了，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There are a few rules that we need to remember while using multiple instances
    of a function with the same name. The first rule is that the number of arguments
    present in the function-overloaded method should be different, and the second
    is that the argument data type should be different. If we keep both the `getData`
    methods with the `int a` argument, it will throw an error, so we need to have
    a different number of arguments for each method. Now, when you print these, you''ll
    get the outputs of `2` and `hello`. We can see that two different arguments are
    printed, but with the same method name. Let''s add one more `getData` instance
    with two arguments, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用具有相同名称的多个函数实例时，我们需要记住一些规则。第一条规则是函数重载方法中参数的数量应该不同，第二条规则是参数的数据类型应该不同。如果我们保留两个具有`int
    a`参数的`getData`方法，它将引发错误，因此我们需要为每个方法有不同的参数数量。现在，当你打印这些时，你会得到`2`和`hello`的输出。我们可以看到打印了两个不同的参数，但具有相同的名称。让我们再添加一个具有两个参数的`getData`实例，如下所示：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We now have two instances of `getData` with the same data type, but the number
    of arguments varies.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个`getData`实例，它们的数据类型相同，但参数的数量不同。
- en: You might come across function overloading in the real world as well, such as
    when you are asked for the payment method in an e-commerce website in patches.
    The website might use different `getPayment` methods to confirm the payment—one
    `getPayment` method takes a debit card as an argument, another `getPayment` method
    takes a credit card as an argument, and another `getPayment` might take a gift
    card as an argument. So we pass different kinds of arguments to the same `getPayment`
    method. In this case, we stick to `getPayment` as a method name and pass it different
    arguments, bringing the concept of function overloading to this particular scenario.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你在现实生活中也可能遇到函数重载，例如，当你在电子商务网站上被要求选择支付方式时。网站可能使用不同的`getPayment`方法来确认支付——一个`getPayment`方法接受借记卡作为参数，另一个`getPayment`方法接受信用卡作为参数，另一个`getPayment`可能接受礼品卡作为参数。所以我们将不同类型的参数传递给同一个`getPayment`方法。在这种情况下，我们坚持使用`getPayment`作为方法名，并传递不同的参数，将函数重载的概念应用到这个特定的场景中。
- en: Function overriding
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数重写
- en: In this section, let's discuss one more important feature in Java—is function
    overriding. Let's continue with the same example that we looked at when learning
    about inheritance.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们再讨论Java中的一个重要特性——函数重写。让我们继续使用我们在学习继承时看到的相同示例。
- en: 'In that example, we had a parent class called `parentClassdemo` and a child
    class called `childClassDemo`, and the child class inherited the parent class,
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个示例中，我们有一个名为`parentClassdemo`的父类和一个名为`childClassDemo`的子类，子类继承了父类，如下所示：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, we have the `engine` method defined in the child class, which prints
    a new engine, and we have another method, `color`, which is defined in the parent
    class, and we call it using an object. If we print this, we will get the output
    of the `color` method, as it is defined in the parent class. Now, we create a
    new method in the child class and name it `color` as well, defining it as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在子类中定义了`engine`方法，它打印一个新的引擎，我们还有一个名为`color`的方法，它在父类中定义，我们通过一个对象来调用它。如果我们打印这个，我们将得到`color`方法的输出，因为它是在父类中定义的。现在，我们在子类中创建一个新的方法，并将其命名为`color`，定义如下：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have two instances of the `color` method—one defined in the parent class
    and a new one defined in the child class. Here is where the concept of function
    overriding comes into action. If you run the child class, you will get the output
    of `update color`. This is because the new `color` method defined in the child
    class overrides the `color` method from the parent class.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个`color`方法的实例——一个在父类中定义，另一个在子类中定义。这就是函数重写概念发挥作用的地方。如果你运行子类，你将得到`update color`的输出。这是因为子类中定义的新`color`方法覆盖了父类中的`color`方法。
- en: This sums up the whole concept of function overriding, where both the methods
    have the same name, signature, and parameters. In function overloading, we have
    methods that have the same name, but different arguments. This, one of the major
    differences between function overloading and function overriding.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这总结了函数重写的整个概念，其中两个方法具有相同的名称、签名和参数。在函数重载中，我们有具有相同名称但不同参数的方法。这是函数重载和函数重写之间的一项主要区别。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we were introduced to some important Java OOP concepts, such
    as interfaces, inheritance, function overloading, and function overriding. We
    looked at each concept using an example, which helped us better understand the
    concepts in detail.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了几个重要的Java面向对象概念，例如接口、继承、函数重载和函数重写。我们通过示例查看每个概念，这有助于我们更好地理解这些概念。
- en: 'In the next chapter we will take a look at one of the most important concept
    in Java code: arrays. We''ll see how different arrays look, and how to initialize
    and display them.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Java代码中最重要概念之一：数组。我们将看到不同数组的形态，以及如何初始化和显示它们。
