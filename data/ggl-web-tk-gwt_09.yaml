- en: Chapter 9. I18N and XML
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。I18N和XML
- en: In this chapter, we will learn how to use internationalization in a GWT application.
    We will also create samples that showcase GWT support for the client-side creation
    and parsing of XML documents.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在GWT应用程序中使用国际化。我们还将创建展示GWT支持客户端创建和解析XML文档的示例。
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要处理的任务是：
- en: Internationalization
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化
- en: Create XML documents
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建XML文档
- en: Parse XML documents
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析XML文档
- en: Internationalization (I18N)
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化（I18N）
- en: GWT provides extensive support for creating applications that can display text
    in a wide variety of languages. In this section, we are going to utilize GWT to
    create a page that can display text in the appropriate language for a given locale.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GWT提供了广泛的支持，可以创建能够以多种语言显示文本的应用程序。在本节中，我们将利用GWT创建一个页面，可以根据给定的区域设置显示适当语言的文本。
- en: Time for Action—Using the I18N Support
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-使用I18N支持
- en: 'We are going to create a simple GWT user interface that displays the appropriate
    image and translation for the text "Welcome" for the specified locale. The image
    displayed will be the flag that corresponds to the chosen locale. The steps are
    as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的GWT用户界面，显示指定区域设置的适当图像和文本“欢迎”。显示的图像将是对应于所选区域设置的国旗。步骤如下：
- en: 'Create a new Java file named `I18NSamplesConstants.java` in the `com.packtpub.gwtbook.samples.client.util`
    package that defines an interface named `I18NSamplesConstants`. Add the following
    two methods to the interface—one for retrieving the welcome text and one for retrieving
    the image:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`I18NSamplesConstants.java`的新的Java文件，定义一个名为`I18NSamplesConstants`的接口。向接口添加以下两个方法-一个用于检索欢迎文本，一个用于检索图像：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new file named `I18NSamplesConstants.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`I18NSamplesConstants.properties`的新文件。向其中添加欢迎文本和图像的属性：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This properties file represents the default locale, in this case US English.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性文件代表了默认的区域设置，即美国英语。
- en: 'Create a new file named `I18NSamplesConstants_el_GR.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`I18NSamplesConstants_el_GR.properties`的新文件。向其中添加欢迎文本和图像的属性：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This properties file represents the locale for Greek.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性文件代表了希腊的区域设置。
- en: 'Create a new file named `I18NSamplesConstants_es_ES.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`I18NSamplesConstants_es_ES.properties`的新文件。向其中添加欢迎文本和图像的属性：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This properties file represents the locale for Spanish.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性文件代表了西班牙的区域设置。
- en: 'Create a new file named `I18NSamplesConstants_zh_CN.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.util`包中创建一个名为`I18NSamplesConstants_zh_CN.properties`的新文件。向其中添加欢迎文本和图像的属性：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This properties file represents the locale for Chinese.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性文件代表了中文的区域设置。
- en: 'Create a new Java file named `I18NPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package. Create `VerticalPanel` that will contain the user interface. We will
    add this panel into `DockPanel` and add it into our `Samples` application, like
    all the other applications that we have been working on in this book. Add a label
    that will display the welcome text message in the appropriate language for the
    provided locale:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中创建一个名为`I18NPanel.java`的新的Java文件。创建一个将包含用户界面的`VerticalPanel`。我们将把这个面板添加到`DockPanel`中，并将其添加到我们的`Samples`应用程序中，就像我们在本书中一直在做的其他应用程序一样。添加一个标签，用于以提供的区域设置的适当语言显示欢迎文本消息：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create an instance of `I18NSamplesConstants` in the constructor. Add an image
    widget for displaying the flag image and a label for displaying the welcome text
    to the panel. Set the text for the label and the image file by using `I18NSamplesConstants`.
    Finally, create a little info panel that displays descriptive text about this
    application, so that we can display the text when this sample is selected in the
    list of available samples in our `Samples` application. Add the info panel and
    the work panel to a dock panel, and initialize the widget:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中创建`I18NSamplesConstants`的实例。添加一个图像小部件来显示国旗图像，以及一个标签来显示欢迎文本到面板上。通过使用`I18NSamplesConstants`来设置标签和图像文件的文本。最后，创建一个小的信息面板，显示关于这个应用程序的描述性文本，这样当我们在`Samples`应用程序的可用示例列表中选择此示例时，我们可以显示文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add an entry to import the I18N module to the `Samples.gwt.xml` file:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个条目来导入I18N模块到`Samples.gwt.xml`文件中：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add an entry for each locale that we support to the `Samples.gwt.xml` file:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们支持的每个区域设置添加一个条目到`Samples.gwt.xml`文件中：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the application. Here is the default interface displayed in the default
    locale—`en_US:`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序。这是以默认区域设置显示的默认界面-`en_US:`
- en: '![Time for Action—Using the I18N Support](img/1007_09_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用I18N支持](img/1007_09_01.jpg)'
- en: Modify the URL to add a locale query parameter with each of the locales that
    we support to see the user interface displayed in the appropriate language. Here
    is the user interface displayed in Greek—`el_GR:`
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 修改URL，为我们支持的每个区域设置添加一个区域查询参数，以便以适当的语言显示用户界面。这是以希腊语显示的用户界面-`el_GR:`
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Time for Action—Using the I18N Support](img/1007_09_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用I18N支持](img/1007_09_02.jpg)'
- en: Here is the user interface displayed in Spanish—`es_ES:`
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以西班牙语显示的用户界面-`es_ES:`
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Time for Action—Using the I18N Support](img/1007_09_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用I18N支持](img/1007_09_03.jpg)'
- en: Here is the user interface displayed in Chinese—`zh_CN:`
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以中文显示的用户界面-`zh_CN:`
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Time for Action—Using the I18N Support](img/1007_09_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用I18N支持](img/1007_09_04.jpg)'
- en: What Just Happened?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'GWT provides various tools and techniques that help in developing internationalized
    applications that can display text in various languages. There are two main techniques
    for developing internationalized applications using GWT:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: GWT提供了各种工具和技术，帮助开发可以显示各种语言文本的国际化应用程序。使用GWT开发国际化应用程序有两种主要技术：
- en: '**Static String Internationalization:** This is a type-safe technique that
    depends on Java interfaces and regular properties files. It generates code from
    the previous two components to provide an application with messages that are aware
    of the locale whose context they are operating in. This technique is recommended
    for new applications that do not have existing localized properties files.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态字符串国际化：这是一种依赖于Java接口和常规属性文件的类型安全技术。它从前两个组件生成代码，为应用程序提供了意识到其操作环境的区域设置的消息。这种技术推荐用于没有现有本地化属性文件的新应用程序。
- en: '**Dynamic String Internationalization:** This technique is used when you already
    have an existing localization system, such as your web server that can generate
    localized strings. These translated strings are then printed within your HTML
    page. This approach is usually slower than the static approach, but since it does
    not have the code generation phase, you do not need to recompile your application
    every time your message strings are modified, or the list of locales supported
    is changed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态字符串国际化：当您已经有现有的本地化系统时，例如您的Web服务器可以生成本地化字符串时，可以使用此技术。然后在HTML页面中打印这些翻译后的字符串。这种方法通常比静态方法慢，但由于它没有代码生成阶段，因此每次修改消息字符串或更改支持的区域设置列表时，您不需要重新编译应用程序。
- en: In this sample, we are using the static internationalization technique. We create
    an interface `I18NSamplesConstants` that defines two methods—one method returns
    the welcome message, while the other method returns the flag-image file name.
    We then create a properties file for each locale supported by our application,
    and add the messages in the appropriate language to the file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用静态国际化技术。我们创建一个接口`I18NSamplesConstants`，定义两个方法——一个方法返回欢迎消息，另一个方法返回标志图像文件名。然后为应用程序支持的每个区域设置创建一个属性文件，并将消息添加到适当语言的文件中。
- en: 'A `locale` is an object that uniquely identifies a particular combination of
    language and a region. So for instance, a locale of `en_US` refers to the language
    as English and the region as United States. Similarly, `fr_FR` refers to the language
    French and the region France. The properties file name must end with the locale
    identifier before the extension `properties`. Here are the contents of our properties
    file for Spanish language in the region Spain:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`locale`是一个唯一标识特定语言和地区组合的对象。例如，`en_US`的区域设置指的是英语和美国。同样，`fr_FR`指的是法语和法国。属性文件名必须以区域标识符结尾，然后是`properties`扩展名。这是我们西班牙语区域西班牙属性文件的内容：'
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Our user interface is very simple, and it consists of one image with a label
    under it. The image will display the flag of the region whose locale we are using,
    and the label will display the welcome text in the language for the locale. The
    application on startup will display the page in the default locale for your environment.
    You can change this by appending a query parameter with the key `locale` and a
    value equal to any of the supported locales. So in order to view the page in Greek,
    you would append `locale=el_GR` to the respective URL.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户界面非常简单，由一个图像和其下的标签组成。图像将显示使用的区域设置的国旗，标签将显示欢迎文本的语言。应用程序在启动时将以您的环境的默认区域设置显示页面。您可以通过附加一个查询参数，键为`locale`，值等于任何支持的区域设置，来更改这一点。因此，为了以希腊语查看页面，您将在相应的URL后附加`locale=el_GR`。
- en: 'If you provide a locale that is not supported, the web page will be displayed
    in the default locale. We access the appropriate text by creating the `I18NSamplesConstants`
    class, using the accessors to get the localized messages, and setting the values
    for the two widgets:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的区域设置不受支持，网页将以默认区域设置显示。我们通过创建`I18NSamplesConstants`类来访问适当的文本，使用访问器获取本地化消息，并为两个小部件设置值：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `I18NSamplesConstants` class extends from the `Constants` class, which
    enables binding at compile time to constant values that are acquired from simple
    property files. When we use `GWT.create()` method to instantiate `I18NSamplesConstants`,
    GWT automatically generates the right subclass that uses values from the property
    file for the appropriate locale and returns it. The supported locales themselves
    are defined by the module file, using an extend-property tag. This informs the
    GWT framework that we want to extend the default property "locale", by providing
    alternatives for it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`I18NSamplesConstants`类扩展自`Constants`类，它允许在编译时绑定到从简单属性文件获取的常量值。当我们使用`GWT.create()`方法实例化`I18NSamplesConstants`时，GWT会自动生成使用适当区域设置的属性文件值的正确子类，并返回它。支持的区域设置本身由模块文件定义，使用extend-property标签。这通知GWT框架，我们要扩展默认属性"locale"，提供其替代方案：'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We also inherit from `com.google.gwt.i18n.I18N` in the `Samples.gwt.xml` file
    so that our module can have access to the I18N functionality provided by GWT.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在`Samples.gwt.xml`文件中继承自`com.google.gwt.i18n.I18N`，以便我们的模块可以访问GWT提供的I18N功能。
- en: There are several other tools provided by GWT to enhance the I18N support. There
    is a `Messages` class that can be used when we want to provide localized messages
    that have parameters passed to them. We can also ignore the localization, and
    use a regular properties file to store configuration information. We also have
    an `i18nCreator` command script that can generate the `Constants` or `Messages`
    interfaces and sample properties files. Finally, a `Dictionary` class is also
    available that can be used for dynamic internationalization, as it provides a
    way to dynamically look up key-value pairs of strings that are defined in the
    HTML page for the module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: GWT还提供了其他几种工具来增强I18N支持。有一个`Messages`类，当我们想要提供带有参数的本地化消息时可以使用它。我们也可以忽略本地化，使用常规的属性文件来存储配置信息。我们还有一个`i18nCreator`命令脚本，可以生成`Constants`或`Messages`接口和示例属性文件。最后，还有一个`Dictionary`类可用于动态国际化，因为它提供了一种动态查找在模块的HTML页面中定义的键值对字符串的方式。
- en: The I18N support in GWT is quite extensive and can be used to support either
    simple or complicated internationalization scenarios.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: GWT中的I18N支持非常广泛，可以用于支持简单或复杂的国际化场景。
- en: Creating XML Documents
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建XML文档
- en: XML is in wide-spread use across enterprises in a variety of applications, and
    is also very commonly used when integrating disparate systems. In this section,
    we will learn about GWT's XML support and how to use it to create an XML document
    on the client side.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: XML在企业中被广泛应用于各种应用程序，并且在集成不同系统时也非常常见。在本节中，我们将学习GWT的XML支持以及如何在客户端使用它来创建XML文档。
- en: Time for Action—Creating an XML Document
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-创建XML文档
- en: 'We are going to take customer data stored in a CSV file, and create an XML
    document containing the customer data. The steps are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取存储在CSV文件中的客户数据，并创建一个包含客户数据的XML文档。步骤如下：
- en: 'Create a simple CSV file with the customer data in a file named `customers.csv`
    in the `com.packtpub.gwtbook.samples.public` package. Add the information for
    two customers to this file:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.public`包中创建一个简单的CSV文件，其中包含客户数据，文件名为`customers.csv`。向此文件添加两个客户的信息：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the user interface in a new Java file named `CreateXMLPanel.java` in
    the package `com.packtpub.gwtbook.samples.client.panels`. Create a private `HTMLPanel`
    variable that will display the XML document that we are going to create. Also
    create a `VerticalPanel` class that will be the container for the user interface:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的新Java文件`CreateXMLPanel.java`中创建用户界面。创建一个私有的`HTMLPanel`变量，用于显示我们将要创建的XML文档。还创建一个`VerticalPanel`类，它将是用户界面的容器：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a private method named `createXMLDocument()` that can take a string
    and create the customer''s XML document from it. Create an XML document object,
    add the processing instruction for the XML version, and create a root node named
    `customers`. Loop through the customer information on each row from the CSV file.
    Create the appropriate XML nodes, set their value, and add them to the root node.
    Finally return the XML document created:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createXMLDocument()`的私有方法，它可以接受一个字符串并从中创建客户的XML文档。创建一个XML文档对象，添加XML版本的处理指令，并创建一个名为`customers`的根节点。循环遍历CSV文件中每一行的客户信息。创建适当的XML节点，设置它们的值，并将它们添加到根节点。最后返回创建的XML文档：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a new method named `createPrettyXML()` that will format our XML document
    nicely by indenting the nodes before we display it in `HTMLPanel:`
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createPrettyXML()`的新方法，它将通过缩进节点来格式化我们的XML文档，然后在`HTMLPanel`中显示：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is just a quick-and-dirty way of formatting the XML document, as GWT does
    not currently provide a nice way to do this.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一种快速而粗糙的格式化XML文档的方式，因为GWT目前没有提供一个很好的方法来做到这一点。
- en: 'Create the user interface for this application in a new Java file named `CreateXMLPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. In the constructor
    `CreateXMLPanel()`, make an asynchronous HTTP request to get the `customers.csv`
    file. On success, create the XML document from the data contained in the CSV file
    and display it in the `HTMLPanel`. Finally, create a little info panel that displays
    descriptive text about this application, so that we can display the text when
    this sample is selected in the list of available samples in our `Samples` application.
    Add the info panel and the work panel to a dock panel, and initialize the widget:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的新Java文件`CreateXMLPanel.java`中为此应用程序创建用户界面。在构造函数`CreateXMLPanel()`中，进行异步HTTP请求以获取`customers.csv`文件。成功后，从CSV文件中的数据创建XML文档，并在`HTMLPanel`中显示它。最后，创建一个小的信息面板，显示关于此应用程序的描述性文本，以便在`Samples`应用程序的可用样本列表中选择此样本时显示文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add an entry to import the XML module to the `Samples.gwt.xml` file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Samples.gwt.xml`文件中添加一个条目来导入XML模块：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is the page displaying the XML document created from the customer''s CSV
    file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示从客户的CSV文件创建的XML文档的页面：
- en: '![Time for Action—Creating an XML Document](img/1007_09_05.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-创建XML文档](img/1007_09_05.jpg)'
- en: What Just Happened?
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'GWT provides good support for generating XML documents on the client side,
    and like everything else in the framework, it is browser-independent. You can
    utilize the `XMLParser` class to generate the documents, and can be assured that
    the XML document will be generated correctly in all the supported browsers. In
    this example, we create a simple CSV file with the customer data. This customer
    data is retrieved by using the `asyncGet()` method on the `HTTPRequest` object.
    Since there is no support provided for reading files from the file system in GWT,
    this is a workaround to load external files without resorting to using RPC services.
    We provide the name of the file and `ResponseTextHandler` as parameters to this
    method. `ResponseTextHandler` provides a callback that is executed when the synchronous
    call is completed. In the callback, we read in the contents of the response and
    create an XML document with the values. A new document is created by using the
    `XMLParser` object:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: GWT在客户端提供了良好的支持，用于生成XML文档，并且与框架中的其他所有内容一样，它是与浏览器无关的。您可以利用`XMLParser`类来生成文档，并且可以确保在所有支持的浏览器中正确生成XML文档。在这个例子中，我们创建了一个包含客户数据的简单CSV文件。通过在`HTTPRequest`对象上使用`asyncGet()`方法检索此客户数据。由于GWT没有提供从文件系统中读取文件的支持，这是一种加载外部文件的解决方法，而不是使用RPC服务。我们将文件名和`ResponseTextHandler`作为此方法的参数。`ResponseTextHandler`提供了在同步调用完成时执行的回调。在回调中，我们读取响应的内容并使用这些值创建一个XML文档。通过使用`XMLParser`对象创建一个新文档：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A processing instruction is added first to this document, so that the XML is
    well formed:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先向此文档添加了一个处理指令，以便XML格式良好：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We then create the root node and child node. We add a text node to the new
    node with the value that we have parsed from the CSV file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建根节点和子节点。我们向新节点添加一个文本节点，该节点的值是我们从CSV文件中解析出的值：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This new document is displayed by using a pre-formatted block in `HTMLPanel`.
    However, we need to format and indent the text nicely before displaying it in
    the panel; otherwise the entire document will appear as one line string. We have
    a private method that indents and formats the document nicely by using regular
    expressions. This is slightly tedious. Hopefully, in the future GWT will support
    creating pretty XML document in the framework itself. In this example, we are
    retrieving the contents of the CSV file via an HTTP request; we can provide the
    data for generating the XML in any format we like by using an RPC service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新文档是通过在`HTMLPanel`中使用预格式化块来显示的。然而，在将其显示在面板中之前，我们需要对文本进行格式化和缩进，否则整个文档将显示为一行字符串。我们有一个私有方法，通过使用正则表达式来缩进和格式化文档。这有点繁琐。希望将来GWT将支持在框架本身创建漂亮的XML文档。在这个例子中，我们通过HTTP请求检索CSV文件的内容；我们可以使用RPC服务以任何我们喜欢的格式提供生成XML的数据。
- en: Parse XML Documents
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析XML文档
- en: In the previous section, we used the GWT support for creating XML documents.
    In this section, we are going to learn how to read XML documents. We will be creating
    an application that can parse an XML file and populate a table using the data
    from the file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用了GWT支持创建XML文档。在本节中，我们将学习如何读取XML文档。我们将创建一个可以解析XML文件并使用文件中的数据填充表格的应用程序。
- en: Time for Action—Parsing XML on the Client
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Time for Action—Parsing XML on the Client
- en: 'We will be creating a GWT application that can read an XML file containing
    information about some books, and populate a table with that data. The steps are
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个GWT应用程序，该应用程序可以读取包含有关一些书籍信息的XML文件，并用该数据填充表格。步骤如下：
- en: 'Create a simple XML file with the books'' data in a file named `books.xml`
    in the `com.packtpub.gwtbook.samples.client.public` package:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.public`包中创建一个名为`books.xml`的文件，其中包含书籍数据的简单XML文件：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the user interface for this application in a new Java file named `ParseXMLPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create a `VerticalPanel`
    class that will contain our user interface, and a `FlexTable` class that we will
    use for displaying the data from the XML file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的新Java文件`ParseXMLPanel.java`中为此应用程序创建用户界面。创建一个包含我们用户界面的`VerticalPanel`类，以及我们将用于显示来自XML文件的数据的`FlexTable`类：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a private method named `getElementTextValue()` that can take a parent
    XML element and a tag name, and return the text value for that node:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getElementTextValue()`的私有方法，该方法可以接受一个父XML元素和一个标签名称，并返回该节点的文本值：
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the constructor `ParseXMLPanel()`, add the table headers and styles for
    the flex table:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数`ParseXMLPanel()`中，为flex表添加表头和样式：
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the same constructor, make an asynchronous HTTP request to get the `books.xml`
    file, and on completion, parse the XML document and populate a flex table with
    the data. Finally, create a little info panel that displays descriptive text about
    this application, so that we can display the text when this sample is selected
    in the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个构造函数中，发出异步HTTP请求以获取`books.xml`文件，并在完成后解析XML文档并用数据填充一个flex表。最后，创建一个小的信息面板，显示有关此应用程序的描述性文本，以便在我们的`Samples`应用程序的可用样本列表中选择此样本时显示文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件：
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is the page with the table containing the data from the `books.xml` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含来自`books.xml`文件的数据的表格的页面：
- en: '![Time for Action—Parsing XML on the Client](img/1007_09_06.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Time for Action—Parsing XML on the Client](img/1007_09_06.jpg)'
- en: What Just Happened?
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We once again use the `HTTPRequest` object to retrieve the contents of a file
    on the server, in this case the `books.xml` file, which contains some data on
    published books that we want to display in a table on the page. The `XMLParser`
    object is utilized to read in the contents of the asynchronous response into a
    document. This XML document is then traversed using the familiar DOM API, and
    the text values of the appropriate nodes are retrieved and used to populate the
    respective column cells in the flex table. We use the `getElementsByTagName()`
    method to get a `NodeList` that contains all the book elements:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`HTTPRequest`对象从服务器检索文件的内容，在这种情况下是`books.xml`文件，其中包含一些关于已出版图书的数据，我们希望在页面上以表格的形式显示出来。`XMLParser`对象被用来将异步响应的内容读入文档中。然后使用熟悉的DOM
    API遍历这个XML文档，并检索和使用适当节点的文本值来填充flex表中的相应列单元格。我们使用`getElementsByTagName()`方法获取包含所有图书元素的`NodeList`：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once we have this list, we just iterate through its child nodes, and access
    the values we are interested in:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了这个列表，我们只需遍历它的子节点，并访问我们感兴趣的值：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We inherit from the `com.google.gwt.xml.xml` file in the `Samples.gwt.xml` file
    so that our module can have access to the XML functionality provided by GWT.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Samples.gwt.xml`文件中继承自`com.google.gwt.xml.xml`文件，以便我们的模块可以访问GWT提供的XML功能。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create an application with internationalization
    (I18N) support. We created a page that can display text in the appropriate language
    for a given locale. Then, we created an XML document on the client side using
    GWT's XML support.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建支持国际化（I18N）的应用程序。我们创建了一个可以根据给定区域设置显示适当语言文本的页面。然后，我们使用GWT的XML支持在客户端创建了一个XML文档。
- en: Finally, we created an application that can parse an XML file and populate a
    table using the data from the file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个可以解析XML文件并使用文件中的数据填充表格的应用程序。
- en: In the next chapter, we will learn how to deploy our GWT application in Tomcat.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Tomcat中部署我们的GWT应用程序。
