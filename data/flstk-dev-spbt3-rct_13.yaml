- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Useful Third-Party Components for React
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 有用的第三方组件
- en: React is component-based, and we can find a lot of useful third-party components
    that we can use in our apps. In this chapter, we will look at several components
    that we are going to use in our frontend. We will examine how to find suitable
    components and how you can then use them in your own apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React 是基于组件的，我们可以找到很多有用的第三方组件，我们可以在我们的应用中使用。在本章中，我们将查看我们将要在前端使用的几个组件。我们将探讨如何找到合适的组件，以及你如何在你的应用中使用它们。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing third-party React components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装第三方 React 组件
- en: Working with AG Grid
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AG Grid
- en: Using the Material UI component library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Material UI 组件库
- en: Managing routing with React Router
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 React Router 管理路由
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Node.js must be installed. The following GitHub link for this chapter will
    also be required: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter11).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 必须安装 Node.js。本章所需的 GitHub 链接也将被要求：[https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter11).
- en: Installing third-party React components
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装第三方 React 组件
- en: There are lots of useful React components available for different purposes.
    You can save time by not doing everything from scratch. Well-known third-party
    components are also well tested, and there is good community support for them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多不同目的的 React 组件可供使用。你可以通过不从头开始做来节省时间。知名第三方组件也得到了良好的测试，并且有良好的社区支持。
- en: Our first task is to find a suitable component for our needs. One good site
    to search for components on is **JS.coach** ([https://js.coach/](https://js.coach/)).
    You just have to type in a keyword, search, and select **React** from the list
    of libraries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首要任务是找到适合我们需求的组件。一个很好的搜索组件的网站是 **JS.coach** ([https://js.coach/](https://js.coach/))。你只需要输入一个关键词，搜索，并从库列表中选择
    **React**。
- en: 'In the following screenshot, you can see search results for table components
    for React:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，你可以看到 React 的表格组件搜索结果：
- en: '![](img/B19818_11_01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_01.png)'
- en: 'Figure 11.1: JS.coach'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：JS.coach
- en: 'Another good source for React components is `awesome-react-components`: [https://github.com/brillout/awesome-react-components](https://github.com/brillout/awesome-react-components).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优秀的 React 组件资源是 `awesome-react-components`：[https://github.com/brillout/awesome-react-components](https://github.com/brillout/awesome-react-components).
- en: 'Components often have good documentation that helps you use them in your own
    React app. Let’s see how we can install a third-party component in our app and
    start to use it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 组件通常有良好的文档，可以帮助你在自己的 React 应用中使用它们。让我们看看我们如何在应用中安装第三方组件并开始使用它：
- en: Navigate to the **JS.coach** site, type `date` in the search input field, and
    filter by **React**.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **JS.coach** 网站，在搜索输入字段中输入 `date`，并通过 **React** 进行筛选。
- en: In the search results, you will see a list component called `react-date-picker`
    (with two hyphens). Click the component link to see more detailed information
    about the component.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索结果中，你会看到一个名为 `react-date-picker` 的列表组件（带有两个连字符）。点击组件链接以查看有关组件的更多详细信息。
- en: 'You should find the installation instructions on the info page, and some simple
    examples of how to use the component. You should also check that the development
    of a component is still active. The info page often provides the address of a
    component’s website or GitHub repository, where you can find the full documentation.
    You can see the info page for `react-date-picker` in the following screenshot:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该在信息页面上找到安装说明，以及一些如何使用组件的简单示例。你还应该检查组件的开发是否仍然活跃。信息页面通常会提供组件的网站地址或 GitHub 仓库，在那里你可以找到完整的文档。以下屏幕截图显示了
    `react-date-picker` 的信息页面：
- en: '![](img/B19818_11_02.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_02.png)'
- en: 'Figure 11.2: react-date-picker info page'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：react-date-picker 信息页面
- en: 'As you can see from the component’s info page, components are installed using
    the `npm` package. The syntax of the command to install components looks like
    this:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，组件是通过 `npm` 包安装的。安装组件的命令语法看起来像这样：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or, if you use `yarn`, it looks like this:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，如果你使用 `yarn`，它看起来像这样：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `npm` `install` and `yarn` `add` commands save the component’s dependency
    to the `package.json` file that is in the root folder of your React app.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`npm` 的 `install` 和 `yarn` 的 `add` 命令将组件的依赖项保存到您的 React 应用根文件夹中的 `package.json`
    文件中。'
- en: 'Now, we will install the `react-date-picker` component to the `myapp` React
    app that we created in *Chapter 7*, *Setting Up the Environment and Tools – Frontend*.
    Move to your app root folder and type the following command:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将安装 `react-date-picker` 组件到我们在 *第 7 章*，*设置环境和工具 – 前端* 中创建的 `myapp` React
    应用中。移动到您的应用根文件夹，并输入以下命令：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you open the `package.json` file from your app root folder, you can see
    that the component has now been added to the `dependencies` section, as illustrated
    in the following code snippet:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您从应用的根文件夹打开 `package.json` 文件，您会看到组件现在已被添加到 `dependencies` 部分，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As shown, you can find the installed version number from the `package.json`
    file.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如上图所示，您可以从 `package.json` 文件中找到已安装的版本号。
- en: 'If you want to install a specific version of a component, you can use the following
    command:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想安装特定版本的组件，可以使用以下命令：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And if you want to remove an installed component from your React app, you can
    use the following command:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想从 React 应用中移除已安装的组件，可以使用以下命令：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or, if you use `yarn`:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，如果您使用 `yarn`：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can see what components are outdated by using the following command in
    your project root directory. If the output is empty, all components are in the
    latest version:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过在项目根目录下使用以下命令来查看过时的组件。如果输出为空，则所有组件都是最新版本：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can update all outdated components by using the following command in your
    project root directory:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过在项目根目录下使用以下命令来更新所有过时的组件：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should first ensure that there are no changes that might break your existing
    code. Proper components have a changelog or release notes available, where you
    can see what has changed in the new version.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您首先应该确保没有可能破坏现有代码的更改。适当的组件有变更日志或发布说明可用，您可以在其中查看新版本中有什么变化。
- en: Installed components are saved to the `node_modules` folder in your app. If
    you open that folder, you should find the `react-date-picker` folder, as illustrated
    in the following screenshot:![](img/B19818_11_03.png)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已安装的组件将保存在您应用的 `node_modules` 文件夹中。如果您打开该文件夹，应该会找到 `react-date-picker` 文件夹，如下面的截图所示！![img/B19818_11_03.png](img/B19818_11_03.png)
- en: 'Figure 11.3: node_modules'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.3：node_modules
- en: 'You can get the list of your project dependencies by using the following `npm`
    command:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过以下 `npm` 命令获取您项目的依赖列表：
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you push your React app source code to GitHub, you should not include the
    `node_modules` folder because it contains a significant number of files. The Vite
    project contains a `.gitignore` file that excludes the `node_modules` folder from
    the repository. A section of the `.gitignore` file looks like this, and you can
    see that `node_modules` is found in the file:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您将 React 应用的源代码推送到 GitHub，您不应该包含 `node_modules` 文件夹，因为它包含大量的文件。Vite 项目包含一个
    `.gitignore` 文件，该文件将 `node_modules` 文件夹排除在仓库之外。`.gitignore` 文件的一部分如下所示，您可以看到 `node_modules`
    出现在文件中：
- en: '[PRE10]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The idea is that when you clone a React app from the GitHub repository, you
    type the `npm install` command, which reads dependencies from the `package.json`
    file and downloads them to your app.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 策略是这样的，当您从 GitHub 仓库克隆 React 应用时，您会输入 `npm install` 命令，该命令从 `package.json` 文件中读取依赖项并将其下载到您的应用中。
- en: 'To start using your installed component, import it into the file(s) where you
    want to use it. The code to achieve this is illustrated in the following snippet:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用您已安装的组件，将其导入到您想要使用它的文件中。实现此目的的代码如下所示：
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You have now learned how to install React components in your React app. Next,
    we will start to use a third-party component in our React app.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经学会了如何在 React 应用中安装 React 组件。接下来，我们将开始在 React 应用中使用第三方组件。
- en: Working with AG Grid
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AG Grid
- en: '**AG Grid** ([https://www.ag-grid.com/](https://www.ag-grid.com/)) is a flexible
    data grid component for React apps. It is like a spreadsheet that you can use
    to present your data, and it can contain interactivity. It has many useful features,
    such as filtering, sorting, and pivoting. We will use the Community version, which
    is free (under an MIT license).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**AG Grid** ([https://www.ag-grid.com/](https://www.ag-grid.com/)) 是一个灵活的数据网格组件，适用于
    React 应用。它就像一个电子表格，您可以使用它来展示您的数据，并且它可以包含交互性。它具有许多有用的功能，如过滤、排序和透视。我们将使用免费（MIT 许可证下）的社区版。'
- en: 'Let’s modify the GitHub **REST API** app that we created in *Chapter 10*, *Consuming
    the REST API with React*. Proceed as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们在第 10 章 *使用 React 消费 REST API* 中创建的 GitHub **REST API** 应用。按照以下步骤操作：
- en: 'To install the `ag-grid` community component, open the command line or terminal
    and move to the `restgithub` folder, which is the root folder of the app. Install
    the component by typing the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 `ag-grid` 社区组件，打开命令行或终端，并切换到 `restgithub` 文件夹，这是应用的根文件夹。通过输入以下命令来安装组件：
- en: '[PRE12]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open the `App.tsx` file with **Visual Studio Code** (**VS Code**) and remove
    the `table` element inside the `return` statement. The `App.tsx` file should now
    look like this:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **Visual Studio Code** （**VS Code**） 打开 `App.tsx` 文件，并从 `return` 语句中删除 `table`
    元素。现在，`App.tsx` 文件应该看起来像这样：
- en: '[PRE13]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Import the `ag-grid` component and stylesheets by adding the following lines
    of code at the beginning of the `App.tsx` file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.tsx` 文件的开始处添加以下代码行以导入 `ag-grid` 组件和样式表：
- en: '[PRE14]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`ag-grid` provides different predefined styles. We are using a Material Design
    style.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ag-grid` 提供了不同的预定义样式。我们正在使用 Material Design 风格。'
- en: 'Next, we will add the imported `AgGridReact` component to the `return` statement.
    To fill the `ag-grid` component with data, you have to pass the `rowData` prop
    to the component. Data can be an array of objects, so we can use our state, `repodata`.
    The `ag-grid` component should be wrapped inside the `div` element that defines
    the style. The code is illustrated in the following snippet:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把导入的 `AgGridReact` 组件添加到 `return` 语句中。为了填充 `ag-grid` 组件中的数据，您必须将 `rowData`
    属性传递给组件。数据可以是一个对象数组，因此我们可以使用我们的状态 `repodata`。`ag-grid` 组件应该被包裹在定义样式的 `div` 元素中。代码如下所示：
- en: '[PRE15]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will define columns for the `ag-grid`. We will define a state called
    `columnDefs`, which is an array of column definition objects. `ag-grid` provides
    a `ColDef` type that we can use here. In a column object, you have to define the
    data accessor by using the required `field` props. The `field` value is the property
    name in the REST API response data that the column should display:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为 `ag-grid` 定义列。我们将定义一个名为 `columnDefs` 的状态，它是一个列定义对象的数组。`ag-grid` 提供了一个
    `ColDef` 类型，我们可以在其中使用。在列对象中，您必须使用必需的 `field` 属性来定义数据访问器。`field` 的值是列应显示的 REST
    API 响应数据中的属性名：
- en: '[PRE16]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we will use the AG Grid `columnDefs` prop to define these columns,
    as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用 AG Grid 的 `columnDefs` 属性来定义这些列，如下所示：
- en: '[PRE17]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the app and open it in a web browser. The table looks quite nice by default,
    as shown in the following screenshot:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用并在网页浏览器中打开它。默认情况下，表格看起来相当不错，如下面的截图所示：
- en: '![](img/B19818_11_04.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_11_04.png)'
- en: 'Figure 11.4: ag-grid component'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4：ag-grid 组件
- en: 'Sorting and filtering are disabled by default, but you can enable them using
    the `sortable` and `filter` props in `ag-grid` columns, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，排序和筛选是禁用的，但您可以使用 `ag-grid` 列中的 `sortable` 和 `filter` 属性来启用它们，如下所示：
- en: '[PRE18]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, you can sort and filter any columns in the grid by clicking the column
    header, as illustrated in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您可以通过点击列标题来对网格中的任何列进行排序和筛选，如下面的截图所示：
- en: '![](img/B19818_11_05.png)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B19818_11_05.png)'
- en: 'Figure 11.5: ag-grid filtering and sorting'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.5：ag-grid 筛选和排序
- en: 'You can also enable paging and set the page size in `ag-grid` by using the
    `pagination` and `paginationPageSize` props, as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过使用 `pagination` 和 `paginationPageSize` 属性来在 `ag-grid` 中启用分页并设置页面大小，如下所示：
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, you should see pagination in your table, as illustrated in the following
    screenshot:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您应该能在表格中看到分页，如下面的截图所示：
- en: '![](img/B19818_11_06.png)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B19818_11_06.png)'
- en: 'Figure 11.6: ag-grid pagination'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.6：ag-grid 分页
- en: 'You can find documentation for different grid and column props from the AG
    Grid website: [https://www.ag-grid.com/react-data-grid/column-properties/](https://www.ag-grid.com/react-data-grid/column-properties/).'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从 AG Grid 网站找到有关不同网格和列属性的文档：[https://www.ag-grid.com/react-data-grid/column-properties/](https://www.ag-grid.com/react-data-grid/column-properties/)。
- en: 'The `cellRenderer` prop can be used to customize the content of a table cell.
    The following example shows how you can render a button in a grid cell:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用 `cellRenderer` 属性来自定义表格单元格的内容。以下示例展示了如何在网格单元格中渲染一个按钮：
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The function in the cell renderer accepts `params` as an argument. The type
    of `params` is `ICellRendererParams`, which we have to import. The `params.value`
    will be the value of the `full_name` cell, which is defined in the `field` property
    of the column definition. If you need access to all values in a row, you can use
    `params.row`, which is the whole row object. This is useful if you need to pass
    a whole row of data to some other component. When the button is pressed, it will
    open an alert that shows the value of the `full_name` cell.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元渲染器中的函数接受 `params` 作为参数。`params` 的类型是 `ICellRendererParams`，我们必须导入它。`params.value`
    将是 `full_name` 单元的值，该值定义在列定义的 `field` 属性中。如果您需要访问行中的所有值，可以使用 `params.row`，它是一个完整的行对象。这在您需要将整行数据传递给其他组件时非常有用。当按钮被按下时，它将打开一个弹窗，显示
    `full_name` 单元的值。
- en: 'Here is a screenshot of the table with buttons:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是带有按钮的表格截图：
- en: '![](img/B19818_11_07.png)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B19818_11_07.png)'
- en: 'Figure 11.7: Grid with buttons'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.7：带有按钮的网格
- en: If you press any button, you should see an alert that shows the value of the
    `full_name` cell.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您按下任何按钮，您应该会看到一个弹窗，显示 `full_name` 单元的值。
- en: 'The button column has a `Full_name` header because, by default, the field name
    is used as the header name. If you want to use something else, you can use the
    `headerName` prop in the column definition, as shown in the following code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮列的标题为 `Full_name`，因为默认情况下，字段名称用作标题名称。如果您想使用其他名称，可以在列定义中使用 `headerName` 属性，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the next section, we will start to use the Material UI component library,
    which is one of the most popular React component libraries.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始使用 Material UI 组件库，这是最受欢迎的 React 组件库之一。
- en: Using the Material UI component library
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Material UI 组件库
- en: '**Material UI** ([https://mui.com/](https://mui.com/)), or **MUI**, is the
    React component library that implements Google’s Material Design language ([https://m2.material.io/design](https://m2.material.io/design)).
    Material Design is one of the most popular design systems today. MUI contains
    a lot of different components – such as buttons, lists, tables, and cards – that
    you can use to achieve a nice and uniform **user interface** (**UI**).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Material UI** ([https://mui.com/](https://mui.com/))，或 **MUI**，是一个实现谷歌的 Material
    Design 语言的 React 组件库 ([https://m2.material.io/design](https://m2.material.io/design))。Material
    Design 是当今最受欢迎的设计系统之一。MUI 包含了许多不同的组件——如按钮、列表、表格和卡片——您可以使用它们来实现一个美观且统一的 **用户界面**（**UI**）。'
- en: In this book, we will use MUI version 5\. If you want to use another version,
    you should follow the official documentation ([https://mui.com/material-ui/getting-started/](https://mui.com/material-ui/getting-started/)).
    MUI version 5 supports Material Design version 2.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 MUI 版本 5。如果您想使用其他版本，应遵循官方文档（[https://mui.com/material-ui/getting-started/](https://mui.com/material-ui/getting-started/)）。MUI
    版本 5 支持 Material Design 版本 2。
- en: 'In this section, we will create a small shopping list app and style the UI
    using MUI components. In our app, a user can enter shopping items that contain
    two fields: *product* and *amount*. Entered shopping items are displayed in the
    application as a list. The final UI looks like the following screenshot. The **ADD
    ITEM** button opens a modal form, where the user can enter a new shopping item:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个小型购物清单应用程序，并使用 MUI 组件来设计用户界面。在我们的应用程序中，用户可以输入包含两个字段的购物项目：*产品* 和
    *数量*。输入的购物项目将以列表形式显示在应用程序中。最终的 UI 界面如下截图所示。**添加项目**按钮会打开一个模态表单，用户可以在其中输入新的购物项目：
- en: '![](img/B19818_11_08.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_08.png)'
- en: 'Figure 11.8: Shopping List UI'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8：购物清单 UI
- en: 'Now, we are ready to start the implementation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开始实施：
- en: 'Create a new React app called `shoppinglist` (select the **React** framework
    and **TypeScript** variant) and install dependencies by running the following
    commands:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的名为 `shoppinglist` 的 React 应用程序（选择 **React** 框架和 **TypeScript** 变体），并通过运行以下命令安装依赖项：
- en: '[PRE22]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the shopping list app with VS Code. Install MUI by typing the following
    command in the project root folder in PowerShell or any suitable terminal:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 VS Code 打开购物清单应用程序。在 PowerShell 或任何合适的终端中，在项目根目录下输入以下命令来安装 MUI：
- en: '[PRE23]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'MUI uses the *Roboto* font by default, but it is not provided out of the box.
    The easiest way to install Roboto fonts is by using Google Fonts. To use Roboto
    fonts, add the following line inside the `head` element of your `index.html` file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MUI 默认使用 *Roboto* 字体，但该字体并非直接提供。安装 Roboto 字体的最简单方法是使用 Google Fonts。要使用 Roboto
    字体，请将以下行添加到您的 `index.html` 文件的 `head` 元素内部：
- en: '[PRE24]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the `App.tsx` file and remove all the code inside the fragment (`<></>`).
    Also, remove unused code and imports. Now, your `App.tsx` file should look like
    this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.tsx` 文件并移除片段（`<></>`）内的所有代码。同时，移除未使用的代码和导入。现在，你的 `App.tsx` 文件应该看起来像这样：
- en: '[PRE25]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You should also see an empty page in the browser.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也应该在浏览器中看到一个空页面。
- en: 'MUI provides different layout components, and the basic layout component is
    the `Container`. This is used to center your content horizontally. You can specify
    the maximum width of a container using the `maxWidth` prop; the default value
    is `lg` (large), which is suitable for us. Let’s use the `Container` component
    in our `App.tsx` file, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MUI 提供了不同的布局组件，基本的布局组件是 `Container`。这个组件用于水平居中你的内容。你可以使用 `maxWidth` 属性指定容器的最大宽度；默认值是
    `lg`（大），这对于我们来说很合适。让我们在 `App.tsx` 文件中使用 `Container` 组件，如下所示：
- en: '[PRE26]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Remove the `index.css` file import from the `main.tsx` file so that we get
    full screen for our app. We also don’t want to use predefined styles from Vite:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `main.tsx` 文件中移除 `index.css` 文件导入，以便我们的应用获得全屏。我们也不希望使用 Vite 的预定义样式：
- en: '[PRE27]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we will use the MUI `AppBar` component to create the toolbar in our app.
    Import the `AppBar`, `ToolBar`, and `Typography` components into your `App.tsx`
    file. Also, import `useState` from React, which we will need later. The code is
    illustrated in the following snippet:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 MUI 的 `AppBar` 组件在我们的应用中创建工具栏。将 `AppBar`、`ToolBar` 和 `Typography`
    组件导入到你的 `App.tsx` 文件中。同时，导入 React 的 `useState`，我们稍后会用到。代码如下所示：
- en: '[PRE28]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Render the `AppBar` by adding the following code to your `App` component’s
    `return` statement. The `Typography` component provides predefined text sizes,
    and we will use this in our toolbar text. `variant` props can be used to define
    text size:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向 `App` 组件的 `return` 语句中添加以下代码来渲染 `AppBar`。`Typography` 组件提供了预定义的文本大小，我们将在工具栏文本中使用它。`variant`
    属性可以用来定义文本大小：
- en: '[PRE29]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Start your app. It should now look like this:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的应用。现在它应该看起来像这样：
- en: '![](img/B19818_11_09.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_11_09.png)'
- en: 'Figure 11.9: AppBar component'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9：AppBar 组件
- en: 'In the `App` component, we need one array state to save the shopping list items.
    One shopping list item contains two fields: `product` and `amount`. We have to
    create a type for the shopping items, `Item`, which we will also export because
    we need it in other components later:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App` 组件中，我们需要一个数组状态来保存购物清单项目。一个购物清单项目包含两个字段：`product` 和 `amount`。我们必须为购物项目创建一个类型
    `Item`，我们还将导出它，因为我们稍后需要在其他组件中使用它：
- en: '[PRE30]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we will create the state where we save our shopping items. Create a state
    called `items`, whose type is an array of `Item` types:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个状态来保存我们的购物项目。创建一个名为 `items` 的状态，其类型是 `Item` 类型的数组：
- en: '[PRE31]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, create a function that adds a new item to the `items` state. In the `addItem`
    function, we will use spread notation (`...`) to add a new item at the beginning
    of an existing array:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个函数来向 `items` 状态中添加新项目。在 `addItem` 函数中，我们将使用扩展运算符（`...`）在现有数组的开头添加一个新项目：
- en: '[PRE32]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We need to add a new component for adding shopping items. Create a new file
    called `AddItem.tsx` in the root folder of the app, and add the following code
    to your `AddItem.tsx` file. The `AddItem` component function receives `props`
    from its parent component. The code is illustrated in the following snippet. We
    will define the props type later:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一个新的组件来添加购物项目。在应用的根目录中创建一个名为 `AddItem.tsx` 的新文件，并将以下代码添加到你的 `AddItem.tsx`
    文件中。`AddItem` 组件函数从其父组件接收 `props`。代码如下所示。我们稍后会定义 props 类型：
- en: '[PRE33]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `AddItem` component will use the MUI modal dialog to collect data. In the
    form, we will add two input fields, `product` and `amount`, and a button that
    calls the `App` component’s `addItem` function. To be able to call the `addItem`
    function, which is in the `App` component, we have to pass it in `props` when
    rendering the `AddItem` component. Outside the modal `Dialog` component, we will
    add a button that opens the modal form where the user can enter a new shopping
    item. This button is the only visible element when the component is rendered initially.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AddItem` 组件将使用 MUI 模态对话框来收集数据。在表单中，我们将添加两个输入字段 `product` 和 `amount`，以及一个调用
    `App` 组件的 `addItem` 函数的按钮。为了能够调用位于 `App` 组件中的 `addItem` 函数，我们必须在渲染 `AddItem` 组件时通过
    `props` 传递它。在模态 `Dialog` 组件外部，我们将添加一个按钮，该按钮打开用户可以输入新购物项目的表单。当组件最初渲染时，这是唯一的可见元素。'
- en: The following steps describe the implementation of the modal form.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下步骤描述了模态形式的实现。
- en: 'We have to import the following MUI components for the modal form: `Dialog`,
    `DialogActions`, `DialogContent`, and `DialogTitle`. For the UI of the modal form,
    we require the following components: `Button` and `TextField`. Add the following
    imports to your `AddItem.tsx` file:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须导入以下 MUI 组件用于模态表单：`Dialog`、`DialogActions`、`DialogContent` 和 `DialogTitle`。对于模态表单的
    UI，我们需要以下组件：`Button` 和 `TextField`。将以下导入添加到你的 `AddItem.tsx` 文件中：
- en: '[PRE34]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `Dialog` component has one prop called `open`, and if the value is `true`,
    the dialog is visible. The default value of `open` props is `false`, and the dialog
    is hidden. We will declare one state called `open` and two functions to open and
    close the modal dialog. The default value of the `open` state is `false`. The
    `handleOpen` function sets the `open` state to `true`, and the `handleClose` function
    sets it to `false`. The code is illustrated in the following snippet:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Dialog` 组件有一个名为 `open` 的 prop，如果其值为 `true`，则对话框可见。`open` prop 的默认值是 `false`，对话框是隐藏的。我们将声明一个名为
    `open` 的状态和两个打开和关闭模态对话框的函数。`open` 状态的默认值是 `false`。`handleOpen` 函数将 `open` 状态设置为
    `true`，而 `handleClose` 函数将其设置为 `false`。以下代码片段展示了这一过程：'
- en: '[PRE35]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We will add `Dialog` and `Button` components inside the `return` statement.
    We have one button outside the dialog that will be visible when the component
    is rendered for the first time. When the button is pressed, it calls the `handleOpen`
    function, which opens the dialog. Inside the dialog, we have two buttons: one
    for canceling and one for adding a new item. The **Add** button calls the `addItem`
    function, which we will implement later. The code is illustrated in the following
    snippet:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 `return` 语句中添加 `Dialog` 和 `Button` 组件。当组件首次渲染时，我们将有一个按钮在外面可见。当按钮被按下时，它将调用
    `handleOpen` 函数，这将打开对话框。在对话框内部，我们有两个按钮：一个用于取消，一个用于添加新项目。**添加**按钮将调用我们稍后将要实现的 `addItem`
    函数。以下代码片段展示了这一过程：
- en: '[PRE36]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To collect data from a user, we have to declare one more state. This state
    is used to store a shopping item that the user enters, and its type is `Item`.
    We can import the `Item` type from the `App` component:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了收集用户数据，我们必须声明一个额外的状态。该状态用于存储用户输入的购物项目，其类型为 `Item`。我们可以从 `App` 组件导入 `Item`
    类型：
- en: '[PRE37]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following state to the `AddItem` component. The type of the state is
    `Item`, and we initialize it to an empty `item` object:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下状态添加到 `AddItem` 组件中。该状态类型为 `Item`，我们将其初始化为一个空的 `item` 对象：
- en: '[PRE38]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Inside the `DialogContent` component, we will add two inputs to collect data
    from a user. There, we will use the `TextField` MUI component that we have already
    imported. The `margin` prop is used to set the vertical spacing of text fields,
    and the `fullwidth` prop is used to make input take up the full width of its container.
    You can find all the props in the MUI documentation. The `value` props of the
    text fields must be the same as the state where we want to save the typed value.
    The `onChange` event listener saves the typed value to the `item` state when the
    user types something into the text fields. In the `product` field, the value is
    saved to the `item.product` property, and in the `amount` field, the value is
    saved to the `item.amount` property. The code is illustrated in the following
    snippet:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `DialogContent` 组件内部，我们将添加两个输入框以收集用户数据。在那里，我们将使用已经导入的 `TextField` MUI 组件。`margin`
    属性用于设置文本框的垂直间距，而 `fullwidth` 属性用于使输入框占据其容器全部宽度。你可以在 MUI 文档中找到所有属性。文本框的 `value`
    属性必须与我们想要保存输入值的 `item` 状态相同。当用户在文本框中输入内容时，`onChange` 事件监听器会将输入值保存到 `item` 状态中。在
    `product` 字段中，值保存到 `item.product` 属性中，在 `amount` 字段中，值保存到 `item.amount` 属性中。以下代码片段展示了这一过程：
- en: '[PRE39]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, we have to create a function that calls the `addItem` function that
    we receive in the props. The function takes a new shopping item as an argument.
    First, we define a type for the props. The `addItem` function that is passed from
    the `App` component accepts one argument of type `Item`, and the function doesn’t
    return anything. The type definition and prop typing look like the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须创建一个函数来调用我们通过 props 接收到的 `addItem` 函数。该函数接受一个新的购物项目作为参数。首先，我们定义 props
    的类型。从 `App` 组件传递的 `addItem` 函数接受一个类型为 `Item` 的参数，并且该函数不返回任何内容。类型定义和 prop 类型如下所示：
- en: '[PRE40]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The new shopping item is now stored in the `item` state and contains the values
    that the user typed in. Because we get the `addItem` function from the props,
    we can call it using the `props` keyword. We will also call the `handleClose`
    function, which closes the modal dialog. The code is illustrated in the following
    snippet:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的购物项目现在存储在 `item` 状态中，并包含用户输入的值。因为我们从 props 中获取了 `addItem` 函数，所以我们可以使用 `props`
    关键字调用它。我们还将调用 `handleClose` 函数，该函数关闭模态对话框。代码如下所示：
- en: '[PRE41]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Our `AddItem` component is now ready, and we have to import it into our `App.tsx`
    file and render it there. Add the following `import` statement to your `App.tsx`
    file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的 `AddItem` 组件现在已准备就绪，我们必须将其导入到 `App.tsx` 文件中并在那里渲染它。在您的 `App.tsx` 文件中添加以下
    `import` 语句：
- en: '[PRE42]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the `AddItem` component to the `return` statement in the `App.tsx` file.
    Pass the `addItem` function in a prop to the `AddItem` component, as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AddItem` 组件添加到 `App.tsx` 文件中的 `return` 语句中。将 `addItem` 函数作为 prop 传递给 `AddItem`
    组件，如下所示：
- en: '[PRE43]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, open your app in the browser and press the **ADD ITEM** button. You will
    see the modal form opening, and you can type in a new item, as illustrated in
    the following screenshot. The modal form is closed when you press the **ADD**
    button:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在浏览器中打开您的应用程序并按下 **添加项目** 按钮。您将看到模态表单打开，您可以输入一个新的项目，如图所示。当您按下 **添加** 按钮时，模态表单将关闭：
- en: '![](img/B19818_11_10.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_10.png)'
- en: 'Figure 11.10: Modal dialog'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10：模态对话框
- en: 'Next, we will add a list to the `App` component that shows our shopping items.
    For that, we will use the MUI `List`, `ListItem`, and `ListItemText` components.
    Import the components into the `App.tsx` file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将向 `App` 组件添加一个列表，显示我们的购物项目。为此，我们将使用 MUI 的 `List`、`ListItem` 和 `ListItemText`
    组件。将组件导入到 `App.tsx` 文件中：
- en: '[PRE44]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, we will render the `List` component. Inside that, we will use the `map`
    function to generate `ListItem` components. Each `ListItem` component should have
    a unique `key` prop, and we use a `divider` prop to get a divider at the end of
    each list item. We will display the `product` in the primary text and the `amount`
    in the secondary text of the `ListItemText` component. The code is illustrated
    in the following snippet:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将渲染 `List` 组件。在内部，我们将使用 `map` 函数生成 `ListItem` 组件。每个 `ListItem` 组件都应该有一个唯一的
    `key` 属性，我们使用 `divider` 属性在每个列表项的末尾获取分隔符。我们将在 `ListItemText` 组件的主要文本中显示 `product`，在次要文本中显示
    `amount`。代码如下所示：
- en: '[PRE45]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, the UI looks like this:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，UI 界面看起来是这样的：
- en: '![](img/B19818_11_11.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_11.png)'
- en: 'Figure 11.11: Shopping List'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11：购物列表
- en: 'The MUI `Button` component has three variants: `text`, `contained`, and `outlined`.
    The `text` variant is the default, and you can change it using the `variant` prop.
    For example, if we wanted to have an outlined **ADD ITEM** button, we could change
    the button’s `variant` prop in the `AddItem.ts` file, like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: MUI 的 `Button` 组件有三个变体：`text`、`contained` 和 `outlined`。`text` 变体是默认的，您可以使用 `variant`
    属性来更改它。例如，如果我们想要一个轮廓的 **添加项目** 按钮，我们可以在 `AddItem.ts` 文件中更改按钮的 `variant` 属性，如下所示：
- en: '[PRE46]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In this section, we learned how to get a consistent design in our React app
    by using the Material UI library. You can easily get a polished and professional
    look to your apps with MUI. Next, we will learn how to use React Router, a popular
    routing library.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何通过使用 Material UI 库在我们的 React 应用程序中获得一致的设计。您可以使用 MUI 轻松地为您的应用程序获得光鲜亮丽和专业的外观。接下来，我们将学习如何使用流行的路由库
    React Router。
- en: Managing routing with React Router
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React Router 管理路由
- en: There are a few good libraries available for routing in React. React frameworks
    such as Next.js and Remix provide built-in routing solutions. The most popular
    library, which we are using, is **React Router** ([https://github.com/ReactTraining/react-router](https://github.com/ReactTraining/react-router)).
    For web applications, React Router provides a package called `react-router-dom`.
    React Router uses **URL-based routing**, which means that we can define which
    component is rendered based on the URL.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中，有几个用于路由的好库可用。例如，Next.js 和 Remix 这样的 React 框架提供了内置的路由解决方案。我们使用最流行的库是
    **React Router** ([https://github.com/ReactTraining/react-router](https://github.com/ReactTraining/react-router))。对于
    Web 应用程序，React Router 提供了一个名为 `react-router-dom` 的包。React Router 使用 **基于 URL 的路由**，这意味着我们可以根据
    URL 定义要渲染哪个组件。
- en: 'To start using React Router, we have to install dependencies using the following
    command. In this book, we will use React Router version 6:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 React Router，我们必须使用以下命令安装依赖项。在本书中，我们将使用 React Router 版本 6：
- en: '[PRE47]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `react-router-dom` library provides components that are used to implement
    routing. `BrowserRouter` is the router for web-based applications. The `Route`
    component renders the defined component if the given locations match.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-dom`库提供了用于实现路由的组件。`BrowserRouter`是基于Web的应用程序的路由器。如果给定的位置匹配，`Route`组件会渲染定义的组件。'
- en: '[PRE48]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can use a `*` wildcard at the end of the `path` prop, like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`path`属性的末尾使用一个`*`通配符，如下所示：
- en: '[PRE50]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, it will match all endpoints under the contact – for example, `contact/mike`,
    `contact/john`, and so on.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它将匹配所有在联系下的端点——例如，`contact/mike`、`contact/john`等等。
- en: 'The `Routes` component wraps multiple `Route` components. The `Link` component
    provides navigation to your application. The following example shows the `Contact`
    link and navigates to the `/contact` endpoint when the link is clicked:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`Routes`组件包裹多个`Route`组件。`Link`组件提供应用内的导航。以下示例显示了`Contact`链接，并在点击链接时导航到`/contact`端点：'
- en: '[PRE51]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Let’s see how we can use these components in practice:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何在实践中使用这些组件：
- en: 'Create a new React app called `routerapp` using Vite, selecting the **React**
    framework and the **TypeScript** variant. Move to your project folder and install
    dependencies. Also install the `react-router-dom` library:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Vite创建一个名为`routerapp`的新React应用，选择**React**框架和**TypeScript**变体。移动到你的项目文件夹并安装依赖项。还要安装`react-router-dom`库：
- en: '[PRE52]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open the `src` folder with VS Code and open the `App.tsx` file in the editor
    view. Import components from the `react-router-dom` package and remove extra code
    from the `return` statement, along with unused imports. After these modifications,
    your `App.tsx` source code should look like this:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用VS Code打开`src`文件夹，并在编辑视图中打开`App.tsx`文件。从`react-router-dom`包中导入组件，并从`return`语句中删除额外的代码以及未使用的导入。经过这些修改后，你的`App.tsx`源代码应该看起来像这样：
- en: '[PRE53]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Let’s first create two simple components that we can use in routing. Create
    two new files, `Home.tsx` and `Contact.tsx`, in the application `src` folder.
    Then, add headers to the `return` statements to show the name of the component.
    The code of the components looks like this:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建两个简单的组件，我们可以在路由中使用它们。在应用的`src`文件夹中创建两个新文件，`Home.tsx`和`Contact.tsx`。然后，在`return`语句中添加标题以显示组件的名称。组件的代码如下所示：
- en: '[PRE54]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Open the `App.tsx` file, and then add a router that allows us to navigate between
    the components, as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.tsx`文件，然后添加一个允许我们在组件之间导航的路由器，如下所示：
- en: '[PRE55]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, when you start the app, you will see the links and the `Home` component,
    which is shown in the root endpoint (`localhost:5173`), as defined in the first
    `Route` component. You can see a representation of this in the following screenshot:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你启动应用时，你会看到链接和`Home`组件，它显示在根端点（`localhost:5173`），这是在第一个`Route`组件中定义的。你可以在下面的屏幕截图中看到这个表示：
- en: '![](img/B19818_11_12.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_12.png)'
- en: 'Figure 11.12: React Router'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12：React Router
- en: 'When you click the **Contact** link, the `Contact` component is rendered, as
    illustrated here:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击**联系**链接时，`Contact`组件会被渲染，如下所示：
- en: '![](img/B19818_11_13.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_11_13.png)'
- en: 'Figure 11.13: React Router (continued)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.13：React Router（继续）
- en: 'You can create a `PageNotFound` route by using a `*` wildcard at the `path`
    prop. In the following example, if any other route doesn’t match, the last one
    is used. First, create a component to show when a page is not found:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在`path`属性中使用`*`通配符来创建一个`PageNotFound`路由。在以下示例中，如果任何其他路由不匹配，则使用最后一个路由。首先，创建一个组件来显示页面未找到的情况：
- en: '[PRE56]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, import the `PageNotFound` component into the `App` component, and create
    a new route:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`PageNotFound`组件导入到`App`组件中，并创建一个新的路由：
- en: '[PRE57]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You can also have nested routes, such as the ones shown in the next example.
    Nested routing means that different parts of the app can have their own routing
    configuration. In the following example, `Contact` is the parent route, and it
    has two child routes:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以有嵌套路由，如下一个示例所示。嵌套路由意味着应用的不同部分可以有自己的路由配置。在以下示例中，`Contact`是父路由，它有两个子路由：
- en: '[PRE58]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You can use a `useRoutes()` hook to declare routes using JavaScript objects
    instead of React elements, but we will not cover that in this book. You can find
    more information about hooks in the React Router documentation:[https://reactrouter.com/en/main/start/overview](https://reactrouter.com/en/main/start/overview).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`useRoutes()`钩子使用JavaScript对象而不是React元素来声明路由，但本书不会涉及这一点。你可以在React Router文档中找到有关钩子的更多信息：[https://reactrouter.com/en/main/start/overview](https://reactrouter.com/en/main/start/overview)。
- en: So far, you have learned how to install and use a variety of third-party components
    with React. These skills will be required in the following chapters when we start
    to build our frontend.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何使用React安装和使用各种第三方组件。当我们开始构建前端时，这些技能将在接下来的章节中是必需的。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use third-party React components. We familiarized
    ourselves with several components that we will use in our frontend. `ag-grid`
    is a data grid component with built-in features like sorting, paging, and filtering.
    MUI is a component library that provides multiple UI components that implement
    Google’s Material Design language. We also learned how to use React Router for
    routing in React applications.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用第三方React组件。我们熟悉了几个将在我们的前端项目中使用的组件。`ag-grid`是一个具有内置功能如排序、分页和过滤的数据网格组件。MUI是一个提供多个实现谷歌Material
    Design语言的UI组件的组件库。我们还学习了如何使用React Router在React应用程序中进行路由。
- en: In the next chapter, we will create an environment to develop the frontend for
    our existing car backend.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个用于开发现有汽车后端前端的环境。
- en: Questions
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can you find components for React?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何找到React的组件？
- en: How should you install components?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何安装组件？
- en: How can you use the `ag-grid` component?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用`ag-grid`组件？
- en: How can you use the MUI component library?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用MUI组件库？
- en: How can you implement routing in a React application?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在React应用程序中实现路由？
- en: Further reading
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are some resources for learning about React:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些关于学习React的资源：
- en: '*Awesome React*, a great resource for finding React libraries and components
    ([https://github.com/enaqx/awesome-react)](https://github.com/enaqx/awesome-react))'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Awesome React*，一个寻找React库和组件的绝佳资源 ([https://github.com/enaqx/awesome-react](https://github.com/enaqx/awesome-react))'
- en: '*The Top React Component Libraries that are Worth Trying*, by Technostacks
    ([https://technostacks.com/blog/react-component-libraries/)](https://technostacks.com/blog/react-component-libraries/)
    )'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*值得尝试的顶级React组件库*，由Technostacks提供 ([https://technostacks.com/blog/react-component-libraries/](https://technostacks.com/blog/react-component-libraries/))'
- en: Learn more on Discord
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的Discord社区——在那里你可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](Chapter_11.xhtml)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](Chapter_11.xhtml)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10796108009382640.png)'
