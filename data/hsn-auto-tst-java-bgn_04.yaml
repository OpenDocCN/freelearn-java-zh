- en: Building Blocks for Java Programs &#x2013; Loops and Conditions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java程序的基础块——循环和条件
- en: Loops and conditions are the building blocks of Java programs. This chapter
    will help us understand the important loops and conditions through examples. Learning
    these loops and conditions in Java will make writing code easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 循环和条件是Java程序的基础。本章将通过示例帮助我们理解重要的循环和条件。在Java中学习这些循环和条件将使编写代码变得更加容易。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The for loop
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for循环
- en: The if...else condition
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: if...else条件
- en: The while loop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前的while循环
- en: Nested loops
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: The for loop
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前的for循环
- en: 'Let''s see how the `for` loop works. The `for` loop is one of the most commonly
    used loops in Java programs, and it it is very important to understand how it
    works internally. So, let''s say we want to print the numbers from 1 to 100 using
    the `for`loop. For the syntax to execute the numbers from 1 to 100 in a sequence
    and to write that in a `for` loop, we will simply write:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`for`循环是如何工作的。`for`循环是Java程序中最常用的循环之一，了解它是如何内部工作的非常重要。所以，假设我们想要使用`for`循环打印从1到100的数字。为了在`for`循环中按顺序执行数字1到100并写入它，我们将简单地写下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since we want to print `0`, `1`, `2`, `3`, we use `i++`. This means for every
    loop, it increments only by  `1`. And while looping, each time, it also checks
    whether the preceding condition is satisfied. So, if `1` is less than `100`, it
    goes inside; if `2` is less than `100`, it goes inside. Until this condition is
    satisfied, it will keep on looping. When the value of `i` reaches `100`, `100` is
    less than `100`, which is false. At that time, it terminates the loop and comes
    out of it. We will use a basic example here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要打印`0`、`1`、`2`、`3`，我们使用`i++`。这意味着对于每个循环，它只增加`1`。在循环过程中，每次它也会检查前面的条件是否满足。所以，如果`1`小于`100`，它会进入循环；如果`2`小于`100`，它会进入循环。直到这个条件满足，它将一直循环。当`i`的值达到`100`时，`100`小于`100`，这是假的。那时，它将终止循环并退出。这里我们将使用一个基本示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run test cases in debug mode in the IDE, double-click at the location shown
    in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在IDE中以调试模式运行测试用例，请双击以下屏幕截图所示的位置：
- en: '![](img/8aaee5c9-6a2c-43ac-aa74-c02f5b8cb927.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8aaee5c9-6a2c-43ac-aa74-c02f5b8cb927.png)'
- en: Line from which the debugging begins
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 调试开始的行
- en: 'When you see the blue icon, run that in the debug mode by clicking the insects-like
    symbol. It will ask you to launch in debug mode. Just click on Save to do so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到蓝色图标时，通过点击类似昆虫的符号在调试模式下运行它。它将要求你在调试模式下启动。只需点击保存即可：
- en: '![](img/b08a7a2c-5824-45ab-b87f-1e0a39473d1b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b08a7a2c-5824-45ab-b87f-1e0a39473d1b.png)'
- en: Debug icon at the top of the editor
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器顶部的调试图标
- en: 'You will see all the variable values here. Step by step, we''ll go inside the
    loop, and will execute the next step of the program:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在这里看到所有的变量值。一步一步地，我们将进入循环，并执行程序的下一步：
- en: '![](img/efed05a3-dcc2-44de-8712-6fa2acd0e277.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/efed05a3-dcc2-44de-8712-6fa2acd0e277.png)'
- en: Variable value while debugging
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 调试时的变量值
- en: 'Finally, when it reaches the value `4`, and is incremented by `1` again, it
    is `5`. Note that it comes out of the loop without going inside that after the
    value becomes `5`. So, that means the condition is no longer satisfied and the
    loop will run five times. The output is shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当它达到值`4`，并且再次增加`1`后，它变成了`5`。注意，它在值变成`5`后没有进入循环，就退出了。这意味着条件不再满足，循环将运行五次。输出显示在下面的屏幕截图中：
- en: '![](img/0142eecc-269f-461a-9c7d-bfb6ce86e060.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0142eecc-269f-461a-9c7d-bfb6ce86e060.png)'
- en: Final output as per the code
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码的最终输出
- en: So, that's how the `for` loop works.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是`for`循环的工作方式。
- en: 'Now, if we set the condition to the following, it will not go inside the `for` loop,
    even for the first time since, the condition is false.:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们把条件设置为以下内容，它将不会进入`for`循环，即使是第一次，因为条件是假的：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On running the preceding condition in in the debug mode, the complete loop is
    skipped,and nothing is seen in the output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下运行前面的条件时，整个循环将被跳过，输出中不会看到任何内容。
- en: 'Let''s see another example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个例子：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is how the `for` loop works internally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`for`循环在内部是如何工作的。
- en: In the next section, we will learn about the `if...else` and `do...while` loops.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习`if...else`和`do...while`循环。
- en: if...else condition
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if...else条件
- en: Before we learn the `while` and `do...while` loops, we will discuss the `if`
    condition in this section. In a Java program, when the `if` conditional statement
    is used, the statement in the `if` block is executed only if the condition is
    satisfied. Otherwise the statement from `else` block is run. Also this execution
    is just takes place once. In a `for` loop, a variable is initiated and the loop
    runs till the condition is satisfied.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习`while`和`do...while`循环之前，我们将在本节中讨论`if`条件。在Java程序中，当使用`if`条件语句时，只有当条件满足时，`if`块中的语句才会执行。否则，将运行`else`块中的语句。此外，这种执行只发生一次。在`for`循环中，一个变量被初始化，循环一直运行，直到条件满足。
- en: 'However, in the `if` case, it will not keep on looping. It will just go inside
    the loop once the `if` condition is satisfied; otherwise, it will go into the
    `else` block. So, control will execute the statements present in this `else` block,
    as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`if`的情况下，它不会一直循环。一旦满足`if`条件，它将进入循环一次；否则，它将进入`else`块。因此，控制将执行此`else`块中的语句，如下面的截图所示：
- en: '![](img/4c8a86a1-3c08-4821-861f-825c7fcc5da4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c8a86a1-3c08-4821-861f-825c7fcc5da4.png)'
- en: Output of the if...else condition as per the code
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码显示的if...else条件输出
- en: But all this happens only once, unlike the `for` loop, where a condition is
    satisfied until it goes back and executes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但所有这些只发生一次，与`for`循环不同，在`for`循环中，条件满足直到它返回并执行。
- en: 'Let''s take a look at the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot displays those errors:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了这些错误：
- en: '![](img/fb0e677a-3ca2-4043-b08f-174fbb5b5db0.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb0e677a-3ca2-4043-b08f-174fbb5b5db0.png)'
- en: Quick fixes drop down with suggestions to correct the code error
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 快速修复下拉菜单提供修正代码错误的建议
- en: 'The first error is to remove the including condition, which can be ignored.
    On running the preceding program, you will see the output as `success` because
    the condition `5` greater than `2` that went inside is true:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个错误是删除包含条件，这可以忽略。运行前面的程序，你会看到输出为`success`，因为进入的是条件`5`大于`2`为真：
- en: '![](img/f7022ae4-60cb-484f-ba03-1aeef6950efe.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7022ae4-60cb-484f-ba03-1aeef6950efe.png)'
- en: Output displays success as per the code
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示成功，如代码所示
- en: If we change the condition and make `5` less than `2`, making the condition
    false, it will skip to the `else` block and execute the statement present in `else`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更改条件并使`5`小于`2`，使条件为假，它将跳转到`else`块并执行`else`块中的语句。
- en: '![](img/ff440aae-1b9c-4108-a23e-5743b9c68173.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff440aae-1b9c-4108-a23e-5743b9c68173.png)'
- en: code to receive fail as the output
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码以输出失败
- en: 'This time the output should be `fail`, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这次输出应该是`fail`，如下面的截图所示：
- en: '![](img/08efbbda-6a40-4a3c-94d0-21201524e20c.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08efbbda-6a40-4a3c-94d0-21201524e20c.png)'
- en: Output displays success as per the code
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示成功，如代码所示
- en: This is how the `if` condition works.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`if`条件的工作方式。
- en: 'Note that if there is only a single line in your block, then you can get rid
    of these braces, because it eventually assumes that the next line will be executed
    if the condition is true. This means if you just have a single line in your block,
    then you can get rid of the braces. But if you want to have more than one statement,
    if your condition is true, then make sure you write that in braces to avoid conflict.
    If you do not specify the braces, it will still print as `success`, as shown in
    the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你的块中只有一行，那么你可以去掉这些括号，因为最终它假设如果条件为真，则将执行下一行。这意味着如果你在你的块中只有一行，那么你可以去掉括号。但如果你想要有多个语句，如果你的条件为真，那么确保你在括号中写出这些语句以避免冲突。如果你没有指定括号，它仍然会打印为`success`，如下面的截图所示：
- en: '![](img/2c1551ea-22ed-4bd1-bee1-09fa506a241d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c1551ea-22ed-4bd1-bee1-09fa506a241d.png)'
- en: Output displays success after modifying the code
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码后输出显示成功
- en: Here, `5` is greater than `2`. On running this, the program will run without
    braces.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`5`大于`2`。运行这个程序，程序将不使用括号运行。
- en: 'Now, on adding one more statement, say `"second step"`, it throws an error,
    as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在添加一个额外的语句，比如`"second step"`，它会抛出一个错误，如下面的截图所示：
- en: '![](img/5f56dfe4-3c35-4def-9ada-6f9c46bc7967.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f56dfe4-3c35-4def-9ada-6f9c46bc7967.png)'
- en: Error is flagged with a cross mark besides the line number, showing syntax error
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 错误会在行号旁边的交叉标记中标记，显示语法错误
- en: Notice the syntax error on the token in the preceding screenshot. Either you
    should keep a brace or you should avoid this step. To get rid of that, we will
    just keep the entire block in the brace. In this way, the error goes away.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前一个截图中的语法错误。要么你应该保留一个括号，要么你应该避免这个步骤。为了消除这个错误，我们将整个块保留在括号中。这样，错误就会消失。
- en: Bringing the if...else condition in the for loop
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`for`循环中引入`if...else`条件
- en: 'Now, let us bring the `if...else` condition into the `for` loop. Let''s add
    the following to our code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`if...else`条件引入`for`循环。让我们在我们的代码中添加以下内容：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since there is only one statement here, we won't be writing it in the braces. Now,
    let's analyze this. The values will begin to enter the `for` loop from zero until
    the value is less than `10`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这里只有一个语句，我们不会在括号中写它。现在，让我们分析一下。值将从零开始进入`for`循环，直到值小于`10`。
- en: 'On entering the `for` loop, it will check if the first value, `0`, is equal
    to `8`. Since it is not equal, it will display `"I didnot find"`. Now, for the
    second time, `2` will be added to `0` (as per our set condition). Notice that
    this new value is still not equal to `8`; hence the output will remain same for values
    `0`, `2`, `4`, and `6`. Next, when `8` goes inside the `for` loop, the condition
    is satisfied and the `" 8 is displayed"` statement is displayed as the output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`for`循环时，它会检查第一个值`0`是否等于`8`。由于它不相等，它会显示`"I didnot find"`。现在，第二次，将`2`加到`0`上（按照我们设定的条件）。请注意，这个新值仍然不等于`8`；因此，对于`0`、`2`、`4`和`6`这些值，输出将保持不变。接下来，当`8`进入`for`循环时，条件得到满足，并显示输出`"
    8 is displayed"`：
- en: '![](img/8c71b43a-21c1-4dd2-a8a9-2f73d9d39404.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c71b43a-21c1-4dd2-a8a9-2f73d9d39404.png)'
- en: '"8 is displayed" and "I didnot find" is displayed as the output'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示为`"8 is displayed"`和`"I didnot find"`。
- en: Now, if we say `i=9`, it will never be printed because the condition we set
    is `i+2`, which will be an incremental even number. This means that the condition
    is not satisfied and the very next step after the `if` condition is not executed.
    Thus, we can say that, if a condition is true, only then will it be executed;
    if not, the conditions or the statements present in the `else` block will be executed.
    And when you run this, you always get the output as `"I did not find"`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们说`i=9`，它将永远不会被打印，因为我们设定的条件是`i+2`，这将是一个递增的偶数。这意味着条件没有得到满足，`if`条件之后的下一个步骤不会被执行。因此，我们可以这样说，如果条件为真，那么它才会被执行；如果不为真，则执行`else`块中的条件或语句。当你运行它时，你总是得到输出`"I
    did not find"`。
- en: 'However, if we write the following syntax, we will get the output as `"9 is
    displayed"`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们写下以下语法，我们将得到输出为`"9 is displayed"`：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is how the `if...else` condition works using the `for` loop. In the next
    section, we will learn about `for` loops in detail.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`if...else`条件在`for`循环中工作的方式。在下一节中，我们将详细了解`for`循环。
- en: The while loop
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`while`循环'
- en: 'In this section, we will learn the `while` loop in detail. First, create a
    new class. Now let us see how we can utilize this `while` loop when programming
    our code. Let''s say we want to print the numbers from 1 to 10, sequentially.
    How do we print this using the `while` loop? The basic syntax of the `while` loop
    is:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细了解`while`循环。首先，创建一个新的类。现在让我们看看我们如何在编写代码时利用这个`while`循环。假设我们想要按顺序打印从1到10的数字。我们如何使用`while`循环来打印这些数字？`while`循环的基本语法是：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And here, if the Boolean expression returns `true`, only then will the control
    go inside this loop, whereas if the expression returns `false`, then the control
    will not go inside the loop. That''s the basic simple concept you have with the
    `while` loop. Now let''s say we want to bring in the numbers from 1 to 10\. For
    this, we will write the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 而在这里，如果布尔表达式返回`true`，则控制才会进入这个循环，而如果表达式返回`false`，则控制将不会进入循环。这就是你与`while`循环的基本简单概念。现在让我们假设我们想要从1到10引入数字。为此，我们将编写以下代码：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, in the preceding code example, we can see that that the given
    condition is true. So, it goes inside the loop and prints the value of `i`. This
    loop keeps on executing until the expression evaluates to false. As per our example,
    the condition will always be true; thus, it will go to the infinite loop and print
    zero.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在前面的代码示例中，我们可以看到给定的条件是真实的。因此，它进入循环并打印`i`的值。这个循环会一直执行，直到表达式评估为`false`。根据我们的例子，条件始终为真；因此，它会进入无限循环并打印零。
- en: 'This is how the `while` loop works. Unless the condition becomes false in this
    argument, this loop will never stop executing. Now, what if we increment after
    printing the variable? Let''s see what happens when we do that:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `while` 循环的工作方式。除非这个参数中的条件变为假，否则这个循环永远不会停止执行。现在，如果我们打印变量后递增会发生什么？让我们看看我们这样做会发生什么：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will be as that shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如以下截图所示：
- en: '![](img/a85aed48-a67a-4728-ac07-197732c9b00a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a85aed48-a67a-4728-ac07-197732c9b00a.png)'
- en: Output of the while condition as per the code
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码的 `while` 条件输出
- en: 'If we use the following condition:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用以下条件：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The new output will be:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 新的输出将是：
- en: '![](img/e3cd184f-cdc3-4586-9c75-a5b9d32a5402.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3cd184f-cdc3-4586-9c75-a5b9d32a5402.png)'
- en: Output of the while condition after modifying the code
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码后的 `while` 条件输出
- en: 'Similarly, you you can reverse the condition, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你也可以反转条件，如下所示：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output will go to infinite, since the numbers keep on increasing because
    `10` is greater than `0`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将无限循环，因为数字一直在增加，因为 `10` 大于 `0`。
- en: 'If we use the decrement condition, it will keep on decreasing until the condition
    becomes false. After that, it will exit the loop, as shown in the following code
    example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用递减条件，它将一直递减，直到条件变为假。之后，它将退出循环，如下面的代码示例所示：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output for the preceding code example will be:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码示例的输出将是：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So, this is how we can use the `while` loop syntax in our Java program. In the
    next section, we will see how to work on the `do...while` loop.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是我们如何在 Java 程序中使用 `while` 循环语法。在下一节中，我们将看到如何处理 `do...while` 循环。
- en: The do...while loop
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`do...while` 循环'
- en: 'The syntax of the `do...while` loop is:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while` 循环的语法是：'
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s consider the following example, where we want to print the numbers from
    20 to 30:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例，其中我们想要打印从 20 到 30 的数字：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code will print `20`, `21`, `22` until `29` as the output. Thus,
    first it executes and then it compares.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将输出 `20`、`21`、`22` 直到 `29`。因此，首先它执行，然后比较。
- en: The basic difference between the `while` and `do...while` loop is that the `while`
    loop will not execute without evaluating the Boolean expression, and the `do...while`
    loop first executes for one loop and then evaluates to run for more loops.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环和 `do...while` 循环的基本区别在于，`while` 循环在没有评估布尔表达式的情况下不会执行，而 `do...while`
    循环首先执行一个循环，然后评估是否运行更多循环。'
- en: 'Let''s consider the following example, where the value of the variable is greater
    than `30`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例，其中变量的值大于 `30`：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the output will be `20`, while the script after that will be terminated because,
    as mentioned earlier in this section, in the `do...while` loop, execution of one
    loop is guaranteed. If you run same logic in this `while` loop, even for the first
    time, it will not run.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，输出将是 `20`，而随后的脚本将终止，因为，如本节前面所述，在 `do...while` 循环中，保证执行一个循环。如果你在这个 `while`
    循环中运行相同的逻辑，即使是第一次，它也不会执行。
- en: So, in the next section, we will try to do one exercise based on the `for` loop,
    the `while` loop, the `do...while` loop, and the `if` condition. These programs
    will be good hands-on learning for understanding the loops.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在下一节中，我们将尝试基于 `for` 循环、`while` 循环、`do...while` 循环和 `if` 条件的练习。这些程序将是非常好的动手学习，有助于理解循环。
- en: In the next section, we will learn how the nested loops work.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习嵌套循环是如何工作的。
- en: Nested loops
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: 'This is one of the most important concepts. All the programming logic comes
    from the nested loops. If you can grasp the concept behind it, it will be easy
    for you to solve the programming examples in Java. So, first of all, I will write
    one syntax:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个最重要的概念之一。所有的编程逻辑都来自嵌套循环。如果你能掌握其背后的概念，那么你将很容易解决 Java 中的编程示例。所以，首先，我将写一个语法：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding syntax means that the loop will run four times. What if we write
    one more `for` loop inside the preceding block? The concept of implementing a
    loop within a loop is called **nested loops**:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法表示循环将运行四次。如果我们再在上述块中写一个 `for` 循环会怎样？在循环中实现循环的概念称为 **嵌套循环**：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Thus, one looping system is completed when we finish the preceding iteration
    once. To finish one outer loop, we have to complete all four inner loops. This
    means that we will have to run this inner loop 16 times (four times four) to just
    finish this outer loop four times.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们完成前一个迭代一次时，一个循环系统就完成了。为了完成一个外层循环，我们必须完成所有四个内层循环。这意味着我们将不得不运行这个内层循环 16
    次（四次乘以四次）才能完成这个外层循环四次。
- en: 'The output is shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![](img/ae3324e7-541a-43bf-8fc4-d712bd9f3431.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ae3324e7-541a-43bf-8fc4-d712bd9f3431.png)'
- en: Output of the nested loops as per the code
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码输出的嵌套循环
- en: Further ahead, the concept of `for` loops will be used more often. To understand
    the concept of `for` loops, let's try to solve a few examples.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步学习，`for`循环的概念将被更频繁地使用。为了理解`for`循环的概念，让我们尝试解决几个示例。
- en: Example 1
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 1
- en: 'Write the code for the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下输出的代码：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As we can observe in the output, for every line, one number is decrementing.
    We will look at the concept of the outer loop and inner loop here. The code will
    be as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从输出中观察到的，对于每一行，一个数字在递减。在这里，我们将探讨外循环和内循环的概念。代码如下：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Example 2
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 2
- en: 'Write the code for the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下输出的代码：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As you can see, the output used in this example is the reverse of the output
    from first example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，本例中使用的输出与第一个示例的输出相反：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Example 3
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 3
- en: In a similar fashion, there is one more program, called sorting numbers
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，还有一个名为排序数字的程序
- en: 'Write the code for the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以下输出的代码：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The code for the preceding output will be:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出的代码如下：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: With the use of easy examples, we learned how to use the `if...else` condition
    in Java. We also saw how to use the `for` loop and the `while` loops to get the
    desired outputs. Moving further ahead, we learned how to use the nested `for`
    loops to get the outputs in certain patterns.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用简单的示例，我们学习了如何在Java中使用`if...else`条件语句。我们还看到了如何使用`for`循环和`while`循环来获取所需的输出。进一步学习，我们学习了如何使用嵌套`for`循环以特定模式获取输出。
- en: In the next chapter, we will go through some important concepts, such as interfaces,
    how they work, and their usage in Java. We will also discuss inheritance using
    a practical example.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些重要概念，例如接口、它们的工作原理以及在Java中的使用。我们还将通过实际示例讨论继承。
