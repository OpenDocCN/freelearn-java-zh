- en: Displaying Information Using Web Pages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网页显示信息
- en: In this chapter, we will learn about template engines and how they are integrated
    and used in Spring Boot 2\. After that, we will cover how Thymeleaf, a very commonly
    used template engine, is used to build web pages displaying dynamic data from
    an
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习模板引擎以及它们如何在Spring Boot 2中集成和使用。之后，我们将介绍Thymeleaf，这是一个非常常用的模板引擎，它被用来构建显示动态数据的网页。
- en: application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序。
- en: A template engine is a composition framework, which allows us to integrate dynamic
    information and building blocks, allowing developers to create page fragments
    independently. These tiles are then assembled together when running the application
    or rendering the page. Spring is well integrated with template engines such as
    Thymeleaf, Groovy Templates, Freemarker, and Mustache. However, we will be focusing
    on Thymeleaf, as it is commonly used and allows us to comfortably work with HTML
    pages used for web applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模板引擎是一个组合框架，它允许我们集成动态信息和构建块，使开发者能够独立创建页面片段。这些片段在应用程序运行或页面渲染时被组装在一起。Spring与Thymeleaf、Groovy
    Templates、Freemarker和Mustache等模板引擎很好地集成。然而，我们将专注于Thymeleaf，因为它被广泛使用，并允许我们舒适地处理用于Web应用程序的HTML页面。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Identify how the Thymeleaf template engine works
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别Thymeleaf模板引擎的工作原理
- en: Explain the basic syntax of a template
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释模板的基本语法
- en: Define the most important elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义最重要的元素
- en: Explain how to iterate through lists and conditionally show parts of a page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释如何遍历列表并条件性地显示页面的一部分
- en: Build web pages using Thymeleaf to display dynamic data from an application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Thymeleaf构建网页以显示应用程序的动态数据
- en: HTML Templating with Thymeleaf
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Thymeleaf进行HTML模板化
- en: We have already been discussing template engines in the previous chapter. We
    will now take a closer look at how they work.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中讨论了模板引擎。现在我们将更详细地了解它们是如何工作的。
- en: '**Thymeleaf** is a server-side template engine that became very popular for
    Spring Web MVC applications. It''s currently available in its third major version.
    But Thymeleaf goes far beyond the scope of regular web applications. It is also
    used to generate other formats, such as PDF or XML. It''s even possible to incorporate
    the template engine into an application to not only be used by developers but
    also end users of an application.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thymeleaf** 是一个服务器端模板引擎，它因Spring Web MVC应用程序而变得非常流行。它目前处于第三个主要版本。但Thymeleaf的应用范围远超常规的Web应用程序。它还被用来生成其他格式，如PDF或XML。甚至可以将模板引擎集成到应用程序中，使其不仅被开发者使用，还可以被应用程序的最终用户使用。'
- en: What makes Thymeleaf special is the ability to write natural HTML templates
    that can be displayed in a web browser without the need to run the application.
    This allows for very short development cycles when designing the UI of an application.
    The downside of this is that you may have to add some additional HTML attributes
    only for the sake of displaying the template at design time. You can however decide
    when the additional attributes are required and when you can just leave them out.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf之所以特别，在于它能够编写自然的HTML模板，这些模板可以在网页浏览器中显示，而无需运行应用程序。这允许在设计应用程序的用户界面时拥有非常短的开发周期。但缺点是，你可能必须添加一些额外的HTML属性，仅为了在设计时显示模板。然而，你可以决定何时需要这些额外的属性，何时可以省略它们。
- en: Other popular template engines are **Java Server Pages** (**JSP**) and **FreeMarker**.
    However, these alternatives don't allow for an easy template development without
    a running engine.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其他流行的模板引擎是**Java服务器页面**（**JSP**）和**FreeMarker**。然而，这些替代品在没有运行引擎的情况下，无法轻松地进行模板开发。
- en: HTML is used by a web browser to render a page. It mainly consists of tags that
    that are enclosed in angle brackets (for example `<div>`). There is a starting
    and an ending tag (`<div>...</div>`). The tags may also contain additional attributes
    (`div class="important">`, where class is the attribute).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网页浏览器使用HTML来渲染页面。它主要由角括号内的标签组成（例如 `<div>`）。每个标签都有一个开始标签和一个结束标签（`<div>...</div>`）。标签还可以包含额外的属性（例如
    `div class="important">`，其中class是属性）。
- en: Templating Engine
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板引擎
- en: 'The following diagram shows a typical relationship among various components:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了各种组件之间典型的关系：
- en: '![](img/7bfc395b-66c8-4126-989a-45c5e33d40ea.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7bfc395b-66c8-4126-989a-45c5e33d40ea.png)'
- en: 'In the case of Thymeleaf, the templates are written using regular XML, XHTML,
    or HTML5 files. These files can be previewed in a browser without the need for
    a running template engine. For Thymeleaf to do its work, you add special attributes
    to the HTML, tags that usually start with `th`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Thymeleaf 的情况下，模板是用常规的 XML、XHTML 或 HTML5 文件编写的。这些文件可以在浏览器中预览，无需运行模板引擎。为了让
    Thymeleaf 执行其工作，你需要在 HTML 中添加特殊属性，这些标签通常以 `th` 开头：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Integrating Thymeleaf Into a Spring Boot Application
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Thymeleaf 集成到 Spring Boot 应用程序中
- en: 'To integration Thymeleaf in a Spring Boot application, you add the following
    dependency to your Maven `pom.xml` file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Spring Boot 应用程序中集成 Thymeleaf，你需要在你的 Maven `pom.xml` 文件中添加以下依赖项：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will include Thymeleaf Version 3 in your project. Since Spring Boot is
    taking care of the configuration for you, it expects the templates in the `src/main/resources/templates`
    folder. When you later return the name of a view from your controller method,
    Spring looks in this folder for a file with the name of the view and a .html extension.
    For example, a view named welcome is expected to be in the `src/main/resources/templates/welcome.html`
    file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的项目中包含 Thymeleaf 版本 3。由于 Spring Boot 正在为你处理配置，它期望模板位于 `src/main/resources/templates`
    文件夹中。当你从控制器方法返回视图名称时，Spring 会在这个文件夹中查找一个具有视图名称和 .html 扩展名的文件。例如，名为 welcome 的视图应位于
    `src/main/resources/templates/welcome.html` 文件中。
- en: A Basic Thymeleaf Template
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个基本的 Thymeleaf 模板
- en: 'The following code is showing a simple Thymeleaf template:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了一个简单的 Thymeleaf 模板：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The second part is what makes this file a template:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的第二部分是使其成为模板的部分：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This defines what is called a namespace for Thymeleaf and enables the use of
    `th:` as a prefix to mark attributes that are specific to Thymeleaf.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了 Thymeleaf 的命名空间，并允许使用 `th:` 作为前缀来标记特定于 Thymeleaf 的属性。
- en: You will find a lot of these attributes, directives, and expressions in a template.
    They allow you to output content of the model, conditionally display parts of
    the view, iterate over lists, or execute functions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在模板中找到许多这些属性、指令和表达式。它们允许你输出模型的内容，有条件地显示视图的部分，遍历列表或执行函数。
- en: Externalizing Text
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部化文本
- en: In some cases, you may want to have text outside your template. This is called
    **externalized text fragments**. You are using Java properties files to store
    these fragments. In the case of a Spring Boot application, you create a file called
    `messages.properties` in the `src/main/resources` folder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能希望在模板外有文本。这被称为 **外部化文本片段**。你使用 Java 属性文件来存储这些片段。在 Spring Boot 应用程序的情况下，你在
    `src/main/resources` 文件夹中创建一个名为 `messages.properties` 的文件。
- en: 'Since this is a regular properties file, you add your text as properties:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个常规的属性文件，你将文本作为属性添加：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the Thymeleaf template, you insert the text by using a `#{...}` expression:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Thymeleaf 模板中，你通过使用 `#{...}` 表达式插入文本：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will find the complete sample in the code repository.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在代码仓库中找到完整的示例。
- en: It is possible to include placeholder or parameters in an externalized string.
    These parts of the message get replaced by model attributes or other dynamic values
    when the page is rendered. More information about this feature can be found in
    the Thymeleaf documentation at [https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部化字符串中包含占位符或参数是可能的。当页面渲染时，这些消息的部分将被模型属性或其他动态值替换。有关此功能的更多信息，请参阅 Thymeleaf 文档中的[https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#messages)。
- en: Create Context Aware URLs
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建上下文感知的 URL
- en: The Java Servlet specification includes what is known as **servlet context**.
    When configured, a servlet context is a part of a URI that will be added in front
    of each mapping. For example, when setting the servlet context to `/blogmania`,
    the mapping `/blogposts` will become `/blogmania/blogposts`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Java Servlet 规范包括所谓的 **servlet 上下文**。当配置后，servlet 上下文是 URI 的一部分，它将被添加到每个映射的前面。例如，当将
    servlet 上下文设置为 `/blogmania` 时，映射 `/blogposts` 将变为 `/blogmania/blogposts`。
- en: 'In Spring Boot, you set a context path in the `application.properties` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring Boot 中，你在 `application.properties` 文件中设置上下文路径：
- en: '`server.servlet.contextPath=/blogmania`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.servlet.contextPath=/blogmania`'
- en: Statements in Thymeleaf Templates
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Thymeleaf 模板中的语句
- en: Beside the expressions to include externalized text or creating URLs, Thymeleaf
    offers a lot more statements and expressions. They can be used in any Thymeleaf
    attribute that is prefixed with the namespace `th:` as defined earlier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了包含外部化文本或创建 URL 的表达式之外，Thymeleaf 还提供了许多其他语句和表达式。它们可以用于任何以之前定义的命名空间 `th:` 为前缀的
    Thymeleaf 属性。
- en: 'The following table lists a few of the most interesting statements:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了几个最有趣的声明：
- en: '![](img/c2bac19a-84d3-4a31-beb8-f18211ea13e1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c2bac19a-84d3-4a31-beb8-f18211ea13e1.png)'
- en: 'An example combining a lot of the statements from this table is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个结合了此表中许多声明的示例：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Bootstrapping and Templating With Thymeleaf
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Thymeleaf 进行引导和模板化
- en: 'The aim is to implement bootstrapping of Thymeleaf and make first contact with
    Thymeleaf templating. The steps for completion are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是实现 Thymeleaf 的引导并首次接触 Thymeleaf 模板化。完成步骤如下：
- en: Open the project folder in [https://bit.ly/2Og1oMZ](https://bit.ly/2Og1oMZ).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://bit.ly/2Og1oMZ](https://bit.ly/2Og1oMZ) 中打开项目文件夹。
- en: Start the application with `mvnw spring-boot:run`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mvnw spring-boot:run` 命令启动应用程序。
- en: Navigate your browser to `http://localhost:8080` to see a page containing a
    title.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器导航到 `http://localhost:8080` 以查看包含标题的页面。
- en: 'In your IDE or text editor, add the following line to the file: `src/main/resources/templates/welcome.html<p
    th:text="#{welcome.message}">There goes the message!</p>`.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 IDE 或文本编辑器中，将以下行添加到文件中：`src/main/resources/templates/welcome.html<p th:text="#{welcome.message}">信息如下！</p>`。
- en: 'Add another line to the file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中添加另一行：
- en: '`3 + 4 = <span th:text="3 + 4">Result of the calculation</span>`.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`3 + 4 = <span th:text="3 + 4">计算结果</span>`。'
- en: Stop the application and start it again using the previous command.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止应用程序并使用之前的命令重新启动它。
- en: 'Reload the page to view the following output:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载页面以查看以下输出：
- en: '![](img/4a0f22b6-04c4-41e2-b7c5-488d9bd69d38.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4a0f22b6-04c4-41e2-b7c5-488d9bd69d38.png)'
- en: With this sub-section, you have implemented bootstrapping and the templating
    procedure in Thymeleaf.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本节，您已在 Thymeleaf 中实现了引导和模板化过程。
- en: Go to [https://bit.ly/2Og1oMZ](https://bit.ly/2Og1oMZ) to access the `exercise-first-thymeleaf/`
    folder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2Og1oMZ](https://bit.ly/2Og1oMZ) 访问 `exercise-first-thymeleaf/`
    文件夹。
- en: Go to [https://bit.ly/2CP8dnd](https://bit.ly/2CP8dnd) to access the code for
    the `ExternalizedTextApplicationTests.java` file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2CP8dnd](https://bit.ly/2CP8dnd) 访问 `ExternalizedTextApplicationTests.java`
    文件的代码。
- en: Displaying Data Using a Model and Data Binding
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型和数据绑定显示数据
- en: '**Data Binding** deals with binding together information from two separate
    data sources and to keep them in sync. Data model instances use the required methods
    to set or retrieve data from a server, and reflect changes between two data sources.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据绑定**处理将来自两个不同数据源的信息绑定在一起，并保持它们同步。数据模型实例使用所需的方法从服务器设置或检索数据，并反映两个数据源之间的更改。'
- en: How Spring Web MVC Handles the Model
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Web MVC 如何处理模型
- en: The Thymeleaf engine we have just been looking at is responsible for handling
    the view part of the MVC pattern. The model, which is another aspect of this pattern,
    is handled by the Spring MVC framework. This includes creating and initializing
    attributes of the model and passing it between the view and the controller. This
    is different than, for example, Java Server Faces, where no distinct model is
    available but the components that render the view must access the attributes of
    the session or request.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚查看的 Thymeleaf 引擎负责处理 MVC 模式的视图部分。模型是此模式的另一个方面，由 Spring MVC 框架处理。这包括创建和初始化模型属性，并在视图和控制器之间传递它。这与例如
    Java Server Faces 不同，在 Java Server Faces 中没有单独的模型，但渲染视图的组件必须访问会话或请求的属性。
- en: The model itself consists of one or more **named attributes**. A class that
    is commonly used in Spring MVC applications is the `org.springframework.ui.Model`
    class. It is similar to a map, which means it is where you associate the attribute
    with its name. The name is later used to reference attributes from the model while
    rendering the view.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 模型本身由一个或多个**命名属性**组成。在 Spring MVC 应用程序中常用的一种类是 `org.springframework.ui.Model`
    类。它类似于一个映射，这意味着它是您将属性与其名称关联的地方。名称随后用于在渲染视图时引用模型中的属性。
- en: 'For example, there could be an attribute named `blogPost` referencing an instance
    of a `BlogPost` class that by itself contains information about the post that
    should be displayed by the view:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可能有一个名为 `blogPost` 的属性引用一个 `BlogPost` 类的实例，该实例本身包含有关应通过视图显示的帖子的信息：
- en: '![](img/c1c7be77-15e9-4d15-a2cc-3ba276ad0e0d.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1c7be77-15e9-4d15-a2cc-3ba276ad0e0d.png)'
- en: Model-View Interaction
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型-视图交互
- en: 'The following diagram shows a typical relationship among various components:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了各种组件之间的典型关系：
- en: '![](img/1fcab629-425e-45e4-b894-0dbd028d0545.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1fcab629-425e-45e4-b894-0dbd028d0545.png)'
- en: Passing the Model as a Parameter to a Handler Method
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型作为参数传递给处理方法
- en: To add arbitrary objects to the model, you can declare a method parameter in
    a handling method that is of the type of `org.springframework.ui.Model`. When
    a request is handled by Spring MVC, an instance is created and provided to the
    method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要将任意对象添加到模型中，你可以在处理方法中声明一个类型为 `org.springframework.ui.Model` 的方法参数。当 Spring
    MVC 处理请求时，将创建一个实例并将其提供给方法。
- en: Look at the following code snippet that is taken from a class that you can find
    in the code files at [https://bit.ly/2OkI7ci](https://bit.ly/2OkI7ci)[:](https://bit.ly/2OkI7ci)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下代码片段，它来自你可以在代码文件中找到的类 [https://bit.ly/2OkI7ci](https://bit.ly/2OkI7ci)[:](https://bit.ly/2OkI7ci)
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `@GetMapping` annotation maps this method the `/blogpost` URL.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`@GetMapping` 注解将此方法映射到 `/blogpost` URL。'
- en: An instance of the `org.springframework.ui.Model` class is passed to the method
    as a parameter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `org.springframework.ui.Model` 类的实例作为参数传递给方法。
- en: All blog posts are retrieved using the `findAllBlogPosts()` method.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所有博客文章都是使用 `findAllBlogPosts()` 方法检索的。
- en: The list of blog posts is added to the model and associated with the name `blogPosts`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将博客文章列表添加到模型中，并与其名称 `blogPosts` 关联。
- en: The name of the view to be rendered is returned. In this case, the view is called
    `blogposts/list`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 返回要渲染的视图的名称。在这种情况下，视图名为 `blogposts/list`。
- en: Use the `@ModelAttribute` to pass model attributes as method parameters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@ModelAttribute` 将模型属性作为方法参数传递。
- en: In some cases, you may only require a few model attributes in a handling method.
    For this case, Spring allows you to annotate the parameters of methods with a
    `@ModelAttribute` annotation that also contains the attribute name. Spring will
    then try to get an existing attribute with the given name from the model. If the
    attribute cannot be found, it will be created.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能只需要在处理方法中几个模型属性。在这种情况下，Spring 允许你使用包含属性名称的 `@ModelAttribute` 注解来注解方法的参数。然后
    Spring 将尝试从模型中获取具有给定名称的现有属性。如果找不到属性，它将被创建。
- en: 'Whenever an attribute is initialized and added to the model, the same instance
    will be accessible throughout the rest of the request for the given name. This
    means that the attributes are also available inside a template when the view is
    rendered:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每当属性初始化并添加到模型中时，相同的实例将在整个请求的其余部分中对该名称可访问。这意味着在渲染视图时，属性也存在于模板内部：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, Spring makes sure that an attribute named `blogPost` is associated
    with the model and then passes the `blogPost` to the handling method, where it
    will be manipulated. Finally, the view named `blogposts/edit` is rendered.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，Spring 确保一个名为 `blogPost` 的属性与模型相关联，然后将 `blogPost` 传递给处理方法，在那里它将被操作。最后，渲染名为
    `blogposts/edit` 的视图。
- en: Returning Model Attributes from a Controller Method
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制器方法返回模型属性
- en: Another way of binding attributes to the model is simply by returning them from
    a controller method. Any types of object can be returned. However, some of them
    have a special meaning and will be handled appropriately.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性绑定到模型的一种方法是通过从控制器方法返回它们。任何类型的对象都可以返回。然而，其中一些具有特殊含义，并将被适当处理。
- en: When returning instances of `java.util.Map` or `org.springframework.ui.Model`,
    all of their attributes will be added to an existing model.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当返回 `java.util.Map` 或 `org.springframework.ui.Model` 的实例时，它们的所有属性都将添加到现有模型中。
- en: Any arbitrary object that is not a String will be added to the model. The name
    is determined either by the name of the return type or the name given in the `@ModelAttribute`
    annotation, if present.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 任何非 String 类型的任意对象都将添加到模型中。名称由返回类型的名称或（如果存在）`@ModelAttribute` 注解中给出的名称确定。
- en: Using @ModelAttribute to Initialize Model Attributes
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 @ModelAttribute 初始化模型属性
- en: Any method inside a controller class that is annotated with the `@ModelAttribute`
    annotation is called before the actual request - handling method in the same controller.
    It can access an instance of the model passed in as a parameter, return a model
    attribute as described previously, or even combine both methods.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器类中，任何带有 `@ModelAttribute` 注解的方法都在同一控制器中的实际请求处理方法之前调用。它可以访问作为参数传入的模型实例，返回前面描述的模型属性，甚至结合这两种方法。
- en: 'Take a look at the following code example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码示例：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This method will add the number of all posts as reported by the `numBlogPosts()`
    method for any request that is handled by the controller class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将为控制器类处理的任何请求添加 `numBlogPosts()` 方法报告的所有帖子的数量。
- en: You can even use `@PathParam` and similar directives if you require access to
    such values. For example, this can be useful to query the database.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要访问此类值，您甚至可以使用 `@PathParam` 和类似的指令。例如，这可以用于查询数据库。
- en: Using an annotated parameter allows you to pick up only certain attributes that
    may have been initialized elsewhere. It also enables a handling method to clearly
    express its purpose. Finally, the controller method doesn't need to fiddle around
    with the full model.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用注解参数允许您仅获取在其他地方可能已初始化的某些属性。它还使处理方法能够清楚地表达其目的。最后，控制器方法不需要与整个模型纠缠。
- en: Having an annotated method allows you to initialize the model with attributes
    that are generally used in all views and are independent of the current task to
    be performed. This expresses the principle of separation of concerns.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个注解方法允许您使用通常用于所有视图且与当前要执行的任务无关的属性初始化模型。这表达了关注点分离的原则。
- en: How a View is Selected by the Spring Framework
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 框架如何选择视图
- en: Spring offers a lot of ways to render the information from the model. We will
    look at HTML pages in particular.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 提供了多种渲染模型信息的方法。我们将特别查看 HTML 页面。
- en: The Thymeleaf template engine uses a view name to determine which template it
    should use.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf 模板引擎使用视图名称来确定它应该使用哪个模板。
- en: Thymeleaf uses the view name to search for the template file in the `src/main/resources/templates`
    folder. The file has to be named exactly the same as the view name, prefixed by
    `.html`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf 使用视图名称在 `src/main/resources/templates` 文件夹中搜索模板文件。文件名必须与视图名称完全相同，前面加上
    `.html` 扩展名。
- en: 'The following table lists some examples:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了一些示例：
- en: '![](img/048037fd-54b1-480f-8750-09ff57da73b1.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/048037fd-54b1-480f-8750-09ff57da73b1.png)'
- en: Selecting a View Template by Returning Its Name
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过返回其名称选择视图模板
- en: 'Take a look at the following code example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码示例：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This example will render the template, which is found in the `src/main/resources/templates/blogPosts/list.html`
    file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将渲染位于 `src/main/resources/templates/blogPosts/list.html` 文件中的模板。
- en: Redirecting to a URL Instead of Rendering a View Directly
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接渲染视图而不是重定向到 URL
- en: To redirect to a URL, you prefix the view name that is returned from the handling
    method with `redirect:`. This can either be a URL relative to the servlet context
    or an absolute URL. Any attributes in the model will be added to the URL as query
    parameters.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要重定向到 URL，您需要在处理方法返回的视图名称前加上 `redirect:` 前缀。这可以是相对于 servlet 上下文的 URL 或绝对 URL。模型中的任何属性都将作为查询参数添加到
    URL 中。
- en: 'Here is an example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '![](img/dd7ce5da-9468-49ec-b3dc-2c63e40faaf1.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd7ce5da-9468-49ec-b3dc-2c63e40faaf1.png)'
- en: Another way to redirect is to return an instance of `org.springframework.web.servlet.view.RedirectView`
    containing the URL to redirect to. This allows us to pass additional attributes
    to the handling method that gets executed after the redirect.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种重定向的方法是返回一个包含要重定向到的 URL 的 `org.springframework.web.servlet.view.RedirectView`
    实例。这允许我们将额外的属性传递给重定向后执行的处理方法。
- en: Another kind of attributes, called **flash attributes**, will also be available
    after the redirect.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的属性，称为**闪存属性**，在重定向后也将可用。
- en: 'Look at the following example from the `BlogPostController` taken from the
    basic Thymeleaf source in the repository:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下从仓库中基本 Thymeleaf 源代码的 `BlogPostController` 中提取的示例：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the constructor of the `RedirectView` instance, the URL of the redirect
    is specified. The second parameter tells Spring to do the redirect relative to
    the context path of the current application. After this handling method returns,
    the client will be redirected to a URL such as `/blogPosts/slug-of-random-post?extraMessage=extraMessage=This+message+appears+in+the+query`.
    The method that handles this request is able to access `flashMessage`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `RedirectView` 实例的构造函数中，指定重定向的 URL。第二个参数告诉 Spring 相对于当前应用程序的上下文路径进行重定向。在此处理方法返回后，客户端将被重定向到类似
    `/blogPosts/slug-of-random-post?extraMessage=extraMessage=This+message+appears+in+the+query`
    的 URL。处理此请求的方法能够访问 `flashMessage`：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In contrast, request parameters can be sent to any application or site, since
    it is encoded in the URL.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，请求参数可以发送到任何应用程序或网站，因为它是编码在 URL 中的。
- en: Selecting a View and Returning a Model at the Same Time
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同时选择视图并返回模型
- en: By returning an instance of `org.springframework.web.servlet.ModelAndView`,
    it is possible to specify a view name, add model attributes or set the HTTP response
    status at the same time.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过返回 `org.springframework.web.servlet.ModelAndView` 的实例，可以同时指定视图名称、添加模型属性或设置
    HTTP 响应状态。
- en: 'An example can be found in the `BlogPostController` provided in the code repository
    for this chapter:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章代码库提供的 `BlogPostController` 中可以找到一个示例：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This method returns the following information:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回以下信息：
- en: The view name `/blogposts/details`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 视图名称 `/blogposts/details`。
- en: A model attribute called `blogPost` containing the actual blog post.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 `blogPost` 的模型属性，包含实际的博客文章。
- en: Working with the Model in Thymeleaf Templates
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Thymeleaf 模板中处理模型
- en: Once the model and view name have been provided by the handling method, the
    framework will pass both to the Thymeleaf template engine. Everything that has
    been added to the model will be available in the template by its attribute name.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦处理方法提供了模型和视图名称，框架将同时传递这两个名称给 Thymeleaf 模板引擎。模型中添加的所有内容都将通过其属性名称在模板中可用。
- en: Binding Model Data to a Thymeleaf Template
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型数据绑定到 Thymeleaf 模板
- en: 'After Thymeleaf has been enabled by adding the namespace, directives can be
    used to add dynamic content. This will be achieved by using the `th` prefix. For
    example, assume that you have added an attribute named `message` to the model:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Thymeleaf 通过添加命名空间启用后，可以使用指令添加动态内容。这将通过使用 `th` 前缀来实现。例如，假设您已向模型添加了一个名为 `message`
    的属性：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Instead of the text `This will be replaced!`, the content of the model attribute
    named message will be shown.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是显示文本 `This will be replaced!`，将显示名为 `message` 的模型属性的内容。
- en: To access a model attribute, `${...}` is used to reference an attribute from
    the model.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问模型属性，使用 `${...}` 来引用模型中的属性。
- en: Adding Dynamic Data
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加动态数据
- en: 'The aim is to add dynamic data to be displayed on a web page. The steps for
    completion are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在网页上显示动态数据。完成步骤如下：
- en: Open the `exercise-basic-thymeleaf` project in your IDE.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 IDE 中打开 `exercise-basic-thymeleaf` 项目。
- en: Open the `BlogPostController` class.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `BlogPostController` 类。
- en: 'Add the following method, which adds a simple blog post to the model:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，该方法将简单的博客文章添加到模型中：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Open the `src/main/resources/templates/blogposts/details.html` file
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/main/resources/templates/blogposts/details.html` 文件
- en: 'Add the following code at the location marked by this:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此标记的位置添加以下代码：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Navigate your browser to `http://localhost:8080/sample-post`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航您的浏览器到 `http://localhost:8080/sample-post`。
- en: 'You should see the details of the blogpost:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到博客文章的详细信息：
- en: '![](img/3bcf2bc5-844f-4f46-a356-04717435f8c6.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3bcf2bc5-844f-4f46-a356-04717435f8c6.png)'
- en: With this sub-section, you have utilized dynamic data and displayed it as an
    output on a web page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个子部分，您已经使用了动态数据并将其作为网页上的输出显示。
- en: Go to [https://bit.ly/2OcOLSH](https://bit.ly/2OcOLSH) to access the `exercise-basic-thymeleaf/`
    folder.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2OcOLSH](https://bit.ly/2OcOLSH) 访问 `exercise-basic-thymeleaf/`
    文件夹。
- en: Go to [https://bit.ly/2MtdW1X](https://bit.ly/2MtdW1X) to access the code for
    the `BasicThymeleafApplication.java` file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2MtdW1X](https://bit.ly/2MtdW1X) 访问 `BasicThymeleafApplication.java`
    文件的代码。
- en: Iterating and Displaying Items from a List
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历和显示列表中的项目
- en: 'When you want to display a list of items, you need a way to iterate over that
    list. Thymeleaf is able to iterate over lists, such as arrays or Java Collections,
    using the `th:each` directive:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要显示项目列表时，您需要一种遍历该列表的方法。Thymeleaf 可以使用 `th:each` 指令遍历列表，例如数组或 Java 集合：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a simplified version of the content you find in the [https://bit.ly/2Rqpkyn](https://bit.ly/2Rqpkyn) file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在 [https://bit.ly/2Rqpkyn](https://bit.ly/2Rqpkyn) 文件中找到的内容的简化版本。
- en: This snippet will create a `<div>` for each blog post that is present in the
    collection with the attribute name `blogPosts`. Inside this `<div>` element, the
    current blog post object can be accessed by using the name `currentBlogPost`.
    As you can see, the title and content are inserted using the `th:text` attribute.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段将为集合中具有 `blogPosts` 属性名的每个博客文章创建一个 `<div>`。在此 `<div>` 元素内部，可以通过使用名称 `currentBlogPost`
    访问当前的博客文章对象。如您所见，标题和内容是通过 `th:text` 属性插入的。
- en: Handling Lists
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理列表
- en: 'The aim is to display lists in a blogpost. The steps for completion are as
    follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在博客文章中显示列表。完成步骤如下：
- en: Open the welcome page file at `src/main/resources/templates/index.html` from
    the previous sub-section.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前一节中打开 `src/main/resources/templates/index.html` 欢迎页面文件。
- en: 'Add the following code at the location marked with the `<div>`:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标记为 `<div>` 的位置添加以下代码：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Open a terminal and go to the `exercise-basic-thymeleaf` folder.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并转到 `exercise-basic-thymeleaf` 文件夹。
- en: Enter `mvnw spring-boot:run` to start the application.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `mvnw spring-boot:run` 以启动应用程序。
- en: Navigate your browser to `http://localhost:8080` to see the list in action.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的浏览器导航到 `http://localhost:8080` 以查看列表的实际效果。
- en: 'Click the Add button so that the list should show one new entry:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”按钮，以便列表应显示一个新条目：
- en: '![](img/41afeb55-8be4-4e0d-b489-86aecb5b7df3.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41afeb55-8be4-4e0d-b489-86aecb5b7df3.png)'
- en: After, you have displayed multiple blog posts on a website by iterating over
    a list of items.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在您通过遍历项目列表在网站上显示多个博客文章之后。
- en: The previous sub-section illustrates the use of a built-in function of Thymeleaf
    to format temporal attributes such as the `LocalDateTime` that is used for the
    publication date of a blogpost.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节子部分说明了使用 Thymeleaf 内置函数格式化时间属性（如用于博客文章发布日期的 `LocalDateTime`）的用法。
- en: The `th:text="${#temporals.format(currentBlogPost.publicationDate, 'MMMM d,
    YYYY')}"` expression takes the publication date from the current blog posts and
    formats it to the given pattern. The month is printed first, then the day of the
    month, followed by a colon and the year (January 1, 2018).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`th:text="${#temporals.format(currentBlogPost.publicationDate, ''MMMM d, YYYY'')}"`
    表达式从当前博客文章中获取发布日期并将其格式化为给定的模式。首先打印月份，然后是月份中的日期，接着是冒号和年份（2018年1月1日）。'
- en: Displaying Parts of the View Using Conditions
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用条件显示视图的一部分
- en: Beside iterating through lists, Thymeleaf also allows you to hide or show parts
    of the template depending on the state model attributes. You can also evaluate
    expressions containing logic operations or method calls.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 除了遍历列表之外，Thymeleaf 还允许您根据状态模型属性隐藏或显示模板的某些部分。您还可以评估包含逻辑运算或方法调用的表达式。
- en: 'To conditionally show a page element, Thymeleaf offers the `th:if` directive:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有条件地显示页面元素，Thymeleaf 提供了 `th:if` 指令：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is a simplified version of the content you find in the [https://bit.ly/2CRBV9A](https://bit.ly/2CRBV9A) file.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在 [https://bit.ly/2CRBV9A](https://bit.ly/2CRBV9A) 文件中找到的内容的简化版本。
- en: In this case, there are no blog posts that will appear when the model attribute
    named `blogPosts` is empty.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当名为 `blogPosts` 的模型属性为空时，不会显示任何博客文章。
- en: Displaying Text Conditionally
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有条件地显示文本
- en: 'The aim is to display text on the screen based on certain conditions. The steps
    for completion are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是根据某些条件在屏幕上显示文本。完成步骤如下：
- en: Open the welcome page from the previous sub-section.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前一节中打开欢迎页面。
- en: 'Add the following code above the list at the location marked with the `<div>`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标记为 `<div>` 的位置的上面的列表上方添加以下代码：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Open a terminal and go to the `exercise-basic-thymeleaf` folder.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并转到 `exercise-basic-thymeleaf` 文件夹。
- en: Enter `mvnw spring-boot:run` to start the application.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `mvnw spring-boot:run` 以启动应用程序。
- en: Navigate your browser to `http://localhost:8080` to see the list in action.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的浏览器导航到 `http://localhost:8080` 以查看列表的实际效果。
- en: 'Click the Remove all button to clear the list of blog posts:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“删除所有”按钮以清除博客文章列表：
- en: '![](img/f155e8c9-4e4f-47a4-96b2-2392b22a6636.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f155e8c9-4e4f-47a4-96b2-2392b22a6636.png)'
- en: With this sub-section, you have displayed the text data on the website based
    on the applied conditions.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您根据应用条件在网站上显示了文本数据。
- en: You have seen multiple ways to add attributes to the model. Model attributes
    can be any arbitrary object that is referenced by a name. The name is defined
    by the developer when it is added to the model. This can either be in a separate
    or in a mapping - handling method.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到了多种向模型添加属性的方法。模型属性可以是任何通过名称引用的任意对象。名称是在将其添加到模型时由开发者定义的。这可以是单独的或映射处理方法。
- en: 'Activity: Displaying the Details of a Blog Post'
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：显示博客文章的详细信息
- en: '**Aim**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: To implement a handling method and a corresponding view template.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 实现处理方法和相应的视图模板。
- en: '**Scenario**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: The blogmania application is set up. There is a method to retrieve a blogpost
    from the internal storage using the slug attribute. You now want to add a view
    that displays a blog post when the user enters the `/blogposts/{slug}` URI.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: blogmania 应用程序已设置。有一个方法可以通过 slug 属性从内部存储检索博客文章。现在您想添加一个视图，当用户输入 `/blogposts/{slug}`
    URI 时显示博客文章。
- en: '**Steps for Completion**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create an annotated class and inject the `BlogPostService`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个注解类并注入`BlogPostService`。
- en: Add a handling method to the `BlogPostController` and use a path variable slug
    to find the blog post. Throw an exception when a blogpost is not found.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`BlogPostController`添加处理方法，并使用路径变量slug查找博客文章。当找不到博客文章时抛出异常。
- en: Retrieve the blog post from the `BlogPostService`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`BlogPostService`检索博客文章。
- en: Return the instance from the required method. Set the view name to blogpost
    and add the blog post returned from the service.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从所需方法返回实例。将视图名称设置为blogpost并添加从服务返回的博客文章。
- en: Create a view template file.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个视图模板文件。
- en: Start the application using the maven command.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用maven命令启动应用程序。
- en: 'Open the `http://localhost:8080/blogposts/my-first-post` URL to view the output
    screen:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http://localhost:8080/blogposts/my-first-post` URL以查看输出屏幕：
- en: '![](img/d4e604b1-61c3-4659-89d7-e02cf840f659.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d4e604b1-61c3-4659-89d7-e02cf840f659.png)'
- en: '**Outcome**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: The resulting handling method and a corresponding view template are visible
    on the web page.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的处理方法和相应的视图模板在网页上可见。
- en: Go to [https://bit.ly/2NGgDS4](https://bit.ly/2NGgDS4) to access the code for
    the `BasicThymeleafApplication.java` file. To refer to the detailed steps, go
    to the *Solutions* section at the end of this book on page 254.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2NGgDS4](https://bit.ly/2NGgDS4)访问`BasicThymeleafApplication.java`文件的代码。要参考详细步骤，请参阅本书末尾第254页的“解决方案”部分。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learnt about the Thymeleaf template engine. We looked
    at how to add the required dependency to our project and the basic syntax to write
    view templates.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于Thymeleaf模板引擎的内容。我们探讨了如何将所需的依赖项添加到我们的项目中，以及编写视图模板的基本语法。
- en: We then looked at how Spring MVC handles the model and how to add attributes
    to it. Adding and accessing attributes is similar to a Java Map.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着探讨了Spring MVC如何处理模型以及如何向其添加属性。添加和访问属性类似于Java Map。
- en: Finally, we looked at expressions and control statements that Thymeleaf uses
    to insert data from the model, iterate through lists, and conditionally display
    parts of the page.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了Thymeleaf用于插入模型数据、遍历列表和条件显示页面部分的表达式和控制语句。
- en: In this chapter, we have learnt how to display information that has been made
    available from the controller as model attributes in a view. In the next chapter,
    we will take a look at how input from the view is handed to the controller.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在视图中显示从控制器作为模型属性提供的已提供信息。在下一章中，我们将探讨如何将视图的输入传递给控制器。
