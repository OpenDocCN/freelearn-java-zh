- en: Chapter 1. Spring Mongo Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Spring Mongo集成
- en: MongoDB is a popular NoSQL database and is a document-based one too. It is written
    using the popular and powerful C++ language, which makes it a document-oriented
    database. Queries are also document-based, and it also provides indexing using
    JSON style to store and retrieve data. MongoDB works on the concept of **collection**
    and **documentation**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是一种流行的NoSQL数据库，也是基于文档的。它是使用流行且强大的C++语言编写的，这使得它成为一种面向文档的数据库。查询也是基于文档的，它还提供了使用JSON样式进行存储和检索数据的索引。MongoDB基于**集合**和**文档**的概念工作。
- en: 'Let''s look at few terminology differences between MySQL and MongoDB:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看MySQL和MongoDB之间的一些术语差异：
- en: '| MySQL | MongoDB |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| MySQL | MongoDB |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Table | Collection |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 集合 |'
- en: '| Row | Document |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 行 | 文档 |'
- en: '| Column | Field |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 字段 |'
- en: '| Joins | Embedded documents linking |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | 嵌入式文档链接 |'
- en: In MongoDB, a collection is a set or a group of documents. It is the same as
    RDBMS tables.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中，集合是一组文档。这与RDBMS表相同。
- en: In this chapter, we shall start by setting up a MongoDB NoSQL database and will
    integrate a spring application with MongoDB to perform CRUD operations. The first
    example demonstrates updating single document values. The second example considers
    an order use case where it requires two document references to be stored in the
    collection. It demonstrates the flexibility in referencing different documents
    of MongoDB using `objectId` references.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先设置MongoDB NoSQL数据库，并将集成Spring应用程序与MongoDB以执行CRUD操作。第一个示例演示了更新单个文档值。第二个示例考虑了一个订单用例，其中需要在集合中存储两个文档引用。它演示了使用`objectId`引用引用MongoDB的不同文档的灵活性。
- en: We need to go for a NoSQL database only if the applications have heavy write
    operations. MongoDB also suits the cloud environment very well, where we can take
    copies of databases easily.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当应用程序具有大量写操作时，我们才需要使用NoSQL数据库。MongoDB也非常适合云环境，我们可以轻松地复制数据库。
- en: In the next section, we shall see how we can get started with MongoDB, beginning
    with installing it, using the Spring Framework, and integrating MongoDB. To get
    started, we shall show basic **Create, Retrieve, Update, and Delete** (**CRUD**)
    operations with various use cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何开始使用MongoDB，从安装开始，使用Spring框架，并集成MongoDB。为了开始，我们将展示各种用例中的基本**创建、检索、更新和删除**（**CRUD**）操作。
- en: Installing MongoDB and creating a database
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MongoDB并创建数据库
- en: 'In this section we shall install MongoDB and create a database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装MongoDB并创建一个数据库：
- en: Download the MongoDB database at [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://www.mongodb.org/downloads](http://www.mongodb.org/downloads)下载MongoDB数据库。
- en: 'Configure the data folder by executing the following command in the `bin` folder:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`bin`文件夹中执行以下命令来配置数据文件夹：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Start `mongod.exe` in another Command Prompt.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个命令提示符中启动`mongod.exe`。
- en: 'Execute the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `>show dbs` command also works fine with MongoDB.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`>show dbs`命令在MongoDB中也可以正常工作。'
- en: Execute the following command to create a new database, namely `eshopdb`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以创建一个名为`eshopdb`的新数据库。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Executing `> show dbs` will still show that `eshopdb` hasn't been created yet;
    this is because it doesn't contain any collections. Let's add some collections
    in the next step, once a collection is added.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`> show dbs`仍然会显示`eshopdb`尚未创建，这是因为它不包含任何集合。一旦添加了集合，我们将在下一步中添加一些集合。
- en: 'Execute the following snippet in the Command Prompt. The following snippets
    will insert sample documents into the collection:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中执行以下代码片段。以下代码片段将向集合中插入示例文档：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Setting up a batch file for MongoDB
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为MongoDB设置批处理文件
- en: It's always easy to create a batch file to start MongoDB, and it's best to create
    a script file to start Mongo. This way, we won't have an error with the configuration.
    This would also save us a lot of time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建批处理文件来启动MongoDB总是很容易，最好创建一个脚本文件来启动Mongo。这样，我们就不会出现配置错误。这也会节省我们很多时间。
- en: Create a `mongodbstart.bat` file.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`mongodbstart.bat`文件。
- en: 'Edit the file and type in the following command and save it:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件并输入以下命令，然后保存：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The next time you want to start MongoDB, just click on the batch file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下次要启动MongoDB时，只需单击批处理文件。
- en: Order use case with Spring and MongoDB
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring和MongoDB的订单用例
- en: 'Let us look at the Order use case to implement a simple CRUD operation using
    Spring and MongoDB. We are performing CRUD operations on Product, Customer, and
    Order documents. The scenario is this: a customer selects a product and places
    an order.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下订单用例，以使用Spring和MongoDB执行简单的CRUD操作。我们正在对产品、客户和订单文档执行CRUD操作。情景是这样的：客户选择产品并下订单。
- en: 'Following is the Order use case. The actor is the application user and will
    have the following options:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是订单用例。操作者是应用程序用户，将有以下选项：
- en: CRUD operation on Product Document
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对产品文档进行CRUD操作
- en: CRUD operation on Customer Document
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对客户文档进行CRUD操作
- en: CRUD operation on Order by selecting Product and Customer
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择产品和客户对订单执行CRUD操作
- en: Saving the Product Document Object ID and Customer Document Object ID in Order
    Document
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在订单文档中保存产品文档对象ID和客户文档对象ID
- en: Mapping a Mongo document to Spring Bean
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Mongo文档映射到Spring Bean
- en: 'Spring provides a simple way to map Mongo documents. The following table depicts
    the mapping of Bean with MongoDB collections:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一种简单的方法来映射Mongo文档。以下表格描述了Bean与MongoDB集合的映射：
- en: '| Bean | Mongo Collections |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Bean | Mongo集合 |'
- en: '| --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Customer.java` | `db.customer.find()` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `Customer.java` | `db.customer.find()` |'
- en: '| `Order.java` | `db.order.find()` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `Order.java` | `db.order.find()` |'
- en: '| `Product.java` | `db.product.find()` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `Product.java` | `db.product.find()` |'
- en: Setting up a Spring-MongoDB project
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Spring-MongoDB项目
- en: We need to create a simple web application project using Maven.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Maven创建一个简单的Web应用程序项目。
- en: 'Execute the following command in your Maven command prompt:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven命令提示符中执行以下命令：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a simple Maven project with a web application archetype. Add the latest
    `4.0.2.RELEASE` spring dependency.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的 Maven 项目，使用 web 应用原型。添加最新的 `4.0.2.RELEASE` spring 依赖。
- en: The following is an extract from the `pom.xml` file. These are the mandatory
    dependencies to be added to the `pom.xml` file.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是 `pom.xml` 文件的一部分。这些是必须添加到 `pom.xml` 文件中的依赖项。
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Application design
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序设计
- en: The following table contains the classes used to develop a simple CRUD application.
    The request flows from controller to model and back. The Repository classes are
    marked with the `@Repository` annotation and connect to MongoDB using the `mongoTemplate`
    class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表包含用于开发简单 CRUD 应用程序的类。请求从控制器流向模型，然后返回。Repository 类标有 `@Repository` 注解，并使用
    `mongoTemplate` 类连接到 MongoDB。
- en: '| Controller | Model | JSP | Bean |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 控制器 | 模型 | JSP | Bean |'
- en: '| --- | --- | --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `Customer Controller.java` | `Customer Repository.java` | `customer.jsp``editcutomer.jsp``allcustomers.jsp`
    | `Customer.java` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `Customer Controller.java` | `Customer Repository.java` | `customer.jsp``editcutomer.jsp``allcustomers.jsp`
    | `Customer.java` |'
- en: '| `Order Controller.java` | `Order Repository.java` | `order.jsp``editorder.jsp``allorders.jsp`
    | `Order.java` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `Order Controller.java` | `Order Repository.java` | `order.jsp``editorder.jsp``allorders.jsp`
    | `Order.java` |'
- en: '| `Product Controller.java` | `Product Repository.java` | `product.jsp``editproduct.jsp``allproducts.jsp`
    | `Product.java` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `Product Controller.java` | `Product Repository.java` | `product.jsp``editproduct.jsp``allproducts.jsp`
    | `Product.java` |'
- en: Application implementation of Spring with MongoDB
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spring 与 MongoDB 的应用实现
- en: 'The following are the steps are for the implementation of the `Spring4MongoDB_Chapter1`
    application:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现 `Spring4MongoDB_Chapter1` 应用程序的步骤：
- en: Create a web-based Maven project with the name `Spring4MongoDB_Chapter1`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Spring4MongoDB_Chapter1` 的基于 web 的 Maven 项目。
- en: Import the project into Eclipse for the implementation. I have used Eclipse
    Juno.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目导入 Eclipse 进行实现。我使用的是 Eclipse Juno。
- en: We need to create the controller to map the requests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建控制器来映射请求。
- en: 'The controller request is mapped to the `GET` and `POST` methods, as shown
    in the following table:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器请求映射到 `GET` 和 `POST` 方法，如下表所示：
- en: '| Request | Request Method | Model Attributes |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 请求 | 请求方法 | 模型属性 |'
- en: '| --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `/product` | `GET` | `productList` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `/product` | `GET` | `productList` |'
- en: '| `/product/save` | `POST` | `productList` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `/product/save` | `POST` | `productList` |'
- en: '| `/product/update` | `POST` | `productList` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `/product/update` | `POST` | `productList` |'
- en: '| `/product/geteditproduct` | `GET` | `productAttribute` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `/product/geteditproduct` | `GET` | `productAttribute` |'
- en: '| `/product/deleteproduct` | `GET` | `productAttribute` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `/product/deleteproduct` | `GET` | `productAttribute` |'
- en: '| `/product/getallproducts` | `GET` | `productList` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `/product/getallproducts` | `GET` | `productList` |'
- en: Following is the implementation of `ProductController.java`. We have used the
    `@Controller` annotation to indicate that the `ProductController.java` class is
    a controller class. The `@Autowired` annotation ties the `ProductRepository` class
    with the `ProductController.java` file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `ProductController.java` 的实现。我们使用 `@Controller` 注解来指示 `ProductController.java`
    类是一个控制器类。`@Autowired` 注解将 `ProductRepository` 类与 `ProductController.java` 文件绑定。
- en: The property `productList` is a list of type `Product` that holds the products
    that are to be displayed on screen. The `@PostConstruct` annotation will call
    the method decorated by it. Once the constructor of the class is called and all
    properties are set, and before any business methods are called, it's worthy to
    note as it's only called once.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`productList` 属性是一个 `Product` 类型的列表，保存要在屏幕上显示的产品。`@PostConstruct` 注解将调用由它装饰的方法。一旦类的构造函数被调用并且所有属性被设置，在调用任何业务方法之前，值得注意的是它只被调用一次。'
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Product.java` file has an `@Document` annotation and an `@ID` annotation,
    which is identified as a MongoDB collection that maps the `Product` entity to
    product collection in MongoDB.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product.java` 文件有一个 `@Document` 注解和一个 `@ID` 注解，它被识别为 MongoDB 集合，将 `Product`
    实体映射到 MongoDB 中的产品集合。'
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `ProducRepository.java` file has `@Repository` annotation. This is the persistence
    layer, and tells spring that this class performs operations on the database. The
    connection to Mongo is set up in Mongo template.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProducRepository.java` 文件有 `@Repository` 注解。这是持久层，并告诉 Spring 这个类在数据库上执行操作。连接到
    Mongo 在 Mongo 模板中设置。'
- en: '**ProductRepository.java**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**ProductRepository.java**'
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `.jsp` file displays the products available and allows the user to perform
    CRUD operations on the `Product` bean. The following screenshot is the output
    of editing product information using the product `ObjectId` stored in MongoDB.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`.jsp` 文件显示可用的产品，并允许用户对 `Product` bean 执行 CRUD 操作。以下截图是使用存储在 MongoDB 中的产品 `ObjectId`
    编辑产品信息的输出。'
- en: '![Application implementation of Spring with MongoDB](img/7320OS__01_01.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Spring 与 MongoDB 的应用实现](img/7320OS__01_01.jpg)'
- en: '**Product.jsp file**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Product.jsp 文件**'
- en: This file serves as a view layer to the user. This has the product creation
    form and includes a file that lists all the products stored in MongoDB.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件作为用户的视图层。它包含产品创建表单，并包括一个列出 MongoDB 中存储的所有产品的文件。
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If all goes well, you should see the following screen, where you can play around
    with products. The following screenshot is the output of the **Register Product**
    and list Product functionality using Spring and MongoDB.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该看到以下屏幕，您可以在其中玩转产品。以下截图是使用 Spring 和 MongoDB 实现的 **注册产品** 和列出产品功能的输出。
- en: '![Application implementation of Spring with MongoDB](img/7320OS__01_02.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Spring 与 MongoDB 的应用实现](img/7320OS__01_02.jpg)'
- en: The following `dispatcher-servlet.xml` file shows the configuration for component
    scan and MongoDB template. It also shows the MongoDB database name configuration.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 `dispatcher-servlet.xml` 文件显示了组件扫描和 MongoDB 模板的配置。它还显示了 MongoDB 数据库名称的配置。
- en: '**dispatcher-servlet.xml**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**dispatcher-servlet.xml**'
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see that the `mongoDbFactory` bean has been configured with MongoDB
    database details. You will also observe that `mongoTemplate` has also been configured.
    The property of the `mongoTemplate` bean is `mongoDbFactory` bean, and so when
    the template is called the connection gets established.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`mongoDbFactory` bean已配置MongoDB数据库详细信息。您还会注意到`mongoTemplate`也已配置。`mongoTemplate`
    bean的属性是`mongoDbFactory` bean，因此在调用模板时连接会建立。
- en: 'Just run the following commands in the MongoDB database in order to test the
    Order use case:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在MongoDB数据库中运行以下命令以测试订单用例：
- en: '`db.order.find()`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.order.find()`'
- en: '`db.order.remove()`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.order.remove()`'
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`RoboMongo` is a free tool like `Toad` to access the MongoDB database.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoboMongo`是一个免费工具，类似于`Toad`，用于访问MongoDB数据库。'
- en: Order management use case
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订单管理用例
- en: Let's consider a complex scenario for this section. In the use case that we
    have considered, the Order use case has customer and product objects in the class.
    When a user places an order, the user will select a product and customer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑这一部分的一个复杂场景。在我们考虑的用例中，订单用例在类中具有客户和产品对象。当用户下订单时，用户将选择产品和客户。
- en: Our aim here is to store the `customer` and `product` classes directly in the
    `Order` collection in MongoDB. Let's first implement the `OrderBean` class with
    getter and setters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是直接将`customer`和`product`类存储在MongoDB的`Order`集合中。让我们首先实现具有getter和setter的`OrderBean`类。
- en: '**Order.java**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Order.java**'
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The next step would be to define the methods in the `OrderRepository.java` file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在`OrderRepository.java`文件中定义方法。
- en: '![Order management use case](img/7320OS__01_03.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![订单管理用例](img/7320OS__01_03.jpg)'
- en: Below are the code snippets of the `update` and `save` methods in the `repository`
    class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`repository`类中`update`和`save`方法的代码片段。
- en: Creating and inserting Order
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和插入订单
- en: We see that the update `Order` method accepts the `Order` object. We used the
    `addCriteria()` method to get a particular order based on the object ID. The `Order`
    object retrieved is stored in the `temp` object. The values are then set to the
    `temp` object based on the object that is passed to the method. Then, the `mongoTemplate.save(Object)`
    method is called to update the saved object.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到更新`Order`方法接受`Order`对象。我们使用`addCriteria()`方法根据对象ID获取特定订单。检索到的`Order`对象存储在`temp`对象中。然后根据传递给方法的对象设置值到`temp`对象。然后调用`mongoTemplate.save(Object)`方法来更新保存的对象。
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `saveObject` method only accepts the `Order` object and sets the ID to the
    `Order` object before saving it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`saveObject`方法只接受`Order`对象并在保存之前将ID设置为`Order`对象。'
- en: We have seen how to perform an update and an insert. The following method is
    invoked to save the Order details. This shows that `mongoTemplate` has the methods
    `insert()` and `save()`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何执行更新和插入。调用以下方法保存订单详情。这表明`mongoTemplate`具有`insert()`和`save()`方法。
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Controller to handle requests
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器处理请求
- en: The `controller` class has the customer repository and product repository references
    as per the use case. The application user needs to select the customer and product
    to place an order.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`controller`类根据用例具有客户存储库和产品存储库的引用。应用程序用户需要选择客户和产品来下订单。'
- en: 'The initial Skelton of `OrderController` is shown here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderController`的初始Skelton如下所示：'
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding the @Modelattribute annotation at the Method level
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在方法级别添加`@Modelattribute`注解
- en: 'The `controller` class is to handle the `Order` requests. The `@ModelAttribute`
    annotation is added to the method. The product list and customer list is always
    available as a model attribute to the controller. The following is the code snippet
    of the `OrderController` class:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`controller`类用于处理`Order`请求。在方法中添加了`@ModelAttribute`注解。产品列表和客户列表始终作为模型属性可用于控制器。以下是`OrderController`类的代码片段：'
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: CRUD operations of the OrderController class
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OrderController类的CRUD操作
- en: The methods are mapped to a particular request, `@ModelAttribute("Order")`,
    to make the order object easily accessible at the JSP level. You can observe that
    using `@ModelAttribute` at the method level; this will minimize adding `@ModelAttribute`
    to the method.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法映射到特定请求，`@ModelAttribute("Order")`，以便在JSP级别轻松访问订单对象。您可以观察到在方法级别使用`@ModelAttribute`，这将最小化添加`@ModelAttribute`到方法中。
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: JSP files
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSP文件
- en: The `Order.jsp` file demonstrates the use of `@ModelAttribute`, which gets mapped
    to the Model Order defined in the controller class. The setter methods set the
    values to the objects, which minimizes the coding. This showcases a feature in
    spring, which simplifies the coding process.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Order.jsp`文件演示了`@ModelAttribute`的用法，它映射到控制器类中定义的模型订单。setter方法将值设置给对象，从而最小化了编码。这展示了Spring中简化编码过程的功能。'
- en: '**Orders.jsp**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Orders.jsp**'
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `allorders.jsp` file displays the list of orders with an option to edit.
    Use of MongoDB has made displaying the `orderList` simpler.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`allorders.jsp`文件显示订单列表并提供编辑选项。使用MongoDB使得显示`orderList`更简单。'
- en: '**Allorders.jsp**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Allorders.jsp**'
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is a screenshot of the page to add your order:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是添加订单页面的截图：
- en: '![JSP files](img/7320OS__01_04.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![JSP files](img/7320OS__01_04.jpg)'
- en: 'The following is a screenshot of the page to edit your order:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是编辑订单页面的截图：
- en: '![JSP files](img/7320OS__01_05.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![JSP files](img/7320OS__01_05.jpg)'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install MongoDB and create a database and
    collections. In MongoDB, we have used the latest version of spring that was available
    during the writing of this chapter. We also learned how to integrate Spring MVC
    with MongoDB. We have built a CRUD operation. We have also seen the usage of annotations
    such as `@Repository`, `@Document`, and `@Controller`. In the next chapter, let
    us see how we can integrate spring message brokers using `jms` templates.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装MongoDB并创建数据库和集合。在编写本章时，我们使用了最新版本的Spring。我们还学习了如何将Spring MVC与MongoDB集成。我们已经构建了CRUD操作。我们还看到了诸如`@Repository`、`@Document`和`@Controller`等注解的用法。在下一章中，让我们看看如何使用`jms`模板集成Spring消息代理。
