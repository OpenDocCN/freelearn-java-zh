- en: Chapter 3. Maven Archetypes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。Maven原型
- en: The word **archetype** has its roots in Greek literature. It's derived from
    two Greek words, **archein** and **typos**. The word archein means original or
    old, while typos means patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “原型”这个词的根源在希腊文学中。它来源于两个希腊词，**archein**和**typos**。其中archein意味着原始或古老，而typos意味着模式。
- en: 'The word archetype means original patterns. The famous psychologist, Carl Gustav
    Jung introduced the archetype concept in psychology. Jung argued that there are
    12 different archetypes that represent human motivation, and he further divided
    them into three categories: ego, soul, and self. The innocent, regular guy, hero,
    and caregiver fall under the ego type. The explorer, rebel, lover, and creator
    fall under the soul type. The self type includes jester, sage, magician, and ruler.
    The concept behind Maven archetypes does not deviate a lot from what Jung explained
    in psychology.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “原型”这个词意味着原始模式。著名心理学家卡尔·古斯塔夫·荣格在心理学中引入了原型概念。荣格认为有12种不同的原型代表了人类的动机，并且他进一步将它们分为三类：自我、灵魂和自我。天真的人、普通人、英雄和照顾者属于自我类型。探险家、叛逆者、恋人和创造者属于灵魂类型。自我类型包括小丑、智者、魔术师和统治者。Maven原型的概念与荣格在心理学中解释的并没有太大的出入。
- en: 'The following figure shows the relationship between a Maven project, a project
    archetype, and projects generated from the archetype:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了Maven项目、项目原型以及从原型生成的项目之间的关系：
- en: '![Maven Archetypes](img/B02157_03_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Maven原型](img/B02157_03_01.jpg)'
- en: When we create a Java project, we need to structure it in different ways based
    on the type of the project. If it's a Java EE web application, then we need to
    have a `WEB-INF` directory and a `web.xml` file. If it's a Maven plugin project,
    we need to have a `Mojo` class that extends from `org.apache.maven.plugin.AbstractMojo`.
    As each type of project has its own predefined structure, why would everyone have
    to build the same structure again and again? Why not start with a template? Each
    project can have its own template, and developers can extend the template to suite
    their requirements. Maven archetypes address this concern. Each archetype is a
    project template.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个Java项目时，我们需要根据项目的类型以不同的方式来构建它。如果是一个Java EE Web应用程序，那么我们需要有一个`WEB-INF`目录和一个`web.xml`文件。如果是一个Maven插件项目，我们需要有一个扩展自`org.apache.maven.plugin.AbstractMojo`的`Mojo`类。由于每种类型的项目都有自己的预定义结构，为什么每个人都必须一次又一次地构建相同结构呢？为什么不从模板开始呢？每个项目都可以有自己的模板，开发者可以根据自己的需求扩展模板。Maven原型解决了这个问题。每个原型都是一个项目模板。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A list of Maven archetypes can be found at [http://maven-repository.com/archetypes](http://maven-repository.com/archetypes).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Maven原型的列表可以在[http://maven-repository.com/archetypes](http://maven-repository.com/archetypes)找到。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: The Maven archetype plugin
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven原型插件
- en: The most used archetypes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最常用的原型
- en: Archetype quickstart
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型快速入门
- en: 'The Maven `archetype` is a plugin in itself. We will discuss plugins in detail
    in [Chapter 4](ch04.html "Chapter 4. Maven Plugins"), *Maven Plugins*. The `generate`
    goal of the `archetype` plugin has been used to generate a Maven project from
    an archetype. Let''s start with a simple example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Maven `archetype` 本身就是一个插件。我们将在[第4章](ch04.html "第4章。Maven插件")*Maven插件*中详细讨论插件。`archetype`插件的`generate`目标被用来从一个原型中生成一个Maven项目。让我们从一个简单的例子开始：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will invoke the `generate` goal of the Maven `archetype` plugin
    to create a simple Java project. You will see that the following project structure
    has been created with a sample POM file. The name of the root or the base directory
    is derived from the value of the `artifactId` parameter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将调用Maven `archetype`插件的`generate`目标来创建一个简单的Java项目。你会看到已经创建了一个包含示例POM文件的项目结构。根目录或基本目录的名称是从`artifactId`参数的值派生出来的：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The sample POM file will only have a dependency to the `junit` JAR file, with
    `test` as the scope:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例POM文件将只包含对`junit` JAR文件的依赖，范围是`test`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The generated `App.java` class will have the following template code. The name
    of the package is derived from the provided `groupId` parameter. If we want a
    different value as the package name, then we need to pass this value in the command
    itself as `-Dpackage=com.packt.samples.application`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`App.java`类将包含以下模板代码。包名是从提供的`groupId`参数派生出来的。如果我们想将不同的值作为包名，那么我们需要在命令中传递这个值，例如`-Dpackage=com.packt.samples.application`：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is the simplest way to get started with a Maven project. In the previous
    example, we used the non-interactive mode by setting `interactiveMode=false`.
    This will force the plugin to use whatever values we passed in the command itself,
    along with the default values.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是开始 Maven 项目的最简单方式。在之前的示例中，我们通过设置 `interactiveMode=false` 使用了非交互模式。这将强制插件使用我们在命令本身中传递的任何值，以及默认值。
- en: 'To invoke the plugin in the interactive mode, just type `mvn archetype:generate`.
    This will prompt for user inputs as the plugin proceeds with its execution. The
    very first one is to ask for a filter or a number for the type of the archetype.
    The filter can be specified in the format of `[groupdId:]artifactId`, shown as
    follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在交互模式下调用插件，只需输入 `mvn archetype:generate`。这将提示用户输入，随着插件的执行进行。第一个提示是要求输入筛选条件或原型的类型编号。筛选条件可以指定为
    `[groupdId:]artifactId` 的格式，如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you type the filter criteria, for example, `org.apache.maven.archetypes:maven-archetype-quickstart`,
    the plugin will display the number associated with it, shown as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入筛选条件时，例如，`org.apache.maven.archetypes:maven-archetype-quickstart`，插件将显示与之关联的数字，如下所示：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, there is only one `archetype` which matches the filter, and the
    number associated with it is `1`. If you press *Enter* against the last line in
    the previous output, or just type `1`, the plugin will start to proceed with the
    `org.apache.maven.archetypes:maven-archetype-quickstart` archetype.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，只有一个 `archetype` 与筛选条件匹配，与之关联的数字是 `1`。如果你在上一输出的最后一行按 *Enter* 键，或者只输入
    `1`，插件将开始使用 `org.apache.maven.archetypes:maven-archetype-quickstart` 原型。
- en: 'Something that you might have already noticed is that as soon as you type `mvn
    archetype:generate`, the plugin displays a long list of Maven archetypes supported
    by the plugin, and each archetype has a number associated with it. You can avoid
    this long list by specifying a filter criterion with the command itself, shown
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到的某件事是，一旦你输入 `mvn archetype:generate`，插件就会显示一个由插件支持的 Maven 原型长列表，每个原型都有一个与之关联的数字。你可以通过在命令本身中指定筛选条件来避免这个长列表，如下所示：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Batch mode
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批处理模式
- en: 'The `archetype` plugin can operate in the batch mode either by setting the
    `interactiveMode` argument to `false` or passing `-B` as an argument. When operating
    in the batch mode, you need to clearly specify which archetype you are going to
    use with the arguments `archetypeGroupId`, `archetypeArtifactId`, and `archetypeVersion`.
    You also need to clearly identify the resultant artifact with the `groupId`, `artifactId`,
    `version`, and `package` arguments, shown as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`archetype` 插件可以通过将 `interactiveMode` 参数设置为 `false` 或传递 `-B` 作为参数来在批处理模式下运行。在批处理模式下，你需要明确指定你将要使用的原型，使用
    `archetypeGroupId`、`archetypeArtifactId` 和 `archetypeVersion` 参数。你还需要明确识别结果工件，使用
    `groupId`、`artifactId`、`version` 和 `package` 参数，如下所示：'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Any inquisitive mind should be asking a very valid question by now.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 任何好奇的头脑现在都应该提出一个非常有效的问题。
- en: In the non-interactive mode, we did not type any filter or provide any Maven
    coordinates for the archetype in the very first example. So, how does the plugin
    know about the archetype? When no archetype is specified, the plugin goes with
    the default one, which is `org.apache.maven.archetypes:maven-archetype-quickstart`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在非交互模式下，我们在第一个示例中并没有输入任何筛选条件或为原型提供任何 Maven 坐标。那么，插件是如何知道原型的呢？当没有指定原型时，插件将使用默认的一个，即
    `org.apache.maven.archetypes:maven-archetype-quickstart`。
- en: Archetype catalogues
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型目录
- en: 'How does the plugin find all the archetypes available in the system? When you
    just type `mvn archetype:generate`, a list of archetypes is displayed by the plugin
    for the user selection. The complete list is around 1100, but only the first 10
    are shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是如何找到系统中所有可用的原型的？当你只输入 `mvn archetype:generate` 时，插件会显示一个供用户选择的原型列表。完整的列表大约有
    1100 个，但这里只展示了前 10 个：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Going back to the original question, how does the plugin find these details
    about different archetypes?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 回到最初的问题，插件是如何找到这些不同原型的详细信息的？
- en: 'The `archetype` plugin maintains the details about different archetypes in
    an internal catalogue, which comes with the plugin itself. The archetype catalogue
    is simply an XML file. The following shows the internal catalogue of the `archetype`
    plugin:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`archetype` 插件在插件本身附带的一个内部目录中维护不同原型的详细信息。原型目录只是一个 XML 文件。以下展示了 `archetype`
    插件的内部目录：'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In addition to the internal catalogue, you can also maintain a `local` archetype
    catalogue. This is available at `USER_HOME/.m2/archetype-catalog.xml`, and by
    default, it's an empty file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内部目录外，你还可以维护一个`local`架构原型目录。它位于`USER_HOME/.m2/archetype-catalog.xml`，默认情况下，它是一个空文件。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is also a remote catalogue available at [http://repo1.maven.org/maven2/archetype-catalog.xml](http://repo1.maven.org/maven2/archetype-catalog.xml).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个远程目录可供使用，地址为[http://repo1.maven.org/maven2/archetype-catalog.xml](http://repo1.maven.org/maven2/archetype-catalog.xml)。
- en: By default, the `archetype` plugin will load all the available archetypes from
    the `local` and `remote` catalogues. If we go back to the archetype list displayed
    by the plugin and type `mvn archetype:generate`, then by looking at each entry,
    we can determine whether a given archetype is loaded from the `internal`, `local`,
    or `remote` catalogue.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`archetype`插件将从`local`和`remote`目录中加载所有可用的架构原型。如果我们回到插件显示的架构列表，并输入`mvn
    archetype:generate`，然后通过查看每个条目，我们可以确定给定的架构是从`internal`、`local`还是`remote`目录加载的。
- en: 'For example, the following archetype is loaded from the `remote` catalogue:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下架构是从`remote`目录加载的：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to force the `archetype` plugin to list all the archetypes from
    the internal catalogue only, then you need to use the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想强制`archetype`插件只列出内部目录中的所有架构原型，那么你需要使用以下命令：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To list all the archetypes from the `local` catalogue only, you need to use
    the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要只列出`local`目录中的所有架构原型，你需要使用以下命令：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To list all the archetypes from the `internal`, `local`, and `remote` catalogues,
    you need to use the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出`internal`、`local`和`remote`目录中的所有架构原型，你需要使用以下命令：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Building an archetype catalogue
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建架构原型目录
- en: 'In addition to the `internal`, `local`, and `remote` catalogues, you can also
    build your own catalogue. Say you have developed your own set of Maven archetypes
    and need to build a catalogue out of them, which can be shared with others by
    publicly hosting it. Once you have built the archetypes, they will be available
    in your `local` Maven repository. The following command will crawl through the
    `local` Maven repository and build an archetype catalogue from all the archetypes
    available there. Here, we use the `crawl` goal of the `archetype` plugin:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`internal`、`local`和`remote`目录外，你还可以构建自己的目录。比如说，你已经开发了自己的Maven架构原型集，并需要构建一个目录，可以通过公开托管与他人共享。一旦构建了架构原型，它们将可在你的`local`
    Maven仓库中找到。以下命令将遍历`local` Maven仓库，并从所有可用的架构原型中构建一个架构原型目录。在这里，我们使用`archetype`插件的`crawl`目标：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Public archetype catalogues
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公开架构原型目录
- en: 'People who develop archetypes for their projects will list them in publicly
    hosted archetype catalogues. The following list shows some of the publicly available
    Maven archetype catalogues:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为他们的项目开发原型的人会将它们列在公开的架构原型目录中。以下列表显示了一些公开可用的Maven架构原型目录：
- en: '**Fuse**: The Fuse archetype catalogue can be found at [http://repo.fusesource.com/nexus/content/groups/public/archetype-catalog.xml](http://repo.fusesource.com/nexus/content/groups/public/archetype-catalog.xml)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fuse**：可以在[http://repo.fusesource.com/nexus/content/groups/public/archetype-catalog.xml](http://repo.fusesource.com/nexus/content/groups/public/archetype-catalog.xml)找到Fuse架构原型目录。'
- en: '**Java.net**: The Java.net archetype catalogue can be found at [https://java.net/projects/maven2-repository/sources/svn/content/trunk/repository/archetype-catalog.xml](https://java.net/projects/maven2-repository/sources/svn/content/trunk/repository/archetype-catalog.xml)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java.net**：可以在[https://java.net/projects/maven2-repository/sources/svn/content/trunk/repository/archetype-catalog.xml](https://java.net/projects/maven2-repository/sources/svn/content/trunk/repository/archetype-catalog.xml)找到Java.net架构原型目录。'
- en: '**Cocoon**: The Cocoon archetype catalogue can be found at [http://cocoon.apache.org/archetype-catalog.xml](http://cocoon.apache.org/archetype-catalog.xml)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cocoon**：可以在[http://cocoon.apache.org/archetype-catalog.xml](http://cocoon.apache.org/archetype-catalog.xml)找到Cocoon架构原型目录。'
- en: '**MyFaces**: The MyFaces archetype catalogue can be found at [http://myfaces.apache.org/archetype-catalog.xml](http://myfaces.apache.org/archetype-catalog.xml)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MyFaces**：可以在[http://myfaces.apache.org/archetype-catalog.xml](http://myfaces.apache.org/archetype-catalog.xml)找到MyFaces架构原型目录。'
- en: '**Apache Synapse**: The Apache Synapse archetype catalogue can be found at
    [http://synapse.apache.org/archetype-catalog.xml](http://synapse.apache.org/archetype-catalog.xml)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Synapse**：可以在[http://synapse.apache.org/archetype-catalog.xml](http://synapse.apache.org/archetype-catalog.xml)找到Apache
    Synapse架构原型目录。'
- en: 'Let''s take Apache Synapse as an example. Synapse is an open source Apache
    project that builds an **enterprise** **service bus** (**ESB**). The following
    command uses the Apache Synapse archetype to generate a Maven project:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以 Apache Synapse 为例。Synapse 是一个开源的 Apache 项目，用于构建 **企业级** **服务总线**（**ESB**）。以下命令使用
    Apache Synapse 架构生成 Maven 项目：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The previous command will produce the following directory structure. If you
    look at the `pom.xml` file, you will notice that it contains all the necessary
    instructions along with the required dependencies to build the Synapse project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将生成以下目录结构。如果您查看 `pom.xml` 文件，您会注意到它包含构建 Synapse 项目所需的所有必要指令以及所需的依赖项：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s have a look at the previous Maven command that we had used to build
    the project with the Synapse archetype. The most important argument is `archetypeCatalog`.
    The value of the `archetypeCatalog` argument can point directly to the `archetype-catalog.xml`
    file or to a directory that contains the `archetype-catalog.xml` file. The following
    configuration shows the `archetype-catalog.xml` file corresponding to the Synapse
    archetype. It only has a single archetype, but with two different versions:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看之前我们用来使用 Synapse 架构构建项目的 Maven 命令。最重要的参数是 `archetypeCatalog`。`archetypeCatalog`
    参数的值可以直接指向 `archetype-catalog.xml` 文件或指向包含 `archetype-catalog.xml` 文件的目录。以下配置显示了与
    Synapse 架构对应的 `archetype-catalog.xml` 文件。它只有一个架构，但有两个不同的版本：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The value of the `archetypeCatalog` parameter can be a comma-separated list,
    where each item points to an `archetype-catalog.xml` file or to a directory, which
    contains `archetype-catalog.xml`. The default values are `remote` and `local`,
    where the archetypes are loaded from the `local` repository and the `remote` repository.
    If you want to load an `archetype-catalog.xml` file from the local file system,
    then you need to prefix the absolute path to the file with `file://`. The value
    `local` is just a shortcut for `file://~/.m2/archetype-catalog.xml`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`archetypeCatalog` 参数的值可以是一个以逗号分隔的列表，其中每个项目指向一个 `archetype-catalog.xml` 文件或指向一个包含
    `archetype-catalog.xml` 的目录。默认值是 `remote` 和 `local`，其中架构从 `local` 仓库和 `remote`
    仓库加载。如果您想从本地文件系统加载 `archetype-catalog.xml` 文件，那么您需要将文件的绝对路径前缀为 `file://`。`local`
    的值只是 `file://~/.m2/archetype-catalog.xml` 的快捷方式。'
- en: 'In the previous Maven command, we used the `archetype` plugin in the non-interactive
    mode, so we had to be very specific with the archetype that we needed to generate
    the Maven project. This was done with the following three arguments. The value
    of these three arguments must match the corresponding elements defined in the
    associated `archetype-catalog.xml` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的 Maven 命令中，我们使用了非交互模式的 `archetype` 插件，因此我们必须非常具体地指定所需的架构来生成 Maven 项目。这是通过以下三个参数完成的。这三个参数的值必须与关联的
    `archetype-catalog.xml` 文件中定义的相应元素相匹配：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The anatomy of archetype – catalog.xml
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构 - 目录.xml 的结构
- en: 'We have already gone through a couple of sample `archetype-catalog.xml` files
    and their uses. The XML schema of the `archetype-catalog.xml` file is available
    at [http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd](http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd).
    The following shows an `archetype-catalog.xml` file skeleton with all the key
    elements:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经浏览了一些示例 `archetype-catalog.xml` 文件及其用途。`archetype-catalog.xml` 文件的 XML 架构可在
    [http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd](http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd)
    找到。以下是一个包含所有关键元素的 `archetype-catalog.xml` 文件骨架：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `archetypes` parent element can hold one or more `archetype` child elements.
    Each `archetype` element should uniquely identify the Maven artifact corresponding
    to it. This is done by combining the `groupId`, `artifactId`, and `version` elements
    of the artifact. These three elements carry the exact same meaning that we discussed
    under Maven coordinates. The `description` element can be used to describe the
    archetype. The value of the description element will appear against the archetype
    when it is listed by the `archetype` plugin. For example, the following output
    is generated according to the pattern—`groupId:artifactId (description)` from
    the `archetype-catalog.xml` file when you type `mvn archetype:generate`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`archetypes`父元素可以包含一个或多个`archetype`子元素。每个`archetype`元素都应该唯一标识与它对应的Maven工件。这是通过组合工件的`groupId`、`artifactId`和`version`元素来实现的。这三个元素携带与我们讨论的Maven坐标相同的精确含义。`description`元素可以用来描述原型。描述元素的值将在`archetype`插件列出原型时显示。例如，当你输入`mvn
    archetype:generate`时，根据`archetype-catalog.xml`文件的模式生成的以下输出——`groupId:artifactId
    (description)`：'
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Each `archetype` child element can carry a value for the `repository` element.
    This instructs the `archetype` plugin where to find the corresponding artifact.
    When no value is specified, the artifact is loaded from the repository, where
    the catalogue file comes from.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`archetype`子元素都可以为`repository`元素携带一个值。这指示`archetype`插件在哪里找到相应的工件。当未指定值时，工件将从包含目录文件的仓库中加载。
- en: The archetype plugin goals
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型插件的目标
- en: So far in this chapter, we have only discussed the `generate` and `crawl` goals
    of the `archetype` plugin. All the useful functionalities in the Maven build process
    are developed as plugins. A given Maven plugin can have multiple goals, where
    each goal carries out a very specific task. We will discuss plugins in detail
    in [Chapter 4](ch04.html "Chapter 4. Maven Plugins"), *Maven Plugins*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们只讨论了`archetype`插件的`generate`和`crawl`目标。Maven构建过程中的所有有用功能都是作为插件开发的。一个给定的Maven插件可以有多个目标，其中每个目标执行一个非常具体的任务。我们将在第4章“Maven插件”中详细讨论插件。[第4章](ch04.html
    "第4章。Maven插件")。
- en: 'The following goals are associated with the `archetype` plugin:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下目标与`archetype`插件相关：
- en: '`archetype:generate`: The `generate` goal creates a Maven project corresponding
    to the selected archetype. This accepts the `archetypeGroupId`, `archetypeArtifactId`,
    `archetypeVersion`, `filter`, `interactiveMode`, `archetypeCatalog`, and `baseDir`
    arguments. We have already discussed almost all of these arguments in detail.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:generate`：`generate`目标创建一个与所选原型对应的Maven项目。它接受`archetypeGroupId`、`archetypeArtifactId`、`archetypeVersion`、`filter`、`interactiveMode`、`archetypeCatalog`和`baseDir`参数。我们已经在详细讨论了几乎所有这些参数。'
- en: '`archetype:update-local-catalog`: The `update-local-catalog` goal has to be
    executed against a Maven archetype project. This will update the `local` archetype
    catalog with the new archetype. The `local` archetype catalog is available at
    `~/.m2/archetype-catalog.xml`.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:update-local-catalog`：`update-local-catalog`目标必须在Maven原型项目上执行。这将使用新的原型更新`local`原型目录。`local`原型目录位于`~/.m2/archetype-catalog.xml`。'
- en: '`archetype:jar`: The `jar` goal has to be executed against a Maven archetype
    project, which will create a JAR file out of it. This accepts the `archetypeDirectory`
    argument, which contains the classes; it also accepts the `finalName` argument,
    the name of the JAR file to be generated, and the `outputDirectory` argument,
    which is the location where the final output is copied.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:jar`：`jar`目标必须在Maven原型项目上执行，这将从中创建一个JAR文件。它接受`archetypeDirectory`参数，其中包含类；它还接受`finalName`参数，即要生成的JAR文件的名称，以及`outputDirectory`参数，即最终输出被复制到的位置。'
- en: '`archetype:crawl`: The `crawl` goal crawls through a local or a file system-based
    Maven repository (not remote or via HTTP) and creates an archetype catalogue file.
    This accepts `catalogFile` as an argument (which maps into the `catalog` system
    property), which is the name of the catalogue file to be created. By default,
    this crawls through the `local` Maven repository, and to override the location,
    we need to pass the corresponding repository URL with the `repository` argument.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:crawl`：`crawl`目标会遍历一个本地或基于文件系统的Maven仓库（不是远程或通过HTTP），并创建一个原型目录文件。它接受`catalogFile`作为参数（映射到`catalog`系统属性），即要创建的目录文件的名称。默认情况下，它会遍历`local`
    Maven仓库，要覆盖位置，我们需要通过`repository`参数传递相应的仓库URL。'
- en: '`archetype:create-from-project`: The `create-from-project` goal creates an
    archetype project from an existing project. If you compare this with the `generate`
    goal, then `generate`, in fact, creates a new Maven project from scratch corresponding
    to the selected archetype, while `create-from-project` creates a Maven archetype
    project from an existing project. In other words, `create-from-project` generates
    a template out of an existing Maven project.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:create-from-project`: `create-from-project` 目标可以从现有项目创建一个架构项目。如果您将其与
    `generate` 目标进行比较，那么实际上 `generate` 是从头开始创建一个与所选架构相对应的新 Maven 项目，而 `create-from-project`
    则是从现有项目创建 Maven 架构项目。换句话说，`create-from-project` 是从一个现有的 Maven 项目生成一个模板。'
- en: '`archetype:integration-test`: The `integration-test` goal will execute the
    integration tests associated with the Maven archetype project.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:integration-test`: `integration-test` 目标将执行与 Maven 架构项目相关的集成测试。'
- en: '`archetype:help`: The `help` goal will display the manual associated with the
    `archetype` plugin, listing out all the available goals. If you want to get a
    detailed description of all the goals, then use the `-Ddetail=true` parameter
    along with the command. It is also possible to get help for a given goal. For
    example, the following command will display the help associated with the `generate`
    goal:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:help`: `help` 目标将显示与 `archetype` 插件相关的手册，列出所有可用的目标。如果您想获取所有目标的详细描述，请使用
    `-Ddetail=true` 参数与命令一起使用。也可以为给定的目标获取帮助。例如，以下命令将显示与 `generate` 目标相关的帮助：'
- en: '[PRE21]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Java EE web applications with the archetype plugin
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用架构插件的 Java EE Web 应用程序
- en: 'If you want to start with a Java EE web application, you can simply use the
    `maven-archetype-webapp` archetype to generate the Maven project skeleton, shown
    as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从 Java EE Web 应用程序开始，可以使用 `maven-archetype-webapp` 架构来生成 Maven 项目骨架，如下所示：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding command will produce the following directory structure. One issue
    here is that it does not have the `java` directory just after `src/main`. If you
    want to add any Java code, you need to make sure that you first create an `src/main/java`
    directory and create your Java package under it; otherwise, with the default configuration
    settings, Maven won''t pick your classes for compilation. By default, Maven looks
    for the source code inside `src/main/java`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成以下目录结构。这里的一个问题是它没有在 `src/main` 之后立即创建 `java` 目录。如果您想添加任何 Java 代码，您需要确保首先创建一个
    `src/main/java` 目录，并在其中创建您的 Java 包；否则，使用默认的配置设置，Maven 不会选择您的类进行编译。默认情况下，Maven
    在 `src/main/java` 内查找源代码：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `maven-archetype-webapp` archetype is not the only archetype to generate
    a Java EE project using the `archetype` plugin. Codehaus, a collaborative environment
    to build open source projects, also provides a few archetypes to generate web
    applications. The following example uses the `webapp-javaee6` archetype from Codehaus:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-archetype-webapp` 架构并不是唯一使用 `archetype` 插件生成 Java EE 项目的架构。Codehaus，一个构建开源项目的协作环境，也提供了一些架构来生成
    Web 应用程序。以下示例使用了 Codehaus 的 `webapp-javaee6` 架构：'
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding command will produce the following directory structure. This
    overcomes one of the issues in the `maven-archetype-webapp` archetype, and creates
    the `src/main/java` and `src/test/java` directories. The only issue here is that
    it does not create the `src/main/webapp/WEB-INF` directory, which you will have
    to create manually:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成以下目录结构。这解决了 `maven-archetype-webapp` 架构中的一个问题，并创建了 `src/main/java` 和
    `src/test/java` 目录。这里唯一的问题是它没有创建 `src/main/webapp/WEB-INF` 目录，您需要手动创建它：
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Deploying web applications to a remote Apache Tomcat server
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Web 应用程序部署到远程 Apache Tomcat 服务器
- en: Now, we have created a template web application either using the `maven-archetype-webapp`
    or `webapp-javaee6` archetype. Let's see how to deploy this web application into
    a remote Apache Tomcat application server from Maven itself. Most developers would
    love doing this rather than manual copying.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经使用 `maven-archetype-webapp` 或 `webapp-javaee6` 架构创建了一个模板 Web 应用程序。让我们看看如何从
    Maven 本身将这个 Web 应用程序部署到远程 Apache Tomcat 应用程序服务器。大多数开发者都会喜欢这样做而不是手动复制。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This assumes you have already installed Apache Tomcat in your environment. If
    not, you can download Tomcat 7.x distribution from [http://tomcat.apache.org/download-70.cgi](http://tomcat.apache.org/download-70.cgi)
    and set it up.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设您已经在环境中安装了 Apache Tomcat。如果没有，您可以从 [http://tomcat.apache.org/download-70.cgi](http://tomcat.apache.org/download-70.cgi)
    下载 Tomcat 7.x 发行版并设置它。
- en: 'To deploy the web application, perform the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署 Web 应用程序，请执行以下步骤：
- en: 'As we are going to deploy the web application to a remote Tomcat server, we
    need to have a valid user account that has the privilege to deploy a web application.
    Add the following entries to the `TOMCAT_HOME/conf/tomcat-users.xml` file under
    the `tomcat-users` root element. This will create a user with the name `admin`
    and the password `password`, and the `manager-gui` and `manager-script` roles:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们打算将Web应用程序部署到远程Tomcat服务器，我们需要一个有效的用户账户，该账户具有部署Web应用程序的权限。将以下条目添加到`TOMCAT_HOME/conf/tomcat-users.xml`文件下的`tomcat-users`根元素中。这将创建一个名为`admin`的用户，密码为`password`，并具有`manager-gui`和`manager-script`角色：
- en: '[PRE26]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we need to configure Maven to talk to the remote Tomcat server. Add the
    following configuration to `USER_HOME/.m2/settings.xml` under the `servers` element,
    shown as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要配置Maven以与远程Tomcat服务器通信。将以下配置添加到`USER_HOME/.m2/settings.xml`文件下的`servers`元素中，如下所示：
- en: '[PRE27]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Go inside the root directory of the template web application that we generated
    before (`my-webapp`), and then add the `tomcat7-maven-plugin` to the `pom.xml`
    file available there. The complete `pom.xml` file will look like this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入我们之前生成的模板Web应用程序的根目录（`my-webapp`），然后向该目录下的`pom.xml`文件添加`tomcat7-maven-plugin`。完整的`pom.xml`文件将如下所示：
- en: '[PRE28]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Use the following Maven command to build and deploy the sample web application
    into the Tomcat server. Once it is deployed, you can access it via `http://localhost:8080/my-webapp/`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下Maven命令构建并部署示例Web应用程序到Tomcat服务器。一旦部署，你可以通过`http://localhost:8080/my-webapp/`访问它：
- en: '[PRE29]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To redeploy, use the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要重新部署，使用以下命令：
- en: '[PRE30]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To undeploy, use the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要卸载，使用以下命令：
- en: '[PRE31]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Android mobile applications with the archetype plugin
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原型插件构建Android移动应用程序
- en: 'If you are an Android application developer who wants to start with a skeleton
    Android project, you can use the `android-quickstart` archetype developed by akquinet,
    shown as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名希望从骨架Android项目开始的Android应用程序开发者，你可以使用akquinet开发的`android-quickstart`原型，如下所示：
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This command produces the following skeleton project:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成以下骨架项目：
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To build the Android skeleton project, run the following Maven command from
    the `my-android-app` directory:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建Android骨架项目，从`my-android-app`目录运行以下Maven命令：
- en: '[PRE34]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The previous command looks straightforward, but is based on your Android SDK
    version; therefore, you might encounter certain issues. Some of the possible issues
    and solutions are as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令看起来很简单，但它基于你的Android SDK版本；因此，你可能会遇到某些问题。以下是一些可能的问题和解决方案：
- en: 'You will see the following error if you pass an invalid value to the `android.sdk.path`
    argument:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你向`android.sdk.path`参数传递一个无效的值，你会看到以下错误：
- en: '[PRE35]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The path will point to the Android `sdk` directory, and right under this, you
    will find the `platforms` directory. By setting `android.sdk.path` to the correct
    path, you can avoid this error.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径将指向Android的`sdk`目录，并且就在这个目录下面，你会找到`platforms`目录。通过将`android.sdk.path`设置为正确的路径，你可以避免这个错误。
- en: 'By default, the `android-quickstart` archetype assumes the Android platform
    to be `7`. You will see the following error if the Android platform installed
    in your local machine is different from this:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，`android-quickstart`原型假定Android平台为`7`。如果你的本地机器上安装的Android平台与此不同，你会看到以下错误：
- en: '[PRE36]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: To fix this, open the `pom.xml` file and set the right platform version with
    `<sdk><platform>20</platform></sdk>`.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要修复这个问题，打开`pom.xml`文件，并使用`<sdk><platform>20</platform></sdk>`设置正确的平台版本。
- en: 'By default, the `android-quickstart` archetype assumes that the `aapt` tool
    is available under `sdk/platform-tools`. However, with the latest `sdks`, it''s
    being moved to `sdk/build-tools/android-4.4W`; you will get the following error:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，`android-quickstart`原型假定`aapt`工具位于`sdk/platform-tools`下。然而，随着最新`sdks`的更新，它被移动到了`sdk/build-tools/android-4.4W`；你将得到以下错误：
- en: '[PRE37]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: To fix the error, you need to update the `maven-android-plugin` `version` and
    `artifactId`.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要修复错误，你需要更新`maven-android-plugin`的`version`和`artifactId`。
- en: 'Open up the `pom.xml` file inside the `my-android-app` directory and find the
    following plugin configuration. Change `artifactId` to `android-maven-plugin`
    and version to `4.0.0-rc.1`, shown as follows:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开`my-android-app`目录中的`pom.xml`文件，并找到以下插件配置。将`artifactId`更改为`android-maven-plugin`，版本更改为`4.0.0-rc.1`，如下所示：
- en: '[PRE38]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Once the build is complete, `android-maven-plugin` will produce the `my-android-app-1.0.0.apk`
    and `my-android-app-1.0.0.jar` artifacts inside the `target` directory.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，`android-maven-plugin`将在`target`目录内生成`my-android-app-1.0.0.apk`和`my-android-app-1.0.0.jar`工件。
- en: 'To deploy the skeleton Android application (apk) to the connected device, use
    the following Maven command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要将骨架 Android 应用程序（apk）部署到连接的设备上，请使用以下 Maven 命令：
- en: '[PRE39]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: EJB archives with the archetype plugin
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用架构插件生成的 EJB 归档
- en: 'Here, we will discuss how to create a Maven **Enterprise JavaBeans** (**EJB**)
    project using the `ejb-javaee6` archetype developed by Codehaus, which is a collaborative
    environment to build open source projects:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论如何使用由 Codehaus 开发的 `ejb-javaee6` 架构创建 Maven **企业 JavaBeans**（**EJB**）项目，Codehaus
    是一个构建开源项目的协作环境：
- en: '[PRE40]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The previous command produces the following skeleton project. You can create
    your EJB classes inside `src/main/java/com/packt/samples/ejbapp/`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令会生成以下骨架项目。您可以在 `src/main/java/com/packt/samples/ejbapp/` 目录内创建您的 EJB 类：
- en: '[PRE41]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If you look at the following `pom.xml` file inside `my-ejbapp` directory, you
    will notice that `maven-ejb-plugin` is used internally to produce the EJB artifact:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看 `my-ejbapp` 目录中的以下 `pom.xml` 文件，您会注意到内部使用了 `maven-ejb-plugin` 来生成 EJB
    产物：
- en: '[PRE42]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Even though we have highlighted `ejb-javaee6`, it is not the best out there
    to generate a Maven EJB project. The template produced by the `ejb-javaee6` archetype
    is very basic. Oracle WebLogic has developed a better EJB archetype,—`basic-webapp-ejb`.
    The following example shows how to use the `basic-webapp-ejb` archetype:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已突出显示 `ejb-javaee6`，但它并不是生成 Maven EJB 项目的最佳选择。由 Oracle WebLogic 开发的 `ejb-javaee6`
    架构生成的模板非常基础。Oracle WebLogic 开发了一个更好的 EJB 架构——`basic-webapp-ejb`。以下示例展示了如何使用 `basic-webapp-ejb`
    架构：
- en: '[PRE43]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Prior to executing the previous command, there is more homework to be done.
    The `basic-webapp-ejb` archetype is not available in any public Maven repositories.
    First, you need to download the WebLogic distribution from [http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html](http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html),
    and then install it locally by performing the instructions given in the `README.txt`
    file. Once the installation is complete, the `basic-webapp-ejb` archetype and
    `weblogic-maven-plugin` can be installed into the local Maven repository, shown
    as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上一个命令之前，还有更多作业要做。`basic-webapp-ejb` 架构在任何一个公共 Maven 仓库中都是不可用的。首先，您需要从 [http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html](http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html)
    下载 WebLogic 发行版，然后按照 `README.txt` 文件中的说明进行本地安装。安装完成后，`basic-webapp-ejb` 架构和 `weblogic-maven-plugin`
    可以安装到本地 Maven 仓库中，如下所示：
- en: 'Go to `wls12130/wlserver/server/lib` and execute the following command. This
    will build the plugin JAR file using the WebLogic JarBuilder tool:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `wls12130/wlserver/server/lib` 目录并执行以下命令。这将使用 WebLogic JarBuilder 工具构建插件
    JAR 文件：
- en: '[PRE44]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The previous command will create the `weblogic-maven-plugin.jar` file. Now,
    we need to extract it out to get the `pom.xml` file. From `wls12130/wlserver/server/lib`,
    execute the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将创建 `weblogic-maven-plugin.jar` 文件。现在，我们需要将其提取出来以获取 `pom.xml` 文件。从 `wls12130/wlserver/server/lib`
    目录执行以下命令：
- en: '[PRE45]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, we need to copy the `pom.xml` file to `wls12130/wlserver/server/lib`.
    From `wls12130/wlserver/server/lib`, execute the following command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将 `pom.xml` 文件复制到 `wls12130/wlserver/server/lib`。从 `wls12130/wlserver/server/lib`
    目录执行以下命令：
- en: '[PRE46]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, we can install `weblogic-maven-plugin.jar` into the `local` Maven repository.
    From `wls12130/wlserver/server/lib`, execute the following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将 `weblogic-maven-plugin.jar` 安装到 `local` Maven 仓库中。从 `wls12130/wlserver/server/lib`
    目录执行以下命令：
- en: '[PRE47]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In addition to the plugin, we also need to install the `basic-webapp-ejb` archetype.
    To do this, go to `wls12130/oracle_common/plugins/maven/com/oracle/maven/oracle-maven-sync/12.1.3`
    and execute the following two commands. Note that `oracle_common` is a hidden
    directory. If you are using a different version of WebLogic instead of 12.1.3,
    use the number associated with your version:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了插件之外，我们还需要安装 `basic-webapp-ejb` 架构。为此，请前往 `wls12130/oracle_common/plugins/maven/com/oracle/maven/oracle-maven-sync/12.1.3`
    并执行以下两个命令。请注意，`oracle_common` 是一个隐藏目录。如果您使用的是 WebLogic 的不同版本而不是 12.1.3，请使用与您的版本相关的数字：
- en: '[PRE48]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Once you are done with these steps, you can execute the following command to
    generate the EJB template project using the WebLogic `basic-webapp-ejb` archetype.
    Make sure that you have the right version of `archetypeVersion`; this should match
    the archetype version that comes with your WebLogic distribution:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，您可以使用WebLogic的`basic-webapp-ejb`存档来生成EJB模板项目。请确保您有正确的`archetypeVersion`版本；这应该与您WebLogic发行版中包含的存档版本相匹配：
- en: '[PRE49]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This command produces the following skeleton project:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令生成以下项目骨架：
- en: '[PRE50]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To package the EJB archive, execute the following command from the `my-ejbapp`
    directory. This will produce `basicWebappEjb.war` inside the `target` directory.
    Now, you can deploy this WAR file into your Java EE application server, which
    supports EJB:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要打包EJB存档，请从`my-ejbapp`目录执行以下命令。这将生成`target`目录中的`basicWebappEjb.war`。现在，您可以将这个WAR文件部署到支持EJB的Java
    EE应用程序服务器中。
- en: '[PRE51]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: JIRA plugins with the archetype plugin
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用存档插件的JIRA插件
- en: 'JIRA is an issue-tracking system developed by Atlassian. It is quite popular
    among many open source projects. One of the extension points in JIRA is its plugins.
    Here, we will see how to generate a skeleton JIRA plugin using `jira-plugin-archetype`
    developed by Atlassian:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA是由Atlassian开发的一个问题跟踪系统。它在许多开源项目中非常受欢迎。JIRA的一个扩展点是它的插件。在这里，我们将看到如何使用Atlassian开发的`jira-plugin-archetype`生成骨架JIRA插件：
- en: '[PRE52]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This command will produce the following project template:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成以下项目模板：
- en: '[PRE53]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Spring MVC applications with the archetype plugin
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用存档插件构建的Spring MVC应用程序
- en: Spring **model view controller** (**MVC**) is a web application framework developed
    under the Spring framework, which is an open source application framework and
    an inversion of the control container. Here, we will see how to generate a template
    Spring MVC application using the `spring-mvc-quickstart` archetype.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Spring **模型视图控制器**（**MVC**）是在Spring框架下开发的一个Web应用程序框架，Spring是一个开源的应用程序框架，也是一个控制反转容器。在这里，我们将看到如何使用`spring-mvc-quickstart`存档生成模板Spring
    MVC应用程序。
- en: Note
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To know more about the Spring MVC framework, refer to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Spring MVC框架的信息，请参阅[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html)。
- en: 'Currently, the `spring-mvc-quickstart` archetype is not available in any of
    the public Maven repositories, so we have to download it from GitHub and build
    from the source, shown as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`spring-mvc-quickstart`存档在任何一个公共Maven仓库中都不可用，因此我们必须从GitHub下载它并从源代码构建，如下所示：
- en: '[PRE54]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Once the archetype is built from the source and is available in the `local`
    Maven repository, you can execute the following command to generate the template
    Spring MVC application:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从源代码构建存档并在本地Maven仓库中可用，您可以通过执行以下命令来生成模板Spring MVC应用程序：
- en: '[PRE55]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This will produce the following project template:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下项目模板：
- en: '[PRE56]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Let''s see how to run the template Spring MVC application with the embedded
    Tomcat via Maven itself. Once the server is up, you can browse through the web
    application via `http://localhost:8080/my-spring-app`. The embedded Tomcat can
    be launched via the `run` goal of the `tomcat7` plugin, shown as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过Maven本身运行模板Spring MVC应用程序，并通过内嵌的Tomcat。一旦服务器启动，您可以通过`http://localhost:8080/my-spring-app`浏览Web应用程序。可以通过`tomcat7`插件的`run`目标启动内嵌的Tomcat，如下所示：
- en: '[PRE57]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about the `tomcat7` plugin are available at [http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/](http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`tomcat7`插件的更多详细信息可在[http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/](http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/)找到。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on Maven archetypes. Maven archetypes provide a
    way of reducing repetitive work in building Maven projects. There are thousands
    of archetypes out there available publicly to assist you when building different
    types of projects. This chapter covered a commonly used set of archetypes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于Maven存档。Maven存档提供了一种减少构建Maven项目重复工作的方法。有成千上万的存档可供公开使用，以帮助您构建不同类型的项目。本章涵盖了常用的一组存档。
- en: In the next chapter, we will look into Maven plugins.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Maven插件。
