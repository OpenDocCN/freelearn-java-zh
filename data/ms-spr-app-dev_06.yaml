- en: Chapter 6. Spring Integration with HTTP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Spring集成与HTTP
- en: In this chapter, let us see how the Spring Integration package supports the
    HTTP protocol. We shall also look into HTTP and its features to get a better understanding
    of performing HTTP operations with the Spring framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，让我们看看Spring集成包如何支持HTTP协议。我们还将深入了解HTTP及其特性，以更好地理解如何使用Spring框架执行HTTP操作。
- en: '**HTTP** stands for **Hyper Text Transfer Protocol**, which, in turn, stands
    for secure connection. This protocol comes under an application layer used for
    data transfer. It uses **Transmission Control** **Protocol/Internet Protocol**
    (**TCP/IP**) communication for data transfers. HTTP is a connectionless and stateless
    protocol, since the server and client are only aware of each other during request
    and response time. Any type of data can be sent across HTTP, as long as the server
    and client are able to handle it. The requests are sent via a web URL, that is
    a uniform resource locator. The URL contains the following parts: `http://www.domainname.com/path/?abc=xyz`'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP**代表**超文本传输协议**，它又代表安全连接。该协议属于用于数据传输的应用层。它使用**传输控制** **协议/互联网协议**（**TCP/IP**）通信进行数据传输。HTTP是一种无连接和无状态的协议，因为服务器和客户端只在请求和响应时相互知晓。只要服务器和客户端能够处理，任何类型的数据都可以通过HTTP发送。请求通过Web
    URL发送，即统一资源定位符。URL包含以下部分：`http://www.domainname.com/path/?abc=xyz`'
- en: 'Protocol: `http://` or `https://`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议：`http://`或`https://`
- en: 'Host: `www.domainname.com`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机：`www.domainname.com`
- en: 'Resource path: `path`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源路径：`path`
- en: 'Query: `abc=xyz`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询：`abc=xyz`
- en: HTTP methods and status codes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP方法和状态代码
- en: Let us look at the HTTP methods and status codes. The HTTP methods are a communication
    channel for performing operations on the HTTP protocol.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看HTTP方法和状态代码。HTTP方法是HTTP协议上执行操作的通信渠道。
- en: 'The following are the HTTP methods used:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用的HTTP方法：
- en: '`GET`: This gets the existing resource for a given identifier.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：这获取给定标识符的现有资源。'
- en: '`PUT`: This puts a new resource.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：这放置一个新资源。'
- en: '`POST`: This updates the existing resource.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：这将更新现有资源。'
- en: '`DELETE`: This deletes the existing resource.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：这将删除现有资源。'
- en: Status code is human readable diagnostic information about HTTP messages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 状态代码是关于HTTP消息的人类可读的诊断信息。
- en: 'The following table shows all the available status codes and their meanings:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了所有可用状态代码及其含义：
- en: '| Status code | Meaning |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 状态代码 | 含义 |'
- en: '| --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 200 | The request has succeeded |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 200 | 请求成功 |'
- en: '| 201 | The POST method was executed successfully |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 201 | POST方法成功执行 |'
- en: '| 202 | The request has been accepted for processing |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 202 | 请求已被接受进行处理 |'
- en: '| 203 | No authorization for the information |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 203 | 未授权查看信息 |'
- en: '| 204 | No response from the server |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 204 | 服务器没有响应 |'
- en: '| 301 | The data requested is moved to a new URL |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 301 | 请求的数据已移至新URL |'
- en: '| 302 | Forward action required for the request to be completely fulfilled
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 302 | 请求需要进行前向操作才能完全实现 |'
- en: '| 303 | All the 3XX codes point to different URL for various actions like forwarding
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 303 | 所有3XX代码都指向不同的URL，用于不同的操作，如转发 |'
- en: '| 304 | Cache not modified properly |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 304 | 缓存未正确修改 |'
- en: '| 400 | Bad syntax |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 400 | 语法错误 |'
- en: '| 401 | Unauthorized request |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 401 | 未经授权的请求 |'
- en: '| 402 | Charge to header not matching |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 402 | 头部收费不匹配 |'
- en: '| 403 | Forbidden request |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 403 | 禁止请求 |'
- en: '| 404 | Resource not found as per the provided URL |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 404 | 根据提供的URL未找到资源 |'
- en: '| 500 | Unexpected error on the server |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 500 | 服务器发生意外错误 |'
- en: '| 501 | Server doesn''t support the action |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 501 | 服务器不支持该操作 |'
- en: '| 502 | Too much load on the server |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 502 | 服务器负载过重 |'
- en: '| 503 | Gateway time out. Server is trying to access data from some other resource
    or service but it did not get the required response from it. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 503 | 网关超时。服务器正在尝试从其他资源或服务访问数据，但未收到所需的响应。 |'
- en: HTTP headers
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP标头
- en: These headers are found in the messages of HTTP request and response. They are
    just name value strings that are separated by a colon. Information like content
    type, caching, response types, can be directly given in the headers. Headers don't
    generally have any size limits but there are restrictions from the servers on
    the header size.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标头在HTTP请求和响应的消息中找到。它们只是由冒号分隔的名称值字符串。内容类型、缓存、响应类型等信息可以直接在标头中给出。标头通常没有任何大小限制，但服务器对标头大小有限制。
- en: HTTP time-out
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP超时
- en: This is a 408 status code, which shows up on a webpage when the server is trying
    to access the data too many times and is not getting any response. This kind of
    error comes up, even when the servers are running slowly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个408状态代码，当服务器尝试访问数据太多次而没有得到任何响应时，它会出现在网页上。即使服务器运行缓慢，也会出现这种错误。
- en: Timeouts can happen in two scenarios, one while interacting with the Spring
    Integration channels, which can be an inbound channel or an outbound channel,
    or while interacting with a HTTP server, which is in a remote location.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 超时可能发生在两种情况下，一种是与Spring集成通道交互时，可以是入站通道或出站通道，另一种是与远程位置的HTTP服务器交互时。
- en: The time out support is done with the `RestTemplate` class available in the
    Spring Framework. Following is the sample configuration which can be used with
    Gateways and Outbound Adapters available with Spring Integration for HTTP.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 超时支持是使用Spring框架中可用的`RestTemplate`类完成的。以下是可用于与Spring集成中的HTTP网关和出站适配器的示例配置。
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: HTTP proxy settings in Java
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的HTTP代理设置
- en: 'The proxy settings are supported by Java system properties. These properties
    can be set to use the server, which has proxy settings. The following are the
    properties that can be set:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 代理设置由Java系统属性支持。这些属性可以设置为使用具有代理设置的服务器。以下是可以设置的属性：
- en: '`http.proxyHost`: The host name of the proxy server.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.proxyHost`：代理服务器的主机名。'
- en: '`http.proxyPort`: The port number, the default value being 80.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.proxyPort`：端口号，默认值为80。'
- en: '`http.nonProxyHosts`: A list of hosts that should be reached directly, bypassing
    the proxy. This is a list of patterns separated by a `|` character. The patterns
    may start or end with a `*` character for wildcards. Any host matching one of
    these patterns will be reached through a direct connection instead of through
    a proxy.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.nonProxyHosts`：应直接到达的主机列表，绕过代理。这是一个由`|`字符分隔的模式列表。这些模式可以以`*`字符开始或结束，用作通配符。匹配这些模式之一的任何主机将通过直接连接而不是通过代理到达。'
- en: 'The following are the proxy settings available for the secured HTTP:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于安全HTTP的代理设置：
- en: '`https.proxyHost`: The host name of the proxy server.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https.proxyHost`：代理服务器的主机名。'
- en: '`https.proxyPort`: The port number, the default value being 80.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https.proxyPort`：端口号，默认值为80。'
- en: Proxy configuration support in Spring
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring中的代理配置支持
- en: 'Spring supports proxy configuration. We just need to configure the bean `SimpleClientHttpRequestFactory`
    which has a property proxy with `java.net.Proxy` bean. A sample configuration
    is shown in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Spring支持代理配置。我们只需要配置`SimpleClientHttpRequestFactory` bean，它具有一个带有`java.net.Proxy`
    bean的代理属性。以下代码显示了一个示例配置：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Spring Integration support for HTTP
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring集成对HTTP的支持
- en: 'Spring provides extended support to HTTP with adapters just like FTP, which
    consists of gateway implementation. Spring supports HTTP using the following two
    gateway implementations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Spring通过适配器扩展了对HTTP的支持，就像FTP一样，其中包括网关实现。Spring支持HTTP使用以下两种网关实现：
- en: '`HttpInboundEndpoint`: To receive messages over HTTP we need to use either
    an adapter or an available gateway. The inbound adapter is called HTTP inbound
    adapter and the gateway is called HTTP inbound gateway. The adapter needs a servlet
    container, such as the Tomcat server or Jetty server. We need to make a web application
    with `web.xml,` with servlet configuration, and deploy it on the webserver. Spring
    itself provides a servlet called.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpInboundEndpoint`：要通过HTTP接收消息，我们需要使用适配器或可用的网关。入站适配器称为HTTP入站适配器，网关称为HTTP入站网关。适配器需要一个servlet容器，比如Tomcat服务器或Jetty服务器。我们需要制作一个带有servlet配置的web应用程序，并将其部署到web服务器上。Spring本身提供了一个名为的servlet。'
- en: '`HttpRequestHandlerServlet`: This class extends a normal `HttpServlet`, and
    is available under the package `org.springframework.web.context.support.HttpRequestHandlerServlet`.
    Since it extends `HttpServlet`, it also overrides the `init()` and `service()`
    methods.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HttpRequestHandlerServlet：这个类扩展了普通的`HttpServlet`，并且位于`org.springframework.web.context.support.HttpRequestHandlerServlet`包下。由于它扩展了`HttpServlet`，它还覆盖了`init()`和`service()`方法。
- en: 'The following is the servlet configuration in a `web.xml` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`web.xml`文件中的servlet配置：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is a gateway configuration for handling inbound HTTP requests.
    The gateway accepts a list of message converters, which will get converted from
    `HttpServletRequest` to message:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是处理入站HTTP请求的网关配置。该网关接受一系列消息转换器，这些转换器将从`HttpServletRequest`转换为消息：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Spring Integration support for multipart HTTP requests
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring集成对多部分HTTP请求的支持
- en: If the HTTP request is wrapped, the `MultipartHttpServletRequest` converters
    will convert the request to message payload, and this is nothing but a `MultiValueMap`.
    This map will have values, which are instances of Spring's multipart. The values
    are decided based on the content type. Values can also be byte arrays or strings.
    By default, if there is a bean by the name `MultipartResolver,` it gets recognized
    by the Spring's integration framework; if there is a bean with the name `multipartResolver,`
    it, in turn, enables the context. This will enable the inbound request mapper.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HTTP请求被包装，`MultipartHttpServletRequest`转换器将把请求转换为消息载荷，这只是一个`MultiValueMap`。这个映射将有值，这些值是Spring的多部分的实例。值是根据内容类型决定的。值也可以是字节数组或字符串。默认情况下，如果有一个名为`MultipartResolver`的bean，它会被Spring的集成框架识别；如果有一个名为`multipartResolver`的bean，它反过来会启用上下文。这将启用入站请求映射。
- en: Spring Integration support for HTTP responses
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring集成对HTTP响应的支持
- en: Response to HTTP requests is usually sent with a 200Ok status code. To customize
    the response further, you can use the Spring MVC framework. In the Spring MVC
    application, we have an option to customize the response. We can provide a `viewName`
    to the response, which gets resolved by Spring MVC `ViewResolver`. We can configure
    the gateway to behave like a spring controller, which returns a view name as a
    response to the framework, and we can also configure the HTTP methods.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对HTTP请求的响应通常以200Ok状态码发送。要进一步自定义响应，可以使用Spring MVC框架。在Spring MVC应用程序中，我们有一个选项来自定义响应。我们可以为响应提供一个`viewName`，这个`viewName`会被Spring
    MVC的`ViewResolver`解析。我们可以配置网关以像Spring控制器一样运行，它返回一个视图名称作为框架的响应，我们还可以配置HTTP方法。
- en: 'In the following configuration, you can see that we have used an integration
    package and have configured the `HttpRequestHandlingController` bean with the
    following properties:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下配置中，您可以看到我们使用了一个集成包，并配置了`HttpRequestHandlingController` bean的以下属性：
- en: '`HttpRequestChannel`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpRequestChannel`'
- en: '`HttpReplyChannel`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpReplyChannel`'
- en: '`viewName`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viewName`'
- en: '`SupportedMedthodNames`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SupportedMedthodNames`'
- en: The following code snippet shows the configuration for `HttpInbound` bean.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下代码片段显示了`HttpInbound` bean的配置。
- en: We can also configure the supported HTTP Methods.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以配置支持的HTTP方法。
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring the outbound HTTP messages
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置出站HTTP消息
- en: Spring provides `HttpRequestExecutingMessageHandler,` which takes a string URL
    as a constructor argument. The class has a property called `ReponseChannel,` which
    also needs to be configured.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了`HttpRequestExecutingMessageHandler`，它以字符串URL作为构造函数参数。该类有一个名为`ReponseChannel`的属性，也需要进行配置。
- en: The bean will call the `RestTemplate` class by reading the URL configured in
    the constructor, which the `RestTemplate` calls `HttpMessageConverters`. The list
    of `HttpMessageConverters` are read and the `HttpRequest` body is generated.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该bean将通过读取构造函数中配置的URL调用`RestTemplate`类，`RestTemplate`调用`HttpMessageConverters`。读取`HttpMessageConverters`列表，并生成`HttpRequest`主体。
- en: 'The converter and `HttpRequestExecutingMessageHandler` are shown in the following
    code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 转换器和`HttpRequestExecutingMessageHandler`在以下代码中显示：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: OR
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Configuring cookies with OutboundGateway
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置出站网关的cookies
- en: '`OutboundGateway` has attribute transfer cookies, which accept Boolean values
    that are true or false. The header, in response, contains a set cookies parameter,
    which will convert the response to a cookie if the `transfer-cookie` attribute
    is set to `True`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`OutboundGateway`具有传输cookies属性，接受true或false的布尔值。响应中的标头包含一个设置cookies参数，如果`transfer-cookie`属性设置为`True`，则将响应转换为cookie。'
- en: Configuring InboundGateway with both no response and with the response
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置既无响应又有响应的入站网关
- en: 'Use the following code in order to configure an `InboundGateway` request with
    no response:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码配置无响应的`InboundGateway`请求：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For the requests which need a response:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要响应的请求：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: RequestMapping support for an inbound channel adapter or a gateway
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入站通道适配器或网关的RequestMapping支持
- en: 'The `requestmapping` configuration can be done for an inbound channel adapter,
    or a gateway, as shown in the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`requestmapping`配置可以用于入站通道适配器或网关，如下所示：'
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Based on this configuration, the namespace parser creates an instance of `IntegrationRequestMappingHandlerMapping`
    (if none exist yet), a `HttpRequestHandlingController` bean, and associated with
    it, an instance of `RequestMapping`, which, in turn, is converted to Spring MVC `RequestMappingInfo`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此配置，命名空间解析器将创建`IntegrationRequestMappingHandlerMapping`的实例（如果尚不存在），`HttpRequestHandlingController`
    bean，并与之关联`RequestMapping`的实例，然后将其转换为Spring MVC的`RequestMappingInfo`。
- en: With the path and supported method, the attributes of `<http:inbound-channel-adapter>`,
    or `<http:inbound-gateway>`, `<request-mapping>` translate directly into the respective
    options provided by the `org.springframework.web.bind.annotation.RequestMapping`
    annotation in Spring MVC.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用路径和支持的方法，`<http:inbound-channel-adapter>`或`<http:inbound-gateway>`的属性，`<request-mapping>`直接转换为Spring
    MVC中`org.springframework.web.bind.annotation.RequestMapping`注解提供的相应选项。
- en: The `<request-mapping>` subelement allows you to configure several Spring integration
    HTTP inbound endpoints to the same path (or even the same supported methods),
    and to provide different downstream message flows based on incoming HTTP requests.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`<request-mapping>`子元素允许您配置多个Spring集成HTTP入站端点到相同的路径（甚至相同的支持方法），并根据传入的HTTP请求提供不同的下游消息流。'
- en: Configuring the RequestMapping using the HTTP inbound endpoint
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTTP入站端点配置RequestMapping
- en: 'We can also declare just one HTTP inbound endpoint and apply routing and filtering
    logic within the Spring Integration flow to achieve the same result. This allows
    you to get the message into a flow as early as possible, for example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以声明一个HTTP入站端点，并在Spring集成流程中应用路由和过滤逻辑，以实现相同的结果。这允许您尽早将消息传递到流程中，例如：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Configuring the inbound channel adapter to read request information from the
    URL
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置入站通道适配器以从URL读取请求信息
- en: We can also configure the inbound channel adapter to accept requests using the
    URI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以配置入站通道适配器以接受使用URI的请求。
- en: 'The URI can be `/param1/{param-value1}/param2/{param-value2}`. The URI template
    variables are mapped with a message payload by the payload expression attribute.
    Certain variables in the URI path can also be mapped with the header:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: URI可以是`/param1/{param-value1}/param2/{param-value2}`。 URI模板变量通过有效负载表达式属性与消息有效负载进行映射。
    URI路径中的某些变量也可以与标头进行映射：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is a list of payload expressions that can be used in a configuration:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以在配置中使用的有效负载表达式列表：
- en: '`#requestParams`: The `MultiValueMap` from the `ServletRequest` parameter map.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#requestParams`：来自`ServletRequest`参数映射的`MultiValueMap`。'
- en: '`#pathVariables`: The map from URI template placeholders and their values.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#pathVariables`：URI模板占位符及其值的映射。'
- en: '`#matrixVariables`: The map of `MultiValueMap`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#matrixVariables`：`MultiValueMap`的映射。'
- en: '`#requestAttributes`: The `org.springframework.web.context.request.RequestAttributes`
    associated with the current request.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#requestAttributes`：与当前请求关联的`org.springframework.web.context.request.RequestAttributes`。'
- en: '`#requestHeaders`: The `org.springframework.http.HttpHeaders` object from the
    current request.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#requestHeaders`：当前请求的`org.springframework.http.HttpHeaders`对象。'
- en: '`#cookies`: The map `<String, Cookie>` of `javax.servlet.http.Cookies` from
    the current request.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#cookies`：当前请求的`javax.servlet.http.Cookies`的`<String，Cookie>`映射。'
- en: Configuring the outbound gateway for HTTP responses
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为HTTP响应配置出站网关
- en: 'The outbound gateway or outbound channel adapter configuration is related to
    a HTTP response, and options to configure the response. The default response type
    for a HTTP request is null. The response method is usually POST. If the response
    type is null and the HTTP status code is null, then the reply message will have
    the `ResponseEntity` object. In the following sample configuration, we have configured
    the expected:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 出站网关或出站通道适配器配置与HTTP响应相关，并提供配置响应的选项。 HTTP请求的默认响应类型为null。响应方法通常为POST。如果响应类型为null且HTTP状态代码为null，则回复消息将具有`ResponseEntity`对象。在以下示例配置中，我们已配置了预期：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Configuring the outbound adapter for different response types
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同的响应类型配置出站适配器
- en: We shall now show you two samples of configuring the outbound adapter with different
    response types.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向您展示两个配置出站适配器的示例，使用不同的响应类型。
- en: 'Here, the expected response type expression is used with a value payload:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用预期的响应类型表达式与值有效负载：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, configure the outbound channel adapter to give a string response:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，配置出站通道适配器以提供字符串响应：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Mapping URI variables as subelement with an HTTP outbound gateway and an outbound
    channel adapter
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将URI变量映射为HTTP出站网关和出站通道适配器的子元素
- en: In this section, we shall see the use of a URI variable, and URI variable expressions,
    as a subelement with the HTTP outbound gateway configuration.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到URI变量和URI变量表达式的用法，作为HTTP出站网关配置的子元素。
- en: 'If your URL contains URI variables, you can map them using the Uri-variable
    subelement. This subelement is available for the HTTP outbound gateway and the
    HTTP outbound channel adapter:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的URL包含URI变量，可以使用Uri-variable子元素进行映射。此子元素适用于HTTP出站网关和HTTP出站通道适配器：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `Uri-variable` subelement defines two attributes: `name` and `expression`.
    The `name` attribute identifies the name of the URI variable, while the `expression`
    attribute is used to set the actual value. Using the `expression` attribute, you
    can leverage the full power of **Spring Expression Language** (**SpEL**), which
    gives you full dynamic access to the message payload and the message headers.
    For example, in the above configuration the `getZip()` method will be invoked
    on the payload object of the message, and the result of that method will be used
    as a value for the URI variable named `zipCode`.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Uri-variable`子元素定义了两个属性：`name`和`expression`。`name`属性标识URI变量的名称，而`expression`属性用于设置实际值。使用`expression`属性，您可以利用**Spring
    Expression Language**（**SpEL**）的全部功能，这使您可以完全动态地访问消息负载和消息标头。例如，在上面的配置中，将在消息的负载对象上调用`getZip()`方法，并且该方法的结果将用作名为`zipCode`的URI变量的值。'
- en: 'Since Spring Integration 3.0, HTTP outbound endpoints support the `Uri-variables-expression`
    attributes to specify an `Expression` which should be evaluated, resulting in
    a map for all URI variable placeholders within the URL template. It provides a
    mechanism whereby different variable expressions can be used based on the outbound
    message. This attribute is mutually exclusive with the `<Uri-variable/>` subelement:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 自Spring Integration 3.0以来，HTTP出站端点支持`Uri-variables-expression`属性，用于指定应该评估的`Expression`，从而为URL模板中的所有URI变量占位符生成一个映射。它提供了一种机制，可以根据出站消息使用不同的变量表达式。此属性与`<Uri-variable/>`子元素互斥：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Handling time-out with the HTTP outbound gateway and the HTTP inbound gateway
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTTP出站网关和HTTP入站网关处理超时
- en: 'The following table shows the difference in handling the HTTP outbound and
    HTTP inbound gateway:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了处理HTTP出站和HTTP入站网关的差异：
- en: '| **Time-out in HTTP outbound gateway** | **Time-Out in HTTP inbound gateway**
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **HTTP出站网关中的超时** | **HTTP入站网关中的超时** |'
- en: '| `ReplyTimeOut` maps to `sendTimeOut` property of `HttpRequestExecutingMessageHandler`.
    | Here, we use the `RequestTimeOut` attribute which maps the `requestTimeProperty`
    of `HttpRequestHandlingMessagingGateway` class. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `ReplyTimeOut`映射到`HttpRequestExecutingMessageHandler`的`sendTimeOut`属性。| 在这里，我们使用`RequestTimeOut`属性，它映射到`HttpRequestHandlingMessagingGateway`类的`requestTimeProperty`。'
- en: '| `sendTimeOut` default value is `1,` which is sent to `MessageChannel`. |
    Default timeout properties in 1,000 ms. Timeout properties will be used set `sendTimeOut`
    parameter used in `MessagingTemplate` instance. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `sendTimeOut`的默认值为`1`，发送到`MessageChannel`。| 默认超时属性为1,000毫秒。超时属性将用于设置`MessagingTemplate`实例中使用的`sendTimeOut`参数。'
- en: Spring support for header customizations
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring对标头自定义的支持
- en: If we need to do further customization to the header, then the Spring Integration
    package provides us with complete support. If we explicitly specify the header
    names in the configuration with comma separated values, the default behavior will
    be overridden.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要对标头进行进一步的自定义，则Spring Integration包为我们提供了完整的支持。如果在配置中明确指定标头名称，并使用逗号分隔的值，将覆盖默认行为。
- en: 'The following is the configuration for further header customization:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是进一步标头自定义的配置：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Another option is to use the header-mapper attribute, which takes the `DefaultHttpHeaderMapper`
    class configurations.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用header-mapper属性，该属性采用DefaultHttpHeaderMapper类的配置。
- en: The class comes with factory methods that are static for inbound and outbound
    adapters.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该类配备了用于入站和出站适配器的静态工厂方法。
- en: 'The following is the configuration for the `header-mapper` attribute:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`header-mapper`属性的配置：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sending multipart HTTP requests using Spring's RestTemplate
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring的RestTemplate发送多部分HTTP请求
- en: Most of the time, we have implemented file upload functionality in our application.
    Files are sent over HTTP as a multipart request.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，我们在应用程序中实现了文件上传功能。文件作为多部分请求通过HTTP发送。
- en: In this section, let us see how we can configure the inbound channel adapter
    using `RestTemplate` to send a file over HTTP request.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看如何使用`RestTemplate`配置入站通道适配器以通过HTTP请求发送文件。
- en: 'Let us configure the server with the inbound channel adapter and then write
    a client for it:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用入站通道适配器配置服务器，然后为其编写客户端：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `httpInboundAdapter` will receive the request and convert it to a message
    with a payload `LinkedMultiValueMap`. Then, we will be parsing that in the `multipartReceiver`
    service activator:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpInboundAdapter`将接收请求并将其转换为带有`LinkedMultiValueMap`负载的消息。然后，我们将在`multipartReceiver`服务激活器中解析它。'
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, let us write a client. By client, we mean creating a map and adding the
    file to it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个客户端。通过客户端，我们指的是创建一个地图并向其中添加文件。
- en: 'We shall now create a `MultiValueMap`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个`MultiValueMap`：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The map can be populated with values, such as details of a person:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地图可以填充值，例如个人的详细信息：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This step is to create headers and set the content type:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此步骤是创建标头并设置内容类型：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We need to pass the `header` and `map` as a request to the `HttpEntity`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将`header`和`map`作为请求传递给`HttpEntity`：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let us use `RestTemplate` to pass the request:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`RestTemplate`传递请求：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We should now get an output in which the photo is uploaded on the server.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该得到一个输出，其中照片已上传到服务器。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learnt about HTTP and Spring Integration support for
    accessing HTTP methods and requests. We have also demonstrated multipart requests
    and responses, and have shown how to configure the inbound and outbound HTTP gateways
    and adapters.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了HTTP和Spring Integration对访问HTTP方法和请求的支持。我们还演示了多部分请求和响应，并展示了如何配置入站和出站HTTP网关和适配器。
- en: We have learnt about sending multipart HTTP requests by configuring the Spring's
    inbound and outbound gateway. We have also demonstrated how we can use multi-value
    maps to populate the request and put the map in the HTTP header. Lastly, we have
    seen the list of payload expressions available.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了通过配置Spring的入站和出站网关来发送多部分HTTP请求。我们还演示了如何使用多值映射来填充请求并将映射放入HTTP头部。最后，我们看到了可用的有效负载表达式列表。
- en: In the next chapter, let us look at Spring's support to Hadoop.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，让我们来看看Spring对Hadoop的支持。
