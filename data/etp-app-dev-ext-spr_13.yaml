- en: Chapter 13. Moving Your Application to Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 将您的应用程序移至生产环境
- en: 'The development work is over and it is time to deploy our application to the
    production server. If only it were so simple! Enterprise applications require
    formal processes to be followed, customer or business owner sign-offs, internal
    testing, **User Acceptance Testing** (**UAT**), and many more such hurdles to
    be overcome before an application is ready for production deployment. This chapter
    will explore the following two key areas:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开发工作已经结束，现在是将应用程序部署到生产服务器的时候了。如果只是这么简单！企业应用程序需要遵循正式流程，需要客户或业务所有者的签署，内部测试，用户验收测试（UAT）等许多障碍，才能准备好进行生产部署。本章将探讨以下两个关键领域：
- en: Using Maven to build and compile Ext JS 4 applications for production use
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven构建和编译Ext JS 4应用程序以供生产使用
- en: GlassFish 4 deployment and configuration concepts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GlassFish 4部署和配置概念
- en: We will start by examining the Sencha Cmd compiler.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先检查Sencha Cmd编译器。
- en: Compiling with Sencha Cmd
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd进行编译
- en: In [Chapter 9](ch09.html "Chapter 9. Getting Started with Ext JS 4"), *Getting
    Started with Ext JS 4*, we went through the process of using Sencha Cmd to generate
    the Ext JS 4 application skeleton and to create basic components. This section
    will focus on using Sencha Cmd to compile our Ext JS 4 application for deployment
    within a **Web Archive** (**WAR**) file. The goal of the compilation process is
    to create a single JavaScript file that contains all of the code needed for the
    application, including all the Ext JS 4 dependencies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章 开始使用Ext JS 4")中，*开始使用Ext JS 4*，我们通过使用Sencha Cmd生成Ext JS
    4应用程序骨架并创建基本组件的过程。本节将重点介绍使用Sencha Cmd编译我们的Ext JS 4应用程序，以便部署到Web Archive（WAR）文件中。编译过程的目标是创建一个包含应用程序所需的所有代码的单个JavaScript文件，包括所有Ext
    JS 4依赖项。
- en: 'The `index.html` file that was created during the application skeleton generation
    is structured as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序骨架生成期间创建的`index.html`文件结构如下：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The open and close tags of the `x-compile` directive enclose the part of the
    `index.html` file where the Sencha Cmd compiler will operate. The only declarations
    that should be contained in this block are the script tags. The compiler will
    process all of the scripts within the `x-compile` directive, searching for dependencies
    based on the `Ext.define`, `requires`, or `uses` directives.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`x-compile`指令的开放和关闭标签将包围`index.html`文件中Sencha Cmd编译器将操作的部分。此块中应包含的唯一声明是脚本标签。编译器将处理`x-compile`指令中的所有脚本，根据`Ext.define`、`requires`或`uses`指令搜索依赖项。'
- en: An exception to this is the `ext-dev.js` file. This file is considered to be
    a "bootstrap" file for the framework and will not be processed in the same way.
    The compiler ignores the files in the `x-bootstrap` block and the declarations
    are removed from the final compiler-generated page.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`ext-dev.js`文件是一个例外。该文件被视为框架的“引导”文件，并且不会以相同的方式进行处理。编译器会忽略`x-bootstrap`块中的文件，并且声明将从最终由编译器生成的页面中删除。'
- en: 'The first step in the compilation process is to examine and parse all the JavaScript
    source code and analyze any dependencies. To do this the compiler needs to identify
    all the source folders in the application. Our application has two source folders:
    Ext JS 4 sources in `webapp/ext/src` and 3T application sources in `webapp/app`.
    These folder locations are specified using the `-sdk` and `-classpath` arguments
    in the `compile` command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编译过程的第一步是检查和解析所有JavaScript源代码并分析任何依赖关系。为此，编译器需要识别应用程序中的所有源文件夹。我们的应用程序有两个源文件夹：`webapp/ext/src`中的Ext
    JS 4源文件和`webapp/app`中的3T应用程序源文件。这些文件夹位置在`compile`命令中使用`-sdk`和`-classpath`参数指定：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For our 3T application the `compile` command is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的3T应用程序，`compile`命令如下：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command performs the following actions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令执行以下操作：
- en: The Sencha Cmd compiler examines all the folders specified by the `-classpath`
    argument. The `-sdk` directory is automatically included for scanning.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sencha Cmd编译器检查由`-classpath`参数指定的所有文件夹。`-sdk`目录会自动包含在扫描中。
- en: The `page` command then includes all of the script tags in `index.html` that
    are contained in the `x-compile` block.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page`命令然后包括`index.html`中包含在`x-compile`块中的所有脚本标签。'
- en: After identifying the content of the `app` directory and the `index.html` page,
    the compiler analyzes the JavaScript code and determines what is ultimately needed
    for inclusion in a single JavaScript file representing the application.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在识别`app`目录和`index.html`页面的内容后，编译器会分析JavaScript代码，并确定最终需要包含在表示应用程序的单个JavaScript文件中的内容。
- en: A modified version of the original `index.html` file is written to `build/index.html`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改后的原始`index.html`文件被写入`build/index.html`。
- en: All of the JavaScript files needed by the new `index.html` file are concatenated
    and compressed using the YUI Compressor, and written to the `build/all-classes.js`
    file.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`index.html`文件所需的所有JavaScript文件都将被连接并使用YUI Compressor进行压缩，并写入`build/all-classes.js`文件。
- en: The `sencha compile` command must be executed from within the `webapp` directory,
    which is the root of the application and is the directory containing the `index.html`
    file. All the arguments supplied to the `sencha compile` command can then be relative
    to the `webapp` directory.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`sencha compile`命令必须从`webapp`目录内执行，该目录是应用程序的根目录，也是包含`index.html`文件的目录。然后，提供给`sencha
    compile`命令的所有参数都可以相对于`webapp`目录。'
- en: 'Open a command prompt (or terminal window in Mac) and navigate to the `webapp`
    directory of the 3T project. Executing the `sencha compile` command as shown earlier
    in this section will result in the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符（或Mac中的终端窗口）并导航到3T项目的`webapp`目录。执行本节中早期显示的`sencha compile`命令将导致以下输出：
- en: '![Compiling with Sencha Cmd](img/5457OS_13_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sencha Cmd进行编译](img/5457OS_13_01.jpg)'
- en: 'Opening the `webapp/build` folder in NetBeans should now show the two newly
    generated files: `index.html` and `all-classes.js`. The `all-classes.js` file
    will contain all the required Ext JS 4 classes in addition to all the 3T application
    classes. Attempting to open this file in NetBeans will result in the following
    warning: "**The file seems to be too large to open safely...**", but you can open
    the file in a text editor to see the following concatenated and minified content:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBeans中打开`webapp/build`文件夹现在应该显示两个新生成的文件：`index.html`和`all-classes.js`。`all-classes.js`文件将包含所有必需的Ext
    JS 4类，以及所有3T应用程序类。尝试在NetBeans中打开此文件将会出现以下警告：“**文件似乎太大而无法安全打开...**”，但您可以在文本编辑器中打开文件以查看以下连接和压缩的内容：
- en: '![Compiling with Sencha Cmd](img/5457OS_13_07.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sencha Cmd编译](img/5457OS_13_07.jpg)'
- en: 'Opening the `build/index.html` page in NetBeans will display the following
    screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBeans中打开`build/index.html`页面将显示以下屏幕截图：
- en: '![Compiling with Sencha Cmd](img/5457OS_13_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sencha Cmd编译](img/5457OS_13_02.jpg)'
- en: 'You can now open the `build/index.html` file in the browser after running the
    application, but the result may surprise you:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序后，您现在可以在浏览器中打开`build/index.html`文件，但结果可能会让您感到惊讶：
- en: '![Compiling with Sencha Cmd](img/5457OS_13_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sencha Cmd编译](img/5457OS_13_03.jpg)'
- en: The layout that is presented will depend on the browser, but regardless, you
    will see that the CSS styling is missing. The CSS files required by our application
    need to be moved outside the `<!-- <x-compile> -->` directive. But where are the
    styles coming from? It is now time to briefly delve into Ext JS 4 themes and the
    `bootstrap.css` file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 呈现的布局将取决于浏览器，但无论如何，您会发现CSS样式丢失了。我们应用程序需要的CSS文件需要移出`<!-- <x-compile> -->`指令。但样式是从哪里来的？现在是时候简要地深入了解Ext
    JS 4主题和`bootstrap.css`文件了。
- en: Ext JS 4 theming
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ext JS 4主题
- en: Ext JS 4 themes leverage **Syntactically Awesome StyleSheets** (**SASS**) and
    Compass ([http://compass-style.org/](http://compass-style.org/)) to enable the
    use of variables and mixins in stylesheets. Almost all of the styles for Ext JS
    4 components can be customized, including colors, fonts, borders, and backgrounds,
    by simply changing the SASS variables. SASS is an extension of CSS that allows
    you to keep large stylesheets well-organized; a very good overview and reference
    can be found at [http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4主题利用**Syntactically Awesome StyleSheets**（**SASS**）和Compass（[http://compass-style.org/](http://compass-style.org/)）来使用变量和混合样式表。几乎所有Ext
    JS 4组件的样式都可以定制，包括颜色、字体、边框和背景，只需简单地更改SASS变量即可。SASS是CSS的扩展，允许您保持大型样式表的良好组织；您可以在[http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)找到非常好的概述和参考。
- en: Theming an Ext JS 4 application using Compass and SASS is beyond the scope of
    this book. Sencha Cmd allows easy integration with these technologies to build
    SASS projects; however, the SASS language and syntax is a steep learning curve
    in its own right. Ext JS 4 theming is very powerful and minor changes to the existing
    themes can quickly change the appearance of your application. You can find out
    more about Ext JS 4 theming at [http://docs.sencha.com/extjs/4.2.2/#!/guide/theming](http://docs.sencha.com/extjs/4.2.2/#!/guide/theming).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Compass和SASS对Ext JS 4应用程序进行主题设置超出了本书的范围。Sencha Cmd允许轻松集成这些技术来构建SASS项目；然而，SASS语言和语法本身就是一个陡峭的学习曲线。Ext
    JS 4主题非常强大，对现有主题进行微小更改可以快速改变应用程序的外观。您可以在[http://docs.sencha.com/extjs/4.2.2/#!/guide/theming](http://docs.sencha.com/extjs/4.2.2/#!/guide/theming)找到更多关于Ext
    JS 4主题的信息。
- en: 'The `bootstrap.css` file was created with the default theme definition during
    the generation of the application skeleton. The content of the `bootstrap.css`
    file is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成应用程序骨架时，`bootstrap.css`文件是使用默认主题定义的。`bootstrap.css`文件的内容如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This file imports the `ext-theme-classic-all.css` stylesheet, which is the
    default "classic" Ext JS theme. All of the available themes can be found in the
    `ext/packages` directory of the Ext JS 4 SDK:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件导入了`ext-theme-classic-all.css`样式表，这是默认的“classic”Ext JS主题。所有可用的主题都可以在Ext JS
    4 SDK的`ext/packages`目录中找到：
- en: '![Ext JS 4 theming](img/5457OS_13_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Ext JS 4主题](img/5457OS_13_04.jpg)'
- en: 'Changing to a different theme is as simple as changing the `bootstrap.css`
    import. Switching to the **neptune** theme would require the following `bootstrap.css`
    definition:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到不同的主题就像改变`bootstrap.css`导入一样简单。切换到**neptune**主题需要以下`bootstrap.css`定义：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This modification will change the appearance of the application to the Ext
    JS "neptune" theme as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修改将改变应用程序的外观为Ext JS的“neptune”主题，如下面的屏幕截图所示：
- en: '![Ext JS 4 theming](img/5457OS_13_05.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Ext JS 4主题](img/5457OS_13_05.jpg)'
- en: 'We will change the `bootstrap.css` file definition to use the `gray` theme:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改`bootstrap.css`文件的定义以使用`gray`主题：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will result in the following appearance:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下外观：
- en: '![Ext JS 4 theming](img/5457OS_13_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Ext JS 4主题](img/5457OS_13_06.jpg)'
- en: You may experiment with different themes but should note that not all of the
    themes may be as complete as the `classic` theme; minor changes may be required
    to fully utilize the styling for some components.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试不同的主题，但应注意并非所有主题都像`classic`主题那样完整；一些组件可能需要进行微小的更改才能充分利用样式。
- en: We will keep the `gray` theme for our `index.html` page. This will allow us
    to differentiate the (original) `index.html` page from the new ones that will
    be created in the following section using the `classic` theme.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留`gray`主题用于我们的`index.html`页面。这将使我们能够区分（原始的）`index.html`页面和接下来将使用`classic`主题创建的新页面。
- en: Compiling for production use
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于生产的编译
- en: 'Until now we have only worked with the Sencha Cmd-generated `index.html` file.
    We will now create a new `index-dev.html` file for our development environment.
    The development file will be a copy of the `index.html` file without the `bootstrap.css`
    file. We will reference the default `classic` theme in the `index-dev.html` file
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了Sencha Cmd生成的`index.html`文件。现在我们将为开发环境创建一个新的`index-dev.html`文件。开发文件将是`index.html`文件的副本，不包含`bootstrap.css`文件。我们将在`index-dev.html`文件中引用默认的`classic`主题，如下所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that we have moved the `stylesheet` definition out of the `<!-- <x-compile>
    -->` directive.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已将`stylesheet`定义移出了`<!-- <x-compile> -->`指令。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using the downloaded source code for the book, you will have the
    `resources/styles.css` file and the `resources` directory structure available.
    The stylesheet and associated images in the `resources` directory contain the
    3T logos and icons. We recommend you download the full source code now for completeness.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是本书的下载源代码，您将拥有`resources/styles.css`文件和`resources`目录结构。`resources`目录中的样式表和相关图像包含了3T的标志和图标。我们建议您现在下载完整的源代码以便完整性。
- en: 'We can now modify the Sencha Cmd `compile` command to use the `index-dev.html`
    file and output the generated compile file to `index-prod.html` in the `webapp`
    directory:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以修改Sencha Cmd的`compile`命令，使用`index-dev.html`文件，并将生成的编译文件输出到`webapp`目录中的`index-prod.html`：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command will generate the `index-prod.html` file and the `all-classes.js`
    files in the `webapp` directory as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将在`webapp`目录中生成`index-prod.html`文件和`all-classes.js`文件，如下面的屏幕截图所示：
- en: '![Compiling for production use](img/5457OS_13_08.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![用于生产环境的编译](img/5457OS_13_08.jpg)'
- en: 'The `index-prod.html` file references the stylesheets directly and uses the
    single compiled and minified `all-classes.js` file. You can now run the application
    and browse the `index-prod.html` file as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`index-prod.html`文件直接引用样式表，并使用单个编译和压缩的`all-classes.js`文件。您现在可以运行应用程序，并浏览`index-prod.html`文件，如下面的屏幕截图所示：'
- en: '![Compiling for production use](img/5457OS_13_09.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![用于生产环境的编译](img/5457OS_13_09.jpg)'
- en: You should notice a **significant** increase in the speed with which the logon
    window is displayed as all the JavaScript classes are loaded from the single `all-classes.js`
    file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到登录窗口显示的速度**显著**增加，因为所有JavaScript类都是从单个`all-classes.js`文件加载的。
- en: The `index-prod.html` file will be used by developers to test the compiled `all-classes.js`
    file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`index-prod.html`文件将被开发人员用于测试编译的`all-classes.js`文件。'
- en: 'Accessing the individual pages will now allow us to differentiate between environments:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问各个页面将允许我们区分环境：
- en: '| The logon window as displayed in the browser | Page description |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 在浏览器中显示的登录窗口 | 页面描述 |'
- en: '| --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Compiling for production use](img/5457OS_13_12.jpg) | The `index.html`
    page was generated by Sencha Cmd and has been configured to use the `gray` theme
    in `bootstrap.css`. This page is no longer needed for development; use `index-dev.html`
    instead.You can access this page at`http://localhost:8080/index.html` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| ![用于生产环境的编译](img/5457OS_13_12.jpg) | `index.html`页面是由Sencha Cmd生成的，并已配置为使用`bootstrap.css`中的`gray`主题。此页面对于开发不再需要；请改用`index-dev.html`。您可以在`http://localhost:8080/index.html`访问此页面
    |'
- en: '| ![Compiling for production use](img/5457OS_13_11.jpg) | The `index-dev.html`
    page uses the `classic` theme stylesheet included outside the `<!-- <x-compile>
    -->` directive. Use this file for application development. Ext JS 4 will dynamically
    load source files as required.You can access this page at`http://localhost:8080/index-dev.html`
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| ![用于生产环境的编译](img/5457OS_13_11.jpg) | `index-dev.html`页面使用了在`<!-- <x-compile>
    -->`指令之外包含的`classic`主题样式表。用于应用程序开发的文件。Ext JS 4将根据需要动态加载源文件。您可以在`http://localhost:8080/index-dev.html`访问此页面
    |'
- en: '| ![Compiling for production use](img/5457OS_13_11.jpg) | The `index-prod.html`
    file is dynamically generated by the Sencha Cmd `compile` command. This page uses
    the `all-classes.js` all-in-one compiled JavaScript file with the `classic` theme
    stylesheet.You can access this page at `http://localhost:8080/index-prod.html`
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| ![用于生产环境的编译](img/5457OS_13_11.jpg) | `index-prod.html`文件是由Sencha Cmd的`compile`命令动态生成的。此页面使用了`classic`主题样式表的`all-classes.js`全合一编译JavaScript文件。您可以在`http://localhost:8080/index-prod.html`访问此页面
    |'
- en: Integrating Sencha Cmd compiling with Maven
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Sencha Cmd编译集成到Maven中
- en: 'Until now we have executed the Sencha Cmd `compile` command from the terminal.
    It would be far better to execute the command during the Maven build process.
    The `index-prod.html` and compiled `all-classes.js` files can then be generated
    automatically every time a build is performed. The following `plugin` when added
    to the Maven `pom.xml` file will perform the following action:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直是从终端执行Sencha Cmd的`compile`命令。在Maven构建过程中执行该命令会更好。`index-prod.html`和编译的`all-classes.js`文件可以在每次构建时自动生成。将以下`plugin`添加到Maven的`pom.xml`文件中将执行以下操作：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following are a few points to note:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要注意的要点：
- en: The plugin is executed during the `compile` phase of the Maven build process.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该插件在Maven构建过程的`compile`阶段执行。
- en: The Sencha Cmd executable is defined with a complete filesystem path. Only then
    is it possible to build different projects with different versions of Sencha if
    required.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sencha Cmd可执行文件是使用完整的文件系统路径定义的。只有这样，才能在需要时使用不同版本的Sencha构建不同的项目。
- en: The `${basedir}` property represents the full path to the root of the Maven
    project. Full paths are required for each argument as we are not executing the
    Sencha Cmd `compile` command from within the `webapp` directory.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${basedir}`属性表示Maven项目根目录的完整路径。由于我们不是在`webapp`目录中执行Sencha Cmd的`compile`命令，因此每个参数都需要完整路径。'
- en: 'The `index-prod.html` and `all-classes.js` files will now be updated every
    time a build is performed. The output of this plugin can be seen in the following
    Maven build log:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`index-prod.html`和`all-classes.js`文件现在将在每次构建时更新。此插件的输出可以在以下Maven构建日志中看到：'
- en: '![Integrating Sencha Cmd compiling with Maven](img/5457OS_13_13.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![将Sencha Cmd编译与Maven集成](img/5457OS_13_13.jpg)'
- en: Adding the build version and timestamp
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加构建版本和时间戳
- en: 'It is important to be able to identify different builds, not just the build
    version but also when the build was compiled. The project version is defined in
    the `pom.xml` file using the `version` property:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 能够识别不同的构建是非常重要的，不仅仅是构建版本，还有构建编译的时间。项目版本是在`pom.xml`文件中使用`version`属性定义的：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Performing a Maven build will result in a WAR file being generated with the
    filename `task-time-tracker-1.0.war`; it is a combination of the `artifactId`
    and `version` fields with the `.war` extension.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行Maven构建将生成一个名为`task-time-tracker-1.0.war`的WAR文件；它是`artifactId`和`version`字段与`.war`扩展名的组合。
- en: 'In enterprise environments, a new release could be anything from a minor change
    (for example, Release Version 1.3.2) to a major release (such as Release Version
    4.0). The exact naming conventions for the `version` value in use will depend
    on the enterprise organization. Regardless of the naming convention, it is important
    to identify **when** the build was made. This is obvious when the timestamp on
    the WAR file is examined, but not so obvious for the testers of the application,
    who only have access to the frontend. We recommend adding the release version
    and build timestamp to the Ext JS application to allow users to identify the version
    they are using. The logon window is an obvious place to display this information
    and we will add the build version and timestamp as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业环境中，新版本可以是从次要更改（例如，版本1.3.2）到主要版本（例如，版本4.0）的任何内容。`version`值的确切命名约定将取决于企业组织。无论命名约定如何，重要的是要确定**构建**是何时进行的。检查WAR文件的时间戳时很明显，但对于只能访问前端的应用程序测试人员来说，这并不那么明显。我们建议在Ext
    JS应用程序中添加发布版本和构建时间戳，以便用户可以确定他们正在使用的版本。登录窗口是显示此信息的明显位置，我们将添加构建版本和时间戳，如下面的屏幕截图所示：
- en: '![Adding the build version and timestamp](img/5457OS_13_14.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![添加构建版本和时间戳](img/5457OS_13_14.jpg)'
- en: 'The first change that we will make is add two constants to the `Application.js`
    file in the `init` function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进行的第一个更改是在`init`函数中的`Application.js`文件中添加两个常量：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `TTT.BUILD_DATE` and `TTT.BUILD_VERSION` fields define tokens (or placeholders)
    that will dynamically be replaced in the `all-classes.js` file during the Maven
    build. These tokens will **not** be populated for the `index-dev.html` file and
    the logon window for development will look like the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`TTT.BUILD_DATE`和`TTT.BUILD_VERSION`字段定义了在Maven构建期间将在`all-classes.js`文件中动态替换的标记（或占位符）。这些标记**不**会填充到`index-dev.html`文件中，开发环境的登录窗口将如下屏幕截图所示：'
- en: '![Adding the build version and timestamp](img/5457OS_13_15.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![添加构建版本和时间戳](img/5457OS_13_15.jpg)'
- en: 'The token replacement with the correct build and timestamp is defined in the
    `pom.xml` file and requires several additions, the first being the `maven.build.timestamp.format`
    property:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的构建和时间戳的标记替换在`pom.xml`文件中定义，并需要进行一些添加，首先是`maven.build.timestamp.format`属性：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `maven.build.timestamp.format` property defines the format of the timestamp
    in the `LogonWindow.js` file. The second change is the addition of the `maven-replacer`
    `-plugin`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven.build.timestamp.format`属性定义了`LogonWindow.js`文件中时间戳的格式。第二个更改是添加`maven-replacer-plugin`：'
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This plugin examines the `src/main/webapp/all-classes.js` file and replaces
    the `$BUILD_DATE$` token with the build timestamp defined by the Maven property
    `${maven.build.timestamp}`. The `$BUILD_VERSION$` token is also replaced by the
    project version defined by the Maven property `${project.version}`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件检查`src/main/webapp/all-classes.js`文件，并用Maven属性`${maven.build.timestamp}`定义的构建时间戳替换`$BUILD_DATE$`标记。`$BUILD_VERSION$`标记也将被Maven属性`${project.version}`定义的项目版本替换。
- en: 'The final change required is to display these properties in the logon window.
    We will simply add a `container` below the toolbar in the `LogonWindow.js` file''s
    `item` `s` array:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的最后一个更改是在登录窗口中显示这些属性。我们将在`LogonWindow.js`文件的`item`数组中的工具栏下方简单添加一个`container`：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running the project will now display the build version and timestamp in the
    application logon window of the `index-prod.html` page:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行项目将在`index-prod.html`页面的应用程序登录窗口中显示构建版本和时间戳：
- en: '![Adding the build version and timestamp](img/5457OS_13_14.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![添加构建版本和时间戳](img/5457OS_13_14.jpg)'
- en: Building a slimmer WAR file
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建更轻巧的WAR文件
- en: 'The generated WAR file, `task-time-tracker-1.0.war`, is very large in size
    at the moment; in fact, it is approximately 32 MB! The default behavior of the
    `maven-war-plugin` is to add all of the directories in the `webapp` folder to
    the WAR file. For production deployments we do not need a large number of these
    files, and it is best practice to trim down the WAR file by excluding the content
    that is not required. We will exclude the entire Ext JS 4 SDK and all of the Sencha
    Cmd-generated folders under the `webapp` directory. We will also exclude all the
    resources that are not applicable for production use, including the `index*.html`
    files used during development. The only file served by GlassFish will be the yet-to-be-created
    `index.jsp`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的WAR文件`task-time-tracker-1.0.war`目前非常大；实际上，它大约为32MB！`maven-war-plugin`的默认行为是将`webapp`文件夹中的所有目录添加到WAR文件中。对于生产部署，我们不需要大量这些文件，并且最佳做法是通过排除不需要的内容来精简WAR文件。我们将排除整个Ext
    JS 4 SDK以及`webapp`目录下由Sencha Cmd生成的所有文件夹。我们还将排除所有不适用于生产使用的资源，包括开发过程中使用的`index*.html`文件。GlassFish提供的唯一文件将是尚未创建的`index.jsp`：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You will note that the location of the `ext-theme-classic-all.css` file is in
    the `resources` directory, not in the deeply nested `ext/packages/ext-theme-classic/build/resources`
    location that is used in the HTML pages. The WAR file generation process will
    copy the appropriate content to the `resources` directory from the Ext JS 4 SDK
    location. This removes the need to include the SDK directory structure in the
    WAR file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到`ext-theme-classic-all.css`文件的位置在`resources`目录中，而不是在HTML页面中使用的深层嵌套的`ext/packages/ext-theme-classic/build/resources`位置。WAR文件生成过程将从Ext
    JS 4 SDK位置复制适当的内容到`resources`目录。这样就不需要在WAR文件中包含SDK目录结构。
- en: 'The production `index.jsp` file will now become our default `welcome-file`
    and we will adjust the `WEB-INF/web.xml` file accordingly:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.jsp`文件的生成现在将成为我们默认的`welcome-file`，我们将相应地调整`WEB-INF/web.xml`文件：'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Running the application after this change in the `web.xml` file will ensure
    that the `index.jsp` file is served by GlassFish when a resource is *not* specified
    in the URL.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中进行此更改后运行应用程序将确保在URL中*未*指定资源时，`index.jsp`文件由GlassFish提供。
- en: 'The changes required in the `maven-war-plugin` for building a slimmer production
    WAR file are highlighted in the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 构建更轻量级的生产WAR文件所需的`maven-war-plugin`中的更改在以下代码片段中突出显示：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `webResources` definition will copy the content of the Ext JS 4 `classic`
    CSS theme to the `resources` directory. The `targetPath` property is always relative
    to the `webapp` directory; hence, we do not need a full path for the `resources`
    directory. The `directory` property is always relative to the root of the Maven
    project; hence, it needs a full path.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`webResources`定义将Ext JS 4 `classic` CSS主题的内容复制到`resources`目录。`targetPath`属性始终相对于`webapp`目录；因此，我们不需要`resources`目录的完整路径。`directory`属性始终相对于Maven项目的根目录；因此，它需要完整路径。'
- en: The `packagingExcludes` property lists all of the directories and files that
    should not be included in the WAR file. The `**` symbol denotes that all of the
    subdirectories should be excluded. This will ensure that all of the Sencha Cmd-generated
    folders that are not required by our production WAR file will be excluded.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`packagingExcludes`属性列出了不应包含在WAR文件中的所有目录和文件。`**`符号表示应排除所有子目录。这将确保所有不需要的Sencha
    Cmd生成的文件夹都将被排除在我们的生产WAR文件之外。'
- en: Executing the Maven build will now generate a WAR file of approximately 6.6
    MB that contains only the files required for a production application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 执行Maven构建现在将生成一个大约6.6 MB的WAR文件，其中只包含生产应用程序所需的文件。
- en: Deploying the WAR file to GlassFish
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将WAR文件部署到GlassFish
- en: Until now we have always deployed the 3T application to GlassFish via NetBeans
    using the **Run Project** command. In production environments we deploy applications
    through the GlassFish admin console or from the command line using `asadmin`.
    We will now learn how to deploy the `task-time-tracker-1.0.war` file to GlassFish
    using the admin console.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直通过NetBeans使用**Run Project**命令将3T应用程序部署到GlassFish。在生产环境中，我们通过GlassFish管理控制台或使用`asadmin`命令行部署应用程序。现在我们将学习如何使用管理控制台将`task-time-tracker-1.0.war`文件部署到GlassFish。
- en: Opening the GlassFish admin console
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开GlassFish管理控制台
- en: Start GlassFish either in NetBeans or in a console window using the `asadmin`
    command. We recommend using `asadmin` as this is normally the way GlassFish is
    managed in an enterprise environment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBeans中或使用`asadmin`命令在控制台窗口中启动GlassFish。我们建议使用`asadmin`，因为这通常是企业环境中管理GlassFish的方式。
- en: '![Opening the GlassFish admin console](img/5457OS_13_16.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![打开GlassFish管理控制台](img/5457OS_13_16.jpg)'
- en: 'As we can see in the preceding screenshot, the default GlassFish `Admin port`
    value is `4848`, as shown in the preceding screenshot, but it will be different
    if multiple GlassFish domains are configured. Open this location in the browser
    to display the GlassFish admin console:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，默认的GlassFish`Admin port`值为`4848`，但如果配置了多个GlassFish域，它将不同。在浏览器中打开此位置以显示GlassFish管理控制台：
- en: '![Opening the GlassFish admin console](img/5457OS_13_17.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![打开GlassFish管理控制台](img/5457OS_13_17.jpg)'
- en: GlassFish security basics
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GlassFish安全基础
- en: Working on the `localhost` will normally not prompt you for a password when
    using the default GlassFish installation provided by NetBeans. If you are prompted,
    the default username is `admin` with a blank password. The previous versions of
    GlassFish had a default password of `adminadmin`; at the time of writing, this
    is no longer the case. You should be aware that this may change again in the future.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用NetBeans提供的默认GlassFish安装时，通常在`localhost`上工作时不会提示您输入密码。如果提示您，默认用户名是`admin`，密码为空。以前的GlassFish版本的默认密码是`adminadmin`；在撰写本文时，情况已经不再是这样。您应该意识到这可能会在将来再次更改。
- en: 'Working on remote hosts where GlassFish is running on a server other than the
    browser will always prompt you for a username and password when you try to access
    the admin console. This is the situation with enterprise environments where different
    servers are usually running multiple instances of GlassFish. In this environment,
    remote access to the admin console will be disabled by default and you will only
    be able to access the admin console from the `localhost`. Allowing remote access
    from different clients can be enabled by executing the following commands on the
    host running the GlassFish server:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在GlassFish运行在浏览器之外的远程主机上工作时，当您尝试访问管理控制台时，系统将始终提示您输入用户名和密码。这是企业环境中的情况，不同的服务器通常运行多个GlassFish实例。在这种环境中，默认情况下将禁用对管理控制台的远程访问，您只能从`localhost`访问管理控制台。可以通过在运行GlassFish服务器的主机上执行以下命令来允许从不同客户端进行远程访问：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When enabling secure admin, you might be prompted with a message saying "**your
    admin password is empty**" (the default scenario). To solve this problem you will
    need to first change the admin password from the default (empty) password to another
    by using the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用安全管理时，您可能会收到一条消息，提示“**您的管理员密码为空**”（默认情况）。要解决此问题，您需要首先使用以下命令将管理员密码从默认（空）密码更改为其他密码：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You will then be prompted to enter the new password. Enabling secure admin will
    then be possible.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将提示您输入新密码。然后将可以启用安全管理。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is beyond the scope of this book to delve too deeply into the world of the
    GlassFish server administration. We recommend you browse the excellent documentation
    and user guides at [https://glassfish.java.net/](https://glassfish.java.net/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究GlassFish服务器管理的范围超出了本书的范围。我们建议您浏览[https://glassfish.java.net/](https://glassfish.java.net/)上的优秀文档和用户指南。
- en: Deploying the WAR file using the admin console
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用管理控制台部署WAR文件
- en: 'Deploying a web application via the GlassFish admin console is a simple process.
    After logging on to the GlassFish admin console, click on and open the **Applications**
    node as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过GlassFish管理控制台部署Web应用程序是一个简单的过程。登录到GlassFish管理控制台后，单击并打开如下屏幕截图中显示的**应用程序**节点：
- en: '![Deploying the WAR file using the admin console](img/5457OS_13_18.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![使用管理控制台部署WAR文件](img/5457OS_13_18.jpg)'
- en: There may already be a **task-time-tracker** application deployed as a result
    of a previous NetBeans deployment (as shown in the preceding screenshot). If this
    is the case, select the checkbox next to the application name and then click on
    **Undeploy**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可能已经部署了一个**task-time-tracker**应用程序，这是由于之前NetBeans部署的结果（如前面的屏幕截图所示）。如果是这种情况，请选择应用程序名称旁边的复选框，然后单击**取消部署**。
- en: 'Click on the **Deploy…** button and enter the following details:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**部署...**按钮，输入以下详细信息：
- en: '![Deploying the WAR file using the admin console](img/5457OS_13_19.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![使用管理控制台部署WAR文件](img/5457OS_13_19.jpg)'
- en: The **Local Packaged File or Directory That Is Accessible from GlassFish Server**
    field will define the location of the `task-time-tracker-1.0.war` file on the
    local file system. If deploying to a remote server, you will need to use the **Package
    File to be Uploaded to the Server** option.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**可从GlassFish服务器访问的本地打包文件或目录**字段将定义本地文件系统上`task-time-tracker-1.0.war`文件的位置。如果部署到远程服务器，您将需要使用**要上传到服务器的包文件**选项。'
- en: The **Context Root** field defines the URL path to the deployed application.
    We will deploy the 3T application to the context root.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**上下文根**字段定义了部署应用程序的URL路径。我们将3T应用程序部署到上下文根。'
- en: The **Application Name** field defines the name of the application within the
    GlassFish server and is displayed in the application listing.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序名称**字段定义了GlassFish服务器中应用程序的名称，并显示在应用程序列表中。'
- en: The **Virtual Server** dropdown defines the virtual server(s) that will be used
    to host the application. A virtual server, sometimes called a virtual host, is
    an object that allows the same physical server to host multiple Internet domain
    names deployed to different listeners. It is possible to select multiple virtual
    servers (if configured) from this list.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟服务器**下拉菜单定义了将用于托管应用程序的虚拟服务器。虚拟服务器，有时称为虚拟主机，是一个允许同一物理服务器托管部署到不同监听器的多个Internet域名的对象。可以从此列表中选择多个虚拟服务器（如果已配置）。'
- en: 'Click on the **OK** button to deploy the `task-time-tracker-1.0.war` file.
    This action will then return you to the deployed applications listing:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**确定**按钮部署`task-time-tracker-1.0.war`文件。此操作将返回到已部署应用程序列表：
- en: '![Deploying the WAR file using the admin console](img/5457OS_13_20.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![使用管理控制台部署WAR文件](img/5457OS_13_20.jpg)'
- en: 'The **task-time-tracker-1.0** application is deployed to the default **Virtual
    Server** with the name `server` and is accessible via the following two listeners:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**task-time-tracker-1.0**应用程序部署到默认的**虚拟服务器**，名称为`server`，可通过以下两个监听器访问：'
- en: '`http://localhost:8080/`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/`'
- en: '`https://localhost:8181/`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://localhost:8181/`'
- en: 'This is the default virtual server/HTTP service configuration after installing
    GlassFish. Note that in a production enterprise environment that allows user logons,
    only the HTTPS version would be enabled to ensure encrypted SSL connections with
    the server. You can now access these URLs to test the deployment. Opening the
    `https://localhost:8181/` link will result in a warning due to an invalid certificate
    as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是安装GlassFish后的默认虚拟服务器/HTTP服务配置。请注意，在允许用户登录的生产企业环境中，只有HTTPS版本会被启用，以确保与服务器的加密SSL连接。现在可以访问这些URL来测试部署。打开`https://localhost:8181/`链接将会出现警告，因为证书无效，如下屏幕截图所示：
- en: '![Deploying the WAR file using the admin console](img/5457OS_13_21.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![使用管理控制台部署WAR文件](img/5457OS_13_21.jpg)'
- en: 'This can be ignored and you may continue to the link by clicking on **I Understand
    the Risks** and confirming the exception (the exact message displayed will depend
    on the browser). Right-clicking on the logon page and selecting **View Page Source**
    will confirm that you are working with the production WAR file; this can be seen
    in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 可以忽略此项，然后可以通过单击**我了解风险**并确认异常（显示的确切消息将取决于浏览器）继续访问链接。右键单击登录页面，选择**查看页面源代码**将确认您正在使用生产WAR文件；如下屏幕截图所示：
- en: '![Deploying the WAR file using the admin console](img/5457OS_13_22.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![使用管理控制台部署WAR文件](img/5457OS_13_22.jpg)'
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Configuring HTTP listeners and virtual servers is once again beyond the scope
    of this book. We recommend you browse the appropriate documentation at [https://glassfish.java.net/documentation.html](https://glassfish.java.net/documentation.html).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 再次配置HTTP监听器和虚拟服务器超出了本书的范围。我们建议您浏览[https://glassfish.java.net/documentation.html](https://glassfish.java.net/documentation.html)上的适当文档。
- en: Deploying the WAR file using asadmin
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用asadmin部署WAR文件
- en: 'It is also possible to deploy the `task-time-tracker-1.0.war` file using the
    `asadmin` command. This is a common situation in enterprise organizations where
    the GlassFish admin console is not enabled for security reasons. The syntax of
    the `asadmin deploy` command is:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`asadmin`命令部署`task-time-tracker-1.0.war`文件。这在企业组织中是常见情况，因为出于安全原因，GlassFish管理控制台未启用。`asadmin
    deploy`命令的语法是：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command must be executed on a single line and each uppercase variable name
    prefixed with `$` must be replaced with the correct value. The exact syntax and
    parameters may depend on the environment and we will not go further into the structure
    of this command. If you are interested in learning more about this command, you
    may browse the detailed documentation at [http://docs.oracle.com/cd/E18930_01/html/821-2433/deploy-1.html](http://docs.oracle.com/cd/E18930_01/html/821-2433/deploy-1.html);
    please note that this document refers to the GlassFish 3.1 reference manual.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令必须在一行上执行，并且以`$`为前缀的每个大写变量名必须替换为正确的值。确切的语法和参数可能取决于环境，我们不会进一步讨论这个命令的结构。如果您有兴趣了解更多关于这个命令的信息，可以浏览[http://docs.oracle.com/cd/E18930_01/html/821-2433/deploy-1.html](http://docs.oracle.com/cd/E18930_01/html/821-2433/deploy-1.html)上的详细文档；请注意，该文档是针对GlassFish
    3.1参考手册的。
- en: Further deployment information and reading
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多部署信息和阅读材料
- en: The document at [https://glassfish.java.net/docs/4.0/application-deployment-guide.pdf](https://glassfish.java.net/docs/4.0/application-deployment-guide.pdf)
    contains extensive and detailed explanations for deploying applications to the
    GlassFish 4 server. This document is more than 200 pages long and should be consulted
    for any deployment-related questions that have not been covered in this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://glassfish.java.net/docs/4.0/application-deployment-guide.pdf](https://glassfish.java.net/docs/4.0/application-deployment-guide.pdf)中包含了将应用程序部署到GlassFish
    4服务器的广泛和详细的解释。这份文档超过200页，应该在本章未涵盖的任何部署相关问题上进行咨询。'
- en: GlassFish performance tuning and optimization
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GlassFish性能调优和优化
- en: The definitive guide to performance tuning and GlassFish server optimization
    can be found here at
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 性能调优和GlassFish服务器优化的权威指南可以在这里找到
- en: '[https://glassfish.java.net/docs/4.0/performance-tuning-guide.pdf](https://glassfish.java.net/docs/4.0/performance-tuning-guide.pdf).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://glassfish.java.net/docs/4.0/performance-tuning-guide.pdf](https://glassfish.java.net/docs/4.0/performance-tuning-guide.pdf)。'
- en: This guide includes sections on tuning your application as well as tuning the
    GlassFish server itself. Configuring aspects such as thread pools, web container
    settings, connection pools, garbage collection, server memory settings, and much
    more are covered. We recommend you consult this document to learn as much as possible
    about this important aspect of enterprise development and deployment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南包括调整应用程序以及调整GlassFish服务器本身的部分。涵盖了配置线程池、Web容器设置、连接池、垃圾收集、服务器内存设置等方面。我们建议您查阅本文档，尽可能多地了解企业开发和部署的重要方面。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Our final chapter has covered key production enterprise deployment concepts.
    We have compiled our Ext JS 4 application into a single `all-classes.js` file
    for production use and added the build version and timestamp to the `LogonWindow.js`
    file. We then reduced the size of the Maven-generated `task-time-tracker.war`
    file by removing all of the resources that were not required for production deployment.
    This production WAR file only contains the resources required by the application
    at runtime and excludes all the Ext JS 4 SDK resources and directories that are
    not required. We then examined the GlassFish deployment process and deployed the
    `task-time-tracker-1.0.war` file via the GlassFish admin console. There is still
    much more for the you to learn about the GlassFish server, but the entrée has
    been served!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一章涵盖了关键的生产企业部署概念。我们将我们的Ext JS 4应用程序编译成一个名为`all-classes.js`的文件以供生产使用，并将构建版本和时间戳添加到`LogonWindow.js`文件中。然后，我们通过删除所有不需要的资源，减小了由Maven生成的`task-time-tracker.war`文件的大小，以便用于生产部署。这个生产WAR文件只包含应用程序在运行时所需的资源，不包括所有不需要的Ext
    JS 4 SDK资源和目录。然后，我们检查了GlassFish的部署过程，并通过GlassFish管理控制台部署了`task-time-tracker-1.0.war`文件。关于GlassFish服务器，您还有很多东西可以学习，但主菜已上！
- en: Our Ext JS and Spring development journey now comes to an end. This book has
    covered an enormous amount of territory and provided a solid foundation for enterprise
    application development using these key technologies. We sincerely hope that your
    development journey will be easier and more rewarding as a result of reading this
    book.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Ext JS和Spring开发之旅现在结束了。本书涵盖了大量领域，并为使用这些关键技术进行企业应用程序开发提供了坚实的基础。我们真诚地希望通过阅读本书，您的开发之旅将更加轻松和有益。
