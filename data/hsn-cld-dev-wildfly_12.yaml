- en: Future Direction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来方向
- en: In this chapter, we will describe briefly what the future of Java EE development
    is likely to look like—what the plans of evolving the platform are and how concepts
    provided by applications described in the book may be standardized in the future.
    We will also take a look at MicroProfile and Jakarta EE projects—describe their
    purpose, and emphasize how it can help you to move the platform forward at a faster
    pace.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要描述Java EE开发的未来可能的样子——平台演变的计划以及书中描述的应用程序提供的概念如何在将来实现标准化。我们还将探讨MicroProfile和Jakarta
    EE项目——描述它们的目的，并强调它们如何帮助您以更快的速度推进平台。
- en: 'In the first chapter, we have sketched the process in which Java EE standard
    is being created, emphasizing the benefits it provides: portability and interoperability.
    It seems that, in order to keep it up with the IT pace, we''ve had to abandon
    those benefits. Let''s take a look at this problem more thoroughly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们概述了Java EE标准创建的过程，强调了它提供的优势：可移植性和互操作性。似乎为了跟上IT的步伐，我们不得不放弃这些优势。让我们更深入地探讨这个问题。
- en: No more standards?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不再需要标准了吗？
- en: Having a number of tools that allow us to immediately take advantage of modern
    software architectures has made our life easier. These tools have emerged during
    recent years in order to deal with the problems that have to be solved when building
    systems consisting of a large number of ephemeral services distributed across
    the network. It has to be noted that, although we have chosen the proven solutions
    such as Hystrix or Keycloak, we have lost the mentioned portability and interoperability
    benefits of Java EE.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一系列工具，使我们能够立即利用现代软件架构，使我们的生活变得更加容易。这些工具在近年来出现，是为了解决构建由大量分布在网络中的短暂服务组成的系统时必须解决的问题。需要注意的是，尽管我们选择了经过验证的解决方案，如Hystrix或Keycloak，但我们已经失去了Java
    EE所提到的可移植性和互操作性优势。
- en: The problem was that the process in which the Java EE standard was being created
    wasn't able to keep up with the rapid pace of the development of the emerging
    technologies. The specifications that provide a common standard for solving problems
    associated with cloud architecture (for example, distributed security or network
    resilience) are not yet a part of Java EE. What are the reasons for that?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于创建Java EE标准的过程无法跟上新兴技术的快速发展。提供解决与云架构相关问题的共同标准的规范（例如，分布式安全或网络弹性）尚未成为Java
    EE的一部分。这是为什么？
- en: 'The pace at which recent versions of the standard were created was too slow
    to follow all the recent innovations: Java EE 7 was released in 2013, whereas
    Java EE 8 was released in 2017\. This is not the only problem though. The specifications
    are designed according to the Java Community Process. The process is meticulous
    and contains a number of steps that are supposed to make sure that the resulting
    standard is ready to be published.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 标准最近版本创建的速度太慢，无法跟上所有最新的创新：Java EE 7于2013年发布，而Java EE 8于2017年发布。但这并不是唯一的问题。规范是根据Java社区进程设计的。这个过程非常细致，包含许多步骤，旨在确保最终的标准准备好发布。
- en: This process works well when you are indeed standardizing—extracting the knowledge
    accumulated by the industry in order to provide common APIs to solve a problem
    in a proven way. On the other hand, it is not so good for innovation. If solutions
    to a given problem emerge, the creators of the specification have to effectively
    guess the correct solution. This is very hard no matter how meticulous the standard
    process is.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当您确实在标准化时，这个过程运作得很好——提取行业积累的知识，以提供通用的API，以经过验证的方式解决问题。另一方面，它对创新并不那么有利。如果针对给定问题的解决方案出现，规范制定者必须有效地猜测正确的解决方案。无论标准过程多么细致，这都是非常困难的。
- en: So, should we abandon all the standards after all, in order to follow the innovation?
    Put it another way; is losing standard benefits of portability, interoperability,
    and longtime support an inevitable consequence of the pace at which the current
    IT world is moving? Maybe we can do better than that. Let's discuss Eclipse MicroProfile.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们最终是否应该放弃所有标准，以跟上创新？换句话说；失去标准带来的可移植性、互操作性和长期支持优势是当前IT世界移动速度的必然结果吗？也许我们可以做得更好。让我们讨论Eclipse
    MicroProfile。
- en: Eclipse MicroProfile
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile
- en: Eclipse MicroProfile is a project that defines a programming model for developing
    Java microservices (Further reading, link 1). Similar to the Java EE standard,
    it contains a number of specifications that define the common way to provide functionalities
    needed by the `microservices.`
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile 是一个定义了开发 Java 微服务编程模型的项目（进一步阅读，链接 1）。类似于 Java EE 标准，它包含了一系列规范，定义了提供微服务所需功能的标准方式。
- en: 'Let''s take a look at the current content of the project (version 2.0):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看项目当前的内容（版本 2.0）：
- en: '![](img/d3df709a-bd88-45ab-bffe-47c4681a6592.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3df709a-bd88-45ab-bffe-47c4681a6592.png)'
- en: As you will have noticed in the preceding diagram, there are a bunch of specifications
    that have come directly from Java EE, and that we have used extensively in our
    examples throughout the book (for example, JAX-RS or CDI). However, there are
    also a number of novel specifications that are supposed to deal with microservices-specific
    problems. As an example, the JWT Propagation specification deals with token-based
    security, and fault tolerance deals with the network failures.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将在前面的图中注意到的那样，有一些规范直接来自 Java EE，我们在整本书的例子中广泛使用了它们（例如，JAX-RS 或 CDI）。然而，也有一些新的规范旨在处理微服务特有的问题。例如，JWT
    Propagation 规范处理基于令牌的安全性，而容错处理网络故障。
- en: As you are able to see, MicroProfile is an emerging project that will allow
    you to build microservices with portability benefits similar to Java EE. We covered
    in the preceding chapter that the way in which the Java EE standard was developed
    was making it less suitable for introducing the innovation. How is the MicroProfile
    different, then?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，MicroProfile 是一个新兴项目，它将允许你以类似于 Java EE 的可移植性优势来构建微服务。我们在上一章中提到，Java EE
    标准的开发方式使其不太适合引入创新。那么 MicroProfile 有何不同呢？
- en: The microservices scope is not the only essential characteristic of the MicroProfile
    project. Another characteristic is the way in which the specifications are being
    developed. Specifications that constitute MicroProfile are developed in a fast,
    community-based process; if someone has an idea and a need to introduce something
    to the project, they can propose it to the community (Further reading, link 2).
    If the idea is accepted, it can be part of the project, released, and presented
    to the community.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务范围并不是 MicroProfile 项目的唯一重要特征。另一个特征是规范的开发方式。构成 MicroProfile 的规范是在快速、基于社区的过程中开发的；如果有人有一个想法并需要向项目引入某些内容，他们可以向社区提出（进一步阅读，链接
    2）。如果这个想法被接受，它就可以成为项目的一部分，发布，并向社区展示。
- en: 'Based on the community feedback, the specification can be amended in the next
    release. It is crucial to note that the project assumes a fast release cycle as
    one of its foundations. Taking these two aspects together, we can see why a process
    is a good tool for introducing innovation: a lightweight community acceptance
    process, along with a responsive feedback loop, allow for the quick introduction
    of new ideas and allows them to quickly evolve. This sounds great in theory, but
    does it work in practice?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据社区反馈，规范可以在下一个版本中进行修改。重要的是要注意，该项目将快速发布周期作为其基础之一。结合这两个方面，我们可以看到为什么过程是引入创新的好工具：轻量级的社区接受过程，以及响应式的反馈循环，允许快速引入新想法，并使它们快速演变。这在理论上听起来很棒，但在实践中是否可行呢？
- en: The way in which the MicroProfile project gains a momentum seems to confirm
    that. The initial version of the project consisted only of CDI, JAX-RS, and JSON-P
    specifications. From that time, as you were able to see in the diagram of the
    current version, a lot of work has been done and a bunch of new specifications
    has emerged.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile 项目获得动力的方式似乎证实了这一点。项目的初始版本仅包括 CDI、JAX-RS 和 JSON-P 规范。从那时起，正如你在当前版本的图中所见，已经做了大量工作，并出现了一系列新的规范。
- en: 'If the new way of developing specifications proves itself, you may be able
    to avoid the innovation/portability compromise. The rapid evolution of a common
    specification will allow you to provide innovation at a fast pace, whilst simultaneously
    keeping the benefits that were the strong points of Java EE: multi-vendor competitive
    implementation, portability, and interoperability between different implementations.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新的规范开发方式证明了自己，你可能会避免创新/可移植性的妥协。共同规范的快速演进将允许你以较快的速度提供创新，同时保持 Java EE 的优势：多厂商竞争性实现、可移植性和不同实现之间的互操作性。
- en: One more thing to mention is that MicroProfile does not assume that the standardization
    process is obsolete and that there is no longer a place for it. On the contrary,
    when one of the MicroProfile specifications reach maturity and proves itself within
    the community, it will be delegated to a standard body and follow the standardization
    process.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一点需要提及的是，MicroProfile 并不认为标准化过程已经过时，也没有它的位置。相反，当 MicroProfile 的某个规范达到成熟并在社区中得到验证时，它将被委托给一个标准机构，并遵循标准化流程。
- en: Jakarta EE
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jakarta EE
- en: It has been announced that the Java EE brand is changing its name to Jakarta
    EE, and, similar to MicroProfile, will be a project developed under the governance
    of the Eclipse foundation. The transformation of the standard is currently taking
    place, but following the initial success of the MicroProfile initiative it can
    be expected that the new way in which the standard will be created will learn
    a lot from its smaller brother, such as the separation of innovation and standardization,
    and an open community process with fast feedback, providing the latest innovation
    without sacrificing portability.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 已宣布 Java EE 品牌将更名为 Jakarta EE，类似于 MicroProfile，它将成为在 Eclipse 基金会治理下的一个项目。标准的转型目前正在发生，但鉴于
    MicroProfile 初始倡议的成功，可以预期新的标准创建方式将向其较小的兄弟学习很多，例如创新与标准化的分离，以及具有快速反馈的开放社区流程，在不牺牲可移植性的情况下提供最新的创新。
- en: If the mentioned efforts prove themselves successful, we can expect a bright
    future for Enterprise Java being understood as a family of products that originates
    from the Java EE technology. We will deal with the product based on proven technology,
    which is based on years of experience and simultaneously alleviating its main
    drawback by allowing innovation at a fast pace.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提到的努力证明是成功的，我们可以期待企业 Java 作为源自 Java EE 技术的产品家族拥有光明的未来。我们将基于经过验证的技术处理产品，这些技术基于多年的经验，同时通过允许快速创新来缓解其主要缺点。
- en: Summary
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After reading this book, you hopefully have a wider understanding of emerging
    enterprise software architectures of cloud computing and microservices. Furthermore,
    you will be familiar with a number of tools that you can use in order to implement
    systems taking advantage of both of those. We have shown you how to build microservices
    using WildFly Swarm, and deploy them in the cloud using OpenShift. In the later
    parts of the book, we have also shown you how to configure Continuous Deployment
    using Jenkins, security using Keycloak, and how to make your applications resilient
    to network failures using Hystrix. The emerging solutions of MicroProfile and
    Jakarta EE will hopefully make it able to innovate enterprise Java in a faster
    way. As a result, in the near future, you will be able to take advantage of tools
    that will allow you to solve problems described in this book based on rapidly
    developed specifications and, as a result, preserve the portability benefits of
    Java EE.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读这本书之后，你可能会对云计算和微服务领域新兴的企业软件架构有更广泛的理解。此外，你将熟悉许多工具，你可以使用这些工具来实现利用这两者的系统。我们已经向你展示了如何使用
    WildFly Swarm 构建 microservices，并使用 OpenShift 在云中部署它们。在本书的后期部分，我们还向你展示了如何使用 Jenkins
    配置持续部署，使用 Keycloak 配置安全，以及如何使用 Hystrix 使你的应用程序能够抵御网络故障。MicroProfile 和 Jakarta
    EE 的新兴解决方案有望使企业 Java 能够以更快的速度进行创新。因此，在不久的将来，你将能够利用工具来解决基于快速发展的规范描述的问题，从而保留 Java
    EE 的可移植性优势。
- en: Further reading
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://microprofile.io/](https://microprofile.io/)'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://microprofile.io/](https://microprofile.io/)'
- en: '[https://wiki.eclipse.org/MicroProfile/FeatureInit](https://wiki.eclipse.org/MicroProfile/FeatureInit)'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://wiki.eclipse.org/MicroProfile/FeatureInit](https://wiki.eclipse.org/MicroProfile/FeatureInit)'
- en: '[https://projects.eclipse.org/projects/ee4j/charter](https://projects.eclipse.org/projects/ee4j/charter)'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://projects.eclipse.org/projects/ee4j/charter](https://projects.eclipse.org/projects/ee4j/charter)'
