- en: Using Java 8 Features with Selenium
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Java 8 特性与 Selenium
- en: 'With Selenium 3.0 moving to Java 8, we can use some of the new features of
    Java 8, such as Stream API and Lambda or Anonymous functions to create scripts
    in a functional programming style. We do so by reducing the number of lines of
    code as well as reaping the benefits of the newer features of the language. In
    this chapter, we will cover these topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Selenium 3.0 迁移到 Java 8，我们可以使用 Java 8 的一些新特性，例如 Stream API 和 Lambda 或匿名函数，以函数式编程风格创建脚本。我们这样做是通过减少代码行数以及利用语言的新特性来实现的。在本章中，我们将涵盖以下主题：
- en: Introducing Java 8 Stream API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Java 8 Stream API
- en: Using Stream API to collect and filter data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Stream API 收集和过滤数据
- en: Using Stream API with Selenium WebDriver
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Selenium WebDriver 与 Stream API
- en: Introducing Java 8 Stream API
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Java 8 Stream API
- en: 'The Stream API is a new addition to the Collections API in Java 8\. The Stream
    API brings new ways to process collections of objects. A stream represents a sequence
    of elements and supports different kinds of operations (filter, sort, map, and
    collect) from a collection. We can chain these operations together to form a pipeline
    to query the data, as shown in this diagram:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Stream API 是 Java 8 中 Collections API 的新增功能。Stream API 带来了处理对象集合的新方法。一个流代表了一序列的元素，并支持从集合中进行不同类型的操作（过滤、排序、映射和收集）。我们可以将这些操作链接在一起形成一个管道来查询数据，如图所示：
- en: '![](img/9ed58994-fc57-43d5-81c7-f6c243f5353e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9ed58994-fc57-43d5-81c7-f6c243f5353e.png)'
- en: 'We can obtain a Stream from a collection using the `.stream()` method. For
    example, we have a dropdown of languages supported by the sample web application
    displayed in the header section. Let''s capture this in an `Array list`, as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `.stream()` 方法从集合中获取数据流。例如，我们有一个在标题部分显示的示例网络应用程序支持的编程语言下拉列表。让我们将其捕获到一个
    `Array list` 中，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we have to print the list members, we will use a `for` loop in the following
    way:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要打印列表成员，我们将使用以下方式的 `for` 循环：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the streams **API** we can obtain the stream by calling the `.stream()`
    method on the `languages` array list and print the members in the following way:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 streams **API**，我们可以通过在 `languages` 数组列表上调用 `.stream()` 方法来获取数据流，并按以下方式打印成员：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After obtaining the stream, we called the `forEach()` method, passing the action
    we wanted to take on each element, that is, output the member value on the console,
    using the `System.out.println` method.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 获取数据流后，我们调用了 `forEach()` 方法，传递了对每个元素想要执行的操作，即使用 `System.out.println` 方法在控制台上输出成员值。
- en: Once we have obtained a Stream from a collection, we can use that stream to
    process the elements or members of the collection.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从集合中获取了数据流，我们就可以使用该数据流来处理集合的元素或成员。
- en: Stream.filter()
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stream.filter()
- en: 'We can filter a stream using the `filter()` method. Let''s filter the stream
    obtained from the `languages` list to filter items starting with **E**, as shown
    in the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `filter()` 方法来过滤数据流。以下代码展示了如何从 `languages` 列表中获取的数据流中过滤以 **E** 开头的项目：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `filter()` method takes a Predicate as a parameter. The `predicate` interface
    contains a function called `boolean test(T t)` that takes a single parameter and
    returns a boolean. In the preceding example, we passed the lambda expression `item
    -> item.startsWith("E")` to the `test()` function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()` 方法接受一个谓词（Predicate）作为参数。谓词接口包含一个名为 `boolean test(T t)` 的函数，它接受一个参数并返回一个布尔值。在先前的示例中，我们将
    lambda 表达式 `item -> item.startsWith("E")` 传递给了 `test()` 函数。'
- en: When the `filter()` method is called on a Stream, the filter passed as a parameter
    to the `filter()` function is stored internally. The items are not filtered immediately.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当在数据流上调用 `filter()` 方法时，传递给 `filter()` 函数的过滤条件将被内部存储。项目不会立即被过滤。
- en: The parameter passed to the `filter()` function determines what items in the
    stream should be processed and what should be excluded. If the `Predicate.test()`
    function returns `true` for an item, that means it should be processed. If `false`
    is returned, the item is not processed. In the preceding example, the `test()`
    function will return true for all items starting with the character `E`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `filter()` 函数的参数决定了数据流中哪些项目应该被处理以及哪些应该被排除。如果 `Predicate.test()` 函数对一个项目返回
    `true`，则意味着它应该被处理。如果返回 `false`，则该项目不会被处理。在先前的示例中，`test()` 函数将对所有以字符 `E` 开头的项目返回
    `true`。
- en: Stream.sort()
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stream.sort()
- en: 'We can sort a stream by calling the `sort()` function. Let''s use the `sort()`
    function on the `languages` list, as shown in the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用 `sort()` 函数来对数据流进行排序。以下代码展示了如何使用 `sort()` 函数对 `languages` 列表进行排序：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will sort the elements in alphabetical order. We can provide a lambda expression
    to sort the elements using custom comparison logic.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将按字母顺序对元素进行排序。我们可以提供一个 lambda 表达式来使用自定义比较逻辑对元素进行排序。
- en: Stream.map()
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stream.map()
- en: 'Streams provide a map() method to map the elements of a stream into another
    form. We can map the elements into a new object. Let''s take the previous example
    and convert the elements of languages list to uppercase, as shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Streams 提供了一个 map() 方法，将流中的元素映射到另一种形式。让我们拿之前的例子，将语言列表的元素转换为大写，如下所示：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will map all elements that are strings in the language collection to their
    uppercase equivalents. Again, this doesn't actually perform the mapping; it only
    configures the stream for mapping. Once one of the stream processing methods is
    invoked, the mapping (and filtering) will be performed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把语言集合中所有的字符串元素映射到它们的 uppercase 等效值。同样，这实际上并没有执行映射；它只是为映射配置了流。一旦调用了其中一个流处理方法，映射（和过滤）将会被执行。
- en: Stream.collect()
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stream.collect()
- en: 'Streams provide the collect() method, among the other methods, for stream processing
    on the Stream interface. When the collect() method is invoked, filtering and mapping
    will take place, and the object resulting from those actions will be collected.
    Let''s take the previous example and obtain a new list of languages in uppercase,
    as shown in the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Streams 提供了 collect() 方法，作为 Stream 接口上的其他方法之一，用于流处理。当调用 collect() 方法时，将执行过滤和映射，并且那些操作的结果对象将被收集。让我们拿之前的例子，获取一个新的语言
    uppercase 列表，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This example creates a stream, adds a map to convert the strings to uppercase,
    and collects all objects in a new list. We can also use the filter or sort method
    and collect the resulting list based on conditions applied in the filter method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例创建了一个流，添加了一个映射来将字符串转换为 uppercase，并收集所有对象到一个新的列表中。我们也可以使用过滤或排序方法，并根据过滤方法中应用的条件收集结果列表。
- en: Stream.min() and Stream.max()
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stream.min() 和 Stream.max()
- en: The Streams API provides min() and max() methods—stream processing for finding
    the minimum or maximum value in the stream respectively.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Streams API 提供了 min() 和 max() 方法——分别用于在流中查找最小或最大值。
- en: 'Let''s take an example in the context of the sample application we''re testing.
    We will create a simple Java class called `Product` that stores the name and price
    of products returned by the search. We want to find the product that has the minimum
    price and the one that has the maximum price. Our product class will have two
    members, as shown in the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在测试的示例应用程序的上下文中举一个例子。我们将创建一个简单的 Java 类，名为 `Product`，它存储由搜索返回的产品名称和价格。我们想要找到价格最低和最高的产品。我们的产品类将有两个成员，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s create a list of products returned by the search result, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含搜索结果的产品列表，如下所示：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can call the `.min()` function by passing the comparison attribute, in this
    case, price, using the `.getPrice()` method. The `.min()` function will use the
    price attribute and return the element that has the lowest price, as shown in
    this code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递比较属性（在这种情况下，是价格），使用 `.getPrice()` 方法来调用 `.min()` 函数。`.min()` 函数将使用价格属性并返回价格最低的元素，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `get()` method will return the object returned by the `min()` function.
    We will store this in an instance of Product. The `min()` function finds MADISON
    EARBUDS as the lowest-priced product, as shown in the following console output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()` 方法将返回 `min()` 函数返回的对象。我们将将其存储在 Product 实例中。`min()` 函数找到 MADISON EARBUDS
    作为价格最低的产品，如下面的控制台输出所示：'
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As opposed to the `min()` function, the `max()` function will return the product
    with the highest price, as shown in the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `min()` 函数相反，`max()` 函数将返回价格最高的产品，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `max()` function finds MP3 PLAYER WITH AUDIO as the highest-priced product:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()` 函数找到价格最高的产品：MP3 PLAYER WITH AUDIO。'
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `min()` and `max()` functions return an optional instance, which has a `get()`
    method to obtain the object. The `get()` method will return null if the stream
    has no elements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`min()` 和 `max()` 函数返回一个可选实例，该实例有一个 `get()` 方法来获取对象。如果流中没有元素，`get()` 方法将返回
    null。'
- en: Both the functions take a comparator as a parameter. The `Comparator.comparing()`
    method creates a comparator based on the lambda expression passed to it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 两个函数都接受一个比较器作为参数。`Comparator.comparing()` 方法根据传递给它的 lambda 表达式创建一个比较器。
- en: Stream.count()
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stream.count()
- en: 'The streams API provides a count method that returns the number of elements
    in the stream after filtering has been applied. Let''s take the previous example
    to get a count of Products from the MADISON brand:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Streams API提供了一个返回在过滤后流中元素数量的`count`方法。让我们用之前的例子来获取MADISON品牌产品的数量：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `count()` method returns a `long`, which is the count of elements matching
    with the filter criteria. In this example, the following output will be displayed
    on the console:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()`方法返回一个`long`类型，这是与过滤标准匹配的元素数量。在这个例子中，以下输出将在控制台上显示：'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using Stream API with Selenium WebDriver
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Stream API与Selenium WebDriver
- en: Now that we have introduced Streams API and its various functions, let's see
    how we can use them in our tests.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Streams API及其各种函数，让我们看看我们如何在测试中使用它们。
- en: Filtering and counting WebElements
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤和计数Web元素
- en: 'Let''s start with a simple test to determine the links displayed on the home
    page of the sample application. We get all the links from the home page and print
    their count, followed by the count of links that are visible on the page, as shown
    in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对示例应用程序主页上显示的链接进行的一个简单测试开始。我们获取主页上的所有链接，并打印它们的数量，然后是页面上可见链接的数量，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the preceding code, we used the `findElements()` method along with `By.tagName`
    to get all the links from the home page. However, for finding out the visible
    links out of them, we used the `filter()` function with a predicate to test whether
    the links are displayed. This is done by calling the `isDisplayed()` method of
    the `WebElement` interface. The `isDisplayed` method will return `true` if the
    link is displayed; otherwise it will return `false`. Finally, we called the `count()`
    method to get the count of links returned by the `filter()` function. This will
    show the following output on the console:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`findElements()`方法和`By.tagName`来获取主页上的所有链接。然而，为了找出其中的可见链接，我们使用了带有谓词的`filter()`函数来测试链接是否显示。这是通过调用`WebElement`接口的`isDisplayed()`方法来完成的。如果链接显示，`isDisplayed`方法将返回`true`；否则，它将返回`false`。最后，我们调用`count()`方法来获取由`filter()`函数返回的链接数量。这将在控制台上显示以下输出：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Filtering element attributes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤元素属性
- en: 'In the example code, we will filter a list of images that have an empty `alt`
    attribute defined. This is useful if you want to check the accessibility of images
    displayed on the page. As per the accessibility guidelines, all images should
    have the `alt` attribute defined. This is done by filtering images, by testing
    the `getAttribute("alt")` method; it returns an empty string, as shown in the
    following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例代码中，我们将过滤一个具有空`alt`属性定义的图像列表。如果你想要检查页面上显示的图像的可访问性，这很有用。根据可访问性指南，所有图像都应该定义`alt`属性。这是通过过滤图像，通过测试`getAttribute("alt")`方法来完成的；它返回一个空字符串，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `filter()` function will return the list of all image elements that have
    an empty `alt` attribute defined.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()`函数将返回所有具有空`alt`属性定义的图像元素的列表。'
- en: Using the Map function to get the text value from elements
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Map函数从元素中获取文本值
- en: 'In this example, we will modify the search test we created in earlier chapters
    to test the results containing the list of expected products, as shown in the
    following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将修改我们在早期章节中创建的搜索测试，以测试包含预期产品列表的结果，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, we created a list of all the matching products returned
    by the `findElements()` method. We then retrieved the text of each element by
    calling the `map()` function and mapped the return values to a list of strings.
    This is compared with the `expectedProductNames` list.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个包含所有由`findElements()`方法返回的匹配产品的列表。然后我们通过调用`map()`函数检索每个元素的文本，并将返回值映射到一个字符串列表中。这与`expectedProductNames`列表进行比较。
- en: Filtering and performing actions on WebElements
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤并在Web元素上执行操作
- en: 'Let''s further modify the search test and find a product matching with a given
    name. We will then click on the product to open the product details page, as shown
    in this code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步修改搜索测试，找到与给定名称匹配的产品。然后我们将点击该产品以打开产品详情页面，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we used the `filter()` function to find a specific product
    from the list of WebElements. We retrieved the first matching product, using the
    `findFirst()` function. This will return a `WebElement` representing the link
    element. We then clicked on the element to open the product details page in the
    browser.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`filter()`函数从WebElements列表中查找特定的产品。我们使用`findFirst()`函数检索第一个匹配的产品。这将返回一个代表链接元素的`WebElement`。然后我们点击该元素以在浏览器中打开产品详情页面。
- en: Thus, we can use Streams API in a number of ways to create functional, readable
    code with just a few lines.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以用多种方式使用Streams API，用几行代码就创建出功能性强、易读的代码。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this short chapter, we learned how to use Selenium 8 Stream API and Lambda
    functions to simplify the Selenium WebDriver code. This helps you to write code
    in a functional programming style, which is more fluent and readable. Streams
    are useful for working with the list of WebElements. We can collect and filter
    data with a stream easily.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章简短的介绍中，我们学习了如何使用Selenium 8 Stream API和Lambda函数来简化Selenium WebDriver的代码。这有助于你以函数式编程风格编写代码，使其更加流畅和易读。Stream对于处理WebElements列表非常有用。我们可以通过Stream轻松地收集和过滤数据。
- en: In the next chapter, we will explore the features of WebDriver for taking screenshots,
    handling Windows and Frames, synchronization, and managing cookies.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨WebDriver的截图、窗口和框架处理、同步以及管理cookie的功能。
- en: Questions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which version of Java Streams API is introduced?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个版本的Java Streams API被引入？
- en: Explain the filter function of Streams API.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释Streams API中的filter函数。
- en: Which method of Streams API will return the number of matching elements from
    the filter() function?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Streams API中的哪种方法会从filter()函数返回匹配元素的数量？
- en: 'We can use the map() function to filter a list of WebElements by attribute
    values: True or false?'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`map()`函数通过属性值过滤WebElements列表：对还是错？
- en: Further information
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看以下链接，了解更多关于本章所涵盖主题的信息：
- en: Read more about Stream API at [https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html](https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html)
    and [https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html)
  id: totrans-85
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html](https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html)和[https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html)了解更多关于Stream
    API的信息
- en: Read more about Lambda expressions at [https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)了解更多关于Lambda表达式的信息
