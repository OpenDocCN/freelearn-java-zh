- en: Exploring Spring Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Spring概念
- en: The **Spring Framework** provides extensive support for managing large enterprise
    Java applications and also addresses the complexities of enterprise application
    development. Spring provides a complete set of API and configuration models for
    modern enterprise applications so that programmers just need to focus on the business
    logic of the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework提供了广泛的支持，用于管理大型企业Java应用程序，并解决企业应用程序开发的复杂性。Spring为现代企业应用程序提供了完整的API和配置模型，因此程序员只需专注于应用程序的业务逻辑。
- en: Introduced as a lightweight framework, the Spring Framework was aimed at providing
    a way of making the development of Java enterprise applications easy and simple.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework作为一个轻量级框架，旨在提供一种简化Java企业应用程序开发的方式。
- en: This chapter will help you gain a better understanding of the core features
    of the Spring Framework. We will start with an introduction to the Spring Framework. This
    chapter will also give you a clear understanding of every major module of the
    Spring Framework. After having a quick look at the important modules in the Spring
    Framework, we will dive into the world of Spring projects. We will also have a
    clear understanding of the Spring **Inversion of Control** (**IoC**) container.
    At the end, we will have a look at the new features and enhancements introduced
    in Spring 5.0.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您更好地了解Spring Framework的核心特性。我们将从介绍Spring Framework开始。本章还将让您清楚地了解Spring
    Framework的每个主要模块。在快速了解Spring Framework中的重要模块之后，我们将深入了解Spring项目的世界。我们还将清楚地了解Spring的控制反转（IoC）容器。最后，我们将看一下Spring
    5.0中引入的新功能和增强功能。
- en: 'In this chapter, we will be looking at the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Introducing the Spring Framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Spring Framework
- en: Understanding Spring modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Spring模块
- en: Spring projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring项目
- en: Spring IoC container
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring IoC容器
- en: New features in Spring Framework 5.0
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework 5.0中的新功能
- en: Introducing the Spring Framework
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Spring Framework
- en: The Spring Framework is one of the most popular open source Java application
    frameworks and IoC containers. Spring was originally developed by Rod Johnson
    and Jurgen Holler. The first milestone version of Spring Framework was released
    in March 2004\. Though it has been a decade and a half, the Spring Framework remains
    the framework of choice to build any Java application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework是最受欢迎的开源Java应用程序框架和IoC容器之一。Spring最初由Rod Johnson和Jurgen Holler开发。Spring
    Framework的第一个里程碑版本于2004年3月发布。尽管已经过去了十五年，Spring Framework仍然是构建任何Java应用程序的首选框架。
- en: The Spring Framework provides comprehensive infrastructure support for developing
    enterprise Java applications. So, developers don't need to worry about the infrastructure
    of the application; they can focus on the business logic of the application, rather
    than handling the configuration of the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架为开发企业级Java应用程序提供了全面的基础设施支持。因此，开发人员不需要担心应用程序的基础设施；他们可以专注于应用程序的业务逻辑，而不是处理应用程序的配置。
- en: All infrastructure, configuration, and meta configuration files, either Java-based
    or XML-based, are handled by the Spring Framework. So, this framework gives you
    more flexibility in building an application with a **Plain Old Java Object** (**POJO**) programming
    model rather than a non-invasive programming model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework处理所有基础设施、配置和元配置文件，无论是基于Java还是基于XML。因此，这个框架为您提供了更多的灵活性，可以使用普通的Java对象（POJO）编程模型而不是侵入式编程模型来构建应用程序。
- en: The Spring IoC container forms the core of the entire framework by putting together
    any application's various components. Spring **Model-View-Controller** (**MVC**)
    components can be used to build a very flexible web tier. The IoC container simplifies
    the development of the business layer with POJOs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Spring IoC容器通过整合应用程序的各种组件来构建整个框架的核心。Spring的Model-View-Controller（MVC）组件可用于构建非常灵活的Web层。IoC容器简化了使用POJOs开发业务层。
- en: Problems with EJB
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EJB的问题
- en: In the early days, it was very difficult for programmers to manage enterprise
    applications, because the enterprise Java technologies like **Enterprise JavaBeans**
    (**EJB**) were much heavier to provide the enterprise solutions to programmers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，程序员很难管理企业应用程序，因为企业Java技术如Enterprise JavaBeans（EJB）对程序员提供企业解决方案的负担很重。
- en: 'When EJB technology was first announced, it was offering a distributed component
    model that would allow the developers to focus only on the business side of the
    system while ignoring the middleware requirements, such as wiring of components,
    transaction management, persistence operations, security, resource pooling, threading,
    distribution, remoting, and so on; however, it was a very cumbersome process for
    developing, unit testing, and deploying EJB applications. Some of the following
    complexities were faced while using EJB:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当EJB技术首次宣布时，它提供了一个分布式组件模型，允许开发人员只关注系统的业务方面，而忽略中间件的要求，如组件的连接、事务管理、持久性操作、安全性、资源池、线程、分发、远程等等；然而，开发、单元测试和部署EJB应用程序是一个非常繁琐的过程。在使用EJB时，面临以下一些复杂性：
- en: Forcing implementation of unnecessary interfaces and methods
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制实现不必要的接口和方法
- en: Making unit testing difficult, especially outside the EJB container
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使单元测试变得困难，特别是在EJB容器之外
- en: Inconveniences in managing deployment descriptors
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理部署描述符中的不便之处
- en: Tedious exception handling
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 繁琐的异常处理
- en: At that time, Spring was introduced as an alternative technology especially
    made for EJB, because Spring provided a very simple, leaner, and lighter programming
    model compared with other existing Java technologies. Spring makes it possible
    to overcome the preceding complexities, and also to avoid the use of some other
    heavier enterprise technologies by using many available design patterns. The Spring
    Framework focused on the POJO programming model rather than a non-invasive programming
    model. This model provided the simplicity to the Spring Framework. It also empowered
    ideas such as the **dependency injection** (**DI**) pattern and **Aspect-Oriented
    Programming** (**AOP**), using the proxy pattern and decorator pattern.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，Spring被引入作为EJB的一种替代技术，因为与其他现有的Java技术相比，Spring提供了非常简单、更精简和更轻量级的编程模型。Spring使得克服之前的复杂性成为可能，并且通过使用许多可用的设计模式，避免了使用其他更重的企业技术。Spring框架专注于POJO编程模型而不是侵入式编程模型。这个模型为Spring框架提供了简单性。它还赋予了诸如**依赖注入**（**DI**）模式和**面向切面编程**（**AOP**）等概念，使用代理模式和装饰器模式。
- en: Simplifying implementation using POJO
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用POJO简化实现
- en: The most important advantage of the POJO programming model is that coding application
    classes is very fast and simple. This is because classes don't need to depend
    on any particular API, implement any special interface, or extend from a particular
    framework class. You do not have to create any special callback methods until
    you really need them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: POJO编程模型最重要的优势是应用类的编码非常快速和简单。这是因为类不需要依赖于任何特定的API，实现任何特殊的接口，或者扩展特定的框架类。直到真正需要它们之前，您不必创建任何特殊的回调方法。
- en: Benefits of the Spring Framework
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring框架的好处
- en: 'The important benefits of the Spring Framework are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架的重要好处如下：
- en: No need to reinvent the wheel
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需重新发明轮子
- en: Ease of unit testing
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于单元测试
- en: Reduction in implementing code
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少实现代码
- en: Inversion of control and API
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制反转和API
- en: Consistency in transaction management
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理的一致性
- en: Modular architecture
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化架构
- en: Up to date with time
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与时俱进
- en: Let's discuss each in detail.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论每一个。
- en: No need to reinvent the wheel
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无需重新发明轮子
- en: No need to reinvent the wheel is one of the most important benefits that developers
    can leverage from the Spring Framework. It facilitates the practical use of the
    well-known technologies, ORM frameworks, logging frameworks, JEE, JDK timers,
    Quartz, and so on. So, developers don't have to learn any new technologies or
    frameworks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 无需重新发明轮子是开发人员可以从Spring框架中获得的最重要的好处之一。它促进了众所周知的技术、ORM框架、日志框架、JEE、JDK定时器、Quartz等的实际使用。因此，开发人员不需要学习任何新的技术或框架。
- en: It facilitates good programming practices, such as programming using interfaces
    instead of classes. Spring enables developers to develop enterprise applications
    using POJO and **Plain Old Java Interface** (**POJI**) model programming.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它促进了良好的编程实践，例如使用接口而不是类进行编程。Spring使开发人员能够使用POJO和**Plain Old Java Interface**（**POJI**）模型编程开发企业应用程序。
- en: Ease of unit testing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易于单元测试
- en: If you want to test the applications developed using Spring, it is quite easy.
    The main reason behind this is that the environment-dependent code is available
    in this framework. Earlier versions of EJBs were very difficult to unit test.
    It was difficult to even run EJBs outside the container (as of version 2.1). The
    only way to test them was to deploy them in a container.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试使用Spring开发的应用程序，这是相当容易的。这背后的主要原因是这个框架中有环境相关的代码。早期版本的EJB非常难以进行单元测试。甚至在容器外运行EJB（截至2.1版本）都很困难。测试它们的唯一方法是将它们部署到容器中。
- en: The Spring Framework introduced the DI concept. We will discuss DI in complete
    detail in [Chapter 2](cd47e5f4-5c77-413c-935f-ae3bfa508c9a.xhtml), *Spring Best
    Practices and Bean Wiring Configurations*. The DI enables unit testing. This is
    done by replacing the dependencies with their mocks. The entire application need
    not be deployed to unit test.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架引入了DI概念。我们将在[第2章](cd47e5f4-5c77-413c-935f-ae3bfa508c9a.xhtml)中详细讨论DI，*Spring最佳实践和Bean布线配置*。DI使得单元测试成为可能。这是通过用它们的模拟替换依赖项来完成的。整个应用程序不需要部署进行单元测试。
- en: 'Unit testing has multiple benefits:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试有多个好处：
- en: Improving the productivity of programmers
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高程序员的生产力
- en: Detecting defects at earlier stages, thereby saving the cost of fixing them
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在较早的阶段检测缺陷，从而节省修复它们的成本
- en: Preventing future defects by automating unit tests in applications that are
    running in **continuous integration** (**CI**) builds
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在**持续集成**（**CI**）构建中自动化单元测试来预防未来的缺陷
- en: Reduction in implementing code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少实现代码
- en: All application classes are simple POJO classes; Spring is not invasive. It
    does not require you to extend framework classes or implement framework interfaces
    for most use cases. Spring applications do not require a Jakarta EE application
    server, but they can be deployed on one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序类都是简单的POJO类；Spring不是侵入式的。对于大多数用例，它不需要您扩展框架类或实现框架接口。Spring应用程序不需要Jakarta
    EE应用服务器，但可以部署在其中。
- en: 'Before the Spring Framework, typical J2EE applications contained a lot of plumbing
    code. For example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring框架之前，典型的J2EE应用程序包含了大量的管道代码。例如：
- en: Code for getting a database connection
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取数据库连接的代码
- en: Code for handling exceptions
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理异常的代码
- en: Transaction management code
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理代码
- en: Logging code and a lot more
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志代码等等
- en: 'Let''s look at the following simple example of executing a query using `PreparedStatement`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用`PreparedStatement`执行查询的简单示例：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, there are four lines of business logic and more than
    10 lines of plumbing code. The same logic can be applied in a couple of lines
    using the Spring Framework, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，有四行业务逻辑和超过10行的管道代码。使用Spring框架可以在几行代码中应用相同的逻辑，如下所示：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using Spring, you can use a Java method as a request handler method or remote
    method, like a `service()` method of a servlet API, but without dealing with the
    servlet API of the servlet container. It supports both XML-based and annotation-based
    configuration.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring，可以将Java方法作为请求处理程序方法或远程方法，就像处理servlet API的servlet容器的`service()`方法一样，但无需处理servlet
    API。它支持基于XML和基于注解的配置。
- en: Spring enables you to use a local Java method as a message handler method, without
    using a **Java Message Service** (**JMS**) API in the application. Spring serves
    as a container for your application objects. Your objects do not have to worry
    about finding and establishing connections with each other. Spring also enables
    you to use the local Java method as a management operation, without using a **Java
    Management Extensions** (**JMX**) API in the application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Spring使您可以使用本地Java方法作为消息处理程序方法，而无需在应用程序中使用Java消息服务（JMS）API。Spring充当应用程序对象的容器。您的对象不必担心找到并建立彼此之间的连接。Spring还使您可以使用本地Java方法作为管理操作，而无需在应用程序中使用Java管理扩展（JMX）API。
- en: Inversion of control and API
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制反转和API
- en: Spring also helps developers to get rid of the necessity of writing a separate
    compilation unit, or a separate class loader to handle exceptions. Spring converts
    technology-dependent exceptions, particularly thrown by **Java Database Connectivity** (**JDBC**),
    Hibernate or **Java Data Objects** (**JDO**), into unchecked and consistent exceptions.
    Spring does this magic using inversion of control and APIs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Spring还帮助开发人员摆脱编写单独的编译单元或单独的类加载器来处理异常的必要性。Spring将技术相关的异常，特别是由Java数据库连接（JDBC）、Hibernate或Java数据对象（JDO）抛出的异常转换为未经检查的一致异常。Spring通过控制反转和API来实现这一神奇的功能。
- en: 'Also, it uses IoC for DI, which means aspects can be configured normally. If
    we want to add our own behavior, we need to extend the classes of the framework
    or plug in our own classes. The following is a list of advantages for this kind
    of architecture:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它使用IoC进行DI，这意味着可以正常配置方面。如果要添加自己的行为，需要扩展框架的类或插入自己的类。这种架构的优势如下所示：
- en: Decoupling the execution of a task from its implementation
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任务的执行与其实现解耦
- en: Making it easier to switch between different implementations
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易在不同实现之间切换
- en: Greater modularity of a program
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序的更大模块化
- en: Greater ease in testing a program by isolating a component or mocking it
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过隔离组件或模拟组件，更容易测试程序
- en: Dependencies and allowing components to communicate through contracts
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系并允许组件通过合同进行通信
- en: Consistency in transaction management
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务管理的一致性
- en: Spring also provides support for transaction management with consistency. It
    provides an easy and flexible way to configure local transactions for small applications
    as well as global transactions for large applications using the **Java Transaction
    API** (**JTA**). So we do not need to use any third-party transactional API to
    execute a database transaction; Spring will take care of it with the transaction
    management feature.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spring还提供了对事务管理的支持，保证一致性。它提供了一种简单灵活的方式，可以为小型应用配置本地事务，也可以为大型应用使用Java事务API（JTA）配置全局事务。因此，我们不需要使用任何第三方事务API来执行数据库事务；Spring将通过事务管理功能来处理它。
- en: Modular architecture
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化架构
- en: Spring provides a modular architecture that helps developers to identify the
    packages or classes which are to be used and which are to be ignored. Hence, in
    this way, we can keep only those things which we really need. So that makes it
    easy to identify and utilize the usable packages or classes even if there are
    many packages or classes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一个模块化架构，帮助开发人员识别要使用和要忽略的包或类。因此，以这种方式，我们可以只保留真正需要的内容。这样即使有很多包或类，也可以轻松识别和利用可用的包或类。
- en: Spring is a powerful framework that addresses many common problems in Jakarta
    EE. It includes support for managing business objects and exposing their services
    to presentation tier components.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Spring是一个强大的框架，解决了Jakarta EE中的许多常见问题。它包括支持管理业务对象并将其服务暴露给表示层组件。
- en: Spring instantiates the beans and injects the dependencies of your objects into
    the application it serves as a life cycle manager of the beans.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Spring实例化bean并将对象的依赖项注入到应用程序中，它充当bean的生命周期管理器。
- en: Up to date with time
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与时俱进
- en: 'When the first version of the Spring Framework was built, its main focus was
    to make applications testable. There were also new challenges in the later versions,
    but the Spring Framework managed to evolve and stay ahead and on track with the
    architectural flexibility and modules that are offered. Some examples are listed
    as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当Spring Framework的第一个版本构建时，其主要重点是使应用程序可测试。后续版本也面临新的挑战，但Spring Framework设法发展并保持领先，并与提供的架构灵活性和模块保持一致。以下是一些示例：
- en: The Spring Framework introduced a number of abstractions ahead of Jakarta EE
    to keep the application decoupled from the specific implementation
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework在Jakarta EE之前引入了许多抽象，以使应用程序与特定实现解耦。
- en: The Spring Framework also provided transparent caching support in Spring 3.1
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework还在Spring 3.1中提供了透明的缓存支持
- en: Jakarta EE was introduced with JSR-107 for JCache in 2014, so it was provided
    in Spring 4.1
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jakarta EE在2014年引入了JSR-107用于JCache，因此在Spring 4.1中提供了它
- en: 'Another major evolution that Spring was involved with was to provide different
    Spring projects. The Spring Framework is just one of the many projects among Spring
    projects. The following example illustrates how the Spring Framework managed to
    remain up to date in terms of Spring projects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Spring参与的另一个重大发展是提供不同的Spring项目。Spring Framework只是Spring项目中的众多项目之一。以下示例说明了Spring
    Framework如何保持与Spring项目的最新状态：
- en: As architecture evolved toward cloud and microservices, Spring came up with
    new cloud-oriented Spring projects. The Spring Cloud project simplifies development
    and deployment of microservices.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着架构向云和微服务发展，Spring推出了面向云的新Spring项目。Spring Cloud项目简化了微服务的开发和部署。
- en: To build Java batch applications, a new approach was introduced as the Spring
    Batch project by the Spring Framework.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Spring框架引入了一种新的方法来构建Java批处理应用程序，即Spring Batch项目。
- en: In the next section, we will dive deep into the different Spring Framework modules.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨不同的Spring框架模块。
- en: Understanding Spring modules
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Spring模块
- en: Spring provides a modular architecture that is one of the most important reasons
    for the popularity of the Spring Framework. Its layered architecture enables integration
    of other frameworks easily and without hassle. These modules provide everything
    that a developer may need to use in enterprise application development. The Spring
    Framework is organized into 20 different modules that are built on the top of
    its Core Container.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一种模块化的架构，这是Spring框架受欢迎的最重要原因之一。其分层架构使得可以轻松无忧地集成其他框架。这些模块提供了开发企业应用程序所需的一切。Spring框架分为20个不同的模块，这些模块建立在其核心容器之上。
- en: 'The following diagram illustrates different Spring modules organized in a layered
    architecture:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了以分层架构组织的不同Spring模块：
- en: '![](img/a1a68982-99fd-4f80-9c50-910d04a97854.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1a68982-99fd-4f80-9c50-910d04a97854.jpg)'
- en: Spring Framework modules
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架模块
- en: We will start with discussing the Core Container before moving on to other modules.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从讨论核心容器开始，然后再讨论其他模块。
- en: Core Container
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心容器
- en: 'The **Spring Core Container** provides the core features of the Spring Framework,
    namely as Core, Beans, Context, and Expression Language, the details of which
    are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Spring核心容器提供了Spring框架的核心功能，即核心、Bean、上下文和表达式语言，其详细信息如下：
- en: '| **Artifact** | **Module Usage** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **Artifact** | **Module Usage** |'
- en: '| `spring-core` | This module facilitates all the utilities used by other modules
    and it also provides a way for managing the different bean life cycle operations.
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `spring-core` | 该模块为其他模块使用的所有实用程序提供便利，还提供了一种管理不同bean生命周期操作的方式。|'
- en: '| `spring-beans` | This module is mainly used to decouple code dependencies
    from your actual business logic and eliminates the use of singleton classes using
    DI and IoC features.  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `spring-beans` | 该模块主要用于解耦代码依赖于实际业务逻辑，并使用DI和IoC功能消除了单例类的使用。|'
- en: '| `spring-context` | This module provides features like internationalization,
    and resource loading, and also underpins Java EE features like EJB, JMS, and remoting. 
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `spring-context` | 该模块提供国际化和资源加载等功能，并支持Java EE功能，如EJB、JMS和远程调用。|'
- en: '| `spring-expression` | This module provides support for accessing properties
    of beans at runtime and also allows us to manipulate them. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `spring-expression` | 该模块提供了在运行时访问bean属性的支持，并允许我们操纵它们。|'
- en: Crosscutting concerns
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 横切关注点
- en: 'Crosscutting concerns are applicable to all the layers of an application, including
    logging and security, among others. Important Spring modules related to crosscutting
    concerns are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 横切关注点适用于应用程序的所有层，包括日志记录和安全性等。与横切关注点相关的重要Spring模块如下：
- en: '| **Artifact** | **Module Usage** |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **Artifact** | **Module Usage** |'
- en: '| `spring-aop` | This module is mainly used to perform the tasks which are
    common amongst different parts of a system like transaction management, logging,
    and security. To enable this we can implement method-interceptors and pointcuts.
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `spring-aop` | 该模块主要用于执行系统中各个部分共同的任务，如事务管理、日志记录和安全性。为了实现这一点，我们可以实现方法拦截器和切入点。|'
- en: '| `spring-aspects` | This module is used to integrate any custom object type.
    It is possible using AspectJ, and the main use of this module is to integrate
    the objects which are not in the control of the container. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `spring-aspects` | 该模块用于集成任何自定义对象类型。使用AspectJ是可能的，该模块的主要用途是集成容器无法控制的对象。|'
- en: '| `spring-instrument` | This module is used to measure the application''s performance
    and also helps to perform error diagnosis using trace information. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `spring-instrument` | 该模块用于测量应用程序的性能，并使用跟踪信息进行错误诊断。|'
- en: '| `spring-test` | This module is used to integrate testing support in a Spring
    application. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `spring-test` | 该模块用于在Spring应用程序中集成测试支持。|'
- en: Data Access/Integration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据访问/集成
- en: The **Data Access**/**Integration** layer in applications interacts with the
    database and/or the external interfaces. It consists of JDBC, ORM, OXM, JMS, and
    Transaction modules. These modules are `spring-jdbc`, `spring-orm`, `spring-oxm`,
    `spring-jms`, and `spring-tx`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 数据访问/集成层在应用程序中与数据库和/或外部接口交互。它包括JDBC、ORM、OXM、JMS和事务模块。这些模块是`spring-jdbc`、`spring-orm`、`spring-oxm`、`spring-jms`和`spring-tx`。
- en: Web
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web
- en: The **Web** layer contains the Web, Web-MVC, Web-Socket, and other Web-Portlet
    modules. The respective module names are `spring-web`, `spring-webmvc`, `spring-websocket`,
    `spring-webmvc-portlet`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Web层包含Web、Web-MVC、Web-Socket和其他Web-Portlet模块。各自的模块名称为`spring-web`、`spring-webmvc`、`spring-websocket`、`spring-webmvc-portlet`。
- en: In the next section, we will go through different kinds of Spring projects.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍不同类型的Spring项目。
- en: Spring projects
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring项目
- en: 'The Spring Framework provides different kinds of projects for different infrastructure
    needs, and also helps to explore solutions to other problems in the enterprise
    application: deployment, cloud, big data, and security, among others.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架为不同的基础设施需求提供了不同类型的项目，并帮助探索企业应用程序中的其他问题的解决方案：部署、云、大数据和安全性等。
- en: 'Some of the important Spring projects are listed as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一些重要的Spring项目列举如下：
- en: Spring Boot
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot
- en: Spring Data
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring数据
- en: Spring Batch
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch
- en: Spring Cloud
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud
- en: Spring Security
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring安全
- en: Spring HATEOAS
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring HATEOAS
- en: Let's discuss them in detail.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论它们。
- en: Spring Boot
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot
- en: '**Spring Boot** provides support to create standalone, production-grade, Spring-based
    applications that you can just run.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot支持创建独立的、生产级的、基于Spring的应用程序，只需运行即可。
- en: 'Spring Boot also provides some of the following features out of the box, by
    taking an opinionated view of how applications have to be developed:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot还提供了一些开箱即用的功能，通过对应用程序开发的一种主观观点：
- en: Provides support for developing standalone Spring applications
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供开发独立Spring应用程序的支持
- en: Embeds Tomcat, Jetty, or Undertow directly, with no need to deploy WAR files
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接嵌入Tomcat、Jetty或Undertow，无需部署WAR文件
- en: Allow us to externalize configuration to work in different environments with
    the same application code
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们将配置外部化，以便在不同环境中使用相同的应用程序代码
- en: Simplifies Maven configuration by providing opinionated starter POMs
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供主观的起始POM简化Maven配置
- en: Eliminates the need for code generation and the requirement for XML configuration
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除了代码生成和XML配置的需求
- en: Provides support for production features like metrics, health checks, and application
    monitoring
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供用于生产特性的支持，如度量、健康检查和应用程序监控
- en: We will look at Spring Boot in depth in [Chapter 12](ffdd6481-357a-4a6c-9a62-b5cc8315b967.xhtml),
    *Spring Boot Microservice Performance Tuning*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第12章](ffdd6481-357a-4a6c-9a62-b5cc8315b967.xhtml)中深入研究Spring Boot，*Spring
    Boot微服务性能调优*。
- en: Spring Data
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data
- en: The main goal of the **Spring Data** project is to provide an easy and consistent
    Spring-based model to access data and other special features, to manipulate SQL-and
    NoSQL-based data stores. It also tries to provide an easy way to use data access
    technologies, map-reduce frameworks, relational and non-relational databases,
    and cloud-based data services.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Data**项目的主要目标是为访问数据和其他特殊功能提供一个易于使用和一致的基于Spring的模型，以操作基于SQL和NoSQL的数据存储。它还试图提供一种简单的方式来使用数据访问技术、映射-减少框架、关系和非关系数据库以及基于云的数据服务。'
- en: 'Some of the important features are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一些重要特性如下：
- en: Provides support for integration with custom repository code
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与自定义存储库代码集成的支持
- en: Provides repository and object-mapping abstractions by deriving dynamic queries
    using repository method names
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用存储库和对象映射抽象，通过使用存储库方法名称派生动态查询
- en: Advanced integration support with Spring MVC controllers
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring MVC控制器的高级集成支持
- en: Advanced support for transparent auditing features such as created by, created
    date, last changed by, and last changed date
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对透明审计功能的高级支持，如创建者、创建日期、最后更改者和最后更改日期
- en: Experimental integration support for cross-store persistence
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨存储持久性的实验性集成支持
- en: 'Spring Data provides integration support for the following data sources:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data为以下数据源提供集成支持：
- en: JPA
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA
- en: JDBC
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDBC
- en: LDAP
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LDAP
- en: MongoDB
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB
- en: Gemfire
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gemfire
- en: REST
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST
- en: Redis
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: Apache Cassandra
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Cassandra
- en: Apache Solr
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Solr
- en: Spring Batch
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch
- en: '**Spring Batch** facilitates essential processing for large volumes of records,
    including logging/tracing, transaction management, job processing statistics,
    job restart, skip, and resource management, by providing reusable functions. It
    also provides more advanced technical services and features that will enable extremely
    high-volume and high-performance batch jobs using optimization and partitioning
    techniques.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch有助于处理大量记录，包括日志/跟踪、事务管理、作业处理统计、作业重启、跳过和资源管理，通过提供可重用的功能。它还提供了更高级的技术服务和功能，可以使用优化和分区技术实现极高容量和高性能的批处理作业。
- en: 'Important features of Spring Batch are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch的重要特性如下：
- en: The ability to process data in chunks
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以块的方式处理数据的能力
- en: The ability to start, stop and restart jobs, including the ability to restart,
    in the case of failed jobs, from the point where they failed
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动、停止和重新启动作业的能力，包括在作业失败的情况下从失败点重新启动
- en: The ability to retry steps or to skip steps on failure
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重试步骤或在失败时跳过步骤的能力
- en: Web-based administration interface
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Web的管理界面
- en: Spring Cloud
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud
- en: It is not an overstatement to say *the world is moving to the cloud*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说*世界正在向云端迁移*。
- en: '**Spring Cloud** provides tools for developers to build common patterns in
    distributed systems. Spring Cloud enables developers to quickly build services
    and applications that implement common patterns to work in any distributed environment.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Cloud**为开发人员提供了构建分布式系统中常见模式的工具。Spring Cloud使开发人员能够快速构建服务和应用程序，实现在任何分布式环境中工作的常见模式。'
- en: 'Some of the common patterns implemented in Spring Cloud are as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud中实现的一些常见模式如下：
- en: Distributed configuration
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式配置
- en: Service registration and discovery
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务注册和发现
- en: Circuit breakers
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断路器
- en: Load balancing
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载平衡
- en: Intelligent routing
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能路由
- en: Distributed messaging
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式消息传递
- en: Global locks
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局锁
- en: Spring Security
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security
- en: Authentication and authorization are the essential parts of enterprise applications,
    both web applications and web services. **Spring** **Security** is a powerful
    and highly customizable authentication and access control framework. Spring Security
    focuses on providing declarative authentication and authorization to Java applications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证和授权是企业应用程序的重要部分，包括Web应用程序和Web服务。**Spring** **Security**是一个功能强大且高度可定制的身份验证和访问控制框架。Spring
    Security专注于为Java应用程序提供声明式的身份验证和授权。
- en: 'Important features in Spring Security are as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security的重要特性如下：
- en: Comprehensive support for both authentication and authorization
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全面支持身份验证和授权
- en: Good support for integration with servlet APIs and Spring MVC
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Servlet API和Spring MVC的集成支持良好
- en: Module support for integration with **Security Assertion Markup Language** (**SAML**)
    and **Lightweight Directory Access Protocol** (**LDAP**)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块支持与**安全断言标记语言**（**SAML**）和**轻量级目录访问协议**（**LDAP**）集成
- en: Providing support for common security attacks such as **Cross-Site Forgery Request**
    (**CSRF**), session fixation, clickjacking, and so on
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供对常见安全攻击的支持，如**跨站请求伪造**（**CSRF**）、会话固定、点击劫持等
- en: We will discuss how to secure web applications with Spring Security in [Chapter
    4](3ad9ec7c-1a8c-4a0f-886f-28528322ac49.xhtml), *Spring MVC Optimization*.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](3ad9ec7c-1a8c-4a0f-886f-28528322ac49.xhtml)中讨论如何使用Spring Security保护Web应用程序，*Spring
    MVC优化*。
- en: Spring HATEOAS
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring HATEOAS
- en: Themain purpose of **Hypermedia As The Engine Of Application State** (**HATEOAS**)
    is to decouple the server (the service provider) from the client (the service
    consumer). The server provides the client with information on other possible actions
    that can be performed on the resource.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**超媒体作为应用状态引擎**（**HATEOAS**）的主要目的是解耦服务器（服务提供者）和客户端（服务消费者）。服务器向客户端提供有关可以在资源上执行的其他可能操作的信息。'
- en: Spring HATEOAS provides a HATEOAS implementation, especially for the **REpresentational
    State Transfer** (**REST**) services implemented with Spring MVC.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Spring HATEOAS提供了一个HATEOAS实现，特别适用于使用Spring MVC实现的**表述状态转移**（**REST**）服务。
- en: 'Spring HATEOAS has the following important features:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Spring HATEOAS具有以下重要特性：
- en: A simplified definition of links pointing to service methods, making the links
    less fragile
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的链接定义，指向服务方法，使得链接更加健壮
- en: Support for JSON and JAXB (XML-based) integration
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持JSON和JAXB（基于XML）集成
- en: Support for hypermedia formats such as **Hypertext Application Language** (**HAL**)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持超媒体格式，如**超文本应用语言**（**HAL**）
- en: In the next section, we will understand the mechanism of Spring's IoC container.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解Spring的IoC容器的机制。
- en: Spring's IoC container
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring的IoC容器
- en: Spring's **IoC container** is built as the core module of the Spring architecture.
    IoC is also known as DI. It is a design pattern which eliminates the dependency
    of the code to provide ease in managing and testing the application. In DI, the
    objects themselves characterize their dependencies with the other objects they
    work, just through constructor arguments, arguments to a factory method, or properties
    that are set on the object instance after it is created or returned from a factory
    method.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的**IoC容器**是Spring架构的核心模块。IoC也被称为DI。这是一种设计模式，它消除了代码对提供应用程序管理和测试的依赖性。在DI中，对象本身通过构造函数参数、工厂方法的参数或在创建或从工厂方法返回对象实例后设置的属性来描述它们与其他对象的依赖关系。
- en: The container is then responsible to inject those dependencies when it creates
    the bean. This process is basically the inverse (so it is known as IoC) of the
    bean itself controlling the instantiation or location of its dependencies, by
    using the direct construction of classes, or a mechanism.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后容器负责在创建bean时注入这些依赖关系。这个过程基本上是bean本身控制其依赖项的实例化或位置的逆过程（因此被称为IoC），通过使用类的直接构造或机制。
- en: 'There are two main base packages of the Spring Framework''s IoC container:
    `org.springframework.beans`, and `org.springframework.context`. The `BeanFactory`
    interface provides some of the advanced-level configuration mechanisms to manage
    any type of object. `ApplicationContext` includes all the functionalities of `BeanFactory`,
    and acts as a subinterface of it. In fact, `ApplicationContext` is also recommended
    over `BeanFactory`, and provides more supporting infrastructure that enables:
    easier integration with Spring''s AOP features and transaction; message resource
    handling in terms of internationalization and event publication; and application
    layer-specific contexts such as `WebApplicationContext` for use in web applications.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架的IoC容器有两个主要的基本包：`org.springframework.beans`和`org.springframework.context`。`BeanFactory`接口提供了一些高级配置机制，用于管理任何类型的对象。`ApplicationContext`包括了所有`BeanFactory`的功能，并且作为它的子接口。事实上，`ApplicationContext`也比`BeanFactory`更推荐，并提供了更多的支持基础设施，使得：更容易集成Spring的AOP特性和事务；消息资源处理方面的国际化和事件发布；以及应用层特定的上下文，比如用于Web应用程序的`WebApplicationContext`。
- en: The interface `org.springframework.context.ApplicationContext` is represented
    as the Spring IoC container, and it is in complete control of a bean's life cycle
    and responsible for instantiating, configuring, and assembling the beans.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接口`org.springframework.context.ApplicationContext`被表示为Spring IoC容器，它完全控制bean的生命周期，并负责实例化、配置和组装bean。
- en: 'The container gets all the instructions to instantiate, configure, and assemble,
    by scanning bean configuration metadata. The configuration metadata can be represented
    using the following methods:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 容器通过扫描bean配置元数据来获取实例化、配置和组装的所有指令。配置元数据可以用以下方法表示：
- en: XML-based configuration
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于XML的配置
- en: Annotation-based configuration
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于注解的配置
- en: Java-based configuration
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Java的配置
- en: We will learn these methods in more detail in [Chapter 2](cd47e5f4-5c77-413c-935f-ae3bfa508c9a.xhtml),
    *Spring Best Practices and Bean Wiring Configurations*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](cd47e5f4-5c77-413c-935f-ae3bfa508c9a.xhtml)中更详细地学习这些方法，*Spring最佳实践和Bean配置*。
- en: 'The following diagram represents a simple representation of the **Spring Container**
    process towards creating a fully configured application:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表代表了**Spring容器**向创建完全配置的应用程序的过程的简单表示：
- en: '![](img/e59e8c91-5ae5-4977-a721-ced135b86944.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e59e8c91-5ae5-4977-a721-ced135b86944.jpg)'
- en: The Spring IoC container
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Spring IoC容器
- en: 'The following example shows the basic structure of XML-based configuration
    metadata:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了基于XML的配置元数据的基本结构：
- en: '[PRE2]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `id` attribute is a string that you use to identify the individual `bean`
    definition. The `class` attribute defines the type of `bean`, and uses the fully
    qualified `class` name. The value of the `id` attribute refers to collaborating
    objects.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`属性是一个字符串，用于标识单个`bean`定义。`class`属性定义了`bean`的类型，并使用了完全限定的`class`名称。`id`属性的值指的是协作对象。'
- en: What are Spring beans?
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Spring bean？
- en: You can consider a **Spring bean** as a simple Java object, instantiated, configured,
    and managed by a Spring IoC container. It is called a bean instead of an object
    or component because it is a replacement for complex and heavy enterprise JavaBeans
    with respect to the origin of the framework. We will learn more about Spring bean
    instantiation methods in [Chapter 2](cd47e5f4-5c77-413c-935f-ae3bfa508c9a.xhtml),
    *Spring Best Practices and Bean Wiring Configurations*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将**Spring bean**视为由Spring IoC容器实例化、配置和管理的简单Java对象。它被称为bean而不是对象或组件，因为它是对框架起源的复杂和沉重的企业JavaBeans的替代。我们将在[第2章](cd47e5f4-5c77-413c-935f-ae3bfa508c9a.xhtml)中学习更多关于Spring
    bean实例化方法的内容，*Spring最佳实践和bean装配配置*。
- en: Instantiating a Spring container
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例化Spring容器
- en: For creating bean instances, we first need to instantiate a Spring IoC container
    by reading the configuration metadata. After initialization of an IoC container,
    we can get the bean instances using the bean name or ID.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建bean实例，我们首先需要通过读取配置元数据来实例化Spring IoC容器。在初始化IoC容器之后，我们可以使用bean名称或ID获取bean实例。
- en: 'Spring provides two types of IoC container implementations:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了两种类型的IoC容器实现：
- en: '`BeanFactory`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BeanFactory`'
- en: '`ApplicationContext`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationContext`'
- en: BeanFactory
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeanFactory
- en: The `BeanFactory` container acts as the simplest container providing basic support
    for DI, and it is defined by the `org.springframework.beans.factory.BeanFactory`
    interface. `BeanFactory` is responsible to source, configure, and assemble the
    dependencies between objects. `BeanFactory` mainly acts as an object pool, where
    object creation and destruction is managed through configuration. The most popular
    and useful implementation of `BeanFactory` is the `org.springframework.context.support.ClassPathXmlApplicationContext`.
    The `ClassPathXmlApplicationContext` uses XML configuration metadata to create
    a fully configured application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`BeanFactory`容器充当最简单的容器，提供了对DI的基本支持，它由`org.springframework.beans.factory.BeanFactory`接口定义。`BeanFactory`负责在对象之间获取、配置和组装依赖关系。`BeanFactory`主要充当对象池，通过配置管理对象的创建和销毁。`BeanFactory`最受欢迎和有用的实现是`org.springframework.context.support.ClassPathXmlApplicationContext`。`ClassPathXmlApplicationContext`使用XML配置元数据来创建一个完全配置的应用程序。'
- en: 'The following sample defines a simple `HelloWorld` application using `ClassPathXmlApplicationContext`.
    The content of `Beans.xml` looks as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例定义了一个简单的`HelloWorld`应用程序，使用`ClassPathXmlApplicationContext`。`Beans.xml`的内容如下：
- en: '[PRE3]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding XML code represents the content of `bean` XML configuration. It
    has a single `bean` configured, which has a single property with the `name` message.
    It has a default `value` set for the property.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的XML代码表示了`bean` XML配置的内容。它配置了一个单独的`bean`，其中有一个带有`name`消息的属性。该属性有一个默认的`value`设置。
- en: Now, the following Java class represents `bean` configured in the preceding
    XML.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以下Java类表示在前面的XML中配置的`bean`。
- en: 'Let''s have a look at `HelloWorld.java`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`HelloWorld.java`：
- en: '[PRE4]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the end, we need to use `ClassPathXmlApplicationContext` to create the `HelloWorld`
    bean and invoke a method in the created Spring bean.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要使用`ClassPathXmlApplicationContext`来创建`HelloWorld` bean，并调用创建的Spring bean中的方法。
- en: '`Main.java` looks as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main.java`如下所示：'
- en: '[PRE5]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ApplicationContext
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ApplicationContext
- en: The `ApplicationContext` container provides support to access application components
    using `BeanFactory` methods. This includes all functionality of `BeanFactory`.
    In addition, `ApplicationContext` can also perform more enterprise functionalities,
    like transaction, AOP, resolving text messages from properties files, and pushing
    application events to interested listeners. It also has the ability to publish
    events to the registered listeners.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationContext`容器提供了使用`BeanFactory`方法访问应用程序组件的支持。这包括`BeanFactory`的所有功能。此外，`ApplicationContext`还可以执行更多的企业功能，如事务、AOP、从属性文件解析文本消息以及将应用程序事件推送给感兴趣的监听器。它还具有将事件发布给已注册监听器的能力。'
- en: The mostly-used implementations of `ApplicationContext` are `FileSystemXmlApplicationContext`,
    `ClassPathXmlApplicationContext`, and `AnnotationConfigApplicationContext`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationContext`的最常用的实现是`FileSystemXmlApplicationContext`、`ClassPathXmlApplicationContext`和`AnnotationConfigApplicationContext`。'
- en: 'Spring also provides us with a web-aware implementation of the `ApplicationContext`
    interface, as shown:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Spring还为我们提供了`ApplicationContext`接口的Web-aware实现，如下所示：
- en: '`XmlWebApplicationContext`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XmlWebApplicationContext`'
- en: '`AnnotationConfigWebApplicationContext`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnnotationConfigWebApplicationContext`'
- en: 'We can use either one of these implementations to load beans into a `BeanFactory`;
    it depends upon our application configuration file locations. For example, if
    we want to load our configuration file `Beans.xml` from the filesystem in a specific
    location, we can use a `FileSystemXmlApplicationContext` class that looks for
    the configuration file `Beans.xml` in a specific location within the filesystem:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些实现中的任何一个来将bean加载到`BeanFactory`中；这取决于我们的应用程序配置文件的位置。例如，如果我们想要从文件系统中的特定位置加载我们的配置文件`Beans.xml`，我们可以使用`FileSystemXmlApplicationContext`类，该类在文件系统中的特定位置查找配置文件`Beans.xml`：
- en: '[PRE6]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we want to load our configuration file `Beans.xml` from the classpath of
    our application, we can use `ClassPathXmlApplicationContext` class provided by
    Spring. This class looks for the configuration file `Beans.xml` anywhere in the
    classpath, including JAR files:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从应用程序的类路径加载我们的配置文件`Beans.xml`，我们可以使用Spring提供的`ClassPathXmlApplicationContext`类。这个类在类路径中的任何地方，包括JAR文件中，查找配置文件`Beans.xml`：
- en: '[PRE7]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you are using a Java configuration instead of an XML configuration, you
    can use `AnnotationConfigApplicationContext`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Java配置而不是XML配置，您可以使用`AnnotationConfigApplicationContext`：
- en: '[PRE8]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After loading the configuration files and getting an `ApplicationContext`,
    we can fetch beans from the Spring container by calling the `getBean()` method
    of the `ApplicationContext`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 加载配置文件并获取`ApplicationContext`之后，我们可以通过调用`ApplicationContext`的`getBean()`方法从Spring容器中获取bean：
- en: '[PRE9]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the following section, we will learn about the Spring bean life cycle, and
    how a Spring container reacts to the Spring bean to create and manage it.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的部分，我们将学习Spring bean的生命周期，以及Spring容器如何对Spring bean做出反应以创建和管理它。
- en: Spring bean life cycle
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring bean生命周期
- en: The factory method design pattern is used by the Spring `ApplicationContext`
    to create Spring beans in the container in the correct order, as per the given
    configuration. So, the Spring container is responsible for managing the life cycle
    of the bean, from creation to destruction. In a normal Java application, a `new`
    keyword of Java is used to instantiate the bean, and it's ready to use. Once the
    bean is no longer in use, it's eligible for garbage collection. But in a Spring
    container, the life cycle of the bean is more elaborate.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法设计模式被Spring `ApplicationContext`用来按照给定的配置在容器中正确顺序创建Spring bean。因此，Spring容器负责管理bean的生命周期，从创建到销毁。在普通的Java应用程序中，使用Java的`new`关键字来实例化bean，然后就可以使用了。一旦bean不再使用，就可以进行垃圾回收。但是在Spring容器中，bean的生命周期更加复杂。
- en: 'The following diagram illustrates the life cycle of a typical Spring bean:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了典型Spring bean的生命周期：
- en: '![](img/5f0cc18b-e6fe-4d9c-8522-881ca5674560.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f0cc18b-e6fe-4d9c-8522-881ca5674560.jpg)'
- en: Spring bean life cycle
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Spring bean生命周期
- en: In the next section, we will see the new features of the Spring Framework 5.0.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到Spring Framework 5.0的新功能。
- en: New features in the Spring Framework 5.0
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的新功能
- en: The **Spring Framework 5.0** is the first major upgrade in the Spring Framework,
    almost four years after the Spring Framework 4.0\. In this time frame, one of
    the major developments has been the evolution of the Spring Boot project. We will
    discuss the new features in Spring Boot 2.0 in the next section. One of the biggest
    features of the Spring Framework 5.0 is **reactive programming**.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Framework 5.0**是Spring Framework在4.0版本之后近四年的第一个重大升级。在这段时间内，最重要的发展之一就是Spring
    Boot项目的发展。我们将在下一节讨论Spring Boot 2.0的新功能。Spring Framework 5.0最大的特点之一是**响应式编程**。'
- en: 'Core reactive programming features and support for reactive endpoints are available
    out of the box with the Spring Framework 5.0\. The list of important changes includes
    the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0具有核心响应式编程功能和对响应式端点的支持。重要变化的列表包括以下内容：
- en: Baseline upgrades
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基线升级
- en: Reactive programming support
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式编程支持
- en: Core features upgrades
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心功能升级
- en: Spring Web MVC upgrades
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Web MVC升级
- en: Spring's new functional web framework, **WebFlux**
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring的新功能性Web框架**WebFlux**
- en: Modularity support
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化支持
- en: Kotlin language support
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin语言支持
- en: Improved testing support
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的测试支持
- en: Dropped or deprecated features
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用或废弃的功能
- en: We will discuss these changes in detail in the following sections.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分详细讨论这些变化。
- en: Baseline upgrades
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基线升级
- en: The entire Spring Framework 5.0 has a JDK 8 and Jakarta EE 7 baseline. Basically,
    it means that to work on the Spring Framework 5.0, Java 8 is the minimum requirement.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 整个Spring Framework 5.0都有一个JDK 8和Jakarta EE 7的基线。基本上，这意味着要在Spring Framework 5.0上工作，Java
    8是最低要求。
- en: 'Some of the important baseline Jakarta EE 7 specifications for the Spring Framework
    5.0 are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的一些重要的基线Jakarta EE 7规范如下：
- en: The code base of the Spring Framework 5.0 is based on Java 8 source code level
    now. So, the code readability is improved using inferred generics, lambdas, and
    so on. It also has the stability in the code for conditional support for Java
    8 features.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的代码基于Java 8的源代码级别。因此，使用推断泛型、lambda等提高了代码的可读性。它还具有对Java 8特性的条件支持的代码稳定性。
- en: The Spring Framework requires at least Jakarta EE 7 API level to run any of
    the Spring Framework 5.0 applications. It requires Servlet 3.1, Bean Validation
    1.1, JPA 2.1, and JMS 2.0.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework需要至少Jakarta EE 7 API级别才能运行任何Spring Framework 5.0应用程序。它需要Servlet
    3.1、Bean Validation 1.1、JPA 2.1和JMS 2.0。
- en: 'The development and deployment process is fully compatible with JDK 9 as follows:'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发和部署过程完全兼容JDK 9，具体如下：
- en: Compatible with classpath and module path, with stable automatic module names
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与类路径和模块路径兼容，具有稳定的自动模块名称
- en: The Spring Framework's build and test suite also pass on JDK 9, and by default,
    it can be run on JDK 8
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework的构建和测试套件也在JDK 9上通过，并且默认情况下可以在JDK 8上运行
- en: Reactive programming support
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式编程支持
- en: The reactive programming model stands out among the most exciting feature of
    Spring 5.0\. The Spring 5.0 Framework is based on a reactive foundation and is
    completely asynchronous and non-blocking. The new event-loop execution model can
    scale vertically using few threads.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式编程模型是Spring 5.0最令人兴奋的特性之一。Spring 5.0框架基于响应式基础，完全是异步和非阻塞的。新的事件循环执行模型可以使用少量线程进行垂直扩展。
- en: The framework procures reactive streams to provide a system for conveying **backpressure**
    in a pipeline of reactive components. Backpressure is an idea that guarantees
    consumers do not get overpowered with data originating from different producers.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架获取了反应式流以提供在反应式组件管道中传递**背压**的系统。背压是一个确保消费者不会被来自不同生产者的数据压倒的概念。
- en: 'While Java 8 does not have built-in support for reactive programming, there
    are a number of frameworks that provide support for reactive programming:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Java 8没有内置对响应式编程的支持，但有许多框架提供对响应式编程的支持：
- en: '**Reactive Streams**: Language-neutral attempt to define reactive APIs'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reactive Streams**：语言中立的尝试定义响应式API'
- en: '**Reactor**: Java implementation of Reactive Streams provided by the Spring
    Pivotal team'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reactor**：由Spring Pivotal团队提供的Reactive Streams的Java实现'
- en: '**Spring WebFlux**: Enables the development of web applications based on reactive
    programming; provides a programming model similar to Spring MVC'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring WebFlux**：基于响应式编程开发Web应用程序；提供类似于Spring MVC的编程模型'
- en: Core features upgrades
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心功能升级
- en: 'As a part of the new features introduced in Java 8, the core of the Spring
    Framework 5.0 has been revised to provide some of the following key features:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Java 8引入的新功能的一部分，Spring Framework 5.0的核心已经进行了修订，提供了以下一些关键功能：
- en: Java 8 reflection enhancements include a provision of accessing method parameters
    in the Spring Framework 5.0 efficiently.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 8反射增强包括在Spring Framework 5.0中高效地访问方法参数的功能。
- en: Provision of selective declaration support of Java 8 default methods in Spring
    Core interfaces.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring Core接口中提供对Java 8默认方法的选择性声明支持。
- en: Supports `@Nullable` and `@NotNull` annotations to explicitly mark nullable
    arguments and return values. This eliminates the cause of `NullPointerExceptions`
    at runtime and enables us to deal with null values at compile time.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持@Nullable和@NotNull注释，以明确标记可为空参数和返回值。这消除了运行时的NullPointerExceptions的原因，并使我们能够在编译时处理空值。
- en: For the logging side, the Spring Framework 5.0 provides out-of-the-box support
    with the Commons Logging Bridge module, named `spring-jcl` instead of the standard
    Commons Logging. Also, this new version will be able to detect Log4j 2.x, the
    **Simple Logging Facade for Java** (**SLF4J**), **JUL** (short for `java.util.logging`),
    without any extra amendments.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日志记录方面，Spring Framework 5.0提供了Commons Logging Bridge模块的开箱即用支持，命名为spring-jcl，而不是标准的Commons
    Logging。此外，这个新版本将能够检测Log4j 2.x，Simple Logging Facade for Java（SLF4J），JUL（java.util.logging）等，无需任何额外的修改。
- en: It also supports `Resource` abstraction by providing the `isFile` indicator
    for the `getFile` method.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 它还通过为getFile方法提供isFile指示符，支持Resource抽象。
- en: Spring Web MVC upgrades
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Web MVC升级
- en: Spring 5.0 fully supports the Servlet 3.1 signature in Spring-provided `Filter`
    implementations. It also provides support for the Servlet 4.0 `PushBuilder` argument
    in Spring MVC controller methods.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 5.0完全支持Spring提供的Filter实现中的Servlet 3.1签名。它还为Spring MVC控制器方法中的Servlet 4.0
    PushBuilder参数提供支持。
- en: Spring 5.0 also provides unified support for common media types through the `MediaTypeFactory`
    delegate, including the use of the Java Activation Framework.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 5.0还通过MediaTypeFactory委托提供了对常见媒体类型的统一支持，包括使用Java Activation Framework。
- en: The new `ParsingPathMatcher` will act as an alternative to `AntPathMatcher`,
    with more efficient parsing and extended syntax.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 新的ParsingPathMatcher将作为AntPathMatcher的替代，具有更高效的解析和扩展语法。
- en: Spring 5.0 will also be providing support for `ResponseStatusException` as a
    programmatic alternative to `@ResponseStatus`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 5.0还将提供对ResponseStatusException的支持，作为@ResponseStatus的编程替代。
- en: Spring's new functional web framework – WebFlux
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring的新功能性Web框架-WebFlux
- en: Another exciting feature to support reactive HTTP and WebSocket clients, the
    Spring Framework 5.0 provides the `spring-webflux` module. The Spring Framework
    5.0 also provides support for REST, HTML, and WebSocket-style interactions for
    reactive web applications running on servers.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持响应式HTTP和WebSocket客户端，Spring Framework 5.0提供了spring-webflux模块。Spring Framework
    5.0还为在服务器上运行的响应式Web应用程序提供了对REST、HTML和WebSocket风格交互的支持。
- en: 'In `spring-webflux`, there are two major programming models on the server side:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在spring-webflux中，服务器端有两种主要的编程模型：
- en: Support for `@Controller` annotation including other Spring MVC annotations
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持@Controller注释，包括其他Spring MVC注释
- en: Provision for functional style routing and handling with Java 8 Lambda
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供对Java 8 Lambda的函数式风格路由和处理支持
- en: Spring `spring-webflux` also provides support for creating `WebClient`, which
    is reactive and non-blocking, as an alternative to `RestTemplate`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Spring spring-webflux还提供了对WebClient的支持，它是响应式和非阻塞的，作为RestTemplate的替代。
- en: Modularity support
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化支持
- en: The modular framework is trending on the Java platform. From Java 9, the Java
    platform became modular, and that helps to remove the flaws in encapsulation.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化框架在Java平台上很受欢迎。从Java 9开始，Java平台变得模块化，有助于消除封装中的缺陷。
- en: 'There are certain problems resulted to have modularity support, as explained
    here:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些问题导致了模块化支持，如下所述：
- en: Java platform size: Since the last couple of decades, there was no need to add
    modularity support in Java. But there are many new lightweight platforms available
    on the market, like the **Internet of Things** (**IoT**), and Node.js. So, it
    was an urgent need to reduce the size of JDK version, because initial versions
    of JDK were less than 10 MB in size, whereas recent versions need more than 200
    MB.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java平台大小：在过去的几十年里，Java不需要添加模块化支持。但是市场上有许多新的轻量级平台，如物联网（IoT）和Node.js。因此，迫切需要减小JDK版本的大小，因为初始版本的JDK大小不到10MB，而最近的版本需要超过200MB。
- en: '`ClassLoader` difficulty: When the Java `ClassLoader` searches for the classes,
    it will pick the class definition that is around itself, and immediately load
    the first class available. So, if there is the same class available in different
    JARs, then it is not possible for `ClassLoader` to specify the JAR from which
    the class is to be loaded.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ClassLoader困难：当Java ClassLoader搜索类时，它将选择周围的类定义，并立即加载第一个可用的类。因此，如果在不同的JAR中有相同的类可用，那么ClassLoader无法指定要加载类的JAR。
- en: To make Java applications modular, **Open System Gateway initiative (OSGi)**
    is one of the initiatives to bring modularity into the Java platform. In OSGi,
    each module is denoted as a **bundle**. Each bundle has its own life cycle, with
    different states as installed, started, and stopped.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Java应用程序模块化，Open System Gateway initiative (OSGi)是将模块化引入Java平台的倡议之一。在OSGi中，每个模块被表示为一个bundle。每个bundle都有自己的生命周期，具有不同的状态，如已安装、已启动和已停止。
- en: The **Jigsaw** project is a primary motivation under the **Java Community Process**
    (**JCP**), to bring modularity into Java. Its main purpose is to define and implement
    a modular structure for JDK and to define a module system for Java applications.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Jigsaw项目是Java社区流程（JCP）的主要动力，旨在将模块化引入Java。其主要目的是为JDK定义和实现模块化结构，并为Java应用程序定义模块系统。
- en: Kotlin language support
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin语言支持
- en: The Spring Framework 5.0 introduces a statically typed JVM language support
    the **Kotlin ****language** ([https://kotlinlang.org/](https://kotlinlang.org/)), which
    enables code that is short, readable, and expressive. Kotlin is basically an object-oriented
    language that runs on top of the JVM, and also supports functional programming
    style.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0引入了静态类型的JVM语言支持**Kotlin语言** ([https://kotlinlang.org/](https://kotlinlang.org/))，它使得代码简短、可读且表达力强。Kotlin基本上是一种运行在JVM之上的面向对象的语言，也支持函数式编程风格。
- en: With Kotlin support, we can dive into functional Spring programming, especially
    for functional web endpoints and bean registration.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 有了Kotlin支持，我们可以深入了解函数式Spring编程，特别是对于函数式Web端点和bean注册。
- en: 'In Spring Framework 5.0, we can write clean and readable Kotlin code for web-functional
    APIs as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Framework 5.0中，我们可以编写干净可读的Kotlin代码用于Web功能API，如下所示：
- en: '[PRE10]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With the Spring 5.0 version, Kotlin's null-safety support is also provided with
    the indicating annotations using `@NonNull`, `@Nullable`, `@NonNullApi`, and `@NonNullFields`
    from the `org.springframework.lang` package.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring 5.0版本中，Kotlin的空安全支持也提供了使用`@NonNull`、`@Nullable`、`@NonNullApi`和`@NonNullFields`注解的指示，来自`org.springframework.lang`包。
- en: 'There are some newly added Kotlin extensions that basically add function extensions
    to the existing Spring APIs. For example, the extension `fun <T : Any> BeanFactory.getBean():
    T` from the package `org.springframework.beans.factory` adds the support in `org.springframework.beans.factory.BeanFactory` for
    searching a bean by just specifying the bean type as Kotlin''s reified type parameter
    without class argument:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '还有一些新添加的Kotlin扩展，基本上是为现有的Spring API添加了函数扩展。例如，来自`org.springframework.beans.factory`包的扩展`fun
    <T : Any> BeanFactory.getBean(): T`为`org.springframework.beans.factory.BeanFactory`添加了支持，可以通过指定bean类型作为Kotlin的reified类型参数来搜索bean，而无需类参数：'
- en: '[PRE11]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'One more extension can be found in `org.springframework.ui`, which provides
    operator overloading support to add an array-like getter and setter to the `model`
    interface:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在`org.springframework.ui`中找到另一个扩展，它提供了操作符重载支持，以向`model`接口添加类似数组的getter和setter：
- en: '[PRE12]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Improved testing support
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进的测试支持
- en: On the testing front, the Spring Framework 5.0 likewise accompanies JUnit Jupiter
    ([https://junit.org/junit5/docs/current/user-guide/](https://junit.org/junit5/docs/current/user-guide/)).
    It helps in writing tests and extensions in JUnit 5\. It also gives a test engine
    to run Jupiter-constructed tests with respect to Spring and also provides a programming
    and extension model.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试方面，Spring Framework 5.0同样支持JUnit Jupiter ([https://junit.org/junit5/docs/current/user-guide/](https://junit.org/junit5/docs/current/user-guide/))。它有助于在JUnit
    5中编写测试和扩展。它还提供了一个测试引擎来运行基于Jupiter构建的测试，关于Spring的方面，还提供了一个编程和扩展模型。
- en: The Spring Framework 5.0 additionally underpins parallel test execution in the
    Spring `TestContext` Framework. For Spring WebFlux, `spring-test` likewise incorporates
    bolster for `WebTestClient` to integrate testing support for the reactive programming model.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0还支持Spring `TestContext` Framework中的并行测试执行。对于Spring WebFlux，`spring-test`还包括对`WebTestClient`的支持，以整合对响应式编程模型的测试支持。
- en: There is no compelling reason to run a server for testing scenarios. By utilizing
    a new `WebTestClient`, which is like `MockMvc`, `WebTestClient` can bind specifically
    to the WebFlux server infrastructure using a mock request and response.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要为测试场景运行服务器。通过使用新的`WebTestClient`，类似于`MockMvc`，`WebTestClient`可以直接绑定到WebFlux服务器基础设施，使用模拟请求和响应。
- en: Dropped or deprecated features
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已删除或弃用的功能
- en: In Spring 5.0, there are some of the packages that have been either removed
    or deprecated at the API level. The `mock.staticmock` package of the `spring-aspects` module
    is no longer available. The `BeanFactoryLocator` is also not available along with
    the `bean.factory.access` package. The `NativeJdbcExtractor` is also no longer
    available along with the `jdbc.support.nativejdbc` package. The packages `web.view.tiles2`, `orm.hibernate3`, and `orm.hibernate4` are
    also replaced with Tiles 3 and Hibernate 5.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring 5.0中，一些包已经在API级别被删除或弃用。`spring-aspects`模块的`mock.staticmock`包不再可用。`BeanFactoryLocator`也不再可用，以及`bean.factory.access`包。`NativeJdbcExtractor`也不再可用，以及`jdbc.support.nativejdbc`包。`web.view.tiles2`、`orm.hibernate3`和`orm.hibernate4`包也被Tiles
    3和Hibernate 5所取代。
- en: Many other bundles like JasperReports, Portlet, Velocity, JDO, Guava, XMLBeans
    are no longer supported in Spring 5\. If you are utilizing any of the preceding
    bundles, it is advised to remain on the Spring Framework 4.3.x.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 5中不再支持许多其他捆绑包，如JasperReports、Portlet、Velocity、JDO、Guava、XMLBeans。如果您正在使用上述任何捆绑包，建议保持在Spring
    Framework 4.3.x上。
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we gained a clear understanding of the core features of the
    Spring Framework. We also covered different kinds of Spring modules. After that,
    we went through different types of Spring projects in the Spring Framework. We
    also understood the mechanisms of a Spring IoC container. At the end of the chapter,
    we looked at the new features and enhancements introduced in Spring 5.0.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对Spring Framework的核心特性有了清晰的了解。我们还涵盖了不同类型的Spring模块。之后，我们了解了Spring Framework中不同类型的项目。我们还理解了Spring
    IoC容器的机制。在本章的最后，我们看了Spring 5.0中引入的新特性和增强功能。
- en: In the next chapter, we will understand the concept of DI in detail. We will
    also cover the different types of configurations using DI, including performance
    assessment. And finally, we will go through the pitfalls of DI.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细了解DI的概念。我们还将涵盖使用DI的不同类型的配置，包括性能评估。最后，我们将了解DI的陷阱。
