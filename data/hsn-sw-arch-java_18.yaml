- en: 'Chapter 15: What''s New in Java?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章：Java的新特性是什么？
- en: '**Java**, as is obvious, has been the *leitmotif* of this book. Even if, in
    some of the previous chapters, we focused on more general concepts such as architectural
    design and software life cycle management, the main goal of this book is to provide
    Java software engineers with a compendium of architectural concepts, ultimately
    supporting them to become better architects.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java**，很明显，一直是这本书的**主旋律**。即使在一些前面的章节中，我们关注的是更一般的概念，如架构设计和软件生命周期管理，但本书的主要目标是向Java软件工程师提供一套架构概念汇编，最终帮助他们成为更好的架构师。'
- en: With this in mind, we cannot avoid a few words regarding the status of Java
    technology today, especially regarding the latest releases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们不可避免地要谈谈Java技术今天的状况，特别是关于最新版本的情况。
- en: 'In this chapter, we are going to discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Java versioning
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java版本号
- en: Vendor ecosystem
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应商生态系统
- en: What's new in Java 17
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17的新特性
- en: So, let's start with an overview of Java versioning.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从Java版本号的概述开始。
- en: Java versioning
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java版本号
- en: There have been many changes made to the **Java versioning** scheme and schedule
    over its history. One first thing to note is that, at the very beginning, Java
    versioning used to follow a *1.x* scheme, with **1.3** essentially being the first
    widespread version.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java版本号和计划的历史中已经进行了许多变化。首先要注意的是，在最初，Java版本号曾经遵循*1.x*方案，**1.3**基本上是第一个广泛使用的版本。
- en: Since **version 1.5**, however, the versioning scheme ditched the *1.x* prefix,
    so we had **Java 5**, **6**, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，从**版本1.5**开始，版本号方案放弃了*1.x*前缀，因此我们有了**Java 5**、**6**等等。
- en: Another important point to make is about naming. The very first versions were
    called **JDKs** (short for **Java Development Kit** – more about this in a bit).
    Then, from versions **1.2** to **5**, the platform was named **J2SE** (for **Java
    2 Standard Edition**). Since **Java 6**, at the time of writing, the platform
    is referred to as **Java SE** (for **Java Standard Edition**).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的问题是命名。最初的版本被称为**JDK**（代表**Java开发工具包** – 更多内容将在后面介绍）。然后，从版本**1.2**到**5**，平台被称为**J2SE**（代表**Java
    2标准版**）。在撰写本文时，平台被称为**Java SE**（代表**Java标准版**）。
- en: The most important thing to know about the JDK, a term that most of us are familiar
    with, is that until **Java 8**, the Java platform was distributed in two versions,
    the **Java Runtime Environment** (**JRE**) and the JDK. The JRE was basically
    a stripped-down version of the JDK, lacking all the development tools (such as
    the javac compiler). As said, since Java 8, only the JDK version is officially
    distributed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JDK，一个我们大多数人熟悉的术语，最重要的了解是，直到**Java 8**，Java平台以两种版本分发，即**Java运行时环境**（**JRE**）和JDK。JRE基本上是JDK的简化版，缺少所有开发工具（例如javac编译器）。正如所说，自从Java
    8以来，只有JDK版本被官方分发。
- en: In terms of release timelines, older Java releases used to have a long and non-uniform
    scheme, with major versions being released in intervals varying from between 1
    and 3 years. Since **Java 9**, though, the platform's evolution has followed a
    6-month release timeline for major versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布时间表方面，较老的Java版本曾经有一个长且不统一的方案，主要版本之间的发布间隔在1到3年之间。然而，自从**Java 9**以来，平台的主要版本遵循了6个月的发布时间表。
- en: One more point relates to **Long-Term Support** (**LTS**) releases. Roughly
    every 2 or 3 years, a version is considered LTS. This basically means a longer
    official support cycle (up to 10 years, depending on the vendor) with more features
    added (while non-LTS releases usually have fewer and simpler new features).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一点与**长期支持**（**LTS**）版本有关。大约每2到3年，一个版本被认为是LTS。这基本上意味着更长的官方支持周期（取决于供应商，最长可达10年），并增加了更多功能（而非LTS版本通常具有较少且更简单的功能）。
- en: Last but not least, each major version (both LTS and non-LTS ones) also brings
    with it a set of minor versions, shipping patches, bug fixes, and security fixes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，每个主要版本（包括LTS和非LTS版本）都带来了一组小版本，包括补丁、错误修复和安全修复。
- en: 'In the following diagram, you can see the graphical representation of the support
    life cycle for some of the most important Java releases:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，你可以看到一些最重要的Java版本的支持生命周期图示：
- en: '![Figure 15.1 – Version support life cycle for some Java releases'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1 – 一些Java版本的支持生命周期](img/Figure_15.1_B16354.jpg)'
- en: '](img/Figure_15.1_B16354.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1 – 一些Java版本的支持生命周期](img/Figure_15.1_B16354.jpg)'
- en: Figure 15.1 – Version support life cycle for some Java releases
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – 一些Java版本的支持生命周期
- en: Other than the version numbering, a further important consideration concerns
    the vendor ecosystem.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了版本编号外，另一个重要的考虑因素是供应商生态系统。
- en: Vendor ecosystem
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应商生态系统
- en: As many of you know, Java was released as a project by (the now defunct) Sun
    Microsystems. It was originally developed as a language for clients and what would
    later be called the **Internet of Things** (**IoT**). Ironically, nowadays, it's
    rarely used in such scenarios and, conversely, very much used for server-side
    enterprise applications, which was likely not the first use case in mind when
    Java was designed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如许多人所知，Java最初是由（现已解散的）Sun Microsystems作为一个项目发布的。它最初被开发为客户端语言，以及后来被称为**物联网**（**IoT**）的语言。讽刺的是，如今，它很少用于此类场景，相反，在服务器端企业应用中得到了广泛使用，这可能是Java设计时未曾考虑的第一个用例。
- en: In 2006, Sun released Java technology as open source under the GPL license.
    Sun later went out of business and was acquired by Oracle in 2010\. With that
    transition, the Java ecosystem started to be governed mostly by Oracle itself.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，Sun在GPL许可下将Java技术作为开源发布。Sun后来倒闭，并于2010年被Oracle收购。随着这一转变，Java生态系统开始主要受Oracle本身的管理。
- en: Java releases are *certified* using the **Technology Compatibility Kit** (**TCK**),
    which is a test suite used for testing the compatibility of Java distribution
    with the specifications included in a specific version. And talking of Java distributions,
    the most important project here is OpenJDK.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Java版本使用**技术兼容性工具包**（**TCK**）进行认证，这是一个用于测试Java发行版与特定版本中包含的规范兼容性的测试套件。谈到Java发行版，这里最重要的项目是OpenJDK。
- en: OpenJDK distributions
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenJDK发行版
- en: '**OpenJDK** is the main source code repository from which many widespread JDK
    implementations have been derived, including the Oracle Java distribution.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenJDK**是许多广泛使用的JDK实现的主要源代码仓库，包括Oracle Java发行版。'
- en: We know that Oracle leads the open source development of Java within the OpenJDK
    community. OpenJDK is essentially the reference implementation of Java technology.
    Oracle ships the Oracle OpenJDK (which is free and not supported commercially)
    and the Oracle JDK (which is commercially supported under a paid subscription).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道Oracle在OpenJDK社区中领导Java的开源开发。OpenJDK实际上是Java技术的参考实现。Oracle发布了Oracle OpenJDK（免费且不提供商业支持）和Oracle
    JDK（在付费订阅下提供商业支持）。
- en: 'Many other vendors provide their own distributions, with small differences
    between them. All such distributions are created starting from the OpenJDK open
    source code base:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他供应商提供自己的发行版，它们之间有细微的差别。所有这些发行版都是从OpenJDK开源代码库开始的：
- en: '**AdoptOpenJDK** is a multivendor project for distributing *vanilla* OpenJDK
    builds ([https://adoptopenjdk.net](https://adoptopenjdk.net)).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AdoptOpenJDK**是一个多供应商项目，用于分发*vanilla* OpenJDK构建([https://adoptopenjdk.net](https://adoptopenjdk.net))。'
- en: Red Hat provides its own build featuring support for the Red Hat Enterprise
    Linux operating system and some add-ons, such as support for the Shenandoah garbage
    collection implementation ([https://developers.redhat.com/products/openjdk](https://developers.redhat.com/products/openjdk)).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat提供自己的构建版本，包括对Red Hat Enterprise Linux操作系统的支持以及一些附加功能，例如对Shenandoah垃圾回收实现的支持([https://developers.redhat.com/products/openjdk](https://developers.redhat.com/products/openjdk))。
- en: Azul Technology builds a commercially supported implementation, including some
    proprietary garbage collection features ([https://www.azul.com/downloads](https://www.azul.com/downloads)).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azul Technology构建了一个商业支持的实现，包括一些专有垃圾回收功能([https://www.azul.com/downloads](https://www.azul.com/downloads))。
- en: AWS ships **Corretto**, an OpenJDK build designed to run on the AWS Cloud infrastructure
    ([https://aws.amazon.com/it/corretto](https://aws.amazon.com/it/corretto)).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS发布了**Corretto**，这是一个为在AWS云基础设施上运行而设计的OpenJDK构建版本([https://aws.amazon.com/it/corretto](https://aws.amazon.com/it/corretto))。
- en: IBM ships **OpenJ9**, originally developed for running on mainframe technology
    and now available, under the OpenJDK umbrella, for other architectures ([https://www.eclipse.org/openj9](https://www.eclipse.org/openj9)).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM发布了**OpenJ9**，最初是为在大型机技术下运行而开发的，现在在OpenJDK的框架下，也适用于其他架构([https://www.eclipse.org/openj9](https://www.eclipse.org/openj9))。
- en: '`polyglot` usage, in order to run code written in **Python**, **JavaScript**,
    **Ruby**, and more.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`polyglot`，以便运行用**Python**、**JavaScript**、**Ruby**等语言编写的代码。
- en: These are the most commonly used Java distributions. The choice, unless you
    are looking for a very specific feature, is mostly dependent on circumstances,
    such as existing support contracts or commercial pricing. In the absence of specific
    needs, AdoptOpenJDK is usually a good place to start.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是最常用的Java发行版。除非你在寻找一个非常特定的功能，否则选择主要取决于环境，例如现有的支持合同或商业定价。在没有具体需求的情况下，AdoptOpenJDK通常是一个不错的选择。
- en: A recent ecosystem report built by **Snyk** ([https://snyk.io/jvm-ecosystem-report-2021](https://snyk.io/jvm-ecosystem-report-2021)),
    shows that the builds of AdoptOpenJDK are the most popular by far (around 44%),
    followed by the different flavors (commercial and otherwise) of the Oracle distribution.
    Another important piece of news from the report is the growing adoption of **Java
    11** and the move away from Java 8\. However, we will see how the adoption of
    **Java 17** will grow in the upcoming months and years.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由**Snyk**（[https://snyk.io/jvm-ecosystem-report-2021](https://snyk.io/jvm-ecosystem-report-2021)）构建的最新生态系统报告显示，AdoptOpenJDK的构建是最受欢迎的（大约44%），其次是Oracle发行的不同版本（商业和非商业）。报告中的另一个重要新闻是**Java
    11**的采用率不断增长，以及从Java 8的迁移。然而，我们将看到在接下来的几个月和几年中**Java 17**的采用率将如何增长。
- en: In this regard, let's see what's new in the latest version of Java, Java 17.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，让我们看看Java的最新版本，Java 17的新特性。
- en: What's new in Java 17
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 17的新特性
- en: '**Java 17** is an LTS release, meaning that, depending on the vendor, it will
    be supported for more than 5 years (up to 10, in some cases). It was released
    in September 2021.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 17** 是一个长期支持版本，这意味着，根据供应商的不同，它将得到超过5年的支持（在某些情况下可达10年）。它于2021年9月发布。'
- en: Let's look at some of the new features introduced with this version.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个版本引入的一些新特性。
- en: Sealed classes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密封类
- en: '**Sealed classes** were introduced with Java 15, and the feature became officially
    supported with Java 17\. They provide a way to declaratively define classes and
    interfaces while restricting which objects can extend it or implement such classes
    and interfaces.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**密封类**是在Java 15中引入的，并且这个特性在Java 17中得到了官方支持。它们提供了一种声明式定义类和接口的方法，同时限制哪些对象可以扩展它或实现这些类和接口。'
- en: This can be particularly useful in specific cases, such as if you are defining
    an API, as you can, at design time, control some aspects of the usage of APIs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这在某些情况下特别有用，例如如果你正在定义一个API，你可以在设计时控制API使用的某些方面。
- en: 'Here is a simple example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we declare a `Payment` class, and we define that only `Instant`,
    `Wire`, and `CreditCard` can extend it. In this particular example, we suppose
    these classes are in the same package as `Payment`, but it is possible to explicitly
    declare the full package if we wanted to place it somewhere else.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们声明一个`Payment`类，并定义只有`Instant`、`Wire`和`CreditCard`可以扩展它。在这个特定的例子中，我们假设这些类与`Payment`类位于同一个包中，但如果我们想将其放置在其他地方，也可以显式声明完整的包。
- en: 'Also, the exact same syntax can be applied to interfaces:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，完全相同的语法也可以应用于接口：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the same behavior, just for interfaces, so the implementation is allowed
    only for the interfaces listed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这与接口的行为相同，只是实现仅限于列出的接口。
- en: It's worth noticing that a compile-time error is raised if non-allowed operations
    (such as extending a class with a non-declared type) are performed. This will
    help the code to be more stable and testable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，如果执行了不允许的操作（例如使用未声明的类型扩展类），则会引发编译时错误。这将有助于使代码更加稳定和可测试。
- en: Pattern matching for switch statements
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: switch语句的模式匹配
- en: This is a preview feature, meaning that it must be enabled (by passing a command-line
    parameter to the JVM) and is not officially completely supported (even if the
    exact boundaries of support are defined by each vendor).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个预览特性，这意味着它必须被启用（通过向JVM传递命令行参数）并且不是官方完全支持的（尽管每个供应商都定义了支持的确切边界）。
- en: This feature is about extending the behavior of the `switch` construct.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性是关于扩展`switch`构造的行为。
- en: 'While there are many different potential use cases (and more will likely be
    refined and finalized in the upcoming releases), these three are the main ones:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多不同的潜在用例（并且未来版本中可能会进一步精炼和确定），但以下三个是主要的：
- en: '`switch` construct can behave like an `instanceof` operator, checking by type
    as in the following example:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`构造可以像`instanceof`运算符一样行为，如下例所示：'
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`switch` expressions raised a `NullPointerException` if the object evaluated
    is `null`, with this new null safety feature, it is possible to explicitly check
    for the `null` case. In this example, the `switch` expression checks over a string
    variable, also checking the `null` case:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果评估的对象为`null`，则`switch`表达式会引发`NullPointerException`，有了这个新的空安全特性，可以显式检查`null`情况。在这个例子中，`switch`表达式检查一个字符串变量，也检查`null`情况：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`switch` branch. So, essentially, the following construct is allowed:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`分支。因此，本质上，以下结构是被允许的：'
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, this is a nice feature allowing for compact and readable code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个很好的特性，允许代码紧凑且易于阅读。
- en: Strongly encapsulating JDK internals
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强烈封装JDK内部组件
- en: Since Java 9, there's been a progressive effort to restrict access to the JDK
    internals. This is meant to discourage the direct utilization of classes residing
    in packages such as `sun.*`, `com.sun.*`, `jdk.*`, and more. The goal of this
    restriction is to reduce coupling to a specific JVM version (hence freeing the
    JVM developers up to evolve such classes, even introducing breaking changes if
    necessary) and enhance security.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 自Java 9以来，一直有逐步限制对JDK内部组件的访问的努力。这是为了阻止直接使用位于`sun.*`、`com.sun.*`、`jdk.*`等包中的类。这种限制的目标是减少对特定JVM版本的耦合（从而让JVM开发者能够进化这些类，甚至在必要时引入破坏性更改）并提高安全性。
- en: To do so, the JDK progressively offered alternatives. Moreover, since Java 9
    (and up to Java 16), source code using those internal classes and methods must
    be compiled by passing the `--illegal-access` parameter, which can be configured
    to permit, deny, or print warnings with details of usage.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，JDK逐步提供了替代方案。此外，自Java 9（以及至Java 16）以来，使用这些内部类和方法的源代码必须通过传递`--illegal-access`参数进行编译，该参数可以配置为允许、拒绝或打印使用详情的警告。
- en: In Java 17, this parameter is no longer usable. Instead, it is possible to use
    the `--add-open` parameter, which allows us to declare specific packages that
    can be used. It is a common opinion that even this possibility will progressively
    be denied in upcoming versions, to completely deny the explicit usage of JDK internals
    in custom code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 17中，此参数不再可用。取而代之的是，可以使用`--add-open`参数，它允许我们声明可以使用的特定包。普遍观点认为，即使这种可能性也将逐步被否认，以完全禁止在自定义代码中显式使用JDK内部组件。
- en: More changes in Java 17
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 17中的更多更改
- en: 'A lot of other changes have been added to Java 17\. Here are some highlights:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Java 17添加了许多其他更改。以下是亮点：
- en: '**Support for the macOS/AArch64**: This allows the compilation and execution
    of Java code on Mac machines running on M1 chips.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持macOS/AArch64**：这允许在运行M1芯片的Mac机器上编译和执行Java代码。'
- en: '**Enhanced pseudo-random number generators**: This is a partial refactoring
    of utilities for pseudo-random number generation, including the deletion of duplicated
    code and the pluggability of different algorithms.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的伪随机数生成器**：这是对伪随机数生成器实用程序的局部重构，包括删除重复代码和不同算法的可插拔性。'
- en: '**Foreign function and memory API**: This is an incubating set of features
    (which are still not stable and will be subject to further evolution) aimed at
    simplifying and securing access to resources (code and data) living outside the
    JVM. This means being able to access memory locations and call methods not managed
    or implemented in the JVM. To do so in previous versions, you were required to
    use **Java Native Interfaces** (**JNI**) classes, which are generally considered
    less secure (and more complex to use).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部函数和内存API**：这是一组孵化特性（这些特性仍然不稳定，并将进一步发展），旨在简化并确保对存在于JVM之外的资源（代码和数据）的访问。这意味着能够访问内存位置并调用JVM未管理或未实现的函数。要在之前的版本中这样做，您需要使用**Java
    Native Interfaces**（JNI）类，这些类通常被认为安全性较低（且使用更复杂）。'
- en: '**Context-specific deserialization filters**: As a part of an effort started
    some JVM versions ago, this is a way to define validation for code deserialization.
    Serialization and deserialization of classes are generally considered potential
    security issues, as specifically crafted payloads can execute arbitrary (and unsafe)
    operations. This feature allows the definition of filters to *prevalidate* the
    kind of code allowed in deserialization operations.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文特定的反序列化过滤器**：作为从一些JVM版本开始的努力的一部分，这是一种定义代码反序列化验证的方法。类序列化和反序列化通常被认为可能是安全漏洞，因为精心设计的有效载荷可以执行任意（且不安全）的操作。此功能允许定义过滤器以*预先验证*在反序列化操作中允许的代码类型。'
- en: '**Deprecation of the applet API for removal**: Applets haven''t been used for
    a long time, for many reasons, including performance and security issues. Moreover,
    most (if not all) of the modern browsers don''t support them anymore. So, they
    are being deprecated and will be completely removed from the JDK.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**废弃并移除applet API**：由于许多原因，包括性能和安全问题，applet已经很久没有被使用了。此外，大多数（如果不是所有）现代浏览器都不再支持它们。因此，它们正在被废弃，并将从JDK中完全移除。'
- en: '**Deprecation of the security manager for removal**: The security manager is
    an API primarily intended for usage along with applets. It was released in **Java
    1.0**. It has been progressively abandoned, both due to complexity and performance
    issues and because applets are now less commonly used. So, it is now deprecated
    and will be removed in an upcoming version of the JDK.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**废弃并移除安全管理者**：安全管理者是一个主要针对与applet一起使用的API。它在**Java 1.0**中发布。由于复杂性和性能问题，以及applet现在使用得较少，它已经被逐渐放弃。因此，它现在已被废弃，并将从即将发布的JDK版本中移除。'
- en: '**Vector API**: This is a new API in the incubation phase (meaning it will
    be subject to changes and further evolution). It aims to define a new API for
    the computation of vectors. Other than being simple to use, this API is designed
    to compile code, specifically targeting available optimizations for supported
    CPU architectures, thereby boosting performance where possible.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向量API**：这是一个处于孵化阶段的全新API（这意味着它将受到变化和进一步发展的约束）。它的目标是定义一个新的API来计算向量。除了使用简单之外，这个API还旨在编译代码，专门针对支持的CPU架构的优化，从而在可能的情况下提高性能。'
- en: While a number of other features have been added, modified, and removed, the
    preceding ones are the most important and impactful.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然已经添加、修改和删除了许多其他特性，但前面提到的那些是最重要且影响最大的。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at some of the novelties introduced with the
    latest release of the Java platform (17).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Java平台（17）最新版本中引入的一些新特性。
- en: We have had the opportunity to have a look at the Java versioning scheme and
    release schedule. We had a quick overview of the Java vendor ecosystem, a snapshot
    of what is an evolving situation at the time of writing. The same applies to the
    newest functionalities of the platform itself. While some features are notable
    by themselves, of course, many will be modified further in the near future.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有机会查看Java的版本方案和发布计划。我们快速概述了Java供应商生态系统，这是在撰写本文时的一个快照，而当时的情况正在不断发展。同样适用于平台本身的新功能。虽然一些特性本身就很显著，当然，许多特性在不久的将来还将进一步修改。
- en: This completes our journey into cloud-native architectures with Java. I hope
    I have provided some interesting insights and ideas, and I wish the best of luck
    to every reader in defining elegant and successful applications and having satisfying
    careers as software architects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们使用Java探索云原生架构的旅程的结束。我希望我提供了一些有趣的见解和想法，并祝愿每一位读者在定义优雅且成功的应用以及作为软件架构师拥有满意的职业生涯时一切顺利。
- en: Further reading
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Oracle, *JDK 17 Release Notes* ([https://www.oracle.com/java/technologies/javase/17-relnote-issues.html](https://www.oracle.com/java/technologies/javase/17-relnote-issues.html))
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle, *JDK 17版本说明* ([https://www.oracle.com/java/technologies/javase/17-relnote-issues.html](https://www.oracle.com/java/technologies/javase/17-relnote-issues.html))
- en: Java Magazine, Mitch Wagner, *Is Java SE open source software? The short answer
    is 'yes.'* ([https://blogs.oracle.com/javamagazine/post/java-se-open-source-license](https://blogs.oracle.com/javamagazine/post/java-se-open-source-license))
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Magazine, Mitch Wagner, *Java SE是开源软件吗？简短的答案是'是'* ([https://blogs.oracle.com/javamagazine/post/java-se-open-source-license](https://blogs.oracle.com/javamagazine/post/java-se-open-source-license))
