- en: Opening up to OAuth 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 OAuth 2 敞开大门
- en: '**OAuth 2** is a very popular form of trusted identity management that allows
    users to manage their identity through a single trusted provider. This convenient
    feature provides users with the security of storing their password and personal
    information with the trusted OAuth 2 provider, optionally disclosing personal
    information upon request. Additionally, the OAuth 2-enabled website offers the
    confidence that the users providing OAuth 2 credentials are who they say they
    are.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth 2** 是一种非常流行的可信身份管理形式，允许用户通过一个可信的提供商来管理他们的身份。这一方便的功能为用户提供了将密码和个人信息存储在可信的
    OAuth 2 提供商处的安全性，必要时可以披露个人信息。此外，支持 OAuth 2 的网站提供了用户提供的 OAuth 2 凭据确实是他们所说的那个人的信心。'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning to set up your own OAuth 2 application in less than 5 minutes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习在 5 分钟内设置自己的 OAuth 2 应用程序
- en: Configuring the JBCP calendar application with a very rapid implementation of
    OAuth 2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 JBCP 日历应用程序，实现 OAuth 2 的快速实施
- en: Learning the conceptual architecture of OAuth 2 and how it provides your site
    with trustworthy user access
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 OAuth 2 的概念架构以及它如何为你的网站提供可信的用户访问
- en: Implementing OAuth 2-based user registration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现基于 OAuth 2 的用户注册
- en: Experimenting with OAuth 2 attribute exchange for user profile functionality
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验 OAuth 2 属性交换以实现用户资料功能
- en: Demonstrating how we can trigger automatic authentication to the previous OAuth
    2 provider
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示我们如何触发与先前 OAuth 2 提供商的自动认证
- en: Examining the security offered by OAuth 2-based login
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查基于 OAuth 2 的登录所提供的安全性
- en: The promising world of OAuth 2
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充满希望的 OAuth 2 世界
- en: As an application developer, you may have heard the term OAuth 2 thrown around
    a lot. OAuth 2 has been widely adopted by web service and software companies around
    the world and is integral to the way these companies interact and share information.
    But what exactly is it? In a nutshell, OAuth 2 is a protocol that allows distinct
    parties to share information and resources in a secure and reliable manner.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发者，你可能经常听到 OAuth 2 这个词。OAuth 2 已在全球 Web 服务和软件公司中得到广泛采用，是这些公司互动和共享信息方式的核心部分。但它到底是什么呢？简而言之，OAuth
    2 是一个允许不同方以安全和可靠的方式共享信息和资源的协议。
- en: What about OAuth 1.0?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 OAuth 1.0 呢？
- en: Built with the same motivation, OAuth 1.0 was designed and ratified in 2007\.
    However, it was criticized for being overly complex and also had issues with imprecise
    specifications, which led to insecure implementation. All of these issues contributed
    to poor adoption for OAuth 1.0, and eventually led to the design and creation
    of OAuth 2\. OAuth 2 is the successor to OAuth 1.0.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 出于同样的动机，OAuth 1.0 在 2007 年被设计和批准。然而，它因过于复杂而受到批评，并且由于不精确的规范导致实现不安全。所有这些问题都导致了
    OAuth 1.0 采用率低下，最终导致了 OAuth 2 的设计和创建。OAuth 2 是 OAuth 1.0 的继承者。
- en: It is also important to note that OAuth 2 is not backward compatible with OAuth
    1.0, and so OAuth 2 applications cannot integrate with OAuth 1.0 service providers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，OAuth 2 与 OAuth 1.0 不兼容，因此 OAuth 2 应用程序无法与 OAuth 1.0 服务提供商集成。
- en: This type of login-through a trusted third-party-has been in existence for a
    long time, in many different forms (for example, **Microsoft Passport** became
    one of the more notable central login services on the web for some time). The
    distinct advantage of OAuth 2 is that the OAuth 2 provider needs to implement
    only the public OAuth 2 protocol to be compatible with any site seeking to integrate
    login with OAuth 2.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种通过可信第三方登录的方式已经存在很长时间了，以许多不同的形式存在（例如，**Microsoft Passport** 在网上成为一段时间内较为知名的集中登录服务）。OAuth
    2 的显著优势在于，OAuth 2 提供商只需实现公开的 OAuth 2 协议，即可与任何寻求与 OAuth 2 集成登录的网站兼容。
- en: You can refer to the OAuth 2.0 specification at [https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考 OAuth 2.0 规范：[https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749)。
- en: 'The following diagram illustrates the high-level relationship between a site
    integrating OAuth 2 during the login process and the Facebook OAuth 2 provider,
    for example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了网站在登录过程中集成 OAuth 2 与例如 Facebook OAuth 2 提供商之间的高级关系：
- en: '![](img/9724fa6b-4a4a-48bd-81f4-2e23851bb241.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9724fa6b-4a4a-48bd-81f4-2e23851bb241.png)'
- en: We can see that submitting a form post will initiate a request to the OAuth
    provider, resulting in the provider displaying an authorization dialog asking
    the user to allow `jbcpcalendar` to gain permission to specific information from
    your OAuth provider account. This request contains a `uri` parameter called `code`.
    Once granted, the user is redirected back to `jbcpcalendar`, and the `code` parameter
    is included in the `uri` parameter. Then, the request is redirected to the OAuth
    provider again, to authorize `jbcpcalendar`. The OAuth provider then responds
    with an `access_token` that can be used to access the user's OAuth information
    that `jbcpcalendar` was granted access to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，提交表单 POST 将启动对OAuth提供者的请求，导致提供者显示一个授权对话框，询问用户是否允许`jbcpcalendar`从您的OAuth提供者账户中获取特定信息的权限。这个请求包含一个名为`code`的`uri`参数。一旦授权，用户将被重定向回`jbcpcalendar`，`code`参数将包含在`uri`参数中。然后，请求再次重定向到OAuth提供者，以授权`jbcpcalendar`。OAuth提供者随后响应一个`access_token`，该`access_token`可用于访问`jbcpcalendar`被授予访问权的用户OAuth信息。
- en: Don't trust OAuth 2 unequivocally!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不要盲目信任OAuth 2 ！
- en: Here, you can see a fundamental assumption that can fool users of the system.
    It is possible for us to sign up for an OAuth 2 provider account, which would
    make it appear as though we were James Gosling, even though we obviously are not.
    Do not make the false assumption that just because a user has a convincing-sounding
    OAuth 2 (or OAuth 2 delegate provider), that he/she is the authentic person without
    requiring additional forms of identification. Thinking about it another way, if
    someone came to your door just claiming he was James Gosling, would you let him
    in without verifying his ID?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到一个可能会误导系统用户的根本假设。我们可以注册一个OAuth 2提供者的账户，这样我们就可以假装是James Gosling，尽管显然我们不是。不要错误地假设，仅仅因为一个用户有一个听起来令人信服的OAuth
    2（或OAuth 2代理提供者），就不需要额外的身份验证方式，认为他就是那个真实的人。换一种方式考虑，如果有人来到你的门前，只是声称他是James Gosling，你会不会在核实他的身份证之前就让他进来？
- en: The OAuth 2-enabled application then redirects the user to the OAuth 2 provider,
    and the user presents his credentials to the provider, which is then responsible
    for making an access decision. Once the access decision has been made by the provider,
    the provider redirects the user to the originating site, which is now assured
    of the user's authenticity. OAuth 2 is much easier to understand once you have
    tried it. Let's add OAuth 2 to the JBCP calendar login screen now!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 启用了OAuth 2的应用程序然后将用户重定向到OAuth 2提供者，用户向提供者展示他的凭据，提供者负责做出访问决定。一旦提供者做出了访问决定，提供者将用户重定向到原始网站，现在可以确信用户的真实性。一旦尝试过，OAuth
    2就很容易理解了。现在让我们把OAuth 2添加到JBCP日历登录屏幕上！
- en: Signing up for an OAuth 2 application
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册OAuth 2 应用程序
- en: In order to get the full value out of the exercise in this section (and be able
    to test login), you will need to create an application with a service provider.
    Currently, Spring Social supports Twitter, Facebook, Google, LinkedIn, and GitHub,
    and the list is growing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本节中的练习（并能够测试登录），您需要创建一个具有服务提供者的应用程序。目前，Spring Social支持Twitter、Facebook、Google、LinkedIn和GitHub，而且支持列表还在增加。
- en: To get the full value out of the exercises in this chapter, we recommend you
    have accounts with at least Twitter and GitHub. We have set up accounts for the
    `jbcpcalendar` application, which we will be using for the remainder of this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本章中的练习，我们建议您至少拥有Twitter和GitHub的账户。我们已经为`jbcpcalendar`应用设置了账户，我们将在本章剩余时间里使用它。
- en: Enabling OAuth authentication with Spring Security
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Security启用OAuth认证
- en: We can see a common theme among the external authentication providers examined
    over the next several chapters. Spring Security provides convenient wrappers around
    the provider integrations that are actually developed outside the Spring ecosystem.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在接下来的几章中，外部认证提供者之间有一个共同的主题。Spring Security为实际开发在Spring生态系统之外的提供者集成提供了方便的包装器。
- en: In this vein, the Spring Social project ([http://projects.spring.io/spring-social/](http://projects.spring.io/spring-social/))
    provides the underlying OAuth 2 provider discovery and request/response negotiation
    for the Spring Security OAuth 2 functionality.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Spring Social项目（[http://projects.spring.io/spring-social/](http://projects.spring.io/spring-social/)）为Spring
    Security OAuth 2功能提供了基础的OAuth 2提供者发现和请求/响应协商。
- en: Additional required dependencies
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的必需依赖
- en: 'Let''s take a look at the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看以下步骤：
- en: 'In order to utilize OAuth, we will need to include provider-specific dependencies
    and their transitive dependencies. This can be done in Gradle by updating the
    `build.gradle` file, as shown in the following code snippet:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用OAuth，我们需要包含特定提供者的依赖及其传递依赖。这可以通过更新`build.gradle`文件在Gradle中完成，如下代码片段所示：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using Spring Boot includes references to Facebook, Twitter, and LinkedIn starter
    dependencies, as shown in the preceding code snippet. To add other providers,
    we must include the provider dependency and include the version. This can be done
    in Gradle by updating the `build.gradle` file, as shown in the following code
    snippet:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring Boot包括了对Facebook、Twitter和LinkedIn启动依赖的引用，如前文代码片段所示。要添加其他提供者，我们必须包含提供者的依赖并指定版本。这可以通过更新`build.gradle`文件在Gradle中完成，如下代码片段所示：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should start with the source in `chapter09.00-calendar`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从`chapter09.00-calendar`的源代码开始。
- en: 'When writing the OAuth login form, we will need to replace the `username` and
    `password` fields with OAuth fields. Go ahead and make the following updates to
    your `login.html` file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当编写OAuth登录表单时，我们需要将`username`和`password`字段替换为OAuth字段。现在请对您的`login.html`文件进行以下更新：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can make similar edits to the signup form, as shown in the following code
    snippet:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以对注册表单进行类似的编辑，如下代码片段所示：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will notice that we have added a scope field to define the OAuth 2 details
    we are interested in retrieving during authentication.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们已经添加了一个范围字段来定义我们在认证过程中感兴趣的OAuth 2详细信息。
- en: '**OAuth 2.0 API Scopes:** Scopes allow a provider to define the API data accessible
    to client applications. When an API is created by a provider, they define one
    scope for each API represented and action. Once an API is created and define the
    scopes, the client applications can request these defined permissions when they
    initiate an authorization flow and include them in the access token as part of
    the scope request parameter.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth 2.0 API范围：**范围允许提供商定义客户端应用程序可访问的API数据。当提供商创建一个API时，他们会为每个表示的API定义一个范围和动作。一旦创建了API并定义了范围，客户端应用程序在启动授权流程时可以请求这些定义的权限，并将它们作为范围请求参数的一部分包含在访问令牌中。'
- en: Each provider might have slightly different API scopes, such as `r_basicprofile`
    and `r_emailaddress`, but the API scope is also limited to the application configuration.
    As such, an application might only request access to email or contacts, not the
    entire user profile or provider actions such as posting to a user's wall.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个提供商可能有略有不同的API范围，例如`r_basicprofile`和`r_emailaddress`，但API范围也限于应用程序配置。因此，一个应用程序可能只请求访问电子邮件或联系人，而不是整个用户资料或如发帖到用户墙等提供商动作。
- en: You'll notice that we don't offer the **remember me** option with OAuth 2 login.
    This is due to the fact that the redirection to and from the vendor causes the
    **remember me** checkbox value to be lost so that when the user is successfully
    authenticated, they no longer have the **remember me** option indicated. This
    is unfortunate, but ultimately increases the security of OAuth 2 as a login mechanism
    for our site, as OAuth 2 forces the user to establish a trusted relationship with
    the provider with each and every login.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们没有为OAuth 2登录提供**记住我**选项。这是由于事实，从提供商到网站以及返回的重定向会导致**记住我**复选框值丢失，因此当用户成功认证后，他们不再有**记住我**选项被标记。这虽然不幸，但最终增加了OAuth
    2作为我们网站登录机制的安全性，因为OAuth 2强制用户在每次登录时与提供商建立一个可信关系。
- en: Configuring OAuth 2 support in Spring Security
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring Security中配置OAuth 2支持
- en: Using **Spring Social**, we can enable OAuth 2-specific provider endpoints for
    intercepting provider form submissions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Spring Social**，我们可以为拦截提供商表单提交启用OAuth 2特定的提供商端点。
- en: Local UserConnectionRepository
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地用户连接存储库（UserConnectionRepository）
- en: 'The `UsersConnectionRepository` interface is a data access interface for managing
    a global store of users'' connections to service providers. It provides data access
    operations that apply to multiple user records, as shown in the following code
    snippet:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`UsersConnectionRepository`接口是用于管理用户与服务提供商连接的全球存储的数据访问接口。它提供了适用于多个用户记录的数据访问操作，如下代码片段所示：'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating local database entries for provider details
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为提供商详情创建本地数据库条目
- en: 'Spring Security provides support to save provider details in a separate set
    of database tables, in case we want to save the user in a local data store, but
    don''t want to include that data in an existing `User` table:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了支持，将提供者详情保存到一组单独的数据库表中，以防我们想在本地数据存储中保存用户，但不想将那些数据包含在现有的`User`表中：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This `InitializingBean` interface is executed at load time and will execute
    `JdbcUsersConnectionRepository.sql` which is located in the `spring-social-core-[VERSION].jar`
    file on the classpath, seeding the following schema into our local database:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`InitializingBean`接口在加载时执行，并将执行位于类路径中的`spring-social-core-[VERSION].jar`文件内的`JdbcUsersConnectionRepository.sql`，将以下模式种子到我们的本地数据库中：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we have a table to store provider details, we can configure `ConnectionRepository`
    to save provider details at runtime.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个表来存储提供者详情，我们可以配置`ConnectionRepository`在运行时保存提供者详情。
- en: The custom UserConnectionRepository interface
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义UserConnectionRepository接口
- en: 'We need to create a `UserConnectionRepository` interface, and we can leverage
    `JdbcUsersConnectionRepository` as the implementation, which is based on the `JdbcUsersConnectionRepository.sql`
    schema we generated at load time, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个`UserConnectionRepository`接口，我们可以利用`JdbcUsersConnectionRepository`作为实现，它是基于我们加载时生成的`JdbcUsersConnectionRepository.sql`模式：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, every time a user connects to a registered provider, the connection details
    will be saved into our local database.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次用户连接到注册的提供者时，连接详情将被保存到我们的本地数据库中。
- en: The ConnectionSignup flow
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接注册流程
- en: 'In order to save the provider details into a local repository, we have created
    a `ConnectionSignup` object, which is a command that signs up a new user in the
    event that no `userid` can be mapped from `Connection` which allows for implicitly
    creating a local user profile from connection data during a provider sign-in attempt:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将提供者详情保存到本地存储库，我们创建了一个`ConnectionSignup`对象，这是一个命令，在无法从`Connection`映射出`userid`的情况下注册新用户，允许在提供者登录尝试期间从连接数据隐式创建本地用户配置文件：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Executing the OAuth 2 provider connection workflow
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行OAuth 2提供商连接工作流
- en: 'In order to save the provider details, we need to fetch the available details
    from the provider, available via the OAuth 2 connection. Next, we create a `CalendarUser`
    table from the available details. Note that we need to create at least one `GrantedAuthority`
    role. Here, we have used `CalendarUserAuthorityUtils#createAuthorities` to create
    `ROLE_USER` `GrantedAuthority`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存提供者详情，我们需要从提供者获取可用细节，这些细节通过OAuth 2连接可用。接下来，我们从可用细节创建一个`CalendarUser`表。注意我们需要至少创建一个`GrantedAuthority`角色。在这里，我们使用了`CalendarUserAuthorityUtils#createAuthorities`来创建`ROLE_USER`
    `GrantedAuthority`：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding OAuth 2 users
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加OAuth 2用户
- en: 'Now that we have created `CalendarUser` from our provider details, we need
    to save that `User` account into our database using `CalendarUserDao`. We then
    return the `CalendarUser` email, as that is what we have been using in the JBCP
    calendar for the username, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经从我们的提供者详情中创建了`CalendarUser`，我们需要使用`CalendarUserDao`将那个`User`账户保存到我们的数据库中。然后我们返回`CalendarUser`的电子邮件，因为这是我们一直在JBCP日历中使用的用户名：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, we have a local `User` account in our database based on the provider details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经根据提供者详情在数据库中创建了一个本地`User`账户。
- en: This is an additional database entry, as we have already saved the provider
    details into the `UserConnection` table earlier.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个额外的数据库条目，因为我们已经在之前的`UserConnection`表中保存了提供者详情。
- en: OAuth 2 controller sign-in flow
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth 2控制器登录流程
- en: Now, to complete the `SocialConfig.java` configuration, we need to construct
    `ProviderSignInController`, which is initialized with `ConnectionFactoryLocator`,
    `usersConnectionRepository`, and `SignInAdapter`. The `ProviderSignInController`
    interface is a Spring MVC controller for handling the provider user sign-in flow.
    An HTTP `POST` request to `/signin/{providerId}` initiates a user sign-in with
    `{providerId}`. Submitting an HTTP `GET` request to `/signin/{providerId}?oauth_token&amp;oauth_verifier||code`
    will receive the `{providerId}` authentication callback and establish the connection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了完成`SocialConfig.java`配置，我们需要构建`ProviderSignInController`，它使用`ConnectionFactoryLocator`、`usersConnectionRepository`和`SignInAdapter`进行初始化。`ProviderSignInController`接口是一个用于处理提供者用户登录流程的Spring
    MVC控制器。对`/signin/{providerId}`的HTTP `POST`请求会使用`{providerId}`启动用户登录。提交对`/signin/{providerId}?oauth_token&oauth_verifier||code`的HTTP
    `GET`请求将接收`{providerId}`身份验证回调并建立连接。
- en: 'A `ServiceLocator` interface is used for creating the `ConnectionFactory` instances.
    This factory supports lookup by `providerId` and by `apiType`, based on the included
    service providers found within Spring Boot''s `AutoConfiguration`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`ServiceLocator`接口用于创建`ConnectionFactory`实例。此工厂支持通过`providerId`和`apiType`查找，基于Spring
    Boot的`AutoConfiguration`中包含的服务提供商：'
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will allow submissions to a specific provider `uri` to be intercepted,
    and will begin the OAuth 2 connection flow.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许拦截特定提供商`uri`的提交，并开始OAuth 2连接流程。
- en: Automatic user authentication
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动用户认证
- en: 'Let''s take a look at the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看以下步骤：
- en: 'The `ProviderSignInController` controller is initialized with an authentication
    `SignInAdapter`, which is used to complete a provider sign-in attempt by signing
    in the local user account with the specified ID:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ProviderSignInController`控制器使用一个认证`SignInAdapter`进行初始化，该适配器用于通过使用指定ID登录本地用户账户来完成提供商登录尝试：'
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `SingInAdapter` bean, from the preceding code snippet, we used a custom
    authentication utility method to create an `Authentication` object in the form
    of `UsernamePasswordAuthenticationToken`, and added it to `SecurityContext` based
    on the details returned from the OAuth 2 provider:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，在`SingInAdapter`bean中，我们使用了一个自定义认证工具方法，以`UsernamePasswordAuthenticationToken`的形式创建了一个`Authentication`对象，并基于OAuth
    2提供商返回的详情将其添加到`SecurityContext`中：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The final details required to connect to a provider is the application ID and
    secret key obtained when creating the provider application are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到提供商所需的最详细信息是创建提供商应用时获得的应用程序ID和密钥：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we have the required details to connect to the Twitter JBCP calendar, and
    we can start the JBCP calendar and log in with a Twitter provider.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了连接到Twitter JBCP日历所需的所有详细信息，我们可以启动JBCP日历并使用Twitter提供商登录。
- en: Your code should now look like `chapter09.01-calendar`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter09.01-calendar`。
- en: 'At this point, you should be able to complete a full login using Twitter''s
    OAuth 2 provider. The redirects that occur are as follows, first, we initiate
    the OAuth 2 provider login as shown in the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，您应该能够使用Twitter的OAuth 2提供商完成完整的登录。发生的重定向如下，首先，我们启动以下屏幕快照所示的OAuth 2提供商登录：
- en: '![](img/0187934f-9625-4fe9-a1c3-e5ff87e30f25.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0187934f-9625-4fe9-a1c3-e5ff87e30f25.png)'
- en: 'We are then redirected to the provider authorization page, requesting the user
    to grant permission to the `jbcpcalendar` application as shown in the following
    screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后被重定向到服务提供商授权页面，请求用户授予`jbcpcalendar`应用以下屏幕快照所示的权限：
- en: '![](img/c837c1db-7c10-4400-9560-63441a2d743a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c837c1db-7c10-4400-9560-63441a2d743a.png)'
- en: 'After authorizing the `jbcpcalendar` application, the user is redirected to
    the `jbcpcalendar` application and automatically logged in using the provider
    display name:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权`jbcpcalendar`应用后，用户被重定向到`jbcpcalendar`应用，并使用提供商显示名称自动登录：
- en: '![](img/f04b6a3f-70e6-4239-8e71-beecfd6af9de.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f04b6a3f-70e6-4239-8e71-beecfd6af9de.png)'
- en: 'At this point, the user exists in the application and is authenticated and
    authorized with a single `GrantedAuthority` of `ROLE_USER`, but if we navigate
    to My Events, the user will be allowed to view this page. However, no events exist
    for `CalendarUser`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，用户存在于应用程序中，并且具有单个`GrantedAuthority`的`ROLE_USER`认证和授权，但如果导航到我的事件，用户将被允许查看此页面。然而，`CalendarUser`中不存在任何事件：
- en: '![](img/5aaa1cee-f870-4307-bdb5-a707d9a4475e.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aaa1cee-f870-4307-bdb5-a707d9a4475e.png)'
- en: Try to create an event for this user to verify that the user credentials that
    were created correctly in the `CalendarUser` table.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试为该用户创建事件，以验证用户凭据是否正确创建在`CalendarUser`表中。
- en: 'To verify that the provider details were created correctly, we can open the
    H2 admin console and query the `USERCONNECTION` table to verify that standard
    connection details were saved, as shown in the following screenshot:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证提供商详情是否正确创建，我们可以打开H2管理控制台并查询`USERCONNECTION`表，以确认已保存以下屏幕快照所示的标准连接详情：
- en: '![](img/088cc488-6004-466e-9862-4412e0a538aa.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/088cc488-6004-466e-9862-4412e0a538aa.png)'
- en: 'Additionally, we can verify the `CALENDAR_USERS` table, which has also been
    populated with the provider details:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们还可以验证已填充了服务提供商详情的`CALENDAR_USERS`表：
- en: '![](img/7442542f-e849-49b4-b10d-7985c7428b7d.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7442542f-e849-49b4-b10d-7985c7428b7d.png)'
- en: Now we have the user registered in our local database, and we also have the
    ability to interact with the registered provider based on authorized access to
    specific provider details.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地数据库中注册了用户，并且我们还可以根据对特定提供者详细信息的授权访问与注册提供者进行交互。
- en: Additional OAuth 2 providers
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的OAuth 2提供者
- en: We have successfully integrated a single OAuth 2 provider using one of the three
    current support providers for Spring Social. There are several other providers
    available; we are going to add a few more providers so our users have more than
    one option. Spring Social currently supports Twitter, Facebook, and LinkedIn providers
    natively. Including additional providers will require additional libraries to
    gain this support, which will be covered later in this chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功集成了一个OAuth 2提供者，使用Spring Social当前支持的三个当前提供者之一。还有几个其他提供者可用；我们将添加更多提供者，以便用户有多一个选择。Spring
    Social目前原生支持Twitter，Facebook和LinkedIn提供者。包括其他提供者将需要额外的库来实现此支持，这将在本章后面部分介绍。
- en: 'Let''s take a look at the following steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤：
- en: In order to add Facebook or LinkedIn providers into the JBCP calendar application,
    additional application properties need to be set, and each configured provider
    will automatically be registered with the
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将Facebook或LinkedIn提供者添加到JBCP日历应用程序中，需要设置其他应用程序属性，并且每个配置的提供者将自动注册：
- en: The OAuth 2 user registration problem
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth 2用户注册问题
- en: One issue that would need to be resolved if supporting multiple providers is
    username conflicts between the various provider details returned.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在支持多个提供者的情况下，需要解决的一个问题是在各个提供者返回的详细信息之间的用户名冲突。
- en: If you log in to the JBCP calendar application with each of the listed providers-which
    then query the data that was stored in H2-you will find the data could be similar,
    if not exactly the same, based on the user's account details.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用列表中的每个提供者登录到JBCP日历应用程序，然后查询存储在H2中的数据，您会发现基于用户账户详细信息，数据可能相似，如果不是完全相同。
- en: 'In the following `USERCONNECTION` table, we can see that the `USERID` column
    data from each provider, is similar:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的`USERCONNECTION`表中，我们可以看到来自每个提供者的`USERID`列数据是相似的：
- en: '![](img/7f7a6efe-34ba-48c1-b81c-33d59e7eddb7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f7a6efe-34ba-48c1-b81c-33d59e7eddb7.png)'
- en: 'In the `CALENDARUSER` table, we have two possible issues. First, the user details
    used for `EMAIL`, which is the JBCP calendar user `ID` , is not an email for some
    of the providers. Second, it is still possible that the user identifier for two
    different providers will be the same:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CALENDARUSER`表中，我们有两个可能的问题。首先，用于`EMAIL`的用户详细信息对于某些提供者来说并不是电子邮件。其次，两个不同提供者的用户标识符仍然可能相同：
- en: '![](img/b72f5a6e-04aa-4585-977b-d8cda1c13d17.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b72f5a6e-04aa-4585-977b-d8cda1c13d17.png)'
- en: We are not going to dive into the various ways to detect and correct this possible
    issue, but it is worth noting for future reference.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨检测和解决这个可能问题的各种方法，但值得在未来参考中注意。
- en: Registering non-standard OAuth 2 providers
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册非标准OAuth 2提供者
- en: 'In order to include additional providers, we need to perform a few extra steps
    to include custom providers into the login flow, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了包括其他提供者，我们需要执行一些额外的步骤来将自定义提供者包括到登录流程中，如下所示：
- en: 'For each provider, we need to include the provider dependencies in our `build.gradle`
    file, as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个提供者，我们需要在我们的`build.gradle`文件中包括提供者依赖项，如下所示：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will register the providers into the JBCP calendar application with
    the following additional application properties for the `appId` and `appSecret`
    key for each provider:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下为每个提供者的`appId`和`appSecret`键将提供者注册到JBCP日历应用程序：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Each new provider must be registered by adding the respective `ConnectionFactory`
    interface. We can add a new `ConnectionFactory` entry for each new Provider we
    intend to support, to the custom `DatabaseSocialConfigurer.java` file as seen
    in the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个新提供者必须通过添加相应的`ConnectionFactory`接口进行注册。我们可以为每个新提供者添加一个新的`ConnectionFactory`条目到自定义的`DatabaseSocialConfigurer.java`文件中，如下所示：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now add the new login options to our `login.html` file and `form.html`
    sign up page to include one new `<form>` tag for each new provider:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以将新的登录选项添加到我们的`login.html`文件和`form.html`注册页面，为每个新提供者包括一个新的`<form>`标签：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we have the required details to connect to the additional providers for
    the JBCP calendar. We can restart the JBCP calendar application and test logging
    in with the additional OAuth 2 providers. When logging in now, we should be presented
    with additional provider options, as shown in the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有了连接到JBCP日历额外提供者的所需详细信息。我们可以重新启动JBCP日历应用程序，并尝试使用额外的OAuth 2.0提供商登录。现在登录时，我们应该会看到额外的提供商选项，如下面的屏幕截图所示：
- en: '![](img/8c68d305-cdd4-4a20-9c1e-bfde59e40702.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c68d305-cdd4-4a20-9c1e-bfde59e40702.png)'
- en: Is OAuth 2 secure?
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth 2.0安全吗？
- en: As support for OAuth 2 relies on the trustworthiness of the OAuth 2 provider
    and the verifiability of the provider's response, security and authenticity are
    critical in order for the application to have confidence in the user's OAuth 2-based
    login.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OAuth 2.0支持依赖于OAuth 2.0提供者的可信度以及提供者响应的可验证性，因此安全性是至关重要的，以便应用程序对用户的OAuth 2.0登录有信心。
- en: 'Fortunately, the designers of the OAuth 2 specification were very aware of
    this concern, and implemented a series of verification steps to prevent response
    forgery, replay attacks, and other types of tampering, which are explained as
    follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，OAuth 2.0规范的设计者非常清楚这个担忧，并实施了一系列验证步骤，以防止响应伪造、重放攻击和其他类型的篡改，如下所述：
- en: '**Response forgery** is prevented due to a combination of a shared secret key
    (created by the OAuth 2-enabled site prior to the initial request), and a one-way
    hashed message signature on the response itself. A malicious user tampering with
    the data in any of the response fields without having access to the shared secret
    key-and signature algorithm-would generate an invalid response.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应伪造**由于结合了由OAuth 2.0启用的网站在初始请求之前创建的共享密钥，以及响应本身的一路哈希消息签名而得以防止。没有访问共享密钥-和签名算法的恶意用户-篡改任何响应字段中的数据将生成无效的响应。'
- en: '**Replay attacks** are prevented due to the inclusion of a nonce, or a one-time
    use, random key, which should be recorded by the OAuth 2-enabled site so that
    it cannot ever be reused. In this way, even a user attempting to reissue the response
    URL would be foiled because the receiving site would determine that the nonce
    had been previously used, and would invalidate the request.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重放攻击**由于包括了nonce（一次性使用的随机密钥）而得以防止，该密钥应该被OAuth 2.0启用的网站记录，因此它永远不能被重新使用。这样，即使用户试图重新发行响应URL，也会失败，因为接收网站会确定nonce已经被先前使用，并将请求无效。'
- en: The most likely form of attack that could result in a compromised user interaction
    would be a man-in-the-middle attack, where a malicious user could intercept the
    user's interaction between their computer and the OAuth 2 provider. A hypothetical
    attacker in this situation could be in a position to record the conversation between
    the user's browser and the OAuth 2 provider, and record the secret key used when
    the request was initiated. The attacker, in this case, would need a very high
    level of sophistication and reasonably a complete implementation of the OAuth
    2 signature specification-in short, this is not likely to occur with any regularity.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能导致用户交互被破坏的最有可能的攻击形式是一个中间人攻击，在这种攻击中，恶意用户可以拦截用户与他们计算机和OAuth 2.0提供商之间的交互。在这种情况下的假设攻击者可能处于记录用户浏览器与OAuth
    2.0提供商之间的对话，以及当请求发起时记录密钥的立场。在这种情况下，攻击者需要非常高的复杂性水平，以及OAuth 2.0签名规范的相对完整的实现-简而言之，这不太可能以任何常规性发生。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed OAuth 2, a relatively recent technology for user
    authentication and credentials management. OAuth 2 has a very wide reach on the
    web and has made great strides in usability and acceptance within the past year
    or two. Most public-facing sites on the modern web should plan on having some
    form of OAuth 2 support, and the JBCP calendar application is no exception!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了OAuth 2.0，这是一种相对较新的用户认证和凭据管理技术。OAuth 2.0在网络上有非常广泛的应用，并且在过去的两年内在可用性和接受度上取得了很大的进步。大多数现代网络上的面向公众的网站都应该计划支持某种形式的OAuth
    2.0，JBCP日历应用程序也不例外！
- en: In this chapter, we learned about the following topics the OAuth 2 authentication
    mechanism and its high-level architecture and key terminology. We also learned
    about the OAuth 2 login and automatic user registration with the JBCP calendar
    application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们学习了OAuth 2.0认证机制及其高级架构和关键术语。我们还了解了JBCP日历应用程序中的OAuth 2.0登录和自动用户注册。
- en: We also covered automatic login with OAuth 2 and the security of OAuth 2's login
    responses.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了使用OAuth 2.0的自动登录以及OAuth 2.0登录响应的安全性。
- en: We covered one of the simplest single sign-on mechanisms to implement with Spring
    Security. One of the downsides is that it does not support a standard mechanism
    for a single logout. In the next chapter, we will explore CAS, another standard,
    single sign-on protocol that also supports single logout.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了使用Spring Security实现的最简单的单点登录机制之一。其中一个缺点是它不支持单点登出标准的机制。在下一章中，我们将探讨CAS，另一种支持单点登出的标准单点登录协议。
