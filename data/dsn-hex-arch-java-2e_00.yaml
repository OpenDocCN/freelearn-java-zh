- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Sometimes, solving problems and expressing our ideas through code is challenging.
    What looks like an obvious solution in our minds may look unnecessarily complex
    in the minds of others. But that’s alright if we are open to new ideas and perspectives
    because we set our minds to learning unexpected things when we have a persistent
    attitude and a willingness to embrace everything that comes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，通过代码解决问题和表达我们的想法是具有挑战性的。在我们心中看似明显的解决方案，在别人看来可能显得过于复杂。但如果我们愿意接受新想法和观点，那就没问题，因为当我们持有坚持不懈的态度，愿意接受一切时，我们就把心思放在学习意料之外的事物上了。
- en: I was not expecting it when I was first introduced to hexagonal architecture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初接触到六边形架构时，并没有预料到。
- en: I remember working in a company where most of the software was developed by
    consultants. Those folks would come, deliver their code, and leave. Although my
    team and I tried to establish specific standards to ensure consistency in the
    applications we were responsible for, the harsh reality was that we needed more
    knowledge to maintain our applications properly. Given the number of systems and
    the different approaches and architectures employed to build them, it took a lot
    of work to maintain and add new features to such systems. That’s when a teammate
    told me about the hexagonal architecture and how it could help us tackle hard-to-maintain
    software problems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得在一个公司工作，那里的大部分软件都是由顾问开发的。这些人来了，交付了他们的代码，然后离开了。尽管我和我的团队试图建立特定的标准来确保我们负责的应用程序的一致性，但残酷的现实是我们需要更多的知识来正确维护我们的应用程序。鉴于系统的数量以及构建它们所采用的不同方法和架构，维护和添加新功能需要大量的工作。就在那时，一个队友告诉我关于六边形架构以及它如何帮助我们解决难以维护的软件问题。
- en: At that time, there weren’t many books covering the hexagonal architecture.
    Most of the resources were scattered on the internet through video courses and
    articles explaining how someone implemented hexagonal architecture. The lack of
    resources was a considerable obstacle, but using an architecture that could improve
    software maintainability was very attractive to me. So, I kept researching and
    experimenting in my own job with the ideas, which would ultimately lead to me
    writing the first edition of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那时候，关于六边形架构的书籍并不多。大部分资源都散布在互联网上，通过视频课程和文章解释了某人如何实现六边形架构。资源的缺乏是一个相当大的障碍，但使用能够提高软件可维护性的架构对我来说非常吸引人。因此，我继续在自己的工作中研究和实验这些想法，这最终导致我撰写了这本书的第一版。
- en: I am fortunate to have had the opportunity to write the first, and now the second,
    edition of a book dealing with such a fascinating topic as hexagonal architecture.
    The second edition has allowed me to employ hexagonal architecture ideas with
    more recent versions of Java and Quarkus. This edition preserves the fundamentals
    from the previous one while exploring modern Java’s new and cool features. Also,
    this edition explores how hexagonal architecture can be used with the acclaimed
    SOLID principles and how it relates to the widely used layered architecture.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我很幸运有机会撰写关于六边形架构这样迷人主题的第一版，现在已经是第二版了。第二版让我能够使用更近期的Java和Quarkus版本来应用六边形架构的思想。这一版保留了前一版的基本内容，同时探索了现代Java的新酷特性。此外，这一版还探讨了如何将六边形架构与广受赞誉的SOLID原则相结合，以及它与广泛使用的分层架构的关系。
- en: Concepts such as ports, adapters, and use cases are combined with **Domain-Driven
    Design** (**DDD**) elements such as entities and value objects to provide an in-depth
    guide explaining how to assemble those concepts to untangle the exciting puzzle
    of designing highly change-tolerable applications with hexagonal architecture.
    Considering the contemporary cloud-native practices that dictate most enterprise
    development today, we deep dive into Quarkus to learn how to blend hexagonal architecture
    ideas with cloud-native development, which enables us to create enterprise-grade
    hexagonal applications ready to be deployed in any major cloud provider.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将诸如端口、适配器和用例等概念与**领域驱动设计**（**DDD**）元素，如实体和价值对象相结合，提供了一本深入指南，解释了如何将这些概念组装起来，以解开使用六边形架构设计高度可变应用这一激动人心的难题。考虑到当今大多数企业开发所遵循的当代云原生实践，我们深入研究了Quarkus，学习如何将六边形架构的思想与云原生开发相结合，这使我们能够创建适用于任何主要云提供商的企业级六边形应用程序。
- en: So, I encourage you to have a persistent attitude and a willingness to embrace
    everything that comes and embark with me on this fascinating journey to explore
    hexagonal architecture.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我鼓励你们保持持之以恒的态度，并愿意接受一切到来之物，与我一同踏上探索六边形架构这一迷人旅程。
- en: Who this book is for
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书面向的对象
- en: This book is suited for Java architects and Java developers at senior and intermediate
    levels. The reader is expected to have previous knowledge of object-oriented language
    principles and be acquainted with the Java programming language. Previous professional
    Java experience is also recommended, as this book is concerned with problems that
    usually happen in enterprise software development projects using Java.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合Java架构师和高级及中级Java开发者阅读。读者应具备面向对象语言原理的先验知识，并熟悉Java编程语言。此外，建议读者具备一定的Java专业经验，因为本书关注的是在Java企业级软件开发项目中通常会遇到的问题。
- en: What this book covers
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[*Chapter 1*](B19777_01.xhtml#_idTextAnchor014), *Why Hexagonal Architecture?*,
    starts by discussing how software that is not well organized and lacks sound architectural
    principles may work fine but will present a high risk of developing technical
    debt. As new features are added, the software tends to become more complex to
    maintain because there is no common ground to guide the addition or change of
    features. Based on this problem, this chapter explains why hexagonal architecture
    helps tackle technical debt by establishing an approach where business code is
    decoupled from technology code, allowing the former to evolve without dependency
    on the latter.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第一章*](B19777_01.xhtml#_idTextAnchor014)，*为什么选择六边形架构？*，首先讨论了软件如果组织不当且缺乏良好的架构原则，虽然可能运行良好，但会存在很高的技术债务风险。随着新功能的添加，软件往往变得难以维护，因为没有共同的基础来指导功能的添加或更改。基于这个问题，本章解释了为什么六边形架构通过建立一种将业务代码与技术代码解耦的方法来帮助解决技术债务问题，允许前者在没有依赖后者的前提下进行演变。'
- en: '[*Chapter 2*](B19777_02.xhtml#_idTextAnchor038), *Wrapping Business Rules inside
    the Domain Hexagon*, follows a domain-driven approach and describes what domain
    entities are, what role they play within hexagonal architecture, and how they
    wrap business rules and data in simple Java POJOs. It explains why domain entities
    are the most important part of code and why they should not depend on anything
    other than other domain entities. Finally, it explains how business rules inside
    a domain entity can be implemented using the Specification design pattern.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第二章*](B19777_02.xhtml#_idTextAnchor038)，*将业务规则封装在领域六边形内*，遵循领域驱动的方法，描述了领域实体是什么，它们在六边形架构中扮演什么角色，以及它们如何将业务规则和数据封装在简单的Java
    POJO中。它解释了为什么领域实体是代码中最重要的一部分，以及为什么它们不应该依赖于除其他领域实体之外的其他任何事物。最后，它解释了如何在领域实体内部使用规范设计模式实现业务规则。'
- en: '[*Chapter 3*](B19777_03.xhtml#_idTextAnchor066), *Handling Behavior with Ports
    and Uses Cases*, covers what use cases are, explaining that they are used to define
    software intent with interfaces describing things the software can do. Then, it
    explains what input ports are and the classes that implement use case interfaces,
    and specifies in concrete ways how the software intent should be accomplished.
    It talks about output ports and their role in abstractly defining the behavior
    of operations that need to get data from outside the software. Finally, this chapter
    explains how use cases and ports are grouped in what’s called the Application
    hexagon.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第三章*](B19777_03.xhtml#_idTextAnchor066)，*使用端口和用例处理行为*，涵盖了用例是什么，解释说它们用于使用接口定义软件意图，接口描述了软件可以执行的事情。然后，它解释了输入端口是什么以及实现用例接口的类，并具体说明了如何实现软件意图。它讨论了输出端口及其在抽象定义需要从软件外部获取数据的操作行为中的作用。最后，本章解释了用例和端口是如何组合成所谓的应用六边形的。'
- en: '[*Chapter 4*](B19777_04.xhtml#_idTextAnchor083), *Creating Adapters to Interact
    with the Outside World*, shows how adapters allow the software to integrate with
    different technologies. It explains that the same port can have multiple adapters.
    Input adapters, bound to input ports, enable the application to expose its functionalities
    through different communication protocols, such as REST, gRPC, or WebSocket. Output
    adapters, bound to output ports, allow the application to communicate with varying
    data sources, whether it be databases or even message queues or other applications.
    Finally, the chapter shows how all adapters are grouped in the Framework hexagon.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第4章*](B19777_04.xhtml#_idTextAnchor083)，*创建适配器以与外部世界交互*，展示了适配器如何使软件能够与不同的技术集成。它解释说，同一个端口可以有多个适配器。绑定到输入端口的输入适配器，使应用程序能够通过不同的通信协议（如REST、gRPC或WebSocket）暴露其功能。绑定到输出端口的输出适配器，允许应用程序与不同的数据源进行通信，无论是数据库还是消息队列或其他应用程序。最后，本章展示了所有适配器如何被分组在框架六边形中。'
- en: '[*Chapter 5*](B19777_05.xhtml#_idTextAnchor096), *Exploring the Nature of Driving
    and Driven Operations*, explains that driver operations drive the software behavior
    by starting one of its exposed functions. It details the driver operations life
    cycle, showing how a request is captured on the Framework hexagon through an input
    adapter and then handed down to an input port on the Application hexagon until
    it reaches the entities from the Domain hexagon. It shows that a use case starts
    driven operations from the Application hexagon when the software needs to get
    data from outside, going from an output port to an output adapter to fulfill the
    use case needs.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第5章*](B19777_05.xhtml#_idTextAnchor096)，*探索驱动和被驱动操作的本质*，解释了驱动操作通过启动其公开的某个功能来驱动软件行为。它详细说明了驱动操作的生命周期，展示了如何通过输入适配器在框架六边形上捕获请求，然后将其传递到应用程序六边形的输入端口，直到达到领域六边形的实体。它展示了当软件需要从外部获取数据时，用例从应用程序六边形开始驱动操作，从输出端口到输出适配器，以满足用例需求。'
- en: '[*Chapter 6*](B19777_06.xhtml#_idTextAnchor126), *Building the Domain Hexagon*,
    shows how to start developing a telco’s network and topology inventory application
    by first creating the Domain hexagon as a Java module. Then, this chapter shows
    how business rules and data are mapped to domain entities’ classes and methods.
    The business rules are arranged in different algorithms with the aim of the Specification
    design pattern. Finally, it shows how to unit test the Domain hexagon.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第6章*](B19777_06.xhtml#_idTextAnchor126)，*构建领域六边形*，展示了如何通过首先创建领域六边形作为Java模块来开始开发电信网络的拓扑库存应用程序。然后，本章展示了业务规则和数据如何映射到领域实体类和方法。业务规则以不同的算法排列，目的是实现规范设计模式。最后，它展示了如何对领域六边形进行单元测试。'
- en: '[*Chapter 7*](B19777_07.xhtml#_idTextAnchor152), *Building the Application
    Hexagon*, starts by adding the Application hexagon as the second Java module on
    the application. It then explains how to create the use case interface that describes
    the software’s operations to manage the network and topology inventory. It shows
    how to implement the use case with an input port, giving a detailed description
    of how the code should be arranged. It details the creation of an output port
    interface and its role in obtaining data from external sources. Finally, it explains
    how to test the Application hexagon.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第7章*](B19777_07.xhtml#_idTextAnchor152)，*构建应用程序六边形*，首先将应用程序六边形添加为应用程序的第二个Java模块。然后，它解释了如何创建用例接口，该接口描述了软件的操作以管理网络和拓扑库存。它展示了如何通过输入端口实现用例，详细说明了代码应该如何排列。它详细说明了输出端口接口的创建及其在从外部来源获取数据中的作用。最后，它解释了如何测试应用程序六边形。'
- en: '[*Chapter 8*](B19777_08.xhtml#_idTextAnchor174), *Building the Framework Hexagon*,
    starts by adding the Framework hexagon as the third Java module on the application.
    Then, it teaches you how to create an input adapter and how it will carry out
    its operations through an input port. After that, an output adapter is created
    through the implementation of an output port. The output adapter will show how
    data can be fetched from external sources and converted to be dealt with in Domain
    hexagon terms. Finally, the chapter explains how to test the Framework hexagon.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第8章*](B19777_08.xhtml#_idTextAnchor174)，*构建框架六边形*，首先将框架六边形添加为应用程序的第三个Java模块。然后，它教你如何创建输入适配器，以及它将通过输入端口执行其操作。之后，通过实现输出端口创建输出适配器。输出适配器将展示如何从外部来源获取数据，并将其转换为在领域六边形术语中处理的数据。最后，本章解释了如何测试框架六边形。'
- en: '[*Chapter 9*](B19777_09.xhtml#_idTextAnchor192), *Applying Dependency Inversion
    with Java Modules*, talks a little bit about Java modules, explaining why they
    are important to enforce the hexagonal architecture principles related to dependency
    inversion. It explains that Java modules don’t allow cyclic dependencies and because
    of that, there is no way to make two modules depend on each other at the same
    time. You will learn how to configure the module descriptor in the hexagonal application.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第9章*](B19777_09.xhtml#_idTextAnchor192), *使用Java模块应用依赖反转*，简要介绍了Java模块，解释了为什么它们对于强制执行与依赖反转相关的六边形架构原则很重要。它解释说Java模块不允许循环依赖，因此没有方法让两个模块同时依赖于对方。你将学习如何在六边形应用程序中配置模块描述符。'
- en: '[*Chapter 10*](B19777_10.xhtml#_idTextAnchor213), *Adding Quarkus to a Modularized
    Hexagonal Application*, briefly explains the Quarkus framework and its main features.
    Then, it advances to show how to add Quarkus to the hexagonal application that
    was developed in the previous chapters. It introduces the creation of a fourth
    module, called Bootstrap, which serves to get the application started and is used
    to group the Domain, Application, and Framework modules.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第10章*](B19777_10.xhtml#_idTextAnchor213), *将Quarkus添加到模块化的六边形应用程序中*，简要介绍了Quarkus框架及其主要功能。然后，它进一步展示了如何将Quarkus添加到前几章中开发的六边形应用程序中。它介绍了创建一个名为Bootstrap的第四个模块，该模块用于启动应用程序，并用于将领域、应用程序和框架模块分组。'
- en: '[*Chapter 11*](B19777_11.xhtml#_idTextAnchor228), *Leveraging CDI Beans to
    Manage Ports and Use Cases*, explains how to transform the already developed ports
    and use cases into CDI beans, leveraging enterprise Java’s power in the hexagonal
    architecture. It starts by explaining what CDI beans are, then it shows how to
    implement them on input and output ports. Finally, the chapter describes how to
    adjust the application framework tests to use Quarkus CDI bean test features.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第11章*](B19777_11.xhtml#_idTextAnchor228), *利用CDI Bean管理端口和用例*，解释了如何将已开发的端口和用例转换为CDI
    Bean，利用企业Java在六边形架构中的力量。它首先解释了CDI Bean是什么，然后展示了如何在输入和输出端口上实现它们。最后，本章描述了如何调整应用程序框架测试以使用Quarkus
    CDI Bean测试功能。'
- en: '[*Chapter 12*](B19777_12.xhtml#_idTextAnchor244), *Using RESTEasy Reactive
    to Implement Input Adapters*, starts by comparing reactive and imperative approaches
    for REST endpoints, detailing why the reactive approach performs better. It explains
    how to implement input adapters with Quarkus RESTEasy Reactive capabilities by
    explaining how to add the correct annotations and inject the proper dependencies
    to call input ports. In order to expose the hexagonal application APIs, this chapter
    explains how to add OpenAPI and Swagger UI. Finally, it shows how to test the
    reactive input port with Quarkus test tools.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第12章*](B19777_12.xhtml#_idTextAnchor244), *使用RESTEasy Reactive实现输入适配器*，首先比较了用于REST端点的反应式和命令式方法，详细说明了为什么反应式方法表现更好。它解释了如何通过解释如何添加正确的注解和注入适当的依赖项来调用输入端口，使用Quarkus
    RESTEasy Reactive功能实现输入适配器。为了公开六边形应用程序API，本章解释了如何添加OpenAPI和Swagger UI。最后，它展示了如何使用Quarkus测试工具测试反应式输入端口。'
- en: '[*Chapter 13*](B19777_13.xhtml#_idTextAnchor263), *Persisting Data with Output
    Adapters and Hibernate Reactive*, talks about Hibernate Reactive and how it helps
    Quarkus to provide reactive capabilities for data persistence. It explains how
    to create a reactive output adapter to persist data to a MySQL database. Finally,
    it shows how to test the reactive output adapter with Quarkus test tools.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第13章*](B19777_13.xhtml#_idTextAnchor263), *使用输出适配器和Hibernate Reactive持久化数据*，讨论了Hibernate
    Reactive及其如何帮助Quarkus提供数据持久化的反应式能力。它解释了如何创建一个反应式输出适配器以将数据持久化到MySQL数据库。最后，它展示了如何使用Quarkus测试工具测试反应式输出适配器。'
- en: '[*Chapter 14*](B19777_14.xhtml#_idTextAnchor286), *Setting Up Dockerfile and
    Kubernetes Objects for Cloud Deployment*, explains how to create a Dockerfile
    for the hexagonal application based on Quarkus. It explains in detail how to package
    all the modules and dependencies in one single Docker image. It then shows how
    to create Kubernetes objects such as Deployment and Service for the hexagonal
    application and test them in a minikube local Kubernetes cluster.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第14章*](B19777_14.xhtml#_idTextAnchor286), *设置Dockerfile和Kubernetes对象以进行云部署*，解释了如何为基于Quarkus的六边形应用程序创建Dockerfile。它详细解释了如何将所有模块和依赖项打包在一个单独的Docker镜像中。然后，它展示了如何为六边形应用程序创建Kubernetes对象，如Deployment和Service，并在minikube本地Kubernetes集群中测试它们。'
- en: '[*Chapter 15*](B19777_15.xhtml#_idTextAnchor305), *Comparing Hexagonal Architecture
    with Layered Architecture*, describes layered architecture and explores how layers
    handle specific system responsibilities, such as persistence and presentation.
    We then develop an application using layered architecture principles. Finally,
    to highlight the differences between layered and hexagonal architecture, we refactor
    the previously layer-based application into a hexagonal one.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第15章*](B19777_15.xhtml#_idTextAnchor305)，*比较六边形架构与分层架构*，描述了分层架构，并探讨了层如何处理特定的系统责任，如持久性和表示。然后，我们使用分层架构原则开发了一个应用程序。最后，为了突出分层架构和六边形架构之间的差异，我们将之前基于层的应用程序重构为六边形架构。'
- en: '[*Chapter 16*](B19777_16.xhtml#_idTextAnchor324), *Using SOLID Principles with
    Hexagonal Architecture*, starts by reviewing SOLID principles and observing how
    each principle helps to build applications with improved maintainability. Then,
    it explores how SOLID principles can be applied to a system developed with hexagonal
    architecture. Finally, it presents some common design patterns that can be used
    while building a hexagonal system.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第16章*](B19777_16.xhtml#_idTextAnchor324)，*使用六边形架构与 SOLID 原则*，首先回顾 SOLID 原则，并观察每个原则如何帮助构建具有改进可维护性的应用程序。然后，它探讨了
    SOLID 原则如何应用于使用六边形架构开发的系统。最后，它介绍了在构建六边形系统时可以使用的常见设计模式。'
- en: '[*Chapter 17*](B19777_17.xhtml#_idTextAnchor348), *Good Design Practices for
    Your Hexagonal Application*, talks about some good practices you can adopt while
    creating each hexagon for your application. Starting with the Domain hexagon,
    we focus on DDD aspects to clarify the business problems the application is supposed
    to solve. Then, we move on to a discussion about the alternative ways to set up
    use cases and ports in the Application hexagon. Finally, we discuss the consequences
    of having to maintain multiple adapters.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第17章*](B19777_17.xhtml#_idTextAnchor348)，*为您的六边形应用程序制定良好设计实践*，讨论了在创建应用程序的每个六边形时可以采用的一些良好实践。从领域六边形开始，我们关注领域驱动设计（DDD）方面，以明确应用程序应该解决的业务问题。然后，我们继续讨论在应用程序六边形中设置用例和端口的替代方法。最后，我们讨论了维护多个适配器的后果。'
- en: To get the most out of this book
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要充分利用本书
- en: The examples provided are based on Java 17, but you should be able to run them
    with more recent Java versions. Maven 3.8 is required to build the example projects.
    Docker is also needed for the examples of running the application inside a container.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的示例基于 Java 17，但您应该能够使用更近期的 Java 版本运行它们。构建示例项目需要 Maven 3.8。还需要 Docker 来运行在容器内运行应用程序的示例。
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **本书涵盖的软件/硬件** | **操作系统要求** |'
- en: '| Maven 3.8 | Windows, macOS, or Linux |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Maven 3.8 | Windows、macOS 或 Linux |'
- en: '| Java 17 SE Development Kit | Windows, macOS, or Linux |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Java 17 SE 开发工具包 | Windows、macOS 或 Linux |'
- en: '| Docker | Windows, macOS, or Linux |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Docker | Windows、macOS 或 Linux |'
- en: '| Postman | Windows, macOS, or Linux |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Postman | Windows、macOS 或 Linux |'
- en: '| Newman | Windows, macOS, or Linux |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Newman | Windows、macOS 或 Linux |'
- en: '| Kafka | macOS or Linux |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Kafka | macOS 或 Linux |'
- en: You will need Postman, Newman, and Kafka to run the examples in [*Chapter 5*](B19777_05.xhtml#_idTextAnchor096).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要 Postman、Newman 和 Kafka 来运行 [*第5章*](B19777_05.xhtml#_idTextAnchor096) 中的示例。
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您使用的是本书的数字版，我们建议您亲自输入代码或从本书的 GitHub 仓库（下一节中提供链接）获取代码。这样做将帮助您避免与代码复制粘贴相关的任何潜在错误。**'
- en: Download the example code files
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition](https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition).
    If there’s an update to the code, it will be updated in the GitHub repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 GitHub 下载本书的示例代码文件，网址为 [https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition](https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition)。如果代码有更新，它将在
    GitHub 仓库中更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有其他来自我们丰富的书籍和视频目录的代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。查看它们！
- en: Conventions used
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了多种文本约定。
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “Mount the downloaded `WebStorm-10*.dmg` disk image
    file as another disk in your system.”'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`文本中的代码`：表示文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称。以下是一个示例：“将下载的`WebStorm-10*.dmg`磁盘映像文件作为系统中的另一个磁盘挂载。”'
- en: 'A block of code is set as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望您注意代码块中的特定部分时，相关的行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都如下所示：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “Select **System info** from the **Administration** panel.”'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示新术语、重要单词或您在屏幕上看到的单词。例如，菜单或对话框中的单词以**粗体**显示。以下是一个示例：“从**管理**面板中选择**系统信息**。”'
- en: Tips or important notes
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 提示或重要注意事项
- en: Appear like this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来是这样的。
- en: Get in touch
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有疑问，请通过[customercare@packtpub.com](mailto:customercare@packtpub.com)给我们发邮件，并在邮件主题中提及书名。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误表**：尽管我们已经尽最大努力确保内容的准确性，但错误仍然可能发生。如果您在这本书中发现了错误，我们将非常感激您能向我们报告。请访问[www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)并填写表格。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上以任何形式遇到我们作品的非法副本，我们将非常感激您能提供位置地址或网站名称。请通过[copyright@packt.com](mailto:copyright@packt.com)与我们联系，并提供材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果您在某个主题上具有专业知识，并且您有兴趣撰写或为书籍做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com)。'
- en: Share Your Thoughts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享您的想法
- en: Once you’ve read *Designing Hexagonal Architecture with Java, Second Edition*,
    we’d love to hear your thoughts! Please [click here to go straight to the Amazon
    review page](https://packt.link/r/1837635110) for this book and share your feedback.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您阅读了《使用Java设计六边形架构，第二版》，我们非常乐意听到您的想法！请[点击此处直接转到此书的亚马逊评论页面](https://packt.link/r/1837635110)并分享您的反馈。
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您的评论对我们和科技社区非常重要，并将帮助我们确保我们提供高质量的内容。
- en: Download a free PDF copy of this book
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载此书的免费PDF副本
- en: Thanks for purchasing this book!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您购买此书！
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您喜欢在路上阅读，但又无法携带您的印刷书籍到处走吗？
- en: Is your eBook purchase not compatible with the device of your choice?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您购买的电子书是否与您选择的设备不兼容？
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心，现在，每购买一本Packt书籍，您都可以免费获得该书的DRM免费PDF版本。
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何地方、任何设备上阅读。直接从您喜欢的技术书籍中搜索、复制并粘贴代码到您的应用程序中。
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠不仅限于此，您还可以获得独家折扣、时事通讯和丰富的免费内容，每天直接发送到您的邮箱
- en: 'Follow these simple steps to get the benefits:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤获取好处：
- en: Scan the QR code or visit the link below
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描二维码或访问以下链接
- en: '![](img/B19777_QR_Free_PDF.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19777_QR_Free_PDF.jpg)'
- en: '[https://packt.link/free-ebook/9781837635115](https://packt.link/free-ebook/9781837635115)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/free-ebook/9781837635115](https://packt.link/free-ebook/9781837635115)'
- en: Submit your proof of purchase
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交您的购买证明
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！我们将直接将免费PDF和其他好处发送到您的邮箱
- en: 'Part 1: Architecture Fundamentals'
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1部分：架构基础
- en: 'In this part, you will gain a solid understanding of hexagonal architecture
    elements: domain entities, use cases, ports, and adapters. Starting with a discussion
    about why we would apply hexagonal architecture principles to our project, we
    progressively advance our exploration by learning how to organize problem domain
    code with domain-driven design techniques.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，您将深入了解六边形架构元素：领域实体、用例、端口和适配器。从讨论为什么我们会将六边形架构原则应用于我们的项目开始，我们通过学习如何使用领域驱动设计技术组织问题域代码来逐步推进我们的探索。
- en: Then, we examine the important role use cases and ports play in expressing system
    behaviors. Moving ahead, we explore how adapters allow the hexagonal system to
    be compatible with different protocols and technologies. Finally, we close this
    part by discussing how driving and driven operations influence the behaviors of
    a hexagonal system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨用例和端口在表达系统行为中的重要作用。接下来，我们探索适配器如何使六边形系统与不同的协议和技术兼容。最后，我们通过讨论驱动和被驱动操作如何影响六边形系统的行为来结束本部分。
- en: 'This part has the following chapters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 1*](B19777_01.xhtml#_idTextAnchor014), *Why Hexagonal Architecture?*'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第1章*](B19777_01.xhtml#_idTextAnchor014), *为什么选择六边形架构?*'
- en: '[*Chapter 2*](B19777_02.xhtml#_idTextAnchor038), *Wrapping Business Rules inside
    the Domain Hexagon*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第2章*](B19777_02.xhtml#_idTextAnchor038), *将业务规则包裹在领域六边形内*'
- en: '[*Chapter 3*](B19777_03.xhtml#_idTextAnchor066), *Handling Behavior with Ports
    and Use Cases*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B19777_03.xhtml#_idTextAnchor066), *使用端口和用例处理行为*'
- en: '[*Chapter 4*](B19777_04.xhtml#_idTextAnchor083), *Creating Adapters to Interact
    with the Outside World*'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B19777_04.xhtml#_idTextAnchor083), *创建适配器以与外部世界交互*'
- en: '[*Chapter 5*](B19777_05.xhtml#_idTextAnchor096), *Exploring the Nature of Driving
    and Driven Operations*'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19777_05.xhtml#_idTextAnchor096), *探索驱动和被驱动操作的本质*'
