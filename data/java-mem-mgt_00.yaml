- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Understanding how Java memory works can be of great benefit to your Java coding
    and application management. It makes it easier to visualize what is going on with
    object composition and what happens with object allocation and deallocation, combined
    with object composition. As you are probably aware, object composition is where
    objects contain other objects. For example, a `Person` class specifies a property
    of type `Address`, which also happens to be a class. Knowing how this all works
    in memory makes it easier to know what steps to take to get to a certain data
    field.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Java内存的工作原理对你的Java编码和应用管理有很大的好处。它使得可视化对象组合中发生的事情以及对象分配和释放的情况变得更容易，结合对象组合。正如你可能已经知道的，对象组合是对象包含其他对象的地方。例如，`Person`类指定了一个类型为`Address`的属性，而`Address`也是一个类。了解这些在内存中是如何工作的，使得了解如何到达某个特定数据字段所需的步骤变得更容易。
- en: Also, the concept of `static` and accessing the instance using the `this` keyword
    will be so much easier to visualize and understand completely when you understand
    how the memory of Java works. Without understanding how Java memory works, it
    is impossible to truly grasp the concepts of `static` and `this`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你理解Java内存的工作原理时，`static`的概念以及使用`this`关键字访问实例将更容易可视化并完全理解。如果不理解Java内存的工作原理，就无法真正掌握`static`和`this`的概念。
- en: Another advantage of understanding Java memory well is that the difference between
    using a primitive or a class reference as an argument makes a lot more sense all
    of a sudden. This also helps with understanding the immutability and mutability
    of objects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个理解Java内存的好处是，使用原始类型或类引用作为参数之间的区别突然变得更有意义。这也帮助理解对象的不可变性和可变性。
- en: More complex topics will make more sense too, such as **concurrency**, one of
    my personal favorites. This is when multiple things are happening at the same
    time in your application (multithreading). It’s possible that you haven’t worked
    with it yet, but as a Java developer, you’ll have to one day. Understanding Java
    memory makes it easier to understand certain aspects of concurrency, especially
    data access. Another complex topic that will be easier to understand is garbage
    collection. This is of crucial importance for performance since it’s a very expensive
    process, and you want to need it as little as possible and optimize it as much
    as possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的话题也会更容易理解，例如**并发**，这是我个人最喜欢的一个。这是指在你的应用程序中同时发生多件事情（多线程）。你可能还没有与之合作过，但作为一个Java开发者，你总有一天会。理解Java内存使得理解并发的某些方面变得更容易，特别是数据访问。另一个将更容易理解的话题是垃圾回收。这对于性能至关重要，因为它是一个非常昂贵的进程，你希望尽可能少地需要它，并尽可能多地优化它。
- en: Everything that you are probably using on a daily basis already will become
    clearer when you understand better how Java memory works.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你更好地理解Java内存的工作原理时，你每天可能已经在使用的所有东西都会变得更加清晰。
- en: Who this book is for
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书面向的对象
- en: This book is for all sorts of Java professionals. It doesn’t really matter whether
    you’re a junior or senior developer, a DevOps engineer, a tester, or the system
    admin of a Java application. If you currently do not have an in-depth knowledge
    of Java memory, garbage collection, and/or JVM tuning, this book will help you
    to take your Java skills to the next level.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书面向所有类型的Java专业人士。无论是初级还是高级开发者，DevOps工程师，测试人员，还是Java应用程序的系统管理员，这都不重要。如果你目前对Java内存、垃圾回收和/或JVM调优没有深入的了解，这本书将帮助你将Java技能提升到新的水平。
- en: What this book covers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[*Chapter 1*](B18762_01.xhtml#_idTextAnchor014), *Different Parts of Java Memory*,
    covers the different parts of Java memory: the stack, the heap, and the Metaspace.
    We’ll start with the stack memory and how variables are stored on the stack. We’ll
    then move on to deal with objects and how these are stored on the heap. Next,
    we’ll briefly discuss accessing primitives and objects. Finally, we’ll describe
    the Metaspace and what it’s used for.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第1章*](B18762_01.xhtml#_idTextAnchor014)，*Java内存的不同部分*，涵盖了Java内存的不同部分：栈、堆和元空间。我们将从栈内存以及变量如何在栈上存储开始。然后，我们将继续处理对象以及它们如何在堆上存储。接下来，我们将简要讨论访问原始类型和对象。最后，我们将描述元空间及其用途。'
- en: '[*Chapter 2*](B18762_02.xhtml#_idTextAnchor038), *Primitives and Objects in
    Java Memory*, zooms in on primitives and objects in Java memory. We’ll be dealing
    with the heap and stack in more detail here. With the use of visualization, we’ll
    show what happens during the execution of a Java program with the stack and the
    heap memory. Once the basics of memory management are clear, we’ll deal with object
    references in more detail. We explain how Java’s call-by-value mechanism, when
    applied to references, can lead to a security issue known as **escaping references**.
    We discuss how to solve this issue.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第2章*](B18762_02.xhtml#_idTextAnchor038)，*Java内存中的基本类型和对象*，聚焦于Java内存中的基本类型和对象。我们将更详细地处理堆和栈。通过使用可视化，我们将展示Java程序执行过程中栈和堆内存发生的情况。一旦内存管理的基本原理清晰，我们将更详细地处理对象引用。我们解释了当Java的按值调用机制应用于引用时，如何导致一个称为**逃逸引用**的安全问题。我们讨论了如何解决这个问题。'
- en: '[*Chapter 3*](B18762_03.xhtml#_idTextAnchor049), *Zooming in on the Heap Space*,
    focuses on the different parts of the heap space. It has two main areas: the young
    generation space and the tenured space. The young generation space contains two
    separate areas: the eden space and the survivor space. We won’t dive into the
    garbage collection process in this chapter, but we’ll briefly mention it and what
    it is to explain how objects are promoted between spaces. Visualization of the
    heap and the different areas will be added to provide clarity regarding the heap
    space’s details. The content of this chapter is necessary to understand the garbage
    collection algorithms that will be discussed in the next chapter.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第3章*](B18762_03.xhtml#_idTextAnchor049)，*聚焦堆空间*，关注堆空间的不同部分。它有两个主要区域：年轻代空间和持久代空间。年轻代空间包含两个独立区域：eden空间和幸存者空间。本章不会深入探讨垃圾收集过程，但我们会简要提及它以及它是如何解释对象在空间之间晋升的。我们将添加堆和不同区域的可视化，以提供有关堆空间详细信息的清晰度。本章的内容对于理解下一章将要讨论的垃圾收集算法是必要的。'
- en: '[*Chapter 4*](B18762_04.xhtml#_idTextAnchor057), *Freeing the Memory with Garbage
    Collection*, dives into the deallocation of the objects on the heap. Deallocation
    of the memory is necessary in order for an application to keep running. Without
    the ability to free memory, we could allocate it only once and eventually we’d
    run out of memory. In this chapter, we are dealing with when objects on the heap
    space are eligible for garbage collection and what phases the garbage collector
    goes through. We’ll end with a discussion on the different implementations of
    the garbage collector. We’ll make this as visual as possible to increase understanding.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第4章*](B18762_04.xhtml#_idTextAnchor057)，*通过垃圾收集释放内存*，深入探讨堆上对象的释放。为了使应用程序能够继续运行，释放内存是必要的。如果没有释放内存的能力，我们只能分配一次，最终会耗尽内存。在本章中，我们处理堆空间中的对象何时适合进行垃圾收集以及垃圾收集器经过哪些阶段。我们将以尽可能直观的方式结束对垃圾收集器不同实现的讨论。'
- en: '[*Chapter 5*](B18762_05.xhtml#_idTextAnchor077), *Zooming in on the Metaspace*,
    touches upon the Metaspace, which is used by the JVM for class metadata and for
    example static variables. This metadata gets stored when the classes are loaded.
    We’ll describe the class loading process and how memory is allocated. The releasing
    of Metaspace memory is a bit different from the releasing of heap memory. This
    process will be described here as well.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第5章*](B18762_05.xhtml#_idTextAnchor077)，*聚焦元空间*，涉及元空间，它是JVM用于类元数据和例如静态变量的。这些元数据在类加载时被存储。我们将描述类加载过程以及内存的分配。释放元空间内存与释放堆内存略有不同。这个过程也将在此处描述。'
- en: '[*Chapter 6*](B18762_06.xhtml#_idTextAnchor086), *Configuring and Monitoring
    the Memory Management of the JVM*, explains how to get started with JVM tuning.
    First, we’ll describe what JVM tuning is and who needs it. There are several metrics
    that are relevant for the tuning of the JVM when it comes to memory management.
    We’ll examine these metrics and how to obtain them. We’ll end with the actual
    tuning and adjusting of the configuration of the JVM and how to use profiling
    to get insights into the effects of the tuning.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第6章*](B18762_06.xhtml#_idTextAnchor086)，*配置和监控JVM的内存管理*，解释了如何开始JVM调优。首先，我们将描述JVM调优是什么以及谁需要它。有几个指标与JVM内存管理调优相关。我们将检查这些指标以及如何获取它们。最后，我们将结束实际的JVM配置调整和如何使用分析来深入了解调优效果。'
- en: '[*Chapter 7*](B18762_07.xhtml#_idTextAnchor102), *Avoiding Memory Leaks*, deals
    with how to use the memory well and how to spot and solve memory leaks. Whenever
    objects are held in memory that are no longer needed, we get memory leaks. In
    the beginning, this can seem harmless, but over time it will slow down an application
    and the application will require a restart in order to function properly again.
    In this chapter, we’re going to make sure that the reader understands memory leaks
    and knows how to spot them. We’ll end with very common mistakes that lead to memory
    leaks and how to avoid them.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第7章*](B18762_07.xhtml#_idTextAnchor102)，*避免内存泄漏*，讨论了如何有效地使用内存以及如何发现和解决内存泄漏。当内存中保留不再需要的对象时，我们就会得到内存泄漏。一开始，这可能看似无害，但久而久之，它将减慢应用程序的速度，并且应用程序需要重新启动才能正常工作。在本章中，我们将确保读者理解内存泄漏并知道如何发现它们。我们将以导致内存泄漏的非常常见的错误以及如何避免它们结束。'
- en: To get the most out of this book
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了充分利用本书
- en: This book assumes Java 8 or later. A particular operating system or IDE is not
    mandatory. If you plan to run the examples yourself, then VisualVM, the visual
    tool for monitoring Java applications in memory, would be useful.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假定使用Java 8或更高版本。不需要特定的操作系统或IDE。如果您计划亲自运行示例，那么VisualVM（用于监控Java应用程序内存的视觉工具）将很有用。
- en: 'If you currently have nothing installed on your system, the following setup
    will suffice:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您目前系统上没有安装任何东西，以下设置就足够了：
- en: JDK 8 or later (Oracle’s JDK or OpenJDK)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 8或更高版本（Oracle的JDK或OpenJDK）
- en: IntelliJ IDEA(community edition is good enough) or Eclipse
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IntelliJ IDEA（社区版就足够了）或Eclipse
- en: VisualVM
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VisualVM
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **本书涵盖的软件/硬件** | **操作系统要求** |'
- en: '| Java 8+ | Windows, macOS, or Linux |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Java 8+ | Windows、macOS或Linux |'
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您正在使用这本书的数字版，我们建议您亲自输入代码或从书的GitHub仓库（下一节中有一个链接）获取代码。这样做将帮助您避免与代码的复制和粘贴相关的任何潜在错误**。'
- en: Download the example code files
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/B18762_Java-Memory-Management](https://github.com/PacktPublishing/B18762_Java-Memory-Management).
    If there’s an update to the code, it will be updated in the GitHub repository.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub下载本书的示例代码文件[https://github.com/PacktPublishing/B18762_Java-Memory-Management](https://github.com/PacktPublishing/B18762_Java-Memory-Management)。如果代码有更新，它将在GitHub仓库中更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还从丰富的图书和视频目录中提供了其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。查看它们吧！
- en: Download the color images
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载彩色图像
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/OeQqF](https://packt.link/OeQqF).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一份包含本书中使用的截图和图表彩色图像的PDF文件。您可以从这里下载：[https://packt.link/OeQqF](https://packt.link/OeQqF)。
- en: Conventions used
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用了多种文本约定。
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “For example, `int x;` defines (creates) a primitive
    variable `x` which is of (the primitive) type `int`.”'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`文本中的代码`：表示文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter昵称。以下是一个示例：“例如，`int
    x;` 定义（创建）了一个原始变量 `x`，其类型为（原始类型）`int`。”'
- en: 'A block of code is set as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望您注意代码块中的特定部分时，相关的行或项目将以粗体显示：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都如下所示：
- en: java.lang.Object@4617c264
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: java.lang.Object@4617c264
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For instance, words in menus or dialog boxes appear in **bold**. Here
    is an example: “There is a **Create another** option beside the **Create** button.”'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示新术语、重要单词或屏幕上看到的单词。例如，菜单或对话框中的单词会以**粗体**显示。以下是一个示例：“在**创建**按钮旁边有一个**创建另一个**选项。”'
- en: Tips or important notes
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士或重要注意事项
- en: Appear like this.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像这样。
- en: Get in touch
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果你对本书的任何方面有疑问，请通过电子邮件发送给我们，邮箱地址为[customercare@packtpub.com](mailto:customercare@packtpub.com)，并在邮件主题中提及书名。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误表**：尽管我们已经尽一切努力确保内容的准确性，但错误仍然可能发生。如果你在这本书中发现了错误，我们将不胜感激，如果你能向我们报告这个错误。请访问[www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)并填写表格。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果你在互联网上发现我们作品的任何形式的非法副本，如果你能提供位置地址或网站名称，我们将不胜感激。请通过电子邮件发送给我们，邮箱地址为[copyright@packt.com](mailto:copyright@packt.com)，并附上材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你有兴趣成为作者**：如果你在某个领域有专业知识，并且有兴趣撰写或为书籍做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com)。'
- en: Share Your Thoughts
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享你的想法
- en: Once you’ve read Java Memory Management, we’d love to hear your thoughts! Please
    [click here to go straight to the Amazon review page](https://packt.link/r/1801812853)
    for this book and share your feedback.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你阅读了《Java内存管理》，我们很乐意听听你的想法！请[点击此处直接进入此书的亚马逊评论页面](https://packt.link/r/1801812853)并分享你的反馈。
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你的评论对我们和科技社区都很重要，并将帮助我们确保我们提供高质量的内容。
- en: Download a Free PDF copy of this book
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载此书的免费PDF副本
- en: Thanks for purchasing this book!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您购买此书！
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你喜欢在路上阅读，但无法携带你的印刷书籍到处走？
- en: Is your eBook purchase not compatible with the device of your choice?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你的电子书购买是否与您选择的设备不兼容？
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心，现在，每购买一本Packt书籍，你都可以免费获得该书的DRM免费PDF版本。
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何地方、任何设备上阅读。直接从你最喜欢的技术书籍中搜索、复制和粘贴代码到你的应用程序中。
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠不会就此停止，你还可以获得独家折扣、时事通讯和每日免费内容的每日电子邮件。
- en: 'Follow these simple steps to get the benefits:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤获取福利：
- en: Scan the QR code or visit the link below
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描下面的二维码或访问以下链接
- en: '![](img/B18762_QR_Free_PDF.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18762_QR_Free_PDF.jpg)'
- en: https://packt.link/free-ebook/9781801812856
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: https://packt.link/free-ebook/9781801812856
- en: Submit your proof of purchase
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交你的购买证明
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！我们将直接将您的免费PDF和其他福利发送到您的电子邮件地址。
