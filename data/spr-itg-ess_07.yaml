- en: Chapter 7. Integration with Spring Batch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。与Spring Batch的集成
- en: Today, a common user deals with web applications, mobile applications, and desktop
    software. All of these are interactive, which means they take user input and respond
    in real time. They might not even be aware of other kinds of applications—applications
    that run in the background, do not need continuous user interaction, and may go
    on for hours, days, or even weeks! Yes, I am talking about the batch job that
    is typically used for offline processing such as file type conversions, reporting,
    data mining, and so on. In the early days, machines were too slow and someone
    had to sit for hours to get a simple job done. In batch processing, you submit
    jobs and then go and do other work—you only come to collect the result! This revolutionized
    the computing world and justified the exorbitantly high prices of equipment and
    programmers. It would not be an exaggeration to say that batch jobs showed the
    real power and usefulness of computers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，常见的用户会处理网络应用、移动应用和桌面软件。所有这些都是交互式的，这意味着它们需要用户输入并实时做出响应。他们可能甚至不知道其他类型的应用——后台运行、不需要持续用户交互，并且可能持续数小时、数天甚至数周的应用！是的，我在谈论通常用于离线处理如文件类型转换、报告、数据挖掘等任务的批量作业。在早期，机器太慢了，有人必须坐上几小时才能完成一个简单的任务。在批量处理中，你提交任务然后去做其他工作——你只来收集结果！这一革命改变了计算世界，证明了设备和程序员高昂价格的合理性。毫不夸张地说，批量作业展示了计算机的真正力量和实用性。
- en: 'If batch jobs are so important, it''s obvious that Spring would have a very
    good support for it. Spring Batch is the module that provides comprehensive support
    for batch processing. In this chapter, we will look into how Spring Integration
    integrates with the Spring Batch module. In sync with the Spring philosophy of
    modular approach, each module works independently and at the same time provides
    the necessary interfaces to be easily integrated with others in the family. Spring
    Integration can interact with the Spring Batch module via messaging and can provide
    an event-driven mechanism to trigger batch jobs. This chapter will cover two aspects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果批量作业这么重要，很明显Spring会提供很好的支持。Spring Batch是提供批量处理全面支持的模块。在本章中，我们将探讨Spring Integration如何与Spring
    Batch模块集成。与Spring的模块化哲学同步，每个模块独立工作，同时提供必要的接口以便于与其他家族成员轻松集成。Spring Integration可以通过消息与Spring
    Batch模块交互，并提供一个事件驱动机制来触发批量作业。本章将涵盖两个方面：
- en: A brief introduction to Spring Batch
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch简介
- en: Spring Integration and Spring Batch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Integration 和 Spring Batch
- en: Spring Batch
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch
- en: 'For a layman, a batch job can be defined as any job that can be run offline.
    Typically, it will be a manual trigger and the result can be collected after the
    expected completion time. If all goes well, then it''s really cool, but let''s
    list some of the challenges:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通人来说，批量作业可以被定义为任何可以离线运行的任务。通常，它将是一个手动触发，在预期的完成时间之后可以收集结果。如果一切顺利，那真的很酷，但让我们列出一些挑战：
- en: What if the external system that is used for a batch job (say an FTP server
    that hosts files) fails?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用于批量作业的外部系统（比如说托管文件的FTP服务器）失败了会怎样？
- en: If the machine running a batch job is rebooted for some reason, will the batch
    job also restart?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果出于某种原因运行批量作业的机器需要重新启动，批量作业也会重新开始吗？
- en: What if some explicit parameters are required (for example, authentication details
    that might not be eligible for automation)?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要一些显式参数（例如，可能不适合自动化的认证详情）该怎么办？
- en: Will incomplete tasks be tried again or left out?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未完成任务会再次尝试还是放弃？
- en: How do we deal with transaction and rollback?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何处理事务和回滚？
- en: How do we trigger and schedule the job at fixed intervals or in an event-driven
    fashion?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何以固定间隔或事件驱动的方式触发和调度作业？
- en: If the jobs run in a thread, who will manage resource synchronization?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果作业在线程中运行，谁来管理资源同步？
- en: How do we deal with the failures? Can the batch job trigger some alarm or send
    out notifications?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何处理失败？批量作业能否触发一些警报或发送通知？
- en: There are a lot of things that need to be accounted for—just imagine the difficulty
    if each of them has to be implemented by the programmer! Do not worry; Spring
    Batch is there to help you. With the help of Spring Integration, even the initial
    triggering part can be programmed—manual interaction is not required at all.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情需要考虑——想象一下如果每个都要程序员来实现会有多困难！不要担心；Spring Batch在那里帮助你。有了Spring Integration的帮助，甚至最初的触发部分也可以编程——完全不需要人工交互。
- en: First of all, Spring Batch is not a scheduling framework like Quartz, Tivoli,
    and others—rather, it leverages these frameworks. It is a very lightweight framework
    that provides reusable components to address most of the concerns raised previously,
    for example, transaction support, database support for recoverable jobs, logging,
    auditing, and so on. Let's start with the configuration step and then we can move
    up to the examples.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Spring Batch不是一个像Quartz、Tivoli那样的调度框架——相反，它利用了这些框架。它是一个非常轻量级的框架，提供了可重用的组件来解决前面提到的多数问题，例如，事务支持、可恢复作业的数据库支持、日志记录、审计等等。让我们从配置步骤开始，然后我们可以逐步过渡到示例。
- en: Prerequisites
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Before we can use the Spring Batch module, we need to add namespace support
    and Maven dependencies:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用Spring Batch模块之前，我们需要添加命名空间支持和Maven依赖项：
- en: '**Namespace support**: Namespace support can be added by using the following
    code:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间支持**：可以通过以下代码添加命名空间支持：'
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Maven entry**: Maven entry support can be added by using the following code:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven入口**：可以通过以下代码添加Maven入口支持：'
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Defining a Spring Batch job
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义Spring Batch作业
- en: The unit of work in a Spring Batch is a *job*, which encapsulates all other
    aspects needed to complete a batch operation. Before we get into the details of
    how to configure and use Spring Batch components, let's familiarize ourselves
    with the basic terms used in a Spring Batch job.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Batch中，工作单元是一个*作业*，它封装了完成批量操作所需的其它所有方面。在我们深入了解如何配置和使用Spring Batch组件之前，让我们先熟悉一下Spring
    Batch作业中使用的基本术语。
- en: The Spring Batch job language
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Batch作业语言
- en: 'Let''s familiarize ourselves with the basic domain language of Spring Batch,
    which will help us understand the example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先熟悉一下Spring Batch的基本领域语言，这将帮助我们理解示例：
- en: '`Job`: This represents a batch process, and it has one-to-one mapping. For
    each batch process, there will be one job. It can be defined either in XML or
    the Java configuration—I have used the XML approach.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Job`：这代表一个批量处理，它有一个一对一的映射。对于每个批量处理，将有一个作业。它可以在XML或Java配置中定义——我使用了XML方法。'
- en: '`Step`: This is the logical breakdown of a job—a job has one or more steps.
    It encapsulates the phases of a job. A step is the logical unit that contains
    the actual details for running and controlling the batch job. Each job step can
    specify its fault tolerance—for example, skip an item on error, halt the job,
    and so on.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Step`：这是作业的逻辑分解——一个作业有一个或多个步骤。它封装了作业的阶段。步骤是运行和控制批量作业的实际细节的逻辑单元。每个作业步骤可以指定其容错性——例如，在错误时跳过一项，停止作业等。'
- en: '`JobInstance`: This is one instance of a job. For example, a job must be run
    once a day, and each day run will be represented by a `JobInstance`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JobInstance`：这是一个作业实例。例如，一个作业必须每天运行一次，每次运行都会由一个`JobInstance`来表示。'
- en: '`JobParameter`: This is the parameter that is necessary for a `JobInstance`
    to complete.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JobParameter`：这是完成`JobInstance`所必需的参数。'
- en: '`JobExcecution`: When a `JobInstance` of a job is triggered, it may complete
    or fail. Each trigger of `JobInstance` is wrapped as `JobExecution`. So, for example,
    if a retry has been set and `JobInstance` is triggered thrice (due to failures)
    before it completes, then there are three instances of `JobExecution`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JobExcecution`：当一个作业的`JobInstance`被触发时，它可能完成或失败。每个`JobInstance`的触发都被包装成`JobExecution`。所以，例如，如果设置了重试，并且由于失败，`JobInstance`被触发三次（由于失败）才完成，那么就有三个`JobExecution`实例。'
- en: '`StepExecution`: Similar to `JobExecution`, `StepExecution` is an instance
    of a single attempt to run a step. If a step completes after *n* retries, there
    will be *n* instances of `StepExecution`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StepExecution`：与`JobExecution`类似，`StepExecution`是运行一个步骤的一次尝试的实例。如果一个步骤在*n*次重试后完成，将有*n*个`StepExecution`实例。'
- en: '`ExecutionContext`: One of the important aspects of the batch job is the ability
    to restart and reschedule failed jobs; for that, it''s necessary to store enough
    information so that it can be triggered back, similar to a process context at
    the operating systemlevel. `ExecutionContext` is used to address this use case,
    which provides storage of key/value pairs of context-related properties.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExecutionContext`：批量作业的一个重要方面是能够重新启动和重新调度失败作业；为此，需要存储足够的信息，以便可以将其重新触发，类似于操作系统级别的进程上下文。`ExecutionContext`用于解决此用例，它提供存储与上下文相关的属性键/值对的存储。'
- en: '`JobRepository`: This is the persistence wrapper for all the aforementioned
    units. The underlying database provider can be from one of the many supported
    by Spring Batch.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JobRepository`：这是所有上述单元的持久性包装器。底层数据库提供者可以来自Spring Batch支持的各种数据库之一。'
- en: '`JobLauncher`: This is an interface that is used to launch a job.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JobLauncher`：这是一个用于启动作业的接口。'
- en: '`ItemReader`: This is an interface used by the step to read input. If the input
    set has been exhausted, `ItemReader` should indicate this by returning null.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ItemReader`：此接口用于步骤读取输入。如果输入集已用尽，`ItemReader`应通过返回null来指示此情况。'
- en: '`ItemWriter`: This is the output interface of a step—one batch or chunk of
    items at a time.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ItemWriter`：这是步骤的输出接口——一次一个批次或数据块。'
- en: '`ItemProcessor`: This is the intermediate state of `ItemReader` and `ItemWriter`.
    It provides the opportunity to apply transformation or business logic to an item.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ItemProcessor`：这是`ItemReader`和`ItemWriter`的中间状态。它提供了将一个项目应用于转换或业务逻辑的机会。'
- en: 'With the preceding introduction, we can understand the Spring Batch example
    a little bit better. So let''s start with one and define a batch job:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有了前面的介绍，我们可以更好地理解Spring Batch示例。那么我们从定义一个批处理作业开始：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the brief description of the tags used in the preceding configuration:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面配置中使用的标签的简要描述：
- en: '`batch:job`: This is the parent tag that starts the definition of the batch
    job. `id` is used to uniquely identify this job, for example, to refer inside
    a `JobLauncher` to launch this job.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch:job`：这是启动批处理作业的父标签。`id`用于唯一标识此作业，例如，在`JobLauncher`内引用此作业。'
- en: '`batch:step`: This is one of the steps for this job.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch:step`：这是此作业的一个步骤。'
- en: '`batch:tasklet`: This is the implementation that does the actual task of the
    step, leaving the step to take care of status maintenance, eventing, and so on.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch:tasklet`：这是执行步骤实际任务的实现，而步骤则负责维护状态、事件处理等。'
- en: '`batch:chunk`: A `tasklet` can be a simple service or a very complex task,
    while a `chunk` is a logical unit of work that can be worked upon by a `tasklet`.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch:chunk`：一个`tasklet`可以是一个简单的服务或一个非常复杂的任务，而一个`chunk`是可以通过`tasklet`进行处理的工作逻辑单位。'
- en: '`batch:listeners`: These are used to propagate the events. We will revisit
    this later in this chapter.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch:listeners`：这些用于传播事件。我们将在本章后面重新访问这个。'
- en: What are the reader and writer? As the name suggests, reader reads the chunk
    of data while writer writes them back. There are standard readers provided by
    Spring to read a CSV file, but we can provide our own implementation. Let's look
    at a reader and writer used for this example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 读者和写入者是什么？正如名称所示，读者读取数据块，而写入者将其写回。Spring提供了读取CSV文件的标准化读者，但我们可以提供自己的实现。让我们看看这个例子中使用的读者和写入者。
- en: ItemReader
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ItemReader
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The components used in the preceding code snippet are explained in the following
    bullet points:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码片段中使用的组件在以下项目点中解释：
- en: '`itemReader`: This uses Spring''s default flat file reader, whose location
    has been mentioned by the `resource` property. The name will be retrieved from
    the `JobParameter` item passed to the job. We will see how to pass it when we
    write the launcher.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`itemReader`：这使用了Spring的默认平面文件读取器，其位置在`resource`属性中提到。名称将从传递给作业的`JobParameter`条目中检索。我们将看到在编写启动器时如何传递它。'
- en: '`lineMapper`: This is a default implementation from Spring that has been used
    to map a line from the CSV file.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lineMapper`：这是Spring提供的默认实现，用于将CSV文件中的行映射到行。'
- en: '`lineTokenizer`: It is very important how each token on a line should be interpreted.
    The value of the property `names` decides the order. For example, in the preceding
    example, it is `name,designation,dept,address`, which means if a sample file has
    an entry like this:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lineTokenizer`：如何解释行中的每个令牌非常重要。属性`names`的值决定了顺序。例如，在前面的示例中，它是`name,designation,dept,address`，这意味着如果样本文件有一个条目如下：'
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then each chunk will be interpreted as name, designation, department, and address,
    respectively.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，每个数据块将被解释为姓名、职位、部门和地址，分别。
- en: '`fieldSetMapper`: Although some default implementations are available, most
    of the time it is a custom class that defines the mapping between the item in
    a CSV file and the domain model. The following is the code snippet of our example
    that uses the mapper:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fieldSetMapper`：虽然有一些默认实现，但在大多数情况下，它是一个自定义类，用于定义CSV文件中的条目和领域模型之间的映射。以下是使用映射器的示例代码片段：'
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ItemWriter
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ItemWriter
- en: 'A writer is used to write chunks of data. A writer is almost always user defined.
    It can be defined to write in a file, database, or JMS, or to any endpoint—it
    depends on our implementation. Towards the end of the chapter, we will discuss
    how this can be used to even trigger an event in the Spring Integration environment.
    Let''s first look at a simple writer configuration:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 写入器用于写入数据块。写入器几乎总是用户定义的。它可以被定义为在文件、数据库或JMS中写入，或到任何端点——这取决于我们的实现。在章节的最后，我们将讨论如何使用它甚至触发Spring
    Integration环境中的事件。让我们首先看看一个简单的写入器配置：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following code snippet is the implementation of the writer class:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是写入器类的实现：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For simplicity, I have printed the records, but as mentioned previously, it
    can be populated in the database or it can be used to do whatever we want to do
    inside this class.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我打印了记录，但如前所述，它可以在数据库中填充，或者可以用来在这个类中做我们想做的事情。
- en: 'Okay, so far we have defined the job, the reader, and the writer; then what''s
    stopping us from launching it? How do we launch this batch job? Spring provides
    the `Joblauncher` interface that can be used to launch the job. `Joblauncher`
    needs an interface of the type `JobRepository` to store the context of the job
    so that it can be recovered and restarted on failure. `JobRepository` can be configured
    to leverage any database that Spring can use, for example, in-memory, MySql, PostGres,
    and so on. Let''s define `jobLauncher` as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，到目前为止，我们已经定义了作业、读取器和写入器；那么是什么阻止我们启动它呢？我们如何启动这个批处理作业？Spring提供了`Joblauncher`接口，可以用来启动作业。`Joblauncher`需要一个`JobRepository`接口的实现来存储作业的上下文，以便在失败时可以恢复和重新启动。`JobRepository`可以配置为利用Spring可以使用的任何数据库，例如，内存、MySql、PostGres等。让我们如下定义`jobLauncher`：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Since `JobLauncher` cannot be used without a `JobRepository`, let''s configure
    `JobRepository`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`JobLauncher`不能在没有`JobRepository`的情况下使用，让我们配置`JobRepository`：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The properties shown in the preceding code can be configured in a `properties`
    file, let''s say `batch.properties`. We can provide the properties in a class
    path and use the `property-placeholder` tag to inject the properties, as shown
    here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码中显示的属性可以在一个`properties`文件中配置，比如说`batch.properties`。我们可以将属性提供在类路径中，并使用`property-placeholder`标签来注入属性，如下所示：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As soon as the database is there, we need transactions! Let''s configure the
    transaction manager:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了数据库，我们就需要事务！让我们配置事务管理器：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Thank god, no more configurations! By the way, these are not specific to any
    batch job; any data source and transaction manager configured in the existing
    application can be used. With all these configurations, we are ready to launch
    the batch job. Let''s see the following sample code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 谢天谢地，不再有配置了！顺便说一下，这些不是针对任何批处理作业的；任何在现有应用程序中配置的数据源和事务管理器都可以使用。有了所有的配置，我们准备启动批处理作业。让我们看看以下示例代码：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s understand the code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解一下代码：
- en: '**Load the file**: We first load the configuration file.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载文件**：我们首先加载配置文件。'
- en: '**Extract the reference**: The next step is to retrieve the reference of the
    defined job using its unique ID.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提取引用**：下一步是使用其唯一ID检索定义工作的引用。'
- en: '**Add parameters**: A job needs a parameter, so we define `JobParameter` using
    the `JobParameterBuilder` class. The name of the file being passed as a value
    of the key is `input.file.name`, which was configured in the job definition.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加参数**：作业需要一个参数，因此我们使用`JobParameterBuilder`类定义`JobParameter`。传递给键值的文件名是`input.file.name`，这在作业定义中配置。'
- en: '**Launch the job**: Finally, use Spring''s `JobLauncher` class to launch the
    job.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动作业**：最后，使用Spring的`JobLauncher`类来启动作业。'
- en: Hmm! Now we have a small and simple batch up and running. Let's see how Spring
    Integration can be used to reap its power and enhance the usage even further.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯！现在我们有一个小而简单的批处理程序正在运行。让我们看看Spring Integration如何利用其力量并进一步增强使用。
- en: Spring Batch and Spring Integration
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch和Spring Integration
- en: 'Typically, a batch application can be triggered via a command-line interface
    or programmatically, for example, from a web container. Let''s introduce Spring
    Integration and see the possibilities:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，批处理应用程序可以通过命令行界面或程序化方式触发，例如，从一个web容器中。让我们引入Spring Integration并看看可能性：
- en: It can be triggered on an event, for example, a file adapter listening for a
    file triggers Spring Integration on arrival of the file.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以由事件触发，例如，文件适配器监听文件触发Spring Integration在文件到达时。
- en: Execution can be chained in a flow—trigger the job, pass on the result, invoke
    the error path, and so on.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行可以在流程中链接——触发作业，传递结果，调用错误路径等。
- en: The message queue is not meant for huge amounts of data. So for big files, Spring
    Integration can act as the trigger, while delegating the actual task to Spring
    Batch. It can provide a strategy to chunk the files and distribute them across
    the Spring Batch job.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列并不适合大量数据。因此，对于大文件，Spring Integration可以充当触发器，同时将实际任务委托给Spring Batch。它可以提供一种分块文件并将其分布到Spring
    Batch作业中的策略。
- en: Spring Integration not only triggers batch jobs, but can also collect the result
    and propagate it in the system. For example, a batch process triggered by Spring
    Integration may finish off in a day, after which `ItemWriter` can write an item
    to JMS on which the Spring Integration adapter is listening. Even without any
    awareness or locking in for the job started, messages from the queue will be processed
    by Spring Integration.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Integration不仅可以触发批处理作业，还可以收集结果并在系统中传播。例如，由Spring Integration触发的批处理过程可能在一天后结束，之后`ItemWriter`可以将一个条目写入JMS，Spring
    Integration适配器正在监听该JMS。即使没有任何对启动作业的意识或锁定，队列中的消息也将由Spring Integration处理。
- en: Launching the job
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动作业
- en: 'Enough theory! Let''s write some code. This time, we will trigger the batch
    job on some event instead of triggering manually. We are processing a file, what
    if we process a file adapter? Let''s write a file adapter that will listen for
    files in a directory and trigger a batch job on the availability of a file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 够了理论！让我们写一些代码。这次，我们将在某些事件上触发批处理作业，而不是手动触发。我们正在处理一个文件，如果我们处理一个文件适配器会怎样？让我们写一个文件适配器，它将监听目录中的文件，并在文件可用时触发一个批处理作业：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: No need to define the file adapter tags, as they have been taken care of in
    the previous chapter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要定义文件适配器标签，因为它们在前一章中已经处理了。
- en: 'The preceding configuration will listen for files in the configured directory.
    Files will be put on to `fileOutPutChannel` as `Message<File>`, and we need to
    convert it to a form so that `JobLauncher` can understand it. We will use the
    `transformer` component:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置将监听配置目录中的文件。文件将被放入`fileOutPutChannel`作为`Message<File>`，我们需要将其转换为`JobLauncher`可以理解的形式。我们将使用`transformer`组件：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will have to write the logic to convert `Message<File>` to `JobLaunchRequest`.
    The following code is a very simple transformer that extracts the file path from
    the payload of `Message` (which is `File`) and then adds the retrieved path as
    `JobParameter`. This job parameter is then used to launch the job using Spring''s
    `JobLauncher`, as shown in the following code snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不编写逻辑将`Message<File>`转换为`JobLaunchRequest`。以下代码是一个非常简单的转换器，它从`Message`的负载（即`File`）中提取文件路径，然后将检索到的路径作为`JobParameter`添加。这个作业参数然后用于使用Spring的`JobLauncher`启动作业，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With this code in place, whenever a new file arrives in the directory, a batch
    job is triggered using Spring Integration. Moreover, file adapter was just an
    example, any adapter or gateway—such as mail, JMS, FTP, and others—can be plugged
    in to trigger the batch processing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这段代码，每当有新文件到达目录时，就会使用Spring Integration触发一个批处理作业。而且，文件适配器只是一个例子，任何适配器或网关——比如邮件、JMS、FTP等——都可以插入以触发批处理。
- en: Tracking the status of a batch job
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪批处理作业的状态
- en: 'Most of the time, we would want to have feedback about the task in progress—how
    can we do that? Spring Integration is an event-based framework so no surprise
    that we can configure listeners with a batch job. If you refer to the batch job
    definition at the beginning, it has a listener defined:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，我们希望能够得到进行中的任务的反馈——我们怎样才能做到这一点呢？Spring Integration是一个基于事件的事件框架，所以毫不奇怪，我们可以为批处理作业配置监听器。如果你参考开头的批处理作业定义，它有一个监听器定义：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code can have a Spring Integration gateway as a listener, which listens
    for the notification and puts the status of the batch job (of the type `JobExecution`)
    on the defined channel:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以有一个Spring Integration网关作为监听器，它监听通知并将批处理作业（类型为`JobExecution`）的状态放在定义的信道上：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The status will be available on a channel where we have our processing done.
    Let''s plug in a simple service activator to print the status:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 状态将在我们完成处理的信道上可用。我们插入一个简单的服务激活器来打印状态：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The other way round
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反之亦然
- en: 'Spring Integration can launch the batch job, and Spring Batch can interact
    with the Spring Integration and trigger components. How can we do this? Spring
    Integration''s event-based components can be a good option. Let''s take a simple
    example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration可以启动批处理作业，而Spring Batch可以与Spring Integration交互并触发组件。我们如何做到这一点呢？Spring
    Integration的事件驱动组件是一个不错的选择。让我们来看一个简单的例子：
- en: There is an inbound JMS adapter in the Spring Integration application that listens
    for messages on the queue and, based on that, triggers some action.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring Integration应用程序中有一个入站JMS适配器，它监听队列上的消息，并基于此触发某些操作。
- en: How can we invoke this adapter from Spring Batch? We can define a custom `ItemWriter`
    class in Spring Batch that writes its output to the JMS queue where the Spring
    Integration component is listening.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何从Spring Batch中调用这个适配器呢？我们可以在Spring Batch中定义一个自定义的`ItemWriter`类，该类将其输出写入JMS队列，而Spring
    Integration组件正在监听该队列。
- en: As soon as `ItemWriter` writes to the JMS queue, the inbound adapter picks it
    up and passes it down the line for further processing.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦`ItemWriter`将数据写入JMS队列，入站适配器就会将其捡起并传递给下一阶段进行进一步处理。
- en: The preceding use case is just one example; we can gel the eventing mechanism
    of both the frameworks and achieve the required inter-app communication.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的用例只是其中之一；我们可以整合这两个框架的事件机制，实现所需的应用间通信。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This completes our discussion on how Spring Integration and Spring Batch can
    intercommunicate. We covered the basics of Spring Batch, how it can be leveraged
    by Spring Integration to delegate the processing of huge payloads, how status
    can be tracked, and then in turn how Spring Batch can trigger events and start
    processing in the Spring Integration application!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们关于Spring Integration和Spring Batch如何进行互联互通的讨论。我们介绍了Spring Batch的基础知识，如何被Spring
    Integration利用来委托处理大量负载，如何跟踪状态，以及随后Spring Batch如何触发事件并在Spring Integration应用程序中开始处理！
- en: In the next chapter, we will discuss one of the most important aspects—testing.
    Keep up the energy!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论最重要的方面之一——测试。保持精力充沛！
