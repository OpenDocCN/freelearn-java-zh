- en: Securing and Testing Your Backend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护和测试您的后端
- en: This chapter explains how to secure and test your Spring Boot backend. We will
    use the database application that we created in the previous chapter as a starting
    point.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何保护和测试您的Spring Boot后端。我们将使用上一章中创建的数据库应用程序作为起点。
- en: 'In this chapter, we will look into the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下内容：
- en: How to secure your Spring Boot backend with Spring Boot
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot保护您的Spring Boot后端
- en: How to secure your Spring Boot backend with JWT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用JWT保护您的Spring Boot后端
- en: How to test your backend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试您的后端
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that was created in previous chapters is necessary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在之前章节创建的Spring Boot应用程序。
- en: Spring Security
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security
- en: Spring Security ([https://spring.io/projects/spring-security](https://spring.io/projects/spring-security))
    provides security services for Java-based web applications. The Spring Security
    project started in 2003 and was previously named *The Acegi Security System for
    Spring*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security ([https://spring.io/projects/spring-security](https://spring.io/projects/spring-security))为基于Java的Web应用程序提供安全服务。Spring
    Security项目始于2003年，之前被称为Spring的Acegi安全系统。
- en: 'By default, Spring Security enables the following features:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Security启用以下功能：
- en: An `AuthenticationManager` bean with an in-memory single user. The username
    is `user` and the password is printed to the console output.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有内存单个用户的`AuthenticationManager` bean。用户名为`user`，密码打印到控制台输出。
- en: Ignored paths for common static resource locations, such as `/css`, `/images`,
    and more.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略常见静态资源位置的路径，例如`/css`、`/images`等。
- en: HTTP basic security for all other endpoints.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他端点的HTTP基本安全。
- en: Security events published to Spring `ApplicationEventPublisher`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布到Spring `ApplicationEventPublisher`的安全事件。
- en: Common low-level features are on by default (HSTS, XSS, CSRF, and so forth).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下启用常见的低级功能（HSTS、XSS、CSRF等）。
- en: 'You can include Spring Security in your application by adding the following
    dependency to the `pom.xml` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下依赖项添加到`pom.xml`文件中，将Spring Security包含在应用程序中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you start your application, you can see from the console that Spring Security
    has created an in-memory user with the username `user`. The user''s password can
    be seen in the console output:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动应用程序时，您可以从控制台看到Spring Security已创建一个内存用户，用户名为`user`。用户的密码可以在控制台输出中看到：
- en: '![](img/018a154a-75b2-4e7e-9eab-1a83275a29ed.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/018a154a-75b2-4e7e-9eab-1a83275a29ed.png)'
- en: 'If you make a `GET` request to your API endpoint, you will see that it is now
    secure, and you will get a `401 Unauthorized` error:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对API端点进行`GET`请求，您将看到它现在是安全的，并且您将收到`401 Unauthorized`错误：
- en: '![](img/7e3bb567-1e85-40b8-b687-38e415595f20.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e3bb567-1e85-40b8-b687-38e415595f20.png)'
- en: 'To be able to make a successful `GET` request, we have to use basic authentication.
    The following screenshot shows how to do it with Postman. Now, with authentication
    we can see that status is 200 OK and the response is sent:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够成功进行`GET`请求，我们必须使用基本身份验证。以下截图显示了如何在Postman中进行操作。现在，通过身份验证，我们可以看到状态为200 OK，并且响应已发送：
- en: '![](img/96f9e18a-e8cc-4ff4-bc61-b48ab790a4bf.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96f9e18a-e8cc-4ff4-bc61-b48ab790a4bf.png)'
- en: 'To configure how Spring Security behaves, we have to add a new configuration
    class that extends the `WebSecurityConfigurerAdapter`. Create a new class called
    `SecurityConfig` in your application root package. The following source code shows
    the structure of the security configuration class. The `@Configration` and `@EnableWebSecurity`
    annotations switch off the default web security configuration and we can define
    our own configuration in this class. Inside the `configure(HttpSecurity http)` method,
    we can define which endpoints in our application are secured and which are not.
    We actually don''t need this method yet because we can use the default settings
    where all endpoints are secured:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置Spring Security的行为，我们必须添加一个新的配置类，该类扩展了`WebSecurityConfigurerAdapter`。在应用程序的根包中创建一个名为`SecurityConfig`的新类。以下源代码显示了安全配置类的结构。`@Configration`和`@EnableWebSecurity`注解关闭了默认的Web安全配置，我们可以在这个类中定义自己的配置。在`configure(HttpSecurity
    http)`方法中，我们可以定义应用程序中哪些端点是安全的，哪些不是。实际上，我们还不需要这个方法，因为我们可以使用所有端点都受保护的默认设置：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also can add in-memory users to our application by adding the `userDetailsService()`
    method into our `SecurityConfig` class. The following is the source code of the
    method and it will create an in-memory user with the username `user` and password
    `password`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在`SecurityConfig`类中添加`userDetailsService()`方法来向我们的应用程序添加内存用户。以下是该方法的源代码，它将创建一个用户名为`user`，密码为`password`的内存用户：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The usage of in-memory users is good in the development phase, but the real
    application should save the users in the database. To save the users to the database,
    you have to create a user entity class and repository. Passwords shouldn''t be
    saved to the database in plain text format. Spring Security provides multiple
    hashing algorithms, such as BCrypt, that you can use to hash passwords. The following
    steps show how to implement that:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段使用内存用户是很好的，但是真正的应用程序应该将用户保存在数据库中。要将用户保存到数据库中，您必须创建一个用户实体类和存储库。密码不应以明文格式保存到数据库中。Spring
    Security提供了多种哈希算法，例如BCrypt，您可以使用它们来哈希密码。以下步骤显示了如何实现这一点：
- en: 'Create a new class called `User` in the `domain` package. Activate the `domain`
    package and right click your mouse. Select New | Class from the menu and give
    the name `User` to a new class. After that, your project structure should look
    like the following screenshot:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`domain`包中创建一个名为`User`的新类。激活`domain`包，右键单击鼠标。从菜单中选择New | Class，并将新类命名为`User`。之后，您的项目结构应如下截图所示：
- en: '![](img/a149cf61-44de-432d-9180-a74600669ab2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a149cf61-44de-432d-9180-a74600669ab2.png)'
- en: 'Annotate the `User` class with the `@Entity` annotation. Add the class fields—ID,
    username, password, and role. Finally, add the constructors, getters, and setters. 
    We will set all fields to be nullable and that the username must be unique, by
    using the `@Column` annotation. See the following `User.java` source code of the
    fields and constructors:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@Entity`注解对`User`类进行注释。添加类字段——ID、用户名、密码和角色。最后，添加构造函数、getter和setter。我们将所有字段设置为可为空，并使用`@Column`注解使用户名必须是唯一的。请参阅以下`User.java`字段和构造函数的源代码：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the rest of the `User.java` source code with the getters and
    setters:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`User.java`源代码的其余部分，包括getter和setter：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a new class called `UserRepository` in the `domain` package. Activate
    the `domain` package and right click your mouse. Select New | Class from the menu
    and give the name `UserRepository` to the new class.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`domain`包中创建一个名为`UserRepository`的新类。激活`domain`包，右键单击鼠标。从菜单中选择新建|类，并将新类命名为`UserRepository`。
- en: 'The source code of the repository class is similar to what we have done in
    the previous chapter, but there is one query method, `findByUsername`, that we
    need in the next steps. See the following `UserRepository` source code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仓库类的源代码与我们在上一章中所做的类似，但有一个查询方法`findByUsername`，我们在接下来的步骤中需要。请参阅以下`UserRepository`源代码：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we create a class that implements the `UserDetailsService` interface
    provided by Spring Security. Spring Security uses this for user authentication
    and authorization. Create a new package in the root package called `service`. Activate
    the root package and right click your mouse. Select New | Package from the menu
    and give the name `service` to a new package:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个实现Spring Security提供的`UserDetailsService`接口的类。Spring Security用于用户身份验证和授权。在根包中创建一个名为`service`的新包。激活根包，右键单击鼠标。从菜单中选择新建|包，并将新包命名为`service`：
- en: '![](img/c4fbe47c-e3df-4bae-8125-ae4e9e40db61.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4fbe47c-e3df-4bae-8125-ae4e9e40db61.png)'
- en: 'Create a new class called `UserDetailServiceImpl` in the `service` package
    we just created. Now your project structure should look like the following:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的`service`包中创建一个名为`UserDetailServiceImpl`的新类。现在，您的项目结构应如下所示：
- en: '![](img/65caec36-f8b2-485c-a505-120a0a443068.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65caec36-f8b2-485c-a505-120a0a443068.png)'
- en: 'We have to inject the `UserRepository` class into the `UserDetailServiceImpl` class
    because that is needed to fetch the user from the database when Spring Security
    handles authentication. The `loadByUsername` method returns the `UserDetails` object,
    which is needed for authentication. Following is the source code of `UserDetailServiceImpl.java`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须将`UserRepository`类注入到`UserDetailServiceImpl`类中，因为在Spring Security处理身份验证时需要从数据库中获取用户。`loadByUsername`方法返回所需的`UserDetails`对象进行身份验证。以下是`UserDetailServiceImpl.java`的源代码：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In our security configuration class, we have to define that Spring Security
    should use users from the database instead of in-memory users. Delete the `userDetailsService()` method
    from the `SecurityConfig` class to disable in-memory users. Add a new `configureGlobal` method
    to enable users from the database. We shouldn''t ever save the password as plain
    text to the database. Therefore, we will define a password hashing algorithm in
    the `configureGlobal` method. In this example, we are using the BCrypt algorithm.
    This can be easily implemented with the Spring Security `BCryptPasswordEncoder` class.
    Following is the `SecurityConfig.java` source code. Now, the password must be
    hashed using BCrypt before it''s saved to the database:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的安全配置类中，我们必须定义Spring Security应该使用数据库中的用户而不是内存中的用户。从`SecurityConfig`类中删除`userDetailsService()`方法以禁用内存中的用户。添加一个新的`configureGlobal`方法以启用来自数据库的用户。我们不应该将密码明文保存到数据库中。因此，我们将在`configureGlobal`方法中定义密码哈希算法。在本例中，我们使用BCrypt算法。这可以很容易地通过Spring
    Security的`BCryptPasswordEncoder`类实现。以下是`SecurityConfig.java`的源代码。现在，密码在保存到数据库之前必须使用BCrypt进行哈希处理：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we can save a couple of test users to the database in our `CommandLineRunner`.
    Open the `CardatabaseApplication.java` file and add following code at the beginning
    of the class to inject `UserRepository` into the main class:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以在我们的`CommandLineRunner`中将一对测试用户保存到数据库中。打开`CardatabaseApplication.java`文件，并在类的开头添加以下代码，将`UserRepository`注入到主类中：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Save the users to the database with hashed passwords. You can use any BCrypt
    calculator found on the internet:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用哈希密码将用户保存到数据库。您可以使用在互联网上找到的任何BCrypt计算器：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After running your application, you see that there is now a `user` table in
    the database and two user records are saved:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您会看到数据库中现在有一个`user`表，并且保存了两条用户记录：
- en: '![](img/d2acbb3e-93d2-4b8a-9033-7da7536584c7.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2acbb3e-93d2-4b8a-9033-7da7536584c7.png)'
- en: Now, you will get a `401 Unauthorized` error if you try to send a `GET` request
    to the `/api` endpoint without authentication. You should authenticate to be able
    to send a successful request. The difference to the previous example is that we
    are using the users from the database to authenticate.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试在没有身份验证的情况下向`/api`端点发送`GET`请求，您将收到`401 Unauthorized`错误。您应该进行身份验证才能发送成功的请求。与前一个示例的不同之处在于，我们使用数据库中的用户进行身份验证。
- en: 'You can see a `GET` request to the `/api` endpoint using the `admin` user in
    the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下截图中看到对`/api`端点的`GET`请求，使用`admin`用户：
- en: '![](img/8e5bc254-4f49-4fef-a52e-0c3c8146f97b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e5bc254-4f49-4fef-a52e-0c3c8146f97b.png)'
- en: Securing your backend using JWT
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JWT保护您的后端
- en: In the previous section, we covered how to use basic authentication with the
    RESTful web service. That is not usable when we are going to develop our own frontend
    with React. We are going to use the **JSON Web Tokens** (**JWT**) authentication
    in our application. JWT is a compact way to implement authentication in modern
    web applications. JWT is really small in size and therefore it can be sent in
    the URL, in the `POST` parameter, or inside the header. It also contains all required
    information about the user.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们介绍了如何在RESTful Web服务中使用基本身份验证。当我们要用React开发自己的前端时，这是不可用的。我们将在我们的应用程序中使用JSON
    Web Tokens（JWT）身份验证。JWT是在现代Web应用程序中实现身份验证的一种紧凑方式。JWT非常小，因此可以在URL、POST参数或标头中发送。它还包含有关用户的所有必需信息。
- en: 'The JSON web token contains three different parts separated by dots. The first
    part is the header that defines the type of the token and the hashing algorithm.
    The second part is the payload that, typically, in the case of authentication,
    contains information about the user. The third part is the signature that is used
    to verify that the token hasn''t been changed along the way. You can see the following
    example of a JWT token:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: JSON Web令牌由三个由点分隔的不同部分组成。第一部分是标头，定义了令牌的类型和哈希算法。第二部分是有效载荷，通常在认证的情况下包含有关用户的信息。第三部分是签名，用于验证令牌在传输过程中未被更改。您可以看到以下JWT令牌的示例：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following diagram shows the main idea of the JWT authentication process:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了JWT身份验证过程的主要思想：
- en: '![](img/a5489d53-929b-4830-af03-89e4814bbf9f.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5489d53-929b-4830-af03-89e4814bbf9f.png)'
- en: After successful authentication, the requests sent by the user should always
    contain the JWT token that was received in the authentication.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 成功认证后，用户发送的请求应始终包含在认证中收到的JWT令牌。
- en: 'We will use the Java JWT library ([https://github.com/jwtk/jjwt](https://github.com/jwtk/jjwt)),
    which is the JSON Web Token library for Java and Android; therefore, we have to
    add the following dependency to the `pom.xml` file. The JWT library is used for
    creating and parsing JWT tokens:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Java JWT库（[https://github.com/jwtk/jjwt](https://github.com/jwtk/jjwt)），这是Java和Android的JSON
    Web令牌库；因此，我们必须将以下依赖项添加到`pom.xml`文件中。JWT库用于创建和解析JWT令牌：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following steps show how to enable JWT authentication in our backend:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤显示了如何在我们的后端启用JWT身份验证：
- en: 'Create a new class called `AuthenticationService` in the `service` package.
    In the beginning of the class we will define a few constants; `EXPIRATIONTIME`
    defines the expiration time of the token in milliseconds. `SIGNINGKEY` is an algorithm-specific
    signing key used to digitally sign the JWT. You should use a base64 encoded string.
    PREFIX defines the prefix of the token and the Bearer schema is typically used.
    The `addToken` method creates the token and adds it to the request''s `Authorization`
    header. The signing key is encoded using the SHA-512 algorithm. The method also
    adds `Access-Control-Expose-Headers`  to the header with the `Authorization` value.
    This is needed because we are not able to access the `Authorization` header through
    a JavaScript frontend by default. The `getAuthentication` method gets the token
    from the response `Authorization` header using the `parser()` method provided
    by the `jjwt` library. The whole `AuthenticationService` source code can be seen
    here:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`service`包中创建一个名为`AuthenticationService`的新类。在类的开头，我们将定义一些常量；`EXPIRATIONTIME`定义了令牌的过期时间（以毫秒为单位）。`SIGNINGKEY`是用于数字签名JWT的特定于算法的签名密钥。您应该使用Base64编码的字符串。PREFIX定义了令牌的前缀，通常使用Bearer模式。`addToken`方法创建令牌并将其添加到请求的`Authorization`标头中。签名密钥使用SHA-512算法进行编码。该方法还使用`Authorization`值向标头添加`Access-Control-Expose-Headers`。这是因为我们默认情况下无法通过JavaScript前端访问`Authorization`标头。`getAuthentication`方法使用`jjwt`库提供的`parser()`方法从响应的`Authorization`标头中获取令牌。整个`AuthenticationService`源代码可以在此处看到：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we will add a new simple POJO class to keep credentials for authentication.
    Create a new class called `AccountCredentials` in the `domain` package. The class
    has two fields—`username` and `password`. The following is the source code of
    the class. This class doesn''t have the `@Entity` annotation because we don''t
    have to save credentials to the database:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个新的简单POJO类来保存认证凭据。在`domain`包中创建一个名为`AccountCredentials`的新类。该类有两个字段——`username`和`password`。以下是该类的源代码。该类没有`@Entity`注释，因为我们不必将凭据保存到数据库中：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will use filter classes for login and authentication. Create a new class
    called `LoginFilter`  in the root package that handles `POST` requests to the `/login`
    endpoint. The `LoginFilter` class extends the Spring Security `AbstractAuthenticationProcessingFilter`,
    which requires that you set the `authenticationManager` property. Authentication
    is performed by the `attemptAuthentication` method. If the authentication is successful,
    the `succesfulAuthentication` method is executed. This method will then call the `addToken`
    method in our service class and the token will be added to the `Authorization`
    header:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用过滤器类进行登录和身份验证。在根包中创建一个名为`LoginFilter`的新类，处理对`/login`端点的`POST`请求。`LoginFilter`类扩展了Spring
    Security的`AbstractAuthenticationProcessingFilter`，需要设置`authenticationManager`属性。认证由`attemptAuthentication`方法执行。如果认证成功，则执行`succesfulAuthentication`方法。然后，此方法将调用我们的服务类中的`addToken`方法，并将令牌添加到`Authorization`标头中：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new class called `AuthenticationFilter` in the root package. The class
    extends `GenericFilterBean`, which is a generic superclass for any type of filter.
    This class will handle authentication in all other endpoints except `/login`.
    The `AuthenticationFilter` uses the `addAuthentication` method from our service
    class to get a token from the request `Authorization` header:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根包中创建一个名为`AuthenticationFilter`的新类。该类扩展了`GenericFilterBean`，这是任何类型过滤器的通用超类。此类将处理除`/login`之外的所有其他端点的身份验证。`AuthenticationFilter`使用我们的服务类中的`addAuthentication`方法从请求的`Authorization`标头中获取令牌：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we have to make changes to our `SecurityConfig` class''s `configure`
    method. There, we define that the `POST` method request to the `/login` endpoint
    is allowed without authentication and that requests to all other endpoints need
    authentication. We also define the filters to be used in the `/login` and other
    endpoints by using the `addFilterBefore` method:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须对我们的`SecurityConfig`类的`configure`方法进行更改。在那里，我们定义了对`/login`端点的`POST`方法请求允许无身份验证，并且对所有其他端点的请求需要身份验证。我们还通过使用`addFilterBefore`方法定义了要在`/login`和其他端点中使用的过滤器：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will also add a **CORS** (**Cross-Origin Resource Sharing**) filter in our
    security configuration class. This is needed for the frontend, that is sending
    requests from the other origin. The CORS filter intercepts requests, and if these
    are identified as cross origin, it adds proper headers to the request. For that,
    we will use Spring Security''s `CorsConfigurationSource` interface. In this example,
    we will allow all HTTP methods and headers. You can define the list of allowed
    origins, methods, and headers here, if you need more finely graded definition.
    Add the following source into your `SecurityConfig` class to enable the CORS filter:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将在安全配置类中添加**CORS**（跨源资源共享）过滤器。这对于前端是必需的，因为它会从其他来源发送请求。CORS过滤器拦截请求，如果识别为跨源，它会向请求添加适当的标头。为此，我们将使用Spring
    Security的`CorsConfigurationSource`接口。在此示例中，我们将允许所有HTTP方法和标头。如果需要更精细的定义，您可以在此处定义允许的来源、方法和标头列表。将以下源代码添加到您的`SecurityConfig`类中以启用CORS过滤器：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, after you run the application, we can call the `/login` endpoint with
    the `POST` method and, in the case of a successful login, we will receive a JWT
    token in the `Authorization` header:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在运行应用程序之后，我们可以使用`POST`方法调用`/login`端点，在成功登录的情况下，我们将在`Authorization`标头中收到JWT令牌：
- en: '![](img/a6b3b37a-a2ca-40b9-aa7c-20c512c6dc47.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6b3b37a-a2ca-40b9-aa7c-20c512c6dc47.png)'
- en: 'After successful login, we can call the other RESTful service endpoints by
    sending the JWT token received from the login in the `Authorization` header. See
    the example in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，我们可以通过在`Authorization`标头中发送从登录接收到的JWT令牌来调用其他RESTful服务端点。请参见以下屏幕截图中的示例：
- en: '![](img/d2b23561-369a-4d47-9d19-35ad998e3073.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2b23561-369a-4d47-9d19-35ad998e3073.png)'
- en: Now, all the functionalities that are needed have been implemented to our backend.
    Next, we will continue with backend unit testing.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经实现了后端所需的所有功能。接下来，我们将继续进行后端单元测试。
- en: Testing in Spring Boot
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot中的测试
- en: 'The Spring Boot test starter package is added to `pom.xml` by Spring Initializr
    when we created our project. That is added automatically without any selection
    in the Spring Initializr page:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建项目时，Spring Initializr会自动将Spring Boot测试启动器包添加到`pom.xml`中。这是在Spring Initializr页面中没有任何选择的情况下自动添加的：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The Spring Boot test starter provides lot of handy libraries for testing, such
    as JUnit, Mockito, AssertJ, and more. If you look, your project structure already
    has its own package created for test classes:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot测试启动器为测试提供了许多方便的库，如JUnit、Mockito、AssertJ等。如果您查看，您的项目结构已经为测试类创建了自己的包：
- en: '![](img/39d91eed-cc54-42bb-8a37-3db63c79f0bf.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39d91eed-cc54-42bb-8a37-3db63c79f0bf.png)'
- en: 'By default, Spring Boot uses an in-memory database for testing. We are now
    using MariaDB, but H2 can also be used for testing by adding the following dependency
    to the `pom.xml` file. The scope defines that the H2 database will be used only
    for running tests; otherwise, the application will use the MariaDB database:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot在测试中使用内存数据库。我们现在使用MariaDB，但也可以通过将以下依赖项添加到`pom.xml`文件中来使用H2进行测试。范围定义了H2数据库仅用于运行测试；否则，应用程序将使用MariaDB数据库：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you also want to use the default database for testing, you can use the `@AutoConfigureTestDatabase`
    annotation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还想在测试中使用默认数据库，可以使用`@AutoConfigureTestDatabase`注解。
- en: Creating unit tests
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建单元测试
- en: 'For unit testing, we are using a JUnit, which is a popular Java-based unit
    testing library. The following source code shows the example skeleton of the Spring
    Boot test class. The `@SpringBootTest` annotation specifies that the class is
    a regular test class that runs Spring Boot based tests. The `@Test` annotation
    before the method defines to JUnit that the method can be run as a test case.
    The `@RunWith(SpringRunner.class)` annotation provides Spring `ApplicationContext`
    and get beans injected into your test instance:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单元测试，我们使用的是JUnit，这是一个流行的基于Java的单元测试库。以下源代码显示了Spring Boot测试类的示例框架。`@SpringBootTest`注解指定该类是一个常规测试类，运行基于Spring
    Boot的测试。方法前的`@Test`注解定义了该方法可以作为测试用例运行。`@RunWith(SpringRunner.class)`注解提供了Spring
    `ApplicationContext`并将bean注入到测试实例中：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'First, we will create our first test case, which will test the major functionality
    of your application before creating any formal test cases. Open the `CardatabaseApplicationTest`
    test class that has already been made for your application. There is one test
    method called `contextLoads` where we will add the test. The following test checks
    that the instance of controller was created and injected successfully:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建我们的第一个测试用例，该测试用例将在创建任何正式测试用例之前测试应用程序的主要功能。打开已为您的应用程序创建的`CardatabaseApplicationTest`测试类。有一个名为`contextLoads`的测试方法，我们将在其中添加测试。以下测试检查控制器的实例是否已成功创建和注入：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To run tests in Eclipse, activate the test class in the Project Explorer and
    right-click your mouse. Select Run  As | JUnit test from the menu. You should
    now see the JUnit tab in the lower part of the Eclipse workbench. The test results
    are shown in this tab and the test case has been passed:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Eclipse中运行测试，请在项目资源管理器中激活测试类，然后右键单击鼠标。从菜单中选择Run As | JUnit test。现在应该在Eclipse工作台的下部看到JUnit选项卡。测试结果显示在此选项卡中，测试用例已通过：
- en: '![](img/22eec50f-35aa-4b81-ad41-ade87dd66484.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22eec50f-35aa-4b81-ad41-ade87dd66484.png)'
- en: 'Next, we will create unit tests for our car repository to test CRUD operations.
    Create a new class called `CarRepositoryTest` in the root test package. Instead
    of the `@SpringBootTest` annotation, the `@DataJpaTest` can be used if the test
    focuses only on JPA components. When using this annotation the H2 database, Hibernate,
    and Spring Data are configured automatically for testing. SQL logging will be
    also turned on. The tests are transactional by default and roll back at the end
    of the test case.  `TestEntityManager` is used to handle the persist entities
    and it is designed to be used in testing. You can see in the following, the source
    code of the JPA test class skeleton:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的汽车存储库创建单元测试，以测试CRUD操作。在根测试包中创建一个名为`CarRepositoryTest`的新类。如果测试仅关注JPA组件，则可以使用`@DataJpaTest`注解，而不是`@SpringBootTest`注解。使用此注解时，H2数据库、Hibernate和Spring
    Data会自动配置进行测试。SQL日志记录也将被打开。测试默认是事务性的，并在测试用例结束时回滚。`TestEntityManager`用于处理持久化实体，并设计用于测试。您可以在以下看到JPA测试类骨架的源代码：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will add out first test case to test the addition of a new car to database.
    A new `car` object is created and saved to the database with the `persistAndFlush`
    method provided by `TestEntityManager`. Then, we check that the car ID cannot
    be null if it is saved successfully. The following source code shows the test
    case method. Add the following method code into your `CarRepositoryTest` class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加第一个测试用例来测试向数据库添加新汽车。使用`TestEntityManager`提供的`persistAndFlush`方法创建一个新的`car`对象并保存到数据库中。然后，我们检查如果成功保存，汽车ID不能为空。以下源代码显示了测试用例方法。将以下方法代码添加到您的`CarRepositoryTest`类中：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The second test case will test the deletion of cars from the database. A new
    `car` object is created and saved to the database. Then, all cars are deleted
    from the database, and finally, the `findAll()` query method should return an
    empty list. The following source code shows the test case method. Add the following
    method code into your `CarRepositoryTest` class:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个测试用例将测试从数据库中删除汽车。创建一个新的`car`对象并保存到数据库中。然后，从数据库中删除所有汽车，最后，`findAll()`查询方法应返回一个空列表。以下源代码显示了测试用例方法。将以下方法代码添加到您的`CarRepositoryTest`类中：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the test cases and check on the Eclipse JUnit tab that the tests were passed:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试用例并在Eclipse JUnit选项卡上检查测试是否通过：
- en: '![](img/7f5825b7-bea8-459e-9302-7e19c896e6fe.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f5825b7-bea8-459e-9302-7e19c896e6fe.png)'
- en: 'Next, we will show how to test your RESTful web service JWT authentication
    functionality. For testing the controllers or any endpoint that is exposed, we
    can use a `MockMvc`. By using the `MockMvc`, the server is not started but the
    tests are performed in the layer where Spring handles HTTP requests, and therefore
    it mocks the real situation. `MockMvc` provides the `perform` method to send the
    requests. To test authentication, we have to add credentials to the request body.
    We perform two requests; the first has the correct credentials and we check that
    the status is OK. The second request contains incorrect credentials and we check
    that we get a 4XX HTTP error:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将展示如何测试RESTful Web服务JWT身份验证功能。对于测试控制器或任何公开的端点，我们可以使用`MockMvc`。通过使用`MockMvc`，服务器不会启动，但测试是在Spring处理HTTP请求的层中执行的，因此它模拟了真实情况。`MockMvc`提供了`perform`方法来发送请求。要测试身份验证，我们必须向请求体添加凭据。我们执行两个请求；第一个具有正确的凭据，我们检查状态是否正常。第二个请求包含不正确的凭据，我们检查是否收到4XX的HTTP错误：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, when we run the authentication tests, we can see that the test passed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行身份验证测试时，我们可以看到测试通过了：
- en: '![](img/d6976c26-8eda-4b6c-a6a6-7aaf5ff0508e.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6976c26-8eda-4b6c-a6a6-7aaf5ff0508e.png)'
- en: Now, we have covered the basics of testing in the Spring Boot application, and
    you should have the knowledge required to implement more test cases for your application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经介绍了Spring Boot应用程序中测试的基础知识，您应该具备实现更多测试用例的所需知识。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on securing and testing the Spring Boot backend.
    Securing was first done with Spring Security. The frontend will be developed with
    React in upcoming chapters; therefore, we implemented JWT authentication, which
    is a lightweight authentication method suitable for our needs. We also covered
    the basics of testing a Spring Boot application. We used JUnit for unit testing
    and implemented test cases for JPA and RESTful web service authentication. In
    the next chapter, we will setup the environment and tools for the frontend development.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于保护和测试Spring Boot后端。首先使用Spring Security进行保护。前端将在接下来的章节中使用React进行开发；因此，我们实现了JWT身份验证，这是一种适合我们需求的轻量级身份验证方法。我们还介绍了测试Spring
    Boot应用程序的基础知识。我们使用JUnit进行单元测试，并为JPA和RESTful Web服务身份验证实现了测试用例。在下一章中，我们将为前端开发设置环境和工具。
- en: Questions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Spring Security?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Spring Security？
- en: How can you secure your backend with Spring Boot?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot保护后端？
- en: What is JWT?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是JWT？
- en: How can you secure your backend with JWT?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用JWT保护后端？
- en: How can you create unit tests with Spring Boot?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot创建单元测试？
- en: How can you run and check the results of unit tests?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何运行和检查单元测试的结果？
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about Spring Security and Testing:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很好的资源，可以了解Spring Security和测试的知识：
- en: '[https://www.packtpub.com/application-development/spring-security-third-edition](https://www.packtpub.com/application-development/spring-security-third-edition)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/spring-security-third-edition](https://www.packtpub.com/application-development/spring-security-third-edition)'
- en: '[https://www.packtpub.com/web-development/mastering-software-testing-junit-5](https://www.packtpub.com/web-development/mastering-software-testing-junit-5)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/mastering-software-testing-junit-5](https://www.packtpub.com/web-development/mastering-software-testing-junit-5)'
