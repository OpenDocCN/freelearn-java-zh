- en: Chapter 11. Spring with Thymeleaf Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。Spring与Thymeleaf集成
- en: Thymeleaf is a template engine that is completely written in Java. It supports
    XML/XHTML/HTML5, and that means we can develop templates using XML or XHTML or
    HTML5 using the Thymeleaf template engine library. It provides an optional module
    for Spring MVC and Spring Web Flow integration. Template engines help us to create
    reusable components in the UI. Template usually by convention consists of a header,
    menu, message, body, content and footer components. The content part is loaded
    dynamically with messages. We can create different layouts with a template.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf是一个完全用Java编写的模板引擎。它支持XML/XHTML/HTML5，这意味着我们可以使用Thymeleaf模板引擎库使用XML或XHTML或HTML5开发模板。它提供了一个可选的模块，用于Spring
    MVC和Spring Web Flow集成。模板引擎帮助我们在UI中创建可重用的组件。模板通常按照约定包括标题、菜单、消息、正文、内容和页脚组件。内容部分动态加载消息。我们可以使用模板创建不同的布局。
- en: Thymeleaf can be used instead of JSP. We have so far used tiles with JSP for
    making templates with custom tags. Thymeleaf templates are XHTML, XML, HTML5 template
    engines. Even web designers can easily interact with it. The expression language
    used is very much advanced compared to the JSP expression language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf可以用来代替JSP。到目前为止，我们已经使用了JSP和自定义标签制作模板。Thymeleaf模板是XHTML、XML、HTML5模板引擎。甚至网页设计师也可以很容易地与之交互。所使用的表达语言与JSP表达语言相比非常先进。
- en: In this chapter, we shall demonstrate how to integrate Spring MVC with the Thymeleaf
    template. We shall see how to get started with Spring Thymeleaf with available
    dependency.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示如何将Spring MVC与Thymeleaf模板集成。我们将看到如何使用可用的依赖项开始使用Spring Thymeleaf。
- en: Thymeleaf attributes
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Thymeleaf属性
- en: Let's look at some of the basic attributes that Thymeleaf provides for designing
    a page. We shall also look at the how it interacts with Java object and loops.
    Thymeleaf uses a lot of attributes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些Thymeleaf提供的用于设计页面的基本属性。我们还将看一下它如何与Java对象和循环交互。Thymeleaf使用了许多属性。
- en: 'To display a message:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示消息：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To display a loop, we have `th:each`:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要显示循环，我们有`th:each`：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, lets look at a form submit action:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，让我们看一个表单提交操作：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we have to button submit, then add:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们必须提交按钮，那么添加：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Spring Thymeleaf dependency
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Thymeleaf依赖
- en: 'To get started with the Thymeleaf template engine, we need to add the following
    dependency in the `pom.xml` file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Thymeleaf模板引擎，我们需要在`pom.xml`文件中添加以下依赖项：
- en: 'The Thyemleaf library:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thyemleaf库：
- en: '`groupId`: `org.thymeleaf`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`: `org.thymeleaf`'
- en: '`artifactId`: `thymeleaf`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`: `thymeleaf`'
- en: '`version`: 2.1.4 Release'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: 2.1.4 Release'
- en: 'The Spring-Thymeleaf plugin library:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring-Thymeleaf插件库：
- en: '`groupId`: `org.thymeleaf`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`: `org.thymeleaf`'
- en: '`artifactId`: `thymeleaf-spring4`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`: `thymeleaf-spring4`'
- en: '`version`: 2.1.4\. Release'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: 2.1.4\. Release'
- en: 'For testing the framework (the note version does not necessarily match that
    of the core), Thymeleaf requires Java SE 5.0 or newer. Besides, it depends on
    the following libraries:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试框架（注意版本不一定与核心版本匹配），Thymeleaf需要Java SE 5.0或更新版本。此外，它依赖于以下库：
- en: unbescape 1.1.0 or later
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: unbescape 1.1.0或更高版本
- en: ONGL 3.0.8 or later
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ONGL 3.0.8或更高版本
- en: Javassist 3.16.1-GA or later
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Javassist 3.16.1-GA或更高版本
- en: slf4j 1.6.6 or later
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: slf4j 1.6.6或更高版本
- en: Additionally, if you use the LEGACYHTML5 template mode, you will need the NekoHTML
    1.9.21 or later
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，如果您使用LEGACYHTML5模板模式，则需要NekoHTML 1.9.21或更高版本
- en: Spring MVC and Thymeleaf
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring MVC 和 Thymeleaf
- en: In this section, let's look at configuring Thymeleaf in a Spring MVC framework.
    We can also use the `SpringContext.xml` file for Thymeleaf configuration, but
    since we have seen a lot of such examples in which have performed a configuration
    in an XML file, we shall look at adding configuration in a Java file using Spring
    annotations. Let us create a simple class `CustomPacktConfiguration` and use `@Configuration`
    annotation for the class, which tells the framework that this class has the configurations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看一下如何在Spring MVC框架中配置Thymeleaf。我们也可以使用`SpringContext.xml`文件进行Thymeleaf配置，但由于我们已经看到了许多这样的例子，其中我们在XML文件中执行了配置，我们将看一下如何在Java文件中使用Spring注解添加配置。让我们创建一个简单的类`CustomPacktConfiguration`，并为该类使用`@Configuration`注解，告诉框架这个类有配置。
- en: In the configuration class, set the template mode to the format used in the
    application, that is whether it is XHTML or XML template. Then we need to set
    the template configuration to the `thymeleafviewResolver` object and also we need
    to actually pass the `templateResolver` class.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置类中，将模板模式设置为应用程序中使用的格式，即XHTML或XML模板。然后我们需要将模板配置设置为`thymeleafviewResolver`对象，还需要实际传递`templateResolver`类。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: MVC with Spring Thymeleaf
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring Thymeleaf的MVC
- en: In this section, we will go deeper into Thymeleaf integration in the Spring
    application, and develop a simple MVC application that lists authors and allows
    the user to add, edit and delete authors. An advantage of having done the configuration
    in a Java file rather than in an XML file is the code security. Your XML can easily
    be changed, but in case of configuration in the Java file, we may have to deploy
    the class file on to the server to see the changes. In this example, let us use
    `JavaConfig` approach to configure the beans. We can omit the XML configuration
    files.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨Thymeleaf在Spring应用程序中的集成，并开发一个简单的MVC应用程序，列出作者并允许用户添加、编辑和删除作者。在Java文件中进行配置而不是在XML文件中进行配置的优势是代码安全性。您的XML可以很容易被更改，但在Java文件中进行配置的情况下，我们可能需要将类文件部署到服务器上以查看更改。在本例中，让我们使用`JavaConfig`方法来配置bean。我们可以省略XML配置文件。
- en: Let us first start with the controller, it has methods to insert and list the
    authors available in the database.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先从控制器开始，它有方法来插入和列出数据库中可用的作者。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next define the custom `RuntimeException` by extending the `RuntimeException`
    class:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来通过扩展`RuntimeException`类定义自定义`RuntimeException`：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this step, we will start with the Thymeleaf service, and write an interface
    and implementing class.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，我们将从Thymeleaf服务开始，编写一个接口和实现类。
- en: 'The interface depicts the methods used in the interface:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口描述了接口中使用的方法：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next we shall implement the interface:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来我们将实现接口：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let us implement the repository class used in the application service implementation
    class:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们实现应用程序服务实现类中使用的存储库类：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next implement the Model class (`Author` and `AuthorData`) in the application.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来在应用程序中实现Model类（`Author`和`AuthorData`）。
- en: 'Let''s implement the `Author` class first:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先让我们实现`Author`类：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let us implement the `AuthorData` class:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，让我们实现`AuthorData`类：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this step, we will create the configuration class; as discussed earlier,
    we are not using XML for configuration. We have two configuration files—we are
    using MongoDB for database configuration and the other is the component scan configuration
    file:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，我们将创建配置类；如前所述，我们不使用XML进行配置。我们有两个配置文件——一个用于数据库配置的MongoDB，另一个是组件扫描配置文件：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This class is an important class that marks the beginning of the application
    instantiation. Here, we have also configured the Thymeleaf template view resolver
    and provided the component scan information. The template and view resolver have
    also been configured in the class:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是一个重要的类，标志着应用程序实例化的开始。在这里，我们还配置了Thymeleaf模板视图解析器并提供了组件扫描信息。模板和视图解析器也在这个类中进行了配置：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The next step is to create HTML files under the `WEB-INF` folder create a `home.html`
    file as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在`WEB-INF`文件夹下创建HTML文件，创建一个`home.html`文件如下：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Lastly, create a simple `results.html` file:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个简单的`results.html`文件：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This would give the user a list of authors and a form for inserting author information
    into the MongoDB database, using the Thymeleaf template.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为用户提供一个作者列表和一个用于将作者信息插入MongoDB数据库的表单，使用Thymeleaf模板。
- en: Spring Boot with Thymeleaf and Maven
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot与Thymeleaf和Maven
- en: In this section, we will see how we can use Spring boot to create a Spring with
    Thymeleaf application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用Spring boot创建一个带有Thymeleaf应用程序的Spring。
- en: 'The pre-requisite for this operation is Maven, which should be installed. To
    check if Maven is installed, type the following command in to the Command Prompt:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作的前提是Maven必须安装。要检查Maven是否已安装，请在命令提示符中键入以下命令：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use the archetype to generate a Spring boot with a `thymeleaf` project:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用原型来生成一个带有`thymeleaf`项目的Spring boot：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding command will create a `spring-boot-thymeleaf` directory. This
    can be imported into Eclipse IDE.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个`spring-boot-thymeleaf`目录。这可以导入到Eclipse IDE中。
- en: 'You will open the `pom.xml` file and add a `parent` project:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将打开`pom.xml`文件并添加一个`parent`项目：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Start adding a dependency to the `pom.xml` file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始向`pom.xml`文件添加一个依赖项：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly add the Spring boot plugin:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后添加Spring boot插件：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Let us start modifying the web. But wait a moment—this is not the web application!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始修改web。但等一下，这不是web应用程序！
- en: 'So, let''s modify the `App` class so that it is the entry point to the Spring
    Boot application:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，让我们修改`App`类，使其成为Spring Boot应用程序的入口点：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, let''s configure the Thymeleaf template. To configure it we need to add
    templates under the `src/main/resources/templates` directory:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们配置Thymeleaf模板。为了配置它，我们需要在`src/main/resources/templates`目录下添加模板：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can upgrade the Thymeleaf template by adding CSS and JavaScript reference
    as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过添加CSS和JavaScript引用来升级Thymeleaf模板，如下所示：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Spring boot supports WebJars out of the box. Add the following dependencies
    to the `pom.xml` file.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring boot支持开箱即用的WebJars。将以下依赖项添加到`pom.xml`文件中。
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And reference the libraries in the templates as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 并在模板中引用库，如下所示：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, for static prototyping, libraries are downloaded from the CDN,
    converting the packaging from JAR to WAR
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对于静态原型设计，库是从CDN下载的，将打包从JAR转换为WAR
- en: 'It is fairly easy with Spring boot to run this project as a plain web application.
    Firstly, we need to convert the type of packaging in `pom.xml` from JAR to WAR
    (the packaging element). Secondly, make sure that Tomcat is a provided dependency:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring boot作为普通web应用程序运行这个项目非常容易。首先，我们需要将`pom.xml`中的打包类型从JAR改为WAR（打包元素）。其次，确保Tomcat是一个提供的依赖项：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We also need to create a controller to handle the application requests:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个控制器来处理应用程序请求：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The last step is to Bootstrap a servlet configuration. Create a `Init` class
    and inherit from `SpringBootServletInitializer`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是引导一个servlet配置。创建一个`Init`类并继承自`SpringBootServletInitializer`：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can check if the configuration works with Maven using the `mvn clean package`
    command. The WAR file will be created:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`mvn clean package`命令检查配置是否与Maven一起工作。WAR文件将被创建：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Use Maven to start the application from the WAR file directly using the following
    command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Maven直接从WAR文件启动应用程序，使用以下命令：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After creating a WAR project, we will run the application in Eclipse. After
    we have changed the packaging, Eclipse will detect the changes in the project
    and add a web facet to it. The next step is to configure the Tomcat server and
    run it. Navigate to **Edit Configurations**, and add the Tomcat server with an
    exploded WAR artefact. Now you can run the application as any other web application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建WAR项目后，我们将在Eclipse中运行应用程序。在我们改变了打包方式后，Eclipse将检测项目中的更改并向其添加web facet。下一步是配置Tomcat服务器并运行它。导航到**Edit
    Configurations**，并添加带有解压的WAR构件的Tomcat服务器。现在你可以像运行其他web应用程序一样运行应用程序。
- en: Reloading Thymeleaf templates
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新加载Thymeleaf模板
- en: Since the application is running on a local Tomcat server in Eclipse, we will
    reload static resources (for example, CSS files) without restarting the server.
    But, by default, Thymeleaf caches the templates, so in order to update Thymeleaf
    templates we need to change this behaviour.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序在Eclipse中运行在本地Tomcat服务器上，我们将重新加载静态资源（例如CSS文件）而无需重新启动服务器。但是，默认情况下，Thymeleaf会缓存模板，因此为了更新Thymeleaf模板，我们需要改变这种行为。
- en: Add the `application.properties` to `src/main/resources` directory with the
    `spring.thymeleaf.cache=false` property
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`application.properties`添加到`src/main/resources`目录中，其中包含`spring.thymeleaf.cache=false`属性
- en: Restart the server, and from now on you can reload Thymeleaf templates without
    restarting the server
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新启动服务器，从现在开始您可以重新加载Thymeleaf模板而无需重新启动服务器
- en: Changing the other configuration defaults
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改其他配置默认值
- en: 'The cache configuration is not the only available configuration we can adjust.
    Please look at the `ThymeleafAutoConfiguration` class to see what other things
    you can change. To mention a few: `spring.thymeleaf.mode`, `spring.thymeleaf.encoding`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存配置并不是我们可以调整的唯一可用配置。请查看`ThymeleafAutoConfiguration`类，了解您可以更改的其他内容。举几个例子：`spring.thymeleaf.mode`，`spring.thymeleaf.encoding`。
- en: Spring security with Thymeleaf
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Thymeleaf的Spring安全
- en: Since we have used Spring security, we will have used custom login forms in
    JSP in our Spring application. In this section, let's see how we can introduce
    a Thymeleaf template for securing the Spring based application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了Spring安全，我们将在我们的Spring应用程序中使用JSP中的自定义登录表单。在本节中，让我们看看如何引入Thymeleaf模板来保护基于Spring的应用程序。
- en: 'You can use Spring securing dialects like this to display the logged in user
    information. The attribute `sec:authorize` renders its content when the attribute
    expression is evaluated to `True`. You can use this code in the base file which
    is displayed after successful authentication:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像这样使用Spring安全方言来显示已登录用户的信息。属性`sec:authorize`在属性表达式评估为`True`时呈现其内容。您可以在成功认证后显示的基本文件中使用此代码：
- en: '[PRE31]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As we know, the following are a few necessary steps that we perform to add Spring
    security to our Spring application. But, you will observe that we have configured
    an HTML file which is a Thymeleaf file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，以下是我们在Spring应用程序中添加Spring安全所执行的一些必要步骤。但是，您会注意到我们已经配置了一个Thymeleaf文件的HTML文件。
- en: Configure the Spring security filter.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Spring安全过滤器。
- en: Configure the `applicationContext-springsecurity.xml` file as a context parm.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`applicationContext-springsecurity.xml`文件配置为上下文参数。
- en: Configure the URL that needs to be secured in `applicationContext-springsecurity.xml`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`applicationContext-springsecurity.xml`中配置需要保护的URL。
- en: 'A sample configuration would look like this:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 示例配置如下：
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Configure the Spring Controller:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Spring控制器：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s look at the `Login.html` file, which is Thymeleaf file. This can be
    recognised with XMLNS given in the beginning of the file. Also observe that we
    are handling the error in the JSP file; when login fails it shows an error message.
    We will also create an `error.html` file to handle errors:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看一下`Login.html`文件，这是Thymeleaf文件。这可以通过文件开头给出的XMLNS来识别。还要注意，我们正在处理JSP文件中的错误；当登录失败时，它会显示错误消息。我们还将创建一个`error.html`文件来处理错误：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This step is all about configuring the error page. The error page can be configured
    in a `web.xml` file. First, we need to add the `<error-page>` tag to the `web.xml`
    file. Once we configure the error page, we need to inform the controller class
    about the error page:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是关于配置错误页面。错误页面可以在`web.xml`文件中配置。首先，我们需要向`web.xml`文件添加`<error-page>`标签。一旦配置了错误页面，我们需要通知控制器类有关错误页面的信息：
- en: '[PRE35]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the request mapping for the `error` page in the controller:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中为`error`页面添加请求映射：
- en: '[PRE36]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Visit [http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html](http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html)
    for more details.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html](http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html)了解更多详情。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how we can integrate the Thymeleaf template engine
    into a Spring MVC application, and also how to use Spring boot to start a Spring
    with Thymeleaf application. We have also demonstrated creating custom forms for
    Spring security using a Spring Thymeleaf template.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何将Thymeleaf模板引擎集成到Spring MVC应用程序中，以及如何使用Spring boot启动Spring与Thymeleaf应用程序。我们还演示了如何使用Spring
    Thymeleaf模板为Spring安全创建自定义表单。
- en: In the next chapter, we will look at Spring with web service integration and
    see what it offers to develop SOAP and REST Web Services.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到Spring与Web服务集成，并了解它为开发SOAP和REST Web服务提供了什么。
