- en: Chapter 10. Spring Remoting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。Spring远程
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up Web-Services using RMI
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RMI设置Web服务
- en: Setting up servlet-based Web-Services using Hessian/Burlap, exposing business
    beans
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hessian/Burlap设置基于servlet的Web服务，暴露业务bean
- en: Setting up Web-Services using JAX-WS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JAX-WS设置Web服务
- en: Exposing servlet-based Web-Services using Apache CXF
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apache CXF暴露基于servlet的Web服务
- en: Exposing Web-Services using JMS as the underlying communication protocol
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JMS作为底层通信协议暴露Web服务
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Spring-WS project is a contract-first approach to build a Web-Service. This
    approach is already detailed in the first eight chapters. However, sometimes the
    requirement is to expose the existing business Spring beans as a Web-Service,
    which is called **contract-last** approach, to set up a Web-Service.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS项目是一种基于契约的方法来构建Web服务。这种方法已经在前八章中详细介绍过。然而，有时的要求是将现有的业务Spring bean暴露为Web服务，这被称为**契约后**方法，用于设置Web服务。
- en: 'Spring''s remoting supports communication with several remoting technologies.
    Spring remoting allows you to expose existing Spring beans on server side as a
    Web-Service. On the client side, Spring remoting allows the client application
    to call a remote Spring bean (which is exposed as a Web-Service) through a local
    interface. In this chapter, Spring''s features for the following remoting technologies
    are detailed:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的远程支持与多种远程技术的通信。Spring远程允许在服务器端暴露现有的Spring bean作为Web服务。在客户端，Spring远程允许客户端应用程序通过本地接口调用远程Spring
    bean（该bean作为Web服务暴露）。在本章中，详细介绍了Spring的以下远程技术的功能：
- en: '**RMI:** Spring''s `RmiServiceExporter` allows you to expose local business
    services on **Remote Method Invocation (RMI)** on the server side, and Spring''s
    `RmiProxyFactoryBean` is the client-side proxy bean to call the Web-Service.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RMI：Spring的`RmiServiceExporter`允许您在服务器端使用远程方法调用（RMI）暴露本地业务服务，而Spring的`RmiProxyFactoryBean`是客户端代理bean，用于调用Web服务。
- en: '**Hessian:** Spring''s `HessianServiceExporter` allows you to expose local
    business services on lightweight HTTP-based protocol, introduced by Caucho technology
    ( [http://hessian.caucho.com](http://hessian.caucho.com)) on the server side,
    and `HessianProxyFactoryBean` is the client-side proxy bean to call the Web-Service.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hessian：Spring的`HessianServiceExporter`允许您在服务器端使用Caucho技术引入的轻量级基于HTTP的协议暴露本地业务服务，而`HessianProxyFactoryBean`是调用Web服务的客户端代理bean。
- en: '**Burlap:** This is an XML alternative of Hessian by Caucho Technology. Spring
    provides support classes using two of Spring''s beans, namely, `BurlapProxyFactoryBean`
    and `BurlapServiceExporter`.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burlap：这是Caucho Technology的Hessian的XML替代方案。Spring提供了支持类，使用Spring的两个bean，即`BurlapProxyFactoryBean`和`BurlapServiceExporter`。
- en: '**JAX-RPC:** Spring''s support to set up Web-Services is based on a Remote
    Procedure Call that uses J2EE 1.4''s JAX-RPC Web-Service API'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RPC：Spring支持设置Web服务，基于J2EE 1.4的JAX-RPC Web服务API
- en: '**JAX-WS:** Spring''s support to set up Web-Services using Java EE 5+ JAX-WS
    API that allows message-oriented as well as Remote Procedure Call Web-Service
    development.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-WS：Spring支持使用Java EE 5+ JAX-WS API设置Web服务，该API允许基于消息和远程过程调用的Web服务开发。
- en: '**JMS:** Spring exposes/consumes Web-Services using JMS as the underlying communication
    protocol using `JmsInvokerServiceExporter` and `JmsInvokerProxyFactoryBean` classes.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMS：Spring使用JMS作为底层通信协议来暴露/消费Web服务，使用`JmsInvokerServiceExporter`和`JmsInvokerProxyFactoryBean`类。
- en: Since JAX-WS is the successor of JAX-RPC, JAX-RPC is not included in this chapter.
    Instead, Apache CXF will be detailed in this chapter, as it can use JAX-WS to
    set up Web-Services, even though it is not part of Spring's remoting.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JAX-WS是JAX-RPC的后继者，因此本章不包括JAX-RPC。相反，本章将详细介绍Apache CXF，因为它可以使用JAX-WS来设置Web服务，即使它不是Spring的远程的一部分。
- en: For simplification, in this chapter, the following local business service is
    to be exposed as a Web-Service (the domain model is the one described in the *Introduction*
    section of [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services).*
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为简化起见，在本章中，将暴露以下本地业务服务作为Web服务（领域模型在[第1章](ch01.html "第1章。构建SOAP Web服务")的*介绍*部分中已经描述，*构建SOAP
    Web服务*）。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And this is the interface implementation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是接口实现：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Setting up Web-Services using RMI
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RMI设置Web服务
- en: '**RMI**, a part of J2SE, allows calling a method on different **Java Virtual
    Machines (JVMs).** RMI''s goal is to expose objects in separate JVM''s, as if
    they are like local objects. The client that calls the remote object through RMI
    doesn''t know whether an object is remote or local, and calling methods on the
    remote object has the same syntax as a method invocation on a local object.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: RMI是J2SE的一部分，允许在不同的Java虚拟机（JVM）上调用方法。RMI的目标是在单独的JVM中公开对象，就像它们是本地对象一样。通过RMI调用远程对象的客户端不知道对象是远程还是本地，并且在远程对象上调用方法与在本地对象上调用方法具有相同的语法。
- en: Spring's remoting provides features to expose/access Web-Services, based on
    RMI technology. On the server side, Spring's `RmiServiceExporter` bean exposes
    server-side Spring business bean as a Web-Service. On the client-side, Spring's
    `RmiProxyFactoryBean` presents the Web-Service's methods as a local interface.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的远程提供了基于RMI技术的暴露/访问Web服务的功能。在服务器端，Spring的`RmiServiceExporter` bean将服务器端Spring业务bean暴露为Web服务。在客户端，Spring的`RmiProxyFactoryBean`将Web服务的方法呈现为本地接口。
- en: In this recipe, we will learn to set up a Web-Service using RMI, and learn how
    the call to Web-Service through RMI is presented.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习使用RMI设置Web服务，并了解通过RMI呼叫Web服务的呈现方式。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有以下两个项目：
- en: '`LiveRestaurant_R-10.1` (for a server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.1`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-context-3.0.5.RELEASE.jar`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-context-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-10.1-Client` (for the client-side), with the following Maven
    dependencies:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.1-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-context-3.0.5.RELEASE.jar`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-context-3.0.5.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register the server-side service implementation within Spring's `RmiServiceExporter`
    in the server-side application context (`applicationContext.xml`) and set the
    port and service name.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`applicationContext.xml`）中注册服务器端服务实现在Spring的`RmiServiceExporter`中，并设置端口和服务名称。
- en: Register the local interface (same as server-side) within Spring's `RmiProxyFactoryBean`
    in the client-side application context (`applicationContext.xml`) and set the
    service's URL.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中，使用Spring的`RmiProxyFactoryBean`注册本地接口（与服务器端相同）并设置服务的URL。
- en: Add a Java class to load the server-side application context-file (in the class's
    `main` method) to set up the server.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个Java类来加载服务器端应用程序上下文文件（在类的`main`方法中）以设置服务器。
- en: Add a JUnit test case class on the client side that calls a Web-Service using
    the local interface.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端添加一个JUnit测试用例类，通过本地接口调用Web服务。
- en: Run the following command on `Liverestaurant_R-10.1:`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.1`上运行以下命令：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the following command on `Liverestaurant_R-10.1-Client:`
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.1-Client`上运行以下命令：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the client-side output:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`OrderServiceSetUp` is the class that loads the server-side application context
    and sets up the server to expose the server-side business service as a Web-Service.
    `OrderServiceClientTest` is the client-side test class that loads the client-side
    application context and calls the Web-Service methods through a client-side local
    interface that represents a remote business service.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceSetUp`是加载服务器端应用程序上下文并设置服务器以将服务器端业务服务暴露为Web服务的类。`OrderServiceClientTest`是客户端测试类，加载客户端应用程序上下文并通过代表远程业务服务的客户端本地接口调用Web服务方法。'
- en: 'The `OrderServiceImpl` is the service to be exposed through a Web-Service.
    In the server-side''s application context, within `org.springframework.remoting.rmi.RmiServiceExporter
    Bean, OrderService` is the name of the service that will be registered with the
    RMI registry. The service property is for passing the `RmiServiceExporter` and
    the bean instance. `serviceInterface` is the interface that represents the local
    business service remotely. Only those methods that are defined in this interface
    can be called remotely:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceImpl`是要通过Web服务公开的服务。在服务器端的应用程序上下文中，在`org.springframework.remoting.rmi.RmiServiceExporter`
    Bean中，`OrderService`是将在RMI注册表中注册的服务的名称。服务属性用于传递`RmiServiceExporter`和bean实例。`serviceInterface`是表示本地业务服务的接口。只有在此接口中定义的方法才能远程调用：'
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On the client side''s configuration file, `serviceUrl` is the URL address of
    the Web-Service and `serviceInterface` in the local interface that enables client
    calls to the server-side methods remotely:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端配置文件中，`serviceUrl`是Web服务的URL地址，`serviceInterface`是本地接口，使客户端可以远程调用服务器端的方法：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`OrderServiceClientTest` is the JUnit test case class that loads the application
    context and calls remote methods through the local interface:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceClientTest`是加载应用程序上下文并通过本地接口调用远程方法的JUnit测试用例类：'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting up a servlet-based Web-Service using Hessian/Burlap, exposing business
    beans
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hessian/Burlap设置基于servlet的Web服务，暴露业务bean
- en: '**Hessian and Burlap**, developed by Caucho ([http://hessian.caucho.com](http://hessian.caucho.com)),
    are lightweight HTTP-based remoting technologies. Even though both of them use
    the HTTP protocol to communicate, Hessian communicates using binary messages,
    while Burlap communicates using XML messages.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hessian和Burlap**，由Caucho开发（[http://hessian.caucho.com](http://hessian.caucho.com)），是轻量级基于HTTP的远程技术。尽管它们都使用HTTP协议进行通信，但Hessian使用二进制消息进行通信，而Burlap使用XML消息进行通信。'
- en: 'Spring''s remoting provides features to expose/access Web-Services based on
    these technologies. On the server side, Spring''s `ServiceExporter` bean exposes
    the server-side Spring business bean ( `OrderServiceImpl`) as a Web-Service:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的远程提供了基于这些技术的Web服务的暴露/访问功能。在服务器端，Spring的`ServiceExporter` bean将服务器端Spring业务bean（`OrderServiceImpl`）暴露为Web服务：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On the client-side, Spring''s `ProxyFactory` bean exposes remote interface
    through local client-side interface ( `OrderService`):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，Spring的`ProxyFactory` bean通过本地客户端接口（`OrderService`）暴露远程接口：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we have the following two projects:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有以下两个项目：
- en: '`LiveRestaurant_R-10.2` (for the server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.2`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-webmvc-3.0.5.RELEASE.jar`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-webmvc-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`hessian-3.1.5.jar`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hessian-3.1.5.jar`'
- en: '`LiveRestaurant_R-10.2-Client` (for the client-side), with the following Maven
    dependencies:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.2-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`hessian-3.1.5.jar`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hessian-3.1.5.jar`'
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to set up a servlet-based Web-Service using the Hessian
    service:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置基于servlet的Web服务，使用Hessian服务：
- en: 'Configure `DispatcherServlet` inside the `web.xml` file (URL: `http://<host>:<port>/<appcontext>/services`
    to be forwarded to this servlet).'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中配置`DispatcherServlet`（URL：`http://<host>:<port>/<appcontext>/services`将被转发到此servlet）。
- en: Register the server-side service interface within Spring's `HessianServiceExporter`
    in the server-side application context ( `applicationContext.xml`), and set service
    name and service interface.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文（`applicationContext.xml`）中注册服务器端服务接口，并设置服务名称和服务接口。
- en: Register the local interface (same as the server side) within Spring's `HessianProxyFactoryBean`
    in the client-side application context ( `applicationContext.xml`), and set service's
    URL.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中，使用Spring的`HessianProxyFactoryBean`注册本地接口（与服务器端相同），并设置服务的URL。
- en: Add a JUnit test case class in the client side that calls a Web-Service using
    the local interface
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端添加一个JUnit测试用例类，使用本地接口调用Web服务
- en: Run the following command on `Liverestaurant_R-10.2:`
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.2`上运行以下命令：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the following command on `Liverestaurant_R-10.2-Client:`
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.2-Client`上运行以下命令：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the client-side output, you will be able to see the success message of running
    the test case, as follows:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端输出中，您将能够看到运行测试用例的成功消息，如下所示：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Follow these steps to set up a servlet-based Web-Service using the Burlap service:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用Burlap服务设置基于servlet的Web服务：
- en: Modify the server-side service interface to Spring's `BurlapServiceExporter`
    in the server-side application context ( `applicationContext.xml`).
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务器端服务接口修改为Spring的`BurlapServiceExporter`，在服务器端应用程序上下文（`applicationContext.xml`）中。
- en: Modify the client-side application context ( `applicationContext.xml`) to Spring's
    `BurlapProxyFactoryBean`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将客户端应用程序上下文（`applicationContext.xml`）修改为Spring的`BurlapProxyFactoryBean`。
- en: Run the following command on `Liverestaurant_R-10.2:`
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.2`上运行以下命令：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the following command on `Liverestaurant_R-10.2-Client:`
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.2-Client`上运行以下命令：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the client-side output, you will be able to see the success message of a
    running test case, as follows:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端输出中，您将能够看到运行测试用例的成功消息，如下所示：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Liverestaurant_R-10.2` project is a server-side Web-Service that sets up
    a servlet-based Web-Service, using the burlap/hessian exporter from Spring's remoting.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.2`项目是一个服务器端Web服务，使用Spring远程的burlap/hessian出口商设置基于servlet的Web服务。'
- en: The `Liverestaurant_R-10.2-Client` project is a client-side test project that
    calls the burlap/hessian Web-Service, using the burlap/hessian client proxy from
    Spring's remoting.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.2-Client`项目是一个客户端测试项目，调用了Spring远程的burlap/hessian Web服务，使用了burlap/hessian客户端代理。'
- en: 'On the server side, `DiapatcherServlet` will forward all the requests using
    the URL pattern to `BurlapServiceExporter/ HessianServiceExporter` `(http://<hostaddress>/<context>/<services>)`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，`DiapatcherServlet`将使用URL模式将所有请求转发到`BurlapServiceExporter/HessianServiceExporter`（http://<hostaddress>/<context>/<services>）：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These exporters expose the internal local service implementation (`OrderServiceImpl`)
    as a Web-Service:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些出口商将内部本地服务实现（`OrderServiceImpl`）公开为Web服务：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On the client-side, `BurlapProxyFactoryBean/HessianProxyFactoryBean` is responsible
    for exposing remote methods to the client, using a local client-side service interface
    ( `OrderService`):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，`BurlapProxyFactoryBean/HessianProxyFactoryBean`负责使用本地客户端服务接口（`OrderService`）向客户端公开远程方法：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `OrderServiceClientTest` implementation is the same as described in the
    recipe *Setting up Web-Services using RMI*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceClientTest`的实现与食谱*使用RMI设置Web服务*中描述的相同。'
- en: See also...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Setting up a Web-Services using RMI*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用RMI设置Web服务*'
- en: Setting up Web-Services using JAX-WS
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JAX-WS设置Web服务
- en: '**JAX-RPC** was a standard that came with Java EE 1.4 to develop Web-Services,
    and has become less and less popular in recent years. JAX-WS 2.0 was introduced
    with Java EE 5 and is more flexible and annotation-based than JAX-RPC in biding
    concept. Here are some of the advantages of JAX-WS over JAX-RPC:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**JAX-RPC**是Java EE 1.4中附带的一个标准，用于开发Web服务，在近年来变得越来越不受欢迎。JAX-WS 2.0是在Java EE
    5中引入的，比JAX-RPC更灵活，基于注解的绑定概念。以下是JAX-WS相对于JAX-RPC的一些优势：'
- en: JAX-WS supports both message-oriented as well as **Remote Procedure Call (RPC)**
    Web-Services, while JAX-RPC supports only RPC
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-WS支持面向消息和**远程过程调用（RPC）**Web服务，而JAX-RPC仅支持RPC
- en: JAX-WS supports SOAP 1.2 and SOAP 1.1, but JAX-RPC supports SOAP 1.1
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-WS支持SOAP 1.2和SOAP 1.1，但JAX-RPC支持SOAP 1.1
- en: JAX-WS relies on the rich features of Java 5.0, while JAX-RPC works with Java
    1.4
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-WS依赖于Java 5.0的丰富功能，而JAX-RPC与Java 1.4一起工作
- en: JAX-WS uses the very powerful XML for Object mapping framework (uses JAXB) while
    JAX-RPC uses its own framework that appeared weak on complex data models
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-WS使用非常强大的XML对象映射框架（使用JAXB），而JAX-RPC使用自己的框架，对于复杂的数据模型显得薄弱
- en: 'Spring remoting provides feature to set up a JAX-WS Web-Service using java
    1.5+ features. For example here, the annotation `@WebService` causes Spring to
    detect and expose this service as a Web-Service, and `@WebMethod` causes the following
    method: `public OrderResponse placeOrder(..)`, to be called as a Web-Service method
    (placeOrder):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Spring远程提供了设置使用Java 1.5+功能的JAX-WS Web服务的功能。例如，在这里，注解`@WebService`会导致Spring检测并将此服务公开为Web服务，`@WebMethod`会导致以下方法：`public
    OrderResponse placeOrder(..)`，被调用为Web服务方法（placeOrder）：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this recipe, JDK's built-in HTTP server is used to set up the Web-Service
    (since Sun's `JDK 1.6.0_04`, JAX-WS can be integrated with the JDK's built-in
    HTTP server).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，使用JDK内置的HTTP服务器来设置Web服务（自从Sun的`JDK 1.6.0_04`以来，JAX-WS可以与JDK内置的HTTP服务器集成）。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install Java and Maven (SE runtime environment (build `jdk1.6.0_29))`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Java和Maven（SE运行时环境（构建`jdk1.6.0_29`））。
- en: 'In this recipe, we have the following two projects:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们有以下两个项目：
- en: '`LiveRestaurant_R-10.3` (for the server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.3`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-10.3-Client` (for the client-side), with the following Maven
    dependencies:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.3-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Annotate the business service class and its methods.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为业务服务类及其方法添加注释。
- en: Register the service in the application context file ( `applicationContext.xml`),
    then configure the `SimpleJaxWsServiceExporter` bean, and create a class to load
    the server-side application context (this sets up the server).
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序上下文文件（`applicationContext.xml`）中注册服务，然后配置`SimpleJaxWsServiceExporter` bean，并创建一个类来加载服务器端应用程序上下文（这将设置服务器）。
- en: Register the local interface (in the same way as you did for the server-side
    interface) within Spring's `.JaxWsPortProxyFactoryBean` in the client-side application
    context (`applicationContext.xml`), and set the service's URL.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册本地接口（与服务器端接口相同的方式），并设置服务的URL。
- en: Add a JUnit test case class in the client-side that calls the Web-Service using
    the local interface.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端添加一个JUnit测试用例类，该类使用本地接口调用Web服务。
- en: Run the following command on `Liverestaurant_R-10.3` and browse to see the WSDL
    file located at `http://localhost:9999/OrderService?wsdl:`
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.3`上运行以下命令，并浏览以查看位于`http://localhost:9999/OrderService?wsdl`的WSDL文件：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Run the following command on `Liverestaurant_R-10.3-Client:`
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.3-Client`上运行以下命令：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the client-side output, you will be able to see the success message of a
    running test case, as follows:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端输出中，您将能够看到运行测试用例的成功消息，如下所示：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Liverestaurant_R-10.3` project is a server-side Web-Service (by Spring
    remoting's exporter bean) that sets up a JAX-WS using DK's built-in HTTP server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.3`项目是一个服务器端Web服务（通过Spring远程的出口器bean），它使用DK内置的HTTP服务器设置了一个JAX-WS。'
- en: The `Liverestaurant_R-10.3-Client` project is a client-side test project that
    calls JAX-WS Web-Service using the client proxy from Spring remoting.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.3-Client`项目是一个客户端测试项目，它使用Spring远程的客户端代理调用JAX-WS Web服务。'
- en: 'On the server-side, `applicationContext.xml` scans and detects annotating tags
    in `OrderServiceImpl`. Then `SimpleJaxWsServiceExporter` exposes this business
    service as a Web-Service:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，`applicationContext.xml`扫描并检测`OrderServiceImpl`中的注释标签。然后，`SimpleJaxWsServiceExporter`将此业务服务公开为Web服务：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the service class, the annotations `@WebService` and `@WebMethod` cause
    Spring detects(by scanning), and expose(by `SimpleJaxWsServiceExporter)` this
    service class as a Web-Service and its method ( `placeOrder`) as a Web-Service
    method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务类中，注释`@WebService`和`@WebMethod`导致Spring检测（通过扫描），并通过`SimpleJaxWsServiceExporter`将此服务类公开为Web服务及其方法（`placeOrder`）公开为Web服务方法：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On the client side, `JaxWsPortProxyFactoryBean` is responsible for exposing
    remote methods to the client, using a local client-side interface. `WsdlDocumentUrl`
    is the Web-Service WSDL address, `portName` is the `portName` value in WSDL, `namespaceUri`
    is the `targetNameSpace` in WSDL, and `serviceInterface` is the local client-side
    service interface:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，`JaxWsPortProxyFactoryBean`负责将远程方法暴露给客户端，使用本地客户端接口。`WsdlDocumentUrl`是Web服务WSDL地址，`portName`是WSDL中的`portName`值，`namespaceUri`是WSDL中的`targetNameSpace`，`serviceInterface`是本地客户端服务接口：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `OrderServiceClientTest` implementation is the same as described in the
    recipe named *Setting up a Web-Services using RMI*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceClientTest`的实现与名为*使用RMI设置Web服务*的配方中描述的相同。'
- en: See also...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Setting up a Web-Services using RMI*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用RMI设置Web服务*'
- en: 'In this book:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中：
- en: '[Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building
    Clients for SOAP Web Services*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。构建SOAP Web服务的客户端"),*构建SOAP Web服务的客户端*'
- en: '*Creating a Web-Service client on HTTP transport*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*在HTTP传输上创建Web服务客户端*'
- en: Exposing servlet-based Web-Services using Apache CXF
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache CXF暴露基于servlet的Web服务
- en: '**Apache CXF** originated from a combination of the projects, namely: **Celtix**
    **(IONA Technologies)** and **XFire** (Codehaus), which are integrated into the
    **Apache software foundation**. CXF, by name, implies that it originates from
    the **Celtix** and **XFire** project names.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**Apache CXF**起源于以下项目的组合：**Celtix**（IONA Technologies）和**XFire**（Codehaus），它们被整合到**Apache软件基金会**中。CXF的名称意味着它起源于**Celtix**和**XFire**项目名称。'
- en: Apache CXF provides features to build and deploy Web-Services. The Apache CXF's
    recommended Web-Service configuration method (frontend or API) is JAX-WS 2.x.
    Apache CXF, which is not part of Spring's remoting, however, since it can use
    JAX-WS as its frontend, will be explained in this recipe.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Apache CXF提供了构建和部署Web服务的功能。Apache CXF推荐的Web服务配置方法（前端或API）是JAX-WS 2.x。Apache
    CXF并不是Spring的远程的一部分，但是，由于它可以使用JAX-WS作为其前端，因此将在本配方中进行解释。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install Java and Maven (SE Runtime Environment (build `jdk1.6.0_29))`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Java和Maven（SE Runtime Environment（构建`jdk1.6.0_29`））。
- en: 'In this recipe, we have the following two projects:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们有以下两个项目：
- en: '`LiveRestaurant_R-10.4` (for the server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.4`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`cxf-rt-frontend-jaxws-2.2.6.jar`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxf-rt-frontend-jaxws-2.2.6.jar`'
- en: '`cxf-rt-transports-http-2.2.6.jar`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxf-rt-transports-http-2.2.6.jar`'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`commons-logging-1.1.1.jar`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commons-logging-1.1.1.jar`'
- en: '`LiveRestaurant_R-10.4-Client` (for the client side), with the following Maven
    dependencies:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.4-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`cxf-rt-frontend-jaxws-2.2.6.jar`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxf-rt-frontend-jaxws-2.2.6.jar`'
- en: '`cxf-rt-transports-http-2.2.6.jar`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxf-rt-transports-http-2.2.6.jar`'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Annotate the business service class and methods (in the same way as you did
    for JAX-WS).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在业务服务类和方法上进行注释（与您为JAX-WS所做的方式相同）。
- en: 'Register the service in the application context file ( `applicationContext.xml`)
    and configure `CXFServlet` inside the `web.xml` file (URL: `http://<host>:<port>/`
    is to be forwarded to this servlet).'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序上下文文件（`applicationContext.xml`）中注册服务，并在`web.xml`文件中配置`CXFServlet`（URL：`http://<host>:<port>/`将被转发到此servlet）。
- en: Register the local interface (in the same way as you did for the server side)
    within Spring's `.JaxWsPortProxyFactoryBean`, in the client-side application context
    ( `applicationContext.xml`), and set the service's URL.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文（`applicationContext.xml`）中注册本地接口（与您为服务器端执行的方式相同），并设置服务的URL。
- en: Add a JUnit test case class in the client side, which calls the Web-Service
    using the local interface.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端添加一个JUnit测试用例类，使用本地接口调用Web服务。
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Liverestaurant_R-10.4` project is a server-side Web-Service that set up
    a CXF, using the JAX-WS API.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.4`项目是一个服务器端Web服务，它使用JAX-WS API设置了一个CXF。'
- en: The `Liverestaurant_R-10.4-Client` project is a client-side test project that
    calls JAX-WS Web-Service, using the client proxy from Spring's remoting.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.4-Client`项目是一个客户端测试项目，它使用Spring的远程调用从JAX-WS Web服务调用客户端代理。'
- en: 'On the server side, the configuration in `applicationContext.xml` detects annotating
    tags in `OrderServiceImpl`. Then `jaxws:endpoint` exposes this business service
    as a Web-Service:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，`applicationContext.xml`中的配置检测`OrderServiceImpl`中的注释标签。然后`jaxws:endpoint`将此业务服务公开为Web服务：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `OrderServiceImpl` explanation is the same as described in the recipe *Setting
    up Web-Services using JAX-WS*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceImpl`的解释与在*使用JAX-WS设置Web服务*中描述的相同。'
- en: 'On the client side, `JaxWsProxyFactoryBean` is responsible for exposing remote
    methods to the client using a local client-side interface. `address` is the Web-Service
    service address and `serviceInterface` is the local client-side service interface:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，`JaxWsProxyFactoryBean`负责使用本地客户端接口向客户端公开远程方法。`address`是Web服务的地址，`serviceInterface`是本地客户端服务接口：
- en: '[PRE27]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `OrderServiceClientTest` implementation is the same as described in the
    recipe *Setting up Web-Services using RMI*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceClientTest`的实现与在*使用RMI设置Web服务*中描述的相同。'
- en: See also...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: '*In this chapter:*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中：*'
- en: '*Setting up Web-Services using RMI*'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用RMI设置Web服务*'
- en: Exposing Web-Services using JMS as the underlying communication protocol
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JMS作为底层通信协议公开Web服务
- en: '**Java Message Service (JMS)** introduced by Java 2 and J2EE was founded by
    Sun Microsystems in 1999\. Systems using JMS are able to communicate in a synchronous
    or asynchronous mode, and are based on the point-to-point and publish-subscribe
    models.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java消息服务（JMS）**由Java 2和J2EE引入，由Sun Microsystems于1999年成立。使用JMS的系统能够以同步或异步模式进行通信，并且基于点对点和发布-订阅模型。'
- en: Spring remoting provides the facility to expose Web-Services using JMS as the
    underlying communication protocol. Spring's JMS remoting sends and receives messages
    on the same thread in the single-threaded and non-transactional session.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Spring远程提供了使用JMS作为底层通信协议公开Web服务的功能。Spring的JMS远程在单线程和非事务会话中在同一线程上发送和接收消息。
- en: However, for multi-threaded and transactional support for Web-Service on JMS,
    you can use Spring-WS on JMS protocol, which is based on Spring's JMS-based messaging.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于JMS上的Web服务的多线程和事务支持，您可以使用基于Spring的JMS协议的Spring-WS，该协议基于Spring的基于JMS的消息传递。
- en: In this recipe, `apache-activemq-5.4.2` is used to set up a JMS server, and
    default objects, created by this JMS server (`queue`, broker), are used by the
    projects.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用`apache-activemq-5.4.2`来设置一个JMS服务器，并且默认对象，由这个JMS服务器创建的（队列，代理），被项目使用。
- en: Getting ready
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Install Java and Maven (SE Runtime Environment (build `jdk1.6.0_29))`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Java和Maven（SE Runtime Environment（构建`jdk1.6.0_29`））。
- en: Install `apache-activemq-5.4.2`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`apache-activemq-5.4.2`。
- en: 'In this recipe, we have the following two projects:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有以下两个项目：
- en: '`LiveRestaurant_R-10.5` (for the server-side Web-Service), with the following
    Maven dependencies:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.5`（用于服务器端Web服务），具有以下Maven依赖项：'
- en: '`activemq-all-5.2.0.jar`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activemq-all-5.2.0.jar`'
- en: '`spring-jms-3.0.5.RELEASE.jar`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-jms-3.0.5.RELEASE.jar`'
- en: '`LiveRestaurant_R-10.5-Client` (for the client side), with the following Maven
    dependencies:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-10.5-Client`（用于客户端），具有以下Maven依赖项：'
- en: '`activemq-all-5.2.0.jar`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activemq-all-5.2.0.jar`'
- en: '`spring-jms-3.0.5.RELEASE.jar`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-jms-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register the business service within the `JmsInvokerServiceExporter` bean and
    register `SimpleMessageListenerContainer` using the `activemq` default objects
    (broker, `destination)` in the server-side application context file.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文文件中注册业务服务到`JmsInvokerServiceExporter` bean，并使用`activemq`默认对象（代理，`destination`）注册`SimpleMessageListenerContainer`。
- en: Create a Java class to load the application context and set up the server.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Java类来加载应用程序上下文并设置服务器。
- en: Register `JmsInvokerProxyFactoryBean` in the client-side application context
    file using the `activemq` default objects `(broker, destination)`
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文文件中使用`activemq`默认对象（代理，目的地）注册`JmsInvokerProxyFactoryBean`。
- en: Add a JUnit test case class in the client side that calls the Web-Service using
    the local interface.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端添加一个JUnit测试用例类，调用本地接口使用Web服务。
- en: Run `apache-activemq-5.4.2` (to set up the JMS server).
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`apache-activemq-5.4.2`（设置JMS服务器）。
- en: Run the following command on `Liverestaurant_R-10.5` and browse to see the WSDL
    file located at `http://localhost:9999/OrderService?wsdl:`
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.5`上运行以下命令并浏览以查看位于`http://localhost:9999/OrderService?wsdl`的WSDL文件：
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run the following command on `Liverestaurant_R-10.5-Client:`
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-10.5-Client`上运行以下命令：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the client-side output, you will be able to see a success message of a running
    test case.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端输出中，您将能够看到运行测试用例的成功消息。
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Liverestaurant_R-10.5` project is a server-side Web-Service that sets up
    a Web-Service by listening on a JMS queue.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.5`项目是一个服务器端Web服务，它通过监听JMS队列设置了一个Web服务。'
- en: The `Liverestaurant_R-10.5-Client` project is a client-side test project that
    sends JMS messages to a JMS queue.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-10.5-Client`项目是一个客户端测试项目，它向JMS队列发送JMS消息。'
- en: 'On the server side, the class `OrderServiceSetUp` loads `applicationContext.xml`
    and creates a `messageListener` in a container (using `SimpleMessageListenerContainer)`
    that waits to listen for a message at a specific destination ( `requestQueue`).
    As soon as a message arrives, it calls the method on the business class ( `OrderServiceImpl`)
    through Spring''s remoting class (`JmsInvokerServiceExporter`):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，`OrderServiceSetUp` 类加载 `applicationContext.xml` 并在容器中创建一个 `messageListener`（使用
    `SimpleMessageListenerContainer`），等待在特定目的地（`requestQueue`）监听消息。一旦消息到达，它通过 Spring
    的远程调用类（`JmsInvokerServiceExporter`）调用业务类（`OrderServiceImpl`）的方法。
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'On the client side, `JmsInvokerProxyFactory` is responsible for exposing remote
    methods to the client, using a local client-side interface (OrderService). When
    the client calls the method `OrderService, JmsInvokerProxyFactory` send a JMS
    message to the queue (requestQueue), which is the queue the server is listening
    to:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，`JmsInvokerProxyFactory` 负责使用本地客户端接口（OrderService）向客户端公开远程方法。当客户端调用 `OrderService`
    方法时，`JmsInvokerProxyFactory` 会向队列（requestQueue）发送一个 JMS 消息，这是服务器正在监听的队列：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
