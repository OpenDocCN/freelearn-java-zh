- en: A Few Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些基础知识
- en: As the world has moved into the big data era, collecting and dealing with data
    alone has become the main part of most of our web applications, and web services,
    too, as web services deal only with data, not the other parts of the user experience,
    look, and feel. Even though user experience is very important for all web applications,
    web services play a major role in dealing with data by consuming services from
    the client side.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着世界进入大数据时代，收集和处理数据成为大多数Web应用程序的主要部分，Web服务也是如此，因为Web服务只处理数据，而不处理用户体验、外观和感觉的其他部分。尽管用户体验对所有Web应用程序都非常重要，但Web服务通过从客户端消费服务在处理数据方面起着重要作用。
- en: In the early days of web services, **Simple Object Access Protocol** (**SOAP**)
    was the default choice for all backend developers who dealt with web service consumption.
    SOAP was mainly used in HTTP and **Simple Mail Transfer Protocol** (**SMTP**)
    for message transmission across the same or different platforms. When there was
    no **JavaScript Object Notation** (**JSON**) format available for web services,
    XML used to be the only available format SOAP could use for the web service consumption.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web服务的早期，**简单对象访问协议**（**SOAP**）是所有后端开发人员的默认选择，他们处理Web服务消费。SOAP主要用于HTTP和**简单邮件传输协议**（**SMTP**）在相同或不同平台上进行消息传输。当没有**JavaScript对象表示**（**JSON**）格式可用于Web服务时，XML曾是SOAP可用于Web服务消费的唯一格式。
- en: However, in the JSON era, **Representational State Transfer** (**REST**) started
    dominating web service based applications, as it supports multiple formats, including
    JSON, XML, and other formats. REST is simpler than SOAP, and the REST standards
    are easy to implement and consume. Also, REST is lightweight as compared to SOAP.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在JSON时代，**表述性状态转移**（**REST**）开始主导基于Web服务的应用程序，因为它支持多种格式，包括JSON、XML和其他格式。REST比SOAP更简单，REST标准易于实现和消费。此外，与SOAP相比，REST更轻量级。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: REST—a basic understanding
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST——基本理解
- en: Reactive programming and its basics, including the benefits of Reactive programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式编程及其基础知识，包括响应式编程的好处
- en: Spring 5 basics with Reactive programming
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用响应式编程的Spring 5基础知识
- en: A sample RESTful web service that will be used as a base for the rest of the
    book
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用作本书其余部分基础的示例RESTful Web服务
- en: REST – a basic understanding
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST——基本理解
- en: Contrary to popular belief, REST is not a protocol, but an architectural principle
    for managing state information. It's mainly used in web applications. REST was
    introduced by Roy Fielding to overcome implementation difficulties in SOAP. Roy's
    doctoral dissertation made for an easy way to retrieve data, regardless of the
    platform used. You will see all the components of RESTful web services in the
    following sections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与流行观念相反，REST不是一种协议，而是一种管理状态信息的架构原则。它主要用于Web应用程序。REST是由Roy Fielding引入的，以克服SOAP中的实现困难。Roy的博士论文为检索数据提供了一种简单的方法，而不管使用的平台是什么。您将在以下部分中看到RESTful
    Web服务的所有组件。
- en: Uniform interface
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统一接口
- en: In REST principles, all resources are identified by the **Uniform Resource Identifier**
    (**URI**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST原则中，所有资源都由**统一资源标识符**（**URI**）标识。
- en: HTTP REST resources are represented in some media types, such as XML, JSON,
    and RDF. Also, RESTful resources are self-descriptive, which means enough information
    is given to describe how to process the request.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP REST资源以XML、JSON和RDF等媒体类型表示。此外，RESTful资源是自描述的，这意味着提供了足够的信息来描述如何处理请求。
- en: In another REST principle, the clients interact with servers through hypermedia,
    which is dynamically provided by the servers. Other than endpoints, clients don't
    need to know how to interact with RESTful services. This principle is referred
    to as **Hypermedia as the Engine of Application State** (**HATEOAS**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个REST原则中，客户端通过服务器动态提供的超媒体进行交互。除了端点，客户端不需要知道如何与RESTful服务进行交互。这个原则被称为**超媒体作为应用状态的引擎**（**HATEOAS**）。
- en: Client and server
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端和服务器
- en: By separating REST entities such as the client and server, we can reduce the
    complexity of REST principles, which will show clear boundaries between server
    and client. This decoupling will help developers concentrate on the client and
    server independently. Also, it will help to manage different roles for the client
    and server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分离REST实体，如客户端和服务器，我们可以减少REST原则的复杂性，这将显示服务器和客户端之间的明确边界。这种解耦将有助于开发人员独立地专注于客户端和服务器。此外，它将有助于管理客户端和服务器的不同角色。
- en: Stateless
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无状态
- en: In REST principles, the server will not keep any state about the client session
    on the server side; hence, it's stateless. If two calls are made to the server
    from a single client, the server will not identify whether both the calls are
    from the same client or not. As far as the server knows, every request is independent
    and new. Based on the URL, HTTP headers, and request body, including the parameters,
    the operation might be changed on the server side.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST原则中，服务器不会在服务器端保留有关客户端会话的任何状态；因此，它是无状态的。如果从单个客户端向服务器发出两个调用，服务器将不会识别这两个调用是否来自同一个客户端。就服务器而言，每个请求都是独立的和新的。根据URL、HTTP标头和请求体，包括参数，操作可能会在服务器端发生变化。
- en: Cacheable
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可缓存的
- en: With RESTful web services, a client can cache any response coming from the server.
    The server can mention how, and for how long, it can cache the responses. With
    the caching option, a client can use the responses instead of contacting the server
    again. Also, caching will improve scalability and performance by avoiding client-server
    interactions all the time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RESTful Web服务，客户端可以缓存来自服务器的任何响应。服务器可以说明如何以及多长时间可以缓存响应。通过缓存选项，客户端可以使用响应而不是再次联系服务器。此外，缓存将通过避免客户端-服务器交互来提高可伸缩性和性能。
- en: This principle has significant advantages for scalability. Caching techniques
    will be discussed in [Chapter 8](273a0f3d-e4f6-4675-9144-3b93333d66ec.xhtml),
    *Performance*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则对可扩展性有显著的优势。缓存技术将在[第8章](273a0f3d-e4f6-4675-9144-3b93333d66ec.xhtml) *性能*中讨论。
- en: Since REST typically leverages HTTP, it inherits all the caching properties
    that HTTP offers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于REST通常利用HTTP，它继承了HTTP提供的所有缓存属性。
- en: Layered system
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层系统
- en: By providing the layered system, a server can hide its identity. By doing this,
    clients won't know which server they are dealing with. This policy gives more
    security control by providing intermediate servers and supports the load-balancing
    feature, too. Also, intermediate servers can improve scalability and performance
    through load-balancing and shared caches.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供分层系统，服务器可以隐藏其身份。通过这样做，客户端将不知道他们正在处理哪个服务器。这个策略通过提供中间服务器和支持负载平衡功能来提供更多的安全控制。此外，中间服务器可以通过负载平衡和共享缓存来提高可扩展性和性能。
- en: Code on demand (COD)
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按需代码（COD）
- en: '**Code on demand** (**COD**) is considered an optional principle. Servers can
    extend the functionality of clients by transferring executable code. For example,
    JavaScript can be provided to web-based clients to customize the functionality.
    As code on demand reduces the visibility of the client side, this constraint is
    optional. Also not all APIs need this feature.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**按需代码**（**COD**）被认为是一个可选的原则。服务器可以通过传输可执行代码来扩展客户端的功能。例如，可以向基于Web的客户端提供JavaScript以自定义功能。由于按需代码减少了客户端的可见性，这个约束是可选的。也不是所有的API都需要这个功能。'
- en: More on REST
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于REST的内容
- en: In web applications, REST is typically used over HTTP. REST doesn't need to
    be tied to any specific protocol. In HTTP REST, we mainly use the `GET`, `POST`,
    `PUT`, and `DELETE` methods to change the state of the resources we access. Other
    HTTP methods, such as `OPTIONS`, `HEAD`, `CONNECT`, and `TRACE`, can be used for
    more advanced operations, for example, for caching and debugging purposes. Most
    servers have disabled advanced methods for security and simplicity reasons; however,
    you can enable them by adjusting the server configuration files. As JSON is used
    as a primary media type for major applications, we also use only the JSON media
    type for our web service calls.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，REST通常是通过HTTP使用的。REST不需要绑定到任何特定的协议。在HTTP REST中，我们主要使用`GET`、`POST`、`PUT`和`DELETE`方法来改变我们访问的资源的状态。其他HTTP方法，如`OPTIONS`、`HEAD`、`CONNECT`和`TRACE`，可以用于更高级的操作，例如用于缓存和调试目的。大多数服务器出于安全和简单性的原因已禁用了高级方法；但是，您可以通过调整服务器配置文件来启用它们。由于JSON被用作主要的媒体类型，我们在Web服务调用中也只使用JSON媒体类型。
- en: Imperative and Reactive programming
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令式和响应式编程
- en: 'Let''s see a small comparison between Imperative programming and Reactive programming:
    *x = y + z.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下命令式编程和响应式编程之间的小比较：*x = y + z*。
- en: In the preceding expression, assume *y = 10* and *z = 15*. In this case, the
    *x* value would be *25*. The value of *x* would be assigned at the time of the
    expression *x = y + z*. The value of *x* will never change after this expression.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的表达式中，假设*y = 10*和*z = 15*。在这种情况下，*x*的值将是*25*。在表达式*x = y + z*的时候，*x*的值将被分配。在这个表达式之后，*x*的值将永远不会改变。
- en: This is perfectly alright in the traditional programming world. However, we
    might need a scenario where we should be able to follow up *x* when we change
    the value of *y* or *z*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统编程世界中这是完全可以的。然而，我们可能需要一个场景，在这个场景中我们应该能够在改变*y*或*z*的值时跟进*x*。
- en: 'Our new scenario based values are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新场景基于以下值：
- en: When *y = 20* and *z = 15,* then *x = 35*
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当*y = 20*和*z = 15*时，*x = 35*
- en: When *y = 20* and *z = 25,* then *x = 45*
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当*y = 20*和*z = 25*时，*x = 45*
- en: The preceding scenario is not possible in Imperative programming, which we regularly
    use in our daily programming. But in some cases, we might need the value of *x*
    to be updated, corresponding to the change in *y* or z. Reactive programming is
    the perfect solution for this scenario. In Reactive programming, the value of
    *x* would automatically be updated, corresponding to the change in *y* or *z*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在日常编程中，我们通常使用的命令式编程中不可能出现上述情景。但在某些情况下，我们可能需要根据*y*或*z*的变化更新*x*的值。Reactive编程是这种情况的完美解决方案。在Reactive编程中，*x*的值将会自动更新，以响应*y*或*z*的变化。
- en: Spreadsheet reference cells are the best example of Reactive programming. If
    a cell value changes, the referred cell value will be updated automatically. Another
    example can be found in a Model-View-Controller architecture, Reactive programming
    can automatically update the View, which is attached to the Model.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格引用单元格是Reactive编程的最佳例子。如果一个单元格的值改变，被引用的单元格的值将自动更新。另一个例子可以在模型-视图-控制器架构中找到，Reactive编程可以自动更新与模型相关联的视图。
- en: Reactive programming follows the Observer pattern to manipulate and transform
    the stream of data where the Publisher (observable) emits the items based on the
    Subscriber's need. As the Publisher emits the item, the Subscriber consumes those
    emitted items from the Publisher. Unlike the iterator pulling the items, here,
    the Publisher is pushing the items to the Subscriber.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Reactive编程遵循观察者模式来操作和转换数据流，其中发布者（可观察者）根据订阅者的需求发出项目。当发布者发出项目时，订阅者从发布者那里消耗这些发出的项目。与迭代器拉取项目不同，在这里，发布者将项目推送给订阅者。
- en: As Reactive is a part of non-blocking architecture, it will be useful when we
    scale the application. Also, in non-blocking architecture, everything is considered
    as an event stream.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Reactive是非阻塞架构的一部分，当我们扩展应用程序时它将会很有用。此外，在非阻塞架构中，一切都被视为事件流。
- en: We will discuss more about Reactive in Java and Spring later in this chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论有关Java和Spring中的Reactive的更多内容。
- en: Reactive Streams
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reactive Streams
- en: Reactive Streams are all about processing an asynchronous stream of data items,
    where applications react to data items as they receive them. This model is more
    memory-efficient, as it doesn't rely on any in-memory data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Reactive Streams主要是处理异步数据流的数据项，应用程序在接收到数据项时对其做出反应。这种模型更节省内存，因为它不依赖于任何内存中的数据。
- en: 'Reactive Streams have four main components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式流有四个主要组件：
- en: Publisher.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布者。
- en: Subscriber.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅者。
- en: Subscription.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅。
- en: Processor.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理器。
- en: The Publisher publishes a stream of data, to which the Subscriber is asynchronously
    subscribed. The Processor transforms the data stream without the need for changing
    the Publisher or the Subscriber. The Processor (or multiple Processors) sits between
    the Publisher and the Subscriber to transform one stream of data to another.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 发布者发布数据流，订阅者异步订阅该数据流。处理器在不需要改变发布者或订阅者的情况下转换数据流。处理器（或多个处理器）位于发布者和订阅者之间，将一个数据流转换为另一个数据流。
- en: Benefits of Reactive programming
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式编程的好处
- en: 'The Reactive Streams approach is supported by engineers at Netflix, Pivotal,
    Twitter, Oracle, and TypeSafe. Especially, TypeSafe contributed more to Reactive
    Streams. Even Netflix engineers say, in their own words:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix、Pivotal、Twitter、Oracle和TypeSafe的工程师支持响应式流方法。特别是TypeSafe对响应式流做出了更多贡献。甚至Netflix工程师用他们自己的话说：
- en: “Reactive programming with RxJava has enabled Netflix developers to leverage
    server-side concurrency without the typical thread-safety and synchronization
    concerns.”
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “使用RxJava进行响应式编程使Netflix开发人员能够利用服务器端并发，而无需担心典型的线程安全和同步问题。”
- en: 'The following are the benefits of Reactive programming:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是响应式编程的好处：
- en: Focuses on business logic
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于业务逻辑
- en: Stream processing causes memory efficiency
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流处理导致内存效率
- en: Overcomes low-level threading, synchronization, and concurrency issues
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克服低级线程、同步和并发问题
- en: Reactive principles are used in real-time cases such as live database queries,
    big data, real-time analytics, HTTP/2, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式原则在实时案例中得到应用，例如实时数据库查询、大数据、实时分析、HTTP/2等。
- en: Reactive programming in Java and Spring 5
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java和Spring 5中的响应式编程
- en: RxJava was introduced by Netflix engineers to support the Reactive model in
    Java 8, with the bridge to Reactive Streams. However, Java started supporting
    the Reactive model with Java 9, and Reactive Streams have been incorporated into
    the JDK as `java.util.concurrent.Flow` in Java 9.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix工程师引入了RxJava，以支持Java 8中的响应式模型，并与Reactive Streams进行了桥接。然而，Java从Java 9开始支持响应式模型，并且在Java
    9中将Reactive Streams合并到了JDK中的`java.util.concurrent.Flow`中。
- en: Also, Pivotal introduced the Reactor framework, which is built directly on Reactive
    Streams, avoiding the external bridge to Reactive Streams. A Reactor is considered
    as a *4^(th) generation* library.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Pivotal推出了Reactor框架，该框架直接构建在Reactive Streams上，避免了对Reactive Streams的外部桥接。Reactor被认为是第四代库。
- en: Finally, Spring Framework 5.0 added Reactive features built into it, including
    the tools for HTTP servers and clients. Spring users find annotations and controllers
    handy when they deal with HTTP requests, especially dispatching Reactive requests
    and back pressure concerns to the framework.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Spring Framework 5.0添加了内置的响应式功能，包括用于HTTP服务器和客户端的工具。Spring用户在处理HTTP请求时，特别是将响应式请求和背压问题分派给框架时，会发现注解和控制器非常方便。
- en: The Reactive model seems to be efficient in resource utilization, as it can
    process higher loads with fewer threads. However, the Reactive model may not be
    the right solution for all problems. In some cases, Reactor may make things worse
    if we use it in the wrong section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式模型似乎在资源利用效率上是高效的，因为它可以使用更少的线程处理更高的负载。然而，响应式模型可能并不是所有问题的正确解决方案。在某些情况下，如果我们在错误的部分使用Reactor，它可能会使情况变得更糟。
- en: Our RESTful web service architecture
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的RESTful Web服务架构
- en: As we assume that our readers are familiar with Spring Framework, we will directly
    focus on the example service that we are going to build.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们假设读者熟悉Spring Framework，我们将直接关注我们将要构建的示例服务。
- en: In this book, we are going to build a **Ticket Management System**. To give
    a clear picture of the Ticket Management System and how it's going to be used,
    we will come up with a scenario.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将构建一个**工单管理系统**。为了清晰地描述工单管理系统及其使用方式，我们将提出一个场景。
- en: Let's assume that we have a banking web application used by our customers, Peter
    and Kevin, and we have Sammy, our admin, and Chloe, the **customer service representative**
    (**CSR**), to help in case of any banking application issues.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个银行网站应用，由我们的客户Peter和Kevin使用，我们有Sammy，我们的管理员，以及Chloe，**客户服务代表**（CSR），在任何银行应用问题的情况下提供帮助。
- en: If Kevin/Peter is facing a problem in the web application, they can create a
    ticket in our Ticket Management System. This ticket will be handled by the admin
    and sent to CSR, who handles the ticket.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Kevin/Peter在Web应用中遇到问题，他们可以在我们的工单管理系统中创建一个工单。这个工单将由管理员处理，并发送给处理工单的CSR。
- en: The CSR gets more information from the user and forwards the information to
    the technical team. Once the CSR resolves the issue, they can close the issue.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: CSR从用户那里获取更多信息，并将信息转发给技术团队。一旦CSR解决了问题，他们就可以关闭问题。
- en: 'In our Ticket Management System we will be using the following components:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工单管理系统中，我们将使用以下组件：
- en: '| **Ticket** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **工单** |'
- en: '`ticketid`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`工单ID`'
- en: '`creatorid`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`创建者ID`'
- en: '`createdat`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`创建时间`'
- en: '`content`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`内容`'
- en: '`severity` (minor, normal, major, critical)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`严重程度`（轻微，正常，重要，严重）'
- en: '`status` (open, in progress, resolved, reopened)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`状态`（打开，进行中，已解决，重新打开）'
- en: '|'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **User** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **用户** |'
- en: '`userid`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用户ID`'
- en: '`username`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用户名`'
- en: '`usertype` (admin, general user, CSR)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用户类型`（管理员，普通用户，CSR）'
- en: '|'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In this Ticket Management System, we will focus on:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个工单管理系统中，我们将专注于：
- en: Creating a ticket by the user.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户创建一个工单。
- en: Updating the ticket by the user.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户更新工单。
- en: Updating the ticket status by the admin.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员更新工单状态。
- en: Updating the ticket status by the CSR.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSR更新工单状态。
- en: Deleting the ticket by the user and admin.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户和管理员删除工单。
- en: In the initial chapters we will discuss User management to keep the business
    logic simple when we deal with topics such as AOP, Spring Security, and WebFlux.
    However, we will talk about the Ticket Management System in [Chapter 13](a2069669-6d96-4048-9db2-10a166693afb.xhtml),
    *Ticket Management - Advanced CRUD* and implement all the business requirements
    that we mentioned earlier. In [Chapter 13](a2069669-6d96-4048-9db2-10a166693afb.xhtml),
    *Ticket Management - Advanced CRUD* you will use all the advanced techniques employed
    in other chapters to finish our business requirements.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始章节中，当我们涉及诸如AOP、Spring Security和WebFlux等主题时，我们将讨论用户管理，以保持业务逻辑的简单性。然而，在[第13章](a2069669-6d96-4048-9db2-10a166693afb.xhtml)中，*票务管理-高级CRUD*，我们将讨论票务管理系统，并实现我们之前提到的所有业务需求。在[第13章](a2069669-6d96-4048-9db2-10a166693afb.xhtml)中，*票务管理-高级CRUD*，您将使用其他章节中使用的所有高级技术来完成我们的业务需求。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So far, we have gone through the basics of REST and Reactive programming and
    the necessity for Reactive Streams. We have gone through Spring 5 with Reactor
    support. Also, we have defined the business sample and architecture that will
    be used in the rest of the book.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了REST和响应式编程的基础知识，以及响应式流的必要性。我们已经学习了带有Reactor支持的Spring 5。此外，我们已经定义了本书其余部分将使用的业务示例和架构。
- en: In the next chapter, we will talk about simple project creation with Maven and
    the simple REST API. Also, we will discuss Maven file structure and dependencies,
    including samples.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论使用Maven进行简单项目创建以及简单的REST API。此外，我们将讨论Maven文件结构和依赖项，包括示例。
