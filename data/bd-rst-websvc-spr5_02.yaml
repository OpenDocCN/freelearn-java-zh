- en: Building RESTful Web Services in Spring 5 with Maven
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven在Spring 5中构建RESTful Web服务
- en: 'In this chapter, we will build a simple REST web service that returns `Aloha`.
    Before moving to the implementation, we will focus on what components are involved
    in creating a RESTful web service. In this chapter, we will cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的REST Web服务，返回`Aloha`。在进行实现之前，我们将专注于创建RESTful Web服务所涉及的组件。在本章中，我们将涵盖以下主题：
- en: Building a RESTful web service with Apache Maven
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apache Maven构建RESTful Web服务
- en: Using the Eclipse IDE or STS for Spring REST project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse IDE或STS进行Spring REST项目
- en: Creating a new project in Eclipse/STS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse/STS中创建一个新项目
- en: Running and testing our REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行和测试我们的REST API
- en: Apache Maven
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Maven
- en: While building the Jakarta Turbine project, engineers found that managing the
    Ant build tool is hard. They needed a simple tool to build the projects with a
    clear definition that is easy to understand. Their attempt shaped Apache Maven,
    and the JARs can be shared across several projects in the central place.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建Jakarta Turbine项目时，工程师们发现管理Ant构建工具很困难。他们需要一个简单的工具来构建具有清晰定义且易于理解的项目。他们的尝试塑造了Apache
    Maven，并且JAR可以在中心位置跨多个项目共享。
- en: More information on Maven can be found at [https://maven.apache.org](https://maven.apache.org).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Maven的更多信息可以在[https://maven.apache.org](https://maven.apache.org)找到。
- en: Apache Maven was created to support Java project and build management. Also,
    its simplified definition makes Java developers' lives easy while building and
    deploying Java projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Maven是为了支持Java项目和构建管理而创建的。此外，它的简化定义使Java开发人员在构建和部署Java项目时更加轻松。
- en: 'At the time of writing this book, Apache Maven''s latest version is 3.5.0,
    and it can be downloaded from their website: [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Apache Maven的最新版本是3.5.0，可以从他们的网站下载：[https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)。
- en: Maven 3.3+ requires JDK 1.7 or above. So please make sure of your Java version
    when you use Maven 3.3.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 3.3+需要JDK 1.7或更高版本。因此，请确保在使用Maven 3.3时检查您的Java版本。
- en: You can get the binary or source ZIP files (or whatever the desired format for
    your operating system is) from the preceding link and install Maven on to your
    computer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从上述链接获取二进制或源ZIP文件（或者您的操作系统所需的任何格式），并将Maven安装到您的计算机上。
- en: 'Maven installation can be verified by entering the `mvn --version` command
    in your console/command prompt. If it is installed successfully, it will show
    the following details (only on a Windows operating system):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在控制台/命令提示符中输入`mvn --version`命令来验证Maven的安装。如果安装成功，它将显示以下细节（仅适用于Windows操作系统）：
- en: '![](img/51a26efb-2c2f-4b4a-bb44-8f65723646c4.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51a26efb-2c2f-4b4a-bb44-8f65723646c4.png)'
- en: 'For clarity, the following image shows a Maven version check performed on Ubuntu:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，以下图片显示了在Ubuntu上执行的Maven版本检查：
- en: '![](img/3c8368cf-d7f7-4308-8453-863ffa94a82b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c8368cf-d7f7-4308-8453-863ffa94a82b.png)'
- en: Creating a project with Maven
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven创建项目
- en: 'Once Maven is installed and verified, you will have to create a project with
    Maven. This you can do in the command prompt itself. Just run the following command
    in your desired location, then the project will be created automatically:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和验证Maven后，您将需要使用Maven创建一个项目。这可以在命令提示符中完成。只需在所需位置运行以下命令，然后项目将自动创建：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you face any problems while creating the project, use the `–X` option in
    Maven, shown as follows. It will point out the location where the error has occurred:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建项目时遇到任何问题，请在Maven中使用`-X`选项，如下所示。它将指出发生错误的位置：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the following points, we go through each part of the command that is used
    to create a Maven project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下几点中，我们将逐个讨论用于创建Maven项目的命令的每个部分：
- en: '`archetype:generate`: Use this if the goal is to create a new project on a
    specified archetype, in our case `maven-archetype-quickstart`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archetype:generate`：如果目标是在指定的原型上创建一个新项目，可以使用这个命令，例如`maven-archetype-quickstart`。'
- en: '`-Dgroupid=com.packtpub.restapp`: This part defines a project with a group
    identifier such as a package.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Dgroupid=com.packtpub.restapp`：这部分定义了一个带有组标识符的项目，例如一个包。'
- en: '`-DartifcatId=ticket-management`: This part defines our project name (folder).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DartifcatId=ticket-management`：这部分定义了我们的项目名称（文件夹）。'
- en: '`-DarchetypeArtifactId=maven-archetype-quickstart`: This part will be used
    to select the archetype on the `archetype:generate` goal.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DarchetypeArtifactId=maven-archetype-quickstart`：这部分将用于在`archetype:generate`目标上选择原型。'
- en: '`-Dversion=1.0.0-SNAPSHOT`: The project version can be mentioned in this part.
    It will be helpful when you deploy the project and distribute it.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Dversion=1.0.0-SNAPSHOT`：项目版本可以在这部分中提及。在部署和分发项目时会很有帮助。'
- en: Viewing a POM file after creating a project
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在创建项目后查看POM文件
- en: 'Once we have created a project, we can see the `pom.xml` file in our project
    folder. It will have all the basic details, such as `groupId`, `name`, and so
    on. Also, you can see the default `Junit` dependency under the `dependencies`
    configuration part:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，我们可以在项目文件夹中看到`pom.xml`文件。它将包含所有基本细节，例如`groupId`，`name`等。此外，您可以在`dependencies`配置部分下看到默认的`Junit`依赖项：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Maven artifacts belong to a group (typically `com.organization.product`), and
    must have a unique identifier.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Maven构件属于一个组（通常是`com.organization.product`），必须有一个唯一的标识符。
- en: In the preceding POM file, the `SNAPSHOT` suffix in `version` tells Maven that
    this project is still in development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述POM文件中，`version`中的`SNAPSHOT`后缀告诉Maven这个项目仍在开发中。
- en: POM file structure
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POM文件结构
- en: 'Here we will check the **Project Object Model** (**POM**) file structure, looking
    into how it''s organized and what parts are available inside the `pom.xml` file.
    The POM file can have `properties`, `dependencies`, `build`, and `profiles`. However,
    these parts will vary for different projects. We might not need some of them in
    other projects:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将检查**项目对象模型**（**POM**）文件结构，看看它是如何组织的，`pom.xml`文件中有哪些部分可用。POM文件可以有`properties`，`dependencies`，`build`和`profiles`。然而，这些部分对于不同的项目会有所不同。在其他项目中，我们可能不需要其中的一些部分：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Understanding POM dependencies
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解POM依赖关系
- en: Maven helps manage the third-party libraries in your operating system. In the
    olden days, you might have had to copy each third-party library into your project
    manually. This could be a big problem when you had more than one project. Maven
    avoids this third-party libraries management confusion by keeping all libraries
    in a central place for each operating system. Regardless of your project count,
    the third-party libraries will be downloaded to the system only once.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Maven帮助管理你操作系统中的第三方库。在过去，你可能不得不手动将每个第三方库复制到你的项目中。当你有多个项目时，这可能是一个大问题。Maven通过将所有库保存在每个操作系统的一个中央位置来避免这种第三方库管理混乱。无论你的项目数量如何，第三方库都只会下载到系统一次。
- en: Maven repositories can be found at [https://mvnrepository.com/](https://mvnrepository.com/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Maven仓库可以在[https://mvnrepository.com/](https://mvnrepository.com/)找到。
- en: 'Every operating system has their own local Maven repository location:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统都有自己的本地Maven仓库位置：
- en: 'Windows Maven central repository location:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Maven中央仓库位置：
- en: '`C:\Users\<username>\.m2\repository\`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\<username>\.m2\repository\`'
- en: 'Linux Maven central repository location:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux Maven中央仓库位置：
- en: '`/home/<username>/.m2/repository`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`/home/<username>/.m2/repository`'
- en: 'MAC Maven central repository location:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MAC Maven中央仓库位置：
- en: '`/Users/<username>/.m2/repository`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Users/<username>/.m2/repository`'
- en: Whenever you add a third-party library to your POM dependency, the specified
    JAR and related files will be copied into the location `\.m2\repository`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你向你的POM依赖项中添加第三方库时，指定的JAR和相关文件将被复制到`\.m2\repository`的位置。
- en: We will learn about the Maven dependency structure by looking at one sample.
    Let's assume that we need to use Log4j version 2.9.1 in our application. In order
    to use it, we need to add the dependency to our project. We can search the `log4j-core`
    dependency from [https://mvnrepository.com](https://mvnrepository.com) and copy
    the dependency into our POM under `dependencies`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过查看一个示例来了解Maven依赖结构。假设我们需要在我们的应用程序中使用Log4j版本2.9.1。为了使用它，我们需要将依赖项添加到我们的项目中。我们可以从[https://mvnrepository.com](https://mvnrepository.com)搜索`log4j-core`依赖项，并将依赖项复制到我们的POM下的`dependencies`中。
- en: 'A sample Maven dependency is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例的Maven依赖如下：
- en: '![](img/25dd845e-90ef-497b-bcea-fca8e661adf2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25dd845e-90ef-497b-bcea-fca8e661adf2.png)'
- en: Adding Log4j 2.9.1 to POM dependency
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Log4j 2.9.1添加到POM依赖项
- en: 'Once the dependency is added and the project is updated on your IDE, the corresponding
    library will be copied into `\.m2\repository`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦依赖项被添加并且项目在你的IDE上更新，相应的库将被复制到`\.m2\repository`中：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding dependency, `log4j-core`, will be added under POM. In this dependency,
    you can see `groupId`, `artifactId`, and `version` explained as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的依赖项`log4j-core`将被添加到POM下。在这个依赖项中，你可以看到`groupId`，`artifactId`和`version`的解释如下：
- en: '`groupId` is used to make the JAR/WAR file unique across all projects. As it
    will be used globally, Maven recommends that the package names follow the same
    rules as that of domain names with subgroups. A sample `groupId` is `com.google.appengine`.
    However, some third-party dependencies don''t follow the `groupId` package-naming
    policy. Check the following sample:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`用于使JAR/WAR文件在所有项目中保持唯一。由于它将被全局使用，Maven建议包名遵循与域名和子组相同的规则。一个示例`groupId`是`com.google.appengine`。然而，一些第三方依赖项不遵循`groupId`包命名策略。检查以下示例：'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`artifactId` is just the name of the JAR/WAR file without the extension.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`只是JAR/WAR文件的名称，不带扩展名。'
- en: '`version` comes with number to show the JAR file version. Some JAR files come
    with extra information, such as `RELEASE`, for example, `3.1.4.RELEASE`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`带有数字来显示JAR文件的版本。一些JAR文件带有额外的信息，比如`RELEASE`，例如`3.1.4.RELEASE`。'
- en: 'The following code will download the `spring-security-web` library `3.1.4`
    JAR file to the repository location:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将下载`spring-security-web`库`3.1.4`的JAR文件到仓库位置：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `Log4j-core` files (in Windows) will appear as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Log4j-core`文件（在Windows中）将显示如下：'
- en: '![](img/6885c0ed-5235-46c9-84e7-90a5a307da1c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6885c0ed-5235-46c9-84e7-90a5a307da1c.png)'
- en: Sometimes, you may see the `.jar` file missing when you update the project on
    IDE. In such cases, delete the whole folder (in our case `log4j-core` folder)
    and update them once again. In order to update the missing JAR file, after you
    delete the folder, just update your IDE (STS /Eclipse in our case) by right clicking
    the project and select Maven | Update Project . Finally, make sure you have the
    `.jar` file available under the folder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当你在IDE上更新项目时，你可能会看到`.jar`文件丢失。在这种情况下，删除整个文件夹（在我们的例子中是`log4j-core`文件夹），然后再次更新它们。为了更新丢失的JAR文件，在你删除文件夹后，只需更新你的IDE（在我们的例子中是STS/Eclipse），右键单击项目，然后选择Maven
    | 更新项目。最后，确保你在文件夹下有`.jar`文件可用。
- en: 'Sample repositories in `.m2\repository` should appear as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`.m2\repository`中的示例仓库应该如下所示：'
- en: '![](img/daa56abc-3dd9-4bf6-9d32-7ef734d980e2.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/daa56abc-3dd9-4bf6-9d32-7ef734d980e2.png)'
- en: When you update a project (in Eclipse or any other IDE), it will get the JAR
    and related files from a remote Maven repository to your system's central repository.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你更新一个项目（在Eclipse或任何其他IDE中），它将从远程Maven仓库获取JAR和相关文件到你系统的中央仓库。
- en: Dependency trees
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖树
- en: Dependency trees can be used in projects to locate specific dependencies. If
    you are wondering about any specific libraries, such as why it's used, you can
    check by executing a dependency tree. Also, a dependency tree can be expanded
    to display dependency conflicts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖树可以用于项目中定位特定的依赖项。如果你想了解任何特定的库，比如为什么使用它，你可以通过执行依赖树来检查。此外，依赖树可以展开以显示依赖冲突。
- en: 'The following code shows the dependency libraries and how they''re organized:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了依赖库以及它们的组织方式：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By executing the command on your project folder (or wherever the `pom.xml`
    file is available), you can view the dependency tree, and its structure is as
    follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在项目文件夹（或者`pom.xml`文件可用的任何地方）上执行命令，你可以查看依赖树，其结构如下：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Spring Boot
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot
- en: Spring Boot is a quick and easily configurable Spring application. Unlike other
    Spring applications, we don't need much configuration to build a Spring Boot application,
    so you can start building it very quickly and easily.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot是一个快速且易于配置的Spring应用程序。与其他Spring应用程序不同，我们不需要太多的配置来构建Spring Boot应用程序，因此您可以非常快速和轻松地开始构建它。
- en: Spring Boot helps us to create a standalone application, which can be embedded
    with Tomcat or another container quickly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot帮助我们创建一个独立的应用程序，可以快速嵌入Tomcat或其他容器。
- en: Developing RESTful web services
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发RESTful Web服务
- en: To create a new project, we can use a Maven command prompt or an online tool,
    such as Spring Initializr ([http://start.spring.io](http://start.spring.io)),
    to generate the project base. This website comes in handy for creating a simple
    Spring Boot-based web project to start the ball rolling.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新项目，我们可以使用Maven命令提示符或在线工具，如Spring Initializr（[http://start.spring.io](http://start.spring.io)），生成项目基础。这个网站对于创建一个简单的基于Spring
    Boot的Web项目非常有用，可以让项目快速启动。
- en: Creating a project base
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目基础
- en: 'Let''s go to [http://start.spring.io](http://start.spring.io) in our browser
    and configure our project by filling in the following parameters to create a project
    base:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中转到[http://start.spring.io](http://start.spring.io)并通过填写以下参数来配置我们的项目以创建项目基础：
- en: 'Group: `com.packtpub.restapp`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组：`com.packtpub.restapp`
- en: 'Artifact: `ticket-management`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Artifact：`ticket-management`
- en: 'Search for dependencies: `Web` (full-stack web development with Tomcat and
    Spring MVC)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索依赖项：`Web`（使用Tomcat和Spring MVC进行全栈Web开发）
- en: 'After configuring our project, it will look as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完我们的项目后，它将如下截图所示：
- en: '![](img/24789d0f-bbfb-4c62-bae2-715482399bd3.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24789d0f-bbfb-4c62-bae2-715482399bd3.png)'
- en: 'Now you can generate the project by clicking Generate Project. The project
    (ZIP file) should be downloaded to your system. Unzip the `.zip` file and you
    should see the files as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，您可以通过单击“生成项目”来生成项目。项目（ZIP文件）应下载到您的系统。解压缩`.zip`文件，您应该看到以下截图中显示的文件： '
- en: '![](img/084f460e-ba43-4322-9ba4-9aa6de5ae3e6.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/084f460e-ba43-4322-9ba4-9aa6de5ae3e6.png)'
- en: Copy the entire folder (`ticket-management`) and keep it in your desired location.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 复制整个文件夹（`ticket-management`）并将其保存在所需的位置。
- en: Working with your favorite IDE
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用您喜欢的IDE
- en: 'Now is the time to pick the IDE. Though there are many IDEs used for Spring
    Boot projects, I would recommend using **Spring Tool Suite** (**STS**), as it
    is open source and easy to manage projects with. In my case, I use `sts-3.8.2.RELEASE`.
    You can download the latest STS from this link: [https://spring.io/tools/sts/all](https://spring.io/tools/sts/all).
    In most cases, you may not need to install; just unzip the file and start using
    it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是选择IDE的时候了。虽然有许多IDE用于Spring Boot项目，但我建议使用**Spring Tool Suite**（**STS**），因为它是开源的，易于管理项目。在我的情况下，我使用`sts-3.8.2.RELEASE`。您可以从此链接下载最新的STS：[https://spring.io/tools/sts/all](https://spring.io/tools/sts/all)。在大多数情况下，您可能不需要安装；只需解压文件并开始使用：
- en: '![](img/e8cf1fb7-89c3-447b-8c29-374679aa4c27.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8cf1fb7-89c3-447b-8c29-374679aa4c27.png)'
- en: After extracting the STS, you can start using the tool by running `STS.exe`
    (shown in the preceding screenshot).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 解压STS后，您可以通过运行`STS.exe`（如上截图所示）开始使用该工具。
- en: 'In STS, you can import the project by selecting Existing Maven Projects, shown
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在STS中，您可以通过选择现有的Maven项目导入项目，如下所示：
- en: '![](img/3b25c35d-504f-4bb6-a797-e23840c2714c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b25c35d-504f-4bb6-a797-e23840c2714c.png)'
- en: 'After importing the project, you can see the project in Package Explorer, as
    shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 导入项目后，您可以在包资源管理器中看到项目，如下截图所示：
- en: '![](img/42fe82b7-6ab5-4e24-9ff7-eae535635a13.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42fe82b7-6ab5-4e24-9ff7-eae535635a13.png)'
- en: 'You can see the main Java file (`TicketManagementApplication`) by default:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以默认查看主Java文件（`TicketManagementApplication`）：
- en: '![](img/ab8d382c-e66c-4361-8be3-254c23e99d24.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab8d382c-e66c-4361-8be3-254c23e99d24.png)'
- en: 'To simplify the project, we will clean up the existing POM file and update
    the required dependencies. Add this file configuration to `pom.xml`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化项目，我们将清理现有的POM文件并更新所需的依赖项。将此文件配置添加到`pom.xml`：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding configuration, you can check that we have used the following
    libraries:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述配置中，您可以检查我们使用了以下库：
- en: '`spring-web`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web`'
- en: '`spring-boot-starter`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot-starter`'
- en: '`spring-boot-starter-tomcat`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-tomcat`'
- en: '`spring-bind`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-bind`'
- en: '`jackson-databind`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson-databind`'
- en: As the preceding dependencies are needed for the project to run, we have added
    them to our `pom.xml` file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于项目需要上述依赖项才能运行，因此我们已将它们添加到我们的`pom.xml`文件中。
- en: 'So far we have got the base project ready for Spring Web Service. Let''s add
    a basic REST code to the application. First, remove the `@SpringBootApplication`
    annotation from the `TicketManagementApplication` class and add the following
    annotations:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为Spring Web服务准备好了基本项目。让我们向应用程序添加基本的REST代码。首先，从`TicketManagementApplication`类中删除`@SpringBootApplication`注释，并添加以下注释：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'These annotations will help the class to act as a web service class. I am not
    going to talk much about what these configurations will do in this chapter. After
    adding the annotations, please add a simple method to return a string as our basic
    web service method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释将帮助该类充当Web服务类。在本章中，我不打算详细讨论这些配置将做什么。添加注释后，请添加一个简单的方法来返回一个字符串作为我们的基本Web服务方法：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, your code will look as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您的代码将如下所示：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once all the coding changes are done, just run the project on Spring Boot App
    (Run As | Spring Boot App). You can verify the application has loaded by checking
    this message in the console:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有编码更改完成，只需在Spring Boot应用程序上运行项目（Run As | Spring Boot App）。您可以通过在控制台中检查此消息来验证应用程序是否已加载：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once verified, you can check the API on the browser by simply typing `localhost:8080`.
    Check out the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 验证后，您可以通过在浏览器中简单地输入`localhost:8080`来检查API。请查看下面的截图：
- en: '![](img/dfd51df8-24ba-4696-837e-e7742d1ec64b.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfd51df8-24ba-4696-837e-e7742d1ec64b.png)'
- en: 'If you want to change the port number, you can configure a different port number
    in `application.properties`, which is in `src/main/resources/application.properties`.
    Check out the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更改端口号，可以在`application.properties`中配置不同的端口号，该文件位于`src/main/resources/application.properties`中。查看以下截图：
- en: '![](img/36d406d2-b55b-433d-888f-713d1a011ef2.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36d406d2-b55b-433d-888f-713d1a011ef2.png)'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to set up a Maven build to support the basic
    implementation of a web service. Also, we have learned how Maven is helpful in
    third-party library management as well as Spring Boot and basic Spring REST projects.
    In the coming chapters, we will discuss more about Spring REST endpoints and Reactor
    support.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何设置Maven构建以支持Web服务的基本实现。此外，我们还学习了Maven在第三方库管理以及Spring Boot和基本Spring
    REST项目中的帮助。在接下来的章节中，我们将更多地讨论Spring REST端点和Reactor支持。
