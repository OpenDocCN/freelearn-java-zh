- en: Scaling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展
- en: As the world focusses more on the web than ever, all of our web applications
    will need to service more requests. In order to face the higher number of requests,
    we might need to scale our applications to support them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着世界对网络的关注越来越多，我们所有的网络应用程序都需要处理更多的请求。为了应对更多的请求，我们可能需要扩展我们的应用程序来支持它们。
- en: This chapter mainly concentrates on techniques, libraries, and tools that can
    be applied to our regular applications to address scalability concerns.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要集中讨论可以应用于我们常规应用程序的技术、库和工具，以解决可扩展性问题。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Clustering and its benefits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群及其优势
- en: Load balancing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡
- en: Scaling databases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展数据库
- en: Distributed caching
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式缓存
- en: Clustering
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群
- en: Simply put, clustering is nothing but adding more than one server to provide
    the same service. It will help us to avoid interruptions during disasters such
    as system crashes and other unfortunate situations. Clustering can be used as
    a failover system, a load balancing system, or a parallel processing unit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，集群就是添加多个服务器以提供相同的服务。这将帮助我们在灾难（如系统崩溃和其他不幸情况）期间避免中断。集群可以用作故障转移系统、负载均衡系统或并行处理单元。
- en: A failover cluster is a group of servers with the sample applications duplicated
    in all servers to provide the same services to clients to maintain the high availability
    of applications and services. If a server fails for some reason, the rest of the
    servers will take over the load and provide uninterrupted services to consumers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 故障转移集群是一组具有相同应用程序副本的服务器，以向客户端提供相同的服务，以维护应用程序和服务的高可用性。如果某个服务器因某种原因失败，其余服务器将接管负载，并为消费者提供不间断的服务。
- en: '**Scaling up (vertical scaling)**: This is about adding more resources to our
    servers, for example, increasing the RAM, hard drive capacity, and processors.
    Though it might be a good option, it will only be applicable for certain scenarios,
    not all. In some cases, adding more resources might be expensive.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展（垂直扩展）**：这是指向我们的服务器添加更多资源，例如增加RAM、硬盘容量和处理器。虽然这可能是一个不错的选择，但它只适用于某些情况，而不是所有情况。在某些情况下，增加更多资源可能会很昂贵。'
- en: '**Scaling out (horizontal scaling)**: Unlike adding more resources inside one
    server, scaling out focuses on adding more servers/nodes to service requests.
    This grouping is called clustering, as all of the servers are doing the same types
    of task, but duplicated on different servers to avoid interruption.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展（水平扩展）**：与在一个服务器内添加更多资源不同，扩展关注的是添加更多服务器/节点来处理请求。这种分组称为集群，因为所有服务器都在执行相同类型的任务，但在不同的服务器上复制，以避免中断。'
- en: Benefits of clustering
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群的优势
- en: Clustering is the more preferred solution for scaling services, as it gives
    a quick and flexible option to add more servers whenever needed, without interrupting
    existing services. Uninterrupted service can be provided during scaling. Consumers
    will not need to wait for anything approaching downtime when scaling the application.
    All server loads are balanced properly by a central load balancing server.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 集群是扩展服务的更受欢迎的解决方案，因为它提供了一种快速灵活的选项，可以在需要时添加更多服务器，而不会中断现有服务。在扩展期间可以提供不间断的服务。在扩展应用程序时，消费者不需要等待任何接近停机的事情。所有服务器负载都由中央负载平衡服务器正确平衡。
- en: Load balancing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡
- en: A load balancer is the most useful tool in clustering. A load balancer uses
    a variety of algorithms, such as round-robin, least connection, and so on, to
    forward the incoming request to the right backend servers for processing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器是集群中最有用的工具。负载均衡器使用各种算法，如轮询、最小连接等，将传入的请求转发到正确的后端服务器进行处理。
- en: 'There are a lot of third-party load balancers available on the market, such
    as F5 ([https://f5.com](https://f5.com)), HAProxy ([http://www.haproxy.org](http://www.haproxy.org)),
    and so on. Though these load balancing tools behave differently, they focus on
    the main role: distributing the request load to the available backend server and
    maintaining the balance between all the servers. By proper load balancing, we
    prevent a single backend server from being overloaded. Also, most load balancers
    come with health monitoring, such as checks to verify the availability of servicing
    servers.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有很多第三方负载均衡器可用，例如F5（[https://f5.com](https://f5.com)）、HAProxy（[http://www.haproxy.org](http://www.haproxy.org)）等。尽管这些负载均衡工具的行为不同，但它们都专注于主要角色：将请求负载分发到可用的后端服务器，并在所有服务器之间保持平衡。通过适当的负载平衡，我们可以防止单个后端服务器过载。此外，大多数负载均衡器都配备了健康监控，例如检查可服务服务器的可用性。
- en: Besides the main request distribution among servers, load balancers keep the
    backend servers protected from frontend servers. Frontend servers will have no
    idea about which backend server to sent the request to as load balancers hide
    all details about backend servers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在服务器之间进行主要请求分发外，负载均衡器还保护后端服务器免受前端服务器的影响。前端服务器不会知道将请求发送到哪个后端服务器，因为负载均衡器隐藏了所有关于后端服务器的细节。
- en: Scaling databases
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展数据库
- en: Scaling the database is one of the challenging parts of architectural design.
    Here, we will discuss some database scaling techniques to scale our application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展数据库是架构设计中具有挑战性的部分之一。在这里，我们将讨论一些数据库扩展技术，以扩展我们的应用程序。
- en: Vertical scaling
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 垂直扩展
- en: As we discussed earlier, in the application server level we can also utilize
    the scaling up technique for our database servers. Adding more power, such as
    CPU and RAM, will bring better performance in querying databases. By using vertical
    scaling techniques, we can get consistent performance, and it's also easy to debug
    when things go wrong. Also, vertical scaling offers increased efficiency compared
    to horizontal scaling. However, vertical scaling might require downtime regularly
    to install new hardware, and it is limited by the hardware capacity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，在应用程序服务器级别，我们也可以利用扩展技术来对我们的数据库服务器进行扩展。增加更多的计算能力，比如CPU和RAM，将提高查询数据库的性能。通过使用垂直扩展技术，我们可以获得一致的性能，并且在出现问题时也很容易调试。此外，与水平扩展相比，垂直扩展提供了更高的效率。然而，垂直扩展可能需要定期停机来安装新硬件，并且受硬件容量的限制。
- en: Horizontal scaling
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平扩展
- en: As we discussed with horizontal scaling in the application level, we can do
    the same for database servers by adding more machines to our cluster to take care
    of the database load. Compared to vertical scaling, it is significantly cheaper;
    however, this also comes with its own cost structure for cluster configuration,
    maintenance, and management costs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在应用程序级别讨论的水平扩展一样，我们可以通过向我们的集群添加更多机器来对数据库服务器进行相同的操作，以处理数据库负载。与垂直扩展相比，这要便宜得多；然而，这也伴随着集群配置、维护和管理成本。
- en: Read replicas
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取副本
- en: By keeping multiple slaves that can be accessed for reading purposes, we can
    bring significant improvements to our application. Read replicas help to read
    data in all our slaves that are read-only. However, when we need to send write
    requests, we can use the master database. A master database can be used for both
    writing and reading purposes, and slaves can be used only for reading purposes.
    The more slaves we install, the more read-based queries can be handled. This read
    replica technique is very useful in scenarios where we have minimal write queries
    and maximal read queries to be handled.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过保留多个可用于读取的从库，我们可以显著改进我们的应用程序。读取副本有助于在所有只读从库中读取数据。然而，当我们需要发送写入请求时，我们可以使用主数据库。主数据库可以用于写入和读取，而从库只能用于读取。我们安装的从库越多，就可以处理更多基于读取的查询。这种读取副本技术在我们需要处理最小写入查询和最大读取查询的情况下非常有用。
- en: Pool connections
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接池
- en: When an application queries the database, it creates a client connection, sends
    the query, and gets the results. As the client connection to the database is an
    expensive operation, the connections must be reused for further queries. Connection
    pooling will help in this situation by preventing the need establish the connection
    to the database for each request. By keeping better connection pools, such as
    HikariCP, we can improve the performance in our applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序查询数据库时，它会创建客户端连接，发送查询并获取结果。由于与数据库的客户端连接是昂贵的操作，连接必须被重用以进行进一步的查询。连接池将在这种情况下有所帮助，通过防止为每个请求建立到数据库的连接。通过保持更好的连接池，比如HikariCP，我们可以提高应用程序的性能。
- en: Use multiple masters
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个主数据库
- en: Like read replicas, multiple master mechanisms give the option to duplicate
    multiple database servers. Unlike with read replicas duplicating slaves, here
    we duplicate master databases to write and read data. This pattern is very useful
    for specific scenarios such as REST API data transaction-focused applications.
    In the multiple masters pattern, we require our applications to generate **universally
    unique identifier** (**UUID**s), to prevent data collisions during the multi-master
    replication process.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与读取副本不同，多主机制提供了复制多个数据库服务器的选项。与使用读取副本复制从库不同，这里我们复制主数据库以进行写入和读取数据。这种模式对于特定场景非常有用，比如REST
    API数据事务集中的应用程序。在多主模式中，我们需要我们的应用程序生成**通用唯一标识符**（**UUID**），以防止在多主复制过程中发生数据冲突。
- en: Load balancing in DB servers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库服务器的负载均衡
- en: As the client connection limit from the application server is based on the database
    vendor, it might be tricky to handle situations when the application servers request
    more connections. By keeping a load balancer, we can distribute the database queries
    to available database servers using their connection pools. With the help of a
    load balancer, we will make sure all database servers are equally loaded; however,
    it depends on the algorithm used in the specific load balancer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序服务器的客户端连接限制是基于数据库供应商的，当应用程序服务器请求更多连接时，处理情况可能会有些棘手。通过保持负载均衡器，我们可以使用它们的连接池将数据库查询分发到可用的数据库服务器。借助负载均衡器，我们将确保所有数据库服务器负载均衡；然而，这取决于特定负载均衡器中使用的算法。
- en: Database partitioning
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库分区
- en: Partitioning the database is very helpful when we deal with large databases
    that require high-end servers and take a lot of time to query. Also, this is useful
    when our application needs to query large amounts of both read and write requests.
    Partitioning can be done both horizontally and vertically. Both horizontal and
    vertical partitioning are described in the following sections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理需要高端服务器并且需要大量时间来查询的大型数据库时，分区数据库非常有帮助。此外，当我们的应用程序需要查询大量读取和写入请求时，这也是有用的。分区可以进行水平和垂直两种方式。水平和垂直分区都在以下部分中描述。
- en: Sharding (horizontal partitioning)
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分片（水平分区）
- en: A database table can be split into multiple tables based on any specific attribute.
    For example, a user database can be split into two different databases, such as
    `user_1` and `user_2`, where the `user_1` table's username starts with *A*-*N*,
    and the `user_2` table's username starts with *O*-*Z*. By splitting databases
    like earlier, we can reduce the number of rows on each table, and hence we can
    improve the performance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库表可以根据任何特定属性分成多个表。例如，用户数据库可以分成两个不同的数据库，比如`user_1`和`user_2`，其中`user_1`表的用户名以*A*-*N*开头，而`user_2`表的用户名以*O*-*Z*开头。通过像之前那样分割数据库，我们可以减少每个表中的行数，从而提高性能。
- en: Vertical partitioning
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 垂直分区
- en: In vertical partitioning, the database table can be split into many tables,
    based on business concepts. For example, One table might have more columns to
    keep other tables to be accessed easily for better performance.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在垂直分区中，数据库表可以根据业务概念分成多个表。例如，一个表可能有更多的列，以便其他表可以轻松访问以获得更好的性能。
- en: By doing both horizontal and vertical partitioning, querying the database will
    take less time and improve performance. Also, by dividing a big database into
    small chunks, we can avoid requiring high-end computers. These data shards can
    be distributed into low-commodity servers to save money, as well. However, data
    sharing might be a complex process in specific scenarios.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进行水平和垂直分区，查询数据库所需的时间将减少，从而提高性能。此外，通过将大型数据库划分为小块，我们可以避免需要高端计算机。这些数据分片可以分布到低成本的服务器上以节省成本。然而，在特定场景下，数据共享可能是一个复杂的过程。
- en: Distributed caching
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式缓存
- en: Distributed caching techniques will be helpful to improve the scalability in
    our web services. Unlike in-process caches, distributed caches need not be built
    in the same application space. They can be stored on multiple nodes of a cluster.
    Although distributed caches are deployed on multiple nodes, they offer a single
    state of the cache.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式缓存技术将有助于提高Web服务的可伸缩性。与进程内缓存不同，分布式缓存不需要在相同的应用程序空间中构建。它们可以存储在集群的多个节点上。尽管分布式缓存部署在多个节点上，但它们提供单一的缓存状态。
- en: Data-tier caching
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据层缓存
- en: Adding a caching layer in the database will provide better performance. It is
    considered a common strategy for improving performance, especially when read requests
    are heavy in our application. Here, we will discuss Hibernate's levels of caching.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中添加缓存层将提供更好的性能。这被认为是改善性能的常见策略，特别是当我们的应用程序中读取请求很多时。在这里，我们将讨论Hibernate的缓存级别。
- en: First-level caching
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一级缓存
- en: A first-level cache is an inbuilt session cache enabled by Hibernate, and it
    is a mandatory cache through all requests. There is no option to disable first-level
    caching in Hibernate. First-level caching is associated with a session object
    and will be lost once the session is expired. When we query the web service for
    the first time, the object is retrieved from the database and stored in the first-level
    cache, which is associated with the Hibernate session. If we request the same
    entity again, it will be retrieved from the cache without querying the database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一级缓存是Hibernate启用的内置会话缓存，是通过所有请求的强制性缓存。在Hibernate中没有禁用一级缓存的选项。一级缓存与会话对象相关联，一旦会话过期，缓存将丢失。当我们第一次查询Web服务时，对象将从数据库中检索并存储在一级缓存中，该缓存与Hibernate会话相关联。如果我们再次请求相同的实体，它将从缓存中检索，而无需查询数据库。
- en: Second-level caching
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二级缓存
- en: The second-level cache is an optional cache in Hibernate. The first-level cache
    will be the point of contact before our request reaches the second-level cache.
    The second-level cache can be configured per-class or per-collection, and it is
    responsible for caching objects across sessions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 二级缓存是Hibernate中的可选缓存。在我们的请求到达二级缓存之前，一级缓存将是联系点。二级缓存可以按类或集合配置，并负责在会话之间缓存对象。
- en: As only a few classes benefit from caching, by default second-level caching
    is disabled. It can be enabled to service designers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有少数类受益于缓存，默认情况下禁用了二级缓存。可以启用以服务设计师。
- en: Application-tier caching
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用层缓存
- en: Like caching in a database, we can also cache any object in the application
    layer to improve the performance of the application. Here, we will talk about
    various object caches, especially key-value caching tools, and check their uniqueness
    in the market.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与在数据库中缓存类似，我们还可以在应用程序层缓存任何对象以提高应用程序的性能。在这里，我们将讨论各种对象缓存，特别是键值缓存工具，并检查它们在市场上的独特性。
- en: Memcached
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Memcached
- en: As most companies use Memcached (`https://memcached.org`) in their applications,
    we consider Memcached to be one of the most powerful distributed caching systems.
    It follows the distributed memory caching mechanism and is very helpful in repeated
    scenarios, for example, when the same service is requested multiple times.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数公司在其应用程序中使用Memcached (`https://memcached.org`)，我们认为Memcached是最强大的分布式缓存系统之一。它遵循分布式内存缓存机制，在重复的场景中非常有帮助，例如当多次请求相同的服务时。
- en: Redis
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redis
- en: Redis ([https://redis.io](https://redis.io)) is another in-memory key-value
    store that can be used for caching. Redis supports data structures such as hashes,
    lists, sets, and so on. Redis is considered one of the most popular key-value
    stores, with the support of advanced key-value caches. Redis supports operations
    such as intersection and union. Because of its advanced capabilities and speed,
    it is more to be preferred than Memcached.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Redis ([https://redis.io](https://redis.io)) 是另一个可以用于缓存的内存键值存储。Redis支持诸如哈希、列表、集合等数据结构。Redis被认为是最受欢迎的键值存储之一，支持高级键值缓存。Redis支持交集和并集等操作。由于其高级功能和速度，它比Memcached更受青睐。
- en: Hazelcast
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hazelcast
- en: Hazelcast ([https://hazelcast.com](https://hazelcast.com)) is an in-memory data
    grid that supports distributed collections and simplifies distributed computing.
    It provides a simple API with an easy and straightforward deployment strategy.
    As Hazelcast provides the Memcached client library, applications using a Memcached
    cluster might be able to adapt to a Hazelcast cluster. Hazelcast architecture
    supports data distribution and high scalability in a clustered platform. It also
    provides intelligent synchronization and auto-discovery. Hazelcast offers features
    such as distributed data structures, distributed queries, and distributed compute.
    Spring Boot has explicit caching support for Hazelcast in its framework.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Hazelcast（[https://hazelcast.com](https://hazelcast.com)）是一个支持分布式集合并简化分布式计算的内存数据网格。它提供了一个简单的API和简单直接的部署策略。由于Hazelcast提供了Memcached客户端库，使用Memcached集群的应用程序可能能够适应Hazelcast集群。Hazelcast架构支持在集群平台上的数据分发和高可伸缩性。它还提供智能同步和自动发现。Hazelcast提供了分布式数据结构、分布式查询和分布式计算等功能。Spring
    Boot在其框架中明确支持Hazelcast缓存。
- en: Ehcache
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ehcache
- en: Ehcache ([http://www.ehcache.org](http://www.ehcache.org))is used mostly in
    small to medium-scale deployments due to its simplified scalable options. It is
    considered one of the most widely-used distributed caches. Also, Ehcache provides
    options to integrate with other popular libraries and frameworks. Ehcache scaling
    starts from in-process caching and goes through mixed in-process and out-of-process
    deployments. Also, Ehcache came up with the Terracotta server to improve performance
    on caching.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ehcache（[http://www.ehcache.org](http://www.ehcache.org)）由于其简化的可扩展选项，主要用于小型到中型部署。它被认为是最广泛使用的分布式缓存之一。此外，Ehcache提供了与其他流行库和框架集成的选项。Ehcache的扩展从进程内缓存开始，经过混合的进程内和进程外部署。此外，Ehcache推出了Terracotta服务器，以提高缓存性能。
- en: Riak
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Riak
- en: Riak ([https://github.com/basho/riak](https://github.com/basho/riak)) is an
    Erlang-based key-value data store that is fault-tolerant and gives high availability.
    In Riak, data can be stored in memory, the disk, or both. Riak can be accessed
    through protocols such as the HTTP API or Native Erlang interface. Riak supports
    major languages such as Java, C, and Python. Also, it supports MapReduce, which
    can be flexible in big data-related operations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Riak（[https://github.com/basho/riak](https://github.com/basho/riak)）是基于Erlang的键值数据存储，具有容错性和高可用性。在Riak中，数据可以存储在内存、磁盘或两者兼有。Riak可以通过诸如HTTP
    API或本机Erlang接口之类的协议进行访问。Riak支持主要语言，如Java、C和Python。此外，它支持MapReduce，可以在大数据相关操作中灵活使用。
- en: Aerospike
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Aerospike
- en: 'Aerospike ([https://www.aerospike.com](https://www.aerospike.com)) is an open
    source, flash-optimized, in-memory NoSQL database and key-value store. Aerospike
    operates on three layers: flash-optimized data layer, a self-managed distribution
    layer, and a cluster-aware client layer. To ensure consistency, the distribution
    layer is duplicated across all data centers. These duplicates will remain functional
    even when an individual server node fails or is removed from the cluster.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Aerospike（[https://www.aerospike.com](https://www.aerospike.com)）是一个开源的、针对闪存优化的、内存NoSQL数据库和键值存储。Aerospike在三个层面上运行：针对闪存优化的数据层、自管理的分布层和集群感知的客户端层。为了确保一致性，分布层在所有数据中心都有副本。即使单个服务器节点失败或从集群中移除，这些副本也会保持功能正常。
- en: Infinispan
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Infinispan
- en: Infinispan ([http://infinispan.org/](http://infinispan.org/)) is a distributed
    in-memory key-value data store that can be used as a cache or just a data grid.
    It can be accessed as a library or over protocols such as REST. Also, Infinispan
    can be integrated with JPA, JCache, Spring, and Spark. Infinispan supports most
    MapReduce-related operations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Infinispan（[http://infinispan.org/](http://infinispan.org/)）是一个分布式的内存键值数据存储，可以用作缓存或数据网格。它可以作为库或通过诸如REST之类的协议进行访问。此外，Infinispan可以与JPA、JCache、Spring和Spark集成。Infinispan支持大多数与MapReduce相关的操作。
- en: Cache2k
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cache2k
- en: Cache2k ([https://cache2k.org/](https://cache2k.org/)) provides in-memory object
    cache options in Java applications. Cache2k mainly focuses on caching inside JVM.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Cache2k（[https://cache2k.org/](https://cache2k.org/)）提供了Java应用程序中的内存对象缓存选项。Cache2k主要侧重于JVM内部的缓存。
- en: Other distributed caching
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他分布式缓存
- en: 'Previously, we talked about primary caching tools and their mechanisms. Here,
    we will discuss more about additional distributed caching that is available on
    the market:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论了主要的缓存工具及其机制。在这里，我们将更多地讨论市场上可用的其他分布式缓存：
- en: Amazon ElastiCache
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon ElastiCache
- en: ElastiCache is primarily used as an in-memory data store and cache service;
    it was introduced by AWS. With the support of Amazon ElastiCache, we can deploy
    our cache environment quickly, without any complicated installations. It supports
    both Memcached and Redis caching.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ElastiCache主要用作内存数据存储和缓存服务；它是由AWS引入的。借助Amazon ElastiCache的支持，我们可以快速部署我们的缓存环境，而无需进行任何复杂的安装。它支持Memcached和Redis缓存。
- en: Oracle distributed cache (Coherence)
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle分布式缓存（Coherence）
- en: In this distributed cache, data is partitioned in all computers in the cluster.
    These partitioned caches will be configured to keep each piece of data on nodes
    in the cluster. Distributed caches are the most commonly used caches in Coherence.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个分布式缓存中，数据被分区在集群中的所有计算机上。这些分区缓存将被配置为在集群中的节点上保留每个数据片段。分布式缓存是Coherence中最常用的缓存。
- en: Even though we have plenty of caching solutions available on the market, selecting
    a specific solution depends on many factors, such as business requirements, performance
    requirements, data integrity, fault tolerance, cost, and so on. Adding the right
    distributed caching layer to the application tier and database tier will result
    in better performance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管市场上有很多缓存解决方案可供选择，但选择特定的解决方案取决于许多因素，如业务需求、性能需求、数据完整性、容错性、成本等。在应用程序层和数据库层添加正确的分布式缓存层将会带来更好的性能。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about different libraries, tools, and techniques
    to scale a RESTful web service. When developing an application, we will have to
    look for loose coupling between components of a system by using well-defined interfaces.
    In the coming chapter, we will talk about microservices and their benefits.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了不同的库、工具和技术，以扩展RESTful Web服务。在开发应用程序时，我们将不得不通过使用明确定义的接口来寻找系统组件之间的松耦合。在接下来的章节中，我们将讨论微服务及其优势。
