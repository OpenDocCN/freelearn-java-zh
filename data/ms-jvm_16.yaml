- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Final Considerations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终考虑
- en: As we conclude our journey through the intricate landscapes of the JVM, it is
    fitting to reflect upon the wealth of knowledge we have unearthed in the preceding
    chapters. This book has delved deep into the inner workings of the JVM, unraveling
    its mysteries and empowering you with a profound understanding of Java’s runtime
    environment. In this final chapter, we aim to provide some overarching considerations,
    tying together the threads of our exploration and offering insights that transcend
    the confines of these pages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束对JVM复杂景观的探索之旅时，回顾我们在前几章中挖掘到的丰富知识是合适的。本书深入探讨了JVM的内部工作原理，揭开了它的神秘面纱，并赋予你对Java运行环境的深刻理解。在本章的最后，我们旨在提供一些总体考虑，将我们探索的线索串联起来，并给出超越这些页面的见解。
- en: Throughout this book, we have strived to equip you with a comprehensive understanding
    of the JVM, covering topics ranging from memory management and class loading to
    bytecode execution and garbage collection. As we approach the conclusion, we want
    to extend our appreciation for your dedication to mastering the intricacies of
    Java’s powerhouse. However, the journey doesn’t end here; instead, it serves as
    a stepping stone for further exploration and growth. In this final chapter, we
    will guide you toward additional resources and references that can serve as compass
    points in your ongoing quest for JVM mastery. These recommended readings will
    extend and deepen your understanding, providing a roadmap for continued learning
    in the dynamic realm of Java development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们努力让你对JVM有一个全面的理解，涵盖了从内存管理和类加载到字节码执行和垃圾回收的话题。随着我们接近结尾，我们想要表达对你致力于掌握Java强大工具的复杂性的感激之情。然而，旅程并未结束；相反，它是一个进一步探索和成长的垫脚石。在本章的最后，我们将引导你走向额外的资源和参考，这些资源可以作为你在持续追求JVM精通过程中的指南针。这些推荐读物将扩展并加深你的理解，为在动态的Java开发领域中持续学习提供路线图。
- en: 'In this chapter, we’ll explore the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Exploring the JVM landscape
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索JVM景观
- en: Navigating the system operation architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航系统操作架构
- en: Mastering the art of garbage collection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握垃圾回收的艺术
- en: Platform threads and virtual threads
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台线程和虚拟线程
- en: Exploring the JVM landscape
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索JVM景观
- en: In our journey through the intricacies of the JVM, we have navigated through
    diverse terrains, from the nuances of bytecode compilation to the delicate choreography
    of garbage collection. The beauty of the JVM lies in its adaptability, catering
    to a wide array of applications and scenarios. As we bring this book to a close,
    it’s essential to recognize the multifaceted nature of JVM implementations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们穿越JVM复杂性的旅程中，我们已经穿越了多样的地形，从字节码编译的细微差别到垃圾回收的微妙编排。JVM的美丽之处在于其适应性，能够满足广泛的应⽤和场景。随着我们结束本书，认识到JVM实现的多元性是至关重要的。
- en: This chapter serves as a vantage point to survey the landscape we’ve traversed,
    reminding us that the JVM ecosystem is far from monolithic. While our discussions
    have provided a solid foundation, it’s crucial to acknowledge the diversity among
    JVM implementations. Each environment may exhibit unique characteristics and optimizations,
    adding layers of complexity and depth.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为一个观察点，用于审视我们所走过的景观，提醒我们JVM生态系统远非单一。虽然我们的讨论提供了一个坚实的基础，但承认JVM实现之间的多样性至关重要。每个环境可能表现出独特的特性和优化，增加了复杂性和深度。
- en: One of the remarkable aspects of the JVM is its adherence to a minimum set of
    specifications while allowing for specialization. This balance between standardization
    and adaptability makes the JVM a powerhouse in programming languages. To delve
    further into the intricacies and specifications governing the JVM, consider exploring
    *The Java® Virtual Machine Specification* available at [https://docs.oracle.com/javase/specs/jvms/se21/html/index.html](https://docs.oracle.com/javase/specs/jvms/se21/html/index.html).
    This detailed resource provides an in-depth look into the inner workings of the
    JVM, offering insights that extend beyond the scope of this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JVM的一个显著特点是在允许专业化的同时，坚持最小化的一组规范。这种标准化与适应性之间的平衡使得JVM成为编程语言中的强大工具。要深入了解管理JVM的复杂性和规范，可以考虑探索位于[https://docs.oracle.com/javase/specs/jvms/se21/html/index.html](https://docs.oracle.com/javase/specs/jvms/se21/html/index.html)的*Java®虚拟机规范*。这个详细资源深入探讨了JVM的内部工作原理，提供了超出本书范围的见解。
- en: For a comprehensive understanding of the Java programming language itself and
    its interactions with the JVM, *The Java® Language Specification* at [https://docs.oracle.com/javase/specs/jls/se21/html/index.html](https://docs.oracle.com/javase/specs/jls/se21/html/index.html)
    is an invaluable reference. This specification elucidates the rules and semantics
    that govern the Java language, complementing our exploration of the JVM.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要全面理解Java编程语言本身及其与JVM的交互，[https://docs.oracle.com/javase/specs/jls/se21/html/index.html](https://docs.oracle.com/javase/specs/jls/se21/html/index.html)上的*《Java®语言规范》*是一个无价的参考资料。本规范阐释了管理Java语言的规则和语义，补充了我们对于JVM的探索。
- en: As we conclude our expedition through the JVM, let these resources serve as
    beacons guiding you to further depths of knowledge. The journey does not end here;
    it evolves, much like the dynamic landscape of Java development. Embrace the diversity,
    explore the nuances, and continue to unravel the mysteries of the JVM.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们结束对JVM的探险之旅时，让这些资源成为指引你深入知识深海的灯塔。旅程不会在这里结束；它像Java开发的动态景观一样不断发展。拥抱多样性，探索细微差别，继续揭开JVM的奥秘。
- en: Navigating the system operation architecture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索系统操作架构
- en: In our exploration of the JVM, we’ve peeled back the layers of bytecode execution,
    memory management, and garbage collection. However, a crucial dimension of JVM
    mastery is understanding its integration with the broader system operation architecture.
    This section is a gateway to unraveling the intricate dance between the JVM and
    the underlying operating system, a nexus where efficiency and performance harmonize.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索JVM的过程中，我们揭开了字节码执行、内存管理和垃圾回收的层层面纱。然而，JVM精通的关键维度是理解其与更广泛系统操作架构的集成。本节是揭示JVM与底层操作系统之间错综复杂互动的门户，这是一个效率和性能和谐共鸣的交汇点。
- en: While our journey has primarily focused on the JVM’s internal mechanics, delving
    into the symbiotic relationship between the JVM and the operating system unveils
    new vistas. The system operation architecture is pivotal in shaping the JVM’s
    behavior, influencing aspects such as thread management, I/O operations, and resource
    allocation. Understanding this integration is paramount for Java developers aiming
    to optimize their applications for specific operating environments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的旅程主要关注JVM的内部机制，但深入研究JVM与操作系统之间的共生关系揭示了新的视野。系统操作架构对于塑造JVM的行为至关重要，影响着诸如线程管理、I/O操作和资源分配等方面。对于希望优化其应用程序以适应特定操作环境的Java开发者来说，理解这种集成至关重要。
- en: To illuminate the path toward a deeper comprehension of system operation architectures,
    we recommend exploring *Modern Operating Systems* by Andrew S. Tanenbaum. This
    seminal work provides an overview of operating systems, offering insights into
    their design principles, functionalities, and interactions with software applications.
    By delving into Tanenbaum’s expertise, you’ll gain a broader perspective on the
    intricate dance between the JVM and the underlying operating system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了阐明深入理解系统操作架构的道路，我们推荐探索安德鲁·S·坦能鲍姆的*《现代操作系统》*。这部开创性作品概述了操作系统，提供了关于其设计原则、功能以及与软件应用交互的见解。通过深入研究坦能鲍姆的专长，你将获得更广阔的视角，了解JVM与底层操作系统之间错综复杂的互动。
- en: As you embark on this exploration, remember that a well-rounded understanding
    of the system operation architecture enhances your ability to optimize Java applications.
    From process scheduling to memory management, the operating system influences
    the JVM’s performance at every turn. Armed with insights from *Modern Operating
    Systems*, you’ll be better equipped to navigate the nuances of system-level interactions,
    unlocking new possibilities for efficiency and robust application design.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始这次探索时，请记住，对系统操作架构的全面理解可以增强你优化Java应用程序的能力。从进程调度到内存管理，操作系统在每一个转折点都会影响JVM的性能。凭借*《现代操作系统》*的见解，你将更好地装备自己，以应对系统级交互的微妙之处，解锁新的效率和健壮的应用程序设计可能性。
- en: Mastering the art of garbage collection
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握垃圾收集的艺术
- en: As we conclude our exploration of the JVM, it’s imperative to spotlight a critical
    aspect that profoundly influences application performance – the Garbage Collector.
    While we’ve touched on the principles of garbage collection, the intricacies of
    this process extend far beyond the scope of a single chapter. To delve deeper
    into this complex realm, we recommend immersing yourself in dedicated resources,
    such as *Java Memory Management – a Comprehensive Guide to Garbage Collection
    and JVM Tuning* by Maaike van Putten and Sean Kenned.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束对JVM的探索时，一个深刻影响应用程序性能的关键方面至关重要——垃圾收集器。虽然我们已经触及了垃圾收集的原则，但这一过程的复杂性远远超出了单章的范围。为了更深入地探索这个复杂的领域，我们建议您沉浸在专门资源中，例如Maaike
    van Putten和Sean Kenned所著的《Java内存管理——垃圾收集和JVM调优的全面指南》。
- en: Garbage collection, the unsung hero of memory management, ensures the efficient
    allocation and deallocation of resources within the JVM. While we’ve provided
    foundational insights, *Java Memory Management* delves into the nuances of garbage
    collection algorithms, tuning strategies, and best practices. This book guides
    those seeking mastery in optimizing Java applications by fine-tuning the Garbage
    Collector to align with specific performance requirements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾收集，内存管理中的无声英雄，确保了JVM内资源的有效分配和释放。虽然我们已经提供了基础见解，但《Java内存管理》深入探讨了垃圾收集算法、调整策略和最佳实践。这本书指导那些寻求通过微调垃圾收集器以符合特定性能要求来优化Java应用程序的人。
- en: For a more immersive understanding of the challenges and solutions in Garbage
    Collector optimization, Bruno Borges’ workshop, *Secrets of Performance Tuning
    Java on Kubernetes*, presented at Devoxx BE, is a treasure trove of insights.
    In this workshop, Borges elucidates real-world scenarios and common pitfalls encountered
    in Garbage Collector tuning, especially in Java applications running on Kubernetes.
    The session provides a practical lens into the dynamic landscape of performance
    optimization.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解垃圾收集器优化的挑战和解决方案，Bruno Borges在Devoxx BE上举办的研讨会《在Kubernetes上调整Java性能的秘密》是一个充满洞察力的宝库。在这个研讨会上，Borges阐述了在垃圾收集器调整过程中遇到的真实场景和常见陷阱，尤其是在运行在Kubernetes上的Java应用程序中。该会议提供了一个实用的视角，深入了解性能优化的动态领域。
- en: As you embark on your quest for Garbage Collector mastery, let these resources
    be your guiding lights. The journey into the intricate world of memory management
    is ongoing, and the depth of understanding you seek will contribute to the resilience
    and efficiency of your Java applications. Remember, the nuances of garbage collection
    are not merely theoretical – they manifest in the responsiveness and reliability
    of your software.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始追求垃圾收集器精通之旅时，让这些资源成为您的指南灯。进入内存管理的复杂世界是一个持续的过程，您所寻求的深度理解将有助于提高您Java应用程序的弹性和效率。请记住，垃圾收集的细微差别不仅仅是理论上的——它们体现在您软件的响应性和可靠性中。
- en: Platform threads and virtual threads
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台线程和虚拟线程
- en: In the evolving landscape of Java concurrency, the role of threads takes center
    stage, influencing the performance and responsiveness of our applications. With
    the release of version 21, the Java platform introduces a groundbreaking paradigm
    shift – the coexistence of two distinct thread types, platform threads and the
    revolutionary virtual threads.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java并发不断演变的领域中，线程的作用占据了中心舞台，影响着我们应用程序的性能和响应性。随着版本21的发布，Java平台引入了一个突破性的范式转变——两种不同线程类型的共存，即平台线程和革命性的虚拟线程。
- en: Traditionally, every instance of `java.lang.Thread` in the JDK has been a platform
    thread. This thread type runs Java code on an underlying OS thread, monopolizing
    that thread for the entirety of the code’s execution. The number of platform threads
    is limited by the number of available OS threads, leading to potential bottlenecks
    in resource utilization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，JDK中的每个`java.lang.Thread`实例都是一个平台线程。这种类型的线程在底层操作系统线程上运行Java代码，在整个代码执行过程中独占该线程。平台线程的数量受可用操作系统线程数量的限制，可能导致资源利用的潜在瓶颈。
- en: Virtual threads mark a paradigmatic shift in the concurrency landscape. Unlike
    their platform counterparts, virtual threads run Java code on an underlying OS
    thread without capturing it for the code’s entire lifetime. It means that multiple
    virtual threads can efficiently share the same OS thread, offering a lightweight
    and scalable approach to concurrency. In contrast to the limited number of platform
    threads, the flexibility of virtual threads allows for a much larger pool, making
    them a powerful tool for optimizing resource usage.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟线程在并发领域带来了范式转变。与它们的平台对应物不同，虚拟线程在底层操作系统线程上运行Java代码，而无需在整个代码生命周期中捕获它。这意味着多个虚拟线程可以有效地共享同一个操作系统线程，提供了一种轻量级和可扩展的并发方法。与有限的平台线程数量相比，虚拟线程的灵活性允许拥有更大的线程池，使它们成为优化资源使用的强大工具。
- en: Virtual threads introduce the *M:N* scheduling concept, a departure from the
    traditional *1:1* scheduling of platform threads. In this new paradigm, a substantial
    number (*M*) of virtual threads can be scheduled to run on a smaller number (*N*)
    of OS threads. This approach mirrors the success of user-mode threads in other
    languages, such as goroutines in Go and processes in Erlang. It harks back to
    Java’s early days when green threads, albeit sharing a single OS thread, laid
    the foundation for what would later become the virtual threads we have today.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟线程引入了*M:N*调度概念，这与平台线程传统的*1:1*调度模式不同。在这个新范式下，大量的虚拟线程（*M*）可以调度在较少的操作系统线程（*N*）上运行。这种方法借鉴了其他语言中用户模式线程的成功，例如Go语言中的goroutines和Erlang中的进程。它回想起Java的早期时代，当时虽然绿色线程共享单个操作系统线程，但为后来成为我们今天所拥有的虚拟线程奠定了基础。
- en: As we navigate the threadscape of the JVM, embracing the synergy of both platform
    threads and virtual threads becomes pivotal. The efficiency gains and scalability
    offered by virtual threads are transformative, especially in scenarios where resource
    optimization is paramount. Whether you’re orchestrating complex concurrent operations
    or aiming for more responsive applications, understanding the nuances of these
    thread types equips you to make informed choices.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索JVM的线程世界时，拥抱平台线程和虚拟线程的协同作用变得至关重要。虚拟线程带来的效率提升和可扩展性具有变革性，尤其是在资源优化至关重要的场景中。无论您是在编排复杂的并发操作，还是希望实现更响应式的应用程序，理解这些线程类型的细微差别都能使您做出明智的选择。
- en: In this dynamic era of Java concurrency, where threads are no longer one-size-fits-all,
    the ability to leverage both platform and virtual threads empowers developers
    to navigate the complex terrain of modern application development. As you delve
    into the intricacies of *M:N* scheduling and lightweight concurrency, seize the
    opportunity to enhance the responsiveness and efficiency of your Java applications
    in the era of virtual threads.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Java并发动态时代，线程不再是一劳永逸的解决方案，能够利用平台和虚拟线程的能力使开发者能够驾驭现代应用程序开发的复杂领域。随着您深入探索*M:N*调度和轻量级并发的复杂性，抓住机会在虚拟线程时代提高您Java应用程序的响应性和效率。
- en: Summary
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we draw the final curtain on our exploration of the JVM, we extend our sincere
    gratitude to your company on this journey. It’s been a pleasure delving into the
    intricate workings of the JVM, from bytecode intricacies to the advent of virtual
    threads.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们结束对JVM的探索之旅，我们向您在我们共同经历的这段旅程中给予的真诚感谢。我们很高兴能够深入探究JVM的复杂运作机制，从字节码的复杂性到虚拟线程的出现。
- en: We hope this book has been enlightening and empowering, giving you a deeper
    understanding of the JVM’s pivotal role in Java application development. The dynamic
    landscape of garbage collection, system operations, and the revolutionary era
    of virtual threads await your continued exploration.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这本书能够启迪并赋予您力量，让您对JVM在Java应用程序开发中的关键作用有更深入的理解。垃圾收集、系统操作和虚拟线程革命性的时代等待着您继续探索。
- en: Thank you for investing your time and curiosity in this endeavor. We hope this
    book has sparked new insights, fueled your passion for Java development, and provided
    practical knowledge for your coding ventures.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您在这项事业中投入时间和好奇心。我们希望这本书能够激发新的见解，激发您对Java开发的热情，并为您的编码之旅提供实用的知识。
- en: As you venture into the ever-evolving realm of JVM mastery, may your coding
    endeavors be efficient, your applications resilient, and your curiosity insatiable.
    Happy coding, and we sincerely hope you enjoyed the journey through the JVM!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你踏入不断演进的 JVM 精通领域，愿你的编码努力高效，你的应用程序坚韧，你的好奇心永不满足。编码愉快，我们真诚地希望您享受了通过 JVM 的旅程！
