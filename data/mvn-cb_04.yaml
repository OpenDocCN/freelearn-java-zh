- en: Chapter 4. Essential Maven Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章. 必要的 Maven 插件
- en: 'In this chapter, we will look at the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: Using the Maven Clean plugin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven Clean 插件
- en: Using the Maven Compiler plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven 编译器插件
- en: Changing the compiler used by the Maven Compiler plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 Maven 编译器插件使用的编译器
- en: Specifying the Java version for the Compiler plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为编译器插件指定 Java 版本
- en: Using the Maven Surefire plugin to run unit tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven Surefire 插件运行单元测试
- en: Using the Maven Failsafe plugin to run integration tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven Failsafe 插件运行集成测试
- en: Using the Maven Resources plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven 资源插件
- en: Filtering using resources
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用资源进行过滤
- en: Using Eclipse to run Maven goals
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Eclipse 运行 Maven 目标
- en: Using NetBeans to run Maven goals
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NetBeans 运行 Maven 目标
- en: Using IntelliJ IDEA to run Maven goals
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IntelliJ IDEA 运行 Maven 目标
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we learned about the Maven lifecycle and the phases
    and goals of the lifecycle, understood the essential elements of the pom project
    configuration file and the settings file, and learned to use Maven profiles and
    properties.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了 Maven 生命周期及其阶段和目标，了解了 pom 项目配置文件和设置文件的基本元素，并学习了如何使用 Maven 配置文件和属性。
- en: In this chapter, we will look at how to add and configure plugins to the pom
    file and use them to perform essential build tasks. Maven has a plugin architecture,
    and except for core functionalities, every task in Maven is done using plugins.
    There are a number of plugins that are provided by Maven. In addition, there are
    several third-party plugins. Maven also provides a mechanism for users to develop
    their own plugins if they choose to do so.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何向 pom 文件添加和配置插件，并使用它们来执行基本构建任务。Maven 具有插件架构，除了核心功能外，Maven 中的每个任务都是通过插件完成的。Maven
    提供了大量的插件。此外，还有几个第三方插件。如果用户选择这样做，Maven 还提供了一种机制，让用户开发自己的插件。
- en: Using the Maven Clean plugin
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven Clean 插件
- en: When a project is built, it is important to ensure that it is not adversely
    affected by artifacts of an earlier build. Usually, build tools generate artifacts
    in a well-defined folder, namely the `target` folder, called **project working
    directory**. Before a new build, this folder is usually deleted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目构建时，确保它不会被早期构建的工件所不利影响是很重要的。通常，构建工具在定义良好的文件夹中生成工件，即 `target` 文件夹，称为**项目工作目录**。在新构建之前，这个文件夹通常会被删除。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven is set up on your system and is verified to work. To do this, refer to
    the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 已在您的系统上设置并验证其工作。要这样做，请参考 [第 1 章](ch01.html "第 1 章. 入门") *入门* 的前三道食谱。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s start using the Maven Clean plugin by performing the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤开始使用 Maven Clean 插件：
- en: Open the command prompt.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Run the following Maven command in the simple Maven project that we created
    in the *Creating a simple project with Maven* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started"), *Getting Started*:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们创建的简单 Maven 项目中运行以下 Maven 命令，该命令位于 [第 1 章](ch01.html "第 1 章. 入门") 中 *使用 Maven
    创建简单项目* 的食谱中：*入门*：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Observe the various steps that get executed:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察执行的各种步骤：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If there are no files/folders to delete, you will not see the following output:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有文件/文件夹要删除，您将看不到以下输出：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the `clean` phase is invoked, Maven automatically infers that the `clean`
    lifecycle is invoked.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `clean` 阶段时，Maven 会自动推断出正在调用 `clean` 生命周期。
- en: It uses the Maven Clean plugin for this. The plugin has only one goal, namely
    `clean`, to clean the working directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用 Maven Clean 插件来完成这项工作。该插件只有一个目标，即 `clean`，用于清理工作目录。
- en: In the case of Maven, the working directory is called `target`. Maven creates
    this directory when a build is done. The `clean` goal of the plugin attempts to
    delete this directory.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Maven 的情况下，工作目录被称为 `target`。Maven 在构建完成后创建此目录。插件的 `clean` 目标尝试删除此目录。
- en: As `clean` is a separate lifecycle from the `default` (build) lifecycle, `clean`
    needs to be explicitly called before the `default` lifecycle if you need to ensure
    that the working directory is removed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `clean` 是一个与 `default`（构建）生命周期分开的生命周期，如果你需要确保工作目录被删除，那么在 `default` 生命周期之前需要显式调用
    `clean`。
- en: There's more...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this section, we will discuss how to run the Clean plugin automatically during
    the build, the steps to skip the deletion of working directory, and the process
    of deleting some additional files/folders.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何在构建过程中自动运行Clean插件，跳过删除工作目录的步骤，以及删除一些额外文件/文件夹的过程。
- en: Cleaning automatically
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动清理
- en: In the previous example, as we used the default behavior of the plugin and did
    not need to make any configurations, we did not need to make any change to the
    pom configuration file. However, what if we want to ensure that the `clean` goal
    is run without explicitly calling it?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，因为我们使用了插件的默认行为，并且不需要进行任何配置，所以我们不需要对pom配置文件进行任何更改。然而，如果我们想确保`clean`目标在没有明确调用的情况下运行，该怎么办？
- en: 'To do this, we need to define the plugin with some parameters in our pom file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要在我们的pom文件中定义带有一些参数的插件：
- en: 'Let us add the following code in our pom file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在pom文件中添加以下代码：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Though the preceding declaration may look verbose, all we are asking is for
    the `clean` goal to be invoked during the `initialize` phase of the project. We
    are identifying this `execution` with an `id` called `auto-clean`.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管前面的声明可能看起来很冗长，但我们只是要求在项目的`initialize`阶段调用`clean`目标。我们使用一个名为`auto-clean`的`id`来标识这个`execution`。
- en: 'Now run the following command on the command prompt:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在命令提示符上运行以下命令：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will see the following screenshot:![Cleaning automatically](img/6124OS_04_01.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下截图：![自动清理](img/6124OS_04_01.jpg)
- en: Even though we did not call the `clean` phase, the `clean` goal got invoked
    because it was configured in the pom file to run in the `initialize` phase.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们没有调用`clean`阶段，由于在pom文件中配置了在`initialize`阶段运行，`clean`目标仍然被触发。
- en: Skipping the deletion of the working directory
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跳过删除工作目录
- en: 'Let us look at the converse of the preceding use case. For some reason, we
    do not want the working directory to be deleted, even if `clean` is run. To do
    this, perform the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前面用例的反面。由于某种原因，我们不想删除工作目录，即使运行了`clean`。为此，请执行以下步骤：
- en: 'Configure the plugin as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置插件：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following command on the command prompt:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符上运行以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Observe the output, which is as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下输出：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting the `skip` plugin property to `true` indicates to Maven that the `clean`
    goal must be skipped.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将`skip`插件属性设置为`true`表示告诉Maven必须跳过`clean`目标。
- en: Deleting additional folders/files
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除额外的文件夹/文件
- en: 'What if your project has an additional folder, say `report`, besides `target`,
    which is perhaps created by another script, and you want that to be deleted as
    well? We use the following steps to do the same:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目除了`target`之外还有一个额外的文件夹，比如`report`，这可能是由另一个脚本创建的，并且你希望也删除它？我们使用以下步骤来完成同样的操作：
- en: 'Configure the plugin as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置插件：
- en: '[PRE8]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You have now configured the plugin to delete an additional directory
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在已经配置了插件来删除一个额外的目录
- en: Create a `report` folder for the purpose of testing.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`report`文件夹用于测试。
- en: 'Run the following command on command prompt:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符上运行以下命令：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will now see the following output:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在将看到以下输出：
- en: '[PRE10]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `report` folder is deleted as well. In fact, Maven can be configured to
    delete (or not delete) specific folders and files inside that folder as well.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`report`文件夹也被删除了。实际上，Maven可以被配置为删除（或不清除）该文件夹内的特定文件夹和文件。'
- en: Using the Maven Compiler plugin
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven编译器插件
- en: Compilation is an essential task performed by a build tool. Maven uses the Maven
    Compiler plugin to do the compilation. The plugin provides several configurations
    to make the compilation flexible.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编译是构建工具执行的基本任务之一。Maven使用Maven编译器插件来进行编译。该插件提供了一些配置选项，使编译更加灵活。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use the Maven Compiler plugin, perform the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Maven编译器插件，请执行以下步骤：
- en: Open a command prompt.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Run the following Maven command on the simple project that we created in the
    *Creating a simple project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started"), *Getting Started*:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。入门")中，按照*使用Maven创建简单项目*的步骤创建的简单项目中运行以下Maven命令：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Observe the output, which is as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下输出：
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `compile` parameter indicates the invocation of the `default` lifecycle
    to Maven. As illustrated in the *Understanding the Maven lifecycle, phases, and
    goals* recipe in [Chapter 3](ch03.html "Chapter 3. Maven Lifecycle"), *Maven Lifecycle*,
    Maven runs all the phases up to and including the `compile` phase in order.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`compile`参数表示对Maven的`default`生命周期的调用。如[第3章](ch03.html "第3章。Maven生命周期")中*理解Maven生命周期、阶段和目标*配方所示，Maven按顺序运行所有阶段，包括`compile`阶段。'
- en: The `compile` phase itself essentially runs the `compile` goal of the Maven
    Compiler plugin.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`compile`阶段本身实际上是在运行Maven Compiler插件的`compile`目标。'
- en: This compiles the Java source files to classes in the `target/classes` folder.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将Java源文件编译成`target/classes`文件夹中的类。
- en: One question would have struck you. What about the test classes? Why does the
    `compile` phase not compile the test sources?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题可能会让你感到困惑。关于测试类呢？为什么`compile`阶段不编译测试源文件？
- en: The answer lies in the way Maven handles the lifecycle and phases of the lifecycle.
    Why would you want to compile the test sources unless you want to run the tests?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 答案在于Maven处理生命周期和生命周期阶段的方式。除非你想运行测试，否则你为什么要编译测试源文件？
- en: There's more...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: What if we want to compile the test sources?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要编译测试源文件怎么办？
- en: 'Let us try running the following command on the command prompt:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在命令提示符上尝试运行以下命令：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Observe the output as shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图所示的输出：
- en: '![There''s more...](img/6124OS_04_02.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![更多...](img/6124OS_04_02.jpg)'
- en: As we specified the `test` phase, Maven ran all phases prior to it, which includes
    compiling the test sources using the `testCompile` goal of the Maven Compiler
    plugin.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们指定了`test`阶段，Maven运行了它之前的所有阶段，包括使用Maven Compiler插件的`testCompile`目标编译测试源文件。
- en: Changing the compiler used by the Maven Compiler plugin
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改Maven Compiler插件使用的编译器
- en: Let us say we are running Maven using JDK 7 but our project requires the sources
    to be compiled using JDK 8\. Essentially, we want to use a JDK for compilation
    that is different from the JDK running Maven.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在使用JDK 7运行Maven，但我们的项目需要使用JDK 8编译源文件。本质上，我们想要使用一个与运行Maven的JDK不同的JDK进行编译。
- en: In this case, we can specify the compiler we want to use to Maven.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以指定我们想要用于Maven的编译器。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to change the compiler used by the Maven Compiler plugin:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤更改Maven Compiler插件使用的编译器：
- en: Open the command prompt.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Define a Maven property to store the location details for Java 8:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个Maven属性以存储Java 8的位置详细信息：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The portable way to do this would be to define this property in a `profile`
    in the user's `settings.xml` file. This is because the location of `JAVA_HOME`
    may be different for different users based on their operating system or preferred
    installation location.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要以便携的方式完成此操作，可以在用户的`settings.xml`文件中的`profile`中定义此属性。这是因为`JAVA_HOME`的位置可能因用户的操作系统或首选安装位置而不同。
- en: 'Add the following plugin configuration to the Maven project:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件配置添加到Maven项目中：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `fork` element needs to be set to `true` for the preceding code to work.
    Maven will invoke the different java compiler in a separate thread and hence the
    need to fork. This is so that Maven can load a different JVM corresponding to
    a different JDK.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了使前面的代码生效，`fork`元素需要设置为`true`。Maven将在单独的线程中调用不同的Java编译器，因此需要分叉。这样做是为了让Maven能够加载与不同JDK对应的不同的JVM。
- en: 'Run the following command on a command prompt:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符上运行以下命令：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There would no visible difference in the way the compilation happens, except
    that now, the compiler specified in the `executable` element will get invoked.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 编译发生的方式不会有明显的区别，除了现在，`executable`元素中指定的编译器将被调用。
- en: See also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Specifying the Java version for the Compiler plugin* recipe in this chapter
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中*指定编译器插件的Java版本*配方
- en: Specifying the Java version for the Compiler plugin
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定编译器插件的Java版本
- en: 'When we created a new project in Eclipse, you would have observed the following
    warning:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Eclipse中创建新项目时，你会观察到以下警告：
- en: '![Specifying the Java version for the Compiler plugin](img/6124OS_04_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![指定编译器插件的Java版本](img/6124OS_04_03.jpg)'
- en: Why does this error occur? This is because the Maven Compiler plugin, by default,
    considers the `source` and `target` Java version to be `1.5` (for backward compatibility
    reasons).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会出现这个错误？这是因为Maven Compiler插件默认将`source`和`target` Java版本视为`1.5`（出于向后兼容性原因）。
- en: Let us resolve this warning.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决这个问题警告。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let us assume you have configured Java 8 as the default Java runtime in Eclipse,
    and perform the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经在 Eclipse 中将 Java 8 配置为默认的 Java 运行时，并执行以下步骤：
- en: Open the Eclipse project.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Eclipse 项目。
- en: 'Add the following configuration to the Maven Compiler plugin:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下配置添加到 Maven Compiler 插件中：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternately, add the following properties in the `properties` element (this
    is essentially a shortcut for the earlier process):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，在 `properties` 元素中添加以下属性（这实际上是前面过程的快捷方式）：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Check if the warning goes away.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查警告是否消失。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the `source` and `target` versions of Java are explicitly set to the compiler,
    the version of java used in the source code as well as the desired version of
    the compiled classes are unambiguous. There is no likelihood of the compiler compiling
    to the incorrect target version of Java.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `source` 和 `target` 版本的 Java 明确设置到编译器时，源代码中使用的 Java 版本以及编译类所期望的版本是明确的。编译器编译到错误的
    Java 目标版本的可能性很小。
- en: Consequently, the Eclipse warning goes away.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Eclipse 警告消失了。
- en: There's more...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'You may need to pass compiler arguments in the `compilerArguement` element
    to the compiler. For instance, you may want to identify the usage of deprecated
    APIs in the code. You can do this by adding the following configuration:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要在 `compilerArguement` 元素中传递编译器参数。例如，你可能想识别代码中已弃用的 API 的使用。你可以通过添加以下配置来完成此操作：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When run on a code that has a deprecation, you can see the relevant lines:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当在具有弃用代码上运行时，你可以看到相关的行：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using the Maven Surefire plugin to run unit tests
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven Surefire 插件运行单元测试
- en: A best practice of software development is writing automated unit tests for
    the code that you develop. Let us now see how to run these tests.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发的最佳实践之一是为你开发的代码编写自动化单元测试。现在让我们看看如何运行这些测试。
- en: The plugin that does this job is the Maven Surefire plugin.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此任务的插件是 Maven Surefire 插件。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To run unit tests using the Maven Surefire plugin, perform the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Maven Surefire 插件运行单元测试，请执行以下步骤：
- en: Open the command prompt.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Run the following command on one of our sample projects:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的一个示例项目中运行以下命令：
- en: '[PRE21]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Observe the various steps that get executed:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察执行的各种步骤：
- en: '[PRE22]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `test` parameter indicates the invocation of the `default` lifecycle to
    Maven. As illustrated in the *Understanding the Maven lifecycle, phases, and goals*
    recipe in [Chapter 3](ch03.html "Chapter 3. Maven Lifecycle"), *Maven Lifecycle*,
    Maven runs all the phases up to and including the `test` phase, in order.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`test` 参数表示对 Maven 的 `default` 生命周期的调用。如第 3 章中“理解 Maven 生命周期、阶段和目标”配方所示，Maven
    按顺序运行所有阶段，包括 `test` 阶段。'
- en: The `test` phase itself essentially runs the `test` goal of the Maven Surefire
    plugin.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`test` 阶段本身实际上运行了 Maven Surefire 插件的 `test` 目标。'
- en: This runs the test classes that are present in the `target/test-classes` folder.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行 `target/test-classes` 文件夹中存在的测试类。
- en: The test that we have is a test written using the JUnit framework. Not only
    does the plugin run the test, it also generates a test report that can be used
    to analyze failures as well as test coverage.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有的测试是使用 JUnit 框架编写的测试。插件不仅运行测试，还生成可以用来分析失败以及测试覆盖率的测试报告。
- en: 'Check the `surefire-reports` folder:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 `surefire-reports` 文件夹：
- en: '![How it works...](img/6124OS_04_04.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/6124OS_04_04.jpg)'
- en: While the text file contains the summary report, the XML file has the details
    of each of the tests.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然文本文件包含总结报告，但 XML 文件包含每个测试的详细信息。
- en: There's more...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The Surefire plugin provides many configurations to make testing easier.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Surefire 插件提供了许多配置，以使测试更容易。
- en: Using TestNG
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 TestNG
- en: JUnit is not the only way to write automated unit tests. You could use TestNG
    ([http://testng.org](http://testng.org)) or even write your tests without using
    any framework (by using Java asserts).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 并非编写自动化单元测试的唯一方式。你可以使用 TestNG ([http://testng.org](http://testng.org))
    或者甚至在不使用任何框架的情况下（通过使用 Java 断言）编写测试。
- en: Surefire determines the framework to be used based on the dependencies that
    have been defined.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Surefire 根据已定义的依赖项确定要使用的框架。
- en: Our earlier example ran JUnit tests because we had defined the `junit` dependency
    in the pom file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的例子运行了 JUnit 测试，因为我们已经在 pom 文件中定义了 `junit` 依赖。
- en: Let us now write a test using TestNG and see what needs to change for it to
    work. Refer to the Maven project with TestNG.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用TestNG编写一个测试，看看需要更改什么才能使其工作。参考带有TestNG的Maven项目。
- en: 'The only change in the pom file is to replace the `junit` dependency with `testng`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: pom文件中唯一的更改是将`junit`依赖项替换为`testng`：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following command on command prompt:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下运行以下命令：
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The tests are now run in using TestNG:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试将使用TestNG运行：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, examine the `surefire-reports` folder. It has a different set of files
    corresponding to `testng`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查`surefire-reports`文件夹。它包含与`testng`对应的不同文件集：
- en: '![Using TestNG](img/6124OS_04_05.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![使用TestNG](img/6124OS_04_05.jpg)'
- en: The same tests work with TestNG and JUnit as TestNG can run JUnit tests.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与TestNG和JUnit一样，相同的测试可以在TestNG中运行。
- en: Skipping tests
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跳过测试
- en: 'There may be situations where you might not want to run the tests; some tests
    are possibly broken. This can be done in the following ways:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在你不想运行测试的情况；一些测试可能已损坏。可以通过以下方式完成：
- en: 'Configuring the Surefire plugin in the pom file: Configure your Surefire plugin
    in the pom.xml file using the following code:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在pom文件中配置Surefire插件：使用以下代码在pom.xml文件中配置你的Surefire插件：
- en: '[PRE26]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, run the following command:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，运行以下命令：
- en: '[PRE27]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You will see the following output:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE28]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Issuing an `mvn` command with a command-line parameter: The tests can be skipped
    even by issuing the following command:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过命令行参数发出`mvn`命令：即使发出以下命令，也可以跳过测试：
- en: '[PRE29]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Skipping the compilation of test sources
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跳过测试源的编译
- en: 'The skipTests parameter used in the preceding mvn command skips running of
    tests, but the test sources still get compiled by the earlier phases/goals. To
    skip the compilation of test sources, you can run the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的mvn命令中使用的`skipTests`参数跳过了测试的运行，但测试源仍然由早期阶段/目标编译。要跳过测试源的编译，你可以运行以下命令：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will completely skip the test compilation and test execution.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将完全跳过测试编译和测试执行。
- en: Using the Maven Failsafe plugin to run integration tests
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven Failsafe插件运行集成测试
- en: In addition to unit tests, Maven also allows you to automate the running of
    your integration tests. While unit tests are run during the `test` phase of the
    build lifecycle, integration tests are run during the `verify` phase. The Maven
    Failsafe plugin is used to run integration tests.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单元测试外，Maven还允许你自动化运行你的集成测试。虽然单元测试在构建生命周期的`test`阶段运行，但集成测试在`verify`阶段运行。Maven
    Failsafe插件用于运行集成测试。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To run integration tests using Maven Failsafe plugin, perform the following
    steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Maven Failsafe插件运行集成测试，请执行以下步骤：
- en: Open a project containing integration tests, namely `project-with-integration-test`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开包含集成测试的项目，即`project-with-integration-test`。
- en: 'Add the following plugin configuration to the pom file:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件配置添加到pom文件中：
- en: '[PRE31]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Observe the various steps that get executed:![How to do it...](img/6124OS_04_06.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察执行的各种步骤：![如何做...](img/6124OS_04_06.jpg)
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have specified in the pom file that the integration test must be run and
    the goals of the Maven Failsafe plugin must be verified. These goals are bound
    to the `verify` phase of Maven and get invoked.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在pom文件中指定了集成测试必须运行，以及Maven Failsafe插件的目的是必须验证。这些目标绑定到Maven的`verify`阶段，并会被调用。
- en: Using the Maven Resources plugin
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven Resources插件
- en: The Resources plugin comes into picture to copy project resources to the output
    directory. The resources can be for the project to run or for the purpose of testing.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 资源插件出现以将项目资源复制到输出目录。资源可以是项目运行或测试的目的。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s start using the Maven Resources plugin by performing the following steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤开始使用Maven Resources插件：
- en: Open the command prompt.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Run the following command on the simple project that we created earlier:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前创建的简单项目中运行以下命令：
- en: '[PRE33]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Observe what happens:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下情况：
- en: '[PRE34]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we specify the `process-resources` phase, Maven executes the `resources`
    goal of `maven-resources-plugin`, which is bound to the `process-resources` lifecycle
    phase.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们指定`process-resources`阶段时，Maven执行`maven-resources-plugin`的`resources`目标，该目标绑定到`process-resources`生命周期阶段。
- en: In the earlier project, there are no resources and hence, resources are not
    copied.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期项目中，没有资源，因此资源不会被复制。
- en: 'If you add a file in `src\main\resources` (as in the case of the `project-with-resources`
    project), you will see the following output:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向 `src\main\resources` 目录中添加一个文件（例如 `project-with-resources` 项目的情况），你将看到以下输出：
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You could also explicitly invoke the plugin''s goal as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以显式调用插件的 goal，如下所示：
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You could also invoke any phase following the `process-resources` phase, which
    will trigger resource processing as well:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以调用 `process-resources` 阶段之后的任何阶段，这将触发资源处理：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'There is a separate goal to copy test resources to provide separation of the
    main and test resources. Like project resources, the test resource processing
    can be invoked in three ways, which are as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个单独的目标用于将测试资源复制到提供主资源和测试资源分离的地方。像项目资源一样，测试资源处理可以通过以下三种方式之一调用，如下所示：
- en: 'By specifying a phase that will automatically invoke phases before it:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过指定一个将自动调用其之前阶段的阶段：
- en: '[PRE38]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'By explicitly stating the plugin''s goal:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过显式声明插件的目标：
- en: '[PRE39]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'By a phase following `process-test-resources`:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过跟随 `process-test-resources` 的阶段：
- en: '[PRE40]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: What if we had resources in additional folders? The Maven Resources plugin allows
    us to configure these additional folders.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在额外的文件夹中有资源怎么办？Maven 资源插件允许我们配置这些额外的文件夹。
- en: 'Let''s say we have an additional resources folder, namely `src/main/additional`.
    We can configure the `pom.xml` file as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个额外的资源文件夹，即 `src/main/additional`。我们可以按照以下方式配置 `pom.xml` 文件：
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, run the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Observe the output:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The line `Copying 1 resource` repeats twice, indicating the copying happening
    from two folders.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 线 `Copying 1 resource` 重复两次，表明从两个文件夹中发生了复制。
- en: Filtering using resources
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用资源进行过滤
- en: Now, let us see how we can put the resources features of Maven to good use,
    that is, to perform variable replacements on project resources. This feature is
    useful when you need to parameterize a build with different configuration values,
    depending on the deployment platform.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何将 Maven 的资源功能用于良好，即对项目资源执行变量替换。这个特性在你需要根据部署平台使用不同的配置值参数化构建时很有用。
- en: You can define variables in your resources. Let us see how we can get the value
    of these variables from properties, resource filter files, and the command line.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的资源中定义变量。让我们看看我们如何从属性、资源过滤器文件和命令行中获取这些变量的值。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To perform filtering using resources, use the following steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用资源进行过滤，请按照以下步骤操作：
- en: 'Add a property with a variable in the `src/main/resource/app.properties` file:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/main/resource/app.properties` 文件中添加一个带有变量的属性：
- en: '[PRE44]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following code in the pom file:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 pom 文件中添加以下代码：
- en: '[PRE45]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Invoke the `process-resources` phase:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `process-resources` 阶段：
- en: '[PRE46]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Examine the processed resource `app.properties` in `target/classes`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `target/classes` 中的处理后的资源 `app.properties`：
- en: '[PRE47]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the *Using properties in Maven* recipe of [Chapter 3](ch03.html "Chapter 3. Maven
    Lifecycle"), *Maven Lifecycle*, we saw the various types of properties that Maven
    can have. In the preceding case, we set the `filtering` element to `true`. Maven
    replaced the variable `${project.name}` with the property value corresponding
    to the name of the project defined in the pom file, namely `Project with resource
    filtering`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](ch03.html "第 3 章。Maven 生命周期") 的 *Maven 生命周期* 的 *使用 Maven 中的属性* 菜谱中，我们看到了
    Maven 可以拥有的各种属性类型。在前面的例子中，我们将 `filtering` 元素设置为 `true`。Maven 将变量 `${project.name}`
    替换为在 pom 文件中定义的项目名称对应的属性值，即 `Project with resource filtering`。
- en: There's more...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can override the property values from the command line:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从命令行覆盖属性值：
- en: '[PRE48]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, look at `app.properties` by navigating to `target/classes`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过导航到 `target/classes` 查看 `app.properties`：
- en: '[PRE49]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you have a large number of variables whose values differ based on the environment,
    then you can create a file, say `my-filter-values.properties`, in the project
    codebase holding the keys and values (say, `src/filter` folder) and use them as
    filters:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多变量，它们的值根据环境而不同，那么你可以在项目代码库中创建一个文件，例如 `my-filter-values.properties`，在其中持有键和值（例如，`src/filter`
    文件夹），并将它们用作过滤器：
- en: '[PRE50]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Using Eclipse to run Maven goals
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Eclipse 运行 Maven 目标
- en: If you are using Eclipse to develop your project, it is good to know how to
    run some of the plugins we have discussed earlier using the IDE.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Eclipse 开发你的项目，了解如何使用 IDE 运行我们之前讨论的一些插件是很有帮助的。
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To run Maven goals using Eclipse, use the following steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Eclipse 运行 Maven 目标，请按照以下步骤操作：
- en: Open the simple project in Eclipse.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中打开简单项目。
- en: Right-click on the project.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目。
- en: Choose **Run As**.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**运行方式**。
- en: View the available Maven options:![How to do it...](img/6124OS_04_07.jpg)
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看可用的Maven选项：![如何操作...](img/6124OS_04_07.jpg)
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Eclipse provides an option to run various goals from the IDE. Among the ones
    we have seen in this chapter, `clean`, `compile`, and `test` are offered by Eclipse.
    There are a few other options as well.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse提供了一个选项，可以从IDE中运行各种目标。在我们本章中看到的目标中，`clean`、`compile`和`test`由Eclipse提供。还有一些其他选项。
- en: In addition, Eclipse also allows us to modify the configurations as suitable.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Eclipse还允许我们根据需要修改配置。
- en: Eclipse also allows the project to be **Run As** a **Java Application** in the
    traditional way (without using any Maven plugins). Likewise, it allows a **JUnit
    Test** to be run without using Maven.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse还允许项目以传统方式（不使用任何Maven插件）**作为Java应用程序运行**。同样，它允许在没有使用Maven的情况下运行**JUnit测试**。
- en: Using NetBeans to run Maven goals
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NetBeans运行Maven目标
- en: Let us now see how we can run the Maven goals in NetBeans.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何在NetBeans中运行Maven目标。
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To run Maven goals using the NetBeans IDE, implement the following steps:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用NetBeans IDE运行Maven目标，请执行以下步骤：
- en: Open the simple project in the NetBeans IDE.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在NetBeans IDE中打开简单项目。
- en: Right-click on the project.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目。
- en: View the available options:![How to do it...](img/6124OS_04_08.jpg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看可用选项：![如何操作...](img/6124OS_04_08.jpg)
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Unlike Eclipse, NetBeans has a tighter Maven integration. This means each of
    the menu options (**Build**, **Clean and Build**, **Clean**, and so on) call the
    corresponding Maven command to do so.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 与Eclipse不同，NetBeans具有更紧密的Maven集成。这意味着每个菜单选项（**构建**、**清理和构建**、**清理**等）都会调用相应的Maven命令来执行。
- en: 'For instance, clicking on the **Clean** option will result in the following:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，单击**清理**选项将产生以下结果：
- en: '![How it works...](img/6124OS_04_09.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/6124OS_04_09.jpg)'
- en: As can be seen, it runs the `mvn clean` command.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，它运行了`mvn clean`命令。
- en: Similarly, the **Clean and Build** option is equivalent to the `mvn clean install`
    command.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，**清理和构建**选项等同于`mvn clean install`命令。
- en: These are simple use cases. NetBeans provides additional configuration options
    to override default Maven behavior.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是简单的用例。NetBeans提供了额外的配置选项来覆盖默认的Maven行为。
- en: Using IntelliJ IDEA to run Maven goals
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IntelliJ IDEA运行Maven目标
- en: Finally, let us look at what IntelliJ IDEA provides.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看IntelliJ IDEA提供了什么。
- en: How to do it...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To run Maven goals using IntelliJ IDEA, perform the following steps:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用IntelliJ IDEA运行Maven目标，请执行以下步骤：
- en: Open the simple project in IntelliJ IDEA.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中打开简单项目。
- en: Select **Maven Projects**:![How to do it...](img/6124OS_04_10.jpg)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Maven项目**：![如何操作...](img/6124OS_04_10.jpg)
- en: Open **Lifecycle** and click on a suitable goal/phase:![How to do it...](img/6124OS_04_11.jpg)
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**生命周期**并单击一个合适的目标/阶段：![如何操作...](img/6124OS_04_11.jpg)
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'Clicking on a Maven phase/goal invokes the corresponding Maven command and
    the same is executed. For instance, clicking on **compile** does the following:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 单击Maven阶段/目标将调用相应的Maven命令并执行。例如，单击**编译**将执行以下操作：
- en: '![How it works...](img/6124OS_04_12.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/6124OS_04_12.jpg)'
- en: There are also other configuration options provided by IntelliJ IDEA to customize
    Maven projects.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA还提供了其他配置选项，用于自定义Maven项目。
