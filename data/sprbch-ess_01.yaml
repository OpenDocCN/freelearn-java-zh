- en: Chapter 1. Spring Batch Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Spring Batch 基础知识
- en: Organizations need to process huge volumes of data through a series of transactions
    in their day-to-day operations. These business operations should be automated
    to process the information efficiently without human intervention. Batch processing
    can execute such a series of operations through programs, with a predefined set
    of data groups as input, process the data, and generate a set of output data groups
    and/or update the database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 组织需要在日常运营中通过一系列交易处理大量数据。这些业务操作应该自动化，以便在没有人为干预的情况下高效处理信息。批处理可以通过程序执行此类一系列操作，以预定义的数据组作为输入，处理数据，并生成一组输出数据组或更新数据库。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to batch applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批处理应用程序简介
- en: Spring Batch and its offerings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch 及其提供的产品
- en: Spring Batch infrastructure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch 基础设施
- en: Job design and executions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业设计和执行
- en: Introduction to batch applications
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批处理应用程序简介
- en: 'Organizations need to accomplish diverse business operations that include a
    large amount of data processing. Following are some examples of such operations:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 组织需要完成各种业务操作，包括大量数据处理。以下是一些此类操作的示例：
- en: Generation of salary slips and tax calculations in a large enterprise
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大型企业中生成工资单和税务计算
- en: Credit card bill generation by banks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 银行生成的信用卡账单
- en: Fresh stock updated by retail stores in their catalog
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零售商在其目录中更新的新鲜库存
- en: 'All such operations are executed with a predefined set of configurations and
    schedules, to run at a particular offload system time. Batch applications should
    be able to process large volumes of data without human intervention. The following
    figure represents a typical batch application:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些操作都是通过预定义的配置和计划集来执行的，以便在特定的卸载系统时间运行。批处理应用程序应该能够在没有人为干预的情况下处理大量数据。以下图表示了一个典型的批处理应用程序：
- en: '![Introduction to batch applications](img/3372OS_01_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![批处理应用程序简介](img/3372OS_01_01.jpg)'
- en: 'A standard batch application is expected to have the following capabilities:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 标准批处理应用程序应具备以下功能：
- en: '**Scalable**: It should be able to process billions of records and be reliable
    without crashing the application'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：它应该能够处理数十亿条记录，并且在不会崩溃应用程序的情况下保持可靠性'
- en: '**Robust**: It should be intelligent enough to identify the invalid data and
    keep track of such mishaps to rerun with corrected data'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健壮性**：它应该足够智能，能够识别无效数据并跟踪此类错误，以便使用修正后的数据重新运行'
- en: '**Dynamic**: It should interact with different systems to access the data using
    the credentials provided and process the operations'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态性**：它应该能够与不同的系统交互，使用提供的凭据访问数据并处理操作'
- en: '**Concurrent**: It must process multiple jobs in parallel with the shared resources'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发性**：它必须能够与共享资源并行处理多个作业'
- en: '**Systematic**: It should process the workflow-driven batches in a sequence
    of dependent steps'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统性**：它应该按照依赖步骤的顺序处理由工作流程驱动的批处理'
- en: '**High performance**: It must complete the processing in a specified batch
    window'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：它必须在指定的批处理窗口内完成处理'
- en: Spring Batch and its offerings
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch 及其提供的产品
- en: Spring Batch is a lightweight, comprehensive batch framework designed to enable
    the development of robust batch applications that are vital for the daily operations
    of enterprise systems developed by SpringSource and Accenture in collaboration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 是一个轻量级、全面的批处理框架，旨在使开发健壮的批处理应用程序成为可能，这对于 SpringSource 和埃森哲合作开发的企业系统日常运营至关重要。
- en: Spring Batch follows POJO-based development to let developers easily implement
    batch processing and integrate with other enterprise systems when needed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 采用基于 POJO 的开发模式，以便开发人员能够轻松实现批处理并在需要时与其他企业系统集成。
- en: '**Plain Old Java** **Object** (**POJO**) represents an ordinary Java object
    that can be used to store a data item and exchange information between services
    easily.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**纯旧Java对象**（**POJO**）代表一个普通的Java对象，可以用来存储数据项并轻松地在服务之间交换信息。'
- en: While Spring Batch provides many reusable functions adopted from the Spring
    framework and customized for batch applications to perform common batch (such
    as split processing of huge volumes of data, logging, transaction management,
    job process-skip-restart, and effective resource management), it is not a scheduling
    framework. Spring Batch can work in conjunction with a scheduler (such as Quartz/Control-M),
    but cannot replace a scheduler.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Spring Batch 提供了许多从 Spring 框架中采用的可重用函数，并针对批处理应用程序进行了定制，以执行常见的批处理操作（如大量数据的分割处理、日志记录、事务管理、作业过程跳过-重启和有效的资源管理），但它不是一个调度框架。Spring
    Batch 可以与调度程序（如 Quartz/Control-M）一起工作，但不能替代调度程序。
- en: 'We discussed the capabilities expected from a standard batch application in
    the previous section. Spring Batch is designed to fulfill the expected features,
    along with its high capability, to integrate with different applications developed
    in other frameworks. Let''s observe some of the important features offered by
    Spring Batch:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了从标准批处理应用程序中期望的功能。Spring Batch 被设计用来实现这些期望的功能，同时具备高能力，以与其他框架中开发的不同的应用程序集成。让我们观察
    Spring Batch 提供的一些重要功能：
- en: Support for multiple file formats, including fixed length, delimited files,
    XML and common database access using JDBC, and other prominent frameworks
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种文件格式，包括固定长度、分隔符文件、XML 以及使用 JDBC 的常见数据库访问，以及其他突出框架。
- en: Automatic retry after failure
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败后的自动重试
- en: Job control language to monitor and perform common operations such as job start,
    stop, suspend, and cancel
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业控制语言以监控和执行常见操作，如作业启动、停止、暂停和取消
- en: Tracking status and statistics during the batch execution and after completing
    the batch processing
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在批处理执行期间以及批处理处理完成后跟踪状态和统计信息
- en: Support for multiple ways of launching the batch job, including script, HTTP,
    and message
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种启动批处理作业的方式，包括脚本、HTTP 和消息
- en: Support to run concurrent jobs
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持运行并发作业
- en: Support for services such as logging, resource management, skip, and restarting
    the processing
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持日志记录、资源管理、跳过和重新启动处理等服务
- en: Spring Batch infrastructure
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch 基础设施
- en: 'Spring Batch is designed with a layered architecture, including three major
    components, namely, Application, Core, and Infrastructure, as shown in the following
    figure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 采用分层架构设计，包括三个主要组件，即应用程序、核心和基础设施，如下图所示：
- en: '![Spring Batch infrastructure](img/3372OS_01_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Batch 基础设施](img/3372OS_01_02.jpg)'
- en: The Application layer contains the developer-written code to run the batch jobs
    using Spring Batch.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序层包含开发者编写的代码，用于使用 Spring Batch 运行批处理作业。
- en: The Batch Core layer contains the core runtime classes such as `JobLauncher`,
    `Job`, and `Step`, necessary to launch and control the batch job. This layer interacts
    with the Application layer and Batch Infrastructure layer to run the batch jobs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理核心层包含 `JobLauncher`、`Job` 和 `Step` 等核心运行时类，这些类对于启动和控制批处理作业是必要的。此层与应用程序层和批处理基础设施层交互以运行批处理作业。
- en: The Batch Infrastructure layer contains the common readers, writers, and services.
    Both Application and Batch Core are built on top of Infrastructure. They refer
    to Infrastructure for the information required to run the batch jobs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理基础设施层包含常见的读取器、写入器和服务。应用程序和批处理核心都是建立在基础设施之上的。它们引用基础设施以获取运行批处理作业所需的信息。
- en: Multiple components are involved in Spring Batch job execution. The components
    and their relationship are discussed in the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 作业执行涉及多个组件。下一节将讨论这些组件及其关系。
- en: Spring Batch components
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Batch 组件
- en: 'The following figure represents the Spring Batch job components and the relationship
    between these components:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示 Spring Batch 作业组件及其之间的关系：
- en: '![Spring Batch components](img/3372OS_01_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Batch 组件](img/3372OS_01_03.jpg)'
- en: '`JobLauncher` is the interface responsible for beginning a job. When a job
    is first launched, `JobLauncher` verifies in the `JobRepository`, if the job is
    already executed and the validity of the `Job` parameter before executing the
    job.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobLauncher` 是负责启动作业的接口。当作业首次启动时，`JobLauncher` 会验证在 `JobRepository` 中该作业是否已经执行以及执行作业前
    `Job` 参数的有效性。'
- en: A job is the actual batch process to be executed. A `Job` parameter can be configured
    in an XML or a Java program.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作业是实际要执行的批处理过程。可以在 XML 或 Java 程序中配置 `Job` 参数。
- en: '`JobInstance` is the logical instance of the job per cycle. If a `JobInstance`
    execution fails, the same `JobInstance` can be executed again. Hence, each `JobInstance`
    can have multiple job executions.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobInstance`是每个周期作业的逻辑实例。如果一个`JobInstance`执行失败，相同的`JobInstance`可以再次执行。因此，每个`JobInstance`可以有多个作业执行。'
- en: '`JobExecution` is the representation of single run of a job. `JobExecution`
    contains the run information of the job in execution, such as `status`, `startTime`,
    `endTime`, `failureExceptions`, and so on.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobExecution`是单个作业运行的表示。`JobExecution`包含正在执行的作业的运行信息，例如`status`、`startTime`、`endTime`、`failureExceptions`等等。'
- en: '`JobParameters` are the set of parameters used for a batch job.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobParameters`是用于批处理作业的参数集。'
- en: A `Step` is a sequential phase of a batch job. `Step` contains the definition
    and control information of a batch job. The following figure represents multiple
    steps in a batch job. Each `Step` constitutes three activities, namely, data reading,
    processing, and writing, which are taken care of by `ItemReader`, `ItemProcessor`,
    and `ItemWriter` respectively. Each record is read, processed (optional), and
    written to the system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Step`是批处理作业的顺序阶段。`Step`包含批处理作业的定义和控制信息。以下图表示批处理作业中的多个步骤。每个`Step`由三个活动组成，即数据读取、处理和写入，分别由`ItemReader`、`ItemProcessor`和`ItemWriter`处理。每条记录被读取、处理（可选）并写入系统。'
- en: '`StepExecution` is the representation of a single run of a `Step`. `StepExecution`
    contains the run information of the step, such as `status`, `startTime`, `endTime`,
    `readCount`, `writeCount`, `commitCount`, and so on.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`StepExecution`是单个`Step`运行的表示。`StepExecution`包含步骤的运行信息，例如`status`、`startTime`、`endTime`、`readCount`、`writeCount`、`commitCount`等等。'
- en: '![Spring Batch components](img/3372OS_01_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Batch组件](img/3372OS_01_04.jpg)'
- en: '`JobRepository` provides **create, retrieve, update, and delete** (**CRUD**)
    operations for the `JobLauncher`, `Job`, and `Step` implementations.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobRepository`为`JobLauncher`、`Job`和`Step`实现提供**创建、检索、更新和删除**（**CRUD**）操作。'
- en: '`ItemReader` is the abstract representation of the retrieval operation of `Step`.
    `ItemReader` reads one item at a time.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`ItemReader`是`Step`检索操作的抽象表示。`ItemReader`一次读取一个项目。'
- en: '`ItemProcessor` is the abstract representation of the business processing of
    the item read by `ItemReader`. `ItemProcessor` processes valid items only and
    returns `null` if the item is invalid.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`ItemProcessor`是`ItemReader`读取的项目业务处理的抽象表示。`ItemProcessor`仅处理有效的项目，如果项目无效则返回`null`。'
- en: '`ItemWriter` is the abstract representation of the output operation of `Step`.
    `ItemWriter` writes one batch or chunk of items at a time.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`ItemWriter`是`Step`输出操作的抽象表示。`ItemWriter`一次写入一个批次或一批项目。'
- en: In the next section, we will use our understanding of these components and develop
    a simple batch application using the essential Spring Batch job components. Also
    included are the code snippets of this application in steps.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用对这些组件的理解，并使用基本的Spring Batch作业组件开发一个简单的批处理应用程序。还包括该应用程序的代码片段。
- en: Job design and executions
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业设计和执行
- en: Spring Batch can be configured in your project in multiple ways, by including
    downloaded ZIP distribution and checking out from Git or configure using Maven.
    In our case, we will use the Maven configuration. You should have Maven installed
    in your system directly or using an IDE-based plugin (we are using Eclipse in
    this example). Refer to [https://www.eclipse.org/m2e/](https://www.eclipse.org/m2e/)
    to integrate Maven in your Eclipse IDE. The latest versions of Eclipse come with
    this plugin installed; verify this before installing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch可以通过多种方式配置到项目中，包括包含下载的ZIP发行版和从Git检出，或者使用Maven进行配置。在我们的例子中，我们将使用Maven配置。您应该在系统上直接安装Maven或使用基于IDE的插件（我们在这个例子中使用Eclipse）。请参阅[https://www.eclipse.org/m2e/](https://www.eclipse.org/m2e/)以在Eclipse
    IDE中集成Maven。Eclipse的最新版本都预装了此插件；在安装之前请验证这一点。
- en: 'A Spring Batch job can be launched in multiple ways, including the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch作业可以通过多种方式启动，包括以下几种：
- en: Launching the job from the command line
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行启动作业
- en: Launching the job using job schedulers
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用作业调度器启动作业
- en: Launching the job from a Java program
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Java程序启动作业
- en: Launching the job from a web application
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Web应用程序启动作业
- en: For this sample program, we are launching the batch job from a simple Java program.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例程序，我们是从一个简单的Java程序中启动批处理作业。
- en: 'The following are the steps, with code snippets, to run the first batch job
    using Spring Batch:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过Spring Batch运行第一个批处理作业的步骤，包括代码片段：
- en: Create a Maven-enabled Java project (let's call it `SpringBatch`). Maven is
    the software to manage the projects effectively. The `pom.xml` file is the configuration
    file for Maven to include any API dependencies. There are dedicated Maven archetypes
    that can create sample projects. The location for Maven is [http://mvnrepository.com/artifact/org.springframework.batch/spring-batch-archetypes](http://mvnrepository.com/artifact/org.springframework.batch/spring-batch-archetypes).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Maven启用的Java项目（让我们称它为`SpringBatch`）。Maven是用于有效管理项目的软件。`pom.xml`文件是Maven的配置文件，用于包含任何API依赖项。有专门的Maven原型可以创建示例项目。Maven的位置是[http://mvnrepository.com/artifact/org.springframework.batch/spring-batch-archetypes](http://mvnrepository.com/artifact/org.springframework.batch/spring-batch-archetypes)。
- en: 'Configure `pom.xml` in the `root` directory of your project to have the required
    Maven dependencies that include the following:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的`root`目录下配置`pom.xml`，使其包含所需的Maven依赖项，如下所示：
- en: Spring framework with batch
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带批处理的Spring框架
- en: '`log4j` for logging'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j`用于日志记录'
- en: JUnit to test the application
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JUnit测试应用程序
- en: Commons Lang helper utilities for the `java.lang` API
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Commons Lang辅助工具用于`java.lang` API
- en: '**HyperSQL** **Database** (**HSQLDB**) to be able to run using HSQLDB, which
    is a relational database management system written in Java'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HyperSQL** **数据库**（**HSQLDB**）能够使用HSQLDB运行，HSQLDB是一个用Java编写的数据库管理系统'
- en: '[PRE0]'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create `log4j.xml` under the `src\main\resources` directory to log with the
    following content, which will produce a formatted console output:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src\main\resources`目录下创建`log4j.xml`文件，以以下内容进行日志记录，这将生成格式化的控制台输出：
- en: '[PRE1]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Include the configuration file (`context.xml`) under the `src\main\resources\batch`
    directory with the following content. Context configuration includes the `jobRepository`,
    `jobLauncher`, and `transactionManager` configuration. We configured the batch
    as the default schema in this configuration.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src\main\resources\batch`目录下包含配置文件（`context.xml`），内容如下。上下文配置包括`jobRepository`、`jobLauncher`和`transactionManager`配置。在此配置中，我们将批处理配置为默认模式。
- en: '[PRE2]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Include the job config (`firstBatch.xml`) under the `src\main\resources\batch`
    directory with the following content. Batch job configuration includes configuring
    the batch job with step and tasklet, using a Java program.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src\main\resources\batch`目录下包含作业配置（`firstBatch.xml`），内容如下。批处理作业配置包括使用Java程序配置批处理作业的步骤和任务。
- en: '[PRE3]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Write the tasklet (the strategy for processing in a step) for the first job
    (`FirstBatch.java`) under the `src\main\java\batch` directory with the following
    content. This tasklet program is referred to in the `firstBatch.xml` configuration
    for tasklet reference under `Job`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src\main\java\batch`目录下编写第一个作业的任务（步骤中的处理策略）`FirstBatch.java`，内容如下。此任务程序在`firstBatch.xml`配置文件中作为`Job`下任务引用的参考。
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Write the Java program to execute the batch job (`ExecuteBatchJob.java`) under
    the `src\main\java\batch` directory with the following content. Through this program,
    we access the job configuration file and identify the `JobLauncher` and `Job`
    beans from the configuration files. `JobExecution` is invoked from the `run` method
    of `JobLauncher` by passing the job and `jobParameters`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src\main\java\batch`目录下编写执行批处理作业的Java程序（`ExecuteBatchJob.java`），内容如下。通过此程序，我们访问作业配置文件，并从配置文件中识别`JobLauncher`和`Job`豆。通过传递作业和`jobParameters`，从`JobLauncher`的`run`方法中调用`JobExecution`。
- en: As mentioned earlier, we can run a batch job from either of the options, including
    command line, job schedulers, web application, or a simple Java program. We are
    using a simple Java program here to run our first job.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所述，我们可以从以下任一选项运行批处理作业，包括命令行、作业调度器、Web应用程序或简单的Java程序。在这里，我们使用一个简单的Java程序来运行我们的第一个作业。
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Following is the folder structure to be generated in the `SpringBatch` project,
    after including the resources mentioned earlier:![Job design and executions](img/3372OS_01_05.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是`SpringBatch`项目包含上述资源后生成的文件夹结构![作业设计和执行](img/3372OS_01_05.jpg)
- en: 'Add `src/main/java and src/main/resources` to the project source through build
    path properties, as shown in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过构建路径属性将`src/main/java`和`src/main/resources`添加到项目源中，如下截图所示：
- en: '![Job design and executions](img/3372OS_01_06.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![作业设计和执行](img/3372OS_01_06.jpg)'
- en: 'Build the project with the Maven installation and run the `ExecuteBatchJob`
    Java program to get the batch job execution status printed on the console:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Maven安装构建项目并运行`ExecuteBatchJob`Java程序，以在控制台上打印批处理作业执行状态：
- en: '[PRE6]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Following the previously mentioned steps, we configured our first batch job
    using Spring Batch and executed it successfully from a Java program.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前提到的步骤，我们使用Spring Batch配置了我们的第一个批处理作业，并成功从Java程序中执行了它。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we learned about batch applications, real-time batch
    applications, and the capabilities expected from a standard batch application.
    We also learned about Spring Batch applications and the features offered by the
    Spring Batch technology, high-level Spring Batch architecture, and components
    involved in Spring Batch job execution, along with the relationships among those
    components. We completed this chapter with the development of a simple batch application
    and ran the program successfully.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了批处理应用、实时批处理应用以及标准批处理应用应具备的功能。我们还学习了Spring Batch应用以及Spring Batch技术提供的特点、高级Spring
    Batch架构以及Spring Batch作业执行中涉及到的组件，以及这些组件之间的关系。我们通过开发一个简单的批处理应用并成功运行程序来完成本章内容。
- en: In the next chapter, we will learn about the configuration of batch jobs using
    XML and EL, and the execution of batch jobs from the command line and application.
    We will also discuss the scheduling of batch jobs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用XML和EL配置批处理作业，以及从命令行和应用程序执行批处理作业。我们还将讨论批处理作业的调度。
