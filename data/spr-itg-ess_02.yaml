- en: Chapter 2. Message Ingestion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第2章 消息摄取**'
- en: 'As mentioned in the *Preface*, Spring Integration is an implementation of *Enterprise
    Integration Patterns: Designing, Building, and Deploying Messaging Solutions (Addison
    Wesley Signature Series)*, *Gregor Hohpe* and *Bobby Woolf*, *Addison-Wesley Professional*.
    **EIP** (short for **Enterprise Integration Patterns**) defines patterns for many
    integration challenges, and one of them is the exchange of messages between heterogeneous
    systems. In this chapter, we will explore patterns and concepts around message
    exchange.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如*序言*中所述，Spring Integration是*企业集成模式：设计、构建和部署消息解决方案（Addison Wesley签名系列）*，*Gregor
    Hohpe*和*Bobby Woolf*，*Addison-Wesley专业*的实现。**EIP**（即**企业集成模式**的缩写）定义了许多集成挑战的模式，其中之一就是异构系统之间的消息交换。在本章中，我们将探讨与消息交换相关的模式和概念。
- en: 'Heterogeneous endpoints use messaging to communicate. There are primarily three
    aspects of messaging: messages being exchanged, the endpoints that participate
    in the communication, and the medium through which messages are delivered. In
    an EIP paradigm, we define them as messages, message endpoints, and message channels.
    Let''s discuss each one at a time and then we will discuss the pattern.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 异构端点使用消息进行通信。消息交换主要有三个方面：正在交换的消息、参与通信的端点以及消息传递的媒介。在EIP范式中，我们将其定义为消息、消息端点和消息通道。让我们逐一讨论每一个，然后我们再讨论模式。
- en: 'What is a message? In simplest terms, messages can be understood as a piece
    of information that can be used as an enabler for intercommunication and collaboration
    between heterogeneous components. It is composed of primarily two parts: header
    and payload. Headers contain metadata and commonly require values such as ID,
    timestamp, and so on, but a header''s use can be extended for passing other values
    as well, for example, a channel name for a router, file components for a filename,
    and so on. Payload can be of any type: standard Java object, XML, or any custom
    or user-defined value. It can be a simple information-sharing payload too (for
    example, a registration module can notify an audit module when a new user is registered),
    or it can be a command (for example, an administration module can instruct the
    mail service to notify all the users who''ve registered for the course), or it
    can be an event (for example, a mail service that, after sending all the mails,
    dispatches an event back to the admin module specifying that all the mails have
    been sent and it''s good to go with the next step).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息是什么？**用最简单的术语来说，消息可以被理解为一个可以作为不同组件之间互操作和协作的启动物息。它主要由两部分组成：标题和有效载荷。标题包含元数据，通常需要诸如ID、时间戳等值，但标题的使用也可以扩展为传递其他值，例如，路由器的通道名，文件组件的文件名等等。有效载荷可以是任何类型：标准Java对象、XML或任何自定义或用户定义的值。它也可以是一个简单的信息共享有效载荷（例如，注册模块可以在新用户注册时通知审计模块），或者它可以是一个命令（例如，管理模块可以指示邮件服务通知所有注册课程的用户），或者它可以是一个事件（例如，在发送所有邮件后，邮件服务将事件返回给管理模块，指示所有邮件已发送，可以进行下一步）。'
- en: 'We noticed a pattern here; there is a communication between two components
    via these messages—in formal terms, we call these components message endpoints.
    Similarly, we can observe that message endpoints are of two types: producer endpoint
    and consumer endpoint. As their names suggest, a producer, such as `registration
    module`, generates a message in the given example, while a consumer consumes it—for
    example the `audit module` in the given example. An endpoint can be a producer
    as well as a consumer, for example, a mail service. Endpoints are typically smart
    components that can validate messages before passing them on to the next subsystem
    or can route, filter, aggregate, transform, or do a lot more so that the message
    can be in a format expected by the next in the chain.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到了一个模式；两个组件通过这些消息进行通信——在正式术语中，我们称这些组件为消息端点。同样，我们可以观察到消息端点有两种类型：生产者端点和消费者端点。正如他们的名字所暗示的，一个生产者，比如`注册模块`，在给定示例中生成一个消息，而一个消费者则消耗它——比如给定示例中的`审计模块`。一个端点可以同时是生产者和消费者，例如，一个邮件服务。端点通常是智能组件，可以在将消息传递给下一个子系统之前验证消息，或者可以进行路由、过滤、聚合、转换等操作，以便消息能够符合下一环节的预期格式。
- en: Working with message channels
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**与消息通道一起工作**'
- en: 'We defined messages and we discussed how message endpoints act on the messages,
    so where does a message channel fit in? A message channel is an implementation
    of the EAI design pattern that decouples the endpoint. Endpoints do not need to
    be aware of each other''s type; they register with channels and it''s the responsibility
    of the channel to deliver the messages safely between endpoints. Each channel
    has a logical identity—it may be a unique name or ID through which it can be referred
    and registered to. Depending on how channels handle the messages, they can be
    classified in two broad categories:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了消息，并讨论了消息端点如何处理消息，那么消息通道在哪里呢？消息通道是实现企业应用集成（EAI）设计模式的实现，它解耦了端点。端点不需要了解彼此的类型；它们向通道注册，而通道负责安全地在端点之间传递消息。每个通道都有一个逻辑标识符——它可能是一个唯一的名称或ID，通过它可以引用和注册。根据通道处理消息的方式，它们可以分为两大类：
- en: Point-to-point channel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点对点通道
- en: Publish-subscribe channel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布-订阅通道
- en: Channel types
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道类型
- en: 'Before starting with their implementation, let''s first look at the following
    types of channels:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始它们的实现之前，让我们首先看看以下类型的通道：
- en: '**Point-to-point channel**: A one-to-one relationship is maintained between
    producer and consumer. These channels deliver message to one and only one recipient.
    Even if more than one recipient is registered, messages will only be delivered
    to one of them. This channel type can be used in a parallel processing scenario,
    allowing multiple consumers to listen to the availability of messages in parallel,
    but the delivery of messages will be done to a single consumer only!'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点对点通道**：维护生产者和消费者之间一对一的关系。这些通道将消息发送给唯一的一个接收者。即使注册了多个接收者，消息也只会发送给其中的一个。这种通道类型可用于并行处理场景，允许多个消费者并行监听消息的可用性，但消息的发送只会针对单个消费者进行！'
- en: '**Publish-subscribe channel**: These channels deliver messages to all of the
    subscribers who have registered on the channel, thus implementing a one-to-many
    relationship between producer and consumer. An analogy can be drawn as each subscriber
    has its own private channel, on which a copy of the message is delivered. As soon
    as it''s consumed, it is discarded.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布-订阅通道**：这些通道将消息发送给在通道上注册的所有订阅者，从而实现生产者和消费者之间的一对多关系。可以将其比作每个订阅者都有自己的私有通道，在该通道上发送消息的副本。一旦被消费，它就会被丢弃。'
- en: Let's get out of idioms and have a sneak peek at how Spring Integration provides
    support for all of these components—after all, this is a book on Spring Integration,
    isn't it!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们摆脱成语，窥视一下 Spring Integration 如何为所有这些组件提供支持——毕竟，这是一本关于 Spring Integration
    的书，不是吗！
- en: Spring implementation of channels
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 通道实现
- en: 'Spring Integration defines a top-level interface for the message channel that
    should be implemented by any of the concrete channel implementations, as shown
    here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration 为消息通道定义了一个顶级接口，任何具体的通道实现都应该实现这个接口，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `MessageChannel` interface defines two versions of the `send` method—one
    which accepts only `Message` as an argument while the other one accepts an additional
    parameter (`timeout`). The `send` method returns true if the message is sent out
    successfully; otherwise, if it times out or the sending fails for some reason,
    it returns false.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageChannel` 接口定义了两个版本的 `send` 方法——一个只接受 `Message` 作为参数，而另一个接受一个额外的参数（`timeout`）。`send`
    方法如果在成功发送消息则返回 true；否则，如果在超时或由于某种原因发送失败，它返回 false。'
- en: 'Further, Spring Integration provides a sub type of the `MessageChannel` interface
    to support two types of channels: `PollableChannel` and `SubscribableChannel`.
    This is explained in more detail in the following points:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Spring Integration 为 `MessageChannel` 接口提供了一个子类型，以支持两种类型的通道：`PollableChannel`
    和 `SubscribableChannel`。以下详细解释了这一点：
- en: '**Pollable channel**: This channel provides the interface that has two versions
    of receive, one which does not take any argument and the other which provides
    an option to specify the `timeout` parameter. The following code snippet is the
    interface declaration:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可轮询通道**：此通道提供了两个版本的接收接口，一个不带任何参数，另一个提供指定 `timeout` 参数的选项。以下代码片段是接口声明：'
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Subscribeable channel**: This interface exposes methods to subscribe and
    unsubscribe from the channel. The following code snippet is the interface declaration
    for a subscribe-able channel:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可订阅通道**：此接口提供了订阅和取消订阅通道的方法。以下是可订阅通道的接口声明：'
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An instance of the `MessageHandler` interface is passed as an argument to the
    `subscribe` and `unsubscribe` methods. The `MessageHandler` interface exposes
    only one method, `handleMessage`, to handle the message:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageHandler`接口的实例作为参数传递给`subscribe`和`unsubscribe`方法。`MessageHandler`接口只暴露了一个方法，即`handleMessage`，用于处理消息：'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Whenever a message arrives on a channel, an implementation of the message handler
    is looked upon by the framework, and the message is passed to the implementer's
    `handleMessage` method.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时有消息到达通道，框架都会寻找消息处理器的实现，并将消息传递给实现者的`handleMessage`方法。
- en: Although Spring Integration defines message channel interfaces and allows users
    to provide their implementation, it's hardly ever needed. Spring Integration has
    provided many implementations of channels that can be used *off the shelf*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Spring Integration定义了消息通道接口并允许用户提供自己的实现，但通常并不需要。Spring Integration提供了许多可以即插即用的通道实现。
- en: Selecting a channel
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择通道
- en: Let's discuss what default implementations have been provided by Spring Integration
    and how they can be leveraged.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下Spring Integration提供的默认实现以及如何利用它们。
- en: Publish-subscribe channel
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布-订阅通道
- en: 'This is the only implementation of the publish-subscribe model of channel.
    The primary purpose of this channel is to send messages to registered endpoints;
    this cannot be polled. It can be declared as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是发布-订阅模型通道的唯一实现。这个通道的主要目的是发送消息到注册的端点；这个通道不能被轮询。它可以如下声明：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s discuss each of the elements in this line; this will be used throughout
    the examples of this chapter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下此行中的每个元素；本章的示例将使用此元素：
- en: '`int`: This is a namespace that declares all Spring Integration components.
    As discussed in [Chapter 1](part0018_split_000.html#page "Chapter 1. Getting Started"),
    *Getting Started*, the STS visual editor can be used to add different namespaces
    from Spring Integration.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`：这是一个命名空间，声明了所有Spring Integration组件。如在[第1章](part0018_split_000.html#page
    "Chapter 1. Getting Started")，*入门*中讨论的，Spring Integration的STS可视化编辑器可以用来添加不同的Spring
    Integration命名空间。'
- en: '`publish-subscribe-channel`: This is the type exposed by Spring.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publish-subscribe-channel`：这是Spring暴露的类型。'
- en: '`Id`: This is the unique name through which the channel can be referred.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Id`：这是通道的唯一名称，通过它来引用通道。'
- en: 'To refer to these elements from the code, we can use:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要从代码中引用这些元素，我们可以使用：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Queue channel
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列通道
- en: 'Remember queue concepts from good old data structures? `QueueChannel` employs
    the same concept—it enforces **First in First out** (**FIFO**) ordering and a
    message can be consumed by one and only one endpoint. It''s a strictly one-to-one
    relationship, even if the channel has multiple consumers; one message will be
    delivered to only one of them. In Spring Integration, it can be defined as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得古老的数据结构中的队列概念吗？`QueueChannel`采用了相同的概念——它强制实施**先进先出**（**FIFO**）顺序，并且一个消息只能被一个端点消费。即使通道有多个消费者，这也是一种严格的一对一关系；只有一个消息将交付给它们中的一个。在Spring
    Integration中，它可以定义如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As soon as a message is available on the channel, it will try to send the message
    to the subscribed consumer. The element `capacity` indicates the maximum number
    of undelivered messages to be held in the queue. If the queue is full, which is
    determined by the `capacity` parameter, the sender will be blocked until messages
    are consumed and further room is available in the queue. Alternatively, if a timeout
    parameter has been specified for the sender, the sender will wait for the specified
    timeout interval—if space is created in the queue within the timeout interval,
    the sender will put the message there, else it will discard that message and start
    with an other one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通道上有消息可用，它就会尝试将消息发送给订阅的消费者。元素`capacity`指示队列中保持未交付消息的最大数量。如果队列已满，这是由`capacity`参数确定的，发送者将被阻塞，直到消息被消费并在队列中腾出更多空间。另外，如果发送者已经指定了超时参数，发送者将等待指定的超时间隔——如果在超时间隔内队列中创建了空间，发送者会将消息放在那里，否则它会丢弃该消息并开始另一个。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Although capacity parameter is optional, it should never be left out; otherwise,
    the queue will become unbounded and may result in OutOfMemoryErrors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管容量参数是可选的，但绝不能省略；否则，队列将变得无界，可能会导致内存溢出错误。
- en: Priority channel
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先级通道
- en: 'Queue enforces FIFO, but what if a message needs urgent attention and needs
    to be processed out of the queue? For example, a server health monitoring service
    might send health audits to an *audit service*, but if it sends a server down
    event, it needs urgent processing. This is where `PriorityChannel` is handy; it
    can pick messages based on their priority rather than arrival order. Messages
    can be prioritized as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 队列强制FIFO，但如果一个消息需要紧急注意并需要从队列中处理怎么办？例如，一个服务器健康监控服务可能会将健康审计发送到一个*审计服务*，但如果它发送了一个服务器下线事件，它需要紧急处理。这就是`PriorityChannel`派上用场的地方；它可以基于消息的优先级而不是到达顺序来选择消息。消息可以根据以下方式进行优先级排序：
- en: By adding a `priority` header within each message
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在每条消息中添加一个`priority`头
- en: By providing a comparator of type `Comparator<Message<?>>` to the priority channel's
    constructor
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向优先级通道的构造函数提供一个`Comparator<Message<?>>`类型的比较器
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Default is the `priority` header in the message.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认是消息中的`priority`头。
- en: 'Let''s take the following example of a priority channel and inject a comparator
    there, which will be used to decide the priority of the message:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以以下优先级通道示例为例，并在其中注入一个比较器，该比较器将用于决定消息的优先级：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A comparator can be injected as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 比较器可以按照如下方式注入：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Rendezvous channel
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会合通道
- en: 'Often, it is desirable to have an acknowledgement that the message has indeed
    reached the endpoint. The `rendezvousChannel` interface, which is a subclass of
    the queue channel, serves this purpose. Producer and consumer work in a blocking
    mode. As soon as the producer sends a message on the channel, it is blocked until
    that message has been consumed. Similarly, a consumer is blocked until a message
    arrives in the queue. It can be configured as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们希望有一个确认消息确实到达端点的回执。`rendezvousChannel`接口是队列通道的一个子类，用于此目的。生产者和消费者以阻塞模式工作。一旦生产者在通道上发送了一条消息，它就会被阻塞，直到那条消息被消费。同样，消费者在队列中到达一条消息之前也会被阻塞。它可以按照以下方式配置：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `RendezvousChannel` interface implements a zero capacity queue, which means
    that at any given point, there can exist only one message on the queue. No wonder
    there is no capacity element.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`RendezvousChannel`接口实现了一个零容量队列，这意味着在任何给定时刻，队列中只能存在一个消息。难怪没有容量元素。'
- en: Direct channel
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接通道
- en: Direct channel is the default channel type used by Spring Integration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 直接通道是Spring Integration默认使用的通道类型。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When using the `<channel/>` element without any subelements, it will create
    a `DirectChannel` instance (a `SubscribableChannel`) handler.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用没有任何子元素的`<channel/>`元素时，它会创建一个`DirectChannel`实例（一个`SubscribableChannel`）处理器。
- en: 'Multiple endpoints can subscribe message handlers with the direct channel;
    whenever a producer puts a message on the channel, it is delivered to one and
    only one of the message handlers of subscribed endpoints. The introduction of
    multiple subscribers with a restriction to deliver a message to one and only one
    of the handlers introduces new challenges—how and which handler will be selected
    and what will happen if the handler is not able to process the message? This is
    where a load balancer and failover come into the picture. A load balancer can
    be defined on this channel with a round-robin delivery strategy:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 多个端点可以订阅直接通道的消息处理器；无论何时生产者将一条消息放在通道上，它都会被交付给订阅端点的唯一一个消息处理器。引入多个订阅者，限制将消息交付给唯一一个处理器，带来了新挑战——如何以及哪个处理器将被选择，如果处理器无法处理消息会发生什么？这就是负载均衡器和故障转移进入情景的地方。可以在该通道上定义一个负载均衡器，采用轮询交付策略：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will deliver messages to subscribers on a round-robin basis. This is the
    only strategy defined out-of-the-box by Spring, but a custom strategy can be defined
    using `interface`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将按轮询方式将消息交付给订阅者。这是Spring预定义的唯一策略，但可以使用`interface`定义自定义策略：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is an example of introducing a custom load balancer:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个引入自定义负载均衡器的示例：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you. The code can also be
    pulled from [https://github.com/cpandey05/siessentials](https://github.com/cpandey05/siessentials).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.packtpub.com](http://www.packtpub.com)下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)注册，以便将文件直接通过电子邮件发送给您。代码也可以从[https://github.com/cpandey05/siessentials](https://github.com/cpandey05/siessentials)拉取。
- en: Failover, on other hand, is a Boolean value. If this is set to true, then if
    the first handler fails to process the message, then all subsequent handlers will
    be tried. Even if one of the handlers successfully processes the message, Spring
    Integration will not report an error. Only if all of the handlers fail, will it
    throw an exception.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 故障转移（Failover）是一个布尔值。如果将其设置为true，那么如果第一个处理程序无法处理消息，则将尝试所有后续的处理程序。即使其中一个处理程序成功处理了消息，Spring
    Integration也不会报告错误。只有当所有处理程序都失败时，它才会抛出异常。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Failover capability can be very handy while implementing a transaction propagation
    or for a fallback mechanism. For example, if a DB server fails, try another backend
    server in the next handler.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 故障转移能力在实现事务传播或回退机制时非常有用。例如，如果数据库服务器失败，尝试在下一个处理程序中使用另一个后端服务器。
- en: Executor channel
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行器通道
- en: 'The `ExecutorChannel` interface is a point-to-point message channel. This is
    very similar to the direct channel, except that custom executors can be used to
    dispatch the messages. Let''s have a look at the configuration:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExecutorChannel`接口是一个点对点的消息通道。这非常类似于直接通道，不同之处在于可以使用自定义执行器来分派消息。让我们来看看配置：'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `com.example.ResultExecutor` interface is an implementation of `java.uti.concurrent.Executor`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.example.ResultExecutor`接口是`java.util.concurrent.Executor`的一个实现。'
- en: A transaction link cannot be established between producer and consumer because
    a producer thread hands off the message to an executor instance and backs off—the
    consumption of the message is processed in the executor thread.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因为生产者线程将消息传递给执行器实例并退却——消息的消费在执行器线程中处理，所以生产者和消费者之间无法建立事务链接。
- en: 'As in direct channels, a load-balancing strategy and failover can be set. The
    default values are a round-robin strategy with failover enabled:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就像直接通道一样，可以设置负载均衡策略和故障转移。默认值是启用故障转移的轮询策略：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Scoped channel
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域通道
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A custom scope can also be defined, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以定义自定义作用域，如下：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is an example of a thread scoped channel. If we observe the entries, a
    key-value pair has been defined for the scope. For the thread, the key-value pair
    is `org.springframework.context.support.SimpleThreadScope`. It can be any Spring-defined
    or a user-defined scope.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个线程作用域通道的示例。如果我们观察到条目，为作用域定义了一个键值对。对于线程来说，键值对是`org.springframework.context.support.SimpleThreadScope`。它可以是任何Spring定义的或用户定义的作用域。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some of the other Spring implemented scopes are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Spring实现的其它作用域：
- en: '`org.springframework.web.context.request.SessionScope`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.context.request.SessionScope`'
- en: '`org.springframework.web.context.support.ServletContextScope`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.context.support.ServletContextScope`'
- en: '`org.springframework.web.context.request.RequestScope`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.context.request.RequestScope`'
- en: '`org.springframework.web.portlet.context.PortletContextScope`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.portlet.context.PortletContextScope`'
- en: Datatype channel
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型通道
- en: 'A channel can be restricted to accept messages having only a certain type of
    payload, for example, numbers, string, or any other custom type. The code is as
    follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通道可以限制只接受具有特定类型有效负载的消息，例如数字、字符串或其他自定义类型。代码如下：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Multiple types can also be provided, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以提供多种类型，如下：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'What will happen if a message arrives in a format other than the one given
    in the preceding code? By default, an exception will be thrown. However, if the
    use case warrants, we can define converters, which will try to convert incoming
    messages into an acceptable format. A typical use case is the conversion of a
    string to an integer. For this to happen, a bean named `integrationConversionService`
    that is an instance of Spring''s Conversion Service must be defined as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果消息以除了前面代码中给出的格式以外的格式到达会发生什么？默认情况下，将抛出异常。然而，如果用例需要，我们可以定义转换器，尝试将传入的消息转换为可接受的格式。一个典型的用例是将字符串转换为整数。为了实现这一点，需要定义一个名为`integrationConversionService`的bean，它是Spring的转换服务的实例，如下所示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When the `converter` element is parsed, it will create the `integrationConversionService`
    bean on-demand, if one is not already defined. With that converter in place, if
    a string message arrives on a channel defined as an integer, an attempt would
    be made to convert it to an integer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当解析`converter`元素时，如果尚未定义，它将按需创建`integrationConversionService` bean。有了这个转换器，如果一个字符串消息到达定义为整数的通道，将尝试将其转换为整数。
- en: Error handling on channels
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道上的错误处理
- en: 'Spring Integration supports synchronous as well as asynchronous message processing.
    In the case of synchronous processing, it is comparatively easy to handle error
    scenarios based on return values or by catching thrown exceptions; for asynchronous
    processing, things are more complicated. There are components provided by Spring,
    such as filters and routers, that can be used to validate message sanity and take
    action based on that. If it''s invalid, the message can be routed to an invalid
    channel or a retry channel as the case may be. Apart from this, Spring provides
    a global error channel and capability to define custom error channels. The following
    points cover an appropriate error channel:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration支持同步以及异步消息处理。在同步处理的情况下，根据返回值或通过捕获抛出的异常来处理错误场景相对容易；对于异步处理，事情会更加复杂。Spring提供了诸如过滤器和中继器之类的组件，可以用来验证消息的有效性并根据那个采取行动。如果它无效，消息可以被路由到无效通道或重试通道。除此之外，Spring提供了一个全局错误通道以及定义自定义错误通道的能力。以下几点涵盖了适当的错误通道：
- en: 'An error channel needs to be defined. This can be done as follows:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要定义一个错误通道。这可以通过以下方式完成：
- en: '[PRE21]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A header named `errorChannel` needs to be added to the message. This is the
    name of the channel where `ErrorMessage` should be routed when processing fails.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要添加一个名为`errorChannel`的头部到消息中。这是处理失败时`ErrorMessage`应该路由到的通道的名称。
- en: If message processing fails, `ErrorMessage` will be sent to the channel specified
    by the header `errorChannel`.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果消息处理失败，`ErrorMessage`将被发送到由头部`errorChannel`指定的通道。
- en: 'If the message does not contain a `errorChanel` header, `ErrorMessage` will
    be routed to a global error channel defined by Spring Integration, which is `errorChannel`.
    This channel is a publish-subscribe channel:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果消息不包含`errorChanel`头部，`ErrorMessage`将被路由到由Spring Integration定义的全局错误通道，即`errorChannel`。这是一个发布-订阅通道：
- en: '[PRE22]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Persisting and recovering channels
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化和恢复通道
- en: 'We talked about all kind of channels, but if you have noticed, these are all
    in memory. What if the system crashes? No one wants to lose data. This is where
    persistent `QueueChannel` comes into the picture—messages will be backed up in
    the database defined by the data source. If the system crashes, then on recovery,
    it will pull all the messages in the database and queue them for processing. This
    is achieved in Spring using `MessageGroupStore`. Let''s have a quick look at the
    configuration:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了各种各样的通道，但如果你注意到了，这些都是内存中的。系统崩溃怎么办？没有人想丢失数据。这就是持久`QueueChannel`发挥作用的地方——消息将被备份在由数据源定义的数据库中。如果系统崩溃，然后在恢复时，它将拉取数据库中的所有消息并将它们排队等待处理。这是使用Spring中的`MessageGroupStore`实现的。让我们快速看一下配置：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, the message store is mapped to the database defined by `someDataSource`.
    When a message arrives, it will now be added to `MessageStore` first. On successful
    processing, it will be removed from there.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，消息存储被映射到由`someDataSource`定义的数据库。当消息到达时，现在将首先添加到`MessageStore`中。成功处理后，将从那里删除。
- en: The moment we talk of databases, transaction comes into the picture. So what
    if the poller has a transaction configured? In that case, if message processing
    fails, the transaction will be rolled backed and the message will not be deleted
    from the queue.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们谈论数据库，事务就会进入视野。那么如果轮询器配置了事务会怎样呢？在这种情况下，如果消息处理失败，事务将被回滚，消息将不会从队列中删除。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If transactional behavior is supported, messages will not be removed from the
    queue until they have been successfully processed. If some messages fail repeatedly,
    this may build up stale messages in the queue over time. A clean-up strategy for
    such messages must be thought through.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果支持事务行为，消息将在成功处理后从队列中删除。如果某些消息反复失败，随着时间的推移，队列中可能会积累陈旧的消息。必须仔细考虑这种消息的清理策略。
- en: Channel interceptors
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道拦截器
- en: 'Interceptor patterns can be used to apply business rules and validations on
    messages that are either sent from the channel or received on it. The following
    four interceptors are available:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器模式可用于对从通道发送或接收的消息应用业务规则和验证。以下四种拦截器可用：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here are the methods exposed by the `ChannelInterceptor` interface:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由`ChannelInterceptor`接口暴露的方法：
- en: '`preSend`: This is invoked before a message is sent. A null value should be
    returned if the message is blocked from sending.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preSend`: 这是在消息发送之前调用的。如果消息被阻止发送，应返回null值。'
- en: '`postSend`: This is invoked after an attempt to send a message. It indicates
    whether the message was sent successfully or not. This can be used for audit purposes.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postSend`: 在尝试发送消息之后调用。它表示消息是否成功发送。这可以用于审计目的。'
- en: '`preReceive`: This applies only if the channel is pollable and is invoked when
    a component calls `receive()` on the channel, but before a message is actually
    read from that channel. It allows implementers to decide whether the channel can
    return a message to the caller.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preReceive`: 仅当通道是轮询的时适用，当组件对通道调用`receive()`时调用，但在实际从该通道读取消息之前。它允许实现者决定通道是否可以向调用者返回消息。'
- en: '`postReceive`: This is similar to `preReceive` and it applies only to pollable
    channels. It''s invoked after a message is read from a channel but before it''s
    returned to the component that called `receive()`. If it returns a null value,
    then no message is received. This allows the implementer to control what, if anything,
    is actually received by the poller.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postReceive`: 这与`preReceive`类似，仅适用于轮询通道。在从通道读取消息但在将其返回给调用`receive()`的组件之后调用。如果返回null值，则没有接收消息。这允许实现者控制轮询器实际接收了什么（如果有的话）。'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This is a comparatively long chapter in which we discussed message channel patterns,
    different types of channels, and the default implementations of channels provided
    by Spring. We also covered load balancing, failover, error handling on message
    channels, persisting messages, and adding interceptors. All these concepts are
    at the core of building a reliable and scalable solution, and we will see its
    hands-on implementation in the upcoming chapters where we will discuss Spring
    Integration components such as service activators, gateway, delayers, and so on
    that are used to process messages.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容相对较长，我们讨论了消息通道模式、不同类型的通道以及Spring提供的默认通道实现。我们还介绍了负载均衡、故障转移、在消息通道上的错误处理、消息持久化以及添加拦截器。所有这些概念都是构建可靠和可扩展解决方案的核心，我们将在接下来的章节中看到其实际实现，届时我们将讨论Spring
    Integration组件，如服务激活器、网关、延迟器等，这些组件用于处理消息。
