- en: 'Chapter 3: Common Architecture Design Techniques'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：常见的架构设计技术
- en: In the previous chapter, [*Chapter 2*](B16354_02_Final_JM_ePUB.xhtml#_idTextAnchor034),
    *Software Requirements – Collecting, Documenting, Managing*, we highlighted techniques
    to retrieve and analyze the features an application should have. This is done
    by interacting with the business and other stakeholders and describing what the
    desired behavior should be. We now have all the ingredients needed to start baking
    our application. The first—very important—step is to define the architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章[*第2章*](B16354_02_Final_JM_ePUB.xhtml#_idTextAnchor034)，*软件需求 – 收集、记录、管理*中，我们强调了检索和分析应用程序应具备的功能的技术。这是通过与业务和其他利益相关者互动，并描述所需的行为来完成的。我们现在已经拥有了开始烘焙我们的应用程序所需的所有成分。第一个——非常重要的——步骤是定义架构。
- en: It is debated as to how much, in terms of resources, you should invest in this
    phase. Some experts argue that architecture design is the most important phase,
    while others claim that it's crucial to keep a flexible approach, being able to
    adapt the architecture while the solution is evolving according to new ideas coming
    in or shifting external conditions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在这个阶段应该投入多少资源，人们存在争议。一些专家认为架构设计是最重要的阶段，而其他人则声称保持灵活的方法至关重要，能够在解决方案根据新想法或外部条件的变化而演变时调整架构。
- en: For sure, both ideas are interesting and have some strong points. Whatever your
    point of view on that is, it is really useful to have a clear understanding of
    what the most common ways of documenting the architectures you will design are.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这两个想法都很吸引人，并且有一些优点。无论你对这个问题的看法如何，清楚地了解你将设计的架构最常见记录方式是非常有用的。
- en: 'This is a topic we started to touch on in [*Chapter 1*](B16354_01_Final_JM_ePUB.xhtml#_idTextAnchor013),
    *Designing Software Architectures in Java – Methods and Styles*. But while in
    the first chapter the idea was to start sketching some ideas and brainstorm potential
    solutions, in this chapter, we will cover a detailed design. This means exploring
    different modeling techniques, walking through notation and diagram types, and
    creating artifacts that are shareable and clear to understand for other team members.
    In this chapter, you will learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们在[*第1章*](B16354_01_Final_JM_ePUB.xhtml#_idTextAnchor013)，*Java中的软件架构设计
    – 方法与风格*中开始触及的话题。但在第一章中，我们的想法是开始勾勒一些想法，并头脑风暴可能的解决方案，而在这一章中，我们将涵盖详细设计。这意味着探索不同的建模技术，了解符号和图表类型，并创建其他团队成员可以共享且易于理解的工件。在这一章中，你将了解以下主题：
- en: Introducing marchitectures—impactful and purely demonstrative schemas
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍**marchitectures**—影响力大且纯粹演示性的架构
- en: Familiarizing ourselves with **Unified Modeling Language** (**UML**) notation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉**统一建模语言**（**UML**）符号
- en: Exploring **ArchiMate**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索**ArchiMate**
- en: Introducing the **C4 model**
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍**C4模型**
- en: Other modeling techniques – **Business Process Model and Notation** (**BPMN**),
    **Decision Model and Notation** (**DMN**), and **arc42**
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他建模技术 – **业务流程模型和符号**（**BPMN**），**决策模型和符号**（**DMN**），以及**arc42**
- en: Case studies and examples
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究和示例
- en: 'But first of all, let''s start by having a look at a less structured but widely
    used architectural style, with a funny and a bit of an ugly name: **marchitectures**.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们先看看一种不太结构化但广泛使用的架构风格，它有一个有趣且有点丑陋的名字：**marchitectures**。
- en: Introducing marchitectures – impactful and purely demonstrative schemas
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍**marchitectures** – 影响力大且纯粹演示性的架构
- en: With its name being a portmanteau of marketing and architecture, as you can
    imagine, **marchitectures** are a very common tool to pitch your solution and
    get sponsorship (and often the budget) for your project. You don't need to get
    into technical details, nor to cover every aspect of the solution; the idea here
    is to give an idea of what the finished product will look like.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个由市场和建筑组合而成的混合词，正如你可以想象的，**marchitectures**是一个非常常见的工具，用来推销你的解决方案并获得项目赞助（以及通常的预算）。你不需要深入了解技术细节，也不需要涵盖解决方案的各个方面；这里的想法是给出一个关于最终产品外观的初步概念。
- en: From a content point of view, marchitectures are no more and no less than a
    polished version of the first whiteboard sketches of a software architecture.
    This includes the same vague meaning, incomplete vision, and mixed point of view
    that we discussed in [*Chapter 1*](B16354_01_Final_JM_ePUB.xhtml#_idTextAnchor013),
    *Designing Software Architectures in Java – Methods and Styles*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从内容角度来看，架构图不过是软件架构最初的白板草图的一个精炼版本。这包括我们在 [*第一章*](B16354_01_Final_JM_ePUB.xhtml#_idTextAnchor013)
    中讨论的相同含糊的意义、不完整的愿景和混杂的观点。
- en: Marchitectures often complement mockups of the **User Interface** (**UI**),
    marketing research, and industry trends. You want to convince the stakeholders
    (budget owners, investors, and so on) that your idea is a good one and that the
    underlying architecture (and implementation) will be rock-solid, yet flexible
    enough to follow the evolutions that the business will drive.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 架构图经常与用户界面（**UI**）的草图、市场研究和行业趋势相辅相成。你想要说服利益相关者（预算所有者、投资者等）你的想法是好的，并且基础架构（和实现）将是坚如磐石，同时足够灵活以适应业务带来的演变。
- en: It is definitely an ambitious goal and is sometimes—inevitably—not fully met.
    Indeed, the real architecture will often only partially look like what you defined
    in your marchitecture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是一个雄心勃勃的目标，有时——不可避免地——并不能完全实现。事实上，真正的架构通常只会部分地看起来像你在架构图中定义的那样。
- en: Marchitectures are often used by software vendors and for good reason. If you
    are pitching a product (or a framework, or a service), you don't want to be too
    specific on what the finished solution will look like. You just need to give a
    high-level idea of how your product works. Maybe authentication will be different,
    and maybe you will need to integrate third-party systems into the final picture,
    but the important thing is to have a shiny picture of how good your architecture
    (marchitecture) looks. There is time to get into the nitty-gritty details later.
    UML notation, which we will look at in the next section, is a very good way to
    document those details.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 架构图经常被软件供应商使用，这是有充分理由的。如果你在推销一个产品（或一个框架，或一项服务），你不想对最终解决方案的具体样子过于具体。你只需要提供一个关于你的产品如何工作的高层次概念。也许认证会有所不同，也许你需要将第三方系统集成到最终画面中，但重要的是要有一个关于你的架构（架构图）看起来多么出色的闪亮画面。稍后我们会有时间深入了解细节。我们将在下一节中探讨的
    UML 符号，是记录这些细节的一个非常好的方式。
- en: Familiarizing ourselves with UML notation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉 UML 符号
- en: There are things in this book that we need to treat with reverential respect;
    **UML** is one of them. This modeling language is simply a piece of IT history.
    You should take into account that UML is a very comprehensive and articulate standard,
    aimed at modeling and representing a wide number of concepts. For this reason,
    going through the whole specification is out of the scope of this book.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，有一些内容我们需要以崇敬的态度对待；**UML** 就是其中之一。这种建模语言仅仅是信息技术历史的一部分。你应该考虑到 UML 是一个非常全面和清晰的标准，旨在建模和表示大量概念。因此，全面地研究整个规范超出了本书的范围。
- en: But by the end of this section, you will have a grasp of the UML philosophy,
    and we will have covered practical examples of the most widespread UML diagrams.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但到本节结束时，你将掌握 UML 的哲学思想，我们将涵盖最广泛使用的 UML 图的实际例子。
- en: Important Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It's worthwhile deepening your knowledge of the UML language. To do this, you
    will find plenty of resources on the web. I would also suggest you have a look
    at the official UML website, and at *The Unified Modeling Language User Guide*
    by Booch, Rumbaugh, and Jacobson (more information is available in the *Further
    reading* section of this chapter), which is probably the most important UML book,
    written by the original authors of the language.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解 UML 语言的知识是值得的。为此，你将在网上找到大量资源。我还会建议你查看官方 UML 网站，以及 Booch、Rumbaugh 和 Jacobson
    编著的 *《统一建模语言用户指南》*（更多信息可在本章的 *进一步阅读* 部分找到），这可能是最重要的 UML 书籍，由该语言的原始作者撰写。
- en: 'Now, let''s look at the fascinating UML genesis in the next section, where
    we will see how UML started as a joint effort by different working groups that
    were all working to solve a common problem: defining a language to break the barrier
    between designing and implementing a software solution.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在下一节中看看迷人的 UML 起源，我们将看到 UML 是如何作为不同工作组共同努力的成果而诞生的，这些工作组都在努力解决一个共同问题：定义一种语言来打破设计和实现软件解决方案之间的障碍。
- en: Understanding the background to UML
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 UML 的背景
- en: UML's history began in the 1990s and is strictly related to **object-oriented
    programming**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: UML的历史始于20世纪90年代，与**面向对象编程**密切相关。
- en: UML was born from an effort to standardize object modeling and the conceptual
    representation of object-oriented software. A further objective was to create
    an object that is both human- and machine-readable, supporting the life cycle
    starting from analysis, and moving toward implementation and testing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: UML起源于标准化对象建模和面向对象软件的概念表示的努力。另一个目标是创建一个既适合人类阅读也适合机器阅读的对象，支持从分析开始的生命周期，并逐步转向实现和测试。
- en: The history of the UML standard starts with a cross-company, meritocratic effort
    to find a solution to common problems. This looks a lot like the open source development
    model. Everybody is free to contribute and share ideas with the community, regardless
    of their role or the company they are working for.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: UML标准的历程始于一个跨公司、基于功绩的努力，旨在找到解决共同问题的方案。这很像开源开发模型。无论他们的角色或他们为之工作的公司如何，每个人都可以自由地贡献和与社区分享想法。
- en: Let's look at an overview of what's contained in the UML framework.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看UML框架中包含的内容概述。
- en: Walking through the UML basics, as we discussed, UML was created to model object-oriented
    systems, and in theory, diagrams created with UML can be automatically translated
    into source code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，UML的创建是为了建模面向对象系统，从理论上讲，使用UML创建的图表可以自动转换为源代码。
- en: 'There are a number of interesting principles in the UML language, making it
    just as useful and relevant today, more than 20 years after its inception, as
    when it was created. Let''s have a look at some of them here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: UML语言中包含许多有趣的原则，使其在诞生20多年后的今天仍然具有实用性和相关性。让我们在这里看看其中的一些：
- en: UML is independent of the development methodology, meaning that it can be used
    even in modern Agile and **DevOps** teams. Some of the diagrams introduced by
    UML are commonly used in those contexts too. The goal of the language is to visualize,
    specify, construct, and document OO systems.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML与开发方法无关，这意味着即使在现代敏捷和**DevOps**团队中也可以使用它。UML引入的一些图表也常用于这些环境中。该语言的目标是可视化、指定、构建和记录面向对象系统。
- en: UML is usually associated with diagrams and graphical artifacts. While they
    are, indeed, a core concept of the language, UML also defines the related semantics.
    This means that the reasoning for everything is well defined and formalized so
    that both a trained person and a machine can understand what a UML diagram represents
    in all its details.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML通常与图表和图形元素相关联。虽然它们确实是该语言的核心概念，但UML还定义了相关的语义。这意味着对一切推理都是明确且形式化的，以便训练有素的人和机器都能理解UML图表所代表的全部细节。
- en: UML concepts are built upon three different kinds of building blocks—namely,
    **things**, **relationships**, and **diagrams**. These are further organized into
    subcategories. For each of those concepts, a graphical representation (symbol)
    is provided.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML概念建立在三种不同的构建块之上——即**事物**、**关系**和**图表**。这些进一步被组织成子类别。对于这些概念中的每一个，都提供了一个图形表示（符号）。
- en: These building blocks are covered in detail in the following subsections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些构建块将在以下子节中详细介绍。
- en: Things
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事物
- en: '**Things** are core entities that have the goal of abstracting concepts represented
    by the system. Things are further grouped into other subtypes, as outlined here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**事物**是具有抽象系统表示概念的目标的核心实体。事物进一步被划分为其他子类型，如下所述：'
- en: '**Structural things**: These are the most essential elements in object-oriented
    programming (such as classes and interfaces)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构事物**：这些是面向对象编程中最基本元素（如类和接口）'
- en: '**Behavioral things**: These represent interactions (such as messages and actions)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为事物**：这些代表交互（如消息和动作）'
- en: '**Grouping things**: These are used to organize other things (packages are
    an example)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分组事物**：这些用于组织其他事物（例如，包是一个例子）'
- en: '**Annotational things**: These support elements to document the models (such
    as notes)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释事物**：这些支持元素来记录模型（如注释）'
- en: Relationships
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系
- en: '**Relationships** model the links between things. These are further organized
    into four main categories, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**关系**模型事物之间的链接。这些进一步被组织成以下四个主要类别：'
- en: '`BusinessLogic` component, providing validations, checks, and so on, and a
    `PaymentService` component, called from the `BusinessLogic` component in order
    to provide payment functionalities. A change in the methods of the `PaymentService`
    component will require a change in the BackendAPI that uses it.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BusinessLogic` 组件，提供验证、检查等功能，以及一个名为 `PaymentService` 的组件，该组件由 `BusinessLogic`
    组件调用以提供支付功能。`PaymentService` 组件方法的更改将需要更改使用它的 BackendAPI。'
- en: '`PaymentTransaction` component with a user. Each payment must reference at
    least one user of the platform (that is, the one making the payment).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有用户的 `PaymentTransaction` 组件。每次支付都必须引用平台上的至少一个用户（即进行支付的人）。
- en: '`MobilePayment` interface is a specific type of `PaymentTransaction` component,
    inheriting from it.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MobilePayment` 接口是 `PaymentTransaction` 组件的一种特定类型，从它继承而来。'
- en: '`IPaymentService` interface, and its practical implementation—such as `MobilePayment`—implementing
    one particular way of making a payment (and abstracting the caller from the implementation
    details).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IPaymentService` 接口，以及其实际实现——例如 `MobilePayment`——实现了一种特定的支付方式（并抽象了调用者从实现细节中）。'
- en: Diagrams
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图表
- en: '**Diagrams** are schemas representing meaningful sets of things. They are technically
    graphs, which helps them to be easily read and written by machines. Diagrams can
    be classified as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**图表**是表示有意义的事物集合的方案。技术上它们是图，这有助于它们被机器轻松读取和写入。图表可以按以下方式分类：'
- en: '**Structural**: Describing the static aspects of a system, such as the structure,
    grouping, and hierarchy of objects'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构**：描述系统的静态方面，如结构、分组和对象的层次结构'
- en: '**Behavioral**: Describing the interactions between objects'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为**：描述对象之间的交互'
- en: Diagrams are the most widely known concept of UML. It is very likely that you
    have already seen a class diagram or a sequence one. In my opinion, diagrams are
    one of the most useful UML concepts. For this reason, we will walk through the
    main types of diagrams in the following upcoming sections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是 UML 最为人所知的概念。你很可能已经见过一个类图或序列图。在我看来，图表是 UML 中最有用的概念之一。因此，在接下来的几个部分中，我们将详细介绍主要类型的图表。
- en: 'In the following diagram, you can see a graphical representation of the UML
    things we''ve just seen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图表中，你可以看到我们刚刚看到的 UML 事物的图形表示：
- en: '![Figure 3.1 – Graphical representation of some UML things'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 一些 UML 事物的图形表示'
- en: '](img/Figure_3.01_B16354.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.01_B16354.jpg)'
- en: Figure 3.1 – Graphical representation of some UML things
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 一些 UML 事物的图形表示
- en: 'In the next diagram, we represent the graphical symbols of the UML relationships
    we''ve described:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个图表中，我们表示了 UML 关系的图形符号：
- en: '![Figure 3.2 – Graphical representation of some UML relationships'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 一些 UML 关系的图形表示'
- en: '](img/Figure_3.02_B16354.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.02_B16354.jpg)'
- en: Figure 3.2 – Graphical representation of some UML relationships
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 一些 UML 关系的图形表示
- en: With regard to UML diagrams, due to their relevance, we will walk through some
    of the most common ones in the next sections.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 UML 图表，鉴于其相关性，在下一节中我们将介绍一些最常见的图表。
- en: Class diagrams
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类图
- en: Since the beginning of this section, we've made it clear that UML is all about
    **object-oriented** modeling, which is expected since **Java** (probably the most
    widespread object-oriented language) is one of the pillars of this book, and—of
    course—modeling classes are one of the most important aspects of object-oriented
    modeling. I'm pretty sure you've already seen (or used) class diagrams. They're
    a very common and natural way to represent classes and how they are made, and
    indeed are used in countless documentation on the internet.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从本节开始，我们已经明确指出 UML 是关于 **面向对象** 的建模，这是预期的，因为 **Java**（可能是最广泛使用的面向对象语言）是本书的支柱之一，当然——建模类是面向对象建模最重要的方面之一。我非常确信你已经见过（或使用过）类图。它们是表示类及其构成的一种非常常见和自然的方式，并且确实在互联网上的无数文档中得到了应用。
- en: A class diagram is made up of a set of classes (including their fields and methods)
    and the relationships between them. Interfaces are represented where present,
    and so is inheritance between classes. As per the other diagrams, a class diagram
    is conceptually a graph, made up of arcs and vertices.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 类图由一组类（包括它们的字段和方法）以及它们之间的关系组成。接口在存在的地方表示，类之间的继承也是如此。与其他图一样，类图在概念上是一个图，由弧和顶点组成。
- en: A class diagram is intended to highlight a specific subset of the whole architecture,
    so the class represented is part of a given use case or belongs to a specific
    subdomain.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 类图旨在突出整个架构的特定子集，因此所表示的类是给定用例的一部分或属于特定的子域。
- en: 'It''s worth noticing that the relationships will represent both the kind of
    cooperation/responsibility between the classes and the multiplicity of the relationship
    itself (for example, one-to-many, one-to-one, and similar cardinalities). This
    is what a basic class diagram looks like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这些关系将表示类之间的合作/责任类型以及关系的多重性本身（例如，一对一、一对多和类似的基数）。这就是基本类图的样子：
- en: '![Figure 3.3 – Basic class diagram'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.3 – Basic class diagram](img/Figure_3.03_B16354.jpg)'
- en: '](img/Figure_3.03_B16354.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.03 – Basic class diagram](img/Figure_3.03_B16354.jpg)'
- en: Figure 3.3 – Basic class diagram
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 基本类图
- en: As you can see, a class diagram is a great way to model the structure of a logical
    subdomain of the application (objects and their links). In the next section, we
    will look at sequence diagrams, which are another very widespread representation,
    focusing more on the end-to-end interactions needed to implement the functionality.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，类图是建模应用程序逻辑子域结构（对象及其链接）的一种很好的方式。在下一节中，我们将探讨序列图，这是另一种非常广泛的应用，它更多地关注实现功能所需的前后端交互。
- en: Sequence diagram
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列图
- en: A **sequence diagram** is probably one of the most famous UML diagrams. This
    diagram is a particular instance of so-called interaction diagrams, which are
    a representation of a set of objects (such as software components and actors)
    and how they interact (for example, exchanging messages). In the case of sequence
    diagrams, the interaction is pictured in a linear way, representing interactions
    ordered by the temporal dimension.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列图**可能是最著名的UML图之一。这个图是所谓的交互图的一个特定实例，它表示了一组对象（如软件组件和参与者）以及它们如何交互（例如，交换消息）。在序列图的情况下，交互以线性方式呈现，表示按时间维度排序的交互。'
- en: From a graphical viewpoint, a sequence diagram pictures objects in a row, each
    one with a line going down vertically (also known as a **lifeline**). Crossing
    those lifelines, interactions are laid out as horizontal lines, intersecting the
    involved objects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从图形角度来看，序列图按行排列对象，每个对象都有一条垂直向下延伸的线（也称为**生命线**）。穿过这些生命线，交互以水平线的形式展开，与涉及的对象相交。
- en: A sequence diagram also offers a way to represent conditions and iterations.
    **Conditions**, **parallelization**, **loops**, and **optional** are represented
    by drawing a box around the interactions and tagging the box with the right keyword.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 序列图还提供了一种表示条件和迭代的方法。**条件**、**并行化**、**循环**和**可选**通过围绕交互绘制一个框并使用正确的关键字标记该框来表示。
- en: Given the nice level of detail that can be expressed by the message flow (including
    the time ordering) and the expressiveness provided by the structured controls
    (conditions and such), sequence diagrams are a very nice way to analyze and document
    functionalities, by breaking them up into smaller operations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到消息流（包括时间顺序）可以表达的良好细节级别以及结构化控制（条件等）提供的表达能力，序列图通过将它们分解成更小的操作，是一种分析记录功能的好方法。
- en: 'This is what a sequence diagram looks like:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是序列图的样子：
- en: '![Figure 3.4 – Sequence diagram'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.4 – Sequence diagram](img/Figure_3.04_B16354.jpg)'
- en: '](img/Figure_3.04_B16354.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.04 – Sequence diagram](img/Figure_3.04_B16354.jpg)'
- en: Figure 3.4 – Sequence diagram
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 序列图
- en: 'As you can see in the first row of the diagram, we have in this case a user
    and two components, whereby the following applies:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在图的第1行所见，在这种情况下有一个用户和两个组件，以下适用：
- en: Each one of them has a lifeline, which is highlighted to represent activation
    when an interaction is made (for example, a method is called, or a message is
    sent).
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一个都有一条生命线，当进行交互时（例如，调用方法或发送消息）会被突出显示以表示激活。
- en: A self-message is pictured as a curved line, representing the call of a method
    on the same component.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自消息以曲线的形式呈现，表示在同一组件上调用方法。
- en: A loop is represented as a frame with a tag. In the tag, other than loops, `opt`
    (`par` (`alt` (`opt` identifies an optional interaction that will happen only
    if a specified condition is met (such as an `if` block), `par` represents a parallel
    interaction (such as two methods called in parallel in a multithread fashion),
    and `alt` matches alternative conditions, such as an `if`/`else` block.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环用带有标签的框架表示。在标签中，除了循环之外，`opt`（`par`（`alt`（`opt`标识一个只有在满足指定条件（如`if`块）时才会发生的可选交互，`par`表示并行交互（如以多线程方式并行调用的两个方法），而`alt`匹配替代条件，例如`if`/`else`块。
- en: The same kind of notation (box with a tag) can be used to represent sub diagrams.
    In this case, the tag has a `ref` value, while the name of the diagram representing
    that part is reported in the box. This provides a simple way of breaking down
    big and complex sequence diagrams into smaller ones.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样的符号（带有标签的框）可以用来表示子图。在这种情况下，标签有一个`ref`值，而表示该部分的图表的名称则报告在框中。这提供了一种简单的方法，将大而复杂的序列图分解成更小的图表。
- en: With this look at sequence diagrams, we have completed our very brief overview
    of the most common UML ideas.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对序列图的这种观察，我们完成了对最常见UML思想的简要概述。
- en: Wrapping up on UML
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结UML
- en: As we said at the very beginning of this section, UML is a big and complete
    framework that is too complex to summarize in just a few pages. However, the essential
    concepts we have seen so far (including class diagrams and sequence diagrams)
    are a good way to start getting used to this language and add some useful tools
    to your toolbox. Of course, my advice is to go deeper and get to know more diagrams
    and techniques from this awesome language.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节开头所说，UML是一个庞大而完整的框架，无法在几页纸中总结。然而，我们迄今为止看到的本质概念（包括类图和序列图）是开始熟悉这种语言并给你的工具箱添加一些有用工具的好方法。当然，我的建议是深入研究，了解更多来自这个了不起语言的图表和技术。
- en: 'In the next section, we are going to explore a technique that shares many similarities
    with UML: ArchiMate.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一种与UML有许多相似之处的技术：ArchiMate。
- en: Exploring ArchiMate
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索ArchiMate
- en: '**ArchiMate** is an architectural modeling technique aimed at analyzing and
    documenting enterprise architectures. This means that, while still having roots
    in technology and software, it''s usually adopted in projects with a broader scope,
    such as documenting the whole enterprise technology landscape (also known as **enterprise
    architecture**) and modeling the business processes implemented by the underlying
    technology implementation.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArchiMate**是一种面向企业架构分析和文档化的架构建模技术。这意味着尽管它仍然根植于技术和软件，但它通常被应用于范围更广的项目中，例如记录整个企业技术景观（也称为**企业架构**）以及建模底层技术实现所实施的业务流程。'
- en: ArchiMate's name is a merging of *architecture* and *animate*, implying that
    one goal of this framework is to display the enterprise architecture in an intuitive
    way. ArchiMate was created in the early 2000s in the Netherlands, the result of
    a concerted effort from players in the government, industry, and academic sectors.
    Soon after the first drafts of this standard, the governance was transferred to
    **The Open Group**, an industry consortium regulating many other IT standards,
    such as **The Open Group Architectural Framework** (**TOGAF**, which is an enterprise
    architecture standard) and the **Single Unix Specification** (**SUS**, which is
    a **Portable Operating System Interface** (**POSIX**)-standard superset). The
    Open Group is also behind other famous standards in the Java world, such as **Service
    Oriented Architecture** (**SOA**) and **eXtended Architecture** (**XA**).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ArchiMate这个名字是*架构*和*动态*的结合，意味着这个框架的一个目标是以直观的方式展示企业架构。ArchiMate在21世纪初的荷兰被创造出来，这是政府、行业和学术界参与者共同努力的结果。在标准的第一稿之后不久，治理权就转移到了**The
    Open Group**，这是一个监管许多其他IT标准的行业联盟，例如**The Open Group架构框架**（**TOGAF**，这是一个企业架构标准）和**单一Unix规范**（**SUS**，这是一个**可移植操作系统接口**（**POSIX**）标准的超集）。The
    Open Group也是Java世界其他著名标准的背后推手，例如**面向服务的架构**（**SOA**）和**扩展架构**（**XA**）。
- en: Let's start with the ArchiMate Core Framework.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从ArchiMate核心框架开始。
- en: The ArchiMate Core and Full Frameworks
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArchiMate核心和完整框架
- en: 'The first concept to approach in ArchiMate is the **Core Framework**. The ArchiMate
    Core Framework is a 3x3 matrix, created by crossing three layers (**Business**,
    **Application**, and **Technology**) stacked with three aspects (represented vertically:
    **Passive Structure**, **Behavior**, and **Active Structure**).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArchiMate中首先要接触的概念是**核心框架**。ArchiMate核心框架是一个3x3矩阵，通过交叉三个层级（**业务**、**应用**和**技术**）和三个方面（垂直表示：**被动结构**、**行为**和**主动结构**）而创建。
- en: 'This is what the Core Framework matrix looks like:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是核心框架矩阵的样子：
- en: '![Figure 3.5 – ArchiMate Core Framework'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 – ArchiMate核心框架'
- en: '](img/Figure_3.05_B16354.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.05_B16354.jpg]'
- en: Figure 3.5 – ArchiMate Core Framework
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – ArchiMate核心框架
- en: 'The layers are a way to look at the same concept (or closely related concepts)
    from three different perspectives. In a way, a concept in one layer makes use
    of or is linked to concepts in nearby layers. You can see the three layers as
    a specification from the more abstract (business) to the more concrete (technology),
    as outlined here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 层次是一种从三个不同角度看待相同概念（或密切相关概念）的方法。从某种意义上说，一个层级的概念利用或与附近层级的概念相关联。您可以将这三个层级视为从更抽象（业务）到更具体（技术）的规范，如下所述：
- en: The **Business** layer revolves around business capabilities, usually offered
    to the external world (for example, final customers). This includes business processes,
    events, and functions related to high-level capabilities.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务**层围绕业务能力展开，通常向外部世界（例如，最终客户）提供（例如，业务流程、事件和与高级能力相关的功能）。'
- en: The **Application** layer includes the software components offering capabilities
    to the **Business** layer.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用**层包括向**业务**层提供能力的软件组件。'
- en: The **Technology** layer is the technical infrastructure supporting the software
    components, including hardware and communication.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术**层是支持软件组件的技术基础设施，包括硬件和通信。'
- en: 'The aspects are a way to classify objects by their role in an activity, as
    outlined here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 方面是一种通过活动中的角色对对象进行分类的方法，如下所述：
- en: '**Active Structure** includes the elements starting an action (including actors,
    devices, and software components).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动结构**包括开始动作的元素（包括参与者、设备和软件组件）。'
- en: '**Behavior** includes the action itself being made by something in the **Active
    Structure** aspect (such as an actor).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为**包括在**主动结构**方面由某物执行的动作本身（例如，参与者）。'
- en: '**Passive Structure** includes the objects on which the activity is made (for
    instance, the recipient of the action itself, such as a data object).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动结构**包括活动所基于的对象（例如，动作本身接收者，如数据对象）。'
- en: You should take into account the fact that some objects can be part of more
    than one aspect.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该考虑到某些对象可能属于多个方面。
- en: 'As you will see, the Core Framework provides a simple way to place and categorize
    objects, and it enables multiple viewpoints. Also, take into account that ArchiMate
    diagrams do not necessarily follow this matrix layout: this is merely a conceptual
    way to demonstrate layers and aspects and how they are related.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将看到的，核心框架提供了一种简单的方法来放置和分类对象，并允许多个视角。此外，请注意，ArchiMate图不一定遵循这种矩阵布局：这仅仅是一种概念性的方式来展示层次和方面以及它们之间的关系。
- en: 'The ArchiMate standard also provides an extended version of the framework.
    In this framework, three more layers are added, as outlined here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ArchiMate标准还提供了一个框架的扩展版本。在这个框架中，增加了三个额外的层级，如下所述：
- en: '**Strategy**, on top of the **Business** layer, aims to link business functionalities
    and use cases to the pursuit of strategic objectives.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**业务**层之上，**策略**旨在将业务功能和用例与战略目标的追求联系起来。
- en: '**Physical**, technically a subset of the **Technology** layer, is used to
    represent materials, physical objects, facilities, and so on.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理**，在技术上属于**技术**层的一个子集，用于表示材料、物理对象、设施等。'
- en: '**Implementation and Migration** is used to model all the temporary components
    supporting transitory phases during implementation and migration.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施和迁移**用于模拟在实施和迁移过程中支持过渡阶段的临时组件。'
- en: A fourth aspect, called **Motivation**, is also included in the extended framework.
    The goal of this aspect is to map and represent the strategic reasons behind the
    other architectural choices. In particular, you will see components such as value,
    goal, and stakeholders used to model the reason behind specific domains or use
    cases.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个方面，称为**动机**，也被包含在扩展框架中。这个方面的目标是映射和表示其他架构选择背后的战略原因。特别是，您将看到价值、目标和利益相关者等组件被用来建模特定领域或用例背后的原因。
- en: 'This is what the Full Framework looks like:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是完整框架的样子：
- en: '![Figure 3.6 – ArchiMate Full Framework'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6 – ArchiMate完整框架'
- en: '](img/Figure_3.06_B16354.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.06_B16354.jpg)'
- en: Figure 3.6 – ArchiMate Full Framework
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – ArchiMate完整框架
- en: As per the Core Framework, this is just a logical model aimed to highlight areas
    of overlap between the layers and aspects. ArchiMate-compliant schemas will not
    necessarily come in a matrix format.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据核心框架，这只是一个旨在突出层和方面之间重叠区域的逻辑模型。ArchiMate兼容的架构不会必然以矩阵格式出现。
- en: In the next section, we will see the components of ArchiMate, which are the
    objects categorized according to the matrices we've just seen.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到ArchiMate的组成部分，这些是根据我们刚刚看到的矩阵分类的对象。
- en: Navigating the ArchiMate language tree
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航ArchiMate语言树
- en: 'The ArchiMate language is conceptually structured as a tree, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ArchiMate语言在概念上结构化为一个树，如下所示：
- en: The top concept is the **model**, defined as a collection of concepts.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶层概念是**模型**，定义为概念集合。
- en: A **concept** is a generic term that can be characterized as an element or a
    relationship.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概念**是一个通用的术语，可以被描述为元素或关系。'
- en: An **element** is a generic item that maps to a definition of the layers—that
    is, **Behavior**, **Active Structure**, or **Passive Structure**. An element is
    also allowed as part of the **Motivation** aspect (as per the Full Framework).
    Composite elements are intended as aggregations of other concepts. **Active Structure**
    and **Behavior** elements can further be classified as **Internal** or **External**.
    An event is a further specialization of a **Behavior** element.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元素**是一个通用的项目，映射到层的定义——即**行为**、**主动结构**或**被动结构**。元素也可以作为**动机**方面的部分（根据完整框架）。复合元素旨在作为其他概念的聚合。**主动结构**和**行为**元素可以进一步被分类为**内部**或**外部**。事件是**行为**元素的进一步特殊化。'
- en: A **relationship** represents the connection between two or more concepts. Relationships
    are further classified as **Structural** (elements are statically associated to
    create another element), **Dependency** (elements may be affected by changes in
    other elements), **Dynamic** (elements have temporal dependencies to other elements),
    or **Other**.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系**表示两个或更多概念之间的连接。关系进一步被分类为**结构**（元素静态关联以创建另一个元素）、**依赖**（元素可能受其他元素变化的影响）、**动态**（元素与其他元素有时间依赖性）或**其他**。'
- en: '**Relationship connectors** are logical junctions (**And**, **Or**), associating
    relationships of the same type.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系连接器**是逻辑节点（**与**、**或**），关联相同类型的关系。'
- en: 'This is what the tree will look like:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是树将呈现的样子：
- en: '![Figure 3.7 – ArchiMate language tree'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7 – ArchiMate语言树'
- en: '](img/Figure_3.07_B16354.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.07_B16354.jpg)'
- en: Figure 3.7 – ArchiMate language tree
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – ArchiMate语言树
- en: In this classification, elements are just defined in an abstract way, not dependent
    on layers. In ArchiMate modeling, concrete implementations of those elements are
    then instantiated and classified in the relevant layer. As an example, a service
    is a generic internal **Behavior** element. It will then be used in the form of
    a business service, application service, or technology service, depending on which
    layer we are modeling.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个分类中，元素只是以抽象的方式定义，不依赖于层。在ArchiMate建模中，这些元素的实体实现随后在相关层中被实例化和分类。例如，服务是一个通用的内部**行为**元素。它将以业务服务、应用服务或技术服务的形式被使用，具体取决于我们正在建模的层。
- en: Other elements only make sense in a specific layer. For example, a communication
    network is an element property of the **Technology** layer, classified as an **Active
    Structure** element that doesn't have a one-to-one correspondence to elements
    present in other layers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 其他元素只在特定层中才有意义。例如，通信网络是**技术**层的元素属性，被分类为**主动结构**元素，它与其他层中存在的元素没有一对一的对应关系。
- en: The combination of elements and relationships can then be organized into custom
    views, effectively building architectural diagrams, optimized by stakeholders
    and viewpoints.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 元素和关系的组合然后可以组织成自定义视图，有效地构建架构图，由利益相关者和视角进行优化。
- en: In the next section, we are going to compare ArchiMate with UML.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将比较ArchiMate与UML。
- en: Comparing ArchiMate to UML
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ArchiMate与UML进行比较
- en: 'As you may have seen, the ArchiMate language shows some similarities to UML.
    That is not by accident: ArchiMate is indeed inspired by UML, and some concepts
    of the two frameworks are almost the same.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经看到的，ArchiMate语言显示出一些与UML的相似之处。这并非偶然：ArchiMate确实受到了UML的启发，并且这两个框架的一些概念几乎是相同的。
- en: 'However, other than specific differences (for instance, concepts present in
    one framework and not in the other), there are some high-level considerations
    to take into account when comparing those two frameworks, as outlined here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，除了具体差异（例如，一个框架中存在而另一个框架中不存在的概念）之外，在比较这两个框架时，还有一些高级考虑因素需要考虑，如下所述：
- en: UML is strictly centered around object-oriented modeling, while ArchiMate is
    not linked to a specific paradigm.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML严格围绕面向对象建模，而ArchiMate没有与特定范式相关联。
- en: ArchiMate explicitly defines the **Business** layer and other higher-level concepts
    (including **Motivation** and **Strategy**) that are usually not contemplated
    in UML diagrams.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArchiMate明确定义了**业务**层和其他高级概念（包括**动机**和**策略**），这些通常在UML图中没有被考虑。
- en: UML provides a fixed set of diagrams, while ArchiMate is more of a palette of
    different components and aspects, aimed at building views and viewpoints, explicitly
    providing ways of customizing the architecture definition.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML提供了一套固定的图，而ArchiMate更像是一个不同组件和方面的调色板，旨在构建视图和视角，明确提供定制架构定义的方法。
- en: As we saw when we covered the ArchiMate genesis at the beginning of this section,
    The Open Group is the organization behind many other standards, including TOGAF.
    Let's see what the relationship between ArchiMate and TOGAF is.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节开头介绍ArchiMate起源时所见，The Open Group是许多其他标准的背后组织，包括TOGAF。让我们看看ArchiMate和TOGAF之间的关系。
- en: Comparing ArchiMate to TOGAF
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ArchiMate与TOGAF进行比较
- en: '**TOGAF** is a complete framework, aimed at providing a standardized way of
    defining, modeling, and implementing architecture projects (for example, classifying
    the enterprise architecture of an organization). TOGAF is, in a way, complementary
    to ArchiMate. While TOGAF does not provide a specific architectural notation (as
    ArchiMate does), ArchiMate does not prescribe a specific process for architecture
    definition (as TOGAF does).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**TOGAF**是一个完整的框架，旨在提供一种标准化的方式来定义、建模和实施架构项目（例如，对组织的企业架构进行分类）。从某种意义上说，TOGAF与ArchiMate是互补的。虽然TOGAF不提供特定的架构符号（如ArchiMate所做的那样），但ArchiMate也不规定特定的架构定义过程（如TOGAF所做的那样）。'
- en: 'The core of TOGAF is the **Architecture Development Method** (**ADM**) process.
    The process is made up of eight steps (plus two special phases: the preliminary
    phase and requirements collection). A detailed explanation of each step is beyond
    the scope of this book, but the important takeaway is that each phase of the TOGAF
    ADM can be mapped as a layer into the ArchiMate framework (for instance, Phase
    B, which is about the definition of business architecture, of course maps to the
    **Business** layer, while Phase F, Migration Planning, can be mapped to the **Implementation
    and** **Migration** layer).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: TOGAF的核心是**架构开发方法**（**ADM**）过程。该过程由八个步骤组成（加上两个特殊阶段：初步阶段和需求收集）。每个步骤的详细解释超出了本书的范围，但重要的是，TOGAF
    ADM的每个阶段都可以映射到ArchiMate框架的某一层（例如，B阶段，关于业务架构的定义，当然映射到**业务**层，而F阶段，迁移规划，可以映射到**实施和****迁移**层）。
- en: 'This concludes the section dedicated to ArchiMate. In the next section, we
    will go through another very smart architectural modeling technique: the C4 model.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了关于ArchiMate的部分。在下一节中，我们将介绍另一种非常智能的架构建模技术：C4模型。
- en: Introducing the C4 model
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍C4模型
- en: The **C4 model** is a lightweight methodology for modeling and representing
    software architecture. It was created in 2006 by Simon Brown, and the official
    website (under a **Creative Commons (CC) License**) was launched in 2018.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**C4模型**是一种轻量级的软件架构建模和表示方法。它由Simon Brown于2006年创建，官方网站（在**创意共享（CC）许可**下）于2018年启动。'
- en: The model is somewhat inspired by UML, but it takes an alternative, leaner approach
    and, for this reason, is very popular among Agile teams who are looking for a
    more dynamic and less prescriptive way of designing and documenting software architectures.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型在一定程度上受到UML的启发，但它采取了一种替代的、更精简的方法，因此，在寻找更动态和更少规定性设计及记录软件架构的敏捷团队中非常受欢迎。
- en: Exploring the C4 model
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索C4模型
- en: 'The keyword for understanding the C4 model is *zoom*. This concept means exactly
    what it does for pictures: the core idea of the C4 model, indeed, is about navigating
    the architectural representation by widening or narrowing the point of view. The
    C4 model is built around four main levels, detailed as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 理解C4模型的关键词是*缩放*。这个概念意味着它对图片所做的一切：C4模型的核心思想确实是通过扩大或缩小视角来导航架构表示。C4模型围绕以下四个主要级别构建，具体如下：
- en: '**Context** is a diagram giving the big picture of an application. It shows
    the whole system represented as a box and depicts interactions with users and
    other systems.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文**是一个提供应用程序整体视图的图。它显示整个系统作为一个框表示，并描绘了与用户和其他系统的交互。'
- en: '**Container** is the view obtained when zooming in one level down. It represents
    what''s inside the system box by modeling the subsystems comprising it. In terms
    of granularity, a container is something that can be deployed and executed—so,
    it can represent a backend application, a database, a filesystem, and so on.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**是向下缩放一级时获得的视图。它通过模拟构成它的子系统来表示系统框内的内容。在粒度方面，容器是可以部署和执行的东西——因此，它可以表示后端应用程序、数据库、文件系统等。'
- en: '**Component** is another zoom level, looking inside one container. In essence,
    a component is an abstraction grouping of a set of code instances (for example,
    a bunch of classes) that implement a functionality.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**是另一个缩放级别，它查看一个容器内部。本质上，组件是一组代码实例（例如，一系列类）的抽象组合，这些实例实现了某种功能。'
- en: '**Code** is the maximum level of zoom in this hierarchy and can be omitted.
    It''s used to directly represent source code and configurations. The C4 model
    does not provide a specific suggestion on how to draw this kind of schema, which
    is usually represented using UML class diagrams. The reason why it''s considered
    optional is that it is not very easy to keep this view up to date with code changes.
    A suggestion here is to try to stick to the automatic generation of this diagram
    if possible (by using plugins for the integrated development environments or other
    automated procedures).'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**是这一层次的最大缩放级别，可以省略。它用于直接表示源代码和配置。C4模型没有提供如何绘制此类架构的具体建议，通常这类架构使用UML类图来表示。它被认为是可选的，因为很难保持这种视图与代码更改同步。这里的一个建议是，如果可能的话，尽量坚持自动生成此图（通过使用集成开发环境的插件或其他自动化程序）。'
- en: 'So, the C4 model, in essence, is made up of three different diagrams (plus
    an optional one). Each diagram is linked to the others by a different level of
    zoom, as shown in the following diagram:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，C4模型本质上由三个不同的图（加上一个可选的图）组成。每个图通过不同级别的缩放与其他图相连接，如下面的图所示：
- en: '![Figure 3.8 – C4 zoom levels'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8 – C4缩放级别'
- en: '](img/Figure_3.8_B16354_new.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.8_B16354_new.jpg)'
- en: Figure 3.8 – C4 zoom levels
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – C4缩放级别
- en: The idea behind this technique is to focus on a different ecosystem based on
    the level of zoom. Moreover, different views can be aimed at different stakeholders.
    In the next section, we will see what's inside each level.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的理念是专注于基于缩放级别的不同生态系统。此外，不同的视图可以针对不同的利益相关者。在下一节中，我们将看到每个级别的内部内容。
- en: Filling in the different levels
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充不同的级别
- en: The C4 model does not provide any particular notation or symbology. Unlike UML,
    the kind of shapes, color coding, and so on are not part of the standard. The
    model simply encourages you to have a consistent representation (for example,
    once you choose a shape to represent an element, keep that shape in all the diagrams),
    to add an explicit legend to each diagram, and to comment as much as possible,
    for better clarity.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: C4模型不提供任何特定的符号或符号。与UML不同，形状、颜色编码等都不是标准的一部分。该模型只是鼓励你保持一致的表示（例如，一旦你选择一个形状来表示一个元素，就在所有图中保持该形状），并为每个图添加一个明确的图例，尽可能多地注释，以获得更好的清晰度。
- en: 'C4 is made up of the following elements:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: C4由以下元素组成：
- en: '**Software system**: The top-level element, the center of the *context* representation.
    This is basically the whole system that we are going to design and implement.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件系统**：顶级元素，是*上下文*表示的中心。这基本上是我们将要设计和实现的整个系统。'
- en: '**Container**: As we mentioned when discussing the level with the same name,
    a container is roughly something that can be deployed and started/stopped individually.
    This includes applications, databases, and so on. It''s usually completed with
    a description of the technology and framework used.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：正如我们在讨论同名级别时提到的，容器大致上是可以单独部署和启动/停止的东西。这包括应用程序、数据库等等。它通常伴随着对所使用技术和框架的描述。'
- en: '**Component**: As before, this is a concept already introduced when discussing
    levels. A component is an abstraction aggregated over a subdomain or functionality.
    It''s basically a grouping of code. It may or may not map one-to-one to a Java
    package.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：如前所述，这是在讨论级别时已经介绍过的概念。组件是对子域或功能的抽象聚合。它基本上是一组代码。它可能或可能不与Java包一一对应。'
- en: '**Relationship**: A line (or, more often, an arrow) representing a link between
    one of the aforementioned elements. It''s usually completed with a textual explanation
    of the kind/scope/goal of the relationship, and technical details where relevant
    (for instance, the protocol used).'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系**：表示上述元素之间链接的线（或更常见的是箭头）。它通常伴随着对关系类型/范围/目标的文本解释，以及相关技术细节（例如，所使用的协议）。'
- en: '**Person**: A human interacting with the system.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员**：与系统交互的人类。'
- en: As you will see, there is no explicit advice for representing the code. It's
    a common practice to represent it with UML classes but, as we said before, this
    is something that is only done if strictly necessary.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将看到的，没有明确建议表示代码。通常的做法是用UML类来表示它，但如我们之前所说，这只在绝对必要时才这样做。
- en: 'For the sake of completeness, C4 also includes some additional diagrams, as
    outlined here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性起见，C4还包括一些额外的图表，如下所述：
- en: '**System landscape**: A context diagram showing the whole enterprise, in order
    to represent the full *neighborhood* of our application.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统景观**：一个上下文图，展示了整个企业，以便表示我们应用程序的完整*邻域*。'
- en: '**Dynamic**: A diagram representing a use case by numbering the interactions
    between elements in order to show the temporal progression. It looks quite similar
    to the UML sequence diagram but is less prescriptive in terms of syntax.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态图**：通过编号元素之间的交互来表示用例的图表，以显示时间顺序。它看起来与UML序列图非常相似，但在语法方面不那么规定性。'
- en: '**Deployment**: This shows the mapping between containers and the underlying
    infrastructure, which may be a physical server, a virtual machine, a **Linux**
    container, and so on.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：这显示了容器与底层基础设施之间的映射，这可能是一个物理服务器、虚拟机、**Linux**容器等等。'
- en: With these diagrams, we have completed our excursus on the C4 model. As you
    will see, this model is simpler than UML and ArchiMate but still quite complete
    and expressive, meaning that you can model a lot of architecture types with it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些图表，我们完成了对C4模型的探讨。正如您将看到的，这个模型比UML和ArchiMate简单，但仍然相当完整和表达性强，这意味着您可以用它来建模许多架构类型。
- en: In the next section, we are going to explore other modeling techniques that
    are less common and aimed at specific use cases.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些不太常见且针对特定用例的建模技术。
- en: Other modeling techniques
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他建模技术
- en: The three modeling systems we have seen so far—UML, ArchiMate, and C4—are complete
    systems with different approaches, aimed at analyzing and representing software
    architecture end to end.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止看到的三个建模系统——UML、ArchiMate和C4——是完整的系统，具有不同的方法，旨在端到端地分析和表示软件架构。
- en: In this section, we are going to quickly touch on some other techniques that
    have a more vertical approach, meaning that they are less general-purpose and
    more detailed when it comes to targeting specific use cases. Those techniques
    are **Business Process Model and Notation** (**BPMN**), **Decision Model and Notation**
    (**DMN**), and **arc42**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍一些具有更垂直方法的技巧，这意味着它们在针对特定用例时更少通用且更详细。这些技术是**业务流程模型和符号**（**BPMN**）、**决策模型和符号**（**DMN**）和**arc42**。
- en: BPMN
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BPMN
- en: '**BPMN** is a standard that was developed and is currently maintained by the
    **Object Management Group** (**OMG**), the same organization behind UML. BPMN
    is also a standard that has been recognized by the **International Organization
    for Standardization** (**ISO**).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**BPMN**是一个由**对象管理组**（**OMG**）开发和维护的标准，该组织也是UML背后的组织。BPMN也是一个被**国际标准化组织**（**ISO**）认可的标准。'
- en: As may be obvious by its name, this language specializes in representing business
    processes.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，这种语言专门用于表示业务流程。
- en: BPMN is usually associated with the activity diagram of UML, as both are flow
    chart-like diagrams (with a slightly different notation and symbology), aimed
    at describing a use case in terms of elementary steps and the connections between
    them (for instance, optional conditions), including a temporal dimension (from-to).
    But the similarities end there.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: BPMN通常与UML的活动图相关联，因为两者都是类似流程图的图表（具有略微不同的符号和符号），旨在用基本步骤及其之间的连接（例如，可选条件）来描述用例，包括时间维度（从-到）。但相似之处到此为止。
- en: UML is wider and aimed at modeling a lot of other things, rather than being
    fundamentally an object-oriented framework. On the other hand, BPMN focuses just
    on the modeling of business processes, and its primary goal is to define common
    ground between technical and business stakeholders. Indeed, the idea behind BPMN
    is that a businessperson (or better, someone with no technical skills but a good
    knowledge of processes) can model a diagram that can then be directly imported
    and executed into a BPMN engine, with little-to-no help from technical staff.
    This is not something that happens in the real world, as often, BPMN design is
    still an abstraction, and a number of technical steps are still needed to configure,
    deploy, and execute a BPMN process.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: UML更广泛，旨在建模许多其他事物，而不仅仅是作为一个面向对象框架。另一方面，BPMN专注于业务流程的建模，其首要目标是定义技术和业务利益相关者之间的共同基础。实际上，BPMN背后的想法是，一个业务人员（或者更好，一个没有技术技能但对流程有良好了解的人）可以绘制一个可以直接导入并执行到BPMN引擎中的图表，几乎不需要技术人员的帮助。但在现实世界中，这种情况并不常见，因为BPMN设计仍然是一种抽象，配置、部署和执行BPMN流程仍然需要一系列技术步骤。
- en: However, it's true that BPMN is usually at least understandable (if not definable
    from scratch) by non-technical stakeholders. This is good enough for supporting
    collaboration between teams and reducing friction when translating business processes
    into code implementation.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，确实如此，BPMN通常至少对非技术利益相关者是可理解的（如果不是从头定义的），这对于支持团队之间的协作以及在将业务流程转换为代码实现时减少摩擦是足够的。
- en: 'The building blocks of BPMN are categorized as four basic families: **flow
    objects**, **connecting objects**, **swimlanes**, and **artifacts**. For each
    of them, a graphical notation is formalized.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: BPMN的构建块被分为四个基本家族：**流程对象**、**连接对象**、**泳道**和**工件**。对于每一个家族，都有一个图形符号被正式化。
- en: 'Roughly speaking, **flow objects** represent the steps in the diagram and are
    described in more detail here:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 大概来说，**流程对象**代表图中的步骤，在此处将更详细地描述：
- en: The most important one is probably the **task**, which is the abstraction of
    generic activity. This means both non-automatic activities (manually performed
    outside of the BPMN platform) and automatic activities (such as sending an email
    or triggering a web service call).
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中最重要的大概是**任务**，它是通用活动的抽象。这意味着既包括非自动活动（在BPMN平台外手动执行）也包括自动活动（如发送电子邮件或触发Web服务调用）。
- en: Other basic flow objects are **start** and **end** events, delimiting the beginning
    and end of a workflow.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他基本流程对象是**开始**和**结束**事件，用于界定工作流的开始和结束。
- en: '**Gateways** are another important kind of object, used to model things such
    as conditional execution or the parallelization of paths.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关**是另一种重要的对象，用于建模诸如条件执行或路径并行化等情况。'
- en: '**Connecting objects** are used to link flow objects with one another. They
    can mimic different behaviors, such as sequences, messages, or associations.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接对象**用于将流程对象相互连接。它们可以模拟不同的行为，如序列、消息或关联。'
- en: '**Swimlanes** are a way to graphically group and organize a business process.
    With swimlanes, you partition the business process according to the actor (or
    group of actors) in charge of a specific set of steps.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**泳道**是一种图形化分组和组织业务流程的方法。使用泳道，你可以根据负责特定步骤的参与者（或参与者群体）来划分业务流程。'
- en: Finally, **artifacts** are supporting concepts (for example, annotations), aimed
    at enriching the BPMN flow expressiveness.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**工件**是支持性概念（例如，注释），旨在丰富BPMN流程的表达性。
- en: 'This is what all these objects look like graphically:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象在图形上的样子就是这样：
- en: '![Figure 3.9 – Graphical representation of some BPMN entities'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9 – 一些BPMN实体的图形表示'
- en: '](img/Figure_3.09_B16354.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.09_B16354.jpg)'
- en: Figure 3.9 – Graphical representation of some BPMN entities
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – 一些BPMN实体的图形表示
- en: We will talk again about BPMN in [*Chapter 7*](B16354_07_Final_JM_ePUB.xhtml#_idTextAnchor164),
    *Exploring Middleware and Frameworks*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第7章*](B16354_07_Final_JM_ePUB.xhtml#_idTextAnchor164)中再次讨论BPMN，*探索中间件和框架*。
- en: DMN
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DMN
- en: '**DMN** is a standard published and maintained by OMG, and it''s younger than
    BPMN. DMN is somewhat complementary to BPMN. Instead of being aimed at modeling
    business processes, the scope of DMN is to model business rules, which are commonly
    used as one of the tasks in BPMN processes, rather than standalone, outside of
    BPMN processes.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**DMN**是由OMG发布和维护的标准，它比BPMN年轻。DMN在某种程度上是BPMN的补充。它不是针对建模业务流程，而是旨在建模业务规则，这些规则通常作为BPMN流程中的一个任务使用，而不是独立于BPMN流程之外。'
- en: 'The goal is exactly the same as BPMN: defining a common language between business
    and IT personas, allowing for better collaboration.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 目标与BPMN完全相同：在业务和IT角色之间定义一种共同语言，以便更好地协作。
- en: DMN encompasses elements such as decision tables (tables representing rule outcome
    based on the combination of a set of inputs) and **Friendly Enough Expression
    Language** (**FEEL**), an expression language used to formalize the logic behind
    decisions.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: DMN包括诸如决策表（基于一组输入的组合表示规则结果的表格）和**足够友好的表达式语言**（**FEEL**），这是一种用于形式化决策背后逻辑的表达式语言。
- en: We will talk about DMN again in [*Chapter 7*](B16354_07_Final_JM_ePUB.xhtml#_idTextAnchor164),
    *Exploring Middleware and Frameworks*.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第7章*](B16354_07_Final_JM_ePUB.xhtml#_idTextAnchor164)中再次讨论DMN，*探索中间件和框架*。
- en: arc42
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: arc42
- en: '**arc42** is not a modeling technique but, instead, a templating model that
    helps with identifying, in software architecture, what the important concepts
    to document are and how to document them, by providing a kind of *scaffold*.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**arc42**不是一种建模技术，而是一种模板模型，它通过提供一种*支架*来帮助在软件架构中识别需要记录的重要概念以及如何记录它们。'
- en: arc42 was originally created by Dr. Peter Hruschka and Dr. Gernot Starke and
    has a completely open source approach (including being free to use in commercial
    projects). It's an exceptional way to start documenting your system from scratch,
    from an architectural point of view. From a practical viewpoint, it provides a
    scaffold (including sections to be fulfilled) on what the documentation should
    look like.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: arc42最初由Peter Hruschka博士和Gernot Starke博士创建，采用完全开源的方法（包括在商业项目中免费使用）。这是一种从架构角度从头开始记录系统的卓越方式。从实际观点来看，它提供了一个支架（包括需要填写的章节），说明了文档应该是什么样子。
- en: It is not a substitute for other modeling languages and does not mandate a specific
    working model or development techniques. Instead, it is expected that you will
    use concepts and diagrams from other techniques (such as UML or C4) to fill out
    the sections of arc42-compliant documentation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是其他建模语言的替代品，也不强制规定特定的工作模型或开发技术。相反，预期你会使用来自其他技术（如UML或C4）的概念和图表来填写arc42兼容文档的各个部分。
- en: Sections include elements such as the introduction, runtime view, cross-cutting
    concepts, architectural decisions, and more. It is really just a suggestion on
    the structure of the documentation; it's up to you to choose how deep to dive
    into each section. If you want to give it a try, you can go to the official website
    (see the *Further reading* section), download a template, and start to fill out
    the sections. It really is that easy.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的章节包括介绍、运行时视图、横切概念、架构决策等内容。这实际上只是对文档结构的建议；具体深入到每个章节的程度由你决定。如果你想尝试一下，可以访问官方网站（见*进一步阅读*部分），下载一个模板，并开始填写各个章节。这真的非常简单。
- en: BPMN, DMN, and arc42 cover specific niches and target specific needs. For this
    reason, they can be a useful complement to the more generic and comprehensive
    frameworks that we have seen before. With this section, we've completed our overview
    of architectural modeling techniques. Let's now complete this chapter by looking
    at some examples.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: BPMN、DMN和arc42覆盖特定的细分市场，针对特定的需求。因此，它们可以作为我们之前看到的更通用和全面的框架的有用补充。通过本节，我们完成了对架构建模技术的概述。现在，让我们通过查看一些示例来完成本章。
- en: Case studies and examples
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究和示例
- en: In this chapter, as in previous ones, we will continue our study of the mobile
    payments application. We will keep exploring this context to see some examples
    of the diagrams we have discussed so far.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，就像之前的章节一样，我们将继续研究移动支付应用。我们将继续探索这个环境，以查看我们迄今为止讨论的一些图表示例。
- en: UML class diagrams for mobile payments
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动支付的UML类图
- en: As a first example, we will look at UML class modeling. This is a very common
    diagram in Java projects. It is debated whether it's useful to build and maintain
    documentation that is so close to code (see also the considerations we discussed
    in the section on C4), since it may be seen as not adding that much value and
    being hard to maintain. Moreover, in modern development models (such as cloud-native
    and microservices), you are supposed to communicate between parts of the application
    by using established interfaces (such as **REpresentational State Transfer** (**REST**)
    or **Google Remote Procedure Call** (**gRPC**) and avoid exposing the internal
    model of your applications for others to tap into.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个示例，我们将查看UML类建模。这是一个在Java项目中非常常见的图表。有人争论说，建立和维护与代码如此接近的文档（参见我们在C4部分讨论的考虑因素）是否有用，因为它可能被认为没有增加太多价值，而且难以维护。此外，在现代开发模型（如云原生和微服务）中，你应该通过使用已建立的接口（如**表示状态传输**（**REST**）或**谷歌远程过程调用**（**gRPC**））来在应用程序的部分之间进行通信，避免向他人暴露应用程序的内部模型。
- en: My personal view is that the truth is in the middle. Unless you are developing
    something very peculiar (such as a framework, a library, or a plugin extension
    system), you may not need to document your entire code base as class diagrams.
    However, in order to analyze impacts and collaborate with other team members on
    the same code base, it may be worthwhile to at least sketch the critical aspects
    of your application (this being the core classes and interfaces).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人的观点是，真相在于中间。除非你正在开发一些非常特殊的东西（如框架、库或插件扩展系统），否则你可能不需要将整个代码库作为类图进行文档化。然而，为了分析影响并与同一代码库的其他团队成员协作，至少绘制应用程序的关键方面（即核心类和接口）可能是值得的。
- en: Another useful technique is to rely on the automatic generation of class diagrams.
    You may find plugins for most commonly used IDEs and also for Maven that can do
    that for you. Class diagrams can be particularly useful for giving an idea of
    what the model behind your code looks like (think about a new team member joining
    the project) and can ease things such as refactoring by giving an idea of what
    impact a change could have on related classes.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有用的技术是依赖类图的自动生成。你可能会发现大多数常用IDE和Maven的插件都可以为你完成这项工作。类图可以特别有用，因为它可以给出代码背后的模型看起来是什么样的想法（想想一个新团队成员加入项目）并且可以简化诸如重构等活动，因为它可以给出一个改变可能对相关类产生什么影响的想法。
- en: 'This is what a class diagram for mobile payments will look like (picking just
    a handful of significant classes):'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 移动支付的类图将看起来是这样的（仅挑选一些重要的类）：
- en: '![Figure 3.10 – UML class diagram for payment and user objects'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.10 – 支付和用户对象的UML类图'
- en: '](img/Figure_3.10_B16354.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B16354.jpg)'
- en: Figure 3.10 – UML class diagram for payment and user objects
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 支付和用户对象的UML类图
- en: As you can see in the preceding diagram, we are representing the `Payment` and
    `User` classes (some methods and fields are omitted for the sake of space).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的图表中看到的，我们正在表示`Payment`和`User`类（为了节省空间，省略了一些方法和字段）。
- en: 'Some of the notations we used in this diagram are listed as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个图表中使用的一些符号如下列所示：
- en: '`MobilePayment` is a subclass of `Payment` (generalization).'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MobilePayment`是`Payment`（泛化）的子类。'
- en: '`Payment` implements the `Auditable` interface.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Payment`实现了`Auditable`接口。'
- en: Payment is associated with `User`.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支付与`User`相关联。
- en: You can also see the multiplicity (each user can have **n** payments). As we
    discussed before, this kind of association is very similar to what you can find
    in an entity relationship diagram representing database tables.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以看到多态性（每个用户可以有**n**个支付）。正如我们之前讨论的，这种关联与你在表示数据库表的实体关系图中可以找到的非常相似。
- en: In the next section, we will see some C4 diagrams for mobile payments.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – C4 上下文图
- en: C4 diagrams for mobile payments
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '![图 3.12 – C4 组件图](img/Figure_3.12_B16354.jpg)'
- en: 'In the section dedicated to C4 diagrams, we saw that the C4 technique involves
    diagramming the system according to four main levels of zoom. As discussed, the
    last level of zoom (code) is optional, and there are no strict guidelines given
    on how to represent it. It is common to use class diagrams, as we did in the previous
    section. Supposing we take that as one of the four representations for our use
    case, let''s see what the path is that takes us to that schematization. Let''s
    start with the context diagram of a module of the mobile payments solution, as
    follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到一些关于移动支付的 C4 图。
- en: '![Figure 3.11 – C4 context diagram'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – C4 上下文图](img/Figure_3.11_B16354.jpg)'
- en: '](img/Figure_3.11_B16354.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – C4 容器图](img/Figure_3.13_B16354.jpg)'
- en: Figure 3.11 – C4 context diagram
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 移动支付的 C4 图
- en: As we can see, this is very high-level, aimed at showing the ecosystem of interactions
    around our system. The mobile payment application is just a big block, and in
    the diagram, we summarize the external system and the actors interacting with
    it. There is also a synthetic description of the interactions (including the format/protocol)
    and the type of each element (software system, person).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这是一个非常高级的描述，旨在展示围绕我们系统的交互生态系统。移动支付应用只是一个大块，在图中，我们总结了与之交互的外部系统和参与者。还包括了对交互（包括格式/协议）以及每个元素类型（软件系统、人员）的综合性描述。
- en: 'Let''s now zoom into the container view, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在专门介绍 C4 图的章节中，我们了解到 C4 技术涉及根据四个主要的缩放级别来绘制系统图。正如讨论的那样，最后一个缩放级别（代码）是可选的，并且没有给出如何表示它的严格指南。通常使用类图，就像我们在上一节中做的那样。假设我们将这作为我们用例的四个表示之一，让我们看看通往这种简化的路径。让我们从一个移动支付解决方案模块的上下文图开始，如下所示：
- en: '![Figure 3.12 – C4 component diagram'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们进一步缩小了一个级别，突出了构成业务逻辑容器（**移动应用后端**、**数据映射器**和**集成**）的三个组件。
- en: '](img/Figure_3.12_B16354.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – C4 容器图](img/Figure_3.12_B16354.jpg)'
- en: Figure 3.12 – C4 component diagram
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – C4 组件图
- en: 'Here, we can see a closer representation of the technical pieces comprising
    our application. Our application is no longer just a box: we can see all the processes
    (things that can be deployed and started independently from one another) that
    comprise our system included in the dashed box. External context is still present
    (for example, the transactional backend). Every interaction has some explanation
    and protocol. Every container has a generic description of the kind of technology
    that is implementing it. If you think this diagram is pretty similar to what we
    saw in [*Chapter 1*](B16354_01_Final_JM_ePUB.xhtml#_idTextAnchor013), *Designing
    Software Architectures in Java – Methods and Styles*, you are right.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到构成我们应用的技术组件的更详细表示。我们的应用不再只是一个盒子：我们可以看到包含在虚线框中的所有进程（可以独立部署和启动的事物）。外部环境仍然存在（例如，事务后端）。每个交互都有一些解释和协议。每个容器都有一个关于实现它的技术类型的通用描述。如果你认为这个图与我们在[*第一章*](B16354_01_Final_JM_ePUB.xhtml#_idTextAnchor013)中看到的非常相似，*《Java
    软件架构设计 – 方法与风格*》，你是正确的。
- en: 'We are still a bit far from the code/class diagram. The component diagram is
    the missing link. We can view this here:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然离代码/类图还有一段距离。组件图是缺失的环节。我们可以在这里查看：
- en: '![Figure 3.13 – C4 container diagram'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – C4 上下文图
- en: '](img/Figure_3.13_B16354.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – C4 容器图](img/Figure_3.13_B16354.jpg)'
- en: Figure 3.13 – C4 container diagram
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – C4 容器图
- en: As expected, we zoomed in one level deeper, highlighting three components that
    comprise the business logic container (**Mobile Application Backend**, **Data
    Mapper**, and **Integration**).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们放大到容器视图，如下所示：
- en: With this container diagram, we are one step above the direct representation
    of the implementation code (code diagram).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个容器图，我们在直接表示实现代码（代码图）之上又前进了一步。
- en: For the sake of space, we are not providing the full code diagram here. However,
    the classes modeled as UML in the section before can be seen as a partial code
    diagram of the **Data Mapper** component, somewhat closing the loop.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于篇幅限制，我们在此不提供完整的代码图。然而，在前面章节中用UML建模的类可以被视为**数据映射器**组件的部分代码图，这在一定程度上闭合了循环。
- en: Those were very basic examples to show some bits of the modeling techniques
    in practice. Of course, giving detailed examples on every methodology shown in
    this chapter would have taken a whole book (or more than one) on its own, but
    I hope to have given you some basics to start from and deep dive into, in case
    you need to start practicing one of these diagrams for your projects. Let's now
    recap the main points of this chapter.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是非常基础的例子，用以展示一些实际应用中的建模技术。当然，对这一章中展示的每一种方法论进行详细说明可能需要一本书（或更多）的内容，但我希望已经为您提供了足够的起点，以便您深入研究和实践，尤其是在您需要为项目开始使用这些图表时。现在，让我们回顾本章的主要观点。
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw a wide range of techniques for modeling and representing
    the internal architecture of a software system. We started with UML, which is
    a consolidated standard that is very widespread and actively used, especially
    in some of its aspects, such as class diagrams and sequence diagrams.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了一系列用于模拟和表示软件系统内部架构的技术。我们首先从UML开始，这是一个广泛使用且积极应用的标准化工具，特别是在其某些方面，如类图和序列图。
- en: We then moved on to ArchiMate, which gives an enterprise architecture point
    of view on the subject and is commonly used in a context that follows the TOGAF
    approach. We then moved on to the C4 approach, which is a younger standard that
    is very lightweight and particularly suitable for projects adopting lean methodologies.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着转向ArchiMate，它从企业架构的角度对主题进行了阐述，通常在遵循TOGAF方法的背景下使用。然后我们转向C4方法，这是一个较新的标准，非常轻量级，特别适合采用精益方法的项目。
- en: We've also seen a handful of specialized languages (BPMN and DMN), which are
    perfect for modeling specific aspects of our application. Last but not least,
    we quickly touched on arc42, which is a wonderful template system to start your
    architecture documentation and ensure that nothing important is missing.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了一些专门的语言（BPMN 和 DMN），它们非常适合于模拟我们应用程序的特定方面。最后但同样重要的是，我们简要提到了 arc42，这是一个出色的模板系统，可以帮助您开始架构文档并确保不会遗漏任何重要内容。
- en: In the next chapter, we will discuss **Domain Driven Design** (**DDD**) and
    other techniques to flesh out your application, which you can use once you have
    defined the architecture for it.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论**领域驱动设计**（DDD）和其他技术，以完善您的应用程序，这些技术一旦您为其定义了架构，就可以使用。
- en: Further reading
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The UML official website: [http://uml.org/](http://uml.org/)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML官方网站：[http://uml.org/](http://uml.org/)
- en: '*The Unified Modeling Language User Guide*, by Grady Booch, James Rumbaugh,
    and Ivar Jacobson, published by Addison-Wesley, 1999.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*统一建模语言用户指南*，由Grady Booch、James Rumbaugh和Ivar Jacobson编写，Addison-Wesley出版社，1999年出版。'
- en: 'The Open Group, *ArchiMate® 3.1 Specification*: [https://pubs.opengroup.org/architecture/archimate3-doc/](https://pubs.opengroup.org/architecture/archimate3-doc/)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The Open Group，*ArchiMate® 3.1规范*：[https://pubs.opengroup.org/architecture/archimate3-doc/](https://pubs.opengroup.org/architecture/archimate3-doc/)
- en: 'InfoQ, *The C4 Model for Software Architecture*: [https://www.infoq.com/articles/C4-architecture-model/](https://www.infoq.com/articles/C4-architecture-model/)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InfoQ，*软件架构的C4模型*：[https://www.infoq.com/articles/C4-architecture-model/](https://www.infoq.com/articles/C4-architecture-model/)
- en: 'The C4 official website: [https://c4model.com/](https://c4model.com/)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C4官方网站：[https://c4model.com/](https://c4model.com/)
- en: 'The arc42 official website: [https://arc42.org/](https://arc42.org/)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: arc42官方网站：[https://arc42.org/](https://arc42.org/)
