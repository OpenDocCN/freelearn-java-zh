- en: Testing Your Frontend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的前端
- en: This chapter explains the basics of testing React apps. We will give an overview
    of using Jest, which is a JavaScript test library developed by Facebook. We will
    also cover Enzyme, which is a testing utility for React, developed by Airbnb.
    We will look at how you can create new test suites and tests. We will also cover
    how to run the test and discover the results of the test.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了测试React应用程序的基础知识。我们将概述使用Jest，这是Facebook开发的JavaScript测试库。我们还将介绍Enzyme，这是由Airbnb开发的用于React的测试实用程序。我们将看看如何创建新的测试套件和测试。我们还将介绍如何运行测试并发现测试的结果。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看以下内容：
- en: The basics of Jest
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jest的基础知识
- en: How to create new test suites and tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建新的测试套件和测试
- en: The basics of the Enzyme test utility
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Enzyme测试实用程序的基础知识
- en: How to install Enzyme
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装Enzyme
- en: How to create tests with Enzyme
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Enzyme创建测试
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend*, is needed (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中创建的Spring Boot应用程序，*Securing
    and Testing Your Backend*（GitHub：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)）。
- en: 'We also need the React app that we used in the previous chapter (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在上一章中使用的React应用程序（GitHub：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)）。
- en: Using Jest
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jest
- en: Jest is a test library for JavaScript and it is developed by Facebook ([https://facebook.github.io/jest/en/](https://facebook.github.io/jest/en/)).
    Jest is widely used with React and it provides lots of useful features for testing.
    You can create a snapshot test, where you can take snapshots from React trees
    and investigate how states are changing. Jest also has mock functionalities that
    you can use to test, for example, your asynchronous REST API calls. Jest also
    provides functions that are needed for the assertions in your test cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jest是一个用于JavaScript的测试库，由Facebook开发（[https://facebook.github.io/jest/en/](https://facebook.github.io/jest/en/)）。Jest广泛用于React，并为测试提供了许多有用的功能。您可以创建快照测试，从中可以获取React树的快照并调查状态的变化。Jest还具有模拟功能，您可以使用它来测试例如异步REST
    API调用。Jest还提供了在测试用例中所需的断言函数。
- en: 'We will first see how you can create a simple test case for a basic JavaScript
    function, which performs some simple calculations. The following function gets
    two numbers as arguments and returns the product of the numbers:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看看如何为基本的JavaScript函数创建一个简单的测试用例，该函数执行一些简单的计算。以下函数以两个数字作为参数，并返回数字的乘积：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code shows a Jest test for the preceding function. The test case
    starts with a `test` method that runs the test case. The `test` method has an
    alias, called `it`, and we are using that in the React examples later. The test
    method gets the two required arguments—the test name and the function that contains
    the test. `expect` is used when you want to test values. `toBe` is the so-called
    matcher that checks whether the result from the function equals the value in the
    matcher. There are many different matchers available in Jest and you can find
    these from their documentation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了前述函数的Jest测试。测试用例从运行测试用例的`test`方法开始。`test`方法有一个别名，称为`it`，我们稍后在React示例中将使用它。测试方法获取两个必需的参数-测试名称和包含测试的函数。当您想要测试值时，使用`expect`。`toBe`是所谓的匹配器，用于检查函数的结果是否等于匹配器中的值。Jest中有许多不同的匹配器可用，您可以从其文档中找到这些：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Jest comes with `create-react-app`, so we don''t have to do any installations
    or configurations to start testing. It is recommended to create a folder called
    `_test_` for your test files. The test files should have the `.test.js` extension.
    If you look at your React frontend in the VS Code file explorer, you can see that
    in the `src` folder, there is already one test file automatically created, and
    it is called `App.test.js`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Jest与`create-react-app`一起提供，因此我们无需进行任何安装或配置即可开始测试。建议为测试文件创建一个名为`_test_`的文件夹。测试文件应具有`.test.js`扩展名。如果您在VS
    Code文件资源管理器中查看React前端，您会发现在`src`文件夹中已经自动创建了一个测试文件，名为`App.test.js`。
- en: '![](img/84990f7e-069e-4734-8e76-798df3aaa5d0.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84990f7e-069e-4734-8e76-798df3aaa5d0.png)'
- en: 'The source code of the test file is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 测试文件的源代码如下：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following test file creates a `div` element to the DOM and mounts the `App`
    component to it. Finally, the component is unmounted from `div`. So, it just tests
    that your `App` component can be rendered and the test runner is working. `it`
    is an alias for the `test` function in Jest, the first argument is the name of
    the test, and the second argument is the function that is executed and tested.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试文件创建了一个`div`元素到DOM并将`App`组件挂载到它上。最后，组件从`div`中卸载。因此，它只是测试您的`App`组件是否可以渲染并且测试运行程序是否正常工作。`it`是Jest中`test`函数的别名，第一个参数是测试的名称，第二个参数是要执行和测试的函数。
- en: 'You can run your tests by typing the following command into your terminal:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在终端中输入以下命令来运行测试：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or if you are using Yarn, type the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果您使用Yarn，请输入以下内容：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After your tests have been executed, and everything is working correctly, you
    will see the following info in the terminal:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行完测试并且一切正常工作后，您将在终端中看到以下信息：
- en: '![](img/fa09273d-48c7-4531-8a20-3ed6975966d8.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa09273d-48c7-4531-8a20-3ed6975966d8.png)'
- en: Snapshot testing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快照测试
- en: Snapshot testing is a useful tool to test that there are no unwanted changes
    in your user interface. Jest generates snapshot files when the snapshot tests
    are executed. The next time the tests are executed, the new snapshot is compared
    to the previous one. If there are changes between the content of the files, the
    test case fails and an error message is shown in the terminal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 快照测试是一个有用的工具，用于测试用户界面中是否存在不需要的更改。当执行快照测试时，Jest会生成快照文件。下次执行测试时，将新的快照与先前的快照进行比较。如果文件内容之间存在更改，测试用例将失败，并在终端中显示错误消息。
- en: 'To start snapshot testing, perform the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始快照测试，请执行以下步骤：
- en: 'Install the `react-test-render` package. The `--save-dev` parameter means that
    this dependency is saved to the `package.json` file''s `devDependencies` part
    and it is only used for development purposes. If you type the `npm install --production`
    command in the installation phase, dependencies in the `devDependencies` part
    are not installed. So, all dependencies that are needed only in the development
    phase should be installed using the `--save-dev` parameter:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`react-test-render`包。`--save-dev`参数意味着此依赖项保存到`package.json`文件的`devDependencies`部分，仅用于开发目的。如果在安装阶段键入`npm
    install --production`命令，则不会安装`devDependencies`部分中的依赖项。因此，所有仅在开发阶段需要的依赖项都应使用`--save-dev`参数进行安装：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Your `package.json` file should look the following, and the new `devDependecies`
    part have been added to the file:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的`package.json`文件应如下所示，并且已将新的`devDependecies`部分添加到文件中：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Import `renderer` to your test file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`renderer`导入到您的测试文件中：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s add a new snapshot test case to our `App.test.js` file. The test case
    will create a snapshot test of our `AddCar` component:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`App.test.js`文件中添加一个新的快照测试用例。该测试用例将创建我们的`AddCar`组件的快照测试：
- en: 'Import the `AddCar` component to our test file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddCar`组件导入到我们的测试文件中：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add following test code after the first test case, which already exists in
    the file. The test case takes a snapshot from our `App` component and then compares
    whether the snapshot differs from the previous snapshot:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中已经存在的第一个测试用例之后添加以下测试代码。该测试用例从我们的`App`组件中获取快照，然后比较快照是否与先前的快照不同：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the test cases again by typing the following command into your terminal:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入以下命令再次运行测试用例：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now you can see the following message in the terminal. The test suite tells
    us the number of test files, and the tests tell us the number of test cases:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在终端中看到以下消息。测试套件告诉我们测试文件的数量，测试告诉我们测试用例的数量：
- en: '![](img/0f151a12-c3ae-4faa-a38c-9aecd4337028.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f151a12-c3ae-4faa-a38c-9aecd4337028.png)'
- en: 'When the test is executed for the first time, a `_snapshots_` folder is created.
    This folder contains all the snapshot files that are generated from the test cases.
    Now, you can see that there is one snapshot file generated, as shown in the following
    screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次执行测试时，将创建一个`_snapshots_`文件夹。该文件夹包含从测试用例生成的所有快照文件。现在，您可以看到已生成一个快照文件，如下面的截图所示：
- en: '![](img/eb52cf51-488f-46e4-8d63-13edc8e597a7.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb52cf51-488f-46e4-8d63-13edc8e597a7.png)'
- en: 'The snapshot file now contains the React tree of our `AddCar` component. You
    can see part of the snapshot file from the beginning here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 快照文件现在包含了我们的`AddCar`组件的React树。您可以从这里的开头看到快照文件的一部分：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using Enzyme
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Enzyme
- en: Enzyme is a JavaScript library for testing the React component's output and
    it is developed by Airbnb. Enzyme has a really nice API for DOM manipulation and
    traversing. If you have used jQuery, it is really easy to understand the idea
    of the Enzyme API.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Enzyme是用于测试React组件输出的JavaScript库，由Airbnb开发。Enzyme具有一个非常好的用于DOM操作和遍历的API。如果您使用过jQuery，那么很容易理解Enzyme
    API的思想。
- en: 'To start using Enzyme, perform the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Enzyme，请执行以下步骤：
- en: 'Install it by typing the following command into your terminal. This will install
    the `enzyme` library and the adapter library for React version 16\. There is an
    adapter available for older React versions:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入以下命令进行安装。这将安装`enzyme`库和适配器库，适用于React版本16\. 旧版React版本也有可用的适配器：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new test file (test suite) called `AddCar.test.js` in the `src` folder.
    Now we are going to create an Enzyme shallow-rendering test for our `AddCar` component.
    The first test case renders the component and checks that there are five `TextInput`
    components, as there should be. `wrapper.find` finds every node in the render
    tree that matches `TextInput`. With Enzyme tests, we can use Jest for assertions
    and here we are using `toHaveLength` to check that the found node count equals
    five. Shallow rendering tests the component as a unit and does not render any
    child components. For this case, shallow rendering is enough. Otherwise you can
    also use the full DOM rendering by using `mount`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`AddCar.test.js`的新测试文件（测试套件）。现在我们将为我们的`AddCar`组件创建一个Enzyme浅渲染测试。第一个测试用例渲染组件并检查是否有五个`TextInput`组件，因为应该有五个。`wrapper.find`找到渲染树中与`TextInput`匹配的每个节点。在Enzyme测试中，我们可以使用Jest进行断言，这里我们使用`toHaveLength`来检查找到的节点数是否等于五。浅渲染测试将组件作为一个单元进行测试，并不会渲染任何子组件。对于这种情况，浅渲染就足够了。否则，您也可以使用`mount`进行完整的DOM渲染：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, if you run the tests, you can see the following message in the terminal.
    You can also see that the number of test suites is two because the new test file
    and all tests passed:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您运行测试，您可以在终端中看到以下消息。您还可以看到测试套件的数量为两，因为有新的测试文件并且所有测试都通过了：
- en: '![](img/42d35766-4774-4990-9b63-0f46415c4de0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42d35766-4774-4990-9b63-0f46415c4de0.png)'
- en: 'You can also test events with Enzyme using the `simulate` method. The following
    example shows how to test the `onChange` event of the `TextField` brand in the
    `AddCar` component. This example also shows how to access the state of the component.
    We first use `wrapper.find` to find the first `TextField`, which is used for the
    car brand. Then, we set the value of `TextField` and use the `simulate` method
    to simulate the change event. Finally, we check the value of the brand state that
    should now contain `Ford`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`simulate`方法使用Enzyme测试事件。以下示例显示了如何测试`AddCar`组件中`TextField`品牌的`onChange`事件。此示例还显示了如何访问组件的状态。我们首先使用`wrapper.find`查找第一个`TextField`，用于汽车品牌。然后，我们设置`TextField`的值，并使用`simulate`方法模拟更改事件。最后，我们检查品牌状态的值，该值现在应该包含`Ford`：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we gave a basic overview of how to test React apps. Jest is
    a testing library developed by Facebook, and it is already available in our frontend
    because we created our app with `create-react-app`. We created a couple of tests
    with Jest, and ran those tests to see how you can check the results of tests.
    We installed Enzyme, which is a test utility for React. With Enzyme, you can easily
    test your React component rendering and events. In the next chapter, we will secure
    our application, and add the login functionality to the frontend.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对如何测试React应用程序进行了基本概述。Jest是Facebook开发的一个测试库，因为我们使用`create-react-app`创建了我们的应用程序，所以它已经可用于我们的前端。我们使用Jest创建了一些测试，并运行这些测试，以查看如何检查测试的结果。我们安装了Enzyme，这是一个用于React的测试工具。使用Enzyme，您可以轻松测试React组件的渲染和事件。在下一章中，我们将保护我们的应用程序，并在前端添加登录功能。
- en: Questions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Jest?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jest是什么？
- en: How should you create test cases using Jest?
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用Jest创建测试用例？
- en: How should you create a snapshot test using Jest?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用Jest创建快照测试？
- en: What is Enzyme?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Enzyme是什么？
- en: How should you install Enzyme?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何安装Enzyme？
- en: How should you test rendering with Enzyme?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用Enzyme进行渲染测试？
- en: How should you test events with Enzyme?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用Enzyme测试事件？
- en: Further reading
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React and testing:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他关于学习React和测试的优质资源。
- en: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
- en: '[https://www.packtpub.com/web-development/jasmine-javascript-testing-second-edition](https://www.packtpub.com/web-development/jasmine-javascript-testing-second-edition)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/jasmine-javascript-testing-second-edition](https://www.packtpub.com/web-development/jasmine-javascript-testing-second-edition)'
