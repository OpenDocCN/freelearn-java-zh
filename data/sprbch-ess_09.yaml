- en: Chapter 9. Testing the Spring Batch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章 测试Spring Batch
- en: In the previous chapter, we learned the importance of performance and scaling
    batch applications through different configurations (namely, thread model, parallel
    processing, remote chunking, and partitioning techniques) and how to choose the
    right strategy to scale the batch application with the available infrastructure.
    Spring Batch applications are developed and configured with individual components
    and different integrations, and hence it is important to test the individual features
    as well as the integrated project for its expected behavior.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了通过不同的配置（即线程模型、并行处理、远程分块和分区技术）来提高批处理应用程序的性能和可扩展性的重要性，以及如何选择合适的策略来利用现有基础设施扩展批处理应用程序。Spring
    Batch应用程序是通过单个组件和不同的集成进行开发和配置的，因此测试单个功能以及集成项目以验证其预期行为是很重要的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Types of testing for Spring Batch
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch的测试类型
- en: Unit testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Integration testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: Functional testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Types of testing for Spring Batch
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch的测试类型
- en: The primary purpose of any software testing is to detect software failures and
    correct them. The scope of software testing can be established from validating
    the software components to verifying the software functionality and the software
    functioning in various environments and conditions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 任何软件测试的主要目的是检测软件故障并纠正它们。软件测试的范围可以从验证软件组件到验证软件功能，以及软件在各种环境和条件下的运行。
- en: 'The following are the types of software testing that we might want to perform
    on Spring Batch applications:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可能希望在Spring Batch应用程序上执行的一些软件测试类型：
- en: '**Unit testing**: Also known as component testing, this refers to verifying
    the functionality of a specific piece of code. Unit testing is generally written
    by the developers.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：也称为组件测试，这指的是验证特定代码片段的功能。单元测试通常由开发者编写。'
- en: '**Integration testing**: This identifies the defects in the interfaces and
    the interaction between integrated components. As the software components are
    integrated in an iteratively incremental fashion, integration testing is an important
    testing aspect in larger projects.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：这识别了接口和集成组件之间的缺陷。由于软件组件是迭代增量地集成的，因此集成测试是大型项目中重要的测试方面。'
- en: '**Functional testing**: This verifies the functionality of a specific code
    component or group of code components, as defined in the functional specification
    of a particular application.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：这验证了特定代码组件或代码组件组的功能，如特定应用程序的功能规范中定义的那样。'
- en: '**Performance testing**: This verifies if the entire system is meeting the
    performance standards expected from the specified environment or run conditions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能测试**：这验证了整个系统是否满足从指定的环境或运行条件中期望的性能标准。'
- en: Functional testing and performance testing are usually covered together in system
    testing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试和性能测试通常在系统测试中一起进行。
- en: Unit testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit testing is the component-level testing performed by developers, with the
    source code and test plan prepared by developers. If the unit test fails, developers
    can fix the issues of the component and perform the unit test again. The following
    figure depicts the unit test scenario.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是由开发者执行的对组件级别的测试，开发者准备源代码和测试计划。如果单元测试失败，开发者可以修复组件的问题并再次执行单元测试。以下图展示了单元测试场景。
- en: '![Unit testing](img/3372OS_09_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![单元测试](img/3372OS_09_01.jpg)'
- en: JUnit
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit
- en: JUnit is the standard Java framework to perform unit testing. Most IDEs have
    in-built support for JUnit. TestNG can also be used as a JUnit analog.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是执行单元测试的标准Java框架。大多数IDE都内置了对JUnit的支持。TestNG也可以用作JUnit的类似物。
- en: JUnit test cases can be written as simple Java classes to be executed with the
    `@Test` annotation on a method that performs the test operation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit测试用例可以编写为简单的Java类，通过在执行测试操作的方法上使用`@Test`注解来执行。
- en: 'The following is an example of JUnit on a Java String concatenation operation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个JUnit在Java字符串连接操作上的示例：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Junit` class to test this Java class can be as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试此Java类的JUnit类可以如下所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding class, the `testConcatenate` method with the `@Test` annotation
    verified the `MyClass java component`. The `assertEquals()` method does the actual
    testing by comparing the `MyClass.concatenate()` method output with the expected
    output. If the comparison fails, the `assertEquals()` method throws an exception.
    We can also write methods to set up operations before the unit test method execution
    with `@Before` annotation and clean up tasks after the unit test operation with
    the `@After` annotation. A detailed list of JUnit classes and their usage can
    be referred to from JUnit API ([http://junit.sourceforge.net/javadoc/](http://junit.sourceforge.net/javadoc/)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的类中，带有 `@Test` 注解的 `testConcatenate` 方法验证了 `MyClass java 组件`。`assertEquals()`
    方法通过比较 `MyClass.concatenate()` 方法的输出与预期输出来进行实际测试。如果比较失败，`assertEquals()` 方法将抛出异常。我们还可以编写方法，使用
    `@Before` 注解在单元测试方法执行之前设置操作，并使用 `@After` 注解在单元测试操作之后清理任务。可以参考 JUnit API（[http://junit.sourceforge.net/javadoc/](http://junit.sourceforge.net/javadoc/)）获取
    JUnit 类的详细列表及其用法。
- en: Mockito
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mockito
- en: As we need to perform batch application testing, each component can access the
    other with some dependency. Replicating all those classes needs to create the
    instances of such objects and provide to the component under test. Mockito is
    an open source Java framework that lets us create test double objects (mock objects)
    easily for the purpose of testing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要执行批处理应用程序测试，每个组件都可以通过某些依赖关系访问其他组件。需要复制所有这些类来创建此类对象的实例并将其提供给正在测试的组件。Mockito
    是一个开源的 Java 框架，它使我们能够轻松地创建用于测试的测试双对象（模拟对象）。
- en: 'Mockito can be added to the application with an easy Maven dependency, such
    as the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过简单的 Maven 依赖关系将 Mockito 添加到应用程序中，例如以下内容：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In a batch application, we have the `EmployeeReader` class that we need to
    create an object during the test execution. This can be performed with the help
    of `Mockito` within the `JUnit` test class, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在批处理应用程序中，我们有一个 `EmployeeReader` 类，在测试执行期间需要创建一个对象。这可以通过在 `JUnit` 测试类中使用 `Mockito`
    来完成，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code snippet, we created the `EmployeeReader` object with the
    help of the `mock()` method from `Mockito` within the JUnit `@Before` (setup)
    method. We shall utilize this object in the `@Test` method to validate the functionality
    of the component.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用 JUnit 的 `@Before`（设置）方法中的 `Mockito` 的 `mock()` 方法创建了 `EmployeeReader`
    对象。我们将在 `@Test` 方法中使用此对象来验证组件的功能。
- en: Likewise, any Spring Batch components, such as listeners and validator must
    be unit tested to verify functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，任何 Spring Batch 组件，如监听器和验证器，都必须进行单元测试以验证其功能。
- en: Integration testing
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: Integration testing identifies the defects in the software components as they
    are integrated in an iteratively incremental fashion. Integration testing is an
    important testing aspect in larger projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试以迭代增量方式将软件组件集成时识别缺陷。集成测试是大型项目中的重要测试方面。
- en: The modules that are unit tested are grouped to the larger aggregation, tested
    according to the integration test plan, and then the tested application is ready
    for its next level of testing as a system for functional testing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的模块被分组到更大的聚合中，根据集成测试计划进行测试，然后测试的应用程序作为功能测试的系统准备进行下一级测试。
- en: '![Integration testing](img/3372OS_09_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![集成测试](img/3372OS_09_02.jpg)'
- en: The following are the two ways to perform component testing with Spring Batch.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Spring Batch 中执行组件测试的两种方法。
- en: Listener-based approach
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于监听器的方法
- en: 'The following class-level annotations help in testing the Spring Batch components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类级别的注解有助于测试 Spring Batch 组件：
- en: '`@RunWith`(`SpringJUnit4ClassRunner.class`): This annotation indicates that
    the class should use the Spring support for JUnit facilities.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith`(`SpringJUnit4ClassRunner.class`): 这个注解表示该类应使用 Spring 对 JUnit 服务的支持。'
- en: '`@ContextConfiguration`: This lets the program know about the configuration
    properties that contain the application context.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ContextConfiguration`: 这让程序了解包含应用程序上下文的配置属性。'
- en: '`@TestExecutionListeners`: This helps in configuring listeners to help the
    test execution to set up the abilities such as dependency injection and step scope
    test execution.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@TestExecutionListeners`: 这有助于配置监听器以帮助测试执行设置依赖注入和步骤范围测试执行等能力。'
- en: 'The following is a sample configuration using these annotations:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用这些注解的示例配置：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The StepScopeTestUtils approach
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤范围测试工具方法
- en: The `StepScopeTestUtils` utility class is used to create and manipulate `StepScope`
    in unit tests. This helps in using the Spring test support and injecting dependencies
    into the test case being the step scoped in the application context.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`StepScopeTestUtils` 实用工具类用于在单元测试中创建和操作 `StepScope`。这有助于使用 Spring 测试支持并将依赖项注入到应用程序上下文中作为步骤范围的测试用例。'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `doInStepScope()` method of `StepScopeTestUtils` takes in `stepExecution`
    and the callable implementation; it automatically takes the runtime dependency
    injection and returns the result. The rest of the test is about validating the
    number of `empReads` with the expected number, with the `assertEquals()` method
    of `JUnit`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`StepScopeTestUtils` 的 `doInStepScope()` 方法接受 `stepExecution` 和可调用实现；它自动进行运行时依赖注入并返回结果。其余的测试是使用
    JUnit 的 `assertEquals()` 方法验证 `empReads` 的数量与预期数量。'
- en: Functional testing
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: Functional testing verifies the functionality of a specific code component or
    a group of code components, as defined in the functional specification of the
    particular application with input data for the components and the output behavior
    is compared with the expected behaviour. Functional testing is the "black box"
    testing, as we deal with only the external system behavior for the specific input
    with the expected output.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试验证特定代码组件或一组代码组件的功能，正如特定应用程序的功能规范中定义的那样，为组件提供输入数据，并将输出行为与预期行为进行比较。功能测试是“黑盒”测试，因为我们只处理特定输入的预期输出，只涉及外部系统行为。
- en: '![Functional testing](img/3372OS_09_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![功能测试](img/3372OS_09_03.jpg)'
- en: In a Spring Batch application, the entire job is considered as a unit of execution
    and it can be tested for its functionality with the help of `JobLauncherTestUtils`,
    a utility class to test Spring Batch jobs. `JobLauncherTestUtils` provides methods
    to launch an entire `AbstractJob`, allowing for end-to-end testing of individual
    steps without having to run every step in the job. `JobLauncherTestUtils` also
    provides the ability to run steps individually from `FlowJob` or `SimpleJob`.
    By launching steps within a job on their own, end-to-end testing of individual
    steps can be performed without having to run every step in the job.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring Batch 应用程序中，整个作业被视为执行单元，并且可以使用 `JobLauncherTestUtils`（一个用于测试 Spring
    Batch 作业的实用工具类）来测试其功能。`JobLauncherTestUtils` 提供了启动整个 `AbstractJob` 的方法，允许对单个步骤进行端到端测试，而无需运行作业中的每个步骤。`JobLauncherTestUtils`
    还提供了从 `FlowJob` 或 `SimpleJob` 运行步骤的能力。通过在作业中单独启动步骤，可以执行单个步骤的端到端测试，而无需运行作业中的每个步骤。
- en: 'The following code snippet is an example of using `JobLauncherTestUtils` to
    perform job and step launching:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是使用 `JobLauncherTestUtils` 来执行作业和步骤启动的示例：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, with the help of `JobLauncherTestUtils`, we are able
    to launch the batch job, a particular step, with the help of a simple API as part
    of the JUnit `@Test` method. The `@Before` (setup) method prepares the `JobLaunchParameters`
    with the details of the input `employeeData` file to be processed and output result
    file location to be stored.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，借助 `JobLauncherTestUtils`，我们能够通过 JUnit `@Test` 方法的一部分简单 API 启动批处理作业，以及特定的步骤。`@Before`（设置）方法使用要处理的输入
    `employeeData` 文件详情和要存储的输出结果文件位置来准备 `JobLaunchParameters`。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this chapter, we learned the importance of software testing and the
    types of software testing we might want to perform on a Spring Batch application.
    We also learned about different open source frameworks, such as JUnit and Mockito,
    to perform unit testing on Spring Batch components. We finished this chapter with
    an understanding of Spring support, APIs to perform unit testing, integration
    testing, and functional testing on Spring Batch applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们学习了软件测试的重要性以及我们可能希望在 Spring Batch 应用程序上执行的各种软件测试类型。我们还了解了不同的开源框架，例如 JUnit
    和 Mockito，用于对 Spring Batch 组件进行单元测试。我们以对 Spring 支持的理解结束本章，包括执行 Spring Batch 应用程序的单元测试、集成测试和功能测试的
    API。
- en: In the [Appendix](apa.xhtml "Appendix A. Appendix") section, we discuss in detail
    about setting up the development environment, project configurations, and Spring
    Batch administration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[附录](apa.xhtml "附录 A. 附录)部分，我们详细讨论了设置开发环境、项目配置和 Spring Batch 管理员。
