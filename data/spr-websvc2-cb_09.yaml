- en: Chapter 9. RESTful Web-Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。RESTful Web服务
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up a Spring RESTful Web-Service, using RESTful features in Spring MVC
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring MVC中的RESTful功能设置Spring RESTful Web服务
- en: Using the `RESTClient` tool to access a Spring RESTful Web-Service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`RESTClient`工具访问Spring RESTful Web服务
- en: Setting up a Spring RESTful Web-Service using HTTP message conversion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP消息转换设置Spring RESTful Web服务
- en: Creating a WS client for the Spring RESTful Web-Service using Spring template
    classes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Spring RESTful Web服务创建WS客户端，使用Spring模板类
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Simple Object Access Protocol (SOAP)** allows applications to communicate
    with one another using XML as the communication format (SOAP is well understood),
    but because it is XML-based, it tends to be verbose, even for very simple Web-Service
    scenarios.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单对象访问协议（SOAP）**允许应用程序使用XML作为通信格式进行通信（SOAP很容易理解），但由于它是基于XML的，即使对于非常简单的Web服务场景，它也往往冗长。'
- en: '**Representational State Transfer (REST)**, published as a doctoral dissertation
    by Roy Fielding in 2000, aimed at simplifying the usage of Web-Service.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**表述性状态转移（REST）**，由Roy Fielding于2000年发表的博士论文，旨在简化Web服务的使用。'
- en: While SOAP uses a lot of XML (that looks very complex) to communicate, REST
    uses very lightweight and human-readable data (for example, the request URI [http://localhost:8080/LiveRestaurant/customerAccount/234](http://localhost:8080/LiveRestaurant/customerAccount/234)
    returns `123-3456`. Compare this simple request and response with SOAP request/response
    envelop, already presented in the earlier chapters of this book. Since REST Web-Service
    implementation is very flexible and could be very easy, it requires no toolkit.
    However, SOAP-based Web-Services need tools for simplification (for example, to
    call a SOAP Web-Service, you would use tools to generate client-side proxy classes
    for a contract-last Web-Service class, or use tools to generate domain classes
    from a schema in a contract-first Web-Service). In the earlier chapters, you will
    have realized how strict a contract-first Web-Service is with the `request/response`
    format (it must match the contract). The REST Web-Service `request/response` format
    is all up to developers, and could be designed as easily as possible. While using
    SOAP Web-Services, using JavaScript is not easy (it needs a lot of code). REST
    usage is simplified using AJAX technologies and the JSON format.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP使用大量XML（看起来非常复杂）进行通信，而REST使用非常轻量级和易读的数据（例如，请求URI[http://localhost:8080/LiveRestaurant/customerAccount/234](http://localhost:8080/LiveRestaurant/customerAccount/234)返回`123-3456`）。将此简单请求和响应与SOAP请求/响应信封进行比较，这些信封已经在本书的前几章中介绍过。由于REST
    Web服务实现非常灵活且非常简单，因此不需要工具包。但是，基于SOAP的Web服务需要工具来简化（例如，要调用SOAP Web服务，您将使用工具为合同后的Web服务类生成客户端代理类，或者使用工具从合同优先的Web服务中生成域类）。在前几章中，您将意识到合同优先的Web服务有多么严格（它必须与合同匹配）。REST
    Web服务的请求/响应格式完全由开发人员决定，并且可以尽可能轻松地设计。在使用SOAP Web服务时，使用JavaScript并不容易（需要大量代码）。使用AJAX技术和JSON格式简化了REST的使用。
- en: 'Here are some of REST''s demerits: REST only works over HTTP;calling a RESTful
    Web-Service is limited by HTTP verbs: GET, POST, PUT, and DELETE.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是REST的一些缺点：REST仅适用于HTTP；调用RESTful Web服务受到HTTP动词的限制：GET、POST、PUT和DELETE。
- en: RESTful was built on the principles of REST, in which HTTP's methods are used
    based on their concepts. For example, HTTP's `GET, POST, PUT`, and `DELETE` are
    all used in a RESTful architecture that match their meaning in the same fashion
    as with HTTP.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful是建立在REST原则之上的，其中使用HTTP的方法基于其概念。例如，HTTP的`GET、POST、PUT`和`DELETE`都在RESTful架构中使用，与HTTP的含义相匹配。
- en: RESTful Web-Services expose the state of its resources. In this chapter, for
    example, a RESTful service is exposed to get the list of available order items
    and the order object, when an order is placed in an online restaurant. To get
    a list of the available order items, the `GET` method is used, and for placing
    an order, the `POST` method is used. The method `PUT` could be used to add/update
    an entry, and `DELETE` could be used to delete an entry.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful Web服务公开其资源的状态。在本章中，例如，RESTful服务公开了获取在线餐厅中可用订单项目列表和订单对象的服务。要获取可用订单项目列表，使用`GET`方法，而要下订单，则使用`POST`方法。`PUT`方法可用于添加/更新条目，`DELETE`方法可用于删除条目。
- en: 'Here is the sample URL to make a RESTful Web-Service call and to get the list
    of available order items:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于进行RESTful Web服务调用并获取可用订单项目列表的示例URL：
- en: '[http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems)。'
- en: 'The following is the return response (response format is not necessarily in
    XML format; it could be in JSON, plain-text, or any format):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是返回响应（响应格式不一定是XML格式；它可以是JSON、纯文本或任何格式）：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are several implementations of the RESTful Web-Service such as `Restlet,
    RestEasy`, and `Jersey. Jersey`, the most significant one in this group, is the
    implementation of JAX-RS (JSR 311).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful Web服务有几种实现，例如`Restlet、RestEasy`和`Jersey`。其中，Jersey是这一组中最重要的实现，是JAX-RS（JSR
    311）的实现。
- en: 'Spring, being a widely-used framework of Java EE, introduced support for RESTful
    Web-Services in release 3\. RESTful has been integrated into Spring''s MVC layer
    that allows applications to build on Spring using RESTful features. The most significant
    of these features includes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Spring作为Java EE广泛使用的框架，在3.0版本中引入了对RESTful Web服务的支持。RESTful已经集成到Spring的MVC层中，允许应用程序使用RESTful功能构建Spring。其中最重要的功能包括：
- en: '**Annotations**, such as `@RequestMapping` and `@PathVariable`, used for URI
    mappings and passing parameters.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释**，例如`@RequestMapping`和`@PathVariable`，用于URI映射和传递参数。'
- en: '`ContentNegotiatingViewResolver`, which allows the usage of different MIME
    types (such as `text/xml, text/json`, and `text/plain)`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContentNegotiatingViewResolver`，允许使用不同的MIME类型（如`text/xml、text/json`和`text/plain`）'
- en: '`HttpMessageConverter`, which allows the production of multiple representations,
    based on the client requests (such as ATOM, XML, and JSON).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpMessageConverter`允许基于客户端请求（如ATOM、XML和JSON）生成多种表示。'
- en: Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring MVC中的RESTful特性设置Spring RESTful Web服务。
- en: Spring 3.0 supports RESTful Web-Services based on Spring MVC. Spring uses annotations
    to set up a RESTful Web-Service and needs to be configured (within the Spring
    application context file) to scan for annotation. A spring MVC controller is required
    to set up a RESTful Web-Service. The `@Controller` annotation tags a class as
    the MVC controller ([http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html](http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html)).
    The `@RequestMapping` annotation maps incoming requests to an appropriate Java
    method in the controller class. Using this annotation, you can define the URI
    and the HTTP method that is mapped to a Java class method. For example, in the
    following example, the method `loadOrderItems` will be called if the request URI
    is followed by `/orderItems`, and `@PathVariable` is for injecting the value of
    the request parameters (`{cayegoryId}`) variable into a method parameter `(String
    cayegoryId):`
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 3.0支持基于Spring MVC的RESTful Web服务。Spring使用注解来设置RESTful Web服务，并需要在Spring应用程序上下文文件中进行配置以扫描注解。需要一个Spring
    MVC控制器来设置RESTful Web服务。`@Controller`注解标记一个类为MVC控制器。`@RequestMapping`注解将传入的请求映射到控制器类中的适当Java方法。使用这个注解，你可以定义URI和HTTP方法，这些方法映射到Java类方法。例如，在下面的例子中，如果请求URI后跟着`/orderItems`，那么方法`loadOrderItems`将被调用，`@PathVariable`用于将请求参数（`{cayegoryId}`）的值注入到方法参数中（`String
    cayegoryId`）：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this recipe, implementing a RESTful Web-Service using Spring 3 MVC is presented.
    The client project of this Web-Service is implemented here, but it will be detailed
    in the last recipe of this chapter: *Creating a WS client for Spring RESTful Web-Service
    using Spring template classes*.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，介绍了使用Spring 3 MVC实现RESTful Web服务。这个Web服务的客户端项目在这里实现了，但将在本章的最后一个示例中详细介绍：*使用Spring模板类为Spring
    RESTful Web服务创建WS客户端*。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-9.1` (the `LiveRestaurant_R-9.1-Client`
    project is included in the code for testing purposes) with the following Maven
    dependencies:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，项目的名称是`LiveRestaurant_R-9.1`（`LiveRestaurant_R-9.1-Client`项目包含在代码中用于测试目的），具有以下Maven依赖项：
- en: '`com.springsource.javax.servlet-2.5.0.jar`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.javax.servlet-2.5.0.jar`'
- en: '`spring-oxm-3.0.5.RELEASE.jar`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-oxm-3.0.5.RELEASE.jar`'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`spring-webmvc-3.0.5.RELEASE.jar`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-webmvc-3.0.5.RELEASE.jar`'
- en: '`xstream-1.3.1.jar`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xstream-1.3.1.jar`'
- en: '`commons-logging-1.1.1.jar`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commons-logging-1.1.1.jar`'
- en: '`spring-oxm` is the Spring support for Object/XML mapping, `spring-web` and
    `spring-webmvc` are the support for Seb and MVC support, and `xstream` is for
    the Object/XML mapping framework.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-oxm`是Spring对对象/XML映射的支持，`spring-web`和`spring-webmvc`是对Seb和MVC支持的支持，`xstream`是用于对象/XML映射框架的支持。'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Configure `MessageDispatcherServlet` inside the `web.xml` file `(URL:http://<host>:<port>/<appcontext>`/*
    is to be forwarded to this servlet).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中配置`MessageDispatcherServlet`（URL：http://<host>:<port>/<appcontext>/*将被转发到此servlet）。
- en: Define the controller file (`OrderController.java`).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义控制器文件（`OrderController.java`）。
- en: Define the domain POJOs (`Order.java,OrderItem.java`) and services `(OrderService,
    OrderServiceImpl)`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义领域POJO（`Order.java,OrderItem.java`）和服务（`OrderService, OrderServiceImpl`）。
- en: Configure the server-side application context-file (`order-servlet.xml`).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置服务器端应用程序上下文文件（`order-servlet.xml`）。
- en: Run the following command on `Liverestaurant_R-9.1:`
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-9.1`上运行以下命令：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the following command on `Liverestaurant_R-9.1-Client:`
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-9.1-Client`上运行以下命令：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is client-side output:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是客户端输出：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Browse to this link: [http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems),
    and you will be provided with the following response:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到此链接：[http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems)，您将得到以下响应：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The application is an MVC web project, in which a controller returns Spring's
    `Model` and `View` objects. Spring's `MarshallingView` marshalls the model object
    into XML, using a `marshaller` (`XStreamMarshaller`), and the XML will be sent
    back to the client.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序是一个MVC Web项目，其中一个控制器返回Spring的`Model`和`View`对象。Spring的`MarshallingView`将模型对象编组成XML，使用`marshaller`（`XStreamMarshaller`），并将XML发送回客户端。
- en: All requests will come to `DispatcherServlet`, which will be forwarded to the
    controller - `OrderController`, and based on the request URI, an appropriate method
    will be called that will return a response back to the caller. The following configuration
    in `web.xml` forwards all the requests to the `DispatcherServlet:`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有请求将到达`DispatcherServlet`，它将被转发到控制器`OrderController`，根据请求URI，将调用适当的方法返回响应给调用者。`web.xml`中的以下配置将所有请求转发到`DispatcherServlet`：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The following setting in `order-context.xml` causes Spring to detect all annotations
    in the package (this includes `OrderService` and `OrderController)`. The `BeanNameViewResolver`
    is for mapping a name `(orderXmlView` in `OrderController)` to a view (the bean
    `orderXmlView)`, which is an instance of `org.springframework.web.servlet.view.xml.MarshallingView:`
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`order-context.xml`中的以下设置导致Spring检测包中的所有注解（包括`OrderService`和`OrderController`）。`BeanNameViewResolver`用于将名称（`OrderController`中的`orderXmlView`）映射到视图（`orderXmlView`
    bean），它是`org.springframework.web.servlet.view.xml.MarshallingView`的实例：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`@Controller` tags the class `OrderController` as the controller in an MVC
    pattern. All caller requests will be forwarded to this class, and based on the
    request URI, an appropriate method will be called. For example, the method `placeOrder`
    will be called if any URI similar to `http://<host>:<port>/<appcontext>/order/1`
    with an HTTP `POST` method comes from a caller request.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Controller`标记`OrderController`类为MVC模式中的控制器。所有调用请求将被转发到该类，并根据请求URI，将调用适当的方法。例如，如果来自调用者请求的HTTP
    `POST`方法的URI类似于`http://<host>:<port>/<appcontext>/order/1`，则将调用`placeOrder`方法。'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`@PathVariable` causes the `orderId` parameter from the URI to be injected
    and passed to the `placeOrder` method.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PathVariable`导致从URI中注入并传递给`placeOrder`方法的`orderId`参数。'
- en: 'The body of the method, `placeOrder`, calls a method from the `OrderService`
    interface and returns the `Order` object:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的主体`placeOrder`调用`OrderService`接口的方法并返回`Order`对象：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then, it builds a view based on marshalling the `Order` object into the XML
    format, using the `Marshallingview` bean (MarshallingView, which is the view in
    MVC, uses `XStreamMarshaller` to marshall the model object into XML format), and
    returns it to the caller of the service.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它基于将`Order`对象编组成XML格式来构建视图，使用`Marshallingview` bean（MVC中的视图使用`XStreamMarshaller`将模型对象编组成XML格式），并将其返回给服务的调用者。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `loadOrderItems` method works in the same way, except that the URI should
    be similar to the following pattern: `http://<host>:<port>/<appcontext>/orderItems`,
    with an HTTP `GET:`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadOrderItems`方法的工作方式相同，只是URI应该类似于以下模式：`http://<host>:<port>/<appcontext>/orderItems`，使用HTTP
    `GET`：'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this recipe, the database activities are not implemented. However, in a real
    application, the HTTP method `DELETE` could be used to delete an entity (for example,
    `orderItem)` from the database, and the `PUT` method could be used to update a
    record (for example, `order)`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，数据库活动未实现。但是，在实际应用中，可以使用HTTP方法`DELETE`从数据库中删除实体（例如`orderItem`），并且可以使用`PUT`方法更新记录（例如`order`）。
- en: See also...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this book:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中：
- en: '[Chapter 6](ch06.html "Chapter 6. Marshalling and Object-XML Mapping (OXM)"),*Marshalling
    and Object-XML Mapping (OXM):*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。编组和对象-XML映射（OXM）")，*编组和对象-XML映射（OXM）*：'
- en: '*Marshalling with XStream*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用XStream进行编组*'
- en: Using the REST Client tool to access Spring RESTful Web-Service
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST客户端工具访问Spring RESTful Web-Service
- en: '**REST Client** is an application to call and test RESTful Web-Services. REST
    Client is provided as a Firefox/Flock add-on. The Firefox REST Client supports
    all HTTP methods, **RFC2616 (HTTP/1.1),** and **RFC2518 (WebDAV).** Using this
    add-on, you can build your own customized URI, add a header, send it to RESTful
    Web-Services, and get the response back.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST Client**是一个用于调用和测试RESTful Web-Services的应用程序。REST Client作为Firefox/Flock附加组件提供。Firefox
    REST Client支持所有HTTP方法，**RFC2616（HTTP/1.1）**和**RFC2518（WebDAV）**。使用此附加组件，您可以构建自己定制的URI，添加标头，将其发送到RESTful
    Web-Services，并获取响应。'
- en: In this recipe, we will learn how to use Firefox REST Client to test how a RESTful
    Web-Service is presented. This recipe uses the first recipe of this chapter, *Setting
    up a Spring RESTful Web-Service using RESTful features in Spring MVC*, as RESTful
    Web-Services.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用Firefox REST Client测试RESTful Web-Service的呈现方式。本教程使用本章的第一个教程，*使用Spring
    MVC中的RESTful功能设置Spring RESTful Web-Service*，作为RESTful Web-Services。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Download and install the following add-on for Firefox:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装Firefox的以下附加组件：
- en: '[https://addons.mozilla.org/en-US/firefox/addon/restclient/](http://https://addons.mozilla.org/en-US/firefox/addon/restclient/).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://addons.mozilla.org/en-US/firefox/addon/restclient/](http://https://addons.mozilla.org/en-US/firefox/addon/restclient/)。'
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Run `LiveRestaurant_R-9.1` from this chapter.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本章运行`LiveRestaurant_R-9.1`。
- en: Open the Firefox browser and go to **Tools | Rest Client**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器，转到**工具 | Rest Client**。
- en: 'Change the **Method** to **GET** and enter the URL: [http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems),
    and click on **Send:**'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**方法**更改为**GET**，并输入URL：[http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems)，然后单击**发送**：
- en: 'Here is the result:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![How to do it...](img/5825OS_09_01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5825OS_09_01.jpg)'
- en: 'Change **Method** to **POST**, enter the URL: [http://localhost:8080/LiveRestaurant/order/1](http://localhost:8080/LiveRestaurant/order/1),
    and click on **Send:**'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**方法**更改为**POST**，输入URL：[http://localhost:8080/LiveRestaurant/order/1](http://localhost:8080/LiveRestaurant/order/1)，然后单击**发送**：
- en: '![How to do it...](img/5825OS_09_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5825OS_09_02.jpg)'
- en: See also...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring MVC中的RESTful功能设置Spring RESTful Web-Service
- en: Setting up a Spring RESTful Web-Service using HTTP message conversion
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP消息转换设置Spring RESTful Web-Service
- en: The client and server on the HTTP protocol exchange data using text format.
    Eventually, there are requirements to accept different request formats and covert
    the text format into a meaningful format, such as an Object or the JSON format.
    Spring provides features to provide multiple requests/presentations to/from the
    same text format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议上的客户端和服务器使用文本格式交换数据。最终，需要接受不同的请求格式，并将文本格式转换为有意义的格式，例如对象或JSON格式。Spring提供了提供从相同文本格式到多个请求/演示的功能。
- en: Spring 3 introduced `ContentNegotiatingViewResolver`, which can select various
    views from the same URI and can provide multiple presentations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 3引入了`ContentNegotiatingViewResolver`，它可以从相同的URI选择各种视图，并提供多个演示。
- en: 'The alternate way of doing the same task is using the `HttpMessageConverter`
    interface and the `@ResponseBody` annotation. Implementation of the `HttpMessageConverter`
    interface from Spring converts HTTP messages into several formats. Its widely
    used implementations include:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 执行相同任务的另一种方法是使用`HttpMessageConverter`接口和`@ResponseBody`注解。Spring中`HttpMessageConverter`接口的实现将HTTP消息转换为多种格式。其广泛使用的实现包括：
- en: '`StringHttpMessageConverter` implementation reads/writes text from the HTTP
    request/response. This is the default converter.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringHttpMessageConverter`实现从HTTP请求/响应中读取/写入文本。这是默认转换器。'
- en: '`MarshallingHttpMessageConverter` implementation marshalls/unmarshalls objects
    from the text HTTP request/response. It gets a constructor argument to specify
    the type of Marshaller (such as `Jaxb, XStream`, and so on).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MarshallingHttpMessageConverter`实现从文本HTTP请求/响应中编组/解组对象。它获取构造函数参数以指定编组器的类型（如`Jaxb，XStream`等）。'
- en: '`MappingJacksonHttpMessageConverter` implementation converts text into the
    JSON data format or vice-versa.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MappingJacksonHttpMessageConverter`实现将文本转换为JSON数据格式，反之亦然。'
- en: In this recipe, message conversion using `MarshallingHttpMessageConverter, MappingJacksonHttpMessageConverter`,
    and `AtomFeedHttpMessageConverter` is presented. Since this project is similar
    to the first recipe of this chapter, *Setting up a Spring RESTful Web-Service
    using RESTful features in Spring MVC*, it is reused as a template for the project.
    The difference in this recipe is in the controller implementation and the application
    context configuration.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，使用`MarshallingHttpMessageConverter, MappingJacksonHttpMessageConverter`和`AtomFeedHttpMessageConverter`进行消息转换。由于此项目类似于本章的第一个示例，*使用Spring
    MVC中的RESTful功能设置Spring RESTful Web服务*，因此它被重用作项目的模板。本示例的区别在于控制器实现和应用程序上下文配置。
- en: The client project of this Web-Service is implemented here, but it will be detailed
    in the last recipe of this chapter, *Creating a WS client for Spring RESTful Web-Service
    using Spring template classes*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Web服务的客户端项目在这里实现，但将在本章的最后一个示例中详细介绍，*使用Spring模板类为Spring RESTful Web服务创建WS客户端*。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-9.2 (LiveRestaurant_R-9.2-Client`
    is included in the code for testing purposes in this recipe. However, it will
    be explained in the last recipe), and it has the following Maven dependencies:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，项目名称为`LiveRestaurant_R-9.2（LiveRestaurant_R-9.2-Client`在本示例中包含在代码中以进行测试。但是，它将在最后一个示例中解释），并且具有以下Maven依赖项：
- en: '`com.springsource.javax.servlet-2.5.0.jar`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.springsource.javax.servlet-2.5.0.jar`'
- en: '`spring-oxm-3.0.5.RELEASE.jar`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-oxm-3.0.5.RELEASE.jar`'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`spring-webmvc-3.0.5.RELEASE.jar`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-webmvc-3.0.5.RELEASE.jar`'
- en: '`xstream-1.3.1.jar`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xstream-1.3.1.jar`'
- en: '`commons-logging-1.1.1.jar`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commons-logging-1.1.1.jar`'
- en: '`jackson-core-asl-1.7.5.jar`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson-core-asl-1.7.5.jar`'
- en: '`jackson-mapper-asl-1.7.5.jar`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson-mapper-asl-1.7.5.jar`'
- en: '`rome-1.0.jar`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rome-1.0.jar`'
- en: '`jackson-core` and `jackson-mapper` support the JSON format and the others
    support the ATOM format.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`jackson-core`和`jackson-mapper`支持JSON格式，其他支持ATOM格式。'
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Configure the `DispatcherServlet` inside the `web.xml` file `(URL:http://<host>:<port>/<appcontext>`/*
    is to be forwarded to this servlet).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中配置`DispatcherServlet`（URL：http://<host>:<port>/<appcontext>`/*将被转发到此servlet）。
- en: Define the controller file (`OrderController.java`).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义控制器文件（`OrderController.java`）。
- en: Define domain POJOs (`Order.java,OrderItem.java`) and services `(OrderService,
    OrderServiceImpl)`
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义领域POJOs（`Order.java,OrderItem.java`）和服务（`OrderService, OrderServiceImpl`）
- en: Configure the server-side application context-file (`order-servlet.xml`) and
    register the converters.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置服务器端应用程序上下文文件（`order-servlet.xml`）并注册转换器。
- en: 'Change the **Method** to **POST** and add a **Request Header: Name** - `accept`,
    **Value** - `application/json`. Enter the URL [http://localhost:8080/LiveRestaurant/orderJson/1](http://localhost:8080/LiveRestaurant/orderJson/1)
    and click on **Send:**![How to do it...](img/5825OS_09_03.jpg)'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**方法**更改为**POST**，并添加**请求头:名称** - `accept`，**值** - `application/json`。输入URL
    [http://localhost:8080/LiveRestaurant/orderJson/1](http://localhost:8080/LiveRestaurant/orderJson/1)
    并点击**发送：**![操作步骤...](img/5825OS_09_03.jpg)
- en: 'Change the **Method** to **GET**, and add **Request Header: Name** - `accept`,
    **Value** - `application/atom+xml`. Enter the URL [http://localhost:8080/LiveRestaurant/orderItemsFeed](http://localhost:8080/LiveRestaurant/orderItemsFeed)
    and click on **Send:**'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**方法**更改为**GET**，并添加**请求头:名称** - `accept`，**值** - `application/atom+xml`。输入URL
    [http://localhost:8080/LiveRestaurant/orderItemsFeed](http://localhost:8080/LiveRestaurant/orderItemsFeed)
    并点击**发送：**
- en: '![How to do it...](img/5825OS_09_04.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5825OS_09_04.jpg)'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe is almost the same as the first recipe of this chapter, except that
    it uses the message converter and `@ResponseBody` to provide multiple presentations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例与本章的第一个示例几乎相同，只是它使用了消息转换器和`@ResponseBody`来提供多个表示。
- en: 'In the first recipe, `MarshallingView` was responsible for converting the response
    to the selected XML type of the view (using `XstreamMarshaller)`. However, here,
    the message converters are responsible for rendering data models into a selected
    format, `MarshallingHttpMessageConverter` is responsible for converting the `List<OrderItem>`
    to the `application/xml` format (using `XstreamMarshaller)`, and `MappingJacksonHttpMessageConverter`
    is used to convert an order into the `application/json` format. `AtomFeedHttpMessageConverter`
    is used to convert `Feed` (that wraps XML content generated from `List<OrderItem>`
    using `XStreamMarshaller` into the `application/atom+xml` format:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，`MarshallingView`负责将响应转换为所选视图的XML类型（使用`XstreamMarshaller`）。然而，在这里，消息转换器负责将数据模型呈现为所选格式，`MarshallingHttpMessageConverter`负责将`List<OrderItem>`转换为`application/xml`格式（使用`XstreamMarshaller`），`MappingJacksonHttpMessageConverter`用于将订单转换为`application/json`格式。`AtomFeedHttpMessageConverter`用于将`Feed`（包装来自`List<OrderItem>`的XML内容，使用`XStreamMarshaller`生成的）转换为`application/atom+xml`格式：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the controller, the following code causes the controller's method to accept
    the request URI method's `POST` format — `json:`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，以下代码导致控制器方法接受请求URI方法的`POST`格式 - `json：`
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And it returns the `Order` object in JSON format (using `@ResponseBody` and
    `MappingJacksonHttpMessageConverter`, configured in `order-context.xml):`
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 并以JSON格式返回`Order`对象（使用`@ResponseBody`和`MappingJacksonHttpMessageConverter`在`order-context.xml`中配置）：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following code causes the controller's method to accept the request URI
    method's `GET` format — `atom:`
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码导致控制器方法接受请求URI方法的`GET`格式 - `atom：`
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It also returns the `List<OrderItem>` object in `Atom` format (using `@ResponseBody`
    and `AtomFeedHttpMessageConverter`, configured in `order-context.xml):`
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 它还以`Atom`格式返回`List<OrderItem>`对象（使用`@ResponseBody`和`AtomFeedHttpMessageConverter`在`order-context.xml`中配置）：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用Spring MVC中的RESTful功能设置Spring RESTful Web服务*'
- en: Creating a WS Client for the Spring RESTful Web-Service using Spring template
    classes
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring模板类为Spring RESTful Web服务创建WS客户端
- en: Spring provides varieties of template classes that simplify many complexities
    using different technologies. For example, `WebServiceTemplate` is for calling
    a SOAP-based Web-Service, and `JmsTemplate` is for sending/receiving JMS messages.
    Spring also has the `RestTemplate` to simplify the interaction with RESTful Web-Services.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了各种模板类，使用不同的技术简化了许多复杂性。例如，`WebServiceTemplate`用于调用基于SOAP的Web服务，`JmsTemplate`用于发送/接收JMS消息。Spring还有`RestTemplate`来简化与RESTful
    Web服务的交互。
- en: To use `RestTemplate:`
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`RestTemplate:`
- en: Create an instance of `RestTemplate` (can be done using the `@Autowired` feature)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`RestTemplate`的实例（可以使用`@Autowired`特性来完成）
- en: Configure one-to-many message converters (as described in the previous recipe)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置一对多的消息转换器（如前面的示例中所述）
- en: Call methods of `RestTemplate` to call a RESTful Web-Service and get a response
    back
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`RestTemplate`的方法来调用RESTful Web服务并获取响应
- en: In this recipe, we will learn to consume a RESTful Web-Service using the `RestTemplate`.
    This recipe uses the third recipe of this chapter, *Setting up a Spring RESTful
    Web-Service using HTTP Message Conversion*, as the RESTful Web-Service.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何使用`RestTemplate`消耗RESTful Web服务。这个示例使用了本章的第三个示例，*使用HTTP消息转换设置Spring
    RESTful Web服务*，作为RESTful Web服务。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-9.2-Client` (`LiveRestaurant_R-9.2`
    is included in this recipe to set up a RESTful server, as explained earlier in
    the recipe *Setting up a Spring RESTful Web-Service using HTTP Message Conversion)*
    with the following Maven dependencies:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，项目的名称是`LiveRestaurant_R-9.2-Client`（`LiveRestaurant_R-9.2`包含在这个示例中，用于设置RESTful服务器，如前面的示例*使用HTTP消息转换设置Spring
    RESTful Web服务*中所解释的），具有以下Maven依赖项：
- en: '`spring-oxm-3.0.5.RELEASE.jar`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-oxm-3.0.5.RELEASE.jar`'
- en: '`spring-web-3.0.5.RELEASE.jar`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-web-3.0.5.RELEASE.jar`'
- en: '`xstream-1.3.1.jar`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xstream-1.3.1.jar`'
- en: '`commons-logging-1.1.1.jar`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commons-logging-1.1.1.jar`'
- en: '`jackson-core-asl-1.7.5.jar`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson-core-asl-1.7.5.jar`'
- en: '`jackson-mapper-asl-1.7.5.jar`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson-mapper-asl-1.7.5.jar`'
- en: '`rome-1.0.jar`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rome-1.0.jar`'
- en: '`junit-4.6.jar`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.6.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Define domain POJOs `(Order.java, OrderItem.java)` and services `(OrderService,
    OrderServiceImpl)`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义领域POJOs（`Order.java`、`OrderItem.java`）和服务（`OrderService`、`OrderServiceImpl`）。
- en: Configure the client-side application context-file (`order-servlet.xml`) and
    register the converters.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置客户端应用程序上下文文件（`order-servlet.xml`）并注册转换器。
- en: Create a helper class (`OrderClient`) that wraps calling the RESTful Web-Service
    using the `RestTemplate`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个辅助类（`OrderClient`），用`RestTemplate`来调用RESTful Web服务。
- en: Run the following command on `Liverestaurant_R-9.2:`
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-9.2`上运行以下命令：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run the following command on `Liverestaurant_R-9.2-Client:`
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-9.2-Client`上运行以下命令：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is the client-side output:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Application context loaded by `OrderServiceClientTest`, loads, instantiates,
    and injects `RestTemplate` into `OrderClient`. This class calls the controller's
    method using `RestTemplate` and returns a value back to the test suite class (`OrderServiceClientTest`).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由`OrderServiceClientTest`加载的应用程序上下文加载、实例化和注入`RestTemplate`到`OrderClient`中。这个类使用`RestTemplate`调用控制器的方法，并将值返回给测试套件类（`OrderServiceClientTest`）。
- en: In the suite class test methods, the response will be compared with the desired
    values.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在套件类测试方法中，响应将与期望的值进行比较。
- en: 'The `applicationContext.xml` defines the `restTemplate` bean and sets a list
    of message converters:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationContext.xml`定义了`restTemplate` bean并设置了一系列消息转换器：'
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Converters set inside the `messageConverters` are responsible for converting
    requests/responses in different formats (XML, JSON, ATOM) back to `object` type.
    `XstreamMarshaller` gets the list of recognized POJOs `(Order, OrderItem)`, using
    the annotation tags in those classes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在`messageConverters`内部的转换器负责将不同格式（XML、JSON、ATOM）的请求/响应转换回`object`类型。`XstreamMarshaller`使用这些类中的注释标签获取已识别的POJOs（Order、OrderItem）的列表。
- en: '`OrderClient.java` is a helper class that wraps calling RESTful Web-Services,
    using `RestTemplate:`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderClient.java`是一个辅助类，用于调用RESTful Web服务，使用`RestTemplate:`'
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There's more
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'This recipe uses only two methods of the `RestTemplate` (exchange and `postForEntity)`.
    However, `RestTemplate` supports several caller methods:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只使用了`RestTemplate`的两种方法（exchange和`postForEntity`）。然而，`RestTemplate`支持多种调用方法：
- en: '`exchange:` It calls specific HTTP (GET, `POST, PUT`, and `DELETE)` methods
    and converts the HTTP response'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exchange:`它调用特定的HTTP（GET、`POST、PUT`和`DELETE`）方法并转换HTTP响应'
- en: '`getForObject:` It calls the HTTP `GET` method and converts the HTTP response
    into an object'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getForObject:`它调用HTTP的`GET`方法并将HTTP响应转换为对象'
- en: '`postForObject:` It calls the HTTP `POST` method and converts the HTTP response
    into an object'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postForObject:`它调用HTTP的`POST`方法并将HTTP响应转换为对象'
- en: See also...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this chapter:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC*'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring MVC中的RESTful功能设置Spring RESTful Web服务*'
- en: '*Setting up a Spring RESTful Web-Service using HTTP message conversion*'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTTP消息转换设置Spring RESTful Web服务*'
- en: The book, *RESTful Java Web Services*, at [http://www.packtpub.com/restful-java-web-services/book](http://www.packtpub.com/restful-java-web-services/book).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍《RESTful Java Web Services》，网址为[http://www.packtpub.com/restful-java-web-services/book](http://www.packtpub.com/restful-java-web-services/book)。
