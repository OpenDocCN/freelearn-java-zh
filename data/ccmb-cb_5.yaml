- en: Chapter 5. Running Cucumber
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。运行 Cucumber
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Integrating Cucumber with Maven
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Cucumber 与 Maven 集成
- en: Running Cucumber from the Terminal
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从终端运行 Cucumber
- en: Overriding options from the Terminal
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从终端覆盖选项
- en: Integrating Cucumber with Jenkins and GitHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Cucumber 与 Jenkins 和 GitHub 集成
- en: Running Cucumber test cases in parallel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行运行 Cucumber 测试用例
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For successful implementation of any testing framework, it is mandatory that
    test cases can be run in multiple ways so that people with different competency
    levels can use it how they need to. So, now we will focus on running Cucumber
    test cases. There are multiple ways of running Cucumber, such as integrating it
    with Maven and running it from the Terminal; we can run Cucumber remotely as well
    by integrating Cucumber with Jenkins.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功实施任何测试框架，强制要求测试用例能够以多种方式运行，以便不同能力水平的人能够按需使用。因此，现在我们将关注运行 Cucumber 测试用例。运行
    Cucumber 的方式有多种，例如将其与 Maven 集成并在终端中运行；我们还可以通过将 Cucumber 与 Jenkins 集成来远程运行 Cucumber。
- en: In this chapter, we will also cover advanced topics of running Cucumber test
    cases in parallel by a combination of Cucumber, Maven, and JUnit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将介绍如何通过 Cucumber、Maven 和 JUnit 的组合并行运行 Cucumber 测试用例的高级主题。
- en: Integrating Cucumber with Maven
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Cucumber 与 Maven 集成
- en: Maven has a lot of advantages over other build tools, such as dependency management,
    lots of plugins and the convenience of running integration tests. So let's also
    integrate our framework with Maven. Maven will allow our test cases to be run
    in different flavors, such as from the Terminal, integrating with Jenkins, and
    parallel execution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 相比其他构建工具有很多优势，例如依赖项管理、众多插件以及运行集成测试的便利性。因此，让我们也将我们的框架与 Maven 集成。Maven 将允许我们的测试用例以不同的方式运行，例如从终端运行、与
    Jenkins 集成以及并行执行。
- en: So how do we integrate with Maven? Let's find out in the next section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何与 Maven 集成？让我们在下一节中找出答案。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: I am assuming that we know the basics of Maven (the basics of Maven are out
    of the scope of this book). Follow the upcoming instructions to install Maven
    on your system and to create a sample Maven project.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设我们已经了解了 Maven 的基础知识（Maven 的基础知识不在此书的范围之内）。请按照以下说明在您的系统上安装 Maven 并创建一个示例 Maven
    项目。
- en: 'We need to install Maven on our system first. So, follow instructions mentioned
    on the following blogs:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要在我们的系统上安装 Maven。因此，请遵循以下博客上的说明：
- en: 'For Windows:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Windows 系统：
- en: '[http://www.mkyong.com/maven/how-to-install-maven-in-windows/](http://www.mkyong.com/maven/how-to-install-maven-in-windows/)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.mkyong.com/maven/how-to-install-maven-in-windows/](http://www.mkyong.com/maven/how-to-install-maven-in-windows/)'
- en: 'For Mac:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Mac 系统：
- en: '[http://www.mkyong.com/maven/install-maven-on-mac-osx/](http://www.mkyong.com/maven/install-maven-on-mac-osx/)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.mkyong.com/maven/install-maven-on-mac-osx/](http://www.mkyong.com/maven/install-maven-on-mac-osx/)'
- en: 'We can also install the Maven Eclipse plugin by following the instructions
    mentioned on this blog:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以按照本博客上提到的说明安装 Maven Eclipse 插件：
- en: '[http://theopentutorials.com/tutorials/eclipse/installing-m2eclipse-maven-plugin-for-eclipse/](http://theopentutorials.com/tutorials/eclipse/installing-m2eclipse-maven-plugin-for-eclipse/).'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://theopentutorials.com/tutorials/eclipse/installing-m2eclipse-maven-plugin-for-eclipse/](http://theopentutorials.com/tutorials/eclipse/installing-m2eclipse-maven-plugin-for-eclipse/)'
- en: 'To import a Maven project into Eclipse, follow the instructions on this blog:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 Maven 项目导入 Eclipse，请遵循本博客上的说明：
- en: '[http://www.tutorialspoint.com/maven/maven_eclispe_ide.htm](http://www.tutorialspoint.com/maven/maven_eclispe_ide.htm).'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.tutorialspoint.com/maven/maven_eclispe_ide.htm](http://www.tutorialspoint.com/maven/maven_eclispe_ide.htm)'
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Since it is a Maven project, we are going to change the `pom.xml` file to add
    the Cucumber dependencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个 Maven 项目，我们将更改 `pom.xml` 文件以添加 Cucumber 依赖项。
- en: 'First we are going to declare some custom properties which will be used by
    us in managing the dependency version:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将声明一些自定义属性，这些属性将用于管理依赖项版本：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we are going to add the dependency for Cucumber-JVM with scope as test:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加 Cucumber-JVM 的依赖项，其作用域为测试：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we need to add the dependency for Cucumber-JUnit with scope as test.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加 Cucumber-JUnit 的依赖项，其作用域为测试。
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's it! We have integrated Cucumber and Maven.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就这样！我们已经集成了 Cucumber 和 Maven。
- en: How it works…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By following these Steps, we have created a Maven project and added the Cucumber-Java
    dependency. At the moment, this project only has a `pom.xml` file, but this project
    can be used for adding different modules such as Feature files and Step Definitions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，我们已经创建了一个 Maven 项目并添加了 Cucumber-Java 依赖项。目前，这个项目只有一个 `pom.xml` 文件，但这个项目可以用于添加不同的模块，例如特性文件和步骤定义。
- en: The advantage of using properties is that we are making sure that the dependency
    version is declared at one place in the `pom.xml` file. Otherwise, we declare
    a dependency at multiple places and may end up with a discrepancy in the dependency
    version.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性的优势在于我们确保依赖项版本在 `pom.xml` 文件的一个地方声明。否则，我们会在多个地方声明依赖项，可能会导致依赖项版本不一致。
- en: The Cucumber-Java dependency is the main dependency necessary for the different
    building blocks of Cucumber. The **Cucumber-JUnit** dependency is for Cucumber
    JUnit Runner, which we use in running Cucumber test cases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber-Java 依赖项是 Cucumber 不同构建块所需的主要依赖项。**Cucumber-JUnit** 依赖项用于 Cucumber
    JUnit 运行器，我们在运行 Cucumber 测试用例时使用它。
- en: Running Cucumber from the Terminal
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从终端运行 Cucumber
- en: Now we have integrated Cucumber with Maven, running Cucumber from the Terminal
    will not be a problem. Running any test framework from the Terminal has its own
    advantages, such as overriding the run configurations mentioned in the code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 Cucumber 与 Maven 集成，从终端运行 Cucumber 将不会是问题。从终端运行任何测试框架都有其自身优势，例如覆盖代码中提到的运行配置。
- en: So how do we run Cucumber test cases from the Terminal? Let's find out in our
    next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何在终端运行 Cucumber 测试用例呢？让我们在下一节中找出答案。
- en: How to do it…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Open the command prompt and `cd` until the project root directory.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并 `cd` 到项目根目录。
- en: 'First, let''s run all the Cucumber Scenarios from the command prompt. Since
    it''s a Maven project and we have added Cucumber in test scope dependency and
    all features are also added in test packages, run the following command in the
    command prompt:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从命令提示符中运行所有 Cucumber 场景。由于这是一个 Maven 项目，并且我们已经添加了 Cucumber 测试范围依赖项，并且所有特性也添加到了测试包中，请在命令提示符中运行以下命令：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the output:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![How to do it…](img/image00159.jpeg)![How to do it…](img/image00160.jpeg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00159.jpeg)![如何操作…](img/image00160.jpeg)'
- en: 'The previous command runs everything as mentioned in the JUnit Runner class.
    However, if we want to override the configurations mentioned in the Runner, then
    we need to use following command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的命令运行了 JUnit 运行器类中提到的所有内容。然而，如果我们想覆盖运行器中提到的配置，则需要使用以下命令：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you need help on these Cucumber options, then enter the following command
    in the command prompt and look at the output:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要这些 Cucumber 选项的帮助，请在命令提示符中输入以下命令并查看输出：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is the output:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![How to do it…](img/image00161.jpeg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00161.jpeg)'
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: '`mvn test` runs Cucumber Features using Cucumber''s JUnit Runner. The `@RunWith`
    (`Cucumber.class`) annotation on the `RunCukesTest` class tells JUnit to kick
    off Cucumber. The Cucumber runtime parses the command-line options to know what
    Feature to run, where the Glue Code lives, what plugins to use, and so on. When
    you use the JUnit Runner, these options are generated from the `@CucumberOptions`
    annotation on your test.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`mvn test` 使用 Cucumber 的 JUnit 运行器运行 Cucumber 特性。`RunCukesTest` 类上的 `@RunWith`
    (`Cucumber.class`) 注解告诉 JUnit 启动 Cucumber。Cucumber 运行时解析命令行选项以确定要运行哪个特性、粘合代码的位置、要使用的插件等。当你使用
    JUnit 运行器时，这些选项是从你的测试上的 `@CucumberOptions` 注解生成的。'
- en: Overriding Options from the Terminal
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从终端覆盖选项
- en: When it is necessary to override the options mentioned in the JUnit Runner,
    then we need `Dcucumber.options` from the Terminal. Let's look at some of the
    practical examples.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要覆盖 JUnit 运行器中提到的选项时，我们需要从终端使用 `Dcucumber.options`。让我们看看一些实际例子。
- en: How to do it…
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'If we want to run a Scenario by specifying the filesystem path, run the following
    command and look at the output:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想通过指定文件系统路径来运行场景，请运行以下命令并查看输出：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![How to do it…](img/image00162.jpeg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00162.jpeg)'
- en: In the preceding code, "`5`" is the Feature file line number where a Scenario
    starts.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，"`5`" 是特性文件中场景开始的行号。
- en: 'If we want to run the test cases using Tags, then we run the following command
    and notice the output:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想通过标签运行测试用例，那么我们运行以下命令并注意输出：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the output of the preceding command:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是指令的输出：
- en: '![How to do it…](img/image00163.jpeg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00163.jpeg)'
- en: 'If we want to generate a different report, then we can use the following command
    and see the JUnit report generate at the location mentioned:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要生成不同的报告，可以使用以下命令，并查看在指定位置生成的 JUnit 报告：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![How to do it…](img/image00164.jpeg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00164.jpeg)'
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: When you override the options with `-Dcucumber.options`, you will completely
    override whatever options are hardcoded in your `@CucumberOptions`. There is one
    exception to this rule, and that is the `--plugin` option. This will not override,
    but instead, it will add a plugin.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `-Dcucumber.options` 覆盖选项时，您将完全覆盖在您的 `@CucumberOptions` 中硬编码的任何选项。此规则有一个例外，那就是
    `--plugin` 选项。它不会覆盖，而是会添加一个插件。
- en: Integrating Cucumber with Jenkins and GitHub
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Cucumber 与 Jenkins 和 GitHub 集成
- en: To schedule test case executions remotely, we integrate our testing frameworks
    with Jenkins. Jenkins has a lot of advantages as it is open source, free, easy
    to use, can schedule a run on scheduled time or trigger builds after an event,
    and so on. So it becomes very important that our Cucumber test cases are also
    run from Jenkins. We will look at this in detail in the next chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要远程调度测试用例执行，我们将我们的测试框架与 Jenkins 集成。Jenkins 作为开源、免费、易于使用，可以按计划时间运行或触发事件后的构建等，具有许多优点。因此，我们的
    Cucumber 测试用例也应在 Jenkins 上运行变得非常重要。我们将在下一章中详细探讨这一点。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Installing and running Jenkins on a local machine is out of the scope of this
    book. I am assuming that you have either local or remote Jenkins setup ready and
    can access Jenkins via the URL. If you need any help regarding the setup, follow
    the Step mentioned in the blog at [https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地机器上安装和运行 Jenkins 不在本书的讨论范围内。我假设您已经有一个本地或远程 Jenkins 设置就绪，并且可以通过 URL 访问 Jenkins。如果您需要有关设置的任何帮助，请遵循博客中提到的步骤
    [https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins)。
- en: We will also need to upload our project on GitHub. Again, committing the project
    on GitHub is out of the scope of this book, but if you need any help, you can
    follow the instructions mentioned at [https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将我们的项目上传到 GitHub。再次提醒，将项目提交到 GitHub 不在本书的讨论范围内，但如果您需要任何帮助，可以参考 [https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/)
    中提到的说明。
- en: The GitHub project URL is [https://github.com/ShankarGarg/CucumberBook.git](https://github.com/ShankarGarg/CucumberBook.git),
    which can be used to download the project we have been using until now.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub 项目 URL 是 [https://github.com/ShankarGarg/CucumberBook.git](https://github.com/ShankarGarg/CucumberBook.git)，可以用来下载我们至今一直在使用的项目。
- en: How to do it…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Open Jenkins in any browser with the URL `http://localhost:8080/jenkins/` (replace
    localhost with the machine's IP address, if you don't have Jenkins running locally).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何浏览器中通过 URL `http://localhost:8080/jenkins/` 打开 Jenkins（如果您本地没有运行 Jenkins，请将
    localhost 替换为机器的 IP 地址）。
- en: Go to the Jenkins dashboard and click on **New Item**:![How to do it…](img/image00165.jpeg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Jenkins 仪表板，点击 **新建项目**：![如何操作…](img/image00165.jpeg)
- en: Enter the name of the Job that we want to create and also select the **Build
    a maven** **project** option. Click on **OK**.![How to do it…](img/image00166.jpeg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入我们想要创建的作业的名称，并选择 **构建 Maven 项目** 选项。点击 **确定**。![如何操作…](img/image00166.jpeg)
- en: Now, enter the **Description** of the project:![How to do it…](img/image00167.jpeg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入项目的 **描述**：![如何操作…](img/image00167.jpeg)
- en: Then, enter the Git details by selecting the **Git** option in **Source Code
    Management** and enter **Repository URL** as [https://github.com/ShankarGarg/CucumberBook.git](https://github.com/ShankarGarg/CucumberBook.git)
    and **Credentials**. Keep the other options in this section as default.![How to
    do it…](img/image00168.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过在 **源代码管理** 中选择 **Git** 选项并输入 **仓库 URL** [https://github.com/ShankarGarg/CucumberBook.git](https://github.com/ShankarGarg/CucumberBook.git)
    和 **凭据** 来输入 Git 详细信息。保持本节中的其他选项为默认设置。![如何操作…](img/image00168.jpeg)
- en: Now, we come to the **Build** section. Since we have selected a Maven project,
    the `Root POM` is automatically mentioned. We need to mention the goal that we
    want to run, which, in our case, is `test`:![How to do it…](img/image00169.jpeg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们来到 **构建** 部分。由于我们选择了 Maven 项目，`Root POM` 会自动显示。我们需要指定我们想要运行的 goal，在我们的例子中是
    `test`：![如何操作…](img/image00169.jpeg)
- en: Keep all other options as default and click on **Save**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持所有其他选项为默认设置，并点击 **保存**。
- en: Now, click on **Build Now** to run the project.![How to do it…](img/image00170.jpeg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**立即构建**来运行项目。![如何做到这一点…](img/image00170.jpeg)
- en: Once you click on **Build Now**, a build is triggered immediately. You can see
    the build number and the timestamp.![How to do it…](img/image00171.jpeg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击**立即构建**，就会立即触发构建。你可以看到构建号和时间戳。![如何做到这一点…](img/image00171.jpeg)
- en: Click on the timestamp on the build. And then click on **Console Output**. Just
    verifying the output to make sure whether the test cases were run or not:![How
    to do it…](img/image00172.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建上的时间戳。然后点击**控制台输出**。只是验证输出以确保测试用例是否已运行：![如何做到这一点…](img/image00172.jpeg)
- en: How it works…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Since we have integrated Maven with Cucumber, the integration with Jenkins was
    basically running a Maven project with Jenkins. Jenkins comes with a Maven plugin
    by default (when we selected the item type to **Build a maven project** most of
    the settings were taken care of at that time) The Build section was prepopulated
    with `pom.xml` and we just had to mention the goal as test.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将Maven与Cucumber集成，Jenkins的集成基本上就是使用Jenkins运行Maven项目。Jenkins默认自带Maven插件（当我们选择项目类型为**构建Maven项目**时，大多数设置都在那时处理好了）构建部分预先填充了`pom.xml`，我们只需提及目标为测试。
- en: Jenkins is also prepopulated with the GitHub plugin and we just had to mention
    the GitHub URL and credentials. So now every time the project is built, Jenkins
    takes the latest code from GitHub and then runs the test cases.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins也预先安装了GitHub插件，我们只需提及GitHub URL和凭证。因此，每次构建项目时，Jenkins都会从GitHub获取最新代码，然后运行测试用例。
- en: Running Cucumber test cases in parallel
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行运行Cucumber测试用例
- en: Running test cases in parallel is a very common and required practice for a
    good automation framework. Cucumber, by default, does not have any such option
    or setting. However, since Cucumber can be integrated with Maven and JUnit, using
    these two tools, we can run Cucumber Scenarios in parallel.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 并行运行测试用例是良好自动化框架的一个非常常见且必需的实践。默认情况下，Cucumber没有这样的选项或设置。然而，由于Cucumber可以与Maven和JUnit集成，使用这两个工具，我们可以并行运行Cucumber情景。
- en: In this recipe, we will run two Scenarios in parallel and, for web automation
    that will mean opening two browsers at the same time. So how do we make this possible?
    Let's understand in the next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将并行运行两个情景，对于网络自动化，这意味着同时打开两个浏览器。那么我们如何实现这一点呢？让我们在下一节中了解。
- en: How to do it…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We create a Feature file that has two Scenarios. We will aim to run these two
    Scenarios in parallel. This is just for the purpose of a demo, you can implement
    the same approach for *n* number of Scenarios.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个包含两个情景的特征文件。我们的目标是并行运行这两个情景。这只是为了演示目的，你可以为*n*个情景实现相同的方法。
- en: 'Both the Scenarios will be associated with two different Tags so that they
    can be run using these tags. Focus on the highlighted tags in the following code;
    our Feature file should look something like this:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个情景都将与两个不同的标签相关联，以便可以使用这些标签运行。关注以下代码中高亮显示的标签；我们的特征文件应该看起来像这样：
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we should also have Step Definitions ready for this feature file. To focus
    on the main objective of this recipe, I have kept the code inside Step Definitions
    as a dummy. Here is what our Step Definition will look like:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们也应该为这个特征文件准备好步骤定义。为了专注于这个菜谱的主要目标，我将代码保持在步骤定义中的占位符。以下是我们步骤定义的样子：
- en: '[PRE10]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next Step is to write the Runners, which will make sure that test cases
    run in parallel. The first Step in that direction is to have one `RunCukeTest.java`
    class, which will specifically run Scenarios associated with the `@sanity` Tag.
    The code for `RunCukeTest` will be as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是编写运行者，以确保测试用例并行运行。在这个方向上的第一步是有一个`RunCukeTest.java`类，它将专门运行与`@sanity`标签关联的情景。`RunCukeTest`的代码如下：
- en: '[PRE11]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we need to write one more Runner, which will run Scenarios tagged with
    `@regression`. Focus on the highlighted code; the code for `RunCukeParallelTest.java`
    will look like this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要再写一个运行标记为`@regression`的情景的运行者。关注以下代码中高亮的部分；`RunCukeParallelTest.java`的代码将如下所示：
- en: '[PRE12]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The last Step is to make sure that these two Runner classes are run in parallel.
    We will achieve this by making some changes to the `pom.xml` file. We will add
    the configuration for the Maven Surefire plugin, which will run the Runner classes
    in parallel. Here is what we will add to the existing `pom.xml` file:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是确保这两个Runner类并行运行。我们将通过修改`pom.xml`文件来实现这一点。我们将添加Maven Surefire插件的配置，这将使Runner类并行运行。以下是我们要添加到现有`pom.xml`文件中的内容：
- en: '[PRE13]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will also add the dependencies for Selenium, so that we can write the code
    for invoking the Selenium Webdriver instance. The code for this is as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将添加Selenium的依赖项，以便我们可以编写调用Selenium Webdriver实例的代码。这段代码如下：
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will create one more class `DriverFactory.java` for adding Selenium Code,
    which will have a function to invoke the Firefox browser. The class will look
    like this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`DriverFactory.java`的另一个类，用于添加Selenium代码，它将有一个调用Firefox浏览器的函数。这个类看起来是这样的：
- en: '[PRE15]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will update the `hooks.java` file to add the `createDriver()` function so
    that Firefox will be invoked before each Scenario. This is how the code will look:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将更新`hooks.java`文件，添加`createDriver()`函数，以便在每个Scenario之前调用Firefox。代码将如下所示：
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open Terminal and `cd` until the project root directory. To invoke the Maven
    configuration that we put in `pom.xml` file, run the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，使用`cd`命令进入项目根目录。要调用我们放在`pom.xml`文件中的Maven配置，请运行以下命令：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is the output of the preceding command:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是前面命令的输出：
- en: '![How to do it…](img/image00173.jpeg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/image00173.jpeg)'
- en: How it works…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Maven surefire plugin will run the classes mentioned in the `include` Tag
    in the configuration Tag as per the `forkcount` Tag value. So all the Java classes
    that end in `Test` (which are our `RunCukeTest` and `RunCukeParallelTest` JUnit
    Runner classes) will be executed in parallel in different threads. And since these
    two classes are JUnit Runner classes, they invoke the execution of Scenarios that
    are tagged with `@sanity` and on the different thread execution of Scenarios tagged
    with `@regression`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Maven surefire插件将根据配置标签中的`forkcount`标签值运行配置标签中提到的`include`标签中的类。所以所有以`Test`结尾的Java类（即我们的`RunCukeTest`和`RunCukeParallelTest`
    JUnit Runner类）将在不同的线程中并行执行。由于这两个类是JUnit Runner类，它们将调用带有`@sanity`标签的Scenarios的执行，并在不同的线程上执行带有`@regression`标签的Scenarios。
