- en: Chapter 8. Spring Security with ORM and NoSQL DB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用ORM和NoSQL DB的Spring安全
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security with Hibernate using @preAuthorize annotation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Hibernate一起使用@preAuthorize注释
- en: Spring Security with Hibernate using authentication provider with @preAuthorize
    annotation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Hibernate一起使用身份验证提供程序和@preAuthorize注释
- en: Spring Security with Hibernate using user details service with Derby database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Hibernate一起使用用户详细信息服务和Derby数据库
- en: Spring Security with MongoDB
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与MongoDB
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Spring framework has been designed to easily integrate with ORM frameworks similar
    to Mybatis, Hibernate, and so on. Hibernate tutorials are very well documented
    and are available on the JBoss website. Hibernate gives us data persistence.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架已经设计成可以轻松集成类似于Mybatis、Hibernate等ORM框架。Hibernate教程非常详细，并且可以在JBoss网站上找到。Hibernate为我们提供了数据持久性。
- en: In this chapter we will see how we can integrate Spring Security with ORM frameworks.
    We will also integrate Spring Security with the latest MongoDB.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何将Spring Security与ORM框架集成。我们还将将Spring Security与最新的MongoDB集成。
- en: We will first do some basic setup with Hibernate and Spring. Since this chapter
    has database related stuff we need to create a database for all the recipes used
    in the chapter. I am using NetBeans IDE with maven. I feel NetBeans IDE is very
    advanced compared to others.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先进行一些与Hibernate和Spring相关的基本设置。由于本章涉及数据库相关内容，我们需要为本章中使用的所有食谱创建一个数据库。我正在使用带有maven的NetBeans
    IDE。我觉得NetBeans IDE与其他IDE相比非常先进。
- en: Setting up the Spring Hibernate application
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Spring Hibernate应用程序
- en: 'We will create a simple horror movie application, which will display a list
    of horror movies with some **CRUD** (**create, read, update, and delete**) functions
    in the UI. The following steps are involved in setting up a *Spring Hibernate*
    application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的恐怖电影应用程序，该应用程序将在UI中显示一系列恐怖电影，并具有一些**CRUD**（**创建、读取、更新和删除**）功能。设置*Spring
    Hibernate*应用程序涉及以下步骤：
- en: Create a `horrormoviedb` database in Derby. You can use NetBeans.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Derby中创建一个`horrormoviedb`数据库。您可以使用NetBeans。
- en: Click on the **Services** tab and you will see **Databases**.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**服务**选项卡，您将看到**数据库**。
- en: Right click to **JavaDB** to see the **Create Database...** option. Select the
    **Create Database...** option.![Setting up the Spring Hibernate application](img/7525OS_08_01.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**JavaDB**以查看**创建数据库...**选项。选择**创建数据库...**选项。![设置Spring Hibernate应用程序](img/7525OS_08_01.jpg)
- en: Create a table in the database `horrormovie`.![Setting up the Spring Hibernate
    application](img/7525OS_08_02.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库`horrormovie`中创建一个表。![设置Spring Hibernate应用程序](img/7525OS_08_02.jpg)
- en: Create columns in the table and name the columns as `horrormovie_id`, `horrormovie_name`,
    and `horrormovie_director`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表中创建列，并将列命名为`horrormovie_id`、`horrormovie_name`和`horrormovie_director`。
- en: Create a maven project, update the POM with Spring, Hibernate, Derby and Spring
    Security dependency, and open it in NetBeans IDE.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个maven项目，更新POM文件以包含Spring、Hibernate、Derby和Spring Security依赖项，并在NetBeans IDE中打开它。
- en: Create an entity class using `@table` and `@column` annotations.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@table`和`@column`注释创建实体类。
- en: Create a `DAO` and `DAOImpl` class to Handle hibernate operations.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`DAO`和`DAOImpl`类来处理Hibernate操作。
- en: Create a `Service` and `ServiceImpl` class to behave like a middle manager between
    the `DAO` and the UI.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Service`和`ServiceImpl`类，以在`DAO`和UI之间充当中间管理器。
- en: Create a controller to handle the UI part.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器来处理UI部分。
- en: Spring Security with Hibernate using @preAuthorize annotation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security与Hibernate一起使用@preAuthorize注释
- en: In the current demonstration we are using two different databases. The authentication
    manager is configured with `tenant1DataSource` which connects to a Derby database
    which holds the user and role information. Using this data source we will do that
    authentication and authorization.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前演示中，我们使用了两个不同的数据库。身份验证管理器配置为`tenant1DataSource`，它连接到一个Derby数据库，其中保存了用户和角色信息。使用此数据源，我们将进行身份验证和授权。
- en: For displaying the `horrormovie` list we have created another datasource in
    Derby which is used with the Hibernate configuration file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为显示`horrormovie`列表，我们在Derby中创建了另一个数据源，该数据源与Hibernate配置文件一起使用。
- en: In the `DAOImpl` class methods we are using `@preAuthorize` annotations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DAOImpl`类的方法中，我们使用了`@preAuthorize`注释。
- en: Let's use the GlassFish application server to run the application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用GlassFish应用服务器来运行应用程序。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Edit the `application-security.xml`.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`。
- en: Edit the `horrormovie-servlet.xml`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`horrormovie-servlet.xml`。
- en: Use the `@preAuthorize` annotation in `DAOImpl`. Spring Security authorizes
    the user when the method is invoked.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`DAOImpl`中使用`@preAuthorize`注释。Spring Security在调用方法时授权用户。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will do authentication and authorization with a Hibernate
    application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将使用Hibernate应用程序进行身份验证和授权：
- en: Edit the `application-security.xml` file with data source details and Bean information.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据源详细信息和Bean信息编辑`application-security.xml`文件。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Edit the `horrormovie-servlet.xml` file with the controller information.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用控制器信息编辑`horrormovie-servlet.xml`文件。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is using JDBC for authentication service.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用JDBC进行身份验证服务。
- en: 'Using the annotations when you execute the `addHorrorMovie` method Spring checks
    the security context object for credentials and does the authentication and authorization;
    this is given in the following code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行`addHorrorMovie`方法时使用注释，Spring会检查安全上下文对象的凭据，并进行身份验证和授权；以下是代码：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Some SQL commands are given as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些SQL命令：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example we have created a Hibernate application and used the JDBC service
    for authentication. The Spring framework interrupts the request to access the
    application and requests the user to enter the credentials. The credentials are
    authenticated using the JDBC details provided in the `application-security.xml`
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个Hibernate应用程序，并使用了JDBC服务进行身份验证。Spring框架中断了访问应用程序的请求，并要求用户输入凭据。使用`application-security.xml`文件中提供的JDBC详细信息对凭据进行验证。
- en: On success the user is redirected to the application which displays a list of
    movies.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 成功后，用户将被重定向到显示电影列表的应用程序。
- en: 'Now access the following URL:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下网址：
- en: '`http://localhost:8080/login`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/login`'
- en: 'The screenshots for authenticating and authorizing using JDBC service and applying
    Spring Security on using annotation on methods are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JDBC服务进行身份验证和授权以及在方法上应用Spring Security的截图如下：
- en: 'The workflow of the example is shown in the following screenshots:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的工作流程显示在以下截图中：
- en: '![How it works...](img/7525OS_08_03.jpg)![How it works...](img/7525OS_08_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_08_03.jpg)![它是如何工作的...](img/7525OS_08_04.jpg)'
- en: See also
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Hibernate using authentication provider* recipe
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用身份验证提供程序的Spring Security与Hibernate*配方'
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Derby数据库的用户详细信息服务的Spring Security与Hibernate*配方'
- en: The *Spring Security with MongoDB* recipe
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用MongoDB的Spring Security*配方'
- en: Spring Security with Hibernate using authentication provider with @preAuthorize
    annotation
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用身份验证提供程序和@preAuthorize注释的Spring Security与Hibernate
- en: We are using the sample `horrormovie` application to demonstrate Spring Security
    with Hibernate using custom authentication provider and `@preAuthorize` annotation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用示例`horrormovie`应用程序来演示使用自定义身份验证提供程序和`@preAuthorize`注释的Spring Security与Hibernate。
- en: In this recipe we will create our own custom authentication provider and implement
    the interface authentication provider. We will apply the annotation on the `controller`
    method instead of the `hibernate` method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建自己的自定义身份验证提供程序并实现接口身份验证提供程序。我们将在`controller`方法上应用注释，而不是在`hibernate`方法上。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new class which implements the `AuthenticationProvider` interface and
    add the Bean definition to the `application-security.xml` file
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个实现`AuthenticationProvider`接口的新类，并将Bean定义添加到`application-security.xml`文件中
- en: Edit the `application-security.xml` file
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`文件
- en: Use the `@preAuthorize` annotation in controller
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器中使用`@preAuthorize`注释
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps are used to implement Spring Security by using the `AuthenticationProvider`
    interface:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AuthenticationProvider`接口实现Spring Security的以下步骤：
- en: Edit the `application-security.xml` file with data source details and Bean information.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`文件，添加数据源详细信息和Bean信息。
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Edit the `MyCustomAuthenticationProvider` file.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`MyCustomAuthenticationProvider`文件。
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Use the annotations in controller.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中使用注释。
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下网址：
- en: '`http://localhost:8080/login`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/login`'
- en: After interrupting the request, Spring Security invokes `MyCustomAuthenticationProvider`,
    which has the overridden authenticate method for authentication and also the user
    information. The user credentials are authenticated and authorized with the credentials
    in `APP_Users` map on successful authentication and authorization the user will
    be redirected to the success URL configured in the `spring-security.xml` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在中断请求后，Spring Security调用`MyCustomAuthenticationProvider`，该提供程序具有用于身份验证和用户信息的重写authenticate方法。用户凭据在`APP_Users`映射中进行验证和授权，成功验证和授权后，用户将被重定向到`spring-security.xml`文件中配置的成功URL。
- en: 'The screenshots for authenticating and authorizing using the custom authentication
    provider and applying Spring Security on using annotation on methods in the controller
    are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义身份验证提供程序进行身份验证和授权，并在控制器方法上应用Spring Security的截图如下：
- en: '![How it works...](img/7525OS_08_05.jpg)![How it works...](img/7525OS_08_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_08_05.jpg)![它是如何工作的...](img/7525OS_08_06.jpg)'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Hibernate using @preAuthorize annotation* recipe
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用@preAuthorize注释的Spring Security与Hibernate*配方'
- en: The *Spring Security with Hibernate using custom authentication provider with
    @preAuthorize annotation* recipe
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用自定义身份验证提供程序和@preAuthorize注释的Spring Security与Hibernate*配方'
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Derby数据库的用户详细信息服务的Spring Security与Hibernate*配方'
- en: The *Spring Security with MongoDB* recipe
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用MongoDB的Spring Security*配方'
- en: Spring Security with Hibernate using UserDetailsService with Derby database
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Derby数据库的UserDetailsService与Spring Security的Hibernate
- en: So far we have seen Hibernate and Spring security with various authentication
    providers. In this section we will use Hibernate to retrieve users and authorities
    from the database.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了使用各种身份验证提供程序的Hibernate和Spring Security。在本节中，我们将使用Hibernate从数据库中检索用户和权限。
- en: For that we are going to implement the `UserDetailsService` interface and implement
    a method in the interface. To begin we need to create entity classes for users
    and roles.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将实现`UserDetailsService`接口并在接口中实现一个方法。首先，我们需要为用户和角色创建实体类。
- en: We also moved the `@preAuthorize` annotation to the `controller` class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`@preAuthorize`注释移到`controller`类中。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new class which implements the `UserDetailsService` interface and add
    the Bean definition to the `application-security.xml` file
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个实现`UserDetailsService`接口的新类，并将Bean定义添加到`application-security.xml`文件中
- en: Edit the `application-security.xml` file
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`文件
- en: Use the `@preAuthorize` annotation in controller
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器中使用`@preAuthorize`注释
- en: In the horror database add the tables `USERS` and `USER_ROLE`
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在恐怖数据库中添加`USERS`和`USER_ROLE`表
- en: Insert role `ROLE_EDITOR` and users named `ravi` and `ravi123`
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入角色`ROLE_EDITOR`和名为`ravi`和`ravi123`的用户
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps are used to integrate Spring Security authentication with
    Hibernate by implementing the `UserDetailsService` interface that interacts with
    Hibernate methods:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现与Hibernate交互的`UserDetailsService`接口来集成Spring Security身份验证的以下步骤：
- en: Create a class `MyUserDetailsService` which implements the `UserDetailsService`
    interface.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现`UserDetailsService`接口的类`MyUserDetailsService`。
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Edit the `application-security.xml` file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`文件。
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Use annotations in controller.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中使用注释。
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://localhost:8080/login`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/login`'
- en: First we authenticate and authorize using `UserDetailsService` and Hibernate.
    `UserDetailsService` is a Spring Security interface which is implemented by `MyUserDetailsService`
    class. This class is configured in the `application-security.xml` file so that
    Spring Security invokes this implementation class to load the user details using
    Hibernate. `UsersDAO.findByUserName(userName)` is a method to invoke Hibernate
    to get the user information based on the username that is passed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先使用`UserDetailsService`和Hibernate进行身份验证和授权。 `UserDetailsService`是Spring Security接口，由`MyUserDetailsService`类实现。该类在`application-security.xml`文件中进行配置，以便Spring
    Security调用此实现类使用Hibernate加载用户详细信息。 `UsersDAO.findByUserName(userName)`是调用Hibernate获取基于传递的用户名的用户信息的方法。
- en: After applying Spring Security to the controller using annotations, we should
    be able to login with the username and password (ravi and ravi123). The `<password-encoder
    hash="plaintext" />` is a hashing algorithm supported by Spring Security. On successful
    authentication the user will be redirected to the authorized page.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用注释将Spring Security应用于控制器之后，我们应该能够使用用户名和密码（ravi和ravi123）登录。 `<password-encoder
    hash="plaintext" />`是Spring Security支持的哈希算法。成功验证后，用户将被重定向到授权页面。
- en: 'The workflow of the application is demonstrated in the following screenshots:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的工作流程在以下屏幕截图中演示：
- en: '![How it works...](img/7525OS_08_07.jpg)![How it works...](img/7525OS_08_08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_08_07.jpg)![工作原理...](img/7525OS_08_08.jpg)'
- en: See also
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Hibernate using @preAuthorize annotation* recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@preAuthorize注释的Hibernate的Spring Security配方
- en: The *Spring Security with Hibernate using custom authentication provider with
    @preAuthorize annotation* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义身份验证提供程序和@preAuthorize注释的Hibernate的Spring Security配方
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Derby数据库的用户详细信息服务的Spring Security配方
- en: The *Spring Security with MongoDB* recipe
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MongoDB的Spring Security配方
- en: Spring Security with MongoDB
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB的Spring Security
- en: In this section let's see how Spring Security works with MongoDB. MongoDB is
    a popular NOSQL database. It is a document based database. MongoDB is written
    in the popular C++ database which makes it an object oriented document based database.
    In MongoDB queries are also document based, and it also provides indexing using
    JSON style to store and retrieve data. The latest Spring version available is
    Version 3.2 has been included in the POC.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看Spring Security如何与MongoDB配合使用。 MongoDB是一种流行的NOSQL数据库。它是一个基于文档的数据库。
    MongoDB是用流行的C++数据库编写的，这使它成为一种面向对象的基于文档的数据库。在MongoDB中，查询也是基于文档的，它还提供使用JSON样式进行索引以存储和检索数据。最新的Spring版本是版本3.2，已包含在POC中。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download the MongoDB database
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载MongoDB数据库
- en: Configure the data folder
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据文件夹
- en: Start MongoDB in command prompt
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令提示符中启动MongoDB
- en: Start MongoDB in another command prompt
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个命令提示符中启动MongoDB
- en: Create `horrordb` database by inserting data into it
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向其中插入数据创建`horrordb`数据库
- en: Execute the command `use horrordb`
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行命令`use horrordb`
- en: Add MongoDB dependency to the **POM** (**Project Object Model**) file
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将MongoDB依赖项添加到POM（项目对象模型）文件
- en: Add JSON dependency to the POM file
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将JSON依赖项添加到POM文件
- en: Upgrade the Spring Version to 3.2.0 and Spring Security to 1.4
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Spring版本升级到3.2.0，将Spring Security升级到1.4
- en: Create a `MongoUserDetails` class
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`MongoUserDetails`类
- en: Edit the `horror-movie` servlet
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`horror-movie` servlet
- en: Edit the `Application-security.xml` file
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`Application-security.xml`文件
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps use Mongo with Spring Security to authenticate and authorize
    users by implementing the `UserDetailsService` interface:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤使用Mongo与Spring Security来实现`UserDetailsService`接口对用户进行身份验证和授权：
- en: 'Database operations in command prompt is shown as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中显示数据库操作如下：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create a class `MongoUserDetailsService` which implements the `UserDetailsService`
    interface.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现`UserDetailsService`接口的`MongoUserDetailsService`类。
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Edit the `application-security.xml`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`。
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Edit the `horrormovie-servlet.xml`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`horrormovie-servlet.xml`。
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use the annotations in controller.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中使用注释。
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: First we authenticate and authorize using `MongoDetailsService` and Spring data.
    `MongoDetailsService` is the implementation of `UserDetailsService`, `getUserDetail`(string
    username) invokes the `springdata` classes to get user credentials from the Mongo
    database based on the username passed. If the data is present based on the username,
    it implies that the authentication is successful. We then apply Spring Security
    on the controller methods using annotation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先使用`MongoDetailsService`和Spring数据进行身份验证和授权。 `MongoDetailsService`是`UserDetailsService`的实现，`getUserDetail`(string
    username)调用`springdata`类从Mongo数据库中获取基于传递的用户名的用户凭据。如果根据用户名存在数据，则意味着身份验证成功。然后我们使用注释在控制器方法上应用Spring
    Security。
- en: Now we should be able to login with the username and password (ravi and 123456).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该能够使用用户名和密码（ravi和123456）登录。
- en: 'Now access the following URL:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://localhost:8080/login`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/login`'
- en: 'The workflow is demonstrated in the following screenshots:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程在以下屏幕截图中演示：
- en: '![How it works...](img/7525OS_08_09.jpg)![How it works...](img/7525OS_08_10.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_08_09.jpg)![工作原理...](img/7525OS_08_10.jpg)'
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Hibernate using @preAuthorize annotation* recipe
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用@preAuthorize注释的Hibernate的Spring Security配方
- en: The *Spring Security with Hibernate using custom authentication provider with
    @preAuthorize annotation* recipe
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义身份验证提供程序和@preAuthorize注释的Hibernate的Spring Security配方
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Derby数据库的用户详细信息服务的Spring Security配方
- en: The *Spring Security with MongoDB* recipe
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MongoDB的Spring Security配方
