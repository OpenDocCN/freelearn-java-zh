- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Centralized Configuration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中配置
- en: In this chapter, we will learn how to use the **Spring Cloud Config Server**
    to centralize managing the configuration of our microservices. As already described
    in *Chapter 1*, *Introduction to Microservices*, an increased number of microservices
    typically comes with an increased number of configuration files that need to be
    managed and updated.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用**Spring Cloud Config Server**来集中管理我们的微服务的配置。正如已在*第1章*，*微服务简介*中所述，微服务数量的增加通常伴随着需要管理和更新的配置文件数量的增加。
- en: With the Spring Cloud Config Server, we can place the configuration files for
    all our microservices in a central configuration repository, which will make it
    much easier to handle them. Our microservices will be updated to retrieve their
    configuration from the configuration server at startup.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Cloud Config Server，我们可以将所有微服务的配置文件放置在一个中央配置仓库中，这将使处理它们变得更加容易。我们的微服务将在启动时从配置服务器检索其配置。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to the Spring Cloud Config Server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Config Server简介
- en: Setting up a config server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置配置服务器
- en: Configuring clients of a config server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置配置服务器的客户端
- en: Structuring the configuration repository
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置仓库的结构化
- en: Trying out the Spring Cloud Config Server
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用Spring Cloud Config Server
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For instructions on how to install tools used in this book and how to access
    the source code for this book, see:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何安装本书中使用的工具以及如何访问本书源代码的说明，请参阅：
- en: '*Chapter 21*, *Installation Instructions for macOS*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第21章*，*macOS安装说明*'
- en: '*Chapter 22*, *Installation Instructions for Microsoft Windows with WSL 2 and
    Ubuntu*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第22章*，*使用WSL 2和Ubuntu的Microsoft Windows安装说明*'
- en: The code examples in this chapter all come from the source code in `$BOOK_HOME/Chapter12`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例均来自`$BOOK_HOME/Chapter12`中的源代码。
- en: If you want to view the changes applied to the source code in this chapter,
    that is, see what it took to add a configuration server to the microservice landscape,
    you can compare it with the source code for *Chapter 11*, *Securing Access to
    APIs*. You can use your favorite `diff` tool and compare the two folders `$BOOK_HOME/Chapter11`
    and `$BOOK_HOME/Chapter12`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看对本章源代码所做的更改，即查看将配置服务器添加到微服务景观中所需要的内容，您可以将其与*第11章*，*API访问保护*的源代码进行比较。您可以使用您喜欢的`diff`工具，并比较两个文件夹`$BOOK_HOME/Chapter11`和`$BOOK_HOME/Chapter12`。
- en: Introduction to the Spring Cloud Config Server
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Config Server简介
- en: 'The Spring Cloud Config Server (shortened to **Config Server**) will be added
    to the existing microservice landscape behind the edge server, in the same way
    as for the other microservices:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud Config Server（简称**Config Server**）将被添加到边缘服务器后面的现有微服务景观中，与其他微服务一样：
- en: '![](img/B19825_12_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19825_12_01.png)'
- en: 'Figure 12.1: Adding a config server to the system landscape'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：将配置服务器添加到系统架构中
- en: 'When it comes to setting up a config server, there are a number of options
    to consider:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置配置服务器时，有许多选项需要考虑：
- en: Selecting a storage type for the configuration repository
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择配置仓库的存储类型
- en: Deciding on the initial client connection, either to the config server or to
    the discovery server
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定初始客户端连接，无论是到配置服务器还是到发现服务器
- en: Securing the configuration, both against unauthorized access to the API and
    by avoiding storing sensitive information in plain text in the configuration repository
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护配置，既防止对API的无权访问，也避免在配置仓库中存储敏感信息为纯文本
- en: Let’s go through each option one by one and also introduce the API exposed by
    the config server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一介绍每个选项，并介绍配置服务器公开的API。
- en: Selecting the storage type of the configuration repository
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择配置仓库的存储类型
- en: 'As already described in *Chapter 8*, *Introduction to Spring Cloud*, the config
    server supports the storing of configuration files in a number of different backends,
    for example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如已在*第8章*，*Spring Cloud简介*中所述，配置服务器支持在多种不同的后端存储配置文件，例如：
- en: Git repository
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git仓库
- en: Local filesystem
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地文件系统
- en: HashiCorp Vault
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HashiCorp Vault
- en: JDBC database
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDBC数据库
- en: In this chapter, we will use a local filesystem. To use the local filesystem,
    the config server needs to be launched with the native Spring profile enabled.
    The location of the configuration repository is specified using the `spring.cloud.config.server.native.searchLocations`
    property.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用本地文件系统。要使用本地文件系统，配置服务器需要以启用原生Spring配置文件的方式启动。配置存储库的位置使用`spring.cloud.config.server.native.searchLocations`属性指定。
- en: Deciding on the initial client connection
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决定初始客户端连接
- en: By default, a client connects first to the config server to retrieve its configuration.
    Based on the configuration, it connects to the discovery server, Netflix Eureka
    in our case, to register itself. It is also possible to do this the other way
    around, that is, the client first connects to the discovery server to find a config
    server instance and then connects to the config server to get its configuration.
    There are pros and cons to both approaches.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，客户端首先连接到配置服务器以检索其配置。根据配置，它连接到发现服务器（在我们的例子中是Netflix Eureka）以注册自己。也可以反过来这样做，即客户端首先连接到发现服务器以找到配置服务器实例，然后连接到配置服务器以获取其配置。这两种方法都有其优缺点。
- en: In this chapter, the clients will first connect to the config server. With this
    approach, it will be possible to store the configuration of the discovery server
    in the config server.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，客户端将首先连接到配置服务器。采用这种方法，可以将发现服务器的配置存储在配置服务器中。
- en: To learn more about the other alternative, see [https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#discovery-first-bootstrap](https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#discovery-first-bootstrap).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于其他替代方案的信息，请参阅[https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#discovery-first-bootstrap](https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#discovery-first-bootstrap)。
- en: One concern with connecting to the config server first is that the config server
    can become a single point of failure. If the clients connect first to a discovery
    server, such as Netflix Eureka, there can be multiple config server instances
    registered so that a single point of failure can be avoided. When we learn about
    the **service** concept in Kubernetes later on in this book, starting with *Chapter
    15*, *Introduction to Kubernetes*, we will see how we can avoid a single point
    of failure by running multiple containers, for example, config servers, behind
    each Kubernetes service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先连接到配置服务器的一个担忧是配置服务器可能成为单点故障。如果客户端首先连接到一个发现服务器，例如Netflix Eureka，则可以有多个配置服务器实例注册，从而避免单点故障。在本书的后面部分，当我们学习Kubernetes中的**服务**概念时，从*第15章*，*Kubernetes简介*开始，我们将看到如何通过在每个Kubernetes服务后面运行多个容器（例如，配置服务器）来避免单点故障。
- en: Securing the configuration
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置安全
- en: Configuration information will, in general, be handled as sensitive information.
    This means that we need to secure the configuration information both in transit
    and at rest. From a runtime perspective, the config server does not need to be
    exposed to the outside through the edge server. During development, however, it
    is useful to be able to access the API of the config server to check the configuration.
    In production environments, it is recommended to lock down external access to
    the config server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，配置信息将被视为敏感信息。这意味着我们需要在传输和静止状态下保护配置信息。从运行时角度来看，配置服务器不需要通过边缘服务器暴露给外部。然而，在开发期间，能够访问配置服务器的API以检查配置是有用的。在生产环境中，建议限制对配置服务器的外部访问。
- en: Securing the configuration in transit
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传输中的配置安全
- en: When the configuration information is asked for by a microservice, or anyone
    using the API of the config server, it will be protected against eavesdropping
    by the edge server since it already uses HTTPS.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当微服务或使用配置服务器API的任何人请求配置信息时，由于它已经使用HTTPS，因此它将由边缘服务器保护，防止窃听。
- en: To ensure that the API user is a known client, we will use HTTP basic authentication.
    We can set up HTTP basic authentication by using Spring Security in the config
    server and specifying the environment variables `SPRING_SECURITY_USER_NAME` and
    `SPRING_SECURITY_USER_PASSWORD` with the permitted credentials.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保API用户是已知的客户端，我们将使用HTTP基本身份验证。我们可以在配置服务器中使用Spring Security来设置HTTP基本身份验证，并指定环境变量`SPRING_SECURITY_USER_NAME`和`SPRING_SECURITY_USER_PASSWORD`，以使用允许的凭据。
- en: Securing the configuration at rest
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静止状态下的配置安全
- en: To avoid a situation where someone with access to the configuration repository
    can steal sensitive information, such as passwords, the config server supports
    the encryption of configuration information when stored on disk. The config server
    supports the use of both symmetric and asymmetric keys. Asymmetric keys are more
    secure but harder to manage.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免有人可以访问配置存储库并窃取敏感信息（如密码）的情况，配置服务器支持在磁盘上存储配置信息的加密。配置服务器支持使用对称密钥和非对称密钥。非对称密钥更安全，但更难管理。
- en: In this chapter, we will use a symmetric key. The symmetric key is given to
    the config server at startup by specifying an environment variable, `ENCRYPT_KEY`.
    The encrypted key is just a plain text string that needs to be protected in the
    same way as any sensitive information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用对称密钥。对称密钥在启动时通过指定环境变量`ENCRYPT_KEY`传递给配置服务器。加密密钥只是一个需要像任何敏感信息一样进行保护的纯文本字符串。
- en: To learn more about the use of asymmetric keys, see [https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#_key_management](https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#_key_management).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于非对称密钥的使用，请参阅[https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#_key_management](https://docs.spring.io/spring-cloud-config/docs/4.0.1/reference/html/#_key_management)。
- en: Introducing the config server API
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍配置服务器API
- en: 'The config server exposes a REST API that can be used by its clients to retrieve
    their configuration. In this chapter, we will use the following endpoints in the
    API:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器公开了一个REST API，其客户端可以使用它来检索其配置。在本章中，我们将使用API中的以下端点：
- en: '`/actuator`: The standard actuator endpoint exposed by all microservices. As
    always, these should be used with care. They are very useful during development
    but must be locked down before being used in production.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/actuator`：所有微服务公开的标准actuator端点。像往常一样，应该小心使用。它们在开发期间非常有用，但在用于生产之前必须被锁定。'
- en: '`/encrypt` and `/decrypt`: Endpoints for encrypting and decrypting sensitive
    information. These must also be locked down before being used in production.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/encrypt`和`/decrypt`：加密和解密敏感信息的端点。在使用生产环境之前，这些也必须被锁定。'
- en: '`/{microservice}/{profile}`: Returns the configuration for the specified microservice
    and the specified Spring profile.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/{microservice}/{profile}`：返回指定微服务和指定Spring配置的配置。'
- en: We will see some sample uses for the API when we try out the config server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试配置服务器时，我们将看到API的一些示例用法。
- en: Setting up a config server
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置配置服务器
- en: 'Setting up a config server on the basis of the decisions discussed is straightforward:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论的基础上设置配置服务器非常简单：
- en: Create a Spring Boot project using Spring Initializr, as described in *Chapter
    3*, *Creating a Set of Cooperating Microservices*. Refer to the *Using Spring
    Initializr to generate skeleton code* section.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring Initializr创建Spring Boot项目，如*第3章*中所述，*创建一组协作微服务*。请参阅*使用Spring Initializr生成骨架代码*部分。
- en: Add the dependencies, `spring-cloud-config-server` and `spring-boot-starter-security`,
    to the Gradle build file, `build.gradle`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将依赖项`spring-cloud-config-server`和`spring-boot-starter-security`添加到Gradle构建文件`build.gradle`中。
- en: 'Add the annotation `@EnableConfigServer` to the application class, `ConfigServerApplication`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序类`ConfigServerApplication`中添加注解`@EnableConfigServer`：
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the configuration for the config server to the default property file, `application.yml`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置服务器的配置添加到默认属性文件`application.yml`中：
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The most important configuration is to specify where to find the configuration
    repository, indicated using the `spring.cloud.config.server.native.searchLocations`
    property.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最重要的配置是指定配置存储库的位置，使用`spring.cloud.config.server.native.searchLocations`属性表示。
- en: Add a routing rule to the edge server to make the API of the config server accessible
    from outside the microservice landscape.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向边缘服务器添加路由规则，以便从微服务景观外部访问配置服务器的API。
- en: Add a Dockerfile and a definition of the config server to the three Docker Compose
    files.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Dockerfile和配置服务器的定义添加到三个Docker Compose文件中。
- en: Externalize sensitive configuration parameters to the standard Docker Compose
    environment file, `.env`. The parameters are described below, in the *Configuring
    the config server for use with Docker* section.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将敏感配置参数外部化到标准的Docker Compose环境文件`.env`中。这些参数在*配置服务器以Docker使用*部分中描述。
- en: 'Add the config server to the common build file, `settings.gradle`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置服务器添加到通用构建文件`settings.gradle`中：
- en: '[PRE2]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The source code for the Spring Cloud Config Server can be found in `$BOOK_HOME/Chapter12/spring-cloud/config-server`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud Config 服务器源代码可在 `$BOOK_HOME/Chapter12/spring-cloud/config-server`
    中找到。
- en: Now, let’s look into how to set up the routing rule referred to in *step 5*
    and how to configure the config server added in Docker Compose, as described in
    *steps 6* and *7*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何设置第 *5* 步中提到的路由规则，以及如何配置在 Docker Compose 中添加的配置服务器，如第 *6* 步和 *7* 步所述。
- en: Setting up a routing rule in the edge server
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在边缘服务器上设置路由规则
- en: 'To be able to access the API of the config server from outside the microservice
    landscape, we add a routing rule to the edge server. All requests to the edge
    server that begin with `/config` will be routed to the config server with the
    following routing rule:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够从微服务景观外部访问配置服务器的 API，我们在边缘服务器中添加了一个路由规则。所有以 `/config` 开头的对边缘服务器的请求都将通过以下路由规则路由到配置服务器：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `RewritePath` filter in the routing rule will remove the leading part, `/config`,
    from the incoming URL before it sends it to the config server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 路由规则中的 `RewritePath` 过滤器将在将其发送到配置服务器之前，从传入的 URL 中删除前面的部分 `/config`。
- en: 'The edge server is also configured to permit all requests to the config server,
    delegating the security checks to the config server. The following line is added
    to the `SecurityConfig` class in the edge server:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘服务器也被配置为允许所有对配置服务器的请求，将安全检查委托给配置服务器。以下行被添加到边缘服务器的 `SecurityConfig` 类中：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With this routing rule in place, we can use the API of the config server; for
    example, run the following command to ask for the configuration of the `product`
    service when it uses the `docker` Spring profile:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路由规则到位后，我们可以使用配置服务器的 API；例如，运行以下命令以请求使用 `docker` Spring 配置文件的 `product` 服务的配置：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will run this command when we try out the config server later on.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们稍后尝试配置服务器时，将运行此命令。
- en: Configuring the config server for use with Docker
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置配置服务器以与 Docker 一起使用
- en: The Dockerfile of the config server looks the same as for the other microservices,
    except for the fact that it exposes port `8888` instead of port `8080`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器的 Dockerfile 与其他微服务的 Dockerfile 相同，只是它暴露的是端口 `8888` 而不是端口 `8080`。
- en: 'When it comes to adding the config server to the Docker Compose files, it looks
    a bit different from what we have seen for the other microservices:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到将配置服务器添加到 Docker Compose 文件中时，它与我们所看到的其他微服务略有不同：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here are the explanations for the preceding source code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对前面源代码的解释：
- en: The Spring profile, `native`, is added to signal to the config server that the
    config repository is based on local files.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring 配置文件 `native` 被添加，以向配置服务器发出信号，表明配置存储库基于本地文件。
- en: The environment variable `ENCRYPT_KEY` is used to specify the symmetric encryption
    key that will be used by the config server to encrypt and decrypt sensitive configuration
    information.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 环境变量 `ENCRYPT_KEY` 用于指定配置服务器将用于加密和解密敏感配置信息的对称加密密钥。
- en: The environment variables `SPRING_SECURITY_USER_NAME` and `SPRING_SECURITY_USER_PASSWORD`
    are used to specify the credentials to be used for protecting the APIs using basic
    HTTP authentication.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 环境变量 `SPRING_SECURITY_USER_NAME` 和 `SPRING_SECURITY_USER_PASSWORD` 用于指定用于保护使用基本
    HTTP 认证的 API 的凭据。
- en: The `volumes` declaration will make the `config-repo` folder accessible in the
    Docker container at `/config-repo`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`volumes` 声明将使 `config-repo` 文件夹在 Docker 容器中可通过 `/config-repo` 访问。'
- en: 'The values of the three preceding environment variables, marked in the Docker
    Compose file with `${...}`, are fetched by Docker Compose from the `.env` file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 三个前面环境变量的值，在 Docker Compose 文件中以 `${...}` 标记，由 Docker Compose 从 `.env` 文件中获取：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The information stored in the `.env` file, that is, the username, password,
    and encryption key, is sensitive and must be protected if used for something other
    than development and testing. Also, note that losing the encryption key will lead
    to a situation where the encrypted information in the config repository cannot
    be decrypted!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在 `.env` 文件中的信息，即用户名、密码和加密密钥，是敏感的，如果用于除开发和测试之外的其他用途，则必须受到保护。此外，请注意，丢失加密密钥将导致配置存储库中的加密信息无法解密的情况发生！
- en: Configuring clients of a config server
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置配置服务器的客户端
- en: 'To be able to get their configurations from the config server, our microservices
    need to be updated. This can be done with the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够从配置服务器获取它们的配置，我们的微服务需要更新。这可以通过以下步骤完成：
- en: Add the `spring-cloud-starter-config` and `spring-retry` dependencies to the
    Gradle build file, `build.gradle`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `spring-cloud-starter-config` 和 `spring-retry` 依赖项添加到Gradle构建文件 `build.gradle`
    中。
- en: Move the configuration file, `application.yml`, to the config repository and
    rename it with the name of the client as specified by the property `spring.application.name`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置文件 `application.yml` 移动到配置存储库，并使用 `spring.application.name` 属性指定的客户端名称重命名。
- en: Add a new `application.yml` file to the `src/main/resources` folder. This file
    will be used to hold the configuration required to connect to the config server.
    Refer to the following *Configuring connection information* section for an explanation
    of its content.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 `application.yml` 文件添加到 `src/main/resources` 文件夹中。此文件将用于存储连接到配置服务器所需的配置。有关其内容的说明，请参阅以下
    *配置连接信息* 部分。
- en: 'Add credentials for accessing the config server to the Docker Compose files,
    for example, the `product` service:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将访问配置服务器的凭据添加到Docker Compose文件中，例如 `product` 服务：
- en: '[PRE8]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Disable the use of the config server when running Spring Boot-based automated
    tests. This is done by adding `spring.cloud.config.enabled=false` to the `@DataMongoTest`,
    `@DataJpaTest`, and `@SpringBootTest` annotations. They look like this:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用运行基于Spring Boot的自动化测试时使用配置服务器。这是通过将 `spring.cloud.config.enabled=false` 添加到
    `@DataMongoTest`、`@DataJpaTest` 和 `@SpringBootTest` 注解来完成的。它们看起来像这样：
- en: '[PRE9]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring connection information
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置连接信息
- en: 'As mentioned previously, the `src/main/resources/application.yml` file now
    holds the client configuration that is required to connect to the config server.
    This file has the same content for all clients of the config server, except for
    the application name, as specified by the `spring.application.name` property (in
    the following example, set to `product`):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`src/main/resources/application.yml` 文件现在包含连接到配置服务器所需的客户端配置。此文件对所有配置服务器的客户端具有相同的内容，除了由
    `spring.application.name` 属性指定的应用程序名称（在以下示例中设置为 `product`）：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This configuration will make the client do the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将使客户端执行以下操作：
- en: Connect to the config server using the `http://localhost:8888` URL when it runs
    outside Docker, and using the `http://config-server:8888` URL when running in
    a Docker container
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当它运行在Docker外部时，使用 `http://localhost:8888` URL连接到配置服务器，当在Docker容器中运行时，使用 `http://config-server:8888`
    URL
- en: Use HTTP Basic authentication, based on the value of the `CONFIG_SERVER_USR`
    and `CONFIG_SERVER_PWD` properties, as the client’s username and password
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用基于 `CONFIG_SERVER_USR` 和 `CONFIG_SERVER_PWD` 属性值的HTTP基本身份验证作为客户端的用户名和密码
- en: Try to reconnect to the config server during startup up to 20 times, if required
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，在启动期间尝试最多20次重新连接到配置服务器
- en: If the connection attempt fails, the client will initially wait for 3 seconds
    before trying to reconnect
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果连接尝试失败，客户端将最初等待3秒钟后尝试重新连接
- en: The wait time for subsequent retries will increase by a factor of 1.3
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后续重试的等待时间将增加1.3倍
- en: The maximum wait time between connection attempts will be 10 seconds
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接尝试之间的最大等待时间为10秒
- en: If the client can’t connect to the config server after 20 attempts, its startup
    will fail
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果客户端在20次尝试后仍然无法连接到配置服务器，其启动将失败
- en: This configuration is generally good for resilience against temporary connectivity
    problems with the config server. It is especially useful when the whole landscape
    of microservices and its config server are started up at once, for example, when
    using the `docker-compose up` command. In this scenario, many of the clients will
    be trying to connect to the config server before it is ready, and the `retry`
    logic will make the clients connect to the config server successfully once it
    is up and running.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置通常适用于对配置服务器的临时连接问题具有弹性。当整个微服务及其配置服务器同时启动时，例如使用 `docker-compose up` 命令时，特别有用。在这种情况下，许多客户端将在配置服务器准备好之前尝试连接到它，而
    `retry` 逻辑将确保客户端在配置服务器启动并运行后成功连接。
- en: Structuring the configuration repository
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化配置存储库
- en: After moving the configuration files from each client’s source code to the configuration
    repository, we will have some common configuration in many of the configuration
    files, for example, for the configuration of actuator endpoints and how to connect
    to Eureka, RabbitMQ, and Kafka.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在将配置文件从每个客户端的源代码移动到配置存储库后，许多配置文件中都将有一些共同配置，例如，对于actuator端点的配置以及如何连接到Eureka、RabbitMQ和Kafka。
- en: 'The common parts have been placed in a common configuration file named `application.yml`.
    This file is shared by all clients. The configuration repository contains the
    following files:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 常用部分已放置在名为`application.yml`的通用配置文件中。此文件由所有客户端共享。配置存储库包含以下文件：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The configuration repository can be found in `$BOOK_HOME/Chapter12/config-repo`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 配置存储库位于`$BOOK_HOME/Chapter12/config-repo`。
- en: Trying out the Spring Cloud Config Server
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试Spring Cloud Config Server
- en: 'Now it is time to try out the config server:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是尝试配置服务器的时候了：
- en: First, we will build from source and run the test script to ensure that everything
    fits together.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将从源代码构建并运行测试脚本，以确保一切正常。
- en: Next, we will try out the config server API to retrieve the configuration for
    our microservices.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试使用配置服务器API检索我们的微服务的配置。
- en: Finally, we will see how we can encrypt and decrypt sensitive information, for
    example, passwords.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将了解如何加密和解密敏感信息，例如密码。
- en: Building and running automated tests
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和运行自动化测试
- en: 'So, now we build and run verification tests of the system landscape, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们构建并运行系统景观的验证测试，如下所示：
- en: 'Build the Docker images with the following commands:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令构建Docker镜像：
- en: '[PRE12]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the system landscape in Docker and run the usual tests with the following
    command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker中启动系统景观并使用以下命令运行常规测试：
- en: '[PRE13]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Getting the configuration using the config server API
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用配置服务器API获取配置
- en: 'As described previously, we can reach the API of the config server through
    the edge server by using the URL prefix, `/config`. We also have to supply credentials
    as specified in the `.env` file for HTTP Basic authentication. For example, to
    retrieve the configuration used for the `product` service when it runs as a Docker
    container, that is, having activated the Spring profile `docker`, run the following
    command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以通过使用URL前缀`/config`通过边缘服务器访问配置服务器的API。我们还需要提供`.env`文件中指定的凭据，以进行HTTP基本身份验证。例如，要检索以Docker容器形式运行的`product`服务所使用的配置，即激活了Spring配置文件`docker`，请运行以下命令：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Expect a response with the following structure (many of the properties in the
    response are replaced by `...` to increase readability):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 预期以下结构的响应（响应中的许多属性已被`...`替换以提高可读性）：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The explanations for this response are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此响应的解释如下：
- en: 'The response contains properties from a number of **property sources**, one
    per property file and Spring profile that matched the API request. The property
    sources are returned in priority order; if a property is specified in multiple
    property sources, the first property in the response takes precedence. The preceding
    sample response contains the following property sources, in the following priority
    order:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应包含来自多个**属性源**的属性，每个属性文件和与API请求匹配的Spring配置文件一个。属性源按优先级返回；如果多个属性源中指定了相同的属性，则响应中的第一个属性具有优先权。前面的示例响应包含以下属性源，按以下优先级顺序：
- en: '`/config-repo/product.yml`, for the `docker` Spring profile'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/product.yml`，对于`docker` Spring配置文件'
- en: '`/config-repo/product.yml`, for the `default` Spring profile'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/product.yml`，对于`default` Spring配置文件'
- en: '`/config-repo/application.yml`, for the `docker` Spring profile'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/application.yml`，对于`docker` Spring配置文件'
- en: '`/config-repo/application.yml`, for the `default` Spring profile'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/application.yml`，对于`default` Spring配置文件'
- en: 'For example, the port used will be `8080` and not `7001`, since `"server.port":
    8080` is specified before `"server.port": 7001` in the preceding response.'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '例如，使用的端口将是`8080`而不是`7001`，因为在先前的响应中`"server.port": 8080`在`"server.port": 7001`之前指定。'
- en: 'Sensitive information, such as the passwords to Eureka and RabbitMQ, are returned
    in plain text, for example, `"p"` and `"guest"`, but they are encrypted on disk.
    In the configuration file, `application.yml`, they are specified as follows:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感信息，例如Eureka和RabbitMQ的密码，以纯文本形式返回，例如`"p"`和`"guest"`，但它们在磁盘上被加密。在配置文件`application.yml`中，它们被指定如下：
- en: '[PRE16]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Encrypting and decrypting sensitive information
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密和解密敏感信息
- en: Information can be encrypted and decrypted using the `/encrypt` and `/decrypt`
    endpoints exposed by the config server. The `/encrypt` endpoint can be used to
    create encrypted values to be placed in the `property` file in the config repository.
    Refer to the example in the previous section, where the passwords to Eureka and
    RabbitMQ are stored encrypted on disk. The `/decrypt` endpoint can be used to
    verify encrypted information that is stored on disk in the config repository.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用配置服务器公开的`/encrypt`和`/decrypt`端点来加密和解密信息。`/encrypt`端点可以用来创建要放置在配置存储库中的`property`文件中的加密值。参考前一个示例，其中Eureka和RabbitMQ的密码以加密形式存储在磁盘上。`/decrypt`端点可以用来验证存储在配置存储库磁盘上的加密信息。
- en: 'To encrypt the `hello world` string, run the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要加密`hello world`字符串，请运行以下命令：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is important to use the `--data-urlencode` flag when using `curl` to call
    the `/encrypt` endpoint, to ensure the correct handling of special characters
    such as `+`.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用`curl`调用`/encrypt`端点时，使用`--data-urlencode`标志是很重要的，以确保正确处理特殊字符，如`+`。
- en: 'Expect a response along the lines of the following:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期响应如下：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19825_12_02.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B19825_12_02.png)'
- en: 'Figure 12.2: An encrypted value of a configuration parameter'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：配置参数的加密值
- en: 'To decrypt the encrypted value, run the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要解密加密值，请运行以下命令：
- en: '[PRE18]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Expect the `hello world` string as the response:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期响应为`hello world`字符串：
- en: '![](img/B19825_12_03.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19825_12_03.png)'
- en: 'Figure 12.3: A decrypted value of a configuration parameter'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：配置参数的解密值
- en: 'If you want to use an encrypted value in a configuration file, you need to
    prefix it with `{cipher}` and wrap it in `''''`. For example, to store the encrypted
    version of `hello world`, add the following line in a YAML-based configuration
    file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在配置文件中使用加密值，你需要在其前加上`{cipher}`并在`''`中包裹它。例如，要存储`hello world`的加密版本，在基于YAML的配置文件中添加以下行：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When the config server detects values in the format `'{cipher}...'`, it tries
    to decrypt them using its encryption key before sending them to a client.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置服务器检测到格式为`'{cipher}...'`的值时，它在将它们发送到客户端之前会尝试使用其加密密钥来解密它们。
- en: 'These tests conclude the chapter on centralized configuration. Wrap it up by
    shutting down the system landscape:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些测试完成了关于集中配置的章节。通过关闭系统景观来结束：
- en: '[PRE20]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how we can use the Spring Cloud Config Server
    to centralize managing the configuration of our microservices. We can place the
    configuration files in a common configuration repository and share common configurations
    in a single configuration file while keeping microservice-specific configuration
    in microservice-specific configuration files. The microservices have been updated
    to retrieve their configuration from the config server at startup and are configured
    to handle temporary outages while retrieving their configuration from the config
    server.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用Spring Cloud Config Server来集中管理我们的微服务的配置。我们可以将配置文件放置在公共配置存储库中，并在单个配置文件中共享公共配置，同时将特定于微服务的配置保留在特定于微服务的配置文件中。微服务已更新，以便在启动时从配置服务器检索其配置，并且配置为在从配置服务器检索配置时处理暂时中断。
- en: The config server can protect configuration information by requiring authenticated
    usage of its API with HTTP basic authentication and can prevent eavesdropping
    by exposing its API externally through the edge server that uses HTTPS. To prevent
    intruders who obtained access to the configuration files on disk from gaining
    access to sensitive information such as passwords, we can use the config server
    `/encrypt` endpoint to encrypt the information and store it encrypted on disk.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器可以通过要求使用HTTP基本身份验证来认证其API的使用，从而保护配置信息，并且可以通过通过使用HTTPS的边缘服务器公开其API来防止窃听。为了防止入侵者从磁盘上的配置文件中获取访问权限，我们可以使用配置服务器的`/encrypt`端点来加密信息，并将其加密存储在磁盘上。
- en: While exposing the APIs from the config server externally is useful during development,
    they should be locked down before use in production.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发期间公开配置服务器的API是有用的，但在生产使用之前应该将其锁定。
- en: In the next chapter, we will learn how we can use **Resilience4j** to mitigate
    the potential drawbacks of overusing synchronous communication between microservices.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用**Resilience4j**来减轻过度使用微服务之间同步通信的潜在缺点。
- en: Questions
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What API call can we expect from a review service to the config server during
    startup to retrieve its configuration?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动期间，我们可以期望审查服务向配置服务器发出哪些API调用以检索其配置？
- en: 'The review service was started up using the following command: `docker compose
    up -d`.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动了审查服务：`docker compose up -d`。
- en: What configuration information should we expect back from an API call to the
    config server using the following command?
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下命令调用配置服务器时，我们应该期望返回哪些配置信息？
- en: '[PRE21]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What types of repository backend does Spring Cloud Config support?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Cloud Config支持哪些类型的存储后端？
- en: How can we encrypt sensitive information on disk using the Spring Cloud Config
    Server?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Spring Cloud Config Server在磁盘上加密敏感信息？
- en: How can we protect the config server API from misuse?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何保护配置服务器API免受滥用？
- en: Mention some pros and cons for clients that first connect to the config server
    as opposed to those that first connect to the discovery server.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提及与首先连接到配置服务器相比，那些首先连接到发现服务器的客户端的一些优缺点。
