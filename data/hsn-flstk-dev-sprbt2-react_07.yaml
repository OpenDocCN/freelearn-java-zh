- en: Consuming the REST API with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React消费REST API
- en: This chapter explains networking with React. We will learn about promises, which
    make asynchronous code cleaner and more readable. For networking, we will use
    the `fetch` library. As an example, we use the GitHub REST API to demonstrate
    how to consume RESTful Web Services with React.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了React的网络。我们将学习承诺，使异步代码更清晰和可读。对于网络，我们将使用`fetch`库。例如，我们使用GitHub REST API来演示如何在React中消费RESTful
    Web服务。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看以下内容：
- en: Using promises
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用承诺
- en: How to use Fetch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Fetch
- en: How to make requests to the REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向REST API发出请求
- en: How to handle responses from the REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理来自REST API的响应
- en: How to create a React app that consumes the REST API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个消费REST API的React应用程序
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this book, we are using the Windows operating system, but all tools are available
    for Linux and macOS as Node.js and `create-react-app` have to be installed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用的是Windows操作系统，但所有工具都适用于Linux和macOS，因为Node.js和`create-react-app`必须安装。
- en: Using promises
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用承诺
- en: 'The traditional way to handle an asynchronous operation is to use callback
    functions for the success or failure of the operation. One of the callback functions
    is called, depending on the result of the call. The following example shows the
    idea of using the callback function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 处理异步操作的传统方法是使用回调函数来处理操作的成功或失败。根据调用的结果，将调用其中一个回调函数。以下示例展示了使用回调函数的思想：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A promise is an object that represents the result of an asynchronous operation.
    The use of promises simplifies the code when doing asynchronous calls. Promises
    are non-blocking.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺是表示异步操作结果的对象。使用承诺在进行异步调用时简化了代码。承诺是非阻塞的。
- en: 'A promise can be in one of three states:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺可以处于三种状态之一：
- en: '**Pending**: Initial state'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待定**：初始状态'
- en: '**Fulfilled**: Successful operation'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成**：操作成功'
- en: '**Rejected**: Failed operation'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝**：操作失败'
- en: 'With promises, we can do asynchronous calls if the API we are using supports
    promises. In the next example, the asynchronous call is done and, when the response
    is returned, the function inside `then` is executed and it takes the response
    as an argument:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用承诺，我们可以进行异步调用，如果我们使用的API支持承诺。在下一个示例中，异步调用完成后，当响应返回时，`then`中的函数将被执行，并将响应作为参数传递：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can chain `thens` together, which means that you can run multiple asynchronous
    operations one after another:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`then`链接在一起，这意味着您可以依次运行多个异步操作：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also add error-handling to promises by using `catch()`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用`catch()`向承诺添加错误处理：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is a more modern way to handle asynchronous calls, with `async`/`await`,
    which was introduced in ECMAScript 2017\. It is yet not as widely supported by
    browsers as promises. `async`/`await` is actually based on the promises. To use
    `async`/`await`, you have to define an `async` function that can contain await
    expressions. The following is an example of an asynchronous call with `async`/`await`.
    As you can see, you can write the code in a similar way to synchronous code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种更现代的处理异步调用的方法，使用了ECMAScript 2017引入的`async`/`await`，它还没有像承诺那样得到浏览器的广泛支持。`async`/`await`实际上是基于承诺的。要使用`async`/`await`，您必须定义一个可以包含等待表达式的`async`函数。以下是使用`async`/`await`进行异步调用的示例。正如您所看到的，您可以以类似于同步代码的方式编写代码：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For error-handling, you can use `try…catch` with `async`/`await`, as shown
    in the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于错误处理，您可以使用`async`/`await`和`try…catch`，如下例所示：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the Fetch API
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fetch API
- en: With the Fetch API, you can make web requests. The idea of the Fetch API is
    similar to traditional `XMLHttpRequest`, but the Fetch API also supports promises
    that makes it more straightforward to use.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Fetch API，您可以进行Web请求。Fetch API的思想类似于传统的`XMLHttpRequest`，但Fetch API也支持承诺，使其更易于使用。
- en: 'The Fetch API provides a `fetch()` method that has one mandatory argument,
    which is the path of the resource you are calling. In the case of a web request,
    it will be the URL of the service. For a simple `GET` method call, which returns
    a JSON response, the syntax is the following. The `fetch()` method returns a promise
    that contains the response. You can use the `json()` method to parse the JSON
    body from the response:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API提供了一个`fetch()`方法，它有一个必需的参数，即您正在调用的资源的路径。对于Web请求，它将是服务的URL。对于简单的`GET`方法调用，返回JSON响应，语法如下。`fetch()`方法返回一个包含响应的承诺。您可以使用`json()`方法从响应中解析JSON主体：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To use another HTTP method, such as `POST`, you can define it in the second
    argument of the `fetch` method. The second argument is the object where you can
    define multiple request settings. The following source code makes the request
    using the `POST` method:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用另一种HTTP方法，比如`POST`，你可以在`fetch`方法的第二个参数中定义它。第二个参数是一个对象，你可以在其中定义多个请求设置。以下源代码使用`POST`方法发出请求：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also add headers inside the second argument. The following `fetch`
    call contains the `''Content-Type'' : ''application/json''` header:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '您还可以在第二个参数中添加标头。以下`fetch`调用包含`''Content-Type'' : ''application/json''`标头：'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you have to send JSON-encoded data inside the request body, the syntax is
    the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须在请求体中发送JSON编码的数据，语法如下：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also use other libraries for the network calls. One very popular library
    is `axios` ([https://github.com/axios/axios](https://github.com/axios/axios)),
    which you can install to your React app with npm. axios has some benefits, such
    as automatic transform for JSON data. The following code shows the example call
    with `axios`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用其他库进行网络调用。一个非常流行的库是`axios`（[https://github.com/axios/axios](https://github.com/axios/axios)），你可以使用npm将其安装到你的React应用程序中。axios有一些好处，比如自动转换JSON数据。以下代码显示了使用`axios`进行示例调用：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`axios` has its own call methods for the different HTTP methods. For example,
    if you want to make a `DELETE` request, `axios` provides the `axios.delete` method.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`axios`有自己的调用方法，用于不同的HTTP方法。例如，如果您想发出`DELETE`请求，`axios`提供了`axios.delete`方法。'
- en: Practical examples
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际示例
- en: 'We will go through two examples of using some open REST APIs. First, we will
    make a React app that shows the current weather in London. The weather is fetched
    from **OpenWeatherMap** ([https://openweathermap.org/](https://openweathermap.org/)).
    You need to register to OpenWeatherMap to get an API key. We will use a free account
    as that is enough for our needs. When you have registered, navigate to your account
    info to find the API keys tab. There you''ll see the API key that you need for
    your React weather app:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍使用一些开放的REST API的两个示例。首先，我们将制作一个React应用程序，显示伦敦的当前天气。天气是从**OpenWeatherMap**([https://openweathermap.org/](https://openweathermap.org/))获取的。你需要注册到OpenWeatherMap获取API密钥。我们将使用免费账户，因为这对我们的需求已经足够。注册后，转到你的账户信息找到API密钥选项卡。在那里你会看到你需要用于React天气应用程序的API密钥：
- en: '![](img/5c8092f6-ddb2-4eb7-997e-0f8efb109fcc.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c8092f6-ddb2-4eb7-997e-0f8efb109fcc.png)'
- en: 'Let''s create a new React app with `create-react-app`. Open the PowerShell
    or other terminal you are using, and type the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`create-react-app`创建一个新的React应用程序。打开你正在使用的PowerShell或其他终端，并输入以下命令：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Move to the `weatherApp` folder:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到`weatherApp`文件夹：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start your app with the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下命令启动你的应用程序：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open your project folder with the VS Code and open the `App.js` file in the
    editor view. Remove all code inside the `<div className="App"></div>` divider.
    Now your source code should look like the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 用VS Code打开你的项目文件夹，并在编辑器视图中打开`App.js`文件。删除`<div className="App"></div>`分隔符内的所有代码。现在你的源代码应该如下所示：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you have installed *Reactjs code snippets* to VS Code, you can create a default
    constructor automatically by typing `con`. There are lots of different shortcuts
    for typical React methods, such as `cdm` for `componentDidMount()`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在VS Code中安装了*Reactjs code snippets*，你可以通过输入`con`来自动创建一个默认构造函数。对于典型的React方法，还有许多不同的快捷方式，比如`cdm`代表`componentDidMount()`。
- en: 'First, we add a necessary constructor and state. We will show the temperature,
    description, and weather icon in our app, therefore, we define three state values.
    We will also add one Boolean state to indicate the status of fetch loading. The
    following is the source code of the constructor:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加一个必要的构造函数和状态。我们将在我们的应用程序中显示温度、描述和天气图标，因此，我们定义了三个状态值。我们还将添加一个布尔状态来指示获取加载的状态。以下是构造函数的源代码：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When you are using a REST API, you should first inspect the response to be
    able to get values from the JSON data. In the following example, you can see the
    address that returns the current weather for London. Copy the address to a browser
    and you can see the JSON response data:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用REST API时，你应该首先检查响应，以便能够从JSON数据中获取值。在下面的示例中，你可以看到返回伦敦当前天气的地址。将地址复制到浏览器中，你可以看到JSON响应数据：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'From the response, you can see that the `temp` can be accessed using `main.temp`.
    The `description` and `icon` are inside the `weather` array, which has only one
    element and we can access it using `weather[0].description` and `weather[0].icon`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从响应中，你可以看到可以使用`main.temp`来访问`temp`。`description`和`icon`在`weather`数组中，该数组只有一个元素，我们可以使用`weather[0].description`和`weather[0].icon`来访问它：
- en: '![](img/58d33570-1810-4bd8-b7bc-ee969bf1982b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58d33570-1810-4bd8-b7bc-ee969bf1982b.png)'
- en: 'The REST API call is done with the `fetch` in the `componentDidMount()` life
    cycle method. After the successful response, we save the weather data to the state
    and change the `loading` state to `false`. After the state has been changed, the
    component will be re-rendered. We will implement the `render()` method in the
    next step. The following is the source code of the `componentDidMount()` method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentDidMount()`生命周期方法中使用`fetch`进行REST API调用。在成功响应后，我们将天气数据保存到状态中，并将`loading`状态更改为`false`。状态更改后，组件将重新渲染。我们将在下一步中实现`render()`方法。以下是`componentDidMount()`方法的源代码：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After you have added the `componentDidMount()` method, the request is done
    when the component is mounted. We can check that everything is done correctly
    using the React Developer Tool. Open your app in a browser and open your browser
    developer tool''s React tab. Now you can see that the state is updated with the
    values from the response. You can also check from the Network tab that the request
    status is 200 OK:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了`componentDidMount()`方法后，当组件挂载时会进行请求。我们可以使用React Developer Tool检查一切是否正确。在浏览器中打开你的应用程序，并打开浏览器开发者工具的React选项卡。现在你可以看到状态已更新为响应中的值。你还可以从网络选项卡中检查请求状态是否为200
    OK：
- en: '![](img/6a5fcf09-fa18-4fe1-a7c8-056e19dfe85f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a5fcf09-fa18-4fe1-a7c8-056e19dfe85f.png)'
- en: 'Finally, we implement the `render()` method to show weather values. We are
    using conditional rendering, otherwise, we get an error because we don''t have
    image code in the first render call and image upload won''t succeed. To show the
    weather icon, we have to add `http://openweathermap.org/img/w/` before the icon
    code and `.png` after the icon code. Then, we can set the concatenated image URL
    to the `img` element''s `src` attribute. The temperature and description are shown
    in the paragraph element. The °C  HTML entity shows the Celsius degrees symbol:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们实现`render()`方法来显示天气数值。我们使用条件渲染，否则，我们会因为第一次渲染调用中没有图像代码而出现错误，图像上传也不会成功。为了显示天气图标，我们必须在图标代码之前添加`http://openweathermap.org/img/w/`，在图标代码之后添加`.png`。然后，我们可以将连接的图像URL设置为`img`元素的`src`属性。温度和描述显示在段落元素中。`°C`
    HTML实体显示摄氏度符号：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now your app should be ready. When you open it in a browser, it should look
    like the following image:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用程序应该准备好了。当你在浏览器中打开它时，它应该看起来像下面的图片：
- en: '![](img/d49416f9-8258-45c6-abf7-b97051ccffb0.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d49416f9-8258-45c6-abf7-b97051ccffb0.png)'
- en: 'The source code of the whole `App.js` file looks as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`App.js`文件的源代码如下所示：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this second example, we are going to use the GitHub API to fetch repositories
    by a keyword. With the same steps as in the previous example, create a new React
    app called `restgithub`. Start the app and open the project folder with the VS
    Code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，我们将使用GitHub API按关键字获取存储库。使用与上一个示例相同的步骤，创建一个名为`restgithub`的新React应用程序。启动应用程序并用VS
    Code打开项目文件夹。
- en: 'Remove the extra code inside the `<div className="App"></div>` divider from
    the `App.js` file and again your `App.js` code should look like the following
    sample code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从`App.js`文件中的`<div className="App"></div>`分隔符中删除额外的代码，然后您的`App.js`代码应如下示例代码所示：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The URL of the GitHub REST API is the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub REST API的URL如下：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s inspect the JSON response by typing the URL into a browser and using
    the `react` keyword. From the response, we can see that repositories are returned
    as a JSON array called `items`. From the individual repositories, we will show
    the `full_name` and `html_url` values. We will present the data in the table and
    use the `map` function to transform the values to table rows, as shown in the
    previous chapter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在浏览器中输入URL并使用`react`关键字来检查JSON响应。从响应中，我们可以看到存储库作为名为`items`的JSON数组返回。从各个存储库中，我们将显示`full_name`和`html_url`的值。我们将在表中呈现数据，并使用`map`函数将值转换为表行，就像在上一章中所示的那样：
- en: '![](img/c321abb3-1e98-45ad-801a-871562227449.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c321abb3-1e98-45ad-801a-871562227449.png)'
- en: 'We are going to make the REST API call with the keyword from the user input.
    Therefore, we can''t make the REST API call in the `componentDidMount()` method
    because, in that phase, we don''t have the user input available. One way to implement
    this is to create an input field and button. The user types the keyword into the
    input field and the REST API call is done when the button is pressed. We need
    two states, one for the user input and one for the data from the JSON response.
    The following is the source code of the `constructor`. The type of data state
    is an array because repositories are returned as JSON arrays in the response:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用用户输入的关键字进行REST API调用。因此，我们不能在`componentDidMount()`方法中进行REST API调用，因为在那个阶段，我们没有用户输入可用。实现这一点的一种方法是创建一个输入字段和按钮。用户在输入字段中输入关键字，当按下按钮时进行REST
    API调用。我们需要两个状态，一个用于用户输入，一个用于JSON响应中的数据。以下是`constructor`的源代码。数据状态的类型是数组，因为存储库作为JSON数组返回在响应中：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we implement the input field and the button into the `render()` method.
    We also have to add a change listener to our input field to be able to save the
    input value to the state, called `keyword`. The button has a click listener that
    invokes the function that will do the REST API call with the given keyword:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`render()`方法中实现输入字段和按钮。我们还必须为输入字段添加一个更改监听器，以便能够将输入值保存到名为`keyword`的状态中。按钮有一个点击监听器，调用将使用给定关键字进行REST
    API调用的函数。
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `fetchData` function, we concatenate the `url` and `keyword` state by
    using template literals. Then we save the `items` array from the response to the
    state, called `data`. The following is the source code of the `fetchData` function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fetchData`函数中，我们使用模板文字将`url`和`keyword`状态连接起来。然后我们将响应中的`items`数组保存到名为`data`的状态中。以下是`fetchData`函数的源代码：
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `render` method, we first use the `map` function to transform the `data`
    state to table rows. The `url` repository will be the `href` of the link element:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们首先使用`map`函数将`data`状态转换为表行。`url`存储库将是链接元素的`href`：
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following screenshot shows the final app when using the React keyword in
    the REST API call:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在REST API调用中使用React关键字时的最终应用程序：
- en: '![](img/57460be9-dbdb-4481-a62d-4d545ba5ea6a.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57460be9-dbdb-4481-a62d-4d545ba5ea6a.png)'
- en: 'The source code of the whole `App.js` file looks like the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`App.js`文件的源代码如下所示：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on networking with React. We started with promises
    that make asynchronous network calls easier to implement. It is a cleaner way
    to handle calls, and much better than using traditional callback functions. In
    this book, we are using the Fetch API for networking, therefore we went through
    the basics of using `fetch`. We implemented two practical React apps that calling
    open REST APIs and we presented the response data in the browser. In the next
    chapter we will look some useful React component that we are going to use in our
    frontend.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们专注于使用React进行网络编程。我们从使异步网络调用更容易实现的promise开始。这是一种更清洁的处理调用的方式，比传统的回调函数要好得多。在本书中，我们使用Fetch
    API进行网络编程，因此我们介绍了使用`fetch`的基础知识。我们实现了两个实用的React应用程序，调用了开放的REST API，并在浏览器中呈现了响应数据。在下一章中，我们将介绍一些有用的React组件，这些组件将在我们的前端中使用。
- en: Questions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a promise?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是promise？
- en: What is `fetch`?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`fetch`？
- en: How should you call the REST API from the React app?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何从React应用程序调用REST API？
- en: How should you handle the response of the REST API call?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何处理REST API调用的响应？
- en: Further reading
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很好的资源可供学习React：
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
