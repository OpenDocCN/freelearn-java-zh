- en: Creating a Simple JEE Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的 JEE Web 应用程序
- en: The previous chapter gave you a brief introduction to JEE and Eclipse. We also
    learned how to install the Eclipse JEE package and also how to install and configure
    Tomcat. Tomcat is a servlet container and it is easy to use and configure. Therefore,
    many developers use it to run JEE web applications on local machines.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章为您简要介绍了 JEE 和 Eclipse。我们还学习了如何安装 Eclipse JEE 包以及如何安装和配置 Tomcat。Tomcat 是一个
    servlet 容器，它易于使用和配置。因此，许多开发者使用它在本地上运行 JEE Web 应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Configuring Tomcat in Eclipse and deploying web applications from within Eclipse
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中配置 Tomcat 并从 Eclipse 部署 Web 应用程序
- en: Using different technologies to create web applications in JEE, for example,
    JSP, JSTL, JSF, and servlets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的技术创建 JEE 中的 Web 应用程序，例如 JSP、JSTL、JSF 和 servlet
- en: Using the Maven dependency management tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven 依赖管理工具
- en: Configuring Tomcat in Eclipse
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Eclipse 中配置 Tomcat
- en: 'We will perform the following steps to configure Tomcat in Eclipse:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤以在 Eclipse 中配置 Tomcat：
- en: In the Java EE perspective of Eclipse, you will find the Servers tab at the
    bottom. Since no server is added yet, you will see a link in the tab as shown
    in the following screenshot—No servers are available. Click this link to create
    a new server....
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 的 Java EE 视图中，您将在底部找到“服务器”选项卡。由于尚未添加服务器，您将在选项卡中看到一个链接，如下面的截图所示——没有可用的服务器。点击此链接以创建一个新的服务器……
- en: '![](img/00021.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: 'Figure 2.1: The Servers tab in Eclipse JEE'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：Eclipse JEE 中的“服务器”选项卡
- en: Click the link in the Servers tab to add a new server.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“服务器”选项卡中的链接以添加新的服务器。
- en: 'Expand the `Apache` group and select the Tomcat version that you have already
    installed. If Eclipse and the Tomcat server are on the same machine, then leave
    Server''s host name as `localhost`. Otherwise, enter hostname or IP address of
    the Tomcat server. Click Next:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开“Apache”组并选择您已安装的 Tomcat 版本。如果 Eclipse 和 Tomcat 服务器在同一台机器上，则将服务器的计算机名保留为“localhost”。否则，输入
    Tomcat 服务器的计算机名或 IP 地址。点击“下一步”：
- en: '![](img/00022.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: 'Figure 2.2: Selecting a server in the New Server wizard'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：在新建服务器向导中选择服务器
- en: Click the Browse... button and select the folder where Tomcat is installed.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“浏览...”按钮并选择 Tomcat 安装的文件夹。
- en: Click Next until you complete the wizard. At the end of it, you will see the
    Tomcat server added to the Servers view. If Tomcat is not already started, you
    will see the status as stopped.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”直到完成向导。在最后，您将在“服务器”视图中看到添加的 Tomcat 服务器。如果 Tomcat 还未启动，您将看到状态为“停止”。
- en: '![](img/00023.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: Figure 2.3: Configuring Tomcat folder in the New Server wizard
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：在新建服务器向导中配置 Tomcat 文件夹
- en: To start the server, right-click on the server and select Start. You can also
    start the server by clicking the Start button in the toolbar of the Server view.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动服务器，右键单击服务器并选择“启动”。您也可以通过点击“服务器”视图工具栏中的“启动”按钮来启动服务器。
- en: '![](img/00024.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: 'Figure 2.4: The Tomcat server added to the Servers view'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：添加到“服务器”视图中的 Tomcat 服务器
- en: Once the server is started successfully, you will see the status changed to
    `Started`. If you click on the Console tab, you will see console messages that
    the Tomcat server outputs during startup.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器成功启动后，您将看到状态更改为“已启动”。如果您点击“控制台”选项卡，您将看到 Tomcat 服务器在启动期间输出的控制台消息。
- en: If you expand the Servers group in the Project Explorer view, you will see the
    Tomcat server that you just added. Expand the Tomcat server node to view configuration
    files. This is an easy way to edit the Tomcat configuration so that you don't
    have to go look for the configuration files in the filesystem.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在“项目资源管理器”视图中展开“服务器”组，您将看到您刚刚添加的 Tomcat 服务器。展开 Tomcat 服务器节点以查看配置文件。这是一种编辑
    Tomcat 配置的简单方法，这样您就不必在文件系统中查找配置文件。
- en: Double-click `server.xml` to open it in the XML editor. You get the Design view
    as well as the Source view (two tabs at the bottom of the editor). We have learned
    how to change the default port of Tomcat in the last chapter. You can easily change
    that in the Eclipse editor by opening `server.xml` and going to the Connector
    node. If you need to search the text, you can switch to the Source tab (at the
    bottom of the editor).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 双击 `server.xml` 以在 XML 编辑器中打开它。您将获得“设计视图”以及“源视图”（编辑器底部的两个选项卡）。我们在上一章学习了如何更改
    Tomcat 的默认端口。您可以通过打开 `server.xml` 并转到 Connector 节点来轻松地在 Eclipse 编辑器中更改它。如果您需要搜索文本，您可以将编辑器切换到源选项卡（编辑器底部的选项卡）。
- en: '![](img/00025.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.jpeg)'
- en: 'Figure 2.5: Open server.xml'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：打开server.xml
- en: You can also easily edit `tomcat-users.xml` to add/edit Tomcat users. Recall
    that we added a Tomcat user in [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Introducing JEE and Eclipse*, to administer the Tomcat server.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以轻松编辑`tomcat-users.xml`以添加/编辑Tomcat用户。回想一下，我们在[第1章](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，“介绍JEE和Eclipse”中添加了一个Tomcat用户来管理Tomcat服务器。
- en: By default, Eclipse does not change anything in the Tomcat installation folder
    when you add the server in Eclipse. Instead, it creates a folder in the workspace
    and copies Tomcat configuration files to this folder. Applications that are deployed
    in Tomcat are also copied and published from this folder. This works well in development,
    when you do not want to modify Tomcat settings or any application deployed in
    the server. However, if you want to use the actual Tomcat installation folder,
    then you need to modify server settings in Eclipse. Double-click the server in
    the Servers view to open it in the editor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当你在Eclipse中添加服务器时，Eclipse不会在Tomcat安装文件夹中做任何更改。相反，它会在工作区中创建一个文件夹，并将Tomcat配置文件复制到这个文件夹中。在Tomcat中部署的应用程序也会从这个文件夹中复制和发布。这在开发阶段工作得很好，当你不想修改Tomcat设置或服务器中部署的任何应用程序时。然而，如果你想使用实际的Tomcat安装文件夹，那么你需要修改Eclipse中的服务器设置。在服务器视图中双击服务器以在编辑器中打开它。
- en: '![](img/00026.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00026.jpeg)'
- en: 'Figure 2.6: Tomcat settings'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：Tomcat设置
- en: Note the options under Server Locations. Select the second option, Use Tomcat
    installation, if you want to use the actual Tomcat installation folders for configuration
    and for publishing applications from within Eclipse.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意服务器位置下的选项。如果你想使用实际的Tomcat安装文件夹进行配置和从Eclipse内部发布应用程序，请选择第二个选项，使用“Tomcat安装”。
- en: JavaServer Pages
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaServer Pages
- en: We will start with a project to create a simple JSP. We will create a login
    JSP that submits data to itself and validates the user.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个创建简单JSP的项目开始。我们将创建一个登录JSP，该JSP将数据提交给自己并验证用户。
- en: Creating a dynamic web project
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动态网络项目
- en: 'We will perform the following steps to create a dynamic web project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤来创建动态网络项目：
- en: Select the File | New | Other menu. This opens the selection wizard. At the
    top of the wizard, you will find a textbox with a cross icon on the extreme right
    side.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“文件 | 新建 | 其他”菜单。这会打开选择向导。在向导的顶部，你将找到一个带有交叉图标在极右侧的文本框。
- en: Type `web` in the textbox. This is the filter box. Many wizards and views in
    Eclipse have such a filter textbox, which makes finding items very easy.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入`web`。这是过滤器框。Eclipse中的许多向导和视图都有这样的过滤器文本框，这使得查找项目变得非常容易。
- en: '![](img/00027.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00027.jpeg)'
- en: 'Figure 2.7: New selection wizard'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：新建选择向导
- en: Select Dynamic Web Project and click Next to open the Dynamic Web Project wizard.
    Enter project name, for example, `LoginSampleWebApp`. Note that the Dynamic web
    module version field in this page lists Servlet API version numbers. Select version
    3.0 or greater. Click Next.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择动态网络项目并点击“下一步”以打开动态网络项目向导。输入项目名称，例如，`LoginSampleWebApp`。注意，在此页面的动态网络模块版本字段中列出了Servlet
    API版本号。选择3.0或更高版本。点击“下一步”。
- en: '![](img/00028.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00028.jpeg)'
- en: 'Figure 2.8: New Dynamic Web Project wizard'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：新建动态网络项目向导
- en: Click Next in the following pages and click Finish on the last page to create
    a `LoginSimpleWebApp` project. This project is also added to Project Explorer.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下页面中点击“下一步”，在最后一页点击“完成”以创建`LoginSimpleWebApp`项目。此项目也添加到项目资源管理器中。
- en: '![](img/00029.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00029.jpeg)'
- en: 'Figure 2.9: New web project'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：新建网络项目
- en: Java source files go in the `src` folder under `Java Resources`. Web resources
    such as the HTML, JS, and CSS files go in the `WebContent` folder.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Java源文件放在`Java Resources`下的`src`文件夹中。Web资源，如HTML、JS和CSS文件，放在`WebContent`文件夹中。
- en: In the next section, we will create a JSP page for login.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个登录JSP页面。
- en: To keep the page simple in the first JSP, we will not follow many of the best
    practices. We will have the UI code mixed with the application business code.
    Such design is not recommended in real applications, but could be useful for quick
    prototyping. We will see how to write better JSP code with clear separation of
    the UI and business logic later in the chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个JSP中，为了保持页面简单，我们不会遵循许多最佳实践。我们将UI代码与应用程序业务代码混合。这种设计在真实的应用程序中不被推荐，但可能对快速原型设计有用。我们将在本章的后面部分看到如何编写具有清晰分离UI和业务逻辑的更好的JSP代码。
- en: Creating JSP
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建JSP
- en: 'We will perform the following steps to create the JSP:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤来创建JSP：
- en: Right-click on the `WebContent` folder and select New | JSP File. Name it `index.jsp`.
    The file will open in the editor with the split view. The top part shows the design
    view, and the bottom part shows the code. If the file is not opened in the split
    editor, right-click on `index.jsp` in the Project Explorer and select Open With
    | Web Page Editor.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`WebContent`文件夹，选择“新建”|“JSP文件”。将其命名为`index.jsp`。文件将在编辑器中以分割视图打开。顶部部分显示设计视图，底部部分显示代码。如果文件未在分割编辑器中打开，请右键单击项目资源管理器中的`index.jsp`，然后选择“打开方式”|“网页编辑器”。
- en: '![](img/00030.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00030.jpeg)'
- en: 'Figure 2.10: The JSP editor'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10：JSP编辑器
- en: 'If you do not like the split view and want to see either the full design view
    or the full code view, then use appropriate toolbar buttons at the top right,
    as shown in the following screenshot:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您不喜欢分割视图，并想看到完整的设计视图或代码视图，请使用右上角的相应工具栏按钮，如下面的截图所示：
- en: '![](img/00031.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00031.jpeg)'
- en: 'Figure 2.11: The JSP editor display buttons'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：JSP编辑器显示按钮
- en: Change the title from `Insert title here` to `Login`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题从`Insert title here`更改为`Login`。
- en: Let's now see how Eclipse provides code assistance for HTML tags. Note that
    input fields must be in a `form` tag. We will add a `form` tag later. Inside the
    `body` tag, type the `User Name:` label. Then, type `<`. If you wait for a moment,
    Eclipse pops up the code assist window showing options for all the valid HTML
    tags. You can also invoke code assist manually.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来看看Eclipse如何为HTML标签提供代码辅助。请注意，输入字段必须位于`form`标签内。我们稍后会添加`form`标签。在`body`标签内，输入`User
    Name:`标签。然后，输入`<`。如果您稍等片刻，Eclipse会弹出代码辅助窗口，显示所有有效HTML标签的选项。您也可以手动调用代码辅助。
- en: Place a caret just after `<` and press *Ctrl* + *Spacebar*.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<`之后放置一个光标，并按*Ctrl* + *Spacebar*。
- en: '![](img/00032.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00032.jpeg)'
- en: 'Figure 2.12: HTML code assist in JSP'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12：JSP中的HTML代码辅助
- en: Code assist works on partial text too; for example, if you invoke code assist
    after text `<i`, you will see a list of HTML tags starting with `i` (`i`, `iframe`,
    `img`, `input`, and so on). You can also use code assist for tag attributes and
    attribute values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 代码辅助也适用于部分文本；例如，如果您在文本`<i`之后调用代码辅助，您将看到以`i`开头的HTML标签列表（`i`、`iframe`、`img`、`input`等）。您还可以使用代码辅助进行标签属性和属性值的操作。
- en: For now, we want to insert the `input` field for username.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们想要插入用户名的`input`字段。
- en: Select `input` from the code assist proposals, or type it.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码辅助建议中选择`input`，或者直接输入它。
- en: After the `input` element is inserted, move the caret inside the closing `>`
    and invoke code assist again (*Ctrl*/*Cmd* + *Spacebar*). You will see the list
    of proposals for the attributes of the `input` tag.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插入`input`元素后，将光标移至关闭的`>`内部，并再次调用代码辅助（*Ctrl*/*Cmd* + *Spacebar*）。您将看到`input`标签属性的提议列表。
- en: '![](img/00033.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00033.jpeg)'
- en: 'Figure 2.13: Code assist for the tag attribute value'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：标签属性值的代码辅助
- en: 'Type the following code to create a login form:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码以创建登录表单：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Downloading the example code
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books that you have purchased. If you purchased this
    book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载示例代码文件，以获取您购买的所有Packt
    Publishing书籍。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: If you are using the split editor (design and source pages), you can see the
    login form rendered in the design view. If you want to see how the page would
    look in the web browser, click the Preview tab at the bottom of the editor. You
    will see that the web page is displayed in the browser view inside the editor.
    Therefore, you don't need to move out of Eclipse to test your web pages.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用分割编辑器（设计和源页面），您可以在设计视图中看到登录表单的渲染效果。如果您想查看网页在浏览器中的外观，请点击编辑器底部的预览标签。您将看到网页在编辑器内的浏览器视图中显示。因此，您不需要离开Eclipse来测试您的网页。
- en: '![](img/00034.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00034.jpeg)'
- en: 'Figure 2.14: Design and Source views'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：设计和源视图
- en: If you click on any user interface control in the design view, you will see
    its properties in the Properties view (see *Figure 2.14*). You can edit properties,
    such as Name and Value of the selected element. Click on the Style tab of the
    Properties window to edit CSS styles of the element.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在设计视图中点击任何用户界面控件，你将在属性视图中看到其属性（见*图2.14*）。你可以编辑属性，例如所选元素的名称和值。点击属性窗口的“样式”选项卡来编辑元素的CSS样式。
- en: We have not specified the `action` attribute in the previous form. This attribute
    specifies a URL to which the form data is to be posted when the user clicks the Submit
    button. If this attribute is not specified, then the request or the form data
    would be submitted to the same page; in this case, the form data would be submitted
    to `index.jsp`. We will now write the code to handle form data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的表单中，我们没有指定`action`属性。此属性指定当用户点击“提交”按钮时，表单数据要提交到的URL。如果此属性未指定，则请求或表单数据将提交到同一页面；在这种情况下，表单数据将提交到`index.jsp`。我们现在将编写处理表单数据的代码。
- en: As mentioned in [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Introducing JEE and Eclipse*, you can write Java code and the client-side code
    (HTML, CSS, and JavaScript) in the same JSP. It is not considered good practice
    to mix Java code with HTML code, but we will do that anyway in this example to
    keep the code simpler. Later in the book, we will see how to make our code modular.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)中所述，“介绍JEE和Eclipse”，你可以在同一个JSP中编写Java代码和客户端代码（HTML、CSS和JavaScript）。将Java代码与HTML代码混合通常不被认为是好的做法，但我们将在这个例子中这样做以使代码更简单。本书的后面部分，我们将看到如何使我们的代码模块化。
- en: 'Java code is written in JSP between `<%` and `%>`; such Java code blocks in
    JSP are called **scriptlets**. You can also set page-level attributes in JSP.
    They are called **page directives** and are included between `<%@` and `%>`. The
    JSP that we created already has a page directive to set the content type of the
    page. The content type tells the browser the type of response (in this case, `html/text`)
    returned by the server. The browser displays an appropriate response based on
    the content type:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Java代码在JSP中用`<%`和`%>`编写；JSP中的这些Java代码块被称为**脚本片段**。你还可以在JSP中设置页面级属性。它们被称为**页面指令**，并包含在`<%@`和`%>`之间。我们创建的JSP已经有一个页面指令来设置页面的内容类型。内容类型告诉浏览器服务器返回的响应类型（在这种情况下，`html/text`）。浏览器根据内容类型显示适当的响应：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In JSP you have access to a number of objects to help you process and generate
    the response, as described in the following table:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSP中，你可以访问一些对象来帮助你处理和生成响应，如下表所述：
- en: '| **Object name** | **Type** |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| **对象名称** | **类型** |'
- en: '| `request` | `HttpServletRequest` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html)).
    Use this to get request parameters and other request-related data. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `request` | `HttpServletRequest` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html)).
    使用此对象获取请求参数和其他与请求相关的数据。 |'
- en: '| `response` | `HttpServletResponse` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html)).
    Use this to send a response. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `response` | `HttpServletResponse` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html)).
    使用此对象发送响应。 |'
- en: '| `out` | `JSPWriter` ([http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html](http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html)).
    Use this to generate a text response. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `out` | `JSPWriter` ([http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html](http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html)).
    使用此对象生成文本响应。 |'
- en: '| `session` | `HttpSession` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html)).
    Use this to get or put objects in the session. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `session` | `HttpSession` ([http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html](http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html)).
    使用此对象在会话中获取或放置对象。 |'
- en: '| `application` | `ServletContext` ([http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html](http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html)).
    Use this to get or put objects in the context, which are shared across all JSPs
    and servlets in the same application. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `application` | `ServletContext` ([http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html](http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html)).
    使用此对象在上下文中获取或放置对象，这些对象在同一个应用程序中的所有JSP和servlet之间共享。 |'
- en: 'In this example, we are going to make use of `request` and `out` objects. We
    will first check whether the form is submitted using the `POST` method. If true,
    we will get values of username and password fields. If the credentials are valid
    (in this example, we are going to hardcode username and the password as `admin`),
    we will print a welcome message:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将利用`request`和`out`对象。我们首先检查是否使用`POST`方法提交了表单。如果是，我们将获取用户名和密码字段的值。如果凭证有效（在这个例子中，我们将硬编码用户名为`admin`和密码），我们将打印一条欢迎信息：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have used two built-in objects in the preceding code—`request` and `out`.
    We first check whether the form was submitted—`"POST".equalsIgnoreCase(request.getMethod()`.
    Then, we check whether the submit button was used to post the form—`request.getParameter("submit")
    != null`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了两个内置对象——`request`和`out`。我们首先检查表单是否已提交——“`"POST".equalsIgnoreCase(request.getMethod())`”。然后，我们检查是否使用了提交按钮来提交表单——“`request.getParameter("submit")
    != null`”。
- en: 'We then get the username and the password by calling the `request.getParameter`
    method. To keep the code simple, we compare them with the hardcoded values. In
    the real application, you would most probably validate credentials against a database
    or some naming and folder service. If the credentials are valid, we print a message
    by using the `out` (`JSPWriter`) object. If the credentials are not valid, we
    set an error message. We will print the error message, if any, just before the
    login form:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用`request.getParameter`方法来获取用户名和密码。为了使代码简单，我们将其与硬编码的值进行比较。在实际应用程序中，您很可能会将凭证与数据库或某些命名和文件夹服务进行验证。如果凭证有效，我们将使用`out`（`JSPWriter`）对象打印一条消息。如果凭证无效，我们将设置一个错误消息。我们将在登录表单之前打印任何错误消息：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we start another Java code block by using `<%%>`. If an error message
    is not null, we display it by using the `span` tag. Notice how the value of the
    error message is printed—`<%=errMsg %>`. This is a short syntax for `<%out.print(errMsg);%>`.
    Also notice that the curly brace that started in the first Java code block is
    completed in the next and separate Java code block. Between these two code blocks
    you can add any HTML code and it will be included in the response only if the
    conditional expression in the `if` statement is evaluated to true.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过使用`<%%>`开始另一个Java代码块。如果错误消息不为空，我们将使用`span`标签显示它。注意错误消息的值是如何打印的——“`<%=errMsg
    %>`”。这是一个`<%out.print(errMsg);%>`的简写语法。同时注意，第一个Java代码块开始的大括号在下一个独立的Java代码块中完成。在这两个代码块之间，您可以添加任何HTML代码，并且只有当`if`语句中的条件表达式评估为真时，它才会包含在响应中。
- en: 'Here is the complete code of the JSP we created in this section:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们在本节中创建的JSP的完整代码：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running JSP in Tomcat
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Tomcat中运行JSP
- en: 'To run the JSP we created in the previous section in the web browser, you will
    need to deploy the application in a servlet container. We have already seen how
    to configure Tomcat in Eclipse. Make sure that Tomcat is running by checking its
    status in the Servers view of Eclipse:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Web浏览器中运行上一节中创建的JSP，您需要在servlet容器中部署应用程序。我们已经看到了如何在Eclipse中配置Tomcat。确保Tomcat正在运行，可以通过检查Eclipse的“服务器视图”中的状态来确认：
- en: '![](img/00035.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00035.jpeg)'
- en: 'Figure 2.15: Tomcat started in the Servers view'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15：在服务器视图中启动Tomcat
- en: 'There are two ways to add a project to a configured server so that the application
    can be run on the server:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将项目添加到配置的服务器，以便在服务器上运行应用程序：
- en: Right-click on the server in the Servers view and select the Add and Remove
    option. Select your project from the list on the left (Available resources) and
    click Add to move it to the Configured list. Click Finish.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“服务器视图”中右键单击服务器，选择“添加和移除”选项。从左侧的列表（可用资源）中选择您的项目，然后单击“添加”将其移动到“配置”列表。单击“完成”。
- en: '![](img/00036.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00036.jpeg)'
- en: 'Figure 2.16: Add a project to the server'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16：将项目添加到服务器
- en: The other method to add a project to the server is to right-click on the project
    in Project Explorer and select Properties. This opens the Project Properties dialog
    box. Click on Server in the list and select the server in which you want to deploy
    this project. Click OK or Apply.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目添加到服务器的另一种方法是右键单击“项目资源管理器”中的项目，选择“属性”。这将打开“项目属性”对话框。在列表中单击“服务器”，然后选择您想要部署此项目的服务器。单击“确定”或“应用”。
- en: '![](img/00037.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00037.jpeg)'
- en: 'Figure 2.17: Select server in project properties'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17：在项目属性中选择服务器
- en: In the first method, the project is immediately deployed in the server. In the
    second method, it will be deployed only when you run the project in the server.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种方法中，项目将立即在服务器上部署。在第二种方法中，只有在您在服务器上运行项目时才会部署。
- en: 'To run the application, right-click on the project in Project Explorer and
    select Run As | Run on Server. The first time you will be prompted to restart
    the server. Once the application is deployed, you will see it under the selected
    server in the Servers view:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行应用程序，在项目资源管理器中右键单击项目，然后选择“运行”|“在服务器上运行”。第一次运行时，将提示您重新启动服务器。一旦应用程序部署，您将在服务器视图中看到它：
- en: '![](img/00038.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: 'Figure 2.18: Project deployed on the server'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18：在服务器上部署的项目
- en: Enter some text other than admin in the username and password boxes
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户名和密码框中输入除 admin 之外的其他文本
- en: and click Submit. You should see the error message and the same form should
    be displayed again.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后点击提交。您应该看到错误消息，并且应该再次显示相同的表单。
- en: '![](img/00039.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: 'Figure 2.19: Project running in the built-in browser in Eclipse'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19：在 Eclipse 内置浏览器中运行的项目
- en: Now enter `admin` as username and password and then submit the form. You should
    see the welcome message.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入 `admin` 作为用户名和密码，然后提交表单。您应该看到欢迎信息。
- en: JSPs are compiled dynamically to Java classes, so if you make any changes in
    the page, in most cases, you do not have to restart the server; just refresh the
    page, and Tomcat will recompile the page if it has changed and the modified page
    will be displayed. In cases when you need to restart the server to apply your
    changes, Eclipse will prompt you if you want to restart the server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: JSPs 是动态编译成 Java 类的，所以如果您在页面上进行了任何更改，在大多数情况下，您不需要重新启动服务器；只需刷新页面，如果页面已更改，Tomcat
    将重新编译页面，并显示修改后的页面。在需要重新启动服务器以应用更改的情况下，Eclipse 将提示您是否要重新启动服务器。
- en: Using JavaBeans in JSP
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JSP 中使用 JavaBeans
- en: The JSP that we created previously does not follow JSP best practices. In general,
    it is a bad idea to have scriptlets (Java code) in JSP. In most large organizations,
    UI designer and programmer are different roles performed by different people.
    Therefore, it is recommended that JSP contains mostly markup tags so that it is
    easy for designers to work on the page design. Java code should be in separate
    classes. It also makes sense from a reusability point of view to move Java code
    out of JSP.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的 JSP 并未遵循 JSP 最佳实践。一般来说，在 JSP 中包含脚本（Java 代码）是一个不好的主意。在大多数大型组织中，UI 设计师和程序员是不同的角色，由不同的人执行。因此，建议
    JSP 主要包含标记标签，以便设计师更容易进行页面设计。Java 代码应放在单独的类中。从可重用性的角度来看，将 Java 代码移出 JSP 也是有意义的。
- en: You can delegate the processing of the business logic to JavaBeans from JSP.
    JavaBeans are simple Java objects with attributes and getters and setters methods.
    The naming convention for getter/setter methods in JavaBeans is the prefix `get`/`set`
    followed by the name of the attribute, with the first letter of each word in uppercase,
    also known as CamelCase. For example, if you have a class attribute named `firstName`,
    then the getter method will be `getFirstName` and the setter will be `setFirstName`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 JSP 将业务逻辑的处理委托给 JavaBeans。JavaBeans 是具有属性和获取器/设置器方法的简单 Java 对象。JavaBeans
    中获取器/设置器方法的命名约定是前缀 `get`/`set` 后跟属性名称，每个单词的首字母大写，也称为驼峰式命名法。例如，如果您有一个名为 `firstName`
    的类属性，则获取器方法将是 `getFirstName`，设置器将是 `setFirstName`。
- en: 'JSP has a special tag for using JavaBeans—`jsp:useBean`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: JSP 有一个用于使用 JavaBeans 的特殊标签——`jsp:useBean`：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Scope indicates the lifetime of the bean. Valid values are `application`, `page`,
    `request`, and `session`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 范围表示豆子的生命周期。有效值有 `application`、`page`、`request` 和 `session`。
- en: '| **Scope name** | **Description** |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **作用域名称** | **描述** |'
- en: '| `page` | Bean can be used only in the current page. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `page` | 豆子只能在当前页面中使用。|'
- en: '| `request` | Bean can be used in any page in the processing of the same request.
    One web request can be handled by multiple JSPs if one page forwards the request
    to another page. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `request` | 豆子可以在处理相同请求的任何页面中使用。如果一个页面将请求转发到另一个页面，一个 Web 请求可以由多个 JSP 处理。|'
- en: '| `session` | Bean can be used in the same HTTP session. The session is useful
    if your application wants to save the user data per interaction with the application,
    for example, to save items in the shopping cart in an online store application.
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `session` | 豆子可以在相同的 HTTP 会话中使用。如果您的应用程序想要在与应用程序的每次交互中保存用户数据，例如在在线商店应用程序中保存购物车中的项目，会话非常有用。|'
- en: '| `application` | Bean can be used in any page in the same web application.
    Typically, web applications are deployed in a web application container as **web
    application archive** (**WAR**) files. In the application scope, all JSPs in the
    WAR file can use JavaBeans. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `application` | Bean 可以在同一个 web 应用程序中的任何页面中使用。通常，web 应用程序作为 **web 应用程序存档**
    (**WAR**) 文件部署在 web 应用程序容器中。在应用程序范围内，WAR 文件中的所有 JSP 都可以使用 JavaBeans。|'
- en: 'We will move the code to validate users in our login example to the `JavaBean`
    class. First, we need to create a `JavaBean` class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把验证用户的代码移动到我们的登录示例中的 `JavaBean` 类。首先，我们需要创建一个 `JavaBean` 类：
- en: In Project Explorer, right-click on the `src` folder New | Package menu option.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中，右键单击 `src` 文件夹，选择 New | Package 菜单选项。
- en: Create a package named `packt.book.jee_eclipse.ch2.bean`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `packt.book.jee_eclipse.ch2.bean` 的包。
- en: Right-click on the package and select the New | Class menu option.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击包，选择 New | Class 菜单选项。
- en: Create a class named `LoginBean`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `LoginBean` 的类。
- en: 'Create two private `String` members as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建两个私有 `String` 成员：
- en: '[PRE6]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Right-click anywhere inside the class (in the editor) and select the Source
    | Generate Getters and Setters menu option:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类内部（在编辑器中）的任何位置右键单击，并选择 Source | Generate Getters and Setters 菜单选项：
- en: '![](img/00040.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00040](img/00040.jpeg)'
- en: 'Figure 2.20: Generate getters and setters'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20：生成获取器和设置器
- en: We want to generate getters and setters for all members of the class. Therefore,
    click the Select All button and select Last member from the drop-down list for
    Insertion point, because we want to insert the getters and setters after declaring
    all member variables.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望为类的所有成员生成获取器和设置器。因此，点击全选按钮，并从下拉列表中选择插入点为最后一个成员，因为我们希望在声明所有成员变量之后插入获取器和设置器。
- en: 'The `LoginBean` class should now be as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginBean` 类现在应该如下所示：'
- en: '[PRE7]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will add one more method to it, to validate username and password:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将向其中添加一个额外的验证用户名和密码的方法：
- en: '[PRE8]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This completes our JavaBean for storing user information and validation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们用于存储用户信息和验证的 JavaBean。
- en: 'We will now use this bean in our JSP and delegate the task of validating users
    to this bean. Open `index.jsp`. Replace the Java scriptlet just above the `<body>`
    tag in the preceding code with the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用这个 Bean 在我们的 JSP 中，并将验证用户的任务委托给这个 Bean。打开 `index.jsp`。将前面代码中 `<body>`
    标签上面的 Java 脚本替换为以下内容：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Before we discuss what has changed in the preceding code, note that you can
    invoke and get code assist for the attributes and values of `<jsp:*>` tags too.
    If you are not sure whether code assist is available, just press *Ctrl*/*Cmd*
    + *C*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论前面代码中的更改之前，请注意，您还可以调用并获取 `<jsp:*>` 标签的属性和值的代码辅助。如果您不确定代码辅助是否可用，只需按 *Ctrl*/*Cmd*
    + *C*。
- en: '![](img/00041.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00041](img/00041.jpeg)'
- en: 'Figure 2.21: Code assist in JSP tags'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21：JSP 标签中的代码辅助
- en: Notice that Eclipse displays code assist for the JavaBean that we just added.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Eclipse 显示了我们刚刚添加的 JavaBean 的代码辅助。
- en: 'Let''s now understand what we changed in the JSP:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在理解我们在 JSP 中做了什么更改：
- en: We created multiple scriptlets, one for declaration of the `errMsg` variable
    and two more for separate `if` blocks.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了多个脚本，一个用于声明 `errMsg` 变量，另外两个用于单独的 `if` 块。
- en: We added a `<jsp:useBean` tag in the first `if` condition. The bean is created
    when a condition in the `if` statement is true, that is, when the form is posted
    by clicking the Submit button.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在第一个 `if` 条件中添加了一个 `<jsp:useBean>` 标签。当 `if` 语句中的条件为真时，即当通过点击提交按钮提交表单时，会创建该
    Bean。
- en: 'We used the `<jsp:setProperty>` tag to set attributes of the bean:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了 `<jsp:setProperty>` 标签来设置 Bean 的属性：
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are setting values of member variables of `loginBean`. Furthermore, we are
    setting values of all the member variables by specifying `property="*"`. However,
    where do we specify values? The values are specified implicitly because we have
    named members of `LoginBean` to be the same as the fields in the form. So, the
    JSP runtime gets parameters from the `request` object and assigns values to the
    JavaBean members with the same name.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在设置 `loginBean` 的成员变量值。此外，我们通过指定 `property="*"` 来设置所有成员变量的值。然而，我们在哪里指定这些值呢？因为这些值是隐式指定的，因为我们已经将
    `LoginBean` 的成员名称命名为与表单中的字段相同的名称。因此，JSP 运行时会从 `request` 对象中获取参数，并将具有相同名称的值分配给
    JavaBean 成员。
- en: 'If names of the members of JavaBean do not match the request parameters, then
    you need to set the values explicitly:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 JavaBean 成员的名称与请求参数不匹配，那么您需要显式设置这些值：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We then checked whether the user is valid by calling `loginBean.isValidUser()`.
    The code to handle error messages hasn't changed.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过调用 `loginBean.isValidUser()` 来检查用户是否有效。处理错误信息的代码没有变化。
- en: 'To test the page, perform the following steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试页面，请执行以下步骤：
- en: Right-click on `index.jsp` in Project Explorer.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中右键点击 `index.jsp`。
- en: Select the Run As | Run on Server menu option. Eclipse will prompt you to restart
    the Tomcat server.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“运行”|“在服务器上运行”菜单选项。Eclipse 将提示您重启 Tomcat 服务器。
- en: Click the OK button to restart the server.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”按钮以重启服务器。
- en: The page will be displayed in the internal Eclipse browser. It should behave
    in the same way as in the previous example.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将在内部 Eclipse 浏览器中显示。它应该与上一个示例中的行为相同。
- en: Although we have moved validation of users to `LoginBean`, we still have a lot
    of code in Java scriptlets. Ideally, we should have as few Java scriptlets as
    possible in JSP. We still have scriptlets for checking conditions and for variable
    assignments. We can write the same code by using tags so that it is consistent
    with the remaining tag-based code in JSP and will be easier for web designers
    to work with it. This can be achieved using **JSP Standard Tag Library** (**JSTL**).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经将用户验证移动到 `LoginBean`，但我们仍然在 Java 脚本中有很多代码。理想情况下，我们应该在 JSP 中尽可能少地使用 Java
    脚本。我们仍然有用于检查条件和变量赋值的脚本。我们可以通过使用标签来编写相同的代码，这样它就与 JSP 中剩余的基于标签的代码保持一致，并且对网页设计师来说更容易工作。这可以通过使用
    **JSP 标准标签库**（**JSTL**）来实现。
- en: Using JSTL
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JSTL
- en: 'JSTL tags can be used to replace much of the Java scriptlets in JSP. JSTL tags
    are classified in five broad groups:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: JSTL 标签可以用来替换 JSP 中的大部分 Java 脚本。JSTL 标签分为五大类：
- en: '**Core**: Covers flow control and variable support among other things'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心**：包括流程控制和变量支持等'
- en: '**XML**: Tags to process XML documents'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML**：处理 XML 文档的标签'
- en: '**i18n**: Tags to support internationalization'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**i18n**：支持国际化的标签'
- en: '**SQL**: Tags to access database'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL**：访问数据库的标签'
- en: '**Functions**: Tags to perform some of the common string operations'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：执行一些常见的字符串操作'
- en: See [http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html)
    for more details on JSTL.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 JSTL 的更多详细信息，请参阅 [http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html)。
- en: 'We will modify the login JSP to use JSTL, so that there are no Java scriptlets
    in it:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改登录 JSP 以使用 JSTL，这样它就不会包含任何 Java 脚本。
- en: Download JSTL libraries for APIs and their implementation. At the time of writing,
    the latest `.jar` files are `javax.servlet.jsp.jstl-api-1.2.1.jar` ([http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar](http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar))
    and `javax.servlet.jsp.jstl-1.2.1.jar` ([http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar](http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar)).
    Make sure that these files are copied to `WEB-INF/lib`. All `.jar` files in this
    folder are added to the `classpath` of the web application.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 JSTL 库及其 API 实现。在撰写本文时，最新的 `.jar` 文件是 `javax.servlet.jsp.jstl-api-1.2.1.jar`
    ([http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar](http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar))
    和 `javax.servlet.jsp.jstl-1.2.1.jar` ([http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar](http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar))。确保将这些文件复制到
    `WEB-INF/lib`。此文件夹中的所有 `.jar` 文件都添加到 Web 应用的 `classpath` 中。
- en: 'We need to add a declaration for JSTL in our JSP. Add the following `taglib`
    declaration below the first page declaration (`<%@ page language="java" ...>`):'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在我们的 JSP 中添加 JSTL 的声明。在第一个页面声明（`<%@ page language="java" ...>`）下方添加以下 `taglib`
    声明：
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `taglib` declaration contains the URL of the `tag` library and `prefix`.
    All tags in the `tag` library are accessed using `prefix` in JSP.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`taglib` 声明包含 `tag` 库的 URL 和 `prefix`。在 JSP 中使用 `prefix` 访问 `tag` 库中的所有标签。'
- en: 'Replace `<%String errMsg = null; %>` with the `set` tag of JSTL:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `<%String errMsg = null; %>` 替换为 JSTL 的 `set` 标签：
- en: '[PRE13]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have enclosed the value in `${}`. This is called **Expression Language** (**EL**).
    You enclose the Java expression in JSTL in `${}`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将值放在 `${}` 中。这被称为 **表达式语言**（**EL**）。在 JSTL 中，您将 Java 表达式放在 `${}` 中。
- en: 'Replace the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换以下代码：
- en: '[PRE14]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With the `if` tag of JSTL:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JSTL 的 `if` 标签：
- en: '[PRE15]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `request` object is accessed in the JSTL tag via `pageContext`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JSTL 标签中，通过 `pageContext` 访问 `request` 对象。
- en: 'JavaBean tags go within the `if` tag. There is no change in this code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaBean 标签位于 `if` 标签内。这段代码没有变化：
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We then add tags to call `loginBean.isValidUser()` and based on its return
    value, to set messages. However, we can''t use the `if` tag of JSTL here, because
    we need to write the `else` statement too. JSTL does not have a tag for `else`.
    Instead, for multiple `if...else` statements, you need to use the `choose` statement,
    which is somewhat similar to the `switch` statement:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接着添加标签来调用 `loginBean.isValidUser()`，并根据其返回值设置消息。然而，我们在这里不能使用 JSTL 的 `if` 标签，因为我们还需要写
    `else` 语句。JSTL 没有用于 `else` 的标签。相反，对于多个 `if...else` 语句，你需要使用 `choose` 语句，这与 `switch`
    语句有些相似：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the user credentials are not valid, we set the error message. Or (in the `c:otherwise` tag),
    we print the welcome message and set the `displayForm` flag to `false`. We don't
    want to display the login form if the user is successfully logged in.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户凭据无效，我们设置错误信息。或者（在 `c:otherwise` 标签中），我们打印欢迎信息并将 `displayForm` 标志设置为 `false`。如果用户成功登录，我们不希望显示登录表单。
- en: 'We will now replace another `if` scriptlet code by `<%if%>` tag. Replace the
    following code snippet:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将替换另一个 `if` 脚本代码为 `<%if%>` 标签。替换以下代码片段：
- en: '[PRE18]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the following code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码：
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that we have used the `out` tag to print an error message.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了 `out` 标签来打印错误信息。
- en: 'Finally, we enclose the entire `<body>` content in another JSTL `if` tag:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将整个 `<body>` 内容包裹在另一个 JSTL `if` 标签中：
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is the complete source code of the JSP:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完整的 JSP 源代码：
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, there are no Java scriptlets in the preceding code. All of them,
    from the previous code, are replaced by tags. This makes it easy for web designers
    to edit the page without worrying about Java scriptlets.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，前面的代码中没有 Java 脚本。所有这些，从之前的代码，都被标签所替代。这使得网页设计师可以轻松编辑页面，而不用担心 Java 脚本。
- en: One last note before we leave the topic of JSP. In real-world applications,
    you would probably forward the request to another page after the user successfully
    logs in, instead of just displaying a welcome message on the same page. You could
    use the `<jsp:forward>` tag to achieve this.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们离开 JSP 主题之前，有一点需要注意。在实际应用中，用户成功登录后，你可能会将请求转发到另一个页面，而不是在同一个页面上只显示欢迎信息。你可以使用
    `<jsp:forward>` 标签来实现这一点。
- en: Java Servlet
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Servlet
- en: 'We will now see how to implement a login application using Java Servlet. Create
    a new **Dynamic Web Application** in Eclipse as described in the previous section.
    We will call this `LoginServletApp`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到如何使用 Java Servlet 实现登录应用程序。在 Eclipse 中创建一个新的 **动态 Web 应用程序**，如前所述。我们将称这个为
    `LoginServletApp`：
- en: Right-click on the `src` folder under `Java Resources` for the project in Project
    Explorer. Select the New | Servlet menu option.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中，在 `Java Resources` 下的 `src` 文件夹上右键单击项目。选择“新建 | Servlet”菜单选项。
- en: In the Create Servlet wizard, enter package name as `packt.book.jee_eclipse.book.servlet`
    and class name as `LoginServlet`. Then, click Finish.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建 Servlet 向导中，输入包名为 `packt.book.jee_eclipse.book.servlet`，类名为 `LoginServlet`。然后，点击完成。
- en: '![](img/00042.jpeg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: 'Figure 2.22: Create Servlet wizard'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22：创建 Servlet 向导
- en: 'The servlet wizard creates the class for you. Notice the `@WebServlet("/LoginServlet")`
    annotation just above the class declaration. Before JEE 5, you had to declare
    servlets in `web.xml` in the `WEB-INF` folder. You can still do that, but you
    can skip this declaration if you use proper annotations. Using `WebServlet`, we
    are telling the servlet container that `LoginServlet` is a servlet, and we are
    mapping it to the `/LoginServlet` URL path. Thus, we are avoiding the following
    two entries in `web.xml` by using this annotation: `<servlet>` and `<servlet-mapping>`.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Servlet 向导为您创建了类。注意类声明上方有 `@WebServlet("/LoginServlet")` 注解。在 JEE 5 之前，你必须在
    `WEB-INF` 文件夹中的 `web.xml` 中声明 servlet。你仍然可以这样做，但如果你使用适当的注解，你可以跳过这个声明。使用 `WebServlet`，我们告诉
    servlet 容器 `LoginServlet` 是一个 servlet，并且我们将其映射到 `/LoginServlet` URL 路径。因此，我们通过使用这个注解避免了
    `web.xml` 中的以下两个条目：`<servlet>` 和 `<servlet-mapping>`。
- en: 'We will now change the mapping from `/LoginServlet` to just `/login`. Therefore,
    we will modify the annotation as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将映射从 `/LoginServlet` 更改为 `/login`。因此，我们将修改注解如下：
- en: '[PRE22]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The wizard also created the `doGet` and `doPost` methods. These methods are
    overridden from the following base class: `HttpServlet`. The `doGet` method is
    called to create response for the `Get` request and `doPost` is called to create
    a response for the `Post` request.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工具程序还创建了`doGet`和`doPost`方法。这些方法是从以下基类中重写的：`HttpServlet`。`doGet`方法被调用以创建对`Get`请求的响应，而`doPost`被调用以创建对`Post`请求的响应。
- en: We will create a login form in the `doGet` method and process the form data
    (`Post`) in the `doPost` method. However, because `doPost` may need to display
    the form, in case user credentials are invalid, we will write a `createForm` method,
    which could be called from both `doGet` and `doPost`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`doGet`方法中创建一个登录表单，并在`doPost`方法中处理表单数据（`Post`）。然而，因为`doPost`可能需要显示表单，以防用户凭证无效，我们将编写一个`createForm`方法，该方法可以从`doGet`和`doPost`中调用。
- en: 'Add a `createForm` method as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个如下所示的`createForm`方法：
- en: '[PRE23]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will now modify a `doGet` method to call a `createForm` method and return
    the response:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将修改一个`doGet`方法以调用`createForm`方法并返回响应：
- en: '[PRE24]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We call the `getWrite` method on the `response` object and write the form content
    to it by calling the `createForm` function. Note that when we display the form,
    initially, there is no error message, so we pass a `null` argument to `createForm`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`response`对象上调用`getWrite`方法，并通过调用`createForm`函数将表单内容写入其中。请注意，当我们显示表单时，最初没有错误信息，因此我们传递一个`null`参数给`createForm`。
- en: 'We will modify `doPost` to process the form content when the user posts the
    form by clicking the Submit button:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将修改`doPost`以处理用户通过点击提交按钮提交的表单内容：
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We first get username and password from the `request` object by calling the `request.getParameter`
    method. If the credentials are valid, we add a welcome message to the `response`
    string; or else, we call `createForm` with an error message and add a return value
    (markup for the form) to the `response` string.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过调用`request.getParameter`方法从`request`对象中获取用户名和密码。如果凭证有效，我们在`response`字符串中添加一条欢迎信息；否则，我们调用带有错误信息的`createForm`方法，并将表单的标记（表单的标记）添加到`response`字符串中。
- en: Finally, we get the `Writer` object from the `response` string and write the
    response.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从`response`字符串中获取`Writer`对象，并写入响应。
- en: Right-click on the `LoginServlet.java` file in Project Explorer and select the Run
    As | Run on Server option. We have not added this project to the Tomcat server.
    Therefore, Eclipse will ask if you want to use the configured server to run this
    servlet. Click the Finish button of the wizard.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中右键单击`LoginServlet.java`文件，然后选择“运行方式 | 在服务器上运行”选项。我们尚未将此项目添加到Tomcat服务器。因此，Eclipse将询问您是否要使用配置的服务器运行此servlet。点击向导的“完成”按钮。
- en: Tomcat needs to restart because a new web application is deployed in the server.
    Eclipse will prompt you to restart the server. Click OK.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于服务器上部署了新的Web应用程序，Tomcat需要重新启动。Eclipse将提示您重新启动服务器。点击“确定”。
- en: 'When the servlet is run in the internal browser of Eclipse, notice the URL;
    it ends with `/login`, which is the mapping that we specified in the servlet annotation.
    However, you will observe that instead of rendering the HTML form, the page displays
    the markup text. This is because we missed an important setting on the `response`
    object. We did not tell the browser the type of content we are returning, so the
    browser assumed it to be text and rendered it as plain text. We need to tell the
    browser that it is HTML content. We do this by calling `response.setContentType("text/html")`
    in both the `doGet` and the `doPost` methods. Here is the complete source code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Eclipse的内部浏览器中运行servlet时，请注意URL；它以`/login`结尾，这是我们已在servlet注解中指定的映射。然而，您将观察到，页面没有渲染HTML表单，而是显示了标记文本。这是因为我们在`response`对象上遗漏了一个重要的设置。我们没有告诉浏览器我们返回的内容类型，所以浏览器假设它是文本，并以纯文本的形式渲染它。我们需要告诉浏览器它是HTML内容。我们通过在`doGet`和`doPost`方法中调用`response.setContentType("text/html")`来实现这一点。以下是完整的源代码：
- en: '[PRE26]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, it is not very convenient to write HTML markup in servlet. Therefore,
    if you are creating a page with a lot of HTML markup, then it is better to use
    JSP or plain HTML. Servlets are good to process requests that do not need to generate
    too much markup, for example, controllers in **Model-View-Controller** (**MVC**)
    frameworks, for processing requests that generate a non-text response, or for
    creating a web service or WebSocket endpoints.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在servlet中编写HTML标记并不太方便。因此，如果您正在创建一个包含大量HTML标记的页面，那么使用JSP或纯HTML会更好。Servlets适用于处理不需要生成太多标记的请求，例如，在**模型-视图-控制器**（**MVC**）框架中的控制器，处理生成非文本响应的请求，或创建Web服务或WebSocket端点。
- en: Creating WAR
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建WAR
- en: Thus far, we have been running our web application from Eclipse, which does
    all the work of deploying the application to the Tomcat server. This works fine
    during development, but when you want to deploy it to test or production servers,
    you need to create a **web application archive** (**WAR**). We will see how to
    create a WAR from Eclipse. However, first we will un-deploy the existing applications
    from Tomcat.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在Eclipse中运行我们的Web应用程序，它负责将应用程序部署到Tomcat服务器。这在开发过程中工作得很好，但当你想要将其部署到测试或生产服务器时，你需要创建一个**Web应用程序存档**（**WAR**）。我们将看到如何从Eclipse创建WAR。然而，首先我们将从Tomcat中取消部署现有应用程序。
- en: 'Go to the Servers view, select the application, and right-click and select
    the Remove option:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往“服务器视图”，选择应用程序，然后右键单击并选择“移除”选项：
- en: '![](img/00043.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00043.jpeg)'
- en: Figure 2.23 Un-deploy a web application from the server
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.23 从服务器取消部署Web应用程序
- en: 'Then, right-click on the project in Project Explorer and select Export | WAR
    file. Select the destination for the WAR file:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在项目资源管理器中右键单击项目，选择导出 | WAR文件。选择WAR文件的目标位置：
- en: '![](img/00044.jpeg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00044.jpeg)'
- en: Figure 2.24 Export WAR
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.24 导出WAR
- en: To deploy the WAR file to Tomcat, copy it to the `<tomcat_home>/webapps` folder.
    Then start the server if it is not already running. If Tomcat is already running,
    you don't need to restart it.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要将WAR文件部署到Tomcat，将其复制到`<tomcat_home>/webapps`文件夹。然后如果服务器尚未运行，请启动服务器。如果Tomcat已经运行，则不需要重新启动它。
- en: Tomcat monitors the `webapps` folder and any WAR file copied to it is automatically
    deployed. You can verify this by opening the URL of your application in the browser,
    for example, `http://localhost:8080/LoginServletApp/login`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat监视`webapps`文件夹，并将任何复制到其中的WAR文件自动部署。您可以通过在浏览器中打开应用程序的URL来验证此操作，例如，`http://localhost:8080/LoginServletApp/login`。
- en: JavaServer Faces
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaServer Faces
- en: 'When working with JSP, we saw that it is not a good idea to mix scriptlets
    with the HTML markup. We solved this problem by using JavaBean. JavaServer Faces
    takes this design further. In addition to supporting JavaBeans, JSF provides built-in
    tags for HTML user controls, which are context aware, can perform validation,
    and can preserve the state between requests. We will now create the login application
    using JSF:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用JSP时，我们看到了将脚本片段与HTML标记混合不是一个好主意。我们通过使用JavaBean解决了这个问题。JavaServer Faces将这种设计进一步发展。除了支持JavaBeans之外，JSF还提供了用于HTML用户控制的内置标签，这些标签是上下文感知的，可以执行验证，并且可以在请求之间保留状态。我们现在将使用JSF创建登录应用程序：
- en: Create a dynamic web application in Eclipse; let's name it `LoginJSFApp`. In
    the last page of the wizard, make sure that you check the Generate web.xml deployment
    descriptor box.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个动态Web应用程序；让我们称它为`LoginJSFApp`。在向导的最后一步，确保勾选“生成web.xml部署描述符”复选框。
- en: Download JSF libraries from [https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar](https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar)
    and copy them to the `WEB-INF/lib` folder in your project.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar](https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar)下载JSF库，并将它们复制到项目中的`WEB-INF/lib`文件夹。
- en: JSF follows the MVC pattern. In the MVC pattern, the code to generate user interface
    (view) is separate from the container of the data (model). The controller acts
    as the interface between the view and the model. It selects the model for processing
    a request on the basis of the configuration, and once the model processes the
    request, it selects the view to be generated and returned to the client, on the
    basis of the result of the processing in the model. The advantage of MVC is that
    there is a clear separation of the UI and the business logic (which requires a
    different set of expertise) so that they can be developed independently, to a
    large extent. In JSP the implementation of MVC is optional, but JSF enforces the
    MVC design.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSF遵循MVC模式。在MVC模式中，生成用户界面（视图）的代码与数据容器（模型）是分开的。控制器作为视图和模型之间的接口。它根据配置选择模型来处理请求，一旦模型处理了请求，它根据模型处理的结果选择要生成的视图并返回给客户端。MVC的优点是UI和业务逻辑（需要不同的专业知识）有明确的分离，因此它们可以独立开发，在很大程度上。在JSP中，MVC的实现是可选的，但JSF强制执行MVC设计。
- en: Views are JSF created as `xhtml` files. The controller is a servlet from the
    JSF library and models are **managed beans** (JavaBeans).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是作为`xhtml`文件创建的JSF。控制器是JSF库中的servlet，模型是**管理Bean**（JavaBean）。
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that you can get code assist when creating the preceding elements by pressing
    *Ctrl*/*Cmd* + *C*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在创建前面的元素时，按*Ctrl*/*Cmd* + *C*可以获取代码辅助。
- en: You can specify any name as `servlet-name`; just make sure that you use the
    same name in `servlet-mapping`. The class for the servlet is `javax.faces.webapp.FacesServlet`,
    which is in the JAR file that we downloaded as the JSF library and copied to `WEB-INF/lib`.
    Furthermore, we have mapped any request ending with `.xhtml` to this servlet.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为`servlet-name`指定任何名称；只需确保在`servlet-mapping`中使用相同的名称。servlet的类为`javax.faces.webapp.FacesServlet`，它位于我们下载作为JSF库并复制到`WEB-INF/lib`的JAR文件中。此外，我们将所有以`.xhtml`结尾的请求映射到这个servlet上。
- en: 'Next, we will create a managed bean for our login page. This is the same as
    JavaBean that we had created earlier, but with the addition of JSF-specific annotations:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的登录页面创建一个管理Bean。这与我们之前创建的JavaBean相同，但增加了JSF特定的注解：
- en: Right-click on the `src` folder under `Java Resources` for the project in Project
    Explorer.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中，在`Java Resources`下的`src`文件夹上右键单击。
- en: Select the New | Class menu option.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“新建 | 类”菜单选项。
- en: Create JavaBean, `LoginBean`, as described in the *Using JavaBeans in JSP* section
    of this chapter.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照本章中“在JSP中使用JavaBeans”部分所述，创建JavaBean `LoginBean`。
- en: Create two members for `userName` and `password`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`userName`和`password`创建两个成员。
- en: 'Create the getters and setters for them. Then, add two annotations as follows:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为它们创建getter和setter。然后，添加以下两个注解：
- en: '[PRE29]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: (You can get code assist for annotations too. Type `@` and press *Ctrl*/*Cmd*
    + *C*. Code assist works for the annotation `key-value` attribute pairs too, for
    example, for the `name` attribute of the `ManagedBean` annotation).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: （您也可以在创建前面的元素时通过按*Ctrl*/*Cmd* + *C*来获取代码辅助。代码辅助也适用于注解的`key-value`属性对，例如，对于`ManagedBean`注解的`name`属性）。
- en: 'Create a new file called `index.xhtml` inside the `WebContent` folder of the
    project by selecting the File | New | File menu option. When using JSF, you need
    to add a few namespace declarations at the top of the file:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择“文件 | 新建 | 文件”菜单选项，在项目的`WebContent`文件夹内创建一个名为`index.xhtml`的新文件。当使用JSF时，您需要在文件的顶部添加一些命名空间声明：
- en: '[PRE30]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, we are declaring namespaces for JSF built-in `tag` libraries. We will
    access tags in the core JSF `tag` library with the prefix `f` and HTML tags with
    the prefix `h`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在声明JSF内置`tag`库的命名空间。我们将使用前缀`f`访问核心JSF `tag`库中的标签，并使用前缀`h`访问HTML标签。
- en: 'Add the title and start the `body` tag:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加标题并开始`body`标签：
- en: '[PRE31]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are corresponding JSF tags for the `head` and the `body`, but we do not
    use any attributes specific to JSF; therefore, we have used simple HTML tags.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`head`和`body`，有相应的JSF标签，但我们没有使用任何特定的JSF属性；因此，我们使用了简单的HTML标签。
- en: 'We then add the code to display the error message, if it is not null:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加代码来显示错误消息，如果它不为空：
- en: '[PRE32]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, we use a tag specific to JSF and expression language to display the value
    of the error message. The `OutputText` tag is similar to the `c:out` tag that
    we saw in JSTL. We have also added a condition to render it only if the error
    message in the managed bean is not `null`. Additionally, we have set the color
    of this output text.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用JSF和表达式语言特定的标签来显示错误消息的值。`OutputText`标签类似于我们在JSTL中看到的`c:out`标签。我们还添加了一个条件，仅在托管Bean中的错误消息不是`null`时渲染它。此外，我们还设置了此输出文本的颜色。
- en: 'We have not added the `errorMsg` member to the managed bean yet. Therefore,
    let''s add the declaration, the getter, and the setter. Open the `LoginBean` class
    and add the following code:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有将`errorMsg`成员添加到托管Bean中。因此，让我们添加声明、获取器和设置器。打开`LoginBean`类并添加以下代码：
- en: '[PRE33]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that we access the managed bean in JSF by using value of the `name` attribute
    of the `ManagedBean` annotation. Furthermore, unlike JavaBean in JSP, we do not
    create it by using the `<jsp:useBean>` tag. The JSF runtime creates the bean if
    it is not already there in the required scope, in this case, the `Request` scope.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们通过使用`ManagedBean`注解的`name`属性的值来访问JSF中的托管Bean。此外，与JSP中的JavaBean不同，我们不是通过`<jsp:useBean>`标签来创建它的。如果它不在所需的范围内，JSF运行时会创建Bean，在这个例子中，是`Request`范围。
- en: 'Let''s go back to editing `index.xhtml`. We will now add the following form:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到编辑`index.xhtml`。我们现在将添加以下表单：
- en: '[PRE34]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Many things are happening here. First, we have used the `inputText` tag of JSF
    to create textboxes for username and password. We have set their values with the
    corresponding members of `loginBean`. We have used the `commandButton` tag of
    JSF to create a Submit button. When the user clicks the Submit button, we have
    set it to call the `loginBean.validate` method (using the `action` attribute).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了很多事情。首先，我们使用了JSF的`inputText`标签来创建用户名和密码的文本框。我们使用`loginBean`的相应成员设置它们的值。我们使用了JSF的`commandButton`标签来创建一个提交按钮。当用户点击提交按钮时，我们将其设置为调用`loginBean.validate`方法（使用`action`属性）。
- en: 'We haven''t defined a `validate` method in `loginBean`, so let''s add that.
    Open the `LoginBean` class and add the following code:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有在`loginBean`中定义一个`validate`方法，所以让我们添加它。打开`LoginBean`类并添加以下代码：
- en: '[PRE35]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that the `validate` method returns a string. How is the return value used?
    It is used for navigation purposes in JSF. The JSF runtime looks for the JSF file
    with the same name as the string value returned after evaluating the expression
    in the `action` attribute of `commandButton`. In the `validate` method, we return
    `welcome` if the user credentials are valid. In this case we are telling the JSF
    runtime to navigate to `welcome.xhtml`. If the credentials are invalid, we set
    the error message and return `null`, in which case, the JSF runtime displays the
    same page.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`validate`方法返回一个字符串。返回值是如何使用的？它用于JSF中的导航目的。JSF运行时会查找与在`commandButton`的`action`属性中评估的表达式返回的字符串值相同的JSF文件。在`validate`方法中，如果用户凭据有效，我们返回`welcome`。在这种情况下，我们告诉JSF运行时导航到`welcome.xhtml`。如果凭据无效，我们设置错误消息并返回`null`，在这种情况下，JSF运行时会显示同一页面。
- en: 'We will now add the `welcome.xhml` page. It simply contains the welcome message:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加`welcome.xhml`页面。它只包含欢迎消息：
- en: '[PRE36]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is the complete source code of `index.html`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`index.html`的完整源代码：
- en: '[PRE37]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here is the source code of the `LoginBean` class:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`LoginBean`类的源代码：
- en: '[PRE38]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To run the application, right-click on `index.xhtml` in Project Explorer and
    select the Run As | Run on Server option.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，在项目资源管理器中右键单击`index.xhtml`，然后选择“运行”|“在服务器上运行”选项。
- en: JSF can do much more than what we have seen in this small example—it has the
    support to validate an input and create page templates too. However, these topics
    are beyond the scope of this book.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: JSF可以做的不仅仅是我们在这个小示例中看到的内容——它支持验证输入和创建页面模板。然而，这些主题超出了本书的范围。
- en: Visit [http://docs.oracle.com/cd/E11035_01/workshop102/webapplications/jsf/jsf-app-tutorial/Introduction.html](http://docs.oracle.com/cd/E11035_01/workshop102/webapplications/jsf/jsf-app-tutorial/Introduction.html)
    for a tutorial on JSF.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://docs.oracle.com/cd/E11035_01/workshop102/webapplications/jsf/jsf-app-tutorial/Introduction.html](http://docs.oracle.com/cd/E11035_01/workshop102/webapplications/jsf/jsf-app-tutorial/Introduction.html)以获取JSF教程。
- en: Using Maven for project management
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven进行项目管理
- en: In the projects that we have created thus far in this chapter, we have managed
    many project management tasks, such as downloading libraries on which our project
    depends, adding them to the appropriate folder so that the web application can
    find it, and exporting the project to create the WAR file for deployment. These
    are just some of the project management tasks that we have performed so far, but
    there are many more, which we will see in the subsequent chapters. It helps to
    have a tool do many of the project management tasks for us so that we can focus
    on application development. There are some well-known build management tools available
    for Java, for example, Apache Ant ([http://ant.apache.org/](http://ant.apache.org/))
    and Maven ([http://maven.apache.org/](http://maven.apache.org/)).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们创建的项目中，我们已经管理了许多项目管理任务，例如下载项目依赖的库，将它们添加到适当的文件夹中以便Web应用程序可以找到它，以及导出项目以创建部署的WAR文件。这些只是我们迄今为止执行的一些项目管理任务，但还有很多更多，我们将在后续章节中看到。有一个工具为我们执行许多项目管理任务是有帮助的，这样我们就可以专注于应用程序开发。Java有一些知名的构建管理工具可用，例如Apache
    Ant ([http://ant.apache.org/](http://ant.apache.org/)) 和 Maven ([http://maven.apache.org/](http://maven.apache.org/))).
- en: In this section, we will see how to use Maven as a project management tool.
    By following the convention for creating the project structure and allowing projects
    to define the hierarchy, Maven makes project management easier than Ant. Ant is
    primarily a build tool, whereas Maven is a project management tool, which does
    build management too. See [http://maven.apache.org/what-is-maven.html](http://maven.apache.org/what-is-maven.html)
    to understand what Maven can do.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何将Maven用作项目管理工具。通过遵循创建项目结构的惯例并允许项目定义层次结构，Maven使得项目管理比Ant更简单。Ant主要是一个构建工具，而Maven是一个项目管理工具，它也进行构建管理。请参阅[http://maven.apache.org/what-is-maven.html](http://maven.apache.org/what-is-maven.html)了解Maven能做什么。
- en: In particular, Maven simplifies dependency management. In the JSF project earlier
    in this chapter, we first downloaded the appropriate `.jar` files for JSF and
    copied them to the `lib` folder. Maven can automate this. You can configure Maven
    settings in `pom.xml`. **POM** stands for **Project Object Model**.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是Maven简化了依赖管理。在本章前面的JSF项目中，我们首先下载了JSF所需的相应`.jar`文件，并将它们复制到`lib`文件夹中。Maven可以自动化这个过程。您可以在`pom.xml`中配置Maven设置。**POM**代表**项目对象模型**。
- en: Before we use Maven, it is important to understand how it works. Maven uses
    repositories. Repositories contain plugins for many well-known libraries/projects.
    A plugin includes the project configuration information, `.jar` files required
    to use this project in your own project, and any other supporting artifacts. The
    default Maven repository is a collection of plugins. You can find the list of
    plugins in the default Maven repository at [http://maven.apache.org/plugins/index.html](http://maven.apache.org/plugins/index.html).
    You can also browse the content of the Maven repository at [http://search.maven.org/#browse](http://search.maven.org/#browse).
    Maven also maintains a local repository on your machine. This local repository
    contains only those plugins that your projects have specified dependencies on.
    On Windows, you will find the local repository at `C:/Users /<username>.m2`, and
    on macOS X, it is located at `~/.m2`.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用Maven之前，了解它是如何工作的是非常重要的。Maven使用仓库。仓库包含许多知名库/项目的插件。一个插件包括项目配置信息、在您的项目中使用此项目所需的`.jar`文件以及任何其他支持性工件。默认的Maven仓库是一个插件集合。您可以在默认的Maven仓库中找到插件列表，网址为[http://maven.apache.org/plugins/index.html](http://maven.apache.org/plugins/index.html)。您还可以浏览Maven仓库的内容，网址为[http://search.maven.org/#browse](http://search.maven.org/#browse)。Maven还在您的机器上维护一个本地仓库。这个本地仓库只包含您的项目指定的依赖项的插件。在Windows上，您可以在`C:/Users/<username>.m2`找到本地仓库，而在macOS
    X上，它位于`~/.m2`。
- en: You define plugins on which your project depends in the `dependencies` section
    of `pom.xml` (we will see the structure of `pom.xml` shortly when we create a
    Maven project). For example, we can specify a dependency on JSF. When you run
    the Maven tool, it first inspects all dependencies in `pom.xml`. It then checks
    whether the dependent plugins with the required versions are already downloaded
    in the local repository. If not, it downloads them from the central (remote) repository.
    You can also specify repositories to look in. If you do not specify any repository,
    then dependencies are searched in the central Maven repository.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 `pom.xml` 的 `dependencies` 部分定义了项目所依赖的插件（我们将在创建 Maven 项目时稍后看到 `pom.xml` 的结构）。例如，我们可以指定对
    JSF 的依赖。当您运行 Maven 工具时，它首先检查 `pom.xml` 中的所有依赖项。然后，它会检查所需版本的依赖插件是否已经下载到本地仓库中。如果没有，它会从中央（远程）仓库下载它们。您也可以指定要查找的仓库。如果您没有指定任何仓库，则依赖项将在中央
    Maven 仓库中搜索。
- en: We will create a Maven project and explore `pom.xml` in more detail. However,
    if you are curious to know what `pom.xml` is, then visit [http://maven.apache.org/pom.html#What_is_the_POM](http://maven.apache.org/pom.html#What_is_the_POM).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 Maven 项目并更详细地探索 `pom.xml`。然而，如果您想了解 `pom.xml` 是什么，请访问 [http://maven.apache.org/pom.html#What_is_the_POM](http://maven.apache.org/pom.html#What_is_the_POM)。
- en: Eclipse JEE version has Maven built-in, so you don't need to download it. However,
    if you plan to use Maven from outside Eclipse, then download it from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse JEE 版本已内置 Maven，因此您不需要下载它。但是，如果您计划在 Eclipse 外部使用 Maven，则可以从 [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi)
    下载它。
- en: Maven views and preferences in Eclipse JEE
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse JEE 中的 Maven 视图和首选项
- en: 'Before we create a Maven project, let''s explore the views and preferences
    specific to Maven in Eclipse:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建 Maven 项目之前，让我们探索 Eclipse 中特定的 Maven 视图和首选项：
- en: Select the Window | Show View | Other... menu.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Window | Show View | Other... 菜单。
- en: 'Type `Maven` in the filter box. You will see two views for Maven:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器框中输入 `Maven`。您将看到两个 Maven 视图：
- en: '![](img/00045.jpeg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: 'Figure 2.25: Maven views'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25：Maven 视图
- en: Select Maven Repositories view and click OK. This view is opened in the bottom
    tab window of Eclipse. You can see the location of the local and remote repositories.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Maven Repositories 视图并点击 OK。此视图将在 Eclipse 底部选项卡窗口中打开。您可以看到本地和远程仓库的位置。
- en: 'Right-click on a global repository to see the options to index the repository:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击全局仓库以查看索引仓库的选项：
- en: '![](img/00046.jpeg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: 'Figure 2.26: The Maven Repositories view'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26：Maven 仓库视图
- en: 'Open Eclipse Preferences and type `Maven` in the filter box to see all the
    Maven preferences:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Eclipse 首选项，并在过滤器框中输入 `Maven` 以查看所有 Maven 首选项：
- en: '![](img/00047.jpeg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: 'Figure 2.27: Maven preferences'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.27：Maven 首选项
- en: You should set the Maven preferences to refresh repository indexes on startup,
    so that the latest libraries are available when you add dependencies to your project
    (we will learn how to add dependencies shortly).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 您应将 Maven 首选项设置为在启动时刷新仓库索引，以便在您向项目添加依赖项时可以使用最新的库（我们将在稍后学习如何添加依赖项）。
- en: 'Click on the Maven node in Preferences and set the following options:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在首选项中点击 Maven 节点并设置以下选项：
- en: '![](img/00048.jpeg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: 'Figure 2.28: Maven preferences for updating indexes on startup'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.28：启动时更新索引的 Maven 首选项
- en: Creating a Maven project
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Maven 项目
- en: 'In the following steps, we will see how to create a Maven project in Eclipse:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将看到如何在 Eclipse 中创建 Maven 项目：
- en: 'Select the New | Maven Project menu:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 New | Maven Project 菜单：
- en: '![](img/00049.jpeg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: 'Figure 2.29: Maven New Project wizard'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.29：Maven 新建项目向导
- en: 'Accept all default options and click Next. Type `webapp` in the filter box
    and select maven-archetype-webapp:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受所有默认选项并点击 Next。在过滤器框中输入 `webapp` 并选择 maven-archetype-webapp：
- en: '![](img/00050.jpeg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: 'Figure 2.30: New Maven project - select archetype'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.30：新建 Maven 项目 - 选择原型
- en: Maven archetype
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 原型
- en: We selected maven-archetype-webapp in the preceding wizard. An archetype is
    a project template. When you use an archetype for your project, all the dependencies
    and other Maven project configurations defined in the template (archetype) are
    imported into your project.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的向导中，我们选择了 maven-archetype-webapp。原型是一个项目模板。当您使用原型创建项目时，模板（原型）中定义的所有依赖项和其他
    Maven 项目配置都将导入到您的项目中。
- en: See more information about Maven archetype at [http://maven.apache.org/guides/introduction/introduction-to-archetypes.html](http://maven.apache.org/guides/introduction/introduction-to-archetypes.html).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Maven原型的信息请参阅[http://maven.apache.org/guides/introduction/introduction-to-archetypes.html](http://maven.apache.org/guides/introduction/introduction-to-archetypes.html)。
- en: 'Continuing with the New Maven Project wizard, click on Next. In the Group Id
    field, enter `packt.book.jee_eclipse`. In the Artifact Id field, enter `maven_jsf_web_app`:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用New Maven Project向导，点击Next。在Group Id字段中输入`packt.book.jee_eclipse`。在Artifact
    Id字段中输入`maven_jsf_web_app`：
- en: '![](img/00051.jpeg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00051.jpeg)'
- en: 'Figure 2.31: New Maven project - archetype parameters'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.31：新建Maven项目 - 原型参数
- en: Click on Finish. A `maven_jsf_web_app` project is added in Project Explorer.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Finish。在项目资源管理器中添加了一个`maven_jsf_web_app`项目。
- en: Exploring the POM
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索POM
- en: 'Open `pom.xml` in the editor and go to the pom.xml tab. The file should have
    the following content:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中打开`pom.xml`文件并切换到pom.xml标签页。文件应包含以下内容：
- en: '[PRE39]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s have a look at the different tags in detail, that are used in the preceding
    code snippet:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看前面代码片段中使用的不同标签：
- en: '`modelVersion`: This in the `pom.xml` file is the version of Maven.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modelVersion`: 在`pom.xml`文件中，这代表Maven的版本。'
- en: '`groupId`: This is the common ID used in the business unit or organization
    under which projects are grouped together. Although it is not necessary to use
    the package structure format for group ID, it is generally used.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`: 这是用于将项目分组在一起的业务单元或组织中的通用ID。尽管使用包结构格式对于组ID不是必需的，但它通常被使用。'
- en: '`artifactId`: This is the project name.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`: 这是项目名称。'
- en: '`version`: This is version number of the project. Version numbers are important
    when specifying dependencies. You can have multiple versions of a project, and
    you can specify different version dependencies in different projects. Maven also
    appends the version number to JAR, WAR, or EAR files that it creates for the project.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: 这是项目的版本号。在指定依赖项时，版本号很重要。你可以有一个项目的多个版本，并且可以在不同的项目中指定不同的版本依赖项。Maven还会将其创建的项目JAR、WAR或EAR文件的版本号附加到其中。'
- en: '`packaging`: This tells Maven what kind of final output we want when the project
    is built. In this book, we will be using JAR, WAR, and EAR packaging types, although
    more types exist.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packaging`: 这告诉Maven在项目构建时我们想要什么样的最终输出。在这本书中，我们将使用JAR、WAR和EAR打包类型，尽管存在更多类型。'
- en: '`name`: This is actually the name of the project, but Eclipse shows `artifactid`
    as the project name in Project Explorer.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 这实际上是项目的名称，但在Eclipse的项目资源管理器中显示为`artifactid`。'
- en: '`url`: This is the URL of your project if you are hosting the project information
    on the web. The default is Maven''s URL.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 如果你在网上托管项目信息，这是你项目的URL。默认情况下是Maven的URL。'
- en: '`dependencies`: This section is where we specify the libraries (or other Maven
    artifacts) that the project depends on. The archetype that we selected for this
    project has added the default dependency of JUnit to our project. We will learn
    more about JUnit in [Chapter 5](part0108.html#36VSO0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Unit Testing*.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies`: 这个部分是我们指定项目所依赖的库（或其他Maven工件）。我们为这个项目选择的原型已经将JUnit的默认依赖项添加到我们的项目中。我们将在[第5章](part0108.html#36VSO0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，*单元测试*中了解更多关于JUnit的内容。'
- en: '`finalName`: This tag in the `build` tag indicates the name of the output file
    (JAR, WAR, or EAR) that Maven generates for your project.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`finalName`: 在`build`标签中的这个标签表示Maven为你的项目生成的输出文件（JAR、WAR或EAR）的名称。'
- en: Adding Maven dependencies
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Maven依赖项
- en: 'The archetype that we selected for the project does not include some of the
    dependencies required for a JEE web project. Therefore, you might see error markers
    in `index.jsp`. We will fix this by adding dependencies for the JEE libraries:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为项目选择的原型不包括JEE Web项目所需的某些依赖项。因此，你可能会在`index.jsp`中看到错误标记。我们将通过添加JEE库的依赖项来修复这个问题：
- en: With `pom.xml` open in the editor, click on the Dependencies tab.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开`pom.xml`文件后，点击Dependencies标签页。
- en: Click the Add button. This opens the Select Dependency dialog.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Add按钮。这会打开Select Dependency对话框。
- en: In the filter box, type `javax.servlet` (we want to use servlet APIs in the
    project).
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器框中，输入`javax.servlet`（我们想在项目中使用servlet API）。
- en: Select the latest version of the API and click the OK button.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择API的最新版本并点击OK按钮。
- en: '![](img/00052.jpeg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00052.jpeg)'
- en: 'Figure 2.32: Adding servlet API dependency'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.32：添加servlet API依赖项
- en: However, we need JAR files for servlet APIs only at the compile time; at runtime,
    these APIs are provided by Tomcat. We can indicate this by specifying the scope
    of the dependency; in this case, setting it to provided, which tells Maven to
    evaluate this dependency for compilation only and not to package it in the WAR
    file. See [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)
    for more information on dependency scopes.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们只需要在编译时使用 servlet API 的 JAR 文件；在运行时，这些 API 由 Tomcat 提供。我们可以通过指定依赖的范围来表示这一点；在这种情况下，将其设置为
    provided，这告诉 Maven 仅为此依赖项进行评估，并将其打包到 WAR 文件中。有关依赖范围的更多信息，请参阅 [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)。
- en: To set scope of the dependency, select dependency from the Dependencies tab
    of the POM editor.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置依赖的范围，从 POM 编辑器的“依赖”选项卡中选择依赖项。
- en: 'Click the Properties button. Then, select the provided scope from the drop-down
    list:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“属性”按钮。然后，从下拉列表中选择提供的范围：
- en: '![](img/00053.jpeg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00053.jpeg)'
- en: 'Figure 2.33: Setting the Maven dependency scope'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.33：设置 Maven 依赖范围
- en: Now we need to add dependencies for JSF APIs and their implementation. Click
    the Add button again and type `jsf` in the search box.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要为 JSF API 及其实现添加依赖。再次点击“添加”按钮，并在搜索框中输入 `jsf`。
- en: 'From the list, select **`jsf-api`** with Group Id **`com.sun.faces`** and click
    the OK button:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择 Group Id 为 **`com.sun.faces`** 的 **`jsf-api`**，然后点击“确定”按钮：
- en: '![](img/00054.jpeg)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00054.jpeg)'
- en: 'Figure 2.34: Adding Maven dependencies for JSF'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.34：为 JSF 添加 Maven 依赖
- en: 'Similarly, add a dependency for `jsf-impl` with Group Id `com.sun.faces`. The
    dependencies section in your `pom.xml` should look as follows:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，添加一个 `jsf-impl` 依赖，Group Id 为 `com.sun.faces`。你的 `pom.xml` 文件中的依赖部分应如下所示：
- en: '[PRE40]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If Tomcat throws an exception for not finding `javax.faces.webapp.FacesServlet`
    then you may have to download `jsf-api-2.2.16.jar` ([http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar](http://central.maven.org/maven2/com/sun/faces/jsf-api/2.2.16/jsf-api-2.2.16.jar))
    and `jsf-impl-2.2.16.jar` ([http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar](http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar))
    and copy them to the `<tomcat-install-folder>/lib` folder.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Tomcat 抛出找不到 `javax.faces.webapp.FacesServlet` 的异常，那么你可能需要下载 `jsf-api-2.2.16.jar`
    ([http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar](http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar))
    和 `jsf-impl-2.2.16.jar` ([http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar](http://central.maven.org/maven2/com/sun/faces/jsf-impl/2.2.16/jsf-impl-2.2.16.jar))，并将它们复制到
    `<tomcat-install-folder>/lib` 文件夹中。
- en: Maven project structure
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 项目结构
- en: 'The Maven project wizard creates `src` and `target` folders under the main
    project folder. As the name suggests, all source files go under `src`. However,
    Java package structure starts under the `main` folder. By convention, Maven expects
    Java source files under the `java` folder. Therefore, create a `java` folder under
    `src/main`. The Java package structure starts from the `java` folder, that is,
    `src/main/java/<java-packages>`. Web content such as HTML, JS, CSS, and JSP goes
    in the `webapp` folder under `src/main`. Compiled classes and other output files
    generated by the Maven build process are stored in the `target` folder:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 项目向导在主项目文件夹下创建 `src` 和 `target` 文件夹。正如其名所示，所有源文件都放在 `src` 下。然而，Java 包结构从
    `main` 文件夹开始。按照惯例，Maven 预期 Java 源文件在 `java` 文件夹下。因此，在 `src/main` 下创建一个 `java`
    文件夹。Java 包结构从 `java` 文件夹开始，即 `src/main/java/<java-packages>`。Web 内容，如 HTML、JS、CSS
    和 JSP，放在 `src/main/webapp` 下的 `webapp` 文件夹中。由 Maven 构建过程生成的编译类和其他输出文件存储在 `target`
    文件夹中：
- en: '![](img/00055.jpeg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00055.jpeg)'
- en: 'Figure 2.35: Maven web application project structure'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.35：Maven 网络应用程序项目结构
- en: 'The source code for our login JSF page is the same as in the previous example
    of `LoginJSFApp`. Therefore, copy the `packt` folder from the `src` folder of
    that project to the `src/main/java` folder of this Maven project. This adds `LoginBean.java`
    to the project. Then, copy `web.xml` from the `WEB-INF` folder to the `src/main/webapp/WEB-INF`
    folder of this project. Copy `index.xhtml` and `welcome.xhtml` to the `src/main/webapp` folder:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们登录 JSF 页面的源代码与之前 `LoginJSFApp` 示例中的相同。因此，将那个项目的 `src` 文件夹中的 `packt` 文件夹复制到这个
    Maven 项目的 `src/main/java` 文件夹中。这会将 `LoginBean.java` 添加到项目中。然后，将 `web.xml` 从 `WEB-INF`
    文件夹复制到这个项目的 `src/main/webapp/WEB-INF` 文件夹中。将 `index.xhtml` 和 `welcome.xhtml` 复制到
    `src/main/webapp` 文件夹：
- en: '![](img/00056.jpeg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00056.jpeg)'
- en: 'Figure 2.36: Project structure after adding source files'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.36：添加源文件后的项目结构
- en: No change is required in the source code. To run the application, right-click
    on `index.xhtml` and select Run As | Run on Server.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码中不需要进行任何更改。要运行应用程序，请右键单击`index.xhtml`并选择运行方式 | 在服务器上运行。
- en: We will be using Maven for project management in the rest of this book.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将使用Maven进行项目管理。
- en: Creating a WAR file using Maven
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven创建WAR文件
- en: In a previous example, we created the WAR file using the Export option of Eclipse.
    In a Maven project you can create a WAR by invoking the Maven Install plugin.
    Right-click on the project and select the Run As | Maven install option. The WAR
    file is created in the `target` folder. You can then deploy the WAR file in Tomcat
    by copying it to the `webapps` folder of Tomcat.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用Eclipse的导出选项创建了WAR文件。在Maven项目中，你可以通过调用Maven Install插件来创建WAR文件。右键单击项目并选择运行方式
    | Maven安装选项。WAR文件将在`target`文件夹中创建。然后你可以通过将其复制到Tomcat的`webapps`文件夹中来部署WAR文件。
- en: Summary
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to configure Tomcat in Eclipse. We learned how
    the same web page can be implemented using three different technologies, namely
    JSP, Servlet, and JSF. All of them can be used for developing any dynamic web
    application. However, JSP and JSF are better suited for more UI-intensive pages,
    and servlets are better suited for controllers and as endpoints for web services
    and WebSockets. JSF enforces the MVC design and provides many additional services
    compared to JSP.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Eclipse中配置Tomcat。我们学习了同一个网页可以使用三种不同的技术实现，即JSP、Servlet和JSF。所有这些都可以用于开发任何动态Web应用程序。然而，JSP和JSF更适合于更注重UI的页面，而servlets更适合于控制器，以及作为Web服务和WebSocket的端点。JSF强制执行MVC设计模式，并且与JSP相比提供了许多额外的服务。
- en: We also learned how to use Maven for many project management tasks.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用Maven进行许多项目管理任务。
- en: In the next chapter, we will learn how to configure and use source control management
    systems, particularly SVN and Git.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何配置和使用源代码管理系统，特别是SVN和Git。
