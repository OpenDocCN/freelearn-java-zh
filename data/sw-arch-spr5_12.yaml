- en: Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: Once an application is deployed to a production environment, monitoring is one
    of the key aspects that comes into play. Here, we need to take control of uncommon
    and unexpected behaviors; it’s essential to be aware of how the application is
    working so we can take action as soon as possible in order to solve any undesired
    behavior.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序部署到生产环境中，监控就是其中一个关键方面。在这里，我们需要控制不常见和意外的行为；了解应用程序的工作方式至关重要，这样我们就可以尽快采取行动，以解决任何不希望的行为。
- en: This chapter gives some recommendations with regards to the techniques and tools
    that can be used to monitor the performance of an application, bearing in mind
    technical and business metrics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一些建议，涉及可用于监视应用程序性能的技术和工具，考虑到技术和业务指标。
- en: 'Throughout this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Monitoring
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控
- en: Application Monitoring
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序监控
- en: Business Monitoring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务监控
- en: Monitoring Spring applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控Spring应用程序
- en: APM application monitoring tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APM应用程序监控工具
- en: Response time
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应时间
- en: Database metrics
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库指标
- en: JVM metrics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM指标
- en: Web transactions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web事务
- en: Monitoring
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: 'Every single application is created to solve specific business requirements
    and accomplish certain business goals, so it is essential to assess on a regular
    basis an application to verify whether these goals are being accomplished. As
    part of this verification process, we want to measure the health and performance
    of our application using metrics that can give us insights into the following
    factors:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都是为了解决特定的业务需求和实现特定的业务目标而创建的，因此定期评估应用程序以验证是否实现了这些目标至关重要。作为这一验证过程的一部分，我们希望使用可以为我们提供以下因素的见解的指标来衡量我们应用程序的健康状况和性能：
- en: '**Application Monitoring**: When we are talking about the health of an application,
    it is important to know the amount of resources that are being used, such as CPU,
    memory consumption, threads, or I/O processes. Recognizing potential errors and
    bottlenecks is important to know whether or not we need to scale, tune, or refactor
    our code.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序监控**：当我们谈论应用程序的健康状况时，了解正在使用的资源量，例如CPU、内存消耗、线程或I/O进程，是很重要的。识别潜在的错误和瓶颈对于知道我们是否需要扩展、调整或重构我们的代码是很重要的。'
- en: '**Business Monitoring**: These metrics are helpful to understand key business
    indicators about the business itself. For example, if we have an online store,
    we want to know whether or not we are accomplishing the established sales goals,
    or in a banking application, we would like to know how many transactions and customers
    we receive in a certain branch office, channel, and so on.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务监控**：这些指标有助于了解有关业务本身的关键业务指标。例如，如果我们有一个在线商店，我们想知道我们是否实现了既定的销售目标，或者在银行应用程序中，我们想知道在某个分支机构、渠道等处收到了多少交易和客户。'
- en: We are going to use the banking application created in [Chapter 5](218e4202-6930-4310-9777-7e23d708a85d.xhtml),
    *Model-View-Controller Architectures*, as an example to list a number of monitoring
    concepts that can apply to it. Let's start showing how we can monitor the aforementioned
    application using the tooling that Spring Framework brings out-of-the-box.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在[第5章](218e4202-6930-4310-9777-7e23d708a85d.xhtml)中创建的银行应用程序，*模型-视图-控制器架构*，作为一个示例，列出一些可以应用于它的监控概念。让我们开始展示如何使用Spring框架带来的开箱即用的工具来监视上述应用程序。
- en: Monitoring Spring applications
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控Spring应用程序
- en: 'Spring Framework has some built-in features for monitoring and providing metrics
    to know the health of applications. We have multiple ways to do this, so let''s
    review some of them:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架具有一些内置功能，用于监视和提供指标以了解应用程序的健康状况。我们有多种方法可以做到这一点，因此让我们来审查其中一些：
- en: We can use an old-fashioned approach that implies creating interceptors around
    methods to log everything we want around them.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用一种老式的方法，即围绕方法创建拦截器来记录我们想要记录的一切。
- en: 'Spring Actuator can be used along side Spring Boot applications. Using this
    library, we can review the health of an application; it provides an easy way to
    monitor applications via HTTP requests or JMX. Additionally, we can use tools
    to index the data produced and to create graphs that are helpful to understand
    the metrics. There are plenty of options to create graphs, including:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring执行器可以与Spring Boot应用程序一起使用。使用此库，我们可以查看应用程序的健康状况；它提供了一种通过HTTP请求或JMX监视应用程序的简单方法。此外，我们可以使用工具对生成的数据进行索引，并创建有助于理解指标的图表。有很多选项可以创建图表，包括：
- en: ELK Stack (ElasticSearch, Logstash, and Kibana)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELK Stack（ElasticSearch、Logstash和Kibana）
- en: Spring-boot-admin
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring-boot-admin
- en: Prometheus
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prometheus
- en: Telegraph
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Telegraph
- en: Influx, and
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Influx和
- en: Graphana, among others
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Graphana等等
- en: 'Spring Actuator can be integrated as part of an existing Spring Boot application
    adding the following dependency as part of the `build.gradle` file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Spring执行器可以作为现有Spring Boot应用程序的一部分集成，将以下依赖项添加为`build.gradle`文件的一部分：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we are using **Maven**, we would add the following dependency as part of
    the `pom.xml` file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用**Maven**，我们将在`pom.xml`文件中添加以下依赖项：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Actuator supports many configurations that must be provided in the `application.properties`
    file. We are going to add some properties to this file to provide metadata, such
    as the name, description, and version of our application. Also, we are going to
    run the Actuator endpoints in another port with the security model disabled:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行器支持许多配置，这些配置必须在`application.properties`文件中提供。我们将向该文件添加一些属性，以提供元数据，例如应用程序的名称、描述和版本。此外，我们将在另一个端口上运行执行器端点，并禁用安全模型：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, after running the application, some endpoints provided by Actuator will
    be available. Let''s review some of them:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在运行应用程序之后，执行器提供的一些端点将可用。让我们来审查其中一些：
- en: '**Health**: This endpoint provides some information in general about the application
    health in the `http://localhost:8091/health` URL:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康**：此端点在`http://localhost:8091/health` URL中提供有关应用程序健康状况的一般信息：'
- en: '![](img/8d5f15d3-6f32-492a-9935-29bbe1682df3.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d5f15d3-6f32-492a-9935-29bbe1682df3.png)'
- en: Health endpoint result
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 健康端点结果
- en: '**Info**: This endpoint provides information about the metadata of the application,
    which was previously configured in the `application.properties` file. The information
    is available at `http://localhost:8080/info`:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**：此端点提供有关应用程序元数据的信息，该信息先前在`application.properties`文件中进行了配置。信息可在`http://localhost:8080/info`上找到：'
- en: '![](img/f3815279-0a6e-48e3-b0d9-70c843c01a74.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3815279-0a6e-48e3-b0d9-70c843c01a74.png)'
- en: Info endpoint result
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 信息端点结果
- en: '**Metrics**: This provides information about the OS, JVM, threads, classes
    loaded, and memory. We can view this information at `http://localhost:8080/metrics`:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：提供有关操作系统、JVM、线程、加载的类和内存的信息。我们可以在`http://localhost:8080/metrics`上查看此信息：'
- en: '![](img/ec82d481-c29c-47c5-bff4-049bc530f29f.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec82d481-c29c-47c5-bff4-049bc530f29f.png)'
- en: Metrics endpoint result
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 指标端点结果
- en: '**Trace**: This provides information about the most recent requests made to our
    application. We can view this information at `http://localhost:8080/trace`:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪**：提供有关最近对我们应用程序发出的请求的信息。我们可以在`http://localhost:8080/trace`上查看此信息：'
- en: '![](img/21a2ccbe-974f-4563-b825-4691964aee60.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21a2ccbe-974f-4563-b825-4691964aee60.png)'
- en: Trace endpoint result
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪端点结果
- en: 'If we want to review all endpoints, we can find these in the official documentation
    of spring: [https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要查看所有端点，可以在spring的官方文档中找到：[https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints)。
- en: As we have seen in the Actuator library, we are getting snapshots of our application
    at a certain time, knowing the status and health of the application, or even tracing
    the most commonly used endpoints.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在执行器库中看到的那样，我们可以在某个时间获得应用程序的快照，了解应用程序的状态和健康状况，甚至追踪最常用的端点。
- en: Sometimes, the information provided is enough. If you are looking to have graphics
    and inspect historical data, you should integrate the tools we mentioned earlier.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，提供的信息就足够了。如果您希望拥有图形并检查历史数据，您应该集成我们之前提到的工具。
- en: Spring Actuator also offers the ability to collect custom metrics about the
    application; this is helpful for gathering business metrics. For example, if we
    are working with an application to create savings accounts, we can collect metrics
    to know how many accounts are being created. Then, after opening more branch offices,
    we can see how many more accounts are created and figure out the impact it has
    on the business itself.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Actuator还提供了收集有关应用程序的自定义指标的功能；这对于收集业务指标非常有帮助。例如，如果我们正在使用一个应用程序来创建储蓄账户，我们可以收集指标来了解正在创建多少个账户。然后，在开设更多的分支机构后，我们可以看到创建了多少个账户，并了解它对业务本身的影响。
- en: The key factor when we are collecting business metrics is to understand what
    is important for the business. To achieve this task, it is important to work together
    with business people.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集业务指标时的关键因素是了解对业务而言什么是重要的。为了完成这项任务，与业务人员一起合作非常重要。
- en: 'Business metrics are also helpful for understanding the impact we generate
    after releasing new features. It also facilitates an understanding of unexpected
    behaviors or bugs. Imagine that you roll out a new application version using a
    different email provider; you should compare the number of emails that are being
    delivered after the change with the number of emails delivered before changing
    the email provider. If you find a big difference in these numbers, you will need
    to check what is happening because the difference should not be too much. If you
    want to learn how to create custom metrics, I encourage you to visit this link:
    [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 业务指标对于了解发布新功能后我们产生的影响非常有帮助。它还有助于理解意外行为或错误。想象一下，您使用不同的电子邮件提供程序推出了新的应用程序版本；您应该比较更改后传递的电子邮件数量与更改电子邮件提供程序之前传递的电子邮件数量。如果您发现这些数字有很大的差异，您需要检查发生了什么，因为差异不应该太大。如果您想了解如何创建自定义指标，我鼓励您访问此链接：[https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html)。
- en: There are many tools available on the market that allow us to monitor applications
    without changing the code, and these tools are referred to as **Application Performance
    Management** tools (**APM**). We are going to review how these work in the next
    section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有许多工具可供我们在不更改代码的情况下监控应用程序，这些工具被称为**应用程序性能管理**工具（**APM**）。我们将在下一节中讨论这些工具的工作原理。
- en: Application Performance Management (APM) tools
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序性能管理（APM）工具
- en: 'A huge evolution has emerged in monitoring and tools since the rise of the
    cloud; there are tools and companies that just work on APM tools entirely. Several
    of them are based on the JVM and bytecode instrumentation, and today these tools
    have evolved to even measure user experiences of our applications. The most popular
    at the moment are the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 云端监控和工具的兴起带来了巨大的发展；有一些工具和公司专门致力于APM工具。其中一些基于JVM和字节码仪器，如今这些工具甚至可以测量我们应用程序的用户体验。目前最受欢迎的工具有以下几种：
- en: New Relic ([https://newrelic.com/](https://newrelic.com/))
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: New Relic ([https://newrelic.com/](https://newrelic.com/))
- en: App Dynamics ([https://www.appdynamics.com/](https://www.appdynamics.com/))
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Dynamics ([https://www.appdynamics.com/](https://www.appdynamics.com/))
- en: Dynatrace ([https://www.dynatrace.com/technologies/java-monitoring/spring/](https://www.dynatrace.com/technologies/java-monitoring/spring/))
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dynatrace ([https://www.dynatrace.com/technologies/java-monitoring/spring/](https://www.dynatrace.com/technologies/java-monitoring/spring/))
- en: DataDog ([https://www.datadoghq.com/](https://www.datadoghq.com/))
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataDog ([https://www.datadoghq.com/](https://www.datadoghq.com/))
- en: All of these tools give us the ability to monitor our application layers, health
    (CPU, memory, threads, I/O), databases, and top SQL queries. They also allow us
    to detect bottlenecks, business indicators, and responses time. For example, we
    are going to monitor our application using New Relic.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具都使我们能够监视我们的应用程序层、健康状况（CPU、内存、线程、I/O）、数据库和顶级SQL查询。它们还允许我们检测瓶颈、业务指标和响应时间。例如，我们将使用New
    Relic监视我们的应用程序。
- en: New Relic
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: New Relic
- en: New Relic is a tool that provides instrumentation for our entire environment,
    not just our application. Consequently, we can monitor the entire environment
    of our applications, including factors such as databases, application servers,
    load balancers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: New Relic是一个为我们整个环境提供仪表化的工具，而不仅仅是我们的应用程序。因此，我们可以监视我们应用程序的整个环境，包括数据库、应用程序服务器、负载均衡器等因素。
- en: 'For example, we are going to create a trial account at the following link ([https://newrelic.com/signup](https://newrelic.com/signup)).
    After you have signed up for a New Relic account, you will be directed to the
    control panel, as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将在以下链接创建一个试用账户（[https://newrelic.com/signup](https://newrelic.com/signup)）。注册了New
    Relic账户后，您将被引导到控制面板，如下截图所示：
- en: '![](img/54cd2652-036d-484f-80a0-6f85e5ec3ece.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54cd2652-036d-484f-80a0-6f85e5ec3ece.png)'
- en: 'We are going to continue this process with the following steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下步骤继续这个过程：
- en: 'Choose to monitor applications and accept a 14-day free trial:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择监视应用程序并接受14天免费试用：
- en: '![](img/791b2339-8423-4551-9197-520f2f4ebabf.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/791b2339-8423-4551-9197-520f2f4ebabf.png)'
- en: 'Select the Java application option:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Java应用程序选项：
- en: '![](img/f823f831-4abe-4cc6-b023-036755c14777.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f823f831-4abe-4cc6-b023-036755c14777.png)'
- en: 'Generate a license key and download and install the agent. Here, we are going
    to create a folder name `newrelic` in the root of our application, and copy the
    content of the ZIP that was recently downloaded:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成许可证密钥，下载并安装代理。在这里，我们将在应用程序的根目录中创建一个名为`newrelic`的文件夹，并复制最近下载的ZIP文件的内容：
- en: '![](img/da07a472-7cca-4175-b9cb-f718b6bbad83.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da07a472-7cca-4175-b9cb-f718b6bbad83.png)'
- en: 'We are now going to replace `newrelic.yml` with our key license and application
    name, as in the following screenshot:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将用我们的密钥许可证和应用程序名称替换`newrelic.yml`，如下截图所示：
- en: '![](img/2bfb8361-e0c0-4205-8ba1-38b837964ed2.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bfb8361-e0c0-4205-8ba1-38b837964ed2.png)'
- en: 'Restart your application, including the `javaagent` parameter, as shown in
    the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动您的应用程序，包括`javaagent`参数，如下所示：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In our case, to run the application with the agent would appear as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的情况下，使用代理运行应用程序将如下所示：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we can see our new relic dashboard with the same name (Banking App
    Monitoring Packt), which we define in our `newrelic.yaml` file. This will contain
    all the information on our application:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到我们的新遗物仪表板，与我们在`newrelic.yaml`文件中定义的名称相同（Banking App Monitoring Packt）。这将包含我们应用程序的所有信息：
- en: '![](img/28cc6220-22e5-442e-89f0-187686a21967.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28cc6220-22e5-442e-89f0-187686a21967.png)'
- en: You can also navigate to the application several times to see more data provided
    to the APM.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以多次导航到应用程序，以查看APM提供的更多数据。
- en: 'We can then drill down on the information provided, including the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以深入了解提供的信息，包括以下内容：
- en: 'The response time:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应时间：
- en: '![](img/e8d633dd-5851-433e-b8e0-b29a61173975.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8d633dd-5851-433e-b8e0-b29a61173975.png)'
- en: 'Database metrics:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库指标：
- en: '![](img/6bf3a771-e500-49cb-9d5d-0ebb20db3f77.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bf3a771-e500-49cb-9d5d-0ebb20db3f77.png)'
- en: 'JVM metrics:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM指标：
- en: '![](img/76333a5a-d4ac-4c7b-a36c-dc211cf521bc.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76333a5a-d4ac-4c7b-a36c-dc211cf521bc.png)'
- en: 'Web transactions:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web交易：
- en: '![](img/74538b32-fe33-473f-b116-97ded2ed4ae5.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74538b32-fe33-473f-b116-97ded2ed4ae5.png)'
- en: You can explore all the tabs from the left-hand menu to see more metrics of
    our applications. As we have learned, with all these tools, we can ensure the
    health of our applications and review whether we are free from problems and bottlenecks.
    You can then continue exploring the APMs.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从左侧菜单中探索所有选项卡，以查看我们应用程序的更多指标。正如我们所学到的，有了所有这些工具，我们可以确保应用程序的健康，并检查我们是否摆脱了问题和瓶颈。然后，您可以继续探索APM。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we have learned how to collect useful metrics regarding
    indicators both from a technical and business perspective. We have also learned
    how to use APMs to monitor our environment and get the information that we need
    in order to understand the health, status, and statistics of most-used transactions,
    including the response time of our applications. All this information will help
    us to maintain our applications in production, and to respond quickly to any possible
    performance issues.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从技术和业务角度收集有用的指标。我们还学习了如何使用APM来监视我们的环境，并获取我们需要的信息，以了解最常用交易的健康状况、状态和统计信息，包括我们应用程序的响应时间。所有这些信息将帮助我们在生产中维护我们的应用程序，并迅速应对任何可能的性能问题。
- en: In the next chapter, we are going to review security practices and how to write
    them using Spring.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将审查安全实践以及如何使用Spring编写它们。
