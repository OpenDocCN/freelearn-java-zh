- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Securing Your RESTful API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护你的 RESTful API
- en: Welcome to the part of the book that talks about software security, within the
    larger field of cybersecurity, which is what you, as a software engineer, are
    most responsible for. This may seem a little different from what you have read
    so far because it’s not always seen as a core responsibility of a software engineer.
    That is a sad misconception. With the digitization of our society, software security
    is no longer just the domain of cybersecurity experts; it’s an integral part of
    software development and should be a major concern at all levels of development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的这一部分，它讨论的是软件安全，这是在更广泛的网络安全领域内，而你作为软件工程师，对此负有最大的责任。这可能与你所读过的内容有些不同，因为人们并不总是将其视为软件工程师的核心责任。这是一个令人遗憾的误解。随着我们社会的数字化，软件安全不再是网络安全专家的专属领域；它是软件开发的一个组成部分，并且应该在开发的各个层面都是一个主要关注点。
- en: 'Understanding security can be complex, so let’s start with a mental image.
    Metaphors help simplify abstract concepts, and one of the most common metaphors
    in cybersecurity is the onion. If you’ve read about security before, you’ve likely
    encountered this idea: security is built in layers, just like an onion, with each
    layer adding a protective barrier.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 理解安全性可能很复杂，所以让我们从一个心理图像开始。隐喻有助于简化抽象概念，而在网络安全中最常见的隐喻之一就是洋葱。如果你之前阅读过关于安全性的内容，你很可能遇到过这个想法：安全性是分层的，就像洋葱一样，每一层都增加了一道防护屏障。
- en: While useful, this metaphor has its flaws. It suggests that every layer is uniform
    when, in reality, cybersecurity defenses vary significantly. A more accurate comparison
    is a fortress under siege, where different layers of defense respond to different
    threats. Long-range artillery targets distant attackers, walls hold back intruders,
    and hand-to-hand combat is the last line of defense. Likewise, in security, each
    layer serves a distinct purpose, using different tools and techniques to protect
    against specific risks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个隐喻很有用，但它也有其缺陷。它暗示每一层都是统一的，而实际上，网络安全防御差异很大。一个更准确的比较是受到围攻的堡垒，其中不同的防御层对不同的威胁做出反应。远程大炮针对远距离的攻击者，墙壁阻挡入侵者，而肉搏战是最后的防线。同样，在安全性中，每一层都发挥着独特的作用，使用不同的工具和技术来对抗特定的风险。
- en: But what does this mean for you, the software engineer? Security isn’t just
    about protecting systems—it’s about safeguarding user data, ensuring reliability,
    and preventing costly breaches that can damage both a company’s reputation and
    its bottom line. Vulnerabilities in your code can be exploited to steal sensitive
    information, disrupt services, or even compromise entire networks. As software
    engineers, we are the first line of defense. Writing secure code, enforcing proper
    access controls, and understanding common attack vectors are not optional skills—they
    are essential responsibilities. In this chapter, we’ll explore the layers of security
    you are responsible for and how to integrate security into your development process
    effectively.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但这对你们这些软件工程师来说意味着什么呢？安全性不仅仅是保护系统——它是保护用户数据、确保可靠性和防止代价高昂的安全漏洞，这些漏洞可能会损害公司的声誉和底线。你的代码中的漏洞可能被利用来窃取敏感信息、中断服务，甚至破坏整个网络。作为软件工程师，我们是第一道防线。编写安全代码、执行适当的访问控制和了解常见的攻击向量不是可选技能——这是基本责任。在本章中，我们将探讨你负责的安全层以及如何有效地将安全性集成到你的开发过程中。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Anatomy of an HTTP API call
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP API 调用的解剖结构
- en: Authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: OWASP API Security Top 10 overview
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP API 安全性 Top 10 概述
- en: Understanding Common Vulnerabilities and Exposures
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解常见漏洞和暴露
- en: Strategies to manage CVEs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 CVE 的策略
- en: Anatomy of an HTTP API call
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP API 调用的解剖结构
- en: Almost all API calls today are made over HTTP. So, let’s take a look at what
    happens during such a call and many of the components that participate in it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，几乎所有 API 调用都是通过 HTTP 进行的。那么，让我们看看在这样一个调用中会发生什么，以及参与其中的许多组件。
- en: '![Figure 7.1 – A typical secure API call over HTTP](img/B21843_07_1.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 通过 HTTP 进行典型安全 API 调用](img/B21843_07_1.jpg)'
- en: Figure 7.1 – A typical secure API call over HTTP
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 通过 HTTP 进行典型安全 API 调用
- en: Encrypting the communication
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密通信
- en: Although the protocol is called HTTP and we usually say it is an HTTP call or
    an HTTP connection, the fact is that all modern API calls are made over HTTPS.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个协议被称为 HTTP，我们通常说它是一个 HTTP 调用或 HTTP 连接，但事实是，所有现代 API 调用都是通过 HTTPS 进行的。
- en: The “ *S* ” at the end stands for “ *secure* ,” indicating that the HTTP communication
    is encrypted using **Transport Layer Security** ( **TLS** ). TLS operates at the
    transport layer (Layer 4 in the OSI model), encrypting data between the client
    and server to prevent eavesdropping and tampering. Using TLS in an HTTP call ensures
    that only the intended receiver can read the message correctly, practically eliminating
    man-in-the-middle attacks because even if a message is intercepted, it cannot
    be decrypted and read.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 结尾的“ *S* ”代表“ *secure* ”，表示HTTP通信使用**传输层安全**（**TLS**）进行加密。TLS在传输层（OSI模型的第4层）运行，加密客户端和服务器之间的数据，以防止窃听和篡改。在HTTP调用中使用TLS确保只有预期的接收者才能正确读取消息，实际上消除了中间人攻击，因为即使消息被截获，也无法解密和读取。
- en: 'An HTTPS call will therefore enforce the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，HTTPS调用将强制执行以下操作：
- en: '**Data confidentiality** : All data transmitted over the network is encrypted
    and meaningless without the correct set of keys'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据机密性**：所有通过网络传输的数据都是加密的，没有正确的密钥集，数据将没有意义'
- en: '**Data integrity** : Ensures the data hasn’t been altered during transition'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据完整性**：确保数据在传输过程中未被更改'
- en: '**Server authentication** : Validates the server’s identity to the client'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器身份验证**：验证服务器对客户端的身份'
- en: All three features of HTTPS (HTTP over TLS) communication are implemented using
    cryptographic algorithms to perform encryption and create digital signatures and
    secure digests (hashes) of the transferred data. How the cryptographic algorithms
    are used and how their inputs and outputs are transferred over the network are
    specified by the particular TLS protocol version used.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS（HTTP over TLS）通信的所有三个功能都是通过使用加密算法来执行加密、创建传输数据的数字签名和安全的摘要（散列）来实现的。加密算法的使用方式以及它们的输入和输出如何在网络上传输是由所使用的特定TLS协议版本指定的。
- en: Some of the algorithms and protocols used in the past are considered vulnerable
    given the current scientific knowledge and computing power available. The set
    of algorithms that are considered safe keeps evolving. There are already algorithms
    available today that are expected to stay safe when we reach the quantum computing
    era.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据当前的科学技术知识和计算能力，过去使用的某些算法和协议被认为是脆弱的。被认为安全的算法集不断演变。今天已经有一些算法，预计在达到量子计算时代时仍将保持安全。
- en: Always use strong cryptographic algorithms and protocols when implementing HTTPS
    for your APIs. Avoid deprecated protocols such as SSL and old versions of TLS.
    Encryption algorithms are constantly evolving, and old ones have become obsolete
    due to the ease with which they are broken. Create and enforce a policy to review
    your encryption selections frequently and update your TLS certificates. We will
    discuss this later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现API的HTTPS时，始终使用强大的加密算法和协议。避免使用已弃用的协议，如SSL和旧版本的TLS。加密算法不断演变，旧算法由于容易被破解而变得过时。创建并执行一个政策，定期审查您的加密选择并更新您的TLS证书。我们将在稍后讨论这个问题。
- en: In modern organizations (mid-size and up), it is unlikely that a software engineer
    will be responsible for any TLS implementations, but it is important to have a
    general idea of how HTTPS works and its implications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代组织（中大型及以上），软件工程师不太可能负责任何TLS实现，但了解HTTPS的工作原理及其影响是很重要的。
- en: An essential element used in HTTPS communication is the use of public key cryptography.
    The public part of the public-private key pair is part of a TLS certificate. TLS
    certificates have a life cycle from issue to expiry or invalidation. Hence, we
    need to manage these certificates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS通信中使用的必要元素是公钥加密。公钥私钥对中的公钥部分是TLS证书的一部分。TLS证书从颁发到过期或失效都有一个生命周期。因此，我们需要管理这些证书。
- en: Managing your HTTPS certificates
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理您的HTTPS证书
- en: One of the consequences of using HTTPS/TLS encryption is the need for certificate
    management. Managing security certificates is a complex and crucial part of any
    API-based application. Effective certificate management involves handling renewals
    and expirations, and ensuring certificates are correctly configured to prevent
    service interruptions. Additionally, automated tools for certificate life cycle
    management can help streamline compliance, especially in environments with frequent
    communication between APIs or external services. This is such a significant problem
    that many groups have tried to create mechanisms to mitigate it. Let’s Encrypt
    ( [https://letsencrypt.org/](https://letsencrypt.org/) ) has achieved great success,
    having been used even in some large corporations. Most cloud providers also have
    some form of automatic certificate management, such as AWS Certificate Manager
    ( [https://aws.amazon.com/certificate-manager/](https://aws.amazon.com/certificate-manager/)
    ).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTPS/TLS加密的一个后果是需要进行证书管理。管理安全证书是任何基于API的应用程序的一个复杂且关键的部分。有效的证书管理涉及处理续订和到期，并确保证书配置正确，以防止服务中断。此外，用于证书生命周期管理的自动化工具可以帮助简化合规性，特别是在API或外部服务之间频繁通信的环境中。这是一个如此重大的问题，以至于许多团体都试图创建机制来减轻它。Let’s
    Encrypt（[https://letsencrypt.org/](https://letsencrypt.org/)）取得了巨大的成功，甚至在一些大型企业中也被使用。大多数云服务提供商也提供某种形式的自动证书管理，例如AWS证书管理器（[https://aws.amazon.com/certificate-manager/](https://aws.amazon.com/certificate-manager/)）。
- en: The first line of defense – Web Application Firewall (WAF)
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一道防线——Web应用防火墙（WAF）
- en: A WAF acts as a barrier between the client and your server, filtering out malicious
    traffic and offering a first layer of protection against common web exploits such
    as SQL injection and **Cross-Site Scripting** ( **XSS** ). This is not usually
    controlled by software engineers, but it is important to know about it as the
    WAF can cause some interference on HTTP traffic.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: WAF（Web应用防火墙）在客户端和服务器之间充当屏障，过滤掉恶意流量，并提供针对常见网络攻击（如SQL注入和**跨站脚本攻击**（**XSS**））的第一层保护。这通常不由软件工程师控制，但了解它很重要，因为WAF可能会对HTTP流量造成一些干扰。
- en: 'These are the functions of a WAF:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是WAF的功能：
- en: '**Traffic monitoring** : Inspects incoming requests for suspicious patterns'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量监控**：检查可疑模式'
- en: '**Rule-based filtering** : Blocks traffic based on predefined security rules'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于规则的过滤**：根据预定义的安全规则阻止流量'
- en: '**Anomaly detection** : Identifies unusual behavior that may indicate an attack'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异常检测**：识别可能表明攻击的不寻常行为'
- en: Best practices
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Regularly updating WAF rules is essential to ensure that it can adapt to new
    and emerging threats. Additionally, it’s important to customize these rules to
    align with the specific needs and architecture of your application, ensuring optimal
    protection. Monitoring WAF logs consistently provides valuable security insights,
    helping to identify patterns, anomalies, or potential attacks, thereby enabling
    proactive defenses.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 定期更新WAF规则对于确保其能够适应新的和新兴的威胁至关重要。此外，根据应用程序的具体需求和架构定制这些规则也很重要，以确保最佳保护。持续监控WAF日志可以提供有价值的见解，有助于识别模式、异常或潜在的攻击，从而实现主动防御。
- en: API gateways
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API网关
- en: 'An API gateway is usually the entry point for all client requests, handling
    tasks such as request routing, composition, and protocol translation. In terms
    of security, an API gateway frequently performs many important tasks:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: API网关通常是所有客户端请求的入口点，处理诸如请求路由、组合和协议转换等任务。在安全方面，API网关经常执行许多重要任务：
- en: '**TLS termination** : Decrypts incoming HTTPS traffic'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS终止**：解密传入的HTTPS流量'
- en: '**Authentication** : Validates credentials and permissions'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：验证凭证和权限'
- en: '**Rate limiting and throttling** : Controls the number of requests to prevent
    abuse'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率限制和节流**：控制请求数量以防止滥用'
- en: Benefits
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**好处**'
- en: An API gateway centralizes security policies, allowing consistent enforcement
    across all services. It simplifies client interactions with APIs by providing
    a single entry point that manages tasks such as routing and authentication. Additionally,
    it enhances performance by enabling caching and load balancing, ensuring efficient
    resource utilization and improved response times.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: API网关集中管理安全策略，允许对所有服务的一致执行。它通过提供一个单一入口点来简化客户端与API的交互，该入口点管理诸如路由和身份验证等任务。此外，它通过启用缓存和负载均衡来提高性能，确保高效资源利用和改进响应时间。
- en: Load balancers
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: 'Load balancers distribute incoming network traffic across multiple servers
    to ensure availability and reliability. While not directly involved in security
    logic, they contribute to overall security in the following ways:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器通过将进入的网络流量分配到多个服务器上来确保可用性和可靠性。虽然它们不直接参与安全逻辑，但以下方式有助于整体安全：
- en: '**Health monitoring** : Removing unhealthy servers from the pool.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康监控**：从池中移除不健康的服务器。'
- en: '**TLS termination** : Also handling TLS encryption to reduce server load and
    system complexity if an API gateway is not present.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS终止**：如果API网关不存在，处理TLS加密以减少服务器负载和系统复杂性。'
- en: '**Mitigating Denial of Service (DoS)** : Distributing the load helps to mitigate
    DoS attacks. This is often the last resort in a DoS attack. It would be expected
    that the WAF and the API gateway would have minimized the impact of an attack
    at this point.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓解拒绝服务（DoS）攻击**：通过分配负载有助于缓解DoS攻击。这通常是DoS攻击的最后一招。预计WAF和API网关会在这个阶段最大限度地减少攻击的影响。'
- en: When to decrypt the call – TLS termination
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解密通话的时机——TLS终止
- en: If a secure call is encrypted, it needs to be decrypted at some point so that
    its content can be interpreted and processed. That is called **TLS termination**
    . It refers to the process of decrypting an HTTPS connection and converting it
    back to a clear-text HTTP communication. This typically occurs at the network’s
    edge, such as within an API gateway, a load balancer, or a reverse proxy server.
    By terminating the TLS encryption at a single point, organizations can offload
    the computational overhead associated with encryption and decryption from backend
    servers. This process usually happens only once during the life cycle of an API
    call, ensuring that data remains encrypted while traversing insecure networks
    but can be processed more efficiently within trusted internal networks. TLS termination
    enhances performance and simplifies certificate management without compromising
    the security of data in transit over public channels. It is important to be aware
    of when the TLS termination happens, especially when troubleshooting some problems
    with an API.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个安全通话被加密，它需要在某个时刻被解密，以便其内容可以被解释和处理。这被称为**TLS终止**。它指的是解密HTTPS连接并将其转换回明文HTTP通信的过程。这通常发生在网络的边缘，例如在API网关、负载均衡器或反向代理服务器内部。通过在单个点终止TLS加密，组织可以将与加密和解密相关的计算开销从后端服务器卸载。这个过程通常在API调用的生命周期中只发生一次，确保数据在穿越不安全网络时保持加密状态，但可以在受信任的内部网络中更有效地处理。TLS终止提高了性能，简化了证书管理，同时不会损害通过公共通道传输的数据的安全性。了解TLS终止发生的时间很重要，尤其是在调试API时遇到一些问题时。
- en: All the security elements that we have briefly discussed so far are undeniably
    very important, but in modern mid-size and larger organizations, they are usually
    not the direct responsibility of the software engineer. Other professionals oversee
    them, and therefore they are not the focus of this chapter. In contrast, the following
    security elements are very much the responsibility of the software engineer and
    we all should have a clear understanding of them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止简要讨论的所有安全元素无疑是至关重要的，但在现代中型和大型组织中，它们通常不是软件工程师的直接责任。其他专业人员负责它们，因此它们不是本章的重点。相比之下，以下安全元素在很大程度上是软件工程师的责任，我们都应该对它们有清晰的理解。
- en: As we have discussed, securing API communications is a multi-layered process
    involving various tools and technologies, each playing a distinct role in protecting
    data in transit. From the encryption provided by HTTPS and TLS to the filtering
    and monitoring capabilities of WAFs, every layer contributes to a robust defense
    against cyber threats. TLS termination and certificate management further underscore
    the importance of maintaining both performance and security in modern API ecosystems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，确保API通信的安全性是一个多层次的流程，涉及各种工具和技术，每个层次都在保护传输中的数据方面发挥着独特的作用。从HTTPS和TLS提供的加密到WAF的过滤和监控能力，每一层都对抵御网络威胁的强大防御做出了贡献。TLS终止和证书管理进一步强调了在现代API生态系统中维护性能和安全的必要性。
- en: While these responsibilities are often overseen by dedicated teams in large
    organizations, it is essential for software engineers to understand how these
    components work and their implications. Having this foundational knowledge allows
    better collaboration with security teams and DevOps engineers to troubleshoot
    issues effectively when they arise and to make better decisions during design
    and development. With security threats constantly evolving, maintaining an awareness
    of these practices ensures APIs remain resilient and reliable, forming a secure
    backbone for any application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些责任通常由大型组织中的专门团队负责，但对于软件工程师来说，了解这些组件的工作原理及其影响是至关重要的。拥有这些基础知识可以更好地与安全团队和DevOps工程师合作，有效地解决出现的问题，并在设计和开发过程中做出更好的决策。随着安全威胁的不断演变，保持对这些实践的认识确保API保持弹性和可靠性，为任何应用程序形成一个安全的骨干。
- en: Authentication
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: Authentication is the foundational process of verifying the identity of a user,
    device, or other entity attempting to access your API. Authentication is a crucial
    element in security because it ensures that only legitimate and recognized parties
    can interact with your services. Without proper authentication mechanisms, APIs
    become vulnerable to unauthorized access, data breaches, and malicious activities
    that can compromise system integrity and user data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是验证试图访问您的API的用户、设备或其他实体的身份的基础过程。认证是安全性的关键要素，因为它确保只有合法和公认的各方才能与您的服务交互。如果没有适当的认证机制，API就会容易受到未经授权的访问、数据泄露和可能损害系统完整性和用户数据的恶意活动的威胁。
- en: The primary goal of authentication is to establish the identity of the client
    requesting access. By confirming it, the API can enforce access controls, apply
    rate limiting, and provide personalized experiences where appropriate. Moreover,
    robust authentication mechanisms are essential for compliance with legal and regulatory
    requirements, such as the GDPR, HIPAA, LGPD, and other data protection laws.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 认证的主要目标是确立请求访问的客户端的身份。通过确认这一点，API可以实施访问控制、应用速率限制，并在适当的情况下提供个性化体验。此外，强大的认证机制对于遵守法律和监管要求至关重要，例如GDPR、HIPAA、LGPD和其他数据保护法。
- en: Different authentication methods can be employed depending on the level of security
    required, the nature of the application, and user experience considerations. Next,
    we will break down some of the most common methods.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据所需的安全级别、应用程序的性质和用户体验考虑因素采用不同的认证方法。接下来，我们将分解一些最常见的方法。
- en: Password-based authentication
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于密码的认证
- en: Password-based authentication is the most traditional and is still one of the
    most widely used methods of authentication. Users provide a username and password,
    which are then verified against credentials stored on the server. By its nature,
    this method is mostly used when a person is authenticating with a system. It is
    hardly ever used in any form of machine-to-machine interaction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 基于密码的认证是最传统的，仍然是认证方法中最广泛使用的一种。用户提供用户名和密码，然后这些信息与服务器上存储的凭证进行验证。根据其本质，这种方法主要用于个人与系统进行认证时。几乎从未在任何形式的机器到机器交互中使用。
- en: How it works
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理
- en: When the user attempts to log in, they send their credentials, typically a username
    and password, to a security service API. Upon receiving the credentials, the server
    hashes the password and compares it with the stored hash in its database. If the
    credentials match, the user is successfully authenticated, and the server generates
    an authentication token, such as a session cookie or a **JSON Web Token** ( **JWT**
    ), to facilitate future requests without the need for repeated credential submission.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试登录时，他们会将他们的凭证，通常是用户名和密码，发送到安全服务API。在收到凭证后，服务器将密码进行散列，并将其与数据库中存储的散列进行比较。如果凭证匹配，用户就成功认证，服务器生成一个认证令牌，例如会话cookie或**JSON
    Web Token**（**JWT**），以方便未来的请求而无需重复提交凭证。
- en: Security considerations
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全考虑
- en: Passwords should never be stored in plaintext; instead, they must always be
    hashed using a secure algorithm. The hashing process is only as good as the algorithm
    used. Two modern and widely used ones are *Bcrypt* and *Argon2* . A deeper discussion
    on hashing algorithms is not in the scope of this chapter, but it is highly recommended
    to look at how they work.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 密码永远不应该以明文形式存储；相反，它们必须始终使用安全的算法进行散列。散列过程的效果取决于所使用的算法。两种现代且广泛使用的算法是*Bcrypt*和*Argon2*。关于散列算法的深入讨论不在此章的范围之内，但强烈建议查看它们是如何工作的。
- en: Another consideration is brute-force attacks. It’s important to implement account
    lockout mechanisms after a certain number of failed login attempts. Additionally,
    users should be required to create strong passwords by enforcing password policies
    that include minimum length requirements, the use of special characters, and the
    avoidance of common or easily guessable words.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的是暴力攻击。在一定的失败登录尝试次数后，实施账户锁定机制很重要。此外，应要求用户通过强制执行包括最小长度要求、使用特殊字符以及避免常见或容易被猜到的单词的密码策略来创建强密码。
- en: 'Here are the advantages of password-based authentication:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是基于密码的身份验证的优点：
- en: Simple to implement
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现简单
- en: Easy for users to understand
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户容易理解
- en: 'And here are the disadvantages:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是JWT的缺点：
- en: Passwords can be easily stolen or guessed, especially if they are weak
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码很容易被盗或猜测，尤其是如果它们很弱的话
- en: It requires robust security measures such as rate limiting and password resets
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要强大的安全措施，如速率限制和密码重置
- en: Password reuse across different services makes accounts more vulnerable
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同服务之间重复使用密码会使账户更加脆弱
- en: Token-based authentication
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于令牌的身份验证
- en: Token-based authentication relies on the use of tokens—small pieces of data
    passed between the client and server to verify identity. A widely adopted token
    format is JWT, and this is the format we will discuss.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 基于令牌的身份验证依赖于使用令牌——客户端和服务器之间传递的小数据片段，以验证身份。广泛采用的令牌格式是JWT，这是我们将会讨论的格式。
- en: It is important to understand how a JWT works, specifically the lifespan of
    a token.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 理解JWT的工作原理很重要，特别是了解令牌的有效期。
- en: JWT life cycle and utilization
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JWT的生命周期和利用
- en: The user logs in with their credentials, and the server generates a token (often
    a JWT) containing encoded information about the user.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 用户使用其凭据登录，服务器生成一个包含有关用户编码信息的令牌（通常是JWT）。
- en: 'The server will create and sign the JWT, ensuring its integrity, and send it
    back to the client. The internal mechanism of signing and creating a JWT is beyond
    the scope of this book. See this article for a more complete discussion: [https://www.freecodecamp.org/news/how-to-sign-and-validate-json-web-tokens/](https://www.freecodecamp.org/news/how-to-sign-and-validate-json-web-tokens/)
    .'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将创建并签名JWT，确保其完整性，并将其发送回客户端。签名和创建JWT的内部机制超出了本书的范围。有关更完整的讨论，请参阅这篇文章：[https://www.freecodecamp.org/news/how-to-sign-and-validate-json-web-tokens/](https://www.freecodecamp.org/news/how-to-sign-and-validate-json-web-tokens/)。
- en: From that moment on, the client will include the JWT in the header of all future
    API requests, typically in a pre-defined header defined by the API development
    team.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从那一刻起，客户端将把JWT包含在所有未来的API请求的头部中，通常是在API开发团队定义的预定义头部中。
- en: The server validates the token on each request without needing to check the
    user credentials again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器在每次请求时验证令牌，无需再次检查用户凭据。
- en: One important point to understand is that all tokens (JWT or not) must be temporary.
    They must expire at clear and well-defined intervals. As a software engineer working
    on the API layer, you usually don’t have to do anything special to handle this,
    but frontend applications will have to define a token renewal strategy, and you
    may have to collaborate and support such tasks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的理解点是，所有令牌（JWT或其他）都必须是临时的。它们必须在明确和定义良好的间隔内过期。作为API层工作的软件工程师，你通常不需要做任何特别的事情来处理这个问题，但前端应用程序将不得不定义令牌更新策略，你可能需要协作和支持这样的任务。
- en: Structure of a JWT
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JWT的结构
- en: A JWT is an encrypted record that follows a well-defined structure. So, let’s
    look inside a JWT and discuss its structure.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JWT是一个遵循良好定义结构的加密记录。因此，让我们看看JWT内部的结构，并讨论其结构。
- en: A good tool for viewing and manipulating JWTs can be found at [https://jwt.io/#debugger-io](https://jwt.io/#debugger-io)
    .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://jwt.io/#debugger-io](https://jwt.io/#debugger-io)找到查看和操作JWT的好工具。
- en: '![Figure 7.2 – Example JWT](img/B21843_07_2.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 示例JWT](img/B21843_07_2.png)'
- en: Figure 7.2 – Example JWT
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 示例JWT
- en: 'A JWT consists of three distinct parts separated by a dot: the header, payload,
    and signature. As an API developer, your focus will be on the payload, as it contains
    claims (fields) about the user (e.g., user ID, permissions). The signature ensures
    the token hasn’t been tampered with.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: JWT 由三个不同的部分组成，由点分隔：标题、有效载荷和签名。作为一名 API 开发者，你的重点将放在有效载荷上，因为它包含关于用户（例如，用户 ID、权限）的声明（字段）。签名确保令牌没有被篡改。
- en: 'Once decrypted, the data inside a JWT looks like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 解密后，JWT 内部的数据看起来像这样：
- en: '| **Part** | **Field** | **Description** | **Example Value** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **部分** | **字段** | **描述** | **示例值** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Header | `alg` | Algorithm used to sign or encrypt the token | `"HS256"`
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 标题 | `alg` | 用于签名或加密令牌的算法 | `"HS256"` |'
- en: '| Header | `typ` | Type of token | `"JWT"` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 标题 | `typ` | 令牌类型 | `"JWT"` |'
- en: '| Header | `cty` | Content type of the JWT payload | `"JWT"` or `"application/json"`
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 标题 | `cty` | JWT 有效载荷的内容类型 | `"JWT"` 或 `"application/json"` |'
- en: '| Header | `kid` | Key ID used to identify the key used in signature | `"abc123"`
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 标题 | `kid` | 用于标识签名中使用的密钥的密钥 ID | `"abc123"` |'
- en: '| Payload | `iss` | Issuer of the token | `"auth.example.com"` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `iss` | 令牌的发行者 | `"auth.example.com"` |'
- en: '| Payload | `sub` | Subject of the token (usually a user ID) | `"1234567890"`
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `sub` | 令牌的主题（通常是用户 ID） | `"1234567890"` |'
- en: '| Payload | `aud` | Audience for which the token is intended | `"example.com"`
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `aud` | 令牌的目标受众 | `"example.com"` |'
- en: '| Payload | `exp` | Expiration time (in Unix time) | `1516239022` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `exp` | 过期时间（Unix 时间） | `1516239022` |'
- en: '| Payload | `nbf` | Not valid before this time (in Unix time) | `1516239022`
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `nbf` | 在此时间之前无效（Unix 时间） | `1516239022` |'
- en: '| Payload | `iat` | Issued at time (in Unix time) | `1516239022` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `iat` | 发布时间（Unix 时间） | `1516239022` |'
- en: '| Payload | `jti` | JWT ID; a unique identifier for the token | `"unique-token-id-123"`
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `jti` | JWT ID；令牌的唯一标识符 | `"unique-token-id-123"` |'
- en: '| Payload | `name` | User’s full name | `"John Doe"` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `name` | 用户的完整姓名 | `"John Doe"` |'
- en: '| Payload | `email` | User’s email address | `"john.doe@example.com"` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `email` | 用户的电子邮件地址 | `"john.doe@example.com"` |'
- en: '| Payload | `role` | Roles or permissions assigned to the user | `"admin"`
    or `["admin", "user"]` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 有效载荷 | `role` | 分配给用户的角色或权限 | `"admin"` 或 `["admin", "user"]` |'
- en: '| Signature | N/A | Digital signature for verifying the token’s integrity |
    (Result of cryptographic operation) |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 签名 | N/A | 用于验证令牌完整性的数字签名 | （加密操作的结果） |'
- en: Table 7.1 – An example JWT
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.1 – JWT 的一个示例
- en: The header can be customized to adjust to the needs of each organization. But
    at a minimum, you should see `"alg"` and `"typ"` entries present.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 标题可以根据每个组织的需要自定义。但至少，你应该看到 `"alg"` 和 `"typ"` 条目存在。
- en: The payload is also mostly defined by the organization. Each entry in the payload
    is called a **claim** and is used to identify the users, their roles, unique information,
    and any other data element that can be used by the APIs to best control access
    to the data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷也主要由组织定义。有效载荷中的每个条目都称为 **声明**，用于识别用户、他们的角色、唯一信息以及任何其他 API 可以用来最佳控制数据访问的数据元素。
- en: Special attention should be given to the three time-based claims – `exp` , `nbf`
    , and `iat` . They are crucial to verify whether the JWT is valid at the time
    of execution of the API. Ideally, they should not be omitted, although `"nbf"`
    is sometimes not defined. In that case, it is assumed that the JWT is valid from
    the moment it is created ( `"iat"` ).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 应特别关注基于时间的三个声明 – `exp`、`nbf` 和 `iat`。它们对于验证 JWT 在 API 执行时的有效性至关重要。理想情况下，它们不应被省略，尽管
    `"nbf"` 有时未定义。在这种情况下，假设 JWT 从创建的那一刻起就是有效的（`"iat"`）。
- en: 'In general, there are three classifications for claims:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于声明有三种分类：
- en: '**Registered claims** : Predefined claims widely used in the industry, such
    as `iss` , `exp` , and `sub`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册声明**：在行业中广泛使用的预定义声明，例如 `iss`、`exp` 和 `sub`'
- en: '**Public claims** : Custom claims agreed upon by parties using the JWT'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共声明**：使用 JWT 的各方同意的自定义声明'
- en: '**Private claims** : Custom claims used in contexts specific to your application'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有声明**：在特定于您应用程序的上下文中使用的自定义声明'
- en: Statelessness
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无状态
- en: One of the key benefits of token-based authentication is that the server doesn’t
    need to store session state validation information. All necessary information
    is contained in the token itself and is sent over in each call.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 基于令牌的身份验证的一个关键好处是服务器不需要存储会话状态验证信息。所有必要的信息都包含在令牌本身中，并在每次调用中发送。
- en: Frequently, it is necessary to store session state on the server side, but no
    credentials or user identification should be stored, only references to the tokens
    used.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，需要在服务器端存储会话状态，但不应存储凭据或用户标识，而只应存储用于令牌的引用。
- en: Security considerations
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全考虑
- en: 'JWTs are part of a general security strategy, and as such should be treated
    as data to be secured in themselves. Therefore, here are some specific security
    concerns about the JWTs:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: JWT是通用安全策略的一部分，因此应被视为需要保护的数据。因此，以下是关于JWT的一些具体安全考虑：
- en: Always use HTTPS to transmit tokens, as tokens are susceptible to interception
    in plaintext
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用HTTPS来传输令牌，因为令牌容易在明文中被截获
- en: Set token expiration times to limit the window of vulnerability
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置令牌过期时间以限制漏洞窗口
- en: Use short-lived tokens with refresh tokens to minimize the risk of token theft
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用短期令牌和刷新令牌以最小化令牌被盗的风险
- en: Securely store tokens on the client side, avoiding local storage if possible
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端安全地存储令牌，如果可能的话，避免本地存储
- en: 'These are the advantages of a JWT strategy:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: JWT策略的优势如下：
- en: Stateless authentication scales well in distributed systems
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态认证在分布式系统中具有良好的扩展性
- en: There’s no need to store session information on the server
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需在服务器上存储会话信息
- en: It allows granular control over access rights using token claims
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许使用令牌声明进行细粒度的访问权限控制
- en: 'And these are some disadvantages:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其中的一些缺点：
- en: Tokens, if stolen, can be used to impersonate the user
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果令牌被盗，可以用来冒充用户
- en: Managing token expiration and secure refresh cycles will add complexity to the
    application, both the frontend and the backend
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理令牌过期和安全的刷新周期将增加应用程序的复杂性，包括前端和后端
- en: Caveats
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: One problem that sometimes happens is JWT inflation, where the organization
    keeps adding more claims or long lists of values to claims to the point that the
    JWT grows beyond the limits defined on the server. Even if the JWT specs do not
    define an upper limit, remember that the token will be sent over as part of the
    HTTP header, and there is always a limit for them. If you start receiving **HTTP
    413 Content Too Large** errors, one possible culprit could be the size of your
    JWT.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会出现一个问题，即JWT膨胀，组织不断向JWT中添加更多的声明或长列表的值，以至于JWT的大小超过了服务器上定义的限制。即使JWT规范没有定义上限，也要记住，令牌将作为HTTP头的一部分发送，并且它们始终有一个上限。如果你开始收到**HTTP
    413 Content Too Large**错误，一个可能的原因可能是你的JWT大小。
- en: In summary, using JWTs to manage authentication and authorization is a well-established
    strategy that has good industry support and relies upon solid technologies. However,
    a large portion of its effectiveness is due to how it is used by the application.
    It is your responsibility as the software engineer to make sure good and well-managed
    policies are put in place.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用JWT来管理认证和授权是一种经过验证的策略，它得到了良好的行业支持，并依赖于可靠的技术。然而，其有效性的大部分归因于它在应用程序中的使用方式。作为软件工程师，确保实施良好的和有效的策略是你的责任。
- en: Multi-factor authentication
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多因素认证
- en: '**Multi-factor authentication** ( **MFA** ) adds an additional layer of security
    by requiring the user to provide more than one form of identification. This typically
    includes something they know (e.g., password), something they have (e.g., mobile
    phone or security token), or something they are (e.g., fingerprint or face recognition).
    This is mostly a client-side strategy and has little effect on API development,
    but it is important for backend engineers to understand its general concepts.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**多因素认证**（**MFA**）通过要求用户提供多种身份验证形式来增加一层额外的安全防护。这通常包括他们知道的信息（例如，密码）、他们拥有的物品（例如，手机或安全令牌），或者他们自身的特征（例如，指纹或面部识别）。这主要是一种客户端策略，对API开发的影响很小，但对于后端工程师理解其基本概念来说非常重要。'
- en: MFA is part of the authentication dialog, so, after a user has successfully
    entered their password, they are prompted to provide a second factor, such as
    a code generated by a mobile app (e.g., Google Authenticator) or sent via SMS.
    The server then verifies the second factor before granting access, usually by
    generating a JWT to be used by the client when accessing the APIs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: MFA是认证对话的一部分，因此，在用户成功输入密码后，他们会收到提示提供第二个因素，例如由手机应用（例如，Google Authenticator）生成的代码或通过短信发送的代码。然后服务器在授予访问权限之前验证第二个因素，通常是通过生成一个JWT供客户端在访问API时使用。
- en: What can be used in MFA?
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MFA可以使用什么？
- en: 'Generally speaking, there are three types of MFA:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，有三种类型的MFA：
- en: '**Something you know** : A password, PIN, or answer to a security question'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你知道的某物**：密码、PIN码或安全问题的答案'
- en: '**Something you have** : A physical device such as a phone or hardware token
    that generates a temporary passcode'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你拥有的某物**：生成临时密码的物理设备，如手机或硬件令牌'
- en: '**Something you are** : Biometric data such as a fingerprint, facial recognition,
    or iris scan'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你是的某物**：指纹、面部识别或虹膜扫描等生物识别数据'
- en: Security considerations
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全考虑
- en: 'Let’s see what we should consider with regard to security when using MFA:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在使用MFA时我们应该考虑哪些安全因素：
- en: MFA drastically reduces the likelihood of account compromise, even if a password
    is stolen.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使密码被盗，MFA也极大地降低了账户被破坏的可能性。
- en: '**Time-based one-time passwords** ( **TOTPs** ) are commonly used for MFA.
    Ensure that those tokens are properly time-synchronized and expire after a short
    period.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于时间的单次密码**（**TOTPs**）常用于MFA。确保这些令牌正确的时间同步，并在短时间内过期。'
- en: SMS-based MFA is vulnerable to SIM swapping and should be avoided where possible.
    Use app-based authenticators or hardware tokens instead.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于短信的MFA容易受到SIM卡交换的影响，应尽可能避免。改用基于应用程序的身份验证器或硬件令牌。
- en: 'Let’s look at the advantages of MFA:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看多因素认证（MFA）的优势：
- en: It significantly enhances security by requiring multiple forms of verification
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过要求多种验证形式显著增强了安全性
- en: It protects against common attacks such as password phishing and brute-force
    attacks
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以防止常见的攻击，如密码钓鱼和暴力攻击
- en: 'And let’s see some of the disadvantages:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些缺点：
- en: It can be cumbersome for users, especially in environments with frequent logins
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能对用户来说很麻烦，尤其是在需要频繁登录的环境中
- en: It requires infrastructure to support the second factor, such as maintaining
    SMS gateways or integrating with an authenticator app
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要支持第二因素的基础设施，例如维护短信网关或与身份验证器应用程序集成
- en: Biometric authentication
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生物识别认证
- en: Biometric authentication uses physical characteristics like fingerprints, facial
    recognition, or voice to verify a user’s identity. With the increasing availability
    of biometric sensors on mobile devices and laptops, it’s becoming a more common
    method of authentication.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 生物识别认证使用指纹、面部识别或语音等物理特征来验证用户的身份。随着移动设备和笔记本电脑上生物识别传感器的日益普及，它正成为一种更常见的认证方法。
- en: 'Let’s see how it works:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: The user’s biometric data (fingerprint, face scan, etc.) is captured and stored
    securely on the device.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户的生物识别数据（指纹、面部扫描等）在设备上安全捕获和存储。
- en: When the user attempts to authenticate, the API compares the captured data with
    the stored biometric template to verify their identity.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户尝试进行身份验证时，API会将捕获的数据与存储的生物识别模板进行比较，以验证其身份。
- en: 'Here are some common biometric authentication methods:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些常见的生物识别认证方法：
- en: '**Fingerprint scanning** : Used extensively on mobile devices'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指纹扫描**：在移动设备上广泛使用'
- en: '**Facial recognition** : Built into many smartphones and laptops'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面部识别**：集成在许多智能手机和笔记本电脑中'
- en: '**Voice recognition** : Sometimes used for telephonic authentication'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音识别**：有时用于电话身份验证'
- en: 'Let’s see some of the security considerations:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些安全考虑因素：
- en: Biometric data is unique to each user, making it difficult to forge
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生物识别数据对每个用户都是唯一的，这使得伪造变得困难
- en: Store biometric data locally, not on the server, to prevent mass breaches
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生物识别数据本地存储，而不是在服务器上，以防止大规模泄露
- en: Ensure biometric systems have fallback options (such as passwords) for cases
    where biometrics fail (e.g., injury or hardware malfunction)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保生物识别系统在生物识别失败的情况下（例如，受伤或硬件故障）有后备选项（例如密码）
- en: 'These are some advantages of biometric authentication:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是生物识别认证的一些优势：
- en: It provides a high level of security
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了高级别的安全性
- en: It is convenient for users—there’s no need to remember passwords
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对用户来说很方便——无需记住密码
- en: 'Here are some of the disadvantages:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些缺点：
- en: Biometric data is irreversible—once compromised, it cannot be changed
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生物识别数据是不可逆的——一旦泄露，就无法更改
- en: There are potential privacy concerns around the collection and storage of biometric
    data
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在收集和存储生物识别数据方面存在潜在的隐私问题
- en: It is less reliable in certain conditions (e.g., wet fingerprints or poor lighting
    for facial recognition)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些条件下（例如，湿指纹或面部识别的照明不良）可靠性较低
- en: Choosing the right authentication method depends on the application’s requirements
    and the sensitivity of the data it handles. While password-based authentication
    remains prevalent, more secure methods, such as token-based authentication, MFA,
    and biometric authentication, are rapidly gaining ground. Combining these methods,
    such as using MFA in conjunction with JWTs, can provide a robust and flexible
    authentication mechanism for APIs, ensuring the security of both users and data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的认证方法取决于应用程序的需求以及它处理的数据的敏感性。虽然基于密码的认证仍然很普遍，但更安全的方法，如基于令牌的认证、多因素认证（MFA）和生物识别认证，正在迅速获得认可。结合这些方法，例如使用JWT与MFA结合，可以为API提供强大且灵活的认证机制，确保用户和数据的安全。
- en: Authorization
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: Once you have your API guarded against unknown users by authentication, the
    next step is to apply authorization mechanisms. This is where the system determines
    whether an authenticated entity (user, device, or service) has permission to access
    a specific resource or perform a particular action. While authentication verifies
    identity, authorization governs access, ensuring that the authenticated entity
    only has access to the resources and operations for which they have been granted
    permission.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过认证保护了API免受未知用户的影响，下一步就是应用授权机制。这是系统确定已认证实体（用户、设备或服务）是否有权访问特定资源或执行特定操作的地方。虽然认证验证身份，但授权管理访问，确保已认证实体只能访问他们被授予权限的资源和服务。
- en: In API security, proper authorization is essential for enforcing business rules,
    safeguarding sensitive data, and ensuring that each user or service only performs
    the actions and accesses the information they are allowed to. So, let’s look at
    the different techniques we can use to implement authorization.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在API安全中，适当的授权对于执行业务规则、保护敏感数据以及确保每个用户或服务只执行他们被允许的操作和访问信息至关重要。因此，让我们看看我们可以使用的不同技术来实现授权。
- en: Role-based access control
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于角色的访问控制
- en: One of the most common authorization mechanisms is **role-based access control**
    ( **RBAC** ). RBAC works by assigning predefined roles to users or entities and
    associating permissions with those roles. Each role is granted access to specific
    API endpoints or functionalities, depending on the application’s security requirements.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的授权机制之一是**基于角色的访问控制**（**RBAC**）。RBAC通过将预定义的角色分配给用户或实体，并将权限与这些角色关联来实现。每个角色都被授予访问特定API端点或功能，具体取决于应用程序的安全要求。
- en: 'Let’s see how RBAC works:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看RBAC是如何工作的：
- en: Users are assigned one or more roles, such as admin, user, or editor.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户被分配一个或多个角色，例如管理员、用户或编辑。
- en: API endpoints or resources are protected by role checks. For example, only users
    with the admin role might have access to the /admin endpoints.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API端点或资源通过角色检查来保护。例如，只有具有管理员角色的用户可能有权访问/admin端点。
- en: When an API request is made, the server checks the user’s assigned roles against
    the roles required for the requested resource.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当发起API请求时，服务器会检查用户分配的角色与请求的资源所需的角色的匹配情况。
- en: 'These are some of the advantages of RBAC:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是RBAC的一些优点：
- en: It simplifies permission management by grouping permissions into roles
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过将权限分组到角色中来简化权限管理。
- en: It is easy to implement and scale, particularly in enterprise applications where
    roles can be defined centrally
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它易于实现和扩展，尤其是在企业应用程序中，角色可以集中定义
- en: It is fully supported by many solutions, such as the claims in JWT
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被许多解决方案完全支持，例如JWT中的声明
- en: 'Here are some of the disadvantages:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些缺点：
- en: It can be inflexible in complex systems where fine-grained access control is
    required, leading to role explosion or data leaks
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要细粒度访问控制的复杂系统中，它可能不够灵活，可能导致角色爆炸或数据泄露。
- en: It can cause unexpected exposure in complex systems, as roles may be inconsistent
    or incompatible with each other
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能在复杂系统中导致意外的暴露，因为角色可能不一致或不兼容。
- en: Attribute-based access control
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于属性的访问控制
- en: '**Attribute-based access control** ( **ABAC** ) provides more granular control
    than RBAC by using attributes (user attributes, environment attributes, resource
    attributes, etc.) to determine access rights. Attributes are metadata that describe
    entities or actions and are evaluated against policies to decide whether access
    is allowed.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于属性的访问控制**（**ABAC**）通过使用属性（用户属性、环境属性、资源属性等）来确定访问权限，比RBAC提供了更细粒度的控制。属性是描述实体或动作的元数据，并针对策略进行评估，以决定是否允许访问。'
- en: 'Let’s see how ABAC works:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看ABAC是如何工作的：
- en: Policies are written to define the conditions under which access is granted.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略被编写来定义授予访问权限的条件。
- en: Attributes such as user role, time of request, resource type, or location are
    considered.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑到用户角色、请求时间、资源类型或位置等属性。
- en: Access decisions are made dynamically, based on real-time evaluation of attributes
    and policies.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问决策是根据属性和策略的实时评估动态做出的。
- en: 'These are some of the advantages of using ABAC:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用ABAC的一些优点：
- en: It provides flexibility by allowing fine-grained control based on dynamic conditions
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过允许基于动态条件的细粒度控制来提供灵活性。
- en: It is scalable for complex systems in which RBAC would become difficult to manage
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它适用于RBAC难以管理的复杂系统。
- en: 'And here are some disadvantages:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些缺点：
- en: It is more complex to implement and manage than RBAC.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相比RBAC，实现和管理更为复杂。
- en: It can result in performance overhead due to real-time policy evaluations.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于实时策略评估，可能会导致性能开销。
- en: It can cause unexpected security issues due to mismanaged attributes. For example,
    an employee changes positions in the company but the system still allows them
    to see data from the previous job.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于属性管理不当，可能会导致意外的安全问题。例如，员工在公司内更换职位，但系统仍然允许他们查看之前工作的数据。
- en: OAuth 2.0
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OAuth 2.0
- en: OAuth 2.0 is one of the most widely used authorization frameworks for APIs.
    It allows a user to grant a third-party application limited access to their resources
    without exposing their credentials. OAuth 2.0 is commonly used for delegating
    access to APIs and provides a standardized method for authorization across web,
    mobile, and cloud applications.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 2.0是API中最广泛使用的授权框架之一。它允许用户授予第三方应用程序对其资源的有限访问权限，而无需暴露其凭据。OAuth 2.0通常用于委派API访问，并为网络、移动和云应用程序之间的授权提供了一种标准化的方法。
- en: 'Let’s see how OAuth 2.0 works:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看OAuth 2.0是如何工作的：
- en: The user authenticates with an identity provider (e.g., Google, Facebook) and
    grants permission to a third-party application.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通过身份提供者（例如，Google、Facebook）进行身份验证，并授予第三方应用程序权限。
- en: The third-party application receives an access token, which it uses to make
    authorized API requests on behalf of the user.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三方应用程序接收访问令牌，并代表用户使用该令牌进行授权的API请求。
- en: The access token contains scopes, which define the level of access the third-party
    application has (e.g., read-only, write).
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问令牌包含作用域，这些作用域定义了第三方应用程序的访问级别（例如，只读、写入）。
- en: 'Let’s see some security considerations:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些安全考虑因素：
- en: Always use HTTPS to transmit OAuth tokens
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用HTTPS来传输OAuth令牌。
- en: Use short-lived access tokens and refresh tokens to minimize risk in case of
    token theft
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用短期访问令牌和刷新令牌以最小化令牌被盗的风险。
- en: Implement token revocation mechanisms to invalidate tokens if necessary
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施令牌撤销机制，在必要时使令牌失效。
- en: 'Here are the advantages of using Oauth2.0:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用OAuth2.0的优点：
- en: It allows delegated access without sharing user credentials
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许委派访问，而无需共享用户凭据。
- en: It has been widely adopted, providing standardization across many services
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它已被广泛采用，为许多服务提供了标准化。
- en: 'And here are some disadvantages:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些缺点：
- en: It requires the implementation of secure token storage and transmission mechanisms
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要实现安全的令牌存储和传输机制。
- en: It can add complexity, especially when managing refresh tokens and token expiration
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会增加复杂性，尤其是在管理刷新令牌和令牌过期时。
- en: JWT for authorization
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JWT用于授权
- en: JWTs, which were discussed in the *Authentication* section, also play a key
    role in authorization. After authentication, a JWT can be issued containing claims
    that specify the user’s roles or permissions. These claims can then be used by
    the API to enforce access controls.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在*身份验证*部分讨论的JWT在授权中也发挥着关键作用。在身份验证之后，可以颁发包含指定用户角色或权限的声明的JWT。然后，API可以使用这些声明来执行访问控制。
- en: 'Let’s see how JWT authorization works:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看JWT授权是如何工作的：
- en: The user is authenticated, and a JWT is issued containing claims such as user
    roles or permissions.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户经过身份验证，并颁发包含用户角色或权限等声明的JWT。
- en: The client includes the JWT in the authorization header in future API requests.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端在未来的API请求中在授权头中包含JWT。
- en: The server decodes the JWT and checks the claims to determine whether the user
    is authorized to access the requested resource.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器解码JWT并检查声明，以确定用户是否有权访问请求的资源。
- en: JWTs allow stateless authorization, meaning the server doesn’t need to maintain
    session state because the necessary authorization information is embedded in the
    token itself.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: JWT允许无状态授权，这意味着服务器不需要维护会话状态，因为必要的授权信息已经嵌入在令牌本身中。
- en: 'Let’s see some of the advantages of using JWT authorization:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用JWT授权的一些优点：
- en: It scales well in distributed systems by eliminating the need for server-side
    session storage
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过消除服务器端会话存储的需求，它在分布式系统中具有良好的可扩展性
- en: It enables fine-grained control using claims inside the JWT
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过在JWT中使用声明来实现细粒度控制
- en: As for disadvantages, it requires careful management of token expiration and
    revocation to prevent unauthorized access. This is the biggest drawback of JWT
    and any other attribute-based authorization. It is important to ensure the claims
    in the JWT reflect the actual roles of this user. Once again, the case of an employee
    changing positions in the company comes to mind, potentially causing data access
    violations.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 至于缺点，它需要仔细管理令牌过期和吊销，以防止未经授权的访问。这是JWT和其他基于属性的授权的最大缺点。确保JWT中的声明反映了此用户的实际角色非常重要。再次提到，员工在公司中更换职位的情况可能会引起数据访问违规。
- en: Fine-grained access control
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 细粒度访问控制
- en: In some systems, the level of access control required goes beyond the basic
    capabilities of RBAC or even ABAC. **Fine-grained access control** ( **FGAC**
    ) allows more nuanced control over access to resources, based on attributes such
    as user identity, resource ownership, and contextual data.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统中，所需访问控制级别超出了RBAC或甚至ABAC的基本功能。**细粒度访问控制**（**FGAC**）允许根据用户身份、资源所有权和上下文数据等属性，对资源访问进行更细致的控制。
- en: These levels of FGAC are usually found in complex business domains; healthcare
    and finance are two very common cases. Healthcare, being a highly regulated industry,
    has many different rules that need to be applied to any data access.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这些FGAC级别通常出现在复杂的商业领域；医疗保健和金融是两个非常常见的案例。医疗保健作为一个高度监管的行业，有许多不同的规则需要应用于任何数据访问。
- en: 'Here are some examples of FGAC:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些FGAC的例子：
- en: A user can access only their own profile data, not other users’ data
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户只能访问他们自己的个人资料数据，不能访问其他用户的资料数据
- en: A service can only modify resources that it has created
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务只能修改它创建的资源
- en: Access to sensitive resources might be restricted based on location, time of
    day, or other contextual information
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于位置、一天中的时间或其他上下文信息，可能会限制对敏感资源的访问
- en: A customer on a healthcare insurance system can see all payments made to their
    account but can only see claims payments for their claims and other dependents
    that they are legally allowed to
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个医疗保健保险系统中，客户可以看到他们账户的所有付款，但只能看到他们自己的索赔付款和其他他们依法允许的受抚养人的索赔付款
- en: Let’s take a closer look at that last example, as it illustrates the challenges
    of FGAC.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看最后一个例子，因为它说明了FGAC的挑战。
- en: '*Case* : A client is required to keep their ex-spouse on their healthcare policy
    for a specified time. During this time, the main client cannot see any of the
    spouse’s medical information, but can see the costs associated with their treatment.
    There are several challenges in this case. Where do we look for the mandatory
    amount of time to keep the spouse on the policy? How do we isolate the spouse’s
    data in a family request? How do we allow some financial data to be exposed but
    not medical information?'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*案例*：客户需要在其健康保险政策中保留前配偶一段时间。在这段时间内，主要客户无法看到配偶的任何医疗信息，但可以看到与治疗相关的费用。在这个案例中存在几个挑战。我们在哪里寻找保留配偶在政策中的强制时间？我们如何在家庭请求中隔离配偶的数据？我们如何允许某些财务数据被暴露，但不暴露医疗信息？'
- en: Those are not simple questions to answer and may make that piece of the system
    more complex than it would be otherwise.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题并不简单，回答它们可能会使该系统部分比原本更复杂。
- en: This case requires careful design and policy enforcement. It could increase
    the complexity of the application, particularly in large systems.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此案例需要仔细的设计和政策执行。它可能会增加应用程序的复杂性，尤其是在大型系统中。
- en: Best practices for API authorization
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API授权的最佳实践
- en: 'In summary, here are some guidelines to make sure your API is as secure as
    you can make it:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，以下是一些确保您的API尽可能安全的指南：
- en: '**Use the principle of least privilege** : Only grant users and services the
    minimal permissions necessary to perform their tasks'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用最小权限原则**：仅授予用户和服务执行其任务所需的最小权限'
- en: '**Implement layered authorization mechanisms** : Combine RBAC with ABAC or
    OAuth for more flexible and secure access control'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施分层授权机制**：结合RBAC与ABAC或OAuth以实现更灵活和安全的访问控制'
- en: '**Regularly audit permissions** : Periodically review and update roles, permissions,
    and access policies to ensure they align with current business needs'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期审计权限**：定期审查和更新角色、权限和访问策略，以确保它们与当前业务需求保持一致'
- en: '**Secure tokens** : Always use secure storage and transmission methods for
    tokens (e.g., OAuth tokens, JWTs) to prevent unauthorized access'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全令牌**：始终使用安全的存储和传输方法来处理令牌（例如，OAuth令牌、JWTs）以防止未经授权的访问'
- en: Authorization, when designed and implemented effectively, ensures that your
    API remains secure, responsive, and compliant with regulatory requirements. By
    choosing the right authorization strategy—whether RBAC, ABAC, OAuth, or JWT-based—you
    can tailor access control to your system’s specific needs while protecting data
    and ensuring users can only perform the actions they are entitled to.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当设计和实施得当，授权确保您的API保持安全、响应，并符合监管要求。通过选择正确的授权策略——无论是RBAC、ABAC、OAuth还是基于JWT的——您可以根据系统特定需求定制访问控制，同时保护数据并确保用户只能执行他们有权执行的操作。
- en: OWASP API Security Top 10 overview
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP API安全Top 10概述
- en: '**OWASP** stands for **Open Web Application Security Project** , a non-profit
    organization that focuses on web application security. They do a phenomenal job
    at documenting known security issues and helping developers and organizations
    to secure web applications. One of the main contributions is the **OWASP API Security
    Top 10** , which identifies the most critical security risks for APIs.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWASP**代表**开放网络应用安全项目**，这是一个专注于网络应用安全的非营利组织。他们在记录已知安全问题和帮助开发者和组织确保网络应用安全方面做得非常出色。其主要贡献之一是**OWASP
    API安全Top 10**，它确定了API最关键的安全风险。'
- en: OWASP is a crucial resource for all software engineers, and you should periodically
    look at the published lists of concerns and new security white papers.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP是所有软件工程师的重要资源，你应该定期查看发布的关注列表和新安全白皮书。
- en: 'The most recent list was published in 2023 and can be found here: [https://owasp.org/API-Security/editions/2023/en/0x11-t10/](https://owasp.org/API-Security/editions/2023/en/0x11-t10/)
    .'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 最新列表于2023年发布，可在以下链接找到：[https://owasp.org/API-Security/editions/2023/en/0x11-t10/](https://owasp.org/API-Security/editions/2023/en/0x11-t10/)。
- en: API1:2023 - Broken Object Level Authorization
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API1:2023 - 破坏对象级别授权
- en: API2:2023 - Broken Authentication
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API2:2023 - 破坏认证
- en: API3:2023 - Broken Object Property Level Authorization
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API3:2023 - 破坏对象属性级别授权
- en: API4:2023 - Unrestricted Resource Consumption
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API4:2023 - 无限制资源消耗
- en: API5:2023 - Broken Function Level Authorization
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API5:2023 - 破坏功能级别授权
- en: API6:2023 - Unrestricted Access to Sensitive Business Flows
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API6:2023 - 无限制访问敏感业务流程
- en: API7:2023 - Server Side Request Forgery
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API7:2023 - 服务器端请求伪造
- en: API8:2023 - Security Misconfiguration
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API8:2023 - 安全配置错误
- en: API9:2023 - Improper Inventory Management
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API9:2023 - 不当的库存管理
- en: API10:2023 - Unsafe Consumption of APIs
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API10:2023 - 不安全地使用API
- en: As you can see, all the top OWASP concerns are the topics we have been discussing
    in this chapter so far. It is important to be well acquainted with the OWASP list
    as it evolves, so visit frequently the OWASP Top Ten API Security Risks at the
    link provided previously.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有顶级OWASP关注点都是我们迄今为止在本章中讨论的主题。随着OWASP列表的演变，熟悉OWASP列表非常重要，因此请经常访问之前提供的链接中的OWASP
    Top Ten API安全风险。
- en: Understanding Common Vulnerabilities and Exposures
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解常见漏洞和暴露
- en: 'The phrase “our society runs on software” is not new and describes most modern
    societies, and consequently, software security has emerged as a core concern for
    governments and organizations worldwide. Cyber threats are evolving at an unprecedented
    pace, and vulnerabilities in software can lead to significant financial losses,
    reputational damage, and legal repercussions. In the same week as this chapter
    was written, the largest DDoS attack in history targeted Cloudflare (you can find
    a detailed discussion here: [https://www.linkedin.com/pulse/cloudflare-mitigates-historic-world-record-56-tbps-hoccc/](https://www.linkedin.com/pulse/cloudflare-mitigates-historic-world-record-56-tbps-hoccc/)
    ). It is suspected that the scale of this attack was achieved by exploiting vulnerabilities
    in many IoT devices, but the details are still being discovered. Therefore, for
    Java software engineers, understanding and managing these vulnerabilities is fundamental
    for developing secure and robust applications.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: “我们的社会依赖于软件”这个说法并不新鲜，它描述了大多数现代社会，因此，软件安全已经成为全球政府和组织的一个核心关注点。网络威胁正在以前所未有的速度发展，软件中的漏洞可能导致重大的经济损失、声誉损害和法律后果。就在本章撰写的那一周，历史上最大的DDoS攻击针对了Cloudflare（你可以在这里找到详细讨论：[https://www.linkedin.com/pulse/cloudflare-mitigates-historic-world-record-56-tbps-hoccc/](https://www.linkedin.com/pulse/cloudflare-mitigates-historic-world-record-56-tbps-hoccc/)）。据推测，这次攻击的规模是通过利用许多物联网设备的漏洞实现的，但详细情况仍在调查中。因此，对于Java软件工程师来说，理解和管理工作中的这些漏洞对于开发安全且稳健的应用程序至关重要。
- en: One of the fundamental aspects of software security is the identification and
    mitigation of known vulnerabilities, commonly referred to as **Common Vulnerabilities
    and Exposures** ( **CVEs** ). This chapter aims to provide an in-depth exploration
    of CVEs from the perspective of a professional Java software engineer. We will
    delve into the definition of CVEs, the mechanisms used to discover and document
    them, and their structural composition. Additionally, we will highlight the best
    resources for tracking CVEs and discuss software scanners that help identify these
    vulnerabilities.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安全的一个基本方面是识别和缓解已知的漏洞，通常被称为**通用漏洞和暴露**（**CVEs**）。本章旨在从专业Java软件工程师的角度深入探讨CVEs。我们将深入研究CVEs的定义、用于发现和记录它们的机制以及它们的结构组成。此外，我们将突出跟踪CVEs的最佳资源，并讨论帮助识别这些漏洞的软件扫描器。
- en: Furthermore, we will examine effective strategies for managing CVEs, including
    continuous dependency upgrades, dependency management practices, proactive dependency
    updates, and reactive upgrades based on scan reports. By understanding and implementing
    these strategies, software engineers can enhance the security posture of their
    applications and contribute to a safer digital ecosystem.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将探讨管理CVE的有效策略，包括持续依赖升级、依赖管理实践、主动依赖更新和基于扫描报告的响应式升级。通过理解和实施这些策略，软件工程师可以增强其应用程序的安全态势，并为更安全的数字生态系统做出贡献。
- en: What are CVEs?
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是CVE？
- en: The CVE system is a standardized method for identifying and cataloging security
    vulnerabilities and exposures in software and firmware. Managed by the MITRE Corporation,
    CVE provides a unique identifier for each disclosed vulnerability, allowing consistent
    references across various security tools, databases, and communications. A CVE
    entry typically includes an identification number, a brief description of the
    vulnerability, and references to related advisories, reports, and patches.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: CVE系统是一种标准化的方法，用于识别和编目软件和固件中的安全漏洞和暴露。由MITRE公司管理，CVE为每个公开的漏洞提供一个唯一的标识符，允许在各种安全工具、数据库和通信中保持一致的引用。CVE条目通常包括一个识别号、对漏洞的简要描述以及相关警告、报告和补丁的引用。
- en: 'For Java software engineers, CVEs are particularly significant due to the widespread
    use of Java libraries and frameworks, which can introduce vulnerabilities into
    applications if not properly managed. Understanding CVEs enables developers to
    do the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java软件工程师来说，CVE尤其重要，因为Java库和框架的使用非常普遍，如果管理不当，可能会将漏洞引入应用程序。了解CVE使开发者能够做到以下几点：
- en: '**Identify vulnerabilities** : Recognize known security issues in the libraries
    and components they use'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别漏洞**：识别他们使用的库和组件中已知的网络安全问题'
- en: '**Assess impact** : Evaluate the potential impact of a vulnerability on their
    applications'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估影响**：评估漏洞对其应用程序可能产生的影响'
- en: '**Implement mitigations** : Apply patches or updates to address vulnerabilities
    promptly'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施缓解措施**：应用补丁或更新以及时解决漏洞'
- en: '**Maintain compliance** : Adhere to security policies and regulatory requirements
    by managing known vulnerabilities'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护合规性**：通过管理已知漏洞来遵守安全政策和监管要求'
- en: How are CVEs found and documented?
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何发现和记录CVE？
- en: 'The discovery of vulnerabilities is a collaborative effort involving security
    researchers, developers, and automated tools. The following are common mechanisms
    for finding vulnerabilities:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞的发现是一个涉及安全研究人员、开发人员和自动化工具的协作过程。以下是一些常见的发现漏洞的机制：
- en: '**Security research** : Security professionals and researchers actively analyze
    software to identify potential vulnerabilities. This process may involve the following:'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全研究**：安全专业人士和研究人员积极分析软件以识别潜在漏洞。此过程可能涉及以下内容：'
- en: '**Code auditing** : Manually reviewing source code for insecure coding practices'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码审计**：手动审查源代码以查找不安全的编码实践'
- en: '**Penetration testing** : Simulating attacks to find weaknesses in running
    applications'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渗透测试**：模拟攻击以发现运行中的应用程序的弱点'
- en: '**Fuzz testing** : Providing invalid or random data to programs to trigger
    unexpected behavior'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模糊测试**：向程序提供无效或随机数据以触发意外行为'
- en: '**Bug bounty programs** : Many organizations offer bug bounty programs, incentivizing
    independent researchers to find and report vulnerabilities. These programs help
    uncover issues that might be missed by internal teams.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞赏金计划**：许多组织提供漏洞赏金计划，激励独立研究人员发现并报告漏洞。这些计划有助于发现内部团队可能错过的潜在问题。'
- en: '**Automated scanning tools** : Tools such as static code analyzers and **dynamic
    application security testing** ( **DAST** ) tools automatically scan code bases
    and running applications for known vulnerability patterns.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化扫描工具**：如静态代码分析器和**动态应用程序安全测试**（**DAST**）工具之类的工具自动扫描代码库和运行中的应用程序以查找已知漏洞模式。'
- en: '**User and developer reports** : End-users and developers may encounter security
    issues during regular use or development activities and report them to the maintainers
    or security teams.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户和开发者报告**：最终用户和开发者在常规使用或开发活动中可能会遇到安全问题，并将它们报告给维护者或安全团队。'
- en: Documentation process
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档处理流程
- en: 'Once a vulnerability is discovered, documenting it involves several steps:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发现漏洞，记录它涉及以下步骤：
- en: '**Vulnerability disclosure** : The finder reports the vulnerability to the
    software vendor or maintainers, following responsible disclosure practices to
    allow time for a fix before public disclosure.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞披露**：发现者按照负责任的披露实践向软件供应商或维护者报告漏洞，以便在公开披露之前有时间修复。'
- en: '**CVE assignment** : An authorized **CVE Numbering Authority** ( **CNA** )
    assigns a unique CVE identifier to the vulnerability. This identifier allows consistent
    tracking and reference.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVE分配**：授权的**CVE编号机构**（**CNA**）为漏洞分配一个唯一的CVE标识符。此标识符允许一致的跟踪和引用。'
- en: '**Description and analysis** : A detailed description of the vulnerability
    is created, including the following:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述和分析**：创建漏洞的详细描述，包括以下内容：'
- en: '**Summary** : A brief overview of the issue'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要**：对问题的简要概述'
- en: '**Technical details** : In-depth information about the vulnerability, including
    affected versions and components'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术细节**：关于漏洞的深入信息，包括受影响的版本和组件'
- en: '**Impact assessment** : The potential risks and consequences if the vulnerability
    is exploited'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影响评估**：如果漏洞被利用，潜在的风险和后果'
- en: '**Publishing** : The CVE entry is published in the CVE database and shared
    with various security databases such as the **National Vulnerability Database**
    ( **NVD** ). Vendors may also release security advisories and patches.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**：CVE条目发布在CVE数据库中，并与各种安全数据库（如**国家漏洞数据库**（**NVD**））共享。供应商也可能发布安全公告和补丁。'
- en: Structure of a CVE
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CVE的结构
- en: 'A CVE entry consists of several key components that provide essential information
    about the vulnerability:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: CVE条目由几个关键组件组成，这些组件提供了有关漏洞的基本信息：
- en: '**CVE identifier** : A unique identifier in the format CVE-YYYY-NNNN, where
    YYYY is the year the CVE ID was assigned or made public and NNNN is a sequential
    number, for example, CVE-2023-12345.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVE标识符**：格式为CVE-YYYY-NNNN的唯一标识符，其中YYYY是CVE ID分配或公开的年份，NNNN是顺序号，例如CVE-2023-12345。'
- en: '**Description** : A concise summary of the vulnerability, including the following:'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：对漏洞的简洁总结，包括以下内容：'
- en: '**Type of vulnerability** : Such as buffer overflow or injection flaw'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞类型** : 例如缓冲区溢出或注入漏洞'
- en: '**Affected products** : Specific software, versions, and components impacted'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受影响的产品** : 受影响的特定软件、版本和组件'
- en: '**Impact** : The potential effects of exploitation, such as unauthorized access
    or denial of service'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影响** : 利用漏洞可能产生的潜在影响，如未经授权的访问或拒绝服务'
- en: '**References** : Links to additional information, including the following:'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参考** : 链接到其他信息，包括以下内容：'
- en: '**Vendor advisories** : Official statements or patches from the software vendor'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供应商警告** : 软件供应商的官方声明或补丁'
- en: '**Security Bulletins** : Reports from security organizations'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全公告** : 安全组织的报告'
- en: '**Technical Analysis** : In-depth articles or reports analyzing the vulnerability'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术分析** : 分析漏洞的深入文章或报告'
- en: 'Finally, when imported into the NVD, additional metadata is added (if available):'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，当导入到NVD时，会添加额外的元数据（如果有的话）：
- en: '**CVSS scores** : The **Common Vulnerability Scoring System** ( **CVSS** )
    provides a quantitative measure of the severity of the vulnerability.'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVSS评分** : **通用漏洞评分系统**（**CVSS**）提供了对漏洞严重性的定量度量。'
- en: '**Impact metrics** : Details about confidentiality, integrity, and availability
    impacts.'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影响度量** : 关于机密性、完整性和可用性影响的详细信息。'
- en: '**Affected configurations** : Specific environments or configurations that
    are vulnerable.'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受影响配置** : 易受攻击的特定环境或配置。'
- en: You need to understand that documenting a CVE is a process, and a CVE that affects
    your code may have been identified, but no current solution is yet available.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要理解，记录CVE是一个过程，并且可能已经识别出影响您代码的CVE，但目前还没有解决方案。
- en: Best resources to track CVEs
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪CVE的最佳资源
- en: 'Staying informed about the latest vulnerabilities is essential for proactive
    security management. The following are some of the best resources for tracking
    CVEs. You should bookmark each of them and become familiar with their structure
    and searching capabilities:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 了解最新的漏洞信息对于主动安全管理工作至关重要。以下是一些跟踪CVE的最佳资源。您应该将它们都加入书签，并熟悉它们的结构和搜索功能：
- en: NVD
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: NVD
- en: 'Managed by the **National Institute of Standards and Technology** ( **NIST**
    ), the NVD provides comprehensive information about CVEs, including detailed analyses,
    CVSS scores, and impact metrics. It is the main resource for CVEs:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 由**国家标准与技术研究院**（**NIST**）管理，NVD提供了关于CVE的全面信息，包括详细分析、CVSS评分和影响度量。它是CVE的主要资源：
- en: '[https://nvd.nist.gov/](https://nvd.nist.gov/ )'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nvd.nist.gov/](https://nvd.nist.gov/ )'
- en: MITRE CVE list
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: MITRE CVE列表
- en: 'The official CVE list is maintained by MITRE. It provides basic information
    about each CVE, including descriptions and references. Frequently, the information
    here is easier to navigate than the NVD:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的CVE列表由MITRE维护。它提供了关于每个CVE的基本信息，包括描述和参考。通常，这里的信息比NVD更容易导航：
- en: '[https://cve.mitre.org/](https://cve.mitre.org/ )'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[CVE信息](https://cve.mitre.org/ )'
- en: Security advisories from vendors
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商的安全警告
- en: 'Software vendors often publish their own security advisories and patches. Monitoring
    these sources ensures you receive vendor-specific information promptly. There
    are many such resources, but for a Java software engineer, Oracle and Apache are
    two of the most important:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 软件供应商通常会发布自己的安全警告和补丁。监控这些来源确保您能够及时收到特定供应商的信息。有许多这样的资源，但对于Java软件工程师来说，Oracle和Apache是其中最重要的两个：
- en: '**Oracle Java SE Critical Patch Updates** : [https://www.oracle.com/security-alerts/](https://www.oracle.com/security-alerts/
    )'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle Java SE关键补丁更新** : [https://www.oracle.com/security-alerts/](https://www.oracle.com/security-alerts/
    )'
- en: '**Apache Security** : [https://apache.org/security/](https://apache.org/security/
    )'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache安全** : [https://apache.org/security/](https://apache.org/security/
    )'
- en: '**VulDB** : [https://vuldb.com/](https://vuldb.com/ )'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VulDB** : [https://vuldb.com/](https://vuldb.com/ )'
- en: These databases aggregate vulnerability information from various sources and
    often provide additional context and analysis. Not all current vulnerabilities
    may be available there yet.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据库从各种来源汇总漏洞信息，并经常提供额外的背景和分析。并非所有当前漏洞都可在其中找到。
- en: Software scanners that help to identify CVEs
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 帮助识别CVE的软件扫描器
- en: Software scanners are tools that have been designed to automatically detect
    vulnerabilities within code bases, applications, or systems. For Java developers,
    these tools are invaluable in identifying CVEs associated with dependencies and
    code. They work in a few different forms and, depending on the project, you may
    have to use more than one to cover your code.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 软件扫描器是设计用来自动检测代码库、应用程序或系统中的漏洞的工具。对于Java开发者来说，这些工具在识别与依赖项和代码相关的CVEs方面非常有价值。它们以几种不同的形式工作，并且根据项目不同，你可能需要使用多个工具来覆盖你的代码。
- en: '**Static Application Security Testing (SAST) tools** : These tools analyze
    source code for security vulnerabilities without executing the code. Examples
    are SonarQube and Checkmarx'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态应用程序安全测试（SAST）工具**：这些工具在不执行代码的情况下分析源代码以查找安全漏洞。例如，SonarQube和Checkmarx。'
- en: '**Software Composition Analysis (SCA)** : These tools identify open source
    components and dependencies in your application and check for known vulnerabilities.
    Examples include OWASP Dependency-Check, Snyk, Black Duck, and WhiteSource.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件组成分析（SCA）**：这些工具识别应用程序中的开源组件和依赖项，并检查已知漏洞。例如，OWASP Dependency-Check、Snyk、Black
    Duck和WhiteSource。'
- en: '**Dynamic Application Security Testing (DAST)** : These tools analyze running
    applications to detect vulnerabilities by simulating attacks. Examples include
    OWASP ZAP and Burp Suite.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态应用程序安全测试（DAST）**：这些工具通过模拟攻击来分析运行中的应用程序以检测漏洞。例如，OWASP ZAP和Burp Suite。'
- en: How these tools work
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的工作原理
- en: As CVEs are security problems with external dependencies, how can the scanners
    look at your code and find the issues?
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CVEs是与外部依赖项相关的安全问题，扫描器如何查看你的代码并找到问题呢？
- en: First, the scanner analyzes project files, such as `pom.xml` for Maven and `build.gradle`
    for Gradle, to identify all direct and transitive dependencies. It then extracts
    the version numbers of each dependency and compares them against a vulnerability
    database containing CVE information. Based on this comparison, the scanner generates
    a detailed report highlighting any vulnerable dependencies, classifying them by
    severity levels according to CVSS scores. Additionally, it provides upgrade recommendations,
    suggesting versions that resolve the identified vulnerabilities.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，扫描器分析项目文件，例如Maven的`pom.xml`和Gradle的`build.gradle`，以识别所有直接和间接依赖项。然后，它提取每个依赖项的版本号，并将它们与包含CVE信息的漏洞数据库进行比较。基于这种比较，扫描器生成一份详细的报告，突出显示任何有漏洞的依赖项，并根据CVSS评分将它们按严重程度分类。此外，它还提供升级建议，建议解决已识别漏洞的版本。
- en: The next step is to integrate the dependency scanners into the development workflow.
    Some scanners provide plugins for **Integrated Development Environments** ( **IDEs**
    ) such as Eclipse and IntelliJ IDEA, allowing developers to detect vulnerabilities
    directly within their coding environment. Additionally, scanners can be incorporated
    into **Continuous Integration/Continuous Deployment** ( **CI/CD** ) pipelines,
    automating vulnerability detection during the build process. To enhance security
    monitoring, they can also be configured to send automated alerts whenever new
    vulnerabilities are identified. By identifying and addressing security issues
    early in the development cycle, these integrations enhance agility and help shorten
    the **Software Development Life Cycle** ( **SDLC** ), reducing delays caused by
    late-stage security fixes.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将依赖项扫描器集成到开发工作流程中。一些扫描器为**集成开发环境（IDE）**（例如Eclipse和IntelliJ IDEA）提供插件，允许开发者在编码环境中直接检测漏洞。此外，扫描器可以集成到**持续集成/持续部署（CI/CD）**管道中，在构建过程中自动检测漏洞。为了增强安全监控，它们还可以配置为在发现新的漏洞时发送自动警报。通过在开发周期的早期阶段识别和解决安全问题，这些集成增强了敏捷性，并有助于缩短**软件开发生命周期（SDLC）**，减少由后期安全修复引起的延迟。
- en: Popular scanners for Java
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: Java流行的扫描器
- en: 'It is always a little dangerous to publish lists of software tools in a printed
    format as some projects may disappear or become obsolete over time, but as of
    April 2025, these are the most widely used tools for identifying vulnerabilities
    in Java projects:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在印刷格式中发布软件工具列表总是有点危险，因为一些项目可能会随着时间的推移而消失或过时，但截至2025年4月，这些是目前在Java项目中识别漏洞最广泛使用的工具：
- en: '**OWASP Dependency-Check** : This open-source tool identifies a project’s dependencies
    and checks whether there are any known, publicly disclosed vulnerabilities (CVEs)
    associated with the scanned dependencies. It supports projects that use Maven,
    Gradle, and Ant and can be integrated into most build tools and CI/CD solutions.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OWASP Dependency-Check**：这是一个开源工具，它识别项目的依赖项并检查是否存在与扫描的依赖项相关的已知、公开披露的漏洞（CVEs）。它支持使用Maven、Gradle和Ant的项目，并且可以集成到大多数构建工具和CI/CD解决方案中。'
- en: '**Snyk** : This is a commercial tool that provides vulnerability scanning and
    remediation for open source dependencies. It provides real-time scanning, allowing
    the continuous monitoring of dependencies. It also proposes code fixes automatically
    with suggestions directly in pull requests. Plugins are available for most popular
    IDEs (such as IntelliJ and VS Code).'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Snyk**：这是一个商业工具，为开源依赖项提供漏洞扫描和修复。它提供实时扫描，允许持续监控依赖项。它还自动在拉取请求中提出代码修复建议。插件适用于大多数流行的IDE（如IntelliJ和VS
    Code）。'
- en: '**Black Duck** : This is a comprehensive SCA tool that scans for open source
    vulnerabilities and license compliance. It enforces policies regarding the use
    of open source components in the system and generates in-depth analysis of vulnerabilities
    and risks.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Black Duck**：这是一个全面的SCA工具，用于扫描开源漏洞和许可证合规性。它强制执行有关在系统中使用开源组件的政策，并生成漏洞和风险的深入分析。'
- en: Strategies to manage CVEs
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理CVEs的策略
- en: All these tools are very important and are a crucial part of managing the CVEs
    in your project. But how can we manage this workload, and what considerations
    are needed?
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具都非常重要，并且是管理项目中CVEs的关键部分。但如何管理这项工作量，需要考虑哪些因素？
- en: The effective management of CVEs involves not just detection but also strategic
    planning and processes to mitigate risks.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 有效管理CVEs不仅涉及检测，还包括战略规划和减轻风险的流程。
- en: One important point to understand is that writing secure software is expensive,
    and managing CVEs in particular has become a hard and expensive part of software
    security. It is not uncommon for teams to allocate 15% to 20% of their capacity
    to security.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的理解点是编写安全软件的成本很高，特别是管理CVEs已经成为软件安全中困难和昂贵的部分。团队将15%到20%的产能分配给安全是很常见的。
- en: With that in mind, let’s look at a couple of strategies that help Java developers
    maintain secure applications.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们看看一些有助于Java开发者维护安全应用的策略。
- en: Continuous upgrade dependencies
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续升级依赖项
- en: Regularly updating dependencies to their latest versions ensures that applications
    benefit from security patches and improvements made by library maintainers.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 定期将依赖项更新到最新版本确保应用程序能够从库维护者做出的安全补丁和改进中受益。
- en: This is a proactive approach to CVEs. By always keeping your dependencies up
    to date, you guarantee that any security update will be implemented and used in
    your code as soon as it is available.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种对CVEs的积极应对方法。通过始终保持依赖项更新，你确保任何安全更新都将尽快在代码中实施和使用。
- en: 'There are various ways to implement continuous upgrades:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 实施持续升级有多种方式：
- en: '**Automated updates** : Use tools such as Dependabot to automatically create
    pull requests for dependency updates'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动更新**：使用Dependabot等工具自动创建依赖项更新的拉取请求'
- en: '**Regular maintenance schedule** : Establish a routine (e.g., weekly or monthly)
    to review and update dependencies'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期维护计划**：建立常规（例如，每周或每月）来审查和更新依赖项'
- en: '**Testing** : Implement comprehensive automated tests to ensure that updates
    do not introduce regressions'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：实施全面的自动化测试以确保更新不会引入回归'
- en: '**Monitoring release notes** : Keep track of dependency release notes for any
    security-related updates'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控发布说明**：跟踪依赖项的发布说明以获取任何安全相关的更新'
- en: 'These are the benefits of continuous upgrades:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是持续升级的好处：
- en: '**Security** : It reduces the window of exposure to known vulnerabilities'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：它减少了暴露于已知漏洞的时间窗口'
- en: '**Feature enhancements** : It provides access to new features and performance
    improvements'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能增强**：它提供了访问新功能和性能改进的途径'
- en: '**Community support** : It aligns with the active versions supported by the
    community'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区支持**：它与社区支持的活跃版本保持一致'
- en: Costs and requirements
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成本和需求
- en: The main cost with this approach is the time that must be invested in keeping
    the code base current. Remember, you will be changing dependencies in your code,
    and the API you are calling may have changed, sometimes in ways that are not immediately
    obvious, forcing you and your team to refactor portions of your code that would
    not need any change otherwise.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的主要成本是必须投入在保持代码库当前的时间。记住，你将更改代码中的依赖项，你调用的API可能已经改变，有时是以不明显的方式改变，迫使你和你的团队重构那些本来不需要任何更改的代码部分。
- en: To be able to make so many potential breaking changes so frequently, it is necessary
    to have a comprehensive set of automated tests that can give the developer team
    the confidence to make those changes in the first place.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够频繁地进行如此多的潜在破坏性更改，必须有一套全面的自动化测试，这样开发团队能够有信心首先进行这些更改。
- en: The time to add the tools and integrate them with the specific ticketing system
    used in your organization is another cost that needs to be considered. The initial
    investment can be quite large for legacy code bases with not enough test coverage
    and automated build pipelines.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 将工具添加并集成到您组织使用的特定票务系统中的时间是需要考虑的另一个成本。对于测试覆盖不足和自动化构建管道不足的遗留代码库，初始投资可能相当大。
- en: Dependency management
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖管理
- en: Now that we know that CVEs are caused by the dependencies we as software engineers
    add to the code base, what can we do to limit our exposure to them?
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道CVE是由我们作为软件工程师添加到代码库中的依赖项引起的，我们该如何限制我们对它们的暴露？
- en: Clearly, a proper policy for the management of dependencies is crucial to control
    the quality, security, and performance of your application. The goal here is to
    prevent exposure to CVEs as much as possible.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，一个适当的依赖项管理策略对于控制应用程序的质量、安全性和性能至关重要。这里的目的是尽可能防止暴露于CVE。
- en: 'Sometimes, software engineers add dependencies to projects without analyzing
    the consequences. To be honest, this happens more often than we’d like to admit!
    Having a policy in place that will require validation of the need for this new
    dependency and a discussion about more secure and better-maintained alternatives
    can significantly help with security vulnerabilities. To avoid introducing unnecessary
    risks, it is important to follow these best practices when adding and managing
    dependencies:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，软件工程师在没有分析后果的情况下将依赖项添加到项目中。说实话，这种情况比我们愿意承认的更常见！制定一项政策，要求验证新依赖项的需求并讨论更安全和维护得更好的替代方案，可以显著帮助解决安全漏洞。为了避免引入不必要的风险，在添加和管理依赖项时遵循以下最佳实践非常重要：
- en: '**Minimal dependencies** : Include only necessary dependencies to reduce the
    attack surface. The introduction of new dependencies must be discussed with the
    team and its implications must be identified.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化依赖**：仅包含必要的依赖项以减少攻击面。引入新的依赖项必须与团队讨论，并识别其影响。'
- en: '**Version pinning** : Specify exact versions of dependencies to ensure consistent
    builds. Avoid having dependencies on the “latest” version.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本锁定**：指定依赖项的确切版本以确保构建的一致性。避免依赖“最新”版本。'
- en: '**Use trusted sources** : Retrieve dependencies from reputable repositories
    (e.g., Maven Central). Choose packages and libraries that are actively maintained
    and have a good history of security updates.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用可信来源**：从信誉良好的仓库（例如，Maven Central）检索依赖项。选择那些积极维护且拥有良好安全更新历史的包和库。'
- en: '**Transitive dependency control** : Monitor and manage transitive dependencies
    brought in by direct dependencies.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传递依赖项控制**：监控和管理由直接依赖项引入的传递依赖项。'
- en: '**License compliance** : Ensure that the licenses of dependencies are compatible
    with your project.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**许可证合规性**：确保依赖项的许可证与您的项目兼容。'
- en: Proactive dependency upgrade
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 积极的依赖项升级
- en: 'As much as we may want to avoid dependencies, it is nearly impossible to build
    a modern API system without them. So, proactively upgrading dependencies before
    vulnerabilities are disclosed or before they become outdated is a good way to
    keep your system CVE-free. To achieve this, it is necessary to do the following:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可能希望避免依赖项，但几乎不可能在没有它们的情况下构建现代API系统。因此，在漏洞披露或它们过时之前积极升级依赖项是保持您的系统CVE-free的好方法。为了实现这一点，有必要做以下事情：
- en: '**Stay informed** : Subscribe to mailing lists and monitor updates from dependency
    maintainers'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持信息更新**：订阅邮件列表并监控依赖项维护者的更新。'
- en: '**Run beta tests** : Test new versions in a controlled environment before full
    integration'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行beta测试**：在完全集成之前在受控环境中测试新版本'
- en: '**Contribute to dependencies** : Engage with open source projects you use the
    most to understand upcoming changes'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为依赖项做出贡献**：参与您使用最多的开源项目，以了解即将到来的变化'
- en: '**Automate the scanning** : Use tools that notify you about new releases of
    dependencies'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化扫描**：使用工具来通知您有关依赖项新版本的发布'
- en: By doing all of this, you will stay ahead of most CVEs, which reduces the likelihood
    of being affected by new vulnerabilities. As secondary gains, these policies eliminate
    large jumps in dependency versions that may require significant refactoring of
    your own code and all the performance improvements and optimizations of newer
    versions.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行所有这些操作，您可以领先于大多数CVEs，这降低了受到新漏洞影响的可能性。作为次要收益，这些策略消除了可能需要大量重构您自己的代码以及所有新版本的性能改进和优化的依赖项版本的大跳跃。
- en: The drawback is the cost. Implementing these proactive policies can cause frequent
    disruptions that can be hard to justify to business owners and investors because
    there are no new features being created by all the work.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是成本。实施这些主动政策可能会造成频繁的中断，这可能很难向业务所有者和投资者证明其合理性，因为所有的工作都没有创造新的功能。
- en: Reactive upgrade based on scan results
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于扫描结果的反应性升级
- en: 'This is the process of upgrading dependencies in response to vulnerability
    reports from scanners or security advisories. This is probably the most common
    process used by development teams. To effectively manage upgrades based on scan
    results, the teams should follow the following steps:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在扫描器或安全警报中的漏洞报告响应下升级依赖项的过程。这可能是开发团队使用最普遍的过程。为了有效地根据扫描结果管理升级，团队应遵循以下步骤：
- en: '**Scan regularly** : Use automated scanners to detect vulnerabilities in dependencies'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期扫描**：使用自动化扫描器检测依赖项中的漏洞'
- en: '**Assess severity** : Prioritize vulnerabilities based on severity and impact'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估严重性**：根据严重性和影响优先处理漏洞'
- en: '**Plan remediation** : Schedule upgrades or apply patches for affected dependencies'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划修复**：安排升级或为受影响的依赖项应用补丁'
- en: '**Validation** : Test the application after upgrades to ensure functionality
    is intact'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：在升级后测试应用程序以确保功能完好'
- en: '**Documentation** : Keep records of vulnerabilities found and actions taken'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档记录**：记录发现的漏洞和采取的行动'
- en: '**Risk management** : Balance the urgency of upgrades with the potential impact
    on the application'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**风险管理**：平衡升级的紧迫性与对应用程序可能产生的影响'
- en: '**Communication** : Coordinate with stakeholders to schedule necessary updates'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沟通**：与利益相关者协调以安排必要的更新'
- en: '**Fallback plans** : Have strategies in place in case an upgrade introduces
    issues'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回退计划**：在升级引入问题时制定策略'
- en: There is nothing inherently negative about this process, but there are risks
    that need to be understood.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程本身并没有固有的负面因素，但存在需要理解的风险。
- en: It is easy to have too many CVEs to mitigate at the same time. When the team
    decides to delay the security tasks, they can accumulate just before a release.
    This is a very common case and can cause important delays to a release.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 同时缓解太多的CVEs是很常见的情况。当团队决定推迟安全任务时，它们可能会在发布前积累。这是一个非常普遍的情况，可能会对发布造成重要延误。
- en: Summary
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The ever-evolving landscape of cybersecurity necessitates that Java software
    engineers remain vigilant and proactive in managing vulnerabilities within their
    applications. CVEs play a critical role in identifying and communicating known
    security issues, and understanding how to find, document, and remediate them is
    essential.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全领域的不断演变要求Java软件工程师在管理其应用程序中的漏洞时保持警惕和主动。CVEs在识别和传达已知的安全问题中发挥着关键作用，了解如何查找、记录和修复它们是至关重要的。
- en: By leveraging tools such as vulnerability scanners and implementing strategies
    such as continuous dependency upgrades, proactive updates, and reactive measures
    based on scan reports, developers can significantly enhance the security posture
    of their applications. Effective dependency management further reduces risks by
    controlling the components integrated into the software.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用漏洞扫描器等工具以及实施基于扫描报告的持续依赖项升级、主动更新和反应性措施，开发者可以显著提高其应用程序的安全态势。有效的依赖项管理通过控制集成到软件中的组件进一步降低风险。
- en: Staying informed through reputable sources such as the NVD and vendor advisories
    ensures that developers are aware of the latest threats and can act promptly.
    Integrating security practices into the development life cycle transforms security
    from a reactive afterthought into a proactive cornerstone of software development.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用NVD和供应商通告等信誉良好的来源来保持信息更新，确保开发者了解最新的威胁并能够迅速采取行动。将安全实践整合到开发生命周期中，将安全从被动反应转变为软件开发中的主动基石。
- en: In summary, managing CVEs is a multifaceted process that requires diligence,
    strategic planning, and the right tools. By embracing these practices, Java software
    engineers can contribute to creating more secure applications, protecting both
    their organizations and the end-users who rely on their software. In the next
    chapter, we will look at how generative AI can revolutionize the way we write
    tests for APIs, providing insights and techniques
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，管理CVE是一个多方面的过程，需要勤奋、战略规划和合适的工具。通过采用这些实践，Java软件工程师可以为创建更安全的应用程序做出贡献，保护他们的组织和依赖其软件的最终用户。在下一章中，我们将探讨生成式AI如何革命性地改变我们编写API测试的方式，提供见解和技术。
