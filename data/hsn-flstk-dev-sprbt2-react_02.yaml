- en: Using JPA to Create and Access a Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JPA创建和访问数据库
- en: This chapter covers how to use JPA with Spring Boot. We will create a database
    by using entity classes. In the first phase, we will be using the H2 in-memory
    database for development and demonstration purposes. H2 is an in-memory SQL database
    that is really good for fast development or demonstration purposes. In the second
    phase, we will move from H2 to use MariaDB. This chapter also describes the creation
    of CRUD repositories and a one-to-many connection between database tables.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何在Spring Boot中使用JPA。我们将使用实体类创建数据库。在第一阶段，我们将使用H2内存数据库进行开发和演示。H2是一个内存中的SQL数据库，非常适合快速开发或演示目的。在第二阶段，我们将从H2转移到使用MariaDB。本章还描述了CRUD存储库的创建以及数据库表之间的一对多连接。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下内容：
- en: Basics and benefits of using JPA
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JPA的基础知识和好处
- en: How to define a database by using entity classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用实体类定义数据库
- en: How to create Spring Boot backend with a database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot后端创建数据库
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Java SDK version 8 or higher is necessary for the usage of Spring Boot ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Boot需要Java SDK版本8或更高版本（[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。
- en: A MariaDB installation is necessary for the creation of the database application
    ([https://downloads.mariadb.org/](https://downloads.mariadb.org/)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建数据库应用程序，需要安装MariaDB（[https://downloads.mariadb.org/](https://downloads.mariadb.org/)）。
- en: Basics of ORM, JPA, and Hibernate
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM、JPA和Hibernate的基础知识和好处
- en: '**Object-Relational Mapping** (**ORM**) is a technique that allows you to fetch
    and manipulate from a database by using an object-oriented programming paradigm.
    ORM is really nice for programmers because it relies on object-oriented concepts,
    not on database structure. It also makes development much faster and reduces the
    amount of source code. ORM is mostly independent of the databases and developers
    don''t have to worry about vendor-specific SQL statements.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象关系映射**（**ORM**）是一种技术，允许您使用面向对象的编程范式从数据库中提取和操作数据。ORM对程序员来说非常好，因为它依赖于面向对象的概念，而不是数据库结构。它还可以加快开发速度，减少源代码量。ORM大多数独立于数据库，开发人员不必担心特定于供应商的SQL语句。'
- en: '**Java Persistent API** (**JPA**) provides object-relational mapping for Java
    developers. The JPA entity is a Java class that presents the structure of a database
    table. The fields of an entity class present the columns of the database tables.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java持久API**（**JPA**）为Java开发人员提供了对象关系映射。JPA实体是一个Java类，表示数据库表的结构。实体类的字段表示数据库表的列。'
- en: Hibernate is the most popular Java-based JPA implementation, and it is used
    in Spring Boot as a default. Hibernate is a mature product and it is widely used
    in large-scale applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate是最流行的基于Java的JPA实现，它在Spring Boot中作为默认使用。Hibernate是一个成熟的产品，在大型应用程序中被广泛使用。
- en: Creating the entity classes
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建实体类
- en: An entity class is a simple Java class that is annotated with JPA's  `@Entity`
    annotation. Entity classes use the standard JavaBean naming convention and have
    proper getter and setter methods. The class fields have private visibility.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类是一个简单的Java类，带有JPA的`@Entity`注解。实体类使用标准的JavaBean命名约定，并具有适当的getter和setter方法。类字段具有私有可见性。
- en: JPA creates a database table called the name of the class when the application
    is initialized. If you want to use some other name for the database table, you
    can use the `@Table` annotation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序初始化时，JPA会创建一个名为类名的数据库表。如果要为数据库表使用其他名称，可以使用`@Table`注解。
- en: 'To be able to use JPA and the H2 database, we have to add the following dependencies
    to the `pom.xml` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用JPA和H2数据库，我们必须将以下依赖项添加到`pom.xml`文件中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Following are the steps for creating entity classes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建实体类的步骤：
- en: To create an entity class in Spring Boot, we will first create our own package
    for entities. The package should be created under the root package.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Spring Boot中创建实体类，我们首先将为实体创建自己的包。该包应该在根包下创建。
- en: Activate the root package in Eclipse Project Explorer and right-click to show
    a menu.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse项目资源管理器中激活根包，右键单击显示菜单。
- en: 'From the menu, select New | Package. The following screenshot shows the creation
    of package for entity classes:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择New | Package。以下截图显示了为实体类创建包：
- en: '![](img/db4abdaa-1fcf-4e52-928d-76b55ab1a1a6.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db4abdaa-1fcf-4e52-928d-76b55ab1a1a6.png)'
- en: 'We name our package `com.packt.cardatabase.domain`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将包命名为`com.packt.cardatabase.domain`：
- en: '![](img/1a9b38e4-f800-4008-b706-12f225121521.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a9b38e4-f800-4008-b706-12f225121521.png)'
- en: 'Next, we create our entity class. Activate a new entity package, right-click,
    and select New | Class from the menu. Because we are going to create a car database,
    the name of the entity class is `Car`. Type `Car` in the Name field and then press
    the Finish button:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建实体类。激活一个新的实体包，右键单击，选择菜单中的New | Class。因为我们要创建一个汽车数据库，实体类的名称是`Car`。在`Name`字段中输入`Car`，然后按下`Finish`按钮：
- en: '![](img/8fe3af1e-49e2-480e-8e33-ba06ffa7429e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fe3af1e-49e2-480e-8e33-ba06ffa7429e.png)'
- en: 'Open the `Car` class file in the editor by double-clicking it in the project
    explorer. First, we have to annotate the class with the `@Entity` annotation.
    The `Entity` annotation is imported from the `javax.persistence` package:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中双击打开编辑器中的`Car`类文件。首先，我们必须使用`@Entity`注解对类进行注释。`Entity`注解从`javax.persistence`包中导入：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can use the *Ctrl* + *Shift* + *O* shortcut in Eclipse IDE to import missing
    packages automatically.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Eclipse IDE中的*Ctrl* + *Shift* + *O*快捷键自动导入缺少的包。
- en: 'Next, we add some fields to our class. The entity class fields are mapped to
    database table columns. The entity class must also contain a unique ID that is
    used as a primary key in the database:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为我们的类添加一些字段。实体类字段映射到数据库表列。实体类还必须包含一个唯一的ID，该ID用作数据库中的主键：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The primary key is defined by using the `@Id` annotation. The `@GeneratedValue`
    annotation defines that the ID is automatically generated by the database. We
    can also define our key generation strategy. Type `AUTO` means that the JPA provider
    selects the best strategy for a particular database. You can also create a composite
    primary key by annotating multiple attributes with the `@Id` annotation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@Id`注释定义主键。`@GeneratedValue`注释定义ID由数据库自动生成。我们还可以定义我们的键生成策略。类型`AUTO`表示JPA提供程序为特定数据库选择最佳策略。您还可以通过使用`@Id`注释对多个属性进行注释来创建复合主键。
- en: 'The database columns are named according to class field naming by default.
    If you want to use some other naming convention, you can use the `@Column` annotation.
    With the `@Column` annotation, you can also define the column''s length and whether
    the column is nullable. The following code shows an example of using the `@Column`
    annotation. With this definition, the column''s name in the database is `desc`
    and the length of the column is `512` and it is not nullable:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数据库列的命名按类字段命名。如果要使用其他命名约定，可以使用`@Column`注释。使用`@Column`注释，还可以定义列的长度以及列是否可为空。以下代码显示了使用`@Column`注释的示例。通过这个定义，在数据库中列的名称是`desc`，列的长度是`512`，并且它是不可为空的：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally we add getters, setters and constructors with attributes to the entity
    class. We don''t need an ID field in our constructor due to automatic ID generation.
    The source code of `Car` entity class constructors follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们为实体类添加getter、setter和带属性的构造函数。由于自动生成ID，我们不需要在构造函数中添加ID字段。`Car`实体类构造函数的源代码如下：
- en: Eclipse provides the automatic addition of getters, setters and constructors.
    Activate your cursor inside the class and right-click. From the menu, select Source
    | Generate Getters and Setters... or Source | Generate Constructor using fields...
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse提供了自动生成getter、setter和构造函数的功能。将光标放在类内并右键单击。从菜单中选择“Source | Generate Getters
    and Setters...”或“Source | Generate Constructor using fields...”
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is the source code of `Car` entity class getters and setters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Car`实体类的getter和setter的源代码：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The table called `car` must be created in the database when we run the application.
    To ensure that, we will add one new property to the `application.properties` file.
    This enables the logging of SQL statements to the console:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，数据库中必须创建名为`car`的表。为了确保这一点，我们将在`application.properties`文件中添加一个新属性。这将使SQL语句的日志记录到控制台：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now see the table creation statements when running the application:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行应用程序时，我们现在可以看到表创建语句：
- en: '![](img/5ea5f7d7-c3d8-45c4-a545-1fd6b27b0c94.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ea5f7d7-c3d8-45c4-a545-1fd6b27b0c94.png)'
- en: 'H2 provides a web-based console that can be used to explore a database and
    execute SQL statements. To enable the console, we have to add the following lines
    to the `application.properties` file. The first setting enables the H2 console
    and the second setting defines the endpoint that we can use to access the console:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: H2提供了一个基于Web的控制台，可用于探索数据库并执行SQL语句。要启用控制台，我们必须将以下行添加到`application.properties`文件中。第一个设置启用H2控制台，第二个设置定义了我们可以使用的端点来访问控制台：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can access the H2 console by navigating to `localhost:8080/h2-console`
    with the web browser. Use `jdbc:h2:mem:testdb` as the JDBC URL and leave the Password
    field empty in the login window. Press the Connect button to log in to the console:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Web浏览器中导航到`localhost:8080/h2-console`来访问H2控制台。在登录窗口中，使用`jdbc:h2:mem:testdb`作为JDBC
    URL，并在密码字段中留空。按下“连接”按钮登录到控制台：
- en: '![](img/54d517da-1a8d-4868-9a48-4853231caafe.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54d517da-1a8d-4868-9a48-4853231caafe.png)'
- en: 'Now you can see our `car` table in the database. You may notice that the register
    number has an underscore between the words. That is due to the camel case naming
    of the attribute (`registerNumber`):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在数据库中看到我们的`car`表。您可能会注意到注册号之间有一个下划线。这是由于属性（`registerNumber`）的驼峰命名法：
- en: '![](img/f8de2f11-fdfe-4ca4-9128-acb7e19e414c.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8de2f11-fdfe-4ca4-9128-acb7e19e414c.png)'
- en: Creating CRUD repositories
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建CRUD存储库
- en: The Spring Boot Data JPA provides a `CrudRepository` interface for CRUD operations.
    It provides CRUD functionalities to our entity class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot Data JPA为CRUD操作提供了`CrudRepository`接口。它为我们的实体类提供了CRUD功能。
- en: 'We will now create our repository in the `domain` package, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`domain`包中创建我们的存储库，如下所示：
- en: 'Create a new class called `CarRepository` in the `domain` package and modify
    the file according to the following code snippet:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`domain`包中创建一个名为`CarRepository`的新类，并根据以下代码片段修改文件：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our `CarRepository` now extends the Spring Boot JPA `CrudRepository` interface.
    `<Car, Long>` type arguments define that this is the repository for the `Car`
    entity class and the type of the ID field is long.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`CarRepository`现在扩展了Spring Boot JPA的`CrudRepository`接口。`<Car, Long>`类型参数定义了这是`Car`实体类的存储库，ID字段的类型是long。
- en: '`CrudRepository` provides multiple CRUD methods that we can now start to use.
    The following table lists the most commonly used methods:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`CrudRepository`提供了多个CRUD方法，我们现在可以开始使用。以下表列出了最常用的方法：'
- en: '| **Method** | **Description** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `long count()` | Returns the number of entities |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `long count()` | 返回实体的数量 |'
- en: '| `Iterable<T> findAll()` | Returns all items of given type |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `Iterable<T> findAll()` | 返回给定类型的所有项目 |'
- en: '| `Optional<T> findById(ID Id)` | Returns one item by id |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `Optional<T> findById(ID Id)` | 通过id返回一个项目 |'
- en: '| `void delete(T entity)` | Deletes an entity |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `void delete(T entity)` | 删除实体 |'
- en: '| `void deleteAll()` | Deletes all entities of the repository |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `void deleteAll()` | 删除存储库的所有实体 |'
- en: '| `<S extends T> save(S entity)` | Saves an entity |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `<S extends T> save(S entity)` | 保存实体 |'
- en: If the method returns only one item, the `Optional<T>` is returned instead of
    `T`. The `Optional` class gets introduced in Java 8 SE. `Optional` is a type of
    single value container that either has value or doesn't. By using `Optional`,
    we can prevent null pointer exceptions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方法只返回一个项目，则返回`Optional<T>`而不是`T`。`Optional`类在Java 8 SE中引入。`Optional`是一种单值容器类型，可以有值，也可以没有。通过使用`Optional`，我们可以防止空指针异常。
- en: 'Now we are ready to add some demonstration data to our H2 database. For that,
    we will use the Spring Boot `CommandLineRunner`. The `CommandLineRunner` interface
    allows us to execute additional code before the application has fully started.
    Therefore, it is a good point to add demo data to your database. `CommandLineRunner` 
    is located inside the main class:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备向我们的H2数据库添加一些演示数据。为此，我们将使用Spring Boot的`CommandLineRunner`。`CommandLineRunner`接口允许我们在应用程序完全启动之前执行额外的代码。因此，这是向数据库添加演示数据的好时机。`CommandLineRunner`位于主类中：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we have to inject our car repository into the main class into be able
    to save new car objects to the database. An `@Autowired` annotation is used to
    enable dependency injection. The dependency injection allows us to pass dependencies
    into a object. After we have injected the repository class, we can use the CRUD
    methods it provides. The following sample code shows how to insert a few cars
    to the database:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须将我们的car repository注入到主类中，以便能够将新的car对象保存到数据库中。使用`@Autowired`注解来启用依赖注入。依赖注入允许我们将依赖项传递给对象。在我们注入了存储库类之后，我们可以使用它提供的CRUD方法。以下示例代码显示了如何向数据库中插入一些汽车：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Insert` statements can be seen in the Eclipse console after the application
    has been executed:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert`语句可以在应用程序执行后在Eclipse控制台中看到：'
- en: '![](img/9eb6f592-c706-4423-9ac2-229f78df8ed1.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb6f592-c706-4423-9ac2-229f78df8ed1.png)'
- en: 'You can also use the H2 console to fetch cars from the database, as seen in
    the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用H2控制台从数据库中获取汽车，如下截图所示：
- en: '![](img/022a3422-30f9-449a-8c37-ec146b27ffc4.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/022a3422-30f9-449a-8c37-ec146b27ffc4.png)'
- en: 'You can define your own queries in the Spring Data repositories. The query
    must start with a prefix, for example, `findBy`. After the prefix, you define
    the entity class fields that are used in the query. The following is a sample
    code of three simple queries:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Spring Data存储库中定义自己的查询。查询必须以前缀开头，例如`findBy`。在前缀之后，您定义在查询中使用的实体类字段。以下是三个简单查询的示例代码：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There can be multiple fields after the `By` keyword, concatenated with the `And`
    or `Or` keywords:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`By`关键字之后可以有多个字段，使用`And`或`Or`关键字连接：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Queries can be sorted by using the `OrderBy` keyword in the query method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用查询方法中的`OrderBy`关键字对查询进行排序：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also create queries by using SQL statements, via the `@Query` annotation. 
    The following example shows the usage of a SQL query in `CrudRepository`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过`@Query`注解使用SQL语句创建查询。以下示例展示了在`CrudRepository`中使用SQL查询的用法：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can use also more advanced expressions with the `@Query` annotation, for
    example, `like`. The following example shows the usage of the `like` query in
    `CrudRepository`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`@Query`注解进行更高级的表达式，例如`like`。以下示例展示了在`CrudRepository`中使用`like`查询的用法：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Spring Data JPA also provides `PagingAndSortingRepository`, which extends `CrudRepository`.
    It offers methods for fetching entities using pagination and sorting.  This is
    a good option if you are dealing with larger amounts of data. `PagingAndSortingRepository`
    can be created similarly to what we did with `CrudRepository`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA还提供了`PagingAndSortingRepository`，它扩展了`CrudRepository`。它提供了使用分页和排序获取实体的方法。如果您处理大量数据，这是一个很好的选择。`PagingAndSortingRepository`可以类似于我们使用`CrudRepository`创建：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In this case, you now have the two new additional methods that the repository
    provides:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您现在拥有了存储库提供的两个新的附加方法：
- en: '| **Method** | **Description** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `Iterable<T> findAll(Sort sort)` | Returns all entities sorted by the given
    options  |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `Iterable<T> findAll(Sort sort)` | 返回按给定选项排序的所有实体 |'
- en: '| `Page<T> findAll(Pageable pageable)` | Returns all entities according to
    given paging options |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `Page<T> findAll(Pageable pageable)` | 根据给定的分页选项返回所有实体 |'
- en: Relationships between tables
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表之间的关系
- en: 'Next, we create a new table called `owner` that has a one-to-many relationship
    with the `car` table. The owner can own multiple cars, but a car can have only
    one owner. The following UML diagram shows the relationship between the tables:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个名为`owner`的新表，它与`car`表具有一对多的关系。所有者可以拥有多辆汽车，但一辆汽车只能有一个所有者。以下的UML图显示了表之间的关系：
- en: '![](img/97ade669-bf1f-4f12-bdec-5fe34cf5d487.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97ade669-bf1f-4f12-bdec-5fe34cf5d487.png)'
- en: 'The following are the steps for creating a new table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建新表的步骤：
- en: 'First, we create the `Owner` entity and repository in the `domain` package.
    The `Owner` entity and repository are created similarly to what we did with the `Car` class.
    The following is the source code of the `Owner` entity class and `OwnerRepository`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`domain`包中创建`Owner`实体和存储库。`Owner`实体和存储库的创建方式与`Car`类相似。以下是`Owner`实体类和`OwnerRepository`的源代码：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this phase, it is good to check that everything is done correctly. Run the
    project and check that both database tables are created and that there are no
    errors in the console. The following screenshot shows the console messages when
    tables are created:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，检查一切是否正确完成是很重要的。运行项目并检查数据库表是否都已创建，并且控制台中没有错误。下面的截图显示了在创建表时控制台的消息：
- en: '![](img/6f219664-b827-48a6-974a-789cac7ba8df.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f219664-b827-48a6-974a-789cac7ba8df.png)'
- en: 'Now, our domain package contains two entity classes and repositories:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的domain包含两个实体类和存储库：
- en: '![](img/0aac2b0d-6e2e-447a-a717-9de4535894c4.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aac2b0d-6e2e-447a-a717-9de4535894c4.png)'
- en: 'The one-to-many relationship can be added by using the `@ManyToOne` and `@OneToMany`
    annotations. In the car entity class, which contains a foreign key, you will define
    the relationship with the `@ManyToOne` annotation. Also, add the getter and setter
    for the owner field. It is recommended using `FetchType.LAZY` for all associations.
    For `toMany` relationships, that is the default value, but for `toOne` relationships,
    you should define it. `FetchType` defines the strategy for fetching data from
    the database. The value can be either `EAGER` or `LAZY`. In our case, the lazy
    strategy means that when the owner is fetched from the database, all the cars
    associated with the owner will be fetched when needed. `Eager` means that the
    cars will be fetched immediately with the owner. The following source code shows
    how to define a one-to-many relationship in the `Car` class:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一对多关系可以通过使用`@ManyToOne`和`@OneToMany`注解来添加。在包含外键的汽车实体类中，您将使用`@ManyToOne`注解定义与所有者的关系。还要为所有者字段添加getter和setter。建议对所有关联使用`FetchType.LAZY`。对于`toMany`关系，这是默认值，但对于`toOne`关系，您应该定义它。`FetchType`定义了从数据库中获取数据的策略。该值可以是`EAGER`或`LAZY`。在我们的情况下，懒惰策略意味着当从数据库中获取所有者时，将在需要时获取与所有者关联的所有汽车。`Eager`意味着汽车将立即与所有者一起获取。以下源代码显示了如何在`Car`类中定义一对多关系：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the owner entity site, the relationship is defined with the `@OneToMany`
    annotation. The type of the field is `List<Car>` because the owner may have multiple
    cars. Add also the getter and setter for that:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有者实体站点上，使用`@OneToMany`注解定义了关系。字段的类型是`List<Car>`，因为所有者可能拥有多辆汽车。还为此添加getter和setter：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `@OneToMany` annotation has two attributes that we are using. The `cascade`
    attribute defines how cascading affects the entities. The attribute setting `ALL`
    means that if the owner is deleted, the cars linked to that owner are deleted
    as well. The `mappedBy="owner"` attribute setting tells us that the `Car` class
    has the owner field, which is the foreign key for this relationship.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`@OneToMany`注解有两个我们正在使用的属性。`cascade`属性定义了级联如何影响实体。属性设置`ALL`意味着如果所有者被删除，与该所有者关联的汽车也将被删除。`mappedBy="owner"`属性设置告诉我们`Car`类具有所有者字段，这是该关系的外键。'
- en: 'When you run the project, you can see from the console that the relationship
    is now created:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行项目时，您可以从控制台看到关系现在已经创建：
- en: '![](img/65c81d66-5d5c-4226-97d8-3cc6cd3ec050.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65c81d66-5d5c-4226-97d8-3cc6cd3ec050.png)'
- en: 'Now, we can add some owners to the database with `CommandLineRunner`. Let''s
    also modify the `Car` entity classes constructor and add an owner there:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`CommandLineRunner`向数据库添加一些所有者。让我们还修改`Car`实体类的构造函数并在那里添加一个所有者：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We first create two owner objects and save these to the database. For saving
    the owners, we also have to inject the `OwnerRepository` into the main class.
    Then we connect the owners to the cars by using the `Car` constructor. The following
    is the source code of the application main class `CardatabaseApplication`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建两个所有者对象并将其保存到数据库中。为了保存所有者，我们还必须将`OwnerRepository`注入到主类中。然后我们通过`Car`构造函数将所有者连接到汽车。以下是应用程序主类`CardatabaseApplication`的源代码：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you now run the application and fetch cars from the database, you can see
    that the owners are now linked to the cars:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行应用程序并从数据库中获取汽车，您会发现所有者现在与汽车关联起来了。
- en: '![](img/13e22a64-525c-4c56-8c71-1352688039b9.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13e22a64-525c-4c56-8c71-1352688039b9.png)'
- en: 'If you want to create many-to-many relationship instead, which means, in practice,
    that an owner can have multiple cars and a car can have multiple owners, you should
    use the `@ManyToMany` annotation. In our example application, we will use a one-to-many
    relationship, but there follows an example of how to change the relationship to
    many-to-many. In a many-to-many relationship, it is recommended using `Set` instead
    of `List` with hibernate:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要创建多对多关系，也就是说，在实践中，一个所有者可以拥有多辆汽车，一辆汽车可以有多个所有者，您应该使用`@ManyToMany`注解。在我们的示例应用程序中，我们将使用一对多关系，但以下是如何将关系更改为多对多的示例。在多对多关系中，建议使用`Set`而不是`List`与hibernate一起使用：
- en: 'In the `Car` entity class many-to-many relationship, define the getters and
    setters in the following way:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Car`实体类的多对多关系中，以以下方式定义getter和setter：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the owner entity, the definition as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有者实体中，定义如下：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, if you run the application, there will be a new join table that is created
    between the `car` and `owner` tables. The join table is defined by using the `@JoinTable`
    annotation. With the annotation, we can set the name of the join table and join
    columns. The following is a screenshot of the database structure when using a
    many-to-many relationship:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果运行应用程序，将创建一个新的连接表，该表位于`car`和`owner`表之间。使用`@JoinTable`注解定义连接表。通过该注解，我们可以设置连接表的名称和连接列。以下是在使用多对多关系时数据库结构的屏幕截图：
- en: '![](img/586b87e4-1b95-4af1-b41d-9e95b1440794.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/586b87e4-1b95-4af1-b41d-9e95b1440794.png)'
- en: Setting up the MariaDB database
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置MariaDB数据库
- en: 'Now, we switch our database from H2 to MariaDB. The database tables are still
    created automatically by JPA. But before we run our application, we have to create
    a database for it. The database can be created by using HeidiSQL. Open HeidiSQL,
    and follow these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将数据库从H2切换到MariaDB。数据库表仍然由JPA自动创建。但在运行应用程序之前，我们必须为其创建一个数据库。可以使用HeidiSQL创建数据库。打开HeidiSQL，并按照以下步骤操作：
- en: Right-click your mouse inside the database list.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击数据库列表中的鼠标。
- en: 'Then, select New | Database:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择新建|数据库：
- en: '![](img/bc77682b-cdf2-4ded-87cc-11e37a6790d8.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc77682b-cdf2-4ded-87cc-11e37a6790d8.png)'
- en: 'Let''s name our database `cardb`. After you press OK, you should see the new
    `cardb` in the database list:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数据库命名为`cardb`。按下OK后，您应该在数据库列表中看到新的`cardb`：
- en: '![](img/a92e8240-513d-4ce7-bdfe-c4b20b8441be.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a92e8240-513d-4ce7-bdfe-c4b20b8441be.png)'
- en: 'In the application, we add a MariaDB dependency to the `pom.xml` file and remove
    the H2 dependency that we don''t need any more:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中，我们向`pom.xml`文件添加了MariaDB依赖项，并删除了不再需要的H2依赖项：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `application.properties` file, you define the database connection. First,
    you will define the database''s `url`, `username`, `password` and database driver
    class. The `spring.jpa.generate-ddl` setting defines whether JPA should initialize
    the database (`true`/`false`). The `spring.jpa.hibernate.ddl-auto` setting defines
    the behavior of the database initialization. The possible values are `none`, `validate`,
    `update`, `create`, and `create-drop`. Create-drop means that the database is
    created when an application starts and it is dropped when the application is stopped.
    Create-drop is also a default value if you don''t define any. Create value only
    creates the database when the application is started. Update value creates the
    database and updates the schema if it is changed:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`application.properties`文件中，您定义了数据库连接。首先，您将定义数据库的`url`、`username`、`password`和数据库驱动程序类。`spring.jpa.generate-ddl`设置定义了JPA是否应初始化数据库（`true`/`false`）。`spring.jpa.hibernate.ddl-auto`设置定义了数据库初始化的行为。可能的值有`none`、`validate`、`update`、`create`和`create-drop`。Create-drop意味着在应用程序启动时创建数据库，并在应用程序停止时删除数据库。如果您不定义任何值，create-drop也是默认值。Create值仅在应用程序启动时创建数据库。Update值创建数据库并在架构更改时更新架构。
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, after running the application, you should see the tables in MariaDB. The
    following screenshot shows the HeidiSQL UI after the database has been created.
    Your application is now ready to be used with MariaDB:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在运行应用程序后，您应该在MariaDB中看到表。以下截图显示了数据库创建后的HeidiSQL UI。您的应用程序现在已准备好与MariaDB一起使用：
- en: '![](img/13b4481b-9fd1-4995-9b3c-51bf2e2af457.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13b4481b-9fd1-4995-9b3c-51bf2e2af457.png)'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we used JPA to create our Spring Boot application database.
    First, we created entity classes, which are mapped to database tables. Then, we
    created `CrudRepository` for our entity class and that provides CRUD operations
    for the entity. After that, we managed to add some demo data to our database by
    using `CommandLineRunner`. We also created one-to-many relations between two entities.
    At the beginning of the chapter, we used the H2 in-memory database, while at the
    end, we switched the database to MariaDB. In the next chapter we will create RESTful
    web service to our backend.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用JPA来创建Spring Boot应用程序数据库。首先，我们创建了实体类，这些类映射到数据库表。然后，我们为我们的实体类创建了`CrudRepository`，它为实体提供了CRUD操作。之后，我们通过使用`CommandLineRunner`成功向我们的数据库添加了一些演示数据。我们还在两个实体之间创建了一对多的关系。在本章的开头，我们使用了H2内存数据库，而在结尾，我们将数据库切换到了MariaDB。在下一章中，我们将为我们的后端创建RESTful
    web服务。
- en: Questions
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are ORM, JPA, and Hibernate?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ORM、JPA和Hibernate是什么？
- en: How can you create an entity class?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建实体类？
- en: How can you create `CrudRepository`?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建`CrudRepository`？
- en: How does the `CrudRepository` provide for your application?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CrudRepository`如何为您的应用程序提供支持？'
- en: How can you create a one-to-many relationship between tables?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在表之间创建一对多的关系？
- en: How can you add demo data to a database with Spring Boot?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用Spring Boot向数据库添加演示数据？
- en: How can you access the H2 console?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何访问H2控制台？
- en: How can you connect your Spring Boot application to MariaDB?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将Spring Boot应用程序连接到MariaDB？
- en: Further reading
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning Spring Boot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他学习Spring Boot的资源：
- en: '[https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition](https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition](https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition)'
- en: '[https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course](https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course](https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course)'
