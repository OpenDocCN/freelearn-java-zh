- en: 'Chapter 2: Software Requirements – Collecting, Documenting, Managing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：软件需求 – 收集、记录、管理
- en: Collecting requirements is arguably one of the most frustrating activities in
    software production for several reasons. Difficulties often arise because it is
    never completely clear who the owner is, as well as because architects cannot
    do a good design without certain requisites, and developers, of course, can't
    do a proper job without the designs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 收集需求可能是软件生产中最令人沮丧的活动之一，原因有很多。困难往往源于谁才是所有者的身份从未完全明确，以及架构师无法在没有某些要求的情况下进行良好的设计，当然，开发者没有设计也无法做好工作。
- en: However, it is fairly common practice for a development team to start doing
    something without a complete requirements collection job because there is no time.
    Indeed, what often happens, especially in regards to large and complex projects,
    is that the milestones are put in place before the project scope is completely
    defined. In this industry, since software is an intangible product (not like a
    building or a bridge), budget approval is usually a more *fluid* process. Therefore,
    it's not unusual to have a project approved before all the details (including
    requirements, feasibility, and architectural design) are fully defined. Needless
    to say, this is an inherently bad practice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，开发团队在没有完成完整的需求收集工作的情况下开始做某事是一种相当常见的做法，因为时间不允许。确实，在大型和复杂项目中，通常是在项目范围完全定义之前就设定了里程碑。在这个行业中，由于软件是一种无形的产品（不像建筑或桥梁），预算批准通常是一个更**灵活**的过程。因此，在所有细节（包括需求、可行性和架构设计）完全定义之前就批准一个项目并不罕见。不用说，这是一个固有的不良做法。
- en: In this chapter, we will look at different techniques for requirements gathering
    and analysis in order to increase the quality of our software deliverables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨收集和分析需求的不同技术，以提高我们软件交付成果的质量。
- en: 'You will learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习以下内容：
- en: 'The different types of requirements: **functional** and **non-functional**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的需求类型：**功能**和**非功能**
- en: What characteristics a requisite must have
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个需求必须具备哪些特征
- en: How to formalize requirements in standard formats
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以标准格式正式化需求
- en: How to collect requirements by using agile and interactive techniques
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用敏捷和互动技术收集需求
- en: 'Once you have completed this chapter, you will be able to organize productive
    requirements gathering sessions and document them in a clear way. Being able to
    collect and properly document requisites can be a real gamechanger for your career
    in software development in several ways:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将能够组织高效的需求收集会议并以清晰的方式记录它们。能够收集和正确记录需求可以在你的软件开发职业生涯中以多种方式带来真正的变革：
- en: The quality of the software you produce will be better, as you will focus on
    what's really needed and be able to prioritize well.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你生产的软件质量将更好，因为你将专注于真正需要的东西，并能很好地进行优先级排序。
- en: You will have a better understanding of the language of business and the needs
    of your customers, and you will therefore implement features that better fit their
    needs.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将更好地理解商业语言和客户的需求，因此将实现更符合他们需求的功能。
- en: You will have the possibility to run informal and interactive sessions on requirements
    gathering. (As an example, see the *Event Storming* section.)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将有机会进行非正式和互动的需求收集会议。（例如，参见*事件风暴*部分。）
- en: You will have a primer about international standards in software requirements
    specifications, which may be a hard constraint in some environments (for example,
    when working for regulated industries such as government or healthcare).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将了解软件需求规格的国际标准，这在某些环境中可能是一个硬性约束（例如，在为政府或医疗保健等受监管行业工作时）。
- en: Since requirements collection and management is a practice mostly unrelated
    to a specific programming language, this chapter doesn't directly reference Java
    technology.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需求收集和管理是一种与特定编程语言无关的实践，因此本章不直接引用Java技术。
- en: Now, let's start exploring the discipline of software requirements engineering.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始探索软件需求工程的学科。
- en: Introducing requirements engineering
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍需求工程
- en: From a purely metaphorical perspective, if an algorithm is similar to a food
    recipe, a software requirement is the order we place at a restaurant. But the
    similarity probably ends here. When we order our food, we pick a specific dish
    from a discrete list of options, possibly with some small amount of *fine tuning*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从纯粹比喻的角度来看，如果一个算法类似于食物食谱，那么软件需求就像我们在餐厅下的订单。但相似之处可能到此为止。当我们点食物时，我们从离散的选项列表中选择一个特定的菜肴，可能还有一些小的调整。
- en: 'Also, continuing with our example, the software requirement has a longer and
    more complex life cycle (think about the testing and evolution of the requirement
    itself), while the food order is very well timeboxed: the customer places the
    order and receives the food. In the worst case, the customer will dislike the
    food received (like a user acceptance test going wrong), but it''s unusual to
    evolve or change the order. Otherwise, everything is okay when the customer is
    happy and the cook has done a great job (at least for that particular customer).
    Once again, unlike the software requirement life cycle, you will likely end up
    with bug fixes, enhancements, and so forth.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，继续我们的例子，软件需求有一个更长且更复杂的生命周期（想想需求的测试和演变本身），而食物订单则非常明确地时间限制：顾客下单并收到食物。在最坏的情况下，顾客可能会不喜欢收到的食物（就像用户验收测试出错一样），但通常不会演变或更改订单。否则，当顾客满意且厨师做得很好（至少对那位特定顾客来说）时，一切正常。再次强调，与软件需求生命周期不同，你可能会结束于错误修复、增强等。
- en: Requirements for software projects are complex and can be difficult to identify
    and communicate. Software requirements engineering is an unusual job. It requires
    a concerted effort by the customer, the architect, the product manager, and sometimes
    other various professionals. *But what does a technical requirement actually look
    like?*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 软件项目的需求复杂，可能难以识别和传达。软件需求工程是一项不寻常的工作。它需要客户、架构师、产品经理以及有时其他各种专业人士的共同努力。*但技术需求实际上是什么样子呢？*
- en: Feature, Advantage, and Benefit
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特性、优势、利益
- en: As we will see in a few sections, requirements collection involves many different
    professionals working together to shape what the finished product will look like.
    These professionals usually fall into two groups, business-aware and technology-aware.
    You should of course expect those two groups to have different visions and use
    different languages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们将在接下来的几节中看到的，需求收集涉及许多不同的专业人士共同工作，以塑造最终产品的样子。这些专业人士通常分为两组，即业务意识和技术意识。当然，你应该期待这两个组有不同的愿景和不同的语言。
- en: A good way to build common ground and facilitate understanding between these
    two groups is to use the **Feature, Advantage, and Benefit logical flow**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**特性、优势、利益逻辑流程**是建立这两组之间的共同基础并促进理解的好方法。
- en: This popular framework, sometimes referred to as **FAB**, is a marketing and
    sales methodology used to build messaging around a product. While it may not seem
    immediately relevant in the requirements gathering phase, it is worth looking
    at.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流行的框架，有时被称为**FAB**，是一种营销和销售方法，用于围绕产品构建信息。虽然它可能在需求收集阶段看起来并不直接相关，但它值得一看。
- en: 'In the FAB framework, the following apply:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在FAB框架中，以下适用：
- en: A **Feature** is an inherent product characteristic, strictly related to what
    the product can do.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特性**是产品的固有特性，严格与产品能做什么相关。'
- en: The **Advantage** can be defined as what you achieve when using a particular
    Feature. It is common to have more than one Advantage linked to the same technical
    feature.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优势**可以定义为使用特定特性时所实现的内容。通常，与同一技术特性相关联的优势不止一个。'
- en: The **Benefit** is the final reason why you would want to use the Feature. If
    you want, it's one further step of abstraction starting from advantages, and it
    is common to have more than one Benefit linked to the same feature.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益**是你想使用特性的最终原因。如果你愿意，它是从优势开始的进一步抽象步骤，通常与同一特性相关联的利益不止一个。'
- en: 'Let''s see an example of FAB, related to the mobile payment example that we
    are carrying over from the previous chapter:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个FAB的例子，它与我们在上一章中延续的移动支付例子相关：
- en: A **Feature** is the possibility of authorizing payments with biometric authentication
    (such as with your fingerprint or face ID). That's just the technical aspect,
    directly related to the way the application is implemented.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特性**是指使用生物识别认证（如指纹或面部识别）进行支付的可能性。这只是技术方面，直接与应用程序的实现方式相关。'
- en: The related **Advantage** is that you don't need to insert a PIN or password
    (and overall, you will need a simpler interaction with your device – possibly
    just one touch). That's what the feature will enable, in terms of usage of the
    application.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关的**优势**是您不需要输入PIN或密码（并且总体上，您将与您的设备进行更简单的交互——可能只需要一个触摸）。这就是特性将实现的应用程序使用方面的内容。
- en: The linked **Benefit** is that your payments will be faster and easier. But
    another benefit can be that your payments will also be safer (no one will steal
    your PIN or password). That's basically the reason why you may want to use this
    particular feature.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关的**好处**是您的支付将更快、更简单。但另一个好处可能是您的支付也将更安全（没有人会偷您的PIN或密码）。这基本上是您可能想要使用这个特定特性的原因。
- en: As you can imagine, a non-technical person (for example, a salesperson or the
    final customer) will probably think of each requirement in terms of benefits or
    advantages. And that's the right way to do it. However, having reasoning on the
    FAB flow could help in having a uniform point of view, and possibly *repositioning*
    desiderata into features and eventually requirements. We can look at a simple
    example regarding user experience.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以想象的，一个非技术人员（例如，销售人员或最终客户）可能会从好处或优势的角度来考虑每个需求。这是正确的做法。然而，在FAB流程上有推理可以帮助保持统一的观点，并且可能将期望重新定位为特性和最终需求。我们可以看看一个关于用户体验的简单例子。
- en: Sticking with our mobile payments sample application, a requirement that business
    people may want to think about is the advantages that the usage of this solution
    will bring.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持我们的移动支付示例应用，商业人士可能想要考虑的是使用此解决方案将带来的优势。
- en: One simple example of a requirement could be to have a list of payments easily
    accessible in the app. A feature linked to that example would allow the customers
    to see their transaction list immediately after logging into the system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的需求例子可能是让用户在应用中轻松访问支付列表。与这个例子相关的特性将允许客户在登录系统后立即查看他们的交易列表。
- en: In order to complete our flow, we should also think about the benefits, which
    in this case could be described as the ability to keep your expenses under control.
    However, this could also work the other way around. When reasoning with more tech-savvy
    stakeholders, it's easier to focus on product features.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的流程，我们还应该考虑好处，在这种情况下，这可能被描述为控制费用的能力。然而，这也可能相反。在与更懂技术的利益相关者进行推理时，更容易关注产品特性。
- en: You may come up with a feature such as *a user currently not provisioned in
    the system should be presented with a demo version of the application*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会提出一个特性，例如*一个当前未在系统中配置的用户应该看到应用的演示版本*。
- en: The advantage here is having an easy way to try the application's functionalities.
    The benefit of this for customers is that they can try the application before
    signing up for an account. The benefit for the business is that they have free
    advertising to potentially draw in more customers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的优势是有一个简单的方式来尝试应用程序的功能。对于客户来说，好处是他们可以在注册账户之前尝试应用程序。对于企业来说，好处是他们有免费广告，可能吸引更多客户。
- en: You might now ask, *so what am I looking for, when doing requirements gathering,
    that is, searching for features?* There are no simple answers here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能会问，*在进行需求收集，也就是寻找特性时，我在寻找什么？* 这里没有简单的答案。
- en: My personal experience says that a feature may be directly considered a requirement,
    or, more often, be composed of more than one requirement. However, your mileage
    may vary depending on the type of product and the kind of requirements expressed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人的经验表明，一个特性可能直接被视为需求，或者更常见的是，由多个需求组成。然而，具体到产品类型和需求表达方式，你的体验可能会有所不同。
- en: One final thing to note about the FAB reasoning is that it will help with clustering
    requirements (by affinity to similar requirements or benefits), and with prioritizing
    them (depending on which benefit is the most important).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于FAB推理的最后一件事要注意的是，它将有助于聚类需求（根据相似的需求或好处），以及优先排序它们（取决于哪个好处最重要）。
- en: Now we have a simple process to link the technical qualities of our product
    to business impacts. However, we haven't yet defined exactly what a requirement
    is and what its intrinsic characteristics are. Let's explore what a requirement
    looks like.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个简单的过程来将我们产品的技术特性与业务影响联系起来。然而，我们还没有确切地定义什么是需求以及它的内在特征。让我们探索一下需求看起来是什么样子。
- en: Features and technical requirements
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特性和技术需求
- en: 'As we saw in the previous section, requirements are usually strictly related
    to the **features** of the system. Depending on who is posing the request, requirements
    can be specified with varying amounts of technical detail. A requirement may be
    as low-level as the definition of an API or other software interfaces, including
    arguments and quantitative input validation/outcome. Here is an example of what
    a detailed, technically specified requirement may look like:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，需求通常与系统的**功能**紧密相关。根据提出请求的人，需求可以以不同程度的技术细节进行指定。一个需求可能低到定义API或其他软件接口的程度，包括参数和定量输入验证/结果。以下是一个详细的技术性需求示例：
- en: '*When entering the account number (string, six characters), the system must
    return the profile information. Result code as* `int` *(0 if operation is successful),
    name as* `string`*, and surname as* `string` *[...]. In the case of account in
    an invalid format, the system must return a result code identifying the reason
    of the fault, as per a mapping table to be defined.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*当输入账号号码（字符串，六位字符）时，系统必须返回个人资料信息。结果代码为* `int` *(成功时为0)，姓名为* `string`*，姓氏为*
    `string`* [……]。如果账号格式无效，系统必须返回一个结果代码，以标识错误的原因，按照待定义的映射表进行。*'
- en: Often requirements are less technical, identifying more behavioral aspects of
    the system. In this case, drawing on the model we discussed in the previous section
    (*Feature, Advantage, and Benefit*), we are talking about something such as a
    feature or the related advantage.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，需求的技术性较低，更多地识别系统的行为方面。在这种情况下，根据我们在上一节中讨论的模型（*功能、优势和利益*），我们谈论的是诸如功能或相关优势之类的东西。
- en: 'An example here, for the same functionality as before, may look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，与之前的功能相同，可能看起来是这样的：
- en: '*The user must have the possibility to access their profile, by entering the
    account number.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*用户必须能够通过输入账号号码来访问他们的个人资料。*'
- en: It's easy to understand that a non-technical requirement must be detailed in
    a quantitative and objective way before being handed over to development teams.
    *But what makes a requirement quantitative and objective?*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易理解，在交付给开发团队之前，非技术性需求必须以定性和客观的方式进行详细说明。*但什么使需求具有定性和客观性？*
- en: Types and characteristics of requirements
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求的类型和特性
- en: There are a number of characteristics that make a requirement effective, meaning
    easy to understand and respondent to the customer expectations in a non-ambiguous
    way.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多特性使需求有效，意味着易于理解，并以非歧义的方式满足客户期望。
- en: 'From my personal point of view, in order to be effective, a requirement must
    be the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从我个人观点来看，为了有效，需求必须具备以下特点：
- en: '**Consistent**: The requirement must not conflict with other requirements or
    existing functionalities unless this is intentional. If it is intentional (for
    example, we are removing old functionalities or fixing wrong behaviors), the new
    requirement must explicitly override older requirements, and it''s probably an
    attention point since corner cases and conflicts are likely to happen.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：需求不得与其他需求或现有功能冲突，除非这是故意的。如果是故意的（例如，我们正在删除旧功能或修复错误行为），新的需求必须明确覆盖旧需求，这可能是需要注意的点，因为边缘情况和冲突很可能会发生。'
- en: '**Implementable**: This means, first of all, that the requirement should be
    feasible. If our system requires a direct brain interface to be implemented, this
    of course will not work (at least today). Implementable further means that the
    requirement must be achievable in the right amount of time and at the right cost.
    If it needs 100 years to be implemented, it''s in theory feasible but probably
    impractical.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可实施性**：这首先意味着需求应该是可行的。如果我们的系统需要实现直接的大脑接口，这当然是不行的（至少在今天是这样）。可实施性还意味着需求必须在合理的时间内和合理的成本下实现。如果需要100年才能实现，从理论上讲是可行的，但可能不太实用。'
- en: Moreover, these points need to be considered within the context of the current
    project, since although it may be easy to implement something in one environment
    it may not be feasible in another. For example, if we were a start-up, we could
    probably launch a brand-new service on our app that would have little impact on
    the existing userbase. If we were a big enterprise, however, with a large customer
    base and consolidated access patterns, this may need to be evaluated more thoroughly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些点需要在当前项目的背景下考虑，因为尽管在一种环境中实现某事可能很容易，但在另一种环境中可能不可行。例如，如果我们是一家初创公司，我们可能可以在我们的应用程序上推出一项全新的服务，这对现有用户群的影响可能很小。然而，如果我们是一家大型企业，拥有庞大的客户群和固化的访问模式，这可能需要更彻底的评估。
- en: '**Explicit**: There should be no room for interpretation in a software requirement.
    Ambiguity is likely to happen when the requirement is defined in natural language,
    given that a lot of unspoken data is taken erroneously for granted. For this reason,
    it is advised to use tables, flowcharts, interface mockups, or whatever schema
    can help clarify the natural language and avoid ambiguity. Also, straightforward
    wording, using defined quantities, imperative verbs, and no metaphors, is strongly
    advised.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明确性**：软件需求中不应存在任何解释空间。当需求以自然语言定义时，由于很多未言明的数据被错误地视为理所当然，因此很可能会出现歧义。因此，建议使用表格、流程图、界面原型或任何有助于阐明自然语言并避免歧义的方案。此外，建议使用直接的语言，使用定义的数量，祈使动词，并且不使用隐喻。'
- en: '**Testable**: In the current development philosophies, heavily focused on experimentation
    and trial and error (we will see more on this in the upcoming chapters), a requirement
    must be translated in a software test case, even better if it can be fully automated.
    While it may be expected that the customer doesn''t have any knowledge of software
    testing techniques, it must be possible to put testing scenarios on paper, including
    things such as tables of the expected outputs over a significant range of inputs.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可测试性**：在当前的开发哲学中，高度关注实验和试错（我们将在接下来的章节中了解更多），一个需求必须被翻译成软件测试用例，如果能完全自动化则更好。虽然可能预期客户对软件测试技术没有了解，但必须有可能将测试场景记录在纸上，包括诸如在广泛输入范围内的预期输出表等。'
- en: The QA department may, at a later stage, complement this specification with
    a wider range of cases, in order to test things such as input validation, expected
    failures (for example, in the case of inputs too large or malformed), and error
    handling. Security departments may dig into this too, by testing malicious inputs
    (for example, SQL injections).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 质量保证部门可能在稍后阶段，通过更广泛的案例来补充这个规范，以测试诸如输入验证、预期失败（例如，输入过大或格式不正确的情况）和错误处理等问题。安全部门也可能通过测试恶意输入（例如，SQL注入）来深入研究这个问题。
- en: This very last point leads us to think about the technical consequences of a
    requirement. As we were saying at the beginning of this chapter, requirements
    are commonly exposed as business features of the system (with a technical standpoint
    that can vary in the level of detail).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后一点引导我们思考需求的技術后果。正如我们在本章开头所说的，需求通常被暴露为系统的业务特性（其技术立场可能因细节程度的不同而有所变化）。
- en: However, there are *implicit* requirements, which are not part of a specific
    business use case but are essential for the system to work properly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，存在一些**隐含**的要求，它们不是特定业务用例的一部分，但对于系统正常工作至关重要。
- en: 'To dig deeper into this concept, we must categorize the requirements into three
    fundamental types:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解这个概念，我们必须将需求分为三种基本类型：
- en: '**Functional requirements**: Describing the business features of the system,
    in terms of expected behavior and use cases to be covered. These are the usual
    business requirements impacting the use cases provided by the system to be implemented.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能需求**：描述系统的业务特性，从预期的行为和要覆盖的使用案例来定义。这些是通常影响要实施系统的用例的常规业务需求。'
- en: '**Non-functional requirements**: Usually not linked to any specific use case,
    these requirements are necessary for the system to work properly. Non-functional
    requirements are not usually expressed by the same users defining functional requirements.
    Those are usually about implicit aspects of the application, necessary to make
    things work. Examples of non-functional requirements include performance, security,
    and portability.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非功能性需求**：通常不与任何特定用例相关联，这些需求对于系统正常运行是必要的。非功能性需求通常不是由定义功能性需求的同一用户表达的。它们通常关于应用的隐含方面，对于使事物正常工作是必要的。非功能性需求的例子包括性能、安全和可移植性。'
- en: '**Constraints**: Implicit requirements are usually considered a *must* and
    are mandatory. These include external factors and things that need to be taken
    for granted, such as obeying laws and regulations and complying with standards
    (both internal and external to the company).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束**：隐含需求通常被视为“必须”的，是强制性的。这包括外部因素和需要视为理所当然的事情，例如遵守法律和法规以及符合标准（公司内部和外部）。 '
- en: One example here could be the well-known **General Data Protection Regulation**
    (**GDPR**), the EU law about data protection and privacy, which you have to comply
    with if you operate in Europe. But you may also have to comply with the industry
    standards depending on the particular market in which you are operating (that's
    pretty common when working with banks and payments), or even standards enforced
    by the company you are working with. A common example here is the compatibility
    of the software (such as when it has to be compatible with a certain version of
    an operating system or a particular browser).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可以举一个例子，那就是广为人知的**通用数据保护条例**（**GDPR**），这是关于数据保护和隐私的欧盟法律，如果你在欧洲运营，就必须遵守。但根据你运营的特定市场，你可能还必须遵守行业标准（当与银行和支付公司合作时这种情况很常见），甚至是你所在公司强制执行的标准。一个常见的例子是软件的兼容性（例如，当它必须与某个操作系统的特定版本或特定浏览器兼容时）。
- en: Now that we've seen the different types of requirements and their characteristics,
    let's have a look at the life cycle of software requirements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了不同类型的需求及其特征，让我们来看看软件需求的生命周期。
- en: The life cycle of a requirement
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求的生命周期
- en: 'The specification of a requirement is usually not immediate. It starts with
    an idea of how the system should work to satisfy a use case, but it needs reworking
    and detailing in order to be documented. It must be checked against (or mixed
    with) non-functional requirements, and of course, may change as the project goes
    on. In other words, the life cycle of requirements can be summarized as follows.
    Each phase has an output, which is the input for the following one (the path could
    be non linear, as we will see):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 需求的规范通常不是立即的。它始于一个关于系统应该如何工作以满足用例的想法，但需要重新工作和详细说明才能被记录下来。它必须与非功能性需求（或与之混合）进行核对，当然，随着项目的进行可能会发生变化。换句话说，需求的生命周期可以总结如下。每个阶段都有一个输出，这是下一个阶段的输入（路径可能是非线性的，正如我们将看到的）：
- en: '**Gathering**: Collection of use cases and desired system features, in an unstructured
    and raw format. This is done in various ways, including interviews, collective
    sketches, and brainstorming meetings, including both the customer and the internal
    team. **Event Storming** (which we will see soon) is a common structured way to
    conduct brainstorming meetings, but less structured techniques are commonly used
    here, such as using sticky notes to post ideas coming from both customers and
    internal teams. In this phase, the collection of data usually flows freely without
    too much elaboration, and people focus more on the creative process and less on
    the details and impact of the new features. The output for this phase is an unstructured
    list of requirements, which may be collected in an electronic form (a spreadsheet
    or text document), or even just a photograph of a wall with sticky notes.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收集**：以非结构化和原始格式收集用例和期望的系统功能。这可以通过多种方式完成，包括访谈、集体草图和头脑风暴会议，包括客户和内部团队。**事件风暴法**（我们很快就会看到）是进行头脑风暴会议的一种常见结构化方法，但在这里通常使用较少结构化的技术，例如使用便利贴来张贴来自客户和内部团队的创意。在这个阶段，数据的收集通常自由流动，不需要太多阐述，人们更关注创造性过程，而不是新功能的细节和影响。这个阶段的输出是一个非结构化的需求列表，可能以电子形式（电子表格或文本文档）收集，甚至只是一张贴有便利贴的墙的照片。'
- en: '**Vetting**: As a natural follow-up, in this phase the requirements output
    from the previous phase is roughly analyzed and categorized. Contradicting and
    unfeasible topics must be addressed. It''s not unusual to go back and forth between
    this phase and the previous one. The output here is still an unstructured list,
    similar to the one we got from the previous step. But we started to polish it,
    by removing duplicates, identifying the requirements that need more details, and
    so on.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审查**：作为一个自然的后续步骤，在这个阶段，对前一阶段输出的需求进行大致分析和分类。必须解决矛盾和不可行的话题。在这个阶段来回走动并不罕见。这里的输出仍然是一个非结构化的列表，类似于我们从前一阶段得到的列表。但我们开始对其进行润色，通过删除重复项、识别需要更多细节的需求等。'
- en: '**Analysis**: In this phase, it''s time to conduct a deeper analysis of the
    output from the previous phase. This includes identifying the impact of the implementation
    of every new feature, analyzing the completeness of the requirement (desired behavior
    on a significant list of inputs, corner cases, and validation), and the prioritization
    of the requirement. While not necessary, it is not unusual in this case to have
    a rough idea of the implementation costs of each requirement. The output from
    this step is a far more stable and polished list, basically a subset of the input
    we got. But we are still talking about the unstructured data (not having an ID
    or missing some details, for example), which is what we are going to address in
    the next phase.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：在这个阶段，我们需要对前一阶段输出的内容进行更深入的分析。这包括识别每个新功能实施的影响、分析需求的完整性（对一系列重要输入、边缘情况和验证的期望行为）、以及需求的优先级。虽然不是必需的，但在这个阶段对每个需求的实施成本有一个大致的了解并不罕见。这一步骤的输出是一个更加稳定和完善的列表，基本上是输入的一个子集。但我们仍在讨论非结构化数据（例如，没有ID或缺少一些细节），这是我们将在下一阶段解决的问题。'
- en: '**Specification**: Given that we''ve completed the study of each requirement,
    it''s now time to document it properly, capturing all the aspects explored so
    far. We may already have drafts and other data collected during the previous phases
    (for example, schemas on paper, whiteboard pictures, and so on) that just need
    to be transcribed and polished. The documentation redacted in this phase has to
    be accessible and updatable throughout the project. This is essential for tracking
    purposes. As an output of this phase, you will have each requirement checked and
    registered in a proper way, in a document or by using a tool. There are more details
    on this in the *Collecting requirements – formats and tools* section of this chapter.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规范**：鉴于我们已经完成了每个需求的研究，现在是时候对其进行适当的记录，捕捉到目前为止探索的所有方面。我们可能已经在前一阶段收集了草案和其他数据（例如，纸上的模式、白板图片等），只需转录和润色即可。这一阶段编写的文档在整个项目期间必须可访问和可更新。这对于跟踪目的至关重要。这一阶段的输出将是每个需求都经过检查并以适当的方式记录，无论是通过文档还是使用工具。关于这一点，本章的“收集需求
    – 格式和工具”部分有更多细节。'
- en: '**Validation**: Since we got the formal documentation of each requirement as
    an output of the previous phase, it is a best practice to double-check with the
    customer whether the final rework covers their needs. It is not unusual for, after
    seeing the requirements on paper, a step back to the gathering phase to have to
    be made in order to refocus on some use cases or explore new scenarios that have
    been uncovered during the previous phases. The output of this phase has the same
    format as the output of the previous phase, but you can expect some changes in
    the content (such as priorities or adding/removing details and contents). Even
    if some rework is expected, this data can be considered as a good starting point
    for the development phase.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：由于我们已经从前一阶段得到了每个需求的正式文档作为输出，因此与客户进行双重检查，以确保最终的重工覆盖了他们的需求，是一种最佳实践。在看到需求在纸上后，为了重新关注某些用例或探索前一阶段中揭露的新场景，有时需要回到收集阶段，这是不常见的。这一阶段的输出格式与前一阶段的输出格式相同，但你可以期待内容（如优先级或添加/删除细节和内容）有所变化。即使预期会有一些重工作业，这些数据也可以被认为是开发阶段的一个良好起点。'
- en: 'So, the requirement life cycle can be seen as a simple workflow. Some steps
    directly lead to the next, while sometimes you can loop around phases and step
    backward. Graphically, it may look like the following diagram:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，需求生命周期可以看作是一个简单的流程。有些步骤直接导致下一步，而有时你可以循环回到阶段并后退一步。从图形上看，它可能看起来像以下图表：
- en: '![Figure 2.1 – Software requirements lifecycle'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – 软件需求生命周期]'
- en: '](img/Figure_2.01_B16354.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.01](img/Figure_2.01_B16354.jpg)'
- en: Figure 2.1 – Software requirements life cycle
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 软件需求生命周期
- en: As you can see in the previous diagram, software requirements specification
    is often more than a simple phase of the software life cycle. Indeed, since requirements
    shape the software itself, they may follow a workflow on their own, evolving and
    going through iterations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的图中可以看到的，软件需求规格说明书往往不仅仅是软件生命周期的一个简单阶段。实际上，由于需求塑造了软件本身，它们可能遵循自己的工作流程，不断演变并经历迭代。
- en: As per the first step of this flow, let's have a look at requirements gathering.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个流程的第一步，让我们来看看需求收集。
- en: Discovering and collecting requirements
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现和收集需求
- en: The first step in the requirements life cycle is **gathering**. Elicitation
    is an implicit part of that. Before starting to vet, analyze, and ultimately document
    the requirements, you need to start the conversation and start ideas flowing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 需求生命周期的第一步是**收集**。需求提取是其中的一个隐含部分。在开始审查、分析和最终记录需求之前，你需要开始对话并让想法流动。
- en: To achieve this, you need to have the right people in the room. It may seem
    trivial, but often it is not clear who the source of requirements should be (for
    example, the business, a vague set of people including sales, executive management,
    project sponsors, and so on). *Even if you manage to have those people onboard,
    who else is relevant for requirement collection?*
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，你需要房间里的人选正确。这看起来可能微不足道，但通常并不清楚需求的来源应该是谁（例如，业务部门，包括销售、高管、项目赞助人等在内的一个模糊的人群）。*即使你设法让这些人参与进来，还有谁对需求收集是相关的？*
- en: 'There is no golden rule here, as it heavily depends on the project environment
    and team composition:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有金科玉律，因为它严重依赖于项目环境和团队构成：
- en: You will need for sure some **senior technical resources**, usually lead architects.
    These people will help by giving initial high-level guidance on technical feasibility
    and ballpark effort estimations.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你肯定需要一些**高级技术资源**，通常是首席架构师。这些人将通过提供关于技术可行性和大致工作量估计的初步高级指导来帮助。
- en: Other useful participants are **enterprise architects** (or business architects),
    who could be able to evaluate the impact of the solution on the rest of the enterprise
    processes and technical architectures. These kinds of profiles are of course more
    useful in big and complex enterprises and can be less useful in other contexts
    (such as start-ups). As a further consideration, experienced people with this
    kind of background can suggest well-known solutions to problems, compared with
    similar applications already in use (or even reusing functionalities where possible).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他有用的参与者是**企业架构师**（或业务架构师），他们能够评估解决方案对整个企业流程和技术架构的影响。这类角色当然在大型和复杂的企业中更有用，在其他环境中（如初创公司）可能不那么有用。作为进一步的考虑，具有这种背景的经验丰富的人可以针对已知问题提出已知解决方案，与已经使用的类似应用（甚至可能在可能的情况下重用功能）进行比较。
- en: '**Quality engineers** can be a good addition to the team. While they may be
    less experienced in technical solutions and existing applications, they can think
    about the suggested requirements in terms of test cases, narrowing them down and
    making them more specific, measurable, and testable.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量工程师**可以作为团队的好补充。虽然他们可能在技术解决方案和现有应用方面经验较少，但他们可以从测试用例的角度思考建议的需求，缩小范围并使它们更加具体、可衡量和可测试。'
- en: '**Security specialists** can be very helpful. Thinking about security concerns
    early in the software life cycle can help to avoid surprises later on. While not
    exhaustive, a quick assessment of the security impacts of proposed requirements
    can be very useful, increasing the software quality and reducing the need to rework.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全专家**可以非常有帮助。在软件生命周期的早期考虑安全问题是避免后期出现意外的好方法。虽然不是详尽的，但快速评估提议需求的安全影响可能非常有用，提高软件质量并减少返工的需要。'
- en: Now that we have all the required people in a room, let's look at a couple of
    exercises to break the ice and keep ideas flowing to nail down our requirements.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经把所有需要的人聚集到了一起，让我们看看一些破冰和保持想法流动的练习，以便确定我们的需求。
- en: The first practice we will look at is the **lean canvas**. This exercise is
    widely used in the start-up movement, and it focuses on bringing the team together
    to identify what's important in your idea, and how it will stand out from the
    competition.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探讨的第一个实践是**精益画布**。这项练习在创业运动中被广泛使用，它侧重于将团队聚集在一起，确定你的想法中哪些是重要的，以及它将如何区别于竞争。
- en: The lean canvas
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精益画布
- en: The **lean canvas** is a kind of holistic approach to requirements, focusing
    on the product's key aspects, and the overall business context and sustainability.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**精益画布**是一种对需求的整体方法，关注产品的关键方面，以及整体商业环境和可持续性。'
- en: Originating as a tool for start-ups, this methodology was developed by Ash Maurya
    (book author, entrepreneur, and CEO at LEANSTACK) as an evolution/simplification
    of the Business Model Canvas, which is a similar approach created by Alexander
    Osterwalder and more oriented to the business model behind the product. This method
    is based on a one-page template to gather solution requirements out of a business
    idea.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最初作为一种针对初创企业的工具，这种方法论是由Ash Maurya（本书作者、企业家和LEANSTACK的首席执行官）开发的，它是商业画布（由亚历山大·奥斯特瓦尔德创建的一种类似方法，更侧重于产品的商业模式）的演变/简化。这种方法基于一个单页模板，用于从商业想法中收集解决方案需求。
- en: 'The template is made of nine segments, highlighting nine crucial aspects that
    the final product must have:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 模板由九个部分组成，突出了最终产品必须具备的九个关键方面：
- en: '![Figure 2.2  – The lean canvas scaffold'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 – 精益画布框架'
- en: '](img/Figure_2.02_B16354.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.02_B16354.jpg)'
- en: Figure 2.2 – The lean canvas scaffold
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 精益画布框架
- en: 'Note that the numbering of each segment reflects the order in which the sections
    should be filled out. Here is what each segment means:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每个部分的编号反映了填写各部分应遵循的顺序。以下是每个部分的意义：
- en: '**Problem**: *What issues will our customers solve by using our software product?*'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**问题**：*我们的客户通过使用我们的软件产品将解决哪些问题？*'
- en: '**Customer Segments**: *Who is the ideal person to use our software product
    (that is, the person who has the problems that our product will solve)?*'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**客户群体**：*谁是我们软件产品的理想用户（即，有我们产品将解决的问题的人）？*'
- en: '**Unique Value Proposition**: *Why is our software product different from other
    potential alternatives solving similar problems?*'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**独特价值主张**：*为什么我们的软件产品与其他解决类似问题的潜在替代品不同？*'
- en: '**Solution**: *How will our software product solve the problems in section
    1?*'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解决方案**：*我们的软件产品将如何解决第1节中的问题？*'
- en: '**Channels**: *How will we reach our target customer?* (This is strictly related
    to how we will market our software solution.)'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**渠道**：*我们将如何接触我们的目标客户？*（这与我们将如何营销我们的软件解决方案直接相关。）'
- en: '**Revenue Streams**: *How we will make money out of our software solution?*'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收入来源**：*我们将如何从我们的软件解决方案中赚钱？*'
- en: '**Cost Structure**: *How much will it cost to build, advertise, and maintain
    our software solution?*'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**成本结构**：*构建、广告和维护我们的软件解决方案需要多少成本？*'
- en: '**Key Metrics**: *What are the key numbers that need to be used to monitor
    the health of the project?*'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**关键指标**：*需要使用哪些关键数字来监控项目的健康状况？*'
- en: '**Unfair Advantage**: *What''s something that this project has that no one
    else can copy/buy?*'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不公平优势**：*这个项目有什么是其他人无法复制/购买的？*'
- en: The idea is to fill each of these areas with one or more propositions about
    the product's characteristics. This is usually done as a team effort in an informal
    setting. The canvas is pictured on a whiteboard, and each participant (usually
    product owners, founders, and tech leads) contributes ideas by sticking Post-it
    notes in the relevant segments. A *postprocess* collective phase usually follows,
    grouping similar ideas, ditching the less relevant ideas, and prioritizing what's
    left in each segment.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是在每个这些区域填充一个或多个关于产品特性的命题。这通常是在非正式环境中作为团队工作完成的。画布在白板上展示，每个参与者（通常是产品所有者、创始人和技术负责人）通过在相关部分粘贴便利贴来贡献想法。通常随后是一个*后处理*集体阶段，将类似的想法分组，淘汰不那么相关的想法，并优先考虑每个部分剩下的内容。
- en: As you can see, the focus here is shifted toward the feasibility of the overall
    project, instead of the detailed list of features and the specification. For this
    reason, this methodology is often used as a support for doing elevator pitches
    to potential investors. After this first phase, if the project looks promising
    and sustainable from the business model point of view, other techniques may be
    used to create more detailed requirement specifications, including the ones already
    discussed, and more that we will see in the next sections.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里的重点转向了整个项目的可行性，而不是详细的功能列表和规格。因此，这种方法论通常用作向潜在投资者进行电梯演讲的支持。在这个第一阶段之后，如果从商业模式的角度来看，项目看起来有希望且可持续，可以使用其他技术来创建更详细的需求规范，包括已经讨论过的，以及我们将在下一节中看到的更多内容。
- en: While the lean canvas is more oriented to the business model and how this maps
    into software features, in the next section we will explore Event Storming, which
    is a discovery practice usually more focused on the technical modeling of the
    solution.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然精益画布更多地面向业务模型以及它如何映射到软件功能，但在下一节中，我们将探讨事件风暴，这是一种通常更专注于解决方案技术建模的发现实践。
- en: Event Storming
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件风暴
- en: '**Event Storming** is an agile and interactive way to discover and design business
    processes and domains. It was described by Alberto Brandolini (IT consultant and
    founder of the Italian Domain Driven Design community) in a now-famous blog post,
    and since then has been widely used and perfected.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件风暴**是一种敏捷和互动的方式来发现和设计业务流程和领域。它由阿尔贝托·布兰多利尼（IT顾问和意大利领域驱动设计社区创始人）在一篇现在广为人知的博客文章中描述，自那时起已被广泛使用并不断完善。'
- en: The nice thing about this practice is that it is very friendly and nicely supports
    brainstorming and cross-team collaboration.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实践的好处是它非常友好，并且很好地支持头脑风暴和跨团队合作。
- en: To run an Event Storming session, you have to collect the right people from
    across various departments. It usually takes at least business and IT, but you
    can give various different flavors to this kind of workshop, inviting different
    profiles (for example, security, UX, testers) to focus on different points of
    view.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行一个事件风暴会议，你需要从各个部门收集合适的人。通常至少需要业务和IT部门，但你可以为这种工作坊提供各种不同的风味，邀请不同背景的人（例如，安全、UX、测试人员）来关注不同的观点。
- en: When you have the right mix of people in the room, you can use a tool to help
    them interact with each other. When using physical rooms (the workshop can also
    be run remotely), the best tool is a wall plus sticky notes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当房间里有了合适的人的组合时，你可以使用一个工具来帮助他们相互交流。当使用物理房间（工作坊也可以远程进行）时，最好的工具是一面墙和便利贴。
- en: The aim of the exercise is to design a business process from the user's point
    of view. *So how do you do that?*
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的目的是从用户的角度设计业务流程。*那么你该如何做呢？*
- en: You start describing **domain events** related to the user experience (for example,
    a recipient is selected). Those domain events are transcribed on a sticky note,
    traditionally orange, and posted to the wall respecting the temporal sequence.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你开始描述与用户体验相关的**领域事件**（例如，选择一个收件人）。这些领域事件被转录在传统的橙色便利贴上，并按照时间顺序贴在墙上。
- en: You then focus on what has caused the domain event. If the cause is a user interaction
    (for example, the user picks a recipient from a list), it's known as a **command**
    and tracked as a blue sticky note, posted close to the related event.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你关注导致领域事件的根本原因。如果原因是用户交互（例如，用户从列表中选择一个收件人），它被称为**命令**，并以蓝色便利贴的形式跟踪，贴在相关事件附近。
- en: You may then draft the **user** behind the command (for example, a customer
    of the bank). This means drafting a persona description of the user carrying out
    the command, tracking it on a yellow sticky note posted close to the command.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以接着草拟命令背后的**用户**（例如，银行的客户）。这意味着草拟一个执行命令的用户的人物描述，并在命令附近的黄色便利贴上跟踪它。
- en: If domain events are generated from other domain events (for example, the selected
    recipient is added to the recently used contacts), they are simply posted close
    to each other.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果领域事件是由其他领域事件生成的（例如，选定的收件人被添加到最近使用的联系人中），它们只是简单地贴在一起。
- en: If there are interactions with **external systems** (for example, the recipient
    is sent to a CRM system for identification), they are tracked as pink sticky notes
    and posted near to the related domain event.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有与**外部系统**的交互（例如，收件人被发送到CRM系统进行识别），它们以粉色便利贴的形式跟踪，并贴在相关领域事件附近。
- en: 'Let''s have a look at a simple example of Event Storming. The following is
    just a piece of a bigger use case; this subset concisely represents the access
    of a user to its transactions list. The use case is not relevant here, it''s just
    an example to show the main components of this technique:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看事件风暴的一个简单示例。以下只是更大用例的一部分；这个子集简洁地表示了用户对其交易列表的访问。用例在这里并不重要，它只是用来展示这种技术的主要组成部分：
- en: '![Figure 2.3 – The Event Storming components'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.3 – 事件风暴组件'
- en: '](img/Figure_2.03_B16354.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.03_B16354.jpg)'
- en: Figure 2.3 – The Event Storming components
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – 事件风暴组件
- en: In the diagram, you can see a small but complete subset of an Event Storming
    session, including stickies representing the different components (**User**, **Command**,
    and **Domain Events**) and the grouping representing the aggregates.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，你可以看到事件风暴会议的一个小但完整的子集，包括代表不同组件（**用户**、**命令**和**领域事件**）的便签以及代表聚合的分组。
- en: '*What do you achieve from this kind of representation?*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*你从这个类型的表示中获得了什么？*'
- en: A shared understanding of the overall process.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对整体过程的共同理解。
- en: A clustering of events and commands, identifying the so-called **aggregates**.
    This concept is very important for the modeling of the solution, and we will come
    back to this in [*Chapter 4*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089),
    *Best Practices for Design and Development*, when talking about Domain-Driven
    Design.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件和命令的聚类，识别所谓的**聚合**。这个概念对于解决方案的建模非常重要，我们将在[*第4章*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089)“设计和开发最佳实践”中再次讨论这个问题，当谈到领域驱动设计时。
- en: The visual identification of bottlenecks and unclear links between states of
    the system.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统状态的瓶颈和状态之间不明确的链接的视觉识别。
- en: It's important to note that this methodology is usually seen as a scaffold.
    You may want to customize it to fit your needs, tracking different entities, sketching
    simple user interfaces to define commands, and so on. Moreover, these kinds of
    sessions are usually iterative. Once you've reached a complete view, you can restart
    the session with a different audience to further enrich or polish this view, to
    focus on subdomains and so on.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这种方法通常被视为一个框架。你可能希望根据你的需求进行定制，跟踪不同的实体，绘制简单的用户界面来定义命令，等等。此外，这类会议通常是迭代的。一旦你达到了完整的视图，你可以与不同的受众重新开始会议，以进一步丰富或完善这个视图，专注于子领域等。
- en: In the following section, we will explore some alternative discovery practices.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些替代的发现实践。
- en: More discovery practices
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多发现实践
- en: Requirements gathering and documentation is somewhat of a composite practice.
    You may find that after brainstorming sessions (for example, a lean canvas, Event
    Storming, or other comparable practices), other requirement engineering techniques
    may be needed to complete the vision and explore some scenarios that surfaced
    during the other sessions. Let's quickly explore these other tools so you can
    add them to your toolbox.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 收集需求和文档是一种综合性的实践。你可能会发现，在头脑风暴会议（例如，精益画布、事件风暴或其他类似实践）之后，可能还需要其他的需求工程技术来完成愿景并探索在会议中出现的某些场景。让我们快速探索这些其他工具，以便你可以将它们添加到你的工具箱中。
- en: Questionnaires
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问卷调查
- en: Questions and answers are a very simple and concise way of capturing fixed points
    about a software project. If you are capable of compiling a comprehensive set
    of questions, you can present your questionnaire to the different stakeholders
    to collect answers and compare the different points of view.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 提问和回答是捕捉关于软件项目固定点的非常简单和简洁的方式。如果你能够编制一套全面的提问，你可以向不同的利益相关者展示你的问卷以收集答案并比较不同的观点。
- en: The hard part is building such a list of questions. You may have some ideas
    from previous projects, but given that questions and answers are quite a *closed-path*
    exercise, it isn't particularly helpful if you are at the very beginning of the
    project. Indeed, it is not the best method to use if you are starting from a blank
    page, as it's not targeted at nurturing creative solutions and ideas. For this
    reason, I would suggest proceeding with this approach mostly to detail ideas and
    use cases that surfaced in other ways (for example, after running brainstorming
    sessions).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 困难的部分是构建这样一个问题列表。你可能从以前的项目中获得了一些想法，但鉴于问题和答案是相当*封闭路径*的练习，如果你处于项目的初期，这并不是特别有帮助。实际上，如果你是从一张白纸开始，这不是最佳的方法，因为它不是针对培养创造性的解决方案和想法的。因此，我建议主要使用这种方法来详细说明以其他方式出现的想法和用例（例如，在运行头脑风暴会议之后）。
- en: Mockups and proofs of concepts
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原型和概念验证
- en: An excellent way to clarify ideas is to directly test what the product will
    look like by playing with a subset of functionalities (even if fake or just stubbed).
    If you can start to build cheap prototypes, or even just mockups (fake interfaces
    with no real functionalities behind the scenes), you may be able to get non-technical
    stakeholders and final users on board sooner, as you give them the opportunity
    to interact with the product instead of having to imagine it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 明确想法的一个绝佳方法是直接通过操作产品功能的一个子集（即使这些功能是虚假的或只是占位符）来测试产品的外观。如果你能开始构建低成本的原型，或者仅仅是模拟（没有后台真实功能的虚假界面），你可能会更快地将非技术利益相关者和最终用户纳入其中，因为他们有机会与产品互动，而不是仅仅想象它。
- en: This is particularly useful in UX design, and for showcasing different solutions.
    Moreover, in modern development, this technique can be evolved toward a shorter
    feedback loop (release early, release often), having the stakeholders test alpha
    releases of the product instead of mockups so they can gain an understanding of
    what the final product will look like and change the direction as soon as possible.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这在用户体验设计中尤其有用，并且可以展示不同的解决方案。此外，在现代开发中，这种技术可以演变成更短的反馈循环（尽早发布，经常发布），让利益相关者测试产品的
    alpha 版本而不是模拟，这样他们可以了解最终产品的样子，并尽快改变方向。
- en: A/B testing
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A/B 测试
- en: 'A further use for this concept is to have the final users test by themselves
    and drive the product evolution. This technique, known as **A/B testing**, is
    used in production by high-performing organizations and requires some technological
    support to be implemented. The principle is quite simple: you pick two (or more)
    alternative features, put them into production, and measure how they perform.
    In an evolutionary design, the best performing will survive, while the others
    will be discarded.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念的另一个用途是让最终用户自行测试并推动产品进化。这种被称为**A/B 测试**的技术被高性能组织在生产中应用，并需要一些技术支持来实现。其原理相当简单：你选择两个（或更多）替代功能，将它们投入生产，并衡量它们的性能。在进化设计中，表现最好的将生存下来，而其他将被淘汰。
- en: As you can imagine, the devil is in the details here. Implementing more alternatives
    and discarding some of them may be expensive, so often there are just minor differences
    between them (for example, the color or position of elements in the UI). Also,
    the performance must be measurable in an objective way, for example, in e-commerce
    you might measure the impact on purchases, or in advertising the conversions of
    banners and campaigns.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，这里的难点在于细节。实施更多替代方案并淘汰其中一些可能会很昂贵，因此它们之间通常只有细微的差别（例如，UI 元素的颜色或位置）。此外，性能必须以客观的方式进行衡量，例如，在电子商务中，你可能衡量对购买的影响，或在广告中衡量横幅和活动的转化率。
- en: Business intelligence
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 商业智能
- en: Another tool to complete and flesh out the requirement list is **business intelligence**.
    This might mean sending surveys to potential customers, exploring competitor functionalities,
    and doing general market research. You should not expect to get a precise list
    of features and use cases by using only this technique, but it may be useful for
    completing your view about the project or coming up with some new ideas.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于完善和充实需求列表的工具是**商业智能**。这可能意味着向潜在客户发送调查，探索竞争对手的功能，以及进行一般市场研究。你不应期望仅使用这种方法就能得到精确的功能和用例列表，但它可能有助于完善你对项目的看法或产生一些新想法。
- en: You may want to check whether your idea for the finished system resonates with
    final customers, how your system compares with competitors, or whether there are
    areas in which you could do better/be different. This tool may be used to validate
    your idea or gather some last pieces to complete the picture. Looking at *Figure
    2.1*, this is something you may want to do during the validation phase.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想检查你的最终系统想法是否与最终客户产生共鸣，你的系统与竞争对手相比如何，或者是否有可以做得更好/不同的领域。这个工具可以用来验证你的想法或收集一些最后的拼图碎片。查看*图
    2.1*，这是验证阶段你可能想要做的事情。
- en: Now, we have collected a wide set of requirements and points of view. Following
    the requirements life cycle that we saw at the beginning of this chapter, it is
    now time for requirements analysis.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经收集了大量需求和观点。按照我们在本章开头看到的生命周期，现在是进行需求分析的时候了。
- en: Analyzing requirements
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析需求
- en: The discovery practices that we've seen so far mostly cover the gathering and
    vetting of requirements. We've basically elicited from the stakeholders details
    of the desired software functionalities and possibly started organizing them by
    clustering, removing duplicates, and resolving macroscopic conflicts.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止所看到的发现实践主要涵盖了需求的收集和审查。我们基本上从利益相关者那里获取了期望的软件功能的详细信息，并可能开始通过聚类、删除重复项和解决宏观冲突来组织它们。
- en: In the analysis phase, we are going to further explore the implications of the
    requirements and complete our vision of what the finished product should look
    like. Take into account that product development is a fluid process, especially
    if you are using modern project management techniques (more on that in [*Chapter
    5*](B16354_05_Final_JM_ePUB.xhtml#_idTextAnchor109), *Exploring the Most Common
    Development Models*). For this reason, you should consider that most probably
    not every requirement defined will be implemented, and certainly not everything
    will be implemented in the same release – you could say we are shooting at a moving
    target. Moreover, it is highly likely that more requirements will be developed
    later on.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析阶段，我们将进一步探讨需求的影响，并完善我们对最终产品应如何呈现的愿景。考虑到产品开发是一个流动的过程，尤其是如果你正在使用现代项目管理技术（更多内容请参阅[*第五章*](B16354_05_Final_JM_ePUB.xhtml#_idTextAnchor109)，*探索最常见的发展模型*)，因此你应该考虑，可能不会实施每个定义的需求，并且肯定不会在同一个版本中实施所有内容——可以说我们是在射击一个移动的目标。此外，很可能在以后还会开发出更多需求。
- en: For this reason, requirements analysis will probably be performed each time,
    in an iterative approach. Let's start with the first aspect you should consider
    when analyzing the requirements.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，需求分析可能每次都会进行，采用迭代的方法。让我们从分析需求时应考虑的第一个方面开始。
- en: Checking for coherence and feasibility
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查连贯性和可行性
- en: In the first section, we clearly stated that a requirement must be consistent
    and implementable. That is what we should look for in the analysis phase.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们明确指出，需求必须是连贯且可实现的。这就是我们在分析阶段应该寻找的。
- en: There is no specific approach for this. It's a kind of qualitative activity,
    going through requirements one by one and cross-checking them to ensure they are
    not conflicting with each other. With big and complex requirement sets, this activity
    may be seen as a *first pass*, as no explicit conflict may arise later during
    design and implementation. Similar considerations may be made with regard to feasibility.
    In this phase, it's important to catch the big issues and identify the requirements
    that seem to be unfeasible, however, more issues can arise during later phases.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，没有特定的方法。它是一种定性活动，逐个审查需求并交叉检查以确保它们之间没有冲突。对于大型和复杂的需求集，这项活动可能被视为一个*初步审查*，因为在设计和实施过程中可能不会出现明确的冲突。在可行性方面，也可以进行类似的考虑。在这个阶段，重要的是要抓住大的问题，并识别出看似不可行的需求，然而，在后续阶段可能会出现更多的问题。
- en: If incoherent or unfeasible requirements are spotted, it's crucial to review
    them with the relevant stakeholders (usually business), in order to reconsider
    the related features, and make changes. From time to time, small changes to the
    requirement can make it feasible. A classic scenario is related to picking a subset
    of the data or making similar compromises. In our mobile payments example, it
    may not be feasible to show instantaneously the whole list of transactions updated
    in real time, however, it could be a good compromise to show just a subset of
    them (for example, last year) or have a small visualization delay (for example,
    a few seconds) when new transactions occur.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现了不连贯或不可行的需求，与相关利益相关者（通常是业务部门）进行审查是至关重要的，以便重新考虑相关的功能，并做出更改。不时地对需求进行小的修改可以使它变得可行。一个经典的场景是与选择数据子集或做出类似的妥协有关。在我们的移动支付示例中，可能无法立即显示实时更新的整个交易列表，然而，仅显示其中的一部分（例如，去年的数据）或在新交易发生时有一定的可视化延迟（例如，几秒钟）可能是一个好的折衷方案。
- en: Checking for explicitness and testability
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查明确性和可测试性
- en: Continuing with requirements characteristics, it is now time to check the explicitness
    and testability of each requirement. This may be a little more systematic and
    quantitative compared to the previous section. Essentially, you should run through
    the requirements one by one and check whether each requirement is expressed in
    a defined way, making it easy to understand whether the implementation has been
    completed correctly. In other words, the requirement must be testable and it is
    best if it is testable in an objective and automatable way.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 继续检查需求特征，现在是时候检查每个需求的具体性和可测试性了。这可能与上一部分稍微系统化和量化一些。本质上，你应该逐个检查需求，看每个需求是否以定义的方式表达，以便容易理解实施是否正确完成。换句话说，需求必须是可测试的，最好是客观和可自动化的方式可测试。
- en: Testing for explicitness brings with it the concept of completeness. Once a
    requirement (and the related feature) is accepted, all the different paths must
    be covered in order to provide the product with predictable behavior in most foreseeable
    situations. While this may seem hard and complex, in most situations it's enough
    to play with possible input ranges and conditional branches to make sure all the
    possible paths are covered. Default cases are another important aspect to consider;
    if the software doesn't know how to react to particular conditions it's a good
    idea to define reasonable, standard answers to fall into.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对明确性的测试带来了完整性的概念。一旦一个需求（以及相关的功能）被接受，就必须覆盖所有不同的路径，以便在大多数可预见的情况下为产品提供可预测的行为。虽然这可能看起来很困难且复杂，但在大多数情况下，只需玩弄可能的输入范围和条件分支，以确保所有可能的路径都被覆盖即可。默认情况是另一个需要考虑的重要方面；如果软件不知道如何对特定条件做出反应，那么定义合理的、标准的答案以供参考是个好主意。
- en: Checking non-functional requirements and constraints
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查非功能性需求和约束
- en: As the last step, it's important to run through the requirements list, looking
    for non-functional requirements and constraints. The topic here is broad and subjective.
    It's likely not possible (nor useful) to explicate all the non-functional requirements
    and constraints and put them on our list. Most of them are shared with existing
    projects, regulated by external parties, or simply not known.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，重要的是要遍历需求列表，寻找非功能性需求和约束。这个话题很广泛且主观。很可能不可能（也不实用）明确所有非功能性需求和约束并将它们列入我们的清单。其中大部分与现有项目共享，受外部机构监管，或者简单地未知。
- en: However, there are areas that have an important impact on the project implementation,
    and for this reason, must be considered in the analysis phase.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些领域对项目实施具有重要影响，因此，在分析阶段必须予以考虑。
- en: One usual suspect here is security. All the considerations about user sessions,
    what to do with unauthenticated users, and how to manage user logins and such
    have implications for the feasibility and complexity of the solution, other than
    having an impact on the user experience. Analog reasoning can be made for performance.
    As seen in the *Checking for coherence and feasibility* section, small changes
    in the amount of data and the expected performances of the system may make all
    the difference. It's not unusual to have non-technical staff neglecting these
    aspects or expecting unreasonable targets. Agreeing (and negotiating) on the expected
    result is a good way to prevent issues later in the project.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个常见问题是安全问题。关于用户会话、对未认证用户应采取什么措施、以及如何管理用户登录等问题，除了对用户体验产生影响外，还会对解决方案的可行性和复杂性产生影响。对于性能，可以进行类似的推理。正如在*检查一致性和可行性*部分所看到的，数据量和系统预期性能的微小变化可能会产生重大差异。非技术人员忽视这些方面或期望不合理的目标并不罕见。就预期结果达成一致（并协商）是预防项目后期出现问题的良好方式。
- en: Other considerations of non-functional requirements and constraints may be particularly
    relevant in specific use cases. Take into account that this kind of reasoning
    may also be carried over into the project planning phase, in which constraints
    in budget or timeframe may drive the roadmap and release plan.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 其他非功能性需求和约束的考虑在特定用例中可能特别相关。考虑到这种推理也可能被带入项目规划阶段，在这个阶段，预算或时间框架的约束可能会推动路线图和发布计划。
- en: Now, we've gone through the analysis phase in the software requirements life
    cycle. As expected, we will now approach the specification phase. We will start
    with a very formal and structured approach and then look at a less structured
    alternative.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了软件需求生命周期中的分析阶段。正如预期的那样，我们现在将进入规格阶段。我们将从一个非常正式和结构化的方法开始，然后看看一个不那么结构化的替代方案。
- en: Specifying requirements according to the IEEE standard
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据IEEE标准指定需求
- en: The **Institute of Electrical and Electronics Engineers** (**IEEE**) has driven
    various efforts in the field of software requirements standardization. As usual,
    in this kind of industry standard, the documents are pretty complete and extensive,
    covering a lot of aspects in a very verbose way.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**电气和电子工程师协会**（**IEEE**）在软件需求标准化领域推动了各种努力。像往常一样，在这种行业标准中，文档相当完整和广泛，以非常冗长的方式涵盖了众多方面。'
- en: The usage of those standards may be necessary for specific projects in particular
    environments (for example, the public sector, aviation, medicine). The most famous
    deliverable by IEEE in this sense is the 830-1998 standard. This standard has
    been superseded by the ISO/IEEE/IEC 29148 document family.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定环境中的特定项目中使用这些标准可能是必要的（例如，公共部门、航空、医学）。IEEE在这方面最著名的成果是830-1998标准。这个标准已被ISO/IEEE/IEC
    29148文档系列所取代。
- en: In this section, we are going to cover both standards, looking at what the documents
    describe in terms of content, templates, and best practices to define requirements
    adhering to the standard.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖这两个标准，查看文档在内容、模板和最佳实践方面的描述，以定义符合标准的需求。
- en: The 830-1998 standard
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 830-1998标准
- en: The **IEEE 830-1998** standard focuses on the **Software Requirement Specification**
    document (also known as **SRS**), providing templates and suggestions on content
    to be covered.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**IEEE 830-1998**标准专注于**软件需求规格说明书**文档（也称为**SRS**），提供模板和建议，涵盖内容。'
- en: 'Some concepts are pretty similar to the ones discussed in the previous sections.
    The standard states all the characteristics that a requirement specification must
    have. Each requirement specification should be the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一些概念与前面章节中讨论的概念非常相似。标准声明了需求规格说明书必须具备的所有特点。每个需求规格说明书都应该如下：
- en: Correct
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确
- en: Unambiguous
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不含糊
- en: Complete
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整
- en: Consistent
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致
- en: Ranked for importance and/or stability
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按重要性或稳定性排序
- en: Verifiable
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可验证性
- en: Modifiable
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可修改性
- en: Traceable
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可追溯性
- en: As you can see, this is similar to the characteristics of requirements. One
    interesting new concept added here is the ranking of requirements. In particular,
    the document suggests classifying the requirements by importance, assigning priorities
    to requirements, such as essential, conditional, optional, and/or stability (stability
    refers to the number of expected changes to the requirement due to the evolution
    of the surrounding organization).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这与需求的特点相似。这里增加的一个有趣的新概念是需求的排序。特别是，文档建议根据重要性对需求进行分类，为需求分配优先级，例如基本、条件、可选和/或稳定性（稳定性指的是由于周围组织的演变而对需求预期发生变化的数量）。
- en: Another interesting concept discussed in this standard is **prototyping**. I
    would say that this is positively futuristic, considering that this standard was
    defined in 1998\. Well before the possibility to cheaply create stubs and mocks,
    as is normal today, this standard suggests using prototypes to experiment with
    the possible outcome of the system and use it as a support for requirements gathering
    and definition.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个标准中讨论的另一个有趣的概念是**原型设计**。我认为这非常具有前瞻性，考虑到这个标准是在1998年定义的。在能够廉价地创建存根和模拟之前，正如今天所常见的那样，这个标准建议使用原型来实验系统的可能结果，并将其用作收集和定义需求的支持。
- en: 'The last important point I want to highlight about IEEE 830-1998 is the template.
    The standard provides a couple of samples and a suggested index for software requirements
    specifications. The agenda includes the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要强调的关于IEEE 830-1998标准的最后一个重要点是模板。该标准提供了一些样本和一个建议的软件需求规格说明书索引。议程包括以下内容：
- en: '**Introduction**: Covering the overview of the system, and other concepts to
    set the field, such as the scope of the document, purpose of the project, list
    of acronyms, and so on.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引言**：涵盖系统的概述，以及其他设置领域概念，如文档范围、项目目的、缩略语列表等。'
- en: '**Overall description**: Describing the background and the constructs supporting
    the requirements. Here, you may define the constraints (including technical constraints),
    the interfaces to external systems, the intended users of the system (for example,
    the skill level), and the product functions (intended to give an overview of the
    product scope, without the details that map to specific requirements).'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总体描述**：描述背景和支撑需求的结构。在这里，您可以定义约束（包括技术约束）、与外部系统的接口、系统的预期用户（例如，技能水平）以及产品功能（旨在提供一个产品范围的概述，而不包括映射到特定需求的细节）。'
- en: '**Specific requirements**: This refers to the requirements themselves. Here,
    everything is expected to be specified with a high amount of detail, focusing
    on inputs (including validation), expected outputs, internal calculations, and
    algorithms. The standard offers a lot of suggestions for topics that need to be
    covered, including database design, object design (as in object-oriented programming),
    security, and so on.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具体需求**：指的是需求本身。在这里，期望以高度详细的方式指定所有内容，重点关注输入（包括验证）、预期输出、内部计算和算法。标准为需要涵盖的主题提供了大量建议，包括数据库设计、对象设计（如面向对象编程）、安全等。'
- en: '**Supporting information**: Containing accessory information such as a table
    of contents, index, and appendixes.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持信息**：包含目录、索引和附录等辅助信息。'
- en: As you can see, this SRS document may appear a little verbose, but it's a comprehensive
    and detailed way to express software requirements. As we will see in the next
    section, IEEE and other organizations have superseded this standard, broadening
    the scope and including more topics to be covered.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这份SRS文档可能显得有些冗长，但它是一种全面且详细地表达软件需求的方法。正如我们将在下一节中看到的，IEEE和其他组织已经取代了这一标准，扩大了范围并包括了更多需要涵盖的主题。
- en: The 29148 standard
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29148标准
- en: As discussed in the previous sections, the 830-1998 standard was superseded
    by a broader document. The 29148 family of standards represents a superset of
    830-1998\. The new standard is rich and articulated. It mentions the SRS document,
    following exactly the same agenda but adding a new section called **verification**.
    This section refers to specifying a testing strategy for each element of the software,
    suggesting that you should define a verification for each element specified in
    the other sections of the SRS.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，830-1998标准已被一个更广泛的文档所取代。29148系列标准代表了对830-1998的扩展。新的标准内容丰富且结构清晰。它提到了SRS文档，严格遵循相同的议程，但增加了一个名为**验证**的新章节。本章节涉及为软件的每个元素指定测试策略，建议您为SRS其他章节中指定的每个元素定义验证。
- en: 'Other than the SRS document, the 29148 standard suggests four more deliverables.
    Let''s have a quick look at them:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 除了SRS文档外，29148标准还建议了四个额外的交付成果。让我们快速了解一下：
- en: 'The **Stakeholder Requirements Specification**: This places the software project
    into the business perspective, analyzing the business environment around it and
    the impact it will have by focusing on the point of view of the business stakeholders.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益相关者需求规范**：将软件项目置于业务视角，分析其周围的商业环境及其对商业利益相关者观点的影响。'
- en: 'The **System Requirements Specification**: This focuses on the technical details
    of the interactions between the software being implemented and the other system
    composing the overall architecture. It specifies the domain of the application
    and the inputs/outputs.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统需求规范**：关注正在实施软件与其他系统之间交互的技术细节。它指定了应用程序的领域以及输入/输出。'
- en: '**System Operational Concept**: This describes, from the user''s point of view,
    the system''s functionality. It takes a point of view on the operation of the
    system, policies, and constraints (including supported hardware, software, and
    performance), user classes (meaning the different kinds of users and how they
    interact with the system), and operational modes.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统操作概念**：从用户的角度描述系统的功能。它对系统的操作、政策以及约束（包括支持的硬件、软件和性能）、用户类别（意味着不同类型的用户以及他们如何与系统交互）、操作模式等提出了观点。'
- en: '**Concepts of Operations**: This is not a mandatory document. When provided,
    it addresses the system as a whole and how it fits the overall business strategy
    of the customer. It includes things such as the investment plan, business continuity,
    and compliance.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作概念**：这不是一个强制性的文档。当提供时，它涉及整个系统及其如何适应客户的整体商业战略。它包括投资计划、业务连续性和合规性等内容。'
- en: As we have seen, the standards documents are a very polished and complete way
    to rationalize the requirements and document them in a comprehensive way. However,
    sometimes it may be unpractical to document the requirements in a such detailed
    and formalized way. Nevertheless, it's important to take these contents as a reference,
    and consider providing the same information, even if not using the very same template
    or level of details.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，标准文档是合理化需求并以全面方式记录它们的非常精致和完整的方式。然而，有时以这样详细和正式化的方式记录需求可能不切实际。尽管如此，将这些内容作为参考并考虑提供相同的信息是很重要的，即使不是使用完全相同的模板或详细程度。
- en: In the next section, we will have a look at alternative simplified formats for
    requirements collection and the tools for managing them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨需求收集的替代简化格式以及管理它们的工具。
- en: Collecting requirements – formats and tools
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集需求 - 格式和工具
- en: In order to manage and document requirements, you can use a tool of your choice.
    Indeed, many teams use electronic documents to detail requirements and track their
    progression, that is, in which stage of the requirement life cycle they are. However,
    when requirements grow in complexity, and the size of the team grows, you may
    want to start using more tailored tools.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理和记录需求，你可以使用你选择的工具。实际上，许多团队使用电子文档来详细说明需求并跟踪它们的进展，即它们在需求生命周期中的哪个阶段。然而，当需求变得复杂，团队规模扩大时，你可能想要开始使用更定制的工具。
- en: Let's start by having a look at the required data, then we will focus on associated
    tooling.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看所需的数据，然后我们将关注相关的工具。
- en: Software requirements data to collect
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要收集的软件需求数据
- en: 'Regardless of the tool of your choice, there is a subset of information you
    may want to collect:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种工具，都有一组信息你可能想要收集：
- en: '**ID**: A unique identifier will be needed since the requirement will be cross-referenced
    in many different contexts, such as test cases, documentation, and code comments.
    It can follow a naming convention or simply be an incremental number.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：需要一个唯一的标识符，因为需求将在许多不同的上下文中被交叉引用，例如测试用例、文档和代码注释。它可以遵循命名约定，也可以简单地是一个递增的数字。'
- en: '**Description**: A verbal explanation of the use case to be implemented.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：要实施的用例的口头说明。'
- en: '**Precondition**: (If relevant) the situation that the use case originates
    from.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前提条件**：（如果相关）用例起源的情况。'
- en: '**Essential**: How essential the requirement is, usually classified as *must
    have, should have, or nice to have*. This may be useful in order to filter requirements
    to be included in a release.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必要性**：需求的重要性，通常分类为“必须要有、应该要有或最好有”。这可能有助于筛选要包含在版本中的需求。'
- en: '**Priority**: A way to order/cluster requirements. Also, a useful way to filter
    requirements to be included in a release.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**：一种对需求进行排序/聚类的途径。同时，也是一个有用的方式来筛选要包含在版本中的需求。'
- en: '**Source**: The author of the requirement. It may be a department, but it is
    better if there is also a named owner to contact in case of clarifications being
    needed.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**来源**：需求的所有者。它可能是一个部门，但如果有明确的联系人以供澄清需要时联系会更好。'
- en: '**Group**: A way to cluster requirements for functional areas. Also, can be
    a useful way to collect a set of requirements to implement in a release.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组别**：一种将需求按功能区域聚类的途径。同时，也可以是有用的方式来收集一组要在一个版本中实施的需求。'
- en: '**Parent**: This is optional, in case you want to implement a hierarchy with
    a complex/high-level requirement made of a set of sub-requirements.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**家长**：这是可选的，如果你想要实现一个由一系列子需求组成的复杂/高级需求层次结构。'
- en: These are the basic attributes to collect for each software requirement, to
    enrich with any further column that may be relevant in your context.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是收集每个软件需求的基本属性，以丰富任何可能在你所在环境中相关的额外列。
- en: 'You may then want to track the implementation of each requirement. The attributes
    to do so usually include the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想要跟踪每个需求的实施情况。通常，这样做所需的属性包括以下内容：
- en: '**Status**: A synthetic description of the implementation status, including
    states such as UNASSIGNED, ASSIGNED, DEVELOPMENT, TESTING, and COMPLETE.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：对实现状态的综合性描述，包括如未分配、已分配、开发、测试和完成等状态。'
- en: '**Owner**: The team member to whom this requirement is assigned. It may be
    a developer, a quality engineer, or someone else, depending on the status.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负责人**：被分配此需求的项目团队成员。这可能是开发者、质量工程师或其他人，具体取决于状态。'
- en: '**Target release**: The software release that is targeted to include this requirement.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标发布版**：旨在包含此需求的目标软件发布版。'
- en: '**Blocker**: Whether this requirement is mandatory for this release or not.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻碍因素**：此需求是否为此次发布所必需。'
- en: '**Depends on**: Whether this requirement depends on other requirements to be
    completed (and what they are) before it can be worked on.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖项**：此需求是否在可以开始工作之前依赖于其他需求（以及它们是什么）。'
- en: Also, in this case, this is a common subset of information useful for tracking
    the requirement status. It may be changed, depending on the tooling and the project
    management techniques used in your particular context. Let's now have a look at
    tools to collect and manage this information.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这种情况下，这是一个用于跟踪需求状态的常见信息子集。它可能根据你特定环境中的工具和项目管理技术而改变。现在让我们来看看收集和管理这些信息的工具。
- en: Collecting software requirements in spreadsheets
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在表格中收集软件需求
- en: Looking at the list of attributes described in the previous section, you can
    imagine that these requirements can be easily collected in spreadsheets. It's
    a tabular format, with one requirement per row, and columns corresponding to the
    information we've discussed. Also, you could have the status tracking in the same
    row or associated by ID in a different sheet. Moreover, you can filter the sheet
    by attribute (for example, priority, group, status), sort it, and limit/validate
    the inputs where relevant (for example, restricting values from a specified list).
    Accessory values may also be added (for example, last modified date).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 观察上一节中描述的属性列表，你可以想象这些需求可以很容易地收集到表格中。它是一种表格格式，每行一个需求，列对应着我们讨论的信息。此外，你可以在同一行中进行状态跟踪，或者通过ID在不同的表格中关联。此外，你可以通过属性（例如，优先级、组、状态）过滤表格，对其进行排序，并在相关的地方限制/验证输入（例如，限制来自指定列表的值）。还可以添加辅助值（例如，最后修改日期）。
- en: 'This is what a requirements spreadsheet might look like:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个需求表格可能的样子：
- en: '![Figure 2.4 – A requirements spreadsheet'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.5 – 状态跟踪表格'
- en: '](img/Figure_2.04_B16354.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.4 – 需求表格'
- en: Figure 2.4 – A requirements spreadsheet
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 需求表格
- en: 'As mentioned, we can then have a sheet for tracking the progression of each
    requirement. It may look like the example that follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以有一个表格来跟踪每个需求的进展。它可能看起来像下面的示例：
- en: '![Figure 2.5 – Status tracking sheet'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.4 – 需求表格'
- en: '](img/Figure_2.05_B16354.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.5 – 状态跟踪表格'
- en: Figure 2.5 – Status tracking sheet
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 状态跟踪表格
- en: In the next sections, we will have a look at tools that can be used to support
    requirements gathering and documentation.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将探讨可用于支持需求收集和文档的工具。
- en: Specialized tools for software requirements management
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件需求管理专用工具
- en: As mentioned in the previous section, with bigger teams and long-term projects,
    specialized tools for requirements management can be easier to use than a shared
    document/spreadsheet.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对于更大的团队和长期项目，专用需求管理工具可能比共享文档/表格更容易使用。
- en: The most useful feature is usually having a centralized repo, avoiding back
    and forth (and a lack of synchronization), which happens when using documents.
    Other interesting features to look for are auditing (tracking changes), notifications,
    reporting, and advanced validation/guided input. Also, integration with source
    code management (for example, associating features with commits and branches)
    is pretty common and useful.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的功能通常是拥有一个集中的仓库，避免使用文档时出现的来回（以及缺乏同步）问题。其他值得寻找的功能包括审计（跟踪变更）、通知、报告和高级验证/引导输入。此外，与源代码管理（例如，将功能与提交和分支关联）的集成相当常见且有用。
- en: 'The software for requirements management is usually part of a bigger suite
    of utilities for project management. Here are some common products:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 需求管理软件通常是项目管理更大套件中的工具之一。以下是一些常见的产品：
- en: '**Jira** is a pretty widespread project management toolkit. It originated as
    an issue tracking tool to track defects in software products. It''s commonly used
    for tracking features too. It may also be extended with plugins enriching the
    functionalities of feature collection, organizing, and reporting.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jira**是一个相当广泛的项目管理工具包。它最初作为一个问题跟踪工具，用于跟踪软件产品的缺陷。它通常也用于跟踪特性。它还可以通过插件扩展，丰富特性收集、组织和报告的功能。'
- en: '**Redmine** is an open source tool and includes many different project management
    capabilities. The most interesting thing about it is its customizability, enabling
    you to track features, associate custom fields, reference source code management
    tools (for example, Git), and define Gantt charts/calendars.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redmine**是一个开源工具，包含许多不同的项目管理功能。最有趣的是它的可定制性，允许您跟踪特性、关联自定义字段、引用源代码管理工具（例如，Git），以及定义甘特图/日历。'
- en: '**IBM Rational DOORS** is commercial software for requirements management,
    very complete and oriented to mid-large enterprises. It is part of the Rational
    suite, originally developed by Rational Software (now part of IBM), which is also
    famous for contributing to the creation of UML notation, which we will discuss
    in the next chapter.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IBM Rational DOORS**是用于需求管理的商业软件，非常完整，面向中大型企业。它是Rational套件的一部分，最初由Rational
    Software（现在是IBM的一部分）开发，该套件也因贡献于UML符号的创建而闻名，我们将在下一章讨论。'
- en: The selection of a requirements management tool is a complex process, involving
    cost analysis, feature comparison, and more, which is way beyond the goal of this
    book.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 选择需求管理工具是一个复杂的过程，涉及成本分析、功能比较等，这远远超出了本书的目标。
- en: Spreadsheets versus tools
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子表格与工具对比
- en: It is a common debate whether to use specialized tools versus spreadsheets (or
    documents) for managing lists of requirements. It is a common path to start using
    a simpler approach (such as spreadsheets) and move to a tool once the project
    becomes too big or too complex to manage this way. Moreover, managers and non-technical
    users are more willing to use spreadsheets because they are more comfortable with
    such technology. Conversely, tech teams find it is often more effective to work
    with specialized tools. As usual, there is no one size that fits all, but honestly,
    the benefits of using a dedicated tool are many.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 是否使用专用工具与电子表格（或文档）来管理需求列表是一个常见的争议。通常的做法是开始使用更简单的方法（如电子表格），一旦项目变得太大或太复杂而无法以这种方式管理，就转向使用工具。此外，经理和非技术用户更愿意使用电子表格，因为他们对这种技术更熟悉。相反，技术团队发现使用专用工具通常更有效。像往常一样，没有一种方法适合所有人，但坦白说，使用专用工具的好处很多。
- en: The most immediate is having a centralized repository. Tools for requirement
    management are made to be used in real time, acting as a central, single source
    of truth. This allows us to avoid back and forth (and lack of synchronization),
    which happens when using documents (while you could object here that many Office
    suites offer real-time sharing and collaborative editing, nowadays).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最直接的方法是拥有一个集中的存储库。需求管理工具旨在实时使用，作为中央、单一的真实来源。这使我们能够避免使用文档时出现的来回（以及缺乏同步）问题（虽然您可能会在这里提出异议，即许多Office套件现在提供实时共享和协作编辑）。
- en: Other interesting features included with a specialized tool are auditing (tracking
    changes), notifications, reporting, and advanced validation/guided input.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 专用工具还包括的其他有趣功能有审计（跟踪变更）、通知、报告和高级验证/引导输入。
- en: Also, the integration with the source code management (for example, associating
    features with commits and branches) is pretty common and appreciated by the development
    teams. Management can also benefit from planning and insight features, such as
    charts, aggregated views, and integration with other project management tools.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与源代码管理（例如，将特性与提交和分支关联）的集成相当普遍，并且受到开发团队的欢迎。管理层也可以从计划和洞察功能中受益，例如图表、聚合视图以及与其他项目管理工具的集成。
- en: So, at the end of the day, I strongly advise adopting a full-fledged requirements
    management tool instead of a simple spreadsheet if that is possible.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终，我强烈建议如果可能的话，采用一个完整的需求管理工具而不是简单的电子表格。
- en: In the next section, we will explore requirements validation, as a final step
    in the software requirements life cycle.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨需求验证，这是软件需求生命周期中的最后一步。
- en: Validating requirements
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证需求
- en: As we've seen, the final phase of the requirements life cycle involves validating
    the requirements. In this phase, all the produced documentation is expected to
    be reviewed and formally agreed by all the stakeholders.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，需求生命周期的最后阶段涉及验证需求。在这个阶段，所有产生的文档都期望被所有利益相关者审查和正式同意。
- en: While sometimes neglected and considered optional, this phase is in fact very
    important. By having a formal agreement, you will ensure that all the iterations
    on the requirements list, including double-checking and extending partial requirements,
    still reflect the original intentions of the project.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有时会被忽视并被认为是非必需的，但这个阶段实际上非常重要。通过正式的协议，你将确保所有对需求列表的迭代，包括双重检查和扩展部分需求，仍然反映了项目的原始意图。
- en: The business makes sure that all the advantages and benefits will be achieved,
    while the technical staff will check that the features are correctly mapped in
    a set of implementable requirements so that the development team will clearly
    understand what's expected.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 业务确保所有优势和利益都将实现，而技术团队将检查功能是否正确地映射到一组可实施的需求中，以便开发团队能够清楚地了解期望的内容。
- en: This *sign-off* phase could be considered the point at which the project first
    truly kicks off. At this point, we have a clearer idea of what is going to be
    implemented. This is not the final word, however; when designing the platform
    and starting the project plans, you can expect the product to be remodeled. Maybe
    just a set of features will be implemented, while other functionalities will be
    put on paper later.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**结束阶段**可以被认为是项目真正启动的起点。在这个阶段，我们对将要实施的内容有了更清晰的认识。然而，这并不是最终决定；在设计平台和启动项目计划时，你可能会预期产品会进行重新设计。可能只是一系列功能会被实施，而其他功能可能会稍后以书面形式提出。
- en: 'In this section, we took a journey through the requirements life cycle. As
    already said, most of these phases can be considered iterative, and more than
    one loop will be needed before completing the process. Let''s have a quick recap
    of the requirements life cycle and the practices we have seen so far:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们经历了一次需求生命周期的旅程。正如已经说过的，大多数这些阶段都可以被认为是迭代的，并且需要多个循环才能完成整个过程。让我们快速回顾一下需求生命周期以及我们迄今为止看到的实践：
- en: '**Gathering** **and** **vetting**: As we have seen, these two phases are strictly
    related and involve a cross-team effort to creatively express ideas and define
    how the final product should look. Here, we have seen techniques for brainstorming
    such as the lean canvas, Event Storming, and more.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收集** **和** **审查**：正如我们所见，这两个阶段是严格相关的，并涉及跨团队的努力，以创造性地表达想法并定义最终产品应该如何看起来。在这里，我们看到了头脑风暴的技术，如精益画布、事件风暴等。'
- en: '**Analysis**: This phase includes checking the coherence, testability, and
    so on.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：这个阶段包括检查一致性、可测试性等。'
- en: '**Specification**: This includes the IEEE standard and some less formalized
    standards and tools.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规范**：这包括IEEE标准以及一些不太正式化的标准和工具。'
- en: '**Validation**: This is the formal sign-off and acceptance of a set of requirements.
    As said, it''s not unusual to see a further rework of such a set by going back
    to the previous phases, in an iterative way.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：这是对一系列需求正式签字和接受的过程。正如所说，通过回到前面的阶段进行进一步的迭代重工作，这种情况并不少见。'
- en: In the next section, we will continue to look at our mobile payments example,
    focusing on the requirements analysis phase.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续探讨我们的移动支付示例，重点关注需求分析阶段。
- en: Case studies and examples
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究和示例
- en: 'Continuing with the case study about our mobile payments solution, we are going
    to look at the requirements gathering phase. For the sake of simplicity, we will
    focus only on a small specific scenario: a peer-to-peer payment between two users
    of the platform.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续我们关于移动支付解决方案的案例研究时，我们将关注需求收集阶段。为了简化，我们将仅关注一个小而具体的场景：平台两个用户之间的点对点支付。
- en: The mobile payment application example
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动支付应用程序示例
- en: As we are doing in every chapter, let's have a look at some examples of the
    concepts discussed in this chapter applied to the mobile payment application that
    we are using as a case study.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在每一章中所做的那样，让我们看看本章讨论的概念在作为案例研究的移动支付应用程序中的应用示例。
- en: Requirements life cycle
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需求生命周期
- en: 'In the real world, the life cycle of requirements will reasonably take weeks
    (or months), adding up to a lot of requirements and reworking of them, so it is
    impractical to build a complete example of the requirements life cycle for our
    mobile payment scenario. However, I think it will be interesting to have a look
    at how one particular requirement will evolve over the phases we have seen:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，需求的生命周期合理地需要几周（或几个月），累积了很多需求，并对它们进行重新工作，因此为我们的移动支付场景构建一个完整的需求生命周期示例是不切实际的。然而，我认为看看一个特定需求如何在我们看到的各个阶段中演变将会很有趣：
- en: In the **gathering** phase, it is likely we will end up with a lot of ideas
    around ease of use and security for each payment transaction. Most of the participants
    will start to think from an end user perspective, focusing on the user experience,
    and so it's likely we will have sketches and mockups of the application. Some
    more ideas will revolve around how to authorize the payment itself along with
    its options (*how about a secret swipe sequence, a PIN code, a face ID, a* **One-Time
    Password** (**OTP**)*, or a fingerprint?*).
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**收集**阶段，我们可能会围绕每个支付交易的易用性和安全性产生很多想法。大多数参与者将开始从最终用户的角度思考，关注用户体验，因此我们很可能会得到应用的原型和草图。一些更多的想法将围绕如何授权支付本身及其选项（比如一个秘密的滑动序列、一个PIN码、一个面部识别、一个**一次性密码**（OTP）或者指纹？）。
- en: 'In the **vetting** phase (likely during, or shortly after, the previous phase),
    we will cluster and clean up what we have collected. The unpractical ideas will
    be dropped (such as the OTP, which may be cumbersome to implement), while others
    will be grouped (face ID and fingerprint) under biometric authorization. More
    concepts will be further explored and detailed: *What does it mean to be fast
    and easy to use? How many steps should be done to complete the payment?* *Is entering
    a PIN code easy enough (in cases where we cannot use biometric authorization)?*'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审查**阶段（可能在之前的阶段或之后不久），我们将对收集到的内容进行分组和清理。不切实际的想法将被放弃（比如OTP，可能难以实现），而其他想法将被分组（面部识别和指纹）在生物识别授权下。更多的概念将进一步探索和细化：*快速和易用意味着什么？完成支付需要多少步骤？*
    *输入PIN码是否足够容易（在我们不能使用生物识别授权的情况下）？*
- en: 'It''s now time to **analyze** each requirement collected so far. In our case,
    maybe the payment authorization. It is likely that the user will be presented
    with a screen asking for biometric authentication. *But what happens if the device
    doesn''t have a supported hardware?* *Should the customer be asked for other options,
    such as a PIN code?* *What should happen if the transaction is not authorized?*
    And of course, this kind of reasoning may go further and link more than one requirement:
    *What if a network is not available? What should happen after the transaction
    is completed successfully?* Maybe the information we have at that moment (where
    the customer is, what they have bought, the balance of their account) allows for
    some interesting use cases, such as contextual advertising, offering discounts,
    and so on.'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候**分析**到目前为止收集到的每个需求了。在我们的案例中，可能是支付授权。很可能会出现一个屏幕要求用户进行生物识别认证。*但是，如果设备没有支持的硬件会发生什么？*
    *是否应该要求客户选择其他选项，比如PIN码？* *如果交易未授权，会发生什么？* 当然，这种推理可能会进一步深入，并关联多个需求：*如果网络不可用会发生什么？交易成功完成后会发生什么？*
    那时我们拥有的信息（客户在哪里，他们买了什么，他们的账户余额）可能允许一些有趣的使用案例，比如情境广告、提供折扣等等。
- en: Now that we have clarified our requirements (and discovered new ones), it's
    time for **specification**. Once we pick a format (IEEE, or something simpler,
    such as a specialized tool or a spreadsheet), we start inserting our requirements
    one by one. Now, it's time to go for the maximum level of details. Let's think
    about bad paths (*what happens when things go wrong?*), corner cases, alternative
    solutions, and so on.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经明确了我们的需求（并发现了新的需求），是时候进行**规范**了。一旦我们选择了一个格式（IEEE，或者更简单的东西，比如一个专门的工具或电子表格），我们就开始逐个插入我们的需求。现在，是时候追求最大程度的细节了。让我们考虑一下错误路径（事情出错时会发生什么？），边缘情况，替代方案等等。
- en: 'The last phase is the **validation** of what we have collected into our tool
    of choice. It is likely that only a subset of the team has done the analysis and
    specification, so it''s good to share the result of those phases with everyone
    (especially with non-technical staff and the project sponsors) to understand whether
    there is anything missing: maybe the assumptions we have made are not what they
    were expecting. It''s not uncommon that having a look at the full list will trigger
    discussions about prioritization or brand-new ideas (such as the one about contextual
    advertising that we mentioned in the analysis phase).'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的阶段是对我们选择工具中收集到的内容的**验证**。很可能是只有团队中的一小部分人进行了分析和规范，因此与所有人（尤其是非技术人员和项目赞助人）分享这些阶段的结果是很好的，以便了解是否有什么遗漏：也许我们做出的假设并不是他们所期望的。查看完整列表可能会引发关于优先级或全新的想法（例如我们在分析阶段提到的关于情境广告的想法）的讨论。
- en: In the next sections, we will see some more examples of the specific phases
    and techniques.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到更多关于特定阶段和技术的例子。
- en: Lean canvas for the mobile payment application
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动支付应用的精益画布
- en: The lean canvas can be imagined as an elevator pitch for getting sponsorship
    for this application (such as for getting funds or approval for the development).
    In this regard, the lean canvas is a kind of conversation starter when it comes
    to requirements. It could be good to identify and detail the main, most important
    features, but you will probably need to use other techniques (such as the ones
    described so far) to identify and track all the requirements with a reasonable
    level of detail.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将精益画布想象成为这个应用程序获得赞助（如获得资金或开发批准）的电梯简报。在这方面，精益画布在需求方面是一种对话的开端。最好确定并详细说明主要、最重要的功能，但你可能需要使用其他技术（如迄今为止所描述的技术）来以合理的详细程度识别和跟踪所有需求。
- en: 'With that said, here is how I imagine a lean canvas could look in this particular
    case. Of course, I am aware that other mobile and contactless solutions exist,
    so consider this just as an example. For readability purposes, I''m going to represent
    it as a bullet list. This is a transcribed version, as it happens after collecting
    all those aspects as sticky notes on a whiteboard:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，以下是我想象在这个特定情况下精益画布可能的样子。当然，我清楚其他移动和非接触式解决方案存在，所以请把这仅仅作为一个例子。为了便于阅读，我将它表示为一个项目符号列表。这是一个转录版本，因为它是在收集所有这些方面作为白板上的便签之后发生的：
- en: '**Problem**: The payment procedure is cumbersome and requires cash or card.
    Payment with card requires a PIN code or a signature. The existing alternatives
    are credit or debit cards.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：支付流程繁琐，需要现金或卡片。使用卡片支付需要输入PIN码或签名。现有的替代方案是信用卡或借记卡。'
- en: '**Customer segment**: Everybody with a not-too-old mobile phone. The early
    adopters could be people that don''t own a credit card or don''t have one to hand
    (maybe runners, who don''t bring a wallet but only a mobile phone, or office workers
    during their lunch/coffee break).'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户群体**：所有拥有不太旧的手机的每个人。早期采用者可能是没有信用卡或没有携带信用卡的人（比如跑步者，他们不带钱包只带手机，或者办公室工作人员在午餐/咖啡休息时间）。'
- en: '**Unique value proposition**: Pay with one touch, safely.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独特价值主张**：一键支付，安全可靠。'
- en: '**Solution**: A sleek, fast, and easy-to-use mobile application, allowing users
    to authorize payment transactions with biometric authentication.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案**：一个简洁、快速且易于使用的移动应用程序，允许用户通过生物识别认证授权支付交易。'
- en: '**Unfair advantage**: Credit/debit cards that don''t need biometric authentication.
    (Of course I am aware, as I said, that contactless payments are available with
    credit cards, and other NFC options are bundled with mobile phones. So, in the
    real world, our application doesn''t really have an advantage over other existing
    options.)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不公平的优势**：无需生物识别认证的信用卡/借记卡。（当然，正如我所说的，我知道信用卡可以进行非接触式支付，而其他NFC选项则捆绑在手机中。所以，在现实世界中，我们的应用程序并不真的比其他现有选项有优势。）'
- en: '**Revenue streams**: Transaction fees and profiling data over customer spending
    habits.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收入来源**：交易费和客户消费习惯的轮廓数据。'
- en: '**Cost structure**: App development, hosting, advertising. (In the real world,
    you may want to have a ballpark figure for it and even have a hypothesis of how
    many customers/transactions you will need to break even. This will put you in
    a better position for pitching the project to investors and sponsors.)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本结构**：应用开发，托管，广告。（在现实世界中，你可能想要有一个大致的数字，甚至可以有一个关于你需要多少客户/交易才能盈亏平衡的假设。这将使你在向投资者和赞助商推销项目时处于更好的位置。）'
- en: '**Key metrics**: Number of active users, transactions per day, average amount
    per transaction.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键指标**：活跃用户数量，每日交易次数，每次交易的平均金额。'
- en: '**Channels**: Search engine optimization, affiliation programs, cashback programs.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渠道**：搜索引擎优化，联盟计划，现金返还计划。'
- en: In the next section, we'll look at Event Storming for peer-to-peer payments.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨对等支付的事件风暴。
- en: Event Storming for peer-to-peer payments
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对等支付的事件风暴
- en: 'As we saw in the *Event Storming* section, in an Event Storming session it''s
    important to have a variety of representations from different departments in order
    to have meaningful discussions. In this case, let''s suppose we have business
    analysts, chief architects, site reliability engineers, and UX designers. This
    is what our wall may look like after our brainstorming session:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*事件风暴*部分所看到的，在事件风暴会议中，拥有来自不同部门的多种表示形式对于进行有意义的讨论非常重要。在这种情况下，让我们假设我们有业务分析师、首席架构师、站点可靠性工程师和用户体验设计师。这是我们头脑风暴会议之后墙壁可能的样子：
- en: '![Figure 2.6 – Event Storming for peer-to-peer payment'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6 – 对等支付的事件风暴]'
- en: '](img/Figure_2.06_B16354.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.06_B16354.jpg]'
- en: Figure 2.6 – Event Storming for peer-to-peer payment
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 对等支付的事件风暴
- en: As you can see from the preceding diagram, even in this simplified example we
    begin to develop a clear picture of the people involved in this use case and the
    external systems.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的图中可以看到，即使在简化示例中，我们也开始对涉及此用例的人员和外部系统有一个清晰的了解。
- en: We can see that two systems are identified, **Identity Management** (**IDM**)
    for dealing with customer profiles and **Backend** for dealing with balances and
    transactions.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，已经确定了两个系统，**身份管理**（**IDM**）用于处理客户资料，**后端**用于处理余额和交易。
- en: In terms of command and domain events, this is something you may want to reiterate
    in order to understand whether more interactions are needed, testing unhappy paths
    and defining aggregates (probably the hardest and most interesting step toward
    the translation of this model into software objects).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令和领域事件方面，这可能需要你反复进行，以便了解是否需要更多的交互，测试不愉快的路径，并定义聚合（这可能是将此模型转换为软件对象的最困难且最有意思的步骤）。
- en: In the next section, we will see what a related spreadsheet of requirements
    might look like.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到相关需求电子表格可能的样子。
- en: Requirements spreadsheet
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求电子表格
- en: Now, let's imagine we successfully completed the Event Storming workshop (or
    even better, a couple of iterations of it). The collected inputs may be directly
    worked on and translated into software, especially if developers actively participated
    in the activity. However, for the sake of tracking, double-checking, and completing
    the requirements list, it's common to translate those views into a document with
    a different format. While you can complete a standard IEEE requirement document,
    especially if you can do some further reworking and have access to all the stakeholders,
    a leaner format is often more suitable.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们成功完成了事件风暴研讨会（或者甚至更好，几个迭代）。收集到的输入可以直接工作并转换为软件，特别是如果开发人员积极参与了这项活动。然而，为了跟踪、校对和完成需求列表，通常将这些视图转换为具有不同格式的文档。虽然你可以完成一个标准的IEEE需求文档，特别是如果你可以进行一些进一步的工作并有权访问所有利益相关者，但更简洁的格式通常更合适。
- en: 'Now, starting from the features we have identified before, let''s start to
    draft a spreadsheet for collecting and classifying the related requirements:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从我们之前已经识别出的功能开始，让我们开始起草一个用于收集和分类相关需求的电子表格：
- en: '![Figure 2.7 – Requirement list of a peer-to-peer payment'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7 – 对等支付的需求列表]'
- en: '](img/Figure_2.07_B16354.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.07_B16354.jpg]'
- en: Figure 2.7 – Requirements list of a peer-to-peer payment
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 对等支付的需求列表
- en: As you can see, the list is not complete, however, it's already clear that from
    a concept nice and concisely expressed on a couple of sticky notes, you can potentially
    derive a lot of rows with requirements and relative preconditions.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个列表并不完整，然而，已经很明显，从几张贴纸上简洁明了地表达的概念，您可以潜在地推导出很多行需求和相关的先决条件。
- en: Moreover, it is often debated whether you should include all potential paths
    (for example, including failed logins, error conditions, and other corner cases)
    in lists like these. The answer is usually common sense; the path is specified
    if special actions come from it (for example, retries, offering help, and so on).
    If it's just followed by an error message, this can be specified elsewhere (for
    example, in the test list and in user acceptance documents).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，是否应该将这些潜在路径（例如，包括失败的登录、错误条件和其他边缘情况）包含在类似这样的列表中，常常是争论的焦点。通常答案是常识；如果由此产生了特殊操作（例如，重试、提供帮助等），则指定路径。如果只是跟随一个错误消息，这可以在其他地方指定（例如，在测试列表和用户接受文档中）。
- en: Another relevant discussion is about supporting information. From time to time,
    you may have important information to be conveyed in other formats. The most common
    example is the user interface, commonly specified with graphical mockups. It is
    up to you whether attaching the mockups somewhere else and referring to them in
    a field (for example, notes), or directly embedding everything (a list of requirements
    plus graphic mockups) into the same document is better. This is not very important,
    however, and it heavily depends on your specific context and what makes your team
    feel comfortable.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个相关的讨论是关于支持信息。不时地，您可能需要以其他格式传达重要信息。最常见的一个例子是用户界面，通常用图形原型来指定。至于您是将原型附加到其他地方并在字段（例如，备注）中引用它们，还是直接将所有内容（需求列表加上图形原型）嵌入到同一文档中，这取决于您。然而，这并不是很重要，并且很大程度上取决于您的具体环境和什么能让您的团队感到舒适。
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered a complete overview of software requirements.
    Knowing the characteristics of a well-defined software requirement, how to collect
    it, and how to document it is a very good foundation to build software architecture
    upon. Regardless of the technology and methodologies used in your projects, these
    ideas will help you to get your project up to speed and to build a collaborative,
    trusting relationship with your business counterparts.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了软件需求的完整内容。了解良好定义的软件需求的特点、如何收集和记录它，是建立在软件架构之上的良好基础。无论您在项目中使用什么技术和方法，这些想法都将帮助您加快项目进度，并与业务伙伴建立协作和信任的关系。
- en: On the business side, the use of such tools and practices will allow for a structured
    way to provide input to the technical team and track the progression and coverage
    of the features implemented.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在业务方面，使用这样的工具和实践将允许以结构化的方式向技术团队提供输入，并跟踪已实现特性的进度和覆盖率。
- en: In the next chapter, we will look at software architecture modeling and what
    methodologies can be used for representing an architectural design.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨软件架构建模以及可以用于表示架构设计的哪些方法。
- en: Further reading
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Ash Maurya, *The Lean Canvas* ([https://leanstack.com/leancanvas](https://leanstack.com/leancanvas))
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阿什·莫里亚，*精益画布* ([https://leanstack.com/leancanvas](https://leanstack.com/leancanvas))
- en: Alberto Brandolini, *Introducing Event Storming* ([http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html](http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html))
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阿尔贝托·布兰多利尼，*介绍事件风暴* ([http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html](http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html))
- en: Atlassian, *Jira Software* ([https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira))
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atlassian，*Jira Software* ([https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira))
- en: Jean-Philippe Lang, *Redmine* ([https://www.redmine.org/](https://www.redmine.org/))
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让-菲利普·朗，*Redmine* ([https://www.redmine.org/](https://www.redmine.org/))
- en: IBM, *Rational Doors* ([https://www.ibm.com/it-it/products/requirements-management](https://www.ibm.com/it-it/products/requirements-management))
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM，*Rational Doors* ([https://www.ibm.com/it-it/products/requirements-management](https://www.ibm.com/it-it/products/requirements-management))
