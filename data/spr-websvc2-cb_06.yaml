- en: Chapter 6. Marshalling and Object-XML Mapping (OXM)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。编组和对象/XML映射（OXM）
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Marshalling with JAXB2
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JAXB2进行编组
- en: Marshalling with XMLBeans
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XMLBeans进行编组
- en: Marshalling with JiBX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JiBX进行编组
- en: Marshalling with XStream
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XStream进行编组
- en: Marshalling with MooseXML
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MooseXML进行编组
- en: Creating a custom marshaller using XPath for conditional XML parsing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XPath创建自定义编组器进行条件XML解析
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In Object/XML Mapping (OXM) terminology, marshalling (serializing) converts
    the object representation of data into the XML format and unmarshalling converts
    XML into the corresponding object.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象/XML映射（OXM）术语中，编组（序列化）将数据的对象表示转换为XML格式，而解组将XML转换为相应的对象。
- en: Spring's OXM simplifies OXM operations by using rich aspects of the Spring framework.
    For example, the dependency injection feature can be used to instantiate different
    OXM technologies into objects to use them, and Spring can use annotations to map
    a class or a class's field to XML.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的OXM通过使用Spring框架的丰富特性简化了OXM操作。例如，可以使用依赖注入功能将不同的OXM技术实例化为对象以使用它们，Spring可以使用注解将类或类的字段映射到XML。
- en: 'Spring-WS benefits from Spring''s OXM for converting a Payload message into
    objects or vice versa. For example, set JAXB as the OXM framework using the following
    configuration in the application context:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS受益于Spring的OXM，可以将有效负载消息转换为对象，反之亦然。例如，可以在应用程序上下文中使用以下配置将JAXB设置为OXM框架：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In addition, marshalling frameworks could be changed by changing the `marshaller`
    bean in the configuration file, while keeping the implementation of Web-Services
    unchanged.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过更改配置文件中的`marshaller` bean来更改编组框架，同时保持Web服务的实现不变。
- en: There are many implementations of marshalling frameworks available. JAXB (Java
    Architecture for XML Binding), JiBX, XMLBeans, Castor, and so on are examples.
    For some of the OXM frameworks, tools are provided to convert schema into POJO
    classes and generate mapping data within these classes, or in a separate external
    configuration file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的编组框架的实现。JAXB（Java Architecture for XML Binding）、JiBX、XMLBeans、Castor等都是例子。对于一些OXM框架，提供了工具来将模式转换为POJO类，并在这些类中生成映射数据，或者在单独的外部配置文件中生成映射数据。
- en: This chapter provides recipes to illustrate the usage of different frameworks
    for Object/XML mapping.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了示例来说明不同框架用于对象/XML映射的用法。
- en: For simplification, most of the recipes in this chapter use projects used in
    the *Integration testing using Spring-JUnit support* recipe, discussed in [Chapter
    3](ch03.html "Chapter 3. Testing and Monitoring Web-Services"), *Testing and Monitoring
    Web-Services*, to set up a server and send and receive messages by client. However,
    in the recipe *Marshalling with XStream*, projects from the *Creating Web-Service
    client for WS-Addressing endpoint* recipe, discussed in [Chapter 2](ch02.html
    "Chapter 2. Building Clients for SOAP Web-Services"), *Building Clients for SOAP
    Web-Services*, are used for the server and client sides.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，本章中大多数示例使用了“使用Spring-JUnit支持进行集成测试”一章中讨论的项目，该项目在“测试和监视Web服务”一章中讨论，用于设置服务器并通过客户端发送和接收消息。然而，在“使用XStream进行编组”一章中的示例中，使用了“为WS-Addressing端点创建Web服务客户端”一章中讨论的项目，该项目在“构建SOAP
    Web服务的客户端”一章中讨论，用于服务器和客户端。
- en: Marshalling with JAXB2
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JAXB2进行编组
- en: Java Architecture for XML Binding ([http://jaxb.java.net/tutorial/](http://jaxb.java.net/tutorial/))
    is an API that allows developers to bind Java objects to XML representations.
    JAXB implementation is a part of the project Metro ([http://metro.java.net/](http://metro.java.net/)),
    which is a high-performance, extensible, and easy-to-use Web-Service stack. The
    main functionality of JAXB is to marshall Java objects into XML equivalents and
    unmarshall them back to the Java object (which can be called Object/XML binding
    or marshalling) as needed. JAXB is particularly useful when the specification
    is complex and changing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Java Architecture for XML Binding（http://jaxb.java.net/tutorial/）是一个API，允许开发人员将Java对象绑定到XML表示。JAXB实现是Metro项目（http://metro.java.net/）的一部分，它是一个高性能、可扩展、易于使用的Web服务堆栈。JAXB的主要功能是将Java对象编组为XML等效项，并根据需要将其解组为Java对象（也可以称为对象/XML绑定或编组）。当规范复杂且变化时，JAXB特别有用。
- en: JAXB provides many extensions and tools that make the Object/XML binding an
    easy job. Its annotation support allows developers to mark the O/X binding within
    the existing classes in order to generate the XML at runtime. Its Maven tool plugin
    `(maven-jaxb2-plugin)` enables the generation of Java classes from a given XML
    Schema file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JAXB提供了许多扩展和工具，使得对象/XML绑定变得简单。其注解支持允许开发人员在现有类中标记O/X绑定，以便在运行时生成XML。其Maven工具插件（maven-jaxb2-plugin）可以从给定的XML
    Schema文件生成Java类。
- en: This recipe illustrates how to set up a marshalling end point and build a client
    program using JAXB2 as the marshalling library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例说明了如何设置编组端点并使用JAXB2作为编组库构建客户端程序。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe contains a server `(LiveRestaurant_R-6.1)` and a client `(LiveRestaurant_R-6.1-Client)`
    project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例包含一个服务器（LiveRestaurant_R-6.1）和一个客户端（LiveRestaurant_R-6.1-Client）项目。
- en: '`LiveRestaurant_R-6.1` has the following Maven dependencies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.1`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-6.1-Client` has the following Maven dependencies:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.1-Client`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: This recipe uses `maven-jaxb2-plugin` to generate classes from a schema.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用`maven-jaxb2-plugin`从模式生成类。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register the JAXB marshaller inside the server/client-side configuration file.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端配置文件中注册JAXB编组器。
- en: Configure `maven-jaxb2-plugin` inside server/client-side POM files.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端POM文件中配置`maven-jaxb2-plugin`。
- en: 'Set up the server and run the client (it also generates classes from a schema):'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务器并运行客户端（它还从模式生成类）：
- en: 'Client project-root: `mvn clean package`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目根目录：`mvn clean package`
- en: 'Server project-root: `mvn clean package tomcat:run`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目根目录：`mvn clean package tomcat:run`
- en: 'The following is the client-side output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main player in this marshalling business is `GenericMarshallingMethodEndpointAdapter`,
    which utilizes a marshaller to perform the Object/XML marshalling process. The
    marshaller used here is `org.springframework.oxm.jaxb.Jaxb2Marshaller`, which
    performs O/X marshalling, utilizing the JAXB2 framework. If you examine the Java
    classes generated by the Maven plugin tool, you can see the JAXB annotations such
    as `@XmlType, @XmlRootElement, @XmlElement`, and so on. These annotations are
    the instructions to the JAXB engine that determines the structure of the XML to
    be generated at runtime.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个编组业务中的主要参与者是`GenericMarshallingMethodEndpointAdapter`，它利用编组器执行对象/XML编组过程。这里使用的编组器是`org.springframework.oxm.jaxb.Jaxb2Marshaller`，它执行O/X编组，利用JAXB2框架。如果您检查Maven插件工具生成的Java类，您可以看到JAXB注释，如`@XmlType，@XmlRootElement，@XmlElement`等。这些注释是JAXB引擎的指令，用于确定在运行时生成的XML的结构。
- en: The following section in the POM files generates JAXB classes from the schema
    `(OrderService.xsd)` in the folder `src\main\webapp\WEB-INF` (set by `schemaDirectory)`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: POM文件中的以下部分从文件夹`src\main\webapp\WEB-INF`（由`schemaDirectory`设置）中的模式`（OrderService.xsd）`生成JAXB类。
- en: '`GeneratePackage` set the package includes the generated classes and `generateDirectory`
    set the folder host `generatedPackage:`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`GeneratePackage`设置包括生成类的包，`generateDirectory`设置了托管生成包的文件夹：'
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `OrderServiceEndPoint`, which is annotated as an `@Endpoint`, maps the Web-Service
    request, with a payload-root, `placeOrderRequest`, to the method `getOrder`, recognizing
    the annotation `@PayloadRoot`. While the marshaller marshalls the incoming XML
    into an instance of `PlaceOrderRequest`, the method `getOrder` returns `PlaceOrderResponse`.
    The same thing happens to the method `cancelOrder:`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceEndPoint`被注释为`@Endpoint`，将Web服务请求与`placeOrderRequest`的有效载荷根映射到`getOrder`方法，识别注释`@PayloadRoot`。编组器将传入的XML编组为`PlaceOrderRequest`的实例，方法`getOrder`返回`PlaceOrderResponse`。方法`cancelOrder`也是同样的情况：'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The following section in `spring-ws-servlet.xml` in the server sets the marshaller
    in the endpoint (OrderServiceEndpoint) to `Jaxb2Marshaller`. The setting `contextPath`
    in the `marshaller` bean registers all beans included in the package `com.packtpub.liverestaurant.domain`
    to be marshalled/unmarshalled by `Jaxb2Marshaller:`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器的`spring-ws-servlet.xml`中的以下部分将编组器设置为端点（OrderServiceEndpoint）为`Jaxb2Marshaller`。在`marshaller`
    bean中的`contextPath`设置注册了包`com.packtpub.liverestaurant.domain`中的所有bean，以便由`Jaxb2Marshaller`进行编组/解组：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The same things happen in the client. The only difference is that the marshaller
    is set for `WebServiceTemplate:`
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端中也会发生同样的事情。唯一的区别是编组器设置为`WebServiceTemplate`：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `MessageDispatcherServlet`, with the help of the `Jaxb2Marshaller`, detects
    the O/X mapping annotations as well as the reflection and delegates the final
    marshalling process to the JAXB framework.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageDispatcherServlet`借助`Jaxb2Marshaller`检测O/X映射注释以及反射，并将最终编组过程委托给JAXB框架。'
- en: Marshalling with XMLBeans
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XMLBeans进行编组
- en: XMLBeans ([http://xmlbeans.apache.org/](http://xmlbeans.apache.org/)) is a technology
    for accessing XML by binding it to Java types. The library comes from the Apache
    Foundation and is a part of the Apache XML project. Known for its Java-friendliness,
    XMLBeans allows the developers to take advantage of the richness and features
    of XML and XML Schema and have these features mapped as naturally as possible
    to the equivalent Java language and typing constructs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: XMLBeans（[http://xmlbeans.apache.org/](http://xmlbeans.apache.org/)）是一种通过将其绑定到Java类型来访问XML的技术。该库来自Apache基金会，并且是Apache
    XML项目的一部分。XMLBeans以其友好的Java特性而闻名，允许开发人员充分利用XML和XML Schema的丰富性和功能，并将这些功能尽可能自然地映射到等效的Java语言和类型构造中。
- en: 'Two major features that make XMLBeans unique from other XML-Java binding options
    are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使XMLBeans与其他XML-Java绑定选项不同的两个主要特点是：
- en: '**Full XML Schema support:** XMLBeans fully supports (built-in) XML Schema
    and the corresponding Java classes provide constructs for all of the major functionality
    of XML Schema.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整的XML Schema支持：**XMLBeans完全支持（内置）XML Schema，并且相应的Java类为XML Schema的所有主要功能提供了构造。'
- en: '**Full XML infoset fidelity:** While unmarshalling XML data, the full XML infoset
    is available to the developer. The XMLBeans provides many extensions and tools
    that make the Object/XML binding an easy job.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整的XML信息集忠实度：**在解组XML数据时，开发人员可以获得完整的XML信息集。XMLBeans提供了许多扩展和工具，使对象/XML绑定变得简单。'
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe contains a server (`LiveRestaurant_R-6.2`) and a client (`LiveRestaurant_R-6.2-Client`)
    project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方包含服务器（`LiveRestaurant_R-6.2`）和客户端（`LiveRestaurant_R-6.2-Client`）项目。
- en: '`LiveRestaurant_R-6.2` has the following Maven dependencies:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.2`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`xmlbeans-2.4.0.jar`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlbeans-2.4.0.jar`'
- en: '`LiveRestaurant_R-6.2-Client` has the following Maven dependencies:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.2-Client`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`xmlbeans-2.4.0.jar`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlbeans-2.4.0.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: This recipe uses `xmlbeans-maven-plugin` to generate classes and bind files
    from a schema.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用`xmlbeans-maven-plugin`从模式生成类并绑定文件。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register the XMLBean marshaller inside the server/client-side configuration
    file.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端配置文件中注册XMLBean编组器。
- en: Configure `xmlbeans-maven-plugin` inside the server/client-side POM files.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端POM文件中配置`xmlbeans-maven-plugin`。
- en: 'Set up the server and run the client (it also generates classes from a schema):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务器并运行客户端（它还从模式生成类）：
- en: 'Run the following commands:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: 'Server project-root: `mvn clean package tomcat:run`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目根目录：`mvn clean package tomcat:run`
- en: 'Client project-root: `mvn clean package`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目根：`mvn clean package`
- en: 'The following is the client-side output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe works exactly the same way as the first one, *Marshalling with JAXB2*,
    except that it is using a different marshaller, `XMLBeansMarshaller`. The scomp
    (Schema Compiler) tool used here generates the Java XMLBeans classes from the
    XML schema `(OrderService.xsd)`. Besides the domain classes, it generates the
    classes representing the document root element, for example, `CancelOrderRequestDocument`.
    All the generated classes contain the `Factory` methods to instantiate them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的工作方式与第一个示例*使用JAXB2进行编组*完全相同，只是它使用了不同的编组器`XMLBeansMarshaller`。这里使用的scomp（模式编译器）工具从XML模式（OrderService.xsd）生成Java
    XMLBeans类。除了域类，它还生成了表示文档根元素的类，例如`CancelOrderRequestDocument`。所有生成的类都包含`Factory`方法来实例化它们。
- en: As can be noticed easily, the two main differences in the code are in `OrderServiceEndPoint`
    and `spring-ws-servlet.xml`. Unlike that of the previous recipe, the method `getOrder`
    returns an instance of `OrderResponseDocument` and it accepts `OrderRequestDocument`
    as an input argument. The same description is true about the method `cancelOrderDoc:`
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易注意到，代码中的两个主要区别在于`OrderServiceEndPoint`和`spring-ws-servlet.xml`。与上一个示例不同，`getOrder`方法返回`OrderResponseDocument`的实例，并接受`OrderRequestDocument`作为输入参数。`cancelOrderDoc`方法也是如此。
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The marshaller used in `spring-ws-servlet.xml` is the `XMLBeansMarshaller`,
    which marshalls and unmarshalls between XML and Java using the XMLBeans library.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`spring-ws-servlet.xml`中使用的编组器是`XMLBeansMarshaller`，它使用XMLBeans库在XML和Java之间进行编组和解组。
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The contract between the `@Endpoint` class and `XMLBeansMarshaller` is that
    the `@PayloadRoot` methods should accept and return instances of `org.apache.xmlbeans.XmlObject`.
    Then it dynamically finds out the corresponding classes, and using their `Factory`
    methods, it creates instances and binds to the XML at runtime.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Endpoint`类和`XMLBeansMarshaller`之间的契约是，`@PayloadRoot`方法应该接受并返回`org.apache.xmlbeans.XmlObject`的实例。然后它动态地找到相应的类，并使用它们的`Factory`方法，在运行时创建实例并绑定到XML。'
- en: Same as the previous recipe, a plugin in the POM files generates `XMLBean` classes
    from the schema `(OrderService.xsd)` in the folder `src\main\webapp\WEB-INF` (set
    by `schemaDirectory):`
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个示例一样，POM文件中的插件从文件夹`src\main\webapp\WEB-INF`（由`schemaDirectory`设置）中的模式（OrderService.xsd）生成`XMLBean`类：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `MessageDispatcherServlet`, with the help of `XMLBeansMarshaller`, detects
    the O/X mapping annotations and the marshaller configuration, and delegates the
    final marshalling process to the XMLBeans framework.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageDispatcherServlet`借助`XMLBeansMarshaller`检测O/X映射注解和编组配置，并将最终编组过程委托给XMLBeans框架。'
- en: There's more...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'XMLBeans come with a set of built-in powerful tools to add much more functionality
    than merely marshalling between XML and Java. The recipe utilized just one such
    tool, `scomp`, the Schema Compiler that generates Java classes/compressed JAR
    files out of an XML Schema `(.xsd)` file. A few other tools that may be helpful
    are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: XMLBeans配备了一套内置的强大工具，可以为XML和Java之间的编组添加更多功能。本示例仅使用了其中一个工具，即`scomp`，即模式编译器，它可以从XML模式（.xsd）文件生成Java类/压缩的JAR文件。其他一些有用的工具包括：
- en: '`inst2xsd` (Instance to Schema Tool): Generates XML schema from XML instance
    files.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inst2xsd`（Instance to Schema Tool）：从XML实例文件生成XML模式。'
- en: '`scopy` (Schema Copier): Copies the XML schema at the specified URL to the
    specified file'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopy`（Schema Copier）：将指定URL的XML模式复制到指定文件'
- en: '`validate` (Instance Validator): Validates an instance against a schema'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate`（Instance Validator）：根据模式验证实例'
- en: '`xpretty` (XML Pretty Printer): Pretty prints the specified XML to the console'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xpretty`（XML Pretty Printer）：将指定的XML格式化打印到控制台'
- en: '`xsd2inst` (Schema to Instance Tool): Prints an XML instance from the specified
    global element using the specified schema'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xsd2inst`（Schema to Instance Tool）：使用指定的模式从指定的全局元素打印XML实例'
- en: '`xsdtree` (Schema Type Hierarchy Printer): Prints an inheritance hierarchy
    of the types defined in a schema'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xsdtree`（Schema Type Hierarchy Printer）：打印模式中定义的类型的继承层次结构'
- en: '`xmlbean Ant task:` Compiles a set of XSD and/or WSDL files into XMLBeans types'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlbean Ant task:` 将一组XSD和/或WSDL文件编译成XMLBeans类型'
- en: The `xmlbean Ant task` is a nice way to automate the generation of Java classes
    in integration with your build scripts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`xmlbean Ant task`是自动化生成Java类的一种不错的方式，可以与构建脚本集成。'
- en: Marshalling with JiBX
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JiBX进行编组
- en: JiBX ([http://jibx.sourceforge.net/](http://jibx.sourceforge.net/)) is another
    tool and library for binding XML data to Java objects. JiBX is known to be the
    best for speed performance as well as flexibility. However, it has also been known
    for its complexity of binding, especially for a complex data model.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JiBX（[http://jibx.sourceforge.net/](http://jibx.sourceforge.net/)）是另一个用于将XML数据绑定到Java对象的工具和库。JiBX以速度性能和灵活性而闻名。然而，它也以绑定的复杂性而闻名，特别是对于复杂的数据模型。
- en: From version 1.2 onwards, JiBX has addressed these bottlenecks and now it has
    easy-to-use marshalling tools and framework. Using the JiBX tool, a user can generate
    a schema from existing Java code or generate Java code and binding files from
    an existing schema. JiBX library at runtime binds Java classes to XML data and
    vice versa.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.2版本开始，JiBX已解决了这些瓶颈，现在它具有易于使用的编组工具和框架。使用JiBX工具，用户可以从现有Java代码生成模式，或者从现有模式生成Java代码和绑定文件。JiBX库在运行时将Java类绑定到XML数据，反之亦然。
- en: In this recipe, the JiBX tool `(jibx-maven-plugin)` is used to generate POJO
    classes and bind a definition file from an existing schema, and then a Web-Service
    client and server will be built upon the JiBX libraries.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，使用JiBX工具（jibx-maven-plugin）生成POJO类，并从现有模式绑定定义文件，然后将基于JiBX库构建Web服务客户端和服务器。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe contains a server `(LiveRestaurant_R-6.3)` and a client `(LiveRestaurant_R-6.3-Client)`
    project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例包含一个服务器（LiveRestaurant_R-6.3）和一个客户端（LiveRestaurant_R-6.3-Client）项目。
- en: '`LiveRestaurant_R-6.3` has the following Maven dependencies:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.3`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`jibx-run-1.2.3.jar`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jibx-run-1.2.3.jar`'
- en: '`jibx-extras-1.2.3.jar`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jibx-extras-1.2.3.jar`'
- en: '`jibx-ws-0.9.1.jar`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jibx-ws-0.9.1.jar`'
- en: '`LiveRestaurant_R-6.3-Client` has the following Maven dependencies:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.3-Client`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`jibx-run-1.2.3.jar`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jibx-run-1.2.3.jar`'
- en: '`jibx-extras-1.2.3.jar`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jibx-extras-1.2.3.jar`'
- en: '`jibx-ws-0.9.1.jar`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jibx-ws-0.9.1.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register the JiBX marshaller inside the server/client-side configuration file.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端配置文件中注册JiBX编组器。
- en: Configure `xmlbeans-maven-plugin` inside the server/client-side POM files.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端POM文件中配置`xmlbeans-maven-plugin`。
- en: 'Set up the server and run the client (it also generates classes from a schema):'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务器并运行客户端（它还从模式生成类）：
- en: 'Server project root: `mvn clean package` (it also generates classes from schema).
    Copy the WAR file into the Tomcat `webapp` folder and run Tomcat (apache-tomcat-6.0.18)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目根目录：`mvn clean package`（它还从模式生成类）。将WAR文件复制到Tomcat的`webapp`文件夹中并运行Tomcat（apache-tomcat-6.0.18）
- en: 'Client project-root: `mvn clean package` (it also generate classes from schema)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目根目录：`mvn clean package`（它还从模式生成类）
- en: 'The following is the client-side output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端的输出：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As explained in the previous recipe, the application context for the server/client
    uses a customized marshaller (`org.springframework.oxm.jibx.JibxMarshaller`) to
    perform the Object/XML marshalling process. This Spring marshaller uses JiBX libraries
    for binding and marshalling processes. The following POM plugin setting (goal:
    `schema-codegen)` generates POJO classes from a schema `(OrderService.xsd)` into
    a package `(com.packtpub.liverestaurant.domain)` and it also generates a binding
    file (goal: `bind):`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的配方中所述，服务器/客户端的应用程序上下文使用自定义编组器（`org.springframework.oxm.jibx.JibxMarshaller`）执行对象/XML编组过程。这个Spring编组器使用JiBX库进行绑定和编组过程。以下POM插件设置（目标：`schema-codegen`）从模式（`OrderService.xsd`）生成POJO类到一个包（`com.packtpub.liverestaurant.domain`），并且还生成一个绑定文件（目标：`bind`）：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As described in the earlier recipes, this setting in the server and client
    Spring context file causes the client and server to use a customized marshaller
    `(JibxMarshaller)` for marshalling/unmarshalling POJO classes to/from XML data:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的配方中所述，服务器和客户端Spring上下文文件中的此设置使客户端和服务器使用自定义编组器（`JibxMarshaller`）对POJO类进行编组/解组为XML数据：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`JibxMarshaller` uses mapping the `binding.xml` file for the marshalling task.
    As it is shown in the mapping file, JiBX supports for simple data binding (<value
    `style="element" name="fName"...)` as well as complex data binding known as structure
    (<structure `map-as="tns:Address"...)`. This feature makes JiBX the most flexibility-binding
    framework among the others.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`JibxMarshaller`使用`binding.xml`文件来进行编组任务。正如在映射文件中所示，JiBX支持简单数据绑定（`<value style="element"
    name="fName"...`）以及被称为结构的复杂数据绑定（`<structure map-as="tns:Address"...`）。这个特性使JiBX成为其他框架中最灵活的绑定框架。'
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `OrderServiceEndPoint`, which is annotated as an `@Endpoint`, is almost
    the same as earlier recipes (Marshalling *with JAXB2)*; only the implementation
    is slightly different.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceEndPoint`被注释为`@Endpoint`，几乎与之前的配方（使用JAXB2进行编组）相同；只是实现略有不同。'
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: JiBX provides more flexibility by letting users create their own customized
    marshaller. It means instead of using a generated binding file, a custom binding
    file and custom marshaller classes to marshal any kind of data structure inside
    an XML document.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: JiBX通过让用户创建自己的自定义编组器来提供更大的灵活性。这意味着可以使用自定义绑定文件和自定义编组器类来对任何类型的数据结构进行编组到XML文档中。
- en: Marshalling with XStream
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XStream进行编组
- en: '**XStream** ([http://xstream.codehaus.org/](http://xstream.codehaus.org/))
    is a simple library for marshalling/unmarshalling objects to/from XML data. The
    following major features make this library different from others:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**XStream** ([http://xstream.codehaus.org/](http://xstream.codehaus.org/))是一个简单的库，用于将对象编组/解组为XML数据。以下主要特点使这个库与其他库不同：'
- en: Doesn't need a mapping file
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要映射文件
- en: Doesn't need to change POJO (no need for a setter/getter and default constructor)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要更改POJO（不需要setter/getter和默认构造函数）
- en: Alternative output format (JSON support and morphing)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备用输出格式（JSON支持和变形）
- en: XStream does not have a tool to generate a schema from existing Java code or
    to generate Java code from an existing schema
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XStream没有工具可以从现有的Java代码生成模式，也不能从现有模式生成Java代码
- en: XStream does not support namespaces
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XStream不支持命名空间
- en: In this recipe, a Web-Service client and server are created that use XStream
    libraries as a marshaller. Since XStream is not using any namespace in XML data
    (payload), a web address style of Web-Service is set up.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，创建了一个使用XStream库作为编组器的Web服务客户端和服务器。由于XStream在XML数据（有效负载）中不使用任何命名空间，因此设置了一种Web服务的网址样式。
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe contains a server (`LiveRestaurant_R-6.4`) and a client (`LiveRestaurant_R-6.4-Client`)
    project.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方包含一个服务器（`LiveRestaurant_R-6.4`）和一个客户端（`LiveRestaurant_R-6.4-Client`）项目。
- en: '`LiveRestaurant_R-6.4` has the following Maven dependencies:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.4`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`jxstream-1.3.1.jar`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jxstream-1.3.1.jar`'
- en: '`LiveRestaurant_R-6.4-Client` has the following Maven dependencies:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.4-Client`具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`jxstream-1.3.1.jar`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jxstream-1.3.1.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register XStream marshaller inside the server/client-side configuration file.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端配置文件中注册XStream编组器。
- en: Annotate domain classes with the `Xstream` annotation.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`Xstream`注释领域类。
- en: 'Set up the server and run the client:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务器并运行客户端：
- en: 'Server project-root: `mvn clean package tomcat:run`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目根目录：`mvn clean package tomcat:run`
- en: 'Client project-root: `mvn clean package`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目根目录：`mvn clean package`
- en: 'The following is the client-side output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As explained in the previous recipe, the application context for server/client
    uses a customized marshaller (`org.springframework.oxm.xstream.XStreamMarshaller`)
    to perform the Object/XML marshalling process. This spring marshaller uses XStream
    libraries for the marshalling process. The beans that are input and output parameters
    of the method in the endpoint (`OrderServiceEndPoint.java`) have to be registered
    in `XstreamMarshaller. autodetectAnnotations` is set to detect annotating within
    POJO classes:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一配方所述，服务器/客户端的应用程序上下文使用自定义的marshaller（`org.springframework.oxm.xstream.XStreamMarshaller`）来执行对象/XML编组过程。这个spring
    marshaller使用XStream库进行编组过程。在端点方法中的输入和输出参数的bean（`OrderServiceEndPoint.java`）必须在`XstreamMarshaller`中注册。`autodetectAnnotations`设置为检测POJO类中的注释：
- en: '[PRE16]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`XStreamMarshaller` uses annotation in POJO classes (instead of the binding
    file) for the marshalling task. `@XstreamAlias` tells the marshaller that this
    class will be serialized/deserialized as ''name''. There is other annotation that
    is optional, but it tells marshaller how to serialize/deserialize the field of
    a class `(@XStreamAsAttribute, @XStreamImplicit`, and so on).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`XStreamMarshaller`使用POJO类中的注释（而不是绑定文件）来执行编组任务。`@XstreamAlias`告诉marshaller这个类将被序列化/反序列化为''name''。还有其他注释是可选的，但它告诉marshaller如何序列化/反序列化类的字段（`@XStreamAsAttribute`，`@XStreamImplicit`等）。'
- en: '[PRE17]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `OrderServiceEndPoint`, which is annotated as an `@Endpoint` is the same
    as JiBX recipes that " the endpoint method''s input and and return parameters
    are POJO `(PlaceOrderResponse, PlaceOrderRequest`, and so on) that is mapped to
    the schema. The only difference is that the endpoint uses web addressing for method
    mapping:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 被注释为`@Endpoint`的`OrderServiceEndPoint`与JiBX配方相同，即端点方法的输入和返回参数是POJO（`PlaceOrderResponse`，`PlaceOrderRequest`等），它们被映射到模式。唯一的区别是端点使用Web寻址进行方法映射：
- en: '[PRE18]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Marshalling with MooseXML
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MooseXML进行编组
- en: '**Moose** ([http://quigley.com/moose/](http://quigley.com/moose/)) is a lightweight
    framework for marshalling/unmarshalling objects to/from XML data. The schema generator
    of Moose is what makes this framework different from others. Moose is able to
    generate schema directly from annotated POJO classes. This is what is required
    to develop contract-last Web-Service development.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**Moose**（[http://quigley.com/moose/](http://quigley.com/moose/)）是一个轻量级的框架，用于将对象编组/解组为XML数据。Moose的模式生成器使得这个框架与其他框架不同。Moose能够直接从带注释的POJO类生成模式。这是开发面向契约的Web服务开发所需的。'
- en: In this recipe, Moose is used to marshall/unmarshall objects to/from XML data
    in the Web-Service client and server communications.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，Moose用于在Web服务客户端和服务器通信中将对象编组/解组为XML数据。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe contains a server (`LiveRestaurant_R-6.5`) and a client (`LiveRestaurant_R-6.5-Client`)
    project.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方包含一个服务器（`LiveRestaurant_R-6.5`）和一个客户端（`LiveRestaurant_R-6.5-Client`）项目。
- en: '`LiveRestaurant_R-6.5` has the following Maven dependencies:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.5`具有以下Maven依赖项：'
- en: '`log4j-1.2.9.jar`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`moose-0.4.6.jar`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moose-0.4.6.jar`'
- en: '`LiveRestaurant_R-6.5-Client` has the following Maven dependencies:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.5-Client`具有以下Maven依赖项：'
- en: '`log4j-1.2.9.jar`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`moose-0.4.6.jar`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moose-0.4.6.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Register Moose marshaller inside the server/client-side configuration file.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端配置文件中注册Moose marshaller。
- en: Annotate domain classes with the `@XML` annotation.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@XML`注释对领域类进行注释。
- en: 'Set up the server and run the client:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务器并运行客户端：
- en: 'Server project-root: `mvn clean package tomcat:run`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目根目录：`mvn clean package tomcat:run`
- en: 'Client project-root: `mvn clean package`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目根目录：`mvn clean package`
- en: 'The following is the client-side output:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE19]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As explained in the previous recipe, the application context for the server/client
    uses a customized marshaller (`com.quigley.moose.spring.MooseMarshaller`) to perform
    the Object/XML marshalling process. A mapping provider is injected into this custom
    marshaller. The mapping provider is to set the namespace and `xmlPrefix` when
    the object is being marshalled into XML and when the XML data is being converted
    into an object. The mapping provider gets the list of registered POJO classes
    from `com.quigley.moose.mapping.provider.annotation.StaticClassesProvider:`
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一配方所述，服务器/客户端的应用程序上下文使用自定义的marshaller（`com.quigley.moose.spring.MooseMarshaller`）来执行对象/XML编组过程。一个映射提供程序被注入到这个自定义的marshaller中。当对象被编组成XML时，映射提供程序用于设置命名空间和`xmlPrefix`，当XML数据被转换为对象时也是如此。映射提供程序从`com.quigley.moose.mapping.provider.annotation.StaticClassesProvider`中获取已注册的POJO类列表：
- en: '[PRE20]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`MooseMarshaller`, just like `XStreamMarshaller`, uses annotation in POJO classes
    for marshalling tasks. `@XML` tells the marshaller that this class will be serialized/deserialized
    as ''name''. `@XMLField` is the tag that should be placed for each class field.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`MooseMarshaller`，就像`XStreamMarshaller`一样，使用POJO类中的注释来执行编组任务。`@XML`告诉marshaller这个类将被序列化/反序列化为''name''。`@XMLField`是应该放在每个类字段上的标记。'
- en: '[PRE21]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `OrderServiceEndPoint`, which is annotated as an `@Endpoint`, is the same
    as the JiBX recipes that passing and return parameter is mapped POJO `(PlaceOrderResponse,
    PlaceOrderRequest`, and so on) that is mapped to the schema.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 被注释为`@Endpoint`的`OrderServiceEndPoint`与JiBX配方相同，传递和返回参数是映射到模式的POJO（`PlaceOrderResponse`，`PlaceOrderRequest`等）。
- en: '[PRE22]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating a custom marshaller using XPath for conditional XML parsing
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XPath创建自定义的marshaller进行条件XML解析。
- en: Using the existing marshaller frameworks (JAXB, JiBX, and so on) is always the
    easiest way to handle a marshalling task. However, eventually you may need to
    write a customized marshaller. For example, you may get an XML input data, which
    is in a different format from the one that is generally is being used by the recognized
    marshaller.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 始终使用现有的编组器框架（JAXB、JiBX 等）是处理编组任务的最简单方法。但是，最终您可能需要编写自定义的编组器。例如，您可能会收到一个 XML 输入数据，它的格式与通常由已识别的编组器使用的格式不同。
- en: 'Spring lets you define a customized marshaller and inject it into your endpoint
    marshaller as existing marshaller frameworks. In this recipe, the client sends/receives
    this data to/from the server in the following format:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 允许您定义自定义编组器并将其注入到端点编组器中，就像现有的编组器框架一样。在这个示例中，客户端以以下格式向服务器发送/接收数据：
- en: '[PRE23]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, the XML input that can be mapped to/from the server''s POJO is as
    follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以映射到/从服务器的 POJO 的 XML 输入如下：
- en: '[PRE24]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this recipe, a customized marshaller is used to map the incoming XML data
    to the server's POJO and the unmarshalling server response to the client format.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用自定义的编组器将传入的 XML 数据映射到服务器的 POJO，并将解组服务器响应到客户端格式。
- en: Getting ready
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe contains a server (`LiveRestaurant_R-6.6`) and a client (`LiveRestaurant_R-6.6-Client`)
    project.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例包含一个服务器（`LiveRestaurant_R-6.6`）和一个客户端（`LiveRestaurant_R-6.6-Client`）项目。
- en: '`LiveRestaurant_R-6.6` has the following Maven dependencies:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.6` 具有以下 Maven 依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`dom4j-1.6.1.jar`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dom4j-1.6.1.jar`'
- en: '`LiveRestaurant_R-6.6-Client` has the following Maven dependencies:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-6.6-Client` 具有以下 Maven 依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`dom4j-1.6.1.jar`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dom4j-1.6.1.jar`'
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Create a customized marshaller class.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义编组器类。
- en: Register the new marshaller inside the server-side configuration file.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端配置文件中注册新的编组器。
- en: 'Set up the server and run the client:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务器并运行客户端：
- en: 'Server project-root: `mvn clean package tomcat:run`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目根目录：`mvn clean package tomcat:run`
- en: 'Client project-root: `mvn clean package`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目根目录：`mvn clean package`
- en: 'The following is the server-side output:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务器端输出：
- en: '[PRE25]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To be able to work as an endpoint marshaller, a customized marshaller (`ServerCustomMarshaller`)
    should implement `Marshaller` and `Unmarshaller` interfaces. The method `supports`
    is for verifying if the POJO class is registered with this marshaller. The value
    of the registered POJO comes from the Spring context file.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够作为端点编组器工作，自定义编组器（`ServerCustomMarshaller`）应该实现 `Marshaller` 和 `Unmarshaller`
    接口。`supports` 方法用于验证 POJO 类是否已注册到该编组器。注册的 POJO 的值来自 Spring 上下文文件。
- en: 'The method `unmarshal` will be called by the endpoint when the Web-Service
    calls the endpoint method (`handleOrderRequest`) to build the passing parameter
    (`PlaceOrderRequest`). In the `unmarshal` method, DOM4j and XPath are used to
    fetch a value from the incoming XML data. These values will populate the POJO
    class and return it back to the endpoint. The method `marshal` will be called
    by the endpoint when the endpoint method (`handleOrderRequest`) returns the response
    (`PlaceOrderResponse`). Inside the `marshal` method, `XMLStreamWriter` is used
    to return the desired format XML data to the client:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Web 服务调用端点方法（`handleOrderRequest`）构建传递参数（`PlaceOrderRequest`）时，将调用方法 `unmarshal`。在
    `unmarshal` 方法中，使用 DOM4j 和 XPath 从传入的 XML 数据中提取值。这些值将填充 POJO 类并将其返回给端点。当端点方法（`handleOrderRequest`）返回响应（`PlaceOrderResponse`）时，将调用方法
    `marshal`。在 `marshal` 方法内部，使用 `XMLStreamWriter` 将所需格式的 XML 数据返回给客户端：
- en: '[PRE26]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As explained in the previous recipe, the application context for the server/client
    uses this customized marshaller (`ServerCustomMarshaller`) to perform the Object/XML
    marshalling process. `RegisteredClassNames` is for registering the POJO classes
    eligible for marshalling/unmarshalling via the customized marshaller (`ServerCustomMarshaller`).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所述，服务器/客户端的应用程序上下文使用这个自定义编组器（`ServerCustomMarshaller`）来执行对象/XML 编组过程。`RegisteredClassNames`
    用于注册符合条件的 POJO 类，以便通过自定义编组器（`ServerCustomMarshaller`）进行编组/解组。
- en: '[PRE27]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `OrderEndPoint`, which is annotated as an `@Endpoint`, is the same as the
    JiBX recipes that the endpoint method's input and and return parameters are POJO
    `(PlaceOrderResponse, PlaceOrderRequest`, and so on) that is mapped to the schema.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderEndPoint` 被注释为 `@Endpoint`，与 JiBX 示例相同，端点方法的输入和返回参数是映射到模式的 POJO（`PlaceOrderResponse`、`PlaceOrderRequest`
    等）。'
