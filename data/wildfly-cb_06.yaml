- en: Chapter 6. Clustering WildFly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 WildFly集群
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Creating a cluster in standalone mode
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以独立模式创建集群
- en: Creating separate clusters in standalone mode
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以独立模式创建单独的集群
- en: Creating a cluster in domain mode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以域模式创建集群
- en: Creating separate clusters in domain mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以域模式创建单独的集群
- en: Creating a cluster via TCP
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过TCP创建集群
- en: Testing the UDP protocol with the JGroups tool
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JGroups工具测试UDP协议
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to create a cluster for a web application
    spread across two or more WildFly nodes. Clustering is the capability to continue
    serving a client, even in case of failures (that is, a server crash), and is also
    known as failover.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何为分布在两个或更多WildFly节点上的Web应用程序创建集群。集群是在发生故障（即服务器崩溃）的情况下继续为客户端提供服务的能力，也称为故障转移。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Clustering is meant to be at the application level and not at the OS level.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 集群旨在在应用层而不是在操作系统层实现。
- en: For example, suppose you are filling in a long form, in a large number of steps
    (where steps are meant to be pages). Now suppose that in the last step, the server
    or the WildFly node crashes, you would have to refill all the information again.
    Surely, you will not use that site anymore, if you can choose to do so. By the
    way, how would you address such a problem? Clustering is the answer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在填写一个长表单，包含大量步骤（步骤指的是页面）。现在假设在最后一步，服务器或WildFly节点崩溃了，你将不得不重新填写所有信息。当然，如果你可以选择的话，你肯定不会再使用那个网站了。顺便问一下，你会如何解决这个问题？集群就是答案。
- en: In clustering, you get the user's session replicated to your cluster nodes.
    So in case of a failure, in the next HTTP request, you will land on a different
    server/node, which will continue serving you just as though nothing happened—obviously,
    the end user will not see that his/her request has been served by a different
    server/node.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群中，用户的会话会被复制到你的集群节点。所以，在发生故障的情况下，在下一个HTTP请求中，你将落在不同的服务器/节点上，它将像什么都没发生一样继续为你提供服务——显然，最终用户不会看到他的/她的请求是由不同的服务器/节点处理的。
- en: In WildFly, we have two components (from a configuration file point of view,
    they are subsystems) that accomplish this job; they are *infinispan* (for caching
    the data session) and *JGroups* (to spread HTTP sessions across cluster nodes).
    Infinispan is the component that stores the data, whilst JGroups is the component
    that orchestrates the communication between the nodes forming the application
    cluster.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly中，我们有两个组件（从配置文件的角度来看，它们是子系统）来完成这项工作；它们是*infinispan*（用于缓存数据会话）和*JGroups*（用于在集群节点之间传播HTTP会话）。Infinispan是存储数据的组件，而JGroups是协调构成应用集群的节点之间通信的组件。
- en: 'We will see how clustering can be achieved using different protocols: UDP (multicast
    and also the default one) and TCP (unicast). This can be configured in the `jgroups`
    subsystem. The default one is UDP.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何使用不同的协议实现集群：UDP（多播和默认协议）和TCP（单播）。这可以在`jgroups`子系统中进行配置。默认的是UDP。
- en: 'For the sake of completeness, we will try our configuration in both the operational
    modes: standalone and domain.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们将在两种操作模式中尝试我们的配置：独立模式和域模式。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that clustering is a service provided by WildFly, as such, it is activated
    on demand. Thus, you will need to provide a `cluster-aware` application in order
    to activate clustering. That means having the `<distributable/>` XML tag inside
    your `web.xml` file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，集群是WildFly提供的一项服务，因此它是按需激活的。因此，你需要提供一个`集群感知`的应用程序来激活集群。这意味着在你的`web.xml`文件中需要有`<distributable/>`
    XML标签。
- en: Within this chapter, you will need a standard WildFly installation and a settled
    management user. If you are starting from here, take a look at [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你需要一个标准的WildFly安装和一个设置好的管理用户。如果你从这里开始，请参阅[第1章](ch01.html "第1章。欢迎来到WildFly！")，*欢迎来到WildFly！*
- en: Creating a cluster in standalone mode
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以独立模式创建集群
- en: In this recipe, you will learn how to cluster two WildFly nodes locally, that
    is, on your PC. We will try this using the standalone mode and the `ha` profile.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在本地将两个WildFly节点进行集群化，即在你的PC上。我们将使用独立模式和`ha`配置文件来尝试这个操作。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need the `cluster-aware` application named `cluster-test`,
    that you can find in my GitHub repository. If you skipped the *Managing applications
    using the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running
    WildFly in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer
    to it to download all the source code and projects that you will need.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要名为 `cluster-test` 的 `cluster-aware` 应用程序，你可以在我的 GitHub 仓库中找到它。如果你跳过了
    [第 2 章](ch02.html "第 2 章。以独立模式运行 WildFly") 中的 *使用部署文件夹管理应用程序* 配方，*以独立模式运行 WildFly*，请参考它以下载你需要的所有源代码和项目。
- en: 'To build the application, give the following commands:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请输入以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'From the WildFly installation directory `$WILDFLY_HOME`, let''s create two
    folders, each one representing a server node:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从 WildFly 安装目录 `$WILDFLY_HOME`，让我们创建两个文件夹，每个文件夹代表一个服务器节点：
- en: 'Open a terminal and execute the following commands:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端并执行以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let''s copy the `cluster-test.war` application into the `deployments`
    folder of each node that we have just created. Execute the following commands:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将 `cluster-test.war` 应用程序复制到我们刚刚创建的每个节点的 `deployments` 文件夹中。执行以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are almost ready to test our cluster. We need some configuration, but without
    editing much, we will just pass a command-line parameter to the `standalone.sh`
    script. Let''s do it:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎准备好测试我们的集群了。我们需要一些配置，但不需要编辑太多，我们只需将命令行参数传递给 `standalone.sh` 脚本。让我们这么做：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding command, I've emphasized only the relevant outputs; this is
    to give you a clear view of the clustering service.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的命令中，我只强调了相关的输出；这是为了给你一个清晰的聚类服务视图。
- en: Let's open a browser and point it to the URL `http://127.0.0.1:8180/cluster-test`.
    Now refresh the page a few times. You should see something like the following
    screenshot:![How to do it...](img/3744_06_01.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个浏览器，将其指向 URL `http://127.0.0.1:8180/cluster-test`。现在刷新页面几次。你应该会看到以下截图：![如何操作...](img/3744_06_01.jpg)
- en: '"cluster-test" application running on "node-1"'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"node-1" 上运行的 "cluster-test" 应用程序'
- en: 'In the log, you should find the following statements:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在日志中，你应该会找到以下语句：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that everything has gone well, let's start the second node and see what
    happens.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在一切顺利，让我们启动第二个节点并看看会发生什么。
- en: 'In a new terminal, execute the following commands:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端中，执行以下命令：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding command-line output, I''ve emphasized only the relevant outputs;
    this is to give you a clear view of the clustering service. Unlike `node-1`, we
    can see that now the cluster is composed of two members: `node-1` and `node-2`.'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的命令行输出中，我只强调了相关的输出；这是为了给你一个清晰的聚类服务视图。与 `node-1` 不同，我们可以看到现在集群由两个成员组成：`node-1`
    和 `node-2`。
- en: Now, let's try pointing the same browser window to the URL `http://127.0.0.1:8280/cluster-test`.
    You should see something like this:![How to do it...](img/3744_06_02.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将同一个浏览器窗口指向 URL `http://127.0.0.1:8280/cluster-test`。你应该会看到如下内容：![如何操作...](img/3744_06_02.jpg)
- en: '"cluster-test" application running on "node-2"'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"node-2" 上运行的 "cluster-test" 应用程序'
- en: As you can see, the second node continued counting exactly from where we stopped
    in `node-1`. Great, our cluster is working!!
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，第二个节点从我们在 `node-1` 中停止的地方继续计数。太好了，我们的集群正在工作！！
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s analyze what we have done and why it is working without much configuration.
    Along with `standalone.sh` script for `node-1`, we specified a few parameters
    such as:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下我们做了什么以及为什么它不需要太多配置就能工作。除了 `node-1` 的 `standalone.sh` 脚本外，我们还指定了一些参数，例如：
- en: '`jboss.server.base.dir=cl-std-node-1`: Needed to specify our base directory
    as a starting folder to retrieve all the configuration files.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss.server.base.dir=cl-std-node-1`：需要指定我们的基础目录作为起始文件夹以检索所有配置文件。'
- en: '`--server-config=standalone-ha.xml`: Needed to specify the server configuration
    file with `ha` profile.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--server-config=standalone-ha.xml`：需要指定具有 `ha` 配置文件的服务器配置文件。'
- en: '`jboss.socket.binding.port-offset=100`: Needed to specify the port offset (`200`
    for `node-2`). We could have skipped this for the first node, but I like seeing
    the series: `1`,`2`,`3`,`4`..`n`, which in this case would have been `8180`, `8280`,
    `8380,` and so on.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss.socket.binding.port-offset=100`：需要指定端口偏移量（对于 `node-2` 为 `200`）。对于第一个节点，我们可以跳过这个步骤，但我喜欢看到序列：`1`、`2`、`3`、`4`...`n`，在这种情况下将是
    `8180`、`8280`、`8380`，以此类推。'
- en: '`jboss.node.name=node-1`: Needed to uniquely identify the node within the cluster
    (obviously, `node-2` for the second node).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss.node.name=node-1`：需要唯一标识集群内的节点（显然，对于第二个节点是 `node-2`）。'
- en: 'That''s all we need to do to make our cluster. This is because of the default
    WildFly''s configuration, especially the configuration of the subsystem, `jgroups`.
    Let''s see its defaults:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们构建集群所需做的全部工作。这是因为WildFly的默认配置，特别是子系统`jgroups`的配置。让我们看看它的默认设置：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, the default protocol used for cluster transportation is the UDP (see the
    emphasized code). This UDP setting has additional configuration within the `socket-binding-group`
    specified in the `standalone-ha.xml` file, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用于集群传输的默认协议是UDP（见强调的代码）。此UDP设置在`standalone-ha.xml`文件中指定的`socket-binding-group`内有额外的配置，如下所示：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, by default, every member of the cluster advertises itself at the `230.0.0.4`
    address. Also, every port specified in the configuration is altered along with
    the `jboss.socket.binding.port-offset` parameter specified by the command-line
    script.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，默认情况下，集群中的每个成员都会在`230.0.0.4`地址上广播自己。此外，配置中指定的每个端口都会随着命令行脚本中指定的`jboss.socket.binding.port-offset`参数一起更改。
- en: There's more...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We could have made our cluster without the `port-offset` directive, and by using
    different IPs for each node instead, but this wouldn't have worked properly. This
    is because of the HTTP session reference stored in a cookie. Generally speaking,
    a cookie consists of a name (typically `JSESSIONID`), a value (which is an ID
    used to reference the HTTP session on the server), a domain, and a context path.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以不使用`port-offset`指令来构建我们的集群，而是为每个节点使用不同的IP地址，但这不会正常工作。这是因为存储在cookie中的HTTP会话引用。一般来说，cookie由一个名称（通常是`JSESSIONID`）、一个值（用于在服务器上引用HTTP会话的ID）、一个域和一个上下文路径组成。
- en: All these properties must be the same in order to send requests to the same
    HTTP session on the server, which will not be the case with nodes bound to different
    IPs. The IP is the domain of the cookie, thus it will not work—unless you balance
    all the properties—but that's the subject of the next chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些属性必须相同，才能向服务器上的同一HTTP会话发送请求，而绑定到不同IP的节点则不会是这样。IP是cookie的域，因此它将不起作用——除非你平衡所有属性——但这将是下一章的主题。
- en: See also
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you have any problem with this configuration, you might have network problems,
    which you can troubleshoot with the last recipe of this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在此配置中遇到任何问题，您可能存在网络问题，您可以使用本章的最后一个配方进行故障排除。
- en: Creating separate clusters in standalone mode
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在独立模式下创建单独的集群
- en: In this recipe, you will learn how to configure different and isolated clusters,
    running locally. We will try this using the standalone mode and the `ha` profile.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将学习如何配置不同且隔离的集群，在本地运行。我们将使用独立模式和`ha`配置文件来尝试这样做。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need the `cluster-aware` application named `cluster-test`,
    that you can find in my GitHub repository. If you skipped the *Managing applications
    using the deployments folder* recipe of [Chapter 2](ch02.html "Chapter 2. Running
    WildFly in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer
    to it to download all the source code and projects that you will need.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个名为`cluster-test`的`cluster-aware`应用程序，您可以在我的GitHub仓库中找到它。如果您跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中关于“使用部署文件夹管理应用程序”的配方，请参阅它以下载您将需要的所有源代码和项目。
- en: 'To build the application, execute the following commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请执行以下命令：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create four folders,
    each one representing a server node.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从WildFly安装目录`$WILDFLY_HOME`开始，让我们创建四个文件夹，每个文件夹代表一个服务器节点。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端并执行以下命令：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s copy the `cluster-test.war` application into the `deployments`
    folder of each node that we have just created. Give the following commands:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将`cluster-test.war`应用程序复制到我们刚刚创建的每个节点的`deployments`文件夹中。请执行以下命令：
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are almost ready to test our cluster. We just need some configuration to
    pass to the `standalone.sh` script, through the command line.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎准备好测试我们的集群了。我们只需要一些配置传递给`standalone.sh`脚本，通过命令行。
- en: Node-A1
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点-A1
- en: 'In the following log output, you can see that a cluster was formed and a member
    named `node-A1` joined it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下日志输出中，您可以看到已经形成了一个集群，并且一个名为`node-A1`的成员加入了它：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Node-A2
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点-A2
- en: 'In the following log output, you can see that a member named `node-A2` joined
    a cluster along with the other member named `node-A1`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下日志输出中，您可以看到一个名为`node-A2`的成员与另一个名为`node-A1`的成员一起加入了一个集群：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Node-B1
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点-B1
- en: 'In the following log output, you can see that a cluster was formed and a member
    named `node-B1` joined it. We do not see any `node-Ax` members, so we have formed
    a different cluster:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下日志输出中，你可以看到已经形成了一个集群，并且一个名为`node-B1`的成员加入了它。我们没有看到任何`node-Ax`成员，所以我们形成了一个不同的集群：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Node-B2
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点-B2
- en: 'In the following log output, you can see that a member named `node-B2` joined
    a cluster along with the other member named `node-B1`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下日志输出中，你可以看到一个名为`node-B2`的成员与另一个名为`node-B1`的成员一起加入了一个集群：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Now that we have launched all the WildFly nodes and formed two different clusters,
    let''s test them with our great `cluster-test` application:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了所有WildFly节点并形成了两个不同的集群，让我们用我们的优秀`cluster-test`应用程序来测试它们：
- en: 'Open your browser and point it to the following location: `http://127.0.0.1:8180/cluster-test`.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，将其指向以下位置：`http://127.0.0.1:8180/cluster-test`。
- en: Refresh the page a few times. In the browser window, you should see something
    similar to the following screenshot:![How to do it…](img/3744_06_01.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面几次。在浏览器窗口中，你应该会看到以下类似截图：![如何操作…](img/3744_06_01.jpg)
- en: '"cluster-test" application running on "node-A1"'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“node-A1”上运行的“cluster-test”应用程序
- en: 'In the `node-A1` log, you should find the following statements:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`node-A1`日志中，你应该找到以下语句：
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, let's try pointing the same browser window to the URL `http://127.0.0.1:8280/cluster-test`.
    You should see something like the following screenshot:![How to do it…](img/3744_06_02.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将相同的浏览器窗口指向URL `http://127.0.0.1:8280/cluster-test`。你应该会看到以下类似截图：![如何操作…](img/3744_06_02.jpg)
- en: '"cluster-test" application running on "node-A2"'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“node-A2”上运行的“cluster-test”应用程序
- en: 'As you can see, the second node continued counting exactly from where we stopped
    in `node-A1`. In the `node-A2` log, you should find the following statements:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，第二个节点从我们在`node-A1`停止的地方继续计数。在`node-A2`日志中，你应该找到以下语句：
- en: '[PRE16]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: OK, cluster `A` is working.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，集群`A`正在运行。
- en: 'Now let''s try the other URLs for nodes `B`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们尝试节点`B`的其他URL：
- en: Within the same browser window, point to the address `http://127.0.0.1:8380/cluster-test`.
    In the browser window, you should see something similar to the following image:![How
    to do it…](img/3744_06_03.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个浏览器窗口中，指向地址`http://127.0.0.1:8380/cluster-test`。在浏览器窗口中，你应该会看到以下类似图像：![如何操作…](img/3744_06_03.jpg)
- en: '"cluster-test" application running on "node-B1"'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“node-B1”上运行的“cluster-test”应用程序
- en: 'As you can see, the application started counting from `0` (zero). The `node-B1`
    log should have the following statements:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，应用程序从`0`（零）开始计数。`node-B1`日志应该有如下语句：
- en: '[PRE17]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s try pointing the same browser window to the following URL: `http://127.0.0.1:8480/cluster-test`.
    You should see the following screenshot:![How to do it…](img/3744_06_04.jpg)'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将相同的浏览器窗口指向以下URL：`http://127.0.0.1:8480/cluster-test`。你应该会看到以下截图：![如何操作…](img/3744_06_04.jpg)
- en: '"cluster-test" application running on "node-B2"'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“node-B2”上运行的“cluster-test”应用程序
- en: 'In the `node-B2` log, you should find the following statements:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`node-B2`日志中，你应该找到以下语句：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Great, cluster `B` is working too! Now, try switching from one URL to another
    and see if the cluster responds correctly.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 太好了，集群`B`也正在运行！现在，尝试在不同的URL之间切换，看看集群是否正确响应。
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s analyze what we have done and why it is working without much configuration.
    Along with the `standalone.sh` script for `node-A1` and `node-A2`, we specified
    a few parameters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析我们所做的，以及为什么它不需要太多配置就能工作。除了`node-A1`和`node-A2`的`standalone.sh`脚本外，我们还指定了一些参数：
- en: '`jboss.server.base.dir=cl-std-node-A1`: Needed to specify our base directory
    as a starting folder to retrieve all the configuration files (`cl-std-node-A2`
    for `node-A2`)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss.server.base.dir=cl-std-node-A1`：需要指定我们的基础目录作为起始文件夹以检索所有配置文件（`cl-std-node-A2`用于`node-A2`）'
- en: '`--server-config=standalone-ha.xml`: Needed to specify the server configuration
    file with `ha` profile'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--server-config=standalone-ha.xml`：需要指定具有`ha`配置文件的服务器配置文件'
- en: 'jboss.socket.binding.port-offset=100: Needed to specify the port offset (200
    for "node-2")'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jboss.socket.binding.port-offset=100：需要指定端口偏移量（对于“node-2”是200）
- en: '`jboss.node.name=node-A1`: Needed to uniquely identify the node within the
    cluster (obviously `node-A2` for the second `A` node)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss.node.name=node-A1`：需要唯一标识集群内的节点（显然对于第二个`A`节点是`node-A2`）'
- en: That's all we need to do to make the cluster for nodes `A`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们为节点`A`创建集群所需做的所有事情。
- en: 'To create the nodes `B` cluster, we needed to specify pretty much the same
    parameters, plus the `jboss.default.multicast.address` one, valued to `230.0.0.5`.
    The default multicast address value is `230.0.0.4`, which is then used by the
    `A` nodes. This enabled us to create two different clusters: members of cluster
    `A` will communicate through the `230.0.0.4` address, while members of cluster
    `B` will communicate through the *230.0.0.5* address.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建节点`B`集群，我们需要指定几乎相同的参数，加上`jboss.default.multicast.address`，其值为`230.0.0.5`。默认的组播地址值为`230.0.0.4`，然后由`A`节点使用。这使得我们能够创建两个不同的集群：集群`A`的成员将通过`230.0.0.4`地址进行通信，而集群`B`的成员将通过*230.0.0.5*地址进行通信。
- en: Creating a cluster in domain mode
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在域模式下创建集群
- en: In this recipe, you will learn how to cluster two WildFly nodes locally, that
    is, on your PC. We will try this using the domain mode and the `ha` profile.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在本地将两个WildFly节点进行集群，也就是说，在你的电脑上。我们将使用域模式和`ha`配置文件来尝试这个操作。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need the `cluster-aware` application named `cluster-test`,
    that you can find in my GitHub repository. If you skipped the *Managing applications
    using the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running
    WildFly in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer
    to it to download all the source code and projects that you will need.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要一个名为`cluster-test`的`cluster-aware`应用程序，你可以在我的GitHub仓库中找到它。如果你跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中关于*使用部署文件夹管理应用程序*的菜谱，请参考它以下载你需要的所有源代码和项目。
- en: 'To build the application, run the following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请运行以下命令：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create two folders;
    one representing the `domain-controller` and the other one representing the hosts
    (we will have two instances running within the same host).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从WildFly安装目录`$WILDFLY_HOME`开始，让我们创建两个文件夹；一个代表`domain-controller`，另一个代表主机（我们将在同一主机内运行两个实例）。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端并执行以下命令：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Master
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机
- en: Now, let's configure our domain controller using the `domain.xml` and `host.xml`
    files placed in the `cl-dmn-master` folder.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用放置在`cl-dmn-master`文件夹中的`domain.xml`和`host.xml`文件来配置我们的域控制器。
- en: 'Edit the `domain.xml` file and replace the `<server-groups>...</server-groups>`
    tag definition with the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`domain.xml`文件，并将`<server-groups>...</server-groups>`标签定义替换为以下内容：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Again, to use cluster, we need to use the `ha` profile, which I referenced within
    the `profile` attribute of `server-group`. Also, we need to reference the appropriate
    `socket-binding-group` by the `ref` attribute, in this case valued to `ha-sockets`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，为了使用集群，我们需要使用`ha`配置文件，我在`server-group`的`profile`属性中提到了它。此外，我们还需要通过`ref`属性引用适当的`socket-binding-group`，在这种情况下值为`ha-sockets`。
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Follow this rule: always name server groups properly; do not name them "server-A",
    "*server-1*", or similar or you will get confused as soon as you start managing
    more and more servers.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循以下规则：始终正确命名服务器组；不要将它们命名为"server-A"、"*server-1*"或类似名称，否则当你开始管理越来越多的服务器时，你会感到困惑。
- en: Now let's edit the `host.xml` file in order to just have `domain-controller`
    without any running hosts.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编辑`host.xml`文件，以便只包含`domain-controller`而没有任何正在运行的主机。
- en: 'Following are the steps that are to be taken:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要采取的步骤：
- en: 'Name the host as `master`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主机命名为`master`：
- en: '[PRE22]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Replace the `<domain-controller>...</domain-controller>` tag definition with
    the following:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<domain-controller>...</domain-controller>`标签定义替换为以下内容：
- en: '[PRE23]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Remove the `<servers>` tag definition.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`<servers>`标签定义。
- en: OK, we are done with `domain-controller`. Let's have a run.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了`domain-controller`的配置。让我们运行一下。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端并执行以下命令：
- en: '[PRE24]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now we can configure our hosts that will form a part of the cluster.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以配置将成为集群一部分的主机。
- en: Host-1
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机-1
- en: First of all, let's disable `domain.xml`, present in the `cl-dmn-host-1` folder.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们禁用`cl-dmn-host-1`文件夹中现有的`domain.xml`。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端并执行以下命令：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: By doing so, the file will not be read at startup. Now, let's configure our
    host controller using the `host.xml` file placed in the `cl-dmn-host-1` folder.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，文件在启动时将不会被读取。现在，让我们使用放置在`cl-dmn-host-1`文件夹中的`host.xml`文件来配置我们的主机控制器。
- en: 'Edit the `host.xml` file and follow the steps listed next:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`host.xml`文件并按照以下步骤操作：
- en: 'Name the host as `host-1`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主机命名为`host-1`：
- en: '[PRE26]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Replace the `<management-interfaces>...</management-interfaces>` tag definition,
    inside the `<management>` tag, with the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<management-interfaces>...</management-interfaces>`标签定义替换为`<management>`标签内的以下内容：
- en: '[PRE27]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Replace the `<domain-controller>...</domain-controller>` tag definition with
    the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<domain-controller>...</domain-controller>`标签定义替换为以下内容：
- en: '[PRE28]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Replace the `<servers>...</servers>` tag definition with the following:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<servers>...</servers>`标签定义替换为以下内容：
- en: '[PRE29]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this case, naming the servers with an indexed prefix helps because it gives
    you more information. For example, if you have five servers, each one running
    two instances, and you catch an error statement within your log files about `REST-server-7`,
    then you know you have to look into the machine number `4`, right?
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用索引前缀命名服务器有助于提供更多信息。例如，如果你有五个服务器，每个服务器运行两个实例，并且你在日志文件中捕获到关于`REST-server-7`的错误语句，那么你知道你需要查看机器编号`4`，对吧？
- en: 'Open a terminal and execute the following commands:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, if you looked at the `host-1` log output, you should have noticed that
    there is nothing about our cluster. Why? (You should know; anyway, the answer
    will be explained in a little while.)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你查看“host-1”的日志输出，你应该已经注意到关于我们的集群没有任何信息。为什么？（你应该知道；无论如何，答案将在稍后解释。）
- en: Now that everything is up and running, let's deploy our application (did you
    get the answer?).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已经启动并运行，让我们部署我们的应用（你得到答案了吗？）。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE31]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s first check the logs. In `domain-controller`, you should see a statement
    asserting that the content has been uploaded, as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先检查日志。在`domain-controller`中，你应该看到一条声明内容已上传的语句，如下所示：
- en: '[PRE32]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In **host-1** you should see the following statements:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**host-1**你应该看到以下语句：
- en: '[PRE33]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'See, now that we''ve got a statements log about the cluster, we know the the
    answer: the cluster will be activated once an application requires it.'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看看，现在我们有了关于集群的语句日志，我们知道答案：一旦应用程序需要，集群就会被激活。
- en: Time to test our cluster using our application!
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是时候使用我们的应用程序来测试我们的集群了！
- en: 'Open you browser and point it to the following location: `http://127.0.0.1:8180/cluster-test`.
    Refresh the page a few times. In the browser window, you should see something
    similar to the following screenshot:![Host-1](img/3744_06_13.jpg)'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器并将它指向以下位置：`http://127.0.0.1:8180/cluster-test`。刷新页面几次。在浏览器窗口中，你应该会看到以下类似截图的内容：![Host-1](img/3744_06_13.jpg)
- en: '"cluster-test" application running on "host-1" with "REST-server-1"'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“host-1”上运行的“cluster-test”应用与“REST-server-1”
- en: 'In the `host-1` log, you should find the following statements:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`host-1`的日志中，你应该找到以下语句：
- en: '[PRE34]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Notice the suffix of the log statements indicating the server name.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意日志语句后缀指示的服务器名称。
- en: Now, let's try pointing the same browser window to the URL `http://127.0.0.1:8280/cluster-test`.
    You should see something like the following screenshot:![Host-1](img/3744_06_14.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将同一个浏览器窗口指向URL `http://127.0.0.1:8280/cluster-test`。你应该会看到以下类似截图的内容：![Host-1](img/3744_06_14.jpg)
- en: '"cluster-test" application running on "host-1" with "REST-server-2"'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“host-1”上运行的“cluster-test”应用与“REST-server-2”
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'As you can see, the second node continued counting exactly from where we stopped
    in `REST-server-1`. In the `host-1` log, you should find the following statements:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第二个节点从我们在`REST-server-1`停止的地方继续计数。在`host-1`的日志中，你应该找到以下语句：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The suffix of the log changed to `REST-server-2`. OK, our cluster is working
    properly.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 日志后缀已更改为`REST-server-2`。好的，我们的集群正在正常工作。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Skipping the details of domain mode configuration (see [Chapter 3](ch03.html
    "Chapter 3. Running WildFly in Domain Mode"), *Running WildFly in Domain Mode*),
    let's analyze what we have done and why it is working without much configuration.
    Along with the `domain.sh` script for the `master` node, we specified the `-Djboss.domain.base.dir=cl-dmn-master`
    parameter, indicating our base directory as a starting folder to retrieve the
    entire configuration file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过域模式配置的细节（见[第3章](ch03.html "第3章。在域模式下运行WildFly")，*在域模式下运行WildFly*），让我们分析我们所做的工作以及为什么它不需要太多配置就能工作。除了`master`节点的`domain.sh`脚本外，我们还指定了`-Djboss.domain.base.dir=cl-dmn-master`参数，表示我们的基础目录作为获取整个配置文件的起始文件夹。
- en: Furthermore, within `domain.xml` we specified a reference to the `ha` profile
    and `ha-sockets`, in the definition of `server-groups`. These configurations enabled
    clustering capabilities. Remember, only the `ha` and `full-ha` profiles enable
    the clustering feature.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`domain.xml`中，我们在`server-groups`的定义中指定了对`ha`配置文件和`ha-sockets`的引用。这些配置启用了集群功能。记住，只有`ha`和`full-ha`配置文件启用了集群功能。
- en: Looking at the `host-1` side, along with `domain.sh` script, we specified the
    `-Djboss.domain.base.dir=cl-dmn-host-1` and `-Djboss.domain.master.address=127.0.0.1`
    properties, setting our base directory as a starting folder to retrieve the entire
    configuration file, and the address of `domain-controller`, relatively.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看`host-1`端时，除了`domain.sh`脚本外，我们还指定了`-Djboss.domain.base.dir=cl-dmn-host-1`和`-Djboss.domain.master.address=127.0.0.1`属性，将我们的基本目录设置为起始文件夹，以检索整个配置文件，以及相对的`domain-controller`地址。
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, the domain-controller pushes out the configuration to the hosts, through
    the host-controller. That's why we don't have a configuration counterpart in `host-1`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，域控制器通过主机控制器将配置推送到主机，这就是为什么我们在`host-1`中没有配置对应项。
- en: 'That''s all we needed to do to make our cluster. This is because of the default
    WildFly configuration, especially the configuration of the subsystem, `jgroups`.
    Let''s see its defaults:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们创建集群所需做的所有事情。这是因为默认的WildFly配置，特别是子系统`jgroups`的配置。让我们看看它的默认设置：
- en: '[PRE36]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'So, the default protocol used for cluster transportation is the UDP (see the
    emphasized code). This UDP setting has additional configuration, within `socket-binding-group`
    named `ha-sockets`, specified in the `domain.xml` file as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用于集群传输的默认协议是UDP（见强调的代码）。这个UDP设置在`domain.xml`文件中，在名为`ha-sockets`的`socket-binding-group`内，有额外的配置，如下所示：
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: So, by default, every member of the cluster advertises itself at the `230.0.0.4`
    address. Also, every port specified in the configuration is altered along with
    the `<socket-bindings port-offset="XXX"/>` settings specified in the `host.xml`
    file in the `host-1` server.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，默认情况下，集群的每个成员都会在`230.0.0.4`地址上广播自己。此外，配置中指定的每个端口都会随着`host.xml`文件中`host-1`服务器中指定的`<socket-bindings
    port-offset="XXX"/>`设置一起更改。
- en: There's more…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We could have made our cluster without the `port-offset` directive, and by using
    different IPs for each node instead, but this wouldn't have worked properly. This
    is because of the HTTP-session reference stored in a cookie. Generally speaking,
    a cookie consists of a name (typically `JSESSIONID`), a value (which is an ID
    used to reference the HTTP session on the server), a domain, and a context path.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以不使用`port-offset`指令来创建我们的集群，而是为每个节点使用不同的IP地址，但这不会正常工作。这是因为存储在cookie中的HTTP会话引用。一般来说，cookie由一个名称（通常是`JSESSIONID`）、一个值（用于在服务器上引用HTTP会话的ID）、一个域和一个上下文路径组成。
- en: All these properties must be the same in order to make a request to the same
    HTTP session on the server, which will not be the case with nodes bound to different
    IPs. The IP is the domain of the cookie, thus it will not work—unless you balance—
    but that's covered in the next chapter.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些属性必须相同，才能向服务器上的同一HTTP会话发出请求，而对于绑定到不同IP的节点来说，情况并非如此。IP是cookie的域，因此它将不起作用——除非您进行负载均衡——但这将在下一章中介绍。
- en: See also
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you have any problem with this configuration, you might have network problems,
    which you can troubleshoot with the *Testing the UDP protocol with the JGroups
    tool* recipe of this chapter.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到此配置问题，您可能存在网络问题，您可以使用本章的*使用JGroups工具测试UDP协议*配方进行故障排除。
- en: Creating separate clusters in domain mode
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在域模式下创建单独的集群
- en: In the previous recipe, we learned how to create a cluster. What if we need
    to manage more applications, each one having its own cluster? This is exactly
    what you will learn in this recipe. We will learn to manage more applications
    using the `ha` profile.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配方中，我们学习了如何创建集群。如果我们需要管理更多应用程序，每个应用程序都有自己的集群怎么办？这正是您将在本配方中学到的。我们将学习如何使用`ha`配置文件管理更多应用程序。
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need the `cluster-aware` application named `example`,
    that you can find in my GitHub repository. If you skipped the *Managing applications
    using the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running
    WildFly in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer
    to it to download all the source code and projects that you will need.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要一个名为`example`的`cluster-aware`应用程序，你可以在我的GitHub仓库中找到它。如果你跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中关于“使用部署文件夹管理应用程序”的菜谱，请参考它以下载你需要的所有源代码和项目。
- en: 'To build the application, execute the following commands:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，执行以下命令：
- en: '[PRE38]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How to do it…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create three
    folders, one for the domain-controller (always run the domain-controller per se,
    without any other hosts), and two folders representing two different hosts with
    their own `host-controller`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 从WildFly安装目录`$WILDFLY_HOME`开始，让我们创建三个文件夹，一个用于域控制器（始终运行域控制器本身，不包含任何其他主机），以及两个代表两个不同主机及其自己的`host-controller`的文件夹。
- en: 'Open a terminal and execute the following commands (if you followed the steps
    in the previous recipe, you can skip the first two `cp` commands):'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令（如果你遵循了前一个菜谱中的步骤，你可以跳过前两个`cp`命令）：
- en: '[PRE39]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Master
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主
- en: Now, let's configure our domain controller using the `domain.xml` and `host.xml`
    files placed in the `cl-dmn-master` folder. This will be exactly the same as the
    previous recipe, just in case.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用放置在`cl-dmn-master`文件夹中的`domain.xml`和`host.xml`文件来配置我们的域控制器。这将与之前的菜谱完全相同，以防万一。
- en: 'Edit the `domain.xml` file and replace the `<server-groups>...</server-groups>`
    tag definition with the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`domain.xml`文件，将`<server-groups>...</server-groups>`标签定义替换为以下内容：
- en: '[PRE40]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Again, to use cluster, we need to use the `ha` profile, which I referenced within
    the `profile` attribute of the `server-group` element. Also, we need to reference
    the appropriate `socket-binding-group` by the `ref` attribute, in this case valued
    to `ha-sockets`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，要使用集群，我们需要使用`ha`配置文件，我在`server-group`元素的`profile`属性中引用了它。此外，我们还需要通过`ref`属性引用适当的`socket-binding-group`，在这种情况下值为`ha-sockets`。
- en: Tip
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Follow this rule: always name server-groups properly, do not name them as "server-A",
    "`server-1`", or similar.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循以下规则：始终正确命名服务器组，不要将它们命名为“server-A”、“`server-1`”或类似名称。
- en: Now let's edit the `host.xml` file in order to just have `domain-controller`
    without any running hosts.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编辑`host.xml`文件，以便只包含`domain-controller`而没有任何运行的主机。
- en: 'Here are the steps that are to be followed:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是要遵循的步骤：
- en: 'Name the host as `master`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主机命名为`master`：
- en: '[PRE41]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Replace the `<domain-controller>...</domain-controller>` tag definition with
    the following:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<domain-controller>...</domain-controller>`标签定义替换为以下内容：
- en: '[PRE42]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Remove the `<servers>` tag definition.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`<servers>`标签定义。
- en: Okay, we are done with the domain-controller. Let's have a run.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了domain-controller的配置。现在让我们运行一下。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE43]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now we can configure our hosts that will be a part of the cluster.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以配置将成为集群一部分的主机。
- en: Host-1
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机-1
- en: First of all, let's disable the `domain.xml` file present in the `cl-dmn-host-1`
    folder.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们禁用`cl-dmn-host-1`文件夹中现有的`domain.xml`文件。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE44]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: By doing so, the file will not be read at startup. Now, let's configure our
    host controller using `host.xml` placed in the `cl-dmn-host-1` folder.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，文件将在启动时不会被读取。现在，让我们使用放置在`cl-dmn-host-1`文件夹中的`host.xml`来配置我们的主机控制器。
- en: 'Edit the `host.xml` file and follow the steps listed next:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`host.xml`文件，按照以下步骤操作：
- en: 'Name the host as `host-1`:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主机命名为`host-1`：
- en: '[PRE45]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Replace the `<management-interfaces>...</management-interfaces>` tag definition
    inside the `<management>` tag, with the following:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<management-interfaces>...</management-interfaces>`标签定义替换为以下内容，位于`<management>`标签内部：
- en: '[PRE46]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This is only needed when more management interfaces are running on the same
    server.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这只在同一服务器上运行了更多管理接口时才需要。
- en: 'Replace the `<domain-controller>...</domain-controller>` tag definition with
    the following:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<domain-controller>...</domain-controller>`标签定义替换为以下内容：
- en: '[PRE47]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see, there is no default for the `jboss.domain.master.address` property,
    so we need to pass it somehow.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，`jboss.domain.master.address`属性没有默认值，因此我们需要以某种方式传递它。
- en: 'Replace the `<servers>...</servers>` tag definition with the following:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<servers>...</servers>`标签定义替换为以下内容：
- en: '[PRE48]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Open a terminal and execute the following commands:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE49]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that a cluster is activated on demand, that is, after we installed
    a `cluster-aware` application.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，集群是在需要时激活的，也就是说，在我们安装了`cluster-aware`应用程序之后。
- en: Host-2
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主机-2
- en: Let's do exactly the same thing for `host-2` with just a few adjustments.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`host-2`进行完全相同的事情，只需做少许调整。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE50]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Edit the `host.xml` file and follow the steps listed below:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`host.xml`文件并按照以下步骤操作：
- en: 'Name the host as `host-2`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主机命名为`host-2`：
- en: '[PRE51]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Replace the `<management-interfaces>...</management-interfaces>` tag definition
    inside the `<management>` tag, with the following:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<management>`标签内的`<management-interfaces>...</management-interfaces>`标签定义替换为以下内容：
- en: '[PRE52]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Replace the `<domain-controller>...</domain-controller>` tag definition with
    the following:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<domain-controller>...</domain-controller>`标签定义替换为以下内容：
- en: '[PRE53]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Replace the `<servers>...</servers>` tag definition with the following:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<servers>...</servers>`标签定义替换为以下内容：
- en: '[PRE54]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Open a terminal and execute the following commands:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE55]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that cluster is activated on demand, that is, after we installed a
    `cluster-aware` application.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，集群是在需要时激活的，也就是说，在我们安装了`cluster-aware`应用程序之后。
- en: 'Let''s deploy the application as follows:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式部署应用程序：
- en: '[PRE56]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Testing the clusters
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试集群
- en: Now that all the hosts are up and running, let's test our two clusters!
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有主机都已启动并运行，让我们测试我们的两个集群！
- en: 'Open a browser and point to the following URLs, using different windows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并指向以下URL，使用不同的窗口：
- en: The URL `http://127.0.0.1:8180/cluster-test` will depict the following output:![Testing
    the clusters](img/3744_06_05.jpg)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8180/cluster-test`将显示以下输出：![测试集群](img/3744_06_05.jpg)
- en: The URL `http://127.0.0.1:8280/cluster-test` will depict the following output:![Testing
    the clusters](img/3744_06_06.jpg)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8280/cluster-test`将显示以下输出：![测试集群](img/3744_06_06.jpg)
- en: The URL `http://127.0.0.1:8380/cluster-test` will depict the following output:![Testing
    the clusters](img/3744_06_07.jpg)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8380/cluster-test`将显示以下输出：![测试集群](img/3744_06_07.jpg)
- en: The URL `http://127.0.0.1:8480/cluster-test` will depict the following output:![Testing
    the clusters](img/3744_06_08.jpg)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8480/cluster-test`将显示以下输出：![测试集群](img/3744_06_08.jpg)
- en: Oops! We were not expecting this, were we? What did we miss?
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们没想到会出现这种情况，对吧？我们错过了什么？
- en: Okay, we got the same application, but still, the cluster should have worked.
    I mean two separate clusters. We got different ports for all the hosts. So what's
    wrong?
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好吧，我们得到了相同的应用程序，但仍然，集群应该已经工作。我的意思是两个独立的集群。我们为所有主机分配了不同的端口。那么问题出在哪里？
- en: A server group does not define a cluster. A cluster is defined at the network
    level. To have a second cluster, thus a separate cluster, we need to specify a
    different multicast address for the servers we want to form a second cluster with.
    Both server-groups are sharing the same socket-binding-group `ha-sockets`, so
    all the information, cache, and cluster pings go onto the same network.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器组并不定义集群。集群是在网络层面上定义的。为了有一个第二个集群，即一个独立的集群，我们需要为想要形成第二个集群的服务器指定一个不同的多播地址。两个服务器组都在共享同一个套接字绑定组`ha-sockets`，所以所有信息、缓存和集群ping都会发送到同一个网络。
- en: How do we do that? Passing the multicast address as a parameter along with the
    `domain.sh` script for the `host-2`? Nope! That way, we set a different multicast
    address for the `REST-server-2` server, which should be present in the first cluster,
    `cluster-REST-app`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该如何做呢？将多播地址作为参数与`domain.sh`脚本一起传递给`host-2`？不！那样做的话，我们会为`REST-server-2`服务器设置一个不同的多播地址，这个地址应该存在于第一个集群`cluster-REST-app`中。
- en: We need to define a multicast address for the first cluster and another one
    for the second cluster. Our clusters are logically represented by the `cluster-REST-app`
    server group and the `cluster-SOAP-app` server group, we can just define those
    multicast addresses at the server group level, hence in `domain.xml`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为第一个集群定义一个多播地址，并为第二个集群定义另一个地址。我们的集群在逻辑上由`cluster-REST-app`服务器组和`cluster-SOAP-app`服务器组表示，我们可以在服务器组级别定义这些多播地址，因此是在`domain.xml`中。
- en: Now, stop everything!
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，停止一切！
- en: Master
  id: totrans-279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主
- en: 'Edit the `domain.xml` file and replace the `<server-groups>...</server-groups>`
    tag definition with the following:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`domain.xml`文件，将`<server-groups>...</server-groups>`标签定义替换为以下内容：
- en: '[PRE57]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Open a terminal and execute the following commands:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE58]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Host-1
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机-1
- en: 'Open a terminal and execute the following commands:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE59]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Host-2
  id: totrans-287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机-2
- en: 'Open a terminal and execute the following commands:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE60]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Re-testing the clusters
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新测试集群
- en: 'Let''s open two windows of the same browser and point them to the following
    URLs:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开同一浏览器的两个窗口并将它们指向以下URL：
- en: The URL `http://127.0.0.1:8180/cluster-test` will depict the following output:![Re-testing
    the clusters](img/3744_06_05.jpg)
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8180/cluster-test`将显示以下输出：![重新测试集群](img/3744_06_05.jpg)
- en: The URL `http://127.0.0.1:8380/cluster-test` will depict the following output:![Re-testing
    the clusters](img/3744_06_10.jpg)
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8380/cluster-test`将显示以下输出：![重新测试集群](img/3744_06_10.jpg)
- en: 'Now open two other windows of a different browser and point them to the following
    URLs:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开另一个不同浏览器的两个其他窗口并将它们指向以下URL：
- en: The URL `http://127.0.0.1:8280/cluster-test` will depict the following output:![Re-testing
    the clusters](img/3744_06_11.jpg)
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8280/cluster-test`将显示以下输出：![重新测试集群](img/3744_06_11.jpg)
- en: The URL `http://127.0.0.1:8480/cluster-test` will depict the following output:![Re-testing
    the clusters](img/3744_06_12.jpg)
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `http://127.0.0.1:8480/cluster-test`将显示以下输出：![重新测试集群](img/3744_06_12.jpg)
- en: There we go!
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始了！
- en: How it works…
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We explained what was wrong in the first test, along the way. The second test,
    though, is a bit different; it seems that having different browsers does the magic.
    Well, kind of.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一个测试过程中解释了出了什么问题。然而，第二个测试略有不同；似乎使用不同的浏览器起到了魔法般的效果。好吧，有点像。
- en: First of all, we effectively split the cluster in two, each one with its own
    network, which is right by design and implementation.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们实际上将集群分成了两部分，每部分都有自己的网络，这正是设计和实现的要求。
- en: The different browser is needed for just one reason— because we are testing
    on the same IP (but different ports), and because the hostname (that is, the IP)
    matches the domain of the session cookie on the browser, having all four windows
    sharing the same cookie would end up in a totally wrong behavior—from our point
    of view.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 需要不同的浏览器只有一个原因——因为我们正在同一IP（但不同端口）上进行测试，并且因为主机名（即IP）与浏览器会话cookie的域名匹配，如果四个窗口共享相同的cookie，最终会导致完全错误的行为——从我们的角度来看。
- en: 'Let''s describe the "same-four-windows-browser" scenario and see if it fits
    our thinking:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述一下“同一四个窗口浏览器”的场景，看看它是否符合我们的思考：
- en: '**Client makes a request on server 8180**: This responds with a `set-cookie`
    header with name `JSESSIONID`, domain `127.0.0.1`, path `/cluster-test` and a
    value `0o0hPhIZ73unAtIMDCb0zR2h.host-1:REST-server-1`. Visitor number `0`.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端向服务器8180发起请求**：它以包含名称`JSESSIONID`，域名`127.0.0.1`，路径`/cluster-test`和值`0o0hPhIZ73unAtIMDCb0zR2h.host-1:REST-server-1`的`set-cookie`头部进行响应。访问者编号`0`。'
- en: '**Client makes a request on server 8380**: This responds without a `set-cookie`
    header, because the browser finds the cookie on itself and sends it to the server,
    along with the request. As the server `8180` and `8380` are in the same cluster,
    and the HTTP session is replicated across them, the server finds the session and
    increments our visitors number. Visitor number `1`.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端向服务器8380发起请求**：服务器没有返回`set-cookie`头部，因为浏览器在自己的机器上找到了cookie并将其发送到服务器，与请求一起。由于服务器`8180`和`8380`位于同一个集群中，并且HTTP会话在这些服务器之间进行了复制，服务器找到了会话并增加了我们的访问者数量。访问者编号`1`。'
- en: '**Client makes a request on the server 8280**: This we configured to be on
    a separate cluster. The browser sends the cookie along with the request itself.
    The server can''t find the session, thus it responds with a `set-cookie` header
    with newly created values: name `JSESSIONID`, domain `127.0.0.1`, path `/cluster-test`
    and a value `8X1gLkCbr5RsmELxwTlI0izj.host-1:SOAP-server-1`. Visitor number `0`.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端向服务器8280发起请求**：我们将其配置为位于不同的集群中。浏览器将cookie与请求本身一起发送。服务器找不到会话，因此它以包含新创建值的`set-cookie`头部进行响应：名称`JSESSIONID`，域名`127.0.0.1`，路径`/cluster-test`和值`8X1gLkCbr5RsmELxwTlI0izj.host-1:SOAP-server-1`。访问者编号`0`。'
- en: '**Client makes a request on the server 8480**: The browser sends the cookie
    along with the request itself. The server can''t find the session, thus it responds
    with a `set-cookie` header with newly created values.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端向服务器8480发起请求**：浏览器将cookie与请求本身一起发送。服务器找不到会话，因此它以包含新创建值的`set-cookie`头部进行响应。'
- en: As you can see, using the same browser— at least the same session's browser—
    could not work.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用相同的浏览器——至少是相同会话的浏览器——是无法工作的。
- en: See also
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you have any problem with this configuration, you might have network problems,
    which you can troubleshoot with the last recipe of this chapter.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在这个配置中遇到任何问题，您可能存在网络问题，您可以使用本章最后一个小节中的最后一个配方进行故障排除。
- en: Creating a cluster via TCP
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过TCP创建集群
- en: Often times, especially in enterprise and cloud environments where there are
    several restrictions among networks, you are not able to use multicast addresses,
    even in the same network. Fortunately, the `jgroups` subsystem helps you out with
    this by providing an easy way to switch between UDP and TCP clustering, and this
    is exactly what you will learn in this recipe. We will work using the standalone
    mode with the `ha` profile.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，尤其是在存在多个网络限制的企业和云环境中，你无法使用多播地址，即使在同一网络中。幸运的是，`jgroups`子系统通过提供一种简单的方法在UDP和TCP集群之间切换，这正是你将在本食谱中学到的。我们将使用带有`ha`配置文件的独立模式进行工作。
- en: Getting ready
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: For this recipe, we will need the "cluster-aware" application named "example",
    that you can find in my GitHub repository. If you skipped the *Managing applications
    using the deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running
    WildFly in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer
    to it to download all the source code and projects that you will need.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要一个名为“example”的“集群感知”应用程序，你可以在我的GitHub仓库中找到它。如果你跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中关于“使用部署文件夹管理应用程序”的食谱，请参阅它以下载你需要的所有源代码和项目。
- en: 'To build the application, do as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请按以下步骤操作：
- en: '[PRE61]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How to do it...
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行测试...
- en: From the WildFly installation directory `$WILDFLY_HOME`, let's create two folders,
    each one representing a server node.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 从WildFly安装目录`$WILDFLY_HOME`，让我们创建两个文件夹，每个文件夹代表一个服务器节点。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE62]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, let''s copy the `cluster-test.war` application into the `deployments`
    folder of each node that we have just created. Run the following commands:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将`cluster-test.war`应用程序复制到我们刚刚创建的每个节点的`deployments`文件夹中。运行以下命令：
- en: '[PRE63]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We are almost ready to test our cluster. We just need some configuration.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎准备好测试我们的集群了。我们只需要一些配置。
- en: Node-1
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node-1
- en: 'Edit the `standalone-ha.xml` file and replace the `jgroups` subsystem with
    the following definition:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`standalone-ha.xml`文件，并将`jgroups`子系统替换为以下定义：
- en: '[PRE64]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Open a terminal and execute the following commands:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE65]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Node-2
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node-2
- en: Edit the `standalone-ha.xml` file and replace the `jgroups` subsystem as we
    have done for `node-1`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`standalone-ha.xml`文件，并替换`jgroups`子系统，就像我们为`node-1`所做的那样。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE66]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Testing the TCP cluster
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试TCP集群
- en: Now that all the nodes are up and running, let's test our TCP cluster!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有节点都已启动并运行，让我们测试我们的TCP集群！
- en: Open a browser and point to `http://127.0.0.1:8180/cluster-test`. Refresh the
    page a few times and you should see something like the following image:![Testing
    the TCP cluster](img/3744_06_13.jpg)
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并指向`http://127.0.0.1:8180/cluster-test`。刷新页面几次，你应该会看到以下类似图像：![测试TCP集群](img/3744_06_13.jpg)
- en: '"cluster-test" application running on "node-1" in the TCP cluster—standalone
    mode with "ha" profile'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在TCP集群的独立模式“ha”配置文件下运行在“node-1”上的“cluster-test”应用程序
- en: 'In the `node-1` logs, you should catch the following statements:'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`node-1`的日志中，你应该会看到以下语句：
- en: '[PRE67]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Now, try pointing the browser to `http://127.0.0.1:8280/cluster-test`. You should
    see something like the following image:![Testing the TCP cluster](img/3744_06_14.jpg)
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试将浏览器指向`http://127.0.0.1:8280/cluster-test`。你应该会看到以下类似图像：![测试TCP集群](img/3744_06_14.jpg)
- en: '"cluster-test" application running on "node-2" in the TCP cluster—standalone
    mode with "ha" profile'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在TCP集群的独立模式“ha”配置文件下运行在“node-2”上的“cluster-test”应用程序
- en: 'And in the `node-2` logs, you should catch the following statements:'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且在`node-2`的日志中，你应该会看到以下语句：
- en: '[PRE68]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Our TCP cluster is working! Let''s also try and see if it scales well:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的TCP集群正在运行！让我们也尝试看看它是否具有良好的扩展性：
- en: 'Open a terminal and execute the following commands:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE69]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now, let''s copy the `cluster-test.war` application into the `deployments`
    folder of `node-3`, as follows:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将`cluster-test.war`应用程序复制到`node-3`的`deployments`文件夹中，如下所示：
- en: '[PRE70]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Edit the `standalone-ha.xml` file and replace the `jgroups` subsystem as we
    have done for `node-1` and `node-2`.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`standalone-ha.xml`文件，并替换`jgroups`子系统，就像我们为`node-1`和`node-2`所做的那样。
- en: 'Open a terminal and execute the following commands:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并执行以下命令：
- en: '[PRE71]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In the logs of the first two nodes, you should see the following entries:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个节点的日志中，你应该会看到以下条目：
- en: '`23:14:24,466 INFO [org.infinispan.remoting.transport.jgroups.JGroupsTransport]
    (Incoming-8,ee,node-1) ISPN000094: Received new cluster view for channel web:
    [node-1|2] (3) [node-1, node-2, node-3]`'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`23:14:24,466 INFO [org.infinispan.remoting.transport.jgroups.JGroupsTransport]
    (Incoming-8,ee,node-1) ISPN000094: Received new cluster view for channel web:
    [node-1|2] (3) [node-1, node-2, node-3]`'
- en: '`23:14:24,468 INFO [org.infinispan.remoting.transport.jgroups.JGroupsTransport]
    (Incoming-9,ee,node-2) ISPN000094: Received new cluster view for channel web:
    [node-1|2] (3) [node-1, node-2, node-3]`'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`23:14:24,468 INFO [org.infinispan.remoting.transport.jgroups.JGroupsTransport]
    (Incoming-9,ee,node-2) ISPN000094: Received new cluster view for channel web:
    [node-1|2] (3) [node-1, node-2, node-3]`'
- en: 'Let''s test it in the browser by pointing it to `http://127.0.0.1:8380/cluster-test`.
    You should see something like the following screenshot:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中测试它，指向`http://127.0.0.1:8380/cluster-test`。你应该看到以下截图类似的内容：
- en: '![Testing the TCP cluster](img/3744_06_15.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![测试TCP集群](img/3744_06_15.jpg)'
- en: Scaling "cluster-test" application running on "node-3" in the TCP cluster—standalone
    mode with "ha" profile
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在TCP集群中扩展运行在`node-3`上的“cluster-test”应用程序——使用“ha”配置文件的单机模式
- en: Okay, everything worked as expected!
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，一切如预期工作！
- en: How it works…
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Let's analyze what we have done.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析我们所做的。
- en: The main configuration, despite few parameters for the `standalone.sh` script,
    consists of properly setting the `default` attribute of the `stack` element for
    the JGroups subsystem, to TCP. Furthermore, we had to set how cluster members
    ping each other. Default is the `MPING` protocol (the `M` stands for multicast).
    Hence, we defined the ping protocol, named `TCPPING`, and defined the well-known
    hosts (the `initial_hosts` property).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`standalone.sh`脚本只有少量参数，但主要配置包括正确设置JGroups子系统的`stack`元素的`default`属性为TCP。此外，我们还需要设置集群成员之间如何ping对方。默认是`MPING`协议（`M`代表多播）。因此，我们定义了ping协议，命名为`TCPPING`，并定义了已知主机（`initial_hosts`属性）。
- en: The concept is that every host which wants to join the cluster will ask the
    well-known hosts for membership information. If those are not running, the new
    node cannot join the cluster. By the way, if all cluster members are up and the
    well-known hosts go down, nothing happens to the cluster; they are just seen as
    two members who left the cluster.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 概念是每个想要加入集群的主机都会向已知主机请求成员信息。如果这些主机没有运行，新节点将无法加入集群。顺便说一句，如果所有集群成员都处于运行状态，而已知主机关闭，集群不会有任何影响；它们只是被视为离开了集群的两个成员。
- en: 'As a matter of fact, while testing the TCP cluster scaling by adding `node-3`
    and stopping the first two nodes, we would have just seen those entries in the
    `node-3` logs:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在测试通过添加`node-3`和停止前两个节点来扩展TCP集群时，我们只会看到`node-3`日志中的以下条目：
- en: '[PRE72]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The properties we defined with regard to the `<protocol type="TCPPING">...</protocol>`
    are as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的与`<protocol type="TCPPING">...</protocol>`相关的属性如下：
- en: '`num_initial_members`: The number of nodes before the cluster is considered
    as complete.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_initial_members`：在集群被视为完整之前节点的数量。'
- en: '`port_range`: The port range to try in case a well-known host is not responding.
    For example, with a `port_range` of `50` and a well-known host `10.0.0.1[7600]`,
    a new member would try with port `7600`, `7601`, 7602 to port `7650`.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port_range`：在已知主机未响应的情况下尝试的端口号范围。例如，使用`port_range`为`50`和已知主机`10.0.0.1[7600]`时，新成员将尝试端口`7600`、`7601`、`7602`到`7650`。'
- en: '`timeout`: The timeout which a member will wait before joining the cluster.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeout`：成员在加入集群之前将等待的超时时间。'
- en: Testing the UDP protocol with the JGroups tool
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JGroups工具测试UDP协议
- en: Often times, you need to validate and/or certify a configuration, and in case
    of issues regarding UDP clustering, the first thing to check is if the UDP is
    working properly.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你需要验证和/或认证一个配置，在涉及UDP集群的问题时，首先要检查的是UDP是否正常工作。
- en: In this recipe, you will learn how to check if the UDP is working, testing it
    with a graphical tool and using java applications (thus without UI—which is the
    case of enterprise environment).
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何检查UDP是否工作，使用图形工具测试，并使用Java应用程序（因此没有UI——这是企业环境的情况）。
- en: How to do it...
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: First of all, let's check if we have the JGroups library in our WildFly installation
    folder.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们检查我们是否在我们的WildFly安装文件夹中有JGroups库。
- en: 'Open your command-line tool and execute the following command:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的命令行工具并执行以下命令：
- en: '[PRE73]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Great! Now we can test it.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们可以测试它了。
- en: Graphical test
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形测试
- en: Open your command-line tool.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的命令行工具。
- en: 'Now execute the following command:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE74]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You should see an application like the following image:'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下图像类似的应用程序：
- en: '![Graphical test](img/3744_06_16.jpg)'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形测试](img/3744_06_16.jpg)'
- en: First JGroups draw application
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个 JGroups 绘图应用程序
- en: 'If you get a network problem because of the IPv6, try forcing IPv4 by adding
    the following parameter:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你因为 IPv6 而遇到网络问题，尝试通过添加以下参数来强制使用 IPv4：
- en: '[PRE75]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now in a different terminal, execute the same command as mentioned previously:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在另一个终端中，执行之前提到的相同命令：
- en: '[PRE76]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'From this second command, I emphasized the cluster view which is counting two
    members, and you now see the same application running (the number within parenthesis
    also indicates cluster members):'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这个第二个命令中，我强调了集群视图，它正在计数两个成员，你现在可以看到相同的应用程序正在运行（括号内的数字也指示集群成员）：
- en: '![Graphical test](img/3744_06_17.jpg)'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形测试](img/3744_06_17.jpg)'
- en: Second JGroups draw application
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个 JGroups 绘图应用程序
- en: Draw something on it, and if your UDP works, your sketch should come up on the
    other canvas, just like mine:![Graphical test](img/3744_06_18.jpg)
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在它上面画些东西，如果你的 UDP 工作正常，你的草图应该会出现在另一个画布上，就像我的这样：![图形测试](img/3744_06_18.jpg)
- en: JGroups draw application reflecting changes
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JGroups 应用程序反映变化
- en: If you have problems with the graphical test, try to test the UDP via command
    line, as explained in the next section.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到图形测试问题，尝试通过命令行测试 UDP，如下一节所述。
- en: Shell test
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shell 测试
- en: 'Open your command-line tool:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的命令行工具：
- en: 'Now execute the following command:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE77]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This will start a JGroups application as a receiver, so it will be listening
    for incoming messages.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动一个 JGroups 应用程序作为接收器，因此它将监听传入的消息。
- en: 'Again, if you get a network problem because of the IPv6, try forcing IPv4 by
    adding the following parameter:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，如果你因为 IPv6 而遇到网络问题，尝试通过添加以下参数来强制使用 IPv4：
- en: '[PRE78]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now, in a different terminal, let''s call it `sender`, execute the following
    commands:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在另一个终端中，我们可以称它为 `sender`，执行以下命令：
- en: '[PRE79]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'This second terminal will wait for standard input. As I didn''t specify any
    interface or multicast address, it will bind to any available interface, which
    in my case is more than a couple. By the way, let''s try typing something and
    hitting *Enter*, as follows:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个终端将等待标准输入。由于我没有指定任何接口或多播地址，它将绑定到任何可用的接口，在我的情况下，有多个。顺便说一句，让我们尝试输入一些内容并按 *Enter*
    键，如下所示：
- en: '[PRE80]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now look at the first terminal, the one where we launched the `receiver` application:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在看看第一个终端，即我们启动 `receiver` 应用程序的终端：
- en: '[PRE81]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Yeah! We received everything, from all available and configured interfaces.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 哟！我们收到了来自所有可用和配置的接口的所有内容。
