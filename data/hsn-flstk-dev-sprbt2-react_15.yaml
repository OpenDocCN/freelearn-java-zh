- en: Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: This chapter goes through some points that you should know if you want to become
    a full stack developer or if you want progress further in your software-development
    career. We will also go through some best practices that are good to keep in mind
    when you're working in the field of software development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一些你应该了解的要点，如果你想成为一名全栈开发者，或者如果你想在软件开发职业中进一步发展。我们还将介绍一些在软件开发领域工作时要牢记的最佳实践。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下内容：
- en: What kind of technologies you should know
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该了解哪些技术
- en: What kind of best practices are important to you
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对你来说重要的最佳实践是什么
- en: What to learn next
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来学习什么
- en: To become a full stack developer, you have to be able to work with both the
    backend and the frontend. That sounds like quite a challenging task, but if you
    focus on the right things and don't try to master everything, it is possible.
    Nowadays, the technology stack available is huge and you might often wonder what
    you should learn next. There are multiple factors that might give you some hints
    about where to go next. One way is to browse job opportunities and see which technologies
    companies are looking for.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为一名全栈开发者，你必须能够同时处理后端和前端。这听起来是一个相当具有挑战性的任务，但如果你专注于正确的事情，不试图掌握一切，是可能的。现在，可用的技术栈非常庞大，你可能经常想知道接下来应该学习什么。有多种因素可能会给你一些关于下一步去哪里的提示。一种方法是浏览工作机会，看看公司正在寻找哪些技术。
- en: There are multiple ways, and no right path, to start learning a new technology.
    The usage of programming web courses is a really popular starting point and that
    gives you basic knowledge to start the learning process. The process is never-ending
    because technologies are developing and changing all the time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开始学习新技术有多种方式，没有正确的路径。编程网络课程的使用是一个非常流行的起点，它为你提供了开始学习过程的基本知识。这个过程是永无止境的，因为技术一直在发展和变化。
- en: The following technologies are necessary to understand if you want to become
    a full stack developer. This is not the complete list, but it is a good starting
    point.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想成为一名全栈开发者，必须了解以下技术。这不是完整的列表，但是一个很好的起点。
- en: HTML
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML
- en: HTML is the most fundamental thing in web development that you should learn.
    You don't have to master all the details of HTML, but you should have a good basic
    knowledge of it. HTML 5 introduced a lot of new features that are also worth learning.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: HTML是Web开发中最基本的东西，你应该学习它。你不必掌握HTML的所有细节，但你应该对它有一个良好的基本了解。HTML 5引入了许多值得学习的新功能。
- en: CSS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS
- en: CSS is also a very basic thing to learn. The good thing is that there are lots
    of good tutorials available for both HTML and CSS. It is a good idea also to learn
    the usage of some CSS libraries, such as Bootstrap, which is widely used. CSS
    preprocessors, such as SASS and LESS, are also worth learning.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CSS也是一个非常基本的东西要学习。好处是有很多关于HTML和CSS的好教程可用。学习一些CSS库的使用也是一个好主意，比如广泛使用的Bootstrap。CSS预处理器，比如SASS和LESS，也值得学习。
- en: HTTP
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP
- en: HTTP protocol is the key part when developing web applications and RESTful Web
    Services. You have to understand the basics of HTTP and know its limitations.
    You should also know what kind of methods exist and how to use these with different
    programming languages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Web应用和RESTful Web服务时，HTTP协议是关键部分。你必须了解HTTP的基础知识，知道它的限制。你还应该知道有哪些方法存在，以及如何在不同的编程语言中使用它们。
- en: JavaScript
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript is definitely the programming language that you should master. Without
    JavaScript skills, it is really hard to work with a modern frontend development.
    ES6 is also good to learn because that makes JavaScript coding cleaner and more
    efficient.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript绝对是你应该掌握的编程语言。没有JavaScript技能，要与现代前端开发一起工作是非常困难的。学习ES6也是很好的，因为它使JavaScript编码更清洁、更高效。
- en: A backend programming language
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端编程语言
- en: It's hard to survive without knowing a few programming languages. If JavaScript
    is used for frontend development, it can also be used in the backend with Node.js.
    That is the benefit with Node.js; you can use one programming language in the
    frontend and the backend. Other popular languages for backend development are
    Java, C#, Python, and PHP. All these languages also have good backend frameworks
    you can use.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不了解一些编程语言是很难生存的。如果JavaScript用于前端开发，它也可以在后端与Node.js一起使用。这就是Node.js的好处；你可以在前端和后端使用一种编程语言。其他流行的后端开发语言包括Java、C#、Python和PHP。所有这些语言也有很好的后端框架可以使用。
- en: Some frontend libraries or frameworks
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些前端库或框架
- en: In this book, we used React.js in the frontend, which is currently a popular
    option, but there are many others that are also good options, such as Angular
    and Vue.js.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们在前端使用了React.js，这是目前一个流行的选择，但还有许多其他也是不错的选择，比如Angular和Vue.js。
- en: Databases
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: You should also know how to use databases with your backend programming language.
    The database can be either a SQL or NoSQL database, and it is good to know both
    options. You should also know how performance can be optimized with the database
    you are using and the queries you are executing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该知道如何使用后端编程语言与数据库。数据库可以是SQL或NoSQL数据库，了解这两种选项是很好的。你还应该知道如何优化你正在使用的数据库以及你正在执行的查询的性能。
- en: Version control
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: The version control is something that you can't live without. Nowadays, Git
    is a really popular version control system and it's really important to know how
    to use it. There are also repository management services, such as GitHub and GitLab,
    that are good to know.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是你无法离开的东西。现在，Git是一个非常流行的版本控制系统，了解如何使用它非常重要。还有仓库管理服务，比如GitHub和GitLab，也是值得了解的。
- en: Useful tools
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的工具
- en: There are also many different tools that can help to make your development process
    more efficient. Here, we just mention some tools that might be useful for you.
    Gulp.js is an open source JavaScript toolkit to automate your tasks in the development
    process. Grunt is similar to the JavaScript task runner, which you can use to
    automate your process. Webpack is a JavaScript module bundler that creates static
    assets from your dependencies. create-react-app, which we used in previous chapters,
    actually uses Webpack under the hood.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多不同的工具可以帮助你使开发过程更加高效。在这里，我们只提到了一些可能对你有用的工具。Gulp.js是一个开源的JavaScript工具包，用于自动化开发过程中的任务。Grunt类似于JavaScript任务运行器，可以用来自动化你的过程。Webpack是一个JavaScript模块打包工具，可以从你的依赖项创建静态资源。create-react-app，在之前的章节中使用过，实际上在内部使用了Webpack。
- en: Security
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: You have to know the basics of web security and how to take care of these issues
    in web development. A good way to start learning is to read *OWASP Top 10 Most
    Critical Web Application Security Risks* ([https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)).
    Then you have to learn how to handle these issues with the frameworks you are
    using.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须了解网络安全的基础知识，以及如何在Web开发中处理这些问题。开始学习的一个好方法是阅读*OWASP十大最严重的Web应用安全风险*（[https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)）。然后你必须学习如何使用你正在使用的框架来处理这些问题。
- en: Best practices
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Software development is always team work and therefore it is really important
    that everyone in a team is using common best practices. Here, we will go through
    some basic things that you have to take into account. This is not the whole list,
    but we try to concentrate on some basic things that you should know.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发总是团队合作，因此团队中的每个人都使用共同的最佳实践非常重要。在这里，我们将介绍一些你必须考虑的基本事项。这不是完整的清单，但我们试图集中在一些你应该知道的基本事项上。
- en: Coding conventions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码规范
- en: Coding conventions are guidelines that describe how the code should be written
    in a specific programming language. It makes code more readable and easier to
    maintain. Naming conventions define how variables, methods, and more should be
    named. Naming is really important because that helps developers understand the
    purpose of a certain unit in the program. The layout convention defines how the
    structure of the source code should look, for example, indenting and usage of
    spaces. The commenting convention defines how the source code should be commented.
    Quite often it is good to use some standardized ways for the commenting, such
    as Javadoc with Java.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 编码规范是描述代码应该如何在特定编程语言中编写的指南。它使代码更易读和更易维护。命名规范定义了变量、方法等应该如何命名。命名非常重要，因为它帮助开发人员理解程序中某个单元的目的。布局规范定义了源代码的结构应该如何看起来，例如缩进和空格的使用。注释规范定义了源代码应该如何被注释。通常最好使用一些标准化的注释方式，比如Java中的Javadoc。
- en: Most of the software development environments and editors offer tools that help
    you with code conventions. You can also use code formatters, such as prettier
    for JavaScript.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数软件开发环境和编辑器都提供了帮助你遵循代码规范的工具。你也可以使用代码格式化工具，比如用于JavaScript的prettier。
- en: Choosing the proper tools
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的工具
- en: You should always choose the proper tools that best fit your software development
    process. This makes your process more efficient and also helps you in the development
    life cycle. There are many tools to automate tasks in the development process
    and that is good way to avoid mistakes that occurs in repetitive tasks. Of course,
    the tools you use will depend on the process and the technologies you're using.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终选择最适合你软件开发过程的工具。这样可以使你的过程更加高效，也有助于你的开发生命周期。有许多工具可以自动化开发过程中的任务，这是避免重复任务中出现错误的好方法。当然，你使用的工具将取决于过程和你正在使用的技术。
- en: Choosing the proper technologies
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的技术
- en: When starting to develop an application, one of the first things to decide is
    which technologies (programming language, frameworks, databases, and so on) you
    should use. Quite often, it feels safe to select technologies that you have always
    used, but that's not always the optimal choice. The application itself normally
    makes some limitations to the technologies that you can use. For example, if you
    have to create a mobile application, there are several technologies that you can
    use. But if you have to develop a similar application that you have made many
    times, it might be wiser to use technologies that you already know well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发应用程序时，要决定的第一件事之一是选择哪些技术（编程语言、框架、数据库等）应该使用。通常情况下，选择你一直使用的技术会让人感到安全，但这并不总是最佳选择。应用程序本身通常对你可以使用的技术做出一些限制。例如，如果你必须创建一个移动应用程序，有几种技术可以使用。但如果你必须开发一个你已经做过很多次的类似应用程序，使用你已经很熟悉的技术可能更明智。
- en: Minimizing the amount of coding
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尽量减少编码量
- en: A common good practice is to minimize the amount of coding. This is really wise
    because it makes code maintenance and testing much easier. **DRY** (**Don't Repeat
    Yourself**) is a common principle in software development. The basic idea of DRY
    is to reduce the amount of code by avoiding repetitions in the code. It is always
    good practice to split your source code into smaller components because smaller
    units are always easier to manage. Of course, the optimum structure depends on
    the programming language you are using. One good statement is also **Keep it Simple,
    Stupid** (**KISS**) that should guide you in the right direction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的好习惯是尽量减少编码量。这是非常明智的，因为这样可以使代码的维护和测试变得更容易。**DRY**（**不要重复自己**）是软件开发中的一个常见原则。DRY的基本思想是通过避免代码中的重复来减少代码量。将源代码分割成较小的组件总是一个很好的做法，因为较小的单元总是更容易管理。当然，最佳的结构取决于你使用的编程语言。还有一个好的声明是**保持简单，愚蠢**（**KISS**），这应该指导你朝着正确的方向前进。
- en: Summary
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the technologies that you should be familiar with
    if you want to become a full stack developer. The amount of knowledge that you
    should have sounds like a lot, but you don't have to be the master of all the
    technologies that we described. It is also good to understand some best practices
    of software development because then you can avoid common mistakes and your source
    code will be more readable and easier to maintain.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如果你想成为全栈开发人员，你应该熟悉的技术。你应该掌握的知识量听起来很多，但你不必成为我们描述的所有技术的大师。了解一些软件开发的最佳实践也是很好的，因为这样你就可以避免常见的错误，你的源代码将更易读和更易于维护。
- en: Questions
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why are coding conventions important?
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码规范为什么重要？
- en: Why should you try to avoid excessive coding?
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么你应该尽量避免过多编码？
- en: Why are naming conventions important?
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名规范为什么重要？
- en: Further reading
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about full stack development:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很好的资源可以学习全栈开发：
- en: '[https://www.packtpub.com/application-development/complete-javascript-developer-primer-full-stack-js-video](https://www.packtpub.com/application-development/complete-javascript-developer-primer-full-stack-js-video)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/complete-javascript-developer-primer-full-stack-js-video](https://www.packtpub.com/application-development/complete-javascript-developer-primer-full-stack-js-video)'
- en: '[https://www.packtpub.com/application-development/full-stack-development-jhipster](https://www.packtpub.com/application-development/full-stack-development-jhipster)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/full-stack-development-jhipster](https://www.packtpub.com/application-development/full-stack-development-jhipster)'
- en: '[https://www.packtpub.com/networking-and-servers/fundamentals-continuous-delivery-pipeline-video](https://www.packtpub.com/networking-and-servers/fundamentals-continuous-delivery-pipeline-video)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/networking-and-servers/fundamentals-continuous-delivery-pipeline-video](https://www.packtpub.com/networking-and-servers/fundamentals-continuous-delivery-pipeline-video)'
