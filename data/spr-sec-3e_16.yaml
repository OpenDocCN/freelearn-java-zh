- en: Migration to Spring Security 4.2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移到 Spring Security 4.2。
- en: In this final chapter, we will review information relating to common migration
    issues when moving from Spring Security 3 to Spring Security 4.2\. We'll spend
    much more time discussing the differences between Spring Security 3 and Spring
    Security 4, because this is what most users will struggle with. This is due to
    the fact that the updates from Spring Security 3 to Spring Security 4.2 contain
    a lot of non-passive refactoring.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章中，我们将回顾与从 Spring Security 3 迁移到 Spring Security 4.2 的常见迁移问题有关的信息。我们将花更多的时间讨论
    Spring Security 3 和 Spring Security 4 之间的差异，因为这是大多数用户将遇到的难题。这是由于从 Spring Security
    3 更新到 Spring Security 4.2 包含大量的非被动重构。
- en: At the end of the chapter, we will also highlight some of the new features that
    can be found in Spring Security 4.2\. However, we do not explicitly cover changes
    from Spring Security 3 to Spring Security 4.2\. This is because by explaining
    the differences between Spring Security 3 and Spring Security 4, users should
    be able to update to Spring Security 4.2 with ease since the changes to Spring
    Security 4.2 are passive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，我们还将突出显示 Spring Security 4.2 中可以找到的一些新功能。然而，我们并没有明确涵盖从 Spring Security
    3 到 Spring Security 4.2 的变化。这是因为通过解释 Spring Security 3 和 Spring Security 4 之间的差异，用户应该能够轻松地更新到
    Spring Security 4.2，因为 Spring Security 4.2 的变化是被动的。
- en: 'During the course of this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Reviewing important enhancements in Spring Security 4.2.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾 Spring Security 4.2 中的重要增强功能。
- en: Understanding configuration changes required in your existing Spring version.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解您现有 Spring 版本中所需的配置更改。
- en: Reviewing Security 3 applications when moving them to Spring Security 4.2.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将它们迁移到 Spring Security 4.2 时，回顾 Spring Security 3 应用程序。
- en: Illustrating the overall movement of important classes and packages in Spring
    Security 4.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 说明 Spring Security 4 中重要类和包的整体移动情况。
- en: Highlighting some of the new features found in Spring Security 4.2\. Once you
    have completed the review of this chapter, you will be in a good position to migrate
    an existing application from Spring Security 3 to Spring Security 4.2.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示 Spring Security 4.2 中的一些新功能。一旦完成了本章的复习，你将处于一个很好的位置，可以将从 Spring Security
    3 迁移到 Spring Security 4.2 的现有应用程序。
- en: Migrating from Spring Security 3.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Spring Security 3 迁移。
- en: You may be planning to migrate an existing application to Spring Security 4.2,
    or you may be trying to add functionality to a Spring Security 3 application and
    are looking for guidance in the pages of this book. We'll try to address both
    of your concerns in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能正在计划将一个现有应用程序迁移到 Spring Security 4.2，或者你可能正在尝试为 Spring Security 3 应用程序添加功能，并在这本书的页面中寻找指导。我们将在本章中尝试解决你们的两个问题。
- en: First, we'll run through the important differences between Spring Security 3
    and 4.2-both in terms of features and configuration. Second, we'll provide some
    guidance on mapping configuration or class name changes. This will better enable
    you to translate the examples in the book from Spring Security 4.2 back to Spring
    Security 3 (where applicable).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将概述 Spring Security 3 和 4.2 之间的关键差异，包括功能和配置。其次，我们将提供一些关于映射配置或类名更改的指导。这将使你更好地能够将书中的示例从
    Spring Security 4.2 回退到 Spring Security 3（适用的）。
- en: A very important migration note is that Spring Security 3+ mandates a migration
    to Spring Framework 4 and Java 5 (1.5) or greater. Be aware that in many cases,
    migrating these other components may have a greater impact on your application
    than the upgrade of Spring Security!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常重要的迁移注意事项是，Spring Security 3+ 强制要求迁移到 Spring Framework 4 和 Java 5 (1.5)
    或更高版本。请注意，在许多情况下，迁移这些其他组件可能对您的应用程序的影响比 Spring Security 的升级要大！
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言。
- en: 'As exploits against applications evolve, so must Spring Security. In a major
    release version, the Spring Security team took the opportunity to make some non-passive
    changes that focused on the following things:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序的利用方式不断发展，Spring Security 也必须做出相应的更新。在重大发布版本中，Spring Security 团队抓住了机会，进行了一些非被动的更改，主要关注以下几点：
- en: Ensuring Spring Security is more secure by default ([https://www.owasp.org/index.php/Establish_secure_defaults](https://www.owasp.org/index.php/Establish_secure_defaults))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过默认设置确保 Spring Security 更加安全([https://www.owasp.org/index.php/Establish_secure_defaults](https://www.owasp.org/index.php/Establish_secure_defaults))。
- en: Minimizing information leakage ([https://www.owasp.org/index.php/Information_Leakage](https://www.owasp.org/index.php/Information_Leakage))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化信息泄露([https://www.owasp.org/index.php/Information_Leakage](https://www.owasp.org/index.php/Information_Leakage))。
- en: Removing deprecated APIs
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除已弃用的 API。
- en: A complete list of non-passive changes between 3.x and 4.x can be found in JIRA
    at [https://jira.spring.io/browse/SEC-2916?jql=project%20%3D%20SEC%20AND%20fixVersion%20in%20(4.0.0%2C%204.0.0.M1%2C%204.0.0.M2%2C%204.0.0.RC1%2C%204.0.0.RC2)%20AND%20labels%20%3D%20passivity](https://jira.spring.io/browse/SEC-2916?jql=project%20%3D%20SEC%20AND%20fixVersion%20in%20(4.0.0%2C%204.0.0.M1%2C%204.0.0.M2%2C%204.0.0.RC1%2C%204.0.0.RC2)%20AND%20labels%20%3D%20passivity).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在JIRA中可以找到3.x和4.x之间非被动更改的完整列表：[https://jira.spring.io/browse/SEC-2916?jql=project%20%3D%20SEC%20AND%20fixVersion%20in%20(4.0.0%2C%204.0.0.M1%2C%204.0.0.M2%2C%204.0.0.RC1%2C%204.0.0.RC2)%20AND%20labels%20%3D%20passivity](https://jira.spring.io/browse/SEC-2916?jql=project%20%3D%20SEC%20AND%20fixVersion%20in%20(4.0.0%2C%204.0.0.M1%2C%204.0.0.M2%2C%204.0.0.RC1%2C%204.0.0.RC2)%20AND%20labels%20%3D%20passivity).
- en: Sample migration
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例迁移
- en: The Spring Security team has created a sample project illustrating all of the
    changes when migrating from 3.x to 4.x and has made the project available on GitHub.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security团队创建了一个示例项目，展示了从3.x迁移到4.x时的所有更改，并将在GitHub上提供该项目。
- en: The sample includes both XML and JavaConfig examples and can be found at [https://github.com/spring-projects/spring-security-migrate-3-to-4/](https://github.com/spring-projects/spring-security-migrate-3-to-4/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括XML和JavaConfig示例，可以在[https://github.com/spring-projects/spring-security-migrate-3-to-4/](https://github.com/spring-projects/spring-security-migrate-3-to-4/)找到。
- en: Enhancements in Spring Security 4.2
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring Security 4.2中的增强功能
- en: There are quite a few notable changes in Spring Security 4.2, and this release
    also brings early support for Spring Framework 5\. You can find the changelogs
    for 4.2.0.M1, 4.2.0.RC1, and 4.2.0.RELEASE, which covers over 80 issues. The community
    contributed the overwhelming majority of these features.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security 4.2中有很多值得注意的更改，此版本还带来了对Spring Framework 5的早期支持。你可以找到4.2.0.M1、4.2.0.RC1和4.2.0.RELEASE的更改日志，涵盖了超过80个问题。社区贡献了绝大多数这些功能。
- en: 'Significant enhancements in Spring Security 4.2, improved since Spring Security
    3 include the following features and their support numbers:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security 4.2中进行了重大改进，自Spring Security 3以来，包括以下特性和它们的支持号码：
- en: 'Web improvements:'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络改进：
- en: 'The following items are related to Spring Security''s interaction with Web-based
    applications:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项目与Spring Security与基于Web的应用程序的交互相关：
- en: '**#3812**: Jackson support'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3812**: Jackson支持'
- en: '**#4116**: Referrer policy'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4116**: 引用策略'
- en: '**#3938**: Added HTTP response splitting prevention'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3938**: 添加HTTP响应分割预防'
- en: '**#3949**: Added bean reference support to `@AuthenticationPrincipal`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3949**: 为`@AuthenticationPrincipal`添加了bean引用支持'
- en: '**#3978**: Support for Standford WebAuth and Shibboleth using the newly added
    `RequestAttributeAuthenticationFilter`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3978**: 支持使用新添加的`RequestAttributeAuthenticationFilter`的Standford WebAuth和Shibboleth。'
- en: '**#4076**: Document proxy server configuration'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4076**: 文档代理服务器配置'
- en: '**#3795**: `ConcurrentSessionFilter` supports `InvalidSessionStrategy`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3795**: `ConcurrentSessionFilter`支持`InvalidSessionStrategy`'
- en: '**#3904**: Added `CompositeLogoutHandler`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3904**: 添加`CompositeLogoutHandler`'
- en: 'Spring Security Configuration improvements:'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security配置改进：
- en: 'The following items are related to the configuration of Spring Security:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项目与Spring Security的配置相关：
- en: '**#3956**: Central configuration of the default role prefix. See the issue
    for details'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3956**: 默认角色前缀的集中配置。详情请看问题'
- en: '**#4102**: Custom default configuration in `WebSecurityConfigurerAdapter`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4102**: 在`WebSecurityConfigurerAdapter`中自定义默认配置'
- en: '**#3899**: `concurrency-control@max-sessions` supports unlimited sessions.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3899**: `concurrency-control@max-sessions`支持无限会话。'
- en: '**#4097**: `intercept-url@request-matcher-ref` adds more powerful request matching
    support to the XML namespace'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4097**: `intercept-url@request-matcher-ref`为XML命名空间添加了更强大的请求匹配支持'
- en: '**#3990**: Support for constructing `RoleHierarchy` from Map (such as YML).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3990**: 支持从Map（如YML）构建`RoleHierarchy`。'
- en: '**#4062**: Custom `cookiePath` to `CookieCsrfTokenRepository`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4062**: 自定义`cookiePath`到`CookieCsrfTokenRepository`。'
- en: '**#3794**: Allowing the configuration of `InvalidSessionStrategy` on `SessionManagementConfigurer`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#3794**: 允许在`SessionManagementConfigurer`上配置`InvalidSessionStrategy`'
- en: '**#4020**: Fixing exposed beans for `defaultMethodExpressionHandler` can prevent
    Method Security'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4020**: 修复`defaultMethodExpressionHandler`暴露的beans可以防止方法安全'
- en: Miscellaneous changes in Spring Security 4.x
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring Security 4.x中的其他更改
- en: 'The following items are miscellaneous changes that are worth noting as many
    of them might impact upgrading to Spring Security 4.x:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项目是一些值得注意的其他更改，其中许多可能会影响升级到Spring Security 4.x：
- en: '**#4080**: Spring 5 support'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4080**: Spring 5'
- en: '#4095 - Added `UserBuilder`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '#4095 - 添加`UserBuilder`'
- en: '**#4018**: Fixes after `csrf()` is invoked, future `MockMvc` invocations use
    original `CsrfTokenRepository`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#4018**：在`csrf()`被调用后进行修复，未来的`MockMvc`调用使用原始的`CsrfTokenRepository`'
- en: General dependency version updates
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规依赖版本更新**'
- en: Note that the listed numbers refer to the GitHub pull requests or issues.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，列出的数字指的是GitHub的pull请求或问题。
- en: Other, more innocuous changes, encompassed a general restructuring and cleaning
    up of the code base and the configuration of the framework so that the overall
    structure and usage makes much more sense. The authors of Spring Security have
    added extensibility where none previously existed, especially in the areas of
    login and URL redirection.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 其他更微小的变化，包括代码库和框架配置的整体重构和清理，使整体结构和使用更具意义。Spring Security的作者在登录和URL重定向等领域增加了可扩展性，尤其是之前不存在扩展性的地方。
- en: If you are already working in a Spring Security 3 environment, you may not find
    compelling reasons to upgrade if you aren't pushing the boundaries of the framework.
    However, if you have found limitations in the available extension points, code
    structure, or configurability of Spring Security 3, you'll welcome many of the
    minor changes that we discuss in detail in the remainder of this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在Spring Security 3环境中工作，如果你没有推动框架的边界，可能不会找到升级的强烈理由。然而，如果你在Spring Security
    3的可扩展点、代码结构或可配置性方面发现了局限性，那么你会欢迎我们在本章剩余部分详细讨论的许多小变化。
- en: Changes to configuration in Spring Security 4
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Spring Security 4中的配置更改**'
- en: Many of the changes in Spring Security 4 will be visible in the namespace style
    of configuration in XML-based configuration. We will be covering mostly Java-based
    configuration in this chapter, but will also note some notable XML-based changes.
    Although this chapter cannot cover all of the minor changes in detail, we'll try
    to cover those changes that will be most likely to affect you as you move to Spring
    Security 4.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 4中的许多变化将在基于XML的配置的命名空间风格中可见。本章将主要覆盖基于Java的配置，但也会注意一些值得注意的基于XML的变化。尽管本章无法详细涵盖所有的小变化，但我们将尝试涵盖那些在您迁移到Spring
    Security 4时最可能影响您的变化。
- en: Deprecations
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**废弃内容**'
- en: A number of deprecations were removed in Spring Security 4 to clean up clutter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security 4中移除了一大批废弃内容，以清理混乱。
- en: 'The following is the final commit for the XML and JavaConfig deprecations,
    which contained 177 changed files with 537 additions and 5,023 deletions: [https://github.com/spring-projects/spring-security/commit/6e204fff72b80196a83245cbc3bd0cd401feda00](https://github.com/spring-projects/spring-security/commit/6e204fff72b80196a83245cbc3bd0cd401feda00).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对XML和JavaConfig废弃内容的最终提交，其中包含177个更改文件，新增537处，删除5023处：[https://github.com/spring-projects/spring-security/commit/6e204fff72b80196a83245cbc3bd0cd401feda00](https://github.com/spring-projects/spring-security/commit/6e204fff72b80196a83245cbc3bd0cd401feda00)。
- en: If you are using the XML namespace or Java-based configuration, there are many
    instances where you will be shielded from deprecation. If you (or a non-spring
    library you use) do not use an API directly, then you will not be impacted. You
    can easily search your workspace to find these listed deprecations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用XML命名空间或基于Java的配置，在许多情况下，你会避免废弃问题。如果你（或你使用的非Spring库）没有直接使用API，那么你将不会受到影响。你可以很容易地在你的工作区中搜索这些列出的废弃内容。
- en: The spring-security-core deprecations
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Spring Security 核心模块的废弃内容**'
- en: This section described all of the deprecated APIs within the `spring-security-core`
    module.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了`spring-security-core`模块中所有的废弃API。
- en: org.springframework.security.access.SecurityConfig
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**org.springframework.security.access.SecurityConfig**'
- en: 'The `SecurityConfig.createSingleAttributeList(String)` interface was removed
    in favor of using `SecurityConfig.createList(String¦ )`. This means that if you
    have something like as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityConfig.createSingleAttributeList(String)`接口已被`SecurityConfig.createList(String¦
    )`取代。这意味着如果你有这样的内容：'
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will need to be replaced with the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要用以下代码替换：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: UserDetailsServiceWrapper
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**UserDetailsServiceWrapper**'
- en: '`UserDetailsServiceWrapper` was deprecated in favor of using `RoleHierarchyAuthoritiesMapper`.
    For example, you may have something like as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserDetailsServiceWrapper`已被`RoleHierarchyAuthoritiesMapper`取代。例如，你可能有这样的内容：'
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It will need to be replaced to something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要被替换成类似这样的内容：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: UserDetailsWrapper
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**UserDetailsWrapper**'
- en: '`UserDetailsWrapper` was deprecated in favor of using `RoleHierarchyAuthoritiesMapper`.
    Typically it users would not use the `UserDetailsWrapper` class directly. However,
    if they are, they can use `RoleHierarchyAuthoritiesMapper`, for example, the following
    code may be present:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserDetailsWrapper`因使用`RoleHierarchyAuthoritiesMapper`而被废弃。通常用户不会直接使用`UserDetailsWrapper`类。然而，如果他们这样做，他们可以使用`RoleHierarchyAuthoritiesMapper`，例如，下面代码可能存在：'
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If so, then it needs to be replaced by the following code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果如此，则需要用以下代码片段替换：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: AbstractAccessDecisionManager
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象访问决策管理器
- en: 'The default constructor for `AbstractAccessDecisionManager` has been deprecated
    along with the `setDecisionVoters` method. Naturally, this impacts the `AffirmativeBased`,
    `ConsensusBased`, and `UnanimousBased` subclasses. For example, you may be using
    the following code snippet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractAccessDecisionManager`的默认构造函数以及`setDecisionVoters`方法已被废弃。自然而然，这影响了`AffirmativeBased`、`ConsensusBased`和`UnanimousBased`子类。例如，您可能使用以下代码片段：'
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If so, it needs to be migrated to the following code snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果如此，它需要更改为以下代码片段：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: AuthenticationException
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证异常
- en: 'The constructor that accepts `extraInformation` within `AuthenticationException`
    was removed to prevent the accidental leaking of the `UserDetails` object. Specifically,
    we removed the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AuthenticationException`中接受`extraInformation`的构造函数已被移除，以防止意外泄露`UserDetails`对象。具体来说，我们移除了以下代码：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This impacts the subclasses `AccountStatusException`, `AccountExpiredException`,
    `BadCredentialsException`, `CredentialsExpiredException`, `DisabledException`,
    `LockedException`, and `UsernameNotFoundException`. If you are using any of these
    constructors, simply remove the additional argument. For example, the following
    code snippet is changed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这影响了子类`AccountStatusException`、`AccountExpiredException`、`BadCredentialsException`、`CredentialsExpiredException`、`DisabledException`、`LockedException`和`UsernameNotFoundException`。如果您使用这些构造函数中的任何一个，只需移除附加参数。例如，以下代码片段更改了：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code snippet should be changed to the following code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段应更改为以下代码片段：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: AnonymousAuthenticationProvider
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名认证提供者
- en: 'The `AnonymousAuthenticationProvider` default constructor and the `setKey`
    method were deprecated in favor of using the constructor injection. For example,
    you may have the following code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnonymousAuthenticationProvider`的默认构造函数和`setKey`方法因使用构造器注入而被废弃。例如，您可能有以下代码片段：'
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code snippet should be changed to the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段应更改为以下代码：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: AuthenticationDetailsSourceImpl
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证详情源实现类
- en: 'The `AuthenticationDetailsSourceImpl` class was deprecated in favor of writing
    a custom `AuthenticationDetailsSource`. For example, you may have the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationDetailsSourceImpl`类因编写自定义`AuthenticationDetailsSource`而被废弃。例如，您可能有以下内容：'
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should implement the `AuthenticationDetailsSource` class directly to return
    the `CustomSource` object:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该直接实现`AuthenticationDetailsSource`类以返回`CustomSource`对象：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ProviderManager
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证提供者管理器
- en: The `ProviderManager` class has removed the deprecated default constructor and
    the corresponding setter methods in favor of using constructor injection. It has
    also removed the `clearExtraInformation` property, since the `AuthenticationException`
    exception had the extra information property removed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProviderManager`类移除了废弃的默认构造函数和相应的设置器方法，改为使用构造器注入。它还移除了`clearExtraInformation`属性，因为`AuthenticationException`异常已经移除了额外信息属性。'
- en: 'For example, you may have something like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能像以下内容一样：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If so, the preceding code should be changed to the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果如此，上述代码应更改为以下代码：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `clearExtraInformation` property was removed since the `AuthenticationException`
    exception had the extra information property removed. There is no replacement
    for this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`AuthenticationException`异常已经移除了额外信息属性，因此移除了`clearExtraInformation`属性。对此没有替代方案。
- en: RememberMeAuthenticationProvider
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记住我认证提供者
- en: 'The `RememberMeAuthenticationProvider` class had the default constructor and
    the `setKey` method removed in favor of the constructor injection. For example,
    take a look at the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`RememberMeAuthenticationProvider`类移除了默认构造函数和`setKey`方法，改为使用构造器注入。例如，查看以下代码：'
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code snippet should be migrated to the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段应迁移至以下内容：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: GrantedAuthorityImpl
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权实体实现类
- en: '`GrantedAuthorityImpl` was removed in favor of `SimpleGrantedAuthority`, or
    implementing your own `GrantAuthority` object. For example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`GrantedAuthorityImpl`已被`SimpleGrantedAuthority`所取代，或者实现你自己的`GrantAuthority`对象。例如：'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This should be replaced with the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为以下内容：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: InMemoryDaoImpl
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`InMemoryDaoImpl`'
- en: '`InMemoryDaoImpl` was replaced in favor of `InMemoryUserDetailsManager`. For
    example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`InMemoryDaoImpl`已被`InMemoryUserDetailsManager`所取代。例如：'
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This should be replaced with:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该被替换为：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The spring-security-web deprecations
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`spring-security-web`模块中的弃用'
- en: This section described all of the deprecated APIs within the `spring-security-web`
    module.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了`spring-security-web`模块中所有弃用的API。
- en: FilterChainProxy
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`FilterChainProxy`'
- en: '`FilterChainProxy` removed the `setFilterChainMap` method in favor of constructor
    injection. For example, you may have the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`FilterChainProxy`移除了`setFilterChainMap`方法，改为使用构造注入。例如，你可能有以下内容：'
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It should be replaced with:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该被替换为：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`FilterChainProxy` also removed `getFilterChainMap` in favor of using `getFilterChains`,
    for example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`FilterChainProxy`也移除了`getFilterChainMap`，改为使用`getFilterChains`，例如：'
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This should be replaced with the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为以下代码：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: ExceptionTranslationFilter
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ExceptionTranslationFilter`'
- en: 'The default constructor for `ExceptionTranslationFilter` and the `setAuthenticationEntryPoint`
    method was removed in favor of using the constructor injection:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExceptionTranslationFilter`的默认构造函数和`setAuthenticationEntryPoint`方法已被移除，改为使用构造注入：'
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This can be replaced with the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用以下代码替换：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: AbstractAuthenticationProcessingFilter
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AbstractAuthenticationProcessingFilter`'
- en: 'The `AbstractAuthenticationProcessingFilter` class had its `successfulAuthentication(HttpServletRequest,HttpServletResponse,Authentication)`
    method removed. So, your application may override the following method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractAuthenticationProcessingFilter`类的`successfulAuthentication(HttpServletRequest,HttpServletResponse,Authentication)`方法已被移除。所以，你的应用程序可能重写了以下方法：'
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It should be replaced with the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 应替换为以下代码：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: AnonymousAuthenticationFilter
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AnonymousAuthenticationFilter`'
- en: 'The `AnonymousAuthenticationFilter` class had the default constructor and the
    `setKey` and `setPrincipal` methods removed in favor of the constructor injection.
    For example, take a look at the following code snippet:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnonymousAuthenticationFilter`类的默认构造函数和`setKey`、`setPrincipal`方法已被移除，改为使用构造注入。例如，看看以下代码片段：'
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This should be replaced with the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为以下代码：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: LoginUrlAuthenticationEntryPoint
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`LoginUrlAuthenticationEntryPoint`'
- en: 'The `LoginUrlAuthenticationEntryPoint` default constructor and the `setLoginFormUrl`
    method was removed in favor of the constructor injection. For example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginUrlAuthenticationEntryPoint`的默认构造函数和`setLoginFormUrl`方法已被移除，改为使用构造注入。例如：'
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This should be replaced with the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为以下代码：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: PreAuthenticatedGrantedAuthoritiesUserDetailsService
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`PreAuthenticatedGrantedAuthoritiesUserDetailsService`'
- en: The `PreAuthenticatedGrantedAuthoritiesUserDetailsService` interface removed
    `createuserDetails` in favor of `createUserDetails`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`PreAuthenticatedGrantedAuthoritiesUserDetailsService`接口移除了`createuserDetails`，改为`createUserDetails`。'
- en: The new method has a correction in the case (`U` instead of `u`).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法在案例中进行了更正（`U`而不是`u`）。
- en: This means that if you have a subclass of the `PreAuthenticatedGrantedAuthoritiesUserDetailsService`
    class that overrides the `createuserDetails`, `SubclassPreAuthenticatedGrantedAuthoritiesUserDetailsService`
    extends `PreAuthenticatedGrantedAuthoritiesUserDetailsService`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果你有一个`PreAuthenticatedGrantedAuthoritiesUserDetailsService`类的子类，它重写了`createuserDetails`，例如`SubclassPreAuthenticatedGrantedAuthoritiesUserDetailsService`扩展了`PreAuthenticatedGrantedAuthoritiesUserDetailsService`。
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'It should be changed to override `createUserDetails`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该更改为重写`createUserDetails`：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: AbstractRememberMeServices
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`AbstractRememberMeServices`'
- en: '`AbstractRememberMeServices` and its subclasses `PersistentTokenBasedRememberMeServices`
    and `TokenBasedRememberMeServices` removed the default constructor, the `setKey`,
    and the `setUserDetailsService` methods in favor of constructor injection.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractRememberMeServices`及其子类`PersistentTokenBasedRememberMeServices`和`TokenBasedRememberMeServices`移除了默认构造函数、`setKey`和`setUserDetailsService`方法，改为使用构造注入。'
- en: PersistentTokenBasedRememberMeServices
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`PersistentTokenBasedRememberMeServices`'
- en: 'The changes to the `AbstractRememberMeServices` and its subclasses had a usage
    similar to the following example:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对`AbstractRememberMeServices`及其子类`PreAuthenticatedGrantedAuthoritiesUserDetailsService`的更改使得用法类似于以下示例：
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'But the implementation usage should now be replaced with:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 但实现用法现在应替换为：
- en: '[PRE38]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: RememberMeAuthenticationFilter
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`RememberMeAuthenticationFilter`'
- en: 'The `RememberMeAuthenticationFilter` default constructor, the `setAuthenticationManager`,
    and `setRememberMeServices` methods were removed in favor of the constructor injection,
    like so:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`RememberMeAuthenticationFilter`的默认构造函数、`setAuthenticationManager`和`setRememberMeServices`方法已被移除，改为使用构造器注入，如下：'
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This should be replaced with:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE40]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: TokenBasedRememberMeServices
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TokenBasedRememberMeServices
- en: '`AbstractRememberMeServices` and its subclasses `PersistentTokenBasedRememberMeServices`
    and `TokenBasedRememberMeServices` removed the default constructor, the `setKey`,
    and the `setUserDetailsService` methods in favor of the constructor injection.
    For example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`AbstractRememberMeServices`及其子类`PersistentTokenBasedRememberMeServices`和`TokenBasedRememberMeServices`移除了默认构造函数、`setKey`和`setUserDetailsService`方法，改为使用构造器注入。例如：'
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This should be replaced with:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: ConcurrentSessionControlStrategy
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ConcurrentSessionControlStrategy
- en: '`ConcurrentSessionControlStrategy` was replaced with `ConcurrentSessionControlAuthenticationStrategy`.
    Previously, `ConcurrentSessionControlStrategy` could not be decoupled from `SessionFixationProtectionStrategy`.
    Now it is completely decoupled. For example:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentSessionControlStrategy`已被替换为`ConcurrentSessionControlAuthenticationStrategy`。以前，`ConcurrentSessionControlStrategy`无法与`SessionFixationProtectionStrategy`解耦。现在它完全解耦了。例如：'
- en: '[PRE43]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This can be replaced with:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以替换为：
- en: '[PRE44]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: SessionFixationProtectionStrategy
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SessionFixationProtectionStrategy
- en: '`SessionFixationProtectionStrategy` removed the `setRetainedAttributes` method
    in favor of users subclassing `SessionFixationProtectionStrategy` and overriding
    the `extractAttributes` method. Look at the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`SessionFixationProtectionStrategy`移除了`setRetainedAttributes`方法，改为让用户继承`SessionFixationProtectionStrategy`并重写`extractAttributes`方法。查看以下代码：'
- en: '[PRE45]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'It should be replaced with:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该替换为：
- en: '[PRE46]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: BasicAuthenticationFilter
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BasicAuthenticationFilter
- en: 'The `BasicAuthenticationFilter` default constructor, the `setAuthenticationManager`,
    and the `setRememberMeServices` methods were removed in favor of the constructor
    injection:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`BasicAuthenticationFilter`的默认构造函数、`setAuthenticationManager`和`setRememberMeServices`方法已被移除，改为使用构造器注入：'
- en: '[PRE47]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This should be replaced with:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE48]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Using this constructor automatically sets `ignoreFalure` to `true`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个构造函数会自动将`ignoreFalure`设置为`true`。
- en: SecurityContextPersistenceFilter
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SecurityContextPersistenceFilter
- en: '`SecurityContextPersistenceFilter` removed the `setSecurityContextRepository`
    in favor of the constructor injection. For example:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityContextPersistenceFilter`移除了`setSecurityContextRepository`，改为使用构造器注入。例如：'
- en: '[PRE49]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This should be replaced with:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE50]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: RequestCacheAwareFilter
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RequestCacheAwareFilter
- en: '`RequestCacheAwareFilter` removed the `setRequestCache` in favor of the constructor
    injection. For example:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`RequestCacheAwareFilter`移除了`setRequestCache`，改为使用构造器注入。例如：'
- en: '[PRE51]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This should be replaced with:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE52]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: ConcurrentSessionFilter
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ConcurrentSessionFilter
- en: '`ConcurrentSessionFilter` removed the default constructor, the `setExpiredUrl`,
    and the `setSessionRegistry` methods in favor of the constructor injection. For
    example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentSessionFilter`移除了默认构造函数、`setExpiredUrl`和`setSessionRegistry`方法，改为使用构造器注入。例如：'
- en: '[PRE53]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This should be replaced with:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE54]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: SessionManagementFilter
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SessionManagementFilter
- en: '`SessionManagementFilter` removed the `setSessionAuthenticationStrategy` method
    in favor of the constructor injection. For example:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`SessionManagementFilter`移除了`setSessionAuthenticationStrategy`方法，改为使用构造器注入。例如：'
- en: '[PRE55]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This should be replaced with:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE56]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: RequestMatcher
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RequestMatcher
- en: 'The `RequestMatcher` and its implementations have moved from the `org.springframework.security.web.util`
    package to `org.springframework.security.web.util.matcher`. Specifically:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`RequestMatcher`及其实现已从`org.springframework.security.web.util`包移动到`org.springframework.security.web.util.matcher`。具体如下：'
- en: '[PRE57]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: WebSecurityExpressionHandler
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSecurityExpressionHandler
- en: '`WebSecurityExpressionHandler` was removed in favor of using `SecurityExpressionHandler<FilterInvocation>`.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebSecurityExpressionHandler`已被移除，改为使用`SecurityExpressionHandler<FilterInvocation>`。'
- en: 'This means you may have the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可能有以下内容：
- en: '[PRE58]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This needs to be updated to:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要更新为：
- en: '[PRE59]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You can implement `WebSecurityExpressionHandler` like so:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样实现`WebSecurityExpressionHandler`：
- en: '[PRE60]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then it must be updated to:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它必须更新为：
- en: '[PRE61]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '@AuthenticationPrincipal'
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@AuthenticationPrincipal'
- en: '`org.springframework.security.web.bind.annotation.AuthenticationPrincipal`
    has been deprecated in favor of `org.springframework.security.core.annotation.AuthenticationPrincipal`.
    For example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.security.web.bind.annotation.AuthenticationPrincipal`已被弃用，改为`org.springframework.security.core.annotation.AuthenticationPrincipal`。例如：'
- en: '[PRE62]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This should be replaced with:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该替换为：
- en: '[PRE63]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Migrating default filter URLs
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移默认过滤器URL
- en: A number of servlet filters had their default URLs switched to help guard against
    information leakage.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 许多servlet过滤器的默认URL被更改为帮助防止信息泄露。
- en: 'There were many URLs that were changed and the following commit contains 125
    changed files with 8,122 additions and 395 deletions: [https://github.com/spring-projects/spring-security/commit/c67ff42b8abe124b7956896c78e9aac896fd79d9](https://github.com/spring-projects/spring-security/commit/c67ff42b8abe124b7956896c78e9aac896fd79d9).'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多URL被更改，以下提交包含了125个更改的文件，共有8,122个增加和395个删除：[https://github.com/spring-projects/spring-security/commit/c67ff42b8abe124b7956896c78e9aac896fd79d9](https://github.com/spring-projects/spring-security/commit/c67ff42b8abe124b7956896c78e9aac896fd79d9)。
- en: JAAS
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAAS
- en: Unfortunately, we did not have space to discuss Spring Security's JAAS integration.
    However, there is a JAAS sample application included in the Spring Security samples
    at [https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas-sample](https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas-sample).
    In fact, there is also excellent documentation about JAAS integration, available
    in the Spring Security reference at [https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas](https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas).
    When looking at the JAAS reference documentation, you will notice that, from Spring
    Security 4.2 onwards, support was added for using JAAS login modules with arbitrary
    JAAS configuration implementations. Spring Security 4.2 also added the `jaas-api-provision`
    attribute to the `<http>` element, which ensures that the JAAS Subject is populated
    for applications that may also rely on the JAAS Subject.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，我们没有篇幅讨论Spring Security的JAAS集成。然而，在Spring Security的示例中包含了一个JAAS样本应用程序，可以在[https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas-sample](https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas-sample)找到。实际上，还有关于JAAS集成的优秀文档，可以在Spring
    Security的参考资料中找到，链接为[https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas](https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jaas)。当查看JAAS参考文档时，你会注意到，从Spring
    Security 4.2开始，支持使用JAAS登录模块与任意的JAAS配置实现。Spring Security 4.2还在`<http>`元素中添加了`jaas-api-provision`属性，确保了对于可能依赖于JAAS主题的应用程序，JAAS主题被填充。
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter reviewed the major and minor changes that you will find when upgrading
    an existing Spring Security 3 project to Spring Security 4.2\. In this chapter,
    we have reviewed the significant enhancements to the framework that are likely
    to motivate an upgrade. We also examined upgrade requirements, dependencies and
    common types of code, and configuration changes that will prevent applications
    from working post-upgrade. We also covered investigation (at a high level) of
    the overall code-reorganization changes that the Spring Security authors made
    as part of codebase restructuring.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回顾了将现有Spring Security 3项目升级到Spring Security 4.2时您将发现的主要和小幅变化。在本章中，我们回顾了框架的主要增强功能，这些功能可能会促使进行升级。我们还检查了升级要求、依赖关系和常见的代码、配置更改，这些更改可能会在升级后阻止应用程序运行。我们还涵盖了Spring
    Security作者在代码库重构过程中进行的高级代码组织变化调查。
- en: If this is the first chapter you've read, we hope that you return to the rest
    of the book and use this chapter as a guide to allow your upgrade to Spring Security
    4.2 to proceed as smoothly as possible!
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是第一次阅读这一章节，我们希望你能回到书的其余部分，并使用这一章节作为指南，使你的Spring Security 4.2升级尽可能顺利地进行！
