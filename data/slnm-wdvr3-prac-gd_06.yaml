- en: Understanding WebDriver Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解WebDriver事件
- en: 'Selenium WebDriver provides an API for tracking the various events that happen
    when test scripts are executed using WebDriver. Many navigation events get fired
    before and after a WebDriver internal event occurs (such as before and after navigating
    to a URL, and before and after browser back-navigation) and these can be tracked
    and captured. To throw an event, WebDriver gives you a class named `EventFiringWebDriver`,
    and to catch that event, it provides the test-script developer with an interface
    named `WebDriverEventListener`. The test-script developer should provide its own
    implementations for the overridden methods from the interface. In this chapter,
    we will look at the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver提供了一个API来跟踪使用WebDriver执行测试脚本时发生的各种事件。许多导航事件在WebDriver内部事件发生之前和之后被触发（例如在导航到URL之前和之后，以及浏览器后退导航之前和之后），这些事件可以被跟踪和捕获。为了抛出一个事件，WebDriver提供了一个名为`EventFiringWebDriver`的类，为了捕获该事件，它为测试脚本开发者提供了一个名为`WebDriverEventListener`的接口。测试脚本开发者应该为其提供的接口重写方法提供自己的实现。在本章中，我们将探讨以下主题：
- en: How to listen to and handle various browser-navigation events by using EventFiringWebDriver
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`EventFiringWebDriver`监听和处理各种浏览器导航事件
- en: How to listen to and handle web-element action events that get triggered during
    the execution of test scripts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在测试脚本执行过程中监听和处理被触发的网页元素动作事件
- en: Adding additional features to WebDriver to capture performance or accessibility
    testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向WebDriver添加额外的功能以捕获性能或可访问性测试
- en: Introducing the eventFiringWebDriver and eventListener classes
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍`eventFiringWebDriver`和`eventListener`类
- en: The `EventFiringWebDriver` class is a wrapper around the WebDriver that gives
    the driver the capability to fire events. The `EventListener` class, on the other
    hand, waits to listen to `EventFiringWebDriver` and handles all of the events
    that are dispatched. There can be more than one listener waiting to hear from
    the `EventFiringWebDriver` class for an event to fire. All of the event listeners
    should be registered with the `EventFiringWebDriver` class to get notified.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventFiringWebDriver`类是WebDriver的一个包装器，它赋予了驱动器触发事件的能力。另一方面，`EventListener`类等待监听`EventFiringWebDriver`，并处理所有被分派的事件。可能存在多个监听器等待从`EventFiringWebDriver`类接收事件触发。所有的事件监听器都应该注册到`EventFiringWebDriver`类以接收通知。'
- en: 'The following flow diagram explains what has to be done to capture all of the
    events raised by `EventFiringWebDriver` during the execution of test cases:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的流程图解释了在执行测试用例期间，如何捕获由`EventFiringWebDriver`引发的所有事件：
- en: '![](img/5da5045c-da26-4484-b978-97540a96bb62.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5da5045c-da26-4484-b978-97540a96bb62.png)'
- en: Creating an instance of EventListener
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`EventListener`实例
- en: 'The `EventListener` class handles all of the events that are dispatched by
    the `EventFiringWebDriver` class. There are two ways to create an `EventListener`
    class:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventListener`类处理由`EventFiringWebDriver`类分派的所有事件。创建`EventListener`类有两种方式：'
- en: By implementing the `WebDriverEventListener` interface.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实现`WebDriverEventListener`接口。
- en: By extending the `AbstractWebDriverEventListener` class provided in the WebDriver
    library.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过扩展WebDriver库中提供的`AbstractWebDriverEventListener`类。
- en: It is up to you, as a test-script developer, to choose which way to go.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为测试脚本开发者，选择哪种方式取决于你。
- en: Implementing WebDriverEventListener
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现`WebDriverEventListener`
- en: 'The `WebDriverEventListener` interface has all the event methods declared.
    The `EventFiringWebDriver` class, as soon as it realizes an event has occurred,
    invokes the registered method of `WebDriverEventListener`. Here, we have created
    an `IAmTheEventListener` named class and have implemented `WebDriverEventListener`.
    Now we need to provide implementation for all the methods declared in it. Currently,
    in `WebDriverEventListener`, there are 15 methods. We will discuss each one of
    them shortly. Make sure the IDE provides us with the dummy implementation of these
    methods. The class that we have created with all 15 overridden methods is as follows
    (we have provided implementations for a couple of methods as an example):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriverEventListener`接口声明了所有的事件方法。一旦`EventFiringWebDriver`类意识到发生了事件，它就会调用已注册的`WebDriverEventListener`方法。在这里，我们创建了一个名为`IAmTheEventListener`的类，并实现了`WebDriverEventListener`。现在我们需要为其中声明的方法提供实现。目前，在`WebDriverEventListener`中，有15个方法。我们将很快讨论每一个。确保IDE为我们提供了这些方法的占位符实现。我们创建的包含所有15个重写方法的是以下类（我们为其中几个方法提供了示例实现）：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Extending AbstractWebDriverEventListener
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展`AbstractWebDriverEventListener`
- en: 'The second way to create a listener class is by extending the `AbstractWebDriverEventListene
    r` class. `AbstractWebDriverEventListener` is an abstract class that implements
    `WebDriverEventListener`. Though it doesn''t really provide any implementation
    for the methods in the `WebDriverEventListener` interface, it creates a dummy
    implementation such that the listener class that you are creating doesn''t have
    to contain all the methods, only the ones that you, as a test-script developer,
    are interested in. The following is a class we have created that extends `AbstractWebDriverEventListener`
    and provides implementations for a couple of methods in it. This way, we can override
    only the methods that we are interested in rather than all of the methods in our
    class:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建监听器类的第二种方式是通过扩展 `AbstractWebDriverEventListener` 类。`AbstractWebDriverEventListener`
    是一个实现了 `WebDriverEventListener` 的抽象类。尽管它并没有为 `WebDriverEventListener` 接口中的方法提供任何实现，但它创建了一个虚拟实现，这样您创建的监听器类就不必包含所有方法，只需包含您作为测试脚本开发者感兴趣的方法即可。以下是我们创建的一个扩展
    `AbstractWebDriverEventListener` 并为其提供了一些方法实现的类。这样，我们就可以仅覆盖我们感兴趣的方法，而不是我们类中的所有方法：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a WebDriver instance
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 WebDriver 实例
- en: 'Now that we have created our listener class that listens for all of the events
    generated, it''s time to create our test script class and let it call `IAmTheDriver.java`.
    After the class is created, we declare a ChromeDriver instance in it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个监听所有生成事件的监听器类，是时候创建我们的测试脚本类，并让它调用 `IAmTheDriver.java`。在类创建后，我们在其中声明一个
    ChromeDriver 实例：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ChromeDriver` instance will be the underlying driver instance that drives
    all the driver events. This is nothing new. The step explained in the next section
    is where we make this driver an instance of `EventFiringWebDriver`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChromeDriver` 实例将是驱动所有驱动事件的底层驱动实例。这并不是什么新鲜事。下一节中解释的步骤是我们将这个驱动器实例化为 `EventFiringWebDriver`。'
- en: Creating EventFiringWebDriver and EventListener instances
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 EventFiringWebDriver 和 EventListener 实例
- en: Now that we have the basic driver instance, pass it as an argument while constructing
    the `EventFiringWebDriver` instance. We will be using this instance of the driver
    to execute all of the further user actions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本的驱动实例，在构造 `EventFiringWebDriver` 实例时将其作为参数传递。我们将使用这个驱动实例来执行所有进一步的用户操作。
- en: 'Now, using the following code, instantiate the `EventListener`, `IAmTheEventListener.java`,
    or `IAmTheEventListener2.java` class that we created previously. This will be
    the class to which all of the events are dispatched:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下代码，实例化我们之前创建的 `EventListener`，即 `IAmTheEventListener.java` 或 `IAmTheEventListener2.java`
    类。这将是一个将所有事件分发的类：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Registering EventListener with EventFiringWebDriver
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 EventListener 注册到 EventFiringWebDriver
- en: 'For the event executions to be notified by `EventListener`, we have registered
    `EventListener` to the `EventFiringWebDriver` class. Now the `EventFiringWebDriver`
    class will know where to send the notifications. This is done by the following
    line of code: `eventFiringDriver.register(eventListener);`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 `EventListener` 能够通知事件执行，我们已经将其注册到 `EventFiringWebDriver` 类。现在 `EventFiringWebDriver`
    类将知道在哪里发送通知。这是通过以下代码行完成的：`eventFiringDriver.register(eventListener);`
- en: Executing and verifying the events
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行和验证事件
- en: 'Now it''s time for our test script to execute events, such as navigation events.
    Let''s first navigate to Google and then Facebook. We will use the browser back-navigation
    to go back to Google. The full code of the test script is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试脚本执行事件的时候了，比如导航事件。让我们首先导航到 Google，然后是 Facebook。我们将使用浏览器的后退导航回到 Google。测试脚本的完整代码如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code, we modify our listener class to record `navigateTo`
    and `navigateBack` before and after events inherited from the `AbstractWebDriverEventListener`
    class. The modified methods are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们修改了我们的监听器类，以记录从 `AbstractWebDriverEventListener` 类继承的 `navigateTo`
    和 `navigateBack` 事件的前后事件。修改后的方法如下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now if you execute your test script, the output will be as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您执行测试脚本，输出将如下所示：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Registering multiple EventListeners
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册多个 EventListeners
- en: 'We can register more than one listener with `EventFiringWebDriver`. Once the
    event occurs, all of the registered listeners are notified about it. Let''s modify
    our test script to register both our `IAmTheListener.java` and `IAmTheListener2.java`
    files:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `EventFiringWebDriver` 注册多个监听器。一旦事件发生，所有注册的监听器都会收到通知。让我们修改我们的测试脚本以注册
    `IAmTheListener.java` 和 `IAmTheListener2.java` 文件：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Modify the listeners slightly to differentiate the log statements. Now if you
    execute the preceding code, you will see the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微修改监听器以区分日志语句。现在如果您执行前一个代码，您将看到以下输出：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exploring different WebDriver event listeners
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索不同的 WebDriver 事件监听器
- en: We have seen some of the methods in our `EventListeners` that get invoked when
    their corresponding events are executed, for example, before and after navigation
    methods are invoked when the `navigateTo` event is triggered. Here, we'll see
    all the methods that `WebDriverEventListener` provides us.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些在 `EventListeners` 中执行时被调用的方法，例如，在触发 `navigateTo` 事件时，会调用导航前后的方法。在这里，我们将看到
    `WebDriverEventListener` 提供的所有方法。
- en: Listening for WebElement value changes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听 `WebElement` 值更改
- en: 'This event occurs when the value of a WebElement changes when the `sendKeys()`
    or `clear()` methods are executed on them. There are two methods associated with
    this event:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 `WebElement` 上执行 `sendKeys()` 或 `clear()` 方法时，会触发此事件。与此事件相关联有两个方法：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding method is invoked before the WebDriver attempts to change the
    value of the WebElement. As a parameter, the WebElement itself is passed to the
    method so that you can log the value of the element before the change:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WebDriver 尝试更改 `WebElement` 的值之前，会调用前一个方法。作为参数，将 `WebElement` 本身传递给方法，以便在更改之前记录元素的值：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding method is the second method associated with the value-change event
    that is invoked after the driver changes the value of the WebElement. Again, the
    WebElement and the WebDriver are sent as parameters to the method. If an exception
    occurs when changing the value, this method is not invoked.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个方法是第二个与值更改事件相关联的方法，在驱动程序更改 `WebElement` 的值之后被调用。同样，`WebElement` 和 WebDriver
    作为参数传递给该方法。如果在更改值时发生异常，则此方法不会被调用。
- en: Listening for the clicked WebElement
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听被点击的 `WebElement`
- en: 'This event occurs when a WebElement is clicked, that is, by executing `webElement.click()`.
    There are two methods to listen for this event in the `WebDriverEventListener`
    implementation:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `WebElement` 被点击时，即通过执行 `webElement.click()` 触发此事件。在 `WebDriverEventListener`
    实现中，有两种方法可以监听此事件：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding method is invoked when the WebDriver is about to click on a particular
    WebElement. The WebElement that is going to be clicked on and the WebDriver that
    is clicking on it are sent as parameters to this method so that the test-script
    developer can interpret which driver performed the click action, and on which
    element the action was performed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当 WebDriver 即将点击特定的 `WebElement` 时，会调用前一个方法。将要点击的 `WebElement` 和执行点击操作的 WebDriver
    作为参数传递给此方法，以便测试脚本开发者可以解释哪个驱动程序执行了点击操作，以及操作是在哪个元素上执行的：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `EventFiringWebDriver` class notifies the preceding method after the click
    action is taken on a WebElement. Similar to the `beforeClickOn()` method, this
    method is also sent the WebElement and WebDriver instances. If an exception occurs
    during a click event, this method is not called.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventFiringWebDriver` 类在点击操作在 `WebElement` 上执行后通知前一个方法。类似于 `beforeClickOn()`
    方法，此方法也接收 `WebElement` 和 WebDriver 实例。如果在点击事件期间发生异常，则此方法不会被调用。'
- en: Listening for a WebElement search event
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听 `WebElement` 搜索事件
- en: 'This event is triggered when the WebDriver searches for a WebElement on the
    web page using `findElement()` or `findElements()`. There are, again, two methods
    associated with this event:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当 WebDriver 使用 `findElement()` 或 `findElements()` 在网页上搜索 `WebElement` 时，会触发此事件。同样，与此事件相关联有两个方法：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding method is invoked just before WebDriver begins searching for
    a particular WebElement on the page. For parameters, it sends the locating mechanism,
    that is, the WebElement that is searched for, and the WebDriver instance that
    is performing the search:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WebDriver 开始在页面上搜索特定的 `WebElement` 之前，会调用前一个方法。作为参数，它发送定位机制，即要搜索的 `WebElement`
    和执行搜索的 WebDriver 实例：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Similarly, the `EventFiringWebDriver` class calls the preceding method after
    the search for an element is over and the element is found. If there are any exceptions
    during the search, this method is not called, and an exception is raised.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`EventFiringWebDriver` 类在搜索元素结束并且找到元素后调用前一个方法。如果在搜索过程中发生任何异常，则此方法不会被调用，并且会引发异常。
- en: Listening for browser back-navigation
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听浏览器后退导航
- en: 'The browser back-navigation event, as we have already seen, gets invoked when
    we use the `driver.navigation().back()` method. The browser goes back one level
    in its history. Just like all the other events, this event is associated with
    two methods:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，当使用`driver.navigation().back()`方法时，浏览器后退导航事件会被触发。浏览器在其历史记录中后退一级。就像所有其他事件一样，此事件与两个方法相关联：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding method is invoked before the browser takes you back in its history.
    The WebDriver that invoked this event is passed as a parameter to this method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器历史记录回退之前，调用此方法。触发此事件的WebDriver作为参数传递给此方法：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Just as in all the after `<<event>>` methods, the preceding method is invoked
    when the navigate-back action is triggered. The preceding two methods will be
    invoked irrespective of the navigation of the browser; that is, if the browser
    doesn't have any history and you invoke this method, the browser doesn't take
    you to any of its history. But, even in that scenario, as the event is triggered,
    those two methods are invoked.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所有在`<<event>>`之后的`after`方法一样，前面的方法在导航回退动作被触发时调用。前面的两个方法将不受浏览器导航的影响而被调用；也就是说，如果浏览器没有任何历史记录，你调用此方法，浏览器不会带你到任何历史记录。但是，即使在那种情况下，由于事件被触发，这两个方法也会被调用。
- en: Listening for browser forward-navigation
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听浏览器前进导航
- en: 'This event is very similar to the browser back-navigation, except that this
    is browser forward-navigation, so it is using `driver.navigate().forward()`. The
    two methods associated with this event are:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件与浏览器后退导航非常相似，只是这是浏览器前进导航，因此它使用`driver.navigate().forward()`。与此事件相关的两个方法是：
- en: '`public void afterNavigateForward(WebDriver driver)`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void afterNavigateForward(WebDriver driver)`'
- en: '`public void beforeNavigateForward(WebDriver driver)`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void beforeNavigateForward(WebDriver driver)`'
- en: Just as in browser back-navigation, these methods are invoked irrespective of
    whether or not the browser takes you one level forward.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如浏览器后退导航一样，这些方法在浏览器是否前进一级的情况下都会被调用。
- en: Listening for browser NavigateTo events
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听浏览器导航到事件
- en: 'As we''ve seen earlier, this event occurs whenever the driver executes `driver.
    get(url)`. The related methods for this event are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，此事件在驱动程序执行`driver.get(url)`时发生。与此事件相关的方法定义如下：
- en: '`public void beforeNavigateTo(java.lang.String url, WebDriver driver)`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void beforeNavigateTo(java.lang.String url, WebDriver driver)`'
- en: '`public void afterNavigateTo(java.lang.String url, WebDriver driver)`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void afterNavigateTo(java.lang.String url, WebDriver driver)`'
- en: The URL that is used for the driver-navigation is passed as a parameter to the
    preceding methods, along with the driver that triggered the event.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 用于驱动程序导航的URL作为参数传递给前面的方法，以及触发事件的驱动程序。
- en: Listening for script execution
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听脚本执行
- en: 'This event is triggered whenever the driver executes a JavaScript. The associated
    methods for this event are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当驱动程序执行JavaScript时，此事件被触发。与此事件相关的方法定义如下：
- en: '`public void beforeScript(java.lang.String script, WebDriver driver)`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void beforeScript(java.lang.String script, WebDriver driver)`'
- en: '`public void afterScript(java.lang.String script, WebDriver driver)`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void afterScript(java.lang.String script, WebDriver driver)`'
- en: The preceding methods get the JavaScript that was executed as a string, and
    the WebDriver that executed it as a parameter. If an exception occurs during script
    execution, the `afterScript()` method will not be invoked.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法获取作为字符串执行的JavaScript，以及执行它的WebDriver作为参数。如果在脚本执行过程中发生异常，则不会调用`afterScript()`方法。
- en: Listening for an exception
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听异常
- en: 'This event occurs when the WebDriver comes across an exception. For instance,
    if you try to search for a WebElement using `findElement()`, and that element
    doesn''t exist on the page, the driver throws an exception (`NoSuchElementException`).
    At this point, this event is triggered, and the following method gets notified:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当WebDriver遇到异常时，此事件发生。例如，如果你尝试使用`findElement()`搜索一个WebElement，而该元素在页面上不存在，则驱动程序会抛出异常（`NoSuchElementException`）。在此时刻，此事件被触发，以下方法会收到通知：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In all the `after<<event>>` methods, we have seen that they will not be invoked
    if the driver comes across any exception. In that case, instead of those `after<<event>>`
    methods, the `onException()` method is invoked and the throwable object and the
    WebDriver object are sent to it as parameters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有的`after<<event>>`方法中，我们已经看到，如果驱动程序遇到任何异常，它们将不会被调用。在这种情况下，将调用`onException()`方法，并将可抛出对象和WebDriver对象作为参数传递给它。
- en: Unregistering EventListener with EventFiringWebDriver
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EventFiringWebDriver注销事件监听器
- en: 'Now, we have seen the different kinds of events that get triggered, and the
    `EventFiringWebDriver` class that notifies all of the listeners registered to
    it. If, at any point, you want one of your event listeners to stop listening from
    `EventFiringWebDriver`, you can do that by unregistering from that driver. The
    following API unregisters an event listener from a driver:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经看到了触发的事件的不同类型，以及通知所有注册监听器的 `EventFiringWebDriver` 类。如果你在任何时候想让你的某个事件监听器停止监听
    `EventFiringWebDriver`，你可以通过从该驱动器注销来实现。以下 API 从驱动器注销了一个事件监听器：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The parameter of the method should be the event listener that wants to opt out
    of getting event notifications.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法参数应该是想要退出接收事件通知的事件监听器。
- en: Performing accessibility testing
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行可访问性测试
- en: 'We can perform basic accessibility checks by using tools such as Google''s Accessibility
    Developer Tools ([https://github.com/GoogleChrome/accessibility-developer-tools](https://github.com/GoogleChrome/accessibility-developer-tools)).
    We can inject the `Google Accessibility testing library` in a web page and perform
    the `Accessibility Audit`. This can be done automatically every time `afterNavigatTo()`
    is called. In the following code example, we will inject the `axe_testing.js`
    file provided by the Google Accessibility Developer Tools and perform the audit,
    which will print a report on the console:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用诸如 Google 的可访问性开发者工具（[https://github.com/GoogleChrome/accessibility-developer-tools](https://github.com/GoogleChrome/accessibility-developer-tools)）等工具来执行基本的可访问性检查。我们可以在网页中注入
    `Google 可访问性测试库` 并执行 `可访问性审计`。这可以在每次调用 `afterNavigatTo()` 后自动执行。在下面的代码示例中，我们将注入
    Google 可访问性开发者工具提供的 `axe_testing.js` 文件并执行审计，这将打印报告到控制台：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The report is printed in the console, as shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 报告将按如下所示打印到控制台：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This report contains a collection of audit rules that check for common accessibility
    problems.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本报告包含了一组审计规则，用于检查常见的可访问性问题。
- en: Capturing page-performance metrics
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获页面性能指标
- en: Measuring and optimizing the client-side performance is essential for a seamless
    user experience, and this is critical for Web 2.0 applications using AJAX.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 测量和优化客户端性能对于无缝的用户体验至关重要，这对于使用 AJAX 的 Web 2.0 应用程序来说尤其关键。
- en: Capturing vital information, such as the time taken for page load, rendering
    of the elements, and the JavaScript code execution, will help in identifying the
    areas where performance is slow and optimizes the overall client-side performance.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获关键信息，例如页面加载时间、元素渲染和 JavaScript 代码执行时间，将有助于识别性能缓慢的区域，并优化整体客户端性能。
- en: '**Navigation Timing** is a W3C-Standard JavaScript API to measure performance
    on the web. The API provides a simple way to get accurate and detailed timing
    statistics natively for page navigation and load events. It is available on Internet
    Explorer 9, Google Chrome, Firefox, and WebKit-based browsers.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航计时** 是一个 W3C 标准 JavaScript API，用于测量网络上的性能。该 API 提供了一种简单的方法，可以原生地获取页面导航和加载事件的准确和详细的计时统计信息。它在
    Internet Explorer 9、Google Chrome、Firefox 和基于 WebKit 的浏览器上可用。'
- en: 'The API is accessed via the properties of the timing interface of the `window.performance`
    object using JavaScript. We will capture the page-load time every time we navigate
    to a page. This can be done by using `JavaScriptExecutor` to call `winodw.performance`
    in the `afterNavigateTo()` method in `IAmTheEventListener2.java`, as shown in
    the following code snippet:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 该 API 通过 `window.performance` 对象的时间接口属性使用 JavaScript 访问。我们将每次导航到页面时捕获页面加载时间。这可以通过在
    `IAmTheEventListener2.java` 的 `afterNavigateTo()` 方法中使用 `JavaScriptExecutor` 调用
    `window.performance` 来完成，如下面的代码片段所示：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As discussed in the previous code, the `window.performance` object provides
    us with the performance metric that is available within the `Browser Window object`.
    We need to use JavaScript to retrieve this metric. Here, we are collecting the `loadEventEnd`
    time and the `navigationEventStart` time, and calculating the difference between
    them, which will give us the page-load time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码中讨论的那样，`window.performance` 对象为我们提供了在 `Browser Window 对象` 中可用的性能指标。我们需要使用
    JavaScript 来检索这个指标。在这里，我们正在收集 `loadEventEnd` 时间和 `navigationEventStart` 时间，并计算它们之间的差异，这将给我们页面加载时间。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned about `EventFiringWebDriver` and `EventListeners`,
    and how they work together to make a developer's life easier by helping them to
    debug what is going on at each step while the test cases get executed. You also
    learned how to use WebDriver events to perform different types of testing on a
    page, such as accessibility and client-side performance checks. In the next [chapter](a1d063a0-5332-4970-9d11-61aad05ae4f3.xhtml),
    you will learn more about RemoteWebDriver for running tests on remote machines
    in distributed and parallel mode for Cross-Browser Testing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了关于`EventFiringWebDriver`和`EventListeners`的知识，以及它们如何协同工作，通过帮助开发者调试在测试用例执行过程中的每一步发生的情况，使开发者的生活变得更轻松。您还学习了如何使用WebDriver事件在页面上执行不同类型的测试，例如可访问性和客户端性能检查。在下一章中，您将学习更多关于远程WebDriver的知识，用于在分布式和并行模式下运行远程机器上的测试，以进行跨浏览器测试。
- en: Questions
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: You can listen to WebDriver events using `WebDriverEventListener` interface—
    True or False?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`WebDriverEventListener`接口来监听WebDriver事件——对还是错？
- en: How you can automatically clear an input field before calling the `sendKeys`
    method using `WebDriverEventListener`?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何使用`WebDriverEventListener`在调用`sendKeys`方法之前自动清除输入字段？
- en: Selenium supports accessibility testing— True or False?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium支持可访问性测试——对还是错？
- en: Further information
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接获取更多关于本章涵盖主题的信息：
- en: Find out more about the Navigation Timing API at [https://www.w3.org/TR/navigation-timing/](https://www.w3.org/TR/navigation-timing/)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.w3.org/TR/navigation-timing/](https://www.w3.org/TR/navigation-timing/)上了解更多关于导航时间API的信息
- en: Find more details on Google's Accessibility Developer Tools at [https://github.com/GoogleChrome/accessibility-developer-tools](https://github.com/GoogleChrome/accessibility-developer-tools)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com/GoogleChrome/accessibility-developer-tools](https://github.com/GoogleChrome/accessibility-developer-tools)上找到更多关于谷歌可访问性开发者工具的详细信息
