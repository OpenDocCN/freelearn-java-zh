- en: Exploring RemoteWebDriver
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 RemoteWebDriver
- en: 'So far, we have created our test cases and tried to execute them on various
    browsers. All of these tests were executed against the browsers that were installed
    on a local machine where the test cases reside. This may not be possible at all
    times. There is a high possibility that you may be working on Mac or Linux, but
    want to execute your tests on IE on a Windows machine. In this chapter, we will
    learn about the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了测试用例，并尝试在各个浏览器上执行它们。所有这些测试都是针对安装在测试用例所在本地机器上的浏览器执行的。这并不总是可能的。有很大可能性您可能正在使用
    Mac 或 Linux，但想在 Windows 机器上的 IE 上执行测试。在本章中，我们将学习以下主题：
- en: Executing test cases on a remote machine using `RemoteWebDriver`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `RemoteWebDriver` 在远程机器上执行测试用例
- en: A detailed explanation of the JSON wire protocol
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON 线协议的详细解释
- en: Introducing RemoteWebDriver
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 RemoteWebDriver
- en: '`RemoteWebDriver` is an implementation class of the `WebDriver` interface that
    a test-script developer can use to execute their test scripts via the `Selenium
    Standalone` server on a remote machine. There are two parts to `RemoteWebDriver`:
    a server and a client. Before we start working with them, let''s rewind and see
    what we''ve been doing.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`RemoteWebDriver`是`WebDriver`接口的实现类，测试脚本开发者可以使用它通过`Selenium 独立`服务器在远程机器上执行他们的测试脚本。`RemoteWebDriver`有两个部分：服务器和客户端。在我们开始使用它们之前，让我们回顾一下我们一直在做什么。'
- en: 'The following diagram explains what we''ve done so far:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表解释了我们到目前为止所做的工作：
- en: '![](img/30719c03-0e04-4716-9be2-69f48bed2798.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30719c03-0e04-4716-9be2-69f48bed2798.png)'
- en: 'The test script using WebDriver client libraries, Chrome Driver (or IE Driver
    or Gecko Driver for Firefox), and Chrome browser (or IE browser or Firefox browser)
    is sitting on the same machine. The browser is loading the web application, which
    may or may not be hosted remotely; anyway, this is outside the scope of our discussion.
    We will discuss different scenarios of test-script execution, as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 WebDriver 客户端库、Chrome 驱动程序（或 IE 驱动程序或 Firefox 的 Gecko 驱动程序）、Chrome 浏览器（或
    IE 浏览器或 Firefox 浏览器）的测试脚本位于同一台机器上。浏览器正在加载网络应用程序，该应用程序可能位于远程服务器上，也可能不是；无论如何，这超出了我们讨论的范围。我们将讨论以下测试脚本执行的不同场景：
- en: '![](img/9f9b2309-f26b-4929-ad9b-cd6e360623e4.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9f9b2309-f26b-4929-ad9b-cd6e360623e4.png)'
- en: 'The test script is located on a local machine, while the browsers are installed
    on a remote machine. In this scenario, `RemoteWebDriver` comes into the picture.
    As mentioned earlier, there are two components associated with `RemoteWebDriver`:
    the server and the client. Let''s start with the `Selenium Standalone server`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试脚本位于本地机器上，而浏览器安装在远程机器上。在这种情况下，`RemoteWebDriver`就派上用场。如前所述，与`RemoteWebDriver`相关联有两个组件：服务器和客户端。让我们从`Selenium
    独立服务器`开始。
- en: Understanding Selenium Standalone Server
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Selenium 独立服务器
- en: '`Selenium Standalone Server` is a component that listens on a port for various
    requests from a `RemoteWebDriver` client. Once it receives the requests, it forwards
    them to any of the following: Chrome Driver, IE Driver, or Gecko Driver for Firefox,
    whichever is requested by the `RemoteWebDriver` client.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`Selenium 独立服务器`是一个组件，它监听端口以接收来自`RemoteWebDriver`客户端的各种请求。一旦它收到请求，它将它们转发到以下任何一个：Chrome
    驱动程序、IE 驱动程序或 Firefox 的 Gecko 驱动程序，具体取决于`RemoteWebDriver`客户端的请求。'
- en: Downloading Selenium Standalone Server
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 Selenium 独立服务器
- en: Let's download `Selenium Standalone Server` and start running it. You can download
    it from [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/),
    but, for our purposes, let's download a specific version of it, as we are using
    WebDriver Version 3.12.0.  This server JAR should be downloaded to the remote
    machine on which the browsers are located. Also, make sure the remote machine
    has Java Runtime installed on it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载`Selenium 独立服务器`并开始运行它。您可以从[https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)下载它，但出于我们的目的，让我们下载特定版本的它，因为我们正在使用
    WebDriver 版本 3.12.0。此服务器 JAR 文件应下载到包含浏览器的远程机器上。同时，请确保远程机器上已安装 Java 运行时。
- en: Running the server
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行服务器
- en: 'Open your command-line tool on the remote machine and navigate to the location
    where you have downloaded the JAR file. Now, to start Selenium Standalone Server,
    execute the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程机器上打开您的命令行工具，导航到您已下载 JAR 文件的目录。现在，要启动 Selenium 独立服务器，请执行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows what you should see in your console:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您应该在控制台中看到的内容：
- en: '![](img/e9117392-b178-47a6-8963-4e363111fbf2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e9117392-b178-47a6-8963-4e363111fbf2.png)'
- en: 'Now the server has started and is listening on the `<remote-machine-ip>:4444`
    address for remote connections from the `RemoteWebDriver` client. The previously
    seen image (the second image in the *Introducing* *RemoteWebDriver* section) will
    appear as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务器已经启动并正在监听 `<remote-machine-ip>:4444` 地址以接收来自 `RemoteWebDriver` 客户端的远程连接。之前看到的图像（*介绍*
    *RemoteWebDriver* 部分的第二张图像）将如下所示：
- en: '![](img/d7c3976d-4f18-41cf-aad9-7ae16e47f3c0.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7c3976d-4f18-41cf-aad9-7ae16e47f3c0.png)'
- en: On the remote machine, Selenium Standalone Server will interface between the
    test script and the browsers, as shown in the preceding diagram. The test script
    will first establish a connection with Selenium Standalone Server that will forward
    the commands to the browser installed on the remote machine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程机器上，Selenium Standalone Server 将在测试脚本和浏览器之间进行接口，如图所示。测试脚本将首先与 Selenium Standalone
    Server 建立连接，该服务器将把命令转发到远程机器上安装的浏览器。
- en: Understanding the RemoteWebDriver client
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 RemoteWebDriver 客户端
- en: Now that we have our Selenium Standalone server up and running, it's time for
    us to create the `RemoteWebDriver` client. Fortunately, we don't have to do much
    to create a `RemoteWebDriver` client. It's nothing but the language-binding client
    libraries that serve as a `RemoteWebDriver` client. `RemoteWebDriver` will translate
    the test-script requests or commands to JSON payload and send them across to the
    `RemoteWebDriver` server using the JSON wire protocol.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动并运行了 Selenium Standalone 服务器，是时候我们创建 `RemoteWebDriver` 客户端了。幸运的是，我们不需要做太多来创建
    `RemoteWebDriver` 客户端。它只是作为 `RemoteWebDriver` 客户端的语言绑定客户端库。`RemoteWebDriver` 将将测试脚本请求或命令转换为
    JSON 负载，并通过 JSON 线协议将它们发送到 `RemoteWebDriver` 服务器。
- en: When you execute your tests locally, the WebDriver client libraries talk to
    the Chrome Driver, IE Driver, or Gecko Driver directly. Now when you try to execute
    your tests remotely, the WebDriver client libraries talk to `Selenium Standalone
    Server` and the server talks to either the Chrome Driver, the IE Driver, or the
    Gecko Driver for Firefox requested by the test script, using the `DesiredCapabilities`
    class. We will explore the `DesiredCapabilities` class in the next section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在本地执行测试时，WebDriver 客户端库会直接与 Chrome Driver、IE Driver 或 Gecko Driver 通信。现在当你尝试远程执行测试时，WebDriver
    客户端库会与 `Selenium Standalone Server` 通信，而服务器会根据测试脚本请求的 Chrome Driver、IE Driver
    或 Gecko Driver（用于 Firefox）与浏览器进行通信，使用 `DesiredCapabilities` 类。我们将在下一节中探讨 `DesiredCapabilities`
    类。
- en: Converting an existing test script to use the RemoteWebDriver server
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有测试脚本转换为使用 RemoteWebDriver 服务器
- en: 'Let''s take a test script that we have executed locally; that is, where the
    test scripts and the browser were on the same machine:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个我们在本地执行的测试脚本为例；也就是说，测试脚本和浏览器在同一台机器上：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding test script creates an instance of Chrome Driver and launches
    the Chrome browser. Now, let''s try to convert this test script to use `Selenium
    Standalone Server` that we started earlier. Before we do that, let''s see the
    constructor of `RemoteWebDriver`, which is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的测试脚本创建了一个 Chrome Driver 实例并启动了 Chrome 浏览器。现在，让我们尝试将此测试脚本转换为使用我们之前启动的 `Selenium
    Standalone Server`。在我们这样做之前，让我们看看 `RemoteWebDriver` 的构造函数，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The input parameters for the constructor include the address (hostname or IP)
    of `Selenium Standalone Server` running on the remote machine and the desired
    capabilities required for running the test (for example name of the browser and/or
    operating system). We will see these desired capabilities shortly.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数的输入参数包括远程机器上运行的 `Selenium Standalone Server` 的地址（主机名或 IP）以及运行测试所需的需求能力（例如浏览器名称和/或操作系统）。我们将在稍后看到这些需求能力。
- en: 'Now, let''s modify the test script to use `RemoteWebDriver`. Replace `WebDriver
    driver = new ChromeDriver();` with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改测试脚本以使用 `RemoteWebDriver`。将 `WebDriver driver = new ChromeDriver();`
    替换为以下代码：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have created a RemoteWebDriver instance that tries to connect to `http://10.172.10.1:4444/wd/hub`,
    where `Selenium Standalone Server` is running and listening for requests. Having
    done that, we also need to specify which browser your test case should get executed
    on. This can be done using the `DesiredCapabilities` instance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个尝试连接到 `http://10.172.10.1:4444/wd/hub` 的 RemoteWebDriver 实例，其中 `Selenium
    Standalone Server` 正在运行并监听请求。完成此操作后，我们还需要指定测试用例应在哪个浏览器上执行。这可以通过使用 `DesiredCapabilities`
    实例来完成。
- en: For this example, the IP used is 10.172.10.1\. However, in your case, it will
    be different. You need to obtain the IP of the machine where the Selenium Standalone
    Server is running and replace the example IP used in this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，使用的IP是10.172.10.1。然而，在您的案例中，它将是不同的。您需要获取Selenium Standalone Server运行的机器的IP地址，并替换本书中使用的示例IP。
- en: 'Before running tests, we need to restart the Selenium Standalone Server by
    specifying the path of ChromeDriver:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试之前，我们需要通过指定ChromeDriver的路径来重启Selenium Standalone Server。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the following test with `RemoteWebDriver` will launch the Chrome browser
    and execute your test case on it. So the modified test case will look as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`RemoteWebDriver`运行以下测试将启动Chrome浏览器并在其上执行您的测试用例。因此，修改后的测试用例将如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now execute this test script from your local machine to establish a connection
    between the `RemoteWebDriver` client and `Selenium Standalone Server`. The Server
    will launch the Chrome browser. The following is the output you will see in the
    console where the Server is running:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从您的本地机器执行此测试脚本，以在`RemoteWebDriver`客户端和`Selenium Standalone Server`之间建立连接。服务器将启动Chrome浏览器。以下是在服务器运行的控制台中将看到的输出：
- en: '![](img/6b54e3cf-5a6c-4f61-abac-8d6b778165a7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6b54e3cf-5a6c-4f61-abac-8d6b778165a7.png)'
- en: It says that a new session with the desired capabilities is being created. Once
    the session is established, a session ID will be printed to the console. At any
    point in time, you can view all of the sessions that are established with `Selenium
    Standalone Server` by navigating to the host or IP of the machine where the Selenium
    server is running `http://<hostnameOrIP>:4444/wd/hub`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示正在创建一个新的具有期望能力的会话。一旦建立会话，会话ID将被打印到控制台。在任何时候，您都可以通过导航到Selenium服务器运行的机器的宿主或IP地址`http://<hostnameOrIP>:4444/wd/hub`来查看所有与`Selenium
    Standalone Server`建立的会话。
- en: The Selenium Standalone Server, by default, listens to port number 4444\. We
    can change the default port by passing the `-port` argument.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Standalone Server默认情况下监听端口号4444。我们可以通过传递`-port`参数来更改默认端口。
- en: 'It will give the entire list of sessions that the server is currently handling.
    The screenshot of this is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给出服务器当前正在处理的会话的整个列表。以下是其截图：
- en: '![](img/cd32ba9e-6810-4a76-8226-ca4ddd3f1974.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cd32ba9e-6810-4a76-8226-ca4ddd3f1974.png)'
- en: This is a very basic portal that lets the test-script developer see all of the
    sessions created by the server and perform some basic operations on it, such as
    terminating a session, taking a screenshot of a session, loading a script to a
    session, and seeing all of the desired capabilities of a session. The following
    screenshot shows all of the default desired capabilities of our current session.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基础的门户，允许测试脚本开发者查看服务器创建的所有会话，并对它执行一些基本操作，例如终止会话、会话截图、将脚本加载到会话中，以及查看会话的所有期望能力。以下截图显示了当前会话的所有默认期望能力。
- en: 'You can see the popup by hovering over the **Capabilities** link, as shown
    in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过悬停在**能力**链接上查看弹出窗口，如下面的截图所示：
- en: '![](img/ff1d725e-48d5-4db2-9690-69e0f4cdb72e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ff1d725e-48d5-4db2-9690-69e0f4cdb72e.png)'
- en: 'Those are the default desired capabilities that are set implicitly by the server
    for this session. Now we have successfully established a connection between our
    test script, which is using a `RemoteWebDriver` client on one machine, and the
    Selenium Standalone Server on another machine. The original diagram of running
    the test scripts remotely is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是服务器为本次会话隐式设置的默认期望能力。现在我们已经成功地在我们的测试脚本（在一台机器上使用`RemoteWebDriver`客户端）和另一台机器上的Selenium
    Standalone Server之间建立了连接。远程运行测试脚本的原始图示如下：
- en: '![](img/69ede412-cc68-453c-894d-8d89bc552a16.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/69ede412-cc68-453c-894d-8d89bc552a16.png)'
- en: Using RemoteWebDriver for Firefox
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RemoteWebDriver进行Firefox测试
- en: Using the Firefox browser to execute our test scripts is similar to using the
    Chrome browser, except for a couple of variations in how `GeckoDriver` is launched.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firefox浏览器执行我们的测试脚本与使用Chrome浏览器类似，只是在`GeckoDriver`的启动方式上有一些变化。
- en: 'Let''s see this by changing the test script that we used for the Chrome browser
    to the following script, using `"firefox"`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将用于Chrome浏览器的测试脚本更改为以下脚本，使用`"firefox"`来实现这一点：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before you try to execute this code, restart `Selenium Standalone Server` to
    use `GeckoDriver`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试执行此代码之前，请重启`Selenium Standalone Server`以使用`GeckoDriver`：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Try executing the preceding test script now, and you should see the Firefox
    browser getting launched and executing your test commands. `Selenium Standalone
    Server` has started `GeckoDriver`, created a connection to it, and started executing
    the test-script commands.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试执行前面的测试脚本，你应该看到Firefox浏览器被启动并执行你的测试命令。`Selenium Standalone Server`已启动`GeckoDriver`，与其建立了连接，并开始执行测试脚本命令。
- en: Using RemoteWebDriver for Internet Explorer
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RemoteWebDriver进行Internet Explorer测试
- en: For executing tests on the Internet Explorer driver, the steps are similar to
    what we did with the Chrome and Firefox browsers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在Internet Explorer驱动程序上执行测试，步骤与我们使用Chrome和Firefox浏览器所做的是相似的。
- en: 'Let''s see this by changing the test script that we used for the Chrome or
    Firefox browser to the following script, using `"internet explorer"`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将用于Chrome或Firefox浏览器的测试脚本更改为以下脚本，使用`"internet explorer"`来查看这一点：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before you try to execute this code, restart `Selenium Standalone Server` to
    use `InternetExplorerDriver`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试执行此代码之前，请重新启动`Selenium Standalone Server`以使用`InternetExplorerDriver`：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Try executing the preceding test script now, and you should see the Internet
    Explorer browser getting launched and executing your test commands. `Selenium
    Standalone Server` has started `InternetExplorerDriver`, created a connection
    with it, and started executing the test-script commands.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试执行前面的测试脚本，你应该看到Internet Explorer浏览器被启动并执行你的测试命令。`Selenium Standalone Server`已启动`InternetExplorerDriver`，与其建立了连接，并开始执行测试脚本命令。
- en: Understanding the JSON wire protocol
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解JSON线协议
- en: In many places, we have mentioned that WebDriver uses the JSON wire protocol
    to communicate between client libraries and different driver (that is, Chrome
    Driver, IE Driver, Gecko Driver, and so on) implementations. In this section,
    we will see exactly what it is and which different JSON APIs a client library
    should implement to talk to the drivers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多地方，我们提到WebDriver使用JSON线协议在客户端库和不同的驱动程序（即Chrome Driver、IE Driver、Gecko Driver等）实现之间进行通信。在本节中，我们将确切了解它是什么，以及客户端库应该实现哪些不同的JSON
    API来与驱动程序通信。
- en: '**JavaScript Object Notation (JSON)** is used to represent objects with complex
    data structures. It is used primarily to transfer data between a server and a
    client on the web. It has become an industry standard for various REST web services,
    offering a strong alternative to XML.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript对象表示法（JSON）**用于表示具有复杂数据结构的对象。它主要用于在Web服务器和客户端之间传输数据。它已成为各种基于REST的Web服务的行业标准，为XML提供了一种强大的替代方案。'
- en: 'A sample JSON file, saved as a `.json` file, will look as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例JSON文件，保存为`.json`文件，将如下所示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A client can send a person's details to a server in the preceding JSON format,
    which the server can parse, and then create an instance of the person object for
    use in its execution. Later, the response can be sent back by the server to the
    client in the JSON format, the data of which the client can use to create an object
    of a class. This process of converting an object's data into the JSON format and
    JSON-formatted data into an object is called **serialization** and **de-serialization**,
    respectively, which is quite common in REST-based web services.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端可以将一个人的详细信息以先前的JSON格式发送到服务器，服务器可以解析它，然后创建一个用于其执行的人对象实例。稍后，服务器可以将响应以JSON格式发送回客户端，客户端可以使用这些数据创建一个类的对象。将对象数据转换为JSON格式以及将JSON格式数据转换为对象的过程分别称为**序列化**和**反序列化**，这在基于REST的Web服务中相当常见。
- en: 'WebDriver uses the same approach to communicate between client libraries (language
    bindings) and drivers, such as Firefox Driver, IE Driver, and Chrome Driver. Similarly,
    the `RemoteWebDriver` client and `Selenium Standalone Server` use the JSON wire
    protocol to communicate among themselves. But all of these drivers use it under
    the hood, hiding all the implementation details from us and making our lives simpler.
    The list of APIs for various actions that we can take on a web page is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriver使用相同的方法在客户端库（语言绑定）和驱动程序之间进行通信，例如Firefox Driver、IE Driver和Chrome Driver。同样，`RemoteWebDriver`客户端和`Selenium
    Standalone Server`使用JSON线协议相互通信。但是，所有这些驱动程序都在幕后使用它，隐藏了所有实现细节，使我们的生活变得更简单。以下是我们可以在网页上执行的各种操作的API列表：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The complete documentation is available at [https://code.google.com/p/selenium/wiki/JsonWireProtocol](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol).
    The client libraries will translate your test-script commands into the JSON format
    and send the requests to the appropriate WebDriver API. The WebDriver will parse
    these requests and take necessary actions on the web page. Let's see that as an
    example. Suppose your test script has this code: `driver.get("http://www.google.com");`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的文档可在[https://code.google.com/p/selenium/wiki/JsonWireProtocol](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol)找到。客户端库会将你的测试脚本命令转换为
    JSON 格式，并发送请求到相应的 WebDriver API。WebDriver 将解析这些请求，并在网页上采取必要的行动。让我们以一个例子来看一下。假设你的测试脚本有如下代码：`driver.get("http://www.google.com");`。
- en: The client library will translate that into JSON by building a JSON payload
    (JSON document) and post the request to the appropriate API. In this case, the
    API that handles the `driver. get(URL)` method is `/session/:sessionId/url`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端库将通过构建 JSON 有效载荷（JSON 文档）并将其发布到适当的 API 来将此转换为 JSON。在这种情况下，处理 `driver.get(URL)`
    方法的 API 是 `/session/:sessionId/url`。
- en: 'The following code shows what happens in the client library layer behind the
    scenes before the request is sent to the driver; the request is sent to the RemoteWebDriver
    server running on 10.172.10.1:4444:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了在请求发送到驱动程序之前，客户端库层幕后发生的情况；请求被发送到运行在 10.172.10.1:4444 的 RemoteWebDriver
    服务器：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Selenium Standalone Server` will forward that request to the driver; the driver
    will execute the test-script commands that arrive in the preceding format on the
    web application, under the test that is loaded in the browser.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Selenium Standalone Server` 将将该请求转发给驱动程序；驱动程序将在浏览器中加载的测试下，以先前格式执行到达的测试脚本命令。'
- en: 'The following diagram shows the dataflow at each stage:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了每个阶段的数据流：
- en: '![](img/533c2ac8-3e20-4933-b012-db2dfac4bc58.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图表](img/533c2ac8-3e20-4933-b012-db2dfac4bc58.png)'
- en: 'The preceding diagram shows the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示了以下内容：
- en: 'The first stage is communication between the test script and the client library.
    The data or command that flows between them is a call to the `get()` method of
    the driver: `driver.get("http://www.google.com");`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一阶段是测试脚本和客户端库之间的通信。在它们之间流动的数据或命令是对驱动程序 `get()` 方法的调用：`driver.get("http://www.google.com");`。
- en: The client library, as soon as it receives the preceding command, will convert
    it into the JSON format and communicate with `Selenium Standalone Server.`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端库在接收到上述命令后，会将其转换为 JSON 格式，并与 `Selenium Standalone Server` 进行通信。
- en: Next, `Selenium Standalone Server` forwards the JSON payload request to the
    Chrome Driver.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，`Selenium Standalone Server` 将 JSON 有效载荷请求转发给 Chrome Driver。
- en: The Chrome Driver will communicate with the Chrome browser natively, and then
    the browser will send a request for the asked URL to load.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome Driver 将与 Chrome 浏览器进行原生通信，然后浏览器将发送请求以加载所需的 URL。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about `RemoteWebDriver` and how to execute test
    scripts remotely on a different machine using `Selenium Standalone Server` and
    the `RemoteWebDriver` client. This enables Selenium WebDriver tests to be executed
    on remote machines with different browser and OS combinations. We also looked
    at the JSON wire protocol and how client libraries work behind the scenes to send
    and receive requests and responses to and from the drivers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 `RemoteWebDriver` 以及如何使用 `Selenium Standalone Server` 和 `RemoteWebDriver`
    客户端在另一台机器上远程执行测试脚本。这使得 Selenium WebDriver 测试可以在具有不同浏览器和操作系统组合的远程机器上执行。我们还探讨了 JSON
    通信协议以及客户端库如何在幕后发送和接收请求和响应。
- en: In the next chapter, we will extend the usage of Selenium Standalone Server
    and RemoteWebDriver to create a Selenium Grid for cross-browser and distributed
    testing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展 Selenium Standalone Server 和 RemoteWebDriver 的使用，以创建一个用于跨浏览器和分布式测试的
    Selenium Grid。
- en: Questions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: With Selenium, we can execute tests on remote machine(s)— true or false
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Selenium，我们可以在远程机器上执行测试——对还是错？
- en: Which driver class is used to run tests on a remote machine?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于在远程机器上运行测试的驱动程序类是哪一个？
- en: Explain desired capabilities.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释期望能力。
- en: What protocol is used between the Selenium test and Selenium Standalone Server?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Selenium 测试和 Selenium Standalone Server 之间使用的是哪种协议？
- en: What is the default port used by Selenium Standalone Server?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium Standalone Server 使用的是默认端口是什么？
- en: Further information
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following link for more information about the topics
    covered in this chapter:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看以下链接以获取有关本章涵盖主题的更多信息：
- en: Selenium WebDriver W3C specification explains the WebDriver Protocol and all
    the endpoints: [https://www.w3.org/TR/webdriver/](https://www.w3.org/TR/webdriver/)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium WebDriver W3C 规范解释了 WebDriver 协议以及所有端点：[https://www.w3.org/TR/webdriver/](https://www.w3.org/TR/webdriver/)
