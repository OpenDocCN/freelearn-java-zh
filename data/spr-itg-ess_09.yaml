- en: Chapter 9. Monitoring, Management, and Scaling Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。监控、管理和扩展
- en: 'In the previous chapter, we covered one of the most important aspects—testing.
    We will end our discussion on Spring Integration by covering the following topics
    in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们覆盖了最重要的方面之一——测试。我们将通过覆盖以下主题来结束对Spring Integration的讨论：
- en: Monitoring and management
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和管理
- en: Scaling up
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展
- en: As we have witnessed across the chapters, enterprise systems are disparate,
    disconnected, and prone to failure. One important aspect of enabling communication
    across them is the ability to monitor what went wrong, which of the components
    are overloaded, and what have been the vital stats of communication—this all will
    help in improving the reliability and efficiency of the systems. The Spring framework
    provides decent support for monitoring and management, let's discuss how it can
    be leveraged.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在各章中见证的那样，企业系统是异构的、脱节的，并且容易失败。使它们之间能够通信的一个重要方面是能够监控出了什么问题、哪些组件过载以及通信的关键统计信息——这将有助于提高系统的可靠性和效率。Spring框架为监控和管理提供了相当的支持，让我们讨论如何利用它。
- en: Monitoring and management
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和管理
- en: There are multiple ways of monitoring and managing operations; for example,
    the most common way is to use Java's JMX support, another option is to invoke
    commands remotely, or monitor and log events as they occur—let's cover the most
    commonly used method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和管理操作有多种方法；例如，最常见的方法是使用Java的JMX支持，另一种选择是远程调用命令，或者监控和记录事件的发生——让我们覆盖最常用的方法。
- en: JMX support
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JMX支持
- en: '**JMX,** which is short for **Java Management Extensions**, does not need an
    introduction—it''s a standard way for remote monitoring of applications. Any application
    can provide implementation of MBeans and then they can be queried to get exposed
    management information. Spring Integration provides a standard component, which
    can be used to monitor channels, adapters, and other available components. Standard
    JMX can be extended to get more specific information.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**JMX**，是**Java管理扩展**的缩写，不需要介绍——它是远程监控应用程序的标准方式。任何应用程序都可以提供MBean的实现，然后可以查询以获取暴露的管理信息。Spring
    Integration提供了一个标准组件，可以用来监控通道、适配器和其他可用组件。标准的JMX可以扩展以获取更具体的信息。'
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Before we can use JMX support from Spring Integration, we need to add namespace
    declarations and maven dependencies:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用Spring Integration的JMX支持之前，我们需要添加名称空间声明和maven依赖项：
- en: '**NameSpace support**: This can be added using the following code snippet:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称空间支持**：这可以通过以下代码片段添加：'
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Maven dependency**: This can be added using the following code snippet:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven依赖**：这可以通过以下代码片段添加：'
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Initializing the server**: Traditionally, in Java/Spring applications, we
    need to write code to start the platform MBean server, and export our MBeans,
    but Spring provides tags to achieve the same tasks. To create and start an MBean
    server, just use the following line of code:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化服务器**：在传统的Java/Spring应用程序中，我们需要编写代码来启动平台MBean服务器，并导出我们的MBeans，但Spring提供了标签来实现相同的任务。要创建和启动一个MBean服务器，只需使用以下代码行：'
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For exporting the defined MBeans, the following line of code is sufficient:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了导出定义的MBeans，以下代码行就足够了：
- en: '[PRE3]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Management annotations**: The Spring framework exposes some annotation, which
    can be used to mark components that will be managed or will help in management
    and monitoring. For example, `@ManagedResource` indicates a class participating
    in management and monitoring, while `@ManagedAttribute` and `@ManagedOperation`
    indicate a member level participation, respectively, for class attribute and operation.
    Enabling `<context:mbean-export/>` will scan and expose these beans and management
    nodes. Let''s write a sample MBean and export it, we will use this for our examples:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理注解**：Spring框架暴露了一些注解，可以用来标记将被管理或有助于管理和监控的组件。例如，`@ManagedResource`表示参与管理和监控的类，而`@ManagedAttribute`和`@ManagedOperation`分别表示类属性和操作的成员级别参与。启用`<context:mbean-export/>`将扫描并导出这些bean和管理节点。让我们写一个示例MBean并导出它，我们将在示例中使用它：'
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Due to the annotations used, this class will be exported as MBean. Additionally,
    this class implements `NotificationPublisherAware`, which can be used to send
    notifications. We will see its usage in the next example.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于使用了这些注解，这个类将被作为MBean导出。此外，这个类实现了`NotificationPublisherAware`，可以用来发送通知。我们将在下一个示例中看到它的使用。
- en: '**JConsole**: To connect and monitor JMX beans, the easiest way is to use `Jconsole`.
    It comes bundled with JDK—look for it at `JDK_INSTALLATION_PATH/bin/Jconsole.exe`.
    By default, JConsole will select a random port, but to have explicit control over
    the ports of JMX, start the spring integration application with the following
    parameters:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JConsole**：要连接和监控JMX bean，最简单的方法是使用`Jconsole`。它随JDK一起提供——在`JDK_INSTALLATION_PATH/bin/Jconsole.exe`查找它。默认情况下，JConsole将选择一个随机端口，但要对JMX端口进行明确控制，请使用以下参数启动Spring
    Integration应用程序：'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The notification listening channel adapter
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通知监听通道适配器
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s look at the components used:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用的组件：
- en: '`int-jmx:notification-listening-channel-adapter`: This is the namespace support
    for the notification listening channel adapter'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int-jmx:notification-listening-channel-adapter`：这是通知监听通道适配器的命名空间支持。'
- en: '`channel`: This is the channel on which the received notification will be put
    as a message'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`channel`：这是接收到的通知将被作为消息放入的通道。'
- en: '`object-name`: This is the name of the MBean, which publishes notifications
    for this adapter'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object-name`：这是发布通知的MBean的名称。'
- en: 'To test this adapter, follow these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个适配器，请按照以下步骤操作：
- en: 'Load the configuration context:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载配置上下文：
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Start `Jconsole` and connect to `FeedsExample`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Jconsole`并连接到`FeedsExample`。
- en: '`Jconsole` will list the methods and attributes exposed by `TestMBean`.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Jconsole`将列出`TestMBean`暴露的方法和属性。'
- en: Invoke add operation, which results in `Testbean` sending a notification.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用add操作，导致`Testbean`发送一个通知。
- en: The payload will be put on the `listenForNotification` channel.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 负载将被放在`listenForNotification`通道上。
- en: 'Let''s write a small class that can trigger the preceding code snippet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个可以触发前面代码段的小类：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The class of the preceding code snippet is pretty simple; it loads the context,
    gets the reference of a channel, uses the Spring Integration support class `MessageBuilder`
    to build a payload, and then drops it on the channel. As soon as a message is
    put on to this channel, an event will be generated and sent across to subscribers.
    A wait has been introduced to allow some time for `Jconsole` to connect.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码段类的很简单；它加载上下文，获取通道的引用，使用Spring Integration支持类`MessageBuilder`构建负载，然后将其放在通道上。一旦消息放在这个通道上，将生成一个事件并发送给订阅者。引入了等待以允许`Jconsole`连接一些时间。
- en: The attribute polling channel adapter
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性轮询通道适配器
- en: 'As the name suggests, it polls for an attribute that is managed by MBean. The
    attribute name that needs to be polled and the object name of MBean that encapsulates
    the attribute are required. The following code is a quick sample configuration
    of the attribute polling channel adapter:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，它轮询由MBean管理的属性。需要轮询的属性名称和包含属性的MBean对象名称是必需的。以下代码是属性轮询通道适配器的快速示例配置：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding configuration polls the `ManagedData` attribute of `TestMbean`.
    If the attribute value changes, the changed value is put on the channel. We can
    have a simple service, given in the following line of code, activate it for testing:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置轮询`TestMbean`的`ManagedData`属性。如果属性值发生变化，变化值将被放在通道上。我们可以有一个简单的服务，如以下代码行所示，为其提供测试：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The tree polling channel adapter
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树轮询通道适配器
- en: 'The tree polling channel adapter queries the JMX tree itself and sends a payload,
    which is the graph of the MBean object. The graph can be further refined using
    a query—let''s write the following sample configuration:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 树轮询通道适配器本身查询JMX树并发送负载，负载是MBean对象的图形。我们可以使用查询进一步细化图形——让我们编写以下示例配置：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can use the following code snippet to trigger the preceeding adapter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码段来触发前面的适配器：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The operation invoking outbound gateway
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用出站网关的操作
- en: 'As usual, `Gateway` is used to make a response available for further processing—in
    this case, after invoking the operation, a response will be put back on `replychannel`
    for further processing, as done in the following lines of code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，`Gateway`用于将响应供进一步处理——在这种情况下，在调用操作后，响应将放回`replychannel`以供进一步处理，如下代码行所示：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A simple service activator can be plugged in to validate the reslts returned
    by the gateway.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的服务激活器可以插入以验证网关返回的结果。
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The MBean exporter
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MBean`导出器'
- en: 'What about the standard spring integration components: `MessageChannels`, gateways,
    and others? Well, they can be exposed for monitoring with the following single
    line of configuration:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么标准Spring集成组件呢：`MessageChannels`、网关和其他组件？嗯，它们可以通过以下单行配置暴露出来以供监控：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s quickly look at the elements used:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下所使用的元素：
- en: '`default-domain`: This is optional and if left blank, `org.springframework.integration`
    will be used as the default domain'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default-domain`：这是可选的，如果留空，将使用`org.springframework.integration`作为默认域'
- en: '`server`: This is the reference of `mbeanServer` created using `<context:mbean-server/>`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server`：这是使用`<context:mbean-server/>`创建的`mbeanServer`的引用'
- en: 'Before closing the discussion on JMX, let''s look at a snapshot of JConsole.
    Here is the screenshot of the custom MBeans and listeners, which we have exposed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束JMX的讨论之前，让我们看看JConsole的快照。以下是我们所暴露的自定义MBeans和监听器的屏幕截图：
- en: '![The MBean exporter](img/00015.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![MBean导出器](img/00015.jpeg)'
- en: 'A screenshot showing all the components of Spring Integration, which we have
    defined in our application, is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们定义在应用程序中的Spring Integration所有组件的屏幕截图：
- en: '![The MBean exporter](img/00016.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![MBean导出器](img/00016.jpeg)'
- en: 'We can observe two aspects:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到两个方面：
- en: The Spring Integration package that lists all spring integration components
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Integration包，列出了所有的Spring Integration组件
- en: The feeds example that exposes user-defined MBeans
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露用户定义MBean的Feeds示例
- en: Properties and values of these adapters are pretty self-explanatory, I will
    leave it to you to explore these further.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些适配器的属性和值是非常直观的，我会留给你们去进一步探索这些。
- en: Tracking the message
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪消息
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once this is added, all the components through which this message passes (provided
    that the components have an `id` tag) have an audit message appended. Let''s take
    the following example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了这个，所有这条消息传递过的组件（假设这些组件有一个`id`标签）都会添加一个审计消息。让我们看以下的例子：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this code sample, we have declared `<int:message-history/>` at the start.
    Also, notice that the next two components `notifListener` and `publishListener`
    have an ID tag. With this configuration in place, a metadata will be added to
    the message the moment it passes through these components.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码样本中，我们在开始处声明了`<int:message-history/>`。同时，注意下一个组件`notifListener`和`publishListener`有一个ID标签。有了这个配置，当消息通过这些组件时，会立即添加元数据。
- en: Wire tap
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线路窃听
- en: 'This is extremely simple—it''s an interceptor that can be configured with any
    channel and it will "peek" into all messages going through the channel. This can
    be used for the purposes of debugging, logging critical information, and so on.
    Let''s add an interceptor to the channel that is listening for the monitoring
    events:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单——它是一个拦截器，可以配置在任何通道上，并且会“窥视”通过该通道的所有消息。这可以用于调试、记录关键信息等。让我们在监听监控事件的通道上添加一个拦截器：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After adding these configurations, all the messages passing through this channel
    will be logged.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些配置后，通过这个通道的所有消息都将被记录。
- en: Control bus
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制总线
- en: 'We have elements in spring integration that are being used for application
    level messaging. How about using the same system to trigger some action? The idea
    behind control bus is exactly the same—we can define the channel and then, based
    on the payload on that channel, it can invoke management operations. Let''s look
    at an example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Spring Integration中有用于应用程序级消息的元素。那么使用同样的系统来触发一些动作怎么样？控制总线的背后的想法正是如此——我们可以定义通道，然后，基于该通道上的载荷，它可以调用管理操作。让我们看一个例子：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A class to send a control message to this bus is given in the following lines
    of code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面几行代码给出了向此总线发送控制消息的一个类：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With this, let's wrap up our discussion on management and monitoring. In the
    next section, we will pick one of the most important aspects of application design—scalability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们结束管理和监控的讨论。在下一节中，我们将探讨应用程序设计的一个重要方面——可扩展性。
- en: Scaling up
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展
- en: 'Scalability of a system is one of the most important non-functional requirements.
    As we know, there are basically two ways to scale a system: vertical scaling and
    horizontal scaling. **Vertical** **scaling** refers to adding more processing
    power to an existing system—if you are running out of memory, add memory; if CPU
    cycles are getting short, add some more cores and or make other changes. Not much
    of a challenge! On the other hand, **horizontal scaling** refers to adding more
    physical nodes, handling requests in a distributed way, adding redundancy at DB,
    and message broker components. Obviously, this needs a proper thought-through
    design. Let''s take a couple of ways that can be used to scale Spring applications.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的可扩展性是最重要的非功能性需求之一。正如我们所知，扩展系统基本上有两种方式：垂直扩展和水平扩展。**垂直扩展**指的是向现有系统添加更多的处理能力——如果你内存不足，增加内存；如果CPU周期变短，增加一些核心或进行其他更改。挑战不大！另一方面，**水平扩展**指的是添加更多的物理节点，以分布式方式处理请求，在DB和消息代理组件中增加冗余。显然，这需要一个经过深思熟虑的设计。让我们看看可以用来扩展Spring应用程序的几种方法。
- en: Threading
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: 'The most common way to scale a system is to introduce parallel processing.
    However, before you learn how to do this, let''s be aware of the following pitfalls:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展系统最常见的方法是引入并行处理。然而，在你学习如何做到这一点之前，让我们注意以下陷阱：
- en: It should be evaluated whether creating a thread will help
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该评估创建线程是否会有帮助
- en: Threads should be created as per machine capability
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应根据机器能力创建线程
- en: We should consider latency across other endpoints
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该考虑其他端点的延迟
- en: Threads should be cleaned up
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该清理线程
- en: 'So let''s start with an example. We have discussed FTP, if thousands of files
    are available and we want to process them in parallel, how can this be achieved?
    We can use `TaskExecutors`, as shown in the following example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们从一个例子开始。我们讨论了FTP，如果有成千上万的文件可供处理，并且我们希望并行处理它们，这该如何实现？我们可以使用`TaskExecutors`，如下例所示：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So what is going on in the preceding code? First, we define a task executor—nothing
    specific to spring integration. You can see that the `org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor`
    class from the Spring framework is used. Then, we attached this with the poller
    on the service activator. Now a pool of service will be created, which will process
    files on the input channel in parallel.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那么前面的代码中发生了什么？首先，我们定义了一个任务执行器——与Spring集成无关。你可以看到这里使用了Spring框架中的`org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor`类。然后，我们将这个与服务激活器的轮询器关联起来。现在将创建一个服务池，它将并行处理输入通道上的文件。
- en: 'As obvious as it can be, Spring Integration leverages Spring framework''s support
    for executors. The preceding code uses the bean directly, but Spring has provided
    namespace support as well:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见，Spring Integration利用了Spring框架对执行器的支持。前面的代码直接使用了bean，但Spring也提供了命名空间支持：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The underlying abstraction is `org.springframework.core.task.TaskExecutor`.
    Whenever a task needs to be executed, it is submitted to the task executor; it
    is the task executor''s job to allocate and de-allocate threads for the task.
    Let''s take the case of the poller from the preceding example, if the elements
    on the pollable channel are stateless and can be processed concurrently, we can
    use an executor there:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 底层抽象是`org.springframework.core.task.TaskExecutor`。每当需要执行一个任务时，它会被提交给任务执行器；分配和回收线程是任务执行器的职责。让我们以前面示例中的轮询器为例，如果轮询通道上的元素是无状态的且可以并发处理，我们可以在那里使用执行器：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we have a task executor that maintains an underlying pool of threads, then
    we can specify the maximum threads to be maintained, keeping in view the physical
    resource limitation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个任务执行器来维护一个底层线程池，那么我们可以指定要维护的最大线程数，同时考虑到物理资源限制：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Scaling the state
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爬取状态
- en: Concurrency will work when there is no state; what about the use cases where
    we want to scale but at the same time managing the state is mandatory? For example,
    if the payload is too big, will we wait for all the payloads to be processed,
    holding the consumers downward? In [Chapter 7](part0061_split_000.html#page "Chapter 7. Integration
    with Spring Batch"), *Integration with Spring Batch*, we mentioned that it is
    possible to trigger the download and then wait for an event that the download
    has been completed; at that stage, the consumer will kick-in. Similarly, we have
    some approaches that we can leverage; in fact, we have already covered these in
    an earlier chapter so I will just touch upon leveraging persistent store for scaling
    state.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有状态时，并发工作；那么，有哪些用例我们希望在扩展的同时管理状态是强制性的呢？例如，如果载荷太大，我们会等待所有载荷被处理，同时阻塞消费者吗？在[第7章](part0061_split_000.html#page
    "Chapter 7. Integration with Spring Batch")，*与Spring Batch集成*中，我们提到可以触发下载，然后等待下载完成的event；在那时，消费者将启动。同样，我们有一些可以利用的方法；实际上，我们在之前的章节中已经介绍了这些内容，所以我将简要介绍如何利用持久存储来扩展状态。
- en: Message store
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息存储
- en: As the name suggests, we can store the messages temporarily until some criteria
    is met. For example, if you remember, Aggregator is a spring integration component
    that correlates and temporarily stores the messages until the completion criteria
    is satisfied. A similar concept can be used for scaling where the task can be
    held aside and only processed when all other coordinating members are available.
    Let's take an example of feeds, some feeds may have pictures associated. The text
    part will be delivered immediately while the picture delivery may take a lot of
    time. We can configure aggregator so that it releases the messages when all of
    the parts have arrived. We already covered how to do this in [Chapter 5](part0044_split_000.html#page
    "Chapter 5. Message Flow"), *Message Flow*!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名字 suggests，我们可以暂时存储消息，直到满足某些条件。例如，如果你还记得，Aggregator是Spring Integration的一个组件，它关联并暂时存储消息，直到完成条件满足。类似的概念可以用于扩展，其中任务可以暂时搁置，只有当所有其他协调成员都可用时才处理。让我们以一个feed的例子来说明，有些feed可能附带图片。文本部分将立即交付，而图片交付可能需要很长时间。我们可以配置聚合器，当所有部分到达时释放消息。我们已经在[第5章](part0044_split_000.html#page
    "Chapter 5. Message Flow")，*消息流*中介绍了如何做到这一点！
- en: Claim check
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 收据
- en: The concept is very simple, instead of waiting for all the components to arrive,
    store the part at some known location and have a pointer to it. When the last
    chunk arrives, "claim" all other parts using the pointer. Obviously, this will
    apply where we can break the payloads in independent units and the system can
    be made aware of the final packet arrival. Once implemented, components down the
    processing chain will get the package only when all of their parts are available—they
    do not have to wait or be blocked for the duration of complete packet arrival.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念非常简单，不是等待所有组件到达，而是在某个已知位置存储一部分，并有一个指向它的指针。当最后一个块到达时，使用指针“认领”所有其他部分。显然，这适用于我们可以将有效载荷分解为独立单元并且系统可以知道最终数据包到达的情况。一旦实现，下游组件只有在所有部分都可用时才会收到数据包——它们不必等待或被阻塞以完成数据包的到达。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we glanced through monitoring and management aspects of the
    spring integration framework such as how we can keep an eye on implicit and user-defined
    integration components, how we can send and receive an event and invoke an operation,
    and many other aspects. We also covered how threads can be used to scale the application
    and a couple of ways to scale the state. This brings us to the end of our theoretical
    journey. In the next chapter; we will write an end-to-end application and finish
    off our spring integration journey!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要了解了Spring Integration框架的监控和管理方面，例如我们如何关注隐式和用户定义的集成组件，如何发送和接收事件并执行操作，还有许多其他方面。我们还介绍了如何使用线程来扩展应用程序以及几种扩展状态的方法。这使得我们的理论之旅告一段落。在下一章中，我们将编写一个端到端的应用程序，结束我们的Spring
    Integration之旅！
