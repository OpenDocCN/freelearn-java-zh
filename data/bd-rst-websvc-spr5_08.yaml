- en: Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Performance is considered a primary criterion when it comes to RESTful web services
    in an application. This chapter will focus mainly on how we can improve the performance
    in our application and reduce the response time. Though performance optimization
    techniques can be applied in different layers of web applications, we will talk
    about the RESTful (web) layer. The remaining performance optimization techniques
    will be discussed in [Chapter 11](c3ef97e3-fbad-4b9e-b7f8-91c6d3d6c6f0.xhtml),
    *Scaling*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，性能被认为是RESTful Web服务的主要标准。本章将主要关注如何改善应用程序的性能并减少响应时间。尽管性能优化技术可以应用在Web应用程序的不同层，我们将讨论RESTful（Web）层。其余的性能优化技术将在[第11章]（c3ef97e3-fbad-4b9e-b7f8-91c6d3d6c6f0.xhtml）*扩展*中讨论。
- en: 'The following topics will be discussed in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: HTTP compression
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP压缩
- en: HTTP caching and HTTP cache control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP缓存和HTTP缓存控制
- en: Cache implementation in the REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在REST API中的缓存实现
- en: Using HTTP If-Modified-Since headers and ETags
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP If-Modified-Since标头和ETags
- en: HTTP compression
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP压缩
- en: In order to get content quickly from a REST service, data can be compressed
    and sent over protocols such as HTTP. While compressing data, we will have to
    follow some encoding format, so the same format will be applied on the receiver
    side.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从REST服务中快速获取内容，数据可以被压缩并通过HTTP等协议发送。在压缩数据时，我们必须遵循一些编码格式，因此接收方将应用相同的格式。
- en: Content negotiation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容协商
- en: While requesting a resource in the server, the client will have many options
    to receive the content in various representations. For example, DOC/PDF is the
    data type representation. Turkish or English is the language representation, where
    the server can send the resource in a particular language. There must be some
    agreement between the server and the client about which format the resource will
    be accessed in, such as language, data type, and so on. The process is called
    **content negotiation**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求服务器的资源时，客户端将有许多选项来接收各种表示的内容。例如，DOC/PDF是数据类型表示。土耳其语或英语是语言表示，服务器可以以特定语言发送资源。服务器和客户端之间必须就资源将以哪种格式访问达成一致，例如语言、数据类型等。这个过程称为**内容协商**。
- en: 'Here, we will talk about two different content negotiation mechanisms: server-driven
    and agent-driven mechanisms. Before moving on to these mechanisms, we will talk
    about Accept-Encoding and Content-Encoding, as they are important.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论两种不同的内容协商机制：服务器驱动和代理驱动机制。在继续讨论这些机制之前，我们将讨论Accept-Encoding和Content-Encoding，因为它们很重要。
- en: Accept-Encoding
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受编码
- en: The client will tell the server about which compression algorithm(s) it can
    receive. The most common types of encoding are `gzip` and `deflate`. While requesting
    the server, the client will share encoding types in the request headers. Accept-Encoding
    will be used for such purposes. Simply put, the client will say, "I will accept
    only the mentioned compression formats" to the server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端将告诉服务器它可以接收哪种压缩算法。最常见的编码类型是`gzip`和`deflate`。在请求服务器时，客户端将在请求标头中共享编码类型。接受编码将用于此类目的。简而言之，客户端会告诉服务器，“我只接受提到的压缩格式”。
- en: 'We will see sample `Accept-Encoding` as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下示例`Accept-Encoding`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding header, the client says that it can accept only `gzip` or `deflate`
    in the response.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的标头中，客户端表示它只能接受响应中的`gzip`或`deflate`。
- en: 'Other possible options are mentioned as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可能的选项如下所述：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can see the `compress` value followed by `q=0.5`, which means the quality
    rating is only `0.5` when compared to the `gzip` rating of `q=1.0`, which is very
    high. In this case, the client is recommending the server that it can get `gzip`
    over `compress`. However, if `gzip` is not possible, `compress` is fine for the
    client.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`compress`值后面跟着`q=0.5`，这意味着质量评级只有`0.5`，与`gzip`评级的`q=1.0`相比，后者非常高。在这种情况下，客户端建议服务器可以使用`gzip`而不是`compress`。但是，如果`gzip`不可行，`compress`对于客户端来说也是可以接受的。
- en: If the server doesn't support the compression algorithm that the client requested,
    the server should send an error response with the `406 (Not Acceptable)` status
    code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器不支持客户端请求的压缩算法，服务器应该发送一个带有`406（不可接受）`状态码的错误响应。
- en: Content-Encoding
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容编码
- en: Content-Encoding is an entity header that is used to compress the data type
    to be sent to the client from the server. The Content-Encoding value tells the
    client which encodings were used in the entity-body. It will tell the client how
    to decode the data to retrieve the value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Content-Encoding是一个实体标头，用于将要从服务器发送到客户端的数据类型进行压缩。Content-Encoding值告诉客户端在实体主体中使用了哪些编码。它将告诉客户端如何解码数据以检索值。
- en: 'Let''s have a look at the single and multiple encoding options:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看单个和多个编码选项：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding configuration, single and multiple options are provided on
    Content-Encoding. Here, the server tells the client that it can offer `gzip` and
    `compress` algorithm-based encoding. If the multiple encoding is mentioned by
    the server, those encodings will be applied in the mentioned order.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置中，Content-Encoding提供了单个和多个选项。在这里，服务器告诉客户端它可以提供基于`gzip`和`compress`算法的编码。如果服务器提到了多个编码，这些编码将按照提到的顺序应用。
- en: Compressing data as much as possible is highly recommended.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能压缩数据是非常推荐的。
- en: Changing Content-Encoding on-the-fly is not recommended. As it will collapse
    future requests (such as `PUT` on `GET`), changing Content-Encoding on the fly
    is not a good idea at all.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议在运行时更改内容编码。因为这将破坏未来的请求（例如在`GET`上进行`PUT`），在运行时更改内容编码根本不是一个好主意。
- en: Server-driven content negotiation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器驱动的内容协商
- en: Server-driven content negotiation is performed by server-side algorithms to
    decide on the best representation that the server has to send to the client. It's
    also called proactive content negotiation. In server-driven negotiation, the client
    (user-agent) will give options of various representations with quality ratings.
    Algorithms in the server will have to decide which representation would work best
    for client-provided criteria.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器驱动的内容协商是由服务器端算法执行的，以决定服务器必须发送给客户端的最佳表示。这也被称为主动内容协商。在服务器驱动的协商中，客户端（用户代理）将提供具有质量评级的各种表示选项。服务器中的算法将不得不决定哪种表示对客户端提供的标准最有效。
- en: For example, the client requests a resource by sharing the media type criterion,
    with ratings such as which media type would be better for the client. The server
    will do the rest of the work and supply the best representation of the resource
    that suits the client's needs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，客户端通过共享媒体类型标准请求资源，带有诸如哪种媒体类型对客户端更好的评级。服务器将完成其余工作并提供最适合客户需求的资源表示。
- en: Agent-driven content negotiation
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理驱动的内容协商
- en: Agent-driven content negotiation is performed by algorithms on the client side.
    When the client requests a particular resource, the server will tell the client
    about various representations of the resource, with metadata such as content type,
    quality, and so on. Then the client side algorithms will decide which will be
    the best and request it from the server again. This is also called reactive content
    negotiation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代理驱动的内容协商是由客户端算法执行的。当客户端请求特定资源时，服务器将告知客户端有关资源的各种表示，包括内容类型、质量等元数据。然后客户端算法将决定哪种表示最佳，并再次从服务器请求。这也被称为被动内容协商。
- en: HTTP caching
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP缓存
- en: When the client requests the same resource representation many times, it will
    be a waste of time to provide it from the server side and it will be time-consuming
    in web applications. Instead of talking to the server, if the the resource is
    reused it will definitely improve the web application performance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端多次请求相同的资源表示时，从服务器端提供它将是浪费时间并且在Web应用程序中会耗时。如果资源被重复使用，而不是与服务器通信，它肯定会提高Web应用程序的性能。
- en: Caching will be considered a primary option for bringing performance to our
    web application. Web caches avoid server contact multiple times and reduce the
    latency; hence, the application will be faster. Caching can be applied on different
    layers of an application. In this chapter, we will only talk about HTTP caching,
    which is considered a middle layer. We will dig more into other forms of caching
    in [Chapter 11](c3ef97e3-fbad-4b9e-b7f8-91c6d3d6c6f0.xhtml), *Scaling*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存将被视为提高我们的Web应用性能的主要选项。Web缓存避免了多次与服务器联系并减少了延迟；因此，应用程序将更快。缓存可以应用在应用程序的不同层面。在本章中，我们将只讨论HTTP缓存，这被认为是中间层。我们将在第11章《扩展》中更深入地讨论其他形式的缓存。
- en: HTTP cache control
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP缓存控制
- en: Cache control is a header field that specifies directives for caching operations
    on the web. These directives give the caching authorization, define the duration
    of the caching, and so on. The directives define the behavior, usually intended
    to prevent caching responses.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存控制是一个指定Web缓存操作指令的头字段。这些指令给出了缓存授权，定义了缓存的持续时间等。这些指令定义了行为，通常旨在防止缓存响应。
- en: 'Here, we will talk about HTTP caching directives: the `public`, `private`,
    `no-cache`, and `only-if-cached` directives.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论HTTP缓存指令：`public`，`private`，`no-cache`和`only-if-cached`指令。
- en: Public caching
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共缓存
- en: 'If the cache control allows public caching, the resource can be cached by multiple
    user cache. We can do this by setting the `public` option in the `Cache-Control`
    header. In public caching, the response may be cached by multiple user cache,
    even the non-cacheable or cacheable, only within a non-share cache:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缓存控制允许公共缓存，则资源可以被多个用户缓存。我们可以通过在“Cache-Control”标头中设置“public”选项来实现这一点。在公共缓存中，响应可能会被多个用户缓存，即使是不可缓存或可缓存的，也仅限于非共享缓存：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding setting, `public` indicates that the response can be cached
    by any cache.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的设置中，“public”表示响应可以被任何缓存缓存。
- en: Private caching
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有缓存
- en: 'Unlike public caching, private responses are applicable for a single user cache,
    not for a shared cache. In private caching, intermediates can''t cache the content:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与公共缓存不同，私有响应适用于单个用户缓存，而不适用于共享缓存。在私有缓存中，中间件无法缓存内容：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding setting indicates that the response is available for a single
    user only, and it should not be accessed by any other caches.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的设置表明响应仅适用于单个用户，并且不应被任何其他缓存访问。
- en: Also, we can specify how long the content should be cached in our heading settings.
    This can be done by the `max-age` directive option.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以在我们的标题设置中指定内容应该缓存多长时间。这可以通过`max-age`指令选项来实现。
- en: 'Check the following setting:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下设置：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding setting, we mentioned that the response can be cached in private
    mode (single user only) and the maximum amount of time the resource will be considered
    fresh.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的设置中，我们提到响应可以以私有模式（仅限单个用户）进行缓存，并且资源被视为新鲜的最长时间。
- en: No-cache
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无缓存
- en: 'Caching might not be needed for accessing dynamic resources. In such situations,
    we can use a `no-cache` setting in our cache control to avoid client-side caching:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于访问动态资源可能不需要缓存。在这种情况下，我们可以在我们的缓存控制中使用“no-cache”设置来避免客户端缓存：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding setting will tell the client to check the server whenever the
    resource is being requested.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的设置将告诉客户端在请求资源时始终检查服务器。
- en: 'Also, in some situations, we may need to disable the caching mechanism itself.
    This can be done using `no-store` in our setting:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些情况下，我们可能需要禁用缓存机制本身。这可以通过在我们的设置中使用“no-store”来实现：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding setting will tell the client to avoid resource caching and get
    the resource from the server always.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的设置将告诉客户端避免资源缓存，并始终从服务器获取资源。
- en: HTTP/1.0 caches will not follow the no-cache directive, as it was introduced
    in HTTP/1.1
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/1.0缓存不会遵循no-cache指令，因为它是在HTTP/1.1中引入的。
- en: 'Cache control was introduced only in HTTP/1.1\. In HTTP /1.0, only **Pragma:
    no-cache** is used to prevent responses being cached.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '缓存控制只在HTTP/1.1中引入。在HTTP/1.0中，只使用**Pragma: no-cache**来防止响应被缓存。'
- en: Only-if-cached
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只有在缓存中有时效的资源时，客户端才会返回缓存的资源，而不是与服务器重新加载或重新验证。
- en: In some scenarios, like poor network connectivity, a client might want to return
    the cached resource and not reload or revalidate with the server. To achieve this,
    the client can include the `only-if-cached` directive in the request. If it is
    received, the client will get the cached entry, or else respond with a `504` (gateway
    timeout) status.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，比如网络连接不佳，客户端可能希望返回缓存的资源，而不是与服务器重新加载或重新验证。为了实现这一点，客户端可以在请求中包含`only-if-cached`指令。如果收到，客户端将获得缓存的条目，否则将以`504`（网关超时）状态响应。
- en: These cache control directives can override the default caching algorithms.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缓存控制指令可以覆盖默认的缓存算法。
- en: So far, we have discussed various cache control directives and their explanations.
    The following are sample settings for both cache requests and cache response directives.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了各种缓存控制指令及其解释。以下是缓存请求和缓存响应指令的示例设置。
- en: 'Request cache control directives (standard `Cache-Control` directives, which
    can be used by the client in an HTTP request) are as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请求缓存控制指令（标准的`Cache-Control`指令，可以由客户端在HTTP请求中使用）如下：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Response cache control directives (standard `Cache-Control` directives, which
    can be used by the server in an HTTP response) are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 响应缓存控制指令（标准的`Cache-Control`指令，可以由服务器在HTTP响应中使用）如下：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is not possible to specify cache directives for a specific cache.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能为特定的缓存指定缓存指令。
- en: Cache validation
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存验证
- en: 'When a cache has a fresh entry that can be used as a response when the client
    requests, it will check with the originating server to see if the cached entry
    is still usable. This process is called **cache validation**. Also, revalidation
    is triggered when the user presses the reload button. If the cached response includes
    the `Cache-Control: must revalidate` header, it will be triggered under normal
    browsing.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '当缓存中有一个新条目可以作为客户端请求时的响应时，它将与原始服务器进行检查，以查看缓存的条目是否仍然可用。这个过程称为**缓存验证**。此外，当用户按下重新加载按钮时，也会触发重新验证。如果缓存的响应包括`Cache-Control:
    must revalidate`头，则在正常浏览时会触发它。'
- en: When the resource's time is expired, it will either be validated or fetched
    again. Cache validation will only be triggered when the server provided a strong
    or weak validator.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当资源的时间过期时，它将被验证或重新获取。只有在服务器提供了强验证器或弱验证器时，才会触发缓存验证。
- en: ETags
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ETags
- en: 'ETags provide a mechanism for validating cached responses. The ETag response
    header can be used as a strong validator. In this case, the client can neither
    understand the value nor predict what its value will be. When the server issues
    a response, it generates a token that hides the state of the resource:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ETags提供了验证缓存响应的机制。ETag响应头可以用作强验证器。在这种情况下，客户端既不能理解该值，也无法预测其值。当服务器发出响应时，它生成一个隐藏资源状态的令牌：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the `ETag` is part of the response, the client can issue an `If-None-Match`
    in the header of the future request to validate the cached resource:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应中包含`ETag`，客户端可以在未来请求的头部中发出`If-None-Match`来验证缓存的资源：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The server will compare the requested header with the current state of the resource.
    If the resource state is changed, the server will respond with a new resource.
    Otherwise, the server will return a `304 Not Modified` response.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将请求头与资源的当前状态进行比较。如果资源状态已更改，服务器将以新资源响应。否则，服务器将返回`304 Not Modified`响应。
- en: Last-Modified/If-Modified-Since headers
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Last-Modified/If-Modified-Since头
- en: So far, we have seen a strong validator (ETags). Here, we will discuss a weak
    validator that can be used in the header. The `Last-Modified` response header
    can be used as a weak validator. Instead of generating a hash of a resource, a
    timestamp will be used to check the cached responses are valid.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了一个强验证器（ETags）。在这里，我们将讨论一个可以在头部中使用的弱验证器。`Last-Modified`响应头可以用作弱验证器。与生成资源的哈希不同，时间戳将用于检查缓存的响应是否有效。
- en: As this validator has a 1-second resolution, it is considered weak compared
    to ETags. If the `Last-Modified` header is present in a response, then the client
    can send an `If-Modified-Since` request header to validate the cached resource.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此验证器具有1秒的分辨率，与ETags相比被认为是弱的。如果响应中存在`Last-Modified`头，则客户端可以发送一个`If-Modified-Since`请求头来验证缓存的资源。
- en: 'The `If-Modified-Since` header is supplied from the client when requesting
    a resource. To simplify the mechanism in a real example, the client request would
    resemble this: "I have already cached the resource XYZ at 10 A.M.; however, get
    the updated XYZ if it''s changed since 10 A.M. otherwise just return `304`. Then
    I will use the previously cached XYZ."'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端请求资源时，会提供`If-Modified-Since`头。为了在一个真实的例子中简化机制，客户端请求将类似于这样：“我已经在上午10点缓存了资源XYZ；但是如果自上午10点以来它已经改变了，那么获取更新的XYZ，否则只返回`304`。然后我将使用之前缓存的XYZ。”
- en: Cache implementation
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存实现
- en: So far, we have seen the theory part in this chapter. Let's try to implement
    the concept in our application. To simplify the cache implementation, we are going
    to use only user management. We will use the `getUser` (single user) REST API
    to apply our caching concept.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本章中已经看到了理论部分。让我们尝试在我们的应用程序中实现这个概念。为了简化缓存实现，我们将只使用用户管理。我们将使用`getUser`（单个用户）REST
    API来应用我们的缓存概念。
- en: The REST resource
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST资源
- en: In the `getUser` method, we will pass the right `userid` to the path variable,
    assuming the client will pass the `userid` and get the resource. There are many
    caching options available to implement. Here, we will use only the `If-Modified-Since`
    caching mechanism. As this mechanism will pass the `If-Modified-Since` value in
    the header, it will be forwarded to the server, saying that, if the resource is
    changed after the specified time, get the resource fresh, or else return null.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getUser`方法中，我们将正确的`userid`传递给路径变量，假设客户端将传递`userid`并获取资源。有许多可用的缓存选项可供实现。在这里，我们将仅使用`If-Modified-Since`缓存机制。由于此机制将在标头中传递`If-Modified-Since`值，因此它将被转发到服务器，表示，如果资源在指定时间之后发生更改，请获取新资源，否则返回null。
- en: There are many ways we can implement caching. As our goal is to simplify and
    convey the message clearly, we will keep the code simple, instead of adding complexity
    in the code. In order to implement this caching, we might need to add a new variable
    called `updatedDate` in our `User` class. Let's add the variable in our class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多实现缓存的方法。由于我们的目标是简化并清晰地传达信息，我们将保持代码简单，而不是在代码中添加复杂性。为了实现这种缓存，我们可能需要在我们的`User`类中添加一个名为`updatedDate`的新变量。让我们在我们的类中添加这个变量。
- en: The `updatedDate` variable will be used as a checking variable for `If-Modified-Since`
    caching, as we will rely on user-updated date.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`updatedDate`变量将用作`If-Modified-Since`缓存的检查变量，因为我们将依赖于用户更新的日期。'
- en: 'The client will ask the server if the user data has changed since the last
    cached time. The server will check against the user `updatedDate` and return null
    if not updated; otherwise, or else it will return fresh data:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端将询问服务器用户数据自上次缓存时间以来是否发生了更改。服务器将根据用户的`updatedDate`进行检查，如果未更新则返回null；否则，它将返回新数据：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we have just added a new variable, `updatedDate`, and
    added the proper getter and setter methods into it. We might clean up these getter
    and setter methods later by adding the Lombok library. We will apply Lombok in
    upcoming chapters.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们刚刚添加了一个新变量`updatedDate`，并为其添加了适当的getter和setter方法。稍后我们可能会通过添加Lombok库来简化这些getter和setter方法。我们将在接下来的章节中应用Lombok。
- en: 'Also, we need to add another constructor to initialize the `updatedDate` variable
    when we get the instance of the class. Let''s add the constructor here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当我们获取类的实例时，我们需要添加另一个构造函数来初始化`updatedDate`变量。让我们在这里添加构造函数：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If possible, we can change the `toString` method as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，我们可以将`toString`方法更改如下：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After adding all the preceding details mentioned, our class will look as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了所有上述提到的细节之后，我们的类将如下所示：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we will go back to `UserController`, which we introduced in previous chapters,
    and change the `getUser` method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将回到之前章节中介绍的`UserController`，并更改`getUser`方法：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we used the `WebRequest` parameter in our existing method.
    The `WebRequest` object will be used for calling the `checkNotModified` method.
    At first, we get the user details by `id` and get the `updatedDate` in milliseconds.
    We check the user updated date against the client header information (we assume
    the client will pass `If-Not-Modified-Since` in the header). If the user-updated
    date is newer than the cached date, we assume the user is updated, so we will
    have to send the new resource.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在现有方法中使用了`WebRequest`参数。`WebRequest`对象将用于调用`checkNotModified`方法。首先，我们通过`id`获取用户详细信息，并以毫秒为单位获取`updatedDate`。我们将用户更新日期与客户端标头信息进行比较（我们假设客户端将在标头中传递`If-Not-Modified-Since`）。如果用户更新日期比缓存日期更新，我们假设用户已更新，因此我们将不得不发送新资源。
- en: We might have to import `org.apache.log4j.Logger` since we added the logger
    in `UserController`. Otherwise it will show error while compiling.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`UserController`中添加了记录器，因此我们可能需要导入`org.apache.log4j.Logger`。否则在编译时会显示错误。
- en: If the user is not updated after the cached (by the client) date, it will simply
    return null. Also, we have provided enough loggers to print our desired statements.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在客户端缓存日期之后没有更新，它将简单地返回null。此外，我们已经提供了足够的记录器来打印我们想要的语句。
- en: 'Let''s test the REST API in SoapUI or the Postman client. When we call the
    API the first time, it will return the data with header information, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在SoapUI或Postman客户端中测试REST API。当我们第一次调用API时，它将返回带有标头信息的数据，如下所示：
- en: '![](img/e9af7900-24f2-40b0-8ba0-b198978318b2.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9af7900-24f2-40b0-8ba0-b198978318b2.jpg)'
- en: SoapUI client
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SoapUI客户端
- en: We can see that we are using the `GET` method for this API and the response
    header on the right side.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们正在使用`GET`方法来调用此API，并且右侧是响应标头。
- en: 'In our preceding screenshot we have used the port `8081`. By default Spring
    Boot works on port `8080`. If you want to change it to `8081`, configure the port
    in `/src/main/resources/``application.properties` as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的屏幕截图中，我们使用了端口`8081`。默认情况下，Spring Boot在端口`8080`上运行。如果要将其更改为`8081`，请在`/src/main/resources/``application.properties`中配置端口如下：
- en: '`server.port = 8081`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.port = 8081`'
- en: If there is not `application.properties` under the mentioned location, you can
    create one.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在指定位置下没有`application.properties`，则可以创建一个。
- en: 'The response (JSON) looks as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 响应（JSON）如下所示：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding JSON response, we can see the user details, including `updatedDate`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的JSON响应中，我们可以看到用户详细信息，包括`updatedDate`。
- en: 'The response (header) is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 响应（标头）如下所示：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding response header, we can see the HTTP result `200` (meaning
    OK) and the `Last-Modified` date.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的响应标头中，我们可以看到HTTP结果`200`（表示OK）和`Last-Modified`日期。
- en: 'Now, we will add `If-Modified-Since` in the headers and update the latest date
    we got from the previous response. We can check the `If-Modified-Since` parameter
    in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在标头中添加`If-Modified-Since`，并更新我们从先前响应中获取的最新日期。我们可以在以下屏幕截图中检查`If-Modified-Since`参数：
- en: '![](img/ebde97a2-d5ee-4698-a91a-cb8a0ea76962.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebde97a2-d5ee-4698-a91a-cb8a0ea76962.jpg)'
- en: 'In the preceding configuration, we have added the `If-Modified-Since` parameter
    in the header section and called the same REST API again. The code will check
    whether the resource has been updated since the last cached date. In our case,
    the resource is not updated, so it will simply return `304` in the response. We
    can see the response as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述配置中，我们在标头部分添加了`If-Modified-Since`参数，并再次调用相同的REST API。代码将检查资源是否自上次缓存日期以来已更新。在我们的情况下，资源没有更新，因此响应中将简单返回`304`。我们可以看到响应如下：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The HTTP `304` (not modified) response simply conveys to the client that there
    is no resource modified, so the client can use the existing cache.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP `304`（未修改）响应只是向客户端传达资源未修改，因此客户端可以使用现有缓存。
- en: If we update the specified user by calling the update REST API (`http://localhost:8081/user/100`
    using `PUT`) and then call the previous API (`http://localhost:8081/user/100`
    using `GET`), we will get a fresh resource as the user is updated after the client
    cache.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过调用更新REST API（使用`PUT`的`http://localhost:8081/user/100`）更新指定的用户，然后再次调用先前的API（使用`GET`的`http://localhost:8081/user/100`），我们将获得新的资源，因为用户在客户端缓存之后已更新。
- en: Caching with ETags
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ETags进行缓存
- en: In the previous section, we explored caching based on the updated date. However,
    we may not always need to rely on the updated date when we need to check the updated
    resource. There is another mechanism, called ETag caching, that provides a strong
    validator to check whether the resource is updated or not. ETag caching would
    be the perfect alternative for regular caching by checking the updated date.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们探讨了基于更新日期的缓存。然而，当我们需要检查更新的资源时，我们可能并不总是需要依赖更新日期。还有另一种机制，称为ETag缓存，它提供了一个强验证器，用于检查资源是否已更新。ETag缓存将是检查更新日期的常规缓存的完美替代品。
- en: In ETag caching, the response header will provide the hashed ID (MD5) for the
    body. If the resource is updated, the header will generate a new hash ID on the
    REST API call. So we don't need to explicitly check the information like we did
    in the previous section.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在ETag缓存中，响应标头将为主体提供哈希ID（MD5）。如果资源已更新，标头将在REST API调用时生成新的哈希ID。因此，我们无需像在上一节中那样显式检查信息。
- en: 'Spring provides a filter called `ShallowEtagHeaderFilter` to support ETag caching.
    Let''s try to add the `ShallowEtagHeaderFilter` in our existing application. We
    will add the code in our main application file (`TicketManagementApplication`):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一个名为`ShallowEtagHeaderFilter`的过滤器来支持ETag缓存。让我们尝试在我们现有的应用程序中添加`ShallowEtagHeaderFilter`。我们将在我们的主应用程序文件（`TicketManagementApplication`）中添加代码：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the preceding code, we are adding `ShallowEtagHeaderFilter` as a bean and
    registering by supplying our URL patterns and name. As we will test only the user
    resource at the moment, we will add `/user/*` in our patterns. Finally, our main
    application class will look as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们将`ShallowEtagHeaderFilter`作为一个bean添加，并通过提供我们的URL模式和名称进行注册。因为我们目前只测试用户资源，所以我们将在我们的模式中添加`/user/*`。最后，我们的主应用程序类将如下所示：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can test this ETag mechanism by calling the user API (`http://localhost:8081/user`).
    When we call this API, the server will return the following headers:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用用户API（`http://localhost:8081/user`）来测试这种ETag机制。当我们调用此API时，服务器将返回以下标头：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see that `ETag` is added in our header with the hash ID. Now we will
    call the same API with the `If-None-Match` header with the hash value. We will
    see the header in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`ETag`已添加到我们的标头中，带有哈希ID。现在我们将使用`If-None-Match`标头和哈希值调用相同的API。我们将在以下截图中看到标头：
- en: '![](img/d644eb31-ffdf-4337-8e47-a057eef15107.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d644eb31-ffdf-4337-8e47-a057eef15107.jpg)'
- en: 'When we call the same API again with the `If-None-Match` header and the value
    of our previously hashed ID, the server will return a `304` state, which we can
    see as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次使用`If-None-Match`标头和先前哈希ID的值调用相同的API时，服务器将返回`304`状态，我们可以如下所示地看到：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this mechanism, the actual response body will not be sent to the client.
    Instead, it will tell the client that the resource is not modified, so the client
    can use the previously cached content. The `304` state conveys that the resource
    is not cached.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种机制中，实际的响应主体将不会被发送到客户端。相反，它会告诉客户端资源未被修改，因此客户端可以使用先前缓存的内容。`304`状态表示资源未被缓存。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned HTTP optimization methods to improve application
    performance. By reducing the interaction between clients and servers and the size
    of the data over HTTP, we will achieve maximum performance in our REST API services.
    We will explore other optimization, caching, and scaling techniques in [Chapter
    11](c3ef97e3-fbad-4b9e-b7f8-91c6d3d6c6f0.xhtml), *Scaling,* as we will be talking
    about more advanced topics relating to web service performance.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经学习了HTTP优化方法，以提高应用程序的性能。通过减少客户端和服务器之间的交互以及通过HTTP传输的数据大小，我们将在REST API服务中实现最大性能。在[第11章](c3ef97e3-fbad-4b9e-b7f8-91c6d3d6c6f0.xhtml)中，我们将探讨其他优化、缓存和扩展技术，*扩展*，因为我们将讨论与Web服务性能相关的更高级的主题。
