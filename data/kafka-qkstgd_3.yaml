- en: Message Enrichment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息丰富
- en: To fully understand this chapter, it is necessary to have read the previous
    chapter that focused on how to validate events. This chapter is focused on how
    to enrich events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解本章内容，必须阅读上一章，该章重点介绍了如何验证事件。本章重点介绍如何丰富事件。
- en: In this chapter, we will continue using the systems of Monedero, our fictitious
    company that is dedicated to the exchange of cryptocurrencies. If we remember
    in the previous chapter, the messages of Monedero were validated; in this chapter,
    we will continue with the same flow, but we will add one more step of enrichment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用Monedero系统，这是我们虚构的公司，致力于加密货币的交换。如果我们回顾上一章，Monedero的消息已被验证；在本章中，我们将继续使用相同的流程，但我们将增加一个额外的丰富步骤。
- en: In this context, we understand enrichment as adding extra data that was not
    in the original message. In this chapter, we will see how to enrich a message
    with geographic location using the MaxMind database and how to extract the current
    value of the exchange rate using the Open Exchange data. If we remember the events
    that we modeled for Monedero, each one included the IP address of the customer's
    computer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，我们将丰富理解为添加原始消息中不存在的数据。在本章中，我们将看到如何使用MaxMind数据库丰富消息的地理位置，以及如何使用Open Exchange数据提取当前汇率。如果我们还记得为Monedero建模的事件，每个事件都包括了客户电脑的IP地址。
- en: In this chapter, we will use the MaxMind free database that provides us with
    an API that contains a mapping of IP addresses to their geographic location.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用MaxMind免费数据库，它为我们提供了一个包含IP地址与其地理位置映射的API。
- en: Our system in Monedero searches for the IP address of our customer in the MaxMind
    database to determine where the customer is located when the request to our system
    was made. The use of data from external sources to add them to our events is what
    we call message enrichment.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Monedero系统在我们的客户请求系统时，会在MaxMind数据库中搜索客户的IP地址，以确定客户的位置。使用外部数据源将它们添加到我们的事件中，我们称之为消息丰富。
- en: In the cryptocurrencies world, there is something called Bit License, in which
    some geographic areas are limited by law to carry out activities with cryptocurrencies.
    We currently have an event validation service for Monedero.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密货币的世界中，有一种称为Bit License的东西，其中一些地理区域根据法律限制进行与加密货币相关的活动。我们目前为Monedero提供了一种事件验证服务。
- en: However, the legal department has asked us to have a validation filter to know
    the geographic location of our customers and thus be able to comply with the Bit
    License. The Bit License has operated in the New York area since July 2014 and
    applies to residents. Under the terms of the law, those considered resident are
    all of the people who reside, are located, have a place of business, or conduct
    business in the state of New York.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，法律部门要求我们有一个验证过滤器，以了解客户的地理位置，从而能够遵守Bit License。Bit License自2014年7月在新泽西地区运营，适用于居民。根据法律条款，被认为是居民的人包括所有居住、位于、有业务场所或在纽约州开展业务的人。
- en: 'This chapter covers the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: How extraction works
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取工作原理
- en: How enrichment works
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富工作原理
- en: Extracting the location given an IP address
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据IP地址提取位置
- en: Extracting the currency price given a currency
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据货币提取货币价格
- en: Extracting the weather data given a location
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据位置提取天气数据
- en: Enriching messages with the geographic location
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用地理位置丰富消息
- en: Enriching messages with a currency price
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用货币价格丰富消息
- en: Running a processing engine
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行处理引擎
- en: Extracting the geographic location
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取地理位置
- en: Open the `build.gradle` file on the Monedero project created in [Chapter 2](0f0c3c87-3860-4247-97b7-3ce070640dc3.xhtml),
    *Message Validation*, and add the lines highlighted in *Listing 3.1*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 打开在[第2章](0f0c3c87-3860-4247-97b7-3ce070640dc3.xhtml)“消息验证”中创建的Monedero项目中的`build.gradle`文件，并添加*列表3.1*中突出显示的行。
- en: 'The following is the content of *Listing 3.1*, the Monedero `build.gradle`
    file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为*列表3.1*的内容，即Monedero的`build.gradle`文件：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 3.1: build.gradle'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 列表3.1：build.gradle
- en: Note that the first change is the switch from version 0.1.0 to version 0.2.0
    .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第一个更改是从版本0.1.0切换到版本0.2.0。
- en: The second change is to add the MaxMind's GeoIP version 1.3.1 to our project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个更改是将MaxMind的GeoIP版本1.3.1添加到我们的项目中。
- en: 'From the project root directory, run the following command to rebuild the app:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目根目录运行以下命令以重新构建应用程序：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is something like the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果类似于以下内容：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To download a copy of the MaxMind GeoIP free database, execute this command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 MaxMind GeoIP 免费数据库的副本，请执行此命令：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command to decompress the file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来解压缩文件：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Move the `GeoLiteCity.dat` file in a route accessible to our program.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `GeoLiteCity.dat` 文件移动到程序可访问的路由中。
- en: 'Now, add a file called `GeoIPService.java` in the `src/main/java/monedero/extractors`
    directory containing the content of *Listing 3.2*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `src/main/java/monedero/extractors` 目录中添加一个名为 `GeoIPService.java` 的文件，包含
    *Listing 3.2* 的内容：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 3.2: GeoIPService.java'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3.2：GeoIPService.java
- en: The `GeoIPService` has a public method `getLocation` that receives a string
    representing the IP address and looks for this IP address in the GeoIP location
    database. This method returns an object of class location with the geographic
    location of that specific IP address.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`GeoIPService` 有一个公共方法 `getLocation`，它接收一个表示 IP 地址的字符串，并在 GeoIP 位置数据库中查找该 IP
    地址。此方法返回一个包含该特定 IP 地址地理位置的 `location` 类对象。'
- en: 'There are sometimes demanding customers who ask to have the most updated version
    of the database. In this case, downloading the database continuously is not an
    option. For this type of case, MaxMind exposes its services through an API. To
    read more about it, visit the following URL: [https://dev.maxmind.com/](https://dev.maxmind.com/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会有一些要求严格的客户要求获取数据库的最新版本。在这种情况下，持续下载数据库不是一个选择。为此类情况，MaxMind 通过 API 提供其服务。要了解更多信息，请访问以下
    URL：[https://dev.maxmind.com/](https://dev.maxmind.com/)。
- en: 'To read more about Bit License regulations, visit the following link:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于位许可证法规的信息，请访问以下链接：
- en: '[http://www.dfs.ny.gov/legal/regulations/bitlicense_reg_framework.html](http://www.dfs.ny.gov/legal/regulations/bitlicense_reg_framework.html)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.dfs.ny.gov/legal/regulations/bitlicense_reg_framework.html](http://www.dfs.ny.gov/legal/regulations/bitlicense_reg_framework.html)'
- en: Enriching the messages
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 丰富消息
- en: Now, we will recap the steps of our processing engine for Monedero. The customer
    consults the ETH price in the client's browser and is sent to Kafka through some
    HTTP event collector.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将回顾 Monedero 处理引擎的步骤。客户在客户端浏览器中咨询 ETH 价格，并通过一些 HTTP 事件收集器发送到 Kafka。
- en: The first step in our flow is the event correctness validation; remember from
    the previous chapter that the messages with defects are derived from bad data
    and that is why they are filtered. The second step now is to enrich our message
    with geographic location information.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们流程中的第一步是事件正确性验证；记得从上一章中，有缺陷的消息是从不良数据中派生出来的，这就是为什么它们被过滤掉。现在第二步是丰富我们的消息，添加地理信息。
- en: 'Here are the architecture steps for the Monedero processing engine:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Monedero 处理引擎的架构步骤：
- en: Read the individual events from a Kafka topic called **input-messages**
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从名为 **input-messages** 的 Kafka 主题中读取单个事件
- en: Validate the message, sending any defective event to a dedicated Kafka topic
    called **invalid-messages**
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证消息，将任何有缺陷的事件发送到名为 **invalid-messages** 的专用 Kafka 主题
- en: Enrich the message with the geographic location data
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 丰富消息的地理信息
- en: Write the enriched messages in a Kafka topic called **valid-messages**
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 **valid-messages** 的 Kafka 主题中写入增强的消息
- en: 'All of these steps of the second version of the stream processing engine are
    detailed in *Figure 3.1*:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些步骤都详细地列在 *Figure 3.1* 中：
- en: '![](img/9b129c45-0cc2-4454-ab78-56f2fb37b947.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b129c45-0cc2-4454-ab78-56f2fb37b947.png)'
- en: 'Figure 3.1: The processing engine reads the events from the input-messages
    topic, validates the messages, sends the errors to invalid-messages topic, enriches
    the messages with geographic location, and then writes them to the valid-messages
    topic.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：处理引擎从输入消息主题读取事件，验证消息，将错误发送到无效消息主题，丰富消息的地理信息，然后将它们写入有效消息主题。
- en: 'Now, let''s create a file called `Enricher.java` in the `src/main/java/monedero/`
    directory with the content of *Listing 3.**3*:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 `src/main/java/monedero/` 目录中创建一个名为 `Enricher.java` 的文件，包含 *Listing
    3.**3* 的内容：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As expected, the `Enricher` class implements the producer interface; therefore
    the `Enricher` is a producer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`Enricher` 类实现了生产者接口；因此，`Enricher` 是一个生产者。
- en: Let's fill the code of the `process()` method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来填写 `process()` 方法的代码。
- en: 'If the customer message does not have an IP address, the message is automatically
    sent to `invalid-messages` topic, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户消息没有 IP 地址，该消息将自动发送到 `invalid-messages` 主题，如下所示：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `Enricher` class invokes the `getLocation` method of `GeoIPService` , as
    follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enricher` 类调用 `GeoIPService` 的 `getLocation` 方法，如下所示：'
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The country and the city of the location are added to the customer message,
    as in the example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 位置的国家和城市被添加到客户消息中，如下例所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The enriched message is written to the `valid-messages` queue, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 丰富的消息被写入`valid-messages`队列，如下所示：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the location object brings more interesting data; for this example,
    just the city and the country are extracted. For example, the MaxMind database
    can give us much more precision than the one exploited in this example. In effect,
    the online API can accurately show the exact location of an IP.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，位置对象带来了更多有趣的数据；对于这个例子，只提取城市和国家。例如，MaxMind数据库可以给我们比这个例子中使用的更精确的数据。实际上，在线API可以准确地显示IP的确切位置。
- en: Also note that here we have a very simple validation. In the next chapter, we
    will see how to validate the schema correctness. For the moment, think of other
    validations that are missing to have a system that meets the business requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，这里我们有一个非常简单的验证。在下一章中，我们将看到如何验证模式正确性。目前，考虑其他缺失的验证，以使系统满足业务需求。
- en: Extracting the currency price
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取货币价格
- en: At the moment, Monedero has a service that validates the messages that are well
    formed. The service also enriches the messages with the customer's geographic
    location.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Monedero有一个验证格式良好的消息的服务。该服务还通过客户的地理位置丰富消息。
- en: Recall that the Monedero core business is the cryptocurrencies exchange. So
    now, the business asks us for a service that returns the requested currency price
    online at a specific time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，Monedero的核心业务是加密货币交易。因此，现在业务要求我们提供一个在特定时间返回请求货币价格的在线服务。
- en: 'To achieve this, we will use the exchange rate of open exchange rates:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将使用开放汇率交易所的汇率：
- en: '[https://openexchangerates.org/](https://openexchangerates.org/)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openexchangerates.org/](https://openexchangerates.org/)'
- en: To obtain a free API key, you have to register in a free plan; the key is needed
    to access the free API.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得一个免费的API密钥，您必须注册免费计划；密钥是访问免费API所需的。
- en: 'Now, let''s create a file called `OpenExchangeService.java` in the `src/main/java/monedero/extractors`
    directory with the content of *Listing 3.4*:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`src/main/java/monedero/extractors`目录下创建一个名为`OpenExchangeService.java`的文件，其内容为*清单3.4*：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Some lines of the `OpenExchangeService` class can be analyzed as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以如下分析`OpenExchangeService`类的一些行：
- en: In line `//1`, the value of the `API_KEY` is assigned when you registered in
    the open exchange rates page; the free plan gives you up to 1,000 requests per
    month.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行`//1`中，当你在开放汇率页面上注册时，分配`API_KEY`的值；免费计划每月最多提供1,000次请求。
- en: 'In line `//2`, our class invokes the open exchange API URL, using your `API_KEY`.
    To check the prices at the moment, you can access the URL (counts as a request
    with your key): [https://openexchangerates.org/api/latest.json?app_id=YOUR_API_KEY](https://openexchangerates.org/api/latest.json?app_id=YOUR_API_KEY).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行`//2`中，我们的类调用开放交换API URL，使用您的`API_KEY`。要检查当前的价格，您可以访问URL（使用您的密钥进行请求）：[https://openexchangerates.org/api/latest.json?app_id=YOUR_API_KEY](https://openexchangerates.org/api/latest.json?app_id=YOUR_API_KEY)。
- en: In line `//3`, the currency string passed as argument is searched in the JSON
    tree that returns the web page.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行`//3`中，作为参数传递的货币字符串在返回网页的JSON树中进行搜索。
- en: In line `//4`, the currency price (in US dollars) of the currency passed as
    an argument is returned as a double value.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行`//4`中，返回作为参数传递的货币的（美元）货币价格，作为一个双精度值。
- en: 'There are several ways to parse JSON, and whole books are devoted to this topic.
    For this example, we used Jackson to parse JSON. To find more information, go
    to the following URL:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 解析JSON有几种方法，整本书都致力于这个主题。对于这个例子，我们使用了Jackson来解析JSON。要获取更多信息，请访问以下URL：
- en: '[https://github.com/FasterXML](https://github.com/FasterXML)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/FasterXML](https://github.com/FasterXML)'
- en: 'As with the MaxMind geographic localization service, open exchange rates also
    expose their services through an API. To read more about this, go to the following
    URL:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与MaxMind地理定位服务一样，开放汇率交易所也通过API公开他们的服务。要了解更多信息，请访问以下URL：
- en: '[https://docs.openexchangerates.org/](https://docs.openexchangerates.org/)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.openexchangerates.org/](https://docs.openexchangerates.org/)'
- en: 'This example uses the open exchange rates free plan; if a non-limited API is
    required, check their other plans in the URL:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了开放汇率交易所的免费计划；如果需要非限制API，请检查他们的其他计划，URL如下：
- en: '[https://openexchangerates.org/signup](https://openexchangerates.org/signup)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openexchangerates.org/signup](https://openexchangerates.org/signup)'
- en: Enriching with currency price
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加货币价格
- en: The customer consults the ETH price event, starts in the client's web browser,
    and is dispatched to Kafka through some HTTP event collector. The second step
    is to enrich the messages with the geographic location information from MaxMind
    database. The third step is to enrich the message with the currency price from
    open exchange rates service.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 客户咨询 ETH 价格事件，从客户端的网页浏览器开始，并通过一些 HTTP 事件收集器分发到 Kafka。第二步是从 MaxMind 数据库中获取地理信息来丰富消息。第三步是从公开汇率服务中获取货币价格来丰富消息。
- en: 'In summary, here are the architecture steps for the Monedero processing engine:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，以下是 Monedero 处理引擎的架构步骤：
- en: Read the individual events from a Kafka topic called **input-messages**
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从名为 **input-messages** 的 Kafka 主题中读取单个事件
- en: Validate the message, sending any defective event to a specific Kafka topic
    called **invalid-messages**
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证消息，将任何有缺陷的事件发送到名为 **invalid-messages** 的特定 Kafka 主题。
- en: Enrich the message with the geographic location data from MaxMind database
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 MaxMind 数据库中的地理信息丰富消息
- en: Enrich the message with the currency price from open exchange rates service
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用公开汇率服务丰富消息中的货币价格
- en: Write the enriched messages in a Kafka topic called **valid-messages**
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将丰富的消息写入名为 **valid-messages** 的 Kafka 主题。
- en: 'The final version of the stream processing engine is detailed in *Figure 3.2*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 流处理引擎的最终版本在 *图 3.2* 中详细说明：
- en: '![](img/4b4dd6ce-00f0-4d3c-8d7e-5fec1a08b290.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b4dd6ce-00f0-4d3c-8d7e-5fec1a08b290.png)'
- en: 'Figure 3.2: The processing engine reads the messages from the input-messages
    topic, validates the messages, routes the defective ones to invalid-messages queue,
    enriches the messages with geographic location and price, and finally, writes
    them to valid-messages queue.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：处理引擎从输入消息主题读取消息，验证消息，将有缺陷的消息路由到 `invalid-messages` 队列，使用地理信息和价格丰富消息，并最终将它们写入
    `valid-messages` 队列。
- en: 'To add the open exchange rates service to our engine, modify the `Enricher.java`
    file in the `src/main/java/monedero/` directory with the changes highlighted in
    *Listing 3.5*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要将公开汇率服务添加到我们的引擎中，修改位于 `src/main/java/monedero/` 目录下的 `Enricher.java` 文件，并按照
    *清单 3.5* 中高亮显示的更改进行：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As we know, the `Enricher` class is a Kafka producer, so now let''s analyze
    the additions:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，`Enricher` 类是一个 Kafka 生产者，因此现在让我们分析新增的内容：
- en: In line `//1`, we import `OpenExchangeService` built previously
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//1` 中，我们导入先前构建的 `OpenExchangeService`。
- en: In line `//2`, to avoid later null pointer exceptions, if the message does not
    have a valid IP Address on customer, the message automatically is sent to the
    `invalid-messages` queue
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//2` 中，为了避免后续的空指针异常，如果消息在客户处没有有效的 IP 地址，则消息会自动发送到 `invalid-messages` 队列。
- en: In line `//3`, generates an instance of the `OpenExchangeService` class that
    is an extractor
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//3` 中，生成 `OpenExchangeService` 类的实例，该类是一个提取器。
- en: 'In line `//4`, the `getPrice()` method of the `OpenExchangeService` class is
    called, and this value is added to the message: the price of the currency is added
    to the currency node in the leaf price'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//4` 中，调用 `OpenExchangeService` 类的 `getPrice()` 方法，并将此值添加到消息中：将货币价格添加到叶价格中的货币节点。
- en: In line `//5`, the enriched message is written to the `valid-messages` queue
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行 `//5` 中，丰富的消息被写入 `valid-messages` 队列。
- en: This is the final version of the enricher engine for Monedero; as we can see,
    the pipeline architecture uses the extractors as input for the enricher. Next,
    we will see how to run our entire project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Monedero 的 enricher 引擎的最终版本；正如我们所见，管道架构使用提取器作为 enricher 的输入。接下来，我们将看到如何运行我们的整个项目。
- en: Note that the JSON response has a lot of more information, but for this example,
    only one currency price is used. There are several open data initiatives that
    are free and provide a lot of free repositories with online and historical data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，JSON 响应包含大量更多信息，但在这个例子中，只使用了一个货币价格。有几个公开数据倡议是免费的，并提供大量免费存储库，包括在线和历史数据。
- en: Running the engine
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行引擎
- en: Now that the final version of the `Enricher` class is coded, we have to compile
    and execute it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`Enricher` 类的最终版本已经编码完成，我们必须编译并执行它。
- en: 'As we know, the `ProcessingEngine` class contains the main method to coordinate
    the reader and writer classes. Now, let''s modify the `ProcessingEngine.java`
    file on the `src/main/java/monedero/` directory and replace `Validator` with `Enricher`
    as in the highlighted code in *Listing 3.6*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，`ProcessingEngine` 类包含协调读取器和写入器类的主要方法。现在，让我们修改位于 `src/main/java/monedero/`
    目录下的 `ProcessingEngine.java` 文件，并将 `Validator` 替换为如 *清单 3.6* 中高亮显示的 `Enricher`：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 3.6: ProcessingEngine.java'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3.6：ProcessingEngine.java
- en: 'The processing engine receives the following five arguments from the command
    line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 处理引擎从命令行接收以下五个参数：
- en: '`args[0]` `servers` indicates the host and port of the Kafka broker'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[0]` `servers` 表示 Kafka 代理的主机和端口'
- en: '`args[1]` `groupId` indicates that the consumer is part of this Kafka consumer
    group'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[1]` `groupId` 表示消费者是这个 Kafka 消费者组的一部分'
- en: '`args[2]` `input topic` indicates the topic where the reader reads from'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[2]` `input topic` 表示读取者读取的主题'
- en: '`args[3]` `validTopic` indicates the topic where valid messages are sent'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[3]` `validTopic` 表示发送有效消息的主题'
- en: '`args[4]` `invalidTopic` indicates the topic where invalid messages are sent'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args[4]` `invalidTopic` 表示发送无效消息的主题'
- en: 'To rebuild the project from the `monedero` directory, run the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `monedero` 目录重新构建项目，请运行以下命令：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If everything is OK, the output should be similar to the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，输出应该类似于以下内容：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run the project, we need four different command-line windows. *Figure 3.3*
    shows the command-line windows arrangement:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行项目，我们需要四个不同的命令行窗口。*图 3.3* 展示了命令行窗口的布局：
- en: '![](img/b86f2503-f885-4cf8-aa64-d54022cdd74d.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b86f2503-f885-4cf8-aa64-d54022cdd74d.jpg)'
- en: 'Figure 3.3: The four terminal windows to test the processing engine including:
    message producer, valid message consumer, invalid message consumer, and the processing
    engine itself'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：测试处理引擎的四个终端窗口，包括：消息生产者、有效消息消费者、无效消息消费者和处理引擎本身
- en: 'In the first command-line terminal, go to the Kafka installation directory
    and generate the two necessary topics, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个命令行终端，进入 Kafka 安装目录并生成两个必要的主题，如下所示：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, start a console producer to the `input-topic` topic, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，启动一个指向 `input-topic` 主题的控制台生产者，如下所示：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This window is where the input messages are produced (typed).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口是输入消息被产生（输入）的地方。
- en: 'In the second command-line window, start a command-line consumer listening
    to the `valid-messages` topic, as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个命令行窗口中，启动一个监听 `valid-messages` 主题的命令行消费者，如下所示：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the third command-line window, start a command-line consumer listening to
    `invalid-messages` topic, as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三个命令行窗口中，启动一个监听 `invalid-messages` 主题的命令行消费者，如下所示：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the fourth command-line terminal, start up the processing engine. From the
    project root directory (where the `gradle jar` command were executed) run this
    command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第四个命令行终端中，启动处理引擎。从项目根目录（执行 `gradle jar` 命令的地方）运行此命令：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'From the first command-line terminal (the console producer), send the following
    three messages (remember to type enter between messages and execute each one in
    just one line):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个命令行终端（控制台生产者），发送以下三条消息（记得在消息之间按回车，并且每条消息只执行一行）：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As these are valid messages, the messages typed in the producer console should
    appear in the valid-messages consumer console window, as in the example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些是有效消息，生产者控制台输入的消息应该出现在有效消息消费者控制台窗口中，如下例所示：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Extracting the weather data
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取天气数据
- en: Obtaining the geographic location from the IP address is a problem that has
    already been solved in this chapter.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从 IP 地址获取地理位置的问题已经在本章中得到了解决。
- en: In this last section, we will build another extractor that will be used in the
    following chapters. Now, suppose we want to know the current temperature of a
    given a geographic location at a specific time. To achieve this, we use the OpenWeatherService.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后，我们将构建另一个将在以下章节中使用的提取器。现在，假设我们想了解在特定时间给定地理位置的当前温度。为了实现这一点，我们使用 OpenWeatherService。
- en: 'Visit the Open Weather page: [https://openweathermap.org/](https://openweathermap.org/).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Open Weather 页面：[https://openweathermap.org/](https://openweathermap.org/)。
- en: To obtain a free API key register in a free plan; this key is needed to access
    the free API.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得一个免费的 API 密钥，请注册一个免费计划；此密钥用于访问免费 API。
- en: 'Now, create a file called `OpenWeatherService.java` in the `src/main/java/monedero/extractors`
    directory with the content of *Listing 3.7*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `src/main/java/monedero/extractors` 目录中创建一个名为 `OpenWeatherService.java`
    的文件，其内容为 *列表 3.7*：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Listing 3.7: OpenWeatherService.java'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3.7：OpenWeatherService.java
- en: The public method, `getTemperature()`, in the `OpenWeatherService` class receives
    two string values—the geographic latitude and longitude—and returns the current
    temperature for these locations. If the metric system is specified, the result
    will be in degrees celsius.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`OpenWeatherService` 类中的公共方法 `getTemperature()` 接收两个字符串值——地理纬度和经度，并返回这些位置的当前温度。如果指定了公制系统，则结果将以摄氏度为单位。'
- en: 'In a nutshell, the file includes the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，该文件包括以下内容：
- en: In line `//1`, to use the Open Weather API, a KEY is needed, registration is
    free, and gives 1,000 requests per month
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第`//1`行，要使用Open Weather API，需要一个KEY，注册是免费的，每月提供1,000次请求
- en: 'In line `//2`, to check the current weather at a particular location, open
    the following URL: [http://api.openweathermap.org/data/2.5/weather? lat=LAT&lon=LON&units=metric&appid=YOUR_API_KEY](http://api.openweathermap.org/data/2.5/weather?%C2%A0lat=LAT&lon=LON&units=metric&appid=YOUR_API_KEY)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第`//2`行，要检查特定位置的当前天气，请打开以下URL：[http://api.openweathermap.org/data/2.5/weather?
    lat=LAT&lon=LON&units=metric&appid=YOUR_API_KEY](http://api.openweathermap.org/data/2.5/weather?%C2%A0lat=LAT&lon=LON&units=metric&appid=YOUR_API_KEY)
- en: In line `//3`, the JSON returned by this URL is parsed looking for the temperature
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第`//3`行，解析此URL返回的JSON以查找温度
- en: 'Open Weather also exposes their services through an API. To read how to use
    this API, go to the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Open Weather还通过API公开他们的服务。要了解如何使用此API，请访问以下链接：
- en: '[https://openweathermap.org/api](https://openweathermap.org/api)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openweathermap.org/api](https://openweathermap.org/api)'
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how to make data extraction, how message enrichment
    works, and how to extract the geographic location given an IP Address. Also, we
    demonstrated an example of how to extract the currency price given a currency
    and running a processing engine.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何进行数据提取，消息丰富化是如何工作的，以及如何根据IP地址提取地理位置。此外，我们还演示了如何根据货币和运行处理引擎提取货币价格的一个示例。
- en: The [Chapter 4](b444c6b4-4a8f-478c-9d3f-93a432d168b8.xhtml), *Serialization*,
    talks about the schema registry. The extractors built in this chapter are used
    in the following chapters.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第[4章](b444c6b4-4a8f-478c-9d3f-93a432d168b8.xhtml)，*序列化*，讨论了模式注册表。本章中构建的提取器将在以下章节中使用。
