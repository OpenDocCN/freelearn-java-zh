- en: Chapter 10. Connecting to Facebook and Twitter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。连接到Facebook和Twitter
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Creating a Facebook app
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Facebook应用程序
- en: Creating a test Facebook app and test users
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试Facebook应用程序和测试用户
- en: Connecting to Facebook
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到Facebook
- en: Retrieving a Facebook user's profile
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Facebook用户的个人资料
- en: Retrieving the list of friends of a Facebook user
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Facebook用户的好友列表
- en: Posting a Facebook status update
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布Facebook状态更新
- en: Posting a link to Facebook
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Facebook上发布链接
- en: Posting a custom object to Facebook
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Facebook上发布自定义对象
- en: Creating a Twitter application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Twitter应用程序
- en: Connecting to Twitter
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到Twitter
- en: Retrieving a user's Twitter profile
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户的Twitter个人资料
- en: Retrieving the tweets of a Twitter user
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取Twitter用户的推文
- en: Posting a tweet to Twitter
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Twitter上发布推文
- en: Sending a private message to another Twitter user
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向另一个Twitter用户发送私信
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'In this chapter, we will make a Spring web application access Facebook and
    Twitter accounts in order to:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个Spring Web应用程序，以便访问Facebook和Twitter账户，以实现以下功能：
- en: Retrieve user data, such as name, e-mail, tweets, posts, and so on
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户数据，例如姓名、电子邮件、推文、帖子等
- en: Create user data, such as a tweet, Facebook post, and so on
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户数据，例如推文、Facebook帖子等
- en: For that, we will use Spring Social, which simplifies interacting with social
    networks from a Spring web application; it helps with the OAuth workflows and
    executes the proper REST requests behind the scenes for us.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用Spring Social，它简化了从Spring Web应用程序与社交网络交互；它帮助我们处理OAuth工作流程，并在幕后执行适当的REST请求。
- en: Creating a Facebook app
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Facebook应用程序
- en: A web application can access a Facebook account only through a Facebook app.
    In this recipe, we will open a Facebook developer account and create a Facebook
    app. We will obtain an **App ID** and **App secret**, which are the two strings
    that our web application will use to connect to Facebook in the following recipes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序只能通过Facebook应用程序访问Facebook账户。在本食谱中，我们将创建一个Facebook开发者账户并创建一个Facebook应用程序。我们将获得一个**App
    ID**和**App secret**，这两个字符串将用于在后续食谱中连接到Facebook。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Log in to your Facebook account.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 登录您的Facebook账户。
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to open a Facebook developer account and create a Facebook
    app:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是打开Facebook开发者账户并创建Facebook应用程序的步骤：
- en: Go to [https://developers.facebook.com/](https://developers.facebook.com/).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://developers.facebook.com/](https://developers.facebook.com/)。
- en: In the top navigation, in **My Apps**, select **Register as a Developer**.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部导航中，在**My Apps**下选择**注册为开发者**。
- en: Once you're registered, in the top menu, under **Apps**, select **Add a New
    App**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册后，在顶部菜单中，在**Apps**下选择**添加新应用**。
- en: Select **Website**.![How to do it…](img/5807OS_10_01.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Website**。![如何操作…](img/5807OS_10_01.jpg)
- en: Click on **Skip and Create App ID** in the top-right corner of the window:![How
    to do it…](img/5807OS_10_02.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口右上角的**跳过并创建App ID**：![如何操作…](img/5807OS_10_02.jpg)
- en: Fill in the form and click on **Create App ID**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格并点击**创建App ID**。
- en: Find the **App ID** and **App Secret** displayed on the app page.![How to do
    it…](img/5807OS_10_03.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序页面上找到显示的**App ID**和**App Secret**。![如何操作…](img/5807OS_10_03.jpg)
- en: Creating a test Facebook app and test users
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试Facebook应用程序和测试用户
- en: To work with actual Facebook users, a Facebook app needs to go through an approval
    process; you have to submit some screenshots, a logo, description, and privacy
    policy. To just test your web application, skip the approval process by using
    a **Test App** with **Test Users**. Facebook provides a convenient interface to
    create them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要与实际的Facebook用户一起工作，Facebook应用程序需要经过一个审批流程；您必须提交一些截图、标志、描述和隐私政策。为了仅测试您的Web应用程序，请使用带有**测试用户**的**测试应用程序**跳过审批流程。Facebook提供了一个方便的界面来创建它们。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need an existing Facebook app. Refer to the previous *Creating a Facebook
    app* recipe.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个现有的Facebook应用程序。请参阅之前的*创建Facebook应用程序*食谱。
- en: How to do it…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to create a test app and test users:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建测试应用程序和测试用户的步骤：
- en: Go to [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://developers.facebook.com/apps](https://developers.facebook.com/apps)。
- en: Select your existing app.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您现有的应用程序。
- en: In the left side of the navigation menu, select **Test Apps**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航菜单的左侧选择**测试应用程序**。
- en: Click on the **Create a Test App** green button.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色的**创建测试应用程序**按钮。
- en: Enter a name for your test app and create the app.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的测试应用程序输入一个名称并创建该应用程序。
- en: The test app's **App ID** and **App Secret** are displayed. They are different
    from the original app. Use them in your Spring web application to use the test
    app.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试应用的**App ID**和**App Secret**显示出来。它们与原始应用不同。在您的Spring Web应用中使用它们以使用测试应用。
- en: In the left side of the navigation menu, select **Roles**. Choose the **Test
    Users** tab and click on the **Add** button.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航菜单的左侧，选择**角色**。选择**测试用户**选项卡，然后点击**添加**按钮。
- en: Select **4 users**. Leave the other options to their default value and click
    on **Create Test Users**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**4个用户**。保留其他选项的默认值，然后点击**创建测试用户**。
- en: Choose one of the created users, click on the **Edit** button, and choose **Change
    the name or password for this user**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个已创建的用户，点击**编辑**按钮，然后选择**更改此用户的名称或密码**。
- en: Choose a password for the user and click on **Save**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户选择一个密码，然后点击**保存**。
- en: Click again on the **Edit** button of the same test user and select **Manage
    this test user's friends**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击同一测试用户的**编辑**按钮，并选择**管理此测试用户的朋友**。
- en: Type the names of a few other test users and click on **Save**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入几个其他测试用户的名称，然后点击**保存**。
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We defined a password for one user, so we'll be able to log in as this user
    and authorize our web application in the following recipes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为一名用户定义了一个密码，因此我们可以在以下配方中以该用户身份登录并授权我们的Web应用。
- en: We also added friends to that user, so we'll be able to test the *Retrieving
    the list of friends of a Facebook user* recipe.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为该用户添加了朋友，因此我们将能够测试*检索Facebook用户的朋友列表*配方。
- en: Connecting to Facebook
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Facebook
- en: Facebook allows access to a user account through an **OAuth workflow**; from
    our web application, the user is redirected to a Facebook page to authorize our
    Facebook app to access his/her account. The user is then redirected back to our
    web application. In this recipe, we'll implement this OAuth workflow.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook允许通过**OAuth工作流**访问用户账户；从我们的Web应用中，用户将被重定向到Facebook页面以授权我们的Facebook应用访问其账户。然后用户将被重定向回我们的Web应用。在这个配方中，我们将实现这个OAuth工作流。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need an existing Facebook app. Refer to the *Creating a Facebook app* and
    *Creating a test Facebook app and test users* recipes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个现有的Facebook应用。参考*创建Facebook应用*和*创建测试Facebook应用和测试用户*配方。
- en: We will use a JSP so make sure that the Maven dependency for JSTL is declared
    in your `pom.xml` file and the corresponding `ViewResolver` bean is declared in
    your Spring configuration class. For more details, refer to the *Using a JSP view*
    recipe in the [Chapter 3](ch03.html "Chapter 3. Using Controllers and Views"),
    *Using Controllers and Views*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JSP，所以请确保在您的`pom.xml`文件中声明了Maven对JSTL的依赖项，并在您的Spring配置类中声明了相应的`ViewResolver`
    bean。有关更多详细信息，请参阅[第3章](ch03.html "第3章。使用控制器和视图")中的*使用JSP视图*配方，*使用控制器和视图*。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to implement the Facebook OAuth workflow:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实现Facebook OAuth工作流的步骤如下：
- en: 'Add the Maven dependencies for Spring Social and Spring Social Facebook in
    `pom.xml`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`文件中添加Spring Social和Spring Social Facebook的Maven依赖项：
- en: '[PRE0]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a controller class:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器类：
- en: '[PRE1]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a Facebook login method containing the **App ID** and **App Secret**,
    which will redirect the user to a Facebook authorization page:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含**App ID**和**App Secret**的Facebook登录方法，该方法将用户重定向到Facebook授权页面：
- en: '[PRE2]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `callback` method for the callback URL, where the user will be redirected
    after logging in to Facebook. Using the authorization code parameter received
    from Facebook, get an access token and save it in the session:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建回调URL的`callback`方法，用户登录Facebook后将被重定向到该URL。使用从Facebook接收的授权代码参数，获取访问令牌并将其保存在会话中：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a method to display a JSP if the connection to Facebook using the access
    token in the session is successful. Otherwise, it will redirect the user to the
    login URL:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方法，如果使用会话中的访问令牌连接到Facebook成功，则显示JSP。否则，它将用户重定向到登录URL：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a JSP for the previous method:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为前一个方法创建一个JSP：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To test whether it's working, log out of your Facebook account and go to `/fb`.
    You will be redirected to Facebook. Log in, authorize the app, and you will be
    redirected back to the web application. Remember to use the login credentials
    of a test user if you are using a test app.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试它是否工作，请从您的Facebook账户注销并转到`/fb`。您将被重定向到Facebook。登录，授权应用，然后您将被重定向回Web应用。如果您使用的是测试应用，请记住使用测试用户的登录凭据。
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `login()` method builds a Facebook authorization URL with the **App ID**
    (`https://www.facebook.com/login.php?api_key=759801647423672&redirect_uri=...`)
    and redirects the user to it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`login()`方法构建一个包含**App ID**（`https://www.facebook.com/login.php?api_key=759801647423672&redirect_uri=...`）的Facebook授权URL，并将用户重定向到该URL。'
- en: 'Once the user has authorized the app, he/she is redirected back to our web
    application to a callback URL, `/fb/callback`, which we provided in the `login()`
    method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦用户授权了应用程序，他们将被重定向回我们的Web应用程序，到一个回调URL `/fb/callback`，这是我们`login()`方法中提供的。 '
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The callback URL contains a `code` parameter provided by Facebook.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 回调URL包含由Facebook提供的`code`参数。
- en: In the `callback()` method, we will use that authorization code to get an OAuth
    access token that we will store in the session. This is part of the standard OAuth
    workflow; the access token is not provided directly in the callback URL, so it's
    never shown to the user. On our server, the **App Secret** (also never shown to
    the user) is required to obtain the token from the authorization code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callback()`方法中，我们将使用该授权代码来获取一个OAuth访问令牌，并将其存储在会话中。这是标准OAuth工作流程的一部分；访问令牌不会直接在回调URL中提供，因此它永远不会显示给用户。在我们的服务器上，需要**App
    Secret**（也永远不会显示给用户）从授权代码中获取令牌。
- en: We then redirect the user to `/fb`. In the `fb()` method, we retrieve the token
    from the session and use it to connect to the Facebook user's account.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将用户重定向到`/fb`。在`fb()`方法中，我们从会话中检索令牌，并使用它连接到Facebook用户的账户。
- en: Retrieving a Facebook user's profile
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索Facebook用户的资料
- en: In this recipe, you'll learn how to retrieve a Facebook user's profile data,
    which automatically becomes available to the app once the user has authorized
    it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何检索Facebook用户的资料数据，一旦用户授权，这些数据将自动对应用程序可用。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用了*连接到Facebook*食谱中的代码。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to retrieve the profile of a Facebook user:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 检索Facebook用户资料的步骤：
- en: 'In the `FacebookController` class, add a Model argument to the `fb()` method:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FacebookController`类中，将Model参数添加到`fb()`方法：
- en: '[PRE7]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `if(facebook.isAuthorized())` block, use the Facebook object to retrieve
    the user''s profile:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if(facebook.isAuthorized())`块中，使用Facebook对象检索用户的资料：
- en: '[PRE8]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Pass the user profile to the JSP view:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户资料传递给JSP视图：
- en: '[PRE9]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the JSP, display data from the user''s profile:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中显示用户资料的详细信息：
- en: '[PRE10]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Behind the scenes, Spring Social sends a REST HTTP request to [www.facebook.com](http://www.facebook.com)
    and builds a `FacebookProfile` object from the response.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Spring Social向[www.facebook.com](http://www.facebook.com)发送REST HTTP请求，并从响应中构建一个`FacebookProfile`对象。
- en: There's more…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: For the full list of available fields, look directly in the `FacebookProfile`
    class.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有可用的字段列表，请直接查看`FacebookProfile`类。
- en: 'Some fields of the user profile require additional permissions to be accessible:
    for example, the e-mail, which requires the `email` permission. Refer to the next
    recipe where we will extend the scope parameter of the authorization request.
    The full list of the available permissions can be found at [https://developers.facebook.com/docs/facebook-login/permissions/v2.2](https://developers.facebook.com/docs/facebook-login/permissions/v2.2).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用户资料的一些字段需要额外的权限才能访问：例如，电子邮件需要`email`权限。请参考下一食谱，我们将扩展授权请求的作用域参数。可用的权限完整列表可以在[https://developers.facebook.com/docs/facebook-login/permissions/v2.2](https://developers.facebook.com/docs/facebook-login/permissions/v2.2)找到。
- en: Retrieving the list of friends of a Facebook user
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索Facebook用户朋友的列表
- en: In this recipe, you'll learn how to retrieve the friends list of a Facebook
    user from a Spring web application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何从Spring Web应用程序中检索Facebook用户的联系人列表。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用了*连接到Facebook*食谱中的代码。
- en: How to do it…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to retrieve the list of friends of a Facebook user:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 检索Facebook用户朋友列表的步骤：
- en: 'In the `FacebookController` class, in the `login()` method, add `user_friends`
    to the `scope` parameter:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FacebookController`类的`login()`方法中，将`user_friends`添加到`scope`参数：
- en: '[PRE11]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a `Model` argument to the `fb()` method:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Model`参数添加到`fb()`方法中：
- en: '[PRE12]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `if(facebook.isAuthorized())` block, use the Facebook object to get
    the list of friends:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if(facebook.isAuthorized())`块中，使用Facebook对象获取朋友的列表：
- en: '[PRE13]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Retrieve the profile of each friend:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索每位朋友的资料：
- en: '[PRE14]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Pass the list of profiles to the JSP view:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资料列表传递给JSP视图：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the JSP, display the profiles of the friends:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSP 中显示朋友的资料：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We retrieved the user's friends using `getFriends()`. This gave us only their
    names, so we used `getUserProfile()` to fetch their public profile.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `getFriends()` 获取了用户的朋友信息。这仅提供了他们的名字，因此我们使用了 `getUserProfile()` 来获取他们的公开资料。
- en: We added `user_friends` to the `scope` parameter, but the user can choose to
    prevent our Facebook app from accessing his/her friends list. For more information
    about permissions, go to [https://developers.facebook.com/docs/facebook-login/permissions/v2.3](https://developers.facebook.com/docs/facebook-login/permissions/v2.3).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `user_friends` 添加到 `scope` 参数，但用户可以选择阻止我们的 Facebook 应用访问他的/她的朋友列表。有关权限的更多信息，请访问
    [https://developers.facebook.com/docs/facebook-login/permissions/v2.3](https://developers.facebook.com/docs/facebook-login/permissions/v2.3)。
- en: Posting a Facebook status update
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布 Facebook 状态更新
- en: In this recipe, you'll learn how to post a status update on a Facebook user's
    Timeline from a Spring web application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何从 Spring 网络应用程序中在 Facebook 用户的个人时间轴上发布状态更新。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了 *连接到 Facebook* 教程中的代码。
- en: How to do it…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to post a status update on a Facebook Timeline:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Facebook 时间轴上发布状态更新的步骤如下：
- en: 'In the `FacebookController` class, in the `login()` method, add `publish_actions`
    to the `scope` parameter:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `FacebookController` 类的 `login()` 方法中，将 `publish_actions` 添加到 `scope` 参数：
- en: '[PRE17]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `fb()` method, in the `if(facebook.isAuthorized())` block, use the Facebook
    object to post the status update:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `fb()` 方法中，在 `if(facebook.isAuthorized())` 块中，使用 Facebook 对象发布状态更新：
- en: '[PRE18]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Posting a link to Facebook
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布链接到 Facebook
- en: In this recipe, you'll learn how to post a link on a Facebook user's Timeline
    from a Spring web application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何从 Spring 网络应用程序中在 Facebook 用户的个人时间轴上发布链接。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了 *连接到 Facebook* 教程中的代码。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to post a link on a Facebook user''s Timeline:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Facebook 用户的个人时间轴上发布链接的步骤如下：
- en: 'In the `FacebookController` class, in the `login()` method, add `publish_actions`
    to the `scope` parameter:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `FacebookController` 类的 `login()` 方法中，将 `publish_actions` 添加到 `scope` 参数：
- en: '[PRE19]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `fb()` method, in the `if(facebook.isAuthorized())` block, create a
    `FacebookLink` object with the link URL, title, caption, and description:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `fb()` 方法中，在 `if(facebook.isAuthorized())` 块中，使用链接 URL、标题、副标题和描述创建一个 `FacebookLink`
    对象：
- en: '[PRE20]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Use the Facebook object to post the link:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Facebook 对象发布链接：
- en: '[PRE21]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In your browser, go to `/fb`. Then, go to the user's Facebook account and verify
    that the link has been posted.![How to do it…](img/5807OS_10_04.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中，转到 `/fb`。然后，转到用户的 Facebook 账户并验证链接是否已发布。![如何操作…](img/5807OS_10_04.jpg)
- en: Posting a custom object to Facebook
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义对象发布到 Facebook
- en: 'In this recipe, you''ll learn how to post a custom object to a Facebook user''s
    Timeline from a Spring web application. A custom object is a link with more customizable
    options: picture, privacy, and location. In this recipe, we will add a picture
    to a link.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何从 Spring 网络应用程序中向 Facebook 用户的个人时间轴发布自定义对象。自定义对象是一个具有更多自定义选项的链接：图片、隐私和位置。在本教程中，我们将向链接添加图片。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了 *连接到 Facebook* 教程中的代码。
- en: How to do it…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to post a custom object:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 发布自定义对象的步骤如下：
- en: 'In the `FacebookController` class, in the `login()` method, add `publish_actions`
    to the `scope` parameter:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `FacebookController` 类的 `login()` 方法中，将 `publish_actions` 添加到 `scope` 参数：
- en: '[PRE22]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `fb()` method, in the `if(facebook.isAuthorized()`**)** block, create
    a `PostData` object using the Facebook object:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `fb()` 方法中，在 `if(facebook.isAuthorized())**)** 块中，使用 Facebook 对象创建一个 `PostData`
    对象：
- en: '[PRE23]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Initialize the different fields of the custom object:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化自定义对象的各个字段：
- en: '[PRE24]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Use the Facebook object to post the custom object:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Facebook 对象发布自定义对象：
- en: '[PRE25]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In your browser, go to `/fb`. Then, go to the user's Facebook account and verify
    that the custom object has been posted.![How to do it…](img/5807OS_10_05.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中，转到 `/fb`。然后，转到用户的 Facebook 账户并验证自定义对象是否已发布。![如何操作…](img/5807OS_10_05.jpg)
- en: Creating a Twitter application
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Twitter 应用程序
- en: A web application can access a Twitter account only through a Twitter application.
    In this recipe, we will create a Twitter application. We will obtain an **API
    key** and an **API secret**, which are two strings that our web application will
    use to connect to Twitter in the following recipes.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网络应用只能通过Twitter应用来访问Twitter账户。在这个菜谱中，我们将创建一个Twitter应用。我们将获取一个**API密钥**和一个**API密钥**，这两个字符串将用于我们的网络应用在后续菜谱中连接到Twitter。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Log in to your Twitter account.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 登录您的Twitter账户。
- en: How to do it…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Go to [https://apps.twitter.com/](https://apps.twitter.com/).
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://apps.twitter.com/](https://apps.twitter.com/)。
- en: Click on **Create New App**.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新应用**。
- en: Fill in the form and create your application. Note that `localhost` is not a
    valid domain name for the **Callback URL** field, but an IP address works.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格并创建您的应用。请注意，`localhost`不是**回调URL**字段的合法域名，但IP地址是有效的。
- en: On your application page, under **Settings**, check **Allow this application
    to be used to Sign in with Twitter**.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的应用页面上，在**设置**下，勾选**允许此应用用于通过Twitter登录**。
- en: Under **Keys and Access Tokens**, copy the **API key** and **API secret** values.
    You will use them in your web application to identify your Twitter application.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**密钥和访问令牌**下，复制**API密钥**和**API密钥**的值。您将在您的网络应用中使用它们来识别您的Twitter应用。
- en: Connecting to Twitter
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Twitter
- en: Twitter allows access to a user account through an OAuth workflow; from our
    web application, the user is redirected to a Twitter page to authorize the Twitter
    application in order to access his/her account. The user is then redirected back
    to our web application. In this recipe, we'll implement this OAuth workflow.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter允许通过OAuth工作流程访问用户账户；从我们的网络应用开始，用户将被重定向到一个Twitter页面以授权Twitter应用以访问其账户。然后用户将被重定向回我们的网络应用。在这个菜谱中，我们将实现这个OAuth工作流程。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need an existing Twitter application. Refer to the *Creating a Twitter application
    recipe*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个现有的Twitter应用。请参阅*创建Twitter应用菜谱*。
- en: We will use a JSP, so make sure that the Maven dependency for JSTL is declared
    in your `pom.xml` file and the corresponding `ViewResolver` bean is declared in
    your Spring configuration class. For more details, refer to the *Using a JSP view*
    recipe in [Chapter 3](ch03.html "Chapter 3. Using Controllers and Views"), *Using
    Controllers and Views*.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JSP，所以请确保在您的`pom.xml`文件中声明了Spring Social和Spring Social Twitter的Maven依赖项，并在您的Spring配置类中声明了相应的`ViewResolver`
    bean。有关更多详细信息，请参阅[第3章](ch03.html "第3章。使用控制器和视图")中的*使用JSP视图*菜谱，*使用控制器和视图*。
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Here are the steps to implement the Twitter OAuth workflow:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是实现Twitter OAuth工作流程的步骤：
- en: 'Add the Maven dependencies for Spring Social and Spring Social Twitter in `pom.xml`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Spring Social和Spring Social Twitter的Maven依赖项：
- en: '[PRE26]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a controller class:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器类：
- en: '[PRE27]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a Twitter login method containing your API key and API secret, which
    will redirect to Twitter''s authorization page:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含您的API密钥和API密钥的Twitter登录方法，它将重定向到Twitter的授权页面：
- en: '[PRE28]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create the `callback` method, where the user will be redirected after logging
    in to Twitter. Use the `oauth_verifier` parameter received from Twitter as well
    as the request token from `login()` to get an access token and save it in the
    session:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`callback`方法，用户登录Twitter后会重定向到这里。使用从Twitter接收到的`oauth_verifier`参数以及`login()`请求中的请求令牌来获取访问令牌并将其保存在会话中：
- en: '[PRE29]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a method that will display a JSP if it manages to connect to Twitter.
    Otherwise, it will redirect to the login URL:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方法，如果它成功连接到Twitter，将显示一个JSP。否则，它将重定向到登录URL：
- en: '[PRE30]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a JSP for the previous method:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为前一个方法创建一个JSP：
- en: '[PRE31]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `login()` method builds a Twitter authorization URL using the API key and
    redirects the user to it.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`login()`方法使用API密钥构建Twitter授权URL并将用户重定向到该URL。'
- en: '![How it works…](img/5807OS_10_06.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/5807OS_10_06.jpg)'
- en: 'Once the user has authorized our Twitter application, he/she is redirected
    back to our web application to a *callback URL*, `/tw/callback`, that we provided
    with this line:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户授权了我们的Twitter应用，他们将被重定向回我们的网络应用，到一个我们提供的*回调URL*，即`/tw/callback`，如下所示：
- en: '[PRE32]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The callback URL contains a `oauth_verifier` parameter provided by Twitter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 回调URL包含Twitter提供的`oauth_verifier`参数。
- en: In the `callback()` method, we use this authorization code to get an OAuth access
    token that we store in the session. This is part of the standard OAuth workflow;
    the token is not provided directly, so it's not shown to the user. On our server,
    the application secret (also never shown to the user) is required to obtain the
    token from the authorization code.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callback()`方法中，我们使用这个授权代码获取一个OAuth访问令牌，并将其存储在会话中。这是标准OAuth工作流程的一部分；令牌不是直接提供的，所以不会显示给用户。在我们的服务器上，需要应用程序密钥（也永远不会显示给用户）才能从授权代码中获取令牌。
- en: We then redirect the user to `/tw`. In the `tw()` method, we retrieve the token
    from the session and use it to connect to the user's Twitter account.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将用户重定向到`/tw`。在`tw()`方法中，我们从会话中检索令牌，并使用它连接到用户的Twitter账户。
- en: Retrieving a user's Twitter profile
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索用户的Twitter个人资料
- en: In this recipe, you'll learn how to retrieve a user's Twitter profile data,
    which automatically becomes available to the Twitter application once the user
    has authorized the Twitter application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何检索用户的Twitter个人资料数据，一旦用户授权Twitter应用程序，这些数据将自动对Twitter应用程序可用。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用了`*Connecting to Twitter*`菜谱中的代码。
- en: How to do it…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to retrieve data from the profile of a Twitter user:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是检索Twitter用户个人资料数据的步骤：
- en: 'In the `TwitterController` class, add a `Model` argument to the `tw()` method:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TwitterController`类中，向`tw()`方法添加一个`Model`参数：
- en: '[PRE33]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In that method, use the Twitter object to retrieve the user profile:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个方法中，使用Twitter对象检索用户个人资料：
- en: '[PRE34]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Pass the user profile to the JSP view:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户个人资料传递给JSP视图：
- en: '[PRE35]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the JSP, display data from the user profile:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中显示用户个人资料数据：
- en: '[PRE36]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Retrieving the tweets of a Twitter user
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索Twitter用户的推文
- en: In this recipe, you'll learn how to retrieve the last tweets of a Twitter user
    from a Spring web application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何从Spring Web应用程序检索Twitter用户的最后推文。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用了`*Connecting to Twitter*`菜谱中的代码。
- en: How to do it…
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to retrieve the last tweets of a Twitter user:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是检索Twitter用户最后推文的步骤：
- en: 'In the `TwitterController` class, add a `Model` argument to the `tw()` method:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TwitterController`类中，向`tw()`方法添加一个`Model`参数：
- en: '[PRE37]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In that method, use the Twitter object to retrieve the user''s tweets:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个方法中，使用Twitter对象检索用户的推文：
- en: '[PRE38]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Pass the list of tweets to the JSP view:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推文列表传递给JSP视图：
- en: '[PRE39]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the JSP, display the list of tweets:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中显示推文列表：
- en: '[PRE40]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Posting a tweet to Twitter
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Twitter发布推文
- en: In this recipe, you'll learn how to post a tweet on behalf of a user from a
    Spring web application.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何从Spring Web应用程序代表用户发布推文。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用了`*Connecting to Twitter*`菜谱中的代码。
- en: How to do it…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In the `TwitterController` class, in the `tw()` method, use the Twitter object
    to post a tweet.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TwitterController`类中，在`tw()`方法中，使用Twitter对象发布推文。
- en: '[PRE41]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Sending a private message to another Twitter user
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向另一个Twitter用户发送私信
- en: In this recipe, you'll learn how to send a private message to another Twitter
    user from a Spring web application. Note that the user who is the recipient has
    to be a follower of the user who is the sender.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何从Spring Web应用程序向另一个Twitter用户发送私信。请注意，接收消息的用户必须是发送者的关注者。
- en: Getting Ready
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Getting Ready
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用了`*Connecting to Twitter*`菜谱中的代码。
- en: How to do it…
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In the **TwitterController** class, in the **tw()** method, use the Twitter
    object to send a private message to another Twitter user:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在`**TwitterController**`类中，在`**tw()**`方法中，使用Twitter对象向另一个Twitter用户发送私信：
- en: '[PRE42]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
