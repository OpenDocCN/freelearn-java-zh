- en: Working with Kotlin in Spring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring中使用Kotlin
- en: Kotlin is a statically-typed JVM language, enabling code that is expressive,
    short, and readable. Spring Framework 5.0 has good support for Kotlin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是一种静态类型的JVM语言，可以编写富有表现力、简短和可读的代码。Spring Framework 5.0对Kotlin有很好的支持。
- en: In this chapter, we will explore some of the important features of Kotlin and
    learn how to create a basic REST service with Kotlin and Spring Boot.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Kotlin的一些重要特性，并学习如何使用Kotlin和Spring Boot创建基本的REST服务。
- en: 'By the end of this chapter, you will understand the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，您将了解以下内容：
- en: What is Kotlin?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin是什么？
- en: How does it compare with Java?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与Java相比如何？
- en: How to create a Kotlin project in Eclipse?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Eclipse中创建Kotlin项目？
- en: How to create a Spring Boot project with Kotlin?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Spring Boot中创建一个Kotlin项目？
- en: How to implement and unit test a simple Spring Boot REST service using Kotlin?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Kotlin实现和单元测试一个简单的Spring Boot REST服务？
- en: Kotlin
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin
- en: Kotlin is an open source, statically-typed language that can be used to build
    applications that run on the JVM, Android, and JavaScript platforms. Kotlin is
    developed by JetBrains under the Apache 2.0 license and the source code is available
    on GitHub ([https://github.com/jetbrains/kotlin](https://github.com/jetbrains/kotlin)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是一种开源的静态类型语言，可用于构建在JVM、Android和JavaScript平台上运行的应用程序。Kotlin由JetBrains在Apache
    2.0许可下开发，源代码可在GitHub上获得（[https://github.com/jetbrains/kotlin](https://github.com/jetbrains/kotlin)）。
- en: 'A couple of quotes from Andrey Breslav, the lead language designer for Kotlin,
    are listed as follows. These help us understand the thought process behind Kotlin:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Kotlin的首席语言设计师Andrey Breslav的一些引用。这些引用有助于我们了解Kotlin背后的思维过程：
- en: <q>The primary purpose of Project Kotlin is to create for developers a general-purpose
    language that can serve as a useful tool that is safe, concise, flexible, and
    100 percent Java-compatible.</q>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <q>Project Kotlin的主要目的是为开发人员创建一种通用语言，可以作为一种安全、简洁、灵活且100%兼容Java的有用工具。</q>
- en: Kotlin is designed to be an industrial-strength object-oriented language, and
    a "better language" than Java, but still be fully interoperable with Java code,
    allowing companies to make a gradual migration from Java to Kotlin.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin旨在成为一种工业级的面向对象语言，并且比Java更好，但仍然可以完全与Java代码互操作，允许公司逐步从Java迁移到Kotlin。
- en: 'Kotlin is one of the official languages supported by Android. The official
    Android developer page for Kotlin ([https://developer.android.com/kotlin/index.html](https://developer.android.com/kotlin/index.html))
    highlights the important reasons why Kotlin is quickly becoming popular with developers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是Android支持的官方语言之一。官方的Android开发者页面为Kotlin（[https://developer.android.com/kotlin/index.html](https://developer.android.com/kotlin/index.html)）强调了Kotlin为何迅速受到开发人员欢迎的重要原因：
- en: Kotlin is expressive, concise, extensible, powerful, and a joy to read and write.
    It has wonderful safety features in terms of nullability and immutability, which
    aligns with our investments to make Android apps healthy and performant by default.
    Best of all, it's interoperable with our existing Android languages and runtime.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是一种富有表现力、简洁、可扩展、强大且令人愉悦的阅读和编写的语言。它在空值和不可变性方面具有出色的安全功能，这与我们的投资相一致，使Android应用默认情况下健康且性能良好。最重要的是，它与我们现有的Android语言和运行时是可互操作的。
- en: 'Some of the important things about Kotlin include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin的一些重要内容包括以下内容：
- en: Complete compatibility with Java. You can call Java code from Kotlin and vice-versa.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Java完全兼容。您可以从Kotlin调用Java代码，反之亦然。
- en: Concise and readable language. Kotlin FAQ ([http://kotlinlang.org/docs/reference/faq.html](http://kotlinlang.org/docs/reference/faq.html))
    estimates a 40% reduction in the number of lines of code.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁且易读的语言。Kotlin FAQ（[http://kotlinlang.org/docs/reference/faq.html](http://kotlinlang.org/docs/reference/faq.html)）估计代码行数减少了40%。
- en: Support for both functional and object-oriented programming.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持函数式和面向对象编程。
- en: IntelliJ IDEA, Android Studio, Eclipse, and NetBeans are the IDE that have support
    for Kotlin. While the support is not as good as that for Java, it is improving
    by the day.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IntelliJ IDEA、Android Studio、Eclipse和NetBeans是支持Kotlin的IDE。虽然支持程度不及Java，但每天都在改进。
- en: All major build tools--Gradle, Maven and Ant--have support for building Kotlin
    projects.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有主要的构建工具——Gradle、Maven和Ant——都支持构建Kotlin项目。
- en: Kotlin versus Java
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin与Java的比较
- en: Java was developed by James Gosling at Sun Microsystems and released in 1995\.
    It has remained a popular language for more than two decades now.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Java是由Sun Microsystems的James Gosling开发并于1995年发布的。至今已经保持了20多年的流行。
- en: 'One of the important reasons for the popularity of Java is the Java platform
    including the Java Virtual Machine (JVM). The Java platform provides security
    and portability for the Java language. A number of languages emerged in the last
    few years that aimed to leverage the advantages of the Java platform. They compile
    to the bytecode and can run on the JVM. These languages include the following
    frameworks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Java受欢迎的一个重要原因是Java平台，包括Java虚拟机（JVM）。Java平台为Java语言提供了安全性和可移植性。在过去几年中出现了许多旨在利用Java平台优势的语言。它们编译为字节码，可以在JVM上运行。这些语言包括以下框架：
- en: Clojure
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clojure
- en: Groovy
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Groovy
- en: Scala
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scala
- en: JRuby
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JRuby
- en: Jython
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jython
- en: Kotlin aims to address some of the important issues in the Java language and
    provide a concise alternative. Some of the important differences with the Java
    language are as follows.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin旨在解决Java语言中的一些重要问题，并提供简洁的替代方案。与Java语言的一些重要区别如下。
- en: Variables and type inference
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和类型推断
- en: 'Kotlin infers the type of variable from the value assigned to it. In the following
    example, `intVariable` is assigned a type of `Int`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin从赋给它的值推断变量的类型。在以下示例中，`intVariable`被赋予了`Int`类型：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since Kotlin is type-safe, the following snippet will result in a compilation
    error if uncommented:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kotlin是类型安全的，如果取消注释以下代码片段，将导致编译错误：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Variables and immutability
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和不可变性
- en: 'Typically, like all other programming languages, the values of variables can
    be changed. The following snippet shows an example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，像其他所有编程语言一样，变量的值可以更改。以下代码片段显示了一个例子：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, if `val` (instead of `var`) is used to define a variable, then the
    variable is immutable. The value of the variable cannot be changed. This is similar
    to `final` variables in Java. Consider the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果使用`val`（而不是`var`）来定义变量，那么变量是不可变的。变量的值不能被改变。这类似于Java中的`final`变量。考虑以下代码：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Type system
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型系统
- en: In Kotlin, everything is an object. There are no primitive variables.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，一切都是对象。没有原始变量。
- en: 'The following are the important numeric types:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是重要的数字类型：
- en: Double--64 bit
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双精度--64位
- en: Float--32 bit
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点型--32位
- en: Long--64 bit
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长整型--64位
- en: Int--32 bit
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整型--32位
- en: Short--16 bit
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短整型--16位
- en: Byte--8 bit
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字节--8位
- en: 'Unlike Java, Kotlin does not treat characters as a numeric type. Any numeric
    operation on a character will result in a compilation error. Consider the following
    code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与Java不同，Kotlin不将字符视为数字类型。对字符的任何数字操作都将导致编译错误。考虑以下代码：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Java programmers are very familiar with `java.lang.NullPointerException`. Any
    operations performed on object variable referencing null will throw `NullPointerException`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Java程序员非常熟悉`java.lang.NullPointerException`。对空对象变量执行的任何操作都会抛出`NullPointerException`。
- en: 'Kotlin''s type system aims to eliminate `NullPointerException`. Normal variables
    cannot hold null. The following code snippet will not compile if uncommented:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin的类型系统旨在消除`空指针异常`。普通变量不能持有null。如果取消注释，以下代码片段将无法编译：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To be able to store null in a variable, a special declaration needs to be used.
    That is, type followed by a ?. For example, consider the following `String?` :'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在变量中存储null，需要使用特殊声明。即，类型后跟一个?。例如，考虑以下`String?`：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once a variable is declared to be nullable, Only safe (?) or non-null asserted
    (!!.) calls are allowed. Direct references will result in compilation e
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦变量声明为可空，只允许安全的(?)或非空断言(!!.)调用。直接引用将导致编译错误
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Functions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'In Kotlin, functions are declared using the `fun` keyword. The following code
    snippet shows an example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，使用`fun`关键字声明函数。以下代码片段显示了一个例子：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Function arguments are specified in brackets after the function name. `name`
    is an argument of type `String`. The function return type is specified after the
    arguments. The return type of the function is `String`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 函数参数在函数名后的括号中指定。`name`是`String`类型的参数。返回类型在参数后指定。函数的返回类型是`String`。
- en: 'The following line of code shows the invocation of the `helloBasic` function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行显示了对`helloBasic`函数的调用：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Kotlin also allows n. The following line of code shows an example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin还允许n。以下代码行显示了一个例子：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Function arguments can optionally have a defa
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数参数可以选择具有默认值
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following line of code shows the invocation of the `helloWithDefaultValue`
    function without specifying any parameters. The default value of the name argument
    is used:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行显示了对`helloWithDefaultValue`函数的调用，而不指定任何参数。使用了name参数的默认值：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If a function has just one expression, then it can be defined on a single line.
    The `helloWithOneExpression` function is a simplified version of the `helloWithDefaultValue`
    function. The return type is inferred from the value
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数只有一个表达式，那么它可以在一行上定义。`helloWithOneExpression`函数是`helloWithDefaultValue`函数的简化版本。返回类型从值中推断出来
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Functions returning void and having only one expression can also be defined
    on a single line. The following code snippet shows an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 返回void并且只有一个表达式的函数也可以在一行上定义。以下代码片段显示了一个例子：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Arrays
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: 'Arrays are represented by a Class `Array` in Kotlin. The following code snippet
    shows some of the important properties and methods in the `Array` class:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，数组由`Array`类表示。以下代码片段显示了`Array`类中的一些重要属性和方法：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: An array can be created using the `intArrayOf` fu
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`intArrayOf`函数创建数组
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code snippet shows some of the important operations that can
    be performed on an array:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了可以在数组上执行的一些重要操作：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Collections
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: 'Kotlin has simple funtions to initialize collections. The following line of
    code shows an example of initializing a list:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin有简单的函数来初始化集合。以下代码行显示了初始化列表的示例：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code snippet shows some of the important operations that can
    be performed on a list:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了可以在列表上执行的一些重要操作：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Lists, created with `listOf`, are immutable in Kotlin. To be able to change
    the content of a list, the `mutableListOf` function needs to be
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，使用`listOf`创建的列表是不可变的。要能够更改列表的内容，需要使用`mutableListOf`函数
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `mapOf` function is used to initialize a map, as shown in the following
    code snippet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapOf`函数用于初始化地图，如下面的代码片段所示：'
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following line of code shows the retrieval of a value for a specific key:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行显示了检索特定键的值：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A map can be destructured into its key value constituents in a loop. The following
    lines of code show the details:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 地图可以在循环中解构为其键值组成部分。以下代码行显示了详细信息：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: No c
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有c
- en: 'Checked exceptions in Java have to be handled or rethrown. This results in
    a lot of unnecessary code. The following example shows the `try catch` block how
    to handle the checked exceptions thrown by `new FileReader("pathToFile") - throws
    FileNotFoundException` and `reader.read() - throws IOException`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，必须处理或重新抛出已检查的异常。这导致了许多不必要的代码。以下示例显示了如何处理`try catch`块抛出的`new FileReader("pathToFile")
    - throws FileNotFoundException`和`reader.read() - throws IOException`的已检查异常：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Kotlin does not have any checked exceptions. It's up to the client code if they
    want to handle the exception. Exception handling is not forced on the client.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin没有任何已检查的异常。由客户端代码决定是否要处理异常。客户端不强制进行异常处理。
- en: Data class
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类
- en: 'Typically, we will create a number of bean classes to hold data. Kotlin introduces
    the concept of a data class. The following block of code show the declaration
    of a data class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会创建许多bean类来保存数据。Kotlin引入了数据类的概念。以下代码块显示了数据类的声明：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Kotlin provides a primary constructor, `equals()`, `hashcode()`, and a few
    other utility methods for data classes. The following lines of code shows the
    creation of an object using the constructors:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin提供了主构造函数、`equals()`、`hashcode()`和一些其他用于数据类的实用方法。以下代码显示了使用构造函数创建对象：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Kotlin also provides a `toString` :'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin还提供了`toString`：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `copy` function can be used to make a copy (clone) of an existing data
    class object. The following code snippet shows the details:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy`函数可以用来复制（克隆）现有的数据类对象。以下代码片段显示了细节：'
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'An object of a data class can easily be destructured. The following line of
    code shows the details. `println` makes use of string templates to print the value:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类的对象可以很容易地被解构。以下代码显示了细节。`println`使用字符串模板来打印值：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Creating a Kotlin project in Eclipse
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个Kotlin项目
- en: Before we are able to use Kotlin in Eclipse, we will need to install the Kotlin
    plugin in Eclipse.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中使用Kotlin之前，我们需要在Eclipse中安装Kotlin插件。
- en: Kotlin plugin
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin插件
- en: 'The Kotlin plugin can be installed from [https://marketplace.eclipse.org/content/kotlin-plugin-eclipse](https://marketplace.eclipse.org/content/kotlin-plugin-eclipse).
    Click on the Install button shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin插件可以从[https://marketplace.eclipse.org/content/kotlin-plugin-eclipse](https://marketplace.eclipse.org/content/kotlin-plugin-eclipse)安装。点击以下截图中的安装按钮：
- en: '![](img/b93380e9-2943-4ce5-b46e-973ac528b33e.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b93380e9-2943-4ce5-b46e-973ac528b33e.png)'
- en: 'Choose Kotlin Plugin for and click on the Confirm button, as shown in the following
    screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Kotlin插件并点击确认按钮，如下截图所示：
- en: '![](img/2139b4b7-0889-4353-a10d-398c3accefbe.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2139b4b7-0889-4353-a10d-398c3accefbe.png)'
- en: Accept defaults in the subsequent steps to install the plugin. The installation
    will take a little while. Restart Eclipse once the installation of the plugin
    is complete.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接受后续步骤中的默认设置来安装插件。安装需要一些时间。安装插件完成后重新启动Eclipse。
- en: Creating a Kotlin project
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Kotlin项目
- en: 'Now let''s create a new Kotlin Project. In Eclipse, click on File | New | Project...,
    as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个新的Kotlin项目。在Eclipse中，点击文件 | 新建 | 项目...，如下截图所示：
- en: '![](img/5f18bf5b-a5d6-4bca-8eab-1cfe7e0f9270.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f18bf5b-a5d6-4bca-8eab-1cfe7e0f9270.png)'
- en: Choose Kotlin Project from the list.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中选择Kotlin项目。
- en: '![](img/51bcf051-0838-4411-a6dc-b8dac1ccfd91.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51bcf051-0838-4411-a6dc-b8dac1ccfd91.png)'
- en: Provide `Kotlin-Hello-World` as the name of the project, accept all defaults,
    and click on Finish. Eclipse will create a new Kotlin project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Kotlin-Hello-World`作为项目名称，接受所有默认设置，然后点击完成。Eclipse将创建一个新的Kotlin项目。
- en: The following screenshot shows the structure of a typical Kotlin project. Both
    the `Kotlin Runtime Library` and `JRE System Library` are available in the project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了典型Kotlin项目的结构。项目中都有`Kotlin Runtime Library`和`JRE System Library`。
- en: '![](img/e1bd36af-0e46-426a-a16d-1ab3ad758d36.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1bd36af-0e46-426a-a16d-1ab3ad758d36.png)'
- en: Creating a Kotlin class
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Kotlin类
- en: 'To create a new Kotlin class, right-click on the folder and choose New | Other,
    as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的Kotlin类，右键单击文件夹，然后选择新建 | 其他，如下截图所示：
- en: '![](img/0e186fae-c3a4-4c30-9c5d-58a9fa90b84f.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e186fae-c3a4-4c30-9c5d-58a9fa90b84f.png)'
- en: 'Choose class, as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 选择类，如下截图所示：
- en: '![](img/bb0aea9a-4351-4d8f-b4d8-4014c9895b7b.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb0aea9a-4351-4d8f-b4d8-4014c9895b7b.png)'
- en: Give your new Kotlin class a name (`HelloWorld`) and a package (`com.mastering.spring.kotlin.first`).
    Click on Finish.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 给你的新Kotlin类起一个名字（`HelloWorld`）和一个包（`com.mastering.spring.kotlin.first`）。点击完成。
- en: '![](img/a10bb0f4-49ab-4969-9a6e-17019abccf64.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a10bb0f4-49ab-4969-9a6e-17019abccf64.png)'
- en: 'Create a main function, as shown in the following lines of code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个main函数，如下代码所示：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Running a Kotlin class
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Kotlin类
- en: 'Right-click on the `HelloWorld.kt` file and click on Run as | tlin as shown
    in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`HelloWorld.kt`文件，然后点击运行为 | tlin，如下截图所示：
- en: '![](img/e4dfc644-e384-4066-a4a8-28bd7ae73ac0.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4dfc644-e384-4066-a4a8-28bd7ae73ac0.png)'
- en: '`Hello, World` is printed on the console, as shown here:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hello, World`在控制台上打印出来，如下所示：'
- en: '![](img/76ed30ae-1f51-4b3c-8467-a8984927b92a.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76ed30ae-1f51-4b3c-8467-a8984927b92a.png)'
- en: Creating a Spring Boot project using Kotlin
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kotlin创建Spring Boot项目
- en: 'We will use Spring Initializr ([http://start.spring.io](http://start.spring.io))
    to initialize a Kotlin project. The following screenshot shows the Group and ArtifactId
    to choose from:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Spring Initializr（[http://start.spring.io](http://start.spring.io)）来初始化一个Kotlin项目。以下截图显示了要选择的Group和ArtifactId：
- en: '![](img/1be0b859-4870-4de0-b102-593490b7e0a1.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1be0b859-4870-4de0-b102-593490b7e0a1.png)'
- en: 'The following are a couple of important things to note:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要的事项：
- en: Choose Web as the dependency
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择Web作为依赖
- en: Choose Kotlin as the language (second drop-down at the top of the screenshot)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择Kotlin作为语言（截图顶部的第二个下拉菜单）
- en: Click on Generate Project and import the downloaded project into the eclipse
    as a Maven project
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击生成项目并将下载的项目导入Eclipse作为Maven项目
- en: 'The following screenshot shows the structure of the generated project:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了生成项目的结构：
- en: '![](img/8a0f2fa3-5f2f-48c7-b111-0462a0805d40.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a0f2fa3-5f2f-48c7-b111-0462a0805d40.png)'
- en: 'The following are some of the important things to note:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要的事项：
- en: '`src/main/kotlin`: This is the folder where all the Kotlin source code is present.
    This is similar to `src/main/java` in a Java project.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/kotlin`：这是所有Kotlin源代码的文件夹。这类似于Java项目中的`src/main/java`。'
- en: '`src/test/kotlin`: This is the folder where all the Kotlin test code is present.
    This is similar to `src/test/java` in a Java project.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/test/kotlin`：这是所有Kotlin测试代码的文件夹。这类似于Java项目中的`src/test/java`。'
- en: Resource folders are the same as a typical Java project--`src/main/resources`
    and `src/test/resources`.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源文件夹与典型的Java项目相同--`src/main/resources`和`src/test/resources`。
- en: Instead of JRE, Kotlin Runtime Library is used as the execution environment.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin运行库用作执行环境，而不是JRE。
- en: Dependencies and plugins
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖和插件
- en: In addition to the normal dependencies in a Java Spring Boot project, there
    are two additional dependencies in `pom.xml`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Java Spring Boot项目中的常规依赖项外，`pom.xml`中还有两个额外的依赖项。
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following are a couple of important things to note:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要事项需要注意：
- en: '`kotlin-stdlib-jre8` is the standard library supporting the new JDK APIs added
    in Java 8'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kotlin-stdlib-jre8`是支持Java 8中添加的新JDK API的标准库。'
- en: '`kotlin-reflect` is the runtime component for using reflection features on
    a Java platform'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kotlin-reflect`是在Java平台上使用反射功能的运行时组件'
- en: 'In addition to `spring-boot-maven-plugin`, `kotlin-maven-plugin` is added in
    as a plugin in `pom.xml`. `kotlin-maven-plugin` compiles Kotlin sources and modules.
    This plugin is configured to be used during the `compile` and `test-compile` phases.
    The following piece of code shows the details:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`spring-boot-maven-plugin`，`kotlin-maven-plugin`也作为`pom.xml`中的插件添加。`kotlin-maven-plugin`编译Kotlin源代码和模块。该插件配置为在`compile`和`test-compile`阶段使用。以下代码显示了详细信息：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Spring Boot application class
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot应用程序类
- en: 'The following code block shows the generated `SpringBootApplication` class,
    `FirstWebServiceWithKotlinApplication`. We made the class open to enable Spring
    Boot to override it:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了生成的`SpringBootApplication`类`FirstWebServiceWithKotlinApplication`。我们将该类设置为开放以使Spring
    Boot能够覆盖它：
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following are a few important things to note:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要事项需要注意：
- en: Package, import, and annotations are the same as that of a Java class.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包、导入和注解与Java类相同。
- en: The declaration of the main function in Java was `public static void main(String[]
    args)`. In the preceding example, we are using the Kotlin function syntax. Kotlin
    does not have static methods. Any function declared outside of a class can be
    called without needing a class reference.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java中，主函数的声明是`public static void main(String[] args)`。在上面的示例中，我们使用了Kotlin函数语法。Kotlin没有静态方法。在类外声明的任何函数都可以在不需要类引用的情况下调用。
- en: Launching `SpringApplication` in Java is done using `SpringApplication.run(FirstWebServiceWithKotlinApplication.class,
    args)`.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java中启动`SpringApplication`是使用`SpringApplication.run(FirstWebServiceWithKotlinApplication.class,
    args)`完成的。
- en: '`::` is used to obtain a Kotlin class runtime reference. So, `FirstWebServiceWithKotlinApplication::class`
    gives us a runtime reference to the Kotlin class. To obtain a Java class reference,
    we need to use the `.java` property on the reference. So, in Kotlin, the syntax
    is `FirstWebServiceWithKotlinApplication::class.java`.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`::`用于获取Kotlin类的运行时引用。因此，`FirstWebServiceWithKotlinApplication::class`给我们提供了对Kotlin类的运行时引用。要获取Java类引用，我们需要在引用上使用`.java`属性。因此，在Kotlin中，语法是`FirstWebServiceWithKotlinApplication::class.java`。'
- en: In Kotlin, `*` is called a spread operator. It is used when passing an array
    to a function accepting variable arguments. So, we will use `*args` to pass the
    array to the `run` method.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kotlin中，`*`被称为扩展操作符。当将数组传递给接受可变参数的函数时使用。因此，我们将使用`*args`将数组传递给`run`方法。
- en: The application can be launched up by running `FirstWebServiceWithKotlinApplication`
    as a Kotlin application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序可以通过将`FirstWebServiceWithKotlinApplication`作为Kotlin应用程序运行来启动。
- en: Spring Boot application test class
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot应用程序测试类
- en: 'The following code snippet shows the generated `SpringBootApplicationTest`
    class, `FirstWebServiceWithKotlinApplicationTests`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了生成的`SpringBootApplicationTest`类`FirstWebServiceWithKotlinApplicationTests`：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following are a few important things to note:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要事项需要注意：
- en: Package, import, and annotations are the same as that of a Java class.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包、导入和注解与Java类相同。
- en: '`::` is used to obtain a Kotlin class runtime reference. Compared to `@RunWith(SpringRunner.class)`
    in Java, the Kotlin code uses `@RunWith(SpringRunner::class)`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`::`用于获取Kotlin类的运行时引用。与Java中的`@RunWith(SpringRunner.class)`相比，Kotlin代码使用`@RunWith(SpringRunner::class)`。'
- en: The declaration of the test class uses the Kotlin function syntax.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试类的声明使用了Kotlin函数语法。
- en: Implementing a REST service using Kotlin
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kotlin实现REST服务
- en: We will start with creating a service returning a hardcoded string. After that,
    we will discuss an example returning a proper JSON response. We will also look
    at an example of passing a path parameter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个返回硬编码字符串的服务。之后，我们将讨论返回适当的JSON响应的示例。我们还将看一个传递路径参数的示例。
- en: Simple method returning a string
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回字符串的简单方法
- en: 'Let''s start with creating a simple REST service returning a `welcome` message:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个简单的REST服务返回`welcome`消息开始：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'A comparable Java method is shown as follows. A major difference is how we
    are able to define a function in one line in Kotlin--`fun welcome() = "Hello World"`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可比较的Java方法。一个主要的区别是我们如何能够在Kotlin中一行定义一个函数--`fun welcome() = "Hello World"`：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we run `FirstWebServiceWithKotlinApplication.kt` as a Kotlin application,
    it will start up the embedded Tomcat container. We can launch up the URL (`http://localhost:8080/welcome`)
    in the browser, as shown in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`FirstWebServiceWithKotlinApplication.kt`作为Kotlin应用程序运行，它将启动嵌入式Tomcat容器。我们可以在浏览器中启动URL(`http://localhost:8080/welcome`)，如下图所示：
- en: '![](img/72ba2bc4-82eb-484d-8120-a8b02f17a8e7.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72ba2bc4-82eb-484d-8120-a8b02f17a8e7.png)'
- en: Unit testing
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Let''s quickly write a unit test to test the preceding controller method:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速编写一个单元测试来测试前面的控制器方法：
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the preceding unit test, we will launch up a Mock MVC instance with `BasicController`.
    A few quick things to note are as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述单元测试中，我们将使用`BasicController`启动一个Mock MVC实例。以下是一些需要注意的快速事项：
- en: The annotations `@RunWith(SpringRunner.class)` and `@WebMvcTest(BasicController::class)`
    are similar to Java, except for the class references.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解`@RunWith(SpringRunner.class)`和`@WebMvcTest(BasicController::class)`与Java类似，只是类引用不同。
- en: '`@Autowired lateinit var mvc: MockMvc`: This autowires the `MockMvc` bean that
    can be used to make requests. Properties declared as non-null must be initialized
    in the constructor. For properties that are autowired through the dependency injection,
    we can avoid null checks by adding `lateinit` to the variable declaration.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired lateinit var mvc: MockMvc`: 这样自动装配了`MockMvc` bean，可以用于发出请求。声明为非空的属性必须在构造函数中初始化。对于通过依赖注入自动装配的属性，我们可以通过在变量声明中添加`lateinit`来避免空值检查。'
- en: '`fun `GET welcome returns "Hello World"`()`: This is a unique feature of Kotlin.
    Instead of giving the test method a name, we are giving a description for the
    test. This is awesome because, ideally, the test method will not be called from
    another method.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fun `GET welcome returns "Hello World"`()`: 这是Kotlin的一个独特特性。我们不是给测试方法命名，而是给测试添加一个描述。这很棒，因为理想情况下，测试方法不会被其他方法调用。'
- en: '`mvc.perform(MockMvcRequestBuilders.get("/welcome").accept(MediaType.APPLICATION_JSON))`:
    This performs a request to `/welcome` with the Accept header value, `application/json`,
    which is similar to the Java code.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvc.perform(MockMvcRequestBuilders.get("/welcome").accept(MediaType.APPLICATION_JSON))`:
    这执行了一个带有Accept头值`application/json`的`/welcome`请求，这与Java代码类似。'
- en: '`andExpect(status().isOk())`: This expects that the status of the response
    is `200` (success).'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`andExpect(status().isOk())`: 这期望响应的状态是`200`（成功）。'
- en: '`andExpect(content().string(equalTo("Hello World")))`: This expects that the
    content of the response is equal to `"Hello World"`.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`andExpect(content().string(equalTo("Hello World")))`: 这期望响应的内容等于`"Hello World"`。'
- en: Integration testing
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: 'When we integration testing, we will want to launch the embedded server with
    all the controllers and beans that are configured. The following block of code
    shows how we can create a simple integration test:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行集成测试时，我们希望启动嵌入式服务器，并配置所有的控制器和bean。以下代码块展示了我们如何创建一个简单的集成测试：
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'A few important things to note are as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要事项需要注意：
- en: '`@RunWith(SpringRunner::class), @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)`:
    `SpringBootTest` provides additional functionality on top of the Spring `TestContext`.
    It provides support to configure the port for fully running container and TestRestTemplate
    (to execute requests). This is similar to the Java code, except for the class
    reference.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith(SpringRunner::class), @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)`:
    `SpringBootTest`在Spring `TestContext`的基础上提供了额外的功能。它支持配置完全运行容器和TestRestTemplate（用于执行请求）的端口。这与Java代码类似，只是类引用不同。'
- en: '`@Autowired lateinit var restTemplate: TestRestTemplate`: `TestRestTemplate`
    is typically used in integration tests. It provides additional functionality on
    top of the `RestTemplate`, which is especially useful in the integration of the
    test context. It does not follow redirects so that we can assert the response
    location. `lateinit` allows us to avoid null checks for the autowired variables.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired lateinit var restTemplate: TestRestTemplate`: `TestRestTemplate`通常用于集成测试。它在`RestTemplate`的基础上提供了额外的功能，特别适用于测试上下文的集成。它不会遵循重定向，这样我们就可以断言响应位置。`lateinit`允许我们避免对自动装配变量进行空值检查。'
- en: Simple REST method returning an object
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回对象的简单REST方法
- en: 'We will create a simple POJO `WelcomeBean` with a member field called message
    and one argument constructor, as shown in the following line of code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的POJO `WelcomeBean`，其中包含一个名为message的成员字段和一个参数构造函数，如下面的代码行所示：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The corresponding Java class is listed as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的Java类列在下面：
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Kotlin automatically adds constructors and other utility methods to data classes.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin会自动为数据类添加构造函数和其他实用方法。
- en: 'In the previous method, we returned a string. Let''s create a method that returns
    a proper JSON response. Take a look at the following method:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的方法中，我们返回了一个字符串。让我们创建一个返回正确的JSON响应的方法。看一下下面的方法：
- en: '[PRE41]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The method returns a simple `WelcomeBean` initialized with an `"Hello World"`
    message.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法返回一个简单的`WelcomeBean`，其中包含一个`"Hello World"`的消息。
- en: Executing a request
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行请求
- en: 'Let''s send a test request and see what response we get. The following screenshot
    shows the output:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发送一个测试请求，看看我们得到什么响应。以下截图显示了输出：
- en: '![](img/99cedfa7-f5c9-400a-be14-75aa25236fee.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99cedfa7-f5c9-400a-be14-75aa25236fee.png)'
- en: 'The response for the `http://localhost:8080/welcome-with-object` URL is shown
    as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/welcome-with-object` URL的响应如下所示：'
- en: '[PRE42]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Unit testing
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Let''s quickly write a unit test checking for the JSON response and then add
    the test to `BasicControllerTest`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速编写一个单元测试，检查JSON响应，然后将测试添加到`BasicControllerTest`中：
- en: '[PRE43]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This test is very similar to the earlier unit test, except that we are using
    `containsString` to check whether the content contains an `"Hello World"` substring.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试与之前的单元测试非常相似，不同之处在于我们使用`containsString`来检查内容是否包含`"Hello World"`子字符串。
- en: Integration testing
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: 'Let''s shift our focus to writing an integration test and then add a method
    to `BasicControllerIT`, as shown in the following code snippet:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把注意力转移到编写一个集成测试，然后在`BasicControllerIT`中添加一个方法，如下面的代码片段所示：
- en: '[PRE44]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This method is similar to the earlier integration test, except that we are asserting
    for a substring in the `assertThat` method.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法类似于之前的集成测试，不同之处在于我们在`assertThat`方法中断言一个子字符串。
- en: Get method with path variables
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有路径变量的GET方法
- en: 'Let''s shift our attention to path variables. Path variables are used to bind
    values from the URI to a variable on the controller method. In the following example,
    we want to parameterize the name so that we can customize the welcome message
    with a name:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把注意力转移到路径变量。路径变量用于将URI中的值绑定到控制器方法上的变量。在下面的例子中，我们想要对名称进行参数化，以便我们可以使用名称定制欢迎消息：
- en: '[PRE45]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following are a few important things to note:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要事项需要注意：
- en: '`@GetMapping("/welcome-with-parameter/name/{name}")`: `{name}` indicates that
    this value will be the variable. We can have multiple variable templates in a
    URI.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@GetMapping("/welcome-with-parameter/name/{name}")`: `{name}`表示这个值将是变量。我们可以在URI中有多个变量模板。'
- en: '`welcomeWithParameter(@PathVariable String name)`: `@PathVariable` ensures
    that the variable value from the URI is bound to the variable name.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`welcomeWithParameter(@PathVariable String name)`: `@PathVariable` 确保来自 URI
    的变量值绑定到变量名。'
- en: '`fun welcomeWithParameter(@PathVariable name: String) = WelcomeBean("Hello
    World, $name")`: We are using the Kotlin single expression function declaration
    to directly return the created `WelcomeBean`. `"Hello World, $name"` makes use
    of Kotlin string templates. `$name` will be replaced by the value of the path
    variable name.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fun welcomeWithParameter(@PathVariable name: String) = WelcomeBean("Hello
    World, $name")`: 我们使用 Kotlin 的单表达式函数声明直接返回创建的 `WelcomeBean`。`"Hello World, $name"`
    使用了 Kotlin 字符串模板。`$name` 将被路径变量 name 的值替换。'
- en: Executing a request
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行请求
- en: 'Let''s send a test request and see what response we get. The following screenshot
    shows the response:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发送一个测试请求，看看我们得到什么响应。以下截图显示了响应：
- en: '![](img/b122ca61-e936-420f-aa17-faa7369dbb9d.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b122ca61-e936-420f-aa17-faa7369dbb9d.png)'
- en: 'The response for the `http://localhost:8080/welcome-with-parameter/name/Buddy`
    URL is as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/welcome-with-parameter/name/Buddy` URL 的响应如下：'
- en: '[PRE46]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As expected, the name in the URI is used to form the message in the response.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，URI 中的名称用于形成响应中的消息。
- en: Unit testing
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Let''s quickly write a unit test for the preceding method. We will want to
    pass a name as a part of the URI and check whether the response contains the name.
    The following code shows how we can do that:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速为上述方法编写一个单元测试。我们将要在 URI 的一部分中传递一个名称，并检查响应是否包含该名称。以下代码显示了我们如何做到这一点：
- en: '[PRE47]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'A few important things to note are as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的几个重要事项如下：
- en: '`MockMvcRequestBuilders.get("/welcome-with-parameter/name/Buddy")`: This matches
    against the variable template in the URI. We will pass in the name, .'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockMvcRequestBuilders.get("/welcome-with-parameter/name/Buddy")`: 这与 URI
    中的变量模板匹配。我们将传入名称 `Buddy`。'
- en: '`.andExpect(content().string(containsString("Hello World, Buddy")))`: We expect
    the response to contain the message with the name.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.andExpect(content().string(containsString("Hello World, Buddy")))`: 我们期望响应包含带有名称的消息。'
- en: Integration testing
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: 'The integration test for the preceding method is very simple. Take a look at
    the following `test` method:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法的集成测试非常简单。看一下以下的 `test` 方法：
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A few important things to note are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的几个重要事项如下：
- en: '`restTemplate.getForObject("/welcome-with-parameter/name/Buddy", WelcomeBean::class.java)`:
    This matches against the variable template in the URI. We are passing in the name,
    `Buddy`.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restTemplate.getForObject("/welcome-with-parameter/name/Buddy", WelcomeBean::class.java)`:
    这与 URI 中的变量模板匹配。我们传入名称 `Buddy`。'
- en: '`assertThat(response.getBody(), containsString("Hello World, Buddy"))`: We
    expect the response to contain the message with the name.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertThat(response.getBody(), containsString("Hello World, Buddy"))`: 我们期望响应包含带有名称的消息。'
- en: In this section, we looked at the basics of creating a simple REST service with
    Spring Boot. We also ensured that we have good unit tests and integration tests.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了使用 Spring Boot 创建简单 REST 服务的基础知识。我们还确保了我们有良好的单元测试和集成测试。
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Kotlin helps a developer write concise, readable code. It fits hand in glove
    with the philosophy of Spring Boot to make application development easier and
    faster.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 帮助开发人员编写简洁、可读的代码。它与 Spring Boot 的理念完美契合，使应用程序开发更加简单快速。
- en: In this chapter, we started with understanding Kotlin and how it compares with
    Java. We built a couple of simple REST services with Spring Boot and Kotlin. We
    saw examples of how code with Kotlin for services and unit tests is concise.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从理解 Kotlin 及其与 Java 的比较开始。我们使用 Spring Boot 和 Kotlin 构建了一些简单的 REST 服务。我们看到了
    Kotlin 用于服务和单元测试的代码是简洁的示例。
- en: Kotlin has made great strides in the last couple of years--becoming an officially
    supported language for Android was a great first step. Support for Kotlin in Spring
    Framework 5.0 is the icing on the cake. The future of Kotlin depends on how successful
    it is with the larger Java development community. It has the potential to be an
    important tool in your arsenal.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 在过去几年取得了巨大进步--成为 Android 官方支持的语言是一个很好的第一步。Spring Framework 5.0 对 Kotlin
    的支持是锦上添花。Kotlin 的未来取决于它在更大的 Java 开发社区中的成功程度。它有潜力成为你工具库中的重要工具。
