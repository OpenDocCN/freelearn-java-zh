- en: Source Control Management in Eclipse
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse 中的源代码管理
- en: In the previous chapter, we learned how to create simple web applications using
    JSP, JSF, and servlets. We also learned how to use Maven for build and project
    management.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用 JSP、JSF 和 servlets 创建简单的 Web 应用程序。我们还学习了如何使用 Maven 进行构建和项目管理。
- en: 'In this chapter, we will learn how to integrate Eclipse with SVN and Git. The
    chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何将 Eclipse 与 SVN 和 Git 集成。本章涵盖了以下主题：
- en: Installing Eclipse plugins for SVN and Git
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Eclipse 的 SVN 和 Git 插件
- en: Performing source control tasks such as checking out files, committing changes,
    and so on from Eclipse
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中执行源控制任务，例如检出文件、提交更改等
- en: Synchronizing projects with remote repositories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与远程仓库同步项目
- en: '**Source Control Management** (**SCM**) is an essential part of software development.
    By using SCM tools, you make sure that you have access to versions of your code
    at important milestones. SCM also helps to manage the source code when you are
    working in a team, by providing you with tools to make sure you do not overwrite
    the work done by others. Whether your project is small or large, whether you are
    working alone or in a large team, using SCM would benefit you.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**源代码管理**（**SCM**）是软件开发的一个基本组成部分。通过使用 SCM 工具，您可以确保在重要的里程碑处能够访问到代码的版本。SCM 还有助于在团队工作中管理源代码，通过提供工具确保您不会覆盖他人的工作。无论您的项目大小如何，无论您是单独工作还是在一个大型团队中，使用
    SCM 都会为您带来好处。'
- en: Eclipse has had support for integrating various SCM tools for a long time—this
    includes support for CVS, Microsoft SourceSafe, Perforce, and **Subversion** (**SVN**).
    The recent versions of Eclipse have built-in support for Git too.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 很早就支持集成各种 SCM 工具——这包括对 CVS、Microsoft SourceSafe、Perforce 和 **Subversion**（**SVN**）的支持。Eclipse
    的最新版本也内置了对 Git 的支持。
- en: We will start by learning how to use SVN from Eclipse.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先学习如何在 Eclipse 中使用 SVN。
- en: The Eclipse subversion plugin
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse 子版本控制插件
- en: In this section, we will learn how to install and use the SVN Eclipse plugin.
    We will create a small project and see how to check in a project to SVN from within
    Eclipse. We will also see how to sync with the existing SVN repository.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何安装和使用 SVN Eclipse 插件。我们将创建一个小型项目，并查看如何在 Eclipse 内部将项目检入 SVN。我们还将了解如何与现有的
    SVN 仓库同步。
- en: You will need access to an SVN repository to follow the steps in this chapter.
    If you do not have access to an SVN repository, you can choose from some of the
    free SVN offerings online. This book does not promote or suggest using any particular
    online SVN hosting, but for the purpose of explaining SVN Eclipse plugin features,
    the author has used [https://riouxsvn.com](https://riouxsvn.com). However, the
    plugin would work the same way with any SVN server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问一个 SVN 仓库才能遵循本章中的步骤。如果您没有访问 SVN 仓库的权限，您可以从网上的一些免费 SVN 提供中选择。本书不推荐或建议使用任何特定的在线
    SVN 托管，但为了解释 SVN Eclipse 插件的功能，作者使用了 [https://riouxsvn.com](https://riouxsvn.com)。然而，该插件与任何
    SVN 服务器的工作方式相同。
- en: Installing the Eclipse Subversion plugin
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Eclipse Subversion 插件
- en: 'Open the Eclipse Marketplace by selecting the Help | Eclipse Marketplace menu.
    Search for `subversion`:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择 Help | Eclipse Marketplace 菜单打开 Eclipse 市场place。搜索 `subversion`：
- en: '![](img/00057.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: 'Figure 3.1: Installing the Subversion plugin'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：安装 Subversion 插件
- en: 'Install the plugin. Before we configure an SVN repository in Eclipse, we need
    to select/install an SVN Connector. Go to Eclipse Preferences and type `svn` in
    the filter box. Then, go to the SVN Connector tab:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装插件。在我们配置 Eclipse 中的 SVN 仓库之前，我们需要选择/安装一个 SVN 连接器。转到 Eclipse 首选项，并在过滤器框中输入
    `svn`。然后，转到 SVN 连接器选项卡：
- en: '![](img/00058.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: 'Figure 3.2: SVN Connector preferences'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：SVN 连接器首选项
- en: If no connectors are installed, then you will see a Get Connectors... button.
    Click the button.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有安装连接器，您将看到一个 Get Connectors... 按钮。点击该按钮。
- en: 'Eclipse displays a number of available connectors. We will choose the SVN Kit connector
    and install it (click the Finish button):'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse 显示了多个可用的连接器。我们将选择 SVN Kit 连接器并安装它（点击 Finish 按钮）：
- en: '![](img/00059.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'Figure 3.3: The SVN Connector Discovery wizard'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：SVN 连接器发现向导
- en: 'We will now configure an existing SVN repository in Eclipse. Select the Window
    | Open Perspective | Other menu and then select the SVN Repository Exploring perspective:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在 Eclipse 中配置现有的 SVN 仓库。选择 Window | Open Perspective | Other 菜单，然后选择 SVN
    Repository Exploring 视图：
- en: '![](img/00060.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: 'Figure 3.4: Open SVN perspective'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：打开 SVN 视图
- en: Adding projects to an SVN repository
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将项目添加到SVN仓库
- en: 'Perform the following steps to add projects to an SVN repository:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将项目添加到SVN仓库：
- en: Right-click in the SVN Repositories view and select New | Repository Location.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SVN仓库视图中右键单击，然后选择新建 | 仓库位置。
- en: 'Enter the URL of your SVN repository, your username, and password. If you need
    to set SSH or SSL information to connect to your SVN repository, then click on
    the appropriate tab and enter the information. Click Finish to add the repository
    to Eclipse:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的SVN仓库的URL、用户名和密码。如果您需要设置SSH或SSL信息以连接到您的SVN仓库，请单击相应的选项卡并输入信息。单击“完成”将仓库添加到Eclipse：
- en: '![](img/00061.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00061.jpeg)'
- en: 'Figure 3.5: Configuring an SVN repository'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：配置SVN仓库
- en: Let's now create a simple Java project that we would check into the SVN repository.
    In this chapter, it is not important what code you write in the project; we are
    going to use the project only to understand how to check in project files to SVN
    and then see how to sync the project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个简单的Java项目，我们将将其检查入SVN仓库。在本章中，您在项目中编写的代码并不重要；我们只是使用项目来了解如何将项目文件检查入SVN，然后查看如何同步项目。
- en: 'Create a simple Java project as shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个如图所示的简单Java项目：
- en: '![](img/00062.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00062.jpeg)'
- en: 'Figure 3.6: A sample project for SVN testing'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：SVN测试的示例项目
- en: The project has one source file. We will now check in this project in SVN. Right-click
    on the project and select Team | Share Project....
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该项目有一个源文件。我们现在将此项目检查入SVN。在项目上右键单击，然后选择团队 | 共享项目...。
- en: 'Select SVN and click the Next button. The wizard gives you options to either
    create a new SVN repository or select an already configured SVN repository:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择SVN并单击“下一步”按钮。向导为您提供选项，要么创建一个新的SVN仓库，要么选择一个已经配置好的SVN仓库：
- en: '![](img/00063.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00063.jpeg)'
- en: 'Figure 3.7: Share Project with SVN repository'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：与SVN仓库共享项目
- en: 'We are going to use the already configured repository. So, select the repository:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用已经配置好的仓库。因此，选择仓库：
- en: '![](img/00064.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00064.jpeg)'
- en: 'Figure 3.8: Selecting an SVN repository or creating a new one'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：选择SVN仓库或创建一个新的
- en: 'We can click Next and configure the advanced option, but we will keep the configuration
    simple and click Finish. You will be prompted to check in existing files in the
    project:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以单击“下一步”并配置高级选项，但我们将保持配置简单并单击“完成”。您将被提示检查项目中的现有文件：
- en: '![](img/00065.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00065.jpeg)'
- en: 'Figure 3.9: Share Project with SVN repository'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：与SVN仓库共享项目
- en: 'Select the files you want to check in and enter the check-in comments. Then
    click OK. To see the checked in files in the SVN repository, switch to the SVN
    Repository Exploring perspective and then to the SVN Repositories view:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要检查入的文件并输入检查入注释。然后单击“确定”。要查看SVN仓库中的已检查入文件，切换到SVN仓库浏览视角，然后切换到SVN仓库视图：
- en: '![](img/00066.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00066.jpeg)'
- en: 'Figure 3.10: Checked in files in the SVN Repositories view'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：SVN仓库视图中的已检查入文件
- en: Committing changes to an SVN repository
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将更改提交到SVN仓库
- en: Let's now modify a file and check in the changes. Switch back to the Java perspective
    and open `SVNTestApplication.java` from Package Explorer or Navigator. Modify
    the file and save the changes. To compare the files or the folders in your working
    directory with those in the repository, right-click on `file/folder/project` in
    Navigator and select Compare With | Latest from Repository.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修改一个文件并检查更改。切换回Java视角，从包资源管理器或导航器打开`SVNTestApplication.java`。修改文件并保存更改。要比较工作目录中的文件或文件夹与仓库中的文件或文件夹，在导航器中右键单击`文件/文件夹/项目`，然后选择与
    | 仓库最新版本比较。
- en: 'Now that we have modified `SVNTestApplication.java`, let''s see how it differs
    from the one in the repository:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修改了`SVNTestApplication.java`，让我们看看它与仓库中的版本有何不同：
- en: '![](img/00067.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00067.jpeg)'
- en: 'Figure 3.11: Comparing SVN files'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：比较SVN文件
- en: 'Let''s add a new file now, say `readme.txt`, in the root of the project. To
    add the file to the repository, right-click on the file and select Team | Add
    to Version Control...:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在项目的根目录下添加一个新文件，比如`readme.txt`。要将文件添加到仓库，右键单击文件并选择团队 | 添加到版本控制...：
- en: '![](img/00068.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00068.jpeg)'
- en: 'Figure 3.12: Adding files to an SVN repository'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12：将文件添加到SVN仓库
- en: Synchronizing with an SVN repository
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与SVN仓库同步
- en: 'To synchronize your local project with the remote repository, right-click on
    the project and select Team | Synchronize with Repository. This will update the
    project with files in the remote repository, show files that are new in the local
    folder, and also show the changed files:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要将本地项目与远程仓库同步，右键单击项目并选择 Team | Synchronize with Repository。这将使用远程仓库中的文件更新项目，显示本地文件夹中新的文件，并显示已更改的文件：
- en: '![](img/00069.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00069.jpeg)'
- en: 'Figure 3.13: The Synchronize view'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13：同步视图
- en: You can filter the list as incoming mode (changes from the remote repository),
    outgoing mode (changes in your working directory), or both. As you can see in
    *Figure 3.13*, we have two files that are changed in the working directory; one
    modified and one new. To commit the changes, right-click on the project and select
    Commit.... If you want to commit from Navigator or Package Explorer, then right-click
    on the project and select Team | Commit.... Enter the check-in comment and click
    OK. To update the project (receive all the changes from the remote repository),
    right-click on the project and select Team | Update.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按传入模式（来自远程仓库的更改）、传出模式（工作目录中的更改）或两者都进行过滤。如图 3.13 所示，我们在工作目录中有两个已更改的文件；一个已修改，一个新创建。要提交更改，右键单击项目并选择
    Commit.... 如果你想从导航器或包资源管理器提交，则右键单击项目并选择 Team | Commit.... 输入提交注释并点击 OK。要更新项目（接收来自远程仓库的所有更改），右键单击项目并选择
    Team | Update。
- en: 'To see the revision history of the file or folder, right-click Navigator or
    Package Explorer and select Team | Show History:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看文件或文件夹的修订历史，右键单击导航器或包资源管理器并选择 Team | Show History：
- en: '![](img/00070.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00070.jpeg)'
- en: 'Figure 3.14: SVN file revision history'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14：SVN 文件修订历史
- en: Checking out a project from SVN
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 SVN 检出项目
- en: 'It is easy to check out projects from an SVN repository into a new workspace.
    In the SVN Repositories view, click on the project you want to check out and select
    the Check Out option:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SVN 仓库检出项目到新工作空间很容易。在 SVN Repositories 视图中，点击你想要检出的项目，然后选择 Check Out 选项：
- en: '![](img/00071.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00071.jpeg)'
- en: 'Figure 3.15: SVN file revision history'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15：SVN 文件修订历史
- en: This option checks out the project in the current workspace. You can also use
    the Import project option to check out the project from SVN. Select the File |
    Import menu option and then select the SVN | Project from SVN option.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将在当前工作空间中检出项目。你还可以使用导入项目选项从 SVN 检出项目。选择 File | Import 菜单选项，然后选择 SVN | Project
    from SVN 选项。
- en: There are many other features of SVN that you can use from Eclipse. Refer to [http://www.eclipse.org/subversive/documentation.php](http://www.eclipse.org/subversive/documentation.php).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 Eclipse 使用许多其他 SVN 功能。请参阅 [http://www.eclipse.org/subversive/documentation.php](http://www.eclipse.org/subversive/documentation.php)。
- en: Eclipse Git plugin
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse Git 插件
- en: 'Recent versions of Eclipse are pre-installed with Eclipse **Git plugin** (**EGit**).
    If not, you can install the plugin from Eclipse Marketplace. Select the Help |
    Eclipse Marketplace... option and type `egit` in the Find textbox:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 近期版本的 Eclipse 预装了 Eclipse **Git 插件**（**EGit**）。如果没有，你可以从 Eclipse 市场安装插件。选择 Help
    | Eclipse Marketplace... 选项，并在 Find 文本框中输入 `egit`：
- en: '![](img/00072.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00072.jpeg)'
- en: 'Figure 3.16: Searching the EGit plugin in Eclipse Marketplace'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16：在 Eclipse 市场中搜索 EGit 插件
- en: If the plugin is already installed, it will be marked as Installed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件已经安装，它将被标记为已安装。
- en: Adding a project to Git
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将项目添加到 Git
- en: Git is a distributed repository. Unlike some of the other source management
    systems, Git maintains the complete local repository too. So you can perform activities
    such as check-out and check-in in the local repository without connecting to any
    remote repository. When you are ready to move your code to a remote repository,
    you can connect to it and push your files to the remote repository.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个分布式仓库。与一些其他源代码管理系统不同，Git 还维护了完整的本地仓库。因此，你可以在不连接任何远程仓库的情况下，在本地仓库中执行诸如检出和提交等活动。当你准备好将代码移动到远程仓库时，你可以连接到它并将文件推送到远程仓库。
- en: 'If you are new to Git, take a look at the following documentation and tutorial:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始使用 Git，请查看以下文档和教程：
- en: '[https://git-scm.com/doc](https://git-scm.com/doc) and [https://www.atlassian.com/git/tutorials/](https://www.atlassian.com/git/tutorials/).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://git-scm.com/doc](https://git-scm.com/doc) 和 [https://www.atlassian.com/git/tutorials/](https://www.atlassian.com/git/tutorials/)。'
- en: 'To learn how to add a project to Git, let''s create a simple Java project in
    the workspace. Again as in the previous section, what code you write in this project
    is not important for now:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何将项目添加到 Git，让我们在工作区中创建一个简单的 Java 项目。同样，在上一节中，你在这个项目中编写的代码现在并不重要：
- en: Create a Java class in the project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中创建一个 Java 类。
- en: 'To add this project to Git, right-click on the project in Package Explorer
    or Navigator and select Team | Share Project...:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将此项目添加到 Git，请在包资源管理器或导航器中右键单击项目，并选择团队 | 共享项目...：
- en: '![](img/00073.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00073.jpeg)'
- en: 'Figure 3.17: Sharing an Eclipse project with Git'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17：使用 Git 共享 Eclipse 项目
- en: Select Git and click Next. Check the box Use or create repository in parent
    folder of project.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Git 并点击下一步。勾选使用或创建项目父文件夹中的仓库。
- en: 'Select the project (check the box for the project) and click the Create Repository button.
    Then click Finish:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目（勾选项目复选框）并点击创建仓库按钮。然后点击完成：
- en: '![](img/00074.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00074.jpeg)'
- en: 'Figure 3.18: Creating a Git repository for a project'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18：为项目创建 Git 仓库
- en: 'This creates a new Git repository in the project folder. Switch to the Git
    perspective (or open the Git Repositories view from the Window | Show View | Other
    option) and you should see the project listed in the Git Repositories view (see
    the following screenshot):'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在项目文件夹中创建一个新的 Git 仓库。切换到 Git 视图（或从窗口 | 显示视图 | 其他选项打开 Git 仓库视图），你应该在 Git 仓库视图中看到项目列表（见以下截图）：
- en: '![](img/00075.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00075.jpeg)'
- en: 'Figure 3.19: Git Repositories view'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19：Git 仓库视图
- en: Committing files in the Git repository
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Git 仓库中提交文件
- en: 'In Git, new or modified files are staged for commit. To see the staged files,
    click on the Git Staging tab in the Git perspective:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，新文件或修改后的文件已暂存以供提交。要查看暂存文件，请单击 Git 视图中的 Git 预览选项卡：
- en: '![](img/00076.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00076.jpeg)'
- en: 'Figure 3.20: The Git Staging view'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20：Git 预览视图
- en: 'If you do not want to add a file to the Git repository, then right-click on
    that file (or multiple files selection) and select the Ignore option. Before you
    commit files to Git, you need to move Unstaged Changes to Staged Changes. We are
    going to add all the files to Git. So select all the files in the Unstaged Changes
    view and drag and drop them in the Staged Changes view. It is also recommended
    to set Author name and Committer. It is usually in `Name <email>` format. To set
    this option at global level in Eclipse (so that you do not have to set these fields
    at every commit), go to Eclipse Preferences and search for `Git`. Then go to the Team
    | Git | Configuration page and click the Add Entry... button:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想将文件添加到 Git 仓库中，那么在该文件（或多个文件选择）上右键单击并选择忽略选项。在将文件提交到 Git 之前，你需要将未暂存更改移动到暂存更改。我们将把所有文件添加到
    Git 中。因此，在未暂存更改视图中选择所有文件，并将它们拖放到暂存更改视图中。还建议设置作者名称和提交者。通常以 `Name <email>` 格式。要在
    Eclipse 中设置全局选项（这样你就不必在每次提交时设置这些字段），请转到 Eclipse 首选项并搜索 `Git`。然后转到团队 | Git | 配置页面并点击添加条目...按钮：
- en: '![](img/00077.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00077.jpeg)'
- en: 'Figure 3.21: Adding a Git configuration entry'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21：添加 Git 配置条目
- en: 'Similarly, add the `user.email` entry:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，添加 `user.email` 条目：
- en: '![](img/00078.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00078.jpeg)'
- en: 'Figure 3.22: Git configurations in Preferences'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22：首选项中的 Git 配置
- en: Coming back to the Git Staging view, enter Author, Committer, and Commit Message.
    Then click the Commit button.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到 Git 预览视图，输入作者、提交者和提交信息。然后点击提交按钮。
- en: Viewing file differences after modifications
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改后查看文件差异
- en: Let's modify the single Java class created in the previous project. If you go
    to the Git Staging view after making changes to the file, you will see that the
    file appears in the Unstaged Changes list. To see what changes have been made
    to the file since the last commit, double-click on the file in the Git Staging
    view.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改之前项目中创建的单个 Java 类。如果你在更改文件后转到 Git 预览视图，你会看到该文件出现在未暂存更改列表中。要查看自上次提交以来对文件所做的更改，请双击
    Git 预览视图中的文件。
- en: 'To commit these changes, move it to Staged Changes view, enter Commit Message,
    and click the Commit button. You can also view the file differences by clicking
    on the file in Package Explorer and selecting Compare With | Head Revision:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交这些更改，将其移动到暂存更改视图，输入提交信息，并点击提交按钮。你还可以通过在包资源管理器中单击文件并选择与 | 头版本比较来查看文件差异：
- en: '![](img/00079.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00079.jpeg)'
- en: 'Figure 3.23: Viewing a file difference'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23：查看文件差异
- en: 'To see the history of changes to the project or file(s)/folder(s), right-click
    and select Team | Shown in History:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看项目或文件（夹）的更改历史，右键单击并选择“团队 | 显示在历史中”：
- en: '![](img/00080.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00080.jpeg)'
- en: 'Figure 3.24: Git History view'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24：Git历史视图
- en: Creating a new branch
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新分支
- en: It is typical when you are using source control management to create separate
    branches for features or even for bug fixes. The idea is that the main or the
    master branch should always have the working code and you do development on the
    branches that may not be stable. When you finish a feature or fix a bug and know
    that the branch is stable, then you merge the code from that branch to the master
    branch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用源代码管理创建单独的分支以用于功能或甚至用于错误修复时，这是典型的。想法是主分支或主分支应始终包含工作代码，你可以在可能不稳定的分支上进行开发。当你完成一个功能或修复一个错误，并且知道该分支是稳定的，然后你将那个分支的代码合并到主分支。
- en: 'To create a new branch, go to the Git Repositories view and right-click on
    the repository you want to branch. Then select the Switch To | New Branch... option:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新分支，转到Git仓库视图，然后右键单击要分支的仓库。然后选择“切换到 | 新分支...”选项：
- en: '![](img/00081.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00081.jpeg)'
- en: 'Figure 3.25: Creating a new branch'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25：创建新分支
- en: Note that the Checkout new branch box should be checked. Because of this option,
    the new branch becomes the active branch once it is created. Any changes you commit
    are going to be in this branch and the master branch remains unaffected. Click
    Finish to create the branch.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意“检出新分支”框应该被勾选。因为这个选项，新分支一旦创建就变为活动分支。你提交的任何更改都将在这个分支和主分支中进行，而主分支保持不变。点击完成以创建分支。
- en: 'Let''s make some changes to the code, say in the `main` method of the `GitTestApp`
    class:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对代码进行一些更改，比如在`GitTestApp`类的`main`方法中：
- en: '[PRE0]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Commit the preceding changes to the new branch.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的更改提交到新分支。
- en: Now let's check out the master branch. Right-click on the repository in the Git
    Repositories view and select Switch To | master. Open the file you modified in
    the new branch. You will observe that the changes you made to the file are not
    present. As mentioned previously, any changes you do to branches are not committed
    to the master branch. You have to explicitly merge the changes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检出主分支。在Git仓库视图中右键单击仓库，并选择“切换到 | master”。打开新分支中修改的文件。你会观察到你对文件所做的更改不存在。如前所述，你对分支所做的任何更改都不会提交到主分支。你必须显式合并更改。
- en: 'To merge the changes from branch bug#1234 to the master branch, right-click
    on the repository in the Git Repositories view and select Merge...:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要将bug#1234分支的更改合并到主分支，在Git仓库视图中右键单击仓库，并选择“合并...”：
- en: '![](img/00082.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00082.jpeg)'
- en: 'Figure 3.26: Merge Git braches'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26：合并Git分支
- en: Select branch bug#1234\. This branch will be merged in the master branch. Click
    Merge. Git will display a summary of the merge. Click OK to complete the merge
    operation. Now the file in the master branch will contain the changes done in
    branch bug#1234.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 选择分支bug#1234。此分支将被合并到主分支中。点击合并。Git将显示合并摘要。点击确定以完成合并操作。现在主分支中的文件将包含来自bug#1234分支所做的更改。
- en: 'We have merged all the changes from branch bug#1234 to the master and we no
    longer need it. So, let''s delete branch bug#1234\. Expand the Branches node in
    the Git Repositories view and right-click on the branch to be deleted (the selected
    branch should not be the active branch when deleting). Then select the Delete
    Branch menu option:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将bug#1234分支的所有更改合并到主分支，不再需要它。所以，让我们删除bug#1234分支。在Git仓库视图中展开分支节点，然后右键单击要删除的分支（删除时选中的分支不应是活动分支）。然后选择“删除分支”菜单选项：
- en: '![](img/00083.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00083.jpeg)'
- en: 'Figure 3.27: Deleting Git branch'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27：删除Git分支
- en: Committing a project to a remote repository
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将项目提交到远程仓库
- en: So far, we have been working in the local Git repository. But you may want to
    push your project to a remote repository if you want to share your code and/or
    make sure that you do not lose your local changes. So in this section, we will
    learn how to push a local project to a remote Git repository. If you do not have
    access to a Git repository, you could create one at [http://www.github.com](http://www.github.com).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在本地Git仓库中工作。但如果你想要共享你的代码并确保你不会丢失本地更改，你可能想要将你的项目推送到远程仓库。所以在本节中，我们将学习如何将本地项目推送到远程Git仓库。如果你没有访问Git仓库的权限，你可以在[http://www.github.com](http://www.github.com)创建一个。
- en: Create a new repository in the remote Git server, named `GitPluginTest`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程Git服务器上创建一个名为`GitPluginTest`的新仓库。
- en: 'In the Git Repositories view, right-click on the Remotes node and select the Create
    Remote... option:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Git Repositories视图中，右键单击Remotes节点并选择创建远程...选项：
- en: '![](img/00084.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: 'Figure 3.28: Adding a remote Git repository'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.28：添加远程Git仓库
- en: 'By convention, name of the remote repository is `origin`. Click OK. In the
    next page, set up the configuration for push. Click on the Change button next
    to the URI textbox:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照惯例，远程仓库的名称是`origin`。点击OK。在下一页，设置推送的配置。点击URI文本框旁边的Change按钮：
- en: '![](img/00085.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: 'Figure 3.29: Setting up a remote Git URI'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.29：设置远程Git URI
- en: 'Enter the URI of the remote Git repository. The wizard extracts host, repository
    path, and protocol from the URI. Enter your user ID and password and click Finish:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入远程Git仓库的URI。向导从URI中提取主机、仓库路径和协议。输入你的用户ID和密码，然后点击Finish：
- en: '![](img/00086.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: 'Figure 3.30: Configuring a Git push'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.30：配置Git push
- en: Click Save and Push. This sends files in the local master branch to the remote
    Git repository.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存并推送。这会将本地master分支中的文件发送到远程Git仓库。
- en: Pulling changes from a remote repository
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从远程仓库拉取更改
- en: As you work in a team, your team members will also be making changes to the
    remote repository. When you want to get the changes done in the remote repository
    to your local repository, you use the Pull option. But before you perform the
    Pull operation, you need to configure it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在团队中工作时，团队成员也会对远程仓库进行更改。当你想要将远程仓库中的更改获取到本地仓库时，你使用Pull选项。但在执行Pull操作之前，你需要进行配置。
- en: 'In Package Explorer, right-click on the project and select Team | Remote |
    Configure Fetch from Upstream...:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在Package Explorer中，右键单击项目并选择团队 | 远程 | 从上游配置Fetch...：
- en: '![](img/00087.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.jpeg)'
- en: 'Figure 3.31: Configuring Git Fetch'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.31：配置Git Fetch
- en: In Git, both Pull and Fetch can get the changes from a remote repository. However,
    the Fetch operation does not merge the changes in the local repository. The Pull operation
    first fetches the changes and then merges in the local repository. If you want
    to inspect the files before you merge, then select the Fetch option.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，Pull和Fetch都可以从远程仓库获取更改。然而，Fetch操作不会将更改合并到本地仓库中。Pull操作首先获取更改，然后将其合并到本地仓库中。如果你想在合并之前检查文件，那么请选择Fetch选项。
- en: 'We need to map the local master branch with a branch in the remote repository.
    This tells the Pull operation to fetch the changes from the branch in the remote
    repository and merge it in the given (in this case, master) local repository.
    Click the Add... button:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将本地master分支映射到远程仓库中的一个分支。这告诉Pull操作从远程仓库的分支获取更改并将其合并到指定的（在这种情况下，master）本地仓库中。点击Add...按钮：
- en: '![](img/00088.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: 'Figure 3.32: Configuring Git Fetch'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.32：配置Git Fetch
- en: 'Start typing the name of the branch in the source textbox and the wizard will
    get the branch information from the remote repository and auto complete it. Click
    Next and then Finish. This takes you back to the Configure Fetch page with mapping
    of the branches added to it:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文本框中开始键入分支名称，向导将从远程仓库获取分支信息并自动完成。点击Next然后Finish。这会将你带回到配置Fetch页面，并添加了映射的分支：
- en: '![](img/00089.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: 'Figure 3.33: Configuring Git Fetch with mapping added'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.33：配置Git Fetch并添加映射
- en: Click Save and Fetch to pull the changes from the remote repository.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存并获取以从远程仓库拉取更改。
- en: Cloning a remote repository
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆远程仓库
- en: We have learned how to start development using a local Git repository and then
    push changes to a remote repository. Let's now learn how we can get an existing
    remote Git repository and create a local copy; in other words, we will learn how
    to clone a remote Git repository. The easiest option is to import the remote Git
    project. Select File | Import... from the main menu and then Git | Projects from
    Git | Clone URI.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用本地Git仓库开始开发，然后将更改推送到远程仓库。现在让我们学习如何获取现有的远程Git仓库并创建本地副本；换句话说，我们将学习如何克隆远程Git仓库。最简单的方法是导入远程Git项目。从主菜单中选择文件
    | 导入...，然后Git | 从Git导入 | 克隆URI。
- en: 'The wizard will display a page similar to *Figure 3.29*. Enter the URI of the
    remote repository, username, and password, and then click Next. Select a remote
    branch and click Next:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 向导将显示一个类似于*图3.29*的页面。输入远程仓库的URI、用户名和密码，然后点击Next。选择远程分支并点击Next：
- en: '![](img/00090.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: 'Figure 3.34: Selecting a remote branch to clone'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.34：选择要克隆的远程分支
- en: 'Click the Next button in the branch selection page:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在分支选择页面点击Next按钮：
- en: '![](img/00091.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00091.jpeg)'
- en: 'Figure 3.35: Selecting the location of the cloned project'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.35：选择克隆项目的位置
- en: 'Select the location where the project is to be saved and click Next:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 选择项目要保存的位置并点击“下一步”：
- en: '![](img/00092.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00092.jpeg)'
- en: 'Figure 3.36: Options to import the cloned project'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.36：导入克隆项目的选项
- en: There are three options to import the cloned project. If the remote repository
    contains the entire Eclipse project, then select Import existing Eclipse projects,
    or else select either of the remaining two options. Since we have checked in the
    Eclipse project in the remote repository, we will select the first option. Click
    Next and then Finish.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种导入克隆项目的选项。如果远程仓库包含整个Eclipse项目，则选择“导入现有Eclipse项目”，否则选择剩下的两个选项之一。由于我们在远程仓库中已经提交了Eclipse项目，我们将选择第一个选项。点击“下一步”然后点击“完成”。
- en: For more information about the Eclipse Git plugin, refer to [https://wiki.eclipse.org/EGit/User_Guide](https://wiki.eclipse.org/EGit/User_Guide).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Eclipse Git插件的更多信息，请参阅[https://wiki.eclipse.org/EGit/User_Guide](https://wiki.eclipse.org/EGit/User_Guide)。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: There are Eclipse plugins available for a wide variety of SCM systems. In this
    chapter, we learned how to use Eclipse plugins for SVN and Git. Using these plugins
    you can perform many of the typical SCM operations, such as checking out source,
    comparing versions, and committing changes, right within the Eclipse IDE. This
    provides great convenience and can improve your productivity.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多Eclipse插件可供各种SCM系统使用。在本章中，我们学习了如何使用Eclipse插件进行SVN和Git操作。使用这些插件，你可以在Eclipse
    IDE中执行许多典型的SCM操作，例如检出源代码、比较版本和提交更改，这提供了极大的便利并可以提高你的工作效率。
- en: In the next chapter, we will see how to create JEE Database applications using
    JDBC and JDO.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用JDBC和JDO创建JEE数据库应用程序。
