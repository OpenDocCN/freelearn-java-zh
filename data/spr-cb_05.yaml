- en: Chapter 5. Using Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。使用表单
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Displaying and processing a form
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示和处理表单
- en: Getting a submitted form value using a controller method argument
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制器方法参数获取提交的表单值
- en: Setting a form's default values using a model object
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型对象设置表单的默认值
- en: Saving form data in an object automatically
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动将表单数据保存到对象中
- en: Using text, textarea, password, and hidden fields
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文本、文本区域、密码和隐藏字段
- en: Using a select field
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选择字段
- en: Using a checkbox
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复选框
- en: Using a list of checkboxes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复选框列表
- en: Using a list of radio buttons
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单选按钮列表
- en: Validating a form using annotations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用注解验证表单
- en: Uploading a file
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传文件
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Displaying and processing a form is tedious. Spring helps with the initialization
    of the form, the generation of form widgets (text fields, checkboxes, and so on),
    and data retrieval when the form is submitted. Form validation is made simple
    with annotations in the model classes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 显示和处理表单是繁琐的。Spring 通过初始化表单、生成表单小部件（文本字段、复选框等）以及在表单提交时检索数据来帮助处理。通过模型类中的注解，表单验证变得简单。
- en: Displaying and processing a form
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示和处理表单
- en: To display a form and retrieve the data the user entered when it's submitted,
    use a first controller method to display the form. Use a second controller method
    to process the form data when the form is submitted.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示表单并检索用户提交的数据，请使用第一个控制器方法显示表单。使用第二个控制器方法处理表单提交时的表单数据。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here are the steps to display and process a form:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 显示和处理表单的步骤如下：
- en: 'Create a controller method to display the form:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器方法来显示表单：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a JSP with an HTML form:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 HTML 表单的 JSP：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create another controller method to process the form when it''s submitted:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个控制器方法来处理表单提交：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first controller method displays the JSP containing the HTML form. For more
    details, refer to the *Using a JSP view* recipe in [Chapter 3](ch03.html "Chapter 3. Using
    Controllers and Views"), *Using Controllers and Views*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个控制器方法显示包含 HTML 表单的 JSP。有关更多详细信息，请参阅第 3 章 *使用 JSP 视图* 的菜谱，*使用控制器和视图*。
- en: The HTML form contains one text field. It's submitted via `POST`. The form's
    `action` attribute is absent, so the form will be submitted to the current page
    URL (`/addUser`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 表单包含一个文本字段。它通过 `POST` 提交。表单的 `action` 属性不存在，因此表单将提交到当前页面 URL (`/addUser`)。
- en: The second controller method is called when the form is submitted. The value
    of the `firstName` form field is retrieved using `HttpServletRequest`. At the
    end, we will redirect to `/home`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，调用第二个控制器方法。使用 `HttpServletRequest` 获取 `firstName` 表单字段的值。最后，我们将重定向到 `/home`。
- en: Both controller methods are mapped to the same `/addUser` URL. The first method
    is called for HTTP `GET` requests. The second method is called for HTTP `POST`
    requests (because of `method=RequestMethod.POST`).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 两种控制器方法映射到相同的 `/addUser` URL。第一种方法用于 HTTP `GET` 请求。第二种方法用于 HTTP `POST` 请求（因为
    `method=RequestMethod.POST`）。
- en: There's more…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The two controller methods could have different URLs. For example, `/addUser`
    and `/addUserSubmit`. In this case, in the JSP, we would use the `action` attribute:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 两种控制器方法可能有不同的 URL。例如，`/addUser` 和 `/addUserSubmit`。在这种情况下，在 JSP 中，我们会使用 `action`
    属性：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In the second controller method, to avoid using the cumbersome `request.getParameter()`
    method for each form field, refer to the *Getting a submitted form value using
    a controller method argument* and *Saving form values into an object automatically*
    recipes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个控制器方法中，为了避免为每个表单字段使用繁琐的 `request.getParameter()` 方法，请参阅 *使用控制器方法参数获取提交的表单值*
    和 *将表单值保存到对象中自动* 的菜谱。
- en: Getting a submitted form value using a controller method argument
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制器方法参数获取提交的表单值
- en: In this recipe, you will learn how to get the submitted form data using controller
    method arguments. This is convenient for simple forms that are not related to
    a domain object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何使用控制器方法参数获取提交的表单数据。这对于与领域对象无关的简单表单来说很方便。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add an argument annotated with `@RequestParam` to the controller method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 向控制器方法添加一个带有 `@RequestParam` 注解的参数：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `userName` argument is initialized by Spring with the submitted value of
    the `name` form field.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`userName` 参数由 Spring 初始化为表单字段 `name` 的提交值。'
- en: '`@RequestParam` can also retrieve URL parameters, for example, `http://localhost:8080/springwebapp/processForm?name=Merlin`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestParam`也可以检索URL参数，例如，`http://localhost:8080/springwebapp/processForm?name=Merlin`。'
- en: There's more…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'It''s also possible to add the standard `HttpServletRequest` object as an argument
    of the controller method and get the submitted value for `name` directly from
    it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以将标准的`HttpServletRequest`对象作为控制器方法的参数，并直接从其中获取`name`的提交值：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Saving form values into an object automatically* recipe for more
    details.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 参考有关将表单值自动保存到对象的食谱以获取更多详细信息。
- en: Setting a form's default values using a model object
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型对象设置表单的默认值
- en: In this recipe, you will learn how to display a form with initial values that
    the user can change.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何显示一个用户可以更改的初始值的表单。
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create an object containing the default values in the controller. In the view,
    use Spring form tags to generate the form using that object:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中创建一个包含默认值的对象。在视图中，使用Spring表单标签使用该对象生成表单：
- en: 'In the controller, add a method annotated with `@ModelAttribute`, which returns
    an object with default values:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中，添加一个带有`@ModelAttribute`注解的方法，该方法返回一个具有默认值的对象：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the controller, add a method to display the form:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中，添加一个显示表单的方法：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the JSP, use Spring form tags to generate the form:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中，使用Spring表单标签生成表单：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the controller, because of `@ModelAttribute`, the `defaultUser()` method
    is automatically called for each request of the controller. The returned `User`
    object is stored in the memory as `defaultUser`. In the JSP, `defaultUser` is
    used to initialize the form:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，由于`@ModelAttribute`，`defaultUser()`方法会自动为每个控制器请求调用。返回的`User`对象存储在内存中作为`defaultUser`。在JSP中，使用`defaultUser`初始化表单：
- en: 'It''s set as `modelAttribute` of the `form:form` element:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被设置为`form:form`元素的`modelAttribute`：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Form fields get their values from the corresponding properties of `defaultUser`.
    For example, the `firstName` field will be initialized with the value returned
    by `defaultUser.getFirstName()`.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单字段从`defaultUser`的相应属性中获取其值。例如，`firstName`字段将使用`defaultUser.getFirstName()`返回的值进行初始化。
- en: Saving form data in an object automatically
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动保存表单数据到对象中
- en: For forms directly related to a model object, for example, a form to add `User`,
    the submitted form data can be automatically saved in an instance of that object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于直接与模型对象相关的表单，例如，用于添加`User`的表单，提交的表单数据可以自动保存到该对象的实例中。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In the controller method processing the form submission, add the object as
    an argument and make the field names in the JSP match its attributes:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器方法中，将对象作为参数添加，并确保JSP中的字段名称与它的属性匹配：
- en: 'Add a `User` argument annotated with `@ModelAttribute` to the controller method
    processing the form submission:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将带有`@ModelAttribute`注解的`User`参数添加到处理表单提交的控制器方法中：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the JSP, make sure that the form fields correspond to the existing attributes
    of the object:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中，确保表单字段与对象的现有属性相对应：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When the form is submitted, this is what goes on behind the scenes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，幕后发生的情况如下：
- en: A new `User` object is created
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的`User`对象
- en: 'The form values are injected into the object by matching the form field names
    to object attribute names, for example:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将表单字段名称与对象属性名称匹配，将表单值注入到对象中，例如：
- en: '[PRE12]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The resulting object is given to the controller method through its `@ModelAttribute`
    argument
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果对象通过其`@ModelAttribute`参数传递给控制器方法
- en: There's more…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'Instead of making Spring create a new object, you can provide the name of a
    default one:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是让Spring创建一个新的对象，你可以提供一个默认对象的名称：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this case, Spring will use the object returned by the corresponding `@ModelAttribute`
    method of the controller class to store the submitted form data:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Spring将使用控制器类中相应的`@ModelAttribute`方法返回的对象来存储提交的表单数据：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using text, textarea, password, and hidden fields
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文本、`textarea`、密码和隐藏字段
- en: In this recipe, you will learn how to display a text field, `textarea` field,
    `password` field, and `hidden` field using Spring form tags. When the form is
    submitted, we will retrieve the field value in a controller method.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何使用Spring表单标签显示文本字段、`textarea`字段、`password`字段和`hidden`字段。当表单提交时，我们将在控制器方法中检索字段值。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to display and process text fields:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是显示和处理文本字段的步骤：
- en: 'If a default value is necessary, use a `String` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe):'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要默认值，请使用默认对象的 `String` 属性（参考 *使用模型对象设置表单的默认值* 菜谱）：
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the JSP, use one of these Spring form tags:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSP 中，使用这些 Spring 表单标签之一：
- en: '[PRE16]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the controller method processing the form submission, make sure that the
    `@ModelAttribute` object has a corresponding `String` attribute:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器方法中，确保 `@ModelAttribute` 对象具有相应的 `String` 属性：
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Spring form tag generates the HTML form field and populates it with the
    default value defined in the default object. The `path` attribute corresponds
    to the attribute of the default object. When the form is submitted, the form field
    value is saved in the corresponding attribute of the `@ModelAttribute` object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 表单标签生成 HTML 表单字段，并用默认对象中定义的默认值填充它。`path` 属性对应于默认对象的属性。当表单提交时，表单字段值将保存在
    `@ModelAttribute` 对象的相应属性中。
- en: 'For reference, this is the generated HTML code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，这是生成的 HTML 代码：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the default value is not actually used for the `password` field.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，默认值实际上并不用于 `password` 字段。
- en: Using a select field
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选择字段
- en: In this recipe, you will learn how to display a `select` field. When the form
    is submitted, retrieve the selected value in a controller method.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，您将学习如何显示 `select` 字段。当表单提交时，在控制器方法中检索选中的值。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In the controller, add a `@ModelAttribute` method returning a `Map` object
    that contains the `select` field options:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中，添加一个返回包含 `select` 字段选项的 `Map` 对象的 `@ModelAttribute` 方法：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If a default value is necessary, use a `String` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe)
    initialized with one of the `Map` keys:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要默认值，请使用默认对象的 `String` 属性（参考 *使用模型对象设置表单的默认值* 菜谱）并使用 `Map` 中的一个键进行初始化：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the JSP, use a `form:select` element initialized with the `@ModelAttribute`
    Map:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSP 中，使用初始化为 `@ModelAttribute` Map 的 `form:select` 元素：
- en: '[PRE21]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the controller that processes the form submission, make sure that the `@ModelAttribute`
    object (the one used to save the form values) has a corresponding `String` attribute:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器中，确保 `@ModelAttribute` 对象（用于保存表单值的对象）具有相应的 `String` 属性：
- en: '[PRE22]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `form:select` tag generates an HTML `select` field and initializes it with
    the `@ModelAttribute` Map and the default value defined in the default object.
    The `path` attribute corresponds to the attribute of the default object. When
    the form is submitted, the selected value is saved in the corresponding attribute
    of the `@ModelAttribute` `User` object.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`form:select` 标签生成一个 HTML `select` 字段，并使用 `@ModelAttribute` Map 和默认对象中定义的默认值进行初始化。`path`
    属性对应于默认对象的属性。当表单提交时，选中的值将保存在 `@ModelAttribute` `User` 对象的相应属性中。'
- en: 'For reference, this is the generated HTML code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，这是生成的 HTML 代码：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: There's more…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: It's not necessary to use a `Map` class for the `@ModelAttribute` object. A
    `List<String>` object or directly using fields of an existing class may be more
    convenient.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `@ModelAttribute` 对象，不需要使用 `Map` 类。可以使用 `List<String>` 对象或直接使用现有类的字段，这可能更方便。
- en: Using a List<String> object
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 List<String> 对象
- en: 'Instead of `Map`, it''s possible that you can use a `List<String>` object:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Map`，您还可以使用 `List<String>` 对象：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The JSP code stays the same:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: JSP 代码保持不变：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the generated HTML code, the displayed text will be the same as the `value`
    attribute:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的 HTML 代码中，显示的文本将与 `value` 属性相同：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using a List<Object> object
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 List<Object> 对象
- en: 'Instead of a `Map` object, you can use a `List<Object>` object. If, for example,
    `Country` was a class with `code` and `name String` attributes:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Map` 对象，您还可以使用 `List<Object>` 对象。例如，如果 `Country` 是一个具有 `code` 和 `name String`
    属性的类：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The JSP code would specify these attributes:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: JSP 代码将指定这些属性：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The generated HTML code would be the same:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 HTML 代码将相同：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Using a checkbox
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复选框
- en: In this recipe, you will learn how to display a checkbox and, when the form
    is submitted, retrieve its state (selected or not) in a controller method.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，您将学习如何显示复选框，并在控制器方法中提交表单时检索其状态（选中或不选中）。
- en: How to do it…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Use the `form:checkbox` element in the JSP and a `boolean` attribute to store
    its value when the form is submitted:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JSP 中使用 `form:checkbox` 元素和一个 `boolean` 属性来存储其在表单提交时的值：
- en: 'If a default value is necessary, use a `boolean` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe):'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要默认值，使用默认对象的`boolean`属性（参考*使用模型对象设置表单的默认值*配方）：
- en: '[PRE30]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the JSP, use the `form:checkbox` element:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中，使用`form:checkbox`元素：
- en: '[PRE31]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the controller that processes the form submission, make sure that the `@ModelAttribute`
    object has a corresponding `boolean` attribute:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器中，确保`@ModelAttribute`对象有一个相应的`boolean`属性：
- en: '[PRE32]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works…
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This is the generated HTML code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的HTML代码：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If the checkbox is checked, `married=true` is sent when the form is submitted.
    If it's not checked, nothing is sent (this is the standard HTML behavior). That's
    why a `hidden` form field is also generated. The field `_married` will be sent
    with the value `on` regardless of the checkbox state. So, if the married field
    is not there, Spring will know to set its value to false.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果复选框被选中，当表单提交时发送`married=true`。如果没有选中，则不发送任何内容（这是标准的HTML行为）。这就是为什么还会生成一个`hidden`表单字段。字段`_married`将发送带有值`on`，无论复选框的状态如何。所以，如果已婚字段不存在，Spring将知道将其值设置为false。
- en: Using a list of checkboxes
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复选框列表
- en: In this recipe, you'll learn how to display a list of checkboxes and when the
    form is submitted, how to retrieve the selected values in a controller method.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将学习如何显示一组复选框，并在表单提交时，如何在控制器方法中检索选中的值。
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In the controller, add a `@ModelAttribute` method returning a `Map` object:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中，添加一个返回`Map`对象的`@ModelAttribute`方法：
- en: '[PRE34]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If a default value is necessary, use a `String[]` attribute of the default
    object (refer to the *Setting a form''s default values using a model object* recipe)
    initialized with some of the `Map` keys:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要默认值，使用默认对象的`String[]`属性（参考*使用模型对象设置表单的默认值*配方），并用一些`Map`键初始化：
- en: '[PRE35]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the JSP, use a `form:checkboxes` element initialized with the `@ModelAttribute`
    Map:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中，使用初始化为`@ModelAttribute` Map的`form:checkboxes`元素：
- en: '[PRE36]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the controller that processes the form submission, make sure that the `@ModelAttribute`
    object (the one used to save the form values) has a corresponding `String[]` attribute:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器中，确保`@ModelAttribute`对象（用于保存表单值的对象）有一个相应的`String[]`属性：
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Spring's `form:checkboxes` tag generates the checkboxes using the `Map` keys
    as values and the `Map` values as text displayed to the user.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的`form:checkboxes`标签使用`Map`键作为值，使用`Map`值作为显示给用户的文本来生成复选框。
- en: 'For reference, this is the generated HTML code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 仅供参考，这是生成的HTML代码：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As in the previous recipe, a `hidden` form field is also generated. `_languages=on`
    will be sent regardless of the checkboxes state. So, if none are selected, Spring
    will know to set the value of the languages array to an empty `String[]` object.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个配方所示，也会生成一个`hidden`表单字段。无论复选框的状态如何，`_languages=on`都会被发送。所以，如果没有选择任何选项，Spring将知道将语言数组的值设置为空的`String[]`对象。
- en: There's more…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'To have more control on the generated HTML code (to avoid the `label` and `span`
    tags), it''s possible to use several `form:checkbox` elements with the same value
    for the `path` attribute:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对生成的HTML代码有更多的控制（以避免`label`和`span`标签），可以使用具有相同`path`属性值的多个`form:checkbox`元素：
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The generated HTML code is similar, except for the `hidden` attribute, which
    is generated multiple times:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的HTML代码类似，但`hidden`属性会生成多次：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Using a list of radio buttons
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单选按钮列表
- en: In this recipe, you'll learn how to display a list of radio buttons. When the
    form is submitted, retrieve the selected value in a controller method.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将学习如何显示一组单选按钮。当表单提交时，在控制器方法中检索选中的值。
- en: How to do it…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In the controller, add a `@ModelAttribute` method returning `Map` object:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中，添加一个返回`Map`对象的`@ModelAttribute`方法：
- en: '[PRE41]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If a default value is necessary, use a `String` attribute of the default object
    (refer to the *Setting a form''s default values using a model object* recipe)
    initialized with one of the `Map` keys:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要默认值，使用默认对象的`String`属性（参考*使用模型对象设置表单的默认值*配方），并用`Map`中的一个键初始化：
- en: '[PRE42]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the JSP, use a `form:radiobuttons` element initialized with the `@ModelAttribute`
    Map:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中，使用初始化为`@ModelAttribute` Map的`form:radiobuttons`元素：
- en: '[PRE43]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In the controller processing the form submission, make sure that the `@ModelAttribute`
    object (the one used to save the form values) has a corresponding `String` attribute:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器中，确保`@ModelAttribute`对象（用于保存表单值的对象）有一个相应的`String`属性：
- en: '[PRE44]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Spring's `form:radiobuttons` tag generates the radio buttons using the `Map`
    keys as values and the `Map` values as text displayed to the user.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的`form:radiobuttons`标签使用`Map`键作为值，使用`Map`值作为显示给用户的文本来生成单选按钮。
- en: 'For reference, this is the generated HTML code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参考，这是生成的HTML代码：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: There's more…
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To have more control of the generated HTML code (to avoid the `label` and `span`
    tags), it''s possible to use several `form:radiobutton` elements with the same
    value for the `path` attribute:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地控制生成的HTML代码（以避免`label`和`span`标签），可以使用具有相同`path`属性的多个`form:radiobutton`元素：
- en: '[PRE46]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The generated HTML code for the input fields is identical to the code generated
    by the `form:radiobutton` tag:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段的生成HTML代码与`form:radiobutton`标签生成的代码相同：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Validating a form using annotations
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用注解验证表单
- en: 'In this recipe, you''ll learn how to add form validation rules by adding constraints
    directly in model classes using annotations. For example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何通过在模型类中使用注解直接添加约束来添加表单验证规则。例如：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We'll use constraint annotations from the Java bean annotation API and from
    Hibernate Validator (which is a project independent of Hibernate ORM).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Java Bean注解API和Hibernate Validator（Hibernate ORM独立的项目）中的约束注解。
- en: If the validation fails, the form will be shown again to the user with the errors
    that are to be fixed.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证失败，表单将再次显示给用户，并显示需要修复的错误。
- en: How to do it…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Add constraint annotations to the model class. Check whether the validation
    was successful in the controller method. Add error tags in the JSP:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 将约束注解添加到模型类中。在控制器方法中检查验证是否成功。在JSP中添加错误标签：
- en: 'Add the Maven dependencies in `pom.xml`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Maven依赖项：
- en: '[PRE49]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add constraints using annotations to the model class:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用注解将约束添加到模型类：
- en: '[PRE50]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the controller method processing the form submission, add `@Valid` to the
    result object argument and a `BindingResult` argument after it:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器方法中，将`@Valid`添加到结果对象参数，并在其后添加`BindingResult`参数：
- en: '[PRE51]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In that same controller method, check whether the validation was successful:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的控制器方法中，检查验证是否成功：
- en: '[PRE52]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add form errors tags in the form JSP:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单JSP中添加表单错误标签：
- en: '[PRE53]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The constraint annotations in the model class are used to validate the `User`
    object when the form is submitted. The errors are stored in the `BindingResult`
    object. When the form is displayed again, the `form:errors` elements will display
    them. An example of the generated HTML code with the errors is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，模型类中的约束注解用于验证`User`对象。错误存储在`BindingResult`对象中。当表单再次显示时，`form:errors`元素将显示它们。以下是一个带有错误的生成HTML代码示例：
- en: '[PRE54]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Some common constraint annotations are:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的约束注解包括：
- en: '`@Max(120)`: This field must have a value lower than or equal to the given
    number'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Max(120)`: 此字段必须有一个小于或等于给定数字的值'
- en: '`@Min(18)`: This field must have a value equal to or greater than the given
    number'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Min(18)`: 此字段必须有一个等于或大于给定数字的值'
- en: '`@NotNull`: This field must not be null'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@NotNull`: 此字段不能为null'
- en: '`@Valid`: This field must be a valid object'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Valid`: 此字段必须是一个有效的对象'
- en: '`@NotBlank`: This `String` field must not be null and its trimmed length must
    be greater than 0'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@NotBlank`: 此`String`字段不能为null，并且其修剪后的长度必须大于0'
- en: '`@NotEmpty`: This collection field must not be null nor empty'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@NotEmpty`: 此集合字段不能为null或空'
- en: 'A full list of all the constraint annotations can be found here:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 所有约束注解的完整列表可以在此处找到：
- en: '[http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html](http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html](http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html)'
- en: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints)'
- en: 'To create a custom constraint annotation, refer to:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义约束注解，请参阅：
- en: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints).'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints).'
- en: Uploading a file
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: To allow a user to upload a file from an HTML form, we need to set the form
    encoding to `multipart/form-data`. On the server side, we will use the `fileupload`
    package from the Apache Commons library to process the uploaded file.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许用户从HTML表单上传文件，我们需要将表单编码设置为`multipart/form-data`。在服务器端，我们将使用Apache Commons库中的`fileupload`包来处理上传的文件。
- en: How to do it…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现它…
- en: 'Here are the steps to upload a file from a form:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是上传文件到表单的步骤：
- en: 'Add the Maven dependency for `fileupload` from Apache Commons in `pom.xml`:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Apache Commons的`fileupload`的Maven依赖项：
- en: '[PRE55]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In the Spring configuration, declare a `MultipartResolver` bean with a size
    limit (in bytes) for the data to be uploaded:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，声明一个具有数据上传大小限制（以字节为单位）的`MultipartResolver` bean：
- en: '[PRE56]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the JSP, set the HTML form encoding to `multipart/form-data`:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP中，设置HTML表单编码为`multipart/form-data`：
- en: '[PRE57]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Add a file upload widget:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个文件上传小部件：
- en: '[PRE58]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the controller method processing the form submission, add `MultipartFile`
    as a `@RequestParam` argument:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理表单提交的控制器方法中，将`MultipartFile`作为`@RequestParam`参数添加：
- en: '[PRE59]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Save the uploaded file to a `files` folder in the `Tomcat` directory:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上传的文件保存到`Tomcat`目录下的`files`文件夹中：
- en: '[PRE60]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How it works…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the JSP, the `multipart/form-data` encoding is necessary for the form to
    be able to encode and send files.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSP中，表单需要使用`multipart/form-data`编码才能对文件进行编码并发送。
- en: In the controller, we will create the `files` folder if it doesn't exist. At
    this point, the uploaded file is in the server's memory. We still need to write
    it to the filesystem. We do that using the `formFile` argument. Note that if a
    file with the same name already exists, it will be overwritten.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，我们将创建一个`files`文件夹（如果不存在）。此时，上传的文件位于服务器的内存中。我们还需要将其写入文件系统。我们使用`formFile`参数来完成这个操作。请注意，如果已存在同名文件，它将被覆盖。
- en: There's more…
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To upload several files, you can have several form fields (file1, file2 and
    so on) and their corresponding arguments (formFile1, formFile2 and so on). It''s
    also possible to use the same field name for multiple file upload widgets (this
    is convenient to allow the user to upload an undetermined number of files):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要上传多个文件，你可以有多个表单字段（file1、file2等等）以及它们对应的参数（formFile1、formFile2等等）。也可以为多个文件上传小部件使用相同的字段名（这方便用户上传不确定数量的文件）：
- en: '[PRE61]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In this case, we''ll retrieve the files as an array of `MultipartFile` in the
    controller method:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将在控制器方法中将文件作为`MultipartFile`数组检索：
- en: '[PRE62]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
