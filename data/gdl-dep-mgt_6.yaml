- en: Chapter 6. Publishing to Bintray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：发布到Bintray
- en: In the previous chapter, we learned how to deploy our artifacts to a Maven repository.
    In this chapter, you will learn how we can deploy our artifacts to Bintray as
    a Maven repository. We will see what Bintray is and how it helps to publish our
    project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何将我们的工件部署到Maven仓库。在这一章中，你将学习我们如何将工件部署到Bintray作为Maven仓库。我们将了解Bintray是什么以及它如何帮助我们发布项目。
- en: We will see how we can configure the Gradle Bintray plugin to deploy our artifacts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将了解如何配置Gradle Bintray插件来部署我们的工件。
- en: What is Bintray?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Bintray？
- en: Bintray advertises itself as a Distribution as a Service. This means that when
    we have something we want to distribute, for example our project artifacts, we
    can use Bintray. Bintray offers a platform to store the software we want to share
    and makes it accessible for others to download. Around this, there is a lot of
    tooling to provide insights into how the packages are distributed and used. Bintray
    also offers a REST API to make it easy to work with the platform. The company
    running Bintray is JFrog, which is very well known for its repository product,
    Artifactory.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Bintray将自己宣传为“服务即分发”。这意味着当我们有想要分发的物品时，例如我们的项目工件，我们可以使用Bintray。Bintray提供了一个平台来存储我们想要共享的软件，并使其对其他人可下载。围绕这一点，有许多工具可以提供关于包如何分发和使用的见解。Bintray还提供了一个REST
    API，使其与平台协同工作变得容易。运行Bintray的公司是JFrog，该公司因其仓库产品Artifactory而非常知名。
- en: A part of Bintray is called JCenter. JCenter hosts Java dependencies within
    the Bintray platform. We already learned about JCenter as a repository host for
    dependencies. However, we can also use JCenter as a distribution repository for
    our own dependencies. In this chapter, we are going to use JCenter to deploy our
    artifacts.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Bintray的一部分称为JCenter。JCenter在Bintray平台上托管Java依赖项。我们已经了解了JCenter作为依赖项的仓库主机。然而，我们也可以使用JCenter作为我们自己的依赖项的分发仓库。在这一章中，我们将使用JCenter来部署我们的工件。
- en: Defining a new repository
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义新的仓库
- en: Before we can use Bintray's JCenter, we must create an account with Bintray
    at [https://bintray.com](https://bintray.com). One of the easiest ways is to use
    your existing GitHub account to sign in.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够使用Bintray的JCenter之前，我们必须在[https://bintray.com](https://bintray.com)上创建一个Bintray账户。其中一种最简单的方法是使用现有的GitHub账户登录。
- en: 'Next, we will create a new repository in which we will store our artifacts.
    So, first we log in to Bintray. From our user page, we will select the **New repository**
    option. In our browser window, we can see some fields we need to fill in, as shown
    in the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个新的仓库，我们将在此存储我们的工件。因此，首先我们登录到Bintray。从我们的用户页面，我们将选择**新建仓库**选项。在我们的浏览器窗口中，我们可以看到一些需要填写的字段，如下面的屏幕截图所示：
- en: '![Defining a new repository](img/image00133.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![定义新的仓库](img/image00133.jpeg)'
- en: 'We need to give our repository a name and an optional description. We choose
    **Maven** as the type of repository. Bintray can also be used for other types
    of dependencies, but for our Java code we want to use Maven. After we have filled
    in all the fields, we click on the **Create** button, and Bintray creates a new
    and empty repository. In the next screenshot, we will see our newly created repository:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的仓库提供一个名称和可选的描述。我们选择**Maven**作为仓库类型。Bintray也可以用于其他类型的依赖项，但对我们来说，Java代码我们想要使用Maven。在填写完所有字段后，我们点击**创建**按钮，Bintray就会创建一个新的空仓库。在下一个屏幕截图中，我们将看到我们新创建的仓库：
- en: '![Defining a new repository](img/image00134.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![定义新的仓库](img/image00134.jpeg)'
- en: Defining the Bintray plugin
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义Bintray插件
- en: In order to deploy our artifacts to JCenter, we use the Bintray Gradle plugin.
    This plugin adds extra functionality to our project to publish our artifacts.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的工件部署到JCenter，我们使用Bintray Gradle插件。此插件为我们项目添加了额外的功能，以便发布我们的工件。
- en: 'Let''s continue with our example build file from the previous project. The
    build file is for a Java project with some code. We will use the publishing plugin
    to define our publications or artifacts for the project. We will now add the Gradle
    plugin to the project by using the `buildscript` configuration block. In the next
    example build file, we will apply the Bintray plugin to our project. The following
    code shows this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用之前项目的示例构建文件。这个构建文件是为一个包含一些代码的Java项目准备的。我们将使用发布插件来定义项目的发布或工件。现在，我们将通过使用`buildscript`配置块将Gradle插件添加到项目中。在下一个示例构建文件中，我们将应用Bintray插件到我们的项目中。以下代码展示了这一点：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since the release of Gradle 2.1, we use an alternative syntax to include an
    external plugin in our build script. The new syntax works for plugins that are
    deployed to the Gradle plugin portal. The feature is incubating, which means it
    can change in the future. Also, an important restriction is that the new syntax
    is not supported in the `subprojects` and `allprojects` configuration blocks.
    In the following example build file, the new syntax to add a plugin is used:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Gradle 2.1的发布，我们使用了一种替代语法来在我们的构建脚本中包含外部插件。新的语法适用于部署到Gradle插件门户的插件。这个特性是孵化中的，这意味着它将来可能会改变。另外，一个重要的限制是，新的语法在`subprojects`和`allprojects`配置块中不受支持。在下面的示例构建文件中，使用了添加插件的新语法：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the new plugin in our project, we can run the `tasks` command to see which
    tasks have been added by the plugin:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中添加了新的插件后，我们可以运行`tasks`命令来查看插件添加了哪些任务：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We notice the `bintrayUpload` task that has been added by the plugin to our
    project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到插件为我们项目添加了`bintrayUpload`任务。
- en: Deploying publications to Bintray
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将发布部署到Bintray
- en: Before we can run the `bintrayUpload` task, we must add some configuration to
    our Gradle build file. The Bintray plugin can be configured with the `bintray`
    configuration block. Inside this configuration block, we see all the properties
    needed to deploy our project's publications to Bintray.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够运行`bintrayUpload`任务之前，我们必须在我们的Gradle构建文件中添加一些配置。Bintray插件可以通过`bintray`配置块进行配置。在这个配置块内部，我们可以看到部署我们的项目发布到Bintray所需的所有属性。
- en: First, we need to set the username and the API key for the Bintray account we
    are using to deploy with. To get the API key, we must first log in to Bintray
    in our web browser. From our account page, we click on the **Edit** button. Next,
    we will select the **API** menu option to get to our API key. The key can then
    be copied to the clipboard so that we can use it in our build script. The `user`
    and `key` properties from the `bintray` configuration block contain information
    that we don't want to share. It is best to keep the values of these properties
    externalized from our Gradle build file. We can add a `gradle.properties` file
    to our project directory with the values for the properties. The `gradle.properties`
    file can also be added to our Gradle user home directory, which, by default, is
    `<user_home>/.gradle`. Alternatively, we can use the command-line options `-P`
    and `--project-prop` to set the values.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设置用于部署的Bintray账户的用户名和API密钥。要获取API密钥，我们必须首先在我们的网页浏览器中登录到Bintray。从我们的账户页面，我们点击**编辑**按钮。接下来，我们将选择**API**菜单选项以获取我们的API密钥。然后，我们可以将密钥复制到剪贴板，以便我们可以在构建脚本中使用它。`bintray`配置块中的`user`和`key`属性包含我们不希望分享的信息。最好将这些属性的值从我们的Gradle构建文件外部化。我们可以在项目目录中添加一个`gradle.properties`文件，包含属性的值。`gradle.properties`文件也可以添加到我们的Gradle用户主目录中，默认情况下是`<user_home>/.gradle`。或者，我们可以使用命令行选项`-P`和`--project-prop`来设置值。
- en: The `user` and `key` properties are required. Also, we must set the `pkg.repo`
    properties with the repository name we have in Bintray and `pkg.name` as the group
    name of our deployment. Finally, we need to define what we need to publish. Fortunately,
    the Bintray plugin supports the Gradle publishing plugin, so we can reuse the
    publication we have configured in the build file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 需要`user`和`key`属性。此外，我们必须设置`pkg.repo`属性，使用我们在Bintray中的仓库名称，并将`pkg.name`设置为部署的组名。最后，我们需要定义我们需要发布的内容。幸运的是，Bintray插件支持Gradle发布插件，因此我们可以重用我们在构建文件中配置的发布。
- en: 'In the following example build file, we configure the Bintray plugin in the
    `bintray` configuration block:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例构建文件中，我们在`bintray`配置块中配置了Bintray插件：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before we can upload our artifact, we must first create a `book-sample` repository
    with the `sample` package by using the web browser interface of Bintray. We need
    to log in using our account and then select the **New repository** link. In the
    following screenshot, we see the fields that need to be filled in:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够上传我们的工件之前，我们必须首先使用Bintray的网页界面通过`sample`包创建一个名为`book-sample`的仓库。我们需要使用我们的账户登录，然后选择**新建仓库**链接。在下面的截图中，我们可以看到需要填写的字段：
- en: '![Deploying publications to Bintray](img/image00135.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![将发布部署到Bintray](img/image00135.jpeg)'
- en: 'After we have created a new repository, we get an overview of the repository,
    as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了一个新的仓库之后，我们可以看到仓库的概览，如下面的截图所示：
- en: '![Deploying publications to Bintray](img/image00136.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![将发布部署到Bintray](img/image00136.jpeg)'
- en: From this screen, we click on the **New package** button. A repository can contain
    multiple packages. The next screenshot shows the fields that we need to fill to
    create a new package. We must set the **Name**, the **Licenses** field, and a
    **Version control** link.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个屏幕，我们点击**新建软件包**按钮。一个仓库可以包含多个软件包。下一个截图显示了我们需要填写以创建新软件包的字段。我们必须设置**名称**、**许可证**字段和一个**版本控制**链接。
- en: '![Deploying publications to Bintray](img/image00135.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![将出版物部署到Bintray](img/image00135.jpeg)'
- en: 'Once we have created the package in our repository, we can invoke the `bintrayUpload`
    task for our project. Let''s see the output when we invoke the task:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在我们的仓库中创建了软件包，我们就可以为我们的项目调用`bintrayUpload`任务。让我们看看调用任务时的输出：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We notice that the `bintrayUpload` task is dependent on the tasks necessary
    to first compile and build our artifact before it is uploaded. We do not have
    to define this task dependency ourselves.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到`bintrayUpload`任务依赖于在文件上传之前必须首先编译和构建我们的工件的任务。我们不必自己定义这个任务依赖。
- en: 'Everything was built successfully, so we can now open our web browser and go
    to the repository and package page. In the following screenshot, we see our updated
    package web page:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一切构建成功，我们现在可以打开我们的网络浏览器并转到仓库和软件包页面。在以下截图中，我们看到我们的更新后的软件包网页：
- en: '![Deploying publications to Bintray](img/image00137.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![将出版物部署到Bintray](img/image00137.jpeg)'
- en: 'Bintray first puts the uploaded files into an unpublished state. This way,
    we have time to decide whether we really want to publish this version or not.
    We can see the message on our screen. We are sure that we want to publish this
    version, so we will click on the **Publish** link. Now, the files are published
    so that others can also see the files. If we click on the release version, we
    can even see the actual files in our web browser. The following screenshot shows
    our published artifact JAR file and the corresponding POM file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Bintray首先将上传的文件放入未发布状态。这样，我们有时间决定我们是否真的想要发布这个版本。我们可以在屏幕上看到消息。我们确信我们想要发布这个版本，所以我们将点击**发布**链接。现在，文件已发布，以便其他人也可以看到文件。如果我们点击发布版本，我们甚至可以在我们的网络浏览器中看到实际的文件。以下截图显示了我们的已发布工件JAR文件和相应的POM文件：
- en: '![Deploying publications to Bintray](img/image00138.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![将出版物部署到Bintray](img/image00138.jpeg)'
- en: Configuring the Bintray plugin
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Bintray插件
- en: 'We have configured the required configuration properties to get our project
    published to Bintray. However, the plugin allows for more configuration. We can
    see the configuration properties in the following table:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了必要的配置属性，以便将我们的项目发布到Bintray。然而，插件允许更多的配置。我们可以在以下表中看到配置属性：
- en: '| Name | Description |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `user` | This sets the Bintray username. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `user` | 这设置了Bintray用户名。 |'
- en: '| `key` | This sets the API key. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `key` | 这设置了API密钥。 |'
- en: '| `configurations` | This defines the configuration list with deployable files.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `configurations` | 这定义了具有可部署文件的配置列表。 |'
- en: '| `publications` | This defines the list of publications to be deployed. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `publications` | 这定义了要部署的出版物列表。 |'
- en: '| `filesSpec` | Use `CopySpec` to define the arbitrary files to be published,
    which are not part of a publication or configuration. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `filesSpec` | 使用`CopySpec`来定义要发布的任意文件，这些文件不是出版物或配置的一部分。 |'
- en: '| `dryRun` | This allows you to execute all tasks without deploying them. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `dryRun` | 这允许您执行所有任务而不部署它们。 |'
- en: '| `publish` | Should version be published after upload, instead of publishing
    it via the web browser. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `publish` | 在上传后是否应该发布版本，而不是通过网络浏览器发布。 |'
- en: '| `pkg.repo` | This is the name of the repository. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.repo` | 这是仓库的名称。 |'
- en: '| `pkg.name` | This is the name of the package. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.name` | 这是软件包的名称。 |'
- en: '| `pkg.userOrg` | This is the optional organization name when the repository
    belongs to an organization. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.userOrg` | 当仓库属于组织时，这是可选的组织名称。 |'
- en: '| `pkg.desc` | This is the description of the package. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.desc` | 这是对软件包的描述。 |'
- en: '| `pkg.websiteUrl` | This is the URL of the website belonging to the project.
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.websiteUrl` | 这是属于项目的网站URL。 |'
- en: '| `pkg.issueTrackerUrl` | This is the URL of the issue-tracking system used
    for the project. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.issueTrackerUrl` | 这是用于项目的缺陷跟踪系统的URL。 |'
- en: '| `pkg.vcsUrl` | This is the URL of the version control system used. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.vcsUrl` | 这是使用的版本控制系统的URL。 |'
- en: '| `pkg.licenses` | This is the list of licenses valid for this project. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.licenses` | 这是此项目的有效许可证列表。 |'
- en: '| `pkg.labels` | This is the list of labels describing what the project is
    about. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.labels` | 这是描述项目内容的标签列表。|'
- en: '| `pkg.publicDownloadNumbers` | This shows how many times published files are
    downloaded. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.publicDownloadNumbers` | 这显示了已发布文件被下载的次数。|'
- en: '| `pkg.attributes` | This is the map of custom attributes for package. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.attributes` | 这是包的定制属性映射。|'
- en: '| `pkg.version.name` | This is the custom Bintray version. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.name` | 这是自定义的 Bintray 版本。|'
- en: '| `pkg.version.desc` | This is the description specific to this version. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.desc` | 这是针对此版本的具体描述。|'
- en: '| `pkg.version.released` | This is the date of release. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.released` | 这是发布日期。|'
- en: '| `pkg.version.vcsTag` | This is the tag for this version in the version control
    system. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.vcsTag` | 这是版本控制系统中此版本的标签。|'
- en: '| `pkg.version.attributes` | These are the custom attributes for this version
    package. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.attributes` | 这些是此版本包的定制属性。|'
- en: '| `pkg.version.gpg.sign` | This is set to `true` to use GPG signing. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.gpg.sign` | 将此设置为 `true` 以使用 GPG 签名。|'
- en: '| `pkg.version.gpg.passphrase` | This is the passphrase for GPG signing. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.gpg.passphrase` | 这是 GPG 签名的密码。|'
- en: '| `pkg.version.mavenCentralSync.sync` | This is set to `true` to sync with
    Maven Central. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.mavenCentralSync.sync` | 将此设置为 `true` 以与 Maven Central 同步。|'
- en: '| `pkg.version.mavenCentralSync.user` | This is the user token to sync with
    Maven Central. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.mavenCentralSync.user` | 这是与 Maven Central 同步的用户令牌。|'
- en: '| `pkg.version.mavenCentralSync.password` | This is the password for the user
    syncing with Maven Central. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.mavenCentralSync.password` | 这是与 Maven Central 同步用户的密码。|'
- en: '| `pkg.version.mavenCentralSync.close` | By default, the staging repository
    is closed and artifacts are released to Maven Central. You can optionally turn
    this behavior off (by putting `0` as value) and release the version manually.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `pkg.version.mavenCentralSync.close` | 默认情况下，暂存库是关闭的，并且工件被发布到 Maven Central。您可以选择性地关闭此行为（通过将值设置为
    `0`）并手动发布版本。|'
- en: 'In the following example build file, we will use some of these configuration
    properties:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例构建文件中，我们将使用一些这些配置属性：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is good to see that if we define the `vcsUrl` and `licenses` configuration
    properties, the plugin will automatically create the package in our repository.
    So, we don't have to use the web browser to create a new package. Instead, we
    can use the configuration in our build script to automatically create a package.
    Also, notice that the package is automatically published, unlike in the first
    example in which it was in an unpublished state.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们定义了 `vcsUrl` 和 `licenses` 配置属性，那么插件将自动在我们的仓库中创建包，这是很好的。因此，我们不必使用网络浏览器来创建新的包。相反，我们可以使用构建脚本中的配置来自动创建包。此外，请注意，包是自动发布的，与第一个例子中的未发布状态不同。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use the third-party Bintray plugin. We learned
    about Bintray and JCenter. We saw how we can create a repository on Bintray and
    use it to deploy our project as a package to this repository.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用第三方 Bintray 插件。我们了解了 Bintray 和 JCenter。我们看到了如何在 Bintray 上创建仓库，并使用它将我们的项目作为包部署到该仓库。
- en: You learned about the different configuration properties that can be set for
    the deployment to Bintray.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了可以为 Bintray 部署设置的不同的配置属性。
- en: In the next chapter, we will see how we can upload to an Ivy repository.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何上传到 Ivy 仓库。
