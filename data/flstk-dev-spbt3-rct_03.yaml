- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Understanding Dependency Injection
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解依赖注入
- en: In this chapter, we will learn what **dependency injection** (**DI**) is and
    how we can use it with the Spring Boot framework. The Spring Boot framework provides
    DI; therefore, it is good to understand the basics. DI allows for loose coupling
    between components, making your code more flexible, maintainable, and testable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习什么是**依赖注入**（**DI**）以及我们如何使用Spring Boot框架来实现它。Spring Boot框架提供了DI；因此，了解基础知识是很好的。DI允许组件之间松散耦合，使代码更加灵活、可维护和可测试。
- en: 'In this chapter, we will look into the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下内容：
- en: Introducing dependency injection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍依赖注入
- en: Using dependency injection in Spring Boot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring Boot中使用依赖注入
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All of the code for this chapter can be found at the following GitHub link:
    [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter02).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码都可以在以下GitHub链接中找到：[https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter02)。
- en: Introducing dependency injection
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍依赖注入
- en: Dependency injection is a software development technique whereby we can create
    objects that depend on other objects. DI helps with interaction between classes,
    but at the same time keeps the classes independent.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入是一种软件开发技术，我们可以创建依赖于其他对象的对象。DI有助于类之间的交互，但同时也保持类的独立性。
- en: 'There are three types of classes in DI:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: DI中有三种类型的类：
- en: A **service** is a class that can be used (this is the dependency).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**是一个可以使用的类（这是依赖）。'
- en: The **client** is a class that uses the dependency.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**是使用依赖的类。'
- en: The **injector** passes the dependency (the service) to the dependent class
    (the client).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注入器**将依赖（服务）传递给依赖类（客户端）。'
- en: 'The three types of classes in DI are shown in the following diagram:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了DI中的三种类型类：
- en: '![](img/B19818_02_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_02_01.png)'
- en: 'Figure 2.1: DI classes'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：DI类
- en: DI makes classes loosely coupled. This means that the creation of client dependencies
    is separated from the client’s behavior, which makes unit testing easier.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DI使类之间松散耦合。这意味着客户端依赖的创建与客户端的行为分离，这使得单元测试更容易。
- en: 'Let’s take a look at a simplified example of DI using Java code. In the following
    code, we don’t have DI, because the `Car` client class is creating an object of
    the service class:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过Java代码的简化示例来了解一下DI。在以下代码中，我们没有DI，因为`Car`客户端类正在创建服务类的一个对象：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the following code, the service object is not directly created in the client
    class. It is passed as a parameter in the class constructor:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，服务对象不是在客户端类中直接创建的。它作为参数传递给类的构造器：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The service class can also be an abstract class; we can then use any implementation
    of that in our client class and use mocks when testing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务类也可以是抽象类；我们可以在客户端类中使用该类的任何实现，并在测试时使用模拟。
- en: 'There are different types of dependency injection; let’s take a look at two
    of them here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的依赖注入；让我们在这里看看两种：
- en: '**Constructor injection**: Dependencies are passed to a client class constructor.
    An example of constructor injection was already shown in the preceding `Car` code.
    Constructor injection is recommended to use for mandatory dependencies. All dependencies
    are provided using the class constructor and an object cannot be created without
    its required dependencies.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构造器注入**：依赖通过客户端类的构造器传递。在先前的`Car`代码中已经展示了构造器注入的例子。对于强制依赖，建议使用构造器注入。所有依赖都通过类构造器提供，并且没有其必需依赖的对象无法创建。'
- en: '**Setter injection**: Dependencies are provided through setters. The following
    code shows an example of setter injection:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置器注入**：依赖通过设置器提供。以下代码展示了设置器注入的例子：'
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the dependency is now passed in the setter as an argument. Setter injection
    is more flexible because objects can be created without all their dependencies.
    This approach allows for optional dependencies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，依赖现在作为参数传递给设置器。设置器注入更灵活，因为可以创建没有所有依赖的对象。这种方法允许有可选依赖。
- en: The DI reduces dependencies in your code and makes your code more reusable.
    It also improves the testability of your code. We have now learned the basics
    of DI. Next, we will look at how DI is used in Spring Boot.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入减少了代码中的依赖关系，并使代码更具可重用性。它还提高了代码的可测试性。我们现在已经学习了DI的基础知识。接下来，我们将探讨DI在Spring
    Boot中的应用。
- en: Using dependency injection in Spring Boot
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring Boot中使用依赖注入
- en: In the Spring Framework, dependency injection is achieved through the Spring
    `ApplicationContext`. `ApplicationContext` is responsible for creating and managing
    objects – **beans** – and their dependencies.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring框架中，依赖注入是通过Spring `ApplicationContext`实现的。`ApplicationContext`负责创建和管理对象——**bean**——及其依赖关系。
- en: Spring Boot scans your application classes and registers classes with certain
    annotations (`@Service`, `@Repository`, `@Controller`, and so on) as Spring beans.
    These beans can then be injected using dependency injection.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot扫描您的应用程序类，并将带有特定注解（`@Service`、`@Repository`、`@Controller`等）的类注册为Spring
    bean。然后，可以使用依赖注入将这些bean注入。
- en: 'Spring Boot supports several dependency injection mechanisms, and the most
    common ones are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot支持多种依赖注入机制，其中最常见的是：
- en: '**Constructor injection**: Dependencies are injected through a constructor.
    This is the most recommended way because it ensures that all required dependencies
    are available when the object is created. A fairly common situation is when we
    need database access for some operations. In Spring Boot, we use repository classes
    for that. In this situation, we can inject the repository class using constructor
    injection and start using its methods, as shown in the code example below:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构造函数注入**：依赖通过构造函数注入。这是最推荐的方式，因为它确保在对象创建时所有必需的依赖都可用。一个相当常见的情况是我们需要数据库访问来进行某些操作。在Spring
    Boot中，我们使用仓库类来处理这种情况。在这种情况下，我们可以使用构造函数注入来注入仓库类，并开始使用其方法，如下面的代码示例所示：'
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you have multiple constructors in your class, you have to use the `@Autowired`
    annotation to define which constructor is used for dependency injection:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您的类中有多个构造函数，您必须使用`@Autowired`注解来定义用于依赖注入的构造函数：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Setter injection**: Dependencies are injected through setter methods. Setter
    injection is useful if you have optional dependencies or if you want to modify
    dependencies at runtime. Below is an example of setter injection:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**setter注入**：依赖通过setter方法注入。setter注入在您有可选依赖项或希望在运行时修改依赖项时很有用。下面是setter注入的示例：'
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Field injection**: Dependencies are injected directly into fields. The benefit
    of field injection is its simplicity, but it has some drawbacks. It can cause
    runtime errors if the dependency is not available. It is also harder to test your
    class because you can’t mock the dependencies for testing. Here is an example:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字段注入**：依赖直接注入到字段中。字段注入的优点是简单，但它也有一些缺点。如果依赖不可用，它可能会导致运行时错误。此外，测试您的类也更困难，因为您不能为测试模拟依赖。以下是一个示例：'
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can read more about Spring Boot injection in the Spring documentation:
    https://spring.io/guides.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Spring文档中了解更多关于Spring Boot注入的信息：https://spring.io/guides。
- en: Summary
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what dependency injection is and how to use it in
    the Spring Boot framework, which we are using in our backend.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了依赖注入是什么以及如何在Spring Boot框架中使用它，这是我们用于后端的部分。
- en: In the next chapter, we will look at how we can use the **Java Persistent API**
    (**JPA**) with Spring Boot and how to set up a MariaDB database. We will also
    learn about the creation of CRUD repositories and the one-to-many connection between
    database tables.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用**Java持久化API**（**JPA**）与Spring Boot以及如何设置MariaDB数据库。我们还将学习创建CRUD仓库以及数据库表之间的一对多连接。
- en: Questions
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is dependency injection?
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是依赖注入？
- en: How does the `@Autowired` annotation work in Spring Boot?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Boot中的`@Autowired`注解是如何工作的？
- en: How do you inject resources in Spring Boot?
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何在Spring Boot中注入资源？
- en: Further reading
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has some video resources for learning about Spring Boot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Packt提供了一些关于学习Spring Boot的视频资源：
- en: '*Learn Spring Core Framework the Easy Way*, by Karthikeya T. ([https://www.packtpub.com/product/learn-spring-core-framework-the-easy-way-video/9781801071680](https://www.packtpub.com/product/learn-spring-core-framework-the-easy-way-video/9781801071680))'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过简单方式学习Spring核心框架*，作者Karthikeya T. ([https://www.packtpub.com/product/learn-spring-core-framework-the-easy-way-video/9781801071680](https://www.packtpub.com/product/learn-spring-core-framework-the-easy-way-video/9781801071680))'
- en: '*Mastering Spring Framework Fundamentals*, by Matthew Speake ([https://www.packtpub.com/product/mastering-spring-framework-fundamentals-video/9781801079525](https://www.packtpub.com/product/mastering-spring-framework-fundamentals-video/9781801079525))'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*精通 Spring 框架基础*, 由 Matthew Speake 著 ([https://www.packtpub.com/product/mastering-spring-framework-fundamentals-video/9781801079525](https://www.packtpub.com/product/mastering-spring-framework-fundamentals-video/9781801079525))'
- en: Learn more on Discord
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里您可以分享反馈、向作者提问，并了解新书发布——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10796108009382640.png)'
