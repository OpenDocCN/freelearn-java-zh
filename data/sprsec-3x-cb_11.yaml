- en: Chapter 11. More on Spring Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。更多关于Spring安全
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security with multiple authentication providers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个认证提供者的Spring安全
- en: Spring Security with multiple input authentications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个输入认证的Spring安全
- en: Spring Security with Captcha integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成验证码的Spring安全
- en: Spring Security with JAAS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security with JAAS
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter we will see some more examples of Spring Security. Let's see
    how we can integrate Spring Security with multiple authentication providers. We
    will also see an example of authentication using Spring with multiple inputs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到Spring安全的一些更多示例。让我们看看如何将Spring安全与多个认证提供者集成。我们还将看到使用Spring进行多个输入认证的示例。
- en: Spring Security with multiple authentication providers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有多个认证提供者的Spring安全
- en: Spring Security provides an option to add many authentication providers. The
    filter chain checks with each and every authentication provider until it gets
    authenticated successfully.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了添加多个认证提供者的选项。过滤器链会检查每个认证提供者，直到成功认证。
- en: In this section, let's see how to configure multiple authentication providers
    and how Spring does the authentication with multiple authentication providers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看如何配置多个认证提供者以及Spring如何使用多个认证提供者进行认证。
- en: For example, we are using the `horrormovie` application in which authentication
    and authorization is handled by Spring Security with database.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们正在使用`horrormovie`应用程序，其中认证和授权由Spring Security与数据库处理。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a maven web project
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个maven web项目
- en: Add the `spring-security` dependency
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`spring-security`依赖项
- en: Add the spring-core related dependency
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与spring-core相关的依赖项
- en: Configure the Spring context listener in the `Web.xml` file
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Web.xml`文件中配置Spring上下文监听器
- en: Create the `AddHorroMovieController.java` controller and add the request mapping
    methods for addition, deletion, and listing
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`AddHorroMovieController.java`控制器，并添加用于添加、删除和列出的请求映射方法
- en: Edit the `application-security.xml` file with another authentication provider
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`文件以添加另一个认证提供者
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to integrate multiple authentication providers
    with Spring Security:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将多个认证提供者与Spring Security集成的步骤：
- en: Edit the `application-security.xml` file.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`application-security.xml`文件。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Deploy the application on a GlassFish application server; access the following
    URL: `http://localhost:8080/list` and log in with username/password (`Vikash`/`Vikash123`).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用部署到GlassFish应用服务器；访问以下URL：`http://localhost:8080/list`，并使用用户名/密码（`Vikash`/`Vikash123`）登录。
- en: This is the user created in the derby database with access (`ROLE_EDITOR`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在derby数据库中创建的用户，具有访问权限（`ROLE_EDITOR`）。
- en: Then log out and log in again with username as `shami` and password as `shami123`.
    Here the user is authenticated by both the authentication providers in a sequential
    manner.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后注销并再次使用用户名`shami`和密码`shami123`登录。在这里，用户会按顺序通过两个认证提供者进行认证。
- en: '![How it works...](img/7525OS_11_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_11_01.jpg)'
- en: See also
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with multiple input authentications* recipe
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*具有多个输入认证的Spring安全*配方'
- en: The *Spring Security with Captcha integration* recipe
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成验证码的Spring安全
- en: The *Spring Security with JAAS* recipe
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*具有JAAS的Spring安全*配方'
- en: Spring Security with multiple input authentications
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有多个输入认证的Spring安全
- en: In this section, we will demonstrate multiple input authentications. This is
    also called two factor authentications. So far, in all our examples, we are authenticating
    against username and password. In this example, we will provide another field
    for phone number along with username. It is the same `horrormovie` application
    with hibernate and derby database.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示多个输入认证。这也被称为双因素认证。到目前为止，在我们的所有示例中，我们都是根据用户名和密码进行认证。在这个示例中，我们将提供另一个字段用于电话号码以及用户名。这是使用hibernate和derby数据库的相同`horrormovie`应用程序。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a custom filter to handle the new login form
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个自定义过滤器来处理新的登录表单
- en: Configure the custom filter in your `Springsecurity.xml` file
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Springsecurity.xml`文件中配置自定义过滤器
- en: Update the `UserDetailsService` implementation class to handle the additional
    input
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`UserDetailsService`实现类以处理额外的输入
- en: Add an extra column named `MOBILE_NO` in your database
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中添加一个名为`MOBILE_NO`的额外列
- en: Update the `login.jsp` file to take `MOBILE_NO` as input
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`login.jsp`文件以接受`MOBILE_NO`作为输入
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to implement multiple input authentications with
    Spring Security:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Spring Security实现多个输入认证的步骤：
- en: Create a custom filter named `MultipleInputAuthenticationFilter` to extract
    the extra mobile number parameter.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`MultipleInputAuthenticationFilter`的自定义过滤器以提取额外的手机号参数。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Update the `application-security.xml` file to handle the custom filter.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`application-security.xml`文件以处理自定义过滤器。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Update `UsersDAOImpl` to handle the extra input.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`UsersDAOImpl`以处理额外的输入。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Implement the methods in the `MyUserDetails` class, which implements the `UserDetailsService`
    interface to handle the extra inputs.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实现`UserDetailsService`接口的`MyUserDetails`类中实现方法，以处理额外的输入。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Access the following URL: `http://localhost:8080/SpringSecurity_MultipleInputAuth/login`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下URL：`http://localhost:8080/SpringSecurity_MultipleInputAuth/login`
- en: The user is authenticated not just with the username and password as demonstrated
    in all the applications used in the book, but also with the mobile number parameter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 用户不仅通过用户名和密码进行认证，如本书中所有应用程序中所示，还通过手机号参数进行认证。
- en: When the user submits the information in the login page and hits on **SubmitQuery**,
    the username and mobile number gets clubbed with a delimiter and Spring Security
    will invoke the `MyUserDetails` class, which will again split the parameter and
    authenticate the user based on the inputs provided by the user using hibernate.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在登录页面提交信息并点击**提交查询**时，用户名和手机号将与分隔符合并，并且Spring安全性将调用`MyUserDetails`类，该类将根据用户使用hibernate提供的输入再次拆分参数并对用户进行身份验证。
- en: On successful authentication, the user is redirected to the authorized page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 成功验证后，用户将被重定向到经过授权的页面。
- en: '![How it works...](img/7525OS_11_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_11_02.jpg)'
- en: See also
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with multiple authentication providers* recipe
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个身份验证提供程序的Spring安全性配方
- en: The *Spring Security with Captcha integration* recipe
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有验证码集成的Spring安全性配方
- en: The *Spring Security with JAAS* recipe
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有JAAS的Spring安全性配方
- en: Spring Security with Captcha integration
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有验证码集成的Spring安全性
- en: Let us demonstrate the integration of Spring Security with Captcha. We have
    downloaded a `Kaptcha.jar` Captcha provider for this purpose. We need to install
    the jar file into the maven local repository for the application to work.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示Spring安全性与验证码的集成。我们已经为此目的下载了`Kaptcha.jar`验证码提供程序。我们需要将jar文件安装到maven本地存储库中，以使应用程序正常工作。
- en: The example is an extension of the previous recipe where an additional input,
    mobile number, was considered for authorization and authentication by Spring Security.
    In this example, we will get the code for username and password from the user
    along with the Captcha code. The username is authenticated against the database,
    and the requested Captcha and the Captcha entered by the user are also compared.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例是前一个配方的扩展，其中考虑了额外的输入，即手机号码，用于Spring安全性的授权和身份验证。在此示例中，我们将从用户那里获取用户名和密码的代码以及验证码代码。用户名将与数据库进行身份验证，并且还将比较请求的验证码和用户输入的验证码。
- en: When the entire conditions match, the user is said to be authenticated or else
    the authentication is a failure.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有条件匹配时，用户被认为已经通过验证，否则认证失败。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Add the `Kaptcha` servlet to the `Web.xml` file
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Kaptcha` servlet添加到`Web.xml`文件中
- en: Configure the custom filter in your `Springsecurity.xml` file
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的`Springsecurity.xml`文件中配置自定义过滤器
- en: Update the `UserDetailsService` implementation class to handle `Kaptcha`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`UserDetailsService`实现类以处理`Kaptcha`
- en: Update the `login.jsp` file to take `Kaptcha` as an input
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新`login.jsp`文件以将`Kaptcha`作为输入
- en: Extend `UsernamePasswordAuthenticationFilter`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展`UsernamePasswordAuthenticationFilter`
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to integrate Spring Security with Captcha:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将Spring安全性与验证码集成的步骤：
- en: Add the `Kaptcha` servlet to the `Web.xml` file.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Kaptcha` servlet添加到`Web.xml`文件中。
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Update the `application-security.xml` to handle the custom filter.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`application-security.xml`以处理自定义过滤器。
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Update `UsersDAOImpl` to handle the extra input.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`UsersDAOImpl`以处理额外的输入。
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Update the `UserDetailsService` class to handle the extra input.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`UserDetailsService`类以处理额外的输入。
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Extend `UsernamePasswordAuthenticationFilter` and override the `obtainUsername`
    (`HttpServletRequest` request) method in the `MultipleInputAuthenticationFilter`
    class.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展`UsernamePasswordAuthenticationFilter`并重写`MultipleInputAuthenticationFilter`类中的`obtainUsername`（`HttpServletRequest`请求）方法。
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Access the following URL:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下URL：
- en: '`http://localhost:8080/SpringSecurity_MultipleInputAuth/login`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/SpringSecurity_MultipleInputAuth/login`'
- en: The `Kaptcha` servlet displays different diagrams for the user on the browser.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kaptcha` servlet在浏览器上为用户显示不同的图表。'
- en: The value entered by the user and the value generated by `Kaptcha` are compared
    in the `UsersDAOImpl.java` class along with the `Username` field from the database.
    When entire conditions match, that is, `Kaptcha` entered by the user should be
    the same as `Kaptcha` displayed by the browser and the username should be present
    in the database, then the user is said to be authenticated. The user is redirected
    to the authenticated and authorized page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入的值和`Kaptcha`生成的值与`UsersDAOImpl.java`类中的`Username`字段一起与数据库中的值进行比较。当所有条件匹配时，即用户输入的`Kaptcha`应与浏览器显示的`Kaptcha`相同，并且用户名应存在于数据库中，那么用户被认为已通过验证。用户将被重定向到经过验证和授权的页面。
- en: '![How it works...](img/7525OS_11_03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_11_03.jpg)'
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with multiple authentication providers* recipe
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个身份验证提供程序的Spring安全性配方
- en: The *Spring Security with multiple input authentications* recipe
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个输入身份验证的Spring安全性配方
- en: The *Spring Security with JAAS* recipe
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有JAAS的Spring安全性配方
- en: Spring Security with JAAS
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有JAAS的Spring安全性
- en: In [Chapter 1](ch01.html "Chapter 1. Basic Security"), *Basic Security*, we
    have already demonstrated how to use JAAS configuration in JBOSS for authentication
    and authorization. Spring Security also provides a full support to implement JAAS-based
    authentication. We need to configure `DefaultJaasAuthenticationProvider` as the
    authentication provider. In this section, we will demonstrate integration of Spring
    Security with JAAS.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html“第1章。基本安全性”)中，*基本安全性*，我们已经演示了如何在JBOSS中使用JAAS配置进行身份验证和授权。 Spring安全性还提供了完全支持以实现基于JAAS的身份验证。我们需要将`DefaultJaasAuthenticationProvider`配置为身份验证提供程序。在本节中，我们将演示将Spring安全性与JAAS集成。
- en: 'Let us see some of the JAAS-based classes and interfaces offered by Spring
    Security APIs:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些由Spring安全性API提供的基于JAAS的类和接口：
- en: '`org.springframework.security.authentication.jaas`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.security.authentication.jaas`'
- en: '`AbstractJaasAuthenticationProvider`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AbstractJaasAuthenticationProvider`'
- en: '`AuthorityGranter`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthorityGranter`'
- en: '`DefaultJaasAuthenticationProvider`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultJaasAuthenticationProvider`'
- en: '`DefaultLoginExceptionResolver`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultLoginExceptionResolver`'
- en: '`JaasAuthenticationCallbackHandler`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JaasAuthenticationCallbackHandler`'
- en: '`JaasAuthenticationToken`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JaasAuthenticationToken`'
- en: '`JaasGrantedAuthority`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JaasGrantedAuthority`'
- en: '`JaasNameCallbackHandler`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JaasNameCallbackHandler
- en: '`LoginExceptionResolver`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录异常解析器
- en: '`SecurityContextLoginModule`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecurityContextLoginModule`'
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Implement the `AuthorityGranter` interface by `org.springframework.security.authentication.jaas.AuthorityGranter`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`org.springframework.security.authentication.jaas.AuthorityGranter`实现`AuthorityGranter`接口
- en: Implement the `LoginModule` interface by `javax.security.auth.spi.LoginModule`
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`javax.security.auth.spi.LoginModule`实现`LoginModule`接口
- en: Configure the `DefaultJaasAuthenticationProvider` class in the `context.xml`
    file. Implement the `AuthorityGranter` interface and its configurations.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`context.xml`文件中配置`DefaultJaasAuthenticationProvider`类。实现`AuthorityGranter`接口及其配置。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps for implementing JAAS with Spring Security:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Spring安全实现JAAS的步骤：
- en: Implement the `AuthorityGranter` class using the `AuthorityGranterImpl` class.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`AuthorityGranterImpl`类实现`AuthorityGranter`类
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Implement the `LoginModule` class, which is available in the `javax.security.auth.spi`
    package, using the `LoginModuleImpl` class.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`javax.security.auth.spi`包中的`LoginModule`类，使用`LoginModuleImpl`类
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Configure Spring Security with JAAS.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JAAS配置Spring安全。
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Access the URL: `http://localhost:8080/SpringSecurity_Jaas/`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/SpringSecurity_Jaas/`
- en: 'Log in using the following credentials: `publisher`/`publisher123` and `editor`/`editor123`.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下凭据登录：`publisher`/`publisher123`和`editor`/`editor123`
- en: 'The authentication is handled by `DefaultJaasAuthenticationProvider`. The user
    information and authentication is handled by `InMemoryConfiguration`, which implies
    that the `LoginModule` class of JAAS does the authentication and authorization
    using `callbackhandlers`. On successful authentication, user is redirected to
    the authorized page. The following screenshots show the workflow of the application:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证由`DefaultJaasAuthenticationProvider`处理。用户信息和身份验证由`InMemoryConfiguration`处理，这意味着JAAS的`LoginModule`类使用`callbackhandlers`进行身份验证和授权。成功验证后，用户将被重定向到授权页面。以下截图显示了应用程序的工作流程：
- en: '![How it works...](img/7525OS_11_04.jpg)![How it works...](img/7525OS_11_05.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_11_04.jpg)![它是如何工作的...](img/7525OS_11_05.jpg)'
- en: See also
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with multiple authentication providers* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个身份验证提供程序的Spring安全配方
- en: The *Spring Security with multiple input authentications* recipe
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个输入验证的Spring安全配方
- en: The *Spring Security with JAAS* recipe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JAAS的Spring安全配方
