- en: Chapter 2. Defining Beans and Using Dependency Injection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。定义 Bean 和使用依赖注入
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Defining a bean explicitly with @Bean
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个 Bean 显式使用 @Bean
- en: Defining a bean implicitly with @Component
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 @Component 隐式定义一个 Bean
- en: Using a bean via dependency injection with @Autowired
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 @Autowired 注入依赖使用 Bean
- en: Using a bean directly
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用 Bean
- en: Listing all beans
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有 Bean
- en: Using multiple configuration classes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个配置类
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Beans** are at the core of Spring. They are standard Java objects instantiated
    and managed by Spring.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bean** 是 Spring 的核心。它们是由 Spring 实例化和管理的标准 Java 对象。'
- en: 'Beans are mostly used to:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Bean 主要用于：
- en: Configure Spring in some way (database connection parameters, security, and
    so on)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以某种方式配置 Spring（数据库连接参数、安全等）
- en: Avoid hardcoding dependencies using **dependency injection**, so that our classes
    remain self-contained and unit testable
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用 **依赖注入** 硬编码依赖，这样我们的类才能保持自包含和可单元测试
- en: In this chapter, you'll learn how to define beans and use them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何定义 Bean 并使用它们。
- en: Defining a bean explicitly with @Bean
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 @Bean 显式定义一个 Bean
- en: The simplest way to define a bean is to create, in a Spring configuration class,
    a method annotated with `@Bean` returning an object (the actual bean). Such beans
    are usually used to configure Spring in some way (database, security, view resolver,
    and so on). In this recipe, we'll define a bean that contains the connection details
    of a database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Bean 的最简单方法是在 Spring 配置类中创建一个带有 `@Bean` 注解的方法，返回一个对象（实际的 Bean）。这类 Bean 通常用于以某种方式配置
    Spring（数据库、安全、视图解析等）。在这个菜谱中，我们将定义一个包含数据库连接详情的 Bean。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In a Spring configuration class, add a `dataSource()` method annotated with
    `@Bean` and return a `Datasource` object. In this method, create a `DriverManagerDataSource`
    object initialized with the connection details of a database:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring 配置类中添加一个带有 `@Bean` 注解的 `dataSource()` 方法，并返回一个 `Datasource` 对象。在这个方法中，创建一个初始化了数据库连接详情的
    `DriverManagerDataSource` 对象：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: At startup, because of `@Bean`, the `dataSource()` method is automatically executed
    and returns a `Datasource` object which is stored by Spring (in a Spring object
    called `ApplicationContext`). The bean name is `dataSource`, which is the same
    as its methods name. From this point, any call to `dataSource()` will return the
    same cached `DataSource` object; `dataSource()` won't actually be executed again.
    This is done using aspect-oriented programming; any call to `dataSource()` is
    intercepted by Spring, which directly returns the object instead of executing
    the method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时，由于 `@Bean`，`dataSource()` 方法会自动执行并返回一个 `Datasource` 对象，该对象被 Spring 存储在一个称为
    `ApplicationContext` 的 Spring 对象中。Bean 名称是 `dataSource`，与它的方法名称相同。从这一点开始，任何对 `dataSource()`
    的调用都将返回相同的缓存 `DataSource` 对象；`dataSource()` 不会再次实际执行。这是通过面向切面编程实现的；任何对 `dataSource()`
    的调用都会被 Spring 拦截，直接返回对象而不是执行方法。
- en: There's more…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To customize the bean name, use the name parameter:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义 Bean 名称，请使用名称参数：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To force `dataSource()` to be executed each time it''s called (and return a
    different object each time), use the `@Scope` annotation with a `prototype` scope:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制 `dataSource()` 在每次调用时执行（并返回不同的对象），请使用带有 `prototype` 范围的 `@Scope` 注解：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It''s possible to define beans using our own classes. For example, if we have
    a `UserService` class, we can define a `UserService` bean in a Spring configuration
    class:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们自己的类定义 Bean 是可能的。例如，如果我们有一个 `UserService` 类，我们可以在 Spring 配置类中定义一个 `UserService`
    Bean：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, it's usually simpler to let Spring generate this kind of beans automatically
    using a `@Component` annotation on the `UserService` class, as explained in the
    *Defining a bean implicitly with @Component* recipe.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常更简单的是让 Spring 通过在 `UserService` 类上使用 `@Component` 注解自动生成这类 Bean，正如在 *使用
    @Component 隐式定义一个 Bean* 菜谱中解释的那样。
- en: Defining a bean implicitly with @Component
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 @Component 隐式定义一个 Bean
- en: Beans don't have to be defined in a Spring configuration class. Spring will
    automatically generate a bean from any class annotated with `@Component`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Bean 不必定义在 Spring 配置类中。Spring 会自动从任何带有 `@Component` 注解的类生成 Bean。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the basic web application created in the *Creating a Spring web
    application* recipe in [Chapter 1](ch01.html "Chapter 1. Creating a Spring Application"),
    *Creating a Spring Application*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 1 章](ch01.html "第 1 章。创建 Spring 应用程序") 中创建的基本 Web 应用程序 *创建 Spring Web
    应用程序* 菜单中，使用 *创建 Spring 应用程序*。
- en: 'Create the `com.springcookbook.service` package and the following service class
    in it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `com.springcookbook.service` 包以及其中的以下服务类：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to define a bean by adding `@Component` to an existing class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Bean 的步骤如下，通过向现有类添加 `@Component`：
- en: 'In the Spring configuration file, in the `@ComponentScan` class annotation,
    add the `com.springcookbook.service` base package:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spring 配置文件中，在 `@ComponentScan` 类注解中添加 `com.springcookbook.service` 基础包：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `UserService` class, add `@Component`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `UserService` 类中添加 `@Component`：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At startup, the `com.springcookbook.service` package will be scanned by Spring.
    The `UserService` class is annotated with `@Component`, so a bean is automatically
    instantiated from it. The bean's name will be `userService` by default, based
    on the class name.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时，Spring 会扫描 `com.springcookbook.service` 包。`UserService` 类被注解为 `@Component`，因此会自动从它实例化一个
    Bean。默认情况下，Bean 的名称将是 `userService`，基于类名。
- en: 'To specify a custom name, use the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定一个自定义名称，请使用以下代码：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's more…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: If the `UserService` bean requires some custom initialization, for example,
    based on the current environment, it's possible to define and initialize the bean
    explicitly as explained in the previous recipe, *Defining a bean explicitly with
    @Bean*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `UserService` Bean 需要进行一些自定义初始化，例如基于当前环境，可以像在之前的配方中解释的那样显式定义和初始化 Bean，即 *使用
    @Bean 显式定义 Bean*。
- en: '`@Controller`, `@Service`, and `@Repository` are also component annotations;
    Spring will automatically instantiate a bean at startup from the classes annotated
    with them. It''s not strictly necessary to use these component annotations, but
    they make the role of the component class clearer; `@Controller` is used for controller
    classes, `@Service` is used for service classes (so that''s the one we would actually
    use for our `UserService` class), and `@Repository` is used for persistence classes.
    They also add minor extra functionality to the component classes. Refer to [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Controller`、`@Service` 和 `@Repository` 也是一种组件注解；Spring 在启动时会自动从带有这些注解的类中实例化一个
    Bean。使用这些组件注解并不是严格必要的，但它们可以使组件类的角色更加清晰；`@Controller` 用于控制器类，`@Service` 用于服务类（因此我们会为我们的
    `UserService` 类使用它），而 `@Repository` 用于持久化类。它们还为组件类添加了一些额外的功能。请参阅 [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations)。'
- en: Using a bean via dependency injection with @Autowired
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 @Autowired 进行依赖注入使用 Bean
- en: Spring configuration beans, such as the one in the *Defining a bean explicitly
    with @Bean* recipe are automatically discovered and used by Spring. To use a bean
    (any kind of bean) in one of your classes, add the bean as a field and annotate
    it with `@Autowired`. Spring will automatically initialize the field with the
    bean. In this recipe, we'll use an existing bean in a controller class.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 配置 Bean，如 *使用 @Bean 显式定义 Bean* 配方中的 Bean，会被 Spring 自动发现和使用。要在你的类中使用一个
    Bean（任何类型的 Bean），请将 Bean 添加为字段并注解它为 `@Autowired`。Spring 会自动初始化这个字段为 Bean。在这个配方中，我们将在控制器类中使用一个现有
    Bean。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the code from the *Defining a bean implicitly with @Component* recipe,
    where we defined a `UserService` bean.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 *使用 @Component 隐式定义 Bean* 配方中的代码，其中我们定义了一个 `UserService` Bean。
- en: How to do it…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to use an existing bean in one of your classes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用现有 Bean 的步骤：
- en: 'In the controller class, add a `UserService` field annotated with `@Autowired`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器类中，添加一个被 `@Autowired` 注解的 `UserService` 字段：
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In a controller method, use the `UserService` field:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，使用 `UserService` 字段：
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In a web browser, go to `http://localhost:8080/hi` to check whether it's working.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问 `http://localhost:8080/hi` 以检查它是否正常工作。
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the controller class is instantiated, Spring automatically initializes
    the `@Autowired` field with the existing `UserService` bean. This is called dependency
    injection; the controller class simply declares its dependency, a `UserService`
    field. It's Spring that initializes the field by injecting a `UserService` object
    into it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制器类被实例化时，Spring 会自动将现有的 `UserService` Bean 初始化到 `@Autowired` 字段中。这被称为依赖注入；控制器类只需声明其依赖项，即一个
    `UserService` 字段。是 Spring 通过向其中注入一个 `UserService` 对象来初始化这个字段的。
- en: If Spring is not able to find an existing bean for that dependency, an exception
    is thrown.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Spring无法找到该依赖项的现有bean，则会抛出异常。
- en: There's more…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'It''s possible to set the name of the bean to be used:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设置要使用的bean的名称：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Dependency injection is useful when interfaces are used. For example, we could
    replace our `UserService` class by a `UserService` interface and its implementation
    `UserServiceImpl`. Everything would work the same, except that it's now simple
    to swap `UserServiceImpl` for another class, for example, for unit testing purposes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用接口时，依赖注入非常有用。例如，我们可以用`UserService`接口及其实现`UserServiceImpl`来替换我们的`UserService`类。一切都会按原样工作，除了现在可以简单地用另一个类（例如，为了单元测试目的）替换`UserServiceImpl`。
- en: Using a bean directly
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接使用bean
- en: It's possible to get a bean directly from Spring instead of using dependency
    injection by making Spring's `ApplicationContext`, which contains all the beans,
    a dependency of your class. In this recipe, we'll inject an existing bean into
    a controller class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将包含所有bean的Spring的`ApplicationContext`作为你的类的依赖项来直接从Spring获取bean，而不是使用依赖注入。在这个配方中，我们将向控制器类注入一个现有的bean。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the code from the *Defining a bean implicitly with @Component* recipe,
    where we defined a `UserService` bean.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*使用@Component注解隐式定义bean*配方中的代码，其中我们定义了一个`UserService`bean。
- en: How to do it…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to get and use a bean directly:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是获取和使用一个豆类直接的方法：
- en: 'In the controller class, add an `ApplicationContext` field annotated with `@Autowired`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器类中，添加一个被`@Autowired`注解的`ApplicationContext`字段：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In a controller method, use the `ApplicationContext` object and its `getBean()`
    method to retrieve the `UserService` bean:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，使用`ApplicationContext`对象及其`getBean()`方法来检索`UserService`bean：
- en: '[PRE12]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the controller class is instantiated, Spring automatically initializes
    the `@Autowired` field with its `ApplicationContext` object. The `ApplicationContext`
    object references all Spring beans, so we can get a bean directly using its name.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制器类被实例化时，Spring会自动用它的`ApplicationContext`对象初始化`@Autowired`字段。`ApplicationContext`对象引用了所有的Spring
    beans，因此我们可以直接通过名称获取一个bean。
- en: There's more…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: It's possible to get a bean by its class, without knowing its name.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过类来获取一个bean，而不需要知道它的名字。
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Listing all beans
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出所有bean
- en: It can be useful, especially for debugging purposes, to list all the beans at
    a given moment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这在调试目的上可能很有用。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the code from the *Defining a bean implicitly with @Component* recipe,
    where we defined a `UserService` bean.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*使用@Component注解隐式定义bean*配方中的代码，其中我们定义了一个`UserService`bean。
- en: How to do it…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to retrieve the names of the beans currently in Spring''s
    `ApplicationContext` object:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是检索当前Spring的`ApplicationContext`对象中bean名称的步骤：
- en: 'In your class, add an `ApplicationContext` field annotated with `@Autowired`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的类中，添加一个被`@Autowired`注解的`ApplicationContext`字段：
- en: '[PRE14]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In a method of that class, use `ApplicationContext` and its `getBeanDefinitionNames()`method
    to get the list of bean names:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该类的某个方法中，使用`ApplicationContext`及其`getBeanDefinitionNames()`方法来获取bean名称列表：
- en: '[PRE15]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the controller class is instantiated, Spring automatically initializes
    the `@Autowired` field with its `ApplicationContext` object. The `ApplicationContext`
    object references all Spring beans, so we can get a list of all the beans that
    are using it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制器类被实例化时，Spring会自动用它的`ApplicationContext`对象初始化`@Autowired`字段。`ApplicationContext`对象引用了所有的Spring
    beans，因此我们可以获取使用它的所有bean的列表。
- en: There's more…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'To retrieve the bean itself from its name, use the `getBean()` method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要从其名称获取bean本身，请使用`getBean()`方法：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using multiple configuration classes
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个配置类
- en: A Spring configuration class can get quite long with many bean definitions.
    At this point, it can be convenient to break it into multiple classes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置类中有许多bean定义时，Spring配置类可能会变得相当长。在这种情况下，将其拆分为多个类可能很方便。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the code from the *Defining a bean explicitly with @Bean* recipe.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*使用@Bean注解显式定义bean*配方中的代码。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here''s how to add a second configuration class:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是添加第二个配置类的方法：
- en: 'Create a new configuration class, for example, `DatabaseConfig` in the `com.springcookbook.config`
    package:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的配置类，例如，在`com.springcookbook.config`包中的`DatabaseConfig`：
- en: '[PRE17]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `ServletInitializer` class, add the `DatabaseConfig` class in the `getServletConfigClasses()`
    method:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ServletInitializer`类中，在`getServletConfigClasses()`方法中添加`DatabaseConfig`类：
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Move the `Datasource` bean from the `AppConfig` class to `DatabaseConfig`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Datasource`实体从`AppConfig`类移动到`DatabaseConfig`类。
- en: There's more…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you are using a Spring application without a `ServletInitializer` class,
    you can include other configuration classes from your primary configuration class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用没有`ServletInitializer`类的Spring应用程序，你可以从你的主要配置类中包含其他配置类：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
