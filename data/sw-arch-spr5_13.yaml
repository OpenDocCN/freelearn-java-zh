- en: Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: Security is a field that teams often do not pay close attention to when developing
    their products. There are a few key considerations that developers should keep
    in mind when writing code. Most of the considerations listed in this chapter are
    obvious, but others aren't, so we will discuss all of them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是开发团队在开发产品时经常忽视的领域。开发人员在编写代码时应牢记一些关键考虑因素。本章列出的大多数考虑因素都是显而易见的，但也有一些不是，因此我们将讨论所有这些考虑因素。
- en: 'We will cover, the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why security is important as part of an application's architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么安全作为应用程序架构的一部分很重要
- en: 'Key recommendations for keeping your software secure:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持软件安全的关键建议：
- en: Authentication and authorization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证和授权
- en: Cryptographic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: Data input validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据输入验证
- en: Sensitive data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感数据
- en: Social engineering
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会工程学
- en: Penetration testing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试
- en: Authentication as a service
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证作为服务
- en: We will start by introducing the importance of security as part of an application's
    architecture.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍安全作为应用程序架构的重要性。
- en: Why security is important as a part of an application's architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么安全作为应用程序架构的一部分很重要
- en: Over the past few years, I have seen many cases of organizations or companies
    reviewing their software security concerns after having already gone into production.
    This usually happens when their systems face security issues or their businesses
    lose money due to downtime or compromised data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，我看到许多组织或公司在已经投入生产后才审查其软件安全问题的案例。这通常发生在他们的系统面临安全问题或业务因停机或数据泄露而损失资金时。
- en: 'It is widely known that security concerns and processes should be included
    as a part of the **Software Development Life Cycle** (**SDLC**). Since security
    is an aspect that should be considered as part of every single application, it
    is imperative to ensure that our applications and code have security constraints
    that allow us to feel confident about our software at all stages (design, development,
    testing, and deployment):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，安全问题和流程应作为软件开发生命周期（SDLC）的一部分。由于安全是应该考虑的每个应用程序的一个方面，因此必须确保我们的应用程序和代码具有安全约束，使我们能够在所有阶段（设计、开发、测试和部署）对我们的软件感到自信：
- en: '![](img/598ebe0b-f094-42dc-be13-a423f0082059.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/598ebe0b-f094-42dc-be13-a423f0082059.png)'
- en: Security as a part of the SDLC
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安全作为 SDLC 的一部分
- en: Our main goal should be to prevent our application from being compromised before
    we deliver it to a production environment. This avoids exposing sensitive data
    and to ensures that the application was designed while keeping possible vulnerabilities in
    mind. Ideally, we should address all of our security concerns before our systems
    are used by customers. As developers, we mostly only receive functional requirements.
    However, sometimes we don't receive a security requirement. When developing our
    code and applications, we must care about security as much as we care about performance,
    scalability, and other non-functional requirements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要目标应该是在将应用程序交付到生产环境之前防止其被 compromise。这样可以避免暴露敏感数据，并确保应用程序在设计时考虑了可能的漏洞。理想情况下，我们应该在系统被客户使用之前解决所有安全问题。作为开发人员，我们大多数时候只收到功能需求。然而，有时我们并没有收到安全需求。在开发我们的代码和应用程序时，我们必须像关注性能、可扩展性和其他非功能性需求一样关注安全性。
- en: 'Some key aspects to keep in mind when writing software that is designed to
    avoid security threats are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编写旨在避免安全威胁的软件时需要牢记的一些关键方面如下：
- en: Systems are hard to decrypt
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统很难解密
- en: The system security should be tested in every stage of the SDLC
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统安全应该在 SDLC 的每个阶段进行测试。
- en: Penetration tests should be executed against the application
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应对应用程序执行渗透测试
- en: A secure end-to-end communication should be ensured in the system
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应确保端到端的安全通信
- en: Anti-phishing practices should be applied in the application code
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序代码中应用反网络钓鱼实践
- en: In the next section, we will provide a set of recommendations that should be
    followed to address security concerns during the SDLC process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将提供一系列应该遵循的建议，以解决在 SDLC 过程中的安全问题。
- en: Key security recommendations
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键安全建议
- en: There are several types of attacks that can be directed at a system or network
    and can be used to establish communications. Common examples include viruses,
    malware, phishing, spear phishing, **Denial-of-Service** (**DoS**), and so on.
    Every year, even more sophisticated attacks are discovered, with many different
    targets. In this section—which will be about key security recommendations—we will
    focuson securing the code and environment for web and mobile applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种类型的攻击可以针对系统或网络，并可用于建立通信。常见的例子包括病毒、恶意软件、网络钓鱼、定向网络钓鱼、拒绝服务（DoS）等。每年都会发现更多复杂的攻击，目标各异。在本节中，我们将重点关注保护
    Web 和移动应用程序的代码和环境的关键安全建议。
- en: There are several processes and models that can be used to ensure security in
    web and mobile applications. In the upcoming sections, we will explore the main
    recommendations for keeping your software safe from common security threats.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种可以用来确保 Web 和移动应用程序安全的流程和模型。在接下来的章节中，我们将探讨保护软件免受常见安全威胁的主要建议。
- en: Authentication and authorization
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证和授权
- en: The simplest definition of authentication is the process of verifying the identity
    of a user; authorization is the process of verifying what an authenticated user
    can do. For example, when we log in as a user on our computer, we are granted
    access, allowing us to execute actions with the available resources (this includes
    files, applications, and so on).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 认证的最简单定义是验证用户身份的过程；授权是验证经过身份验证的用户可以做什么的过程。例如，当我们在计算机上以用户身份登录时，我们被授予访问权限，允许我们对可用资源执行操作（包括文件、应用程序等）。
- en: In the applications that we create, authentication is the process of validating
    access to the application, and authorization is the process of protecting our
    resources, like pages, web services, databases, files, queues, and so on. During
    the authentication process, we validate the identities of those using the application.
    Authentication includes processes such as preventing to our application before
    providing valid credentials, multi-factor authentication (such as a secure image),
    **one-time password (OTP)**, tokens, and more.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建的应用程序中，身份验证是验证对应用程序的访问权限的过程，授权是保护我们的资源的过程，如页面、网络服务、数据库、文件、队列等。在身份验证过程中，我们验证使用应用程序的人的身份。身份验证包括诸如在提供有效凭据之前防止对我们应用程序的访问、多因素身份验证（如安全图像）、**一次性密码（OTP）**、令牌等过程。
- en: With regards to implementation, we already created a few application examples
    in previous chapters using Spring Security, which is an extensible framework that
    can be used to secure Java applications. Spring Security can be used to handle
    authentication and authorization, as well, using a declarative style that is not
    intrusive to our existing code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实现，我们已经在之前的章节中使用了Spring Security创建了一些应用程序示例，Spring Security是一个可扩展的框架，可用于保护Java应用程序。Spring
    Security也可以用于处理身份验证和授权，使用一种对我们现有代码不具有侵入性的声明式样式。
- en: 'Today, there are several identity industry standards, open specifications,
    and protocols that specify how to design an authentication and authorization mechanism,
    including the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，有几个身份行业标准、开放规范和协议，规定了如何设计身份验证和授权机制，包括以下内容：
- en: '**Basic authentication**: This is the most common method, involving sending
    usernames and passwords with every request. We already implemented this method
    with Spring Security in our banking app example, which we used in [Chapter 10](8762b4ca-6a2e-4b00-acf3-3f8f5e2f00b9.xhtml),
    *Containerizing Your Applications*, [Chapter 11](81e880b2-2345-4231-b7d5-d558f3c55955.xhtml),
    *DevOps and Release Management*, and [Chapter 12](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml),
    *Monitoring*.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本身份验证**：这是最常见的方法，涉及在每个请求中发送用户名和密码。我们已经在我们的银行应用示例中使用了Spring Security实现了这种方法，我们在[第10章](8762b4ca-6a2e-4b00-acf3-3f8f5e2f00b9.xhtml)
    *容器化您的应用程序*，[第11章](81e880b2-2345-4231-b7d5-d558f3c55955.xhtml) *DevOps和发布管理*和[第12章](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml)
    *监控*中使用了它。'
- en: '**JSON Web Tokens** (**JWT**): This is an open standard that defines how to
    establish a secure mechanism to securely exchange messages (information) between
    two parties. There are several well-tested libraries to use here, and we created
    an example of this in [Chapter 4](e3dbe5c7-7ae9-49a8-816b-69d18300218b.xhtml),
    *Client-Server Architectures*. The sequence can be illustrated as follows:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON Web Tokens**（**JWT**）：这是一个开放标准，定义了如何建立一个安全的机制，在两个参与者之间安全地交换消息（信息）。这里有几个经过充分测试的库可供使用，我们在[第4章](e3dbe5c7-7ae9-49a8-816b-69d18300218b.xhtml)
    *客户端-服务器架构*中创建了一个示例。该序列可以如下所示：'
- en: '![](img/eacccf78-9aa2-4f58-9bcd-2e9bdcb9c842.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eacccf78-9aa2-4f58-9bcd-2e9bdcb9c842.png)'
- en: JWT authentication flow
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: JWT身份验证流程
- en: As explained previously, the preceding sequence diagram can help us to understand
    the process of token validation. For authentication, the clients should send their
    credentials to the server, which will respond with a token in the form of a string.
    This token should be used for the subsequent requests. When they are executed,
    if the provided token is invalid or expired, we will receive a 401 UNAUTHORIZED
    status code from the server. Otherwise, the request will be successful. The authentication
    mechanisms that we mentioned earlier follow the basic authentication model, which
    is preferred for web applications. However, when you're writing APIs, you will
    need other approaches, in order to deal with security based on the use of tokens
    (such as JWT). If you are not writing APIs, your application can be secured using
    the JSON Web Tokens RFC ([https://tools.ietf.org/html/rfc7519](https://tools.ietf.org/html/rfc7519)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，前面的序列图可以帮助我们理解令牌验证的过程。对于身份验证，客户端应该将其凭据发送到服务器，服务器将以字符串形式响应一个令牌。这个令牌应该用于后续的请求。当它们被执行时，如果提供的令牌无效或过期，我们将从服务器收到401未经授权的状态代码。否则，请求将成功。我们之前提到的身份验证机制遵循基本身份验证模型，这是Web应用程序的首选。然而，当您编写API时，您将需要其他方法，以处理基于令牌使用的安全性（如JWT）。如果您不编写API，您的应用程序可以使用JSON
    Web Tokens RFC（[https://tools.ietf.org/html/rfc7519](https://tools.ietf.org/html/rfc7519)）进行安全保护。
- en: Today, this is the most common method for authenticating mobile applications,
    modern single-page applications (SPA), and REST APIs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，这是验证移动应用程序、现代单页应用程序（SPA）和REST API的最常见方法。
- en: 'Let''s review some standards created around authentication mechanisms using
    tokens:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些围绕使用令牌的身份验证机制创建的标准：
- en: '**OAuth** (**Open Authorization**): This is an open standard for authentication
    and authorization based on tokens that enable the use of a third-party actor to
    delegate the authentication process. You should only use this standard when you
    have three parties: yourself, your users, and third-party app developers that
    need your user data.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OAuth**（**开放授权**）：这是一种基于令牌的身份验证和授权的开放标准，可以使用第三方参与者委托身份验证过程。只有在您有三方：您自己、您的用户和需要您的用户数据的第三方应用程序开发人员时，才应使用此标准。'
- en: '**OAuth 2**: This is a more developed version of the OAuth standard, which
    allows the user to grant limited access to transfer resources from one application
    to another, without giving their credentials. You should use this standard whenever
    you log in to the site using your Google or GitHub account. When doing so, you
    will be asked whether or not you agree with sharing your email address or account.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OAuth 2**：这是OAuth标准的更发达版本，允许用户在不提供凭据的情况下授予有限访问权限，以将资源从一个应用程序转移到另一个应用程序。每当您使用Google或GitHub帐户登录网站时，都应该使用此标准。这样做时，您将被问及是否同意分享您的电子邮件地址或帐户。'
- en: '**Full request signature**: This was popularized by AWS authentication, and
    was explored in [Chapter 9](e43eb939-ae8d-4ae1-9fc5-101a46110923.xhtml), *Serverless
    Architectures,* when we illustrated deploying our **functions as services** (**FaaS**)
    to AWS. We use this concept by sharing a secret between the server and the client.
    The client signs the completed request using the shared secret, and the server
    verifies it. For more detailed information, go to [http://docs.aws.amazon. com/general/latest/gr/sigv4_si
    gning.html](http://docs.aws.amazon.%20com/general/latest/gr/sigv4_si%20gning.html).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整请求签名**：这是由AWS身份验证推广的，也在[第9章](e43eb939-ae8d-4ae1-9fc5-101a46110923.xhtml)中探讨了*无服务器架构*，当我们演示将**函数作为服务**（**FaaS**）部署到AWS时。我们使用这个概念通过在服务器和客户端之间共享一个秘密。客户端使用共享的秘密对完成的请求进行签名，服务器对其进行验证。有关更详细的信息，请访问[http://docs.aws.amazon.
    com/general/latest/gr/sigv4_si gning.html](http://docs.aws.amazon.%20com/general/latest/gr/sigv4_si%20gning.html)。'
- en: Cryptography
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码学
- en: Cryptography is the process of changing text information to unintelligible text,
    and vice-versa: from crypto-text into intelligible text. In our application, we
    use cryptography in the process of creating data confidentiality and protecting
    it from unauthorized modification.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学是将文本信息转换为不可理解的文本，反之亦然：从加密文本到可理解的文本。在我们的应用程序中，我们使用密码学来创建数据的保密性并保护它免受未经授权的修改。
- en: We use cryptography to encrypt communication between the client and the server.
    This is done through public key encryption  using HTTPS, which uses the **Transport
    Layer Security (TLS)** protocol. The TLS protocol is the successor of the **Secure
    Sockets Layer (SSL)** protocol.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用加密来加密客户端和服务器之间的通信。这是通过使用**传输层安全（TLS）**协议的公钥加密来完成的。TLS协议是**安全套接字层（SSL）**协议的后继者。
- en: Data input validation
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据输入验证
- en: Data input validation refers to the process of controlling the data received
    in each integration, or layer, of our application. We need to validate the data
    input, in order to avoid creating any inconsistencies in our system. In other
    words, we should validate that the data in our application is consistent, and
    doesn't encounter any problems associated with SQL injection, the resource's control
    of the application, or servers, for example. More advanced techniques include
    whitelist validation and input type validation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据输入验证是指控制每个集成或层中接收的数据的过程。我们需要验证数据输入，以避免在系统中创建任何不一致性。换句话说，我们应该验证应用程序中的数据是一致的，并且不会遇到与SQL注入、资源对应用程序或服务器的控制等问题。更高级的技术包括白名单验证和输入类型验证。
- en: Sensitive data
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏感数据
- en: This practice involves protecting sensitive data and determining how to do so
    in the right way. Data sensitivity involves the use of cryptography to preserve
    data confidentiality or integrity and redundancy.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种做法涉及保护敏感数据并确定如何以正确的方式进行。数据敏感性涉及使用加密来保护数据的机密性或完整性和冗余。
- en: For example, it is a common practice to use nonsense text in the passwords that
    our application uses to connect to a database, so we make this recommendation
    accurate by keeping credentials encrypted. Another case might involve working
    on a banking application and needing to present a credit card number. In this
    case, we would encrypt the number, and might even mask the number, to make it
    illegible to humans.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通常在我们的应用程序用于连接到数据库的密码中使用无意义的文本，因此我们通过保持凭据加密来使这个建议准确。另一个例子可能涉及在银行应用程序上工作并需要呈现信用卡号。在这种情况下，我们会加密该数字，甚至可能掩盖该数字，使其对人类不可读。
- en: Social engineering
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会工程
- en: To help you understand what social engineering is, we are going to provide a
    simple definition; that is, the psychological manipulation of a person so that
    the person provides confidential information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您理解什么是社会工程，我们将提供一个简单的定义；即，对一个人的心理操纵，以便该人提供机密信息。
- en: Taking this definition as a starting point, social engineering has become a
    security problem that is difficult for applications to control. That's because
    the point of failure is in the fact that the user is a human, capable of being
    analyzed and manipulated into handing over secret information or credentials that
    make it possible to access a system.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以这个定义为起点，社会工程已经成为应用程序难以控制的安全问题。这是因为失败的关键在于用户是一个人类，有能力被分析和操纵，以便交出秘密信息或凭据，从而可能访问系统。
- en: OWASP Top 10
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP十大
- en: The **Open Web Application Security Project (OWASP)** Top 10 lists the ten most
    important security risks in web applications, and is published and updated every
    three years by the OWASP organization. We need to follow the OWASP checklist in
    order to ensure that our web applications aren't leaving security holes. The list
    can be found at[https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)[.](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放式Web应用程序安全项目（OWASP）**十大列出了Web应用程序中最重要的十个安全风险，并由OWASP组织每三年发布和更新一次。我们需要遵循OWASP清单，以确保我们的Web应用程序不会留下安全漏洞。清单可以在[https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)[.](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)找到。'
- en: 'The latest checklist published in 2017 includes the following aspects:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年发布的最新清单包括以下方面：
- en: 'A1: Injection'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A1: 注入'
- en: 'A2: Broken authentication and session management'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A2: 身份验证和会话管理出现问题'
- en: 'A3: **Cross-site scripting** (**XSS**)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A3: **跨站脚本**（**XSS**）'
- en: 'A4: Insecure direct object references'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A4: 不安全的直接对象引用'
- en: 'A5: Security misconfiguration'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A5: 安全配置错误'
- en: 'A6: Sensitive data exposure'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A6: 敏感数据暴露'
- en: 'A7: Missing function level access control'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A7: 缺失功能级访问控制'
- en: 'A8: **Cross-site request forgery** (**CSRF**)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A8: **跨站请求伪造**（**CSRF**）'
- en: 'A9: Using components with known vulnerabilities'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A9: 使用已知漏洞的组件'
- en: 'A10: Unvalidated redirects and forwards'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'A10: 未经验证的重定向和转发'
- en: To test and verify several of these vulnerabilities, we can use the Burp suite
    ([https://portswigger.net/burp](https://portswigger.net/burp) ). The process is
    easy to understand, and will check the application for most known security holes.
    As a tool, Burp comes with Kali Linux distributions, which we will explain in the
    following section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试和验证其中几个漏洞，我们可以使用Burp套件（[https://portswigger.net/burp](https://portswigger.net/burp)）。这个过程很容易理解，并且将检查应用程序中大多数已知的安全漏洞。作为一个工具，Burp随Kali
    Linux发行版一起提供，我们将在下一节中解释。
- en: Penetration testing
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试
- en: A **penetration test (pen test) **is a simulated attack on a system that evaluates
    its security. For this test, we can use tools like Kali Linux ([https://www.kali.org/](https://www.kali.org/))), which
    is a Debian-based Linux distribution, with a penetration testing platform that
    has several tools available for verifying the OWASP Top 10, and more.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**渗透测试（pen test）**是对系统进行模拟攻击以评估其安全性。对于这个测试，我们可以使用像Kali Linux（[https://www.kali.org/](https://www.kali.org/)）这样的工具，它是一个基于Debian的Linux发行版，具有用于验证OWASP前10名等多种工具的渗透测试平台。'
- en: Kali has an extensive list of tools that can be used for several purposes such
    as wireless attacks, information gathering, exploiting and verifying web applications,
    and so on. If you'd like to see a detailed list of tools, go to the following
    link: [https://tools.kali.org/tools-listing](https://tools.kali.org/tools-listing).
    Teams should provide a pen test before delivering an application to a production
    environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Kali有一个广泛的工具列表，可用于多种用途，如无线攻击、信息收集、利用和验证Web应用程序等。如果您想查看详细的工具列表，请访问以下链接：[https://tools.kali.org/tools-listing](https://tools.kali.org/tools-listing)。团队在将应用程序交付到生产环境之前应提供渗透测试。
- en: In the next section, we will create a Java application based on Spring Security.
    We will use Auth0 as the authentication and authorization as a service platform,
    which is a third-party authorization based on the OAuth2 standard and JWTs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个基于Spring Security的Java应用程序。我们将使用Auth0作为身份验证和授权服务平台，这是一个基于OAuth2标准和JWT的第三方授权。
- en: Authentication and authorization as a service
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和授权作为服务
- en: 'We will be using Auth0 as the provider of a platform for authentication and
    authorization as a service. We will create an example of this to secure our application;
    you don''t have to be a security guru to achieve this.The following screenshot
    was borrowed from the Auth0 getting started guide:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Auth0作为身份验证和授权服务的提供者。我们将创建一个示例来保护我们的应用程序；您不必是安全专家才能做到这一点。以下截图来自Auth0入门指南：
- en: '![](img/99af84d6-085d-4ccc-9eb6-69a9881c762d.png)Auth0 authentication and identity
    validation process'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/99af84d6-085d-4ccc-9eb6-69a9881c762d.png)Auth0身份验证和身份验证过程'
- en: After we plug in or connect to Auth0, this will be the authentication and authorization
    server used to verify their identity and send the required information back to
    the application each time a user tries to authenticate.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们插入或连接到Auth0后，这将成为用于验证其身份并将所需信息发送回应用程序的身份验证和授权服务器，每当用户尝试进行身份验证时。
- en: We are not limited to Java; Auth0 provides several SDKs and APIs for different
    technologies and languages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅限于Java；Auth0为不同的技术和语言提供了多个SDK和API。
- en: 'The steps to create an example of authentication and authorization as a service
    using Auth0 are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Auth0创建身份验证和授权服务的示例的步骤如下：
- en: Create your free developer account in Auth0 at [https://auth0.com/](https://auth0.com/).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Auth0上创建您的免费开发者帐户：[https://auth0.com/](https://auth0.com/)。
- en: 'Log in to the Auth0 portal and create an application:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Auth0门户并创建一个应用程序：
- en: '![](img/2943a2d8-8e4e-4d3e-a81a-82303ee5da2f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2943a2d8-8e4e-4d3e-a81a-82303ee5da2f.png)'
- en: Auth0 create application
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Auth0创建应用程序
- en: 'Give a name to the application, and then select the Regular Web Application option,
    which includes Java applications (you can also create native mobile applications,
    single-page applications, and **Internet of Things** (**IoTs**)):'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为应用程序命名，然后选择“常规Web应用程序”选项，其中包括Java应用程序（您还可以创建原生移动应用程序、单页应用程序和**物联网**（**IoT**））：
- en: '![](img/5d88efe8-9be6-4310-955b-34ce4b038238.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d88efe8-9be6-4310-955b-34ce4b038238.png)'
- en: Select an example application that uses Spring Security.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个使用Spring Security的示例应用程序。
- en: Click on Download the application and change the folder name of the project
    to `packt-secure-sample`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下载应用程序”并将项目文件夹更改为`packt-secure-sample`。
- en: To run the example, we need to set the **callback URL** (`http://localhost:3000/callback`) in
    the Settings tab of the application that we created.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行示例，我们需要在我们创建的应用程序的设置选项卡中设置**回调URL**（`http://localhost:3000/callback`）。
- en: 'To run this on the console, execute the following commands in the sample''s
    directory:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要在控制台上运行此示例，请在示例目录中执行以下命令：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see the application at the URL, `http://localhost:3000/`, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下URL查看应用程序，`http://localhost:3000/`：
- en: '![](img/47495cee-1d34-4ed1-88a5-9b27a7336b89.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47495cee-1d34-4ed1-88a5-9b27a7336b89.png)'
- en: 'Note that the application login page redirects to Auth0\. After we log in via
    a third-party application, through our Google account or with the credentials
    provided by Auth0, we will see the following result, which shows the token that
    was generated:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，应用程序登录页面会重定向到Auth0。当我们通过第三方应用程序登录，通过我们的Google帐户或通过Auth0提供的凭据登录后，我们将看到生成的令牌的以下结果：
- en: '![](img/463f6bfd-ff5d-4218-8a62-fbc5fecdb729.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/463f6bfd-ff5d-4218-8a62-fbc5fecdb729.png)'
- en: You have now learned how to use Auth0 as a platform for authentication and authorization
    as a service, using standards such as OAuth2 and JWT.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经学会了如何使用Auth0作为身份验证和授权服务的平台，使用OAuth2和JWT等标准。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explained how to apply security guidelines and practices
    to cover the most common security issues that you may encounter with your applications.
    Here, we covered authentication and authorization, cryptography, data input validation,
    sensitive data, the OWASP Top 10, social engineering, and penetration testing.
    These concepts and methodologies will strengthen the security of your applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了如何应用安全准则和实践，以涵盖您的应用程序可能遇到的最常见安全问题。在这里，我们涵盖了身份验证和授权、加密、数据输入验证、敏感数据、OWASP十大安全风险、社会工程和渗透测试。这些概念和方法将加强您的应用程序的安全性。
- en: In the next chapter, we will review high-performance techniques and recommendations
    in order to complete our journey of creating applications using Spring 5.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾高性能技术和建议，以完成使用Spring 5创建应用程序的旅程。
