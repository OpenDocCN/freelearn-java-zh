- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Modernization Strategies and Data Integration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代化策略和数据集成
- en: In today’s fast-paced and data-driven world, businesses constantly strive to
    keep up with the evolving technology landscape. Modernization has become a key
    focus for organizations across industries, aiming to improve efficiency, agility,
    and competitiveness. One critical aspect of modernization is data integration,
    which plays a pivotal role in harnessing the power of data for informed decision-making.
    By adopting modernization strategies, avoiding anti-patterns, and leveraging modern
    cloud services, businesses can unlock the full potential of their data and gain
    a competitive edge in the market.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今快节奏和以数据驱动型的世界中，企业不断努力跟上不断发展的技术景观。现代化已成为各行业组织的重点，旨在提高效率、敏捷性和竞争力。现代化的一个关键方面是数据集成，它在利用数据的力量进行明智决策中发挥着关键作用。通过采用现代化策略、避免反模式和利用现代云服务，企业可以释放其数据的全部潜力，并在市场上获得竞争优势。
- en: Modernization strategies encompass a range of approaches aimed at upgrading
    legacy systems, processes, and infrastructure to align with contemporary technological
    advancements. These strategies involve transforming traditional on-premises systems
    into cloud-based architectures, leveraging microservices and containers for increased
    scalability and agility, and adopting DevOps practices to streamline development
    and deployment processes. The ultimate goal is to modernize the entire IT landscape,
    ensuring it can keep pace with the demands of the digital era
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现代化策略包括一系列旨在将遗留系统、流程和基础设施升级以适应当代技术进步的方法。这些策略涉及将传统的本地系统转变为基于云的架构，利用微服务和容器以增加可扩展性和敏捷性，并采用DevOps实践以简化开发和部署流程。最终目标是使整个IT景观现代化，确保其能够跟上数字时代的需求。
- en: However, modernization efforts can be challenging, and organizations must be
    mindful of potential anti-patterns that can hinder progress. Anti-patterns are
    common pitfalls or ineffective practices that can impede successful modernization
    initiatives. One notable anti-pattern is the lack of proper data integration,
    where siloed data sources and disparate systems hinder the ability to derive valuable
    insights. Businesses increasingly adopt **Change Data Capture** (**CDC**) techniques
    to overcome this challenge. CDC allows organizations to capture and propagate
    real-time data changes, enabling near-instantaneous updates and synchronization
    between different systems. By implementing CDC, organizations can ensure that
    their data integration efforts are efficient, accurate, and timely.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现代化努力可能会面临挑战，组织必须警惕可能阻碍进步的反模式。反模式是常见的陷阱或无效实践，可能会妨碍现代化项目的成功。一个值得注意的反模式是缺乏适当的数据集成，孤岛化的数据源和不同的系统阻碍了获取有价值见解的能力。企业越来越多地采用**变更数据捕获**（**CDC**）技术来克服这一挑战。CDC允许组织捕获和传播实时数据变化，实现不同系统之间近乎瞬时的更新和同步。通过实施CDC，组织可以确保其数据集成工作高效、准确且及时。
- en: An anti-pattern is a recurring solution or approach that initially appears to
    be the correct way to solve a problem but ultimately leads to negative consequences
    or suboptimal outcomes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式是一种反复出现的解决方案或方法，它最初看起来是解决问题的正确方式，但最终会导致负面后果或次优结果。
- en: Cloud computing has revolutionized the IT landscape, providing organizations
    with unprecedented scalability, flexibility, and cost-efficiency. Cloud-native
    technologies, such as serverless computing and containerization, enable organizations
    to build highly scalable and resilient applications that adapt to fluctuating
    workloads and evolving business needs. By migrating legacy systems to the cloud,
    businesses can take advantage of robust infrastructure, managed services, and
    advanced analytics capabilities offered by cloud providers. Furthermore, modernization
    strategies can significantly benefit from leveraging modern cloud services.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算已经彻底改变了IT景观，为组织提供了前所未有的可扩展性、灵活性和成本效益。云原生技术，如无服务器计算和容器化，使组织能够构建高度可扩展和具有弹性的应用程序，以适应波动的工作负载和不断变化的企业需求。通过将遗留系统迁移到云，企业可以利用云提供商提供的强大基础设施、托管服务和高级分析能力。此外，现代化策略可以从利用现代云服务中获得显著的好处。
- en: 'In this chapter, we’ll explore more about those topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨更多关于以下主题的内容：
- en: Application modernization strategies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用现代化策略
- en: Avoiding data storage-related anti-patterns and bad practices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免与数据存储相关的反模式和不良实践
- en: Introduction to CDC pattern
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CDC模式简介
- en: Adopting cloud technologies and cloud services
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用云技术和云服务
- en: Modernization strategies and data integration are paramount to thrive in the
    modern business landscape. By embracing modernization, avoiding anti-patterns
    such as poor data integration, and harnessing the power of modern cloud services,
    organizations can unlock the true potential of their data, drive innovation, and
    stay ahead of the competition. The journey toward modernization requires careful
    planning, a deep understanding of the organization’s goals, and a commitment to
    leveraging cutting-edge technologies. With the right approach, businesses can
    navigate the complexities of modernization and pave the way for a successful digital
    transformation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现代化策略和数据集成在现代商业景观中至关重要。通过拥抱现代化，避免诸如数据集成不良等反模式，并利用现代云服务的力量，组织可以释放其数据的真正潜力，推动创新，并保持竞争优势。现代化之旅需要周密的规划，深入了解组织的目标，并致力于利用尖端技术。有了正确的方法，企业可以应对现代化的复杂性，为成功的数字化转型铺平道路。
- en: Application modernization strategies
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序现代化策略
- en: Application modernization strategies involve updating and transforming existing
    legacy applications to meet the demands of the modern digital landscape. Legacy
    systems, often characterized by outdated technologies and rigid workflows, can
    impede an organization’s ability to innovate, respond quickly to market demands,
    and leverage the full potential of emerging technologies. By implementing application
    modernization strategies, businesses can revitalize their software assets, enhance
    scalability, improve performance, and increase agility
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现代化策略包括更新和转换现有的遗留应用程序，以满足现代数字景观的需求。遗留系统通常以过时的技术和僵化的工作流程为特征，可能会阻碍组织进行创新、快速响应市场需求以及充分利用新兴技术的潜力。通过实施应用程序现代化策略，企业可以重振其软件资产，增强可扩展性，提高性能，并增加敏捷性。
- en: Premature optimization is always dangerous; the belief that *monolithic* is
    synonymous with *legacy* is a mistake. As software engineers, we need to understand
    what the business needs and the context. Remember that no silver bullet in any
    solution includes monolithic and microservices architectural styles.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 过早优化总是危险的；认为*单体*等同于*遗留*是一种错误。作为软件工程师，我们需要了解业务需求和上下文。记住，任何解决方案中都不包括单体和微服务架构风格。
- en: 'There are several approaches to application modernization, each with its benefits
    and considerations. Let’s explore some of the common strategies and how to apply
    them effectively:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现代化有几种方法，每种方法都有其优势和考虑因素。让我们探讨一些常见的策略以及如何有效地应用它们：
- en: Rehosting, or lift-and-shift, involves moving existing applications to a modern
    infrastructure without making significant code changes. This strategy offers faster
    migration with minimal disruption. Replatforming goes further by leveraging cloud-native
    features or services, such as scalability and managed databases, to optimize the
    application’s performance. The key is to ensure compatibility and configuration
    adjustments when moving to new infrastructure—for example, cloud platforms such
    as **Amazon Web Services** (**AWS**), Microsoft Azure, and **Google Cloud** **Platform**
    (**GCP**).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重宿主或迁移，涉及在不进行重大代码更改的情况下将现有应用程序迁移到现代基础设施。这种策略提供了更快的迁移速度，最小化中断。重平台化通过利用云原生功能或服务，如可扩展性和托管数据库，来优化应用程序的性能。关键是确保在迁移到新基础设施时保持兼容性和配置调整——例如，云平台如**亚马逊网络服务**（**AWS**）、**微软Azure**和**谷歌云平台**（**GCP**）。
- en: Refactoring focuses on improving the existing application’s code base, structure,
    and architecture. This strategy involves making significant code changes, optimizing
    performance, enhancing scalability, and adopting modular or microservices architectures.
    The goal is to align the application with modern development practices, such as
    adopting containerization, decoupling components, and leveraging new frameworks
    or libraries.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构主要关注改进现有应用程序的代码库、结构和架构。这种策略涉及进行重大的代码更改，优化性能，增强可扩展性，并采用模块化或微服务架构。目标是使应用程序与现代化开发实践保持一致，例如采用容器化、解耦组件以及利用新的框架或库。
- en: Rebuilding, also known as rewriting, involves starting from scratch while retaining
    the original application’s functionality and business logic. This strategy allows
    leveraging modern development frameworks, tools, and architecture patterns. However,
    it requires careful planning, which can be time-consuming and resource-intensive.
    It is crucial to analyze the existing application’s strengths and weaknesses to
    ensure that the new application meets business requirements effectively.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重建，也称为重写，涉及从头开始，同时保留原始应用程序的功能和业务逻辑。这种策略允许利用现代开发框架、工具和架构模式。然而，它需要仔细规划，这可能耗时且资源密集。分析现有应用程序的优势和劣势，以确保新应用程序能够有效满足业务需求至关重要。
- en: The replacement strategy involves replacing the legacy application entirely
    with an off-the-shelf commercial software package or a **Software-as-a-Service**
    (**SaaS**) solution. This approach is suitable when the existing application no
    longer meets business needs, and it is more cost-effective to adopt a pre-built
    solution rather than invest in modernizing the legacy system.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换策略涉及完全用现成的商业软件包或**软件即服务（SaaS**）解决方案来替换遗留应用程序。当现有应用程序不再满足业务需求，且采用预构建解决方案比投资于现代化遗留系统更经济时，这种方法是合适的。
- en: 'Implementing legacy modernization strategies is essential when specific organizational
    triggers or challenges arise. Let''s check common reasons to consider modernization,
    as legacy technology stacks:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现特定的组织触发因素或挑战时，实施遗留现代化策略至关重要。让我们检查考虑现代化的常见原因，作为遗留技术堆栈：
- en: Often run on outdated technologies that are no longer supported or lack compatibility
    with modern software components. This can lead to security vulnerabilities, increased
    maintenance costs, and limited integration capabilities. Modernization helps mitigate
    these risks and ensures the application remains viable and secure.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常运行在过时的技术之上，这些技术不再受支持或与现代软件组件不兼容。这可能导致安全漏洞、维护成本增加和有限的集成能力。现代化有助于缓解这些风险，并确保应用程序保持可行和安全。
- en: May need help to handle increasing workloads and deliver optimal performance.
    Modernization enables the application to scale horizontally or vertically, leverage
    cloud-based resources, and adopt modern architectural patterns, resulting in improved
    performance and scalability.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能需要帮助来处理不断增长的工作负载并交付最佳性能。现代化使应用程序能够水平或垂直扩展，利用基于云的资源，并采用现代架构模式，从而提高性能和可伸缩性。
- en: Often hinder the adoption of agile development methodologies and DevOps practices
    due to their monolithic nature and rigid workflows. Application modernization
    promotes modular design, microservices, and containerization, enabling organizations
    to embrace agile methods, iterate quickly, and deploy changes more frequently.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于其单体结构和僵化的工作流程，常常阻碍敏捷开发方法和DevOps实践的采用。应用现代化推崇模块化设计、微服务和容器化，使组织能够拥抱敏捷方法，快速迭代，并更频繁地部署变更。
- en: May fail to provide a modern user experience or keep up with industry standards,
    where user expectations evolve and the competition innovate constantly. Modernization
    strategies can enhance the application’s user interface, introduce new features,
    and leverage emerging technologies such as **artificial intelligence** (**AI**),
    **machine learning** (**ML**), or mobile platforms.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能无法提供现代化的用户体验或跟上行业标准，因为用户期望不断演变，竞争者持续创新。现代化策略可以提升应用程序的用户界面，引入新功能，并利用如**人工智能（AI**）、**机器学习（ML**）或移动平台等新兴技术。
- en: Application modernization strategies are essential for organizations hoping
    to adapt, innovate, and remain competitive in the digital age. Choosing the appropriate
    modernization can minimize impacting your business/organization. But before starting
    this modernization process, review the requirements and goals to understand if
    it is necessary. Especially when we talk about the persistent layer, refactoring
    might be a risk and a considerable cost; it is more trivial than doing code refactoring
    with an **integrated development environment (IDE)**. So, let’s talk about those
    anti-patterns in data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望适应、创新并在数字时代保持竞争力的组织来说，应用现代化策略至关重要。选择适当的现代化方法可以最小化对您的业务/组织的影响。但在开始这一现代化过程之前，审查需求和目标，以了解是否必要。特别是当我们谈论持久层时，重构可能是一个风险和相当大的成本；它比在**集成开发环境（IDE**）中进行代码重构更为简单。那么，让我们谈谈数据中的那些反模式。
- en: Avoiding data storage-related anti-patterns and bad practices
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免与数据存储相关的反模式和不良实践
- en: Several common anti-patterns and bad practices can hinder performance, scalability,
    and maintainability in an application’s persistence layer. Understanding the difference
    between anti-patterns and harmful practices is crucial to accurately identify
    and mitigate these issues.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 几种常见的反模式和不良实践可能会阻碍应用程序持久层的性能、可扩展性和可维护性。理解反模式和有害实践之间的区别对于准确识别和缓解这些问题至关重要。
- en: 'Anti-patterns are commonly observed in software development and can result
    from poor design decisions, a lack of understanding, or adherence to outdated
    practices. Anti-patterns in the persistence layer can include the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式在软件开发中很常见，可能源于设计决策不佳、理解不足或遵循过时的实践。持久层中的反模式可能包括以下内容：
- en: '**Object-relational impedance mismatch**: This anti-pattern occurs when there
    is a significant disconnect between the **object-oriented** (**OO**) model used
    in the application’s code and the relational model used in the database. It can
    lead to excessive mapping and conversion logic, performance degradation, and complexity
    in maintaining data consistency. To avoid this anti-pattern, consider using **object-relational
    mapping** (**ORM**) frameworks that provide seamless integration between the application
    code and the database, reducing the impedance mismatch.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系阻抗不匹配**：当应用程序代码中使用的面向对象（**OO**）模型与数据库中使用的关联模型之间存在显著脱节时，就会发生这种反模式。它可能导致过度映射和转换逻辑、性能下降以及维护数据一致性复杂性增加。为了避免这种反模式，考虑使用提供应用程序代码和数据库之间无缝集成的**对象关系映射**（**ORM**）框架，以减少阻抗不匹配。'
- en: '**Data access in the presentation layer**: This anti-pattern involves performing
    data access operations directly in the presentation layer, such as in user interface
    components. It violates the principle of **separation of concerns** (**SoC**),
    leading to tightly coupled code, difficulty in maintaining and testing, and decreased
    reusability. While rarely recommended, there are a few good uses of data retrieval
    directly from the presentation layer. To address this, follow a layered architecture
    pattern (such as **Model View Controller (MVC)** or **Model-View-ViewModel (MVVM)**,
    where data access operations are performed in a separate data access layer.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在表示层中进行数据访问**：这种反模式涉及在表示层直接执行数据访问操作，例如在用户界面组件中。它违反了**关注点分离**（**SoC**）的原则，导致代码紧密耦合、维护和测试困难以及可重用性降低。虽然很少推荐，但直接从表示层检索数据有一些好的用途。为了解决这个问题，遵循分层架构模式（如**模型-视图-控制器（MVC）**或**模型-视图-视图模型（MVVM）**），其中数据访问操作在单独的数据访问层中执行。'
- en: '**Querying the database in a loop**: This anti-pattern occurs when an application
    performs individual database queries within a loop instead of using bulk operations.
    It results in excessive database round trips, increased network overhead, and
    poor performance. To avoid this, optimize queries using batch processing, bulk
    inserts or updates, and caching mechanisms to minimize the number of database
    interactions.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在循环中查询数据库**：这种反模式发生在应用程序在循环中执行单个数据库查询而不是使用批量操作时。它导致数据库往返次数过多、网络开销增加和性能下降。为了避免这种情况，使用批量处理、批量插入或更新以及缓存机制来优化查询，以最小化数据库交互次数。'
- en: 'Bad practices, on the other hand, refer to actions or habits that are generally
    recognized as inefficient, suboptimal, or detrimental to the overall quality of
    the software. Unlike anti-patterns, bad practices may not necessarily be recurring
    solutions but specific actions or choices that should be avoided. Some examples
    of bad practices in the persistence layer include the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，不良实践指的是通常被认为效率低下、次优或损害软件整体质量的行动或习惯。与反模式不同，不良实践可能不是重复的解决方案，而是应该避免的具体行动或选择。持久层中不良实践的例子包括以下内容：
- en: '**Lack of connection pooling**: Failing to utilize connection pooling can lead
    to performance issues, especially in high-traffic applications. Opening and closing
    database connections for every request or operation can result in resource contention,
    increased overhead, and decreased scalability. Implementing connection pooling
    techniques provided by database drivers or frameworks to manage connections efficiently
    is essential.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏连接池**：未能利用连接池可能导致性能问题，尤其是在高流量应用程序中。为每个请求或操作打开和关闭数据库连接可能会导致资源争用、增加开销和降低可扩展性。实现数据库驱动程序或框架提供的连接池技术来高效管理连接是至关重要的。'
- en: '**Failure to use prepared statements or parameterized queries**: Constructing
    SQL queries by directly concatenating user input or dynamic values can expose
    the application to SQL injection attacks. It is essential to use prepared statements
    or parameterized queries, which ensure that user input is treated as data rather
    than executable code, thereby mitigating security risks.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未使用预编译语句或参数化查询**：通过直接连接用户输入或动态值来构建 SQL 查询可能会使应用程序面临 SQL 注入攻击。使用预编译语句或参数化查询至关重要，这可以确保用户输入被视为数据而不是可执行代码，从而降低安全风险。'
- en: 'To avoid anti-patterns and bad practices in the persistence layer, consider
    the following approaches:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免持久层中的反模式和不良实践，请考虑以下方法：
- en: '**Educate and train developers**: Ensure developers have a solid understanding
    of best practices, design patterns, and modern approaches to persistence. Provide
    training sessions, workshops, or resources to update them on industry standards
    and emerging technologies.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**教育和培训开发者**：确保开发者对最佳实践、设计模式和现代持久化方法有扎实的理解。提供培训课程、研讨会或资源，以更新他们对行业标准和新兴技术的了解。'
- en: '**Follow design principles and patterns**: Apply design principles such as
    **SOLID** (which stands for **Single Responsibility, Open-Closed, Liskov Substitution,
    Interface Segregation, Dependency Inversion**) and use appropriate design patterns
    such as **Data Access Object** (**DAO**), repository, or ORM patterns. These principles
    and patterns promote SoC, modularity, and maintainability.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循设计原则和模式**：应用设计原则，如 **SOLID**（代表 **单一职责、开闭原则、里氏替换原则、接口隔离原则、依赖倒置**），并使用适当的设计模式，如
    **数据访问对象**（**DAO**）、仓库或 ORM 模式。这些原则和模式促进了 SoC、模块化和可维护性。'
- en: '**Use ORM or query builders**: Adopt ORM frameworks or query builders that
    provide abstraction layers to handle database interactions. ORM tools, such as
    Hibernate, **Entity Framework** (**EF**), or Sequelize, can help reduce object-relational
    impedance mismatches and handle data access operations efficiently.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 ORM 或查询构建器**：采用提供抽象层以处理数据库交互的 ORM 框架或查询构建器。如 Hibernate、**Entity Framework**（**EF**）或
    Sequelize 等 ORM 工具可以帮助减少对象关系阻抗不匹配，并高效处理数据访问操作。'
- en: '**Implement connection pooling**: Utilize connection pooling techniques provided
    by database drivers or frameworks to efficiently manage and reuse database connections.
    Connection pooling helps avoid the overhead of establishing new connections for
    each request, improving performance and scalability.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现连接池**：利用数据库驱动程序或框架提供的连接池技术来高效管理和重用数据库连接。连接池有助于避免为每个请求建立新连接的开销，提高性能和可扩展性。'
- en: '**Sanitize user input and use prepared statements**: Always filter and sanitize
    user input and avoid directly concatenating dynamic values into SQL queries. Instead,
    utilize prepared statements or parameterized queries provided by the database
    APIs. This approach prevents SQL injection attacks and many user input errors
    by treating user input as a vulnerability rather than trustworthy input.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清理用户输入并使用预编译语句**：始终过滤和清理用户输入，并避免直接将动态值连接到 SQL 查询中。相反，利用数据库 API 提供的预编译语句或参数化查询。这种方法通过将用户输入视为漏洞而不是可信输入，防止
    SQL 注入攻击和许多用户输入错误。'
- en: '**Perform code reviews and refactoring**: Conduct regular code reviews to identify
    anti-patterns, bad practices, and areas for improvement. Encourage a culture of
    continuous improvement where developers can provide feedback, suggest enhancements,
    and refactor code to align with best practices.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行代码审查和重构**：定期进行代码审查，以识别反模式、不良实践和改进领域。鼓励持续改进的文化，让开发者能够提供反馈、提出改进建议并对代码进行重构，以符合最佳实践。'
- en: '**Test and benchmark performance**: Implement thorough unit tests and integration
    tests to validate the correctness of data access operations. Conduct performance
    testing and benchmarking to identify bottlenecks and optimize query execution
    times. Tools such as JMeter or Gatling can help simulate load and measure performance
    metrics.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试和基准性能**：实施彻底的单元测试和集成测试以验证数据访问操作的正确性。进行性能测试和基准测试以识别瓶颈并优化查询执行时间。例如，JMeter或Gatling等工具可以帮助模拟负载并测量性能指标。'
- en: '**Stay updated and engage in the community**: Stay informed about the latest
    advancements, updates, and best practices in persistence technologies and frameworks.
    Engage with the development community through forums, conferences, or online communities
    to share experiences, learn from others, and discover new techniques.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持更新并参与社区**：了解持久技术及其框架的最新进展、更新和最佳实践。通过论坛、会议或在线社区与开发社区互动，分享经验，向他人学习，并发现新技术。'
- en: Adopting these practices and maintaining a proactive approach to code quality
    and performance optimization can significantly reduce the occurrence of anti-patterns
    and bad practices in the persistence layer, leading to more robust, maintainable,
    and scalable applications. Talking about good practices, in the following session,
    we’ll explore the most modern one, CDC, and how it can help you on your journey
    on the persistence layer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这些实践并保持对代码质量和性能优化的主动方法可以显著减少持久层中反模式和不良做法的发生，从而实现更健壮、可维护和可扩展的应用程序。谈到良好的做法，在接下来的会话中，我们将探讨最现代的一个，即CDC，以及它如何帮助你在持久层之旅中。
- en: Introduction to CDC pattern
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CDC模式简介
- en: '**Change Data Capture** (**CDC**) is a technique used to track and capture
    changes made to data in a database. It enables organizations to identify, capture,
    and propagate data changes in near-real time, providing a reliable and efficient
    data integration and synchronization method across different systems.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**变更数据捕获**（**CDC**）是一种用于跟踪和捕获数据库中数据变更的技术。它使组织能够识别、捕获和传播数据变更，几乎在实时进行，提供了一种可靠且高效的数据集成和同步方法，跨越不同的系统。'
- en: 'The following diagram shows a sample using the CDC pattern where we have a
    source that fires an event, and based on this event, each subscriber results in
    two database targets:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了使用CDC模式的一个示例，其中我们有一个触发事件的源，基于此事件，每个订阅者导致两个数据库目标：
- en: '![Figure 11.1 – CDC architecture representation](img/Figure_11.01_B19375.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – CDC架构表示](img/Figure_11.01_B19375.jpg)'
- en: Figure 11.1 – CDC architecture representation
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – CDC架构表示
- en: The process of CDC involves monitoring and capturing changes that occur at the
    database level, such as inserts, updates, and deletes, and emitting these as individual
    events. Instead of constantly polling the entire database for changes, CDC mechanisms
    track and capture only the modified data, reducing unnecessary overhead and improving
    performance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CDC的过程涉及监控和捕获在数据库级别发生的变化，如插入、更新和删除，并将这些作为单独的事件发出。而不是不断轮询整个数据库以查找变更，CDC机制仅跟踪和捕获修改后的数据，减少不必要的开销并提高性能。
- en: 'Let’s look at some further advantages of CDC:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看CDC的一些其他优势：
- en: '**Real-time data integration**: CDC enables organizations to capture and propagate
    data changes in near-real time, ensuring that the integrated systems can access
    the most up-to-date information. This real-time data integration allows more accurate
    reporting, analytics, and decision-making.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时数据集成**：CDC使组织能够几乎在实时捕获和传播数据变更，确保集成系统可以访问最新的信息。这种实时数据集成允许更准确的报告、分析和决策。'
- en: '**Improved data consistency**: By capturing and synchronizing data changes
    across different systems, CDC helps maintain data consistency and integrity. Updates
    made in one design can be automatically reflected in other systems, eliminating
    the need for manual data entry or batch processes.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高数据一致性**：通过在不同系统间捕获和同步数据变更，CDC有助于保持数据一致性和完整性。在一个设计中进行的更新可以自动反映在其他系统中，消除了手动数据输入或批量处理的需求。'
- en: '**Reduced latency**: CDC significantly reduces the latency between data changes
    and their availability in other systems. It is particularly important for scenarios
    where timely access to the latest data is critical, such as in financial transactions,
    inventory management, or real-time analytics.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低延迟**：CDC显著减少了数据变化与在其他系统中可用性之间的延迟。这在需要及时访问最新数据的场景中尤为重要，例如在金融交易、库存管理或实时分析中。'
- en: '**Minimized impact on source systems**: Unlike traditional batch-based data
    integration approaches, CDC reduces the impact on the source systems by capturing
    changes incrementally rather than extracting and loading large datasets. It reduces
    the load on the source systems and avoids performance degradation.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化对源系统的影响**：与传统基于批处理的数据集成方法不同，CDC通过增量捕获变更而不是提取和加载大型数据集来减少对源系统的影响。它减少了源系统的负载并避免了性能下降。'
- en: '**Efficient data replication**: CDC enables efficient data replication across
    databases or systems. It only captures and transmits the changed data, reducing
    network bandwidth requirements and improving replication performance.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的数据复制**：CDC使数据库或系统之间的数据复制变得高效。它只捕获和传输变更的数据，减少网络带宽需求并提高复制性能。'
- en: 'CDC is advantageous in the following scenarios:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: CDC在以下场景中具有优势：
- en: '**Data warehousing and business intelligence (BI)**: CDC facilitates the integration
    of operational databases with data warehouses or data lakes, ensuring that analytics,
    transaction processing, and reporting systems have access to the most current
    data. It enables organizations to make data-driven decisions based on up-to-date
    information.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据仓库和商业智能（BI）**：CDC促进了操作数据库与数据仓库或数据湖的集成，确保分析、交易处理和报告系统可以访问最新的数据。它使组织能够根据最新的信息做出数据驱动的决策。'
- en: '**Microservices and event-driven architecture (EDA)**: CDC is valuable in EDA,
    where changes in one microservice trigger actions in other microservices. By capturing
    data changes in real time, CDC allows microservices to react to and process the
    latest data updates, ensuring consistency across the system.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务和事件驱动架构（EDA）**：在EDA中，一个微服务的变更会触发其他微服务的操作。通过实时捕获数据变更，CDC允许微服务对最新的数据更新做出反应和处理，确保系统的一致性。'
- en: '**Data synchronization and replication**: When multiple databases or systems
    need to be synchronized and kept up to date with each other, CDC provides an efficient
    mechanism for capturing and propagating changes. This is particularly relevant
    in scenarios involving distributed systems, multi-site deployments, or data replication
    for **disaster recovery** (**DR**) purposes.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据同步和复制**：当多个数据库或系统需要相互同步并保持最新状态时，CDC提供了一个高效机制来捕获和传播变更。这在涉及分布式系统、多站点部署或为**灾难恢复（DR**）目的进行数据复制的情况下尤其相关。'
- en: '**Legacy system integration**: CDC can be used to integrate legacy systems
    with modern applications or databases. By capturing changes from legacy systems
    and propagating them to modern systems, organizations can leverage the capabilities
    of new technologies while maintaining the functionality of existing systems.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遗留系统集成**：CDC可用于将遗留系统与现代应用程序或数据库集成。通过从遗留系统捕获变更并将它们传播到现代系统，组织可以利用新技术的能力，同时保持现有系统的功能。'
- en: 'While CDC can be highly beneficial in many scenarios, there are certain situations
    where it may not be the most suitable approach. Here are some cases when CDC might
    not be the best choice:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然CDC在许多场景中可能非常有用，但也有一些情况可能不适合使用CDC。以下是一些CDC可能不是最佳选择的情况：
- en: '**Infrequent or low-impact data changes**: If the data changes in your system
    are irregular or have a minimal impact on downstream systems, implementing CDC
    might introduce unnecessary complexity. In such cases, traditional batch-based
    data extraction and loading processes may suffice.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不频繁或影响低的数据变更**：如果您的系统中的数据变更不规律或对下游系统的影响很小，实施CDC可能会引入不必要的复杂性。在这种情况下，传统的基于批处理的数据提取和加载过程可能就足够了。'
- en: '**Small-scale or simple applications**: For small-scale applications with limited
    data sources and straightforward integration requirements, the overhead of implementing
    CDC may outweigh the benefits. CDC is advantageous in complex, large-scale environments
    with multiple systems and databases.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小型或简单应用程序**：对于数据源有限且集成要求简单的应用程序，实施CDC的开销可能超过了其带来的好处。CDC在具有多个系统和数据库的复杂、大规模环境中具有优势。'
- en: '**Strict real-time requirements**: Although CDC provides near-real-time data
    integration, it might not be suitable for scenarios that demand immediate or sub-second
    data propagation. Alternative approaches such as event sourcing or streaming platforms
    may be more appropriate.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**严格的实时要求**：尽管CDC提供了近实时数据集成，但它可能不适合需要立即或亚秒级数据传播的场景。其他方法，如事件源或流平台，可能更合适。'
- en: '**High-frequency and high-volume data changes**: If your system experiences
    an extremely high frequency or volume of data changes, implementing CDC may burden
    the source database and infrastructure. In such cases, it may be more efficient
    to consider alternative data integration techniques that can handle the scale
    effectively.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高频和高量数据变更**：如果你的系统经历极高频或大量的数据变更，实施CDC可能会给源数据库和基础设施带来负担。在这种情况下，考虑其他能够有效处理规模的数据集成技术可能更有效率。'
- en: '**Data security and compliance concerns**: CDC may not be recommended when
    data security or compliance regulations strictly prohibit or limit data replication
    or movement. Evaluating and adhering to data governance and compliance requirements
    is crucial before implementing CDC.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据安全和合规问题**：当数据安全或合规法规严格禁止或限制数据复制或移动时，CDC可能不推荐使用。在实施CDC之前，评估和遵守数据治理和合规要求至关重要。'
- en: '**Cost and resource constraints**: CDC implementations often require additional
    infrastructure, monitoring, and maintenance overhead. If you have budget constraints
    or limited resources to manage and support CDC, alternative data integration methods
    might be more feasible.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本和资源限制**：CDC的实施通常需要额外的基础设施、监控和维护开销。如果你有预算限制或有限的资源来管理和支持CDC，其他数据集成方法可能更可行。'
- en: '**Legacy systems with limited capabilities**: Some legacy systems may need
    more functionality or capabilities to support CDC. In such cases, retrofitting
    CDC mechanisms into these systems may be challenging or impractical. Consider
    alternative integration approaches or explore options for modernizing the legacy
    system.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能有限的遗留系统**：一些遗留系统可能需要更多的功能或能力来支持CDC。在这种情况下，将这些系统的CDC机制进行改造可能具有挑战性或不切实际。考虑替代集成方法或探索现代化遗留系统的选项。'
- en: '**Lack of integration requirements**: CDC may not be necessary if your system
    does not require integration with other systems or databases and operates as a
    standalone application without data synchronization. Evaluate the integration
    needs and assess whether CDC adds value to your use case.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏集成需求**：如果你的系统不需要与其他系统或数据库集成，并且作为一个独立应用程序运行，没有数据同步，那么CDC可能不是必需的。评估集成需求并评估CDC是否为你的用例增加价值。'
- en: Remember—whether or not to use CDC depends on your system’s requirements, complexity,
    and characteristics. It is essential to analyze your use case thoroughly, consider
    consider its up and downsides, and evaluate alternative data integration techniques
    before implementing CDC.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记住——是否使用CDC取决于你的系统需求、复杂性和特性。在实施CDC之前，彻底分析你的用例，考虑其优缺点，并评估替代数据集成技术是至关重要的。
- en: 'In summary, CDC is a powerful technique for capturing and propagating data
    changes in near-real time. Its benefits include the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，CDC是一种强大的技术，用于在近实时捕获和传播数据变更。其好处包括以下内容：
- en: Real-time data integration
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据集成
- en: Improved data consistency
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高数据一致性
- en: Reduced latency
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低延迟
- en: Minimized impact on source systems
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化对源系统的影响
- en: Efficient data replication
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效的数据复制
- en: CDC is particularly valuable in data warehousing, microservices, EDA, data synchronization,
    replication, and legacy system integration
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: CDC在数据仓库、微服务、EDA、数据同步、复制和遗留系统集成中特别有价值。
- en: 'It is colossal work, and the good news is we can do it with others; public
    cloud offerings have multiplied and can help us a lot, especially in focusing
    more on the business and delegating what is not our core. When we talk about services
    in the cloud, one is implicit: DBaaS, where we don’t need to be an expert or have
    one close to us; let’s explore more about it in the next section.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项巨大的工作，好消息是我们可以与他人一起完成；公共云服务提供的选择增多，可以为我们提供很多帮助，尤其是在更多地关注业务和委托非核心任务方面。当我们谈论云中的服务时，有一个是隐含的：DBaaS，我们不需要成为专家或在我们身边有专家；让我们在下一节中更深入地探讨它。
- en: Adopting cloud technologies and cloud services
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用云技术和云服务
- en: Cloud services offer numerous advantages for the persistence layer of an application,
    providing enhanced database experiences and relieving organizations from various
    management and maintenance tasks. One particular service in this context is **Database-as-a-Service**
    (**DBaaS**), which allows users to leverage the power of databases without the
    need for extensive expertise or infrastructure management.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务为应用程序的持久层提供了众多优势，提供了增强的数据库体验，并减轻了组织在管理和维护方面的各种任务。在此背景下，一个特定的服务是**数据库即服务（DBaaS**），它允许用户利用数据库的力量，而无需广泛的专家知识或基础设施管理。
- en: DBaaS are traditional; setting up and managing databases involves significant
    effort, including hardware provisioning, software installation, configuration,
    and ongoing maintenance. However, DBaaS shifts these responsibilities to the **cloud
    service provider** (**CSP**), enabling users to focus more on their application
    development and business logic.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: DBaaS是传统的；设置和管理数据库涉及大量工作，包括硬件配置、软件安装、配置和持续维护。然而，DBaaS将这些责任转移到了**云服务提供商（CSP**），使用户能够更多地关注其应用程序开发和业务逻辑。
- en: 'Here are some ways in which cloud services, particularly DBaaS, can benefit
    the persistence layer:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些云服务，尤其是DBaaS，如何使持久层受益的方法：
- en: '**Simplified database management**: DBaaS abstracts the complexities of managing
    databases, making it easier for developers and teams to handle the persistence
    layer. **Service providers** (**SPs**) handle tasks such as database installation,
    patching, and upgrades, relieving users of these time-consuming and sometimes
    error-prone activities.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化数据库管理**：DBaaS抽象了管理数据库的复杂性，使得开发者和团队能够更容易地处理持久层。**服务提供商（SPs**）处理数据库安装、打补丁和升级等任务，减轻了用户这些耗时且有时容易出错的活动。'
- en: '**Scalability and performance**: Cloud services offer the ability to scale
    databases vertically (increasing the resources of a single instance) or horizontally
    (adding more models to distribute the load). This scalability ensures that databases
    can handle increasing workloads and provide optimal performance to meet the application’s
    demands.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和性能**：云服务提供垂直扩展（增加单个实例的资源）或水平扩展（添加更多模型以分散负载）的能力。这种可扩展性确保数据库能够处理不断增长的工作负载，并提供最佳性能以满足应用程序的需求。'
- en: '**Automated backup and recovery**: CSPs typically offer automatic database
    backup and recovery mechanisms. This ensures that regular backups are taken, reducing
    the risk of data loss. Additionally, in the event of a disaster or failure, the
    cloud provider can facilitate quick and efficient recovery, minimizing downtime
    and ensuring data availability.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动备份和恢复**：云服务提供商（CSPs）通常提供自动数据库备份和恢复机制。这确保了定期进行备份，降低了数据丢失的风险。此外，在灾难或故障发生时，云提供商可以促进快速有效的恢复，最小化停机时间并确保数据可用性。'
- en: '**High Availability (HA) and Fault Tolerance (FT)**: Cloud services often provide
    built-in mechanisms for achieving HA and FT in database systems. These include
    automatic failover, replication, and geographically distributed data centers.
    Such capabilities help ensure that the database remains accessible and resilient,
    even in the face of hardware failures or network outages.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性（HA）和容错性（FT）**：云服务通常提供内置机制以在数据库系统中实现高可用性和容错性。这些机制包括自动故障转移、复制和地理分布式的数据中心。这些功能有助于确保数据库即使在硬件故障或网络中断的情况下也能保持可访问性和弹性。'
- en: '**Security and compliance**: CSPs prioritize safety and invest in robust infrastructure
    and data protection measures. They implement industry-standard security practices,
    encryption mechanisms, and compliance certifications. This allows organizations
    to benefit from the provider’s expertise and focus on ensuring the security and
    compliance of their data without having to build and maintain such measures themselves.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和合规性**：云服务提供商（CSPs）优先考虑安全性，并投资于强大的基础设施和数据保护措施。他们实施行业标准的安全实践、加密机制和合规性认证。这使得组织能够从提供商的专业知识中受益，并专注于确保其数据的安全性和合规性，而无需自己构建和维护这些措施。'
- en: '**Cost-efficiency**: Using cloud services for the persistence layer can be
    cost-effective, eliminating the need to invest in expensive hardware infrastructure
    and reducing ongoing maintenance and operational costs. Cloud providers typically
    offer pricing models that align with actual usage, allowing organizations to pay
    for the resources they consume rather than making significant upfront investments.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：使用云服务作为持久层可以具有成本效益，消除了投资昂贵硬件基础设施的需求，并减少了持续维护和运营成本。云服务提供商通常提供与实际使用相匹配的定价模式，允许组织根据其消耗的资源付费，而不是进行重大前期投资。'
- en: By leveraging cloud services, organizations can offload the responsibility of
    managing databases and focus on their core business objectives. The “somebody
    else’s computer” joke highlights the advantage of delegating database-related
    issues to cloud providers. The SP takes care of tasks such as upgrading the database,
    backup and recovery, partitioning data, ensuring scalability, freeing up resources,
    and reducing the complexity of managing these aspects in-house.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用云服务，组织可以将管理数据库的责任转移出去，专注于其核心业务目标。“别人的电脑”这个笑话突出了将数据库相关问题委托给云服务提供商的优势。SP负责升级数据库、备份和恢复、数据分区、确保可伸缩性、释放资源以及简化内部管理这些方面的复杂性。
- en: Cloud services, particularly DBaaS, empower organizations to leverage robust,
    scalable, and highly available databases without needing extensive expertise or
    infrastructure management. With simplified management, enhanced scalability, automated
    backup and recovery, HA, security measures, and cost-efficiency, cloud services
    offer a valuable solution for the persistence layer of modern applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务，尤其是DBaaS，使组织能够利用强大、可伸缩和高度可用的数据库，而无需广泛的专家知识或基础设施管理。通过简化管理、增强可伸缩性、自动备份和恢复、高可用性、安全措施和成本效益，云服务为现代应用程序的持久层提供了一个有价值的解决方案。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this book, we explored various aspects of application modernization, focusing
    on strategies, anti-patterns, and ways to leverage modern cloud services to enhance
    the persistence layer of applications. We stressed the importance of adopting
    modernization strategies to keep pace with evolving technologies and meet the
    ever-changing needs of users and businesses.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们探讨了应用程序现代化的各个方面，重点关注策略、反模式和利用现代云服务来增强应用程序持久层的方法。我们强调了采用现代化策略的重要性，以跟上技术发展的步伐，并满足用户和业务不断变化的需求。
- en: We discussed the significance of avoiding anti-patterns and bad practices in
    the persistence layer, as they can hinder application performance, maintainability,
    and scalability. Developers can ensure a robust and efficient persistence layer
    by understanding these anti-patterns and their impact and by implementing best
    practices such as proper design principles, ORM frameworks, and connection pooling.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了避免持久层中的反模式和不良做法的重要性，因为这些做法可能会阻碍应用程序的性能、可维护性和可伸缩性。开发者可以通过了解这些反模式和它们的影响，以及通过实施最佳实践，如适当的设计原则、ORM框架和连接池，来确保持久层的健壮和高效。
- en: We also explored the CDC concept and its benefits in capturing and propagating
    data changes across systems. CDC enables real-time data integration, improved
    data consistency, and efficient data replication, making it a valuable technique
    in various scenarios such as data warehousing, microservices architectures, and
    data synchronization.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了CDC概念及其在跨系统捕获和传播数据变化方面的好处。CDC实现了实时数据集成、改进数据一致性和高效的数据复制，使其在各种场景中成为一种有价值的技巧，例如数据仓库、微服务架构和数据同步。
- en: Furthermore, we delved into the advantages of cloud services, specifically DBaaS,
    in simplifying database management, enhancing scalability, providing automated
    backup and recovery, ensuring HA and FT, and addressing security and compliance
    concerns. By leveraging DBaaS, organizations can offload database-related tasks
    to cloud providers and focus on their core objectives.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们深入探讨了云服务的优势，特别是DBaaS在简化数据库管理、增强可伸缩性、提供自动备份和恢复、确保高可用性和容错性以及解决安全和合规性问题。通过利用DBaaS，组织可以将数据库相关任务委托给云服务提供商，并专注于其核心目标。
- en: As we conclude this book, we have covered fundamental concepts and practices
    related to application modernization, persistence layer optimization, and leveraging
    cloud services. The following chapters summarize our discussion, providing key
    takeaways and final considerations to guide your application modernization journey.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本书的结束，我们已经涵盖了与应用程序现代化、持久层优化以及利用云服务相关的根本概念和实践。以下章节总结了我们的讨论，提供了关键要点和最终考虑事项，以指导你的应用程序现代化之旅。
- en: Remember—staying up to date with emerging technologies, adhering to best practices,
    and embracing cloud services can empower you to build modern, efficient, and scalable
    applications that meet the demands of today’s dynamic digital landscape. By adopting
    a proactive approach to modernization and leveraging the power of cloud services,
    you can position your applications for success in the ever-evolving world of technology.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 记住——紧跟新兴技术，遵循最佳实践，以及拥抱云服务，这些都能赋予你构建现代、高效和可扩展的应用程序的能力，以满足当今动态数字景观的需求。通过采取主动的现代化方法并利用云服务的力量，你可以在技术不断演变的世界上为你的应用程序的成功定位。
