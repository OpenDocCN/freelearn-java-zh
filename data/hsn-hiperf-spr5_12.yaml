- en: Spring Boot Microservice Performance Tuning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot微服务性能调优
- en: In the previous chapter, we learned about **Java Virtual Machine** (**JVM**).
    Starting with the internals of JVM and Java's class-loading mechanism, we learned
    how memory management is performed in Java. The last section of the chapter focused
    on garbage collection and JVM tuning. The chapter was full of pretty important
    details for application performance optimization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了**Java虚拟机**（**JVM**）。从JVM的内部和Java的类加载机制开始，我们了解了Java中的内存管理是如何进行的。本章的最后一节关注了垃圾回收和JVM调优。本章充满了对应用程序性能优化非常重要的细节。
- en: 'In this chapter, we will move toward solving performance problems. The approach
    is to develop microservices. Microservices are having a boom in the software development
    industry right now. There is a lot of buzz around microservices and related keywords.
    This approach basically works at an application-architecture level to tune the
    application''s performance. It describes how we can improve application performance
    by setting up the architecture in a different manner. We will cover the following
    topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将着手解决性能问题。方法是开发微服务。微服务目前在软件开发行业中非常流行。微服务和相关关键词引起了很多关注。这种方法基本上是在应用架构层面调整应用程序的性能。它描述了我们如何通过以不同的方式设置架构来改善应用程序的性能。本章将涵盖以下主题：
- en: Spring Boot configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot配置
- en: Metrics with the Spring Boot Actuator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot执行器的指标
- en: Health checks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康检查
- en: Microservices using Spring Boot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Boot的微服务
- en: Microservices with Spring Cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Cloud的微服务
- en: Spring microservice configuration example
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring微服务配置示例
- en: Monitoring microservices with Spring Boot admin
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Boot admin监控微服务
- en: Spring Boot performance tuning
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot性能调优
- en: Spring Boot configuration
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot配置
- en: In this section, we will focus on making Spring Boot work for us. Before jumping
    on to Spring Boot configuration, we will understand what Spring Boot is, why we
    should use it, and what Spring Boot brings to the table. We will move quickly
    to the how to do it part of it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于让Spring Boot为我们工作。在跳转到Spring Boot配置之前，我们将了解Spring Boot是什么，为什么我们应该使用它，以及Spring
    Boot带来了什么。我们将迅速转向如何做这一部分。
- en: What is Spring Boot?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Spring Boot？
- en: 'It is necessary for software development processes to be faster, more accurate,
    and more robust. Software teams are asked to develop quick prototypes for showcasing
    the application''s features to prospective clients. The same applies to production-grade
    applications. The following are a few areas where software architects focus on
    to improve the effectiveness of development teams:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发过程需要更快、更准确、更健壮。要求软件团队快速开发原型，展示应用程序的功能给潜在客户。对生产级应用程序也是如此。以下是软件架构师关注的一些领域，以提高开发团队的效率：
- en: Use the right set of tools, which includes frameworks, IDEs, and build tools
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正确的一套工具，包括框架、IDE和构建工具
- en: Reduce code clutter
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少代码混乱
- en: Reduce the amount of time spent writing repetitive code
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少编写重复代码的时间
- en: Spend the majority of the time implementing business features
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大部分时间用于实现业务功能
- en: Let's think for a moment. Why are we discussing this? The reason is that this
    is the foundation for Spring Boot. These thoughts are the founding stones for
    the creation of any framework or tool that helps teams to improve their productivity.
    Spring Boot is found with exactly the same reason—to improve productivity!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下。为什么我们要讨论这个？原因是这是Spring Boot的基础。这些想法是任何帮助团队提高生产力的框架或工具的基石。Spring Boot也是出于同样的原因而存在——提高生产力！
- en: With Spring Boot, it becomes easy to create production-grade applications that
    are powered by the Spring Framework. It also makes it easy to create production-ready
    services with minimal challenges. Spring Boot helps new and existing users get
    to their productive tasks quickly by taking an opinionated view of the Spring
    Framework. Spring Boot is a tool that facilitates creating a standalone Java application,
    which can be run using the `java -jar` command, or a web application, which can
    be deployed to web servers. The Spring Boot setup is bundled with command-line
    tools to run Spring programs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Boot，轻松创建由Spring框架驱动的生产级应用程序。它还可以轻松创建具有最小挑战的生产就绪服务。Spring Boot通过对Spring框架持有一种看法，帮助新用户和现有用户快速进行生产任务。Spring
    Boot是一个工具，可以帮助创建一个独立的Java应用程序，可以使用`java -jar`命令运行，或者一个可以部署到Web服务器的Web应用程序。Spring
    Boot设置捆绑了命令行工具来运行Spring程序。
- en: 'The major goals of Spring Boot are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的主要目标是：
- en: To gain an extremely fast experience to get started with Spring-powered projects
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以极快的速度开始使用Spring项目
- en: Broad accessibility
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广泛的可访问性
- en: Major support from out-of-the-box configuration
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要支持开箱即用的配置
- en: Flexibility to deviate from Spring default as the need may arise
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要灵活地偏离Spring默认设置
- en: That it does not generate any code
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不生成任何代码
- en: That it does not require XML configuration
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要XML配置
- en: 'Along with previously listed primary features, Spring Boot also provides support
    for non-functional features, listed as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面列出的主要特性，Spring Boot还提供了以下非功能特性的支持：
- en: Support for versioning and configuration for widely known and used frameworks
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持广为人知和使用的框架的版本和配置
- en: Support for application security
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用安全支持
- en: Support for monitoring application health check parameters
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序健康检查参数的支持
- en: Support for monitoring of performance metrics
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能指标监控支持
- en: Support for externalized configurations
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部化配置支持
- en: Though Spring Boot provides defaults for the primary and non-functional features,
    it is flexible enough to allow developers to use the frameworks, servers, and
    tools of their choice.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Spring Boot为主要和非功能特性提供了默认值，但它足够灵活，允许开发人员使用他们选择的框架、服务器和工具。
- en: Spring Initializr
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Initializr
- en: Spring Boot applications can be kickstarted in multiple ways. One of the ways
    is to use the Eclipse-based Spring Tools Suite IDE ([https://spring.io/tools/sts](https://spring.io/tools/sts)).
    Another way is to use [https://start.spring.io](https://start.spring.io), also
    known as Spring Initializr. First things first, Spring Initializr is not Spring
    Boot or an equivalent. Spring Initializr is a tool that has simple web UI support
    to configure the Spring Boot application. It can be considered a tool for a quick-start
    generation of Spring projects. It provides APIs that can be extended for customization
    in order to generate the projects.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot应用程序可以以多种方式启动。其中一种方式是使用基于Eclipse的Spring工具套件IDE ([https://spring.io/tools/sts](https://spring.io/tools/sts))。另一种方式是使用[https://start.spring.io](https://start.spring.io)，也称为Spring
    Initializr。首先，Spring Initializr不是Spring Boot或等效物。Spring Initializr是一个具有简单Web UI支持的工具，用于配置Spring
    Boot应用程序。它可以被认为是一个用于快速启动生成Spring项目的工具。它提供了可以扩展的API，以便生成项目的定制化。
- en: The Spring Initializr tool provides a configuration structure to define a list
    of dependencies, supported Java and Spring Boot versions, and supported dependency
    versioning.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Initializr工具提供了一个配置结构，用于定义依赖项列表、支持的Java和Spring Boot版本以及支持的依赖项版本。
- en: 'Basically, Spring Initializr creates an initial Spring project based on the
    configuration provided and allows the developer to download the project in a ZIP
    file. Here are the steps to be followed:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Spring Initializr根据提供的配置创建一个初始的Spring项目，并允许开发人员下载ZIP文件中的项目。以下是要遵循的步骤：
- en: Navigate to [https://start.spring.io/](https://start.spring.io/).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://start.spring.io/](https://start.spring.io/)。
- en: Choose the dependency management tool from Maven or Gradle.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Maven或Gradle中选择依赖项管理工具。
- en: Choose the JVM-based programming language from Java, Kotlin, and Groovy.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Java、Kotlin和Groovy中选择基于JVM的编程语言。
- en: Choose the Spring Boot version to be used.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要使用的Spring Boot版本。
- en: Provide the Group artifact by inputting the group name as `com.packt.springhighperformance`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入组名`com.packt.springhighperformance`来提供组件名称。
- en: Input Artifact, which is the artifact ID for the Maven project. This will become
    the name of the project WAR or JAR file to be deployed or executed.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入Artifact，这是Maven项目的Artifact ID。这将成为要部署或执行的项目WAR或JAR文件的名称。
- en: Choose a packaging type from Jar and War.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Jar和War中选择一种打包类型。
- en: Click on the Switch to the full version link. This will open up a list of starter
    projects to choose from. The starter project will be explained in detail in the
    following section.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“切换到完整版本”链接。这将打开一个可供选择的起始项目列表。起始项目将在下一节中详细解释。
- en: Once we have chosen the starters or dependencies, click on the Generate Project
    button. This will download the ZIP file containing the initial project configuration.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们选择了起始器或依赖项，点击“生成项目”按钮。这将下载包含初始项目配置的ZIP文件。
- en: 'The following is the Spring Initializr screen with a few configurations:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有一些配置的Spring Initializr屏幕：
- en: '![](img/a6a45a4d-e090-4376-ba21-fc3485818310.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6a45a4d-e090-4376-ba21-fc3485818310.jpeg)'
- en: 'Once done, a folder structure similar to what is shown in the following screenshot
    will be generated:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将生成类似于以下截图所示的文件夹结构：
- en: '![](img/7ea85fbb-0031-4bc6-9bcd-3f572426642f.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ea85fbb-0031-4bc6-9bcd-3f572426642f.jpg)'
- en: 'Spring Initializr also supports the command-line interface to create the Spring
    project configuration. The following command can be used to generate a project
    configuration:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Initializr还支持命令行界面来创建Spring项目配置。可以使用以下命令来生成项目配置：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As mentioned earlier, Spring Initializr supports integration with IDE. It integrates
    well with Eclipse/STS, IntelliJ ultimate edition, and NetBeans with NB the SpringBoot
    plugin.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Spring Initializr支持与IDE的集成。它与Eclipse/STS、IntelliJ ultimate版和带有NB SpringBoot插件的NetBeans集成良好。
- en: Starters with Maven
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven的起始器
- en: In the preceding section, we looked at the Spring Initializr tool. It is time
    to quickly look at the starters or dependencies supported by Spring Boot.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们看了Spring Initializr工具。现在是时候快速查看Spring Boot支持的起始器或依赖项了。
- en: Dependency management becomes challenging as the project grows in complexity.
    It is recommended not to manage the dependencies manually for a complex project.
    Spring Boot starters fix a similar problem. Spring Boot starters is a set of dependency
    descriptors that can be included in Spring-powered applications using starter
    POMs. It eliminates the need to look for sample code and copy/paste lots of dependency
    descriptors for Spring and related libraries. As an example, if we want to develop
    an application using Spring and JPA, we can include the `spring-boot-data-jpa-starter`
    dependency in the project. `spring-boot-data-jpa-starter` is one of the starters.
    The starters follow uniform naming patterns, such as `spring-boot-starter-*`,
    where `*` denotes the type of application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目复杂性的增加，依赖项管理变得具有挑战性。建议不要为复杂项目手动管理依赖项。Spring Boot起始器解决了类似的问题。Spring Boot起始器是一组依赖描述符，可以在使用starter
    POMs的Spring应用程序中包含。它消除了寻找示例代码和复制/粘贴大量Spring和相关库的依赖描述符的需要。例如，如果我们想要使用Spring和JPA开发应用程序，我们可以在项目中包含`spring-boot-data-jpa-starter`依赖项。`spring-boot-data-jpa-starter`是其中的一个起始器。这些起始器遵循统一的命名模式，例如`spring-boot-starter-*`，其中`*`表示应用程序的类型。
- en: 'Here is a list of some Spring Boot application starters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Spring Boot应用程序起始器的列表：
- en: '| **Name** | **Description** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `spring-boot-starter` | Core starter provides auto-configuration and logging
    support. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter` | 核心起始器提供自动配置和日志记录支持。 |'
- en: '| `spring-boot-starter-activemq` | JMS messaging starter using Apache ActiveMQ.
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-activemq` | 使用Apache ActiveMQ的JMS消息起始器。 |'
- en: '| `spring-boot-starter-amqp` | Spring AMQP and Rabbit MQ starter. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-amqp` | Spring AMQP和Rabbit MQ起始器。 |'
- en: '| `spring-boot-starter-aop` | Spring AOP and AspectJ starter. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-aop` | Spring AOP和AspectJ起始器。 |'
- en: '| `spring-boot-starter-artemis` | JMS messaging starter using Apache Artemis.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-artemis` | 使用Apache Artemis的JMS消息起始器。 |'
- en: '| `spring-boot-starter-batch` | Spring Batch starter. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-batch` | Spring Batch起始器。 |'
- en: '| `spring-boot-starter-cache` | Spring Framework''s caching support. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-cache` | Spring Framework的缓存支持。 |'
- en: '| `spring-boot-starter-cloud-connectors` | Starter providing support for simplified
    connections with cloud services using Spring Cloud Connectors in cloud platforms
    such as Cloud Foundry and Heroku. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-cloud-connectors` | 提供支持，使用Spring Cloud Connectors在云平台（如Cloud
    Foundry和Heroku）中简化与云服务的连接。 |'
- en: '| `spring-boot-starter-data-elasticsearch` | Starter with support for elasticsearch
    and analytics engine, and Spring Data Elasticsearch. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-elasticsearch` | 具有对elasticsearch和分析引擎以及Spring
    Data Elasticsearch的支持的启动器。 |'
- en: '| `spring-boot-starter-data-jpa` | Spring Data JPA with Hibernate. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-jpa` | 使用Hibernate的Spring Data JPA。 |'
- en: '| `spring-boot-starter-data-ldap` | Spring Data LDAP. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-ldap` | Spring Data LDAP。 |'
- en: '| `spring-boot-starter-data-mongodb` | MongoDB document-oriented database and
    Spring Data MongoDB. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-mongodb` | MongoDB文档导向数据库和Spring Data MongoDB。
    |'
- en: '| `spring-boot-starter-data-redis` | Redis key-value data store with Spring
    Data Redis and the Lettuce client. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-redis` | 使用Spring Data Redis和Lettuce客户端的Redis键值数据存储。
    |'
- en: '| `spring-boot-starter-data-rest` | Starter providing support for exposing
    Spring Data repositories over REST using Spring Data REST. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-rest` | 提供支持，使用Spring Data REST在REST上公开Spring Data存储库的启动器。
    |'
- en: '| `spring-boot-starter-data-solr` | Apache Solr search platform with Spring
    Data Solr. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-data-solr` | 使用Spring Data Solr的Apache Solr搜索平台。 |'
- en: '| `spring-boot-starter-freemarker` | Starter supports building MVC web applications
    using the FreeMarker views. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-freemarker` | 支持使用FreeMarker视图构建MVC Web应用程序的启动器。 |'
- en: '| `spring-boot-starter-groovy-templates` | Starter supporting building MVC
    web applications using the Groovy templates views. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-groovy-templates` | 支持使用Groovy模板视图构建MVC Web应用程序的启动器。
    |'
- en: '| `spring-boot-starter-integration` | Spring Integration. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-integration` | Spring Integration。 |'
- en: '| `spring-boot-starter-jdbc` | JDBC with the Tomcat JDBC connection pool. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-jdbc` | 使用Tomcat JDBC连接池的JDBC。 |'
- en: '| `spring-boot-starter-jersey` | Starter supporting building RESTful web applications
    using JAX-RS and Jersey. It is an alternative to `spring-boot-starter-web starter`.
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-jersey` | 支持使用JAX-RS和Jersey构建RESTful Web应用程序。这是`spring-boot-starter-web
    starter`的替代品。 |'
- en: '| `spring-boot-starter-json` | Starter supporting JSON manipulation. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-json` | 支持JSON操作的启动器。 |'
- en: '| `spring-boot-starter-mail` | Starter supporting the use of Java Mail and
    Spring Framework’s email-sending support. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-mail` | 支持使用Java Mail和Spring Framework的邮件发送支持的启动器。 |'
- en: '| `spring-boot-starter-quartz` | Starter for using Spring Boot Quartz. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-quartz` | 用于使用Spring Boot Quartz的启动器。 |'
- en: '| `spring-boot-starter-security` | Spring Security starter. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-security` | Spring Security启动器。 |'
- en: '| `spring-boot-starter-test` | Support for Spring Boot applications with libraries
    including JUnit, Hamcrest, and Mockito. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-test` | 支持使用包括JUnit、Hamcrest和Mockito在内的库的Spring Boot应用程序。
    |'
- en: '| `spring-boot-starter-thymeleaf` | Supports building MVC web applications
    using the Thymeleaf views. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-thymeleaf` | 支持使用Thymeleaf视图构建MVC Web应用程序。 |'
- en: '| `spring-boot-starter-validation` | Starter supporting Java Bean Validation
    with Hibernate Validator. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-validation` | 使用Hibernate Validator支持Java Bean验证的启动器。
    |'
- en: '| `spring-boot-starter-web` | Supports building web, including RESTful, applications
    using Spring MVC. It uses Tomcat as the default embedded container. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-web` | 支持使用Spring MVC构建Web应用程序，包括RESTful应用程序。它使用Tomcat作为默认的嵌入式容器。
    |'
- en: '| `spring-boot-starter-web-services` | Supports use of Spring Web Services.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-web-services` | 支持使用Spring Web Services。 |'
- en: '| `spring-boot-starter-websocket` | Supports building WebSocket applications
    using Spring Framework''s WebSocket support. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-websocket` | 支持使用Spring Framework的WebSocket支持构建WebSocket应用程序。
    |'
- en: '`spring-boot-starter-actuator` is a production starter for Spring Boot''s Actuator
    tool, which provides support for production-ready features, such as application
    monitoring, health checks, logging, and beans.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-actuator` 是Spring Boot Actuator工具的生产启动器，提供了生产就绪功能的支持，如应用程序监控、健康检查、日志记录和bean。'
- en: 'The following list includes a few of the technical starters for Spring Boot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表包括Spring Boot的一些技术启动器：
- en: '| **Name** | **Description** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| `spring-boot-starter-jetty `                        | Support for Jetty as
    the embedded servlet container. This is an alternative to `spring-boot-starter-tomcat`.
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-jetty `                        | 作为嵌入式Servlet容器的Jetty支持。这是`spring-boot-starter-tomcat`的替代品。
    |'
- en: '| `spring-boot-starter-log4j2`                          | Starter supporting
    Log4j 2 for logging. This is an alternative to `spring-boot-starter-logging`.
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-log4j2`                          | 支持Log4j 2进行日志记录。这是`spring-boot-starter-logging`的替代品。
    |'
- en: '| `spring-boot-starter-logging` | This is the default logging starter using
    logback. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-logging` | 这是使用logback的默认日志启动器。 |'
- en: '| `spring-boot-starter-tomcat` | This is the default servlet container starter
    used for `spring-boot-starter-web`. It uses Tomcat as the embedded server. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-tomcat` | 这是用于`spring-boot-starter-web`的默认Servlet容器启动器。它使用Tomcat作为嵌入式服务器。
    |'
- en: '| `spring-boot-starter-undertow` | This is an alternative to `spring-boot-starter-tomcat
    starter`. It uses Undertow as the embedded server. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-undertow` | 这是`spring-boot-starter-tomcat starter`的替代品。它使用Undertow作为嵌入式服务器。
    |'
- en: '| `spring-boot-starter-cache` | Spring Framework''s caching support. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `spring-boot-starter-cache` | Spring Framework的缓存支持。 |'
- en: Creating your first Spring Boot application
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个Spring Boot应用程序
- en: In this section, we will look at the prerequisites for developing a Spring Boot
    application. We will develop a small Spring Boot application to understand the
    configuration required for a Spring Boot application and the importance of each
    configuration.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看开发Spring Boot应用程序的先决条件。我们将开发一个小型的Spring Boot应用程序，以了解Spring Boot应用程序所需的配置和每个配置的重要性。
- en: 'Here is the list of prerequisites for working with Spring Boot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Spring Boot的先决条件列表：
- en: Java 8 or 9
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 8或9
- en: Spring 5.0.4 or later
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 5.0.4或更高版本
- en: 'Spring Boot supports:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot支持：
- en: Maven 3.2+ and Gradle 4 for dependency management and explicit builds
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 3.2+和Gradle 4用于依赖管理和显式构建
- en: Tomcat 8.5, Jetty 9.4, and Undertow 1.4
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat 8.5，Jetty 9.4和Undertow 1.4
- en: Spring Boot applications can be deployed to any servlet 3.0+ compatible servlet
    container.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot应用程序可以部署到任何servlet 3.0+兼容的servlet容器。
- en: The first step in developing a Spring Boot application is to install Spring
    Boot. It is extremely easy to set up. It can be set up in the same way as other
    standard Java libraries. To install Spring Boot, we need to include the appropriate
    `spring-boot-*.jar` library files in the classpath. Any IDE or text editor can
    be used as Spring Boot does not require any specialized tools.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Spring Boot应用程序的第一步是安装Spring Boot。设置非常简单。它可以像其他标准Java库一样设置。要安装Spring Boot，我们需要在类路径中包含适当的`spring-boot-*.jar`库文件。Spring
    Boot不需要任何专门的工具，可以使用任何IDE或文本编辑器。
- en: Though we can copy the required Spring Boot JAR files in the application classpath,
    the recommendation is to use a build tool, such as Maven or Gradle, for dependency
    management.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将所需的Spring Boot JAR文件复制到应用程序类路径中，但建议使用构建工具，如Maven或Gradle，进行依赖管理。
- en: The Maven `groupId` used by the Spring Boot dependencies is `org.springframework.boot`.
    For Spring Boot applications, the Maven POM file inherits the `spring-boot-starter-parent`
    project. Spring Boot defines starter projects and it is defined as a dependency
    in the Spring Boot application's dependencies.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot依赖项使用的Maven `groupId`是`org.springframework.boot`。对于Spring Boot应用程序，Maven
    POM文件继承了`spring-boot-starter-parent`项目。Spring Boot定义了启动器项目，并在Spring Boot应用程序的依赖项中定义为依赖项。
- en: 'Let''s jump on to creating our first Spring Boot application by performing
    the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建我们的第一个Spring Boot应用程序，按照以下步骤进行：
- en: Create a kickstarter application using Spring Initializr.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring Initializr创建一个kickstarter应用程序。
- en: Choose Maven as the build and dependency management tool.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Maven作为构建和依赖管理工具。
- en: Choose the appropriate Spring Boot version.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适当的Spring Boot版本。
- en: Choose the packaging type as War.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择打包类型为War。
- en: For the sake of simplicity, we will not include a JPA starter in the application.
    We will include a web module only to demonstrate the one request-response flow.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将不在应用程序中包含JPA启动器。我们只会包含一个web模块，以演示一个请求-响应流程。
- en: Download and import the project into STS or Eclipse.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并导入项目到STS或Eclipse。
- en: In STS, you can run the application as a Spring Boot application whereas in
    Eclipse, you can choose to run the application as a Java Application.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在STS中，您可以将应用程序作为Spring Boot应用程序运行，而在Eclipse中，您可以选择将应用程序作为Java应用程序运行。
- en: 'Let''s walk through the code snippets now. The following is the sample Maven
    POM file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们浏览一下代码片段。以下是示例Maven POM文件：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: One of the notable configurations in the preceding configuration file is the
    parent dependency. As mentioned earlier, all Spring Boot applications use `spring-boot-starter-parent`
    as the parent dependency in the `pom.xml` file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置文件中，一个值得注意的配置是父依赖项。如前所述，所有Spring Boot应用程序在`pom.xml`文件中使用`spring-boot-starter-parent`作为父依赖项。
- en: 'The parent POM helps manage the following for child projects and modules:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 父POM帮助管理子项目和模块的以下内容：
- en: Java version
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java版本
- en: Version management for included dependencies
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含依赖项的版本管理
- en: The default configuration for the plugin
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件的默认配置
- en: The Spring Boot parent starter defines Spring Boot dependencies as the parent
    POM. So, it inherits dependency-management features from Spring Boot dependencies.
    It defines the default Java version to be 1.6, but at a project level, we can
    change it to `1.8`, as shown in the preceding code sample.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot父启动器将Spring Boot依赖项定义为父POM。因此，它从Spring Boot依赖项继承了依赖项管理功能。它将默认的Java版本定义为1.6，但在项目级别上，我们可以将其更改为`1.8`，如前面的代码示例所示。
- en: 'Along with the default POM file, Spring Boot also creates a Java class that
    works as an application starter. The following is the sample Java code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的POM文件外，Spring Boot还创建了一个作为应用程序启动器的Java类。以下是示例Java代码：
- en: '[PRE2]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`SpringApplication` is a class responsible for bootstrapping the Spring Boot
    application.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpringApplication`是一个负责引导Spring Boot应用程序的类。'
- en: 'Spring Boot application developers are used to annotate the main application
    class with `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`
    annotations. Here is a brief description for each of the annotations:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot应用程序开发人员习惯于使用`@Configuration`、`@EnableAutoConfiguration`和`@ComponentScan`注解来注释主应用程序类。以下是每个注解的简要描述：
- en: '`@Configuration`: This is a Spring annotation and not specific to Spring Boot
    applications. It indicates that the class is the source for bean definitions.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Configuration`：这是一个Spring注解，不特定于Spring Boot应用程序。它表示该类是bean定义的来源。'
- en: '`@EnableAutoConfiguration`: This one is a Spring Boot-specific annotation.
    The annotation enables the application to add beans from the classpath definitions.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@EnableAutoConfiguration`：这是一个Spring Boot特定的注解。该注解使应用程序能够从类路径定义中添加bean。'
- en: '`@ComponentScan`**:** This annotation tells the Spring application to search
    for components, configurations, and services in the search path provided.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ComponentScan`：此注解告诉Spring应用程序在提供的搜索路径中搜索组件、配置和服务。'
- en: 'The following is the definition for the `@SpringBootApplication` annotation:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`@SpringBootApplication`注解的定义：
- en: '[PRE3]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Looking at the previous code, it is clear that `@SpringBootApplication` works
    as a convenient annotation to define the Spring Boot application instead of declaring
    three annotations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码可以看出，`@SpringBootApplication`作为一个方便的注解来定义Spring Boot应用程序，而不是声明三个注解。
- en: 'The following block shows the log''s output when the Spring Boot application
    is started:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了当Spring Boot应用程序启动时的日志输出：
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this point, we have the kickstarter Spring Boot application ready, but we
    don''t have any URLs to be rendered. So, when you access `http://localhost:8080`,
    a page similar to the one shown in the following screenshot is displayed:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经准备好了Spring Boot应用程序，但我们没有任何要呈现的URL。因此，当您访问`http://localhost:8080`时，将显示类似于以下屏幕截图的页面：
- en: '![](img/3443f7f2-8712-47e8-9cb8-98bcd0b86b72.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3443f7f2-8712-47e8-9cb8-98bcd0b86b72.jpeg)'
- en: 'Let''s define the Spring controller and default route, and add text content
    to it. The following is the code snippet for the controller class:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义Spring控制器和默认路由，并向其添加文本内容。以下是控制器类的代码片段：
- en: '[PRE5]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example code, we have defined two routes using the `@RequestMapping`
    annotation. The following is a list of annotations used in the preceding code
    block with brief descriptions:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例代码中，我们使用`@RequestMapping`注解定义了两个路由。以下是上述代码块中使用的注解列表及简要描述：
- en: The `@Controller` annotation indicates that the class is a controller class
    and may contain request mappings.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Controller`注解表示该类是一个控制器类，可能包含请求映射。'
- en: The `@RequestMapping` annotation defines an application URL that the users can
    navigate to in the browser.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RequestMapping`注解定义了用户可以在浏览器中导航到的应用程序URL。'
- en: The `@ResponseBody` annotation indicates that the method return value should
    be rendered on the page as the HTML content. The value parameter can take the
    URL path to be navigated.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ResponseBody`注解表示方法返回值应该作为HTML内容呈现在页面上。value参数可以采用要导航的URL路径。'
- en: 'The following screenshot shows the page displayed or rendered when we hit `http://localhost:8080`
    in the browser:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中输入`http://localhost:8080`时，以下屏幕截图显示了显示或呈现的页面：
- en: '![](img/bc305322-30ca-4029-b5c7-2b02130fdb37.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc305322-30ca-4029-b5c7-2b02130fdb37.jpeg)'
- en: 'We have also defined parameterized request mapping with the value as `/welcome`.
    The value of the request parameter will be reflected in the message on the page
    when we navigate to the URL in the browser. The following screenshot shows how
    the content is rendered:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了带有值`/welcome`的参数化请求映射。当我们在浏览器中导航到URL时，请求参数的值将反映在页面上的消息中。以下屏幕截图显示了内容的呈现方式：
- en: '![](img/3785fbe1-ea04-493b-aae8-f3f9f3383565.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3785fbe1-ea04-493b-aae8-f3f9f3383565.jpeg)'
- en: 'We can find the following log entries when the application with these requests
    mappings bootstraps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序使用这些请求映射引导时，我们可以找到以下日志条目：
- en: '[PRE6]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, our first Spring Boot application with example request mappings
    are in place. This section served as a step-by-step guide to Spring Boot application
    development. In the next section, we will look at more Spring Boot features.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的第一个Spring Boot应用程序已经有了示例请求映射。本节作为Spring Boot应用程序开发的逐步指南。在下一节中，我们将看到更多Spring
    Boot功能。
- en: Metrics with Spring Boot Actuator
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot执行器的指标
- en: Before we move any further, it is important to understand what a Spring Boot
    Actuator is. We will introduce the Spring Boot Actuator in the sections to follow.
    We will also look at the out-of-the-box capabilities provided by the Spring Boot
    Actuator. We will also go through examples to understand the configuration and
    other necessary details.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，了解Spring Boot执行器的重要性是很重要的。我们将在接下来的章节中介绍Spring Boot执行器。我们还将查看Spring Boot执行器提供的开箱即用的功能。我们还将通过示例来了解配置和其他必要的细节。
- en: What is Spring Actuator?
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Spring执行器？
- en: 'Essentially, the Spring Boot Actuator can be considered a subproject of Spring
    Boot. It helps bring production-grade features in the application that we develop
    using Spring Boot out of the box. The Spring Boot Actuator needs to be configured
    before we can leverage the features exposed by it. The Spring Boot Actuator has
    been available since Spring Boot first release in April 2014\. The Spring Boot
    Actuator materializes different HTTP endpoints so the development team can perform
    the following tasks:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，Spring Boot执行器可以被认为是Spring Boot的一个子项目。它可以在我们使用Spring Boot开发的应用程序中提供生产级功能。在利用其提供的功能之前，需要配置Spring
    Boot执行器。Spring Boot执行器自2014年4月首次发布以来一直可用。Spring Boot执行器实现了不同的HTTP端点，因此开发团队可以执行以下任务：
- en: Application monitoring
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序监控
- en: Analyzing application metrics
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析应用指标
- en: Interacting with the application
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与应用程序交互
- en: Version information
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本信息
- en: Logger details
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录器详情
- en: Bean details
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bean详情
- en: Enabling Spring Boot Actuator
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用Spring Boot执行器
- en: Apart from helping in bootstrapping application development, Spring Boot enables
    a number of features that can be used in the application. These additional features
    include, but are not limited to, monitoring and managing the application. Application
    management and monitoring can be done over HTTP endpoints or using JMX. Auditing,
    health checkups, and metrics can also be applied with a configuration in a Spring
    Boot application. These are the production-ready features provided by the `spring-boot-actuator`
    module.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助引导应用程序开发外，Spring Boot还可以在应用程序中使用许多功能。这些附加功能包括但不限于监视和管理应用程序。应用程序的管理和监视可以通过HTTP端点或使用JMX来完成。审计、健康检查和指标也可以通过Spring
    Boot应用程序中的配置来应用。这些都是由`spring-boot-actuator`模块提供的生产就绪功能。
- en: 'Here is the definition of the Actuator from the Spring Boot reference documentation
    ([https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready)):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自Spring Boot参考文档的执行器定义（[https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready)）：
- en: An actuator is a manufacturing term that refers to a mechanical device for moving
    or controlling something. Actuators can generate a large amount of motion from
    a small change.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 执行器是一个制造业术语，指的是用于移动或控制某物的机械装置。执行器可以从微小的变化中产生大量运动。
- en: 'In order to leverage the features of the Spring Boot Actuator, the first step
    is to enable it. It is not enabled by default and we have to add the dependency
    to enable it. It is extremely easy to enable the Spring Boot Actuator in a Spring
    Boot application. We will need to add the `spring-boot-starter-actuator` dependency
    in the `pom.xml` file in case we are using Maven for dependency management in
    the application. The following is the snippet for Maven dependency for the Spring
    Boot Actuator:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用 Spring Boot Actuator 的功能，第一步是启用它。它不是默认启用的，我们必须添加依赖项才能启用它。在 Spring Boot
    应用程序中启用 Spring Boot Actuator 非常容易。如果我们在应用程序中使用 Maven 进行依赖管理，我们需要在 `pom.xml` 文件中添加
    `spring-boot-starter-actuator` 依赖项。以下是 Maven 依赖项的片段，用于 Spring Boot Actuator：
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As mentioned before, the Spring Boot Actuator enables application monitoring
    by exposing or enabling endpoints to interact with. The module has a number of
    out-of-the-box endpoints. It also allows the developer to create their own custom
    endpoints. We can enable or disable each individual endpoint. This ensures that
    the endpoint is created in the application and the corresponding bean exists in
    the application's context.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Spring Boot Actuator 通过暴露或启用端点来实现应用程序监控。该模块具有许多开箱即用的端点。它还允许开发人员创建自定义端点。我们可以启用或禁用每个单独的端点。这确保了端点在应用程序中创建，并且应用程序上下文中存在相应的
    bean。
- en: The endpoint can be accessed remotely by exposing it over JMX or HTTP. Usually,
    applications expose the endpoints over HTTP. The endpoint URL is derived by mapping
    the endpoint ID along with the `/actuator` prefix.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 端点可以通过在 JMX 或 HTTP 上暴露来远程访问。通常，应用程序会通过 HTTP 暴露端点。端点的 URL 是通过将端点 ID 与 `/actuator`
    前缀进行映射而派生的。
- en: 'The following is a list of technology-agnostic endpoints:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些与技术无关的端点列表：
- en: '| **ID** | **Description** | **Enabled by default** |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '**ID** | **描述** | **默认启用**'
- en: '| `auditevents` | This endpoint exposes the audio event''s information. | Yes
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '`auditevents` | 此端点公开了音频事件的信息。 | 是'
- en: '| `beans` | This endpoints shows a complete list of the Spring `beans` available
    in the application. | Yes |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '`beans` | 此端点显示应用程序中可用的所有 Spring `beans` 的完整列表。 | 是'
- en: '| `conditions` | This endpoint displays the `conditions` that are evaluated
    on configuration and auto-configuration classes. | Yes |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '`conditions` | 此端点显示在配置和自动配置类上评估的 `conditions`。 | 是'
- en: '| `configprops` | This endpoint shows a list of properties marked with `@ConfigurationProperties`.
    | Yes |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '`configprops` | 此端点显示标有 `@ConfigurationProperties` 的属性列表。 | 是'
- en: '| `env` | This endpoint displays the properties from Spring''s `ConfigurableEnvironment`.
    | Yes |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '`env` | 此端点显示来自 Spring 的 `ConfigurableEnvironment` 的属性。 | 是'
- en: '| `flyway` | The endpoint shows any `flyway` database migrations that might
    have been applied. | Yes |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '`flyway` | 此端点显示可能已应用的任何 `flyway` 数据库迁移。 | 是'
- en: '| `health` | This endpoint shows the `health` information of the application.
    | Yes |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '`health` | 此端点显示应用程序的 `health` 信息。 | 是'
- en: '| `httptrace` | This endpoint shows the HTTP trace information. By default,
    it shows the last 100 HTTP request-response exchanges. | Yes |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '`httptrace` | 此端点显示 HTTP 跟踪信息。默认情况下，它显示最后 100 个 HTTP 请求-响应交换。 | 是'
- en: '| `info` | This endpoint exposes application information. | Yes |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '`info` | 此端点公开应用程序信息。 | 是'
- en: '| `loggers` | This endpoint shows the application `logger` configuration. |
    Yes |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '`loggers` | 此端点显示应用程序 `logger` 配置。 | 是'
- en: '| `liquibase` | This endpoint displays any `liquibase` database migrations
    that might have been applied. | Yes |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '`liquibase` | 此端点显示可能已应用的任何 `liquibase` 数据库迁移。 | 是'
- en: '| `metrics` | This endpoint displays `metrics` information for the application.
    | Yes |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '`metrics` | 此端点显示应用程序的 `metrics` 信息。 | 是'
- en: '| `mappings` | This endpoint displays a list of all the `@RequestMapping` paths.
    | Yes |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '`mappings` | 此端点显示所有 `@RequestMapping` 路径的列表。 | 是'
- en: '| `scheduledtasks` | This endpoint shows the scheduled tasks for the application.
    | Yes |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '`scheduledtasks` | 此端点显示应用程序的定时任务。 | 是'
- en: '| `sessions` | This endpoint allows retrieval and deletion of user `sessions`
    from a Spring Session-backed session store. It is not available when using Spring
    Session’s support for reactive web applications. | Yes |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '`sessions` | 此端点允许从 Spring Session 支持的会话存储中检索和删除用户 `sessions`。在使用 Spring Session
    对响应式 Web 应用程序的支持时不可用。 | 是'
- en: '| `shutdown` | This endpoint allows the application to be `shutdown` gracefully.
    | No |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '`shutdown` | 此端点允许应用程序优雅地关闭。 | 否'
- en: '| `threaddump` | This endpoint performs a `threaddump`. | Yes |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '`threaddump` | 此端点执行 `threaddump`。 | 是'
- en: 'The following is a list of additional endpoints that are exposed if the application
    is a web application:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在应用程序是 Web 应用程序时暴露的附加端点：
- en: '| **ID** | **Description** | **Enabled by default** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '**ID** | **描述** | **默认启用**'
- en: '| `heapdump` | This endpoint returns a compressed `hprof` heap dump file. |
    Yes |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '`heapdump` | 此端点返回一个压缩的 `hprof` 堆转储文件。 | 是'
- en: '| `jolokia` | This endpoint exposes JMX beans over HTTP. | Yes |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '`jolokia` | 此端点通过 HTTP 公开 JMX bean。 | 是'
- en: '| `logfile`                  | This endpoint shows the contents of the `logfile`
    if the `logging.file` or `logging.path` is set in the properties. It uses the
    HTTP range header to partly retrieve contents of the log file. | Yes |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '`logfile` | 如果在属性中设置了 `logging.file` 或 `logging.path`，此端点将显示 `logfile` 的内容。它使用
    HTTP 范围标头来部分检索日志文件的内容。 | 是'
- en: '| `prometheus` | This endpoint shows metrics in a format that can be scraped
    by a Prometheus server. | Yes |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '`prometheus` | 此端点显示以 Prometheus 服务器可以抓取的格式的指标。 | 是'
- en: Enabling endpoints
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用端点
- en: 'With the Spring Boot Actuator, all endpoints are enabled by default, except
    the `shutdown` endpoint. In order to enable or disable a particular endpoint,
    a relevant property should be added in the `application.properties` file. The
    following is the format for enabling the endpoint:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spring Boot Actuator，默认情况下所有端点都是启用的，除了 `shutdown` 端点。为了启用或禁用特定端点，应在 `application.properties`
    文件中添加相关属性。以下是启用端点的格式：
- en: '[PRE8]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As an example, the following property can be added to enable the `shutdown`
    endpoint:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以添加以下属性以启用`shutdown`端点：
- en: '[PRE9]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following log entries can be seen when we bootstrap an application with
    the default Actuator endpoints enabled:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动一个默认启用Actuator端点的应用程序时，可以看到以下日志条目：
- en: '[PRE10]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Looking at the log entries closely, we find that the following endpoints or
    URLs are exposed:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看日志条目，我们发现以下端点或URL被暴露：
- en: '`/actuator`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/actuator`'
- en: '`/actuator/health`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/actuator/health`'
- en: '`/actuator/info`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/actuator/info`'
- en: 'Why does the application have three endpoints exposed out of so many listed
    earlier? To answer this question, the Spring Boot Actuator exposes only three
    endpoints over HTTP. The rest of the endpoints, listed previously, are exposed
    over the JMX connection. The following is a list of endpoints and information
    about whether they are exposed over HTTP or JMX:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序为什么有三个端点暴露出来，而之前列出的端点如此之多？为了回答这个问题，Spring Boot Actuator只在HTTP上暴露了三个端点。之前列出的其余端点是通过JMX连接暴露的。以下是端点列表以及它们是否在HTTP或JMX上暴露的信息：
- en: '| **ID** | **Exposed over JMX** | **Exposed over HTTP** |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| **ID** | **在JMX上暴露** | **在HTTP上暴露** |'
- en: '| `auditevents` | Yes | No |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `auditevents` | 是 | 否 |'
- en: '| `beans` | Yes | No |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `beans` | 是 | 否 |'
- en: '| `conditions` | Yes | No |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `conditions` | 是 | 否 |'
- en: '| `configprops` | Yes | No |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `configprops` | 是 | 否 |'
- en: '| `env` | Yes | No |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `env` | 是 | 否 |'
- en: '| `flyway` | Yes | No |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `flyway` | 是 | 否 |'
- en: '| `health` | Yes | Yes |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `health` | 是 | 是 |'
- en: '| `heapdump` | N/A | No |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `heapdump` | N/A | 否 |'
- en: '| `httptrace` | Yes | No |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `httptrace` | 是 | 否 |'
- en: '| `info` | Yes | Yes |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `info` | 是 | 是 |'
- en: '| `jolokia` | N/A | No |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `jolokia` | N/A | 否 |'
- en: '| `logfile` | N/A | No |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `logfile` | N/A | 否 |'
- en: '| `loggers` | Yes | No |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `loggers` | 是 | 否 |'
- en: '| `liquibase` | Yes | No |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `liquibase` | 是 | 否 |'
- en: '| `metrics` | Yes | No |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `metrics` | 是 | 否 |'
- en: '| `mappings` | Yes | No |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `mappings` | 是 | 否 |'
- en: '| `prometheus` | N/A | No |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `prometheus` | N/A | 否 |'
- en: '| `scheduledtasks` | Yes | No |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `scheduledtasks` | 是 | 否 |'
- en: '| `sessions` | Yes | No |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `sessions` | 是 | 否 |'
- en: '| `shutdown` | Yes | No |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `shutdown` | 是 | 否 |'
- en: '| `threaddump` | Yes | No |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `threaddump` | 是 | 否 |'
- en: Why does Spring Boot not expose all the endpoints over HTTP by default? The
    reason is that the endpoints may expose sensitive information. So, a careful consideration
    should be done in exposing them.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot为什么不默认在HTTP上暴露所有端点？原因是端点可能暴露敏感信息。因此，在暴露它们时应该仔细考虑。
- en: 'The following properties can be used to change or override the default exposure
    behavior of the endpoints:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性可用于更改或覆盖端点的默认暴露行为：
- en: '`management.endpoints.jmx.exposure.exclude`: The endpoint IDs specified in
    a comma-separated list are excluded from default exposure over the JMX connection.
    By default, none of the default endpoints are excluded.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`management.endpoints.jmx.exposure.exclude`: 以逗号分隔的端点ID从默认的JMX连接暴露中排除。默认情况下，没有一个默认端点被排除。'
- en: '`management.endpoints.jmx.exposure.include`: The endpoint IDs specified in
    a comma-separated list are included along with the default exposure over the JMX
    connection. The property can be used to expose those endpoints that are not included
    in the default list of endpoints. The default value for the property is `*`,which
    indicates that all of the endpoints are exposed.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`management.endpoints.jmx.exposure.include`: 以逗号分隔的端点ID与默认的JMX连接暴露一起包括。该属性可用于暴露那些未包含在默认端点列表中的端点。该属性的默认值是`*`，表示所有端点都被暴露。'
- en: '`management.endpoints.web.exposure.exclude`: The endpoint IDs specified by
    a comma-separated list are excluded from being exposed over HTTP. Though no default
    value exists, only `info` and `health` endpoints are exposed. The rest of the
    endpoints are implicitly excluded for HTTP.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`management.endpoints.web.exposure.exclude`: 以逗号分隔的端点ID从HTTP暴露中排除。虽然没有默认值，但只有`info`和`health`端点被暴露。其余端点对于HTTP隐式排除。'
- en: '`management.endpoints.web.exposure.include`: The endpoint IDs specified in
    a comma-separated list are included along with the default exposure over HTTP.
    The property can be used to expose those endpoints that are not included in the
    default list of endpoints. The default value for the property is `info`, `health`.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`management.endpoints.web.exposure.include`: 以逗号分隔的端点ID包括在默认的HTTP暴露中。该属性可用于暴露那些未包含在默认端点列表中的端点。该属性的默认值是`info`，`health`。'
- en: Health checks
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 健康检查
- en: One of the extremely critical aspects of ensuring the high performance of the
    application is to monitor the health of the application. A production-grade application
    is always under observation of a specialized monitoring and alerting software.
    Threshold values are configured for every parameter, whether it be average response
    time, disk utilization, or CPU utilization. Once the parameter value exceeds the
    specified threshold value, the monitoring software signals an alert via email
    or notifications. Development and operations teams take the necessary actions
    to ensure the application is back to its normal state.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 确保应用程序高性能的一个极其关键的方面是监控应用程序的健康状况。生产级应用程序始终受到专门监控和警报软件的监视。为每个参数配置了阈值，无论是平均响应时间、磁盘利用率还是CPU利用率。一旦参数值超过指定的阈值，监控软件通过电子邮件或通知发出警报。开发和运维团队采取必要的措施，确保应用程序恢复到正常状态。
- en: For the Spring Boot application, we can collect health information by navigating
    to the `/actuator/health` URL. The `health` endpoint is enabled by default. For
    the application deployed in the production environment, health information gathered
    using the `health` endpoint can be sent to a monitoring software for alerting
    purposes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Spring Boot应用程序，我们可以通过导航到`/actuator/health` URL来收集健康信息。`health`端点默认启用。对于部署在生产环境中的应用程序，使用`health`端点收集的健康信息可以发送到监控软件进行警报目的。
- en: 'The information presented by the `health` endpoint depends on the `management.endpoint.health.show-details` property.
    The following is the list of supported values for the property:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`health`端点呈现的信息取决于`management.endpoint.health.show-details`属性。以下是该属性支持的值列表：'
- en: '`always`: It indicates that all the information should be shown to all users.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`always`：表示所有信息都应显示给所有用户。'
- en: '`never`: It indicates that the details should never be shown.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`never`：表示永远不显示详细信息。'
- en: '`when-authorized`: This indicates that the details are shown to users with
    authorized roles only. The authorized roles can be configured using the `management.endpoint.health.roles`
    property.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`when-authorized`：表示只有授权角色的用户才能查看详细信息。授权角色可以使用`management.endpoint.health.roles`属性进行配置。'
- en: The default value for the `show-details` property is `never`. Also, the user
    can be considered authorized when it has one or more of the endpoint's authorized
    roles. By default, none of the roles are configured as authorized. So, all authenticated
    users are considered authorized users.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`show-details`属性的默认值为`never`。此外，当用户具有一个或多个端点的授权角色时，用户可以被视为已授权。默认情况下，没有角色被配置为已授权。因此，所有经过身份验证的用户都被视为已授权用户。'
- en: '`HealthIndicator` is one of the important interfaces that provides an indication
    of application health on different aspects, such as disk space, data source, or
    JMS. The `health` endpoint collects health information from all the `HealthIndicator`
    implementation beans defined in the application''s context. Spring Boot comes
    with an auto-configured set of health indicators. The framework is flexible enough
    to support custom health indicator implementations. The final health status of
    the application is derived by `HealthAggregator`. The health aggregator sorts
    statuses from all the health indicators as per the order of statuses that have
    been defined.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`HealthIndicator`是一个重要的接口，它提供了关于应用程序健康状况的指示，例如磁盘空间、数据源或JMS。`health`端点从应用程序上下文中定义的所有`HealthIndicator`实现bean收集健康信息。Spring
    Boot带有一组自动配置的健康指标。该框架足够灵活，可以支持自定义健康指标的实现。应用程序的最终健康状态由`HealthAggregator`派生。健康聚合器根据已定义的状态顺序对所有健康指标的状态进行排序。'
- en: 'Here is a list of auto-configured `HealthIndicators` by Spring Boot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Spring Boot自动配置的`HealthIndicators`列表：
- en: '`CassandraHealthIndicator`**:** Checks whether the Cassandra database is up'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CassandraHealthIndicator`：检查Cassandra数据库是否正常运行'
- en: '`DiskSpaceHealthIndicator`: Checks whether enough disk space is available'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DiskSpaceHealthIndicator`：检查是否有足够的磁盘空间可用'
- en: '`DataSourceHealthIndicator`: Checks whether the connection with the data source
    can be obtained or not'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataSourceHealthIndicator`：检查是否可以与数据源建立连接'
- en: '`ElasticSearchHealthIndicator`: Checks whether the elasticsearch cluster is
    up'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ElasticSearchHealthIndicator`：检查elasticsearch集群是否正常'
- en: '`InfluxDbHealthIndicator`: Checks whether the Influx server is up and running'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InfluxDbHealthIndicator`：检查Influx服务器是否正常运行'
- en: '`JmsHealthIndicator`: Checks whether the JMS broker is up and running'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JmsHealthIndicator`：检查JMS代理是否正常运行'
- en: '`MailHealthIndicator`: Checks whether the mail server is up and running'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MailHealthIndicator`：检查邮件服务器是否正常运行'
- en: '`MongoHealthIndicator`: Checks whether the Mongo database is up and running'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MongoHealthIndicator`：检查Mongo数据库是否正常运行'
- en: '`Neo4jHealthIndicator`: Checks whether the Neo4j server is up and running'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Neo4jHealthIndicator`：检查Neo4j服务器是否正常运行'
- en: '`RabbitHealthIndicator`: Checks whether the Rabbit server is up and running'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RabbitHealthIndicator`：检查Rabbit服务器是否正常运行'
- en: '`RedisHealthIndicator`: Checks whether the Redis server is up and running'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RedisHealthIndicator`：检查Redis服务器是否正常运行'
- en: '`SolrHealthIndicator`: Checks whether the Solr server is up and running'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SolrHealthIndicator`：检查Solr服务器是否正常运行'
- en: These health indicators are auto-configured based on the appropriate Spring
    Boot starter configuration.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这些健康指标是基于适当的Spring Boot starter配置进行自动配置的。
- en: 'The following is the example disk space health check output when we navigate
    to the `http://localhost:8080/actuator/health` URL:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导航到`http://localhost:8080/actuator/health` URL时，以下是示例磁盘空间健康检查的输出：
- en: '[PRE11]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can add additional customized health indicators to include the information
    we want to see. The customized health indicator will be displayed in the result
    of the `health` endpoint. It is super easy to create and register a custom health
    indicator.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加额外的自定义健康指标来包含我们想要查看的信息。自定义健康指标将显示在`health`端点的结果中。创建和注册自定义健康指标非常容易。
- en: 'The following is an example of a custom health indicator:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是自定义健康指标的示例：
- en: '[PRE12]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have to create a Java class that extends from `AbstractHealthIndicator`.
    In the custom health indicator class, we have to implement the `doHealthCheck()`
    method. The method expects a `Health.Builder` object to be passed. If we find
    that the health parameters OK, then the `builder.up()` method should be called,
    otherwise the `builder.down()` method should be called.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建一个Java类，该类继承自`AbstractHealthIndicator`。在自定义健康指标类中，我们必须实现`doHealthCheck()`方法。该方法期望传递一个`Health.Builder`对象。如果我们发现健康参数正常，则应调用`builder.up()`方法，否则应调用`builder.down()`方法。
- en: 'The following is the output rendered on the page when the `/actuator/health`
    URL is hit:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问`/actuator/health` URL时，以下是页面上呈现的输出：
- en: '[PRE13]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The custom health indicator is not required to be registered. The `@Component`
    annotation is scanned and the bean is registered with the `ApplicationContext`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要注册自定义健康指标。`@Component`注解会被扫描，并且该bean会被注册到`ApplicationContext`中。
- en: So far, we have learned, in detail, about Spring Boot with examples. The following
    sections will focus on the use of Spring Boot with microservices.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经详细学习了Spring Boot并举例说明。接下来的部分将专注于使用Spring Boot与微服务。
- en: Microservices using Spring Boot
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot的微服务
- en: We have a hefty amount of information about Spring Boot now from the previous
    sections. With the information that we have so far, we are now in a position to
    build microservices using Spring Boot. Before jumping into the implementation
    of our first microservice with Spring Boot, to proceed with implementing the first
    microservice, it is assumed that you know basic information about microservices,
    including the issues with monoliths, what microservices are, and the features
    microservices bring to the table.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经从前面的部分中获得了大量关于Spring Boot的信息。有了我们到目前为止所拥有的信息，我们现在有能力使用Spring Boot构建微服务。在着手实现我们的第一个Spring
    Boot微服务之前，假设您已经了解了关于微服务的基本信息，包括单体应用程序的问题、微服务的定义以及微服务带来的特性。
- en: First microservice with Spring Boot
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot的第一个微服务
- en: 'The following are the details of the microservice that we are going to develop:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将要开发的微服务的详细信息：
- en: We will implement an accounting service as a microservice.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将实现一个作为微服务的会计服务。
- en: The microservice will be REST-based. It is an architectural pattern for developing
    web services. It focuses on identifying each resource in the application with
    a unique URL.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个微服务将是基于REST的。这是一种用于开发Web服务的架构模式。它专注于使用唯一的URL标识应用程序中的每个资源。
- en: We will identify the Spring Boot starter project that we will need and generate
    the Maven `pom.xml` file accordingly.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将确定我们需要的Spring Boot启动器项目，并相应地生成Maven的`pom.xml`文件。
- en: We will implement an `Account` class with a few basic properties.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将实现一个带有一些基本属性的`Account`类。
- en: We will implement `AccountRepository` with the find-by-name example method.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用find-by-name示例方法实现`AccountRepository`。
- en: We will implement the controller class, which has a repository auto-wired. The
    controller exposes the endpoints.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将实现控制器类，其中有一个自动装配的存储库。控制器公开了端点。
- en: We will also implement a way to feed the test data into the database.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将实现一种将测试数据输入到数据库的方法。
- en: Let's start!
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: We will start implementation by generating the Spring Boot application using
    Spring Initializr. We have to decide on the Spring Boot starter projects to be
    used. We want to develop a JPA-based web application. For the purpose of storing
    `Account` data in a database, we can use either MySQL or H2\. Usually, H2 is a
    more convenient option as we don't need to set up anything. We will use MySQL
    for the examples in this chapter.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用Spring Initializr生成Spring Boot应用程序来开始实现。我们必须决定要使用的Spring Boot启动项目。我们想要开发一个基于JPA的Web应用程序。为了在数据库中存储`Account`数据，我们可以使用MySQL或H2。通常，H2是一个更方便的选择，因为我们不需要设置任何东西。在本章的示例中，我们将使用MySQL。
- en: 'The following are the starter projects to be selected:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要选择的启动项目：
- en: Web
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web
- en: JPA
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA
- en: MySQL or H2
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL或H2
- en: REST repositories
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST存储库
- en: We can also add the Spring Boot Actuator for application monitoring purpose
    but is not mandatory for the example.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加Spring Boot Actuator进行应用程序监控，但这对于示例来说并不是必需的。
- en: 'The following is the `pom.xml` file that is generated by Spring Initializr:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Spring Initializr生成的`pom.xml`文件：
- en: '[PRE14]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Another piece of code that is generated by Spring Initializr is the Spring
    Boot application:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Initializr生成的另一段代码是Spring Boot应用程序：
- en: '[PRE15]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At this point, we should have our project imported in our IDE of preference.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该已经将我们的项目导入到我们首选的IDE中。
- en: People, get ready for the hands-on development now. We will start by creating
    the `Account` JPA entity class. We will annotate the `Account` class with `@Entity`
    and `@Table` annotations. The `@Table` annotation allows us to supply the desired
    table name. We have one more column, which is `accountName`. It stores and represents
    the name of the `Account`. Basically, the `Account` entity represents the account
    type in the real world. One other important attribute that we have added is `id`.
    `id` represents a unique, autogenerated numeric identifier. We can identify each
    account uniquely using the identifier. The `@GeneratedValue` annotation lets us
    supply the way `id` values will be generated in the database. Keeping it to `AUTO`
    defines that it depends on the database to automatically generate `id` values.
    The `@Column` annotation allows us to match the `accountName` attribute to the `ACCT_NAME`
    database field.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 人们，准备好进行实际开发了。我们将从创建`Account` JPA实体类开始。我们将使用`@Entity`和`@Table`注解来注释`Account`类。`@Table`注解允许我们提供所需的表名。我们还有一个列，即`accountName`。它存储并表示`Account`的名称。基本上，`Account`实体代表了现实世界中的账户类型。我们添加的另一个重要属性是`id`。`id`代表一个唯一的、自动生成的数字标识符。我们可以使用这个标识符唯一地标识每个账户。`@GeneratedValue`注解允许我们提供在数据库中生成`id`值的方式。将其保持为`AUTO`定义了它取决于数据库自动生成`id`值。`@Column`注解允许我们将`accountName`属性与`ACCT_NAME`数据库字段匹配。
- en: 'The following is the code for the `Account` entity:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Account`实体的代码：
- en: '[PRE16]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Spring Data provides a convenient interface to perform common database operations.
    The interface is called `CrudRepository`. It supports basic `Create`, `Read`,
    `Update`, and `Delete` operations for a specific type. The interface is inherited
    by the `JpaRepository` interface, which is a JPA-specific definition of the `CrudRepository` interface.
    `JpaRepository` also inherits sorting and paging capabilities from the `PagingAndSortingRepository`
    interface.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data提供了一个方便的接口来执行常见的数据库操作。这个接口叫做`CrudRepository`。它支持特定类型的基本`Create`、`Read`、`Update`和`Delete`操作。这个接口是由`JpaRepository`接口继承的，它是`CrudRepository`接口的JPA特定定义。`JpaRepository`还从`PagingAndSortingRepository`接口继承了排序和分页功能。
- en: 'With this background, the next task for us is to build an interface to interact
    with the `accounts` database table. The following is the code for the `AccountsRepository`
    class:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个背景，我们接下来的任务是构建一个与`accounts`数据库表交互的接口。以下是`AccountsRepository`类的代码：
- en: '[PRE17]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the `AccountsRepository` interface, we have defined a method that is intended
    to find the `Account` entries from the database based on the `accountName`. The
    `CrudRepository` interface is very powerful. It will generate the implementation
    for the `findByAccountName` method. It can generate the implementation for all
    such query methods that follow the convention, such as `findBy{model-attribute-name}`.
    It also returns the objects of the `Account` type.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AccountsRepository`接口中，我们定义了一个方法，用于根据`accountName`从数据库中查找`Account`条目。`CrudRepository`接口非常强大。它将为`findByAccountName`方法生成实现。它可以为所有遵循约定的查询方法生成实现，例如`findBy{model-attribute-name}`。它还返回`Account`类型的对象。
- en: Also, you might have noticed that the use of `@RepositoryRestResource` is provided
    by the Spring Data REST module. It briefly exposes the repository methods for
    data manipulation as REST endpoints without any further configuration or development.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可能已经注意到，`@RepositoryRestResource`的使用是由Spring Data REST模块提供的。它简要地将存储库方法暴露为REST端点，无需进一步配置或开发。
- en: 'Now, we have the entity and repository in place. Next is the controller part
    of a web application. We have to create a controller class. The following is the
    code for the `AccountsController` class:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了实体和存储库。接下来是Web应用程序的控制器部分。我们需要创建一个控制器类。以下是`AccountsController`类的代码：
- en: '[PRE18]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Three notable annotations from the `AccountsController` code are:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccountsController`代码中的三个值得注意的注解是：'
- en: '`@RestController`: This annotation is a combination of the `@Controller` and
    `@ResponseBody` annotations. If we used the `@RestController` annotation, we don''t
    need to define these two other annotations. The `@RestController` annotation indicates
    that the class should be treated as a controller and every endpoint method will
    respond with content as a response body.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '@RestController：这个注解是`@Controller`和`@ResponseBody`注解的组合。如果我们使用`@RestController`注解，就不需要定义这两个其他的注解。`@RestController`注解表示该类应该被视为一个控制器，每个端点方法都会作为响应体返回内容。'
- en: '`@GetMapping`**:** This annotation is used to define a REST `GET` endpoint
    mapping.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@GetMapping`：这个注解用于定义REST `GET`端点映射。'
- en: '`@PathVariable`**:** This annotation is used to fetch the values supplied in
    the URL path itself.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PathVariable`：这个注解用于获取URL路径中提供的值。'
- en: Two things are left. One is the database and other important properties, while
    the other one is a way to populate the initial data in the `accounts` table.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两件事情。一是数据库和其他重要属性，另一个是在`accounts`表中填充初始数据的方式。
- en: 'The following is the `application.properties` file that manages the configuration
    part of the application:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是管理应用程序配置部分的`application.properties`文件：
- en: '[PRE19]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: From the list of properties, the `spring.jpa.hibernate.ddl-auto` property determines
    the initial generation of the database based on the database configurations provided.
    It determines whether the Spring Boot application should create the database schema
    up on application startup. `none`, `validate`, `update`, `create`, and `create-drop`
    are the options available for the property.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 从属性列表中，`spring.jpa.hibernate.ddl-auto`属性确定了基于提供的数据库配置的数据库的初始生成。它确定了Spring Boot应用程序是否应该在应用程序启动时创建数据库模式。`none`、`validate`、`update`、`create`和`create-drop`是该属性的可用选项。
- en: 'While booting up the application, we may also receive the following error:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动应用程序时，我们可能还会收到以下错误：
- en: '[PRE20]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We can use `useSSL=true` in the database connection URL to overcome this warning,
    as you can see in the properties in the preceding code example.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在数据库连接URL中使用`useSSL=true`来解决这个警告，就像你在前面的代码示例中看到的那样。
- en: Loading sample data into the database
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数据库加载示例数据
- en: At this point in time, it is necessary to have some initial data in the `accounts`
    table in the database. It will help us test the account's microservice that we
    have developed. The Spring modules provide multiple ways to achieve this.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，有必要在数据库的`accounts`表中有一些初始数据。这将帮助我们测试我们开发的账户微服务。Spring模块提供了多种方法来实现这一点。
- en: The JPA way of initial data loading
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JPA的初始数据加载方式
- en: 'Spring Data JPA provides a way to execute database manipulation commands on
    the application startup. As the schema will be generated in the database from
    the JPA entity configuration and `ddl-auto` property value, we have to take care
    to insert the account records in the `accounts` table only. The following are
    the steps to accomplish this:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA提供了一种在应用程序启动时执行数据库操作命令的方式。由于数据库模式将根据JPA实体配置和`ddl-auto`属性值在数据库中生成，我们必须注意只在`accounts`表中插入账户记录。以下是实现这一点的步骤：
- en: 'Add the following property to the `application.properties` file:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`application.properties`文件中添加以下属性：
- en: '[PRE21]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `data.sql` file with `INSERT` queries in the `src/main/resources`
    folder of the project:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的`src/main/resources`文件夹中创建一个`data.sql`文件，其中包含`INSERT`查询：
- en: '[PRE22]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That's it! When we start the application, Spring will automatically insert the
    data into the `accounts` table in the database.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！当我们启动应用程序时，Spring会自动将数据插入到数据库的`accounts`表中。
- en: The ApplicationRunner way of initial data loading
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ApplicationRunner的初始数据加载方式
- en: We can also accomplish this using the `ApplicationRunner` interface. This interface
    is responsible for executing the code defined in the `run` method on application
    startup.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`ApplicationRunner`接口来实现这一点。这个接口负责在应用启动时执行`run`方法中定义的代码。
- en: 'The following is the code for the `ApplicationRunner` interface''s implementation:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`ApplicationRunner`接口实现的代码：
- en: '[PRE23]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We have auto-wired the repository so that we can access the `AccountsRepository`
    methods for inserting `accounts` records into the database.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经自动装配了存储库，这样我们就可以访问`AccountsRepository`方法，将`accounts`记录插入到数据库中。
- en: Microservice client
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务客户端
- en: Now that we have the microservice in place, we have to look at how to consume
    it. The plan is to create another web application using Spring Initializr and
    use the appropriate tools to consume the accounting microservice.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了微服务，我们必须看看如何消费它。计划是使用Spring Initializr创建另一个Web应用程序，并使用适当的工具来消费会计微服务。
- en: 'The following is the POM file for the client application:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端应用程序的POM文件：
- en: '[PRE24]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding `pom.xml` file, we have imported Spring Cloud dependencies
    using the Maven dependency-management element. We have added the `openfeign` starter
    project as well. Feign is a client tool to consume web services and provides a
    REST client templating facility.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述的`pom.xml`文件中，我们使用Maven的dependency-management元素导入了Spring Cloud依赖项。我们还添加了`openfeign`
    starter项目。Feign是一个用于消费Web服务并提供REST客户端模板设施的客户端工具。
- en: 'The following is the code for the `main` class in our Spring Boot client application:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们Spring Boot客户端应用程序中`main`类的代码：
- en: '[PRE25]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We have defined the REST controller in the same Java file.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在同一个Java文件中定义了REST控制器。
- en: 'The following is the `application.properties` file that defines the microservices
    URL and defines the `server.port` for running the client application:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是定义微服务URL并定义运行客户端应用程序的`server.port`的`application.properties`文件：
- en: '[PRE26]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Microservices with Spring Cloud
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Cloud的微服务
- en: Spring Cloud provides a declarative approach to building cloud-native web applications.
    Cloud-native is an application development paradigm to encourage adoption of value-driven
    development best practices. Spring Cloud is built on top of Spring Boot. Spring
    Cloud provides a way for all components in a distributed system to have easy access
    to all features.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud提供了一种声明式的方法来构建云原生Web应用程序。云原生是一种应用程序开发范式，鼓励采用价值驱动的开发最佳实践。Spring Cloud是建立在Spring
    Boot之上的。Spring Cloud为分布式系统中的所有组件提供了易于访问所有功能的方式。
- en: 'Spring Cloud provides:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud提供：
- en: Git-managed versioning of centralized configuration data
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Git管理的集中式配置数据的版本控制
- en: Pairing with Netflix Eureka and Ribbon for application services to discover
    each other dynamically
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Netflix Eureka和Ribbon配对，以便应用程序服务动态发现彼此
- en: Pushing away load-balancing decisions from a dedicated proxy load balancer to
    client services
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将负载均衡决策从专用代理负载均衡器推送到客户端服务
- en: Externalized configurations is one of the major advantages of Spring Cloud.
    In the next section, we will develop an example to showcase the externalized configuration
    for the Spring Boot application.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 外部化配置是Spring Cloud的主要优势之一。在下一节中，我们将开发一个示例来展示Spring Boot应用程序的外部化配置。
- en: Spring microservice configuration example
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring微服务配置示例
- en: For the externalized configuration to work, we need to set up a centralized
    configuration server. The configuration server will store and provide configuration
    data for the registered Spring Boot applications. In this section, we will develop
    a configuration server, and the accounting service that we developed earlier will
    serve as the configuration client.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使外部化配置生效，我们需要设置一个集中式配置服务器。配置服务器将存储并提供注册的Spring Boot应用程序的配置数据。在本节中，我们将开发一个配置服务器，之前开发的会计服务将作为配置客户端。
- en: 'The following is the POM file for the Spring Boot config server:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Spring Boot配置服务器的POM文件：
- en: '[PRE27]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Two configurations should be noted from the preceding dependencies:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意前面的依赖项中的两个配置：
- en: '`spring-cloud-dependencies`**:** It provides a set of dependencies necessary
    for Spring Cloud projects'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud-dependencies`**：**它提供了Spring Cloud项目所需的一组依赖项'
- en: '`spring-cloud-config-server`**:** This is the Spring Cloud starter project
    for Spring Boot'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud-config-server`**：**这是Spring Boot的Spring Cloud starter项目'
- en: 'The following is the `application.properties` file:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`application.properties`文件：
- en: '[PRE28]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `spring.cloud.config.server.git.uri` property points to a Git-based directory
    where the configurations are stored. The versioning is maintained by Git itself.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring.cloud.config.server.git.uri`属性指向存储配置的基于Git的目录。版本控制由Git本身维护。'
- en: The `spring.profiles.active`denotes profiles to be used by applications. It
    is a common use case for development teams to have multiple environments in place.
    In order to have separate configurations for each environment, we can use this
    property.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring.profiles.active`表示应用程序要使用的配置文件。对于开发团队来说，拥有多个环境是一个常见的用例。为了为每个环境设置单独的配置，我们可以使用这个属性。'
- en: 'The `@EnableConfigServer` annotation is provided by the Spring Cloud starter
    project. It marks the class as the configuration server. The following is the
    code for the Spring Boot application `main` class:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableConfigServer`注解由Spring Cloud starter项目提供。它标记类为配置服务器。以下是Spring Boot应用程序`main`类的代码：'
- en: '[PRE29]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once this is done, the configuration server is ready to be run. In the Git
    repository, we have created an `accountingservice.properties` file with the following
    contents:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，配置服务器准备就绪。在Git存储库中，我们已经创建了一个名为`accountingservice.properties`的文件，内容如下：
- en: '[PRE30]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Once the application is started, we can navigate to `http://localhost:9000/accountingservice/default`.
    As we do not have profile-specific files for the `accountingservice` application
    in the configuration server, it picks up the default profile. The contents of
    the page are as shown here:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动后，我们可以导航到`http://localhost:9000/accountingservice/default`。由于配置服务器中没有`accountingservice`应用程序的特定配置文件，它会选择默认配置。页面的内容如下所示：
- en: '![](img/7edd193e-7ab4-4cc6-b503-8829d4ce7a94.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7edd193e-7ab4-4cc6-b503-8829d4ce7a94.png)'
- en: As we can see, the `server.port` property value is rendered on the page.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`server.port`属性值在页面上呈现。
- en: The next step is to build a client that utilizes the centralized configuration
    defined in the configuration server. We have to create a Spring Boot starter application
    with web dependency.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是构建一个客户端，利用配置服务器中定义的集中式配置。我们必须创建一个带有web依赖的Spring Boot starter应用程序。
- en: 'The following is the POM file for the configuration server client:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是配置服务器客户端的POM文件：
- en: '[PRE31]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As we can see in the preceding Maven file, we need to add the `spring-cloud-config-starter`
    project as the dependency. The project provides the necessary configuration for
    the application to be registered as a config server client.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的Maven文件中所看到的，我们需要将`spring-cloud-config-starter`项目添加为依赖项。该项目为应用程序注册为配置服务器客户端提供了必要的配置。
- en: 'The following is the `application.properties` file:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`application.properties`文件：
- en: '[PRE32]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For the application to be registered as a client to the configuration server,
    we have to enable management web endpoints. The server will be running at port
    `8888`, as per the configuration in the `application.properties` file.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将应用程序注册为配置服务器的客户端，我们必须启用管理Web端点。服务器将在端口`8888`上运行，根据`application.properties`文件中的配置。
- en: Spring Cloud operates on an additional context, known as the **bootstrap** context.
    The bootstrap context is the parent to the main `ApplicationContext`. The responsibility
    of the bootstrap context is to load configuration properties from external sources
    into local external configurations. It is advisable to have a separate properties
    file for the bootstrap context.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud在另一个上下文中运行，称为**bootstrap**上下文。引导上下文是主`ApplicationContext`的父级。引导上下文的责任是将外部配置属性从外部源加载到本地外部配置中。建议为引导上下文单独创建一个属性文件。
- en: 'The following are the properties from the `bootstrap.properties` file:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`bootstrap.properties`文件中的属性：
- en: '[PRE33]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We have defined the application name that matches the name of the configuration
    properties file stored in the Git directory on the configuration server. The `bootstrap.properties`
    file also defines the URL for the Spring Cloud configuration server.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了与配置属性文件在配置服务器的Git目录中存储的名称匹配的应用程序名称。`bootstrap.properties`文件还定义了Spring
    Cloud配置服务器的URL。
- en: 'This is all for the client to register with the Spring Cloud configuration
    server. The following log entries can be seen upon server startup:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是客户端注册到Spring Cloud配置服务器的全部内容。在服务器启动时可以看到以下日志条目：
- en: '[PRE34]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As you can see, though we have defined the server port for the client application
    to be `8888`, it fetches the `server.port` property from the configuration server
    and starts Tomcat on port `8101`. The following is what the page looks like when
    we render the `/accounts` URL:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，尽管我们已经为客户端应用程序定义了服务器端口为`8888`，但它从配置服务器获取`server.port`属性，并在端口`8101`上启动Tomcat。当我们渲染`/accounts`
    URL时，页面看起来像这样：
- en: '![](img/c969f12b-ed37-4680-9537-6167a2e1bb93.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c969f12b-ed37-4680-9537-6167a2e1bb93.png)'
- en: This section described step-by-step ways to create a simple configuration server
    and a client that uses the configuration server. In the section to follow, we
    will see a way to monitor Spring microservices.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 本节逐步介绍了创建简单配置服务器和使用配置服务器的客户端的方法。在接下来的部分中，我们将看到一种监视Spring微服务的方法。
- en: Monitoring microservices with Spring Boot admin
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot admin监视微服务
- en: Spring Boot admin is an application that facilitates monitoring and managing
    of Spring Boot applications. The latest version of the Spring Boot admin application
    is not yet compatible with Spring 2.0.0\. For the purpose of examples showcased
    in this section, we have used the Spring Boot 1.5.11 snapshot. The Spring Boot
    admin version is 1.5.4.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot admin是一个便于监视和管理Spring Boot应用程序的应用程序。Spring Boot admin应用程序的最新版本尚不兼容Spring
    2.0.0。在本节展示的示例中，我们使用了Spring Boot 1.5.11快照。Spring Boot admin版本为1.5.4。
- en: The Spring Boot client applications register themselves with the Spring Boot
    admin application via HTTP. It is also possible that admin applications discover
    client applications using the Spring Cloud Eureka discovery service. The Spring
    Boot admin user interface is built in AngularJS over Actuator endpoints.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot客户端应用程序通过HTTP向Spring Boot管理应用程序注册自己。管理应用程序还可以使用Spring Cloud Eureka发现服务发现客户端应用程序。Spring
    Boot管理用户界面是在AngularJS上构建的，覆盖了执行器端点。
- en: That should be enough for the introduction part as examples will provide more
    insight. Let's build the Spring Boot admin server first.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足够作为介绍部分，示例将提供更多见解。让我们首先构建Spring Boot管理服务器。
- en: '`spring-boot-admin-server` is the dependency for building the admin server
    application. The Spring Boot admin application can have multiple Spring Boot applications
    registered, so, it becomes necessary for the Spring Boot admin application to
    be secure. That is the reason we have added the Spring Security starter project
    dependency. We will incorporate basic authentication for the purpose of this application,
    but it is not a limitation. We can add advanced security mechanisms, such as OAuth,
    for securing applications. The following is the POM file for the Spring Boot admin
    server:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-boot-admin-server`是构建管理服务器应用程序的依赖项。Spring Boot管理应用程序可以注册多个Spring Boot应用程序，因此，Spring
    Boot管理应用程序必须是安全的。这就是我们添加Spring Security starter项目依赖项的原因。我们将为此应用程序添加基本身份验证，但这并不是限制。我们可以添加高级安全机制，如OAuth，以保护应用程序。以下是Spring
    Boot管理服务器的POM文件：'
- en: '[PRE35]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `application.properties` file is where we define the security credentials
    for accessing the admin application. The following is the contents of the `application.properties`
    file:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`application.properties`文件是我们定义访问管理应用程序的安全凭据的地方。以下是`application.properties`文件的内容：'
- en: '[PRE36]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`@EnableAdminServer` is provided by the Spring Boot admin server dependency.
    It indicates that the application works as a Spring Boot admin application. The
    following is the code for the Spring Boot application `main` class:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableAdminServer`由Spring Boot admin服务器依赖项提供。它表示应用程序作为Spring Boot admin应用程序运行。以下是Spring
    Boot应用程序`main`类的代码：'
- en: '[PRE37]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The next step is to build a sample application that will be registered with
    the Spring Boot admin application. The following is the POM file:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是构建一个样本应用程序，该应用程序将注册到Spring Boot管理应用程序。以下是POM文件：
- en: '[PRE38]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We have to define the following properties:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须定义以下属性：
- en: '`spring.boot.admin.url`: The URL points to the Spring Boot admin application.'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring.boot.admin.url`：该URL指向Spring Boot管理应用程序。'
- en: '`spring.boot.admin.username`: It is necessary for the admin client to access
    the admin application using security credentials. This property specifies the
    username for the admin application.'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring.boot.admin.username`：管理客户端需要使用安全凭据访问管理应用程序。此属性指定了管理应用程序的用户名。'
- en: '`spring.boot.admin.password`: This property specifies the password for the
    admin application.'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring.boot.admin.password`：此属性指定了管理应用程序的密码。'
- en: '`management.security.enabled`: This property denotes whether security is enabled
    for the client application or not.'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`management.security.enabled`：此属性表示客户端应用程序是否启用了安全性。'
- en: '`security.user.name`: This property defines the username for accessing the
    client application.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security.user.name`：此属性定义了访问客户端应用程序的用户名。'
- en: '`security.user.password`**:** This property specifies the password for accessing
    the client application.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security.user.password`：此属性指定了访问客户端应用程序的密码。'
- en: 'The following is the `application.properties` file:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`application.properties`文件：
- en: '[PRE39]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following is the code for the simple Spring Boot application class:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是简单Spring Boot应用程序类的代码：
- en: '[PRE40]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'It is also possible to add customization to default web security configurations
    provided by Spring Security. The following is an example that demonstrates allowing
    all requests for authorization:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以对Spring Security提供的默认Web安全配置进行自定义。以下是一个示例，演示了允许所有请求进行授权的情况：
- en: '[PRE41]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'At this point, we are ready to start both the Spring Boot admin and client
    applications. When we navigate to the Spring Boot admin application URL, the following
    screen is shown with a list of all the registered applications:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们准备启动Spring Boot管理和客户端应用程序。当我们导航到Spring Boot管理应用程序的URL时，将显示以下屏幕，其中列出了所有注册的应用程序：
- en: '![](img/ce6c6bfe-dda9-4ed2-bab8-e4df15e96c25.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce6c6bfe-dda9-4ed2-bab8-e4df15e96c25.png)'
- en: 'Clicking on the Details button on the right side of the application name will
    bring up an interface similar to the one shown here. The Details tab shows the
    health of the application, memory and JVM statistics, and garbage collector details:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 单击应用程序名称右侧的“详细信息”按钮将显示类似于此处所示的界面。详细信息选项卡显示应用程序的健康状况、内存和JVM统计信息以及垃圾收集器详细信息：
- en: '![](img/77063b97-a470-4573-9cf0-f7d38b61946d.png)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77063b97-a470-4573-9cf0-f7d38b61946d.png)'
- en: 'The Logging tab for the application details and displays a list of all the
    configured loggers. It is possible to change the log level. The following is the
    interface for Logging:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序详细信息的日志选项卡显示了所有配置的记录器列表。可以更改日志级别。以下是日志的界面：
- en: '![](img/d5126e2b-7604-4b50-beae-0e0ef839d2e9.png)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5126e2b-7604-4b50-beae-0e0ef839d2e9.png)'
- en: That's all for the Spring Boot admin application. It provides a production-grade
    interface and details for monitoring Spring Boot applications. The next section
    provides performance tuning for Spring Boot applications.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Spring Boot管理应用程序的全部内容。它提供了用于监视Spring Boot应用程序的生产级界面和详细信息。下一节将提供Spring Boot应用程序的性能调优。
- en: Spring Boot performance tuning
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot性能调优
- en: Spring Boot is a great tool to bootstrap and develop the Spring Framework-based
    application really quickly. The vanilla version of the Spring Boot application
    provides high performance without a doubt. But as the application starts to grow,
    its performance starts to be a bottleneck. This is a normal scenario for all web
    applications. The performance hit is observed when the different features are
    added and incoming requests are increasing day by day. We will learn the performance
    optimization techniques for Spring Boot applications in this section.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot是一个很好的工具，可以快速启动和开发基于Spring Framework的应用程序。毫无疑问，Spring Boot应用程序的原始版本提供了高性能。但随着应用程序的增长，其性能开始成为瓶颈。这对所有Web应用程序来说都是正常情况。当添加不同的功能并且每天增加的请求时，就会观察到性能下降。在本节中，我们将学习Spring
    Boot应用程序的性能优化技术。
- en: Undertow as an embedded server
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Undertow作为嵌入式服务器
- en: 'Spring Boot provides embedded servers that can run web applications in a JAR
    file. A few of the available embedded servers for use are Tomcat, Undertow, Webflux,
    and Jetty. It is advisable to have Undertow as the embedded server. Undertow provides
    more throughput and consumes less memory compared to Tomcat and Jetty. The following
    comparisons may provide some insight:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了可以在JAR文件中运行Web应用程序的嵌入式服务器。可用于使用的一些嵌入式服务器包括Tomcat、Undertow、Webflux和Jetty。建议使用Undertow作为嵌入式服务器。与Tomcat和Jetty相比，Undertow提供了更高的吞吐量并且消耗的内存更少。以下比较可能会提供一些见解：
- en: 'Throughput comparison:'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吞吐量比较：
- en: '|  **Server** | **Samples** | **Error % ** | **Throughput ** |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: 服务器 样本 错误% 吞吐量
- en: '| Tomcat | 3000 |        0 | 293.86 |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: Tomcat 3000 0 293.86
- en: '| Jetty | 3000 | 0 | 291.52 |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: Jetty 3000 0 291.52
- en: '| Undertow | 3000 | 0 | 295.68 |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: Undertow 3000 0 295.68
- en: 'Heap memory comparison:'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆内存比较：
- en: '|  **Server** | **Heap size** | **Used** | **Max** |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: 服务器 堆大小 已使用 最大
- en: '| Tomcat | 665.5 MB | 118.50 MB | 2 GB |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: Tomcat 665.5 MB 118.50 MB 2 GB
- en: '| Jetty | 599.5 MB | 297 MB | 2 GB |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: Jetty 599.5 MB 297 MB 2 GB
- en: '| Undertow | 602 MB | 109 MB | 2 GB |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: Undertow 602 MB 109 MB 2 GB
- en: 'Threads comparison:'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程比较：
- en: '| **Server** | **Live** | **Started** |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: 服务器 活动 已启动
- en: '| Tomcat | 17 | 22 |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: Tomcat 17 22
- en: '| Jetty | 19 | 22 |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: Jetty 19 22
- en: '| Undertow | 17 | 20 |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: Undertow 17 20
- en: From the preceding comparisons, Undertow looks like the obvious choice for an
    embedded server in Spring Boot applications.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的比较中，Undertow看起来是Spring Boot应用程序中嵌入式服务器的明显选择。
- en: Overhead with the @SpringBootApplication annotation
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用@SpringBootApplication注解的开销
- en: The `@SpringBootApplication` annotation is a provision for the developers who
    used to annotate Spring classes with `@ComponentScan`, `@EnableAutoConfiguration`,
    and `@Configuration`. So, the `@SpringBootApplication` annotation is equivalent
    to using three annotations with default configurations. The implicit `@ComponentScan`
    annotation scans the Java classes defined in the base package (package for the
    Spring Boot application main class) and all subpackages. This slows down the application
    startup when the application has grown significantly in size.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SpringBootApplication`注解是为那些习惯于使用`@ComponentScan`、`@EnableAutoConfiguration`和`@Configuration`注解Spring类的开发人员提供的。因此，`@SpringBootApplication`注解相当于使用三个带有默认配置的注解。隐式的`@ComponentScan`注解扫描在基本包（Spring
    Boot应用程序主类的包）和所有子包中定义的Java类。当应用程序在规模上显著增长时，这会减慢应用程序的启动速度。'
- en: To overcome this, we can replace the `@SpringBootApplication` annotation with
    individual annotations where we provide package paths to be scanned with `@ComponentScan`.
    We can also consider using the `@Import` annotation to import only the required
    components, beans, or configurations.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这一点，我们可以用单独的注解替换`@SpringBootApplication`注解，其中我们提供要与`@ComponentScan`一起扫描的包路径。我们还可以考虑使用`@Import`注解来仅导入所需的组件、bean或配置。
- en: Summary
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter started with insightful details on Spring Boot, Spring Cloud, microservices,
    and all of these together. We covered the details of Spring Initializr, Spring
    Boot starter projects, and learned how to create our first Spring Boot application.
    Then, we learned about the Spring Boot Actuator and the production-grade features
    provided by the Actuator. The details on the application health checks and endpoints
    are important for production-ready applications.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以对Spring Boot、Spring Cloud、微服务以及它们的综合详细信息开始。我们涵盖了Spring Initializr的细节，Spring
    Boot starter项目，并学习了如何创建我们的第一个Spring Boot应用程序。然后，我们了解了Spring Boot执行器和执行器提供的生产级功能。应用程序健康检查和端点的细节对于生产就绪的应用程序非常重要。
- en: Later in the chapter, we migrated to the world of microservices. We learned
    how Spring Boot can leverage features for the benefit of building microservices.
    We developed a microservice with Spring Boot and Spring Cloud with support for
    externalized configurations. We also looked at the integration of the Spring Boot
    admin for monitoring Spring Boot applications. Last but not least, we learned
    a few techniques to improve the performance of Spring Boot applications. Pretty
    huge stuff, isn't it?
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们迁移到了微服务的世界。我们学习了Spring Boot如何利用功能来构建微服务。我们使用Spring Boot和Spring Cloud开发了一个支持外部化配置的微服务。我们还研究了Spring
    Boot管理器集成，用于监控Spring Boot应用程序。最后但同样重要的是，我们学习了一些提高Spring Boot应用程序性能的技术。相当庞大的内容，不是吗？
- en: At this point, you have a very good understanding of performance assessment
    and performance tuning for Spring and, in essence, any Java-based web application.
    This is all for the scope of this book. A step forward, you can learn the JVM
    class-loading mechanism, Spring Batch framework, design patterns for microservices,
    microservices deployment, and **Infrastructure as a Service** (**IaaS**). We hope
    you will find these helpful.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您对Spring和基本上任何基于Java的Web应用程序的性能评估和性能调优有很好的理解。这就是本书的范围。在向前迈进一步时，您可以学习JVM类加载机制、Spring
    Batch框架、微服务设计模式、微服务部署和基础设施即服务（IaaS）。我们希望您会发现这些内容有帮助。
