- en: Journey to the Spring World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 春之之旅
- en: Spring is an open source modular framework for the JVM platform. A framework
    is a collection of libraries whose primary goal is to address common software
    development problems. The framework should solve these problems in a generic form.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 是 JVM 平台的开源模块化框架。框架是一组库的集合，其主要目标是解决常见的软件开发问题。框架应以通用形式解决这些问题。
- en: Rod Johnson created the Spring Framework in 2002 together with his book publication,
    which was called *Expert One-on-One J2EE Design and Development.* The idea behind
    the creation of the framework was to tackle the complexities of Java Enterprise
    Edition.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Rod Johnson 于 2002 年与他的书籍出版一起创建了 Spring 框架，该书籍被称为《专家一对一 J2EE 设计与开发》。该框架背后的想法是解决
    Java 企业版的复杂性。
- en: At that time, this kind of solution-focused a lot on the details of the infrastructure,
    and a developer using the solution would spend a lot of time writing code to solve
    infrastructural problems. Since its creation, one of Rod Johnson's primary concerns
    has been to increase developer productivity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，这种以解决方案为导向的方法非常关注基础设施的细节，使用该解决方案的开发者会花费大量时间编写代码来解决基础设施问题。自从其创建以来，Rod Johnson
    的主要关注点之一就是提高开发者的生产力。
- en: The framework was first seen as a lightweight container for Java Runtime Environment,
    and it became popular in the community, especially because of the dependency injection
    feature. The framework made dependency injection incredibly easy. Developers hadn't
    seen such a feature before, and as a consequence, people the world over adopted
    the project. Year by year, its popularity within the software development world has
    been increasing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架最初被视为 Java 运行时环境的轻量级容器，并在社区中变得流行，尤其是在依赖注入功能方面。该框架使依赖注入变得极其简单。开发者以前从未见过这样的功能，因此，全世界的人们都采用了这个项目。年复一年，它在软件开发世界中的知名度一直在增加。
- en: In the earliest versions, the framework had to work with the XML file to configure
    the container. At the time, this was so much better than J2EE applications, where
    it was necessary to create many `Ant` files to create the boilerplate classes
    and interfaces.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期版本中，该框架必须与 XML 文件一起工作以配置容器。当时，这比 J2EE 应用程序好得多，在 J2EE 应用程序中，有必要创建许多 `Ant`
    文件来创建样板类和接口。
- en: The framework was always seen as an advanced technology for the Java platform,
    but in 2014, the Spring team launched the Spring Boot platform. This platform
    was incredibly successful in the Java Enterprise ecosystem, and it changed the
    way in which developers built Java Enterprise applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架一直被视为 Java 平台的高级技术，但在 2014 年，Spring 团队推出了 Spring Boot 平台。这个平台在 Java 企业生态系统中取得了巨大成功，并改变了开发者构建
    Java 企业应用程序的方式。
- en: Today, Spring is the *de facto* framework for Java development, and companies
    around the world use it in their systems. The community is vibrant and contributes
    to development in different ways, such as opening issues, adding the code, and
    discussing the framework in the most important Java conferences around the world.
    Let's look at and play with the famous framework for Java developers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Spring 是 Java 开发的*事实上的*框架，全球各地的公司都在其系统中使用它。社区充满活力，并以不同的方式为开发做出贡献，例如在世界上最重要的
    Java 大会上提出问题、添加代码和讨论框架。让我们来看看并玩转这个著名的 Java 开发者框架。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Main modules of the Spring Framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 框架的主要模块
- en: Spring annotations for each module
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个模块的 Spring 注解
- en: Setting up the development environment
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Docker and Docker commands
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 和 Docker 命令
- en: Spring modularity
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 模块化
- en: Since its foundation, the framework has had a particular focus on modularity.
    It is an important framework characteristic because it makes the framework an
    excellent option for different architectural styles and different parts of applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自从成立以来，该框架就特别关注模块化。这是一个重要的框架特性，因为它使框架成为不同架构风格和应用程序不同部分的绝佳选择。
- en: It means the framework is not an opinionated, full-stack framework that dictates
    the rules to make everything work. We can use the framework as we need and integrate
    it with a wide range of specification and third-party libraries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着该框架不是一个具有偏见的全栈框架，它规定了使一切工作的规则。我们可以根据需要使用该框架，并将其与广泛的规范和第三方库集成。
- en: For example, for portal web applications, the Spring MVC supports features such
    as template engines and REST endpoints and integrates them with the popular JavaScript
    framework, AngularJS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于门户Web应用程序，Spring MVC支持模板引擎和REST端点，并将它们与流行的JavaScript框架AngularJS集成。
- en: Also, if the application needs support for a distributed system, the framework
    can supply an amazing module called Spring Cloud, which has some essential features
    for distributed environments, such as service registration and discovery, a circuit
    breaker, intelligent routing, and client-side load balancing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果应用程序需要分布式系统的支持，框架可以提供名为Spring Cloud的惊人模块，该模块为分布式环境提供了一些基本功能，例如服务注册和发现、断路器、智能路由和客户端负载均衡。
- en: Spring makes the development applications for Java Runtime easy with different
    languages, such as Java, Kotlin, and Groovy (with which you can choose the flavor
    and make the development task fun).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Spring通过不同的语言，如Java、Kotlin和Groovy（您可以选择风味并使开发任务变得有趣）使Java运行时应用程序的开发变得容易。
- en: 'It is divided into various modules. The main modules are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它被分为各种模块。主要模块如下：
- en: Spring Core
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 核心框架
- en: Spring Data
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 数据
- en: Spring Security
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 安全
- en: Spring Cloud
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud
- en: Spring Web-MVC
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Web-MVC
- en: In this book, we will cover the most common solutions involved in Java Enterprise
    applications, including the awesome Spring Cloud project. Also, we can find some
    interesting projects such as Spring Batch and Spring Integration, but these projects
    are for specific needs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将涵盖Java企业应用程序中最常见的解决方案，包括令人惊叹的Spring Cloud项目。我们还可以找到一些有趣的项目，如Spring
    Batch和Spring Integration，但这些项目针对特定需求。
- en: Spring Core Framework
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 核心框架
- en: This module is the base of the framework and contains the essential support
    for dependency injection, web features supported by Spring **MVC** (**model-view-controller**)
    and the pretty new WebFlux frameworks, and aspect-oriented programming. Also,
    this module supports the foundation for JDBC, JMS, JPA and a declarative way to
    manage transactions. We will explore it and understand the main projects of this
    module. So let's do it!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块是框架的基础，包含对依赖注入、Spring **MVC**（**模型-视图-控制器**）支持的Web功能以及相对较新的WebFlux框架和面向方面的编程的基本支持。此外，此模块支持JDBC、JMS、JPA和声明式事务管理的基础。我们将探索它并了解此模块的主要项目。所以，让我们开始吧！
- en: Core container
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心容器
- en: The core container is the basis of the whole Spring ecosystem and comprehends
    four components—core, beans, context, and expression language.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 核心容器是整个Spring生态系统的基石，包括四个组件——核心、bean、上下文和表达式语言。
- en: Core and beans are responsible for providing the fundamentals of the framework
    and dependency injection. These modules are responsible for managing the IoC container,
    and the principal functions are the instantiation, configuration, and destruction
    of the object residents in the Spring container.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 核心和bean负责提供框架的基本功能和依赖注入。这些模块负责管理IoC容器，主要功能包括在Spring容器中对象的实例化、配置和销毁。
- en: Spring contexts are also called Spring IoC containers, which are responsible
    for instantiating, configuring, and assembling beans by reading configuration
    metadata from XML, Java annotations, and/or Java code in the configuration files.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring上下文也称为Spring IoC容器，负责通过从XML、Java注解和/或配置文件中的Java代码读取配置元数据来实例化、配置和组装bean。
- en: There are two critical interfaces inside these modules—`BeanFactory` and `ApplicationContext`.
    The `BeanFactory` takes care of the bean lifecycle, instantiating, configuring,
    managing, and destroying, and the `ApplicationContext` helps developers to work
    with files resources in a generic way, enable to publish events to registered
    listeners. Also, the `ApplicationContext` supports internationalization and has
    the ability to work with messages in different Locales.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块内部有两个关键接口——`BeanFactory`和`ApplicationContext`。`BeanFactory`负责管理bean的生命周期，包括实例化、配置、管理和销毁，而`ApplicationContext`帮助开发者以通用方式处理文件资源，能够向注册的监听器发布事件。此外，`ApplicationContext`支持国际化，并能够处理不同Locale的消息。
- en: These modules help the context component to provide a way to access the objects
    inside the container. The context component has the `ApplicationContext` interface
    with the essential class for the container.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块帮助上下文组件提供一种访问容器内对象的方式。上下文组件具有`ApplicationContext`接口，这是容器的基本类。
- en: Some common annotations are `@Service`, `@Component`, `@Bean`, and `@Configuration`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解有`@Service`、`@Component`、`@Bean`和`@Configuration`。
- en: Spring Messaging
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Messaging
- en: Spring Framework supports a wide range of messaging systems. The Java platform
    is recognized as providing excellent support for messaging applications, and Spring
    Framework follows this approach and offers a variety of projects to help developers
    to write powerful applications with more productivity and fewer lines of infrastructure
    code. The basic idea of these projects is to provide some template classes that
    have the convenience methods to interact with the messaging systems.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架支持广泛的 messaging 系统。Java平台被认为是提供出色的消息应用程序支持的平台，Spring框架遵循此方法并提供各种项目，以帮助开发者以更高的生产力和更少的底层代码行数编写强大的应用程序。这些项目的基本思想是提供一些具有方便方法的模板类，以便与消息系统交互。
- en: Also, the project supplies some listener annotations to provide support for
    listening to messages from the brokers. The framework maintains the standard for
    different projects. In general, the prefix of the annotations is the name of the
    messaging system, for example, `@KafkaListener`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该项目还提供了一些监听器注解，以提供从代理监听消息的支持。框架维护不同项目的标准。一般来说，注解的前缀是消息系统的名称，例如`@KafkaListener`。
- en: The framework supplies many abstractions to create messaging applications in
    a generic way. This is interesting stuff because the application requirements
    change during the application lifecycle and the message broker solution may change
    as well. Then, with small changes, the application built with the Spring message
    module can work in different brokers. This is the goal.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 框架提供许多抽象，以通用方式创建消息应用程序。这是有趣的事情，因为应用程序需求在应用程序生命周期中会发生变化，消息代理解决方案也可能发生变化。然后，通过少量更改，使用Spring消息模块构建的应用程序可以在不同的代理上运行。这是目标。
- en: Spring AMQP
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring AMQP
- en: This subproject supports the AMQP protocol in Spring Framework. It provides
    a template to interact with the message broker. A template is like a super high-level
    API that supports the `send` and `receive` operations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此子项目支持Spring框架中的AMQP协议。它提供了一个与消息代理交互的模板。模板类似于一个超级高级API，支持`send`和`receive`操作。
- en: 'There are two projects in this set: `spring-amqp`, which can be used for ActiveMQ
    for instance, and `spring-rabbit`, which adds support for the RabbitMQ broker.
    This project enables broker administration through the APIs to declare queues,
    bindings, and exchanges.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合中有两个项目：`spring-amqp`，可用于ActiveMQ等，以及`spring-rabbit`，它增加了对RabbitMQ代理的支持。此项目通过API声明队列、绑定和交换来实现代理管理。
- en: These projects encourage the extensive use of dependency injection provided
    by the core container, because they make the configuration more declarative and
    easy to understand.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目鼓励广泛使用核心容器提供的依赖注入，因为它们使配置更加声明性和易于理解。
- en: Nowadays, the RabbitMQ broker is the popular choice for the messaging applications,
    and Spring provides full support for client interactions up to the level of administration
    tasks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，RabbitMQ代理是消息应用程序的流行选择，Spring提供了对客户端交互以及管理任务的全支持。
- en: Some common annotations are `@Exchange` and `@QeueueBinding`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解有`@Exchange`和`@QueueBinding`。
- en: Spring for Apache Kafka
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring for Apache Kafka
- en: Spring for Apache Kafka supports the broker-based Apache Kafka applications.
    It provides a high-level API to interact with Apache Kafka. Internally, the projects
    use the Kafka Java APIs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Spring for Apache Kafka支持基于代理的Apache Kafka应用程序。它提供了一个高级API来与Apache Kafka交互。内部，这些项目使用Kafka
    Java API。
- en: This module supports the annotation programming model. The basic idea is that
    with a couple of annotations and some POJO models, we can bootstrap the application
    and start listening to and producing messages.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块支持注解编程模型。基本思想是，通过几个注解和一些POJO模型，我们可以启动应用程序并开始监听和发送消息。
- en: '`KafkaTemplate` is a central class of this project. It enables us to send messages
    to Apache Kafka with a high-level API. Asynchronous programming is supported as
    well.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`KafkaTemplate`是这个项目的核心类。它使我们能够使用高级API将消息发送到Apache Kafka。同时支持异步编程。'
- en: This module offers support for transactions via annotations. This feature is
    enabled via standard transactional annotations used in Spring-based applications,
    such as `@Transactional`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块通过注解提供对事务的支持。此功能通过在基于Spring的应用程序中使用的标准事务注解启用，例如`@Transactional`。
- en: We also learned about Spring AMQP. This project adds the Spring concept of creating
    applications based on this broker. The dependency injection features are supported
    as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了Spring AMQP。该项目添加了基于此代理创建应用的概念。也支持依赖注入功能。
- en: Some common annotations are `@EnableKafka` and `@KafkaListener`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是`@EnableKafka`和`@KafkaListener`。
- en: Spring JMS
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring JMS
- en: The idea of this project provides a JMS integration with ideas of Spring Framework
    projects and supplies a high-level API to interact with brokers. The worst part
    of a JMS specification is that it has a lot of boilerplate code to manage and
    close connections.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的理念是将Spring框架项目的思想与JMS集成，并提供一个高级API来与代理交互。JMS规范最糟糕的部分是它有很多样板代码来管理和关闭连接。
- en: The `JmsTemplate` is a central class for this module, and it enables us to send
    messages to the broker. The JMS specification has a lot of intrinsic behaviors
    to handle the creation and releases resources, for instance, the `JmsTemplate` class
    do this tasks automatically for developers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`JmsTemplate`是这个模块的核心类，它使我们能够向代理发送消息。JMS规范有很多内在行为来处理资源的创建和释放，例如，`JmsTemplate`类会自动为开发者执行这些任务。'
- en: The module also supports transactional requirements. The `JmsTransactionManager`
    is the class that handles the transactional behavior of the Spring JMS module.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块还支持事务性需求。`JmsTransactionManager`类处理Spring JMS模块的事务行为。
- en: Spring removes the boilerplate code with a couple of annotations. The framework
    increases the readability of the code and makes the code more intuitive as well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Spring通过几个注解来移除样板代码。该框架提高了代码的可读性，并使代码更加直观。
- en: Some common annotations are `@JmsListener` and `@EnableJms`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是`@JmsListener`和`@EnableJms`。
- en: Spring Web MVC
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Web MVC
- en: This module is the first one built by the Spring Team to support the web applications
    in Spring Framework. This module uses the Servlet API as its foundation, and then
    these web applications must follow the Servlet Specification and be deployed into
    servlet containers. In version 5.0, the Spring Team created a Reactive web framework,
    which will be covered later in this book.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块是Spring团队构建的第一个支持Spring框架中Web应用的模块。该模块以Servlet API为基础，因此这些Web应用必须遵循Servlet规范并部署到servlet容器中。在5.0版本中，Spring团队创建了一个响应式Web框架，这将在本书的后续部分进行介绍。
- en: The Spring Web MVC module was developed using the front controller pattern.
    When the framework was created, this pattern was a common choice for many frameworks,
    such as Struts and JSF, among others. Under the hood, there is the main servlet
    in Spring called `DispatcherServlet`. This servlet will redirect through an algorithm
    to do the desired work.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web MVC模块是使用前端控制器模式开发的。当框架创建时，这种模式是许多框架（如Struts和JSF等）的共同选择。在底层，Spring中有一个主要的servlet称为`DispatcherServlet`。这个servlet将通过算法重定向以执行所需的工作。
- en: It enables developers to create amazing web applications on the Java platform.
    This portion of the framework provides full support to develop this kind of application.
    There are some interesting features for this purpose, such as support for internationalization
    and support for handling cookies. Also, multipart requests are an exciting feature
    for when the application needs to handle upload files and support routing requests.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它使开发者能够在Java平台上创建令人惊叹的Web应用。该框架的这一部分提供了全面的支持来开发此类应用。为此目的，有一些有趣的功能，例如支持国际化和支持处理cookies。此外，多部分请求是当应用需要处理上传文件和支持路由请求时的一个令人兴奋的功能。
- en: These characteristics are common for most web applications, and the framework
    has excellent support for these features. This support makes the framework a good
    choice for this kind of application. In [Chapter 2](8b857b24-87be-4066-acb3-daa9a596b61e.xhtml),
    *Starting in the Spring World* - *The CMS Application,* we will create an application
    using this module and the main features will be explored in depth.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性对于大多数Web应用都是常见的，该框架对这些特性提供了出色的支持。这种支持使该框架成为此类应用的理想选择。在[第2章](8b857b24-87be-4066-acb3-daa9a596b61e.xhtml)“从Spring世界开始”——“CMS应用”中，我们将使用此模块创建一个应用，并将深入探讨其主要功能。
- en: The module has full support for annotation programming since to declare HTTP
    endpoints until to wrap the request attribute in an HTTP request. It makes the
    application extremely readable without the boilerplate code to get the request
    parameter, for example.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块从声明HTTP端点直到将请求属性包装在HTTP请求中，对注解编程提供了全面的支持。这使得应用程序在没有获取请求参数等样板代码的情况下，具有极高的可读性。
- en: Web application-wise, it enables developers to work with robust template engines
    such as Thymeleaf and Freemarker. It is entirely integrated with routing features
    and bean validation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序方面，它使开发者能够与健壮的模板引擎，如Thymeleaf和Freemarker一起工作。它与路由功能和Bean验证完全集成。
- en: Also, the framework allows developers to build REST APIs with this module. Given
    all of this support, the module has become a favorite in the Spring ecosystem.
    Developers have started to create APIs with this stack, and some important companies
    have started to use it, especially given that the framework provides an easy way
    to navigate through the annotations. Because of this, the Spring Team added the
    new annotation `@RestController` in version 4.0.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该框架允许开发者使用此模块构建REST API。鉴于所有这些支持，该模块已成为Spring生态系统中的宠儿。开发者已经开始使用这个堆栈创建API，一些重要公司也开始使用它，尤其是在框架提供了一个轻松导航注解的简单方法的情况下。因此，Spring团队在4.0版本中添加了新的注解`@RestController`。
- en: We will work a lot with this module. Chapter by chapter, we will learn interesting
    things about this part of the framework.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将与这个模块进行大量工作。我们将逐章学习关于这个框架部分的有趣事物。
- en: Some common annotations are `@RequestMapping`, `@Controller`, `@Model`, `@RestController`,
    and `@RequestBody`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解包括`@RequestMapping`、`@Controller`、`@Model`、`@RestController`和`@RequestBody`。
- en: Spring WebFlux
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring WebFlux
- en: A new module introduced in Spring 5.0, Spring WebFlux, can be used to implement
    web applications built with Reactive Streams. These systems have nonblocking characteristics
    and are deployed in servers built on top of Netty, such as Undertown and servlet
    containers that support + 3.1.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 5.0中引入的新模块Spring WebFlux，可以用来实现使用响应式流构建的Web应用程序。这些系统具有非阻塞特性，并且部署在基于Netty构建的服务器上，例如Undertow和支持+
    3.1的servlet容器。
- en: Netty is an open source framework that helps developers to create network applications—that
    is, servers and clients using the asynchronous, event-driven pattern. Netty provides
    some interesting advantages, such as lower latency, high throughput, and less
    resource consumption. You can find more information at [https://netty.io](https://netty.io).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Netty是一个开源框架，它帮助开发者创建网络应用程序——即使用异步、事件驱动模式的客户端和服务器。Netty提供了一些有趣的优势，例如更低的延迟、更高的吞吐量和更少的资源消耗。你可以在[https://netty.io](https://netty.io)找到更多信息。
- en: This module supports annotations based on Spring MVC modules, such as `@GetMapping`,
    `@PostMapping`, and others. This is an important feature that enables us to migrate
    to this new version. Of course, some adjustments are necessary, such as adding
    Reactor classes (Mono or Flux).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块支持基于Spring MVC模块的注解，如`@GetMapping`、`@PostMapping`等。这是一个重要的特性，使我们能够迁移到这个新版本。当然，一些调整是必要的，例如添加Reactor类（Mono或Flux）。
- en: This module meets the modern web requirements to handle a lot of concurrent
    channels where the thread-per-request model is not an option.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块满足了现代Web处理大量并发通道的需求，其中线程-per-请求模型不是一种选择。
- en: We will learn about this module in [Chapter 3](136fa6be-c92d-415a-8b97-d0b04aea3f7f.xhtml),
    *Adding Persistence with Spring Data and Putting it into Reactive Fashion* and
    implement a fully Reactive application based on Reactive Streams.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第3章](136fa6be-c92d-415a-8b97-d0b04aea3f7f.xhtml)“使用Spring Data添加持久性并将其转换为响应式模式”中学习这个模块，并基于响应式流实现一个完全响应式的应用程序。
- en: Some common annotations are `@RequestMapping`, `@RestController`, and  `@RequestBody`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解包括`@RequestMapping`、`@RestController`和`@RequestBody`。
- en: Spring Data
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data
- en: Spring Data is an interesting module that provides the easiest way to manage
    application data with Spring-based programming. The project is an umbrella project,
    with subprojects to support different databases technologies, even relational
    and nonrelational databases. The Spring Team supports some databases technologies,
    such as Apache Cassandra, Apache Solr, Redis, and JPA Specification, and the community
    maintains the other exciting projects, such as ElasticSearch, Aerospike, DynamoDb,
    and Couchbase. The full list of projects can be found at [http://projects.spring.io/spring-data](http://projects.spring.io/spring-data).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data 是一个有趣的模块，它提供了使用基于 Spring 的编程来管理应用程序数据的最简单方式。该项目是一个母项目，包含子项目以支持不同的数据库技术，包括关系型和非关系型数据库。Spring
    团队支持一些数据库技术，例如 Apache Cassandra、Apache Solr、Redis 和 JPA 规范，而社区维护着其他令人兴奋的项目，如 ElasticSearch、Aerospike、DynamoDb
    和 Couchbase。项目的完整列表可以在 [http://projects.spring.io/spring-data](http://projects.spring.io/spring-data)
    找到。
- en: The goal is to remove the boilerplate code from the persistence code. In general,
    the data access layer is quite similar, even in different projects, differing
    only in the project model, and Spring Data provides a powerful way to map the
    domain model and repository abstraction.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是从持久化代码中移除样板代码。一般来说，数据访问层相当相似，即使在不同的项目中，也只是在项目模型上有所不同，而 Spring Data 提供了一种强大的方式来映射领域模型和仓库抽象。
- en: There are some central interfaces; they're a kind of marker to instruct the
    framework to choose the correct implementation. Under the hood, Spring will create
    a proxy and delegate the correct implementation. The amazing thing here is that
    developers don't have to write any persistence code and then take care of this
    code; they simply choose the required technology and Spring takes care of the
    rest.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一些核心接口；它们是一种标记，指示框架选择正确的实现。在底层，Spring 将创建一个代理并将正确的实现委托给它。这里令人惊讶的是，开发者不必编写任何持久化代码并关心这些代码；他们只需选择所需的技术，Spring
    就会处理其余部分。
- en: The central interfaces are `CrudRepository` and `PagingAndSortingRepository`,
    and their names are self-explanatory. `CrudRepository` implements the CRUD behaviors,
    such as `create`, `retrieval`, `update`, and `delete`. `PagingAndSortingRepository`
    is an extension of `CrudRepository` and adds some features such as paging and
    sorting. Usually, we will find derivations of these interfaces such as `MongoRepository`,
    which interacts with MongoDB database technology.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 核心接口是 `CrudRepository` 和 `PagingAndSortingRepository`，它们的名称具有自解释性。`CrudRepository`
    实现了 CRUD 行为，如 `create`、`retrieval`、`update` 和 `delete`。`PagingAndSortingRepository`
    是 `CrudRepository` 的扩展，并添加了一些功能，如分页和排序。通常，我们会找到这些接口的派生版本，如 `MongoRepository`，它与
    MongoDB 数据库技术交互。
- en: Some common annotations are `@Query`, `@Id`, and `@EnableJpaRepositories`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解有 `@Query`、`@Id` 和 `@EnableJpaRepositories`。
- en: Spring Security
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security
- en: Security for Java applications was always a pain for developers, especially
    in Java Enterprise Edition. There was a lot of boilerplate code to look up objects
    in the application servers, and the security layer was often heavily customized
    for the application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java 应用程序的安全问题，开发者一直感到头疼，尤其是在 Java 企业版中。在应用服务器中查找对象需要大量的样板代码，而且安全层通常需要为应用程序进行大量定制。
- en: In that chaotic scenario, the Spring Team decided to create a Spring Security
    project to help developers handle the security layer on the Java application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种混乱的场景中，Spring 团队决定创建一个 Spring Security 项目，以帮助开发者处理 Java 应用程序的安全层。
- en: In the beginning, the project had extensive support for Java Enterprise Edition
    and integration with EJB 3 security annotations. Nowadays, the project supports
    many different ways to handle authorization and authentication for Java applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目初期，它广泛支持 Java 企业版，并与 EJB 3 安全注解集成。如今，该项目支持许多不同的方式来处理 Java 应用程序的授权和认证。
- en: Spring Security provides a comprehensive model to add authorization and authentication
    for Java applications. The framework can be configured with a couple of annotations,
    which makes the task of adding a security layer extremely easy. The other important
    characteristics concern how the framework can be extended. There are some interfaces
    that enable developers to customize the default framework behaviors, and it makes
    the framework customized for different application requirements.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 为 Java 应用程序提供了一套全面的模型来添加授权和认证。该框架可以通过几个注解进行配置，这使得添加安全层的任务变得极其简单。其他重要特性涉及框架如何扩展。有一些接口允许开发者自定义默认框架行为，使得框架可以根据不同的应用需求进行定制。
- en: 'It is an umbrella project, and it is subdivided into these modules:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个综合性的项目，并细分为以下模块：
- en: '`spring-security-core`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-core`'
- en: '`spring-security-remoting`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-remoting`'
- en: '`spring-security-web`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-web`'
- en: '`spring-security-config`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-config`'
- en: '`spring-security-ldap`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-ldap`'
- en: '`spring-security-acl`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-acl`'
- en: '`spring-security-cas`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-cas`'
- en: '`spring-security-openid`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-openid`'
- en: '`spring-security-test`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-test`'
- en: 'These are the main modules, and there are many other projects to support a
    wide range of types of authentication. The module covers the following authentication
    and authorization types:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是主要模块，还有许多其他项目支持广泛的认证类型。该模块涵盖了以下认证和授权类型：
- en: LDAP
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LDAP
- en: HTTP Basic
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 基本认证
- en: OAuth
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth
- en: OAuth2
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2
- en: OpenID
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenID
- en: CAAS
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云服务平台（CAAS）
- en: JAAS
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java认证和授权服务（JAAS）
- en: 'The module also offers a **domain-specific language** (**DSL**) to provide
    an easy configuration. Let''s see a simple example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块还提供了一种**领域特定语言（DSL**）来简化配置。让我们看一个简单的例子：
- en: '[PRE0]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The example was extracted from the spring.io blog. For more details, go to [https://spring.io/blog/2013/07/11/spring-security-java-config-preview-readability/](https://spring.io/blog/2013/07/11/spring-security-java-config-preview-readability/).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 示例是从 spring.io 博客中提取的。更多详情，请访问 [https://spring.io/blog/2013/07/11/spring-security-java-config-preview-readability/](https://spring.io/blog/2013/07/11/spring-security-java-config-preview-readability/)。
- en: As we can see, the DSL makes the configuration task extremely easy and very
    understandable.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，领域特定语言（DSL）使得配置任务变得极其简单且易于理解。
- en: 'Spring Security''s main features are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 的主要特性如下：
- en: Session management
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话管理
- en: Protection against attacks (CSRF, session fixation, and others)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防御攻击（CSRF、会话固定等）
- en: Servlet API integration
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Servlet API 集成
- en: Authentication and authorization
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证和授权
- en: We will learn more about Spring Security in [Chapter 8](02944733-f452-49bc-bb4f-f4fa819c2405.xhtml),
    *Circuit Breakers and Security*. We will also put it into practice.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 8 章“断路器和安全”中了解更多关于 Spring Security 的内容，[第 8 章](02944733-f452-49bc-bb4f-f4fa819c2405.xhtml)。我们还将将其付诸实践。
- en: '`@EnableWebSecurity` is a common annotation.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableWebSecurity` 是一个常见的注解。'
- en: Spring Cloud
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud
- en: Spring Cloud is another umbrella project. The primary goal of this project is
    to help developers create distributed systems. Distributed systems have some common
    problems to solve and, of course, a set of patterns to help us, such as service
    discovery, circuit breakers, configuration management, intelligent route systems,
    and distributed sessions. Spring Cloud tools have all these implementations and
    well-documented projects.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud 是另一个综合性的项目。该项目的主要目标是帮助开发者创建分布式系统。分布式系统需要解决一些常见问题，并且当然，有一套模式可以帮助我们，例如服务发现、断路器、配置管理、智能路由系统和分布式会话。Spring
    Cloud 工具提供了所有这些实现和详细文档的项目。
- en: 'The main projects are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 主要项目如下：
- en: Spring Cloud Netflix
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Netflix
- en: Spring Cloud Config
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Config
- en: Spring Cloud Consul
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Consul
- en: Spring Cloud Security
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Security
- en: Spring Cloud Bus
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Bus
- en: Spring Cloud Stream
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Stream
- en: Spring Cloud Netflix
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Netflix
- en: Spring Cloud Netflix is perhaps the most popular Spring module nowadays. This
    fantastic project allows us to integrate the Spring ecosystem with the Netflix
    OSS via Spring Boot AutoConfiguration features. The supported Netflix OSS libraries
    are Eureka for service discovery, Ribbon to enable client-side load balancing,
    circuit breaker via Hystrix to protect our application from external outages and
    make the system resilient, the Zuul component provides an intelligent routing
    and can act as an edge service. Finally, the Feign component can help developers
    to create HTTP clients for REST APIs with a couple of annotations.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud Netflix 可能是当今最受欢迎的 Spring 模块。这个出色的项目允许我们通过 Spring Boot 自动配置功能将
    Spring 生态系统与 Netflix OSS 集成。支持的 Netflix OSS 库包括用于服务发现的 Eureka、用于启用客户端负载均衡的 Ribbon、通过
    Hystrix 实现的断路器来保护我们的应用程序免受外部故障的影响并使系统具有弹性、Zuul 组件提供智能路由并可以作为边缘服务。最后，Feign 组件可以帮助开发者通过几个注解创建用于
    REST API 的 HTTP 客户端。
- en: 'Let''s look at each of these:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些内容：
- en: '**Spring Cloud Netflix Eureka**: The focus of this project is to provide service
    discovery for applications while conforming to Netflix standards. Service discovery
    is an important feature and enables us to remove hardcoded configurations to supply
    a hostname and ports; it is more important in cloud environments because the machine
    is ephemeral, and thus it is hard to maintain names and IPs. The functionality
    is quite simple, the Eureka server provides a service registry, and Eureka clients
    will contact its registers themselves.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Cloud Netflix Eureka**：这个项目的重点是提供符合 Netflix 标准的应用程序服务发现。服务发现是一个重要的功能，使我们能够移除硬编码的配置来提供主机名和端口；在云环境中更为重要，因为机器是短暂的，因此很难维护名称和
    IP 地址。该功能相当简单，Eureka 服务器提供服务注册，Eureka 客户端会自行联系其注册信息。'
- en: Some common annotations are `@EnableEurekaServer` and `@EnableEurekaClient`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是 `@EnableEurekaServer` 和 `@EnableEurekaClient`。
- en: '**Spring Cloud Feign**: The Netflix team created the Feign project. It''s a
    great project that makes the configuration of HTTP clients for REST applications
    significantly easier than before. These implementations are based on annotations.
    The project supplies a couple of annotations for HTTP paths, HTTP headers, and
    much more, and of course, Spring Cloud Feign integrates it with the Spring Cloud
    ecosystem through the annotations and autoconfiguration. Also, Spring Cloud Feign
    can be combined with the Eureka server.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Cloud Feign**：Netflix 团队创建了 Feign 项目。这是一个非常好的项目，使得配置 HTTP 客户端用于 REST
    应用程序比以前容易得多。这些实现基于注解。该项目为 HTTP 路径、HTTP 头等提供了一些注解，当然，Spring Cloud Feign 通过注解和自动配置与
    Spring Cloud 生态系统集成。此外，Spring Cloud Feign 可以与 Eureka 服务器结合使用。'
- en: Some common annotations are `@EnableFeignClients` and `@FeignClient`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是 `@EnableFeignClients` 和 `@FeignClient`。
- en: '**Spring Cloud Ribbon**: Ribbon is a client-side load balancer. The configuration
    should mainly provide a list of servers for the specific client. It must be named.
    In Ribbon terms, it is called the **named client**. The project also provides
    a range of load-balancing rules, such as Round Robin and Availability Filtering,
    among others. Of course, the framework allows developers to create custom rules.
    Ribbon has an API that works, integrated with the Eureka server, to enable service
    discovery, which is included in the framework. Also, essential features such as
    fault tolerance are supported because the API can recognize the running servers
    at runtime.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Cloud Ribbon**：Ribbon 是一个客户端负载均衡器。配置应主要提供一个特定客户端的服务器列表。它必须有名称。在 Ribbon
    的术语中，它被称为**命名客户端**。该项目还提供了一系列负载均衡规则，如轮询和可用性过滤等。当然，框架允许开发者创建自定义规则。Ribbon 有一个与 Eureka
    服务器集成的 API，用于启用服务发现，这包含在框架中。此外，由于 API 可以在运行时识别运行中的服务器，因此还支持诸如容错等基本功能。'
- en: Some common annotations are `@RibbonClient` and `@LoadBalanced`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是 `@RibbonClient` 和 `@LoadBalanced`。
- en: '**Spring Cloud Hystrix**: An acclaimed Netflix project, this project provides
    a circuit breaker pattern implementation. The concept is similar to an electrical
    circuit breaker. The framework will watch the method marked with `@HystrixCommand`
    and watch for failing calls. If the failed calls number more than a figure permitted
    in configuration, the circuit breaker will open. While the circuit is open, the
    fallback method will be called until the circuit is closed and operates normally.
    It will provide resilience and fault-tolerant characteristics for our systems.
    The Spring ecosystem is fully integrated with Hystrix, but it works only on the
    `@Component` and `@Service` beans.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Cloud Hystrix**：一个备受赞誉的Netflix项目，该项目提供了一个断路器模式实现。其概念类似于电路断路器。框架将监视标记有`@HystrixCommand`的方法，并监视失败的调用。如果失败的调用次数超过配置中允许的数字，断路器将打开。当电路打开时，将调用回退方法，直到电路关闭并正常操作。它将为我们的系统提供弹性和容错特性。Spring生态系统完全集成了Hystrix，但它仅在`@Component`和`@Service`豆上工作。'
- en: Some common annotations are `@EnableCircuitBreaker` and `@HystrixCommand`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解包括`@EnableCircuitBreaker`和`@HystrixCommand`。
- en: Spring Cloud Config
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Config
- en: This exciting project provides an easy way to manage system configurations for
    distributed systems, and this is a critical issue in cloud environments because
    the file system is ephemeral. It also helps us to maintain different stages of
    the deployment pipeline. Spring profiles are fully integrated with this module.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个令人兴奋的项目提供了一个轻松管理分布式系统系统配置的方法，在云环境中这是一个关键问题，因为文件系统是短暂的。它还帮助我们维护部署管道的不同阶段。Spring配置文件完全集成到这个模块中。
- en: We will need an application that will provide the configuration for other applications.
    We can understand its workings by thinking of the concepts of the **server** and
    the **client**, the server will provide some configurations through HTTP and the
    client will look up the configuration on the server. Also, it is possible to encrypt
    and decrypt property values.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个应用程序来为其他应用程序提供配置。我们可以通过思考**服务器**和**客户端**的概念来理解其工作原理，服务器将通过HTTP提供一些配置，而客户端将在服务器上查找配置。此外，还可以对属性值进行加密和解密。
- en: There are some storage implementations to provide these property files, and
    the default implementation is Git. It enables us to store our property files in
    Git, or we can use the file system as well. The important thing here is that the
    source does not matter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些存储实现来提供这些属性文件，默认实现是Git。它使我们能够将属性文件存储在Git中，或者我们也可以使用文件系统。这里重要的是源代码不重要。
- en: '**Git** is a distributed version control. The tool is commonly used for development
    purposes, especially in the open-source community. The main advantage, when you
    compare it to some market players, such as SVN, is the *distributed architecture*.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git**是一个分布式版本控制。这个工具通常用于开发目的，特别是在开源社区中。与SVN等市场参与者相比，主要优势在于*分布式架构*。'
- en: There is an interesting integration between **Spring Cloud Bus** and this module.
    If they are integrated, it is possible to broadcast the configuration changes
    on the cluster. This is an important feature if the application configuration
    changes with frequency. There are two annotations that tell Spring to apply changes
    at runtime: `@RefreshScope` and `@ConfigurationProperties`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Cloud Bus**与该模块之间有一个有趣的集成。如果它们集成在一起，就可以在集群上广播配置更改。如果应用程序配置频繁更改，这是一个重要功能。有两个注解告诉Spring在运行时应用更改：`@RefreshScope`和`@ConfigurationProperties`。'
- en: In [Chapter 7](136fa6be-c92d-415a-8b97-d0b04aea3f7f.xhtml), *Airline Ticket
    System,* we will implement an exciting service to provide external configurations
    for our microservices using this module. Server concepts will be explained in
    more detail. The client details will be presented as well.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](136fa6be-c92d-415a-8b97-d0b04aea3f7f.xhtml)，*航空票务系统*中，我们将实现一个令人兴奋的服务，使用此模块为我们的微服务提供外部配置。将更详细地解释服务器概念。客户端的详细信息也将被展示。
- en: '` @EnableConfigServer` is a common annotation.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '` @EnableConfigServer` 是一个常见的注解。'
- en: Spring Cloud Consul
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Consul
- en: Spring Cloud Consul provides integrations with Hashicorp's Consul. This tool
    addresses problems in the same way as service discovery, a distributed configuration,
    and control bus. This module allows us to configure Spring applications and Consul
    with a few annotations in a Spring-based programming model. Autoconfiguration
    is supported as well. The amazing thing here is that this module can be integrated
    with some Netflix OSS libraries, such as Zuul and Ribbon, via Spring Cloud Zuul
    and Spring Cloud Ribbon respectively (for example).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud Consul提供了与Hashicorp的Consul的集成。这个工具以与服务发现、分布式配置和控制总线相同的方式解决问题。此模块允许我们通过基于Spring的编程模型使用少量注解来配置Spring应用程序和Consul。还支持自动配置。这里令人惊讶的是，此模块可以通过Spring
    Cloud Zuul和Spring Cloud Ribbon分别与一些Netflix OSS库（例如）集成（例如）。
- en: '`@EnableDiscoveryClient` is a common annotation.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableDiscoveryClient`是一个常见的注解。'
- en: Spring Cloud Security
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Security
- en: This module is like an extension from Spring Security. However, distributed
    systems have different requirements for security. Normally, they have central
    identity management, or the authentication lies with the clients in the case of
    REST APIs. Normally, in distributed systems, we have microservices, and these
    services might have more than one instance in the runtime environment whose characteristics
    make the authentication module slightly different from monolithic applications.
    The module can be used together with Spring Boot applications and makes the OAuth2
    implementation very easy with a couple of annotations and a few configurations.
    Also, some common patterns are supported, such as single sign-on, token relay,
    and token exchange.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块类似于Spring Security的扩展。然而，分布式系统对安全性的要求不同。通常，它们有集中的身份管理，或者REST API的情况下，认证在客户端。在分布式系统中，我们通常有微服务，这些服务在运行时环境中可能有多个实例，其特性使得认证模块与单体应用略有不同。该模块可以与Spring
    Boot应用程序一起使用，并通过几个注解和一些配置使OAuth2实现变得非常简单。此外，还支持一些常见模式，如单点登录、令牌中继和令牌交换。
- en: For the microservice applications based on the Spring Cloud Netflix, it is particularly
    interesting because it enables downstream authentication to work with a Zuul proxy
    and offers support from Feign clients. An interceptor is used to fetch tokens.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于Spring Cloud Netflix的微服务应用程序，这尤其有趣，因为它使得下游认证能够与Zuul代理一起工作，并为Feign客户端提供支持。使用拦截器来获取令牌。
- en: Some commons annotations are `@EnableOAuth2Sso` and `@EnableResourceServer`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解包括`@EnableOAuth2Sso`和`@EnableResourceServer`。
- en: Spring Cloud Bus
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Bus
- en: The main goal of this project is to provide an easy way to broadcast changes
    spread throughout the cluster. The applications can connect the distributed system
    nodes through the message broker.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的核心目标是提供一个简单的方法来广播整个集群中的变化。应用程序可以通过消息代理连接分布式系统节点。
- en: It provides an easy way for developers to create a publish and subscribe mechanism
    using the `ApplicationContext` provided by Spring Container. It enables the possibility
    to create applications using the event-driven architecture style with the Spring
    Ecosystem.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它为开发者提供了一个简单的方法，使用Spring容器提供的`ApplicationContext`来创建发布和订阅机制。它使得使用Spring生态系统的事件驱动架构风格创建应用程序成为可能。
- en: To create custom events, we need to create a child class from `RemoteApplicationEvent` and
    mark the class to be scanned via `@RemoteApplicationEventScan`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义事件，我们需要从`RemoteApplicationEvent`创建一个子类，并通过`@RemoteApplicationEventScan`标记该类以进行扫描。
- en: 'The projects support three message brokers as the transport layer:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目支持三个消息代理作为传输层：
- en: AMQP
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AMQP
- en: Apache Kafka
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Kafka
- en: Redis
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: '`@RemoteApplicationEventScan `is a common annotation.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RemoteApplicationEventScan`是一个常见的注解。'
- en: Spring Cloud Stream
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Stream
- en: The idea behind this module is to provide an easy way to build message-driven
    microservices. The module has an opinionated way of configuration. It means we
    need to follow some rules to create these configurations. In general, the application
    is configured by the `yaml|properties` file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块背后的理念是提供一个简单的方法来构建消息驱动的微服务。该模块具有一种有偏见的配置方式。这意味着我们需要遵循一些规则来创建这些配置。一般来说，应用程序是通过`yaml|properties`文件进行配置的。
- en: The module supports annotations as well. This means that a couple of annotations
    are enough to create consumers, producers, and bindings; it decouples the application
    and makes it easy to understand. It supplies some abstractions around the message
    brokers and channels, and it makes the developer's life more comfortable and productive
    as well.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块也支持注解。这意味着只需要几个注解就可以创建消费者、生产者和绑定；它解耦了应用程序，使其易于理解。它围绕消息代理和通道提供了一些抽象，从而使开发者的生活更加舒适和高效。
- en: Spring Cloud Stream has Binder implementations for RabbitMQ and Kafka.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud Stream为RabbitMQ和Kafka提供了绑定实现。
- en: Some common annotations are `@EnableBinding`, `@Input`, and `@Output`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是`@EnableBinding`、`@Input`和`@Output`。
- en: Spring Integration
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Integration
- en: This module supports a lot of Enterprise Application patterns and brings the
    Spring programming model to this topic. The Spring programming model enables extensive
    dependence injection support and is annotations programming-centric. The annotations
    instruct us as to how the framework needs to be configured and defines framework
    behaviors.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块支持许多企业应用程序模式，并将Spring编程模型引入此主题。Spring编程模型提供了广泛的依赖注入支持，并且以注解编程为中心。注解指导我们如何配置框架，并定义框架行为。
- en: The POJO model is suggested because it is simple and widely known in the Java
    development world.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用POJO模型，因为它简单且在Java开发世界中广为人知。
- en: This project has some intersections with the other modules. Some other projects
    use these module concepts to do their work. There is a project called Spring Cloud
    Stream, for instance.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目与其他模块有一些交集。一些其他项目使用这些模块概念来完成他们的工作。例如，有一个名为Spring Cloud Stream的项目。
- en: The Enterprise Integration patterns are based on a wide range of communication
    channels, protocols, and patterns. This project supports some of these.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 企业集成模式基于广泛的通信通道、协议和模式。本项目支持其中的一些。
- en: 'The modules support a variety of features and channels, such as the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 模块支持各种特性和通道，如下所示：
- en: Aggregators
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合器
- en: Filters
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器
- en: Transformers
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换器
- en: JMS
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMS
- en: RabbitMQ
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RabbitMQ
- en: TCP/UDP
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP/UDP
- en: Web services
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务
- en: Twitter
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter
- en: Email
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮件
- en: And much more
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及更多
- en: 'There are three main concepts of Enterprise application integration:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序集成的三个主要概念是：
- en: Messages
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息
- en: Message channel
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息通道
- en: Message endpoint
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息端点
- en: Finally, the Spring Integration module offers a comprehensive way to create
    application integration and enables developers to do it using amazing support.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Spring Integration模块提供了一种创建应用程序集成的方法，并使开发者能够利用出色的支持来完成这项工作。
- en: Some common annotations are `@EnableIntegration`, `@IntegrationComponentScan`
    , and `@EnablePublisher`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的注解是`@EnableIntegration`、`@IntegrationComponentScan`和`@EnablePublisher`。
- en: Spring Boot
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot
- en: Spring Boot was released in 2014\. The idea behind this project was to present
    a way to deploy the web application outside of any container, such as Apache Tomcat,
    Jetty, and so on. The benefit of this kind of deployment is the independence from
    any external service. It allows us to run the web applications with one JAR file.
    Nowadays, this is an excellent approach because this forms the most natural way
    to adopt DevOps culture.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot于2014年发布。该项目背后的想法是提供一种在Apache Tomcat、Jetty等任何容器之外部署Web应用程序的方法。这种部署方式的好处是独立于任何外部服务。它允许我们使用一个JAR文件运行Web应用程序。如今，这是一种极佳的方法，因为它形成了采用DevOps文化的最自然方式。
- en: Spring Boot provides embedded servlet containers, such as Apache Tomcat, Jetty,
    and Undertow. It makes the development process more productive and comfortable
    when testing our web applications. Also, customizations during configuration are
    allowed via a configuration file, or by providing some beans.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot提供了嵌入式的servlet容器，如Apache Tomcat、Jetty和Undertow。当测试我们的Web应用程序时，它使开发过程更加高效和舒适。此外，配置期间允许通过配置文件或提供一些bean进行自定义。
- en: There are some advantages when adopting the Spring Boot framework. The framework
    does not require any XML for configuration. This is a fantastic thing because
    we will find all the dependencies in the Java files. This helps the IDEs to assist
    developers, and it improves the traceability of the code. Another important advantage
    is that the project tries to keep the configuration as automatic as possible.
    Some annotations make the magic happen. The interesting thing here is that Spring
    will inject the implementation of any code that is generated at runtime.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 采用Spring Boot框架有一些优势。该框架不需要任何XML进行配置。这是一件了不起的事情，因为我们将在Java文件中找到所有依赖项。这有助于IDEs协助开发者，并提高了代码的可追溯性。另一个重要的优势是，项目试图尽可能地将配置自动化。一些注解使得魔法发生。有趣的是，Spring会注入在运行时生成的任何代码的实现。
- en: The Spring Boot framework also provides interesting features to help developers
    and operations, such as health checks, metrics, security, and configuration. This
    is indispensable for modern applications where the modules are decomposed in a
    microservices architecture.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot框架还提供了有趣的功能来帮助开发者和运维人员，例如健康检查、度量、安全和配置。这对于现代应用程序至关重要，其中模块在微服务架构中被分解。
- en: There are some other interesting features that can help the developers DevOps-wise.
    We can use the `application-{profile}.properties` or `application.yaml` files
    to configure different runtime profiles, such as development, testing, and production.
    It is a really useful Spring Boot feature.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他有趣的功能可以帮助开发者从DevOps的角度出发。我们可以使用`application-{profile}.properties`或`application.yaml`文件来配置不同的运行时配置文件，例如开发、测试和生产。这是一个真正有用的Spring
    Boot特性。
- en: Also, the project has full support for the tests, since the web layer up to
    the repository layer.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该项目对测试提供了全面的支持，从网络层到存储库层。
- en: The framework provides a high-level API to work with unit and integration tests.
    Also, the framework supplies many annotations and helpers classes for developers.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架提供了一个高级API来处理单元和集成测试。此外，该框架为开发者提供了许多注解和辅助类。
- en: The Spring Boot project is a production-ready framework with default optimized
    configurations for the web servers, metrics, and monitoring features to help the
    development team deliver high-quality software.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot项目是一个生产就绪的框架，为Web服务器、指标和监控功能提供了默认优化的配置，以帮助开发团队交付高质量的软件。
- en: We can develop applications by coding in the Groovy and Java languages. Both
    are JVM languages. In version 5.0, the Spring Team announced the full support
    for Kotlin, the new language for JVM. It enables us to develop consistent and
    readable codes. We will look at this feature in depth in [Chapter 7](136fa6be-c92d-415a-8b97-d0b04aea3f7f.xhtml),
    *Airline Ticket System*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Groovy和Java语言进行编码来开发应用程序。两者都是JVM语言。在5.0版本中，Spring团队宣布了对Kotlin语言的全支持，这是JVM的新语言。它使我们能够编写一致且可读的代码。我们将在第7章*航空票务系统*中深入探讨这一特性。
- en: Microservices and Spring Boot
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务与Spring Boot
- en: The microservices architectural style, in general, is distributed, must be loosely
    coupled, and be well-defined. These characteristics must be followed when you
    want a microservices architecture.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构风格通常来说是分布式的，必须是松散耦合的，并且需要很好地定义。当你想要一个微服务架构时，必须遵循这些特性。
- en: Much of Spring Boot is aimed at developer productivity by making common concepts,
    such as RESTful HTTP and embedded web application runtimes, easy to wire up and
    use. In many respects, it also aims to serve as a *micro*-*framework*, by enabling
    developers to pick and choose the parts of the framework they need, without being
    overwhelmed by bulky or otherwise unnecessary runtime dependencies. This also
    enables Boot applications to be packaged into small units of deployment, and the
    framework is able to use build systems to generate those deployables as runnable
    Java archives.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的大部分功能旨在通过使常见概念，如RESTful HTTP和嵌入式Web应用程序运行时，易于连接和使用，来提高开发者的生产力。在许多方面，它还旨在作为一个*微*-*框架*，通过允许开发者选择和选择他们需要的框架部分，而不会被庞大的或不必要的运行时依赖所淹没。这也使得Boot应用程序可以打包成小的部署单元，并且框架能够使用构建系统生成可运行的Java归档。
- en: 'The main characteristics of microservices are:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的主要特性是：
- en: Small-grained components
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小粒度组件
- en: Domain responsibility (orders, shopping carts)
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域责任（订单、购物车）
- en: Programming-language agnostic
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程语言无关性
- en: Database agnostic
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库无关性
- en: Spring Boot enables us to run an application on embedded web servers such as
    Tomcat, Jetty, and Undertow. This makes it extremely easy to deploy our components
    because it is possible to expose our HTTP APIs in one JAR.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot使我们能够在嵌入式Web服务器（如Tomcat、Jetty和Undertow）上运行应用程序。这使得部署我们的组件变得极其容易，因为我们可以在一个JAR文件中公开我们的HTTP
    API。
- en: The Spring Team even thinks in terms of developer productivity, and they offer
    a couple of projects called **starters.** These projects are groups of dependencies
    with some compatibilities. These awesome projects additionally work with the convention
    over configuration. Basically, they are common configurations that developers
    need to make on every single project. We can change these settings in our `application.properties`
    or `application.yaml` files.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Spring团队甚至从开发者生产力的角度考虑，他们提供了一些名为**starters**的项目。这些项目是一组具有某些兼容性的依赖项。这些出色的项目还与约定优于配置一起工作。基本上，它们是开发者在每个单独的项目上都需要进行的常见配置。我们可以在我们的`application.properties`或`application.yaml`文件中更改这些设置。
- en: Another critical point for microservices architecture is monitoring. Let's say
    that we're working on an e-commerce solution. We have two components, shopping
    cart and payments. The shopping cart probably needs to have several instances
    and payments need to have fewer instances. How can we check these several instances?
    How can we check the health of these services? We need to fire an alarm when these
    instances go down. This is a common implementation for all services. The Spring
    Framework supplies a module called Spring Boot Actuator that provides some built-in
    health checks for our application, databases, and much more.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构的另一个关键点是监控。假设我们正在开发一个电子商务解决方案。我们有两个组件，购物车和支付。购物车可能需要多个实例，而支付可能需要较少的实例。我们如何检查这些多个实例？我们如何检查这些服务的健康状况？当这些实例出现问题时，我们需要触发警报。这是所有服务的一个常见实现。Spring框架提供了一个名为Spring
    Boot Actuator的模块，它为我们应用程序、数据库等提供了内置的健康检查。
- en: Setting up our development environment
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的开发环境
- en: 'Before we start, we need to set up our development environment. Our development
    environment consists of the following four tools:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要设置我们的开发环境。我们的开发环境包括以下四个工具：
- en: JDK
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK
- en: Build tool
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建工具
- en: IDE
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE
- en: Docker
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: We will install JDK version 8.0\. This version is fully supported in Spring
    Framework 5\. We will present the steps to install Maven 3.3.9, the most famous
    build tool for Java development, and in the last part, we will show you some detailed
    instructions on how to install IntelliJ IDEA Community Edition. We will use Ubuntu
    16.04, but you can use your favorite OS. The installation steps are easy.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装JDK版本8.0。这个版本在Spring Framework 5中得到完全支持。我们将展示安装Maven 3.3.9的步骤，这是Java开发中最著名的构建工具，在最后一部分，我们将向您展示如何安装IntelliJ
    IDEA Community Edition的详细说明。我们将使用Ubuntu 16.04，但您可以使用您喜欢的操作系统。安装步骤很简单。
- en: Installing OpenJDK
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装OpenJDK
- en: OpenJDK is a stable, free, and open source Java development kit. This package
    will be required for everything related to code compilation and runtime environments.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK是一个稳定、免费且开源的Java开发工具包。此包将用于与代码编译和运行环境相关的所有内容。
- en: Also, it is possible to use an Oracle JDK, but you should pay attention to the License
    and Agreements.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用Oracle JDK，但您应该注意许可证和协议。
- en: 'To install OpenJDK, we will open a terminal and run the following command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装OpenJDK，我们将打开一个终端并运行以下命令：
- en: '[PRE1]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can find more information on how to install Java 8 JDK in the installation
    section ([http://openjdk.java.net/install/](http://openjdk.java.net/install/))
    of the OpenJDK page.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在OpenJDK页面的安装部分（[http://openjdk.java.net/install/](http://openjdk.java.net/install/)）找到有关如何安装Java
    8 JDK的更多信息。
- en: 'Check the installation using the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查安装：
- en: '[PRE2]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see the OpenJDK version and its relevant details displayed as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到显示如下所示的OpenJDK版本及其相关详细信息：
- en: '![](img/ce1e287a-6fb3-4da3-bf75-91e9d947abc2.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ce1e287a-6fb3-4da3-bf75-91e9d947abc2.png)'
- en: Now that we have installed the Java development kit, we are ready for the next
    step. In the real world, we must have a build tool to help developers to compile,
    package, and test the Java applications.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Java开发工具包，我们准备进行下一步。在现实世界中，我们必须有一个构建工具来帮助开发者编译、打包和测试Java应用程序。
- en: Let's install Maven in the next section.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将安装Maven。
- en: Installing Maven
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Maven
- en: Maven is a popular build tool for Java development. Some important open source
    projects were built using this tool. There are features that facilitate the build
    process, standardize the project structure, and provide some guidelines for best
    practices development.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 是 Java 开发中流行的构建工具。一些重要的开源项目都是使用这个工具构建的。它具有简化构建过程、标准化项目结构和提供最佳实践开发指南的功能。
- en: We will install Maven, but the installation step should be executed after the
    OpenJDK installation.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装 Maven，但安装步骤应在 OpenJDK 安装之后执行。
- en: 'Open a terminal and execute the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行以下操作：
- en: '[PRE3]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Check the installation using this command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查安装：
- en: '[PRE4]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following output, although the version may be different
    for you:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出，尽管版本可能因您而异：
- en: '![](img/a8107950-aaef-4669-9fbc-633d3920c4c8.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a8107950-aaef-4669-9fbc-633d3920c4c8.png)'
- en: Well done. Now we have Maven installed. Maven has a vibrant community that produces
    many plugins to help developers with important tasks. There are plugins to execute
    a unit test and plugins to prepare the project for the release event that can
    be integrated with SCM software.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 做得很好。现在我们已经安装了 Maven。Maven 拥有一个充满活力的社区，它为开发者提供了许多插件来帮助完成重要任务。有插件可以执行单元测试，还有插件可以准备项目的发布活动，这些插件可以与源代码管理（SCM）软件集成。
- en: We will use the `spring boot maven` plugin and `docker maven` plugin. The first
    converts our application to a JAR file and the second enables us to integrate
    with Docker Engine to create images, run containers, and much more. In the next
    few chapters, we will learn how to configure and interact with these plugins.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `spring boot maven` 插件和 `docker maven` 插件。第一个插件将我们的应用程序转换为 JAR 文件，第二个插件使我们能够与
    Docker 引擎集成，以创建镜像、运行容器等等。在接下来的几章中，我们将学习如何配置和与这些插件交互。
- en: Installing IDE
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 IDE
- en: The IDE is an important tool to help developers. In this book, we will use the
    IntelliJ IDEA as an *official* tool for developing our projects. There are no
    restrictions for other IDEs because the project will be developed using Maven
    as a build tool.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 集成开发环境是帮助开发者的一个重要工具。在这本书中，我们将使用 IntelliJ IDEA 作为开发项目的官方工具。对于其他 IDE 没有限制，因为项目将使用
    Maven 作为构建工具进行开发。
- en: The IDE is a personal choice for developers, and in general, it involves passion;
    what some people love, other developers hate. Please feel free to use your favorite.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）是开发者的个人选择，通常涉及热情；有些人喜欢的东西，其他开发者可能讨厌。请随意使用您喜欢的。
- en: IntelliJ IDEA
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IntelliJ IDEA
- en: IntelliJ IDEA is a JetBrains product. We will use the Community Edition, which
    is open source and a fantastic tool with which to code Java and Kotlin. The tool
    offers a fantastic autocomplete feature, and also fully supports Java 8 features.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA 是 JetBrains 的产品。我们将使用社区版，这是一个开源的、用于编码 Java 和 Kotlin 的出色工具。该工具提供了出色的自动完成功能，并且完全支持
    Java 8 特性。
- en: Go to [https://www.jetbrains.com/idea/download/#section=linux](https://www.jetbrains.com/idea/download/#section=linux)
    and download the Community Edition. We can extract the `tar.gz` and execute it.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://www.jetbrains.com/idea/download/#section=linux](https://www.jetbrains.com/idea/download/#section=linux)
    并下载社区版。我们可以提取 `tar.gz` 文件并执行它。
- en: Spring Tools Suite
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Tools Suite
- en: The Spring Tools Suite is based on Eclipse IDE, provided by the Eclipse Foundation,
    of course. The goal is to provide support for the Spring ecosystem and make the
    developer's life easier. Interesting features such as Beans Explorer are supported
    in this tool.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Tools Suite 是基于 Eclipse IDE 的，当然，由 Eclipse 基金会提供。目标是提供对 Spring 生态系统的支持，并使开发者的生活更加轻松。这个工具支持诸如
    Beans 探索器等有趣的功能。
- en: 'Download the tool at the following link:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接下载工具：
- en: '[http://download.springsource.com/release/STS/3.6.4.RELEASE/dist/e4.4/groovy-grails-tool-suite-3.6.4.RELEASE-e4.4.2-linux-gtk-x86_64.tar.gz](http://download.springsource.com/release/STS/3.6.4.RELEASE/dist/e4.4/groovy-grails-tool-suite-3.6.4.RELEASE-e4.4.2-linux-gtk-x86_64.tar.gz)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://download.springsource.com/release/STS/3.6.4.RELEASE/dist/e4.4/groovy-grails-tool-suite-3.6.4.RELEASE-e4.4.2-linux-gtk-x86_64.tar.gz](http://download.springsource.com/release/STS/3.6.4.RELEASE/dist/e4.4/groovy-grails-tool-suite-3.6.4.RELEASE-e4.4.2-linux-gtk-x86_64.tar.gz)'
- en: Installing Docker
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Docker is an open source project that helps people to run and manage containers.
    For developers, Docker helps in different stages of the development lifecycle.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个开源项目，帮助人们运行和管理容器。对于开发者来说，Docker 在开发生命周期的不同阶段都提供了帮助。
- en: During the development phase, Docker enables developers to spin up different
    infrastructure services such as databases and service discoveries like Consul
    without installation in the current system operational. It helps the developers
    because developers do not need to install these kinds of systems in the operating
    system layer. Usually, this task can cause conflicts with the libraries during
    the installation process and consumes a lot of time.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段，Docker 允许开发者无需在当前系统操作层安装，即可启动不同的基础设施服务，如数据库和服务发现（如Consul）。这有助于开发者，因为开发者不需要在操作系统层安装这些系统。通常，这项任务在安装过程中可能会与库发生冲突，并消耗大量时间。
- en: Sometimes, developers need to install the exact version. In this case, it is
    necessary to reinstall the whole application on the expected version. It is not
    a good thing because the developer machine during this time becomes slow. The
    reason is quite simple, there are many applications that are used during software
    development.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，开发者需要安装确切的版本。在这种情况下，有必要在期望的版本上重新安装整个应用程序。这不是一件好事，因为在此期间开发者的机器会变慢。原因很简单，在软件开发过程中使用了大量应用程序。
- en: Docker helps developers at this stage. It is quite simple to run a container
    with MongoDB. There is no installation and it enables developers to start the
    database with one line. Docker supports the image tag. This feature helps to work
    with different versions of the software; this is awesome for developers who need
    to change the software version every time.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在这个阶段帮助开发者。运行带有MongoDB的容器非常简单。无需安装，它允许开发者通过一行命令启动数据库。Docker 支持镜像标签。这个特性有助于处理不同版本的软件；这对于每次都需要更改软件版本的开发者来说非常棒。
- en: Another advantage is that when the developers need to deliver the artifacts
    for test or production purposes, Docker enables these tasks via Docker images.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优点是，当开发者需要为测试或生产目的交付工件时，Docker可以通过Docker镜像实现这些任务。
- en: Docker helps people to adopt the DevOps culture and delivers amazing features
    to improve the performance of the whole process.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Docker帮助人们采用DevOps文化，并为提高整个流程的性能提供了惊人的功能。
- en: Let's install Docker.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装Docker。
- en: 'The easiest way to install Docker is to download the script found at [https://get.docker.com](http://get.docker.com):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Docker最简单的方法是下载位于[https://get.docker.com](http://get.docker.com)的脚本：
- en: '[PRE5]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the download is completed, we will execute the script as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，我们将按照以下方式执行脚本：
- en: '[PRE6]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Wait for the script execution and then check the Docker installation using
    the following command:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 等待脚本执行完毕，然后使用以下命令检查Docker安装：
- en: '[PRE7]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output needs to look like the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 输出需要看起来像以下这样：
- en: '![](img/b7a66970-55b5-4191-ac93-c06d7acec9c8.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7a66970-55b5-4191-ac93-c06d7acec9c8.png)'
- en: Sometimes, the version of Docker can be increased, and the version should be
    at least **17.10.0-ce**.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Docker的版本可以增加，版本至少应该是**17.10.0-ce**。
- en: 'Finally, we will add the current user to the Docker group, and this enables
    us to use the Docker command line without the `sudo` keyword. Type the following
    command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将当前用户添加到Docker组中，这样我们就可以使用Docker命令行而不需要`sudo`关键字。输入以下命令：
- en: '[PRE8]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to log out to effect these changes. Confirm whether the command works
    as expected by typing the following. Make sure that the `sudo` keyword is not
    present:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要注销才能生效这些更改。通过输入以下命令来确认命令是否按预期工作。确保没有出现`sudo`关键字：
- en: '[PRE9]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output should be as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![](img/b3453533-4404-4976-b0af-65e2b18aaaec.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3453533-4404-4976-b0af-65e2b18aaaec.png)'
- en: Introducing Docker concepts
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Docker概念
- en: Now, we will introduce some Docker concepts. This book is not about Docker,
    but some basic instructions on how to use Docker are necessary to interact with
    our containers during the next few chapters. Docker is a de facto tool that is
    used to manage containers.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍一些Docker概念。这本书不是关于Docker的，但为了在接下来的几章中与我们的容器交互，一些基本的Docker使用说明是必要的。Docker是一个事实上的工具，用于管理容器。
- en: Docker images
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker镜像
- en: The Docker image is like a template for a Docker container. It contains a set
    of folders and files that are necessary to start the Docker container. We will
    never have an image in execution mode. The image provides a template for Docker
    Engine to start up the container. We can create an analogy with object orientation
    to understand the process better. The image is like a class that provides an *infrastructure*
    to instantiate some objects, and instances are like a container.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像类似于Docker容器的模板。它包含启动Docker容器所需的一组文件夹和文件。我们永远不会有一个正在执行模式的镜像。镜像为Docker
    Engine启动容器提供了一个模板。我们可以通过类比面向对象来更好地理解这个过程。镜像就像一个提供实例化一些对象的基础设施的**基础设施**的类，而实例就像一个容器。
- en: Also, we have a Docker registry to store our images. These registries can be
    public or private. Some cloud vendors provide these private registries. The most
    famous is Docker Hub. It can be free, but if you choose this option, the image
    should be public. Of course, Docker Hub supports private images, but in this case,
    you have to pay for the service.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有一个Docker仓库来存储我们的镜像。这些仓库可以是公开的或私有的。一些云服务提供商提供这些私有仓库。最著名的是Docker Hub。它可以是免费的，但如果你选择这个选项，镜像应该是公开的。当然，Docker
    Hub支持私有镜像，但在这种情况下，你必须为服务付费。
- en: Containers
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: Docker containers are a *lightweight* virtualization. The term lightweight means
    that Docker uses the SO functionalities to cage the system process and manager
    memory, processors, and folders. This is different from virtualization with VMs
    because, in this mode, the technology needs to simulate the whole SO, drivers,
    and storage. This task consumes a lot of computational power and can sometimes
    be inefficient.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器是一种**轻量级**的虚拟化。轻量级意味着Docker使用SO功能来限制系统进程和管理内存、处理器和文件夹。这与使用VM的虚拟化不同，因为在这种模式下，技术需要模拟整个SO、驱动器和存储。这项任务消耗了大量的计算能力，有时可能效率不高。
- en: Docker networks
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker网络
- en: 'A Docker network is a layer that provides runtime isolation for containers.
    It is a kind of sandbox in which to run containers that are isolated from other
    containers. When the Docker is installed, by default it creates three networks
    that should not be removed. These three networks are as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Docker网络是一个为容器提供运行时隔离的层。它是一种沙盒，可以在其中运行与其他容器隔离的容器。当安装Docker时，默认情况下会创建三个网络，这些网络不应该被删除。这三个网络如下：
- en: '`bridge`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bridge`'
- en: '`none`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none`'
- en: '`host`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`'
- en: Also, Docker provides the user with an easy way to create your network. For
    this purpose, Docker offers two drivers—**bridge** and **overlay**.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Docker还提供了一个用户创建网络的简单方法。为此，Docker提供了两个驱动器——**bridge**和**overlay**。
- en: Bridge can be used for the local environment, and it means this kind of network
    is allowed on a single host. It will be useful for our applications because it
    promotes isolation between containers regarding security. This is a good practice.
    The name of the container attached to this kind of network can be used as a **DNS**
    for the container. Internally, Docker will associate the container name with the
    container IP.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接可用于本地环境，这意味着这种网络允许在单个主机上使用。这对我们的应用程序将很有用，因为它促进了容器之间的隔离，特别是在安全性方面。这是一个好的做法。连接到这种网络的容器的名称可以用作容器的**DNS**。内部，Docker会将容器名称与容器IP关联起来。
- en: The overlay network provides the ability to connect containers to different
    machines. This kind of network is used by Docker Swarm to manage the container
    in a clustered environment. In the newest version, the Docker Compose tool natively
    supports Docker Swarm.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Overlay网络提供了连接不同机器上容器的功能。这种网络由Docker Swarm用于在集群环境中管理容器。在新版本中，Docker Compose工具原生支持Docker
    Swarm。
- en: Docker volumes
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker卷
- en: Docker volumes are the suggested way to persist data outside of a container.
    These volumes are fully managed by Docker Engine, and these volumes can be writable
    and readable depending on the configuration when they are used with a Docker command
    line. The data of these volumes is persisted on a directory path on a host machine.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷是建议在容器外部持久化数据的方式。这些卷完全由Docker Engine管理，当使用Docker命令行时，这些卷可以根据配置进行读写。这些卷的数据持久化在主机上的目录路径上。
- en: There is a command-line tool to interact with volumes. The base of this tool is
    the `docker volume` command; the `--help` argument on the end shows the help instructions.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个命令行工具可以与卷交互。这个工具的基础是`docker volume`命令；末尾的`--help`参数显示了帮助说明。
- en: Docker commands
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker命令
- en: Now we will take a look at Docker commands. These commands are used mainly in
    the development life cycle, commands such as `spin up container`, `stop containers`,
    `remove`, and `inspect`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将查看Docker命令。这些命令主要用于开发生命周期，如`启动容器`、`停止容器`、`删除`和`检查`等命令。
- en: Docker run
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker run
- en: '`docker run` is the most common Docker command. This command should be used
    to start the containers. The basic structure of a command is as follows:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`是最常见的Docker命令。这个命令应该用来启动容器。命令的基本结构如下：'
- en: '[PRE10]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The options arguments enable some configurations for the container, for instance,
    the      `--name` argument permits you to configure a name for a container. It
    is important for DNS when the container is running in a bridge network.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 选项参数允许对容器进行一些配置，例如，`--name`参数允许您为容器配置一个名称。当容器在桥接网络中运行时，这对于DNS来说很重要。
- en: The network settings can be configured on the `run` command as well, and the
    parameter is  `-- net`. This enables us to configure the network to which the
    container will be attached.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 网络设置也可以在`run`命令中进行配置，参数是`--net`。这使我们能够配置容器将要连接的网络。
- en: Another important option is `detached`. It indicates whether the container will
    run in the background. The `-d` parameter instructs Docker to run a container
    in the background.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的选项是`detached`。它表示容器是否将在后台运行。`-d`参数指示Docker在后台运行容器。
- en: Docker container
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker container
- en: 'The `docker container` command permits you to manage the containers. There
    are many commands, as shown in the following list:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker container`命令允许您管理容器。有许多命令，如下列列表所示：'
- en: '`docker container attach`'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container attach`'
- en: '`docker container commit`'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container commit`'
- en: '`docker container cp`'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container cp`'
- en: '`docker container create`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container create`'
- en: '`docker container diff`'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container diff`'
- en: '`docker container exec`'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container exec`'
- en: '`docker container export`'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container export`'
- en: '`docker container inspect`'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container inspect`'
- en: '`docker container kill`'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container kill`'
- en: '`docker container logs`'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container logs`'
- en: '`docker container ls`'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container ls`'
- en: '`docker container pause`'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container pause`'
- en: '`docker container port`'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container port`'
- en: '`docker container prune`'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container prune`'
- en: '`` `docker container rename` ``'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `docker container rename` ``'
- en: '`docker container restart`'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container restart`'
- en: '`docker container rm`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container rm`'
- en: '`docker container run`'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container run`'
- en: '`docker container start`'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container start`'
- en: '`docker container stats`'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container stats`'
- en: '`docker container stop`'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container stop`'
- en: '`docker container top`'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container top`'
- en: '`docker container unpause`'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container unpause`'
- en: '`docker container update`'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container update`'
- en: '`docker container wait`'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker container wait`'
- en: There are some important commands here. The `docker container exec` permits
    you to run commands on a running container. This is an important task to debug
    or look inside the container files. The `docker container prune` removes the stopped
    containers. It is helpful in the development cycle. There are some known commands,
    such as `docker container rm`, `docker container start`, `docker container stop`,
    and `docker container restart`. These commands are self-explanatory and have similar
    behaviors.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些重要的命令。`docker container exec`命令允许您在运行的容器上运行命令。这是一个重要的任务，用于调试或查看容器文件。`docker
    container prune`删除已停止的容器。它在开发周期中很有帮助。有一些已知的命令，如`docker container rm`、`docker container
    start`、`docker container stop`和`docker container restart`。这些命令是自我解释的，并且具有类似的行为。
- en: Docker network
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker network
- en: 'The `docker network` commands enable you to manage the Docker network stuff
    via the command line. There are six basic commands, and the commands are self-explanatory:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker network`命令允许您通过命令行管理Docker网络。有六个基本命令，命令是自我解释的：'
- en: '`docker network create`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker network create`'
- en: '`docker network connect`'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker network connect`'
- en: '`docker network ls`'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker network ls`'
- en: '`docker network rm`'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker network rm`'
- en: '`docker network disconnect`'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker network disconnect`'
- en: '`docker network inspect`'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker network inspect`'
- en: '`docker network create`, `docker network ls`, and `docker network rm` are the
    main commands. It is possible to compare them with the Linux commands, where the
    `rm` command is used to remove things and the `ls` command is usually used to
    list things such as folders. The `create` command should be used to create networks.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker network create`、`docker network ls`和`docker network rm`是主要的命令。可以将它们与Linux命令进行比较，其中`rm`命令用于删除东西，而`ls`命令通常用于列出文件夹等东西。`create`命令应用于创建网络。'
- en: The `docker network connect` and `docker network disconnect` commands allow
    you to connect the running container to the desired network. They may be useful
    in some scenarios.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker network connect`和`docker network disconnect`命令允许您将正在运行的容器连接到所需的网络。在某些场景中可能很有用。'
- en: Finally, the `docker network inspect` command provides detailed information
    on the requested network.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`docker network inspect`命令提供了请求网络的相关详细信息。
- en: Docker volume
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker卷
- en: 'The `docker volume` command permits you to manage the Docker volumes via the
    command-line interface. There are five commands:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker volume`命令允许您通过命令行界面管理Docker卷。这里有五个命令：'
- en: '`docker volume create`'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume create`'
- en: '`docker volume inspect`'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume inspect`'
- en: '`docker volume ls`'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume ls`'
- en: '`docker volume prune`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume prune`'
- en: '`docker volume rm`'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume rm`'
- en: The `docker volume create`, `docker volume rm` and `docker volume ls` commands
    are effectively used to manage the `docker volume` by Docker Engine. The behaviors
    are quite similar to those of the networks, but for volumes. The `create` command
    will create a new volume with some options allowed. The `ls` command lists all
    volumes and the `rm` command will remove the requested volume.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker volume create`、`docker volume rm`和`docker volume ls`命令通过Docker Engine有效地用于管理`docker
    volume`。这些行为与网络的行为非常相似，但针对的是卷。`create`命令将创建一个新的卷，并允许一些选项。`ls`命令列出所有卷，而`rm`命令将删除请求的卷。'
- en: Summary
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the main concepts of Spring Framework. We understood
    the main modules of the framework and how these modules can help developers to
    build applications in different kinds of architecture, such as messaging applications,
    REST APIs, and web portals.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Spring框架的主要概念。我们了解了框架的主要模块以及这些模块如何帮助开发者以不同的架构构建应用程序，例如消息应用程序、REST
    API和Web门户。
- en: We also spent some time preparing our development environment by installing
    essential tools, such as Java JDK, Maven, and IDE. This was a critical step to
    take before we continue to the next chapters.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也花了一些时间准备我们的开发环境，安装了一些必要的工具，例如Java JDK、Maven和IDE。这是我们在继续下一章之前必须采取的关键步骤。
- en: We used Docker to help us to set up a development environment, such as containers
    for databases and delivery for our application in Docker images. We installed
    Docker and looked at the main commands for managing containers, networks, and
    volumes.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Docker帮助我们设置开发环境，例如为数据库和我们的应用程序在Docker镜像中设置容器。我们安装了Docker并查看管理容器、网络和卷的主要命令。
- en: In the next chapter, we will create our first Spring application and put it
    into practice!
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建我们的第一个Spring应用程序并将其付诸实践！
