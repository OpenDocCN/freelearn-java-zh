- en: Chapter 4. Load Balancing with mod_jk
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用mod_jk进行负载均衡
- en: In the previous chapter, we set up two EAP6 servers running in domain mode with
    the `full-ha` profile. In this chapter, let's set up a load balancer that could
    dispatch user requests to these two EAP6 servers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们设置了两个以域模式运行并使用`full-ha`配置文件的EAP6服务器。在本章中，我们将设置一个负载均衡器，以便将用户请求分发到这两个EAP6服务器。
- en: 'The load balancer we use in this chapter is called mod_jk provided by the Apache
    community. It''s easy to use and yet very powerful. The following diagram shows
    how it works:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的负载均衡器是由Apache社区提供的mod_jk。它易于使用且功能强大。以下图表显示了其工作原理：
- en: '![Load Balancing with mod_jk](img/2432OS_04_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![使用mod_jk进行负载均衡](img/2432OS_04_01.jpg)'
- en: 'The following are some notes regarding the previous diagram:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对上一张图表的一些说明：
- en: mod_jk is a dynamic library that can be used as an Apache httpd module. In this
    chapter, we'll learn how to use it.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mod_jk是一个可以作为Apache httpd模块使用的动态库。在本章中，我们将学习如何使用它。
- en: AJP13 is a binary protocol used by mod_jk to proxy user requests to JBoss EAP6
    servers. AJP13 stands for Apache JServ Protocol 1.3 and is widely used by Tomcat,
    Jetty, and other web servers.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJP13是mod_jk用于代理用户请求到JBoss EAP6服务器的二进制协议。AJP13代表Apache JServ Protocol 1.3，并被Tomcat、Jetty和其他Web服务器广泛使用。
- en: When Apache httpd receives user requests, the mod_jk module will wrap the HTTP
    request into AJP13 format and pass it to JBoss EAP6, and the AJP connector in
    JBoss EAP6 will receive the proxy request from httpd. Then, EAP6 will process
    the request and send the response back to Apache httpd. Finally, Apache httpd
    will process the AJP response from JBoss EAP6 and transform it into the real HTTP
    response and send it back to a user.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当Apache httpd收到用户请求时，mod_jk模块将HTTP请求包装成AJP13格式，并将其传递给JBoss EAP6，JBoss EAP6中的AJP连接器将接收来自httpd的代理请求。然后，EAP6将处理请求并将响应发送回Apache
    httpd。最后，Apache httpd将处理来自JBoss EAP6的AJP响应，并将其转换为真实的HTTP响应并发送给用户。
- en: In practice, we usually bind the load balancer to the public IP address so it
    can listen to user requests from the Internet and put the EAP6 worker nodes in
    the local network. In addition, we should also bind a local IP address for the
    load balancer so it can communicate with EAP6 servers. Users just need to communicate
    with the load balancer to access the service, and they don't need to understand
    the architecture behind the load balancer. In addition, exposing the internal
    architecture of a cluster to the public is unnecessary and could introduce a potential
    security risk.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，我们通常将负载均衡器绑定到公网IP地址，以便它可以监听来自互联网的用户请求，并将EAP6工作节点放在本地网络中。此外，我们还应该为负载均衡器绑定一个本地IP地址，以便它可以与EAP6服务器通信。用户只需要与负载均衡器通信即可访问服务，他们不需要了解负载均衡器背后的架构。此外，将集群的内部架构暴露给公众是不必要的，可能会引入潜在的安全风险。
- en: Preparing a machine to install Apache httpd
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备安装Apache httpd的机器
- en: 'As we have seen in the previous chapter, our cluster deployment structure will
    be as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，我们的集群部署结构将如下所示：
- en: '![Preparing a machine to install Apache httpd](img/2432OS_04_03.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![准备安装Apache httpd的机器](img/2432OS_04_03.jpg)'
- en: 'We have configured the two EAP6 servers in the previous chapter. Now, we will
    install Apache httpd and mod_jk on a machine as the load balancer, and let''s
    call it `lb`. This machine will have two IP addresses:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中配置了两个EAP6服务器。现在，我们将在一台机器上安装Apache httpd和mod_jk作为负载均衡器，让我们称它为`lb`。这台机器将有两个IP地址：
- en: A public IP address that will serve user requests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于服务用户请求的公网IP地址
- en: A local IP address that can communicate with JBoss EAP6 servers in the local
    network
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可以与本地网络中的JBoss EAP6服务器通信的本地IP地址
- en: Tip
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If your computer has just one local IP address, you can use it to serve both
    user requests and to communicate with EAP6 servers. But in practice, we usually
    hide the clustering architecture behind a firewall.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您的计算机只有一个本地IP地址，您可以使用它来服务用户请求并与EAP6服务器通信。但在实际操作中，我们通常在防火墙后面隐藏集群架构。
- en: Compiling and installing Apache httpd
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和安装Apache httpd
- en: Now, let's learn how to compile and install Apache httpd. You may ask why we
    need to compile the Apache httpd by ourselves. There are multiple reasons. Usually,
    the httpd is provided by different platforms that have different versions and
    different configurations. For example, if you are using Ubuntu Linux and I'm using
    MacOS, our httpd versions will be different and our configurations of httpd will
    also be different.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何编译和安装 Apache httpd。您可能会问为什么我们需要自己编译 Apache httpd。有多个原因。通常，httpd 由不同平台提供，这些平台有不同的版本和配置。例如，如果您使用
    Ubuntu Linux，而我使用 MacOS，我们的 httpd 版本将不同，我们的 httpd 配置也将不同。
- en: In practice, compiling httpd, mod_jk, and mod_cluster is also common. This is
    because sometimes the newer versions of mod_jk and mod_cluster are released in
    the source code format before the binary format. So, we need to build them by
    ourselves.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，编译 httpd、mod_jk 和 mod_cluster 也是常见的。这是因为有时 mod_jk 和 mod_cluster 的新版本在二进制格式发布之前以源代码格式发布。因此，我们需要自己构建它们。
- en: Downloading httpd
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载 httpd
- en: First, let's download the source code of Apache httpd from its website. We'll
    use the httpd 2.2.x in this book. This branch is currently the most stable version
    to work with mod_jk and mod_cluster. At the time of this writing, the newest version
    in 2.2.x branch is httpd 2.2.25, so let's use this to build our load balancer.
    Please note that the versions of httpd, mod_jk, and mod_cluster are very important,
    so please stick to the versions we used in this book or you may waste time on
    some bugs. You can download httpd 2.2.25 from [http://archive.apache.org/dist/httpd/httpd-2.2.25.tar.gz](http://archive.apache.org/dist/httpd/httpd-2.2.25.tar.gz).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从 Apache httpd 的网站上下载其源代码。在这本书中，我们将使用 httpd 2.2.x。这个分支是目前与 mod_jk 和 mod_cluster
    一起工作的最稳定版本。在撰写本文时，2.2.x 分支的最新版本是 httpd 2.2.25，所以让我们使用这个版本来构建我们的负载均衡器。请注意，httpd、mod_jk
    和 mod_cluster 的版本非常重要，所以请坚持使用本书中使用的版本，否则您可能会在一些错误上浪费时间。您可以从 [http://archive.apache.org/dist/httpd/httpd-2.2.25.tar.gz](http://archive.apache.org/dist/httpd/httpd-2.2.25.tar.gz)
    下载 httpd 2.2.25。
- en: 'After downloading it, please extract it to a directory that you have full access
    to. I''ve extracted it to `/packt/`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，请将其解压到您有完全访问权限的目录中。我已经将其解压到 `/packt/`：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because we'll use the absolute path in some situations, please don't put the
    source in a very deep path, or you'll create unnecessary difficulties when referring
    to your absolute path.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在某些情况下使用绝对路径，请不要将源代码放在非常深的路径中，否则您在引用绝对路径时将创建不必要的困难。
- en: Compiling httpd
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译 httpd
- en: 'To compile httpd, first let''s have a look at the contents of the sources shown
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译 httpd，首先让我们看一下以下所示的源代码内容：
- en: '![Compiling httpd](img/2432OS_04_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![编译 httpd](img/2432OS_04_04.jpg)'
- en: 'In the contents, there is a file called `configure` that will detect your system
    settings and generate the build script `Makefile` for you. Let''s run it first:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容中，有一个名为 `configure` 的文件，它将检测您的系统设置并为您生成构建脚本 `Makefile`。让我们先运行它：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As shown in the previous code snippet, we have provided several options to
    the `configure` script. Let''s check them one by one:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个代码片段所示，我们向 `configure` 脚本提供了几个选项。让我们逐一检查它们：
- en: '| `prefix=/packt/httpd` | The `prefix` option defines the binaries install
    location. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `prefix=/packt/httpd` | `prefix` 选项定义了二进制安装位置。|'
- en: '| `with-mpm=worker` | MPM is the httpd process engine. The `worker` engine
    currently works stable with httpd 2.2.x, so we''ll use it. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `with-mpm=worker` | MPM 是 httpd 进程引擎。`worker` 引擎目前与 httpd 2.2.x 稳定工作，所以我们将使用它。|'
- en: '| `enable-mods-shared=most` | This option will compile the modules into the
    shared library. If we don''t enable it, the modules will be compiled as a static-linked
    library and we cannot disable them separately with the `LoadModule` directive
    in `httpd.conf` later. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `enable-mods-shared=most` | 此选项将模块编译到共享库中。如果我们不启用它，模块将被编译为静态链接库，我们无法在稍后的
    `httpd.conf` 中的 `LoadModule` 指令中单独禁用它们。|'
- en: '| `enable-maintainer-mode` | An option to control the `Automake` tool. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `enable-maintainer-mode` | 一个用于控制 `Automake` 工具的选项。|'
- en: '| `with-expat=builtin` | Expat is an XML parser library written in C. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `with-expat=builtin` | Expat 是用 C 语言编写的 XML 解析库。|'
- en: '| `enable-ssl` | The SSL library will be needed in the chapter that concerns
    the SSL support in the clustering environment. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `enable-ssl` | 在涉及集群环境中 SSL 支持的章节中需要 SSL 库。|'
- en: '| `enable-proxy` | The `proxy` library is a dependency of mod_cluster. We''ll
    learn about mod_cluster in the next chapter. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `enable-proxy` | `proxy` 库是 mod_cluster 的依赖项。我们将在下一章中学习 mod_cluster。|'
- en: '| `enable-proxy-http` | `proxy-http` is needed by mod_cluster. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `enable-proxy-http` | `proxy-http` 是由 mod_cluster 需要的。|'
- en: '| `enable-proxy-ajp` | `proxy-ajp` is needed by mod_jk and mod_cluster. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `enable-proxy-ajp` | `proxy-ajp` 是由 mod_jk 和 mod_cluster 需要的。|'
- en: '| `disable-proxy-balancer` | `proxy-balancer` conflicts with mod_cluster, so
    we must disable it. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `disable-proxy-balancer` | `proxy-balancer` 与 mod_cluster 冲突，因此我们必须禁用它。|'
- en: 'After understanding the meaning of these options, please run the `configure`
    command with the preceding options. Now let''s run `make` to compile httpd:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了这些选项的含义之后，请使用前面的选项运行 `configure` 命令。现在让我们运行 `make` 来编译 httpd：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Wait a few minutes and the compiling should finish.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几分钟，编译应该会完成。
- en: Installing httpd
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 httpd
- en: 'After compiling it, use the following command to install the compiled binaries:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，使用以下命令安装编译后的二进制文件：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see, the compiled binaries are installed in the directory we've set
    the `--prefix` option. For me, it is `/packt/httpd`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，编译的二进制文件安装在我们设置的 `--prefix` 选项指定的目录中。对我来说，它是 `/packt/httpd`。
- en: Starting httpd
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 httpd
- en: 'Now, let''s try to start httpd to see if it''s installed correctly. Go to the
    `bin` directory of your installed httpd and run the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试启动 httpd 来查看它是否正确安装。前往你安装的 httpd 的 `bin` 目录并运行以下命令：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have used the `-k` option with the start command to tell httpd to start and
    the `-f` option with the full path of `httpd.conf` to make sure that the httpd
    server is using the configuration file we installed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在启动命令中使用了 `-k` 选项来告诉 httpd 开始，并使用 `-f` 选项和 `httpd.conf` 的完整路径来确保 httpd 服务器正在使用我们安装的配置文件。
- en: 'We are using the `sudo` command because we need the root access to bind the
    httpd service to port 80\. If the server starts successfully, it will show some
    warnings:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `sudo` 命令是因为我们需要根权限将 httpd 服务绑定到端口 80。如果服务器启动成功，它将显示一些警告：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The warning is caused by the missing config of `ServerName` in `httpd.conf`.
    We''ll configure it correctly later. Now, let''s check the log output. Go to the
    logs directory and check `error_log`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 警告是由 `httpd.conf` 中缺少 `ServerName` 配置引起的。我们稍后会正确配置它。现在，让我们检查日志输出。前往日志目录并检查 `error_log`：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `error_log` file can help us to check if there are any errors when you
    run the httpd server. Here, we have used the tail command to check the tail contents
    of this log, and the `-f` option will keep updating the contents of `error_log`
    into the console. So, please keep the console window open; we can always check
    for any error when we are playing around with httpd. Now, we can use the cURL
    command to test the httpd service:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`error_log` 文件可以帮助我们检查在运行 httpd 服务器时是否有任何错误。在这里，我们使用了 tail 命令来检查这个日志文件的尾部内容，并且
    `-f` 选项会持续更新 `error_log` 的内容到控制台。所以，请保持控制台窗口开启；当我们对 httpd 进行操作时，我们可以随时检查是否有错误。现在，我们可以使用
    cURL 命令来测试 httpd 服务：'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see, the HTTP service is up. Now, let's stop the httpd server and
    do some basic configurations in `httpd.con` `f`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，HTTP 服务正在运行。现在，让我们停止 httpd 服务器并在 `httpd.conf` 中做一些基本的配置。
- en: Stopping httpd
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止 httpd
- en: 'The command to stop httpd is similar to the command that starts it; only replace
    `start` with `stop`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 停止 httpd 的命令与启动它的命令类似；只需将 `start` 替换为 `stop`：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'From `error_log`, we can see that the server has stopped:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `error_log` 我们可以看到服务器已经停止：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring httpd
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 httpd
- en: 'Now, let''s do some basic configuration for httpd. The first step is to back
    up your original `httpd.conf`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为 httpd 进行一些基本的配置。第一步是备份你的原始 `httpd.conf`：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It''s a good habit to keep an original copy of your configuration; in case
    we mess it up, we can restore it later. The next step is to open `http.conf` with
    your favorite editor and find the following code line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 保留配置的原始副本是一个好习惯；以防我们弄错了，我们可以在以后恢复它。下一步是使用你喜欢的编辑器打开 `http.conf` 并找到以下代码行：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need to change it for httpd to listen to the public address:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改它，以便 httpd 监听公共地址：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: I've configured this IP address on the machine lb, and it will be used to listen
    to user requests. Note that it's a good habit to bind httpd to specific IP addresses
    and ports to prevent potential security risks. Besides the public IP address,
    the machine lb also has a local IP address, `10.0.1.32`. The former one will be
    used for public access from users; the latter one sits in the same LAN with the
    two EAP6 servers. If your machine doesn't have two IP addresses, it's okay to
    just use the single address for both purposes. Just keep in mind, in practice,
    we usually put the clustering architecture behind a firewall.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在机器lb上配置了这个IP地址，它将被用来监听用户请求。请注意，将httpd绑定到特定的IP地址和端口是一个良好的习惯，可以防止潜在的安全风险。除了公共IP地址外，机器lb还有一个本地IP地址，`10.0.1.32`。前者将用于用户从公共访问；后者与两个EAP6服务器位于同一局域网中。如果你的机器没有两个IP地址，可以使用单个地址来满足这两个目的。只需记住，在实际操作中，我们通常将集群架构放在防火墙后面。
- en: 'Now let''s go to the next step. We need to find the following line:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进入下一步。我们需要找到以下这一行：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s put our own server name under this line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把我们的服务器名称放在这一行下面：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'That''s all we need to configure in `httpd.conf` for now. Let''s save the configuration
    and quit editing. Next, we need to make sure the hostname lb is mapped to our
    public IP address. For a Linux-like environment, we can put the mapping in `/etc/hosts`.
    Open the `httpd.conf` file and add the following line at the bottom:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们只需要在`httpd.conf`中进行这些配置。让我们保存配置并退出编辑。接下来，我们需要确保主机名lb映射到我们的公共IP地址。对于类Linux的环境，我们可以将映射放在`/etc/hosts`中。打开`httpd.conf`文件，在底部添加以下行：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After saving the configuration file, we can use the `ping` command to test
    the hostname:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 保存配置文件后，我们可以使用`ping`命令来测试主机名：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s start httpd to check our configuration:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动httpd来检查我们的配置：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you still keep the tail `-f logs/error_log` console opened, you can check
    it immediately to see if there are any errors during startup. If everything goes
    fine, we can access the httpd server by the hostname now:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然保留了尾随的`-f logs/error_log`控制台，你可以在启动过程中立即检查是否有任何错误。如果一切顺利，我们现在可以通过主机名访问httpd服务器了：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As shown in the previous code snippet, the hostname lb is bound to the httpd
    server. In addition, during the httpd server startup, note that the warning **httpd:
    Could not reliably determine the server''s fully qualified domain name** disappeared.
    That''s because we have configured `ServerName` in `httpd.conf`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '如前一个代码片段所示，主机名lb被绑定到了httpd服务器上。此外，在httpd服务器启动过程中，请注意，警告**httpd: 无法可靠地确定服务器的完全限定域名**已经消失。这是因为我们已经配置了`ServerName`在`httpd.conf`中。'
- en: As we have configured httpd, the next step is to learn to use mod_jk.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经配置了httpd，下一步就是学习如何使用mod_jk。
- en: Compiling and installing mod_jk
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和安装mod_jk
- en: The full name of mod_jk is Apache Tomcat Connector. It was originally designed
    to proxy HTTP requests from httpd to Tomcat, but as it is a standard AJP connector,
    it can be used on web containers that support the AJP protocol. Because JBoss
    EAP6 supports the AJP13 protocol, we can use mod_jk as its connector.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: mod_jk的全称是Apache Tomcat Connector。它最初是为了代理httpd到Tomcat的HTTP请求而设计的，但由于它是一个标准的AJP连接器，因此它可以用于支持AJP协议的Web容器。因为JBoss
    EAP6支持AJP13协议，所以我们可以使用mod_jk作为其连接器。
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To save some typing, in the following text I'll use JK to refer to mod_jk.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省一些输入，在接下来的文本中，我会用JK来指代mod_jk。
- en: Installing JK
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装JK
- en: The download page of JK is at [http://tomcat.apache.org/download-connectors.cgi](http://tomcat.apache.org/download-connectors.cgi).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: JK的下载页面位于[http://tomcat.apache.org/download-connectors.cgi](http://tomcat.apache.org/download-connectors.cgi)。
- en: 'At the time of this writing, the newest version is 1.2.37, and it''s the version
    we''ll use in this book. Please download the 1.2.37 source bundle from the previously
    mentioned website and unzip it after download. After all this is finished, let''s
    have a look at the contents of the source package:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，最新版本是1.2.37，这是我们在这本书中将使用的版本。请从之前提到的网站下载1.2.37源代码包，并在下载后解压。完成所有这些后，让我们看看源代码包的内容：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As we can see, mod_jk contains many components, but we only need to build the
    codes in the native directory. Let''s go into this directory and run the `configure`
    script inside:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，mod_jk包含许多组件，但我们只需要在native目录下构建代码。让我们进入这个目录并运行里面的`configure`脚本：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Please note that we have been provided with the`—with-apxs` option to configure,
    because during the building process, it needs the httpd binaries. The configuration
    process is shown as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们提供了`—with-apxs`选项进行配置，因为在构建过程中，它需要httpd的二进制文件。配置过程如下所示：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now let''s install it by running `make install`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行`make install`来安装它：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: I have trimmed the log output and just left the important parts. From the previous
    log, we can see that the compiled shared binary `mod_jk.so` has been copied to
    `/packt/httpd/modules/`. Because we have set the httpd path using the `--with-apxs`
    option, during the installation process, the build script knows where to put the
    compiled binary.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经剪掉了日志输出，只留下了重要的部分。从前面的日志中，我们可以看到编译后的共享二进制文件`mod_jk.so`已被复制到`/packt/httpd/modules/`。因为我们使用`--with-apxs`选项设置了httpd路径，在安装过程中，构建脚本知道将编译的二进制文件放在哪里。
- en: At the end of the log, JK has reminded us to configure `httpd.conf` to enable
    it. In the following section, we will perform this task.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志的末尾，JK提醒我们配置`httpd.conf`以启用它。在下一节中，我们将执行此任务。
- en: Configuring JK
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置JK
- en: 'In the JK source, there is a directory called `conf`. In this directory, JK
    has provided us some sample configuration files that we can refer to:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在JK源中，有一个名为`conf`的目录。在这个目录中，JK为我们提供了一些可以参考的示例配置文件：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s copy these files into httpd. First, let us create a new directory called
    `conf.d` in httpd:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些文件复制到httpd中。首先，让我们在httpd中创建一个名为`conf.d`的新目录：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, let''s copy the configuration file from JK source to `conf.d`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们将配置文件从JK源复制到`conf.d`：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We want httpd to load `conf.d/httpd-jk.conf` during startup. To achieve this
    goal, please open `conf/httpd.conf` and find many lines starting with `LoadModule`.
    At the bottom of these `LoadModule` directives, let''s put a new code line:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望httpd在启动时加载`conf.d/httpd-jk.conf`。为了实现这个目标，请打开`conf/httpd.conf`并找到以`LoadModule`开头的多行。在这些`LoadModule`指令的底部，让我们添加一行新代码：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The modification is shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 修改如下所示：
- en: '![Configuring JK](img/2432OS_04_08.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![配置JK](img/2432OS_04_08.jpg)'
- en: The `Include` directive will tell httpd to load the files with suffix `.conf`
    in `conf.d` during startup. As we have put `httpd-jk.conf` into `conf.d`, it will
    be loaded during the httpd startup. Now let's move to JK configuration.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Include`指令将告诉httpd在启动时加载`conf.d`中后缀为`.conf`的文件。由于我们已经将`httpd-jk.conf`放入`conf.d`，它将在httpd启动时被加载。现在让我们转到JK配置。'
- en: Configuring httpd-jk.conf
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置httpd-jk.conf
- en: 'We need to configure the JK properly. Please open the `httpd-jk.conf` in `conf.d`
    and let''s check some important configurations:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要正确配置JK。请打开`conf.d`中的`httpd-jk.conf`文件，并检查一些重要的配置：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As shown in the previous code line, we can see that the `mod_jk.so` library
    is loaded.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一行代码所示，我们可以看到`mod_jk.so`库已被加载。
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'By default, JK will find `workers.properties` in the `conf` directory. This
    property file is used to define our cluster structure. Let''s copy the sample
    `config` file named `workers.properties.minimal` from the JK source directory
    to `conf.d`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，JK将在`conf`目录中查找`workers.properties`文件。此属性文件用于定义我们的集群结构。让我们将JK源目录中的示例`config`文件`workers.properties.minimal`复制到`conf.d`：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Later, we''ll go through the details in this file. Now, let''s go back to check
    `httpd-jk.conf`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将详细讨论此文件。现在，让我们回到检查`httpd-jk.conf`：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `JkLogFile` directive defines the logfile used by JK.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`JkLogFile`指令定义了JK使用的日志文件。'
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `JkLogLevel` directive defines the log level of JK. You can change it to
    `debug` to see more details when JK is running.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`JkLogLevel`指令定义了JK的日志级别。您可以将它更改为`debug`以在JK运行时查看更多详细信息。'
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is the JK shared memory file. Just keep it as it is. Now, let''s see the
    following two JK modules:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是JK共享内存文件。只需保持原样即可。现在，让我们看看以下两个JK模块：
- en: '[PRE33]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The previously mentioned two locations are for JK management components. We
    can define them in `workers.properties`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的两个位置是JK管理组件的位置。我们可以在`workers.properties`中定义它们：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can see that `jk-status` and `jk-manager` are actually the same thing:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`jk-status`和`jk-manager`实际上是同一件事：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Just one of them is `read_only`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 其中之一是`read_only`：
- en: '[PRE36]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The other one can accept the management command. In this book, we''ll just
    configure JK using the configuration file and won''t cover the topic of `jk-manager`
    usages. Now, let''s go back to the configuration file. The access scope of `jk-status`
    and `jk-manager` are defined in the `Location` settings:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以接受管理命令。在这本书中，我们将仅使用配置文件来配置 JK，而不会涵盖 `jk-manager` 的使用话题。现在，让我们回到配置文件。`jk-status`
    和 `jk-manager` 的访问范围在 `Location` 设置中定义：
- en: '[PRE37]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'That means we can only access `/jk-status` and `/jk-manager` from the localhost.
    This is secure because we don''t want these management components to be accessed
    remotely. To support it, we need to add a line in `conf/httpd.conf`. Under the
    existing `Listen` section, add another directive:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们只能从本地主机访问 `/jk-status` 和 `/jk-manager`。这是安全的，因为我们不希望这些管理组件被远程访问。为了支持它，我们需要在
    `conf/httpd.conf` 中添加一行。在现有的 `Listen` 部分下，添加另一个指令：
- en: '[PRE38]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It should look like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该看起来像以下这样：
- en: '![Configuring httpd-jk.conf](img/2432OS_04_09.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![配置 httpd-jk.conf](img/2432OS_04_09.jpg)'
- en: This will let httpd to accept connection from the localhost. That's all we need
    to do to enable management consoles. Now, let's check `worker` `s.properties`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让 httpd 接受来自本地的连接。这就是我们启用管理控制台所需做的全部工作。现在，让我们检查 `worker` `s.properties`。
- en: The workers.properties configuration
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作节点配置文件
- en: 'We will define our cluster structure in `workers.properties` that we''ve copied
    to the `conf` directory. The content of this file is straightforward, which is
    shown as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `conf` 目录中复制的 `workers.properties` 文件中定义我们的集群结构。该文件的内容很简单，如下所示：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The first line of configuration defines two workers: `lb` and `jk-status`.
    We know that `jk-status` is used for mounting the management component of JK,
    and its type is `status`.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 配置的第一行定义了两个工作节点：`lb` 和 `jk-status`。我们知道 `jk-status` 用于挂载 JK 的管理组件，其类型是 `status`。
- en: 'For the worker `lb`, we see that its type is `lb`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工作 `lb`，我们看到它的类型是 `lb`：
- en: '[PRE40]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `lb` type defines a load balancer in JK, and it can be used to dispatch
    user requests to worker nodes. We see that the example provided by JK has one
    worker node called `node1`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`lb` 类型在 JK 中定义了一个负载均衡器，它可以用来将用户请求分发到工作节点。我们看到 JK 提供的示例中有一个名为 `node1` 的工作节点：'
- en: '[PRE41]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'By default, `node1` is a node that supports the AJP13 protocol:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`node1` 是一个支持 AJP13 协议的节点：
- en: '[PRE42]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The preceding configuration needs to be modified. We have two worker nodes,
    which are the two EAP6 servers running on master and slave, and their IP addresses
    are `10.0.1.13` and `10.0.1.19` as we know.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置需要修改。我们有两个工作节点，即运行在主节点和从节点上的两个 EAP6 服务器，它们的 IP 地址如我们所知分别是 `10.0.1.13` 和
    `10.0.1.19`。
- en: 'We know the two EAP6 servers are running in the domain mode and we are using
    `other-server-group`, and master is running as the domain controller. So let''s
    check `domain.xml` on master:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道两个 EAP6 服务器以域模式运行，我们正在使用 `other-server-group`，主节点作为域控制器运行。因此，让我们检查主节点上的
    `domain.xml`：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `other-server-group` uses the `full-ha-sockets` binding group. And the
    AJP port is bound to 8009\. But don''t forget the `port-offset` settings in `host.xml`
    on master and slave. On the master system, we have the following code snippet:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`other-server-group` 使用了 `full-ha-sockets` 绑定组。并且 AJP 端口绑定到了 8009。但别忘了在主节点和从节点上的
    `host.xml` 中的 `port-offset` 设置。在主节点系统上，我们有以下代码片段：'
- en: '[PRE44]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'On the slave system, we have the following code snippet:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在从节点系统上，我们有以下代码片段：
- en: '[PRE45]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'So their bound AJP ports are *8009 + 250 = 8259*. According to the settings
    in these two worker nodes, let''s modify the configuration in `workers.properties`.
    The following comprises the full contents:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它们绑定的 AJP 端口是 *8009 + 250 = 8259*。根据这两个工作节点的设置，让我们修改 `workers.properties`
    中的配置。以下是其全部内容：
- en: '[PRE46]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the previous configuration file, we configured our two EAP6 servers as the
    worker nodes of `lb`. The following diagram shows their relationship:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配置文件中，我们将我们的两个 EAP6 服务器配置为 `lb` 的工作节点。以下图表显示了它们之间的关系：
- en: '![The workers.properties configuration](img/2432OS_04_10.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![工作节点配置文件](img/2432OS_04_10.jpg)'
- en: 'After configuring `workers.properties`, we need to go back to `conf.d/httpd-jk.conf`
    to add a mount point to our cluster. Under the `JkWorkersFile` directive, add
    the following line of code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 `workers.properties` 之后，我们需要回到 `conf.d/httpd-jk.conf` 以向我们的集群添加一个挂载点。在 `JkWorkersFile`
    指令下，添加以下代码行：
- en: '[PRE47]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The configuration is shown as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 配置如下所示：
- en: '![The workers.properties configuration](img/2432OS_04_11.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![工作节点配置文件](img/2432OS_04_11.jpg)'
- en: It will tell httpd to redirect all the HTTP requests to `lb`, and `lb` will
    proxy the request to EAP6 servers with the AJP13 protocol. That's all for the
    configuration. Now let's test our cluster.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 它将告诉httpd将所有HTTP请求重定向到`lb`，而`lb`将通过AJP13协议代理请求到EAP6服务器。这就是配置的全部内容。现在让我们测试我们的集群。
- en: Testing the cluster
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试集群
- en: Please shut down the httpd server and then restart it. If you have followed
    all the instructions in the previous sections, the server should start correctly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请关闭httpd服务器然后重新启动它。如果你已经遵循了前几节中的所有说明，服务器应该可以正确启动。
- en: Make sure that you have started two EAP6 servers in the domain mode, and the
    project `cluster-demo1` has been deployed to `other-server-group`. We'll use these
    two worker nodes for testing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经以域模式启动了两个EAP6服务器，并且项目`cluster-demo1`已经部署到了`other-server-group`。我们将使用这两个工作节点进行测试。
- en: As we have bound the public IP address of the load balancer to the hostname
    `lb`, let's access it by the hostname. Open a web browser and enter the URL `http://lb`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将负载均衡器的公网IP地址绑定到了主机名`lb`，让我们通过主机名来访问它。打开一个网页浏览器并输入URL `http://lb`。
- en: 'If everything goes well, we should see the EAP home page now:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们现在应该能看到EAP主页：
- en: '![Testing the cluster](img/2432OS_04_12.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![测试集群](img/2432OS_04_12.jpg)'
- en: 'From the previous screenshot, we see that the request is forwarded to the EAP6
    servers. Now let''s try to access `cluster-demo1`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的截图，我们看到请求被转发到了EAP6服务器。现在让我们尝试访问`cluster-demo1`：
- en: '[PRE48]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can check the server output of the two EAP6 servers to see which is actually
    processing this request. In my cluster, this request is handled by `master-server`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查两个EAP6服务器的服务器输出，以查看哪个实际上正在处理这个请求。在我的集群中，这个请求由`master-server`处理：
- en: '[PRE49]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s shut down the EAP6 server that is serving this request. For my cluster,
    I press *Ctrl* + *C* on my `master-server` to shut down:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关闭正在处理这个请求的EAP6服务器。对于我的集群，我在`master-server`上按下*Ctrl* + *C*来关闭：
- en: '[PRE50]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, I use `cURL` to access the load balancer again. The request is forwarded
    to another EAP server. It is `slave-server` processing the user request this time:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我使用`cURL`再次访问负载均衡器。请求被转发到了另一个EAP服务器。这次是`slave-server`在处理用户请求：
- en: '[PRE51]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: From the users' perspective, they are not affected by one worker node shutdown
    in the cluster.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来看，集群中一个工作节点关闭不会对他们产生影响。
- en: The jk-status module
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jk-status模块
- en: 'Finally, let''s have a brief look at the `jk-status` module. Open your web
    browser from the machine of your load balancer. Then, access the `jk-status` by
    its URL: `http://localhost/jk-status`.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们简要看看`jk-status`模块。从你的负载均衡器机器上打开你的网页浏览器。然后，通过其URL访问`jk-status`：`http://localhost/jk-status`。
- en: 'We will see the status of two worker nodes:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到两个工作节点的状态：
- en: '![The jk-status module](img/2432OS_04_14.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![jk-status模块](img/2432OS_04_14.jpg)'
- en: From the previous screenshot, we can check the running statuses of the two EAP6
    servers and how many requests they have processed.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的截图，我们可以检查两个EAP6服务器的运行状态以及它们处理了多少请求。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to use JK as a load balancer to proxy user
    requests. As you can see, JK is very easy to use and yet powerful. It relies on
    `workers.properties` to define the structure of the cluster. When a worker node
    in a cluster crashes, JK will failover the user requests to other nodes in the
    cluster. We haven't touched all the features that JK has provided to us, for example,
    a fine-grained route matching and the usage of `jk-status` for management tasks.
    You can refer to the JK online document for these topics.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用JK作为负载均衡器代理用户请求。正如你所见，JK非常易于使用且功能强大。它依赖于`workers.properties`来定义集群的结构。当一个集群中的工作节点崩溃时，JK会将用户请求故障转移到集群中的其他节点。我们还没有触及JK为我们提供的所有功能，例如，细粒度路由匹配和`jk-status`在管理任务中的使用。你可以参考JK在线文档了解这些主题。
