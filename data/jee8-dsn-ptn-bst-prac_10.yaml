- en: Deployment Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署模式
- en: 'In this chapter, we will be looking at deployment patterns, why we use them,
    and how they impact the delivery of applications. We will also cover the concepts
    of canary deployment, blue/green deployment, A/B deployment, and continuous deployment.
    After reading this chapter, we should be familiar with the concept of deployment
    patterns. The topics we will cover in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨部署模式，为什么我们会使用它们，以及它们如何影响应用程序的交付。我们还将涵盖金丝雀部署、蓝绿部署、A/B 部署和持续部署的概念。阅读本章后，我们应该熟悉部署模式的概念。本章我们将涵盖以下主题：
- en: The concept of deployment patterns
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署模式的概念
- en: The concept of canary deployment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金丝雀部署的概念
- en: The concept of blue/green deployment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝绿部署的概念
- en: The concept of A/B testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A/B 测试的概念
- en: The concept of continuous deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署的概念
- en: Explaining the concept of deployment patterns
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释部署模式的概念
- en: Applications constantly receive updates that function to create new features
    or correct any problems. These new features and updates need to be promoted to
    a production-level without causing any problems or delays to a service. Furthermore,
    it is sometimes necessary to deliver a new version of an application to a select
    group of users, such as those in certain countries or certain business areas.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序不断接收更新，这些更新旨在创建新功能或纠正任何问题。这些新功能和更新需要推广到生产级别，而不会造成任何问题或延迟服务。此外，有时需要将应用程序的新版本交付给特定用户群体，例如某些国家或某些业务领域的用户。
- en: When we talk about *delivery* in this context, we are referring to releasing
    a new version of an application into the production environment. A software project
    has various steps that need to be evaluated and considered in order to permit
    the delivery of good software.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这个背景下谈论*交付*时，我们是指将应用程序的新版本发布到生产环境中。一个软件项目有各种步骤需要评估和考虑，以便允许交付优质的软件。
- en: These steps include following a good process to get the business role, a good
    process for testing the application, a good process for developing the code of
    the application, and a good process for delivering the project to production,
    which is the aim of the project. All software projects have one important common objective—to
    deliver good, high-quality software without causing any collateral effects. The
    deployment step is a very important step in particular, as this is when the software
    is delivered; the overall goal of the project will be achieved here, but if any
    errors occur, then all projects can be impaired. As a result of this step, deployment
    patterns were created.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤包括遵循良好的流程以获得业务角色、测试应用程序的良好流程、开发应用程序代码的良好流程以及将项目交付到生产环境的良好流程，这是项目的目标。所有软件项目都有一个重要的共同目标——在不产生任何附带影响的情况下交付优质、高质量的软件。特别是部署步骤是一个非常重要的步骤，因为这是软件交付的时候；项目的整体目标将在这里实现，但如果发生任何错误，则所有项目都可能受到影响。因此，部署模式应运而生。
- en: 'Deployment patterns (also known as **deployment strategies**) are a set of
    solutions for common deployment-related problems. These patterns make the deployment
    process safer and mitigate the chance of errors occurring in new releases. Some
    examples of deployment patterns include:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 部署模式（也称为**部署策略**）是一组针对常见部署相关问题的解决方案。这些模式使部署过程更安全，并降低新版本中发生错误的可能性。一些部署模式的例子包括：
- en: Canary deployment
  id: totrans-12
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: Blue/green deployment
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: A/B testing
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: A/B 测试
- en: 'Continuous deployment is also a deployment pattern, but we did not include
    this in the list because it is the most comprehensive method, one that creates
    a pipeline and works at all steps of the delivery. Furthermore, continuous deployment
    more accurately describes the solution of automating the development stages, and
    this can be used with any of the deployment patterns listed previously. With this,
    the patterns we mentioned work in reduced scope and the continuous deployment
    pattern works on a large scope. In the following diagram, you can see how these
    two types of deployment patterns work, as well as the stages they follow:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署也是一种部署模式，但我们没有将其包括在列表中，因为它是最全面的方法，它创建了一个管道并在交付的所有步骤中工作。此外，持续部署更准确地描述了自动化开发阶段的解决方案，并且可以与之前列出的任何部署模式一起使用。因此，我们提到的模式在较小的范围内工作，而持续部署模式在较大的范围内工作。在以下图中，您可以了解这两种类型的部署模式是如何工作的，以及它们遵循的阶段：
- en: '![](img/5771a09c-d28f-4246-85b1-1ff5570dd062.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5771a09c-d28f-4246-85b1-1ff5570dd062.png)'
- en: In some literature, the concept of continuous deployment is covered together
    with the concept of continuous delivery. This is because these two concepts are
    very similar, with only some small differences between them. The difference between
    these concepts will be shown in detail in the *Explaining the concept of continuous
    deployment* section of this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些文献中，持续部署的概念与持续交付的概念一起被覆盖。这是因为这两个概念非常相似，它们之间只有一些细微的差别。这些概念的差异将在本章的“解释金丝雀部署的概念”部分详细展示。
- en: Explaining the concept of canary deployment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释金丝雀部署的概念
- en: As previously mentioned, when we write a new version of an application, we need
    to deliver it without stopping or delaying the service in any way. An important
    step, therefore, is to deploy and test the new version first. If an error occurs,
    we will then need to rollback the deployments and maintain the old version of
    the application until any problems with the new version are solved. The canary
    deployment was created to so solve deployment-related problems such as this.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们编写应用的新版本时，我们需要在不停止或以任何方式延迟服务的情况下交付它。因此，一个重要的步骤是首先部署和测试新版本。如果发生错误，我们需要回滚部署并维护应用的旧版本，直到解决新版本中的任何问题。金丝雀部署就是为了解决此类部署相关的问题而创建的。
- en: 'The canary deployment is a deployment pattern that allows us to deliver a new
    version of an application to the subset of a server. Then, the new version of
    the application can be tested, and, if an error occurs, then the delivery rolls
    back and keeps the old version, propagating a new version for the remaining servers.
    In this pattern, we can define some servers as canary servers. The deployment
    first occurs in the canary server, after which a test is done on the canary server.
    If satisfied, the new version is propagated (or deployed) to the remaining servers.
    This pattern consists of the following four basic steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署是一种部署模式，它允许我们将应用的新版本交付给服务器子集。然后，可以测试应用的新版本，如果发生错误，则交付回滚并保持旧版本，将新版本传播到剩余服务器。在此模式中，我们可以定义一些服务器为金丝雀服务器。部署首先在金丝雀服务器上发生，之后在金丝雀服务器上进行测试。如果满意，新版本将被传播（或部署）到剩余服务器。此模式包括以下四个基本步骤：
- en: Defining the canary servers
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义金丝雀服务器
- en: Deploying the application to canary servers
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用部署到金丝雀服务器
- en: Testing the application and verifying whether it satisfies our criteria
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试应用并验证它是否满足我们的标准
- en: Deploying the application to the remaining servers
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用部署到剩余服务器
- en: 'The following diagram shows a visual representation of these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了这些步骤的视觉表示：
- en: '![](img/9dfe427c-2e3e-4013-96d7-be57c20f6979.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图示](img/9dfe427c-2e3e-4013-96d7-be57c20f6979.png)'
- en: 'To implement the canary deployment as a solution for delivering an application,
    you will first need to configure a proxy that redirects the requests to servers
    that are not canary servers. The following diagram demonstrates how canary deployment
    works:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要将金丝雀部署作为交付应用的解决方案，您首先需要配置一个代理，该代理将请求重定向到非金丝雀服务器。以下图示展示了金丝雀部署的工作原理：
- en: '![](img/be3223dc-d22e-4d4f-8083-6349e31cc926.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图示](img/be3223dc-d22e-4d4f-8083-6349e31cc926.png)'
- en: Defining the canary servers
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义金丝雀服务器
- en: 'In this step, some servers will be selected as a canary server, which is the
    server used to test a new version after deploying an application in the remaining
    servers. Here, we select which servers should be the canary servers. It is very
    important to ensure that all steps of canary deployment are completed without
    impacting the users who access the application. Some important questions to consider
    when creating definitions are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，将选择一些服务器作为金丝雀服务器，这是在剩余服务器上部署应用后用于测试新版本的服务器。在此，我们选择哪些服务器应该是金丝雀服务器。确保所有金丝雀部署步骤完成而不影响访问应用的用户非常重要。在创建定义时需要考虑的一些重要问题如下：
- en: Do we want to test the behavior of an application in multiple instances of a
    server?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否想要测试应用在多个服务器实例中的行为？
- en: How many servers can I use as canary servers without impacting user access?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以使用多少服务器作为金丝雀服务器而不会影响用户访问？
- en: How well does my application work with the new version and the old version of
    an application in the same environment?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的程序与同一环境中的新版本和旧版本程序的工作情况如何？
- en: What tests will be executed?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将执行哪些测试？
- en: The amount of canary servers used is very important, so we recommend that the
    number of canary servers does not exceed 50% of the total servers in the production
    environment. Furthermore, when defining the number of canary servers, we need
    to decide what kind of scenarios we will be testing for. Whether we test the application's
    ability to work well with multiple servers or not, we will still need at least
    two canary servers. Using two canary servers is often a good idea, as the number
    is rarely larger than 50% of the total servers in the production environment.
    In other words, the total number of servers in the production environment is usually
    bigger than four. If we imagine that the total of servers in a production environment
    is four when we use two servers as canary servers, then the other two servers
    will be used to access the old version of the application. Depending on the number
    of users with access, the application should not have any performance problems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的金丝雀服务器数量非常重要，所以我们建议金丝雀服务器的数量不超过生产环境中服务器总数的50%。此外，在定义金丝雀服务器的数量时，我们需要决定我们将测试哪些场景。无论我们是否测试应用程序与多台服务器良好工作的能力，我们仍然至少需要两个金丝雀服务器。使用两个金丝雀服务器通常是一个好主意，因为这个数字很少会超过生产环境中服务器总数的50%。换句话说，生产环境中的服务器总数通常大于四台。如果我们假设在生产环境中使用两个服务器作为金丝雀服务器时，总共有四台服务器，那么其他两台服务器将用于访问应用程序的旧版本。根据访问用户数量，应用程序不应该有任何性能问题。
- en: Deploying the application to canary servers
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到金丝雀服务器上
- en: When an application is deployed in a canary server, the canary server cannot
    be accessed by users and the proxy cannot redirect a request to these servers.
    At this moment, the production environment stays with two versions of the application—the
    old version and the new version. The application needs to prepare to work with
    two versions in the same environment. Note that users don't lose access to the
    application in this scenario, and the deployment of newer versions is done with
    transparent behavior and without impacting users.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序部署在金丝雀服务器上时，用户无法访问金丝雀服务器，代理也无法将请求重定向到这些服务器。此时，生产环境保持两个应用程序版本——旧版本和新版本。应用程序需要准备在相同环境中与两个版本一起工作。请注意，在这种情况下，用户不会失去对应用程序的访问，新版本的部署以透明的方式完成，且不会影响用户。
- en: Testing the application and verifying whether it satisfies our criteria
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用程序并验证其是否满足我们的标准
- en: In this step, the application is tested to verify whether or not our criteria
    are satisfied. This is done by evaluating certain processes, such as integrating
    with other applications, CPU, memory, disk usage, and database connection. These
    tests can be done through an automation test, an internal user, or through a few
    end users. If an error is found in this step, the deployment is aborted and rolled
    back and the canary servers receive the old version, which is then made available
    to end users.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，通过评估某些过程来测试应用程序是否满足我们的标准，例如与其他应用程序集成、CPU、内存、磁盘使用率和数据库连接。这些测试可以通过自动化测试、内部用户或少数最终用户来完成。如果在这一步骤中发现错误，则部署将被中止并回滚，金丝雀服务器将接收旧版本，然后提供给最终用户。
- en: Deploying the application to remaining servers
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到剩余的服务器上
- en: This step is only initialized if an application has been approved and verified
    as satisfactory. When this step is started, the canary server becomes a server
    for the end user access; the other servers do not receive a new request here because
    the process of deployment will have been started. The proxy then redirects all
    end users' requests to servers with a new version (in other words, the canary
    servers) and the deployment of another server is started. Once deployment is complete,
    all servers are able to receive access to the end users.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤仅在应用程序已被批准并验证为满意的情况下初始化。当此步骤开始时，金丝雀服务器成为最终用户访问的服务器；其他服务器不会在此接收新的请求，因为部署过程已经开始。然后代理将所有最终用户的请求重定向到具有新版本（换句话说，金丝雀服务器）的服务器，并开始另一个服务器的部署。一旦部署完成，所有服务器都能够接收来自最终用户的访问。
- en: With canary deployment, the end user should not be aware that deployment is
    occurring. Users will only be aware if an interface is changed, or if some functionality
    is made available or unavailable to them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用金丝雀部署时，最终用户不应意识到正在发生部署。只有在接口发生变化，或者某些功能对用户可用或不可用时，用户才会意识到。
- en: Explaining the concept of blue/green deployment
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释蓝/绿部署的概念
- en: Blue/green deployment is very similar to canary deployment in the sense that
    it deploys new versions of an application using the process of partition. The
    blue/green method deploys the application into a subset of servers in the production
    environment and then propagates the new version to the remaining servers. This
    deployment pattern differs from canary deployment with regard to its goals, because
    the blue/green deployment aims to reduce an application's downtime during deployment.
    With canary deployment, however, the goal is to reduce the occurrence of an error
    in the production environment associated with the new version. Furthermore, with
    canary deployment, the production environment can stay with both a new version
    and an old version and receive requests simultaneously, while in a blue/green
    deployment, only one version responds to requests.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署在某种程度上与金丝雀部署相似，因为它使用分区过程部署应用程序的新版本。蓝绿方法将应用程序部署到生产环境中的服务器子集，然后将新版本传播到剩余的服务器。这种部署模式在目标上与金丝雀部署不同，因为蓝绿部署的目标是在部署期间减少应用程序的停机时间。然而，金丝雀部署的目标是减少与新版本相关的生产环境中错误的发生。此外，在金丝雀部署中，生产环境可以同时保留新版本和旧版本并接收请求，而在蓝绿部署中，只有一个版本响应请求。
- en: The **blue/green deployment** is a deployment pattern that makes it possible
    to deploy a new version of an application without making the application inactive
    to the end user. With this pattern, the deployment is effected with a group of
    servers. If the deployment is completed successfully, then the remaining servers
    are deployed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**蓝绿部署**是一种部署模式，它使得在不对最终用户使应用程序失效的情况下部署应用程序的新版本成为可能。使用此模式，部署通过一组服务器进行。如果部署成功完成，则剩余的服务器将进行部署。'
- en: 'This pattern has the following three steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式有三个步骤：
- en: Defining a group of servers to receive the first deployment
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义接收首次部署的服务器组
- en: Deploying the application to a group of servers
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序部署到一组服务器
- en: Deploying the application to the remaining server
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序部署到剩余的服务器
- en: Defining the group of servers to receive the first deployment
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义接收首次部署的服务器组
- en: On the blue/green deployment, defining the group of servers to receive the first
    deployment is very easy because no tests will run and nothing will be checked;
    the process of deployment simply needs to be completed successfully. A good practice
    is to divide the production environment into two groups of servers and select
    one group to receive the deployment first. Each group will generally have approximately
    50% of production servers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝绿部署中，定义接收首次部署的服务器组非常简单，因为不会运行任何测试，也不会进行检查；部署过程只需成功完成即可。一个良好的做法是将生产环境分为两组服务器，并选择其中一组首先接收部署。每个组通常将拥有大约50%的生产服务器。
- en: Deploying the application to a group of servers
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到一组服务器
- en: 'In this step, the requests are redirected to the server of the group in order
    for it to deploy, and the group to deploy receives the deployment of a new version
    of an application. All servers of the group to deploy will be dead in this time
    and will only respond to requests once the process of deployment in the group
    has finished. The following diagram illustrates an example of this process:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，请求被重定向到该组的服务器，以便进行部署，并且要部署的组接收新版本应用程序的部署。在此期间，要部署的组的所有服务器都将处于“死亡”状态，并且只有在组内的部署过程完成后才会响应请求。以下图表说明了此过程的示例：
- en: '![](img/694a306f-f915-4d48-978d-78615fdda8b5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/694a306f-f915-4d48-978d-78615fdda8b5.png)'
- en: Deploying the application to the remaining server
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序部署到剩余的服务器
- en: 'This step is started only if the deployment process was successfully completed
    with the group that was selected to receive the first deployment. When this step
    is started, the group of servers selected to receive the first deployment returns
    to the activity, and all requests sent by the end user are processed by servers
    of this group with a new version deployed. The deployment of the remaining servers
    is then initialized, and, until deployment is complete, the remaining servers are
    dead. When deployment is finished, all servers will be able to receive and process
    requests, and all servers will stay with the new version of the application. This
    process is illustrated in the following diagram:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当部署过程成功完成，并且选择了接收首次部署的组时，此步骤才会启动。当此步骤启动时，选择接收首次部署的服务器组返回活动状态，并且所有由最终用户发送的请求都由部署了新版本的这个组的服务器处理。然后初始化剩余服务器的部署，并且在部署完成之前，剩余的服务器处于“死亡”状态。当部署完成后，所有服务器都将能够接收和处理请求，并且所有服务器都将保持应用程序的新版本。此过程在以下图表中展示：
- en: '![](img/80e628d2-3fb3-4d54-8513-65fbcb3eb404.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80e628d2-3fb3-4d54-8513-65fbcb3eb404.png)'
- en: Explaining the concept of A/B testing
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释A/B测试的概念
- en: We may sometimes update something in our application and want to check its impact
    on end users and their behavior. Generally, these kinds of updates relate to the
    usability or popularity of an application and are associated with UI changes.
    To allow us to check the impact of an update on an application, we need to create
    groups of end users, who will be thrown the new updates and asked to evaluate
    them. The deployment patterns we've already discussed don't solve this problem
    for us as they're unable to throw a new version of the application to a separate
    group of end users. Although they allow us to test the functionality of the application
    in a separated group, that group doesn't persist for very long.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有时可能会更新我们的应用程序，并希望检查其对最终用户及其行为的影响。通常，这类更新与应用程序的可用性或受欢迎程度有关，并关联到UI更改。为了使我们能够检查更新对应用程序的影响，我们需要创建一组最终用户组，他们将收到新的更新并要求评估它们。我们之前讨论的部署模式并不能解决我们的问题，因为它们无法将应用程序的新版本推向一个单独的最终用户组。尽管它们允许我们在一个分离的组中测试应用程序的功能，但那个组并不持久。
- en: 'A/B testing, however, is a deployment pattern that allows us to throw a new
    version of an application to a selected group of end users only. This makes it
    possible to evaluate the impact of a new version of an application on end users
    and therefore decide whether or not it will be thrown to all end users. This deployment
    pattern is commonly used by popular applications such as Facebook, LinkedIn, and
    Twitter, as these applications are most successful when their features are popular
    among users. This pattern can be implemented with application-level switches or
    with a proxy that redirects end users to a respective application. The following
    diagram illustrates an example of the A/B testing pattern:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，A/B测试是一种部署模式，它允许我们仅将应用程序的新版本推向选定的最终用户组。这使得我们能够评估应用程序新版本对最终用户的影响，从而决定是否将其推向所有最终用户。这种部署模式在Facebook、LinkedIn和Twitter等流行应用程序中普遍使用，因为这些应用程序在其功能在用户中受欢迎时最为成功。此模式可以通过应用级开关或通过将最终用户重定向到相应应用程序的代理来实现。以下图表展示了A/B测试模式的示例：
- en: '![](img/e53a2846-5f73-4cf0-8a8c-dd691a948fca.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e53a2846-5f73-4cf0-8a8c-dd691a948fca.png)'
- en: 'This pattern requires the four following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式需要以下四个步骤：
- en: Defining a group of end users to receive the new version of the application
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一组接收应用程序新版本的最终用户
- en: Defining the servers to receive a new version
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义接收新版本的服务器
- en: Deploying the new version of an application to selected servers
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序的新版本部署到选定的服务器
- en: Evaluating the impact of the new version of the application
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估应用程序新版本的影响
- en: Defining a group of end users
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一组最终用户
- en: 'In this step, we select a group of end users to receive a new version of an
    application. To define this group, a number of things need to be evaluated. Some
    of these evaluations include:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们选择一组最终用户以接收应用程序的新版本。为了定义此组，需要评估多个因素。其中一些评估包括：
- en: The new features existing in a new version
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新版本中存在的功能
- en: The localization of end users
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终用户的本地化
- en: Business roles
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务角色
- en: The end users selected for A/B testing need to be defined and marked by the
    application in order to allow it to distinguish between end users with access
    to the new version and those without. This can be done using a cookie, filtering
    by IP address if the group is location-related, or by using another mechanism
    that grants an end user access to the new version.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为A/B测试所选的最终用户需要由应用程序定义并标记，以便它可以区分能够访问新版本的最终用户和无法访问的用户。这可以通过使用cookie、如果组与位置相关则通过IP地址过滤，或者使用其他授予最终用户访问新版本权限的机制来完成。
- en: Defining the servers to receive a new version
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义接收新版本的服务器
- en: In this step, we define the group of servers that will receive the deployment
    of a new version. The selection and amount of servers to receive the deployment
    needs to be evaluated by the percentage of end users that will be able to access
    the new version. Depending on various scenarios, we should also evaluate the localization
    of users.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们定义将接收新版本部署的服务器组。接收部署的服务器选择和数量需要根据能够访问新版本的最终用户百分比来评估。根据各种场景，我们还应该评估用户的本地化情况。
- en: Deploying the new version
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署新版本
- en: In this step, we deploy the new version of an application to the selected group
    of servers. These servers will then become dead and deployment will start. In
    this step, it is advisable to use either the canary deployment or the blue/green
    deployment to minimize the chance of error. Once deployment is complete, we will
    grant access to the new version of the application to the selected group of end
    users.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们将新版本的应用程序部署到所选的服务器组。然后这些服务器将变为无效，部署将开始。在这一步，建议使用金丝雀部署或蓝绿部署来最小化错误的可能性。一旦部署完成，我们将允许所选的最终用户访问应用程序的新版本。
- en: Evaluating the impact of a new version
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估新版本的影响
- en: In this step, we evaluate the impact of the new version of an application. This
    step can be done using many different tools and techniques, the use of which depends
    on what our goals for the new features are, what the roles involved with these
    new features are, and any other questions that may arise according to business
    logic. This task generally consists of collecting data and analyzing it to verify
    the way end users behave with new features. After the evaluation is complete,
    we can then decide whether to throw the new version to the remaining end users
    or to remove them from the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们评估应用程序新版本的影响。这一步可以使用许多不同的工具和技术来完成，其使用取决于我们对于新功能的目标是什么，涉及这些新功能的角色是什么，以及根据业务逻辑可能出现的任何其他问题。这项任务通常包括收集数据并分析它以验证最终用户使用新功能的方式。评估完成后，我们就可以决定是否将新版本推向剩余的最终用户，或者从应用程序中移除他们。
- en: Explaining the concept of continuous deployment
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释持续部署的概念
- en: The process of delivery release to users consists of important steps, and we
    can sometimes pass these steps with a manual process. The world is moving on apace,
    and so the delivery of a release needs to be swift as well. With this in mind,
    automating processes is a great solution for increasing the speed of release delivery;
    continuous deployment was therefore created as an evolution of continuous delivery,
    which itself is an evolution of continuous integration.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 向用户交付发布版本的过程包括重要的步骤，我们有时可以通过手动过程完成这些步骤。世界正在快速发展，因此发布交付也需要迅速。考虑到这一点，自动化流程是提高发布交付速度的绝佳解决方案；因此，持续部署作为持续交付的演变而产生，而持续交付本身又是持续集成的演变。
- en: 'Continuous deployment is a deployment pattern that creates a pipeline where
    each step is executed through an automated process. All steps are then executed
    without human intervention. If a new release enters the pipeline, all steps will
    be executed automatically unless an error occurs. It is important to know that
    continuous deployment is not continuous delivery or continuous integration—although
    these deployment patterns have many similarities, they are all different. The
    main difference between them is the level of automation present; for example,
    continuous integration is more automated than continuous delivery, which, in turn,
    is more automated than continuous deployment. The following diagram illustrates
    the pipeline of both deployment patterns and the level of automation they have:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是一种部署模式，它创建了一个管道，其中每个步骤都通过自动化过程执行。所有步骤都将在没有人为干预的情况下执行。如果新的发布版本进入管道，除非发生错误，否则所有步骤都将自动执行。重要的是要知道，持续部署不是持续交付或持续集成——尽管这些部署模式有许多相似之处，但它们都是不同的。它们之间的主要区别在于自动化程度；例如，持续集成比持续交付更自动化，而持续交付又比持续部署更自动化。以下图表说明了这两种部署模式的管道以及它们的自动化程度：
- en: '![](img/57ae1445-e53b-4b6b-a454-00ec0083fb4b.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57ae1445-e53b-4b6b-a454-00ec0083fb4b.png)'
- en: The main goal of continuous deployment is to minimize the time between the development
    of a release and its delivery in a production environment. It automates the steps
    of the developer so as to minimize the scope for human error and make the delivery
    safer. As discussed, continuous deployment can be used together with blue/green
    deployment, canary deployment, and A/B testing, and these patterns will work in
    both the *Deploy to production* and *Post deploy test* steps.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署的主要目标是最大限度地减少发布开发与在生产环境中交付之间的时间。它自动化了开发者的步骤，以最大限度地减少人为错误的可能性并使交付更安全。正如所讨论的，持续部署可以与蓝绿部署、金丝雀部署和A/B测试一起使用，这些模式将在*部署到生产*和*部署后测试*步骤中发挥作用。
- en: To implement continuous deployment, it is necessary to have a good testing culture.
    This is because the quality of tests will define the quality of the releases,
    as well as the success of its implementation. Furthermore, the documentation needs
    to update any new releases together, with all updates in the application reflected
    in the documentation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现持续部署，必须拥有良好的测试文化。这是因为测试的质量将决定发布版本的质量以及其实施的成功。此外，文档需要与所有新版本一起更新，确保应用程序的所有更新都反映在文档中。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered deployment patterns, including canary deployment,
    blue/green deployment, A/B testing, and continuous deployment. We also covered
    the reasons to use these deployment patterns and how to decide how they're best
    used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了部署模式，包括金丝雀部署、蓝绿部署、A/B测试和持续部署。我们还讨论了使用这些部署模式的原因以及如何决定它们最佳的使用方式。
- en: In the *Explaining the concept of deployment patterns* section, we looked at
    the principal concepts of deployment patterns and looked at their uses in a business
    environment. Similarly, in the *Explaining the concept of canary deployment*, *Explaining
    the concept of blue/green deployment*, *Explaining the concept of A/B testing,*
    and *Explaining the concept of continuous deployment* sections, we explored what
    each of the patterns are and why we use them. Finally, in the *Explaining the
    concept of continuous deployment* section, we covered the differences between
    continuous integration, continuous delivery, and continuous deployment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在*解释部署模式的概念*部分，我们探讨了部署模式的基本概念，并研究了它们在商业环境中的应用。同样，在*解释金丝雀部署的概念*、*解释蓝绿部署的概念*、*解释A/B测试的概念*和*解释持续部署的概念*部分，我们探讨了每种模式是什么以及为什么使用它们。最后，在*解释持续部署的概念*部分，我们讨论了持续集成、持续交付和持续部署之间的区别。
- en: In the next chapter, we will cover the concepts of operational patterns, performance
    and scalability patterns, and management and monitoring patterns.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍操作模式、性能和可扩展性模式以及管理和监控模式的概念。
