- en: Deploying Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的应用程序
- en: This chapter explains how to deploy your backend and frontend to a server. There
    are a variety of cloud servers or **PaaS** (**Platform as a Service**) providers
    available, such as Amazon (AWS), DigitalOcean, and Microsoft Azure. In this book,
    we are using Heroku, which supports multiple programming languages that are used
    in web development. We will also show you how to use Docker containers in deployment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何将后端和前端部署到服务器。有各种云服务器或PaaS（平台即服务）提供商可用，如Amazon（AWS）、DigitalOcean和Microsoft
    Azure。在本书中，我们使用Heroku，它支持Web开发中使用的多种编程语言。我们还将向您展示如何在部署中使用Docker容器。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看到以下内容：
- en: Different options for deploying the Spring Boot application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Spring Boot应用程序的不同选项
- en: How to deploy the Spring Boot application to Heroku
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Spring Boot应用程序部署到Heroku
- en: How to deploy the React app to Heroku
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将React应用程序部署到Heroku
- en: How to create the Spring Boot and MariaDB Docker container
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建Spring Boot和MariaDB Docker容器
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, is required (GitHub*: *[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204))*.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中创建的Spring Boot应用程序，*Securing
    and Testing Your Backend*，是必需的（GitHub：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)）。
- en: The React app that we used in the previous chapter is also required (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中使用的React应用程序也是必需的（GitHub：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)）。
- en: Docker installation is necessary.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker安装是必要的。
- en: Deploying the backend
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署后端
- en: 'If you are going to use your own server, the easiest way to deploy the Spring
    Boot application is to use an executable JAR file. An executable JAR file is generated,
    if you use Maven, in the command line by typing the `mvn clean install` command.
    That command creates the JAR file in the `build` folder. In this case, you don''t
    have to install a separate application server because it is embedded in your JAR
    file. Then you just have to run the JAR file using the `java` command, `java -jar
    your_appfile.jar`. The embedded Tomcat version can be defined in the `pom.xml`
    file with the following lines:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用自己的服务器，部署Spring Boot应用程序的最简单方法是使用可执行的JAR文件。如果您使用Maven，可以在命令行中键入`mvn clean
    install`命令来生成可执行的JAR文件。该命令会在`build`文件夹中创建JAR文件。在这种情况下，您不必安装单独的应用程序服务器，因为它嵌入在JAR文件中。然后，您只需使用`java`命令运行JAR文件，`java
    -jar your_appfile.jar`。嵌入式Tomcat版本可以在`pom.xml`文件中使用以下行进行定义：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are using a separate application server, you have to create a WAR package.
    That is a little bit more complicated and you have to make some modifications
    to your application. The following are the steps to create the WAR file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用单独的应用程序服务器，您必须创建一个WAR包。这有点复杂，您必须对应用程序进行一些修改。以下是创建WAR文件的步骤：
- en: 'Modify an application main class by extending `SpringBootServletIntializer`
    and overriding the `configure` method:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展`SpringBootServletIntializer`并重写`configure`方法修改应用程序主类：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Change the packaging from JAR to WAR in the `pom.xml` file:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`文件中将打包从JAR更改为WAR：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following dependency to the `pom.xml` file. Then, the Tomcat application
    is no longer embedded:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到`pom.xml`文件中。然后，Tomcat应用程序将不再是嵌入式的：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, when you build your application, the WAR file is generated. It can be deployed
    to the existing Tomcat by copying the file to Tomcat's `/webapps` folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您构建应用程序时，将生成WAR文件。它可以通过将文件复制到Tomcat的`/webapps`文件夹来部署到现有的Tomcat。
- en: Nowadays, cloud servers are the major way to provide your application to end
    users. Next, we are going to deploy our backend to the Heroku cloud server ([https://www.heroku.com/](https://www.heroku.com/)).
    Heroku offers a free account that you can use to deploy your own applications.
    With the free account, your applications go to sleep after 30 minutes of inactivity
    and it takes a little bit more time to restart application. But the free account
    is enough for testing and hobby purposes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，云服务器是向最终用户提供应用程序的主要方式。接下来，我们将把后端部署到Heroku云服务器（[https://www.heroku.com/](https://www.heroku.com/)）。Heroku提供免费账户，您可以用来部署自己的应用程序。使用免费账户，应用程序在30分钟不活动后会休眠，并且重新启动应用程序需要一点时间。但是免费账户足够用于测试和爱好目的。
- en: 'For deployment, you can use Heroku''s web-based user interface. The following
    steps go through the deployment process:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于部署，您可以使用Heroku的基于Web的用户界面。以下步骤介绍了部署过程：
- en: 'After you have created an account with Heroku, log in to the Heroku website.
    Navigate to the dashboard that shows a list of your applications. There is a button
    called New that opens a menu. Select Create new app from the menu:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建了Heroku账户之后，登录Heroku网站。导航到显示应用程序列表的仪表板。有一个名为“New”的按钮，打开一个菜单。从菜单中选择“Create
    new app”：
- en: '![](img/a6d4ea22-fcf1-4db9-87dd-809aee5975e6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6d4ea22-fcf1-4db9-87dd-809aee5975e6.png)'
- en: 'Name your app, select a region, and press the Create app button:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的应用命名，选择一个区域，并按“Create app”按钮：
- en: '![](img/a149f89b-24ef-44e8-aa3e-d84df8e12c1e.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a149f89b-24ef-44e8-aa3e-d84df8e12c1e.png)'
- en: 'Select a deployment method. There are several options; we are using the GitHub
    option. In that method, you first have to push your application to GitHub and
    then link your GitHub repository to Heroku:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择部署方法。有几种选项；我们使用GitHub选项。在该方法中，您首先必须将应用程序推送到GitHub，然后将GitHub存储库链接到Heroku：
- en: '![](img/dfe74268-512d-47d2-820e-2b0c4e71dcd4.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfe74268-512d-47d2-820e-2b0c4e71dcd4.png)'
- en: 'Search for a repository you want to deploy to and then press the Connect button:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索要部署到的存储库，然后按“连接”按钮：
- en: '![](img/7b165d48-afdd-475c-b80e-c541060f3089.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b165d48-afdd-475c-b80e-c541060f3089.png)'
- en: 'Choose between automatic and manual deployment. The automatic option deploys
    your app automatically when you push a new version to connected the GitHub repository.
    You also have to select a branch you want to deploy. We will now use the manual
    option that deploys the app when you press the Deploy branch button:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择自动部署和手动部署之间。自动选项在您将新版本推送到连接的GitHub存储库时自动部署您的应用程序。您还必须选择要部署的分支。我们现在将使用手动选项，在您按下“部署分支”按钮时部署应用程序：
- en: '![](img/bb891230-f8f6-49cf-bfb7-c25a8c010213.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb891230-f8f6-49cf-bfb7-c25a8c010213.png)'
- en: 'Deployment starts and you can see a build log. You should see a message that
    says Your app was successfully deployed:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署开始，您可以看到构建日志。您应该看到一条消息，说您的应用程序已成功部署：
- en: '![](img/7e706d00-ec4a-48bd-be9f-f7cef58af9c5.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e706d00-ec4a-48bd-be9f-f7cef58af9c5.png)'
- en: Now, your application is deployed to the Heroku cloud server. If you are using
    the H2 in-memory database, this would be enough and your application should work.
    We are using MariaDB; therefore, we have to install the database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序已部署到Heroku云服务器。如果您使用H2内存数据库，这就足够了，您的应用程序应该可以工作。我们正在使用MariaDB；因此，我们必须安装数据库。
- en: 'In Heroku, we can use JawsDB, which is available in Heroku as an add-on. JawsDB
    is a **Database as a Service** (**DBaaS**) provider that offers MariaDB database,
    which can be used in Heroku. The following steps describe how to start using the
    database:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Heroku中，我们可以使用JawsDB，它作为附加组件在Heroku中可用。JawsDB是一个**Database as a Service** (**DBaaS**)提供商，提供MariaDB数据库，可以在Heroku中使用。以下步骤描述了如何开始使用数据库：
- en: 'Open a Resources tab in your Heroku app page and type `JawsDB` into the Add-ons
    search field:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Heroku应用程序页面的资源选项卡中键入`JawsDB`到附加组件搜索字段中：
- en: '![](img/4ad75340-c8c9-47b2-b6f4-10c3be62c991.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ad75340-c8c9-47b2-b6f4-10c3be62c991.png)'
- en: 'Select JawsDB Maria from the dropdown list. You can see JawsDB in your adds-on
    list. Click JawsDB and you can see the connection info of your database:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择JawsDB Maria。您可以在附加组件列表中看到JawsDB。点击JawsDB，您可以看到数据库的连接信息：
- en: '![](img/c9a31fdb-7bc5-4e8b-987f-5bf9c9cad006.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9a31fdb-7bc5-4e8b-987f-5bf9c9cad006.png)'
- en: 'Change the database connection definition in the `application.properties` file
    with the values from the JawsDB connection info page. In this example we use plain
    password but it is recommended to encrypt password using for example, **Java Simplified
    Encryption** (**JASYPT**) library:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`application.properties`文件中更改数据库连接定义，使用JawsDB连接信息页面上的值。在这个例子中，我们使用明文密码，但建议使用例如**Java
    Simplified Encryption** (**JASYPT**)库来加密密码：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the free account, we can have a maximum of 10 concurrent connections to
    our database; therefore, we also have to add the following line to the `application.properties`
    file:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用免费帐户，我们可以最多同时有10个连接到我们的数据库；因此，我们还必须将以下行添加到`application.properties`文件中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Push your changes to GitHub and deploy your app in Heroku. Now, your application
    is ready and we can test that with Postman. The URL of the app is `https://carbackend.herokuapp.com/`,
    but you can also use your own domain. If we send the `POST` request to the `/login`
    endpoint with the credential, we can get the token in the response header. So,
    everything seems to work properly:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到GitHub并在Heroku中部署您的应用程序。现在，您的应用程序已准备就绪，我们可以用Postman进行测试。应用程序的URL是`https://carbackend.herokuapp.com/`，但您也可以使用您自己的域名。如果我们向`/login`端点发送`POST`请求并附带凭据，我们可以在响应头中获得令牌。所以，一切似乎都正常工作：
- en: '![](img/118749ea-0281-4a31-998b-ec964fffbac8.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/118749ea-0281-4a31-998b-ec964fffbac8.png)'
- en: 'You can also connect to the JawsDB database with HeidiSQL, and we can see that
    our car database has been created:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用HeidiSQL连接到JawsDB数据库，我们可以看到我们的car数据库已经创建：
- en: '![](img/1249d3d7-581b-4bca-b51d-5985cc9de735.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1249d3d7-581b-4bca-b51d-5985cc9de735.png)'
- en: 'You can watch application logs by selecting View logs from the More menu:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从“更多”菜单中选择“查看日志”来查看应用程序日志：
- en: '![](img/bd9588eb-733b-49d1-9680-1bb8943220f6.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd9588eb-733b-49d1-9680-1bb8943220f6.png)'
- en: The application log view looks like the following.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序日志视图如下所示。
- en: '![](img/363c4ce1-f69f-470c-ba27-6d799636bcfa.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/363c4ce1-f69f-470c-ba27-6d799636bcfa.png)'
- en: Deploying the frontend
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署前端
- en: 'In this section, we will deploy our React frontend to Heroku. The easiest way
    to deploy the React app to Heroku is to use the Heroku Buildpack for create-react-app
    ([https://github.com/mars/create-react-app-buildpack](https://github.com/mars/create-react-app-buildpack)).
    For deployment, we have to install the Heroku CLI, which is the command-line tool
    for Heroku. You can download the installation package from `https://devcenter.heroku.com/articles/heroku-cli`.
    After the installation has finished, you can use the Heroku CLI from PowerShell
    or the Terminal you''re using. The following steps describe the deployment process:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把React前端部署到Heroku。将React应用程序部署到Heroku的最简单方法是使用Heroku Buildpack for create-react-app
    ([https://github.com/mars/create-react-app-buildpack](https://github.com/mars/create-react-app-buildpack))。为了部署，我们必须安装Heroku
    CLI，这是Heroku的命令行工具。您可以从`https://devcenter.heroku.com/articles/heroku-cli`下载安装包。安装完成后，您可以从PowerShell或您正在使用的终端使用Heroku
    CLI。以下步骤描述了部署过程：
- en: 'Open your frontend project with VS Code and open the `constant.js` file in
    the editor. Change the `SERVER_URL` constant to match our backend''s URL and save
    the changes:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用VS Code打开您的前端项目，并在编辑器中打开`constant.js`文件。将`SERVER_URL`常量更改为匹配我们后端的URL，并保存更改：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a local Git repository to your project and commit the files, if you
    haven''t done that, yet. Navigate to your project folder with the Git command-line
    tool and type the following commands:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的项目创建一个本地Git存储库并提交文件，如果您还没有这样做。使用Git命令行工具导航到您的项目文件夹，并键入以下命令：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following command creates a new Heroku app and asks for credentials to
    log in to Heroku. Replace `[APPNAME]` with your own app name. After the command
    has been executed, you should see the new app in your Heroku dashboard:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令创建一个新的Heroku应用程序，并要求输入Heroku的凭据。将`[APPNAME]`替换为您自己的应用程序名称。命令执行后，您应该在Heroku仪表板中看到新的应用程序：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Deploy your code to Heroku by typing the following command to PowerShell:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在PowerShell中输入以下命令将您的代码部署到Heroku：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the deployment is ready, you should see the Verifying deploy... done message
    in PowerShell, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 部署准备就绪后，您应该在PowerShell中看到“验证部署...完成”消息，如下面的屏幕截图所示：
- en: '![](img/d390c43a-34b7-472f-ba2f-81edd960b837.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d390c43a-34b7-472f-ba2f-81edd960b837.png)'
- en: 'Now, you can go to your Heroku dashboard and see the URL of your frontend;
    you can also open it from the Heroku CLI by typing the `heroku open` command.
    If you navigate to your frontend, you should see the login form:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以转到Heroku仪表板并查看前端的URL；您还可以通过在Heroku CLI中输入`heroku open`命令来打开它。如果导航到前端，您应该看到登录表单：
- en: '![](img/0dd6d124-54bd-46c9-8dec-8cc247c37495.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0dd6d124-54bd-46c9-8dec-8cc247c37495.png)'
- en: Using Docker containers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker容器
- en: 'Docker is a container platform that makes software development, deployment,
    and shipping easier. Containers are lightweight and executable software packages
    that include everything that is needed to run software. In this section, we are
    creating a container from our Spring Boot backend, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个容器平台，使软件开发、部署和交付更加简单。容器是轻量级和可执行的软件包，包括运行软件所需的一切。在本节中，我们正在从Spring Boot后端创建一个容器，如下所示：
- en: Install Docker to your workstation. You can find the installation packages at [https://www.docker.com/get-docker](https://www.docker.com/get-docker).
    There are installation packages for multiple platforms and if you have Windows
    operating system, you can go through the installation wizard using the default
    settings.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Docker安装到您的工作站。您可以在[https://www.docker.com/get-docker](https://www.docker.com/get-docker)找到安装包。有多个平台的安装包，如果您使用Windows操作系统，可以使用默认设置通过安装向导进行安装。
- en: 'The Spring Boot application is just an executable JAR file that can be executed
    with Java. The JAR file can be created with the following Maven command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Boot应用程序只是一个可执行的JAR文件，可以使用Java执行。可以使用以下Maven命令创建JAR文件：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also use Eclipse to run Maven goals by opening the Run | Run configurations... menu.
    Select your project in the Base directory field, using the Workspace button. Type
    clean install into the Goals field and press the Run button:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用Eclipse通过打开“Run | Run configurations...”菜单来运行Maven目标。在“Base directory”字段中选择您的项目，使用“Workspace”按钮。在“Goals”字段中输入clean
    install并按“Run”按钮：
- en: '![](img/787f9e0c-1e26-4665-a2fb-7e45e7e50913.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/787f9e0c-1e26-4665-a2fb-7e45e7e50913.png)'
- en: 'After the build is finished, you can find the executable JAR file from the
    `/target` folder:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建完成后，您可以从`/target`文件夹中找到可执行的JAR文件：
- en: '![](img/2492af3f-cc3b-41c8-b4f0-8229438a3b18.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2492af3f-cc3b-41c8-b4f0-8229438a3b18.png)'
- en: 'You can test that the build went correctly by running the JAR file with the
    following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过以下命令运行JAR文件来测试构建是否正确：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You''ll see the application''s starting messages and, finally, your application
    is running:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到应用程序的启动消息，最后，您的应用程序正在运行：
- en: '![](img/14a5ad6d-15a2-4e4f-8fdb-f4e0b78be6bd.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14a5ad6d-15a2-4e4f-8fdb-f4e0b78be6bd.png)'
- en: Containers are defined by using Dockerfiles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是通过使用Dockerfile定义的。
- en: Create a new Dockerfile in the root folder of your project and name it `Dockerfile`.
    The following lines show the content of the Dockerfile. We are using Alpine Linux. `EXPOSE`
    defines the port that should be published outside of the container. `COPY` copies
    the JAR file to the container's filesystem and renames it `app.jar`. `ENTRYPOINT`
    defines the command-line arguments that the Docker container runs.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根文件夹中创建一个名为`Dockerfile`的新Dockerfile。以下行显示了Dockerfile的内容。我们使用Alpine Linux。`EXPOSE`定义应在容器外发布的端口。`COPY`将JAR文件复制到容器的文件系统并将其重命名为`app.jar`。`ENTRYPOINT`定义Docker容器运行的命令行参数。
- en: There is also a Maven plugin available to build Docker images. It is developed
    by Spotify and can be found at [https://github.com/spotify/docker-maven-plugin](https://github.com/spotify/docker-maven-plugin).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个Maven插件可用于构建Docker镜像。它由Spotify开发，可以在[https://github.com/spotify/docker-maven-plugin](https://github.com/spotify/docker-maven-plugin)找到。
- en: The following lines show the content of `Dockerfile`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了`Dockerfile`的内容。
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the container with the following command. With the `-t` argument, we
    can give a friendly name to our container:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建容器。使用`-t`参数，我们可以为容器指定一个友好的名称：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At the end of the build command, you should see the Successfully built message:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建命令结束时，您应该看到“成功构建”消息：
- en: '![](img/d14a98c9-6013-4f50-a078-d0261a7ac6fe.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d14a98c9-6013-4f50-a078-d0261a7ac6fe.png)'
- en: 'Check the list of the container using the `docker image ls` command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker image ls`命令检查容器列表：
- en: '![](img/a711dc13-1ae6-4f6e-906d-3aea1272fbae.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a711dc13-1ae6-4f6e-906d-3aea1272fbae.png)'
- en: 'Run the container with the following command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行容器：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Spring Boot application starts but it ends with an error because we are
    trying to access the localhost database. The localhost now points to the container
    itself and there is no MariaDB installed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot应用程序启动，但以错误结束，因为我们正在尝试访问本地主机数据库。现在本地主机指向容器本身，并且没有安装MariaDB。
- en: 'We will create our own container for MariaDB. You can pull the latest MariaDB
    container from the Docker Hub using the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为MariaDB创建自己的容器。您可以使用以下命令从Docker Hub拉取最新的MariaDB容器：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the MariaDB container. The following command sets the root user password
    and creates a new database, called `cardb`, that we need for our Spring Boot application:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行MariaDB容器。以下命令设置root用户密码并创建一个新的名为`cardb`的数据库，这是我们Spring Boot应用程序所需的：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We have to make one change to our Spring Boot `application.properties` file.
    Change the `datasource` URL to the following. In the next step, we will specify
    that our application can access the database container using the `mariadb` name.
    After the change, you have to build your application and re-create the Spring
    Boot container:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须对Spring Boot的`application.properties`文件进行一些更改。将`datasource`的URL更改为以下内容。在下一步中，我们将指定我们的应用可以使用`mariadb`名称访问数据库容器。更改后，您必须构建您的应用程序并重新创建Spring
    Boot容器：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can run our Spring Boot container and link the MariaDB container to it using
    the following command. The command now defines that our Spring Boot container
    can access the MariaDB container using the `mariadb` name:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以运行我们的Spring Boot容器，并使用以下命令将MariaDB容器链接到它。该命令现在定义了我们的Spring Boot容器可以使用`mariadb`名称访问MariaDB容器：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can also access our application logs by typing the `docker logs carapp` command.
    We can see that our application has started successfully and the demo data has
    been inserted into the database that exists in the MariaDB container:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过输入`docker logs carapp`命令来访问我们的应用程序日志。我们可以看到我们的应用程序已成功启动，并且演示数据已插入到存在于MariaDB容器中的数据库中：
- en: '![](img/2e83d7a2-9eb6-4f6c-9948-ed2f9e288e01.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e83d7a2-9eb6-4f6c-9948-ed2f9e288e01.png)'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy the Spring Boot application. We went
    through the different deployment options of the Spring Boot application and deployed
    the application to Heroku. Next, we deployed our React frontend to Heroku using
    the Heroku Buildpack for create-react-app, which makes the deployment process
    fast. Finally, we used Docker to create containers from our Spring Boot application
    and MariaDB database. In the next chapter, we will cover some more technologies
    and best practises that you should explore.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何部署Spring Boot应用程序。我们了解了Spring Boot应用程序的不同部署选项，并将应用程序部署到了Heroku。接下来，我们使用Heroku
    Buildpack for create-react-app将React前端部署到了Heroku，这使得部署过程更快。最后，我们使用Docker从Spring
    Boot应用程序和MariaDB数据库创建了容器。在下一章中，我们将介绍一些您应该探索的更多技术和最佳实践。
- en: Questions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How should you create a Spring Boot-executable JAR file?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何创建一个Spring Boot可执行的JAR文件？
- en: How should you deploy the Spring Boot application to Heroku?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何将Spring Boot应用部署到Heroku？
- en: How should you deploy the React app to Heroku?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何将React应用部署到Heroku？
- en: What is Docker?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Docker？
- en: How should you create the Spring Boot application container?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何创建Spring Boot应用容器？
- en: How should you create the MariaDB container?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何创建MariaDB容器？
- en: Further reading
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React, Spring Boot, and
    Docker:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很好的资源，可以学习关于React，Spring Boot和Docker的知识：
- en: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
- en: '[https://www.packtpub.com/virtualization-and-cloud/deployment-docker](https://www.packtpub.com/virtualization-and-cloud/deployment-docker)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/virtualization-and-cloud/deployment-docker](https://www.packtpub.com/virtualization-and-cloud/deployment-docker)'
- en: '[https://www.packtpub.com/virtualization-and-cloud/docker-fundamentals-integrated-course](https://www.packtpub.com/virtualization-and-cloud/docker-fundamentals-integrated-course)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/virtualization-and-cloud/docker-fundamentals-integrated-course](https://www.packtpub.com/virtualization-and-cloud/docker-fundamentals-integrated-course)'
