- en: Chapter 4. Handling Job Transactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 处理作业事务
- en: In the previous chapter, we learned about essential data handling mechanisms,
    including reading, processing, and writing data from/to different sources, such
    as flat files, XML, and databases. From the previous chapters, we learned that
    Spring Batch jobs handle bulk data reading, manipulating, and writing activities.
    Through these activities, it is important to make the activity consistent through
    a transaction while interacting with files/databases. Spring Batch provides strong
    transaction support through job processing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了基本的数据处理机制，包括从/到不同来源（如平面文件、XML和数据库）读取、处理和写入数据。从前几章中，我们了解到Spring Batch作业处理大量数据的读取、操作和写入活动。通过这些活动，在与文件/数据库交互时，确保活动的一致性非常重要。Spring
    Batch通过作业处理提供强大的事务支持。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Transactions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务
- en: Spring Batch transaction management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch事务管理
- en: Customizing the transaction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义事务
- en: Transaction patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务模式
- en: Transactions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务
- en: 'As part of the job processing, activities involve reading data from different
    sources, processing the data, and writing it to different sources, including files
    and databases. Data, as a complete set of records or in chunks, has to either
    be completely processed and written to the end system, or be tracked as failed
    records in the case of any error. Transaction management should take care of this
    operation to make it consistent, by committing the correct information and rolling
    back in case of any error. The following are the activities involved in a database
    transaction:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为作业处理的一部分，活动包括从不同来源读取数据、处理数据并将其写入不同来源，包括文件和数据库。数据，作为一个完整的记录集或分块，必须要么完全处理并写入最终系统，要么在发生任何错误的情况下跟踪为失败的记录。事务管理应负责此操作，以确保其一致性，通过提交正确的信息并在发生任何错误时回滚。以下是在数据库事务中涉及的活动：
- en: Beginning the transaction
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始事务
- en: Processing a set of records
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理一组记录
- en: Committing the transaction if no errors occur during processing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在处理过程中没有发生错误，则提交事务
- en: Rolling back the transaction if any errors occur during processing![Transactions](img/3372OS_04_04.jpg)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在处理过程中发生任何错误，则回滚事务![事务](img/3372OS_04_04.jpg)
- en: 'Hence, a transaction is defined as a series of operations that obey the **atomic,
    consistent, isolated, and durable** (**ACID**) characteristics described as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，事务被定义为一系列遵守以下**原子性、一致性、隔离性和持久性**（**ACID**）特性的操作：
- en: '**Atomic**: This ensures success in either all or none of the operations in
    the transaction'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子性**：这确保事务中的所有操作要么全部成功，要么全部失败'
- en: '**Consistent**: This ensures that the transaction brings the resource from
    one valid state to the other valid state'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：这确保事务将资源从一个有效状态带到另一个有效状态'
- en: '**Isolated**: One transaction''s state and effect are hidden from all other
    transactions during concurrent execution'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**：在并发执行期间，一个事务的状态和影响对其他所有事务都是隐藏的'
- en: '**Durable**: The result of a transaction should be persistent and survive a
    system crash once the transaction is completed'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**：事务的结果应该是持久的，并且在事务完成后能够经受住系统崩溃'
- en: If a transaction follows these ACID characteristics, it can handle any unexpected
    errors, by aborting the error that occurs during the transaction, to gracefully
    recover the consistent state of the system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个事务遵循这些ACID特性，它可以通过中止事务中发生的错误，优雅地恢复系统的稳定状态来处理任何意外错误。
- en: Spring Batch transaction management
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch事务管理
- en: Spring Batch provides transaction management through step execution, where each
    transaction is committed after successful data processing and is rolled back if
    any error is found through processing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'Spring Batch通过步骤执行提供事务管理，其中每个事务在成功处理数据后提交，如果在处理过程中发现任何错误，则回滚。 '
- en: 'Spring Batch manages the transactions in either of the following cases:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch在以下两种情况下管理事务：
- en: Tasklet steps
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tasklet步骤
- en: Chunk-oriented steps
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块导向步骤
- en: Listeners
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器
- en: Tasklet steps
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tasklet步骤
- en: 'Tasklets are used in Spring Batch to process business-specific activities,
    such as archiving, remote interactions, and invoking services. By default, the
    `execute` method of the tasklet itself is transactional. Hence, each call to the
    `execute` method calls for a new transaction. The following is a sample tasklet
    configuration:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Batch中，任务令用于处理特定业务活动，如存档、远程交互和服务调用。默认情况下，任务令的`execute`方法是事务性的。因此，对`execute`方法的每次调用都会调用一个新的事务。以下是一个示例任务令配置：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The implementation of the tasklet can be as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 任务令的实现可以如下所示：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Chunk-oriented steps
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向块的步骤
- en: Chunk-oriented steps processing undertakes chunks of records in a read-process-write
    mechanism, as shown in the following diagram. Each step, once the transaction
    is started, handles the data to be read, processed, and written, and after the
    successful completion of these stages, the step commits the transaction. Then,
    it follows the next transaction to handle the next set of records. If any error
    occurs in either of these steps, it rolls back the transaction and completes the
    step execution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 面向块的步骤处理采用读取-处理-写入机制来处理记录块，如下所示图所示。每个步骤，一旦事务开始，处理要读取、处理和写入的数据，并在这些阶段成功完成后，步骤提交事务。然后，它跟随下一个事务来处理下一组记录。如果在这些步骤中的任何一步发生错误，它将回滚事务并完成步骤执行。
- en: '![Chunk-oriented steps](img/3372OS_04_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![面向块的步骤](img/3372OS_04_01.jpg)'
- en: 'Hence, chunk-oriented steps are preferred for bulk data processing so that
    the entire data is divided into chunks and processed in individual transactions.
    If any exception occurs in any phase, it rolls back that transaction, hence, the
    data handling will be more efficient and complete. Failed steps, which can be
    logged and re-run with corrected information, are gracefully rolled back. The
    following is a sample chunk-oriented step configuration:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于大量数据处理，更倾向于使用面向块的操作步骤，这样整个数据被分成块并在单个事务中处理。如果在任何阶段发生异常，它将回滚该事务，因此数据处理将更加高效和完整。失败的步骤，可以通过记录并使用更正后的信息重新运行，可以优雅地回滚。以下是一个面向块的步骤配置示例：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding configuration, we have the first step (`stepOne`) with tasklet
    and chunk within it. To ensure the order of execution, `stepOne` is the parent
    of `stepTwo`. While `stepOne` configures `itemReader` and `itemWriter`, `stepTwo`
    configures `itemProcessor`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置中，我们有一个包含任务令和块的第一个步骤（`stepOne`）。为了确保执行顺序，`stepOne`是`stepTwo`的父步骤。当`stepOne`配置`itemReader`和`itemWriter`时，`stepTwo`配置`itemProcessor`。
- en: Listeners
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听器
- en: 'Spring Batch supports listeners to execute certain operations after/before
    an event occurs. Spring Batch handles each of these events, and the way transactions
    are handled in each listener is specific to that listener and how they handle
    the data. Hence, it is important to observe if the listener methods are handled
    as part of the step transaction. If not, then the application should handle such
    transactions programmatically. The following is the sample listener configuration:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch支持在事件发生前后执行某些操作的监听器。Spring Batch处理这些事件中的每一个，每个监听器中事务的处理方式是特定的，以及它们如何处理数据。因此，观察监听器方法是否作为步骤事务的一部分处理是很重要的。如果不是，那么应用程序应该以编程方式处理此类事务。以下是一个示例监听器配置：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The implementation of the listener can be as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器的实现可以如下所示：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Customizing the transaction
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制事务
- en: 'Spring Batch allows the configurations to customize the way transactions are
    handled. The data exchange between different transactions, if processed and read
    gracefully, make the transaction clean. However, we have different ways to configure
    the visibility of transaction integrity to other interactions, called isolation
    levels. The following are the isolation levels to customize the Spring Batch transactions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch允许配置自定义处理事务的方式。如果不同事务之间的数据交换被优雅地处理和读取，则事务是清洁的。然而，我们有不同的方式来配置事务完整性对其他交互的可见性，称为隔离级别。以下是可以自定义Spring
    Batch事务的隔离级别：
- en: '**Serializable**: This is the highest isolation level. Based on lock-based
    or non-lock-based concurrency control, it ensures clean data reading.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可序列化**：这是最高的隔离级别。基于基于锁或非锁的并发控制，它确保了清洁的数据读取。'
- en: '**Repeatable reads**: This lock-based implementation maintains read and write
    locks, hence clean data is guaranteed; however, with no support for range locks,
    phantom reads may occur.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复读**：这种基于锁的实现维护读和写锁，因此保证了数据清洁；然而，由于没有对范围锁的支持，可能会发生幻读。'
- en: '**Read committed**: This lock-based implementation maintains the write lock,
    hence it promises any data read is committed the moment it is read, and restricts
    any intermediate, uncommitted, and dirty read.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取提交**：这种基于锁的实现维护写锁，因此它承诺任何读取的数据在读取时都是已提交的，并限制任何中间、未提交和脏读。'
- en: '**Read uncommitted**: This is the lowest isolation level. One transaction can
    see the uncommitted changes of other transactions as well. Hence, dirty reads
    are allowed in this level.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取未提交**：这是最低的隔离级别。一个事务可以看到其他事务的未提交更改。因此，在这个级别允许脏读。'
- en: 'There are predefined constants for each isolation level. By default, the configuration
    is `READ_COMMITTED` for the Spring Batch isolation level. Based on the criticality
    and importance of the data to be read across transactions, one has to set the
    isolation level for that transaction. For example, a bank account transaction
    might want to read only clean, committed data from other transactions and make
    the transaction with persistent data. In such cases, one has to choose between
    the isolation level and performance of the application. The following is a sample
    isolation level configuration:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个隔离级别都有预定义的常量。默认情况下，Spring Batch的隔离级别配置为`READ_COMMITTED`。根据要读取的事务中数据的紧迫性和重要性，必须为该事务设置隔离级别。例如，银行账户事务可能只想从其他事务中读取干净、已提交的数据，并使用持久数据执行事务。在这种情况下，必须在隔离级别和应用程序性能之间做出选择。以下是一个隔离级别配置示例：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the batch jobs are integrated with applications having other frameworks using
    similar nomenclature for configurations, then one should be careful with configurations.
    The intent of control in one technology can control others; it's better to disable
    either one of the configurations on need basis in such scenarios.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果批处理作业与使用类似命名约定的其他框架集成的应用程序集成，那么应该小心配置。一种技术的控制意图可能控制其他技术；在这种情况下，根据需要最好禁用其中一个配置。
- en: The attributes on each of the batch components, as discussed in [Chapter 2](ch02.xhtml
    "Chapter 2. Getting Started with Spring Batch Jobs"), *Getting Started with Spring
    Batch Jobs*, can help us better customize the batch job transaction configurations.
    For example, one can control the rollback transactions, in specific exception
    scenarios, by configuring `no-rollback-exception-classes`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](ch02.xhtml "第2章。Spring Batch作业入门")中所述，每个批处理组件上的属性，即“Spring Batch作业入门”，可以帮助我们更好地定制批处理作业的事务配置。例如，可以通过配置`no-rollback-exception-classes`来控制特定异常场景下的回滚事务。
- en: Transaction patterns
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务模式
- en: Spring Batch job processing involves handling data across multiple sources.
    Such scenarios, which usually occur time and again, can be identified as transaction
    patterns.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch作业处理涉及跨多个源处理数据。这些通常反复出现的情况可以识别为事务模式。
- en: 'The following are the patterns identified:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下已识别的模式：
- en: '**Simple transaction**: This is a transaction with a single application and
    data source (source and target)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单事务**：这是一个涉及单个应用程序和数据源（源和目标）的事务'
- en: '**Global transaction**: This is a transaction involving more than one data
    source to be handled through the same transaction'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局事务**：这是一个涉及多个数据源并通过同一事务处理的事务'
- en: Simple transaction
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单事务
- en: 'Simple transactions with a single batch application and a data source can be
    easily implemented with the support of Spring Batch integrated with diverse database
    interaction techniques, such as JDBC, JPA, or Hibernate supports from Spring Batch.
    The interaction would be as shown in the following figure:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与Spring Batch集成的多种数据库交互技术（如JDBC、JPA或Hibernate支持）的支持，可以轻松实现具有单个批处理应用程序和数据源的单个事务。交互方式如下所示：
- en: '![Simple transaction](img/3372OS_04_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![简单事务](img/3372OS_04_02.jpg)'
- en: Global transaction
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全球事务
- en: If more than one data source has to be persisted through a single transaction,
    such transactions are termed as global transactions, which can managed by the
    transaction manager. It is the responsibility of the transaction manager to make
    sure the transaction obeys the ACID characteristics through its multiple data
    sources and the data is persisted consistently.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要通过单个事务持久化多个数据源，则此类事务被称为全局事务，可以由事务管理器管理。确保事务通过其多个数据源遵守ACID特性，并且数据保持一致性的责任在于事务管理器。
- en: However, if an application is deployed in an integrated enterprise server, which
    supports a transaction manager, that might as well be considered against the **Java
    Transaction API** (**JTA**) based transaction manager. The following is a representation
    of a managed transaction.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果一个应用程序部署在一个支持事务管理器的集成企业服务器上，那么它也可以被认为是基于**Java事务API**（**JTA**）的事务管理器。以下是一个受管理事务的表示。
- en: '![Global transaction](img/3372OS_04_03.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![全局事务](img/3372OS_04_03.jpg)'
- en: These transactions can also be configured to maintain the references of the
    one database schema as a synonym in another database schema to refer it virtually
    as a local transaction. However, the effort of creating such synonyms must be
    considered.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事务也可以配置为保持一个数据库模式作为另一个数据库模式中的同义词的引用，以便在虚拟上作为本地事务来引用。然而，必须考虑创建此类同义词的努力。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this chapter we learned about transactions and key characteristics of
    transactions. We also learned how Spring Batch performs transaction management
    in different scenarios, including tasklet steps, chunk-oriented steps, and listeners.
    We also learned about customizing the transaction with isolation levels and attribute
    configurations. We finished this chapter with an understanding of commonly used
    transaction patterns with single and multiple data sources in a batch application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们学习了事务及其关键特性。我们还了解了Spring Batch在不同场景下如何执行事务管理，包括tasklet步骤、面向块步骤和监听器。我们还学习了如何通过隔离级别和属性配置来自定义事务。我们以对批处理应用程序中单源和多源常用事务模式的理解结束了本章。
- en: In the next chapter, we will learn in detail about the flow of jobs and sharing
    data between steps of the executing jobs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细了解作业的流程以及执行作业步骤之间的数据共享。
