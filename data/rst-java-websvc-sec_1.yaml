- en: Chapter 1. Setting Up the Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。设置环境
- en: We extend you a very warm welcome to the first chapter of our journey. Let's
    give you an idea of what you will achieve here. After reading this chapter, you
    will have the basic and stimulating knowledge you need to set up a development
    environment to work with RESTful web services. Then, you will familiarize yourself
    with the development of a very basic project related to it. In addition, by the
    end, you will have a very clear idea of how to create applications using RESTful
    web services and how you can achieve this. This chapter will give you the information
    you need to work with web services of this kind in a very easy and comprehensive
    way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们诚挚地欢迎您来到我们旅程的第一章。让我们给您一个关于您将在这里实现的想法。阅读完本章后，您将拥有设置开发环境以处理RESTful Web服务所需的基本和激动人心的知识。然后，您将熟悉与其相关的一个非常基本的项目的开发。此外，在最后，您将非常清楚地了解如何使用RESTful
    Web服务创建应用程序以及如何实现这一点。本章将为您提供使用这种类型的Web服务的信息，以一种非常简单和全面的方式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装开发环境
- en: Creating our first RESTful web services application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个RESTful Web服务应用程序
- en: Testing the RESTful web service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试RESTful Web服务
- en: Downloading tools
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载工具
- en: First, we must obtain our work tools so that we get our hands into code. Tools
    specified here are used around the world, but you are free to choose your tools.
    Remember, "Tools do not make the artist". It doesn't matter if you use Windows,
    MAC OS X, or Linux; tools are available for every OS.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须获取我们的工作工具，以便投入编码。这里指定的工具在全世界范围内使用，但您可以自由选择您的工具。记住，“工具不会使艺术家”。无论您使用Windows、MAC
    OS X还是Linux；每个操作系统都有可用的工具。
- en: Let's explain briefly what each tool is for. We will develop the examples using
    Eclipse as our IDE, JBoss AS 7.1.1.Final as our application server, Maven to automatize
    the build process, and SoapUI as a tool to test the functionality of web services
    that we will create. In addition, we suggest that you should install the latest
    version of JDK, which is JDK 1.7.x. For help, we have obtained and included some
    links that you need to use to get the software to implement the first example.
    Each link gives you more information about each tool, which can be profitable
    as you learn something about each one if you don't know about them already.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要解释一下每个工具的用途。我们将使用Eclipse作为我们的IDE来开发示例，JBoss AS 7.1.1.Final作为我们的应用服务器，Maven来自动化构建过程，并使用SoapUI作为测试我们将创建的Web服务功能的工具。此外，我们建议您安装最新版本的JDK，即JDK
    1.7.x。为了帮助，我们已经获取并包含了一些链接，您需要使用这些链接来获取实现第一个示例所需的软件。每个链接都会为您提供有关每个工具的更多信息，如果您还不了解它们，这可能会对您有所帮助。
- en: Downloading links
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载链接
- en: 'The following tools have to be downloaded:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 必须下载以下工具：
- en: Eclipse IDE for Java EE Developers 4.3 ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse IDE for Java EE Developers 4.3（[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)）
- en: JBoss AS 7.1.1 Final ([http://www.jboss.org/jbossas/downloads/](http://www.jboss.org/jbossas/downloads/))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss AS 7.1.1 Final（[http://www.jboss.org/jbossas/downloads/](http://www.jboss.org/jbossas/downloads/)）
- en: Apache Maven 3.1.1 or higher ([http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Maven 3.1.1或更高版本（[http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi)）
- en: SoapUI 4.6 or higher ([http://www.soapui.org/](http://www.soapui.org/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SoapUI 4.6或更高版本（[http://www.soapui.org/](http://www.soapui.org/)）
- en: JDK 1.7.x ([http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 1.7.x（[http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)）
- en: Creating the base project
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本项目
- en: In order to make the process of building our sample project easier, we will
    use Maven. This wonderful software will create a base project at the blink of
    an eye, and our project can be easily compiled and packaged without depending
    on a specific IDE.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使构建我们的示例项目的过程更容易，我们将使用Maven。这个神奇的软件将在眨眼之间创建一个基本项目，我们的项目可以很容易地编译和打包，而不依赖于特定的IDE。
- en: Maven uses archetypes for a specific kind of project. The archetypes are project
    templates that have been previously created; they allow us to create all kinds
    of applications from Java desktop applications to multimodule projects, where
    the EAR can contain several artifacts such as JAR and WAR. Its main objective
    is to get users up and running as quickly as possible by providing a sample project
    that demonstrates many of the features of Maven. If you want to learn more about
    Maven, you can find more information by visiting [http://maven.apache.org/](http://maven.apache.org/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Maven使用原型来创建特定类型的项目。原型是预先创建的项目模板；它们允许我们创建各种应用程序，从Java桌面应用程序到多模块项目，其中EAR可以包含多个工件，如JAR和WAR。它的主要目标是通过提供演示Maven许多功能的示例项目，尽快让用户上手运行。如果您想了解更多关于Maven的信息，可以访问[http://maven.apache.org/](http://maven.apache.org/)。
- en: 'However, the information we described here is enough to keep moving on. We
    will use an archetype in order to create a basic project; if we want to be more
    specific, we will use an archetype to create a web application with Java. To do
    this, we will type the following command line in a terminal:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在这里描述的信息足以继续前进。我们将使用原型来创建一个基本项目；如果我们想更具体，我们将使用原型来创建一个带有Java的Web应用程序。为此，我们将在终端中输入以下命令行：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we execute this command line in a terminal, we will obtain all available
    archetypes in Maven''s repository. So, let''s look for the archetype we need in
    order to create our web application; its name is `webapp-javaee6`, and it belongs
    to the group `org.codehaus.mojo.archetypes`. Also, we can search through it using
    a number that represents its ID; this number is `557`, as shown in the following
    screenshot. We recommend that you search by the name as the numbers are likely
    to change because some other archetypes may be added later:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在终端中执行这个命令行时，我们将获得Maven仓库中所有可用的原型。因此，让我们寻找我们需要的原型，以便创建我们的Web应用程序；它的名称是`webapp-javaee6`，属于`org.codehaus.mojo.archetypes`组。此外，我们可以使用一个代表其ID的数字进行搜索；这个数字是`557`，如下面的屏幕截图所示。我们建议您按名称搜索，因为数字可能会改变，因为以后可能会添加其他原型：
- en: '![Creating the base project](img/0109OS_01_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本项目](img/0109OS_01_01.jpg)'
- en: 'Several questions will appear; we must provide the respective information for
    each question. Maven will use this information to create the archetype we selected
    before, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将会出现几个问题；我们必须为每个问题提供相应的信息。Maven将使用这些信息来创建我们之前选择的原型，如下面的屏幕截图所示：
- en: '![Creating the base project](img/0109OS_01_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本项目](img/0109OS_01_02.jpg)'
- en: 'As you have probably noticed, each question asks you to define a property,
    and each property is explained as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，每个问题都要求您定义一个属性，每个属性的解释如下：
- en: '`groupId`: This property represents the company''s domain reversed order; this
    way we can recognize which company is the code''s owner'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`：此属性表示公司的域名倒序；这样我们就可以识别出代码的所有者是哪家公司'
- en: '`artifactId`: This property represents the project''s name'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`：此属性表示项目的名称'
- en: '`version`: This property represents the project''s version'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：此属性表示项目的版本'
- en: '`package`: This property represents the base package''s name where classes
    are going to be added'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`：此属性表示要添加类的基本包名称'
- en: Class names and package names together shape the class's full name. This full
    name allows the class names to be identified in a unique way. Sometimes, when
    there are several classes with the same name, the package name helps to identify
    which library it belongs to.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类名和包名共同构成了类的全名。这个全名允许以独特的方式识别类名。有时，当有几个具有相同名称的类时，包名有助于识别它属于哪个库。
- en: The next step is to put the project into Eclipse's workspace; to do this, we
    must import our project into Eclipse by navigating through **File** | **Import**
    | **Maven** | **Existing Maven Projects**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将项目放入Eclipse的工作空间；为此，我们必须通过**文件** | **导入** | **Maven** | **现有的Maven项目**来将我们的项目导入Eclipse。
- en: 'We should see the project in the IDE, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在IDE中看到项目，如下面的屏幕截图所示：
- en: '![Creating the base project](img/0109OS_01_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本项目](img/0109OS_01_03.jpg)'
- en: Before moving on, let's fix the problems that have occurred in the file `pom.xml`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们解决`pom.xml`文件中出现的问题。
- en: The error shown in the following code is related to a bug that comes from Eclipse
    and Maven integration. In order to fix this, we have to add the `<pluginManagement>`
    tag after the `<build>` tag.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面代码中显示的错误与来自Eclipse和Maven集成的错误有关。为了解决这个问题，我们必须在`<build>`标签之后添加`<pluginManagement>`标签。
- en: 'The `pom.xml` file should look like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`pom.xml`文件应该如下所示：'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the sample code**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the sample code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you. Also, we highly suggest
    obtaining the source code from GitHub available at [https://github.com/restful-java-web-services-security](https://github.com/restful-java-web-services-security).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接发送到您的邮箱。此外，我们强烈建议从GitHub上获取可在[https://github.com/restful-java-web-services-security](https://github.com/restful-java-web-services-security)上获得的源代码。
- en: 'This will fix the error, and now we only need to update Maven''s configuration
    in the project, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将修复错误，现在我们只需要更新项目中Maven的配置，如下面的屏幕截图所示：
- en: '![Creating the base project](img/0109OS_01_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本项目](img/0109OS_01_04.jpg)'
- en: After refreshing the project, the errors should go away because when we update
    Maven's configuration we are actually updating our project's dependencies, such
    as missing libraries. Through this, we will include them in our project and errors
    will disappear.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新项目后，错误应该消失，因为当我们更新Maven的配置时，实际上是在更新我们项目的依赖项，比如缺少的库。通过这样做，我们将把它们包含在我们的项目中，错误将消失。
- en: Inside the `src/main/webapp` path, let's create the `WEB-INF` folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/webapp`路径下，让我们创建`WEB-INF`文件夹。
- en: 'Now, inside the `WEB-INF` folder, we will create a new file named `web.xml`
    with the following content:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`WEB-INF`文件夹中，我们将创建一个名为`web.xml`的新文件，内容如下：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This file is very useful when you are securing your applications; this time,
    we will create it without any configuration. For now, the `/WEB-INF` folder and
    the `web.xml` file only define the structure of the web application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您保护您的应用程序时，这个文件非常有用；这一次，我们将在没有任何配置的情况下创建它。目前，`/WEB-INF`文件夹和`web.xml`文件只定义了Web应用程序的结构。
- en: First functional example
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个功能示例
- en: Now that we have our development environment all set up, it is time to get your
    hands dirty and write the first RESTful web service. As we are using JBoss, let's
    use the RESTEasy implementation for JAX-RS. We will develop a very simple example;
    let's imagine you want to implement a service to save and search for people's
    information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的开发环境已经设置好了，是时候动手写第一个RESTful web服务了。由于我们使用的是JBoss，让我们使用JAX-RS的RESTEasy实现。我们将开发一个非常简单的示例；假设您想要实现一个保存和搜索人员信息的服务。
- en: 'First, we create a simple `Person` domain class that uses JAXB annotations.
    JAXB marshals/unmarshals objects between XML and Java. For this example, we''ll
    store these instances in an in-memory cache instead of a database. In JEE, this
    typically represents a table in a relational database, and each entity instance
    corresponds to a row in that table, as presented in the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个简单的`Person`领域类，它使用JAXB注解。JAXB在XML和Java之间进行对象的编组/解组。在这个例子中，我们将把这些实例存储在内存缓存中，而不是数据库中。在JEE中，这通常表示关系数据库中的一个表，每个实体实例对应该表中的一行，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we create a new class called `PersonService` in the `com.packtpub.resteasy.services`
    package. This class will have two methods; one to register a new person and another
    to search for people by ID. This class will store people using an in-memory map
    cache.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在`com.packtpub.resteasy.services`包中创建一个名为`PersonService`的新类。这个类将有两个方法；一个用于注册新的人员，另一个用于按ID搜索人员。这个类将使用内存映射缓存来存储人员。
- en: 'The service will have the following implementation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务将有以下实现：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `@Path` annotation defines the path in the URL that will be available on
    the functionalities that have been written within this class. The method annotated
    with `@Post` indicates that it should make a HTTP POST request. Furthermore, it
    is annotated with `@Consumes` and uses the `application`/`xml` value; this means
    that the POST request will be performed with a string in XML format, containing
    the information of the person to be saved. On the other hand, to find a person
    from its ID, you must make an HTTP GET request. The URL must indicate the ID the
    same way as indicated by the `@Path` annotation on the method. The `@Produces`
    annotation indicates that we will get the response in XML format. Finally, notice
    that the parameter ID, as indicated in the `@Path` annotation, is used as an argument
    of the method using the `@PathParam` annotation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Path`注解定义了URL中的路径，该路径将在此类中编写的功能中可用。用`@Post`注解的方法表示应该进行HTTP POST请求。此外，它用`@Consumes`注解，并使用`application`/`xml`值；这意味着POST请求将以XML格式的字符串执行，其中包含要保存的人员的信息。另一方面，要通过ID查找一个人，你必须进行HTTP
    GET请求。URL必须以与方法上的`@Path`注解指示的方式指示ID。`@Produces`注解表示我们将以XML格式获得响应。最后，请注意，参数ID，如`@Path`注解中所示，被用作方法的参数，使用`@PathParam`注解。'
- en: 'Finally, we write a class that will extend the `Application` class and set
    the service we just created as a singleton. So, the information won''t get lost
    in every request, and we will keep it in memory as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们编写一个类，它将扩展`Application`类，并将我们刚刚创建的服务设置为单例。这样，信息在每个请求中不会丢失，我们将把它保存在内存中，如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that as we have mapped our entity using JAXB, our methods consume and produce
    information in the XML format.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们使用JAXB映射了我们的实体，我们的方法在XML格式中消耗和产生信息。
- en: 'In order to deploy our application in JBoss, we should add a dependency in
    the `pom.xml` file. This dependency must reference to the JBoss plugin. We have
    to change the generated artifact name in `pom.xml`. The default value for this
    is the `artifactId` file, followed by the version; for example, `resteasy-examples-1.0-snapshot.war`.
    We will set it, so we will use just the `artifactId` file; in this case, `resteasy-examples.war`.
    All of these configurations must be included, modified, and implemented in `pom.xml`,
    as shown in the following piece of XML code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在JBoss中部署我们的应用程序，我们应该在`pom.xml`文件中添加一个依赖项。这个依赖项必须引用JBoss插件。我们必须更改`pom.xml`中生成的构件名称。默认值是`artifactId`文件，后跟版本；例如，`resteasy-examples-1.0-snapshot.war`。我们将设置它，所以我们将只使用`artifactId`文件；在这种情况下，`resteasy-examples.war`。所有这些配置必须包含、修改和实现在`pom.xml`中，如下面的XML代码所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should change the value of the `jbossHome` property for the path of your
    JBoss installation. After this, we will use the command terminal; head to the
    project''s directory, and type `mvn jboss-as:run`. If you make any change on the
    code after the command has been executed, then you should use the following command
    in order to see the changes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该更改`jbossHome`属性的值为您的JBoss安装路径。之后，我们将使用命令终端；前往项目目录，并输入`mvn jboss-as:run`。如果在执行命令后对代码进行任何更改，则应使用以下命令以查看更改：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run and redeploy are the goals of this plugin. If you want to know more goals
    about this plugin, you can visit [https://docs.jboss.org/jbossas/7/plugins/maven/latest/](https://docs.jboss.org/jbossas/7/plugins/maven/latest/)).
    This will compile all project classes again; it will then be packaged in order
    to create the `.war` file. At the end, the modifications will be deployed on the
    server. If everything is okay, we should see a message in the terminal saying
    that the deployment has been done successfully, as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Run和redeploy是这个插件的目标。如果您想了解有关此插件的更多目标，请访问[https://docs.jboss.org/jbossas/7/plugins/maven/latest/](https://docs.jboss.org/jbossas/7/plugins/maven/latest/)。这将再次编译所有项目类；然后将其打包以创建`.war`文件。最后，修改将部署到服务器上。如果一切正常，我们应该在终端看到一条消息，说明部署已成功完成，如下面的截图所示：
- en: '![First functional example](img/0109OS_01_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![第一个功能示例](img/0109OS_01_05.jpg)'
- en: 'The source code of this chapter is available on GitHub at the following location:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在GitHub的以下位置找到：
- en: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter01](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter01)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter01](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter01)'
- en: Testing the example web service
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试示例Web服务
- en: 'At this moment, we will test the functionality we just created. We will use
    SoapUI as our test tool; make sure you use the latest version, or at least the
    version equal to or greater than 4.6.x because this version offers more features
    to test the RESTful Web services. Let''s start by performing the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将测试我们刚刚创建的功能。我们将使用SoapUI作为我们的测试工具；确保您使用最新版本，或者至少是4.6.x或更高版本，因为这个版本提供了更多功能来测试RESTful
    Web服务。让我们从执行以下步骤开始：
- en: From the main menu, let's create a new REST project by navigating to **File**
    | **New REST Project**, as shown in the following screenshot:![Testing the example
    web service](img/0109OS_01_06.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单开始，让我们通过导航到**文件** | **新建REST项目**来创建一个新的REST项目，如下面的屏幕截图所示：![测试示例Web服务](img/0109OS_01_06.jpg)
- en: Set the URI of our service, as follows:![Testing the example web service](img/0109OS_01_07.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置我们服务的URI，如下所示：![测试示例Web服务](img/0109OS_01_07.jpg)
- en: 'After this, let''s create a new person using the `POST` method from workspace.
    In the field **Media Type**, select **application/xml** and perform a request
    with a string that contains the XML with the information, as shown in the following
    text:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，让我们使用工作区的`POST`方法创建一个新的人。在**媒体类型**字段中，选择**application/xml**，并使用包含信息的XML字符串进行请求，如下文所示：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we click on the **Play** button, we should obtain an answer where it shows
    the created resource URI (hyperlink "`http://localhost:8080/resteasy-examples/services/person/1`"),
    as shown in the following screenshot:![Testing the example web service](img/0109OS_01_08.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们点击**播放**按钮时，我们应该得到一个答案，其中显示了创建的资源URI（超链接"`http://localhost:8080/resteasy-examples/services/person/1`"），如下面的屏幕截图所示：![测试示例Web服务](img/0109OS_01_08.jpg)
- en: If we change the URI from the **Resource** textbox in SoapUI and use the `GET`
    method, it will show us the data we just entered, as shown in the following screenshot:![Testing
    the example web service](img/0109OS_01_09.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在SoapUI的**资源**文本框中更改URI并使用`GET`方法，它将显示我们刚刚输入的数据，如下面的屏幕截图所示：![测试示例Web服务](img/0109OS_01_09.jpg)
- en: Congratulations! We have developed our first functional RESTful web service
    with two features. The first is to keep people's information in memory, and the
    second is to retrieve people's information through an ID.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经开发了我们的第一个功能性的RESTful Web服务，具有两个功能。第一个是将人们的信息保存在内存中，第二个是通过ID检索人们的信息。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you restart JBoss or deploy the application again, all data will be lost.
    Before searching for people's information, you must first save the data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重新启动JBoss或重新部署应用程序，所有数据将丢失。在搜索人员信息之前，您必须先保存数据。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we created our first functional application—something like
    a *hello world* example but with a bit more functionality close to the real world.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了我们的第一个功能性应用程序——类似于*hello world*示例，但具有更接近真实世界的功能。
- en: The essential part we covered in this chapter is to familiarize ourselves with
    the tools we will use. In later chapters, we will assume that these concepts are
    already clear. For example, we will move forward step-by-step when using SoapUI
    as this is a tool that will facilitate the task of testing the functionality that
    we will be developing. This way, we will avoid the task of writing code for web
    service clients.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖的基本部分是熟悉我们将使用的工具。在后面的章节中，我们将假设这些概念已经清楚。例如，当使用SoapUI时，我们将逐步向前推进，因为这是一个将简化我们将要开发的功能测试任务的工具。这样，我们就可以避免为Web服务客户端编写代码的任务。
- en: Now we are ready to review the next chapter, which contains some security models
    that Java provides. We will understand each one of them and learn how to implement
    them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好审查下一章，其中包含Java提供的一些安全模型。我们将了解每一个模型，并学习如何实现它们。
