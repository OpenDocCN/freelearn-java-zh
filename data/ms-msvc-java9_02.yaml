- en: Setting Up the Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: This chapter focuses on the development environment setup and configurations.
    If you are familiar with the tools and libraries, you could skip this chapter
    and continue with [Chapter 3](8d3fd180-4f27-4bf7-bb86-c180ac200687.xhtml), *Domain-Driven
    Design*, where you could explore the **domain-driven design** (**DDD**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍开发环境的设置和配置。如果你熟悉工具和库，可以跳过本章，继续阅读[第3章](8d3fd180-4f27-4bf7-bb86-c180ac200687.xhtml)，*领域驱动设计*，在那里你可以探索**领域驱动设计**（**DDD**）。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: NetBeans IDE installation and setup
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBeans IDE的安装和设置
- en: Spring Boot configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot配置
- en: Sample REST program with Java 9 modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java 9模块的示例REST程序
- en: Building setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建设置
- en: REST API testing using the Postman extension of Chrome
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chrome的Postman扩展进行REST API测试
- en: This book will use only the open source tools and frameworks for examples and
    code. This book will also use Java 9 as its programming language, and the application
    framework will be based on the Spring Framework. This book makes use of Spring
    Boot to develop microservices.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将只使用开源工具和框架作为示例和代码。本书还将使用Java 9作为编程语言，应用程序框架将基于Spring框架。本书利用Spring Boot来开发微服务。
- en: NetBeans' **Integrated Development Environment** (**IDE**) provides state of
    the art support for both Java and JavaScript, and is sufficient for our needs.
    It has evolved a lot over the years and has built-in support for most of the technologies
    used by this book, such as Maven, Spring Boot, and so on. Therefore, I would recommend
    that you use NetBeans IDE. You are, however, free to use any IDE.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans的**集成开发环境**（**IDE**）为Java和JavaScript提供最先进的支持，足以满足我们的需求。它多年来已经发生了很大的变化，并内置了对本书中使用的大多数技术的支持，如Maven、Spring
    Boot等。因此，我建议你使用NetBeans IDE。不过，你也可以自由选择任何IDE。
- en: We will use Spring Boot to develop the REST services and microservices. Opting
    for the most popular of Spring Frameworks, Spring Boot, or its subset Spring Cloud,
    in this book was a conscious decision. Because of this, we don't need to write
    applications from scratch and it provides the default configuration for most of
    the technologies used in cloud applications. A Spring Boot overview is provided
    in Spring Boot's configuration section. If you are new to Spring Boot, this would
    definitely help you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Spring Boot来开发REST服务和微服务。在本书中选择Spring框架中最受欢迎的Spring Boot或其子集Spring Cloud是一个明智的选择。因此，我们不需要从零开始编写应用程序，它为大多数云应用程序中使用的技术提供了默认配置。Spring
    Boot的概述在Spring Boot的配置部分提供。如果你是Spring Boot的新手，这绝对会帮助你。
- en: We will use Maven as our build tool. As with the IDE, you can use whichever
    build tool you want, for example, Gradle or Ant with Ivy. We will use the embedded
    Jetty as our web server, but another alternative is to use an embedded Tomcat
    web server. We will also use the Postman extension of Chrome for testing our REST
    services.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Maven作为我们的构建工具。与IDE一样，你可以使用任何你想要的构建工具，例如Gradle或带有Ivy的Ant。我们将使用内嵌的Jetty作为我们的Web服务器，但另一个选择是使用内嵌的Tomcat
    Web服务器。我们还将使用Chrome的Postman扩展来测试我们的REST服务。
- en: We will start with Spring Boot configurations. If you are new to NetBeans or
    are facing issues in setting up the environment, you can refer to the following
    section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Spring Boot配置开始。如果你是NetBeans的新手或者在设置环境时遇到问题，可以参考以下部分。
- en: NetBeans IDE installation and setup
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetBeans IDE的安装和设置
- en: NetBeans IDE is free and open source and has a big community of users. You can
    download the NetBeans IDE from its official website, [https://netbeans.org/downloads/](https://netbeans.org/downloads/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans IDE是免费且开源的，拥有庞大的用户社区。您可以从它的官方网站[https://netbeans.org/downloads/](https://netbeans.org/downloads/)下载NetBeans
    IDE。
- en: 'At the time of writing this book, NetBeans for Java 9 was available only as
    a nightly build (downloadable from [http://bits.netbeans.org/download/trunk/nightly/latest/](http://bits.netbeans.org/download/trunk/nightly/latest/)).
    As shown in the following screenshot, download all the supported NetBeans bundles
    as we''ll use Javascript too:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，NetBeans for Java 9只能作为夜间构建版本提供（可从[http://bits.netbeans.org/download/trunk/nightly/latest/](http://bits.netbeans.org/download/trunk/nightly/latest/)下载）。如下图所示，下载所有受支持的NetBeans捆绑包，因为我们将使用JavaScript：
- en: '![](img/f22fd95b-9e2c-40fe-bfc1-09650afa7955.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f22fd95b-9e2c-40fe-bfc1-09650afa7955.png)'
- en: NetBeans bundles
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans捆绑包
- en: 'GlassFish Server and Apache Tomcat are optional. The required packs and runtimes
    are denoted as Already Installed (as NetBeans was already installed on my system):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish 服务器和 Apache Tomcat 是可选的。必需的包和运行时环境标记为已安装（因为 NetBeans 已经在我的系统上安装了）：
- en: '![](img/7baa8c9e-4e28-4f48-b942-85ab51dcb1fe.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7baa8c9e-4e28-4f48-b942-85ab51dcb1fe.png)'
- en: NetBeans packs and runtimes
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 包装和运行时
- en: 'After downloading the installation, execute the installer file. Accept the
    license agreement as shown in the following screenshot, and follow the rest of
    the steps to install the NetBeans IDE:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下载安装程序后，执行安装文件。如下截图所示，接受许可协议，并按照其余步骤安装 NetBeans IDE：
- en: '![](img/2b6b7797-612a-4704-821c-3f12c06a1280.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b6b7797-612a-4704-821c-3f12c06a1280.png)'
- en: The NetBeans license dialog
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 许可对话框
- en: JDK 8 or a later version is required for installing and running the All NetBeans
    bundles. This book uses Java 9, therefore, we would use JDK 9\. You can download
    standalone JDK 9 from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    I had to use the JDK 9 early access build because JDK 9 was not released at time
    of writing the book. It was available at [http://jdk.java.net/9/](http://jdk.java.net/9/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和运行所有 NetBeans 捆绑包需要 JDK 8 或更高版本。本书使用 Java 9，因此我们将使用 JDK 9。您可以从 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    下载独立的 JDK 9。我不得不使用 JDK 9 的早期访问构建，因为 JDK 9 写作本书时还没有发布。它可以在 [http://jdk.java.net/9/](http://jdk.java.net/9/)
    找到。
- en: 'Once the NetBeans IDE is installed, start the NetBeans IDE. The NetBeans IDE
    should look as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 NetBeans IDE 后，启动 NetBeans IDE。NetBeans IDE 应该如下所示：
- en: '![](img/cedfbcb0-1c97-459b-83b6-3cee57e1519b.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cedfbcb0-1c97-459b-83b6-3cee57e1519b.png)'
- en: The NetBeans start page
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 开始页面
- en: Maven and Gradle are both Java build tools. They add dependent libraries to
    your project, compile your code, set properties, build archives, and do many more
    related activities. Spring Boot or the Spring Cloud support both Maven and Gradle
    build tools. However, in this book, we'll use the Maven build tool. Feel free
    to use Gradle if you prefer.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 和 Gradle 都是 Java 构建工具。它们为您的项目添加依赖库，编译您的代码，设置属性，构建归档，并执行许多其他相关活动。Spring
    Boot 或 Spring Cloud 支持 Maven 和 Gradle 构建工具。然而，在本书中，我们将使用 Maven 构建工具。如果您喜欢，请随意使用
    Gradle。
- en: Maven is already available in the NetBeans IDE. Now, we can start a new Maven
    project to build our first REST application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 已经在 NetBeans IDE 中可用。现在，我们可以开始一个新的 Maven 项目来构建我们的第一个 REST 应用程序。
- en: 'Here are the steps for creating a new empty Maven project:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新空 Maven 项目的步骤如下：
- en: Click on New Project (*Ctrl* + *Shift* + *N*) under the File menu. It will open
    the New Project wizard.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件菜单下的“新建项目”（*Ctrl* + *Shift* + *N*），它会打开新建项目向导。
- en: Select `Maven` from the Categories list. Then, select POM Project from the Projects
    list, as shown in following screenshot. Then, click on the Next button.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“类别”列表中选择 `Maven`。然后，从“项目”列表中选择 POM 项目，如下截图所示。然后，点击下一步按钮。
- en: '![](img/28699870-56b9-4ebb-aa54-49b48a1e3e37.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28699870-56b9-4ebb-aa54-49b48a1e3e37.png)'
- en: New Project Wizard
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 新项目向导
- en: 'Now, enter the project name as `6392_chapter2`. Also, enter the other properties
    as shown in the following screenshot. Click on Finish once all the mandatory fields
    are filled in:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入项目名称为 `6392_chapter2`。此外，还应输入如下截图中显示的其他属性。填写完所有必填字段后，点击“完成”：
- en: '![](img/44c2a4f2-67e2-4f79-84c0-7eb2d164ddcd.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44c2a4f2-67e2-4f79-84c0-7eb2d164ddcd.png)'
- en: NetBeans Maven project properties
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans Maven 项目属性
- en: Aggelos Karalias has developed a helpful plugin for the NetBeans IDE offering
    autocomplete support for Spring Boot configuration properties available at [https://github.com/keevosh/nb-springboot-configuration-support](https://github.com/keevosh/nb-springboot-configuration-support).
    You can download it from his project page at [http://keevosh.github.io/nb-springboot-configuration-support/](http://keevosh.github.io/nb-springboot-configuration-support/).You
    could also use the Spring Tool Suite IDE ([https://spring.io/tools](https://spring.io/tools))
    from Pivotal instead of the NetBeans IDE. It's a customized all-in-one Eclipse-based
    distribution that makes application development easy.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Aggelos Karalias 为 NetBeans IDE 开发了一个有用的插件，提供对 Spring Boot 配置属性的自动完成支持，该插件可在
    [https://github.com/keevosh/nb-springboot-configuration-support](https://github.com/keevosh/nb-springboot-configuration-support)
    找到。您可以从他在 [http://keevosh.github.io/nb-springboot-configuration-support/](http://keevosh.github.io/nb-springboot-configuration-support/)
    的项目页面下载它。您还可以使用 Pivotal 的 Spring Tool Suite IDE ([https://spring.io/tools](https://spring.io/tools))
    代替 NetBeans IDE。它是一个定制的集成所有功能的基于 Eclipse 的分发版，使应用开发变得简单。
- en: After finishing all the preceding steps, NetBeans will display a newly created
    Maven project. You will use this project for creating the sample rest application
    using Spring Boot.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有前面的步骤后，NetBeans将显示一个新创建的Maven项目。你将使用这个项目来创建一个使用Spring Boot的示例rest应用程序。
- en: 'To use Java 9 as a source, set Source/Binary Format to 9, as shown in the following
    screenshot:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Java 9作为源，将源/二进制格式设置为9，如下面的屏幕截图所示：
- en: '![](img/105972df-2bba-447d-b40d-618e59a90ca2.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/105972df-2bba-447d-b40d-618e59a90ca2.png)'
- en: NetBeans Maven project properties - Sources
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans Maven项目属性 - 源代码
- en: 'Go to Build | Compile and make sure that Java Platform is set as JDK 9 (Default)
    as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往构建 | 编译，并确保将Java平台设置为JDK 9（默认）如下：
- en: '![](img/763145c2-dd85-452b-92bb-f3d248ad279d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/763145c2-dd85-452b-92bb-f3d248ad279d.png)'
- en: NetBeans Maven project properties - Complile
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans Maven项目属性 - 编译
- en: Similarly, you can add two new modules named `lib` and `rest` in the `Modules`
    folder by opening the right-click menu and then selecting the Create New Module
    option. This time you should select `Maven` from the Categories list and Java
    Application from Projects list in New Project dialog box.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样地，你可以在`Modules`文件夹中通过打开右键菜单，然后选择创建新模块的选项，添加两个名为`lib`和`rest`的新模块。这次你应该在新项目对话框框中从类别列表中选择`Maven`，并从项目列表中选择Java应用程序。
- en: Spring Boot configuration
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot配置
- en: 'Spring Boot is an obvious choice to develop state-of-the-art production-ready
    applications specific to Spring. Its website ([https://projects.spring.io/spring-boot/](https://projects.spring.io/spring-boot/))
    also states its real advantages:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot是开发特定于Spring的生产级别先进应用程序的明显选择。其网站（[https://projects.spring.io/spring-boot/](https://projects.spring.io/spring-boot/)）也阐述了它的真正优势：
- en: Takes an opinionated view of building production-ready Spring applications.
    Spring Boot favors convention over configuration and is designed to get you up
    and running as quickly as possible.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 采用了一种有见解的观点来构建生产级别的Spring应用程序。Spring Boot优先考虑约定优于配置，并旨在让你尽快运行起来。
- en: Spring Boot overview
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot概览
- en: Spring Boot is an amazing Spring tool created by **Pivotal** and it was released
    in April 2014 (GA). It was developed based on the request of SPR-9888 ([https://jira.spring.io/browse/SPR-9888](https://jira.spring.io/browse/SPR-9888))
    with the title *Improved support for 'containerless' web application architectures*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pivotal**创建的Spring Boot是一个令人惊叹的Spring工具，并于2014年4月（GA）发布。它是基于SPR-9888（[https://jira.spring.io/browse/SPR-9888](https://jira.spring.io/browse/SPR-9888)）的请求创建的，标题为*改进对“无容器”的web应用程序架构的支持*。'
- en: You must be wondering, why containerless? Because, today's cloud environment
    or PaaS provides most of the features offered by container-based web architectures,
    such as reliability, management, or scaling. Therefore, Spring Boot focuses on
    making itself an ultralight container.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道，为什么是无容器呢？因为，今天的云环境或PaaS提供了基于容器web架构的大部分功能，如可靠性、管理或扩展。因此，Spring Boot专注于将自己打造成一个超轻量级的容器。
- en: Spring Boot is preconfigured to make production-ready web applications very
    easily. **Spring Initializr** ([http://start.spring.io</span>](http://start.spring.io))
    is a page where you can select build tools such as Maven or Gradle, and project
    metadata such as group, artifact, and dependencies. Once you feed the required
    fields you can just click on the Generate Project button, which will give you
    the Spring Boot project that you can use for your production application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot预先配置好了，可以非常容易地制作出生产级别的web应用程序。**Spring Initializr**（[http://start.spring.io](http://start.spring.io)）是一个页面，你可以选择构建工具，如Maven或Gradle，以及项目元数据，如组、工件和依赖关系。一旦输入了所需字段，你只需点击生成项目按钮，就会得到你可用于生产应用程序的Spring
    Boot项目。
- en: 'On this page, the default Packaging option is Jar. We''ll also use JAR packaging
    for our microservices development. The reason is very simple: it makes microservices
    development easier. Just think how difficult it would be to manage and create
    an infrastructure where each microservice runs on its own server instance.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面上，默认的打包选项是JAR。我们也将为我们的微服务开发使用JAR打包。原因非常简单：它使微服务开发更容易。想想管理并创建一个每个微服务在其自己的服务器实例上运行的基础设施有多困难。
- en: 'Josh Long shared in his talk in one of the Spring IOs:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring IOs的一次演讲中，Josh Long分享道：
- en: '"It is better to make Jar, not War."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “最好是制作JAR，而不是WAR。”
- en: Later, we will use Spring Cloud, which is a wrapper on top of Spring Boot.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将使用Spring Cloud，它是建立在Spring Boot之上的一个包装器。
- en: We would develop a sample REST application that would use the Java 9 module
    feature. We will create two modules—`lib` and `rest`. The `lib` module will provide
    the models or any supported classes to the `rest` module. The `rest` module will
    include all the classes that are required to develop the REST application and
    it will also consume the model classes defined in the `lib` module.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个示例REST应用程序，该应用程序将使用Java 9模块功能。我们将创建两个模块——`lib`和`rest`。`lib`模块将为`rest`模块提供模型或任何支持类。`rest`模块将包括开发REST应用程序所需的所有类，并且还将消耗在`lib`模块中定义的模型类。
- en: Both the `lib` and `rest` modules are `maven` modules and their `parent` module
    is our main project `6392_chapter2`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`和`rest`模块都是`maven`模块，它们的`parent`模块是我们的主项目`6392_chapter2`。'
- en: The `module-info.java` file is an important class that governs the access of
    its classes. We'll make use of `requires`, `opens`, and `exports` to use the `spring`
    modules and establish the provider-consumer relationship between the `lib` and
    `rest` modules of our REST application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`module-info.java`文件是一个重要的类，它管理着对其类的访问。我们将利用`requires`、`opens`和`exports`来使用`spring`模块，并在我们REST应用程序的`lib`和`rest`模块之间建立提供者-消费者关系。'
- en: Adding Spring Boot to our main project
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Boot添加到我们的主项目中
- en: We will use the Java 9 to develop microservices. Therefore, we'll use the latest
    Spring Framework and Spring Boot project. At the time of writing, Spring Boot
    2.0.0 build snapshot release version was available.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Java 9来开发微服务。因此，我们将使用最新的Spring框架和Spring Boot项目。在撰写本文时，Spring Boot 2.0.0构建快照版本是可用的。
- en: You can use the latest released version. Spring Boot 2.0.0 build snapshot uses
    Spring 5 (5.0.0 build snapshot release).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用最新发布的版本。Spring Boot 2.0.0构建快照使用Spring 5（5.0.0构建快照版本）。
- en: 'Let''s take a look at the following steps and learn about adding Spring Boot
    to our main project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看以下步骤，了解如何将Spring Boot添加到我们的主项目中。
- en: 'Open the `pom.xml` file (available under `6392_chapter2` | Project Files) to
    add Spring Boot to your sample project:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`pom.xml`文件（在`6392_chapter2` | 项目文件中可用），以将Spring Boot添加到您的示例项目中：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can observe that we have defined our two modules `lib` and `rest` in parent
    project `pom.xml`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到，我们在父项目`pom.xml`中定义了我们的两个模块`lib`和`rest`。
- en: 'If you are adding these dependencies for the first time, you need to download
    the dependencies by right-clicking on the `Dependencies` folder under the `6392_chapter2`
    project in the Projects pane, as shown in the following screenshot:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你第一次添加这些依赖项，你需要通过在项目窗格中`6392_chapter2`项目的`Dependencies`文件夹下右键点击，下载依赖关系，如下面的屏幕截图所示：
- en: '![](img/5c0f9e4e-f148-45a9-9e1c-5bd5c273cfc0.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c0f9e4e-f148-45a9-9e1c-5bd5c273cfc0.png)'
- en: Download Maven Dependencies in NetBeans
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBeans中下载Maven依赖项
- en: 'Similarly, to resolve the project problems, right-click on the NetBeans project
    `6392_chapter2` and opt for the Resolve Project Problems.... It will open the
    dialog shown as follows. Click on the Resolve... button to resolve the issues:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，为了解决项目问题，右键点击NetBeans项目`6392_chapter2`，选择“解决项目问题...”。它将打开如下所示的对话框。点击“解决...”按钮来解决这些问题：
- en: '![](img/edec6f4e-9097-47d1-83e5-74ed409cd371.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edec6f4e-9097-47d1-83e5-74ed409cd371.png)'
- en: Resolve project problems dialog
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 解决项目问题对话框
- en: If you are using Maven behind the proxy, then update the `proxies` in `settings.xml`
    in Maven home directory. If you are using the Maven bundled with NetBeans then
    use `<NetBeans Installation Directory>\java\maven\conf\settings.xml`. You may
    need to restart the NetBeans IDE.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在代理后面使用Maven，那么需要更新Maven主目录中的`settings.xml`中的`proxies`。如果你使用的是与NetBeans捆绑的Maven，则使用`<NetBeans安装目录>\java\maven\conf\settings.xml`。你可能需要重新启动NetBeans
    IDE。
- en: The preceding steps will download all the required dependencies from a remote
    Maven repository if the declared dependencies and transitive dependencies are
    not available in a local Maven repository. If you are downloading the dependencies
    for the first time, then it may take a bit of time, depending on your internet
    speed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤将从远程Maven仓库下载所有必需的依赖项，如果声明的依赖项和传递依赖项在本地Maven仓库中不可用。如果你是第一次下载依赖项，那么它可能需要一些时间，这取决于你的互联网速度。
- en: Sample REST program
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例REST程序
- en: We will use a simple approach to building a standalone application. It packages
    everything into a single executable JAR file, driven by a `main()` method. Along
    the way, you use Spring's support for embedding the Jetty servlet container as
    the HTTP runtime, instead of deploying it to an external instance. Therefore,
    we would create the executable JAR file in place of the war that needs to be deployed
    on external web servers, which is a part of the `rest` module. We'll define the
    domain models in the `lib` module and API related classes in the `rest` module.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用一种简单的构建独立应用程序的方法。它将所有内容打包成一个可执行的JAR文件，由一个`main()`方法驱动。在这个过程中，您使用Spring支持将Jetty
    Servlet容器作为HTTP运行时嵌入，而不是将其部署到外部实例。因此，我们将创建代替需要部署在外部Web服务器上的war的可执行JAR文件，这是`rest`模块的一部分。我们将在`lib`模块中定义领域模型和`rest`模块中相关的API类。
- en: The following are `pom.xml` of the `lib` and `rest` modules.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`lib`和`rest`模块的`pom.xml`文件。
- en: 'The `pom.xml` file of the `lib` module:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`模块的`pom.xml`文件：'
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `pom.xml` of the `rest` module:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`rest`模块的`pom.xml`文件：'
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the `spring-boot-starter-web` dependency is used for developing the standalone
    executable REST service.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`spring-boot-starter-web`依赖项用于开发独立的可执行REST服务。
- en: We'll add the following `module-info.java` classes in the `lib` and `rest` modules
    in their default package, respectively.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`lib`和`rest`模块的默认包中分别添加以下`module-info.java`类。
- en: 'The `module-info.java` file in the `lib` module:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`模块的`module-info.java`文件：'
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we are exporting the `com.packtpub.mmj.lib.model` package to `com.packtpub.mmj.rest`,
    which allows access of the `lib` model classes to the `rest` module classes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导出了`com.packtpub.mmj.lib.model`包到`com.packtpub.mmj.rest`，这允许`lib`模型类对`rest`模块类进行访问。
- en: 'The `module-info.java` file in the `lib` module:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`模块的`module-info.java`文件：'
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we're adding all the required `spring` and `lib` packages using the `requires`
    statement, which enables the `rest` module classes to use classes defined in the
    `spring` and `lib` modules. Also, we're exporting the `com.packt.mmj.rest` and
    `com.packt.mmj.rest.resources` packages.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`requires`语句添加了所有必需的`spring`和`lib`包，这使得`rest`模块的类能够使用在`spring`和`lib`模块中定义的类。同时，我们导出了`com.packt.mmj.rest`和`com.packt.mmj.rest.resources`包。
- en: Now, as you are ready with Spring Boot in NetBeans IDE, you could create your
    sample web service. You will create a Math API that performs simple calculations
    and generates the result as JSON.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然您已经准备好使用NetBeans IDE的Spring Boot，您可以创建一个示例Web服务。您将创建一个执行简单计算并生成JSON结果的数学API。
- en: Let's discuss how we can call and get responses from REST services.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论如何调用REST服务并获取响应。
- en: 'The service will handle the `GET` requests for `/calculation/sqrt` or `/calculation/power`
    and so on. The `GET` request should return a `200 OK` response with JSON in the
    body that represents the square root of a given number. It should look something
    like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务将处理`/calculation/sqrt`或`/calculation/power`等`GET`请求。`GET`请求应返回一个带有表示给定数字平方根的JSON体的`200
    OK`响应。它看起来像这样：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `input` field is the input parameter for the square root function, and the
    content is the textual representation of the result.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`input`字段是平方根函数的输入参数，内容是结果的文本表示。'
- en: 'You could create a resource representation class to model the representation
    by using **Plain Old Java Object** (**POJO**) with fields, constructors, setters,
    and getters for the input, output, and function data. Since it is a model, we''ll
    create it in the `lib` module:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个资源表示类，使用**普通老式Java对象**（**POJO**）建模表示，并为输入、输出和功能数据使用字段、构造函数、设置器和获取器。由于它是一个模型，我们将在`lib`模块中创建它：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Writing the REST controller class
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写REST控制器类
- en: Roy Fielding defined and introduced the term **Representational State Transfer**
    (**REST**) in his doctoral dissertation. REST is a style of software architecture
    for a distributed hypermedia system such as WWW. RESTful refers to those systems
    that conform to REST architecture properties, principles, and constraints.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伊·菲尔丁在他的博士论文中定义并引入了**代表性状态传输**（**REST**）这个术语。REST是一种软件架构风格，用于分布式超媒体系统，如WWW。遵循REST架构属性的系统称为RESTful。
- en: Now, you'll create a REST controller to handle the `Calculation` resource. The
    controller handles the HTTP requests in the Spring RESTful web service implementation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将创建一个REST控制器来处理`Calculation`资源。控制器在Spring RESTful Web服务实现中处理HTTP请求。
- en: The @RestController annotation
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '@RestController注解'
- en: '`@RestController` is a class-level annotation used for the `resource` class
    introduced in Spring 4\. It is a combination of `@Controller` and `@ResponseBody`,
    and because of it, a class returns a domain object instead of a view.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RestController`是用于在Spring 4中引入的`resource`类的类级别注解。它是`@Controller`和`@ResponseBody`的组合，因此，一个类返回领域对象而不是视图。'
- en: In the following code, you can see that the `CalculationController` class handles
    `GET` requests for `/calculation` by returning a new instance of the `calculation`
    class.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，你可以看到`CalculationController`类通过返回`calculation`类的新实例处理`GET`请求`/calculation`。
- en: We will implement two URIs for a `Calculation` resource—the square root (`Math.sqrt()`
    function) as the `/calculations/sqrt` URI, and power (`Math.pow()` function) as
    the `/calculation/power` URI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`Calculation`资源实现两个URI——平方根（`Math.sqrt()`函数）作为`/calculations/sqrt` URI，幂（`Math.pow()`函数）作为`/calculation/power`
    URI。
- en: The @RequestMapping annotation
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@RequestMapping`注解'
- en: The `@RequestMapping` annotation is used at class level to map the `/calculation`
    URI to the `CalculationController` class, that is, it ensures that the HTTP request
    to `/calculation` is mapped to the `CalculationController` class. Based on the
    path defined using the annotation `@RequestMapping` of the URI (postfix of `/calculation`,
    for example, `/calculation/sqrt/144`), it would be mapped to respective methods.
    Here, the request mapping `/calculation/sqrt` is mapped to the `sqrt()` method
    and `/calculation/power` is mapped to the `pow()` method.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestMapping`注解用于类级别以将`/calculation` URI映射到`CalculationController`类，即，它确保对`/calculation`的HTTP请求映射到`CalculationController`类。基于使用`@RequestMapping`注解定义的路径的URI（例如，`/calculation/sqrt/144`的后缀），它将映射到相应的函数。在这里，请求映射`/calculation/sqrt`被映射到`sqrt()`方法，`/calculation/power`被映射到`pow()`方法。'
- en: 'You might have also observed that we have not defined what request method (`GET`/`POST`/`PUT`,
    and so on) these methods would use. The `@RequestMapping` annotation maps all
    the HTTP request methods by default. You could use specific methods by using the
    method property of `RequestMapping`. For example, you could write a `@RequestMethod`
    annotation in the following way to use the `POST` method:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到我们没有定义这些方法将使用什么请求方法（`GET`/`POST`/`PUT`等）。`@RequestMapping`注解默认映射所有HTTP请求方法。您可以使用`RequestMapping`的method属性来指定方法。例如，您可以像下面这样使用`POST`方法写一个`@RequestMethod`注解：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For passing the parameters along the way, the sample demonstrates both request
    parameters and path parameters using annotations `@RequestParam` and `@PathVariable`,
    respectively.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在途中传递参数，示例展示了使用`@RequestParam`和`@PathVariable`注解的请求参数和路径参数。
- en: The @RequestParam annotation
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@RequestParam`注解'
- en: '`@RequestParam` is responsible for binding the query parameter to the parameter
    of the controller''s method. For example, the `QueryParam` base and exponent are
    bound to parameters `b` and `e` of method `pow()` of `CalculationController` respectively.
    Both of the query parameters of the `pow()` method are required since we are not
    using any default value for them. Default values for query parameters could be
    set using the `defaultValue` property of `@RequestParam`, for example, `@RequestParam(value="base",
    defaultValue="2")`. Here, if the user does not pass the query parameter base,
    then the default value `2` would be used for the base.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RequestParam`负责将查询参数绑定到控制器的方法的参数。例如，`QueryParam`基底和指数分别绑定到`CalculationController`的`pow()`方法的参数`b`和`e`。由于我们没有为这两个查询参数使用任何默认值，所以`pow()`方法的这两个查询参数都是必需的。查询参数的默认值可以通过`@RequestParam`的`defaultValue`属性设置，例如，`@RequestParam(value="base",
    defaultValue="2")`。在这里，如果用户没有传递查询参数base，那么默认值`2`将用于基数。'
- en: 'If no `defaultValue` is defined, and the user doesn''t provide the request
    parameter, then `RestController` returns the HTTP `status` code `400` with the
    message `Required String parameter ''base'' is not present`. It always uses the
    reference of the first required parameter if more than one of the request parameters
    is missing:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有定义`defaultValue`，并且用户没有提供请求参数，那么`RestController`将返回HTTP`status`代码`400`以及消息`Required
    String parameter 'base' is not present`。如果多个请求参数缺失，它总是使用第一个必需参数的引用：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The @PathVariable annotation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`@PathVariable`注解'
- en: '`@PathVariable` helps you to create the dynamic URIs. `@PathVariable` annotation
    allows you to map Java parameters to a path parameter. It works with `@RequestMapping`
    where the placeholder is created in URI then the same placeholder name is used
    either as a `PathVariable` or a method parameter, as you can see in the `CalculationController`
    class'' method `sqrt()`. Here, the value placeholder is created inside the `@RequestMapping`
    and the same value is assigned to the value of the `@PathVariable`.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PathVariable`帮助你创建动态URI。`@PathVariable`注解允许你将Java参数映射到路径参数。它与`@RequestMapping`一起工作，在URI中创建占位符，然后使用相同的名字作为`PathVariable`或方法参数，正如你在`CalculationController`类的`sqrt()`方法中看到的。在这里，值占位符在`@RequestMapping`内部创建，相同的值分配给`@PathVariable`的值。'
- en: The `sqrt()` method takes the parameter in the URI in place of the request parameter,
    for example `http://localhost:8080/calculation/sqrt/144`. Here, the `144` value
    is passed as the path parameter and this URL should return the square root of
    `144`, that is `12`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqrt()`方法在URI中以请求参数的形式接收参数，例如`http://localhost:8080/calculation/sqrt/144`。在这里，`144`值作为路径参数传递，这个URL应该返回`144`的平方根，即`12`。'
- en: 'To use the basic check in place, we use the regular expression `"^-?+\\d+\\.?+\\d*$"`
    to allow only valid numbers in parameters. If non-numeric values are passed, the
    respective method adds an error message to the output key of the JSON:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用基本的检查，我们使用正则表达式`"^-?+\\d+\\.?+\\d*$"`来只允许参数中的有效数字。如果传递了非数字值，相应的方法会在JSON的输出键中添加错误消息：
- en: '`CalculationController` also uses the regular expression `.+` in the `path`
    variable (`path` parameter) to allow the decimal point(`.`) in numeric values:
    `/path/{variable:.+}`. Spring ignores anything after the last dot. Spring default
    behavior takes it as a file extension.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`CalculationController`还使用正则表达式`.+`在`path`变量（`path`参数）中允许数字值中的小数点（`.`）：`/path/{variable:.+}`。Spring忽略最后一个点之后的所有内容。Spring的默认行为将其视为文件扩展名。'
- en: There are other alternatives, such as adding a slash at the end (`/path/{variable}/`),
    or overriding the `configurePathMatch()`method of `WebMvcConfigurerAdapter` by
    setting the `useRegisteredSuffixPatternMatch` to `true`, using `PathMatchConfigurer`
    (available in Spring 4.0.1+).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他选择，例如在末尾添加一个斜杠（`/path/{variable}/`），或者通过设置`useRegisteredSuffixPatternMatch`为`true`来覆盖`WebMvcConfigurerAdapter`的`configurePathMatch()`方法，使用`PathMatchConfigurer`（在Spring
    4.0.1+中可用）。
- en: 'Code of `CalculationController` resource, where we have implemented to REST
    endpoints:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`CalculationController`资源的代码，我们实现了两个REST端点：'
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we are exposing only the `power` and `sqrt` functions for the `Calculation`
    resource using URI `/calculation/power` and `/calculation/sqrt`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只通过URI `/calculation/power` 和 `/calculation/sqrt` 暴露了`Calculation`资源的`power`和`sqrt`函数。
- en: Here, we are using `sqrt` and `power` as a part of the URI, which we have used
    for demonstration purposes only. Ideally, these should have been passed as the
    value of a request parameter `function`, or something similar based on endpoint
    design formation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`sqrt`和`power`作为URI的一部分，这仅是为了演示目的。理想情况下，这些应该作为`function`请求参数的值传递，或根据端点设计形成类似的内容。
- en: One interesting thing here is that due to Spring's HTTP message converter support,
    the `Calculation` object gets converted to JSON automatically. You don't need
    to do this conversion manually. If Jackson 2 is on the classpath, Spring's `MappingJackson2HttpMessageConverter`
    converts the `Calculation` object to JSON.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有趣的一点是，由于Spring的HTTP消息转换器支持，`Calculation`对象会自动转换为JSON。您不需要手动进行这种转换。如果Jackson
    2在类路径上，Spring的`MappingJackson2HttpMessageConverter`会将`Calculation`对象转换为JSON。
- en: Making a sample REST application executable
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个可执行的示例REST应用程序
- en: Create a `RestSampleApp` class with the annotation `SpringBootApplication`.
    The `main()` method uses Spring Boot's `SpringApplication.run()` method to launch
    an application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个带有`SpringBootApplication`注解的`RestSampleApp`类。`main()`方法使用Spring Boot的`SpringApplication.run()`方法来启动一个应用程序。
- en: 'We will annotate the `RestSampleApp` class with the `@SpringBootApplication`
    annotation that adds all of the following tags implicitly:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用`@SpringBootApplication`注解标记`RestSampleApp`类，这个注解隐式地添加了以下所有标签：
- en: The `@Configuration` annotation tags the class as a source of bean definitions
    for the application context.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Configuration`注解将类标记为应用程序上下文bean定义的来源。'
- en: The `@EnableAutoConfiguration` annotation indicates that Spring Boot is to start
    adding beans based on classpath settings, other beans, and various property settings.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@EnableAutoConfiguration`注解表明Spring Boot将根据类路径设置、其他bean和各种属性设置来添加bean。'
- en: The `@EnableWebMvc` annotation is added if Spring Boot finds `spring-webmvc`
    on the classpath. It treats the application as a web application and activates
    key behaviors such as setting up `DispatcherServlet`.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Spring Boot在类路径中找到`spring-webmvc`，则会添加`@EnableWebMvc`注解。它将应用程序视为网络应用程序并激活诸如设置`DispatcherServlet`等关键行为。
- en: 'The `@ComponentScan` annotation tells Spring to look for other components,
    configurations, and services in the given package:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ComponentScan`注解告诉Spring在给定包中寻找其他组件、配置和服务：'
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This web application is 100 percent pure Java and you don't have to deal with
    configuring any plumbing or infrastructure using XML; instead, it uses the Java
    annotation that is made even simpler by Spring Boot. Therefore, there wasn't a
    single line of XML except `pom.xml` for Maven. There wasn't even a `web.xml` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网络应用程序是100%的纯Java，您不必处理使用XML配置任何管道或基础设施的问题；相反，它使用了由Spring Boot简化的Java注解。因此，除了`pom.xml`用于Maven之外，没有一行XML。甚至没有`web.xml`文件。
- en: Adding a Jetty-embedded server
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Jetty内嵌服务器
- en: Spring Boot by default provides Apache Tomcat as an embedded application container.
    This book will use the Jetty-embedded application container in the place of Apache
    Tomcat. Therefore, we need to add a Jetty application container dependency to
    support the Jetty web server.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot默认提供Apache Tomcat作为内嵌应用程序容器。本书将使用Jetty内嵌应用程序容器代替Apache Tomcat。因此，我们需要添加一个支持Jetty网络服务器的Jetty应用程序容器依赖项。
- en: Jetty also allows you to read keys or trust stores using classpaths, that is,
    you don't need to keep these stores outside the JAR files. If you use Tomcat with
    SSL then you will need to access the key store or trust store directly from the
    filesystem, but you can't do that using the classpath. The result is that you
    can't read a key store or a trust store within a JAR file because Tomcat requires
    that the key store (and trust store if you're using one) is directly accessible
    on the filesystem. This may change post writing of this book.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Jetty还允许您使用类路径读取密钥或信任存储，也就是说，您不需要将这些存储保存在JAR文件之外。如果您使用带有SSL的Tomcat，那么您需要直接从文件系统访问密钥库或信任库，但是您不能使用类路径来实现。结果是，您不能在JAR文件内读取密钥库或信任库，因为Tomcat要求密钥库（如果您使用的话）信任库）直接可访问文件系统。这本书完成后可能会发生变化。
- en: 'This limitation doesn''t apply to Jetty, which allows the reading of keys or
    trust stores within a JAR file. A relative section on `pom.xml` of module `rest`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个限制不适用于Jetty，它允许在JAR文件内读取密钥或信任存储。下面是模块`rest`的`pom.xml`相对部分：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Setting up the application build
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序构建
- en: 'Whatever the `pom.xml` files, whatever we have used until now is enough to
    execute our sample REST service. This service would package the code into a JAR
    file. To make this JAR executable we need to opt for the following options:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 无论`pom.xml`文件是什么，我们到目前为止使用的东西已经足够执行我们的示例REST服务。这个服务会把代码打包成一个JAR文件。为了使这个JAR文件可执行，我们需要选择以下选项：
- en: Running the Maven tool
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Maven工具
- en: Executing with the Java command
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java命令执行
- en: The following sections will cover them in detail.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将详细介绍它们。
- en: Running the Maven tool
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Maven工具
- en: This method may not work because Java 9, Spring Boot 2, and Spring Framework
    5 are all in either in early or snapshot release. In case it does not work, please
    use a project using Java commands.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法可能不起作用，因为Java 9、Spring Boot 2和Spring Framework 5都处于早期或快照版本。如果它不起作用，请使用使用Java命令的项目。
- en: 'Here, we use the Maven tool to execute the generated JAR file, the steps for
    this are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用Maven工具执行生成的JAR文件，具体步骤如下：
- en: Right-click on the `pom.xml` file.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`pom.xml`文件。
- en: Select Run Maven | Goals... from the pop-up menu. It will open the dialog. Type
    `spring-boot:run` in the Goals field. We have used the released version of Spring
    Boot in the code. However, if you are using the snapshot release, you can check
    the Update Snapshots checkbox. To use it in the future, type `spring-boot-run`
    in the Remember as field.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出菜单中选择“运行Maven | 目标...”。它会打开对话框。在目标字段中输入`spring-boot:run`。我们在代码中使用了Spring
    Boot的发布版本。然而，如果您使用快照版本，您可以勾选“更新快照”复选框。为了将来使用，在“记住为”字段中输入`spring-boot-run`。
- en: 'Next time, you could directly click Run Maven | Goals | `spring-boot-run` to
    execute the project:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下次，您可以直接点击“运行Maven | 目标 | `spring-boot-run`”来执行项目：
- en: '![](img/a87ddfcb-0346-4f49-aa19-6fb7943ba13a.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a87ddfcb-0346-4f49-aa19-6fb7943ba13a.png)'
- en: Run Maven dialog
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Maven对话框
- en: Click OK to execute the project.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定以执行项目。
- en: Executing with the Java command
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Java命令执行
- en: Please make sure that Java and `JAVA_HOME` is set to Java 9 before executing
    the following commands.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在执行以下命令之前，Java和`JAVA_HOME`已设置为Java 9。
- en: 'Take a look at the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下步骤：
- en: 'To build the JAR file, perform the `mvn clean package` command from the Command
    Prompt from the parent project root directory (`6392_chapter2`). Here, `clean`
    and `package` are Maven goals:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建JAR文件，请从父项目根目录（`6392_chapter2`）的命令提示符中执行`mvn clean package`命令。在这里，`clean`和`package`是Maven目标：
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It creates the JAR files in a respective target directory. We''ll execute the
    JAR files generated in the `6392_chapter2\rest\target` directory. A JAR file can
    be executed using the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将在相应的目标目录中创建JAR文件。我们将执行在`6392_chapter2\rest\target`目录中生成的JAR文件。可以使用以下命令执行JAR文件：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Please make sure you execute the JAR file having a postfix `exec` as shown in
    the preceding command.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您执行具有后缀`exec`的JAR文件，如前一个命令所示。
- en: REST API testing using the Postman Chrome extension
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Postman Chrome扩展进行REST API测试
- en: 'This book uses the Postman - REST Client extension for Chrome to test our REST
    service. I use the 5.0.1 version of Postman. You can use the Postman Chrome application
    or any other REST Client to test your sample REST application, as shown in the
    following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用Postman - REST Client Chrome扩展来测试我们的REST服务。我使用的是Postman 5.0.1版本。您可以使用Postman
    Chrome应用程序或其他REST客户端来测试您的示例REST应用程序，如下面的屏幕截图所示：
- en: '![](img/6736f3bc-973d-4c2d-aecf-9805679d74e8.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6736f3bc-973d-4c2d-aecf-9805679d74e8.png)'
- en: Postman - Rest Client Chrome extension
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Postman - Rest Client Chrome扩展
- en: Let's test our first REST resource once you have the Postman - REST Client installed.
    We start the Postman - REST Client from either the Start menu or from a shortcut.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了Postman - REST Client，让我们测试我们的第一个REST资源。我们从开始菜单或从快捷方式中启动Postman - REST
    Client。
- en: 'By default, the embedded web server starts on port `8080`. Therefore, we need
    to use the `http://localhost:8080/<resource>` URL for accessing the sample REST
    application. For example: `http://localhost:8080/calculation/sqrt/144`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，嵌入式Web服务器在端口`8080`上启动。因此，我们需要使用`http://localhost:8080/<资源>`URL来访问示例REST应用程序。例如：`http://localhost:8080/calculation/sqrt/144`。
- en: Once it's started, you can type the `Calculation` REST URL for `sqrt` and value
    `144` as the path parameter. You can see it in the following screenshot. This
    URL is entered in the URL (enter request URL here) input field of the Postman
    extension. By default, the request method is `GET`. We use the default value for
    the request method, as we have also written our RESTful service to serve the request
    `GET` method.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，您可以在路径参数中输入`Calculation` REST URL的`sqrt`值和`144`。您可以在以下屏幕截图中看到。此URL在Postman扩展的URL（在此处输入请求URL）输入字段中输入。默认情况下，请求方法是`GET`。由于我们还编写了RESTful服务以提供`GET`方法的请求，因此我们使用默认的请求方法。
- en: Once you are ready with your input data as mentioned earlier, you can submit
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您准备好前面提到的输入数据，您就可以提交
- en: the request by clicking the Send button. You can see in the following screenshot
    that
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击发送按钮发送请求。您可以在以下屏幕截图中看到
- en: the response code `200` is returned by your sample REST service. You can find
    the Status label in the following screenshot to see the 200 OK code. A successful
    request
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 响应代码`200`由您的示例REST服务返回。您可以在以下屏幕截图中的状态标签中找到200 OK代码。成功的请求
- en: also returns the JSON data of the `Calculation` resource, shown in the Pretty
    tab
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 还返回了`Calculation`资源的JSON数据，在美化标签中显示
- en: in the screenshot. The returned JSON shows the `sqrt` method value of the function
    key.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕截图中。返回的JSON显示了函数键的`sqrt`方法值。
- en: 'It also displays `144` and `12.0` as the input and output lists, respectively:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 它还显示了输入和输出列表分别为`144`和`12.0`：
- en: '![](img/7cfef8d6-9407-450b-a50f-2373f48905af.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cfef8d6-9407-450b-a50f-2373f48905af.png)'
- en: Calculation (`sqrt`) resource test with Postman
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Postman测试Calculation（sqrt）资源
- en: 'Similarly, we also test our sample REST service for calculating the `power`
    function. We input the following data in the Postman extension:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们还测试了用于计算`power`函数的示例REST服务。在Postman扩展中输入以下数据：
- en: '**URL**: [http://localhost:8080/calculation/power?base=2&exponent=4](http://localhost:8080/calculation/power?base=2&exponent=4)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**: [http://localhost:8080/calculation/power?base=2&exponent=4](http://localhost:8080/calculation/power?base=2&exponent=4)'
- en: '**Request method**: `GET`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求方法**: `GET`'
- en: 'Here, we are passing the request parameters `base` and `exponent` with values
    of `2` and `4`, respectively. It returns the following JSON:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们传递了请求参数`base`和`exponent`，分别值为`2`和`4`。它返回以下JSON：
- en: '[PRE14]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It returns the preceding JSON with a response status of 200, as shown in the
    following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回前面JSON响应状态为200，如下所示：
- en: '![](img/26a95ed3-d396-4b16-861e-5de873e8ee7c.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26a95ed3-d396-4b16-861e-5de873e8ee7c.png)'
- en: Calculation (`power`) resource test with Postman
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 计算（`power`）资源测试使用Postman
- en: Some more positive test scenarios
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些更多正测试场景
- en: 'In the following table, all the URLs start with `http://localhost:8080`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格中的所有URL均以`http://localhost:8080`开头：
- en: '| URL | Output JSON |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| URL | 输出JSON |'
- en: '| --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `/calculation/sqrt/12344.234` |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/sqrt/12344.234` |'
- en: '[PRE15]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The `/calculation/sqrt/-9344.34` of the `Math.sqrt` function''s special scenario:If
    the argument is `NaN` or less than zero, then the result is `NaN` |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/sqrt/-9344.34`的`Math.sqrt`函数的特殊场景：如果参数是`NaN`或小于零，则结果是`NaN`
    |'
- en: '[PRE16]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/calculation/power?base=2.09&exponent=4.5` |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/power?base=2.09&exponent=4.5` |'
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/calculation/power?base=-92.9&exponent=-4` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/power?base=-92.9&exponent=-4` |'
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Negative test scenarios
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负测试场景
- en: 'Similarly, you could also perform some negative scenarios as shown in the following
    table. In this table, all the URLs start with `http://localhost:8080`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您也可以执行一些负场景，如下表所示。在此表中，所有URL均以`http://localhost:8080`开头：
- en: '| URL | Output JSON |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| URL | 输出JSON |'
- en: '| --- | --- |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `/calculation/power?base=2a&exponent=4` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/power?base=2a&exponent=4` |'
- en: '[PRE19]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/calculation/power?base=2&exponent=4b` |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/power?base=2&exponent=4b` |'
- en: '[PRE20]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/calculation/power?base=2.0a&exponent=a4` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/power?base=2.0a&exponent=a4` |'
- en: '[PRE21]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/calculation/sqrt/144a` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/sqrt/144a` |'
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/calculation/sqrt/144.33$` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `/calculation/sqrt/144.33$` |'
- en: '[PRE23]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have explored various aspects of setting up a development
    environment, Maven configuration, Spring Boot configuration, and so on.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经探索了设置开发环境、Maven配置、Spring Boot配置等方面的各种方面。
- en: You have also learned how to make use of Spring Boot to develop a sample REST
    service application. We learned how powerful Spring Boot is—it eases development
    so much that you only have to worry about the actual code, and not about the boilerplate
    code or configurations that you write. We have also packaged our code into a JAR
    file with an embedded application container Jetty. It allows it to run and access
    the web application without worrying about the deployment.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学习了如何使用Spring Boot开发一个示例REST服务应用程序。我们了解到Spring Boot有多强大——它极大地简化了开发，以至于你只需要担心实际代码，而不需要担心编写
    boilerplate 代码或配置。我们还把我们代码打包成一个带有内嵌应用容器Jetty的JAR文件。它允许它运行并访问Web应用程序，而无需担心部署。
- en: In the next chapter, you will learn the **domain-driven design** (**DDD**) using
    a sample project that can be used across the rest of the chapters. We'll use the
    sample project **online table reservation system** (**OTRS**) to go through various
    phases of microservices development and understand the DDD. After completing [Chapter
    3](8d3fd180-4f27-4bf7-bb86-c180ac200687.xhtml), *Domain-Driven Design,* you will
    learn the fundamentals of DDD.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习**领域驱动设计**（**DDD**）。我们使用一个可以用于其他章节的示例项目来了解DDD。我们将使用名为**在线餐桌预订系统**（**OTRS**）的示例项目来经历微服务开发的各个阶段并了解DDD。在完成[第3章](8d3fd180-4f27-4bf7-bb86-c180ac200687.xhtml)，《领域驱动设计》之后，您将了解DDD的基础知识。
- en: 'You will understand how to practically use the DDD by design sample services.
    You will also learn to design the domain models and REST services on top of it.
    The following are a few links that you can take a look at to learn more about
    the tools we used here:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你将理解如何实际使用DDD设计示例服务。你还将学习如何在它之上设计领域模型和REST服务。以下是一些你可以查看以了解更多关于我们在此处使用的工具的链接：
- en: '**Spring** **Boot**: [http://projects.spring.io/spring-boot/](http://projects.spring.io/spring-boot/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring** **Boot**：[http://projects.spring.io/spring-boot/](http://projects.spring.io/spring-boot/)'
- en: '**Download** **NetBeans**: [https://netbeans.org/downloads](https://netbeans.org/downloads)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载** **NetBeans**：[https://netbeans.org/downloads](https://netbeans.org/downloads)'
- en: '**Representational State Transfer** (**REST**): Chapter 5 ([https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm))
    of Roy Thomas Fielding''s Ph.D. dissertation *Architectural Styles and the Design
    of Network-based Software Architectures*'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示状态传输**（**REST**）：Roy Thomas Fielding博士学位论文《架构风格与基于网络的软件体系结构设计》的第5章（[https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm)）'
- en: '**REST**: [https://en.wikipedia.org/wiki/Representational_state_transfer](https://en.wikipedia.org/wiki/Representational_state_transfer)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST**: [https://en.wikipedia.org/wiki/Representational_state_transfer](https://en.wikipedia.org/wiki/Representational_state_transfer)'
- en: '**Maven**: [https://maven.apache.org/](https://maven.apache.org/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven**: [https://maven.apache.org/](https://maven.apache.org/)'
- en: '**Gradle**: [http://gradle.org/](http://gradle.org/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gradle**: [http://gradle.org/](http://gradle.org/)'
