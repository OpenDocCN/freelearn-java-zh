- en: Chapter 3. Maven Lifecycle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：Maven 生命周期
- en: 'Let us start putting Maven to use. In this chapter, we will cover the following
    recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Maven。在本章中，我们将介绍以下食谱：
- en: Understanding the Maven lifecycle, phases, and goals
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Maven 生命周期、阶段和目标
- en: Understanding the pom file
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 pom 文件
- en: Understanding Maven settings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Maven 设置
- en: Understanding command-line options in Maven
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Maven 的命令行选项
- en: Understanding Maven profiles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Maven 配置文件
- en: Adding a new Maven profile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的 Maven 配置文件
- en: Activating/deactivating a Maven profile
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活/停用 Maven 配置文件
- en: Using properties in Maven
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Maven 中使用属性
- en: Specifying source encoding for platform-independent builds
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定平台无关构建的源编码
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: We have set up Maven on our computer. We have created a simple Maven project
    and seen how to build it. We have also set up Maven to run on our preferred IDE.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的计算机上设置了 Maven。我们已经创建了一个简单的 Maven 项目并看到了如何构建它。我们还设置了 Maven 在我们首选的 IDE
    上运行。
- en: Let us now understand better how Maven works and how to use it. We will start
    by understanding the Maven build lifecycle as well as the phases and goals that
    make up the lifecycle. We will also explore Maven's project configuration pom
    file as well as the settings file. We will also try to understand what Maven profiles
    are and why they are needed. Finally, we will look at Maven's properties.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更好地理解 Maven 的工作原理以及如何使用它。我们将从理解 Maven 构建生命周期以及构成生命周期的阶段和目标开始。我们还将探索 Maven
    的项目配置 pom 文件以及设置文件。我们还将尝试理解 Maven 配置文件是什么以及为什么需要它们。最后，我们将查看 Maven 的属性。
- en: Understanding the Maven lifecycle, phases, and goals
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Maven 生命周期、阶段和目标
- en: As we start using Maven, we need to understand the Maven project lifecycle.
    Maven is implemented based around the concept of a build lifecycle. This means
    there is a clearly defined process to build and distribute artifacts with Maven.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用 Maven 时，我们需要了解 Maven 项目的生命周期。Maven 是基于构建生命周期的概念实现的。这意味着有一个明确的过程来使用 Maven
    构建和分发工件。
- en: What makes up a lifecycle? The stages of a lifecycle are called phases. In each
    phase, one or more goals can be executed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期由什么组成？生命周期的阶段被称为阶段。在每个阶段，可以执行一个或多个目标。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven is set up on your system and is verified as working. For setting up Apache
    Maven, refer to the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting
    Started"), *Getting Started*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 已在您的系统上设置并验证其工作状态。有关设置 Apache Maven 的信息，请参阅第 1 章的前三个食谱，*入门*。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To build a Maven project, perform the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个 Maven 项目，请执行以下步骤：
- en: Open the command prompt.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Run one of the Maven commands that we are familiar with:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行我们熟悉的 Maven 命令之一：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Observe the various steps that get executed.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察执行的各种步骤。
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Maven has three built-in build lifecycles:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 有三个内置的构建生命周期：
- en: '`default`: The `default` lifecycle handles project build and deployment'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：`default` 生命周期处理项目的构建和部署'
- en: '`clean`: The `clean` lifecycle cleans up the files and folders produced by
    Maven'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`：`clean` 生命周期清理 Maven 生成的文件和文件夹'
- en: '`site`: The `site` lifecycle handles the creation of project documentation'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site`：`site` 生命周期处理项目文档的创建'
- en: You will have noticed that you do not have to explicitly specify a lifecycle.
    Instead, what you specify is a phase. Maven infers the lifecycle based on the
    phase specified.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到您不必明确指定生命周期。相反，您指定的是阶段。Maven 根据指定的阶段推断生命周期。
- en: For instance, the `package` phase indicates it is the `default` lifecycle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`package` 阶段表明它是 `default` 生命周期。
- en: When Maven is run with the `package` phase as a parameter, the `default` build
    lifecycle gets executed. Maven runs all the phases in sequence, up to and including
    the specified phase (in our case, the `package` phase).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Maven 以 `package` 阶段作为参数运行时，将执行 `default` 构建生命周期。Maven 将按顺序运行所有阶段，直到并包括指定的阶段（在我们的例子中是
    `package` 阶段）。
- en: 'While each lifecycle has a number of phases, let us look at the important phases
    for each lifecycle:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个生命周期都有多个阶段，但让我们看看每个生命周期的重要阶段：
- en: 'The `clean` lifecycle: The `clean` phase removes all the files and folders
    created by Maven as part of its build'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean` 生命周期：`clean` 阶段会移除 Maven 在构建过程中创建的所有文件和文件夹'
- en: 'The `site` lifecycle: The `site` phase generates the project''s documentation,
    which can be published, as well as a template that can be customized further'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site` 生命周期：`site` 阶段生成项目的文档，可以发布，以及可以进一步定制的模板'
- en: 'The `default` lifecycle: The following are some of the important phases of
    the `default` lifecycle:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` 生命周期：以下是一些 `default` 生命周期的关键阶段：'
- en: '`validate`: This phase validates that all project information is available
    and correct'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate`：这个阶段验证所有项目信息是否可用且正确'
- en: '`process-resources`: This phase copies project resources to the destination
    to package'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-resources`：这个阶段将项目资源复制到目标位置以打包'
- en: '`compile`: This phase compiles the source code'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile`：这个阶段编译源代码'
- en: '`test`: This phase runs unit tests within a suitable framework'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：这个阶段在合适的框架内运行单元测试'
- en: '`package`: This phase packages the compiled code in its distribution format'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`：这个阶段将编译后的代码打包成其分发格式'
- en: '`integration-test`: This phase processes the package in the integration test
    environment'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integration-test`：这个阶段在集成测试环境中处理包'
- en: '`verify`: This phase runs checks to verify that the package is valid'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verify`：这个阶段运行检查以验证包是否有效'
- en: '`install`: This phase installs the package in the local repository'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：这个阶段将包安装到本地仓库'
- en: '`deploy`: This phase installs the final package in the configured repository'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`：这个阶段将最终包安装到配置的仓库'
- en: Each phase is made up of plugin goals. A plugin goal is a specific task that
    builds the project. Some goals make sense only in specific phases (for example,
    the compile goal of the Maven Compiler plugin makes sense in the compile phase,
    but the `checkstyle` goal of the Maven Checkstyle plugin can potentially be run
    in any phase). So some goals are bound to a specific phase of a lifecycle, while
    others are not.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段由插件目标组成。插件目标是一个构建项目的特定任务。一些目标只在特定阶段有意义（例如，Maven Compiler 插件的编译目标在编译阶段有意义，但
    Maven Checkstyle 插件的 `checkstyle` 目标可以在任何阶段运行）。因此，一些目标绑定到生命周期的特定阶段，而其他则不是。
- en: 'Here is a table of phases, plugins, and goals:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个阶段、插件和目标的表格：
- en: '| Phase | Plugin | Goal |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 插件 | 目标 |'
- en: '| --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `clean` | Maven Clean plugin | clean |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `clean` | Maven Clean 插件 | clean |'
- en: '| `site` | Maven Site plugin | site |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `site` | Maven Site 插件 | site |'
- en: '| `process-resources` | Maven Resources plugin | resource |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `process-resources` | Maven Resources 插件 | resource |'
- en: '| `compile` | Maven Compiler plugin | compile |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `compile` | Maven Compiler 插件 | compile |'
- en: '| `test` | Maven Surefire plugin | test |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `test` | Maven Surefire 插件 | test |'
- en: '| `package` | Varies based on the packaging; for instance, the Maven JAR plugin
    | jar (in the case of a Maven JAR plugin) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `package` | 根据打包方式而异；例如，Maven JAR 插件 | jar（在 Maven JAR 插件的情况下）|'
- en: '| `install` | Maven Install plugin | install |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `install` | Maven Install 插件 | install |'
- en: '| `deploy` | Maven Deploy plugin | deploy |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `deploy` | Maven Deploy 插件 | deploy |'
- en: Understanding the pom file
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 pom 文件
- en: Every Maven project has a pom file that defines what the project is all about
    and how it should be built. Pom is an acronym for **project object model**. Let
    us take a peek at this file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Maven 项目都有一个 pom 文件，它定义了项目的内容以及如何构建它。Pom 是 **项目对象模型** 的缩写。让我们看看这个文件。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s understand the pom file, by performing the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来理解 pom 文件：
- en: Go to a Maven project that we created in previous chapters.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往我们在前几章中创建的 Maven 项目。
- en: Open the file named `pom.xml`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开名为 `pom.xml` 的文件。
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'A pom file is an XML file that is based on a specific schema, as specified
    at the top of the file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: pom 文件是一个基于特定架构的 XML 文件，如文件顶部所指定的：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is also a `modelVersion` element that defines the version of this schema:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个 `modelVersion` 元素，它定义了此架构的版本：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These are the basic elements of a pom file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 pom 文件的基本元素。
- en: 'The `groupId` element is a unique identifier of the organization to which the
    project belongs. For our sample project, it is `org.packt.cookbook`. It is a good
    practice to follow the reverse domain name notation to specify this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId` 元素是项目所属组织的唯一标识符。对于我们的示例项目，它是 `org.packt.cookbook`。遵循反向域名表示法来指定这是一个好习惯：'
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `artifactId` element is the name of the project. For our sample project,
    it is `simple-project`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`artifactId` 元素是项目的名称。对于我们的示例项目，它是 `simple-project`：'
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `version` element is the specific instance of the project, corresponding
    to the source code at a particular instance of time. In our case, it is `1.0-SNAPSHOT`,
    which is a default version during development:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`version` 元素是项目的特定实例，对应于特定时间点的源代码。在我们的例子中，它是 `1.0-SNAPSHOT`，这是开发期间的一个默认版本：'
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will explore the difference between the **SNAPSHOT** and concrete versions
    later in the book.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分探讨 **SNAPSHOT** 版本和具体版本之间的区别。
- en: The combination of `groupId`, `artifactId`, and `version` uniquely identifies
    the project. In this sense, they are the coordinates of the project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId`、`artifactId`和`version`的组合唯一标识项目。从这个意义上讲，它们是项目的坐标。'
- en: 'The `packaging` element indicates the artifact type of the project. This is
    typically a `jar`, `war`, `zip`, or in some cases, a `pom`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`packaging`元素表示项目的工件类型。这通常是`jar`、`war`、`zip`，在某些情况下，是`pom`：'
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `dependencies` element section of the pom file defines all the dependent
    projects of this project. This would typically be third-party libraries required
    to build, test, and run the project:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: pom文件中的`dependencies`元素部分定义了此项目的所有依赖项目。这通常是需要构建、测试和运行项目的第三方库：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `parent` section is used to indicate a relationship, specifically a parent-child
    relationship. If the project is part of a multi-module project or inherits project
    information from another project, then the details are specified in this section:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`parent`部分用于表示关系，具体来说是父子关系。如果项目是多模块项目的一部分或从另一个项目继承项目信息，那么详细信息将在此部分中指定：'
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Maven properties are **placeholders**. Their values are accessible anywhere
    in the pom file by using `${key}`, where `key` is the property name:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Maven属性是**占位符**。它们的值可以通过使用`${key}`在任何pom文件位置访问，其中`key`是属性名称：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A project with modules is known as a multi-module or **aggregator project**.
    Modules are projects that this pom file lists and are executed as a group:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有模块的项目被称为多模块或**聚合项目**。模块是pom文件中列出的项目，并且作为一个组执行：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For more information on multi-module projects refer to [Chapter 9](ch09.html
    "Chapter 9. Multi-module Projects"), *Multi-module Projects*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关多模块项目的更多信息，请参阅[第9章](ch09.html "第9章。多模块项目")，*多模块项目*。
- en: Understanding Maven settings
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Maven设置
- en: Now that we have got an idea of the essential elements of a pom file, let us
    also examine the various setting properties of Maven.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了pom文件的基本元素，让我们也来检查Maven的各种设置属性。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To understand the Maven settings, perform the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Maven设置，请执行以下步骤：
- en: Open the `settings.xml` file in the `.m2` subfolder of your `HOME` folder, if
    it exists:![How to do it...](img/6124OS_03_01.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在，打开您的`HOME`文件夹的`.m2`子文件夹中的`settings.xml`文件：![如何操作...](img/6124OS_03_01.jpg)
- en: Otherwise, open the `settings.xml` file in the `conf` folder of your Maven installation
    (as defined in `M2_HOME`).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，打开Maven安装目录下的`conf`文件夹中的`settings.xml`文件（如`M2_HOME`中定义的）。
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Maven has a global settings file called `settings.xml` in the `conf` folder
    of the Maven installation. The values in this file can be overridden in the user
    settings file— the `settings.xml` file—that is present in the `.m2` subfolder
    of your `HOME` folder.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Maven有一个全局设置文件，名为`settings.xml`，位于Maven安装目录的`conf`文件夹中。此文件中的值可以在用户设置文件中覆盖——存在于您的`HOME`文件夹`.m2`子文件夹中的`settings.xml`文件。
- en: The settings file contains configurations that are not specific to a project,
    but are global in nature. It also contains information that is not meant to be
    distributed (for example, passwords).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设置文件包含不是特定于项目的配置，而是具有全局性质。它还包含不打算分发的信息（例如，密码）。
- en: 'Like the pom file, the settings file is also an XML file based on an XML schema.
    It starts as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与pom文件一样，设置文件也是一个基于XML模式的XML文件。它以以下方式开始：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let us now see some of the typical setting configurations:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一些典型的设置配置：
- en: The localRepository element
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`localRepository`元素'
- en: 'The following code represents the `localRepository` element in the settings
    file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码表示设置文件中的`localRepository`元素：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have seen this in the *Changing the location of the Maven repository* recipe
    in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*, where
    we wanted to change the default location where Maven dependencies and plugins
    are stored.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html "第1章。入门")中看到的`Changing the location of the Maven repository`配方中已经看到了这一点，我们想要更改Maven依赖项和插件存储的默认位置。
- en: The offline element
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离线元素
- en: 'The following code represents the `offline` element in the settings file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码表示设置文件中的`offline`元素：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This setting indicates whether Maven should operate in offline mode; that is,
    it should not download updates or dependencies if they are not available.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置指示Maven是否应在离线模式下运行；也就是说，如果不可用，则不应下载更新或依赖项。
- en: The proxies element
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代理元素
- en: 'We saw proxies in the **Running Maven behind an HTTP proxy server** recipe
    in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*. The
    following code represents the `proxies` element in the settings file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 1 章](ch01.html "第 1 章。入门") 的“在 HTTP 代理服务器后面运行 Maven”配方中看到了代理。以下代码表示设置文件中的
    `proxies` 元素：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This allows us to specify a proxy server to connect to the Internet. This is
    relevant in enterprises where direct access to the Internet might be blocked due
    to security or other reasons.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们指定一个代理服务器以连接到互联网。这在由于安全或其他原因可能阻止直接访问互联网的企业中是相关的。
- en: The mirrors element
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 镜像元素
- en: 'The following code represents the `mirrors` element in the settings file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码表示设置文件中的 `mirrors` 元素：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Instead of downloading dependencies from Maven Central, you can configure Maven
    to download them from a mirror of the central repository. This is extremely useful
    in an organization where the repository can be mirrored in a repository manager
    within an organization and all users can download dependencies from this mirror.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与从 Maven Central 下载依赖项相比，您可以配置 Maven 从中央仓库的镜像下载依赖项。这在仓库可以在组织内部的仓库管理器中镜像，并且所有用户都可以从这个镜像下载依赖项的组织中非常有用。
- en: The repositories element
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仓库元素
- en: 'Repositories are remote collections of projects that Maven uses to populate
    the required dependencies to a local repository. There are two types of repositories—`releases`
    and `snapshots`—and Maven allows specific configurations for each, as illustrated
    in the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库是 Maven 用于将所需的依赖项填充到本地仓库的远程项目集合。有两种类型的仓库——“发布”和“快照”——Maven 允许为每个仓库进行特定配置，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The pluginRepositories element
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件仓库元素
- en: While repositories store dependencies required for the project, the `pluginRepositories`
    element stores plugin libraries and associated files. Maven distinguishes between
    these two by having separate configurations for both. The elements are the same
    as that for repositories, except that the parent element is `pluginRepositories`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然“仓库”存储项目所需的依赖项，但“pluginRepositories”元素存储插件库和相关文件。Maven 通过为这两个元素提供单独的配置来区分它们。这些元素与仓库的元素相同，只是父元素是
    `pluginRepositories`。
- en: The servers element
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器元素
- en: 'The repositories for download and deployment are defined by the `repositories`
    and `distributionManagement` elements of the pom file. However, settings such
    as `username` and `password` cannot be distributed in the pom file for confidentiality
    reasons. Maven provides a mechanism to specify this in the settings file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和部署的仓库由 pom 文件中的 `repositories` 和 `distributionManagement` 元素定义。然而，出于保密原因，如
    `username` 和 `password` 这样的设置不能在 pom 文件中分发。Maven 提供了一种机制，可以在设置文件中指定这些设置：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Understanding command-line options in Maven
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Maven 的命令行选项
- en: While the most popular way to run Maven is to specify goals, Maven provides
    a number of command-line options to customize its behavior. They range from specifying
    values for properties, to varying the verbosity of the Maven output. It is useful
    to know some of the arguments, as they will often help with troubleshooting issues
    with Maven.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然指定目标是最流行的运行 Maven 的方式，但 Maven 提供了许多命令行选项来自定义其行为。这些选项从指定属性的值到改变 Maven 输出的详细程度不等。了解一些参数是有用的，因为它们通常会帮助解决与
    Maven 相关的问题。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven is set up on your system and is verified as working.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 已在您的系统上设置并验证其工作状态。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To understand command-line options in Maven, perform the following steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 Maven 的命令行选项，请执行以下步骤：
- en: Open the command prompt.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Run the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE18]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You will see an output such as the following screenshot:![How to do it...](img/6124OS_03_02.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到如下截图所示的输出：![如何操作...](img/6124OS_03_02.jpg)
- en: A number of options that Maven supports are displayed in the preceding screenshot.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 支持的许多选项在上面的屏幕截图中显示。
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We will briefly discuss the command-line options that Maven provides.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要讨论 Maven 提供的命令行选项。
- en: Options
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项
- en: 'When there is an error while running Maven, this flag will result in Maven
    displaying a detailed stack trace of the error:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 Maven 时出现错误，此标志将导致 Maven 显示错误详细堆栈跟踪：
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When the `quiet` option is enabled, only errors are displayed. The other outputs
    are not printed. This permits speeding up builds where verbose outputs are usually
    displayed:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用`quiet`选项时，只显示错误。其他输出不会打印。这允许加快构建速度，因为在通常显示详细输出的情况下：
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We have seen the `version` option to display the Maven version in the first
    three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting
    Started*. This is also a simple way to check if Maven is installed and working:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html "第1章。入门")的“入门”的前三个菜谱中看到了`version`选项，用于显示Maven版本。这也是检查Maven是否已安装并正常工作的简单方法：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When invoked with the `offline` option, Maven does not attempt to download
    any dependency or plugin from the Internet. This option will work correctly, provided
    Maven has all the information required for the project to be built and run. We
    will see how to enable projects to run in offline mode:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`offline`选项调用时，Maven不会尝试从互联网下载任何依赖或插件。此选项将正确工作，前提是Maven拥有构建和运行项目所需的所有信息。我们将看到如何启用项目以离线模式运行：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When enabled with the `debug` option, Maven prints a lot of verbose output
    about every step that it performs. This is typically used to troubleshoot any
    build issues:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用`debug`选项时，Maven会打印出关于它执行的每个步骤的大量详细输出。这通常用于解决任何构建问题：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Understanding Maven profiles
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Maven配置文件
- en: Maven is designed to create portable builds that are expected to work across
    different platforms and in various runtime environments.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Maven旨在创建可移植的构建，预期将在不同的平台和不同的运行时环境中工作。
- en: Now, there may be situations where you need to build the same project differently.
    For instance, you may need to build a project differently for the purpose of staging
    and production. You may not want to build a project that requires a Linux library
    on Windows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可能存在需要以不同方式构建相同项目的情况。例如，您可能需要为预演和生产目的以不同的方式构建项目。您可能不希望在Windows上构建需要Linux库的项目。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s understand Maven profiles by performing the following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤来理解Maven配置文件：
- en: Open `settings.xml` in the `conf` subfolder of your Maven installation (as specified
    in `M2_HOME`).
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Maven安装的`conf`子文件夹中打开`settings.xml`（如`M2_HOME`中指定）。
- en: View the commented section of profiles.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看配置文件中的注释部分。
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Maven provides three type of profiles:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了三种类型的配置文件：
- en: Per Project profile as defined in the pom file of the project
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据项目pom文件定义的项目配置文件
- en: Per User profile as defined in the user settings file (in the `.m2` subfolder
    of the user's `HOME` folder)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据用户设置文件（位于用户`HOME`文件夹的`.m2`子文件夹中）定义的用户配置文件
- en: A Global profile as defined in the global settings file (in the `conf` folder
    of `M2_HOME`)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个全局配置文件，如全局设置文件（位于`M2_HOME`的`conf`文件夹中）定义
- en: By creating different profiles for different variations of the project build,
    you can use the same pom file to create differing builds.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为项目构建的不同变体创建不同的配置文件，您可以使用相同的pom文件创建不同的构建。
- en: One should be careful to ensure that this does not result in a non-portable
    build.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 应小心确保这不会导致不可移植的构建。
- en: Adding a new Maven profile
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的Maven配置文件
- en: Let us add a simple Maven profile to test our understanding of profiles.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个简单的Maven配置文件来测试我们对配置文件的理解。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s create a new Maven profile, by performing the following steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤创建一个新的Maven配置文件：
- en: Create a new Maven project using the commands specified in the *Creating a simple
    project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[第1章](ch01.html "第1章。入门")中“使用Maven创建简单项目”菜谱中指定的命令创建一个新的Maven项目。
- en: 'Add the following code in the `pom.xml` file:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`文件中添加以下代码：
- en: '[PRE24]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are two ways to create a profile: in the project''s pom file or in the
    settings file. It is important to note that, if a profile is active from the settings
    file, its values will override any profiles with equivalent IDs in the pom file.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 创建配置文件有两种方式：在项目的pom文件中或在设置文件中。重要的是要注意，如果配置文件从设置文件中激活，其值将覆盖pom文件中具有等效ID的任何配置文件。
- en: 'The profile in `pom.xml` can have the following elements:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`pom.xml`中的配置文件可以包含以下元素：'
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The profile in `settings.xml` can only have the following elements:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`settings.xml`中的配置文件只能包含以下元素：'
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Activating/deactivating a Maven profile* recipe in this chapter
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*激活/停用Maven配置文件*菜谱
- en: Activating/deactivating a Maven profile
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活/停用Maven配置文件
- en: A profile can be specified in `pom.xml` or `settings.xml`. Each profile may
    be created for a specific purpose; for instance, to run on a particular platform
    or to run in an integration environment. All profiles may not need to run in all
    cases. Maven provides a mechanism to activate and deactivate a profile as required.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件可以在 `pom.xml` 或 `settings.xml` 中指定。每个配置文件可能都是为了特定目的而创建的；例如，在特定平台上运行或在集成环境中运行。并非所有配置文件在所有情况下都需要运行。Maven
    提供了一种机制，根据需要激活和禁用配置文件。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Use the project where we created the profile to add a new Maven profile section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们创建配置文件的项目来添加一个新的 Maven 配置文件部分。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s perform the following steps to activate/deactivate a Maven profile:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来激活/禁用 Maven 配置文件：
- en: 'To deactivate a profile, set the following value in the `activeByDefault` element:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要禁用配置文件，在 `activeByDefault` 元素中设置以下值：
- en: '[PRE27]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the Maven command to check if the profile is active:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Maven 命令以检查配置文件是否激活：
- en: '[PRE28]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output for the preceding command is shown as follows:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下所示：
- en: '[PRE29]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To activate the profile, set the following value:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要激活配置文件，设置以下值：
- en: '[PRE30]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Confirm that the profile is now active, by executing the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令来确认配置文件现在已激活：
- en: '[PRE31]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output for preceding command is shown as follows:'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下所示：
- en: '[PRE32]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Profiles can be triggered in one of the following ways:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件可以通过以下方式之一被触发：
- en: 'Explicitly: Here, Maven provides a command-line option to invoke a profile,
    shown in the following command:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确：在这里，Maven 提供了一个命令行选项来调用配置文件，如下所示命令：
- en: '[PRE33]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This invokes the `dev` profile
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将调用 `dev` 配置文件
- en: 'Through settings: A profile can be activated in the settings file by setting
    the `<active>` property to `true`. If activated, when the project is built, the
    profile is invoked:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置：可以通过将 `<active>` 属性设置为 `true` 在设置文件中激活配置文件。如果激活，当项目构建时，将调用配置文件：
- en: '[PRE34]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Based on environment variables: The profile can be activated based on any environment
    variable and the value that it has:'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于环境变量：配置文件可以根据任何环境变量及其值被激活：
- en: '[PRE35]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If the system property `debug` is defined and has any value, then the profile
    is activated
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果系统属性 `debug` 被定义并且有任意值，则配置文件将被激活
- en: 'Based on OS settings: The following profile will only run on Windows:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据操作系统设置：以下配置文件仅在 Windows 上运行：
- en: '[PRE36]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Present or missing files: The following profile will be activated if the `target/site`
    file is missing:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在或缺失的文件：如果 `target/site` 文件缺失，以下配置文件将被激活：
- en: '[PRE37]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Using properties in Maven
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Maven 中使用属性
- en: Maven allows us to define as well as use properties. Properties allow us to
    avoid hardcoding values in multiple places such as versions of dependencies. They
    also provide flexibility to the build tool by allowing values to be passed at
    runtime.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 允许我们定义和使用属性。属性允许我们在多个地方避免硬编码值，例如依赖项的版本。它们还通过允许在运行时传递值来为构建工具提供灵活性。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s define and use Maven properties by performing the following steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤定义和使用 Maven 属性：
- en: Open the pom file of a project that we created earlier.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们之前创建的项目 pom 文件。
- en: 'Define a property:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个属性：
- en: '[PRE38]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Use the property:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性：
- en: '[PRE39]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are different types of properties. They are as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 属性有不同类型。如下所示：
- en: 'Environment variables: Prefixing a variable with `env.` will return the value
    of the shell''s environment variable. For example, `${env.PATH}` will return the
    value of the `PATH` variable.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量：在变量前加上 `env.` 将返回 shell 环境变量的值。例如，`${env.PATH}` 将返回 `PATH` 变量的值。
- en: 'pom variables: Prefixing a variable with `project.` will return the value of
    that element in the pom file. For example, `${project.version}` will return the
    value in the `<version>` tag of the pom file.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pom 变量：在变量前加上 `project.` 将返回 pom 文件中该元素的值。例如，`${project.version}` 将返回 pom 文件
    `<version>` 标签中的值。
- en: 'The `settings` variable: Prefixing a variable with `settings.` will return
    the value of that element in the settings file. For example, `${settings.offline}`
    will return the value `<offline>` in the settings file.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings` 变量：在变量前加上 `settings.` 将返回设置文件中该元素的值。例如，`${settings.offline}` 将返回设置文件中的
    `<offline>` 值。'
- en: 'Java properties: Any property available through the `System.getProperties()`
    method in Java is available. For example, `${java.home}`.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 属性：Java 中的 `System.getProperties()` 方法可用的任何属性都可用。例如，`${java.home}`。
- en: 'Normal properties: Values that are specified in the `<properties>` tag, which
    is shown in the following example:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常属性：在`<properties>`标签中指定的值，如下例所示：
- en: '[PRE40]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here, the `${java.version}` command will return `1.7`
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`${java.version}`命令将返回`1.7`
- en: 'Do remember that properties and profiles can break the portability of the project.
    Two specific practices for looking up in problem areas are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，属性和配置文件可能会破坏项目的可移植性。以下是在问题区域查找的两个具体做法：
- en: 'External properties: These are properties defined outside the pom file (in
    a settings file) but used as part of a plugin configuration. The absence of this
    property definition will break the build.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部属性：这些是在pom文件外部（在设置文件中）定义的属性，但作为插件配置的一部分使用。缺少此属性定义将破坏构建。
- en: 'Incomplete specification: This is where properties are defined for different
    build environments. A missing definition for one will break the build.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不完整的指定：这是为不同的构建环境定义属性的地方。对于其中一个缺少定义将破坏构建。
- en: See also
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Specifying source encoding for platform-independent builds* recipe in this
    chapter.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*为平台无关构建指定源编码*配方。
- en: Specifying source encoding for platform-independent builds
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为平台无关构建指定源编码
- en: Let us put our learning of properties to practical use. You will have observed
    the following warning while building the simple project that we created in the
    *Building a simple project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started"), *Getting Started*.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把对属性的学习应用到实践中。你可能会在构建我们在[第1章](ch01.html "第1章。入门")中创建的简单项目时观察到以下警告，该项目是在[Maven构建简单项目](https://wiki.example.org/building_a_simple_project_with_maven)的配方中介绍的，*入门*。
- en: '[PRE41]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Let us remove this warning if we really do not want the build to be platform
    dependent.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们真的不希望构建依赖于平台，就让我们移除这个警告。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s specify the source encoding for platform-independent builds in our Maven
    project, by performing the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Maven项目中通过以下步骤指定平台无关构建的源编码：
- en: Open the pom file we created previously.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们之前创建的pom文件。
- en: 'Add the following code:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE42]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Run the following command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE43]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Observe that the warning is no longer present.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到警告不再存在。
- en: How it works...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `project.build.sourceEncoding` property explicitly specifies the encoding
    of the source files. Maven plugins get information about the encoding from the
    value of this property and use it.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`project.build.sourceEncoding`属性明确指定了源文件的编码。Maven插件从该属性的值获取编码信息并使用它。'
- en: This value will be the same on any platform that the project is built on and,
    thus, the build becomes independent of the platform.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值将在项目构建的任何平台上都是相同的，因此构建变得与平台无关。
