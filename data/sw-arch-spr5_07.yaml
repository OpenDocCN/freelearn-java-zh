- en: Pipe-and-Filter Architectures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道和过滤器架构
- en: In this chapter, we will review a useful paradigm architecture named Pipe-and-Filter,
    and you will learn how to implement an application using the Spring Framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾一个有用的范式架构，名为管道和过滤器，并学习如何使用Spring框架实现应用程序。
- en: We will also explain how to build a pipeline that encapsulates an independent
    chain of tasks aimed at filtering and processing large amounts of data, focusing
    on the use of Spring Batch.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将解释如何构建一个封装了独立任务链的管道，旨在过滤和处理大量数据，重点放在使用Spring Batch上。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to Pipe-and-Filter concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道和过滤器概念介绍
- en: Boarding Pipe-and-Filter architectures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上船管道和过滤器架构
- en: Use cases for Pipe-and-Filter architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道和过滤器架构的用例
- en: Spring Batch
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch
- en: Implementing pipes with Spring Batch
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Batch实现管道
- en: We’ll start by providing an introduction to Pipe-and-Filter architecture and
    the concepts associated with it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍管道和过滤器架构及其相关概念。
- en: Introducing Pipe-and-Filter concepts
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍管道和过滤器概念
- en: Pipe-and-Filter architecture refers to a style of architecture that was introduced
    in the early 1970s. In this section, we will introduce Pipe-and-Filter architecture,
    along with concepts such as filters and pipes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 管道和过滤器架构是指上世纪70年代初引入的一种架构风格。在本节中，我们将介绍管道和过滤器架构，以及过滤器和管道等概念。
- en: 'Doug McIlroy introduced Pipe-and-Filter architecture in Unix in 1972\. The
    implementations are also known as pipelines, and they consist of a chain of processing
    elements, arranged so that the output of each element is the input of the next
    one, as illustrated in the following diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Doug McIlroy于1972年在Unix中引入了管道和过滤器架构。这些实现也被称为管道，它们由一系列处理元素组成，排列在一起，以便每个元素的输出是下一个元素的输入，如下图所示：
- en: '![](img/72e9d906-04fa-4277-863c-d16d09d749f1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72e9d906-04fa-4277-863c-d16d09d749f1.png)'
- en: As shown in the preceding diagram, Pipe-and-Filter architecture consists of
    several components, named filters, that can transform (or filter) data across
    the process. The data is then passed to other components (filters) via pipes that
    are connected to each component.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，管道和过滤器架构由几个组件组成，称为过滤器，它们可以在整个过程中转换（或过滤）数据。然后，数据通过连接到每个组件的管道传递给其他组件（过滤器）。
- en: Filters
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'Filters are components that serve to transform (or filter) data that is received
    as an input from a previous component via pipes (connectors). Each filter has
    an input pipe and an output pipe, as shown in the following diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是用于转换（或过滤）从前一个组件通过管道（连接器）接收的输入数据的组件。如下图所示，每个过滤器都有一个输入管道和一个输出管道：
- en: '![](img/b6f677e9-e5e4-4cc9-be84-8213f26ccacb.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6f677e9-e5e4-4cc9-be84-8213f26ccacb.png)'
- en: 'Another characteristic of this concept is that the filter can have several
    input pipes and several output pipes, as shown in the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念的另一个特点是，过滤器可以有多个输入管道和多个输出管道，如下图所示：
- en: '![](img/6d11a37d-2672-4163-9080-39e43a9c171c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d11a37d-2672-4163-9080-39e43a9c171c.png)'
- en: Pipes
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: 'Pipes are the connectors for filters. The role of a pipe is to pass messages,
    or information, between filters and components. What we must keep in mind is that
    the flow is unidirectional, and the data should be stored until the filter can
    process it. This is shown in the following image, where the connector can be seen
    between the filters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是过滤器的连接器。管道的作用是在过滤器和组件之间传递消息或信息。我们必须记住的是，流动是单向的，数据应该被存储，直到过滤器可以处理它。如下图所示，在过滤器之间可以看到连接器：
- en: '![](img/935a5bdf-989f-416b-88c6-15c36e458657.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/935a5bdf-989f-416b-88c6-15c36e458657.png)'
- en: The Pipe-and-Filter architectural style is used to divide a larger process,
    task, or data into a sequence of small and independent steps (or filters) that
    are connected by pipes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 管道和过滤器架构风格用于将较大的过程、任务或数据分解为一系列由管道连接的小而独立的步骤（或过滤器）。
- en: Boarding Pipe-and-Filter architectures
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上船管道和过滤器架构
- en: Based on the concepts that we recently introduced about Pipe-and-Filter in the
    field of enterprise applications, we use this kind of architecture in several
    scenarios in order to process a large amount of data (or large files) that trigger
    several steps (or tasks) that need to be processed. This architecture is highly
    beneficial when we need to perform a lot of transformations in the data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们最近在企业应用领域介绍的管道和过滤器概念，我们在多种场景中使用这种架构，以处理需要处理的大量数据（或大文件）触发的多个步骤（或任务）。当我们需要对数据进行大量转换时，这种架构非常有益。
- en: To understand how Pipe-and-Filter works, we are going to review a classic example
    of processing payroll records. In this example, a message is being sent through
    a sequence of filters, where each filter processes the message in different transactions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解管道和过滤器的工作原理，我们将回顾一个经典的例子，即处理工资单记录。在这个例子中，一条消息通过一系列过滤器发送，每个过滤器在不同的事务中处理消息。
- en: When we apply a Pipe-and-Filter approach, we decompose the whole process into
    a series of separate tasks that can be reused. Using these tasks, we can change
    the format of the received message, and then we can split it to execute separate
    transactions. As a benefit of doing this, we improve the performance, scalability,
    and reusability of the process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用管道和过滤器方法时，我们将整个过程分解为一系列可以重复使用的独立任务。使用这些任务，我们可以改变接收到的消息的格式，然后我们可以将其拆分以执行单独的事务。通过这样做，我们可以提高过程的性能、可伸缩性和可重用性。
- en: 'This architectural style makes it possible to create a recursive process. In
    this case, a filter can be contained by itself. Inside of the process, we can
    include another Pipe-and-Filter sequence, as illustrated in the following diagram:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构风格使得创建递归过程成为可能。在这种情况下，一个过滤器可以包含在自身内部。在过程内部，我们可以包含另一个管道和过滤器序列，如下图所示：
- en: '![](img/6e4ab34b-f85e-43cd-87fa-82e0320aa32b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e4ab34b-f85e-43cd-87fa-82e0320aa32b.png)'
- en: In this case, every filter receives an input message via a pipe. The filter
    then processes the message and publishes the result to the next pipe. This repeatable
    process continues as many times as we need it to. We can add filters, accept or
    omit the received input, and reorder or rearrange the tasks into a new sequence,
    based on our business requirements. In the following section, we will detail the
    most common use cases for applying a Pipe-and-Filter architectural style.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，每个过滤器通过管道接收输入消息。然后，过滤器处理消息并将结果发布到下一个管道。这个可重复的过程将根据我们的业务需求继续多次。我们可以添加过滤器，接受或省略接收到的输入，并根据我们的业务需求将任务重新排序或重新排列成新的顺序。在下一节中，我们将详细介绍应用管道和过滤器架构风格的最常见用例。
- en: Use cases for Pipe-and-Filter architecture
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道和过滤器架构的用例
- en: 'The most common use cases for Pipe-and-Filter architecture are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 管道和过滤器架构的最常见用例如下：
- en: To break a large process into several small and independent steps (filters)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个大的过程分解为几个小的独立步骤（过滤器）
- en: To scale systems with processes that can be scaled independently with parallel
    processing, via several filters
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过多个过滤器以并行处理来扩展可以独立扩展的进程的系统
- en: To transform input or messages received
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换输入或接收到的消息
- en: To apply filtering in **Enterprise Service Bus** (**ESB**) components as an
    integration pattern
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将过滤应用于**企业服务总线**（**ESB**）组件作为集成模式
- en: Spring Batch
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch
- en: Spring Batch is a complete framework for creating a robust batch application
    ([https://projects.spring.io/spring-batch/](https://projects.spring.io/spring-batch/)).
    We can create reusable functions to process large volumes of data or tasks, commonly
    known as bulk processing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch是一个完整的框架，用于创建强大的批处理应用程序（[https://projects.spring.io/spring-batch/](https://projects.spring.io/spring-batch/)）。我们可以创建可重用的函数来处理大量数据或任务，通常称为批量处理。
- en: 'Spring Batch provides many useful features, such as the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch提供了许多有用的功能，例如以下内容：
- en: Logging and tracing
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录和跟踪
- en: Transaction management
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理
- en: Job statistics
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业统计
- en: Managing the process; for example, through restarting jobs, skipping steps,
    and resource management
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理过程；例如，通过重新启动作业，跳过步骤和资源管理
- en: Administration Web Console
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Web控制台
- en: This framework is designed to manage a high volume of data and achieve high-performance
    batch processes by using partition features. We will start with a simple project,
    to explain each principal component of Spring Batch.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架旨在通过使用分区功能管理大量数据并实现高性能的批处理过程。我们将从一个简单的项目开始，以解释Spring Batch的每个主要组件。
- en: 'As mentioned in the Spring Batch documentation ([https://docs.spring.io/spring-batch/trunk/reference/html/spring-batch-intro.html](https://docs.spring.io/spring-batch/trunk/reference/html/spring-batch-intro.html)),
    the most common scenarios for using the framework are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如Spring Batch文档中所述（[https://docs.spring.io/spring-batch/trunk/reference/html/spring-batch-intro.html](https://docs.spring.io/spring-batch/trunk/reference/html/spring-batch-intro.html)），使用该框架的最常见场景如下：
- en: Committing batch processes periodically
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期提交批处理
- en: Concurrent batch processing for parallel processing a job
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发批处理用于并行处理作业
- en: Staged, enterprise message-driven processing
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分阶段的企业消息驱动处理
- en: Large parallel batch processing
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模并行批处理
- en: Manual or scheduled restart after failures
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障后手动或定时重新启动
- en: Sequential processing of dependent steps (with extensions to workflow-driven
    batches)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖步骤的顺序处理（具有工作流驱动批处理的扩展）
- en: 'Partial processing: Skip records (for example, on rollback)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分处理：跳过记录（例如，在回滚时）
- en: 'Whole-batch transaction: For cases with a small batch size or existing stored
    procedures/scripts'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整批事务：适用于批量大小较小或现有存储过程/脚本的情况
- en: In enterprise applications, the need to process millions of records (data) or
    read from a source is very common. This source may contain large files with several
    records (such as CSV or TXT files) or database tables. On each of these records,
    it is common to apply some business logic, execute validations or transformations,
    and finish the task, writing the result to another output format (for example,
    the database or file).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业应用程序中，需要处理数百万条记录（数据）或从源中读取是非常常见的。该源可能包含具有多个记录的大文件（例如CSV或TXT文件）或数据库表。在每条记录上，通常会应用一些业务逻辑，执行验证或转换，并完成任务，将结果写入另一种输出格式（例如数据库或文件）。
- en: Spring Batch provides a complete framework to implement this kind of requirement,
    minimizing human interaction.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch提供了一个完整的框架来实现这种需求，最大程度地减少人工干预。
- en: 'We are going to review the basic concepts of Spring batch, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回顾Spring批处理的基本概念，如下所示：
- en: A job encapsulates the batch process, and must consist of one or more steps.
    Each step can run in sequence, run in parallel, or be partitioned.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业封装了批处理过程，必须由一个或多个步骤组成。每个步骤可以按顺序运行，并行运行，或进行分区。
- en: A step is the sequential phase of a job.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤是作业的顺序阶段。
- en: JobLauncher is in charge of taking a JobExecution of a job that is running.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JobLauncher负责处理正在运行的作业的JobExecution。
- en: JobRepository is the metadata repository of the JobExecution.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JobRepository是JobExecution的元数据存储库。
- en: 'Let’s create a simple example of a job using Spring Batch, in order to understand
    how it works. First, we will create a simple Java project and include the `spring-batch`
    dependency. For this, we will create a Spring Boot application using its initializer
    ([https://start.spring.io](https://start.spring.io)), as shown in the following
    screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的使用Spring Batch的作业示例，以了解其工作原理。首先，我们将创建一个简单的Java项目并包含`spring-batch`依赖项。为此，我们将使用其初始化程序创建一个Spring
    Boot应用程序（[https://start.spring.io](https://start.spring.io)），如下截图所示：
- en: '![](img/635128b7-d76c-44ac-abbf-4d58edf657c7.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/635128b7-d76c-44ac-abbf-4d58edf657c7.png)'
- en: Note that we added the dependency for Spring Batch. You can do this by typing
    `Spring Batch` into the search bar within the dependencies box, and clicking *Enter*.
    A green box with the word Batch in it will appear on the selected dependencies
    section. When this has been done, we will click on the Generate Project button.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们添加了Spring Batch的依赖项。您可以通过在依赖项框中的搜索栏中输入`Spring Batch`并点击*Enter*来执行此操作。在所选的依赖项部分将出现一个带有Batch字样的绿色框。完成后，我们将点击生成项目按钮。
- en: 'The structure of the project will be as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的结构将如下所示：
- en: '![](img/ed6c7e59-d80d-4fc7-9cd5-5c241f5f6e0e.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed6c7e59-d80d-4fc7-9cd5-5c241f5f6e0e.png)'
- en: 'If we look at the dependencies section that was added by the initializer, we
    will see the `spring-batch` starter on the `pom.xml` file, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看初始化器添加的依赖项部分，我们将在`pom.xml`文件中看到`spring-batch`启动器，如下所示：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we are not using Spring Boot, we can add `spring-batch-core` explicitly,
    as a project dependency. The following shows how it looks using Maven:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不使用Spring Boot，我们可以显式添加`spring-batch-core`作为项目依赖项。以下是使用Maven的样子：
- en: '`<dependencies>`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`<dependencies>`'
- en: '`  <dependency>`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`  <dependency>`'
- en: '`    <groupId>org.springframework.batch</groupId>`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`    <groupId>org.springframework.batch</groupId>`'
- en: '`    <artifactId>spring-batch-core</artifactId>`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`    <artifactId>spring-batch-core</artifactId>`'
- en: '`    <version>4.0.1.RELEASE</version>`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`    <version>4.0.1.RELEASE</version>`'
- en: '`  </dependency>`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`  </dependency>`'
- en: '`</dependencies>`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`</dependencies>`'
- en: 'Alternatively, we can do this using Gradle, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用Gradle来完成这个过程，如下所示：
- en: '`dependencies`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies`'
- en: '`{`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`  compile ''org.springframework.batch:spring-batch-core:4.0.1.RELEASE''`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`  compile ''org.springframework.batch:spring-batch-core:4.0.1.RELEASE''`'
- en: '`}`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'The project will need a data source; if we try to run the application without
    one, we will get a message in the console showing an error, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 项目将需要一个数据源；如果我们尝试在没有数据源的情况下运行应用程序，我们将在控制台中看到错误消息，如下所示：
- en: '![](img/0bf0640b-3a2e-4f50-92a7-78ba3922defe.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bf0640b-3a2e-4f50-92a7-78ba3922defe.png)'
- en: 'To fix this issue, we are going to add a dependency as a part of the `pom.xml`
    file, to configure an embedded data source. For testing purposes, we are going
    to use HSQL ([http://hsqldb.org/](http://hsqldb.org/)), as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将在`pom.xml`文件中添加一个依赖项，以配置嵌入式数据源。为了测试目的，我们将使用HSQL（[http://hsqldb.org/](http://hsqldb.org/)）如下所示：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we need to add the `@EnabledBatchProcessing` and `@Configuration` annotations
    to the application:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将`@EnabledBatchProcessing`和`@Configuration`注解添加到应用程序中：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will set up our first job by using the `JobBuildFactory` class with
    one task process, based on Spring Batch, using the `StepBuilderFactory` class:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`JobBuildFactory`类设置我们的第一个作业，其中包含一个基于Spring Batch的任务流程，使用`StepBuilderFactory`类：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `Job` method will then show that it is starting, which will look as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`Job`方法将显示它正在启动，如下所示：'
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the `Job` has been created, we will add a new task (`Step`) to the `Job`,
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`Job`被创建，我们将向`Job`添加一个新的任务（`Step`），如下所示：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code shows what the application class looks like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了应用程序类的样子：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order to check that everything is okay, we will run the application. To
    do this, we will execute the following on the command line:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查一切是否正常，我们将运行应用程序。为此，我们将在命令行上执行以下操作：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Alternatively, we could build the application by running maven, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过运行maven来构建应用程序，如下所示：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we will run our recently built jar on the Terminal, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在终端上运行我们最近构建的jar，如下所示：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Don't forget that you will need to have installed Maven or Gradle before building
    or running the application and JDK 8.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在构建或运行应用程序之前安装Maven或Gradle和JDK 8。
- en: 'Finally, we will see the following output in the console:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在控制台中看到以下输出：
- en: '![](img/5ff94ceb-126a-4103-927b-bf3cee72df11.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ff94ceb-126a-4103-927b-bf3cee72df11.png)'
- en: Pay attention to the console output. To do this, we run the job named `jobPackPub1`
    and execute the bean as `stepPackPub1`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意控制台输出。为此，我们运行名为`jobPackPub1`的作业，并执行名为`stepPackPub1`的bean。
- en: 'Now, we will look at the components behind the following steps in more detail:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更详细地查看以下步骤背后的组件：
- en: ItemReader represents the retrieval of the input for a step
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ItemReader代表了步骤输入的检索
- en: ItemProcessor represents the business processing of an item
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ItemProcessor代表了对项目的业务处理
- en: ItemWriter represents the output of a step
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ItemWriter代表了步骤的输出
- en: 'The following diagram shows the big picture of Spring Batch''s main elements:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了Spring Batch主要元素的整体情况：
- en: '![](img/e1644f90-82c2-47be-b282-d8f417628856.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1644f90-82c2-47be-b282-d8f417628856.png)'
- en: Now, we will complete our example by using an ItemReader, ItemProcessor, and
    an ItemWriter. By using and explaining these components, we will show you how Pipe-and-Filter
    architectures can be implemented using Spring Batch.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过使用ItemReader、ItemProcessor和ItemWriter来完成我们的示例。通过使用和解释这些组件，我们将向您展示如何使用Spring
    Batch实现管道和过滤器架构。
- en: Implementing pipes with Spring Batch
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Batch实现管道
- en: 'Now that we have illustrated what Spring Batch is, we are going to implement
    the payroll file processing use case (as defined in the previous section) through
    the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经说明了Spring Batch是什么，我们将通过以下步骤实现工资文件处理用例（如前一节中定义的）：
- en: Coding a process that imports payroll data from a CSV spreadsheet
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个从CSV电子表格导入工资数据的流程
- en: Transforming the file tuples with a business class
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用业务类转换文件元组
- en: Storing the results in a database
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将结果存储在数据库中
- en: 'The following diagram illustrates our implementation:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了我们的实现：
- en: '![](img/8ab5bee2-11ea-4098-9146-9eae1634813c.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ab5bee2-11ea-4098-9146-9eae1634813c.png)'
- en: 'First, we are going to create a new, clean project, using the Spring initializer
    ([https://start.spring.io](https://start.spring.io)), as we did in the previous
    section:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Spring初始化器（[https://start.spring.io](https://start.spring.io)）创建一个新的干净项目，就像我们在上一节中所做的那样：
- en: '![](img/ceeb8140-bd2f-4f36-ac75-ffcf3cd01e0c.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ceeb8140-bd2f-4f36-ac75-ffcf3cd01e0c.png)'
- en: Remember to add the `Batch` reference to our project, like we did in the previous
    example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 记得像之前的例子一样，将`Batch`引用添加到我们的项目中。
- en: 'Don''t forget to add a database driver as a dependency in the `pom.xml` file.
    For testing purposes, we are going to use HSQL ([http://hsqldb.org/](http://hsqldb.org/)),
    as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`pom.xml`文件中将数据库驱动程序添加为依赖项。出于测试目的，我们将使用HSQL（[http://hsqldb.org/](http://hsqldb.org/)）。
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you want to use another database, you can refer to the detailed explanation
    available in the Spring Boot documentation ([https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用其他数据库，可以参考Spring Boot文档中提供的详细说明（[https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html)）。
- en: 'Now, we will create input data as a file and the output structure as a database
    table, as you can see in the following diagram:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建输入数据作为文件，将输出结构作为数据库表，如下图所示：
- en: '![](img/261d7e09-3198-4318-978e-f4422763d4bc.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/261d7e09-3198-4318-978e-f4422763d4bc.png)'
- en: 'We are going to add a CSV file to our resource folder (`src/main/resources/payroll-data.csv`),
    with the following content:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在资源文件夹（`src/main/resources/payroll-data.csv`）中添加一个CSV文件，内容如下：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The structure of our project will look as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目的结构如下所示：
- en: '![](img/5b84cab7-de91-4058-b591-a7dbda6390ee.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b84cab7-de91-4058-b591-a7dbda6390ee.png)'
- en: This spreadsheet contains the identification, currency, account number, account
    type, description of the transaction, beneficiary telephone, and beneficiary name.
    These are displayed on each row, separated by commas. This is a common pattern,
    which Spring handles out of the box.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电子表格包含交易的标识、货币、账号、账户类型、交易描述、受益人电话和受益人姓名。这些内容以逗号分隔显示在每一行上。这是一个常见的模式，Spring可以直接处理。
- en: 'We will now create the database structure where we will store the results processed
    by the payroll. We will add this to our resource folder (`src/main/resources/schema-all.sql`)
    with the following content:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建数据库结构，用于存储工资单处理的结果。我们将在资源文件夹（`src/main/resources/schema-all.sql`）中添加以下内容：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The file that we will create will follow this pattern name: `schema-@@platform@@.sql`.
    Spring Boot will run the SQL script during startup; this is the default behavior
    for all platforms.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的文件将遵循此模式名称：`schema-@@platform@@.sql`。Spring Boot将在启动期间运行SQL脚本；这是所有平台的默认行为。
- en: Up until this point, we have created the input data as a `.csv` file, as well
    as the output repository where it is going to store our complete payroll process.
    Consequently, we are now going to create the filters and use the default pipes
    that bring us Spring Batch.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了输入数据作为`.csv`文件，以及输出存储库，用于存储我们完整的工资单流程。因此，我们现在将创建过滤器，并使用Spring Batch带来的默认管道。
- en: 'First, we are going to create a class that represents our business data, with
    all of the fields that we are going to receive. We will name this `PayRollTo.java`
    (**Payroll Transfer Object**):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个代表我们业务数据的类，包括我们将接收的所有字段。我们将命名为`PayRollTo.java`（**工资单传输对象**）：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we will create our filters, which are represented as processors in Spring
    Batch. Similar to how the framework gives us out-of-the-box behavior, we are first
    going to concentrate on translating our business classes that are intended to
    transform the input data, as shown in the following diagram:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的过滤器，它在Spring Batch中表示为处理器。与框架提供的开箱即用行为类似，我们首先将专注于转换输入数据的业务类，如下图所示：
- en: '![](img/46caf14e-96c6-4720-b172-9d69f42c60cb.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46caf14e-96c6-4720-b172-9d69f42c60cb.png)'
- en: 'After including a representation of our file as a `PayrollTo` class on each
    row, we are going to need a filter that will transform each of our data files
    into uppercase. Using Spring Batch, we will create a processor that will transform
    the data files and then send the data to the following step. So, let''s create
    a `PayRollItemProcessor.java` object that implements the `org.springframework.batch.item.ItemProcessor<InputObject,
    OutputObjet>`interface, as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一行包括我们的文件表示为`PayrollTo`类之后，我们需要一个过滤器，将每个数据文件转换为大写。使用Spring Batch，我们将创建一个处理器，将转换数据文件，然后将数据发送到下一步。因此，让我们创建一个`PayRollItemProcessor.java`对象，实现`org.springframework.batch.item.ItemProcessor<InputObject,
    OutputObjet>`接口，如下所示：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: According to the API interface, we will receive an incoming `PayrollTo` object,
    after which we will transform it to an uppercase `PayrollTo` for the `firstLastName`
    and description properties.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API接口，我们将接收一个传入的`PayrollTo`对象，然后将其转换为大写的`PayrollTo`，用于`firstLastName`和`description`属性。
- en: It does not matter if the input object and the output object are different types.
    In many cases, a filter will receive one kind of message or data that needs a
    different kind of message or data for the next filter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 输入对象和输出对象的类型不同并不重要。在许多情况下，一个过滤器将接收一种消息或数据，需要为下一个过滤器提供不同类型的消息或数据。
- en: 'Now, we are going to create our Batch job and use some Spring Batch out-of-the-box features.
    For example, the **ItemReader** has a useful API to process files, and the **ItemWriter**
    can be used to specify how to store the produced data:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的批处理作业，并使用一些Spring Batch的开箱即用功能。例如，**ItemReader**具有一个有用的API来处理文件，**ItemWriter**可用于指定如何存储生成的数据：
- en: '![](img/a205ec9d-6a82-406d-952d-02dbeb251edb.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a205ec9d-6a82-406d-952d-02dbeb251edb.png)'
- en: Finally, we are going to connect all of our flow data using a job.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用作业连接所有流数据。
- en: 'Using Spring Batch, we need to concentrate on our business (like we did in
    the `PayRollItemProcessor.java` class), and then connect all of the pieces together,
    as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Batch，我们需要专注于我们的业务（就像在`PayRollItemProcessor.java`类中所做的那样），然后将所有部分连接在一起，如下所示：
- en: '[PRE16]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For a detailed explanation of what you can do with Spring Batch ItemReaders
    and ItemWriters, go to [https://docs.spring.io/spring-batch/trunk/reference/html/readersAndWriters.html](https://docs.spring.io/spring-batch/trunk/reference/html/readersAndWriters.html).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Spring Batch ItemReaders和ItemWriters的详细说明，请访问[https://docs.spring.io/spring-batch/trunk/reference/html/readersAndWriters.html](https://docs.spring.io/spring-batch/trunk/reference/html/readersAndWriters.html)。
- en: 'Let''s review how the `Step` bean works, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`Step` bean的工作原理：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: First, it configures the step to read the data in chunks of **10 records**,
    and after that, the step is configured with the corresponding `reader`, `processor`,
    and `writer` objects.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它配置步骤以每次读取**10条记录**的数据块，然后配置步骤与相应的`reader`、`processor`和`writer`对象。
- en: 'We have now implemented all of the pipes and filters that we planned, as shown
    in the following diagram:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经实现了我们计划的所有管道和过滤器，如下图所示：
- en: '![](img/5c35ddfa-d6de-47dc-9200-e654e36f7119.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c35ddfa-d6de-47dc-9200-e654e36f7119.png)'
- en: Finally, we are going to add a listener, in order to check our processed payroll
    data. To do this, we will create a `JobCompletionPayRollListener.java` class that
    extends the class `JobExecutionListenerSupport` and implement the `afterJob(JobExecution
    jobExecution)`method.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个监听器，以检查我们处理的工资单数据。为此，我们将创建一个`JobCompletionPayRollListener.java`类，该类扩展了`JobExecutionListenerSupport`类，并实现了`afterJob(JobExecution
    jobExecution)`方法。
- en: 'Now, we will review how many `insert` operations we process from our processed data:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将回顾我们从处理的数据中处理了多少`insert`操作：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In order to check that everything is okay, we are going to execute the application,
    using the following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查一切是否正常，我们将执行应用程序，使用以下命令：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Alternatively, we could build the application using maven, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用maven构建应用程序，如下所示：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we will run the recently built `jar` on the Terminal:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在终端上运行最近构建的`jar`：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we will see the following output on our console. This output represents
    the filter that has been implemented as an ItemProcessor that transforms the data:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在控制台上看到以下输出。该输出代表已实现为ItemProcessor的过滤器，用于转换数据：
- en: '![](img/36450a60-601e-423c-8e43-3271e7dcd895.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36450a60-601e-423c-8e43-3271e7dcd895.png)'
- en: 'We can also see the verification of our process via the listener, implemented
    as a `JobExecutionListenerSupport`, which prints the results stored in the database:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过监听器来验证我们的流程，该监听器实现为`JobExecutionListenerSupport`，打印存储在数据库中的结果：
- en: '![](img/73968333-28d8-4d8c-b1cd-f91618785939.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73968333-28d8-4d8c-b1cd-f91618785939.png)'
- en: We can package the Spring Batch application in a WAR file, and then run a servlet
    container (like Tomcat) or any JEE application server (like Glassfish or JBoss).
    To package the `.jar` file into a WAR file, use `spring-boot-gradle-plugin` or `spring-boot-maven-plugin`.
    For Maven, you can refer to the Spring Boot documentation ([https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging)).
    For Gradle, you can refer to [https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-executable-wars](https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-executable-wars).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Spring Batch应用程序打包成WAR文件，然后运行一个servlet容器（如Tomcat）或任何JEE应用程序服务器（如Glassfish或JBoss）。要将`.jar`文件打包成WAR文件，请使用`spring-boot-gradle-plugin`或`spring-boot-maven-plugin`。对于Maven，您可以参考Spring
    Boot文档（[https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging)）。对于Gradle，您可以参考[https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-executable-wars](https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-executable-wars)。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the concept of Pipe-and-Filter architecture, the
    principal use cases of its implementation, and how to use it with enterprise applications.
    In addition, you learned how to implement the architecture using Spring Batch,
    along with how to manage different amounts of data and split the process into
    smaller tasks.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了管道和过滤器架构的概念，其实施的主要用例，以及如何在企业应用程序中使用它。此外，您还学会了如何使用Spring Batch实现架构，以及如何管理不同数量的数据并将流程拆分为较小的任务。
- en: In the next chapter, we will review the importance of containerizing your applications.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾容器化应用程序的重要性。
