- en: LDAP Directory Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP 目录服务
- en: In this chapter, we will review the **Lightweight Directory Access Protocol**
    (**LDAP**) and learn how it can be integrated into a Spring Security-enabled application
    to provide authentication, authorization, and user information services to interested
    constituents.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾**轻量级目录访问协议**（**LDAP**）并学习如何将其集成到 Spring Security 启用的应用程序中，为感兴趣的各方提供认证、授权和用户信息服务。
- en: 'During the course of this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Learning some of the basic concepts related to the LDAP protocol and server
    implementations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习与 LDAP 协议和服务器实现相关的一些基本概念
- en: Configuring a self-contained LDAP server within Spring Security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Spring Security 中配置自包含 LDAP 服务器
- en: Enabling LDAP authentication and authorization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 LDAP 认证和授权
- en: Understanding the model behind LDAP search and user matching
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 LDAP 搜索和用户匹配背后的模型
- en: Retrieving additional user details from standard LDAP structures
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从标准 LDAP 结构中检索额外的用户详细信息
- en: Differentiating between LDAP authentication methods and evaluating the pros
    and cons of each type
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分 LDAP 认证方法并评估每种类型的优缺点
- en: Explicitly configuring Spring Security LDAP using **Spring bean** declarations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式使用**Spring bean**声明配置 Spring Security LDAP
- en: Connecting to external LDAP directories
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到外部 LDAP 目录
- en: Exploring the built-in support for Microsoft AD
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索对 Microsoft AD 的内置支持
- en: We will also explore how to customize Spring Security for more flexibility when
    dealing with custom AD deployments
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将探讨如何在处理自定义 AD 部署时为 Spring Security 定制更多灵活性
- en: Understanding LDAP
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 LDAP
- en: LDAP has its roots in logical directory models dating back over 30 years-conceptually
    akin to a combination of an organizational chart and an address book. Today, LDAP
    is used more and more as a way to centralize corporate user information, partition
    thousands of users into logical groups, and allow unified sharing of user information
    between many disparate systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP 起源于30多年前的概念性目录模型-类似于组织结构图和电话簿的结合。如今，LDAP 越来越多地被用作集中企业用户信息、将成千上万的用户划分为逻辑组以及在不同系统之间统一共享用户信息的方法。
- en: For security purposes, LDAP is quite commonly used to facilitate centralized
    username and password authentication-users' credentials are stored in the LDAP
    directory, and authentication requests can be made against the directory on the
    user's behalf. This eases management for administrators, as user credentials-login
    ID, password, and other details-are stored in a single location in the LDAP directory.
    Additionally, organizational information, such as group or team assignments, geographic
    location, and corporate hierarchy membership, are defined based on the user's
    location in the directory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，LDAP 常被用于实现集中化的用户名和密码验证-用户的凭据存储在 LDAP 目录中，代表用户对目录进行认证请求。这使得管理员的管理工作得到简化，因为用户凭据-登录
    ID、密码及其他详细信息-都存储在 LDAP 目录的单一位置中。此外，诸如组织结构、团队分配、地理位置和企业层级等信息，都是基于用户在目录中的位置来定义的。
- en: LDAP
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP
- en: 'At this point, if you have never used LDAP before, you may be wondering what
    it is. We''ll illustrate a sample LDAP schema with a screen from the Apache Directory
    Server 2.0.0-M231.5 example directory, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果你以前从未使用过 LDAP，你可能会想知道它是什么。我们将通过 Apache Directory Server 2.0.0-M231.5
    示例目录中的屏幕截图来展示一个 LDAP 架构示例，如下面的屏幕截图所示：
- en: '![](img/22d17476-4f8f-400b-b906-1e884b164aaa.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22d17476-4f8f-400b-b906-1e884b164aaa.png)'
- en: Starting at a particular user entry for `uid=admin1@example.com` (highlighted
    in the preceding screenshot), we can infer the organizational membership of `admin1`
    by starting at this node in the tree and moving upward. We can see that the user
    `aeinstein` is a member of the organizational unit (`ou=users`), which itself
    is a part of the domain `example.com` (the abbreviation `dc` shown in the preceding
    screenshot stands for domain component). Preceding this are the organizational
    elements (`DIT` and `Root DSE`) of the LDAP tree itself, which don't concern us
    in the context of Spring Security. The position of the user `aeinstein` in the
    LDAP hierarchy is semantically and definitively meaningful-you can imagine a much
    more complex hierarchy easily illustrating the organizational and departmental
    boundaries of a huge organization.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从特定用户条目`uid=admin1@example.com`（在前面的屏幕截图中突出显示）开始，我们可以通过在这个树节点开始并向上升级来推断`admin1`的组织成员资格。我们可以看到用户`aeinstein`是组织单位（`ou=users`）的成员，而这个单位本身是域`example.com`的一部分（在前面的屏幕截图中显示的缩写`dc`代表域组件）。在这个之前是LDAP树本身的组织元素（`DIT`和`Root
    DSE`），这在Spring Security的上下文中与我们无关。用户`aeinstein`在LDAP层次结构中的位置在语义上和定义上都是有意义的-你可以想象一个更复杂的层次结构，轻松地说明一个大型组织的组织和部门界限。
- en: 'The complete top-to-bottom path formed by walking down the tree to an individual
    leaf node forms a string composed of all intervening nodes along the way, as with
    the node path of `admin1`, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着树向下走到一个单独的叶节点形成的从上到下的完整路径是由沿途的所有中间节点组成的一个字符串，就像`admin1`的节点路径一样，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding node path is unique and is known as a node's **distinguished name**
    (**DN**). The distinguished name is akin to a database primary key, allowing a
    node to be uniquely identified and located in a complex tree structure. We'll
    see a node's DN used extensively throughout the authentication and searching process
    with Spring Security LDAP integration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的节点路径是唯一的，被称为节点的** Distinguished Name** (**DN**)。Distinguished Name类似于数据库的主键，允许在复杂的树结构中唯一标识和定位一个节点。在Spring
    Security LDAP集成中，我们将看到节点的DN在认证和搜索过程中被广泛使用。
- en: Note that there are several other users listed at the same level of organization
    as `admin1`. All of these users are assumed to be within the same organizational
    position as `admin1`. Although this example organization is relatively simple
    and flat, the structure of LDAP is arbitrarily flexible, with many levels of nesting
    and logical organization possible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在与`admin1`相同组织级别的列表中还有几个其他用户。所有这些用户都被假设为与`admin1`处于相同的组织位置。尽管这个例子中的组织结构相对简单和平坦，但LDAP的结构是任意灵活的，可能有多个嵌套层次和逻辑组织。
- en: Spring Security LDAP support is assisted by the Spring LDAP module ([http://www.springsource.org/ldap](http://www.springsource.org/ldap)),
    which is actually a separate project from the core Spring Framework and Spring
    Security projects. It's considered to be stable and provides a helpful set of
    wrappers around the standard Java LDAP functionality.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security LDAP支持由Spring LDAP模块提供([http://www.springsource.org/ldap](http://www.springsource.org/ldap))，该模块实际上是从Spring框架核心和Spring
    Security项目分离出来的一个独立项目。它被认为是稳定的，并提供了一组有助于包装标准Java LDAP功能的封装器。
- en: Common LDAP attribute names
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的LDAP属性名称
- en: Each actual entry in the tree is defined by one or more object classes. An object
    class is a logical unit of organization, grouping a set of semantically-related
    attributes. By declaring an entry in the tree as an instance of a particular object
    class, such as a person, the organizer of the LDAP directory is able to provide
    users of the directory with a clear indication of what each element of the directory
    represents.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 树中的每个实际条目都是由一个或多个对象类定义的。对象类是组织的一个逻辑单位，将一组语义上相关的属性组合在一起。通过将树中的条目声明为特定对象类的一个实例，如一个人，LDAP目录的组织者就能够向目录的用户提供一个清晰的指示，表明目录中的每个元素代表什么。
- en: LDAP has a rich set of standard schemas covering the available LDAP object classes
    and their applicable attributes (along with gobs of other information). If you
    are planning on doing extensive work with LDAP, it's highly advised that you review
    a good reference guide, such as the appendix of the book *Zytrax OpenLDAP* ([http://www.zytrax.com/books/ldap/ape/](http://www.zytrax.com/books/ldap/ape/)),
    or *Internet2 Consortium's Guide to Person-related Schemas* ([http://middleware.internet2.edu/eduperson/](http://middleware.internet2.edu/eduperson/)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP有一套丰富的标准模式，涵盖可用的LDAP对象类及其适用的属性（以及其他大量信息）。如果您计划进行广泛的LDAP工作，强烈建议您查阅一本好的参考指南，例如书籍《Zytrax
    OpenLDAP》的附录（[http://www.zytrax.com/books/ldap/ape/](http://www.zytrax.com/books/ldap/ape/)），或《Internet2
    Consortium的与人员相关的模式指南》([http://middleware.internet2.edu/eduperson/](http://middleware.internet2.edu/eduperson/))。
- en: In the previous section, we were introduced to the fact that each entry in an
    LDAP tree has a DN, which uniquely identifies it in the tree. The DN is composed
    of a series of attributes, one (or more) of which is used to uniquely identify
    the path down the tree of the entry represented by the DN. As each segment of
    the path described by the DN represents an LDAP attribute, you could refer to
    the available, well-defined LDAP schemas and object classes to determine what
    each of the attributes in any given DN means.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们了解到LDAP树中的每个条目都有一个DN，它唯一地标识树中的条目。DN由一系列属性组成，其中一个（或更多）用于唯一标识表示DN的条目向下走的路径。由于DN描述的路径的每个段代表一个LDAP属性，你可以参考可用的、定义良好的LDAP模式和对象类，以确定任何给定DN中的每个属性的含义。
- en: 'We''ve included some of the common attributes and their meanings in the following
    table. These attributes tend to be organizing attributes-meaning that they are
    typically used to define the organizational structure of the LDAP tree-and are
    ordered from top to bottom in the structure that you''re likely to see in a typical
    LDAP installation:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在下面的表格中包含了一些常见属性和它们的意义。这些属性通常是组织属性——意思是它们通常用于定义LDAP树的组织结构——并且按从上到下的顺序排列在你可能在典型LDAP安装中看到的结构：
- en: '| **Attribute name** | **Description** | **Example** |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **属性名称** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `dc` | **Domain component**: Generally, the highest level of organization
    in an LDAP hierarchy. | `dc=jbcpcalendar,dc=com` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `dc` | **域组件**：通常是LDAP层次结构中的最高级别组织。 | `dc=jbcpcalendar,dc=com` |'
- en: '| `c` | **Country**: Some LDAP hierarchies are structured at a high level by
    country. | `c=US` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `c` | **国家**：一些LDAP层次结构按国家进行高层次的结构化。 | `c=US` |'
- en: '| `o` | **Organization name**: It is a parent business organization used for
    classifying LDAP resources. | `o=Oracle Corporation` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `o` | **组织名称**：这是一个用于分类LDAP资源的父级商业组织。 | `o=Oracle Corporation` |'
- en: '| `ou` | **Organizational unit**: It is a divisional business organization
    which is generally within an organization. | `ou=Product Development` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `ou` | **组织单位**：这是一个通常在组织内的分部商业组织。 | `ou=Product Development` |'
- en: '| `cn` | **Common name**: This is a common name, or a unique or human-readable
    name for the object. For humans, this is usually the person''s full name, while
    for other resources in LDAP (computers, and so on), it''s typically the hostname.
    | `cn=Super Visor``cn=Jim Bob` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `cn` | **通用名称**：这是对象的共同名称，或唯一名称或人类可读名称。对于人类，这通常是人的全名，而对于LDAP中的其他资源（如计算机等），它通常是主机名。
    | `cn=Super Visor``cn=Jim Bob` |'
- en: '| `uid` | **User ID**: Although not organizational in nature, the `uid` attribute
    is generally what Spring looks for during user authentication and search. | `uid=svisor`
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `uid` | **用户ID**：尽管不是组织性质的，但`uid`属性通常是Spring在用户认证和搜索时查找的。 | `uid=svisor`
    |'
- en: '| `userPassword` | **User password**: This attribute stores the password for
    the `person` object to which this attribute is associated. It is typically one-way
    hashed using `SHA` or something similar. | `userPassword=plaintext``userPassword={SHA}cryptval`
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `userPassword` | **用户密码**：此属性存储与该属性关联的`person`对象的密码。它通常是使用`SHA`或其他类似方法进行单向散列的。
    | `userPassword=plaintext``userPassword={SHA}cryptval` |'
- en: The attributes in the preceding table do, however, tend to be organizing attributes
    on the directory tree and, as such, will probably form various search expressions
    or mappings that you will use to configure Spring Security to interact with the
    LDAP server.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前表中的属性通常是的目录树的组织属性，因此，它们可能形成各种搜索表达式或映射，以便配置Spring Security与LDAP服务器进行交互。
- en: Remember that there are hundreds of standard LDAP attributes-these represent
    a very small fraction of those you are likely to see when integrating with a fully-populated
    LDAP server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，有数百个标准的LDAP属性-这些只是你在与一个完全填充的LDAP服务器集成时可能会看到的很小的一部分。
- en: Updating our dependencies
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的依赖项
- en: 'We have already included all of the dependencies you need for this chapter,
    so you will not need to make any updates to your `build.gradle` file. However,
    if you were just adding LDAP support to your own application, you would need to
    add `spring-security-ldap` as a dependency in `build.gradle`, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为您本章所需的所有依赖项，所以你不需要对你的`build.gradle`文件做任何更新。然而，如果你只是想为你的应用程序添加LDAP支持，你需要在`build.gradle`中添加`spring-security-ldap`作为依赖项，如下所示：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Due to an artifact resolution issue with Gradle, `spring-tx` must be pulled
    in or Gradle will fetch an older one that doesn't work.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Gradle的一个艺术品解析问题，`spring-tx`必须被引入，否则Gradle会获取一个较旧的版本，无法使用。
- en: As mentioned previously, Spring Security's LDAP support is built on top of Spring
    LDAP. Gradle will automatically bring this dependency in as a transitive dependency,
    so there is no need to explicitly list it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Spring Security的LDAP支持是建立在Spring LDAP之上的。Gradle会自动将这些依赖作为传递依赖引入，因此无需明确列出。
- en: 'If you were using **ApacheDS** to run an LDAP server within your web application,
    as we are doing in our calendar application, you would need to add dependencies
    on the relevant ApacheDS JARs. There is no need to make these updates to our sample
    application, since we have already included them. Note that these dependencies
    are not necessary if you are connecting to an external LDAP server:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你的网络应用程序中使用**ApacheDS**运行LDAP服务器，正如我们在我们的日历应用程序中所做的那样，你需要添加ApacheDS相关的JAR包依赖。由于这些更新已经被包含在我们的示例应用程序中，所以无需对示例应用程序进行这些更新。请注意，如果你连接到一个外部的LDAP服务器，这些依赖是不必要的：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configuring embedded LDAP integration
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 配置嵌入式LDAP集成
- en: Let's now enable the JBCP calendar application to support LDAP-based authentication.
    Fortunately, this is a relatively simple exercise, using the embedded LDAP server
    and a sample LDIF file. For this exercise, we will be using an LDIF file created
    for this book, intended to capture many of the common configuration scenarios
    with LDAP and Spring Security. We have included several more sample LDIF files,
    some from Apache DS 2.0.0-M23 and one from the Spring Security unit tests, which
    you may choose to experiment with as well.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们启用基于LDAP的JBCP日历应用程序认证。幸运的是，这是一个相对简单的练习，使用嵌入式LDAP服务器和一个示例LDIF文件。在这个练习中，我们将使用为这本书创建的LDIF文件，旨在捕获许多与LDAP和Spring
    Security相关的常见配置场景。我们还包含了一些其他示例LDIF文件，其中一些来自Apache DS 2.0.0-M23，还有一个来自Spring Security单元测试，你可以选择实验它们。
- en: Configuring an LDAP server reference
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置LDAP服务器引用
- en: 'The first step is to configure the embedded LDAP server. Spring Boot will automatically
    configure an embedded LDAP server, but we will need to tweak the configuration
    a bit. Make the following updates to your `application.yml` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是配置嵌入式LDAP服务器。Spring Boot会自动配置一个嵌入式LDAP服务器，但我们还需要稍微调整一下配置。对你的`application.yml`文件进行以下更新：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should be starting with the source from `chapter06.00-calendar`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从`chapter06.00-calendar`的源代码开始。
- en: We are loading the `calendar.ldif` file from `classpath`, and using it to populate
    the LDAP server. The `root` attribute declares the root of the LDAP directory
    using the specified DN. This should correspond to the logical root DN in the LDIF
    file we're using.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`classpath`加载`calendar.ldif`文件，并使用它来填充LDAP服务器。`root`属性使用指定的DN声明LDAP目录的根。这应该与我们在使用的LDIF文件中的逻辑根DN相对应。
- en: Be aware that for embedded LDAP servers, the `base-dn` attribute is required.
    If it is not specified or is specified incorrectly, you may receive several odd
    errors upon initialization of the Apache DS server. Also, be aware that the `ldif`
    resource should only load a single `ldif`, otherwise the server will fail to start
    up. Spring Security requires a single resource, since using something such as
    `classpath*:calendar.ldif` does not provide the deterministic ordering that is
    required.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于嵌入式LDAP服务器，`base-dn`属性是必需的。如果没有指定或指定不正确，你可能会在Apache DS服务器的初始化过程中收到几个奇怪的错误。还要注意，`ldif`资源应该只加载一个`ldif`，否则服务器将无法启动。Spring
    Security要求一个资源，因为使用诸如`classpath*:calendar.ldif`的东西不能提供所需要的确切排序。
- en: We'll reuse the bean ID defined here later, in the Spring Security configuration
    files, when we declare the LDAP user service and other configuration elements.
    All other attributes on the `<ldap-server>` declaration are optional when using
    the embedded LDAP mode.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Spring Security配置文件中重新使用这里定义的bean ID，当我们声明LDAP用户服务和其他配置元素时。在使用内置LDAP模式时，`<ldap-server>`声明上的所有其他属性都是可选的。
- en: Enabling the LDAP AuthenticationProviderNext interface
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用LDAP AuthenticationProviderNext接口
- en: 'Next, we''ll need to configure another `AuthenticationProvider` interface that
    checks user credentials against the LDAP provider. Simply update the Spring Security
    configuration to use an `o.s.s.ldap.authentication.LdapAuthenticationProvider`
    reference, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置另一个`AuthenticationProvider`接口，以将用户凭据与LDAP提供者进行核对。只需更新Spring Security配置，使用`o.s.s.ldap.authentication.LdapAuthenticationProvider`引用，如下所示：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We'll discuss these attributes a bit more later. For now, get the application
    back up and running, and try logging in with `admin1@example.com` as the username
    and `admin1` as the password. You should be logged in!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会讨论这些属性。现在，先让应用程序恢复正常运行，然后尝试使用`admin1@example.com`作为用户名和`admin1`作为密码登录。你应该可以登录！
- en: Your source code should look like `chapter05.01-calendar`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您的源代码应该看起来像`chapter05.01-calendar`。
- en: Troubleshooting embedded LDAP
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试内置LDAP
- en: 'It is quite possible that you will run into hard-to-debug problems with embedded
    LDAP. Apache DS is not usually very friendly with its error messages, doubly so
    in Spring Security embedded mode. If you are getting a `404` error when trying
    to access the application in your browser, there is a good chance that things
    did not start up properly. Some things to double-check if you can''t get this
    simple example running are as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能会遇到嵌入式LDAP的难以调试的问题。Apache DS通常对其错误信息不太友好，在Spring Security嵌入式模式下更是如此。如果你在尝试通过浏览器访问应用程序时遇到`404`错误，有很大可能性是没有正确启动。如果你无法运行这个简单示例，需要检查以下几点：
- en: Ensure the `baseDn` attribute is set on the `DefaultSpringSecurityContextSource`
    declaration in your `configuration` file, and make sure it matches the root defined
    in the LDIF file that's loaded at startup. If you get errors referencing missing
    partitions, it's likely that either the `root` attribute was missed or doesn't
    match your LDIF file.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在您的`configuration`文件中的`DefaultSpringSecurityContextSource`声明上设置了`baseDn`属性，并确保它与在启动时加载的LDIF文件中定义的根匹配。如果您遇到引用缺失分区错误，很可能是漏掉了`root`属性或与您的LDIF文件不匹配。
- en: Be aware that a failure starting up the embedded LDAP server is not a fatal
    failure. In order to diagnose errors loading LDIF files, you will need to ensure
    that the appropriate log settings, including logging for the Apache DS server,
    are enabled, at least at error level. The LDIF loader is under the `org.apache.directory.server.protocol.shared.store`
    package, and this should be used to enable the logging of LDIF load errors.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，嵌入式LDAP服务器启动失败并不是致命失败。为了诊断加载LDIF文件时的错误，您需要确保适当的日志设置，包括Apache DS服务器的日志记录，至少在错误级别启用。LDIF加载器位于`org.apache.directory.server.protocol.shared.store`包下，应使用此包来启用LDIF加载错误的日志记录。
- en: If the application server shuts down non-gracefully, you may be required to
    delete some files in your temporary directory (`%TEMP%` on Windows systems or
    `/tmp` on Linux-based systems) in order to start the server again. The error messages
    regarding this are (fortunately) fairly clear. Unfortunately, embedded LDAP isn't
    as seamless and easy to use as the embedded H2 database, but it is still quite
    a bit easier than trying to download and configure many of the freely-available
    external LDAP servers.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用服务器非正常关闭，你可能需要删除临时目录（Windows系统中的`%TEMP%`或Linux系统中的`/tmp`）中的某些文件，以便再次启动服务器。关于这方面的错误信息（幸运的是）相当清晰。不幸的是，内置的LDAP不如内置的H2数据库那么无缝且易于使用，但它仍然比尝试下载和配置许多免费的外部LDAP服务器要容易得多。
- en: An excellent tool for troubleshooting or accessing LDAP servers in general is
    the Apache Directory Studio project, which offers standalone and Eclipse plugin
    versions. The free download is available at [http://directory.apache.org/studio/](http://directory.apache.org/studio/).
    If you want to follow along with the book, you may want to download Apache Directory
    Studio 2.0.0-M23 now.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个出色的工具，用于调试或访问一般LDAP服务器的是Apache Directory Studio项目，该项目提供独立版本和Eclipse插件版本。免费下载可在[http://directory.apache.
    Org/studio/](http://directory.apache.org/studio/)找到。如果你想跟随本书，现在可能想下载Apache Directory
    Studio 2.0.0-M23。
- en: Understanding how Spring LDAP authentication works
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Spring LDAP认证如何工作
- en: 'We saw that we were able to log in using a user defined in the LDAP directory.
    But what exactly happens when a user issues a login request for a user in LDAP?
    There are the following three basic steps to the LDAP authentication process:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们能够使用在LDAP目录中定义的用户登录。但是，当用户发出登录请求时，在LDAP中实际上会发生什么？LDAP认证过程有三个基本步骤：
- en: Authenticate the credentials supplied by the user against the LDAP directory.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户提供的凭据与LDAP目录进行认证。
- en: Determine the `GrantedAuthority` object that the user has, based on their information
    in LDAP.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于用户在LDAP中的信息，确定其`GrantedAuthority`对象。
- en: Pre-load information from the LDAP entry for the user into a custom `UserDetails`
    object, for further use by the application.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从LDAP条目预加载用户信息到一个自定义的`UserDetails`对象中，供应用程序进一步使用。
- en: Authenticating user credentials
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证用户凭据
- en: 'For the first step, authentication against the LDAP directory, a custom authentication
    provider is wired into `AuthenticationManager`. The `o.s.s.ldap.authentication.LdapAuthenticationProvider`
    interface takes the user''s provided credentials and verifies them against the
    LDAP directory, as illustrated in the following diagram:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一步，即对LDAP目录进行认证，一个自定义认证提供者被连接到`AuthenticationManager`。`o.s.s.ldap.authentication.LdapAuthenticationProvider`接口接受用户提供的凭据，并将它们与LDAP目录进行验证，如下面的图所示：
- en: '![](img/f9e599ad-73a4-479a-98d9-1495d84b87d9.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9e599ad-73a4-479a-98d9-1495d84b87d9.png)'
- en: We can see that the `o.s.s.ldap.authentication.LdapAuthenticator` interface
    defines a delegate to allow the provider to make the authentication request in
    a customizable way. The implementation that we've implicitly configured to this
    point, `o.s.s.ldap.authentication.BindAuthenticator`, attempts to use the user's
    credentials to bind (log in) to the LDAP server as if it were the user themselves
    making a connection. For an embedded server, this is sufficient for our authentication
    needs; however, external LDAP servers may be stricter, and in these, users may
    not be allowed to bind to the LDAP directory. Fortunately, an alternative method
    of authentication exists, which we will explore later in this chapter.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`o.s.s.ldap.authentication.LdapAuthenticator`接口定义了一个委派，以允许提供者以可定制的方式提出认证请求。我们到目前为止隐式配置的实现，`o.s.s.ldap.authentication.BindAuthenticator`，尝试使用用户的凭据以登录到LDAP服务器，好像是用户自己建立连接一样。对于内嵌服务器，这对于我们的认证需求是充分的；然而，外部LDAP服务器可能更严格，在这些服务器上，用户可能不允许绑定到LDAP目录。幸运的是，存在一种替代的认证方法，我们将在本章后面探索。
- en: As noted in the preceding diagram, keep in mind that the search is performed
    under an LDAP context created by the credentials specified in the `DefaultSpringSecurityContextSource`
    reference's `baseDn` attribute. With an embedded server, we don't use this information,
    but with an external server reference, unless `baseDn` is supplied, anonymous
    binding is used. Retaining some control over the public availability of information
    in the directory is very common for organizations which require valid credentials
    to search an LDAP directory, and as such, `baseDn` will be almost always required
    in real-world scenarios. The `baseDn` attribute represents the full DN of a user
    with valid access to bind the directory and perform searches.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，请注意，搜索是在由`DefaultSpringSecurityContextSource`参考的`baseDn`属性创建的LDAP上下文中执行的。对于内嵌服务器，我们不使用这些信息，但对于外部服务器参考，除非提供`baseDn`，否则会使用匿名绑定。对于需要有效凭据才能搜索LDAP目录的组织来说，保留对目录中信息公共可用的某些控制是非常常见的，因此，在现实世界场景中`baseDn`几乎总是必需的。`baseDn`属性代表具有对目录进行绑定并执行搜索的有效访问权限的用户的全DN。
- en: Demonstrating authentication with Apache Directory Studio
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache Directory Studio演示认证过程
- en: We are going to demonstrate how the authentication process works by using Apache
    Directory Studio 1.5 to connect to our embedded LDAP instance and performing the
    same steps that Spring Security is performing. We will use `user1@example.com`
    throughout the simulation. These steps will help to ensure a firm grasp of what
    is happening behind the scenes and will help in the event that you are having
    difficulty figuring out the correct configuration.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用Apache Directory Studio 1.5连接到我们的内嵌LDAP实例并执行Spring Security正在执行的相同步骤来演示认证过程是如何工作的。在整个模拟中我们将使用`user1@example.com`。这些步骤将有助于确保对幕后发生的事情有坚实的基础，并有助于在您遇到难以确定正确配置的情况下提供帮助。
- en: Ensure that the calendar application is started up and working. Next, start
    Apache Directory Studio 1.5 and close the Welcome screen.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确保日历应用程序已经启动并运行。接下来，启动Apache Directory Studio 1.5并关闭欢迎屏幕。
- en: Binding anonymously to LDAP
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名绑定到LDAP
- en: 'The first step is to bind anonymously to LDAP. The bind is done anonymously
    because we did not specify the `baseDn` and `password` attributes on our `DefaultSpringSecurityContextSource`
    object. Within Apache Directory Studio, create a connection using the following
    steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是以匿名方式绑定到LDAP。由于我们没有在`DefaultSpringSecurityContextSource`对象上指定`baseDn`和`password`属性，因此绑定是匿名的。在Apache
    Directory Studio中，使用以下步骤创建一个连接：
- en: Click on File | New | LDAP Browser | LDAP Connection.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | LDAP浏览器 | LDAP连接。
- en: Click on Next.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步。
- en: 'Enter the following information, and then click on Next:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下信息，然后点击下一步：
- en: 'Connection name: `calendar-anonymous`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接名称：`calendar-anonymous`
- en: 'Hostname: `localhost`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名：`localhost`
- en: 'Port: ``33389``'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：``33389``
- en: We did not specify `baseDn`, so select No Authentication as the Authentication
    Method.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们没有指定`baseDn`，因此选择无认证作为认证方法。
- en: Click on Finish.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成。
- en: You can safely ignore the message indicating no default schema information is
    present. You should now see that you are connected to the embedded LDAP instance.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安全地忽略指示没有默认架构信息的存在的消息。现在您应该可以看到，您已经连接到了内嵌的LDAP实例。
- en: Searching for the user
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索用户
- en: 'Now that we have a connection, we can use it to look up the user''s DN that
    we wish to bind to, by performing the following steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个连接，我们可以使用它来查找我们希望绑定的用户的DN，通过执行以下步骤：
- en: Right-click on `DIT` and select New | New Search.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`DIT`并选择新建 | 新搜索。
- en: Enter a search base of `dc=jbcpcalendar,dc=com`. This corresponds to the `baseDn`
    attribute of our `DefaultSpringSecurityContextSource` object that we specified[.](mailto:uid%3Dadmin1@example.com)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入搜索基础`dc=jbcpcalendar,dc=com`。这对应于我们的`DefaultSpringSecurityContextSource`对象的`baseDn`属性，我们指定的[。](mailto:uid%3Dadmin1@example.com)
- en: Enter a filter of `uid=user1@example.com`. This corresponds to the value we
    specified for the `userSearchFilter` method of `AuthenticationManagerBuilder`.
    Note that we have included the parentheses and have substituted the username we
    are attempting to log in with with the `{0}` value.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入过滤器`uid=user1@example.com`。这对应于我们为`AuthenticationManagerBuilder`的`userSearchFilter`方法指定的值。注意我们包括了括号，并用`{0}`值替换了我们尝试登录的用户名。
- en: Click on Search.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击搜索。
- en: Click on the DN of the single result returned by our search. You can now see
    that our LDAP user is displayed. Note that this DN matches the value we searched
    for. Remember this DN, as it will be used in our next step.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们搜索返回的单个结果的DN。现在您可以看到我们的LDAP用户被显示出来。注意这个DN与我们搜索的值匹配。记住这个DN，因为它将在我们下一步中使用。
- en: Binding as a user to LDAP
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以用户身份绑定到LDAP
- en: Now that we have found the full DN of our user, we need to try to bind to LDAP
    as that user to validate the submitted password. These steps are the same as in
    the anonymous bind we already did, except that we will specify the credentials
    of the user that we are authenticating.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到了我们用户的完整DN，我们需要尝试以该用户身份绑定到LDAP以验证提交的密码。这些步骤与我们已经完成的匿名绑定相同，只是我们将指定我们要认证的用户的凭据。
- en: 'Within ApacheDS, create a connection using the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在ApacheDS中，使用以下步骤创建一个连接：
- en: Select File | New | LDAP Browser | LDAP Connection.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文件 | 新建 | LDAP浏览器 | LDAP连接。
- en: Click on Next.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步。
- en: Enter the following information and click on Next**:**
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下信息，然后点击下一步：
- en: 'Connection name: `calendar-user1`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接名称：`calendar-user1`
- en: 'Hostname: `localhost`'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名：`localhost`
- en: 'Port: `33389`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：`33389`
- en: Leave Authentication Method as Simple Authentication.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将认证方法保留为简单认证。
- en: Enter the DN from our search result as `Bind DN`. The value should be `uid=admin1@example.com,ou=Users,dc=jbcpcalendar,dc=com`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的搜索结果中输入DN作为`Bind DN`。值应该是`uid=admin1@example.com,ou=Users,dc=jbcpcalendar,dc=com`。
- en: The `Bind` password should be the password that was submitted at the time of
    login. In our case, we want to use `admin1` to successfully authenticate. If the
    wrong password was entered, we would fail to connect and Spring Security would
    report an error.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bind`密码应该是登录时提交的用户密码。在我们这个案例中，我们希望使用`admin1`来进行成功的认证。如果输入了错误的密码，我们将无法连接，Spring
    Security会报告一个错误。'
- en: Click on Finish.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成。
- en: Spring Security will determine that the username and password were correct for
    this user when it is able to successfully bind with the provided username and
    password (similar to how we were able to create a connection). Spring Security
    will then proceed with determining the user's role membership.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当Spring Security能够成功绑定提供的用户名和密码时，它会确定这个用户的用户名和密码是正确的（这类似于我们能够创建一个连接）。Spring
    Security然后将继续确定用户的角色成员资格。
- en: Determining user role membership
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定用户角色成员资格
- en: 'After the user has been successfully authenticated against the LDAP server,
    authorization information must be determined next. Authorization is defined by
    a principal''s list of roles, and an LDAP-authenticated user''s role membership
    is determined, as illustrated in the following diagram:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户成功对LDAP服务器进行身份验证后，下一步必须确定授权信息。授权是由主体的角色列表定义的，LDAP身份验证用户的角色成员资格是根据以下图表所示确定的：
- en: '![](img/53744a8e-629c-4e8f-919d-a6b1ff0cac4e.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53744a8e-629c-4e8f-919d-a6b1ff0cac4e.png)'
- en: We can see that after authenticating the user against LDAP, `LdapAuthenticationProvider`
    delegates to `LdapAuthoritiesPopulator`. The `DefaultLdapAuthoritiesPopulator`
    interface will attempt to locate the authenticated user's DN in an attribute located
    at or below another entry in the LDAP hierarchy. The DN of the location searched
    for user role assignments is defined in the `groupSearchBase` method; in our sample,
    we set this to `groupSearchBase("ou=Groups")`. When the user's DN is located within
    an LDAP entry below the DN of `groupSearchBase`, an attribute on the entry in
    which their DN is found is used to confer a role to them.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在用户对LDAP进行身份验证后，`LdapAuthenticationProvider`委托给`LdapAuthoritiesPopulator`。`DefaultLdapAuthoritiesPopulator`接口将尝试在LDAP层次结构的另一个条目或其下查找已验证用户的DN。在用户角色分配的位置搜索的DN定义在`groupSearchBase`方法中；在我们的示例中，我们将此设置为`groupSearchBase("ou=Groups")`。当用户的DN位于`groupSearchBase`
    DN下方的LDAP条目中时，在该条目中找到用户DN的属性用于赋予他们角色。
- en: 'How Spring Security roles are associated with LDAP users can be a little confusing,
    so let''s look at the JBCP calendar LDAP repository and see how the association
    of a user with a role works. The `DefaultLdapAuthoritiesPopulator` interface uses
    several methods of the `AuthenticationManagerBuilder` declaration to govern the
    searching of roles for the user. These attributes are used approximately in the
    following order:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将Spring Security角色与LDAP用户相关联可能会有些令人困惑，所以让我们看看JBCP日历LDAP存储库，并了解用户与角色关联是如何工作的。`DefaultLdapAuthoritiesPopulator`接口使用`AuthenticationManagerBuilder`声明中的几个方法来管理对用户角色的搜索。这些属性大约按以下顺序使用：
- en: '`groupSearchBase`: It defines the base DN under which the LDAP integration
    should look for one or more matches for the user''s DN. The default value performs
    a search from the LDAP root, which may be expensive.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`groupSearchBase`：它定义了LDAP集成应该查找用户DN的一个或多个匹配项的基础DN。默认值是从LDAP根进行搜索，这可能会很昂贵。'
- en: '`groupSearchFilter`: It defines the LDAP search filter used to match the user''s
    DN to an attribute of an entry located under `groupSearchBase`. This search filter
    is parameterized with two parameters-the first (`{0}`) being the user''s DN, and
    the second (`{1}`) being the user''s username. The default value is `uniqueMember={0}`.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`groupSearchFilter`：它定义了用于匹配用户DN到位于`groupSearchBase`下条目的属性的LDAP搜索过滤器。这个搜索过滤器有两个参数——第一个（`{0}`）是用户的DN，第二个（`{1}`）是用户的名字。默认值是`uniqueMember={0}`。'
- en: '`groupRoleAttribute`: It defines the attribute of the matching entries, which
    will be used to compose the user''s `GrantedAuthority` object. The default value
    is `cn`.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`groupRoleAttribute`：它定义了匹配条目的属性，该属性将用于组成用户的`GrantedAuthority`对象。默认值是`cn`。'
- en: '`rolePrefix`: It is the prefix that will be prepended to the value found in
    `groupRoleAttribute`, to make a Spring Security `GrantedAuthority` object. The
    default value is `ROLE_`.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rolePrefix`：它将被添加到在`groupRoleAttribute`中找到的值前面，以构成Spring Security的`GrantedAuthority`对象。默认值是`ROLE_`。'
- en: This can be a little abstract and hard for new developers to follow because
    it's very different from anything we've seen so far with our JDBC and JPA-based
    `UserDetailsService` implementations. Let's continue walking through the login
    process with our `user1@example.com` user in the JBCP calendar LDAP directory.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能有点抽象，对于新开发者来说难以理解，因为它与我们迄今为止在JDBC和JPA基础上的`UserDetailsService`实现非常不同。让我们继续通过`user1@example.com`用户在JBCP日历LDAP目录中走一遍登录过程。
- en: Determining roles with Apache Directory Studio
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache Directory Studio确定角色
- en: 'We will now try to determine the roles for our user with Apache Directory Studio.
    Using the `calendar-user1` connection we created previously, perform the following
    steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将尝试使用Apache Directory Studio确定我们的用户角色。使用我们之前创建的`calendar-user1`连接，执行以下步骤：
- en: Right-click on `DIT` and select New | New Search.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DIT`上右键点击，选择新建 | 新搜索。
- en: Enter a search base of `ou=Groups,dc=jbcpcalendar,dc=com`. This corresponds
    to the `baseDn` attribute of the `DefaultSpringSecurityContextSource` object we
    specified, plus the `groupSearchBase` attribute we specified for the `AuthenticationManagerBuilder`
    object.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入搜索基础`ou=Groups,dc=jbcpcalendar,dc=com`。这对应于我们为`AuthenticationManagerBuilder`对象指定的`DefaultSpringSecurityContextSource`对象中的`baseDn`属性，加上我们为`AuthenticationManagerBuilder`对象指定的`groupSearchBase`属性。
- en: Enter a filter of `uniqueMember=uid=user1@example.com,ou=Users,dc=jbcpcalendar,dc=com`.
    This corresponds to the default `groupSearchFilter` attribute of (`uniqueMember={0}`).
    Notice that we have substituted the full DN of the user we found in our previous
    exercise for the `{0}` value.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入过滤器`uniqueMember=uid=user1@example.com,ou=Users,dc=jbcpcalendar,dc=com`。这对应于默认的`groupSearchFilter`属性（`uniqueMember={0}`）。注意我们已经用我们在上一步骤中找到的用户的全DN替换了`{0}`值。
- en: Click on Search.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击搜索。
- en: You will observe that the `User` group is the only group returned in our search
    results. Click on the DN of the single result returned by our search. You can
    now see the `User` group displayed in Apache DS. Note that the group has a `uniqueMember`
    attribute with the full DN of our user and other users.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会观察到，在我们的搜索结果中只有`User`组返回。点击我们搜索返回的单个结果的DN。现在你可以在Apache DS中看到`User`组。注意该组有一个`uniqueMember`属性，包含了我们的用户和其他用户的全DN。
- en: 'Spring Security now creates the `GrantedAuthority` object for each result by
    forcing the name of the group that was found into uppercase and prepending `ROLE_`
    to the group name. The pseudocode would look similar to the following code snippet:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Spring Security会为每个搜索结果创建一个`GrantedAuthority`对象，通过将找到的组的名称强制转换为大写并在组名称前加上`ROLE_`前缀。伪代码看起来类似于以下代码片段：
- en: '[PRE6]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Spring LDAP is as flexible as your gray matter. Keep in mind that, although
    this is one way to organize an LDAP directory to be compatible with Spring Security,
    typical usage scenarios are exactly the opposite-an LDAP directory already exists
    that Spring Security needs to be wired into. In many cases, you will be able to
    reconfigure Spring Security to deal with the hierarchy of the LDAP server; however,
    it's key that you plan effectively and understand how Spring works with LDAP when
    it's querying. Use your brain, map out the user search and group search, and come
    up with the most optimal plan you can think of-keep the scope of searches as minimal
    and as precise as possible.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Spring LDAP和你的灰质一样灵活。请记住，虽然这是一种组织LDAP目录以与Spring Security兼容的方法，但典型的使用场景正好相反——一个已经存在的LDAP目录需要与Spring
    Security进行集成。在许多情况下，你将能够重新配置Spring Security以处理LDAP服务器的层次结构；然而，关键是你需要有效地规划并理解Spring在查询时如何与LDAP合作。用你的大脑，规划用户搜索和组搜索，并提出你能想到的最优计划——尽量保持搜索的范围最小和尽可能精确。
- en: Can you describe how the results of the login process would differ for our `admin1@example.com`
    user? If you are confused at this point, we'd suggest that you take a breather
    and try using Apache Directory Studio to work through browsing the embedded LDAP
    server, configured by the running of an application. It can be easier to grasp
    the flow of Spring Security's LDAP configuration if you attempt to search the
    directory yourself by following the algorithm described previously.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你能描述一下我们的`admin1@example.com`用户登录结果会有何不同吗？如果你此刻感到困惑，我们建议你稍作休息，尝试使用Apache Directory
    Studio浏览嵌入式LDAP服务器，该服务器通过运行应用程序进行配置。如果你尝试按照之前描述的算法自己搜索目录，那么你可能会更容易掌握Spring Security的LDAP配置流程。
- en: Mapping additional attributes of UserDetails
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射UserDetails的额外属性
- en: Finally, once the LDAP lookup has assigned the user a set of the `GrantedAuthority`
    objects, `o.s.s.ldap.userdetails.LdapUserDetailsMapper` will consult `o.s.s.ldap.userdetails.UserDetailsContextMapper`
    to retrieve any additional details to populate the `UserDetails` object for application
    use.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦LDAP查询为用户分配了一组`GrantedAuthority`对象，`o.s.s.ldap.userdetails.LdapUserDetailsMapper`将咨询`o.s.s.ldap.userdetails.UserDetailsContextMapper`，以检索任何其他详细信息，以填充应用程序使用的`UserDetails`对象。
- en: 'Using `AuthenticationManagerBuilder`, we''ve configured up until this point
    that `LdapUserDetailsMapper` will be used to populate a `UserDetails` object with
    information gleaned from the user''s entry in the LDAP directory:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AuthenticationManagerBuilder`，到目前为止，我们已经配置了`LdapUserDetailsMapper`将用于从LDAP目录中用户的条目中获取信息，并填充`UserDetails`对象：
- en: '![](img/a8ad64e3-6e2c-4cbf-9413-97afc801dc42.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8ad64e3-6e2c-4cbf-9413-97afc801dc42.png)'
- en: We'll see in a moment how `UserDetailsContextMapper` can be configured to pull
    a wealth of information from the standard LDAP `person` and `inetOrgPerson` objects.
    With the baseline `LdapUserDetailsMapper`, little more than `username`, `password`,
    and `GrantedAuthority` is stored.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们马上看到如何配置`UserDetailsContextMapper`从标准的LDAP `person`和`inetOrgPerson`对象中获取大量信息。带有基础`LdapUserDetailsMapper`，存储的不仅仅是`username`、`password`和`GrantedAuthority`。
- en: Although there is more machinery involved behind the scenes in LDAP user authentication
    and detail retrieval, you'll notice that the overall process seems somewhat similar
    to the JDBC authentication that we studied in [Chapter 4](04.html), *JDBC-Based
    Authentication* (authenticating the user and populating `GrantedAuthority`*)*
    . As with JDBC authentication, there is the ability to perform advanced configuration
    of LDAP integration. Let's dive deeper and see what's possible!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在LDAP用户认证和详细信息检索的背后涉及更多的机械设备，但你会注意到整个过程似乎与我们在[第4章](04.html)中研究的JDBC认证（认证用户并填充`GrantedAuthority`）
    somewhat similar（有所相似）。与JDBC认证一样，可以执行LDAP集成的高级配置。让我们深入了解一下有什么可能性！
- en: Advanced LDAP configuration
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级LDAP配置
- en: Once we get beyond the basics of LDAP integration, there's a plethora of additional
    configuration capabilities in the Spring Security LDAP module that are still within
    the security `WebSecurityConfigurerAdapter` style of configuration. These include
    retrieval of user personal information, additional options for user authentication,
    and the use of LDAP as the `UserDetailsService` interface in conjunction with
    a standard `DaoAuthenticationProvider` class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们超越了LDAP集成的基础知识，Spring Security LDAP模块中还有许多其他配置能力，这些能力仍然符合`WebSecurityConfigurerAdapter`风格的配置。这包括检索用户个人信息、用户认证的额外选项以及将LDAP用作与标准`DaoAuthenticationProvider`类结合的`UserDetailsService`接口。
- en: Sample JBCP LDAP users
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JBCP LDAP用户示例
- en: 'We''ve supplied a number of different users in the JBCP calendar `LDIF` file.
    The following quick reference chart may help you with the advanced configuration
    exercises, or with self-exploration:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在JBCP日历`LDIF`文件中提供了许多不同的用户。以下快速参考表可能会帮助您进行高级配置练习或自我探索：
- en: '| **Username/password** | **Role(s)** | **Password encoding** |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **用户名/密码** | **角色（们）** | **密码编码** |'
- en: '| `admin1@example.com`/`admin1` | `ROLE_ADMIN`, `ROLE_USER` | Plaintext |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `admin1@example.com`/`admin1` | `ROLE_ADMIN`, `ROLE_USER` | 纯文本 |'
- en: '| `user1@example.com`/`user1` | `ROLE_USER` | Plaintext |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `user1@example.com`/`user1` | `ROLE_USER` | 纯文本 |'
- en: '| `shauser@example.com`/`shauser` | `ROLE_USER` | `{sha}` |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `shauser@example.com`/`shauser` | `ROLE_USER` | `{sha}` |'
- en: '| `sshauser@example.com`/`sshauser` | `ROLE_USER` | `{ssha}` |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `sshauser@example.com`/`sshauser` | `ROLE_USER` | `{ssha}` |'
- en: '| `hasphone@example.com`/`hasphone` | `ROLE_USER` | Plaintext (in the `telephoneNumber`
    attribute) |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `hasphone@example.com`/`hasphone` | `ROLE_USER` | 纯文本（在`telephoneNumber`属性中）
    |'
- en: We'll explain why password encoding matters in the next section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节解释为什么密码编码很重要。
- en: Password comparison versus bind authentication
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码对比与绑定认证
- en: Some LDAP servers will be configured so that certain individual users are not
    allowed to bind directly to the server, or so that anonymous binding (what we
    have been using for user search up until this point) is disabled. This tends to
    occur in very large organizations which want a restricted set of users to be able
    to read information from the directory.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 某些LDAP服务器将被配置为不允许某些个别用户直接绑定到服务器，或者不允许使用匿名绑定（到目前为止我们一直在用于用户搜索的绑定方式）。这在希望限制能够从目录中读取信息的用户集的大型组织中较为常见。
- en: In these cases, the standard Spring Security LDAP authentication strategy will
    not work, and an alternative strategy must be used, implemented by `o.s.s.ldap.authentication.PasswordComparisonAuthenticator`
    (a sibling
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，标准的Spring Security LDAP认证策略将不起作用，必须使用替代策略，由`o.s.s.ldap.authentication.PasswordComparisonAuthenticator`实现：
- en: 'class of `BindAuthenticator`):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 类`BindAuthenticator`）：
- en: '![](img/0057e6ec-a371-49a8-9148-ad56695d435d.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0057e6ec-a371-49a8-9148-ad56695d435d.png)'
- en: The `PasswordComparisonAuthenticator` interface binds to LDAP and searches for
    the DN matching the username provided by the user. It then compares the user-supplied
    password with the `userPassword` attribute stored on the matching LDAP entry.
    If the encoded password matches, the user is authenticated and the flow proceeds,
    as with `BindAuthenticator`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordComparisonAuthenticator`接口连接到LDAP，搜索与用户提供的用户名匹配的DN。然后将用户提供的密码与匹配的LDAP条目上的`userPassword`属性进行比较。如果编码的密码匹配，用户将被认证，流程继续，与`BindAuthenticator`类似。'
- en: Configuring basic password comparison
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置基本的密码比较
- en: 'Configuring password comparison authentication instead of bind authentication
    is as simple as adding a method to the `AuthenticationManagerBuilder` declaration.
    Update the `SecurityConfig.java` file, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 配置密码比较认证而不是绑定认证，只需在`AuthenticationManagerBuilder`声明中添加一个方法即可。更新`SecurityConfig.java`文件，如下所示：
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `PasswordCompareConfigurer` class, that is used by declaring the `passwordCompare`
    method, uses `PlaintextPasswordEncoder` for password encoding. To use the `SHA-1`
    password algorithm, we need to set a password encoder, and we can use `o.s.s.a.encoding.LdapShaPasswordEncoder`
    for `SHA` support (recall that we discussed the `SHA-1` password algorithm extensively
    in [Chapter 4](04.html), *JDBC-Based Authentication*).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordCompareConfigurer`类通过声明`passwordCompare`方法来使用，该类使用`PlaintextPasswordEncoder`进行密码编码。要使用`SHA-1`密码算法，我们需要设置一个密码编码器，我们可以使用`o.s.s.a.encoding.LdapShaPasswordEncoder`为`SHA`支持（回想我们在[第4章](04.html)，*基于JDBC的认证*中广泛讨论了`SHA-1`密码算法）。'
- en: In our `calendar.ldif` file, we have the `password` field set to `userPassword`.
    The default `password` attribute for the `PasswordCompareConfigurer` class is
    `password`. So, we also need to override the `password` attribute with the `passwordAttribute`
    method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`calendar.ldif`文件中，我们将`password`字段设置为`userPassword`。`PasswordCompareConfigurer`类的默认`password`属性是`password`。因此，我们还需要使用`passwordAttribute`方法覆盖`password`属性。
- en: After restarting the server, you can attempt to log in using `shauser@example.com`
    as the `username` and `shauser` as `password`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在重启服务器后，您可以尝试使用`shauser@example.com`作为`用户名`和`shauser`作为`密码`登录。
- en: Your code should look like `chapter06.02-calendar`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应类似于`chapter06.02-calendar`。
- en: LDAP password encoding and storage
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP密码编码和存储
- en: LDAP has general support for a variety of password encoding algorithms, ranging
    from plaintext to one-way hash algorithms-similar to those we explored in the
    previous chapter-with database-backed authentication. The most common storage
    formats for LDAP passwords are `SHA` (`SHA-1` one-way hashed), and `SSHA` (`SHA-1`
    one-way hashed with a salt value). Other password formats often supported by many
    LDAP implementations are thoroughly documented in *RFC 2307*, *An Approach to
    Using LDAP as a Network Information Service* ([http://tools.ietf.org/html/rfc2307](http://tools.ietf.org/html/rfc2307)).
    The designers of *RFC 2307* did a very clever thing with regards to password storage.
    Passwords retained in the directory are, of course, encoded with whatever algorithm
    is appropriate (`SHA` and so on), but then, they are prefixed with the algorithm
    used to encode the password. This makes it very easy for the LDAP server to support
    multiple algorithms for password encoding. For example, an `SHA` encoded password
    is stored in the directory as `{SHA}5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP对多种密码编码算法提供了普遍支持，这些算法从明文到单向散列算法-类似于我们在前一章中探讨的-带有基于数据库的认证。LDAP密码最常用的存储格式是`SHA`（`SHA-1`单向散列）和`SSHA`（`SHA-1`单向散列加盐值）。许多LDAP实现广泛支持的其他密码格式在*RFC
    2307*中详细记录，*作为网络信息服务使用的LDAP方法*（[http://tools.ietf.org/html/rfc2307](http://tools.ietf.org/html/rfc2307)）。*RFC
    2307*的设计者在密码存储方面做了一件非常聪明的事情。保存在目录中的密码当然是用适当的算法（如`SHA`等）进行编码，然后，它们前面加上用于编码密码的算法。这使得LDAP服务器很容易支持多种密码编码算法。例如，一个`SHA`编码的密码在目录中以`{SHA}5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8`的形式存储。
- en: We can see that the password storage algorithm is very clearly indicated with
    the `{SHA}` notation and stored along with the password.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，密码存储算法非常清楚地用`{SHA}`标记表示，并与密码一起存储。
- en: The `SSHA` notation is an attempt to combine the strong `SHA-1` hash algorithm
    with password salting to prevent dictionary attacks. As with password salting,
    which we reviewed in the previous chapter, the salt is added to the password prior
    to calculating the hash. When the hashed password is stored in the directory,
    the salt value is appended to the hashed password. The password is prepended with
    `{SSHA}` so that the LDAP directory knows that the user-supplied password needs
    to be compared differently. The majority of modern LDAP servers utilize `SSHA`
    as their default password storage algorithm.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`SSHA`记号试图将强大的`SHA-1`散列算法与密码加盐结合起来，以防止字典攻击。正如我们在上一章中回顾的密码加盐一样，在计算散列之前将盐添加到密码中。当散列密码存储在目录中时，盐值附加在散列密码后面。密码前缀`{SSHA}`，以便LDAP目录知道需要以不同的方式比较用户提供的密码。大多数现代LDAP服务器将`SSHA`作为默认的密码存储算法。'
- en: The drawbacks of a password comparison authenticator
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码比较认证的缺点
- en: Now that you know a bit about how LDAP uses passwords, and we have `PasswordComparisonAuthenticator`
    set up, what do you think will happen if you log in using our `sshauser@example.com`
    user with their password, stored in the `SSHA` format?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了LDAP如何使用密码，并且我们已经设置了`PasswordComparisonAuthenticator`，那么你觉得如果你使用以`SSHA`格式存储密码的`sshauser@example.com`用户登录会发生什么？
- en: Go ahead, put the book aside and try it, and then come back.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，放下书本试试，然后回来。
- en: Your login was denied, right? And yet you were still able to log in as the user
    with the SHA-encoded password. Why? The password encoding and storage didn't matter
    when we were using bind authentication. Why do you think that is?
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你的登录被拒绝了，对吧？然而你还是能够以SHA编码密码的用户登录。为什么？当我们在使用绑定认证时，密码编码和存储很重要。你认为为什么？
- en: The reason it didn't matter with bind authentication was that the LDAP server
    was taking care of the authentication and validation of the user's password. With
    password compare authentication, Spring Security LDAP is responsible for encoding
    the password in the format expected by the directory and then matching it against
    the directory to validate the authentication.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用绑定认证时，它不重要，因为LDAP服务器负责处理用户的认证和验证。使用密码比较认证时，Spring Security LDAP负责以目录期望的格式编码密码，然后将其与目录进行匹配以验证认证。
- en: For security purposes, password comparison authentication can't actually read
    the password from the directory (reading directory passwords is often denied by
    the security policy). Instead, `PasswordComparisonAuthenticator` performs an LDAP
    search, rooted at the user's directory entry, attempting to match with a `password`
    attribute and value as determined by the password that's been encoded by Spring
    Security.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，密码比较认证实际上无法从目录中读取密码（读取目录密码通常被安全策略禁止）。相反，`PasswordComparisonAuthenticator`执行一个以用户目录条目为根的LDAP搜索，试图与由Spring
    Security编码的密码的`password`属性和值相匹配。
- en: So, when we try to log in with `sshauser@example.com`, `PasswordComparisonAuthenticator`
    is encoding the password using the configured `SHA` algorithm and attempting to
    do a simple match, which fails, as the directory password for this user is stored
    in the `SSHA` format.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当我们尝试使用`sshauser@example.com`登录时，`PasswordComparisonAuthenticator`正在使用配置的`SHA`算法编码密码，并尝试进行简单匹配，这失败了，因为该用户的目录密码以`SSHA`格式存储。
- en: Our current configuration, using `LdapShaPasswordEncoder`, already supports
    `SHA` and `SSHA`, so currently, it still doesn't work. Let's think why that might
    be. Remember that `SSHA` uses a salted password, with the salt value stored in
    the LDAP directory along with the password. However, `PasswordComparisonAuthenticator`
    is coded so that it cannot read anything from the LDAP server (this typically
    violates the security policy with companies that don't allow binding). Thus, when
    `PasswordComparisonAuthenticator` computes the hashed password, it has no way
    to determine what salt value to use.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的配置已使用`LdapShaPasswordEncoder`支持了`SHA`和`SSHA`，所以目前仍然无法工作。让我们来思考可能的原因。记住，`SSHA`使用的是加盐密码，盐值与密码一起存储在LDAP目录中。然而，`PasswordComparisonAuthenticator`的编码方式使其无法从LDAP服务器读取任何内容（这通常违反了不允许绑定的公司的安全策略）。因此，当`PasswordComparisonAuthenticator`计算散列密码时，它无法确定要使用哪个盐值。
- en: In conclusion, `PasswordComparisonAuthenticator` is valuable in certain limited
    circumstances where the security of the directory itself is a concern, but it
    will never be as flexible as straight bind authentication.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`PasswordComparisonAuthenticator` 在某些有限的特定情况下非常有价值，其中目录本身的安全性是一个关注点，但它永远不可能像直接绑定身份验证那样灵活。
- en: Configuring the UserDetailsContextMapper object
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 UserDetailsContextMapper 对象
- en: As we noted earlier, an instance of the `o.s.s.ldap.userdetails.UserDetailsContextMapper`
    interface is used to map a user's entry into the LDAP server to a `UserDetails`
    object in memory. The default `UserDetailsContextMapper` object behaves similarly
    to `JpaDaoImpl`, given the level of detail that is populated on the returned `UserDetails`
    object-that is to say, not a lot of information is returned besides the username
    and password.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所提到的，`o.s.s.ldap.userdetails.UserDetailsContextMapper` 接口的一个实例用于将用户的 LDAP
    服务器条目映射到内存中的 `UserDetails` 对象。默认的 `UserDetailsContextMapper` 对象行为类似于 `JpaDaoImpl`，考虑到返回的
    `UserDetails` 对象中填充的详细信息级别 - 也就是说，除了用户名和密码之外，没有返回很多信息。
- en: However, an LDAP directory potentially contains many more details about individual
    users than usernames, passwords, and roles. Spring Security ships with two additional
    methods of pulling more user data from two of the standard LDAP object schemas-`person`
    and `inetOrgPerson`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，LDAP目录 potentially potentially 包含比用户名、密码和角色更多的个人信息。Spring Security 附带了两种从标准
    LDAP 对象架构 - `person` 和 `inetOrgPerson` 中提取更多用户数据的方法。
- en: Implicit configuration of UserDetailsContextMapper
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐式配置 UserDetailsContextMapper
- en: In order to configure a different `UserDetailsContextMapper` implementation
    than the default, we simply need to declare which `LdapUserDetails` class we want
    `LdapAuthenticationProvider` to return. The security namespace parser will be
    smart enough to instantiate the correct `UserDetailsContextMapper` implementation
    based on the type of the `LdapUserDetails` interface requested.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置一个不同的 `UserDetailsContextMapper` 实现，而不是默认的实现，我们只需要声明我们想要 `LdapAuthenticationProvider`
    返回哪个 `LdapUserDetails` 类。安全命名空间解析器足够智能，可以根据请求的 `LdapUserDetails` 接口类型实例化正确的 `UserDetailsContextMapper`
    实现。
- en: 'Let''s reconfigure our `SecurityConfig.java` file to use the `inetOrgPerson`
    version of the mapper. Update the `SecurityConfig.java` file, as illustrated in
    the following code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新配置我们的 `SecurityConfig.java` 文件，以使用 `inetOrgPerson` 映射器版本。更新 `SecurityConfig.java`
    文件，如下所示：
- en: '[PRE8]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we remove the `passwordEncoder` method, then the LDAP users that are using
    `SHA` passwords will fail to authenticate.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们移除 `passwordEncoder` 方法，那么使用 `SHA` 密码的 LDAP 用户将无法进行身份验证。
- en: If you were to restart the application and attempt to log in as an LDAP user,
    you would see that nothing changed. In fact, `UserDetailsContextMapper` has changed
    behind the scenes to read the additional details in the case where attributes
    from the `inetOrgPerson` schema are available in the user's directory entry.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重新启动应用程序并尝试以 LDAP 用户身份登录，你会看到什么都没有变化。实际上，`UserDetailsContextMapper` 在幕后已经更改为在用户目录条目中可用
    `inetOrgPerson` 架构属性时读取附加详细信息。
- en: Try authenticating with `admin1@example.com` as the `username` and `admin1`
    as the `password`. It should fail to authenticate.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用 `admin1@example.com` 作为 `username` 和 `admin1` 作为 `password` 进行身份验证。它应该无法进行身份验证。
- en: Viewing additional user details
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看附加用户详细信息
- en: To assist you in this area, we'll add the ability to view the current account
    to the JBCP calendar application. We'll use this page to illustrate how the richer
    person and the `inetOrgPerson` LDAP schemas can provide additional (optional)
    information to your LDAP-enabled application.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这个领域帮助你，我们将向 JBCP 日历应用程序添加查看当前账户的能力。我们将使用这个页面来展示如何使用更丰富的个人和 `inetOrgPerson`
    LDAP 架构为您的 LDAP 应用程序提供额外的（可选）信息。
- en: 'You may have noticed that this chapter came with an additional controller named
    `AccountController`. You can see the relevant code, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到这一章带有一个额外的控制器，名为 `AccountController`。你可以看到相关的代码，如下所示：
- en: '[PRE9]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code will retrieve the `UserDetails` object (principal) stored
    in the `Authentication` object by `LdapAuthenticationProvider` and determine what
    type of `LdapUserDetailsImplinterface` it is. The page code itself will then display
    various details depending on the type of `UserDetails` object that has been bound
    to the user''s authentication information, as we see in the following JSP code.
    We have already included JSP as well:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将通过`LdapAuthenticationProvider`从`Authentication`对象中检索存储在`UserDetails`对象（主体）中，并确定它是哪种类型的`LdapUserDetailsImplinterface`。页面代码本身将根据已绑定到用户认证信息的`UserDetails`对象类型显示各种详细信息，正如我们在下面的JSP代码中所看到的那样。我们已经包括了JSP：
- en: '[PRE10]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The only work that actually needs to be done is to add a link in our `header.html`
    file, as shown in the following code snippet:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 实际需要做的工作只是在我们`header.html`文件中添加一个链接，如下面的代码片段所示：
- en: '[PRE11]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ve added the following two more users that you can use to examine the differences
    in the available data elements:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们增加了以下两个用户，您可以使用它们来检查可用数据元素的区别：
- en: '| **Username** | **Password** | **Type** |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '**用户名** | **密码** | **类型** |'
- en: '| `shainet@example.com` | `shainet` | `inetOrgPerson` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '`shainet@example.com` | `shainet` | `inetOrgPerson` |'
- en: '| `shaperson@example.com` | `shaperson` | `person` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '`shaperson@example.com` | `shaperson` | `person` |'
- en: Your code should look like `chapter05.03-calendar`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应该像`chapter05.03-calendar`。
- en: Restart the server and examine the Account Details page for each of the types
    of users by clicking on username in the upper-right corner. You'll note that when
    `UserDetails` class is configured to use `inetOrgPerson`, although `o.s.s.ldap.userdetails.InetOrgPerson`
    is what is returned, the fields may or may not be populated depending on the available
    attributes in the directory entry.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在右上角点击用户名，重新启动服务器并检查各种用户类型的账户详情页面。你会注意到，当`UserDetails`类配置为使用`inetOrgPerson`时，尽管返回的是`o.s.s.ldap.userdetails.InetOrgPerson`，但字段可能填充也可能不填充，这取决于目录条目的可用属性。
- en: In fact, `inetOrgPerson` has many more attributes that we've illustrated on
    this simple page. You can review the full list in *RFC 2798*, *Definition of the
    inetOrgPerson LDAP Object Class* ([http://tools.ietf.org/html/rfc2798](http://tools.ietf.org/html/rfc2798)).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`inetOrgPerson`有更多我们在这个简单页面上说明的属性。您可以在*RFC 2798*中查看完整列表，《inetOrgPerson LDAP对象类的定义》([http://tools.ietf.org/html/rfc2798](http://tools.ietf.org/html/rfc2798))。
- en: One thing you may notice is that there is no facility to support additional
    attributes that may be specified on an Object entry, but don't fall into a standard
    schema. The standard `UserDetailsContextMapper` interfaces don't support arbitrary
    lists of attributes, but it is possible nonetheless to customize it with a reference
    to your own `UserDetailsContextMapper` interface through the use of the `userDetailsContextMapper`
    method.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，没有支持在对象条目上指定但不符合标准架构的额外属性的功能。标准的`UserDetailsContextMapper`接口不支持任意属性的列表，但通过使用`userDetailsContextMapper`方法，仍然可以通过引用您自己的`UserDetailsContextMapper`接口来定制它。
- en: Using an alternate password attribute
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用替代密码属性
- en: In some cases, it may be necessary to use an alternate LDAP attribute instead
    of `userPassword`, for authentication purposes. This can happen during occasions
    when companies have deployed custom LDAP schemas or don't have the requirement
    for strong password management (arguably, this is never a good idea, but it definitely
    does occur in the real world).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可能需要使用替代的LDAP属性来进行身份验证，而不是`userPassword`。这可能发生在公司部署了自定义LDAP架构，或者不需要强密码管理（可以说，这从来不是一个好主意，但在现实世界中确实会发生）的情况下。
- en: 'The `PasswordComparisonAuthenticator` interface also supports the ability to
    verify the user''s password against an alternate LDAP entry attribute instead
    of the standard `userPassword` attribute. This is very easy to configure, and
    we can demonstrate a simple example using the plaintext `telephoneNumber` attribute.
    Update the `SecurityConfig.java`, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasswordComparisonAuthenticator`接口还支持将用户密码与替代的LDAP条目属性进行验证的能力，而不是标准的`userPassword`属性。这非常容易配置，我们可以通过使用明文`telephoneNumber`属性来演示一个简单的例子。按照以下方式更新`SecurityConfig.java`：'
- en: '[PRE12]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can restart the server and attempt to log in with `hasphone@example.com`
    as the `username` and `0123456789` as the `password` (telephone number) attributes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重新启动服务器，并尝试使用`hasphone@example.com`作为`username`和`0123456789`作为`password`（电话号码）属性进行登录。
- en: Your code should look like `chapter05.04-calendar`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应该像`chapter05.04-calendar`。
- en: Of course, this type of authentication has all of the perils we discussed earlier
    regarding authentication based on `PasswordComparisonAuthenticator`; however,
    it's good to be aware of it on the off-chance that it comes up with an LDAP implementation.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种基于`PasswordComparisonAuthenticator`的认证方式具有我们之前讨论过的所有风险；然而，了解它是明智的，以防在LDAP实现中遇到它。
- en: Using LDAP as UserDetailsService
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LDAP作为UserDetailsService
- en: One thing to note is that LDAP may also be used as `UserDetailsService`. As
    we will discuss later in the book, `UserDetailsService` is required to enable
    various other bits of functionality in the Spring Security infrastructure, including
    the remember-me and OpenID authentication features.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指出的一点是，LDAP也可以用作`UserDetailsService`。正如我们将在书中稍后讨论的，`UserDetailsService`是启用Spring
    Security基础架构中各种其他功能所必需的，包括记住我和OpenID认证功能。
- en: 'We will modify our `AccountController` object to use the `LdapUserDetailsService`
    interface to obtain the user. Before doing this, make sure to remove the `passwordCompare`
    method, as shown in the following code snippet:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改我们的`AccountController`对象，使其使用`LdapUserDetailsService`接口来获取用户。在这样做之前，请确保删除以下代码片段中的`passwordCompare`方法：
- en: '[PRE13]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Configuring LdapUserDetailsService
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置LdapUserDetailsService
- en: 'The configuration of LDAP as a `UserDetailsService` function is very similar
    to the configuration of an LDAP `AuthenticationProvider`. Like the JDBC `UserDetailsService`,
    an LDAP `UserDetailsService` interface is configured as a sibling to the `<http>`
    declaration. Make the following updates to the `SecurityConfig.java` file:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 将LDAP配置为`UserDetailsService`的功能与配置LDAP`AuthenticationProvider`非常相似。与JDBC`UserDetailsService`一样，LDAP`UserDetailsService`接口被配置为`<http>`声明的兄弟。请对`SecurityConfig.java`文件进行以下更新：
- en: '[PRE14]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Functionally, `o.s.s.ldap.userdetails.LdapUserDetailsService` is configured
    in almost exactly the same way as `LdapAuthenticationProvider`, with the exception
    that there is no attempt to use the principal's username to bind to LDAP. Instead,
    the credentials supplied by the `DefaultSpringSecurityContextSource` reference
    itself, and are used to perform the user lookup.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能上讲，`o.s.s.ldap.userdetails.LdapUserDetailsService`的配置几乎与`LdapAuthenticationProvider`完全相同，不同之处在于这里没有尝试使用主体的用户名来绑定LDAP。相反，`DefaultSpringSecurityContextSource`提供的凭据本身就是参考，用来执行用户查找。
- en: Do not make the very common mistake of configuring `AuthenticationManagerBuilder`
    with the `UserDetailsService` referring to `LdapUserDetailsService` if you intend
    to authenticate the user against LDAP itself! As discussed previously, the `password`
    attribute often cannot be retrieved from LDAP due to security reasons, which makes
    `UserDetailsService` useless for authenticating. As noted previously, `LdapUserDetailsService`
    uses the `baseDn` attribute supplied with the `DefaultSpringSecurityContextSource`
    declaration to get its information-this means that it does not attempt to bind
    the user to LDAP and, as such, may not behave as you expect.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 不要犯一个非常常见的错误，即如果你打算使用LDAP本身来验证用户，就不要将`AuthenticationManagerBuilder`配置为引用`LdapUserDetailsService`的`UserDetailsService`！如前所述，由于安全原因，通常无法从LDAP中检索`password`属性，这使得`UserDetailsService`对于认证毫无用处。如前所述，`LdapUserDetailsService`使用与`DefaultSpringSecurityContextSource`声明一起提供的`baseDn`属性来获取其信息-这意味着它不会尝试将用户绑定到LDAP，因此可能不会如你所预期的那样运行。
- en: Updating AccountController to use LdapUserDetailsService
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新AccountController以使用LdapUserDetailsService
- en: 'We will now update the `AccountController` object to use the `LdapDetailsUserDetailsService`
    interface to look up the user that it displays:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新`AccountController`对象，使其使用`LdapDetailsUserDetailsService`接口来查找它显示的用户：
- en: '[PRE15]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Obviously, this example is a bit silly, but it demonstrates the use of `LdapUserDetailsService`.
    Go ahead and restart the application and give this a try with the `username` as
    `admin1@example.com` and the `password` as `admin1`. Can you figure out how to
    modify the controller to display an arbitrary user's information?
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这个例子有点傻，但它演示了如何使用`LdapUserDetailsService`。请重新启动应用程序，使用`username`为`admin1@example.com`和`password`为`admin1`来尝试一下。你能弄清楚如何修改控制器以显示任意用户的信息吗？
- en: Can you figure out how you should modify the security settings to restrict access
    to an administrator?
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你能弄清楚应该如何修改安全设置以限制管理员访问吗？
- en: Your code should look like `chapter05.05-calendar`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码应该看起来像`chapter05.05-calendar`。
- en: Integrating Spring Security with an external LDAP server
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Security与外部LDAP服务器集成
- en: It is likely that once you test basic integration with the embedded LDAP server,
    you will want to interact with an external LDAP server. Fortunately, this is very
    straightforward and can be done using a slightly different syntax along with the
    same `DefaultSpringSecurityContextSource` instructions we provided to set up the
    embedded LDAP server.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 测试了与嵌入式LDAP服务器的基本集成之后，你可能会想要与一个外部LDAP服务器进行交互。幸运的是，这非常直接，并且可以使用稍微不同的语法，外加我们提供给设置嵌入式LDAP服务器的相同的`DefaultSpringSecurityContextSource`指令来实现。
- en: 'Update the Spring Security configuration to connect to an external LDAP server
    on port `33389`, as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 更新Spring Security配置以连接到端口`33389`的外部LDAP服务器，如下所示：
- en: '[PRE16]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The notable differences here (aside from the LDAP URL) are that the DN and password
    for an account are provided. The account (which is actually optional) should be
    allowed to bind to the directory and perform searches across all relevant DNs
    for user and group information. The binding resulting from the application of
    these credentials against the LDAP server URL is used for the remaining LDAP operations
    across the LDAP-secured system.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要区别（除了LDAP URL之外）在于提供了账户的DN和密码。账户（实际上是可选的）应该被允许绑定到目录并在所有相关的DN上执行用户和组信息的搜索。这些凭据应用于LDAP服务器URL后，用于在LDAP安全系统中的其余LDAP操作。
- en: Be aware that many LDAP servers also support SSL-encrypted LDAP (LDAPS)-this
    is, of course, preferred for security purposes and is supported by the Spring
    LDAP stack. Simply use `ldaps://` at the beginning of the LDAP server URL. LDAPS
    typically runs on TCP port `636`. Note that there are many commercial and non-commercial
    implementations of LDAP. The exact configuration parameters that you will use
    for connectivity, user binding, and the population of `GrantedAuthoritys` will
    wholly depend on both the vendor and the structure of the directory. We will cover
    one very common LDAP implementation, Microsoft AD, in the next section.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，许多LDAP服务器还支持通过SSL加密的LDAP（LDAPS）——这当然是从安全角度考虑的首选，并且得到了Spring LDAP堆栈的支持。只需在LDAP服务器URL的开头使用`ldaps://`。LDAPS通常运行在TCP端口`636`上。请注意，有许多商业和非商业的LDAP实现。您将用于连接性、用户绑定和`GrantedAuthoritys`填充的确切配置参数将完全取决于供应商和目录结构。在下一节中，我们将介绍一个非常常见的LDAP实现，即Microsoft
    AD。
- en: 'If you do not have an LDAP server handy and would like to give this a try,
    go ahead and add the following code to your `SecurityConfig.java` file, which
    starts up the embedded LDAP server we have been using:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有可用的LDAP服务器并且想尝试一下，可以添加以下代码到你的`SecurityConfig.java`文件中，以此启动我们一直在使用的嵌入式LDAP服务器：
- en: '[PRE17]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If this isn't convincing, start up an LDAP server using Apache Directory Studio
    and import `calendar.ldif` into it. You can then connect to the external LDAP
    server. Go ahead and restart the application and give this a try with the `username`
    as `shauser@example.com` and the `password` as `shauser`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不能让你信服，可以尝试使用Apache Directory Studio启动一个LDAP服务器，并把它里面的`calendar.ldif`文件导入进去。这样你就可以连接到外部的LDAP服务器了。然后重启应用程序，使用`username`为`shauser@example.com`和`password`为`shauser`来尝试这个。
- en: Your code should look like `chapter05.06-calendar`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码应该看起来像`chapter05.06-calendar`。
- en: Explicit LDAP bean configuration
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显式LDAP bean配置
- en: In this section, we'll lead you through the set of bean configurations required
    to explicitly configure both a connection to an external LDAP server and the `LdapAuthenticationProvider`
    interface required to support authentication against an external server. As with
    other explicit bean-based configurations, you really want to avoid doing this
    unless you find yourself in a situation where the capabilities of the security
    namespace style of configuration will not support your business or your technical
    requirements. In which case, read on!
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将引导您完成一系列必要的bean配置，以显式配置与外部LDAP服务器的连接和实现对外部服务器进行身份验证所需的`LdapAuthenticationProvider`接口。与其他显式bean-based配置一样，除非您发现自己处于业务或技术要求无法支持安全命名空间配置方式的情况，否则您真的应该避免这样做。如果是这种情况，请继续阅读！
- en: Configuring an external LDAP server reference
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置外部LDAP服务器引用
- en: 'To implement this configuration, we''ll assume that we have a local LDAP server
    running on port `10389`, with the same configuration corresponding to the `DefaultSpringSecurityContextSource`
    interface example provided in the previous section. The required bean definition
    is already provided in the `SecurityConfig.java` file. In fact, to keep things
    simple, we have provided the entire `SecurityConfig.java` file. Review the LDAP
    server reference in the following code snippet:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此配置，我们将假设我们有一个本地LDAP服务器正在端口`10389`上运行，具有与上一节中提供的`DefaultSpringSecurityContextSource`接口对应的相同配置。所需的bean定义已经在`SecurityConfig.java`文件中提供。实际上，为了保持事情简单，我们提供了整个`SecurityConfig.java`文件。请查看以下代码片段中的LDAP服务器参考：
- en: '[PRE18]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, we'll need to configure `LdapAuthenticationProvider`, which is a bit more
    complex.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置`LdapAuthenticationProvider`，这有点复杂。
- en: Configuring the LdapAuthenticationProvider interface
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置`LdapAuthenticationProvider`接口
- en: 'If you''ve read and understood the explanations throughout this chapter, describing
    how Spring Security LDAP authentication works behind the scenes, this bean configuration
    will be perfectly understandable, albeit a bit complex. We''ll configure `LdapAuthenticationProvider`
    with the following characteristics:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经阅读并理解了本章中的解释，描述了Spring Security LDAP认证背后的原理，这个bean配置将完全可理解，尽管有点复杂。我们将使用以下特性配置`LdapAuthenticationProvider`：
- en: User credential binding authentication (not password comparison)
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户凭据绑定认证（不进行密码比较）
- en: Use of `InetOrgPerson` in `UserDetailsContextMapper`
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`UserDetailsContextMapper`中使用`InetOrgPerson`
- en: 'Take a look at the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下步骤：
- en: 'Let''s get to it-we''ll explore the already configured `LdapAuthenticationProvider`
    interface first, as follows:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始吧-我们首先探索已经配置好的`LdapAuthenticationProvider`接口，如下所示：
- en: '[PRE19]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next bean provided for us is `BindAuthenticator`, and the supporting `FilterBasedLdapUserSearch`
    bean is used to locate the user''s DN in the LDAP directory prior to binding,
    as follows:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个为我们提供的bean是`BindAuthenticator`，支持`FilterBasedLdapUserSearch`bean用于在LDAP目录中定位用户DN，如下所示：
- en: '[PRE20]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, `LdapAuthoritiesPopulator` and `UserDetailsContextMapper` perform
    the roles we examined earlier in the chapter:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`LdapAuthoritiesPopulator`和`UserDetailsContextMapper`执行我们本章早些时候探讨的角色：
- en: '[PRE21]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the next step, we must update Spring Security to utilize our explicitly
    configured `LdapAuthenticationProvider` interface. Update the `SecurityConfig.java`
    file to use our new configuration, ensuring you remove the old `ldapAuthentication`
    method, as follows:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，我们必须更新Spring Security以使用我们显式配置的`LdapAuthenticationProvider`接口。更新`SecurityConfig.java`文件以使用我们的新配置，确保您删除旧的`ldapAuthentication`方法，如下所示：
- en: '[PRE22]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: At this point, we have fully configured LDAP authentication with explicit Spring
    bean notation. Employing this technique in the LDAP integration is useful in a
    few cases, such as when the security namespace does not expose certain configuration
    attributes, or when custom implementation classes are required to provide functionality
    tailored to a particular business scenario. We'll explore one such scenario later
    in this chapter when we examine how to connect to Microsoft AD via LDAP.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经使用显式的Spring bean表示法完全配置了LDAP身份验证。在LDAP集成中使用此技术在某些情况下是有用的，例如当安全命名空间不暴露某些配置属性，或者需要提供针对特定业务场景的自定义实现类时。我们将在本章后面探讨这样一个场景，即如何通过LDAP连接到Microsoft
    AD。
- en: Go ahead and start the application and give the configuration a try with the
    `username` as `shauser@example.com` and the `password` as `shauser`. Assuming
    you have an external LDAP server running, or you have kept the configured in-memory
    `DefaultSpringSecurityContextSource` object, everything should still be working.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请启动应用程序并尝试使用`username`为`shauser@example.com`和`password`为`shauser`的配置。假设您有一个外部运行的LDAP服务器，或者您保留了对配置的内存中`DefaultSpringSecurityContextSource`对象，一切应该仍然可以正常工作。
- en: Your code should look like `chapter05.07-calendar`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应该看起来像`chapter05.07-calendar`。
- en: Delegating role discovery to UserDetailsService
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将角色发现委派给UserDetailsService
- en: 'One technique for populating user roles that are available to use with explicit
    bean configuration is implementing the support for looking up a user by username
    in `UserDetailsService`, and getting the `GrantedAuthority` objects from this
    source. The configuration is as simple as replacing the bean with the `ldapAuthoritiesPopulator`
    ID bean with an updated `UserDetailsServiceLdapAuthoritiesPopulator` object, with
    a reference to `UserDetailsService`. Make the following updates to the `SecurityConfig.java`
    file, ensuring you remove the previous `ldapAuthoritiesPopulator` bean definition:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一种填充可用于显式bean配置的用户角色的技术是实现`UserDetailsService`中按用户名查找用户的支持，并从此来源获取`GrantedAuthority`对象。配置像替换带有`ldapAuthoritiesPopulator`
    ID的bean一样简单，使用一个更新的`UserDetailsServiceLdapAuthoritiesPopulator`对象，带有对`UserDetailsService`的引用。确保您在`SecurityConfig.java`文件中进行以下更新，并确保您移除之前的`ldapAuthoritiesPopulator`bean定义：
- en: '[PRE23]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will also need to ensure that we have defined `userDetailsService`. To keep
    things simple, add an in-memory `UserDetailsService` interface, as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保我们已经定义了`userDetailsService`。为了简单起见，请添加如下所示的内存`UserDetailsService`接口：
- en: '[PRE24]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You should now be able to authenticate with `admin1@example.com` as the `username`
    and `admin1` as the `password`. Naturally, we could also substitute this in-memory
    `UserDetailsService` interface for the JDBC or JPA-based one we discussed in [Chapter
    4](04.html), *JDBC-Based Authentication*, and in [Chapter 5](05.html), *Authentication
    with Spring Data*.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够使用`admin1@example.com`作为`username`和`admin1`作为`password`进行身份验证。当然，我们也可以用这种在内存中的`UserDetailsService`接口替换我们在第[4章](04.html)《基于JDBC的认证》和第[5章](05.html)《使用Spring
    Data的认证》中讨论的基于JDBC或JPA的接口。
- en: Your code should look like `chapter05.08-calendar`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应该看起来像`chapter05.08-calendar`。
- en: The logistical and managerial problem you may notice with this is that the usernames
    and roles must be managed both in the LDAP server and the repository used by `UserDetailsService`-this
    is probably not a scalable model for a large user base.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到这种方法在管理上的问题是，用户名和角色必须在LDAP服务器和`UserDetailsService`使用的存储库中进行管理-这可能对于大型用户基础来说不是一个可扩展的模型。
- en: The more common use of this scenario is when LDAP authentication is required
    to ensure that users of the secured application are valid corporate users, but
    the application itself wants to store authorization information. This keeps potentially
    application-specific data out of the LDAP directory, which can be a beneficial
    separation of concerns.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况更常见的使用方式是在需要通过LDAP身份验证来确保受保护应用程序的用户是有效的企业用户，但应用程序本身希望存储授权信息。这使得潜在的应用程序特定数据不会出现在LDAP目录中，这可以是一个有益的关注点分离。
- en: Integrating with Microsoft Active Directory via LDAP
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过LDAP集成微软Active Directory
- en: One of the convenient features of Microsoft AD is not only its seamless integration
    with Microsoft Windows-based network architectures, but also that it can be configured
    to expose the contents of AD using the LDAP protocol. If you are working in a
    company that is heavily leveraging Microsoft Windows, it is probable that any
    LDAP integration you do will be against your AD instance.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 微软AD的一个方便的功能不仅仅是它与基于微软Windows的网络架构的无缝集成，而且还因为它可以配置为使用LDAP协议暴露AD的内容。如果您在一个大量利用微软Windows的公司工作，那么您很可能要针对您的AD实例进行任何LDAP集成。
- en: Depending on your configuration of Microsoft AD (and the directory administrator's
    willingness to configure it to support Spring Security LDAP), you may have a difficult
    time, not with the authentication and binding process, but with the mapping of
    AD information to the user's `GrantedAuthority` objects within the Spring Security
    system.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您对微软AD的配置（以及目录管理员的配置意愿，以支持Spring Security LDAP），您可能会在将AD信息映射到Spring Security系统中的用户`GrantedAuthority`对象上遇到困难，而不是在认证和绑定过程中遇到困难。
- en: 'The sample AD LDAP tree for JBCP calendar corporate within our LDAP browser
    looks similar to the following screenshot:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们LDAP浏览器中的JBCP日历企业AD LDAP树与以下屏幕截图相似：
- en: '![](img/74fc3ac8-075b-42ea-8d1a-ba9e48752694.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74fc3ac8-075b-42ea-8d1a-ba9e48752694.png)'
- en: What you do not see here is `ou=Groups`, which we saw in our sample LDAP structure
    earlier; this is because AD stores group membership as attributes on the LDAP
    entries of the users themselves.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这里您看不到的是我们之前在样本LDAP结构中看到的`ou=Groups`；这是因为AD将组成员资格存储在用户自身的LDAP条目的属性中。
- en: 'Let''s use our recently acquired knowledge of explicit bean configuration to
    write an `LdapAuthoritiesPopulator` implementation that obtains `GrantedAuthority`
    from the user''s `memberOf` attribute. In the following section, you will find
    the `ActiveDirectoryLdapAuthoritiesPopulator.java` file that is provided in this
    chapter''s sample code:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用最近学到的显式bean配置知识来编写一个`LdapAuthoritiesPopulator`的实现，这个实现可以从用户的`memberOf`属性中获取`GrantedAuthority`。在下一节中，你可以找到这个章节示例代码中提供的`ActiveDirectoryLdapAuthoritiesPopulator.java`文件：
- en: '[PRE25]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need to alter our configuration to support our AD structure. Assuming
    we are starting with the bean configuration detailed in the previous section,
    make the following updates:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要修改我们的配置以支持我们的AD结构。假设我们是从前一部分详细介绍的bean配置开始的，做以下更新：
- en: '[PRE26]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you have it defined, you will want to remove the `UserDetailsService` declaration
    in the `SecurityConfig.java` file. Finally, you will want to remove the references
    to `UserDetailsService` from `AccountController`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你定义了它，你将希望在`SecurityConfig.java`文件中删除`UserDetailsService`声明。最后，你还需要从`AccountController`中删除对`UserDetailsService`的引用。
- en: The `sAMAccountName` attribute is the AD equivalent of the `uid` attribute we
    use in a standard LDAP entry. Although most AD LDAP integrations are likely to
    be more complex than this example, this should give you a starting point to jump
    off and explore your conceptual understanding of the inner workings of Spring
    Security LDAP integration; supporting even a complex integration will be much
    easier.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`sAMAccountName`属性是我们在标准LDAP条目中使用的`uid`属性的AD等效物。尽管大多数AD LDAP集成可能比这个例子更复杂，但这应该能给你一个起点，让你跳进去并探索你对Spring
    Security LDAP集成的内部工作原理的概念理解；即使是支持一个复杂的集成也会容易得多。'
- en: If you want to run this sample, you will need an instance of AD up and running
    that matches the schema displayed in the screenshot. The alternative is to adjust
    the configuration to match your AD schema. A simple way to play around with AD
    is to install **Active Directory Lightweight Directory Services**, which can be
    found at [http://www.microsoft.com/download/en/details.aspx?id=14683](http://www.microsoft.com/download/en/details.aspx?id=14683).
    Your code should look like `chapter05.09-calendar`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要运行这个示例，你需要一个运行中的AD实例，其模式与屏幕截图中显示的模式匹配。另一种选择是调整配置以匹配你的AD模式。玩转AD的一个简单方法是安装**Active
    Directory Lightweight Directory Services**，可以在[http://www.microsoft.com/download/en/details.aspx?id=14683](http://www.microsoft.com/download/en/details.aspx?id=14683)找到。你的代码应该看起来像`chapter05.09-calendar`。
- en: Built-in AD support in Spring Security 4.2
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security 4.2中的内置AD支持
- en: 'Spring Security added AD support in Spring Security 3.1\. In fact, the `ActiveDirectoryLdapAuthoritiesPopulator`
    class from the previous section is based on the newly-added support. To utilize
    the built-in support in Spring Security 4.2, we can replace our entire `SecurityConfig.java`
    file with the following configuration:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security在Spring Security 3.1中增加了AD支持。事实上，前一部分的`ActiveDirectoryLdapAuthoritiesPopulator`类就是基于新增加的支持。为了使用Spring
    Security 4.2中的内置支持，我们可以用以下配置替换我们的整个`SecurityConfig.java`文件：
- en: '[PRE27]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Of course, if you are going to use it, you need to ensure that you wire it
    to `AuthenticationManager`. We have already done this, but a reminder of what
    the configuration looks like can be found in the following code snippet:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你打算使用它，你需要确保将其连接到`AuthenticationManager`。我们已经完成了这一点，但你可以在以下代码片段中找到配置的样子：
- en: '[PRE28]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There are a few things that should be noted about the provided `ActiveDirectoryLdapAuthenticationProvider`
    class, as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 关于提供的`ActiveDirectoryLdapAuthenticationProvider`类，以下几点需要注意：
- en: The users that need to be authenticated must be able to bind to AD (there is
    no manager user.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要进行身份验证的用户必须能够绑定到AD（没有管理员用户。
- en: The default method for populating users' authorities is to search the users'
    `memberOf` attributes.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的方法是搜索用户的`memberOf`属性来填充用户的权限。
- en: Users must contain an attribute named `userPrincipalName`, which is in the `username@<domain>`
    format. Here, `<domain>` is the first constructor argument to `ActiveDirectoryLdapAuthenticationProvider`.
    This is due to the fact that, after the bind occurs, this is how the context for
    the `memberOf` lookup is found.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须包含一个名为`userPrincipalName`的属性，其格式为`username@<domain>`。这里，`<domain>`是`ActiveDirectoryLdapAuthenticationProvider`的第一个构造参数。这是因为，在绑定发生之后，就是这样找到`memberOf`查找上下文的。
- en: Due to the complex LDAP deployments that occur in the real world, the built-in
    support will most likely provide a guide to as how you can integrate with your
    custom LDAP schema.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现实世界中发生的复杂LDAP部署，内置支持很可能会提供一个指导，告诉你如何与自定义LDAP架构集成。
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have seen that LDAP servers can be relied on to provide authentication and
    authorization information, as well as rich user profile information when requested.
    In this chapter, we covered the LDAP terminology and concepts, and how LDAP directories
    might be commonly organized to work with Spring Security. We also explored the
    configuration of both standalone (embedded) and external LDAP servers from a Spring
    Security configuration file.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，当请求时，LDAP服务器可以可靠地提供认证和授权信息，以及丰富的用户配置文件信息。在本章中，我们介绍了LDAP术语和概念，以及LDAP目录可能如何通常组织以与Spring
    Security配合工作。我们还探索了从Spring Security配置文件中配置独立（嵌入式）和外部LDAP服务器的方法。
- en: We covered authentication and authorization of users against LDAP repositories,
    and subsequent mapping to Spring Security actors. We also saw the differences
    in authentication schemes, password storage, and security mechanisms in LDAP,
    and how they are treated in Spring Security. We also learned to map user detail
    attributes from the LDAP directory to the `UserDetails` object for rich information
    exchange between LDAP and the Spring-enabled application. We also explicited bean
    configuration for LDAP, and the pros and cons of this approach.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了将用户对LDAP仓库的认证和授权，以及随后映射到Spring Security参与者。我们还了解了LDAP中认证方案、密码存储和安全机制的差异，以及它们在Spring
    Security中的处理方式。我们还学会了将用户详细属性从LDAP目录映射到`UserDetails`对象，以便在LDAP和Spring启用应用程序之间进行丰富的信息交换。我们还明确地为LDAP配置了bean，并讨论了这种方法的优缺点。
- en: We also covered integration with AD.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了与AD的集成。
- en: In the next chapter, we will discuss Spring Security's **remember-me** feature,
    which allows a user's session to securely persist even after closing the browser.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Spring Security的**记住我**功能，该功能允许用户会话在关闭浏览器后仍然安全地保持。
