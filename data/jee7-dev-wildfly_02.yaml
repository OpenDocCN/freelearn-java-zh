- en: Chapter 2. Your First Java EE Application on WildFly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章. 在 WildFly 上创建您的第一个 Java EE 应用程序
- en: 'This chapter will provide you with a crash course in the new application server
    so that you will be able to create a deployable skeleton of our first Java EE
    7 application in the next chapter. More specifically, we will cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供关于新应用程序服务器的快速入门课程，以便您能够在下一章中创建我们第一个 Java EE 7 应用程序的部署框架。更具体地说，我们将涵盖以下主题：
- en: An introduction to the WildFly 8 core concepts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly 8 核心概念的介绍
- en: The anatomy of the WildFly 8 filesystem
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly 8 文件系统的结构
- en: An introduction to the available management instruments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用管理工具的介绍
- en: Deploying your first Hello World application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布您的第一个 Hello World 应用程序
- en: WildFly 8 core concepts
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WildFly 8 核心概念
- en: 'Now that we have downloaded and installed WildFly 8, it is worth spending a
    few minutes familiarizing ourselves with some basic concepts. The architecture
    and most of the core ideas are taken straight from JBoss AS 7; although, there
    are some new mechanisms that were introduced with the newest version (for example,
    role-based security for the management system, reduced number of used ports, and
    a new patching system). Just like JBoss AS 7, WildFly can be run in two modes:
    the standalone mode and domain mode.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载并安装了 WildFly 8，花几分钟时间熟悉一些基本概念是值得的。架构和大多数核心思想直接来自 JBoss AS 7；尽管如此，也有一些新机制是在最新版本中引入的（例如，管理系统的基于角色的安全性、使用的端口数量减少以及新的补丁系统）。就像
    JBoss AS 7 一样，WildFly 可以以两种模式运行：独立模式和域模式。
- en: In the **standalone** mode, each WildFly instance is an independent process
    (similar to the previous JBoss AS versions, such as Version 4, Version 5, Version
    6, and the standalone mode in Version 7). The standalone configuration files are
    located under the `standalone`/`configuration` directory of the application server.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **独立** 模式下，每个 WildFly 实例都是一个独立的过程（类似于之前的 JBoss AS 版本，如版本 4、版本 5、版本 6 以及版本
    7 的独立模式）。独立配置文件位于应用程序服务器的 `standalone`/`configuration` 目录下。
- en: In the **domain** mode, you can run multiple application servers and manage
    them from a central point. A domain can span multiple physical (or virtual) machines.
    On each machine, we can install several instances of WildFly that are under the
    control of a Host Controller process. The configuration files in the domain mode
    are located under the `domain`/`configuration` folder of the application server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **域** 模式下，您可以从一个中心点运行多个应用程序服务器并管理它们。一个域可以跨越多个物理（或虚拟）机器。在每台机器上，我们可以安装几个受主机控制器进程控制的
    WildFly 实例。域模式下的配置文件位于应用程序服务器的 `domain`/`configuration` 文件夹下。
- en: 'From the process point of view, a domain is made up of three elements:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从进程的角度来看，一个域由三个元素组成：
- en: '**Domain Controller**: The domain controller is the management control point
    of your domain. A WildFly instance running in the domain mode will have at the
    most one process instance acting as a domain controller. The domain controller
    holds a centralized configuration, which is shared by the node instances that
    belong to that domain.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域控制器**: 域控制器是您域的管理控制点。在域模式下运行的 WildFly 实例最多只有一个进程实例充当域控制器。域控制器持有集中式配置，该配置由属于该域的节点实例共享。'
- en: '**Host Controller**: This is the process that is responsible for coordinating
    the life cycle of server processes and the distribution of deployments from the
    domain controller to the server instances.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机控制器**: 这是负责协调服务器进程生命周期以及从域控制器到服务器实例部署分布的过程。'
- en: '**Application server nodes**: These are regular Java processes that map instances
    of the application server. Each server node, in turn, belongs to a server group.
    Domain groups are explained in detail when we will discuss the domain configuration
    file.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序服务器节点**: 这些是映射应用程序服务器实例的常规 Java 进程。每个服务器节点反过来又属于一个服务器组。当讨论域配置文件时，将详细介绍域组。'
- en: Additionally, when starting a domain, you will see another JVM process running
    on your machine. This is the Process Controller. It is a very lightweight process
    whose primary function is to spawn server processes and Host Controller processes,
    and manage their input/output streams. Since Process Controller is not configurable,
    we will not discuss it any further.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当启动域时，您将在您的机器上看到另一个 JVM 进程正在运行。这是进程控制器。这是一个非常轻量级的进程，其主要功能是生成服务器进程和主机控制器进程，并管理它们的输入/输出流。由于进程控制器不可配置，我们不会进一步讨论它。
- en: 'The following diagram depicts a typical domain deployment configuration:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图显示了典型的域部署配置：
- en: '![WildFly 8 core concepts](img/00010.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![WildFly 8 核心概念](img/00010.jpeg)'
- en: As you can see in the preceding diagram, one host (**Host1**) acts as a dedicated
    domain controller. This is a common practice adopted in domain-managed servers
    in order to logically and physically separate the administration unit from the
    servers where the applications are hosted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的图中可以看到的，一个主机（**Host1**）充当专用域控制器。这是在域管理的服务器中采用的一种常见做法，目的是为了在逻辑上和物理上将管理单元与托管应用程序的服务器分开。
- en: 'The other hosts (**Host2** and **Host3**) contain the domain application servers,
    which are divided into two server groups: **main-server-group** and **other-server-group**.
    A server group is a logical set of server instances that will be managed and configured
    together. Each server group can, in turn, be configured with different profiles
    and deployments; for example, in the preceding domain, you can provide some services
    with **main-server-group** and other services with **other-server-group**.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其他主机（**Host2** 和 **Host3**）包含域应用程序服务器，这些服务器分为两个服务器组：**main-server-group** 和
    **other-server-group**。服务器组是一组逻辑上的服务器实例，它们将一起被管理和配置。每个服务器组都可以配置不同的配置文件和部署；例如，在前面提到的域中，你可以使用
    **main-server-group** 提供一些服务，而使用 **other-server-group** 提供其他服务。
- en: This has some advantages. For example, when you don't want to shut down your
    application for a new version, you can start by redeploying only one server group
    at a time. When one server is not fully operational, requests can be handled by
    the second one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一些优点。例如，当你不想为了新版本而关闭你的应用程序时，你可以一次只重新部署一个服务器组。当一个服务器不完全运行时，请求可以被第二个服务器处理。
- en: Getting into the details of the domain configuration is beyond the scope of
    this book; however, by the end of this chapter, we will see how to deploy application
    units in a domain using the command-line interface available in WildFly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 详细了解域配置超出了本书的范围；然而，到本章结束时，我们将看到如何使用 WildFly 中可用的命令行界面在域中部署应用程序单元。
- en: The WildFly 8 directory layout
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WildFly 8 目录结构
- en: 'The difference between standalone and domain reflects in the directory layout
    of the application server is shown in the following diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 独立和域之间的区别在以下图中显示了应用程序服务器的目录结构：
- en: '![The WildFly 8 directory layout](img/00011.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![WildFly 8 目录结构](img/00011.jpeg)'
- en: 'As you can see in the preceding diagram, the WildFly directory layout is divided
    into two main parts: the first one is pertinent to a standalone server mode and
    the other is dedicated to a domain server mode. Common to both server modes is
    the `modules` directory, which is the heart of the application server.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的图中可以看到的，WildFly 的目录结构分为两个主要部分：第一个与独立服务器模式相关，另一个是针对域服务器模式的。两种服务器模式都有的共同点是
    `modules` 目录，这是应用程序服务器的心脏。
- en: WildFly is based on the `JBoss Modules` project, which provides an implementation
    of a modular (nonhierarchical) class loading and an execution environment for
    Java. In other words, rather than a single class loader that loads all JARs into
    a flat class path, each library becomes a module, which only links to the exact
    modules it depends on and nothing more. It implements a thread safe, fast, and
    highly concurrent delegating class loader model, coupled with an extensible module
    resolution system. This combines to form a unique, simple, and powerful system
    for application execution and distribution.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 基于 `JBoss Modules` 项目，该项目提供了一个模块化（非层次化）的类加载和 Java 执行环境实现。换句话说，而不是一个加载所有
    JAR 到平坦类路径的单个类加载器，每个库都成为一个模块，它只链接到它所依赖的确切模块，不再链接其他任何内容。它实现了一个线程安全、快速且高度并发的委托类加载器模型，并配有一个可扩展的模块解析系统。这些结合在一起形成了一个独特、简单且强大的应用程序执行和分发系统。
- en: 'The following table details the content of each folder present in the `root`
    folder of `JBOSS_HOME`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下表详细说明了 `JBOSS_HOME` 的 `root` 目录中每个文件夹的内容：
- en: '| Folder | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹 | 描述 |'
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `bin` | This folder contains the startup scripts, startup configuration files,
    and various command-line utilities, such as vault, add-user, and Java diagnostic
    reports available for Unix and Windows environments |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `bin` | 这个文件夹包含启动脚本、启动配置文件以及各种命令行实用程序，例如 vault、add-user 和适用于 Unix 和 Windows
    环境的 Java 诊断报告 |'
- en: '| `bin/client` | This folder contains a client Jar for use by the remote EJB
    and CLI and clients not using any build systems with automatic dependency management
    such as Maven, Ant with Ivy, or Gradle |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `bin/client` | 此文件夹包含一个客户端Jar文件，用于远程EJB、CLI以及不使用任何具有自动依赖管理功能的构建系统（如Maven、Ivy的Ant或Gradle）的客户。
    |'
- en: '| `bin/init.d` | New in WildFly, this folder contains scripts for Red Hat Linux
    and Debian, which registers WildFly as a Linux service |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `bin/init.d` | WildFly新增功能，此文件夹包含用于Red Hat Linux和Debian的脚本，这些脚本将WildFly注册为Linux服务。
    |'
- en: '| `bin/service` | New in WildFly, this folder contains a script that allows
    to register WildFly as a Windows service |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `bin/service` | WildFly新增功能，此文件夹包含一个脚本，允许将WildFly注册为Windows服务。 |'
- en: '| `docs/examples` | This folder contains some sample standalone configurations
    such as a minimal standalone configuration (`standalone-minimalistic.xml`) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `docs/examples` | 此文件夹包含一些示例独立配置，例如最小化独立配置（`standalone-minimalistic.xml`）。
    |'
- en: '| `docs/schema` | This folder contains XML schema definition files |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `docs/schema` | 此文件夹包含XML模式定义文件。 |'
- en: '| `domain` | This folder contains the configuration files, deployment content,
    and writable areas used by the domain mode processes run from this installation
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `domain` | 此文件夹包含由此安装的域模式进程使用的配置文件、部署内容和可写区域。 |'
- en: '| `modules` | This folder contains all the modules installed on the application
    server |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `modules` | 此文件夹包含在应用程序服务器上安装的所有模块。 |'
- en: '| `standalone` | This folder contains the configuration files, deployment content,
    and writable areas used by the single standalone servers run from this installation
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `standalone` | 此文件夹包含由此安装的单个独立服务器使用的配置文件、部署内容和可写区域。 |'
- en: '| `appclient` | This folder contains the configuration files, deployment content,
    and writable areas used by the application client container run from this installation
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `appclient` | 此文件夹包含由此安装的应用程序客户端容器使用的配置文件、部署内容和可写区域。 |'
- en: '| `welcome-content` | This folder contains the default Welcome page content
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `welcome-content` | 此文件夹包含默认欢迎页内容。 |'
- en: 'Digging into the standalone mode tree, we can find folders that are pertinent
    to standalone independent processes. If you have experience with earlier server
    releases, you will find these folders quite intuitive to you:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究独立模式树，我们可以找到与独立独立进程相关的文件夹。如果你有早期服务器版本的经验，你会发现这些文件夹对你来说非常直观：
- en: '| Directory | Description |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 目录 | 描述 |'
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `configuration` | This directory contains the configuration files for the
    standalone server that runs from this installation. All configuration information
    for the running server is located here and is the single place for configuration
    modifications for the standalone server. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `configuration` | 此目录包含从此安装运行的独立服务器的配置文件。所有运行服务器的配置信息都位于此处，并且是独立服务器配置修改的唯一位置。
    |'
- en: '| `data` | This directory contains the persistent information written by the
    server to survive a restart of the server. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 此目录包含服务器写入的持久信息，以便在服务器重启后继续存在。 |'
- en: '| `deployments` | The end user deployment content can be placed in this directory
    for automatic detection and deployment of that content into the server''s runtime.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `deployments` | 最终用户部署内容可以放置在此目录中，以便自动检测并将该内容部署到服务器的运行时。 |'
- en: '| `lib/ext` | This directory is the location for the installed library Jar
    files, referenced by the applications using the Extension-List mechanism. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `lib/ext` | 此目录是安装的库Jar文件的存放位置，由使用扩展列表机制的应用程序引用。 |'
- en: '| `log` | This directory contains the standalone server logfiles. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `log` | 此目录包含独立服务器日志文件。 |'
- en: '| `tmp` | This directory contains the location of the temporary files written
    by the server. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `tmp` | 此目录包含服务器写入的临时文件的位置。 |'
- en: The `domain` directory structure is quite similar to the standalone equivalent,
    with one important difference. As you can see from the following table, the `deployments`
    folder is not present since the domain mode does not support deploying content
    based on scanning a filesystem. We need to use the WildFly managed instruments
    (CLI and web admin console) in order to deploy applications to a domain.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`domain`目录结构与独立模式类似，但有一个重要区别。如以下表格所示，`deployments`文件夹不存在，因为域模式不支持基于扫描文件系统部署内容。我们需要使用WildFly管理工具（CLI和Web管理控制台）来部署应用程序到域。
    |'
- en: '| Directory | Description |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 目录 | 描述 |'
- en: '| --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `configuration` | This directory contains the configuration files for the
    domain Host Controller and any servers running on this installation. All the configuration
    information for the servers managed within the domain is located here and is the
    single place for configuration information. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `configuration` | 此目录包含域主机控制器和在此安装上运行的任何服务器的配置文件。域内管理的所有服务器的配置信息都位于此处，并且是配置信息的唯一位置。|'
- en: '| `data/content` | This directory is an internal working area for the Host
    Controller, which controls this installation. This is where it internally stores
    the deployment content. This directory is not meant to be manipulated by the end
    users. It is created after the first server startup. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `data/content` | 此目录是主机控制器的一个内部工作区域，它控制这个安装。这是它内部存储部署内容的地方。此目录不打算由最终用户操作。它是在第一次服务器启动后创建的。|'
- en: '| `log` | This directory is the location where the Host Controller process
    writes its logs. The Process Controller, a small, lightweight process that actually
    spawns other Host Controller processes and any application server processes, also
    writes logs here. It is created after the first server startup. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `log` | 此目录是主机控制器进程写入其日志的位置。进程控制器，一个实际产生其他主机控制器进程和任何应用服务器进程的小型、轻量级进程，也在这里写入日志。它是在第一次服务器启动后创建的。|'
- en: '| `servers` | This directory is a writable area used by each application server
    instance that runs from this installation. Each application server instance will
    have its own subdirectory, created when the server is first started. In each server''s
    subdirectory, the following subdirectories will be present:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| `servers` | 此目录是每个从该安装运行的应用服务器实例的可写区域。每个应用服务器实例将有一个自己的子目录，在服务器第一次启动时创建。在每个服务器的子目录中，将存在以下子目录：'
- en: '`data`: This is the information written by the server that needs to survive
    a restart of the server'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`: 这是服务器写入的、需要服务器重启后仍然存在的信息。'
- en: '`log`: This is the server''s logfiles'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log`: 这是服务器的日志文件。'
- en: '`tmp`: This is the location of the temporary files written by the server. This
    folder is created after the first server startup.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp`: 这是服务器写入的临时文件的位置。此文件夹在第一次服务器启动后创建。'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `tmp` | This directory contains the location of the temporary files written
    by the server. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `tmp` | 此目录包含服务器写入的临时文件的位置。|'
- en: Managing the application server
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理应用服务器
- en: 'WildFly provides three different means to configure and manage servers: a web
    interface, a command-line client, and a set of XML configuration files. No matter
    what approach you choose, the configuration is always synchronized across the
    different views and finally persisted to the XML files. After saving the changes
    using the web interface, you will instantly see an updated XML file in your server''s
    configuration directory.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly提供了三种不同的方式来配置和管理服务器：一个网页界面、一个命令行客户端和一组XML配置文件。无论你选择哪种方法，配置总是同步到不同的视图，并最终持久化到XML文件中。使用网页界面保存更改后，你将立即在你的服务器配置目录中看到更新的XML文件。
- en: Managing WildFly 8 with the web interface
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用网页界面管理WildFly 8
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: Wildfly 8 is secured out of the box and the default security mechanism is based
    on a username or password, making use of HTTP Digest. The reason for securing
    the server by default is that if the management interfaces are accidentally exposed
    on a public IP address, authentication is required to connect. For this reason,
    there is no default user in the distribution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 8默认是安全的，默认的安全机制基于用户名或密码，并使用HTTP摘要。默认情况下保护服务器的理由是，如果管理接口意外地暴露在公共IP地址上，则需要认证才能连接。因此，分发中没有默认用户。
- en: The users are stored in a properties file called `mgmt-users.properties` under
    standalone/configuration or domain/configuration depending on the running mode
    of the server. This file contains the username information along with a precalculated
    hash of the username, plus the name of the realm and user's password.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 用户存储在`mgmt-users.properties`属性文件中，该文件位于独立配置或域配置下，具体取决于服务器的运行模式。此文件包含用户名信息以及预先计算的哈希值，以及域和用户的密码。
- en: 'To manipulate the files and add users, the server has provided utilities such
    as `add-user.sh` and `add-user.bat` to add the users and generate hashes. So just
    execute the script and follow the guided process. This is shown in the following
    screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了操作文件和添加用户，服务器已提供如`add-user.sh`和`add-user.bat`之类的实用程序来添加用户并生成散列。所以只需执行脚本并遵循引导过程。这在上面的屏幕截图中显示：
- en: '![Managing WildFly 8 with the web interface](img/00012.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![使用Web界面管理WildFly 8](img/00012.jpeg)'
- en: 'In order to create a new user, you need to provide the following information:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建新用户，您需要提供以下信息：
- en: '**Type of user**: The type of user will be Management User, since it will manage
    the application server.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户类型**：用户类型将是管理用户，因为它将管理应用程序服务器。'
- en: '**Realm**: This must match the realm name used in the configuration, so unless
    you have changed the configuration to use a different realm name, leave this set
    to `ManagementRealm`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域**：这必须与配置中使用的域名称匹配，除非您已更改配置以使用不同的域名称，否则请将此设置为`ManagementRealm`。'
- en: '**Username**: This is the username of the user you are adding.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**：这是您要添加的用户的用户名。'
- en: '**Password**: This is the user''s password.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：这是用户的密码。'
- en: '**User groups**: This is a list of comma-separated groups that should be assigned
    to the newly created user; they are used for the role-based access control and
    auditing system, which was introduced in WildFly. The information about user groups
    is stored in the `mgmt-groups.properties` file.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户组**：这是一个逗号分隔的组列表，应分配给新创建的用户；它们用于WildFly中引入的角色基于访问控制和审计系统。用户组的信息存储在`mgmt-groups.properties`文件中。'
- en: If the validation is successful, you will be asked to confirm whether you want
    to add the user; only then the `properties` files will be updated.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证成功，您将被要求确认是否要添加用户；只有在这种情况下，`properties`文件才会被更新。
- en: The final question (Is this new user going to be used to connect one AS process
    to another?) can be used to **add the slave Host Controllers** that authenticate
    against a master domain controller. This, in turn, requires adding the secret
    key to your slave host's configuration in order to authenticate with the master
    domain controller. (For more information about domain configuration, please visit
    [https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-ManagedDomain](https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-ManagedDomain).)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个问题（这个新用户是否将被用来连接一个AS进程到另一个？）可以用来**添加从属主机控制器**，这些控制器将验证主域控制器。这反过来又需要在从属主机的配置中添加密钥，以便与主域控制器进行验证。（有关域配置的更多信息，请访问[https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-ManagedDomain](https://docs.jboss.org/author/display/WFLY8/Admin+Guide#AdminGuide-ManagedDomain)。）
- en: Launching the web console
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Web控制台
- en: Now that we have added at least one user, we can launch the web console at the
    default address, `http://<host>:9990/console` (keep in mind that you have to start
    the server first, for example, with `standalone.bat` or `standalone.sh`).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了至少一个用户，我们可以在默认地址`http://<host>:9990/console`启动Web控制台（请注意，您必须首先启动服务器，例如使用`standalone.bat`或`standalone.sh`）。
- en: 'The login screen will be prompted. Enter data into the **User Name** and **Password**
    fields, which we had formerly created. This is shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将会提示登录界面。在**用户名**和**密码**字段中输入数据，这是我们之前创建的。这在上面的屏幕截图中显示：
- en: '![Launching the web console](img/00013.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![启动Web控制台](img/00013.jpeg)'
- en: 'Once logged in, you will be redirected to the web administration main screen.
    The web console, when running in the standalone mode, will be divided into three
    main tabs: **Configuration**, **Runtime**, and **Administration**. This is shown
    in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您将被重定向到Web管理主屏幕。当以独立模式运行时，Web控制台将分为三个主要标签页：**配置**、**运行时**和**管理**。这在上面的屏幕截图中显示：
- en: '![Launching the web console](img/00014.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![启动Web控制台](img/00014.jpeg)'
- en: The **Configuration** tab contains all the single subsystems that are part of
    a server profile. So, once you select the **Configuration** tab on the left frame,
    you can access all the subsystems and edit their configurations (in the previous
    screenshot, we saw the Data Sources subsystem).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置**标签页包含所有作为服务器配置一部分的单个子系统。因此，一旦您在左侧框架中选择**配置**标签页，您就可以访问所有子系统并编辑它们的配置（在之前的屏幕截图中，我们看到了数据源子系统）。'
- en: 'The other tab named **Runtime** can be used for two main purposes: to manage
    the deployment of applications and check the server metrics. This is shown in
    the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个名为**运行时**的标签页可以用于两个主要目的：管理应用程序的部署和检查服务器指标。这在上面的屏幕截图中显示：
- en: '![Launching the web console](img/00015.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![启动Web控制台](img/00015.jpeg)'
- en: 'The **Administration** tab has been introduced with WildFly and Red Hat JBoss
    EAP 6.2 and currently contains only the options associated with role based access
    control. You can now limit permissions of management users, for example, so that
    not every administrator can undeploy an application using the web console. By
    default, this feature is disabled. You have to enable it manually using the CLI
    mechanism. This is shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly和Red Hat JBoss EAP 6.2引入了**管理**标签页，目前它仅包含与基于角色的访问控制相关的选项。您现在可以限制管理用户的权限，例如，这样不是每个管理员都可以使用Web控制台卸载应用程序。默认情况下，此功能是禁用的。您必须手动使用CLI机制启用它。这在上面的屏幕截图中显示：
- en: '![Launching the web console](img/00016.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![启动Web控制台](img/00016.jpeg)'
- en: Once you have learned how to access the web console, it is about time you try
    your first application example.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您学会了如何访问Web控制台，现在是时候尝试您的第一个应用程序示例了。
- en: Deploying your first application to WildFly 8
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的第一个应用程序部署到WildFly 8
- en: 'In order to test launch our first application, we will create a `HelloWorld`
    web project using Eclipse. The main part will be a `servlet` class, used to generate
    HTML markup. So, launch Eclipse and choose to create a new web project by navigating
    to **File** | **New** | **Dynamic Web Project**. This is shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试启动我们的第一个应用程序，我们将使用Eclipse创建一个`HelloWorld`网络项目。主要部分是一个`servlet`类，用于生成HTML标记。因此，启动Eclipse，通过导航到**文件**
    | **新建** | **动态网络项目**来创建一个新的网络项目。这在上面的屏幕截图中显示：
- en: '![Deploying your first application to WildFly 8](img/00017.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![将您的第一个应用程序部署到WildFly 8](img/00017.jpeg)'
- en: Choose a name for your application and check the **Use default location** box
    if you want to create your project within the same location of your Eclipse workspace.
    If you have correctly configured a new WildFly server in Eclipse, you should see
    the **WildFly 8.0 Runtime** option selected by default, and **Target Runtime**
    and **Default Configuration** for **WildFly 8.0 Runtime** preselected in the **Configuration**
    box.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的应用程序选择一个名称，如果您想在Eclipse工作空间同一位置创建项目，请勾选**使用默认位置**复选框。如果您已在Eclipse中正确配置了新的WildFly服务器，您应该看到默认选中了**WildFly
    8.0 运行时**选项，并且在**配置**框中预选了**WildFly 8.0 运行时**的**目标运行时**和**默认配置**。
- en: Select **3.1** as the Dynamic web module version, which makes development easy
    by using the Servlet 3.1 specifications, and also leave the **EAR membership**
    and **Add project to working sets** checkboxes unselected.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**3.1**作为动态网络模块版本，这将通过使用Servlet 3.1规范使开发变得容易，并且也保留**EAR成员资格**和**将项目添加到工作集**复选框未选中。
- en: Click on **Finish** to continue.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**完成**继续。
- en: 'Now, let''s add a quintessential simple servlet to our project, which merely
    dumps a **Hello World** message as an HTML page. From the **File** menu, go to
    **New** | **Servlet** and enter a meaningful name and package for your servlet,
    such as `TestServlet` as the name and `com.packtpub.wflydevelopment.chapter2`
    as the package name. This is shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向我们的项目中添加一个典型的简单servlet，它仅将一个**Hello World**消息作为HTML页面输出。从**文件**菜单，转到**新建**
    | **Servlet**，为您的servlet输入一个有意义的名称和包名，例如名称为`TestServlet`，包名为`com.packtpub.wflydevelopment.chapter2`。这在上面的屏幕截图中显示：
- en: '![Deploying your first application to WildFly 8](img/00018.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![将您的第一个应用程序部署到WildFly 8](img/00018.jpeg)'
- en: 'The wizard will generate a basic servlet skeleton that needs to be enhanced
    with the following set of code lines:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 向导将生成一个基本的servlet骨架，需要通过以下代码行进行增强：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The servlet will respond with a static HTML page (we defined the content type
    as Text/HTML with an UTF-8 charset) for every GET HTTP request that will be issued
    against its URL address.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该servlet将对针对其URL地址发出的每个GET HTTP请求响应一个静态HTML页面（我们定义的内容类型为Text/HTML，字符集为UTF-8）。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that `TextServlet` bears the `@WebServlet` annotation, which has been
    introduced by the Servlet 3.0 API, and it allows registering a servlet without
    using the `web.xml` configuration file. In our example, we used it to customize
    the servlet URL binding to employ `/test`, which would otherwise be defaulted
    by Eclipse to the class name.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 `TextServlet` 带有 `@WebServlet` 注解，这是由 Servlet 3.0 API 引入的，它允许在不使用 `web.xml`
    配置文件的情况下注册一个 servlet。在我们的例子中，我们使用它来自定义 servlet URL 绑定，使用 `/test`，否则 Eclipse 会将其默认为类名。
- en: 'We will complete the application with the creation of a `JBoss` file descriptor
    named `jboss-web.xml in /WebContent/WEB-INF/` directory; although this is not
    mandatory, it can be used to redefine the context root, as shown in the following
    code snippet:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个名为 `jboss-web.xml` 的 `JBoss` 文件描述符，位于 `/WebContent/WEB-INF/` 目录中，来完成应用程序；尽管这不是强制性的，但它可以用来重新定义上下文根，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The schema definition file for `jboss-web.xml` is named `jboss-web_8_0.xsd`
    and can be located in the `JBOSS_HOME/docs/schema` folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`jboss-web.xml` 的模式定义文件命名为 `jboss-web_8_0.xsd`，可以位于 `JBOSS_HOME/docs/schema`
    文件夹中。'
- en: Keep in mind that creating `jboss-web.xml` makes the application non-portable
    to other Java EE Application Servers. The default application path when such a
    file is not defined is a concatenation of the application name and its version,
    for example, for application `TestServlet` with Version 1.0, it would be TestServlet-1.0.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，创建 `jboss-web.xml` 使得应用程序无法在其他 Java EE 应用服务器上移植。当没有定义此类文件时，默认的应用程序路径是应用程序名称和版本的连接，例如，对于名为
    `TestServlet` 且版本为 1.0 的应用程序，它将是 TestServlet-1.0。
- en: 'Now, we will add the web application to the list of deployed resources by right-clicking
    on the Eclipse **Server** tab and selecting **Add and Remove**. This is shown
    in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过在 Eclipse **服务器**选项卡上右键单击并选择**添加和移除**来将 Web 应用程序添加到已部署资源的列表中。这如图所示：
- en: '![Deploying your first application to WildFly 8](img/00019.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![将您的第一个应用程序部署到 WildFly 8](img/00019.jpeg)'
- en: 'Next, click on **Add** to add the project to the list of configured resources
    on the server as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击**添加**将项目添加到服务器上配置的资源列表中，如图所示：
- en: '![Deploying your first application to WildFly 8](img/00020.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![将您的第一个应用程序部署到 WildFly 8](img/00020.jpeg)'
- en: If you have started WildFly from inside Eclipse, the resource will be automatically
    deployed by checking the flag to see whether the server has started, and publish
    changes immediately.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在 Eclipse 内启动了 WildFly，资源将通过检查标志来自动部署，以查看服务器是否已启动，并立即发布更改。
- en: 'If, on the other hand, you have started the application server externally,
    then you can fully publish your resource by right-clicking on the application
    and selecting **Full Publish** as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你在外部启动了应用程序服务器，那么你可以通过在应用程序上右键单击并选择**完全发布**来完全发布你的资源，如图所示：
- en: '![Deploying your first application to WildFly 8](img/00021.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![将您的第一个应用程序部署到 WildFly 8](img/00021.jpeg)'
- en: 'Now, move to the browser and check that the application responds at the configured
    URL, as shown in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到浏览器并检查应用程序是否在配置的 URL 上响应，如图所示：
- en: '![Deploying your first application to WildFly 8](img/00022.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![将您的第一个应用程序部署到 WildFly 8](img/00022.jpeg)'
- en: This example is also available in the form of a Maven (will be introduced in
    the next chapter) project in your Packt Publishing account.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例也以 Maven（将在下一章介绍）项目的形式存在于您的 Packt Publishing 账户中。
- en: Advanced Eclipse deployment options
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级 Eclipse 部署选项
- en: As it is, Eclipse has published a `HelloWorld.war` folder in `JBOSS_HOME/standalone/deployments`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如此一来，Eclipse 已经在 `JBOSS_HOME/standalone/deployments` 中发布了 `HelloWorld.war` 文件夹。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You might have noticed that Eclipse has also added a marker file named `HelloWorld.war.dodeploy`.
    This step is necessary because, by default, exploded deployments in WildFly aren't
    automatically deployed. Autodeployment of the exploded content is disabled by
    default because the deployment scanner could try to deploy the copied directory
    partially, which would cause a lot of errors. The deployment of the exploded archives
    can be manually triggered with a marker file named `application.[jar/war/ear].dodeploy`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，Eclipse 还添加了一个名为 `HelloWorld.war.dodeploy` 的标记文件。这一步是必要的，因为默认情况下，WildFly
    中的展开部署不会自动部署。展开内容的自动部署默认是禁用的，因为部署扫描器可能会尝试部分部署复制的目录，这会导致许多错误。可以通过名为 `application.[jar/war/ear].dodeploy`
    的标记文件手动触发展开存档的部署。
- en: Once the application is deployed, the application server replaces the `.dodeploy
    marker` file with `HelloWorld.war` deployed, or with a `HelloWorld.war.failed`
    file, should the deployment fail.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序部署完成，应用程序服务器将用部署的`HelloWorld.war`文件替换`.dodeploy`标记文件，或者在部署失败的情况下，用`HelloWorld.war.failed`文件替换。
- en: 'You can change the default deployment options by double-clicking on WildFly
    8.0 (in the **Server** tab), and selecting the **Deployment** tab as shown in
    the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过双击WildFly 8.0（在**服务器**选项卡中），然后选择**部署**选项卡来更改默认的部署选项，如下截图所示：
- en: '![Advanced Eclipse deployment options](img/00023.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![高级Eclipse部署选项](img/00023.jpeg)'
- en: In the **Deployment** tab, you can choose to deploy your application on a custom
    deploy folder by checking the **Use a custom deploy folder** option and entering
    an appropriate value into the corresponding textbox.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在**部署**选项卡中，您可以通过勾选**使用自定义部署文件夹**选项并在相应的文本框中输入适当的值来选择将您的应用程序部署到自定义部署文件夹。
- en: Please note that the custom deployment folder also needs to be defined in WildFly;
    check the next section for more information about it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，自定义部署文件夹也必须在WildFly中定义；有关更多信息，请参阅下一节。
- en: Also, take note of the **Deploy projects as compressed archives** option, which
    can be useful in some circumstances, for example, if you are distributing the
    application via other instruments such as the CLI, which can deploy only compressed
    archives.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意**将项目作为压缩存档部署**选项，在某些情况下可能很有用，例如，如果您通过其他工具（如CLI）分发应用程序，这些工具只能部署压缩存档。
- en: Managing deployments with the web console
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Web控制台管理部署
- en: Deploying the application using Eclipse is a straightforward task and is likely
    to be your option when you are developing apps. We will see here how to use the
    web console to deploy the application, which can be one more arrow in your quiver.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Eclipse部署应用程序是一个简单的任务，并且可能是您开发应用程序时的首选选项。我们将在此处了解如何使用Web控制台部署应用程序，这可以成为您箭袋中的另一支箭。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A typical scenario for this example could be if you are running the AS in the
    domain mode, or simply deploying your application on a remote WildFly instance.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的一个典型场景可能是您正在以域模式运行AS，或者简单地将应用程序部署到远程WildFly实例。
- en: 'Start the web console and click on the **Runtime** tab. From the panel on the
    left, go to **Server** | **Manage Deployments** as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Web控制台并单击**运行时**选项卡。从左侧面板中，转到**服务器** | **管理部署**，如下截图所示：
- en: '![Managing deployments with the web console](img/00024.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![使用Web控制台管理部署](img/00024.jpeg)'
- en: 'In the central panel, we can manage deployments using the **Add**, **Remove**,
    **En**/**Disable**, and **Update** buttons. Select the **Add** button to add a
    new deployment unit. In the next screen, pick up the file you want to deploy (for
    example, the `HelloWorld.war` artifact, which can be created from our test project
    in Eclipse by navigating to **File** | **Export** | **Web** | **WAR File**) from
    your local filesystem, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在中央面板中，我们可以使用**添加**、**删除**、**启**/**禁用**和**更新**按钮来管理部署。选择**添加**按钮以添加新的部署单元。在下一屏幕中，从您的本地文件系统中选择您想要部署的文件（例如，`HelloWorld.war`工件，可以通过在Eclipse测试项目中导航到**文件**
    | **导出** | **Web** | **WAR文件**来创建），如下截图所示：
- en: '![Managing deployments with the web console](img/00025.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![使用Web控制台管理部署](img/00025.jpeg)'
- en: 'Complete the wizard by verifying the deployment''s name and clicking on **Save**,
    as shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证部署的名称并单击**保存**来完成向导，如下截图所示：
- en: '![Managing deployments with the web console](img/00026.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![使用Web控制台管理部署](img/00026.jpeg)'
- en: 'Now, the deployment is listed in the Deployments table. It is, however, not
    enabled by default. Click on the **En**/**Disable** button to enable the deployment
    of the application, as shown in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，部署已列在部署表中。然而，默认情况下它并未启用。单击**启**/**禁用**按钮以启用应用程序的部署，如下截图所示：
- en: '![Managing deployments with the web console](img/00027.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![使用Web控制台管理部署](img/00027.jpeg)'
- en: Changing the deployment scanner properties
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修改部署扫描器属性
- en: 'As we have seen before, applications running in the standalone mode are scanned
    in the `deployments` folder by default. You can change this behavior (and also
    the deployment scanner''s properties) by clicking on the **Configuration** tab
    and navigating to **Subsystems** | **Core** | **Deployment Scanners** from the
    left menu. This is shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，以独立模式运行的应用程序默认在 `deployments` 文件夹中进行扫描。你可以通过点击 **配置** 选项卡并从左侧菜单导航到 **子系统**
    | **核心** | **部署扫描器** 来更改此行为（以及部署扫描器的属性）。这如下面的截图所示：
- en: '![Changing the deployment scanner properties](img/00028.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![更改部署扫描器属性](img/00028.jpeg)'
- en: 'In **Deployment Scanners**, you can set the core deployment''s attributes.
    You can click on the **Edit** button to define new values for these properties.
    Most of them are self-explanatory; however, the following table summarizes them:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **部署扫描器** 中，你可以设置核心部署的属性。你可以点击 **编辑** 按钮来为这些属性定义新值。其中大部分是自解释的；然而，以下表格总结了它们：
- en: '| Attribute | Description |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | This is the deployment scanner''s name (by default, the name `default`
    is provided). |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 这是部署扫描器的名称（默认情况下，提供名称 `default`）。 |'
- en: '| `path` | This is the absolute path where deployments are scanned. If the
    attribute `Path Relative to` is set, then it''s appended to the relative path
    definition. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `path` | 这是部署扫描扫描的绝对路径。如果设置了 `相对于路径` 属性，则将其附加到相对路径定义上。 |'
- en: '| `Enabled` | This attribute determines whether the deployment scanner is enabled
    or not. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `启用` | 此属性确定部署扫描器是否启用。 |'
- en: '| `Path Relative to` | If included, this attribute must point to a system path
    that will be used to build the relative path expression. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `相对于路径` | 如果包含，此属性必须指向用于构建相对路径表达式的系统路径。 |'
- en: '| `Scan Interval` | This is the time frequency (in milliseconds) for which
    deployments will be scanned. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `扫描间隔` | 这是部署扫描的频率（以毫秒为单位）。 |'
- en: '| `Auto-deploy Zipped` | Setting this to `true` will enable automatic deployments
    for zipped applications. Its default value is `true`. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `自动部署压缩包` | 将此设置为 `true` 将启用压缩应用的自动部署。其默认值是 `true`。 |'
- en: '| `Auto-deploy Exploded` | Setting this to `true` will enable automatic deployments
    for exploded applications. Its default value is `true`. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `自动部署展开` | 将此设置为 `true` 将启用展开应用的自动部署。其默认值是 `true`。 |'
- en: '| `Deployment timeout` | This refers to the time-out after which a deployment
    action will be marked as `failed`. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `部署超时` | 这指的是部署操作标记为 `失败` 之后的超时时间。 |'
- en: Deploying applications using the command-line interface
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行界面部署应用程序
- en: 'Another way to deploy an application is via the WildFly **Command-line Interface**
    (**CLI**), which can be started from `jboss-cli.bat` (or `jboss-cli.sh` for Linux
    users). Don''t be afraid of using a textual interface to manage your application
    server; as a matter of fact, the console provides built-in autocomplete features
    and you can display the available commands at any time by simply hitting the *Tab*
    key, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序的另一种方式是通过 WildFly **命令行界面**（**CLI**），可以从 `jboss-cli.bat`（或 Linux 用户的 `jboss-cli.sh`）启动。不要害怕使用文本界面来管理你的应用程序服务器；事实上，控制台提供了内置的自动完成功能，你可以通过简单地按
    *Tab* 键在任何时候显示可用的命令，如下面的截图所示：
- en: '![Deploying applications using the command-line interface](img/00029.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![使用命令行界面部署应用程序](img/00029.jpeg)'
- en: 'As you might have guessed, in order to deploy an application, you need to issue
    the `deploy` shell command. When used without arguments, the `deploy` shell command
    provides a list of applications that are currently deployed. Refer to the following
    code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，为了部署一个应用程序，你需要发出 `deploy` shell 命令。当不带参数使用时，`deploy` shell 命令提供当前已部署的应用程序列表。请参考以下代码：
- en: '[PRE2]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you feed a resource archive such as `.war` to shell, it will deploy it on
    the standalone server right away, as shown in the following command line:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一个资源存档，例如 `.war`，传递给 shell，它将立即在独立服务器上部署它，如下面的命令行所示：
- en: '[PRE3]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see from the preceding command line, the CLI uses the folder where
    your deployments were actually launched at its initial location, which is `JBOSS_HOME/bin`
    by default. You can, however, use absolute paths when specifying the location
    of your archives; the CLI expansion facility (using the *Tab* key) makes this
    option fairly simple. This is demonstrated in the following command line:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的命令行中看到的，CLI使用您实际启动部署的文件夹的初始位置，默认情况下为`JBOSS_HOME/bin`。然而，当指定存档的位置时，您可以使用绝对路径；CLI的扩展功能（使用*Tab*键）使此选项相当简单。以下命令行展示了这一点：
- en: '[PRE4]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There is no error message after issuing the command; therefore, the application
    is deployed and activated so that the user can access it. If you want to just
    perform the deployment of the application and defer the activation to a later
    time, you have to add the `--disabled` switch, as shown in the following command
    line:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行后没有错误消息；因此，应用程序已部署并激活，用户可以访问它。如果您只想执行应用程序的部署并将激活推迟到以后，您必须添加`--disabled`开关，如下所示：
- en: '[PRE5]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In order to activate the application, simply issue another `deploy` shell command
    without the `--disabled` switch, as shown in the following command line:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激活应用程序，只需发出另一个不带`--disabled`开关的`deploy` shell命令，如下所示：
- en: '[PRE6]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Redeploying the application requires an additional flag for the `deploy` shell
    command. Use the `-f` argument to force the application''s redeployment, as shown
    in the following command line:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 重新部署应用程序需要为`deploy` shell命令添加一个额外的标志。使用`-f`参数强制应用程序重新部署，如下所示：
- en: '[PRE7]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Undeploying the application can be done with the `undeploy` command, which
    takes the application that is deployed as an argument. This is shown in the following
    command line:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`undeploy`命令可以卸载应用程序，该命令将已部署的应用程序作为参数。以下命令行展示了这一点：
- en: '[PRE8]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Deploying applications to a domain
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署应用程序到域
- en: Deploying applications when running in the domain mode is slightly different
    from doing this in the standalone mode. The difference boils down to the fact
    that an application can be deployed just to one server group or to all the server
    groups. As a matter of fact, one reason why you might split your domain into different
    server groups might be that you are planning to offer different types of services
    (and hence applications) to each server group.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在域模式下运行时部署应用程序与在独立模式下进行此操作略有不同。这种差异归结为应用程序可以仅部署到单个服务器组或所有服务器组。实际上，您可能将域拆分为不同的服务器组的原因之一可能是您计划为每个服务器组提供不同类型的服务（因此是应用程序）。
- en: 'So, in order to deploy your `HelloWorld.war` application to all server groups,
    issue the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了将您的`HelloWorld.war`应用程序部署到所有服务器组，请发出以下命令：
- en: '[PRE9]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If, on the other hand, you want to undeploy an application from all server
    groups belonging to a domain, you have to issue the `undeploy` command, as shown
    in the following command line:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您想从属于域的所有服务器组中卸载应用程序，您必须发出`undeploy`命令，如下所示：
- en: '[PRE10]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also deploy your application just to one server group of your domain
    by specifying one or more server groups (separated by a comma) with the `--server-groups`
    parameter, as shown in the following command line:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过指定一个或多个服务器组（用逗号分隔）并使用`--server-groups`参数，将应用程序仅部署到域的某个服务器组，如下所示：
- en: '[PRE11]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can use the tab completion facility in order to complete the value for the
    list of `--server` groups elected for deployment.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Tab补全功能来完成为部署选择的`--server`组列表的值。
- en: 'Now, suppose we wish to undeploy the application from just one server group.
    There can be two possible scenarios. If the application is available just on that
    server group, you will just need to feed the server group to the `--server-groups`
    flag, as shown in the following command line:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们希望仅从单个服务器组中卸载应用程序。可能有两种情况。如果应用程序仅在该服务器组中可用，您只需将服务器组传递给`--server-groups`标志，如下所示：
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On the other hand, if your application is available on other server groups
    as well, you need to provide the additional `--keep-content` flag; otherwise,
    the CLI will complain that it cannot delete an application that is referenced
    by other server groups, as shown in the following command line:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您的应用程序在其他服务器组上也有可用，您需要提供额外的`--keep-content`标志；否则，CLI将抱怨它无法删除由其他服务器组引用的应用程序，如下所示：
- en: '[PRE13]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we went through a crash course on the application server,
    focusing on the available management instruments: the web interface and Command-line
    interface. We then saw how to use these tools to deploy a sample application to
    a standalone environment and domain environment.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们进行了一次关于应用服务器的快速课程，重点关注可用的管理工具：Web 界面和命令行界面。然后我们看到了如何使用这些工具将一个示例应用程序部署到独立环境和域环境。
- en: In the next chapter, we will dive deep into Java EE 7 components, starting from
    Enterprise JavaBeans, which still plays an important role in the evolving scenario
    of Java Enterprise applications.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 Java EE 7 组件，从企业 JavaBeans 开始，它在 Java 企业应用程序的发展场景中仍然扮演着重要的角色。
