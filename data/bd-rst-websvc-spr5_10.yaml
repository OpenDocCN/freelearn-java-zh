- en: Building a REST Client and Error Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建REST客户端和错误处理
- en: In previous chapters, we covered the server side of RESTful web services including
    CRUD operations. Here, we can check how to consume those APIs in the code itself.
    The REST client will help us to achieve this goal.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们涵盖了RESTful Web服务的服务器端，包括CRUD操作。在这里，我们可以检查如何在代码中消费这些API。REST客户端将帮助我们实现这个目标。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: RestTemplate in Spring
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring中的RestTemplate
- en: Basic setup for building a RESTful service client with Spring
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring构建RESTful服务客户端的基本设置
- en: Calling a RESTful service in the client
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端调用RESTful服务
- en: Defining the error handler
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义错误处理程序
- en: Using the error handler
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用错误处理程序
- en: Building a REST client
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建REST客户端
- en: So far, we have created a REST API and consumed it in third-party tools such
    as SoapUI, Postman, or JUnit testing. There might be situations where you will
    have to consume a REST API using the regular method (service or another controller
    method) itself like payment API call in service API. It will be useful when you
    call a third-party API such as PayPal or a weather API in your code. In such situations,
    having a REST client will be helpful for getting the job done.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个REST API，并在诸如SoapUI、Postman或JUnit测试之类的第三方工具中使用它。可能会出现情况，您将不得不使用常规方法（服务或另一个控制器方法）本身来消费REST
    API，比如在服务API中调用支付API。当您在代码中调用第三方API，比如PayPal或天气API时，拥有一个REST客户端将有助于完成工作。
- en: Here, we will talk about how to build a REST client to consume another REST
    API in our method. Before moving onto that, we will talk a little bit about `RestTemplate`
    in Spring.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论如何构建一个REST客户端来在我们的方法中消费另一个REST API。在进行这之前，我们将简要讨论一下Spring中的`RestTemplate`。
- en: RestTemplate
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RestTemplate
- en: '`RestTemplate` is a Spring class that is used to consume the REST API from
    the client side through HTTP. By using `RestTemplate`, we can keep the REST API
    consumer in the same application as well, so we don''t need a third-party application
    or another application to consume our API. `RestTemplate` can be used use to call
    `GET`, `POST`, `PUT`, `DELETE`, and other advanced HTTP methods (`OPTIONS`, `HEAD`).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate`是一个Spring类，用于通过HTTP从客户端消费REST API。通过使用`RestTemplate`，我们可以将REST
    API消费者保持在同一个应用程序中，因此我们不需要第三方应用程序或另一个应用程序来消费我们的API。`RestTemplate`可以用于调用`GET`、`POST`、`PUT`、`DELETE`和其他高级HTTP方法（`OPTIONS`、`HEAD`）。'
- en: By default, the `RestTemplate` class relies on JDK to establish HTTP connections.
    You can switch to using a different HTTP library such as Apache HttpComponents
    and Netty.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`RestTemplate`类依赖JDK建立HTTP连接。您可以切换到使用不同的HTTP库，如Apache HttpComponents和Netty。
- en: 'First, we will add a `RestTemplate` bean configuration in the `AppConfig` class.
    In the following code, we will see how the `RestTemplate` bean can be configured:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`AppConfig`类中添加一个`RestTemplate` bean配置。在下面的代码中，我们将看到如何配置`RestTemplate`
    bean：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, we have mentioned this class with `@Configuration` annotation
    to configure all the beans inside the class. We have also introduced the `RestTemplate`
    bean in this class. By configuring the bean in the `AppConfig` class, we tell
    the application that the mentioned bean can be used in any place in the application.
    When the application starts, it is automatically initializing the bean and is
    ready to use the template wherever needed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们已经在这个类中使用了`@Configuration`注解来配置类中的所有bean。我们还在这个类中引入了`RestTemplate`
    bean。通过在`AppConfig`类中配置bean，我们告诉应用程序所述的bean可以在应用程序的任何地方使用。当应用程序启动时，它会自动初始化bean，并准备在需要的地方使用模板。
- en: 'Now, we can use `RestTemplate` by simply using the `@Autowire` annotation in
    any class. For a better understanding, we have created a new class called `ClientController`
    and added a simple method in the class:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在任何类中简单地使用`@Autowire`注解来使用`RestTemplate`。为了更好地理解，我们创建了一个名为`ClientController`的新类，并在该类中添加了一个简单的方法：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we used `RestTemplate` and called the `getForObject`
    method to consume the API. By default, we used `String.class` to keep our code
    simple to understand.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了`RestTemplate`并调用了`getForObject`方法来消费API。默认情况下，我们使用`String.class`来使我们的代码简单易懂。
- en: 'When you call this API `http://localhost:8080/client/test/`, you will get the
    following result:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用这个API `http://localhost:8080/client/test/`时，您将得到以下结果：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding process, we have used `RestTemplate` inside another REST API.
    In a real-time scenario, you might use the same method that you used to call the
    third-party REST API.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述过程中，我们在另一个REST API中使用了`RestTemplate`。在实时场景中，您可能会使用与调用第三方REST API相同的方法。
- en: 'Let''s get a single user API inside another method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在另一个方法中获取一个单个用户API：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By calling the preceding API, you will get the single user as a result. In order
    to call this API, our `User` class should be serialized, otherwise you might get
    an unserialized object error. Let's make our `User` class serialized by implementing
    `Serializable` and adding a serial version ID.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用上述API，您将得到单个用户作为结果。为了调用这个API，我们的`User`类应该被序列化，否则您可能会得到一个未序列化对象错误。让我们通过实现`Serializable`并添加一个序列版本ID来使我们的`User`类序列化。
- en: You can create a serial version ID in Eclipse by right-clicking on the class
    name and generating a serial number.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Eclipse中右键单击类名并生成一个序列号来创建一个序列版本ID。
- en: 'After serializing the `User` class, it will look as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在对`User`类进行序列化之后，它将如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we can call the `http://localhost:8080/client/test/user` client API
    in the browser and get the following result:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在浏览器中调用`http://localhost:8080/client/test/user`客户端API，并得到以下结果：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have used only the `GET` method for ease of understanding. However, we can
    use the `POST` method and `add` parameters in the REST consumer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于理解，我们只使用了`GET`方法。然而，我们可以使用`POST`方法并在REST消费者中添加参数。
- en: Error handling
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: So far in our application, we haven't defined any specific error handler to
    catch the error and convey it to the right format. Usually when we deal with an
    unexpected situation in REST APIs, it will automatically throw an HTTP error such
    as `404`. Errors such as `404` will show explicitly in the browser. This is fine
    normally; however, we might need a JSON format result regardless of whether things
    go right or wrong.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们的应用程序中，我们还没有定义任何特定的错误处理程序来捕获错误并将其传达到正确的格式。通常，当我们在REST API中处理意外情况时，它会自动抛出HTTP错误，如“404”。诸如“404”之类的错误将在浏览器中明确显示。这通常是可以接受的；但是，无论事情是对是错，我们可能需要一个JSON格式的结果。
- en: Converting the error into JSON format would be a nice idea in such cases. By
    providing the JSON format, we can keep our application clean and standardized.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将错误转换为JSON格式是一个不错的主意。通过提供JSON格式，我们可以保持我们的应用程序干净和标准化。
- en: 'Here, we will discuss how to manage errors and display them in JSON format
    when things go wrong. Let''s create a common error handler class to manage all
    of our errors:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论如何在事情出错时管理错误并以JSON格式显示它们。让我们创建一个通用的错误处理程序类来管理我们所有的错误：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding class will act as a common error handler in our application. In
    the `ErrorHandler` class, we have created a single method called `handleException`
    with the `@ExceptionHandler` annotation. This annotation will make the method
    receive all exceptions in the application. Once we get exceptions, we can manage
    what to do based on the type of exception.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的类将作为我们应用程序中的通用错误处理程序。在“ErrorHandler”类中，我们创建了一个名为“handleException”的方法，并使用“@ExceptionHandler”注解。此注解将使该方法接收应用程序中的所有异常。一旦我们获得异常，我们可以根据异常的类型来管理应该做什么。
- en: 'In our code, we have used only two situations to manage our exceptions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们只使用了两种情况来管理我们的异常：
- en: Missing parameter
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺少参数
- en: General error (everything else other than missing parameter)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般错误（除了缺少参数之外的所有其他情况）
- en: If we miss a parameter when calling any REST API, it will go to the first situation,
    `Parameter Missing`, or else it will go to the `Generic Error` default error.
    We have simplified the process to make it understandable for new users. However,
    we can add more cases in this method to manage more exceptions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用任何REST API时缺少参数，它将进入第一种情况，“参数缺失”，否则它将进入“通用错误”默认错误。我们简化了这个过程，以便新用户能够理解。但是，我们可以在这种方法中添加更多情况来处理更多的异常。
- en: 'Once we have finished the error handler, we will have to use it in our application.
    Applying the error handler can be done in many ways. Extending the error handler
    is the simplest way to use it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完成错误处理程序后，我们将不得不在我们的应用程序中使用它。应用错误处理程序可以通过多种方式完成。扩展错误处理程序是使用它的最简单方法：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we just extended `ErrorHandler` in the `HomeController`
    class. By doing so, we are binding all error scenarios to `ErrorHandler` to receive
    and handle properly. Also, we have created a test method called `testError` to
    check our error handler.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们只是在“HomeController”类中扩展了“ErrorHandler”。通过这样做，我们将所有错误情况绑定到“ErrorHandler”以正确接收和处理。此外，我们创建了一个名为“testError”的测试方法来检查我们的错误处理程序。
- en: In order to call this API, we need to pass `item` as a parameter; otherwise
    it will throw an error in the application. As we have already defined the `ErrorController`
    class and extended the `HomeController` class, missing the parameter will take
    you to the first scenario mentioned earlier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调用这个API，我们需要将“item”作为参数传递；否则它将在应用程序中抛出一个错误。因为我们已经定义了“ErrorController”类并扩展了“HomeController”类，缺少参数将使您进入前面提到的第一个情景。
- en: 'Just try the following URL in your browser or any REST client (Postman/SoapUI):
    `http://localhost:8080/test/error`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在浏览器或任何REST客户端（Postman/SoapUI）中尝试以下URL：“http://localhost:8080/test/error”。
- en: 'If you try the preceding endpoint, you will get the following result:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试上述端点，您将得到以下结果：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we have defined the JSON format in our error handler, if any REST API throws
    an exception, we will get the error in JSON format.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在错误处理程序中定义了JSON格式，如果任何REST API抛出异常，我们将以JSON格式获得错误。
- en: Customized exception
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义异常
- en: 'So far, we have only explored application-thrown errors. However, we can define
    our own errors and throw them if needed. The following code will show you how
    to create a customized error and throw it in our application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只探讨了应用程序引发的错误。但是，如果需要，我们可以定义自己的错误并抛出它们。以下代码将向您展示如何在我们的应用程序中创建自定义错误并抛出它：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we created a custom exception by using `RuntimeException`.
    This is just test code to show you how a customized exception works in error handling.
    We will apply this customized exception in our application in upcoming chapters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用“RuntimeException”创建了一个自定义异常。这只是测试代码，向您展示自定义异常在错误处理中的工作原理。我们将在接下来的章节中在我们的应用程序中应用这个自定义异常。
- en: 'If you call the `http://localhost:8080/test/error/1` API, you will get an error
    like the one that follows, which is caused by our condition match:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您调用“http://localhost:8080/test/error/1”API，您将得到以下错误，这是由我们的条件匹配引起的：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned to build a RESTful web service client using `RestTemplate`.
    Also, we covered error handlers and centralized error handlers to handle all error-prone
    scenarios. In upcoming chapters, we will discuss scaling our Spring application
    and talk a little bit about microservices as those topics are growing rapidly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用“RestTemplate”构建RESTful Web服务客户端。此外，我们还涵盖了错误处理程序和集中式错误处理程序来处理所有容易出错的情况。在接下来的章节中，我们将讨论如何扩展我们的Spring应用程序，并简要讨论微服务，因为这些主题正在迅速增长。
