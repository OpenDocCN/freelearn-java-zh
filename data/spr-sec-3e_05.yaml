- en: Authentication with Spring Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Data进行身份验证
- en: In the previous chapter, we covered how to leverage Spring Security's built-in
    JDBC support. In this chapter, we will look at the Spring Data project, and how
    to leverage JPA to perform authentication against a relational database. We will
    also explore how to perform authentication against a document database using MongoDB.
    This chapter's sample code is based on the Spring Security setup from [Chapter
    4](04.html), *JDBC-Based Authentication*, and has been updated to refactor out
    the need for SQL and to use ORM for all database interactions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何利用Spring Security内置的JDBC支持。在本章中，我们将介绍Spring Data项目，以及如何利用JPA对关系数据库进行身份验证。我们还将探讨如何使用MongoDB对文档数据库进行身份验证。本章的示例代码基于第[4章](04.html)的Spring
    Security设置，*基于JDBC的身份验证*，并已更新以去除对SQL的需求，并使用ORM处理所有数据库交互。
- en: 'During the course of this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Some of the basic concepts related to the Spring Data project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring Data项目相关的一些基本概念
- en: Utilizing Spring Data JPA to authenticate against a relational database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Data JPA对关系数据库进行身份验证
- en: Utilizing Spring Data MongoDB to authenticate against a document database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Data MongoDB对文档数据库进行身份验证
- en: How to customize Spring Security for more flexibility when dealing with Spring
    Data integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为处理Spring Data集成提供更多灵活性自定义Spring Security
- en: Understanding the Spring Data project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Spring Data项目
- en: The Spring Data project's mission is to provide a familiar and consistent Spring-based
    programming model for data access, while still retaining the special traits of
    the underlying data provider.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data项目的使命是为数据访问提供熟悉的、一致的基于Spring的编程模型，同时保留底层数据提供商的独特特性。
- en: 'The following are just a few of the powerful features in this Spring Data project:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Spring Data项目的一些强大功能：
- en: Powerful repository and custom object-mapping abstractions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的仓库和自定义对象映射抽象
- en: Dynamic query derivation from repository method names
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从仓库方法名称派生动态查询
- en: Implementation of domain base classes, providing basic properties
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现领域基础类，提供基本属性
- en: Support for transparent auditing (created and last changed)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持透明审计（创建和最后更改）
- en: The ability to integrate custom repository code
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成自定义仓库代码的能力
- en: Easy Spring integration via Java-based configuration and custom XML namespaces
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过基于Java的配置和自定义XML命名空间实现简单的Spring集成
- en: Advanced integration with Spring MVC controllers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring MVC控制器的高级集成
- en: Experimental support for cross-store persistence
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨存储持久性的实验性支持
- en: This project simplifies the use of data access technologies, relational and
    non-relational databases, map-reduce frameworks, and cloud-based data services.
    This umbrella project contains many subprojects that are specific to a given database.
    These projects were developed by working together with many of the companies and
    developers that are behind these exciting technologies. There are also many community
    maintained modules and other related modules including **JDBC Support** and **Apache
    Hadoop**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目简化了数据访问技术、关系型和非关系型数据库、映射框架和基于云的数据服务的使用。这个伞形项目包含了许多特定于给定数据库的子项目。这些项目是在与这些令人兴奋的技术背后的许多公司和开发人员合作开发的。还有许多由社区维护的模块和其他相关模块，包括**JDBC支持**和**Apache
    Hadoop**。
- en: 'The following table describes the main modules that make up the Spring Data
    project:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了组成Spring Data项目的的主要模块：
- en: '| **Module** | **Description** |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **模块** | **描述** |'
- en: '| Spring Data Commons | Applies core Spring concepts all Spring Data projects
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Commons | 将核心Spring概念应用于所有Spring Data项目 |'
- en: '| Spring Data Gemfire | Provides easy configuration and access to Gemfire from
    Spring applications |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Gemfire | 提供从Spring应用程序轻松配置和访问Gemfire的支持 |'
- en: '| Spring Data JPA | Makes it easy to implement JPA-based repositories |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data JPA | 使实现基于JPA的仓库变得容易 |'
- en: '| Spring Data Key Value | Map-based repositories and SPIs, which can easily
    build a Spring Data module for key-value stores |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Key Value | 基于映射的仓库和SPIs，可轻松构建键值存储的Spring Data模块 |'
- en: '| Spring Data LDAP | Provides Spring Data repository support for Spring LDAP
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data LDAP | 为Spring LDAP提供Spring Data仓库支持 |'
- en: '| Spring Data MongoDB | Spring-based, object-document support, and repositories
    for MongoDB |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data MongoDB | 基于Spring的、对象-文档支持以及MongoDB的仓库 |'
- en: '| Spring Data REST | Exports Spring Data repositories as hypermedia-driven
    RESTful resources |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data REST | 将Spring Data存储库导出为基于超媒体的RESTful资源 |'
- en: '| Spring Data Redis | Provides easy configuration and access to Redis from
    Spring applications |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Redis | 为Spring应用程序提供易于配置和访问Redis的功能 |'
- en: '| Spring Data for Apache Cassandra | Spring Data module for Apache Cassandra
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data for Apache Cassandra | 适用于Apache Cassandra的Spring Data模块 |'
- en: '| Spring Data for Apache Solr | Spring Data module for Apache Solr |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data for Apache Solr | 适用于Apache Solr的Spring Data模块 |'
- en: Spring Data JPA
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: The Spring Data JPA project aims to significantly improve the ORM implementation
    of data access layers by reducing the effort to the amount that's actually needed.
    A developer only needs to write repository interfaces, including custom finder
    methods, and Spring will provide the implementation automatically.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA项目旨在显著改进数据访问层的ORM实现，通过减少实际所需的工作量。开发者只需编写存储库接口，包括自定义查找方法，Spring将自动提供实现。
- en: 'The following are just a few of the powerful features specific to the Spring
    Data JPA project:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Spring Data JPA项目的特定强大功能：
- en: Sophisticated support for building repositories based on Spring and JPA
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为基于Spring和JPA构建存储库提供高级支持
- en: Support for **Querydsl** predicates, and thus, type-safe JPA queries
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持**Querydsl**谓词，因此也支持类型安全的JPA查询
- en: Transparent auditing of domain classes
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对领域类进行透明审计
- en: Pagination support, dynamic query execution, and the ability to integrate custom
    data access code
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分页支持、动态查询执行以及集成自定义数据访问代码的能力
- en: Validation of `@Query` annotated queries at bootstrap time
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动时验证`@Query`注解的查询
- en: Support for XML based entity mapping
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持基于XML的实体映射
- en: The `JavaConfig` based repository configuration by introducing `@EnableJpaRepositories`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过引入`@EnableJpaRepositories`实现基于`JavaConfig`的存储库配置
- en: Updating our dependencies
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的依赖项
- en: 'We have already included all the dependencies you need for this chapter, so
    you will not need to make any updates to your `build.gradle` file. However, if
    you are just adding Spring Data JPA support to your own application, you need
    to add `spring-boot-starter-data-jpa` as a dependency in the `build.gradle` file,
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经包括了本章所需的所有依赖项，所以您不需要对`build.gradle`文件进行任何更新。然而，如果您只是将Spring Data JPA支持添加到您自己的应用程序中，您需要在`build.gradle`文件中添加`spring-boot-starter-data-jpa`作为依赖项，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice we removed the `spring-boot-starter-jdbc` dependency. The `spring-boot-starter-data-jpa`
    dependency will contain all the dependencies needed to wire our domain objects
    to our embedded database with JPA.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们移除了`spring-boot-starter-jdbc`依赖。`spring-boot-starter-data-jpa`依赖将包含所有必要的依赖项，以便将我们的领域对象与使用JPA的嵌入式数据库连接。
- en: Updating the JBCP calendar to use Spring Data JPA
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将JBCP日历更新为使用Spring Data JPA
- en: To get familiar with Spring Data, we will first convert the JBCP calendar SQL
    to leverage ORM, using the Spring Data JPA starter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉Spring Data，我们首先将JBCP日历SQL转换为使用ORM，使用Spring Data JPA启动器。
- en: 'Creating and maintaining SQL can be quite tedious. In the previous chapters,
    when we wanted to create a new `CalendarUser` table in the database, we had to
    create a fair amount of boilerplate code, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和维护SQL可能相当繁琐。在前几章中，当我们想在数据库中创建一个新的`CalendarUser`表时，我们必须编写大量的样板代码，如下所示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To create this object, we technically need 12 lines of code to perform the operation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这个对象，技术上我们需要12行代码来执行操作。
- en: 'Now, with Spring Data JPA, the same implementation can be reduced to the following
    code snippet:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用Spring Data JPA，相同的实现可以减少到以下代码片段：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, to create this object using JPA, we technically need five lines of code
    to perform the operation. We now need less than half the amount of code to perform
    the same operation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用JPA创建这个对象，技术上我们需要五行代码来执行操作。我们现在需要的代码量不到原来执行相同操作的一半。
- en: Reconfiguring the database configuration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新配置数据库配置
- en: Firstly, we will convert the current JBCP calendar project. Let's begin by reconfiguring
    the database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将转换当前的JBCP日历项目。让我们先重新配置数据库。
- en: We can begin by removing the `DataSourceConfig.java` file, as we will be leveraging
    Spring Boot's built-in support for an embedded H2 database. We will also need
    to remove the reference to `DataSourceConfig.java` in the `JavaConfig.java` file,
    as there is currently a reference to `JavaConfig.java` inside the `@Import` annotation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先删除 `DataSourceConfig.java` 文件，因为我们将会利用 Spring Boot 对嵌入式 H2 数据库的内置支持。我们还需要删除
    `JavaConfig.java` 文件中对 `DataSourceConfig.java` 的引用，因为目前 `@Import` 注解中有对 `JavaConfig.java`
    的引用。
- en: Initializing the database
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化数据库
- en: 'We can now remove the `src/main/resources/database` directory and all contents
    in that directory. This directory contains several `.sql` files, and we will consolidate
    and move them to the next step:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以删除 `src/main/resources/database` 目录及其目录下的所有内容。这个目录包含几个 `.sql` 文件，我们将合并并将它们移动到下一步：
- en: 'Now, we need to create a `data.sql` file that will contain our seed data, as
    follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个 `data.sql` 文件，该文件将包含我们的种子数据，如下所示：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Take a look at the following SQL statement, depicting the password for `user1`:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，描述了 `user1` 的密码：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Take a look at the following SQL statement, depicting the password for `admin1`
    :'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，描述了 `admin1` 的密码：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Take a look at the following SQL statement, depicting the password for `user2`:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，描述了 `user2` 的密码：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Take a look at the following SQL statement, depicting the user roles:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，描述用户角色：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, `user1` has one role:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，`user1` 有一个角色：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, `admin1` has two roles:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，`admin1` 有两个角色：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Take a look at the following SQL statement, depicting events:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，描述事件：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we can update the application properties to define our embedded database
    properties in the `src/main/resources/application.yml` file as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更新应用程序属性，在`src/main/resources/application.yml`文件中定义嵌入式数据库属性，如下所示：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this point, we have removed the old database configuration and added the
    new configuration. The application will not work at this point, but this can still
    be considered a marker point before we continue on to the next steps of conversion.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们已经移除了旧的数据库配置并添加了新的配置。应用程序在此阶段无法运行，但仍然可以将其视为我们在转换下一步之前的标记点。
- en: Your code should now look like `calendar05.01-calendar` .
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像 `calendar05.01-calendar`。
- en: Refactoring from SQL to ORM
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL到ORM的重构
- en: Refactoring from an SQL to an ORM implementation is simpler than you might think.
    Most of the refactoring involves the removal of excess code in the form of an
    SQL. In this next section, we will refactor our SQL implementation to a JPA implementation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQL转换到ORM实现的重构比你想象的要简单。重构的大部分工作涉及删除以SQL形式存在的冗余代码。在下一部分，我们将把SQL实现重构成JPA实现。
- en: In order for JPA to map our domain objects to our database, we need to perform
    some mapping on our domain objects.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 JPA 将我们的领域对象映射到数据库，我们需要对我们的领域对象进行一些映射。
- en: Mapping domain objects using JPA
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JPA 映射领域对象
- en: 'Take a look at the following steps to learn about mapping the domain objects:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤，了解如何映射领域对象：
- en: 'Let''s begin by mapping our `Event.java` file so all the domain objects will
    use JPA, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先映射我们的 `Event.java` 文件，以便所有领域对象都将使用 JPA，如下所示：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We need to create a `Role.java` file with the following contents:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个 `Role.java` 文件，内容如下：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `Role` object will be used to map authorities to our `CalendarUser` table.
    Let''s map our `CalendarUser.java` file, now that we have a `Role.java` file:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Role` 对象将用于将权限映射到我们的 `CalendarUser` 表。现在我们已经有一个 `Role.java` 文件，让我们来映射我们的 `CalendarUser.java`
    文件：'
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At this point, we have mapped our domain objects with the required JPA annotation,
    including `@Entity` and `@Table` to define the RDBMS location, as well as structural,
    reference, and association mapping annotations.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们已经用所需的 JPA 注解映射了我们的领域对象，包括 `@Entity` 和 `@Table` 以定义 RDBMS 的位置，以及结构、引用和关联映射注解。
- en: The application will not work at this point, but this can still be considered
    a marker point before we continue on to the next steps of conversion.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，应用程序将无法运行，但这仍然可以被视为我们在继续转换下一步之前的标记点。
- en: You should be starting with the source from `chapter05.02-calendar`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该从 `chapter05.02-calendar` 的源代码开始。
- en: Spring Data repositories
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data 仓库
- en: 'We will now add the required interfaces for Spring Data to map our required
    CRUD operations to our embedded database, by performing the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过执行以下步骤向 Spring Data 添加所需接口，以将我们所需的 CRUD 操作映射到嵌入式数据库：
- en: 'We begin by adding a new interface in a new package, which will be `com.packtpub.springsecurity.repository`.
    The new file will be called `CalendarUserRepository.java`, as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先在新的包中添加一个新的接口，该包将是`com.packtpub.springsecurity.repository`。新文件将称为`CalendarUserRepository.java`，如下所示：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will allow for standard CRUD operations such as `find()`, `save()`, and
    `delete()` on our `CalendarUser` objects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们对`CalendarUser`对象执行标准的CRUD操作，如`find()`、`save()`和`delete()`。
- en: 'We can now continue by adding a new interface in the same repository package,
    which will be `com.packtpub.springsecurity.repository`, and the new file will
    be called `EventRepository.java`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以继续在同一存储库包中添加一个新的接口，该包将是`com.packtpub.springsecurity.repository`，新文件将称为`EventRepository.java`：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will allow for standard CRUD operations such as `find()`, `save()`, and
    `delete()` on our `Event` objects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们对`Event`对象执行标准的CRUD操作，如`find()`、`save()`和`delete()`。
- en: 'Finally, we will be adding a new interface in the same repository package,
    which will be `com.packtpub.springsecurity.repository`, and the new file will
    be called `RoleRepository.java`. This `CrudRepository` interface will be used
    to manage the `Role` object for our security roles associated with a given `CalendarUser`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在同一存储库包中添加一个新的接口，该包将是`com.packtpub.springsecurity.repository`，新文件将称为`RoleRepository.java`。这个`CrudRepository`接口将用于管理与给定的`CalendarUser`相关的安全角色的`Role`对象：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will allow for standard CRUD operations such as `find()`, `save()`, and
    `delete()` on our `Role` objects.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们对`Role`对象执行标准的CRUD操作，如`find()`、`save()`和`delete()`。
- en: Data access objects
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据访问对象
- en: 'We need to refactor the `JdbcEventDao.java` file with a new name, `JpaEventDao.java`,
    so we can replace the JDBC SQL code with our new Spring Data code. Let''s take
    a look at the following steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`JdbcEventDao.java`文件重命名为`JpaEventDao.java`，以便我们可以用新的Spring Data代码替换JDBC
    SQL代码。让我们来看看以下步骤：
- en: 'Specifically, we need to add the new `EventRepository` interface, and replace
    the SQL code with the new ORM repository, as shown in the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具体来说，我们需要添加新的`EventRepository`接口，并用新的ORM存储库替换SQL代码，如下所示：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'At this point, we need to refactor the DAO classes to support the new `CrudRepository`
    interfaces we have created. Let''s begin with refactoring the `JdbcCalendarUserDao.java`
    file. First, we can rename the file to `JpaCalendarUserDao.java` to indicate that
    this is using JPA, and not standard JDBC:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，我们需要重构DAO类以支持我们创建的新`CrudRepository`接口。让我们从重构`JdbcCalendarUserDao.java`文件开始。首先，我们可以将文件重命名为`JpaCalendarUserDao.java`，以表示此文件使用JPA，而不是标准的JDBC：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see in the preceding code, the update fragments to leverage the amount
    needed for JPA are quite a bit less than the required code for JDBC. This means
    we can focus on business logic and not worry about the plumbing.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的代码中所看到的，使用JPA所需的更新片段要比使用JDBC所需的代码少得多。这意味着我们可以专注于业务逻辑，而不必担心管道问题。
- en: 'We continue by refactoring the `JdbcEventDao.java` file. First, we can rename
    the file to `JpaEventDao.java`, to indicate that this is using JPA and not standard
    JDBC, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们继续重构`JdbcEventDao.java`文件。首先，我们可以将文件重命名为`JpaEventDao.java`，以表示此文件使用JPA，而不是标准的JDBC，如下所示：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, the update fragments to leverage the JPA repositories
    have been placed in bold, so now the `Event` and `CalendarUser` objects are mapped
    to our underlying RDBMS.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用JPA存储库的更新片段已加粗，因此现在`Event`和`CalendarUser`对象被映射到我们的底层RDBMS。
- en: The application will not work at this point, but this can still be considered
    a marker point before we continue on to the next steps of conversion.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此时应用程序无法工作，但仍然可以认为这是一个标记点，在我们继续转换的下一步之前。
- en: At this point, your source code should look the same as `chapter05.03-calendar`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，你的源代码应该与`chapter05.03-calendar`相同。
- en: Application services
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用服务
- en: The only thing left to do is configure Spring Security to use the new artifacts.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下要做的唯一事情是配置Spring Security以使用新的工件。
- en: 'We need to edit the `DefaultCalendarService.java` file and only remove the
    remaining code that was used to add `USER_ROLE` to any new `User` object that
    was created as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑`DefaultCalendarService.java`文件，并只删除用于向新创建的`User`对象添加`USER_ROLE`的剩余代码，如下所示：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The UserDetailsService object
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户详细信息服务对象
- en: 'Let''s take a look at the following steps to add the `UserDetailsService` object:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看以下步骤，以添加`UserDetailsService`对象：
- en: 'Now, we need to add a new implementation of the `UserDetailsService` object,
    we will use our `CalendarUserRepository` interface to authenticate and authorize
    users again, with the same underlying RDBMS, but using our new JPA implementation
    as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加一个新的`UserDetailsService`对象的实现，我们将使用我们的`CalendarUserRepository`接口再次对用户进行身份验证和授权，使用相同的底层RDBMS，但使用我们新的JPA实现，如下所示：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we have to configure Spring Security to use our custom `UserDetailsService`
    object, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要配置Spring Security以使用我们自定义的`UserDetailsService`对象，如下所示：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Start the application and try logging in to the application. Any of the configured
    users can now log in and create new events. You can also create a new user and
    will be able to log in as the new user immediately.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序并尝试登录应用程序。现在任何配置的用户都可以登录并创建新事件。您还可以创建新用户，并能够立即以新用户身份登录。
- en: Your code should now look like `calendar05.04-calendar`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`calendar05.04-calendar`。
- en: Refactoring from an RDBMS to a document database
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从关系型数据库（RDBMS）重构为文档数据库
- en: Luckily, with the Spring Data project, once we have a Spring Data implementation,
    we have most of the difficult work completed. Now, there are only a few implementation-specific
    changes that need to be refactored.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有了Spring Data项目，一旦我们有了Spring Data实现，大部分困难的工作已经完成。现在，只需要进行一些实现特定的重构更改。
- en: Document database implementation with MongoDB
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB的文档数据库实现
- en: We are now going to work on refactoring our RDBMS implementation-with JPA as
    our ORM provider-into a document database implementation, using MongoDB as our
    underlying database provider. MongoDB (from humongous) is a free and open source
    cross-platform document-oriented database program. Classified as a NoSQL database
    program, MongoDB uses JSON-like documents with schemas. MongoDB is developed by
    MongoDB Inc. and is located at [https://github.com/mongodb/mongo](https://github.com/mongodb/mongo).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将着手将我们的RDBMS实现（使用JPA作为我们的ORM提供者）重构为使用MongoDB作为底层数据库提供者的文档数据库实现。MongoDB（来自humongous）是一个免费且开源的跨平台面向文档的数据库程序。它被归类为一个NoSQL数据库程序，MongoDB使用类似JSON的文档和模式。MongoDB由MongoDB
    Inc.开发，位于[https://github.com/mongodb/mongo](https://github.com/mongodb/mongo)。
- en: Updating our dependencies
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的依赖项
- en: 'We have already included all of the dependencies you need for this chapter,
    so you will not need to make any updates to your `build.gradle` file. However,
    if you are just adding Spring Data JPA support to your own application, you will
    need to add `spring-boot-starter-data-jpa` as a dependency in the `build.gradle`
    file, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经包含了本章所需的所有依赖项，所以您不需要对`build.gradle`文件进行任何更新。然而，如果您只是将Spring Data JPA支持添加到您自己的应用程序中，您需要在`build.gradle`文件中添加`spring-boot-starter-data-jpa`作为依赖项，如下所示：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice we removed the `spring-boot-starter-jpa` dependency. The `spring-boot-starter-data-mongodb`
    dependency will contain all the dependencies needed to wire our domain objects
    to our embedded MongoDB database, with a mix of Spring and MongoDB annotations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经移除了`spring-boot-starter-jpa`依赖。`spring-boot-starter-data-mongodb`依赖将包含所有需要将我们的领域对象连接到我们的嵌入式MongoDB数据库的依赖项，同时使用Spring和MongoDB注解的混合。
- en: We also added the **Flapdoodle** embedded MongoDB database, but this is only
    meant for testing and demonstration purposes. Embedded MongoDB will provide a
    platform neutral way for running MongoDB in unit tests. This embedded database
    is located at [https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo](https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了**Flapdoodle**嵌入式MongoDB数据库，但这只适用于测试和演示目的。嵌入式MongoDB将为单元测试提供一个跨平台的MongoDB运行平台。这个嵌入式数据库位于[https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo](https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo)。
- en: Reconfiguring the database configuration in MongoDB
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MongoDB中重新配置数据库配置
- en: 'First, we will begin to convert the current JBCP calendar project. Let''s begin
    by reconfiguring the database to use the Flapdoodle embedded MongoDB database.
    Previously, when we updated the dependencies for this project, we added a Flapdoodle
    dependency that gave the project an embedded MongoDB database which we could automatically
    use instead of installing a full version of MongoDB installation. To stay consistent
    with the JBCP application, we need to change the name of our database. With Spring
    Data, we can change the MongoDB configuration using the YAML configuration, as
    follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始转换当前的JBCP日历项目。让我们先重新配置数据库以使用Flapdoodle嵌入式MongoDB数据库。之前，当我们更新这个项目的依赖时，我们添加了一个Flapdoodle依赖项，该项目得到了一个嵌入式MongoDB数据库，我们可以自动使用它，而不是安装MongoDB的完整版本。为了与JBCP应用程序保持一致，我们需要更改我们数据库的名称。使用Spring
    Data，我们可以使用YAML配置来更改MongoDB配置，如下所示：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The most important configuration for our current requirements is changing the
    database name to `dataSource`, which is the same name we have been using throughout
    this book.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们当前需求最重要的配置是更改数据库名称为`dataSource`，这个名称与本书中我们一直在使用的名称相同。
- en: Initializing the MongoDB database
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化MongoDB数据库
- en: 'With the JPA implementation, we used the `data.sql` file to initialize the
    data in our database. For MongoDB implementation, we can remove the `data.sql`
    file and replace it with a Java configuration file, which we will call `MongoDataInitializer.java`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JPA实现时，我们使用了`data.sql`文件来初始化数据库中的数据。对于MongoDB实现，我们可以删除`data.sql`文件，并用我们称之为`MongoDataInitializer.java`的Java配置文件来替代它：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will be executed at load time and will seed the same data into our MongoDB
    as we did with our H2 database.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在加载时执行，并将将相同的数据种子到我们的MongoDB中，就像我们使用我们的H2数据库一样。
- en: Mapping domain objects with MongoDB
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB映射领域对象
- en: 'Let''s begin by mapping our `Event.java` file so that each of the domain objects
    are saved as a document in our MongoDB database. This can be done by performing
    the following steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将我们的`Event.java`文件映射到领域对象，以便将每个领域对象保存为我们的MongoDB数据库中的文档。这可以通过执行以下步骤来实现：
- en: 'With a document database, domain object mapping is a little different, but
    the same ORM concepts hold true. Let''s begin with the Event JPA implementation,
    then take a look how we can transform our `Entity` to document mapping:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档数据库中，领域对象映射有所不同，但相同的ORM概念仍然适用。让我们从Event JPA实现开始，然后看看如何将我们的`Entity`转换为文档映射：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In Entity-based JPA mapping, we needed to use six different annotations to
    create the required mapping. Now, with document-based MongoDB mapping, we need
    to change all the previous mapping annotations. Here is a fully refactored example
    of our `Event.java` file:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于实体的JPA映射中，我们需要使用六个不同的注解来创建所需的映射。现在，在基于文档的MongoDB映射中，我们需要更改所有的先前映射注解。下面是我们完全重构的`Event.java`文件的示例：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the preceding code, we can see a following few notable changes:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们可以看到一些值得注意的更改：
- en: First, we declare the class to be of type `@o.s.d.mongodb.core.mapping.Document`,
    and provide a collection name for these documents.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要声明类为`@o.s.d.mongodb.core.mapping.Document`类型，并为这些文档提供集合名称。
- en: Next, the `Event` class must implement the `o.s.d.domain.Persistable` interface,
    providing the primary key type (`Integer`) for our document.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，`Event`类必须实现`o.s.d.domain.Persistable`接口，为我们的文档提供主键类型（`Integer`）。
- en: Now, we change the annotation for our domain ID to `@o.s.d.annotation.Id`, to
    define the domain primary key.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将我们的领域ID注解更改为`@o.s.d.annotation.Id`，以定义领域主键。
- en: Previously, we had to map our owner and attendee `CalendarUser` object to two
    different mapping annotations.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前，我们必须将我们的所有者和参与者`CalendarUser`对象映射到两个不同的映射注解。
- en: Now, we only have to define the two types to be of type `@o.s.d.mongodb.core.mapping.DBRef`,
    and allow Spring Data to take care of the underlying references.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需要定义两种类型为`@o.s.d.mongodb.core.mapping.DBRef`，并允许Spring Data处理底层引用。
- en: The final annotation we have to add defines a specific constructor to be used
    for new documents to be added to our document, by using the `@o.s.d.annotation.PersistenceConstructor`
    annotation.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须添加的最后一个注解定义了一个特定的构造函数，用于将新文档添加到我们的文档中，通过使用`@o.s.d.annotation.PersistenceConstructor`注解。
- en: 'Now that we have reviewed the changes needed to refactor from JPA to MongoDB,
    let''s refactor the other domain object starting with the `Role.java` file, as
    follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了从JPA转换到MongoDB所需的更改，让我们从`Role.java`文件开始转换另一个领域对象：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The final domain object that we need to refactor is our `CalendarUser.java`
    file. After all, this is the most complex domain object we have in this application:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要重构的最后一个领域对象是我们的`CalendarUser.java`文件。毕竟，这是这个应用程序中最复杂的领域对象：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, the effort to refactor our domain objects from JPA to MongoDB
    is fairly simple, and requires less annotation configuration than the JPA configuration.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，将我们的领域对象从JPA重构为MongoDB的努力相当简单，并且比JPA配置需要的注解配置要少。
- en: Spring Data repositories of MongoDB
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data对MongoDB的仓库
- en: 'We now have only a few changes to make to refactor from a JPA implementation
    to a MongoDB implementation. We will begin by refactoring our `CalendarUserRepository.java`
    file by changing the interface that our repository extends, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要对从JPA实现到MongoDB实现进行少量更改即可重构。我们将从重构我们的`CalendarUserRepository.java`文件开始，通过更改我们仓库所扩展的接口，如下所示：
- en: '[PRE31]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This same change needs to be applied to the `EventRepository.java` file and
    the `RoleRepository.java` files accordingly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相同的更改需要应用到`EventRepository.java`文件和`RoleRepository.java`文件上。
- en: If you need help with any of these changes, remember the source for `chapter05.05`
    will have the completed code available for your reference.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要帮助进行这些更改，请记住`chapter05.05`的源代码将有完整的代码供您参考。
- en: Data access objects in MongoDB
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB中的数据访问对象
- en: 'In our `EventDao` interface, we are required to create a new `Event` object.
    With JPA, we can have our object ID automatically generated. With MongoDB, there
    are several ways to assign primary key identifiers, but for the sake of this demonstration,
    we are just going to use an atomic counter, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`EventDao`接口中，我们需要创建一个新的`Event`对象。使用JPA，我们的对象ID可以自动生成。使用MongoDB，有几种方式可以分配主键标识符，但为了这个演示，我们只需使用原子计数器，如下所示：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'There was technically no change to our `CalendarUserDao` object, but for consistency
    in this book, we renamed the implementation file to denote the use of `Mongo`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，我们的`CalendarUserDao`对象没有变化，但为了本书的一致性，我们将实现文件的名称更改为表示使用`Mongo`：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: There are no other **Data Access Objects** (**DAO**) changes required for this
    refactoring example.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个重构示例，没有其他**数据访问对象**（**DAO**）的更改需求。
- en: Go ahead and start the application, and it will behave just as before. Try to
    log in as `user1` and `admin1`, and test it to ensure that both users can add
    new events to the system, to ensure the mapping is correct for the entire application.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序，它将像以前一样运行。尝试以`user1`和`admin1`的身份登录，并测试以确保两个用户都可以向系统添加新事件，以确保整个应用程序的映射正确。
- en: You should be starting with the source from `chapter05.05-calendar`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从`chapter05.05-calendar`的源代码开始。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have looked at the power and flexibility of the Spring Data project and explored
    several aspects related to application development, as well as its integration
    with Spring Security. In this chapter, we covered the Spring Data project and
    a few of its capabilities. We also saw the refactoring process to convert from
    legacy JDBC code using SQL, to ORM with JPA, and from a JPA implementation with
    Spring Data to a MongoDB implementation using Spring Data. We also covered configuring
    Spring Security to leverage an ORM `Entity` in a relational database and in a
    document database.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了Spring Data项目的强大和灵活性，以及与应用程序开发相关的几个方面，还包括了与Spring Security的集成。在本章中，我们覆盖了Spring
    Data项目及其部分功能。我们还看到了从使用SQL的遗留JDBC代码到使用JPA的ORM，以及从使用Spring Data的JPA实现到使用Spring Data的MongoDB实现的重构过程。我们还覆盖了配置Spring
    Security以利用关系数据库中的ORM `Entity`和文档数据库中的配置。
- en: In the next chapter, we will explore Spring Security's built-in support for
    LDAP-based authentication.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Spring Security对基于LDAP的认证的内置支持。
