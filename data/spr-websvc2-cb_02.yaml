- en: Chapter 2. Building Clients for SOAP Web-Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。为SOAP Web服务构建客户端
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up a Web-Service client development environment within Eclipse
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中设置Web服务客户端开发环境
- en: Setting up a Web-Service client development environment using Maven
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven设置Web服务客户端开发环境
- en: Creating a Web-Service client on HTTP transport
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在HTTP传输上创建Web服务客户端
- en: Creating a Web-Service client on JMS transport
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JMS传输上创建Web服务客户端
- en: Creating a Web-Service client on E-mail transport
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在E-mail传输上创建Web服务客户端
- en: Creating a Web-Service client on XMPP transport
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在XMPP传输上创建Web服务客户端
- en: Creating a Web-Service client using XPath expression
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XPath表达式创建Web服务客户端
- en: Creating a Web-Service client for WS-Addressing endpoint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为WS-Addressing端点创建Web服务客户端
- en: Transforming a Web-Service message using XSLT
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XSLT转换Web服务消息
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Using Java API, such as `SAAJ`, client-side SOAP messages can be generated and
    transmitted to/from a Web-Service. However, it requires an extra amount of coding
    and knowledge about SOAP messages.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Java API，如`SAAJ`，可以生成客户端SOAP消息，并将其传输到/从Web服务。但是，这需要额外的编码和关于SOAP消息的知识。
- en: The package `org.springframework.ws.client.core` contains the core functionality
    of the client-side API, which facilitates calling the server-side Web-Service.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.ws.client.core`包含了客户端API的核心功能，可以简化调用服务器端Web服务。'
- en: APIs in this package provide template classes like `WebServiceTemplate` that
    simplifies the use of Web-Services. Using these templates, you will be able to
    create a Web-Service client over various transport protocols (HTTP, JMS, e-mail,
    XMPP, and so on) and send/receive XML messages as well as marshal objects to XML
    before sending them. Spring also provides classes, such as `StringSource` and
    `Result`, which simplify passing and retrieving XML messages while using `WebServiceTemplate`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包中的API提供了像`WebServiceTemplate`这样的模板类，简化了Web服务的使用。使用这些模板，您将能够在各种传输协议（HTTP、JMS、电子邮件、XMPP等）上创建Web服务客户端，并发送/接收XML消息，以及在发送之前将对象编组为XML。Spring还提供了一些类，如`StringSource`和`Result`，简化了在使用`WebServiceTemplate`时传递和检索XML消息。
- en: In this chapter, the first two recipes explain how to set up the environment
    for calling a Web-Service client using Eclipse and Maven.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，前两个教程解释了如何在Eclipse和Maven中设置调用Web服务客户端的环境。
- en: Then we will discuss the usage of `WebServiceTemplate` to create a Web-Service
    client over various transport protocols (HTTP, JMS, e-mail, XMPP, and so on).
    In addition to this, the recipe *Setting up a Web-Service client using an XPath
    expression* explains how to retrieve data from an XML message. Finally, in the
    last recipe, *Transforming a Web-Service message using XSLT*, how to convert the
    XML messages into different formats between the client and server is presented.
    To set up a Web-Service server, some recipes from [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*, are used and a separate client
    project is created that calls the server-side Web-Service.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将讨论如何使用`WebServiceTemplate`在各种传输协议（HTTP、JMS、电子邮件、XMPP等）上创建Web服务客户端。除此之外，*使用XPath表达式设置Web服务客户端*这个教程解释了如何从XML消息中检索数据。最后，在最后一个教程*使用XSLT转换Web服务消息*中，介绍了如何在客户端和服务器之间将XML消息转换为不同格式。为了设置Web服务服务器，使用了[第1章](ch01.html
    "第1章。构建SOAP Web服务")中的一些教程，*构建SOAP Web服务*，并创建了一个单独的客户端项目，调用服务器端的Web服务。
- en: Setting up a Web-Service client development environment within Eclipse
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Eclipse中设置Web服务客户端开发环境
- en: A Web-Service client in the simplest form is a Java class that calls a server-side
    Web-Service. In this recipe, setting up the environment to call a server-side
    Web-Service is presented. Here, a client-side Java class calls a Web-Service on
    the server in two forms. The first one is a Java class that calls a Web-Service
    in the main method of the class. The second one uses the JUnit test class to call
    the server-side Web-Service.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的Web服务客户端是调用服务器端Web服务的Java类。在这个教程中，介绍了设置调用服务器端Web服务的环境。在这里，客户端的Java类以两种形式调用服务器端的Web服务。第一种是在类的主方法中调用Web服务的Java类。第二种是使用JUnit测试类调用服务器端的Web服务。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is similar to the recipe *Using Maven for building and running a
    Spring-WS*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程类似于[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*使用Maven构建和运行Spring-WS*这个教程，*构建SOAP
    Web服务*。
- en: Download and install the Eclipse IDE for Java EE developers Helios.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Java EE开发人员Helios的Eclipse IDE。
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.1` (for server-side
    Web-Service), with the following Maven dependencies:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个教程中，项目的名称是`LiveRestaurant_R-2.1`（服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`jdom-1.0.jar`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdom-1.0.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`jaxen-1.1.jarb`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jaxen-1.1.jarb`'
- en: '`xalan-2.7.0.jar`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xalan-2.7.0.jar`'
- en: 'The `LiveRestaurant_R-2.1-Client` (for the client side) has the following Maven
    dependencies:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-2.1-Client`（客户端）具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`jdom-1.0.jar`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdom-1.0.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`jaxen-1.1.jar`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jaxen-1.1.jar`'
- en: '`xalan-2.7.0.jar`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xalan-2.7.0.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: 'Run the following Maven command to be able to import the client projects into
    Eclipse (for the client side):'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令，以便将客户端项目导入Eclipse（客户端）：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the recipe *Handling the incoming XML messages using JDOM*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程使用了[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*使用JDOM处理传入的XML消息*这个教程，*构建SOAP
    Web服务*作为服务器端项目。
- en: Run a Java class that calls a Web-Service in the main method.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主方法中运行调用Web服务的Java类。
- en: Import `LiveRestaurant_R-2.1-Client` into the Eclipse workspace by going to
    **File** | **Import** | **General** | **Existing projects into workspace** | **LiveRestaurant_R-2..1-Client**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到**File** | **Import** | **General** | **Existing projects into workspace**
    | **LiveRestaurant_R-2..1-Client**，将`LiveRestaurant_R-2.1-Client`导入Eclipse工作区。
- en: 'Go to the folder `LiveRestaurant_R-2.1` in the command prompt and run the server
    using the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到命令提示符中的`LiveRestaurant_R-2.1`文件夹，并使用以下命令运行服务器：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Select the class `OrderServiceClient` in the folder `src/main/java` from the
    package `com.packtpub.liverestaurant.client` and select **Run As** | **Java Application**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.liverestaurant.client`包的`src/main/java`文件夹中选择`OrderServiceClient`类，然后选择**Run
    As** | **Java Application**。
- en: 'The following is the console output on running the Java class on the client
    side:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端上运行Java类时的控制台输出如下：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run a JUnit test case using Eclipse.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中运行一个JUnit测试用例。
- en: Select the class `OrderServiceClientTest` in the folder `src/test/java` from
    the package `com.packtpub.liverestaurant.client` and select **Run As** | **Junit
    Test**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.liverestaurant.client`包的`src/test/java`文件夹中选择`OrderServiceClientTest`类，然后选择**Run
    As** | **Junit Test**。
- en: 'The following is the console output on running the JUnit test case (you can
    click on the **JUnit** tab, adjacent to the **Console** tab, to see whether the
    test case has succeeded or not):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行JUnit测试用例时的控制台输出如下（您可以单击**Console**标签旁边的**JUnit**标签，查看测试用例是否成功）：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To pass parameters or customize the settings for a test, select the test unit
    class, **Run As** | **Run Configuration** |, and double-click on **JUnit** on
    the left pane.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递参数或自定义测试的设置，请选择测试单元类，**Run As** | **Run Configuration** |，然后在左窗格上双击**JUnit**。
- en: Then you will be able to customize the passed parameters or the settings and
    run the client.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将能够自定义传递的参数或设置并运行客户端。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'When a Java class that calls a Web-Service in the main method is run, Eclipse
    runs the following command internally using the following Java class path:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行调用Web服务的Java类的主方法时，Eclipse通过以下Java类路径内部运行以下命令：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When a JUnit test case is run, Eclipse runs a test case using the JUnit framework
    by internally calling the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行JUnit测试用例时，Eclipse通过内部调用以下命令来运行JUnit框架的测试用例：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipes *Using Maven for building and running a Spring-WS project* and *Handling
    the incoming XML messages using JDOM*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "Chapter 1. Building SOAP Web-Services")中讨论的*使用Maven构建和运行Spring-WS项目*和*使用JDOM处理传入的XML消息*配方，
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的*使用HTTP传输创建Web服务客户端*配方。
- en: Setting up a Web-Service client development environment using Maven
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven设置Web服务客户端开发环境
- en: Maven supports running the main method of a class using command prompt as well
    as a JUnit test case.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Maven支持使用命令提示符运行类的主方法以及JUnit测试用例。
- en: In this recipe, setting up a Maven environment to call a client-side Web-Service
    is explained. Here, a client-side Java code calls a Web-Service on the server
    in two forms. The first one is a Java class that calls a Web-Service in the main
    method of the class. The second one uses JUnit to call a server-side Web-Service.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，解释了设置Maven环境以调用客户端Web服务。在这里，客户端Java代码以两种形式调用服务器上的Web服务。第一种是在类的主方法中调用Web服务的Java类。第二种使用JUnit调用服务器端Web服务。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.2` (for a server-side
    Web-Service) with the following Maven dependencies:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-2.2`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.2-Client`
    (for the client-side Web-Service):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-2.2-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the recipe *Handling the incoming XML messages using DOM*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了[第1章](ch01.html "Chapter 1. Building SOAP Web-Services")中讨论的*使用DOM处理传入的XML消息*配方，*构建SOAP
    Web服务*作为服务器端项目。
- en: Run a Java class that calls a Web-Service in the main method.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主方法中运行调用Web服务的Java类。
- en: 'Go to the folder `LiveRestaurant_R-2.2` in the command prompt and run the server
    using the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到命令提示符中的`LiveRestaurant_R-2.2`文件夹，并使用以下命令运行服务器：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Go to the folder `LiveRestaurant_R-2.2-Client` and run the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到文件夹`LiveRestaurant_R-2.2-Client`并运行以下命令：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the output when the Maven command is run on the client side:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端上运行Maven命令时，以下是输出：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run a JUnit test case using Maven.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Maven运行JUnit测试用例。
- en: 'Go to the folder `LiveRestaurant_R-2.2` from the command prompt and run the
    server using the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到命令提示符中的`LiveRestaurant_R-2.2`文件夹，并使用以下命令运行服务器：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Go to the folder `LiveRestaurant_R-2.2-Client` and run the following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到文件夹`LiveRestaurant_R-2.2-Client`并运行以下命令：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output after running the JUnit test case using Maven on the client
    side:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端上使用Maven运行JUnit测试用例后，以下是输出：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Run a Java class that calls a Web-Service in the main method, `exec-maven-plugin`,
    set in the `pom.xml` file. The Java class tells Maven to run `mainClass` of `OrderServiceClient:`
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pom.xml`文件中设置`exec-maven-plugin`，告诉Maven运行`OrderServiceClient`的`mainClass`的Java类。该Java类告诉Maven运行`OrderServiceClient`的`mainClass`：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Maven runs the following command internally using the project class path:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Maven通过项目类路径内部运行以下命令：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To set up and run a JUnit test case in Maven, the test class `OrderServiceClientTest`
    should be included in the folder `src/test/java` and the test class name should
    end with `Test` `(OrderServiceClientTest)`. The command `mvn clean package` runs
    all the test cases in the `src/test/java` folder (internal Maven calls):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Maven中设置和运行JUnit测试用例，测试类 `OrderServiceClientTest` 应该包含在文件夹 `src/test/java`
    中，并且测试类名称应该以 `Test` 结尾（`OrderServiceClientTest`）。命令 `mvn clean package` 运行 `src/test/java`
    文件夹中的所有测试用例（内部Maven调用）：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipes *Using Maven for building and running a Spring-WS project* and *Handling
    the incoming XML messages using JDOM*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章 构建SOAP Web服务")中讨论的*使用Maven构建和运行Spring-WS项目*和*使用JDOM处理传入的XML消息*的配方，*构建SOAP
    Web服务*。
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的*在HTTP传输上创建Web服务客户端*的配方。
- en: Creating a Web-Service client on HTTP transport
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTTP传输上创建Web服务客户端
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    from the client side over the HTTP transport.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，`WebServiceTemplate` 用于通过HTTP传输从客户端发送/接收简单的XML消息。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.3` (for server-side
    Web-Service) with the following Maven dependencies:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是 `LiveRestaurant_R-2.3`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.3-Client`
    (for the client-side Web-Service):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `LiveRestaurant_R-2.3-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'This recipe uses the recipe *Setting up an endpoint by annotating the payload-root*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project. Here is how you set up the client
    side:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了在[第1章](ch01.html "第1章 构建SOAP Web服务")中讨论的*通过注释负载根来设置端点*的配方，*构建SOAP Web服务*，作为服务器端项目。以下是如何设置客户端：
- en: Create a class that calls the Web-Service server using `WebServiceTemplate`
    in `src/test`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个调用 `WebServiceTemplate` 中的Web服务服务器的类在 `src/test` 中。
- en: Configure `WebServiceTemplate` in the `applicationContext.xml` file.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `applicationContext.xml` 文件中配置 `WebServiceTemplate`。
- en: 'From the folder `Liverestaurant_R-2.3`, run the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件夹 `Liverestaurant_R-2.3` 运行以下命令：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open a new command window to `Liverestaurant_R-2.3-Client` and run the following
    command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令窗口到 `Liverestaurant_R-2.3-Client` 并运行以下命令：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the client-side output:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Liverestaurant_R-2.3` is a server-side project that reuses the recipe *Setting
    up an endpoint by annotating the payload-root*, discussed in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-2.3` 是一个服务器端项目，它重复使用了在[第1章](ch01.html "第1章 构建SOAP Web服务")中讨论的*通过注释负载根来设置端点*的配方。*构建SOAP
    Web服务*。'
- en: The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 已配置的客户端 `WebServiceTemplate` 的 `applicationContext.xml` 文件（`id="webServiceTemplate"`）用于发送和接收
    XML 消息。可以从客户端程序中获取此 bean 的实例以发送和接收 XML 消息。
- en: '`messageFactory` is an instance of `SaajSoapMessageFactory`, which is referenced
    inside `WebServiceTemplate. messageFactory` is used to create a SOAP packet from
    the XML messages. The default service URI is the URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`messageFactory` 是 `SaajSoapMessageFactory` 的一个实例，它被引用在 `WebServiceTemplate`
    内。`messageFactory` 用于从 XML 消息创建 SOAP 数据包。默认的服务 URI 是 `WebServiceTemplate` 默认使用的
    URI，用于发送/接收所有请求/响应：'
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`OrderServiceClientTest.java` is a simple JUnit test case that is used to fetch
    and initialize `WebServiceTemplate` from `applicationContext.xml` in the method
    `setUpBeforeClass()` (marked by `@BeforeClass)`. In the methods `testCancelOrderRequest`
    and `testPlaceOrderRequest` (marked by `@Test), WebServiceTemplate` sends a simple
    XML message (created by a `StringSource` object from an existing input XML file)
    and receives a response from the server wrapped inside the `Result` object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderServiceClientTest.java` 是一个简单的JUnit测试用例，用于在 `setUpBeforeClass()` 方法中从
    `applicationContext.xml` 中获取和初始化 `WebServiceTemplate`（由 `@BeforeClass` 标记）。在 `testCancelOrderRequest`
    和 `testPlaceOrderRequest` 方法中（由 `@Test` 标记），`WebServiceTemplate` 发送一个简单的XML消息（由现有输入XML文件的
    `StringSource` 对象创建），并接收包装在 `Result` 对象中的来自服务器的响应：'
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services* and the recipe *Setting up a Web-Service client development environment
    using Maven*, discussed in this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章 构建SOAP Web服务")中讨论的*通过注释负载根来设置端点*的配方，*构建SOAP Web服务*和在本章中讨论的*使用Maven设置Web服务客户端开发环境*的配方。
- en: Creating a Web-Service client on JMS transport
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JMS传输上创建Web服务客户端
- en: 'JMS (Java message Service) was introduced in 1999 by Sun Microsystems as part
    of Java 2, J2EE. The systems that use JMS can communicate synchronously or asynchronously
    and are based on point-to-point and publish-subscribe models. Spring Web-Services
    provide features to set up a Web-Service over the JMS protocol that is built upon
    the JMS functionality in the Spring framework. Spring Web-Service over JMS protocol
    provides the following communication features:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: JMS（Java消息服务）于1999年由Sun Microsystems作为Java 2、J2EE的一部分引入。使用JMS的系统可以同步或异步通信，并基于点对点和发布-订阅模型。Spring
    Web服务提供了在Spring框架中基于JMS功能构建JMS协议的Web服务的功能。Spring Web服务在JMS协议上提供以下通信功能：
- en: The client and server could be disconnected and can be connected only when sending/receiving
    messages
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端和服务器可以断开连接，只有在发送/接收消息时才能连接
- en: The client doesn't need to wait until the server replies (in case the server
    needs a lot of time to process, for example, while doing complex mathematical
    calculations)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端不需要等待服务器回复（例如，如果服务器需要很长时间来处理，例如进行复杂的数学计算）
- en: JMS provides features that guarantee the delivery of messages between the client
    and server
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMS提供了确保客户端和服务器之间消息传递的功能
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    on the client side over JMS transport. A JUnit test case class is used to set
    up as on server side and send and receive messages using `WebServiceTemplate`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，`WebServiceTemplate`用于在客户端上通过JMS传输发送/接收简单的XML消息。使用一个JUnit测试用例类在服务器端设置并使用`WebServiceTemplate`发送和接收消息。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.4`, with the following
    Maven dependencies:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-2.4`，具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-ws-support-2.0.1.RELEASE.jar`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-support-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`spring-jms-3.0.5.RELEASE.jar`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-jms-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`jms-1.1.jar`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jms-1.1.jar`'
- en: '`activemq-core-4.1.1.jar`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activemq-core-4.1.1.jar`'
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the recipe *Setting up a Web-Service on JMS transport*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services*, as a server-side project.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方使用在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的配方*在JMS传输上设置Web服务*，*构建SOAP Web服务*作为服务器端项目。
- en: Create a JUnit test class that calls the Web-Service server using `WebServiceTemplate`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个调用`WebServiceTemplate`的Web服务服务器的JUnit测试类。
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the JMS protocol.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`applicationContext`中配置`WebServiceTemplate`以通过JMS协议发送消息。
- en: 'Run the command `mvn clean package`. You will see the following as output:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令`mvn clean package`。您将看到以下输出：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this project, we set up a Web-Service server, over JMS transport, using a
    JUnit class. The server uses `PayloadEndpoint` to receive the XML request message
    and returns a simple XML message as the response (the server is already described
    in the recipe *Setting up a Web-Service on JMS transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services).*
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们使用一个JUnit类在JMS传输上设置Web服务服务器。服务器使用`PayloadEndpoint`接收XML请求消息，并返回一个简单的XML消息作为响应（服务器已经在[第1章](ch01.html
    "第1章。构建SOAP Web服务")中讨论的配方*在JMS传输上设置Web服务*，*构建SOAP Web服务*中描述）。
- en: The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages. `messageFactory` is an instance of `SaajSoapMessageFactory`,
    referenced inside `WebServiceTemplate. messageFactory` is used to create a SOAP
    packet from the XML messages. The default service URI is the JMS URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses. `JmsMessageSender`, configured
    inside `WebServiceTemplate`, is used to send JMS messages. To use the `JmsMessageSender`,
    the `defaultUri` or `JMS URI` should contain the `jms:` prefix and a destination
    name. Some examples of `JMS URI` are `jms:SomeQueue, jms:SomeTopic?priority=3&deliveryMode=NON_PERSISTENT,
    jms:RequestQueue?replyToName=ResponseName`, and so on. By default, the `JmsMessageSender`
    sends JMS `BytesMessage`, but this can be overridden to use `TextMessages` by
    using the `messageType` parameter on the JMS URI. For example, `jms:Queue?messageType=TEXT_MESSAGE`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 已配置客户端`WebServiceTemplate`的`applicationContext.xml`文件（`id="webServiceTemplate"`）用于发送和接收XML消息。可以从客户端程序中获取此bean的实例以发送和接收XML消息。`messageFactory`是`SaajSoapMessageFactory`的一个实例，被引用在`WebServiceTemplate`内。`messageFactory`用于从XML消息创建SOAP数据包。默认服务URI是`WebServiceTemplate`默认使用的JMS
    URI，用于发送/接收所有请求/响应。配置在`WebServiceTemplate`内的`JmsMessageSender`用于发送JMS消息。要使用`JmsMessageSender`，`defaultUri`或`JMS
    URI`应包含`jms:`前缀和目的地名称。一些`JMS URI`的例子是`jms:SomeQueue, jms:SomeTopic?priority=3&deliveryMode=NON_PERSISTENT,
    jms:RequestQueue?replyToName=ResponseName`等。默认情况下，`JmsMessageSender`发送JMS`BytesMessage`，但可以通过在JMS
    URI上使用`messageType`参数来覆盖使用`TextMessages`。例如，`jms:Queue?messageType=TEXT_MESSAGE`。
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`JmsTransportWebServiceIntegrationTest.java` is a JUnit test case that fetches
    and injects `WebServiceTemplate` from the `applicationContext.xml` file (marked
    by `@ContextConfiguration("applicationContext.xml"))`. In the method `testSendReceive()`
    (marked by `@Test), WebServiceTemplate` sends a simple XML message (created by
    a `StringSource` object from a simple input string) and receives a response from
    the server wrapped inside the `Result` object. In the method `testSendReceive()`
    (marked by `@Test)`, sending and receiving of messages is similar to the HTTP
    client and uses `WebServiceTemplate.sendSourceAndReceiveToResult` to send/receive
    messages:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`JmsTransportWebServiceIntegrationTest.java`是一个JUnit测试用例，从`applicationContext.xml`文件中获取并注入`WebServiceTemplate`（由`@ContextConfiguration("applicationContext.xml")`标记）。在`testSendReceive()`方法（由`@Test`标记），`WebServiceTemplate`发送一个简单的XML消息（由简单输入字符串的`StringSource`对象创建），并接收包装在`Result`对象中的服务器响应。在`testSendReceive()`方法（由`@Test`标记）中，发送和接收消息类似于HTTP客户端，并使用`WebServiceTemplate.sendSourceAndReceiveToResult`发送/接收消息：'
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up a Web-Service on JMS transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAPWeb-Services.*
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的配方*在JMS传输上设置Web服务*，*构建SOAP Web服务*。
- en: '*Unit testing a Web-Service using Spring Junit*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用Spring Junit对Web服务进行单元测试*'
- en: Creating a Web-Service client on E-mail transport
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在E-mail传输上创建Web服务客户端
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    on the client side, over E-mail transport. The *Setting up a Web-Service on E-mail
    transport* recipe from [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, is used to set up a Web-Service. A JUnit test case
    class is used to set up a Web-Service on the server side and messages are sent/received
    using `WebServiceTemplate`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`WebServiceTemplate` 用于在客户端上通过电子邮件传输发送/接收简单的XML消息。使用[第1章](ch01.html "第1章。构建SOAP
    Web服务")中讨论的 *在电子邮件传输上设置Web服务* 这个示例，*构建SOAP Web服务* 来设置Web服务。使用JUnit测试用例类来在服务器端设置Web服务，并使用
    `WebServiceTemplate` 发送/接收消息。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.5`, with the following
    Maven dependencies:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，项目的名称是 `LiveRestaurant_R-2.5`，具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-ws-support-2.0.1.RELEASE.jar`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-support-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`mail-1.4.1.jar`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mail-1.4.1.jar`'
- en: '`mock-javamail-1.6.jar`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mock-javamail-1.6.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the recipe *Setting up a Web-Service on E-mail transport*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的 *在电子邮件传输上设置Web服务* 这个示例，*构建SOAP
    Web服务* 作为服务器端项目。
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个测试类，使用 `WebServiceTemplate` 调用Web服务服务器。
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the e-mail protocol.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `applicationContext` 中配置 `WebServiceTemplate` 以通过电子邮件协议发送消息。
- en: 'Run the command `mvn clean package`. The following is the output of this command:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令 `mvn clean package`。以下是此命令的输出：
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This project sets up a Web-Service server over the E-mail transport, using a
    JUnit class. This class uses Spring JUnit that loads the application context,
    sets up the server first, and then runs the client unit test to verify that it
    functions as expected. The server is already explained in the recipe *Setting
    up a Web-Service on E-mail transport*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目通过JUnit类在电子邮件传输上设置Web服务服务器。这个类使用Spring JUnit来加载应用程序上下文，首先设置服务器，然后运行客户端单元测试以验证其是否按预期运行。服务器已在[第1章](ch01.html
    "第1章。构建SOAP Web服务")中讨论的 *在电子邮件传输上设置Web服务* 这个示例中解释过。
- en: 'The `applicationContext.xml` file of the configured client `WebServiceTemplate
    (id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages. `messageFactory` is an instance of `SaajSoapMessageFactory`,
    referenced inside `WebServiceTemplate. messageFactory` is used to create a SOAP
    packet from XML messages. `transportURI` is a URI used by `WebServiceTemplate`
    and indicates the server to use for sending requests. `storeURI` is a URI, configured
    inside `WebServiceTemplate`, and indicates the server to poll for responses (typically,
    a POP3 or IMAP server). The default URI is the e-mail address URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 配置的客户端 `WebServiceTemplate (id="webServiceTemplate")` 的 `applicationContext.xml`
    文件用于发送和接收XML消息。可以从客户端程序中获取此bean的实例以发送和接收XML消息。`messageFactory` 是 `SaajSoapMessageFactory`
    的一个实例，被引用在 `WebServiceTemplate` 内。`messageFactory` 用于从XML消息创建SOAP数据包。`transportURI`
    是一个由 `WebServiceTemplate` 使用的URI，指示用于发送请求的服务器。`storeURI` 是一个URI，配置在 `WebServiceTemplate`
    内，指示用于轮询响应的服务器（通常是POP3或IMAP服务器）。默认URI是 `WebServiceTemplate` 默认使用的电子邮件地址URI，用于发送/接收所有请求/响应：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`MailTransportWebServiceIntegrationTest.java` is a JUnit test case that fetches
    and injects `WebServiceTemplate` from `applicationContext.xml` (marked by `@ContextConfiguration("applicationContext.xml"))`.
    In the method `testWebServiceOnMailTransport()(marked` by `@Test), WebServiceTemplate`
    sends a simple XML message (created by a `StringSource` object from an input XML
    file) and receives a response from the server wrapped inside the `Result` object.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`MailTransportWebServiceIntegrationTest.java` 是一个JUnit测试用例，从 `applicationContext.xml`
    中获取并注入 `WebServiceTemplate`（由 `@ContextConfiguration("applicationContext.xml")`
    标记）。在 `testWebServiceOnMailTransport()` 方法中（由 `@Test` 标记），`WebServiceTemplate`
    发送一个简单的XML消息（由输入XML文件的 `StringSource` 对象创建），并接收包装在 `Result` 对象中的来自服务器的响应。'
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: See also..
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅..
- en: The recipe *Setting up a Web-Service on E-mail transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的 *在电子邮件传输上设置Web服务* 这个示例，*构建SOAP Web服务*。
- en: Unit testing a Web-Service using Spring Junit
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Junit对Web服务进行单元测试
- en: Setting up a Web-Service on XMPP transport
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在XMPP传输上设置Web服务
- en: '**XMPP** (The Extensible Messaging and Presence Protocol) is an open and decentralized
    XML routing technology on which systems can send XMPP messages to each other.
    The XMPP network consists of XMPP servers, clients, and services. Each system
    using XMPP is recognized by a unique ID known as the **Jabber ID (JID)** . XMPP
    servers publish XMPP services to offer connected to a client remote service.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**XMPP**（可扩展消息和出席协议）是一种开放和分散的XML路由技术，系统可以使用它向彼此发送XMPP消息。XMPP网络由XMPP服务器、客户端和服务组成。使用XMPP的每个系统都由唯一的ID（称为**Jabber
    ID (JID)**）识别。XMPP服务器发布XMPP服务，以提供对客户端的远程服务连接。'
- en: In this recipe, `WebServiceTemplate` is used to send/receive simple XML messages
    on the client side over XMPP transport. The recipe *Setting up a Web-Service on
    XMPP transport* from [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, is used to set up a Web-Service. A JUnit test case
    class is used to set up a Web-Service on the server side and send and receive
    messages using `WebServiceTemplate`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，`WebServiceTemplate`用于通过XMPP传输在客户端发送/接收简单的XML消息。使用了[第1章](ch01.html "第1章。构建SOAP
    Web服务")中的*在XMPP传输上设置Web服务*配方，*构建SOAP Web服务*，来设置一个Web服务。使用了一个JUnit测试用例类来在服务器端设置Web服务，并使用`WebServiceTemplate`发送和接收消息。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.6`, with the following
    Maven dependencies:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-2.6`，具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-ws-support-2.0.1.RELEASE.jar`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-support-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: '`smack-3.1.0.jar`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`smack-3.1.0.jar`'
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the recipe *Setting up a Web-Service on XMPP transport*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services*, as the server-side project.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个配方使用了在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*在XMPP传输上设置Web服务*配方，*构建SOAP Web服务*，作为服务器端项目。
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个测试类，调用`WebServiceTemplate`调用Web服务服务器。
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the XMPP protocol.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`applicationContext`中配置`WebServiceTemplate`以通过XMPP协议发送消息。
- en: 'Run the command `mvn clean package`. You will see the following output:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令`mvn clean package`。您将看到以下输出：
- en: '[PRE26]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This project sets up a Web-Service server over the XMPP transport using a JUnit
    class. The server is already explained in the recipe *Setting up a Web-Service
    on e-mail transport*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目使用JUnit类在XMPP传输上设置了一个Web服务服务器。该服务器已经在配方*在电子邮件传输上设置Web服务*中解释过，在[第1章](ch01.html
    "第1章。构建SOAP Web服务")中讨论了*构建SOAP Web服务*。
- en: 'The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages. The
    instance of this bean can be fetched from the client-side program to send and
    receive XML messages. `messageFactory` is an instance of `SaajSoapMessageFactory`,
    referenced inside `WebServiceTemplate. messageFactory` is used to create a SOAP
    packet from XML messages. `WebServiceTemplate` uses `XmppMessageSender` to send
    messages to the server. The default URI is a XMPP address URI that `WebServiceTemplate`
    uses by default to send/receive all requests/responses:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 已配置客户端`WebServiceTemplate`的`applicationContext.xml`文件（`id="webServiceTemplate"`）用于发送和接收XML消息。可以从客户端程序中获取此bean的实例，以发送和接收XML消息。`messageFactory`是`SaajSoapMessageFactory`的一个实例，被引用在`WebServiceTemplate`内。`messageFactory`用于从XML消息创建SOAP数据包。`WebServiceTemplate`使用`XmppMessageSender`发送消息到服务器。默认URI是`WebServiceTemplate`默认使用的XMPP地址URI，用于发送/接收所有请求/响应：
- en: '[PRE27]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`XMPPTransportWebServiceIntegrationTest.java` is a JUnit test case that fetches
    and injects `WebServiceTemplate` from `applicationContext.xml` (marked by `@ContextConfiguration("applicationContext.xml"))`.
    In the method `testWebServiceOnXMPPTransport()(marked` by `@Test), WebServiceTemplate`
    sends an XML message (created by a `StringSource` object from a simple input XML
    file ) and receives a response from the server wrapped inside the `Result` object.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMPPTransportWebServiceIntegrationTest.java`是一个JUnit测试用例，从`applicationContext.xml`中获取并注入`WebServiceTemplate`（由`@ContextConfiguration("applicationContext.xml")`标记）。在`testWebServiceOnXMPPTransport()`方法中（由`@Test`标记），`WebServiceTemplate`发送一个XML消息（由简单的输入XML文件的`StringSource`对象创建），并接收服务器包装在`Result`对象中的响应。'
- en: '[PRE28]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up a Web-Service on XMPP transport*, discussed in [Chapter
    1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*在XMPP传输上设置Web服务*配方，*构建SOAP Web服务*。
- en: Unit testing a Web-Service using Spring JUnit
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring JUnit对Web服务进行单元测试
- en: Creating a Web-Service client using XPath expressions
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XPath表达式创建Web服务客户端
- en: Using XPath in Java programming is one of the standard ways of extracting data
    from XML messages. However, it mixes the XPath address of XML nodes/attributes
    (that might eventually turn out to be very long) with Java code.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java编程中使用XPath是从XML消息中提取数据的标准方法之一。但是，它将XML节点/属性的XPath地址（最终可能非常长）与Java代码混合在一起。
- en: Spring provides a feature to extract these addresses from Java and shift them
    into the Spring configuration file. In this recipe, the *Setting up an endpoint
    by annotating the payload-root* recipe from [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*, is used to set up a Web-Service
    server.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一个功能，可以从Java中提取这些地址，并将它们转移到Spring配置文件中。在这个配方中，使用了[第1章](ch01.html "第1章。构建SOAP
    Web服务")中的*通过注释有效负载根设置端点*配方，*构建SOAP Web服务*，来设置一个Web服务服务器。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.7` (for the server-side
    Web-Service), with the following Maven dependencies:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-2.7`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.7-Client`
    (for the client-side Web-Service):'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-2.7-Client`（用于客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the *Setting up an endpoint by annotating the payload-root*
    recipe discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as the server-side project.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱使用了在服务器端项目中讨论的*通过注释负载根设置端点*食谱。
- en: Configure the XPath expression inside `applicationContext.xml`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`applicationContext.xml`中配置XPath表达式。
- en: Configure `WebServiceTemplate` in `applicationContext` to send messages over
    the HTTP protocol, as described in the recipe *Creating a Web-Service client on
    HTTP transport*.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`applicationContext`中配置`WebServiceTemplate`以通过HTTP协议发送消息，如食谱*在HTTP传输上创建Web服务客户端*中所述。
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`
    and uses the XPath expression in Java code to extract the desired values.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个测试类，使用`WebServiceTemplate`调用Web服务服务器，并在Java代码中使用XPath表达式提取所需的值。
- en: From the folder `Liverestaurant_R-2.7`, run the command `mvn clean package tomcat:run`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件夹`Liverestaurant_R-2.7`中运行命令`mvn clean package tomcat:run`。
- en: 'Open a new command window to `Liverestaurant_R-2.7-Client` and run the following
    command:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令窗口到`Liverestaurant_R-2.7-Client`并运行以下命令：
- en: '[PRE29]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is the output of the client-side code:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端代码的输出：
- en: '[PRE30]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Setting up the client and server and using `WebserviceTemplate` are done in
    the same way as we did in the recipe *Creating a Web-Service client on HTTP transport*.
    `xpathExpPlace` and `xpathExpCancel` are configured in the client `applicationContext.xml`
    and it creates an instance of `XPathExpressionFactoryBean` that gets a property
    of `expression` as the XPath of the required data and `namespaces` of the XML
    messages:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 设置客户端和服务器端，并使用`WebserviceTemplate`的方式与我们在食谱*在HTTP传输上创建Web服务客户端*中所做的一样。在客户端`applicationContext.xml`中配置了`xpathExpPlace`和`xpathExpCancel`，并创建了`XPathExpressionFactoryBean`的实例，该实例获取所需数据的XPath属性和XML消息的命名空间：
- en: '[PRE31]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the class `OrderServiceClientTest`, an instance of `XPathExpressionFactoryBean`
    can be extracted from `applicationContext. String message = xpathExp.evaluateAsString(result.getNode())`
    returns the required data using an XPath expression:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OrderServiceClientTest`类中，可以从`applicationContext`中提取`XPathExpressionFactoryBean`的实例。`String
    message = xpathExp.evaluateAsString(result.getNode())`使用XPath表达式返回所需的数据：
- en: '[PRE32]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint using an XPath expression*, discussed in
    [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱*使用XPath表达式设置端点*在[第1章](ch01.html "第1章。构建SOAP Web服务") *构建SOAP Web服务*中讨论。
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的食谱*在HTTP传输上创建Web服务客户端*。
- en: Unit testing a Web-Service using Spring JUnit.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring JUnit对Web服务进行单元测试。
- en: Creating a Web-Service client for a WS-Addressing endpoint
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为WS-Addressing端点创建Web服务客户端
- en: 'As described in the recipe *Setting up a transport-neutral WS-Addressing endpoint*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, WS-Addressing is an alternative way for routing. Instead of
    including the routing data within the body of the SOAP messages, WS-Addressing
    separates the routing data from the messages and includes it with the SOAP headers.
    Here is a sample of the WS-Addressing style of a SOAP message, sent from the client
    side:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如食谱*设置一个传输中立的WS-Addressing端点*中所述，讨论在[第1章](ch01.html "第1章。构建SOAP Web服务") *构建SOAP
    Web服务*，WS-Addressing是一种替代的路由方式。WS-Addressing将路由数据与消息分开，并将其包含在SOAP头中，而不是在SOAP消息的主体中。以下是从客户端发送的WS-Addressing样式的SOAP消息示例：
- en: '[PRE33]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: While using WS-Addressing, the client or server can access more features when
    compared to the other methods (including routing data within a message). For example,
    here the client side can set `ReplyTo` to its own and `FaultTo` to the admin endpoint
    address. Then the server sends successful messages to the client and fault messages
    to the admin address.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用WS-Addressing时，与其他方法（包括在消息中包含路由数据）相比，客户端或服务器可以访问更多功能。例如，客户端可以将`ReplyTo`设置为自己，将`FaultTo`设置为管理员端点地址。然后服务器将成功消息发送到客户端，将故障消息发送到管理员地址。
- en: Spring-WS supports client-side WS-Addressing as well as on the server side.
    To create WS-Addressing headers for the client side, `org.springframework.ws.soap.addressing.client.ActionCallback`
    can be used. This callback keeps the `Action` header as a parameter. It also uses
    the WS-Addressing version and a `To` header.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS支持客户端和服务器端的WS-Addressing。要为客户端创建WS-Addressing头，可以使用`org.springframework.ws.soap.addressing.client.ActionCallback`。此回调将`Action`头保留为参数。它还使用WS-Addressing版本和`To`头。
- en: In this recipe, the *Setting up a transport-neutral WS-Addressing endpoint*
    recipe, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, is used to set up a WS-Addressing Web-Service. A
    client application is used here to call the server and return the response object.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在此食谱中，使用了在[第1章](ch01.html "第1章。构建SOAP Web服务") *构建SOAP Web服务*中讨论的*设置一个传输中立的WS-Addressing端点*食谱来设置WS-Addressing
    Web服务。在这里使用客户端应用程序来调用服务器并返回响应对象。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.8` (for server-side
    Web-Service), with the following Maven dependencies:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在此食谱中，项目名称为`LiveRestaurant_R-2.8`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.8-Client`
    (for the client-side Web-Service):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-2.8-Client`（用于客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the recipe *Setting up a transport-neutral WS-Addressing endpoint*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, as the server-side project. Creating a client for WS-Addressing
    is done in the same way as described in the recipe *Creating a Web-Service client
    on HTTP transport*, without using WebServiceTemplate. To add a WS-Addressing header
    on the client side, the method `sendSourceAndReceiveToResult` of `WebServiceTemplate`
    gets an `ActionCallBack` instance.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*为Web服务设置与传输无关的WS-Addressing端点*配方，*构建SOAP
    Web服务*，作为服务器端项目。创建WS-Addressing的客户端与*在HTTP传输上创建Web服务客户端*配方中描述的方式相同，不使用WebServiceTemplate。为了在客户端上添加WS-Addressing头，`WebServiceTemplate`的`sendSourceAndReceiveToResult`方法获得一个`ActionCallBack`实例。
- en: 'From the folder `LiveRestaurant_R-2.8`, run the following command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件夹`LiveRestaurant_R-2.8`中运行以下命令：
- en: '[PRE34]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open a new command window to `LiveRestaurant_R-2.8-Client` and run the following
    command:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令窗口到`LiveRestaurant_R-2.8-Client`，并运行以下命令：
- en: '[PRE35]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following is the client-side output:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE36]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Liverestaurant_R-2.8` project is a server-side Web-Service that supports
    the WS-Addressing endpoint.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-2.8`项目是一个支持WS-Addressing端点的服务器端Web服务。'
- en: The `applicationContext.xml` file of the configured client `WebServiceTemplate`
    `(id="webServiceTemplate")` is used for sending and receiving XML messages, as
    described in the recipe *Creating a Web-Service client on HTTP transport*, except
    for the implementation of the Java class that used `WebServiceTemplate`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 已配置的客户端`WebServiceTemplate`的`applicationContext.xml`文件（`id="webServiceTemplate"）用于发送和接收XML消息，如*在HTTP传输上创建Web服务客户端*配方中描述的，除了使用`WebServiceTemplate`的Java类的实现。
- en: WS-Addressing client passes an instance of `ActionCallBack` to the method `sendSourceAndReceiveToResult`
    of `WebServiceTemplate`. Using `ActionCallBack`, the client adds a custom header
    that contains the `Action` URI, for example, [http://www.packtpub.com/OrderService/OrdReq](http://www.packtpub.com/OrderService/OrdReq)
    and the `To` URI, for example, [http://www.packtpub.com/liverestaurant/OrderService/schema](http://www.packtpub.com/liverestaurant/OrderService/schema).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: WS-Addressing客户端将`ActionCallBack`的实例传递给`WebServiceTemplate`的`sendSourceAndReceiveToResult`方法。使用`ActionCallBack`，客户端添加一个包含`Action`
    URI的自定义头，例如，[http://www.packtpub.com/OrderService/OrdReq](http://www.packtpub.com/OrderService/OrdReq)和`To`
    URI，例如，[http://www.packtpub.com/liverestaurant/OrderService/schema](http://www.packtpub.com/liverestaurant/OrderService/schema)。
- en: '[PRE37]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Using this header, the server side will be able to find the method in the endpoint
    (using the `@Action` annotation).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个头，服务器端将能够在端点中找到方法（使用`@Action`注释）。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The recipe *Setting up a transport-neutral WS-Addressing endpoint*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*为Web服务设置与传输无关的WS-Addressing端点*配方，*构建SOAP
    Web服务*。
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in this
    chapter.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的*在HTTP传输上创建Web服务客户端*配方。
- en: Unit testing a Web-Service using Spring JUnit
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring JUnit对Web服务进行单元测试
- en: Transforming a Web-Service message using XSLT
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XSLT转换Web服务消息
- en: Eventually, clients of a Web-Service may use different versions of XML messages
    and the requirement is to use the same Web-Service on the server side.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Web服务的客户端可能使用不同版本的XML消息，要求在服务器端使用相同的Web服务。
- en: Spring Web-Services provide `PayloadTransformingInterceptor`. This endpoint
    interceptor uses XSLT stylesheets and is useful when you need multiple versions
    of a Web-Service. Using this interceptor, you can transform the old format of
    the message to a newer one.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web服务提供`PayloadTransformingInterceptor`。这个端点拦截器使用XSLT样式表，在需要多个版本的Web服务时非常有用。使用这个拦截器，您可以将消息的旧格式转换为新格式。
- en: In this recipe, the *Setting up a simple endpoint mapping for the Web-Service*
    recipe from [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*, is used to set up a Web-Service and the client application
    here calls the server and returns the response message.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，使用[第1章](ch01.html "第1章。构建SOAP Web服务")中的*为Web服务设置简单的端点映射*配方，*构建SOAP Web服务*，来设置一个Web服务，这里的客户端应用程序调用服务器并返回响应消息。
- en: Getting ready
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-2.9` (for a server-side
    web service), with the following Maven dependencies:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-2.9`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-2.9-Client`
    (for the client-side Web-Service):'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-2.9-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe uses the *Setting up a simple endpoint mapping for the Web-Service*
    recipe, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as a server-side project. The client side is the
    same as discussed in the recipe *Creating a Web-Service client on HTTP transport*,
    except for the XSLT files and their configuration in the server-side application
    context file:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*为Web服务设置简单的端点映射*配方，*构建SOAP Web服务*，作为服务器端项目。客户端与*在HTTP传输上创建Web服务客户端*配方中讨论的相同，除了XSLT文件及其在服务器端应用程序上下文文件中的配置：
- en: Create the XSLT files`(oldResponse.xslt, oldRequest.xslt)`.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建XSLT文件（oldResponse.xslt，oldRequest.xslt）。
- en: Modify the file `spring-ws-servlet.xml` in `LiveRestaurant_R-2.9` to include
    the XSLT files
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`LiveRestaurant_R-2.9`中的`spring-ws-servlet.xml`文件以包含XSLT文件
- en: 'From the folder `Liverestaurant_R-2.9`, run the following command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件夹`Liverestaurant_R-2.9`中运行以下命令：
- en: '[PRE38]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Open a new command window to `Liverestaurant_R-2.9-Client` and run the following
    command:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令窗口到`Liverestaurant_R-2.9-Client`，并运行以下命令：
- en: '[PRE39]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following is the client-side output:'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE40]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following is the server-side output:'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是服务器端输出：
- en: '[PRE41]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The server side is the same as that described in the recipe *Setting up a simple
    endpoint mapping for the Web-Service* from [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*. On the client side, `WebServiceTemplate`
    and `OrderServiceClientTest.java` are the same as those described in the recipe
    *Creating a Web-Service client on HTTP transport*.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端与[第1章](ch01.html "第1章。构建SOAP Web服务")中描述的*设置简单的端点映射用于Web服务*的配方相同，*构建SOAP
    Web服务*。在客户端，`WebServiceTemplate`和`OrderServiceClientTest.java`与*在HTTP传输上创建Web服务客户端*的配方中描述的相同。
- en: 'The only difference is the server application context file. The `transformingInterceptor`
    bean in `spring-servlet.xml` uses `oldRequests.xslt` and `oldResponse.xslt` to
    convert the old request XML message to the server''s newer version and vice versa,
    respectively:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是服务器应用程序上下文文件。`spring-servlet.xml`中的`transformingInterceptor` bean使用`oldRequests.xslt`和`oldResponse.xslt`分别将旧的请求XML消息转换为服务器的更新版本，反之亦然：
- en: '[PRE42]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: See also
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up a simple endpoint mapping for the Web-Service*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*设置简单的端点映射用于Web服务*的配方，*构建SOAP Web服务*。
- en: Unit testing a Web-Service using Spring JUnit.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring JUnit对Web服务进行单元测试。
