- en: Chapter 3. Enabling Fixtures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。启用固定装置
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Tagging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记
- en: ANDing and ORing Tags
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AND和OR标记
- en: Adding Hooks to Cucumber code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将钩子添加到Cucumber代码中
- en: Tagging the Hooks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记钩子
- en: ANDing and ORing the Tagged Hooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AND和OR操作符对标记钩子进行操作
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will discuss how to get control of what Features to run,
    and when to run them; for example, we may want to run only one set of Feature
    files like Sanity, or we may want to take a screenshot after each Scenario. This
    type of control is called **fixtures**. Cucumber allows us to enable fixtures
    via the concepts of Tags and Hooks. With knowledge of the concepts covered in
    this chapter, you will be able to write very effective and efficient fixtures.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何控制运行哪些特性，以及何时运行它们；例如，我们可能只想运行一组特性文件，比如Sanity，或者我们可能想在每个场景之后截图。这种类型的控制称为**固定装置**。Cucumber允许我们通过标记和钩子的概念启用固定装置。通过了解本章中介绍的概念，你将能够编写非常有效和高效的固定装置。
- en: In this chapter, we will start with basic concepts of Tags and Hooks followed
    by ANDing and ORing them. Then we will cover the power of Tag and Hook combinations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从标记和钩子的基本概念开始，然后是AND和OR操作，接着我们将介绍标记和钩子组合的强大功能。
- en: Tagging
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记
- en: 'Let''s assume you are an automation architect and you have to run a specific
    set of Scenarios or Feature files. This situation may occur often: let''s say
    we have made changes to one functionality and now we want to run Features/Scenarios
    of that functionality only.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一名自动化架构师，你必须运行一组特定的场景或特性文件。这种情况可能经常发生：比如说我们对一个功能进行了更改，现在我们只想运行该功能的特性/场景。
- en: Now let's understand how we can Tag some Scenarios as Sanity, some as Regression,
    and some as both. Let's see in our next section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解如何将一些场景标记为Sanity，一些标记为Regression，一些两者都标记。让我们在下一节中看看。
- en: Now, there is the `home_page.feature` file and we want to Tag it as important.
    We also want to Tag some Scenarios as `sanity` and some as `regression` or some
    as both. So, how do we do this in a Cucumber project? Let's see in our next section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有`home_page.feature`文件，我们想将其标记为重要。我们还想将一些场景标记为`sanity`，一些标记为`regression`，或者一些两者都标记。那么，在Cucumber项目中我们该如何做呢？让我们在下一节中看看。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s use the following Feature file for this recipe:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下特性文件来完成这个菜谱：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We need to simply write `@sanity` or `@regression` before the Scenario and
    `@important` in front of the Feature file. Refer to the highlighted text in the
    code. This is how our updated `home_page.feature` file should look:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要在场景之前简单地写上`@sanity`或`@regression`，在特性文件之前写上`@important`。参考代码中的高亮文本。这就是我们的更新后的`home_page.feature`文件应该看起来像的：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open the Command Prompt and go to the `project` directory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并转到`project`目录。
- en: 'Use the following command to run the Feature file that has been tagged as `important`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行标记为`important`的特性文件：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will explore this command in detail in the next chapter—use it as it is for
    time being.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在下一章中详细探讨这个命令——暂时按原样使用它。
- en: 'We will get this output:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![How to do it…](img/image00135.jpeg)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00135.jpeg)'
- en: Although there are many Feature files in our project, only the Feature file
    that is Tagged as important is run, and that's why all the Scenarios were also
    run.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然我们的项目中有很多特性文件，但只有标记为重要的特性文件会被运行，这就是为什么所有场景也被运行的原因。
- en: 'Now, run the following command in the command prompt:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在命令提示符中运行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the output:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![How to do it…](img/image00136.jpeg)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00136.jpeg)'
- en: Now, only two Scenarios are executed and both the Scenarios that are executed
    are Tagged as `@sanity`. So it is clear that whichever Scenarios are mentioned
    while running Cucumber, only those Scenarios are run.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只有两个场景被执行，并且执行的两个场景都被标记为`@sanity`。所以很明显，在运行Cucumber时提到的任何场景，只有那些场景会被运行。
- en: How it works…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Tags are used to organize Feature files and Scenarios. You Tag a Scenario by
    putting a word prefixed with the `@` character on the line before the `Scenario`
    keyword.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 标记用于组织特性文件和场景。你通过在`Scenario`关键字之前的行上放置一个以`@`字符为前缀的单词来标记场景。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A Feature/Scenario can have multiple Tags; just separate them with spaces or
    put them on a different line.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特性/场景可以拥有多个标记；只需用空格分隔它们，或者将它们放在不同的行上。
- en: Inheritance is when Tags are inherited. If a Feature file has a Tag, then Cucumber
    will assign that Tag to all Scenarios and all Scenario Outlines in that Feature
    file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是指标签被继承。如果一个特性文件有一个标签，那么Cucumber将会将该标签分配给该特性文件中的所有场景和所有场景轮廓。
- en: 'You can customize your run by using `--tags` when running Cucumber test cases
    from the Terminal. A few examples are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在终端运行Cucumber测试用例时使用`--tags`来自定义运行。以下是一些示例：
- en: '`mvn test -Dcucumber.options="--tags @important"` will run all Scenarios (because
    we are running a Tag associated with Feature).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvn test -Dcucumber.options="--tags @important"`将会运行所有场景（因为我们正在运行与特性关联的标签）。'
- en: '`mvn test -Dcucumber.options="--tags @sanity"` will run Scenarios associated
    with `@sanity`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvn test -Dcucumber.options="--tags @sanity"`将会运行与`@sanity`标签关联的场景。'
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `~` special character in front of any Tag tells Cucumber to ignore all the
    Scenarios associated with that Tag.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何标签前方的特殊字符`~`告诉Cucumber忽略所有与该标签关联的场景。
- en: '`mvn test -Dcucumber.options="--tags ~@important"` will run test cases that
    do not have the `@important` Tag associated with them.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvn test -Dcucumber.options="--tags ~@important"`将会运行没有与`@important`标签关联的测试用例。'
- en: ANDing and ORing Tags
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AND和OR操作符的标签
- en: Most of the time, changes are made to many functionalities simultaneously; so
    it becomes imperative for testers to test all those functionalities. Sometimes
    we have to run all the Scenarios marked as `@sanity` and `@regression` and sometimes
    we want to run all Scenarios for `feature1` or `feature2`. So how do we do this
    in Cucumber? Let's see that in this section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，我们会同时修改许多功能；因此，测试人员测试所有这些功能变得至关重要。有时我们必须运行所有标记为`@sanity`和`@regression`的场景，有时我们想要运行`feature1`或`feature2`的所有场景。那么在Cucumber中我们该如何做呢？让我们在本节中看看。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This is the `Feature` file we will use for this recipe:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将用于本菜谱的`Feature`文件：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'If we want to run the Scenarios which are Tagged `sanity` and `regression`
    both, then run the following command in the command prompt:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要运行被标记为`sanity`和`regression`的场景，请在命令提示符中运行以下命令：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is the output:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是输出结果：
- en: '![How to do it…](img/image00137.jpeg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00137.jpeg)'
- en: Running only one Scenario which is Tagged both `@sanity` and `@regression`.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只运行被标记为同时具有`@sanity`和`@regression`标签的一个场景。
- en: 'If we want to run, the Scenarios which are Tagged either `sanity` or `regression`,
    then run the following command in the command prompt:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要运行被标记为`sanity`或`regression`的场景，请在命令提示符中运行以下命令：
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the output:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是输出结果：
- en: '![How to do it…](img/image00138.jpeg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00138.jpeg)'
- en: Running the Scenarios that are tagged as either `@sanity` or `@regression`
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行被标记为`@sanity`或`@regression`的场景
- en: 'Update the `home_page.feature` file to the following:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`home_page.feature`文件更新为以下内容：
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we want to run the Scenarios which are either Tagged `@sanity AND @wip`
    or `@regression AND @wip`, run the following command:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要运行被标记为`@sanity AND @wip`或`@regression AND @wip`的场景，请运行以下命令：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is the output:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是输出结果：
- en: '![How to do it…](img/image00139.jpeg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00139.jpeg)'
- en: How it works…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Now let''s understand why we ANDed and ORed the Tags in the preceding section:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来理解为什么在前一节中我们使用了AND和OR操作符来处理标签：
- en: '**ANDing**: When we want to run the Scenarios with all the mentioned Tags.
    Tags have to be mentioned in separate `--tags` options; for example, `mvn test
    -Dcucumber.options="--tags @sanity --tags @Regression"`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AND操作**：当我们想要运行所有提到的标签的场景时。标签必须在单独的`--tags`选项中提及；例如，`mvn test -Dcucumber.options="--tags
    @sanity --tags @Regression"`。'
- en: '**ORing**: When we want to run the Scenarios with either of the mentioned Tags.
    Tags have to be mentioned in single `–tags` options but should be comma separated;
    for example, `mvn test -Dcucumber.options="--tags @wip,@sanity"`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OR操作**：当我们想要运行具有所提及标签之一的场景时。标签必须在单个`–tags`选项中提及，但应以逗号分隔；例如，`mvn test -Dcucumber.options="--tags
    @wip,@sanity"`。'
- en: Note
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: ANDing and ORing can be combined to achieve greater flexibility in achieving
    what to run.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AND和OR操作可以组合起来以实现更大的灵活性，以确定要运行的内容。
- en: Adding Hooks to Cucumber code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将钩子添加到Cucumber代码中
- en: After finding out how to run a few selective Features, the next great thing
    is running some code before or after test Scenarios. These are very basic and
    desired Features for Test Automation Frameworks. Examples of this could be initializing
    the browser before the execution starts and closing the browser after the execution
    is complete. So how do we do this in Cucumber? Let's take a look at this in this
    recipe.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在找出如何运行一些选择性的功能之后，下一件大事是在测试场景之前或之后运行一些代码。这些是测试自动化框架的基本和期望的功能。这种功能的例子包括在执行开始前初始化浏览器和在执行完成后关闭浏览器。那么在
    Cucumber 中我们该如何做呢？让我们在这个菜谱中看看。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we are going to update the `home_page.feature` file to the
    one shown as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将更新 `home_page.feature` 文件，如下所示：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In the `automation` package, create one java class `Hooks.java` and put the
    following code in it (focus on the bold and highlighted text):'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `automation` 包中创建一个名为 `Hooks.java` 的 Java 类，并将以下代码放入其中（注意粗体和突出显示的文本）：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, run the home`_page.feature` file from Eclipse itself and note the output:![How
    to do it…](img/image00140.jpeg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从 Eclipse 本身运行 `home_page.feature` 文件并注意输出：![如何操作…](img/image00140.jpeg)
- en: How it works…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '**Hooks**: Cucumber allows us to run a piece of code at certain points in test
    case execution. This is implemented via Hooks. The real-life use of this involves
    initializing browsers before execution and closing the browser after execution.
    The Hooks code is generally kept in a file called `Hooks.java`, but this is not
    mandatory.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**钩子**：Cucumber 允许我们在测试用例执行过程中的特定点运行一段代码。这是通过钩子实现的。这种钩子的实际应用包括在执行前初始化浏览器和在执行后关闭浏览器。钩子代码通常保存在一个名为
    `Hooks.java` 的文件中，但这不是强制性的。'
- en: '**@Before**: The Before Hook is run before all the Scenarios of a `feature`
    file, including the background. If there are multiple `Before` Hooks, then they
    will be run in the order they are written.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**@Before**：在 `feature` 文件的所有场景之前，包括背景场景，都会运行 Before 钩子。如果有多个 `Before` 钩子，则它们将按照编写的顺序运行。'
- en: '**@After**: The After Hook is run after all Scenarios of a `feature` file.
    If there are multiple `After` Hooks, then they will be run in the order they are
    written.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**@After**：After 钩子在 `feature` 文件的所有场景之后运行。如果有多个 `After` 钩子，则它们将按照编写的顺序运行。'
- en: 'The following is the order of execution:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下为执行顺序：
- en: Before Hook
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Before 钩子
- en: Background
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 背景
- en: Scenario
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 场景
- en: After Hook
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: After 钩子
- en: There's more…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Although Hooks are run in the order they are written, the `order` parameter
    can be used to define custom execution. The default value is `10000`, and Cucumber
    runs `@Before` Hooks from low to high. A `@Before` Hook with an order of `100`
    will run before one with an order of `20`. An `@After` Hook runs from high to
    low—so an `@After` Hook with an order of `200` will run before one with an order
    of `100`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然钩子是按照编写的顺序运行的，但可以使用 `order` 参数来定义自定义执行。默认值是 `10000`，Cucumber 从低到高运行 `@Before`
    钩子。一个 `@Before` 钩子的 `order` 为 `100` 将在 `order` 为 `20` 的钩子之前运行。`@After` 钩子从高到低运行——因此一个
    `order` 为 `200` 的 `@After` 钩子将在 `order` 为 `100` 的钩子之前运行。
- en: 'Example: `@Before( order=5 )` and `@After( order =20)`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：`@Before( order=5 )` 和 `@After( order =20)`
- en: Tagging the Hooks
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记钩子
- en: What if we want to execute some piece of code only before certain Scenarios
    and not before all Scenarios? Consider a situation where we want to invoke the
    Selenium Webdriver for the Scenarios related to browser automation and the `REST`
    Client code for Scenarios related to `REST` Services automation. How do we do
    this in Cucumber? Let's see this in the next section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想在特定场景之前执行某些代码，而不是在所有场景之前执行呢？考虑一种情况，我们想在浏览器自动化相关的场景中调用 Selenium Webdriver，在
    `REST` 服务自动化相关的场景中使用 `REST` 客户端代码。在 Cucumber 中我们该如何做呢？让我们在下一节中看看。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we are going to use update `home_page.feature` like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用以下方式更新 `home_page.feature`：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Update the code of the `Hooks.java` class with the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `Hooks.java` 类的代码：
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run the `home_page.feature` file from Eclipse and save the Cucumber exceptions
    in the `Step Definitions` file.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行 `home_page.feature` 文件并将 Cucumber 异常保存在 `Step Definitions` 文件中。
- en: Run the `home_page.feature` file again from Eclipse; this is the output you
    will see:![How to do it…](img/image00141.jpeg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从 Eclipse 运行 `home_page.feature` 文件；这是您将看到的输出：![如何操作…](img/image00141.jpeg)
- en: How it works…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Tagged Hooks are combination of Hooks and Tags. Tagged Hooks are used when we
    want to perform some action only for specific and not all Scenarios. We have to
    add the Tag in parentheses after the Hook to transform it into a tagged Hooks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 标记钩子是钩子和标签的组合。当只想为特定场景而不是所有场景执行某些操作时，使用标记钩子。我们必须在钩子后面添加括号中的标签，将其转换为标记钩子。
- en: ANDing and ORing tagged Hooks
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记钩子的 AND 和 OR 操作
- en: Just as we ANDed and ORed the Tags, same way we can `AND` and `OR` the combination
    of Tags and Hooks. Consider a situation where we need to perform certain Steps
    for Features, such as for `feature1` and `feature2` but not for other Features.
    How do we do this in Cucumber? Let's see this in this recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以 AND 和 OR 标签一样，我们也可以 AND 和 OR 标签和钩子的组合。考虑一种情况，我们需要为某些功能执行特定的步骤，例如为 `feature1`
    和 `feature2`，但不为其他功能执行。在 Cucumber 中我们如何做？让我们在这个菜谱中看看。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will update the `home_page.feature` file like this for this recipe:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下方式更新此菜谱的 `home_page.feature` 文件：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to Do it
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'To run the Hook code before Scenarios Tagged with `@sanity` or `@regression`,
    add the following code to the `hooks.java` file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在标记为 `@sanity` 或 `@regression` 的场景之前运行钩子代码，将以下代码添加到 `hooks.java` 文件中：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00142.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行 `feature` 文件并观察输出：![如何操作](img/image00142.jpeg)
- en: The code will be run before all the Scenarios because all Scenarios are either
    Tagged `@sanity` or `@regression`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码将在所有场景之前运行，因为所有场景要么被标记为 `@sanity`，要么被标记为 `@regression`。
- en: 'To run Hooks code for the Scenarios Tagged with `@sanity` `AND @regression`
    both, comment the earlier code in the `Hooks.java` file and add the following
    code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为同时标记为 `@sanity` 和 `@regression` 的场景运行钩子代码，在 `Hooks.java` 文件中注释掉之前的代码，并添加以下代码：
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00143.jpeg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行 `feature` 文件并观察输出：![如何操作](img/image00143.jpeg)
- en: The code will be run before Scenario 3, which has both Tags `@sanity` and `@regression`.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码将在具有两个标签 `@sanity` 和 `@regression` 的 Scenario 3 之前运行。
- en: 'To run the Hooks code for Scenarios Tagged with `@important` but NOT `@regression`,
    comment the preceding code in the `Hooks.java` file and add the following code
    to it:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为标记为 `@important` 但 NOT `@regression` 的场景运行钩子代码，在 `Hooks.java` 文件中注释掉之前的代码，并添加以下代码：
- en: '[PRE16]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00144.jpeg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行 `feature` 文件并观察输出：![如何操作](img/image00144.jpeg)
- en: The code will be run before Scenario 1, which has the `@important` (by inheritance)
    and NOT the `@regression` Tag.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码将在具有 `@important`（通过继承）且 NOT `@regression` 标签的 Scenario 1 之前运行。
- en: 'To run Hooks code for Scenarios Tagged with `(important AND regression` OR
    `(important AND wip)`, comment the earlier code in the `Hooks.java` file and add
    the following code to it:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为标记为 `(important AND regression` 或 `(important AND wip)` 的场景运行钩子代码，在 `Hooks.java`
    文件中注释掉之前的代码，并添加以下代码：
- en: '[PRE17]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run the `feature` file from Eclipse and observe the output:![How to Do it](img/image00145.jpeg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行 `feature` 文件并观察输出：![如何操作](img/image00145.jpeg)
- en: The code will be run before Scenarios 2 and 3, which have the `@important` (by
    inheritance) and `@regression` Tags.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将在具有 `@important`（通过继承）和 `@regression` 标签的 Scenario 2 和 3 之前运行。
- en: How it works…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Now let's understand the concept of ANDing, ORing, and NOTing the Hooks.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来理解 ANDing、ORing 和 NOTing 钩子的概念。
- en: '**OR**: The Hooks code will be run when either of the mentioned Tags is associated
    with the Scenario. Tags are passed in a String and are comma separated. For example:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OR**：当提到的任何一个标签与场景相关联时，将运行钩子代码。标签以字符串形式传递，并以逗号分隔。例如：'
- en: '[PRE18]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**AND**: The Hooks code will be run when all the mentioned Tags are associated
    with the Scenario. Tags are passed as separate Tag Strings. For example:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AND**：当提到的所有标签都与场景相关联时，将运行钩子代码。标签作为单独的标签字符串传递。例如：'
- en: '[PRE19]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**NOT**: The Hooks code will be run when all of the mentioned Tags are not
    associated with the Scenario. Tags are passed as separate Tag Strings. For example:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOT**：当提到的所有标签都没有与场景相关联时，将运行钩子代码。标签作为单独的标签字符串传递。例如：'
- en: '[PRE20]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
