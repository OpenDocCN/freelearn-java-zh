- en: Chapter 4. Exception/SOAP Fault Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。异常/SOAP故障处理
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Handling server-side exceptions by returning an exception's message as a SOAP
    fault string
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将异常的消息作为SOAP故障字符串返回来处理服务器端异常
- en: Mapping exception class names to SOAP faults
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将异常类名称映射到SOAP故障
- en: Annotating exception classes with the `@SOAPFault`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@SOAPFault`对异常类进行注释
- en: Writing your own exception resolvers in Spring-WS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring-WS中编写自己的异常解析器
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The server-side exceptions generated while processing a Web-Service are transmitted
    as SOAP faults. The `SOAP <Fault>` element is used to carry error and status information
    within a SOAP message.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理Web服务时生成的服务器端异常被传输为SOAP故障。`SOAP <Fault>`元素用于在SOAP消息中携带错误和状态信息。
- en: 'The following code represents a general structure of the SOAP fault element
    in a SOAP message:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码表示SOAP消息中SOAP故障元素的一般结构：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If a `Fault` element is present, it must appear as a child element of the `Body`
    element. A `Fault` element can only appear once in a SOAP message.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在`Fault`元素，则必须作为`Body`元素的子元素出现。SOAP消息中只能出现一次`Fault`元素。
- en: Spring Web-Services offer smart mechanisms to handle SOAP faults with its easy-to-use
    API. The exceptions that are thrown when handling the request get picked up by
    `MessageDispatcher` and get delegated to any of the endpoint exception resolvers
    that are declared in the application context (XML or annotation). This exception
    resolver-based handling mechanism allows the developer to define custom behaviors
    (such as returning a customized SOAP fault) when a particular exception gets thrown.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web服务提供了智能机制来处理SOAP故障，其易于使用的API。在处理请求时抛出的异常由`MessageDispatcher`捕捉，并委托给应用程序上下文（XML或注释中声明的）中声明的任何端点异常解析器。这种异常解析器基于处理机制允许开发人员在抛出特定异常时定义自定义行为（例如返回自定义的SOAP故障）。
- en: This chapter starts with recipes for easy exception-handling mechanisms and
    then moves on to slightly complex scenarios.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从易于处理异常的机制开始，然后转向稍微复杂的情景。
- en: '`org.springframework.ws.server.EndpointExceptionResolver` is the primary specification/contract
    for server-side exception handling in Spring-WS. `org.springframework.ws.soap.server.endpoint.SimpleSoapExceptionResolver`
    is the default implementation of `EndpointExceptionResolver`, available in the
    Spring-WS framework. If not explicitly handled by the developer, `MessageDispatcher`
    handles the server-side exceptions with `SimpleSoapExceptionResolver`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.ws.server.EndpointExceptionResolver`是Spring-WS中服务器端异常处理的主要规范/合同。`org.springframework.ws.soap.server.endpoint.SimpleSoapExceptionResolver`是`EndpointExceptionResolver`的默认实现，可在Spring-WS框架中使用。如果开发人员没有明确处理，`MessageDispatcher`将使用`SimpleSoapExceptionResolver`处理服务器端异常。'
- en: The recipes in this chapter demonstrate different usages of `org.springframework.ws.server.EndpointExceptionResolver`
    and its implementations, including `SimpleSoapExceptionResolver`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例演示了`org.springframework.ws.server.EndpointExceptionResolver`及其实现的不同用法，包括`SimpleSoapExceptionResolver`。
- en: For demonstration purposes, the simplest recipe for building a Spring-WS is
    Simplifying the creation of a WebService using `MessageDispatcherServlet`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，构建Spring-WS的最简单的方法是使用`MessageDispatcherServlet`简化WebService的创建。
- en: Handling server-side exceptions by returning the exception's message as a SOAP
    fault string
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过将异常的消息作为SOAP故障字符串返回来处理服务器端异常
- en: Spring-WS framework automatically converts the description of application-level
    exception thrown in server-side into SOAP fault messages and includes it within
    response message and sends it back to the client. This recipe demonstrates catching
    the exception and setting a meaningful message to be sent back as a SOAP fault
    string in the response.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS框架会自动将服务器端抛出的应用程序级别异常的描述转换为SOAP故障消息，并将其包含在响应消息中发送回客户端。本示例演示了捕获异常并设置有意义的消息以作为响应中的SOAP故障字符串发送。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.1` (for server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，项目的名称是`LiveRestaurant_R-4.1`（用于服务器端Web服务），并具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-4.1-Client`
    (for the client-side Web-Service):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-4.1-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe uses projects from *Setting up an endpoint by annotating the payload-root*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*. The following steps describe how to modify the endpoint:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用了*通过注释负载根设置端点*中讨论的项目，该项目在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论了*构建SOAP
    Web服务*。以下步骤描述了如何修改端点：
- en: Modify the endpoint to throw an exception when an application/system error occurs.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改端点以在应用程序/系统错误发生时抛出异常。
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入的Tomcat服务器中构建和部署项目。
- en: 'Run the following command from the root of the project, in a command-line window:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目的根目录在命令行窗口中运行以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.1-Client`,
    and run the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试，打开一个新的命令窗口，转到文件夹`LiveRestaurant_R-4.1-Client`，并运行以下命令：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the output from the server-side console (note the `SOAP-Env:Fault`
    element generated in the message):'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出（请注意消息中生成的`SOAP-Env:Fault`元素）：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the output from the client-side console:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端控制台的输出：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the endpoint (`OrderServiceEndpoint`) in the handler method (`handlePlaceOrderRequest`),
    as the incoming message doesn''t contain a reference number, a simple `RuntimeException`
    is thrown. This symbolizes any unexpected runtime exception. For clarification,
    a meaningful error description **(Reference number is not provided!)** is passed
    to the exception:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在端点（`OrderServiceEndpoint`）的处理程序方法（`handlePlaceOrderRequest`）中，由于传入消息不包含参考编号，因此会抛出一个简单的`RuntimeException`。这象征着任何意外的运行时异常。为了澄清，一个有意义的错误描述**（未提供参考编号！）**被传递给异常：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see that there are no explicit exception resolvers configured for this
    project. The smart `MessageDispatcher` of the Spring-WS framework allocates a
    default exception resolver to handle any exception when there is no exception
    resolver configured. It uses `SimpleSoapExceptionResolver` to handle the situation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，对于这个项目没有配置显式的异常解析器。当没有配置异常解析器时，Spring-WS框架的智能`MessageDispatcher`会分配一个默认的异常解析器来处理任何异常。它使用`SimpleSoapExceptionResolver`来处理这种情况。
- en: '`SimpleSoapExceptionResolver` resolves the exception by performing the following
    operations:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleSoapExceptionResolver`通过执行以下操作解决异常：'
- en: Logs the exception to the logger (console, log file)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将异常记录到日志记录器（控制台，日志文件）
- en: Generates the SOAP fault message with the exception message as the fault string
    and returns as part of the response message
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成带有异常消息作为故障字符串的SOAP故障消息，并作为响应消息的一部分返回
- en: When we check the response message at the client side, we can see the exact
    exception message (Reference **number is not provided!)** that is set inside the
    method, `OrderServiceEndpoint. handlePlaceOrderRequest` is returned as the SOAP
    fault string in the response message.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在客户端检查响应消息时，可以看到在方法`OrderServiceEndpoint.handlePlaceOrderRequest`中设置的确切异常消息（未提供参考**编号！**）作为响应消息中的SOAP故障字符串返回。
- en: What is interesting here is that the developer doesn't need to do anything to
    handle and send the SOAP fault message, except for throwing an exception with
    a meaningful message.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，开发人员不需要做任何处理或发送SOAP故障消息，除了抛出一个带有有意义的消息的异常。
- en: See also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的配方*通过注释有效负载根设置端点*，*构建SOAP Web服务*。
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in [Chapter
    2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building Clients
    for SOAP Web-Services.*
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。构建SOAP Web服务的客户端")中讨论的配方*在HTTP传输上创建Web服务客户端*，*构建SOAP Web服务的客户端*。
- en: Mapping exception class names to SOAP faults
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将异常类名称映射到SOAP故障
- en: Spring-WS framework allows the SOAP fault messages to be customized easily in
    the bean-configuration file, `spring-ws-servlet.xml`. It uses a special exception
    resolver, `SoapFaultMappingExceptionResolver`, to do that job. We can map exception
    classes to the corresponding SOAP fault to be generated and returned to the client.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS框架允许在bean配置文件`spring-ws-servlet.xml`中轻松定制SOAP故障消息。它使用一个特殊的异常解析器`SoapFaultMappingExceptionResolver`来完成这项工作。我们可以将异常类映射到相应的SOAP故障，以便生成并返回给客户端。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.2` (for server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-4.2`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-4.2-Client`
    (for the client-side Web-Service):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-4.2-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the projects from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了*通过注释有效负载根设置端点*中的项目，在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论，*构建SOAP Web服务*。
- en: Create a custom exception class `DataOutOfRangeException.java`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义异常类`DataOutOfRangeException.java`。
- en: Modify `OrderServiceEndpoint` to throw `DataOutOfRangeException`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`OrderServiceEndpoint`以抛出`DataOutOfRangeException`。
- en: Register `SoapFaultMappingExceptionResolver` in `spring-ws-servlet.xml`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`spring-ws-servlet.xml`中注册`SoapFaultMappingExceptionResolver`。
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入的Tomcat服务器中构建和部署项目。
- en: 'Run the following command from the root of the project, in a command-line window:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目的根目录，在命令行窗口中运行以下命令：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.2-Client`,
    and run the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试，打开一个新的命令窗口，转到文件夹`LiveRestaurant_R-4.2-Client`，并运行以下命令：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the output from the server-side console (note that the `SOAP-Env:Fault`
    element is generated in the message):'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出（请注意，消息中生成了`SOAP-Env:Fault`元素）：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the output from the client-side console:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端控制台的输出：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the preceding code, the `OrderServiceEndpoint.placeOrderRequest` method
    throws a custom exception, `DataOutOfRangeException`, which symbolizes a typical
    server-side exception:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`OrderServiceEndpoint.placeOrderRequest`方法抛出一个自定义异常`DataOutOfRangeException`，它象征着典型的服务器端异常：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This exception is caught by `MessageDispatcher` and delegated to the configured
    exception resolvers. In this project, `SoapFaultMappingExceptionResolver` is used,
    which is a special kind of resolver that allows the exception classes to be mapped
    with custom messages in the configuration file. In this example, a different message
    is used to map against `DataOutOfRangeException`. It acts as an interceptor that
    converts the SOAP fault message into whatever is given in the following mapping:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageDispatcher`捕获了这个异常，并将其委托给配置的异常解析器。在这个项目中，使用了`SoapFaultMappingExceptionResolver`，这是一种特殊的解析器，允许在配置文件中将异常类与自定义消息进行映射。在这个例子中，使用了不同的消息来映射`DataOutOfRangeException`。它充当拦截器，将SOAP故障消息转换为以下映射中给定的内容：'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The generated SOAP fault message is logged in at both the server-side as well
    as the client-side console screens. It displays the mapped SOAP fault message
    instead of what is originally thrown by the `DataOutOfRangeException` class.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的SOAP故障消息在服务器端和客户端控制台屏幕上都有记录。它显示了映射的SOAP故障消息，而不是`DataOutOfRangeException`类最初抛出的内容。
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This powerful facility to map exceptions with SOAP fault strings is very useful
    for externalizing SOAP fault management from the code. It gives developers the
    flexibility to change the SOAP fault string, based on any business requirements
    at a later stage, without touching the code and rebuilding it. Moreover, if properly
    designed, this feature, with its configuration (SOAP fault mapping) in the `spring-ws.xml`
    file, can serve as a single point of reference for all possible SOAP fault messages
    of the services that can be maintained easily.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个强大的功能可以将异常与SOAP故障字符串进行映射，非常有用，可以将SOAP故障管理外部化，不需要修改代码并重新构建。此外，如果设计得当，`spring-ws.xml`文件中的配置（SOAP故障映射）可以作为所有可能的SOAP故障消息的单一参考点，可以轻松维护。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is a good solution for B2B applications. Not good for B2C, when supporting
    multiple languages. In general, the best way to do this is by configuring messages
    in the database. This way, we can change them and fix them during runtime. The
    drawback in configuring in XML is that it needs to restart. In real time, one
    app runs on 30 servers. Deploying and restarting are painful processes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是B2B应用的一个很好的解决方案。不适用于B2C，因为需要支持多种语言。一般来说，最好的方法是通过在数据库中配置消息。这样，我们可以在运行时更改和修复它们。在XML中配置的缺点是需要重新启动。在实时情况下，一个应用在30台服务器上运行。部署和重新启动是痛苦的过程。
- en: See also
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*通过注释有效负载根设置端点*的配方，*构建SOAP Web服务*。
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in [Chapter
    2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building Clients
    for SOAP Web-Service*
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。构建SOAP Web服务的客户端")中讨论的*在HTTP传输上创建Web服务客户端*配方，*构建SOAP Web服务的客户端*
- en: The recipe *Handling server-side exceptions by returning exception's message
    as a SOAP fault string*, discussed in this chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的*通过将异常消息作为SOAP故障字符串返回来处理服务器端异常*的配方。
- en: Annotating exception classes with @SOAPFault
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用@SOAPFault对异常类进行注释
- en: Spring-WS framework allows application exceptions to be annotated to SOAP fault
    messages and customized easily in the exception class itself. It uses a special
    exception-resolver, `SoapFaultAnnotationExceptionResolver`, for that job. SOAP
    fault string and fault code can be customized by annotating in the class.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS框架允许将应用程序异常注释为SOAP故障消息，并在异常类本身中进行轻松定制。它使用一个特殊的异常解析器`SoapFaultAnnotationExceptionResolver`来完成这项工作。可以通过在类中进行注释来定制SOAP故障字符串和故障代码。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.3` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-4.3`（服务器端Web服务），并且具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-4.3-Client`
    (for the client-side Web-Service):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-4.3-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the project from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as server-side and the recipe *How to integrate
    test using Spring-Junit support*, discussed in [Chapter 3](ch03.html "Chapter 3. Testing
    and Monitoring Web-Services"), *Testing and Monitoring Web-Services*, as client-side.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*通过注释有效负载根设置端点*的项目作为服务器端，以及[第3章](ch03.html
    "第3章。测试和监控Web服务")中讨论的*如何使用Spring-Junit支持集成测试*的配方作为客户端。
- en: Create a custom exception class (`InvalidOrdeRequestException.java`), which
    is annotated with `@SoapFault`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义异常类（`InvalidOrdeRequestException.java`），并用`@SoapFault`进行注释。
- en: Create a custom exception class (`OrderProcessingFailedException.java`), which
    is annotated with `@SoapFault`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义异常类（`OrderProcessingFailedException.java`），并用`@SoapFault`进行注释。
- en: Modify `Endpoint(OrderServiceEndpoint)` to throw both `InvalidOrderRequestException`
    and `OrderProcessingFailedException`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Endpoint（OrderServiceEndpoint）`以抛出`InvalidOrderRequestException`和`OrderProcessingFailedException`。
- en: Register `SoapFaultAnnotationExceptionResolver` in the server application context
    file (`spring-ws-servlet.xml`).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器应用程序上下文文件（`spring-ws-servlet.xml`）中注册`SoapFaultAnnotationExceptionResolver`。
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入的Tomcat服务器中构建和部署项目。
- en: 'Run the following command from the root of the project, in a command-line window:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目的根目录，在命令行窗口中运行以下命令：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.3-Client`,
    and run the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试，打开一个新的命令窗口，进入文件夹`LiveRestaurant_R-4.3-Client`，并运行以下命令：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the output from the client-side console (please note the SOAP-Env:Fault
    element generated in the message):'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端控制台的输出（请注意消息中生成的SOAP-Env:Fault元素）：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the endpoint''s methods, `OrderServiceMethodEndoint.processOrder` (`placeOrderRequest`
    and `cancelOrderRequest)`, custom exceptions are thrown `(ProcessingFailedException`
    and `InvalidOrderRequestException)` that symbolize a typical server-side/client-side
    exception:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在端点的方法中，`OrderServiceMethodEndoint.processOrder`（`placeOrderRequest`和`cancelOrderRequest`），抛出自定义异常（`ProcessingFailedException`和`InvalidOrderRequestException`），代表典型的服务器端/客户端异常：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This exception is caught by the `MessageDispatcher` and delegates to the configured
    exception resolvers. In this project, `SoapFaultAnnotationExceptionResolver` is
    used, which is a special kind of resolver that allows the exception classes to
    be annotated with custom fault-code and fault-strings in the class. `SoapFaultAnnotationExceptionResolver`
    is configured to be used in `spring-ws-servlet.xml`, thus any exception handling
    is delegated to it by `MessageDispatcherServlet` at runtime:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个异常被`MessageDispatcher`捕获并委托给配置的异常解析器。在这个项目中，使用了`SoapFaultAnnotationExceptionResolver`，这是一种特殊的解析器，允许异常类在类中用自定义的故障代码和故障字符串进行注释。`SoapFaultAnnotationExceptionResolver`被配置为在`spring-ws-servlet.xml`中使用，因此任何异常处理都会在运行时由`MessageDispatcherServlet`委托给它：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`ProcessingFailedException` represents a server-side system exception `(faultCode
    = FaultCode.SERVER):`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessingFailedException`代表服务器端系统异常（faultCode = FaultCode.SERVER）：'
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`InvalidOrderRequestException` represents a client-side business logic exception
    (faultCode `= FaultCode.CLIENT):`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`InvalidOrderRequestException`代表客户端业务逻辑异常（faultCode `= FaultCode.CLIENT）：`'
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can see that the annotated `faultStringOrReason` is generated as a SOAP
    fault and is transmitted back to the client. The generated SOAP fault message,
    which is logged in both the server-side as well as client-side console screens,
    displays the annotated SOAP fault message instead of what is originally thrown
    in the `Endpoint` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，带注释的`faultStringOrReason`被生成为SOAP故障，并传输回客户端。生成的SOAP故障消息在服务器端和客户端控制台屏幕上都被记录，显示了带注释的SOAP故障消息，而不是在`Endpoint`类中最初抛出的内容。
- en: There's more...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The attribute `faultCode` of the `@SoapFault` annotation has the following
    possible enumerated values:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SoapFault`注释的`faultCode`属性具有以下可能的枚举值：'
- en: '`CLIENT`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CLIENT`'
- en: '`CUSTOM`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CUSTOM`'
- en: '`RECEIVER`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RECEIVER`'
- en: '`SENDER`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SENDER`'
- en: The selection of one from the enumerated list instructs the dispatcher which
    kind of SOAP fault is to be generated along with its specifics. Based on the preceding
    selection, dependent attributes become mandatory.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 从枚举列表中选择一个指示调度程序应生成哪种SOAP故障以及其具体内容。根据前面的选择，依赖属性变得强制性。
- en: For example, if `FaultCode.CUSTOM` is selected for `faultCode`, the property
    `customFaultCode` string must be used instead of `faultStringOrReason`, as given
    in the code snippet of this recipe. The format used for `customFaultCode` is that
    of `QName.toString()`, that is, `"{" + Namespace URI + "}" + local part`, where
    the namespace is optional. Note that custom fault codes are only supported on
    SOAP 1.1.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果为`faultCode`选择了`FaultCode.CUSTOM`，则必须使用`customFaultCode`字符串属性，而不是`faultStringOrReason`，如本配方的代码片段中所示。用于`customFaultCode`的格式是`QName.toString()`的格式，即`"{"
    + Namespace URI + "}" + local part`，其中命名空间是可选的。请注意，自定义故障代码仅在SOAP 1.1上受支持。
- en: The `@SoaPFault` annotation has one more attribute, namely, locale, which decides
    the language of the SOAP fault message. The default locale is English.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SoaPFault`注释还有一个属性，即locale，它决定了SOAP故障消息的语言。默认语言环境是英语。'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In general practice, we use error codes rather than error messages. Mapping
    will be done on the client side using mapping information. This avoids any load
    on the network and there will be no issue with multiple language support.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在一般实践中，我们使用错误代码而不是错误消息。在客户端使用映射信息进行映射。这样可以避免对网络的任何负载，并且不会出现多语言支持的问题。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*通过注释有效负载根设置端点*的配方，*构建SOAP Web服务。*
- en: The recipe *How to integrate test using Spring-JUnit support*, discussed in
    [Chapter 3](ch03.html "Chapter 3. Testing and Monitoring Web-Services"),*Testing
    and Monitoring Web-Services.*
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。测试和监控Web服务")中讨论的*如何使用Spring-JUnit支持集成测试*的配方，*测试和监控Web服务。*
- en: The recipe *Mapping exception class names to SOAP faults*, discussed in this
    chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的*将异常类名映射到SOAP故障*的配方。
- en: Writing your own exception resolvers in Spring-WS
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring-WS中编写自己的异常解析器
- en: While Spring-WS framework provides default mechanisms to handle exceptions using
    the standard exception resolvers, it allows developers to handle exceptions in
    their own way by building their own exception resolvers. SOAP faults can be customized
    to add custom details in their own formats and transmitted back to the client.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS框架提供了默认机制来处理异常，使用标准异常解析器，它允许开发人员通过构建自己的异常解析器来以自己的方式处理异常。SOAP故障可以定制以在其自己的格式中添加自定义细节，并传输回客户端。
- en: This recipe illustrates a custom exception resolver that adds the exception
    stack trace to the SOAP fault detail element of the SOAP response, so that the
    client will get the complete stack trace of the server-side exception, which is
    very useful for certain cases. This custom exception resolver already carries
    the power of annotations, as in the previous recipe.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例说明了一个自定义异常解析器，它将异常堆栈跟踪添加到SOAP响应的SOAP故障详细元素中，以便客户端获取服务器端异常的完整堆栈跟踪，对于某些情况非常有用。这个自定义异常解析器已经具有注释的功能，就像前面的示例一样。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.4` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，项目的名称是`LiveRestaurant_R-4.4`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-4.4-Client` (for the client side) has the following Maven
    dependencies:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-4.4-Client`（用于客户端）具有以下Maven依赖项：'
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This recipe uses the project from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方使用了*通过注释payload-root设置端点*中讨论的项目，[第1章](ch01.html "第1章。构建SOAP Web服务")，*构建SOAP
    Web服务*。
- en: Create a custom exception resolver, `DetailedSoapFaultExceptionResolver`, extending
    `SoapFaultAnnotationExceptionResolver`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个自定义异常解析器`DetailedSoapFaultExceptionResolver`，扩展`SoapFaultAnnotationExceptionResolver`。
- en: Register `DetailedSoapFaultExceptionResolver` in `spring-ws-servlet.xml`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`spring-ws-servlet.xml`中注册`DetailedSoapFaultExceptionResolver`。
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven嵌入的Tomcat服务器中构建和部署项目。
- en: 'Run the following command from the root of the project, in a command-line window:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目的根目录，在命令行窗口中运行以下命令：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.4-Client`,
    and run the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行测试，请打开一个新的命令窗口，转到文件夹`LiveRestaurant_R-4.4-Client`，并运行以下命令：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following is the output from the server-side console (note the `SOAP-Env:Fault`
    element generated in the message):'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是服务器端控制台的输出（请注意在消息中生成的`SOAP-Env:Fault`元素）：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the preceding code, our custom exception resolver, `DetailedSoapFaultExceptionResolver`,
    which is a subclass of `SoapFaultAnnotationExceptionResolver`, overrides the method
    `custmizeFault()` to add an exception stack trace into the SOAP fault detail element.
    The method `stackTraceToString()` returns the exception stack trace from a given
    exception, and it is used to set the stack trace to the detail element of the
    SOAP fault of the response message.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们的自定义异常解析器`DetailedSoapFaultExceptionResolver`是`SoapFaultAnnotationExceptionResolver`的子类，覆盖了方法`custmizeFault()`，将异常堆栈跟踪添加到SOAP故障详细元素中。方法`stackTraceToString()`从给定的异常返回异常堆栈跟踪，并用于将堆栈跟踪设置为响应消息的SOAP故障的详细元素。
- en: There's more...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many different ways of creating custom exception resolvers. It is
    not just `SoapFaultAnnotationExceptionResolver` that can be inherited for that
    purpose. Any implementation of `org.springframework.ws.server.EndpointExceptionResolver`
    can be configured appropriately to be used as an exception resolver. Developers
    can choose from a set of very convenient implementations of `EndpointExceptionResolver`,
    available in the Spring-WS API, leveraging the power of these implementations.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的创建自定义异常解析器的方法。不仅可以继承`SoapFaultAnnotationExceptionResolver`来实现这一目的。任何`org.springframework.ws.server.EndpointExceptionResolver`的实现都可以适当配置为用作异常解析器。开发人员可以从Spring-WS
    API中提供的一组非常方便的`EndpointExceptionResolver`实现中进行选择，利用这些实现的功能。
- en: The place for customizing these classes is the method, `customizeFault`. The
    SOAP fault can be customized by overriding the method `customizeFault`. Take a
    look at the package `org.springframework.ws.soap.server.endpoint` for the readily
    available exception resolvers that suit your requirement.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义这些类的位置是方法`customizeFault`。可以通过覆盖方法`customizeFault`来自定义SOAP故障。查看包`org.springframework.ws.soap.server.endpoint`，以获取适合您要求的现成异常解析器。
- en: '`AbstractSoapFaultDefinitionExceptionResolver` would be an ideal starting point
    to extend, if an exclusively custom exception resolver needs to be developed that
    doesn''t fit with the currently available implementations, as it has already implemented
    some of the very common and basic functionality that are needed for any exception
    resolvers. The developer just needs to implement the abstract method, `resolveExceptionInternal()`,
    to suit your specific need.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要开发一个与当前可用实现不符的专门自定义异常解析器，则`AbstractSoapFaultDefinitionExceptionResolver`将是一个理想的起点，因为它已经实现了一些任何异常解析器都需要的非常常见和基本功能。开发人员只需实现抽象方法`resolveExceptionInternal()`，以满足特定需求。
- en: What needs to be taken care of is that `MessageDispatcherServlet` should be
    instructed to consider the resolver in use, either by registering in `spring-ws-servlet.xml`
    or annotating in the exception class (in addition to registering in `spring-ws-servlet.xml)`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，应该指示`MessageDispatcherServlet`考虑使用的解析器，可以通过在`spring-ws-servlet.xml`中注册或在异常类中进行注释（除了在`spring-ws-servlet.xml`中注册）。
- en: See also
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services*
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方*通过注释payload-root设置端点*中讨论的项目，[第1章](ch01.html "第1章。构建SOAP Web服务")，*构建SOAP
    Web服务*。
- en: The recipe *Annotating Exception classes with @SOAP fault*, discussed in this
    chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的配方*使用@SOAP fault注释异常类*。
