- en: Flux and Mono (Reactor Support) in Spring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring中的Flux和Mono（Reactor支持）
- en: In this chapter, we will walk the reader through more practical approaches to
    supporting Reactor in Spring 5, including Flux and Mono. The user will get hands-on
    experience with Flux and Mono, with simple JSON as the result.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向读者介绍更多在Spring 5中支持Reactor的实际方法，包括Flux和Mono。用户将通过简单的JSON结果亲身体验Flux和Mono。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Reactive programming and benefits
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reactive编程和好处
- en: Reactive Core and Streams
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reactive Core和Streams
- en: Flux and Mono in Spring REST
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring REST中的Flux和Mono
- en: User classes with Reactive—REST
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Reactive的用户类——REST
- en: Benefits of Reactive programming
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reactive编程的好处
- en: Let's assume we have one million user transactions happening in our application.
    Next year, it is going to increase to 10 million, so we need to scale it. The
    traditional method of doing this is to add enough servers (horizontal scaling).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的应用程序中有一百万个用户交易正在进行。明年，这个数字将增加到1000万，所以我们需要进行扩展。传统的方法是添加足够的服务器（水平扩展）。
- en: Instead of doing horizontal scaling, what if we get an option to scale with
    the same servers? Yes, Reactive programming will help us to do that. Reactive
    programming is all about non-blocking applications that are synchronous and event-driven,
    and it doesn't require a lot of threads to scale vertically (within the JVM) rather
    than horizontally (through clustering).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不进行水平扩展，而是选择使用相同的服务器进行扩展，会怎么样？是的，Reactive编程将帮助我们做到这一点。Reactive编程是关于非阻塞的、同步的、事件驱动的应用程序，不需要大量线程进行垂直扩展（在JVM内部），而不是水平扩展（通过集群）。
- en: Reactive types are not intended to process requests faster. However, they focus
    more on request concurrency, especially requesting data from a remote server efficiently.
    With Reactive type support, you will get higher-quality service. While comparing
    traditional processing, which blocks the current thread while waiting for a result,
    a Reactive API requests only the amount of data that can be consumed. Reactive
    APIs deal with streams of data, not only with individual elements one by one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Reactive类型并不是为了更快地处理请求。然而，它们更关注请求并发性，特别是有效地从远程服务器请求数据。通过Reactive类型的支持，您将获得更高质量的服务。与传统处理相比，传统处理在等待结果时会阻塞当前线程，而Reactive
    API仅请求可以消耗的数据量。Reactive API处理数据流，而不仅仅是单个元素。
- en: Overall, Reactive programming is about non-blocking, event-driven applications
    that can be scaled with a small number of threads, with back pressure as a main
    component to make sure the producers (emitters) do not overwhelm consumers (receivers).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Reactive编程是关于非阻塞、事件驱动的应用程序，可以通过少量线程进行扩展，背压是确保生产者（发射器）不会压倒消费者（接收器）的主要组成部分。
- en: Reactive Core and Streams
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reactive Core和Streams
- en: Java 8 introduced Reactive Core, which implements the Reactive programming model
    and is built on top of the Reactive Streams specification, a standard for building
    Reactive applications. As the lambda syntax gives more flexibility to go for the
    event-driven approach Java 8 provides the best way to support Reactive. Also,
    Java's lambda syntax gives us the ability to create and spawn up small and independent
    asynchronous tasks. One of the main goals of Reactive Streams is to address the
    problem of back pressure. We will talk more about back pressure in a later section
    of this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8引入了Reactive Core，它实现了Reactive编程模型，并建立在Reactive Streams规范之上，这是构建Reactive应用程序的标准。由于lambda语法为事件驱动方法提供了更大的灵活性，Java
    8提供了支持Reactive的最佳方式。此外，Java的lambda语法使我们能够创建和启动小型和独立的异步任务。Reactive Streams的主要目标之一是解决背压问题。我们将在本章的后面部分更多地讨论背压问题。
- en: The main difference between Java 8 Streams and Reactive Streams is that Reactive
    is a push model, whereas Java 8 Streams focuses on pulling. In Reactive Streams,
    based on consumer needs and numbers, all events will be pushed to consumers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 Streams和Reactive Streams之间的主要区别在于Reactive是推模型，而Java 8 Streams侧重于拉模型。在Reactive
    Streams中，根据消费者的需求和数量，所有事件都将被推送给消费者。
- en: Reactive programming model support is Spring 5's best feature since the last
    release. Also, with the support of the Akka and Play framework, Java 8 provides
    a better platform for Reactive applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自上次发布以来，Spring 5对Reactive编程模型的支持是其最佳特性。此外，借助Akka和Play框架的支持，Java 8为Reactive应用程序提供了更好的平台。
- en: 'Reactor is built on top of the Reactive Streams specification. Reactive Streams
    is a bundle of four Java interfaces:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Reactor是建立在Reactive Streams规范之上的。Reactive Streams是四个Java接口的捆绑包：
- en: '`Publisher`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Publisher`'
- en: '`Subscriber`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Subscriber`'
- en: '`Subscription`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Subscription`'
- en: '`Processor`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Processor`'
- en: '`Publisher` will publish a stream of data items to the subscribers that registered
    with the `Publisher`. Using an executor, the `Publisher` publishes the items to
    the `Subscriber`. Also, `Publisher` makes sure that the `Subscriber` method invocations
    for each subscription are strictly ordered.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Publisher`将数据项的流发布给注册在`Publisher`上的订阅者。使用执行器，`Publisher`将项目发布给`Subscriber`。此外，`Publisher`确保每个订阅的`Subscriber`方法调用严格有序。'
- en: '`Subscriber` consumes items only when requested. You can cancel the receiving
    process any time by using `Subscription`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Subscriber`只有在请求时才消耗项目。您可以通过使用`Subscription`随时取消接收过程。'
- en: '`Subscription` behaves as a message mediator between the `Publisher` and the
    `Subscriber`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Subscription`充当`Publisher`和`Subscriber`之间的消息中介。'
- en: '`Processor` represents a processing stage, which can include both `Subscriber`
    and a `Publisher`. `Processor` can initiate back pressure and cancel the subscription,
    as well.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Processor`代表一个处理阶段，可以包括`Subscriber`和`Publisher`。`Processor`可以引发背压并取消订阅。'
- en: Reactive Streams is a specification for asynchronous stream processing, which
    means all events can be produced and consumed asynchronously.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Reactive Streams是用于异步流处理的规范，这意味着所有事件都可以异步产生和消费。
- en: Back pressures and Reactive Streams
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背压和Reactive Streams
- en: 'Back pressure is a mechanism that authorizes the receiver to define how much
    data it wants from the emitter (data provider). The main objective of Reactive
    Streams is all about handling back pressure. It allows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 反压是一种机制，授权接收器定义它希望从发射器（数据提供者）获取多少数据。响应式流的主要目标是处理反压。它允许：
- en: The control to go to the receiver, to get data after it is ready to be processed
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据准备好被处理后，控制转到接收器以获取数据
- en: Defining and controlling the amount of data to be received
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和控制要接收的数据量
- en: Efficient handling of the slow emitter / fast receiver or fast emitter / slow
    receiver scenarios
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效处理慢发射器/快接收器或快发射器/慢接收器的情况
- en: WebFlux
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebFlux
- en: As of September 2017, Spring announced the general availability of 5\. Spring
    5 introduced a Reactive web framework called Spring WebFlux. It is a non-blocking
    web framework that uses Reactor to support the Reactive Streams API.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2017年9月，Spring宣布了5的一般可用性。Spring 5引入了一个名为Spring WebFlux的响应式Web框架。这是一个非阻塞的Web框架，使用Reactor来支持Reactive
    Streams API。
- en: As traditionally, blocking threads consume resources, there was a necessity
    for non-blocking async programming to play a better role. The Spring tech team
    introduced a non-blocking async programming model to handle a large number of
    concurrent requests, especially for latency-sensitive workloads. This concept
    will be mainly used in mobile applications and microservices. Also, this WebFlux
    will be the best fix for scenarios with many clients and uneven workloads.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，阻塞线程会消耗资源，因此需要非阻塞异步编程来发挥更好的作用。Spring技术团队引入了非阻塞异步编程模型，以处理大量并发请求，特别是对延迟敏感的工作负载。这个概念主要用于移动应用程序和微服务。此外，这个WebFlux将是处理许多客户端和不均匀工作负载的最佳解决方案。
- en: Basic REST API
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本REST API
- en: To understand the practical part of Reactive components such as Flux and Mono,
    we will have to create our own REST API and start implementing Flux and Mono classes
    in our API. In this chapter, we will build a simple REST web service that returns
    `Aloha`. Before moving into the implementation part, we will focus on the components
    involved in creating a RESTful web service.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解Flux和Mono等响应式组件的实际部分，我们将不得不创建自己的REST API，并开始在API中实现Flux和Mono类。在本章中，我们将构建一个简单的REST
    Web服务，返回`Aloha`。在进入实现部分之前，我们将专注于创建RESTful Web服务所涉及的组件。
- en: 'In this section, we will cover the following topics:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主题：
- en: 'Flux and Mono—introduction of Spring 5: Functional Web Framework components'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flux和Mono - Spring 5的介绍：功能性Web框架组件
- en: Flux and Mono—in the REST API
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flux和Mono - 在REST API中
- en: Flux
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flux
- en: Flux is one of the main types in Reactor. A Flux is the equivalent of an RxJava
    Observable, capable of emitting zero or more items, and then, optionally, either
    completing or failing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Flux是Reactor中的主要类型之一。Flux相当于RxJava的Observable，能够发出零个或多个项目，然后选择性地完成或失败。
- en: Flux is one of the Reactive types that implement the `Publisher` interface from
    the Reactive Streams manifesto. Flux's main role is to deal with streams of data.
    Flux mainly represents a stream of *N* elements.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Flux是实现了Reactive Streams宣言中的`Publisher`接口的Reactive类型之一。Flux的主要作用是处理数据流。Flux主要表示*N*个元素的流。
- en: Flux is a publisher, a sequence of events of a specific **Plain Old Java Object**
    (**POJO**) type.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Flux是一个发布者，特定**普通旧Java对象**（**POJO**）类型的事件序列。
- en: Mono
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mono
- en: Mono is another type of Reactor can emit only one item at the most. An asynchronous
    task that just wants to signal completion can use a Mono. Mono mainly deals with
    a stream of one element, as opposed to Flux's *N* elements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Mono是Reactor的另一种类型，最多只能发出一个项目。只想要发出完成信号的异步任务可以使用Mono。Mono主要处理一个元素的流，而不是Flux的*N*个元素。
- en: Both Flux and Mono make use of this semantic by coercing to the relevant type
    when using some operations. For example, concatenating two Monos together will
    produce a Flux; on the other hand, calling `single()` on `Flux<T>` will return
    a `Mono <T>`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Flux和Mono都利用这种语义，在使用一些操作时强制转换为相关类型。例如，将两个Monos连接在一起将产生一个Flux；另一方面，在`Flux<T>`上调用`single()`将返回一个`Mono
    <T>`。
- en: Both Flux and Mono are **Reactive Streams** (**RS**) publisher implementations
    and conform to Reactive-pull back pressure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Flux和Mono都是**Reactive Streams**（**RS**）发布者实现，并符合Reactive-pull反压。
- en: Mono is used in specific scenarios like an HTTP request that produces only one
    response. In such cases, using Mono would be the right choice.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Mono在特定场景中使用，比如只产生一个响应的HTTP请求。在这种情况下，使用Mono将是正确的选择。
- en: Returning a `Mono<HttpResponse>` for an HTTP request like the scenario mentioned
    earlier is better than returning a `Flux<HttpResponse>`, as it offers only operators
    that are relevant to a context of zero items or one item.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`Mono<HttpResponse>`来处理HTTP请求，就像前面提到的情况一样，比返回`Flux<HttpResponse>`更好，因为它只提供与零个或一个项目的上下文相关的操作符。
- en: Mono can be used to represent no-value asynchronous processes that only have
    the concept of completion.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Mono可以用来表示没有值的异步过程，只有完成的概念。
- en: User class with Reactive – REST
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有Reactive的User类 - REST
- en: In the first chapter, we introduced `Ticket` and `User`, two classes involved
    with our web service. As the `Ticket` class is a little complex compared to the
    `User` class, we will use the `User` class to understand Reactive components.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们介绍了`Ticket`和`User`，这两个类与我们的Web服务有关。由于`Ticket`类与`User`类相比有点复杂，我们将使用`User`类来理解响应式组件。
- en: As Reactive in Spring 5 is not fully stable yet, we are going to talk about
    Reactive in only a few chapters. So we will create a separate package for Reactive-based
    REST APIs. Also, we will add Reactive-based dependencies in our existing `pom.xml`
    file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Spring 5中的响应式还不是完全稳定的，我们只会在几章中讨论响应式。因此，我们将为基于响应式的REST API创建一个单独的包。此外，我们将在现有的`pom.xml`文件中添加基于响应式的依赖项。
- en: 'First, we will have to add all Reactive dependencies. Here, we will add the
    code in our existing `pom.xml` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将不得不添加所有的响应式依赖。在这里，我们将在现有的`pom.xml`文件中添加代码：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For Reactive-related work, you can either use an existing project, or you can
    create a new project to avoid conflicts with the Non-Reactive (plain) REST API.
    You can use [https://start.spring.io](https://start.spring.io) to get the basic
    project, and then update the Maven file with the preceding configuration.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与Reactive相关的工作，您可以使用现有项目，也可以创建一个新项目，以避免与非Reactive（普通）REST API发生冲突。您可以使用[https://start.spring.io](https://start.spring.io)获取基本项目，然后使用上述配置更新Maven文件。
- en: 'In the preceding POM configuration, we have added Reactor dependencies on top
    of our existing dependencies (mentioned as follows):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的POM配置中，我们已经在现有的依赖项上添加了Reactor依赖项（如下所示）：
- en: '`reactive-streams`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reactive-streams`'
- en: '`reactor-core`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reactor-core`'
- en: '`reactor-netty`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reactor-netty`'
- en: '`tomcat-embed-core`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tomcat-embed-core`'
- en: '`spring-webflux`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-webflux`'
- en: These are the libraries needed in order to work with Reactors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用Reactor所需的库。
- en: 'The `User` class components are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`User`类的组件如下：'
- en: '`userid`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userid`'
- en: '`username`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`'
- en: '`user_email`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_email`'
- en: '`user_type` (admin, general user, CSR)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_type`（管理员，普通用户，CSR）'
- en: Here, we have four variables used for the `User` class. To make it simpler to
    understand Reactive components, we use only two variables (`userid`, `username`).
    Let's create a POJO class with only `userid` and `username`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`User`类的四个变量。为了更容易理解Reactive组件，我们只使用了两个变量（`userid`，`username`）。让我们创建一个只有`userid`和`username`的POJO类。
- en: 'The `User` POJO class is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`User` POJO类如下：'
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding class, I have used two variables and a constructor to fill
    the variables while instantiating. Also, getters/setters are used to access those
    variables.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的类中，我使用了两个变量和一个构造函数来在实例化时填充变量。同时，使用getter/setter来访问这些变量。
- en: 'Let''s create a Reactive repository for the `User` class:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`User`类创建一个Reactive存储库：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we have introduced a Reactive repository for `User` and
    a class with only one method, called `getAllUsers`. By using this method, we should
    be able to retrieve a list of users. Let's not talk about Flux now, as it will
    be discussed later.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们为`User`引入了一个Reactive存储库和一个只有一个方法的类，名为`getAllUsers`。通过使用这个方法，我们应该能够检索到用户列表。现在先不谈Flux，因为它将在以后讨论。
- en: 'You can see that this `UserRepository` is an interface. We need to have a concrete
    class to implement this interface in order to use this repository. Let''s create
    a concrete class for this Reactive repository:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这个`UserRepository`是一个接口。我们需要有一个具体的类来实现这个接口，以便使用这个存储库。让我们为这个Reactive存储库创建一个具体的类：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As Java 9 has immutable map available, we can make use of Immutable maps in
    our code. However these immutable objects applicable only for this chapter as
    we don't do any update on the existing entries.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java 9中有不可变映射可用，我们可以在我们的代码中使用不可变映射。然而，这些不可变对象仅适用于本章，因为我们不对现有条目进行任何更新。
- en: In next chapter, we will use regular map as we need to edit them in CRUD operations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用常规的映射，因为我们需要在CRUD操作中对它们进行编辑。
- en: 'At the moment, we are able to get a list of users from the concrete class.
    Right now we need a web handler to retrieve the users in the controller. Let''s
    create a handler now:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们能够从具体类中获取用户列表。现在我们需要一个web处理程序在控制器中检索用户。现在让我们创建一个处理程序：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we will have to create a server where we can keep REST APIs. In the
    following code, our `Server` class will create one REST API to get users:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将需要创建一个服务器来保留REST API。在下面的代码中，我们的`Server`类将创建一个REST API来获取用户：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will discuss more about how we did this in upcoming chapters. Just make sure
    that you are able to understand that the code is working and you can see the output
    on the browser by accessing the API.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中更多地讨论我们是如何做到这一点的。只要确保您能够理解代码是如何工作的，并且可以通过访问API在浏览器上看到输出。
- en: 'Run the `Server.class` and you will see the log:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`Server.class`，您将看到日志：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can access the API in a browser/SoapUI/Postman, or any other client:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在浏览器/SoapUI/Postman或任何其他客户端访问API：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we have used the `8081` port for the Reactive server, we will only have
    access to `8081` instead of `8080`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在Reactive服务器中使用了`8081`端口，我们只能访问`8081`而不是`8080`：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So far, we have seen how to set up a Maven build to support our basic implementation
    of a web service. Also, we learned how Maven is helpful in third-party library
    management, as well as Spring Boot, and a basic Spring REST project. In upcoming
    chapters, we will discuss more about Spring REST endpoints and Reactor support.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到如何设置Maven构建来支持我们的基本Web服务实现。此外，我们还学习了Maven在第三方库管理以及Spring Boot和基本Spring
    REST项目中的帮助。在接下来的章节中，我们将更多地讨论Spring REST端点和Reactor支持。
