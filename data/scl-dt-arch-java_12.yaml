- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Evaluating, Recommending, and Presenting Your Solutions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估、推荐和展示您的解决方案
- en: We started our journey with the basics of data engineering and learned various
    ways to solve data ingestion and data publishing problems. We learned about various
    architectural patterns, as well as the governance and security of the solution.
    In the preceding chapter, we discussed how we can achieve performance engineering
    and how to create a performance benchmark for our solution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从数据工程的基础知识开始，学习了各种解决数据摄取和数据发布问题的方法。我们了解了各种架构模式，以及解决方案的治理和安全。在前一章中，我们讨论了如何实现性能工程以及如何为我们的解决方案创建性能基准。
- en: By now, we have acquired multiple skills to architect efficient, scalable, and
    optimized data engineering solutions. However, as discussed in the *Responsibilities
    and challenges of a Java data architect* section of [*Chapter 1*](B17084_01.xhtml#_idTextAnchor014),
    *Basics of Modern Data Architecture*, a data architect has multiple roles to play.
    In an executive role, the data architect becomes the bridge between business and
    technology who can communicate ideas effectively and easily with the respective
    stakeholders. An architect’s job is not only to create the solution but also to
    present and sell their idea to executives and leadership (both functional and
    technical). In this chapter, we will focus on how to recommend and present a solution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经掌握了构建高效、可扩展和优化的数据工程解决方案的多种技能。然而，正如在[*第一章*](B17084_01.xhtml#_idTextAnchor014)中“*Java数据架构师的责任和挑战*”部分所讨论的，数据架构师扮演着多个角色。在执行角色中，数据架构师成为业务和技术之间的桥梁，能够与相关利益相关者有效地、轻松地沟通。架构师的工作不仅是要创造解决方案，还要向高管和领导层（包括职能和技术）展示并推销他们的想法。在本章中，我们将关注如何推荐和展示解决方案。
- en: In this chapter, we will start our discussion by talking about infrastructure
    and human resource estimation. As data architects, we need to recommend solutions.
    To do that, we will discuss how we can create a decision matrix to evaluate our
    solution and compare different alternatives. Then, we will learn about using decision
    charts effectively to choose an optimal architectural alternative. Finally, we’ll
    learn about a few basic tips and tricks to present the solution effectively.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从讨论基础设施和人力资源估算开始。作为数据架构师，我们需要推荐解决方案。为此，我们将讨论如何创建一个决策矩阵来评估我们的解决方案并比较不同的替代方案。然后，我们将学习如何有效地使用决策图来选择最佳架构替代方案。最后，我们将了解一些基本技巧和窍门，以有效地展示解决方案。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Creating cost and resource estimations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建成本和资源估算
- en: Creating an architectural decision matrix
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建架构决策矩阵
- en: Data-driven architectural decisions to mitigate risk
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据驱动架构决策以降低风险
- en: Presenting the solution and recommendations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示解决方案和建议
- en: Creating cost and resource estimations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建成本和资源估算
- en: In this section, we will discuss various considerations, methods, and techniques
    that we apply to create estimations. We will briefly discuss both infrastructure
    estimations as well as human resource estimations. Infrastructure estimations
    are closely related to capacity planning. So, we will start our discussion with
    capacity planning.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论我们应用以创建估算的各种考虑因素、方法和技巧。我们将简要讨论基础设施估算和人力资源估算。基础设施估算与容量规划密切相关。因此，我们将从容量规划开始讨论。
- en: Storage and compute capacity planning
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储和计算容量规划
- en: To create an infrastructure estimate, you have to find out the data storage
    needs (RAM, hard disks, volumes, and so on) and the compute needs (the number
    of CPUs/vCPUs and cores it should have). This process of figuring out the storage
    and compute needs is called capacity planning. We will start by learning about
    the factors that need to be considered while conducting capacity planning.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建基础设施估算，你必须找出数据存储需求（RAM、硬盘、卷等）和计算需求（应具备的CPU/vCPU数量和核心数）。确定存储和计算需求的过程称为容量规划。我们将首先学习在执行容量规划时需要考虑的因素。
- en: Factors that need to be considered while conducting capacity planning
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行容量规划时需要考虑的因素
- en: 'The following are the various factors that should be taken into consideration
    while creating a capacity plan:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建容量计划时，需要考虑以下各种因素：
- en: '**Input data rate**: Based on the type of application, data rates need to be
    factored in. For example, for a real-time or near-real-time application, the peak
    data rate should be considered while planning for the storage and compute capacity.
    For batch-based applications, either the median data rate or the average data
    rate should be considered. If the batch job runs daily, it is advisable to use
    median data rates for capacity planning. Median data rates are preferred over
    average data rates because median data rates are based on the densest distribution
    of data rates. So, it denotes the middle point of the most frequently recorded
    data rate. Hence, the median value is never affected by any outlier. On the other
    hand, the average data rate finds the average of all the data rates over time,
    including a few exceptional high or low data rates.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入数据速率**：根据应用类型，需要考虑数据速率。例如，对于实时或准实时应用，在规划存储和计算能力时，应考虑峰值数据速率。对于基于批处理的应用，应考虑中值数据速率或平均数据速率。如果批处理作业每天运行，建议在容量规划中使用中值数据速率。中值数据速率比平均数据速率更受欢迎，因为中值数据速率基于数据速率的密集分布。因此，它表示最频繁记录的数据速率的中点。因此，中值值永远不会受到任何异常值的影响。另一方面，平均数据速率在一段时间内找到所有数据速率的平均值，包括一些异常的高或低数据速率。'
- en: '**Data replication and RAID configurations**: Replication ensures high availability
    and data locality. Since it replicates the data to multiple nodes, systems, or
    partitions, we must consider the replication factor as well while planning for
    storage capacity. For example, if 5 GB of data is stored with a replication factor
    of 3, this means it stores two replicas in different systems, along with the original
    message. So, the total storage requirement to store 5 GB of data is 15 GB. The
    replication factor is often mistaken for RAID. While the replication factor ensures
    high availability using data locality, RAID ensures data safety at the physical
    storage level by ensuring redundancy at the storage array layer. For mission-critical
    use cases, it is advisable to take both replication and RAID into consideration
    while planning for storage capacity.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据复制和RAID配置**：复制确保了高可用性和数据局部性。由于它将数据复制到多个节点、系统或分区，因此在规划存储容量时，我们必须考虑复制因子。例如，如果使用复制因子3存储5GB的数据，这意味着它在不同的系统中存储了两个副本，以及原始消息。因此，存储5GB数据的总存储需求是15GB。复制因子常被误认为是RAID。虽然复制因子通过数据局部性确保了高可用性，但RAID通过在存储阵列层确保冗余，在物理存储级别确保数据安全。对于关键任务用例，在规划存储容量时，建议同时考虑复制和RAID。'
- en: '**Data retention**: Another important factor is data retention. Data retention
    is the time for which data needs to be retained in storage before it’s purged.
    This plays an important role as it determines how much storage is needed for accumulation
    purposes. One of the other things that comes into play in the cloud is the need
    for archival. Does data need to be archived? If that’s true, when should it be
    archived?'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据保留**：另一个重要因素是数据保留。数据保留是指数据在删除之前需要在存储中保留的时间。这起着重要作用，因为它决定了为了积累目的需要多少存储。在云中，另一个需要考虑的因素是存档需求。数据是否需要存档？如果是这样，何时应该存档？'
- en: Initially, data may be frequently accessed. Then, it can be infrequently accessed,
    and the company may want to store the data in an archival zone for long-term audit
    and reporting requirements. Such a scenario can be handled in the cloud by using
    specific strategies to save money. For example, we can use S3 intelligent tiering,
    which sends the data automatically from the S3 standard access to S3 infrequent
    access layers to the S3 Glacier layers based on the access frequency. This reduces
    **Operating Expenses** (**OpEx**) costs as you can make a lot of savings as you
    move your data from the standard access layer to Glacier.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 初始阶段，数据可能被频繁访问。然后，它可能被不频繁访问，公司可能希望将数据存储在存档区域以供长期审计和报告需求。这种场景可以通过在云中使用特定的策略来处理以节省资金。例如，我们可以使用S3智能分层，它根据访问频率自动将数据从S3标准访问层发送到S3不频繁访问层，再到S3
    Glacier层。这降低了**运营成本**（**OpEx**）成本，因为当你将数据从标准访问层移动到Glacier层时，你可以节省很多。
- en: '**Type of data platform**: It also matters whether you are running your application
    on-premises or in the public cloud. Capacity planning should consider the maximum
    required capacity while planning for on-premise deployment. But if you are planning
    for the cloud, it is advisable to go with a median capacity requirement and configure
    auto-scaling for peak loads. Since the cloud gives you the option of instant scaling
    as well as paying for only what you use, it makes sense to spin up the resources
    required to process the usual data volumes.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据平台类型**：您是否在本地或公共云上运行应用程序也很重要。在规划本地部署时，容量规划应考虑最大所需容量。但如果您正在规划云部署，建议采用中值容量需求，并为峰值负载配置自动扩展。由于云提供了即时扩展的选项，以及仅为您使用的部分付费，因此启动处理常规数据量所需的资源是有意义的。'
- en: '**Data growth**: Another thing you must consider is the growth rate of data.
    Based on various factors, growth rates may vary. It is important to factor in
    the growth rate since data engineering pipelines are usually long-term investments.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据增长**：您还必须考虑数据的增长率。基于各种因素，增长率可能会有所不同。考虑到数据工程管道通常是长期投资，因此考虑增长率非常重要。'
- en: '**Parallel executions in shared mode**: One of the other factors that we must
    take into account is shared resources and their effect on concurrent executions.
    For example, it helps us to correctly estimate the resource requirement of a big
    data cluster if we know that 10 jobs with an average approximate load of 100 GB
    may run simultaneously on the cluster. Similarly, to estimate the resource requirements
    of a Kubernetes cluster, we should be aware of the maximum number of pods that
    will be running simultaneously. This will help determine the size and number of
    physical machines and VMs you want to spawn.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享模式下的并行执行**：我们必须考虑的其他因素之一是共享资源及其对并发执行的影响。例如，如果我们知道在集群上可能同时运行10个平均负载约为100
    GB的作业，这将帮助我们正确估计大数据集群的资源需求。同样，为了估计Kubernetes集群的资源需求，我们应该了解将同时运行的最大Pod数量。这将有助于确定您想要启动的物理机器和虚拟机的数量和大小。'
- en: With that, we have learned about the various factors that need to be considered
    while doing storage and compute capacity planning. In the next section, we will
    look through a few examples of how these factors help in capacity planning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经了解了在进行存储和计算容量规划时需要考虑的各种因素。在下一节中，我们将探讨这些因素如何帮助进行容量规划。
- en: Applying these considerations to calculate the capacity
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将这些考虑因素应用于计算容量
- en: 'In this section, we will discuss a few examples where the aforementioned factors
    are used judiciously to calculate capacity. The following are a few use cases:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些例子，说明上述因素如何被巧妙地用于计算容量。以下是一些用例：
- en: '**Example 1**: Consider that we need to create a capacity plan for a big data
    cluster in an on-premise data center. Here, the input data rate is *R* records
    per second and each record is *B* bytes. The storage requirement for a day (![](img/B17084_12_001.png))
    can be calculated by multiplying *R* by *B* and multiplying the result by 86,400
    seconds. However, this calculation doesn’t include the replication or RAID factors.
    We must multiply the replication factor (here, *RF*) by it, as well as the overload
    factor (here, *OF*), due to RAID configurations (the overload factor for RAID
    0 is 1, RAID 5 is 1.5, and RAID 10 is 2). Hence, the formula to calculate the
    storage requirements for a day is as follows:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例 1**：假设我们需要为本地数据中心中的大数据集群制定容量计划。在这里，输入数据速率是每秒 *R* 条记录，每条记录是 *B* 字节。一天的存储需求（![](img/B17084_12_001.png)）可以通过将
    *R* 乘以 *B*，然后将结果乘以86,400秒来计算。然而，这个计算不包括复制或RAID因素。我们必须将复制因子（在这里，*RF*）以及由于RAID配置（RAID
    0的过载因子为1，RAID 5为1.5，RAID 10为2）的过载因子（在这里，*OF*）乘以它。因此，计算一天存储需求的公式如下：'
- en: '![](img/B17084_12_002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17084_12_002.jpg)'
- en: 'But the actual capacity requirement may be more than this. If there is a requirement
    to retain data for 7 days, we will get the total required storage by multiplying
    7 by ![](img/B17084_12_003.png). Now, let’s see how the growth factor can affect
    capacity planning. Based on the technology stack, volume of data and data access,
    and read pattern and frequency, we can set the total memory and compute. Let’s
    say that the calculated storage capacity is ![](img/B17084_12_004.png), memory
    is ![](img/B17084_12_005.png), compute is ![](img/B17084_12_006.png), and **Input/Output
    Operations per Second** (**IOPS**) is ![](img/B17084_12_007.png). Also, let’s
    say that the growth rate is *g* per year. So, the final resource requirement for
    the next year would be as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际容量需求可能超过这个数值。如果需要保留数据7天，我们将通过将7乘以![图片3](img/B17084_12_003.png)来得到所需的总存储量。现在，让我们看看增长因子如何影响容量规划。根据技术栈、数据量、数据访问以及读取模式和频率，我们可以设置总内存和计算能力。假设计算出的存储容量为![图片4](img/B17084_12_004.png)，内存为![图片5](img/B17084_12_005.png)，计算能力为![图片6](img/B17084_12_006.png)，**每秒输入/输出操作数**（**IOPS**）为![图片7](img/B17084_12_007.png)。此外，假设年增长率为*g*。因此，下一年度的最终资源需求如下：
- en: '![](img/B17084_12_008.jpg)![](img/B17084_12_009.jpg)![](img/B17084_12_010.jpg)![](img/B17084_12_011.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片8](img/B17084_12_008.jpg)![图片9](img/B17084_12_009.jpg)![图片10](img/B17084_12_010.jpg)![图片11](img/B17084_12_011.jpg)'
- en: In this example, we saw how our factors help size a Hadoop big data cluster.
    Hardware **Capital Expenditure** (**CapEx**) represents a significant investment
    upfront and requires recurring OpEx, hence a balance between the two needs to
    be attained for better TOC.. In the next example, we’ll explore how to size a
    Kafka cluster for real-time loads.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们看到了我们的因素是如何帮助确定Hadoop大数据集群的规模的。硬件**资本支出**（**CapEx**）代表了一笔重大的前期投资，并需要持续的操作支出（OpEx），因此需要在这两者之间取得平衡，以实现更好的总拥有成本（TOC）。在下一个例子中，我们将探讨如何为实时负载确定Kafka集群的规模。
- en: '**Example 2**: In this example, we are trying to predict the capacity of a
    Kafka cluster that receives 100 messages per second, where the retention period
    is 1 week and the average message size is 10 KB. Also, all topics have a replication
    factor of 3\. Here, a Kafka cluster contains two primary clusters – a Kafka cluster
    and a zookeeper cluster. For a zookeeper cluster in production, a dual-core or
    higher CPU should be used, along with a memory of 16 to 24 GB. 500 GB to 1 TB
    disk space should be fine for zookeeper nodes. For the Kafka broker nodes, we
    should run multi-core servers with 12 nodes and higher. It should also support
    hyperthreading. The usual normal memory requirement for a Kafka broker is between
    24 to 32 GB. Now, let’s calculate the storage needs for the broker. The following
    formula helps calculate the storage needs for each node:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例2**：在这个例子中，我们试图预测一个每秒接收100条消息的Kafka集群的容量，保留期为1周，平均消息大小为10 KB。此外，所有主题的副本因子均为3。在这里，一个Kafka集群包含两个主集群——一个Kafka集群和一个zookeeper集群。对于生产中的zookeeper集群，应使用双核或更高CPU，并配备16至24
    GB的内存。对于zookeeper节点，500 GB至1 TB的磁盘空间应该足够。对于Kafka代理节点，我们应该运行具有12个节点以上的多核服务器，并支持超线程。Kafka代理的正常内存需求通常在24至32
    GB之间。现在，让我们计算代理的存储需求。以下公式有助于计算每个节点的存储需求：'
- en: '![](img/B17084_12_012.jpg)![](img/B17084_12_013.jpg)![](img/B17084_12_014.jpg)![](img/B17084_12_015.jpg)![](img/B17084_12_016.jpg)![](img/B17084_12_017.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/B17084_12_012.jpg)![图片2](img/B17084_12_013.jpg)![图片3](img/B17084_12_014.jpg)![图片4](img/B17084_12_015.jpg)![图片5](img/B17084_12_016.jpg)![图片6](img/B17084_12_017.jpg)'
- en: By applying this formula to our example, we get the storage needs of each broker
    as 604 GB.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将此公式应用于我们的例子，我们得到每个代理的存储需求为604 GB。
- en: With these examples, we’ve seen how we can apply various factors to predict
    the capacity requirement of a solution. This helps create detailed CapEx and OpEx
    estimations for the business.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些例子，我们看到了如何应用各种因素来预测解决方案的容量需求。这有助于为业务创建详细的CapEx和OpEx估算。
- en: Now that we have learned how infrastructure estimations are calculated, we will
    discuss how to estimate the human resource-related costs and time for executing
    a project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何计算基础设施估算，我们将讨论如何估算执行项目的人力资源相关成本和时间。
- en: Effort and timeline estimation
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 努力和时间线估算
- en: 'Apart from the various responsibilities that an architect has to handle, effort
    and time estimation is an important responsibility for a data architect. Usually,
    the architect is responsible for creating a high-level estimate at the start of
    the project’s implementation. Considering most teams follow the agile methodology
    of software development, detailed effort estimation is done by the agile team
    during the implementation phase. The following activities need to be done to create
    a good estimate:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了架构师必须处理的各项责任外，努力和时间估算对于数据架构师来说也是一个重要的责任。通常，架构师负责在项目实施初期创建一个高级估算。考虑到大多数团队遵循敏捷软件开发方法，详细的努力估算是在实施阶段由敏捷团队完成的。以下活动需要完成以创建良好的估算：
- en: '**Create tasks and dependency charts**: First, to create an estimate, we must
    analyze the solution and divide it into high-level development and quality assurance
    tasks. We should also factor in all performance engineering tasks while creating
    the high-level task list. Then, we must create a dependency task list, which will
    specify whether a particular task is dependent on another task(s) or not. The
    following table shows one of the formats for creating a task and dependency list:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建任务和依赖关系图**：首先，为了创建估算，我们必须分析解决方案并将其划分为高级开发和质量保证任务。在创建高级任务列表时，我们还应考虑所有性能工程任务。然后，我们必须创建一个依赖关系任务列表，该列表将指定特定任务是否依赖于另一个任务（或多个任务）。以下表格显示了创建任务和依赖关系列表的一种格式：'
- en: '| **Task no.** | **Task name** | **Dependency** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **任务编号** | **任务名称** | **依赖关系** |'
- en: '| 1 | Creating Git user registration and a master repository |  |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 创建Git用户注册和主仓库 |  |'
- en: '| 2 | Creating local repositories on a PC | Task 1 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 在PC上创建本地仓库 | 任务1 |'
- en: '| 3 | Creating a simple Hello World whose output will be shown in Hindi in
    Java |  |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 创建一个简单的Hello World，其输出将在Java中以印地语显示 |  |'
- en: '| 4 | Creating R2 |  |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 创建R2 |  |'
- en: '| 5 | Reviewing the code of R2 | Task 4 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 审查R2的代码 | 任务4 |'
- en: '| 6 | Pushing the code of R2 | Task 2 and Task 5 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 推送R2的代码 | 任务2和任务5 |'
- en: '| 7 | Creating a data model of R2 |  |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 创建R2的数据模型 |  |'
- en: '| 8 | Creating a data model of R3-b |  |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 创建R3-b的数据模型 |  |'
- en: '| 9 | Reviewing the data model of R3-b | Task 8 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 审查R3-b的数据模型 | 任务8 |'
- en: '| 10 | Pushing the data model of R3-b | Task 1 and Task 8 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 推送R3-b的数据模型 | 任务1和任务8 |'
- en: Figure 12.1 – Sample task and dependency list
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 示例任务和依赖关系列表
- en: In the preceding table, note that task 2 is dependent on task 1 and, similarly,
    task 6 is dependent on tasks 2 and 5\. Note how we can denote such dependencies
    by adding a dependency column. This dependency matrix helps us understand the
    risks and dependencies. It also helps us understand how various tasks can run
    in parallel. This helps create a roadmap for various feature releases.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个表中，请注意任务2依赖于任务1，同样，任务6依赖于任务2和任务5。注意我们如何通过添加依赖关系列来表示这种依赖关系。这个依赖关系矩阵帮助我们理解风险和依赖关系。它还帮助我们了解各种任务如何并行运行。这有助于为各种功能发布创建路线图。
- en: '**Classify the tasks based on their complexity**: One of the things that an
    architect must do is classify the tasks into one of three categories: high complexity,
    medium complexity, and low complexity. However, for some exceptional use cases,
    more granular complexity levels can be defined.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据任务复杂度分类**：架构师必须做的事情之一是将任务分类为以下三个类别之一：高复杂度、中等复杂度和低复杂度。然而，对于一些特殊情况，可以定义更细粒度的复杂度级别。'
- en: '**Classify based on technology**: Another classification that helps with estimation
    is technology. This is because a complex task for a Spark-based job can be different
    than a complex task for a DataStage-based job. So, the average effort that needs
    to be spent not only depends on the complexity but also on the technology.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据技术分类**：另一个有助于估算的分类是技术。这是因为基于Spark的任务的复杂任务可能不同于基于DataStage的任务的复杂任务。因此，需要投入的平均工作量不仅取决于复杂性，还取决于技术。'
- en: '**Create the estimated time taken for a task**: To create a time estimate,
    first, we must create a map consisting of the time taken for a specific combination
    of technology and complexity if it is a technical task. If it is an analytical
    task, we must create a mapping for the time taken by a task versus its complexity.
    For example, a complex task for a Spark job may take 8 man-days to finish, while
    a complex task for an Informatica job may take 5 man-days to finish. Based on
    such a mapping, we can estimate the total time taken to finish the project in
    man-days or man-hours. For some agile projects, this effort can be estimated using
    a point system. For example, a complex analysis task may take 5 points of effort.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建任务的预估时间**：要创建时间预估，首先，我们必须创建一个地图，其中包括特定技术组合和复杂性的时间消耗，如果是一项技术任务的话。如果是一项分析任务，我们必须创建一个任务时间与其复杂性的映射。例如，一个Spark作业的复杂任务可能需要8人天来完成，而一个Informatica作业的复杂任务可能需要5人天来完成。基于这样的映射，我们可以估算完成项目所需的总时间，以人天或人时为单位。对于一些敏捷项目，这种努力可以通过点系统来估算。例如，一个复杂分析任务可能需要5点努力。'
- en: '**Create total effort estimates**: Based on the estimation done in the previous
    steps, we can calculate the total effort by summing up all individual task efforts
    required to deliver the solution.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建总努力预估**：基于之前的预估，我们可以通过将所有单个任务的努力相加来计算总努力。'
- en: '**Add a buffer to estimates**: As mentioned in the book *The Pragmatic Programmer
    (Hunt et al., 1999)*, we should remember that *Rather than construction, software
    is more like gardening – it is more organic than concrete. You constantly monitor
    the health of the garden and make adjustments (to the soil, the plants, the layout)
    as needed*. Since developing any application or data pipeline is organic, we must
    add a buffer to our estimates so that any organic changes may be accommodated
    in the project schedule.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在预估中添加缓冲**：正如书中《实用程序员》（Hunt等，1999年）所提到的，我们应该记住：“与其说是建造，软件更像园艺——它比混凝土更有机。你不断地监控花园的健康状况，并根据需要做出调整（土壤、植物、布局）。”由于开发任何应用程序或数据管道都是有机的，我们必须在我们的预估中添加缓冲，以便在项目计划中容纳任何有机变化。'
- en: '**Create a product roadmap and timeline for releases**: Based on the total
    estimate, dependency, risks, and expected delivery range, we can create a roadmap
    and timeline. It is important to understand the expected delivery timelines to
    ensure we can do proper resource loading and deliver the project in the time range
    that the business is looking for. Having said that, a lot of times, the business
    has unrealistic expectations of delivery timelines. It is the job of an architect
    (with the help of the project manager and product owner) to communicate and justify
    the estimates to the business so that both the technical and business teams can
    come to a common ground in terms of the delivery timeline.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建产品路线图和发布时间表**：基于总预估、依赖项、风险和预期的交付范围，我们可以创建路线图和时间表。理解预期的交付时间表对于确保我们能够进行适当的人力资源加载，并在业务所期望的时间范围内交付项目至关重要。话虽如此，很多时候，业务对交付时间表有不合实际的期望。这是架构师（在项目经理和产品所有者的帮助下）的工作，向业务沟通和证明预估，以便技术和业务团队能在交付时间表上达成共识。'
- en: '**List all risks and dependencies alongside the estimate**: While creating
    an estimate, it is important to list all the risks, dependencies, and assumptions
    so that all stakeholders are aware of what is being delivered and the risks involved
    in delivering the solution.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在预估旁边列出所有风险和依赖项**：在创建预估时，列出所有风险、依赖项和假设非常重要，这样所有利益相关者都能了解正在交付的内容以及交付解决方案所涉及的风险。'
- en: Now that we have learned how to create and document a well-thought effort estimate,
    we have to figure out the total delivery or development cost of a solution. To
    do that, we must perform human resource loading. Human resource loading is a process
    by which we identify how many developers, testers, and analysts with specific
    skill sets are required to deliver the project in the agreed-upon time. Finding
    the right mix of people with specific roles is the key to delivering the solution.
    Then, we assign a specific per-hour cost based on the role, demographics, and
    technology.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何创建和记录深思熟虑的努力预估，我们必须找出解决方案的总交付或开发成本。要做到这一点，我们必须进行人力资源加载。人力资源加载是一个过程，通过这个过程我们确定需要多少具有特定技能的开发者、测试人员和分析师才能在约定的时间内交付项目。找到具有特定角色的合适人员组合是交付解决方案的关键。然后，我们根据角色、人口统计和技术分配一个特定的每小时成本。
- en: After that, we factor in the number of hours required by a role or resource
    and multiply it by the assigned rate to reach the total cost of a human resource
    for the project. By summing up the total cost of each resource, we can find the
    total development cost (or the labor cost; any infra or license costs are not
    included).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们考虑一个角色或资源所需的小时数，并将其乘以分配的费率，以得出项目的人力资源总成本。通过汇总每种资源的总成本，我们可以找到总开发成本（或劳动力成本；不包括任何基础设施或许可费用）。
- en: With that, we have learned how to create cost and resource estimates to implement
    a solution. Earlier in this book, we learned how to develop different architectures
    for various kinds of data engineering problems. We also learned how to run performance
    tests and benchmarks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经学会了如何创建成本和资源估算以实施解决方案。在这本书的早期，我们学习了如何为各种类型的数据工程问题开发不同的架构。我们还学习了如何进行性能测试和基准测试。
- en: In this section, we learned how to create cost and resource estimates to implement
    a solution. *Is there a way to stitch all this information together to recommend
    the best-suited solution?* In real-world scenarios, each data engineering problem
    can be solved by multiple architectural solutions. *How do we know which is the
    most suitable solution? Is there a logical way to determine the best-suited solution?*
    Let’s find out.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何创建成本和资源估算以实施解决方案。*有没有一种方法可以将所有这些信息结合起来，以推荐最合适的解决方案？* 在现实场景中，每个数据工程问题都可以通过多个架构解决方案来解决。*我们如何知道哪个是最合适的解决方案？有没有一种逻辑方法来确定最合适的解决方案？*
    让我们来看看。
- en: Creating an architectural decision matrix
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建架构决策矩阵
- en: Concerning data engineering, an architectural decision matrix is a tool that
    helps architects evaluate the different architectural approaches with clarity
    and objectivity. A decision matrix is a grid that outlines the various desirable
    criteria for making architectural decisions. This tool helps rank different architectural
    alternatives, based on the score for each criterion. Decision matrices are used
    by other decision-making processes. For example, decision matrices are used by
    business analysts to analyze and evaluate their options.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据工程，架构决策矩阵是一个帮助架构师以清晰和客观的方式评估不同架构方法的工具。决策矩阵是一个概述了制定架构决策的各种期望标准的网格。这个工具根据每个标准的得分对不同的架构替代方案进行排名。决策矩阵被其他决策过程所使用。例如，决策矩阵被业务分析师用来分析和评估他们的选项。
- en: 'The decision matrix, also known as the Pugh matrix, decision grid, or grid
    analysis, can be used for many types of decision-making processes. However, it
    is best suited for scenarios where we have to choose one option among a group
    of alternatives. Since we must choose one architecture for the recommendation,
    it makes sense to use a decision matrix to arrive at a conclusion. Now, let’s
    discuss a step-by-step guide to creating a decision matrix for architectural decision-making.
    The steps to create a decision matrix are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 决策矩阵，也称为Pugh矩阵、决策网格或网格分析，可以用于许多类型的决策过程。然而，它最适合于我们必须在多个替代方案中选择一个选项的场景。由于我们必须为推荐选择一个架构，因此使用决策矩阵得出结论是有意义的。现在，让我们讨论创建用于架构决策的决策矩阵的逐步指南。创建决策矩阵的步骤如下：
- en: '**Brainstorm and finalize the various criteria**: To create a decision matrix
    that can be used for architectural evaluation, it is important to brainstorm and
    finalize the various criteria that the decision depends on. It is important to
    involve leadership and business executives as stakeholders in this brainstorming
    session. If you are an architect from a services firm who is developing a solution
    for the client, it is important to involve an architect from the client side as
    well. This step is very important as various criteria and their priorities help
    narrow down our final recommendation among a set of architectural alternatives.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**头脑风暴并最终确定各种标准**：为了创建一个可以用于架构评估的决策矩阵，重要的是要头脑风暴并最终确定决策所依赖的各种标准。在这个头脑风暴会议中，重要的是要涉及领导和业务高管作为利益相关者。如果你是来自服务公司的架构师，正在为客户开发解决方案，那么涉及客户方的架构师也很重要。这一步骤非常重要，因为各种标准和它们的优先级有助于在一系列架构替代方案中缩小我们的最终推荐。'
- en: '**Create the matrix table**: Next, we should create the decision matrix table,
    where each row denotes a specific criterion, while each column denotes a specific
    architectural alternative. These are selected sets of criteria that help us determine
    the appropriateness of the architecture for the current use case. The following
    diagram shows what the table will look like:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建矩阵表**：接下来，我们应该创建决策矩阵表，其中每一行代表一个特定的标准，而每一列代表一个特定的建筑替代方案。这些是帮助我们确定当前用例中架构适用性的选定标准集。以下图表显示了表格的外观：'
- en: '![Figure 12.2 – Creating the decision matrix table ](img/B17084_12_0021.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 创建决策矩阵表](img/B17084_12_0021.jpg)'
- en: Figure 12.2 – Creating the decision matrix table
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 创建决策矩阵表
- en: '**Assign rank or scale**: Now, we must assign rank or scale to each of the
    criteria of the architecture. Rank or scale is a relative measure where the higher
    the scale, the better it fits the criteria. The following diagram shows how scale
    is assigned to different architectures based on various criteria:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分配排名或刻度**：现在，我们必须为每个架构的标准分配排名或刻度。排名或刻度是一个相对度量，刻度越高，越符合标准。以下图表显示了如何根据各种标准将刻度分配给不同的架构：'
- en: '![Figure 12.3 – Assigning scale values for each architecture against each criterion
    ](img/B17084_12_003.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 为每个架构与每个标准分配刻度值](img/B17084_12_003.jpg)'
- en: Figure 12.3 – Assigning scale values for each architecture against each criterion
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 为每个架构与每个标准分配刻度值
- en: As we can see, different scales are assigned to each architecture against each
    criterion on a relative scale of 1 to 5\. Here, 5 is the highest match possible
    for the given criterion, while 1 is the lowest match possible for the given criterion.
    In this example, *Architecture 1* gets a score of *3* in terms of *Scale*. *Architecture
    2* gets a score of *2*, while *Architecture 3* and *Architecture 4* get a score
    of *4* for *Criteria 1*. Hence, *Architecture 3* and *Architecture 4* are the
    most suitable as far as *Criteria 1* is concerned.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，每个架构相对于每个标准在1到5的相对刻度上分配了不同的刻度值。在这里，5是给定标准的可能最高匹配度，而1是给定标准的可能最低匹配度。在这个例子中，*架构1*在*刻度*方面的得分是*3*，*架构2*的得分是*2*，而*架构3*和*架构4*在*标准1*方面的得分是*4*。因此，*架构3*和*架构4*在*标准1*方面是最合适的。
- en: '**Assign weights**: Next, we must assign weights to each criterion. This will
    help set the priority for various criteria. The following diagram shows how weights
    are assigned to each architecture against each criterion:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分配权重**：接下来，我们必须为每个标准分配权重。这将有助于确定各种标准的优先级。以下图表显示了如何将权重分配给每个架构与每个标准：'
- en: '![Figure 12.4 – Assigning weights to each criterion ](img/B17084_12_004.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 为每个标准分配权重](img/B17084_12_004.jpg)'
- en: Figure 12.4 – Assigning weights to each criterion
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 为每个标准分配权重
- en: As we can see, the weight that’s assigned to each criterion is independent of
    the architecture. This attaches a priority to each of the criteria. So, the most
    desirable criteria get the highest preference. The higher the weight, the higher
    the priority. In this example, *Criteria 1* and *Criteria 2* get the least priority
    with a priority score of *2*, while *Criteria 4* and *Criteria 5* get the highest
    priority with a priority score of *4*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，分配给每个标准的权重与架构无关。这为每个标准赋予了一个优先级。因此，最理想的标准获得最高的优先级。权重越高，优先级越高。在这个例子中，*标准1*和*标准2*的优先级最低，优先级得分为*2*，而*标准4*和*标准5*的优先级最高，优先级得分为*4*。
- en: '**Calculate the score**: The individual scores for each architecture against
    a criterion are calculated by multiplying scale values by the weight of the criteria.
    The total desirability score of the architecture is calculated by summing up all
    the scores of each criterion. The following diagram shows what such a decision
    matrix looks like:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计算得分**：每个架构针对一个标准的个别得分是通过将刻度值乘以标准的权重来计算的。架构的总可取性得分是通过将每个标准的所有得分相加来计算的。以下图表显示了这样的决策矩阵的外观：'
- en: '![Figure 12.5 – Example of a completed decision matrix for architectural decisions
    ](img/B17084_12_005.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – 建筑决策完成决策矩阵的示例](img/B17084_12_005.jpg)'
- en: Figure 12.5 – Example of a completed decision matrix for architectural decisions
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – 建筑决策完成决策矩阵的示例
- en: As we can see, *Architecture 4* looks like the most desirable solution as it
    has the highest total desirability score of *57.5*, while *Architecture 1* is
    the least desirable with a score of *43.5*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，*架构4*看起来是最吸引人的解决方案，因为它具有最高的总吸引力得分*57.5*，而*架构1*是最不吸引人的，得分为*43.5*。
- en: In this section, we learned about how to create a decision matrix. Now, the
    question is, *is the total desirability score always enough to recommend an architecture?*
    In the next section, we’ll learn how to further evaluate an architecture by using
    the techniques we learned earlier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何创建决策矩阵。现在的问题是，*总吸引力得分是否总是足以推荐一个架构？* 在下一节中，我们将学习如何通过使用我们之前学到的技术进一步评估架构。
- en: Data-driven architectural decisions to mitigate risk
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据驱动的架构决策以减轻风险
- en: A decision matrix helps us evaluate the desirability of an architecture. However,
    it is not always necessary to opt for the architectural option that has the highest
    desirability score. Sometimes, each criterion needs to have a minimum threshold
    score for an architecture to be selected. Such scenarios can be handled by a spider
    chart.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 决策矩阵帮助我们评估架构的吸引力。然而，并不总是需要选择具有最高吸引力得分的架构选项。有时，每个标准都需要有一个最低阈值得分，架构才能被选中。这种场景可以通过蜘蛛图来处理。
- en: 'A spider chart, also known as a radar chart, is often used to display data
    across multiple dimensions. Each dimension is represented by an axis. Usually,
    the dimensions are quantitative and normalized to match a particular range. Then,
    each option is plotted against all the dimensions to create a closed polygon structure,
    as shown in the following diagram:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 蜘蛛图，也称为雷达图，通常用于显示跨多个维度的数据。每个维度由一个轴表示。通常，维度是量化的，并归一化以匹配特定的范围。然后，每个选项与所有维度相对比，以创建一个封闭的多边形结构，如下面的图表所示：
- en: '![Figure 12.6 – Spider or radar chart ](img/B17084_12_006.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – 蜘蛛图或雷达图](img/B17084_12_006.jpg)'
- en: Figure 12.6 – Spider or radar chart
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 蜘蛛图或雷达图
- en: 'In our case, each criterion for making an architectural decision can be considered
    a dimension. Also, each architectural alternative is plotted as a graph on the
    radar chart. Let’s look at the use case for the decision matrix shown in *Figure
    12.5*. The following diagram shows the radar chart for the same use case:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，每个用于做出架构决策的标准都可以被视为一个维度。此外，每个架构替代方案都在雷达图上绘制为图表。让我们看看*图12.5*中显示的决策矩阵的使用案例。以下图表显示了相同使用案例的雷达图：
- en: '![Figure 12.7 – Radar chart for the example scenario discussed earlier ](img/B17084_12_007.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – 之前讨论的示例场景的雷达图](img/B17084_12_007.jpg)'
- en: Figure 12.7 – Radar chart for the example scenario discussed earlier
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 之前讨论的示例场景的雷达图
- en: As we can see, each axis denotes a criterion such as *Criteria 1*, *Criteria
    2*, and so on. Each criterion has a total score of 25 points, divided into five
    equal parts along its axis. The division markers for each criterion are connected
    to the division marker of the adjacent criteria, creating a spider web of symmetrical
    pentagons. The maximum score of each criterion is 25 because it is the product
    of the maximum scale value (5) and the maximum weightage (5). We also create a
    threshold polygon, as denoted by the dotted lines in the preceding diagram. This
    is created by joining the threshold marker (in this case, a score of 8 points)
    for every criterion. An optimal solution is one whose polygon is either bigger
    or equal to the threshold polygon. All the criteria of an optimal solution should
    score more points than the threshold score of each criterion.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，每个轴代表一个标准，如*标准1*、*标准2*等。每个标准总共有25分，沿着其轴分为五个相等的部分。每个标准的划分标记与相邻标准的划分标记相连，形成一个对称的五边形蜘蛛网。每个标准的最高得分是25分，因为它是最大规模值（5）和最高权重（5）的乘积。我们还创建了一个阈值多边形，如前图中虚线所示。这是通过连接每个标准的阈值标记（在这种情况下，得分为8分）来创建的。一个最优解是这样一个多边形，要么比阈值多边形大，要么等于阈值多边形。最优解的所有标准都应该比每个标准的阈值得分得分更高。
- en: As shown in the preceding diagram, our threshold score for each criterion is
    8\. Based on the score of each criterion for the architecture, we draw the polygon
    plot. Here, the plot of *Architecture 1* is blue, *Architecture 2* is pink, *Architecture
    3* is green, and *Architecture 4* is violet. Based on the plots, we can see that
    only *Architecture 3* is optimal in this use case. Although the total desirability
    score of *Architecture 4* is greater than that of *Architecture 3*, it doesn’t
    fulfill the condition of having the minimum threshold score of 8 for each criterion
    as it only scores 7.5 in *Criteria 2*. Also, if the individual score of each criterion
    for *Architecture 3* is more than or equal to the threshold score. Hence, *Architecture
    3* is the best-suited option for this use case.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，我们每个标准的阈值分数是8。根据架构的每个标准的分数，我们绘制多边形图。在这里，*架构1*的图是蓝色，*架构2*是粉色，*架构3*是绿色，*架构4*是紫色。根据这些图，我们可以看到，在这个用例中，只有*架构3*是最优的。尽管*架构4*的总期望分数大于*架构3*，但它没有满足每个标准至少有8分的最小阈值条件，因为它在*标准2*中只得了7.5分。此外，如果*架构3*的每个标准的分数都大于或等于阈值分数。因此，*架构3*是此用例的最佳选择。
- en: 'An alternative way to evaluate a decision matrix to find the most optimized
    solution is using a decision tree. **Decision trees** are decision support tools
    that use tree-like models for questions and categorize or prune the results based
    on the answer to those questions. Usually, the leaf nodes denote the category
    or the decision. The following diagram shows an example of a decision tree for
    evaluating the scenario that we just discussed using a spider/radar chart:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 评估决策矩阵以找到最优化解决方案的另一种方法是使用决策树。**决策树**是决策支持工具，它使用树形模型来提问，并根据这些问题的答案对结果进行分类或剪枝。通常，叶节点表示类别或决策。以下图显示了使用蜘蛛/雷达图评估我们刚才讨论的场景的决策树示例：
- en: '![Figure 12.8 – Decision tree to evaluate architectural alternatives ](img/B17084_12_0081.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 评估架构替代方案的决策树](img/B17084_12_0081.jpg)'
- en: Figure 12.8 – Decision tree to evaluate architectural alternatives
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 评估架构替代方案的决策树
- en: As we can see, we can create a decision tree based on the scores recorded earlier
    in the decision matrix to find the most optimal solution. Here, we are asking
    questions such as *Is the score for Criteria 1 greater than 8?*, *Is the score
    for Criteria 2 greater than 8?*, and so on. Based on the answer, we are pruning
    out the non-optimal solutions at that level. Finally, we ask, *Is this the max
    score for the candidate architecture and it can’t be pruned?* The answer to this
    question helps us figure out the most optimal solution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们可以根据决策矩阵中之前记录的分数创建一个决策树，以找到最优化解决方案。在这里，我们提出的问题例如*标准1的分数是否大于8？*，*标准2的分数是否大于8？*等等。根据答案，我们在该级别剪枝掉非优化解决方案。最后，我们问，*这是候选架构的最大分数，并且不能被剪枝吗？*这个问题的答案帮助我们确定最优化解决方案。
- en: In this section, we learned how to use a data-driven methodical approach to
    find and evaluate the most optimal solution for the problem. Now, it is the job
    of the architect to present the solution as a recommendation. In the next section,
    we will discuss the guidelines for how to present your solution effectively.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用数据驱动的方法来寻找和评估问题的最优化解决方案。现在，建筑师的任务是将解决方案作为建议展示出来。在下一节中，我们将讨论如何有效地展示你的解决方案的指南。
- en: Presenting the solution and recommendations
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示解决方案和建议
- en: 'As an architect, your job doesn’t end when you create and evaluate the most
    optimal architectural alternative based on the problem, platform, criteria, and
    priorities. As a Janus between business and technology, the architect is also
    responsible for effectively communicating the solution and recommending the most
    optimal alternative. Based on the kind of project and the type of business you
    are in, you may be required to convince stakeholders to invest in the solution.
    The following are a few guidelines that will help you present your solution and
    convince your stakeholders more effectively:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名架构师，你的工作并不仅仅是在基于问题、平台、标准和优先级创建和评估最优化架构替代方案后结束。作为商业和技术之间的桥梁，架构师还负责有效地传达解决方案并推荐最优化替代方案。根据你的项目和业务类型，你可能需要说服利益相关者投资解决方案。以下是一些有助于你展示解决方案并更有效地说服利益相关者的指南：
- en: '**Present the presentation before the presentation**: If possible, engage the
    customer or end client early and give them a glimpse of what possible solutions
    you are thinking of. Also, tell them how much time will it take for you to evaluate
    each of the solutions. Keep them engaged and in the loop while developing the
    architecture. It is always helpful if stakeholders are involved in the process
    and kept in the loop. It’s a win-win situation for both the stakeholders and the
    architect. Stakeholders feel that they are part of the solution, and they get
    enough time to understand or anticipate any impact of implementing the solution.
    On the other hand, the architect gets constant feedback about the priorities and
    criteria, which helps them come up with a very well-researched decision matrix.
    A more accurate decision matrix eventually helps architects make the most desired
    recommendation.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在演示之前进行演示**: 如果可能的话，尽早与客户或最终客户接触，并向他们展示你正在考虑的可能解决方案。同时，告诉他们评估每个解决方案需要多少时间。在开发架构的过程中，保持他们的参与和知情。如果利益相关者参与过程并保持知情，这对双方都是双赢的局面。利益相关者会感到他们是解决方案的一部分，并且有足够的时间理解或预测实施解决方案的任何影响。另一方面，架构师会获得关于优先级和标准的持续反馈，这有助于他们制定一个经过充分研究的决策矩阵。一个更准确的决策矩阵最终有助于架构师做出最期望的推荐。'
- en: '**Know your audience and ensure they are present**: Although this is true for
    any presentation, it is important to understand the audience before presenting
    the solution. It is important to understand whether they are from business, executive
    leadership, or the technical side. It is also important to consider if any external
    teams or vendors are involved. Understanding the demographics of your audience
    will help you customize your presentation so that it is relatable to their work.
    If it is a mixed audience, make sure that you have something relatable for all
    the different audience groups. It is also important that you invite all the important
    stakeholders so that your solution reaches every intended audience.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解你的受众并确保他们出席**: 虽然这对任何演示都适用，但在展示解决方案之前了解受众非常重要。了解他们是否来自业务、执行领导层或技术方面。同时，考虑是否有任何外部团队或供应商参与也很重要。了解你受众的人口统计信息将帮助你定制演示，使其与他们的工作相关。如果是一个混合受众，确保你为所有不同的受众群体都有相关的内容。同时，邀请所有重要的利益相关者也很重要，以确保你的解决方案能够触及每一个目标受众。'
- en: '**Present the Return on Investment (ROI) for the solution**: Usually, there
    are top-level leaders, executives, and business heads present in a solution presentation.
    For them, it is important to understand how the solution can either generate or
    save dollars. It could be that the solution will create additional revenue generation
    sources, or it could be as trivial as a lesser total cost of ownership or a lesser
    cost of development. To showcase the ROI for the solution, you can include if
    the solution adds any value to the customer experience or acceptance of the product.
    A good data architect should carefully brainstorm and figure out how the solution
    can add value to the business.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示解决方案的投资回报率 (ROI)**: 通常，在解决方案的演示中会有高层领导、执行人员和业务负责人出席。对他们来说，了解解决方案如何产生或节省美元非常重要。这可能意味着解决方案将创造额外的收入来源，或者它可能只是像降低总拥有成本或降低开发成本这样微不足道的事情。为了展示解决方案的ROI，你可以包括解决方案是否为顾客体验或产品接受度增加了任何价值。一个好的数据架构师应该仔细思考并找出解决方案如何为业务增加价值。'
- en: '**Recommend by comparing alternatives**: Although we, as architects, usually
    recommend one architecture, it is a good practice to present all the alternative
    architectures and their pros and cons. Then, we must establish the most suitable
    architecture. It is also a good idea to present why we chose that architecture.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过比较替代方案进行推荐**: 虽然我们作为架构师通常会推荐一个架构，但展示所有替代架构及其优缺点是一个好的做法。然后，我们必须确定最合适的架构。展示我们为什么选择那个架构也是一个好主意。'
- en: '**Make the presentation better by using their language**: Each company and
    business has its own language. Since a lot of stakeholders are from the business
    side of things, it is better to adapt to the common language that’s popular in
    the organization when presenting. This ensures that the audience is easily getting
    what we are presenting and can connect the dots.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用他们的语言使演示更出色**: 每个公司和业务都有自己的语言。由于许多利益相关者来自业务方面，所以在演示时适应组织内部流行的通用语言会更好。这确保了受众能够轻松理解我们所展示的内容，并能将点联系起来。'
- en: '**Mind the context**: It is also important for the presentation to be contextual.
    Based on the audience, your presentation should be customized so that it has the
    correct balance between technical versus business content.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意上下文**：对于演示文稿来说，上下文也很重要。根据受众，你的演示文稿应该定制化，以便在技术内容与业务内容之间保持正确的平衡。'
- en: '**Ensure your presentation is visually appealing and relatable**: Diagrams
    speak more than words. Presentations must have clear diagrams that are relatable
    and self-explanatory. Avoid too much text in a presentation. A visually appealing
    presentation is easier to explain and keeps the various stakeholders interested
    in the presentation.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保你的演示文稿具有视觉吸引力和相关性**：图表比文字更能说明问题。演示文稿必须包含清晰、相关且自解释的图表。避免在演示文稿中使用过多的文字。一个视觉上吸引人的演示文稿更容易解释，并使各种利益相关者对演示文稿保持兴趣。'
- en: In this section, we discussed a few tips and tricks for presenting a solution
    to stakeholders in a concise, effective, and impactful way. Apart from developing
    and architecting a solution, we are aware of how to evaluate, recommend, and present
    a solution effectively. Now, let’s summarize what we learned in this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了几种以简洁、有效和有影响力方式向利益相关者展示解决方案的技巧和窍门。除了开发和架构解决方案外，我们还了解如何有效地评估、推荐和展示解决方案。现在，让我们总结一下本章所学的内容。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started this chapter by learning how to plan and estimate infrastructure
    resources. Then, we discussed how to do an effort estimation, how to load human
    resources, and how to calculate the total development cost. By doing so, we learned
    how to create an architectural decision matrix and how to perform data-driven
    comparisons between different architectures. Then, we delved into the different
    ways we can use the decision matrix to evaluate the most optimal solution by using
    spider/radar charts or decision trees. Finally, we discussed some guidelines and
    tips for presenting the optimized solution in a more effective and impactful way
    to various business stakeholders.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本章一开始学习了如何规划和估算基础设施资源。然后，我们讨论了如何进行工作量估算、如何配置人力资源以及如何计算总开发成本。通过这样做，我们学习了如何创建架构决策矩阵以及如何在不同架构之间进行数据驱动的比较。接着，我们深入探讨了我们可以使用决策矩阵通过蜘蛛/雷达图或决策树来评估最优化解决方案的不同方法。最后，我们讨论了一些指导原则和技巧，以更有效和有影响力地向各种商业利益相关者展示优化后的解决方案。
- en: Congratulations – you have completed all 12 chapters of this book, where you
    learned all about a Java data architect’s role, the basics of data engineering,
    how to build solutions for various kinds of data engineering problems, various
    architectural patterns, data governance and security, and performance engineering
    and optimization. In this final chapter, you learned how to use data-driven techniques
    to choose the best-suited architecture and how to present it to the executive
    leadership. I hope you have learned a lot, and that it will help you develop your
    career as a successful data architect and help you grow in your current role.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你——你已经完成了这本书的所有12章，在这本书中，你学习了关于Java数据架构师角色的所有内容，数据工程的基础知识，如何为各种数据工程问题构建解决方案，各种架构模式，数据治理和安全，以及性能工程和优化。在本章的最后，你学习了如何使用数据驱动技术选择最适合的架构，以及如何向高管层展示它。我希望你已经学到了很多，这将有助于你作为成功的数据架构师发展你的职业生涯，并帮助你在你当前的角色中成长。
