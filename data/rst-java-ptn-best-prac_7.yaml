- en: Appendix A. Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 附录
- en: 'In this era of social networking, cloud computing, and mobile applications,
    people want to be connected to each other, voice opinions, build applications
    collaboratively, share inputs, and ask questions. This is evident from the data
    mentioned in [http://www.statisticbrain.com/twitter-statistics/](http://www.statisticbrain.com/twitter-statistics/)
    that shows Twitter has around 6.5 million users and 58 million tweets per day.
    Similarly, the statistics for Facebook are mindboggling: 1.3 billion users making
    it the heart of the social web platform. Over the years, GitHub has evolved as
    the default social coding platform. Thus, Twitter, Facebook, and GitHub are among
    the most widely used platforms to build applications, mine data, as well as build
    analytics-related information.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个社交网络、云计算和移动应用的时代，人们希望与他人保持联系，发表意见，协作构建应用程序，分享输入并提出问题。从[http://www.statisticbrain.com/twitter-statistics/](http://www.statisticbrain.com/twitter-statistics/)中提到的数据可以看出，Twitter拥有大约650万用户，每天有5800万条推文。同样，Facebook的统计数据也令人震惊：13亿用户使其成为社交网络平台的核心。多年来，GitHub已经发展成为默认的社交编码平台。因此，Twitter、Facebook和GitHub是最广泛使用的构建应用程序、挖掘数据以及构建与分析相关信息的平台之一。
- en: While the previous chapters covered topics such as building RESTful services,
    adding performance, caching, security, and scaling of RESTful services, this chapter
    will focus on some popular REST platforms and how they tie in to the different
    patterns covered in earlier chapters as part of their API infrastructure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章涵盖了构建RESTful服务、添加性能、缓存、安全性以及RESTful服务的扩展等主题，本章将重点介绍一些流行的REST平台以及它们如何与之前章节中涵盖的不同模式相结合，作为它们的API基础设施的一部分。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Overview of the REST API from GitHub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub REST API 概述
- en: Overview of the Open Graph API from Facebook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook Open Graph API 概述
- en: Overview of the REST API from Twitter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter REST API 概述
- en: Overview of the REST API from GitHub
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub REST API 概述
- en: GitHub has become extremely popular as the social collaborative coding platform
    for building code as well as contributing to other repositories. It is used by
    developers to create, build, and deploy software, with usage varying from individual
    projects to various enterprises using it as part of their processes. GitHub has
    extensive API documentation for its services at [https://developer.github.com/v3/](https://developer.github.com/v3/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub已经成为极其流行的社交协作编码平台，用于构建代码以及为其他存储库做出贡献。开发人员使用它来创建、构建和部署软件，使用范围从个人项目到各种企业使用它作为其流程的一部分。GitHub在其服务的API文档中有详尽的文档，网址为[https://developer.github.com/v3/](https://developer.github.com/v3/)。
- en: The following section covers in detail how GitHub handles all the different
    patterns we covered in earlier chapters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分详细介绍了GitHub如何处理我们在之前章节中涵盖的所有不同模式。
- en: Getting details from GitHub
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从GitHub获取详细信息
- en: The following commands show how to use unauthenticated cURL commands to get
    data for a user, to get details for the repositories, and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了如何使用未经身份验证的cURL命令来获取用户的数据，获取存储库的详细信息等。
- en: 'The following command gets details for the `javaee-samples` user:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令获取`javaee-samples`用户的详细信息：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As shown in the preceding commands, there are different URLs in the preceding
    response, which can be used to get details such as followers, commits, and so
    on. This style of presenting the URLs is different from the HATEOAS samples we
    covered earlier in the book using `links`, `href`, `rel`, and so on. This shows
    how different platforms choose various ways to provide a connected service, which
    is self-explanatory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述命令所示，前述响应中有不同的URL，可用于获取关注者、提交等详细信息。这种呈现URL的方式与我们在本书早期使用`links`、`href`、`rel`等方式介绍的HATEOAS示例不同。这显示了不同平台选择不同方式提供连接服务的方式，这是不言自明的。
- en: 'To get repos for a user with pagination, we can use the query as shown:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用户的存储库并进行分页，可以使用如下查询：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: GitHub API uses OAuth2 for authenticating users for the requests. All developers
    working with GitHub API need to register their application. A registered application
    is assigned a unique client ID and client secret.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub API 使用OAuth2来对用户进行身份验证。所有使用GitHub API的开发人员都需要注册他们的应用程序。注册的应用程序会被分配一个唯一的客户端ID和客户端密钥。
- en: For more details on getting authenticated requests for a user, check [https://developer.github.com/v3/oauth/](https://developer.github.com/v3/oauth/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有关为用户获取经过身份验证的请求的更多详细信息，请查看[https://developer.github.com/v3/oauth/](https://developer.github.com/v3/oauth/)。
- en: Verbs and resource actions
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动词和资源操作
- en: 'The following table covers how GitHub API uses verbs for a specific action
    to a resource:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格涵盖了GitHub API如何使用动词来执行特定资源的操作：
- en: '| Verb | Description |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 动词 | 描述 |'
- en: '| --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `HEAD` | This is used to get the HTTP header info |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `HEAD` | 用于获取HTTP头信息 |'
- en: '| `GET` | This is used to retrieve resources such as user details |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 用于检索资源，比如用户详细信息 |'
- en: '| `POST` | This is used for creating resources such as merging pull requests
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 用于创建资源，比如合并拉取请求 |'
- en: '| `PATCH` | This is used for partial updates to resources |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `PATCH` | 用于对资源进行部分更新 |'
- en: '| `PUT` | This is used for replacing resources such as updating users |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | 用于替换资源，比如更新用户 |'
- en: '| `DELETE` | This is used for deleting resources such as removing a user as
    a collaborator |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | 用于删除资源，比如将用户移除为协作者 |'
- en: Versioning
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制
- en: 'GitHub API uses version v3 in its URI. The default version of the API may change
    in the future. In case the client is depending on a particular version, they recommend
    sending an `Accept` header explicitly, as shown:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub API 在其URI中使用版本v3。API的默认版本可能会在将来更改。如果客户端依赖于特定版本，他们建议明确发送一个`Accept`头，如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Error handling
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: As covered in [Chapter 2](ch02.html "Chapter 2. Resource Design"), *Resource
    Design*, client-side errors are indicated by `400 error` codes. GitHub uses a
    similar convention for denoting errors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](ch02.html "第2章 资源设计")中所述，*资源设计*，客户端错误由`400错误`代码表示。GitHub使用类似的约定来表示错误。
- en: If a client using the API sends an invalid JSON, a `400 Bad Request` response
    is returned back to the client. If a client using the API misses to send a field
    as part of the request body, a `422 Unprocessable Entity` response is returned
    to the client.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用API的客户端发送无效的JSON，则会返回`400 Bad Request`响应给客户端。如果使用API的客户端在请求体中漏掉了字段，则会返回`422
    Unprocessable Entity`响应给客户端。
- en: Rate limiting
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速率限制
- en: The GitHub API also supports rate limiting so that the server is not overburdened
    with too many requests from some rogue client causing it to fail. In case of requests
    using **Basic authentication** or **OAuth**, the client is allowed to make up
    to 5,000 requests per hour. In case of unauthenticated requests, the rate limit
    is up to 60 requests per hour for a client. GitHub uses the **X-RateLimit-Limit**,
    **X-RateLimit-Remaining**, and **X-RateLimit-Reset** headers to tell the status
    of the rate limits.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub API还支持速率限制，以防止服务器因某些恶意客户端的过多请求而导致失败。对于使用**基本身份验证**或**OAuth**的请求，客户端每小时最多可以发出5,000个请求。对于未经身份验证的请求，客户端每小时的速率限制为60个请求。GitHub使用**X-RateLimit-Limit**、**X-RateLimit-Remaining**和**X-RateLimit-Reset**头来告知速率限制的状态。
- en: Thus, we have covered details on the GitHub API on how they choose to implement
    some of the REST principles we have covered so far in this book. The next section
    covers the Facebook Open Graph REST API for topics such as versioning, error handling,
    rate limiting, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经介绍了GitHub API的细节，介绍了他们选择如何实现本书中迄今为止介绍的一些REST原则。下一节将介绍Facebook Open Graph
    REST API，涵盖版本控制、错误处理、速率限制等主题。
- en: Overview of the Facebook Graph API
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook Graph API概述
- en: The Facebook Graph API is a way to get information from Facebook data. Using
    the HTTP REST API, clients can do a variety of tasks such as query data, post
    updates and pictures, get albums and create albums, get the number of likes for
    a node, get comments, and so on. The following section covers how to get access
    to the Facebook Graph API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook Graph API是从Facebook数据中获取信息的一种方式。使用HTTP REST API，客户端可以执行各种任务，如查询数据、发布更新和图片、获取相册和创建相册、获取节点的点赞数、获取评论等。下一节将介绍如何访问Facebook
    Graph API。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On the Web, Facebook uses a variant of the OAuth 2.0 protocol for authentication
    and authorization. The native Facebook App is used on iOS and Android.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web上，Facebook使用OAuth 2.0协议的变体进行身份验证和授权。原生的Facebook应用程序用于iOS和Android。
- en: 'To use the Facebook API, the client needs to procure an access token to work
    with OAuth 2.0\. The following steps shows how to create the App ID and secret
    key and then get the access token to execute queries for Facebook data:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Facebook API，客户端需要获取一个访问令牌来使用OAuth 2.0。以下步骤显示了如何创建应用程序ID和密钥，然后获取访问令牌来执行对Facebook数据的查询：
- en: Go to [developers.facebook.com/apps](http://developers.facebook.com/apps). You
    can create a new app. Once the app is created, you will be assigned the App ID
    and secret as shown in the following screenshot:![Overview of the Facebook Graph
    API](img/7963OS_07_01.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[developers.facebook.com/apps](http://developers.facebook.com/apps)。您可以创建一个新的应用程序。创建应用程序后，您将被分配应用程序ID和密钥，如下面的屏幕截图所示：![Facebook
    Graph API概述](img/7963OS_07_01.jpg)
- en: Once you have the App ID and secret, you can get the access token and execute
    queries for Facebook data.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您获得了应用程序ID和密钥，就可以获取访问令牌并执行对Facebook数据的查询。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Facebook has a special `/me` endpoint, which corresponds to the user whose
    access token is being used. To get photos for your user, the request can be of
    the following form:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook有一个特殊的`/me`端点，对应于正在使用访问令牌的用户。要获取用户的照片，请求可以如下所示：
- en: '`GET /graph.facebook.com/me/photos`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET /graph.facebook.com/me/photos`'
- en: 'To post a message, the user can invoke a simple API as shown:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要发布消息，用户可以调用如下简单的API：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To get details of your ID, name, and photos using the Graph Explorer, the query
    is as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Graph Explorer获取您的ID、名称和照片的详细信息，查询如下：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following screenshot shows a Graph API Explorer query with node `dalailama`.
    Clicking on the ID gives more details for the node.![Overview of the Facebook
    Graph API](img/7963OS_07_02.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了一个Graph API Explorer查询，节点为`dalailama`。点击ID可以查看节点的更多详细信息。![Facebook
    Graph API概述](img/7963OS_07_02.jpg)
- en: Thus, we saw how to use the Graph API Explorer application to build up a query
    for a node in the Social Graph. We can query by various fields such as ID and
    name and try using methods such as `GET`, `POST`, or `DELETE`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到如何使用Graph API Explorer应用程序来构建社交图中节点的查询。我们可以通过各种字段（如ID和名称）进行查询，并尝试使用`GET`、`POST`或`DELETE`等方法。
- en: Verbs and resource actions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动词和资源操作
- en: 'The following table summarizes the commonly used verbs in the Facebook Graph
    API:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了Facebook Graph API中常用的动词：
- en: '| Verb | Description |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 动词 | 描述 |'
- en: '| --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `GET` | This is used to retrieve resources such as feeds, albums, posts,
    and so on |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 用于检索资源，如动态、相册、帖子等 |'
- en: '| `POST` | This is used for creating resources such as feeds, posts, albums,
    and so on |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 用于创建资源，如动态、帖子、相册等 |'
- en: '| `PUT` | This is used for replacing resources |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | 用于替换资源 |'
- en: '| `DELETE` | This is used for deleting resources |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | 用于删除资源 |'
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: An important observation is that the Facebook Graph API uses `POST` instead
    of `PUT` to update resources.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的观察是，Facebook Graph API使用`POST`而不是`PUT`来更新资源。
- en: Versioning
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制
- en: The Graph API currently uses version 2.1 released on August 7, 2014\. The client
    can specify a version in the request URL. In case a client does not specify a
    version, the Facebook Open Graph API defaults to the latest version available.
    Every version is guaranteed to work for 2 years after which if the client makes
    any calls using an older version, they get redirected to the latest version of
    the API.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Graph API目前使用的是2014年8月7日发布的2.1版本。客户端可以在请求URL中指定版本。如果客户端没有指定版本，Facebook Open
    Graph API将默认使用最新可用的版本。每个版本保证在2年内可用，之后如果客户端使用旧版本进行任何调用，它们将被重定向到API的最新版本。
- en: Error handling
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: 'The following snippet shows the error response from a failed API request:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段显示了失败的API请求的错误响应：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As shown in the preceding code, there are JSON Objects called `code` and `error_subcode`
    in the error message, which can be used to figure out what the problem is and
    what the recovery action will be. In this case, the value of `code` is `190`,
    which is an `OAuthException` value, and the `error_subcode` value of `460` indicates
    that the password may have changed and hence the `access_token` is not valid.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，错误消息中有称为`code`和`error_subcode`的JSON对象，可用于找出问题所在以及恢复操作。在这种情况下，`code`的值是`190`，这是一个`OAuthException`值，而`error_subcode`值为`460`，表示密码可能已更改，因此`access_token`无效。
- en: Rate limiting
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速率限制
- en: The Facebook Graph API has different rate-limiting policies based on whether
    the entity using the API is a user, an application, or an advertisement. When
    the calls from a user exceed a limit, there is a 30-minute block-out period for
    the user. For more details, check [https://developers.facebook.com/docs/reference/ads-api/api-rate-limiting/](https://developers.facebook.com/docs/reference/ads-api/api-rate-limiting/).
    The next section covers the details of the Twitter REST API.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook Graph API根据使用API的实体是用户、应用程序还是广告，具有不同的速率限制政策。当用户的调用超过限制时，用户将被阻止30分钟。有关更多详细信息，请查看[https://developers.facebook.com/docs/reference/ads-api/api-rate-limiting/](https://developers.facebook.com/docs/reference/ads-api/api-rate-limiting/)。下一节将介绍Twitter
    REST API的详细信息。
- en: Overview of the Twitter API
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter API概述
- en: The **Twitter API** has REST APIs and Streaming APIs, which allow developers
    to access core data such as timelines, status data, user information, and so on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter API具有REST API和Streaming API，允许开发人员访问核心数据，如时间线、状态数据、用户信息等。
- en: Twitter uses three-legged OAuth to make requests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter使用三步OAuth进行请求。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Important aspects of OAuth with Twitter API**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Twitter API中OAuth的重要方面**'
- en: The client application doesn't need to store a login ID and password. The application
    sends an access token representing the user with each request instead of using
    user credentials.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序不需要存储登录ID和密码。应用程序发送代表用户的访问令牌，而不是使用用户凭据的每个请求。
- en: The `POST` variables, query parameters, and the URL of the request always remain
    intact for a request to successfully complete.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成请求，`POST`变量、查询参数和请求的URL始终保持不变。
- en: The user decides what applications can act on his behalf and can remove authorization
    at any time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用户决定哪些应用程序可以代表他，并随时可以取消授权。
- en: A unique identifier for each request (the `oauth_nonce` identifier) prevents
    replaying the same request again in case it gets snooped.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每个请求的唯一标识符（`oauth_nonce`标识符）防止重放相同的请求，以防它被窥探。
- en: To send requests to Twitter, most developers may find the initial setup a bit
    confusing. The article at [https://blog.twitter.com/2011/improved-oauth-10a-experience](https://blog.twitter.com/2011/improved-oauth-10a-experience)
    shows how to create an application, generate the keys, and generate a request
    using the OAuth tool.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于向Twitter发送请求，大多数开发人员可能会发现初始设置有点令人困惑。[https://blog.twitter.com/2011/improved-oauth-10a-experience](https://blog.twitter.com/2011/improved-oauth-10a-experience)的文章显示了如何创建应用程序、生成密钥以及使用OAuth工具生成请求。
- en: 'Here is an example of a request generated by the OAuth tool in Twitter, showing
    a query to get statuses for the `twitterapi` handle:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Twitter中OAuth工具生成的请求示例，显示了获取`twitterapi`句柄状态的查询：
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Twitter API does not support unauthenticated requests and has very strict
    rate-limiting policies.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter API不支持未经身份验证的请求，并且具有非常严格的速率限制政策。
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This gives an output as shown:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生如下输出：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Verbs and resource actions
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动词和资源操作
- en: 'The following table summarizes the commonly used verbs in the Twitter REST
    API:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了Twitter REST API中常用的动词：
- en: '| Verb | Description |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 动词 | 描述 |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `GET` | This is used to retrieve resources such as users, followers, favorites,
    subscribers, and so on. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 用于检索资源，如用户、关注者、收藏夹、订阅者等。 |'
- en: '| `POST` | This is used to create resources such as users, followers, favorites,
    subscribers, and so on. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | 用于创建资源，如用户、关注者、收藏夹、订阅者等。 |'
- en: '| `POST` with verb `update` | This is used to replace resources. For example,
    to update the friendships, the URL will be `POST friendships/update`. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `POST`与动词`update` | 用于替换资源。例如，要更新友谊关系，URL将是`POST friendships/update`。 |'
- en: '| `POST` with verb `destroy` | This is used to delete resources such as deleting
    direct messages, unfollowing someone, and so on. For example, the URL will be
    `POST direct_messages/destroy`. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `POST`与动词`destroy` | 用于删除资源，如删除直接消息、取消关注某人等。例如，URL将是`POST direct_messages/destroy`。
    |'
- en: Versioning
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制
- en: The current version for the Twitter API is 1.1\. It only supports JSON and no
    longer supports XML, RSS, or Atom. With the Twitter API Version 1.1, all clients
    need to be authenticated using OAuth to make queries. The Twitter API Version
    1.0 has been deprecated and there is a 6-month window to move to the new version.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter API的当前版本是1.1。它仅支持JSON，不再支持XML、RSS或Atom。使用Twitter API版本1.1，所有客户端都需要使用OAuth进行身份验证以进行查询。Twitter
    API版本1.0已被弃用，有6个月的时间窗口来迁移到新版本。
- en: Error handling
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: The Twitter API returns standard HTTP error codes in the responses to the REST
    API. It returns `200 OK` in case of success. It returns `304 Not Modified` when
    there is no data to return, `401 Not Authorized` in case authentication credentials
    were missing or incorrect, `500 Internal Server Error` when something is broken
    and needs to be posted to the forum, and so on. Along with detailed error messages,
    the Twitter API produces machine-readable error codes. For example, an error code
    `32` in the response implies the server could not authenticate the user. For more
    details, check [https://dev.twitter.com/docs/error-codes-responses](https://dev.twitter.com/docs/error-codes-responses).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter API在对REST API的响应中返回标准的HTTP错误代码。成功时返回`200 OK`。当没有数据返回时返回`304 Not Modified`，当认证凭据丢失或不正确时返回`401
    Not Authorized`，当出现故障并需要发布到论坛时返回`500 Internal Server Error`等等。除了详细的错误消息，Twitter
    API还生成可机器读取的错误代码。例如，响应中的错误代码`32`意味着服务器无法对用户进行身份验证。更多详情，请查看[https://dev.twitter.com/docs/error-codes-responses](https://dev.twitter.com/docs/error-codes-responses)。
- en: Recommended reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐阅读
- en: 'The following section provides some links, which may be useful to review:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分提供了一些链接，可能对您有所帮助：
- en: 'Facebook Tools: [https://developers.facebook.com/tools/](https://developers.facebook.com/tools/)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook工具：[https://developers.facebook.com/tools/](https://developers.facebook.com/tools/)
- en: 'Twurl (OAuth-enabled cURL for Twitter): [https://github.com/twitter/twurl](https://github.com/twitter/twurl)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twurl（为Twitter启用OAuth的cURL）：[https://github.com/twitter/twurl](https://github.com/twitter/twurl)
- en: 'GitHub API documentation: [https://developer.github.com/v3/](https://developer.github.com/v3/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub API文档：[https://developer.github.com/v3/](https://developer.github.com/v3/)
- en: 'Twitter API documentation: [https://dev.twitter.com/docs/api/1.1](https://dev.twitter.com/docs/api/1.1)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter API文档：[https://dev.twitter.com/docs/api/1.1](https://dev.twitter.com/docs/api/1.1)
- en: 'Stripe API documentation: [https://stripe.com/docs/api](https://stripe.com/docs/api)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stripe API文档：[https://stripe.com/docs/api](https://stripe.com/docs/api)
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This appendix is a modest collection of APIs implemented by popular platforms
    such as GitHub, Facebook, and Twitter and the approaches they have taken to handle
    the various REST patterns. Though there are a myriad of possibilities for what
    a user can do with the data from the REST API, the commonality between the frameworks
    is the usage of REST and JSON. The REST APIs from these platforms are consumed
    by web and mobile clients. This appendix covered how these platforms handle versioning,
    verbs, error handling, and authenticating and authorizing the requests based on
    OAuth 2.0.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录是一份由流行平台（如GitHub、Facebook和Twitter）实施的API的简要集合，以及它们处理各种REST模式的方法。尽管用户可以通过REST
    API的数据做出多种可能性，但这些框架之间的共同点是使用REST和JSON。这些平台的REST API由Web和移动客户端使用。本附录涵盖了这些平台如何处理版本控制、动词、错误处理，以及基于OAuth
    2.0对请求进行认证和授权。
- en: This book started off with the basics of REST and how to build your own RESTful
    services. Since then, we covered various topics as well as tips, and best practices
    for building scalable and highly performant REST services. We have also referred
    to various libraries and tools to improve testing and documentation of REST services
    along with emerging standards for real-time APIs. We also covered case studies
    with WebSockets, WebHooks, and the future of REST.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从REST的基础知识和如何构建自己的RESTful服务开始。从那时起，我们涵盖了各种主题以及构建可扩展和高性能的REST服务的技巧和最佳实践。我们还参考了各种库和工具，以改进REST服务的测试和文档，以及实时API的新兴标准。我们还涵盖了使用WebSockets、WebHooks以及REST的未来的案例研究。
- en: We hope this humble attempt from our end helps you understand, learn, design,
    and develop better REST APIs in the future.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的这一努力能帮助您更好地理解、学习、设计和开发未来的REST API。
