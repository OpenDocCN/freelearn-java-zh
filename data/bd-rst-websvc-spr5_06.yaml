- en: Spring Security and JWT (JSON Web Token)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security和JWT（JSON Web Token）
- en: In this chapter, we will acquire a simple understanding of Spring Security and
    we will also talk about **JSON Web Token** (**JWT**) and how to use JWTs in our
    web service calls. This will also include JWT creation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简单了解Spring Security，并且我们还将讨论**JSON Web Token**（**JWT**）以及如何在我们的web服务调用中使用JWT。这也将包括JWT的创建。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Spring Security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security
- en: JSON Web Token (JWT)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON Web Token（JWT）
- en: How to generate JWTs in web services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在web服务中生成JWT
- en: How to access and retrieve information from JWTs in a web service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在web服务中访问和检索JWT中的信息
- en: How to restrict web service calls by adding JWT security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过添加JWT安全来限制web服务调用
- en: Spring Security
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security
- en: Spring Security is a powerful authentication and authorization framework, which
    will help us to provide a secure application. By using Spring Security, we can
    keep all of our REST APIs secured and accessible only by authenticated and authorized
    calls.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security是一个强大的身份验证和授权框架，将帮助我们提供一个安全的应用程序。通过使用Spring Security，我们可以确保所有的REST
    API都是安全的，并且只能通过经过身份验证和授权的调用访问。
- en: Authentication and authorization
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和授权
- en: Let's look at an example to explain this. Assume you have a library with many
    books. Authentication will provide a key to enter the library; however, authorization
    will give you permission to take a book. Without a key, you can't even enter the
    library. Even though you have a key to the library, you will be allowed to take
    only a few books.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子来解释一下。假设你有一个有很多书的图书馆。身份验证将提供一个进入图书馆的钥匙；然而，授权将给予你取书的权限。没有钥匙，你甚至无法进入图书馆。即使你有图书馆的钥匙，你也只能取几本书。
- en: JSON Web Token (JWT)
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON Web Token（JWT）
- en: Spring Security can be applied in many forms, including XML configurations using
    powerful libraries such as JWT. As most companies use JWT in their security, we
    will focus more on JWT-based security than simple Spring Security, which can be
    configured in XML.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security可以以多种形式应用，包括使用强大的库如JWT进行XML配置。由于大多数公司在其安全中使用JWT，我们将更多地关注基于JWT的安全，而不是简单的Spring
    Security，后者可以在XML中配置。
- en: 'JWT tokens are URL-safe and web browser-compatible especially for **Single
    Sign-On** (**SSO**) contexts. JWT has three parts:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JWT令牌在URL上是安全的，并且在**单点登录**（**SSO**）环境中与Web浏览器兼容。JWT有三部分：
- en: Header
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部
- en: Payload
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效载荷
- en: Signature
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签名
- en: The header part decides which algorithm should be used to generate the token.
    While authenticating, the client has to save the JWT, which is returned by the
    server. Unlike traditional session creation approaches, this process doesn't need
    to store any cookies on the client side. JWT authentication is stateless as the
    client state is never saved on a server.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 头部部分决定了应该使用哪种算法来生成令牌。在进行身份验证时，客户端必须保存服务器返回的JWT。与传统的会话创建方法不同，这个过程不需要在客户端存储任何cookie。JWT身份验证是无状态的，因为客户端状态从未保存在服务器上。
- en: JWT dependency
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JWT依赖
- en: 'To use JWT in our application, we may need to use the Maven dependency. The
    following dependency should be added in the `pom.xml` file. You can get the Maven
    dependency from: [https://mvnrepository.com/artifact/javax.xml.bind](https://mvnrepository.com/artifact/javax.xml.bind).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中使用JWT，我们可能需要使用Maven依赖。以下依赖应该添加到`pom.xml`文件中。您可以从以下链接获取Maven依赖：[https://mvnrepository.com/artifact/javax.xml.bind](https://mvnrepository.com/artifact/javax.xml.bind)。
- en: 'We have used version `2.3.0` of the Maven dependency in our application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序中使用了Maven依赖的版本`2.3.0`：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As Java 9 doesn't include `DataTypeConverter` in their bundle, we need to add
    the preceding configuration to work with `DataTypeConverter`. We will cover `DataTypeConverter`
    in the following section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java 9在其捆绑包中不包括`DataTypeConverter`，我们需要添加上述配置来使用`DataTypeConverter`。我们将在下一节中介绍`DataTypeConverter`。
- en: Creating a JWT token
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建JWT令牌
- en: To create a token, we have added an abstract method called `createToken` in
    our `SecurityService` interface. This interface will tell the implementing class
    that it has to create a complete method for `createToken`. In the `createToken`
    method, we will use only the subject and expiry time as these two options are
    important when creating a token.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个令牌，我们在`SecurityService`接口中添加了一个名为`createToken`的抽象方法。该接口将告诉实现类必须为`createToken`创建一个完整的方法。在`createToken`方法中，我们将只使用主题和到期时间，因为在创建令牌时这两个选项很重要。
- en: 'At first, we will create an abstract method in the `SecurityService` interface.
    The concrete class (whoever implements the `SecurityService` interface) has to
    implement the method in their class:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`SecurityService`接口中创建一个抽象方法。具体类（实现`SecurityService`接口的类）必须在其类中实现该方法：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we defined the method for token creation in the interface.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在接口中定义了令牌创建的方法。
- en: '`SecurityServiceImpl` is the concrete class that implements the abstract method
    of the `SecurityService` interface by applying the business logic. The following
    code will explain how JWT will be created by using the subject and expiry time:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityServiceImpl`是一个具体的类，它通过应用业务逻辑来实现`SecurityService`接口的抽象方法。以下代码将解释如何使用主题和到期时间来创建JWT：'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code creates the token for the subject. Here, we have hardcoded
    the secret key `"4C8kum4LxyKWYLM78sKdXrzbBjDCFyfX"` to simplify the token creation
    process. If needed, we can keep the secret key inside the properties file to avoid
    hard code in the Java code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码为主题创建了令牌。在这里，我们已经硬编码了秘钥`"4C8kum4LxyKWYLM78sKdXrzbBjDCFyfX"`，以简化令牌创建过程。如果需要，我们可以将秘钥保存在属性文件中，以避免在Java代码中硬编码。
- en: At first, we verify whether the time is greater than zero. If not, we throw
    the exception right away. We are using the SHA-256 algorithm as it is used in
    most applications.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们验证时间是否大于零。如果不是，我们立即抛出异常。我们使用SHA-256算法，因为它在大多数应用程序中都被使用。
- en: '**Secure Hash Algorithm** (**SHA**) is a cryptographic hash function. The cryptographic
    hash is in the text form of a data file. The SHA-256 algorithm generates an almost-unique,
    fixed-size 256-bit hash. SHA-256 is one of the more reliable hash functions.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全哈希算法**（**SHA**）是一种密码哈希函数。密码哈希是数据文件的文本形式。SHA-256算法生成一个几乎唯一的、固定大小的256位哈希。SHA-256是更可靠的哈希函数之一。'
- en: 'We have hardcoded the secret key in this class. We can also store the key in
    the `application.properties` file. However to simplify the process, we have hardcoded
    it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在此类中将密钥硬编码。我们也可以将密钥存储在`application.properties`文件中。但是为了简化流程，我们已经将其硬编码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We are converting the string key to a byte array and then passing it to a Java
    class, `SecretKeySpec`, to get a `signingKey`. This key will be used in the token
    builder. Also, while creating a signing key, we use JCA, the name of our signature
    algorithm.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将字符串密钥转换为字节数组，然后将其传递给Java类`SecretKeySpec`，以获取`signingKey`。此密钥将用于令牌生成器。此外，在创建签名密钥时，我们使用JCA，这是我们签名算法的名称。
- en: '**Java Cryptography Architecture** (**JCA**) was introduced by Java to support
    modern cryptography techniques.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java密码体系结构**（**JCA**）是Java引入的，以支持现代密码技术。'
- en: 'We use the `JwtBuilder` class to create the token and set the expiration time
    for it. The following code defines the token creation and expiry time setting
    option:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`JwtBuilder`类来创建令牌，并为其设置到期时间。以下代码定义了令牌创建和到期时间设置选项：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will have to pass time in milliseconds while calling this method as the `setExpiration`
    takes only milliseconds.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用此方法时，我们必须传递毫秒时间，因为`setExpiration`只接受毫秒。
- en: 'Finally, we have to call the `createToken` method in our `HomeController`.
    Before calling the method, we will have to autowire the `SecurityService` as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须在我们的`HomeController`中调用`createToken`方法。在调用该方法之前，我们将不得不像下面这样自动装配`SecurityService`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `createToken` call is coded as follows. We take the subject as the parameter.
    To simplify the process, we have hardcoded the expiry time as `2 * 1000 * 60`
    (two minutes).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`createToken`调用编码如下。我们将主题作为参数。为了简化流程，我们已将到期时间硬编码为`2 * 1000 * 60`（两分钟）。'
- en: '`HomeController.java`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`HomeController.java`：'
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Generating a token
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成令牌
- en: We can test the token by calling the API in a browser or any REST client. By
    calling this API, we can create a token. This token will be used for user authentication-like
    purposes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在浏览器或任何REST客户端中调用API来测试令牌。通过调用此API，我们可以创建一个令牌。此令牌将用于用户身份验证等目的。
- en: 'Sample API for creating a token is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建令牌的示例API如下：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here we have used `one` as a subject. We can see the token in the following
    result. This is how the token will be generated for all the subjects we pass to
    the API:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`one`作为主题。我们可以在以下结果中看到令牌。这就是我们为传递给API的所有主题生成令牌的方式：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: JWT is a string that has three parts, each separated by a dot (.). Each section
    is base-64 encoded. The first section is the header, which gives a clue about
    the algorithm used to sign the JWT. The second section is the body, and the final
    section is the signature.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: JWT是一个由三部分组成的字符串，每部分用一个点（.）分隔。每个部分都经过base-64编码。第一部分是头部，它提供了关于用于签署JWT的算法的线索。第二部分是主体，最后一部分是签名。
- en: Getting a subject from a JWT token
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从JWT令牌中获取主题
- en: So far, we have created a JWT token. Here, we are going to decode the token
    and get the subject from it. In a future section, we will talk about how to decode
    and get the subject from the token.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个JWT令牌。在这里，我们将解码令牌并从中获取主题。在后面的部分中，我们将讨论如何解码并从令牌中获取主题。
- en: As usual, we have to define the method to get the subject. We will define the
    `getSubject` method in `SecurityService`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们必须定义获取主题的方法。我们将在`SecurityService`中定义`getSubject`方法。
- en: 'Here, we will create an abstract method called `getSubject` in the `SecurityService`
    interface. Later, we will implement this method in our concrete class:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在`SecurityService`接口中创建一个名为`getSubject`的抽象方法。稍后，我们将在我们的具体类中实现这个方法：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In our concrete class, we will implement the `getSubject` method and add our
    code in the `SecurityServiceImpl` class. We can use the following code to get
    the subject from the token:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的具体类中，我们将实现`getSubject`方法，并在`SecurityServiceImpl`类中添加我们的代码。我们可以使用以下代码从令牌中获取主题：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding method, we use the `Jwts.parser` to get the `claims`. We set
    a signing key by converting the secret key to binary and then passing it to a
    parser. Once we get the `Claims`, we can simply get the subject by calling `getSubject`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们使用`Jwts.parser`来获取`claims`。我们通过将密钥转换为二进制并将其传递给解析器来设置签名密钥。一旦我们得到了`Claims`，我们可以通过调用`getSubject`来简单地获取主题。
- en: 'Finally, we can call the method in our controller and pass the generated token
    to get the subject. You can check the following code, where the controller is
    calling the `getSubject` method and returning the subject in the `HomeController.java`
    file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在我们的控制器中调用该方法，并传递生成的令牌以获取主题。您可以检查以下代码，其中控制器调用`getSubject`方法，并在`HomeController.java`文件中返回主题：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Getting a subject from a token
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从令牌中获取主题
- en: Previously, we created the code to get the token. Here we will test the method
    we created previously by calling the get subject API. By calling the REST API,
    we will get the subject that we passed earlier.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们创建了获取令牌的代码。在这里，我们将通过调用获取主题API来测试我们之前创建的方法。通过调用REST API，我们将得到之前传递的主题。
- en: 'Sample API:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 示例API：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since we used `one` as the subject when creating the token by calling the `generateToken`
    method, we will get `"one"` in the `getSubject` method:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在调用`generateToken`方法创建令牌时使用了`one`作为主题，所以我们将在`getSubject`方法中得到`"one"`：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Usually, we attach the token in the headers; however, to avoid complexity, we
    have provided the result. Also, we have passed the token as a parameter to get
    the subject. You may not need to do it the same way in a real application. This
    is only for demo purposes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将令牌附加在标头中；然而，为了避免复杂性，我们已经提供了结果。此外，我们已将令牌作为参数传递给`getSubject`。在实际应用中，您可能不需要以相同的方式进行操作。这只是为了演示目的。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed Spring Security and JWT token-based security
    to get and decode the token. In future chapters, we will discuss how to use the
    token in AOP and restrict the API call by using a JWT token.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经讨论了Spring Security和基于JWT令牌的安全性，以获取和解码令牌。在未来的章节中，我们将讨论如何在AOP中使用令牌，并通过使用JWT令牌来限制API调用。
