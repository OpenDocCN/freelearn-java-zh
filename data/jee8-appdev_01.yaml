- en: Introduction to Java EE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE 简介
- en: The **Java Platform, Enterprise Edition** (**Java EE**) consists of a set of
    **Application Programming Interface** (**API**) specifications used to develop
    server-side, enterprise Java applications. In this chapter, we will provide a
    high-level overview of Java EE.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java Platform, Enterprise Edition** (**Java EE**) 由一组用于开发服务器端、企业 Java 应用程序的
    **应用程序编程接口** (**API**) 规范组成。在本章中，我们将提供一个 Java EE 的高级概述。'
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍以下主题：
- en: Introduction to Java EE
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 简介
- en: One standard, multiple implementations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个标准，多个实现
- en: Java EE, J2EE, and the Spring Framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE、J2EE 和 Spring 框架
- en: Introduction to Java EE
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE 简介
- en: The Java Platform, Enterprise Edition (Java EE) is a collection of API specifications
    designed to work together when developing server-side, enterprise Java applications.
    Java EE is a standard; there are multiple implementations of the Java EE specifications.
    This fact prevents vendor lock-in since code developed against the Java EE specification
    can be deployed to any Java EE-compliant application server with minimal or no
    modifications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Java 平台，企业版 (Java EE) 是一组 API 规范的集合，旨在在开发服务器端、企业 Java 应用程序时协同工作。Java EE 是一个标准；Java
    EE 规范有多个实现。这一事实防止了供应商锁定，因为针对 Java EE 规范开发的代码可以部署到任何 Java EE 兼容的应用服务器，只需进行最小或没有修改。
- en: Java EE is developed under the **Java Community Process** (**JCP**), an organization
    responsible for the development of Java technology. JCP members include Oracle
    (the current steward of the Java platform), and the Java community at large.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 在 **Java Community Process** (**JCP**) 下开发，这是一个负责 Java 技术发展的组织。JCP 成员包括
    Oracle（Java 平台的当前监护人）以及整个 Java 社区。
- en: Java community process
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java community process
- en: The **Java Community Process** (**JCP**) allows interested parties to assist
    in developing standard technical specification for Java technology. Both companies
    and individuals can become members of the JCP and contribute to any technical
    specification they may be interested in. Each Java EE API specification is developed
    as part of a **Java Specification Request** (**JSR**). Each JSR is assigned a
    unique number. **JavaServer Faces** (**JSF**) 2.3 is developed as JSR 372, for
    instance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java Community Process** (**JCP**) 允许感兴趣的相关方协助开发 Java 技术的标准技术规范。公司和个人都可以成为
    JCP 的成员，并为任何他们感兴趣的技术规范做出贡献。每个 Java EE API 规范都是作为 **Java Specification Request**
    (**JSR**) 的一部分开发的。每个 JSR 都分配了一个唯一的编号。例如，**JavaServer Faces** (**JSF**) 2.3 是作为
    JSR 372 开发的。'
- en: Since Java EE is developed under the JCP, no one company has complete control
    over the Java EE specification, since, as mentioned before, the JCP is available
    to the Java community at large, both software vendors and interested individuals.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Java EE 在 JCP 下开发，没有一家公司能够完全控制 Java EE 规范，因为，如前所述，JCP 对整个 Java 社区开放，包括软件供应商和感兴趣的个人。
- en: Different JCP members have different interests, and contribute to different
    Java EE specifications; the end result is that Java EE is jointly developed by
    various members of the Java community.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的 JCP 成员有不同的兴趣，并为不同的 Java EE 规范做出贡献；结果是 Java EE 由 Java 社区的各个成员共同开发。
- en: Java EE APIs
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE API
- en: 'As previously mentioned, Java EE is a collection of API specifications designed
    to work together when developing server-side enterprise Java applications. Java
    EE 8 APIs include:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Java EE 是一组 API 规范的集合，旨在在开发服务器端企业 Java 应用程序时协同工作。Java EE 8 API 包括：
- en: JavaServer Faces (JSF) 2.3
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaServer Faces (JSF) 2.3
- en: Java Persistence API (JPA) 2.2
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 持久性 API (JPA) 2.2
- en: Enterprise JavaBeans (EJB) 3.2
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业 JavaBeans (EJB) 3.2
- en: Contexts and Dependency Injection for the Java EE Platform (CDI) 2.0
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 平台上下文和依赖注入 (CDI) 2.0
- en: Java API for JSON Processing (JSON-P) 1.1
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java API for JSON Processing (JSON-P) 1.1
- en: Java API for JSON Binding (JSON-B) 1.0
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java API for JSON Binding (JSON-B) 1.0
- en: Java API for WebSocket 1.0
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java API for WebSocket 1.0
- en: Java Message Service (JMS) 2.0
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 消息服务 (JMS) 2.0
- en: Java EE Security API 1.0
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 安全 API 1.0
- en: Java API for RESTful Web Services (JAX-RS) 2.1
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java API for RESTful Web Services (JAX-RS) 2.1
- en: Java API for XML Web Services (JAX-WS) 2.2
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java API for XML Web Services (JAX-WS) 2.2
- en: Servlet 4.0
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Servlet 4.0
- en: Expression Language (EL) 3.0
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式语言 (EL) 3.0
- en: JavaServer Pages (JSP) 2.3
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaServer Pages (JSP) 2.3
- en: Java Naming and Directory Interface (JNDI) 1.2
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 命名和目录接口 (JNDI) 1.2
- en: Java Transaction API (JTA) 1.2
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 事务 API (JTA) 1.2
- en: Java Transaction Service (JTS) 1.0
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 事务服务 (JTS) 1.0
- en: JavaMail 1.5
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaMail 1.5
- en: Java EE Connector Architecture (JCA) 1.7
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE 连接器架构 (JCA) 1.7
- en: Java Architecture for XML Binding (JAXB) 2.2
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Architecture for XML Binding (JAXB) 2.2
- en: Java Management Extensions (JMX) 1.2
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java Management Extensions (JMX) 1.2
- en: Standard Tag Library for JavaServer Pages (JSTL) 1.2
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaServer Pages (JSTL) 标准标签库 1.2
- en: Bean Validation 2.0
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bean Validation 2.0
- en: Managed Beans 1.0
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Bean 1.0
- en: Interceptors 1.2
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拦截器 1.2
- en: Concurrency Utilities for Java EE 1.0
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE并发实用工具 1.0
- en: Batch Applications for the Java Platform 1.0
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java平台批处理应用程序 1.0
- en: The preceding list is a list of specifications, application server vendors or
    the open source community need to provide implementations for each Java EE API
    specification. Application server vendors then bundle a set of Java EE API implementations
    together as part of their application server offerings. Since each implementation
    is compliant with the corresponding Java EE JSR, code developed against one implementation
    can run unmodified against any other implementation, avoiding vendor lock-in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表是一个规范列表，应用服务器供应商或开源社区需要为每个Java EE API规范提供实现。应用服务器供应商然后将一组Java EE API实现捆绑在一起，作为其应用服务器产品的一部分。由于每个实现都符合相应的Java
    EE JSR，针对一个实现开发的代码可以在任何其他实现上无修改地运行，从而避免供应商锁定。|
- en: 'Due to time and space constraints, we won''t cover every single Java EE API
    specification in this book, instead focusing on the most popular Java EE APIs.
    The following table summarizes the APIs that we will be covering:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间和空间限制，本书不会涵盖每个Java EE API规范，而是专注于最流行的Java EE API。以下表格总结了我们将要覆盖的API：
- en: '| **Java EE API** | **Description** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **Java EE API** | **描述** |'
- en: '| **JavaServer Faces** (**JSF**) 2.3 | JSF is a component library that greatly
    simplifies the development of web applications. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **JavaServer Faces** (**JSF**) 2.3 | JSF是一个组件库，极大地简化了Web应用程序的开发。|'
- en: '| **Java Persistence API** (**JPA**) 2.2 | JPA is the Java EE standard **Object-Relational
    Mapping** (**ORM**) API. It makes it easy to interact with relational databases.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **Java Persistence API** (**JPA**) 2.2 | JPA是Java EE标准的**对象关系映射** (**ORM**)
    API。它使得与关系数据库交互变得容易。|'
- en: '| **Enterprise JavaBeans** (**EJB**) 3.2 | EJB''s allow us to easily add enterprise
    features such as transactions and scalability to our Java EE applications. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **Enterprise JavaBeans** (**EJB**) 3.2 | EJB允许我们轻松地为Java EE应用程序添加企业功能，如事务和可伸缩性。|'
- en: '| **Contexts and Dependency Injection** (**CDI**) 2.0 | CDI allows us to easily
    define the life cycle of Java objects and provides the ability to easily inject
    dependencies into Java objects; it also provides a powerful event mechanism. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **Contexts and Dependency Injection** (**CDI**) 2.0 | CDI允许我们轻松定义Java对象的生命周期，并提供将依赖项轻松注入Java对象的能力；它还提供了一个强大的事件机制。|'
- en: '| Java API for **JSON Processing** (**JSON-P**) 1.1 | JSON-P is an API that
    allows working with JSON strings in Java. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Java API for **JSON Processing** (**JSON-P**) 1.1 | JSON-P是一个允许在Java中处理JSON字符串的API。|'
- en: '| Java API for **JSON Binding** (**JSON-B**) 1.0 | JSON-B provides the ability
    to easily populate Java objects from JSON streams and back. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Java API for **JSON Binding** (**JSON-B**) 1.0 | JSON-B提供了从JSON流中轻松填充Java对象以及反向操作的能力。|'
- en: '| Java API for WebSocket 1.0 | WebSocket is a standard Java EE implementation
    of the **Internet Engineering Task Force** (**IETF**) WebSocket protocol, which
    allows full duplex communication over a single TCP connection. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Java API for WebSocket 1.0 | WebSocket是一个标准的Java EE实现，实现了**互联网工程任务组** (**IETF**)的WebSocket协议，它允许通过单个TCP连接进行全双工通信。|'
- en: '| **Java Message Service** (**JMS**) 2.0 | JMS is a standard API that allows
    Java EE developers to interact with **Message Oriented Middleware** (**MOM**).
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **Java Message Service** (**JMS**) 2.0 | JMS是一个标准API，允许Java EE开发者与**面向消息的中间件**
    (**MOM**)交互。|'
- en: '| Java EE Security API 1.0 | The Java EE Security API aims to standardize and
    simplify the task of securing Java EE applications. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Java EE Security API 1.0 | Java EE安全API旨在标准化和简化保护Java EE应用程序的任务。|'
- en: '| **Java API for RESTful Web Services** (**JAX-RS**) 2.1 | JAX-RS is an API
    for creating RESTful web services endpoints and clients. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **Java API for RESTful Web Services** (**JAX-RS**) 2.1 | JAX-RS是一个用于创建RESTful网络服务端点和客户端的API。|'
- en: '| **Java API for XML Web Services** (**JAX-WS**) 2.2 | JAX-WS is an API that
    allows the creation of **Simple Object Access Protocol** (**SOAP**) web services.
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **Java API for XML Web Services** (**JAX-WS**) 2.2 | JAX-WS是一个允许创建**简单对象访问协议**
    (**SOAP**)网络服务的API。|'
- en: '| Servlet 4.0 | The servlet API is a low-level API used to implement server-side
    logic in web applications. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| Servlet 4.0 | Servlet API是一个用于在Web应用程序中实现服务器端逻辑的低级API。|'
- en: We will also cover how to develop microservices by leveraging standard Java
    EE APIs. Microservices are a modern, popular architectural style in which applications
    are split up into small modules deployed independently, interacting with each
    other via the network, typically by leveraging RESTful web services.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍如何利用标准 Java EE API 开发微服务。微服务是一种现代、流行的架构风格，其中应用程序被分割成独立部署的小模块，通过网络相互交互，通常通过利用
    RESTful 网络服务来实现。
- en: We should also note that, with the possible exception of the chapter on microservices,
    each chapter on this book is standalone; feel free to read the chapters in any
    order.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该注意，除了关于微服务章节外，本书的每个章节都是独立的；您可以随意按任何顺序阅读这些章节。
- en: Now that we have covered the different APIs provided by Java EE, it is worth
    reiterating that Java EE is a single standard with multiple implementations, some
    commercial, and some open source.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 Java EE 提供的不同 API，值得重申的是，Java EE 是一个单一标准，有多种实现，其中一些是商业的，一些是开源的。
- en: One standard, multiple implementations
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个标准，多种实现
- en: At its core, Java EE is a specification—a piece of paper, if you will. Implementations
    of Java EE specifications need to be developed so that application developers
    can actually develop server-side, enterprise Java applications against the Java
    EE standard. Each Java EE API has multiple implementations; the popular Hibernate
    Object-Relational Mapping tool, for example, is an implementation of Java EE's
    Java Persistence API (JPA). However, it is by no means the only JPA implementation;
    other JPA implementations include EclipseLink and OpenJPA. Similarly, there are
    multiple implementations of every single Java EE API specification.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，Java EE 是一个规范——如果你愿意的话，可以说是一张纸。Java EE 规范的实现需要被开发，这样应用开发者才能根据 Java EE 标准实际开发服务器端的企业
    Java 应用。每个 Java EE API 都有多种实现；例如，流行的 Hibernate 对象关系映射工具就是 Java EE 的 Java 持久化 API
    (JPA) 的一个实现。然而，它绝不是唯一的 JPA 实现；其他 JPA 实现包括 EclipseLink 和 OpenJPA。同样，每个 Java EE
    API 规范都有多种实现。
- en: Java EE applications are typically deployed to an application server; some popular
    application servers include JBoss, Websphere, Weblogic, and GlassFish. Each application
    server is considered to be a Java EE implementation. Application server vendors
    either develop their own implementation of the several Java EE API specifications
    or choose to include an existing implementation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 应用通常部署到应用服务器；一些流行的应用服务器包括 JBoss、Websphere、Weblogic 和 GlassFish。每个应用服务器都被视为一个
    Java EE 实现。应用服务器供应商要么开发自己的一些 Java EE API 规范的实现，要么选择包含现有的实现。
- en: Application developers benefit from the Java EE standard by not being tied to
    a specific Java EE implementation. As long as an application is developed against
    standard Java EE APIs, it should be very portable across application server vendors.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 应用开发者通过不受特定 Java EE 实现的约束而受益。只要应用是针对标准 Java EE API 开发的，它应该非常易于跨应用服务器供应商移植。
- en: Java EE, J2EE, and the Spring framework
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE、J2EE 和 Spring 框架
- en: Java EE was introduced back in 2006; the first version of Java EE was Java EE
    5\. Java EE replaced J2EE; the last version of J2EE was J2EE 1.4, released back
    in 2003\. Even though J2EE can be considered a dead technology, replaced by Java
    EE over 11 years ago, the term J2EE refuses to die. Many individuals to this day
    still refer to Java EE as J2EE; many companies advertise on their websites and
    job boards that they are looking for "J2EE developers", seemingly unaware that
    they are referring to a technology that has been dead for several years. The correct
    term is and has been for a long time, Java EE.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 早在 2006 年就被引入；Java EE 的第一个版本是 Java EE 5。Java EE 取代了 J2EE；J2EE 的最后一个版本是
    J2EE 1.4，于 2003 年发布。尽管 J2EE 可以被认为是一种已死的技术，在 11 年前就被 Java EE 取代，但 J2EE 这个术语却拒绝消失。时至今日，许多人仍然将
    Java EE 称为 J2EE；许多公司在他们的网站和招聘板上宣传他们正在寻找“J2EE 开发者”，似乎没有意识到他们所指的已经是一种存在了几年的过时技术。正确的术语，并且长期以来一直是，Java
    EE。
- en: Additionally, the term J2EE has become a "catch-all" term for any server-side
    Java technology; frequently Spring applications are referred to as J2EE applications.
    Spring is not, and has never been, J2EE; as a matter of fact, Spring was created
    by Rod Johnson as an alternative to J2EE back in 2002\. Just like with Java EE,
    Spring applications are frequently erroneously referred to as J2EE applications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，术语J2EE已经成为任何服务器端Java技术的“万能”术语；通常Spring应用程序也被称作J2EE应用程序。Spring并非J2EE，也从未是J2EE；事实上，Spring是由Rod
    Johnson在2002年作为J2EE的替代品而创建的。就像Java EE一样，Spring应用程序也经常被错误地称为J2EE应用程序。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we provided an introduction to Java EE, supplying a list of
    several technologies and application programming interfaces (APIs) included with
    Java EE.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了Java EE的介绍，并列出了Java EE中包含的几个技术和应用程序编程接口（API）。
- en: We also covered how Java EE is developed both by software vendors and the Java
    community at large via the Java community process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了Java EE是如何通过Java社区过程由软件供应商和整个Java社区共同开发的。
- en: Additionally, we explained how there are multiple implementations of the Java
    EE standard, a fact that avoids vendor lock-in and allow us to easily migrate
    our Java EE code from one application server to another.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们解释了Java EE标准有多个实现，这一事实避免了供应商锁定，并使我们能够轻松地将我们的Java EE代码从一个应用程序服务器迁移到另一个。
- en: Finally, we cleared up the confusion between Java EE, J2EE, and Spring, explaining
    how Java EE and Spring applications are frequently referred to as J2EE applications,
    even though J2EE has been a dead technology for several years.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们澄清了Java EE、J2EE和Spring之间的混淆，解释了尽管J2EE已经是一种过时的技术好几年了，Java EE和Spring应用程序通常仍被称为J2EE应用程序。
