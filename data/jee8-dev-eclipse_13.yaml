- en: Securing JEE Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护 JEE 应用程序
- en: In the previous chapter, we learned how to deploy JEE applications in the cloud.
    In this chapter, we will learn how to secure JEE applications—specifically, how
    to perform authentication and authorization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何在云中部署 JEE 应用程序。在本章中，我们将学习如何保护 JEE 应用程序——特别是如何执行身份验证和授权。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Securing JEE web applications using deployment descriptors
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用部署描述符保护 JEE 网络应用程序
- en: Securing JEE web applications using annotations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用注解保护 JEE 网络应用程序
- en: Securing web services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护网络服务
- en: Security enhancements in JEE 8
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JEE 8 中的安全增强
- en: Authentication and authorization in JEE
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JEE 中的身份验证和授权
- en: Authentication is the process of verifying that the user is who he or she is
    claiming to be. This is typically done by asking the user to provide a username
    and password. Another way to verify the client identity is by asking for client
    certificates. In this chapter, we will look at password authentication only.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是验证用户是否是他或她所声称的过程。这通常是通过要求用户提供用户名和密码来完成的。验证客户端身份的另一种方式是要求客户端证书。在本章中，我们将仅查看密码身份验证。
- en: Authorization is the process of determining whether a user is allowed to perform
    certain actions in the application. The JEE specification allows role-based authorization.
    In the application, you specify roles that can perform an action, or access a
    resource, and then add users to these roles.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是确定用户是否被允许在应用程序中执行某些操作的过程。JEE 规范允许基于角色的授权。在应用程序中，您指定可以执行操作或访问资源的角色，然后将用户添加到这些角色中。
- en: Unfortunately, securing JEE applications, as per JEE specifications, is not
    completely server-independent. There are parts of the configuration that are common
    across servers, and there are parts that are specific to server vendors. Common
    configurations are mostly done in `web.xml` or by using annotations. But, server-specific
    configurations vary from vendor to vendor. In this chapter, we will learn how
    to secure JEE applications in GlassFish and Tomcat servers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，根据 JEE 规范，保护 JEE 应用程序并非完全独立于服务器。配置的部分是服务器通用的，而部分则是特定于服务器供应商的。常见的配置大多在 `web.xml`
    中完成或通过使用注解。但是，服务器特定的配置因供应商而异。在本章中，我们将学习如何在 GlassFish 和 Tomcat 服务器中保护 JEE 应用程序。
- en: 'But, before we learn details about securing applications, we need to understand
    certain terms commonly used in configurations, in the context of security:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在我们学习有关保护应用程序的详细信息之前，我们需要了解在安全配置的上下文中常用的某些术语：
- en: '**User**: A client requesting access to a protected resource in an application'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：请求访问应用程序中受保护资源的客户端'
- en: '**Group**: A set of users with similar characteristics'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组**：具有相似特征的用户的集合'
- en: '**Role**: Determines what resources can be accessed in an application, by a
    user or group, with that particular role'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色**：确定用户或组可以访问应用程序中的哪些资源，具有该特定角色'
- en: '**Realm**: Can be considered a security domain, with its own users, groups,
    and storage method'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域**：可以被视为一个安全域，拥有自己的用户、组和存储方法'
- en: Modifying a database to save authentication information
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改数据库以保存身份验证信息
- en: 'In this chapter, we will use a database to authenticate users. Other methods
    used to store security information include files and LDAP. We will need to update
    our `course_management` database with tables to store information about users
    and groups. Let''s create three tables—`User`, `Groups`, and `User_Group`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用数据库来验证用户。其他用于存储安全信息的方法包括文件和 LDAP。我们需要更新我们的 `course_management` 数据库，添加存储用户和组信息的表。让我们创建三个表——`User`、`Groups`
    和 `User_Group`：
- en: '![](img/00268.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: 'Figure 14.1: New tables for authentication'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：新的身份验证表
- en: The `User` table stores the username and password. The `Groups` table stores
    the group names. We will group names directly into roles later. The `User_Group` table
    is a joint table, joining the `User` and `Groups` tables. One user can be in many
    groups, and one group can have many users.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`User` 表存储用户名和密码。`Groups` 表存储组名。我们稍后将直接将组名分组到角色中。`User_Group` 表是一个联合表，将 `User`
    和 `Groups` 表连接起来。一个用户可以属于多个组，一个组也可以有多个用户。'
- en: 'To simplify mapping information from the preceding tables when configuring
    realms in JEE servers, we will create a view, named `user_group_view`, that makes
    information from all the preceding tables available in one view. The DDL script
    for the view is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化在JEE服务器中配置领域时从前面表映射信息，我们将创建一个名为`user_group_view`的视图，使得所有前面表的信息在一个视图中可用。该视图的DDL脚本如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you already have the `course_management` schema from earlier chapters, then
    run the script in the `add_auth_tables.sql` file (the file is in the source code
    folder for this chapter). If you are using `MySQLWorkbench`, you can run the script
    as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有之前章节中的`course_management`模式，那么在`add_auth_tables.sql`文件（该文件在本章源代码文件夹中）中运行脚本。如果你使用`MySQLWorkbench`，可以按照以下方式运行脚本：
- en: Make sure `course_management` is the default schema; right-click on the schema
    and select the Set as Default Schema option.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保默认模式为`course_management`；右键点击模式并选择`设置为默认模式`选项。
- en: Select the File | Open SQL Script menu, and then select the `add_auth_tables.sql`
    file. The file will open in a new tab.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文件 | 打开SQL脚本菜单，然后选择`add_auth_tables.sql`文件。文件将在新标签页中打开。
- en: Click on the Execute icon in the toolbar to execute this script.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具栏中的执行图标以执行此脚本。
- en: Right-click on the course_management schema and select the Refresh All option.
    Make sure the new tables and the view are created in the schema.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`course_management`模式并选择`刷新所有`选项。确保新表和视图已在该模式中创建。
- en: For testing purpose, let's insert the following data in the `user` table**:**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试目的，让我们在`user`表中插入以下数据**：
- en: '| **ID** | **user_name** | **password** |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **ID** | **user_name** | **password** |'
- en: '| `1` | `user1` | `user1_pass` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `user1` | `user1_pass` |'
- en: '| `2` | `user2` | `user2_pass` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `user2` | `user2_pass` |'
- en: '`Groups`**:**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`组`**：'
- en: '| **ID** | **group_name** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **ID** | **group_name** |'
- en: '| `1` | `admin` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `admin` |'
- en: '`User_Group`**:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`用户组`**：'
- en: '| **user_ID** | **group_ID** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **user_ID** | **group_ID** |'
- en: '| `1` | `1` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `1` |'
- en: As per the preceding data, `user1` is in the admin group, and `user2` is not
    in any group.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的数据，`user1`在admin组中，而`user2`不在任何组中。
- en: Securing applications in GlassFish
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GlassFish中的应用程序安全
- en: 'We will use the *Course Management* application that we developed in [Chapter
    7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating JEE Applications
    with EJB*, to add security features. Follow these steps to import projects:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在第7章[创建JEE应用程序与EJB](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)中开发的*Course
    Management*应用程序来添加安全功能。按照以下步骤导入项目：
- en: Create a new Eclipse workspace for this chapter.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为本章创建一个新的Eclipse工作空间。
- en: Copy all the projects in the source code folder for [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB,* inside the `with-maven` folder, to the current workspace.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将源代码文件夹中[第7章](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，“使用EJB创建JEE应用程序”，`with-maven`文件夹内的所有项目复制到当前工作空间中。
- en: Import all the projects into the new workspace (open the File | Import menu and
    then select Maven | Existing Maven Projects).
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有项目导入到新工作空间中（打开文件 | 导入菜单，然后选择Maven | 已存在的Maven项目）。
- en: You should now have the following projects in your Eclipse workspace: `CourseManagementMavenEAR`,
    `CourseManagementMavenEJBClient`, `CourseManagementMavenEJBs`, and `CourseManagementMavenWebApp`.
    Let's now learn how to protect access to JSPs in a folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该在你的Eclipse工作空间中有以下项目：`CourseManagementMavenEAR`，`CourseManagementMavenEJBClient`，`CourseManagementMavenEJBs`和`CourseManagementMavenWebApp`。现在让我们学习如何保护文件夹中JSP的访问。
- en: Protecting access to folders in web applications
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Web应用程序中文件夹的访问
- en: 'To protect any resources in a web folder, you need to declare security constraints
    in `web.xml`. In the security constraints, you can declare URLs that are to be
    protected, and which roles can access the protected URLs. Open `web.xml` in the `CourseManagementMavenWebApp` project and
    add the following declarations within the `<web-app>` tag:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护Web文件夹中的任何资源，你需要在`web.xml`中声明安全约束。在安全约束中，你可以声明要保护URL，以及哪些角色可以访问受保护的URL。在`CourseManagementMavenWebApp`项目中打开`web.xml`并添加以下声明在`<web-app>`标签内：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we are declaring all the resources accessed with the `/admin/*`URL to
    be protected, and also that only users in the `admin` role can access these resources.
    We are also declaring the `admin` role using the `<security-role>` tag. If you
    want the URL resources to be accessed only over SSL (using HTTPS), then set `<transport-guarantee>`
    to `CONFIDENTIAL`. However, you will need to obtain (buy) an SSL certificate from
    certificate authorities, such as Verisign, and install it on the server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们声明所有通过`/admin/*` URL访问的资源都是受保护的，并且只有`admin`角色的用户可以访问这些资源。我们还使用`<security-role>`标签声明了`admin`角色。如果您希望URL资源仅通过SSL（使用HTTPS）访问，则将`<transport-guarantee>`设置为`CONFIDENTIAL`。然而，您需要从证书颁发机构（如Verisign）获取（购买）SSL证书，并将其安装在服务器上。
- en: See [https://www.verisign.com/en_US/website-presence/website-optimization/ssl-certificates/index.xhtml](https://www.verisign.com/en_US/website-presence/website-optimization/ssl-certificates/index.xhtml)
    for details about SSL certificates.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SSL证书的详细信息，请参阅[https://www.verisign.com/en_US/website-presence/website-optimization/ssl-certificates/index.xhtml](https://www.verisign.com/en_US/website-presence/website-optimization/ssl-certificates/index.xhtml)。
- en: Each server has a different process for installing the certificates. However,
    we will not discuss how to install an SSL certificate in this book. Therefore,
    the `<user-data-constraint>` configuration is described in the preceding code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务器安装证书的过程都不同。然而，我们不会在本书中讨论如何安装SSL证书。因此，前述代码中描述了`<user-data-constraint>`配置。
- en: See [https://javaee.github.io/tutorial/security-webtier002.html#specifying-security-constraints](https://javaee.github.io/tutorial/security-webtier002.html#specifying-security-constraints)
    for more details on security constraints.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安全约束的更多详细信息，请参阅[https://javaee.github.io/tutorial/security-webtier002.html#specifying-security-constraints](https://javaee.github.io/tutorial/security-webtier002.html#specifying-security-constraints)。
- en: 'At this point, let’s see how the application works. Before deploying the application
    in GlassFish, let''s create a protected resource. Since we have protected all
    the accessed resources using the `/admin/*` URL, create a folder named `admin`
    in the `src/main/webapp` folder. Inside this folder, create `admin.jsp` using
    the following content:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，让我们看看应用程序是如何工作的。在GlassFish中部署应用程序之前，让我们创建一个受保护的资源。由于我们已经使用`/admin/*` URL保护了所有访问的资源，请在`src/main/webapp`文件夹中创建一个名为`admin`的文件夹。在这个文件夹内，使用以下内容创建`admin.jsp`：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Refer to the <q class="calibre258">Configuring GlassFish server in Eclipse</q>
    section in [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*, for information on adding the GlassFish
    5 Server to your Eclipse workspace.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[第7章](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)中的《在Eclipse中配置GlassFish服务器》部分，以了解如何将GlassFish
    5服务器添加到您的Eclipse工作空间。
- en: We need to build two applications: `CourseManagementMavenWebApp` and `CourseManagementMavenEAR`.
    The EAR project is just a container project; the real content is served from `CourseManagementMavenWebApp`.
    So, we need to build both projects. Right-click on `CourseManagementMavenWebApp`
    in Eclipse Project Explorer, and select Run As | Maven Install. Do the same for
    the `CourseManagementMavenEAR`project. Then, deploy `CourseManagementMavenEAR-1.ear`
    from the target folder in GlassFish 5.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要构建两个应用程序：`CourseManagementMavenWebApp`和`CourseManagementMavenEAR`。EAR项目只是一个容器项目；实际内容是由`CourseManagementMavenWebApp`提供的。因此，我们需要构建这两个项目。在Eclipse项目资源管理器中右键单击`CourseManagementMavenWebApp`，然后选择运行方式
    | Maven安装。对于`CourseManagementMavenEAR`项目也执行相同的操作。然后，从GlassFish 5的目标文件夹中部署`CourseManagementMavenEAR-1.ear`。
- en: To deploy the application in GlassFish 5, browse to `http://localhost:4848`
    and configure the datasource, as described in the <q class="calibre258">Configuring
    Datasource in GlassFish</q> section in [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*. Then, click on the Application node and
    deploy `CourseManagementMavenEAR-1.ear`<q class="calibre258">.</q>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要在GlassFish 5中部署应用程序，请浏览到`http://localhost:4848`并配置数据源，如[第7章](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)中《使用EJB创建JEE应用程序》的《在GlassFish中配置数据源》部分所述。然后，单击应用程序节点并部署`CourseManagementMavenEAR-1.ear`<q
    class="calibre258">。</q>
- en: 'Once the application is deployed, browse to `http://localhost:8080/CourseManagementMavenWebApp/course.xhtml` and
    make sure the page can be accessed without any authentication required, because
    this is an unprotected resource/page. Now, try to browse to `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`.
    Since we have marked the `/admin/*` URL pattern as a protected resource, the browser
    pops up this authentication dialog box:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序部署完成，请浏览到`http://localhost:8080/CourseManagementMavenWebApp/course.xhtml`并确保页面可以在不进行任何认证的情况下访问，因为这是一个未受保护的资源/页面。现在，尝试浏览到`http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`。由于我们已经将`/admin/*`
    URL模式标记为受保护资源，浏览器会弹出此认证对话框：
- en: '![](img/00269.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00269.jpeg)'
- en: 'Figure 14.2: Browser authentication dialog box'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2：浏览器认证对话框
- en: We have not configured our application to authenticate the user. So, authentication
    will fail in the preceding dialog box, no matter what you enter as the username
    and password. Let’s fix this by configuring the database to authenticate users
    in GlassFish.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未配置应用程序进行用户认证。因此，无论你输入什么用户名和密码，前面的对话框都会认证失败。让我们通过配置数据库在GlassFish中认证用户来解决这个问题。
- en: Configuring a JDBC realm in GlassFish
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GlassFish中配置JDBC域
- en: GlassFish supports different realms for JEE authentication; for example, file,
    LDAP, and JDBC realms. We are going to create a JDBC realm, which will use the
    information stored in the `User`, `Groups`, and `User_Groups` tables (exposed
    by `user_group_view`).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish支持不同的域用于JEE认证；例如，文件、LDAP和JDBC域。我们将创建一个JDBC域，它将使用存储在`User`、`Groups`和`User_Groups`表中的信息（通过`user_group_view`公开）。
- en: To create a new JDBC realm in GlassFish, browse to the GlassFish admin page
    (`http://localhost:4848`), and in the navigation menu on the left-hand side, go
    to Configurations | server-config | Security | Realms. On the Realms page, click
    on the New button.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在GlassFish中创建一个新的JDBC域，请浏览到GlassFish管理页面（`http://localhost:4848`），然后在左侧的导航菜单中，转到配置
    | 服务器配置 | 安全 | 域。在域页面，点击新建按钮。
- en: '![](img/00270.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpeg)'
- en: 'Figure 14.3: Creating a JDBC realm on the GlassFish admin page'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：在GlassFish管理页面上创建JDBC域
- en: 'Enter the following information into the form:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下信息输入到表单中：
- en: Class name
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类名
- en: '| **Field name** | **Value** | **Notes** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **字段名** | **值** | **备注** |'
- en: '| Name | `courseManagementJDBCRealm` |  |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | `courseManagementJDBCRealm` |  |'
- en: '|  | `com.sun.enterprise.security.auth.realm.jdbc.JDBCRealm` | Select from
    the drop-down menu. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '|  | `com.sun.enterprise.security.auth.realm.jdbc.JDBCRealm` | 从下拉菜单中选择。|'
- en: '| JAAS Context | `jdbcRealm` |  |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| JAAS上下文 | `jdbcRealm` |  |'
- en: '| JNDI | `jdbc/CourseManagement` | The JDBC data source we have created. See
    [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB,* for more details. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| JNDI | `jdbc/CourseManagement` | 我们创建的JDBC数据源。有关更多详细信息，请参阅[第7章](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，*使用EJB创建JEE应用程序*。|'
- en: '| User Table | `user_group_view` | The table containing the user information.
    We specify the view that we created earlier. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 用户表 | `user_group_view` | 包含用户信息的表。我们指定了我们之前创建的视图。|'
- en: '| Username Column | `user_name` | The username column in our `user_group_view`.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 用户名列 | `user_name` | 我们`user_group_view`中的用户名列。|'
- en: '| Password Column | `password` | The password column in our `user_group_view`.
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 密码列 | `password` | 我们`user_group_view`中的密码列。|'
- en: '| Group Table | `user_group_view` | The group data is also exposed through
    our `user_group_view`. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 组表 | `user_group_view` | 组数据也通过我们的`user_group_view`公开。|'
- en: '| Group Table Username Column | `user_name` | In `user_group_view`. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 组表用户名列 | `user_name` | 在`user_group_view`中。|'
- en: '| Group Name Column | `group_name` | In `user_group_view`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 组名称列 | `group_name` | 在`user_group_view`中。|'
- en: '| Password Encryption Algorithm | `AES` | The algorithm to encrypt passwords
    in the database. We are pre-populated passwords outside the application. So, this
    does not have much impact on our example. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 密码加密算法 | `AES` | 加密数据库中密码的算法。我们在应用程序外部预先填充密码。因此，这对我们的示例影响不大。|'
- en: '| Digest Algorithm | `none` | The passwords we entered in the table are not
    hashed, so enter `none` here. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 摘要算法 | `none` | 我们在表中输入的密码没有被哈希，所以在这里输入`none`。|'
- en: Click on the OK button to create the realm.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击OK按钮创建域。
- en: 'We need to tell our application to use the JDBC realm created earlier. This
    is configured in the `web.xml` of the application, in the `<login-config>` tag.
    Two authentication methods are supported in `<long-config>`: basic and form-based.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉我们的应用程序使用之前创建的JDBC域。这配置在应用程序的`web.xml`文件中的`<login-config>`标签中。`<login-config>`支持两种认证方法：基本认证和基于表单的认证。
- en: In basic authentication, the browser displays the login form, just as in *Figure
    14.2*. In fact, this is the default authentication method, so in the absence of
    the `<login-config>` tag in our `web.xml` previously, the server defaults to basic
    authentication.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本身份验证中，浏览器显示登录表单，就像在 *图14.2* 中所示。实际上，这是默认的身份验证方法，因此在我们之前的 `web.xml` 中没有 `<login-config>`
    标签的情况下，服务器默认为基本身份验证。
- en: In form-based authentication, you can specify the login page. This gives you
    a chance to customize the login experience.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于表单的身份验证中，你可以指定登录页面。这给了你一个机会来自定义登录体验。
- en: Let's first configure the realm using basic authentication.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先使用基本身份验证配置域。
- en: Basic authentication with the JDBC realm in GlassFish
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GlassFish 中使用 JDBC 域的基本身份验证
- en: 'We will make some changes to the tags we added to configure security in the
    *Protecting access to folders in web applications*section. Here are the changes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对在 *保护对 web 应用程序文件夹的访问* 部分中添加的标签进行一些更改。以下是更改内容：
- en: Rename `role-name` from `admin` to `admin-role`
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `role-name` 从 `admin` 重命名为 `admin-role`
- en: Remove the `<security-role>` tag
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `<security-role>` 标签
- en: Add the `<login-config>` tag
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `<login-config>` 标签
- en: 'Here is what the changed declaration should look like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是更改后的声明应该看起来像什么：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that we specified the name of the realm we configured (on the GlassFish
    admin page) in the `<login-config>` tag. We removed `<security-role>` because
    roles are now saved in the database, in the Groups table. However, we need to
    map the roles declared in `web.xml` to groups in the database.  This mapping is
    done in `glassfish-web.xml`. Create `glassfish-web.xml` in the same folder as
    that of `web.xml`, that is, `src/main/webapp/WEB-INF`, in the `CourseManagementMavenWebApp`project. Add
    the following content to it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在 `<login-config>` 标签中指定了我们配置的域的名称（在 GlassFish 管理页面上配置的）。我们删除了 `<security-role>`，因为角色现在保存在数据库中的
    Groups 表中。然而，我们需要将 `web.xml` 中声明的角色映射到数据库中的组。这种映射是在 `glassfish-web.xml` 中完成的。在
    `web.xml` 相同的文件夹中创建 `glassfish-web.xml`，即 `src/main/webapp/WEB-INF`，在 `CourseManagementMavenWebApp`
    项目中。向其中添加以下内容：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we are mapping admin-role, which we declared in `web.xml`, with the admin
    group in the Groups table in the database.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们将我们在 `web.xml` 中声明的 `admin-role` 映射到数据库中 Groups 表的 admin 组。
- en: Now, build the `CourseManagementMavenWebApp` and `CourseManagementMavenEAR` projects (in
    the same order) by right-clicking on the projects and selecting Run As | Maven
    Install, and then deploy the application in GlassFish as described in the *Protecting
    access to folders in web applications*section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过右键单击项目并选择 Run As | Maven Install 来构建 `CourseManagementMavenWebApp` 和 `CourseManagementMavenEAR`
    项目（按相同顺序），然后按照 *保护对 web 应用程序文件夹的访问* 部分中描述的方式在 GlassFish 中部署应用程序。
- en: Browse to `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`.
    This time, the browser should display the contents of `admin.jsp`, once you enter
    the valid admin credentials; that is, the username as `user1`, and the password
    as `user1_pass`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到 `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`。这次，一旦你输入有效的管理员凭据；即用户名为
    `user1`，密码为 `user1_pass`，浏览器应该显示 `admin.jsp` 的内容。
- en: Form-based authentication with a JDBC realm in GlassFish
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GlassFish 中使用 JDBC 域的基于表单的身份验证
- en: 'Let''s change basic authentication to form-based authentication, so that we
    can customize the login page. We need to update `<login-config>` in `web.xml`.
    Replace the previous `<login-config>` block with the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将基本身份验证更改为基于表单的身份验证，这样我们就可以自定义登录页面。我们需要更新 `web.xml` 中的 `<login-config>`。将之前的
    `<login-config>` 块替换为以下内容：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have replaced `<auth-method>` from BASIC to FORM. For form-based authentication,
    we need to specify form-login-page, which we have specified as `login.jsp`. form-error-page
    is optional, but we have set that to `login-error.jsp`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将 `<auth-method>` 从 BASIC 更改为 FORM。对于基于表单的身份验证，我们需要指定 form-login-page，我们已指定为
    `login.jsp`。form-error-page 是可选的，但我们已将其设置为 `login-error.jsp`。
- en: The next step is to create `login.jsp` and `login-error.jsp`. Create both the
    files in the `src/main/webapp` folder with the following contents.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建 `login.jsp` 和 `login-error.jsp`。在 `src/main/webapp` 文件夹中创建这两个文件，内容如下。
- en: 'Here is the source code of `login.jsp`. We have configured it as the login
    page in `<form-login-page>`, as shown in the preceding code block:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `login.jsp` 的源代码。我们已经将其配置为登录页面，如前面的代码块所示：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For form-based authentication to work, there are certain requirements:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使基于表单的身份验证生效，有一些要求：
- en: The form action must be set to `j_security_check`
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表单操作必须设置为 `j_security_check`
- en: The username input field must be named `j_username`
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户名输入字段必须命名为 `j_username`
- en: The password input field must be named `j_password`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码输入字段必须命名为`j_password`
- en: 'Here is the source code of `login-error.jsp`. We have configured it as the
    error page in `<form-error-page>`, as shown in the previous code block:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`login-error.jsp`的源代码。我们已将其配置为`<form-error-page>`中的错误页面，如前一个代码块所示：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The error page shows the error message and displays the link to try again. Even
    though the link Try Again points to `admin.jsp`, because it is a protected resource,
    the user will be redirected to `login.jsp`. If the login is successful, then redirection
    to `admin.jsp` will happen.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 错误页面显示错误消息并显示重试链接。即使重试链接指向`admin.jsp`，因为它是一个受保护资源，用户将被重定向到`login.jsp`。如果登录成功，则将重定向到`admin.jsp`。
- en: 'It would be nice to provide an option to log out after the user has successfully
    logged in. This option can be added to `admin.jsp`. Add a link to log out in `admin.jsp`
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户成功登录后提供注销选项将很棒。此选项可以添加到`admin.jsp`中。如下所示在`admin.jsp`中添加一个注销链接：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create `logout.jsp` in the same folder as `login.jsp` with the following content:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在与`login.jsp`相同的文件夹中创建`logout.jsp`，内容如下：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The logout page simply calls `session.invalidate()` to log the user out.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注销页面简单地调用`session.invalidate()`来注销用户。
- en: To see form-based authentication in action, build the `CourseManagementMavenWebApp`
    and `CourseManagementMavenEAR` projects (in the same order) by right-clicking
    on the projects and selecting Run As | Maven Install, and then deploy the application
    in GlassFish, as described in the *Protecting access to folders in web applications*section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看基于表单的认证的实际操作，通过右键单击项目并选择运行As | Maven Install来构建`CourseManagementMavenWebApp`和`CourseManagementMavenEAR`项目（按相同顺序），然后按照*保护Web应用程序中文件夹的访问*部分所述在GlassFish中部署应用程序。
- en: Browse to `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`.
    This time, the browser should display `login.jsp`, with the login form, instead
    of its own pop-up window for authentication.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`。这次，浏览器应该显示带有登录表单的`login.jsp`，而不是它自己的认证弹出窗口。
- en: Securing applications in Tomcat
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Tomcat中保护应用程序
- en: 'In this section, we will learn how to protect resources in the Tomcat server.
    To keep the example consistent with the one we learned in the previous section
    for GlassFish, we will protect all pages in the `admin` folder. We will use the `CourseManagementJDBC`
    project we created in [Chapter 4](part0073.html#25JP20-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Database Applications*, to get started. Recall that in [Chapter
    4](https://cdp.packtpub.com/java_ee_development_with_eclipse___third_edition/wp-admin/post.php?post=378&action=edit#post_216), *Creating
    JEE Database Applications*, we deployed this project in the Tomcat server. Perform
    the following steps to import a project into the new workspace for this chapter
    and configure Tomcat:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在Tomcat服务器中保护资源。为了使示例与我们在上一节中为GlassFish学习的示例保持一致，我们将保护`admin`文件夹中的所有页面。我们将使用我们在[第4章](part0073.html#25JP20-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，“创建JEE数据库应用程序”中创建的`CourseManagementJDBC`项目开始。回想一下，在[第4章](https://cdp.packtpub.com/java_ee_development_with_eclipse___third_edition/wp-admin/post.php?post=378&action=edit#post_216)，“创建JEE数据库应用程序”中，我们在Tomcat服务器中部署了此项目。执行以下步骤将项目导入本章的新工作区并配置Tomcat：
- en: Copy the `CourseManagementJDBC` project from the [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB,* project folder to the current workspace. Import the
    project into the new workspace (open the File | Import menu and then select Maven
    | Existing Maven Projects).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CourseManagementJDBC`项目从[第7章](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，“使用EJB创建JEE应用程序”的项目文件夹复制到当前工作区。将项目导入新工作区（打开文件
    | 导入菜单，然后选择Maven | 已存在的Maven项目）。
- en: Configure Tomcat, as described in the *Configuring Tomcat in Eclipse*section
    in [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Introducing
    JEE and Eclipse*.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如[第1章](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)“介绍JEE和Eclipse”中的*配置Eclipse中的Tomcat*部分所述配置Tomcat。
- en: Make sure the application is added to the server and runs as expected. See the
    *Running JSP in Tomcat* section in [Chapter 2](part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating a Simple JEE Web Application*.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保应用程序已添加到服务器并按预期运行。请参阅[第2章](part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)“创建简单的JEE
    Web应用程序”中的*在Tomcat中运行JSP*部分。
- en: Copy the `admin` folder from `CourseManagementMavenWebApp` (see the previous
    section in this chapter) to `src/main/webapp` in the `CourseManagementJDBC` project.
    So, the code to protect the admin folder is the same for projects in GlassFish
    and Tomcat.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CourseManagementMavenWebApp`（参见本章前面的上一节）中的`admin`文件夹复制到`CourseManagementJDBC`项目的`src/main/webapp`中。因此，保护admin文件夹的代码对于GlassFish和Tomcat中的项目都是相同的。
- en: So, now you should have the `CourseManagementJDBC` project and Tomcat configured
    in Eclipse.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在你应该已经在Eclipse中配置了`CourseManagementJDBC`项目和Tomcat。
- en: 'We will now modify `web.xml` to add security constraints, as we did in the
    previous section for GlassFish:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将修改`web.xml`以添加安全约束，就像我们在上一节中为GlassFish所做的那样：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There are two differences in the preceding configuration compared with the
    same for GlassFish:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与GlassFish的配置相比，前面的配置有两个不同之处：
- en: There is no need to map `role-name` to group names as we did in GlassFish. Therefore,
    the role name is changed from `admin-role` to just `admin` in `<auth-constaint>`.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有必要像在GlassFish中那样将`role-name`映射到组名。因此，在`<auth-constaint>`中将角色名称从`admin-role`更改为仅`admin`。
- en: There is no need for the `<realm-name>` tag in `<login-config>`.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`<login-config>`中不需要`<realm-name>`标签。
- en: 'Let''s now configure the JDBC realm in Tomcat by adding the `<realm>` tag in
    `server.xml`. If you are using Tomcat configured in Eclipse to run the application,
    then you can access `server.xml` by expanding the Servers node in Project Explorer:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过在`server.xml`中添加`<realm>`标签来配置Tomcat中的JDBC realm。如果你使用在Eclipse中配置的Tomcat来运行应用程序，那么你可以通过展开项目资源管理器中的“Servers”节点来访问`server.xml`。
- en: '![](img/00271.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00271.jpeg)'
- en: 'Figure 14.4: Access of server.xml in the Tomcat server configured in Eclipse'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：在Eclipse配置的Tomcat服务器中访问server.xml
- en: If you are running Tomcat outside Eclipse, then you will find `server.xml` at
    `$CATALINA_BASE/conf/server.xml`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是在Eclipse之外运行Tomcat，那么你将在`$CATALINA_BASE/conf/server.xml`中找到`server.xml`。
- en: 'Add the following realm tag in `server.xml`, inside the `<Engine defaultHost="localhost"
    name="Catalina">` node:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server.xml`中的`<Engine defaultHost="localhost" name="Catalina">`节点内添加以下realm标签：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Tomcat admin module needs to access our MySQL database, so we need to make
    the MySQL JDBC driver available to the admin module. Copy the MySQL JDBC driver
    in `<tomcat-install-dir>/lib`. You can download the driver from [https://dev.mysql.com/downloads/connector/j/](https://dev.mysql.com/downloads/connector/j/),
    if you haven't already done so.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat的管理模块需要访问我们的MySQL数据库，因此我们需要使MySQL JDBC驱动程序对管理模块可用。将MySQL JDBC驱动程序复制到`<tomcat-install-dir>/lib`。如果你还没有这样做，可以从[https://dev.mysql.com/downloads/connector/j/](https://dev.mysql.com/downloads/connector/j/)下载驱动程序。
- en: That is all that is required to protect folders in Tomcat. Restart the server
    and browse to `http://localhost:8080/CourseManagementJDBC/admin/admin.jsp`. You
    should see the login page.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是保护Tomcat中文件夹所需的所有内容。重新启动服务器，并浏览到`http://localhost:8080/CourseManagementJDBC/admin/admin.jsp`。你应该看到登录页面。
- en: Securing servlets using annotations
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用注解保护servlet
- en: 'So far, we have seen declarative syntax for specifying security constraints;
    that is, by specifying `<security-constraint>` in `web.xml`. However, security
    constraints can also be specified using Java annotations, specifically for servlets.
    In this section, we will create `AdminServlet` and secure it with annotations.
    Follow the steps in the previous section to import the `CourseManagementJDBC`
    project from `Chapter09`, but rename it `CourseManagementJDBC-SecureAnnotations`,
    and import it into the workspace. Then, add only `<login-config>` in `web.xml`,
    but do not specify `<security-constraint>`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了指定安全约束的声明性语法；即通过在`web.xml`中指定`<security-constraint>`。然而，安全约束也可以使用Java注解来指定，特别是对于servlet。在本节中，我们将创建`AdminServlet`并使用注解来保护它。按照上一节中的步骤从`Chapter09`导入`CourseManagementJDBC`项目，但将其重命名为`CourseManagementJDBC-SecureAnnotations`，并将其导入工作区。然后，只在`web.xml`中添加`<login-config>`，但不指定`<security-constraint>`：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Make sure you have copied `login.jsp` and `login-error.jsp`, as described in
    the previous section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照上一节中的描述复制了`login.jsp`和`login-error.jsp`。
- en: 'Now create a servlet named `AdminServlet` in the `packt.book.jee.eclipse.ch4.servlet`
    package, with the following content:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`packt.book.jee.eclipse.ch4.servlet`包中创建一个名为`AdminServlet`的servlet，内容如下：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`@ServletSecurity(@HttpConstraint(rolesAllowed = "admin"))` specifies the security
    constraint for the servlet. With this annotation, we are allowing only users in
    the admin role to access the servlet. If you browse to `http://localhost:8080/CourseManagementJDBC-SecurityAnnotations/AdminServlet`,
    you should see the login page.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ServletSecurity(@HttpConstraint(rolesAllowed = "admin"))`指定了servlet的安全约束。使用此注解，我们只允许具有admin角色的用户访问servlet。如果你浏览到`http://localhost:8080/CourseManagementJDBC-SecurityAnnotations/AdminServlet`，你应该看到登录页面。'
- en: Securing web services
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Web服务
- en: The process of securing web services is similar to that of protecting a web
    URL, and we have seen two examples of that in previous sections. We specify `<security-constraint>`
    and `<login-config>` in `web.xml`. Let’s see how to protect the REST web service
    we developed in [Chapter 9](part0176.html#57R300-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating Web Services:*
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 保护Web服务的过程与保护Web URL的过程类似，我们已经在前面的章节中看到了两个例子。我们在`web.xml`中指定了`<security-constraint>`和`<login-config>`。让我们看看如何保护我们在[第9章](part0176.html#57R300-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)中开发的REST
    Web服务：*创建Web服务*：
- en: Copy and import the `CourseManagementREST` and `CourseManagementRESTClient`
    projects from `Chapter09` into the workspace for this chapter. As the names suggests,
    the first project is the REST service, and the second project is a standalone
    client application that calls the web service.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CourseManagementREST`和`CourseManagementRESTClient`项目从`Chapter09`复制并导入到本章的工作区。正如其名称所暗示的，第一个项目是REST服务，第二个项目是一个独立的客户端应用程序，它调用Web服务。
- en: Deploy the `CourseManagementREST` project in Tomcat (see the previous section
    for details on how to do this).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Tomcat中部署`CourseManagementREST`项目（有关如何操作的详细信息，请参阅前节）。
- en: Make sure the `testGetCoursesJSON` method is called from the `main` method in `CourseManagementClient.java`
    from the *CourseManagementRESTClient* project.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保从`CourseManagementClient.java`中的`main`方法调用`testGetCoursesJSON`方法，来自`*CourseManagementRESTClient*`项目。
- en: Run the application (right-click on the file in Project Explorer and select
    Run As | Java Application), and verify that the service is working fine.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序（在项目资源管理器中右键单击文件并选择Run As | Java Application），并验证服务是否运行正常。
- en: 'To secure the web service using basic authentication, add the following configuration
    in `web.xml`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基本认证保护Web服务，请在`web.xml`中添加以下配置：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With the above configuration, we are protecting any URL containing `/services/`.
    We have also specified that only the admin role can access this URL and the method
    of authentication is BASIC.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述配置，我们正在保护包含`/services/`的任何URL。我们还指定只有admin角色可以访问此URL，并且认证方法是BASIC。
- en: 'Now, add the `<Realm>` configuration in `server.xml` of Tomcat, as described
    in the previous section. If you run `CourseManagementClient.java` at this point,
    you will get an Unauthorized error. This is because the client application is
    not sending the authentication information—that is, the username and password—along
    with the `GET` request. For the basic authentication method, this information
    should be passed in the `authorization` header. The value of this header parameter
    should be set as `Basic`, followed by the base64-encoded `username:password` string;
    for example, `authorization: Basic dXNlcjE6dXNlcjFfcGFzcw==`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，在Tomcat的`server.xml`中添加如前节所述的`<Realm>`配置。如果你此时运行`CourseManagementClient.java`，你会得到一个未授权错误。这是因为客户端应用程序没有在`GET`请求中发送认证信息——即用户名和密码。对于基本认证方法，这些信息应该通过`authorization`头传递。此头参数的值应设置为`Basic`，后跟base64编码的`username:password`字符串；例如，`authorization:
    Basic dXNlcjE6dXNlcjFfcGFzcw==`。'
- en: In the preceding header, `dXNlcjE6dXNlcjFfcGFzcw==` is the base64-encoded format
    of the `user1:user1_pass` string.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的头中，`dXNlcjE6dXNlcjFfcGFzcw==`是`user1:user1_pass`字符串的base64编码格式。
- en: 'Let''s now modify the `testGetCoursesJSON` method in `CourseManagementClient.java`
    to pass the preceding header information. Here is the code you need to add just
    before checking the response status:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改`CourseManagementClient.java`中的`testGetCoursesJSON`方法，以传递前面的头信息。以下是你需要在检查响应状态之前添加的代码：
- en: '[PRE15]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that `java.util.Base64` is available in JDK 1.8 onward. If you are using
    a version lower than 1.8, you can use `org.apache.commons.codec.binary.Base64`
    from Apache `commons-codec`. Add the following dependency in `pom.xml`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`java.util.Base64`从JDK 1.8开始可用。如果你使用的是低于1.8的版本，你可以使用Apache `commons-codec`中的`org.apache.commons.codec.binary.Base64`。在`pom.xml`中添加以下依赖项：
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Right-click on the project and select Run As | Maven Install. Then, encode
    `String` by calling:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击项目，选择Run As | Maven Install。然后，通过调用以下方式编码`String`：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When you run the application now, the web service should execute without any
    errors.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在运行应用程序时，Web 服务应该能够无错误地执行。
- en: Security enhancements in JEE 8
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JEE 8 的安全性增强
- en: 'JEE 8 has incorporated Java EE Security API 1.0 (JSR 375, [https://javaee.github.io/security-spec/](https://javaee.github.io/security-spec/)).
    Enhancements in these APIs are broadly classed into four categories:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: JEE 8 集成了 Java EE Security API 1.0 (JSR 375, [https://javaee.github.io/security-spec/](https://javaee.github.io/security-spec/))。这些
    API 的增强被广泛分为四个类别：
- en: Support for the Servlet 4.0 authentication mechanism. You can specify the type
    of authentication in servlets using annotations. For example, `@BasicAuthenticationMechanismDefinition`
    for basic authentication, `@FormAuthenticationMechanismDefinition` for form-based
    authentication, and `@CustomFormAuthenticationMechanismDefinition` for custom
    authentication. For more information, refer to [https://javaee.github.io/security-spec/spec/jsr375-spec.html#authentication-mechanism](https://javaee.github.io/security-spec/spec/jsr375-spec.html#authentication-mechanism).
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Servlet 4.0 认证机制。您可以使用注解在 Servlet 中指定认证类型。例如，`@BasicAuthenticationMechanismDefinition`
    用于基本认证，`@FormAuthenticationMechanismDefinition` 用于基于表单的认证，以及 `@CustomFormAuthenticationMechanismDefinition`
    用于自定义认证。更多信息，请参阅 [https://javaee.github.io/security-spec/spec/jsr375-spec.html#authentication-mechanism](https://javaee.github.io/security-spec/spec/jsr375-spec.html#authentication-mechanism).
- en: Identity Store APIs. By implementing the Identity Store interface, you can specify
    how user, password, and group information is made available to JEE authentication
    and authorization APIs. You can make your security-related code portable across
    JEE 8 containers by implementing this interface. For more information, refer to [https://javaee.github.io/security-spec/spec/jsr375-spec.html#_introduction_2](https://javaee.github.io/security-spec/spec/jsr375-spec.html#_introduction_2).
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份存储 API。通过实现 Identity Store 接口，您可以指定如何将用户、密码和组信息提供给 JEE 认证和授权 API。通过实现此接口，您可以使与安全性相关的代码在
    JEE 8 容器之间具有可移植性。更多信息，请参阅 [https://javaee.github.io/security-spec/spec/jsr375-spec.html#_introduction_2](https://javaee.github.io/security-spec/spec/jsr375-spec.html#_introduction_2).
- en: New `SecurityContext` APIs provide consistent APIs for acquiring information
    about users and roles. For more information, refer to [https://javaee.github.io/security-spec/spec/jsr375-spec.html#security-context](https://javaee.github.io/security-spec/spec/jsr375-spec.html#security-context).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 `SecurityContext` API 提供了一致的 API 来获取有关用户和角色的信息。更多信息，请参阅 [https://javaee.github.io/security-spec/spec/jsr375-spec.html#security-context](https://javaee.github.io/security-spec/spec/jsr375-spec.html#security-context).
- en: The new `HttpAuthenticationMechanism` API gives you complete control over how
    you want to implement security in your application programmatically. For more
    information, refer to [https://javaee.github.io/security-api/apidocs/javax/security/enterprise/authentication/mechanism/http/HttpAuthenticationMechanism.html](https://javaee.github.io/security-api/apidocs/javax/security/enterprise/authentication/mechanism/http/HttpAuthenticationMechanism.html).
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 `HttpAuthenticationMechanism` API 允许你通过编程方式完全控制你想要在应用程序中实现的安全性。更多信息，请参阅 [https://javaee.github.io/security-api/apidocs/javax/security/enterprise/authentication/mechanism/http/HttpAuthenticationMechanism.html](https://javaee.github.io/security-api/apidocs/javax/security/enterprise/authentication/mechanism/http/HttpAuthenticationMechanism.html).
- en: We will not cover all the preceding enhancements in this chapter, but we will
    take a look at the first three APIs in some detail.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中不会涵盖所有上述增强功能，但我们将详细探讨前三个 API。
- en: We have seen, in the previous sections of this chapter, how configuration of
    security is not uniform across containers. Specifically, the mapping of roles
    to groups is not uniform. This problem can be addressed by using new JEE 8 security
    APIs. Let's see how this can be done by developing an application. Refer to the `CourseManagementMavenWebApp-jee8` project in
    the source code for this chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前几节中，我们已经看到安全配置在容器之间并不统一。具体来说，角色到组的映射并不统一。这个问题可以通过使用新的 JEE 8 安全 API 来解决。让我们通过开发一个应用程序来看看如何实现。有关源代码中的
    `CourseManagementMavenWebApp-jee8` 项目，请参阅。
- en: Implementing portable security in JEE 8
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JEE 8 中实现可移植安全性
- en: We will modify `CourseManagementMavenWebApp` from [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*, in this section. This project was part of
    the EJB `CourseManagementMavenEAR`project, but in this section, we will work with `CourseManagementMavenWebApp`
    independently. Copy the `CourseManagementMavenWebApp` project from `Chapter07`,
    as `CourseManagementMavenWebApp-jee8` in the Eclipse workspace for this chapter.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中修改 `CourseManagementMavenWebApp`，它来自 [第7章](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，*使用EJB创建JEE应用程序*。这个项目是EJB
    `CourseManagementMavenEAR`项目的部分，但在本节中，我们将独立地使用`CourseManagementMavenWebApp`。将`CourseManagementMavenWebApp`项目从`Chapter07`复制到本章节的Eclipse工作空间中，命名为`CourseManagementMavenWebApp-jee8`。
- en: 'We will modify this project to provide the following functionality:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改这个项目以提供以下功能：
- en: '`AdminServlet` is a protected servlet requiring login. We will implement the
    basic authentication'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AdminServlet`是一个受保护的servlet，需要登录。我们将实现基本认证。'
- en: 'There are three possible user roles: admin, manager, and user'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有三种可能的用户角色：管理员、经理和用户。
- en: Only users in the admin role can see the admin page, served by `AdminServlet`
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有管理员角色的用户才能看到由`AdminServlet`提供的管理页面。
- en: Only users in the manager role can see the management page, served by `ManagementServlet`
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在管理员角色的用户才能看到由`ManagementServlet`提供的管理页面。
- en: JEE 8 security APIs require **Contexts and Dependency Injection** (**CDI**)
    to be enabled in the application. We just need to create an empty `beans.xml`
    file in the `src/main/webapp/WEB-INF` folder to enable CDI.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: JEE 8安全API需要启用应用程序中的**上下文和依赖注入**（**CDI**）。我们只需要在`src/main/webapp/WEB-INF`文件夹中创建一个空的`beans.xml`文件来启用CDI。
- en: 'Next, we need to add the following Maven dependency in `pom.xml` to make the
    JEE 8 APIs available in the application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`pom.xml`中添加以下Maven依赖项，以便在应用程序中提供JEE 8 API：
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s create a class called `ApplicationConfig` (in the `packt.book.jee.eclipse.ch7.web.servlet`
    package) to declare all user roles allowed in the application. Here is the source
    code for the `ApplicationConfig` class:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`packt.book.jee.eclipse.ch7.web.servlet`包中创建一个名为`ApplicationConfig`的类（用于声明应用程序中允许的所有用户角色）。以下是`ApplicationConfig`类的源代码：
- en: '[PRE19]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s create two servlets, `AdminServlet` and `ManagementServlet`, in
    the `packt.book.jee.eclipse.ch7.web.servlet` package. If you create these classes
    using the Eclipse wizard, then it adds the servlet declarations and mappings in
    `web.xml`. If you are not using the Eclipse wizard, then either add the declarations
    and mappings manually, or add the `@WebServlet` annotation in the servlet classes. Here
    is the source code for `AdminServlet`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`packt.book.jee.eclipse.ch7.web.servlet`包中创建两个servlet，`AdminServlet`和`ManagementServlet`。如果你使用Eclipse向导创建这些类，那么它会自动在`web.xml`中添加servlet声明和映射。如果你没有使用Eclipse向导，那么你可以手动添加声明和映射，或者在servlet类中添加`@WebServlet`注解。以下是`AdminServlet`的源代码：
- en: '[PRE20]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The servlet allows access to only the admin and manager roles, using the `@ServletSecurity`
    annotation. The servlet also specifies the basic authentication type using `@BasicAuthenticationMechanismDefinition`.
    We also ask the JEE container to inject an instance of `SecurityContext`, which
    is used in the `doGet` method to check the user's role. If the user is in the manager
    role, then the request is forwarded to `ManagementServlet`, otherwise, access
    is granted to the current servlet. Note the call to `securityContext.isCallerInRole`
    to check the user's role.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个servlet使用`@ServletSecurity`注解允许只有管理员和经理角色访问，并通过`@BasicAuthenticationMechanismDefinition`指定基本认证类型。我们还要求JEE容器注入一个`SecurityContext`实例，该实例在`doGet`方法中使用以检查用户的角色。如果用户是经理角色，则请求被转发到`ManagementServlet`，否则，允许当前servlet的访问。注意调用`securityContext.isCallerInRole`来检查用户的角色。
- en: 'Here is the source code for `ManagementServlet`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`ManagementServlet`的源代码：
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding servlet also uses basic authentication, and allows access only to
    users in the manager role.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的servlet也使用了基本认证，并且只允许管理员角色的用户访问。
- en: 'With the preceding annotations, no declarative configuration is required for `web.xml`
    or any custom container-specific file. But, how do we tell security APIs who are
    valid users and roles? We do that by implementing the `IdentityStore` interface.
    Create the `SimpleMapIdentityStore` class in the `packt.book.jee.eclipse.ch7.web.servlet`
    package. This class should implement the `IdentityStore` interface:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的注解，不需要在`web.xml`或任何自定义容器特定文件中进行声明性配置。但是，我们如何告诉安全API哪些是有效的用户和角色呢？我们通过实现`IdentityStore`接口来实现。在`packt.book.jee.eclipse.ch7.web.servlet`包中创建`SimpleMapIdentityStore`类。这个类应该实现`IdentityStore`接口：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It is important that the preceding class is annotated with `@ApplicationScoped`,
    so that it is available throughout the application, and CDI can inject it. We
    have hardcoded users and roles in a `HashMap` in the preceding class, but you
    can write the code to get users and roles from any source, such as a database,
    LDAP, or a file. In the application, there can be more than one `IdentityStore`.
    The container would call the  `validate` method of each one. In the `validate`
    method, we are first verifying that the username and password are valid, and then
    returning an instance of `CredentialValidationResult`, with the roles of the user
    attached to it.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，前面的类需要注解为`@ApplicationScoped`，这样它就可以在整个应用程序中可用，并且CDI可以注入它。我们在前面的类中硬编码了用户和角色到一个`HashMap`中，但你也可以编写代码从任何来源获取用户和角色，例如数据库、LDAP或文件。在应用程序中，可以有多个`IdentityStore`。容器将调用每个`validate`方法。在`validate`方法中，我们首先验证用户名和密码是否有效，然后返回一个带有用户角色的`CredentialValidationResult`实例。
- en: Build the application (right-click on the project and select Run As | Maven
    Install), and deploy it in the GlassFish 5 Server, as described in previous sections.
    Make sure the context of the application is set to `/CourseManagementMavenWebApp-jee8`.
    You can verify this on the GlassFish admin page by editing the deployed application
    and verifying the value of the Context Root field.  Then browse to `http://localhost:8080/CourseManagementMavenWebApp-jee8/AdminServlet`.
    If you log in with user1 credentials, then the admin page will be displayed. If
    you log in as user3, then the management page will be displayed. Access to all
    other users is blocked. You would need to close the browser window to try to log
    in with different users, because once logged in, the user credentials are remembered
    till the session is invalidated. The application can be easily extended to add
    a logout option, as we did in previous sections.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应用程序（在项目上右键单击并选择Run As | Maven Install），然后按照前面章节的描述将其部署到GlassFish 5服务器。确保应用程序的上下文设置为`/CourseManagementMavenWebApp-jee8`。你可以在GlassFish管理页面上通过编辑已部署的应用程序并验证上下文根字段的值来验证这一点。然后浏览到`http://localhost:8080/CourseManagementMavenWebApp-jee8/AdminServlet`。如果你使用user1凭据登录，则将显示管理页面。如果你以user3的身份登录，则将显示管理页面。其他所有用户的访问都被阻止。你需要关闭浏览器窗口以尝试使用不同的用户登录，因为一旦登录，用户凭据将被记住，直到会话被无效化。应用程序可以很容易地扩展以添加注销选项，就像我们在前面的章节中所做的那样。
- en: 'In the previous example, we have created a custom identity store. You can implement
    any code in this to acquire user information, from either a database or LDAP.
    But, JEE security APIs provide built-in annotations for accessing a database and
    LDAP as identity stores; that is, `@DatabaseIdentityStoreDefinition` and `@LdapIdentityStoreDefinition`.
    For example, we could modify the `ApplicationConfig` class to declare a database
    identity store as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经创建了一个自定义的身份存储。你可以在这个地方实现任何代码来获取用户信息，无论是从数据库还是LDAP。但是，JEE安全API提供了内置的注解来访问数据库和LDAP作为身份存储；即`@DatabaseIdentityStoreDefinition`和`@LdapIdentityStoreDefinition`。例如，我们可以修改`ApplicationConfig`类来声明一个数据库身份存储，如下所示：
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We need to pass the JNDI lookup name for the JDBC resource, which is `jdbc/CourseManagement`,
    and SQL queries to validate the username and password and to get groups. These
    are similar to the SQL queries we configured when creating a Realm on the GlassFish
    admin page, but with the new security APIs, making the configuration more portable.
    See [https://javaee.github.io/security-spec/spec/jsr375-spec.html#_annotations_and_built_in_identitystore_beans](https://javaee.github.io/security-spec/spec/jsr375-spec.html#_annotations_and_built_in_identitystore_beans)
    for more details on `IdentityStore` annotations.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要传递JDBC资源的JNDI查找名称，即`jdbc/CourseManagement`，以及用于验证用户名和密码以及获取组的SQL查询。这些与我们在GlassFish管理页面上创建Realm时配置的SQL查询类似，但使用新的安全API，使配置更加便携。有关`IdentityStore`注解的更多详细信息，请参阅[https://javaee.github.io/security-spec/spec/jsr375-spec.html#_annotations_and_built_in_identitystore_beans](https://javaee.github.io/security-spec/spec/jsr375-spec.html#_annotations_and_built_in_identitystore_beans)。
- en: 'In the preceding example, we have used the basic authentication type. But,
    you can use form-based authentication using the `@FormAuthenticationMechanismDefinition`
    annotation. For example, we could replace `@BasicAuthenticationMechanismDefinition`
    with  `@FormAuthenticationMechanismDefinition`, as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了基本的认证类型。但是，你可以使用基于表单的认证，通过使用`@FormAuthenticationMechanismDefinition`注解。例如，我们可以将`@BasicAuthenticationMechanismDefinition`替换为`@FormAuthenticationMechanismDefinition`，如下所示：
- en: '[PRE24]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This configuration is similar to `<form-login-config>`, which we configured
    in `web.xml` in earlier examples.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置类似于我们在早期示例中在`web.xml`中配置的`<form-login-config>`。
- en: Note that the new security APIs work mostly on Java classes, such as servlets,
    EJBs, and beans, but if you want to protect JSP pages, then you need to use the
    declarative configuration we learned in previous sections.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，新的安全API主要在Java类上工作，例如servlets、EJBs和beans，但如果你想要保护JSP页面，那么你需要使用我们在前几节中学到的声明性配置。
- en: Security in JEE is a very large topic, which can't be covered in a book of generic
    nature. The scope of this chapter is limited to securing JEE resources with a
    username and password. For detailed information on security in JEE, refer to [https://javaee.github.io/tutorial/security-intro.html](https://javaee.github.io/tutorial/security-intro.html).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: JEE中的安全是一个非常大的主题，无法在通用的书中涵盖。本章的范围仅限于使用用户名和密码保护JEE资源。有关JEE中安全性的详细信息，请参阅[https://javaee.github.io/tutorial/security-intro.html](https://javaee.github.io/tutorial/security-intro.html)。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we learned how to secure resources represented by URLs in JEE
    applications. The process to secure resources declaratively is not completely
    generic in JEE; part of it is common across all servers, specifically configurations
    in `web.xml`. Configuration of declarative security realms differs across servers.
    However, JEE 8 has added new Java EE Security APIs that make annotation-based
    configuration portable for Java classes.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在JEE应用程序中保护由URL表示的资源。在JEE中，声明性保护资源的过程并不完全通用；其中一部分在所有服务器中是通用的，特别是`web.xml`中的配置。声明性安全域的配置在不同服务器中有所不同。然而，JEE
    8添加了新的Java EE安全API，使得基于注解的配置对Java类是可移植的。
- en: We learned how to secure folders in GlassFish and Tomcat servers. We also learned
    how to secure RESTful web services and invoke them with security credentials in
    a client application.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何在GlassFish和Tomcat服务器中保护文件夹。我们还学习了如何保护RESTful Web服务，并在客户端应用程序中使用安全凭据调用它们。
