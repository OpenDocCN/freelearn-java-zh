- en: Chapter 8. Handling Typical Build Requirements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 处理典型构建需求
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Including and excluding additional resources
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含和排除额外资源
- en: Including and excluding source files and folders
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含和排除源文件和文件夹
- en: Configuring Maven to search for plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Maven以搜索插件
- en: Working in offline mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在离线模式下工作
- en: Controlling the verbosity of the Maven output
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制Maven输出的详细程度
- en: Using the Maven Help plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven Help插件
- en: Using the Maven SCM plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven SCM插件
- en: Generating changelogs for a site
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网站生成变更日志
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In previous chapters, we have seen how to set up Apache Maven to build software
    projects. We have also seen how to configure it to analyze code quality and code
    coverage. We have seen how to generate and publish project documentation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了如何设置Apache Maven来构建软件项目。我们也看到了如何配置它来分析代码质量和代码覆盖率。我们看到了如何生成和发布项目文档。
- en: As we use Apache Maven, we will encounter requirements that are not generic,
    but at the same time, not rare. In many projects, there would be a need to include
    additional source or resource folders. We will see how Maven allows us to do this.
    We would also want to get more verbose output from Maven to help troubleshoot
    when things go wrong. We will also see to what extent we can get the Maven build
    working without the Internet. We will also see how Maven works with **software
    configuration management** (**SCM**) systems and allows SCM changes to be part
    of project documentation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用Apache Maven，我们可能会遇到既不通用又不罕见的需求。在许多项目中，可能需要包含额外的源或资源文件夹。我们将看到Maven如何允许我们做到这一点。我们还想从Maven获得更多详细的输出，以便在出错时进行故障排除。我们还将看到在不使用互联网的情况下，我们可以将Maven构建工作到什么程度。我们还将看到Maven如何与**软件配置管理**（**SCM**）系统协同工作，并允许SCM更改成为项目文档的一部分。
- en: Including and excluding additional resources
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含和排除额外资源
- en: There are many situations where you will need to include additional resource
    files or folders for compilation or testing. You might also have to exclude specific
    files or folders. Let us see how we can do this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译或测试过程中，你可能会遇到需要包含额外的资源文件或文件夹的情况。你也可能需要排除特定的文件或文件夹。让我们看看我们如何做到这一点。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven is set up on your system and is verified for work. To do this, refer to
    the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Maven已在你的系统上设置并验证了其工作。为此，请参考[第1章](ch01.html "第1章. 入门")的前三个食谱，*入门*。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open one of the Maven projects for which we need to include or exclude files
    or folders; for instance, `project-with-include-exclude`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个需要包含或排除文件或文件夹的Maven项目；例如，`project-with-include-exclude`。
- en: 'Add the following to the `build` section of your `pom` file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到你的`pom`文件的`build`部分：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Observe the output:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: View the contents of the `resources` folder:![How to do it...](img/6124OS_08_01.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看资源文件夹的内容：![如何操作...](img/6124OS_08_01.jpg)
- en: View the contents of the build output directory:![How to do it...](img/6124OS_08_02.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看构建输出目录的内容：![如何操作...](img/6124OS_08_02.jpg)
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `resources` goal of the Maven Resources plugin copies all the resources
    required by the source to build the output directory. This goal is bound to the
    `process-resources` phase, which is part of the `default` lifecycle.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Resources插件的`resources`目标会复制构建输出目录所需的所有资源。此目标绑定到`process-resources`阶段，它是`default`生命周期的一部分。
- en: By default, the goal copies over the contents of `src/main/resources`. When
    the `resources` tag is specified in the `pom` file, it copies the contents of
    the directories specified there, based on the `include` and `exclude` filters
    specified.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，目标会复制`src/main/resources`的内容。当在`pom`文件中指定`resources`标签时，它会根据指定的`include`和`exclude`过滤器复制那里目录的内容。
- en: 'In our specific example, we did three things:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的特定示例中，我们做了三件事：
- en: Included all the XML files in the `src/resources/xml` folder
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`src/resources/xml`文件夹中包含了所有XML文件
- en: Included a specific file in the `src/resources/json` folder
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`src/resources/json`文件夹中包含一个特定的文件
- en: Excluded a specific file in the `src/resouces/json` folder
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`src/resouces/json`文件夹中排除了一个特定的文件
- en: There's more...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'What if we need to copy test resources selectively? For this, we would need
    to do the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要有选择地复制测试资源怎么办？为此，我们需要做以下事情：
- en: 'Add the following in the `build` section of your `pom` file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`pom`文件的`build`部分添加以下内容：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: View the contents of the `test-classes` folder:![There's more...](img/6124OS_08_03.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看目标文件夹`test-classes`的内容：![还有更多...](img/6124OS_08_03.jpg)
- en: This will now copy over the specified test resources to the test output directory
    (`target/test-classes`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将现在将指定的测试资源复制到测试输出目录（`target/test-classes`）。
- en: We saw that the `resources` and `testResources` goals copied resources to `classes`
    and `test-classes` respectively. What if we need to copy these to specific folders,
    For instance, `xml` files to the `xml` folder and `json` files to the `json` folder?
    The `add-resource` and `add-test-resource` goals of the Build Helper Maven plugin
    come to our assistance here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`resources`和`testResources`目标分别将资源复制到`classes`和`test-classes`。如果我们需要将这些资源复制到特定的文件夹中，例如，将`xml`文件复制到`xml`文件夹，将`json`文件复制到`json`文件夹，怎么办？Build
    Helper Maven插件的`add-resource`和`add-test-resource`目标在这里提供帮助。
- en: 'Update the `pom` file with the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`pom`文件：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Examine the `target/classes` folder now.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在检查`target/classes`文件夹。
- en: You will see the `xml` and `json` subfolders with their respective content.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到带有相应内容的`xml`和`json`子文件夹。
- en: Including and excluding source files and folders
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含和排除源文件和文件夹
- en: As per Maven conventions, all project sources should be in the `src` folder.
    However, there may be legacy projects that are organized differently and may have
    more than one source folder. Also, in some projects, we might generate sources
    dynamically from tools such as `wsdl2java`. In such cases, Maven needs to be told
    about these additional source folders. Note that such projects may not work well
    in IDEs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Maven约定，所有项目源文件都应该在`src`文件夹中。然而，可能存在组织方式不同的遗留项目，并且可能有多个源文件夹。此外，在某些项目中，我们可能需要从`wsdl2java`等工具动态生成源代码。在这种情况下，Maven需要知道这些额外的源文件夹。请注意，这样的项目可能在IDE中运行不佳。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to include and exclude source files and folders in
    your Maven project:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤在您的Maven项目中包含和排除源文件和文件夹：
- en: Open the Maven project named `project-with-additional-source`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开名为`project-with-additional-source`的Maven项目。
- en: 'Add the following section in the `pom` file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom`文件中添加以下部分：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'See the output generated:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看生成的输出：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: View the `target/classes` folder:![How to do it...](img/6124OS_08_04.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看目标文件夹`target/classes`：![如何操作...](img/6124OS_08_04.jpg)
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We had an additional source folder called `src/main/source`. We specified this
    in the `configuration` section of the Build Helper Maven plugin. We also bound
    the `add-source` goal of the plugin to the `generate-sources` phase of the `default`
    lifecycle.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个名为`src/main/source`的额外源文件夹。我们在构建辅助Maven插件的`configuration`部分指定了这一点。我们还把插件的`add-source`目标绑定到了`default`生命周期的`generate-sources`阶段。
- en: As part of the `default` lifecycle, the `generate-sources` phase is run by Maven
    prior to the `compile` goal. This invokes the `add-source` goal of the plugin,
    which adds the additional folder and its contents for compilation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`default`生命周期的组成部分，在`compile`目标之前，Maven会运行`generate-sources`阶段。这调用了插件的`add-source`目标，它为编译添加了额外的文件夹及其内容。
- en: 'In a similar way, additional test folders can be added to the build. The configuration
    would be identical to the earlier case, except for the `execution` section, which
    would be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，可以添加额外的测试文件夹到构建中。配置将与之前的案例相同，除了`execution`部分，它将如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We specify the `add-test-source` goal instead of `add-source` and bind it to
    the `generate-test-sources` phase.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了`add-test-source`目标而不是`add-source`，并将其绑定到`generate-test-sources`阶段。
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Build Helper Maven plugin provides a number of other goals that meet specific
    project requirements. Here are some of them:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Build Helper Maven插件提供了一些满足特定项目需求的其他目标。以下是一些例子：
- en: '`attach-artifact`: This is used to attach additional artifacts to be installed
    and/or deployed, besides the project artifact. This would be done by configuring
    the plugin as follows:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attach-artifact`：此功能用于附加额外的工件以安装和/或部署，除了项目工件。这可以通过以下方式配置插件：'
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`maven-version`: This is used to set a property containing the current version
    of Maven, which can be used as required. To use the Maven version number in the
    manifest of the project JAR, we will configure the plugin as follows:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maven-version`：此功能用于设置包含当前Maven版本的属性，可以根据需要使用。为了在项目JAR的清单中使用Maven版本号，我们将配置插件如下：'
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Configuring Maven to search for plugins
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Maven以搜索插件
- en: You will recall that in the section on using the Maven JaCoCo plugin, to generate
    code coverage we had to explicitly specify the `projectId` and `artifactId` values
    of the plugin to it from the command line. However, for most other plugins, we
    specified the plugin name without additional information.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会记得，在关于使用 Maven JaCoCo 插件的章节中，为了生成代码覆盖率，我们必须从命令行显式指定插件的 `projectId` 和 `artifactId`
    值。然而，对于大多数其他插件，我们只指定了插件名称而没有附加信息。
- en: We will see why we had to do this and how to avoid it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到为什么我们必须这样做以及如何避免它。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the `settings` file (specifically the `settings.xml` file in your home
    directory).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `settings` 文件（具体来说是您家目录中的 `settings.xml` 文件）。
- en: 'Add the following section:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下部分：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the following command on the same project for which you ran JaCoCo earlier:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前运行 JaCoCo 的同一个项目上运行以下命令：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Observe the output:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are two types of Maven plugins, which are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 插件有两种类型，如下所示：
- en: Plugins maintained by the Maven team itself (let us call them official plugins).
    These are in the default plugin groups `org.apache.maven.plugins` and `org.codehaus.mojo`.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 Maven 团队本身维护的插件（让我们称它们为官方插件）。这些在默认插件组 `org.apache.maven.plugins` 和 `org.codehaus.mojo`
    中。
- en: All other plugins (let's say third-party plugins).
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他插件（比如说第三方插件）。
- en: 'All official plugins have the same `groupId`, namely `org.apache.maven.plugins`.
    They also have a convention for `artifactId`: `maven-${prefix}-plugin`, where
    `prefix` stands for the plugin prefix, the short name to refer to the plugin.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所有官方插件都有相同的 `groupId`，即 `org.apache.maven.plugins`。它们还有一个关于 `artifactId` 的约定：`maven-${prefix}-plugin`，其中
    `prefix` 代表插件前缀，是引用插件的简称。
- en: The prefix used to reference the plugin can be customized as well. The prefix
    can be specified directly through the `goalPrefix` configuration parameter on
    the `Maven-plugin-plugin` of the plugin's `pom` file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 用于引用插件的名称也可以自定义。前缀可以通过插件 `pom` 文件中的 `Maven-plugin-plugin` 的 `goalPrefix` 配置参数直接指定。
- en: So, when we run `mvn clean`, Maven looks for the `maven-clean-plugin` in the
    `org.apache.maven.plugins` group.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们运行 `mvn clean` 时，Maven 会搜索 `org.apache.maven.plugins` 组中的 `maven-clean-plugin`。
- en: What about third-party plugins? `pluginGroups` lets Maven know the `groupId`
    where it should search for additional plugins. So in the earlier case, Maven searched
    for plugins in the `org.jacoco` group.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方插件怎么办？`pluginGroups` 让 Maven 知道它应该在哪里搜索额外的插件。所以，在先前的例子中，Maven 在 `org.jacoco`
    组中搜索插件。
- en: Third-party plugins should be named differently from official plugins. The conventional
    way to define the `artifactId` for third-party plugins is `${prefix}-maven-plugin`.
    When specified in this way, Maven automatically identifies the shortcut name for
    the plugin. In the earlier case, as the `artifactId` is `jacoco-maven-plugin`,
    the shortcut is `jacoco`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方插件应该与官方插件有不同的名称。定义第三方插件的 `artifactId` 的传统方式是 `${prefix}-maven-plugin`。当以这种方式指定时，Maven
    会自动识别插件的快捷名称。在先前的例子中，由于 `artifactId` 是 `jacoco-maven-plugin`，快捷名称是 `jacoco`。
- en: There's more...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Maven will always search specified `pluginGroups` before it searches the following
    default groups:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索以下默认组之前，Maven 总是会搜索指定的 `pluginGroups`：
- en: '`org.apache.maven.plugins`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.maven.plugins`'
- en: '`org.codehaus.mojo`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.codehaus.mojo`'
- en: Maven takes the first match for the shortcut that it finds. For instance, if
    there is a `clean` shortcut in a user-specified plugin in `pluginGroups`, it will
    take precedence over a Maven Clean plugin.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 会选择它找到的第一个快捷方式的匹配项。例如，如果在 `pluginGroups` 中的用户指定插件中有一个 `clean` 快捷方式，它将优先于
    Maven Clean 插件。
- en: Working in offline mode
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离线模式工作
- en: There might be situations where a Maven project needs to be built without access
    to the Internet. Let us see how Maven supports this, as well as the caveats.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有这样的情况，Maven 项目需要在没有互联网访问的情况下构建。让我们看看 Maven 如何支持这一点，以及需要注意的事项。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a project that you want to build offline.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个你想要离线构建的项目。
- en: 'Run the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Observe the output:![How to do it...](img/6124OS_08_05.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何操作...](img/6124OS_08_05.jpg)
- en: 'Run the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE17]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Observe that the build is completed successfully without any network connection.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到构建在没有网络连接的情况下成功完成。
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `go-offline` goal of the Maven Dependency plugin downloads all the required
    dependencies and plugins for the project, based on the pom file. The `–o` option
    tells Maven to work offline and not check the Internet for anything.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Dependency 插件的 `go-offline` 目标根据 pom 文件下载项目所需的所有依赖和插件。`–o` 选项告诉 Maven
    离线工作，不检查互联网上的任何内容。
- en: 'However, it is not without its issues. On a brand new local repository, the
    `offline` option will not work with the following error:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它并非没有问题。在一个全新的本地仓库中，`offline` 选项将无法使用，并出现以下错误：
- en: '![How it works...](img/6124OS_08_06.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/6124OS_08_06.jpg)'
- en: This is a known problem or limitation with the Maven Dependency plugin. The
    required project has to be built online once to download anything that is missed
    out by the plugin. Subsequently, the project can be built offline. This is typically
    not required, as most organizations use a repository manager, such as Nexus or
    Artifactory, if they do not allow direct Internet access.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Maven Dependency 插件已知的问题或限制。必须在线构建所需的项目一次，以下载插件遗漏的任何内容。随后，项目可以离线构建。这通常不是必需的，因为大多数组织如果不允许直接访问互联网，会使用
    Nexus 或 Artifactory 等仓库管理器。
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If your project uses `SNAPSHOT` dependencies, then Maven will need the Internet
    to look for updates to the dependencies. To avoid this, you can set the `updatePolicy`
    to `never`, but this would be counterproductive as you will not get the latest
    version of the dependency.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目使用 `SNAPSHOT` 依赖项，那么 Maven 需要互联网来查找依赖项的更新。为了避免这种情况，您可以设置 `updatePolicy`
    为 `never`，但这将是适得其反的，因为您将无法获得依赖项的最新版本。
- en: There's more...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Another way to run Maven in offline mode is to specify the `offline` parameter
    as `true` in the `settings` file. Once this is done, no attempt is made by Maven
    to connect to the Internet.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Maven 的另一种离线模式是在 `settings` 文件中将 `offline` 参数指定为 `true`。一旦这样做，Maven 就不会尝试连接到互联网。
- en: 'Add the following in the settings file:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置文件中添加以下内容：
- en: '[PRE18]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run a Maven build:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Maven 构建：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Observe that the build is completed successfully without connecting to the Internet.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到构建成功完成，而没有连接到互联网。
- en: Controlling the verbosity of the Maven output
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制Maven输出的详细程度
- en: Sometimes, the output from Maven might be too verbose and we may want to only
    see the errors. At other times, the information displayed by Maven may be insufficient
    and we want to see more details. Let us see how we can control this.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Maven 的输出可能过于详细，我们可能只想看到错误。在其他时候，Maven 显示的信息可能不足，我们希望看到更多细节。让我们看看我们如何控制这一点。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a Maven project.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Maven 项目。
- en: 'Run the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE20]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Observe the output:![How to do it...](img/6124OS_08_07.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何操作...](img/6124OS_08_07.jpg)
- en: 'Now run the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE21]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Observe the output:![How to do it...](img/6124OS_08_08.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何操作...](img/6124OS_08_08.jpg)
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Maven provides different levels of logging. The typical levels are `DEBUG` (detailed
    messages), `INFO` (information messages), and `ERROR` (error messages). Specifying
    a level displays all messages at and above that level. For instance, specifying
    the `INFO` level displays messages at the `INFO` and `ERROR` levels.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 提供了不同级别的日志记录。典型的级别是 `DEBUG`（详细消息）、`INFO`（信息消息）和 `ERROR`（错误消息）。指定一个级别将显示该级别及以上的所有消息。例如，指定
    `INFO` 级别将显示 `INFO` 和 `ERROR` 级别的消息。
- en: By default, Maven logs all `INFO` level messages to the screen.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Maven 将所有 `INFO` 级别的消息记录到屏幕上。
- en: The `-q` parameter tells Maven to be quiet and not display anything other than
    `ERROR` level messages on the screen. So the only display is the output from tests.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`-q` 参数告诉 Maven 保持安静，不在屏幕上显示除 `ERROR` 级别消息之外的内容。因此，唯一显示的是测试输出。'
- en: On the other hand, the `-X` parameter tells Maven to display all messages at
    the `DEBUG` level and above. This gives a lot of information, which is useful
    for troubleshooting issues.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`-X` 参数告诉 Maven 显示所有 `DEBUG` 级别及以上的消息。这提供了大量信息，对于故障排除非常有用。
- en: There's more...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Instead of viewing the Maven output on the screen, you could redirect it to
    a file to be viewed later. To do this, run the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 Maven 输出重定向到文件以供稍后查看，而不是在屏幕上查看 Maven 输出。为此，运行以下命令：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The command will be completed with no output on the screen. The `simple-project-log.txt`
    file will contain all the log messages. You can use a combination of `–l` along
    with `–q` or `–X` to redirect the appropriate level of logging to the file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将在屏幕上无输出完成。`simple-project-log.txt`文件将包含所有日志消息。您可以使用`-l`与`-q`或`-X`结合，将适当的日志级别重定向到文件。
- en: 'Alternately, the output can be redirected to a file:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以将输出重定向到文件中：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using the Maven Help plugin
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven帮助插件
- en: Maven provides a `–h` command-line flag to display various command-line parameters
    that it supports. However, there is a Help plugin that helps you get other information.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了一个`-h`命令行标志来显示它支持的各个命令行参数。然而，还有一个帮助插件可以帮助您获取其他信息。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the simple Maven project.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开简单的Maven项目。
- en: 'Run the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE24]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Observe the output:![How to do it...](img/6124OS_08_09.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：![如何操作...](img/6124OS_08_09.jpg)
- en: 'Run the following command on a project with a profile (for instance, `project-with-profile`):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有配置文件的项目（例如，`project-with-profile`）上运行以下命令：
- en: '[PRE25]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Observe the output:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：
- en: '[PRE26]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE27]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Observe the output:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：
- en: '[PRE28]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now run the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE29]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Observe the output:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出结果：
- en: '[PRE30]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以下是工作原理...
- en: 'The Maven Help plugin provides different goals. These are also supported by
    IDEs, and are as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Maven帮助插件提供不同的目标。这些也由IDE支持，如下所示：
- en: '`effective-pom`: This displays the pom file that will be used by Maven after
    applying inheritance, interpolation, and profiles. This is useful to know the
    final pom file when it is needed for troubleshooting.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`effective-pom`：这显示了在应用继承、插值和配置文件后，Maven将使用的pom文件。当需要用于故障排除时，了解最终的pom文件是有用的。'
- en: '`all-profiles`: This goal displays all the profiles that are available for
    the project. It indicates whether the profiles are active or not.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all-profiles`：此目标显示项目可用的所有配置文件。它指示配置文件是否处于活动状态。'
- en: '`active-profiles`: This goal displays the list of active profiles. We explicitly
    enabled the `dev` profile (which was not active by default), so it showed up in
    the list of active profiles.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active-profiles`：此目标显示活动配置文件的列表。我们明确启用了`dev`配置文件（默认情况下不是活动的），因此它出现在活动配置文件列表中。'
- en: There's more...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Maven Help plugin provides a few other goals as well. A notable one is the
    `describe` goal, which is used to get details of any plugin.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Maven帮助插件还提供了一些其他目标。其中一个值得注意的是`describe`目标，它用于获取任何插件的详细信息。
- en: 'To understand this, let''s use an instance and run the following command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了理解这一点，让我们使用一个实例并运行以下命令：
- en: '[PRE31]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Observe the results:![There's more...](img/6124OS_08_10.jpg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：![还有更多...](img/6124OS_08_10.jpg)
- en: Tip
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `describe` goal does not need you to have a Maven project. You are just
    getting some help information for a particular plugin!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe`目标不需要您有一个Maven项目。您只是为特定插件获取一些帮助信息！'
- en: Using the Maven SCM plugin
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven SCM插件
- en: Maven provides a mechanism to interact with SCM systems in a vendor-independent
    way. Typically, a Maven project is checked in an SCM. Using the Maven SCM plugin,
    you can perform a number of SCM-related activities.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了一种以供应商无关的方式与SCM系统交互的机制。通常，Maven项目被检查到SCM中。使用Maven SCM插件，您可以执行许多与SCM相关的活动。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Maven project that we want to use the plugin with should be in an SCM. Maven
    supports a number of SCM providers. We will use Git to illustrate this.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要使用插件进行操作的Maven项目应该在SCM中。Maven支持许多SCM提供商。我们将使用Git来演示这一点。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add the following code to your pom file:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的pom文件中：
- en: '[PRE32]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Run the following command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE33]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Observe the output in Windows:![How to do it...](img/6124OS_08_11.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows中观察输出结果：![如何操作...](img/6124OS_08_11.jpg)
- en: For Linux, the output will be as follows:![How to do it...](img/6124OS_08_12.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Linux，输出结果如下：![如何操作...](img/6124OS_08_12.jpg)
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以下是工作原理...
- en: When the `status` goal of the Maven SCM plugin is run, it uses the information
    in the `scm` tag of the `pom` file to get the SCM details. It uses this information
    and invokes the corresponding `scm` command to get the status information. In
    the preceding example, it is the `git status`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行Maven SCM插件的`status`目标时，它会使用`pom`文件中`scm`标签中的信息来获取SCM详细信息。它使用这些信息并调用相应的`scm`命令来获取状态信息。在上面的示例中，它是`git
    status`。
- en: Tip
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The command-line version of the relevant SCM client must be installed and available
    in the Maven path for this to work.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 相关SCM客户端的命令行版本必须安装并可在Maven路径中可用，以便此操作生效。
- en: 'There are three entries in the `scm` tag:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`scm` 标签中有三个条目：'
- en: '`connection`: This is the connection information to access the repository.
    This is typically in the following form:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection`：这是访问仓库的连接信息。这通常以下列形式存在：'
- en: '[PRE34]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`service name`: This would be an SCM'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service name`：这将是一个版本控制系统。'
- en: '`scm implementation`: This would be one of the supported SCMs'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scm implementation`：这将是一个受支持的版本控制系统。'
- en: '`repository url`: This would be a URL for the repository'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repository url`：这将是一个仓库的 URL。'
- en: '`developerConnection`: This is similar to any connection, except that this
    may need authentication or have additional privileges. Typically, the `connection`
    access would be read-only, while the `developerConnection` access would be read-write.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`developerConnection`：这与任何连接类似，但可能需要认证或具有额外的权限。通常，`connection` 访问会是只读的，而 `developerConnection`
    访问会是读写。'
- en: '`url`: This is the repository URL.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`：这是仓库的 URL。'
- en: You will also notice that the appropriate shell command is used based on the
    operating system, which is `cmd.exe` in the case of Windows and `sh` in the case
    of Linux.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你也会注意到根据操作系统使用适当的 shell 命令，在 Windows 的情况下是 `cmd.exe`，而在 Linux 的情况下是 `sh`。
- en: There's more...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The Maven SCM plugin provides a number of other commands for various SCM operations,
    such as `add`, `remove`, `checkin`, `checkout`, `update`, `diff`, `branch`, and
    `tag`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Maven SCM 插件提供了许多其他命令，用于执行各种版本控制操作，例如 `add`、`remove`、`checkin`、`checkout`、`update`、`diff`、`branch`
    和 `tag`。
- en: 'Bootstrap is an interesting option to checkout and build a project with:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是一个有趣的选项，可以用来检出并构建一个项目：
- en: Create a new Maven project (or open the `bootstrap-project` file).
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Maven 项目（或打开 `bootstrap-project` 文件）。
- en: 'Add a valid Maven project in the `scm` section:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `scm` 部分添加一个有效的 Maven 项目：
- en: '[PRE35]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following entries in the `build` section:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `build` 部分添加以下条目：
- en: '[PRE36]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the Maven command:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Maven 命令：
- en: '[PRE37]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Observe the results:![There's more...](img/6124OS_08_13.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：![更多...](img/6124OS_08_13.jpg)
- en: Our Maven project has checked another Maven project, using the information in
    the `scm` section, and run the specified goal on this. We specify a `goalsDirectory`
    element because the SCM contains a number of projects and we want to execute the
    goals for a specific project, in this case `test-properties`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Maven 项目已经检查了另一个 Maven 项目，使用 `scm` 部分中的信息，并在该上运行指定的目标。我们指定一个 `goalsDirectory`
    元素，因为版本控制系统中包含多个项目，而我们只想为特定的项目执行目标，在这个例子中是 `test-properties`。
- en: Generating changelogs for a site
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为网站生成变更日志。
- en: Now that we have seen the Maven SCM plugin in action, we can see how we can
    use this feature to generate a log of project changes as part of the site report.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了 Maven SCM 插件的实际应用，我们可以看到如何使用这个特性来生成项目变更日志作为网站报告的一部分。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the Maven project `project-with-documentation`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Maven 项目 `project-with-documentation`。
- en: 'Add the following entry in the `reporting` section:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `reporting` 部分添加以下条目：
- en: '[PRE38]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the following command:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE39]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Observe the output:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE40]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Observe the generated reports:![How to do it...](img/6124OS_08_14.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察生成的报告：![如何操作...](img/6124OS_08_14.jpg)
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the `site` command is run, Maven uses the information in the `reporting`
    section of the `pom` file to generate various reports. It finds an entry for the
    Maven Changelog plugin and generates the corresponding changelog report.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 `site` 命令时，Maven 使用 `pom` 文件中 `reporting` 部分的信息来生成各种报告。它找到一个 Maven Changelog
    插件的条目，并生成相应的变更日志报告。
- en: This is essentially the SCM log for the project, with details such as timestamp,
    author, and details of change.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是项目的版本控制日志，包含如时间戳、作者和变更详情等信息。
