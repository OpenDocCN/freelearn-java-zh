- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: The Missing Guide for jOOQ Adoption
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jOOQ采用指南的缺失部分
- en: '**Object-oriented programming** (**OOP**) is the most popular approach when
    discussing enterprise architecture; however, there are more, such as data-driven.
    In today’s data-driven world, jOOQ has emerged as a powerful tool for developers
    to use to interact with databases, offering a seamless and efficient approach
    to working with SQL.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象编程（OOP**）是讨论企业架构时最流行的方法；然而，还有更多，例如数据驱动。在当今数据驱动的世界中，jOOQ已成为开发者用来与数据库交互的强大工具，提供了一种无缝且高效的SQL工作方式。'
- en: 'Firstly, let’s address the fundamental question: what is jOOQ? **jOOQ**, which
    stands for **Java Object Oriented Querying**, is a lightweight yet robust Java
    library that empowers developers to write type-safe SQL queries fluently and intuitively.
    It provides a **domain-specific language** (**DSL**) that encapsulates the complexities
    of SQL, allowing developers to focus on writing concise and readable code.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们解决基本问题：什么是jOOQ？**jOOQ**，即**Java面向对象查询**，是一个轻量级但强大的Java库，使开发者能够流畅且直观地编写类型安全的SQL查询。它提供了一个**领域特定语言（DSL**），封装了SQL的复杂性，使开发者能够专注于编写简洁且易于阅读的代码。
- en: Now, you might wonder why jOOQ has gained significant traction among developers.
    The answer lies in its ability to bridge the gap between the relational world
    of databases and the object-oriented paradigm of modern application development.
    jOOQ enables developers to leverage the full power of SQL within their Java code,
    providing flexibility, performance, and maintainability that is often difficult
    to achieve with traditional **object-relational mapping** (**ORM**) frameworks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道为什么jOOQ在开发者中获得了显著的吸引力。答案在于其能够弥合数据库的关联世界与现代应用程序开发面向对象范式之间的差距。jOOQ使开发者能够在Java代码中充分利用SQL的全部功能，提供传统**对象关系映射（ORM**）框架往往难以实现的灵活性、性能和可维护性。
- en: As we dive deeper into the world of jOOQ, we will explore the concept of data-driven
    design and its implications. Unlike traditional OOP, which primarily revolves
    around manipulating objects and their behaviors, data-driven design emphasizes
    the underlying data structures and their relationships. We will examine how jOOQ
    embraces this approach, empowering developers to efficiently handle complex database
    interactions while maintaining the benefits of strong typing and compile-time
    safety.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们深入到jOOQ的世界时，我们将探讨数据驱动设计的概念及其影响。与主要围绕操作对象及其行为的传统面向对象不同，数据驱动设计强调底层数据结构和它们之间的关系。我们将研究jOOQ如何采用这种方法，赋予开发者高效处理复杂数据库交互的能力，同时保持强类型和编译时安全性的好处。
- en: 'In this chapter, we will explore the jOOQ framework and how to use it in an
    enterprise architecture with both Jakarta EE and MicroProfile:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨jOOQ框架以及如何在具有Jakarta EE和MicroProfile的企业架构中使用它：
- en: Data-driven and object-oriented programming in Java
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java中的数据驱动和面向对象编程
- en: What is jOOQ?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是jOOQ？
- en: Using jOOQ with Jakarta/MicroProfile
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jOOQ与Jakarta/MicroProfile
- en: So, let’s embark on this journey to discover the power of jOOQ and understand
    how it revolutionizes how we interact with databases, bridging the gap between
    the world of SQL and OOP.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始这段旅程，去发现jOOQ的力量，并理解它是如何革命性地改变我们与数据库交互的方式，弥合SQL世界和面向对象世界之间的差距。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are required for this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下内容：
- en: Java 17
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17
- en: Git
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Maven
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven
- en: Any preferred IDE
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何首选的IDE
- en: 'The code for this chapter can be found at: [https://github.com/PacktPublishing/Persistence-Best-Practices-for-Java-Applications/tree/main/chapter-07](https://github.com/PacktPublishing/Persistence-Best-Practices-for-Java-Applications/tree/main/chapter-07)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下位置找到：[https://github.com/PacktPublishing/Persistence-Best-Practices-for-Java-Applications/tree/main/chapter-07](https://github.com/PacktPublishing/Persistence-Best-Practices-for-Java-Applications/tree/main/chapter-07)
- en: Data-driven and object-oriented programming in Java
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的数据驱动和面向对象编程
- en: In Java, **data-driven** programming refers to an approach where the underlying
    data and its structure primarily drive the design and functionality of a program.
    It focuses on manipulating and processing data in a way that allows for flexibility,
    extensibility, and easy modification without heavily relying on the behavior of
    objects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，**数据驱动编程**指的是一种方法，其中底层数据和其结构主要驱动程序的设计和功能。它侧重于以允许灵活性、可扩展性和易于修改的方式操作和处理数据，而不太依赖于对象的行为。
- en: In contrast, OOP is a programming paradigm that revolves around objects, which
    are instances of classes. OOP emphasizes encapsulating data and related behavior
    within objects, promoting concepts such as inheritance, polymorphism, and abstraction.
    It focuses on modeling real-world entities as objects and defining their behaviors
    through methods and relationships.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，面向对象编程是一种围绕对象旋转的编程范式，对象是类的实例。面向对象编程强调在对象内部封装数据和相关的行为，促进诸如继承、多态和抽象等概念。它侧重于将现实世界实体建模为对象，并通过方法和关系定义其行为。
- en: The critical difference between data-driven programming and OOP lies in their
    approach to program design. In OOP, the emphasis is on modeling entities and their
    behavior, organizing code around objects and their interactions. This approach
    works well when the behavior of objects is complex or when there is a need to
    represent the real-world entities in the system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数据驱动编程与面向对象编程之间的关键区别在于它们对程序设计的处理方式。在面向对象编程中，重点是建模实体及其行为，围绕对象及其交互组织代码。当对象的行为复杂或需要表示系统中的现实世界实体时，这种方法效果很好。
- en: On the other hand, data-driven programming prioritizes manipulating and processing
    data structures. It is beneficial when dealing with large amounts of data, such
    as databases or data-centric applications. Data-driven programming allows for
    efficient querying, filtering, and transformation of data, often leveraging declarative
    approaches such as SQL or other query languages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，数据驱动编程优先考虑操作和处理数据结构。当处理大量数据，如数据库或以数据为中心的应用程序时，这很有益。数据驱动编程允许高效地查询、过滤和转换数据，通常利用如SQL或其他查询语言之类的声明式方法。
- en: 'In some situations, a data-driven approach may be more suitable than an object-oriented
    one. Here are a few examples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，数据驱动方法可能比面向对象方法更适合。以下是一些例子：
- en: '**Data processing and analysis**: A data-driven approach with specialized libraries
    or frameworks can offer better performance and flexibility when dealing with extensive
    datasets or performing complex analytical tasks'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据处理和分析**：在处理大量数据或执行复杂分析任务时，使用专用库或框架的数据驱动方法可以提供更好的性能和灵活性。'
- en: '**Database-driven applications**: When developing applications that interact
    heavily with databases or rely on data from external sources, a data-driven approach
    such as jOOQ can simplify database interactions and optimize query execution'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库驱动应用程序**：在开发与数据库交互频繁或依赖于外部数据的应用程序时，如jOOQ这样的数据驱动方法可以简化数据库交互并优化查询执行。'
- en: '**Configuration-driven systems**: In systems where the behavior is primarily
    determined by configuration files or external data, a data-driven approach allows
    easy modifications and customization without requiring code changes'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置驱动系统**：在行为主要由配置文件或外部数据决定的系统中，数据驱动方法允许轻松修改和定制，而无需更改代码。'
- en: '**Rule-based systems**: In applications that involve complex rule evaluation
    or decision-making based on data, a data-driven approach can provide a transparent
    and manageable way to express and process rules'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于规则的系统**：在涉及复杂规则评估或基于数据做出决策的应用程序中，数据驱动方法可以提供一种透明且易于管理的表达和处理规则的方式。'
- en: It’s important to note that OOP and data-driven programming are not mutually
    exclusive, and they can often be combined to achieve the desired functionality
    and maintainability in a Java application. The choice between the two approaches
    depends on the specific requirements of the system and the nature of the problem
    being solved.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，面向对象编程和数据驱动编程不是相互排斥的，它们通常可以结合使用，以在Java应用程序中实现所需的功能和可维护性。两种方法之间的选择取决于系统的具体要求和要解决的问题的性质。
- en: 'While data-driven programming offers several advantages, it also comes with
    inevitable trade-offs. Here are some of the trade-offs associated with data-driven
    programming:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据驱动编程提供了一些优势，但也伴随着不可避免的权衡。以下是与数据驱动编程相关的某些权衡：
- en: '**Increased complexity**: Data-driven programming can introduce additional
    complexity, especially when dealing with large and complex data structures. Managing
    and manipulating data at a granular level may require intricate code and logic,
    making the system harder to understand and maintain.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性增加**：数据驱动编程可能会引入额外的复杂性，尤其是在处理大型和复杂的数据结构时。在细粒度级别管理和操作数据可能需要复杂的代码和逻辑，使系统更难以理解和维护。'
- en: '**Reduced encapsulation**: In data-driven programming, the focus is primarily
    on the data and its manipulation rather than encapsulating behavior within objects.
    This can lead to reduced encapsulation and increased data exposure, potentially
    compromising the security and integrity of the system.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少封装**：在数据驱动编程中，重点主要在于数据和它的操作，而不是在对象内封装行为。这可能导致封装减少和数据暴露增加，可能损害系统的安全和完整性。'
- en: '**Limited expressiveness**: While data-driven programming provides powerful
    data manipulation and querying mechanisms, it may have limitations when expressing
    complex business logic or relationships between data. OOP, emphasizing behavior
    and encapsulation, can often provide more expressive and intuitive solutions for
    such scenarios.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的表达性**：虽然数据驱动编程提供了强大的数据操作和查询机制，但在表达复杂业务逻辑或数据之间的关系时可能存在限制。面向对象，强调行为和封装，通常可以提供更具有表达性和直观的解决方案。'
- en: Despite these trade-offs, data-driven programming can be highly beneficial when
    efficient data manipulation, querying, and flexibility are crucial. By understanding
    these trade-offs, developers can make informed decisions when choosing between
    object-oriented and data-driven approaches, considering their applications’ specific
    requirements and constraints.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些权衡，但在高效的数据操作、查询和灵活性至关重要的情况下，数据驱动编程可以非常有用。通过理解这些权衡，开发者在选择面向对象和数据驱动方法时可以做出明智的决定，考虑到他们应用程序的具体需求和限制。
- en: Object-oriented is the most popular paradigm when discussing enterprise applications;
    however, we can explore more paradigms, such as a data-driven design.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象是讨论企业应用时最流行的范式；然而，我们可以探索更多范式，例如数据驱动设计。
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter gives a brief overview of this topic, but if you want to go deep,
    there are two recommended materials.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要概述了这一主题，但如果你想要深入研究，这里有两份推荐的资料。
- en: 'The first one is the book *Data-Oriented Programming* by Yehonathan Sharvit,
    which talks about this pattern, for which we can summarize three principles:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一份资料是Yehonathan Sharvit所著的《数据驱动编程》一书，其中讨论了这一模式，我们可以总结出三个原则：
- en: The code is data-separated
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是数据分离的
- en: Data is immutable
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据是不可变的
- en: Data has flexible access
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据具有灵活的访问
- en: The second one is an article called *Data-Oriented Programming* by Brian Goetz,
    where Brian explains more about new features of Java, mainly records, and how
    to take advantage of Java.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第二份资料是一篇名为《数据驱动编程》的文章，作者是Brian Goetz，他解释了Java的新特性，主要是记录，以及如何利用Java的优势。
- en: 'Given this overview of data-oriented programming, let’s go deep with one of
    the most popular frameworks that can help you to design and create data-oriented
    applications: jOOQ.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在对数据驱动编程有一个概述之后，让我们深入探讨一个最受欢迎的框架，它可以帮助你设计和创建数据驱动应用程序：jOOQ。
- en: What is jOOQ?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是jOOQ？
- en: jOOQ is a powerful Java library that bridges the gap between OOP and data-oriented
    programming in the context of enterprise applications. While OOP has long been
    the dominant paradigm in developing enterprise applications, there are cases where
    a data-oriented approach can offer unique advantages. jOOQ provides an elegant
    solution for developers to use to harness the power of SQL and leverage data-driven
    design principles within their Java code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: jOOQ是一个强大的Java库，在企业应用场景中架起了面向对象和数据驱动编程之间的桥梁。虽然面向对象长期以来一直是开发企业应用的主导范式，但在某些情况下，数据驱动方法可以提供独特的优势。jOOQ为开发者提供了一个优雅的解决方案，使他们能够利用SQL的力量，并在他们的Java代码中利用数据驱动设计原则。
- en: OOP has been widely adopted for its ability to model complex systems by encapsulating
    data and behavior within objects. It emphasizes code organization, reusability,
    and modularity. However, as enterprise applications deal with vast amounts of
    data and complex database interactions, a purely object-oriented approach can
    sometimes be limiting.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象因其能够通过封装数据和行为在对象内来模拟复杂系统而得到广泛采用。它强调代码组织、可重用性和模块化。然而，随着企业应用处理大量数据和复杂的数据库交互，纯面向对象的方法有时可能受到限制。
- en: This is where jOOQ comes into play. jOOQ enables developers to seamlessly integrate
    SQL and relational database operations into their Java code. It provides a fluent,
    type-safe, and intuitive DSL for constructing SQL queries and interacting with
    databases. By embracing a data-oriented approach, jOOQ empowers developers to
    work directly with data structures and leverage the full power of SQL for querying,
    aggregating, and transforming data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在这里，jOOQ发挥了作用。jOOQ使开发者能够无缝地将SQL和关系数据库操作集成到他们的Java代码中。它提供了一个流畅、类型安全且直观的DSL，用于构建SQL查询和与数据库交互。通过拥抱数据导向的方法，jOOQ赋予开发者直接与数据结构工作并利用SQL的全部力量进行查询、聚合和转换数据的能力。
- en: With jOOQ, developers can break free from the constraints of traditional ORM
    frameworks and gain fine-grained control over their database interactions. By
    embracing a data-oriented mindset, they can optimize performance, handle complex
    data manipulations, and take advantage of the features and optimizations offered
    by the underlying database system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jOOQ，开发者可以摆脱传统ORM框架的限制，并对其数据库交互获得更细粒度的控制。通过拥抱数据导向的思维模式，他们可以优化性能，处理复杂的数据操作，并利用底层数据库系统提供的特性和优化。
- en: By using jOOQ, developers can tap into the benefits of OOP and data-oriented
    programming paradigms. They can continue to utilize the proven principles of object-oriented
    design for encapsulating behavior within objects while also benefiting from the
    efficiency and flexibility of data-oriented programming for handling large datasets
    and complex database operations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用jOOQ，开发者可以充分利用面向对象和数据导向编程范式的优势。他们可以继续利用面向对象设计的成熟原则来封装对象内的行为，同时也能从数据导向编程的效率和灵活性中受益，以处理大量数据集和复杂的数据库操作。
- en: In the following sections, we will explore the features and capabilities of
    jOOQ in greater detail. We will delve into the DSL provided by jOOQ for constructing
    SQL queries, discuss its integration with Java code, and showcase its benefits
    for data-driven design. Together, we will discover how jOOQ can revolutionize
    how we interact with databases and enable a seamless fusion of OOP and data-oriented
    programming in enterprise applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将更深入地探讨jOOQ的功能和特性。我们将深入研究jOOQ提供的用于构建SQL查询的DSL，讨论其与Java代码的集成，并展示其在数据驱动设计中的优势。我们将共同发现jOOQ如何彻底改变我们与数据库的交互方式，并使面向对象编程和数据导向编程在企业应用程序中实现无缝融合。
- en: 'While jOOQ offers many benefits and advantages, it also has inevitable trade-offs.
    Here are some of the trade-offs associated with using jOOQ:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然jOOQ提供了许多优势和好处，但也存在不可避免的权衡。以下是使用jOOQ可能带来的权衡之一：
- en: '**Learning curve**: jOOQ introduces a new DSL for constructing SQL queries,
    which requires developers to familiarize themselves with its syntax and concepts.
    There is a learning curve involved in understanding the intricacies of jOOQ and
    utilizing it effectively.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线**：jOOQ引入了一种新的用于构建SQL查询的DSL，这要求开发者熟悉其语法和概念。理解jOOQ的复杂性和有效利用它需要一定的学习曲线。'
- en: '**Increased code complexity**: Using jOOQ can introduce additional code complexity
    compared to traditional ORM frameworks or direct SQL queries. The DSL syntax and
    the need to map between Java objects and database records may result in more code
    and potential complexity, especially for complex database interactions.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码复杂性增加**：与传统的ORM框架或直接SQL查询相比，使用jOOQ可能会引入额外的代码复杂性。DSL语法以及Java对象与数据库记录之间的映射需求可能会导致代码量增加和潜在的复杂性，尤其是在处理复杂的数据库交互时。'
- en: '**Limited database portability**: jOOQ generates SQL queries based on the underlying
    database dialect and its specific features. While jOOQ aims to provide a unified
    API across different databases, some differences in supported features and behavior
    may still exist. It can limit the portability of code between other database systems.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库可移植性有限**：jOOQ根据底层数据库方言及其特定功能生成SQL查询。虽然jOOQ旨在为不同数据库提供统一的API，但支持的特性和行为之间可能仍存在一些差异。这可能会限制代码在其他数据库系统之间的可移植性。'
- en: '**Performance considerations**: While jOOQ offers efficient query construction
    and execution, the performance may still be influenced by factors such as database
    schema design, indexing, and query optimization. It is crucial to consider the
    performance implications of jOOQ-generated queries and optimize the database schema
    accordingly.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能考虑**：虽然jOOQ提供了高效的查询构建和执行，但性能可能仍然受到数据库模式设计、索引和查询优化等因素的影响。考虑jOOQ生成的查询的性能影响并相应优化数据库模式至关重要。'
- en: '**Maintenance and upgrades**: As with any third-party library, using jOOQ introduces
    a dependency that needs to be managed and maintained. Keeping up with new releases,
    compatibility with different Java versions, and resolving potential issues or
    bugs may require additional effort during maintenance and upgrades.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护和升级**：与任何第三方库一样，使用jOOQ引入了一个需要管理和维护的依赖项。跟上新版本、与不同Java版本的兼容性以及解决潜在的问题或错误可能需要在维护和升级期间付出额外的努力。'
- en: '**Limited abstraction of an underlying database**: Unlike ORM frameworks that
    provide a higher level of abstraction, jOOQ requires developers to understand
    SQL and the underlying database schema well. It may be a disadvantage if you prefer
    a more abstract approach with hidden database-specific details.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对底层数据库的抽象有限**：与提供更高层次抽象的ORM框架不同，jOOQ要求开发者深入了解SQL和底层数据库模式。如果你更喜欢更抽象的方法并隐藏数据库特定的细节，这可能是一个缺点。'
- en: '**Potential impedance mismatch**: There may be cases where the object-oriented
    nature of the application clashes with the data-oriented approach of jOOQ. Balancing
    the two paradigms and maintaining consistency between the object model and the
    database schema can be challenging and may require careful design considerations.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**潜在的阻抗不匹配**：可能存在应用程序的面向对象特性与jOOQ的数据导向方法相冲突的情况。平衡这两种范式并在对象模型和数据库模式之间保持一致性可能具有挑战性，可能需要仔细的设计考虑。'
- en: While jOOQ provides powerful capabilities for data-driven programming in Java,
    there may be better choices in some situations. It’s essential to weigh these
    trade-offs against your project’s specific requirements and constraints. Consider
    project complexity, team experience, performance needs, and database requirements
    when deciding whether jOOQ is the right tool for your application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然jOOQ为Java中的数据驱动编程提供了强大的功能，但在某些情况下可能存在更好的选择。权衡这些权衡与你的项目具体需求和限制至关重要。在决定jOOQ是否是你应用程序的正确工具时，考虑项目复杂性、团队经验、性能需求和数据库要求。
- en: When we talk about a new tool, we compare it with the one we know; thus, let’s
    discuss more the difference between jOOQ and the **Java Persistence API** (**JPA**)
    and when we should choose one over the other.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论一个新的工具时，我们会将其与我们已知的东西进行比较；因此，让我们更深入地讨论jOOQ与Java持久化API（**JPA**）之间的差异以及何时选择其中一个而不是另一个。
- en: JPA versus jOOQ
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JPA与jOOQ的比较
- en: 'Both jOOQ and JPA are popular choices for database access in Java applications,
    but they have different approaches and use cases. Here is a comparison between
    the two and when you might choose one over the other:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: jOOQ和JPA都是Java应用程序中数据库访问的流行选择，但它们有不同的方法和用例。以下是两者的比较以及何时选择其中一个而不是另一个：
- en: jOOQ
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: jOOQ
- en: '**SQL-centric approach**: jOOQ provides a fluent DSL that allows developers
    to construct SQL queries in a type-safe and intuitive manner. It gives fine-grained
    control over the SQL statements and allows leveraging the full power of SQL. jOOQ
    is well suited to scenarios where complex querying, database-specific features,
    and performance optimizations are essential.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以SQL为中心的方法**：jOOQ提供了一个流畅的DSL，允许开发者以类型安全和直观的方式构建SQL查询。它提供了对SQL语句的细粒度控制，并允许利用SQL的全部功能。jOOQ非常适合需要复杂查询、数据库特定功能和性能优化的场景。'
- en: '**Data-driven design**: jOOQ embraces a data-oriented programming paradigm,
    making it suitable for working with large datasets and intricate database operations.
    It provides efficient data manipulation capabilities and allows developers to
    work closely with the underlying data structures. jOOQ is a good fit for applications
    with central data processing and analysis.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动设计**：jOOQ拥抱数据导向编程范式，使其适合处理大型数据集和复杂的数据库操作。它提供了高效的数据操作能力，并允许开发者与底层数据结构紧密工作。jOOQ非常适合具有中心数据处理和分析的应用程序。'
- en: '**Database-specific features**: jOOQ supports various database-specific features
    and functions, allowing developers to take advantage of the specific capabilities
    offered by different database systems. It makes it a suitable choice when working
    closely with a particular database and using its unique features.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库特定功能**：jOOQ支持各种数据库特定功能和函数，使开发者能够利用不同数据库系统提供的特定功能。当与特定数据库紧密合作并使用其独特功能时，它成为一个合适的选择。'
- en: JPA
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: JPA
- en: '**ORM**: JPA focuses on mapping Java objects to relational database tables,
    providing a higher level of abstraction. It allows developers to work with persistent
    entities and automatically maps objects to database records. JPA is a good fit
    for applications that heavily rely on object-oriented design and require a seamless
    integration between objects and the database.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM**：JPA专注于将Java对象映射到关系数据库表，提供更高层次的抽象。它允许开发者使用持久化实体，并自动将对象映射到数据库记录。对于高度依赖面向对象设计且需要对象与数据库无缝集成的应用程序，JPA是一个很好的选择。'
- en: '**Cross-database portability**: JPA aims to provide a portable API that can
    work with different databases. It abstracts away database-specific details, allowing
    applications to switch between database systems with minimal code changes. JPA
    is a suitable choice when you need flexibility regarding the database backend
    and want to avoid vendor lock-in.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨数据库可移植性**：JPA旨在提供一个可移植的API，可以在不同的数据库上工作。它抽象了数据库特定的细节，允许应用程序在数据库系统之间切换，而代码更改最小。当您需要关于数据库后端的灵活性并希望避免供应商锁定时，JPA是一个合适的选择。'
- en: '**Rapid application development**: JPA offers features such as automatic CRUD
    operations, caching, and transaction management, simplifying and accelerating
    application development. It provides a higher level of abstraction, reducing the
    need for writing low-level SQL queries. JPA is beneficial when you prioritize
    rapid prototyping, productivity, and a focus on business logic over database-specific
    optimizations.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速应用开发**：JPA提供了自动CRUD操作、缓存和事务管理等功能，简化并加速了应用开发。它提供更高层次的抽象，减少了编写低级SQL查询的需求。当您优先考虑快速原型设计、生产力和关注业务逻辑而非数据库特定优化时，JPA是有益的。'
- en: Choosing between jOOQ and JPA depends on your specific project requirements.
    If your application is data-intensive, requires complex querying, and needs fine-grained
    control over SQL, jOOQ might be a better choice. On the other hand, JPA may be
    the more suitable option if you prioritize object-oriented design, portability
    across different databases, and rapid application development. It’s also worth
    considering hybrid approaches where you can use both jOOQ and JPA together in
    different parts of your application, leveraging the strengths of each library
    as needed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在jOOQ和JPA之间进行选择取决于您特定的项目需求。如果您的应用程序是数据密集型，需要复杂的查询，并且需要精细控制SQL，那么jOOQ可能是一个更好的选择。另一方面，如果您优先考虑面向对象的设计、跨不同数据库的可移植性以及快速应用开发，那么JPA可能更适合。还值得考虑混合方法，您可以在应用程序的不同部分同时使用jOOQ和JPA，根据需要利用每个库的优势。
- en: Given an introduction about jOOQ, let’s put this into practice, this time combined
    with Jakarta EE. This book shows Jakarta EE in several persistence frameworks;
    in this chapter, we’ll show you Jakarta EE with jOOQ.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍jOOQ之后，让我们将其应用到实践中，这次与Jakarta EE结合。本书展示了Jakarta EE在几个持久化框架中的应用；在本章中，我们将向您展示如何使用jOOQ结合Jakarta
    EE。
- en: Using jOOQ with Jakarta/MicroProfile
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jOOQ与Jakarta/MicroProfile
- en: In this section, we will explore the integration of jOOQ with Jakarta EE and
    MicroProfile, two powerful frameworks in the Java ecosystem. jOOQ, with its data-driven
    approach and SQL-centric capabilities, can seamlessly complement the enterprise-grade
    features provided by Jakarta EE and the microservices-oriented practice of MicroProfile.
    By combining these technologies, developers can unlock a powerful toolkit for
    building robust, scalable, and data-driven Java applications.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨jOOQ与Jakarta EE和MicroProfile的集成，这两个Java生态系统中的强大框架。jOOQ以其数据驱动的方法和以SQL为中心的能力，可以无缝地补充Jakarta
    EE的企业级功能和MicroProfile面向微服务的实践。通过结合这些技术，开发者可以解锁一个强大的工具集，用于构建健壮、可扩展且数据驱动的Java应用程序。
- en: Jakarta EE, formerly Java EE, is a set of specifications and APIs that provides
    a standardized platform for building enterprise applications in Java. It offers
    a wide range of features, including servlets, **JavaServer Faces** (**JSF**),
    **Enterprise JavaBeans** (**EJB**), and JPA. Developers can leverage a mature
    ecosystem and industry standards with Jakarta EE to create scalable and maintainable
    applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Jakarta EE，以前称为 Java EE，是一套规范和 API，为在 Java 中构建企业应用程序提供了一个标准化的平台。它提供了一系列功能，包括
    servlets、**JavaServer Faces**（**JSF**）、**Enterprise JavaBeans**（**EJB**）和 JPA。开发者可以利用
    Jakarta EE 的成熟生态系统和行业标准来创建可伸缩和可维护的应用程序。
- en: On the other hand, MicroProfile is a community-driven initiative that focuses
    on building microservices-based applications in Java. It provides a lightweight
    and modular set of specifications and APIs tailored for microservice architectures.
    MicroProfile enables developers to leverage technologies such as JAX-RS, JSON-P,
    and CDI in microservices, allowing for greater flexibility and agility.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，MicroProfile 是一个由社区驱动的倡议，专注于在 Java 中构建基于微服务的应用程序。它提供了一套轻量级和模块化的规范和 API，专为微服务架构量身定制。MicroProfile
    允许开发者利用 JAX-RS、JSON-P 和 CDI 等技术，在微服务中实现更大的灵活性和敏捷性。
- en: 'Combining jOOQ with Jakarta EE and MicroProfile can bring the best of both
    worlds to your Java applications. Here are some benefits and use cases of this
    combination:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将 jOOQ 与 Jakarta EE 和 MicroProfile 结合使用，可以为您的 Java 应用程序带来两者的最佳特性。以下是这种组合的一些优势和用例：
- en: '**Enhanced database interactions**: jOOQ’s SQL-centric approach allows you
    to write complex and optimized SQL queries directly in your Java code. It enables
    efficient and fine-grained control over database interactions, allowing for optimized
    data retrieval, updates, and analysis. Integrating jOOQ with Jakarta EE and MicroProfile
    will enable you to seamlessly leverage jOOQ’s powerful query-building capabilities
    within your enterprise or microservices applications.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的数据库交互**：jOOQ 以 SQL 为中心的理念允许您直接在 Java 代码中编写复杂和优化的 SQL 查询。它使您能够高效且细致地控制数据库交互，从而实现优化的数据检索、更新和分析。将
    jOOQ 与 Jakarta EE 和 MicroProfile 集成，将使您能够在企业或微服务应用程序中无缝利用 jOOQ 强大的查询构建功能。'
- en: '**Data-driven microservices**: Architectures often require efficient data access
    and manipulation across multiple services. Combining jOOQ with MicroProfile allows
    you to design microservices that leverage jOOQ’s data-driven approach for seamless
    database integration. It enables each microservice to independently handle its
    data operations, benefiting from the performance and flexibility offered by jOOQ’s
    DSL.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动的微服务**：架构通常需要在多个服务之间进行高效的数据访问和处理。将 jOOQ 与 MicroProfile 结合使用，允许您设计利用 jOOQ
    数据驱动方法的微服务，以实现无缝的数据库集成。它使每个微服务能够独立处理其数据操作，并从 jOOQ 的 DSL 提供的性能和灵活性中受益。'
- en: '**Integration with JPA and ORM**: Jakarta EE applications often utilize JPA
    and ORM frameworks for database interactions. By integrating jOOQ with Jakarta
    EE and its persistence capabilities, you can leverage the benefits of both jOOQ’s
    SQL-centric approach and JPA’s object-oriented design. It allows you to efficiently
    handle complex queries and leverage JPA’s entity management, transactions, and
    caching features, resulting in a powerful and flexible data access layer.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 JPA 和 ORM 的集成**：Jakarta EE 应用程序通常利用 JPA 和 ORM 框架进行数据库交互。通过将 jOOQ 与 Jakarta
    EE 及其持久化能力集成，您可以利用 jOOQ 以 SQL 为中心的理念以及 JPA 面向对象的设计的优势。它允许您高效地处理复杂查询，并利用 JPA 的实体管理、事务和缓存功能，从而实现强大且灵活的数据访问层。'
- en: '**Cross-cutting concerns and scalability**: Jakarta EE and MicroProfile provide
    a wealth of features for cross-cutting concerns such as security, logging, and
    monitoring. By integrating jOOQ with these frameworks, you can leverage their
    capabilities to ensure consistent security policies, efficient logging, and monitoring
    of database interactions across your application or microservices architecture.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横切关注点和可伸缩性**：Jakarta EE 和 MicroProfile 提供了大量针对横切关注点（如安全、日志记录和监控）的功能。通过将 jOOQ
    与这些框架集成，您可以利用它们的能力来确保一致的安全策略、高效的日志记录和监控数据库交互，贯穿您的应用程序或微服务架构。'
- en: Throughout this section, we will explore practical examples and demonstrate
    how to combine jOOQ with Jakarta EE and MicroProfile effectively. We will showcase
    the integration of jOOQ with Jakarta EE’s Persistence API, illustrate the use
    of jOOQ in microservices architectures with MicroProfile, and discuss best practices
    for leveraging the combined power of these technologies.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨实际示例，并展示如何有效地将jOOQ与Jakarta EE和MicroProfile结合使用。我们将展示jOOQ与Jakarta EE持久化API的集成，说明在MicroProfile微服务架构中使用jOOQ的方法，并讨论利用这些技术结合力量的最佳实践。
- en: By the end of this section, you will have a solid understanding of how to work
    with jOOQ, Jakarta EE, and MicroProfile together, enabling you to build robust
    and data-driven Java applications in enterprise and microservices contexts. Let’s
    dive in and explore the possibilities of this powerful combination.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，你将牢固地理解如何一起使用jOOQ、Jakarta EE和MicroProfile，这将使你能够构建健壮且数据驱动的Java应用程序，适用于企业和微服务环境。让我们深入探讨这个强大组合的可能性。
- en: To demonstrate the combination potential, we’ll create a simple project using
    Java SE with Maven, but as a highlight, we can convert this code smoothly into
    microservices. This project is a CRUD with a single table, `Book`, where we’ll
    execute operations within, as in an executable class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示组合潜力，我们将创建一个简单的Java SE项目，使用Maven，但作为一个亮点，我们可以将此代码顺利转换为微服务。该项目是一个包含单个表`Book`的CRUD，我们将在其中执行操作，就像在一个可执行类中一样。
- en: 'We’ll still use a simple database project, the H2, to reduce our project’s
    requirements. But you can replace it on production with PostgreSQL, MariaDB, and
    so on. Indeed, that is the beauty of relational databases; we can change easier
    between databases without much impact if we compare them with NoSQL databases:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然会使用一个简单的数据库项目，即H2，以降低我们项目的要求。但你可以将其在生产环境中替换为PostgreSQL、MariaDB等。实际上，这正是关系型数据库的美丽之处；与NoSQL数据库相比，我们可以更容易地在数据库之间进行切换，影响不大：
- en: 'Let’s start with the configurations on the Maven project, where we’ll include
    the dependencies:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从Maven项目的配置开始，我们将包括依赖项：
- en: '[PRE0]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the Maven dependencies, the next step is to include the plugins to generate
    the database structure and then create the jOOQ based on this table. We’ll start
    the data structure and, using the plugin, we’ll execute the following query; as
    you’ll see, we’ll make the schema and include some books in it. We’ll not show
    the plugin source code; see the repository source for more details:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven依赖项之后，下一步是包括生成数据库结构的插件，然后基于此表创建jOOQ。我们将开始数据结构，并使用插件执行以下查询；正如你将看到的，我们将创建模式并包含一些书籍。我们不会展示插件源代码；更多详细信息请参阅存储库源代码：
- en: '[PRE1]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Maven infrastructure is ready, and the next step is to define the configuration
    to get the connection to the database and make it available to the CDI context.
    We’ll combine Jakarta CDI with Eclipse MicroProfile Config and extract the properties
    such as the JDBC URL and credentials.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maven基础设施已经就绪，下一步是定义配置以获取数据库连接并将其提供给CDI上下文。我们将结合Jakarta CDI和Eclipse MicroProfile
    Config，提取如JDBC URL和凭证等属性。
- en: 'We’ll put this credentials information, such as the username and password,
    in `microprofile-config.properties`; however, remember that you should not do
    so with production credentials. One thing I do is overwrite those configurations
    by the environment. Thus, the developer will understand this at production without
    knowing about it; a developer knows about those properties without comprehending
    the production properties. This is one of the advantages of taking the implementation
    to the edge of the Twelve-Factor App ([https://12factor.net](https://12factor.net)):'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把这些凭证信息，如用户名和密码，放入`microprofile-config.properties`文件中；然而，请记住，你不应该用生产凭证这样做。我做的事情之一是通过环境覆盖这些配置。因此，开发者会在生产环境中理解这一点，而无需了解它；开发者知道这些属性，而无需理解生产属性。这是将实现推向Twelve-Factor
    App（[https://12factor.net](https://12factor.net)）边缘的一个优点：
- en: '[PRE2]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'CDI can create and destroy bean instances in your container context. We’ll
    use this to develop and close connections, avoiding any connection leaks in our
    application. Once we have the connection, let’s create the `DSLContext` instance
    – this is the bridge between our data and Java, providing an easy and safe way
    through `fluent-API`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CDI可以在你的容器上下文中创建和销毁bean实例。我们将使用这一点来开发和关闭连接，避免在我们的应用程序中出现任何连接泄漏。一旦我们有了连接，就让我们创建`DSLContext`实例——这是我们的数据和Java之间的桥梁，提供了一个通过`fluent-API`的简单且安全的方式：
- en: '[PRE3]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We could make both `Connection` and `DSLContext` available and handled by CDI;
    the next step is using both to work with the relational database. You could inject
    `DSLContext` as a field, but since we have created it using Java SE, we’ll create
    a `SeContainer` and select it, as in the following code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使`Connection`和`DSLContext`都可用并由CDI处理；下一步是使用它们来与关系数据库交互。你可以将`DSLContext`注入为一个字段，但由于我们是用Java
    SE创建的，我们将创建一个`SeContainer`并选择它，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Are you ready for action? Let’s do a CRUD operation without creating an entity
    thanks to jOOQ, which, based on the database schema, will generate the data structure
    we can work with. The first step in the operation is the insertion. The code shows
    the record creation where we can set attributes and store them based on the setter
    methods:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你准备好行动了吗？让我们利用jOOQ执行一个无需创建实体的CRUD操作，它基于数据库模式，将生成我们可以工作的数据结构。操作的第一步是插入。代码显示了记录创建，我们可以设置属性并根据setter方法存储它们：
- en: '[PRE5]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the data, we can read that information from the database; using fluent-API
    and the `select` method with the `DSLContext` class, we can do several select
    query operations. The query will select the books ordered by title. The advantage
    of this approach is that we’ll see whether the query is compatible at the application
    level most of the time because it won’t compile if you do any irregular operation:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有数据，我们可以从数据库中读取这些信息；使用流畅的API和`select`方法以及`DSLContext`类，我们可以执行多个选择查询操作。查询将按标题顺序选择书籍。这种方法的优点是，我们大多数时候会在应用级别看到查询是否兼容，因为如果你进行任何不规则操作，它将不会编译：
- en: '[PRE6]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last two steps are `update` and `delete`; you can execute the other operations,
    exploring the fluent-API capability. We can define as many parameters and conditions
    as we wish. The sample we’re using will set the `where` condition at the `ID`
    value:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后两个步骤是`更新`和`删除`；你可以执行其他操作，探索流畅的API功能。我们可以定义尽可能多的参数和条件。我们正在使用的示例将设置`where`条件在`ID`值上：
- en: '[PRE7]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We could explore the whole CRUD operation based on the data without creating
    entities thanks to the jOOQ API. The data approach allows for generating the structure
    from the schema. We can guarantee that my application will work with the last
    entity without needing any work. That ends our jOOQ journey for today.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用jOOQ API探索整个CRUD操作，而不需要创建实体。数据方法允许从模式生成结构。我们可以保证我的应用程序将能够与最后一个实体一起工作，而无需任何工作。这就结束了我们今天的jOOQ之旅。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter delved into data-driven programming and its trade-offs compared
    to the object-oriented approach. We explored the benefits and challenges of embracing
    a data-driven mindset, understanding that there are scenarios where a data-oriented
    approach can provide unique advantages over the traditional object-oriented paradigm.
    We then witnessed how jOOQ, a powerful Java library, bridges the gap between OOP
    and data-driven programming, allowing developers to leverage the full power of
    SQL and data manipulation within their Java code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了数据驱动编程及其与面向对象方法的权衡。我们探讨了拥抱数据驱动思维的好处和挑战，理解在某些场景下，以数据为导向的方法可以提供比传统面向对象范式独特的优势。然后我们见证了jOOQ，一个强大的Java库，如何弥合面向对象编程和数据驱动编程之间的差距，使开发者能够在Java代码中充分利用SQL和数据操作的全部功能。
- en: We also examined the integration of jOOQ with Jakarta EE and MicroProfile, two
    frameworks widely used in developing enterprise and microservices applications.
    By combining these technologies, developers can take advantage of both the data-driven
    capabilities of jOOQ and the enterprise-grade features provided by Jakarta EE
    and the microservices-oriented approach of MicroProfile. This integration enables
    efficient database interactions, fine-grained control over SQL queries, and the
    ability to leverage object-oriented and data-oriented design principles in a unified
    architecture.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还检查了jOOQ与Jakarta EE和MicroProfile的集成，这两个框架在开发企业级和微服务应用中广泛使用。通过结合这些技术，开发者可以同时利用jOOQ的数据驱动能力以及Jakarta
    EE提供的企业级功能和MicroProfile面向微服务的架构方法。这种集成使得高效的数据库交互、对SQL查询的精细控制，以及在统一架构中利用面向对象和数据导向的设计原则成为可能。
- en: By combining the data-driven approach enabled by jOOQ with the enterprise-grade
    features of Jakarta EE and MicroProfile, and exploring the groundbreaking capabilities
    of MicroStream, we can take our applications to new heights of performance, scalability,
    and efficiency. We are on the brink of a new era in database-driven application
    development, where the power of data meets the speed of execution.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合 jOOQ 所提供的数据驱动方法、Jakarta EE 和 MicroProfile 的企业级特性，以及探索 MicroStream 的开创性功能，我们可以将我们的应用程序提升到新的性能、可扩展性和效率高度。我们正站在数据库驱动应用程序开发新时代的边缘，在这里，数据的力量与执行速度相得益彰。
- en: So, let’s embark on the next chapter of our journey, where we dive into the
    world of MicroStream and unleash the true potential of our persistence layer,
    Jakarta EE, and MicroProfile-powered applications. Exciting times lie ahead as
    we embrace this cutting-edge technology and witness the transformation it brings
    to our development process and the performance of our applications.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始我们旅程的下一章，在这里我们将深入探索 MicroStream 的世界，并释放我们持久化层、Jakarta EE 和 MicroProfile
    驱动的应用程序的真正潜力。随着我们拥抱这一前沿技术并见证它对我们开发过程和应用程序性能带来的变革，前方将充满激动人心的时刻。
