- en: Rising to the Cloud – Java EE, Containers, and Cloud Computing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迈向云端——Java EE、容器和云计算
- en: 'This chapter covers the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下食谱：
- en: Building Java EE containers using Docker
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 构建 Java EE 容器
- en: Using Oracle Cloud for container orchestration in the cloud
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端使用 Oracle Cloud 进行容器编排
- en: Using Jelastic for container orchestration in the cloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端使用 Jelastic 进行容器编排
- en: Using OpenShift for container orchestration in the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端使用 OpenShift 进行容器编排
- en: Using AWS for container orchestration in the cloud
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端使用 AWS 进行容器编排
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: There are two things that have happened in the computer industry that have changed
    it for good—**cloud computing** and **containers**. Cloud computing came first
    and changed the way to look at infrastructure, the way to consume software, and
    the way to grow many businesses. Now, computation is a commodity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机行业发生了两件改变其命运的事情——**云计算**和**容器**。云计算先出现，改变了看待基础设施、消费软件以及许多业务增长的方式。现在，计算已成为一种商品。
- en: Containers change and are changing the way we build and deliver software. They
    are also the essential glue for DevOps and the way to take CI/CD to another level.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 容器正在改变，并且正在改变我们构建和交付软件的方式。它们也是 DevOps 的关键粘合剂，以及将 CI/CD 提升到另一个层次的方法。
- en: Put them together and you will have one of the most powerful environments in
    IT. But can Java EE take advantage of it? Of course! If an application server
    is an abstraction of Java EE applications, containers are an abstraction of the
    server, and once you have them built in a standard such as Docker, you have the
    power to use such tools to manage an application server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们组合起来，您将拥有 IT 领域中最强大的环境之一。但是 Java EE 能否利用它呢？当然可以！如果应用程序服务器是 Java EE 应用的抽象，那么容器就是服务器的抽象，一旦您在
    Docker 这样的标准中构建了它们，您就有权使用这些工具来管理应用程序服务器。
- en: This chapter will show you how to put your Java EE application inside a container
    and how to deliver this container with some of the best providers we have today.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您展示如何将您的 Java EE 应用程序放入容器中，以及如何使用我们今天拥有的最佳提供商之一交付这个容器。
- en: Building Java EE containers using Docker
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 构建 Java EE 容器
- en: 'Since day one, Java EE has been based on containers. If you doubt it, just
    have a look at this diagram:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一天起，Java EE 就基于容器。如果您对此表示怀疑，只需查看这张图：
- en: '![](img/75c65e0a-4eb7-41b4-bc1d-11ee5da34b4e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75c65e0a-4eb7-41b4-bc1d-11ee5da34b4e.png)'
- en: 'Java EE architecture: https://docs.oracle.com/javaee/6/tutorial/doc/bnacj.html'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 架构：https://docs.oracle.com/javaee/6/tutorial/doc/bnacj.html
- en: It belongs to Oracle's official documentation for Java EE 6 and, actually, has
    been much the same architecture since the times of Sun.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它属于 Oracle 公司官方的 Java EE 6 文档，实际上，自从 Sun 时代以来，其架构一直保持不变。
- en: 'If you pay attention, you will notice that there are different containers:
    a web container, an EJB container, and an application client container. In this
    architecture, it means that the applications developed with those APIs will rely
    on many features and services provided by the container.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意观察，您会注意到存在不同的容器：一个 Web 容器、一个 EJB 容器和应用程序客户端容器。在这个架构中，这意味着使用这些 API 开发的应用程序将依赖于容器提供的许多特性和服务。
- en: When we take the Java EE application server and put it inside a Docker container,
    we are doing the same thing— it is relying on some of the features and services
    provided by the Docker environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 Java EE 应用程序服务器放入 Docker 容器中时，我们正在做同样的事情——它依赖于 Docker 环境提供的一些特性和服务。
- en: This recipe will show you how to deliver a Java EE application in a container
    bundle, which is called an **appliance**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将向您展示如何将 Java EE 应用程序打包在一个容器包中，这被称为**设备**。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, of course, you need the Docker platform installed in your environment.
    There are plenty of options, so I suggest you go the following link and get more
    details:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，首先您需要在您的环境中安装 Docker 平台。有很多选择，所以我建议您访问以下链接以获取更多详细信息：
- en: '[https://docs.docker.com/install/](https://docs.docker.com/install/)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/install/](https://docs.docker.com/install/)'
- en: 'And if you are not familiar with Docker commands, I recommend you have a look
    at this beautiful cheat sheet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 Docker 命令，我建议您查看这份精美的速查表：
- en: '[https://zeroturnaround.com/rebellabs/docker-commands-and-best-practices-cheat-sheet/](https://zeroturnaround.com/rebellabs/docker-commands-and-best-practices-cheat-sheet/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://zeroturnaround.com/rebellabs/docker-commands-and-best-practices-cheat-sheet/](https://zeroturnaround.com/rebellabs/docker-commands-and-best-practices-cheat-sheet/)'
- en: You'll also need to create an account at Docker Hub so you can store your own
    images. Check it out: [https://hub.docker.com/](https://hub.docker.com/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在Docker Hub上创建一个账户，以便你可以存储自己的镜像。查看它：[https://hub.docker.com/](https://hub.docker.com/)。
- en: It's free for public images.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 公共镜像免费。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To build your Java EE container, you''ll first need a Docker image. To build
    it, you''ll need a Dockerfile such as this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建你的Java EE容器，你首先需要一个Docker镜像。要构建它，你需要一个像这样的Dockerfile：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This image will be our base image from which we will construct other images
    in this chapter. Now we need to build it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个镜像将成为我们的基础镜像，我们将从这个镜像构建本章中的其他镜像。现在我们需要构建它：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Go ahead and push it to your Docker Registry at Docker Hub:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，把它推送到你的Docker Hub Docker Registry：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you can create another image by customizing the previous one, and then
    put your app on it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过自定义上一个镜像来创建另一个镜像，然后将你的应用程序放在上面：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the same folder, we have a Java EE application file (`app.war`) that will
    be deployed inside the container. Check the *See also* section to download all
    the files.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个文件夹中，我们有一个Java EE应用程序文件（`app.war`），它将被部署在容器内。查看“也见”部分以下载所有文件。
- en: 'Once you save your Dockerfile, you can build your image:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的Dockerfile后，你可以构建你的镜像：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now you can create the container:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以创建容器：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Wait a few seconds and open this URL in your browser:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几秒钟，然后在你的浏览器中打开此URL：
- en: '`http://localhost/app`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/app`'
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s understand our first Dockerfile:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解我们的第一个Dockerfile：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This `FROM` keyword will ask Docker to pull the `openjdk:8-jdk` image, but what
    does it mean?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`FROM`关键字将要求Docker拉取`openjdk:8-jdk`镜像，但这意味着什么？
- en: It means that there's a registry somewhere where your Docker will find prebuilt
    images. If there's no image registry in your local environment, it will search
    for it in Docker Hub, the official and public Docker registry in the cloud.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在某个地方有一个注册表，你的Docker可以在那里找到预构建的镜像。如果你的本地环境中没有镜像注册表，它将在Docker Hub上搜索，这是云中的官方和公共Docker注册表。
- en: 'And when you say that you are using a pre-built image, it means that you don''t
    need to build, in our case, the whole Linux container from scratch. There''s already
    a template that you can rely on:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你说你使用的是预构建镜像时，这意味着你不需要从头开始构建，在我们的例子中，整个Linux容器。已经有一个你可以依赖的模板：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here are just some environment variables to help with the coding.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些环境变量，可以帮助进行编码。
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `RUN` clause in Dockerfiles execute some bash commands inside the container
    when it has been created. Basically, what is happening here is that GlassFish
    is being downloaded and then prepared in the container:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile中的`RUN`子句在容器创建时执行一些bash命令。基本上，这里发生的事情是GlassFish正在被下载并在容器中准备：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For safety, we define the user that will hold the permissions for GlassFish
    files and processes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，我们定义了将持有GlassFish文件和进程权限的用户：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here we are including a bash script inside the container to perform some GlassFish
    administrative tasks:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在容器内包含一个bash脚本以执行一些GlassFish管理任务：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After copying the bash file into the container, we go to the final block:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在将bash文件复制到容器后，我们进入最后的块：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `USER` clause defines the user that will be used from this point in the
    file. It's great because from there, all the tasks will be done by the `glassfish`
    user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`USER`子句定义了从文件此点开始将使用的用户。这很棒，因为从那里开始，所有任务都将由`glassfish`用户执行。'
- en: The `ENTRYPOINT` clause will execute the `docker-entrypoint.sh` script.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENTRYPOINT`子句将执行`docker-entrypoint.sh`脚本。'
- en: The `EXPOSE` clause will define the ports that will be available for containers
    that use this image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXPOSE`子句将定义使用此镜像的容器可用的端口。'
- en: And finally, the `CMD` clause will call the GlassFish script that will initialize
    the container.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`CMD`子句将调用初始化容器的GlassFish脚本。
- en: 'Now let''s understand our second Dockerfile:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来理解我们的第二个Dockerfile：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We need to take into account the same considerations about the prebuilt image,
    but now the image was made by you. Congratulations!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑与预构建镜像相同的考虑因素，但现在这个镜像是由你制作的。恭喜你！
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we are building an environment variable to help with the deployment.
    It''s done in the same way as for Linux systems:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在构建一个环境变量来帮助部署。它是以与Linux系统相同的方式进行：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This `COPY` command will literally copy the `app.war` file to the folder defined
    in the `DEPLOYMENT_DIR` environment variable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`COPY`命令将直接将`app.war`文件复制到`DEPLOYMENT_DIR`环境变量定义的文件夹中。
- en: 'From here, you are ready to build an image and create a container. The image
    builder is self-explanatory:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你就可以构建一个镜像并创建一个容器。镜像构建器是自我解释的：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s check the `docker run` command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`docker run`命令：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we break it down, this is what the various elements of the command mean:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其分解，以下是命令中各个元素的含义：
- en: '`-h`: Defines the host name of the container.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h`: 定义容器的主机名。'
- en: '`-p`: Defines which ports will be exposed and how it will be done. It is useful,
    for example, when more than one container is using the same port by default—you
    just use them differently.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`: 定义了哪些端口将被暴露以及如何实现。例如，当多个容器默认使用相同的端口时，这很有用——你只需以不同的方式使用它们。'
- en: '`eldermoraes/gf-javaee-cookbook`: The reference to the image you just built.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eldermoraes/gf-javaee-cookbook`: 对你刚刚构建的镜像的引用。'
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关链接
- en: The source code and files used in this recipe are at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-docker](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-docker).
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本食谱中使用的源代码和文件位于[https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-docker](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-docker)。
- en: Using Oracle Cloud for container orchestration in the cloud
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中使用Oracle Cloud进行容器编排
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide a good infrastructure and a nice service for a small price.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中使用容器最佳方式是通过使用提供商。为什么？因为它们可以以较低的价格提供良好的基础设施和优质的服务。
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using Oracle Cloud.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将向您展示如何获取本章第一个食谱中创建的容器，并使用Oracle Cloud进行交付。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have an account with Oracle Cloud you can register for a trial
    at [https://cloud.oracle.com/tryit](https://cloud.oracle.com/tryit).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Oracle Cloud账户，您可以在[https://cloud.oracle.com/tryit](https://cloud.oracle.com/tryit)注册试用。
- en: That's all you need, beyond having created the Docker image in the first recipe
    of this chapter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所有你需要做的，除了在本章第一个食谱中创建Docker镜像之外。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'After logging in to the platform, you will see this dashboard:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录平台后，您将看到此仪表板：
- en: '![](img/228152d8-3c64-49e3-bd88-b285baf6ba95.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/228152d8-3c64-49e3-bd88-b285baf6ba95.png)'
- en: Oracle Cloud dashboard
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle Cloud仪表板
- en: 'Scroll down the page until you find Oracle Cloud Infrastructure - Container
    Service and click on it:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动页面，直到找到Oracle Cloud Infrastructure - 容器服务并点击它：
- en: '![](img/26384752-6510-48e9-8ff2-50f7f6b70e48.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/26384752-6510-48e9-8ff2-50f7f6b70e48.png)'
- en: Container Service Access
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 容器服务访问
- en: 'On the main page of the container service (the following screenshot), click
    on the My Services URL link :'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器服务的主页（以下截图）上，点击“我的服务URL”链接：
- en: '![](img/d9d2699b-d36d-4e40-a883-76486a5a0c8b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d9d2699b-d36d-4e40-a883-76486a5a0c8b.png)'
- en: Container Service Overview page
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 容器服务概述页面
- en: 'You will get to the Cloud Services dashboard. Click on Container Classic:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将进入云服务仪表板。点击“容器经典”：
- en: '![](img/50b2ad95-7047-40dc-a49e-7b08a90697f2.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50b2ad95-7047-40dc-a49e-7b08a90697f2.png)'
- en: Cloud Services Dashboard
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务仪表板
- en: 'On the page that opens, click on the Open Service Console button:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的页面上，点击“打开服务控制台”按钮：
- en: '![](img/d25654b5-071d-48f3-aa1c-7eeaa701d5bd.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d25654b5-071d-48f3-aa1c-7eeaa701d5bd.png)'
- en: Service Console Access
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 服务控制台访问
- en: 'On the next page, click on the Create Instance button:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页上，点击“创建实例”按钮：
- en: '![](img/609a7b22-6314-4cb4-aabd-326166f7d7df.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/609a7b22-6314-4cb4-aabd-326166f7d7df.png)'
- en: Container Cloud Service welcome page
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 容器云服务欢迎页面
- en: 'Fill in the form like this:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格如下：
- en: '![](img/08f56395-ef9a-4fd3-be12-fcb4f4a4f260.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08f56395-ef9a-4fd3-be12-fcb4f4a4f260.png)'
- en: Fields for instance creation
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实例创建字段
- en: In the SSH Public Key field, you need to set a valid public key that has a private
    pair. Without it, you will not be able to log in to the service using SSH.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在“SSH公钥”字段中，您需要设置一个有效的公钥，它有一个私钥对。没有它，您将无法使用SSH登录到服务。
- en: Click on Next.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”。
- en: 'On the page that opens, confirm your data and click on the Create button:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的页面上，确认您的数据并点击“创建”按钮：
- en: '![](img/860cffaa-fb25-4296-8f2f-c69f34232d10.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/860cffaa-fb25-4296-8f2f-c69f34232d10.png)'
- en: Data confirmation
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 数据确认
- en: 'Then you''ll be back to the main page while the service is created (note the
    Creating service... label):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务创建过程中，您将返回主页面（注意“创建服务...”标签）：
- en: '![](img/05411a89-de1f-4987-8c07-8dfe0afc7d49.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/05411a89-de1f-4987-8c07-8dfe0afc7d49.png)'
- en: New service being created
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 新服务正在创建
- en: 'Once the service is created, click on the Options button and click on Container
    Console:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦服务创建完成，点击“选项”按钮并点击“容器控制台”：
- en: '![](img/e6a18614-6ee0-474a-8c96-6e8e30d8b4b8.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e6a18614-6ee0-474a-8c96-6e8e30d8b4b8.png)'
- en: Access to the Container Console
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 访问容器控制台
- en: 'You are now in the dashboard of the service you have just created:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在位于您刚刚创建的服务仪表板：
- en: '![](img/ebfacede-59e1-41c8-8e38-f4928769c045.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ebfacede-59e1-41c8-8e38-f4928769c045.png)'
- en: Container Cloud Service dashboard
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 容器云服务仪表板
- en: 'Click on Services (left side) and then New Service (right side):'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“服务”（左侧）然后点击“新建服务”（右侧）：
- en: '![](img/8f0ddbd0-a930-481a-a07f-0da0b5ba6874.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8f0ddbd0-a930-481a-a07f-0da0b5ba6874.png)'
- en: Services page
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 服务页面
- en: 'In the popup, give a name to the service (the Service Name field), and in the
    Image field you need to fill in the details of the pre-built image:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，为服务命名（服务名称字段），并在“镜像”字段中填写预构建镜像的详细信息：
- en: '![](img/fe89d645-a961-42ba-8e42-2a5088fdd054.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe89d645-a961-42ba-8e42-2a5088fdd054.png)'
- en: Fields for service creation
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 服务创建字段
- en: 'In the Available Options field, check the Ports option. It will open the Ports section
    under Environment Variables. Click on the Add button and fill in the form in the
    popup like this:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“可用选项”字段中，勾选“端口”选项。它将在“环境变量”下的“端口”部分打开。点击“添加”按钮，并在弹出的窗口中填写表格，如下所示：
- en: '![](img/f6442c72-125f-4f55-83cf-12cb96c5b245.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f6442c72-125f-4f55-83cf-12cb96c5b245.png)'
- en: Ports forwarding
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 端口转发
- en: 'Now your service is on this list. Click on its Deploy button:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的服务已出现在这个列表中。点击其“部署”按钮：
- en: '![](img/b2189347-228b-4018-bdc3-e51269ed20a9.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b2189347-228b-4018-bdc3-e51269ed20a9.png)'
- en: Services list
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 服务列表
- en: 'In the popup, fill in the form as shown in the screenshot and click on Deploy:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，填写截图所示的表格，然后点击部署：
- en: '![](img/92dd3df2-c791-43cc-8f19-682ceff638fd.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/92dd3df2-c791-43cc-8f19-682ceff638fd.png)'
- en: Popup for service deployment
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 服务部署弹窗
- en: 'Now, just wait a moment until your new service is up and running:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，只需稍等片刻，直到您的新服务启动并运行：
- en: '![](img/5a3482c6-fab8-4f1d-904b-c9ee0366bdbb.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a3482c6-fab8-4f1d-904b-c9ee0366bdbb.png)'
- en: Ongoing deployment
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 进行中的部署
- en: 'Once your deployment is done, it will become green and you will have information
    about the container you have created. Click on the link under the Container Name label:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦部署完成，它将变为绿色，您将获得有关您创建的容器的信息。点击“容器名称”标签下的链接：
- en: '![](img/fbc4027a-d269-465f-b649-6dba6960e4c6.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fbc4027a-d269-465f-b649-6dba6960e4c6.png)'
- en: Deployment done
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成
- en: 'You now will see details about your container:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在将看到有关您的容器的详细信息：
- en: '![](img/88aac31b-804a-4cb1-8725-f896914f0dc6.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/88aac31b-804a-4cb1-8725-f896914f0dc6.png)'
- en: Container details
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 容器详情
- en: 'Click on the tab labeled Environment Variables and find a variable called OCCS_HOSTIPS.
    On the same line there''s an IP in the public_ip label. Copy it:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标签页上标有“环境变量”的部分，找到名为OCCS_HOSTIPS的变量。在同一行中，有一个标有public_ip的IP地址。复制它：
- en: '![](img/6d86c4fb-3195-4e2e-8d88-346b5959e34e.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6d86c4fb-3195-4e2e-8d88-346b5959e34e.png)'
- en: Environment variable for the container
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 容器环境变量
- en: 'Use it to navigate to `http://[public_ip]:8080/app`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用它导航到`http://[public_ip]:8080/app`：
- en: '![](img/7fe72716-013a-47a3-a359-57f7f383b900.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7fe72716-013a-47a3-a359-57f7f383b900.png)'
- en: Test page for our application
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的测试页面
- en: If you can see the preceding image, you've made it! Now your container is orchestrated
    in the cloud using Oracle Cloud.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能看到前面的图片，说明您已经成功了！现在您的容器正在使用Oracle Cloud进行云编排。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The reason why it's so simple is that you are using a platform that was designed
    to make it simple. So, all the heavy lifting that you'd have to do in your own
    infrastructure is done by the platform.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这之所以如此简单，是因为您正在使用一个旨在使其简化的平台。因此，您在自己的基础设施中需要做的所有繁重工作都由平台完成。
- en: There's more...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only because of the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用提供商在云中编排容器的理由不仅是因为创建服务的便捷性，而且因为平台将负责保持其正常运行。
- en: So, if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的容器出现故障并需要停止、重启，甚至杀死并重新创建，平台将自动完成这些操作。
- en: Using Jelastic for container orchestration in the cloud
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中使用Jelastic进行容器编排
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide you a good infrastructure and a nice service for a small price.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中使用容器最好的方式是通过使用提供商。为什么？因为它们可以以较低的价格为您提供良好的基础设施和优质的服务。
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using Jelastic.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向您展示如何使用Jelastic将本章第一篇教程中创建的容器交付。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have an account with Jelastic, you can sign for a free trial at [https://jelastic.com/](https://jelastic.com/).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Jelastic账户，您可以在[https://jelastic.com/](https://jelastic.com/)注册免费试用。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'After logging into the platform you will get to this main page:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录平台后，您将到达这个主页：
- en: '![](img/302510b6-df5d-4034-917d-55c810647e0c.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/302510b6-df5d-4034-917d-55c810647e0c.png)'
- en: Jelastic main page
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Jelastic 主页
- en: 'First things first. Click on the Settings button (top right). It will open
    the Account settings section (bottom left):'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，点击右上角的设置按钮。它将打开账户设置部分（左下角）：
- en: '![](img/b2e5d3cb-bcf3-45cc-a0f7-b01932b7eb50.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b2e5d3cb-bcf3-45cc-a0f7-b01932b7eb50.png)'
- en: Account settings
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 账户设置
- en: 'Click on Public inside SSH Keychain and upload your public SSH key:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击SSH密钥链中的“公共”并上传您的公钥SSH密钥：
- en: '![](img/96734ee4-184b-4774-87c1-9089f8bf755d.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/96734ee4-184b-4774-87c1-9089f8bf755d.png)'
- en: SSH Public Key information
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: SSH公钥信息
- en: 'Make sure your SSH key is really uploaded, otherwise you will not be able to
    log into the platform using SSH:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的SSH密钥已真正上传，否则您将无法使用SSH登录平台：
- en: '![](img/f2d365f9-7b15-4c9e-a08f-c6b2f8150734.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f2d365f9-7b15-4c9e-a08f-c6b2f8150734.png)'
- en: SSH confirmation
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: SSH确认
- en: 'At the top of the page, click on the Marketplace button. Go on to the Other section
    and select Docker Engine CE. Click on Install:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面顶部，点击市场按钮。转到其他部分并选择Docker Engine CE。点击安装：
- en: '![](img/8532dacd-b294-40c7-be3e-3b8727ddcb33.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8532dacd-b294-40c7-be3e-3b8727ddcb33.png)'
- en: Marketplace popup
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 市场弹出窗口
- en: 'Give this environment a name and click on Install:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给这个环境起一个名字并点击安装：
- en: '![](img/7c17ebbd-b819-466f-95be-9dcf37e54b41.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7c17ebbd-b819-466f-95be-9dcf37e54b41.png)'
- en: Docker Engine CE configuration popup
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Engine CE配置弹出窗口
- en: 'Wait until it''s done:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 等待完成：
- en: '![](img/930cb813-5858-4933-9158-20b8f4d7cf72.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/930cb813-5858-4933-9158-20b8f4d7cf72.png)'
- en: Installation status
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 安装状态
- en: 'Once it''s finished, it will show a popup with the command you''ll have to
    use to log in to the platform. Copy it:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将弹出一个包含您需要用于登录平台的命令的窗口。复制它：
- en: '![](img/c3c3a2fc-a519-4bac-b504-6f20b74e8ba8.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c3c3a2fc-a519-4bac-b504-6f20b74e8ba8.png)'
- en: Install confirmation and commands for connection
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 安装确认和连接命令
- en: 'Open a Terminal in your machine and paste the copied command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的机器上打开终端并粘贴复制的命令：
- en: '![](img/904c954f-30f9-4fbd-bf89-29988a6952ab.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/904c954f-30f9-4fbd-bf89-29988a6952ab.png)'
- en: Command execution on terminal
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 终端上的命令执行
- en: 'At the end of the output of the console window, there is the command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台窗口的输出末尾有这个命令：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will be like this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/5cb3c8b4-7b21-482f-b1e6-64f60ee04164.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5cb3c8b4-7b21-482f-b1e6-64f60ee04164.png)'
- en: Environment variables output
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量输出
- en: 'Now, you can just run your command to create a container:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您只需运行命令即可创建容器：
- en: '[PRE19]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Check the output:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 检查输出：
- en: '![](img/d82697bb-a569-4106-b5cf-eb8ff8c27d60.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d82697bb-a569-4106-b5cf-eb8ff8c27d60.png)'
- en: Container log output
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 容器日志输出
- en: It's quite the same as if you were running in your own local machine, but you
    are actually running on the Jelastic platform.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这与您在自己的本地机器上运行几乎一样，但实际上您是在Jelastic平台上运行。
- en: 'Now, if you go back to the main page you will see your environment up and running:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您回到主页，您将看到您的环境正在运行：
- en: '![](img/6433d7a0-1811-4c8f-8721-a176661bef14.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6433d7a0-1811-4c8f-8721-a176661bef14.png)'
- en: Main page with the node created
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 创建节点的主页
- en: 'Under the Docker Engine CE label there''s the URL of your environment. Just
    click on it and add `/app` to the end:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Engine CE标签下有您环境的URL。只需点击它并在末尾添加`/app`：
- en: '![](img/58dacf77-831b-4f47-828c-5bd9fafad82d.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58dacf77-831b-4f47-828c-5bd9fafad82d.png)'
- en: Test page for our application
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的测试页面
- en: If you can see this page, congratulations! Your application is deployed on Jelastic.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能看到这个页面，恭喜！您的应用程序已部署到Jelastic。
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The reason why it's so simple is because you are using a platform that's designed
    to make it simple. So all the heavy lifting that you'd need to do it in your own
    infrastructure is done by the platform.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这之所以如此简单，是因为您正在使用一个旨在使其简化的平台。因此，您在自己的基础设施中需要做的所有繁重工作都由平台完成。
- en: There's more...
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only regarding the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用提供商在云中编排容器的原因不仅在于创建服务的便捷性，还因为平台将负责保持其正常运行。
- en: So if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的容器出现故障并需要停止、重启，甚至杀死并重新创建，平台将自动完成这些操作。
- en: Using OpenShift for container orchestration in the cloud
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中使用OpenShift进行容器编排
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide you a good infrastructure and a nice service for a small price.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中使用容器最好的方式是通过使用提供商。为什么？因为它们可以以较小的价格为您提供良好的基础设施和优质的服务。
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using OpenShift.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将向您展示如何使用OpenShift将本章第一个配方中创建的容器交付。
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have an account with OpenShift you can sign up for a free trial.
    Visit [https://www.openshift.com/](https://www.openshift.com/) and click on Sign
    up for free.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有OpenShift账户，可以免费试用。访问[https://www.openshift.com/](https://www.openshift.com/)并点击免费注册。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'After logging in to the platform, you will see this main page:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录平台后，您将看到此主页：
- en: '![](img/368f4560-4ed3-4fe7-b6a6-f7b8432b22d0.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/368f4560-4ed3-4fe7-b6a6-f7b8432b22d0.png)'
- en: Openshift main page
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift主页
- en: 'Click on the Create Project button and fill in the blanks. Click on Create:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建项目按钮并填写空白。点击创建：
- en: '![](img/4c2f74c8-5f75-42f0-b1ac-29ccaac48b67.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c2f74c8-5f75-42f0-b1ac-29ccaac48b67.png)'
- en: Filling fields for a new project
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 填写新项目字段
- en: 'Once your project is created, click on it:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的项目创建完成，点击它：
- en: '![](img/4142630c-5181-428a-8f9d-517b4d6bf178.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4142630c-5181-428a-8f9d-517b4d6bf178.png)'
- en: Access for the new project
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 新项目的访问权限
- en: 'On the opened page, click on Add to Project (top right) and then Deploy Image:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的页面中，点击右上角的添加到项目，然后部署镜像：
- en: '![](img/2140a434-7132-44d2-9da2-871ef7b62813.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2140a434-7132-44d2-9da2-871ef7b62813.png)'
- en: Project main page
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 项目主页
- en: In the popup select Image Name, fill in the form with our pre-built image (`eldermoraes/gf-javaee-cookbook`)
    and click on the Search icon.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中选择镜像名称，填写表单并使用我们预构建的镜像（`eldermoraes/gf-javaee-cookbook`），然后点击搜索图标。
- en: 'You will see a warning like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到如下警告：
- en: '![](img/ec6e5dff-d3c0-4fc3-88c3-432f50898987.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec6e5dff-d3c0-4fc3-88c3-432f50898987.png)'
- en: Image deployment popup
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图像部署弹出窗口
- en: 'Let me save you time: don''t deploy it, because it will not work. The OpenShift
    platform demands that your container should run with a user other than `root`.
    So we need to build another image for it.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我为您节省时间：不要部署它，因为它不会工作。OpenShift平台要求您的容器应以除`root`以外的用户运行。因此，我们需要为它构建另一个镜像。
- en: 'Fortunately, it''s quite simple. The new Dockerfile is like this:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这相当简单。新的Dockerfile如下所示：
- en: '[PRE20]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then you build a new image based on this Dockerfile:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后根据此Dockerfile构建一个新的镜像：
- en: '[PRE21]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then push this new image to the Docker Hub:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将这个新镜像推送到Docker Hub：
- en: '[PRE22]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now you are good to go:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以开始了：
- en: '![](img/2e516ce2-1405-459e-bade-2b27d422cae3.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2e516ce2-1405-459e-bade-2b27d422cae3.png)'
- en: Image deployment popup
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图像部署弹出窗口
- en: 'There are no warnings, so go ahead and click on Deploy. In the page that opens,
    click on the Continue to the project overview label:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有警告，所以请继续点击部署。在打开的页面中，点击继续到项目概览标签：
- en: '![](img/8dd76dcc-1f3c-47fb-8cf3-6e44ceeba661.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8dd76dcc-1f3c-47fb-8cf3-6e44ceeba661.png)'
- en: Image deployment confirmation
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图像部署确认
- en: 'Watch the following page until the pod icon is blue. When it''s ready, click
    on the Create Route link:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下页面，直到Pod图标变为蓝色。准备好后，点击创建路由链接：
- en: '![](img/aefa00fb-d707-4b2c-a730-3eaa1b90ec06.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aefa00fb-d707-4b2c-a730-3eaa1b90ec06.png)'
- en: Monitoring the pod creation
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 监控Pod创建
- en: 'In the popup, fill in the Path field with `/app` and in Target Port choose
    8080 -> 8080 (TCP):'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，填写路径字段为`/app`，在目标端口选择8080 -> 8080（TCP）：
- en: '![](img/c58cfe33-1742-4d7c-9239-b353aa184fc3.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c58cfe33-1742-4d7c-9239-b353aa184fc3.png)'
- en: Route creation
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 路由创建
- en: 'Click on Create and wait:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建并等待：
- en: '![](img/fac6f7e9-5167-409f-9b8a-0120be124fdf.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fac6f7e9-5167-409f-9b8a-0120be124fdf.png)'
- en: Route confirmation
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 路由确认
- en: 'Once it''s done, click on the Overview menu (top left). In the same row as
    the application name, there''s a URL pointing to your container:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击左上角的概览菜单。在应用程序名称所在的同一行，有一个指向您的容器的URL：
- en: '![](img/50660b6c-4fe6-40c0-a768-1fc917f04081.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50660b6c-4fe6-40c0-a768-1fc917f04081.png)'
- en: Test page for our application
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的测试页面
- en: If you can see the page, congratulations! Your application is now orchestrated
    at OpenShift.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能看到页面，恭喜！您的应用程序现在已在OpenShift上编排。
- en: How it works...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The reason why it's so simple is because you are using a platform that's designed
    to make it simple. So all the heavy lifting that you'd need to do it in your own
    infrastructure is done by the platform.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这之所以如此简单，是因为您正在使用一个旨在使其简化的平台。因此，您在自己的基础设施中需要做的所有繁重工作都由平台完成。
- en: 'The change we''ve made to make the application run in the OpenShift is quite
    simple:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为使应用程序在OpenShift上运行所做的更改非常简单：
- en: '[PRE23]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: First, we use the `root` user to change the permissions of `app.war`. Then the
    main point is to specify to use the `glassfish` user. This feature tells Docker
    that the internal process will be owned by the `glassfish` user, and not by `root`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`root`用户更改`app.war`的权限。然后主要目的是指定使用`glassfish`用户。这个特性告诉Docker内部进程将由`glassfish`用户拥有，而不是`root`。
- en: There's more...
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only based on the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在云中使用提供者来编排容器的原因不仅是因为创建服务的简便性，还因为平台将负责保持其运行。
- en: So, if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的容器出现错误需要停止、重启，甚至需要杀死并重新创建，平台将自动完成这些操作。
- en: See also
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: See the full source code for this recipe at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-openshift](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-openshift).
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-openshift](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter11/ch11-openshift)查看本食谱的完整源代码。
- en: Using AWS for container orchestration in the cloud
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中使用AWS进行容器编排
- en: The best way to use containers in the cloud is by using a provider. Why? Because
    they can provide you with a good infrastructure and a nice service for a small
    price.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中使用容器的最佳方式是通过使用提供者。为什么？因为它们可以以较低的价格为您提供良好的基础设施和优质的服务。
- en: This recipe will show you how to get the container created in the first recipe
    of this chapter and deliver it using **Amazon Web Services** (**AWS**).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将向您展示如何获取本章第一个食谱中创建的容器，并使用**亚马逊网络服务**（**AWS**）交付它。
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have an account with AWS, register for a free trial at [https://aws.amazon.com/free/start-your-free-trial/](https://aws.amazon.com/free/start-your-free-trial/).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有AWS账户，请在[https://aws.amazon.com/free/start-your-free-trial/](https://aws.amazon.com/free/start-your-free-trial/)注册免费试用。
- en: How to do it...
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you log in to the platform, you will get to this main page:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您登录到平台，您将到达这个主页面：
- en: '![](img/8a63ab0d-c44e-4501-be7e-008aba035300.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a63ab0d-c44e-4501-be7e-008aba035300.png)'
- en: AWS main page
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: AWS主页
- en: 'Click on the Services menu (top left) and then Elastic Container Service (under
    the Compute menu):'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左上角的“服务”菜单，然后选择“弹性容器服务”（在“计算”菜单下）：
- en: '![](img/5c3ff577-292c-4f81-adb0-54d9ee09ce19.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c3ff577-292c-4f81-adb0-54d9ee09ce19.png)'
- en: Services list
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 服务列表
- en: 'On the page that opens, click on Get started:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的页面上，点击“开始”：
- en: '![](img/3e1b8287-9eb3-4357-8646-8985b0231315.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e1b8287-9eb3-4357-8646-8985b0231315.png)'
- en: Getting started page for ECS
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: ECS的入门页面
- en: 'Check only the Deploy a sample application onto an Amazon ECS Cluster option.
    Then click on Continue:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅选择“在Amazon ECS集群上部署示例应用程序”选项。然后点击“继续”：
- en: '![](img/78975c46-cf2e-4a65-b319-5de753fd9ecc.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/78975c46-cf2e-4a65-b319-5de753fd9ecc.png)'
- en: First page for ECS creation
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 创建ECS的第一页
- en: 'Fill in the blanks as follows, paying special attention to the Image field,
    where you will use our prebuilt image:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式填写空白，特别关注“镜像”字段，您将使用我们的预构建镜像：
- en: '![](img/310023da-bd63-4c06-b353-d40afdc23e77.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/310023da-bd63-4c06-b353-d40afdc23e77.png)'
- en: Task definition page
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义页
- en: 'Scroll down the page and set Port mappings as shown here. Click on Continue:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动页面并设置端口号映射，如图所示。点击“继续”：
- en: '![](img/406548fd-4414-4957-81cd-63009a81ce0e.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/406548fd-4414-4957-81cd-63009a81ce0e.png)'
- en: Port mappings
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 端口号映射
- en: 'Give the service a name and set the Desired number of tasks to `1`. Click on
    Next step:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给服务起一个名字，并将期望的任务数量设置为`1`。点击“下一步”：
- en: '![](img/10f8d9c5-61fb-4b46-91d8-c0a5f1363778.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10f8d9c5-61fb-4b46-91d8-c0a5f1363778.png)'
- en: Service and network configuration
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 服务和网络配置
- en: 'Configure the cluster as shown here:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置集群：
- en: '![](img/1034a353-326b-4f3e-b9d3-f7bbfa20e541.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1034a353-326b-4f3e-b9d3-f7bbfa20e541.png)'
- en: Cluster configuration
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 集群配置
- en: 'Scroll down to the page and click on Launch instance & run service:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面并点击启动实例 & 运行服务：
- en: '![](img/ceb6e961-ebea-435a-be91-d2acf6dcba09.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ceb6e961-ebea-435a-be91-d2acf6dcba09.png)'
- en: Launch instance
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 启动实例
- en: 'You can follow the status of the process on the following page. When it''s
    done, click on the View service button:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在以下页面上跟踪进程的状态。完成后，点击查看服务按钮：
- en: '![](img/151d54ff-dfb2-4dd7-9e33-59fb2a516386.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/151d54ff-dfb2-4dd7-9e33-59fb2a516386.png)'
- en: Launch status
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 启动状态
- en: 'You''ll see the details of your service on the following page. Click on the
    default > label:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将在以下页面上看到你的服务详情。点击默认 > 标签：
- en: '![](img/70f03884-2907-498c-af5c-967e15650dcd.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/70f03884-2907-498c-af5c-967e15650dcd.png)'
- en: Cluster information
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 集群信息
- en: 'On the page that opens, you can see more details about the cluster:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的页面上，你可以看到更多关于集群的详细信息：
- en: '![](img/6794bfaa-b88e-4a72-8ac1-43c28fbfe6d7.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6794bfaa-b88e-4a72-8ac1-43c28fbfe6d7.png)'
- en: Cluster details
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 集群详情
- en: 'Click on the Tasks tab to see information about the tasks and the containers
    created:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任务标签以查看关于任务和创建的容器的信息：
- en: '![](img/38147487-2d04-422c-9e83-7ff5f1fac0a9.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38147487-2d04-422c-9e83-7ff5f1fac0a9.png)'
- en: Container tasks
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 容器任务
- en: 'Click on the Container Instance label to see details about the container that
    has been created:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击容器实例标签以查看已创建容器的详细信息：
- en: '![](img/5113f052-7a95-4e09-8681-076568961eb9.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5113f052-7a95-4e09-8681-076568961eb9.png)'
- en: Container details
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 容器详情
- en: 'Check the Public IP label and copy the IP. It''s automatically mapped to the
    `8080` port. Use `http://[public-ip]/app` to try it:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查公共IP标签并复制IP。它自动映射到`8080`端口。使用`http://[public-ip]/app`来尝试：
- en: '![](img/c4448c68-7c4d-4765-ab6d-2781088ebaa2.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c4448c68-7c4d-4765-ab6d-2781088ebaa2.png)'
- en: Test page for our application
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的测试页面
- en: If you can see the same screenshot, that's great! You are now orchestrating
    your container in AWS.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到了相同的截图，那就太好了！你现在正在AWS中编排你的容器。
- en: How it works...
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The reason why it's so simple is because you are using a platform that's designed
    to make it simple. So, all the heavy lifting that you'd make to do it in your
    own infrastructure is done by the platform.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 它之所以如此简单，是因为你正在使用一个旨在使其简化的平台。因此，你原本需要在自己的基础设施中完成的繁重工作，现在都由平台来完成。
- en: There's more...
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The reason why you should use a provider to orchestrate your containers in the
    cloud is not only because of the ease of creating services, but also because the
    platform will take care of keeping it up and running.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用提供商在云中编排你的容器的原因，不仅是因为创建服务的便捷性，还因为平台将负责保持其运行。
- en: So if your container goes wrong and needs to be stopped, restarted, or even
    killed and recreated, the platform will do it automatically.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你的容器出现错误并需要停止、重启，甚至杀死并重新创建，平台将自动完成这些操作。
