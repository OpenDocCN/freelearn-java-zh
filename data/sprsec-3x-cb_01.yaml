- en: Chapter 1. Basic Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。基本安全
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: JAAS-based security authentication on JSPs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于JAAS的JSP的安全身份验证
- en: JAAS-based security authentication on servlet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于JAAS的servlet安全身份验证
- en: Container-based basic authentication on servlet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于servlet的基本容器身份验证
- en: Form-based authentication on servlet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于servlet的基于表单的身份验证
- en: Form-based authentication with open LDAP and servlet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开放LDAP和servlet进行基于表单的身份验证
- en: Hashing/Digest Authentication on servlet
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在servlet上进行哈希/摘要身份验证
- en: Basic authentication for JAX-WS and JAX-RS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-WS和JAX-RS的基本身份验证
- en: Enabling and disabling the file listing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用和禁用文件列表
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Authentication and authorization has become a major part of all web applications.
    Authentication involves checking who is accessing the application. Authorization
    is a process of checking the access rights of the user. In the native approach,
    we usually store the user's information in the database and write the code in
    the application. We also create roles for the user and we do the mapping. Here,
    it is tightly coupled with the application because we have to rewrite the entire
    code when we connect to a new database or use any other tools such as LDAP or
    Kerbose. But there are advance options to handle authentication and authorization.
    J2EE container provides different ways to authenticate the user by configuring
    the XML files. We can classify authentication into two types, that is, the container-based
    authentication and authorization and application level authentication and authorization.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证和授权已成为所有Web应用程序的重要组成部分。身份验证涉及检查谁正在访问应用程序。授权是检查用户访问权限的过程。在本机方法中，我们通常将用户的信息存储在数据库中，并在应用程序中编写代码。我们还为用户创建角色并进行映射。在这里，它与应用程序紧密耦合，因为当我们连接到新数据库或使用其他工具（如LDAP或Kerbose）时，我们必须重写整个代码。但是有高级选项来处理身份验证和授权。
    J2EE容器通过配置XML文件提供了不同的用户身份验证方式。我们可以将身份验证分类为两种类型，即基于容器的身份验证和授权以及应用程序级别的身份验证和授权。
- en: J2EE container provides interfaces and classes to provide authentication. In
    this chapter, we can see how we authenticate the user using JAAS, basic authentication,
    and form-based authentication.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: J2EE容器提供接口和类来提供身份验证。在本章中，我们将看到如何使用JAAS，基本身份验证和基于表单的身份验证来对用户进行身份验证。
- en: In this book, we have used JAAS because it a standard framework for authentication.
    JAAS works on the **PAM** (**pluggable authentication module**) framework.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用了JAAS，因为它是身份验证的标准框架。 JAAS基于**PAM**（可插入身份验证模块）框架工作。
- en: 'Authentication and authorization can be provided in the following ways:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证和授权可以通过以下方式提供：
- en: 'Basic authentication: In this technique the application server gives a login
    form with a username and password textbox, so you don''t have to create a login
    page yourself. You will also know the caller identity.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本身份验证：在这种技术中，应用程序服务器提供带有用户名和密码文本框的登录表单，因此您无需自己创建登录页面。您还将知道调用者身份。
- en: 'Form-based authentication: In this technique the container handles the authentication,
    but the login form is provided by the user as a JSP page.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于表单的身份验证：在这种技术中，容器处理身份验证，但登录表单由用户提供为JSP页面。
- en: 'Digest-based authentication: In this method user credentials are hashed with
    certain algorithms.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于摘要的身份验证：在这种方法中，用户凭据使用特定算法进行哈希处理。
- en: 'Certificate-based authentication: In this technique the client and the server
    exchange certificates to verify their identity. Achieving an SSL certificate makes
    the data transfer over the network secure.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于证书的身份验证：在这种技术中，客户端和服务器交换证书以验证其身份。获得SSL证书使网络上的数据传输安全。
- en: JAAS-based security authentication on JSPs
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于JAAS的JSP的安全身份验证
- en: The deployment descriptor is the main configuration file of all the web applications.
    The container first looks out for the deployment descriptor before starting any
    application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 部署描述符是所有Web应用程序的主要配置文件。容器在启动任何应用程序之前首先查找部署描述符。
- en: The deployment descriptor is an XML file, `web.xml`, inside the `WEB-INF` folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 部署描述符是`WEB-INF`文件夹中的XML文件`web.xml`。
- en: If you look at the XSD of the `web.xml` file, you can see the security-related
    schema.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查看`web.xml`文件的XSD，可以看到与安全相关的模式。
- en: 'The schema can be accessed using the following URL: [http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd](http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下URL访问模式：[http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd](http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd)。
- en: 'The following is the schema element available in the XSD:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是XSD中可用的模式元素：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'You will need the following to demonstrate authentication and authorization:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下内容来演示身份验证和授权：
- en: JBoss 7
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss 7
- en: Eclipse Indigo 3.7
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse Indigo 3.7
- en: Create a dynamic web project and name it `Security Demo`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态Web项目，命名为`Security Demo`
- en: Create a package, `com.servlets`
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包，`com.servlets`
- en: Create an XML file in the `WebContent` folder, `jboss-web.xml`
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`WebContent`文件夹中创建一个XML文件，`jboss-web.xml`
- en: Create two JSP pages, `login.jsp` and `logoff.jsp`
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建两个JSP页面，`login.jsp`和`logoff.jsp`
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to achieve JAAS-based security for JSPs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以实现JSP的基于JAAS的安全性：
- en: 'Edit the `login.jsp` file with the input fields `j_username`, `j_password`,
    and submit it to `SecurityCheckerServlet`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`login.jsp`文件，使用输入字段`j_username`，`j_password`，并将其提交给`SecurityCheckerServlet`：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `j_username` and `j_password` are the indicators of using form-based authentication.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`j_username`和`j_password`是使用基于表单的身份验证的指示符。'
- en: 'Let''s modify the `web.xml` file to protect all the files that end with `.jsp`.
    If you are trying to access any JSP file, you would be given a login form, which
    in turn calls a `SecurityCheckerServlet` file to authenticate the user. You can
    also see role information is displayed. Update the `web.xml` file as shown in
    the following code snippet. We have used `2.5 xsd`. The following code needs to
    be placed in between the `webapp` tag in the `web.xml` file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们修改`web.xml`文件以保护所有以`.jsp`结尾的文件。如果您尝试访问任何JSP文件，您将收到一个登录表单，该表单反过来调用`SecurityCheckerServlet`文件对用户进行身份验证。您还可以看到角色信息被显示。按照以下代码片段中所示更新`web.xml`文件。我们使用了`2.5
    xsd`。以下代码需要放置在`web.xml`文件中的`webapp`标签之间：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'JAAS Security Checker and Credential Handler: Servlet is a security checker.
    Since we are using JAAS, the standard framework for authentication, in order to
    execute the following program you need to import `org.jboss.security.SimplePrincipal`
    and `org.jboss.security.auth.callback.SecurityAssociationHandle` and add all the
    necessary imports. In the following `SecurityCheckerServlet`, we are getting the
    input from the JSP file and passing it to the `CallbackHandler`.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JAAS安全检查器和凭证处理程序：Servlet是一个安全检查器。由于我们正在使用JAAS，这是用于身份验证的标准框架，为了执行以下程序，您需要导入`org.jboss.security.SimplePrincipal`和`org.jboss.security.auth.callback.SecurityAssociationHandle`并添加所有必要的导入。在以下的`SecurityCheckerServlet`中，我们从JSP文件获取输入并将其传递给`CallbackHandler`。
- en: We are then passing the Handler object to the `LoginContext` class which has
    the `login()` method to do the authentication. On successful authentication, it
    will create `Subject` and `Principal` for the user, with user details. We are
    using iterator interface to iterate the `LoginContext` object to get the user
    details retrieved for authentication.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将Handler对象传递给`LoginContext`类，该类具有`login()`方法来进行身份验证。在成功身份验证后，它将为用户创建`Subject`和`Principal`，并提供用户详细信息。我们使用迭代器接口来迭代`LoginContext`对象，以获取用于身份验证的用户详细信息。
- en: 'In the `SecurityCheckerServlet` Class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SecurityCheckerServlet`类中：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the `UserCredentialHandler` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`UserCredentialHandler`文件：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `jboss-web.xml` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`jboss-web.xml`文件中：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Other` is the name of the application policy defined in the `login-config.xml`
    file.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Other`是在`login-config.xml`文件中定义的应用程序策略的名称。'
- en: All these will be packed in as a `.war` file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些将被打包为`.war`文件。
- en: 'Configuring the JBoss Application Server. Go to `jboss-5.1.0.GA\server\default\conf\login-config.xml`
    in JBoss. If you look at the file, you can see various configurations for database
    LDAP and a simple one using the properties file, which I have used in the following
    code snippet:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置JBoss应用服务器。转到JBoss中的`jboss-5.1.0.GA\server\default\conf\login-config.xml`。如果您查看文件，您可以看到用于数据库LDAP的各种配置以及使用属性文件的简单配置，我已在以下代码片段中使用：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create the `users.properties` file in the same folder. The following is the
    `Users.properties` file with username mapped with role.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的文件夹中创建`users.properties`文件。以下是带有用户名映射角色的`Users.properties`文件。
- en: User.properties
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: User.properties
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: roles.properties
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: roles.properties
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Restart the server.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册以直接通过电子邮件接收文件。
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'JAAS consists of a set of interfaces to handle the authentication process.
    They are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: JAAS由一组接口组成，用于处理身份验证过程。它们是：
- en: The `CallbackHandler` and `Callback` interfaces
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CallbackHandler`和`Callback`接口'
- en: The `LoginModule` interface
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoginModule`接口'
- en: '`LoginContext`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoginContext`'
- en: The `CallbackHandler` interface gets the user credentials. It processes the
    credentials and passes them to `LoginModule`, which authenticates the user.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`CallbackHandler`接口获取用户凭据。它处理凭据并将它们传递给`LoginModule`，后者对用户进行身份验证。'
- en: JAAS is container specific. Each container will have its own implementation,
    here we are using JBoss application server to demonstrate JAAS.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: JAAS是特定于容器的。每个容器都将有自己的实现，这里我们使用JBoss应用服务器来演示JAAS。
- en: In my previous example, I have explicitly called JASS interfaces.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的先前的示例中，我已经明确调用了JASS接口。
- en: '`UserCredentialHandler` implements the `CallbackHandler` interfaces.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserCredentialHandler`实现了`CallbackHandler`接口。'
- en: So, `CallbackHandler`s are storage spaces for the user credentials and the `LoginModule`
    authenticates the user.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`CallbackHandler`是用户凭据和`LoginModule`的存储空间对用户进行身份验证。
- en: '`LoginContext` bridges the `CallbackHandler` interface with `LoginModule`.
    It passes the user credentials to `LoginModule` interfaces for authentication:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginContext`将`CallbackHandler`接口与`LoginModule`连接起来。它将用户凭据传递给`LoginModule`接口进行身份验证：'
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `web.xml` file defines the security mechanisms and also points us to the
    protected resources in our application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`web.xml`文件定义了安全机制，并指向我们应用程序中的受保护资源。'
- en: 'The following screenshot shows a failed authentication window:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个身份验证失败的窗口：
- en: '![How it works...](img/7525OS_01_01_new.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_01_01_new.jpg)'
- en: 'The following screenshot shows a successful authentication window:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个成功的身份验证窗口：
- en: '![How it works...](img/7525OS_01_02.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_01_02.jpg)'
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *JAAS-based security authentication on servlet* recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于servlet的JAAS安全身份验证*的方法'
- en: The *Container-based basic authentication on servlet* recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于容器的servlet基本身份验证*的方法'
- en: The *Form-based authentication on servlet* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于表单的servlet身份验证*的方法'
- en: The *Form-based authentication with open LDAP and servlet* recipe
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于表单的LDAP和servlet身份验证*的方法'
- en: The *Hashing/Digest Authentication on servlet* recipe
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在servlet上进行哈希/摘要身份验证*的方法'
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JAX-WS和JAX-RS的基本身份验证*的方法'
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*的方法'
- en: JAAS-based security authentication on servlet
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于JAAS的servlet安全身份验证
- en: The JAAS-based security authentication on servlet is an extension of JAAS-based
    security authentication for JSPs. In this section, we are demonstrating that we
    can even apply security on servlets.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 基于JAAS的servlet安全身份验证是对JSP的基于JAAS的安全身份验证的扩展。在本节中，我们演示了我们甚至可以在servlet上应用安全性。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new **Web Project** in Eclipse
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个新的**Web项目**
- en: Create a package, `com.packt.security.servlets`
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为`com.packt.security.servlets`的包
- en: Create a Servlet with name `ProtectedServlets`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为`ProtectedServlets`的Servlet
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps for JAAS-based security for servlet:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是servlet的基于JAAS的安全性步骤：
- en: 'Create a servlet and name it `ProtectedServlets`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ProtectedServlets`的servlet：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, edit the `web.xml` file to secure the servlet:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑`web.xml`文件以保护servlet：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Restart the server and access the URL: `http://localhost:8080/jaas-jboss/ProtectedServlets`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器并访问URL：`http://localhost:8080/jaas-jboss/ProtectedServlets`。
- en: You would get a login form, which will authenticate the user. The servlet is
    the protected resource, and anyone accessing the servlet will be asked to log
    in. The authentication is handled by JAAS API, which is application-server-specific.
    Each application server will have its own implementation of security.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得一个登录表单，该表单将对用户进行身份验证。Servlet是受保护的资源，任何访问该servlet的人都将被要求登录。身份验证由JAAS API处理，该API是特定于应用服务器的。每个应用服务器都将有自己的安全实现。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Container-based basic authentication on servlet* recipe
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于容器的servlet基本身份验证*食谱'
- en: The *Form-based authentication on servlet* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*servlet上的基于表单的身份验证*食谱'
- en: The *Form-based authentication with open LDAP and servlet* recipe
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用开放LDAP和servlet进行基于表单的身份验证*食谱'
- en: The *Hashing/Digest Authentication on servlet* recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在servlet上进行哈希/摘要身份验证*食谱'
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JAX-WS和JAX-RS的基本身份验证*食谱'
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*食谱'
- en: Container-based basic authentication on servlet
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于容器的servlet基本身份验证
- en: In our previous examples we used interfaces provided by JAAS to authenticate
    with `loginform.jsp`. The previous application had a custom login form design
    with authentication handled by JAAS API provided by the application server.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，我们使用了JAAS提供的接口来通过`loginform.jsp`进行身份验证。先前的应用程序具有自定义的登录表单设计，身份验证由应用服务器提供的JAAS
    API处理。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a simple web-app project
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的Web应用程序项目
- en: Create a servlet class
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个servlet类
- en: Edit the `web.xml` file for basic authentication
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑`web.xml`文件以进行基本身份验证
- en: Add a constraint to restrict the user from accessing the servlet
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加约束以限制用户访问servlet
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Now, we will see the basic authentication. The container provides the login
    form and authenticates the user and redirects the user to the servlet after authentication
    is successful. There is no login form involved.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到基本身份验证。容器提供登录表单并对用户进行身份验证，验证成功后将用户重定向到servlet。这里不涉及登录表单。
- en: 'Make the following changes in the `web.xml` file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`web.xml`文件中进行以下更改：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Export the `.war` to JBoss, restart the server, and access the servlet.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将`.war`文件导出到JBoss，重新启动服务器，并访问servlet。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the previous example the container decides the mechanism for authenticating
    the servlet by reading the `web.xml` file. Here the `<auth-method>` tag has defined
    `BASIC` as the mode of authentication. We should get a login dialog box popped
    up when we access the secured resource.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的示例中，容器通过读取`web.xml`文件决定了对servlet进行身份验证的机制。这里的`<auth-method>`标签已将`BASIC`定义为身份验证的模式。当我们访问受保护的资源时，应该会弹出一个登录对话框。
- en: 'The following screenshots show the workflow of the implementation:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了实现的工作流程：
- en: '![How it works...](img/7525OS_01_03.jpg)![How it works...](img/7525OS_01_04.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_01_03.jpg)![它是如何工作的...](img/7525OS_01_04.jpg)'
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Form-based authentication on servlet* recipe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*servlet上的基于表单的身份验证*食谱'
- en: The *Form-based authentication with open LDAP and servlet* recipe
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用开放LDAP和servlet进行基于表单的身份验证*食谱'
- en: The *Hashing/Digest Authentication on servlet* recipe
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在servlet上进行哈希/摘要身份验证*食谱'
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JAX-WS和JAX-RS的基本身份验证*食谱'
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*食谱'
- en: Form-based authentication on servlet
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: servlet上的基于表单的身份验证
- en: In the previous sections, we demonstrated the basic authentication on servlets
    and JSPs. Now let's use form-based authentication on servlets.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们演示了servlet和JSP上的基本身份验证。现在让我们在servlet上使用基于表单的身份验证。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's apply form-based authentication on servlet. You will need a simple web
    application with a servlet, a web container to handle the authentication, and
    the `web.xml` file that tells the container what to authenticate.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在servlet上应用基于表单的身份验证。您将需要一个简单的Web应用程序，其中包括一个servlet、一个Web容器来处理身份验证，以及告诉容器要进行身份验证的`web.xml`文件。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see some simple steps for implementing form-based authentication on
    servlets:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些在servlet上实现基于表单的身份验证的简单步骤：
- en: 'Create a JSP file named `Containerform.jsp`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Containerform.jsp`的JSP文件：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What do you observe in the previous code?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您在先前的代码中观察到了什么？
- en: '`action=j_security_check` is the default URL, which is recognized by the web
    container. It tells the container that it has the user credentials to be authenticated.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`action=j_security_check`是默认的URL，被Web容器识别。它告诉容器它有用户凭据需要进行身份验证。'
- en: 'Now, edit the `web.xml` file:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑`web.xml`文件：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Build the project and export the `.war` files to JBoss.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 构建项目并将`.war`文件导出到JBoss。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The previous example demonstrated the Form-based authentication. The J2EE container
    reads the `web.xml` file, the `<auth-method>` tag has the `form` attribute set.
    Then it further looks for the `login.jsp` file, which needs to be displayed to
    do form-based authentication. The `<form-error-page>` and `<form-login-page>`
    has the login file name and the error page that needs to be displayed on authentication
    failure. When the user tries to access the secured resource, the J2EE container
    redirects the request to the login page. The user credentials are submitted to
    `j_security_check` action. This action is identified by the container and does
    the authentication and authorization; on success the user is redirected to the
    secured resource and on failure the error page shows up.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的示例演示了基于表单的身份验证。J2EE容器读取`web.xml`文件，`<auth-method>`标签具有设置为`form`属性。然后它进一步寻找需要显示以进行基于表单的身份验证的`login.jsp`文件。`<form-error-page>`和`<form-login-page>`具有登录文件名和在身份验证失败时需要显示的错误页面。当用户尝试访问受保护的资源时，J2EE容器将请求重定向到登录页面。用户凭据提交给`j_security_check`操作。容器识别此操作并进行身份验证和授权；成功后，用户被重定向到受保护的资源，失败时会显示错误页面。
- en: 'The following are the screenshots of the workflow which shows the login page
    for the user and displays the user information on successful authentication:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是工作流程的屏幕截图，显示用户的登录页面，并在成功验证时显示用户信息：
- en: '![How it works...](img/7525OS_01_05.jpg)![How it works...](img/7525OS_01_06.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_01_05.jpg)![它是如何工作的...](img/7525OS_01_06.jpg)'
- en: See also
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Form-based authentication with open LDAP and servlet* recipe
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用open LDAP和servlet进行基于表单的身份验证*配方'
- en: The *Hashing/Digest Authentication on servlet* recipe
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在servlet上进行哈希/摘要身份验证*配方'
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JAX-WS和JAX-RS的基本身份验证*配方'
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*配方'
- en: Form-based authentication with open LDAP and servlet
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用open LDAP和servlet进行基于表单的身份验证
- en: In this section we will see how we can authenticate users by retrieving the
    user information stored in open LDAP and JAAS. Open LDAP, as its name suggests,
    is a free version of the lightweight user directory protocol, which allows us
    to create groups and add users to it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何通过检索存储在open LDAP和JAAS中的用户信息来对用户进行身份验证。Open LDAP，顾名思义，是轻量级用户目录协议的免费版本，允许我们创建组并向其中添加用户。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download open LDAP, create roles, groups, and user.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下载open LDAP，创建角色、组和用户。
- en: In the JBoss application server, edit the `login-config.xml` file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在JBoss应用服务器中，编辑`login-config.xml`文件。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to configure the application server to retrieve
    users from Open LDAP:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤配置应用服务器从Open LDAP检索用户：
- en: 'In the `login-config.xml` file provide the LDAP port with the URL, credentials,
    and the domain that needs to be searched to find the username and password provided
    by the application:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`login-config.xml`文件中提供LDAP端口的URL、凭据和需要搜索的域，以找到应用程序提供的用户名和密码：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `jboss-web.xml` file, we will specify the lookup name for JAAS:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`jboss-web.xml`文件中，我们将为JAAS指定查找名称：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Build and deploy the WAR on JBoss, restart the server, and access the browser.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在JBoss上构建和部署WAR，重新启动服务器，并访问浏览器。
- en: You will be prompted with a login form and JBoss authenticates the user based
    on the open LDAP credentials provided. The user is retrieved and is authorized
    with roles mentioned in the application policy. The container provides built-in
    APIs for authentication. The module `org.jboss.security.auth.spi.LdapExtLoginModule`
    handles the LDAP authentication process.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到一个登录表单，并且JBoss根据提供的open LDAP凭据对用户进行身份验证。用户被检索并根据应用程序策略中提到的角色进行授权。容器为身份验证提供了内置的API。模块`org.jboss.security.auth.spi.LdapExtLoginModule`处理LDAP身份验证过程。
- en: See also
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Hashing/Digest Authentication on servlet* recipe
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在servlet上进行哈希/摘要身份验证*配方'
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JAX-WS和JAX-RS的基本身份验证*配方'
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*配方'
- en: Hashing/Digest authentication on servlet
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在servlet上进行哈希/摘要身份验证
- en: In the previous authentication mechanisms, the client sends the user credentials
    and the container validates.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的身份验证机制中，客户端发送用户凭据，容器进行验证。
- en: The client doesn't attempt to encrypt the password.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端不尝试加密密码。
- en: So, our application is still not safe and is vulnerable to attacks.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的应用程序仍然不安全，容易受到攻击。
- en: This section is about passing an encrypted user credential to the server and
    telling the server which encryption algorithm can be used to decrypt the data.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是关于向服务器传递加密的用户凭据，并告诉服务器可以使用哪种加密算法来解密数据。
- en: JBoss is the application server that I have chosen to demonstrate it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss是我选择来演示的应用服务器。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Modify `Login-config.xml`
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`Login-config.xml`
- en: Create `encrypt-users. properties`
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`encrypt-users. properties`
- en: Create `encrypt-roles. properties`
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`encrypt-roles. properties`
- en: How to do it....
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做....
- en: 'Modify the `web.xml` file:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`web.xml`文件：
- en: '[PRE17]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, modify the `jboss-web.xml` file. The realm name is used for hashing:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，修改`jboss-web.xml`文件。领域名称用于哈希：
- en: '[PRE18]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Modify the `login-config.xml` file
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`login-config.xml`文件
- en: '[PRE19]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we need to tell JBoss to encrypt the user''s password. To do that perform
    the following steps:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要告诉JBoss加密用户的密码。要做到这一点，执行以下步骤：
- en: Go to `E:\JBOSS5.1\jboss-5.1.0.GA\common\lib`
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到`E:\JBOSS5.1\jboss-5.1.0.GA\common\lib`
- en: Open `jbosssx-server.jar`
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开`jbosssx-server.jar`
- en: Go to the folder where JBoss is installed. I have installed JBoss on my `E:`
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到安装JBoss的文件夹。我已经在我的`E:`上安装了JBoss
- en: Now on the command line, write `cd E:\JBOSS5.1\jboss-5.1.0.GA>`
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在命令行上，写`cd E:\JBOSS5.1\jboss-5.1.0.GA>`
- en: 'And then paste the following command: `java -cp client/jboss-logging-spi.jar;common/lib/jbosssx-server.jar
    org.jboss.security.auth.spi.RFC2617Digest anjana "PACKTSecurity" role1`![How to
    do it....](img/7525OS_01_07.jpg)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后粘贴以下命令：`java -cp client/jboss-logging-spi.jar;common/lib/jbosssx-server.jar
    org.jboss.security.auth.spi.RFC2617Digest anjana "PACKTSecurity" role1`![如何做...](img/7525OS_01_07.jpg)
- en: 'Now edit `Encrypt-users. properties`:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在编辑`Encrypt-users. properties`：
- en: '[PRE20]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Encrypt roles and update `roles.properties`
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密角色并更新`roles.properties`
- en: How it works...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The previous example demonstrates the digest authentication mechanism. The password
    given in the J2EE container is encrypted using the MD5 algorithm. The container
    decrypts it and verifies the user credentials against the decrypted password.
    The authentication mechanism is `digest` and the container pops up a login dialog
    box for the digest mechanism similar to the basic authentication mechanism.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例演示了摘要身份验证机制。在J2EE容器中给定的密码使用MD5算法进行加密。容器对其进行解密，并根据解密后的密码验证用户凭据。身份验证机制是`digest`，容器弹出一个与基本身份验证机制类似的摘要机制登录对话框。
- en: 'The following screenshot shows the workflow:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了工作流程：
- en: '![How it works...](img/7525OS_01_08.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_01_08.jpg)'
- en: It behaves like basic authentication, but uses the encrypted password along
    with the realm name to decrypt.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 它的行为类似于基本身份验证，但使用加密密码以及领域名称进行解密。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JAX-WS和JAX-RS的基本身份验证*配方'
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*配方'
- en: Basic authentication for JAX-WS and JAX-RS
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAX-WS和JAX-RS的基本身份验证
- en: The authentication configuration remains the same for JAX-WS and JAX-RS.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-WS和JAX-RS的身份验证配置保持不变。
- en: We need to give the JAX-WS or JAX-RS URL in `<web-resource collection>`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`<web-resource collection>`中给出JAX-WS或JAX-RS URL。
- en: '`Auth_type` can be basic. The container would come with a form for the user
    to enter the username and password.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth_type`可以是基本的。容器将提供一个表单，供用户输入用户名和密码。'
- en: '**Authentication handled by container**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**由容器处理的身份验证**'
- en: We will first create a web service and then make the container handle the security
    on it.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个Web服务，然后让容器处理其安全性。
- en: Let's create an interface which will expose the `service` method and then declare
    an `implementation` class.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个将公开`service`方法的接口，然后声明一个`implementation`类。
- en: Let's use Tomcat 6.0 to demonstrate this.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Tomcat 6.0来演示这一点。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In Eclipse-Indigo, create a dynamic web project
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse-Indigo中，创建一个动态Web项目
- en: 'Server: Tomcat 6'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器：Tomcat 6
- en: 'JARs to be added to Tomcat `lib` folder: [https://jax-ws.java.net/2.2.7/](https://jax-ws.java.net/2.2.7/)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加到Tomcat `lib`文件夹的JAR文件：[https://jax-ws.java.net/2.2.7/](https://jax-ws.java.net/2.2.7/)
- en: Download the project and copy the `lib` folder
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载项目并复制`lib`文件夹
- en: How to do it...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create an `interface` and an `implementation` class. Add the `@WebService`
    annotations to it. Create a package named `com.packt.ws`. Create an interface
    named `EmployeeProfile` and an `implementation` Class:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`interface`和一个`implementation`类。为其添加`@WebService`注释。创建一个名为`com.packt.ws`的包。创建一个名为`EmployeeProfile`的接口和一个`implementation`类：
- en: 'Interface:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接口：
- en: '[PRE21]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Implementation:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 实施：
- en: '[PRE22]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Also add the `sun-jaxws.xml` file under `WEB-INF`
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还在`WEB-INF`下添加`sun-jaxws.xml`文件
- en: '[PRE23]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Modify the `web.xml` file as shown:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`web.xml`文件如下所示：
- en: '[PRE24]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Authenticate the web services. Edit the `tomcat-users.xml` file and add this
    to `server.xml`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Web服务。编辑`tomcat-users.xml`文件并将其添加到`server.xml`：
- en: '[PRE25]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By accessing the following URL, you should be prompted for a login.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问以下URL，您应该会被提示登录。
- en: Each web service URL is authenticated.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Web服务URL都经过身份验证。
- en: You will be prompted with a login page (`http://localhost:8080/EmployeeProfile/employee`)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示输入登录页面（`http://localhost:8080/EmployeeProfile/employee`）
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Enabling and disabling the file listing* recipe
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启用和禁用文件列表*配方'
- en: Enabling and disabling the file listing
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用和禁用文件列表
- en: It's generally not advisable to enable directory listing in your application.
    By default directory listing will be disabled on JBoss.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不建议在应用程序中启用目录列表。默认情况下，JBoss上将禁用目录列表。
- en: If it is enabled, go to your JBoss installation folder.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了，转到您的JBoss安装文件夹。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will help to disable and enable file listing in the application
    server:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助在应用程序服务器中禁用和启用文件列表：
- en: Browse to the path `\server\default\deployers\jbossweb.deployer`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到路径`\server\default\deployers\jbossweb.deployer`。
- en: Open `web.xml` in the `WEB-INF` folder.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WEB-INF`文件夹中打开`web.xml`。
- en: Set the listing to `false`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列表设置为`false`。
- en: '[PRE26]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Struts2* recipe
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Spring Security with Struts2*配方'
