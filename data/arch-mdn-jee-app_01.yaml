- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: Compared to the past, we see a lot of new demands in enterprise software. It
    is no longer sufficient to just develop some piece of software and deploy it to
    an application server. Or maybe it never was.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与过去相比，我们看到企业软件中有许多新的需求。仅仅开发一些软件并将其部署到应用服务器上已经不再足够。或者也许从来都不够。
- en: New demands in enterprise systems
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业系统的新需求
- en: The world moves faster than ever. And *moving fast* is one of the most important
    criteria of today's IT companies. We see companies that can adapt to the real
    world and the customer's needs with high velocity. The expected time to market
    of features has shrunk from years and months to weeks and less. In order to cope
    with this, companies not only need to introduce new technology or *throw more
    money* at their business problem, but also rethink and refactor the way they operate
    at the core of their IT.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 世界比以往任何时候都发展得更快。*快速行动*是当今IT公司最重要的标准之一。我们看到能够以高速度适应现实世界和客户需求的公司。新功能的上市时间已经从数年和数月缩短到数周甚至更少。为了应对这种情况，公司不仅需要引入新技术或向业务问题投入更多资金，还需要重新思考和重构他们在IT核心的运营方式。
- en: What does *move fast* mean in this context? What aspect does this include? And
    which methods and technology support this?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，*快速行动*意味着什么？这包括哪些方面？以及哪些方法和技术支持这一点？
- en: Moving fast is all about quickly adapting to the needs of the market and customers.
    If a new feature is desired or looks promising, how long does it take to get from
    the initial idea to the feature being in the user's hands? If new infrastructure
    is required, how long does it take from that decision to the running hardware?
    And do not forget, if a certain piece of software is developed with all that velocity,
    is there automated quality control in place that ensures everything will work
    as expected and not break the existing functionality?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 快速行动就是快速适应市场和客户的需求。如果需要或看起来有希望的新功能，从最初的想法到用户手中的功能需要多长时间？如果需要新的基础设施，从决策到运行硬件需要多长时间？而且，不要忘记，如果以如此快的速度开发软件，是否有自动质量控制来确保一切按预期工作，不会破坏现有功能？
- en: In software development, most of these questions lead to Continuous Delivery
    and automation. Software that is being developed needs to be built, tested, and
    shipped in an automated, fast, reliable, and reproducible way. A reliable, automated
    process not only leads to quicker turnarounds but ultimately higher quality. Automated
    quality control, such as software tests, are part of the process. In modern software
    development, Continuous Delivery, automation, and proper testing are some of the
    most important principles.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，这些问题大多导致持续交付和自动化。正在开发的软件需要以自动化、快速、可靠和可重复的方式进行构建、测试和发布。可靠的自动化流程不仅能够加快周转速度，而且最终能够提高质量。自动化质量控制，如软件测试，是流程的一部分。在现代软件开发中，持续交付、自动化和适当的测试是最重要的原则之一。
- en: Traditionally, infrastructure was a big bottleneck in most companies. Smaller
    companies often struggled to provide new infrastructure with a limited budget.
    Bigger companies mostly fail to implement fast and productive processes. For big
    corporations, in most of the cases the issue is not the budget but the implementation
    of the processes. It is not untypical to wait days and weeks for new infrastructure,
    due to approvals and overly complex processes that technically could have been
    finished in a matter of minutes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，基础设施在大多数公司中都是一个巨大的瓶颈。较小的公司常常在有限的预算下难以提供新的基础设施。较大的公司大多无法实施快速且高效的过程。对于大型企业来说，在大多数情况下，问题不在于预算，而在于过程的实施。由于审批和过于复杂的流程，技术上一分钟就能完成的事情，却可能需要等待数天甚至数周才能完成新的基础设施，这种情况并不少见。
- en: Therefore, application infrastructure and how it is designed is an important
    aspect. [Chapter 5](a24f88d4-1af2-4746-91c9-9717d077dd27.xhtml), *Container and
    Cloud Environments with Java EE*, will show you the topic of modern cloud environments.
    Actually, we will see that it's not so much about whether cloud service providers
    are being used. Fast and productive processes certainly can be implemented with
    on-premises hardware. Rather, it is more a question of whether processes are implemented
    properly, using well-suited technologies.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，应用程序基础设施及其设计是一个重要的方面。[第5章](a24f88d4-1af2-4746-91c9-9717d077dd27.xhtml)，*使用Java
    EE的容器和云环境*，将向您展示现代云环境的话题。实际上，我们将看到这更多不是关于是否使用云服务提供商的问题。使用本地硬件，可以实施快速高效的过程。更重要的是，这是一个关于是否正确实施过程，使用合适的技术的问题。
- en: Modern infrastructure needs to be set up in a matter of minutes, in an automated,
    fast, reproducible, and reliable way. It should adapt to changing demands without
    great effort. To meet this criterion, infrastructure should be defined as code,
    either with procedural scripts or in declarative descriptors. We will see how
    infrastructure as code impacts software development workflows and which technologies
    support it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现代基础设施需要以自动化、快速、可重复和可靠的方式在几分钟内设置完成。它应该能够轻松适应变化的需求。为了满足这一标准，基础设施应该被定义为代码，无论是通过程序脚本还是声明性描述符。我们将看到基础设施即代码如何影响软件开发工作流程以及哪些技术支持它。
- en: These demands will impact the way teams operate. It is no longer sufficient
    for development teams to *just develop* and let the operational teams deal with
    running the software and facing potential issues on production. This practice
    always leads to tensions and finger pointing once critical errors occurred in
    production. Instead, the common goal should be to deliver software that fulfills
    a purpose. By defining the required infrastructure and configuration as code,
    development and operations teams will naturally move together. This **DevOps**
    movement, a compound of development and operations, aims toward accountability
    of the software team as a whole. Everybody involved is responsible for customers
    being able to use proper software. This is more an organizational challenge than
    a technical one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些需求将影响团队的工作方式。对于开发团队来说，仅仅进行开发并让运维团队处理软件运行和面对生产中的潜在问题已经不再足够。一旦生产中出现关键错误，这种做法总是会导致紧张和互相指责。相反，共同的目标应该是交付满足特定目的的软件。通过将所需的基础设施和配置定义为代码，开发和运维团队将自然地协同工作。这种**DevOps**运动，即开发和运维的结合，旨在使整个软件团队承担起责任。所有参与人员都对客户能够使用适当的软件负责。这更多的是一个组织挑战，而不是技术挑战。
- en: On a technical aspect, Continuous Delivery, as well as the **12-factor** and
    **cloud native** *buzzwords* attempted to meet these demands. The 12-factor and
    cloud native approaches describe how modern enterprise applications should be
    developed. They define requirements, not only for the development processes but
    also for the way applications are run. We will look into these approaches, modern
    cloud environments, and where Java EE supports us, later in this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术方面，持续交付以及**12因素**和**云原生**等**热门词汇**试图满足这些需求。12因素和云原生方法描述了现代企业应用应该如何开发。它们不仅定义了开发过程的要求，还定义了应用程序运行的方式。我们将在本书的后续部分探讨这些方法、现代云环境以及Java
    EE如何支持我们。
- en: Modern way of realizing enterprise systems
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代企业系统实现方式
- en: Now we will look at how enterprise software projects are being developed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探讨企业软件项目是如何开发的。
- en: Following the approach of meeting the needs of real-world customers, we will
    face the question of the purpose of the application that we want to develop. The
    motivations and purposes of the enterprise systems need to be clear before immediately
    going into technology details. Otherwise, software is just being developed for
    the sake of developing software. Sadly, this is the case way too often. By focusing
    on business logic and the principles of *Domain-Driven Design*, as wonderfully
    described in the book by *Eric Evans*, we will ensure that the software we are
    building will meet the business demands.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循满足现实世界客户需求的方法，我们将面临我们想要开发的应用程序目的的问题。在立即进入技术细节之前，企业系统需要明确其动机和目的。否则，软件只是为了开发而开发。遗憾的是，这种情况太过常见。通过关注业务逻辑和*领域驱动设计*的原则，正如*埃里克·埃文斯*在书中精彩描述的那样，我们将确保我们构建的软件将满足业务需求。
- en: Only after the application's purpose and responsibility is clear to the stakeholders,
    can we focus on the technological aspects. Teams should favor technologies that
    can not only implement the business use cases appropriately but also reduce the
    amount of work and overhead. Developers should be able to focus on the business,
    not the framework and technology. Good frameworks support solving business problems
    in a lean way and don't want the developer's attention themselves.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当利益相关者对应用程序的目的和责任有明确的认识后，我们才能专注于技术方面。团队应优先考虑那些不仅能够适当地实现业务用例，还能减少工作量和管理开销的技术。开发者应能够专注于业务，而不是框架和技术。好的框架支持以精简的方式解决业务问题，并且不会分散开发者的注意力。
- en: The chosen technology should also support productive development workflows as
    much as possible. This not only includes automation and fast development turnarounds
    but also the ability to embrace modern infrastructure, such as Linux containers.
    In [Chapter 4](f0a49441-e411-49c4-a4b6-c6193ba36094.xhtml), *Lightweight Java
    EE*, and [Chapter 5](a24f88d4-1af2-4746-91c9-9717d077dd27.xhtml), *Container and
    Cloud Environments with Java EE*, we will have a closer look into the nuts and
    bolts of modern environments and how Java EE supports them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 选择的技术应尽可能支持高效的开发工作流程。这不仅包括自动化和快速的开发周期，还包括能够适应现代基础设施，例如Linux容器。在第4章[轻量级Java EE](f0a49441-e411-49c4-a4b6-c6193ba36094.xhtml)和第5章[Java
    EE的容器和云环境](a24f88d4-1af2-4746-91c9-9717d077dd27.xhtml)中，我们将更深入地探讨现代环境的核心要素以及Java
    EE如何支持这些环境。
- en: Relevance of Java EE in modern systems
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE在现代系统中的相关性
- en: Let's talk about Java EE since this is the topic of this book and it is relevant
    in enterprise systems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 既然这是本书的主题，并且与企业系统相关，让我们来谈谈Java EE。
- en: Java EE and J2EE are being used heavily, especially in bigger companies. One
    of the advantages was always that the platform consists of standards that guarantee
    to be backwards compatible with older versions. Even old J2EE applications are
    guaranteed to still function in the future. This was always a big benefit for
    companies that are planning for the long term. Applications that are developed
    against the Java EE API can run on all Java EE application servers. Vendor-independent
    applications enable companies to build future-proof software that doesn't lock
    it into a specific solution. This turned out to be a sound decision that ultimately
    led to a mindset of the enterprise industry that standards, or de facto standards
    which everybody agrees upon, improve the overall situation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE和J2EE被广泛使用，尤其是在大型公司中。其优势之一始终是平台由一系列标准组成，这些标准保证了与旧版本的向后兼容性。即使是旧的J2EE应用程序也保证在未来仍能正常工作。这对那些长期规划的公司来说一直是一个巨大的好处。针对Java
    EE API开发的应用程序可以在所有Java EE应用服务器上运行。供应商无关的应用程序使公司能够构建未来兼容的软件，而不会将其锁定在特定解决方案中。这最终证明是一个明智的决定，最终导致了企业行业的一种心态，即标准，或大家普遍认同的事实标准，可以改善整体状况。
- en: Compared to the J2EE world, a lot has changed in Java EE. The programming model
    is totally different, much leaner, and more productive. This was drastically changed
    when the name switched from J2EE to Java EE 5, and especially since EE 6\. We
    will have a look at the modern way of developing Java enterprise in [Chapter 3](329094a0-f41b-4ad1-b05e-cd52c4bb9e42.xhtml),
    *Implementing Modern Java Enterprise Applications*. We will see what architectural
    approaches and programming models are being used and how the platform leverages
    development productivity much more than in the past. Hopefully, the idea of why
    Java EE now provides a modern solution to develop enterprise applications will
    become clear.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与J2EE世界相比，Java EE发生了很大变化。编程模型完全不同，更加精简，且更高效。当名称从J2EE更改为Java EE 5时，这种变化尤为显著，尤其是在EE
    6之后。在第3章[实现现代Java企业应用](329094a0-f41b-4ad1-b05e-cd52c4bb9e42.xhtml)中，我们将探讨现代开发Java企业应用的方法。我们将看到正在使用的架构方法和编程模型，以及平台如何比以往更多地提高开发效率。希望这样可以使大家明白为什么Java
    EE现在为企业应用开发提供了一种现代解决方案。
- en: Right now, bringing this message out to the industry is actually more of a marketing
    and political challenge than a technical one. We still see tons of developers
    and architects who still consider Java EE to be the cumbersome, heavyweight enterprise
    solution of the J2EE age, which required a lot of time, effort, and XML. **Enterprise
    JavaBeans** (**EJB**), as well as application servers, have a particularly bad
    reputation due to their past. This is why a lot of engineers are biased toward
    that technology. Compared to other enterprise solutions, Java EE never saw much
    marketing targeted at developers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，将这一信息传达给行业实际上更多的是一个营销和政治挑战，而不是技术挑战。我们仍然看到许多开发者和架构师仍然认为 Java EE 是 J2EE 时代的笨重、重量级企业解决方案，它需要大量的时间、精力和
    XML。**企业 JavaBeans**（**EJB**）以及应用程序服务器，由于过去的经历，特别有坏名声。这就是为什么许多工程师对该技术有偏见。与其他企业解决方案相比，Java
    EE 从来没有看到很多针对开发者的营销。
- en: In [Chapter 4](f0a49441-e411-49c4-a4b6-c6193ba36094.xhtml), *Lightweight Java
    EE*, we will see why modern Java EE is actually one of the most lightweight enterprise
    solutions. We will define the term *lightweight* aspects and see why the Java
    EE platform is more relevant than ever, especially in modern cloud and container
    environments. The impression the IT industry has of a particular technology is
    important for its success. I hope this chapter will shed some light into this
    topic.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](f0a49441-e411-49c4-a4b6-c6193ba36094.xhtml)《轻量级 Java EE》中，我们将看到为什么现代
    Java EE 实际上是最轻量级的企业解决方案之一。我们将定义“轻量级”这一术语，并了解为什么 Java EE 平台比以往任何时候都更加相关，尤其是在现代云和容器环境中。特定技术给
    IT 行业留下的印象对其成功至关重要。我希望这一章能对这个话题提供一些启示。
- en: Companies have usually chosen Java EE mostly because of its reliability and
    backwards compatibility. I personally favor Java EE because of its productivity
    and ease of use. In [Chapter 4](f0a49441-e411-49c4-a4b6-c6193ba36094.xhtml), *Lightweight
    Java EE*, and [Chapter 5](a24f88d4-1af2-4746-91c9-9717d077dd27.xhtml), *Container
    and Cloud Environments with Java EE*, we will cover more about this. In this book,
    I would like to show the readers why Java EE is a solution well-suited to today's
    enterprise demands. I will also show the technologies and standards, not in every
    detail, but rather how they are integrated with each other. I believe that focusing
    on the integrational part leads to a better understanding in how to effectively
    craft enterprise applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 公司通常选择 Java EE 主要是因为其可靠性和向后兼容性。我个人偏爱 Java EE，因为它具有高效性和易用性。在[第 4 章](f0a49441-e411-49c4-a4b6-c6193ba36094.xhtml)《轻量级
    Java EE》和[第 5 章](a24f88d4-1af2-4746-91c9-9717d077dd27.xhtml)《Java EE 的容器和云环境》中，我们将更详细地介绍这一点。在这本书中，我想向读者展示为什么
    Java EE 是一个非常适合当今企业需求的解决方案。我还会展示技术和标准，虽然不是每个细节，但更多的是它们是如何相互整合的。我相信，关注整合部分有助于更好地理解如何有效地构建企业应用程序。
- en: Java EE 8 update and roadmap
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE 8 更新和路线图
- en: Let's have a very high-level overview of what has happened in Java EE version
    8\. The goal of this version is to improve the developer's experience even more,
    to streamline the API usage further, and to make Java EE ready for new demands
    in cloud environments. We saw two completely new JSRs, **JSON-B** (Java API for
    JSON Binding) and **Security**, together with improvements in existing standards.
    In particular, introducing JSON-B simplifies the integration of JSON HTTP APIs
    in a vendor-independent way.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们非常简要地概述一下 Java EE 8 版本中发生的事情。这个版本的目标是进一步提升开发者的体验，进一步简化 API 的使用，并使 Java EE
    能够满足云环境中的新需求。我们看到了两个全新的 JSR，**JSON-B**（Java API for JSON Binding）和**安全**，以及现有标准的改进。特别是，引入
    JSON-B 简化了以供应商无关的方式集成 JSON HTTP API。
- en: The direction of Java EE is to improve the development of enterprise applications
    in regard to modern environments and circumstances. It turns out that modern environments
    are not only compatible with Java EE but encourage approaches that have been part
    of the platform for years. Examples are the separation of the API from the implementation,
    or application server monitoring.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 的方向是改善现代环境和情况下企业应用程序的开发。结果是，现代环境不仅与 Java EE 兼容，而且鼓励了多年来一直是平台一部分的方法。例如，API
    与实现的分离，或应用程序服务器的监控。
- en: On the long-term roadmap, there is better support for modern monitoring, health-checks,
    and resilience. Currently, these aspects have to be integrated in a few lines
    of codes, as we will see in later chapters. The long-term goal is to make that
    integration more straightforward. Java EE aims to let developers focus on what
    they should focus on - solving business problems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在长期路线图中，对现代监控、健康检查和弹性的支持更好。目前，这些方面必须通过几行代码进行集成，正如我们将在后续章节中看到的那样。长期目标是使这种集成更加简单直接。Java
    EE旨在让开发者专注于他们应该关注的事情——解决业务问题。
- en: Java Community Process
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java社区进程
- en: What makes Java EE platform unique is the process of how it is specified. The
    standards of Java EE are developed as part of the **Java Community Process** (**JCP**).
    The JCP is a prime example of an industry that actively encourages participation
    in defining standards, not only from the few engineers involved but anybody interested
    in that technology. The platform comprises standards in the form of **Java Specification
    Requests** (**JSR**). These JSRs are not only relevant for Java and Java EE but
    also for technologies that build upon them, such as the Spring framework. Ultimately,
    the real world experience of these other technologies then again help shaping
    new JSRs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使Java EE平台独特的是其规范的过程。Java EE的标准是作为**Java社区进程**（**JCP**）的一部分开发的。JCP是积极鼓励参与定义标准的行业的典范，不仅限于少数参与工程师，而是任何对该技术感兴趣的人。该平台由**Java规范请求**（**JSR**）形式的标准组成。这些JSR不仅与Java和Java
    EE相关，还与构建在其之上的技术（如Spring框架）相关。最终，这些其他技术的实际经验再次帮助塑造新的JSR。
- en: During application development, and especially when encountering potential issues,
    the written specifications that emerge from the JSRs are extremely beneficial.
    The vendors who support the enterprise platform are required to provide the implementation
    in the way it's specified in these standards. That said, the specification documents
    inform both the vendors and developers as to how the technology will work. If
    some functionality is not met, the vendors are required to fix these issues in
    their implementations. This also means that developers, in theory, only have to
    learn and know these technologies, no vendor-specific details.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用开发过程中，尤其是在遇到潜在问题时，从JSR中产生的书面规范极为有益。支持企业平台的供应商必须按照这些标准中指定的方式提供实现。换句话说，规范文档既向供应商也向开发者说明了技术将如何工作。如果某些功能未满足，供应商必须在其实现中修复这些问题。这也意味着，理论上，开发者只需学习和了解这些技术，无需了解供应商特定的细节。
- en: Every developer can participate in the Java Community Process to help in shaping
    the future of Java and Java EE. The **Expert Groups** who define the specific
    standards welcome constructive feedback from anybody interested in the topic,
    even if they're not active members of the JCP. Other than this, you're able to
    have a peek into the next versions of the standards even before they're released.
    These two facts are very interesting for architects and companies. There is not
    only insight into where the direction will go but also the possibility to contribute
    and make an impact.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者都可以参与Java社区进程，帮助塑造Java和Java EE的未来。定义具体标准的**专家小组**欢迎任何对该主题感兴趣的人提供建设性的反馈，即使他们不是JCP的活跃成员。除此之外，你甚至可以在标准发布之前一睹其下一版本的真容。这两点对架构师和公司来说都非常有趣。不仅可以看到方向将走向何方，还有机会参与并产生影响。
- en: These motivations were also two of the reasons why I personally specialized
    in Java EE. I have a background of enterprise development with the Spring framework.
    Besides the fact that both technologies are very similar in terms of the programming
    model, I especially valued the power of the CDI standard as well as the possibility
    to seamlessly use all of the technologies within the platform. I started to look
    into the specific JSRs that are part of the enterprise platform and started to
    contribute and provide feedback on features that were standardized back then.
    At the time of writing this book, I'm part of two Expert Groups, JAX-RS 2.1 and
    JSON-P 1.1\. Helping to define these standards improved my knowledge in enterprise
    systems a lot. You are naturally obliged to dive deep into the topics, motivations,
    and solutions of the specific technology that you help standardize. And of course,
    it is somewhat satisfying to know that you helped in working on standards in the
    IT industry. I can only encourage developers to participate in the JCP, looking
    into what's currently developed, and to contribute and provide feedback to the
    Expert Groups.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些动机也是我个人选择专注于Java EE的两个原因。我拥有使用Spring框架的企业级开发背景。除了这两种技术在编程模型方面非常相似之外，我还特别重视CDI标准的强大功能以及能够在平台上无缝使用所有技术的可能性。我开始研究企业平台中具体JSR，并开始对当时标准化的功能提供反馈和贡献。在撰写本书时，我是两个专家组的成员，分别是JAX-RS
    2.1和JSON-P 1.1。帮助定义这些标准极大地增强了我对企业系统的了解。你自然有义务深入研究你帮助标准化的特定技术的主题、动机和解决方案。当然，知道你在IT行业的工作中有助于制定标准，这多少是令人满意的。我只能鼓励开发者参与JCP，关注当前正在开发的内容，并为专家组提供贡献和反馈。
- en: What to expect in the book
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本书中可以期待什么
- en: I've decided to write this book about the things I learned in the past working
    on Java enterprise systems of all kinds. My motivation is to show you what a modern
    Java EE approach looks like. This, of course, first of all aims toward developing
    enterprise applications themselves, and modern programming models. I try to build
    up an impression as to how Java EE is used in the age of EE 8 and where the platform
    shines. There are new design patterns and paradigms being used that have emerged
    from modern framework approaches. If you were familiar with the J2EE world, you
    will hopefully see the advantage of modern Java EE. I try to show which of the
    old paradigms, constraints, and considerations that made J2EE sometimes being
    disliked among developers are not true anymore and can be discarded. Besides this,
    the book is an attempt to spread some enthusiasm and explain why I am convinced
    that Java Enterprise serves the purpose of realizing enterprise applications well.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定写这本书，关于我在过去从事各种Java企业系统工作时学到的东西。我的动机是向你展示现代Java EE方法的样子。这当然首先是为了开发企业应用程序本身和现代编程模型。我试图建立一个印象，即Java
    EE在EE 8时代的应用以及平台的优势所在。有新的设计模式和范例正在被使用，这些模式是从现代框架方法中出现的。如果你熟悉J2EE世界，你可能会希望看到现代Java
    EE的优势。我试图展示哪些旧范式、约束和考虑因素使得J2EE有时在开发者中不受欢迎，现在已经不再适用并且可以被摒弃。除此之外，这本书也是尝试传播一些热情，并解释为什么我确信Java企业级能够很好地实现企业应用程序。
- en: That said, you, the reader, don't need prior knowledge of the J2EE world and
    patterns and best practices thereof. In particular, the programming model so different
    that I'm convinced it makes sense to showcase today's approach from a green field.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，你，作为读者，不需要对J2EE世界及其模式和最佳实践有先前的了解。特别是，编程模型如此不同，以至于我相信从零开始展示当今的方法是有意义的。
- en: It you have built and designed J2EE applications, this is great. You will see
    what the challenges with past J2EE design patterns were, particularly when in
    the modern world, our domain can focus on business demands first and not the technology
    used to implement it. This is especially true when we follow the approaches of
    *Domain-Driven Design*. You will notice how many cumbersome and painful aspects
    of J2EE systems in the past can be eradicated in modern Java EE. The simplicity
    and power of the Java EE platform may inspire you to rethink certain approaches
    that we have done so far. Maybe you can try to take a mental step back to have
    a fresh, unbiased view on the technology.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经构建并设计了J2EE应用程序，这很好。你将看到过去J2EE设计模式所面临的挑战，尤其是在现代世界，我们的领域可以首先关注业务需求，而不是实现它的技术。这在我们遵循*领域驱动设计*的方法时尤其如此。你会注意到过去J2EE系统中许多繁琐和痛苦的问题如何在现代Java
    EE中被消除。Java EE平台的简洁和强大可能会激发你重新思考我们迄今为止所采取的一些方法。也许你可以尝试退一步，以一个新鲜、无偏见的角度看待这项技术。
- en: This book is meant for software engineers, developers and architects who design
    and build enterprise applications. In the book, I will mostly use the term developers
    or engineers. That said, I am convinced that architects should also, from time
    to time, the more the better, touch source code and *get their hands dirty* with
    technology. This is not only to support other developers in the team but also
    important for themselves to get more real-world experience. In the same way all
    developers should have at least a basic understanding of the system's architecture
    and the reasoning for the architectural choices. Again, the better this mutual
    understanding is, the better will the communication and development function in
    the projects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为软件工程师、开发者和架构师而写的，他们设计和构建企业应用程序。在书中，我主要会使用开发者或工程师这个术语。话虽如此，我坚信，架构师也应该时不时地，越多越好，接触源代码，并*亲自动手*与技术打交道。这不仅是为了支持团队中的其他开发者，而且对于他们自己获得更多实际经验也非常重要。同样，所有开发者都应该至少对系统的架构和架构选择的原因有一个基本了解。再次强调，这种相互理解越好，项目中的沟通和开发功能就会越好。
- en: Modern enterprise application development touches much more than just the sole
    development. As we are seeing, new demands of enterprise applications, engineers
    care about development workflows, cloud environments, containers, and container
    orchestration frameworks. We will cover whether and how Java Enterprise fits into
    this world and what approaches and best practices there are that support this.
    This will tackle the topics of Continuous Delivery and automated testing, why
    they have such importance, and how they integrate with Java EE. We will also cover
    container technologies, such as Docker, and orchestration frameworks such as Kubernetes.
    In today's enterprise world it's important to show how a technology such as Java
    EE supports these areas.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现代企业应用程序开发涉及的不仅仅是开发本身。正如我们所看到的，企业应用程序的新需求，工程师们关心开发工作流程、云环境、容器和容器编排框架。我们将探讨Java企业版是否以及如何融入这个世界，以及有哪些方法和最佳实践支持这一点。这将涉及持续交付和自动化测试的话题，为什么它们如此重要，以及它们如何与Java
    EE集成。我们还将涵盖容器技术，如Docker，以及编排框架，如Kubernetes。在今天的商业世界中，展示像Java EE这样的技术如何支持这些领域是很重要的。
- en: Microservice architecture is a big topic, another of today's hypes. We will
    look at what microservices are about, and if and how they can be realized with
    Java EE. The topics of security, logging, performance, and monitoring will also
    be covered later in this book. I will point out what architects should know and
    be aware of in today's enterprise software world. The used choices of technology,
    especially when it comes to modern solutions that support applications; for example,
    in the areas of 12-factor or cloud native applications, serve as examples as to
    what would be chosen as of today. However, it is much more important to understand
    what the concepts and motivations behind these technologies are. Used technology
    changes day by day, principles and concepts or computer science live much longer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构是一个大话题，也是今天的一个热点。我们将探讨微服务是什么，以及它们是否以及如何可以用Java EE实现。关于安全、日志记录、性能和监控的话题也将在本书的后面部分进行讨论。我会指出，在今天的企业软件世界中，架构师应该知道和注意什么。所使用的技术选择，尤其是当涉及到支持应用程序的现代解决方案时；例如，在12因子或云原生应用程序的领域，作为今天可能被选择的内容的例子。然而，更重要的是理解这些技术背后的概念和动机。使用的技术每天都在变化，而计算机科学的原则和概念则存在得更久。
- en: For all of the subjects that I cover in this book, my approach is to show the
    motivations and reasoning behind solutions first, and then how they are applied
    and implemented in Java EE second. I believe that simply teaching a certain technology
    may certainly help developers in their daily jobs but they will not fully embrace
    the solution until the motivations behind it are completely understood. This is
    why I will also start with the motivations behind enterprise applications in general.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中涉及的所有主题，我的方法是首先展示解决方案背后的动机和推理，然后是它们如何在 Java EE 中应用和实现。我相信，仅仅教授某种技术当然可以帮助开发者完成日常工作，但他们只有在完全理解其背后的动机之后，才会完全接受这种解决方案。这就是为什么我还会从企业应用的一般动机开始。
- en: There is a lot of functionality included in Java EE, even more if you look into
    the past. This book does not aim to represent a full Java EE reference work. Rather,
    it is intended to provide real world experience as well as recommendations, call
    them *best practices,* tackling typical scenarios with pragmatic solutions. Now,
    please lean back and enjoy the journey through a modern enterprise software world.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 包含了大量的功能，如果你回顾过去，会发现更多。本书的目标并不是要成为一部完整的 Java EE 参考手册。相反，它旨在提供实际经验以及建议，可以称之为*最佳实践*，通过实用解决方案解决典型场景。现在，请放松身体，享受穿越现代企业软件世界的旅程。
