- en: Learn Everything about Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解有关数组的一切
- en: 'In this chapter, we will take a look at one of the most important concept in
    Java code: arrays. We''ll see how different arrays look, and how to initialize
    and display them. We''ll also take a look at a few exercises to help us better
    understand how arrays work.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Java代码中最重要概念之一：数组。我们将看到不同数组的样式，以及如何初始化和显示它们。我们还将查看一些练习，以帮助我们更好地理解数组的工作原理。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Arrays and their usage in Java programs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组及其在Java程序中的应用
- en: Ways of initializing arrays and assigning objects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化数组和分配对象的方法
- en: Logic programming on multidimensional arrays
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多维数组的逻辑编程
- en: Practice exercises
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习
- en: Arrays and their usage in Java programs
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组及其在Java程序中的应用
- en: We might have come across the term array in the past, so let's see what arrays
    are with an explanation and an example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能以前遇到过数组的术语，所以让我们通过解释和示例来了解数组是什么。
- en: An array is a container that stores multiple values of the same data type.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是一个存储多个相同数据类型值的容器。
- en: In the following example, we will see what a container is, how to define that
    container, and how we can store values in them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将了解什么是容器，如何定义该容器，以及我们如何在其中存储值。
- en: 'If we want to work with arrays, we declare them by allocating some space for
    them using the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要使用数组，我们通过以下代码为它们分配一些空间来声明它们：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `new` keyword basically allocates memory for a value in this array. The
    square brackets mean that we are adding multiple values into the brackets, `[]` indicates
    the term for the array. To define an array, we have to create space for the multiple
    values that we will be storing in it. In this example, we have five integer values
    that we are planning to store in the array, which is why we have specified the
    array data type as an integer, and the number of variables to be added is given
    in the square brackets:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`new`关键字基本上为这个数组中的值分配内存。方括号表示我们将多个值添加到方括号中，`[]`表示数组的术语。为了定义一个数组，我们必须为将要存储在其中的多个值创建空间。在这个例子中，我们有五个整数值，我们计划将它们存储在数组中，这就是为什么我们指定数组数据类型为整数，并且要添加的变量数量在方括号中给出：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we observed in [Chapter 3](af539fda-b962-4b96-b326-1b5e3a18fe1c.xhtml), *Handling
    Strings and Their Functions in Java*, if the values were strings, we would specify
    the array data type as `String`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第3章](af539fda-b962-4b96-b326-1b5e3a18fe1c.xhtml)中观察到的，在*Java中处理字符串及其函数*，如果值是字符串，我们将指定数组数据类型为`String`。
- en: We have declared an array and allocated memory for the values, now we need to
    pass those values. The first value will be placed in index `0`, the second in
    index `1`, and so on for all five values. Index naming starts from the `0` index,
    so the first value will be assigned to the `0` index. This means that we actually
    initialized values in the array. Now the `a` array holds all the values that we
    assign to it. For our example, we declare any random values for the array.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经声明了一个数组并为值分配了内存，现在我们需要传递这些值。第一个值将放在索引`0`，第二个放在索引`1`，以此类推，直到所有五个值。索引命名从`0`开始，这意味着我们实际上在数组中初始化了值。现在`a`数组包含了我们分配给它的所有值。在我们的例子中，我们为该数组声明了任何随机的值。
- en: 'Now let''s retrieve the values from the array. To do so, we create a `for`
    loop by typing the following code in the `main` class after declaring the values
    of the array and leave a print statement after that:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们从数组中检索值。为此，我们在声明数组的值之后，在`main`类中输入以下代码来创建一个`for`循环，并在其后留下一个打印语句：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our starting point has been set at index `0` and the limit has been set to the
    length of the array. Take a look at the `i<a.length` code, `length` is a method
    that actually returns the size of the array.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将起点设置在索引`0`，并将限制设置为数组的长度。看看`i<a.length`代码，`length`是一个实际上返回数组大小的方法。
- en: On running the code we see that all the values assigned to the array are printed
    one after the other. In the next section, we will see a simpler way to declare
    and initialize all the array values.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代码时，我们会看到分配给数组的所有值依次打印出来。在下一节中，我们将看到一种更简单的方式来声明和初始化所有数组值。
- en: Ways to initialize arrays and assign objects
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化数组和分配对象的方法
- en: In the previous section, we saw how to declare an array; the simplest way is
    in the form of an array literal. Let's explain this with an example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了如何声明一个数组；最简单的方式是使用数组字面量形式。让我们用一个例子来解释这一点。
- en: 'We declare another array by typing the following code line in the previous
    example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在先前的例子中输入以下代码行来声明另一个数组：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What is the difference between the declaration in the previous example and the
    declaration that we are performing in this example?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个例子中的声明与我们在本例中进行的声明有什么区别？
- en: In the previous example, we are allocating memory and then assigning the values.
    In this example, rather than allocating the memory, we are directly passing the
    values to the array. Here, memory is dynamically allocated, if we add a value
    in the array declaration, automatically a memory will be allocated and the value
    will be passed into it. In most cases, coders use this method to declare array
    values, rather than declaring the allocation and then assigning the values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的例子中，我们是在分配内存然后赋值。在本例中，我们不是分配内存，而是直接将值传递给数组。在这里，内存是动态分配的，如果我们向数组声明中添加一个值，将自动分配内存并将值传递给它。在大多数情况下，程序员使用这种方法来声明数组值，而不是声明分配然后赋值。
- en: Similar to the previous example, the first value is assigned to index `0`. If
    we write a print statement similar to the previous example and run the code, we
    will see the values of the `b` array displayed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与先前的例子类似，第一个值被分配到索引`0`。如果我们写一个与先前的例子类似的打印语句并运行代码，我们将看到`b`数组的值被显示出来。
- en: That wraps up single-dimensional arrays; let's talk about multidimensional arrays.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就结束了单维数组的讨论；让我们来谈谈多维数组。
- en: Multidimensional arrays
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多维数组
- en: 'Passing objects in the *x* axis and *y* axis is nothing but a multidimensional
    array. The where the *x* axis is the row, and the *y* axis is the column of the
    matrix in which the array values are given. Multi in this case means we are viewing
    arrays from the multi-corner perspectives; this is called a **multidimensional**
    array. The following is a multidimensional array we have created to explain this
    concept:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在*x*轴和*y*轴上传递对象，其实就是一个多维数组。其中*x*轴是行，*y*轴是矩阵中数组值的列。这里的“多”意味着我们从多角度来观察数组；这被称为**多维数组**。以下是我们创建的一个多维数组，用于解释这个概念：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a matrix and it has three rows and three columns. `2` is in the zero row
    and zero column, and the `4` beside it is in the zero row and first column, and
    the same iteration for the rest of the values. So each argument has an *x* axis
    and a *y* axis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个矩阵，它有三行三列。`2`位于零行零列，它旁边的`4`位于零行第一列，其余的值以此类推。所以每个参数都有一个*x*轴和一个*y*轴。
- en: 'Let''s take an example to explain this. We will create another class, name
    it `Multidimensional.java`, and declare a multidimensional array, `a`, in it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子来解释这一点。我们将创建另一个类，命名为`Multidimensional.java`，并在其中声明一个多维数组`a`：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first bracket represents the *x* axis or rows, and the second represents
    the *y* axis or columns. So, the *x* axis takes three values, which means three
    rows and the *y* axis takes three columns. We then assign the values for each
    element of the matrix that we created to explain multidimensional arrays. The
    following code shows how to assign values for the matrix:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个括号代表*x*轴或行，第二个代表*y*轴或列。所以*x*轴有三个值，意味着有三行，而*y*轴有三个列。然后我们为创建的多维数组中的每个元素分配值。以下代码显示了如何为矩阵分配值：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This way we will feed all the values into a multidimensional array. If we want
    to display the value of the second row, first column, we write a print statement
    and give the location of the element whose value we wish to display. In this case,
    we want to display the second row, first column, so the print statement will be
    written as:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以将所有值输入到一个多维数组中。如果我们想显示第二行第一列的值，我们写一个打印语句并给出我们希望显示值的元素位置。在这种情况下，我们想显示第二行第一列，所以打印语句将写成：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The print statement will display `3`, which is the value of the element in that
    location. In the next section, we will take an example that will help explain how
    we use all these concepts in solving coding.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打印语句将显示`3`，这是该位置元素的值。在下一节中，我们将举一个例子，帮助解释我们如何使用所有这些概念来解决编码问题。
- en: How do we print all the values of the a array that we declared in this example?
    In the earlier example, we printed the array by simply creating a `for` loop,
    iterated it from `0` to the length of the array, and the array was displayed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何打印出在本例中声明的a数组的所有值？在先前的例子中，我们通过简单地创建一个`for`循环，从`0`迭代到数组的长度，然后显示数组。
- en: 'If we want to declare a multidimensional array in the simplest format, like
    how array `b` was described in the previous example, we could write it in the
    following manner:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想以最简单的格式声明一个多维数组，就像前一个例子中描述的数组`b`一样，我们可以用以下方式编写：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The array will assume that the values in the first bracket are in the zero index,
    the second in the first index, and the third in the second index. This is the
    simplest way to declare multidimensional arrays.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 数组将假设第一个括号中的值在零索引，第二个在第一个索引，第三个在第二个索引。这是声明多维数组的最简单方式。
- en: Logic programming on multidimensional arrays
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多维数组的逻辑编程
- en: Now we will take a look at how we can print all the values of the entire multidimensional
    array used in the previous section, that is, the a array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何打印之前章节中使用的整个多维数组的所有值，即数组`a`。
- en: If we analyze the declaration of the array, we will see that two `for` loops
    will be required to print the entire array, one for rows and one for columns.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们分析数组的声明，我们会看到需要两个`for`循环来打印整个数组，一个用于行，一个用于列。
- en: 'We want the controller to scan the complete first row, then the second row,
    and finally the third. So we add an outer `for` loop for the rows and set the
    length limit to the number of rows in the array, in this case two rows. The outer
    `for` loop for the rows will look like the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望控制器扫描完整的第一行，然后是第二行，最后是第三行。因此，我们添加一个外部的`for`循环来处理行，并将长度限制设置为数组中的行数，在这种情况下是两行。行的外部`for`循环将如下所示：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This `for` loop will actually loop twice since we set the limit to `2` for
    rows. The first loop will scan the first row and the second loop will scan the
    second row. Now for each loop, we need to scan the three columns present in that
    specific row. To do this, we add an inner `for` loop that will scan every column
    and we set the limit to the number of columns in the array, which is `3` for this
    example. The inner `for` loop for the columns will look like the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`for`循环实际上将循环两次，因为我们为行设置了`2`的限制。第一个循环将扫描第一行，第二个循环将扫描第二行。现在，对于每个循环，我们需要扫描该特定行中存在的三个列。为此，我们添加一个内部`for`循环来扫描每一列，并将限制设置为数组中的列数，在这个例子中是`3`。列的内部`for`循环将如下代码所示：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally to print the array, we add a print statement in the internal `for`
    loop to display all the values. The final code will be as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了打印数组，我们在内部`for`循环中添加一个打印语句来显示所有值。最终的代码将如下所示：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's try to understand what we have written here. The control will start from
    the outer `for` loop; this outer `for` loop is executed twice because it has been
    set to less than `2`. After entering the outer `for` loop for the first time,
    it enters the inner `for` loop; this loop is executed three times because `j`
    has been set to less than `3`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试理解我们在这里写的内容。控制将从外部`for`循环开始；这个外部`for`循环执行两次，因为它被设置为小于`2`。第一次进入外部`for`循环后，它进入内部`for`循环；这个循环执行三次，因为`j`被设置为小于`3`。
- en: 'Let''s debug it and take a look at a few steps in the code to understand these
    loops better. The following are the steps that will be performed while debugging
    the code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调试它并查看代码中的几个步骤来更好地理解这些循环。以下是在调试代码时将执行的步骤：
- en: The controller executes the outer loop for the first time and the value of `i`
    has been initialized to `0`, this means that the value of the *x* axis is set
    at `0`. The controller will look at the first row since `0` indicates that the
    first row is being accessed.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器第一次执行外部循环，`i`的值已经被初始化为`0`，这意味着*x*轴的值被设置为`0`。控制器将查看第一行，因为`0`表示正在访问第一行。
- en: It moves to the inner `for` loop and executes it, the initial value of `j` has
    been been initialized to `0`; this means that the value of the *y* axis is set
    to `0`. The controller will look at the first row and first column, since it was
    already on the first row because of the outer loop. The inner loop sent the controller
    to look at the first column.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它移动到内部`for`循环并执行它，`j`的初始值已经被初始化为`0`；这意味着*Y*轴的值被设置为`0`。控制器将查看第一行和第一列，因为它已经在第一行，这是由于外部循环。内部循环将控制器发送到查看第一列。
- en: '`a` will take the value of the first row and first column as the values of
    `i` and `j` were initialized to `0`, `a[0][0]`. So the output for this execution
    will be the first row and first column, which is `2` in this example.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a`将取第一行和第一列的值，因为`i`和`j`的初始值都是`0`，即`a[0][0]`。因此，这次执行的输出将是第一行和第一列，在这个例子中是`2`。'
- en: The controller moves to the inner `for` loop again as the condition for the
    loop is still satisfied because `j` gets iterated to `1`, which is less than `3`;
    this means that the value of the *y* axis is set to `1` and it will access the
    second column. The controller will look at the first row and second column since
    it was already on the first row because of the outer loop and the inner loop sent
    the controller to look at the second column.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`j`被迭代到`1`，小于`3`，因此循环的条件仍然满足，控制器再次进入内`for`循环。这意味着*y*轴的值被设置为`1`，它将访问第二列。由于外循环和内循环已经将控制器置于第一行，控制器将查看第一行和第二列。
- en: '`a` will take the value of the first row and second column as the values of
    `i` and `j` are set to `0` and `1`, `a[0][1]`. So the output for this execution
    will be the first row and second column, `4` in this example.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a`将取第一行和第二列的值，因为`i`和`j`的值被设置为`0`和`1`，即`a[0][1]`。因此，这次执行的输出将是第一行和第二列，在这个例子中是`4`。'
- en: The controller moves to the inner `for` loop again as the condition for the
    loop is still satisfied because `j` gets iterated to `2`, which is less than `3`.
    This means that the value of the *y* axis is set to `2` and it will access the
    third column. The controller will look at the first row and third column since
    it was already on the first row because of the outer loop and the inner loop sent
    the controller to look at the third column.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`j`被迭代到`2`，小于`3`，因此循环的条件仍然满足。这意味着*y*轴的值被设置为`2`，它将访问第三列。由于外循环和内循环已经将控制器置于第一行，控制器将查看第一行和第三列。
- en: '`a` will take the value of the first row and third column as the values of
    `i` and `j` are set to `0` and `2`, `a[0][2]`. So the output for this execution
    will be the first row and third column, which is `5` in this example.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`a`将取第一行和第三列的值，因为`i`和`j`的值被设置为`0`和`2`，即`a[0][2]`。因此，这次执行的输出将是第一行和第三列，在这个例子中是`5`。'
- en: When the controller goes to the inner loop now, it won't be able to execute
    it because after `j` gets iterated again the value will be `3`, which is not less
    than the limit we had set for the loop. So the controller exits the inner `for`
    loop and goes back to the outer loop and iterates the value of `i` to `1`; this
    means that the value of the *x* axis is set to `1`. The controller will look at
    the second row since `1` indicates that the second row is being accessed.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当控制器现在进入内循环时，它将无法执行它，因为`j`再次迭代后值将变为`3`，这并不小于我们为循环设置的极限。因此，控制器退出内`for`循环并返回外循环，迭代`i`的值为`1`；这意味着*x*轴的值被设置为`1`。控制器将查看第二行，因为`1`表示正在访问第二行。
- en: Steps 2, 3, 4, 5, 6, and 7 are repeated again, but this time the value of `i`,
    which is the *x* axis, is set to `1`; that means the second row will be accessed.
    All the values in the second row are displayed according to the steps specified
    previously, until we reach the third column of the matrix.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤2、3、4、5、6和7将再次重复，但这次`i`的值，即*x*轴，被设置为`1`；这意味着将访问第二行。根据之前指定的步骤显示第二行中的所有值，直到我们达到矩阵的第三列。
- en: The controller will exit the inner loop after accessing the third column as
    `j` will be iterated to `3`, which is less than the limit that we had set for
    the loop. So the controller again exits the inner `for` loop and starts executing
    the outer loop.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器在访问第三列后退出内循环，因为`j`将被迭代到`3`，小于我们为循环设置的极限。因此，控制器再次退出内`for`循环并开始执行外循环。
- en: In the outer `for` loop, the value of `i` will be iterated to `2` and the loop
    will not be executed because it is not less than `2`, which is the limit we set
    for it.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在外`for`循环中，`i`的值将被迭代到`2`，并且循环将不会执行，因为它不小于我们为其设置的极限`2`。
- en: This is how the values of a multidimensional array can be obtained using two
    `for` loops, in which the outer loop works with rows and the inner loop works
    with columns.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何使用两个`for`循环来获取多维数组的值，其中外循环处理行，内循环处理列。
- en: Practice exercises
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Let's try a few exercises that will help us understand and work with arrays.
    These exercises will also explain concepts while giving an interview.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些练习，这些练习将帮助我们理解和处理数组。这些练习在面试时也会解释概念。
- en: Print the smallest number in a 3 x 3 matrix
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印3 x 3矩阵中的最小数
- en: 'Let''s create another class for this exercise, name it `InterviewMinnumber`,
    and define the array in the main block. The definition code will be as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个练习创建另一个类，命名为`InterviewMinnumber`，并在主块中定义数组。定义代码如下：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code declares a 3 x 3 matrix named `abc`. Now we need to traverse each
    number in the matrix, and look for the smallest number in it. To traverse every
    number in the multidimensional array, we need to use the same concept that we
    have used in the *Logic programming on multidimensional arrays* section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码声明了一个名为`abc`的3 x 3矩阵。现在我们需要遍历矩阵中的每个数字，并寻找其中的最小数。要遍历多维数组中的每个数字，我们需要使用我们在*多维数组上的逻辑编程*部分中使用过的相同概念。
- en: 'We use two `for` loops here: an outer `for` loop to traverse the rows and an
    inner `for` loop to traverse the columns. The two `for` loops code will look at
    follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用两个`for`循环：一个外部的`for`循环用于遍历行，一个内部的`for`循环用于遍历列。这两个`for`循环的代码如下：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To find the smallest number, we declare a variable, `min`, and assign the first
    value of the `abc` array to it. We assume that the first value in the `abc` matrix
    is the lowest value in it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到最小的数，我们声明一个变量`min`，并将其赋值为`abc`数组的第一项。我们假设`abc`矩阵中的第一个值是最低的值。
- en: 'We add an `if` loop inside the inner `for` loop. Within this `if` loop, whatever
    we write will go and scan each element in the whole matrix that we declared. In
    the `if` loop, we add a condition where we check whether the value taken from
    the matrix at that instance is less than the `min` value. Inside the `if` loop,
    we swap the value of `min` and `abc`. The final code will be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在内部`for`循环中添加了一个`if`循环。在这个`if`循环中，我们写的任何内容都会去扫描我们声明的整个矩阵中的每个元素。在`if`循环中，我们添加了一个条件，检查从矩阵中取出的值是否小于`min`值。在`if`循环内部，我们交换`min`和`abc`的值。最终的代码如下：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's run the code and see how it finds the smallest number in the matrix.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行代码，看看它是如何找到矩阵中的最小数的。
- en: When the loop is executed first, the value of the first element in the matrix
    is compared to the value of the `min` variable, but we set the value of the `min`
    variable equal to the first element, which is `2`. We check the condition in the
    `if` loop, which compares the value of the element in the matrix and the value
    of `min`. Here, `2` is not smaller than `2`, so it does not enter the loop and
    it goes to the start of the code again. In the next round of the loop, the value
    of the element changes because we move the next element in the matrix. Now the
    element being compared is `4`, we check the `if` condition again and it won't
    be true because `4` is not smaller that `2`, where `2` is the current value of
    `min`. Finally, when it reaches the element in the third row first column, `1`,
    then the `if` condition is true and the controller moves inside the loop and assigns
    `1` to the `min` value. This goes on until the final element in the array matrix,
    where each value of the `abc` matrix is compared to the value of the `min` variable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当循环第一次执行时，矩阵的第一个元素的值与`min`变量的值进行比较，但我们把`min`变量的值设置为第一个元素，即`2`。我们在`if`循环中检查条件，该条件比较矩阵中元素的值和`min`的值。在这里，`2`不小于`2`，所以它不会进入循环，然后它再次回到代码的开始。在循环的下一轮中，元素的值发生变化，因为我们移动到了矩阵中的下一个元素。现在正在比较的元素是`4`，我们再次检查`if`条件，它不会为真，因为`4`不小于`2`，而`2`是当前`min`的值。最后，当它到达第三行第一列的元素时，`1`，那么`if`条件为真，控制器移动到循环内部，并将`1`赋给`min`值。这个过程一直持续到数组矩阵的最后一个元素，其中每个`abc`矩阵的值都与`min`变量进行比较。
- en: If we debug the code and observe it at every step, we will better understand
    the logic and working of this code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调试代码并观察每一步，我们将更好地理解代码的逻辑和工作原理。
- en: Displaying the largest number from the column with the smallest number
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示具有最小数的列中的最大数
- en: 'In the previous example, we observed how to print the smallest number from
    the array matrix. In this example, we will look for the smallest number in the
    matrix and then the maximum number in the same column. The logic behind this is:
    we first find the minimum number, remember the row number it belongs to, and extract
    the maximum number in the same column.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们观察了如何从数组矩阵中打印出最小数值。在这个例子中，我们将寻找矩阵中的最小数值，然后是同一列中的最大数值。背后的逻辑是：我们首先找到最小数值，记住它所属的行号，然后提取同一列中的最大数值。
- en: 'Let''s use the same matrix that we used in the previous example. The output
    for this exercise in the matrix that we are using will be `4`. The following steps
    will be implemented to perform this exercise:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前示例中使用的相同矩阵。在这个矩阵中进行的这个练习的输出将是`4`。以下步骤将用于执行此练习：
- en: Find the minimum value in the matrix that we declare
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们声明的矩阵中找到最小值
- en: Identify the column of that minimum number
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定最小数值所在的列
- en: Find the maximum number in the identified column
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确定的列中找到最大数值
- en: 'We already performed step 1 in the previous example, where we found the minimum
    number in the matrix, so we will be using the same code for this example and just
    change the variables a little:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们已经执行了第1步，即找到矩阵中的最小数值，因此我们将使用相同的代码，只需稍作变量更改：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s move to step 2\. If we observe the code, we see that `i` stands for
    the row number and `j` stands for the column number. So `j` will take the value
    of the column where the smallest number is present and we will take this value
    of `j` and assign it to a variable that will call `mincolumn`. So we write code
    under the swapping command, which will assign the value of `j` to `mincolumn`.
    The code will look something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入第2步。如果我们观察代码，我们会看到`i`代表行号，而`j`代表列号。因此，`j`将取最小数值所在的列的值，我们将这个值赋给一个变量，该变量将调用`mincolumn`。因此，我们在交换命令下编写代码，将`j`的值赋给`mincolumn`。代码将类似于以下内容：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So the moment we find the smallest number in the matrix, we assign to it the
    value of `j`, which is the column number to `mincloumn`. In this case, the value
    of `mincolumn` will be `1`. This takes care of step 2.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们找到矩阵中的最小数值时，我们将它的值赋给`j`，即列号，赋给`mincloumn`。在这种情况下，`mincolumn`的值将是`1`。这完成了第2步。
- en: 'In step 3, we look for the maximum number from the column in which the minimum
    number is present. We create a `while` loop outside the outer `for` loop that
    we had created to find the lowest number in the matrix. We initialize the condition
    variable, `k`, as `0` and iterate it every time the `while` look condition is
    met. The condition for the `while` loop is set to `k` less than `3`; this is because
    we have three rows to traverse to look for the maximum value in them. The code
    for the `while` loop will look as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，我们从包含最小数值的列中寻找最大数值。我们创建一个`while`循环，位于我们为寻找矩阵中最低数值所创建的外部`for`循环之外。我们将条件变量`k`初始化为`0`，并在满足`while`循环条件时迭代它。`while`循环的条件设置为`k`小于`3`；这是因为我们需要遍历三行以寻找其中的最大值。`while`循环的代码将如下所示：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We declare a variable named `max` and give it an initial value of row `0` and
    column `mincolumn`. This gives the variable `max` an initial value of `4`, since
    `4` is the first element in the row which contains the minimum number in the matrix.
    The declaration code will be as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个名为`max`的变量，并给它一个初始值行`0`和列`mincolumn`。这使得变量`max`的初始值为`4`，因为`4`是包含矩阵中最小数值的行的第一个元素。声明代码将如下所示：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Within the `while` loop, we add an `if` loop and set a condition that compares
    whether the variable in the column with the minimum number is greater than the
    variable `max` that we declared. If the condition is met, the value of that number
    is assigned to the `max` variable and the controller moves out of the `if` loop
    and back to the `while` look after iterating `k` by `1`. The iteration will take
    the controller to the next row as `k` is used to signify the row that is being
    traversed to look for the maximum number.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环内，我们添加一个`if`循环，并设置一个条件，比较列中具有最小数值的变量是否大于我们声明的变量`max`。如果条件成立，该数值的值将被分配给`max`变量，控制器在通过`1`迭代`k`后退出`if`循环，并返回到`while`循环。迭代将控制器带到下一行，因为`k`用来表示正在遍历以寻找最大数值的行。
- en: 'The code for the `if` loop will look as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`循环的代码将如下所示：'
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, for the first value of `k`, which is `0`, we go to the first row and second
    column and assign the value to `max`; in this example, the value is `4`. In the
    `if` condition, we compare the value of the first row, second column with the
    value of `max`. In this example, both the values are the same, so the `if` loop
    is not executed and we iterate `k` and enter the `while` loop again. Next, we compare
    the value of the second row, second column with the value of `max`; we move to
    the second row because the value of `k` is iterated by `1` and the current value
    of `k` is `1`. So, on comparing, we see that `o` is less that `4`, where `4` is
    the value of the `max` variable. The condition is not met again and the `if` loop
    is skipped again. This continues for the third row too and the final value of
    `max` is `4`, which is the largest number in the column. Finally, we leave a print
    statement to print the value of `max` at the end.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于`k`的第一个值，即`0`，我们进入第一行第二列并将值赋给`max`；在这个例子中，值是`4`。在`if`条件中，我们比较第一行第二列的值与`max`的值。在这个例子中，两个值都是相同的，所以`if`循环没有执行，我们迭代`k`并再次进入`while`循环。接下来，我们比较第二行第二列的值与`max`的值；我们移动到第二行，因为`k`的值迭代了`1`，当前`k`的值是`1`。所以，在比较时，我们看到`o`小于`4`，其中`4`是`max`变量的值。条件再次不满足，`if`循环再次被跳过。这也适用于第三行，最终`max`的值是`4`，这是该列中的最大数。最后，我们留下一个打印语句，在最后打印`max`的值。
- en: Swapping variables with/without the temp variable
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用/不使用临时变量交换变量
- en: In this exercise, we will be swapping the location of the elements in a simple
    array and placing them in ascending order.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将交换简单数组中元素的位置，并将它们按升序排列。
- en: To do this, we first need to understand the logic of how it will work. Let's
    take an example to explain this.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们首先需要理解其工作逻辑。让我们通过一个例子来解释这一点。
- en: 'We initiate the `a` array and declare values in it, as shown in the following
    code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化`a`数组并在其中声明值，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We can use the bubble-sort mechanism to compare the variables to each other
    and then place them in the order we want. For the preceding example, the way the
    logic works will be as follows; we'll compare `2` with `6`, `2` with `1`, `2`
    with `4`, and `2` with `9`. The smallest number after this comparison is `1` and
    we swap its position with the first index, which is `2`. So after swapping, `1`
    will be the new first index. This means that `1` is the smallest number from the
    values given in the array. Now we move to the second index, we leave the first
    index untouched because we have already compared and declared `1` as the fixed
    first index as it is the smallest number in the array. Now we take the value `6`,
    which is the second index and compare it to other values present in the array.
    First we compare `6` and `2` and since `2` is smaller than `6` we swap their positions,
    so `2` is the new first index and `6` is the second index. We then compare `2`
    with `3`; basically we are comparing the first index with all the other values
    in the array. We then compare `2` to `3`, `2` to `4`, and `2` to `9`; here `2`
    is the smallest number. So `2` becomes our fixed second index in the array. Now
    we are left with four values that we need to sort. We again compare `6` with the
    other values. `6` is smaller than `3`, so we swap the positions of `6` and `3`.
    This makes `3` the third index in the array and we compare `3` with the other
    numbers, `3` is the smallest among all the value given in it. So `3` becomes our
    fixed third index in the array. Then we perform the same thing for the last three
    values and conclude that the final arrangement will be `1`, `2`, `3`, `4`, `6`,
    `9`. Now we need to apply this logic in a Java program and print it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用冒泡排序机制来比较变量彼此，然后按照我们想要的顺序排列它们。对于前面的例子，逻辑的工作方式如下；我们将比较`2`与`6`，`2`与`1`，`2`与`4`，以及`2`与`9`。比较之后的最小数是`1`，我们将它的位置与第一个索引交换，即`2`。所以交换后，`1`将成为新的第一个索引。这意味着`1`是数组中给出的值中的最小数。现在我们移动到第二个索引，我们保留第一个索引不变，因为我们已经比较并宣布`1`为固定的第一个索引，因为它在数组中是最小的数。现在我们取第二个索引的值`6`，并将其与其他数组中的值进行比较。首先我们比较`6`和`2`，由于`2`小于`6`，我们交换它们的位置，所以`2`成为新的第一个索引，`6`成为第二个索引。然后我们比较`2`与`3`；基本上我们是在比较第一个索引与数组中的所有其他值。然后我们比较`2`与`3`，`2`与`4`，以及`2`与`9`；在这里`2`是最小的数。所以`2`成为数组中的固定第二个索引。现在我们剩下四个需要排序的值。我们再次比较`6`与其他值。`6`小于`3`，所以我们交换`6`和`3`的位置。这使得`3`成为数组中的第三个索引，我们比较`3`与其他数字，`3`是给定值中的最小数。所以`3`成为数组中的固定第三个索引。然后我们对最后三个值执行相同的事情，并得出最终排列将是`1`，`2`，`3`，`4`，`6`，`9`。现在我们需要将这个逻辑应用到Java程序中并打印它。
- en: We will decide on an algorithm for our logic and, based on the algorithm, we
    will design our code step by step. We will write an outer `for` loop that moves
    one index and compares it with the rest.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将决定我们逻辑的算法，并根据该算法，我们将逐步设计我们的代码。我们将编写一个外层`for`循环，该循环移动一个索引并与其余部分进行比较。
- en: We write an outer `for` loop and set the condition to not cross the length of
    the array; here the array size is `5`, so the condition is set to `i`, which is less
    than `5`. If `i` is `0`, the variable value will compare it to the first, second,
    third, and fourth variables. If `i` is `2`, the variable will compare it to the
    third and fourth variables. So whatever the `i` index is, it should start comparing
    the value of `i` with its next index. For this, we will create an inner `for`
    loop and we will initialize the `j` to be always one number more than `i`, `i`
    plus `1`, because we will compare it with the next index. So, if `i` equals `0`,
    `j` will be `1`. So the zero index will start comparing from the first index.
    And we compare it until the end of the array, so we set the limit for the inner
    `for` loop at `j`, as it's less than the length of the array, which is `5` in
    this example.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写一个外层`for`循环，并将条件设置为不超出数组的长度；这里数组的大小是`5`，所以条件设置为`i`小于`5`。如果`i`是`0`，变量值将比较它和第一个、第二个、第三个和第四个变量。如果`i`是`2`，变量将比较它和第三个和第四个变量。所以无论`i`索引是什么，它都应该从`i`的值开始比较其下一个索引。为此，我们将创建一个内层`for`循环，并将`j`初始化为总是比`i`多一个数字，即`i`加`1`，因为我们将比较它和下一个索引。所以如果`i`等于`0`，`j`将是`1`。所以零索引将从第一个索引开始比较。我们将其与数组的末尾进行比较，所以我们将内层`for`循环的限制设置为`j`，因为它小于数组的长度，在这个例子中是`5`。
- en: We then add an `if` loop within the inner `for` loop. This loop will do the
    comparison between the indexes and swap the values when the condition is met.
    Once the first round of comparisons is done, the controller exits the inner `for`
    loop and goes back to the outer `for` loop, which is when the smallest number
    is picked after the comparison, pushed to the corner, and the index moves to the
    next value.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后在内部`for`循环中添加一个`if`循环。这个循环将在条件满足时比较索引并交换值。一旦完成第一轮比较，控制器就会退出内部`for`循环，回到外部`for`循环，这时在比较后选择最小的数字，将其推到角落，索引移动到下一个值。
- en: 'Now we go back inside the `if` loop and write code to swap the values when
    the comparison condition is true. To swap variable values, we need to declare
    a `temp` variable and assign the `a[i]` number to `temp`. We add the following
    code to successfully swap the variables:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们回到`if`循环内部，编写代码在比较条件为真时交换值。为了交换变量值，我们需要声明一个`temp`变量并将`a[i]`的数字赋值给`temp`。我们添加以下代码以成功交换变量：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And in the end, we add a print statement to display the final array after comparing
    and rearranging the values.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在比较和重新排列值后添加一个打印语句来显示最终的数组。
- en: 'The final output will be displayed as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出将如下所示：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered various concepts in arrays. We took a look at the
    different types of array, and how they can be initialized and displayed. We then
    performed different exercises to understand how we can use arrays in different
    instances.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了数组中的各种概念。我们查看了几种不同类型的数组，以及它们如何初始化和显示。然后我们进行了不同的练习，以了解我们如何在不同的实例中使用数组。
- en: In the next chapter, we will discuss why the `Date` class and constructors are
    an important part of Java
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论为什么`Date`类和构造函数是Java的重要组成部分
