- en: Chapter 7. Custom Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。自定义小部件
- en: GWT provides a wide variety of widgets—such as labels, text boxes, trees, etc.,
    out of the box for you to use in your applications. These widgets provide a good
    starting point for building user interfaces, but will almost always not provide
    you with everything you need. This is where the concept of creating custom widgets
    by either combining the existing ones in newer and innovative ways, or writing
    new widgets from scratch comes in handy. In this chapter, we are going to tackle
    two things commonly used in web pages—a calendar display and a weather conditions
    display. Since these two functions are not provided by anything currently shipped
    in GWT, we will create these two widgets. We will also learn how to package them
    so that we can reuse them on a different GWT project if necessary.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: GWT提供了各种各样的小部件，例如标签，文本框，树等，供您在应用程序中使用。这些小部件为构建用户界面提供了一个良好的起点，但几乎总是不会提供您所需的一切。这就是通过组合现有的小部件以更新和创新的方式创建自定义小部件的概念，或者从头开始编写新的小部件变得方便的地方。在本章中，我们将解决网页中常用的两个功能——日历显示和天气状况显示。由于GWT当前未提供这两个功能，我们将创建这两个小部件。我们还将学习如何打包它们，以便在必要时可以在不同的GWT项目中重用它们。
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要解决的任务是：
- en: Calendar widget
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日历小部件
- en: Weather widget
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天气小部件
- en: Calendar Widget
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日历小部件
- en: We will create a reusable calendar widget, which can be easily used in multiple
    GWT applications. This widget is based on Alexei Sokolov's simple calendar widget
    ([http://gwt.components.googlepages.com/calendar](http://gwt.components.googlepages.com/calendar)).
    We will adapt it to suit our requirements. The calendar will display the current
    date along with a listing for the current month and will enable navigation either
    forward or backward through the calendar. We will also provide a way to get back
    to the current day, no matter where we have navigated in the calendar.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个可重用的日历小部件，可以轻松地在多个GWT应用程序中使用。这个小部件基于Alexei Sokolov的简单日历小部件（[http://gwt.components.googlepages.com/calendar](http://gwt.components.googlepages.com/calendar)）。我们将对其进行调整以满足我们的要求。日历将显示当前日期以及当前月份的列表，并将允许通过日历向前或向后导航。我们还将提供一种方法，无论我们在日历中导航到哪里，都可以返回到当前日期。
- en: Time for Action—Creating a Calendar
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间——创建日历
- en: 'We will now create a calendar widget. The steps are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个日历小部件。步骤如下：
- en: 'Create a new widget project to contain the artifacts for our custom widgets.
    We will create our widget in this project and then use it inside an application
    in our original `Samples` project. When we create the new project, the `Widgets.gwt.xml`
    file will be automatically created for us, and by default it will contain the
    following entry for inheriting from the `User` module. This is the one module
    that every GWT module needs to inherit from:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的小部件项目，用于包含我们自定义小部件的构件。我们将在这个项目中创建我们的小部件，然后在我们原始的“Samples”项目中的应用程序中使用它。当我们创建新项目时，“Widgets.gwt.xml”文件将自动为我们创建，并且默认情况下，它将包含从“User”模块继承的以下条目。这是每个GWT模块都需要继承的一个模块：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new Java file named `CalendarWidget.java` in the `com.packtpub.gwtbook.widgets.client`
    package that extends the `com.google.gwt.user.client.ui.Composite` class and implements
    the `com.google.gwt.user.client.ui.ClickListener` interface:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“com.packtpub.gwtbook.widgets.client”包中创建一个名为“CalendarWidget.java”的新的Java文件，它扩展了“com.google.gwt.user.client.ui.Composite”类，并实现了“com.google.gwt.user.client.ui.ClickListener”接口：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the elements needed for creating a navigation bar to go forward and
    backward in the calendar, along with a `DockPanel` class that will be the container
    for the calendar itself:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建创建导航栏以在日历中前进和后退的元素，以及一个将是日历本身的容器的“DockPanel”类：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create string arrays to store the weekday names and the names of the months
    in a year. We will retrieve the names from these arrays to display in the user
    interface:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建字符串数组来存储一周中的工作日名称和一年中月份的名称。我们将从这些数组中检索名称以在用户界面中显示：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a variable for holding the HTML used to display the title of the calendar.
    Create labels for displaying the week day and the date for the current day. Also,
    create and initialize a private variable that contains the current date:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个变量来保存用于显示日历标题的HTML。创建标签以显示当前日期的工作日和日期。还要创建和初始化一个包含当前日期的私有变量：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new `Grid` object that overrides the `clearCell()` method to set the
    text for the column cell:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的“Grid”对象，覆盖“clearCell（）”方法以设置列单元格的文本：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a private static class named `CalendarCell` that extends the `HTML`
    class:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“CalendarCell”的私有静态类，它扩展了“HTML”类：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An instance of this class will be added to the `grid` object we created earlier,
    to display a single calendar element in a cell.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类的一个实例将被添加到我们之前创建的“grid”对象中，以在一个单元格中显示一个日历元素。
- en: 'Add accessors to the `CalendarWidget` class for getting the current date, along
    with the day, month, and year components of the current date:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为“CalendarWidget”类添加访问器，以获取当前日期以及当前日期的日，月和年组件：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These methods will be used to retrieve the individual data for a given calendar
    date.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法将用于检索给定日历日期的个别数据。
- en: 'Add mutators to the `CalendarWidget` class for modifying the day, month, and
    year components of the `currentDate` variable:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为“CalendarWidget”类添加修改“currentDate”变量的日，月和年组件的mutators：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a method for computing the calendar for a month previous to the current
    month:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个计算当前月份之前一个月的日历的方法：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will use this when the user clicks on the button for navigating to the previous
    month.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击按钮导航到上一个月时，我们将使用它。
- en: 'Create a method for computing the calendar for a month after to the current
    month:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个计算当前月份之后一个月的日历的方法：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We will use this when the user clicks on the button for navigating to the next
    month.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击按钮导航到下一个月时，我们将使用它。
- en: 'Create a method for computing the number of days in a given month. There is
    no simple method for getting this information currently; so we need to calculate
    it:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个计算给定月份天数的方法。目前没有获取此信息的简单方法；因此我们需要计算它：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a `renderCalendar()` method that can draw the calendar and all of its
    elements. Get the various components of the currently set `date` object, set the
    calendar title, and format the calendar grid. Also compute the number of days
    in the month and the current day, and set the date and weekday label values. Finally,
    set the values of the `grid` cells to the computed calendar values:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`renderCalendar()`方法，可以绘制日历及其所有元素。获取当前设置的`date`对象的各个组件，设置日历标题，并格式化日历网格。还要计算月份和当前日期的天数，并设置日期和工作日标签值。最后，将`grid`单元格的值设置为计算出的日历值：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the constructor `CalendarWidget()` to initialize and lay out all the
    various elements that compose our calendar widget:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建构造函数`CalendarWidget()`，以初始化和布局组成我们日历小部件的各种元素：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the constructor, round the container panel that will hold all of the widget
    elements using the `Rico` class that we created in[Chapter 6](ch06.html "Chapter 6. Browser
    Effects with JSNI and JavaScript Libraries"). As we learned in[Chapter 6](ch06.html
    "Chapter 6. Browser Effects with JSNI and JavaScript Libraries"), the `Rico` class
    has static methods that can be used to get access to the rounding method. We are
    directly using the `Rico` class created earlier to keep things simple, but another
    way would be to split off the `Rico`-related functionality into its own separate
    module and then use it here. Initialize the widget with this container panel:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，使用我们在[第6章](ch06.html "第6章。使用JSNI和JavaScript库进行浏览器效果")中创建的`Rico`类来包装将容器面板。正如我们在[第6章](ch06.html
    "第6章。使用JSNI和JavaScript库进行浏览器效果")中学到的，`Rico`类具有可以用于访问舍入方法的静态方法。我们直接使用了之前创建的`Rico`类来保持简单，但另一种方法是将`Rico`相关功能拆分为自己的独立模块，然后在这里使用它。使用此容器面板初始化小部件：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Also, in the constructor add the navigation bar, the calendar grid, and the
    **today** button to the vertical panel:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在构造函数中，将导航栏、日历网格和**今天**按钮添加到垂直面板中：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Register an event handler to listen for clicks on the **today** button, and
    to redraw the calendar to the current date:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册事件处理程序以侦听**今天**按钮的点击事件，并重新绘制到当前日期的日历：
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the styles for the day and weekday labels and add the widgets to the vertical
    panel:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为日和工作日标签添加样式，并将小部件添加到垂直面板中：
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the two panels to the main panel for the widget:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这两个面板添加到小部件的主面板中：
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Draw the calendar and also register to sink all click events:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制日历并注册以接收所有点击事件：
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a JAR file that contains the widget that we have created. You can export
    a JAR file by using the JAR Packager tool built into Eclipse. Select **Export**
    from the **File** menu and you will have a similar screen to this:![Time for Action—Creating
    a Calendar](img/1007_07_01.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含我们创建的小部件的JAR文件。您可以使用Eclipse内置的JAR Packager工具导出JAR文件。从**文件**菜单中选择**导出**，您将看到一个类似于此的屏幕：![执行时间-创建日历](img/1007_07_01.jpg)
- en: Fill in the information, as it appears in the next screenshot, for creating
    the JAR, and select the resources that will be included in it:![Time for Action—Creating
    a Calendar](img/1007_07_02.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写下一个截图中显示的信息，以创建JAR，并选择要包含在其中的资源：![执行时间-创建日历](img/1007_07_02.jpg)
- en: \Create the JAR file and save as `widgets_jar_desc.jardesc`, so that we can
    recreate the JAR easily whenever we need to. This is shown in the following screenshot:![Time
    for Action—Creating a Calendar](img/1007_07_03.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \创建JAR文件并另存为`widgets_jar_desc.jardesc`，以便我们在需要时可以轻松重新创建JAR。如下截图所示：![执行时间-创建日历](img/1007_07_03.jpg)
- en: Now that we have successfully created the JAR file named `widgets.jar` that
    contains our calendar widget, let us actually use it in a different project. Add
    this JAR to the `buildpath` for our `Samples` Eclipse project, so that the classes
    we need can be found on the `classpath` for the project.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了名为`widgets.jar`的JAR文件，其中包含我们的日历小部件，让我们实际在不同的项目中使用它。将此JAR添加到我们的`Samples`
    Eclipse项目的`buildpath`中，以便可以在项目的`classpath`上找到我们需要的类。
- en: We also need to add the `widgets.jar` file to the scripts for running in hosted
    mode and web mode. Modify the `Samples-shell.cmd` file and the `Samples-compile.cmd`
    file to add the path to this JAR file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将`widgets.jar`文件添加到托管模式和Web模式的脚本中。修改`Samples-shell.cmd`文件和`Samples-compile.cmd`文件，以添加此JAR文件的路径。
- en: 'Modify the module XML file for the `Samples` project—`Samples.gwt.xml`—to inherit
    from the widgets module. Add the following entry to the file:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Samples`项目的模块XML文件`Samples.gwt.xml`，以继承自小部件模块。在文件中添加以下条目：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This entry is an indicator to the GWT framework that the current module will
    use resources from the `com.packtpub.gwtbook.widgets`.`Widgets` module. GWT also
    provides an automatic resource injection mechanism to automatically load resources
    used by a module. This is accomplished by creating the modules with references
    to the external JavaScript and CSS files used by the module, and is particularly
    useful when you create reusable modules, and want to ensure that the users of
    the module have access to the particular stylesheets or JavaScript files used
    by the module.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个条目是GWT框架的一个指示器，表明当前模块将使用来自`com.packtpub.gwtbook.widgets`.`Widgets`模块的资源。GWT还提供了自动资源注入机制，自动加载模块使用的资源。这是通过创建具有对模块使用的外部JavaScript和CSS文件的引用的模块来实现的，当您创建可重用模块并希望确保模块的用户可以访问模块使用的特定样式表或JavaScript文件时，这将非常有用。
- en: In our case, we can probably rewrite and split off our `Rico` support, which
    we added in Chapter 6, into its own module, but for the sake of simplicity we
    are using it as it is.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们可能可以重写并拆分我们在第6章中添加的`Rico`支持为自己的模块，但为了简单起见，我们将其原样使用。
- en: 'Create the user interface for the calendar widget application in a new Java
    file named `CalendarWidgetPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package in the `Samples` project. Create a work panel for holding the calendar
    sample:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Samples`项目的`com.packtpub.gwtbook.samples.client.panels`包中的新Java文件`CalendarWidgetPanel.java`中为日历小部件应用程序创建用户界面。创建一个工作面板来容纳日历示例：
- en: '[PRE21]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the constructor, create a new class `CalendarWidget` and add it to the panel.
    Create a little info panel that displays descriptive text about this application,
    so that we can display the text when this sample is selected in the list of available
    samples in our `Samples` application. Add the info panel and the work panel to
    a dock panel, and initialize the widget:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，创建一个新的`CalendarWidget`类并将其添加到面板中。创建一个小信息面板，显示关于此应用程序的描述性文本，以便在我们的`Samples`应用程序的可用示例列表中选择此示例时显示文本。将信息面板和工作面板添加到一个停靠面板，并初始化小部件：
- en: '[PRE22]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the application to see the calendar widget in action:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序以查看日历小部件的操作：
- en: '![Time for Action—Creating a Calendar](img/1007_07_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间——创建日历](img/1007_07_04.jpg)'
- en: What Just Happened?
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'A custom widget encapsulates functionality and enables reuse across multiple
    projects. There are three ways to create a custom GWT widget:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义小部件封装了功能并实现了在多个项目中的重用。创建自定义GWT小部件有三种方法：
- en: '**Composite:** `Composite` is a special GWT class that is itself a widget,
    and can act as a container for other widgets. This lets us easily compose a complex
    widget comprising any number of components.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Composite:** `Composite`是一个特殊的GWT类，它本身就是一个小部件，并且可以作为其他小部件的容器。这让我们可以轻松地组合包含任意数量组件的复杂小部件。'
- en: '**Java:** Create a widget from scratch similar to the way all the basic widgets
    of GWT, such as `Button` are written.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java:** 从头开始创建一个类似于GWT的所有基本小部件（如`Button`）的小部件。'
- en: '**JavaScript:** Implement a widget whose methods call JavaScript. This method
    should be chosen carefully, as the code will need to be written to carefully consider
    the cross-browser implications.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript:** 实现一个小部件，其方法调用JavaScript。应该谨慎选择此方法，因为代码需要仔细考虑跨浏览器的影响。'
- en: Normal GWT widgets are just wrappers around HTML elements. A composite widget
    is a complex widget composed of several simple widgets. It controls the methods
    that are publicly accessible to the clients of the widget. You can, thus, expose
    only the events that you want. `Composite` is the simplest and quickest way to
    build a widget. In this example, we create a calendar widget by extending the
    `Composite` class, and adding various components to it. The calendar consists
    of two main panels—the one on the left displays the weekday and the actual date,
    while the panel on the right displays the actual calendar along with the buttons
    for navigating forward and backward through the calendar. You can use these buttons
    to go to a different date. Anytime you want to return to the calendar for today's
    date, click on the **Today** button, and the calendar will again be rendered for
    the current date.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 普通的GWT小部件只是HTML元素的包装器。复合小部件是由几个简单小部件组成的复杂小部件。它控制了对小部件的客户端公开访问的方法。因此，您可以仅公开您想要的事件。`Composite`是构建小部件的最简单和最快的方法。在这个例子中，我们通过扩展`Composite`类创建了一个日历小部件，并向其添加了各种组件。日历由两个主要面板组成——左侧显示工作日和实际日期，而右侧面板显示实际日历以及用于通过日历向前和向后导航的按钮。您可以使用这些按钮转到不同的日期。任何时候您想要返回到今天日期的日历，点击**今天**按钮，日历将再次呈现为当前日期。
- en: We created a container named `HorizontalPanel` that contains the various components
    of the calendar widget. This panel is given a nice rounded corner effect by using
    the `Rico` library that we created in the previous chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`HorizontalPanel`的容器，其中包含日历小部件的各种组件。通过使用我们在上一章中创建的`Rico`库，该面板被赋予了漂亮的圆角效果。
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For the calendar, we used a `Grid` object with seven rows and seven columns.
    We overrode its `clearCell()` method to clear the contents of the cell by setting
    the text for the `TD` element to an empty string:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日历，我们使用了一个具有七行七列的`Grid`对象。我们重写了它的`clearCell()`方法，通过将`TD`元素的文本设置为空字符串来清除单元格的内容：
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This grid was created by populating each of its cells with `CalendarCell`. This
    is a custom class that we created where each of the cells can take an HTML snippet
    as the text, and lets us lay out a much better grid.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网格是通过将每个单元格填充`CalendarCell`来创建的。这是一个我们创建的自定义类，其中每个单元格都可以采用HTML片段作为文本，并且让我们布局一个更好的网格。
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `renderCalendar()` method does the bulk of the work in this widget. It
    sets the values for the weekday and the date, and also draws the calendar itself.
    When we create the calendar grid, we set the styles for each individual cell.
    If the cell happens to be the current date, we set it to a different style; so
    visually we can immediately discern the current date by just looking at the grid.
    When the calendar widget is initialized, it automatically draws the calendar for
    the current date. The navigation bar contains two buttons—one for navigating forward
    to go to the next month, and the other button for navigating backward to the previous
    month. When one of the two navigation buttons is clicked, we redraw the calendar.
    So, for instance, when we click on the previous button, we compute the previous
    month and redraw the calendar:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderCalendar()`方法在这个小部件中完成了大部分工作。它设置了工作日和日期的值，并绘制了日历本身。当我们创建日历网格时，我们为每个单独的单元格设置样式。如果单元格恰好是当前日期，我们将其设置为不同的样式；因此在视觉上，我们可以立即通过查看网格来辨别当前日期。当日历小部件初始化时，它会自动绘制当前日期的日历。导航栏包含两个按钮——一个用于向前导航到下一个月，另一个按钮用于向后导航到上一个月。当点击其中一个导航按钮时，我们重新绘制日历。因此，例如，当我们点击上一个按钮时，我们计算上一个月并重新绘制日历。'
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We also added a button to the calendar so as to let us redraw the calendar
    to the current date. After navigating either forward or backward in the calendar,
    we can click on the **Today** button, and have the calendar rendered for the current
    date:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在日历中添加了一个按钮，以便让我们将日历重绘到当前日期。在日历中向前或向后导航后，我们可以单击**今天**按钮，使日历呈现为当前日期：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We utilized the built-in functionality in Eclipse to export our widget resources
    as a JAR file. This JAR file can be shared among teams or projects, and reused.
    We used this exported `widgets.jar` file in our `Samples` project, by creating
    a simple panel, instantiating the calendar widget, and adding it to the panel.
    The file also needs to be added to the `compile` and `shell` batch files for the
    project; so that it can be found on the `classpath` when either of these commands
    is run. We could have done some of the date manipulation in a simpler way by using
    the `Calendar` class that is available in the JDK 1.4 + versions. However, we
    could not use the `Calendar` class as it is not one of the JRE classes that are
    provided by the GWT framework currently. So if we would have used it, we had had
    compilation errors. If in the future this class is supported by GWT, it should
    be quite simple to switch it out to use the functionality provided by the `Calendar`
    class to perform some of the date manipulation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用Eclipse中的内置功能将我们的小部件资源导出为JAR文件。这个JAR文件可以在团队或项目之间共享和重复使用。我们在`Samples`项目中使用这个导出的`widgets.jar`文件，通过创建一个简单的面板，实例化日历小部件，并将其添加到面板中。该文件还需要添加到项目的`compile`和`shell`批处理文件中；以便在运行这些命令时可以在`classpath`上找到它。我们可以通过使用JDK
    1.4+版本中提供的`Calendar`类来以更简单的方式进行一些日期操作。然而，我们无法使用`Calendar`类，因为它目前不是GWT框架提供的JRE类之一。因此，如果我们使用它，就会出现编译错误。如果将来这个类得到GWT的支持，那么将很容易切换到使用`Calendar`类提供的功能来执行一些日期操作。
- en: Weather Widget
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 天气小部件
- en: We will create a weather widget that uses the Yahoo Weather RSS service to retrieve
    the weather information and display the current weather conditions. We will create
    an RPC service that provides this functionality, and then use the RPC in our widget
    to display the weather information for a given US ZIP code. The user interface
    for this widget will contain an image for the current weather condition, along
    with all the other weather-related information that is available via the Yahoo
    weather service.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个天气小部件，使用Yahoo Weather RSS服务来检索天气信息并显示当前的天气状况。我们将创建一个提供此功能的RPC服务，然后在我们的小部件中使用RPC来显示给定美国ZIP码的天气信息。此小部件的用户界面将包含当前天气状况的图像，以及通过Yahoo天气服务可用的所有其他与天气相关的信息。
- en: Time for Action—Creating a Weather Information Service
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-创建天气信息服务
- en: 'This widget will also be created in the same widgets project that we used to
    create the calendar widget in the previous section. The steps are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此小部件也将在我们在上一节中用来创建日历小部件的相同小部件项目中创建。步骤如下：
- en: 'Create a new Java file named `Weather.java` in the `com.packtpub.gwtbook.widgets.client`
    package. This class will encapsulate all the weather-related information for a
    given ZIP code, and will be used as the return parameter in the RPC service that
    we will create later on in this example. We can also use the recently added GWT
    support for client-side XML parsing to read an XML string returned to the client.
    We are going to learn about GWT''s XML support in[Chapter 9](ch09.html "Chapter 9. I18N
    and XML"). For now, we are going to use a simple object to encapsulate the returned
    weather information. This will enable us to focus on the custom widget functionality
    and keeps things simple. Create variables for each of the properties:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.widgets.client`包中创建一个名为`Weather.java`的新的Java文件。这个类将封装给定ZIP码的所有与天气相关的信息，并将用作我们稍后在本示例中创建的RPC服务的返回参数。我们还可以使用最近添加的GWT支持客户端XML解析来读取返回给客户端的XML字符串。我们将在[第9章](ch09.html
    "第9章。I18N和XML")中学习有关GWT的XML支持。现在，我们将使用一个简单的对象来封装返回的天气信息。这将使我们能够专注于自定义小部件功能并保持简单。为每个属性创建变量：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add methods for getting and setting the various weather-related properties
    for this class. Here are the methods to get and set chill, city, current condition,
    and current temperature:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加获取和设置此类的各种与天气相关的属性的方法。以下是获取和设置寒意、城市、当前状况和当前温度的方法：
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add methods to get and set direction, error, humidity, and image URL:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加获取和设置方向、错误、湿度和图像URL的方法：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add methods to get and set latitude, longitude, pressure, and barometer rising:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加获取和设置纬度、经度、压力和气压升高的方法：
- en: '[PRE31]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add methods to get and set speed, state, sunrise, and sunset values:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为获取和设置速度、状态、日出和日落值添加方法：
- en: '[PRE32]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add methods to get and set the visibility and the ZIP code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加获取和设置可见性和ZIP码的方法：
- en: '[PRE33]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create the `Weather()` constructor to create a `weather` object:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Weather()`构造函数来创建一个`weather`对象：
- en: '[PRE34]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a new Java file named `WeatherService.java` in the `com.packtpub.gwtbook.widgets.client`
    package. This is the service definition for the weather service. Define one method
    to retrieve the weather data by providing a ZIP code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.widgets.client`包中创建一个名为`WeatherService.java`的新的Java文件。这是天气服务的服务定义。定义一个方法，通过提供ZIP码来检索天气数据：
- en: '[PRE35]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create the asynchronous version of this service definition interface in a new
    Java file named `WeatherServiceAsync.java` in the `com.packtpub.gwtbook.widgets.client`
    package:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.widgets.client`包中的一个新的Java文件中创建此服务定义接口的异步版本，命名为`WeatherServiceAsync.java`：
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create the implementation of the weather service in a new Java file named `WeatherServiceImpl.java`
    in the `com.packtpub.gwtbook.widgets.server` package. We are going to use two
    third-party libraries from the `Dom4j` ([http://www.dom4j.org/](http://www.dom4j.org/))
    and `Jaxen` ([http://jaxen.codehaus.org/](http://jaxen.codehaus.org/)) projects
    in this sample, to make it easier for us to parse the Yahoo RSS feed. Download
    the current versions of these libraries to the `lib` folder. Add `dom4j-xxx.jar`
    and `jaxen-xxx.jar` in the `lib` folder to the `buildpath` for Eclipse. Add the
    necessary code to retrieve the weather data for a given ZIP code by accessing
    the Yahoo Weather RSS service in the `getWeather()` method.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.widgets.server`包中的一个新的Java文件`WeatherServiceImpl.java`中创建天气服务的实现。在这个示例中，我们将使用`Dom4j`（[http://www.dom4j.org/](http://www.dom4j.org/)）和`Jaxen`（[http://jaxen.codehaus.org/](http://jaxen.codehaus.org/)）项目中的两个第三方库，以便更容易地解析Yahoo
    RSS源。下载这些库的当前版本到`lib`文件夹中。将`dom4j-xxx.jar`和`jaxen-xxx.jar`添加到Eclipse的`buildpath`中。添加必要的代码来通过访问Yahoo
    Weather RSS服务检索给定ZIP码的天气数据。
- en: 'Create a SAX parser first:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个SAX解析器：
- en: '[PRE37]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Retrieve the RSS document for the provided ZIP code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索所提供的ZIP码的RSS文档：
- en: '[PRE38]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a new XPath expression and add the namespaces that we are interested
    in to the expression:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的XPath表达式，并将我们感兴趣的命名空间添加到表达式中：
- en: '[PRE39]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We will later on use this expression to access the data we need from the document.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将使用这个表达式来从文档中获取我们需要的数据。
- en: 'Select the root node in the retrieved XML document, and check for any errors.
    Return a `weather` object with an error message set, if any errors are found in
    the XML:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择检索到的XML文档中的根节点，并检查是否有任何错误。如果在XML中发现任何错误，则返回一个带有错误消息设置的`weather`对象：
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Select the description section using XPath, and then parse it to determine
    the URL for the image that pertains to the returned weather data. Set this information
    in the `ImageUrl` property of the `weather` object:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用XPath选择描述部分，然后解析它以确定与返回的天气数据相关的图像的URL。将这些信息设置在`weather`对象的`ImageUrl`属性中：
- en: '[PRE41]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Use XPath expressions to select all the data that we are interested in from
    the XML document, and set the various properties of the `weather` object. Finally,
    return the object as the return value from our service:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用XPath表达式从XML文档中选择我们感兴趣的所有数据，并设置`weather`对象的各种属性。最后，将对象作为我们服务的返回值返回：
- en: '[PRE42]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Our server-side implementation is now complete. Create a new Java file named
    `WeatherWidget.java` in the `com.packtpub.gwtbook.widgets.client` package that
    extends the `com.google.gwt.user.client.ui.Composite` class and implements the
    `com.google.gwt.user.client.ui.ChangeListener` interface:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的服务器端实现现在已经完成。在`com.packtpub.gwtbook.widgets.client`包中创建一个新的Java文件`WeatherWidget.java`，它扩展了`com.google.gwt.user.client.ui.Composite`类，并实现了`com.google.gwt.user.client.ui.ChangeListener`接口：
- en: '[PRE43]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In the `WeatherWidget` class, create panels for displaying the current weather
    image, conditions, along with atmospheric, wind, astronomical, and geographic
    measurements:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WeatherWidget`类中，创建用于显示当前天气图像、条件以及大气、风、天文和地理测量的面板：
- en: '[PRE44]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create labels for displaying all of this information, along with a textbox
    to allow users to enter the ZIP code of the place whose weather is to be displayed
    in the widget:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用于显示所有这些信息的标签，以及一个文本框，允许用户输入要在小部件中显示天气的地方的ZIP码：
- en: '[PRE45]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create and initialize the `WeatherService` object and set the entry-point URL
    for the weather service:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建和初始化`WeatherService`对象，并设置天气服务的入口URL：
- en: '[PRE46]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create the `WeatherWidget()` constructor. In the constructor, create the work
    panel; initialize the widget with our main panel and register to receive all change
    events:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`WeatherWidget()`构造函数。在构造函数中，创建工作面板；用我们的主面板初始化小部件，并注册接收所有更改事件：
- en: '[PRE47]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Set `id` for the work panel, and use the `Rico` library, as in the previous
    example, to round the corner for the panel:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为工作面板设置`id`，并像之前的示例一样使用`Rico`库来圆角面板：
- en: '[PRE48]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the requisite styles for each element and add the element to the various
    panels:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个元素添加必要的样式，并将元素添加到各个面板中：
- en: '[PRE49]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add all the panels to the main work panel:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有面板添加到主工作面板中：
- en: '[PRE50]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a small panel for inputting the ZIP code and a buffer panel to separate
    it from the rest of the panels that compose this widget. Finally invoke the `getAndRenderWeather()`
    method to get the weather information. Create this method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个小面板用于输入ZIP码，以及一个缓冲面板将其与组成此小部件的其他面板分开。最后调用`getAndRenderWeather()`方法来获取天气信息。创建这个方法：
- en: '[PRE51]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a private method named `getAndRenderWeather()` for getting the weather
    information from the service and displaying it in our user interface:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getAndRenderWeather()`的私有方法，用于从服务中获取天气信息并在我们的用户界面中显示它：
- en: '[PRE52]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add a private method that returns the display text based on the integer value
    of the rising attribute:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有方法，根据上升属性的整数值返回显示文本：
- en: '[PRE53]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add an event handler to get and render the new weather information when the
    user types in a new ZIP code in the textbox:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为文本框添加事件处理程序，当用户在文本框中输入新的ZIP码时，获取并渲染新的天气信息：
- en: '[PRE54]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Rebuild the `widgets.jar` file to contain the new weather widget. Now we can
    use our new JAR file to create a user interface that instantiates and uses this
    widget.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建`widgets.jar`文件以包含新的天气小部件。现在我们可以使用我们的新JAR文件来创建一个用户界面，实例化并使用这个小部件。
- en: 'Create the user interface for the weather widget application in a new Java
    file named `WeatherWidgetPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package in the `Samples` project. Create a work panel for holding the weather
    widget:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Samples`项目的`com.packtpub.gwtbook.samples.client.panels`包中的一个新的Java文件`WeatherWidgetPanel.java`中创建天气小部件应用的用户界面。创建一个用于容纳天气小部件的工作面板：
- en: '[PRE55]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In the constructor, create a new `WeatherWidget` and add it to the panel. Since
    we are already inheriting from the widgets module in the `Samples.gwt.xml` file,
    all the requisite classes should be resolved correctly. Create a little info panel
    that displays descriptive text about this application, so that we can display
    the text when this sample is selected in the list of available samples in our
    `Samples` application. Add the info panel and the work panel to a dock panel,
    and initialize the widget:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，创建一个新的`WeatherWidget`并将其添加到面板中。由于我们已经在`Samples.gwt.xml`文件中从widgets模块继承，所有必需的类应该被正确解析。创建一个小的信息面板，显示关于该应用程序的描述性文本，这样当我们在`Samples`应用程序的可用样本列表中选择该样本时，我们就可以显示文本。将信息面板和工作面板添加到一个停靠面板中，并初始化小部件：
- en: '[PRE56]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Here is a screenshot of the weather widget:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是天气小部件的屏幕截图：
- en: '![Time for Action—Creating a Weather Information Service](img/1007_07_05.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-创建天气信息服务](img/1007_07_05.jpg)'
- en: Type a new US ZIP code to see the weather conditions for that area.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个新的美国邮政编码以查看该地区的天气状况。
- en: What Just Happened?
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Yahoo! Weather provides weather data and information for a provided US ZIP code
    via RSS. **Really Simple Syndication** (**RSS**) is a lightweight XML format that
    was primarily designed for distributing web content such as headlines. The service
    provided can be accessed via a URL-based format and by providing the ZIP code
    as a parameter to the URL. The response is an XML message that can be parsed and
    searched for the required data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo!天气通过RSS为提供的美国邮政编码提供天气数据和信息。**真正简单的联合**（**RSS**）是一个轻量级的XML格式，主要用于分发网页内容，如头条。提供的服务可以通过基于URL的格式访问，并通过将ZIP码作为URL的参数来提供。响应是一个可以解析和搜索所需数据的XML消息。
- en: We create an RPC `WeatherService` that accesses the Yahoo service, parses the
    data, and provides it to us in the form of a simple `weather` object. This `Weather`
    class models the weather for a single ZIP code. Each instance of the `Weather`
    class contains the following attributes that are set by our `WeatherService:`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个RPC`WeatherService`，它访问Yahoo服务，解析数据，并以简单的`weather`对象的形式提供给我们。这个`Weather`类模拟了单个ZIP码的天气。`Weather`类的每个实例都包含以下由我们的`WeatherService`设置的属性：
- en: '`zipCode:` The ZIP code whose weather needs to be retrieved.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`邮政编码：` 需要检索天气的邮政编码。'
- en: '`currentTemp:` The current temperature.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`当前温度：` 当前温度。'
- en: '`currentConditions:` The text that reflects the current weather conditions.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`当前条件：` 反映当前天气状况的文本。'
- en: '`chill:` The wind chill for this location.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`寒冷：` 该位置的风寒。'
- en: '`direction:` The wind direction.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`方向：` 风向。'
- en: '`speed:` The current wind speed for this location.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`风速：` 该位置的当前风速。'
- en: '`humidity:` The current humidity for this location.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`湿度：` 该位置的当前湿度。'
- en: '`visibility:` The current visibility.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`能见度：` 当前的能见度。'
- en: '`pressure:` The current barometric pressure.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`气压：` 当前的气压。'
- en: '`rising:` Indicator to inform if the barometric pressure is rising, falling,
    or steady.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`上升：` 用于通知气压是上升、下降还是稳定的指示器。'
- en: '`sunrise:` Time of sunrise.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日出时间：` 日出时间。'
- en: '`sunset:` Time of sunset.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日落时间：` 日落时间。'
- en: '`latitude:` Latitude of this location.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`纬度：` 该位置的纬度。'
- en: '`longitude:` Longitude of this location.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`经度：` 该位置的经度。'
- en: '`city:` The city that corresponds to this ZIP code.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`城市：` 与该邮政编码对应的城市。'
- en: '`state:` The state that corresponds to this ZIP code.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`州：` 与该邮政编码对应的州。'
- en: '`imageUrl:` The URL for the image that represents the current weather conditions.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`图像URL：` 代表当前天气状况的图像的URL。'
- en: '`error:` If there is any error encountered while retrieving the weather information
    for a given ZIP code, this attribute is set. This enables the UI to display a
    message box with this error.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误：` 如果在检索给定ZIP码的天气信息时遇到任何错误，将设置此属性。这使得UI可以显示带有此错误的消息框。'
- en: 'We implement the `getWeather()` method in the `WeatherServiceImpl` class. We
    use classes from the `Dom4j` and `Jaxen` libraries in this service. This also
    means that we need to add the two JAR files for these projects to the `buildpath`
    for our Eclipse project. `Dom4j` is a fast and easy-to-use XML parser, which supports
    searching XML via XPath expressions. The XPath support is itself provided by classes
    from the `Jaxen` project. We retrieve the response XML document by calling the
    Yahoo weather service URL with a ZIP code parameter. The returned XML is searched
    using XPath expressions. We add namespaces for `yweather` and `geo` to the XPath
    expression, as some of the elements in the response XML are under this different
    namespace:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`WeatherServiceImpl`类中实现了`getWeather()`方法。在这个服务中，我们使用了`Dom4j`和`Jaxen`库中的类。这也意味着我们需要将这两个项目的两个JAR文件添加到Eclipse项目的`buildpath`中。`Dom4j`是一个快速且易于使用的XML解析器，支持通过XPath表达式搜索XML。XPath支持本身是由`Jaxen`项目的类提供的。我们通过使用ZIP码参数调用Yahoo天气服务URL来检索响应XML文档。使用XPath表达式搜索返回的XML。我们为XPath表达式添加了`yweather`和`geo`的命名空间，因为响应XML中的一些元素位于这个不同的命名空间下：
- en: '[PRE57]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We then search the response using XPath, get the value we are interested in,
    and set the appropriate attribute for the `weather` object. So for instance, here
    is how we get the value for the city and state for this location, and set those
    properties for the `weather` object:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用XPath搜索响应，获取我们感兴趣的值，并为`weather`对象设置适当的属性。例如，这是我们如何获取该位置的城市和州的值，并为`weather`对象设置这些属性的方式：
- en: '[PRE58]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We have to do something different for getting the image URL with the image
    for the current conditions. This URL is embedded in a CDATA section in the response.
    So we use an XPath expression to get the text for this node, and then access the
    substring that contains the `IMG` tag that we are looking for:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须采取不同的方法来获取当前条件的图像URL。这个URL嵌入在响应的CDATA部分中。因此，我们使用XPath表达式来获取此节点的文本，然后访问包含我们正在寻找的`IMG`标签的子字符串：
- en: '[PRE59]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The `weather` object with all these properties set is returned as the response
    from a call to this service. We now create our actual widget that will utilize
    and call this service. The user interface consists of a nice rounded panel that
    contains the following components:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 带有所有这些属性设置的`weather`对象作为对此服务调用的响应返回。现在我们创建我们的实际小部件，它将利用并调用此服务。用户界面由一个包含以下组件的漂亮圆角面板组成：
- en: An image for the current conditions—the image URL.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于当前条件的图像——图像URL。
- en: The actual text for the current condition—such as cloudy, sunny, etc.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际的当前条件文本——如多云、晴等。
- en: The current temperature.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前温度。
- en: A section for displaying the current wind conditions—chill, direction, and speed.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于显示当前风况的部分——风寒、方向和速度。
- en: A section for displaying the current atmospheric conditions—humidity, visibility,
    and the barometric pressure and its direction of change.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于显示当前大气条件的部分——湿度、能见度和气压及其变化方向。
- en: A section for displaying the current astronomical data—sunrise and sunset.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于显示当前天文数据的部分——日出和日落。
- en: A section for displaying the current geographic data—latitude and longitude
    for this location.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于显示当前地理数据的部分——该位置的纬度和经度。
- en: A textbox for entering a new ZIP code.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于输入新邮政编码的文本框。
- en: 'The temperature is displayed in degrees, and the degrees symbol is shown by
    using the entity version—`&deg;`—in the code. So we display the current temperature
    in the widget like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 温度以度数显示，并且度数符号在代码中通过实体版本`&deg;`显示。因此，我们在小部件中显示当前温度如下：
- en: '[PRE60]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The service is invoked asynchronously when this widget is initialized, and
    the corresponding display elements are set with their values when the response
    is received from the `WeatherService`. We recreate the JAR file, to contain this
    widget too, and then use this widget in the `Samples` project by instantiating
    it and adding it to a panel. Since we had already added the `widgets.jar` file
    to the `classpath` in the previous section, it should already be available to
    use in the `Samples` project. This sample is more complex than the calendar widget
    because it also includes an RPC service, in addition to the user interface. So
    when we use it, we need to add an entry for the service from this widget to the
    module XML file of the project, where the widget will be used:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当初始化此小部件时，服务被异步调用，当从`WeatherService`接收到响应时，相应的显示元素将被设置为它们的值。我们重新创建JAR文件，以包含此小部件，并在`Samples`项目中使用此小部件，通过实例化它并将其添加到面板中。由于我们已经在上一节中将`widgets.jar`文件添加到了`classpath`中，因此它应该已经可以在`Samples`项目中使用。这个示例比日历小部件更复杂，因为它除了用户界面外还包括了一个RPC服务。因此，当我们使用它时，我们需要在项目的模块XML文件中为来自该小部件的服务添加一个条目，该小部件将被使用：
- en: '[PRE61]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about creating and reusing custom widgets.
    We created a calendar widget, where we could navigate forward and backward, and
    come back to the present date.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建和重用自定义小部件。我们创建了一个日历小部件，可以在其中向前和向后导航，并返回到当前日期。
- en: Then, we created a weather widget, which provided a weather information service
    for a particular place.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个天气小部件，为特定地点提供了天气信息服务。
- en: In the next chapter, we will learn how to create and run unit tests for testing
    GWT applications and RPC services.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为测试GWT应用程序和RPC服务创建和运行单元测试。
