- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Deploying Spring Boot and the Angular App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Spring Boot 和 Angular 应用程序
- en: In the previous chapter, we learned what `frontend-maven-plugin` does and what
    we use it for. Then, we learned what configuration to write to run the Angular
    application within the Spring Boot application. After that, we learned how to
    package the two applications as one file. Lastly, we learned how to run the Spring
    Boot application with Angular.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了 `frontend-maven-plugin` 的作用以及我们用它来做什么。然后，我们学习了在 Spring Boot 应用程序内运行
    Angular 应用程序所需的配置。之后，我们学习了如何将两个应用程序打包成一个文件。最后，我们学习了如何使用 Angular 运行 Spring Boot
    应用程序。
- en: This chapter will teach you the basics of GitHub Actions, the basics of Heroku,
    and how to deploy the app using Heroku.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍 GitHub Actions 的基础知识、Heroku 的基础知识以及如何使用 Heroku 部署应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding GitHub Actions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 GitHub Actions
- en: Components of GitHub Actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions 的组件
- en: Setting up Heroku
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Heroku
- en: Creating a CI workflow or pipeline
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 CI 工作流程或管道
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接将带您到本章的完成版本：[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes)。
- en: Understanding GitHub Actions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 GitHub Actions
- en: Let’s start by defining **GitHub Actions**. This platform provides workflow
    automation for developers and operations for **continuous integration and continuous
    delivery** (**CI/CD**). It can run a series of actions using scripts whenever
    someone creates a pull request, creates an issue, joins as a contributor, merges
    a pull request, and so on. In short, there are several events in your GitHub workflow
    that you can use to run a set of specific actions or scripts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从定义 **GitHub Actions** 开始。这个平台为开发者和运维人员提供工作流程自动化，以及 **持续集成和持续交付**（**CI/CD**）。每当有人创建拉取请求、创建问题、成为贡献者、合并拉取请求等时，它都可以使用脚本运行一系列操作。简而言之，在您的
    GitHub 工作流程中存在多个事件，您可以使用这些事件来运行一组特定的操作或脚本。
- en: Now, let’s review some of the components of GitHub Actions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下 GitHub Actions 的组件。
- en: Components of GitHub Actions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 的组件
- en: Now that we’ve learned what GitHub Actions is, let’s see the components of GitHub
    Actions that help us do DevOps and run workflows when events get triggered.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 GitHub Actions 是什么，让我们看看 GitHub Actions 的组件，这些组件有助于我们在事件触发时进行 DevOps
    和运行工作流程。
- en: 'Here are the components of GitHub Actions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 GitHub Actions 的组件：
- en: '`.github/workflows`, that runs jobs manually, automatically triggers an event,
    or does so by setting a schedule.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.github/workflows`，可以手动运行作业、自动触发事件或通过设置计划来实现。'
- en: '`pull_request`, `push`, and `schedule`. However, other events can be useful,
    depending on your needs.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull_request`、`push` 和 `schedule`。然而，根据您的需求，其他事件也可能很有用。'
- en: '**Jobs**: A job is a set or group of steps (script or action) in a workflow.
    A particular job executes in the same runner throughout the steps.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业**：作业是工作流程中一系列步骤（脚本或操作）的集合。特定的作业在整个步骤中在同一个运行器上执行。'
- en: '**Actions**: An action performs the task at hand or anything you need, such
    as checking out your repository, building your application, testing your application,
    scanning your code for any vulnerabilities, or deploying your application.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：操作执行当前任务或您需要的任何内容，例如检出您的存储库、构建您的应用程序、测试您的应用程序、扫描您的代码以查找任何漏洞或部署您的应用程序。'
- en: '**Runners**: Runners are just servers. You can choose Ubuntu Linux, Microsoft
    Windows, or macOS runners in GitHub Actions. However, you are not limited to these
    three operating systems. You can also have self-hosted runners.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行器**：运行器只是服务器。在 GitHub Actions 中，您可以选择 Ubuntu Linux、Microsoft Windows 或
    macOS 运行器。然而，您并不局限于这三种操作系统。您还可以拥有自托管的运行器。'
- en: These are the components of GitHub Actions that we will use later in the *Creating
    a CI workflow or pipeline* section. But before that, we will set up Heroku, where
    we will deploy our full-stack application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在 *创建 CI 工作流程或管道* 部分中使用的 GitHub Actions 组件。但在那之前，我们将设置 Heroku，在那里我们将部署我们的全栈应用程序。
- en: Setting up Heroku
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Heroku
- en: In this section, we will use Heroku. It is a **Platform-as-a-Service** (**PaaS**)
    offering that lets us build and run applications in the cloud. Let’s learn how
    to set up Heroku and our applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Heroku。它是一个 **平台即服务**（**PaaS**）提供程序，允许我们在云中构建和运行应用程序。让我们学习如何设置 Heroku
    和我们的应用程序。
- en: Creating GitHub and Heroku accounts
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建GitHub和Heroku账户
- en: In this section, we will create an account for GitHub and then Heroku.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为GitHub和Heroku创建账户。
- en: First, we must create a GitHub account by going to [https://github.com/](https://github.com/).
    We will use this as the repository for our project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须通过访问[https://github.com/](https://github.com/)来创建一个GitHub账户。我们将将其用作我们项目的仓库。
- en: Then, we must create a Heroku account by going to [https://www.heroku.com/](https://www.heroku.com/).
    This is where we will deploy our application and create an instance of our database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须通过访问[https://www.heroku.com/](https://www.heroku.com/)来创建一个Heroku账户。这是我们部署应用和创建数据库实例的地方。
- en: Creating a new app in Heroku
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Heroku创建新应用
- en: 'After signing in to Heroku, click the **New** button at the top-right corner
    of the page and click the **Create new app** button to create an app without a
    pipeline:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Heroku登录后，点击页面右上角的**新建**按钮，然后点击**创建新应用**按钮来创建一个不带管道的应用：
- en: '![Figure 17.1 – Create new app](img/B18159_17_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图17.1 – 创建新应用](img/B18159_17_01.jpg)'
- en: Figure 17.1 – Create new app
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1 – 创建新应用
- en: '*Figure 17**.1* is where you create a new app for the full-stack application.
    Name the app anything you wish and choose a region, but don’t add a pipeline.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.1*是您创建全栈应用新应用的地方。您可以给应用起任何名字，并选择一个区域，但不要添加管道。'
- en: Next, we will add a database for our full-stack application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的全栈应用添加一个数据库。
- en: Adding a Postgres database
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Postgres数据库
- en: 'Now, let’s add a Postgres database:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个Postgres数据库：
- en: 'Go to the **Resources** tab and click the **Find more** **add-ons** button:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**资源**标签页并点击**查找更多插件**按钮：
- en: '![Figure 17.2 – Find more add-ons](img/B18159_17_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图17.2 – 查找更多插件](img/B18159_17_02.jpg)'
- en: Figure 17.2 – Find more add-ons
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2 – 查找更多插件
- en: '*Figure 17**.2* shows where you can find the **Find more add-ons** button.
    This is where you can find Heroku add-ons and various tools and services for developing,
    extending, and operating your application. An example of this can be seen in *Figure
    17**.3*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.2*显示了您可以找到**查找更多插件**按钮的位置。这是您可以找到Heroku插件以及用于开发、扩展和运行您应用程序的各种工具和服务的位置。一个例子可以在*图17.3*中看到：'
- en: '![Figure 17.3 – Heroku Postgres](img/B18159_17_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图17.3 – Heroku Postgres](img/B18159_17_03.jpg)'
- en: Figure 17.3 – Heroku Postgres
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 – Heroku Postgres
- en: '*Figure 17**.3* shows the Heroku Postgres add-on, which is a **Database-as-a-Service**
    (**DaaS**) offering based on PostgreSQL. Click it, install it, and then choose
    the free plan and provision the Heroku Postgres add-on to the full-stack application
    you created earlier. Then, click the **Submit Order** **Form** button.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.3*显示了Heroku Postgres插件，这是一个基于PostgreSQL的**数据库即服务**（**DaaS**）提供。点击它，安装它，然后选择免费计划并将Heroku
    Postgres插件配置到您之前创建的全栈应用中。然后，点击**提交订单表单**按钮。'
- en: Go back to the **Resources** tab of your app. You should see the Heroku Postgres
    add-on. Click the Heroku part of **Heroku Postgres**; a new tab will open.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您应用的**资源**标签页。您应该能看到Heroku Postgres插件。点击**Heroku Postgres**中的Heroku部分；将打开一个新标签页。
- en: We have almost finished adding a database. We just need to add a Dataclip, which
    will let us create SQL queries for our database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了数据库的添加。我们只需要添加一个数据剪辑，这将使我们能够为数据库创建SQL查询。
- en: 'Go ahead and click the **Create Dataclip** button. Then, add the following
    SQL queries:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**创建数据剪辑**按钮。然后，添加以下SQL查询：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once you’ve added these SQL queries to the editor, click **Save &** **Run**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦将这些SQL查询添加到编辑器中，点击**保存并运行**。
- en: With that, the database has been created. Now, let’s create a `system.properties`
    file where we can declare the Java runtime version and Maven version.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，数据库就创建完成了。现在，让我们创建一个`system.properties`文件，在那里我们可以声明Java运行时版本和Maven版本。
- en: Adding system properties
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加系统属性
- en: In this section, we will create a file that will specify a Java version and
    a Maven version using `system.properties`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个文件，该文件将使用`system.properties`指定Java版本和Maven版本。
- en: 'Go to the root directory of the Spring Boot application and create a file called
    `system.properties`. Then, add the following configurations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 进入Spring Boot应用的根目录，创建一个名为`system.properties`的文件。然后，添加以下配置：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding two configurations will be used in the deployment part of the
    full-stack application in Heroku.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的两个配置将在Heroku全栈应用部署部分使用。
- en: In the next section, we will get the domain URL of our app and add it to the
    config variables.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将获取我们应用的域名URL并将其添加到配置变量中。
- en: Adding config variables
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加配置变量
- en: 'In this section, we are going to add config variables in Heroku. In our repository,
    we will add `CLIENT_URL` to Heroku’s `config vars` section and the `environment.prod.ts`
    file for the frontend application. Follow these steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向 Heroku 添加配置变量。在我们的仓库中，我们将向 Heroku 的 `config vars` 部分添加 `CLIENT_URL`
    以及前端应用程序的 `environment.prod.ts` 文件。按照以下步骤操作：
- en: 'The first step is to get the application’s domain name, which can be found
    by going to the **Settings** tab:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是获取应用程序的域名，这可以通过前往 **设置** 选项卡来实现：
- en: '![Figure 17.4 – Application URL](img/B18159_17_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.4 – 应用程序 URL](img/B18159_17_04.jpg)'
- en: Figure 17.4 – Application URL
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.4 – 应用程序 URL
- en: '*Figure 17**.4* shows the application URL where the application will render.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.4* 展示了应用程序将渲染的应用程序 URL。'
- en: 'Copy the URL of your full-stack application and go to the **Config Vars** area
    of the **Settings** tab. Click on the **Reveal Config** **Vars** button:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制你全栈应用程序的 URL 并前往 **设置** 选项卡的 **配置变量** 区域。点击 **显示配置变量** 按钮：
- en: '![Figure 17.5 – Reveal Config Vars](img/B18159_17_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.5 – 显示配置变量](img/B18159_17_05.jpg)'
- en: Figure 17.5 – Reveal Config Vars
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.5 – 显示配置变量
- en: 'Add `CLIENT_URL` as a **Key** and add the URL of the application as a **Value**:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `CLIENT_URL` 作为 **键** 添加，并将应用程序的 URL 作为 **值** 添加：
- en: '![Figure 17.6 – Edit config variable](img/B18159_17_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.6 – 编辑配置变量](img/B18159_17_06.jpg)'
- en: Figure 17.6 – Edit config variable
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.6 – 编辑配置变量
- en: '*Figure 17**.6* shows the form after adding environment variables or configuration
    variables.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.6* 展示了添加环境变量或配置变量后的表单。'
- en: Don’t forget to add a value to your JWT secret. However, note that your development
    and production environments should differ.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记给你的 JWT 密钥添加一个值。然而，请注意你的开发和生产环境应该不同。
- en: 'Now, open the `environment.prod.ts` file and add the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `environment.prod.ts` 文件并添加以下代码：
- en: '[PRE19]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code will replace the previous `localhost:8080` address of `apiURL`
    and `authURL` in the Angular application in production.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将替换 Angular 应用程序在生产中的 `apiURL` 和 `authURL` 的先前 `localhost:8080` 地址。
- en: Next, we need to publish the full-stack application repository to GitHub since
    we will deploy the application through GitHub source control.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将全栈应用程序仓库发布到 GitHub，因为我们将通过 GitHub 源控制来部署应用程序。
- en: Manual deployment in Heroku
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku 的手动部署
- en: 'In this section, we are going to check if the application will run without
    any problems after we deploy it. Follow these steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查部署后应用程序是否会无任何问题地运行。按照以下步骤操作：
- en: 'To do that, go to the **Deploy** tab of your application in the Heroku dashboard:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了做到这一点，前往 Heroku 控制台中应用程序的 **部署** 选项卡：
- en: '![Figure 17.7 – Deploying the application](img/B18159_17_07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.7 – 部署应用程序](img/B18159_17_07.jpg)'
- en: Figure 17.7 – Deploying the application
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.7 – 部署应用程序
- en: '*Figure 17**.7* shows where to deploy an application via the Heroku dashboard
    manually. Use GitHub as the deployment method, then search your repository.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.7* 展示了如何通过 Heroku 控制台手动部署应用程序。使用 GitHub 作为部署方法，然后搜索你的仓库。'
- en: 'After choosing the repository of your full-stack application, go to the bottom
    of the page, where you will find the **Manual deploy** section. Then, press the
    **Deploy Branch** button to start deploying and running the application in Heroku:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择你的全栈应用程序的仓库后，前往页面底部，在那里你会找到 **手动部署** 部分。然后，点击 **部署分支** 按钮以开始部署并在 Heroku 上运行应用程序：
- en: '![Figure 17.8 – Manual deploy](img/B18159_17_08.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.8 – 手动部署](img/B18159_17_08.jpg)'
- en: Figure 17.8 – Manual deploy
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.8 – 手动部署
- en: '*Figure 17**.8* shows the **Manual deploy** section of Heroku.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.8* 展示了 Heroku 的 **手动部署** 部分。'
- en: To check if everything is working, wait for the deployment to finish and then
    go to the URL of the application.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查一切是否正常工作，等待部署完成，然后前往应用程序的 URL。
- en: 'Register a new user and try to sign in. Make sure you open the **Network**
    tab of your browser; you will see that the requests are being sent via the application’s
    URL. Note that the responses from the server have a **Status Code** of **200**
    or **201**:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册一个新用户并尝试登录。确保你打开浏览器中的 **网络** 选项卡；你会看到请求是通过应用程序的 URL 发送的。请注意，服务器的响应具有 **状态码**
    为 **200** 或 **201**：
- en: '![Figure 17.9 – The Network tab of Google Chrome](img/B18159_17_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.9 – Google Chrome 的网络选项卡](img/B18159_17_09.jpg)'
- en: Figure 17.9 – The Network tab of Google Chrome
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.9 – Google Chrome 的网络选项卡
- en: '*Figure 17**.9* shows Google Chrome’s **Network** tab in developer tools. Here,
    you can see that the **register** request returns **Status Code 201**. The Angular,
    Spring Boot, and Heroku Postgres database works perfectly.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.9*显示了开发者工具中Google Chrome的**网络**标签。在这里，您可以看到**注册**请求返回**状态码201**。Angular、Spring
    Boot和Heroku Postgres数据库运行得非常好。'
- en: Now that we’ve finished manually deploying our full-stack application, let’s
    create an automated deployment using workflow in GitHub Actions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经手动部署了我们的全栈应用，让我们使用GitHub Actions中的工作流程创建一个自动部署。
- en: Creating a CI workflow or pipeline
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建CI工作流程或管道
- en: 'In this section, we will automate the deployment of our full-stack application
    by using a workflow in GitHub Actions. Follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过使用GitHub Actions中的工作流程来自动化我们的全栈应用部署。请按照以下步骤操作：
- en: 'Go to the GitHub repository of your project, then click on the `Publish Java
    Package` and pick the Maven workflow:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您项目的GitHub仓库，然后点击**发布Java包**并选择Maven工作流程：
- en: '![Figure 17.10 – Selecting a workflow](img/B18159_17_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图17.10 – 选择工作流程](img/B18159_17_10.jpg)'
- en: Figure 17.10 – Selecting a workflow
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10 – 选择工作流程
- en: '*Figure 17**.10* shows the basic and ready-made Maven workflow for building
    Maven projects.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.10*显示了构建Maven项目的Maven工作流程的基本和现成配置。'
- en: 'Change the content of the YAML file in the editor by replacing it with the
    following YAML configuration:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过替换以下YAML配置来编辑编辑器中的YAML文件内容：
- en: '[PRE28]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The preceding code is the workflow for our full-stack application’s CI/CD. It’s
    called `CICD` because that’s what this workflow is for.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是我们全栈应用CI/CD的工作流程。它被称为`CICD`，因为这就是这个工作流程的目的。
- en: The workflow has one event, `push`, which will cause the workflow to run if
    there’s a push in the master branch.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程有一个事件，`push`，如果master分支有推送操作，将导致工作流程运行。
- en: 'The workflow also has two jobs: `test` and `deploy`. The `test` job’s steps
    are to check out the code, build the application using Java 17, and run the test.
    On the other hand, the `deploy` job’s steps are to check out the code and use
    the Heroku deploy action, which requires a Heroku API key, the application’s name,
    and the Heroku account’s email.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程还有两个作业：`test`和`deploy`。`test`作业的步骤是检出代码，使用Java 17构建应用程序并运行测试。另一方面，`deploy`作业的步骤是检出代码并使用需要Heroku
    API密钥、应用程序名称和Heroku账户电子邮件的Heroku部署操作。
- en: 'For the Heroku API key, you need to go to the **Account settings** menu of
    your profile on your Heroku dashboard:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Heroku API密钥，您需要前往Heroku仪表板您个人资料的**账户设置**菜单：
- en: '![Figure 17.11 – Account settings](img/B18159_17_11.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图17.11 – 账户设置](img/B18159_17_11.jpg)'
- en: Figure 17.11 – Account settings
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.11 – 账户设置
- en: '*Figure 17**.11* shows the **Account settings** menu under my profile on the
    Heroku dashboard.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.11*显示了在Heroku仪表板我的个人资料下的**账户设置**菜单。'
- en: 'Click **Account settings**, then go to **API Key** and generate an API key:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**账户设置**，然后转到**API密钥**并生成一个API密钥：
- en: '![Figure 17.12 – API Key](img/B18159_17_12.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图17.12 – API密钥](img/B18159_17_12.jpg)'
- en: Figure 17.12 – API Key
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.12 – API密钥
- en: '*Figure 17**.12* shows where you can generate a Heroku API key.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.12*显示了您可以在其中生成Heroku API密钥的位置。'
- en: Copy the Heroku API key since you will need to create a new Actions secret for
    GitHub Actions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 复制Heroku API密钥，因为您需要为GitHub Actions创建一个新的动作密钥。
- en: To do so, go to the GitHub repository of your application and open a new browser
    tab for the **Settings** tab so that you don’t lose your workflow configuration.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要这样做，请前往您应用的GitHub仓库，并为**设置**标签打开一个新的浏览器标签页，以免丢失您的流程配置。
- en: 'Then, add the API key in the text area and name it `HEROKU_API_KEY`. This is
    the key you will be using in the `deploy` job of your workflow:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在文本区域中添加API密钥并将其命名为`HEROKU_API_KEY`。这是您将在工作流程的`deploy`作业中使用的关键：
- en: '![Figure 17.13 – The Actions secrets form](img/B18159_17_13.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图17.13 – 动作密钥表单](img/B18159_17_13.jpg)'
- en: Figure 17.13 – The Actions secrets form
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.13 – 动作密钥表单
- en: '*Figure 17**.13* shows where you can add a new Actions secret to keep your
    sensitive values from being copied or read by anyone.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*图17.13*显示了您可以在其中添加新的动作密钥以防止敏感值被复制或被任何人读取的位置。'
- en: 'Once you’ve added a new secret, go back to your browser tab, where you start
    editing your workflow. Then, commit the file that you are editing:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您添加了新的密钥，请返回您的浏览器标签页，在那里您开始编辑您的流程。然后，提交您正在编辑的文件：
- en: '![Figure 17.14 – Committing a workflow](img/B18159_17_14.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图17.14 – 提交工作流程](img/B18159_17_14.jpg)'
- en: Figure 17.14 – Committing a workflow
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.14 – 提交工作流程
- en: '*Figure 17**.14* shows the `git pull` it later so that it will be on your local
    machine.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.14* 展示了 `git pull` 后它将出现在你的本地机器上。'
- en: '`CICD` will kick in after you commit to your workflow. You can look at the
    progress of your CI/CD workflow by going to the **Actions** tab:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你提交到工作流后，`CICD` 将启动。你可以通过转到 **动作** 选项卡来查看 CI/CD 工作流的进度：
- en: '![Figure 17.15 – Workflow status](img/B18159_17_15.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.15 – 工作流状态](img/B18159_17_15.jpg)'
- en: Figure 17.15 – Workflow status
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.15 – 工作流状态
- en: '*Figure 17**.15* shows the current status of the CI/CD workflow. You can see
    that it is running the **Build and** **Test** job.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.15* 展示了 CI/CD 工作流的当前状态。你可以看到它正在运行 **构建和测试** 作业。'
- en: 'You can also see what’s happening in a particular job by clicking the name
    of the job via the left sidebar menu:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过点击左侧侧边栏菜单中的职位名称来查看特定工作的进展情况：
- en: '![Figure 17.16 – Steps and Actions status](img/B18159_17_16.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.16 – 步骤和动作状态](img/B18159_17_16.jpg)'
- en: Figure 17.16 – Steps and Actions status
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.16 – 步骤和动作状态
- en: '*Figure 17**.16* shows the output logs from each step in the **Build and Test**
    job. You can also use this part of GitHub Actions to debug errors that lead to
    the jobs and actions failing.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.16* 展示了 **构建和测试** 作业中每个步骤的输出日志。你还可以使用 GitHub Actions 的这部分来调试导致作业和动作失败的错误。'
- en: 'After running all the jobs in the CI/CD workflow you have created, you will
    see that the workflow has a green check icon next to it, meaning that the workflow
    has passed and everything is working:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行了你创建的 CI/CD 工作流中的所有作业后，你将看到工作流旁边有一个绿色的勾选图标，这意味着工作流已经通过，一切正常：
- en: '![Figure 17.17 – Steps and Actions status](img/B18159_17_17.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.17 – 步骤和动作状态](img/B18159_17_17.jpg)'
- en: Figure 17.17 – Steps and Actions status
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.17 – 步骤和动作状态
- en: '*Figure 17**.17* shows a passing GitHub workflow on the **Actions** tab of
    your repository.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.17* 展示了你的仓库 **动作** 选项卡上的一个通过状态的 GitHub 工作流。'
- en: 'Lastly, to check if the deployment automation has deployed our application
    in the Heroku cloud, we have to go back to the overview dashboard of Heroku and
    look for the latest activity:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了检查部署自动化是否已将我们的应用程序部署到 Heroku 云中，我们必须回到 Heroku 的概览仪表板并查找最新的活动：
- en: '![Figure 17.18 – Build succeeded in the Latest activity area of an account
    in Heroku](img/B18159_17_18.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.18 – 在 Heroku 账户的最新活动区域中构建成功](img/B18159_17_18.jpg)'
- en: Figure 17.18 – Build succeeded in the Latest activity area of an account in
    Heroku
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.18 – 在 Heroku 账户的最新活动区域中构建成功
- en: '*Figure 17**.18* shows that the build triggered by GitHub Actions succeeded.
    You can see that the application is running correctly.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17.18* 展示了由 GitHub Actions 触发的构建成功。你可以看到应用程序正在正常运行。'
- en: With that, we have managed to automate our CI/CD workflow using GitHub Actions.
    Now, let’s summarize what we have learned in this chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经成功使用 GitHub Actions 自动化了我们的 CI/CD 工作流。现在，让我们总结一下在这一章中学到的内容。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With that, we have reached the last chapter of this book; let’s recap the valuable
    things you have learned in this chapter.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经到达了这本书的最后一章；让我们回顾一下你在这一章中学到的宝贵知识。
- en: First, you learned that GitHub Actions makes it easy to automate all your software
    workflows and perform CI/CD. You can build, test, and deploy your code right from
    GitHub. You also learned that Heroku is a PaaS that lets you build, run, and operate
    applications entirely in the cloud. Heroku Postgres is a managed SQL database
    service provided directly by Heroku that you can use for your applications.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你了解到 GitHub Actions 可以轻松自动化所有软件工作流并执行 CI/CD。你可以在 GitHub 上直接构建、测试和部署你的代码。你还了解到
    Heroku 是一个 PaaS，它允许你完全在云端构建、运行和操作应用程序。Heroku Postgres 是 Heroku 直接提供的托管 SQL 数据库服务，你可以将其用于你的应用程序。
- en: So, you’ve made it this far. Thank you for finishing the book; I am proud of
    you and your enthusiasm for learning new tools and things. You can apply what
    you have learned here to a project, given that the requirements of your project
    match the problems and solutions you have learned about in this book.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你已经走到了这一步。感谢你完成这本书；我为你的热情和对学习新工具和事物的热情感到自豪。只要你项目的需求与你在本书中学到的问题和解决方案相匹配，你就可以将在这里学到的知识应用到项目中。
- en: This course has taught you how to build a Spring Boot 2 application and an Angular
    13 application as a senior developer, bringing value to your companies, customers,
    and clients.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这门课程教你如何作为一个高级开发者构建 Spring Boot 2 应用程序和 Angular 13 应用程序，为公司、客户和客户带来价值。
- en: As a next step, my recommendation is that you get a new Packt book about standalone
    Spring Boot 2 or Spring Boot 3, or an Angular book to solidify what you have learned
    from this book.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一步的建议，我推荐你购买一本关于独立Spring Boot 2或Spring Boot 3的新Packt书籍，或者一本Angular书籍，以巩固从这本书中学到的知识。
- en: On behalf of the Packt team and editors, we wish you all the best in all stages
    of your career and life.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 代表Packt团队和编辑们，我们祝愿你在职业生涯和生活的各个阶段都一切顺利。
