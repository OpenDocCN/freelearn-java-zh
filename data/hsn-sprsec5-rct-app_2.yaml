- en: Deep Diving into Spring Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Spring Security
- en: This is a hands-on book, but our first chapter was theoretical (as it should
    be) because it was an introductory chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本实用的书，但我们的第一章是理论性的（应该是这样），因为它是一个介绍性的章节。
- en: In this chapter, we will dive deeply into the technical capabilities of Spring
    Security, specifically authentication and authorization, using code. However,
    before we get into the coding, we will give a brief explanation of the theory.
    We are doing this because it is important to understand the concepts before diving
    into coding.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨Spring Security的技术能力，特别是认证和授权，使用代码。然而，在进入编码之前，我们将简要解释理论。我们这样做是因为在深入编码之前理解概念是很重要的。
- en: 'The two most important aspects of security are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安全的两个最重要方面如下：
- en: Find the identity of the user
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找用户的身份
- en: Find what resources this user has access to
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找该用户可以访问的资源
- en: 'authentication is the mechanism by which you find out who a user is, and authorization
    is the mechanism that allows an application to find out what the user can do with
    the application:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是找出用户是谁的机制，授权是允许应用程序找出用户对应用程序可以做什么的机制：
- en: '![](img/ac322b64-46ba-4e10-8764-c3449f298df3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac322b64-46ba-4e10-8764-c3449f298df3.png)'
- en: 'Figure 01: Fundamental aspects of security—Authentication and Authorization'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图01：安全的基本方面——认证和授权
- en: 'In this chapter we will cover the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Authentication
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Authentication mechanisms
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证机制
- en: Authorization
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权
- en: Authentication
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: One of the fundamental ways to secure a resource is to make sure that the caller
    is who they claim to be. This process of checking credentials and making sure
    that they are genuine is called **authentication**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 保护资源的一个基本方法是确保调用者是其所声称的身份。检查凭据并确保它们是真实的过程称为**认证**。
- en: 'The following diagram shows the fundamental process Spring Security uses to
    address this core security requirement. The figure is generic and can be used
    to explain all the various authentication methods that the framework supports:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了Spring Security用于解决这一核心安全需求的基本过程。该图是通用的，可用于解释框架支持的各种认证方法：
- en: '![](img/35829f9b-bc45-453d-b3c9-8d3f78cf8f3c.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35829f9b-bc45-453d-b3c9-8d3f78cf8f3c.png)'
- en: 'Figure 02: Authentication architecture'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图02：认证架构
- en: As detailed in [Chapter 1](bb1f1c6e-a9a4-4a14-aff4-3510fbfa7d14.xhtml), *Overview
    of Spring 5 and Spring Security 5* (in the *Working of Spring Security* section),
    Spring Security has a series of servlet filters (a filter chain). When a request
    reaches the server, it is intercepted by this series of filters (*Step 1* in the
    preceding diagram).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](bb1f1c6e-a9a4-4a14-aff4-3510fbfa7d14.xhtml)中所述，*Spring 5和Spring Security
    5概述*（在*Spring Security的工作方式*部分），Spring Security具有一系列Servlet过滤器（过滤器链）。当请求到达服务器时，它会被这一系列过滤器拦截（在前面的图中的*Step
    1*）。
- en: In the reactive world (with the new Spring WebFlux web application framework),
    filters are written quite differently than traditional filters (such as those
    used in the Spring MVC web application framework). Having said that, the fundamental
    mechanism remains the same for both. We have a dedicated chapter explaining how
    to convert a Spring Security application to Spring MVC and Spring WebFlux where
    we will cover these aspects in a bit more detail.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应式世界中（使用新的Spring WebFlux web应用程序框架），过滤器的编写方式与传统过滤器（例如Spring MVC web应用程序框架中使用的过滤器）有很大不同。尽管如此，对于两者来说，基本机制仍然保持不变。我们有一个专门的章节来解释如何将Spring
    Security应用程序转换为Spring MVC和Spring WebFlux，在那里我们将更详细地涵盖这些方面。
- en: 'The Servlet filter code execution in the filter chain keeps skipping until
    the right filter is reached. Once it reaches the right authentication filter based
    on the authentication mechanism used, it extracts the supplied credentials (most
    commonly a username and password) from the caller. Using the supplied values (here,
    we have a username and password), the filter (`UsernamePasswordAuthenticationFilter`)
    creates an `Authentication` object (in the preceding diagram, `UsernamePasswordAuthenticationToken`
    is created using the username and password supplied in *Step 2*). The `Authentication`
    object created in *Step 2* is then used to call the `authenticate` method in the`AuthenticationManager`
    interface:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在过滤器链中，Servlet过滤器代码执行会一直跳过，直到达到正确的过滤器。一旦到达基于使用的认证机制的正确认证过滤器，它会从调用者中提取提供的凭据（通常是用户名和密码）。使用提供的值（在这里，我们有用户名和密码），过滤器（`UsernamePasswordAuthenticationFilter`）创建一个`Authentication`对象（在前面的图中，使用*Step
    2*中提供的用户名和密码创建了`UsernamePasswordAuthenticationToken`）。然后，*Step 2*中创建的`Authentication`对象用于调用`AuthenticationManager`接口中的`authenticate`方法：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The actual implementation is provided by *ProviderManager*, which has a list
    of configured `AuthenticationProvider`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的实现由*ProviderManager*提供，它具有配置的`AuthenticationProvider`列表。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The request passes through various providers and, in due course, tries to authenticate
    the request. There are a number of `AuthenticationProvider` as part of Spring
    Security.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请求通过各种提供者，并最终尝试对请求进行认证。作为Spring Security的一部分，有许多`AuthenticationProvider`。
- en: 'In the diagram at the start of the chapter, `AuthenticationProvider` requires
    user details (some providers require this, but some don''t), which are provided
    in `UserDetailsService`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头的图表中，`AuthenticationProvider`需要用户详细信息（一些提供者需要这个，但有些不需要），这些信息在`UserDetailsService`中提供：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`UserDetailsService` retrieves `UserDetails` (and implements the `User` interface)
    using the supplied username.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserDetailsService` 使用提供的用户名检索 `UserDetails`（并实现`User`接口）。'
- en: 'If all goes well, Spring Security creates a fully populated `Authentication`
    object (authenticate: true, granted authority list and username), which will contain
    various necessary details. The `Authentication` object is stored in the `SecurityContext`
    object by the filter for future use.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '如果一切顺利，Spring Security将创建一个完全填充的`Authentication`对象（authenticate: true，授予的权限列表和用户名），其中将包含各种必要的详细信息。过滤器将`Authentication`对象存储在`SecurityContext`对象中以供将来使用。'
- en: 'The `authenticate` method in `AuthenticationManager` can return the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationManager` 中的 `authenticate` 方法可以返回以下内容：'
- en: An `Authentication` object with `authenticated=true`, if Spring Security can
    validate the supplied user credentials
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Authentication` 对象，如果 Spring Security 能够验证提供的用户凭据，则 `authenticated=true`'
- en: An `AuthenticationException`, if Spring Security finds that the supplied user
    credentials are invalid
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthenticationException`，如果 Spring Security 发现提供的用户凭据无效'
- en: '`null`, if Spring Security cannot decide whether it is true or false (confused
    state)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null`，如果 Spring Security 无法确定它是真还是假（混乱状态）'
- en: Setting up AuthenticationManager
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 AuthenticationManager
- en: There are number of built-in `AuthenticationManager` in Spring Security that
    can be easily used in your application. Spring Security also has a number of helper
    classes, using which you can set up `AuthenticationManager`. One helper class
    is `AuthenticationManagerBuilder`. Using this class, its quite easy to set up
    `UserDetailsService` against a database, in memory, in LDAP, and so on. If the
    need arises, you could also have your own custom `UserDetailsService` (maybe a
    custom single sign-on solution is already there in your organization).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 中有许多内置的 `AuthenticationManager` 可以在您的应用程序中轻松使用。Spring Security
    还有许多辅助类，使用这些类可以设置 `AuthenticationManager`。其中一个辅助类是 `AuthenticationManagerBuilder`。使用这个类，可以很容易地设置
    `UserDetailsService` 对数据库、内存、LDAP 等进行身份验证。如果需要，您还可以拥有自己的自定义 `UserDetailsService`（也许您的组织中已经有自定义的单点登录解决方案）。
- en: 'You can make an `AuthenticationManager` global, so it will be accessible by
    your entire application. It will be available for method security and other `WebSecurityConfigurerAdapter`
    instances. `WebSecurityConfigurerAdapter` is a class that is extended by your
    Spring configuration file, making it quite easy to bring Spring Security into
    your Spring application. This is how you set up a global `AuthenticationManager`
    using the `@Autowired` annotation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使 `AuthenticationManager` 全局化，这样它将可以被整个应用程序访问。它将可用于方法安全性和其他 `WebSecurityConfigurerAdapter`
    实例。`WebSecurityConfigurerAdapter` 是您的 Spring 配置文件扩展的类，使得将 Spring Security 引入 Spring
    应用程序变得非常容易。这是如何使用 `@Autowired` 注解设置全局 `AuthenticationManager`：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also create local `AuthenticationManager`, which is only available
    for this particular `WebSecurityConfigurerAdapter`, by overriding the `configure`
    method, as shown in the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过覆盖 `configure` 方法，在特定的 `WebSecurityConfigurerAdapter` 中创建本地 `AuthenticationManager`，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Another option is to expose the `AuthenticationManager` bean by overriding
    `authenticationManagerBean` method, as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是通过覆盖 `authenticationManagerBean` 方法来公开 `AuthenticationManager` bean，如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also expose various `AuthenticationManager`, `AuthenticationProvider`,
    or `UserDetailsService` as beans which will override the default ones.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将各种 `AuthenticationManager`、`AuthenticationProvider` 或 `UserDetailsService`
    公开为 bean，这将覆盖默认的 bean。
- en: In the preceding code examples we have used `AuthenticationManagerBuilder` to
    configure in-memory authentication. More mechanisms of the `AuthenticationManagerBuilder`
    class will be used in the subsequent examples in this chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用 `AuthenticationManagerBuilder` 来配置内存中的身份验证。`AuthenticationManagerBuilder`
    类的更多机制将在本章的后续示例中使用。
- en: AuthenticationProvider
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AuthenticationProvider
- en: '`AuthenticationProvider` provides a mechanism for getting user details, with
    which authentication can be performed. Spring Security provides a number of `AuthenticationProvider`
    implementations, as shown in the following diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthenticationProvider` 提供了一种获取用户详细信息的机制，可以进行身份验证。Spring Security 提供了许多 `AuthenticationProvider`
    实现，如下图所示：'
- en: '![](img/c68b876c-9e2c-4329-b76d-63ebe1a3b376.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c68b876c-9e2c-4329-b76d-63ebe1a3b376.png)'
- en: 'Figure 03: Spring Security built-in AuthenticationProvider'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 03：Spring Security 内置的 AuthenticationProvider
- en: In subsequent chapters, we will go through each of these in detail with more
    code samples.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细介绍每个部分，并提供更多的代码示例。
- en: Custom AuthenticationProvider
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 AuthenticationProvider
- en: 'If needs be, we can write a custom `AuthenticationProvider` by implementing
    the `AuthenticationProvider` interface. We will have to implement two methods,
    namely authenticate (`Authentication`) and `supports(Class<?> aClass)`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以通过实现 `AuthenticationProvider` 接口来编写自定义 `AuthenticationProvider`。我们将需要实现两个方法，即
    `authenticate（Authentication）` 和 `supports（Class<?> aClass）`：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Our `authenticate` method is quite simple. We just compare the username and
    password with a static value. We can write any logic here and authenticate the
    user. If there is an error, it throws an exception, `AuthenticationException`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `authenticate` 方法非常简单。我们只需将用户名和密码与静态值进行比较。我们可以在这里编写任何逻辑并对用户进行身份验证。如果出现错误，它会抛出一个
    `AuthenticationException` 异常。
- en: On the book's GitHub page, navigate to the `jetty-in-memory-basic-custom-authentication`
    project to see the full source code of this class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在书的 GitHub 页面上，导航到 `jetty-in-memory-basic-custom-authentication` 项目，查看这个类的完整源代码。
- en: Multiple AuthenticationProvider
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个 AuthenticationProvider
- en: Spring Security allows you to declare multiple `AuthenticationProvider` in your
    application. They are executed according to the order in which they are declared
    in the configuration.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 允许您在应用程序中声明多个 `AuthenticationProvider`。它们根据在配置中声明它们的顺序执行。
- en: 'The `jetty-in-memory-basic-custom-authentication` project is modified further,
    and we have used the newly created `CustomAuthenticationProvider` as an `AuthenticationProvider`
    (`Order 1`) and the existing `inMemoryAuthentication` as our second `AuthenticationProvider`
    (`Order 2`):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`jetty-in-memory-basic-custom-authentication` 项目进一步修改，我们使用新创建的 `CustomAuthenticationProvider`
    作为 `AuthenticationProvider`（`Order 1`），并将现有的 `inMemoryAuthentication` 作为第二个 `AuthenticationProvider`（`Order
    2`）：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Whenever the `authenticate` method executes without error, the controls return and
    thereafter configured `AuthenticationProvider`'s doesn't get executed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 `authenticate` 方法执行时没有错误，控制权就会返回，此后配置的 `AuthenticationProvider` 将不会被执行。
- en: Sample application
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例应用程序
- en: Let's gets our hands dirty by doing some coding. We will start off with the
    most common authentication mechanisms and then get into other authentication mechanisms
    that can be used with Spring Security.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一些代码。我们将从最常见的身份验证机制开始，然后进入可以与Spring Security一起使用的其他身份验证机制。
- en: Base project setup
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本项目设置
- en: Apart from the actual authentication mechanism, many aspects of the application
    are quite similar. In this section, we will set up the example and then cover
    the specific authentication mechanism in detail.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实际的身份验证机制外，应用程序的许多方面都是相似的。在本节中，我们将设置示例，然后详细介绍特定的身份验证机制。
- en: We will be using the default Spring Security DB schema against which we will
    authenticate the user. We will create a fully fledged Spring MVC web application,
    with each component being created from scratch. Creating a sample Spring Security
    application using Spring MVC with the help of Spring Boot is very easy. The application
    will function through many things that are hidden away from developers. But in
    this case, we will be creating this application component by component so that
    you can see the actual code with which a web application that is built on Spring
    MVC can be secured.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用默认的Spring Security DB模式来验证用户。我们将创建一个完整的Spring MVC Web应用程序，每个组件都是从头开始创建的。使用Spring
    Boot创建一个示例Spring Security应用程序非常容易。该应用程序将通过许多隐藏在开发人员背后的东西来运行。但在这种情况下，我们将逐个创建这个应用程序组件，以便您可以看到构建在Spring
    MVC上的Web应用程序的实际代码。
- en: 'The default DB schema used by Spring Security is shown in the following diagram.
    However, you can customize it the way you think it is suitable for your application.
    We will be using the **Users** and **Authorities** tables for our setup here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security使用的默认DB模式如下图所示。但是，您可以根据自己的应用程序对其进行自定义。我们将在这里使用**Users**和**Authorities**表进行设置：
- en: '![](img/16b57543-4f52-4af7-96a2-95087c1b51c6.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16b57543-4f52-4af7-96a2-95087c1b51c6.png)'
- en: 'Figure 04: Spring Security default database schema'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图04：Spring Security默认数据库模式
- en: Let's now start developing our sample application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始开发我们的示例应用程序。
- en: Step 1—Create a Maven project in IntelliJ IDEA
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤1—在IntelliJ IDEA中创建一个Maven项目
- en: 'In IntelliJ, select File | New | Project. This will open up the New Project
    wizard, as shown in the following screenshot. Now select Maven and click the Next
    button:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在IntelliJ中，选择文件 | 新建 | 项目。这将打开新项目向导，如下截图所示。现在选择Maven并单击下一步按钮：
- en: '![](img/32266a6a-98b5-4f72-a76d-702c307cbdd1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32266a6a-98b5-4f72-a76d-702c307cbdd1.png)'
- en: 'Figure 05: New Maven project in IntelliJ'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图05：IntelliJ中的新Maven项目
- en: 'On the next screen in the New Project wizard (*Step 2*), enter the GroupId,
    ArtifactId, and Version, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在新项目向导的下一个屏幕（*步骤2*）中，输入GroupId、ArtifactId和Version，如下截图所示：
- en: '![](img/2b886993-a053-4200-8076-bb7cf3e78c26.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b886993-a053-4200-8076-bb7cf3e78c26.png)'
- en: 'Figure 06: Maven project setup in IntelliJ—Input GroupId, ArtifactId and Version'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图06：IntelliJ中的Maven项目设置—输入GroupId、ArtifactId和Version
- en: 'On the next screen in the New Project wizard (*Step 3*), enter the Project
    name and Project location, as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在新项目向导的下一个屏幕（*步骤3*）中，输入项目名称和项目位置，如下截图所示：
- en: '![](img/9eb9f732-38b0-4d9d-8be6-be901b714012.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb9f732-38b0-4d9d-8be6-be901b714012.png)'
- en: 'Figure 07: Maven project setup—Setting Project name and Project location'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图07：Maven项目设置—设置项目名称和项目位置
- en: 'IntelliJ will prompt you with instructions, as shown in the following screenshot.
    To automatically import projects whenever you make any changes in `pom.xml`, click
    on the Enable Auto-Import link:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ将提示您进行操作，如下截图所示。要在`pom.xml`中进行任何更改时自动导入项目，请单击启用自动导入链接：
- en: '![](img/0ea8decb-8174-4daa-88b2-1dcd853587df.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ea8decb-8174-4daa-88b2-1dcd853587df.png)'
- en: 'Figure 08: Enabling Auto-Import in IntelliJ'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图08：在IntelliJ中启用自动导入
- en: Step 2—pom.xml changes
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤2—pom.xml更改
- en: 'Open the `pom.xml` file and add the following code within the project tag (`<project></project>`):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`pom.xml`文件，并在项目标签（`<project></project>`）中添加以下代码：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Build a setup on `pom.xml` in which we will be using jetty to run the application
    created.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pom.xml`中构建一个设置，我们将使用jetty来运行创建的应用程序。
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Step 3—MySQL database schema setup
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤3—MySQL数据库模式设置
- en: 'Create a default database schema using the following scripts, and insert some
    users:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下脚本创建默认数据库模式，并插入一些用户：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Insert data into the preceding tables using the following scripts:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下脚本将数据插入上述表中：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `password` is one-way hashed using online tool [http://www.devglan.com/online-tools/bcrypt-hash-generator](http://www.devglan.com/online-tools/bcrypt-hash-generator).
    To compare the `password` we will use `PasswordEncoder` (`Bcrypt`).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`password`是使用在线工具[http://www.devglan.com/online-tools/bcrypt-hash-generator](http://www.devglan.com/online-tools/bcrypt-hash-generator)进行单向哈希处理的。为了比较`password`，我们将使用`PasswordEncoder`（`Bcrypt`）。'
- en: 'Credentials are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 凭据如下：
- en: User = `admin` and password = `admin@password`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户 = `admin` 和密码 = `admin@password`
- en: User = `user` and password = `user@password`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户 = `user` 和密码 = `user@password`
- en: It's important to note that, even though the role is named `ROLE_ADMIN`, the
    actual name is `ADMIN`, and this is what our code will be using while passing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，即使角色被命名为`ROLE_ADMIN`，实际名称是`ADMIN`，这是我们的代码在传递时将使用的名称。
- en: Step 4—Setting up MySQL database properties in your project
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤4—在项目中设置MySQL数据库属性
- en: 'Create a file named `mysqldb.properties` in the `src/main/resources` folder
    with the following content:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main/resources`文件夹中创建一个名为`mysqldb.properties`的文件，内容如下：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Step 5—Spring application configuration
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤5—Spring应用程序配置
- en: 'Create a Java class named `ApplicationConfig` with the following code in the `com.packtpub.book.ch02.springsecurity.config`
    package:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`com.packtpub.book.ch02.springsecurity.config`包中创建一个名为`ApplicationConfig`的Java类，其中包含以下代码：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Step 6—Web application configuration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤6—Web应用程序配置
- en: 'In this example, we are going to use Spring MVC as our web application framework.
    Let''s create the web application configuration file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Spring MVC作为我们的Web应用程序框架。让我们创建Web应用程序配置文件：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `@EnableWebMvc` annotation makes sure that your application is based on
    Spring MVC.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`@EnableWebMvc`注解确保您的应用程序基于Spring MVC。'
- en: Step 7—Spring MVC setup
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7步-设置Spring MVC
- en: 'In Spring MVC, the request lands on `DispatcherServlet`. `DispatcherServlet`
    can be declared in `web.xml` or as a Java configuration if your servlet container
    is 3.0+. Please create a dummy `SpringSecurityConfig.java` file. We will be constructing
    this class when we explain the first authentication mechanism, namely, basic authentication:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring MVC中，请求会落在`DispatcherServlet`上。`DispatcherServlet`可以在`web.xml`中声明，或者如果您的Servlet容器是3.0+，则可以作为Java配置。请创建一个虚拟的`SpringSecurityConfig.java`文件。当我们解释第一个身份验证机制，即基本身份验证时，我们将构建这个类。
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Step 8—Controller setup
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8步-控制器设置
- en: 'Let''s create a base controller (`HomeController`) for the secured JSP page
    (`home.jsp`). Please note that the return of the mapping method should be a string,
    and it should map to the actual name of the JSP file. In our case, it is `home.jsp`,
    a secured resource that the caller navigates when they log in:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为受保护的JSP页面（`home.jsp`）创建一个基本控制器（`HomeController`）。请注意，映射方法的返回值应该是一个字符串，并且应该映射到JSP文件的实际名称。在我们的情况下，它是`home.jsp`，这是一个在用户登录时调用者导航到的受保护资源：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Step 9—JSP creation
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9步-JSP创建
- en: 'Our home page is a very simple JSP file, as shown in the following code snippet.
    This JSP just displays a message that we have constructed in our `HomeController`
    class:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主页是一个非常简单的JSP文件，如下面的代码片段所示。这个JSP只是显示我们在`HomeController`类中构造的消息：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is now the base Spring MVC application, and with this we will try to set
    up various authentication mechanisms.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是现在的基本Spring MVC应用程序，我们将尝试设置各种身份验证机制。
- en: Spring Security setup
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring安全设置
- en: To explain Spring Security, we will implement basic authentication on the Spring
    MVC project that we created earlier. In [Chapter 3](69913c59-1186-44b2-8707-dceca721e206.xhtml), *Authentication
    Using SAML, LDAP, and OAuth/OIDC*, we will look at implementing other authentication
    mechanisms using Spring Security. To accomplish basic authentication in your application,
    let's perform the additional steps outlined in this section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释Spring安全，我们将在之前创建的Spring MVC项目上实现基本身份验证。在[第3章](69913c59-1186-44b2-8707-dceca721e206.xhtml)中，我们将使用Spring安全来实现其他身份验证机制，如SAML、LDAP和OAuth/OIDC。为了在您的应用程序中执行基本身份验证，让我们执行本节中概述的附加步骤。
- en: Step 1—Spring Security configuration setup
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1步-设置Spring安全配置
- en: 'We will now create the all-important Spring Security configuration class and
    make sure that the default filter chain for Spring Security is set up to secure
    all the resources:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建非常重要的Spring安全配置类，并确保为Spring安全设置默认的过滤器链以保护所有资源：
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In Spring Security configuration, the first thing that we do is tell Spring
    Security that you will have to authenticate the user against a database by using
    a defined user query and checking the user's authority using the defined authority
    query.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring安全配置中，我们首先告诉Spring安全，您将使用定义的用户查询对用户进行身份验证，并使用定义的权限查询检查用户的权限。
- en: We then set up the authentication mechanism to retrieve the user's credentials.
    Here we are using basic authentication as the mechanism to capture user credentials.
    Please note that the role names being used to check doesn't have the prefix `ROLE_`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们设置身份验证机制以检索用户的凭据。在这里，我们使用基本身份验证作为捕获用户凭据的机制。请注意，用于检查的角色名称没有前缀`ROLE_`。
- en: Step 2—Spring Security setup for a web application
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2步-为Web应用程序设置Spring安全
- en: 'We know that we have to instruct the application to start using Spring Security.
    One easy way is to declare the Spring Security filter in `web.xml`. If you want
    to avoid using XML and perform the actions using Java instead, then create a class
    that extends `AbstractSecurityWebApplicationInitializer`; this will do the trick
    of initializing the filter and setting Spring Security for your application:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们必须指示应用程序开始使用Spring安全。一个简单的方法是在`web.xml`中声明Spring安全过滤器。如果您想避免使用XML并使用Java执行操作，那么创建一个类，它继承`AbstractSecurityWebApplicationInitializer`；这将初始化过滤器并为您的应用程序设置Spring安全：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With this, we have completed all the setup required to see basic authentication
    in action.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了查看基本身份验证所需的所有设置。
- en: Running the application
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Run the project by executing the `mvn jetty:run` command. Once you see the
    log shown in the following screenshot, open a browser and go to `http://localhost:8080`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行`mvn jetty:run`命令运行项目。一旦您看到以下截图中显示的日志，打开浏览器并转到`http://localhost:8080`：
- en: '![](img/0a210e9d-0372-4afc-9680-cc9b8c35ba93.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a210e9d-0372-4afc-9680-cc9b8c35ba93.png)'
- en: 'Figure 09: Jetty Server running - console log'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图09：Jetty服务器运行-控制台日志
- en: 'Once you access the URL, the browser prompts with a default basic authentication
    dialog, as shown in the following screenshot. Enter the Username and Password as `admin`/`admin@password` and
    click on Log In:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦访问URL，浏览器会提示默认的基本身份验证对话框，如下截图所示。输入用户名和密码为`admin`/`admin@password`，然后点击登录：
- en: '![](img/855b76d0-f0f3-4dbe-967e-d928a2405f89.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/855b76d0-f0f3-4dbe-967e-d928a2405f89.png)'
- en: 'Figure 10: Basic authentication dialog in the browser'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：浏览器中的基本身份验证对话框
- en: 'If your credentials are correct and if the user has either the `ADMIN` or `USER` role,
    you should see the home page as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的凭据正确，并且用户具有`ADMIN`或`USER`角色之一，您应该看到如下的主页：
- en: '![](img/e9c599ce-0360-4309-a0a5-a535d7d27a09.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9c599ce-0360-4309-a0a5-a535d7d27a09.png)'
- en: 'Figure 11: The home page after successful login'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：成功登录后的主页
- en: The full project code is available on the book's GitHub page ([https://github.com/PacktPublishing/Hands-On-Spring-Security-5-for-Reactive-Applications](https://github.com/PacktPublishing/Hands-On-Spring-Security-5-for-Reactive-Applications))
    within the `jetty-db-basic-authentication`project.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的项目代码可以在该书的GitHub页面上找到（[https://github.com/PacktPublishing/Hands-On-Spring-Security-5-for-Reactive-Applications](https://github.com/PacktPublishing/Hands-On-Spring-Security-5-for-Reactive-Applications)），在`jetty-db-basic-authentication`项目中。
- en: In-memory user storage
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存用户存储
- en: 'As mentioned earlier, for various testing purposes, it''s better to store the
    user credentials and then authenticate in memory than to use a proper database,
    such as MySQL. For this, just change the Spring Security configuration file (`SpringSecurityConfig.java`)
    by adding the following method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，出于各种测试目的，最好将用户凭据存储在内存中，然后进行身份验证，而不是使用诸如MySQL之类的真正数据库。为此，只需通过添加以下方法来更改Spring
    Security配置文件（`SpringSecurityConfig.java`）：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It's important to note that the password has a prefix, `{noop}`, attached to
    it. This ensures that when the password is validated, no encoding is carried out.
    This is one way to avoid having password encoding errors when you run the project.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，密码有一个前缀`{noop}`，附加在其前面。这确保在验证密码时不进行编码。这是避免在运行项目时出现密码编码错误的一种方法。
- en: The full source code, as a fully fledged project, can be found on this book's
    GitHub page in the `jetty-in-memory-basic-authentication` project.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码作为一个完整的项目，可以在本书的GitHub页面中的`jetty-in-memory-basic-authentication`项目中找到。
- en: Run as Spring Boot
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为Spring Boot运行
- en: The preceding example can be easily converted to a Spring Boot application by
    following the ensuing additional steps. This process won't cover many of the trivial
    steps that we have done previously. You need to have one more configuration file, `SpringSecurityConfig.java`*,*
    the details of which are as follows.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例可以通过遵循以下额外步骤轻松转换为Spring Boot应用程序。这个过程不会涵盖我们之前做过的许多琐碎步骤。您需要有另一个配置文件`SpringSecurityConfig.java`，其详细信息如下。
- en: 'You can create a new file, usually named `Run.java`, with the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个新文件，通常命名为`Run.java`，其中包含以下代码：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It''s a very simple file with an important annotation in it, `@SpringBootApplication`.
    We took away the Spring MVC configuration class and put the following properties
    in the `application.properties` file. This is just another way to avoid creating
    a new Spring MVC configuration file and instead use the properties file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的文件，其中有一个重要的注解`@SpringBootApplication`。我们去掉了Spring MVC配置类，并将以下属性放入`application.properties`文件中。这只是避免创建新的Spring
    MVC配置文件的另一种方法，而是使用属性文件：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As earlier, everything else is kept intact. For the full project, refer to the
    book's GitHub page in the `spring-boot-in-memory-basic-authentication` project.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，其他一切保持不变。有关完整项目，请参考书籍的GitHub页面中的`spring-boot-in-memory-basic-authentication`项目。
- en: 'Open a command prompt and enter the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符并输入以下命令：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Open the browser and navigate to `http://localhost:8080`, and you should be
    provided with a basic authentication dialog. After successful login, you should
    be taken to the user home page, as shown earlier.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，导航到`http://localhost:8080`，然后应该提供基本身份验证对话框。成功登录后，应该被带到用户主页，如前所示。
- en: Authorization
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: Once the user is validated in terms of who they claim to be, the next aspect,
    what the user has access to, needs to be ascertained. This process of making sure
    what the user is allowed to do within the application is called authorization.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户在其声称的身份方面得到验证，下一个方面就是确定用户有权访问什么。确保用户在应用程序中被允许做什么的过程称为授权。
- en: 'In line with authentication architecture, as seen earlier, authorization also
    has a manager, `AccessDecisionManager`. Spring Security has three built-in implementations
    for this: `AffirmativeBased`, `ConsensusBased`, and `UnanimousBased`. `AccessDecisionManager` works
    by delegating to a chain of `AccessDecisionVoter`. Authorization-related Spring
    Security classes/interfaces are shown in the following diagram:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 与身份验证架构一致，如前所述，授权也有一个管理器`AccessDecisionManager`。Spring Security为此提供了三种内置实现：`AffirmativeBased`、`ConsensusBased`和`UnanimousBased`。`AccessDecisionManager`通过委托给一系列`AccessDecisionVoter`来工作。授权相关的Spring
    Security类/接口如下图所示：
- en: '![](img/ed1850b0-950f-4d1c-ae8f-7bb3d3143455.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed1850b0-950f-4d1c-ae8f-7bb3d3143455.png)'
- en: 'Figure 12: Spring Security Authorization classes/interfaces'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：Spring Security授权类/接口
- en: 'In Spring Security, authorization to a secured resource is granted by invoking
    voters and then tallying the votes received. The three built-in implementations
    tally the votes received in different manners:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Security中，对受保护资源的授权是通过调用选民然后统计收到的选票来授予的。三种内置实现以不同的方式统计收到的选票：
- en: '**AffirmativeBased**: If at least one voter votes, the user is given access
    to the secured resource'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AffirmativeBased**：如果至少有一个选民投票，用户将被授予对受保护资源的访问权限'
- en: '**ConsensusBased**: If a clear consensus is reached between the voters and
    their votes, then the user is given access to the secured resource'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ConsensusBased**：如果选民和他们的选票之间达成明确的共识，那么用户将被授予对受保护资源的访问权限'
- en: '**UnanimousBased**: If all the voters vote, then the user is given access to the
    secured resource'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UnanimousBased**：如果所有选民投票，那么用户将被授予对受保护资源的访问权限'
- en: 'Spring Security provides two authorization approaches:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了两种授权方法：
- en: '**Web URL**: Incoming URL (specific URL or regular expression)-based authorization'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web URL**：基于传入URL（特定URL或正则表达式）的授权'
- en: '**Method**: Method signature based on which access is controlled'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Method**：基于方法签名来控制访问的方法'
- en: If your serving layer exposes only RESTful endpoints and the data in your application
    is properly categorized as resources (complying with REST principles), using a
    Web URL approach can be considered. If your application just exposes endpoints
    (REST-based, I would call) not really complying with REST principles, you can
    consider using method-based authorization.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务层仅公开RESTful端点，并且应用程序中的数据被正确分类为资源（符合REST原则），则可以考虑使用Web URL方法。如果您的应用程序只是公开端点（基于REST的，我会称之为），并不真正符合REST原则，您可以考虑使用基于方法的授权。
- en: Web URL
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web URL
- en: 'Spring Security can be used to set up URL-based authorization. HTTP Security
    configured can be used with Spring Security configuration to achieve the desired
    authorization. In many examples that we have gone through so far, we have seen
    pattern matching authorization. Here is one such example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security可以用于设置基于URL的授权。可以使用配置的HTTP Security与Spring Security配置来实现所需的授权。在我们迄今为止已经介绍的许多示例中，我们已经看到了模式匹配授权。以下是一个这样的例子：
- en: '`AntPathRequestMatcher`: Uses an Ant-style pattern for URL matching:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AntPathRequestMatcher`：使用Ant风格的模式进行URL匹配：'
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code snippet, the `/rest` URL's basic authentication is disabled,
    and for other URLs (`/rest/movie`, `/rest/ticket` and `/index`), users with the
    `USER` role have access. The snippet also shows single match (using `antMatcher`)
    and multiple matches (using `antMatchers`).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，`/rest` URL的基本身份验证被禁用，对于其他URL（`/rest/movie`、`/rest/ticket`和`/index`），具有`USER`角色的用户可以访问。该片段还展示了单个匹配（使用`antMatcher`）和多个匹配（使用`antMatchers`）。
- en: '`MvcRequestMatcher`: This uses Spring MVC to match the path and then extracts
    variables. The matching is relative to the servlet path.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MvcRequestMatcher`：这使用Spring MVC来匹配路径，然后提取变量。匹配是相对于servlet路径的。'
- en: '`RegexRequestMatcher`: This uses a regular expression to match the URL. It
    can also be used to match the HTTP method, if needed. The matching is case-sensitive
    and takes the form (`servletPath` + `pathInfo` + `queryString`):'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RegexRequestMatcher`：这使用正则表达式来匹配URL。如果需要的话，它也可以用来匹配HTTP方法。匹配是区分大小写的，采用（`servletPath`
    + `pathInfo` + `queryString`）的形式：'
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Method invocation
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法调用
- en: Spring Security allows users to access-control method execution using **aspect-oriented
    programming** (**AOP**) in the background. This can be done using XML configuration
    or using Java configuration. Since we have been following Java configuration throughout
    this book, we will cover Java configuration and annotations here to explain method
    security. The best practice is to choose a particular method invocation authorization
    approach and stick to it for consistency across your application. Choose whichever
    approach is apt for your application, as there isn't anything particular documented
    on when to choose what.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security允许用户使用**面向方面的编程**（**AOP**）在后台访问控制方法执行。这可以使用XML配置或使用Java配置来完成。由于我们在本书中一直在使用Java配置，因此我们将在这里介绍Java配置和注解来解释方法安全性。最佳实践是选择一种特定的方法调用授权方法，并在整个应用程序中保持一致。选择适合您的应用程序的方法，因为没有关于何时选择何种方法的特定文档。
- en: 'If you would like to enable method security in your application, firstly annotate
    the class with `@EnableMethodSecurity`. There are three types of annotation with
    which you can annotate the methods and authorize them. The types are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在应用程序中启用方法安全性，首先要用`@EnableMethodSecurity`对类进行注解。有三种类型的注解可以用于注解方法并对其进行授权。这些类型如下：
- en: '**Voting-based** **ann****otations**: the most commonly used annotations in
    Spring Security. Spring Security''s `@Secured` annotation falls into this category.
    To use these annotations, they first have to be enabled, as shown in the following
    code snippet:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于投票的注解**：Spring Security中最常用的注解。Spring Security的`@Secured`注解属于这个类别。要使用这些注解，首先必须启用它们，如下面的代码片段所示：'
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once the usage of annotation is enabled, the `@Secured` annotation can be used,
    as shown in the following code snippet:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用了注解的使用，就可以使用`@Secured`注解，如下面的代码片段所示：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**JSR-250 security annotations**: This is also called the **Enterprise JavaBeans
    3.0** (**EJB** **3**) security annotation. Again, before using these annotations,
    they have to be enabled using `@EnableGlobalMethodSecurity(jsr250Enabled = true)`.
    The following snippet shows the JSR-250 security annotation in action:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSR-250安全注解**：这也被称为**企业JavaBeans 3.0**（**EJB 3**）安全注解。同样，在使用这些注解之前，必须使用`@EnableGlobalMethodSecurity(jsr250Enabled
    = true)`来启用它们。以下片段展示了JSR-250安全注解的使用：'
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Expression-based annotation**: Annotations based on `@Pre` and `@Post` fall
    into this category. They are enabled using `@EnableGlobalMethodSecurity(prePostEnabled
    = true)`:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于表达式的注解**：基于`@Pre`和`@Post`的注解属于这个类别。它们可以通过`@EnableGlobalMethodSecurity(prePostEnabled
    = true)`来启用：'
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding example, `hasAnyAuthority` is called **Spring Expression Language**
    (**SpEL**). Similar to the example shown, there are many such predefined expressions
    that can be used for security.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`hasAnyAuthority`被称为**Spring表达式语言**（**SpEL**）。与所示的示例类似，还有许多预定义的表达式可用于安全性。
- en: Domain instance
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域实例
- en: 'Spring Security provides ways to access control various permissions attached
    to any object. Spring Security **Access Control List** (**ACL**) stores a list
    of permissions associated with a domain object. It also grants these permissions
    to various entities that need to perform different operations on the domain object.
    For Spring Security to work, you need to set up four database tables, as shown
    in the following diagram:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了访问控制各种附加到任何对象的权限的方法。Spring Security **访问控制列表**（**ACL**）存储与域对象关联的权限列表。它还将这些权限授予需要对域对象执行不同操作的各种实体。为了使Spring
    Security工作，您需要设置四个数据库表，如下图所示：
- en: '![](img/d2edbf2b-2268-4cf9-9414-d68a1a2d93df.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2edbf2b-2268-4cf9-9414-d68a1a2d93df.png)'
- en: 'Figure 13: Spring Security ACL database schema'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：Spring Security ACL数据库架构
- en: 'Here is a small explanation of the tables in the preceding diagram:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上图中表格的简要解释：
- en: '`ACL_CLASS` table: As the name suggests, it stores the domain object''s class
    name.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACL_CLASS`表：顾名思义，它存储域对象的类名。'
- en: '`ACL_SID` table: **Security Identity** (**SID**) stores either a username (`testuser`)
    or role name (`ROLE_ADMIN`). The `PRINCIPAL` column stores either 0 or 1, 0 if
    the SID is a username and 1 if it is a role name.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACL_SID`表：**安全身份**（**SID**）存储用户名（`testuser`）或角色名（`ROLE_ADMIN`）。`PRINCIPAL`列存储0或1，如果SID是用户名，则为0，如果是角色名，则为1。'
- en: '`ACL_OBJECT_IDENTITY` table: It is entrusted to store object-related information
    and links other tables.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACL_OBJECT_IDENTITY`表：它负责存储与对象相关的信息并链接其他表。'
- en: '`ACL_ENTRY` table: It stores permission granted to each SID for each `OBJECT_IDENTITY`.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACL_ENTRY` 表：它存储了每个 `OBJECT_IDENTITY` 的每个 SID 被授予的权限。'
- en: In order for Spring Security ACL to work, it also requires a cache. One of the
    easiest ones to integrate with Spring is EhCache.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Spring Security ACL 工作，它还需要一个缓存。其中一个最容易与 Spring 集成的是 EhCache。
- en: 'Spring Security ACL supports the following permissions:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security ACL 支持以下权限：
- en: '`READ`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ`'
- en: '`WRITE`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WRITE`'
- en: '`CREATE`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE`'
- en: '`DELETE`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`'
- en: '`ADMINISTRATION`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADMINISTRATION`'
- en: 'To make it work, we have to enable it using `@EnableGlobalMethodSecurity(prePostEnabled
    = true, securedEnabled = true)`. We are now ready to put annotations in place
    to start access controlling domain objects. A code snippet in which Spring ACL
    is used is as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，我们必须使用 `@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled
    = true)` 来启用它。现在我们已经准备好放置注解来开始访问控制域对象。使用 Spring ACL 的代码片段如下：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After querying for records (post-filtering), the result (a list) is scrutinized,
    and filtering takes place to only return the object to which the user has `READ`
    permission. We can also use `@PostAuthorize` as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询记录（后过滤）之后，结果（列表）会被审查，并进行过滤，只返回用户具有 `READ` 权限的对象。我们也可以使用 `@PostAuthorize`
    如下：
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After execution of the method (`@Post`), if the user has `READ` access on the
    object, it is returned. Otherwise, it throws an `AccessDeniedException` exception:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法执行之后（`@Post`），如果用户对对象具有 `READ` 访问权限，它会返回。否则，它会抛出 `AccessDeniedException`
    异常：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Before the method is fired (`@Pre`), it checks whether the user has the `WRITE`
    permission on the object. Here, we use the parameter being passed into the method
    to check for user permission. If the user has permission to `WRITE`, it executes
    the method. Otherwise, it throws an exception.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法被触发之前（`@Pre`），它会检查用户是否对对象具有 `WRITE` 权限。在这里，我们使用传递给方法的参数来检查用户权限。如果用户有 `WRITE`
    权限，它执行该方法。否则，它会抛出异常。
- en: We can have a fully fledged example of this, but we are already stretched by
    the number of topics that this book can cover. So I will leave it just here, and
    I am sure you now have enough information to make a complete implementation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有一个完整的示例，但这本书可以涵盖的主题已经很多了。所以我就在这里留下它，我相信你现在已经有足够的信息来进行完整的实现了。
- en: 'Some of the common built-in Spring expressions regarding security are as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一些关于安全的常见内置 Spring 表达式如下：
- en: '| **Expression** | **Description** |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述** |'
- en: '| `hasRole([role_name])` | If the current user has `role_name`, it returns
    `true` |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `hasRole([role_name])` | 如果当前用户具有 `role_name`，它返回 `true` |'
- en: '| `hasAnyRole([role_name1, role_name2])` | If the current user has any of the
    role names in the list, it returns `true` |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `hasAnyRole([role_name1, role_name2])` | 如果当前用户具有列表中的任何角色名称，它返回 `true` |'
- en: '| `hasAuthority([authority])` | If the current user has specified authority,
    it returns `true` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `hasAuthority([authority])` | 如果当前用户具有指定权限，它返回 `true` |'
- en: '| `hasAnyAuthority([authority1, authority2])` | If the current user has any
    of the authorities in the specified list, it returns `true` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `hasAnyAuthority([authority1, authority2])` | 如果当前用户具有指定列表中的任何权限，它返回 `true`
    |'
- en: '| `permitAll` | Always equates to `true` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `permitAll` | 总是等同于 `true` |'
- en: '| `denyAll` | Always equates to `false` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `denyAll` | 总是等同于 `false` |'
- en: '| `isAnonymous()` | If the current user is anonymous, it returns `true` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `isAnonymous()` | 如果当前用户是匿名的，它返回 `true` |'
- en: '| `isRememberMe()` | If the current user has set remember-me, it returns `true`
    |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `isRememberMe()` | 如果当前用户已设置记住我，它返回 `true` |'
- en: '| `isAuthenticated()` | If the current user is not anonymous, it returns `true`
    |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `isAuthenticated()` | 如果当前用户不是匿名用户，它返回 `true` |'
- en: '| `isFullyAuthenticated()` | If the current user is not anonymous or remember-me
    user, it returns `true` |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `isFullyAuthenticated()` | 如果当前用户不是匿名用户或记住我用户，它返回 `true` |'
- en: '| `hasPermission(Object target, Object permission)` | If the current user has
    permission to target object, it returns `true` |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `hasPermission(Object target, Object permission)` | 如果当前用户对目标对象有权限，它返回 `true`
    |'
- en: '| `hasPermission(Object targetId, Object targetType, Object permission)` |
    If the current user has permission to target object, it returns `true` |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `hasPermission(Object targetId, Object targetType, Object permission)` |
    如果当前用户对目标对象有权限，它返回 `true` |'
- en: Other Spring Security capabilities
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 Spring Security 功能
- en: 'Spring Security has a number of capabilities apart from core security features,
    authentication and authorization. Some of the most important ones are listed here.
    In [Chapter 7](8fd292f5-44c6-4cfb-b9cb-9a1bdb677624.xhtml), *Spring Security Add-Ons*,
    we will go through each of these in more detail using hands-on coding. We will
    build on the example that we have created in this chapter and explain each of
    these very important Spring Security capabilities:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 除了核心安全功能、认证和授权之外还具有许多功能。以下是一些最重要的功能。在[第7章](8fd292f5-44c6-4cfb-b9cb-9a1bdb677624.xhtml)
    *Spring Security Add-Ons* 中，我们将通过实际编码更详细地介绍这些功能。我们将在本章创建的示例基础上构建，并解释这些非常重要的 Spring
    Security 功能：
- en: '**Remember-me authentication**: This is also known as persistent-login, and
    it allows websites to remember a user''s identity in between multiple sessions.
    Spring Security provides a couple of implementations (hashed-token-based and persistent-token-based)
    that make this easy.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记住我认证**：这也被称为持久登录，它允许网站在多个会话之间记住用户的身份。Spring Security 提供了一些实现（基于哈希令牌和持久令牌），使这变得容易。'
- en: '**Cross Site Request Forgery** (**CSRF**): This is a very common security exploit
    employed by hackers to do unethical operations, whereby unauthorized commands
    are sent on behalf of the user. Spring Security allows us to fix this exploit
    easily with configurations.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）：这是黑客常用的一种安全漏洞，用于执行不道德的操作，未经授权地代表用户发送命令。Spring Security
    允许我们通过配置轻松修复这个漏洞。'
- en: '**Cross-Origin Resource Sharing** (**CORS**): This is a mechanism by which
    a web application running on a particular domain can access resources exposed
    in another domain by adding additional HTTP headers. This is one of the security
    mechanisms employed to make sure that only legitimate code can have access to
    resources exposed by a domain.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨域资源共享**（**CORS**）：这是一种机制，通过添加额外的HTTP头，使运行在特定域上的Web应用程序可以访问在另一个域中公开的资源。这是确保只有合法代码可以访问域公开资源的安全机制之一。'
- en: '**Session management**: Proper user session management is key to any application''s
    security. Here are some of the important session-related functions that Spring
    Security takes care of easily:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话管理**：适当的用户会话管理对于任何应用程序的安全性至关重要。以下是Spring Security轻松处理的一些重要的与会话相关的功能：'
- en: '**Session timeout**: This makes sure that user sessions time out at the configured
    value, and this cannot be hacked.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话超时**：这确保用户会话在配置的值处于超时状态，且无法被黑客攻击。'
- en: '**Concurrent session**: This prevents users from having multiple (configured
    value) sessions active within the server.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发会话**：这可以防止用户在服务器上有多个（配置值）会话处于活动状态。'
- en: '**Session fixation**: This is a security attack that allows the attacker to
    hijack a valid user''s session and then start using it for unethical operations.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话固定**：这是一种安全攻击，允许攻击者劫持有效用户的会话，然后开始将其用于不道德的操作。'
- en: These are some of the important features that Spring Security brings to the
    table. We will thoroughly explore them after covering additional topics that are
    relevant to Spring Security.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Spring Security带来的一些重要功能。在涵盖与Spring Security相关的其他主题后，我们将对它们进行彻底探讨。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter aimed at introducing two important security concepts, namely authentication
    and authorization, and how they are supported by Spring Security.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍两个重要的安全概念，即身份验证和授权，以及它们如何由Spring Security支持。
- en: We started by explaining these concepts in detail and then dived into them with
    the help of a sample application. We have used Spring MVC application as a base
    to help you understand Spring Security concepts. [Chapter 4](5bccc5ce-c067-46ee-a91c-02ee11dd9fc7.xhtml),
    *Authentication Using CAS and JAAS*, is aimed at explaining reactive web application
    framework, Spring WebFlux.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先详细解释了这些概念，然后通过一个示例应用程序深入探讨了它们。我们使用Spring MVC应用程序作为基础，帮助您理解Spring Security概念。[第4章](5bccc5ce-c067-46ee-a91c-02ee11dd9fc7.xhtml)，*使用CAS和JAAS进行身份验证*，旨在解释响应式Web应用程序框架Spring
    WebFlux。
- en: In the next chapter, we will go through other authentication mechanisms supported
    by Spring Security by extending the example that we have built in this chapter.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过扩展本章中构建的示例，了解Spring Security支持的其他身份验证机制。
