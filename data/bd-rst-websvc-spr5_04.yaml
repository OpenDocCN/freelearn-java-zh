- en: CRUD Operations in Spring REST
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring REST中的CRUD操作
- en: In this chapter, we will go through basic **Create**, **Read**, **Update**,
    and **Delete** (**CRUD**) APIs in Spring 5 Reactive REST. After this chapter,
    you will be able to do a simple CRUD operations in Spring 5 with Reactor support.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Spring 5 Reactive REST中的基本**创建**，**读取**，**更新**和**删除**（**CRUD**）API。在本章之后，您将能够在具有Reactor支持的Spring
    5中执行简单的CRUD操作。
- en: 'In this chapter, we will cover the following methods:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下方法：
- en: Mapping CRUD operations to HTTP methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CRUD操作映射到HTTP方法
- en: Creating a user
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户
- en: Updating a user
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户
- en: Deleting a user
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户
- en: Reading (selecting) a user
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读（选择）用户
- en: CRUD operations in Spring REST
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring REST中的CRUD操作
- en: In this chapter, we will go through User management in Spring 5 (with Reactive
    support). We will implement CRUD operations in User management.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Spring 5中的用户管理（带有Reactive支持）。我们将在用户管理中实现CRUD操作。
- en: HTTP methods
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP方法
- en: 'Based on HTTP 1.1 specifications, the following are method definitions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据HTTP 1.1规范，以下是方法定义：
- en: '`GET`: This method gets the information mentioned in the URI. The `GET` method
    can be used for single or multiple items.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：此方法获取URI中提到的信息。`GET`方法可用于单个或多个项目。'
- en: '`POST`: This method creates the item mentioned in the URI. Generally, the `POST`
    method will be used for item creation and more secured options. As the parameters
    are hidden in `POST`, it will be secure compared to the `GET` method.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：此方法创建URI中提到的项目。通常，`POST`方法将用于项目创建和更安全的选项。由于参数在`POST`中是隐藏的，因此与`GET`方法相比，它将更安全。'
- en: '`DELETE`: This methods deletes the item in the requested URI.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：此方法删除请求的URI中的项目。'
- en: '`PUT`: This method updates the item in the requested URI. According to the
    HTTP specifications, the server can create the item if the item is not available.
    However, this will be decided by the developer who designed the application.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：此方法更新请求的URI中的项目。根据HTTP规范，如果项目不可用，服务器可以创建项目。但是，这将由设计应用程序的开发人员决定。'
- en: '**Advanced HTTP methods**: Though we may not use advanced methods all the time,
    it will be good to know these methods, as they might be useful:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级HTTP方法**：虽然我们可能不会始终使用高级方法，但了解这些方法将是有益的：'
- en: '`HEAD`: This method gets meta information about the resource, not the resource
    itself, as a response. It will be used for caching purposes.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`：此方法获取有关资源的元信息，而不是资源本身作为响应。它将用于缓存目的。'
- en: '`TRACE`: This method is mostly used for debugging purposes where the contents
    of an HTTP request will be sent back to the requester.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`：此方法主要用于调试目的，其中HTTP请求的内容将被发送回请求者。'
- en: '`CONNECT`: This is used to open a tunnel and can be used for proxy purposes.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONNECT`：这用于打开隧道，可用于代理目的。'
- en: '`OPTIONS`: This method is used to describe communication options for the target
    resource.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`：此方法用于描述目标资源的通信选项。'
- en: 'The following are HTTP method recommendations for our CRUD operations:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们CRUD操作的HTTP方法建议：
- en: '| **Operation** | **HTTP method** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **操作** | **HTTP方法** |'
- en: '| Create | `POST` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 创建 | `POST` |'
- en: '| Read | `GET` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 读取 | `GET` |'
- en: '| Update | `PUT` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 更新 | `PUT` |'
- en: '| Delete | `DELETE` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 删除 | `DELETE` |'
- en: In the rest of the chapter, we will show how to build CRUD operations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将展示如何构建CRUD操作。
- en: Reactive server initialization
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式服务器初始化
- en: Before jumping in to the endpoint, we will explore the structure of our files,
    including the initializer, handler, and repository.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入端点之前，我们将探索我们的文件结构，包括初始化程序、处理程序和存储库。
- en: 'The `Server` class for initializing our port `8081` is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用于初始化我们的端口`8081`的`Server`类如下：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding method, we created a `main` class. Inside the `main` method,
    we will initialize the server and start the server with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法中，我们创建了一个`main`类。在`main`方法中，我们将使用以下代码初始化服务器并启动服务器：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding method will start the Reactor server. The Reactor server implementation
    is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法将启动Reactor服务器。 Reactor服务器的实现如下：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's go through this code later, as the concept is Reactive-based. Let's assume
    that this code works fine and we will move on, focusing on the endpoints.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍后再看这段代码，因为这个概念是基于Reactive的。假设这段代码运行良好，我们将继续前进，重点放在端点上。
- en: 'The following is the method for mapping all REST endpoints for our CRUD operations:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是映射我们所有CRUD操作的REST端点的方法：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You might get errors on `UserRepository` and `UserHandler`. Let''s fill these
    up now:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会在`UserRepository`和`UserHandler`上遇到错误。现在让我们填写这些：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we have just added the `UserRepository` interface in
    our existing package `com.packtpub.reactive`. Later, we will introduce abstract
    methods for our business requirements.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们刚刚在现有包`com.packtpub.reactive`中添加了`UserRepository`接口。稍后，我们将为我们的业务需求引入抽象方法。
- en: 'Now, we can add a `UserHandler` class, and add the necessary things:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以添加一个`UserHandler`类，并添加必要的内容：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, the `UserHandler` initializes the `UserRepository` instance
    in its constructor. If someone gets an instance of `UserHandler`, they will have
    to pass the `UserRepository` type to the `UserHandler` constructor. By doing this,
    `UserRepository` will always be forwarded to `UserHandler` to fulfill the business
    requirements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`UserHandler`在其构造函数中初始化了`UserRepository`实例。如果有人获得了`UserHandler`的实例，他们将不得不将`UserRepository`类型传递给`UserHandler`的构造函数。通过这样做，`UserRepository`将始终被转发到`UserHandler`以满足业务需求。
- en: Sample values in the repository
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储库中的示例值
- en: 'In order to use the repository, we will have to create a concrete class and
    fill in some values to test the `GET` operation. In the following method, we can
    do that:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用存储库，我们将不得不创建一个具体的类并填写一些值来测试`GET`操作。在下面的方法中，我们可以这样做：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding class, we just implemented `UserRepository` and filled in some
    sample values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述类中，我们刚刚实现了`UserRepository`并填写了一些示例值。
- en: In order to simplify our code, we have used only application-based data storage,
    which means that once the application is restarted, our data will be reinitialized.
    In this case, we can't store any new data in our application. However, this will
    help us to focus on our main topics, such as Reactive and Spring 5, which are
    not related to persistence.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化我们的代码，我们只使用基于应用程序的数据存储，这意味着一旦应用程序重新启动，我们的数据将被重新初始化。在这种情况下，我们无法在我们的应用程序中存储任何新数据。但是，这将帮助我们专注于我们的主题，比如与持久性无关的Reactive和Spring
    5。
- en: 'We can use this sample repository in the `routing` method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`routing`方法中使用这个示例存储库：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding lines will insert dummy values in our repository. This will be
    enough for testing the `GET` operation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行将在我们的存储库中插入虚拟值。这足以测试`GET`操作。
- en: getAllUsers – mapping
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有用户-映射
- en: 'Inside the `routingFunction`, we will add our first endpoint for `getAllUsers`.
    At first, we will keep the `null` values in the handler to avoid errors in the
    code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`routingFunction`中，我们将为`getAllUsers`添加我们的第一个端点。起初，我们将在处理程序中保留`null`值，以避免代码中的错误：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding `nest` method will be used to route to the right function, and
    it will also be used to group other routers. In the preceding method, we use `/user`
    in our path and we use `GET("/")` method as a router. Also, we use `MediaType.ALL`
    to accept all media ranges to simplify the code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`nest`方法将用于路由到正确的函数，并且还将用于分组其他路由器。在上述方法中，我们在我们的路径中使用`/user`，并使用`GET("/")`方法作为路由器。此外，我们使用`MediaType.ALL`来接受所有媒体范围，以简化代码。
- en: getAllUsers – implementation in the handler and repository
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有用户-处理程序和存储库中的实现
- en: Here, we will define and implement the `getAllUsers` method in our repository.
    Also, we will call the `getAllUsers` method in the `main` class through `UserHandler`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在我们的存储库中定义和实现`getAllUsers`方法。此外，我们将通过`UserHandler`在`main`类中调用`getAllUsers`方法。
- en: 'We will add an abstract method for the `getAllUsers` method in the `UserRepository` class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`UserRepository`类中添加一个`getAllUsers`方法的抽象方法：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Like any other interface and concrete class implementation, we will have to
    add the abstract method in our interface, in our case, `UserRespository`. The
    preceding code just adds `getAllUsers` in the `UserRepository` class.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他接口和具体类实现一样，我们必须在我们的接口中添加抽象方法，在我们的情况下是`UserRespository`。上述代码只是在`UserRepository`类中添加了`getAllUsers`。
- en: 'In `UserRepositorySample` (the concrete class for `UserRepository`), we will
    implement the abstract method `getAllUsers`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserRepositorySample`（`UserRepository`的具体类）中，我们将实现抽象方法`getAllUsers`：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, we have added the method `getAllUsers` and implemented
    the business logic. As we have already defined the users in the `UserRepositorySample`
    constructor, we just need to return the users. The `Flux` class has a method called
    `fromIterable`, which is used to get all users from our `UserRepositorySample`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们已经添加了`getAllUsers`方法并实现了业务逻辑。由于我们已经在`UserRepositorySample`构造函数中定义了用户，我们只需要返回用户。`Flux`类有一个叫做`fromIterable`的方法，用于从我们的`UserRepositorySample`中获取所有用户。
- en: The `fromIterable` method will return a Flux that emits the items contained
    in our Java Collection interface. As Collection implements iterable interface,
    `fromIterable` will be the perfect method to return `Flux` in our case.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`fromIterable`方法将返回一个发出Java集合接口中包含的项目的Flux。由于Collection实现了iterable接口，`fromIterable`将是在我们的情况下返回`Flux`的完美方法。'
- en: 'In the `UserHandler.java` file, we will add the code to get all users in Reactive.
    The following code will walk us through the  necessary details:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserHandler.java`文件中，我们将添加以Reactive方式获取所有用户的代码。以下代码将为我们提供必要的细节：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, we will get all users from the repository in `Flux` and
    we will send them in the response in the JSON type. The server response content
    type is updated with `APPLICATION_JSON`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们将从`Flux`中获取所有用户，并以JSON类型发送响应。服务器响应内容类型已更新为`APPLICATION_JSON`。
- en: Now is the time to add our first method, `getAllUsers`, in our routing method.
    Here, we will use only one routing method to map all REST APIs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在我们的路由方法中添加我们的第一个方法`getAllUsers`了。在这里，我们将只使用一个路由方法来映射所有的REST API。
- en: 'Finally, our routing function will look as follows in `Server.java`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`Server.java`中，我们的路由函数将如下所示：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we created a `UserRepository` and forwarded it to our
    `UserHandler`. `UserHandler` will automatically call the `getAllUsers` method
    in `UserSampleRepository`. By calling the `getAllUsers` method of `UserHandler`,
    we will get all users from the sample repository class that we have implemented
    before.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了一个`UserRepository`并将其转发给我们的`UserHandler`。`UserHandler`将自动调用`UserSampleRepository`中的`getAllUsers`方法。通过调用`UserHandler`的`getAllUsers`方法，我们将从我们之前实现的示例存储库类中获取所有用户。
- en: 'Here, we are using the `nest` method and supplying parameters, such as the
    API path `GET("/")` and the media type. As the `nest` method accepts `RoutingFunction`
    as the second parameter, we can use more `nest` methods inside our basic `nest`
    methods. By using inner nesting methods, we have achieved the business requirement:
    our basic REST API starts from `"/user"` and basic get users API routing by `"/"`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`nest`方法并提供参数，比如API路径`GET("/")`和媒体类型。由于`nest`方法接受`RoutingFunction`作为第二个参数，我们可以在基本的`nest`方法中使用更多的`nest`方法。通过使用内部嵌套方法，我们已经实现了业务需求：我们的基本REST
    API从`"/user"`开始，并通过`"/"`基本获取用户API路由。
- en: So, the basic API path `/user` will automatically call the `getAllUsers` method
    as it's implemented in the preceding code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本的API路径`/user`将自动调用上面代码中实现的`getAllUsers`方法。
- en: Testing the endpoint – getAllUsers
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试端点-获取所有用户
- en: 'As we have finished out first API implementation, we can now test it by calling
    the following URI in the browser:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了第一个API的实现，现在我们可以通过在浏览器中调用以下URI来测试它：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get the following result:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '您应该得到以下结果： '
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can also check the API in any REST client, like Postman/SoapUI or any other
    REST client.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在任何REST客户端中检查API，比如Postman/SoapUI或其他任何REST客户端。
- en: getUser – implementation in the handler and repository
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: getUser-处理程序和存储库中的实现
- en: Here, we will define and implement the `getUser` method in our repository. Also,
    we will call the `getUser` method in the `main` class through `UserHandler`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在存储库中定义和实现`getUser`方法。此外，我们将通过`UserHandler`在`main`类中调用`getUser`方法。
- en: 'We will add an abstract method for the `getUser` method in the `UserRepository` class:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`UserRepository`类中为`getUser`方法添加一个抽象方法：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we will add the code for the `getUser` method. You can see that we have
    used the `Mono` return type for single-resource access.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将添加`getUser`方法的代码。您可以看到我们使用了`Mono`返回类型来访问单个资源。
- en: 'In the `UserRepositorySample` class (the concrete class for `UserRepository`),
    we will implement the abstract method `getUser`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserRepositorySample`类（`UserRepository`的具体类）中，我们将实现抽象方法`getUser`：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we have retrieved the specific user by `id`. Also, we
    have mentioned that if the user is not available, the method should be asked to
    return an empty Mono.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们通过`id`检索了特定用户。此外，我们已经提到，如果用户不可用，应该要求该方法返回一个空的Mono。
- en: 'In the `UserHandler` method, we will talk about how to handle the request and
    apply our business logic to get the response:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserHandler`方法中，我们将讨论如何处理请求并应用我们的业务逻辑来获得响应：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we have just converted the string `id` to an integer
    in order to supply it to our `Repository` method (`getUser`). Once we receive
    the result from the `Repository`, we are just mapping it in to `Mono<ServerResponse>`
    with the `JSON` content type. Also, we use `switchIfEmpty` to send the proper
    response if no item is available. If the searching item is not available, it will
    simply return the empty `Mono` object as a response.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们刚刚将字符串`id`转换为整数，以便将其提供给我们的`Repository`方法（`getUser`）。一旦我们从`Repository`接收到结果，我们只需将其映射到带有`JSON`内容类型的`Mono<ServerResponse>`中。此外，我们使用`switchIfEmpty`来在没有项目可用时发送适当的响应。如果搜索项目不可用，它将简单地返回空的`Mono`对象作为响应。
- en: 'Finally, we will add `getUser` in our routing path, which is in `Server.java`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`Server.java`中的路由路径中添加`getUser`：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, we have just added a new entry, `.andRoute(GET("/{id}"),
    handler::getUser)`, in our existing routing path. By doing so, we have added the `getUser`
    method and the corresponding REST API part to access a single user. After restarting
    the server, we should be able to use the REST API.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们刚刚在现有路由路径中添加了一个新条目`.andRoute(GET("/{id}"), handler::getUser)`。通过这样做，我们已经添加了`getUser`方法和相应的REST
    API部分来访问单个用户。重新启动服务器后，我们应该能够使用REST API。
- en: Testing the endpoint – getUser
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试端点-获取用户
- en: 'As we have finished out first API implementation, we can now test it by calling
    the following URI in the browser using the `GET` method:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了第一个API实现，现在可以通过在浏览器中使用`GET`方法调用以下URI来测试它：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should get the following result:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到以下结果：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: createUser – implementation in the handler and repository
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户-在处理程序和存储库中的实现
- en: Here, we will define and implement the `createUser` method in our repository.
    Also, we will call the `createUser` method in the `main` class through `UserHandler`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在存储库中定义和实现`createUser`方法。此外，我们将通过`UserHandler`在`main`类中调用`createUser`方法。
- en: 'We will add an abstract method for the `createUser` method in the `UserRepository` class:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`UserRepository`类中为`createUser`方法添加一个抽象方法：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we will talk about how to save the user by using the sample repository
    method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论如何使用示例存储库方法保存用户。
- en: 'In `UserRepositorySample` (the concrete class for `UserRepository`), we will
    implement the abstract method `createUser`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserRepositorySample`（`UserRepository`的具体类）中，我们将实现抽象方法`createUser`：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, we used `doOnNext` to save the user on the repository.
    Also, the method will return the empty `Mono` in the case of failure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`doOnNext`来保存用户在存储库中。此外，如果失败，该方法将返回空的`Mono`。
- en: 'As we have added the `createUser` method in the repository, here we will follow
    up on our handler:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在存储库中添加了`createUser`方法，因此我们将在处理程序中进行后续操作：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the `UserHandler` class, we have created the `createUser` method to add a
    user through a handler. In the method, we extract the request into `Mono` by the `bodyToMono`
    method. Once the `user` is created, it will be forwarded to `UserRepository` to
    save the method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserHandler`类中，我们创建了`createUser`方法，通过处理程序添加用户。在该方法中，我们通过`bodyToMono`方法将请求提取为`Mono`。一旦创建了`用户`，它将被转发到`UserRepository`以保存该方法。
- en: 'Finally, we will add the REST API path to save the `user` in our existing routing
    function in `Server.java`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`Server.java`的现有路由函数中添加REST API路径以保存`用户`：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Testing the endpoint – createUser
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试端点-创建用户
- en: 'As we have finished out first API implementation, we can now test it by calling
    the following URI in the browser:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了第一个API实现，现在可以通过在浏览器中调用以下URI来测试它：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As we can''t use the `POST` method in a browser, we will test it in a REST
    API client, called Postman:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无法在浏览器中使用`POST`方法，因此我们将在名为Postman的REST API客户端中进行测试：
- en: '![](img/82cd10d5-7c5a-445d-9586-4ad49159212a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82cd10d5-7c5a-445d-9586-4ad49159212a.png)'
- en: After adding the new user, you can check the results by calling the `getAllUsers`
    URI (`http://localhost:8081/user`).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新用户后，您可以通过调用`getAllUsers` URI（`http://localhost:8081/user`）来检查结果。
- en: '**Postman** is a REST client that can be used to build, test, and share REST
    API calls. Tools like these will be very helpful when we test our REST API without
    having to write code for testing.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Postman**是一个REST客户端，可用于构建，测试和共享REST API调用。在测试REST API时，这样的工具将非常有帮助，而无需编写测试代码。'
- en: '**SoapUI** is another REST client and can be used as an alternative to Postman.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**SoapUI**是另一个REST客户端，可以作为Postman的替代品使用。'
- en: updateUser – implementation in the handler and repository
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户-在处理程序和存储库中的实现
- en: Here, we will define and implement the `updateUser` method in our repository.
    Also, we will call the `updateUser` method in the main class through `UserHandler`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在存储库中定义和实现`updateUser`方法。此外，我们将通过`UserHandler`在`main`类中调用`updateUser`方法。
- en: 'We will add an abstract method for the `updateUser` method in the `UserRepository` class:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`UserRepository`类中为`updateUser`方法添加一个抽象方法：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the `UserRepositorySample` class, we will add the logic to update the code.
    Here, we will use the `userid` as the key and the `User` object as the value to
    store in our map:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserRepositorySample`类中，我们将添加更新代码的逻辑。在这里，我们将使用`userid`作为键，并将`User`对象作为值存储在我们的映射中：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding code, we have updated the user by adding the specified user
    (from the request). Once the user is added in the list, the method will return
    `Mono<Void>`; otherwise, it will return the `Mono.empty` object.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们通过添加指定的用户（来自请求）来更新用户。一旦用户添加到列表中，该方法将返回`Mono<Void>`；否则，它将返回`Mono.empty`对象。
- en: 'As we have added the `updateUser` method in the repository, here we will follow
    up on our handler:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在存储库中添加了`updateUser`方法，现在我们将跟进我们的处理程序：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding code, we have converting the user request to `Mono<User>` by
    calling the `bodyToMono` method. The `bodyToMono` method will extract the body
    into a `Mono` object, so it can be used for the saving option.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们通过调用`bodyToMono`方法将用户请求转换为`Mono<User>`。`bodyToMono`方法将提取主体并转换为`Mono`对象，以便用于保存选项。
- en: 'As we did with other API paths, we add the `updateUser` API in `Server.java`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他API路径一样，我们在`Server.java`中添加了`updateUser` API：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Testing the endpoint – updateUser
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试端点 - updateUser
- en: 'As we have finished out first API implementation, we can now test it by calling
    the URI `http://localhost:8081/user` in Postman or SoapUI, using the `PUT` method:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经添加了`deleteUser`方法，现在我们将通过在Postman或SoapUI中使用`PUT`方法调用URI `http://localhost:8081/user`
    来测试它：
- en: '![](img/523cfdae-1c96-4847-bd10-03d5528e29b8.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/523cfdae-1c96-4847-bd10-03d5528e29b8.png)'
- en: After updating the new user, you can check the results by calling the `getAllUsers`
    URI (`http://localhost:8081/user`).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 更新新用户后，您可以通过调用`getAllUsers` URI (`http://localhost:8081/user`) 来检查结果。
- en: deleteUser – implementation in the handler and repository
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: deleteUser - 处理程序和存储库中的实现
- en: Here, we will define and implement the `deleteUser` method in our repository.
    Also, we will call the `deleteUser` method in the `main` class through `UserHandler`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在存储库中定义和实现`deleteUser`方法。此外，我们将通过`UserHandler`在`main`类中调用`deleteUser`方法。
- en: 'As usual, we will add an abstract method for the `deleteUser` method in the
    `UserRepository` class:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将在`UserRepository`类中为`deleteUser`方法添加一个抽象方法：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `UserRepositorySample.java` file, we will add the `deleteUser` method
    to remove the specified user from the list:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserRepositorySample.java`文件中，我们将添加`deleteUser`方法来从列表中删除指定的用户：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding method, we simply remove the element from users and return
    an empty `Mono` object.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法中，我们只是从用户中删除元素并返回一个空的`Mono`对象。
- en: 'As we have added the `deleteUser` method in the repository, here we will follow
    up on our handler:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在存储库中添加了`deleteUser`方法，现在我们将跟进我们的处理程序：
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, we will add the REST API path to save the `user` in our existing routing
    function in `Server.java`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`Server.java`中的现有路由函数中添加REST API路径以保存`user`：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Testing the endpoint – deleteUser
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试端点 - deleteUser
- en: 'As we have finished out first API implementation, we can now test it by calling
    the URI `http://localhost:8081/user/100` in our client (Postman or SoapUI) using
    the `DELETE` method:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了第一个API的实现，现在我们可以通过在客户端（Postman或SoapUI）中使用`DELETE`方法调用URI `http://localhost:8081/user/100`
    来测试它：
- en: '![](img/df51fdd2-5775-4372-b8a4-8db654b3a0ff.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df51fdd2-5775-4372-b8a4-8db654b3a0ff.png)'
- en: After deleting the new user, you can check the results by calling the `getAllUsers`
    URI (`http://localhost:8081/user`).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 删除新用户后，您可以通过调用`getAllUsers` URI (`http://localhost:8081/user`) 来检查结果。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to use Reactive support (Flux and Mono)
    and how to integrate our APIs with Reactive components. We have learned basic
    CRUD operations on Reactive-based REST APIs with the help of the Reactor server.
    Also, we have covered how to add routing options for our CRUD operations and talked
    a little bit about Flux and Mono implementations in our CRUD operations.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Reactive支持（Flux和Mono）以及如何将我们的API与Reactive组件集成。我们已经学习了如何使用Reactor服务器对基于Reactive的REST
    API进行基本的CRUD操作。此外，我们还介绍了如何为我们的CRUD操作添加路由选项，并简要讨论了在CRUD操作中Flux和Mono的实现。
- en: In the coming chapters, we will be focusing on Spring 5 REST (without Reactor
    support), as Spring Reactive libraries/APIs are still in unstable mode and haven't
    been used much in mainstream applications. Though the Spring team officially released
    support for Reactive, most business requirements are not clearly implemented and
    documented. Considering this situation, in upcoming chapters we will talk about
    Spring 5 without Reactive-related topics.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将专注于Spring 5 REST（不带Reactor支持），因为Spring Reactive库/ API仍处于不稳定状态，并且在主流应用程序中并没有被广泛使用。尽管Spring团队正式发布了对Reactive的支持，但大多数业务需求并没有得到清晰的实现和文档化。考虑到这种情况，在接下来的章节中，我们将讨论不涉及Reactive相关主题的Spring
    5。
