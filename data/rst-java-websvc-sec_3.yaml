- en: Chapter 3. Security Management with RESTEasy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用RESTEasy进行安全管理
- en: Welcome to the third chapter. We hope you are enjoying and learning with us.
    In this chapter, you will get more involved with security management. You will
    also work with some more advanced security concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第三章。我们希望您能和我们一起享受并学习。在本章中，您将更深入地了解安全管理。您还将学习一些更高级的安全概念。
- en: Security management in applications built with RESTful web services can be more
    granular than what we reviewed in the previous chapter. If we think around authentication
    and authorization topics, we described the former; authorization was set aside.
    This is because we want to treat it slowly and in a very detailed level in this
    chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RESTful Web服务构建的应用程序中的安全管理可以比我们在上一章中审查的更加细粒度。如果我们考虑认证和授权主题，我们描述了前者；授权被搁置了。这是因为我们希望在本章中慢慢地并且在非常详细的层面上处理它。
- en: 'The topics covered in this chapter are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Implementing security restrictions related to authentication and authorization
    in to an application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将认证和授权相关的安全限制实施到应用程序中。
- en: Implementing fine-grained security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施细粒度安全
- en: Using annotations to obtain more granularity over resource access control
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用注释来获得对资源访问控制的更细粒度控制
- en: Fine-grained and coarse-grained security
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 细粒度和粗粒度安全
- en: 'There are two levels of security we can manage: **fine-grained** and **coarse-grained**.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以管理两个级别的安全：**细粒度**和**粗粒度**。
- en: When we mention the term coarse-grained in the context of security, we refer
    to security systems that are generally handled at high levels within the application.
    The examples in [Chapter 2](ch02.html "Chapter 2. The Importance of Securing Web
    Services"), *The Importance of Securing Web Services*, in which a user with any
    role can make use of the services, is a perfect example of coarse-grained because
    the coarse-grained option is used when the security restrictions give access to
    users without worrying about roles or more specific features about the authenticated
    user. This means that in order for the system to allow access to functions, we
    just verify the user identity; in other words, it authenticates the user. However,
    it is not enough to have an authenticated user of the application in real life.
    It will also be necessary that the user is authorized to use certain features.
    We can achieve this using fine-grained controls. Validating the user's assigned
    permissions to access functions means using authorization controls.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在安全的上下文中提到粗粒度这个术语时，我们指的是通常在应用程序的高级别处理的安全系统。在[第2章](ch02.html "第2章。保护Web服务的重要性")中的示例，*保护Web服务的重要性*，其中任何角色的用户都可以使用服务，是粗粒度的完美例子，因为粗粒度选项是在安全限制允许用户访问而不必担心角色或关于经过身份验证的用户更具体的功能的情况下使用的。这意味着为了系统允许访问功能，我们只需验证用户身份；换句话说，它对用户进行了认证。然而，在现实生活中，仅仅拥有应用程序的经过身份验证的用户是不够的。还需要用户被授权使用某些功能。我们可以使用细粒度控制来实现这一点。验证用户被分配的权限以访问功能意味着使用授权控制。
- en: 'To demonstrate these concepts in a practical way, we will make use of the application
    we created in the previous chapter. You can access the source code on GitHub at
    the following URL, under the basic authentication section:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以实际方式演示这些概念，我们将利用我们在上一章中创建的应用程序。您可以在GitHub上的以下URL中访问源代码，在基本认证部分下：
- en: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter02/basic-authentication](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter02/basic-authentication)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter02/basic-authentication](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter02/basic-authentication)'
- en: 'Let''s start; suppose we want only users with the role `administrator` to be
    able to make use of the features in our application. The first thing to do is
    to change the `web.xml` file and add a constraint as follows. Note how the changes
    appear in bold:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧；假设我们只希望具有`管理员`角色的用户能够使用我们应用程序中的功能。首先要做的事情是更改`web.xml`文件并添加约束，如下所示。请注意，更改如何以粗体显示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, let's try to make the request using the user we just created (`username`).
    You will be surprised when you get a `403 Forbidden` error.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用我们刚刚创建的用户（`用户名`）进行请求。当您收到`403 Forbidden`错误时，您会感到惊讶。
- en: 'Note that if you try to make the request with invalid credentials, you will
    get the error `HTTP/1.1 401 Unauthorized`. The error is pretty clear; the access
    is unauthorized. This means that we have sent invalid credentials, and hence the
    user can''t be authenticated. The error we just got is `HTTP/1.1 403 Forbidden`,
    which indicates that the user was successfully logged in but was not authorized
    to use the functionality that they require. This is demonstrated in the following
    screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您尝试使用无效凭据进行请求，您将收到错误`HTTP/1.1 401 Unauthorized`。错误非常明显；访问未经授权。这意味着我们发送了无效的凭据，因此用户无法被认证。我们刚刚收到的错误是`HTTP/1.1
    403 Forbidden`，这表明用户已成功登录但未被授权使用他们需要的功能。这在下面的截图中有所展示：
- en: '![Fine-grained and coarse-grained security](img/0109OS_03_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: 细粒度和粗粒度安全
- en: 'Now, let''s create a new user with the role `administrator` using the `JBOSS_HOME/standalone/bin/adduser.sh`
    file. Enter the requested information as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`JBOSS_HOME/standalone/bin/adduser.sh`文件创建一个具有`管理员`角色的新用户。按照以下截图中显示的信息输入请求的信息：
- en: '![Fine-grained and coarse-grained security](img/0109OS_03_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Fine-grained and coarse-grained security](img/0109OS_03_02.jpg)'
- en: 'When we change the credentials in SoapUI, the result of the request is successful,
    as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在SoapUI中更改凭据时，请求的结果是成功的，如下截图所示：
- en: '![Fine-grained and coarse-grained security](img/0109OS_03_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Fine-grained and coarse-grained security](img/0109OS_03_03.jpg)'
- en: As you can see, we used an additional control in which we restricted only authenticated
    users with the `administrator` role assigned to them; they are capable of using
    the web service functions. It is very common to use these kinds of controls when
    managing security on real-world applications. As we have implemented a more detailed
    level of control, the platform offers us the opportunity to implement more granular
    controls, such as the ones we will see right now.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用了额外的控制，只限制了分配了`administrator`角色的经过身份验证的用户；他们能够使用Web服务功能。在管理真实世界应用程序的安全性时，使用这种控制是非常常见的。由于我们实施了更详细的控制级别，平台为我们提供了实施更细粒度控制的机会，这正是我们将立即看到的。
- en: Securing HTTP methods
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护HTTP方法
- en: One of the benefits of JAAS is that we have control even at the level of HTTP
    methods. Thus, we can implement security controls to allow only users with a certain
    role to use certain methods with regards to our convenience; for example, one
    role to save information, another to delete it, others to read it, and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JAAS的一个好处是，我们甚至可以在HTTP方法的级别上进行控制。因此，我们可以实施安全控制，只允许具有特定角色的用户根据我们的方便使用特定方法；例如，一个角色保存信息，另一个删除信息，其他角色读取信息，依此类推。
- en: To implement these kinds of controls, it is necessary that we understand the
    HTTP methods' functionality in the application. In our example, we already know
    that in order to save information, the application always uses the `HTTP POST`
    method. Also, when we want to read information, the application uses the `HTTP
    GET` method. Therefore, we will modify our example so that only users with the
    `administrator` role are able to use the `savePerson` (`HTTP POST`) method. Meanwhile,
    only those with the `reader` role will be able to read information using the `findById`
    (`HTTP GET`) method.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实施这些控制，我们需要了解应用程序中HTTP方法的功能。在我们的示例中，我们已经知道为了保存信息，应用程序总是使用`HTTP POST`方法。同样，当我们想要读取信息时，应用程序使用`HTTP
    GET`方法。因此，我们将修改我们的示例，以便只有具有`administrator`角色的用户能够使用`savePerson`（`HTTP POST`）方法。与此同时，只有具有`reader`角色的用户才能使用`findById`（`HTTP
    GET`）方法读取信息。
- en: 'With this as our objective, we will modify our `web.xml` file as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们将修改我们的`web.xml`文件如下：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before we continue, we must create a new user (`readeruser`) with the role `reader`
    using the `JBOSS_HOME/standalone/bin/adduser.sh` script.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们必须使用`JBOSS_HOME/standalone/bin/adduser.sh`脚本创建一个具有`reader`角色的新用户（`readeruser`）。
- en: Now, let's test the roles and their permissions using SoapUI.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用SoapUI测试角色和其权限。
- en: HTTP method – POST
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP方法 - POST
- en: We are going to test the `POST` method using a role that doesn't have the required
    permissions. You will see the permission error message.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个没有所需权限的角色来测试`POST`方法。您将看到权限错误消息。
- en: 'Role: Reader'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 角色：读者
- en: 'This method is not allowed when using this role. This is demonstrated in the
    following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此角色时，不允许此方法。在以下截图中进行了演示：
- en: '![HTTP method – POST](img/0109OS_03_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP方法 - POST](img/0109OS_03_04.jpg)'
- en: 'Role: Administrator'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 角色：管理员
- en: 'With this role, you can execute the method successfully. This is demonstrated
    in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此角色，您可以成功执行该方法。在以下截图中进行了演示：
- en: '![HTTP method – POST](img/0109OS_03_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP方法 - POST](img/0109OS_03_05.jpg)'
- en: HTTP method – GET
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP方法 - GET
- en: Now, we are going to use a user with the required permissions to use the GET
    method. The execution should be successful with this role.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用具有所需权限的用户来使用GET方法。执行应该成功。
- en: 'Role: Reader'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 角色：读者
- en: 'Now, the execution is successful with this role. This is demonstrated in the
    following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用此角色执行成功。在以下截图中进行了演示：
- en: '![HTTP method – GET](img/0109OS_03_06.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP方法 - GET](img/0109OS_03_06.jpg)'
- en: 'Role: Administrator'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 角色：管理员
- en: 'The admin role does not have access to this method. This is demonstrated in
    the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员角色无法访问此方法。在以下截图中进行了演示：
- en: '![HTTP method – GET](img/0109OS_03_07.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP方法 - GET](img/0109OS_03_07.jpg)'
- en: The same consideration of roles can be used for URL patterns. In our example,
    we apply the restriction on the `/services/*` pattern. However, you can apply
    it at a deeper level, for example `/services/person/*`. We mean that if we had
    another service that is exposed under the URL `/services/other-service/`, we can
    set it so that a role has access to services under the path `/services/person/*`
    and different levels of access under the path `/services/other-service/*`. This
    example is quite simple and is proposed as a basic example to the reader.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对URL模式可以使用相同的角色考虑。在我们的示例中，我们对`/services/*`模式应用了限制。但是，您可以在更深层次上应用它，例如`/services/person/*`。我们的意思是，如果我们有另一个服务暴露在URL`/services/other-service/`下，我们可以设置一个角色可以访问路径`/services/person/*`下的服务，并在路径`/services/other-service/*`下实现不同级别的访问。这个例子非常简单，是作为读者的基本示例提出的。
- en: After applying all the changes, we set security over all methods listed in the
    `web.xml` file. However, we must ask ourselves a question; what happens with the
    methods that haven't been included?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用所有更改后，我们在`web.xml`文件中设置了所有方法的安全性。然而，我们必须问自己一个问题；那些未被包括的方法会发生什么？
- en: 'The OWASP (Open Web Application Security Project), a nonprofit organization
    dedicated to finding and fixing security holes in software, has written a paper
    on this, and it is called the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP（开放Web应用程序安全项目）是一个致力于发现和修复软件安全漏洞的非营利组织，他们撰写了一篇关于此的论文，标题如下：
- en: '*Bypassing Web Authentication and Authorization with HTTP Verb Tampering: How
    to inadvertently allow attackers full access to your web application.*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过HTTP动词篡改绕过Web身份验证和授权：如何无意中允许攻击者完全访问您的Web应用程序。*'
- en: 'If you want to check out the complete document, you can do so by accessing
    the following link:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看完整的文档，可以通过访问以下链接进行：
- en: '[http://dl.packetstormsecurity.net/papers/web/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf](http://dl.packetstormsecurity.net/papers/web/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://dl.packetstormsecurity.net/papers/web/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf](http://dl.packetstormsecurity.net/papers/web/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf)'
- en: What the OWASP describes in the aforementioned document is simple. It shows
    that JEE exposes potential security gaps in the `web.xml` configuration file if
    we don't take certain precautions as all methods that are not listed in the file
    can be used without any restrictions. This means that a user that hasn't been
    authenticated in the application can invoke any other HTTP method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP在前面提到的文件中描述的是简单的。它显示了如果我们不采取某些预防措施，JEE在`web.xml`配置文件中暴露了潜在的安全漏洞，因为文件中未列出的所有方法都可以无限制地使用。这意味着在应用程序中未经身份验证的用户可以调用任何其他HTTP方法。
- en: 'The OWASP states the following in the earlier article:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP在早期的文章中陈述了以下内容：
- en: '*Unfortunately, almost all the implementations of this mechanism work in an
    unexpected and insecure war. Rather than denying methods not specified in the
    rule, they allow any method not listed. Ironically, by listing specific methods
    in their rule, developers are actually allowing more access than they intended.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*不幸的是，几乎所有这种机制的实现都以意想不到的和不安全的方式运行。它们允许任何未列出的方法，而不是拒绝规则中未指定的方法。具有讽刺意味的是，通过在规则中列出特定方法，开发人员实际上允许了比他们预期的更多的访问权限。*'
- en: In order to understand this in a better way, let's focus on an analogy.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们用一个类比来说明。
- en: Suppose you have a web application to write books that handles two roles—one
    for authors who are able to write the pages of the books and another for reviewers
    who can only read the books and add notes with comments. Now, suppose a user ends
    up getting the URL of your application by mistake. This user does not have any
    credentials to deliver, and the obvious thing is that the user should not even
    be able to access the application. However, the problem that is demonstrated by
    the OWASP is that instead of doing what seems obvious, it actually enables application
    access to unauthenticated users with enough permission to perform any operation
    on the books, such as removing them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个写书的网络应用程序，处理两种角色——一种是作者，他们能够写书的页面，另一种是评论者，他们只能阅读书籍并添加带有评论的注释。现在，假设一个用户因错误而最终获得了您应用程序的URL。这个用户没有任何凭据可以提供，显而易见的是，这个用户甚至不应该能够访问应用程序。然而，OWASP所展示的问题是，它实际上使未经身份验证的用户能够访问具有足够权限执行任何操作的应用程序，例如删除书籍，而不是做出明显的事情。
- en: Let's take an example in order to see this inconvenience, and after that, we
    will implement OWASP's suggestions to solve it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子来看看这种不便，然后我们将实施OWASP的建议来解决它。
- en: 'Let''s create a new method within the class `PersonService`; we''ll use one
    of the methods that has not been listed in the `web.xml` file this time. One of
    the most used methods is `HTTP DELETE`; its functionality is to remove one of
    the entries stored in memory using its ID. This will pass the ID of the record
    as a parameter in the URL, so the URL of the request will look like the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`PersonService`类中创建一个新的方法；这次我们将使用`web.xml`文件中未列出的方法之一。最常用的方法之一是`HTTP DELETE`；它的功能是使用其ID从内存中删除存储的条目。这将在URL中将记录的ID作为参数传递，因此请求的URL将如下所示：
- en: '`http://localhost:8080/resteasy-examples/services/person/[ID]`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/resteasy-examples/services/person/[ID]`'
- en: 'The method implementation should look like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的实现应该如下所示：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In order to test the method, we must first create a couple of registers through
    SoapUI, also using the `HTTP POST` method and a string such as the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这种方法，我们必须首先通过SoapUI创建一对寄存器，还要使用`HTTP POST`方法和以下字符串：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, select the `DELETE` method in SoapUI, remove the information on the credentials
    we use for authentication, and perform a request using one of the item IDs, as
    shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在SoapUI中选择`DELETE`方法，删除我们用于身份验证的凭据信息，并使用其中一个项目ID执行请求，如下面的屏幕截图所示：
- en: '![HTTP method – GET](img/0109OS_03_08.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP方法 - GET](img/0109OS_03_08.jpg)'
- en: As you can see, the item was removed and the server returns the message `HTTP/1.1
    410 Gone`. This indicates that the resource is no longer available. As you have
    noted, when we don't specify that this method should be protected by default,
    it is marked as available. In our case, any user without the need to authenticate
    can remove our application resources.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该项目已被删除，服务器返回消息`HTTP/1.1 410 Gone`。这表明资源不再可用。正如您所注意到的，当我们没有指定此方法默认应该受到保护时，它被标记为可用。在我们的情况下，任何用户都可以删除我们的应用程序资源，而无需进行身份验证。
- en: 'To overcome this drawback, the OWASP recommends adding another security constraint
    in the `web.xml` file. This new security constraint should not have any HTTP method
    listed within itself, which means denying access to all HTTP methods, as shown
    in the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这一缺点，OWASP建议在`web.xml`文件中添加另一个安全约束。这个新的安全约束不应该在自身列出任何HTTP方法，这意味着拒绝所有HTTP方法的访问，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, we will have to add a new role in order to determine an authenticated
    user in the application, as shown in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还必须添加一个新的角色，以确定应用程序中的经过身份验证的用户，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we run the request from SoapUI, and we can see the error message `HTTP/1.1
    401 Unauthorized`. This indicates that you cannot execute the request because
    the user has not been authenticated, which in turn means that unauthenticated
    users cannot use the `DELETE` or any other method.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们从SoapUI运行请求，我们可以看到错误消息`HTTP/1.1 401 Unauthorized`。这表明您无法执行请求，因为用户尚未经过身份验证，这反过来意味着未经身份验证的用户无法使用`DELETE`或任何其他方法。
- en: Fine-grained security implementation through annotations
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过注释实现细粒度安全性
- en: 'The `web.xml` file, the file that allows all security settings, is not the
    only way in which you can achieve fine-grained security implementation; the platform
    also offers the possibility of using annotations for security checks. To do this,
    there are three options that can be chosen depending on your needs, listed as
    follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`web.xml`文件，允许所有安全设置的文件，不是实现细粒度安全的唯一方式；平台还提供了使用注解进行安全检查的可能性。为此，根据您的需求，可以选择以下三个选项：'
- en: '`@RolesAllowed`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RolesAllowed`'
- en: '`@DenyAll`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@DenyAll`'
- en: '`@PermitAll`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PermitAll`'
- en: The @RolesAllowed annotation
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`@RolesAllowed`注解'
- en: 'The `@RolesAllowed` annotation can be applied at the method or class level.
    With this annotation, you can define a set of roles that are allowed to use the
    annotated resource. As a parameter annotation, let''s write all allowed roles.
    For this example, we will modify our `web.xml` file as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RolesAllowed`注解可以应用在方法或类级别。使用此注解，您可以定义一组允许使用被注解资源的角色。作为参数注解，让我们写下所有允许的角色。对于本例，我们将修改我们的`web.xml`文件如下：'
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the class `PersonService`, let''s use the annotation on every method with
    the roles we want to be able to execute the method, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PersonService`类中，让我们在每个方法上使用注解，指定我们希望能够执行该方法的角色，如下所示：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is now time to test it through SoapUI.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候通过SoapUI进行测试了。
- en: The savePerson method
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: savePerson方法
- en: 'Now, we will test the `savePerson` method of the `PersonService` class with
    the admin role, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用管理员角色测试`PersonService`类的`savePerson`方法，如下截图所示：
- en: '![The savePerson method](img/0109OS_03_09.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![savePerson方法](img/0109OS_03_09.jpg)'
- en: 'The execution was successful, as you can see in the preceding screenshot. The
    reason is because we included both roles in the `@RolesAllowed` annotation. Also,
    we will test the execution using the `reader` role for it to be successful, as
    shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 执行成功，如前面的截图所示。原因是因为我们在`@RolesAllowed`注解中包含了两个角色。此外，我们将使用`reader`角色测试执行，以使其成功，如下截图所示：
- en: '![The savePerson method](img/0109OS_03_10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![savePerson方法](img/0109OS_03_10.jpg)'
- en: As you can see, we grant permissions to specific roles when we use the annotation
    `@RolesAllowed`. For this method, we used `administrator` and `reader`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，当我们使用`@RolesAllowed`注解时，我们授予特定角色的权限。对于此方法，我们使用了`administrator`和`reader`。
- en: The findById method
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: findById方法
- en: 'We will now test the method `findById` with the `administrator` role, as shown
    in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`administrator`角色测试`findById`方法，如下截图所示：
- en: '![The findById method](img/0109OS_03_11.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![findById方法](img/0109OS_03_11.jpg)'
- en: 'The screenshot shows that the execution was successful because the `@RolesAllowed`
    annotation includes admin. As we didn''t include the `reader` role, the next execution
    should not be authorized. Let''s test it right now, as shown in the following
    screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 截图显示执行成功，因为`@RolesAllowed`注解包含了admin。由于我们没有包含`reader`角色，下一次执行不应被授权。让我们立即测试，如下截图所示：
- en: '![The findById method](img/0109OS_03_12.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![findById方法](img/0109OS_03_12.jpg)'
- en: Once again, we used the annotation `@RolesAllowed` to grant permissions at a
    method level, but this time we specified just one role, `administrator`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用`@RolesAllowed`注解在方法级别授予权限，但这次我们只指定了一个角色，即`administrator`。
- en: 'All the source code for this chapter can be found at the following URL:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有源代码都可以在以下网址找到：
- en: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter03](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter03)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/restful-java-web-services-security/source-code/tree/master/chapter03](https://github.com/restful-java-web-services-security/source-code/tree/master/chapter03)'
- en: The @DenyAll annotation
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`@DenyAll`注解'
- en: 'The `@DenyAll` annotation allows us to define operations that cannot be invoked
    regardless of whether the user is authenticated or the roles are related to the
    user. The specification defines this annotation as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`@DenyAll`注解允许我们定义无论用户是否经过身份验证或角色是否与用户相关，都无法调用的操作。规范将此注解定义如下：'
- en: '*Specifies that no security roles are allowed to invoke the specified method(s)
    - i.e. that the methods are to be excluded from execution in the J2EE container.*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*指定不允许安全角色调用指定的方法 - 即这些方法应该在J2EE容器中被排除在执行之外。*'
- en: The @PermitAll annotation
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`@PermitAll`注解'
- en: When we use the `@PermitAll` annotation, we tell the container that the annotated
    resource (a method or all methods of the class) can be invoked by any user who
    has logged in to the application. This means that it is only necessary that the
    user be authenticated; it's not required to have any specific role assigned.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`@PermitAll`注解时，我们告诉容器，被注解的资源（方法或类的所有方法）可以被已登录到应用程序的任何用户调用。这意味着只需要用户经过身份验证；不需要分配任何特定的角色。
- en: From these three annotations, the most used is undoubtedly the first one (`@RolesAllowed`);
    the others aren't often used since `@PermitAll` can be easily replaced in the
    `web.xml` file, and `@DenyAll` can be used only in few scenarios.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从这三个注解中，无疑最常用的是第一个（`@RolesAllowed`）；其他两个并不经常使用，因为`@PermitAll`可以很容易地在`web.xml`文件中替代，而`@DenyAll`只能在少数情况下使用。
- en: Programmatical implementation of fine-grained security
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细粒度安全的编程实现
- en: RESTEasy, besides providing options for security management that we have seen,
    programmatically provides an additional mechanism for access control.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供我们已经看到的安全管理选项外，RESTEasy还提供了另一种用于访问控制的机制。
- en: 'Within the operations of web services, you can add an additional parameter
    to the method. This allows access to the security context, without altering the
    way clients invoke the method or the action that the method executes. The parameter
    must be included in the following way:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web服务的操作中，您可以向方法添加额外的参数。这允许访问安全上下文，而不会改变客户端调用方法的方式或方法执行的操作。参数必须以以下方式包含：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Suppose that in our example, in the method `savePerson`, we want access to this
    functionality. The only change we need to make is shown in the following code
    snippets.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在我们的示例中，在`savePerson`方法中，我们想要访问此功能。我们需要做的唯一更改如下所示。
- en: 'Earlier, the method used just one parameter, as shown in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，该方法只使用一个参数，如下所示的代码：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, the method has another parameter, as shown in the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，该方法有另一个参数，如下所示的代码：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The interface `javax.ws.rs.core.SecurityContext` offers the following three
    interesting features:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接口`javax.ws.rs.core.SecurityContext`提供了以下三个有趣的功能：
- en: '`isUserInRole()`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isUserInRole()`'
- en: '`getUserPrincipal()`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserPrincipal()`'
- en: '`isSecure()`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSecure()`'
- en: 'The functionality of the method `isUserInRole ()` is similar to the annotation
    `@RolesAllowed`; its goal is to perform a check in order to determine if a logged
    user belongs to a specified role, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`isUserInRole()`的功能类似于注解`@RolesAllowed`；其目标是进行检查，以确定已登录的用户是否属于指定的角色，如下所示：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `getUserPrincipal()` method obtains the primary user in the application,
    in other words, the logged user. You can obtain information such as the username
    that represents it through this user; this is always useful in scenarios in which
    you want to generate audit trails.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`getUserPrincipal()`方法获取应用程序中的主要用户，换句话说，已登录的用户。通过此用户，您可以获取代表它的用户名等信息；这在您想要生成审计跟踪的场景中总是很有用。'
- en: Finally, the method `isSecure()` determines whether the invocation is being
    made through a secure means of communication, such as whether you are using HTTPS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，方法`isSecure()`确定调用是否通过安全的通信方式进行，例如您是否使用了HTTPS。
- en: As you know, HTTP and HTTPS are protocols to exchange information; the former
    is usually used when you share information that is not sensitive, and the latter
    is often used when the information is sensitive and we need a secure channel.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，HTTP和HTTPS是用于交换信息的协议；前者通常用于共享非敏感信息，而后者通常用于共享敏感信息并且需要安全通道时。
- en: Let's imagine the web portal of ABC Bank, particularly the home page where it
    shows information about services and stuff related to the bank's business that
    can be managed with HTTP. We can't manage the web pages that work with information
    about accounts or money transfers with the HTTP protocol; this is because the
    information is not protected. Through the HTTPS protocol, we can encrypt the information;
    when the information is intercepted by a traffic analyzer such as Wireshark, it
    can't be interpreted.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一下ABC银行的网站，特别是首页，它显示了关于服务和与银行业务相关的信息，可以使用HTTP进行管理。我们不能使用HTTP协议管理处理账户信息或资金转账的网页；这是因为信息没有受到保护。通过HTTPS协议，我们可以加密信息；当信息被Wireshark等流量分析器拦截时，它无法被解释。
- en: This functionality can be tested by applying the changes to the project to enable
    HTTPS, as we show you in [Chapter 2](ch02.html "Chapter 2. The Importance of Securing
    Web Services"), *The Importance of Securing Web Services*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对项目应用更改以启用HTTPS，可以测试此功能，我们在[第2章](ch02.html "第2章。保护Web服务的重要性")*保护Web服务的重要性*中向您展示了这一点。
- en: When you invoke this method using HTTP, the result will be false, but it will
    be true when you invoke the same method using HTTPS.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用HTTP调用此方法时，结果将为false，但当您使用HTTPS调用相同的方法时，结果将为true。
- en: These three methods we just analyzed are very useful when we want to implement
    fine-grained security checks. For example, when we want to implement an audit,
    we can determine if one action was executed using a transmission secure protocol
    such as HTTPS; also, we can discover information about the user that is executing
    the action.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种方法在我们想要实现细粒度安全检查时非常有用。例如，当我们想要实现审计时，我们可以确定某个操作是否使用了诸如HTTPS之类的传输安全协议；此外，我们还可以发现执行该操作的用户的信息。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The needs that we have when implementing application security can be quite varied.
    In this chapter, we saw how JAX-RS offers mechanisms to handle security, starting
    from a fairly basic model (coarse-grained) to a more elaborate one (fine-grained)
    in which you can perform more exhaustive controls, including programmatic controls
    and controls through configuration files.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现应用程序安全时，我们可能有各种需求。在本章中，我们看到了JAX-RS如何提供处理安全性的机制，从一个相当基本的模型（粗粒度）开始，到一个更精细的模型（细粒度），在后者中，您可以执行更彻底的控制，包括编程控制和通过配置文件进行的控制。
- en: Of course, it is always recommended to keep these checks in configuration files
    such as `web.xml`. Since you have the controls centralized in one place, it facilitates
    maintenance. This does not occur when security is handled at the level of source
    code, because when there are many classes that are part of the project, the tasks
    get complicated when some form of modification to the current functionality is
    required.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，始终建议将这些检查保存在诸如`web.xml`之类的配置文件中。由于您将控件集中在一个地方，这样做有助于维护。当安全性在源代码级别处理时，情况并非如此，因为当有许多类是项目的一部分时，如果需要对当前功能进行某种修改，任务就会变得复杂。
- en: Now, you should prepare for the next chapter, in which we will talk about OAuth.
    It's a very exciting topic because this protocol is widely accepted and used across
    Internet applications. The rockstar companies of the World Wide Web, such as Google,
    Twitter, and Facebook, among others, use it with great success.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该为下一章做准备，我们将讨论OAuth。这是一个非常令人兴奋的话题，因为这个协议在互联网应用程序中被广泛接受和使用。世界范围内的明星公司，如谷歌、Twitter和Facebook等，都非常成功地使用了它。
