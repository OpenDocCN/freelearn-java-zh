- en: Chapter 3. Testing and Monitoring Web-Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。测试和监视Web服务
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Integration testing using Spring-JUnit support
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring-JUnit支持进行集成测试
- en: Server-side integration testing using `MockWebServiceClient`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MockWebServiceClient`进行服务器端集成测试
- en: Client-side integration testing using `MockWebServiceServer`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MockWebServiceServer`进行客户端集成测试
- en: Monitoring TCP messages of a Web-Service using TCPMon
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TCPMon监视Web服务的TCP消息
- en: Monitoring and load/functional testing a Web-Service using soapUI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用soapUI监视和负载/功能测试Web服务
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: New software development strategies require comprehensive testing in order to
    achieve the quality in the software development process. Test-driven design (TDD)
    is an evolutionary approach to the development process, which combines the test-first
    development process and re-factoring. In the test-first development process, you
    write a test before writing the complete production code to simplify the test.
    This testing includes unit testing as well as integration testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 新的软件开发策略需要全面的测试，以实现软件开发过程中的质量。测试驱动设计（TDD）是开发过程的一种演进方法，它结合了测试优先的开发过程和重构。在测试优先的开发过程中，您在编写完整的生产代码之前编写测试以简化测试。这种测试包括单元测试和集成测试。
- en: Spring provides support for integration testing features using the spring-test
    package. These features include dependency injection and loading the application
    context within the test environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了使用spring-test包的集成测试功能支持。这些功能包括依赖注入和在测试环境中加载应用程序上下文。
- en: Writing a unit test that uses mock frameworks (such as EasyMock and JMock to
    test a Web-Service) is quite easy. However, it is not testing the content of the
    XML messages, so it is not simulating the real production environment of testing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个使用模拟框架（如EasyMock和JMock）测试Web服务的单元测试非常容易。但是，它不测试XML消息的内容，因此不模拟测试的真实生产环境。
- en: Spring Web-Services 2.0 provides features to create server-side integration
    tests as well as the client-side one. Using these integration test features, it
    is very simple to test a SOAP service without deploying it on the server when
    you are testing the server side, and without the need to set up a server when
    you are testing the client side.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web-Services 2.0提供了创建服务器端集成测试以及客户端集成测试的功能。使用这些集成测试功能，可以在不部署在服务器上时测试SOAP服务，当测试服务器端时，而在测试客户端时无需设置服务器。
- en: In the first recipe, we will discuss how to use the Spring framework for Integration
    testing. In the next two recipes, new features for integration testing of Spring-WS
    2.0 are detailed. In the last two recipes, using tools, such as soapUI and TCPMon
    for monitoring and testing Web-Services, are presented.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个配方中，我们将讨论如何使用Spring框架进行集成测试。在接下来的两个配方中，详细介绍了Spring-WS 2.0的集成测试的新功能。在最后两个配方中，介绍了使用soapUI和TCPMon等工具监视和测试Web服务。
- en: Integration testing using Spring-JUnit support
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring-JUnit支持进行集成测试
- en: Spring supports integration testing features using the classes in the `org.springframework.test`
    package. These features provide dependency injection in your test case using either
    the production's application context or any customized one for testing purposes.
    This recipe presents how to use JUnit test cases using features, `spring-test.jar`,
    JUnit 4.7, and XMLUnit 1.1.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Spring支持使用`org.springframework.test`包中的类进行集成测试。这些功能使用生产应用程序上下文或任何用于测试目的的自定义应用程序上下文在测试用例中提供依赖注入。本教程介绍了如何使用具有功能的JUnit测试用例，`spring-test.jar`，JUnit
    4.7和XMLUnit 1.1。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that to run Integration test, we need to start the server. However,
    in the next two recipes, we will use new features for integration testing of Spring-WS
    2.0 that do not require starting up the server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要运行集成测试，我们需要启动服务器。但是，在接下来的两个配方中，我们将使用Spring-WS 2.0的集成测试的新功能，无需启动服务器。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-3.1` (for server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，项目名称为`LiveRestaurant_R-3.1`（服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-3.1-Client`
    (for the client-side Web-Service):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`LiveRestaurant_R-3.1-Client`（客户端Web服务）的Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: '`xmlunit-1.1.jar`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlunit-1.1.jar`'
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe uses the project used in the recipe *Setting up an endpoint by
    annotating the payload-root* discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"), *Building SOAP Web-Services*, as the server-side project.
    Here is the setup for the client side:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的*通过注释有效负载根设置端点*配方中使用的项目，*构建SOAP
    Web服务*，作为服务器端项目。以下是客户端设置：
- en: Create a test class that calls the Web-Service server using `WebServiceTemplate`
    in `src/test`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个调用`src/test`中的`WebServiceTemplate`的Web服务服务器的测试类。
- en: Configure `WebServiceTemplate` in `applicationContext.xml`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`applicationContext.xml`中配置`WebServiceTemplate`。
- en: 'From the folder `Liverestaurant_R-3.1`, run the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件夹`Liverestaurant_R-3.1`运行以下命令：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open a new command window to `Liverestaurant_R-3.1-Client` and run the following
    command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的命令窗口到`Liverestaurant_R-3.1-Client`并运行以下命令：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is the client-side output:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The server-side projects set up a Web-Service server and the client-side project
    runs an integration test and sends predefined request messages to the server and
    gets the response message from the server. Then compare the server response with
    the expected response. Setting up a Web-Service and a client of the Web-Service
    have already been detailed in the first two chapters. Here, only the testing framework
    is detailed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端项目设置了一个Web服务服务器，客户端项目运行集成测试，并向服务器发送预定义的请求消息，并从服务器获取响应消息。然后将服务器响应与预期响应进行比较。Web服务的设置和Web服务的客户端已在前两章中详细介绍。这里只详细介绍测试框架。
- en: In `OrderServiceClientTest.java`, the method `setUpBefore()` will be called
    first to initialize data (since it is annotated by `@before)` and test methods
    that are annotated by `@Test` `(testCancelOrderRequest` or `testPalceOrderRequest)`
    to follow, and finally, the method `setUpAfter()` will be called to free up the
    resources (since it is annotated by `@after)`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OrderServiceClientTest.java`中，方法`setUpBefore()`将首先被调用以初始化数据（因为它被`@before`注释），然后将调用由`@Test`注释的测试方法（`testCancelOrderRequest`或`testPalceOrderRequest`），最后，方法`setUpAfter()`将被调用以释放资源（因为它被`@after`注释）。
- en: 'When you run `mvn clean package`, Maven builds and runs any test class inside
    the `src/test/java` folder. So in `OrderServiceClientTest.java`, first the test
    application context will be loaded. In the application context, only the configuration
    of `WebServiceTemplate` is required:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`mvn clean package`时，Maven会构建并运行`src/test/java`文件夹中的任何测试类。因此，在`OrderServiceClientTest.java`中，首先将加载测试应用程序上下文。在应用程序上下文中，只需要`WebServiceTemplate`的配置：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In `OrderServiceClientTest.java`, to include the Spring dependency injection,
    and to set up and run the test, code is annotated with some information. The JUnit
    `@RunWith` annotation tells JUnit to use the Spring `TestRunner`. The `@ContextConfiguration`
    annotation from Spring tells to load which application context and use this context
    to inject `applicationContext` and `webServiceTemplate`, which are annotated with
    `@Autowired:`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OrderServiceClientTest.java`中，为了包含Spring依赖注入，并设置和运行测试，代码用一些信息进行了注释。JUnit `@RunWith`注解告诉JUnit使用Spring
    `TestRunner`。Spring的`@ContextConfiguration`注解告诉加载哪个应用程序上下文，并使用此上下文注入`applicationContext`和`webServiceTemplate`，这些都用`@Autowired`进行了注解：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`@Before` from JUnit tells to run the marked method (`setUpBefore`) before
    running the test case. JUnit `@After` causes the marked method to be called after
    the test case is executed. `@Test` from JUnit converts the marked methods (`testCancelOrderRequest`
    and `testPlaceOrderRequest)` into JUnit test methods:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit中的`@Before`告诉在运行测试用例之前运行标记的方法(`setUpBefore`)。JUnit `@After`导致在执行测试用例后调用标记的方法。JUnit中的`@Test`将标记的方法(`testCancelOrderRequest`和`testPlaceOrderRequest`)转换为JUnit测试方法：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that for each test method, the `@After` and `@Before` methods will be executed
    once. `XMLAssert.assertXMLEqual` compares the real result and the expected XML
    messages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于每个测试方法，`@After`和`@Before`方法将被执行一次。`XMLAssert.assertXMLEqual`比较实际结果和预期的XML消息。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In a real situation, the data will change dynamically every day. We should be
    able to build data dynamically based on dates and from the database. This helps
    continuous integration and smoke testing over a period of time.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际情况下，数据将每天动态变化。我们应该能够根据日期和数据库动态构建数据。这有助于持续集成和一段时间内的冒烟测试。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Service.*
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "Chapter 1. Building SOAP Web-Services")中讨论的*通过注释payload-root设置端点*配方，*构建SOAP
    Web服务*。
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in [Chapter
    2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building Clients
    for SOAP Web-Services.*
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "Chapter 2. Building Clients for SOAP Web-Services")中讨论的*在HTTP传输上创建Web服务客户端*配方，*构建SOAP
    Web服务的客户端*。
- en: Server-side integration testing using MockWebServiceClient
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MockWebServiceClient进行服务器端集成测试
- en: Writing a unit test that uses mock frameworks, such as EasyMock and JMock, to
    test a Web-Service is quite easy. However, it does not test the content of the
    XML messages, so it is not simulating the real production environment of testing
    (since these mock objects mimic a part of the software, which is not running,
    this is neither unit testing nor integration testing).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 编写使用EasyMock和JMock等模拟框架测试Web服务的单元测试非常容易。但是，它不测试XML消息的内容，因此它不模拟测试的真实生产环境（因为这些模拟对象模拟软件的一部分，而这部分软件没有运行，这既不是单元测试也不是集成测试）。
- en: Spring Web-Services 2.0 provides features to create server-side integration
    tests. Using this feature, it is very simple to test a SOAP service without deploying
    on the server and without the need to configure a test client in the Spring configuration
    file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web-Services 2.0提供了创建服务器端集成测试的功能。使用这个功能，可以非常简单地测试SOAP服务，而无需在服务器上部署，也无需在Spring配置文件中配置测试客户端。
- en: The main class of server-side integration tests is `MockWebServiceClient` from
    the `org.springframework.ws.test.server` package. This class creates a request
    message, sends the request to the service, and gets the response message. The
    client compares the response with the expected message.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端集成测试的主要类是`org.springframework.ws.test.server`包中的`MockWebServiceClient`。这个类创建一个请求消息，将请求发送到服务，并获取响应消息。客户端将响应与预期消息进行比较。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-3.2` (as the server-side
    Web-Service that includes a test case that uses `MockWebServiceClient)` and has
    the following Maven dependencies:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-3.2`（作为包含使用`MockWebServiceClient`的测试用例的服务器端Web服务），并具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.1.RELEASE.jar`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe uses the project from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as the server-side project. Here is the setup for
    the test case:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了来自*通过注释payload-root设置端点*的项目，该项目在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论，*构建SOAP
    Web服务*，作为服务器端项目。以下是测试用例的设置：
- en: Include the following data in `pom.xml:`
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中包含以下数据：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add the test case class in the folder `src/test/java.`
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/test/java`文件夹中添加测试用例类。
- en: Run the following command for `Liverestaurant_R-3.2:`
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Liverestaurant_R-3.2`运行以下命令：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the server-side output:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是服务器端的输出：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the class `OrderServiceServerSideIntegrationTest.java`, annotation and unit
    testing materials are the same as those used in the recipe *Integration testing
    using Spring-JUnit support*. The only difference here is that we are not setting
    up the server. Instead, we load the server application context in the test case
    class:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在类`OrderServiceServerSideIntegrationTest.java`中，注释和单元测试材料与配方*使用Spring-JUnit支持进行集成测试*中使用的相同。唯一的区别是我们不在这里设置服务器。相反，我们在测试用例类中加载服务器应用上下文：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The test case class, in the `@Before` method, initializes an instance of the
    client mock object and XML messages:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`@Before`方法中，测试用例类初始化了客户端模拟对象和XML消息：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, it sends a message and receives the response. It then compares the expected
    response and the real response:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它发送一条消息并接收响应。然后比较预期的响应和实际的响应：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the method `createClient(), MockWebServiceClient.createClient(applicationContext)`
    creates an instance of the client mock object (`wsMockClient`). In the test case
    methods `(testCancelOrderRequest, testPlaceOrderRequest)`, using the code `wsMockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(responsePayload))`,
    the mock client sends an XML message and compares the response (from server endpoint)
    with the expected response (The client mock is aware of server endpoint from application
    context file and when it sends request to server, invokes the endpoint method
    and gets the response back).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法`createClient()中，MockWebServiceClient.createClient(applicationContext)`创建了客户端模拟对象（`wsMockClient`）的实例。在测试用例方法`(testCancelOrderRequest,
    testPlaceOrderRequest)`中，使用代码`wsMockClient.sendRequest(withPayload(requestPayload)).andExpect(payload(responsePayload))`，模拟客户端发送XML消息并将响应（来自服务器端点）与预期响应进行比较（客户端模拟知道来自应用上下文文件的服务器端点，当它向服务器发送请求时，调用端点方法并获取响应）。
- en: See also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipes *Integration testing using Spring-JUnit support* and *Client-side
    integration testing using MockWebServiceServer*, discussed in this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的配方*使用Spring-JUnit支持进行集成测试*和*使用MockWebServiceServer进行客户端集成测试*。
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的配方*通过注释payload-root设置端点*，*构建SOAP Web服务*。
- en: Client-side integration testing using MockWebServiceServer
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MockWebServiceServer进行客户端集成测试
- en: Writing a client-side unit test that uses mock frameworks to test a client of
    a Web-Service is quite easy. However, it does not test the content of the XML
    messages that are sent over the wire, especially when mocking out the entire client
    class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个使用模拟框架测试Web服务客户端的客户端单元测试非常容易。但是，它不会测试通过线路发送的XML消息的内容，特别是当模拟整个客户端类时。
- en: Spring Web-Services 2.0 provides features to create client-side integration
    tests. Using this feature, it is very simple to test the client of a SOAP service
    without setting up a server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Web服务2.0提供了创建客户端集成测试的功能。使用这个功能，很容易测试SOAP服务的客户端而不需要设置服务器。
- en: The main class of client-side integration tests is `MockWebServiceServer` from
    the `org.springframework.ws.test.server` package. This class accepts a request
    message from a client, verifies it against the expected request messages, and
    then returns the response message back to the client.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端集成测试的主要类是`org.springframework.ws.test.server`包中的`MockWebServiceServer`。这个类接受来自客户端的请求消息，对其进行验证，然后将响应消息返回给客户端。
- en: Since this project is a client-side test integration using `MockWebServiceServer`,
    it doesn't need any external server-side Web-Service.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个项目是使用`MockWebServiceServer`进行客户端测试集成，它不需要任何外部服务器端Web服务。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-3.3-Client` (as the
    client-side project that includes a test case that uses `MockServiceServer` as
    the server) and has the following Maven dependencies:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-3.3-Client`（作为客户端项目，包括使用`MockServiceServer`作为服务器的测试用例），并且具有以下Maven依赖项：
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-core-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.1.RELEASE.jar`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.1.RELEASE.jar`'
- en: '`spring-test-3.0.5.RELEASE.jar`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-test-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe uses the client-side project from *Creating a Web-Service client
    on HTTP transport*, discussed in [Chapter 2](ch02.html "Chapter 2. Building Clients
    for SOAP Web-Services"), *Building Clients for SOAP Web-Services*. Here is the
    setup for the test case:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了来自*在HTTP传输上创建Web服务客户端*的客户端项目，该项目在[第2章](ch02.html "第2章。构建SOAP Web服务的客户端")中讨论，*构建SOAP
    Web服务的客户端*。以下是测试用例的设置：
- en: Create a test case class under `src/test`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/test`下创建一个测试用例类。
- en: Create a class that extends `WebServiceGatewaySupport` to send/receive messages.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展`WebServiceGatewaySupport`的类来发送/接收消息。
- en: Run the following command for `Liverestaurant_R-3.3-Client:`
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Liverestaurant_R-3.3-Client`运行以下命令：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the client-side output:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The flow in the test case class `ClientSideIntegrationTest.java` is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例类`ClientSideIntegrationTest.java`中的流程如下：
- en: Create a `MockWebServiceServer` using `WebServiceGatewaySupport` `(OrderServiceClient`
    that extends `WebServiceGatewaySupport)`. You can also create `MockWebServiceServer`
    using `WebServiceTemplate` or using `ApplicationContext`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`WebServiceGatewaySupport`（扩展`WebServiceGatewaySupport`的`OrderServiceClient`）创建`MockWebServiceServer`。您还可以使用`WebServiceTemplate`或使用`ApplicationContext`创建`MockWebServiceServer`。
- en: Set up request expectations using `RequestMatcher` and return the response using
    `ResponseCreator`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`RequestMatcher`设置请求期望，并使用`ResponseCreator`返回响应。
- en: Make a client call by using the `WebServiceTemplate`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`WebServiceTemplate`进行客户端调用。
- en: Call the `verify` method to make sure all the expectations are met. The application
    context file is just a configuration of `WebServiceTemplate` and `OrderServiceClient:`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`verify`方法以确保满足所有期望。应用程序上下文文件只是`WebServiceTemplate`和`OrderServiceClient`的配置：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Inside `ClientSideIntegrationTest.java`, the annotation and unit testing materials
    are the same as those used in the recipe *Integration testing using Spring-JUnit
    support*. The method `createServer()` creates `MockWebServiceServer` using `WebServiceGatewaySupport`
    `(OrderServiceClient` extends `WebServiceGatewaySupport):`
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ClientSideIntegrationTest.java`中，注释和单元测试材料与*使用Spring-JUnit支持进行集成测试*配方中使用的相同。方法`createServer()`使用`WebServiceGatewaySupport`（`OrderServiceClient`扩展`WebServiceGatewaySupport`）创建`MockWebServiceServer`：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the test, the method `testExpectedRequestResponse, mockServer.expect` sets
    the expected request and response `(webServiceTemplate` is configured in ''testing
    mode'' in `client-integration-test.xml`. When the `sendSourceAndReceiveToResult`
    method is being called, the template calls server virtually without any real HTTP
    connection). Then `client.getStringResult` calls `webserviceTemplate` to call
    the server `(MockWebServiceServer)`. Then, `mockServer.verify` checks if the returned
    response matches the expected one:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中，方法`testExpectedRequestResponse, mockServer.expect`设置了预期的请求和响应（`webServiceTemplate`在`client-integration-test.xml`中以“测试模式”配置。当调用`sendSourceAndReceiveToResult`方法时，模板会在没有任何真正的HTTP连接的情况下虚拟调用服务器）。然后`client.getStringResult`调用`webserviceTemplate`来调用服务器（`MockWebServiceServer`）。然后，`mockServer.verify`检查返回的响应是否与预期的响应匹配：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the test method `testSchema`, instead of using a hardcoded request/response,
    the schema of the expected request and response is used. This test can test if
    the format of the request/response is as expected. This is shown as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试方法`testSchema`中，使用了预期请求和响应的模式，而不是使用硬编码的请求/响应。此测试可以测试请求/响应的格式是否符合预期。如下所示：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the test method `testSchemaWithWrongRequest`, the schema of the expected
    request and response is used. However, the client is trying to send invalid request,
    that is to be failed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试方法`testSchemaWithWrongRequest`中，使用了预期请求和响应的模式。然而，客户端试图发送无效请求，这将导致失败：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See also
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Integration testing using Spring-JUnit support*, discussed in this
    chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了*使用Spring-JUnit支持进行集成测试*的配方。
- en: Monitoring TCP messages of a Web-Service using TCPMon
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TCPMon监视Web服务的TCP消息
- en: '**TCPMon** is an Apache project with a Swing UI, which provides features to
    monitor TCP-based messages transmitted between the client and server. A SOAP message
    can also be sent to the server using TCPMon.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**TCPMon**是一个带有Swing UI的Apache项目，它提供了监视客户端和服务器之间传输的基于TCP的消息的功能。还可以使用TCPMon向服务器发送SOAP消息。'
- en: This recipe presents how to monitor messages passed between a Web-Service client
    and the server. In addition, it shows how to send a SOAP message using TCPMon.
    The recipe *Integration testing using Spring-JUnit support* is used for server-side
    and client-side projects.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方介绍了如何监视Web服务客户端和服务器之间传递的消息。此外，它还展示了如何使用TCPMon发送SOAP消息。该配方*使用Spring-JUnit支持进行集成测试*用于服务器端和客户端项目。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download and install TCPMon 1.0 from the website [http://ws.apache.org/commons/tcpmon/download.cgi](http://ws.apache.org/commons/tcpmon/download.cgi).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从网站[http://ws.apache.org/commons/tcpmon/download.cgi](http://ws.apache.org/commons/tcpmon/download.cgi)下载并安装TCPMon
    1.0。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Monitor the messages between the client and server as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 监视客户端和服务器之间的消息如下：
- en: Run it on Windows using `tcpmon.bat (tcpmon.sh` for Linux).
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上使用`tcpmon.bat（Linux上的tcpmon.sh）`运行它。
- en: 'Enter the values **8081** and **8080** into the **Listen port #** and **Target
    port #** fields and click on the **Add** option.![How to do it...](img/5825_03_01.jpg)'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在**Listen port #**和**Target port #**字段中输入值**8081**和**8080**，然后单击**Add**选项。![如何操作...](img/5825_03_01.jpg)'
- en: Change `applicationContext.xml` in `LiveRestaurant_R-3.1-Client` to use the
    **8081** port for `webserviceTemplate:`
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`LiveRestaurant_R-3.1-Client`中的`applicationContext.xml`以使用**8081**端口进行`webserviceTemplate`：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the server from the project `LiveRestaurant_R-3.1` using the following
    command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从项目`LiveRestaurant_R-3.1`运行服务器：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the client from the project `LiveRestaurant_R-3.1-Client` using the following
    command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目`LiveRestaurant_R-3.1-Client`中使用以下命令运行客户端：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Go to the **Port 8081** tab and see request and response messages, as shown
    in the following screenshot:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Port 8081**选项卡，查看请求和响应消息，如下截图所示：
- en: '![How to do it...](img/5825_03_02.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5825_03_02.jpg)'
- en: 'Send a SOAP request to the server as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式向服务器发送SOAP请求：
- en: 'Go to the **Sender** tab. Enter the SOAP service address and a SOAP request
    message and click on the **Send** button to view the response:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 转到**Sender**选项卡。输入SOAP服务地址和SOAP请求消息，然后单击**Send**按钮查看响应：
- en: '![How to do it...](img/5825_03_03.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5825_03_03.jpg)'
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Monitoring transmitted messages between a client and a Web-Service server is
    the most important usage of the TCPMon. In addition, TCPMon can be used as a client
    to send a message to a Web-Service server. This is an intermediary role that shows
    the transmitted messages between the client and server. The client has to point
    to the intermediary instead of the server service.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 监视客户端和Web服务服务器之间传输的消息是TCPMon的最重要用途。此外，TCPMon还可以用作客户端向Web服务服务器发送消息。这是一个中间角色，显示了客户端和服务器之间传输的消息。客户端必须指向中间件而不是服务器服务。
- en: '![How it works...](img/5825_03_04.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/5825_03_04.jpg)'
- en: The second activity (sending a SOAP request to the server) shows the sending
    of a message using TCPMon to the server, the reception of the response, and shows
    all of this on TCPMon.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个活动（向服务器发送SOAP请求）显示使用TCPMon向服务器发送消息，接收响应，并在TCPMon上显示所有这些。
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Integration testing using Spring-JUnit support* discussed in this
    chapter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了*使用Spring-JUnit支持进行集成测试*的方法。
- en: Monitoring and load/functional testing of a Web-Service using soapUI
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用soapUI监控和负载/功能测试Web服务
- en: soapUI is an open source testing solution for testing web services. Using a
    user-friendly GUI, this tool provides a feature to create and execute automated
    functional and load testing as well as monitor SOAP messages.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: soapUI是用于测试Web服务的开源测试解决方案。使用用户友好的GUI，该工具提供了创建和执行自动功能和负载测试以及监控SOAP消息的功能。
- en: This recipe presents how to monitor SOAP messages of the Web-Service and functional
    and load testing using soapUI. To set up a Web-Service, `Recipe 3.1`, *Integration
    testing using Spring-JUnit support*, is used.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本方法介绍了如何使用soapUI监控Web服务的SOAP消息以及功能和负载测试。为了设置Web服务，使用了`Recipe 3.1`，*使用Spring-JUnit支持进行集成测试*。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Get started by carrying out the following steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤开始：
- en: Install and run soapUI 4.0 ([http://www.soapui.org/](http://www.soapui.org/)).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装并运行soapUI 4.0 ([http://www.soapui.org/](http://www.soapui.org/))。
- en: Run the following command from the folder `LiveRestaurant_R-3.1:`
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件夹`LiveRestaurant_R-3.1`运行以下命令：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To run the functional tests and monitor the SOAP messages, carry out the following
    steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行功能测试并监控SOAP消息，请执行以下步骤：
- en: Right-click on the **Projects** node. Select **New soapUI Project** and enter
    the WSDL URL and the **Project Name**.![How to do it...](img/5825_03_05.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**Projects**节点。选择**New soapUI Project**并输入WSDL URL和**Project Name**。![操作步骤...](img/5825_03_05.jpg)
- en: Right-click on the project's name, **OrderService**, in the navigator pane.
    Select **Launch HTTP Monitor** and enable the option **Set as Global Proxy**.
    Click on the **OK** button:![How to do it...](img/5825_03_06.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航窗格中右键单击项目名称**OrderService**。选择**Launch HTTP Monitor**并启用**Set as Global Proxy**选项。单击**OK**按钮：![操作步骤...](img/5825_03_06.jpg)
- en: Expand the **OrderService** methods **(cancelOrder** and **placeOrder)**. Double-click
    **cancelOrder**. Click on **Submit Request to Specific Endpoint URL** (The green
    icon on the top-left corner of the **Request1** screen). The following is the
    output of this action:![How to do it...](img/5825_03_07.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**OrderService**方法**(cancelOrder**和**placeOrder)**。双击**cancelOrder**。单击**Submit
    Request to Specific Endpoint URL**（**Request1**屏幕左上角的绿色图标）。这是此操作的输出：![操作步骤...](img/5825_03_07.jpg)
- en: Right-click **OrderServiceSoap11** | **Generate Test Suite** | **OK**. Enter
    **OrderServiceSoap11 TestSuite**.![How to do it...](img/5825_03_08.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**OrderServiceSoap11** | **Generate Test Suite** | **OK**。输入**OrderServiceSoap11
    TestSuite**。![操作步骤...](img/5825_03_08.jpg)
- en: Double-click on **OrderServiceSoap11 TestSuite** on the navigator pane. Click
    Run the selected **TestCases**.![How to do it...](img/5825_03_09.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航窗格中双击**OrderServiceSoap11 TestSuite**。单击运行所选的**TestCases**。![操作步骤...](img/5825_03_09.jpg)
- en: 'The following is the output when the test suite is run:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当运行测试套件时，以下是输出：
- en: '![How to do it...](img/5825_03_10.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5825_03_10.jpg)'
- en: 'Run a load test as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 进行负载测试如下：
- en: Right-click the **cancelOrder** test case. Select **New Local Test** and enter
    the **Load Test Name**.![How to do it...](img/5825_03_11.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**cancelOrder**测试用例。选择**New Local Test**并输入**Load Test Name**。![操作步骤...](img/5825_03_11.jpg)
- en: Double-click **Load test name**. Enter **Parameter** and click on **Run Load
    Test**.![How to do it...](img/5825_03_12.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**Load test name**。输入**Parameter**并单击**Run Load Test**。![操作步骤...](img/5825_03_12.jpg)
- en: 'The following is the output of the test:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是测试的输出：
- en: '![How to do it...](img/5825_03_13.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5825_03_13.jpg)'
- en: How it works...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Functional testing and monitoring SOAP messages: soapUI provides three levels
    of functional testing: test suites, test cases, and test steps.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试和监控SOAP消息：soapUI提供三个级别的功能测试：测试套件、测试用例和测试步骤。
- en: Test cases are the unit tests that are generated from the WSDL file and test
    suites are a collection of these unit tests. Test steps control the flow of execution
    and validate the functionality of the service that is to be tested. For example,
    a test case in the test suite for the **cancelOrder** mentioned previously may
    test the database first. If there is such an order available, it cancels the order.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例是从WSDL文件生成的单元测试，测试套件是这些单元测试的集合。测试步骤控制执行流程并验证要测试的服务的功能。例如，前面提到的**cancelOrder**测试套件中的一个测试用例可能首先测试数据库。如果有这样的订单可用，它会取消订单。
- en: 'Load testing: soapUI provides a feature to run multiple threads (as many as
    your machine''s hardware limits you to) on your test cases. When you run a load
    test, the underlying test case will be cloned internally for each thread. Delay
    settings let each thread wait before starting and let the Web-Service rest for
    each thread.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 负载测试：soapUI提供了在测试用例上运行多个线程（取决于您的计算机硬件限制）的功能。运行负载测试时，底层测试用例将在每个线程内部克隆。延迟设置让每个线程在开始之前等待，并让Web服务为每个线程休息。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The recipe *Integration testing using Spring-JUnit support*, discussed in this
    chapter.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了*使用Spring-JUnit支持进行集成测试*的方法。
