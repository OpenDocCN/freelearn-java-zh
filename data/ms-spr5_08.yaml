- en: Spring Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data
- en: In [*Chapter 7*](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml), *Advanced Spring
    Boot Features*, we discussed advanced Spring Boot features, such as externalized
    configuration, monitoring, embedded servers, and deploying to the Cloud. In this
    chapter, let's turn our attention to data. Where we store our data and how we
    store data has been in rapid evolution during the last decade. After a few decades
    of stability with relational databases, in the last decade, a number of unstructured,
    nonrelational databases are taking firm ground. With a variety of data stores
    in play, the frameworks that talk to these data stores are becoming more important.
    While JPA made it easy to talk to relational databases, Spring Data aims to bring
    in a common approach to talk to a wider variety of data stores--relational or
    otherwise.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第7章*](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml)中，*高级Spring Boot功能*，我们讨论了高级Spring
    Boot功能，如外部化配置、监控、嵌入式服务器和部署到云端。在本章中，让我们把注意力转向数据。我们存储数据的地方以及我们如何存储数据在过去的十年中发生了快速的演变。在几十年的关系数据库稳定之后，在过去的十年中，一些非结构化的非关系数据库开始占据重要地位。随着各种数据存储的出现，与这些数据存储进行通信的框架变得更加重要。虽然JPA使得与关系数据库进行通信变得容易，但Spring
    Data旨在引入一种通用的方法来与更广泛的数据存储进行通信--无论是关系型还是其他类型的数据存储。
- en: 'The following are some of the questions we will answer during this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回答以下一些问题：
- en: What is Spring Data?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Spring Data？
- en: What are the aims of Spring Data?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data的目标是什么？
- en: How do you talk to a relational database using Spring Data and Spring Data JPA?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Data和Spring Data JPA与关系数据库进行通信？
- en: How do you talk to a nonrelational database such as MongoDB using Spring Data?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Spring Data与Spring Data JPA与关系数据库进行通信？
- en: Background - data stores
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景-数据存储
- en: 'Most applications talk to a variety of data stores. There has been a considerable
    evolution in how applications talk to a data store. The most basic API provided
    by Java EE is **JDBC** (**Java Database Connectivity**). JDBC is used to talk
    to relational databases from the first version of Java EE. JDBC is based on using
    SQL queries to manipulate data. The following is an example of typical JDBC code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序与各种数据存储进行通信。应用程序与数据存储进行通信的方式已经有了相当大的发展。Java EE提供的最基本的API是**JDBC**（Java数据库连接）。JDBC用于从Java
    EE的第一个版本开始与关系数据库通信。JDBC基于使用SQL查询来操作数据。以下是典型的JDBC代码示例：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Typical JDBC code contains the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的JDBC代码包含以下内容：
- en: The query (or stored procedure) to execute
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行的查询（或存储过程）
- en: The code to set parameters for query into statement objects
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置查询参数到语句对象的代码
- en: The code to liquidate ResultSet (the result of executing the query) into beans
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将ResultSet（执行查询的结果）转换为bean的代码
- en: 'Typical projects involved thousands of lines of JDBC code. JDBC code was cumbersome
    to write and maintain. Two frameworks became popular in an effort to provide an
    additional layer on top of JDBC:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 典型项目涉及数千行JDBC代码。JDBC代码编写和维护起来很麻烦。为了在JDBC之上提供额外的层，出现了两个流行的框架：
- en: '**myBatis** (earlier called iBatis): MyBatis removes the need for manually
    writing code to set parameters and retrieve results. It provides simple XML or
    annotation-based configuration to map Java POJOs to a database.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**myBatis**（之前称为iBatis）：MyBatis消除了手动编写代码来设置参数和检索结果的需要。它提供了简单的基于XML或注释的配置，将Java
    POJO映射到数据库。'
- en: '**Hibernate**: Hibernate is an **ORM** (**Object/Relational Mapping**) framework.
    An ORM framework helps you to map your objects to tables in relational databases.
    The great thing about Hibernate is that developers do not need to write queries
    manually. Once the relationships between the objects and tables are mapped, Hibernate
    uses the mappings to create queries and populate/retrieve data.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hibernate**：Hibernate是一个**ORM**（对象/关系映射）框架。ORM框架帮助您将对象映射到关系数据库中的表。Hibernate的好处在于开发人员不需要手动编写查询。一旦对象和表之间的关系被映射，Hibernate就会使用映射来创建查询和填充/检索数据。'
- en: Java EE came up with an API called **JPA** (Java Persistence API) that was roughly
    defined based on the popular ORM implementation at that time--the Hibernate framework.
    Hibernate (since 3.4.0.GA) supports/implements JPA.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE提出了一个名为**JPA**（Java持久化API）的API，它基本上是根据当时流行的ORM实现--Hibernate框架来定义的。Hibernate（自3.4.0.GA以来）支持/实现JPA。
- en: In relational databases, data is stored in normalized, well-defined tables.
    While Java EE tried to solve the challenge of talking a relational data store,
    several other data stores became popular during the last decade. With the evolution
    of big data and real-time data needs, new and more unstructured forms of storing
    data came into existence. These kinds of databases are typically grouped under
    NoSQL databases. Examples are Cassandra (column), MongoDB (document), and Hadoop.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系数据库中，数据存储在规范化的、定义良好的表中。虽然Java EE试图解决与关系数据存储通信的挑战，但在过去的十年中，其他几种数据存储变得流行。随着大数据和实时数据需求的发展，新的和更无结构的数据存储形式出现了。这些类型的数据库通常被归类为NoSQL数据库。例如Cassandra（列）、MongoDB（文档）和Hadoop。
- en: Spring Data
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data
- en: Each of the data stores have different ways to connect and retrieve/update data.
    Spring Data aims to provide a consistent model--another level of abstraction -
    to access data from different kinds of data stores.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每种数据存储都有不同的连接和检索/更新数据的方式。Spring Data旨在提供一种一致的模型--另一种抽象层--以访问不同类型的数据存储中的数据。
- en: 'Some of the important Spring Data features are listed as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要的Spring Data功能：
- en: Easy integration with multiple data stores through various repositories
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过各种存储库轻松集成多个数据存储
- en: The ability to parse and form queries based on repository method names
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据存储库方法名称解析和形成查询的能力
- en: Provides the default CRUD functionality
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供默认的CRUD功能
- en: Basic support for auditing, such as created by user and last changed by user
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本支持审计，例如由用户创建和最后由用户更改
- en: Powerful integration with Spring
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring强大的集成
- en: Great integration with Spring MVC to expose REST controllers through **Spring
    Data Rest**
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring MVC的出色集成，通过**Spring Data Rest**公开REST控制器
- en: 'Spring Data is an umbrella project made up of a number of modules. A few of
    the important Spring Data modules are listed as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data是一个由多个模块组成的综合项目。一些重要的Spring Data模块列举如下：
- en: '**Spring Data Commons**: Defines the common concepts for all Spring Data modules--repository
    and query methods'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data Commons**：定义了所有Spring Data模块的共同概念--存储库和查询方法'
- en: '**Spring Data JPA**: Provides easy integration with JPA repositories'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data JPA**：提供与JPA存储库的轻松集成'
- en: '**Spring Data MongoDB**: Provides easy integration with MongoDB--a document-based
    data store'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data MongoDB**：提供与MongoDB（基于文档的数据存储）的轻松集成'
- en: '**Spring Data REST**: Provides the functionality to expose Spring Data repositories
    as REST services with minimal code'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data REST**：提供将Spring Data存储库作为REST服务暴露出来的功能，代码量最小'
- en: '**Spring Data for Apache Cassandra**: Provides easy integration with Cassandra'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data for Apache Cassandra**：提供与Cassandra的轻松集成'
- en: Provides easy integration with Hadoop
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与Hadoop的轻松集成
- en: In this chapter, we will take an in-depth look at the common concepts behind
    Spring Data, repository, and query methods. In the initial examples, we will use
    Spring Data JPA to illustrate these concepts. We will also take a look at a sample
    integration with MongoDB later in the chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究Spring Data、存储库和查询方法背后的共同概念。在最初的示例中，我们将使用Spring Data JPA来说明这些概念。在本章后面，我们还将看一下与MongoDB的示例集成。
- en: Spring Data Commons
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data Commons
- en: Spring Data Commons provides the basic abstractions behind Spring Data modules.
    We will use Spring Data JPA as an example to illustrate these abstractions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data Commons提供了Spring Data模块背后的基本抽象。我们将使用Spring Data JPA作为示例来说明这些抽象。
- en: 'Some of the important interfaces in Spring Data Commons are listed as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data Commons中的一些重要接口列举如下：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Repository
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Repository
- en: Repository is the core interface of Spring Data. It is a **marker interface**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Repository是Spring Data的核心接口。它是一个**标记接口**。
- en: The CrudRepository interface
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CrudRepository接口
- en: 'The `CrudRepository` defines the basic `Create`, `Read`, `Update`, and `Delete`
    methods. The important methods in `CrudRepository` are shown in the following
    code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`CrudRepository`定义了基本的`Create`、`Read`、`Update`和`Delete`方法。`CrudRepository`中的重要方法如下所示：'
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The PagingAndSortingRepository interface
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PagingAndSortingRepository接口
- en: 'The PagingAndSortingRepository defines methods that provide the functionality
    to divide the ResultSet into pages as well as sort the results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PagingAndSortingRepository定义了方法，提供了将ResultSet分成页面以及对结果进行排序的功能：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will look at examples of using the `Sort` class and `Page`, `Pageable` interfaces
    in the section on Spring Data JPA.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Spring Data JPA部分的示例中查看使用`Sort`类和`Page`、`Pageable`接口的示例。
- en: Spring Data JPA
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: Spring Data JPA implements the core functionality defined in Spring Data Common
    interfaces.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA实现了Spring Data Common接口中定义的核心功能。
- en: '**JpaRepository** is the JPA-specific repository interface:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**JpaRepository**是JPA特定的存储库接口。'
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**SimpleJpaRepository** is the default implementation of the CrudRepository
    interface for JPA:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**SimpleJpaRepository**是JPA的CrudRepository接口的默认实现：'
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Spring Data JPA example
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data JPA示例
- en: Let's set up a simple project to understand the different concepts related to
    Spring Data Commons and Spring Data JPA.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们建立一个简单的项目，以了解与Spring Data Commons和Spring Data JPA相关的不同概念。
- en: 'The following are the steps involved:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是涉及的步骤：
- en: Create a new project with `spring-boot-starter-data-jpa` as a dependency.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`spring-boot-starter-data-jpa`作为依赖项创建一个新项目。
- en: Add entities.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加实体。
- en: Add the `SpringBootApplication` class to run the application.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`SpringBootApplication`类添加到运行应用程序。
- en: Create repositories.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建存储库。
- en: New project with Starter Data JPA
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Starter Data JPA创建新项目
- en: 'We will create a simple Spring Boot Maven project using the following dependencies:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下依赖项创建一个简单的Spring Boot Maven项目：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`spring-boot-starter-data-jpa` is the Spring Boot starter project for Spring
    Data JPA. Important dependencies that `spring-boot-starter-data-jpa` brings in
    are **JTA** (**Java Transaction API**), Hibernate Core, and Entity Manager (Default
    JPA Implementation). Some of the other important dependencies are shown in the
    following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-data-jpa`是Spring Boot的Spring Data JPA启动器项目。`spring-boot-starter-data-jpa`引入的重要依赖包括**JTA**（Java事务API）、Hibernate
    Core和Entity Manager（默认JPA实现）。其他一些重要的依赖包如下截图所示：'
- en: '![](img/7ef3648f-f321-4f54-9f0e-b91ce61947c7.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ef3648f-f321-4f54-9f0e-b91ce61947c7.png)'
- en: Entities
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体
- en: 'Let''s define a couple of entities to use in our example. We will create an
    entity `Todo` to manage todos. A simple example is shown as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一些实体来用在我们的示例中。我们将创建一个名为`Todo`的实体来管理待办事项。一个简单的示例如下所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Important things to note are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`Todo` has a title, a description, a target date, and a completion indicator
    (`isDone`). JPA needs a constructor.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Todo`有一个标题，一个描述，一个目标日期和一个完成指示器（`isDone`）。JPA需要一个构造函数。'
- en: '`@Entity`: The annotation specifies that the class is an entity.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Entity`: 该注解指定该类是一个实体。'
- en: '`@Id`: Specifies that ID is the primary key of the entity.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Id`: 指定ID是实体的主键。'
- en: '`@GeneratedValue(strategy = GenerationType.AUTO)`: The `GeneratedValue` annotation
    is used to specify how the primary key is generated. In this example, we are using
    a strategy of `GenerationType.AUTO`. This indicates that we would want the persistence
    provider to choose the right strategy.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@GeneratedValue(strategy = GenerationType.AUTO)`: `GeneratedValue`注解用于指定如何生成主键。在这个例子中，我们使用了`GenerationType.AUTO`的策略。这表示我们希望持久性提供者选择正确的策略。'
- en: '`@ManyToOne(fetch = FetchType.LAZY)`: Indicates a many-to-one relationship
    between `User` and `Todo`. A `@ManyToOne` relationship is used on one side of
    the relationship. `FetchType.Lazy` indicates that the data can be lazily fetched.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ManyToOne(fetch = FetchType.LAZY)`: 表示`User`和`Todo`之间的多对一关系。`@ManyToOne`关系用于关系的一侧。`FetchType.Lazy`表示数据可以懒加载。'
- en: '`@JoinColumn(name = "userid")`: The `JoinColumn` annotation specifies the name
    of the foreign key column.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@JoinColumn(name = "userid")`: `JoinColumn`注解指定外键列的名称。'
- en: 'The following snippet shows the `User` entity:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了`User`实体：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Important things to note are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: The user is defined as an entity with the `userid` and `name` attributes. The
    ID is the primary key, which is autogenerated.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户被定义为具有`userid`和`name`属性的实体。ID是自动生成的主键。
- en: 'The `@OneToMany(mappedBy = "user")`: `OneToMany` annotation is used on the
    many side of a many-to-one relationship. The `mappedBy` attribute indicates the
    property of the owner entity of the relationship.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@OneToMany(mappedBy = "user")`：`OneToMany`注解用于一对多关系的多端。`mappedBy`属性指示关系的所有者实体的属性。'
- en: The SpringBootApplication class
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SpringBootApplication类
- en: 'Let''s create a `SpringBootApplication` class to be able to run the Spring
    Boot application. The following snippet shows a simple example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`SpringBootApplication`类，以便能够运行Spring Boot应用程序。以下代码片段显示了一个简单的示例：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following snippet shows some of the logs generated when we run `SpringDataJpaFirstExampleApplication`
    as a Java application:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了我们将`SpringDataJpaFirstExampleApplication`作为Java应用程序运行时生成的一些日志：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Some of the important observations are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一些重要观察结果如下：
- en: '`HHH000412: Hibernate Core {5.0.11.Final}`: The Hibernate framework is initialized'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HHH000412: Hibernate Core {5.0.11.Final}`：Hibernate框架已初始化'
- en: '`HHH000400: Using dialect: org.hibernate.dialect.H2Dialect`: The H2 in-memory
    database is initialized'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HHH000400: Using dialect: org.hibernate.dialect.H2Dialect`：初始化了H2内存数据库'
- en: '`HHH000227: Running hbm2ddl schema export`: Based on the entities available
    (`Todo` and `User`) and the relationship between them, a schema is created'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HHH000227: Running hbm2ddl schema export`：基于可用的实体（`Todo`和`User`）和它们之间的关系，创建了一个模式'
- en: 'A lot of magic happened in the previous execution. Let''s look at some of the
    important questions:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一次执行中发生了很多魔法。让我们看一些重要的问题：
- en: How does the Hibernate framework come into the picture even though we did not
    explicitly declare a dependency in `pom.xml`?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管我们没有在`pom.xml`中明确声明依赖关系，但Hibernate框架是如何介入的？
- en: How is the H2 in-memory database used?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: H2内存数据库是如何使用的？
- en: What is the schema that is created?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的模式是什么？
- en: Let's now answer each of these questions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回答每个问题。
- en: How does the Hibernate framework come into the picture even though we did not
    explicitly declare a dependency in `pom.xml`?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们没有在`pom.xml`中明确声明依赖关系，但Hibernate框架是如何介入的？
- en: Hibernate is one of the dependencies of Spring Boot Starter JPA. So, it is the
    default JPA implementation used.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate是Spring Boot Starter JPA的依赖之一。因此，它是默认使用的JPA实现。
- en: How is the H2 in-memory database used?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: H2内存数据库是如何使用的？
- en: In our dependencies, we included an H2 dependency with scope runtime. When Spring
    Boot Data JPA auto-configuration runs, it notices that we have not included any
    data source in our configuration (actually, we have no configuration at all).
    Spring Boot Data JPA then tries to auto-configure an in-memory database. It sees
    H2 on the classpath. Therefore, it initializes an in-memory H2 database.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的依赖项中，我们包含了一个运行时范围的H2依赖项。当Spring Boot Data JPA自动配置运行时，它注意到我们没有在配置中包含任何数据源（实际上，我们根本没有配置）。Spring
    Boot Data JPA然后尝试自动配置一个内存数据库。它看到类路径上的H2。因此，它初始化了一个内存中的H2数据库。
- en: What is the schema that is created?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的模式是什么？
- en: 'The following snippet shows the schema that is created based on the Entity
    classes and the relationships we declared. This is auto-created by Spring Boot
    Data JPA auto-configuration:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了根据我们声明的实体类和关系创建的模式。这是由Spring Boot Data JPA自动配置自动创建的。
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `todo` table has a foreign key user ID for the user table.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`todo`表对用户表有一个外键用户ID。'
- en: Populating some data
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充一些数据
- en: 'To be able to test the repositories that we will create, we will populate some
    test data into these tables. All that we need to do is include the file called
    `data.sql` with the following statements in `src\main\resources`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够测试我们将创建的存储库，我们将在这些表中填充一些测试数据。我们需要做的就是在`src\main\resources`中包含名为`data.sql`的文件，并包含以下语句：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These are simple insert statements. We are creating a total of four users -
    the first user has two todos, the second user has one todo, and the last two users
    have none.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是简单的插入语句。我们创建了四个用户 - 第一个用户有两个待办事项，第二个用户有一个待办事项，最后两个用户没有。
- en: 'When you run `SpringDataJpaFirstExampleApplication` as Java application again,
    you will see a few extra statements in the log:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当您再次将`SpringDataJpaFirstExampleApplication`作为Java应用程序运行时，您将在日志中看到一些额外的语句：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The log statements confirm that the data is being populated into the H2 in-memory
    database. Let's turn our attention to creating repositories to access and manipulate
    the data from the Java code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 日志语句确认数据正在填充到H2内存数据库中。让我们把注意力转向创建存储库，以从Java代码中访问和操作数据。
- en: A simple repository
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的存储库
- en: 'A custom repository can be created by extending the repository marker interface.
    In the following example, we extend the repository interface with two methods--`findAll`
    and `count`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过扩展存储库标记接口来创建自定义存储库。在以下示例中，我们使用两个方法扩展了存储库接口--`findAll`和`count`：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A few important things to note are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`public interface TodoRepository extends Repository<Todo, Long>`: The `TodoRepository`
    interface extends the `Repository` interface. The two generic types indicate the
    entity being managed--Todo and the type of the primary key, that is, `Long`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface TodoRepository extends Repository<Todo, Long>`：`TodoRepository`接口扩展了`Repository`接口。两个泛型类型表示正在管理的实体--Todo和主键的类型，即`Long`。'
- en: '`Iterable<Todo> findAll()`: Used to list all the todos. Note that the name
    of the method should match what''s defined in `CrudRepository`.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Iterable<Todo> findAll()`: 用于列出所有待办事项。请注意，方法的名称应与`CrudRepository`中定义的名称匹配。'
- en: '`long count()`: Used to find the count of all todos.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long count()`: 用于查找所有待办事项的计数。'
- en: Unit test
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Let''s write a simple unit test to test whether we are able to access the `todo`
    data using `TodoRepository`. The following snippet shows the important details:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的单元测试，测试我们是否能够使用`TodoRepository`访问`todo`数据。以下代码片段显示了重要细节：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A few important things to note are as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`@DataJpaTest`: The `DataJpaTest` annotation is typically used along with `SpringRunner`
    in JPA repository unit tests. This annotation will enable only JPA-related auto-configuration.
    The test would use an in-memory database by default.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@DataJpaTest`: `DataJpaTest`注解通常与`SpringRunner`一起在JPA存储库单元测试中使用。此注解将仅启用与JPA相关的自动配置。测试将默认使用内存数据库。'
- en: '`@RunWith(SpringRunner.class)`: `SpringRunner` is a simple alias for `SpringJUnit4ClassRunner`.
    It launches a Spring context.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith(SpringRunner.class)`: `SpringRunner`是`SpringJUnit4ClassRunner`的简单别名。它启动了一个Spring上下文。'
- en: '`@Autowired TodoRepository todoRepository`: Autowires `TodoRepository` to be
    used in the test.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired TodoRepository todoRepository`: 自动装配`TodoRepository`以在测试中使用。'
- en: '`assertEquals(3, todoRepository.count())`: Checks whether the count returned
    is `3`. Remember that we inserted three todos in `data.sql`.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEquals(3, todoRepository.count())`: 检查返回的计数是否为`3`。请记住，我们在`data.sql`中插入了三个`todos`。'
- en: 'A word of caution: We are taking a shortcut to write a unit test in the preceding
    example. Ideally, a unit test should not depend on already-created data in the
    database. We will fix this in our future tests.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个警告：在前面的示例中，我们正在采用一种快捷方式来编写单元测试。理想情况下，单元测试不应依赖于数据库中已创建的数据。我们将在未来的测试中解决这个问题。
- en: The `Extending Repository` interface helps us in exposing selected methods on
    entities.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`Extending Repository`接口帮助我们在实体上公开选定的方法。'
- en: The CrudRepository interface
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CrudRepository接口
- en: 'We can extend `CrudRepository` to expose all create, read, update, and delete
    methods on an entity. The following snippet shows `TodoRepository` extending `CrudRepository`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展`CrudRepository`以公开实体上的所有创建、读取、更新和删除方法。以下代码片段显示了`TodoRepository`扩展`CrudRepository`：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`TodoRepository` can be used to perform all methods exposed by the `CrudRepository`
    interface. Let''s write a few unit tests to test some of these methods.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoRepository`可用于执行`CrudRepository`接口公开的所有方法。让我们编写一些单元测试来测试其中一些方法。'
- en: Unit test
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'The `findById()` method can be used to query using the primary key. The following
    snippet shows an example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`findById()`方法可用于使用主键查询。以下代码片段显示了一个示例：'
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`Optional` represents a container object for an object that can be null. Some
    of the important methods in `Optional` are listed below:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Optional`表示一个可以为null的对象的容器对象。`Optional`中的一些重要方法如下所示：'
- en: '`isPresent()`: Check if `Optional` contains a non-null value.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isPresent()`: 检查`Optional`是否包含非空值。'
- en: '`orElse()`: Default value if the object contained is null.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orElse()`: 如果包含的对象为空，则使用默认值。'
- en: '`ifPresent()`: Code in `ifPresent` is executed if the object contained is not
    null.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifPresent()`: 如果包含的对象不为空，则执行`ifPresent`中的代码。'
- en: '`get()`: To retrieve the contained object.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`: 检索包含的对象。'
- en: 'The `existsById()` method can be used to check whether an entity with the given
    ID exists. The following example shows how it can be done:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`existsById()`方法可用于检查具有给定ID的实体是否存在。以下示例显示了如何执行此操作：'
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `deleteById()` method is used to delete an entity with a specific ID. In
    the following example, we are deleting one of the `todos`, reducing the available
    todos from three to two:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteById()`方法用于删除具有特定ID的实体。在下面的例子中，我们正在删除一个`todo`，将可用的`todos`从三个减少到两个：'
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `deleteAll()` method is used to delete all the entities managed by the
    specific repository. In the specific example here, all the `todos` from the `todo`
    table are deleted:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteAll()`方法用于删除特定存储库管理的所有实体。在这个具体的例子中，`todo`表中的所有`todos`都被删除了：'
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `save()` method can be used to update or insert an entity. The following
    example shows how the description of a `todo` can be updated. The following test
    uses `TestEntityManager` to flush the data before retrieving it. `TestEntityManager`
    is autowired as part of the functionality of `@DataJpaTest` Annotation:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`save()`方法可用于更新或插入实体。以下示例显示了如何更新`todo`的描述。以下测试使用`TestEntityManager`在检索数据之前刷新数据。`TestEntityManager`是作为`@DataJpaTest`注解功能的一部分自动装配的：'
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The PagingAndSortingRepository interface
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PagingAndSortingRepository接口
- en: '`PagingAndSortingRepository` extends `CrudRepository` and provides methods
    in order to retrieve entities with pagination and a specified sort mechanism.
    Take a look at the following example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`PagingAndSortingRepository`扩展了`CrudRepository`，并提供了以分页和指定排序机制检索实体的方法。看看下面的例子：'
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Important things to note are as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`public interface UserRepository extends PagingAndSortingRepository` : The
    `UserRepository` interface extends the `PagingAndSortingRepository` interface'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface UserRepository extends PagingAndSortingRepository`：`UserRepository`接口扩展了`PagingAndSortingRepository`接口'
- en: '`<User, Long>`: Entities are of type `User` and have an ID field of type `Long`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<User, Long>`: 实体类型为`User`，具有类型为`Long`的ID字段'
- en: Unit tests
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Let''s write a few tests to use the sorting and pagination capabilities of
    `UserRepository`. The base of the test is very similar to `TodoRepositoryTest`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些测试来使用`UserRepository`的排序和分页功能。测试的基础与`TodoRepositoryTest`非常相似：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s write a simple test to sort users and print the `users` to the log:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的测试来对用户进行排序并将`users`打印到日志中：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Important things to note are as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`new Sort(Sort.Direction.DESC, "name")`: We would want to sort by name in descending
    order.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new Sort(Sort.Direction.DESC, "name")`: 我们希望按名称降序排序。'
- en: '`and(new Sort(Sort.Direction.ASC, "userid"))`: The `and()` method is a conjunction
    method to combine different sort configurations. In this example, we are adding
    secondary criteria to sort by user ID in the ascending order.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`and(new Sort(Sort.Direction.ASC, "userid"))`: `and()`方法是一个连接方法，用于组合不同的排序配置。在这个例子中，我们添加了按用户ID升序排序的次要条件。'
- en: '`userRepository.findAll(sort)`: The sort criteria are passed as a parameter
    to the `findAll()` method.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userRepository.findAll(sort)`: 排序条件作为参数传递给`findAll()`方法。'
- en: 'The output of the preceding test is as shown as follows. The users are sorted
    in descending order by name:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 前面测试的输出如下所示。用户按名称降序排序：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The test for the pageable is shown as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 分页测试如下所示：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output of the test is shown as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的输出如下所示：
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Important things to note are as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`new PageRequest(0, 2)`: We are requesting the first page (index 0) and setting
    the size of each page to two'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new PageRequest(0, 2)`: 我们请求第一页（索引0），并设置每页的大小为2'
- en: '`userRepository.findAll(pageable)`: The `PageRequest` object is sent as a parameter
    to the `findAll` method'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userRepository.findAll(pageable)`: `PageRequest`对象作为参数发送到`findAll`方法'
- en: '`Page 1 of 2` : The output shows that we are looking at the first page in a
    total of two pages'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Page 1 of 2`：输出显示我们正在查看两个页面中的第一个页面'
- en: 'A couple of important things to note about `PageRequest` are as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`PageRequest`的一些重要事项如下：
- en: The `PageRequest` object has the `next()`, `previous()`, and `first()` methods
    to traverse the pages
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PageRequest`对象具有`next()`、`previous()`和`first()`方法来遍历页面'
- en: The `PageRequest` constructor (`public PageRequest(int page, int size, Sort
    sort)`) also accepts a third parameter--`Sort order`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PageRequest`构造函数（`public PageRequest(int page, int size, Sort sort)`）还接受第三个参数--`Sort
    order`'
- en: 'Important methods in Page and its child interface, Slice, are listed as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Page及其子接口Slice中的重要方法如下所示：
- en: '`int getTotalPages()`: Returns the number of result pages'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int getTotalPages()`: 返回结果页面的数量'
- en: '`long getTotalElements()`: Returns the total number of elements in all pages'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long getTotalElements()`: 返回所有页面中的元素总数'
- en: '`int getNumber()`: Returns the number of the current page'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int getNumber()`: 返回当前页面的编号'
- en: '`int getNumberOfElements()`: Returns the number of elements in the current
    page'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int getNumberOfElements()`: 返回当前页面中的元素数'
- en: '`List<T> getContent()`: Gets the content of the current slice (or page) as
    a list'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<T> getContent()`: 以列表形式获取当前片段（或页面）的内容'
- en: '`boolean hasContent()`: Returns if the current slice has any elements'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean hasContent()`: 返回当前片段是否有任何元素'
- en: '`boolean isFirst()`: Returns if this is the first slice'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isFirst()`: 返回这是否是第一个片段'
- en: '`boolean isLast()`: Returns if this is the last slice'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isLast()`: 返回这是否是最后一个片段'
- en: '`boolean hasNext()`: Returns if there is a next slice'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean hasNext()`: 返回是否有下一个片段'
- en: '`boolean hasPrevious()`: Returns if there is a previous slice'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean hasPrevious()`: 返回是否有上一个片段'
- en: '`Pageable nextPageable()`: Gets access to the next slice'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pageable nextPageable()`: 获取下一个片段的访问权限'
- en: '`Pageable previousPageable()`: Gets access to the previous slice'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pageable previousPageable()`: 获取上一个片段的访问权限'
- en: Query methods
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询方法
- en: In the previous sections, we looked at the `CrudRepository` and `PagingAndSortingRepository`
    interfaces. We looked at the different methods that they provided by default.
    Spring Data does not stop here. It defines a few patterns that allow you to define
    custom query methods. In this section, we will look at examples of some of the
    options Spring Data provides to customize your query methods.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们查看了`CrudRepository`和`PagingAndSortingRepository`接口。我们查看了它们默认提供的不同方法。Spring
    Data并不止于此。它定义了一些模式，允许您定义自定义查询方法。在本节中，我们将看一些Spring Data提供的自定义查询方法的示例选项。
- en: 'We will start with examples related to finding rows matching specific attribute
    values. The following example shows different methods in order to search for the
    `User` by their name:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从与查找特定属性值匹配的行相关的示例开始。以下示例显示了按名称搜索`User`的不同方法：
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Important things to note are as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`List<User> findByName(String name)`: The pattern is `findBy` , followed by
    the name of the attribute that you would want to query by. The value of the attribute
    is passed in as a parameter.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<User> findByName(String name)`: 模式是`findBy`，后跟您想要查询的属性的名称。属性的值作为参数传递。'
- en: '`List<User> findByName(String name, Sort sort)`: This method allows you to
    specify a specific sort order.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<User> findByName(String name, Sort sort)`: 该方法允许您指定特定的排序顺序。'
- en: '`List<User> findByName(String name, Pageable pageable)`: This method allows
    the use of pagination.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<User> findByName(String name, Pageable pageable)`: 该方法允许使用分页。'
- en: Instead of find we can also use read, query or get to name the methods. For
    example, queryByName instead of findByName.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了find，我们还可以使用read、query或get来命名方法。例如，queryByName代替findByName。
- en: Similar to find..By we can use count..By to find the count, and delete..By (or
    remove..By) to delete records.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与find..By类似，我们可以使用count..By来查找计数，并使用delete..By（或remove..By）来删除记录。
- en: 'The following example shows how to search by attributes of a containing element:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何按包含元素的属性进行搜索：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The user contains `Todos`. `Todo` has `title` attribute. To create a method
    to search a user based on the title of the todo, we can create a method by the
    name `findByTodosTitle` in `UserRepository`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 用户包含`Todos`。`Todo`有`title`属性。要创建一个根据todo的标题搜索用户的方法，我们可以在`UserRepository`中创建一个名为`findByTodosTitle`的方法。
- en: 'The following examples show a few more variations that are possible with `findBy`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了使用`findBy`可能的一些更多变化：
- en: '[PRE30]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Important things to note are as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`findByTitleAndDescription`: Multiple attributes can be used to query'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findByTitleAndDescription`: 可以使用多个属性来查询'
- en: '`findDistinctTodoByTitleOrDescription`: Find distinct rows'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findDistinctTodoByTitleOrDescription`: 查找不同的行'
- en: '`findByTitleIgnoreCase`: Illustrates the use of the ignore case'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findByTitleIgnoreCase`: 说明了忽略大小写的用法'
- en: '`findByTitleOrderByIdDesc`: Illustrates an example of specifying a specific
    sort order'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findByTitleOrderByIdDesc`: 说明了指定特定排序顺序的示例'
- en: 'The following example shows how to find a specific subset of records using
    find:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何使用find查找特定记录的子集：
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Important things to note are as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`findFirstByName, findTopByName`: Queries for the first user'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findFirstByName, findTopByName`: 查询第一个用户'
- en: '`findTop3ByName, findFirst3ByName`: Finds the top three users'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findTop3ByName, findFirst3ByName`: 查找前三个用户'
- en: Queries
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询
- en: 'Spring Data JPA also provides options to write custom queries. The following
    snippet shows a simple example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA还提供了编写自定义查询的选项。以下代码片段显示了一个简单的示例：
- en: '[PRE32]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Important things to note are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`@Query`: The annotation to define queries for repository methods'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Query`: 用于定义存储库方法的查询的注释'
- en: '`select u from User u where u.name = ?1`: `Query to be executed. ?1` represents
    the first parameter'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select u from User u where u.name = ?1`：要执行的查询。`?1`代表第一个参数'
- en: '`findUsersByNameUsingQuery`: When this method is called, the query specified
    is executed with the name as the parameter'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findUsersByNameUsingQuery`：调用此方法时，将使用指定的查询和名称作为参数执行'
- en: Named Parameters
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名参数
- en: 'We can use named parameters to make the query more readable. The following
    snippet from UserRepository shows an example:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用命名参数使查询更易读。下面来自UserRepository的代码片段显示了一个示例：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Important things to note are as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`select u from User u where u.name = :name`: Defines a named parameter `"name"`
    in the query'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select u from User u where u.name = :name`：在查询中定义了一个命名参数`"name"`'
- en: '`findUsersByNameUsingNamedParameters(@Param("name") String name)`: `@Param("name")`
    defines the named parameter in the arguments list'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findUsersByNameUsingNamedParameters(@Param("name") String name)`：`@Param("name")`在参数列表中定义了命名参数'
- en: Named Query
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名查询
- en: is to use named queries defined on the entity itself. The following example
    shows how to define a named query on
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 是在实体本身上定义命名查询。以下示例显示了如何在
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To use this query in a repository, we would need to create a method with the
    same name as the named query. The following snippet shows the corresponding method
    in UserRepository:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要在存储库中使用此查询，我们需要创建一个与命名查询同名的方法。下面的代码片段显示了UserRepository中对应的方法：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that the name of the named query is `User.findUsersWithNameUsingNamedQuery`.
    So, the name of the method in the repository should be `findUsersWithNameUsingNamedQuery`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命名查询的名称是`User.findUsersWithNameUsingNamedQuery`。因此，存储库中的方法名称应为`findUsersWithNameUsingNamedQuery`。
- en: Native query
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地查询
- en: 'Spring Data JPA provides the option to execute native queries as well. The
    following example demonstrates a simple native query in `UserRepository`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA还提供了执行本地查询的选项。以下示例演示了在`UserRepository`中执行简单本地查询：
- en: '[PRE36]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Important things to note are as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`SELECT * FROM USERS WHERE u.name = ?1`: This is the native query to be executed.
    Note that we are not referring to the User entity but are using the table name
    users in the query.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT * FROM USERS WHERE u.name = ?1`：这是要执行的本地查询。请注意，我们没有引用User实体，而是在查询中使用了表名users。'
- en: '`nativeQuery = true`: This attribute ensures that the query is executed as
    a native query.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nativeQuery = true`：此属性确保查询作为本地查询执行。'
- en: Spring Data Rest
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data Rest
- en: Spring Data Rest provides a very simple option to expose CRUD RESTful services
    around data repositories.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data Rest提供了一个非常简单的选项，可以在数据存储库周围公开CRUD RESTful服务。
- en: 'Some of the important features of Spring Data Rest include the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data Rest的一些重要特性包括以下内容：
- en: Exposing the REST API around Spring Data repositories
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕Spring Data存储库公开REST API
- en: Support for pagination and filtering
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持分页和过滤
- en: Understanding query methods in Spring Data repositories and exposing them as
    search resources
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Spring Data存储库中的查询方法并将其公开为搜索资源
- en: Among the frameworks supported are JPA, MongoDB, and Cassandra
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的框架包括JPA、MongoDB和Cassandra
- en: Options to customize the resources are exposed by default
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下公开了自定义资源的选项
- en: 'We will start by including the Spring Boot Data Rest starter in our `pom.xml`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`pom.xml`中包含Spring Boot Data Rest starter：
- en: '[PRE37]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can make `UserRepository` expose the REST service by adding a simple annotation,
    as shown in the following snippet:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加一个简单的注释使`UserRepository`公开REST服务，如下面的代码片段所示：
- en: '[PRE38]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Important things to note are as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要事项如下：
- en: '`@RepositoryRestResource`: The annotation used to expose a repository using
    REST'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RepositoryRestResource`：用于使用REST公开存储库的注释'
- en: '`collectionResourceRel = "users"`: The `collectionResourceRel` value to be
    used in the generated links'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collectionResourceRel = "users"`：在生成的链接中要使用的`collectionResourceRel`值'
- en: '`path = "users"`: The path under which the resource has to be exposed'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path = "users"`：要公开资源的路径'
- en: 'When we launch `SpringDataJpaFirstExampleApplication` as a Java application,
    the following can be seen in the log:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`SpringDataJpaFirstExampleApplication`作为Java应用程序启动时，日志中可以看到以下内容：
- en: '[PRE39]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding log shows that the Spring MVC DispatcherServlet is launched and
    ready to serve different request methods and URIs.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的日志显示了Spring MVC DispatcherServlet已启动并准备好为不同的请求方法和URI提供服务。
- en: The GET method
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET方法
- en: 'When we send a `GET` request to `http://localhost:8080/users`, we get the response
    shown here. The response is edited to remove the details of `UserId2`, `UserId3`
    and `UserId4` for brevity:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向`http://localhost:8080/users`发送`GET`请求时，我们会得到如下所示的响应。为了简洁起见，响应已编辑以删除`UserId2`、`UserId3`和`UserId4`的详细信息：
- en: '[PRE40]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The POST method
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST方法
- en: 'The following screenshot shows how to fire a `POST` request to create a new
    user:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了如何发送`POST`请求以创建新用户：
- en: '![](img/eb8f9011-0f39-464d-a292-4e144fae7866.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb8f9011-0f39-464d-a292-4e144fae7866.png)'
- en: 'The following snippet shows the response:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了响应：
- en: '[PRE41]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The response contains the URI of the created resource--`http://localhost:8080/users/5`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 响应包含已创建资源的URI--`http://localhost:8080/users/5`。
- en: The search resource
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索资源
- en: 'Spring Data Rest exposes search resources for other methods in the repository.
    For example, the `findUsersByNameUsingNamedParameters` method is exposed at `http://localhost:8080/users/search/findUsersByNameUsingNamedParameters?name=User%20Name%201`.
    The following snippet shows the response of a `Get` request to the preceding URL:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data Rest公开了存储库中其他方法的搜索资源。例如，`findUsersByNameUsingNamedParameters`方法在`http://localhost:8080/users/search/findUsersByNameUsingNamedParameters?name=User%20Name%201`处公开。下面的代码片段显示了对上述URL发送`Get`请求的响应：
- en: '[PRE42]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Big Data
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大数据
- en: 'As we discussed in the introduction to the chapter, there are a variety of
    data stores that are providing alternatives to traditional databases. The term
    **Big Data** has become popular in the last few years. While there is no agreed
    definition of Big Data, there are a few shared characteristics:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章介绍中讨论的，有各种数据存储库提供了传统数据库的替代方案。在过去几年中，“大数据”这个词变得很流行。虽然对于大数据没有统一的定义，但有一些共同的特征：
- en: '**Unstructured Data**: There is no specific structure to the data'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非结构化数据**：数据没有特定的结构'
- en: '**Large Volumes**: Typically, more volumes than that can be processed by traditional
    databases, for example, log streams, Facebook posts, tweets'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大容量**：通常比传统数据库能够处理更多的数据量，例如日志流、Facebook帖子、推文'
- en: '**Easily Scalable**: Typically provides options to scale horizontally and vertically'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于扩展**：通常提供水平和垂直扩展的选项'
- en: Hadoop, Cassandra, and MongoDB are among the popular options.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Hadoop、Cassandra和MongoDB是其中受欢迎的选项。
- en: In this section, we will take MongoDB as an example to connect using Spring
    Data.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将以MongoDB为例，使用Spring Data进行连接。
- en: MongoDB
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: Follow the instructions at [http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)
    to install MongoDB on your specific operating system.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)上的说明在你特定的操作系统上安装MongoDB。
- en: 'To get started with connecting to MongoDB, include the dependency for Spring
    Boot MongoDB starter in the `pom.xml`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始连接到MongoDB，需要在`pom.xml`中包含Spring Boot MongoDB starter的依赖项：
- en: '[PRE43]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Let''s create a new Entity class `Person` to store to MongoDB. The following
    snippet shows a `Person` class with an ID and a name:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的实体类`Person`来存储到MongoDB。以下代码段显示了一个带有ID和姓名的`Person`类：
- en: '[PRE44]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We would want to store the `Person` entities to MongoDB. We would need to create
    a new repository. The following snippet shows a MongoDB repository:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将`Person`实体存储到MongoDB。我们需要创建一个新的存储库。以下代码段显示了一个MongoDB存储库：
- en: '[PRE45]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Important things to note are as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 重要事项如下：
- en: '`PersonMongoDbRepository extends MongoRepository`: `MongoRepository` is a MongoDB-specific
    Repository interface'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PersonMongoDbRepository extends MongoRepository`：`MongoRepository`是一个特定于MongoDB的存储库接口'
- en: '`MongoRepository<Person, String>`: We would want to store `Person` entities
    that have a key of type String'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MongoRepository<Person, String>`：我们希望存储具有String类型键的`Person`实体'
- en: '`List<Person> findByName(String name)`: A simple method to find a person by
    name'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List<Person> findByName(String name)`：一个简单的通过姓名查找人的方法'
- en: Unit test
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'We will write a simple unit test to test this repository. The code for the
    unit test is shown as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个简单的单元测试来测试这个存储库。单元测试的代码如下所示：
- en: '[PRE46]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Some important things to note are as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 一些重要事项如下：
- en: Make sure that MongoDB is running when your run the test.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在运行测试时MongoDB正在运行。
- en: '`@DataMongoTest`: The `DataMongoTest` annotation is used in combination with
    `SpringRunner` for a typical MongoDB unit test. This disables auto-configuration
    for everything except things related to MongoDB.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@DataMongoTest`：`DataMongoTest`注解与`SpringRunner`一起用于典型的MongoDB单元测试。这将除了与MongoDB相关的内容之外，禁用自动配置。'
- en: '`@Autowired PersonMongoDbRepository personRepository`: Autowires the MongoDB
    repository to be tested.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired PersonMongoDbRepository personRepository`：将MongoDB存储库自动装配到被测试的对象。'
- en: An important thing to note is that all the code in the test is very similar
    to the code written for Spring Data JPA. This example show how simple Spring Data
    makes it to connect to different kinds of data stores. The code to interact with
    a nonrelational Big Data data store is similar to the code that talks to a relational
    database. That's the magic of Spring Data.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的事项是测试中的所有代码与为Spring Data JPA编写的代码非常相似。这个例子展示了Spring Data使得连接到不同类型的数据存储变得非常简单。与非关系型大数据存储交互的代码与与关系型数据库交互的代码类似。这就是Spring
    Data的魔力。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Spring Boot makes the development of Spring-based applications easy. Spring
    Data makes it easy to connect to different data stores.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot使得基于Spring的应用程序开发变得容易。Spring Data使得连接到不同的数据存储变得容易。
- en: r, we looked at how Spring Data makes it easy to connect to different data stores
    through simple concepts such as repository. We also came to know how to use Spring
    Data in combination with Spring Data JPA to connect to an in-memory relational
    database and how to use Spring Data MongoDB to connect and save data to a Big
    Data store, such as MongoDB.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了Spring Data如何通过简单的概念（如存储库）使得连接到不同的数据存储变得容易。我们还了解了如何将Spring Data与Spring
    Data JPA结合使用来连接到内存中的关系型数据库，以及如何使用Spring Data MongoDB来连接和保存数据到一个大数据存储，比如MongoDB。
- en: In the next chapter, we will shift our attention toward the cloud. We will learn
    about Spring Cloud and how it solves the problems of the Cloud.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把注意力转向云端。我们将学习Spring Cloud以及它如何解决云端的问题。
