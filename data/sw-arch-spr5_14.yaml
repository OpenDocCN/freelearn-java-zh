- en: High Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高性能
- en: 'Nothing is more disappointing than having to deal with issues in production
    when an application is behaving in an unexpected way. In this chapter, we are
    going to discuss some simple techniques that can be applied in order to get rid
    of these annoying problems, applying simple recommendations to your daily routine
    to take care of the performance of your applications. Throughout this chapter,
    we are going to review the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序以意外的方式表现时，不得不处理生产中的问题比任何事情都更令人失望。在本章中，我们将讨论一些简单的技术，可以应用这些技术来摆脱这些令人讨厌的问题，将简单的建议应用到您的日常工作中，以照顾您的应用程序的性能。在本章中，我们将讨论以下主题：
- en: Why performance matters
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么性能很重要
- en: Scalability
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Availability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性
- en: Performance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: Key recommendations to keep your software away from performance issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使您的软件远离性能问题的关键建议
- en: Profiling applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序分析
- en: SQL query optimizations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL查询优化
- en: Load testing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载测试
- en: Let's start by introducing the importance of performance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从介绍性能的重要性开始。
- en: Why performance matters
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么性能很重要
- en: Over the last two decades as a consultant, I visited several government institutions,
    banks, and financial institutions, establishing a common factor for a lack of
    performance in applications that are working in production, and I found common
    issues that can be avoided if you use a set of good practices as part of your
    SDLC.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的20年里，作为顾问，我访问了几家政府机构、银行和金融机构，建立了一个共同因素，即在生产中工作的应用程序缺乏性能，并且我发现了一些常见问题，如果您在SDLC的一部分中使用一套良好的实践，这些问题是可以避免的。
- en: It's important to pay close attention to performance, because it brings huge
    trouble to companies, project sponsors, and customers since an application that
    faces this problem brings dissatisfaction on several levels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关注性能很重要，因为它给公司、项目发起人和客户带来了巨大的麻烦，因为面临这个问题的应用程序会在多个层面上带来不满。
- en: Before giving recommendations, we are going to review and understand the non-functional
    requirements of scalability, availability, and performance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在给出建议之前，我们将审查和了解可扩展性、可用性和性能的非功能性需求。
- en: Scalability
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: This describes the capacity of a system to deal with to a high workload and
    to increase its capacity in order to resolve more requests based on the demand
    for work.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这描述了系统处理高工作负载并根据工作需求增加其容量以解决更多请求的能力。
- en: Horizontal scalability
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平扩展性
- en: 'This is resolved by adding additional nodes with all the functionality of your
    system, redistributing the requests, as demonstrated in the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加具有系统所有功能的额外节点来解决这个问题，重新分配请求，如下图所示：
- en: '![](img/07407738-e2aa-4e2b-8a7c-2824e2c98a6f.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07407738-e2aa-4e2b-8a7c-2824e2c98a6f.png)'
- en: Horizontal scalability
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 水平扩展性
- en: Vertical scalability
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 垂直扩展性
- en: 'We use vertical scaling by adding resources (such as the RAM, CPU, or hard
    disk) to the node or server, and so on, to process more requests for our system.
    One common practice that I saw is that it adds more hardware to the database server
    to better perform the multiple connections that are using it; we can only scale
    a service by adding more resources, as the following diagram shows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过向节点或服务器添加资源（如RAM、CPU或硬盘等）来使用垂直扩展，以处理系统的更多请求。我看到的一个常见做法是向数据库服务器添加更多硬件，以更好地执行正在使用它的多个连接；我们只能通过添加更多资源来扩展服务，如下图所示：
- en: '![](img/c711bfde-11e4-4757-9e8d-66adcf3157ca.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c711bfde-11e4-4757-9e8d-66adcf3157ca.png)'
- en: Vertical scalability
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展性
- en: High availability
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可用性
- en: This refers to the capacity to guarantee that a system provides a service or
    resource continuously. This capacity is directly associated to the **Service Level
    Agreement** (**SLA**).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这指的是系统持续提供服务或资源的能力。这种能力直接与服务级别协议（SLA）相关。
- en: An SLA is calculated based on the maintenance window of the system, and SLAs
    define whether a system should scale up or out.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SLA是根据系统的维护窗口计算的，SLA定义了系统是否应该扩展或扩展。
- en: Performance
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: 'This is the capacity of the responsiveness of a system to execute any action
    within a given time interval. As part of software systems, we need to start defining
    measurable performance goals such as the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是系统对在给定时间间隔内执行任何操作的响应能力。作为软件系统的一部分，我们需要开始定义可衡量的性能目标，如下所示：
- en: The minimum or average response time
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小或平均响应时间
- en: The average amount of concurrent users
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均并发用户数量
- en: The number of requests per second during high load or concurrency
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高负载或并发时每秒的请求次数
- en: 'The principal challenge that we have today as developers is the number of customers
    and devices that our application must handle, and, even more, whether our application
    is going to run on the internet or within an intranet only. The following diagram
    shows the topology of how an application is usually deployed and consumed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们今天面临的主要挑战是我们的应用程序必须处理的客户和设备数量，甚至更重要的是，我们的应用程序是否将在互联网上运行还是仅在内部网络中运行。下图显示了应用程序通常部署和使用的拓扑结构：
- en: '![](img/dd66e4d6-2cec-4366-a347-5bfaa97bf0ff.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd66e4d6-2cec-4366-a347-5bfaa97bf0ff.png)'
- en: High-load requests to a system
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对系统的高负载请求
- en: After understanding the principal concepts behind performance, scalability,
    and availability, let's review some key recommendations to increase the performance
    of applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解性能、可扩展性和可用性的主要概念之后，让我们回顾一些增加应用程序性能的关键建议。
- en: The key recommendation to avoid performance issues
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免性能问题的关键建议
- en: It's common to use load testing tools, **Application Performance Monitors**
    (**APMs**), and profiling tools to find and fix performance issues in software
    systems. To simulate the number of users in production, we need to run load test-creating
    scenarios for the most commonly used functionalities of our system, and, at the
    same time, track and monitor the application health-measuring resources such as
    CPU, RAM, IO, heap usage, threads, and database access. At the output of these
    process, we can give some key recommendations to keep your software away from
    performance issues.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用负载测试工具、**应用程序性能监视器**（**APM**）和分析工具来查找和解决软件系统中的性能问题。为了模拟生产中的用户数量，我们需要运行负载测试-为系统的最常用功能创建场景，并同时跟踪和监视应用程序健康状况-测量CPU、RAM、IO、堆使用、线程和数据库访问等资源。在这个过程的输出中，我们可以给出一些关键建议，以避免软件出现性能问题。
- en: In the following section, we are going to explain the most common bottlenecks
    that we can find, and how to avoid them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将解释我们可能遇到的最常见的瓶颈以及如何避免它们。
- en: Identifying bottlenecks
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别瓶颈
- en: Enterprise applications become more complex every day. When the business succeeds,
    the application supporting that business will have more users, which means a bigger
    load received every day, so we need to take care of the performance bottlenecks
    that could appear.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序每天变得更加复杂。当业务成功时，支持该业务的应用程序将拥有更多用户，这意味着每天都会收到更大的负载，因此我们需要注意可能出现的性能瓶颈。
- en: To understand the term **bottleneck**, we are going to give a simple definition.
    In software systems, a bottleneck happens when the function of an application
    or a system is starting to be limited for a single component, and it is like comparing
    the neck of a bottle slowing down overall water flow.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 理解术语**瓶颈**，我们将给出一个简单的定义。在软件系统中，当应用程序或系统的功能开始受到单个组件的限制时，就会出现瓶颈，就像比较瓶颈减慢整体水流一样。
- en: 'In other words, we can see a bottleneck if our application starts to perform
    slowly or starts to exceed the anticipated response time . This can happen for
    different kinds of bottlenecks, such as the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果我们的应用程序开始表现缓慢或开始超出预期的响应时间，我们就可以看到瓶颈。这可能是由于不同类型的瓶颈引起的，例如以下情况：
- en: '**CPU**: This happens when this resource is busy and cannot respond to the
    system properly. It is common to start having this bottleneck when we start to
    see CPU at utilization exceed 80% for extended periods of time.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU**：当此资源繁忙且无法正确响应系统时会发生这种情况。当我们开始看到CPU利用率在较长时间内超过80%时，通常会开始出现这种瓶颈。'
- en: '**Memory**: This happens when the system doesn''t have enough RAM or fast RAM.
    Sometimes the application logs show out-of-memory exceptions or leak-of-memory
    problems.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：当系统没有足够的RAM或快速RAM时会发生这种情况。有时应用程序日志显示内存不足异常或内存泄漏问题。'
- en: '**Network**: Associated with a lack of necessary bandwidth'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：与必要带宽的缺乏有关'
- en: The application itself, code problems, too many exceptions not being controlled,
    poor use of resources, and so on
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序本身、代码问题、太多未受控制的异常、资源使用不当等
- en: Using APMs to identify bottlenecks  is a good approach because an APM can collect
    runtime information without slowing down application performance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用APM来识别瓶颈是一个不错的方法，因为APM可以在不减慢应用程序性能的情况下收集运行时信息。
- en: To identify bottlenecks, we can use a couple of practices; load testing and
    monitor tools, or profiling tools. The following section explains profiling tools.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别瓶颈，我们可以使用一些实践方法；负载测试和监控工具，或分析工具。接下来的部分将解释分析工具。
- en: Profiling applications
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序性能分析
- en: We can look at our code and start to profile the parts of the system we suspect
    have performance issues, or we can use a profiler and obtain information about
    the entire system as a whole. These tools gather runtime data and monitor resource
    consumption in terms of CPU, memory, threads, classes, and I/O.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看我们的代码，并开始分析我们怀疑存在性能问题的系统部分，或者我们可以使用分析工具并获取有关整个系统的信息。这些工具收集运行时数据，并监视CPU、内存、线程、类和I/O的资源消耗。
- en: 'There are several tools available for profiling Java applications, including
    the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种可用于分析Java应用程序的工具，包括以下内容：
- en: Tools that come with the JVM, such as VisualVM, JStat, JMap, and more
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与JVM一起提供的工具，如VisualVM、JStat、JMap等
- en: Specialized tools, such as JProfiler, Java Mision Control, and Yourkit
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专门的工具，如JProfiler、Java Mission Control和Yourkit
- en: Lightweight profilers that come with APMs, like those we saw in [Chapter 12](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml),
    *Monitoring*, using New Relic
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级分析器，如APM中提供的那些，就像我们在[第12章](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml)中看到的那样，*监控*，使用New
    Relic
- en: Visual VM
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual VM
- en: This is a visual tool integrated as part of the JDK, which has the capability
    to profile applications. Let's run our banking app from the previous chapters,
    and review which information we can gather using it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是作为JDK的一部分集成的可视化工具，具有分析应用程序的能力。让我们运行我们之前章节中的银行应用程序，并查看我们可以使用它收集哪些信息。
- en: 'To run our previous banking application, go to the project folder and run the
    following via the command line: `java -jar build/libs/banking-app-1.0.jar`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行我们之前的银行应用程序，请转到项目文件夹，并通过命令行运行以下命令：`java -jar build/libs/banking-app-1.0.jar`。
- en: 'Now, we are going to use the VisualVM to gather some metrics about the JVM.
    We can run this tool from the console using the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用VisualVM收集有关JVM的一些指标。我们可以通过以下命令从控制台运行此工具：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We should see a screen similar to the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到类似以下截图的屏幕：
- en: '![](img/12186fb2-07fe-45c2-b73c-7ffc34c653db.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12186fb2-07fe-45c2-b73c-7ffc34c653db.png)'
- en: Java VisualVM
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Java VisualVM
- en: 'Using the Locals menu option, you have to attach the Java process that is going
    to be monitored. In this case, we are going to select banking-app-1.0.jar. Then,
    we should see a resume of the resources used for the application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“本地”菜单选项，您必须附加要监视的Java进程。在这种情况下，我们将选择banking-app-1.0.jar。然后，我们应该看到应用程序使用的资源的摘要：
- en: '![](img/6ec75a25-90ec-4440-a3a1-3602ac6a55c5.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ec75a25-90ec-4440-a3a1-3602ac6a55c5.png)'
- en: VisualVM CPU, RAM, classes, and threads
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: VisualVM CPU、RAM、类和线程
- en: 'There is also a tab that provides information about Threads, which is shown
    in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个选项卡提供有关线程的信息，如下面的屏幕截图所示：
- en: '![](img/1893b4e3-a122-471f-ab36-236c5f8e778c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1893b4e3-a122-471f-ab36-236c5f8e778c.png)'
- en: VisualVM threads
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: VisualVM线程
- en: We can use any tool that we feel comfortable with; a great place to start, and
    a tool that is easy to use is Jprofiler, but all the tools give us similar information.
    We need to understand and follow the possible problems generated by any bottleneck
    that we find in our application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何我们感觉舒适的工具；一个很好的起点，也是一个易于使用的工具是Jprofiler，但所有的工具都给我们提供类似的信息。我们需要了解并遵循我们应用程序中发现的任何瓶颈可能引发的问题。
- en: Debugging performance issues in production can be a difficult task, and, in
    some cases hard to find and fix. We need a tool that we can feel confident about
    to understand the bottlenecks, so we need to try different tools and experiment
    load tests to find the right one for us.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中调试性能问题可能是一项困难的任务，在某些情况下很难找到和修复。我们需要一个让我们信任的工具来理解瓶颈，因此我们需要尝试不同的工具并进行负载测试，以找到适合我们的正确工具。
- en: Don't optimize before you know it's necessary; first, run the application and
    run a load test to see whether we can approach the non-functional requirements
    defined for performance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您知道有必要优化之前不要进行优化；首先运行应用程序并运行负载测试，看看我们是否可以满足性能的非功能性需求。
- en: SQL query optimizations
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL查询优化
- en: 'Optimizing queries and the data access layer of your enterprise application
    is key to avoiding bottlenecks and performance issues. We can use New Relic as
    an APM, and this will help us to detect bottlenecks and performance problems using
    database access graphics. With these graphics, we can find the SQL sentences used
    by your application, finding delay transactions or blocked tables if we continue
    to drilldown the information until we can also find the most SQL sentences used
    and the number of connections managed, as in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 优化企业应用程序的查询和数据访问层对于避免瓶颈和性能问题至关重要。我们可以使用New Relic作为APM，这将帮助我们使用数据库访问图形来检测瓶颈和性能问题。通过这些图形，我们可以找到应用程序使用的SQL语句，找到延迟事务或阻塞表，如果我们继续深入信息，还可以找到使用最多的SQL语句和管理的连接数，如下面的屏幕截图所示：
- en: '![](img/414aa751-dcba-464d-8f68-40dc3a952b0a.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/414aa751-dcba-464d-8f68-40dc3a952b0a.png)'
- en: Database metrics from New Relic
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 来自New Relic的数据库指标
- en: 'From the app, we can identify the queries most used and check for opportunities
    to optimize them. We would need indexes or to refactor our code to get better
    performance. On the other hand, without using an APM or a profiling tool, we can
    use a number of techniques to improve our SQL and data access layers, such as
    the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序中，我们可以识别最常用的查询，并寻找优化的机会。我们需要索引或重构我们的代码以获得更好的性能。另一方面，如果不使用APM或分析工具，我们可以使用许多技术来改进我们的SQL和数据访问层，例如以下内容：
- en: '**Review SQL sentences**: This reviews the SQL sentences executed and optimized
    one by one via the profiler or the APM, applying indexes, choosing the right column
    types, and optimizing relationships using native queries when necessary.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审查SQL语句**：这通过分析器或APM逐个审查和优化执行的SQL语句，应用索引，选择正确的列类型，并在必要时使用本地查询优化关系。'
- en: '**JDBC batch**: This uses `prepared` statements for batching, and some databases
    such as Oracle support batching for `prepared` statements.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDBC批处理**：这使用`prepared`语句进行批处理，一些数据库如Oracle支持`prepared`语句的批处理。'
- en: '**Connection managing**: This reviews the use of the connection pool, and measure
    and set the correct pool size.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接管理**：这审查连接池的使用，并测量和设置正确的池大小。'
- en: '**Scale up and scale out**: This is explained in the *Scalability* section.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展和扩展**：这在*可扩展性*部分有解释。'
- en: '**Caching**: This uses in-memory buffer structures to avoid disk access.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：这使用内存缓冲结构来避免磁盘访问。'
- en: '**Avoid ORM**: **Object Relational Mapping** (**ORM**) tools are used to treat database
    tables as Java Objects to persist information. However, in some cases, it is better
    to use plain SQL statements to avoid unnecessary joins, which lead us to improve
    the performance of applications and databases at the same time.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免ORM**：**对象关系映射**（**ORM**）工具用于将数据库表视为Java对象以持久化信息。然而，在某些情况下，最好使用普通的SQL语句来避免不必要的连接，从而提高应用程序和数据库的性能。'
- en: In the next section, we will look at how to simulate virtual users in order
    to create a load test for your applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将看看如何模拟虚拟用户以创建应用程序的负载测试。
- en: A load test example
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载测试示例
- en: 'Load tests are used to check how an application will behave once it is used
    for a determined number of concurrent users; the number of concurrent users is
    given for the number of users that the application will have in production. You
    should always define a performance test suite that tests the whole application
    with tools such as the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 负载测试用于检查应用程序在一定数量的并发用户使用后的行为；并发用户的数量是指应用程序在生产中将具有的用户数量。您应该始终定义一个性能测试套件，使用以下工具测试整个应用程序：
- en: Neoload
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neoload
- en: Apache JMeter
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache JMeter
- en: Load Runner
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Load Runner
- en: Load UI
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载UI
- en: Rational Performance Tester
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rational Performance Tester
- en: We need to define a load test and profile as part of a pipeline of our applications,
    and run it before and after we work on performance improvement. We are going to
    create an example using Neoload to review these key recommendations in our application
    example.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义一个负载测试和配置文件作为我们应用程序的流水线的一部分，并在我们进行性能改进之前和之后运行它。我们将使用Neoload创建一个示例，以审查我们应用程序示例中的这些关键建议。
- en: 'First, we need to define a scenario to run a load test; in our case, we are
    going to take the banking application from [Chapter 12](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml),
    *Monitoring*, that is ready to use, and define a functional common scenario such
    as the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义一个场景来运行负载测试；在我们的情况下，我们将使用[第12章](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml)中的银行应用程序，*监控*，它已经准备好使用，并定义一个功能常见的场景，如下所示：
- en: 'The user is going to log in using the credentials: `rene`/`rene`.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将使用以下凭据登录：`rene`/`rene`。
- en: Then, the user will click on the menu notifications.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，用户将点击菜单通知。
- en: And finally, the user is going to click on the logout link.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，用户将点击注销链接。
- en: 'First, we are going to download Neoload from the following URL: [https://www.neotys.com/download.](https://www.neotys.com/download)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从以下URL下载Neoload：[https://www.neotys.com/download.](https://www.neotys.com/download)
- en: Neoload gives us a trial version where we can simulate up to 50 virtual concurrent
    users.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Neoload为我们提供了一个试用版本，我们可以模拟最多50个虚拟并发用户。
- en: 'After installing Neoload, we are going to open the application and create a
    project:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Neoload后，我们将打开应用程序并创建一个项目：
- en: '![](img/e59455fe-eb5c-40d5-b289-2182c806683e.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e59455fe-eb5c-40d5-b289-2182c806683e.png)'
- en: 'Then, we are going to click on Start Recording, and choose the browser that
    we are going to use to record our application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将点击开始录制，并选择我们将用于记录应用程序的浏览器：
- en: '![](img/fa10d02d-71cf-42dd-ba4a-32b9237dd5c8.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa10d02d-71cf-42dd-ba4a-32b9237dd5c8.png)'
- en: 'Then, in the browser, we are going to enter the URL of our application: `http://localhost:8080/login`,
    and navigate as a user to list the notification set of our customer. So the process
    is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在浏览器中，我们将输入我们应用程序的URL：`http://localhost:8080/login`，并作为用户导航到我们客户的通知集。因此，流程如下：
- en: Log in
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录
- en: Click on the menu notifications
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击菜单通知
- en: Click on logout
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击注销
- en: 'Select the host that we are recording, which in our case is localhost, and
    follow the next instructions until the end. Finally, we are going click on the
    Stop recording button and we should see in the left-hand menu that our actions
    are recorded:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 选择我们正在记录的主机，即本地主机，并按照下一步的说明进行操作，直到结束。最后，我们将点击停止录制按钮，并且我们应该在左侧菜单中看到我们的操作已记录：
- en: '![](img/91ed11b1-338d-45f3-82d7-8e731a976a2b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91ed11b1-338d-45f3-82d7-8e731a976a2b.png)'
- en: 'We are then going to run the recorded scenario by clicking on the check icon
    that can be seen hovering over the user icon:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将通过点击悬停在用户图标上方的复选图标来运行记录的场景：
- en: '![](img/718b6a6a-f4f9-410b-ab1e-0f80fed17c72.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/718b6a6a-f4f9-410b-ab1e-0f80fed17c72.png)'
- en: 'We should see that our scenario runs without errors, simulating one concurrent
    user, as in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到我们的场景在没有错误的情况下运行，模拟一个并发用户，如下截图所示：
- en: '![](img/cb15e5b7-4176-49e9-8745-62e657e0cd3f.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb15e5b7-4176-49e9-8745-62e657e0cd3f.png)'
- en: 'Now, let''s generate load testing, creating a population (casual user simulated
    scenario):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们生成负载测试，创建一个人口（模拟用户场景）：
- en: '![](img/c427bd33-70c5-4ab1-8234-d85a170faedd.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c427bd33-70c5-4ab1-8234-d85a170faedd.png)'
- en: 'Then, click on the Runtime icon to run the load test with 10 concurrent users
    for 2 minutes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击运行时图标，以使用10个并发用户在2分钟内运行负载测试：
- en: '![](img/ffe1f2a6-dbb2-4414-8004-2f9ec8ffbc55.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffe1f2a6-dbb2-4414-8004-2f9ec8ffbc55.png)'
- en: 'And then, click on the play icon:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击播放图标：
- en: '![](img/05c9f54d-0d3c-4142-895f-2e78e442a949.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05c9f54d-0d3c-4142-895f-2e78e442a949.png)'
- en: 'Finally, after the test finishes, we can check the results; denoting that we
    visited 670 pages and made 890 requests during the load test time, using 20 concurrent
    users:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在测试完成后，我们可以检查结果；在负载测试期间，我们访问了670页并发出了890个请求，使用20个并发用户：
- en: '![](img/953bb0e2-b9a5-4bac-b8f6-cb429f645b20.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/953bb0e2-b9a5-4bac-b8f6-cb429f645b20.png)'
- en: 'On the other hand, during the load test using VisualVM, we can check the performance
    of our application and see how it performs at checking the threads, as demonstrated
    in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在使用VisualVM进行负载测试时，我们可以检查应用程序的性能，并查看它在检查线程时的表现，如下截图所示：
- en: '![](img/16bfcc40-b147-4764-858a-1cf091d3e859.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16bfcc40-b147-4764-858a-1cf091d3e859.png)'
- en: We are going to find that the JVM, memory, and threads, with a simulation of
    virtual users, look different than just navigating on the application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发现，使用虚拟用户模拟时，JVM、内存和线程看起来与在应用程序上导航时有所不同。
- en: It's worth monitoring all the resources of an application when you run load
    tests to identify where an issue can rise.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行负载测试时，监控应用程序的所有资源是值得的，以确定问题可能出现的位置。
- en: Finally, we have learned that using a profiler tool or an APM, in addition to
    a load test tool, can guarantee that our applications and system work on performance
    improvements before we launch our code to production environments.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经学会了使用性能分析工具或APM，除了负载测试工具，可以确保我们的应用程序和系统在将代码发布到生产环境之前进行性能改进。
- en: After adding code to improve the performance of an application, it is always
    a good idea to run performance tests in order to check how well the changes have
    been implemented.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加代码以改进应用程序性能后，总是一个好主意运行性能测试，以检查更改的实施情况。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we explained the meaning of scalability, availability,
    and performance. We also learned how to apply some techniques and tools to avoid
    dealing with performance issues in production and, consequently, how we can improve
    the performance of our applications to achieve a better response times.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了可伸缩性、可用性和性能的含义。我们还学会了如何应用一些技术和工具，以避免在生产中处理性能问题，因此，我们如何改进我们的应用程序以实现更好的响应时间。
