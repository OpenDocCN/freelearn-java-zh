- en: Chapter 12. Using Aspect-oriented Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。使用面向方面的编程
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Creating a Spring AOP aspect class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Spring AOP 方面类
- en: Measuring the execution time of methods using an around advice
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用环绕通知测量方法的执行时间
- en: Logging method arguments using a before advice
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用前置通知记录方法参数
- en: Logging methods' return values using an after-returning advice
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后置返回通知记录方法的返回值
- en: Logging exceptions using an after-throwing advice
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后置抛出通知记录异常
- en: Using an after advice to clean up resources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后置通知来清理资源
- en: Making a class implement an interface at runtime using an introduction
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用引入在运行时使一个类实现一个接口
- en: Setting the execution order of the aspects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置方面的执行顺序
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Aspect-oriented programming** (**AOP**) is about inserting and executing,
    at runtime, extra pieces of code at various points of the normal execution flow
    of a program. In AOP terminology, these pieces of code are methods that are called
    **advices** and the classes containing them are called **aspects**. AOP is complementary
    to object-oriented programming.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向方面的编程**（**AOP**）是关于在程序正常执行流程的各个点上，在运行时插入和执行额外的代码片段。在 AOP 术语中，这些代码片段是被称为
    **建议** 的方法，而包含它们的类被称为 **方面**。AOP 是面向对象编程的补充。'
- en: This chapter is about the Spring AOP framework, which enables us to execute
    advices before and after methods of Spring beans (controller methods, service
    methods, and so on). For more extensive AOP functionality, **AspectJ** is the
    reference Java AOP framework and gets integrated seamlessly with Spring. However,
    it's more complex to use and requires a customized compilation process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍 Spring AOP 框架，它使我们能够在 Spring Beans（控制器方法、服务方法等）的方法之前和之后执行建议。对于更广泛的 AOP
    功能，**AspectJ** 是参考 Java AOP 框架，并且可以无缝集成到 Spring 中。然而，它更复杂，需要定制的编译过程。
- en: In the first recipe, we will create an aspect class and configure Spring to
    use it. We will use this aspect class in the following recipes, where we will
    go through the different types of advice offered by Spring AOP, using practical
    use cases.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个食谱中，我们将创建一个方面类并配置 Spring 使用它。我们将在后续的食谱中使用这个方面类，我们将通过实际用例来介绍 Spring AOP 提供的不同类型的建议。
- en: Creating a Spring AOP aspect class
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Spring AOP 方面类
- en: In this recipe, we will create an aspect class and configure Spring to use it.
    We will use this aspect class and its configuration code in the following recipes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个方面类并配置 Spring 使用它。我们将在后续的食谱中使用这个方面类及其配置代码。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps for creating an aspect class:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建方面类的步骤如下：
- en: 'Add the the AspectJ Weaver Maven dependency in `pom.xml`:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 AspectJ Weaver Maven 依赖：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a Java package for the aspects of your application. For example, `com.springcookbook.aspect`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的应用程序的方面创建一个 Java 包。例如，`com.springcookbook.aspect`。
- en: 'In your aspects package, create a class annotated with `@Component` and `@Aspect`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的方面包中，创建一个带有 `@Component` 和 `@Aspect` 注解的类：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the Spring configuration, add `@EnableAspectJAutoProxy` and your aspects
    package to `@ComponentScan`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spring 配置中，添加 `@EnableAspectJAutoProxy` 和你的方面包到 `@ComponentScan`：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The AspectJ Weaver Maven dependency provides aspect annotations, so we can use
    regular Java classes to define aspects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: AspectJ Weaver Maven 依赖提供了方面注解，因此我们可以使用常规的 Java 类来定义方面。
- en: In the aspect class, `@Aspect` declares the class as an aspect. `@Component`
    allows it to be detected by Spring and instantiated as a bean.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在方面类中，`@Aspect` 声明该类为方面。`@Component` 允许它被 Spring 检测并实例化为一个 Bean。
- en: In the Spring configuration, we included our aspect package in `@ComponentScan`,
    so the `@Component` classes in that package will be detected and instantiated
    as beans by Spring. `@EnableAspectJAutoProxy` in the Spring configuration will
    make Spring actually use the aspects and execute their advices.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring 配置中，我们将我们的方面包包含在 `@ComponentScan` 中，因此该包中的 `@Component` 类将被 Spring
    检测并实例化为 Beans。Spring 配置中的 `@EnableAspectJAutoProxy` 将使 Spring 实际上使用方面并执行它们的建议。
- en: Measuring the execution time of methods using an around advice
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用环绕通知测量方法的执行时间
- en: An **around advice** is the most powerful type of advice; it can completely
    replace the target method by some different code. In this recipe, we will use
    it only to execute some extra code before and after the target method. With the
    before code, we will get the current time. With the after code, we will get the
    current time again, and will compare it to the previous time to calculate the
    total time the target method took to execute. Our target methods will be the controller
    methods of the controller classes in the controller package.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**环绕advice**是advice中最强大的一种类型；它可以完全用不同的代码替换目标方法。在这个菜谱中，我们将只使用它来在目标方法前后执行一些额外的代码。使用前面的代码，我们将获取当前时间。使用后面的代码，我们将再次获取当前时间，并将其与之前的时间进行比较，以计算目标方法执行的总时间。我们的目标方法将是控制器包中控制器类的控制器方法。'
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the aspect class defined in the previous recipe, *Creating a Spring
    AOP aspect class*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在之前菜谱中定义的方面类，*创建Spring AOP方面类*。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps for measuring the execution time of controller methods:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是测量控制器方法执行时间的步骤：
- en: 'In the aspect class, create an advice method annotated with `@Around` and take
    `ProceedingJoinPoint` as an argument:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方面类中，创建一个带有`@Around`注解的advice方法，并将`ProceedingJoinPoint`作为参数：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In that advice method, measure the execution time of the target method:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个advice方法中，测量目标方法的执行时间：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Log that execution time preceded by the target method name:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标方法名称之前记录执行时间：
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Return the return value of the target method:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回目标方法的返回值：
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To test the advice, you can use a controller method that takes a long time
    on purpose:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试advice，你可以使用一个故意耗时的控制器方法：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Test whether it''s working. When going to `/user_list` in your browser, you
    should see this in your server log:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试它是否工作。当你在浏览器中访问`/user_list`时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `@Around` annotation preceding the advice method is a pointcut expression:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在advice方法之前的前置`@Around`注解是一个pointcut表达式：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A pointcut expression determines the target methods (the methods to which the
    advice will be applied). It works like a regular expression. Here, it matches
    all controller methods. In detail:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个pointcut表达式确定目标方法（advice将要应用的方法）。它就像一个正则表达式。在这里，它匹配所有控制器方法。具体来说：
- en: '`execution()` means we are targeting a method execution'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution()`表示我们正在针对方法执行'
- en: The first asterisk means *any return type*
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个星号表示*任何返回类型*
- en: The second asterisk means *any class* (from the `com.spring_cookbook.controllers`
    package)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个星号表示*任何类*（来自`com.spring_cookbook.controllers`包）
- en: The third asterisk means *any method*
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个星号表示*任何方法*
- en: '`(..)` means *any number of method arguments of any type*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(..)`表示*任何类型和数量的方法参数*'
- en: The `joinPoint.proceed()` instruction executes the target method. Skipping this
    will skip the execution of the target method. A **join point** is another AOP
    term. It's a moment in the execution flow of the program where an advice can be
    executed. With Spring AOP, a join point always designates a target method. To
    summarize, an advice method is applied at different join points, which are identified
    by a pointcut expression.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`joinPoint.proceed()`指令执行目标方法。跳过这个指令将跳过目标方法的执行。**连接点**是另一个AOP术语。它是在程序执行流程中可以执行advice的时刻。使用Spring
    AOP，连接点始终指定目标方法。为了总结，advice方法应用于不同的连接点，这些连接点由pointcut表达式识别。'
- en: 'We also use the `joinPoint` object to get the name of the current target method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用`joinPoint`对象来获取当前目标方法的名称：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Logging method arguments using a before advice
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用前置advice记录方法参数
- en: A **before advice** executes some extra code before the execution of the target
    method. In this recipe, we will log the arguments of the target method.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**前置advice**在目标方法执行之前执行一些额外的代码。在这个菜谱中，我们将记录目标方法的参数。'
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*创建Spring AOP方面类*菜谱中定义的方面类。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps for logging the methods'' arguments using a before advice:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用前置advice记录方法参数的步骤：
- en: 'In your aspect class, create an advice method annotated with `@Before` and
    take `JoinPoint` as an argument:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的方面类中，创建一个带有`@Before`注解的advice方法，并将`JoinPoint`作为参数：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In that method, get the list of arguments of the target method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个方法中，获取目标方法的参数列表：
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Log the list of arguments preceded by the target method name:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标方法名称之前记录参数列表：
- en: '[PRE13]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Test the advice using a controller method with arguments:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用带有参数的控制器方法测试advice：
- en: '[PRE14]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see this in your server log:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否正常工作。当你在浏览器中访问`/user_list`时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE15]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `@Before` annotation preceding the advice method is a pointcut expression:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 建议方法之前的`@Before`注解是一个切入点表达式：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 参考更多细节，请参阅*使用环绕通知测量方法执行时间*配方。
- en: The `joinPoint.getArgs()` instruction retrieves the argument's values of the
    target method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`joinPoint.getArgs()`指令检索目标方法的参数值。'
- en: Logging methods' return values using an after-returning advice
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用after-returning advice记录方法的返回值
- en: An **after-returning advice** executes some extra code after the successful
    execution of the target method. In this recipe, we will log the return value of
    the target method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**after-returning advice**在目标方法成功执行之后执行一些额外的代码。在这个配方中，我们将记录目标方法的返回值。'
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*创建Spring AOP方面类*配方中定义的方面类。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps for logging the return value of methods using an after-returning
    advice:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用after-returning advice记录方法返回值的步骤：
- en: 'In your aspect class, create an advice method annotated with `@AfterReturning`.
    Make it take a `JoinPoint` object and the return value of the target method as
    arguments:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的方面类中，创建一个带有`@AfterReturning`注解的建议方法。让它接受一个`JoinPoint`对象和目标方法的返回值作为参数：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In that advice method, log the return value preceded by the target method name:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个建议方法中，记录目标方法名称之前返回的值：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Test the advice using a controller method that returns a value:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用返回值的控制器方法测试这个建议：
- en: '[PRE19]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see the following in your server log:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否正常工作。当你在浏览器中访问`/user_list`时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE20]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `@AfterReturning` annotation preceding the advice method is a pointcut
    expression:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 建议方法之前的`@AfterReturning`注解是一个切入点表达式：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details. The `returning` attribute is the name of the argument
    of the advice method to be used for the return value.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 参考更多细节，请参阅*使用环绕通知测量方法执行时间*配方。`returning`属性是用于建议方法的返回值的参数名称。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if an exception is thrown during the execution of the target method,
    the after-returning advice won't be executed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果在目标方法执行过程中抛出异常，则不会执行after-returning advice。
- en: Logging exceptions using an after-throwing advice
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用after-throwing advice记录异常
- en: An **after-throwing advice** executes some extra code when an exception is thrown
    during the execution of the target method. In this recipe, we will just log the
    exception.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**after-throwing advice**在目标方法执行过程中抛出异常时执行一些额外的代码。在这个配方中，我们只记录异常。'
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*创建Spring AOP方面类*配方中定义的方面类。
- en: How to do it…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps for logging an exception using an after-throwing advice:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用after-throwing advice记录异常的步骤：
- en: 'In your aspect class, create an advice method annotated with `@AfterThrowing`.
    Make it take a `JoinPoint` object and an `Exception` object as arguments:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的方面类中，创建一个带有`@AfterThrowing`注解的建议方法。让它接受一个`JoinPoint`对象和一个`Exception`对象作为参数：
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In that advice method, log the exception preceded by the target method name:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个建议方法中，记录目标方法名称之前记录的异常：
- en: '[PRE23]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Test the advice using a controller method throwing an exception:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用抛出异常的控制器方法测试这个建议：
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see the following in your server log:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否正常工作。当你在浏览器中访问`/user_list`时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE25]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `@AfterThrowing` annotation preceding the advice method is a pointcut expression:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 建议方法之前的`@AfterThrowing`注解是一个切入点表达式：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details. The `throwing` attribute is the name of the argument
    of the advice method to be used for the exception object thrown by the target
    method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 参考更多细节，请参阅*使用环绕通知测量方法执行时间*配方。`throwing`属性是用于目标方法抛出的异常对象的建议方法的参数名称。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if no exception is thrown during the execution of the target method,
    the after-throwing advice won't be executed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果在目标方法的执行过程中没有抛出异常，则不会执行 after-throwing 通知。
- en: Using an after advice to clean up resources
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用后置通知来清理资源
- en: An **after advice** executes some extra code after the execution of the target
    method, even if an exception is thrown during its execution. Use this advice to
    clean up resources by removing a temporary file or closing a database connection.
    In this recipe, we will just log the target method name.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**后置通知**在目标方法执行之后执行一些额外的代码，即使在其执行过程中抛出了异常。使用此通知通过删除临时文件或关闭数据库连接来清理资源。在这个配方中，我们只是记录目标方法名称。'
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在 *创建一个Spring AOP方面类* 烹饪配方中定义的方面类。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Here are the steps for using an after advice:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用后置通知的步骤如下：
- en: 'In your aspect class, create an advice method annotated with `@After`. Make
    it take `JoinPoint` as an argument:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的方面类中，创建一个带有 `@After` 注解的通知方法。让它接受 `JoinPoint` 作为参数：
- en: '[PRE27]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In that advice method, log the target method name:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个通知方法中，记录目标方法名称：
- en: '[PRE28]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Test the advice using two controller methods: one executes normally and the
    other one throws an exception:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两个控制器方法测试通知：一个正常执行，另一个抛出异常：
- en: '[PRE29]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Check whether it''s working. When going to `/user_list` or `/user_list2` in
    your browser, you should see this in your server log:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查它是否正在工作。当你在浏览器中访问 `/user_list` 或 `/user_list2` 时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `@After` annotation preceding the advice method is a pointcut expression:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在通知方法之前的前置 `@After` 注解是一个切入点表达式：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Refer to the *Measuring the execution time of methods using an around advice*
    recipe for more details.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅 *使用环绕通知测量方法执行时间* 烹饪配方。
- en: Making a class implement an interface at runtime using an introduction
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用引入在运行时让一个类实现一个接口
- en: An **introduction** allows us to make a Java class (we will refer to it as the
    *target class*) implement an interface at runtime. With Spring AOP, introductions
    can be applied only to Spring beans (controllers, services, and so on). In this
    recipe, we will create an interface, its implementation, and make a Spring controller
    implement that interface at runtime using that implementation. To check whether
    it's working, we will also add a before advice to the controller method to execute
    a method from the interface implementation.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**引入**允许我们在运行时让一个Java类（我们将称之为 *目标类*）实现一个接口。使用Spring AOP，引入只能应用于Spring Bean（控制器、服务等等）。在这个配方中，我们将创建一个接口、它的实现，并使用这个实现让一个Spring控制器在运行时实现该接口。为了检查它是否工作，我们还将向控制器方法添加一个前置通知来执行接口实现中的方法。'
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the aspect class defined in the *Creating a Spring AOP aspect class*
    recipe.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在 *创建一个Spring AOP方面类* 烹饪配方中定义的方面类。
- en: How to do it…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Here are the steps for using an introduction:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用引入的步骤如下：
- en: 'Create the `Logging` interface:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Logging` 接口：
- en: '[PRE32]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create an implementation class for it:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为它创建一个实现类：
- en: '[PRE33]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In your aspect class, add a `Logging` attribute annotated with `@DeclareParents`.
    Add the implementation class to `@DeclareParents`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的方面类中，添加一个带有 `@DeclareParents` 注解的 `Logging` 属性。将实现类添加到 `@DeclareParents`：
- en: '[PRE34]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add an advice method annotated with `@Before`. Make it take a `Logging` object
    as an argument:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有 `@Before` 注解的通知方法。让它接受一个 `Logging` 对象作为参数：
- en: '[PRE35]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the advice method, use the `Logging` object:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在通知方法中，使用 `Logging` 对象：
- en: '[PRE36]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Test whether it''s working with a standard controller method:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用标准控制器方法测试它是否工作：
- en: '[PRE37]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Check whether it''s working. When going to `/user_list` in your browser, you
    should see the following in your server log:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查它是否正在工作。当你在浏览器中访问 `/user_list` 时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE38]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the aspect class, the `@DeclareParents` annotation preceding the Logging
    attribute is a pointcut expression:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在方面类中，`@DeclareParents` 注解之前的前置 `Logging` 属性是一个切入点表达式：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This pointcut expression and the `Logging` attribute define that:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个切入点表达式和 `Logging` 属性定义了以下内容：
- en: 'The introduction will be applied to all controller classes: `com.spring_cookbook.controllers.*+`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入将应用于所有控制器类：`com.spring_cookbook.controllers.*+`
- en: 'The introduction will make these controller classes implement the Logging interface:
    `public static Logging mixin;`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入将使这些控制器类实现 Logging 接口：`public static Logging mixin;`
- en: 'The introduction will make these controller classes use `LoggingConsole` as
    implementation of the Logging interface: `defaultImpl = LoggingConsole.class`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍将使这些控制器类使用`LoggingConsole`作为Logging接口的实现：`defaultImpl = LoggingConsole.class`
- en: 'The before advice works the same way as in the *Measuring the execution time
    of methods using an around advice* recipe. It only takes one extra condition:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用环绕建议测量方法执行时间*菜谱中，前置建议工作方式相同。它只需要一个额外的条件：
- en: '[PRE40]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This means that the advice will be applied only to objects that implement the
    Logging interface.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着建议将仅应用于实现Logging接口的对象。
- en: Setting the execution order of the aspects
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置方面的执行顺序
- en: When using several aspect classes, it can be necessary to set the order in which
    the aspects are executed. In this recipe, we will use two aspect classes with
    before advices targeting controller methods.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用多个方面类时，可能需要设置方面执行的顺序。在这个菜谱中，我们将使用两个带有针对控制器方法的前置建议的方面类。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the configuration from the *Creating a Spring AOP aspect class*
    recipe.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自*创建Spring AOP方面类*菜谱的配置。
- en: 'We will use these two aspect classes containing an advice, which logs some
    text when it''s executed:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用包含建议并执行时记录一些文本的两个方面类：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How to do it…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to set the execution order of the two aspect classes:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 设置两个方面类执行顺序的步骤如下：
- en: 'Add `@Order` with a number as parameter to the first aspect:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首个方面添加带有数字参数的`@Order`：
- en: '[PRE42]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add `@Order` with another number as parameter to the second aspect:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个方面添加带有另一个数字参数的`@Order`：
- en: '[PRE43]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Test whether it''s working. When going to `/user_list` in your browser, you
    should see this in your server log:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否正常工作。当你在浏览器中访问`/user_list`时，你应该在你的服务器日志中看到以下内容：
- en: '[PRE44]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Switch the `@Order` numbers and check whether the execution order is changed:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交换`@Order`数字并检查执行顺序是否改变：
- en: '[PRE45]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The aspects are executed in the ascending order set by `@Order`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 方面是按照`@Order`设置的升序执行的。
- en: There's more…
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: It's not possible to set an order between advice methods of the same aspect
    class. If it becomes necessary, create new aspect classes for those advices.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一方面的类中，无法设置建议方法的顺序。如果变得有必要，为这些建议创建新的方面类。
