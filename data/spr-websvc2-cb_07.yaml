- en: Chapter 7. Securing SOAP Web-Services using XWSS Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用XWSS库保护SOAP Web服务
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Authenticating a Web-Service call using the username token with a plain/digested
    password
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户名令牌和明文/摘要密码对Web服务调用进行身份验证
- en: Authenticating a Web-Service call using Spring security to authenticate a username
    token with a plain/digested password
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring安全对Web服务调用进行身份验证，以验证用户名令牌和明文/摘要密码
- en: Authenticating a Web-Service call using the JAAS service to authenticate a username
    token
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JAAS服务对Web服务调用进行身份验证，以验证用户名令牌
- en: Preparing pair and symmetric keystores
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备成对和对称密钥库
- en: Securing SOAP messages using a digital signature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数字签名保护SOAP消息
- en: Authenticating a Web-Service call using X509 certificate
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用X509证书对Web服务调用进行身份验证
- en: Encrypting/decrypting SOAP messages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密/解密SOAP消息
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: WS-Security (WSS), published by OASIS, is an extension to SOAP to provide security-standard
    features to a Web-Service. XML and Web-Services Security (XWSS) is SUN's implementation
    of WSS, which is included in the Java Web-Services Developer Pack (WSDP).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WS-Security（WSS）由OASIS发布，是SOAP的扩展，提供Web服务的安全标准功能。 XML和Web服务安全（XWSS）是SUN对WSS的实现，包含在Java
    Web服务开发人员包（WSDP）中。
- en: XWSS is a form of message-level security in which security data is included
    within a SOAP message/attachment and allows security information to be transmitted
    with messages or attachments. For instance, while signing a message, a security
    token will be added to the message that is generated from the encryption of a
    part of the message for a specific receiver. When a sender sends this message,
    this token remains in the encrypted form and travels along with the message. When
    a receiver gets this message, the token can be decrypted only if he/she has the
    specific key for decryption. So if within transmission of this message, any non-authorized
    receiver (who doesn't have the specific key) gets this message, he/she cannot
    decrypt the token (this token will be used to check if the original message is
    altered). The originality of the message verification can be done by the regeneration
    of the token at the receiver's end (from the incoming message) and by comparing
    it with the incoming token that came along with the message.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: XWSS是一种消息级安全，其中安全数据包含在SOAP消息/附件中，并允许安全信息随消息或附件一起传输。例如，在签署消息时，将从消息的部分加密生成的安全令牌添加到消息中，以供特定接收者使用。当发送者发送此消息时，此令牌保持在加密形式并随消息一起传输。当接收者收到此消息时，只有具有特定解密密钥的人才能解密令牌。因此，如果在传输此消息期间，任何未经授权的接收者（没有特定密钥的人）收到此消息，他/她无法解密令牌（此令牌将用于检查原始消息是否已更改）。可以通过在接收端（从传入消息中）重新生成令牌并将其与随消息一起传入的令牌进行比较来进行消息的原始性验证。
- en: An `EndpointInterceptor`, as the name suggests, intercepts the request and performs
    some action prior to invoking the endpoint. `EndpointInterceptors` are called
    before calling the appropriate endpoint to perform several processing aspects
    such as logging, validating, security, and so on. In earlier chapters, `SoapEnvelopeLoggingInterceptor,
    PayloadLoggingInterceptor`, and `PayloadValidatingInterceptor` were explained
    for logging and validation purposes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`EndpointInterceptor`，顾名思义，拦截请求并在调用端点之前执行某些操作。在之前的章节中，已经解释了`SoapEnvelopeLoggingInterceptor，PayloadLoggingInterceptor`和`PayloadValidatingInterceptor`用于记录和验证目的。'
- en: In this chapter, and the next one, `SecurityInterceptors` will be explained.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和下一章中，将解释`SecurityInterceptors`。
- en: 'Spring-WS `XwsSecurityInterceptor` is an `EndpointInterceptor` for performing
    security operations on a request message before calling the endpoint. This interceptor,
    which is based on XWSS, requires a policy configuration file to operate. Here
    is a sample of the policy configuration file that can include several security
    requirements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Spring-WS `XwsSecurityInterceptor`是用于在调用端点之前对请求消息执行安全操作的`EndpointInterceptor`。这个基于XWSS的拦截器需要一个策略配置文件来运行。这是一个可以包含多个安全要求的策略配置文件的示例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The security interceptor uses this configuration to find what security information
    to expect from incoming SOAP messages (on the receiver side), and what information
    is to be added to outgoing messages (on the sender side).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安全拦截器使用此配置来查找接收到的SOAP消息中期望的安全信息（在接收方），以及要添加到传出消息中的信息（在发送方）。
- en: 'In addition, this interceptor needs one or more `callBackHandlers` for security
    operations such as authentication, signing outgoing messages, verifying the signature
    of incoming messages, decryption, and encryption. These `callBackHandlers` need
    to be registered in the application context file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，此拦截器需要一个或多个`callBackHandlers`用于安全操作，如身份验证，签署传出消息，验证传入消息的签名，解密和加密。这些`callBackHandlers`需要在应用程序上下文文件中注册：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This chapter presents how to apply Spring-WS XWSS to different security operations.
    In every recipe's project, the client applies a security operation by adding or
    modifying data in the outgoing message and sends it to the server. The server
    receives the message, extracts security information, and proceeds with the message
    if the security information matches the expected requirement; otherwise it returns
    a *fault* message back to the client.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何将Spring-WS XWSS应用于不同的安全操作。在每个配方的项目中，客户端通过在传出消息中添加或修改数据来应用安全操作，并将其发送到服务器。服务器接收消息，提取安全信息，并根据安全信息是否符合预期要求继续处理消息；否则，将故障消息返回给客户端。
- en: For simplification, most of the recipes in this chapter use the projects used
    in the *Integration testing using Spring-JUnit support* recipe, discussed in [Chapter
    3](ch03.html "Chapter 3. Testing and Monitoring Web-Services"), *Testing and Monitoring
    Web Services*, to set up a server and send and receive messages by client. However,
    in the last recipe, projects from the *Creating Web-Service client for WS-Addressing
    endpoint* recipe, discussed in [Chapter 2](ch02.html "Chapter 2. Building Clients
    for SOAP Web-Services"), *Building Clients for SOAP Web Services*, are used for
    the server and client side.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为简化起见，本章中的大多数示例使用了在[第3章](ch03.html "第3章。测试和监控Web服务")中讨论的*使用Spring-JUnit支持进行集成测试*示例中使用的项目，用于设置服务器并由客户端发送和接收消息。但是，在最后一个示例中，使用了来自*为WS-Addressing端点创建Web服务客户端*示例中讨论的[第2章](ch02.html
    "第2章。构建SOAP Web服务的客户端")中的项目，用于服务器和客户端。
- en: Authenticating a Web-Service call using plain/digested username token
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用明文/摘要用户名令牌进行Web服务调用的身份验证
- en: Authentication simply means checking whether callers of a service are who they
    claim to be. One way of checking the authentication of a caller is to check the
    password.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证简单地意味着检查服务的调用者是否是他们声称的人。检查调用者的身份验证的一种方式是检查密码。
- en: XWSS provides APIs to get the usernames and passwords from incoming SOAP messages
    and compare them with what is defined in the configuration file. This goal will
    be accomplished by defining policy files for the sender and the receiver of the
    messages that on the sender side, client includes a username token in outgoing
    messages, and on the receiver side, the server expects to receive this username
    token along with the incoming messages for authentication.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: XWSS提供API来从传入的SOAP消息中获取用户名和密码，并将它们与配置文件中定义的内容进行比较。通过为消息的发送方和接收方定义策略文件来实现此目标，发送方在传出消息中包含用户名令牌，而接收方在接收消息时期望收到此用户名令牌以进行身份验证。
- en: Transmitting a plain password makes a SOAP message unsecured. XWSS provides
    the configuration setting in the policy file to include a digest of passwords
    (a hash generated from the password text by a specific algorithm) inside the sender
    message. On the server side, the server compares the digested password included
    in the incoming message with the digested password calculated from what is set
    in the configuration file (see the property users within the `callbackHandler`
    bean inside `spring-ws-servlet.xml)` using the same algorithms on the sender side.
    This recipe shows how to authenticate a Web-Service call using the username token
    with a plain/digest password. This recipe contains two cases. In the first case,
    the password will be transmitted in plain text format. However, in the second
    case, by changing the policy file configuration, the password will be transmitted
    in the digest format.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 传输明文密码会使SOAP消息不安全。 XWSS提供了在策略文件中配置设置以在发送方消息中包含密码的摘要（由特定算法生成的密码文本的哈希）的配置。在服务器端，服务器将传入消息中包含的摘要密码与从配置文件中设置的摘要密码进行比较（请参见`spring-ws-servlet.xml`中`callbackHandler`
    bean内的属性用户）使用发送方端上的相同算法。本教程展示了如何使用用户名令牌和明文/摘要密码对Web服务调用进行身份验证。本教程包含两种情况。在第一种情况下，密码将以明文格式传输。但是，在第二种情况下，通过更改策略文件配置，密码将以摘要格式传输。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-7.1` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，项目名称为`LiveRestaurant_R-7.1`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-7.1-Client` (for the client-side Web-Service) has the following
    Maven dependencies:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-7.1-Client`（用于客户端Web服务）具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps implement authentication using a username token with a
    plain password:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤实现使用用户名令牌和明文密码进行身份验证：
- en: Register the security interceptor (`XwsSecurityInterceptor`) and `callbackHandler`
    (`SimplePasswordValidationCallbackHandler`) in the application context file (`applicationContext.xml`)
    of `LiveRestaurant_R-7.1-Client`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LiveRestaurant_R-7.1-Client`的应用程序上下文文件（`applicationContext.xml`）中注册安全拦截器（`XwsSecurityInterceptor`）和`callbackHandler`（`SimplePasswordValidationCallbackHandler`）。
- en: Add the security policy file (`securityPolicy.xml`) for `LiveRestaurant_R-7.1-Client`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`LiveRestaurant_R-7.1-Client`添加安全策略文件（`securityPolicy.xml`）。
- en: Register the security interceptor (`XwsSecurityInterceptor`) and `callbackHandler`
    (`SimplePasswordValidationCallbackHandler`) in the application context file (`spring-ws-servlet.xml`)
    of `LiveRestaurant_R-7.1`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LiveRestaurant_R-7.1`的应用程序上下文文件（`spring-ws-servlet.xml`）中注册安全拦截器（`XwsSecurityInterceptor`）和`callbackHandler`（`SimplePasswordValidationCallbackHandler`）。
- en: Add the security policy file (`securityPolicy.xml`) for `LiveRestaurant_R-7.1`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`LiveRestaurant_R-7.1`添加安全策略文件（`securityPolicy.xml`）。
- en: Run the following command from `Liverestaurant_R-7.1:`
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.1`运行以下命令：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the following command from `Liverestaurant_R-7.1-Client:`
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.1-Client`运行以下命令：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the client-side output (note the password''s tag `wsse:Password
    ...#PasswordText`) within the underlined section:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（请注意下划线部分中密码标签`wsse:Password ...#PasswordText`）：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following steps implement authentication using the username token with
    the digest password:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤实现使用用户名令牌和摘要密码进行身份验证：
- en: Modify the security policy file (`securityPolicy.xml`) of `Liverestaurant_R-7.1`
    to get the digest password from the incoming message.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Liverestaurant_R-7.1`的安全策略文件（`securityPolicy.xml`），以从传入消息中获取摘要密码。
- en: Modify the security policy file (`securityPolicy.xml`) of `Liverestaurant_R-7.1-Client`
    to send the digest password.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `Liverestaurant_R-7.1-Client` 的安全策略文件（`securityPolicy.xml`）以发送摘要密码。
- en: Run the following command from `Liverestaurant_R-7.1:`
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Liverestaurant_R-7.1` 运行以下命令：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the following command from `Liverestaurant_R-7.1-Client:`
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Liverestaurant_R-7.1-Client` 运行以下命令：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is the client-side output (note the password''s tag wsse:Password
    ...#PasswordDigest) within the underlined section:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（请注意密码标签 wsse:Password ...#PasswordDigest）在下划线部分内：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `Liverestaurant_R-7.1` project is a server-side Web-Service that requires
    its client to send a message along with the username token and password. The `Liverestaurant_R-7.1-Client`
    project is a client-side test project that sends a message to the server along
    with the username token and password.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Liverestaurant_R-7.1` 项目是一个服务器端 Web 服务，需要其客户端发送带有用户名令牌和密码的消息。`Liverestaurant_R-7.1-Client`
    项目是一个客户端测试项目，向服务器发送带有用户名令牌和密码的消息。'
- en: 'On the server side, `XwsSecurityInterceptor` forces the server to apply the
    policy inside `securityPolicy.xml` for all incoming messages and uses `SimplePasswordValidationCallbackHandler`
    to compare incoming messages username/password with includes username/password
    in the server configuration file (see the property users within the `callbackHandler`
    bean):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，`XwsSecurityInterceptor` 强制服务器对所有传入消息应用 `securityPolicy.xml` 中的策略，并使用
    `SimplePasswordValidationCallbackHandler` 来比较传入消息的用户名/密码与服务器配置文件中包含的用户名/密码（请参阅
    `callbackHandler` bean 中的属性 users）：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `securityPolicy.xml` file,`<xwss:RequireUsernameToken passwordDigestRequired="false"
    nonceRequired="true"/>` requires that the incoming messages have username tokens
    with non-encrypted passwords. `useNonce="true`" indicates that each incoming message
    will have a random number that is not equal to the previous message:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `securityPolicy.xml` 文件中，`<xwss:RequireUsernameToken passwordDigestRequired="false"
    nonceRequired="true"/>` 要求传入消息具有非加密密码的用户名令牌。`useNonce="true`" 表示每个传入消息都将具有一个与上一条消息不相等的随机数：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On the client side, `XwsSecurityInterceptor` forces the client to apply the
    policy inside `securityPolicy.xml` for all outgoing messages:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，`XwsSecurityInterceptor` 强制客户端对所有传出消息应用 `securityPolicy.xml` 中的策略：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `securityPolicy.xml` file,`<xwss:UsernameToken name="clinetUser" password="pass"
    digestPassword="false" useNonce="true"/>` includes the username token with the
    password for all outgoing messages:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `securityPolicy.xml` 文件中，`<xwss:UsernameToken name="clinetUser" password="pass"
    digestPassword="false" useNonce="true"/>` 包括所有传出消息的带有密码的用户名令牌：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `useNonce="true`" indicates that each request will be sent out with a
    new random number for each message (`Nonce` helps to protect against hijacking
    of the username token).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`useNonce="true`" 表示每个请求将随着每条消息发送一个新的随机数（`Nonce` 有助于防止用户名令牌被劫持）。
- en: 'In the case of authentication using a username token with a plain password,
    since `digestPassword="false`" is in both the client- and server-side policy files,
    you see in the output result that the message sent by the client has a username
    and a plain text password included in the username token:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用带有明文密码的用户名令牌进行身份验证的情况下，由于在客户端和服务器端策略文件中都有 `digestPassword="false`"，因此在输出结果中可以看到客户端发送的消息中包含用户名和明文密码：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'However, in the second case of authenticating using the digest username token
    with the digest password, since `digestPassword="true`" is in both the client-
    and server-side policy files, the digest of the password is included in the username
    token:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在使用摘要用户名令牌和摘要密码进行身份验证的第二种情况中，由于在客户端和服务器端策略文件中都有 `digestPassword="true`"，密码的摘要包含在用户名令牌中：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this case, the server compares the incoming SOAP message digest password
    with the calculated digested password from inside `spring-ws-servlet.xml`. In
    this way, communication will be more secure by comparison with the first case
    in which the password was transmitted in plain text (the plain text password could
    be easily extracted from the SOAP messages. However, using an SSL connection can
    secure such a communication).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，服务器将传入的 SOAP 消息摘要密码与 `spring-ws-servlet.xml` 中计算的摘要密码进行比较。通过这种方式，与密码以明文传输的第一种情况相比，通信将更加安全（明文密码可以轻松从
    SOAP 消息中提取。但是，使用 SSL 连接可以保护此类通信）。
- en: See also...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: The recipes *Authenticating a Web-Service call using Spring security to authenticate
    a username token with plain/digested password, Authenticating a Web-Service call
    using JAAS service to authenticate a username token*, and *Authenticating a Web-Service
    call using X509 certificate*, discussed in this chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的配方 *使用 Spring 安全验证 Web 服务调用以验证带有明文/摘要密码的用户名令牌，使用 JAAS 服务验证用户名令牌的 Web 服务调用*
    和 *使用 X509 证书验证 Web 服务调用*。
- en: Authenticating a Web-Service call using Spring security to authenticate a username
    token with a plain/digested password
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring 安全验证 Web 服务调用以验证带有明文/摘要密码的用户名令牌
- en: Here we make use of the same authentication method used in the first recipe.
    The only difference here is that the Spring Security framework is used for authentication.
    Since the Spring Security framework is beyond the scope of this book, it is not
    described here. However, you can read more about it in the Spring Security reference
    documentation ([http://www.springsource.org/security](http://www.springsource.org/security)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了第一个配方中使用的相同身份验证方法。唯一的区别是这里使用了 Spring Security 框架进行身份验证。由于 Spring Security
    框架超出了本书的范围，因此这里没有进行描述。但是，您可以在 Spring Security 参考文档中阅读更多相关信息（[http://www.springsource.org/security](http://www.springsource.org/security)）。
- en: Same as the first recipe of this chapter, this recipe also contains two cases.
    In the first case, the password will be transmitted in plain text format. In the
    second case, by changing the policy file's configuration, the password will be
    transmitted in digest format.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章的第一个配方相同，这个配方也包含两种情况。在第一种情况下，密码将以明文格式传输。在第二种情况下，通过更改策略文件的配置，密码将以摘要格式传输。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-7.2` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-7.2`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-7.2-Client` (for the client-side Web-Service) has the following
    Maven dependencies:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-7.2-Client`（用于客户端Web服务）具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, all the steps are the same as in the previous recipe, *Authenticating
    a Web-Service call using username token with plain/digested password*, except
    the server-side application context file (`spring-ws.servlet.xml`) callback handler
    changes and uses the DAO layer to fetch data:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，所有步骤与前一个配方*使用用户名令牌对Web服务调用进行身份验证*中的步骤相同，只是服务器端应用程序上下文文件（`spring-ws.servlet.xml`）回调处理程序更改并使用DAO层来获取数据：
- en: 'The following steps implement authentication of a Web-Service call using Spring
    Security to authenticate a username token with a plain password:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤实现了使用Spring Security对带有明文密码的用户名令牌进行身份验证的Web服务调用的身份验证：
- en: Register the security interceptor (`XwsSecurityInterceptor`) and `callbackHandler`
    (`SpringPlainTextPasswordValidationCallbackHandler`) in the application context
    file (`spring-ws-servlet.xml`) of `LiveRestaurant_R-7.2`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LiveRestaurant_R-7.2`的应用程序上下文文件（`spring-ws-servlet.xml`）中注册安全拦截器（`XwsSecurityInterceptor`）和`callbackHandler`（`SpringPlainTextPasswordValidationCallbackHandler`）。
- en: Add the DAO layer classes to fetch data.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加DAO层类以获取数据。
- en: Run the following command from `Liverestaurant_R-7.2:`
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.2`运行以下命令：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the following command from `Liverestaurant_R-7.2-Client:`
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.2-Client`运行以下命令：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the client-side output:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following steps implement authentication of a Web-Service call using Spring
    Security to authenticate a digested username token:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤实现了使用Spring Security对摘要用户名令牌进行身份验证的Web服务调用的身份验证：
- en: Modify `springSecurityHandler` to `SpringDigestPasswordValidationCallbackHandler`
    in the server application context file (`spring-ws-servlet.xml`).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器应用程序上下文文件（`spring-ws-servlet.xml`）中将`springSecurityHandler`修改为`SpringDigestPasswordValidationCallbackHandler`。
- en: Modify the security policy file (`securityPolicy.xml`) in both the server side
    and client side to digest the password.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改安全策略文件（`securityPolicy.xml`）在服务器端和客户端都使用摘要密码。
- en: Run the following command from `Liverestaurant_R-7.2:`
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.2`运行以下命令：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run the following command from `Liverestaurant_R-7.2-Client:`
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.2-Client`运行以下命令：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is the client-side output:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `Liverestaurant_R-7.2` project, every aspect of security for the client
    and server is almost the same as `Liverestaurant_R-7.1` that we made use of in
    the recipe *Authenticating a Web-Service call using username with plain/digested
    password token*, except for validating the user on the server side. A Spring Security
    class is responsible for validating the user and password by comparison with the
    incoming message's username/password with fetched data from a DAO layer (instead
    of hardcoding the username/password in `spring-ws-servlet.xml)`. In addition,
    other data (such as `permissions, isAccountBlocked, isAccountExpired`, and so
    on) related to the successfully authenticated user (that matches the username
    and password) can be fetched from the DAO layer and returned for the authorization
    task or for any validation about the expiry date of the account and to check if
    the account is blocked or not.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-7.2`项目中，客户端和服务器端的安全方面几乎与我们在配方*使用用户名和明文/摘要密码令牌对Web服务调用进行身份验证*中使用的`Liverestaurant_R-7.1`相同，除了在服务器端验证用户。Spring
    Security类负责通过与来自DAO层的数据进行比较来验证用户和密码（而不是在`spring-ws-servlet.xml`中硬编码用户名/密码）。此外，与成功验证的用户（与用户名和密码匹配）相关的其他数据（如`权限、是否帐户已锁定、是否帐户已过期`等）可以从DAO层获取并返回用于授权任务或用于验证帐户的到期日期以及检查帐户是否已锁定。
- en: In the first case, `CallbackHandler SpringPlainTextPasswordValidationCallbackHandler`
    compares the plain password included in the incoming SOAP message with the plain
    password that is fetched from the DAO layer.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，`CallbackHandler SpringPlainTextPasswordValidationCallbackHandler` 比较了传入SOAP消息中包含的明文密码和从DAO层获取的明文密码。
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the second test, however, `CallbackHandler` is `SpringDigestPasswordValidationCallbackHandler`
    that compares the digest password included in the incoming SOAP message with the
    digest of the password that is fetched from the DAO layer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在第二个测试中，`CallbackHandler` 是 `SpringDigestPasswordValidationCallbackHandler`，它比较了传入SOAP消息中包含的摘要密码和从DAO层获取的密码的摘要。
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`springSecurityHandler` uses `MyUserDetailService.java`, which should implement
    Spring''s `UserDetailService` to get the username from the provider and internally
    fetch all information for that user from a DAO layer (for example, password, roles,
    is expired, and so on).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`springSecurityHandler`使用`MyUserDetailService.java`，它应该实现Spring的`UserDetailService`来从提供者获取用户名，并从DAO层内部获取该用户的所有信息（例如密码、角色、是否过期等）。'
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This service finally returns the populated data in `MyUserDetails.java`, which
    should implement Spring's `UserDetails`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务最终返回了在`MyUserDetails.java`中填充的数据，该类应该实现Spring的`UserDetails`。
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, if the `UserDetails` data matches the incoming message's username/password,
    it returns a response; otherwise, it returns a SOAP fault message.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果`UserDetails`数据与传入消息的用户名/密码匹配，则返回响应；否则，返回SOAP故障消息。
- en: Same as the 7.1 project, setting `digestPassword` to `true/false` in `securityPolicy.xml`
    on the server/client-side causes the password to be transmitted in plain text
    or in the digested format.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与7.1项目一样，在服务器端/客户端的`securityPolicy.xml`中将`digestPassword`设置为`true/false`会导致密码以明文或摘要格式传输。
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In real time, we never configure the plain password option. This is a good option
    for hackers to enable and disable. We never need such an option in real time.
    Passwords are always transmitted in encrypted format, irrespective of any type
    of system or application configuration.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时环境中，我们从不配置明文密码选项。这是一个让黑客启用和禁用的好选项。我们在实时环境中从不需要这样的选项。无论任何类型的系统或应用程序配置，密码始终以加密格式传输。
- en: See also...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: The recipes *Authenticating a Web-Service call using Spring security to authenticate
    a username token with plain/digested password, Authenticating a Web-Service call
    using JAAS service to authenticate a username token*, and *Authenticating a Web-Service
    call using X509 certificate*, discussed in this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论的示例*使用Spring安全性对用户名令牌进行身份验证，使用JAAS服务对用户名令牌进行身份验证*和*使用X509证书对Web服务调用进行身份验证*。
- en: Authenticating a Web-Service call using a JAAS service to authenticate a username
    token
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JAAS服务对用户名令牌进行身份验证的Web服务调用
- en: We make use of the same authentication task with a plain username token, as
    used in the first recipe. The only difference here is that Java Authentication
    and Authorization Service (JAAS) is used here for authentication and authorization.
    Since the JAAS framework is beyond the scope of this book, it is not described
    here. However, you can read more about JAAS in the reference documentation ( [http://download.oracle.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html](http://download.oracle.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与第一个示例中使用的相同的使用明文用户名令牌的身份验证任务。唯一的区别是这里使用Java身份验证和授权服务（JAAS）进行身份验证和授权。由于JAAS框架超出了本书的范围，因此这里没有描述。但是，您可以在参考文档中阅读有关JAAS的更多信息（[http://download.oracle.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html](http://download.oracle.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html)）。
- en: '`JaasPlainTextPasswordValidationCallbackHandler` from the `xwss` package is
    the API that calls the `Login` module that is configured inside the JAAS configuration
    file.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`xwss`包中的`JaasPlainTextPasswordValidationCallbackHandler`是调用在JAAS配置文件中配置的`Login`模块的API。'
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-7.3` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，项目的名称是`LiveRestaurant_R-7.3`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-7.3-Client` (for the client-side Web-Service) has the following
    Maven dependencies:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-7.3-Client`（用于客户端Web服务）具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, all the steps are the same as in the previous recipe, *Authenticating
    a Web-Service call using username token with plain/digested password*, except
    that the server-side application context file (`spring-ws.servlet.xml`) callback
    handler changes and uses the JAAS framework as an authentication and authorization
    service:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，所有步骤与前一个示例*使用用户名令牌和明文/摘要密码进行Web服务调用身份验证*相同，只是服务器端应用程序上下文文件（`spring-ws.servlet.xml`）的回调处理程序更改并使用JAAS框架作为身份验证和授权服务：
- en: Register the JAAS `callbackHandler` (`JaasPlainTextPasswordValidationCallbackHandler`)
    in the server-side application context file (`spring-ws.servlet.xml`).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文文件（`spring-ws.servlet.xml`）中注册JAAS`callbackHandler`（`JaasPlainTextPasswordValidationCallbackHandler`）。
- en: Add the JAAS framework's required classes `(RdbmsPrincipal, RdbmsCredential`,
    and `RdbmsPlainTextLoginModule)` and the configuration file (`jaas.config`).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加JAAS框架所需的类（`RdbmsPrincipal`、`RdbmsCredential`和`RdbmsPlainTextLoginModule`）和配置文件（`jaas.config`）。
- en: Run the following command from `Liverestaurant_R-7.3:`
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.3`运行以下命令：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Run the following command from `Liverestaurant_R-7.3-Client:`
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.3-Client`运行以下命令：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is the client-side output:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端的输出：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `Liverestaurant_R-7.3` project, everything about security for the client
    and server is almost the same as the `Liverestaurant_R-7.1` project that we used
    in the recipe *Authenticating a Web-Service call using a username with plain/digested
    password token* except for validating a user on the server side. A JAAS framework
    is responsible for validating the user and password by comparison of incoming
    message's username/password with fetched data from a data source (database here).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Liverestaurant_R-7.3`项目中，关于客户端和服务器端的安全性几乎与我们在*使用用户名和明文/摘要密码令牌对Web服务调用进行身份验证*示例中使用的`Liverestaurant_R-7.1`项目相同，除了在服务器端验证用户。一个JAAS框架负责通过比较传入消息的用户名/密码与从数据源（这里是数据库）获取的数据来验证用户和密码。
- en: The client sends a request SOAP message that contains the username token in
    plain text. The server receives this message and uses the JAAS framework to compare
    an incoming message username/password with what is fetched from the DAO layer
    by JAAS. If it matches, it returns a normal response; otherwise, it returns a
    failure message.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端发送包含明文用户名令牌的请求SOAP消息。服务器接收此消息并使用JAAS框架将传入消息的用户名/密码与JAAS从DAO层获取的内容进行比较。如果匹配，则返回正常响应；否则返回失败消息。
- en: 'In `spring-ws-servlet.xml, JaasPlainTextPasswordValidationCallbackHandler`
    is registered as a callback handler that uses `RdbmsPlainText` as a pluggable
    JAAS login module for the username/password authentication:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `spring-ws-servlet.xml` 中，`JaasPlainTextPasswordValidationCallbackHandler`
    被注册为一个回调处理程序，它使用 `RdbmsPlainText` 作为可插拔的 JAAS 登录模块进行用户名/密码身份验证：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When the server side is being run using `mvn -Djava.security.auth.login.config="src/main/resources/jaas.config`",
    it uses the `jaas.config` file to locate the JAAS login module (`RdbmsPlainTextLoginModule`)
    that is registered in the server-side application context as `RdbmsPlainText:`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器端使用 `mvn -Djava.security.auth.login.config="src/main/resources/jaas.config`"
    运行时，它使用 `jaas.config` 文件来定位在服务器端应用程序上下文中注册的 JAAS 登录模块（`RdbmsPlainTextLoginModule`）：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `login` method from `RdbmsPlainTextLoginModule.java` will be called to
    fetch the user password and credentials from the DAO layer. If the fetched password
    matches the incoming message''s password, then it sets credential and returns
    `true`; otherwise, it throws an exception that leads the server to send back a
    fault message to the client:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将从 `RdbmsPlainTextLoginModule.java` 的 `login` 方法中调用以从 DAO 层获取用户密码和凭据。如果获取的密码与传入消息的密码匹配，则设置凭据并返回
    `true`；否则，抛出异常，导致服务器向客户端发送故障消息：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In important applications, even the username is encrypted. This provides more
    security and competitors can''t guess which users are coming from which location
    using ISP-level filtering. Hackers guess or track a username and send duplicate
    requests to load servers with unnecessary data. In this recipe, since the password
    is being transmitted in plain-text format, using an SSL connection is recommended.
    Spring-WS also supports `JaasCertificateValidationCallbackHandler`, which uses
    a certificate for authentication. This handler is not used here. However, you
    can find out more about it at the following URL:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在重要的应用程序中，甚至用户名也是加密的。这提供了更多的安全性，竞争对手无法猜测哪些用户来自哪个位置，使用 ISP 级别的过滤。黑客猜测或跟踪用户名，并发送重复请求以加载不必要的数据到服务器。在这个配方中，由于密码以明文格式传输，建议使用
    SSL 连接。Spring-WS 还支持 `JaasCertificateValidationCallbackHandler`，它使用证书进行身份验证。这个处理程序在这里没有使用。但是，您可以在以下网址找到更多信息：
- en: '[http://static.springsource.org/spring-ws/site/apidocs/org/springframework/ws/soap/security/xwss/callback/jaas/JaasCertificateValidationCallbackHandler.html](http://static.springsource.org/spring-ws/site/apidocs/org/springframework/ws/soap/security/xwss/callback/jaas/JaasCertificateValidationCallbackHandler.html).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://static.springsource.org/spring-ws/site/apidocs/org/springframework/ws/soap/security/xwss/callback/jaas/JaasCertificateValidationCallbackHandler.html](http://static.springsource.org/spring-ws/site/apidocs/org/springframework/ws/soap/security/xwss/callback/jaas/JaasCertificateValidationCallbackHandler.html)。'
- en: See also...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: The recipes *Authenticating a Web-Service call using username token with plain/digested
    password, Authenticating a Web-Service call using Spring Security to authenticate
    a username token with plain/digested password*, and *Authenticating a Web-Service
    call using X509 certificate*, discussed in this chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中讨论了使用用户名令牌和明文/摘要密码进行 Web 服务调用身份验证、使用 Spring Security 对用户名令牌进行身份验证以及使用 X509
    证书进行身份验证的配方。
- en: Preparing pair and symmetric keystores
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备配对和对称密钥库
- en: 'In order to add more security measures for a Web-Service call, we do need some
    extra operations such as signing and verifying the signature of Web-Service messages,
    encryption/decryption, and authentication using certificates. XWSS provides these
    operations using keystores. The `java.security.KeyStore` class provides a memory
    container for the cryptographic keys and certificates. This class can include
    three types of entries:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为 Web 服务调用添加更多安全措施，我们需要一些额外的操作，如对 Web 服务消息进行签名和验证签名、加密/解密以及使用证书进行身份验证。XWSS
    使用密钥库提供这些操作。`java.security.KeyStore` 类为加密密钥和证书提供了内存容器。此类可以包括三种类型的条目：
- en: Private key entry, which contains a private key and a public key certificate
    (note that the public key here is wrapped within the X.509 certificate a combination
    of a private key and a public key certificate is known as a **key pair)**
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含私钥和公钥证书的私钥条目（请注意，这里的公钥包含在 X.509 证书中，私钥和公钥证书的组合被称为**密钥对**）
- en: Secret key entry, which contains a symmetric key
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含对称密钥的秘密密钥条目
- en: Trusted certificate entry, which contains a trusted certificate (this certificate
    is the other party certificate, imported as a trusted certificate, which means
    the owner keys store the public key within the other party's certificate that
    belongs to the third party)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信任的证书条目，其中包含一个受信任的证书（此证书是另一方的证书，作为受信任的证书导入，这意味着所有者密钥存储在第三方属于另一方证书的公钥）
- en: A keystore may contain one to many entries. Aliases in a keystore are for distinguishing
    entries from one another. The private key and certificate are referred to by one
    alias while any other trusted certificates or secret key entries are referred
    to by different individual aliases within a keystore.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库可以包含一个到多个条目。密钥库中的别名用于区分条目。私钥和证书由一个别名引用，而任何其他受信任的证书或秘密密钥条目则由密钥库中的不同个别别名引用。
- en: Earlier in this chapter, authentication of a Web-Service call using the username
    token was presented. A Web-Service call can be authenticated by using a certificate.
    Later in this chapter, in the recipe *Authenticating a Web-Service call using
    X509 certificate*, authentication using a certificate will be presented. In addition,
    these certificates can be used for certificate validation, signature verification,
    and encryption.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，介绍了使用用户名令牌对 Web 服务调用进行身份验证。可以使用证书对 Web 服务调用进行身份验证。在本章的后面，将介绍使用证书进行身份验证。此外，这些证书可以用于证书验证、签名验证和加密。
- en: '**Java keytool** is a tool that generates and stores the keys and certificates
    in a keystore file. This keystore is protected by a keystore password. In addition,
    there is another password that protects the private key.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java keytool** 是一个生成和存储密钥和证书在密钥库文件中的工具。这个密钥库由一个密钥库密码保护。此外，还有一个密码保护私钥。'
- en: In this recipe, using the keytool to generate keystores with symmetric key entries,
    private key entries (private keys and public key certificates), and trusted certificate
    entries is presented. These keys will be used later in this chapter and in [Chapter
    8](ch08.html "Chapter 8. Securing SOAP Web-Services using WSS4J Library"), *Securing
    SOAP Web-Services using WSS4J Library*, for signing and verifying the signature
    of Web-Service messages, encryption/decryption, and authentication using certificates.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，使用keytool生成具有对称密钥条目、私钥条目（私钥和公钥证书对）和受信任证书条目的密钥库。这些密钥稍后将在本章和[第8章](ch08.html
    "Chapter 8. Securing SOAP Web-Services using WSS4J Library")以及*Securing SOAP Web-Services
    using WSS4J Library*中用于签名和验证Web服务消息的签名、加密/解密和使用证书进行身份验证。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Installation of Java, as described in the first recipe.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 按照第一个配方中描述的安装Java。
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To generate a keystore with a secret key entry with the alias *symmetric*,
    run the following command (this keystore is to be used later for symmetric encryption/decryption):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个具有别名*symmetric*的秘密密钥条目的密钥库，请运行以下命令（此密钥库稍后用于对称加密/解密）：
- en: '[PRE30]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To generate a keystore with a private key entry or a key pair (that contains
    private key and public certificate pairs) follow next steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个具有私钥条目或密钥对（包含私钥和公钥证书对）的密钥库，请按照以下步骤进行：
- en: 'To generate a receiver (server side here) keystore, run the following command
    and follow the command prompt:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要生成接收方（服务器端）的密钥库，请运行以下命令并按照命令提示进行：
- en: '[PRE31]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To generate a sender (client side here) keystore, run the following command
    and follow the command prompt:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要生成发送方（客户端端）的密钥库，请运行以下命令并按照命令提示进行：
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To see the generated private key entry in a keystore, run the following command
    (please note `privateKeyEntry` within the underlined text):'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看密钥库中生成的私钥条目，请运行以下命令（请注意在下划线文本中的`privateKeyEntry`）：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To generate a certificate (public key) from a keystore with a private key entry,
    run the following command for the client/server-side keystore:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从具有私钥条目的密钥库生成证书（公钥），请在客户端/服务器端的密钥库上运行以下命令：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To import the sender (client) public key certificate into the receiver (server)
    keystore, run the following command for the server-side keystore (this certificate
    will be stored as a trusted certificate entry in the keystore with the alias *client):*
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将发送方（客户端）的公钥证书导入接收方（服务器）的密钥库，请在服务器端的密钥库上运行以下命令（此证书将存储为密钥库中的受信任证书条目，别名为*client）*：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: To import the receiver (server) public key certificate into the sender (client)
    keystore, run the following command for the sender (client side) keystore (this
    certificate will be stored as a trusted certificate entry in the keystore with
    the alias *server):*
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将接收方（服务器）的公钥证书导入发送方（客户端）的密钥库，请在发送方（客户端端）的密钥库上运行以下命令（此证书将存储为密钥库中的受信任证书条目，别名为*server）*：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To see the server''s private key entry and trusted certificate entry in the
    keystore, run the following command (please note `trustedCertEntry` and privateKeyEntry
    within the underlined text):'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看密钥库中服务器的私钥条目和受信任证书条目，请运行以下命令（请注意在下划线文本中的`trustedCertEntry`和`privateKeyEntry`）：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To see the client''s private key entry and trusted certificate entry in the
    keystore, run the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看密钥库中客户端的私钥条目和受信任证书条目，请运行以下命令：
- en: '[PRE38]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the beginning, a symmetric key store is generated that can be shared by
    a client and a server for encryption and decryption. This command generates the
    symmetric key store:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先生成一个对称密钥库，可以由客户端和服务器共享进行加密和解密。此命令生成对称密钥库：
- en: '[PRE39]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To generate a keystore with a private key entry and a trusted certificate entry,
    first a key pair (private key and public certificate) keystore for both the client
    and server side should be generated.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个具有私钥条目和受信任证书条目的密钥库，首先应该为客户端和服务器端生成一个密钥对（私钥和公钥证书）密钥库。
- en: Then the public key certificate should be exported from the client/server keystore.
    Finally, the client certificate should be imported into the server keystore and
    the server certificate should be imported into the client keystore (this imported
    certificate will be called **trusted certificate)**.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后应该从客户端/服务器密钥库中导出公钥证书。最后，应该将客户端证书导入服务器密钥库，并将服务器证书导入客户端密钥库（此导入的证书将被称为**受信任证书)**。
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The preceding command generates a keystore with a private key entry for which
    `aliasName` is an identifier of the keystore. Validity is the number of days that
    this key is valid.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令生成一个具有私钥条目的密钥库，其中`aliasName`是密钥库的标识符。有效期是此密钥有效的天数。
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The preceding command exports the public key certificate that is embedded inside
    the private key entry in a keystore.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令导出嵌入在密钥库中私钥条目内的公钥证书。
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The preceding command imports the generated public key certificate from the
    client keystore into the server keystore (this imported certificate will be called
    trusted certificate).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将从客户端密钥库中导入生成的公钥证书到服务器密钥库中（此导入的证书将被称为受信任证书）。
- en: 'More information about cryptography and keystores can be found at the following
    URLs:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有关加密和密钥库的更多信息可以在以下网址找到：
- en: '[http://docs.oracle.com/javase/1.5.0/docs/api/java/security/KeyStore.html](http://docs.oracle.com/javase/1.5.0/docs/api/java/security/KeyStore.html).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javase/1.5.0/docs/api/java/security/KeyStore.html](http://docs.oracle.com/javase/1.5.0/docs/api/java/security/KeyStore.html).'
- en: '[http://en.wikipedia.org/wiki/Category:Public-key_cryptography](http://en.wikipedia.org/wiki/Category:Public-key_cryptography).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Category:Public-key_cryptography](http://en.wikipedia.org/wiki/Category:Public-key_cryptography).'
- en: See also...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: The recipes *Securing SOAP messages using digital signature, Authenticating
    a Web-Service call using X509 certificate*, and *Encrypting/Decrypting of SOAP
    messages*, discussed in this chapter.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了*使用数字签名保护SOAP消息*，*使用X509证书对Web服务调用进行身份验证*以及*加密/解密SOAP消息*的方法。
- en: Securing SOAP messages using digital signature
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数字签名保护SOAP消息
- en: The purpose of **digital signature** is to verify whether a received message
    is altered to prove the sender is who he/she claims to be (authentication) and
    to prove the action from a specific sender. Digital signing of a message means
    adding hash data, that is, a piece of information (token) added to the SOAP envelop.
    The receiver needs to regenerate its own hash from the incoming message and compare
    it with the sender's one. If the receiver's hash matches the sender's one, the
    data integrity is achieved and the receiver will proceed; otherwise it returns
    a SOAP fault message to the sender.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字签名**的目的是验证接收到的消息是否被篡改，以证明发送者是他/她声称的身份（身份验证），并证明来自特定发送者的操作。对消息进行数字签名意味着添加哈希数据，即将一段信息（令牌）添加到SOAP信封中。接收者需要从传入的消息中重新生成自己的哈希并将其与发送者的哈希进行比较。如果接收者的哈希与发送者的哈希匹配，则实现了数据完整性，接收者将继续进行；否则，它将向发送者返回一个SOAP故障消息。'
- en: In order to authenticate the sender, the sender should encrypt the signature
    token using his/her own private key. The receiver should have the sender's public-key
    certificate in the receiver keystore (the certificate is called a trusted certificate
    and comes under the trusted certificate entry) to decrypt the sender's signature
    token and repeat the already-explained step to check the message integrity. Now
    if the message integrity is achieved, the authentication of the sender is proved
    (since only the sender's certificate embedded in the receiver keystore could decrypt
    the encrypted signature of the sender). In addition, the action of sending the
    message by the sender also is proved (since successful decryption of the signature
    on the receiver's side shows that the sender has encrypted it by its own private
    key).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证发送者，发送者应使用自己的私钥加密签名令牌。接收者应在接收者密钥库中拥有发送者的公钥证书（该证书称为受信任证书，并位于受信任证书条目下）以解密发送者的签名令牌，并重复已解释的步骤以检查消息完整性。现在，如果消息完整性得到保证，则证明了发送者的身份验证（因为只有嵌入在接收者密钥库中的发送者证书才能解密发送者的加密签名）。此外，还证明了发送者发送消息的行为（因为在接收者端成功解密签名表明发送者已经使用自己的私钥对其进行了加密）。
- en: In this recipe, the sender (client) signs a message and uses its own private
    key (within the client keystore) for encryption of signature. On the receiver
    side (server), the client public key certificate in the server keystore (the certificate
    is called trusted certificate and comes under the trusted certificate entry within
    the keystore) will be used for decryption of the signature of the token; then
    the server verifies the signature token.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，发送方（客户端）对消息进行签名，并使用其自己的私钥（在客户端密钥库中）对签名进行加密。在接收方（服务器）端，服务器密钥库中的客户端公钥证书（该证书称为受信任证书，并位于密钥库中的受信任证书条目下）将用于解密令牌的签名；然后服务器验证签名令牌。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-7.4` (for the server-side
    Web-Service) with the following Maven dependencies:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，项目名称为`LiveRestaurant_R-7.4`（用于服务器端Web服务），具有以下Maven依赖项：
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-7.4-Client` (for the client-side Web-Service) has the following
    Maven dependencies:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-7.4-Client`（用于客户端Web服务）具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Copy `serverStore.jks` to the server and `clientStore.jks` to the client (these
    keystores are already generated in the recipe *Preparing pair and symmetric keystores*
    discussed in this chapter.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`serverStore.jks`复制到服务器端，将`clientStore.jks`复制到客户端（这些密钥库已在本章中的*准备配对和对称密钥库*中生成）。
- en: Configure the security policy file (`securityPolicy.xml`) on the server side
    to expect a signature token along with the incoming message on the client side
    to sign outgoing messages.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端配置安全策略文件（`securityPolicy.xml`）以期望在客户端签署传入消息时附带签名令牌，并在客户端签署传出消息时签署。
- en: Register `keyStoreHAndler` (KeyStoreCallbackHandler) and `trustStore` (KeyStoreFactoryBean)
    in the server-side application context file.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文文件中注册`keyStoreHAndler`（KeyStoreCallbackHandler）和`trustStore`（KeyStoreFactoryBean）。
- en: Register `keyStoreHAndler` (KeyStoreCallbackHandler) and `keyStore` (KeyStoreFactoryBean)
    in the client-side application context file.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文文件中注册`keyStoreHAndler`（KeyStoreCallbackHandler）和`keyStore`（KeyStoreFactoryBean）。
- en: Run the following command from `Liverestaurant_R-7.4:`
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.4`运行以下命令：
- en: '[PRE43]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Run the following command from `Liverestaurant_R-7.4-Client:`
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.4-Client`运行以下命令：
- en: '[PRE44]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following is the client-side output (note the tag `ds:Signature`) within
    the underlined text:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（注意下划线文本中的`ds:Signature`标签）：
- en: '[PRE45]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Security policy on the server side requires the client to include a binary signature
    token in the message. Settings in the client-side policy file include the signature
    token in the outgoing messages. A client uses its own private key included in
    the client-side keystore to encrypt the signature token of the message. On the
    server side, the client public key certificate, included in the server keystore
    (the certificate is called trusted certificate and comes under the trusted certificate
    entry within the keystore), will be used for decrypting the incoming signature
    token. Then the server proceeds towards the verification of the signature.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端的安全策略要求客户端在消息中包含二进制签名令牌。客户端策略文件中的设置将签名令牌包含在传出消息中。客户端使用其自己的私钥（包含在客户端密钥库中）来加密消息的签名令牌。在服务器端，服务器密钥库中包含的客户端公钥证书（证书称为受信任证书，并位于密钥库中的受信任证书条目下），将用于解密传入的签名令牌。然后服务器继续进行签名的验证。
- en: 'The following server-side security configuration in the policy files causes
    the server to expect a security token from the incoming message (for verification
    of incoming messages):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在策略文件中的以下服务器端安全配置会导致服务器期望从传入消息中获得安全令牌（用于验证传入消息）：
- en: '[PRE46]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'On the client side, however, this security configuration in the policy files
    causes the client to include a security token inside the SOAP message in the outgoing
    message:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在客户端，策略文件中的这个安全配置会导致客户端在传出消息中的SOAP消息中包含安全令牌：
- en: '[PRE47]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The following setting in the client-side application context causes the client
    to use the private key inside `clientStore.jks` to encrypt the signature token
    of the message. The private key's password is `cliPkPassword`, the alias of the
    private key entry is `client`, and the keystore bean is generated by reading the
    keystore `clientStore.jks` with the keystore password `clientPassword:`
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端应用程序上下文中的以下设置会导致客户端使用`clientStore.jks`中的私钥来加密消息的签名令牌。私钥的密码是`cliPkPassword`，私钥条目的别名是`client`，并且通过读取密钥库`clientStore.jks`并使用密钥库密码`clientPassword`生成密钥库bean：
- en: '[PRE48]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'On the server side, the following setting in the server configuration file
    causes the server to first decrypt the signature token using a client certificate
    in the server keystore (the certificate is called a trusted certificate). It then
    verifies the signature of the incoming messages (to see whether the original message
    is altered):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，服务器配置文件中的以下设置会导致服务器首先使用服务器密钥库中的客户端证书（证书称为受信任证书）解密签名令牌。然后验证传入消息的签名（以查看原始消息是否被篡改）：
- en: '[PRE49]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: See also...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: The recipes *Preparing pair and symmetric key stores* and *Authenticating a
    Web-Service call using X509 certificate*, discussed in this chapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的*准备配对和对称密钥存储*和*使用X509证书对Web服务调用进行身份验证*示例。
- en: Authenticating a Web-Service call using X509 certificate
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用X509证书对Web服务调用进行身份验证
- en: In the previous recipe, *Securing SOAP messages using digital signature*, by
    changing the sender (client) security policy file, the sender can include the
    client's certificate along with the outgoing messages. Then on the receiver side
    (server), before the verification of signatures, the server tries to authenticate
    the sender by comparing the client's certificate along with incoming message with
    client certificate embedded in the server keystore (trusted certificate). Additionally
    in this recipe, the client certificate is included in the sender's outgoing message
    and to extract data included in the certificate for authentication and authorization
    purposes, on the receiver side.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，通过更改发送方（客户端）安全策略文件，发送方可以在传出消息中包含客户端的证书。然后在接收方（服务器）在验证签名之前，服务器会尝试通过比较传入消息中的客户端证书与服务器密钥库中嵌入的客户端证书（受信任证书）来对发送方进行身份验证。此外，在这个示例中，客户端证书包含在发送方的传出消息中，并且在接收方，用于提取证书中包含的数据进行身份验证和授权目的。
- en: '`SpringCertificateValidationCallbackHandler`, from the XWSS package, can extract
    the certificate data (such as `CN=MyFirstName MyLastName)` and this data could
    be for authentication as well as authorization.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpringCertificateValidationCallbackHandler`，来自XWSS包，可以提取证书数据（例如`CN=MyFirstName
    MyLastName`），这些数据可以用于身份验证和授权。'
- en: In this recipe, we make use of the *Securing SOAP messages using digital signature*
    recipe for the signing and verification of signatures. Then `SpringCertificateValidationCallbackHandler`
    is used for authentication, using data fetching from the DAO layer as well as
    authorization for that Web-Service call.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们利用*使用数字签名保护SOAP消息*示例来进行签名和签名验证。然后使用`SpringCertificateValidationCallbackHandler`进行身份验证，使用从DAO层获取的数据以及对Web服务调用的授权。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-7.5` (for the server-side
    Web-Service) and it has the following Maven dependencies:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，项目的名称是`LiveRestaurant_R-7.5`（用于服务器端Web服务），它具有以下Maven依赖项：
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`LiveRestaurant_R-7.5-Client` (for the client-side Web-Service) has the following
    Maven dependencies:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-7.5-Client`（用于客户端Web服务）具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'In this recipe, all the steps are the same as in the previous recipe, *Securing
    SOAP messages using a digital signature*, except for modifying the client''s policy
    file, as that changes to include the client certificate along with the outgoing
    message and the server-side application context file (`spring-ws.servlet.xml`)
    changes, and it uses the DAO layer to fetch data:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，所有步骤与前一个配方*使用数字签名保护SOAP消息*中的步骤相同，除了修改客户端的策略文件，将客户端证书包含在传出消息中以及服务器端应用程序上下文文件（`spring-ws.servlet.xml`）的更改，并且使用DAO层来获取数据：
- en: Register `springSecurityCertificateHandler` in the server-side application context
    file (spring-ws-servlet.xml).
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端应用程序上下文文件（spring-ws-servlet.xml）中注册`springSecurityCertificateHandler`。
- en: Modify the client-side security policy file to include the client certificate
    along with the outgoing messages.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改客户端安全策略文件，将客户端证书包含在传出消息中。
- en: Add the DAO layer classes to fetch data.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加DAO层类以获取数据。
- en: 'The following is the client-side output (note the X509 client certification)
    within the underlined text:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端输出（请注意下划线文本中的X509客户端认证）：
- en: '[PRE50]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Everything about signatures is the same as described in the recipe *Securing
    SOAP messages using a digital signature*. In addition, the client-side certificate
    is included in the outgoing messages and extracting a client's certificate data
    on the server side for some processing operations.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 关于签名的一切都与配方*使用数字签名保护SOAP消息*中描述的一样。此外，客户端证书包含在传出消息中，并在服务器端提取客户端证书数据进行一些处理操作。
- en: Once the client's certificate is extracted (that is, embedded within the incoming
    message), authentication can be done by retrieving the username or other information.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户端证书被提取（即嵌入在传入消息中），就可以通过检索用户名或其他信息进行身份验证。
- en: 'Including the following section in the client-side policy file causes the client
    to include its own public key certificate in the outgoing messages:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端策略文件中包含以下部分会导致客户端在传出消息中包含自己的公钥证书：
- en: '[PRE51]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Embedding a client certificate in a caller message while signing the message
    causes the server to validate this certificate with the one included in the server
    keystore (sender trusted certificate entry) before signature validation. This
    validation confirms that the caller is the person he/she claims to be. However,
    if activation/locking of account needs to be checked or authorization of the caller
    to access specific resources is required, then `springSecurityCertificateHandler`,
    configured in the server configuration file, handles these tasks:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在签名消息时在调用者消息中嵌入客户端证书会导致服务器在签名验证之前验证此证书与服务器密钥库中包含的证书（发送方受信任的证书条目）的证书。此验证确认调用者是其所声称的人。但是，如果需要检查账户的激活/锁定或需要授权调用者访问特定资源，则在服务器配置文件中配置的`springSecurityCertificateHandler`会处理这些任务：
- en: '[PRE52]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This handler uses the authentication manager that calls `DaoX509AuthoritiesPopulator`,
    which applies the customized service class `MyUserDetailService` for authentication
    and extracts the user credentials for authorization purposes:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序使用调用`DaoX509AuthoritiesPopulator`的身份验证管理器，该管理器应用自定义服务类`MyUserDetailService`进行身份验证，并提取用于授权目的的用户凭据：
- en: '[PRE53]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: See also...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: The recipes *Securing SOAP messages using a digital signature* and *Preparing
    pair and symmetric keystores*, discussed in this chapter.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的*使用数字签名保护SOAP消息*和*准备对和对称密钥库*的配方。
- en: Encrypting/decrypting of SOAP messages
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密/解密SOAP消息
- en: Encryption is the process of converting readable or plain text data format into
    an un-readable encrypted format or cipher text using specific algorithms. These
    algorithms, known as encryption algorithms, require an encryption key. Decryption
    is just the reverse operation of encryption; it converts back the cipher text
    into readable or plain text data format using a decryption key. The encryption
    and decryption keys could be the same or different. If encryption and decryption
    keys are the same and the sender and receiver share the key, then this key is
    known as **symmetric** or **secret key**. The encryption and decryption keys could
    be different, and in this case, the key is called **asymmetric** or **public key**.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 加密是将可读或明文数据格式转换为不可读的加密格式或密文的过程，使用特定算法。这些算法称为加密算法，需要加密密钥。解密只是加密的反向操作；它使用解密密钥将密文转换回可读或明文数据格式。加密和解密密钥可以相同也可以不同。如果加密和解密密钥相同，并且发送方和接收方共享密钥，则该密钥称为**对称**或**秘密密钥**。加密和解密密钥可以不同，在这种情况下，该密钥称为**非对称**或**公钥**。
- en: 'The following diagram presents the usage of a symmetric key for encryption/decryption.
    The sender and receiver can share the same key, which is known as symmetric key.
    Those having this key can decrypt/encrypt messages. For example, a symmetric key
    is used for encryption by the sender and decryption by the receiver:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了对称密钥用于加密/解密的用法。发送方和接收方可以共享相同的密钥，这被称为对称密钥。拥有此密钥的人可以解密/加密消息。例如，发送方使用对称密钥进行加密，接收方使用对称密钥进行解密：
- en: '![Encrypting/decrypting of SOAP messages](img/5825_07_02.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![加密/解密SOAP消息](img/5825_07_02.jpg)'
- en: 'The following diagram presents the usage of the public/private key for encryption/decryption.
    Bob, as a sender, gets Alice''s public key, encrypts a message, and sends it to
    Alice. Since only she is the holder of her own private key, she can decrypt the
    message:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了公钥/私钥用于加密/解密的用法。作为发送方的Bob获取Alice的公钥，加密一条消息并发送给Alice。因为只有她拥有自己的私钥，她可以解密消息：
- en: '![Encrypting/decrypting of SOAP messages](img/5825_07_01.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![加密/解密SOAP消息](img/5825_07_01.jpg)'
- en: In this recipe, the sender (client here) encrypts a message and sends it to
    a receiver (server here) in three different cases. In the first case, a symmetric
    key (which is in a store with the secret key entry that is the same for the client
    and server) is used for encryption on the client side and for decryption on the
    server side. Then, in the second case, the receiver's (server) public key certificate
    on the sender's (client) keystore (within the receiver trusted certificate entry)
    is used for data encryption and the receiver's (server) private key on the server-side
    keystore is used for decryption.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，发送方（客户端）以三种不同的情况对消息进行加密并将其发送给接收方（服务器）。在第一种情况下，对称密钥（在具有客户端和服务器相同的秘密密钥条目的存储中）用于在客户端进行加密和在服务器端进行解密。然后，在第二种情况下，接收方（服务器）在发送方（客户端）的密钥库中使用的接收方（服务器）的公钥证书（在接收方受信任的证书条目内）用于数据加密，并且接收方（服务器）的私钥在服务器端密钥库上用于解密。
- en: Since encryption of the whole payload in the `annotation` endpoint mappings
    (`PayloadRootAnnotationMethodEndpointMapping`) makes routing information (for
    example, `localPart = "placeOrderRequest", namespace = "http://www.packtpub.com/liverestaurant/OrderService/schema`",
    which is included in payload) encrypted along with whole payload, and the `annotation`
    endpoint mapping cannot be used. Instead, the `SoapActionAnnotationMethodEndpointMapping`
    addressing style is used for endpoint mapping. In this case, routing data is included
    in the SOAP header whereas it is included in payload in the annotation endpoint
    mapping. Although encryption of a part of the payload can work with the payload
    annotation endpoint mapping, however for consistency, `SoapActionAnnotationMethodEndpointMapping`
    addressing style is used for whole of the recipe.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在`annotation`端点映射（`PayloadRootAnnotationMethodEndpointMapping`）中对整个有效负载进行加密会使路由信息（例如`localPart
    = "placeOrderRequest"，namespace = "http://www.packtpub.com/liverestaurant/OrderService/schema"`，包含在有效负载中）与整个有效负载一起加密，因此无法使用`annotation`端点映射。相反，使用`SoapActionAnnotationMethodEndpointMapping`寻址样式进行端点映射。在这种情况下，路由数据包含在SOAP标头中，而在注释端点映射中，它包含在有效负载中。尽管有效负载的一部分加密可以与有效负载注释端点映射一起使用，但为了一致性，整个配方使用`SoapActionAnnotationMethodEndpointMapping`寻址样式。
- en: For more information about endpoint mapping, refer to the recipes *Setting up
    an endpoint by annotating the payload-root* and *Setting up a transport-neutral
    WS-Addressing endpoint*, discussed in [Chapter 1](ch01.html "Chapter 1. Building
    SOAP Web-Services"),*Building SOAP Web-Services.*
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 有关端点映射的更多信息，请参阅[第1章](ch01.html "第1章。构建SOAP Web服务")中讨论的配方*通过注释有效负载根设置端点*和*设置传输中立WS-Addressing端点*，*构建SOAP
    Web服务*。
- en: In the first two cases, the whole payload is used for encryption/decryption.
    The XWSS policy configuration file makes it possible to encrypt/decrypt the payload
    part. In the third case, only a part of the payload is set as the target for encryption/decryption.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两种情况下，整个有效负载用于加密/解密。XWSS策略配置文件使得可能对有效负载部分进行加密/解密。在第三种情况下，只有有效负载的一部分被设置为加密/解密的目标。
- en: Getting ready
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-7.6` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，项目的名称是`LiveRestaurant_R-7.6`（用于服务器端Web服务），并具有以下Maven依赖项：
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`mail-1.4.1.jar`'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mail-1.4.1.jar`'
- en: '`saaj-api-1.3.jar`'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saaj-api-1.3.jar`'
- en: '`saaj-impl-1.3.2.jar`'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saaj-impl-1.3.2.jar`'
- en: '`LiveRestaurant_R-7.6-Client` (for the client-side Web-Service) has the following
    Maven dependencies:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`LiveRestaurant_R-7.6-Client`（用于客户端Web服务）具有以下Maven依赖项：'
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-security-2.0.1.RELEASE.jar`'
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-ws-test-2.0.0.RELEASE.jar`'
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-expression-3.0.5.RELEASE.jar`'
- en: '`log4j-1.2.9.jar`'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j-1.2.9.jar`'
- en: '`junit-4.7.jar`'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`junit-4.7.jar`'
- en: How to do it...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps implement encryption/decryption using a shared symmetric
    key (`symmetricStore.jks`):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤使用共享对称密钥（`symmetricStore.jks`）实现加密/解密：
- en: Register `keyStoreHandler` and `symmetricStore` in the server/client application
    context. Copy the symmetric keystore (`symmetricStore.jks`) to the server/client
    folder (this keystore is already generated in the recipe *Preparing pair and symmetric
    keystores* discussed in this chapter).
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器/客户端应用程序上下文中注册`keyStoreHandler`和`symmetricStore`。将对称密钥库（`symmetricStore.jks`）复制到服务器/客户端文件夹（此密钥库已在本章讨论的*准备对和对称密钥库*配方中生成）。
- en: Configure the security policy file (`securityPolicy.xml`) on the server side
    to expect encryption of messages from its client and on the client side to encrypt
    the outgoing messages.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端配置安全策略文件（`securityPolicy.xml`）以期望来自其客户端的消息加密，并在客户端端加密传出消息。
- en: Run the following command from `Liverestaurant_R-7.6:`
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.6`运行以下命令：
- en: '[PRE54]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Run the following command from `Liverestaurant_R-7.6-Client:`
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.6-Client`运行以下命令：
- en: '[PRE55]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following is the client-side output (note the underlined part in the output):'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（请注意输出中的下划线部分）：
- en: '[PRE56]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following steps implement encryption using a server-trusted certificate
    (or public key) on the client-side keystore (`clientStore.jks`) and decryption
    on the server private key on the server-side keystore (`serverStore.jks`):'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤使用服务器信任的证书（或公钥）在客户端密钥库（`clientStore.jks`）上进行加密，并在服务器端密钥库（`serverStore.jks`）上使用服务器私钥进行解密：
- en: Modify `securityPolicy.xml` for encryption of messages using a server-trusted
    certificate on the client side (included in `clientStore.jks)` and decryption
    on the server side by the server private key (included in `serverStore.jks)`.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`securityPolicy.xml`以使用客户端端的服务器信任证书（包含在`clientStore.jks`中）对消息进行加密，并在服务器端使用服务器私钥（包含在`serverStore.jks`中）进行解密。
- en: Register `keyStoreHandler` and `keyStore` on the server side and `keyStoreHandler`
    and `trustStore` on the client-side application context. Copy `clientStore.jks`
    to the client and `serverStore.jks` to the server folder (this keystore is already
    generated in the recipe *Preparing pair and symmetric Keystores* discussed in
    this chapter).
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端和客户端应用程序上下文中注册`keyStoreHandler`和`keyStore`，在客户端上注册`keyStoreHandler`和`trustStore`。将`clientStore.jks`复制到客户端，将`serverStore.jks`复制到服务器文件夹（此密钥库已在本章讨论的*准备对和对称密钥库*中生成）。
- en: Configure the security policy file (`securityPolicy.xml`) on the server side
    to expect encryption of messages from its client and on the client side to encrypt
    the outgoing messages.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端配置安全策略文件（`securityPolicy.xml`）以期望来自其客户端的消息加密，并在客户端端加密传出消息。
- en: Run the following command from `Liverestaurant_R-7.6:`
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.6`运行以下命令：
- en: '[PRE57]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Run the following command from `Liverestaurant_R-7.6-Client:`
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.6-Client`运行以下命令：
- en: '[PRE58]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The following is the client-side output (note the underlined part in the output):'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（注意输出中的下划线部分）：
- en: '[PRE59]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following steps implement encryption/decryption for a part of the payload:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤实现了负载的部分加密/解密：
- en: Modify `securityPolicy.xml` on client side/server side to set the target of
    the encryption.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改客户端/服务器端的`securityPolicy.xml`以设置加密的目标。
- en: Run the following command from `Liverestaurant_R-7.6:`
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.6`运行以下命令：
- en: '[PRE60]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Run the following command from `Liverestaurant_R-7.6-Client:`
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Liverestaurant_R-7.6-Client`运行以下命令：
- en: '[PRE61]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The following is the client-side output (note underlined part in the output):'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是客户端输出（注意输出中的下划线部分）：
- en: '[PRE62]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: How it works...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the first case, both the client and the server share the symmetric key. The
    client encrypts the whole payload using a symmetric key and sends it to the server.
    On the server side, the same key will be used to decrypt the payload. However,
    in the second and third cases, the server certificate embedded in the client store
    is used for encryption of the payload and the server-side private key of the server
    store will be used for decryption.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，客户端和服务器共享对称密钥。客户端使用对称密钥加密整个负载并将其发送到服务器。在服务器端，相同的密钥将用于解密负载。然而，在第二和第三种情况下，客户端存储中嵌入的服务器证书用于负载的加密，服务器端的服务器存储中的私钥将用于解密。
- en: 'The `RequireEncryption/Encrypt` tag in the server/client policy files causes
    the client to encrypt a message and the server to decrypt it. The `keyAlias` is
    the alias name that is set at the time of symmetric keystore generation. The following
    sections in the client- and server-side policy files target the part of a message
    envelop that is to be encrypted/decrypted. `qname: {http://schemas.xmlsoap.org/soap/envelope/}Body`
    causes only the body part of a SOAP envelop to be used for encryption/decryption.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '服务器/客户端策略文件中的`RequireEncryption/Encrypt`标签导致客户端加密消息，服务器解密消息。`keyAlias`是在对称密钥库生成时设置的别名。客户端和服务器端策略文件中的以下部分针对要加密/解密的消息信封的部分。`qname:
    {http://schemas.xmlsoap.org/soap/envelope/}Body`导致仅使用SOAP信封的主体部分进行加密/解密。'
- en: '[PRE63]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: This part in the server and client configuration files causes a symmetric store
    to be used for cryptography. The `callbackHandler` (`keyStoreHandlerBean`) uses
    a symmetric keystore (`symmetricStore bean`) with the key password as `keyPassword`.
    The `KeyStore` bean will be generated by reading from a keystore location (`symmetricStore.jks`)
    with the keystore password as `symmetricPassword` and the type set to JCEKS (passwords
    and the type are set at the time of symmetric keystore generation).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端配置文件中的这一部分导致对称存储用于加密。`callbackHandler`（`keyStoreHandlerBean`）使用具有密钥密码`keyPassword`的对称密钥库（`symmetricStore
    bean`）。`KeyStore` bean将通过从密钥库位置（`symmetricStore.jks`）读取并使用密钥库密码`symmetricPassword`，类型设置为JCEKS（密码和类型在对称密钥库生成时设置）生成。
- en: '[PRE64]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In the second case, almost all the settings are the same, except that the client
    is using the server public key for encrypting and the server is using the server
    store private key for decryption. The following section in the server-side configuration
    file causes the server to use a server private key in the server-side keystore
    for decryption. The private key password is `serPkPasswords` and the alias of
    the private key entry in the keystore is *server*. The `KeyStore` bean will be
    generated by reading from the keystore file (`serverStore.jks`) with the password
    `serverPassword` (passwords and the alias are set at the time of keystore generation).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，几乎所有设置都相同，只是客户端使用服务器公钥进行加密，服务器使用服务器存储私钥进行解密。服务器端配置文件中的以下部分导致服务器使用服务器端密钥库中的服务器私钥进行解密。私钥密码为`serPkPasswords`，密钥库中私钥条目的别名为*server*。`KeyStore`
    bean将通过从密钥库文件（`serverStore.jks`）读取并使用密码`serverPassword`（密码和别名在密钥库生成时设置）生成。
- en: '[PRE65]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This section in the client-side configuration file causes the client to use
    the server certificate (public key) in the client-side trust store for encryption.
    The `KeyStore` (trust store here) bean will be generated by reading from `clientStore.jks`
    with the password `clientPAssword`.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端配置文件中的这一部分导致客户端使用服务器证书（公钥）在客户端信任存储中进行加密。`KeyStore`（这里是信任存储）bean将通过从`clientStore.jks`读取并使用密码`clientPAssword`生成。
- en: '[PRE66]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In the policy file for the client and server side, the following line causes
    the server public key to be used for encrypting in the client and the private
    key in the server store to be used for decryption.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端和服务器端的策略文件中，以下行导致服务器公钥在客户端进行加密，服务器存储中的私钥用于解密。
- en: '[PRE67]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the third case, the following section in the policy files for the server
    and client causes only a part of the payload to be encrypted:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三种情况下，服务器和客户端的策略文件中的以下部分只会导致负载的一部分被加密：
- en: '[PRE68]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Tip
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When encrypting the whole of the payload, use WS-Addressing because routing
    information will be included in the header.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密整个负载时，使用WS-Addressing，因为路由信息将包含在标头中。
- en: Note
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keystore, key management, frequent updates to keys, and certificates are separate
    areas and are not a part of this book. Choosing the best option needs more study,
    and this is part of architecture-related work.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库、密钥管理、密钥的频繁更新以及证书是独立的领域，不是本书的一部分。选择最佳选项需要更多的研究，这是与架构相关工作的一部分。
- en: See also...
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: The recipes *Securing SOAP messages using a digital signature* and *Preparing
    pair and symmetric keystores*, discussed in this chapter.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了《使用数字签名保护SOAP消息》和《准备成对和对称密钥库》的配方。
- en: The recipe *Creating Web-Service client for WS-Addressing endpoint*, discussed
    in [Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building
    Clients for SOAP Web Services.*
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论了《创建用于WS-Addressing端点的Web服务客户端》一章中的配方，该章节可在《第2章构建SOAP Web服务的客户端》中找到。
