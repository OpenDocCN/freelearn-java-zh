- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: About
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含帮助学生执行书中活动的说明。它包括学生为完成和实现本书目标而要执行的详细步骤。
- en: 1\. Getting Started
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 入门
- en: 'Activity 1: Obtaining the Minimum of Two Numbers'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：获取两个数字的最小值
- en: '**Solution**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Declare `3` double variables: `a`, `b`, and `m`. Initialize them with the values
    `3`, `4` and `0` respectively'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明 `3` 个 `double` 变量：`a`、`b` 和 `m`。分别用 `3`、`4` 和 `0` 初始化它们。
- en: '[PRE0]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a `String` variable `r`, it should contain the output message to be printed.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `String` 变量 `r`，它应包含要打印的输出消息。
- en: '[PRE1]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Use the `min()` method to obtain the minimum of the two numbers and store the
    value in `m`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `min()` 方法获取两个数字的最小值，并将其存储在 `m` 中。
- en: '[PRE2]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Print the results.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印结果。
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for this activity can be found here: [https://packt.live/2MFtRNM](https://packt.live/2MFtRNM)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的完整代码可以在以下链接找到：[https://packt.live/2MFtRNM](https://packt.live/2MFtRNM)
- en: 2\. Learning the Basics
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 学习基础知识
- en: 'Activity 1: Taking Input and Comparing Ranges'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：获取输入并比较范围
- en: '**Solution**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'In `main()`, introduce an `if` statement to check if the arguments entered
    are of the right length:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 中，引入一个 `if` 语句来检查输入的参数长度是否正确：
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Parse these arguments as `int` values and save them in variables:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些参数解析为 `int` 值，并保存到变量中：
- en: '[PRE5]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the different values entered to see whether the blood pressure is in
    the desired range using the following code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码检查输入的不同值，以查看血压是否在期望的范围内：
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 3\. Object-Oriented Programming
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 面向对象编程
- en: 'Activity 1: Adding the Frequency-of-Symbol Calculation to WordTool'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：将符号频率计算添加到 WordTool
- en: '**Solution**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Add a method to the previously created `WordTool` class to calculate the frequency
    of a certain symbol. To do so, perform the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 向之前创建的 `WordTool` 类添加一个方法来计算特定符号的频率。为此，执行以下步骤：
- en: Add a method to count the number of words in a string.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来计算字符串中的单词数量。
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add a method to count the number of letters in a string and add the possibility
    of separating the case of having whitespaces or not.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来计算字符串中的字母数量，并添加区分是否有空格的选项。
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Add a method to calculate the frequency of a certain symbol.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来计算特定符号的频率。
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the main class, create an object of the `WordTool` class and add a string
    variable containing a line of text of your choice.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主类中，创建 `WordTool` 类的对象，并添加一个包含您选择的文本行的字符串变量。
- en: '[PRE10]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Add a variable to contain the symbol to look for in the text, and choose a symbol,
    in this case '`e`'. As it is a character, use single quotes to delimit it.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个变量来包含在文本中要查找的符号，并选择一个符号，在这种情况下是 '`e`'。因为它是一个字符，所以使用单引号来界定它。
- en: '[PRE11]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add code inside the main method to print out the calculations made by `WordTool`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主方法中添加代码以打印出 `WordTool` 执行的计算。
- en: '[PRE12]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Activity 2: Adding Documentation to WordTool'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二：向 WordTool 添加文档
- en: '**Solution**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Make sure you document each one of the examples and add enough metadata for
    people to know how to handle the different methods.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确保为每个示例都添加文档，并添加足够的元数据，以便人们知道如何处理不同的方法。
- en: Include an introduction comment to the class, you should at least include a
    short text, the `@author`, `@version`, and `@since` parameters.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为类添加一个介绍性注释，您至少应包括简短文本、`@author`、`@version` 和 `@since` 参数。
- en: '[PRE13]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Add an explanation to the `wordCount` method, remember including the parameters
    and the expected outcome to the method as `@param` and `@return`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `wordCount` 方法添加解释，记得包括参数和方法的预期输出，作为 `@param` 和 `@return`。
- en: '[PRE14]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Do the same for `symbolCount`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样为 `symbolCount` 添加一个方法。
- en: '[PRE15]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Do not forget the last method in the class, `getFrequency`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记类中的最后一个方法，`getFrequency`。
- en: '[PRE16]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You are now ready to export the documentation file from this example.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经准备好从本示例中导出文档文件。
- en: 'The documentation site resulting from this activity should look like the one
    displayed in the following screenshot:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动产生的文档网站应类似于以下截图所示：
- en: '![Figure 3.12: Documentation Site'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12：文档网站'
- en: '](img/C13927_03_12.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C13927_03_12.jpg)'
- en: 'Figure 3.12: Documentation Site'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12：文档网站
- en: 4\. Collections, List, and Java's Built-In APIs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 集合、列表和 Java 的内置 API
- en: 'Activity 1: Searching for Multiple Occurrences in an Array'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：在数组中搜索多个出现
- en: '**Solution**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create the `text` array.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `text` 数组。
- en: '[PRE17]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the variable that contains the word to be searched for: so'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含要搜索的单词的变量：so
- en: '[PRE18]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Initialize the variable occurrence to `-1`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化变量`occurrence`为`-1`。
- en: '[PRE19]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a `for` loop to iterate through the array to check for the occurrence.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`for`循环来遍历数组并检查其出现。
- en: '[PRE20]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for this activity can be found here: [https://packt.live/35RQ9Ud](https://packt.live/35RQ9Ud)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此活动的完整代码可以在以下链接找到：[https://packt.live/35RQ9Ud](https://packt.live/35RQ9Ud)
- en: 'Activity 2: Iterating through Large Lists'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二：遍历大型列表
- en: '**Solution**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: To start, you should create a randomly sized list containing random numbers.
    Create the list that you will use to contain the numbers later. You will store
    numbers of the type `Double`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你应该创建一个包含随机数字的随机大小的列表。创建你将用于存储数字的列表。你将存储类型为`Double`的数字。
- en: '[PRE21]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Define next the size of the list using a variable that we name `numNodes`. Make
    the variable of type `long`. Since the random method does NOT generate that type,
    you need to cast the outcome.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义下一个列表的大小，使用我们命名为`numNodes`的变量。将变量类型设为`long`。由于随机方法不生成该类型，你需要对结果进行类型转换。
- en: '[PRE22]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Use a `for` loop to iterate through the list and create each one of the elements
    in it.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`for`循环遍历列表并创建其中的每个元素。
- en: '[PRE23]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To compute the average, you could create an iterator that will go through the
    list of values and add the weighted value corresponding to each element.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了计算平均值，你可以创建一个迭代器，它将遍历值列表并添加与每个元素对应的加权值。
- en: '[PRE24]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The value coming from the `iterator.next()` method must be cast into a `Double`
    before it can be weighed against the total number of elements.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自`iterator.next()`方法返回的值必须在与其他元素总数进行比较之前转换为`Double`类型。
- en: '[PRE25]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Do not forget to print out the results.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记打印出结果。
- en: '[PRE26]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for this activity can be found here: [https://packt.live/35Yvo9m](https://packt.live/35Yvo9m)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此活动的完整代码可以在以下链接找到：[https://packt.live/35Yvo9m](https://packt.live/35Yvo9m)
- en: 5\. Exceptions
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 异常
- en: 'Activity 1: Designing an Exception Class Logging Data'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：设计异常类记录数据
- en: '**Solution**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Import the relevant classes needed for this program to work: `NoSuchFileException`
    and `logging`.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入此程序运行所需的相关类：`NoSuchFileException`和`logging`。
- en: '[PRE27]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Make your own methods for issuing exceptions, start by creating one for the
    `NullPointerException` case.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建自己的方法来引发异常，首先从创建一个用于`NullPointerException`情况的方法开始。
- en: '[PRE28]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You will also need a method for the case the file is not found: `NoSuchFileException`.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果文件未找到，你还需要一个方法来处理：`NoSuchFileException`。
- en: '[PRE29]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Back to the `Main` method, create the `logger` object that will be reporting
    the exceptions and their severity level.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`Main`方法，创建一个`logger`对象，该对象将报告异常及其严重程度。
- en: '[PRE30]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Capture the argument passed to the script via the CLI and store it in a variable.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过命令行界面捕获传递给脚本的参数并将其存储在一个变量中。
- en: '[PRE31]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Discriminate among the possible exceptions to log using a switch-case statement.
    Remember catching the exceptions with try-catch.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用switch-case语句区分可能的异常以进行日志记录。记住使用try-catch捕获异常。
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 6\. Libraries, Packages, and Modules
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 库、包和模块
- en: 'Activity 1: Tracking Summer High Temperatures'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：跟踪夏季高温
- en: '**Solution**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Create an IntelliJ Gradle project. Modify `settings.gradle` as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个IntelliJ Gradle项目。按照以下方式修改`settings.gradle`：
- en: '[PRE33]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Modify `build.gradle` as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改`build.gradle`：
- en: '[PRE34]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a `class` named `City`. Add the following fields and constructor:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`City`的`class`。添加以下字段和构造函数：
- en: '[PRE35]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Right-click inside the class. Choose `Generate`, and then `Getter and Setter`.
    Select all the fields and click `OK`. This will generate the getter and setter
    methods:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类内部右键单击。选择`Generate`，然后选择`Getter and Setter`。选择所有字段并点击`OK`。这将生成getter和setter方法：
- en: '[PRE36]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add a method to convert degrees to Fahrenheit. This method uses the `TempConverter`
    class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个将摄氏度转换为华氏度的方法。此方法使用`TempConverter`类：
- en: '[PRE37]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a `class` named `SummerHigh` to hold the city information for summer
    high temperatures. Enter the following properties and constructor:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`SummerHigh`的`class`来保存夏季高温的城市信息。输入以下属性和构造函数：
- en: '[PRE38]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Right-click inside the class. Choose `Generate`, and then `Getter and Setter`.
    Select all the fields and click `OK`. This will generate the getter and setter
    methods:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类内部右键单击。选择`Generate`，然后选择`Getter and Setter`。选择所有字段并点击`OK`。这将生成getter和setter方法：
- en: '[PRE39]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Enter a format method in order to render the output readable:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个格式化方法以便输出可读：
- en: '[PRE40]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This code makes use of the `City` `class` `format()` method.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码使用了`City`类的`format()`方法。
- en: 'Create a class called `SummerHighs`. This class holds a table of `SummerHigh`
    objects. Enter the following field and constructor to initialize the table:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`SummerHighs`的类。此类包含`SummerHigh`对象的表。输入以下字段和构造函数以初始化表：
- en: '[PRE41]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Enter a method to get summer high temperature information by `city`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`city`获取夏季高温信息的方法：
- en: '[PRE42]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This method uses the `Guava` library Table class.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法使用`Guava`库的`Table`类。
- en: 'Enter a method to get summer high temperature information by `country`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`country`获取夏季高温信息的方法：
- en: '[PRE43]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This method also uses the `Guava` library's Table class.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法还使用了`Guava`库的`Table`类。
- en: 'Now create a number of convenience methods to make adding cities easier:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一些方便的方法，以便更容易地添加城市：
- en: '[PRE44]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, create a method to initialize the summer high temperature data described
    previously:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个初始化之前描述的夏季高温数据的方法：
- en: '[PRE45]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a class named `Main` to run our program. Then, create a `main()` method
    as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Main`的类来运行我们的程序。然后，创建如下所示的`main()`方法：
- en: '[PRE46]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, create a class named `TempConverter` to convert from degrees Celsius
    to degrees Fahrenheit:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个名为`TempConverter`的类，用于将摄氏度转换为华氏度：
- en: '[PRE47]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 7\. Databases and JDBC
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 数据库和JDBC
- en: 'Activity 1: Track Your Progress'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1：跟踪你的进度
- en: '**Solution**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The `student` table holds information on the `student`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`student`表包含有关`student`的信息：'
- en: '[PRE48]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The `chapter` table has a `chapter number` and a `name`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`chapter`表包含`chapter number`和`name`：'
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note that the `chapter ID` is the `chapter number`.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意`chapter ID`是`chapter number`。
- en: 'The `student_progress` table maps a `student ID` to a `chapter ID`, indicating
    that a particular student completed a particular chapter:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`student_progress`表将`student ID`映射到`chapter ID`，表示特定学生完成了特定章节：'
- en: '[PRE50]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note that by using both `student ID` and `chapter ID` as the composite `primary
    key`, each student can complete each chapter just once. There are no do-overs.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意使用`student ID`和`chapter ID`作为复合`primary key`，每个学生只能完成每个章节一次。没有重试的机会。
- en: 'Here is a hypothetical student:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是一个假设的学生：
- en: '[PRE51]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that in order to make it easier to match the names, we insert all of them
    in uppercase.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，为了便于匹配名称，我们将它们全部大写插入。
- en: 'The following `INSERT` statements provide data for the first seven chapters:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下`INSERT`语句提供了前七个章节的数据：
- en: '[PRE52]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note the two single quotes used to insert text with a quote.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意插入带引号的文本时使用的两个单引号。
- en: 'To add a record of `student_progress`, generate an `INSERT` statement like
    the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加`student_progress`记录，生成如下`INSERT`语句：
- en: '[PRE53]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This should be done within a Java program using a `PreparedStatement`.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在Java程序中使用`PreparedStatement`来完成。
- en: 'To query for a student''s progress, use a query such as the following:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查询学生的进度，使用如下查询：
- en: '[PRE54]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note that the `first name` and `last name` will be input by the user. This should
    be placed in `PreparedStatement`.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意`first name`和`last name`将由用户输入。这应该放在`PreparedStatement`中。
- en: The `ORDER BY` clause ensures that the output will appear in chapter order.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ORDER BY`子句确保输出将按章节顺序显示。'
- en: 'The `ShowProgress` program outputs the chapters a given student has completed:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ShowProgress`程序输出给定学生已完成的章节：'
- en: '[PRE55]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note how the input first and last names are forced to uppercase prior to searching
    the database. Also, note that we do not allow two students to have the same name.
    This is not realistic.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意在搜索数据库之前，将输入的姓氏和名字强制转换为大写。此外，注意我们不允许两个学生有相同的名字。这并不现实。
- en: After querying, the program outputs the student's name and then one line for
    each chapter completed.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询后，程序输出学生的姓名，然后为每个完成的章节输出一行。
- en: To run this program, build the `shadowJar` task in Gradle, and then run a command
    such as the following in the IntelliJ `libs` subdirectory of the build directory.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行此程序，在Gradle中构建`shadowJar`任务，然后在构建目录的`IntelliJ`子目录下的`libs`中运行如下命令。
- en: 'The output will appear as follows:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE56]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `RecordProgress` program adds a `student_progress` record:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RecordProgress`程序添加了一个`student_progress`记录：'
- en: '[PRE57]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'To run this program, use a command such as the following:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行此程序，使用如下命令：
- en: '[PRE58]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You will see output like the following:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到如下输出：
- en: '[PRE59]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: As before, the input names are forced to uppercase prior to searching the database.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所述，在搜索数据库之前，将输入的名称强制转换为大写。
- en: 8\. Sockets, Files, and Streams
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 套接字、文件和流
- en: 'Activity 1: Writing the Directory Structure to a File'
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1：将目录结构写入文件
- en: '**Solution**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Import the relevant classes to get this example to work. Basically you will
    be working with collections, files, and the associated exceptions.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关的类以使此示例工作。基本上，你将使用集合、文件和相关的异常。
- en: '[PRE60]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Determine the folder you will start looking for directories from. Let's assume
    you start from `user.home`. Declare a Path object linking to that folder.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定你将开始查找目录的文件夹。让我们假设你从`user.home`开始。声明一个指向该文件夹的Path对象。
- en: '[PRE61]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Next you will call `File.walkFileTree`, which will allow you iterate through
    a folder structure up to a certain depth. In this case, you can set whatever depth
    you want, for example `10`. This means the program will dig up to `10` levels
    of directories looking for files.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将调用`File.walkFileTree`，这将允许你迭代文件夹结构直到一定深度。在这种情况下，你可以设置任何深度，例如`10`。这意味着程序将挖掘到`10`级目录以查找文件。
- en: '[PRE62]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The approach in this case consists in overriding a couple of methods from `SimpleFileVisitor`
    to extract the path information and return it as a string making the file structure
    easy to read. The first method to override is `preVisitDirectory`, that is triggered
    in the class when an item in a directory happens to be a nested directory.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，方法包括覆盖`SimpleFileVisitor`的几个方法以提取路径信息并将其作为字符串返回，从而使文件结构易于阅读。第一个要覆盖的方法是`preVisitDirectory`，当类中的目录项恰好是一个嵌套目录时，将触发此方法。
- en: '[PRE63]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Inside `preVisitDirectory`, there is a couple of operations you will need to
    perform. First you need to calculate how deep you are in the directory structure,
    as you will need that to print blank spaces as a way to format the program's output.
    `preVisitDirectory` will get the current path as a parameter named `dir`. But
    it will also use the global path parameter (remember we start from `user.home`).
    Declare a variable called `depthInit` to store the how far you are in the directory
    structure when at path.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`preVisitDirectory`内部，有一些操作你需要执行。首先，你需要计算你在目录结构中的深度，因为你将需要它来打印空格作为格式化程序输出的方式。`preVisitDirectory`将当前路径作为名为`dir`的参数获取。但它也会使用全局路径参数（记住我们从`user.home`开始）。声明一个名为`depthInit`的变量来存储在路径时你在目录结构中的位置。
- en: '[PRE64]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Repeat the operation but this time with the current directory, store the outcome
    in a variable called `depthCurrent`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此操作，但这次使用当前目录，将结果存储在名为`depthCurrent`的变量中。
- en: '[PRE65]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Use a `for` loop to print a bunch of blank spaces in front of the current folder
    name.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`for`循环在当前文件夹名前打印一些空格。
- en: '[PRE66]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Finally, print out the name of the folder/file, and exit the method.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打印出文件夹/文件的名称，并退出方法。
- en: '[PRE67]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The second method to override within `SimpleFileVisitor` is `visitFileFailed`.
    This method is handling the exception that would be triggered when reading a path
    to which the user has no permission to enter, or similar. The full method looks
    like follows.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SimpleFileVisitor`中需要覆盖的第二个方法是`visitFileFailed`。此方法处理当读取用户无权进入的路径或类似情况时触发的异常。完整的方法如下。
- en: '[PRE68]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Try now how the program works. You will get to see the listing of the directories
    at your home folder in a similar fashion as the following one where each block
    of four blank spaces represents deepening one more level in the folder structure.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试运行程序。你将看到类似以下内容的家目录目录列表，其中每个四个空格的块代表在文件夹结构中深入一级。
- en: '[PRE69]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: It is now a trivial exercise making the outcome be stored in a file instead
    of being simply printed out to the CLI. First you will need to declare a file
    name, in this case let's make one that will end up at the same folder where the
    Main class is to be found.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将结果存储在文件中而不是简单地打印到CLI中，已经是一个简单的练习了。首先，你需要声明一个文件名，在这个例子中，让我们创建一个最终会存储在Main类所在同一文件夹中的文件。
- en: '[PRE70]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Next you should check whether the logfile already exists in the folder, that
    will help deciding whether you create it or if you will simply append data to
    it instead.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你应该检查日志文件是否已存在于文件夹中，这将有助于决定你是创建它还是简单地将其数据附加到它上面。
- en: '[PRE71]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: You will have to modify the overridden `preVisitDirectory` to include the possibility
    of writing to the file you just created.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将不得不修改覆盖的`preVisitDirectory`以包括将数据写入你刚刚创建的文件的可能性。
- en: '[PRE72]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Executing the code will now give as a result a file located in the same folder
    you are executing it from.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行代码现在将给出一个位于你执行代码的同一文件夹中的文件作为结果。
- en: '[PRE73]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Activity 2: Improving the EchoServer and EchoClient Programs'
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二：改进EchoServer和EchoClient程序
- en: '**Solution**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The expected results will require you to modify both the server and the client
    in a very similar way. On the client-side, you will have to do something like
    the following:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预期结果将需要您以非常相似的方式修改服务器和客户端。在客户端，您将不得不做以下类似的事情：
- en: '[PRE74]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'On the server, the modifications should look like the following:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上，修改应该看起来像以下这样：
- en: '[PRE75]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The expected interaction between the server and the client should be as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端之间预期的交互应该如下所示：
- en: '![Figure 8:2: Interaction between server and client'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2：服务器和客户端之间的交互'
- en: '](img/C13927_08_02.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C13927_08_02.jpg)'
- en: 'Figure 8:2: Interaction between server and client'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：服务器和客户端之间的交互
- en: 9\. Working with HTTP
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. 使用 HTTP
- en: 'Activity 1: Using the jsoup Library to Download Files from the Web'
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：使用 jsoup 库从网络下载文件
- en: '**Solution**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The program is relatively short. The main task is to figure out the CSS query
    for the `select()` method call:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 程序相对较短。主要任务是找出 `select()` 方法调用中的 CSS 查询：
- en: Create a class named `Activity1`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Activity1` 的类。
- en: In `main()`, start a `try-catch` block
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 中，启动一个 `try-catch` 块
- en: '[PRE76]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Inside the `try` block, use the `Jsoup` library to download the contents of
    the remote Web page located at [https://packt.live/2BqZbtq](https://packt.live/2BqZbtq).
    This will result in the Web page contents stored in a `Document` object.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `try` 块内部，使用 `Jsoup` 库下载位于[https://packt.live/2BqZbtq](https://packt.live/2BqZbtq)的远程网页内容。这将导致网页内容存储在
    `Document` 对象中。
- en: '[PRE77]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Next, query the document for all elements of type `DIV` with a CSS class of
    `section`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，查询文档以获取所有具有 `section` CSS 类的 `DIV` 元素。
- en: '[PRE78]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: You will need to iterate over each of these `DIV` elements.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将需要遍历这些 `DIV` 元素中的每一个。
- en: '[PRE79]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Inside the inner for loop, look for `H3` headline tags.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内层循环内部，查找 `H3` 标题标签。
- en: '[PRE80]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Finally, inside the `if` statement that detects if the tag is an H3 element,
    find all anchor (A) tags used for HTML links and print out the link text for each.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在检测标签是否为 H3 元素的 `if` 语句内部，找到所有用于 HTML 链接的锚（A）标签，并打印出每个链接的文本。
- en: '[PRE81]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Note
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for this activity can be found here: [https://packt.live/33SEhPP](https://packt.live/33SEhPP)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在此处找到此活动的完整代码：[https://packt.live/33SEhPP](https://packt.live/33SEhPP)
- en: 11\. Processes
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. 进程
- en: 'Activity 1: Making a Parent Process to Launch a Child Process'
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：创建父进程以启动子进程
- en: '**Solution**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The child should have an algorithm that looks like the following:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子进程应该有一个类似于以下算法：
- en: '[PRE82]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Here, there is a call to `System.in.available()` to check whether there is any
    data in the output buffer from the child program.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有一个调用 `System.in.available()` 来检查子程序输出缓冲区中是否有数据。
- en: 'On the other hand, the parent program should consider including something along
    the lines of:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，父程序应该考虑包含类似以下内容：
- en: '[PRE83]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 12\. Regular Expressions
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12. 正则表达式
- en: 'Activity 1: Regular Expressions to Check If the Entrance is Entered in the
    Desired Format'
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：检查入口是否以所需格式输入的正则表达式
- en: '**Solution**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Visit [https://packt.live/2MYzyFq](https://packt.live/2MYzyFq).
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://packt.live/2MYzyFq](https://packt.live/2MYzyFq)。
- en: 'To the already exisiting regular expression from Exercise 1, add the rule to
    allow an optional alphabet after the number:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将练习1中已有的正则表达式添加规则，允许数字后面有一个可选的字母：
- en: '[PRE84]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Check if the RE works for *Strandvagen 1a* and *Ringvagen 2b*.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 RE 是否适用于 *Strandvagen 1a* 和 *Ringvagen 2b*。
- en: 13\. Functional Programming with Lambda Expressions
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13. 使用 Lambda 表达式的函数式编程
- en: 'Activity 1: Modifying Immutable Lists'
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：修改不可变列表
- en: '**Solution**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Write an application which modifies the ShoppingCart class found in Exercise
    2 to allow for removing items from the cart.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个应用程序，修改练习2中找到的 ShoppingCart 类，以允许从购物车中删除项目。
- en: '[PRE85]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Add a new feature to the ShoppingCart class that allows users to add multiple
    items to the cart in a single invocation.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 ShoppingCart 类添加一个新功能，允许用户在单次调用中向购物车添加多个项目。
- en: '[PRE86]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Prove that the new features work as intended by modifying the code in the main
    application file to show how the features are used.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改主应用程序文件中的代码来证明新功能按预期工作。
- en: '[PRE87]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'You can find the entire code for this activity at: [https://packt.live/2q045er](https://packt.live/2q045er)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://packt.live/2q045er](https://packt.live/2q045er)找到此活动的完整代码。
- en: 14\. Recursion
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14. 递归
- en: 'Activity 1: Calculating the Fibonacci Sequence'
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：计算斐波那契数列
- en: '**Solution**'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create a class named `Fibonacci`.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Fibonacci` 的类。
- en: Create a static method called `fibonacci` to calculate the Fibonacci sequence
    for a given number. If the input number is greater than `1`, this method will
    call itself.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `fibonacci` 的静态方法，用于计算给定数字的斐波那契数列。如果输入数字大于 `1`，则此方法将调用自身。
- en: '[PRE88]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: If the input number is `0` or `1`, this method returns the input number (`0`
    or `1`, respectively).
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果输入数字是 `0` 或 `1`，则此方法返回输入数字（分别是 `0` 或 `1`）。
- en: Create a `main()` method that calls the `fibonacci` method with inputs going
    from 0 to 16 (or to a value less than 17 as shown here).
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main()` 方法，调用 `fibonacci` 方法，输入从 `0` 到 `16`（或小于 `17` 的值，如下所示）。
- en: '[PRE89]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for this activity can be found here: [https://packt.live/32DtjNT](https://packt.live/32DtjNT).'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的完整代码可以在以下链接找到：[https://packt.live/32DtjNT](https://packt.live/32DtjNT).
- en: 15\. Processing Data with Streams
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. 使用流处理数据
- en: 'Activity 1: Applying Discount on the Items'
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：对商品应用折扣
- en: '**Solution**'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: '[PRE90]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Activity 2: Searching for Specifics'
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二：寻找具体信息
- en: '**Solution**'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: '[PRE91]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 16\. Predicates and Other Functional Interfaces
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16. 断言和其他功能接口
- en: 'Activity 1: Toggling the Sensor States'
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：切换传感器状态
- en: '**Solution**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: '[PRE92]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Activity 2: Using a Recursive Function'
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二：使用递归函数
- en: '**Solution**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: '[PRE93]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Activity 3: Using a Lambda Function'
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动三：使用 Lambda 函数
- en: '**Solution**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: '[PRE94]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 17\. Reactive Programming with Java Flow
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17. 使用 Java Flow 进行响应式编程
- en: 'Activity 1: Let NumberProcessor Format Values as Integers'
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：让 NumberProcessor 格式化值为整数
- en: '**Solution**'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Change the processors published item type to Integer. Make the necessary changes
    in the implementation to match the new type:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将处理器发布的商品类型更改为 Integer。在实现中做出必要的更改以匹配新类型：
- en: '[PRE95]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Change the subscriber for the processor, it should accept only Integer values
    in the `onNext` method:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改处理器的订阅者，它应该在 `onNext` 方法中只接受整数值：
- en: '[PRE96]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 18\. Unit Testing
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18. 单元测试
- en: 'Activity 1: Counting the Words in the String'
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：计算字符串中的单词数
- en: '**Solution**'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create a class named `WordCount`.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `WordCount` 的类。
- en: Define a method named `countWords()` that takes as input a `String`. The method
    will count the words in the `String`.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `countWords()` 的方法，它接受一个 `String` 作为输入。该方法将计算 `String` 中的单词数。
- en: '[PRE97]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: In `countWords()`, check if the input String is null. If not, trim any spaces
    at the beginning and end of the text. Then, split the `String` into words.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `countWords()` 中，检查输入字符串是否为 null。如果不是，则删除文本开头和结尾的任何空格。然后，将 `String` 分割成单词。
- en: '[PRE98]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Note the use of a regular expression, `\s+`, that gets passed to the `split()`
    method. This will split the `String` into words. Also note that the leading backslash
    character needs to be escaped.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意正则表达式 `\s+` 的使用，它被传递给 `split()` 方法。这将把 `String` 分割成单词。另外，注意开头的反斜杠字符需要转义。
- en: Note
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for WordCount.java file can be found here: [https://packt.live/32DtjNT](https://packt.live/32DtjNT).'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: WordCount.java 文件的完整代码可以在以下链接找到：[https://packt.live/32DtjNT](https://packt.live/32DtjNT).
- en: Next, write a parameterized test as follows.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式编写参数化测试。
- en: Create a class named `WordCountTest` in the `src/test` directory (not `src/main`).
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/test` 目录下（不是 `src/main`）创建一个名为 `WordCountTest` 的类。
- en: Use the `ParameterizedTest` annotation and define a `CsvSource` with data for
    the test.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ParameterizedTest` 注解并定义一个 `CsvSource`，包含测试数据。
- en: '[PRE99]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: The test data takes in two values, a text string to check and then the word
    count. Note the placement of punctuation and spaces to see if the `WordCount`
    class works correctly.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试数据接受两个值，一个要检查的文本字符串和单词数。注意标点符号和空格的位置，以查看 `WordCount` 类是否正常工作。
- en: Create the `test` method to use the input parameters and validate that the reported
    word count matches the expected word count.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `test` 方法，使用输入参数并验证报告的单词数是否与预期的单词数匹配。
- en: '[PRE100]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Note
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code for WordCountTest.java file can be found here: [https://packt.live/2oafOq9](https://packt.live/2oafOq9).'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: WordCountTest.java 文件的完整代码可以在以下链接找到：[https://packt.live/2oafOq9](https://packt.live/2oafOq9).
