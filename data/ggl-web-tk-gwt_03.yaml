- en: Chapter 3. Creating Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。创建服务
- en: In this chapter, we will learn how to create services, which is the GWT term
    for providing server-side functionality. The term **service**, as used in the
    GWT context does not bear any relation to a web service. It refers to the code
    that the client invokes on the server side in order to access the functionality
    provided by the server. Most of the applications that we develop will require
    access to a server to retrieve some data or information, and then display it to
    the user in an intuitive and non-intrusive way using AJAX. The best way in a GWT
    application to accomplish this is through a service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建服务，这是GWT术语用于提供服务器端功能的术语。在GWT上下文中使用的术语**服务**与Web服务没有任何关系。它指的是客户端在服务器端调用的代码，以便访问服务器提供的功能。我们开发的大多数应用程序都需要访问服务器以检索一些数据或信息，然后使用AJAX以直观和非侵入性的方式将其显示给用户。在GWT应用程序中实现这一点的最佳方式是通过服务。
- en: In this chapter we will go through the necessary steps for creating services.
    We will first create the various artifacts required for creating a simple `Prime
    Number` service that verifies if the provided number is a prime number. The application
    is trivial but the concepts apply to any GWT service that you will create. We
    are also going to create a simple client that will consume the `Prime Number`
    service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍创建服务所需的必要步骤。我们将首先创建创建一个简单的`素数`服务所需的各种工件，该服务验证提供的数字是否为素数。该应用程序很简单，但是其中的概念适用于您将创建的任何GWT服务。我们还将创建一个简单的客户端，用于消费`素数`服务。
- en: 'The tasks that we will address are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要解决的任务是：
- en: Creating a service definition interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务定义接口
- en: Creating an asynchronous service definition interface
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建异步服务定义接口
- en: Creating a service implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务实现
- en: Consuming the service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费服务
- en: The first three tasks need to be done for every GWT service that you create.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个任务需要为您创建的每个GWT服务完成。
- en: Creating a Service Definition Interface
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务定义接口
- en: A service definition interface acts as a contract between the client and the
    server. This interface will be implemented by the actual service that we build
    later on in this chapter. It defines the functionality that is to be provided
    by the service, and lays down the ground rules for clients wanting to consume
    the functionality provided by this service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 服务定义接口充当客户端和服务器之间的合同。这个接口将由我们稍后在本章中构建的实际服务来实现。它定义了服务应提供的功能，并为希望消费此服务提供的功能的客户端制定了基本规则。
- en: Time for Action—Creating a Prime Number Service
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-创建素数服务
- en: We will create the definition for our Prime Number service. We will also create
    a new project called `Samples` to contain the code we create in this chapter and
    the rest of the book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的素数服务创建定义。我们还将创建一个名为`Samples`的新项目，以包含本章和本书中创建的代码。
- en: Create a new Eclipse GWT project named `Samples` using the `projectCreator`
    and `applicationCreator`. Specify the name of the application class as `com.packtpub.gwtbook.samples.client.Samples`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`projectCreator`和`applicationCreator`创建一个名为`Samples`的新Eclipse GWT项目。将应用程序类的名称指定为`com.packtpub.gwtbook.samples.client.Samples`。
- en: Import the newly created project into the Eclipse IDE.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的项目导入Eclipse IDE。
- en: 'Create a new Java file named `PrimesService.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `PrimesService` interface with one method that verifies if a
    number is a prime number. It takes an integer as a parameter and returns a Boolean
    value upon verification:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`PrimesService.java`的新Java文件。定义一个`PrimesService`接口，其中包含一个验证数字是否为素数的方法。它以整数作为参数，并在验证后返回一个布尔值：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What Just Happened?
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'The `PrimesService` is a service definition interface. It specifies the supported
    method, and the parameters that should be passed to it, in order for the service
    to return a response. The term RPC in the GWT context refers to a mechanism for
    easily passing Java objects between a client and the server via the HTTP protocol.
    The GWT framework does this automatically for us, as long as we use only the supported
    types for our method parameters and return values. Currently, the following Java
    types and objects are supported by GWT:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrimesService`是一个服务定义接口。它指定了支持的方法以及应该传递给它的参数，以便服务返回响应。在GWT上下文中，RPC这个术语指的是一种通过HTTP协议在客户端和服务器之间轻松传递Java对象的机制。只要我们的方法参数和返回值使用了支持的类型，GWT框架就会自动为我们执行此操作。目前，GWT支持以下Java类型和对象：'
- en: Primitive types—character, byte, short, integer, long, Boolean, float, and double
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始类型-字符、字节、短整型、整型、长整型、布尔型、浮点型和双精度型
- en: Primitive type wrapper classes—character, byte, short, integer, long, Boolean,
    float, and double
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始类型包装类-字符、字节、短整型、整型、长整型、布尔型、浮点型和双精度型
- en: String
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Date
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: Arrays of any of these `serializable` types
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何这些`可序列化`类型的数组
- en: Custom classes implementing the `isSerializable` interface, and whose non‑transient
    fields are one of the above supported types
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现实现`isSerializable`接口的自定义类，其非瞬态字段是上述支持的类型之一
- en: 'You can also use collections of the supported object types as method parameters
    and return types. However, in order to use them, you need to explicitly mention
    the type of objects they are expected to contain by utilizing a special `Javadoc`
    annotation `@gwt.typeArgs`. For instance, here is how we would define a service
    method that takes a list of integers as input parameters, and returns a list of
    strings:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用支持的对象类型的集合作为方法参数和返回类型。但是，为了使用它们，您需要通过使用特殊的`Javadoc`注释`@gwt.typeArgs`明确提到它们预期包含的对象类型。例如，这是我们如何定义一个服务方法，它以整数列表作为输入参数，并返回一个字符串列表：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first annotation indicates that this method accepts only a parameter that
    is a list of integer objects, and the second annotation indicates that the return
    parameter from this method is a list of string objects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个注解表示这个方法只接受一个整数对象列表作为参数，第二个注解表示这个方法的返回参数是一个字符串对象列表。
- en: Creating an Asynchronous Service Definition Interface
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个异步服务定义接口
- en: The interface created in the previous task is a synchronous one. In order to
    take advantage of the AJAX support in GWT, we will need to create the asynchronous
    version of this interface, which will be used for making remote calls in the background
    to the server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个任务中创建的接口是同步的。为了利用GWT中的AJAX支持，我们需要创建这个接口的异步版本，用于在后台向服务器进行远程调用。
- en: Time for Action—Utilizing the AJAX Support
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-利用AJAX支持
- en: In this section, we will create an asynchronous version of the service definition
    interface.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建服务定义接口的异步版本。
- en: 'Create a new Java file named `PrimesServiceAsync.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `PrimesServiceAsync` interface:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`PrimesServiceAsync.java`的新的Java文件。定义一个`PrimesServiceAsync`接口：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What Just Happened?
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The asynchronous version of our service definition interface must have the same
    methods as the synchronous interface, except for the requirement that all of its
    methods must have an `AsyncCallback` object as a parameter, and the methods may
    not return anything. The callback object acts as the binding between the client
    and the server. Once an asynchronous call is made by the client, the notification,
    when the call completes its processing on the server side is made through this
    callback object. Essentially this makes the AJAX magic happen! You do not have
    to do anything special for all this magic to happen, other than making sure that
    you provide this asynchronous interface for your service definition. The GWT framework
    will automatically take care of all the communication between the client and the
    server. A client application that is using this service will invoke the service
    through this method, passing it a callback object and will automatically be notified
    of either success through a callback to the `onSuccess()` method in the client
    application or failure through a callback to the `onFailure()` method in the client
    application. The current release of GWT only supports making an asynchronous call
    back to the server. Even though the service definition interface is synchronous,
    that does not mean that you can use it to make a synchronous call to the server.
    So any service that you build using GWT can currently only be accessed asynchronously
    via AJAX.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务定义接口的异步版本必须具有与同步接口相同的方法，除了所有方法都必须将`AsyncCallback`对象作为参数，并且方法可能不返回任何内容。回调对象充当客户端和服务器之间的绑定。一旦客户端发起异步调用，当服务器端完成处理时，通过此回调对象进行通知。基本上，这就是AJAX的魔法发生的地方！你不必为所有这些魔法做任何特殊的事情，只需确保为服务定义提供这个异步接口即可。GWT框架将自动处理客户端和服务器之间的所有通信。使用此服务的客户端应用程序将通过此方法调用服务，传递一个回调对象，并将自动通过回调到客户端应用程序中的`onSuccess()`方法或`onFailure()`方法来通知成功或失败。当前版本的GWT只支持异步回调到服务器。即使服务定义接口是同步的，也不能使用它来对服务器进行同步调用。因此，目前只能通过AJAX异步访问使用GWT构建的任何服务。
- en: Creating a Service Implementation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务实现
- en: We have so far created the interfaces that define the functionality of our Prime
    Number service. In this section, we are going to start implementing and filling
    out the service class and create the actual implementation of the Prime Number
    service.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了定义质数服务功能的接口。在本节中，我们将开始实现和填充服务类，并创建质数服务的实际实现。
- en: Time for Action—Implement Our Service
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-实现我们的服务
- en: We are going to create the implementation of the Prime Number service. It checks
    to see if the provided number is a prime number by ensuring that it is only divisible
    by one and itself. The verification result is returned as a Boolean value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建质数服务的实现。它通过确保提供的数字只能被1和它自己整除来检查提供的数字是否是质数。验证结果以布尔值返回。
- en: Create a new Java file, named `PrimesServiceImpl.java` in the `com.packtpub.gwtbook.samples.server`
    package. Define a `PrimesServiceImpl` class that extends `RemoteServiceServlet`
    and implements the previously created `PrimesService` interface. Add functionality
    to this class to verify if the provided number is a prime number.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.server`包中创建一个名为`PrimesServiceImpl.java`的新的Java文件。定义一个`PrimesServiceImpl`类，它扩展`RemoteServiceServlet`并实现先前创建的`PrimesService`接口。为这个类添加功能，以验证提供的数字是否是质数。
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What Just Happened?
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Since this is the implementation of the Prime Number service, this class needs
    to implement the service definition interface, and add functionality to the implemented
    methods. This task and the previous tasks delineate the steps that are always
    required in order to create a GWT service. Creating and using RPC services is
    a critical step on the path to unlocking the power of GWT and for using it efficiently
    and effectively. The basic architecture of a GWT application consists of a client-side
    user interface that is rendered in a web browser and interacts with the server-side
    functionality implemented as an RPC service to asynchronously retrieve data and
    information without refreshing the page. The service in a GWT application wraps
    the server-side model of an application, and thus usually maps to the role of
    a model in the MVC architecture.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是素数服务的实现，这个类需要实现服务定义接口，并为实现的方法添加功能。这个任务和之前的任务勾画出了创建GWT服务时总是需要的步骤。创建和使用RPC服务是解锁GWT强大功能并有效使用它的关键步骤。GWT应用的基本架构包括在Web浏览器中呈现的客户端用户界面，并与作为RPC服务实现的服务器端功能进行交互，以异步地检索数据和信息而不刷新页面。在GWT应用中，服务包装了应用的服务器端模型，因此通常映射到MVC架构中的模型角色。
- en: '![What Just Happened?](img/1007_03_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/1007_03_01.jpg)'
- en: 'Let us look at the relationships between the various classes and interfaces
    that we are creating for a service. Every time we create an RPC service we utilize
    some GWT framework classes, and create some new classes and interfaces. Here are
    the classes and interfaces that are created after completion of the above task:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们为一个服务创建的各种类和接口之间的关系。每次我们创建一个RPC服务，我们都会利用一些GWT框架类，并创建一些新的类和接口。完成上述任务后创建的类和接口如下：
- en: '`PrimesService:` Our service definition interface. It defines the methods in
    our service and extends the `RemoteService` marker interface that indicates that
    this is a GWT RPC service. This is the synchronous definition and the server-side
    implementation must implement this interface.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PrimesService：` 我们的服务定义接口。它定义了我们服务中的方法，并扩展了`RemoteService`标记接口，表示这是一个GWT RPC服务。这是同步定义，服务器端实现必须实现这个接口。'
- en: '`PrimesServiceAsync:` The asynchronous definition of our interface. It must
    have the same methods as the synchronous interface, except for the requirement
    that all of its methods must have an `AsyncCallback` object as a parameter and
    the methods may not return anything. The naming convention recommended for this
    interface is to suffix the name of our synchronous interface with the word `Async`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PrimesServiceAsync：` 我们接口的异步定义。它必须具有与同步接口相同的方法，除了所有方法都必须以`AsyncCallback`对象作为参数，并且方法可能不返回任何内容。建议为这个接口使用的命名约定是在我们的同步接口名称后缀加上`Async`这个词。'
- en: '`PrimesServiceImpl:` This is the server-side implementation of our service.
    This must extend `RemoteServiceServlet` and implement our synchronous interface—`PrimesService.`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PrimesServiceImpl：` 这是我们服务的服务器端实现。它必须扩展`RemoteServiceServlet`并实现我们的同步接口——`PrimesService`。'
- en: GWT framework classes used by us to create the `PrimesService:`
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的GWT框架类来创建`PrimesService：`
- en: '`RemoteService:` A marker interface that should be implemented by all the RPC
    services.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RemoteService：` 所有RPC服务都应该实现的标记接口。'
- en: '`RemoteServiceServlet:` The `PrimesServiceImpl` service implementation class
    extends this class and adds the required functionality. This class provides support
    for serializing and deserializing requests, and ensures that the requests invoke
    the right method in the `PrimesServiceImpl` class.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RemoteServiceServlet：` `PrimesServiceImpl`服务实现类扩展了这个类并添加了所需的功能。这个类支持序列化和反序列化请求，并确保请求调用`PrimesServiceImpl`类中的正确方法。'
- en: Here is a diagram depicting the relationship between the various classes and
    interfaces that were involved in creating the Prime Number service.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个图表，描述了在创建素数服务时涉及的各种类和接口之间的关系。
- en: '![What Just Happened?](img/1007_03_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/1007_03_02.jpg)'
- en: Our service implementation extends the `RemoteServiceServlet`, which inherits
    from the `HttpServlet` class. The `RemoteServiceServlet` takes care of automatically
    deserializing incoming requests and serializing the outgoing responses. GWT probably
    opted to use the servlet-based approach because it is simple and is well known
    and used in the Java community. It also makes it easy to move our service implementation
    between any servlet containers, and opens the door to a wide variety of integration
    possibilities between GWT and other frameworks. This has been used by several
    members of the GWT community to implement integration between GWT and other frameworks
    such as Struts and Spring. The RPC wire format used by GWT is loosely based on
    the JavaScript Object Notation (JSON). This protocol is proprietary to GWT and
    it is currently undocumented. However, the `RemoteServiceServlet` provides two
    methods—`onAfterResponseSerialized()` and `onBeforeRequestDeserialized()`, which
    you can override to inspect and print out the serialized request and response.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务实现扩展了`RemoteServiceServlet`，它继承自`HttpServlet`类。`RemoteServiceServlet`负责自动反序列化传入的请求和序列化传出的响应。GWT可能选择使用基于servlet的方法，因为它简单，并且在Java社区中被广泛认可和使用。它还使得我们的服务实现在任何servlet容器之间移动变得容易，并为GWT与其他框架之间的各种集成可能性打开了大门。GWT社区的几位成员已经使用它来实现GWT与其他框架（如Struts和Spring）之间的集成。GWT使用的RPC
    wire格式基本上是基于JavaScript对象表示法（JSON）的。这个协议是GWT专有的，目前没有文档记录。然而，`RemoteServiceServlet`提供了两个方法——`onAfterResponseSerialized()`和`onBeforeRequestDeserialized()`，你可以重写这些方法来检查和打印序列化的请求和响应。
- en: 'The basic pattern and architecture for creating any GWT service is always the
    same and consists of these basic steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何GWT服务的基本模式和架构总是相同的，包括以下基本步骤：
- en: Create a service definition interface.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务定义接口。
- en: Create an asynchronous version of the service definition interface.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务定义接口的异步版本。
- en: Create the service implementation class. In the service implementation class
    we access the functionality provided by the external service and convert the results
    to match our requirements.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务实现类。在服务实现类中，我们访问外部服务提供的功能，并将结果转换为符合我们要求的结果。
- en: In the next section, we will create a simple client that consumes this new service.
    We will learn about deploying this service to external servlet containers such
    as Tomcat in[Chapter 10](ch10.html "Chapter 10. Deployment"). The concepts from
    this example are applicable to every GWT service that we create. We will create
    at least these two interfaces and an implementation class for every service that
    we create. This will help us to provide server functionality that can be accessed
    in an asynchronous way by a GWT client. The service that we have created above
    is independent of the GWT client application, and can be used by multiple applications.
    We only need to ensure that we register the service correctly in a servlet container,
    so that it can be accessed by our client applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个简单的客户端来消费这个新服务。我们将学习如何将此服务部署到外部servlet容器，如Tomcat，在[第10章](ch10.html
    "第10章。部署")。这个例子中的概念适用于我们创建的每个GWT服务。我们将至少为我们创建的每个服务创建这两个接口和一个实现类。这将帮助我们提供可以通过GWT客户端以异步方式访问的服务器功能。我们上面创建的服务独立于GWT客户端应用程序，并且可以被多个应用程序使用。我们只需要确保在servlet容器中正确注册服务，以便我们的客户端应用程序可以访问它。
- en: Consuming the Service
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费服务
- en: We have completed implementing the Prime Number service. Now we are going to
    create a simple client that can consume the `PrimesService`. This will help us
    test the functionality of the service to ensure that it does things that it is
    supposed to do.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了Prime Number服务的实现。现在我们将创建一个简单的客户端，可以消费`PrimesService`。这将帮助我们测试服务的功能，以确保它能够完成它应该完成的任务。
- en: Time for Action—Creating the Client
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-创建客户端
- en: We will create a simple client that will connect to the Prime Number service
    and check if a given number is a prime number. We will add a text box for typing
    in the number to check, and a button that will invoke the service when clicked.
    It will display the results of the call in an alert dialog.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的客户端，连接到Prime Number服务，并检查给定的数字是否是质数。我们将添加一个文本框用于输入要检查的数字，以及一个按钮，当点击时将调用服务。它将在警报对话框中显示调用的结果。
- en: Create the client in a new file named `PrimesClient.java` in the `com.packtpub.gwtbook.samples.client`
    package that extends the `EntryPoint` class.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client`包中创建一个名为`PrimesClient.java`的新文件，该文件扩展了`EntryPoint`类。
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add an `onModuleLoad()` method to this new class, and create a text box.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新类中添加一个`onModuleLoad()`方法，并创建一个文本框。
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instantiate the `PrimesService` and store it in a variable in the `onModuleLoad()method`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onModuleLoad()`方法中实例化`PrimesService`并将其存储在变量中。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create a new button, and add an event handler to listen for clicks on the button.
    In the handler, invoke the `PrimesService` using the text typed into the text
    box as the input parameter to the service. Display the result in an alert dialog.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新按钮，并添加一个事件处理程序来监听按钮的点击。在处理程序中，使用文本框中输入的文本作为服务的输入参数来调用`PrimesService`。在警报对话框中显示结果。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add the following entry to the application's `module.xml` file in order for
    the client to find this service.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的`module.xml`文件中添加以下条目，以便客户端找到此服务。
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is the client. Type in a number, and click the button to check if the number
    is a prime number.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是客户端。输入一个数字，然后点击按钮检查这个数字是否是质数。
- en: '![Time for Action—Creating the Client](img/1007_03_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-创建客户端](img/1007_03_03.jpg)'
- en: 'The response is displayed in an alert dialog as shown below:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 响应如下显示在警报对话框中：
- en: '![Time for Action—Creating the Client](img/1007_03_04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-创建客户端](img/1007_03_04.jpg)'
- en: What Just Happened?
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'The `Prime Number` service client invokes the service, by passing in the required
    parameter to the `PrimesService`. We make an entry for the service in the `module.xml`
    file so that the GWT framework can initialize things correctly and the client
    can find the service. We have followed a common pattern for creating simple clients
    that consume GWT services:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Prime Number`服务客户端通过向`PrimesService`传递所需的参数来调用服务。我们在`module.xml`文件中为服务做了一个条目，以便GWT框架可以正确初始化并且客户端可以找到服务。我们遵循了创建简单客户端消费GWT服务的常见模式：'
- en: Create a class that implements the `EntryPoint` class.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现`EntryPoint`类的类。
- en: Override the `onModuleLoad()` method to add the desired user-interface widgets.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onModuleLoad()`方法以添加所需的用户界面小部件。
- en: Add an event handler to one of the user interface widgets to invoke the service
    when the handler is triggered.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户界面小部件之一添加事件处理程序，以在触发处理程序时调用服务。
- en: In the event handler, handle the `callbacks` for success and failure of the
    call to the service method, and take some action with the results of the call.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件处理程序中，处理对服务方法调用的成功和失败的`callbacks`，并对调用结果采取一些操作。
- en: Add an entry to the GWT application `module.xml` for the service to be consumed.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GWT应用程序`module.xml`中添加一个条目以便消费服务。
- en: We will use this common pattern along with some variations when creating sample
    applications throughout this book.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中创建示例应用程序时使用这种常见模式以及一些变化。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we took a look at creating the various classes and interfaces
    that are required as part of creating a new Prime Number GWT service. We also
    created a client that can consume the prime number service.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下创建新的Prime Number GWT服务所需的各种类和接口。我们还创建了一个可以使用质数服务的客户端。
- en: In the next chapter, we are going to create interactive web user interfaces
    using GWT.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用GWT创建交互式网络用户界面。
