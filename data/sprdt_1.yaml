- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 入门
- en: 'In this book, we will concentrate on two specific subprojects that offer support
    for Java Persistence API 2.0 and the Redis key-value store. But before we get
    to the point, we need to get a brief introduction to both the technologies. We
    need to do this for two reasons:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将集中讨论两个特定的子项目，它们支持Java持久化API 2.0和Redis键值存储。但在我们深入讨论之前，我们需要对这两种技术进行简要介绍。我们需要这样做有两个原因：
- en: First, if we want to truly understand the benefits of Spring Data JPA, we need
    to have an idea on how database queries are created when the standard API is used.
    As soon as we compare these code samples to a query creation code that uses Spring
    Data JPA, its benefits are revealed to us.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果我们想真正理解Spring Data JPA的好处，我们需要了解在使用标准API时如何创建数据库查询。一旦我们将这些代码示例与使用Spring
    Data JPA的查询创建代码进行比较，它的好处就会显露出来。
- en: Second, the basic knowledge about the Redis key-value store will help us to
    understand the second part of this book which describes how we can use it in our
    applications. After all, we should be familiar with any technology that we use
    in our applications. Right?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，对Redis键值存储的基本了解将有助于我们理解本书的第二部分，其中描述了我们如何在应用程序中使用它。毕竟，我们应该熟悉我们在应用程序中使用的任何技术。对吧？
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下主题：
- en: The motivation behind the Java Persistence API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久化API背后的动机
- en: The main components of the Java Persistence API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久化API的主要组件
- en: How we can create database queries with the Java Persistence API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何使用Java持久化API创建数据库查询
- en: The data types supported by the Redis key-value store.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis键值存储支持的数据类型。
- en: The main features of the Redis key-value store.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis键值存储的主要特性。
- en: Java Persistence API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java持久化API
- en: 'Before the **Java Persistence API** (**JPA**) was introduced, we had the following
    three alternative technologies which we could use to implement our persistence
    layer:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入**Java持久化API**（**JPA**）之前，我们有以下三种替代技术可用于实现持久化层：
- en: The persistence mechanism provided by **Enterprise JavaBeans** (**EJB**) 2.x
    specifications
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业JavaBean**（**EJB**）2.x规范提供的持久化机制'
- en: The **JDBC** API
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDBC** API'
- en: The third party **object-relational mapping** (**ORM**) frameworks such as Hibernate.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方**对象关系映射**（**ORM**）框架，如Hibernate。
- en: This gave us some freedom when selecting the best tool for the job but as always,
    none of these options were problem free.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们在选择最适合工作的工具时一些自由，但像往常一样，这些选项都不是没有问题的。
- en: The problem with EJB 2.x was that it was too heavyweight and complicated. Its
    configuration relied on complicated XML documents and its programming model required
    a lot of boilerplate code. Also, EJB required that the application be deployed
    to a **Java EE** application server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: EJB 2.x的问题在于它太过沉重和复杂。它的配置依赖于复杂的XML文档，其编程模型需要大量样板代码。此外，EJB要求应用程序部署到**Java EE**应用服务器。
- en: Programming against the JDBC API was rather simple and we could deploy our application
    in any servlet container. However, we had to write a lot of boilerplate code that
    was needed when we were transforming the information of our domain model to queries
    or building domain model objects from query results.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 针对JDBC API的编程相当简单，我们可以在任何servlet容器中部署我们的应用程序。但是，当我们将领域模型的信息转换为查询或从查询结果构建领域模型对象时，我们必须编写大量样板代码。
- en: 'Third party ORM frameworks were often a good choice because they freed us from
    writing the unnecessary code that was used to build queries or to construct domain
    objects from query results. This freedom came with a price tag: objects and relational
    data are not compatible creatures, and even though ORM frameworks can solve most
    of the problems caused by the **object-relational mismatch** , the problems that
    they cannot solve efficiently are the ones that cause us the most pain.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方ORM框架通常是一个不错的选择，因为它们使我们摆脱了编写不必要的代码，用于构建查询或从查询结果构造领域对象。这种自由是有代价的：对象和关系数据不兼容，即使ORM框架可以解决大部分由**对象关系不匹配**引起的问题，但它们无法高效解决的问题是我们最头疼的问题。
- en: The Java Persistence API provides a standard mechanism for implementing a persistence
    layer that uses relational databases. Its main motivation was to replace the persistence
    mechanism of EJB 2.x and to provide a standardized approach for object-relational
    mapping. Many of its features were originally introduced by the third party ORM
    frameworks, which have later become implementations of the Java Persistence API.
    The following section introduces its key concepts and describes how we can create
    queries with it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Java持久化API提供了一种标准机制，用于实现使用关系数据库的持久化层。它的主要动机是取代EJB 2.x的持久化机制，并为对象关系映射提供了标准化方法。它的许多特性最初是由第三方ORM框架引入的，后来成为Java持久化API的实现。以下部分介绍了其关键概念，并描述了我们如何使用它创建查询。
- en: Key concepts
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键概念
- en: An **entity** is a persistent domain object. Each **entity class** generally
    represents a single database table, and an instance of such a class contains the
    data of a single table row. Each entity instance always has a unique object identifier,
    which is the same thing to an entity that a primary key is to a database table.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**实体**是持久化的领域对象。每个**实体类**通常表示一个数据库表，并且这样的类的实例包含单个表行的数据。每个实体实例始终具有唯一的对象标识符，这对于实体来说就像主键对于数据库表一样。'
- en: An **entity manager factory** creates **entity manager** instances. All entity
    manager instances created by the same entity manager factory will use the same
    configuration and database. If you need to access multiple databases, you must
    configure one entity manager factory per used database. The methods of the entity
    manager factory are specified by the `EntityManagerFactory` interface.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**实体管理器工厂**创建**实体管理器**实例。由同一实体管理器工厂创建的所有实体管理器实例将使用相同的配置和数据库。如果需要访问多个数据库，则必须为每个使用的数据库配置一个实体管理器工厂。实体管理器工厂的方法由`EntityManagerFactory`接口指定。'
- en: The entity manager manages the entities of the application. The entity manager
    can be used to perform **CRUD** (**Create**, **Read**, **Updated**, and **Delete**)
    operations on entities and run complex queries against a database. The methods
    of an entity manager are declared by the `EntityManager` interface.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实体管理器管理应用程序的实体。实体管理器可用于对实体执行CRUD（创建、读取、更新和删除）操作，并针对数据库运行复杂查询。实体管理器的方法由`EntityManager`接口声明。
- en: A **persistence unit** specifies all entity classes, which are managed by the
    entity managers of the application. Each persistence unit contains all classes
    representing the data stored in a single database.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**持久化单元**指定了所有实体类，这些类由应用程序的实体管理器管理。每个持久化单元包含表示存储在单个数据库中的数据的所有类。'
- en: A **persistence context** contains entity instances. Inside a persistence context,
    there must be only one entity instance for each object identifier. Each persistence
    context is associated with a specific entity manager that manages the lifecycle
    of the entity instances contained by the persistence context.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**持久化上下文**包含实体实例。在持久化上下文中，每个对象标识符只能有一个实体实例。每个持久化上下文与管理持久化上下文中包含的实体实例的特定实体管理器相关联。'
- en: Creating database queries
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库查询
- en: 'The Java Persistence API introduced two new methods for creating database queries:
    **Java Persistence Query Language** (**JPQL**) and the **Criteria API** . The
    queries written by using these technologies do not deal directly with database
    tables. Instead, queries are written over the entities of the application and
    their persistent state. This ensures, in theory, that the created queries are
    portable and not tied to a specific database schema or database provider.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Java持久化API引入了两种创建数据库查询的新方法：**Java持久化查询语言**（**JPQL**）和**标准查询API**。使用这些技术编写的查询不直接处理数据库表，而是针对应用程序的实体及其持久状态编写。这在理论上确保创建的查询是可移植的，不与特定的数据库模式或数据库提供程序绑定。
- en: It is also possible to use SQL queries, but this ties the application to a specific
    database schema. If database provider specific extensions are used, our application
    is tied to the database provider as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用SQL查询，但这会将应用程序与特定的数据库模式绑定。如果使用了特定于数据库提供程序的扩展，我们的应用程序也将与数据库提供程序绑定。
- en: 'Next we will take a look at how we can use the Java Persistence API to build
    database queries by using SQL, JPQL, and the Criteria API. Our example query will
    fetch all contacts whose first name is "John" from the database. This example
    uses a simple entity class called `Contact` that represents the data stored in
    the `contacts` table. The following table maps the entity''s properties to the
    columns of the database:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何使用Java持久化API通过使用SQL、JPQL和标准查询API构建数据库查询。我们的示例查询将从数据库中获取所有名字为“John”的联系人。这个例子使用了一个简单的实体类`Contact`，表示了`contacts`表中存储的数据。以下表将实体的属性映射到数据库的列：
- en: '| Contact | contacts |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 联系人 | 联系人 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `firstName` | `first_name` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `firstName` | `first_name` |'
- en: Native SQL queries
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地SQL查询
- en: 'SQL is a standardized query language that is designed to manage data that is
    stored in relational databases. The following code example describes how we can
    implement the specified query by using SQL:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是一种标准化的查询语言，旨在管理存储在关系数据库中的数据。以下代码示例描述了如何使用SQL实现指定的查询：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This example teaches us three things:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子教会我们三件事：
- en: We don't have to learn a new query language in order to build queries with JPA.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不必学习新的查询语言来构建JPA查询。
- en: The created query is not type safe and we must cast the results before we can
    use them.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建的查询不是类型安全的，我们必须在使用之前对结果进行转换。
- en: We have to run the application before we can verify our query for spelling or
    syntactical errors. This increases the length of the developer feedback loop and
    decreases productivity.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须在验证查询的拼写或语法错误之前运行应用程序。这增加了开发人员反馈循环的长度，降低了生产率。
- en: Because SQL queries are tied to a specific database schema (or to the used database
    provider), we should use them only when it is absolutely necessary. Often the
    reason for using SQL queries is performance, but we might also have other reasons
    for using it. For example, we might be migrating a legacy application to JPA and
    we don't have time to do it right at the beginning.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为SQL查询与特定的数据库模式（或使用的数据库提供程序）绑定，所以只有在绝对必要时才应使用它们。通常使用SQL查询的原因是性能，但我们可能还有其他使用它的原因。例如，我们可能正在将传统应用程序迁移到JPA，而一开始没有时间做得很好。
- en: Java Persistence Query Language
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java持久化查询语言
- en: 'JPQL is a string-based query language with a syntax resembling that of SQL.
    Thus, learning JPQL is fairly easy as long as you have some experience with SQL.
    The code example that executes the specified query is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: JPQL是一种基于字符串的查询语言，其语法类似于SQL。因此，只要您具有一些SQL经验，学习JPQL就相当容易。执行指定查询的代码示例如下：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This example tells us three things:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子告诉我们三件事：
- en: The created query is type safe and we don't have to cast the query results.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建的查询是类型安全的，我们不必对查询结果进行转换。
- en: The JPQL query strings are very readable and easy to interpret.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPQL查询字符串非常易读且易于解释。
- en: The created query strings cannot be verified during compilation. The only way
    to verify our query strings for spelling or syntactical errors is to run our application.
    Unfortunately, this means that the length of the developer feedback loop is increased,
    which decreases productivity.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建的查询字符串无法在编译期间进行验证。验证查询字符串的拼写或语法错误的唯一方法是运行我们的应用程序。不幸的是，这意味着开发人员反馈循环的长度增加，从而降低了生产率。
- en: JPQL is a good choice for static queries. In other words, if the number of query
    parameters is always the same, JPQL should be our weapon of choice. But implementing
    dynamic queries with JPQL is often cumbersome as we have to build the query string
    manually.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JPQL是静态查询的不错选择。换句话说，如果查询参数的数量始终相同，JPQL应该是我们的首选。但是，使用JPQL实现动态查询通常很麻烦，因为我们必须手动构建查询字符串。
- en: The Criteria API
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准查询API
- en: 'The Criteria API was introduced to address the problems found while using JPQL
    and to standardize the criteria efforts of third party ORM frameworks. It is used
    to construct query definition objects, which are transformed to the executed SQL
    query. The next code example demonstrates that we can implement our query by using
    the Criteria API:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Criteria API是为了解决在使用JPQL时发现的问题并标准化第三方ORM框架的标准化努力而引入的。它用于构建查询定义对象，这些对象被转换为执行的SQL查询。下面的代码示例演示了我们可以通过使用Criteria
    API来实现我们的查询：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can see three things from this example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这个例子中看到三件事：
- en: The created query is type safe and results can be obtained without casting
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建的查询是类型安全的，可以在不进行强制转换的情况下获得结果
- en: The code is not as readable as the corresponding code that uses SQL or JPQL
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不像使用SQL或JPQL的相应代码那样可读
- en: Since we are dealing with a Java API, the Java compiler ensures that it is not
    possible to create syntactically incorrect queries
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们正在处理Java API，Java编译器确保不可能创建语法不正确的查询
- en: The Criteria API is a great tool if we have to create dynamic queries. The creation
    of dynamic queries is easier because we can deal with objects instead of building
    query strings manually. Unfortunately, when the complexity of the created query
    grows, the creation of the query definition object can be troublesome and the
    code becomes harder to understand.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们必须创建动态查询，Criteria API是一个很好的工具。创建动态查询更容易，因为我们可以处理对象而不是手动构建查询字符串。不幸的是，当创建的查询复杂性增加时，创建查询定义对象可能会很麻烦，代码变得更难理解。
- en: Redis
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redis
- en: 'Redis is an in-memory data store that keeps its entire data set in a memory
    and uses disk space only as a secondary persistent storage. Therefore, Redis can
    provide very fast read and write operations. The catch is that the size of the
    Redis data set cannot be higher than the amount of memory. The other features
    of Redis include:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一个将整个数据集保存在内存中并仅将磁盘空间用作辅助持久存储的内存数据存储。因此，Redis可以提供非常快速的读写操作。问题在于Redis数据集的大小不能超过内存量。Redis的其他特性包括：
- en: Support for complex data types
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持复杂数据类型
- en: Multiple persistence mechanisms
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种持久化机制
- en: Master-slave replication
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主从复制
- en: Implementation of the publish/subscribe messaging pattern
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现发布/订阅消息模式
- en: These features are described in the following subsections.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性在以下小节中描述。
- en: Supported data types
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的数据类型
- en: 'Each value stored by Redis has a key. Both keys and values are binary safe,
    which means that the key or the stored value can be either a string or the content
    of a binary file. However, Redis is more than just a simple key-value store. It
    supports multiple binary safe data types, which should be familiar to every programmer.
    These data types are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Redis存储的每个值都有一个键。键和值都是二进制安全的，这意味着键或存储的值可以是字符串或二进制文件的内容。然而，Redis不仅仅是一个简单的键值存储。它支持多种二进制安全的数据类型，这对每个程序员来说应该是熟悉的。这些数据类型如下：
- en: '**String**: This is a data type where one key always refers to a single value.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串**：这是一种数据类型，其中一个键始终指向单个值。'
- en: '**List**: This is a data type where one key refers to multiple string values,
    which are sorted in insertion order.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**：这是一种数据类型，其中一个键引用多个字符串值，这些值按插入顺序排序。'
- en: '**Set**: This is a collection of unordered strings that cannot contain the
    same value more than once.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集合**：这是一个无序字符串的集合，不能包含相同的值超过一次。'
- en: '**Sorted set**: This is similar to a set but each of its values has a score
    which is used to order the values of a sorted set from the lowest score to the
    highest. The same score can be assigned to multiple values.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有序集合**：这类似于一个集合，但它的每个值都有一个分数，用于将有序集合的值从最低分数到最高分数排序。相同的分数可以分配给多个值。'
- en: '**Hash**: This is a data type where a single hash key always refers to a specific
    map of string keys and values.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希**：这是一种数据类型，其中一个哈希键始终指向特定的字符串键和值的映射。'
- en: Persistence
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久化
- en: 'Redis supports two persistence mechanisms that can be used to store the data
    set on disk. They are as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Redis支持两种持久化机制，可用于将数据集存储在磁盘上。它们如下：
- en: '**RDB** is the simplest persistence mechanism of Redis. It takes snapshots
    from the in-memory data sets at configured intervals, and stores the snapshot
    on disk. When a server is started, it will read the data set back to the memory
    from the snapshot file. This is the default persistence mechanism of Redis.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RDB是Redis最简单的持久化机制。它在配置的间隔时间内从内存数据集中获取快照，并将快照存储在磁盘上。服务器启动时，它将从快照文件中读取数据集到内存中。这是Redis的默认持久化机制。
- en: RDB maximizes the performance of your Redis server, and its file format is really
    compact, which makes it a very useful tool for disaster recovery. Also, if you
    want to use the master-slave replication, you have to use RDB because the RDB
    snapshots are used when the data is synchronized between the master and the slaves.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: RDB最大化了Redis服务器的性能，其文件格式非常紧凑，这使得它成为灾难恢复的非常有用的工具。此外，如果你想使用主从复制，你必须使用RDB，因为在主从之间同步数据时会使用RDB快照。
- en: However, if you have to minimize the chance of data loss in all situations,
    RDB is not the right solution for you. Because RDB persists the data at configured
    intervals, you can always lose the data stored in to your Redis instance after
    the last snapshot was saved to a disk.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你必须在所有情况下最小化数据丢失的机会，RDB不是适合你的解决方案。因为RDB在配置的间隔时间内持久化数据，你总是可以在最后一个快照保存到磁盘后丢失存储在Redis实例中的数据。
- en: '**Append Only File** (**AOF**) is a persistence model, which logs each operation
    changing the state of the in-memory data set to a specific log file. When a Redis
    instance is started, it will reconstruct the data set by executing all operations
    found from the log file.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追加模式文件**（**AOF**）是一种持久化模型，它将改变内存数据集状态的每个操作记录到特定的日志文件中。当Redis实例启动时，它将通过执行从日志文件中找到的所有操作来重建数据集。'
- en: The advantage of the AOF is that it minimizes that chance of data loss in all
    situations. Also, since the log file is an append log, it cannot be irreversibly
    corrupted. On the other hand, AOF log files are usually larger than RDB files
    for the same data, and AOF can be slower than RDB if the server is experiencing
    a huge write load.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: AOF的优势在于它最大程度地减少了在所有情况下的数据丢失的机会。此外，由于日志文件是追加日志，它不会被不可逆地损坏。另一方面，与相同数据相比，AOF日志文件通常比RDB文件大，并且如果服务器正在经历大量写入负载，AOF可能比RDB慢。
- en: You can also enable both persistence mechanisms and get the best of both worlds.
    You can use RDB for creating backups of your data set and still ensure that your
    data is safe. In this case, Redis will use the AOF log file for building the data
    set on a server startup because it is most likely that it contains the latest
    data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以启用两种持久性机制，并兼得两全。您可以使用RDB来创建数据集的备份，并确保数据的安全。在这种情况下，Redis将使用AOF日志文件在服务器启动时构建数据集，因为它很可能包含最新的数据。
- en: If you are using Redis as a temporary data storage and do not need persistency,
    you can disable both persistence mechanisms. This means that the data sets will
    be destroyed when the server is shut down.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将Redis用作临时数据存储并且不需要持久性，您可以禁用两种持久性机制。这意味着当服务器关闭时，数据集将被销毁。
- en: Replication
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制
- en: Redis supports master-slave replication where a single master can have one or
    multiple slaves. Each slave is an exact copy of its master, and it can connect
    to both master and other slaves. In other words, a slave can be a master of other
    slaves. Since Redis 2.6, each slave is read-only by default, and all write operations
    to a slave are rejected. If we need to store temporary information to a slave,
    we have to configure that slave to allow write operations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Redis支持主从复制，其中单个主机可以有一个或多个从机。每个从机都是其主机的精确副本，并且可以连接到主机和其他从机。换句话说，从机可以是其他从机的主机。自Redis
    2.6以来，每个从机默认为只读，并且拒绝对从机的所有写操作。如果我们需要将临时信息存储到从机，我们必须配置该从机以允许写操作。
- en: Replication is non-blocking on both sides. It will not block the queries made
    to the master even when a slave or slaves are synchronizing their data for the
    very first time. Slaves can be configured to serve the old data when they are
    synchronizing their data with the master. However, incoming connections to a slave
    will be blocked for a short period of time when the old data is replaced with
    the new data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 复制在双方都是非阻塞的。即使从机或从机在第一次同步数据时，也不会阻塞对主机的查询。从机可以配置为在同步数据时提供旧数据。然而，当旧数据被新数据替换时，对从机的传入连接将被短暂地阻塞。
- en: If a slave loses connection to the master, it will either continue serving the
    old data or return an error to the clients, depending on its configuration. When
    a connection between master and a slave is lost, the slave will automatically
    reopen the connection and send a synchronization request to the master.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从机与主机失去连接，它将继续提供旧数据或向客户端返回错误，这取决于其配置。当主机和从机之间的连接丢失时，从机将自动重新打开连接并向主机发送同步请求。
- en: Publish/subscribe messaging pattern
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布/订阅消息模式
- en: The publish/subscribe messaging pattern is a messaging pattern where the message
    sender (publisher) does not send messages directly to the receiver (subscriber).
    Instead, an additional element called a **channel** is used to transport messages
    from the publisher to the subscriber. Publishers can send a message to one or
    more channels. Subscribers can select the interesting channels and receive messages
    sent to these channels by subscribing to those channels.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 发布/订阅消息模式是一种消息模式，其中消息发送者（发布者）不直接向接收者（订阅者）发送消息。相反，使用一个名为**通道**的附加元素来传输从发布者到订阅者的消息。发布者可以向一个或多个通道发送消息。订阅者可以选择感兴趣的通道，并通过订阅这些通道来接收发送到这些通道的消息。
- en: 'Let''s think of a situation where a single publisher is publishing messages
    to two channels, Channel 1 and Channel 2\. Channel 1 has two subscribers: Subscriber
    1 and Subscriber 2\. Channel 2 also has two subscribers: Subscriber 2 and Subscriber
    3\. This situation is illustrated in the following figure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一个情况，一个单一的发布者正在向两个通道发布消息，通道1和通道2。通道1有两个订阅者：订阅者1和订阅者2。通道2也有两个订阅者：订阅者2和订阅者3。这种情况在下图中有所说明：
- en: '![Publish/subscribe messaging pattern](img/9045_01_01.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![发布/订阅消息模式](img/9045_01_01.jpg)'
- en: The publish/subscribe pattern ensures that the publishers are not aware of the
    subscribers and vice versa. This gives us the possibility to divide our application
    into smaller modules, which have loose coupling between them. This makes the modules
    easier to maintain and replace if needed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 发布/订阅模式确保发布者不知道订阅者，反之亦然。这使我们有可能将应用程序分成更小的模块，它们之间的耦合度较低。这使得模块更容易维护和替换。
- en: However, the greatest advantage of the publish/subscribe pattern is also its
    greatest weakness. Firstly, our application cannot rely on the fact that a specific
    component has subscribed to a specific channel. Secondly, there is no clean way
    for us to verify if this is the case. In fact, our application cannot assume that
    anyone is listening.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，发布/订阅模式的最大优势也是它的最大弱点。首先，我们的应用程序不能依赖于特定组件已订阅特定通道的事实。其次，我们没有办法清楚地验证是否是这种情况。事实上，我们的应用程序不能假设有人在听。
- en: 'Redis offers a solid support for the publish/subscribe pattern. The main features
    of its publish/subscribe implementation are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Redis为发布/订阅模式提供了坚实的支持。其发布/订阅实现的主要特点包括：
- en: Publishers can publish messages to one or more channels at the same time
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布者可以同时向一个或多个通道发布消息
- en: Subscribers can subscribe to the interesting channels by using the name of the
    channel or a pattern containing a wildcard
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅者可以通过使用通道的名称或包含通配符的模式订阅感兴趣的通道
- en: Unsubscribing from channels also supports both name and pattern matching
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消订阅通道也支持名称和模式匹配
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have learned that:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解到：
- en: Java Persistence API was introduced to address the concerns related to EJB 2.x
    and to provide a standard approach for object-relational mapping. Its features
    were selected from the features of the most popular third party persistence frameworks.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java持久化API被引入是为了解决与EJB 2.x相关的问题，并提供对象关系映射的标准方法。它的特性是从最流行的第三方持久化框架的特性中选择的。
- en: Redis is an in-memory data store, which keeps its entire data set in memory,
    supports complex data types, can use disk as a persistent storage, and supports
    master-slave replication. It also has an implementation of the publish/subscribe
    messaging pattern.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis是一个内存数据存储，它将整个数据集保留在内存中，支持复杂数据类型，可以使用磁盘作为持久存储，并支持主从复制。它还实现了发布/订阅消息模式。
- en: In the next chapter we will learn how we can set up a web application project
    that uses Spring Data JPA and use it to implement a simple contact manager application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何设置一个使用Spring Data JPA的Web应用程序项目，并使用它来实现一个简单的联系人管理应用程序。
