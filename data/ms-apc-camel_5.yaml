- en: Chapter 5. Enterprise Integration Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 企业集成模式
- en: In previous chapters, we have seen how a processor or a bean can be used to
    implement behavioral changes on the messages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看到了如何使用处理器或bean来实现对消息的行为更改。
- en: However, some of those functions provide ways to implement solutions to common
    problems and, instead of reimplementing the same function in different routes,
    we can reuse an existing one. Some of these generic message operations are described
    in the Enterprise Integration Patterns (EIPs) from Gregor Hohpe and Bobby Woolf
    ([http://www.enterpriseintegrationpatterns.com/](http://www.enterpriseintegrationpatterns.com/)).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其中一些功能提供了实现常见问题解决方案的方法，而不是在不同的路由中重新实现相同的功能，我们可以重用现有的一个。其中一些通用消息操作在Gregor
    Hohpe和Bobby Woolf的《企业集成模式》（Enterprise Integration Patterns）中有描述([http://www.enterpriseintegrationpatterns.com/](http://www.enterpriseintegrationpatterns.com/))。
- en: 'This chapter will introduce the most used EIPs provided by Camel:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍Camel提供的最常用的EIPs：
- en: The messaging systems EIPs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息系统EIPs
- en: The messaging channels EIPs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息通道EIPs
- en: The message construction EIPs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息构建EIPs
- en: The message routing EIPs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息路由EIPs
- en: The message transformation EIPs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息转换EIPs
- en: The messaging endpoints EIPs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息端点EIPs
- en: The system management EIPs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统管理EIPs
- en: Some of these generic message operations are described in the Enterprise Integration
    Patterns (EIPs) from Gregor Hohpe and Bobby Woolf. It describes the patterns,
    Camel provides the implementation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些通用消息操作在Gregor Hohpe和Bobby Woolf的《企业集成模式》（Enterprise Integration Patterns）中有描述。它描述了模式，Camel提供了实现。
- en: EIP processors
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EIP处理器
- en: 'The purpose of an EIP pattern is to apply a change on the message or create
    a new message:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: EIP模式的目的在于对消息应用更改或创建新的消息：
- en: A change on the content of the message itself
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对消息内容本身的更改
- en: A change on the destination endpoint of the message
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对消息目标端点的更改
- en: A change on the routing depending on the message
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据消息对路由的更改
- en: Creating a new message or exchange
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的消息或交换
- en: In the previous chapter, we have seen how Camel processors and beans can be
    used to implement such changes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们看到了如何使用Camel处理器和beans来实现这样的更改。
- en: To provide support of EIPs, Camel actually provides ready-to-use processors,
    with the DSL language to directly use those processors.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供对EIPs的支持，Camel实际上提供了可直接使用的处理器，以及DSL语言来直接使用这些处理器。
- en: So, instead of reimplementing your own same processor in multiple routes, you
    can directly use an EIP processor provided by Camel.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您不必在多个路由中重新实现自己的相同处理器，可以直接使用Camel提供的EIP处理器。
- en: The EIPs are classified in different categories, depending on the change performed
    on the message and the routing function implemented. We will be covering each
    category in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 根据对消息执行的改变和实现的路由功能，EIPs被分为不同的类别。我们将在以下章节中介绍每个类别。
- en: Messaging systems EIPs
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息系统EIPs
- en: Messaging systems EIPs gather all patterns related to the delivery of messages,
    which are moving along in the routing logic.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 消息系统EIPs收集了所有与消息传递相关的模式，这些模式在路由逻辑中移动。
- en: Message Channel
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息通道
- en: The Message Channel EIP is the generic name for the communication between endpoints
    in a Camel route.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 消息通道EIP是Camel路由中端点之间通信的通用名称。
- en: 'In the examples of the previous chapters, we used endpoints with the following
    syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章的示例中，我们使用了以下语法的端点：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For instance, we can have a route as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以有一个如下所示的路由：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This route uses two endpoints (`timer` and `log`). Camel implicitly creates
    a Message Channel between the two endpoints.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由使用两个端点（`timer`和`log`）。Camel在两个端点之间隐式创建了一个消息通道。
- en: The purpose is to decouple the endpoint producing the message from the application
    consuming the message.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是解耦产生消息的端点与应用消费消息的应用。
- en: This EIP is actually used in basically all routes in an implicit way (you don't
    have to use a special notation to use Message Channel, it's in Camel).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此EIP实际上在基本上所有路由中隐式使用（您不需要使用特殊符号来使用消息通道，它在Camel中）。
- en: Message
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息
- en: Another implicit EIP in Camel is the Message EIP.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Camel中另一个隐含的EIP是消息EIP。
- en: This EIP is basically implemented by the Camel message interface and wrapped
    in an exchange.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此EIP基本上是通过Camel消息接口实现的，并封装在交换中。
- en: This EIP is used in combination with the Message Channel one—the message channel
    transports messages.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此EIP与消息通道一起使用——消息通道传输消息。
- en: Thanks to the Exchange message wrapper, Camel implements the whole Message EIP,
    including support of the message exchange patterns.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了交换消息包装器，Camel实现了整个消息EIP，包括对消息交换模式的支持。
- en: 'In a Camel Exchange, we have the following pattern property:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Camel交换中，我们有以下模式属性：
- en: If the pattern is set to `InOnly`, Camel implements an event message (a single
    inbound message)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果模式设置为`InOnly`，Camel将实现一个事件消息（单个入站消息）
- en: If the pattern is set to `InOut`, Camel implements a `request-reply` with an
    inbound and outbound message
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果模式设置为`InOut`，Camel将实现一个带有入站和出站消息的`request-reply`。
- en: The first endpoint of a Camel route (the `from`) is responsible for the creation
    of the exchange and hence, the message with the corresponding pattern. Each endpoint
    defines the expected pattern (and so if one is waiting for an outbound message
    to return to the client or not).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Camel路由的第一个端点（`from`）负责创建交换，因此，带有相应模式的消息。每个端点定义了预期的模式（因此，如果它正在等待出站消息返回给客户端或不是）。
- en: Pipeline
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: The purpose of the Pipeline EIP is to apply a series of actions using the message.
    For that, we move the message through different steps, like in a pipeline.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Pipeline EIP的目的是通过消息应用一系列操作。为此，我们将消息通过不同的步骤移动，就像在管道中一样。
- en: 'We can define a pipeline in two ways with Camel:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用两种方式用Camel定义一个管道：
- en: The implicit pipeline is what we used in previous chapters. We simply define
    the steps in the route definition itself.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐式管道是我们之前章节中使用过的。我们只需在路由定义本身中简单地定义步骤。
- en: The explicit pipeline uses the pipeline DSL syntax.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式管道使用管道DSL语法。
- en: The implicit pipeline
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐式管道
- en: The implicit pipeline is the default Camel behavior—the route definition containing
    the chain of different processors and endpoints is actually a pipeline.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式管道是Camel的默认行为——包含不同处理器和端点的路由定义实际上是一个管道。
- en: To illustrate this, we create an example containing a Camel route written with
    the Blueprint DSL.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我们创建了一个包含使用Blueprint DSL编写的Camel路由的示例。
- en: 'First, we create the following Maven `pom.xml` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建以下Maven `pom.xml`文件：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This `pom.xml` file is very simple—it just packages our route as an OSGi bundle
    that we will deploy into the Apache Karaf container. In the project, we create
    two very simple beans that just display a message when they receive the `in` message.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`pom.xml`文件非常简单——它只是将我们的路由打包为一个OSGi包，我们将将其部署到Apache Karaf容器中。在项目中，我们创建了两个非常简单的bean，它们在接收到`in`消息时只显示一条消息。
- en: 'The first bean is named `Step1Bean`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个bean命名为`Step1Bean`：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second bean is named `Step2Bean`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个bean命名为`Step2Bean`：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we create the Blueprint XML describing the route (in `src/main/resources/OSGI-INF/blueprint/route.xml`):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建描述路由的Blueprint XML（在`src/main/resources/OSGI-INF/blueprint/route.xml`）：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can see the pipeline here; Camel will route the exchange from the timer's
    endpoint to the `step1` bean, next to the `step2` bean, and finally to the `log`
    endpoint.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这里的管道；Camel将从定时器的端点路由交换到`step1` bean，然后到`step2` bean，最后到`log`端点。
- en: It's an implicit pipeline. We can see the route in action by building and deploying
    the bundle into Karaf.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个隐式管道。我们可以通过构建和部署包到Karaf中，来看到管道的实际路径。
- en: 'To build the bundle packaging both the route and the beans, we simply do:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建包含路由和bean的包，我们只需这样做：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can start a Karaf container as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式启动Karaf容器：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We install the `camel-blueprint` support in Karaf:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Karaf中安装`camel-blueprint`支持：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can now install our bundle:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以安装我们的包：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Very quickly, we can see the route execution:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们可以看到路由执行：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can note the pipeline behavior where the message flows from the timer endpoint
    to the different steps of the route execution.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到管道行为，其中消息从定时器端点流向路由执行的各个步骤。
- en: The explicit pipeline
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式管道
- en: Another way to use the pipeline EIP is by explicitly defining it with the corresponding
    DSL syntax.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管道EIP的另一种方法是使用相应的DSL语法显式定义它。
- en: The different steps are defined with the `pipeline` keyword.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的步骤用`pipeline`关键字定义。
- en: To illustrate this, we will create a route exactly like the previous one (a
    message created by a timer is sent to two beans and a log endpoint) but this time
    using the `<pipeline/>` element in the route definition.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我们将创建一个与之前完全相同的路由（由定时器创建的消息发送到两个bean和一个日志端点），但这次在路由定义中使用`<pipeline/>`元素。
- en: 'The Maven `pom.xml` file is similar to the previous one:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的`pom.xml`文件与之前的类似：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We still have our two beans that display the `in` message. The first bean is
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有两个显示`in`消息的Bean。第一个Bean如下：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The second bean that displays the `in` message is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`in`消息的第二个Bean如下：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Only the Blueprint XML describing the route is different:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 只有描述路由的Blueprint XML不同：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we did in the previous example, we build the OSGi bundle using Maven:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们使用Maven构建OSGi bundle：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We deploy our bundle in Karaf:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Karaf中部署我们的bundle：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can see that the route execution is exactly the same as it is in the previous
    example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到路由执行与上一个示例完全相同：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Basically, the routes are exactly the same internally in Camel, only the notation
    is different.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Camel内部，路由基本上完全相同，只是表示法不同。
- en: In most cases, we use the implicit pipeline (default behavior) which allows
    you to simplify the route definition.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们使用隐式管道（默认行为），这允许您简化路由定义。
- en: Message router
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息路由器
- en: The Message Router EIP moves a message to different destinations depending on
    a condition.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 消息路由器EIP根据条件将消息移动到不同的目的地。
- en: The condition is actually a predicate defined using one of the languages supported
    by Camel (simple, header, xpath, xquery, mvel, ognl, and so on).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 条件实际上是一个谓词，使用Camel支持的语言之一（simple、header、xpath、xquery、mvel、ognl等）定义的。
- en: The predicate can use any data to implement the condition. If it uses the content
    of the message itself, we talk about Content Based Router (which we will see later
    in this chapter).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词可以使用任何数据来实现条件。如果它使用消息的内容本身，我们谈论基于内容的路由器（我们将在本章后面看到）。
- en: To illustrate the Message Router EIP, we create a route that will consume files
    and copy the files to different output folders depending on the file extension.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明消息路由器EIP，我们创建了一个路由，该路由将消费文件，并根据文件扩展名将文件复制到不同的输出文件夹。
- en: 'We directly write this route using the Blueprint DSL to a `route.xml` file:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接使用Blueprint DSL将此路由写入`route.xml`文件：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can see the usage of the `<choice/>` element, which is the notation of the
    Message Router EIP.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`<choice/>`元素的使用，这是消息路由器EIP的表示法。
- en: 'In this choice, we define two conditional routings:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个选择中，我们定义了两个条件路由：
- en: Using the `simple` language, we define the first predicate checking whether
    the file extension is `.xml`. If so, the message is routed to a file endpoint
    creating an output file in the `/tmp/out/xml` folder.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`simple`语言，我们定义第一个谓词检查文件扩展名是否为`.xml`。如果是，消息将被路由到文件端点，在`/tmp/out/xml`文件夹中创建输出文件。
- en: The second condition also uses the simple language. This predicate checks whether
    the file extension is `.txt`. If so, the message is routed to a file endpoint
    creating an output file in the `/tmp/out/txt` folder.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个条件也使用简单语言。这个谓词检查文件扩展名是否为`.txt`。如果是，消息将被路由到文件端点，在`/tmp/out/txt`文件夹中创建输出文件。
- en: 'If the two first conditions are not matched, the message is routed to a file
    endpoint creating an output file in the `/tmp/out/binaries` folder. We start Karaf
    and install the `camel-blueprint` support:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前两个条件不匹配，消息将被路由到文件端点，在`/tmp/out/binaries`文件夹中创建输出文件。我们启动Karaf并安装`camel-blueprint`支持：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can now simply drop the `route.xml` file in the Karaf `deploy` folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以简单地将在`Karaf`的`deploy`文件夹中放置`route.xml`文件。
- en: In the `/tmp/in` folder, we create three files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/tmp/in`文件夹中，我们创建了三个文件。
- en: 'The first file is `file.xml`, which contains :'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一文件是`file.xml`，它包含：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The second file is `file.txt`, which contains :'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个文件是`file.txt`，它包含：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The third file is `file.csv`, which contains :'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个文件是`file.csv`，它包含：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see in the `/tmp/out` directory that the three folders have been created
    and they contain the expected files:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`/tmp/out`目录中看到创建了三个文件夹，并且它们包含预期的文件：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Message Translator
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息翻译器
- en: The Message Translator EIP is basically the transformation of the message content.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 消息翻译器EIP基本上是消息内容的转换。
- en: Some steps of the route change the content of the message.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的一些步骤会改变消息的内容。
- en: 'In Camel, you have three ways to implement a message translator:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在Camel中，你有三种方式来实现消息翻译器：
- en: You can use the transform DSL notation to call any language supported by Camel
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用transform DSL表示法调用Camel支持的所有语言。
- en: If the purpose of the translator is to convert from one data format to another,
    you can use the marshalling/unmarshalling functions provided by Camel
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果翻译器的目的是将一种数据格式转换为另一种格式，您可以使用Camel提供的序列化/反序列化函数。
- en: If you want complete control and implement complex transformation, you can use
    your own processor or bean to implement the transformation logic
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要完全控制并实现复杂的转换，你可以使用自己的处理器或 bean 来实现转换逻辑
- en: The transform notation
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换表示法
- en: It's possible to use any language supported by Camel (`simple`, `ruby`, `groovy`,
    and so on) in the `transform` keyword.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `transform` 关键字中，可以使用 Camel 支持的任何语言（`simple`、`ruby`、`groovy` 等）。
- en: The external language is used to apply a transformation on the message.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 外部语言用于对消息进行转换。
- en: 'To illustrate the usage of the transform notation, we can create a Camel route
    using the following Blueprint descriptor:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明转换表示法的用法，我们可以创建一个使用以下 Blueprint 描述符的 Camel 路由：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This Camel route uses a Message Translator EIP to prepend `Hello` to the body
    of the `in` message.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Camel 路由使用消息翻译 EIP 在 `in` 消息的主体前添加 `Hello`。
- en: The route consumes files from the `/tmp/in` folder (thanks to the `from` file
    endpoint), uses the transform notation with the simple language, and writes the
    message to a file in the `/tmp/out` folder (thanks to the `to` file endpoint).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 路由从 `/tmp/in` 文件夹中消费文件（多亏了 `from` 文件端点），使用简单的语言进行转换表示法，并将消息写入 `/tmp/out` 文件夹中的文件（多亏了
    `to` 文件端点）。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We just drop the Blueprint XML file in the Karaf `deploy` folder. We create
    the `test.txt` file in the `/tmp/in` folder, only containing:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需将 Blueprint XML 文件放入 Karaf 的 `deploy` 文件夹中。我们在 `/tmp/in` 文件夹中创建 `test.txt`
    文件，只包含：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The Camel route creates a `test.txt` file in the `/tmp/out` folder, containing:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 路由在 `/tmp/out` 文件夹中创建一个 `test.txt` 文件，包含：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can note that the Message Translator EIP changed the body of the `in` message
    (from `World` to `Hello World`).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到消息翻译 EIP 改变了 `in` 消息的主体（从 `World` 到 `Hello World`）。
- en: Using processor or bean
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用处理器或 bean
- en: In previous chapters, we have already used a Camel processor or a bean to change
    the body of the `in` message.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经使用 Camel 处理器或 bean 来改变 `in` 消息的主体。
- en: We perform the same task as we did in the previous example using a processor.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用处理器执行与上一个示例相同的任务。
- en: This time, a simple Blueprint XML file is not enough, we have to package the
    Blueprint XML and the processor in an OSGi bundle.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，一个简单的 Blueprint XML 文件是不够的，我们必须将 Blueprint XML 和处理器打包在一个 OSGi 包中。
- en: 'We create the following Maven `pom.xml` file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建以下 Maven `pom.xml` 文件：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This Maven `pom.xml` file is very simple, it just defined the `camel-core` dependency
    (required by our Camel processor) and the OSGi bundle packaging.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Maven `pom.xml` 文件非常简单，它只定义了 `camel-core` 依赖（由我们的 Camel 处理器所需）和 OSGi 包装。
- en: 'We create a `PrependProcessor` class:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 `PrependProcessor` 类：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This processor is actually the implementation of the Message Translator EIP—it
    prepends `Hello` to the inbound message.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理器实际上是消息翻译 EIP 的实现——它将 `Hello` 预先添加到传入的消息中。
- en: 'Finally, we use this processor in a Camel route written using the Blueprint
    DSL:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用这个处理器在一个使用 Blueprint DSL 编写的 Camel 路由中：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We use Maven to build and package our OSGi bundle:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Maven 来构建和打包我们的 OSGi 包：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We install our bundle in Karaf:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Karaf 中安装我们的包：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'As in the previous example, we will put a `test.txt` file in the `/tmp/in`
    folder, which contains this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们将一个 `test.txt` 文件放入 `/tmp/in` 文件夹中，它包含以下内容：
- en: '[PRE34]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, we can see `/tmp/in/test.txt` containing:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以看到 `/tmp/in/test.txt` 包含：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: So, we implemented the same Message Translator EIP but this time using a processor.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们实现了相同的消息翻译 EIP，但这次使用了一个处理器。
- en: A processor or a bean gives you complete control of the Camel Exchange, and
    allows you to implement very complex message transformations.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器或 bean 给你完全控制 Camel 交换，并允许你实现非常复杂的消息转换。
- en: Marshalling/umarshalling
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列化/反序列化
- en: Instead of changing the content of the message itself, the Message Translator
    EIP can be used to convert the message from one data format to another.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是改变消息本身的内容，消息翻译 EIP 可以用来将消息从一种数据格式转换为另一种数据格式。
- en: Camel supports different data formats and provides functions to directly convert
    from one data format to another.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 支持不同的数据格式，并提供函数直接从一种数据格式转换为另一种数据格式。
- en: To illustrate marshalling and unmarshalling, we create a route that consumes
    XML files and unmarshal/marshal the XML messages as JSON messages, which are sent
    to another file endpoint.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明序列化和反序列化，我们创建一个消费 XML 文件的路线，并将 XML 消息反序列化/序列化为 JSON 消息，这些消息被发送到另一个文件端点。
- en: 'We use the Camel Blueprint DSL to define the route:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Camel Blueprint DSL 定义路由：
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This route uses the `xmljson` Camel data format. The marshal element is the
    implementation of the Message Translator EIP, which converts the message from
    XML to JSON.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由使用 `xmljson` Camel 数据格式。marshal 元素是消息翻译器 EIP 的实现，它将消息从 XML 转换为 JSON。
- en: 'We start Karaf and install the `camel-blueprint` and `camel-xmljson` features:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 和 `camel-xmljson` 功能：
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We directly drop our `route.xml` in the `deploy` folder.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接将 `route.xml` 文件放入 `deploy` 文件夹。
- en: 'In the `/tmp/in` folder, we create the following `person.xml` file, containing:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/tmp/in` 文件夹中，我们创建以下 `person.xml` 文件，包含：
- en: '[PRE38]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `/tmp/out` folder, we can see a `person.xml` file, containing:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/tmp/out` 文件夹中，我们可以看到一个 `person.xml` 文件，包含：
- en: '[PRE39]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Our Message Translator EIP has been executed, using marshalling/unmarshalling
    to different data formats.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的消息翻译器 EIP 已经执行，使用 marshalling/unmarshalling 到不同的数据格式。
- en: Message Endpoint
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息端点
- en: The Message Endpoint EIP just defines the way an application can produce or
    consume messages in the routing system. Basically, in Camel, it's directly implemented
    and described by the `endpoint` interface. An endpoint is created by a component
    and described by an URI.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 消息端点 EIP 仅定义了应用程序如何在路由系统中产生或消费消息的方式。基本上，在 Camel 中，它是通过 `endpoint` 接口直接实现和描述的。一个端点由一个组件创建并由
    URI 描述。
- en: Messaging channels EIPs
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息通道 EIP
- en: Messaging Channel EIPs gather all the patterns moving data from one point to
    another, using a communication channel.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 消息通道 EIP 汇集了所有将数据从一个点移动到另一个点的模式，使用通信通道。
- en: Point To Point Channel
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点对点通道
- en: The Point To Point Channel EIP ensures that only one receiver consumes a message.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点通道 EIP 确保只有接收器消费一个消息。
- en: In Camel, the support of this EIP is dedicated to the components.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Camel 中，这个 EIP 的支持是专门针对组件的。
- en: Some components are designed to implement and support this EIP.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组件被设计用来实现和支持这个 EIP。
- en: 'For instance, this is the case for:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这种情况适用于：
- en: The SEDA and VM components, for communication between routes
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SEDA 和 VM 组件，用于路由之间的通信
- en: The JMS component, when working with JMS queues
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与 JMS 队列一起工作时，JMS 组件
- en: 'To illustrate the Point To Point Channel EIP, we create three routes using
    the Camel Blueprint DSL:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明点对点通道 EIP，我们使用 Camel Blueprint DSL 创建了三个路由：
- en: The first route starts with a timer and produces a message in a JMS queue
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一条路由从一个计时器开始，在 JMS 队列中产生一个消息
- en: The second and third routes consume messages from the JMS queue
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二条和第三条路由从 JMS 队列中消费消息
- en: We will see that one message will only be consumed by one consumer route.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到只有一个消息会被一个消费者路由消费。
- en: 'We create the following `route.xml` file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建以下 `route.xml` 文件：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We define a JMS connection factory that embeds an Apache ActiveMQ JMS broker.
    This connection factory is used in different Camel JMS endpoints.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个嵌入 Apache ActiveMQ JMS 代理的 JMS 连接工厂。此连接工厂用于不同的 Camel JMS 端点。
- en: 'We start a Karaf instance and we install the `camel-blueprint` and `activemq-camel`
    features:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动一个 Karaf 实例并安装 `camel-blueprint` 和 `activemq-camel` 功能：
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We can now directly drop the `route.xml` file into the Karaf `deploy` folder.
    In the log (`$KARAF_HOME/data/log`), we can see:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以直接将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹。在日志 (`$KARAF_HOME/data/log`)
    中，我们可以看到：
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We can see that each message is consumed by one route, illustrating the Point
    To Point Channel EIP.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到每个消息都由一个路由消费，说明了点对点通道 EIP。
- en: Publish Subscribe Channel
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布/订阅通道
- en: The Publish Subscribe Channel EIP is similar to the Point To Point Channel EIP,
    but instead of being consumed by only one consumer, each message is consumed by
    multiple consumers.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 发布/订阅通道 EIP 与点对点通道 EIP 类似，但不同之处在于，每个消息不是只被一个消费者消费，而是被多个消费者消费。
- en: The message is duplicated to all consumers.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 消息被复制到所有消费者。
- en: As in the Point To Point Channel EIP, Camel supports the Publish Subscribe Channel
    at a component level.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与点对点通道 EIP 类似，Camel 在组件级别支持发布/订阅通道。
- en: 'Some components are designed to implement and support this EIP, such as:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组件被设计用来实现和支持这个 EIP，例如：
- en: The JMS component when working with JMS topics
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与 JMS 主题一起工作时，JMS 组件
- en: The SEDA/VM components when working with `multipleConsumers=true` on the endpoints
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当端点上的 `multipleConsumers=true` 时，SEDA/VM 组件
- en: 'To illustrate this EIP, we update the previous example to use a topic instead
    of a queue:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个 EIP，我们将前面的例子更新为使用主题而不是队列：
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As we did in the previous example, we start Karaf and install the `camel-blueprint`
    and `activemq-camel` features:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们启动 Karaf 并安装 `camel-blueprint` 和 `activemq-camel` 功能：
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We drop the `route.xml` directly into the `deploy` folder. Now, we can see
    the following in the log:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`route.xml`文件直接放入`deploy`文件夹。现在，我们可以在日志中看到以下内容：
- en: '[PRE45]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We can note that each message has been consumed by the two routes (see the timestamps).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到每个消息都被两个路由消费了（见时间戳）。
- en: Dead Letter Channel
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 死信通道
- en: The Dead Letter Channel EIP allows you to reroute a message to another destination
    when the actual destination delivery fails.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 死信通道EIP允许你在实际目的地交付失败时将消息重新路由到另一个目的地。
- en: This EIP is related to the management of errors in Camel routes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 此EIP与Camel路由中的错误管理相关。
- en: Camel uses extensive support for error management, thanks to different error
    handlers and policies. We will see error handlers and hence, the Dead Letter Channel
    EIP, in [Chapter 7](ch07.html "Chapter 7. Error Handling"), *Error Handling*.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Camel通过不同的错误处理程序和政策提供了广泛的支持，我们将看到错误处理程序，因此，死信通道EIP将在[第7章](ch07.html "第7章。错误处理")
    *错误处理*中介绍。
- en: Guaranteed Delivery
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保证交付
- en: Guaranteed Delivery ensures that we don't lose any message. It means basically
    that the messages are persistent and stored in a persistent store.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 保证交付确保我们不会丢失任何消息。这意味着基本上消息是持久的，并存储在持久存储中。
- en: It allows you to create some checkpoints in your route—if a route stops, the
    messages are stored. As soon as the route restarts, the *pending* messages are
    processed.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许你在路由中创建一些检查点——如果路由停止，消息将被存储。一旦路由重新启动，*挂起*的消息将被处理。
- en: 'Camel, by itself, doesn''t provide storage for messages, but you can use endpoints
    allowing the storage of the messages, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Camel本身不提供消息存储，但你可以使用允许存储消息的端点，如下所示：
- en: File endpoints, where the messages are produced as files on the filesystem by
    a route, and consumed by routes. The store is actually the filesystem.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件端点，在这里消息由路由作为文件在文件系统中生成，并由路由消费。存储实际上就是文件系统。
- en: JMS endpoints, where the messages (flagged as durable messages) are added into
    a JMS queue by a route, and consumed by other routes. The message store is actually
    the broker persistent messages store.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMS端点，在这里消息（标记为持久消息）由路由添加到JMS队列中，并由其他路由消费。消息存储实际上就是代理的持久消息存储。
- en: JPA endpoints, where the messages are produced and stored in a database, and
    other routes poll the database. The message store is actually the database.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA端点，在这里消息被生成并存储在数据库中，其他路由轮询数据库。消息存储实际上就是数据库。
- en: We can illustrate this EIP using two routes sharing a directory on the filesystem
    to store the messages.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用两个共享文件系统目录的路由来展示这个EIP，以存储消息。
- en: The purpose is to see that, even if the second route is stopped, the messages
    are persistent and taken by the route as soon as it's started again.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是确保，即使第二条路由被停止，消息仍然是持久的，并且一旦重新启动，路由就会立即处理这些消息。
- en: 'We create a first `route1.xml` file, containing:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个名为`route1.xml`的第一个文件，包含：
- en: '[PRE46]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE47]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We drop the `route1.xml` into the `deploy` folder. We can see the first files
    coming into the `/tmp/exchange` folder:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`route1.xml`文件放入`deploy`文件夹。我们可以看到第一个文件进入`/tmp/exchange`文件夹：
- en: '[PRE48]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, we create a `route2.xml` file, containing:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们创建一个`route2.xml`文件，包含：
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We drop this `route2.xml` file into the `deploy` folder of Karaf.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将此`route2.xml`文件放入Karaf的`deploy`文件夹。
- en: 'Now, we can see the following in the Karaf log:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在Karaf日志中看到以下内容：
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: So even if the second route is not deployed, the messages are not lost and stored
    on the filesystem. It's an implementation of the Guaranteed Delivery EIP.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使第二条路由没有部署，消息也不会丢失，并存储在文件系统中。这是保证交付EIP的一个实现。
- en: Message Bus
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息总线
- en: The Message Bus EIP describes the architecture to plug and play applications
    that have to interact. This EIP gathers the messaging infrastructure, and the
    other layers required to implement routing.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线EIP描述了将应用程序插入并播放的架构，这些应用程序必须交互。此EIP汇集了消息基础设施，以及实现路由所需的其他层。
- en: So, basically, Camel itself is an implementation of the Message Bus EIP.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，Camel本身是实现消息总线EIP的。
- en: Message Construction EIPs
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息构造EIPs
- en: These EIPs are responsible for creating messages in response to other messages.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这些EIP负责根据其他消息创建消息。
- en: The Event Message EIP
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件消息EIP
- en: The Event Message EIP describes how to use messaging to transmit events from
    one application to another.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 事件消息EIP描述了如何使用消息传递将事件从一个应用程序传输到另一个应用程序。
- en: Camel supports this EIP by the use of the Message Exchange Pattern in the exchange.
    When defined as `InOnly`, it means that we deal with a one way event message.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Camel通过在交换中使用消息交换模式来支持这个EIP。当定义为`InOnly`时，意味着我们处理的是一个单向事件消息。
- en: So, basically, the Event Message EIP means one directional messages.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，事件消息EIP意味着单向消息。
- en: The first endpoint of the route defines the expected Exchange pattern, but,
    at any point in the route, you can force the Exchange pattern to `InOnly` to make
    it act as an Event Message EIP.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的第一个端点定义了期望的交换模式，但在路由的任何点上，你可以强制交换模式为`InOnly`，使其充当事件消息EIP。
- en: 'For this, you have to use the `inOnly` notation:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，你必须使用`inOnly`表示法：
- en: '[PRE51]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can also use the `setExchangePattern` notation:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`setExchangePattern`表示法：
- en: '[PRE52]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'It''s also possible to define the pattern as an attribute of the endpoint:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将模式定义为端点的属性：
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The Request Reply EIP
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求/响应EIP
- en: The Request Reply EIP is like the Event Message EIP, but this time, a response
    is expected from the target application.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 请求/响应EIP类似于事件消息EIP，但这次，期望从目标应用程序得到响应。
- en: As it does with Event Message, Camel supports this EIP using the Message Exchange
    pattern defined as `InOut`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 与事件消息一样，Camel通过使用定义为`InOut`的消息交换模式来支持这个EIP。
- en: Again, the `from` endpoint defines the pattern that it expects. For instance,
    a CXF endpoint will define the pattern as `InOut` as it has to return something
    to the client.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`from`端点定义了它期望的模式。例如，一个CXF端点将定义模式为`InOut`，因为它必须向客户端返回某些内容。
- en: As in the `InOnly` pattern, you can *force* the pattern to `InOut`, using the
    same notations.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InOnly`模式中，你可以使用相同的表示法*强制*模式为`InOut`。
- en: The Correlation Identifier EIP
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联标识符EIP
- en: The Correlation Identifier EIP is useful when used with the Request Reply pattern.
    With this pattern, an identifier can be added to a message, which can be used
    to correlate the response message with the request message.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当与请求/响应模式一起使用时，关联标识符EIP非常有用。使用这个模式，可以给消息添加一个标识符，该标识符可以用来关联响应消息和请求消息。
- en: Camel supports this EIP by defining a dedicated header in the message or a property
    on the exchange. This header (or a property) is actually the Correlation Identifier.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Camel通过在消息中定义一个专用头或在交换中定义一个属性来支持这个EIP。这个头（或属性）实际上是关联标识符。
- en: Some other EIPs (that we will see later) leverage this header to correlate multiple
    messages all together. For instance, the Splitter EIP defines the Correlation
    Identifier as a property of the exchanges resulting from the split (for instance,
    to be able to aggregate the messages).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他EIP（我们将在后面看到）利用这个头关联多个消息。例如，Splitter EIP将关联标识符定义为拆分结果交换的属性（例如，以便能够聚合消息）。
- en: The Return Address EIP
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回地址EIP
- en: The Return Address EIP describes how a target endpoint knows where it has to
    send a response. This EIP has to be used in combination with the Request Reply
    pattern, as we expect a response from the target endpoint.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 返回地址EIP描述了目标端点如何知道它需要将响应发送到何处。这个EIP必须与请求/响应模式一起使用，因为我们期望从目标端点得到响应。
- en: Camel supports this EIP by populating a `JMSReplyTo` header in the message in
    the case of the JMS endpoints involved.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及JMS端点的情况下，Camel通过在消息中填充`JMSReplyTo`头来支持这个EIP。
- en: When working with the JMS component, this `JMSReplyTo` header is directly used
    and transported by the broker.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JMS组件时，这个`JMSReplyTo`头被直接使用并由代理传输。
- en: 'It''s also possible to use the `ReplyTo` option on the JMS endpoint to populate
    the `JMSReplyTo` header on the fly:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在JMS端点上使用`ReplyTo`选项来动态填充`JMSReplyTo`头：
- en: '[PRE54]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Message Routing
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息路由
- en: These EIPs are the core routing patterns. It's mostly where Camel provides specific
    syntax to handle routing.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这些EIP是核心路由模式。这通常是Camel提供特定语法来处理路由的地方。
- en: The Content Based Router EIP
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于内容路由器EIP
- en: The Content Based Router EIP is a special case of the Message Router EIP.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 基于内容路由器EIP是消息路由器EIP的一个特例。
- en: As we've seen previously, the Message Router EIP is a generic routing EIP defining
    a conditional routing on the message.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前看到的，消息路由器EIP是一个通用的路由EIP，它定义了基于消息的条件路由。
- en: The Content Based Router EIP is used in cases where the condition is based on
    the content of the body of the message itself. In the Message Router example,
    the condition was on the extension of the consumed files.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 基于内容路由器EIP用于条件基于消息体内容的情况。在消息路由器示例中，条件是消费文件的扩展名。
- en: Here, to illustrate the Content Based Router EIP, we create an example that
    will route the files depending on an `XPath` predicate in the body of the message.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，为了说明基于内容的路由器EIP，我们创建了一个示例，该示例将根据消息体中的`XPath`谓词来路由文件。
- en: 'We create the following `route.xml` Blueprint description:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建以下`route.xml`蓝图描述：
- en: '[PRE55]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The route consumes files from the `/tmp/in` folder. The message body contains
    the contents of the file. We use the `XPath` predicates to test the `address`
    element in the message, as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 该路由从`/tmp/in`文件夹中消费文件。消息体包含文件内容。我们使用`XPath`谓词来测试消息中的`address`元素，如下所示：
- en: If the address is France, the message is routed to the `/tmp/out/france` folder.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果地址是法国，消息将被路由到`/tmp/out/france`文件夹。
- en: If the address is USA, the message is routed to the `/tmp/out/usa` folder.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果地址是USA，消息将被路由到`/tmp/out/usa`文件夹。
- en: If the address is not France or USA, the message is routed to the `/tmp/out/others`
    folder.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果地址不是法国或USA，消息将被路由到`/tmp/out/others`文件夹。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE56]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We drop the `route.xml` into the Karaf `deploy` folder. In the `/tmp/in` folder,
    we create the `first.xml` file, containing:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`route.xml`放入Karaf的`deploy`文件夹。在`/tmp/in`文件夹中，我们创建包含以下内容的`first.xml`文件：
- en: '[PRE57]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We also drop the `second.xml` file, containing:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还丢弃了包含以下内容的`second.xml`文件：
- en: '[PRE58]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We also drop the `third.xml` file, containing:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还丢弃包含以下内容的`third.xml`文件：
- en: '[PRE59]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We can see that the files have been routed to different folders, as expected:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到文件已按预期路由到不同的文件夹：
- en: '[PRE60]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The Message Filter EIP
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息过滤器EIP
- en: The Message Filter EIP describes how to select only the messages that we want
    to process.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 消息过滤器EIP描述了如何仅选择我们想要处理的消息。
- en: We define a predicate to match and process the messages. If the messages don't
    match, their predicate will be ignored.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个谓词来匹配和处理消息。如果消息不匹配，它们的谓词将被忽略。
- en: As in the Message Router EIP, we can use any language supported by Camel to
    write the predicate.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 与消息路由器EIP一样，我们可以使用Camel支持的所有语言来编写谓词。
- en: 'To illustrate the Message Filter EIP, we use the following `route.xml` Blueprint
    descriptor:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明消息过滤器EIP，我们使用以下`route.xml`蓝图描述符：
- en: '[PRE61]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The first route consumes the files from the `/tmp/in` folder. If the file contains
    the name element with `jbonofre`, the message is moved forward to the second route
    (thanks to the `direct` endpoint).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条路由从`/tmp/in`文件夹中消费文件。如果文件包含名为`jbonofre`的元素，则消息将被移动到第二条路由（归功于`direct`端点）。
- en: If the `XPath` predicate is not matched, the message is ignored.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`XPath`谓词不匹配，消息将被忽略。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE62]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In the `/tmp/in` folder, we create the same three files as we did in the previous
    example.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/tmp/in`文件夹中，我们创建了与上一个示例相同的三个文件。
- en: 'The `first.xml` file, containing:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 包含以下内容的`first.xml`文件：
- en: '[PRE63]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `second.xml` file, containing:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 包含以下内容的`second.xml`文件：
- en: '[PRE64]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `third.xml` file, containing:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 包含以下内容的`third.xml`文件：
- en: '[PRE65]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karaf的`log`文件中，我们可以看到：
- en: '[PRE66]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This means that only the message from the `first.xml` file has been processed.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着只有来自`first.xml`文件的消息被处理。
- en: The Dynamic Router EIP
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态路由器EIP
- en: The Dynamic Router EIP describes how to dynamically route the message. When
    using the Message Router EIP, the different routing destinations and the conditions
    are statically defined at design time.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 动态路由器EIP描述了如何动态路由消息。当使用消息路由器EIP时，不同的路由目的地和条件在设计时静态定义。
- en: With the Dynamic Router EIP, the condition and the destinations are evaluated
    at runtime, and so, can be changed dynamically.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动态路由器EIP，条件和目的地在运行时评估，因此可以动态更改。
- en: It's also possible to send the message to multiple destinations on one condition.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个条件下，也可以将消息发送到多个目的地。
- en: To illustrate this EIP, we create a route that uses a dynamic router. The dynamic
    router uses a bean to evaluate the condition and define the routing destinations.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个EIP，我们创建了一个使用动态路由器的路由。动态路由器使用一个bean来评估条件并定义路由目的地。
- en: 'We create a very simple Maven `pom.xml` file:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个非常简单的Maven `pom.xml`文件：
- en: '[PRE67]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This Maven `pom.xml` file just packages the route and the bean as an OSGi bundle.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Maven `pom.xml`文件只是将路由和bean打包成一个OSGi包。
- en: 'We create the `DynamicRouterBean` class:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建`DynamicRouterBean`类：
- en: '[PRE68]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This bean randomly and dynamically routes the message to two endpoints—if the
    generated random number is greater than `500`, the message is routed to the `direct:large`
    endpoint, otherwise, the message is routed to the `direct:small` endpoint.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这个豆子随机且动态地将消息路由到两个端点——如果生成的随机数大于 `500`，则消息被路由到 `direct:large` 端点，否则，消息被路由到 `direct:small`
    端点。
- en: 'We now create the route using a Blueprint descriptor:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用 Blueprint 描述符创建路由：
- en: '[PRE69]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This route uses the bean in the `dynamicRouter` notation. We create the two
    routes corresponding to the target endpoints of the dynamic router.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由使用 `dynamicRouter` 中的豆子。我们创建了两个路由，对应于动态路由的目标端点。
- en: 'We build our OSGi bundle with:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下方式构建我们的 OSGi 捆绑包：
- en: '[PRE70]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Our bundle is now ready to be deployed in Karaf.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们捆绑的现在已准备好在 Karaf 中部署。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE71]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We deploy and start our bundle:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们部署并启动我们的捆绑包：
- en: '[PRE72]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE73]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Multicast and Recipient List EIPs
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Multicast 和 Recipient List EIPs
- en: The Recipient List EIP describes how to send the same message to multiple destinations.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Recipient List EIP 描述了如何将相同的消息发送到多个目的地。
- en: 'We have two kinds of Recipient List:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种接收者列表：
- en: When the destinations are statically defined (at design time), we talk about
    the static Recipient List or multicast.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当目的地在设计时静态定义时，我们谈论静态接收者列表或多播。
- en: When the destinations are dynamically defined (at runtime), we talk about the
    dynamic recipient list
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当目的地在运行时动态定义时，我们谈论动态接收者列表
- en: The Multicast EIP
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Multicast EIP
- en: Let's start with a first example of the Multicast EIP (or a static recipient
    list).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Multicast EIP 的第一个例子（或静态接收者列表）开始。
- en: 'We create the following `route.xml` Blueprint descriptor:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了以下 `route.xml` Blueprint 描述符：
- en: '[PRE74]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The first route creates a `Hello chapter5m` message every 5 seconds. This message
    is sent to three destinations, `france`, `usa`, and `spain`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个路由每 5 秒创建一个 `Hello chapter5m` 消息。此消息被发送到三个目的地，`france`、`usa` 和 `spain`。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE75]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: We drop our `route.xml` file into the Karaf `deploy` folder.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹。
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE76]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: We can see that each message has been sent to the three destinations.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到每条消息都已发送到三个目的地。
- en: The Recipient List EIP
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Recipient List EIP
- en: To illustrate a dynamic recipient list, we create a route that uses a bean to
    dynamically define the target destinations.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明动态接收者列表，我们创建了一个使用豆子动态定义目标目的地的路由。
- en: 'We create a simple Maven `pom.xml` file:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的 Maven `pom.xml` 文件：
- en: '[PRE77]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This Maven `pom.xml` file just packages our route and the bean as an OSGi bundle.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Maven `pom.xml` 文件只是将我们的路由和豆子打包成一个 OSGi 捆绑包。
- en: 'We create a simple `RouterBean` class that randomly changes the recipient list:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的 `RouterBean` 类，该类随机更改接收者列表：
- en: '[PRE78]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: If the random integer is greater than `500`, the message is routed to the `direct:one`,
    `direct:two`, and `direct:three` endpoints. Otherwise, the message is just routed
    to the `direct:one` and `direct:two` endpoints.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 如果随机整数大于 `500`，则消息被路由到 `direct:one`、`direct:two` 和 `direct:three` 端点。否则，消息仅被路由到
    `direct:one` 和 `direct:two` 端点。
- en: 'Finally, we use this bean to populate a header in a route. This header is used
    by the recipient list:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用这个豆子来填充路由中的头信息。这个头信息被接收者列表使用：
- en: '[PRE79]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'We build our bundle:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建我们的捆绑包：
- en: '[PRE80]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Our bundle is ready to be deployed in Karaf.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的捆绑包现在可以部署到 Karaf 中。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE81]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'We install our bundle:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装我们的捆绑包：
- en: '[PRE82]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE83]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: We can see that the destinations dynamically change, depending on the result
    of the randomized integer.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到目的地根据随机整数的计算结果动态变化。
- en: The Splitter and Aggregator EIPs
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Splitter 和 Aggregator EIPs
- en: These EIPs are responsible for splitting a big message into chunks, or aggregating
    small chunks in one whole message.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 EIP 负责将大消息分割成块，或将小块聚合成一个完整的消息。
- en: The Splitter EIP
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Splitter EIP
- en: The Splitter EIP describes how to split big messages into multiple chunks, processed
    individually.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: Splitter EIP 描述了如何将大消息分割成多个块，并单独处理。
- en: Camel supports this EIP, allowing you to define the splitting logic using any
    supported language or a processor/bean.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 支持这个 EIP，允许你使用任何支持的编程语言或处理器/豆子来定义分割逻辑。
- en: 'To illustrate the Splitter EIP, we create the following `route.xml` Blueprint
    descriptor:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Splitter EIP，我们创建了以下 `route.xml` Blueprint 描述符：
- en: '[PRE84]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: This route consumes files from the `/tmp/in` folder, and splits the content
    using `XPath`.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由从`/tmp/in`文件夹中的文件消费，并使用`XPath`拆分内容。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE85]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: We drop the `route.xml` into the Karaf `deploy` folder.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`route.xml`放入Karaf的`deploy`文件夹。
- en: 'In the `/tmp/in` folder, we create the following `persons.xml` file:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/tmp/in`文件夹中，我们创建了以下`persons.xml`文件：
- en: '[PRE86]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karaf的`log`文件中，我们可以看到：
- en: '[PRE87]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: We can see that the *big* file has been split into *small* messages.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到大文件已经被拆分成小消息。
- en: Note
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Camel supports multiple split strategies (using languages, tokens, custom beans,
    and so on).
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: Camel支持多种拆分策略（使用语言、令牌、自定义bean等）。
- en: Aggregator
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聚合器
- en: The Aggregator EIP is the exact opposite of the Splitter EIP—we receive multiple
    *small* messages that we want to aggregate into one *big* message.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合器EIP是拆分器EIP的完全相反——我们接收多个小消息，我们希望将它们聚合成一个大的消息。
- en: 'Camel supports this EIP. You have to provide two things to the aggregator:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Camel支持此EIP。您必须向聚合器提供两件事：
- en: A bean implementing Camel `AggregationStrategy`, which defines the way you aggregate
    the new message with the previously aggregated message (the *message growing*)
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实现Camel `AggregationStrategy`的bean，该bean定义了如何将新消息与先前聚合的消息聚合在一起（*消息增长*）
- en: The aggregation completion, which defines when we consider the aggregation to
    be complete
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合完成，它定义了我们何时认为聚合已完成
- en: 'You have different alternatives for the completion of the following task:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下任务有多种不同的选择：
- en: The `completionTimeout` is an inactivity timeout. If no new exchanges come into
    the aggregator after this timeout, the aggregation is considered to be complete.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completionTimeout`是一个不活动超时。如果在超时后没有新的交换进入聚合器，则认为聚合已完成。'
- en: The `completionInterval` considers the aggregation to be complete after a given
    amount of time.
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completionInterval`考虑在给定时间后聚合已完成。'
- en: The `completionSize` is a static number of exchanges to aggregate.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completionSize`是静态的交换次数，用于聚合。'
- en: The `completionPredicate` is the most evolved. The aggregation is considered
    to be complete when the predicate is true.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completionPredicate`是最先进的。当谓词为真时，认为聚合已完成。'
- en: To illustrate the Aggregator EIP, we create a route that aggregates a static
    number of messages.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明聚合器EIP，我们创建了一个路由，该路由聚合了一定数量的静态消息。
- en: We package the bean (used for the aggregation strategy) and the route definition
    as an OSGi bundle.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于聚合策略的bean（以及路由定义）打包成一个OSGi包。
- en: 'We create the following Maven `pom.xml`:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了以下Maven `pom.xml`：
- en: '[PRE88]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'We create the `StringAggregator` class, which implements an aggregation strategy
    appending strings:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`StringAggregator`类，该类实现了一个字符串聚合策略：
- en: '[PRE89]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'We create the route using the Blueprint DSL with an aggregator with our `StringAggregator`
    and a `completionSize` class:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Blueprint DSL创建路由，其中包含我们的`StringAggregator`聚合器和`completionSize`类来创建路由：
- en: '[PRE90]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The messages correlation (to identify that we are in the same aggregation unit)
    is defined using the header ID. This route aggregates five messages together.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 消息相关性（用于识别我们是否在同一个聚合单元中）使用头部ID定义。此路由将五个消息一起聚合。
- en: 'We build our OSGi bundle:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建我们的OSGi包：
- en: '[PRE91]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Our bundle is ready to be deployed in Karaf.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的包已准备好在Karaf中部署。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE92]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'We install and start our bundle:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装并启动我们的包：
- en: '[PRE93]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karaf的`log`文件中，我们可以看到：
- en: '[PRE94]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: We can see that our route aggregated 5 `Hello chapter5p` messages.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的路由聚合了5条`Hello chapter5p`消息。
- en: The Resequencer EIP
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重排序器EIP
- en: The Resequencer EIP describes how to sort the processing of the messages. It
    uses a comparator to define the sequence of the messages.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 重排序器EIP描述了如何排序消息的处理。它使用比较器来定义消息的顺序。
- en: Camel uses an expression to create the comparator. It means that the comparator
    can use the body of the message, a header, and so on. You define the expression
    in the Camel resequencer notation.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: Camel使用一个表达式来创建比较器。这意味着比较器可以使用消息体、头部等信息。您在Camel重排序符号中定义表达式。
- en: 'To illustrate the Resequencer EIP, we use the following `route.xml` Blueprint
    descriptor:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明重排序器EIP，我们使用了以下`route.xml` Blueprint描述符：
- en: '[PRE95]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Two routes generate a message every 2 seconds. Both routes send the message
    to the resequencer route. The resequencer uses a string comparator on the body
    of the messages, to guarantee the same processing order, `one` first, `two` after.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 两个路由每 2 秒生成一条消息。两个路由都将消息发送到重新排序路由。重新排序路由使用消息体的字符串比较器，以保证相同的处理顺序，`one` 先，`two`
    后。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE96]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: We drop the `route.xml` file into the Karaf `deploy` folder.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹。
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE97]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: We can see that the messages are always processed in the same sequence, `one`
    first, `two` after.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，消息总是按照相同的顺序处理，`one` 先，`two` 后。
- en: The Composed Message Processor EIP
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合消息处理器 EIP
- en: 'The Composed Message Processor EIP is a combination of the Splitter EIP and
    the Aggregator EIP. The purpose is:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 组合消息处理器 EIP 是分割器 EIP 和聚合器 EIP 的组合。其目的是：
- en: To split a big message into chunk messages
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将大消息分割成块消息
- en: To process each chunk independently
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立处理每个块
- en: To reaggregate each chunk response as a big message again
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个块响应重新聚合为一个大消息
- en: 'Camel supports this EIP in two ways:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 以两种方式支持此 EIP：
- en: Using a pure combination of the Splitter and Aggregator EIPs
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分割器和聚合器 EIP 的纯组合
- en: Using only Splitter
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅使用分割器
- en: The later is the easiest to use. It allows you to define the aggregation strategy
    directly on the splitter. The aggregation completion is defined by the Splitter
    as he knows the number of chunks he has created.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 后者是使用起来最简单的。它允许您直接在分割器上定义聚合策略。聚合完成由分割器定义，因为它知道它创建了多少个块。
- en: We illustrate the splitter-based Composed Message Processor EIP with an example
    that splits a `persons.xml` file with `XPath`, processes each person individually,
    and reaggregates the resulting message as a big one.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用一个例子来说明基于分割器的组合消息处理器 EIP，该例子使用 `XPath` 分割 `persons.xml` 文件，逐个处理每个人，并将结果消息重新聚合为一个大的消息。
- en: 'We create the following Maven `pom.xml` file:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建以下 Maven `pom.xml` 文件：
- en: '[PRE98]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'We create a custom aggregation strategy, `MyAggregator`, that works directly
    using the message string:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个自定义聚合策略，`MyAggregator`，它直接使用消息字符串：
- en: '[PRE99]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'We create a route using the Blueprint DSL:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Blueprint DSL 创建一个路由：
- en: '[PRE100]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: This route consumes files from the `/tmp/in` folder, splits the messages using
    an `XPath` expression, and reaggregates after using the `MyAggregator` strategy.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由从 `/tmp/in` 文件夹中消费文件，使用 `XPath` 表达式分割消息，然后使用 `MyAggregator` 策略重新聚合。
- en: 'We can now compile our bundle:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以编译我们的包：
- en: '[PRE101]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE102]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'We install and start our bundle:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装并启动我们的包：
- en: '[PRE103]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE104]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: We can see that the splitter isolated each person that has been processed individually.
    After the split, the messages have been reaggregated again, as we can see in the
    latest `log` message.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，分割器将每个已单独处理的人隔离开来。分割后，消息再次被重新聚合，正如我们在最新的 `log` 消息中看到的那样。
- en: The Scatter-Gather EIP
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 散列-收集 EIP
- en: The Scatter-Gather EIP is similar to the Composed Message Processor EIP, but
    instead of splitting and aggregating, we first use a recipient list (static or
    dynamic) and an aggregator with the response coming from the different recipients.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 散列-收集 EIP 与组合消息处理器 EIP 类似，但不是分割和聚合，我们首先使用一个接收者列表（静态或动态）和一个聚合器，响应来自不同的接收者。
- en: Camel supports this EIP with the combination of recipient list/multicast and
    aggregate.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过结合接收者列表/多播和聚合支持此 EIP。
- en: The Routing Slip EIP
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由条 EIP
- en: The Routing Slip EIP describes how to dynamically define the processing steps
    of a message.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 路由条 EIP 描述了如何动态定义消息的处理步骤。
- en: In a Camel route, the routing steps are statically defined; it's the route itself.
    However, you can use the `routingSlip` notation to define the next steps of the
    routing at runtime.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Camel 路由中，路由步骤是静态定义的；它是路由本身。然而，您可以使用 `routingSlip` 语法在运行时定义路由的下一步。
- en: It's exactly like a dynamic recipient list, but the processing is not in parallel,
    it's in sequence.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 它就像一个动态接收者列表，但处理不是并行的，而是顺序的。
- en: To illustrate this EIP, we create a route that uses a bean to position a header
    containing the next processing steps.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个 EIP，我们创建一个使用 bean 定位包含下一步处理步骤的头的路由。
- en: 'We create the following Maven `pom.xml` file:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建以下 Maven `pom.xml` 文件：
- en: '[PRE105]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We create the following `RoutingSlipBean` class, which randomly defines the
    next steps of the routing:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了以下`RoutingSlipBean`类，它随机定义路由的下一步：
- en: '[PRE106]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'We use this bean in a Camel route written using the Blueprint DSL to define
    a `slip` header. This header is used by `routingslip`:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个Bean在用Blueprint DSL编写的Camel路由中定义一个`slip`头。这个头由`routingslip`使用：
- en: '[PRE107]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'We now build our OSGi bundle:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在构建我们的OSGi包：
- en: '[PRE108]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Our bundle is ready to be deployed in Karaf.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的包已准备好在Karaf中部署。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE109]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'We install and start our bundle:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装并启动我们的包：
- en: '[PRE110]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karaf的`log`文件中，我们可以看到：
- en: '[PRE111]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: We can see (with the timestamps) that, sometimes, both one and two steps/routes
    are called, and sometimes only one is called.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到（带有时间戳），有时会调用一个步骤/路由，有时会调用两个步骤/路由。
- en: The Throttler and Sampling EIPs
  id: totrans-479
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节流和样本EIP
- en: These EIPs provide support of messaging Quality of Service (QoS). This allows
    you to implement some Service Level Agreement (SLA), limiting the threshold on
    some endpoints.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 这些EIP提供了消息服务质量（QoS）的支持。这允许你实施某些服务级别协议（SLA），限制某些端点的阈值。
- en: The Throttler EIP
  id: totrans-481
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节流EIP
- en: The Throttler EIP describes how to limit the number of messages reaching an
    endpoint, to avoid it. This allows you to guarantee SLA on routes, parts of routes,
    and applications.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 节流EIP描述了如何限制达到端点的消息数量，以避免它。这允许你在路由、路由的部分和应用程序上保证服务级别协议（SLA）。
- en: Camel supports this EIP by providing the `throttle` notation. On the Throttle,
    you define a given period, and the maximum number of messages (or requests) allowed
    in the period. This number of messages can be static, or dynamic (using a header
    for instance).
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: Camel通过提供`throttle`标记支持这个EIP。在节流中，你定义一个给定时间段和该时间段内允许的最大消息（或请求）数量。这个数量可以是静态的，也可以是动态的（例如使用头）。
- en: 'To illustrate the Throttler EIP, we create the following `route.xml` Blueprint
    descriptor:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明节流EIP，我们创建了以下`route.xml`蓝图描述符：
- en: '[PRE112]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE113]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: We drop the `route.xml` into the Karaf `deploy` folder.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`route.xml`放入Karaf的`deploy`文件夹。
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karaf的`log`文件中，我们可以看到：
- en: '[PRE114]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: We can note the timestamp where we have only one message every two seconds,
    whereas the timer creates a message every 0.5 seconds; we have here an illustration
    of the Throttler EIP.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到，我们每两秒只有一个消息的时间戳，而定时器每0.5秒创建一个消息；这里有一个节流EIP的说明。
- en: The Sampling EIP
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样本EIP
- en: 'The Sampling EIP is related to the Throttler EIP. The purpose is to take a
    message sample periodically:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 样本EIP与节流EIP相关。目的是定期获取消息样本：
- en: Every given number of messages
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每给定数量的消息
- en: Every given time
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每给定的时间
- en: All the *other* traffic is ignored.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 所有*其他*流量都被忽略。
- en: Camel supports this EIP via the usage of the `sample` notation. The sample notation
    supports the `messageFrequency` or `samplePeriod` properties.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: Camel通过使用`sample`标记支持这个EIP。样本标记支持`messageFrequency`或`samplePeriod`属性。
- en: 'To illustrate the Sampling EIP, we create the following `route.xml` blueprint
    XML descriptor:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明样本EIP，我们创建了以下`route.xml`蓝图XML描述符：
- en: '[PRE115]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: The first route creates a message every 0.5 seconds. We log with the `regular`
    log. We use a `sample` notation to send the fifth message to the frequency route
    (so every five messages, we send the sample).
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条路由每0.5秒创建一个消息。我们使用`regular`日志记录。我们使用`sample`标记将第五个消息发送到频率路由（因此每五个消息，我们发送样本）。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Karaf并安装`camel-blueprint`功能：
- en: '[PRE116]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: We drop our `route.xml` file into the Karaf `deploy` folder.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的`route.xml`文件放入Karaf的`deploy`文件夹。
- en: 'In the Karaf `log` file, we can see:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karaf的`log`文件中，我们可以看到：
- en: '[PRE117]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: So, we can see that the frequency route gets a `sample` notation for every five
    messages of regular load.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到频率路由为每五个常规负载消息获得一个`sample`标记。
- en: The Delayer EIP
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟EIP
- en: The Delayer EIP allows you to add some kind of pause in the delivery of a message.
    It's like a sleep in the routing.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟EIP允许你在消息传递过程中添加某种暂停。它就像在路由中的睡眠。
- en: Camel supports this EIP using the `delay` notation. The delay notation accepts
    an expression to get the pause time. You can use any language supported by Camel
    for this expression.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: Camel使用`delay`标记支持这个EIP。延迟标记接受一个表达式来获取暂停时间。你可以使用Camel支持的任何语言来编写这个表达式。
- en: We used this EIP in the `chapter5g` and `chapter5h` examples.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`chapter5g`和`chapter5h`示例中使用了这个EIP。
- en: In these examples, we used a constant to define the delay time. It's also possible
    to use an expression returning the delay time. As always, the expression can be
    written using any language supported by Camel.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们使用常数来定义延迟时间。同样，表达式可以使用 Camel 支持的任何语言编写。
- en: To illustrate the Delayer EIP with a dynamic delay time, we create a route that
    uses a bean to define the delay time (randomly).
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明具有动态延迟时间的 Delayer EIP，我们创建了一个使用豆子定义延迟时间（随机）的路由。
- en: 'We create the following Maven `pom.xml` file:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了以下 Maven `pom.xml` 文件：
- en: '[PRE118]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: This Maven `pom.xml` file is very simple, just packaging the Blueprint XML definition
    of the route and the bean as an OSGi bundle.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Maven `pom.xml` 文件非常简单，只是将路由和豆子的 Blueprint XML 定义打包成一个 OSGi 包。
- en: 'We create a simple bean that randomly creates the delay time:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的豆子，它随机创建延迟时间：
- en: '[PRE119]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'We create a route using the blueprint DSL:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用蓝图 DSL 创建一个路由：
- en: '[PRE120]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: This route creates a message every second with a timer, and uses the bean in
    the `delay` notation.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由每秒使用计时器创建一条消息，并使用`delay`注解中的豆子。
- en: 'We build our OSGi bundle:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建我们的 OSGi 包：
- en: '[PRE121]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Our OSGi bundle is ready to be deployed in Karaf.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 OSGi 包已准备好在 Karaf 中部署。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE122]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'We deploy our OSGi bundle in Karaf:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Karaf 的 OSGi 包中部署我们的包：
- en: '[PRE123]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'If we take a look in the Karaf `log` file, we can see:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 Karaf 的 `log` 文件，我们可以看到：
- en: '[PRE124]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: We can note that the message is delivered randomly (see the timestamp), showing
    the Delayer EIP in action.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到消息是随机投递的（见时间戳），显示了 Delayer EIP 的作用。
- en: The Load Balancer EIP
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡器 EIP
- en: The Load Balancer EIP dispatches the load of messages to different endpoints.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器 EIP 将消息负载分发到不同的端点。
- en: 'Camel supports this EIP with the `loadBalance` notation, which also supports
    different balancing policies such as:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用 `loadBalance` 注解支持此 EIP，它还支持不同的平衡策略，例如：
- en: The round-robin policy uses a kind of *circle* between the different endpoints
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮询策略在各个端点之间使用一种 *循环* 方式。
- en: The random policy picks up one endpoint randomly
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机策略随机选择一个端点。
- en: The sticky policy uses an expression to select the target endpoint
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粘性策略使用表达式来选择目标端点。
- en: The topic policy sends the message to all the endpoints (like a JMS topic)
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题策略将消息发送到所有端点（类似于 JMS 主题）。
- en: The failover policy forwards the message to the next endpoint if the first target
    failed
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果第一个目标失败，故障转移策略将消息转发到下一个端点。
- en: The weighted round-robin policy is like the round-robin policy, but you can
    give a ratio to the different endpoints to use them on high priority
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加权轮询策略类似于轮询策略，但你可以为不同的端点提供一个比率，以便在较高优先级下使用它们。
- en: The weighted random policy is like the random policy, but you can give a ratio
    to the different endpoints to use them on high priority
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加权随机策略类似于随机策略，但你可以为不同的端点提供一个比率，以便在较高优先级下使用它们。
- en: The custom policy allows you to implement your own load balancing policy
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义策略允许你实现自己的负载均衡策略。
- en: 'To illustrate the Load Balancer EIP, we use the following `route.xml` file:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明负载均衡器 EIP，我们使用以下 `route.xml` 文件：
- en: '[PRE125]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The first route creates a message every second. The message is load balanced
    with the round-robin policy to the three endpoints: `direct:one`, `direct:two`,
    and `direct:three`.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条路由每秒创建一条消息。该消息使用轮询策略负载均衡到三个端点：`direct:one`、`direct:two` 和 `direct:three`。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE126]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'We drop the `route.xml` file into the Karaf `deploy` folder. In the Karaf `log`
    file, we can see:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹。在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE127]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Here, we note that each message is load balanced to the three endpoints in a
    round-robin manner.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们注意到每条消息都以轮询方式负载均衡到三个端点。
- en: The Loop EIP
  id: totrans-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环 EIP
- en: The Loop EIP describes how to iterate a message on the same endpoint multiple
    times.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 循环 EIP 描述了如何在同一端点上多次迭代消息。
- en: Camel supports this EIP using the `loop` notation. The number of iterations
    can be a constant, or the result of an expression (using any language supported
    by Camel).
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用 `loop` 注解支持此 EIP。迭代次数可以是常数，也可以是表达式的结果（使用 Camel 支持的任何语言）。
- en: 'To illustrate the Loop EIP, we create the following `route.xml` blueprint descriptor:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明循环 EIP，我们创建以下 `route.xml` 蓝图描述符：
- en: '[PRE128]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: This route creates a message every second and logs this message. The message
    is sent to a loop performing three iterations.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由每秒创建一条消息并记录此消息。消息被发送到一个执行三次迭代的循环中。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE129]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'We drop the `route.xml` file into the Karaf `deploy` folder. In the Karaf `log`
    file, we can see:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹中。在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE130]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: We can note that the message has been processed three times by the loop route.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到消息已经被循环路由处理了三次。
- en: Message Transformation EIPs
  id: totrans-561
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息转换 EIPs
- en: These EIPs are extensions of the Message Translator EIP, and are dedicated to
    some special use cases.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 EIP 是消息翻译器 EIP 的扩展，并针对一些特殊用例。
- en: The Content Enricher EIP
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容丰富器 EIP
- en: The Content Enricher EIP describes how to enrich the message with another system.
    For instance, the message contains an identifier, and you want to populate the
    data associated with this ID from a database.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 内容丰富器 EIP 描述了如何使用另一个系统丰富消息。例如，消息包含一个标识符，你希望从数据库中填充与该 ID 相关的数据。
- en: To implement this EIP, you can use a bean or a processor as you do in the Message
    Translator EIP.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这个 EIP，你可以使用一个 bean 或处理器，就像你在消息翻译器 EIP 中做的那样。
- en: You can also use an endpoint that uses a transformation tool (such as `Velocity`,
    `Xslt`, and so on).
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用一个使用转换工具（如 `Velocity`、`Xslt` 等）的端点。
- en: 'However, Camel provides two notations dedicated to content enrichment. They
    are as follows:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Camel 提供了两个专门用于内容丰富的符号。它们如下所示：
- en: '`enrich` uses a producer endpoint to retrieve the data and use an aggregation
    strategy (like in the Aggregator EIP) to merge the data. For instance, `enrich`
    is used to call a webservice or another direct endpoint.'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enrich` 使用生产者端点检索数据，并使用聚合策略（如聚合器 EIP 中的策略）合并数据。例如，`enrich` 用于调用 web 服务或另一个直接端点。'
- en: '`pollEnrich`, on the other hand, uses a consumer endpoint to poll the data
    and use an aggregation strategy to merge the data. For instance, `pollEnrich`
    is used when polling a file on the filesystem.'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，`pollEnrich` 使用消费者端点轮询数据，并使用聚合策略（如聚合器 EIP 中的策略）合并数据。例如，当在文件系统上轮询文件时使用 `pollEnrich`。
- en: The Content Filter EIP
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容过滤器 EIP
- en: The Content Filter EIP describes how to remove part of the content of the message
    when the message is too large.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 内容过滤器 EIP 描述了当消息过大时如何移除消息的部分内容。
- en: 'Camel supports this EIP by:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过以下方式支持这个 EIP：
- en: Using a bean or a processor as in the Message Translator EIP
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类似于消息翻译器 EIP 中的 bean 或处理器
- en: Using the `setBody` notation containing a filter expression (such as `XPath`)
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包含一个过滤器表达式（如 `XPath`）的 `setBody` 符号
- en: The Claim Check EIP
  id: totrans-575
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索赔检查 EIP
- en: The Claim Check EIP describes how to replace the content of the message with
    a claim check (unique key), which you can use later to retrieve the message again.
    The message content is identified by the identifier and stored temporarily in
    a store such as a database or the filesystem. This pattern is really interesting
    to deal with very large messages that you don't want to transport to all parts
    of the routing.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 索赔检查 EIP 描述了如何用索赔检查（唯一键）替换消息的内容，你可以稍后使用它来再次检索消息。消息内容通过标识符识别，并暂时存储在数据库或文件系统等存储中。这种模式对于处理你不想传输到路由所有部分的非常大的消息来说非常有趣。
- en: Camel supports this EIP by combining Pipeline and a dedicated bean to store
    and retrieve the message using the identifier.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过结合 Pipeline 和一个专门的 bean 来支持这个 EIP，使用标识符存储和检索消息。
- en: The Normalizer EIP
  id: totrans-578
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准化器 EIP
- en: The Normalizer EIP is a combination of the Message Router EIP to deal with multiple
    message formats, and transform the messages into a canonical and normalized message
    format. One *classic* use is to transform all messages into a unique canonical
    format.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化器 EIP 是消息路由器 EIP 的组合，用于处理多种消息格式，并将消息转换为规范化和标准化的消息格式。一个 *经典* 的用途是将所有消息转换为唯一的规范格式。
- en: Camel supports this EIP by combining a content-based router and a series of
    beans to translate the message into the normalized format.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过结合基于内容的路由器和一系列的 beans 来支持这个 EIP，将消息转换为标准化格式。
- en: The Sort EIP
  id: totrans-581
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序 EIP
- en: The Sort EIP sorts the content of the message. Basically, it applies a comparator
    to the message body.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 排序 EIP 对消息的内容进行排序。基本上，它将比较器应用于消息体。
- en: Camel supports this EIP using the `sort` notation. You can provide what you
    want to sort (basically the body) and optionally, the comparator to use.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用 `sort` 符号支持这个 EIP。你可以提供你想要排序的内容（基本上是消息体），以及可选的比较器。
- en: The Validate EIP
  id: totrans-584
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证 EIP
- en: The Validate EIP uses an expression or a predicate to validate the content of
    the message. This EIP allows you to validate the payload of a message before processing
    it. Thanks to this, you avoid mistakes due to an invalid format.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 EIP 使用表达式或谓词来验证消息的内容。此 EIP 允许您在处理之前验证消息的有效负载。因此，您可以避免因格式无效而造成的错误。
- en: Camel supports this EIP with the `validate` notation. The validate notation
    expects an expression, which is defined using any language supported by Camel.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用 `validate` 符号支持此 EIP。`validate` 符号期望一个表达式，该表达式可以使用 Camel 支持的任何语言定义。
- en: The Messaging Endpoints EIPs
  id: totrans-587
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息端点 EIP
- en: The Messaging Endpoints EIPs are related to endpoints in a Camel route. Camel
    supports them implicitly by using the different features provided by the endpoints.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 消息端点 EIP 与 Camel 路由中的端点相关。Camel 通过使用端点提供的不同功能隐式地支持它们。
- en: The Messaging Mapper EIP
  id: totrans-589
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息映射器 EIP
- en: The Messaging Mapper EIP is actually the same thing as the Message Translator
    EIP, just located at the endpoint level.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 消息映射器 EIP 实际上与消息翻译器 EIP 是同一件事，只是位于端点级别。
- en: In Camel, it just means that you use a bean or a processor in the same way that
    you do to implement the Message Translator EIP.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Camel 中，这意味着您使用一个豆或处理器的方式与实现消息翻译器 EIP 的方式相同。
- en: The Event Driven Consumer EIP
  id: totrans-592
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件驱动消费者 EIP
- en: The Event Driven Consumer EIP describes an endpoint that listens for incoming
    messages. The endpoint reacts when it gets a message.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动消费者 EIP 描述了一个端点，该端点监听传入的消息。当它收到消息时，端点会做出反应。
- en: Camel supports this EIP by providing the components' bootstrapping endpoints
    that can work this way. It's the case for the CXF or JMS components, for instance.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过提供可以以这种方式工作的组件引导端点来支持此 EIP。例如，对于 CXF 或 JMS 组件来说就是这样。
- en: This EIP is supported implicitly by Camel (you don't have to use any special
    notation).
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 此 EIP 由 Camel 隐式支持（您不需要使用任何特殊符号）。
- en: The Polling Consumer EIP
  id: totrans-596
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮询消费者 EIP
- en: The Polling Consumer EIP describes an endpoint that periodically polls a system
    (database, file system) to generate messages.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 轮询消费者 EIP 描述了一个端点，该端点定期轮询系统（数据库、文件系统）以生成消息。
- en: As in the Event Driven Consumer EIP, Camel supports this EIP by providing the
    components' bootstrapping endpoints that can work this way. This is the case for
    the file or FTP components, for instance.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 与事件驱动消费者 EIP 一样，Camel 通过提供可以以这种方式工作的组件引导端点来支持此 EIP。例如，对于文件或 FTP 组件来说就是这样。
- en: This EIP is supported implicitly by Camel (you don't have to use any special
    notation).
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 此 EIP 由 Camel 隐式支持（您不需要使用任何特殊符号）。
- en: The Competing Consumer EIP
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 竞争消费者 EIP
- en: The Competing Consumer EIP describes how to use multiple concurrent consumers
    on a single endpoint.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 竞争消费者 EIP 描述了如何在单个端点上使用多个并发消费者。
- en: Camel supports this EIP on some components. For instance, the SEDA, VM, and
    JMS components support this EIP using the `concurrentConsumers` property (with
    a value greater than `1`).
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 在某些组件上支持此 EIP。例如，SEDA、VM 和 JMS 组件使用 `concurrentConsumers` 属性（值大于 `1`）来支持此
    EIP。
- en: The Message Dispatcher EIP
  id: totrans-603
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息调度器 EIP
- en: The Message Dispatcher EIP describes how to dispatch a message to different
    endpoints, depending on some conditions. It's basically the same as the Message
    Router EIP.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 消息调度器 EIP 描述了如何根据某些条件将消息调度到不同的端点。它基本上与消息路由器 EIP 相同。
- en: 'Camel supports the Message Dispatcher EIP in two ways:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 以两种方式支持消息调度器 EIP：
- en: Using the Content Based Router EIP (and so, the `choice` notation)
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于内容的路由器 EIP（以及 `choice` 符号）
- en: Using the JMS component (and a message selector)
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JMS 组件（以及消息选择器）
- en: The Selective Consumer EIP
  id: totrans-608
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择性消费者 EIP
- en: The Selective Consumer EIP describes how an endpoint can consume only some messages,
    based on a filter.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性消费者 EIP 描述了端点如何根据过滤器仅消费一些消息。
- en: 'Camel supports this EIP in two ways:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 以两种方式支持此 EIP：
- en: Using the Message Filter EIP (and the `filter` notation)
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用消息过滤器 EIP（以及 `filter` 符号）
- en: Using a message selector on the JMS component
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JMS 组件上使用消息选择器
- en: The Durable Subscriber EIP
  id: totrans-613
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久订阅者 EIP
- en: The Durable Subscriber EIP describes how to use a publish-subscribe model, where
    the messages are stored when the subscriber is not connected, which are waiting
    to be delivered when they are back online.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 持久订阅者 EIP 描述了如何使用发布-订阅模型，其中当订阅者未连接时，消息将被存储，当它们重新在线时，将等待交付。
- en: Camel supports this EIP using the JMS component. A JMS endpoint consumer on
    a topic supports the `clientId` and `durableSubscriptionName` properties, allowing
    it to act as a durable subscriber.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用 JMS 组件来支持这个 EIP。一个主题上的 JMS 端点消费者支持 `clientId` 和 `durableSubscriptionName`
    属性，允许它充当持久订阅者。
- en: The Idempotent Consumer EIP
  id: totrans-616
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Idempotent Consumer EIP
- en: The Idempotent Consumer EIP is used to filter duplicate messages, by identifying
    each message uniquely. It acts as a message filter to filter the duplicated messages.
    Basically, each message identifier is stored in a backend, and the EIP checks
    each incoming message, if it's not already present in the store.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: Idempotent Consumer EIP 用于通过唯一标识每条消息来过滤重复消息。它充当消息过滤器以过滤重复的消息。基本上，每个消息标识符都存储在后端，EIP
    会检查每条传入的消息，如果它尚未存在于存储中。
- en: 'Camel supports this EIP with the `idempotentConsumer` notation. Different message
    stores are available:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用 `idempotentConsumer` 语法支持这个 EIP。不同的消息存储可用：
- en: '`MemoryIdempotentRepository` stores the messages in a HashMap in the memory'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MemoryIdempotentRepository` 在内存中的 HashMap 中存储消息'
- en: '`FileIdempotentRepository` stores the messages on the filesystem (in a property
    file)'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileIdempotentRepository` 在文件系统（属性文件中）上存储消息'
- en: '`HazelcastIdempotentRepository` stores the messages on a Hazelcast-distributed
    HashMap'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HazelcastIdempotentRepository` 在 Hazelcast 分布式 HashMap 中存储消息'
- en: '`JdbcMessageIdRepository` stores the messages in a database'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JdbcMessageIdRepository` 在数据库中存储消息'
- en: The Transactional Client EIP
  id: totrans-623
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Transactional Client EIP
- en: The Transactional Client EIP describes how an endpoint can participate in a
    transaction. This means that it's possible that the client explicitly performs
    commit and rollback on a transaction. The client can be considered to be a transactional
    resource and can therefore manage a two-phase commit.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: Transactional Client EIP 描述了一个端点如何参与事务。这意味着客户端可以显式地执行事务的提交和回滚。客户端可以被视为事务性资源，因此可以管理两阶段提交。
- en: Camel supports this EIP by providing the components' supporting transactions.
    This is the case for the JMS endpoint.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过提供组件支持的事务来支持这个 EIP。对于 JMS 端点来说也是如此。
- en: The Message Gateway and Service Activator EIPs
  id: totrans-626
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息网关和服务激活器 EIP
- en: The Message Gateway EIP describes how to wrap a message format to another message
    format. Basically, it wraps a Java interface as a message exchange.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 消息网关 EIP 描述了如何将一种消息格式包装成另一种消息格式。基本上，它将 Java 接口作为消息交换进行包装。
- en: Camel supports this EIP by providing components that support such wrapping,
    for instance, the Bean and CXF components.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过提供支持此类包装的组件（例如 Bean 和 CXF 组件）来支持这个 EIP。
- en: Basically, the Service Activator EIP is very similar to the Message Gateway
    EIP.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，服务激活器 EIP 与消息网关 EIP 非常相似。
- en: System Management EIPs
  id: totrans-630
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统管理 EIP
- en: These EIPs are not directly related to the messages. They provide a very convenient
    way to implement system and are useful in analyzing and managing the routing system
    itself.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 EIP 与消息没有直接关系。它们提供了实现系统的一种非常方便的方式，并且在分析和管理路由系统本身时非常有用。
- en: The ControlBus EIP
  id: totrans-632
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ControlBus EIP
- en: The purpose of the ControlBus EIP is to be able to manage and control the routing
    system itself. This means being able to stop the routing system, start it again,
    get details about the routing activity, and so on.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: ControlBus EIP 的目的是能够管理和控制路由系统本身。这意味着能够停止路由系统，重新启动它，获取路由活动的详细信息，等等。
- en: 'Camel supports this EIP in two ways:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 以两种方式支持这个 EIP：
- en: Camel provides a lot of JMX MBeans, where you can find a lot of metrics and
    control the involved routes, processors, components, and so on.
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Camel 提供了许多 JMX MBeans，您可以在其中找到许多指标并控制涉及的路线、处理器、组件等。
- en: Camel provides a `controlbus` component that you can use to manage the Camel
    routes.
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Camel 提供了一个 `controlbus` 组件，您可以使用它来管理 Camel 路线。
- en: Using a `controlbus` endpoint, you can send a message, for instance, to stop
    or start a route.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `controlbus` 端点，您可以发送消息，例如，用于停止或启动路由。
- en: The Detour EIP
  id: totrans-638
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Detour EIP
- en: The Detour EIP allows you to send messages on additional and specific steps
    when a control condition is met. You can use it to add extra validation, test,
    and debug steps when needed.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: Detour EIP 允许在满足控制条件时在额外的特定步骤上发送消息。您可以在需要时使用它来添加额外的验证、测试和调试步骤。
- en: Camel supports this EIP with a message router. The condition of the message
    router is implemented with a bean; this bean implements the logic to define whether
    the detour is needed or not.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过消息路由器支持这个 EIP。消息路由器的条件通过一个豆子实现；这个豆子实现了定义是否需要绕行的逻辑。
- en: The Wire Tap EIP
  id: totrans-641
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wire Tap EIP
- en: The Wire Tap EIP allows you to send a copy of the message to a specific endpoint,
    without impacting the main route. This EIP is very useful to implement logging
    or auditing system.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: Wire Tap EIP 允许您将消息的副本发送到特定的端点，而不会影响主路由。这个 EIP 在实现日志记录或审计系统时非常有用。
- en: Camel supports this EIP with the `wireTap` notation.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 支持这个 EIP，使用 `wireTap` 注记。
- en: 'To illustrate the Wire Tap EIP, we create the following `route.xml` blueprint
    descriptor:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Wire Tap EIP，我们创建了以下 `route.xml` 蓝图描述符：
- en: '[PRE131]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: The first route creates a message every 5 seconds. The Wire Tap EIP sends a
    copy of the message to the `wiretap` route. The main route keeps on processing,
    using a delay of 3 seconds.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条路由每 5 秒创建一条消息。Wire Tap EIP 将消息的副本发送到 `wiretap` 路由。主路由继续处理，使用 3 秒的延迟。
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE132]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'We drop our `route.xml` into the Karaf `deploy` folder. In the Karaf `log`
    file, we can see:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹中。在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE133]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The wire tap message has been logged, whereas the main route is still on the
    fly. We note here that the `wire tap route` doesn't impact the main one (in terms
    of performances or blocking messages).
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: Wire Tap 消息已被记录，而主路由仍在进行中。我们在此指出，`wire tap route` 不会影响主路由（在性能或阻塞消息方面）。
- en: The Wire Tap EIP is especially interesting when the logging backend can take
    time (using a JDBC appender for instance).
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 当日志后端可以花费时间（例如使用 JDBC 追踪器）时，Wire Tap EIP 特别有趣。
- en: The Message History EIP
  id: totrans-653
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Message History EIP
- en: The Message History EIP is used to analyze and debug the flow of messages.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: Message History EIP 用于分析和调试消息流。
- en: Basically, it means attaching a history to a message that provides the list
    of all the endpoints that the message passed through.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着将历史记录附加到消息上，提供消息通过的所有端点的列表。
- en: Camel supports this EIP with the Camel Tracer feature. The Tracer is basically
    an interceptor on the channels; it traces all exchange details.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 通过 Camel Tracer 功能支持这个 EIP。Tracer 主要是通道上的拦截器；它追踪所有交换细节。
- en: Due to this information, you can see where the message passed through the body
    of the message on each endpoint, and so on.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些信息，您可以看到消息在每个端点通过消息体的情况，等等。
- en: Every Camel route embeds the Tracer feature, but it's disabled by default. You
    can enable the Tracer via JMX on the route MBean.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Camel 路由都嵌入 Tracer 功能，但默认情况下是禁用的。您可以通过 JMX 在路由 MBean 上启用 Tracer。
- en: The Log EIP
  id: totrans-659
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log EIP
- en: The Log EIP allows you to create a log message with all or part of the message.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: Log EIP 允许您创建包含消息全部或部分内容的日志消息。
- en: 'Camel supports this EIP in two ways:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 以两种方式支持这个 EIP：
- en: Using the log component, as we did in most of the examples of this chapter
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志组件，正如我们在本章的大部分示例中所做的那样
- en: Providing the `log` notation, allowing you to specify the log message format
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了 `log` 注记，允许您指定日志消息的格式。
- en: 'To illustrate the Log EIP, we create the following `route.xml` blueprint descriptor:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Log EIP，我们创建了以下 `route.xml` 蓝图描述符：
- en: '[PRE134]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: We can see here the two ways to log—using the log component or using the `log`
    notation.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两种日志记录方式——使用日志组件或使用 `log` 注记。
- en: The `log` notation (EIP) gives you complete control over what you want to log,
    the log level, the logger name, and possibly the log markup.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '`log` 注记（EIP）让您完全控制要记录的内容、日志级别、记录器名称，以及可能的日志标记。'
- en: 'We start Karaf and install the `camel-blueprint` feature:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动 Karaf 并安装 `camel-blueprint` 功能：
- en: '[PRE135]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'We drop our `route.xml` file into the Karaf `deploy` folder. In the Karaf `log`
    file, we can see:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `route.xml` 文件放入 Karaf 的 `deploy` 文件夹中。在 Karaf 的 `log` 文件中，我们可以看到：
- en: '[PRE136]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Here, we can see the log messages generated by the log component and the Log
    EIP.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到由日志组件和 Log EIP 生成的日志消息。
- en: Summary
  id: totrans-673
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have seen that Camel supports all kinds of Enterprise Integration Patterns;
    from Messaging Systems EIPs to System Management EIPs, you are now ready to use
    the patterns that you need, and can easily implement them in your routes.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 Camel 支持所有类型的 Enterprise Integration Patterns；从 Messaging Systems EIPs
    到 System Management EIPs，您现在可以准备使用所需的模式，并且可以轻松地在路由中实现它们。
- en: The notations are a very convenient way to describe and specify complex routing
    behaviors. The combination of the connectivity components and the Enterprise Integration
    Patterns makes Camel the most flexible and powerful routing system available.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 注记是描述和指定复杂路由行为的一种非常方便的方式。连接性组件和 Enterprise Integration Patterns 的组合使 Camel 成为最灵活和强大的路由系统。
- en: And, if the provided components or patterns don't suit your requirements, you
    can always create your own specific component, as we will see in the next chapter.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的组件或模式不符合您的需求，您始终可以创建自己的特定组件，正如我们将在下一章中看到的。
