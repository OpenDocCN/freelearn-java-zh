- en: Chapter 3. Performing Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 执行查询
- en: In the previous chapter, we created various types of persistent objects and
    mapped them to Lucene search indexes in various ways. However, we have basically
    used the same keyword query in all the versions of the example application so
    far.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了各种类型的持久化对象，并将它们以各种方式映射到Lucene搜索索引中。然而，到目前为止，示例应用程序的所有版本基本上都使用了相同的关键词查询。
- en: In this chapter, we will explore other search query types offered by the Hibernate
    Search DSL, as well as important features such as sorting and pagination that
    are common to all of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Hibernate Search DSL提供的其他搜索查询类型，以及所有它们共有的重要特性，如排序和分页。
- en: Mapping API versus query API
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射API与查询API
- en: So far, we discussed API alternatives for mapping classes to the database with
    Hibernate ORM. You can map your classes with XML or annotations, using JPA or
    the traditional API, and Hibernate Search will work fine so long as you are aware
    of some minor differences.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了使用Hibernate ORM将类映射到数据库的各种API选项。你可以使用XML或注解来映射你的类，运用JPA或传统的API，只要注意一些细微的差异，Hibernate
    Search就能正常工作。
- en: However, when we talk about which API a Hibernate application uses, there are
    two parts to the answer. Not only is there more than one approach for mapping
    classes to the database, there are also options for how to query the database
    at runtime. Hibernate ORM has its traditional API, based on the `SessionFactory`
    and `Session` classes. It also offers an implementation of the corresponding JPA
    standards, built around `EntityManagerFactory` and `EntityManager`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们谈论一个Hibernate应用程序使用哪个API时，答案有两个部分。不仅有一个以上的方法将类映射到数据库，还有运行时查询数据库的选项。Hibernate
    ORM有其传统的API，基于`SessionFactory`和`Session`类。它还提供了一个对应JPA标准的实现，围绕`EntityManagerFactory`和`EntityManager`构建。
- en: You might have noticed that in the sample code so far, we've been mapping classes
    to the database with JPA annotations and using the traditional Hibernate `Session`
    class to query them. This may seem confusing at first, but the mapping and the
    query APIs are essentially interchangeable. You can mix and match!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，在迄今为止的示例代码中，我们一直使用JPA注解将类映射到数据库，并使用传统的Hibernate `Session`类来查询它们。这可能一开始看起来有些令人困惑，但映射和查询API实际上是可互换的。你可以混合使用！
- en: So which approach should you use in the Hibernate Search projects? There are
    advantages to sticking with common standards as much as possible. Once you are
    experienced with JPA, those skills transfer when you work on other projects that
    use different JPA implementations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在Hibernate Search项目中你应该使用哪种方法呢？尽可能坚持常见标准是有优势的。一旦你熟悉了JPA，这些技能在你从事使用不同JPA实现的其他项目时是可以转移的。
- en: On the other hand, Hibernate ORM's traditional API is more powerful than the
    generic JPA standards. Also, Hibernate Search is an extension of Hibernate ORM.
    You can't migrate a project to a different JPA implementation without first finding
    some other search strategy altogether.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Hibernate ORM的传统API比通用的JPA标准更强大。此外，Hibernate Search是Hibernate ORM的扩展。在没有找到其他的搜索策略之前，你不能将一个项目迁移到一个不同的JPA实现。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: So in a nutshell, there is a strong argument for using JPA standards whenever
    they are adequate. However, Hibernate Search requires Hibernate ORM anyway, so
    there's no sense in being too dogmatic. Throughout this book, most of the example
    code will use JPA annotations for mapping classes, and use the traditional Hibernate
    `Session` class for queries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以简而言之，尽可能使用JPA标准的论据是很强的。然而，Hibernate Search本来就需要Hibernate ORM，所以过于教条是没有意义的。在这本书中，大多数示例代码将使用JPA注解来映射类，并使用传统的Hibernate
    `Session`类来进行查询。
- en: Using JPA for queries
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JPA进行查询
- en: Although we will focus on the traditional query API, the downloadable source
    code also contains a different version of the example application in a `chapter3-entitymanager`
    folder. This VAPORware Marketplace variation demonstrates the use of JPA across
    the board, for both mapping and queries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将重点放在传统的查询API上，但可下载的源代码还包含一个不同版本的示例应用程序，在`chapter3-entitymanager`文件夹中。这个VAPORware
    Marketplace变体展示了JPA全面使用的情况，用于映射和查询。
- en: 'In the search controller servlet, rather than using a Hibernate `SessionFactory`
    object to create a `Session` object, it uses a JPA `EntityManagerFactory` instance
    to create an `EntityManager` object:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索控制器servlet中，我们没有使用Hibernate `SessionFactory`对象来创建`Session`对象，而是使用JPA `EntityManagerFactory`实例来创建`EntityManager`对象：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We have already seen code samples that use the traditional query API. In those
    previous examples, the Hibernate ORM `Session` objects were wrapped within Hibernate
    Search `FullTextSession` objects. These then produced Hibernate `SearchFullTextQuery`
    objects, which implement the core `org.hibernate.Query` interface:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了使用传统查询API的代码示例。在之前的示例中，Hibernate ORM的`Session`对象被包裹在Hibernate Search的`FullTextSession`对象中。这些然后生成了实现核心`org.hibernate.Query`接口的Hibernate
    `SearchFullTextQuery`对象：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Constrast that with JPA, where regular `EntityManager` objects are likewise
    wrapped by `FullTextEntityManager` objects. These create `FullTextQuery` objects,
    implementing the standard `javax.persistence.Query` interface:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与JPA相比，常规的`EntityManager`对象同样被`FullTextEntityManager`对象包装。这些创建了实现标准`javax.persistence.Query`接口的`FullTextQuery`对象：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The traditional `FullTextQuery` class and its JPA counterpart are very similar,
    but they are separate classes imported from different Java packages. Both offer
    hooks to much of the Hibernate Search functionality that we've seen so far, and
    will further explore.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的`FullTextQuery`类及其JPA对应类非常相似，但它们是来自不同Java包的分开的类。两者都提供了大量我们迄今为止所看到的Hibernate
    Search功能的钩子，并将进一步探索。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Either version of `FullTextQuery` can be cast to its respective query type,
    although doing so costs you direct access to the Hibernate Search methods. So,
    be sure to call any extension methods prior to casting.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何`FullTextQuery`版本都可以被强制转换为其相应的查询类型，尽管这样做会失去对Hibernate Search方法的直接访问。所以，在转换之前一定要调用任何扩展方法。
- en: If you need to access the non-standard methods after casting to a JPA query,
    then you can use that interface's `unwrap()` method to get back to the underlying
    `FullTextQuery` implementation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在将JPA查询强制转换后需要访问非标准方法，那么你可以使用该接口的`unwrap()`方法回到底层的`FullTextQuery`实现。
- en: Setting up a project for Hibernate Search and JPA
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Hibernate Search和JPA设置项目
- en: When your Maven-based project includes the `hibernate-search` dependency, it
    automatically pulls over three dozen related dependencies for you. Unfortunately,
    JPA query support is not one of them. To use JPA-style queries, we must declare
    an extra `hibernate-entitymanager` dependency ourselves.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的基于Maven的项目包含了`hibernate-search`依赖时，它会自动为你拉取三十多个相关依赖。不幸的是，JPA查询支持并不是其中之一。为了使用JPA风格的查询，我们必须自己声明一个额外的`hibernate-entitymanager`依赖。
- en: Its version needs to match the version of `hibernate-core` that is already in
    the dependency hierarchy. This will not always be in sync with the `hibernate-search`
    version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它的版本需要与已经在依赖层次中`hibernate-core`的版本匹配。这不会总是与`hibernate-search`版本同步。
- en: 'Your IDE may offer a way to present the dependency hierarchy visually. Either
    way, you can always use Maven from the command line to get the same information
    with this command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你的IDE可能提供了一种以视觉方式展示依赖层次的方法。无论如何，你总是可以用命令行Maven来用这个命令得到相同的信息：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Setting up a project for Hibernate Search and JPA](img/9205_03_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![为Hibernate Search和JPA设置项目](img/9205_03_02.jpg)'
- en: 'As shown in this output, Hibernate Search version 4.2.0.Final uses core Hibernate
    ORM version 4.1.9.Final. So a `hibernate-entitymanager` dependency should be added
    to the POM, using the same version as core:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如本输出所示，Hibernate Search 4.2.0.Final使用核心Hibernate ORM 4.1.9.Final版本。因此，应该在POM中添加一个`hibernate-entitymanager`依赖，使用与核心相同的版本：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Hibernate Search DSL
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hibernate Search DSL
- en: '[Chapter 1](ch01.html "Chapter 1. Your First Application"), *Your First Application*,
    introduced the Hibernate Search DSL, which is the most straightforward approach
    for writing search queries. When using the DSL, method calls are chained together
    in such a way that the series resembles a programming language in its own right.
    If you have worked with criteria queries in Hibernate ORM, then this style will
    appear very familiar.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. 你的第一个应用程序"), *你的第一个应用程序*, 介绍了Hibernate Search DSL，这是编写搜索查询的最直接方法。在使用DSL时，方法调用是以一种类似于编程语言的方式链接在一起的。如果你有在Hibernate
    ORM中使用标准查询的经验，那么这种风格会看起来非常熟悉。'
- en: Whether you are using the traditional `FullTextSession` object or the JPA-style
    `FullTextEntityManager` object, each passes a Lucene query that was generated
    by the `QueryBuilder` class. This class is the starting point for the Hibernate
    Search DSL, and it offers several Lucene query types.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是使用传统的`FullTextSession`对象还是JPA风格的`FullTextEntityManager`对象，每个都传递了一个由`QueryBuilder`类生成的Lucene查询。这个类是Hibernate
    Search DSL的起点，并提供了几种Lucene查询类型。
- en: Keyword query
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键字查询
- en: The most basic form of search, which we have glimpsed at already, is the **keyword
    query**. As the name suggests, this query type searches for one or more particular
    words.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要了解的最基本的搜索形式是**关键词查询**。正如名称所暗示的，这种查询类型搜索一个或多个特定的单词。
- en: 'The first step is to obtain a `QueryBuilder` object, configured for searching
    on a given entity:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是获取一个`QueryBuilder`对象，该对象配置为对给定实体进行搜索：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From there, the following diagram describes the possible flows. Dotted gray
    arrows represent optional side paths:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，以下图表描述了可能的流程。虚线灰色箭头代表可选的侧路径：
- en: '![Keyword query](img/9205OS_03_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![关键词查询](img/9205OS_03_03.jpg)'
- en: Keyword query flow (dotted gray arrows represent optional paths)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词查询流程（虚线灰色箭头代表可选路径）
- en: 'In the actual Java code, the DSL for a keyword query would look similar to
    the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的Java代码中，关键词查询的DSL将类似于以下内容：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `onField` method takes the name of a field that is indexed for the relevant
    entity. If the field is not included in that Lucene index, then the query will
    break. Associated or embedded object fields may also be searched, using the format
    `"[container-field-name].[field-name]`" format (for example, `supportedDevices.name`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`onField`方法采用一个索引了相关实体的字段名称。如果该字段不包括在那个Lucene索引中，那么查询将失败。还可以搜索相关或内嵌对象字段，使用`"[container-field-name].[field-name]"`格式（例如，`supportedDevices.name`）。'
- en: Optionally, one or more `andField` methods may be used to search multiple fields.
    Its parameter works in the exact same way as `onField`. Alternatively, you can
    declare multiple fields all in one step with `onFields`, as shown in the preceding
    code snippet.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性地，可以使用一个或多个`andField`方法来搜索多个字段。它的参数与`onField`完全一样工作。或者，您可以一次性通过`onFields`声明多个字段，如前面的代码片段所示。
- en: The matching method takes the keyword(s) for which the query is to be searched.
    This value will generally be a string, although technically the parameter type
    is a generic object in case you use a field bridge (discussed in the next chapter).
    Assuming that you pass a string, it may be single keyword or a series of keywords
    separated by whitespace. By default, Hibernate Search will tokenize the string
    and search for each keyword individually.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配方法采用要进行查询的关键词。这个值通常是一个字符串，尽管从技术上讲，参数类型是一个泛型对象，以防您使用字段桥（下一章讨论）。假设您传递了一个字符串，它可能是一个单独的关键词或由空白字符分隔的一系列关键词。默认情况下，Hibernate
    Search将分词字符串并分别搜索每个关键词。
- en: 'Finally, the `createQuery` method terminates the DSL and returns a Lucene query
    object. That object may then be used by `FullTextSession` (or `FullTextEntityManager`)
    to create the final Hibernate Search `FullTextQuery` object:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`createQuery`方法终止DSL并返回一个Lucene查询对象。该对象然后可以由`FullTextSession`（或`FullTextEntityManager`）用来创建最终的Hibernate
    Search `FullTextQuery`对象：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Fuzzy search
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模糊搜索
- en: When we use a search engine today, we take for granted that it will be smart
    enough to fix our typos when we are "close enough" to the correct spelling. One
    way to add this intelligence to Hibernate Search is by making plain keyword queries
    **fuzzy**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们今天使用搜索引擎时，我们默认它会智能到足以在我们“足够接近”正确拼写时修正我们的拼写错误。向Hibernate Search添加这种智能的一种方法是将普通关键词查询**模糊化**。
- en: With a fuzzy search, keywords match against fields even when they are off by
    one or more characters. The query runs with a **threshold** value ranging from
    `0` to `1`, where `0` means that everything matches, and `1` means that only exact
    matches are acceptable. The fuzziness of the query depends on how close to zero
    you set the threshold.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模糊搜索，关键词即使相差一个或多个字符也能与字段匹配。查询运行时有一个介于`0`到`1`之间的**阈值**，其中`0`意味着一切都匹配，而`1`意味着只接受精确匹配。查询的模糊度取决于您将阈值设置得多接近于零。
- en: 'The DSL starts with the same keyword method and eventually resumes the keyword
    query flow with `onField` or `onFields`. However, in between are some new flow
    possibilities, shown as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DSL以相同的关键词方法开始，最终通过`onField`或`onFields`继续关键词查询流程。然而，在这两者之间有一些新的流程可能性，如下所示：
- en: '![Fuzzy search](img/9205OS_03_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![模糊搜索](img/9205OS_03_04.jpg)'
- en: Fuzzy search flow (dotted gray arrows represent optional paths)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊搜索流程（虚线灰色箭头代表可选路径）
- en: The fuzzy method simply makes a normal keyword query "fuzzy", with a default
    threshold value of `0.5` (for example, balanced between the two extremes). You
    can proceed from there with the regular keyword query flow, and that would be
    perfectly fine.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊方法只是使普通关键词查询变得“模糊”，默认阈值值为`0.5`（例如，平衡两个极端之间）。您可以从那里继续常规关键词查询流程，这将完全没问题。
- en: However, you have the option of calling `withThreshold` to specify a different
    fuzziness value. In this chapter, versions of the VAPORware Marketplace application
    add fuzziness to the keyword query, with a threshold value of `0.7`. This is strict
    enough to avoid too many false positives, but fuzzy enough that a misspelled search
    for "rodio" will now match against the "Athena Internet Radio" app.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可以选择调用`withThreshold`来指定不同的模糊度值。在本章中，VAPORware Marketplace应用程序的版本为关键词查询增加了模糊度，阈值设置为`0.7`。这个值足够严格以避免过多的假阳性，但足够模糊，以至于现在拼写错误的搜索“rodio”将匹配“Athena
    Internet Radio”应用程序。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In addition to (or instead of) `withThreshold`, you may also use `withPrefixLength`
    to adjust the query fuzziness. This integer value is a number of characters at
    the beginning of each word that you want to exclude from the fuzziness calculation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了（或代替）`withThreshold`，您还可以使用`withPrefixLength`来调整查询的模糊度。这个整数值是在每个单词的开头您想要从模糊度计算中排除的字符数。
- en: Wildcard search
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通配符搜索
- en: The second variation on a keyword query doesn't involve any higher math algorithms.
    If you have ever used a pattern like `*.java` to list all files in a directory,
    then you already have the basic idea.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词查询的第二个变体不涉及任何高级数学算法。如果您曾经使用过像`*.java`这样的模式来列出目录中的所有文件，那么您已经有了基本概念。
- en: Adding the **wildcard** method causes a normal keyword query to treat a question
    mark (`?`) as a valid substitute for any single character. For example, the keyword
    `201?` would match the field values `2010`, `2011`, `2012`, and so on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 添加**通配符**方法使得普通关键词查询将问号（`?`）视为任何单个字符的有效替代品。例如，关键词`201?`将匹配字段值`2010`、`2011`、`2012`等。
- en: The asterisk (`*`) becomes a substitute for any sequence of zero or more characters.
    The keyword `down*` matches `download`, `downtown`, and so on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 星号（`*`）成为任何零个或多个字符序列的替代品。关键词`down*`匹配`download`、`downtown`等词汇。
- en: The Hibernate Search DSL for a wildcard search is the same as that for a regular
    keyword query, only with the zero-parameter `wildcard` method added at the beginning.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate Search DSL的通配符搜索与常规关键词查询相同，只是在最前面增加了零参数的`wildcard`方法。
- en: '![Wildcard search](img/9205OS_03_05.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![通配符搜索](img/9205OS_03_05.jpg)'
- en: Wildcard search flow (dotted gray arrows represent optional paths)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符搜索流程（虚线灰色箭头代表可选路径）
- en: Exact phrase query
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精确短语查询
- en: When you type a string of keywords into a search engine, you expect to see results
    matching one or more of those keywords. Not all of the keywords might be present
    in each result, and they might not appear in the same order that you typed them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在搜索引擎中输入一组关键词时，你期望看到匹配其中一个或多个关键词的结果。每个结果中可能不都包含所有关键词，它们可能不会按照你输入的顺序出现。
- en: However, it has become customary that when you place double quotes around a
    string, you expect the search results to contain that exact phrase.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在已经习惯于当你将字符串用双引号括起来时，你期望搜索结果包含这个确切的短语。
- en: The Hibernate Search DSL offers a **phrase query** flow for searches of this
    type.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate Search DSL为这类搜索提供了**短语查询**流程。
- en: '![Exact phrase query](img/9205OS_03_06.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![精确短语查询](img/9205OS_03_06.jpg)'
- en: Exact phrase query flow (dotted gray arrows represent optional paths)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 精确短语查询流程（虚线灰色箭头代表可选路径）
- en: The `onField` and `andField` methods behave in the same way as they do with
    keyword queries. The `sentence` method differs from `matching` only in that its
    input must be a `String`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`onField`和`andField`方法的行为与关键词查询相同。`sentence`方法与`matching`的区别在于，其输入必须是`String`。'
- en: A primitive form of fuzziness is available to phrase queries, by using the optional
    `withSlop` clause. This method takes an integer parameter, representing the number
    of "extra" words that can be found within a phrase before it is no longer considered
    a match.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 短语查询可以通过使用可选的`withSlop`子句来实现一种模糊性。该方法接受一个整数参数，代表在短语内可以找到的“额外”单词数，在达到这个数量之前，短语仍被视为匹配。
- en: 'This chapter''s version of the VAPORware Marketplace application now checks
    for double quotes around the user''s search string. When the input is quoted,
    the application replaces the keyword query with a phrase query instead:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中VAPORware Marketplace应用程序的版本现在会检查用户搜索字符串周围是否有双引号。当输入被引号括起来时，应用程序将关键词查询替换为短语查询：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Range query
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围查询
- en: Phrase queries and the various keyword search types, are all about matching
    fields to a search term. A **range query** is bit different, in that it looks
    for fields that are bounded by one or more search terms. In other words, is a
    field greater than or less than a given value, or in between two values?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 短语查询和各种关键词搜索类型，都是关于将字段匹配到搜索词。**范围查询**有点不同，因为它寻找被一个或多个搜索词限定的字段。也就是说，一个字段是大于还是小于给定值，还是在大于或小于两个值之间？
- en: '![Range query](img/9205OS_03_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![范围查询](img/9205OS_03_07.jpg)'
- en: Range query flow (dotted gray arrows represent optional paths)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 范围查询流程（虚线灰色箭头代表可选路径）
- en: When the preceding method is used, the queried field(s) must have values greater
    than or equal to the input parameter. That parameter is of the generic `Object`
    type for flexibility. Dates and numeric values are typically used, although strings
    are perfectly fine and will be compared based on an alphabetical order.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用前述方法时，查询的字段必须大于或等于输入参数的值。这个参数是通用的`Object`类型，以增加灵活性。通常使用日期和数字值，尽管字符串也非常合适，并且会根据字母顺序进行比较。
- en: As you might guess, the next method is a counterpart in which values must be
    less than or equal to the input parameter. To declare that matches must fall in
    between two parameters, inclusively, you would use the `from` and `to` methods
    (they must be used together).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能会猜到的，下一个方法是一个对应的方法，其中的值必须小于或等于输入参数。要声明匹配必须在两个参数之间，包括这两个参数，你就得使用`from`和`to`方法（它们必须一起使用）。
- en: An `excludeLimit` clause may be applied to any of these clauses. It has the
    effect of making the range exclusive rather than inclusive. In other words, `from(5).to(10).excludeLimit()`
    matches a range of `5 <= x < 10`. The modifier could have been placed on the `from`
    clause rather than the `to`, or on both of them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对这些子句中的任何一个应用`excludeLimit`子句。它的作用是将范围变为排他而非包含。换句话说，`from(5).to(10).excludeLimit()`匹配一个`5
    <= x < 10`的范围。修改器可以放在`from`子句上，而不是`to`，或者同时放在两个上。
- en: 'In our VAPORware Marketplace application, we previously declined to annotate
    `CustomerReview.stars` for indexing. However, if we had annotated it with `@Field`,
    then we could search for all 4- and 5-star reviews with a query similar to the
    following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的VAPORware Marketplace应用程序中，我们之前拒绝为`CustomerReview.stars`标注索引。然而，如果我们用`@Field`标注它，那么我们就可以用类似于以下的查询来搜索所有4星和5星的评论：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Boolean (combination) queries
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔（组合）查询
- en: 'What if you have an advanced use case where a keyword, phrase, or range query
    is not enough by itself, but two or more of them *together* could meet your requirements?
    Hibernate Search allows you to mix queries in any combination with boolean logic:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个高级用例，其中关键词、短语或范围查询本身不够，但两个或更多组合在一起能满足你的需求，那怎么办？Hibernate Search允许你用布尔逻辑混合任何查询组合：
- en: '![Boolean (combination) queries](img/9205OS_03_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![布尔（组合）查询](img/9205OS_03_08.jpg)'
- en: Boolean query flow (dotted gray arrows represent optional paths)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔查询流程（虚线灰色箭头代表可选路径）
- en: The `bool` method declares that this will be a combination query. It is followed
    by at least `onemust` or should `clause`, each of which takes a Lucene query object
    of one of the previously discussed varieties.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool`方法声明这将是一个组合查询。它后面至少跟着一个`onemust`或应该`clause`，每一个都接受一个前面讨论过的各种类型的Lucene查询对象。'
- en: When a `must` clause is used, a field must match the nested query in order to
    match the overall query as a whole. Multiple `must` clauses may be applied, which
    operate in a **logical-AND** fashion. All of them must succeed or else there is
    no match.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`must`子句时，一个字段必须与嵌套查询匹配，才能整体匹配查询。可以应用多个`must`子句，它们以**逻辑与**的方式操作。它们都必须成功，否则就没有匹配。
- en: The optional `not` method serves to logically negate a `must` clause. The effect
    is that the overall query will only match if that nested query doesn't.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`not`方法用于逻辑上否定一个`must`子句。效果是，整个查询只有在那个嵌套查询不匹配时才会匹配。
- en: The `should` clause roughly approximates a **logical-OR** operation. When a
    combination consists only of `should` clauses, a field need not match all of them.
    However, at least one must match in order for the query as a whole to match.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`should`子句大致相当于**逻辑或**操作。当一个组合只由`should`子句组成时，一个字段不必匹配它们全部。然而，为了使整个查询匹配，至少必须有一个匹配。'
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can combine `must` and `should` clauses. However, if you do so, then the
    `should` nested queries become completely optional. If the `must` clause succeeds,
    the overall query succeeds no matter what. If the `must` clause fails, the overall
    query fails no matter what. When the two clause types are used together, `should`
    clauses serve only to help rank the search results by relevance.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以组合`must`和`should`子句。然而，如果你这样做，那么`should`嵌套查询就变得完全可选了。如果`must`子句成功，整体查询无论如何都会成功。如果`must`子句失败，整体查询无论如何都会失败。当两种子句类型一起使用时，`should`子句只起到帮助按相关性排名搜索结果的作用。
- en: 'This example combines a keyword query and a range query to look for "xPhone"
    apps with 5-star customer reviews:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子结合了一个关键词查询和一个范围查询，以查找拥有5星客户评价的"xPhone"应用程序：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sorting
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: By default, search results come back in the order of their "relevance". In other
    words, they are ranked by the degree to which they match the query. We will discuss
    this further over the next two chapters, and learn how to adjust these relevance
    calculations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，搜索结果按照它们的“相关性”排序返回。换句话说，它们是根据它们与查询的匹配程度进行排名的。我们将在接下来的两章中进一步讨论这一点，并学习如何调整这些相关性计算。
- en: However, we have the option to change the sorting to some other criteria altogether.
    In typical situations, you might sort by a date or numeric field, or by a string
    field in an alphabetical order. In all versions of the VAPORware Marketplace application
    going forward, users may now sort their search results by the app name.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们有选项可以完全改变排序的其他标准。在典型情况下，你可能会按照日期或数字字段，或者按照字母顺序的字符串字段进行排序。在VAPORware Marketplace应用程序的的所有版本中，用户现在可以按照应用程序名称对他们的搜索结果进行排序。
- en: To sort on a field, special consideration is required when that field is mapped
    for Lucene indexing. Normally when a string field is indexed, a default analyzer
    (explored in the next chapter) tokenizes the string. For example, if an `App`
    entity's `name` field is "Frustrated Flamingos", then separate entries are created
    in the Lucene index for "frustrated" and "flamingos". This allows for more powerful
    querying, but we want to sort based on the original untokenized value.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要对一个字段进行排序，当这个字段被映射为Lucene索引时，需要特别考虑。通常当一个字符串字段被索引时，默认分析器（在下一章中探讨）会将字符串分词。例如，如果一个`App`实体的`name`字段是"Frustrated
    Flamingos"，那么在Lucene索引中会为"frustrated"和"flamingos"创建单独的条目。这允许进行更强大的查询，但我们希望基于原始未分词的值进行排序。
- en: An easy way to support this is by mapping the field twice, which is perfectly
    fine! As we saw in [Chapter 2](ch02.html "Chapter 2. Mapping Entity Classes"),
    *Mapping Entity Classes*, Hibernate Search offers a plural `@Fields` annotation.
    It wraps a comma-separated list of `@Field` annotations, with different analyzer
    settings.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 支持这种情况的一个简单方法是将字段映射两次，这是完全可行的！正如我们在[第2章](ch02.html "第2章 映射实体类")中看到的，*映射实体类*，Hibernate
    Search提供了一个复数`@Fields`注解。它包含一个由逗号分隔的`@Field`注解列表，具有不同的分析器设置。
- en: 'In the following code snippet, one `@Field` is declared with the (tokenizing)
    defaults. The second one has its `analyze` element sent to `Analyze.NO`, to disable
    tokenization, and is given its own distinct field name in the Lucene index:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，一个`@Field`被声明为默认的分词设置。第二个则将它的`analyze`元素设置为`Analyze.NO`，以禁用分词，并在Lucene索引中给它自己的独立字段名称：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This new field name can be used as follows to build a Lucene `SortField` object,
    and attach it to a Hibernate Search `FullTextQuery` object:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新字段名称可以用如下方式来构建一个Lucene `SortField`对象，并将其附加到一个Hibernate Search `FullTextQuery`对象上：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When a list of search results is later returned by `hibernateQuery`, this list
    will be sorted by the app name, starting from A to Z.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当`hibernateQuery`后来返回一个搜索结果列表时，这个列表将按照应用程序名称进行排序，从A到Z开始。
- en: Reverse sorting is possible as well. The `SortField` class also offers a constructor
    with a third `Boolean` parameter. If that parameter is set to `true`, the sort
    will work in the exact opposite manner (for example, Z to A).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 反向排序也是可能的。`SortField`类还提供了一个带有第三个`Boolean`参数的构造函数。如果这个参数被设置为`true`，排序将以完全相反的方式进行（例如，从Z到A）。
- en: Pagination
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分页
- en: When a search query returns a huge number of search results, it is usually not
    desirable (or perhaps even possible) to present them to the user all at once.
    A common solution is pagination, or displaying search results one "page" at a
    time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个搜索查询返回大量的搜索结果时，一次性将它们全部呈现给用户通常是不受欢迎的（或者可能根本不可能）。一个常见的解决方案是分页，或者一次显示一个“页面”的搜索结果。
- en: 'A Hibernate Search `FullTextQuery` object has methods for making pagination
    easy:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Hibernate Search `FullTextQuery`对象有方法可以轻松实现分页：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `setMaxResults` method declares the maximum size of the page. On the last
    line of the preceding code snippet, the apps list will contain no more than five
    `App` objects, even if the query has thousands of matches.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`setMaxResults` 方法声明了页面的最大大小。在前面的代码片段的最后一行，即使查询有数千个匹配项，apps列表也将包含不超过五个 `App`
    对象。'
- en: Of course, pagination wouldn't be very useful if the code always grabbed the
    first five results. We also need the ability to grab the next page, and then the
    next page, and so on. So the `setFirstResult` method tells Hibernate Search where
    to start.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果代码总是抓取前五个结果，分页将不会很有用。我们还需要能够抓取下一页，然后是下一页，依此类推。因此 `setFirstResult` 方法告诉
    Hibernate Search 从哪里开始。
- en: For example, the preceding code snippet starts with the eleventh result item
    (the parameter is `10`, but results are a zero-indexed). The query is then set
    to grab the next five results. The next incoming request might therefore use `hibernateQuery.setFirstResult(15)`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，前面的代码片段从第十一个结果项开始（参数是 `10`，但结果是零索引的）。然后将查询设置为抓取下一个五个结果。因此，下一个传入请求可能会使用 `hibernateQuery.setFirstResult(15)`。
- en: 'The last piece of the puzzle is knowing how many results there are, so you
    can plan for the correct number of pages:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 拼图的最后一片是知道有多少结果，这样你就可以为正确数量的页面进行规划：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `getResultSize` method is more powerful than it appears at first glance,
    because it calculates the number using only Lucene indexes. A regular database
    query across all matching rows could be a very resource-intensive operation, but
    it is a relatively lightweight matter for Lucene.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`getResultSize` 方法比乍一看要强大，因为它只使用 Lucene 索引来计算数字。跨所有匹配行的常规数据库查询可能是一个非常资源密集的操作，但对于
    Lucene 来说是一个相对轻量级的事务。'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter's version of the example applications now use pagination for search
    results, with a maximum of five results per page. Explore the `SearchServlet`
    and `search.jsp` results page to see how they use the result size and the current
    starting point to build the "previous" and "next" links as needed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本章示例应用程序的版本现在使用分页来显示搜索结果，每页最多显示五个结果。查看 `SearchServlet` 和 `search.jsp` 结果页面，了解它们如何使用结果大小和当前起始点来构建所需的“上一页”和“下一页”链接。
- en: 'A look at the VAPORware Markeplace updates in action is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 VAPORware Marketplace 更新的实际操作情况：
- en: '![Pagination](img/9205_03_09.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![分页](img/9205_03_09.jpg)'
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined the most common use cases in Hibernate Search querying.
    We can now work with Hibernate Search regardless of whether JPA is used in whole,
    in part, or not at all. We learned the core query types offered by the Hibernate
    Search DSL, and have an easy visual access to all of their possible flows rather
    than having to crawl through the Javadocs to piece them together.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Hibernate Search 查询中最常见的用例。现在，无论 JPA 是整体使用、部分使用还是根本不使用，我们都可以与 Hibernate
    Search 一起工作。我们了解了 Hibernate Search DSL 提供的核心查询类型，并可以轻松地访问到它们的全部可能流程，而不是不得不浏览 Javadocs
    来拼凑它们。
- en: We now know how to sort search results by a particular field, in ascending or
    descending order. With large result sets, we can now paginate the results for
    better performance on the backend, and a better user experience on the frontend.
    The search functionality in our VAPORware Marketplace example is now greater than
    or equal to many production Hibernate Search applications.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何按特定字段对搜索结果进行升序或降序排序。对于大型结果集，我们可以现在对结果进行分页，以提高后端性能和前端用户体验。我们 VAPORware
    Marketplace 示例中的搜索功能现在大于或等于许多生产 Hibernate Search 应用程序。
- en: In the next chapter, we will look at more advanced mapping techniques, such
    as handling custom data types and controlling details of the Lucene indexing process.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨更高级的映射技术，例如处理自定义数据类型和控制 Lucene 索引过程的详细信息。
