- en: Chapter 8. Testing Support
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章．测试支持
- en: '**Test Driven** **Development** (**TDD**) has revolutionized the way software
    is developed and deployed, and why not, every customer wants working software—and
    the best way to prove that it''s working is to test it! Spring Integration is
    no exception—so how can we test that each of the "units" are working in isolation?—in
    fact it''s even more important to test the units so that any integration issues
    can be easily isolated. For example, an FTP inbound gateway is dependent on external
    factors such as user roles on the FTP server, performance of the FTP server, network
    latency, and so on. How can we validate that the consumer connected to an FTP
    inbound gateway can process files without actually connecting to an FTP server?
    We can send "mock" messages to the channel, which will be treated by the consumer
    as though it arrived from an FTP server! All we want to prove is that, given that
    files arrive on the channel, the listener will do its job.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动** **开发**（**TDD**）已经改变了软件的开发和部署方式，为什么不呢，每个客户都想要运行良好的软件——证明它运行良好最好的方式就是测试它！Spring
    Integration也不例外——那么我们如何测试每个“单元”是否可以独立运行呢？——事实上，测试单元的重要性甚至更大，这样任何集成问题都可以很容易地被隔离。例如，FTP入站网关依赖于外部因素，如FTP服务器上的用户角色、FTP服务器的性能、网络延迟等。我们如何验证连接到FTP入站网关的消费者可以在不实际连接到FTP服务器的情况下处理文件？我们可以将“模拟”消息发送到通道，消费者会将其视为来自FTP服务器的消息！我们想要证明的就是，给定文件到达通道，监听器将执行其工作。'
- en: 'In this chapter, I will cover aspects of Spring Integration testing—and mostly,
    it''s going to be a "show me the code" chapter! Here is the broad outline of topics
    covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将涵盖Spring Integration测试的方面——而且大部分，它将是一个“给我看代码”的章节！以下是涵盖的主题的大纲：
- en: Testing messages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试消息
- en: Testing headers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试头部
- en: Handling errors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理错误
- en: Testing filters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试过滤器
- en: Testing splitters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试分割器
- en: Prerequisite
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'So what is needed for testing? JUnit of course! What else? The Spring framework
    and Spring Integration itself provide many mocks and support classes, which help
    in testing the application. Let''s add maven dependencies for these classes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么测试需要什么？当然，JUnit！还有别的吗？Spring框架和Spring Integration本身提供了许多模拟和支持类，帮助测试应用程序。让我们为这些类添加maven依赖项：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing messages
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试消息
- en: 'Spring Integration provides a class that can help to build certain payloads
    such as the following example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration提供了一个类，可以帮助构建某些有效负载，例如以下示例：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These messages can be put on the channel by grabbing the handle of an actual
    channel definition. This can be used for negative as well as positive testing.
    For example, if a service activator listening on the channel expects a message
    with the payload type `File`, then putting a message with a payload `String` should
    indicate an error. Let''s write a quick test for our transformer, which accepts
    `Message` with the payload `SyndEntry` and converts it to `SoFeed`. The following
    code snippet is our transformer class:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息可以通过获取实际通道定义的句柄放在通道上。这可以用于负测试以及正测试。例如，如果监听通道的服务激活器期望一个具有`File`类型的有效负载的消息，那么放置一个具有`String`有效负载的消息应该表示一个错误。让我们为我们的转换器编写一个快速的测试，该转换器接受具有`SyndEntry`有效负载的`Message`并将其转换为`SoFeed`。以下是我们转换器类的代码片段：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As mentioned, it gets a message having a payload of the type `SyndEntry`. Let''s
    write a simple test case that will pass only if the conversion from `SyndEntry`
    to `SoFeed` is successful:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如提及的，它接收到一个具有`SyndEntry`类型的有效负载的消息。让我们编写一个简单的测试用例，只有在从`SyndEntry`成功转换到`SoFeed`时才会通过：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this code, the `@ContextConfiguration` annotation is used to load the context
    information. By default, it will look for a file name such as `<classname>-context.xml`
    and Java configuration classes annotated with `@Configuration`. In our case, it
    is `TestSoDBFeedTransformer-context.xml`. This contains information required to
    run the test, such as channel, services definitions, and others:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，使用`@ContextConfiguration`注解加载上下文信息。默认情况下，它会寻找类似于`<classname>-context.xml`的文件名和用`@Configuration`注解的Java配置类。在我们的案例中，它是`TestSoDBFeedTransformer-context.xml`。这包含运行测试所需的信息，如通道、服务定义等：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The components covered in this code are explained in detail in the following
    points:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本代码中涵盖的组件将在以下几点详细解释：
- en: '`@RunWith(SpringJUnit4ClassRunner.class)`: This defines which engine to run
    the tests on—nothing specific to Spring Integration.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith(SpringJUnit4ClassRunner.class)`：这定义了要在哪个引擎上运行测试——与Spring Integration无关。'
- en: '`@Autowired MessageChannel filteredFeedChannel`: This autowires the channel
    definition from the context file—no need to explicitly load it to use.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired MessageChannel filteredFeedChannel`：这自动注入了来自上下文文件的通道定义——无需显式加载即可使用。'
- en: '`@Autowired QueueChannel transformedChannel`: This is similar to the preceding
    point and this autowires other channels as well.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Autowired QueueChannel transformedChannel`：这与前面一点相似，同时也自动注入了其他通道。'
- en: 'Spring configuration prepares all the required elements—now let''s take a look
    at what the test class does:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Spring配置准备所有必需的元素——现在让我们看看测试类做什么：
- en: It creates a dummy `SyndEntry`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个虚拟的`SyndEntry`。
- en: It creates an expected `SoFeed` based on that `SyndEntry`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它根据那个`SyndEntry`创建了一个预期的`SoFeed`。
- en: It builds a message with a payload of the type `SyndEntry`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它构建了一个载荷类型为`SyndEntry`的消息。
- en: It grabs the handle of the channel on which the transformer is plugged and puts
    the payload on it.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它抓取了转换器插座的通道处理句柄并在其中放置了载荷。
- en: This is where the transformer is tested, and an actual instance of transformer
    (and not a mocked one) that is listening on the channel is invoked.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是测试转换器的地方，调用的是监听通道的实际转换器实例（而不是模拟的）。
- en: Transformer does the transformation and puts the result on the output channel.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转换器进行转换，并将结果放在输出通道上。
- en: The test class grabs the handle of the output channel and reads the message.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试类抓取了输出通道的处理句柄并读取了消息。
- en: The actual transformed message on the output channel must match the expected
    message constructed.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出通道上的实际转换消息必须与构造的预期消息匹配。
- en: With the preceding steps, we are able to test an actual transformer, the logic
    written without worrying much about the channels, or other Spring Integration
    elements that are in any way external to the system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述步骤，我们能够测试一个实际的转换器，而不必过多担心通道或其他与系统外部有关的Spring Integration元素。
- en: Testing headers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试头部
- en: 'As we tested the payload, it''s fairly easy to test headers. Let''s write a
    header enricher and then a test case to validate it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试载荷时，测试头部相对容易。我们来编写一个头部丰富器，然后一个测试用例来验证它：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Headers will be added to any message that is put on `filteredFeedChannel`.
    The following code snippet is the test to verify whether these headers are added
    or not:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 任何放入`filteredFeedChannel`的消息都会添加头部。以下代码片段是验证这些头部是否被添加的测试用例：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we build up a test message and put it on a channel. A header enricher
    is plugged in to the input channel, which adds a header to the payload. We verified
    this by extracting the message from the output channel.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们构建了一个测试消息并将其放入通道中。一个头部丰富器被插入了输入通道，它向载荷添加了一个头部。我们通过从输出通道提取消息来验证这一点。
- en: Handling errors
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误
- en: 'So far so good, how about handling error scenarios? How to test negative use
    cases and what to do with the failed test case? The following code snippet will
    help us in these matters:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止还好，那么处理错误场景呢？如何测试负面用例以及失败的测试用例怎么办？以下代码片段将帮助我们处理这些问题：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The input channel expects a message with the payload type `SyndEntry`, but if
    a message with a `String` payload is sent—this must throw an exception. This is
    what has been tested. This can be further enhanced to monitor certain types of
    exception on channels with the ability to validate user-defined propagated messages.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输入通道期望的是一个载荷类型为`SyndEntry`的消息，但如果发送了一个载荷类型为`String`的消息——这必须抛出异常。这就是已经测试过的。这可以进一步增强，以监控具有验证用户定义传播消息能力的通道上的某些类型的异常。
- en: Testing filters
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试过滤器
- en: 'We have defined a filter that filters out all messages except java feed. What
    is so special about filters that we want to discuss them separately? If you remember,
    filters always return a Boolean value, indicating whether to pass on the message
    or drop it, based on whether or not it satisfies the condition. For ease of reference,
    the following code snippet is the filter that we have defined:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了一个过滤器，它过滤掉所有除了java feed之外的消息。我们为什么要单独讨论过滤器呢？如果你记得，过滤器总是返回一个布尔值，根据它是否满足条件来指示是否传递消息或丢弃它。为了方便参考，以下是我们定义的过滤器的代码片段：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's create a test context class to test this. It's always better to have a
    separate context class to test, so that it does not mess up the actual environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个测试上下文类来测试这个。总是最好有一个单独的上下文类来测试，这样就不会弄乱实际的运行环境。
- en: 'Now, we write our test cases—the first one is to validate that all the messages
    with the type `java` are allowed to pass through:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们编写测试用例——第一个用例是验证所有类型为`java`的消息都被允许通过：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Splitter test
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分割器测试
- en: 'Let''s discuss the last test—which is for splitters. The splitter that we defined
    is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下最后一个测试——这是针对分割器的。我们所定义的分割器如下：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code snippet represents our test class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段代表我们的测试类：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This test is pretty self-explanatory. As expected by the original splitter defined
    in the preceding code, when a payload with `SyndEntry` having a list of categories
    is put on the channel, it extracts the list, splits it, and then puts the categories
    one by one on the output channel.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试相当容易解释。如预期的那样，根据前面的代码中定义的原始分割器，当在通道上放置一个具有`SyndEntry`的载荷，其中有一个类别列表时，它会提取列表，将其分割，然后一个接一个地将类别放置在输出通道上。
- en: These are enough samples to get started with Spring Integration testing. The
    best practices for TDD apply in the context of Spring Integration as well. In
    fact, apart from the fact that Spring Integration provides support classes for
    testing the components, there is nothing special about Spring Integration testing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子足以开始进行Spring Integration测试。在Spring Integration上下文中，TDD的最佳实践同样适用。实际上，除了Spring
    Integration为测试组件提供支持类之外，Spring Integration测试并没有什么特别之处。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We covered how to test most widely used Spring Integration components. It's
    always good practice to test systems in *isolation*—so that integration time surprises
    are alleviated to the max. Let's finish our discussion on testing support and
    move on to the next chapter where we will discuss management and ways to scale
    up a Spring Integration application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何测试最广泛使用的Spring Integration组件。始终是一个好的实践来*隔离*测试系统——这样集成时间的惊喜可以最大程度地减少。让我们结束关于测试支持的讨论，并转向下一章，我们将讨论如何管理和扩展Spring
    Integration应用程序的方法。
