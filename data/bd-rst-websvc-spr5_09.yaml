- en: AOP and Logger Controls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AOP和Logger控制
- en: In this chapter, we will learn about Spring **Aspect-Oriented Programming**
    (**AOP**) and logger controls, both their theory and implementation. We will integrate
    Spring AOP in our existing REST APIs and walk through how AOP and logger controls
    will make our lives easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Spring **面向方面的编程**（**AOP**）和日志控制，包括它们的理论和实现。我们将在我们现有的REST API中集成Spring
    AOP，并了解AOP和日志控制如何使我们的生活更轻松。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Spring AOP theory
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring AOP理论
- en: Implementation of Spring AOP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring AOP的实现
- en: Why do we need logger controls?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要日志控制？
- en: How do we implement logger controls?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何实现日志控制？
- en: Integrating Spring AOP and logger controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Spring AOP和日志控制
- en: Aspect-oriented programming (AOP)
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向方面的编程（AOP）
- en: Aspect-oriented programming is a concept where we add a new behavior to existing
    code without modifying the code itself. The AOP concept is really helpful when
    it comes to logging or method authentication.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 面向方面的编程是一个概念，它在不修改代码本身的情况下为现有代码添加新行为。当涉及到日志记录或方法认证时，AOP概念真的很有帮助。
- en: There are many ways you can use AOP in Spring. Let's not get into much detail,
    as it will be a big topic to discuss. Here, we will discuss only the `@Before`
    pointcut and how to use `@Before` in our business logic.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring中，有许多方法可以使用AOP。让我们不要深入讨论，因为这将是一个大的讨论话题。在这里，我们只讨论`@Before`切入点以及如何在我们的业务逻辑中使用`@Before`。
- en: AOP (@Before) with execution
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AOP（@Before）与执行
- en: 'The term execution in AOP means having a pointcut in the `@Aspect` annotation
    itself, and it doesn''t depend on the controller API. The alternate way is that
    you will have to explicitly mention the annotation in the API call. Let''s talk
    about the explicit pointcut in the next topic:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AOP中的执行术语意味着在`@Aspect`注解本身中有一个切入点，它不依赖于控制器API。另一种方法是您将不得不在API调用中明确提及注解。让我们在下一个主题中讨论显式切入点：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this pointcut, we have used the `@Before` annotation, and it uses `execution(*
    com.packtpub.restapp.HomeController.testAOPWithoutAnnotation())`, which means
    this pointcut will be focusing on a specific method, the `testAOPWithoutAnnotation`
    method inside the `HomeController` class, in our case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个切入点中，我们使用了`@Before`注解，它使用了`execution(* com.packtpub.restapp.HomeController.testAOPWithoutAnnotation())`，这意味着这个切入点将专注于一个特定的方法，在我们的例子中是`HomeController`类中的`testAOPWithoutAnnotation`方法。
- en: 'For AOP-related work, we might need to add the dependency to our `pom.xml`
    file, which is mentioned as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与AOP相关的工作，我们可能需要将依赖项添加到我们的`pom.xml`文件中，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding dependency will bring all aspect-oriented classes to support our
    AOP implementation in this chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述依赖项将带来所有面向方面的类，以支持我们在本章中的AOP实现。
- en: '`@Aspect`: This annotation is used to make the class support aspects. In Spring,
    aspects can be implemented using XML configurations or annotation, such as `@Aspect`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Aspect`：这个注解用于使类支持方面。在Spring中，可以使用XML配置或注解（如`@Aspect`）来实现方面。'
- en: '`@Component`: This annotation will make the class scannable according to the
    rule of Spring''s component scanner. By mentioning this class with `@Component`
    and `@Aspect`, we tell Spring to scan this class and identify it as an aspect.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Component`：这个注解将使类根据Spring的组件扫描规则可扫描。通过将这个类与`@Component`和`@Aspect`一起提及，我们告诉Spring扫描这个类并将其识别为一个方面。'
- en: 'The code for the `HomeController` class is given as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`HomeController`类的代码如下所示：'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we simply create a new method to test our AOP. You may not need to create
    a new API to test our AOP. As long you provide the appropriate method name, it
    should be okay. To make it easier for the reader, we have created a new method
    called `testAOPExecution` in the `HomeContoller` class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只需创建一个新的方法来测试我们的AOP。您可能不需要创建一个新的API来测试我们的AOP。只要您提供适当的方法名，就应该没问题。为了使读者更容易理解，我们在`HomeContoller`类中创建了一个名为`testAOPExecution`的新方法。
- en: Testing AOP @Before execution
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试AOP @Before执行
- en: 'Just call the API (`http://localhost:8080/test/aop/with/execution`) in the
    browser or using any other REST client; then, you should see the following in
    the console:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在浏览器中调用API（`http://localhost:8080/test/aop/with/execution`）或使用任何其他REST客户端；然后，您应该在控制台中看到以下内容：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even though this log doesn't really help our business logic, we will keep it
    for now to keep things easier for the reader to understand the flow. Once we learn
    about AOP and how it functions, we will integrate it into our business logic.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个日志并不真正帮助我们的业务逻辑，但我们现在会保留它，以便读者更容易理解流程。一旦我们了解了AOP及其功能，我们将把它集成到我们的业务逻辑中。
- en: AOP (@Before) with annotation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AOP（@Before）与注解
- en: So far, we have seen an execution-based AOP method that can be used for one
    or more methods. However, in some places, we may need to keep the implementation
    plain to increase visibility. This will help us use it wherever it is needed,
    and it is not tied to any method. We call it explicit annotation-based AOP.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了一个基于执行的AOP方法，可以用于一个或多个方法。然而，在某些地方，我们可能需要保持实现简单以增加可见性。这将帮助我们在需要的地方使用它，而且它不与任何方法绑定。我们称之为显式基于注解的AOP。
- en: In order to use this AOP concept, we may need to create an interface that will
    help us with what we need to achieve.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这个AOP概念，我们可能需要创建一个接口，这个接口将帮助我们实现我们需要的东西。
- en: '`TokenRequired` is just a base interface for our `Aspect` class. It will be
    supplied to our `Aspect` class, which is mentioned as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`TokenRequired`只是我们`Aspect`类的一个基本接口。它将被提供给我们的`Aspect`类，如下所示：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`@Retention`: A retention policy determines at what point the annotation should
    be discarded. In our case, `RetentionPolicy.RUNTIME` will be retained for the
    JVM through runtime.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Retention`：保留策略确定注解应在何时被丢弃。在我们的例子中，`RetentionPolicy.RUNTIME`将在JVM中通过运行时保留。'
- en: 'Other retention policies are as listed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其他保留策略如下：
- en: '`SOURCE`: It will be retained only with the source code, and it will discarded
    during compile time. Once the code is compiled, the annotation will be useless,
    so it won''t be written in the bytecode.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOURCE`：它将仅保留源代码，并且在编译时将被丢弃。一旦代码编译完成，注释将变得无用，因此不会写入字节码中。'
- en: '`CLASS`: It will be retained till compile time and will be discarded during
    runtime.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLASS`：它将保留到编译时，并在运行时丢弃。'
- en: '`@Target`: This annotation is applicable for the class level and matches at
    runtime. The target annotation can be used to collect the target object.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Target`：此注释适用于类级别，并在运行时匹配。目标注释可用于收集目标对象。'
- en: 'The following `tokenRequiredWithAnnotation` method will implement the business
    logic for our aspect. To keep the logic simple, we have just provided `System.out.println(..)`.
    Later, we will add the main logic to the method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`tokenRequiredWithAnnotation`方法将实现我们方面的业务逻辑。为了保持逻辑简单，我们只提供了`System.out.println(..)`。稍后，我们将向该方法添加主要逻辑：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding code, we have created a method called `tokenRequiredWithAnnotation`
    and supplied the `TokenRequired` interface as a parameter for this method. We
    can see the annotation called `@Before` on top of this method with `@annotation(tokenRequired)`.
    This method will be called every time the `@TokenRequired` annotation is used
    in any method. You can see the annotation usage as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个名为`tokenRequiredWithAnnotation`的方法，并为该方法提供了`TokenRequired`接口作为参数。我们可以看到该方法顶部的`@Before`注释，并且`@annotation(tokenRequired)`。每次在任何方法中使用`@TokenRequired`注释时，将调用此方法。您可以如下所示查看注释用法：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The main difference between the previous AOP method and this is `@TokenRequired`.
    In the old API caller, we didn't mention any AOP annotation explicitly, but we
    have to mention `@TokenRequired` in this caller as it will call the appropriate
    AOP method. Also, in this AOP method, we don't need to mention `execution`, like
    we did in the previous `execution(* com.packtpub.restapp.HomeController.testAOPWithoutAnnotation())`
    method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的AOP方法和这个之间的主要区别是`@TokenRequired`。在旧的API调用者中，我们没有明确提到任何AOP注释，但在此调用者中，我们必须提到`@TokenRequired`，因为它将调用适当的AOP方法。此外，在此AOP方法中，我们不需要提到`execution`，就像我们在以前的`execution(*
    com.packtpub.restapp.HomeController.testAOPWithoutAnnotation())`方法中所做的那样。
- en: Testing AOP @Before annotation
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试AOP @Before注释
- en: 'Just call the API (`http://localhost:8080/test/aop/with/annotation`) in the
    browser or using any other REST client; then, you should see the following on
    the console:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在浏览器中或使用任何其他REST客户端调用API（`http://localhost:8080/test/aop/with/annotation`）;然后，您应该在控制台上看到以下内容：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Integrating AOP with JWT
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将AOP与JWT集成
- en: Let's assume that you want to restrict the `deleteUser` option in the `UserContoller`
    method. Whoever deletes the user should have the proper JWT token. If they don't
    have the token with them, we won't let them delete any users. Here, we will first
    have a `packt` subject to create a token.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要在`UserContoller`方法中限制`deleteUser`选项。删除用户的人应该具有适当的JWT令牌。如果他们没有令牌，我们将不允许他们删除任何用户。在这里，我们将首先有一个`packt`主题来创建一个令牌。
- en: The `http://localhost:8080/security/generate/token?subject=packt`-generated
    token API can be called to generate the token.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以调用`http://localhost:8080/security/generate/token?subject=packt`生成令牌的API。
- en: When we use `packt` in the subject, it will generate the `eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYWNrdCIsImV4cCI6MTUwOTk0NzY2Mn0.hIsVggbam0pRoLOnSe8L9GQS4IFfFklborwJVthsmz0`
    token.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在主题中使用`packt`时，它将生成`eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYWNrdCIsImV4cCI6MTUwOTk0NzY2Mn0.hIsVggbam0pRoLOnSe8L9GQS4IFfFklborwJVthsmz0`令牌。
- en: 'Now, we will have to create an AOP method to restrict the user by asking them
    to have the token in the header of the `delete` call:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将不得不创建一个AOP方法，通过要求用户在`delete`调用的标头中具有令牌来限制用户：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Looking at the preceding code, you can see the JWT integration in AOP. Yes,
    we have integrated the JWT token verification part with AOP. So hereafter, if
    someone calls the `@TokenRequired`-annotated API, it will first come to the AOP
    method and check for a token match. If the token is empty, not matched, or expired,
    we will get an error. All possible errors will be discussed as follows.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看到AOP中的JWT集成。是的，我们已经将JWT令牌验证部分与AOP集成。因此，以后，如果有人调用`@TokenRequired`注释的API，它将首先到达AOP方法并检查令牌匹配。如果令牌为空，不匹配或过期，我们将收到错误。所有可能的错误将如下所述。
- en: Now, we can start using the `@TokenRequired` annotation in our API call in the
    `UserController` class. So whenever this `deleteUser` method is called, it will
    go to `JWT`, checking pointcut before executing the API method itself. By doing
    this, we can assure that the `deleteUser` method will not be called without a
    token.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`UserController`类中的API调用中开始使用`@TokenRequired`注释。因此，每当调用此`deleteUser`方法时，它将在执行API方法本身之前转到`JWT`，检查切入点。通过这样做，我们可以确保`deleteUser`方法不会在没有令牌的情况下被调用。
- en: 'The code for the `UserController` class is given here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserController`类的代码如下：'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the token is empty or null, it will throw the following error:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果令牌为空或为空，它将抛出以下错误：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the token is matched, it will show the result without throwing any error.
    You''ll see the following result:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果令牌匹配，它将显示结果而不抛出任何错误。您将看到以下结果：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we don''t provide any token in the headers, it might throw the following
    error:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在标头中不提供任何令牌，可能会抛出以下错误：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the token is expired, you will get the following error:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果令牌过期，您将收到以下错误：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Logger controls
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录控制
- en: Logging will be helpful when we need to track the output of a specific process.
    It will help us verify the process or find the root cause of the error when things
    go wrong after deploying our application in the server. Without loggers, it will
    be difficult to track and figure out the problem if anything happens.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录在需要跟踪特定过程的输出时非常有用。当我们在服务器上部署应用程序后，它将帮助我们验证过程或找出错误的根本原因。如果没有记录器，将很难跟踪和找出问题。
- en: There are many logging frameworks we can use in our application; Log4j and Logback
    are the two major frameworks used in most applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，有许多日志记录框架可以使用；Log4j和Logback是大多数应用程序中使用的两个主要框架。
- en: SLF4J, Log4J, and Logback
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SLF4J，Log4J和Logback
- en: SLF4j is an API to help us choose Log4j or Logback or any other JDK logging
    during deployment. SLF4j is just an abstraction layer that gives freedom to the
    user who uses our logging API. If someone wants to use JDK logging or Log4j in
    their implementation, SLF4j will help them plug in the desired framework during
    runtime.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SLF4j是一个API，帮助我们在部署过程中选择Log4j或Logback或任何其他JDK日志。SLF4j只是一个抽象层，为使用我们的日志API的用户提供自由。如果有人想在他们的实现中使用JDK日志或Log4j，SLF4j将帮助他们在运行时插入所需的框架。
- en: If we create an end product that can't be used by someone as a library, we can
    implement Log4j or Logback directly. However, if we have a code that can be used
    as a library, it would be better to go with SLF4j, so the user can follow any
    logging they want.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建的最终产品不能被他人用作库，我们可以直接实现Log4j或Logback。但是，如果我们有一个可以用作库的代码，最好选择SLF4j，这样用户可以遵循他们想要的任何日志记录。
- en: Logback is a better alternative for Log4j and provides native support for SLF4j.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Logback是Log4j的更好替代品，并为SLF4j提供本地支持。
- en: Logback framework
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Logback框架
- en: We mentioned earlier that Logback is more preferable than Log4j; here we will
    discuss how to implement the Logback logging framework.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到Logback比Log4j更可取；在这里我们将讨论如何实现Logback日志框架。
- en: 'There are three modules in Logback:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Logback有三个模块：
- en: '`logback-core`: Basic logging'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logback-core`：基本日志'
- en: '`logback-classic`: Improved logging and SLF4j support'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logback-classic`：改进的日志记录和SLF4j支持'
- en: '`logback-access`: Servlet container support'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logback-access`：Servlet容器支持'
- en: The `logback-core` module is the base for other two modules in the Log4j framework.
    The `logback-classic` module is an improved version of Log4j with more features.
    Also, the `logback-classic` module implements the SLF4j API natively. Due to this
    native support, we can switch to different logging frameworks such as **Java Util
    Logging** (**JUL**) and Log4j.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`logback-core`模块是Log4j框架中其他两个模块的基础。`logback-classic`模块是Log4j的改进版本，具有更多功能。此外，`logback-classic`模块本地实现了SLF4j
    API。由于这种本地支持，我们可以切换到不同的日志框架，如**Java Util Logging**（**JUL**）和Log4j。'
- en: The `logback-access` module provides support to servlet containers such as Tomcat/Jetty,
    specifically to provide HTTP-access log facilities.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`logback-access`模块为Tomcat/Jetty等Servlet容器提供支持，特别是提供HTTP访问日志功能。'
- en: Logback dependency and configuration
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Logback依赖和配置
- en: 'In order to use Logback in our application, we need the `logback-classic` dependency.
    However, the `logback-classic` dependency is already available in the `spring-boot-starter`
    dependency. We can check this with dependency tree (`mvn dependency:tree`) in
    our project folder:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中使用Logback，我们需要`logback-classic`依赖项。但是，`logback-classic`依赖项已经包含在`spring-boot-starter`依赖项中。我们可以在项目文件夹中使用依赖树（`mvn
    dependency:tree`）来检查：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'While checking dependency tree in the project folder, we will get the whole
    tree for all of our dependencies. The following is the section where we can see
    the `logback-classic` dependency under the `spring-boot-starter` dependency:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中检查依赖树时，我们将获得所有依赖项的完整树。以下是我们可以看到`spring-boot-starter`依赖项下的`logback-classic`依赖项的部分：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since the necessary dependency files are already available, we don't need to
    add any dependencies for Logback framework implementation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于必要的依赖文件已经可用，我们不需要为Logback框架实现添加任何依赖项。
- en: Logging levels
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志级别
- en: 'As SLF4j defined these logging levels, whoever implements SLF4j should adapt
    the logging levels of SFL4j. The logging levels are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SLF4j定义了这些日志级别，实现SLF4j的人应该适应SFL4j的日志级别。日志级别如下：
- en: '`TRACE`: Detailed comments that might not be used in all cases'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`：详细评论，在所有情况下可能不会使用'
- en: '`DEBUG`: Useful comments for debugging purposes in production'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`：用于生产环境中调试目的的有用评论'
- en: '`INFO`: General comments that might be helpful during development'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFO`：在开发过程中可能有帮助的一般评论'
- en: '`WARN`: Warning messages that might be helpful in specific scenarios such as
    deprecated methods'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARN`：在特定场景下可能有帮助的警告消息，例如弃用的方法'
- en: '`ERROR`: Severe error messages to be watched out for by the developer'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR`：开发人员需要注意的严重错误消息'
- en: 'Let''s add the logging configuration to the `application.properties` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将日志配置添加到`application.properties`文件中：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding configuration, we have used logging configuration for both
    Spring Framework and our application. According to our configuration, it will
    print `ERROR` for Spring Framework and `INFO` for our application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配置中，我们已经为Spring Framework和我们的应用程序使用了日志配置。根据我们的配置，它将为Spring Framework打印`ERROR`，为我们的应用程序打印`INFO`。
- en: Logback implementation in class
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类中的Logback实现
- en: 'Let''s add a `Logger` to the class; in our case, we can use `UserController`.
    We have to import `org.slf4j.Logger` and `org.slf4j.LoggerFactory`. We can check
    the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给类添加一个`Logger`；在我们的情况下，我们可以使用`UserController`。我们必须导入`org.slf4j.Logger`和`org.slf4j.LoggerFactory`。我们可以检查以下代码：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we introduced the `_logger` instance. We use the `UserController`
    class as a parameter for the `_logger` instance.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们介绍了`_logger`实例。我们使用`UserController`类作为`_logger`实例的参数。
- en: 'Now, we have to use the `_logger` instance to print the message we wanted.
    Here, we have used `_logger.info()` to print the message:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须使用`_logger`实例来打印我们想要的消息。在这里，我们使用了`_logger.info()`来打印消息：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the preceding code, we have used various loggers to print messages. When
    you restart the server and call the `http://localhost:8080` REST API, you will
    see the following output in the console:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了各种记录器来打印消息。当您重新启动服务器并调用`http://localhost:8080` REST API时，您将在控制台中看到以下输出：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see from the log, the class name will always be in the log to identify
    the specific class in the log. As we haven't mentioned any logging pattern, the
    logger takes the default pattern to print the output with the class. If we need,
    we can change the pattern in our configuration file to get customized logging.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从日志中看到的，类名将始终在日志中以标识日志中的特定类。由于我们没有提及任何日志模式，记录器采用默认模式打印输出与类一起。如果需要，我们可以在配置文件中更改模式以获得定制日志。
- en: In the preceding code, we have used different logging levels to print the messages.
    There is a restriction on the logging level, so based on the business requirements
    and implementation, we will have to configure our logging levels.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，我们使用了不同的日志级别来打印消息。对日志级别有限制，因此根据业务需求和实现，我们将不得不配置我们的日志级别。
- en: In our logger configuration, we have used only the console printing option.
    We can also provide an option to print to external files wherever we want.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的日志配置中，我们只使用了控制台打印选项。我们还可以提供一个选项，将日志打印到我们想要的外部文件中。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered Spring AOP and logger controls with implementation.
    In our existing code, we introduced Spring AOP and walked through how AOP saves
    time via code reuse. For the user to understand AOP, we simplified AOP implementation.
    In the next chapter, we will talk about how to build a REST client and discuss
    more about error handling in Spring.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了Spring AOP和日志控制的实现。在我们现有的代码中，我们介绍了Spring AOP，并演示了AOP如何通过代码重用节省时间。为了让用户理解AOP，我们简化了AOP的实现。在下一章中，我们将讨论如何构建一个REST客户端，并更多地讨论Spring中的错误处理。
