- en: Securing Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护您的应用程序
- en: This chapter explains how to implement authentication to our frontend when we
    are using JWT authentication in the backend. At the beginning, we switch on security
    to our backend to enable JWT authentication. Then, we create a component for the
    login functionality. Finally, we modify our CRUD functionalities to send the token
    in the request's `Authorization` header to the backend.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了在后端使用JWT身份验证时如何对前端实施身份验证。首先，我们为后端打开安全性以启用JWT身份验证。然后，我们为登录功能创建一个组件。最后，我们修改我们的CRUD功能，以在请求的`Authorization`标头中发送令牌到后端。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下内容：
- en: How to create a login functionality on our frontend
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在前端创建登录功能
- en: How to implement conditional rendering after authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在身份验证后实现条件渲染
- en: What is needed for CRUD functionalities when the JWT authentication is enabled
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用JWT身份验证时，CRUD功能需要什么
- en: How to show messages when authentication fails
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在身份验证失败时显示消息
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中创建的Spring Boot应用程序，*保护和测试您的后端*（GitHub：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)）。
- en: The React app that we used in the previous chapter (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中使用的React应用程序（GitHub：[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)）。
- en: Securing the backend
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护后端
- en: 'We have implemented CRUD functionalities to our frontend using an unsecured
    backend. Now, it is time to switch on security again for our backend and go back
    to the version that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前端实现了对未受保护的后端的CRUD功能。现在，是时候再次为我们的后端打开安全性，并返回到我们在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中创建的版本，*保护和测试您的后端*：
- en: 'Open your backend project with the Eclipse IDE and open the `SecurityConfig.java`
    file in the editor view. We commented the security out and allowed everyone access
    to all endpoints. Now, we can remove that line and also remove the comments from
    the original version. Now your `SecurityConfig.java` file''s `configure` method
    should look like the following:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Eclipse IDE打开后端项目，并在编辑器视图中打开`SecurityConfig.java`文件。我们将安全性注释掉，并允许每个人访问所有端点。现在，我们可以删除该行，并从原始版本中删除注释。现在，您的`SecurityConfig.java`文件的`configure`方法应如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's test what happens when the backend is now secured again.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下当后端再次被保护时会发生什么。
- en: Run the backend by pressing the Run button in Eclipse and check from the Console
    view that the application started correctly. Run the frontend by typing the `npm
    start` command into your terminal and the browser should be opened to the address `localhost:3000`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在Eclipse中按下“运行”按钮来运行后端，并从控制台视图中检查应用程序是否正确启动。通过在终端中键入`npm start`命令来运行前端，浏览器应该打开到地址`localhost:3000`。
- en: 'You should now see the list page and the table are empty. If you open the developer
    tools, you will notice that the request ends in the `403 Forbidden` HTTP error.
    This is actually what we wanted because we haven''t done the authentication yet
    to our frontend:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该看到列表页面和表格为空。如果您打开开发者工具，您会注意到请求以`403 Forbidden` HTTP错误结束。这实际上是我们想要的，因为我们尚未对前端进行身份验证：
- en: '![](img/d221b71b-6510-43ce-8142-7c8e9a27a488.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d221b71b-6510-43ce-8142-7c8e9a27a488.png)'
- en: Securing the frontend
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护前端
- en: The authentication was implemented to the backend using JWT. In [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, we created JWT authentication, and the `/login` endpoint
    is allowed to everyone without authentication. In the frontend's login page we
    have to first call `/login` endpoint to get the token. After that, the token will
    be included to all requests we are sending to the backend, as was demonstrated
    in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing and Testing
    Your Backend*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JWT对后端进行了身份验证。在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中，*保护和测试您的后端*，我们创建了JWT身份验证，并且`/login`端点允许每个人在没有身份验证的情况下访问。在前端的登录页面中，我们必须首先调用`/login`端点以获取令牌。之后，令牌将包含在我们发送到后端的所有请求中，就像在[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)中演示的那样，*保护和测试您的后端*。
- en: 'Let''s first create a login component that asks for credentials from the user
    to get a token from the backend:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个登录组件，要求用户提供凭据以从后端获取令牌：
- en: 'Create a new file, called `Login.js`, in the `components` folder. Now, your
    file structure of the frontend should be the following:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`文件夹中创建一个名为`Login.js`的新文件。现在，您的前端文件结构应如下所示：
- en: '![](img/f8c04420-2884-43b0-bce4-8beeca7f691d.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8c04420-2884-43b0-bce4-8beeca7f691d.png)'
- en: 'Open the file in the VS Code editor view and add the following base code to
    the login component. We are also importing `SERVER_URL` because it is needed in
    a login request:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code编辑器中打开文件，并将以下基本代码添加到登录组件中。我们还导入`SERVER_URL`，因为它在登录请求中是必需的：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need three state values for authentication. Two for the credentials (`username`
    and `password`) and one Boolean value to indicate the status of authentication.
    The default value of the authentication status state is `false`. Create the `constructor`
    and introduce states inside the `constructor`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要三个用于身份验证的状态值。两个用于凭据（`username`和`password`），一个布尔值用于指示身份验证状态。身份验证状态的默认值为`false`。在`constructor`中创建`constructor`并在其中引入状态：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the user interface, we are going to use the Material-UI component library,
    as we did with the rest of the user interface. We need text field components for
    the credentials and a button to call a login function. Add imports for the components
    to the `login.js` file:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户界面中，我们将使用Material-UI组件库，就像我们在用户界面的其余部分中所做的那样。我们需要凭据的文本字段组件和一个调用登录函数的按钮。将组件的导入添加到`login.js`文件中：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add imported components to a user interface by adding these to the `render()`
    method. We need two `TextField` components, one for the username and one for the
    password. One `RaisedButton` component is needed to call the `login` function
    that we are going to implement later in this section:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导入的组件添加到用户界面中，方法是将它们添加到`render()`方法中。我们需要两个`TextField`组件，一个用于用户名，一个用于密码。需要一个`RaisedButton`组件来调用我们稍后将实现的`login`函数：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Implement the change handler for the `TextField` components to save typed values
    to the states:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`TextField`组件的更改处理程序，以将键入的值保存到状态中：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As shown in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, the login is done by calling the `/login` endpoint
    using the `POST` method and sending the user object inside the body. If authentication
    succeeds, we get a token in a response `Authorization` header. We will then save
    the token to session storage and set the `isAuthenticated` state value to `true`.
    The session storage is similar to local storage but it is cleared when a page
    session ends. When the `isAuthenticated` state value is changed, the user interface
    is re-rendered:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如[第4章](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml)所示，*保护和测试您的后端*，登录是通过调用`/login`端点使用`POST`方法并在请求体内发送用户对象来完成的。如果身份验证成功，我们将在响应的`Authorization`标头中获得一个令牌。然后，我们将令牌保存到会话存储中，并将`isAuthenticated`状态值设置为`true`。会话存储类似于本地存储，但在页面会话结束时会被清除。当`isAuthenticated`状态值改变时，用户界面将被重新渲染：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can implement conditional rendering, which renders the `Login` component
    if the `isAuthenticated` state is `false` or the `Carlist` component if `isAuthenticated`
    state is `true`. We first have to import the `Carlist` component to the `Login`
    component:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以实现条件渲染，如果`isAuthenticated`状态为`false`，则渲染`Login`组件，如果`isAuthenticated`状态为`true`，则渲染`Carlist`组件。我们首先必须将`Carlist`组件导入`Login`组件中：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And then implement the following changes to the `render()` method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对`render()`方法进行以下更改：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To show the login form, we have to render the `Login` component instead of
    the `Carlist` component in the `App.js` file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示登录表单，我们必须在`App.js`文件中渲染`Login`组件而不是`Carlist`组件：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, when your frontend and backend are running, your frontend should look
    like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您的前端和后端正在运行时，您的前端应该如下所示：
- en: '![](img/50d978f6-f9a4-4bab-b3d3-e600d1417f03.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50d978f6-f9a4-4bab-b3d3-e600d1417f03.png)'
- en: 'And if you log in using the `user/user` or `admin/admin` credentials, you should
    see the car list page. If you open the developer tools, you can see that the token
    is now saved to session storage:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`user/user`或`admin/admin`凭据登录，您应该看到汽车列表页面。如果打开开发者工具，您会看到令牌现在保存在会话存储中：
- en: '![](img/fa1b25e3-8e29-4d64-bf20-330b0dce417c.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa1b25e3-8e29-4d64-bf20-330b0dce417c.png)'
- en: 'The car list is still empty, but that is correct because we haven''t included
    the token to the request yet. That is needed for JWT authentication, which we
    will implement in the next phase:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车列表仍然是空的，但这是正确的，因为我们还没有将令牌包含在请求中。这对于JWT身份验证是必需的，我们将在下一阶段实现：
- en: 'Open the `Carlist.js` file in the VS Code editor view. To fetch the cars, we
    first have to read the token from the session storage and then add the `Authorization`
    header with the token value to the request. You can see the source code of the
    fetch function here:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code编辑器视图中打开`Carlist.js`文件。要获取汽车，我们首先必须从会话存储中读取令牌，然后将带有令牌值的`Authorization`标头添加到请求中。您可以在此处查看获取函数的源代码：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you log in to your frontend, you should see the car list populated with
    cars from the database:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您登录到前端，您应该看到汽车列表中填充了来自数据库的汽车：
- en: '![](img/e012fc8c-8e04-47ac-a9be-4fd30696ead4.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e012fc8c-8e04-47ac-a9be-4fd30696ead4.png)'
- en: 'Check the request content from the developer tools; you can see that it contains
    the `Authorization` header with the token value:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发者工具中检查请求内容；您会看到它包含带有令牌值的`Authorization`标头：
- en: '![](img/09be0970-1398-44ce-b138-f04da57cb258.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09be0970-1398-44ce-b138-f04da57cb258.png)'
- en: 'All other CRUD functionalities need the same modification to work correctly.
    The source code of the delete function looks like the following, after the modifications:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他CRUD功能需要相同的修改才能正常工作。修改后，删除函数的源代码如下所示：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The source code of the add function looks as follows, after the modifications:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后，添加函数的源代码如下所示：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And finally, the source code of the update function looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新函数的源代码如下所示：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, all the CRUD functionalities are working after you have logged in to the
    application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您登录到应用程序后，所有CRUD功能都可以正常工作。
- en: 'In the final phase, we are going to implement an error message that is shown
    to an end user if authentication fails. We are using the Material-UI `SnackBar`
    component to show the message:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后阶段，我们将实现一个错误消息，如果身份验证失败，将向最终用户显示该消息。我们使用Material-UI的`SnackBar`组件来显示消息：
- en: 'Add the following import to the `Login.js` file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下导入添加到`Login.js`文件中：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open the state for Snackbar, as we did in [Chapter 10](7c4d1f35-e2d0-453e-b3a4-aa0a754fc0ce.xhtml),
    *Adding CRUD Functionalities*:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Snackbar的状态，就像我们在[第10章](7c4d1f35-e2d0-453e-b3a4-aa0a754fc0ce.xhtml)中所做的那样，*添加CRUD功能*：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We also need a state handler for the `Snackbar` open state to close `Snackbar`
    after the time that we set in the `Snackbar` `autoHideDuration` props:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个状态处理程序来关闭`Snackbar`的`open`状态，以在`Snackbar`的`autoHideDuration`属性中设置的时间后关闭`Snackbar`：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add `Snackbar` to the `render()` method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Snackbar`添加到`render()`方法中：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Set the `open` state value to `true` if the authentication fails:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果身份验证失败，请将“open”状态值设置为“true”：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you now log in with the wrong credentials, you can see the toast message:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在使用错误的凭据登录，您可以看到提示消息：
- en: '![](img/33d4ed39-e0a1-483e-8b19-695b009cfe9f.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/33d4ed39-e0a1-483e-8b19-695b009cfe9f.png)
- en: 'The logout functionality is much more straightforward to implement. You basically
    just have to remove the token from session storage and change the `isAuthenticated`
    state value to `false`, as shown in the following source code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注销功能要实现起来简单得多。您基本上只需从会话存储中删除令牌，并将`isAuthenticated`状态值更改为`false`，如下面的源代码所示：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then with conditional rendering, you can render the `Login` component instead
    of `Carlist`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过条件渲染，您可以渲染`Login`组件而不是`Carlist`。
- en: 'If you want to implement a menu using React Router, it is possible to implement
    so-called secured routes that can be accessed only when a user is authenticated.
    The following source code shows the secured route that shows the routed component
    if the user is authenticated, otherwise it redirects to a login page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使用React Router实现菜单，可以实现所谓的安全路由，只有在用户经过身份验证时才能访问。以下源代码显示了安全路由，如果用户经过身份验证，则显示路由组件，否则将重定向到登录页面：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is the example of the `Switch` router that is using `SecuredRoute`, which
    we defined in the previous example. The `Login` and `Contact` components can be
    accessed without authentication, but `Shop` needs authentication:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用在前面示例中定义的`SecuredRoute`的`Switch`路由的示例。`Login`和`Contact`组件可以在没有身份验证的情况下访问，但`Shop`需要身份验证：
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to implement a login functionality for our frontend
    when we are using JWT authentication. After successful authentication, we used
    session storage to save the token that we received from the backend. The token
    was then used in all requests that we sent to the backend, therefore, we had to
    modify our CRUD functionalities to work properly with authentication. In the next
    chapter, we will deploy our application to Heroku and we demonstrate how to create
    Docker containers.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在使用JWT身份验证时为我们的前端实现登录功能。成功身份验证后，我们使用会话存储保存从后端收到的令牌。然后在发送到后端的所有请求中使用该令牌，因此，我们必须修改我们的CRUD功能以正确使用身份验证。在下一章中，我们将部署我们的应用程序到Heroku，并演示如何创建Docker容器。
- en: Questions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How should you create a login form?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何创建登录表单？
- en: How should you log in to the backend using JWT?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何使用JWT登录到后端？
- en: How should you store tokens to session storage?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何将令牌存储到会话存储中？
- en: How should you send a token to the backend in CRUD functions?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何在CRUD功能中将令牌发送到后端？
- en: Further reading
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很好的资源可供学习React：
- en: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
