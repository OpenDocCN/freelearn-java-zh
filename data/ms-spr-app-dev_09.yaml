- en: Chapter 9. Bootstrap your Application with Spring Boot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用Spring Boot引导应用程序
- en: In this chapter, we shall see another Spring package—Spring Boot, which allows
    users to quickly get started with the Spring Framework. Applications that make
    use of **Spring Boot Abstraction Layer** are called **Spring Boot Applications**.
    Spring has come up with a Spring intializer web application, which has a web interface,
    in which we can select the kind of application we would need to get started.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到另一个Spring包——Spring Boot，它允许用户快速开始使用Spring框架。使用**Spring Boot抽象层**的应用程序称为**Spring
    Boot应用程序**。Spring推出了一个Spring初始化器Web应用程序，其中有一个Web界面，我们可以在其中选择需要启动的应用程序类型。
- en: If you have ever run with different application servers, new developers typically
    have to configure many settings just to get up and run. The Spring Boot approach
    allows developers to get up and run right out of the box, allowing them to focus
    on developing code and not configuring application servers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经在不同的应用服务器上运行过，新开发人员通常必须配置许多设置才能启动和运行。Spring Boot方法允许开发人员立即启动和运行，而无需配置应用服务器，从而可以专注于开发代码。
- en: Spring has also come up with a command line interface to help us quickly start
    with Spring development. In this chapter, let's dive into Spring Boot and see
    what it offers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Spring还推出了一个命令行界面，帮助我们快速开始Spring开发。在本章中，让我们深入了解Spring Boot并看看它提供了什么。
- en: Setting up Spring Boot
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Spring Boot
- en: 'The Spring Boot application can be set up in the following mentioned ways:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot应用程序可以通过以下方式设置：
- en: Use [http://start.spring.io/](http://start.spring.io/)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[http://start.spring.io/](http://start.spring.io/)
- en: Use Maven to download the dependency from repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven从存储库下载依赖项
- en: Use Gradle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gradle
- en: Download source code from Spring guide repo
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Spring指南存储库下载源代码
- en: Download Spring STS and use the starter project
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Spring STS并使用启动器项目
- en: Spring Gradle MVC application
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Gradle MVC应用程序
- en: '**Gradle** is similar to Maven; it helps in building the applications. We need
    to provide all the dependency information in the `build.gradle` file. Spring boot
    also has a Gradle plugin. The Gradle plugin helps in placing all the dependencies
    JAR files on the classpath and finally builds into a single runnable JAR file.
    The runnable JAR file will have an `application.java` file; this class will have
    a `public static void main()` method. This class will be flagged as a runnable
    class.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gradle**类似于Maven；它有助于构建应用程序。我们需要在`build.gradle`文件中提供所有依赖信息。Spring Boot还有一个Gradle插件。Gradle插件有助于将所有依赖的JAR文件放置在类路径上，并最终构建成一个可运行的单个JAR文件。可运行的JAR文件将具有一个`application.java`文件；这个类将有一个`public
    static void main()`方法。这个类将被标记为可运行的类。'
- en: 'A sample Gradle file is shown here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了一个示例Gradle文件：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are using an Eclipse as IDE, STS has come up with Gradle pulgins for
    Eclipse ([http://gradle.org/docs/current/userguide/eclipse_plugin.html](http://gradle.org/docs/current/userguide/eclipse_plugin.html))
    which can be downloaded and installed from [https://www.gradle.org/tooling](https://www.gradle.org/tooling).
    Gradle also comes with a similar set up to clean and build the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Eclipse作为IDE，STS已经推出了适用于Eclipse的Gradle插件（[http://gradle.org/docs/current/userguide/eclipse_plugin.html](http://gradle.org/docs/current/userguide/eclipse_plugin.html)），可以从[https://www.gradle.org/tooling](https://www.gradle.org/tooling)下载并安装。Gradle也提供了类似的设置来清理和构建应用程序。
- en: 'The next step is to define the application context root in the properties file.
    A Gradle project structure is similar to a Maven project structure. Place the
    `application.properties` file in the `resources` folder. We need to provide the
    server context path and server context port. Following is the sample properties
    file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在属性文件中定义应用程序上下文根。Gradle项目结构类似于Maven项目结构。将`application.properties`文件放在`resources`文件夹中。我们需要提供服务器上下文路径和服务器上下文端口。以下是示例属性文件：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let us create a simple package: `com.packt.controller`'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的包：`com.packt.controller`
- en: Create a simple Spring controller class in the package and use the @ Controller
    annotations.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包中创建一个简单的Spring控制器类，并使用@ Controller注解。
- en: Let us create a method with `@Request` mapping annotations. The `@RequestMapping`
    annotations maps send a request to a JSP page. In this method, we are mapping
    the request to the methods. The methods return a string variable or a model view
    object.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个带有`@Request`映射注解的方法。`@RequestMapping`注解将请求映射到JSP页面。在这个方法中，我们将请求映射到方法。这些方法返回一个字符串变量或模型视图对象。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a Spring MVC configuration file as follows using `@Configuration` and
    `@WebMVC` `annotation`. We have also configured the internal view resolver for
    the application file.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Spring MVC配置文件，使用`@Configuration`和`@WebMVC` `annotation`如下。我们还为应用程序文件配置了内部视图解析器。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let us create a simple JSP page named `greet.jsp`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`greet.jsp`的简单JSP页面：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next create a simple application class with annotations `@EnableAutoConfiguration`
    and `@ComponentScan` annotations. The `@ComponenetScan` annotation indicates that
    the Spring Framework core should search for all of the classes under the package.
    The `@EnableAutoConfiguration` annotation is used instead of configuring dispatcher
    servlet in `web.xml` file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一个简单的应用程序类，使用`@EnableAutoConfiguration`和`@ComponentScan`注解。`@ComponenetScan`注解表示Spring框架核心应搜索包下的所有类。`@EnableAutoConfiguration`注解用于代替在`web.xml`文件中配置dispatcher
    servlet。
- en: 'Following is the sample file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是示例文件：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Access the following URLs:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下URL：
- en: '`http://localhost:8080/PacktSpringBootMVCDemo/saygoodmorning`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/PacktSpringBootMVCDemo/saygoodmorning`'
- en: '`http://localhost:8080/PacktSpringBootMVCDemo/saygoodafternoon`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/PacktSpringBootMVCDemo/saygoodafternoon`'
- en: '`http://localhost:8080/PacktSpringBootMVCDemo/saygoodnight`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/PacktSpringBootMVCDemo/saygoodnight`'
- en: Hot swapping with Spring Boot
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Spring Boot进行热交换
- en: Hot swapping or hot deployment means that you can make changes to the class
    file or any file in the application, and see the changes reflected in the running
    application immediately. We may need to reload the application on the web browser
    or just refresh the page. Spring Loaded is a dependency JAR file that supports
    hot deployment. Let us look at hot swapping in the Spring Boot application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 热交换或热部署意味着您可以对类文件或应用程序中的任何文件进行更改，并立即在运行中的应用程序中看到更改。我们可能需要重新加载Web浏览器上的应用程序，或者只需刷新页面。Spring
    Loaded是一个支持热部署的依赖JAR文件。让我们看看Spring Boot应用程序中的热交换。
- en: 'Let''s create a simple Spring MVC application with the Thymeleaf template engine:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Thymeleaf模板引擎创建一个简单的Spring MVC应用程序：
- en: 'First, we need to download the Spring Loaded JAR from GitHub repositories.
    Check the following URL for the latest version:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要从GitHub存储库下载Spring Loaded JAR。检查以下URL以获取最新版本：
- en: '[https://github.com/spring-projects/spring-loaded](https://github.com/spring-projects/spring-loaded).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/spring-projects/spring-loaded](https://github.com/spring-projects/spring-loaded)。'
- en: 'Ensure that you have all the mentioned dependencies in a `pom.xml` file or
    explicitly add them to your project:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您在`pom.xml`文件中具有所有提到的依赖项，或者将它们明确添加到您的项目中：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next step is to add the downloaded Spring loaded JAR to the Eclipse or
    Eclipse STS environment. Follow the given steps to add Spring loaded JAR as a
    run time configuration:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将下载的Spring loaded JAR添加到Eclipse或Eclipse STS环境中。按照给定的步骤将Spring loaded JAR添加为运行时配置：
- en: Create a `PacktSpringBootThymeLeafExample` project in Eclipse.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个`PacktSpringBootThymeLeafExample`项目。
- en: Right Click on your project.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击您的项目。
- en: Search for **Run As**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**Run As**。
- en: Click on **Run Configuration**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Run Configuration**。
- en: Click on Java Application.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Java应用程序。
- en: Click on Project Name.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击项目名称。
- en: 'Select **Arguments** in the **VM Argument** section; add the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**VM Argument**部分中选择**Arguments**；添加以下命令：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Click on **Apply** and **Run**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Apply**和**Run**。
- en: 'We also need to configure the `application.properties` file, so that any modifications
    done to **Thymeleaf** pages don''t need a server restart:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要配置`application.properties`文件，以便对**Thymeleaf**页面进行任何修改时不需要重新启动服务器：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can use the Spring STS starter project and create a Spring Boot class. Spring
    Eclipse STS will give us the following two classes:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Spring STS starter项目并创建一个Spring Boot类。Spring Eclipse STS将为我们提供以下两个类：
- en: '`Application.java`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application.java`'
- en: '`ApplicationTest.java`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationTest.java`'
- en: 'The `Application.java` is the main class for Spring Boot, as it has the public
    static void main method in it. In this method, `ApplicationContext` is initialized
    in it using `SpringApplication` class. The `SpringApplication` class has some
    of the following annotations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application.java`是Spring Boot的主类，因为它在其中有public static void main方法。在这个方法中，使用`SpringApplication`类对`ApplicationContext`进行初始化。`SpringApplication`类具有以下一些注解：'
- en: '`@ConditionalOnClass`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ConditionalOnClass`'
- en: '`@ConditionalOnMissingBean`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ConditionalOnMissingBean`'
- en: 'These are executed to check the list of beans available on the classpath. If
    you would like to see the beans placed under the classpath by the framework, make
    a slight modification to the generated `Application.java` file as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用于检查类路径上可用的bean列表。如果您想要查看框架放置在类路径下的bean，可以对生成的`Application.java`文件进行轻微修改，如下所示：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `SpringApplication` class is found in the package `org.springframework.boot.SpringApplication`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpringApplication`类位于`org.springframework.boot.SpringApplication`包中。'
- en: 'A simple illustration of `SpringApplication` class is shown here, where the
    static run method of the `SpringApplication` class is shown:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了`SpringApplication`类的一个简单示例，其中显示了`SpringApplication`类的静态运行方法：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Look at another illustration here, where a `SpringApplication` class is first
    initialized and then the `.run` method is called:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里看另一个例子，首先初始化一个`SpringApplication`类，然后调用`.run`方法：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following are the constructors available for the `SpringApplication` class:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`SpringApplication`类可用的构造函数：
- en: '`SpringApplication(Object... sources)`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringApplication(Object... sources)`'
- en: '`SpringApplication(ResourceLoader resourceLoader, Object... sources)`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringApplication(ResourceLoader resourceLoader, Object... sources)`'
- en: Let us create a Simple Controller class with the `@RestController` annotation
    that is available in Spring's latest version 4.x.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个带有Spring最新版本4.x中可用的`@RestController`注解的简单Controller类。
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we shall configure Spring Boot to process JSP pages; by default Spring
    Boot doesn''t configure the JSP, so we shall create a JSP controller as shown
    in the following code snippet:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将配置Spring Boot来处理JSP页面；默认情况下，Spring Boot不配置JSP，因此我们将创建一个JSP控制器，如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Configure the properties files as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置属性文件：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let us create a JSP file `myjsp:`
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个JSP文件`myjsp:`
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Following is the implementation class of `EmbededServletContainerCustomizer`,
    which actually embeds the web server container in the application. It invokes
    the server and deploys the application into it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`EmbededServletContainerCustomizer`的实现类，它实际上将Web服务器容器嵌入应用程序中。它调用服务器并将应用程序部署到其中。
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Integrating Spring Boot with Spring Security
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Spring Boot与Spring安全集成
- en: In this section, we shall see how we can integrate Spring boot with Spring security
    using annotations. We can easily integrate Spring security with Spring boot.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用注解将Spring Boot与Spring安全集成。我们可以很容易地将Spring安全与Spring Boot集成。
- en: 'Let us first embed a tomcat server in Spring boot to accept a request; following
    is the code we need to create a key store file to make it more secure:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先在Spring boot中嵌入一个tomcat服务器来接受请求；以下是我们需要创建一个密钥库文件使其更安全的代码：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let us also create a Simple Security Configuration file in java using `@Configuration`
    and `@EnableWebMVCSecurity` annotations. The security configuration file extends
    `WebSecurityConfigurerAdapter`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们还使用`@Configuration`和`@EnableWebMVCSecurity`注解在java中创建一个简单的安全配置文件。安全配置文件扩展了`WebSecurityConfigurerAdapter`。
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Cloud Foundry support for Eclipse Spring Boot
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse Spring Boot的Cloud Foundry支持
- en: In this section, let's see how we can develop applications on Cloud Foundry
    using Spring boot. **Cloud Foundry** is a platform that is used as a service cloud
    application. It is an open Paas. Paas makes it feasible to run deploy, and run
    an application on cloud.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看如何使用Spring boot在Cloud Foundry上开发应用程序。**Cloud Foundry**是一个用作服务云应用程序的平台。它是一个开放的PaaS。PaaS使得在云上运行、部署和运行应用程序成为可能。
- en: Refer to the following link, which gives the complete information of the Spring
    platform that is available as service and how we can configure Spring to work
    with Cloud Foundry. You will see that it offers Platform as a service from MongoDB
    to RabbitMQ Messaging Server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下链接，其中提供了有关作为服务可用的Spring平台的完整信息以及如何配置Spring以与Cloud Foundry一起工作。您将看到它提供了从MongoDB到RabbitMQ消息服务器的平台作为服务。
- en: '[http://docs.cloudfoundry.org/buildpacks/java/spring-service-bindings.html](http://docs.cloudfoundry.org/buildpacks/java/spring-service-bindings.html)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.cloudfoundry.org/buildpacks/java/spring-service-bindings.html](http://docs.cloudfoundry.org/buildpacks/java/spring-service-bindings.html)'
- en: Eclipse has also come up with a plugin for cloud foundry which can be downloaded
    and installed from the following given location. The plugin supports Spring boot
    and grails application. You can also create a server instance to a private cloud
    that uses a self signed certificate.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse还推出了一个针对云平台的插件，可以从以下给定位置下载和安装。该插件支持Spring boot和grails应用程序。您还可以创建一个服务器实例到使用自签名证书的私有云。
- en: '[https://github.com/cloudfoundry/eclipse-integration-cloudfoundry](https://github.com/cloudfoundry/eclipse-integration-cloudfoundry)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/cloudfoundry/eclipse-integration-cloudfoundry](https://github.com/cloudfoundry/eclipse-integration-cloudfoundry)'
- en: All that we need to do is develop a simple boot application, and drag and drop
    it into the cloud foundry server, then restart the server.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是开发一个简单的启动应用程序，并将其拖放到Cloud Foundry服务器中，然后重新启动服务器。
- en: RestfulWebService using Spring Boot
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot开发RestfulWebService
- en: In this section, let's develop a simple restful service and bootstrap the application
    using `SpringBoot`. We will also create a simple restful service that will store
    the product information into the database.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们开发一个简单的restful服务，并使用`SpringBoot`引导应用程序。我们还将创建一个简单的restful服务，将产品信息存储到数据库中。
- en: 'The Product creation scenario should satisfy the following mentioned use cases:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 产品创建场景应满足以下提到的用例：
- en: Given that no product with the same `Product_id` exists, it should store a new
    product in the database and immediately return the stored object.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设不存在具有相同`Product_id`的产品，它应该将新产品存储在数据库中并立即返回存储的对象。
- en: Given there exist a product with the same `Product_id`, it should not store,
    but return an error status with the relevant message.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设存在一个具有相同`Product_id`的产品，它不应该存储，而是返回一个带有相关消息的错误状态。
- en: Given there are previously stored products, it should be able to retrieve the
    list of them.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设以前存储的产品，它应该能够检索它们的列表。
- en: Following is the of `pom.xml` file, for the dependency reference used in the
    application. You can see that we have used the parent Spring boot reference here,
    so that we can resolve all the dependency references. We have also set that Java
    version as 1.7 in the `pom.xml` file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`pom.xml`文件，用于应用程序中使用的依赖项引用。您可以看到我们在这里使用了父Spring boot引用，以便我们可以解析所有依赖项引用。我们还在`pom.xml`文件中设置了Java版本为1.7。
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Let's see the dependencies used in the `pom.xml` file. Following is the Spring
    boot dependencies used. Also, observe that the version information is not specified,
    since it is managed by the previously mentioned `spring-boot-starter-parent`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`pom.xml`文件中使用的依赖项。以下是使用的Spring boot依赖项。还要注意，版本信息没有指定，因为它由前面提到的`spring-boot-starter-parent`管理。
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We shall also see why these dependencies are used for Spring boot. When it
    comes to Spring boot, its functions are spread between the starter modules:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到为什么这些依赖项被用于Spring boot。当涉及到Spring boot时，它的功能分布在starter模块之间：
- en: '`spring-boot-starter`: This is the main core module of Spring boot'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot-starter`：这是Spring boot的主要核心模块'
- en: '`spring-boot-starter-test`: This has some tools for unit testing, including
    JUnit4 and Mockito'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-test`：这里有一些用于单元测试的工具，包括JUnit4和Mockito'
- en: '`spring-boot-starter-web`: This pulls Spring MVC dependencies, but also Jackson
    which will be used for JSON, and most importantly Tomcat, which acts as an embedded
    Servlet container'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-web`：这会拉取Spring MVC依赖项，还有将用于JSON的Jackson，最重要的是Tomcat，它充当嵌入式Servlet容器'
- en: '`spring-boot-starter-data-jpa`: This is used for setting up Spring Data JPA,
    and comes bundled with Hibernate'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-data-jpa`：用于设置Spring Data JPA，并与Hibernate捆绑在一起'
- en: '`Guava`: It uses `@Inject` annotation instead of `@Autowired`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Guava`：它使用`@Inject`注释而不是`@Autowired`'
- en: 'Lastly, add a Spring boot Maven plugin as follows. The functionalities of the
    `spring-boot-maven` plugin are, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加一个Spring boot Maven插件如下。`spring-boot-maven`插件的功能如下：
- en: It provides a `spring-boot:run` goal for Maven, so the application can be easily
    run without packaging.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为Maven提供了一个`spring-boot:run`目标，因此应用程序可以在不打包的情况下轻松运行。
- en: It hooks into a package goal to produce an executable JAR file with all the
    dependencies included, similar to a `maven-shade` plugin, but in a less messy
    way.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它钩入一个打包目标，以生成一个包含所有依赖项的可执行JAR文件，类似于`maven-shade`插件，但方式不那么混乱。
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So far, we have looked at the dependencies and its functions, now let us start
    framing the application.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看了依赖项及其功能，现在让我们开始构建应用程序。
- en: '**Bean Class or Entity Class**:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bean类或实体类**：'
- en: 'Let us create a simple `Product.java` file as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的`Product.java`文件如下：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next create a `Jparepository` subinterface; we do not need to provide any implementation
    for this, since it gets handled by Spring JPA data:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建一个`Jparepository`子接口；我们不需要为此提供任何实现，因为它由Spring JPA数据处理：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Service class**:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务类**：'
- en: Let's create a service interface which handles the save.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个处理保存的服务接口。
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We should also create an implementation class for the service interface:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还应该为服务接口创建一个实现类：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the next step, we shall also create a test class for the service `Impl`
    as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，我们还将创建一个用于服务`Impl`的测试类，如下所示：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s create a controller using the `@RestController` annotations; also observe
    that we used the `@Inject` annotation:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`@RestController`注解创建一个控制器；还要注意我们使用了`@Inject`注解。
- en: '`@RestController`: The difference between this and the `@Controller` annotation
    is that the former also implies `@ResponseBody` on every method, which means that
    there is less to write, since from a restful web service we are returning JSON
    objects anyway.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RestController`：这与`@Controller`注解的区别在于前者在每个方法上也意味着`@ResponseBody`，这意味着写的内容更少，因为从restful
    web服务中我们无论如何都会返回JSON对象。'
- en: '`@RequestMapping`: This maps the `createProduct()` to the `POST` request on
    the `/Product` URL. The method takes the product object as a parameter. It is
    created from the body of the request thanks to `@RequestBody` annotation. It is
    then validated, which is enforced by `@Valid`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RequestMapping`：这将`createProduct()`映射到`/Product` URL上的`POST`请求。该方法将产品对象作为参数。它是从请求的主体中创建的，这要归功于`@RequestBody`注解。然后进行验证，这是由`@Valid`强制执行的。'
- en: '`@Inject:` The `ProductService` will be injected to the constructor, and the
    product object is passed to its `save()` method for storage. After storing, the
    stored product object will be returned. Spring will convert it back to JSON automatically,
    even without `@ResponseBody` annotation, which is default for `@RestController`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Inject`：`ProductService`将被注入到构造函数中，并且产品对象将被传递给其`save()`方法进行存储。存储后，存储的产品对象将被自动转换回JSON，即使没有`@ResponseBody`注解，这是`@RestController`的默认值。'
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s create a `Main` class with `public static void main()`. Let us also
    use these annotations:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个带有`public static void main()`的`Main`类。我们还可以使用这些注解：
- en: '`@Configuration` - This tells the Spring Framework that it is a configuration
    class'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Configuration` - 这告诉Spring框架这是一个配置类'
- en: '`@ComponentScan` - This enables the scanning of packages and subpackages for
    Spring Components'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ComponentScan` - 这使得可以扫描包和子包以寻找Spring组件'
- en: '`@EnableAutoConfiguration`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@EnableAutoConfiguration`'
- en: The class further extends `SpringBootServletInitializer`, which will configure
    the dispatcher servlet for us and override the `configure` method.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该类进一步扩展了`SpringBootServletInitializer`，它将为我们配置调度程序servlet并覆盖`configure`方法。
- en: 'The following is the `Main` class:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Main`类：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, let''s run the application using Maven and Bootstrap:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用Maven和Bootstrap运行应用程序：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Having done that now you can:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以做到这一点：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And see whether the response from http://localhost:8080/ will be like:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 并查看http://localhost:8080/的响应是否如下：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have demonstrated the process of using Spring boot to Bootstarp
    applications. We started with setting up a simple Spring boot project. We have
    also created a simple MVC application with Gradle support. Next, we discussed
    hot swapping java files using Spring boot.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们演示了使用Spring Boot启动应用程序的过程。我们从设置一个简单的Spring Boot项目开始。我们还创建了一个带有Gradle支持的简单MVC应用程序。接下来，我们讨论了使用Spring
    Boot进行热交换Java文件的方法。
- en: We have also given information as to how Spring boot supports the cloud foundry
    server and helps to deploy applications on cloud. Lastly, we have demonstrated
    a restful application with Spring boot.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了关于Spring Boot如何支持云平台服务器并帮助在云上部署应用程序的信息。最后，我们演示了一个使用Spring Boot的restful应用程序。
- en: In the next chapter, we will talk about Spring caching.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Spring缓存。
