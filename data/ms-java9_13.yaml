- en: Security Enhancements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全增强
- en: In the last chapter, we covered concurrency enhancements introduced with the
    Java 9 platform. We took an in-depth look at concurrency both as a core Java concept
    and as a series of enhancements for Java 9\. We also explored the `Flow` class
    API that supports Reactive Programming, a new concept in Java 9\. In addition,
    we explored concurrency enhancements and the new Spin-Wait hints introduced in
    Java 9.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了 Java 9 平台引入的并发增强。我们深入探讨了并发，既作为 Java 的核心概念，也作为 Java 9 的系列增强。我们还探讨了支持响应式编程的
    `Flow` 类 API，这是 Java 9 中的新概念。此外，我们还探讨了 Java 9 中引入的并发增强和新 Spin-Wait 指令。
- en: In this chapter, we will look at several small changes made to the JDK that
    involve security. The size of these changes does not reflect their significance.
    The security enhancements introduced with the Java 9 platform provide developers
    with a greater ability to write and maintain applications that are more secure
    than previously possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看对 JDK 进行的一些涉及安全性的小改动。这些改动的大小并不反映它们的显著性。Java 9 平台引入的安全增强为开发者提供了编写和维护比以前更安全的应用程序的能力。
- en: 'Specifically, we will review the following content areas in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将回顾以下内容领域：
- en: Datagram Transport Layer Security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据报传输层安全
- en: Creating PKCS12 keystores
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 PKCS12 密钥库
- en: Improving security application performance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高安全应用程序性能
- en: TLS application-layer protocol negotiation extension
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS 应用层协议协商扩展
- en: Leveraging CPU instructions for GHASH and RSA
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 CPU 指令进行 GHASH 和 RSA
- en: OCSP stapling for TLS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS 的 OCSP 钩子
- en: DRBG-based `SecureRandom` implementations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 DRBG 的 `SecureRandom` 实现
- en: Datagram Transport Layer Security
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据报传输层安全
- en: '**Datagram Transport Layer Security** (**DTLS**), is a communications protocol.
    The protocol provides a layer of security for datagram-based applications. DTLS
    permits secure communications and is based on the **Transport Layer Security**
    (**TLS**) protocol. Embedded security helps ensure messages are not forged, tampered
    with, or eavesdropped.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据报传输层安全**（**DTLS**），是一种通信协议。该协议为基于数据报的应用提供一层安全。DTLS 允许安全通信，并基于 **传输层安全**（**TLS**）协议。嵌入式安全有助于确保消息不被伪造、篡改或窃听。'
- en: 'Let''s review the relevant terminology:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下相关术语：
- en: '**Communication protocol**: A set of rules that govern how information is transmitted.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通信协议**：一组规则，用于规范信息的传输。'
- en: '**Datagram**: A structured transfer unit.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据报**：一个结构化传输单元。'
- en: '**Eavesdropping**: Undetected listening to in-transit data packets.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窃听**：对传输中的数据包进行未检测到的监听。'
- en: '**Forgery**: Transmission of a packet with falsified sender.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**伪造**：发送伪造发送者的数据包。'
- en: '**Network packet**: A formatted unit of data for transmission.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络数据包**：用于传输的格式化数据单元。'
- en: '**Tampering**: The altering of data packets after the sender transmits them
    and before the intended receiver receives them.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**干扰**：在发送者发送数据包后和预期接收者接收它们之前更改数据包。'
- en: '**TLS protocol**: The most common network security protocol. Uses, as an example,
    IMPA and POP for email.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TLS 协议**：最常见的网络安全协议。例如，使用 IMPA 和 POP 进行电子邮件。'
- en: The DTLS Java Enhancement Proposal 219 is aimed at creating an API for the DTLS
    versions 1.0 and 1.2.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: DTLS Java 增强提案 219 旨在为 DTLS 版本 1.0 和 1.2 创建 API。
- en: In the sections that follow, we will look at each of the DTLS versions, 1.0
    and 1.2, and then review the changes to the Java 9 platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将查看 DTLS 的每个版本，1.0 和 1.2，然后回顾对 Java 9 平台的改变。
- en: DTLS protocol version 1.0
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DTLS 协议版本 1.0
- en: 'DTLS protocol version 1.0 was established in 2006 and provides communications
    security for datagram protocols. Here are the basic characteristics:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: DTLS 协议版本 1.0 于 2006 年建立，为数据报协议提供通信安全。以下是基本特征：
- en: 'Permits client/server applications to communicate without permitting:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许客户端/服务器应用程序通信，但不允许：
- en: Eavesdropping
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窃听
- en: Tampering
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 干扰
- en: Message forgery
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息伪造
- en: Based on the TLS protocol
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 TLS 协议
- en: Provides security guarantees
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供安全保证
- en: The DLS protocol's datagram semantics are preserved
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DLS 协议的数据报语义得到保留
- en: 'The following diagram illustrates where the **Transport Layer** fits into the
    overall schema of **SSL/TLS** protocol layers and protocols for each layer:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了 **传输层**在 **SSL/TLS** 协议层和每层协议的整体架构中的位置：
- en: '![](img/1e3ce359-125e-4d4e-a6bf-60d6e972cdd5.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e3ce359-125e-4d4e-a6bf-60d6e972cdd5.png)'
- en: 'DTLS protocol version 1.0 provides detailed specifications with the major areas
    of coverage listed as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: DTLS协议版本1.0提供了详细的规范，主要覆盖领域如下：
- en: 'Ciphers:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：
- en: Anti-replay block cipher
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反重放分组密码
- en: New cipher suites
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的密码套件
- en: Standard (or null) stream cipher
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准或空流密码
- en: Denial of service countermeasures
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务对策
- en: 'Handshake:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 握手：
- en: Message format
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息格式
- en: Protocol
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议
- en: Reliability
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠性
- en: 'Messages:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息：
- en: Fragmentation and reassembly
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分片和重组
- en: Loss-insensitive messaging
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无损消息
- en: Size
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小
- en: Timeout and retransmission
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时和重传
- en: Packet loss
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包丢失
- en: '**Path Maximum Transition Unit** (**PMTU**) discovery'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径最大传输单元**（**PMTU**）发现'
- en: Record layer
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录层
- en: Record payload protection
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录有效载荷保护
- en: Reordering
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序
- en: Replay detection
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重放检测
- en: Transport layer mapping
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输层映射
- en: DTLS protocol version 1.2
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DTLS协议版本1.2
- en: DTLS protocol version 1.2 was published in January 2012 and is copyrighted by
    the **Internet Engineering Task Force** (**IETF**). This section shares code samples
    that illustrate the changes in version 1.2.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: DTLS协议版本1.2于2012年1月发布，由**互联网工程任务组**（**IETF**）版权所有。本节分享了代码示例，说明了1.2版本中的变化。
- en: 'The following code illustrates the TLS 1.2 handshake message header. This format
    supports:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码说明了TLS 1.2握手消息头。此格式支持：
- en: Message fragmentation
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息分片
- en: Message loss
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息丢失
- en: Reordering
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code presented in this section is from the DTLS protocol documentation and
    is republished here in accordance with IETF's *Legal Provisions Relating to IETF
    Documents*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中展示的代码来自DTLS协议文档，并按照IETF的《关于IETF文档的法律条款》在此重新发布。
- en: 'The record layer contains the information that we intend to send into records.
    The information starts off inside a `DTLSPlaintext` structure and then, after
    the handshake takes place, the records are encrypted and are eligible to be sent
    by the communication stream. The record layer format follows with new fields in
    version 1.2 annotated with the `// New field` in-code comments as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 记录层包含我们打算发送到记录中的信息。信息最初在`DTLSPlaintext`结构内部，然后，在握手发生后，记录被加密，并可以通过通信流发送。记录层的格式在1.2版本中增加了新字段，并在代码注释中用`//
    新字段`标注如下：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, here is the updated handshake protocol:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是更新的握手协议：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: DTLS support in Java 9
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9中的DTLS支持
- en: 'Java 9''s implementation of the DTLS API is transport-independent and light-weight.
    The design considerations for the API were as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9对DTLS API的实现是传输无关且轻量级的。API的设计考虑如下：
- en: Read timeouts will not be managed
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取超时将不会被管理
- en: The implementation will use a single TLS record for each wrap/unwrap operation
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现将使用单个TLS记录进行每个封装/解封装操作
- en: 'The application, not the API, will be required to:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序，而不是API，将需要：
- en: Determine timeout values
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定超时值
- en: Assemble out-of-order application data
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装乱序应用程序数据
- en: 'The DTLS is a protocol used to secure data from the application layer before
    that data is passed to a transport layer protocol. DTLS is a good solution for
    encrypting and transmitting real-time data. Caution should be exercised so that
    we do not introduce vulnerabilities in our application''s implementation. Here
    are security considerations specific to implementing DTLS in your Java 9 applications:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: DTLS是一种在将数据传递到传输层协议之前，用于保护应用层数据的协议。DTLS是加密和传输实时数据的好解决方案。应谨慎行事，以确保我们不会在我们的应用程序实现中引入漏洞。以下是在Java
    9应用程序中实现DTLS的具体安全考虑：
- en: Implement DTLS v1.2, since that is the latest version supported by Java 9.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现DTLS v1.2，因为这是Java 9支持的最新版本。
- en: Avoid **Rivest-Shamir-Adleman** (**RSA**) encryption. If RSA must be used, add
    addition security to your private keys since this is a weak point for RSA.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用**RSA**加密。如果必须使用RSA，请为您的私钥添加额外的安全性，因为这是RSA的弱点。
- en: Use 192 bits or more when using the **Elliptic Curve Diffie-Hellman** (**ECDH**)
    anonymous key agreement protocol. The 192-bit value is based on a **National Institute
    of Standards and Technology** (**NIST**) recommendation.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用192位或更多位时，请使用**椭圆曲线迪菲-赫尔曼**（**ECDH**）匿名密钥协商协议。192位值基于**国家标准与技术研究院**（**NIST**）的建议。
- en: The use of **Authenticated Encryption with Associated Data** (**AEAD**), a form
    of encryption, is highly recommended. AEAD provides authenticity, confidentiality,
    and integrity assurances on the data being encrypted and decrypted.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈推荐使用**带关联数据的认证加密**（**AEAD**），这是一种加密形式。AEAD为加密和解密的数据提供真实性、机密性和完整性保证。
- en: Always implement the `renegotiation_info` extension when implementing handshake
    renegotiation.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实现握手重协商时，始终实现`renegotiation_info`扩展。
- en: Establish a **Forward Secrecy** (**FS**) capability in all Java applications
    using a communication protocol. Implementing FS ensures past session encryption
    keys are not compromised when long-term encryption keys are compromised. Ideally
    a **Perfect Forward Secrecy** (**PFS**), where each key is only valid for a single
    session, would be used in the Java applications that call for the greatest security
    of transmitted data.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有使用通信协议的Java应用程序中建立**前向安全性**（**FS**）功能。实现FS确保当长期加密密钥受到损害时，过去的会话加密密钥不会受到损害。理想情况下，在需要传输数据最高安全性的Java应用程序中，将使用**完美前向安全性**（**PFS**），其中每个密钥仅对单个会话有效。
- en: Creating PKCS12 keystores
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建PKCS12密钥存储
- en: The Java 9 platform provides increased security for keystores. In order to appreciate
    the changes ushered in by Java Enhancement Proposal 229, create PKCS12 keystores
    by default, we will first review the concept of keystores, look at the `KeyStore`
    class, and then look at the changes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9平台为密钥存储提供了增强的安全性。为了欣赏Java增强提案229带来的变化，我们将默认创建PKCS12密钥存储，首先我们将回顾密钥存储的概念，查看`KeyStore`类，然后查看这些变化。
- en: Keystore primer
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密钥存储简介
- en: The concept of a `KeyStore` is relatively simple. It is essentially a database
    file, or data repository file, that stores public key certificates and private
    keys. The `Keystore` will be stored in the `/jre/lib/security/cacerts` folder.
    As you will see in the next section, this database is managed by Java's `java.security.KeyStore`
    class methods.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore`的概念相对简单。它本质上是一个数据库文件，或者数据存储文件，用于存储公钥证书和私钥。`Keystore`将存储在`/jre/lib/security/cacerts`文件夹中。正如您将在下一节中看到的那样，这个数据库是由Java的`java.security.KeyStore`类方法管理的。'
- en: '`KeyStore` features include:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore`功能包括：'
- en: 'Contains one of the following entry types:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含以下之一条目类型：
- en: Private keys
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私钥
- en: Public key certificates
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公钥证书
- en: Unique alias string names for every entry
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个条目都有唯一的别名字符串名称
- en: Password protection for each key
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个密钥的密码保护
- en: Java Keystore (JKS)
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java密钥存储（JKS）
- en: 'The `java.security.KeyStore` class is the storage facility for cryptographic
    keys and certificates. This class extends `java.lang.Object`, see as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.security.KeyStore`类是加密密钥和证书的存储设施。此类扩展`java.lang.Object`，如下所示：'
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are three types of entries managed by a `KeyStore`, each implements the
    `KeyStore.Entry` interface, one of the three interfaces provided by the `KeyStore`
    class. The Entry implementations are defined in the following table:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore`管理三种类型的条目，每个条目都实现了`KeyStore.Entry`接口，这是`KeyStore`类提供的三个接口之一。条目实现定义在以下表中：'
- en: '| **Implementation** | **Description** |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **实现** | **描述** |'
- en: '| `KeyStore.PrivateKeyEntry` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `KeyStore.PrivateKeyEntry` |'
- en: Contains the `PrivateKey` and can store it in a protected format
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`PrivateKey`并可以以受保护格式存储它
- en: Contains the certificate chain for the public key
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含公钥的证书链
- en: '|'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `KeyStore.SecretKeyEntry` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `KeyStore.SecretKeyEntry` |'
- en: Contains the `SecretKey` and can store it in a protected format
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`SecretKey`并可以以受保护格式存储它
- en: '|'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `KeyStore.TrustedCertifcateEntry` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `KeyStore.TrustedCertifcateEntry` |'
- en: Contains a single public key `Certificate` from an external source
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含来自外部源的单个公钥`Certificate`
- en: '|'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'This class has been part of the Java platform since version 1.2\. It has one
    constructor, three interfaces, six sub-classes, and several methods. The constructor
    definition is:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此类自Java平台1.2版本以来就是其中的一部分。它有一个构造函数，三个接口，六个子类，以及几个方法。构造函数定义如下：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `KeyStore` class contains the following interfaces:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore`类包含以下接口：'
- en: '`public static interface KeyStore.Entry`:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static interface KeyStore.Entry`:'
- en: This interface serves as a marker for `KeyStore` entry types and contains no
    methods.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此接口作为`KeyStore`条目类型的标记，不包含任何方法。
- en: '`public static interface KeyStore.LoadStoreParameter`:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static interface KeyStore.LoadStoreParameter`:'
- en: 'This interface serves as a marker for load and store parameters and has the
    following method that returns null or the parameter used to protect the `KeyStore`
    data:'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此接口作为加载和存储参数的标记，并具有以下返回null或用于保护`KeyStore`数据的参数的方法：
- en: '`getProtectionParameter()`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getProtectionParameter()`'
- en: '`public static interface KeyStore.ProtectionParameter`:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static interface KeyStore.ProtectionParameter`:'
- en: This interface serves as a marker for `KeyStore` protection parameters and contains
    no methods.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此接口作为`KeyStore`保护参数的标记，不包含任何方法。
- en: The `java.security.KeyStore` class also contains the six nested classes listed
    as follows.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.security.KeyStore`类还包含以下列出的六个嵌套类。'
- en: Builder
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Builder
- en: 'The `KeyStore.Builder` class is used when you want to defer the instantiation
    of a `KeyStore`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要延迟`KeyStore`的实例化时使用`KeyStore.Builder`类：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This class provides the necessary information for instantiating a `KeyStore`
    object. The class has the following methods:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了实例化`KeyStore`对象所需的信息。该类具有以下方法：
- en: '`public abstract KeyStore getKeyStore() throws KeyStoreException`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract KeyStore getKeyStore() throws KeyStoreException`'
- en: '`public abstractKeyStore.ProtectionParameter getProjectionParameter(String
    alias) throws KeyStoreException`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract KeyStore.ProtectionParameter getProjectionParameter(String
    alias) throws KeyStoreException`'
- en: 'Three options for `newInstance`:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newInstance`的三种选项：'
- en: '`public static KeyStore.Builder newInstance(KeyStore keyStore, KeyStore.ProtectionParameter
    protectionParameter)`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static KeyStore.Builder newInstance(KeyStore keyStore, KeyStore.ProtectionParameter
    protectionParameter)`'
- en: '`public static KeyStore.Builder newInstance(String type, Provider provider,
    File file, KeyStore.ProtectionParameter protection)`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static KeyStore.Builder newInstance(String type, Provider provider,
    File file, KeyStore.ProtectionParameter protection)`'
- en: '`public static KeyStore.Builder newInstance(String type, Provider provider,
    KeyStore.ProtectionParameter protection)`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public static KeyStore.Builder newInstance(String type, Provider provider,
    KeyStore.ProtectionParameter protection)`'
- en: The CallbackHandlerProtection class
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`CallbackHandlerProtection`类'
- en: 'The `KeyStore.CallbackHandlerProtection` class definition is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore.CallbackHandlerProtection`类的定义如下：'
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This class provides a `ProtectionParameter` to encapsulate a `CallbackHandler`
    and has the following method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了一个`ProtectionParameter`来封装一个`CallbackHandler`，并具有以下方法：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The PasswordProtection class
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`PasswordProtection`类'
- en: 'The `KeyStore.PasswordProtection` class definition is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore.PasswordProtection`类的定义如下：'
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This call provides an implementation of `ProtectionParameter` that is password-based.
    The class has the following methods:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用提供了一个基于密码的`ProtectionParameter`实现。该类具有以下方法：
- en: '`public void destroy() throws DestroyFailedException`:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void destroy() throws DestroyFailedException`:'
- en: This method clears the password
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法清除密码
- en: '`public char[] getPassword()`:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public char[] getPassword()`:'
- en: Returns a reference to the password
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回密码的引用
- en: '`public boolean isDestroyed()`:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isDestroyed()`:'
- en: Returns true if the password was cleared
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果密码已被清除，则返回true
- en: The PrivateKeyEntry class
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`PrivateKeyEntry`类'
- en: 'The `KeyStore.PrivateKeyEntry` class definition is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore.PrivateKeyEntry`类的定义如下：'
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This creates an entry to hold a `PrivateKey` and the corresponding `Certificate`
    chain. This class has the following methods:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个条目来保存`PrivateKey`及其对应的`Certificate`链。此类具有以下方法：
- en: '`public Certificate getCertificate()`:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public Certificate getCertificate()`:'
- en: Returns the **end entity** `Certificate` from the `Certificate` chain
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`Certificate`链中返回**端实体**`Certificate`
- en: '`public Certificate[] getCertificateChain()`:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public Certificate[] getCertificateChain()`:'
- en: Returns the `Certificate` chain as an array of `Certificates`
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回`Certificate`链作为`Certificates`数组
- en: '`public PrivateKey getPrivateKey()`:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public PrivateKey getPrivateKey()`:'
- en: Returns the `PrivateKey` from the current entry
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回当前条目的`PrivateKey`
- en: '`public String toString()`:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public String toString()`:'
- en: Returns the `PrivateKeyEntry` as a `String`
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回`PrivateKeyEntry`作为`String`
- en: The SecretKeyEntry class
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`SecretKeyEntry`类'
- en: 'The `KeyStore.SecretKeyEntry` class definition is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore.SecretKeyEntry`类的定义如下：'
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This class holds a `SecretKey` and has the following methods:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此类包含一个`SecretKey`并具有以下方法：
- en: '`public SecretKey getSecretKey()`:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public SecretKey getSecretKey()`:'
- en: Returns the entry's `SecretKey`
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回条目的`SecretKey`
- en: '`public String toString()`:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public String toString()`:'
- en: Returns the `SecretKeyEntry` as a `String`.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回`SecretKeyEntry`作为`String`。
- en: The TrustedCertificateEntry class
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`TrustedCertificateEntry`类'
- en: 'The `KeyStore.TrustedCertificateEntry` class definition is as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyStore.TrustedCertificateEntry`类的定义如下：'
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This class holds a trusted `Certificate` and has the following methods:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此类包含一个受信任的`Certificate`，并具有以下方法：
- en: '`public Certificate getTrustedCertificate()`:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public Certificate getTrustedCertificate()`:'
- en: Returns the entry's trusted `Certificate`
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回条目的受信任`Certificate`
- en: '`public String toString()`:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public String toString()`:'
- en: Returns the entry's trusted `Certificate` as a `String`
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回条目的受信任`Certificate`作为`String`
- en: 'The key to using this class is understanding the flow. First, we must load
    the `KeyStore`, using the `getInstance` method. Next we request access to the
    `KeyStore` instance. Then, we have access to read and write to the `Object`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此类的关键是理解流程。首先，我们必须使用`getInstance`方法加载`KeyStore`。接下来，我们请求访问`KeyStore`实例。然后，我们可以读取和写入`Object`：
- en: '![](img/5a27e979-4b5c-4979-9eb1-ed8035aaf9d5.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a27e979-4b5c-4979-9eb1-ed8035aaf9d5.png)'
- en: 'The following code snippet shows the load-request-access implementation:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了加载-请求-访问实现：
- en: '[PRE12]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: PKCS12 default in Java 9
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9中的PKCS12默认设置
- en: Prior to Java 9, the default `KeyStore` type was **Java KeyStore** (**JKS**).
    The Java 9 platform now uses PKCS as the default `KeyStore` type, more specifically,
    PKCS12.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 9之前，默认的`KeyStore`类型是**Java密钥库**（**JKS**）。Java 9平台现在使用PKCS作为默认的`KeyStore`类型，更具体地说，是PKCS12。
- en: '**PKCS** is the acronym for **Public Key Cryptography Standards**.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**PKCS**是**公钥加密标准**的缩写。'
- en: This change to PKCS provides stronger cryptographic algorithms as compared to
    JKS. As you would expect, JDK 9 will still be compatible with JKS to support previously
    developed systems.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 与JKS相比，此PKCS更改提供了更强的加密算法。正如你所期望的，JDK 9仍然与JKS兼容，以支持先前开发的系统。
- en: Improving security application performance
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高安全应用性能
- en: Java Enhancement Proposal 232, titled *Improving Security Application Performance*,
    was focused on performance improvements when running applications with a security
    manager installed. Security managers can result in processing overhead and less
    than ideal application performance.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案232，标题为*提高安全应用性能*，专注于在安装了安全管理器的应用程序运行时的性能改进。安全管理者可能导致处理开销和低于理想的应用程序性能。
- en: This is an impressive undertaking as current CPU overhead when running security
    managers is estimated to result in 10-15% performance degradation. It is not feasible
    to completely remove the CPU overhead as some CPU processing is required to run
    the security manager. That being said, the intention of this proposal (JEP-232)
    was to decrease the overhead percentage as much as possible.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项令人印象深刻的任务，因为当前在运行安全管理者时的CPU开销估计会导致10-15%的性能下降。完全移除CPU开销是不切实际的，因为运行安全管理者需要一些CPU处理。尽管如此，本提案（JEP-232）的意图是尽可能减少开销百分比。
- en: 'This effort resulted in the following optimizations, each detailed in subsequent
    sections:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作导致了以下优化，每个优化将在后续章节中详细说明：
- en: Security policy enforcement
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全策略强制执行
- en: Permission evaluation
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限评估
- en: Hash code
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希码
- en: Package checking algorithm
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包检查算法
- en: Security policy enforcement
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全策略强制执行
- en: 'JDK 9 uses `ConcurrentHashMap` for mapping `ProtectionDomain` to `PermissionCollection`.
    `ConcurrentHashMap` is typically used for high concurrency in applications. It
    has the following characteristics:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 9使用`ConcurrentHashMap`将`ProtectionDomain`映射到`PermissionCollection`。`ConcurrentHashMap`通常用于应用程序中的高并发。它具有以下特性：
- en: Thread safe
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程安全
- en: Enter map does not need to be synchronized
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入映射不需要同步
- en: Fast reads
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速读取
- en: Writes use locks
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入使用锁
- en: No object-level locking
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无对象级别锁定
- en: Locking at a very granular level
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非常细粒度的级别上锁定
- en: 'The `ConcurrentHashMap` class definition follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentHashMap`类定义如下：'
- en: '[PRE13]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding class definition, `K` refers to the type of keys maintained
    by the hash map and `V` indicates the type of mapped values. There is a `KeySetView`
    sub-class and several methods.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的类定义中，`K`指的是哈希图维护的键的类型，而`V`表示映射值的类型。有一个`KeySetView`子类和几个方法。
- en: 'There are three additional classes related to enforcing security policy--`ProtectionDomain`,
    `PermissionCollection`, and `SecureClassLoader`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 与强制执行安全策略相关的有三个额外的类--`ProtectionDomain`、`PermissionCollection`和`SecureClassLoader`：
- en: The `ProtectionDomain` class is used to encapsulate a group of classes so that
    permissions can be granted to the domain.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProtectionDomain`类用于封装一组类，以便可以授予域权限。'
- en: The `PermissionCollection` class represents a collection of permission objects.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PermissionCollection`类表示一组权限对象。'
- en: The `SecureClassLoader` class, which extends the `ClassLoader` class, provides
    additional functionality for defining classes with permissions for retrieval by
    the system policy. In Java 9, this class uses `ConcurrentHashMap` for increased
    security.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecureClassLoader`类扩展了`ClassLoader`类，为定义具有系统策略检索权限的类提供了额外的功能。在Java 9中，此类使用`ConcurrentHashMap`以增加安全性。'
- en: Permission evaluation
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限评估
- en: 'Under the category of permission evaluation, three optimizations were made:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在权限评估的类别下，进行了三项优化：
- en: The `identifyPolicyEntries` list previously had policy provider code for synchronization.
    This code has been removed in JDK 9.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identifyPolicyEntries` 列表之前有用于同步的策略提供者代码。在 JDK 9 中已删除此代码。'
- en: '`PermissionCollection` entries are now stored in a `ConcurrentHashMap`. They
    were previously stored as a `HashMap` in a `Permission` class.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PermissionCollection` 条目现在存储在 `ConcurrentHashMap` 中。它们之前在 `Permission` 类中作为
    `HashMap` 存储。'
- en: Permissions are now stored in concurrent collections in subclasses of `PermissionCollection`.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限现在存储在 `PermissionCollection` 子类的并发集合中。
- en: The java.Security.CodeSource package
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`java.Security.CodeSource` 包'
- en: 'A hash code is an object-generated number that is stored in a hash table for
    rapid storage and retrieval. Every object in Java has a hash code. Here are some
    characteristics and rules for hash codes:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希码是一个对象生成的数字，存储在哈希表中以实现快速存储和检索。Java 中的每个对象都有一个哈希码。以下是哈希码的一些特性和规则：
- en: Hash codes are the same for equal objects within a running process
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行进程中的相等对象具有相同的哈希码
- en: Hash codes can change between execution cycles
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希码可能在执行周期之间发生变化
- en: Hash codes should not be used as keys
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不应将哈希码用作键
- en: The Java 9 platform includes a modified `hashCode` method of `java.security.CodeSource`
    to optimize DNS lookups. These can be processor intensive, so a String version
    of the code source URL is used to compute hash codes.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 平台包括对 `java.security.CodeSource` 的 `hashCode` 方法的修改，以优化 DNS 查询。这些操作可能会很耗时，因此使用代码源
    URL 的字符串版本来计算哈希码。
- en: 'The `CodeSource` class definition follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeSource` 类的定义如下：'
- en: '[PRE14]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This class has the following methods:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 此类有以下方法：
- en: '`public boolean equals(Object obj)`: Returns `true` if the objects are equal.
    This overrides the `equals` method in the `Object` class.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean equals(Object obj)`: 如果对象相等，则返回 `true`。这覆盖了 `Object` 类中的 `equals`
    方法。'
- en: '`public final Certificate[] getCertificates()`: Returns an array of certificates.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public final Certificate[] getCertificates()`: 返回证书数组。'
- en: '`public final CodeSigner[] getCodeSigners()`: Returns an array of the code
    signers associated with the `CodeSource`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public final CodeSigner[] getCodeSigners()`: 返回与 `CodeSource` 关联的代码签名者的数组。'
- en: '`public final URL getLocation()`: Returns the URL.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public final URL getLocation()`: 返回 URL。'
- en: '`public int hashCode()`: Returns the hash code value for the current object.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public int hashCode()`: 返回当前对象的哈希码值。'
- en: '`public boolean implies(CodeSource codesource)`: Returns true if the given
    code source meets the following criteria:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean implies(CodeSource codesource)`: 如果给定的代码源满足以下标准，则返回 `true`：'
- en: is not null
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不为空
- en: object's certificates are not null
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的证书不为空
- en: object's location is not null
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的位置不为空
- en: '`public String toString()`: Returns a `String` with information about the `CodeSource`
    to include the location and certificates.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public String toString()`: 返回包含 `CodeSource` 信息的 `String`，包括位置和证书。'
- en: Package checking algorithm
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包检查算法
- en: Java 9's final performance improvement when running applications with a security
    manager installed, came in the form of the `java.lang.SecurityManager` package
    enhancements. Specifically, the `checkPackageAccess` method's package checking
    algorithm was modified.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行带有安全策略管理器的应用程序时，Java 9 的最终性能改进以 `java.lang.SecurityManager` 包增强的形式出现。具体来说，修改了
    `checkPackageAccess` 方法的包检查算法。
- en: 'The `java.lang.SecurityManager` class allows applications to implement security
    policy on specific operations. The `public void checkPackageAccess(String pkg)`
    method, of this class receives a comma-delimited list of restricted packages from
    the the `getProperty` method. As illustrated here, depending on the evaluation,
    the `checkPackageAccess` method can throw one of two exceptions:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.lang.SecurityManager` 类允许应用程序在特定操作上实现安全策略。该类的 `public void checkPackageAccess(String
    pkg)` 方法从 `getProperty` 方法接收一个逗号分隔的受限包列表。如图所示，根据评估结果，`checkPackageAccess` 方法可能会抛出两种异常之一：'
- en: '![](img/02a1e840-2470-4f19-8d65-62d5253a66aa.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/02a1e840-2470-4f19-8d65-62d5253a66aa.png)'
- en: TLS application-layer protocol negotiation extension
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLS 应用层协议协商扩展
- en: Java Enhancement Proposal 244, simply enhanced the `javax.net.ssl` package so
    that it supports the **Transport Layer Security** (**TLS**) **ALPN** (**Application
    Layer Protocol Negotiation**) extension. This extension permits application protocol
    negotiation for TLS connections.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Java Enhancement Proposal 244 简单地增强了 `javax.net.ssl` 包，使其支持 **传输层安全性**（**TLS**）**应用层协议协商**（**ALPN**）扩展。此扩展允许
    TLS 连接进行应用协议协商。
- en: TLS ALPN extension
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLS ALPN 扩展
- en: 'The ALPN is a TLS extension and can be used to negotiate which protocol to
    implement when using a secure connection. ALPN represents an efficient means of
    negotiating protocols. As indicated in the following diagram, there are five basic
    steps to TLS handshakes:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: ALPN是TLS扩展，可用于在安全连接中使用时协商要实现的协议。ALPN代表了一种高效的协议协商方式。如图所示，TLS握手有五个基本步骤：
- en: '![](img/e5960953-09f0-44c4-bfe3-86d7135a8496.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5960953-09f0-44c4-bfe3-86d7135a8496.png)'
- en: The javax.net.ssl package
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: javax.net.ssl包
- en: The `java.net.ssl` package contains classes relating to secure socket packages.
    This permits us to use SSL as an example, for the reliable detection of errors
    introduced to the network byte stream. It also provides the ability to encrypt
    the data as well as provide authentication of client and server.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net.ssl`包包含与安全套接字包相关的类。这使我们能够使用SSL作为示例，以可靠地检测网络字节流中引入的错误。它还提供了加密数据以及提供客户端和服务器身份验证的能力。'
- en: 'This package includes the following interfaces:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此包包括以下接口：
- en: '`public interface HandshakeCompletedListener extends EventListener`'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface HandshakeCompletedListener extends EventListener`'
- en: '`public interface HostnameVerifier`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface HostnameVerifier`'
- en: '`public interface KeyManager`'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface KeyManager`'
- en: '`` `public interface ManagerFactoryParameters` ``'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `public interface ManagerFactoryParameters` ``'
- en: '`public interface SSLSession`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface SSLSession`'
- en: '`public interface SSLSessionBindingListener extends EventListener`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface SSLSessionBindingListener extends EventListener`'
- en: '`public interface SSLSessionContext`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface SSLSessionContext`'
- en: '`public interace TrustManager`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interace TrustManager`'
- en: '`public interface X509KeyManager extends KeyManager`'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface X509KeyManager extends KeyManager`'
- en: '`public interface X509TrustManager extends TrustManager`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public interface X509TrustManager extends TrustManager`'
- en: 'The `java.net.ssl` package also has the following sub-classes:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net.ssl`包还有以下子类：'
- en: '`public class CertPathTrustManagerParameters extends Object implements ManagerFactoryParameters`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class CertPathTrustManagerParameters extends Object implements ManagerFactoryParameters`'
- en: '`public abstract class ExtendedSSLSession extends Object implements SSLSession`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class ExtendedSSLSession extends Object implements SSLSession`'
- en: '`public class HandshakeCompleteEvent extends EventObject`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class HandshakeCompleteEvent extends EventObject`'
- en: '`public abstract class HttpsURLConnection extends HttpURLConnection`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class HttpsURLConnection extends HttpURLConnection`'
- en: '`public class KeyManagerFactory extends Object`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class KeyManagerFactory extends Object`'
- en: '`public abstract class KeyManagerFactorySpi`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class KeyManagerFactorySpi`'
- en: '`public class KeyStoreBuilderParameters extends Object implements ManagerFactoryParameters`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class KeyStoreBuilderParameters extends Object implements ManagerFactoryParameters`'
- en: '`public class SSLContext extends Object`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class SSLContext extends Object`'
- en: '`public abstract class SSLContextSpi extends Object`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class SSLContextSpi extends Object`'
- en: '`public abstract class SSLEngine extends Object`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class SSLEngine extends Object`'
- en: '`public class SSLEngineResult extends Object`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class SSLEngineResult extends Object`'
- en: '`public class SSLParameters extends Object`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class SSLParameters extends Object`'
- en: '`public final class SSLPermission extends BasicPermission`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public final class SSLPermission extends BasicPermission`'
- en: '`public abstract class SSLServerSocket extends ServerSocket`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class SSLServerSocket extends ServerSocket`'
- en: '`public abstract class SSLServerSocketFactory extends ServerSocketFactory`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class SSLServerSocketFactory extends ServerSocketFactory`'
- en: '`public class SSLSessionBindingEvent extends EventObject`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class SSLSessionBindingEvent extends EventObject`'
- en: '`public abstract class SSLSocket extends Socket`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class SSLSocket extends Socket`'
- en: '`public abstract class SSLSocketFactory extends SocketFactory`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class SSLSocketFactory extends SocketFactory`'
- en: '`public class TrustManagerFactory extends Object`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public class TrustManagerFactory extends Object`'
- en: '`` `public abstract class TrustManagerFactorySpi extends Object` ``'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `public abstract class TrustManagerFactorySpi extends Object` ``'
- en: '`public abstract class X509ExtendedKeyManager extends Object implements X509KeyManager`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class X509ExtendedKeyManager extends Object implements X509KeyManager`'
- en: '`public abstract class X509ExtendedTrustManager extends Object implements x509TrustManager`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public abstract class X509ExtendedTrustManager extends Object implements x509TrustManager`'
- en: The java.net.ssl package extension
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.net.ssl包扩展
- en: 'The change to the `java.net.ssl` package in the Java 9 platform is that it
    now supports the TLS ALPN extension. Key benefits of this change are:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9平台中`java.net.ssl`包的改变是现在它支持TLS ALPN扩展。这个改变的益处包括：
- en: TLS clients and servers can now use multiple application-layer protocols, which
    may or may not use the same transport-layer port
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TLS客户端和服务器现在可以使用多个应用层协议，这些协议可能使用也可能不使用相同的传输层端口
- en: The ALPN extension permits clients to prioritize application-layer protocols
    it supports
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALPN扩展允许客户端优先选择它支持的应用层协议
- en: Servers can select a client protocol and for the TLS connection
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以选择客户端协议和 TLS 连接
- en: Supports HTTP/2
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 HTTP/2
- en: 'The following illustration was previously presented as the five basic steps
    to TLS handshakes. Updated for Java 9 and presented here, the illustration indicates
    where the protocol names are shared between the client and server:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图之前已作为 TLS 握手的五个基本步骤展示。更新为 Java 9 并在此处展示，该插图表明客户端和服务器之间共享了协议名称：
- en: '![](img/42c76c76-1288-44d0-bbd9-0adcc2fd66a9.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42c76c76-1288-44d0-bbd9-0adcc2fd66a9.png)'
- en: 'Once the client''s list of application layer protocols is received, the server
    can select the server''s preferred intersection value and externally scan initial
    plain text `ClientHellos` and select an ALPN protocol. An application server will
    do one of the following:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到客户端的应用层协议列表，服务器可以选择服务器首选的交集值，并外部扫描初始明文 `ClientHellos` 并选择一个 ALPN 协议。应用程序服务器将执行以下操作之一：
- en: Select any of the supported protocols
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择任何支持的协议
- en: Decide that the ALPN values (remotely offered and locally supported) are mutually
    exclusive
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 判断 ALPN 值（远程提供和本地支持）是互斥的
- en: Ignore the ALPN extension
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略 ALPN 扩展
- en: 'Other key behaviors with regards to the ALPN extension:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ALPN 扩展相关的其他关键行为：
- en: The server can alter connection parameters
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以更改连接参数
- en: After the SSL/TLS handshake starts, the application can query to see if an ALPN
    value has been selected yet
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL/TLS 握手开始后，应用程序可以查询是否已选择 ALPN 值
- en: After the SSL/TLS handshake ends, the application can review which protocol
    was used
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL/TLS 握手结束后，应用程序可以回顾使用了哪个协议
- en: 'A `ClientHello` is the first message in the TLS handshake. It has the following
    structure:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClientHello` 是 TLS 握手的第一个消息。它具有以下结构：'
- en: '[PRE15]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Leveraging CPU instructions for GHASH and RSA
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 CPU 指令进行 GHASH 和 RSA
- en: The self-descriptive title of Java Enhancement Proposal (JEP) 246, **Leverage
    CPU Instructions for GHASH and RSA**, provides great insight into its goal. The
    point of this JEP was to improve the performance of cryptographic operations,
    specifically GHASH and RSA. The performance improvement has been achieved in Java
    9 by leveraging the newest SPARC and Intel x64 CPU instructions.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Java 增强提案（JEP）246 的自描述标题 **Leverage CPU Instructions for GHASH and RSA**，对其目标提供了深刻的见解。此
    JEP 的目的是提高加密操作的性能，特别是 GHASH 和 RSA。Java 9 通过利用最新的 SPARC 和 Intel x64 CPU 指令实现了性能提升。
- en: This enhancement did not require new or modified APIs as part of the Java 9
    platform.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此增强功能不需要在 Java 9 平台上添加或修改新的或修改后的 API。
- en: Hashing
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散列
- en: '**Galois HASH** (**GHASH**) and **Rivest-Shamir-Adleman** (**RSA**) are crypto
    systems hashing algorithms. Hashes are a fixed length string or number generated
    from a string of text. Algorithms, specifically hashing algorithms, are devised
    so that the resultant hashes cannot be reverse engineered. We use hashing to store
    passwords that are generated with a salt.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**Galois HASH**（**GHASH**）和 **Rivest-Shamir-Adleman**（**RSA**）是加密系统散列算法。散列是从文本字符串生成的固定长度字符串或数字。算法，特别是散列算法，被设计成结果散列无法逆向工程。我们使用散列存储带有盐生成的密码。'
- en: Salts, in cryptology, are random data used as an input to a hashing function
    to generate a password. Salts help protect against rainbow table attacks and dictionary
    attacks.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码学中，盐是作为散列函数输入的随机数据，用于生成密码。盐有助于防止彩虹表攻击和字典攻击。
- en: 'The following graphic illustrates the basics of how hashing works:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图形说明了散列工作的基本原理：
- en: '![](img/bc2ff319-1c01-4195-9366-1dd7da6f55ec.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc2ff319-1c01-4195-9366-1dd7da6f55ec.png)'
- en: 'As you can see, the hashing algorithm is fed plain text and a salt resulting
    in a new hashed password and the salt being stored. Here is the same graphic with
    sample input/output to demonstrate the functionality:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，散列算法将明文和盐输入其中，生成新的散列密码和盐，并将盐存储起来。以下是带有示例输入/输出的相同图形，以演示其功能：
- en: '![](img/29cc5f24-4616-4f12-aed1-c6938e3872da.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29cc5f24-4616-4f12-aed1-c6938e3872da.png)'
- en: 'The validation process, the following diagram starts with the user entering
    their plain text password. The hashing algorithm takes that plain text and rehashes
    it with the stored salt. Then the resulting hashed password is compared to the
    stored one:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 验证过程，以下图表从用户输入其明文密码开始。散列算法将明文与存储的盐重新散列。然后，将生成的散列密码与存储的密码进行比较：
- en: '![](img/4cd20fe9-147d-4554-8d9f-dcffb007bbab.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cd20fe9-147d-4554-8d9f-dcffb007bbab.png)'
- en: OCSP stapling for TLS
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLS 的 OCSP stapling
- en: '**Online Certificate Status Protocol** (**OCSP**) stapling is a method of checking
    the revocation status of digital certificates. The OCSP stapling approach for
    determining an SSL certificate''s validity is assessed as being both safe and
    quick. The determination speed is achieved by permitting web servers to provide
    the validity information on its organic certificates instead of the lengthier
    process of requesting validating information from the certificate''s issuing vendor.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**在线证书状态协议** (**OCSP**) 钩钉是一种检查数字证书撤销状态的方法。评估 SSL 证书有效性的 OCSP 钩钉方法被认为是既安全又快捷的。通过允许
    Web 服务器提供其有机证书的有效性信息，而不是从证书发行商请求验证信息的更长时间过程，实现了确定速度。'
- en: '**Online Certificate Status Protocol** (**OCSP**) stapling was previously referred
    to as the **Transport Layer Security** (**TLS**) certificate status request extension.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**在线证书状态协议** (**OCSP**) 钩钉之前被称为 **传输层安全性** (**TLS**) 证书状态请求扩展。'
- en: OCSP stapling primer
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OCSP 钩钉入门
- en: 'THE OCSP stapling process involves several components and validity checks.
    The following graphic illustrates the OCSP stapling process:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: OCSP 钩钉过程涉及多个组件和有效性检查。以下图形说明了 OCSP 钩钉过程：
- en: '![](img/17dee8ba-f60f-49b5-84f6-f52dfa36c695.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17dee8ba-f60f-49b5-84f6-f52dfa36c695.png)'
- en: As you can see, the process starts when the user attempts to open an SSL-encrypted
    website via their browser. The browser queries the web server to ensure the SSL-encrypted
    website has a valid certificate. The web server queries the certificate's vendor
    and is provided with both the certificate status and the digital signed time-stamp.
    The web server takes those two components (certificate status and digital signed
    time-stamp), staples them together, and returns the stapled set to the requesting
    browser. The browser can then check the validity of the time-stamp and decide
    whether to display the SSL-encrypted website or to display an error.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，过程始于用户尝试通过浏览器打开 SSL 加密的网站。浏览器查询 Web 服务器以确保 SSL 加密的网站具有有效的证书。Web 服务器查询证书的供应商，并提供了证书状态和数字签名的时戳。Web
    服务器将这两个组件（证书状态和数字签名的时戳）组合在一起，并将其返回给请求的浏览器。然后，浏览器可以检查时戳的有效性，并决定是否显示 SSL 加密的网站或显示错误。
- en: Changes for the Java 9 platform
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9 平台更改
- en: Java Enhancement Proposal 249, **OCSP Stapling for TLS**, implements OCSP stapling
    via the TLS certificate status request extension. OSCP stapling checks the validity
    of X.509 certificates.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Java 增强提案 249，**TLS 的 OCSP 钩钉**，通过 TLS 证书状态请求扩展实现 OCSP 钩钉。OCSP 钩钉检查 X.509 证书的有效性。
- en: X.509 certificates are digital certificates that use the X509 **Public Key Infrastructure**
    (**PKI**).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: X.509 证书是使用 X509 **公钥基础设施** (**PKI**) 的数字证书。
- en: 'Prior to Java 9, the certificate validity check (really, the check to see if
    the certificate has been revoked) can be enabled on the client side and has the
    following inefficiencies:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 9 之前，证书有效性检查（实际上，是检查证书是否已被撤销）可以在客户端启用，并且具有以下低效性：
- en: OCSP responder performance bottlenecks
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCSP 响应者性能瓶颈
- en: Performance degradation based on multiple passes
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多次传递导致的性能下降
- en: Additional performance degradation if OCSP checking is performed client side
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在客户端执行 OCSP 检查，则会导致额外的性能下降
- en: False **fails** when browsers do not connect to an OCSP responder
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当浏览器未连接到 OCSP 响应者时，会出现错误的 **失败**
- en: Susceptibility of denial of service attacks on OCSP responders
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCSP 响应者遭受拒绝服务攻击的易感性
- en: 'The new OCSP stapling for TLS includes the following system property changes
    for the Java 9 platform:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 TLS OCSP 钩钉包括以下针对 Java 9 平台的系统属性更改：
- en: '`jdk.tls.client.enableStatusRequestExtension`:'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.client.enableStatusRequestExtension`:'
- en: 'Default setting: true'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：true
- en: Enables `status_request` extension
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 `status_request` 扩展
- en: Enables `status_request_v2` extension
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 `status_request_v2` 扩展
- en: Enables processing `CertificateStatus` messages from server
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用从服务器处理 `CertificateStatus` 消息
- en: '`jdk.tls.server.enableStatusRequestExtension`:'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.server.enableStatusRequestExtension`:'
- en: 'Default setting: false'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：false
- en: Enables OCSP stapling support server-side
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用服务器端 OCSP 钩钉支持
- en: '`jdk.tls.stapling.responseTimeout`:'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.stapling.responseTimeout`:'
- en: 'Default setting: 5000 milliseconds'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：5000 毫秒
- en: Controls maximum time allocated by server to obtain OCSP responses
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制服务器分配的最大时间以获取 OCSP 响应
- en: '`jdk.tls.stapling.cacheSize`:'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.stapling.cacheSize`:'
- en: 'Default setting: 256'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：256
- en: Controls maximum number of cache entries
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制缓存条目的最大数量
- en: Can set maximum to zero eliminates ceiling
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以将最大值设置为零以消除上限
- en: '`jdk.tls.stapling.cacheLifetime`:'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.stapling.cacheLifetime`:'
- en: 'Default setting: 3600 seconds (1 hour)'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：3600秒（1小时）
- en: Controls maximum lifetime of a cached response
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制缓存响应的最大生存期
- en: Can set value to zero in order to disable cache lifetime
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以将值设置为零以禁用缓存生存期
- en: '`jdk.tls.stapling.responderURI`:'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.stapling.responderURI`:'
- en: 'Default setting: none'
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：无
- en: Can set a default URI for certificates without the **Authority Info Access**
    (**AIA**) extension
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以设置默认 URI 以证书不包含 **Authority Info Access** （**AIA**）扩展
- en: Does not override the AIA extension unless `jdk.tls.stapling.Override` property
    is set
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非设置 `jdk.tls.stapling.Override` 属性，否则不会覆盖 AIA 扩展
- en: '`jdk.tls.stapling.respoderOverride`:'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.stapling.respoderOverride`:'
- en: 'Default setting: false'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：false
- en: Allows a `jdk.tls.stapling.responderURI` provided property to override AIA extension
    values
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许通过 `jdk.tls.stapling.responderURI` 提供的属性覆盖 AIA 扩展值
- en: '`jdk.tls.stapling.ignoreExtensions`:'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdk.tls.stapling.ignoreExtensions`:'
- en: 'Default setting: false'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置：false
- en: Disables OCSP extension forwarding as specified in `status_request` or `status_request_v2`
    TLS extensions.
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用 `status_request` 或 `status_request_v2` TLS 扩展中指定的 OCSP 扩展转发。
- en: The `status_request` and `status_request_v2` TLS hello extensions are now supported
    by both client and server-side Java implementations.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`status_request` 和 `status_request_v2` TLS 欢迎扩展现在由客户端和服务器端 Java 实现支持。'
- en: DRBG-based SecureRandom implementations
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 DRBG 的 `SecureRandom` 实现
- en: Prior to Java 9, the JDK had two approaches to generating secure random numbers.
    One method, written in Java, used SHA1-based random number generation and was
    not terribly strong. The other method was platform-dependent and used preconfigured
    libraries.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 9 之前，JDK 有两种生成安全随机数的方法。一种方法是用 Java 编写的，基于 SHA1 的随机数生成，并不十分强大。另一种方法是平台相关的，并使用预配置的库。
- en: '**Deterministic Random Bit Generator** (**DRBG**) is a method for generating
    random numbers. It has been approved by the **National Institute of Standards
    and Technology** (**NIST**), a branch of the U.S. Department of Commerce. DRBG
    methodologies include modern and stronger algorithms for generating secure random
    numbers.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '**确定性随机位生成器**（**DRBG**）是生成随机数的方法。它已获得美国商务部下属的 **国家标准与技术研究院**（**NIST**）的批准。DRBG
    方法包括用于生成安全随机数的现代和更强的算法。'
- en: 'Java Enhancement Proposal 273, **DRBG-Based SecureRandom Implementations**
    aimed to implement three specific DRBG mechanisms. These mechanisms are listed
    as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Java 增强提案 273，**基于 DRBG 的 SecureRandom 实现**旨在实现三种特定的 DRBG 机制。这些机制如下列出：
- en: '`Hash_DRBG`'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hash_DRBG`'
- en: '`HMAC_DRBG`'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HMAC_DRBG`'
- en: '`CTR_DRBG`'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CTR_DRBG`'
- en: You can learn specifics about each of the DRBG mechanisms at [http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf)
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf)
    上了解每个 DRBG 机制的具体信息
- en: 'Here are the three new APIs:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是三个新的 API：
- en: '`SecureRandom`: New methods allowing the configuration of `SecureRandom` objects
    with the below listed configurable properties:'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecureRandom`: 新方法允许使用以下列出的可配置属性配置 `SecureRandom` 对象：'
- en: seeding
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播种
- en: reseeding
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新播种
- en: random-bit-generation
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机位生成
- en: '`SecureRandomSpi`: new methods to implement the `SecureRandom` methods'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecureRandomSpi`: 实现新的 `SecureRandom` 方法'
- en: '`SecureRandomParameter`: new interface so input can be passed to the new `SecureRandom`
    methods'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecureRandomParameter`: 新接口，以便将输入传递到新的 `SecureRandom` 方法'
- en: Summary
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at several small, but significant changes to the
    JDK that involve security. The featured security enhancements that are part of
    the Java 9 platform provide developers with the distinct ability to write and
    maintain applications that implement security. Specifically, we covered DTLS,
    keystores, improving security application performance, the TLS application-layer
    protocol negotiation extension, leveraging CPU instructions for GHASH and RSA,
    OCSP stapling for TLS, and DRBG-based `SecureRandom` implementations.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JDK 中涉及安全性的几个小但重要的变化。Java 9 平台中的特色安全增强功能为开发者提供了编写和维护实现安全性的应用程序的独特能力。具体来说，我们涵盖了
    DTLS、密钥库、提高安全应用程序性能、TLS 应用层协议协商扩展、利用 CPU 指令进行 GHASH 和 RSA、TLS 的 OCSP 撕贴以及基于 DRBG
    的 `SecureRandom` 实现。
- en: In the next chapter we will explore the new command-line flags used in Java
    9 as well as changes to various command-line tools. Our coverage will include
    managing the Java JVM run-time and compiler using the new command-line options
    and flags.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Java 9中使用的新的命令行标志以及各种命令行工具的变更。我们的内容将包括使用新的命令行选项和标志来管理Java JVM运行时和编译器。
