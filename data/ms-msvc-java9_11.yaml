- en: Migrating a Monolithic Application to Microservice-Based Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将单体应用迁移到基于微服务的应用
- en: We are at the last chapter of this book and I hope you have enjoyed and mastered
    the full stack (except DB) microservice development. I have tried to touch upon
    all necessary topics that will give you a complete view of a microservice-based
    production application and allow you to move forward with more exploration. Since
    you have learned about microservice architecture and design, you can easily differentiate
    between a monolithic application and a microservice-based application, and you
    can identify what work one needs to do to migrate a monolithic application to
    a microservice-based application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到了这本书的最后一章，我希望你已经享受并掌握了完整的微服务（除了数据库）开发。我试图涵盖所有必要的主题，为你提供一个微服务为基础的生产应用程序的全面视角，并允许你进行更多的探索。既然你已经了解了微服务架构和设计，你就可以很容易地区分单体应用和微服务应用，并识别出将单体应用迁移到微服务应用需要做的工作。
- en: In this chapter, we'll talk about refactoring a monolithic application to a
    microservice based application. I assume an existing monolithic application is
    already deployed and being used by customers. At the end of this chapter, you'll
    learn about the different approaches and strategies one can use to make monolithic
    migration to microservice easier.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论将单体应用重构为基于微服务的应用。我假设一个现有的单体应用已经被部署并正在被客户使用。在本章结束时，你将了解可以将单体迁移到微服务的不同方法和策略。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Do you need to migrate?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要迁移吗？
- en: Approaches and keys for successful migration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功迁移的方法和关键
- en: Do you need to migrate?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要迁移吗？
- en: This is the first question that should set the tone for your migration. Do you
    really need to migrate your existing application to a microservice-based architecture?
    What benefits does it bring to the table? What are the consequences? How we can
    support the existing on-premise customers? Would existing customers support and
    bear the cost of migration to microservices? Do I need to write the code from
    scratch? How would the data be migrated to a new microservice-based system? What
    would be the timeline to this migration? Is existing team proficient enough to
    bring this change fast? Could we accept the new functional changes during this
    migration? Does our process in line to accommodate migration? So on and so forth.
    I believe there would be plenty of similar questions that come to your mind. I
    hope that, from all of the previous chapters, that you might have gained good
    knowledge of the work a microservice-based system requires.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你应该为你的迁移设定基调的第一个问题。你真的需要将现有的应用程序迁移到基于微服务的架构吗？它带来了哪些好处？后果是什么？我们如何支持现有的本地客户？现有客户是否支持并承担迁移到微服务的成本？我需要从头开始写代码吗？数据将如何迁移到新的基于微服务的系统？迁移的时间表是什么？现有团队是否有能力快速带来这种变化？我们是否可以接受在迁移期间的新功能变化？我们的流程是否能够适应迁移？等等。我相信你们脑海中会有很多类似的问题。我希望，从所有之前的章节中，你可能已经获得了关于微服务系统所需工作的良好知识。
- en: After all of the pros and cons, your team would decide the migration. If the
    answer is yes, this chapter will help you on the way forward to migration.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有利弊之后，你的团队将决定迁移。如果答案是肯定的，本章将帮助你了解迁移的下一步。
- en: Cloud versus on-premise versus both cloud and on-premise
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云服务与本地部署，还是两者都提供？
- en: What is your existing offering to a cloud solution, an on-premise solution,
    or do you offer both cloud and on-premise solutions or do you want to start cloud
    offering along with on-premise solution. Your approach would be based on the kind
    of solution you offer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你的现有产品是对云解决方案、本地解决方案，还是提供云和本地解决方案，或者你想开始提供云解决方案与本地解决方案。你的方法将基于你提供的解决方案类型。
- en: Cloud only solution
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅限云解决方案
- en: If you offer cloud solutions, then your migration task is easier than the other
    two solutions. Having said that, it does not mean it would be a cake walk. You
    would have full control over migration. You have the liberty of not considering
    the direct impact of migration on customers. Cloud customers simply use the solution
    and are not bothered how it has been implemented or hosted. I assume that there
    is no API or SDK change, and obviously, migration should not involve any functional
    change. Microservice migration only on the cloud has the edge of using smooth
    incremental migration. This means that you would first transform the UI application,
    then one API/service, and then the next, so on and so forth. Mind you, you are
    in control.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供云服务，那么你的迁移任务比其他两种解决方案要容易。话说回来，这并不意味着它会一帆风顺。你将完全控制迁移。你有权不考虑迁移对客户的直接影响。云客户只需使用解决方案，而不关心它是如何实现或托管的。我假设没有API或SDK的更改，显然，迁移不应涉及任何功能更改。仅在云上进行微服务迁移具有使用平稳渐进迁移的优势。这意味着你首先转换UI应用程序，然后是一个API/服务，然后是下一个，依此类推。请注意，你掌控着局面。
- en: On-premise only solution
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅本地服务解决方案
- en: On-premise solutions are deployed on customer infrastructure. On top of that,
    you might have many clients with different versions deployed on their infrastructure.
    You don't have full control of these deployments. You need to work with customers
    and a team effort is required for successful migration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本地解决方案部署在客户的基础设施上。除此之外，你可能有许多客户在其基础设施上部署了不同版本的产品。你无法完全控制这些部署。你需要与客户合作，需要团队共同努力才能实现成功的迁移。
- en: Also, before you approach a customer, you should have the full flesh migration
    solution ready. Having different versions of your product makes this extra difficult.
    I would recommend offering migration only of the latest version and while you
    developed migration, only security and break fixes should be allowed for customers.
    Yes, you should not offer new functionality at all.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在接触客户之前，你应该准备好一个完整的迁移解决方案。如果你的产品有不同版本，这会变得尤为困难。我建议只提供最新版本的迁移，而在你开发迁移时，只允许客户进行安全性和修补操作。是的，你不应该提供任何新功能。
- en: Both cloud and on-premise solution
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云服务和本地服务
- en: If your application has both cloud and on-premise offering, then migration of
    on-premise solution to microservices could be in synchronization with the cloud
    or vice versa. This means that if you spent efforts on migrating one, you can
    replicate the same on the other. Therefore, it includes challenges mentioned earlier
    for either cloud or on-premise migration with addition to replication on other
    environments. Also, sometimes on-premise customers may have their own customization.
    It also needs to be taken care of while migrating. Here, your own cloud solution
    should be migrated first to microservices, which can be replicated on on-premises
    later.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序同时提供云服务和本地服务，那么将本地解决方案迁移到微服务可以与云服务同步进行，反之亦然。这意味着如果你在迁移一个方面付出了努力，你可以在另一个方面复制同样的成果。因此，除了之前提到的云或本地迁移挑战外，还需要在其他环境中进行复制。另外，有时本地客户可能有自己的定制化需求。在迁移时也需要考虑到这些需求。在这里，你应该首先将自有的云解决方案迁移到微服务，之后再复制到本地环境。
- en: Migrating a production/solution offering only on-premise deployment, but you
    want of start cloud deployments also; this is most challenging. You are supposed
    to migrate your existing code as per my microservice design, while making sure
    it also supports existing on-premise deployments. Sometimes, it could be a legacy
    technology stack, or even existing code might have been written using some own
    proprietary technology like protocols. It could be that the existing design is
    not flexible enough to break into microservices. This type of migration offers
    the most challenges. An incremental migration of on-premise solution to microservices
    should be done, where you can first separate the UI applications and offer external
    APIs that interact with UI applications. If APIs are already in place or your
    application is already divided into separate UI applications, believe me, it removes
    tons of baggage from migration. Then, you can focus on migrating the server-side
    code, including the APIs developed for UI applications. You might ask why we can't
    migrate all UI applications, APIs, and server code together. Yes, you can. But,
    doing an incremental migration would give you surety, confidence, and quick failures/learning.
    After all, Agile development is all about incremental development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将生产/解决方案仅基于本地部署，但你想开始云部署；这是最具挑战性的。你预计要按照我的微服务设计迁移现有代码，同时确保它也支持现有的本地部署。有时，这可能是遗留技术堆栈，或者现有代码甚至可能是使用某些自有专有技术（如协议）编写的。现有设计可能不够灵活，无法拆分为微服务。这种迁移最具挑战性。应该逐步将本地解决方案迁移到微服务，首先分离UI应用程序并提供与UI应用程序交互的外部API。如果API已经存在，或者你的应用程序已经分为独立的UI应用程序，相信我，这为迁移减轻了大量的负担。然后，你可以专注于迁移服务器端代码，包括为UI应用程序开发的API。你可能会问为什么我们不能一起迁移所有UI应用程序、API和服务器代码。是的，你可以这样做。但是，逐步迁移会给你带来确定性、信心和快速的失败/学习。毕竟，敏捷开发就是关于逐步开发。
- en: If your existing code is not modular or contains lots of legacy code, then I
    would advise you to first refactor it and make it modular. It would make your
    task easier. Having said that, it should be done module by module. Break and refactor
    whatever code you can before migrating it to pure microservices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的现有代码不是模块化的，或者包含大量的遗留代码，那么我建议你首先重构它并使其模块化。这将使你的任务变得容易。说到这里，应该逐个模块进行。在将代码迁移到纯微服务之前，尽可能多地分解和重构代码。
- en: We'll discuss a few approaches that might help you to refactor a large complex
    monolithic application into microservices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论一些方法，这些方法可能有助于你将大型复杂的单体应用程序重构为微服务。
- en: Approaches and keys to successful migration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功迁移的方法和关键
- en: Software modernization has been done for many years. A lot of work is done to
    perform successful software modernization. You will find it useful to go through
    all of the best practices and principles for successful software modernization
    (migration). In this chapter, we will talk specifically about software modernization
    of the microservice architecture.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 软件现代化已经进行了很多年。为了成功进行软件现代化（迁移），已经做了大量工作。你会发现研究所有成功软件现代化的最佳实践和原则很有用。在本章中，我们将具体讨论微服务架构的软件现代化。
- en: Incremental migration
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逐步迁移
- en: You should transform monolithic applications to microservices in an incremental
    manner. You should not start the full-fledged migration of the whole code all
    together. It entangles the risk-reward ratio and increases the probability of
    failure. It also increases the probability of transition time and, hence, cost.
    You may want to break your code into different modules and then start transforming
    each of the modules one by one. It is quite likely that you may want to rewrite
    a few modules from scratch, which should be done if the existing code is tightly
    coupled and too complex to refactor. But, writing the complete solution from scratch
    is a big no. You should avoid it. It increases the cost, time to migration, and
    the probability of failures.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该以渐进的方式将单体应用转换为微服务。你不应该一次性开始整个代码的全功能迁移。这会纠缠风险-回报比率并增加失败的可能性。它还增加了过渡时间（因此是成本）的可能性。你可能想将你的代码分成不同的模块，然后逐一开始转换每个模块。很可能你可能会想从头重新编写一些模块，如果现有代码紧密耦合且过于复杂难以重构，这就应该做。但是，从头开始编写完整的解决方案是大忌。你应该避免这样做。它增加了成本、迁移的时间以及失败的可能性。
- en: Process automation and tools setup
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程自动化和工具设置
- en: Agile methodologies work hand in hand with microservices. You can use any Agile
    processes, such as Scrum and Kanban with modern development processes, such as
    test-driven development or peer programing, for incremental development. Process
    automation is a must for microservice-based environments. You should have automated
    CI/CD and test automation in place. If containerization of deliverables is not
    yet done with the CI/CD pipeline, then you should do it. It enables successful
    integration of newly developed microservices with the existing system or other
    new microservices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法与微服务紧密合作。您可以使用任何敏捷过程，如Scrum和Kanban，以及现代开发过程，如测试驱动开发或同行编程，进行增量开发。对于基于微服务的环境，流程自动化是必不可少的。您应该实施自动化的持续集成/持续部署和测试自动化。如果交付物的容器化还没有在CI/CD管道中完成，那么您应该去做。它使新开发的微服务能够与现有系统或其他新微服务成功集成。
- en: You would want to set up the service discovery, service gateway, configuration
    server, or any event-based system in parallel or prior to the start of your first
    microservice transformation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始您的第一个微服务转型之前，您可能需要同时或先设置服务发现、服务网关、配置服务器或任何基于事件的系统。
- en: Pilot project
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 试点项目
- en: Another problem I have observed in microservice migration is starting development
    with different modules altogether. Ideally, a small team should perform the pilot
    project to transform any of the existing modules to microservices. Once it is
    successful, the same approach can be replicated to other modules. If you start
    the migration of various modules simultaneously, then you may repeat the same
    mistake in all microservices. It increases the risk of failures and the duration
    of transformation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我在微服务迁移中观察到的另一个问题是，从一开始就完全不同模块的开发。理想情况下，一个小团队应该进行试点项目，将现有模块中的任何一个转换为微服务。一旦成功，相同的方法可以复制到其他模块。如果您同时开始各种模块的迁移，那么您可能在所有微服务中重复同样的错误。这增加了失败的风险和转型的持续时间。
- en: A team that performs successful migration offers the way to developed modules
    and its integration with existing monolithic applications successfully. If you
    successfully developed and transformed each module into a microservice one by
    one, at some point in time, you would have a microservice-based application instead
    of a monolithic application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 成功迁移的团队提供了成功开发模块及其与现有单体应用程序集成的途径。如果您成功地一个接一个地将每个模块转换为微服务，那么在某个时候，您将拥有一个基于微服务的应用程序，而不是一个单体应用程序。
- en: Standalone user interface applications
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立的用户界面应用程序
- en: If you already have standalone user interface applications that consume APIs,
    then you are already steps away from a successful migration. If this is not the
    case, it should be the first step to separate your user interface from the server
    code. UI applications would consume the APIs. If the existing application does
    not have the APIs that should be consumed by the UI applications, then you should
    write the wrapper APIs on top of the existing code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有了消耗API的独立用户界面应用程序，那么您距离成功的迁移已经不远了。如果不是这样，这应该是第一步，将用户界面与服务器代码分离。UI应用程序将消耗API。如果现有应用程序没有应该被UI应用程序消耗的API，那么您应该在现有代码之上编写包装API。
- en: 'Take a look at the following diagram that reflects the presentation layer before
    the migration of UI applications:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图表，反映UI应用程序迁移之前的呈现层：
- en: '![](img/59d116bf-c7db-4216-9203-33f56b466a98.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59d116bf-c7db-4216-9203-33f56b466a98.png)'
- en: Before UI Applications migration
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI应用程序迁移之前
- en: 'The following diagram reflects the presentation layer after the migration of
    UI applications:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表反映了UI应用程序迁移后的呈现层：
- en: '![](img/56cc418e-1d2e-4987-be74-eb62894213fc.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56cc418e-1d2e-4987-be74-eb62894213fc.png)'
- en: After UI applications Migration
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: UI应用程序迁移后
- en: You can see that earlier, the UI was included inside the monolithic application
    along with business logic and DAO. After migration, the UI application is separated
    from the monolithic application and consumes the APIs for communicating with the
    server code. REST is standard for implementing the APIs that can be written on
    top of existing code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，以前，UI被包含在单体应用程序中，与业务逻辑和DAO一起。迁移后，UI应用程序从单体应用程序中分离出来，并使用API与服务器代码通信。REST是实现API的标准，可以在现有代码之上编写。
- en: Migrating modules to microservices
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模块迁移到微服务
- en: Now, you have one server-side monolithic application and one or more UI applications.
    It gives you another advantage of consuming the APIs while separating the modules
    from existing monolithic applications. For example, after separation of UI applications,
    you might transform one of the modules to a microservice. Once the UI applications
    are successfully tested, API calls related with this module can be routed to the
    newly transformed module instead of the existing monolithic API. As shown in next
    diagram, when the API `GET/customer/1` is called, the web `Gateway` can route
    the request to the `Customer Microservice` instead of the `Monolithic` application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个服务器端的单体应用程序和一个或多个 UI 应用程序。这为你提供了另一个优势，即在分离模块的同时消费 API，从而分离现有的单体应用程序。例如，在分离
    UI 应用程序后，你可能将其中一个模块转换为微服务。一旦 UI 应用程序成功测试，与该模块相关的 API 调用可以路由到新转换的模块，而不是现有的单体 API。如图所示，当调用
    API `GET/customer/1` 时，网络`网关`可以将请求路由到`客户微服务`，而不是`单体`应用程序。
- en: You can also perform the testing on production before making the new microservice-based
    API live by comparing the response from both monolithic and microservice modules.
    Once we have consistently matching responses, we can be sure that the transformation
    is done successfully and API calls can be migrated to the refactored module API.
    As shown in the following figure, a component is deployed that makes another call
    to a new customer microservice whenever a customer API is called. Then, it compares
    the responses of both of the calls and stores the results. These results can be
    analyzed and a fix should be delivered for any inconsistency. When a response
    from a newly transformed microservice matches with the existing monolithic responses,
    you can stop routing the calls to existing monolithic applications and replace
    it with new microservice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过比较单体和微服务模块的响应，在将基于微服务的 API 上线之前，在生产环境中进行测试。一旦我们得到一致的匹配响应，我们可以确信转换已经成功完成，并且
    API 调用可以迁移到重构模块的 API。如图所示，当调用客户 API 时，部署了一个组件，该组件会调用一个新的客户微服务。然后，它比较了两次调用的响应并存储结果。这些结果可以进行分析，并对任何不一致性进行修复。当新转换的微服务的响应与现有的单体响应相匹配时，你可以停止将调用路由到现有的单体应用程序，并用新的微服务替换它。
- en: Following this approach allows you to migrate modules one by one to a microservice,
    and at one point in time, you can migrate all monolithic modules to microservices.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，你可以将模块一个接一个地迁移到微服务，并在某个时刻，你可以将所有的单体模块迁移到微服务。
- en: '![](img/237764f3-242b-43bc-8fb1-33eac8744c1c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/237764f3-242b-43bc-8fb1-33eac8744c1c.png)'
- en: API routing, comparison, and migration
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: API 路由、比较和迁移
- en: How to accommodate a new functionality during migration
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在迁移过程中容纳新功能
- en: A new functionality should be avoided in ideal scenarios during migration. Only
    important fixes and security changes should be allowed. However, if there is an
    urgency to implement a new functionality, then it should be developed either in
    a separate microservice or in a modular way to existing monolithic code that makes
    its separation from existing code easier.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移的理想场景中应避免添加新功能。只允许重要的修复和安全更改。然而，如果迫切需要实现一个新功能，那么它应该在一个单独的微服务中开发，或者以现有的单体代码模块化的方式开发，使其与现有代码的分离更容易。
- en: For example, if you really need a new feature in the `customer` module that
    does not have any dependency on other modules, you can simply create a new customer
    microservice and use it for specific API calls, either by external world or through
    other modules. It is up to you whether you use REST calls or events for inter-process
    communication.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你确实需要在`客户`模块中添加一个新功能，而这个功能不依赖于其他模块，你只需创建一个新的客户微服务，并将其用于特定的 API 调用，无论是对外部世界还是通过其他模块。是否使用
    REST 调用或事件进行进程间通信，由你自己决定。
- en: Similarly, if you need a new functionality that has dependency on other modules
    (for example, a new customer functionality having a dependency on booking) and
    it is not exposed as an API to a UI or service API, then it can still be developed
    as a separate microservice, as shown in the following diagram. The `customer`
    module calls a newly developed microservice and then it calls the `booking` module
    for request processing and provides the response back to the `customer` module.
    Here, for inter-process communication, REST or events could be used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您需要一个具有依赖关系的新功能（例如，一个新客户功能依赖于预订功能）并且它没有被暴露为UI或服务API的API，那么它仍然可以作为独立的微服务开发，如下面的图表所示。`customer`模块调用一个新开发的微服务，然后它调用`booking`模块进行请求处理，并将响应返回到`customer`模块。在这里，用于进程间通信的可以是REST或事件。
- en: '![](img/2acbdfb7-53ea-4a58-8739-5c945ff95560.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2acbdfb7-53ea-4a58-8739-5c945ff95560.png)'
- en: Implementing a new module as a microservice that calls another module
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个新模块作为微服务，调用另一个模块
- en: References
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Read the following books for more information on code refactoring and domain-driven
    design:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读以下书籍以获取有关代码重构和领域驱动设计的更多信息：
- en: '*Refactoring: Improving the Design of Existing Code* by Martin Fowler'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《重构：改善现有代码的设计》马丁·福勒
- en: '*Domain-Driven Design* by Eric J. Evans'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《领域驱动设计》埃里克·J·埃文斯
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Software modernization is the way to move forward and in the current environment
    since everything is moved to the cloud and the way resource power and capacity
    is increased, microservices based on design look more appropriate than anything
    else. We discussed a combination of cloud and on-premise solutions and the challenges
    of transforming those into microservices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 软件现代化是前进的道路，在当前环境中，因为一切都被迁移到云，以及资源力量和容量的增加方式，基于设计的微服务比其他任何东西都更合适。我们讨论了云和本地解决方案的组合以及将这些转换为微服务的挑战。
- en: We also discussed why an incremental development approach is preferred as far
    as monolithic application migration to microservices is concerned. We talked about
    various approaches and practices that are required for successful migration to
    microservices.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了为什么渐进式开发方法在单体应用迁移到微服务方面是首选。我们谈论了成功迁移到微服务所需的各种方法和实践。
