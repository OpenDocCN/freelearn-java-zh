- en: Chapter 8. Unit Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 单元测试
- en: JUnit is a widely used open-source Java unit-testing framework created by Erich
    Gamma and Kent Beck ([http://junit.org](http://junit.org)). It allows you to incrementally
    build a suite of tests as an integral part of your development effort and goes
    a long way towards increasing your confidence in the stability of your code base.
    JUnit was originally designed and used for testing Java classes, but has since
    been emulated and used in several other languages such as Ruby, Python, and C#.
    GWT utilizes and extends the JUnit framework to provide a way to test your AJAX
    code as simply as any other Java code. In this chapter, we will learn how to create
    and run unit tests for testing GWT applications and RPC services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是一个广泛使用的开源Java单元测试框架，由Erich Gamma和Kent Beck创建（[http://junit.org](http://junit.org)）。它允许您逐步构建一套测试，作为开发工作的一个组成部分，并在很大程度上增加了您对代码稳定性的信心。JUnit最初设计和用于测试Java类，但后来被模拟并用于其他几种语言，如Ruby、Python和C#。GWT利用并扩展了JUnit框架，以提供一种测试AJAX代码的方式，就像测试任何其他Java代码一样简单。在本章中，我们将学习如何创建和运行用于测试GWT应用程序和RPC服务的单元测试。
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要处理的任务是：
- en: Test a GWT page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试GWT页面
- en: Test an asynchronous service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试异步服务
- en: Test a GWT page with an asynchronous service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试具有异步服务的GWT页面
- en: Create and run a test suite
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并运行测试套件
- en: Test a GWT Page
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试GWT页面
- en: A GWT page essentially consists of widgets and we can test the page by checking
    for the presence of the widgets and also by checking for the widget values or
    parameters that we want. In this section, we will learn how create a unit test
    for a GWT page.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GWT页面基本上由小部件组成，我们可以通过检查小部件的存在以及检查我们想要的小部件值或参数来测试页面。在本节中，我们将学习如何为GWT页面创建单元测试。
- en: Time for Action—Creating a Unit Test
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作时间-创建单元测试
- en: We are going to test the `AutoFormFillPanel` page that we created in[Chapter
    4](ch04.html "Chapter 4. Interactive Forms") by using the testing support built
    into the GWT framework to write our unit test.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用内置在GWT框架中的测试支持来编写我们的单元测试，测试我们在[第4章](ch04.html "第4章 交互式表单")中创建的`AutoFormFillPanel`页面。
- en: 'The steps are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: 'Run the `GWT_HOME\junitCreator` command script by providing these parameters:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供这些参数运行`GWT_HOME\junitCreator`命令脚本：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Time for Action—Creating a Unit Test](img/1007_08_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-创建单元测试](img/1007_08_01.jpg)'
- en: 'Open the generated Java file `com.packtpub.gwtbook.samples.client.panels.AutoFormFillPanelTest.java`
    in the test directory that was automatically created when we ran the `junitCreator`
    command. Add a new method named `testPanel()` to the file:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自动生成的Java文件`com.packtpub.gwtbook.samples.client.panels.AutoFormFillPanelTest.java`中打开测试目录中自动创建的测试目录中的文件：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the form and add assertions for checking the name of the `Customer ID`
    label and the style associated with it:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建表单并添加断言以检查“客户ID”标签的名称和与之关联的样式：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add similar assertions to test all the other elements on the page:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加类似的断言以测试页面上的所有其他元素：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add an entry to the `Samples.gwt.xml` file to inherit from the JUnit testing
    module:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Samples.gwt.xml`文件中添加一个条目，以继承JUnit测试模块：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the test in Eclipse by launching the `AutoFormFillPanelTest-hosted` launch
    configuration from the **Run** menu and get a similar screen to this:![Time for
    Action—Creating a Unit Test](img/1007_08_02.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从“运行”菜单启动“AutoFormFillPanelTest-hosted”启动配置在Eclipse中运行测试，并获得类似于这样的屏幕：![操作时间-创建单元测试](img/1007_08_02.jpg)
- en: What Just Happened?
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The GWT framework supports unit testing by providing the `GWTTestCase` base
    class that extends from `TestCase` in the JUnit testing library. We execute the
    unit tests by compiling and running the class that extends from `GWTTestCase`.
    An invisible web browser is launched by the GWT framework when we run this subclass,
    and the tests are run inside the browser instance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: GWT框架支持单元测试，提供了从JUnit测试库中扩展的`GWTTestCase`基类。我们通过编译和运行从`GWTTestCase`扩展的类来执行单元测试。当我们运行这个子类时，GWT框架会启动一个不可见的Web浏览器，并在浏览器实例内运行测试。
- en: We use the `junitCreator` command script provided by GWT to generate the scaffolding
    necessary for creating and running a unit test. We provide the name of the test
    class as one of the parameters to this command. A sample test case that extends
    from the `GWTTestCase` class is generated along with two launch scripts—one for
    running in the host mode and the other for running in the web mode. These launch
    configurations are generated in Eclipse format, and can be run directly from inside
    the Eclipse environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用GWT提供的`junitCreator`命令脚本生成必要的脚手架，用于创建和运行单元测试。我们将测试类的名称作为此命令的参数之一。生成一个扩展自`GWTTestCase`类的示例测试用例，以及两个启动脚本——一个用于在主机模式下运行，另一个用于在Web模式下运行。这些启动配置以Eclipse格式生成，并可以直接从Eclipse环境内运行。
- en: 'The class that extends `GWTTestCase` must implement `getModuleMethod()` and
    return the fully-qualified name of the GWT module that contains the test class.
    So in our case, we return `com.packtpub.gwtbook.samples.Samples` from this method.
    This enables GWT to resolve the dependencies and load the classes needed for running
    the test correctly. If we are creating tests in a completely separate module,
    this method will need to return the name of that containing module. We also need
    to inherit from the GWT JUnit module in the module file of our project. That is
    why we need to add this line to the `Samples.gwt.xml` file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`GWTTestCase`的类必须实现`getModuleMethod()`并从该方法返回包含测试类的GWT模块的完全限定名称。因此，在我们的情况下，我们从这个方法返回`com.packtpub.gwtbook.samples.Samples`。这使得GWT能够解析依赖项并正确加载运行测试所需的类。如果我们在一个完全独立的模块中创建测试，这个方法将需要返回包含模块的名称。我们还需要在项目的模块文件中继承GWT
    JUnit模块。这就是为什么我们需要将这一行添加到`Samples.gwt.xml`文件中的原因：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using `junitCreator` is the simplest way to start using the unit testing features
    in GWT. However, if you decide to create the various artifacts that are generated
    by this command yourself, here are the steps involved in creating and running
    a unit test in your GWT project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`junitCreator`是开始使用GWT中单元测试功能的最简单方法。但是，如果您决定自己创建此命令生成的各种工件，以下是创建和运行GWT项目中单元测试所涉及的步骤：
- en: Create a class that extends `GWTTestCase`. Implement the `getModuleName()` method
    in this class to return the fully-qualified name of the module that contains this
    class.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展`GWTTestCase`的类。在这个类中实现`getModuleName()`方法，以返回包含此类的模块的完全限定名称。
- en: Compile the test case. In order to run your test, you *must* compile it first.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译测试用例。为了运行您的测试，*必须*首先编译它。
- en: In order to run the tests, your `classpath` must include `junit-dev-linux.jar`
    or `gwt-dev-windows.jar` file, and `junit.jar` file in addition to the normal
    requirements.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了运行测试，您的`classpath`必须包括`junit-dev-linux.jar`或`gwt-dev-windows.jar`文件，以及`junit.jar`文件，除了正常的要求。
- en: Since `GWTTestCase` is just a subclass of `TestCase`, you have access to all
    the normal assertion methods from the JUnit library. You can use these to assert
    and test all kinds of things about the page, such as the structure of the document,
    including tables and other HTML elements and their layout.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`GWTTestCase`只是`TestCase`的子类，因此您可以访问来自JUnit库的所有正常断言方法。您可以使用这些方法来断言和测试关于页面的各种事物，例如文档的结构，包括表格和其他HTML元素及其布局。
- en: Test an Asynchronous Service
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试异步服务
- en: In the previous section, we learned how to create simple tests for unit testing
    a GWT page. However, most non-trivial GWT applications will access and use AJAX
    services to retrieve data asynchronously. In this section, we will go through
    the steps required to test an asynchronous service such as the `AutoFormFillPanel`
    service that we created earlier in this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们学习了如何为单元测试GWT页面创建简单的测试。但是，大多数非平凡的GWT应用程序将访问和使用AJAX服务以异步方式检索数据。在本节中，我们将介绍测试异步服务的步骤，例如我们在本书前面创建的`AutoFormFillPanel`服务。
- en: Time for Action—Testing the Asynchronous Service
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行操作的时间-测试异步服务
- en: 'We are going to test `AutoFormFillPanelService`, which we created in[Chapter
    4](ch04.html "Chapter 4. Interactive Forms") :'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将测试我们在[第4章](ch04.html "第4章 交互式表单")中创建的`AutoFormFillPanelService`：
- en: 'Run the `GWT_HOME\junitCreator` command script by providing these parameters:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供这些参数运行`GWT_HOME\junitCreator`命令脚本：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open the generated Java file `com.packtpub.gwtbook.samples.client.panels.AutoFormFillServiceTest.java`
    in the test directory that was automatically created when we ran the `junitCreator`
    command. Add a new method named `testService()` to the file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行`junitCreator`命令时自动生成的测试目录中打开生成的Java文件`com.packtpub.gwtbook.samples.client.panels.AutoFormFillServiceTest.java`。在文件中添加一个名为`testService()`的新方法：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `testService()` method, instantiate `AutoFormFillService` and set the
    entry point information:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`testService()`方法中，实例化`AutoFormFillService`并设置入口点信息：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new asynchronous callback, and in the `onSuccess()` method add assertions
    to test the data returned from invoking the service:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的异步回调，在`onSuccess()`方法中添加断言来测试调用服务返回的数据：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Call the `delayTestFinish()` method and invoke the asynchronous service:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`delayTestFinish()`方法并调用异步服务：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the test in Eclipse by launching the `AutoFormFillPanelService-hosted` launch
    configuration from the **Run** menu. Here is the result:![Time for Action—Testing
    the Asynchronous Service](img/1007_08_03.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在Eclipse中启动**Run**菜单中的`AutoFormFillPanelService-hosted`启动配置来运行测试。这是结果：![Time
    for Action—Testing the Asynchronous Service](img/1007_08_03.jpg)
- en: What Just Happened?
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: JUnit provides support for testing normal Java classes, but lacks any support
    for testing modules that have any kind of asynchronous behavior. A unit test will
    start executing and will run through all the tests in the module in order. This
    approach will not work for testing asynchronous things, where you make a request
    and the response comes back separately. GWT has this unique functionality, and
    supports tests for asynchronous services; so you can call an RPC service and validate
    the response from the service.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit支持测试普通的Java类，但缺乏对具有任何异步行为的模块进行测试的支持。单元测试将开始执行并按顺序运行模块中的所有测试。这种方法对于测试异步事物不起作用，其中您发出请求并且响应分别返回。GWT具有这种独特的功能，并支持对异步服务进行测试；因此，您可以调用RPC服务并验证来自服务的响应。
- en: You can also test other long-running services, such as timers. In order to provide
    this support, `GWTTestCase` extends `TestCase` class and provides two methods—`delayTestFinish()`
    and `finishTest()`—which enable us to delay finishing a unit test, and have control
    over when the test actually completes. This essentially lets us put our unit test
    in an asynchronous mode, so we can wait for a response from a call to a remote
    server and complete the test by validating the response when we receive it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以测试其他长时间运行的服务，例如计时器。为了提供此支持，`GWTTestCase`扩展了`TestCase`类并提供了两个方法-`delayTestFinish()`和`finishTest()`-它们使我们能够延迟完成单元测试，并控制测试实际完成的时间。这本质上让我们将我们的单元测试置于异步模式中，因此我们可以等待来自对远程服务器的调用的响应，并在收到响应时通过验证响应来完成测试。
- en: 'In this sample, we structure our test using a standard pattern for testing
    long-lived events in GWT. The steps are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了GWT中测试长时间事件的标准模式。步骤如下：
- en: We create an instance of the asynchronous service and set its entry point.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个异步服务的实例并设置了它的入口点。
- en: 'We set up an asynchronous event handler, which is our callback. In this callback,
    we validate the received response by asserting the returned values match our expected
    values. We then complete the test by calling `finishTest()` to indicate to GWT
    that we want to leave the asynchronous mode in the test:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们设置了一个异步事件处理程序，即我们的回调。在此回调中，我们通过断言返回的值与我们期望的值匹配来验证接收到的响应。然后，我们通过调用`finishTest()`完成测试，以指示GWT我们要离开测试中的异步模式：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We set up a delay period for the test to finish. This makes the GWT test framework
    wait for the requisite amount of time. Here we set a delay of 2000 ms:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为测试设置了一个延迟时间。这使得GWT测试框架等待所需的时间。在这里，我们设置了2000毫秒的延迟：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This must be set to a time period that is slightly longer than the time that
    the service is expected to take to return the response.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须设置为一个比服务预计返回响应所需时间略长的时间段。
- en: Finally, we invoke the asynchronous event, providing it the `callback` object
    as a parameter. In this case we just call the requisite method on `AutoFormFillService:`
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调用异步事件，将`callback`对象作为参数提供给它。在这种情况下，我们只调用`AutoFormFillService`上的必需方法：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can use this pattern to test all asynchronous GWT services and classes that
    use timers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此模式测试所有使用定时器的异步GWT服务和类。
- en: Test a GWT Page with an Asynchronous Service
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异步服务测试GWT页面
- en: In this section, we will test a page that invokes an asynchronous service. This
    will enable us to create one test that combines the previous two examples.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将测试调用异步服务的页面。这将使我们创建一个结合了前两个示例的测试。
- en: Time for Action—Combining the Two
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-合并两者
- en: 'We are going to combine the two tests that we wrote in the last two sections
    into one, and create a comprehensive test for the `AutoFormFillPanel` page that
    tests both the page elements and the asynchronous service used by the page. The
    steps are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在最后两个部分中编写的两个测试合并为一个，并为`AutoFormFillPanel`页面创建一个全面的测试，测试页面元素和页面使用的异步服务。步骤如下：
- en: 'Add a new method named `simulateCustomerIDChanged()` to the existing `AutoFormFillPanel`
    class in the `com.packtpub.gwtbook.samples.client.panels` package:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packtpub.gwtbook.samples.client.panels`包中的现有`AutoFormFillPanel`类中添加一个名为`simulateCustomerIDChanged()`的新方法：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Modify the `testPanel()` method name to `testEverything()`. At the bottom of
    the method, invoke the `simulateCustIDChanged()` method and provide an `ID` parameter
    of 1111:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`testPanel()`方法名称修改为`testEverything()`。在方法底部，调用`simulateCustIDChanged()`方法，并提供一个ID参数为1111：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new `Timer` object, and add the following to its `run()` method:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`Timer`对象，并将以下内容添加到其`run()`方法中：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Delay the test finish and run the timer:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 延迟测试完成并运行计时器：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Run the test by launching the `AutoFormFillPanelTest-hosted` launch configuration
    and get a similar result to this:![Time for Action—Combining the Two](img/1007_08_04.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启动`AutoFormFillPanelTest-hosted`启动配置来运行测试，并获得类似于此的结果：![行动时间-合并两者](img/1007_08_04.jpg)
- en: What Just Happened?
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have so far written two separate tests—one to test the various HTML elements
    on the `AutoFormFillPanel` page, and the other to test `AutoFormFillPanelService`.
    We can combine the two tests into one, and create a single test for testing the
    panel. `AutoFormFillPanel` invokes the asynchronous service when the text in the
    `CustomerID` textbox is changed. In order to simulate the keyboard listener in
    the test, we create a new public method called `simulateCustIDChanged()` in the
    `AutoFormFillPanel` class, which essentially does the same thing as the keyboard
    listener event handler in that class. We are going to call this method to simulate
    the text typed in by the user at the keyboard to change the `CustomerID` text.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经编写了两个单独的测试-一个用于测试`AutoFormFillPanel`页面上的各种HTML元素，另一个用于测试`AutoFormFillPanelService`。我们可以将这两个测试合并为一个，并创建一个用于测试面板的单个测试。`AutoFormFillPanel`在更改`CustomerID`文本框中的文本时调用异步服务。为了在测试中模拟键盘监听器，我们在`AutoFormFillPanel`类中创建了一个名为`simulateCustIDChanged()`的新公共方法，它本质上与该类中的键盘监听器事件处理程序执行相同的操作。我们将调用此方法来模拟用户在键盘上输入以更改`CustomerID`文本。
- en: Once we test the various HTML elements on the page, we invoke the `simulateCustIDChanged()`
    method. We then set up an asynchronous event handler using a `Timer` object. When
    the timer runs, we validate that the right values are available from the panel,
    as given in step 3.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们测试了页面上的各种HTML元素，我们调用`simulateCustIDChanged()`方法。然后，我们使用`Timer`对象设置一个异步事件处理程序。当计时器运行时，我们验证面板中是否有正确的值，如步骤3中所述。
- en: 'We set up a delay for the test to finish:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为测试设置延迟以完成：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we schedule the timer to run, so that when the timer fires after the
    given delay, it will validate the expected results and then complete the test:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们安排计时器运行，因此当计时器在给定延迟后触发时，它将验证预期结果，然后完成测试：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create and Run a Test Suite
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并运行测试套件
- en: We have so far learned how to create and run individual unit tests. As your
    code base increases, it is very tedious to run the tests all one at a time. JUnit
    provides the concept of a test suite that lets you combine a set of tests into
    one suite and run them. In this section, we are going to learn how to create and
    run multiple unit tests as part of a suite.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何创建和运行单独的单元测试。随着代码库的增长，逐一运行所有测试非常繁琐。JUnit提供了测试套件的概念，它允许您将一组测试组合成一个套件并运行它们。在本节中，我们将学习如何创建和运行多个单元测试作为套件的一部分。
- en: Time for Action—Deploying a Test Suite
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动时间-部署测试套件
- en: 'We have so far been generating a test-launch script for every test that we
    create and running each test that we created separately. In this section, we will
    combine our tests into a test suite and run all of our tests in a single launch
    configuration. The steps are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们为创建的每个测试生成了一个测试启动脚本，并分别运行了创建的每个测试。在本节中，我们将把我们的测试组合成一个测试套件，并在单个启动配置中运行所有测试。步骤如下：
- en: 'Run the `GWT_HOME\junitCreator` command script by providing these parameters:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GWT_HOME\junitCreator`命令脚本，并提供以下参数：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Modify the `SamplesTestSuite` class and add a `suite()` method:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`SamplesTestSuite`类并添加一个`suite()`方法：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Run the test by launching the `SamplesTestSuite-hosted` launch configuration
    and get a similar result to this:![Time for Action—Deploying a Test Suite](img/1007_08_05.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启动`SamplesTestSuite-hosted`启动配置来运行测试，并获得类似于此的结果：![行动时间-部署测试套件](img/1007_08_05.jpg)
- en: What Just Happened?
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'It can get tedious generating a separate launch script for each test that you
    write and then having to run each of these tests separately. Using a test suite
    lets us have one place to collect all of our tests. We can then use the launch
    script for the suite to run all the tests. A test suite is essentially a collector
    for all the tests in a project. We define a static factory method named `suite()`
    in our project. In this method, we add all the tests to the `suite` object, and
    return the `suite` object as the return value:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 生成每个测试的单独启动脚本并分别运行每个测试可能会变得乏味。使用测试套件让我们可以有一个地方来收集所有的测试。然后我们可以使用套件的启动脚本来运行所有的测试。测试套件本质上是项目中所有测试的收集器。我们在项目中定义了一个名为`suite()`的静态工厂方法。在这个方法中，我们将所有的测试添加到`suite`对象中，并将`suite`对象作为返回值返回。
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When we run this test by launching the script, the JUnit framework recognizes
    that we are running a suite of tests, and it runs each of the tests defined in
    the suite. There is currently no support for inferring all the tests present in
    a GWT project and generating a test suite automatically to contain those tests.
    So you have to manually add each test that you want to be a part of the suite
    to this method. Now that we have the test suite working, we can delete all the
    other test launch configurations from our `Samples` project, and just use this
    one configuration for running all our tests.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过启动脚本运行这个测试时，JUnit框架会识别出我们正在运行一组测试，并运行套件中定义的每个测试。目前还没有支持推断出GWT项目中所有测试并自动生成测试套件来包含这些测试的功能。因此，您必须手动将希望成为套件一部分的每个测试添加到这个方法中。现在我们已经让测试套件工作了，我们可以从`Samples`项目中删除所有其他测试启动配置，只使用这个配置来运行所有的测试。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned to create unit test for a GWT page (`AutoFormFillPanel`)
    and an asynchronous service (`AutoFormFillPanelService`).We then combined these
    two and created a unit test for a GWT page that uses an asynchronous service.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了为GWT页面（`AutoFormFillPanel`）和异步服务（`AutoFormFillPanelService`）创建单元测试。然后我们将这两者结合起来，为使用异步服务的GWT页面创建了一个单元测试。
- en: Finally, we combined all our tests into a test suite and ran all of our tests
    in a single launch configuration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将所有的测试组合成一个测试套件，并在单个启动配置中运行了所有的测试。
- en: In the next chapter, we will learn about the internationalization (I18N) and
    XML support in GWT.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习GWT中的国际化（I18N）和XML支持。
