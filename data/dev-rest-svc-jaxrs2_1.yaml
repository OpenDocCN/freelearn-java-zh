- en: Chapter 1. Building RESTful Web Services Using JAX-RS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：使用 JAX-RS 构建 RESTful Web 服务
- en: There are various ways to implement communication between heterogeneous applications.
    There are standards focusing on web services based on **SOAP**, **WSDL**, and
    WS* specifications; alongside these standards there is an emerging lightweight
    solution based on plain HTTP referred to as **Representational State Transfer**
    (**REST**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实现异构应用程序之间的通信有多种方式。有基于 **SOAP**、**WSDL** 和 WS* 规范的标准化解决方案；与此同时，还有一个基于纯 HTTP
    的轻量级解决方案，被称为 **表征状态转移**（**REST**）。
- en: REST is identified by the principles of addressable resources, constrained interfaces
    using HTTP verbs, representation, and statelessness.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: REST 通过可寻址资源、使用 HTTP 动词约束的接口、表示和无状态性等原则来识别。
- en: 'The key principles of REST are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: REST 的关键原则是：
- en: Associating IDs to resources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 ID 关联到资源
- en: Using standard HTTP methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准 HTTP 方法
- en: Multiple formats of data sent by a resource
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源发送的数据的多种格式
- en: Statelessness
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态性
- en: 'This chapter starts with the basic concept of building **RESTful Web Services**
    using the **JAX-RS** 2.0 API and covers the following sections:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从使用 **JAX-RS** 2.0 API 构建 **RESTful Web 服务** 的基本概念开始，并涵盖以下部分：
- en: Getting started with JAX-RS 2.0
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 JAX-RS 2.0
- en: Converting POJOs to RESTful endpoints using JAX-RS 2.0 annotations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JAX-RS 2.0 注解将 POJO 转换为 RESTful 端点
- en: '`@Produces`, `@Consumes` annotations'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Produces`、`@Consumes` 注解'
- en: Client API for JAX-RS 2.0
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 2.0 的客户端 API
- en: Sample showing all verbs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示所有动词的示例
- en: Custom entity providers for **serializing** and **deserializing** user defined
    classes using JAX-RS
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 **序列化** 和 **反序列化** 用户定义类的自定义实体提供者使用 JAX-RS
- en: Utilizing the Bean Validation API for validation with JAX-RS 2.0
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 Bean Validation API 对 JAX-RS 2.0 进行验证
- en: Understanding REST
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 REST
- en: The REST architectural style is based on request and response messages transferred
    between clients and servers without any of the participating node keeping track
    of the state of previous sessions..
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: REST 架构风格基于客户端和服务器之间传输的请求和响应消息，参与节点中没有任何节点跟踪先前会话的状态。
- en: REST uses nouns and verbs for readability. Resources are identified in requests.
    The representation of the resource that is sent to the client depends on the request
    and how the server sends the data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: REST 使用名词和动词以提高可读性。资源在请求中标识。发送给客户端的资源表示取决于请求和服务器发送数据的方式。
- en: RESTful Web Services
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful Web 服务
- en: A RESTful Web Service is a service whose interface and accessing mechanism are
    aligned with the REST principles . The URIs identify the resources. For example,
    a RESTful resource for a book can be identified as [http://foo.org/book](http://foo.org/book).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful Web 服务是一种接口和访问机制与 REST 原则一致的服务。URI 识别资源。例如，一个书籍的 RESTful 资源可以标识为 [http://foo.org/book](http://foo.org/book)。
- en: A resource for a book identified by ISBN could be [http://foo.org/book/isbn/1234459](http://foo.org/book/isbn/1234459).
    This shows a human-readable URI that is easy to understand and identify.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通过 ISBN 标识的书籍资源可以是 [http://foo.org/book/isbn/1234459](http://foo.org/book/isbn/1234459)。这显示了易于理解和识别的易读
    URI。
- en: A client has enough metadata of a resource to modify or delete it as long as
    it is authorized to do so. To get a resource the client would send a HTTP `GET`
    request. To update the resource the client would send a `PUT` request. To delete
    a resource the client would send a `DELETE` request. To create a new resource,
    and for arbitrary processing, the client sends a HTTP `POST` request. The next
    section covers these verbs in more detail.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端拥有足够资源的元数据来修改或删除它，只要它被授权这样做。为了获取资源，客户端会发送一个 HTTP `GET` 请求。为了更新资源，客户端会发送一个
    `PUT` 请求。为了删除资源，客户端会发送一个 `DELETE` 请求。为了创建新的资源，以及进行任意处理，客户端会发送一个 HTTP `POST` 请求。下一节将更详细地介绍这些动词。
- en: Verbs in REST
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST 中的动词
- en: 'Some of the requests used in REST are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: REST 中使用的一些请求如下：
- en: '`GET`: The `GET` request retrieves a representation of a resource from server
    to client'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：`GET` 请求从服务器到客户端检索资源的表示'
- en: '`POST`: The `POST` request is used to create a resource on the server based
    on the representation that the client sends'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：`POST` 请求用于根据客户端发送的表示在服务器上创建资源'
- en: '`PUT`: The `PUT` request is used to update or create a reference to a resource
    on server'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：`PUT` 请求用于在服务器上更新或创建对资源的引用'
- en: '`DELETE`: The `DELETE` request can delete a resource on server'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：`DELETE` 请求可以删除服务器上的资源'
- en: '`HEAD`: The `HEAD` requests checks for a resource without retrieving it'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`：`HEAD` 请求检查资源而不检索它'
- en: The next section will introduce the notion of safety and **idempotence**, two
    important terms associated with REST.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将介绍安全性和**幂等性**的概念，这两个术语与REST紧密相关。
- en: Safety and idempotence
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性和幂等性
- en: When it comes to REST, a safe method, by definition, is a HTTP method that does
    not modify the state of the resource on the server. For example, invoking a `GET`
    or a `HEAD` method on the resource URL should never change the resource on the
    server. `PUT` is considered not safe since it usually creates a resource on the
    server. `DELETE` is also considered not safe since it will delete the resource
    on the server. `POST` is not safe since it will change the resource on the server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到REST时，根据定义，一个安全的方法是一个不修改服务器上资源状态的HTTP方法。例如，在资源URL上调用 `GET` 或 `HEAD` 方法不应改变服务器上的资源。`PUT`
    被认为是不可安全的，因为它通常会在服务器上创建资源。`DELETE` 也被认为是不可安全的，因为它会删除服务器上的资源。`POST` 也不安全，因为它会改变服务器上的资源。
- en: '**Idempotent** method is a method that can be called multiple times yet the
    outcome will not change.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**幂等**方法是可以多次调用而结果不会改变的方法。'
- en: '`GET` and `HEAD` are idempotent, which means that even though the same operation
    is done multiple times the result does not vary. `PUT` is idempotent; calling
    the `PUT` method multiple times will not change the result and the resource state
    is exactly the same.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 和 `HEAD` 是幂等的，这意味着即使相同的操作执行多次，结果也不会变化。`PUT` 是幂等的；多次调用 `PUT` 方法不会改变结果，资源状态保持完全相同。'
- en: '`DELETE` is idempotent because once the resource is deleted it is gone, and
    calling the same operation multiple times will not change the outcome.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE` 是幂等的，因为一旦资源被删除，它就消失了，多次调用相同的操作不会改变结果。'
- en: In contrast, `POST` is not idempotent and calling `POST` multiple times can
    have different outcomes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`POST` 不是幂等的，多次调用 `POST` 可能会有不同的结果。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The idempotence and safety of the HTTP verbs are a convention, meaning that
    when someone is using your API they will assume that `GET`/`PUT`/`POST`/`DELETE`
    have the same idempotency characteristics that are previously described; and the
    implementation of the business logic behind each verb should support these characteristics.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP动词的幂等性和安全性是一种约定，意味着当有人使用您的API时，他们将假设 `GET`/`PUT`/`POST`/`DELETE` 具有之前描述的相同幂等特性；并且每个动词背后的业务逻辑实现应该支持这些特性。
- en: The response sent by the server could be in XML, JSON, or any other MIME type
    as long as the server supports the requested format. In case the server cannot
    support the requested MIME type, it can return with a status code of 406 (not
    acceptable).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器发送的响应可以是XML、JSON或任何其他MIME类型，只要服务器支持请求的格式。如果服务器无法支持请求的MIME类型，它可以返回状态码406（不可接受）。
- en: When we are developing with RESTful principles in mind, each message should
    have enough information to let the server understand the purpose of the message
    and how to process that message, to produce the response the message is meant
    for, and finally to ensure visibility and statelessness.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以RESTful原则进行开发时，每条消息都应该包含足够的信息，以便服务器理解消息的目的以及如何处理该消息，以生成消息预期的响应，并最终确保可见性和无状态性。
- en: 'Summarizing, these are the components of RESTful Web Services:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总结，这些是RESTful Web服务的组成部分：
- en: '**Base URI**: The base URI for the Web Service `http://foo.com/bar`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础URI**：Web服务的基础URI为 `http://foo.com/bar`'
- en: '**Media type**: The media type supported by the Web Service'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体类型**：Web服务支持的媒体类型'
- en: '**Methods**: The HTTP methods such as `GET`, `PUT`, `POST`, and `DELETE`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**：如 `GET`、`PUT`、`POST` 和 `DELETE` 这样的HTTP方法'
- en: Introduction to JAX-RS
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAX-RS简介
- en: The **Java API for Representational State Transfer** (**JAX-RS**) specification
    defines a set of Java APIs for building web services conforming to the REST style.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java API for Representational State Transfer** (**JAX-RS**) 规范定义了一套Java API，用于构建符合REST风格的Web服务。'
- en: This specification defines how to expose POJOs as web resources, using HTTP
    as the network protocol. Applications using these APIs can be deployed to an application
    server in a portable manner.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本规范定义了如何使用HTTP作为网络协议将POJOs公开为Web资源。使用这些API的应用程序可以以可移植的方式部署到应用程序服务器。
- en: 'Some of the key features that are introduced in the JAX-RS 2.0 specification
    are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 2.0规范中引入的一些关键特性如下：
- en: Client API
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端API
- en: Server side asynchronous support
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端异步支持
- en: '**Bean Validation** support'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bean Validation** 支持'
- en: 'In the subsequent sections we will cover the following topics in relation to
    JAX-RS 2.0:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍与 JAX-RS 2.0 相关的以下主题：
- en: Converting POJOs to RESTful resources
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 POJO 转换为 RESTful 资源
- en: More on JAX-RS annotations
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 JAX-RS 注解的更多内容
- en: Client API for JAX-RS
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 客户端 API
- en: Entities in JAX-RS
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 中的实体
- en: Custom entity providers in JAX-RS
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 中的自定义实体提供者
- en: Using the Bean Validation API with JAX-RS
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JAX-RS 中使用 Bean 验证 API
- en: Converting POJOs to RESTful resources
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 POJO 转换为 RESTful 资源
- en: A resource class is a POJO that uses the JAX-RS annotations. A resource class
    needs to have at least one method annotated with `@Path` or a request method.
    Resources are our so-called web services and incoming requests target these resources.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类是一个使用 JAX-RS 注解的 POJO。资源类需要至少有一个被 `@Path` 或请求方法注解的方法。资源是我们所说的网络服务，传入的请求针对这些资源。
- en: 'Steps to convert POJOs to RESTful endpoints:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将 POJO 转换为 RESTful 端点的步骤：
- en: Define a root resource as identified by a URI
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个由 URI 标识的根资源
- en: Define the methods for the resource
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义资源的方法
- en: Define the MIME types
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 MIME 类型
- en: Define the Application subclass
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义应用程序子类
- en: Define the subresources
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义子资源
- en: Defining a root resource as identified by a URI
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个由 URI 标识的根资源
- en: JAX-RS provides very rich client and server APIs that work on any Java EE application
    server. Using JAX-RS API, any POJO can be annotated to build the RESTful resources.
    Begin with a simple POJO `BookResource` and annotate it with the JAX-RS APIs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 提供了非常丰富的客户端和服务器 API，这些 API 在任何 Java EE 应用程序服务器上都可以工作。使用 JAX-RS API，任何
    POJO 都可以注解以构建 RESTful 资源。从一个简单的 POJO `BookResource` 开始，并使用 JAX-RS API 注解它。
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a root resource class, which is annotated with `@Path annotation`. The
    value `"books"` will indicate that the resource will be available at a location
    similar to the following URI `http://host:port/appname/books`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个根资源类，它被 `@Path 注解` 标注。值 `"books"` 将表示资源将在类似于以下 URI 的位置可用：`http://host:port/appname/books`。
- en: Later on we add the methods to this resource so that, when a request with `GET`,
    `PUT`, and so on hits this resource, a particular method in the class is invoked
    to produce the response.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将向此资源添加方法，以便当带有 `GET`、`PUT` 等请求击中此资源时，将调用类中的特定方法以生成响应。
- en: Defining the methods for the resource
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义资源的方法
- en: 'To add a method to this resource, we annotate the method with `@GET`, `@PUT`,
    `@DELETE`, or `@HEAD`. In the following example, we chose to annotate using a
    `@GET annotation`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要向此资源添加方法，我们需要使用 `@GET`、`@PUT`、`@DELETE` 或 `@HEAD` 注解该方法。在以下示例中，我们选择使用 `@GET
    注解`：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `@GET` annotation specifies that the `getGreeting()` method handles the
    `HTTP GET` requests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`@GET` 注解指定 `getGreeting()` 方法处理 `HTTP GET` 请求。'
- en: Defining the MIME types
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义 MIME 类型
- en: 'To specify the MIME type that can be handled by the resource, we should annotate
    the resource method with `@Produces` and `@Consumes`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定资源可以处理的 MIME 类型，我们应该使用 `@Produces` 和 `@Consumes` 注解资源方法：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `@Produces` specifies that the media type this method will produce is `"text/plain"`.
    Support for other media types, and how to map from Java to a specific format and
    vice versa, is covered in detail in the entity provider's section. Thus, this
    is the initial introduction to having a first JAX-RS resource ready. The next
    section covers the details of the `Application` subclass.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Produces` 指定该方法将生成的媒体类型是 `"text/plain"`。其他媒体类型的支持以及如何从 Java 映射到特定格式以及相反的映射将在实体提供者部分详细说明。因此，这是对拥有第一个
    JAX-RS 资源初识的介绍。下一节将介绍 `Application` 子类的详细信息。'
- en: Defining the Application subclass
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义应用程序子类
- en: The `Application` class is a portable way to configure application-level details
    such as specifying the name, and registering various components of a JAX-RS application.
    This includes the different JAX-RS resources and the JAX-RS providers in the application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application` 类是一种配置应用程序级细节的可移植方式，例如指定名称，并注册 JAX-RS 应用程序的各种组件。这包括应用程序中的不同 JAX-RS
    资源和 JAX-RS 提供者。'
- en: 'Similarly, application-wide properties can be set using a subclass of `Application`.
    The `Application` subclass should to be placed in either in `WEB-INF/classes`
    or `WEB-INF/lib` in a WAR file. Application class has the following methods that
    can be overridden:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以使用 `Application` 的子类设置应用程序范围内的属性。`Application` 子类应放置在 WAR 文件的 `WEB-INF/classes`
    或 `WEB-INF/lib` 中。应用程序类有以下可以重写的方法：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is an example of a subclass of Application for our case:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们案例中应用程序子类的一个示例：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code we create a `HelloWorldApplication`, which is a subclass of `javax.ws.rs.core.Application`.
    With Servlet 3.0 there is no need of a `web.xml` file and the servlet container
    uses the value specified in the `@ApplicationPath` as the servlet mapping. The
    `getClasses()` method of the `Application` class is overridden to add `BooksResource.class`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们创建了一个 `HelloWorldApplication`，它是 `javax.ws.rs.core.Application` 的子类。使用
    Servlet 3.0，不需要 `web.xml` 文件，并且Servlet容器使用 `@ApplicationPath` 中指定的值作为servlet映射。`Application`
    类的 `getClasses()` 方法被重写以添加 `BooksResource.class`。
- en: A basic JAX-RS resource is now ready to use. When the sample is deployed to
    an application server such as GlassFish, you can use curl to send a request.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的JAX-RS资源现在可以使用了。当示例部署到如GlassFish这样的应用服务器时，你可以使用curl发送请求。
- en: 'Here is an example on how to send a `curl -X GET` request:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何发送 `curl -X GET` 请求的示例：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output in the terminal window should be:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 终端窗口中的输出应该是：
- en: '**Hello from book resource**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**来自书籍资源的问候**'
- en: '[Chapter 5](ch05.html "Chapter 5. RESTful Web Services by Example"), *RESTful
    Web Services by Example*, will show how to use the Application class in a `web.xml`
    file.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。通过示例学习RESTful Web服务")，*通过示例学习RESTful Web服务*，将展示如何在 `web.xml`
    文件中使用Application类。'
- en: Defining the subresources
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义子资源
- en: Resource classes can partially process some part of the request and provide
    another subresource to process the remaining part of the request.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类可以部分处理请求的一部分，并提供另一个子资源来处理请求的剩余部分。
- en: For example, here is a snippet of a root resource `Library` and another resource
    `Book`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里是一个根资源 `Library` 和另一个资源 `Book` 的片段。
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Subresource locators are resource methods that have `@Path` annotation but no
    HTTP methods.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 子资源定位器是具有 `@Path` 注解但没有HTTP方法的资源方法。
- en: In the preceding example, `Library` is a root resource as it is annotated with
    `@Path`. The method `getBook()` is a subresource locator whose job is to provide
    an object that can process the request.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`Library` 是一个根资源，因为它被 `@Path` 注解。`getBook()` 方法是一个子资源定位器，其任务是提供一个可以处理请求的对象。
- en: The `@PathParam` is an annotation that allows you to map URI path fragments
    in the method call. In this example, the `isbn` URI parameter is passed to provide
    information about the book.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PathParam` 是一个允许你在方法调用中映射URI路径片段的注解。在这个例子中，`isbn` URI参数被传递以提供关于书籍的信息。'
- en: 'If a client sends a request using the URI:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端使用以下URI发送请求：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Library.getBook()` method will be invoked.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将调用 `Library.getBook()` 方法。
- en: 'If a client sends a request using the URI:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端使用以下URI发送请求：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Library.getBook()` method will be invoked first. A `Book` object is returned
    and then the `getAuthor()` method is invoked.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Library.getBook()` 方法将首先被调用。返回一个 `Book` 对象，然后调用 `getAuthor()` 方法。'
- en: More on JAX-RS annotations
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于JAX-RS注解的内容
- en: The `@Produces` annotation is used to define the type of output the method in
    the resource produces. The `@Consumes` annotation is used to define the type of
    input, the method in the resource consumes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Produces` 注解用于定义资源中方法产生的输出类型。`@Consumes` 注解用于定义输入类型，资源中的方法消耗。'
- en: 'Here is a method in a resource for a `POST` request:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个资源中用于 `POST` 请求的方法：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As shown in this snippet we have the `@POST` annotation that indicates this
    method accepts `POST` request.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如此片段所示，我们有一个 `@POST` 注解，表示此方法接受 `POST` 请求。
- en: The `@Produces(MediaType.APPLICATION_XML)` indicates that the `"application/xml"`
    media type is produced by the `addBook()` method of this resource.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Produces(MediaType.APPLICATION_XML)` 表示该资源的 `addBook()` 方法产生了 `"application/xml"`
    媒体类型。'
- en: The `@Consumes(MediaType.APPLICATION_XML)` indicates that the `"application/xml"`
    media type is consumed by the `addBook()` method of this resource.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Consumes(MediaType.APPLICATION_XML)` 表示该资源的 `addBook()` 方法消耗了 `"application/xml"`
    媒体类型。'
- en: The `Response.ok(book)` method builds an ok response of the type `MediaType.APPLICATION_XML_TYPE`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Response.ok(book)` 方法构建了一个类型为 `MediaType.APPLICATION_XML_TYPE` 的ok响应。'
- en: Other supported media types `@Produces` and `@Consumes` are `"text/xml"`, `"text/html"`,
    `"application/json"`, and so on.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 其他支持的媒体类型 `@Produces` 和 `@Consumes` 包括 `"text/xml"`、`"text/html"`、`"application/json"`
    等。
- en: If there is no media type specified in the `@Produces` or `@Consumes` annotations,
    support for any media type is assumed by default.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 `@Produces` 或 `@Consumes` 注解中没有指定媒体类型，则默认假设支持任何媒体类型。
- en: Here is a snippet of code that shows the `@DELETE` annotation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一段显示 `@DELETE` 注解的代码片段。
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `@PathParam` annotation allows you to map the URI path fragments in the
    method call. In this example, the `isbn` URI parameter is passed to provide information
    about the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`@PathParam` 注解允许您将方法调用中的URI路径片段进行映射。在这个例子中，`isbn` URI参数被传递以提供关于书籍的信息。'
- en: The ISBN uniquely identifies the Book resource so that it can be deleted.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN唯一标识了书籍资源，以便可以删除它。
- en: The following table summarizes important JAX-RS 2.0 annotations included in
    Java EE 7 and used throughout this book.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了包含在Java EE 7中并贯穿本书的JAX-RS 2.0重要注解。
- en: '| Annotation | Description |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 注解 | 描述 |'
- en: '| --- | --- |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `@Path` | To annotate a POJO with the resource path it represents. For example,
    `@Path("books")` or to annotate a subresource that is a method in the annotated
    class. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `@Path` | 用于注解一个POJO，表示其资源路径。例如，`@Path("books")` 或注解一个注解类中的子资源方法。|'
- en: '| `@Produces` | To specify the output type that the resource produces, or in
    a narrower scope the type of output that a method in a resource produces. For
    example:`@Produces(MediaType.APPLICATION_JSON)`. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `@Produces` | 用于指定资源产生的输出类型，或在更窄的范围内指定资源中方法产生的输出类型。例如：`@Produces(MediaType.APPLICATION_JSON)`。|'
- en: '| `@Consumes` | To specify the type of input that the resource consumes, or
    in a narrower scope the type of input that a method in a resource consumes. For
    example:`@Consumes (MediaType.APPLICATION_JSON)`. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `@Consumes` | 用于指定资源消耗的类型，或在更窄的范围内指定资源中方法消耗的类型。例如：`@Consumes (MediaType.APPLICATION_JSON)`。|'
- en: '| `@GET`, `@POST`, `@DELETE`, and so on | To map the HTTP methods to methods
    in the resource representing class. For example, `@GET` can be placed on `getBook`
    method. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `@GET`、`@POST`、`@DELETE` 等等 | 将HTTP方法映射到表示类的资源中的方法。例如，`@GET` 可以放置在 `getBook`
    方法上。|'
- en: '| `@PathParam` | To specify the mapping between query parameter names and method.
    For example:`getBook(@PathParam("isbn") String isbn)`. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `@PathParam` | 用于指定查询参数名称和方法之间的映射。例如：`getBook(@PathParam("isbn") String isbn)`。|'
- en: '| `@ApplicationPath` | Identifies the application path that serves as the base
    URI for all resource URIs provided by path. For example, `@ApplicationPath("library")`
    for the library application. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `@ApplicationPath` | 识别作为所有通过路径提供的资源URI的基础URI的应用程序路径。例如，为图书馆应用程序提供 `@ApplicationPath("library")`。'
- en: '| `@Context` | Can be used to inject contextual objects such as `UriInfo`,
    which provides contextual request-specific information about the request URI.
    For example:`getBook(@Context UriInfo uriInfo,` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `@Context` | 可以用来注入上下文对象，如 `UriInfo`，它提供了关于请求URI的特定请求上下文信息。例如：`getBook(@Context
    UriInfo uriInfo,` |'
- en: '[Chapter 5](ch05.html "Chapter 5. RESTful Web Services by Example"), *RESTful
    Web Services by Example*, covers the different JAX-RS APIs in detail and ties
    them together with other Java EE APIs to build a real-world library application.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。通过示例学习RESTful Web服务"), 《通过示例学习RESTful Web服务》，详细介绍了不同的JAX-RS
    API，并将它们与其他Java EE API结合起来构建一个实际的应用程序。'
- en: The Client API for JAX-RS
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX-RS的客户端API
- en: 'JAX-RS 2.0 provides a rich client API to access the web resources. Here is
    the code on how to use the client API for the `BooksResource` we built earlier:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 2.0 提供了一个丰富的客户端API来访问网络资源。以下是使用我们之前构建的 `BooksResource` 客户端API的代码示例：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The default instance of the `javax.ws.rs.client.Client` object can be obtained
    using the `ClientBuilder.newClient()` API. The `BooksResource` can be identified
    by URI. The `WebTarget` object is used to build the URI.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `ClientBuilder.newClient()` API 获取 `javax.ws.rs.client.Client` 对象的默认实例。`BooksResource`
    可以通过URI进行识别。`WebTarget` 对象用于构建URI。
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `target.request().get(String.class)` method builds an HTTP `GET` request
    and gets an object of type `String` in the response. More samples of the client
    API with other verbs are shown in the next section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`target.request().get(String.class)` 方法构建一个HTTP `GET` 请求，并在响应中获取一个 `String`
    类型的对象。下一节将展示其他动词的客户端API的更多示例。'
- en: Entities in JAX-RS
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX-RS中的实体
- en: The main part of an HTTP interaction consists of the request and response entities.
    Entities are also referred to as the payload or message body in some contexts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP交互的主要部分由请求和响应实体组成。在某些情况下，实体也被称为有效载荷或消息体。
- en: Entities are sent via a request, usually an HTTP `POST` and `PUT` method is
    used, or they are returned in a response, this is relevant for all the HTTP methods.
    The `Content-Type` HTTP header is used to indicate the type of entity being sent.
    Common **content types** are `"text/plain"`, `"text/xml"`, `"text/html"`, and
    `"application/json"`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 实体通过请求发送，通常使用 HTTP `POST` 和 `PUT` 方法，或者它们在响应中返回，这对于所有 HTTP 方法都适用。`Content-Type`
    HTTP 报头用于指示发送的实体类型。常见的 **内容类型** 包括 `"text/plain"`、`"text/xml"`、`"text/html"` 和
    `"application/json"`。
- en: Media types are used in the `Accept` header to indicate what type of resource
    representation the client wants to receive.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体类型用于 `Accept` 报头中，以指示客户端想要接收的资源表示类型。
- en: The following snippet shows how to use the client API to create a `POST` request.
    This invocation takes an entity for a user-defined class `Book` and a `MediaType.APPLICATION_XML_TYPE`
    parameter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段展示了如何使用客户端 API 创建 `POST` 请求。此调用接受一个用户定义类 `Book` 的实体以及 `MediaType.APPLICATION_XML_TYPE`
    参数。
- en: 'Here is the client code to invoke the `POST` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是调用 `POST` 方法的客户端代码：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding snippet, the `WebTarget#request()` method returns a `Response`
    object.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，`WebTarget#request()` 方法返回一个 `Response` 对象。
- en: 'Here is the client API code to invoke the `delete` method:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是调用 `delete` 方法的客户端 API 代码：
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The next section will show how the entity providers that implement the JAX-RS
    API map to and from Java types request and response entities.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将展示实现 JAX-RS API 的实体提供者如何映射到 Java 类型请求和响应实体。
- en: Custom entity providers in JAX-RS
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX-RS 中的自定义实体提供者
- en: JAX-RS enables developers to add custom entity providers to the application.
    The custom entity providers can be used for dealing with user-defined classes
    in the requests as well as responses.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 允许开发者向应用程序添加自定义实体提供者。自定义实体提供者可以用于处理请求和响应中的用户定义类。
- en: Adding a custom entity provider provides a way to **deserialize** user-defined
    classes from the message bodies and **serialize** any media type to your user
    specific class.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 添加自定义实体提供者提供了一种从消息体中反序列化用户定义类以及将任何媒体类型序列化到用户特定类的方法。
- en: 'There are two types of entity providers:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的实体提供者：
- en: '`MessageBodyReader`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageBodyReader`'
- en: '`MessageBodyWriter`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MessageBodyWriter`'
- en: Using the `@Provider` annotation, application-specific provider classes can
    be discovered. Entity providers provide mapping between the representation and
    associated type. There is a sample included with the book that demonstrates the
    use of entity providers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@Provider` 注解，可以查找特定于应用程序的提供者类。实体提供者提供表示和关联类型之间的映射。书中包含了一个示例，演示了实体提供者的使用。
- en: MessageBodyReader
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MessageBodyReader
- en: An application can provide an implementation of the `MessageBodyReader` interface
    by implementing the `isReadable()` method and the `readFrom()` method to map the
    entity to the desired Java type.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以通过实现 `isReadable()` 方法和 `readFrom()` 方法来提供 `MessageBodyReader` 接口的实现，将实体映射到所需的
    Java 类型。
- en: The following figure shows how the `MessageBodyReader` reads an `InputStream`
    object and converts it to a user-defined Java object.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 `MessageBodyReader` 如何读取 `InputStream` 对象并将其转换为用户定义的 Java 对象。
- en: '![MessageBodyReader](img/8125EN_01_01.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![MessageBodyReader](img/8125EN_01_01.jpg)'
- en: The following code shows how to provide an implementation of `MessageBodyReader`
    and uses **Java Architecture for XML Binding** (**JAXB**) with JAX-RS. JAXB provides
    a fast and convenient way to bind XML schemas and Java representations, making
    it easy for Java developers to incorporate the XML data and processing functions
    in Java applications. As a part of this process, JAXB provides methods for **unmarshalling**
    (reading) XML instance documents into Java content trees, and then **marshalling**
    (writing) Java content trees back into XML instance documents.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何提供 `MessageBodyReader` 的实现，并使用 JAX-RS 与 **Java Architecture for XML
    Binding**（**JAXB**）结合。JAXB 提供了一种快速便捷的方式将 XML 架构和 Java 表示形式绑定，使得 Java 开发者能够轻松地将
    XML 数据和处理函数集成到 Java 应用程序中。作为此过程的一部分，JAXB 提供了将 XML 实例文档反序列化（读取）到 Java 内容树的方法，然后将
    Java 内容树序列化（写入）回 XML 实例文档。
- en: Here is a JAXB root element called `Book`. `Book` has properties such as name
    and ISBN.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个名为 `Book` 的 JAXB 根元素。`Book` 具有名称和 ISBN 等属性。
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `MessageBodyReader` implementation class can provide support to read from
    an `inputStream` object and convert to the `Book` object. The following table
    shows the methods that need to be implemented:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageBodyReader` 实现类可以提供从 `inputStream` 对象读取并将其转换为 `Book` 对象的支持。以下表格显示了需要实现的方法：'
- en: '| Method of MessageBodyReader | Description |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 消息体读取器方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `isReadable()` | To check if the `MessageBodyReader` class can support conversion
    from stream to Java type. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `isReadable()` | 检查 `MessageBodyReader` 类是否支持从流转换为 Java 类型。 |'
- en: '| `readFrom()` | To read a type from the `InputStream`. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `readFrom()` | 从 `InputStream` 读取类型。 |'
- en: 'Here is the code for `SampleMessageBodyReader` class that is the implementation
    of the `MessageBodyReader` interface:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `SampleMessageBodyReader` 类的代码，它是 `MessageBodyReader` 接口的实现：
- en: '[PRE16]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `@Provider` annotation indicates that this is a provider and the implementing
    class can also use `@Produces` and `@Consumes` annotations to restrict the media
    types they support.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Provider` 注解表示这是一个提供者，实现类也可以使用 `@Produces` 和 `@Consumes` 注解来限制它们支持的媒体类型。'
- en: 'Here is the implementation of `isReadable()` method:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `isReadable()` 方法的实现：
- en: '[PRE17]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `isReadable()` method returns `true` to indicate that this `SampleMessageBodyReader`
    class can process the `mediaType` parameter.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`isReadable()` 方法返回 `true` 以指示这个 `SampleMessageBodyReader` 类可以处理 `mediaType`
    参数。'
- en: This is an implementation of the `readFrom()` method of the `SampleMessageBodyReader`
    class. The `mediaType` parameter can be checked here and different actions can
    be taken based on the media type.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `SampleMessageBodyReader` 类的 `readFrom()` 方法的实现。可以在这里检查 `mediaType` 参数，并根据媒体类型采取不同的操作。
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `book` object, which is the method's return value, is then unmarshalled
    using JAXB **Unmarshaller** using the provided `inputStream` object as the parameter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 方法返回的 `book` 对象，然后使用 JAXB **Unmarshaller** 和提供的 `inputStream` 对象作为参数进行反序列化。
- en: MessageBodyWriter
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息体写入器
- en: The `MessageBodyWriter` interface represents a contract for a provider that
    supports the conversion from a Java type to a stream.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageBodyWriter` 接口代表了一个提供者合约，该合约支持将 Java 类型转换为流。'
- en: The following figure shows how `MessageBodyWriter` can take a user-defined class,
    `Book,` and marshal it to an `outputStream` object.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 `MessageBodyWriter` 如何将用户定义的类 `Book` 序列化到 `outputStream` 对象。
- en: '![MessageBodyWriter](img/8125EN_01_02.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![MessageBodyWriter](img/8125EN_01_02.jpg)'
- en: The following table shows the methods of `MessageBodyWriter` that must be implemented
    along with a short description of each of its method.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了 `MessageBodyWriter` 必须实现的方法及其每个方法的简要描述。
- en: '| Method of MessageBodyWriter | Description |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 消息体写入器方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `isWritable()` | To check if the `MessageBodyWriter class` can support the
    conversion from the specified Java type. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `isWritable()` | 检查 `MessageBodyWriter 类` 是否支持从指定的 Java 类型进行转换。 |'
- en: '| `getSize()` | To check the length of bytes if the size is known or -1. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `getSize()` | 如果已知大小或为 -1，则检查字节数长度。 |'
- en: '| `writeTo()` | To write from a type to the stream. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `writeTo()` | 从类型写入到流。 |'
- en: 'Here are the methods of the `MessageBodyWriter` interface that need to be implemented:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是需要实现 `MessageBodyWriter` 接口的方法：
- en: '[PRE19]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `isWritable()`method of the `MessageBodyWriter` interface can be customized
    to check if this implementation of `MessageBodyWriter` supports the type or not.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageBodyWriter` 接口的 `isWritable()` 方法可以自定义以检查此 `MessageBodyWriter` 实现是否支持该类型。'
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `getSize()` method is called before the `writeTo()` method to ascertain
    the length of bytes in the response.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `writeTo()` 方法之前调用 `getSize()` 方法以确定响应中的字节数长度。
- en: '[PRE21]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `writeTo()` method marshals the `Book` to the `Outputstream`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`writeTo()` 方法将 `Book` 对象序列化到 `OutputStream`。'
- en: Tip
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Tips for debugging errors with** `MessageBodyReader` **and** `MessageBodyWriter`
    **:**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 `MessageBodyReader` 和 `MessageBodyWriter` 调试错误的技巧：**'
- en: Look for the `@Provider` annotation. `MessageBodyReader` implementation class
    and `MessageBodyWriter` implementation class need the `@Provider` annotation.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找 `@Provider` 注解。`MessageBodyReader` 实现类和 `MessageBodyWriter` 实现类需要 `@Provider`
    注解。
- en: Confirm if the implementation classes of `MessageBodyReader` and `MessageBodyWriter`
    interfaces are added in the `getClasses()` method of the Application subclass.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认 `MessageBodyReader` 和 `MessageBodyWriter` 接口的实现类是否已添加到应用程序子类的 `getClasses()`
    方法中。
- en: Check if the implementation of `MessageBodyReader.isReadable()` method returns
    `true`.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 `MessageBodyReader.isReadable()` 方法的实现是否返回 `true`。
- en: Check if the implementation of `MessageBodyWriter.isWritable()` method returns
    `true`.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 `MessageBodyWriter.isWritable()` 方法的实现是否返回 `true`。
- en: Confirm the `MessageBodyWriter.getSize()` method is `-1` if the size of response
    is unknown or set it to the right value if the size is known.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认 `MessageBodyWriter.getSize()` 方法是 `-1`，如果响应的大小未知，或者如果大小已知，则将其设置为正确的值。
- en: 'This is how the client looks:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端看起来是这样的：
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `client.register()` method is used to register the `MessageBodyReaderWriter.class`
    and `BooksResource.class`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `client.register()` 方法注册 `MessageBodyReaderWriter.class` 和 `BooksResource.class`。
- en: The application class, `Book` is extracted from the response using `response.readEntity(Book.class)`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序类 `Book` 是通过 `response.readEntity(Book.class)` 从响应中提取的。
- en: Using the Bean Validation API with JAX-RS
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 JAX-RS 中使用 Bean Validation API
- en: Validation is the process of verifying that the given inputs are complying with
    the defined constraints. The Bean Validation specification defines the API to
    validate **JavaBeans**. This section shows how to validate the JAX-RS 2.0 resources
    using the Bean Validation API.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 验证是验证给定输入是否符合定义的约束的过程。Bean Validation 规范定义了用于验证 **JavaBeans** 的 API。本节展示了如何使用
    Bean Validation API 验证 JAX-RS 2.0 资源。
- en: Validation can be used to ensure that fields in the JAX-RS resources follow
    certain constraints. For example, to check that a field is not `null` or if the
    ISBN follows a pattern. Using Bean Validation, a user can write custom validators
    and annotate the JAX-RS resources and their components using the custom validators.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 验证可以用来确保 JAX-RS 资源中的字段遵循某些约束。例如，检查一个字段是否不是 `null` 或 ISBN 是否遵循某种模式。使用 Bean Validation，用户可以编写自定义验证器，并使用自定义验证器注解
    JAX-RS 资源及其组件。
- en: The sample included along with the book will show how to use Bean Validation
    with JAX-RS 2.0 resources.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 书中包含的示例将展示如何使用 JAX-RS 2.0 资源与 Bean Validation 结合使用。
- en: 'Here is a code snippet showing how to enforce validation along with defining
    a constraint and adding a user-defined message to it:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码片段，展示了如何强制执行验证，同时定义一个约束并将其添加到用户定义的消息中：
- en: '[PRE23]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `@ValidateOnExecution` annotation can be used to selectively enable and
    disable the validation. In this snippet, the `getBook()` method gets validated
    because the `@ValidateOnExecution` annotation enables the validation for the `ExecutableType.GETTER_METHODS`
    value.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `@ValidateOnExecution` 注解有选择地启用和禁用验证。在这个片段中，`getBook()` 方法被验证，因为 `@ValidateOnExecution`
    注解启用了 `ExecutableType.GETTER_METHODS` 值的验证。
- en: When the sample code is executed, if the book value is not null then, the book
    object is returned. If the book value is null, there is a validation error with
    a message shown on the screen as `"Book does not exist for the ISBN requested"`.
    This is the message that is provided with the `@NotNull` annotation shown previously.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行示例代码时，如果书籍值不为 `null`，则返回书籍对象。如果书籍值为 `null`，则会出现验证错误，屏幕上显示的消息为 `"Book does
    not exist for the ISBN requested"`。这是之前显示的 `@NotNull` 注解提供的信息。
- en: Enabling validation in the application
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在应用程序中启用验证
- en: Getting validation errors from the response is not enabled by default. The sample
    included in the book will demonstrate how to get the validation errors from the
    response. The user needs to set `BV_SEND_ERROR_IN_RESPONSE` property to Boolean
    value `true` using `Application` class by overriding the `getProperties()` method.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，从响应中获取验证错误是不启用的。书中包含的示例将演示如何从响应中获取验证错误。用户需要通过覆盖 `getProperties()` 方法，使用
    `Application` 类将 `BV_SEND_ERROR_IN_RESPONSE` 属性设置为布尔值 `true`。
- en: Here is the `getProperties()` method of the `Application` subclass.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `Application` 子类的 `getProperties()` 方法。
- en: '[PRE24]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `getProperties()` method returns the `Map<String,Object>` object with the
    String property `ServerProperties.BV_SEND_ERROR_IN_RESPONSE` set to the Boolean
    value `true`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`getProperties()` 方法返回一个 `Map<String,Object>` 对象，其中 String 属性 `ServerProperties.BV_SEND_ERROR_IN_RESPONSE`
    被设置为布尔值 `true`。'
- en: Tip
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: Reading validation errors from the response
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从响应中读取验证错误
- en: After the application class is configured to set the String property `ServerProperties.BV_SEND_ERROR_IN_RESPONSE`
    to the Boolean value `true`, the following code in the servlet class will read
    the validation errors from the response.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序类配置为将字符串属性 `ServerProperties.BV_SEND_ERROR_IN_RESPONSE` 设置为布尔值 `true`
    之后，servlet 类中的以下代码将读取响应中的验证错误。
- en: 'This is how the code looks on the client side:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是客户端代码的显示方式：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `response.readEntity()` method takes a list of `GenericType<ValidationError>`
    parameters. From the `List<ValidationError>` `errors`, returned by the `response.readEntity()`
    method, we can extract the validation error and get the validation message. On
    running the sample, the following message will be shown:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`response.readEntity()` 方法接受一个 `GenericType<ValidationError>` 参数的列表。从 `response.readEntity()`
    方法返回的 `List<ValidationError>` `errors` 中，我们可以提取验证错误并获取验证消息。运行示例时，将显示以下消息：'
- en: '**"There was 1 error when validating the request**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**"在验证请求时出现1个错误"**'
- en: '**Book does not exist for the ISBN requested"**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**"请求的 ISBN 对应的书籍不存在"**'
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter started with a brief introduction to REST and the key principles
    of RESTful Web Services development, followed by converting a POJO to a JAX-RS
    resource, a RESTful endpoint along with discussing different HTTP verbs and their
    use.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先简要介绍了 REST 和 RESTful Web 服务开发的关键原则，然后介绍了将 POJO 转换为 JAX-RS 资源、RESTful 端点，并讨论了不同的
    HTTP 动词及其用法。
- en: After the introduction, the chapter dives deeper into the JAX-RS API by introducing
    the client API to send requests to the resources developed using the JAX-RS APIs.
    We also covered customizing the entity providers to produce different output formats
    using `MessageBodyReader` and `MessageBodyWriters`. We learned how to validate
    JAX-RS 2.0 resources using Bean Validation.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍之后，本章通过介绍用于向使用 JAX-RS API 开发的资源发送请求的客户端 API，更深入地探讨了 JAX-RS API。我们还介绍了如何使用
    `MessageBodyReader` 和 `MessageBodyWriters` 定制实体提供者以生成不同的输出格式。我们学习了如何使用 Bean Validation
    验证 JAX-RS 2.0 资源。
- en: In the next chapter, we will cover the different polling techniques, compare
    and contrast them with Server-sent events (SSE) and **WebSockets**, followed by
    a closer look at how Java EE 7 provides support for SSE and WebSockets.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍不同的轮询技术，将它们与服务器发送事件（SSE）和 **WebSockets** 进行比较和对比，然后更详细地探讨 Java EE
    7 如何为 SSE 和 WebSockets 提供支持。
