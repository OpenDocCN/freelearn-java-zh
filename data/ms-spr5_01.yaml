- en: Evolution to Spring Framework 5.0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的演变
- en: The first version of Spring Framework 1.0 was released in March 2004\. For more
    than a decade and a half, Spring Framework remained the framework of choice to
    build Java applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 1.0的第一个版本于2004年3月发布。在十五年多的时间里，Spring Framework一直是构建Java应用程序的首选框架。
- en: In the relatively young and dynamic world of Java frameworks, a decade is a
    long time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java框架相对年轻和动态的世界中，十年是很长的时间。
- en: In this chapter, we start with understanding the core features of Spring Framework.
    We will look at why the Spring Framework became popular and how it adapted to
    remain the framework of choice. After taking a quick look at the important modules
    in the Spring Framework, we will jump into the world of Spring Projects. We will
    end the chapter by looking at the new features in Spring Framework 5.0.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从理解Spring Framework的核心特性开始。我们将看看Spring Framework为什么变得受欢迎以及它如何适应以保持首选框架。在快速了解Spring
    Framework中的重要模块之后，我们将进入Spring项目的世界。我们将通过查看Spring Framework 5.0中的新功能来结束本章。
- en: 'This chapter will answer the following questions:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将回答以下问题：
- en: Why is Spring Framework popular?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework为什么受欢迎？
- en: How has Spring Framework adapted to the evolution of application architectures?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework如何适应应用程序架构的演变？
- en: What are the important modules in Spring Framework?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework中的重要模块是什么？
- en: Where does Spring Framework fit in the umbrella of Spring Projects?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework在Spring项目的伞下适用于哪些方面？
- en: What are the new features in Spring Framework 5.0?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework 5.0中的新功能是什么？
- en: Spring Framework
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Framework
- en: 'The Spring website ([https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/))
    defines Spring Framework as follows: *The Spring Framework provides a comprehensive
    programming and configuration model for modern Java-based enterprise applications*.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Spring网站（[https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/)）对Spring
    Framework的定义如下：*Spring Framework为现代基于Java的企业应用程序提供了全面的编程和配置模型*。
- en: Spring Framework is used to wire enterprise Java applications. The main aim
    of Spring Framework is to take care of all the technical plumbing that is needed
    in order to connect the different parts of an application. This allows programmers
    to focus on the crux of their jobs--writing business logic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework用于连接企业Java应用程序。Spring Framework的主要目标是处理连接应用程序不同部分所需的所有技术细节。这使程序员可以专注于他们的工作核心--编写业务逻辑。
- en: Problems with EJB
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EJB的问题
- en: Spring Framework was released in March 2004\. When the first version of Spring
    Framework was released, the popular way of developing an enterprise application
    was using **Enterprise Java Beans** (**EJB**) 2.1.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework于2004年3月发布。在Spring Framework的第一个版本发布时，开发企业应用程序的流行方式是使用EJB 2.1。
- en: 'Developing and deploying EJBs was a cumbersome process. While EJBs made the
    distribution of components easier, developing, unit testing, and deploying them
    was not easy. The initial versions of EJBs (1.0, 2.0, 2.1) had a complex **Application
    Programmer Interface** (**API**), leading to a perception (and truth in most applications)
    that the complexity introduced far outweighed the benefits:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和部署EJB是一个繁琐的过程。虽然EJB使组件的分发变得更容易，但开发、单元测试和部署它们并不容易。EJB的初始版本（1.0、2.0、2.1）具有复杂的应用程序接口（API），导致人们（在大多数应用程序中是真的）认为引入的复杂性远远超过了好处：
- en: Difficult to unit test. Actually, difficult to test outside the EJB Container.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 难以进行单元测试。实际上，在EJB容器之外进行测试也很困难。
- en: Multiple interfaces need to be implemented with a number of unnecessary methods.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要实现多个接口，具有许多不必要的方法。
- en: Cumbersome and tedious exception handling.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 繁琐和乏味的异常处理。
- en: Inconvenient deployment descriptors.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不方便的部署描述符。
- en: Spring Framework was introduced as a lightweight framework aimed at making developing
    Java EE applications simpler.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework最初是作为一个旨在简化开发Java EE应用程序的轻量级框架而推出的。
- en: Why is Spring Framework popular?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Framework为什么受欢迎？
- en: The first version of Spring Framework was released in March 2004\. In the subsequent
    decade and a half, the use and popularity of Spring Framework only grew.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework的第一个版本于2004年3月发布。在随后的十五年中，Spring Framework的使用和受欢迎程度只增不减。
- en: 'The important reasons behind the popularity of Spring Framework are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework受欢迎的重要原因如下：
- en: Simplified unit testing--because of dependency injection
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化单元测试--因为依赖注入
- en: Reduction in plumbing code
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少样板代码
- en: Architectural flexibility
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构灵活性
- en: Keeping up with changing times
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟上时代的变化
- en: Let's discuss each of these in detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论每一个。
- en: Simplified unit testing
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化单元测试
- en: Earlier versions of EJBs were very difficult to unit test. In fact, it was difficult
    to run EJBs outside the container (as of version 2.1). The only way to test them
    was to deploy them in a container.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 早期版本的EJB非常难以进行单元测试。事实上，很难在容器之外运行EJB（截至2.1版本）。测试它们的唯一方法是将它们部署在容器中。
- en: Spring Framework brought in the concept of **Dependency Injection** (**DI**).
    We will discuss dependency injection in complete detail in Chapter 2, *Dependency
    Injection*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework引入了“依赖注入”的概念。我们将在第2章“依赖注入”中详细讨论依赖注入。
- en: The dependency injection enables unit testing by making it easy to replace the
    dependencies with their mocks. We do not need to deploy the entire application
    to unit test it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入使得单元测试变得容易，可以通过将依赖项替换为它们的模拟来进行单元测试。我们不需要部署整个应用程序来进行单元测试。
- en: 'Simplifying unit testing has multiple benefits:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简化单元测试有多重好处：
- en: Programmers are more productive
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员更加高效
- en: Defects are found earlier so they are less costly to fix
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷可以更早地发现，因此修复成本更低
- en: Applications have automated unit tests, which can run in **Continuous Integration**
    builds, preventing future defects
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序具有自动化的单元测试，可以在持续集成构建中运行，以防止未来的缺陷
- en: Reduction in plumbing code
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少样板代码
- en: 'Before Spring Framework, typical J2EE (or Java EE, as it is called now) applications
    contained a lot of plumbing code. For example: getting a database connection,
    exception handling code, transaction management code, logging code, and a lot
    more.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Framework之前，典型的J2EE（或现在称为Java EE）应用程序包含大量的管道代码。例如：获取数据库连接、异常处理代码、事务管理代码、日志记录代码等等。
- en: 'Let''s take a look at a simple example of executing a query using prepared
    statement:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用预编译语句执行查询的简单例子：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding example, there are four lines of business logic and more than
    10 lines of plumbing code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，有四行业务逻辑和超过10行管道代码。
- en: 'With Spring Framework, the same logic can be applied in a couple of lines:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Framework，相同的逻辑可以应用在几行代码中：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How does Spring Framework do this magic?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Framework是如何做到这一点的？
- en: In the preceding example, Spring JDBC (and Spring, in general) converts most
    checked exceptions into unchecked exceptions. Typically, when a query fails, there
    is not a lot we can do--other than to close the statement and fail the transaction.
    Instead of implementing exception handling in every method, we can have centralized
    exception handling and inject it in using Spring **Aspect-Oriented Programming**
    (**AOP**).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，Spring JDBC（以及Spring总体）将大多数已检查异常转换为未检查异常。通常，当查询失败时，我们无法做太多事情 - 除了关闭语句并使事务失败。我们可以在每个方法中实现异常处理，也可以使用Spring
    **面向方面的编程**（**AOP**）进行集中式异常处理并将其注入。
- en: Spring JDBC removes the need to create all the plumbing code involved in getting
    a connection, creating a prepared statement, and so on. The `jdbcTemplate` class
    can be created in the Spring context and injected into the **Data Access Object**
    (**DAO**) class wherever it is needed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Spring JDBC消除了创建所有涉及获取连接、创建预编译语句等管道代码的需要。`jdbcTemplate`类可以在Spring上下文中创建，并在需要时注入到**数据访问对象**（**DAO**）类中。
- en: Similar to the preceding example, Spring JMS, Spring AOP, and other Spring modules
    help in reducing a lot of plumbing code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的例子类似，Spring JMS、Spring AOP和其他Spring模块有助于减少大量的管道代码。
- en: Spring Framework lets the programmer focus on the primary job of a programmer--
    writing business logic.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework让程序员专注于程序员的主要工作 - 编写业务逻辑。
- en: Avoiding all the plumbing code also has another great benefit--reduced duplication
    in code. Since all code for transaction management, exception handling, and so
    on (typically, all your cross-cutting concerns) is implemented at one place, it
    is easier to maintain.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 避免所有管道代码还有另一个很大的好处 - 减少代码重复。由于所有事务管理、异常处理等代码（通常是所有横切关注点）都在一个地方实现，因此更容易维护。
- en: Architectural flexibility
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构灵活性
- en: Spring Framework is modular. It is built as a set of independent modules built
    on top of the core Spring modules. Most of the Spring modules are independent--you
    can use one of them without having to use others.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework是模块化的。它是建立在核心Spring模块之上的一组独立模块。大多数Spring模块都是独立的 - 您可以使用其中一个而无需使用其他模块。
- en: 'Let''s look at a few examples:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看几个例子：
- en: In the web layer, Spring offers a framework of its own--Spring MVC. However,
    Spring has great support for Struts, Vaadin, JSF, or any web framework of your
    choice.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Web层，Spring提供了自己的框架 - Spring MVC。但是，Spring对Struts、Vaadin、JSF或您选择的任何Web框架都有很好的支持。
- en: Spring Beans can provide lightweight implementation for your business logic.
    However, Spring can be integrated with EJBs as well.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Beans可以为您的业务逻辑提供轻量级实现。但是，Spring也可以与EJB集成。
- en: In the data layer, Spring simplifies JDBC with its Spring JDBC module. However,
    Spring has great support for any of your preferred data layer frameworks--JPA,
    Hibernate (with or without JPA), or iBatis.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据层，Spring通过其Spring JDBC模块简化了JDBC。但是，Spring对您喜欢的任何首选数据层框架（JPA、Hibernate（带或不带JPA）或iBatis）都有很好的支持。
- en: You have the option of implementing your cross-cutting concerns (logging, transaction
    management, security, and so on) with Spring AOP. Or, you can integrate with a
    fully fledged AOP implementation such as AspectJ.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以选择使用Spring AOP来实现横切关注点（日志记录、事务管理、安全等），或者可以集成一个完整的AOP实现，比如AspectJ。
- en: Spring Framework does not want to be the jack-of-all-trades. While focusing
    on its core job of reducing coupling between different parts of the application
    and making them testable, Spring provides great integration with frameworks of
    your choice. This means you have flexibility in your architecture--if you do not
    want to use a specific framework, you can easily replace it with another.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework不希望成为万能工具。在专注于减少应用程序不同部分之间的耦合并使它们可测试的核心工作的同时，Spring与您选择的框架集成得很好。这意味着您在架构上有灵活性
    - 如果您不想使用特定框架，可以轻松地用另一个替换它。
- en: Keep up with changing times
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟上时代的变化
- en: 'The first version of Spring Framework focused on making applications testable.
    However, as time moved on, there were new challenges. Spring Framework managed
    to evolve and stay ahead of the curve with the flexibility and modules that are
    offered. A couple of examples are listed as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework的第一个版本专注于使应用程序可测试。然而，随着时间的推移，出现了新的挑战。Spring Framework设法演变并保持领先地位，提供了灵活性和模块。以下列举了一些例子：
- en: Annotations were introduced in Java 5\. Spring Framework (version 2.5 – Nov
    2007) was ahead of Java EE in introducing an annotation-based controller model
    for Spring MVC. Developers using Java EE had to wait until Java EE 6 (Dec 2009
    – 2 years) before having comparable functionality.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解是在Java 5中引入的。Spring Framework（2.5版 - 2007年11月）在引入基于注解的Spring MVC控制器模型方面领先于Java
    EE。使用Java EE的开发人员必须等到Java EE 6（2009年12月 - 2年后）才能获得类似的功能。
- en: Spring Framework introduced a number of abstractions ahead of Java EE to keep
    the application decoupled from specific implementation. Caching API provides a
    case in point. Spring provided a transparent caching support in Spring 3.1\. Java
    EE came up with *JSR-107* for JCache (in 2014)--support for which was provided
    in Spring 4.1.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring框架在Java EE之前引入了许多抽象概念，以使应用程序与特定实现解耦。缓存API就是一个例子。Spring在Spring 3.1中提供了透明的缓存支持。Java
    EE在2014年提出了*JSR-107*用于JCache——Spring 4.1提供了对其的支持。
- en: 'Another important thing Spring brings in is the umbrella of Spring Projects.
    Spring Framework is just one of the many projects under Spring Projects. We will
    discuss the different Spring Projects in a separate section. The following examples
    illustrate how Spring managed to stay ahead of times with new Spring Projects:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Spring带来的另一个重要的东西是Spring项目的总称。Spring框架只是Spring项目下的众多项目之一。我们将在单独的部分讨论不同的Spring项目。以下示例说明了Spring如何通过新的Spring项目保持领先地位：
- en: '**Spring Batch** defines a new approach to building Java Batch applications.
    We had to wait until Java EE 7 (June 2013) to have comparable batch application
    specification in Java EE.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Batch**定义了构建Java批处理应用程序的新方法。直到Java EE 7（2013年6月）我们才有了Java EE中可比较的批处理应用程序规范。'
- en: As architecture evolved toward Cloud and microservices, Spring came up with
    new Cloud-oriented Spring Projects. Spring Cloud helps in simplifying the development
    and deployment of microservices. Spring Cloud Data Flow provides orchestrations
    around microservice applications.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着架构向云和微服务发展，Spring推出了新的面向云的Spring项目。Spring Cloud有助于简化微服务的开发和部署。Spring Cloud
    Data Flow提供了对微服务应用程序的编排。
- en: Spring modules
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring模块
- en: The modularity of Spring Framework is one of the most important reasons for
    its widespread used. Spring Framework is highly modular with more than 20 different
    modules--having clearly defined boundaries.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架的模块化是其广泛使用的最重要原因之一。Spring框架非常模块化，有20多个不同的模块，具有明确定义的边界。
- en: 'The following figure shows different Spring modules--organized by the layer
    of application they are typically used in:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了不同的Spring模块——按照它们通常在应用程序中使用的层进行组织：
- en: '![](img/36fbd771-549b-4734-8d96-e306af3b5a43.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36fbd771-549b-4734-8d96-e306af3b5a43.png)'
- en: We will start with discussing the Spring Core Container before moving on to
    other modules grouped by the application layer they are typically used in.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从讨论Spring核心容器开始，然后再讨论其他按照它们通常在应用程序层中使用的模块分组的模块。
- en: Spring Core Container
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring核心容器
- en: Spring Core Container provides the core features of Spring Framework--dependency
    injection, **IoC** (**Inversion of Control**) container, and the application context.
    We will learn more about DI and IoC Container in Chapter 2, *Dependency Injection*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Spring核心容器提供了Spring框架的核心功能——依赖注入、**IoC**（控制反转）容器和应用程序上下文。我们将在第2章“依赖注入”中更多地了解DI和IoC容器。
- en: 'Important core Spring modules are listed in the following table:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的核心Spring模块列在下表中：
- en: '| **Module/Artifact** | **Use** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **模块/构件** | **用途** |'
- en: '| spring-core | Utilities used by other Spring modules. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| spring-core | 其他Spring模块使用的实用工具。 |'
- en: '| spring-beans | Support for Spring beans. In combination with spring-core
    provides the core feature of Spring Framework--dependency injection. Includes
    implementation of BeanFactory. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| spring-beans | 支持Spring beans。与spring-core结合使用，提供了Spring框架的核心功能——依赖注入。包括BeanFactory的实现。
    |'
- en: '| spring-context | Implements ApplicationContext, which extends BeanFactory
    and provides support to load resources and internationalization, among others.
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| spring-context | 实现了ApplicationContext，它扩展了BeanFactory并提供了加载资源和国际化等支持。 |'
- en: '| spring-expression | Extends **EL** (**Expression Language** from JSP) and
    provides a language for bean property (including arrays and collections) access
    and manipulations. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| spring-expression | 扩展了**EL**（来自JSP的表达式语言）并提供了一种用于访问和操作bean属性（包括数组和集合）的语言。
    |'
- en: Cross-cutting concerns
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 横切关注点
- en: Cross-cutting concerns are applicable to all application layers--logging and
    security, among others. **AOP** is typically used to implement cross-cutting concerns.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 横切关注点适用于所有应用程序层——包括日志记录和安全性等。**AOP**通常用于实现横切关注点。
- en: Unit tests and integration tests fit this category since they are applicable
    to all layers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试和集成测试属于这一类，因为它们适用于所有层。
- en: 'Important Spring modules related to cross-cutting concerns are listed as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与横切关注点相关的重要Spring模块如下所示：
- en: '| **Module/Artifact** | **Use** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **模块/构件** | **用途** |'
- en: '| spring-aop | Provides basic support for Aspect-Oriented Programming--with
    method interceptors and pointcuts. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| spring-aop | 提供面向切面编程的基本支持——包括方法拦截器和切入点。 |'
- en: '| spring-aspects | Provides integration with the most popular and fully featured
    AOP framework, AspectJ. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| spring-aspects | 提供与最流行和功能齐全的AOP框架AspectJ的集成。 |'
- en: '| spring-instrument | Provides basic instrumentation support. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| spring-instrument | 提供基本的仪器支持。 |'
- en: '| spring-test | Provides basic support for unit testing and integration testing.
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| spring-test | 提供对单元测试和集成测试的基本支持。 |'
- en: Web
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web
- en: Spring provides its own MVC framework, Spring MVC, other than providing great
    integration with popular web frameworks such as Struts.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了自己的MVC框架，Spring MVC，除了与流行的Web框架（如Struts）进行良好的集成。
- en: 'Important artifacts/modules are listed as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的构件/模块如下所示：
- en: '**spring-web**: Provides basic web features, such as multi-part file upload.
    Provides support for integration with other web frameworks, such as Struts.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**spring-web**：提供基本的Web功能，如多部分文件上传。提供与其他Web框架（如Struts）的集成支持。'
- en: '**spring-webmvc**: Provides a fully featured web MVC framework--Spring MVC,
    which includes features to implement REST services as well.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**spring-webmvc**：提供了一个功能齐全的Web MVC框架——Spring MVC，其中包括实现REST服务的功能。'
- en: We will cover Spring MVC and develop web applicaitions and rest services with
    it in Chapter 3, *Building Web Application with Spring MVC* and Chapter 5, *Building
    Microservices with Spring Boot.*
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第3章*使用Spring MVC构建Web应用程序*和第5章*使用Spring Boot构建微服务*中详细介绍Spring MVC并开发Web应用程序和REST服务。
- en: Business
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务
- en: The business layer is focused on executing the business logic of the applications.
    With Spring, business logic is typically implemented in **Plain Old Java Object**
    (**POJO**).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 业务层专注于执行应用程序的业务逻辑。在Spring中，业务逻辑通常是在**普通的旧Java对象**（**POJO**）中实现的。
- en: '**Spring Transactions** (**spring-tx**) provides declarative transaction management
    for POJO and other classes.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring事务**（**spring-tx**）为POJO和其他类提供声明式事务管理。'
- en: Data
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: The data layer in applications typically talks to the database and/or the external
    interfaces.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的数据层通常与数据库和/或外部接口进行通信。
- en: 'Some of the important Spring modules related to the data layer are listed in
    the following table:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了与数据层相关的一些重要的Spring模块：
- en: '| **Module/Artifact** | **Use** |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **模块/组件** | **用途** |'
- en: '| --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| spring-jdbc | Provides abstraction around JDBC to avoid boilerplate code.
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| spring-jdbc | 提供对JDBC的抽象，避免样板代码。 |'
- en: '| spring-orm | Provides integration with ORM frameworks and specifications--
    JPA and Hibernate, among others. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| spring-orm | 与ORM框架和规范集成--包括JPA和Hibernate等。 |'
- en: '| spring-oxm | Provides an object to XML mapping integration. Supports frameworks
    such as JAXB, Castor, and so on. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| spring-oxm | 提供对象到XML映射集成。支持JAXB、Castor等框架。 |'
- en: '| spring-jms | Provides abstraction around JMS to avoid boilerplate code. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| spring-jms | 提供对JMS的抽象，避免样板代码。 |'
- en: Spring Projects
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring项目
- en: While Spring Framework provides the base for core features of enterprise applications
    (DI, web, data), other Spring Projects explore integration and solutions to other
    problems in the enterprise space--deployment, Cloud, Big Data, Batch and Security,
    among others.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Spring框架为企业应用程序的核心功能（DI、Web、数据）提供了基础，但其他Spring项目探索了企业领域中的集成和解决方案--部署、云、大数据、批处理和安全等。
- en: 'Some of the important Spring Projects are listed as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了一些重要的Spring项目：
- en: Spring Boot
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot
- en: Spring Cloud
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud
- en: Spring Data
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data
- en: Spring Batch
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch
- en: Spring Security
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring安全
- en: Spring HATEOAS
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring HATEOAS
- en: Spring Boot
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot
- en: 'Some of the challenges while developing microservices and web applications
    are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发微服务和Web应用程序时遇到的一些挑战如下：
- en: Making framework choices and deciding compatible framework versions
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定框架选择和决定兼容的框架版本
- en: Providing mechanisms for externalizing configuration--properties that can change
    from one environment to another
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供外部化配置的机制--可以从一个环境更改为另一个环境的属性
- en: Health checks and monitoring--providing alerts if a specific part of the application
    is down
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康检查和监控--如果应用程序的特定部分宕机，则提供警报
- en: Deciding the deployment environment and configuring the application for it
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定部署环境并为其配置应用程序
- en: Spring Boot solves all these problems out of the box by taking an *opinionated
    view* of how applications have to be developed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot通过采取*主观的观点*来解决所有这些问题。
- en: We will look at Spring Boot in depth in two chapters--Chapter 5, *Building Microservices
    with Spring Boot* and [Chapter 7](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml),
    *Advanced Spring Boot Features*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在两章中深入研究Spring Boot--第5章*使用Spring Boot构建微服务*和[第7章](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml)*高级Spring
    Boot功能*。
- en: Spring Cloud
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud
- en: It is not an exaggeration to say *The world is moving to the Cloud*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以毫不夸张地说*世界正在向云端迁移*。
- en: Cloud Native microservices and applications are the order of the day. We will
    discuss this in detail in Chapter 4, *Evolution toward Microservices and Cloud-Native
    Applications*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生微服务和应用程序是当今的趋势。我们将在第4章*向微服务和云原生应用的演进*中详细讨论这一点。
- en: Spring is taking rapid strides toward making application development for the
    Cloud simpler with Spring Cloud.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Spring正在迅速迈向使应用程序在云中开发变得更简单的方向，Spring Cloud正在朝着这个方向迈进。
- en: 'Spring Cloud provides solutions for common patterns in distributed systems.
    Spring Cloud enables developers to quickly create applications that implement
    common patterns. Some of the common patterns implemented in Spring Cloud are listed
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud为分布式系统中的常见模式提供解决方案。Spring Cloud使开发人员能够快速创建实现常见模式的应用程序。Spring Cloud中实现的一些常见模式如下所示：
- en: Configuration management
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Service discovery
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务发现
- en: Circuit breakers
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断路器
- en: Intelligent routing
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能路由
- en: We will discuss Spring Cloud and its varied range features in more detail in
    [Chapter 9](9d263fde-d65c-4222-8da9-b360de7ccc12.xhtml), *Spring Cloud.*
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](9d263fde-d65c-4222-8da9-b360de7ccc12.xhtml)中更详细地讨论Spring Cloud及其各种功能，*Spring
    Cloud*。
- en: Spring Data
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data
- en: There are multiple sources of data in today's world--SQL (relational) and a
    variety of NOSQL databases. Spring Data tries to provide a consistent data-access
    approach to all these different kinds of databases.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当今世界存在多个数据源--SQL（关系型）和各种NOSQL数据库。Spring Data试图为所有这些不同类型的数据库提供一致的数据访问方法。
- en: 'Spring Data provides integration with a varied range of specifications and/or
    data stores:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data提供与各种规范和/或数据存储的集成：
- en: JPA
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA
- en: MongoDB
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB
- en: Redis
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: Solr
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solr
- en: Gemfire
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宝石缓存
- en: Apache Cassandra
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Cassandra
- en: 'Some of the important features are listed as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了一些重要的特性：
- en: Provides abstractions around repository and object mappings--by determining
    queries from method names
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从方法名称确定查询，提供关于存储库和对象映射的抽象
- en: Simple Spring integration
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的Spring集成
- en: Integration with Spring MVC controllers
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring MVC控制器的集成
- en: Advanced automatic auditing features--created by, created date, last changed
    by, and last changed date
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级自动审计功能--创建者、创建日期、最后更改者和最后更改日期
- en: We will discuss Spring Data in more detail in [Chapter 8](b134d136-6980-440f-980c-227e8a46e532.xhtml),
    *Spring Data*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第8章](b134d136-6980-440f-980c-227e8a46e532.xhtml)中更详细地讨论Spring Data，*Spring
    Data*。
- en: Spring Batch
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch
- en: Enterprise applications today process large volumes of data using batch programs.
    The needs of these applications are very similar. Spring Batch provides solutions
    for high- volume batch programs with high performance requirements.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的企业应用程序使用批处理程序处理大量数据。这些应用程序的需求非常相似。Spring Batch提供了解决高性能要求的高容量批处理程序的解决方案。
- en: 'Important features in Spring Batch are as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch中的重要功能如下：
- en: The ability to start, stop, and restart jobs--including the ability to restart
    failed jobs from the point where they failed
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动、停止和重新启动作业的能力--包括从失败点重新启动失败的作业的能力
- en: The ability to process data in chunks
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据块的能力
- en: The ability to retry steps or to skip steps on failure
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重试步骤或在失败时跳过步骤的能力
- en: Web-based administration interface
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Web的管理界面
- en: Spring Security
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security
- en: '**Authentication** is the process of identifying the user. **Authorization**
    is the process of ensuring that a user has access to perform the identified action
    on the resource.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**认证**是识别用户的过程。**授权**是确保用户有权访问资源执行已识别操作的过程。'
- en: Authentication and authorization are critical parts of Enterprise applications,
    both web applications and web services. Spring Security provides declarative authentication
    and authorization for Java based applications.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和授权是企业应用程序的关键部分，包括Web应用程序和Web服务。Spring Security为基于Java的应用程序提供声明性认证和授权。
- en: 'Important features in Spring Security are as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security中的重要功能如下：
- en: Simplified authentication and authorization
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的认证和授权
- en: Great integration with Spring MVC and Servlet APIs
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring MVC和Servlet API的良好集成
- en: Support to prevent common security attacks--**cross-site forgery request** (**CSRF**)
    and Session Fixation
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止常见安全攻击的支持--**跨站请求伪造**（**CSRF**）和会话固定
- en: Modules available for integration with SAML and LDAP
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用于与SAML和LDAP集成的模块
- en: We will discuss how to secure web applications with Spring Security in Chapter
    3, *Building Web Application with Spring MVC*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第3章中讨论如何使用Spring Security保护Web应用程序，*使用Spring MVC构建Web应用程序*。
- en: We will discuss how to secure REST Services with Basic and OAuth authentication
    mechanisms using Spring Security in [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml),
    *Extending Microservices*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml)中讨论如何使用Spring Security保护基本的和OAuth身份验证机制的REST服务，*扩展微服务*。
- en: Spring HATEOAS
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring HATEOAS
- en: '**HATEOAS** stands for **Hypermedia as The Engine of Application State**. Though
    it sounds complex, it is quite a simple concept. Its main aim is to decouple the
    server (the provider of the service) from the client (the consumer of the service).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**HATEOAS**代表**超媒体作为应用程序状态的引擎**。尽管听起来复杂，但它是一个非常简单的概念。它的主要目的是解耦服务器（服务提供者）和客户端（服务消费者）。'
- en: The service provider provides the service consumer with information about what
    other actions can be performed on the resource.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 服务提供者向服务消费者提供有关资源上可以执行的其他操作的信息。
- en: Spring HATEOAS provides a HATEOAS implementation--especially for the REST services
    implemented with Spring MVC.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Spring HATEOAS提供了HATEOAS实现--特别是针对使用Spring MVC实现的REST服务。
- en: 'Important features in Spring HATEOAS are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Spring HATEOAS中的重要功能如下：
- en: Simplified definition of links pointing to service methods, making the links
    less fragile
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化了指向服务方法的链接的定义，使链接更加稳固
- en: Support for JAXB (XML-based) and JSON integration
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持JAXB（基于XML）和JSON集成
- en: Support for service consumer (client side)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持服务消费者（客户端）
- en: We will discuss how to use HATEOAS in [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml),
    *Extending Microservices*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml)中讨论如何在*扩展微服务*中使用HATEOAS。
- en: New features in Spring Framework 5.0
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Framework 5.0中的新功能
- en: Spring Framework 5.0 is the first major upgrade in Spring Framework, almost
    four years after Spring Framework 4.0\. In this time frame, one of the major developments
    has been the evolution of the Spring Boot project. We will discuss the new features
    in Spring Boot 2.0 in the next section.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0是Spring Framework的首次重大升级，距离Spring Framework 4.0差不多四年。在这段时间内，Spring
    Boot项目的主要发展之一就是演变。我们将在下一节讨论Spring Boot 2.0的新功能。
- en: 'One of the biggest features of Spring Framework 5.0 is **Reactive Programming**.
    Core reactive programming features and support for reactive endpoints are available
    out of the box with Spring Framework 5.0\. The list of important changes includes
    the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0最大的特点之一是**响应式编程**。Spring Framework 5.0提供了核心响应式编程功能和对响应式端点的支持。重要变化的列表包括以下内容：
- en: Baseline upgrades
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基线升级
- en: JDK 9 runtime compatibility
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 9运行时兼容性
- en: Usage of JDK 8 features in the Spring Framework code
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Spring Framework代码中使用JDK 8功能的能力
- en: Reactive programming support
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式编程支持
- en: A functional web framework
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能性Web框架
- en: Java modularity with Jigsaw
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jigsaw的Java模块化
- en: Kotlin support
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin支持
- en: Dropped features
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除的功能
- en: Baseline upgrades
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基线升级
- en: Spring Framework 5.0 has JDK 8 and Java EE 7 baseline. Basically, it means that
    previous JDK and Java EE versions are not supported anymore.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0具有JDK 8和Java EE 7基线。基本上，这意味着不再支持以前的JDK和Java EE版本。
- en: 'Some of the important baseline Java EE 7 specifications for Spring Framework
    5.0 are listed as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的重要基线Java EE 7规范如下：
- en: Servlet 3.1
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Servlet 3.1
- en: JMS 2.0
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMS 2.0
- en: JPA 2.1
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA 2.1
- en: JAX-RS 2.0
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 2.0
- en: Bean Validation 1.1
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bean Validation 1.1
- en: 'There are many changes to the minimum supported versions of several Java frameworks.
    The following list contains some of the minimum supported versions of prominent
    frameworks:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 多个Java框架的最低支持版本发生了许多变化。以下列表包含一些知名框架的最低支持版本：
- en: Hibernate 5
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate 5
- en: Jackson 2.6
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jackson 2.6
- en: EhCache 2.10
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EhCache 2.10
- en: JUnit 5
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit 5
- en: Tiles 3
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tiles 3
- en: 'The following list shows the supported server versions:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了支持的服务器版本：
- en: Tomcat 8.5+
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat 8.5+
- en: Jetty 9.4+
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jetty 9.4+
- en: WildFly 10+
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly 10+
- en: Netty 4.1+ (for web reactive programming with Spring Web Flux)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netty 4.1+（用于Spring Web Flux的Web响应式编程）
- en: Undertow 1.4+ (for web reactive programming with Spring Web Flux)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Undertow 1.4+（用于使用Spring Web Flux进行Web响应式编程）
- en: Applications using earlier versions of any of the preceding specifications/frameworks
    need to be upgraded at least to the previously listed versions before they can
    use Spring Framework 5.0.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前版本的任何规范/框架的应用程序在使用Spring Framework 5.0之前，至少需要升级到前面列出的版本。
- en: JDK 9 runtime compatibility
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JDK 9运行时兼容性
- en: JDK 9 is expected to be released mid-2017\. Spring Framework 5.0 is expected
    to have runtime compatibility with JDK 9.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 预计JDK 9将于2017年中期发布。Spring Framework 5.0预计将与JDK 9具有运行时兼容性。
- en: Usage of JDK 8 features in Spring Framework code
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Spring Framework代码中使用JDK 8特性
- en: The Spring Framework 4.x baseline version is Java SE 6\. This means that it
    supports Java 6, 7, and 8\. Having to support Java SE 6 and 7 puts constraints
    on the Spring Framework code. The framework code cannot use any of the new features
    in Java 8\. So, while the rest of the world upgraded to Java 8, the code in Spring
    Framework (at least the major parts) was restricted to using earlier versions
    of Java.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 4.x的基线版本是Java SE 6。这意味着它支持Java 6、7和8。必须支持Java SE 6和7对Spring
    Framework代码施加了限制。框架代码无法使用Java 8的任何新特性。因此，虽然世界其他地方已经升级到Java 8，Spring Framework中的代码（至少是主要部分）仍受限于使用较早版本的Java。
- en: 'With Spring Framework 5.0, the baseline version is Java 8\. Spring Framework
    code is now upgraded to use the new features in Java 8\. This will result in more
    readable and performant framework code. Some of the Java 8 features used are as
    follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的基线版本是Java 8。Spring Framework代码现在已升级以使用Java 8的新特性。这将导致更可读和更高性能的框架代码。使用的一些Java
    8特性如下：
- en: Java 8 default methods in core Spring interfaces
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心Spring接口中的Java 8默认方法
- en: Internal code improvements based on Java 8 reflection enhancements
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Java 8反射增强的内部代码改进
- en: Use of functional programming in the framework code--lambdas and streams
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在框架代码中使用函数式编程--lambda和流
- en: Reactive programming support
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式编程支持
- en: Reactive programming is one of the most important features of Spring Framework
    5.0.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式编程是Spring Framework 5.0最重要的特性之一。
- en: Microservices architectures are typically built around event-based communication.
    Applications are built to react to events (or messages).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构通常是围绕基于事件的通信构建的。应用程序被构建为对事件（或消息）做出反应。
- en: Reactive programming provides an alternate style of programming focused on building
    applications that react to events.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式编程提供了一种专注于构建对事件做出反应的应用程序的替代编程风格。
- en: 'While Java 8 does not have built-in suppport for reactive programming, there
    are a number of frameworks that provide support for reactive programming:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Java 8没有内置对响应式编程的支持，但有许多框架提供了对响应式编程的支持：
- en: '**Reactive Streams**: Language-neutral attempt to define reactive APIs.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式流**：语言中立的尝试定义响应式API。'
- en: '**Reactor**: Java implementation of Reactive Streams provided by the Spring
    Pivotal team.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reactor**：由Spring Pivotal团队提供的Reactive Streams的Java实现。'
- en: '**Spring WebFlux**: Enables the development of web applications based on reactive
    programming. Provides a programming model similar to Spring MVC.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring WebFlux**：基于响应式编程开发Web应用程序的框架。提供类似于Spring MVC的编程模型。'
- en: We will discuss Reactive Programming and how you can implement it with Spring
    Web Flux in [Chapter 11](116716f1-7046-4aaa-b89b-9794b6079880.xhtml), *Reactive
    Programming*.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在《响应式编程》的[第11章](116716f1-7046-4aaa-b89b-9794b6079880.xhtml)中讨论响应式编程以及如何在Spring
    Web Flux中实现它。
- en: Functional web framework
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性Web框架
- en: Building on top of the reactive features, Spring 5 also provides a functional
    web framework.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应式特性的基础上，Spring 5还提供了一个功能性Web框架。
- en: 'A functional web framework provides features to define endpoints using functional
    programming style. A simple hello world example is shown here:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 功能性Web框架提供了使用函数式编程风格定义端点的功能。这里展示了一个简单的hello world示例：
- en: '[PRE2]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A functional web framework can also be used to define more complex routes,
    as shown in the following example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 功能性Web框架还可以用于定义更复杂的路由，如下例所示：
- en: '[PRE3]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A couple of important things to note are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一些重要事项如下：
- en: '`RouterFunction` evaluates the matching condition to route requests to the
    appropriate handler function'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RouterFunction`评估匹配条件以将请求路由到适当的处理程序函数'
- en: We are defining three endpoints, two GETs, and one POST, and mapping them to
    different handler functions
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在定义三个端点，两个GET和一个POST，并将它们映射到不同的处理程序函数
- en: We will discuss Mono and Flux in more detail in [Chapter 11](116716f1-7046-4aaa-b89b-9794b6079880.xhtml),
    *Reactive Programming.*
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在《响应式编程》的[第11章](116716f1-7046-4aaa-b89b-9794b6079880.xhtml)中更详细地讨论Mono和Flux。
- en: Java modularity with Jigsaw
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jigsaw的Java模块化
- en: 'Until Java 8, the Java platform was not modular. A couple of important problems
    resulted out of this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 直到Java 8之前，Java平台并不是模块化的。由此产生了一些重要问题：
- en: '**Platform Bloat**: Java modularity has not been a cause of concern in the
    last couple of decades. However, with **Internet of Things** (**IOT**) and new
    lightweight platforms such as Node.js, there is an urgent need to address the
    bloat of the Java platform. (Initial versions of JDK were less than 10 MB in size.
    Recent versions of JDK need more than 200 MB.)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台膨胀**：在过去的几十年中，Java模块化并不是一个令人担忧的问题。然而，随着**物联网**（**IOT**）和新的轻量级平台如Node.js的出现，迫切需要解决Java平台的膨胀问题。（JDK的初始版本小于10MB。最近的JDK版本需要超过200MB。）'
- en: '**JAR Hell**: Another important concern is the problem of JAR Hell. When Java
    ClassLoader finds a class, it will not see whether there are other definitions
    for the class available. It immediately loads the first class that is found. If
    two different parts of the application need the same class from different jars,
    there is no way for them to specify the jar from which the class has to be loaded.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JAR Hell**：另一个重要问题是JAR Hell的问题。当Java ClassLoader找到一个类时，它不会查看是否有其他可用于该类的定义。它会立即加载找到的第一个类。如果应用程序的两个不同部分需要来自不同JAR的相同类，它们无法指定必须从哪个JAR加载该类。'
- en: '**Open System Gateway initiative** (**OSGi**) is one of the initiatives, started
    way back in 1999, to bring modularity into Java applications.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放系统网关倡议**（**OSGi**）是1999年开始的倡议之一，旨在将模块化引入Java应用程序。'
- en: 'Each module (referred to as bundle) defines the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块（称为捆绑包）定义如下：
- en: '**imports**: Other bundles that the module uses'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**imports**: 模块使用的其他捆绑包'
- en: '**exports**: Packages that this bundle exports'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exports**: 此捆绑包导出的包'
- en: Each module can have its own life cycle. It can be installed, started, and stopped
    on its own.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都可以有自己的生命周期。它可以独立安装、启动和停止。
- en: 'Jigsaw is an initiative under **Java Community Process** (**JCP**), started
    with Java 7, to bring modularity into Java. It has two main aims:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Jigsaw是**Java社区进程**（**JCP**）下的一个倡议，从Java 7开始，旨在将模块化引入Java。它有两个主要目标：
- en: Defining and implementing a modular structure for JDK
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为JDK定义和实现模块化结构
- en: Defining a module system for applications built on the Java platform
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为构建在Java平台上的应用程序定义模块系统
- en: Jigsaw is expected to be part of Java 9 and Spring Framework 5.0 is expected
    to include basic support for Jigsaw modules.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 预计Jigsaw将成为Java 9的一部分，Spring Framework 5.0预计将包括对Jigsaw模块的基本支持。
- en: Kotlin support
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin支持
- en: Kotlin is a statically typed JVM language that enables code that is expressive,
    short, and readable. Spring framework 5.0 has good support for Kotlin.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是一种静态类型的JVM语言，可以编写富有表现力、简短和可读的代码。Spring Framework 5.0对Kotlin有很好的支持。
- en: 'Consider a simple Kotlin program illustrating a data class, as shown here:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的Kotlin程序，演示如下所示的数据类：
- en: '[PRE4]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In fewer than 10 lines of code, we created and tested a data bean with three
    properties and the following functions:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在不到10行的代码中，我们创建并测试了一个具有三个属性和以下功能的数据bean：
- en: '`equals()`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals()`'
- en: '`hashCode()`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashCode()`'
- en: '`toString()`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toString()`'
- en: '`copy()`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy()`'
- en: 'Kotlin is strongly typed. But there is no need to specify the type of each
    variable explicitly:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是强类型的。但是不需要显式指定每个变量的类型：
- en: '[PRE5]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Named arguments allow you to specify the names of arguments when calling methods,
    resulting in more readable code:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 命名参数允许您在调用方法时指定参数的名称，从而使代码更易读：
- en: '[PRE6]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Kotlin makes functional programming simpler by providing default variables
    (`it`) and methods such as `take`, `drop`, and so on:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin通过提供默认变量（`it`）和诸如`take`、`drop`等方法来简化函数式编程：
- en: '[PRE7]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also specify default values for arguments in Kotlin:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Kotlin中为参数指定默认值：
- en: '[PRE8]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With all its features making the code concise and expressive, we expect Kotlin
    to be a language to be learned for the .
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借其使代码简洁和表达力的所有功能，我们期望Kotlin成为要学习的语言。
- en: We will discuss more about Kotlin in [Chapter 13](116716f1-7046-4aaa-b89b-9794b6079880.xhtml),
    *Working with Kotlin in Spring.*
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第13章“在Spring中使用Kotlin”中更多地讨论Kotlin。
- en: Dropped features
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已删除的功能
- en: 'Spring Framework 5 is a major Spring release with substantial increase in the
    baselines. Along with the increase in baseline versions for Java, Java EE and
    a few other frameworks, Spring Framework 5 removed support for a few frameworks:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Framework 5是一个主要的Spring版本，基线版本大幅增加。随着Java、Java EE和其他一些框架的基线版本的增加，Spring
    Framework 5取消了对一些框架的支持：
- en: Portlet
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Portlet
- en: Velocity
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velocity
- en: JasperReports
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JasperReports
- en: XMLBeans
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XMLBeans
- en: JDO
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDO
- en: Guava
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Guava
- en: If you are using any of the preceding frameworks, it is recommended that you
    plan a migration and stay with Spring Framework 4.3--which has support until 2019.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用了上述任何框架，建议您计划迁移并继续使用直到2019年支持的Spring Framework 4.3。
- en: Spring Boot 2.0 new features
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot 2.0的新功能
- en: 'The first version of Spring Boot was released in 2014\. The following are some
    of the important updates expected in Spring Boot 2.0:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的第一个版本于2014年发布。以下是预计在Spring Boot 2.0中的一些重要更新：
- en: The baseline JDK version is Java 8
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基线JDK版本是Java 8
- en: The baseline Spring Version is Spring Framework 5.0
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Framework 5.0的基线版本是Spring Framework 5.0
- en: Spring Boot 2.0 has support for Reactive Web programming with WebFlux
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 2.0支持使用WebFlux进行响应式Web编程
- en: 'Minimum supported versions of some important frameworks are listed as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一些重要框架的最低支持版本如下所示：
- en: Jetty 9.4
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jetty 9.4
- en: Tomcat 8.5
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat 8.5
- en: Hibernate 5.2
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate 5.2
- en: Gradle 3.4
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle 3.4
- en: We will discuss Spring Boot extensively in Chapter 5, *Building Microservices
    with Spring Boot* and [Chapter 7](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml),
    *Advanced Spring Boot Features*.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第5章“使用Spring Boot构建微服务”和第7章“高级Spring Boot功能”中广泛讨论Spring Boot。
- en: Summary
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Over the course of the last decade and a half, Spring Framework has dramatically
    improved the experience of developing Java Enterprise applications. With Spring
    Framework 5.0, it brings in a lot of features while significantly increasing the
    baselines.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十五年中，Spring Framework显着改善了开发Java企业应用程序的体验。Spring Framework 5.0带来了许多功能，同时显着增加了基线。
- en: In the subsequent chapters, we will cover dependency injection and understand
    how we can develop web applications with Spring MVC. After that, we will move
    into the world of microservices. In Chapters 5, *Building Microservices with Spring
    Boot*, [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml), *Extending Microservices*,
    and [Chapter 7](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml), *Advanced Spring
    Boot Features*, we will cover how Spring Boot makes the creation of microservices
    simpler. We will then shift our attention to building applications in the Cloud
    with Spring Cloud and Spring Cloud Data Flow.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的章节中，我们将介绍依赖注入，并了解如何使用Spring MVC开发Web应用程序。之后，我们将进入微服务的世界。在第5章“使用Spring Boot构建微服务”、第6章“扩展微服务”和第7章“高级Spring
    Boot功能”中，我们将介绍Spring Boot如何简化微服务的创建。然后，我们将把注意力转向使用Spring Cloud和Spring Cloud Data
    Flow在云中构建应用程序。
