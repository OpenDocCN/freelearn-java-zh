- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started with Java
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java入门
- en: Welcome to the exciting world of Java! Java is a very popular programming language.
    It is a multipurpose, powerful, and popular programming language that has been
    used by millions of developers worldwide to create a wide variety of applications.
    And yes, it really is multipurpose since it can be used to create all sorts of
    applications, from web and mobile apps to game development and beyond.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到Java的精彩世界！Java是一种非常流行的编程语言。它是一种多用途、强大且流行的编程语言，被全球数百万开发者使用，以创建各种应用程序。是的，它确实是多用途的，因为它可以用来创建各种应用程序，从Web和移动应用，到游戏开发以及其他更多。
- en: So, you’ve done a great job choosing a (new) language. We’re going to take you
    on a (hopefully) fascinating journey that will provide you with valuable skills
    and open new opportunities in the ever-evolving field of technology.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您已经选择了一种（新）语言。我们将带您踏上（希望是）令人着迷的旅程，这将为您提供宝贵的技能，并在不断发展的技术领域中开辟新的机会。
- en: 'What are we waiting for? In this chapter, we’re going to cover the following
    main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在等待什么？在本章中，我们将涵盖以下主要主题：
- en: Java features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java特性
- en: Installing Java
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Java
- en: Compiling and running Java programs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译和运行Java程序
- en: Working with an **integrated development** **environment** (**IDE**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**集成开发环境**（**IDE**）进行工作
- en: Creating and running a program with an IDE
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IDE创建和运行程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before diving into the magical world of Java programming, let’s ensure you
    have the right hardware. If your hardware doesn’t meet these requirements, don’t
    worry; online alternatives are discussed later in this chapter. If you are using
    your work laptop, make sure that you have download rights. Here’s a brief overview
    of the requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入Java编程的神奇世界之前，让我们确保您拥有合适的硬件。如果您的硬件不符合这些要求，请不要担心；本章后面将讨论在线替代方案。如果您正在使用工作笔记本电脑，请确保您有下载权限。以下是要求的简要概述：
- en: '**Operating system**: Java can run on various operating systems, including
    Windows, macOS, and Linux. Ensure that you have a recent version of one of these
    operating systems installed on your computer.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：Java可以在包括Windows、macOS和Linux在内的各种操作系统上运行。请确保您在计算机上安装了这些操作系统的最新版本。'
- en: '**Java Development Kit** (**JDK**): To compile and run Java programs, you’ll
    need the JDK installed on your system. The JDK includes the **Java Runtime Environment**
    (**JRE**), which contains the necessary libraries and components for running Java
    applications. We’ll see how to install this later.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java开发工具包**（**JDK**）：要编译和运行Java程序，您需要在您的系统上安装JDK。JDK包括**Java运行环境**（**JRE**），其中包含运行Java应用程序所需的库和组件。我们将在稍后介绍如何安装它。'
- en: '**System resources**: More is always better, but Java isn’t too demanding.
    It doesn’t require high-end hardware, but it’s still a good idea to have a system
    with sufficient resources for a smooth development experience. The following are
    the minimum and recommended system requirements:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统资源**：越多越好，但Java的要求并不高。它不需要高端硬件，但仍然建议拥有一个资源充足的系统，以便获得流畅的开发体验。以下是最小和推荐的系统要求：'
- en: '**Minimum requirements**:'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低要求**：'
- en: 'CPU: 1 GHz or faster processor'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU：1 GHz或更快的处理器
- en: 'RAM: 2 GB'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAM：2 GB
- en: 'Disk space: 1 GB (for JDK installation and additional files)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘空间：1 GB（用于JDK安装和附加文件）
- en: '**Recommended requirements**:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐要求**：'
- en: 'CPU: 2 GHz or faster multi-core processor'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU：2 GHz或更快的多核处理器
- en: 'RAM: 4 GB or more'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAM：4 GB或更多
- en: 'Disk space: 2 GB or more (for JDK installation, additional files, and projects)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘空间：2 GB或更多（用于JDK安装、附加文件和项目）
- en: 'Keep in mind that these requirements may change with future updates to the
    JDK and related tools. We have placed the files in a GitHub repository. You can
    clone the projects with the use of Git and import them to your computer this way.
    It’s beyond the scope of explaining how to use Git here but it’s recommended to
    look into it independently. You can access the files and examples used in this
    book here: [https://github.com/PacktPublishing/Learn-Java-with-Projects](https://github.com/PacktPublishing/Learn-Java-with-Projects).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些要求可能会随着JDK和相关工具的未来更新而改变。我们已经将这些文件放在GitHub仓库中。您可以使用Git克隆项目，并以此方式将它们导入到您的计算机上。这里不涉及如何使用Git的说明，但建议您独立研究。您可以通过以下链接访问本书中使用的文件和示例：[https://github.com/PacktPublishing/Learn-Java-with-Projects](https://github.com/PacktPublishing/Learn-Java-with-Projects)。
- en: Exploring Java features
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Java特性
- en: Java was developed by James Gosling at Sun Microsystems in the mid-1990s. When
    Java was created, it was originally designed as a language for consumer electronics.
    It attempted to support complex host architectures, focused on portability, and
    supported secure networking. However, Java outgrew its own ambitions. It quickly
    gained momentum as a versatile language for creating enterprise, web, and mobile
    applications. Today, Java no longer belongs to Sun Microsystems. Oracle Corporation
    acquired Sun Microsystems in 2010\. And with that acquirement, Java became an
    integral part of Oracle’s software ecosystem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Java是由James Gosling在20世纪90年代中期在Sun Microsystems开发的。当Java被创造出来时，它最初被设计为一种用于消费电子产品的语言。它试图支持复杂的宿主架构，专注于可移植性，并支持安全网络。然而，Java超出了自己的野心。它迅速成为一种多用途的语言，用于创建企业、Web和移动应用程序。如今，Java不再属于Sun
    Microsystems。Oracle Corporation在2010年收购了Sun Microsystems。随着这次收购，Java成为了Oracle软件生态系统的一个组成部分。
- en: Java was very unique at the time it was created. The huge success of Java can
    be attributed to some of its core features. These features were very innovative
    at the time but are now found in many other (competing) languages. One of the
    core features is object-oriented programming. OOP allows us to structure our code
    in a neat way that helps with reusability and maintainability. We’re going to
    start discussing the core features by having a look at **object-oriented** **programming**
    (**OOP**).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Java在它被创造的时候非常独特。Java的巨大成功可以归因于其一些核心特性。这些特性在当时是非常创新的，但现在在许多其他（竞争）语言中也能找到。其中一个核心特性是面向对象编程。OOP允许我们以一种整洁的方式组织代码，这有助于代码的可重用性和可维护性。我们将通过查看**面向对象**的**编程**（**OOP**）来开始讨论这些核心特性。
- en: OOP in Java
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的OOP
- en: Arguably the most important feature of Java is its support for OOP. If you ask
    any Java developer what Java is, the answer is often that it’s an OOP language.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不可否认，Java最重要的特性是其对OOP的支持。如果你问任何Java开发者Java是什么，答案通常是它是一种OOP语言。
- en: 'It’s safe to say that OOP is a key feature. *What is this OOP thing?* you may
    wonder. OOP is a programming paradigm. It structures applications to model real-world
    objects and their interactions and behaviors. Let’s go over the main concepts
    of OOP:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以肯定地说，OOP是一个关键特性。*这个OOP是什么东西？*你可能想知道。OOP是一种编程范式。它将应用程序结构化，以模拟现实世界对象及其交互和行为。让我们回顾一下OOP的主要概念：
- en: '**Objects**: This may be stating the obvious but, in OOP, **objects** are the
    main building blocks of your program. An object is a representation of a real-world
    entity, such as a user, an email, or a bank account. Each object has its own **attributes**
    (data fields) and behaviors (**methods**).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象**：这可能是显而易见的，但在OOP中，**对象**是程序的主要构建块。对象是现实世界实体的表示，例如用户、电子邮件或银行账户。每个对象都有自己的**属性**（数据字段）和行为（**方法**）。'
- en: '`Car` class might define attributes such as color, make, and model, and methods
    such as start, accelerate, and brake.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Car`类可能定义了诸如颜色、制造商和型号等属性，以及启动、加速和制动等方法。'
- en: '`Car` could inherit from a `Vehicle` class. We’re not going to cover the details
    here, but inheritance helps to better structure the code. The code is more reusable,
    and the hierarchy of related classes opens doors in terms of what we can do with
    our types.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Car`可以继承自`Vehicle`类。我们在这里不会详细介绍细节，但继承有助于更好地组织代码。代码更可重用，相关类的层次结构为我们使用类型打开了大门。'
- en: '**Encapsulation**: Encapsulation is giving a class control over its own data.
    This is done by bundling data (attributes) and methods that operate on that data.
    The attributes can only be accessed via these special methods from outside. Encapsulation
    helps to protect the internal state of an object and allows you to control how
    the object’s data can be accessed or modified. Don’t worry if this sounds tricky
    still, we’ll deal with this in more detail later.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装**：封装是给予一个类对其自身数据的控制。这是通过捆绑数据（属性）和操作这些数据的方法来实现的。属性只能通过这些特殊方法从外部访问。封装有助于保护对象的内部状态，并允许你控制对象的数据如何被访问或修改。如果你觉得这听起来仍然很棘手，不要担心，我们将在稍后更详细地讨论这个问题。'
- en: '**Polymorphism** and **Abstraction**: These are two key concepts of OOP that
    will be explained later when you’re ready for them.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多态**和**抽象**：这些是OOP的两个关键概念，将在你准备好时进行解释。'
- en: Working with OOP
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用OOP
- en: I can imagine this all sounds very abstract at this point, but before you know
    it, you’ll be creating classes and instantiating objects yourself. OOP helps to
    make code more maintainable, better structured, and reusable. These things really
    help to be able to make changes to your application, solve problems, and scale
    up when needed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以想象现在这一切听起来可能非常抽象，但很快你就会自己创建类和实例化对象。面向对象编程有助于使代码更易于维护、结构更清晰、可重用。这些因素确实有助于在需要时能够对应用程序进行更改、解决问题和扩展。
- en: OOP is just one key feature of Java. Another key feature is that it’s a compiled
    language. Let’s make sure you understand what is meant by that now.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）只是Java的一个关键特性。另一个关键特性是它是一种编译型语言。让我们确保你现在理解这个意思。
- en: Compiled language
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译型语言
- en: Java is a **compiled programming language**, which means that the source code
    you write must be transformed into a machine-readable format before it can be
    interpreted. This machine-readable format is called bytecode. This process is
    different from that of interpreted languages, where the source code is read, interpreted,
    and executed on the fly. During runtime, the computer interprets an interpreted
    language line by line. When a compiled language is running, the computer interprets
    the bytecode during runtime. We’ll dive deeper into the compilation process in
    just a bit when we are going to compile our own code. For now, let’s see what
    the benefits of compiled languages are.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种**编译型编程语言**，这意味着你编写的源代码必须在被解释之前转换为机器可读格式。这种机器可读格式称为字节码。这个过程与解释型语言不同，解释型语言是在运行时逐行读取、解释和执行的。当编译型语言运行时，计算机在运行时解释字节码。当我们准备编译自己的代码时，我们将在稍后深入了解编译过程。现在，让我们看看编译型语言的优点是什么。
- en: Benefits of Java being a compiled language
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java作为编译型语言的优点
- en: Compiling code first requires an extra step, and it takes time in the beginning,
    but it brings advantages. First of all, the performance of compiled languages
    is typically better than interpreted languages. This is because the bytecode gets
    optimized for efficient execution on the target platform.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先编译代码需要额外的一步，并且一开始会花费一些时间，但会带来优势。首先，编译型语言的性能通常比解释型语言更好。这是因为字节码被优化以在目标平台上高效执行。
- en: Another advantage of compilation is the early detection of syntax errors and
    certain other types of errors before the code is executed. This enables developers
    to identify and fix issues before deploying the application, reducing the likelihood
    of runtime errors.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的另一个优点是在代码执行之前可以提前检测到语法错误和某些其他类型的错误。这使得开发者能够在部署应用程序之前识别和修复问题，从而降低运行时错误的可能性。
- en: Java code is turned into bytecode – a form of binary code - by the compiler.
    This bytecode is platform-independent. This means that it allows Java applications
    to run on different operating systems without modification. Platform independence
    is actually the key feature that we’re going to be discussing next.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Java代码通过编译器转换为字节码——一种二进制代码的形式。这种字节码是平台无关的。这意味着它允许Java应用程序在不同的操作系统上运行而无需修改。平台无关性实际上是我们接下来将要讨论的关键特性。
- en: Write once, run anywhere
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写一次，到处运行
- en: Java’s **Write Once, Run Anywhere** (**WORA**) principle is another key feature.
    This used to set Java apart from many other programming languages, but now, this
    is rather common, and many competing languages also implemented this feature.
    This principle ensures that Java code can run on different platforms without requiring
    different versions of the Java code for each platform. This means that a Java
    program is not tied to any specific operating system or hardware architecture.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Java的**一次编写，到处运行**（**WORA**）原则是另一个关键特性。这曾经使Java与其他许多编程语言区分开来，但现在，这已经相当普遍，许多竞争语言也实现了这一特性。这个原则确保Java代码可以在不同的平台上运行，而无需为每个平台提供不同的Java代码版本。这意味着Java程序不会绑定到任何特定的操作系统或硬件架构。
- en: When you have different versions of the code for each platform, this means that
    you have to maintain all these versions of the code as well. Let’s say you have
    a code base for Linux, macOS, and Windows. When a new feature or a change is required,
    you need to add this to three places! You can imagine that WORA was a game-changer
    at the time Java came out. And it leads to an increased reach of your application
    – any device that can run Java applications can run yours.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为每个平台有不同的代码版本时，这意味着你必须维护所有这些代码版本。假设你有一个Linux、macOS和Windows的代码库。当需要新功能或变更时，你需要将其添加到三个地方！你可以想象，当Java出现时，WORA是一个颠覆性的变化。它导致你的应用程序的覆盖范围增加——任何可以运行Java应用程序的设备都可以运行你的应用程序。
- en: Understanding the WORA elements
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解WORA元素
- en: The WORA principle is made possible by bytecode and the **Java Virtual Machine**
    (**JVM**). Bytecode is the compiled Java program. The compiler turns the Java
    code into this bytecode, and this bytecode is platform-independent. It can run
    on any device that can run the bytecode executer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: WORA（一次编写，到处运行）原则得以实现得益于字节码和**Java虚拟机**（**JVM**）。字节码是编译后的Java程序。编译器将Java代码转换成这种字节码，而这种字节码是平台无关的。它可以在任何能够运行字节码执行器的设备上运行。
- en: This bytecode executer is called the JVM. Each platform (Windows, macOS, Linux,
    and so on) has its own JVM implementation, which is specifically designed to translate
    bytecode into native machine code for that platform. Since the bytecode remains
    the same across platforms, the JVM handles the differences between operating systems
    and hardware architectures. The WORA principle is explained in *Figure 1**.1*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字节码执行器被称为JVM。每个平台（Windows、macOS、Linux等）都有自己的JVM实现，它是专门为将该平台的字节码转换为本地机器代码而设计的。由于字节码在平台之间保持不变，JVM处理操作系统和硬件架构之间的差异。WORA原则在*图1.1*中解释。
- en: '![Figure 1.1 – The WORA principle in a diagram](img/B19793_01_1.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 图解WORA原则](img/B19793_01_1.jpg)'
- en: Figure 1.1 – The WORA principle in a diagram
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 图解WORA原则
- en: You can see that the compiler creates bytecode and that this bytecode can be
    picked up by the JVM. The JVM is platform-specific and does the translation to
    the platform it’s on. There’s more that the JVM does for us, and that is automatic
    memory management. Let’s explore this next.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到编译器创建了字节码，并且这个字节码可以被JVM捕获。JVM是平台特定的，并且将其翻译成它所在的平台。JVM为我们做了更多的事情，那就是自动内存管理。让我们接下来探讨这一点。
- en: Automatic memory management
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动内存管理
- en: Another key feature that made Java great is its **automatic memory management**,
    which simplifies development and prevents common memory-related errors. Java handles
    memory allocation and garbage collection for you. The developer doesn’t need to
    take care of manually managing the memory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使Java变得伟大的关键特性是其**自动内存管理**，它简化了开发并防止了常见的内存相关错误。Java为你处理内存分配和垃圾回收。开发者不需要手动管理内存。
- en: Nowadays, this is the rule and not the exception. Most other modern languages
    have automatic memory management as well. However, it is important to know what
    automatic memory management means. The memory allocation and deallocation are
    done automatically. This actually leads to simplifying the code. There is no boilerplate
    code that just focuses on the allocation and deallocation of the memory. This
    also leads to fewer memory-related errors.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这已经成为规则而不是例外。大多数其他现代语言也有自动内存管理。然而，了解自动内存管理意味着什么很重要。内存的分配和释放是自动完成的。这实际上简化了代码。没有只关注内存分配和释放的样板代码。这也导致内存相关错误更少。
- en: Let’s make sure you understand what is meant by memory allocation and deallocation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保你理解内存分配和释放的含义。
- en: Memory allocation
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存分配
- en: In code, you create variables. Sometimes, these variables are not simple values
    but complex objects with many data fields. When you create an object, this object
    needs to be stored somewhere in the memory of the device that it’s running on.
    This is called **memory allocation**. In Java, when you create an object, device
    memory is automatically allocated to store the object’s attributes and associated
    data. This is different from languages such as C and C++, where developers must
    manually allocate and deallocate memory. Java’s automatic memory allocation streamlines
    the development process and reduces the chances of memory leaks or dangling pointers,
    which can cause unexpected behavior or crashes. It also makes the code cleaner
    to read, since you don’t need to deal with any allocation or deallocation code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，你创建变量。有时，这些变量不是简单的值，而是具有许多数据字段的复杂对象。当你创建一个对象时，这个对象需要存储在运行它的设备内存中。这被称为 **内存分配**。在
    Java 中，当你创建一个对象时，设备内存会自动分配以存储对象的属性和相关数据。这与 C 和 C++ 等语言不同，在这些语言中，开发者必须手动分配和释放内存。Java
    的自动内存分配简化了开发过程，并减少了内存泄漏或悬挂指针的可能性，这些可能会导致意外的行为或崩溃。它还使代码更易于阅读，因为你不需要处理任何分配或释放代码。
- en: Garbage collection
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 垃圾回收
- en: When a memory block is no longer used by the application, it needs to be deallocated.
    The process Java uses for this is called **garbage collection**. Garbage collection
    is the process of identifying and reclaiming memory that is no longer in use by
    a program. In Java, when an object is no longer accessible or needed, the garbage
    collector automatically frees up the memory occupied by the object. This process
    ensures that the memory is efficiently utilized and prevents memory leaks and
    the problems that come with it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当内存块不再被应用程序使用时，它需要被释放。Java 用于此的过程称为 **垃圾回收**。垃圾回收是识别和回收程序不再使用的内存的过程。在 Java 中，当一个对象不再可访问或不再需要时，垃圾回收器会自动释放该对象占用的内存。这个过程确保内存得到有效利用，并防止内存泄漏及其相关问题。
- en: The JVM periodically runs the garbage collector to identify and clean up unreachable
    objects. Java’s garbage collection mechanism uses many different sophisticated
    algorithms to determine when an object is no longer needed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 定期运行垃圾回收器以识别和清理不可达的对象。Java 的垃圾回收机制使用许多不同的复杂算法来确定何时对象不再需要。
- en: Now that we’ve covered the basics, let’s move on to installing Java.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了基础知识，接下来让我们继续学习如何安装 Java。
- en: Installing Java
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Java
- en: Before you can start writing and running Java programs, you’ll need to set up
    the JDK on your computer. The JDK contains essential tools and libraries required
    for Java development, such as the Java compiler, the JRE, and other useful utilities
    that help development.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始编写和运行 Java 程序之前，你需要在计算机上设置 JDK。JDK 包含 Java 开发所需的必需工具和库，例如 Java 编译器、JRE 以及其他有助于开发的实用工具。
- en: We will guide you through the process of installing Java on Windows, macOS,
    and Linux, and we’ll give you some suggestions for when you don’t have access
    to either one of those. But before proceeding with the installation of Java, it’s
    a good idea to check whether it’s already installed on your system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将指导你如何在 Windows、macOS 和 Linux 上安装 Java，并为你提供一些在没有这些系统之一的情况下的一些建议。但在开始安装 Java
    之前，检查系统是否已安装 Java 是一个好主意。
- en: Checking whether Java is installed on your system
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查系统是否已安装 Java
- en: Java may have been pre-installed, or you may have installed it previously without
    realizing it. To check whether Java is installed, follow these simple steps. The
    first one depends on your operating system.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Java 可能已经预装，或者你可能之前已经安装过，但没有意识到。要检查 Java 是否已安装，请按照以下简单步骤操作。第一步取决于你的操作系统。
- en: Step 1 – Open a terminal
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步 – 打开终端
- en: For Windows, press the *Windows* key, type `cmd`, and press *Enter* to open
    the **Command Prompt**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，按 *Windows* 键，输入 `cmd`，然后按 *Enter* 打开 **命令提示符**。
- en: For macOS, press *Command* + *Space* to open the `Terminal`, and press *Enter*
    to open **Terminal**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，按 *Command* + *Space* 打开 `终端`，然后按 *Enter* 打开 **终端**。
- en: For Linux, open a Terminal window. The method for opening the Terminal window
    varies depending on your Linux distribution (for example, in Ubuntu, press *Ctrl*
    + *Alt* + *T*).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux，打开终端窗口。打开终端窗口的方法取决于你的 Linux 发行版（例如，在 Ubuntu 中，按 *Ctrl* + *Alt* + *T*）。
- en: Step 2 – Check for the Java version
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步 – 检查 Java 版本
- en: 'In the Command Prompt or Terminal window, type the following command and press
    *Enter*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符或终端窗口中，输入以下命令并按 *Enter*：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Step 3 – Interpret the response
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 – 解读响应
- en: If Java is installed, you will see the version information displayed. If not,
    the Command Prompt will display an error message, indicating that Java is not
    recognized or found.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已安装 Java，您将看到显示的版本信息。如果没有安装，命令提示符将显示错误消息，指示 Java 不可识别或未找到。
- en: If you find that Java is already installed on your system, make sure it’s version
    21 or later to ensure compatibility with modern Java features. If it’s an older
    version or not installed, proceed with the installation process for your specific
    platform, as described in the following sections. If an older version is installed,
    you may want to uninstall this first to avoid having an unnecessarily complicated
    setup. You can install this the common way of uninstalling programs for your operating
    system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现系统上已经安装了 Java，请确保它是 21 版本或更高版本，以确保与现代 Java 功能的兼容性。如果是较旧版本或未安装，请按照以下章节中描述的针对您特定平台的过程进行安装。如果已安装较旧版本，您可能希望首先卸载它，以避免设置过于复杂。您可以使用操作系统的常见程序卸载方式来安装它。
- en: In *Figure 1**.2* and *Figure 1**.6*, you’ll see examples of the output you
    can expect when Java is installed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 1**.2* 和 *图 1**.6* 中，您将看到安装 Java 时可以预期的输出示例。
- en: '![Figure 1.2 – The macOS terminal output where Java 19 is installed](img/B19793_01_2.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 安装了 Java 19 的 macOS 终端输出](img/B19793_01_2.jpg)'
- en: Figure 1.2 – The macOS terminal output where Java 19 is installed
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 安装了 Java 19 的 macOS 终端输出
- en: Now, let’s see how to install Java on each operating system.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在每个操作系统上安装 Java。
- en: Installing Java on Windows
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Java
- en: 'To install Java on a Windows operating system, follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 操作系统上安装 Java，请按照以下步骤操作：
- en: 'Visit the **Oracle Java SE Downloads** page at [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/).
    This software can be used for educational purposes for free, but requires a license
    in production. You can consider switching to **OpenJDK** to run programs in production
    without a license: [https://openjdk.org/install/](https://openjdk.org/install/).'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/)
    上的 **Oracle Java SE 下载** 页面。此软件可以免费用于教育目的，但在生产中需要许可证。您可以考虑切换到 **OpenJDK** 以在生产环境中运行程序而不需要许可证：[https://openjdk.org/install/](https://openjdk.org/install/)。
- en: Select the appropriate installer for your Windows operating system (for example,
    **Windows** **x64 Installer**).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合您 Windows 操作系统的适当安装程序（例如，**Windows** **x64 安装程序**）。
- en: Download the installer by clicking on the file link.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击文件链接下载安装程序。
- en: Run the downloaded installer (the `.exe` file) and follow the on-screen instructions
    to complete the installation.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行下载的安装程序（`.exe` 文件）并按照屏幕上的说明完成安装。
- en: To add Java to the system’s `PATH` environment variable, search for **Environment
    Variables** in the **Start** menu and select **Edit the system environment variables**.
    You should see a screen similar to *Figure 1**.3*.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 Java 添加到系统的 `PATH` 环境变量中，在 **开始** 菜单中搜索 **环境变量** 并选择 **编辑系统环境变量**。您应该看到一个类似于
    *图 1**.3* 的屏幕。
- en: '![Figure 1.3 – The System Properties window](img/B19793_01_3.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 系统属性窗口](img/B19793_01_3.jpg)'
- en: Figure 1.3 – The System Properties window
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 系统属性窗口
- en: In the **System Properties** window, click on the **Environment Variables…**
    button. A screen like the one in *Figure 1**.4* will pop up.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **系统属性** 窗口中，点击 **环境变量…** 按钮。将弹出一个类似于 *图 1**.4* 的屏幕。
- en: 'Under **System variables**, find the **Path** variable, select it, and click
    **Edit**. You can see an example of which one to select in the following *Figure
    1**.4*:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **系统变量** 下，找到 **Path** 变量，选择它，然后点击 **编辑**。您可以在以下 *图 1**.4* 中看到一个选择示例：
- en: '![Figure 1.4 – The Environment Variables window](img/B19793_01_4.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 环境变量窗口](img/B19793_01_4.jpg)'
- en: Figure 1.4 – The Environment Variables window
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 环境变量窗口
- en: Click `bin` folder of your Java installation (for example, `C:\Program Files\Java\jdk-21\bin`).
    In *Figure 1**.5*, this has been done already.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Java 安装目录下的 `bin` 文件夹（例如，`C:\Program Files\Java\jdk-21\bin`）。在 *图 1**.5*
    中，这一步已经完成。
- en: '![Figure 1.5 – Adding the path to Java to the Path variable](img/B19793_01_5.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 将 Java 路径添加到 Path 变量中](img/B19793_01_5.jpg)'
- en: Figure 1.5 – Adding the path to Java to the Path variable
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 将 Java 路径添加到 Path 变量中
- en: Click **OK** to save the changes and close the **Environment** **Variables**
    windows.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 保存更改并关闭 **环境变量** 窗口。
- en: 'Verify Java is installed by opening the Command Prompt (reopen it if you have
    it open already) and then typing the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开命令提示符（如果已经打开，请重新打开）并输入以下内容来验证 Java 是否已安装：
- en: '[PRE1]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The output should look as shown in *Figure 1**.6*. However, your version should
    be 21 or higher to keep up with all the snippets in this book.![](img/B19793_01_6.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应该看起来像 *图 1**.6* 中所示的那样。然而，你的版本应该是 21 或更高，以跟上这本书中所有的代码片段！![img/B19793_01_6.jpg](img/B19793_01_6.jpg)
- en: '='
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: Figure 1.6 – Command Prompt after Java version check after installing Java
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 安装 Java 后检查 Java 版本后的命令提示符
- en: Installing Java on macOS
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Java
- en: 'To install Java on a macOS operating system, follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 操作系统上安装 Java，请按照以下步骤操作：
- en: Visit the **Oracle Java SE Downloads** page at [https://www.oracle.com/java/technologies/javase-jdk16-downloads.html](https://www.oracle.com/java/technologies/javase-jdk16-downloads.html).
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://www.oracle.com/java/technologies/javase-jdk16-downloads.html](https://www.oracle.com/java/technologies/javase-jdk16-downloads.html)
    上的 **Oracle Java SE 下载** 页面。
- en: Select the macOS installer (for example, **macOS** **x64 Installer**).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 macOS 安装程序（例如，**macOS** **x64 安装程序**）。
- en: Download the installer by clicking on the file link.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击文件链接下载安装程序。
- en: Run the downloaded installer (the `.dmg` file) and follow the on-screen instructions
    to complete the installation.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行下载的安装程序（`.dmg` 文件）并按照屏幕上的说明完成安装。
- en: 'Java should be automatically added to your system’s `PATH` environment variable.
    To verify the installation, open the Terminal and run the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java 应该自动添加到你的系统 `PATH` 环境变量中。为了验证安装，打开终端并运行以下命令：
- en: '[PRE2]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should see the version of Java you just installed, similar to *Figure 1**.2*.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能看到你刚刚安装的 Java 版本，类似于 *图 1**.2*。
- en: Installing Java on Linux
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Java
- en: 'Installing on Linux can be a little bit tricky to explain in a few steps. Different
    Linux distributions require different installation steps. Here, we will see how
    to install Java on a Linux Ubuntu system:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装可能需要几步才能解释清楚。不同的 Linux 发行版需要不同的安装步骤。在这里，我们将看看如何在 Linux Ubuntu 系统上安装
    Java：
- en: 'Open the **Terminal** and update your package repository by running the following
    command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **终端** 并通过运行以下命令更新你的软件包仓库：
- en: '[PRE3]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install the default JDK package by running the following command:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装默认的 JDK 软件包：
- en: '[PRE4]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To verify the installation, run the `java -version` command. You should see
    the version of Java you just installed.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证安装，运行 `java -version` 命令。你应该能看到你刚刚安装的 Java 版本。
- en: 'If you need to set the `JAVA_HOME` environment variable (which you won’t need
    for working your way through this book but will need for doing more complex Java
    projects), you first need to determine the installation path by running the following
    command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要设置 `JAVA_HOME` 环境变量（你不需要通过这本书的工作方式来完成，但你需要为更复杂的 Java 项目做这个），你首先需要通过运行以下命令确定安装路径：
- en: '[PRE5]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Take note of the path displayed (for example, `/usr/lib/jvm/java-19-openjdk-amd64/bin/java`).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下显示的路径（例如，`/usr/lib/jvm/java-19-openjdk-amd64/bin/java`）。
- en: 'Open the `/etc/environment` file in a text editor with root privileges:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用具有 root 权限的文本编辑器打开 `/etc/environment` 文件：
- en: '[PRE6]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following line at the end of the file, replacing the path with the
    path you noted in *Step 4* (excluding the `/``bin/java` part):'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的末尾添加以下行，将路径替换为你在 *步骤 4* 中记录的路径（不包括 `/``bin/java` 部分）：
- en: '[PRE7]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save and close the file. Then, run the following command to apply the changes:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。然后，运行以下命令以应用更改：
- en: '[PRE8]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, Java should be installed and configured on your Linux operating system.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Java 应该已经安装并配置在你的 Linux 操作系统上了。
- en: Running Java online
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线运行 Java
- en: If you don’t have access to a computer with macOS, Linux, or Windows, there
    are online solutions out there. The free options are not perfect but, for example,
    the **w3schools** solution for trying Java in the browser is not bad at all. There
    are quite a few of these out there.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有访问 macOS、Linux 或 Windows 计算机的权限，网上有一些解决方案。免费选项可能不是完美的，但例如，尝试在浏览器中运行 Java
    的 **w3schools** 解决方案并不差。网上有很多这样的解决方案。
- en: 'In order to work with multiple files there might be free tools out there, but
    most of them are paid. A currently free one that we would recommend is on [replit.com](http://replit.com).
    You can find it here: [https://replit.com/languages/java](https://replit.com/languages/java).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理多个文件，可能有一些免费工具可用，但大多数都是付费的。我们目前推荐的一个免费工具是 [replit.com](http://replit.com)。你可以在这里找到它：[https://replit.com/languages/java](https://replit.com/languages/java)。
- en: You need to sign up, but you can work for free with multiple files and save
    them on your account. This is a good alternative if you would for example only
    have a tablet to follow along with this book.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要注册，但你可以免费使用多个文件并将它们保存在你的账户上。如果你例如只有平板电脑来跟随这本书，这是一个很好的替代方案。
- en: 'Another option would be to use GitHub Codespaces: [https://github.com/codespaces](https://github.com/codespaces).
    They have the opportunity to enter a repository (for example the one we use for
    this book) and directly try the examples that are available in the repo and adjust
    them to try new things.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用 GitHub Codespaces：[https://github.com/codespaces](https://github.com/codespaces)。他们有机会进入一个仓库（例如我们用于这本书的仓库）并直接尝试仓库中可用的示例，并调整它们来尝试新事物。
- en: Having navigated through the installation of Java, it’s time to talk about compiling
    and running programs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航完 Java 的安装后，现在是时候讨论编译和运行程序了。
- en: Writing our first program
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的第一个程序
- en: Before diving into the process of compiling and running Java programs, let’s
    create a simple Java program using a basic text editor. This will help you understand
    the structure of a Java program and how to write and save a Java source code file.
    For this example, we will create a **“Hello world!” program** that will be used
    to demonstrate the process of compilation and execution.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入编译和运行 Java 程序的过程之前，让我们使用基本的文本编辑器创建一个简单的 Java 程序。这将帮助你理解 Java 程序的结构以及如何编写和保存
    Java 源代码文件。在这个例子中，我们将创建一个 **“Hello world！”程序**，用于演示编译和执行的过程。
- en: Hello world
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hello world
- en: You may have heard of `"Hello world!"` to the console. Writing this program
    will provide you with a very basic understanding of Java syntax, and it will help
    you to become familiar with the process of writing, compiling, and running Java
    code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经听说过向控制台输出 `"Hello world!"`。编写这个程序将帮助你获得对 Java 语法的基本理解，并且它将帮助你熟悉编写、编译和运行
    Java 代码的过程。
- en: Steps to create the program
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建程序的步骤
- en: 'Alright, let’s start coding. Here are the steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始编码。以下是步骤：
- en: First, open a basic text editor on your computer. **Notepad** on Windows, **TextEdit**
    on macOS, or **Gedit** on Linux are suitable options.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在你的电脑上打开一个基本的文本编辑器。Windows 上的 **记事本**、macOS 上的 **文本编辑器** 或 Linux 上的 **Gedit**
    都是合适的选择。
- en: 'Write the following Java code in your text editor:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中写下以下 Java 代码：
- en: '[PRE9]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the file as `HelloWorld.java` in a directory of your choice. Don’t forget
    the `.java` extension when saving the file. This indicates that the file contains
    Java source code. The code should not have `.txt` after `.java`. This happens
    sometimes in Windows, so make sure to not select the text file in the filetype
    dropdown.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为 `HelloWorld.java` 到你选择的目录中。保存文件时不要忘记 `.java` 扩展名。这表示文件包含 Java 源代码。代码不应该在
    `.java` 后面有 `.txt`。在 Windows 中有时会发生这种情况，所以请确保不要在文件类型下拉菜单中选择文本文件。
- en: TextEdit – file extension issues
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: TextEdit – 文件扩展名问题
- en: The later versions of macOS have some issues with **TextEdit**. You can’t save
    it as a Java file by default. In order to enable this, you need to go to **Format**
    | **Make Plain Text** and select **UTF-8**.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 的较新版本与 **TextEdit** 有点问题。默认情况下，你不能将其保存为 Java 文件。为了启用此功能，你需要转到 **格式** |
    **制作纯文本** 并选择 **UTF-8**。
- en: After this, you can save it as a `.java` file. You may still run into encoding
    errors; the problem is with the encoding, and fixing it might be a lot of effort
    missing the goal of this exercise. It might be better to download `HelloWorld.java`
    file from our GitHub repository.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，你可以将其保存为 `.java` 文件。你可能仍然会遇到编码错误；问题在于编码，修复它可能需要很多努力，但可能会错过这个练习的目标。可能更好的是，从我们的
    GitHub 仓库下载 `HelloWorld.java` 文件。
- en: Understanding the program
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解程序
- en: Let’s have a look at the code we just used. First of all, be aware that this
    is *case-sensitive*. That means that when you look at the code, most things will
    not work as you expect if you mix up lowercase and uppercase.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们刚刚使用的代码。首先，请注意，这是 *区分大小写的*。这意味着当你查看代码时，如果你混淆了大小写，大多数事情可能不会像你预期的那样工作。
- en: First, we created a class named `HelloWorld` with a `main` method. We’ll cover
    classes and methods in a lot more detail, of course. But a class is the fundamental
    building block of Java applications, and it can contain methods. Methods can be
    executed to do things – *things* being executing statements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个名为`HelloWorld`的类，其中包含一个`main`方法。当然，我们还会更详细地介绍类和方法。但类是Java应用程序的基本构建块，它可以包含方法。方法可以被执行以执行某些操作——*操作*是指执行语句。
- en: The `main` method is a special method. It is the entry point of our Java program
    and contains the code that will be executed when the program is run. The line
    with `System.out.println("Hello world!");` writes the `Hello world!` message to
    the console. Please note, that `println` stands for print line, so it uses a lowercase
    *L* and not an uppercase *i*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法是一个特殊的方法。它是我们的Java程序的入口点，包含当程序运行时将被执行的代码。带有`System.out.println("Hello
    world!");`的行将`Hello world!`消息写入控制台。请注意，`println`代表打印行，所以它使用小写的*L*，而不是大写的*i*。'
- en: With the `HelloWorld.java` file saved, we are now ready to move on to the next
    section, where we will learn how to compile and run the Java program using the
    command line and an IDE.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存了`HelloWorld.java`文件之后，我们现在可以继续到下一节，我们将学习如何使用命令行和IDE编译和运行Java程序。
- en: Compiling and running Java programs
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和运行Java程序
- en: Now that we have our first program written, let’s discuss how we can compile
    and run it. We will cover the basics of the compilation process, the role of the
    JVM, and how to compile and run Java code using the command line and an IDE.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了第一个程序，让我们讨论如何编译和运行它。我们将涵盖编译过程的基础、JVM的作用以及如何使用命令行和IDE编译和运行Java代码。
- en: Understanding the compilation process
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解编译过程
- en: The source code is written in a human-readable format using the Java programming
    language. Or at least, we hope that this is your opinion after this book. Before
    the code can be executed, it must be transformed into a format that the computer
    can understand. You already know that Java is a compiled language and that this
    process is called compilation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码是用Java编程语言编写的可读格式。至少，我们希望在这本书之后，这也是你的观点。在代码可以执行之前，它必须转换成计算机可以理解的格式。你已经知道Java是一种编译型语言，这个过程被称为编译。
- en: During compilation, the `.java` files) into bytecode (`.class` files). Once
    the bytecode is generated, it can be executed by the JVM. We have already learned
    that the JVM is the bytecode executer and that every platform has its own custom
    JVM enabling the WORA feature of Java.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中，`.java`文件被转换成字节码（`.class`文件）。一旦生成了字节码，它就可以由JVM执行。我们已经了解到JVM是字节码执行器，并且每个平台都有自己的定制JVM，这实现了Java的WORA特性。
- en: Compiling the code with javac on the command line
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行上的javac编译代码
- en: 'To compile a Java program using the command line, follow these steps:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用命令行编译Java程序，请按照以下步骤操作：
- en: Open a terminal (Command Prompt on Windows, Terminal on macOS or Linux).
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（Windows上的命令提示符，macOS或Linux上的终端）。
- en: Navigate to the directory containing your Java source code file (for example,
    the directory of your previously created `HelloWorld.java` file). In case you
    don’t know how to do that, this can be done with the `cd` command, which stands
    for *change directory*. For example, if I’m in a directory called `documents`
    and I want to step into the subfolder called `java programs`, I’d run the `cd
    "java programs"` command. The quotes are only needed when there are spaces in
    the directory name. It’s beyond the scope of this book to explain how to change
    directories for any platform. There are many excellent explanations for every
    platform on how to navigate the folder structure using the command line on the
    internet.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到包含你的Java源代码文件的目录（例如，你之前创建的`HelloWorld.java`文件的目录）。如果你不知道如何操作，可以使用`cd`命令，它代表*更改目录*。例如，如果我在一个名为`documents`的目录中，我想进入名为`java
    programs`的子文件夹，我会运行`cd "java programs"`命令。引号只在目录名中有空格时需要。本书的范围不涉及解释如何在任何平台上更改目录。互联网上有许多关于如何使用命令行在各个平台上导航文件夹结构的优秀解释。
- en: 'Once you’re in the folder containing the Java file, enter the following command
    to compile the Java source code:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你进入了包含Java文件的文件夹，请输入以下命令来编译Java源代码：
- en: '[PRE10]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the compilation is successful, a new file with the same name but a `.class`
    extension (for example, `HelloWorld.class`) will be created in the same directory.
    This file contains the bytecode that can be executed by the JVM.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果编译成功，将在同一目录下创建一个具有相同名称但`.class`扩展名的新文件（例如，`HelloWorld.class`）。这个文件包含可以被JVM执行的字节码。
- en: Let’s see how we can run this compiled code.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何运行这段编译后的代码。
- en: Running the compiled code with Java on the command line
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在命令行上使用Java运行编译后的代码
- en: 'To run the compiled Java program, follow these steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行编译后的Java程序，请按照以下步骤操作：
- en: In the terminal, make sure you are still in the directory containing the `.``class`
    file.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，确保你仍然位于包含`.class`文件的目录中。
- en: 'Enter the following command to execute the bytecode:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以执行字节码：
- en: '[PRE11]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The JVM will load and run the bytecode, and you should see the output of your
    program. In this case, the output will be as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: JVM将加载并运行字节码，你应该能看到程序的输出。在这种情况下，输出如下：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It’s pretty cool that we can write Java in Notepad and run it on the command
    line, but the life of a modern-day Java developer is a lot nicer. Let’s add IDEs
    to the mix and see this for ourselves.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在记事本中编写Java代码并在命令行中运行它，这确实很酷，但现代Java开发者的生活要舒适得多。让我们把IDE加入进来，亲自看看。
- en: Working with an IDE
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IDE进行工作
- en: Creating files in text editors is a little old-fashioned. Of course, you can
    still do it this way – it’s actually an excellent way of becoming an amazing programmer,
    but it’s also a very frustrating way. There are tools available to do quite a
    bit of the heavy work for us and to assist us while writing our code. These tools
    are called IDEs.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中创建文件有点过时了。当然，你仍然可以这样操作——这实际上是一个成为杰出程序员的极好方法，但也是一个非常令人沮丧的方法。有一些工具可以帮助我们完成大量繁重的工作，并在编写代码时提供协助。这些工具被称为集成开发环境（IDE）。
- en: What is an IDE?
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是IDE？
- en: An IDE is a software application that comes with everything you need to write,
    compile, run, and test your code. Using an IDE can make it easier to develop all
    sorts of programs. Not only that but also debugging and managing your code is
    easier. Comparatively, you can think of an IDE somewhat like Microsoft Office
    Word for me as I write this book. While I could have written it using Notepad,
    using Word provides significant advantages. It assists in checking for spelling
    errors and allows me to easily add and visualize layouts, among other helpful
    features. This analogy paints a picture of how an IDE doesn’t just provide a platform
    to write code but also offers a suite of tools to streamline and enhance your
    coding experience.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）是一个软件应用程序，它包含了编写、编译、运行和测试代码所需的一切。使用IDE可以使开发各种程序变得更加容易。不仅如此，调试和管理代码也更加方便。相对而言，你可以将IDE比作我写这本书时使用的Microsoft
    Office Word。虽然我可以用记事本写，但使用Word提供了显著的优势。它可以帮助检查拼写错误，并允许我轻松添加和可视化布局，以及其他有用的功能。这个类比描绘了IDE不仅仅提供了一个编写代码的平台，还提供了一套工具来简化和增强你的编码体验。
- en: Choosing an IDE
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择IDE
- en: When it comes to Java development, there are several IDEs available, each with
    its own set of features and capabilities. In this section, we will discuss the
    factors to consider when choosing an IDE and help you set up some popular Java
    IDEs. Throughout this book, we’ll be working with **IntelliJ**. Alternatives that
    are also great would be **VS Code** and **Eclipse**.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java开发中，有几种IDE可供选择，每种都有其独特的功能和能力。在本节中，我们将讨论选择IDE时需要考虑的因素，并帮助你设置一些流行的Java IDE。在整个书中，我们将使用**IntelliJ**。其他同样出色的选择包括**VS
    Code**和**Eclipse**。
- en: Factors to consider when choosing an IDE
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择IDE时需要考虑的因素
- en: Most modern IDEs have features such as code completion, debugging, version control
    integration, and support for third-party tools and frameworks. Some of them have
    better versions of these than others. Compare and contrast what you prefer when
    choosing or switching IDEs.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代IDE都具有代码补全、调试、版本控制集成以及支持第三方工具和框架等功能。其中一些在这方面比其他IDE做得更好。在选择或切换IDE时，比较和对比你偏好的功能。
- en: Some IDEs require a heavier system to run on than others. For example, VS Code
    is rather lightweight and IntelliJ is rather heavy. Also, VS Code can be used
    for many languages, including Java. It is uncommon to do a lot of other things
    with IntelliJ rather than Java. Choose an IDE that provides a balance between
    features and performance, especially if you have limited system resources.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 IDE 需要更强大的系统来运行，而其他 IDE 则较轻量。例如，VS Code 相对轻量，而 IntelliJ 则相对重量级。此外，VS Code
    可以用于多种语言，包括 Java。使用 IntelliJ 进行非 Java 开发的其他事情相对较少。选择一个在功能和性能之间提供平衡的 IDE，尤其是如果您系统资源有限的话。
- en: And of course, it’s possible that the IDE you’d prefer is not available for
    the platform you’re using. Make sure that it’s available and stable for your system.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您偏好的 IDE 可能不适合您所使用的平台。请确保它适用于您的系统，并且稳定可靠。
- en: Lastly, and very importantly, think about the costs. Some IDEs are free and
    others require a paid license. Luckily, many of the ones that require a paid license
    have a free edition for non-commercial use. So, make sure to also consider your
    budget and the licensing you need when choosing an IDE.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，非常重要的一点是，考虑成本。一些 IDE 是免费的，而其他 IDE 则需要付费许可证。幸运的是，许多需要付费许可证的 IDE 都提供了非商业用途的免费版。因此，在选择
    IDE 时，请确保考虑您的预算和所需的许可证。
- en: 'In the following subsections, we’ll walk you through the steps of setting up
    the three (currently) most common IDEs for Java development:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的子节中，我们将向您介绍设置当前（目前）最常用的三个 Java 开发 IDE 的步骤：
- en: IntelliJ
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IntelliJ
- en: Eclipse
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse
- en: Visual Studio Code
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Note
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We’ll be working with IntelliJ for the rest of this book.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的剩余部分，我们将使用 IntelliJ。
- en: Setting up IntelliJ
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 IntelliJ
- en: So, let’s start with that one. IntelliJ IDEA is a popular Java IDE that was
    developed by **JetBrains**. It offers both a free **Community Edition** and a
    paid **Ultimate Edition**. It provides a wide range of features, including intelligent
    code completion, debugging tools, version control integration, and support for
    various Java frameworks.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们从它开始。IntelliJ IDEA 是由 **JetBrains** 开发的一款流行的 Java 集成开发环境（IDE）。它提供免费 **社区版**
    和付费 **专业版**。它提供了一系列功能，包括智能代码补全、调试工具、版本控制集成以及支持各种 Java 框架。
- en: 'Here are the steps for installing IntelliJ:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是安装 IntelliJ 的步骤：
- en: Visit the IntelliJ IDEA download page at [https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/).
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 IntelliJ IDEA 下载页面，请点击[https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)。
- en: 'Choose the edition you prefer: the free **Community Edition** or the paid **Ultimate
    Edition**. For beginners, the Community Edition is truly great already.'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您偏好的版本：免费的 **社区版** 或付费的 **专业版**。对于初学者来说，社区版已经非常优秀了。
- en: Download the installer for your operating system (Windows, macOS, or Linux).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于您操作系统的安装程序（Windows、macOS 或 Linux）。
- en: Run the installer and follow the instructions to complete the installation.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，并按照说明完成安装。
- en: Launch **IntelliJ IDEA**. If you’re using the Ultimate Edition, you may need
    to enter your JetBrains account credentials or a license key.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **IntelliJ IDEA**。如果您使用的是专业版，您可能需要输入您的 JetBrains 账户凭证或许可证密钥。
- en: On the **Welcome** screen, you can create a new **project**, import an existing
    **project**, or explore the available tutorials and documentation.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **欢迎** 界面中，您可以创建一个新的 **项目**、导入现有的 **项目**，或探索可用的教程和文档。
- en: Setting up Eclipse
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Eclipse
- en: Eclipse is a free, open source Java IDE that is widely used in the Java community.
    It has been around for a really long time already and quite a lot of companies
    work with it still. It offers a variety of features, just like IntelliJ. Eclipse
    can be customized to suit your needs, but its interface may be less intuitive
    than other IDEs.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 是一个免费的开源 Java 集成开发环境（IDE），在 Java 社区中广泛使用。它已经存在很长时间了，并且许多公司仍在使用它。它提供了各种功能，就像
    IntelliJ 一样。Eclipse 可以根据您的需求进行定制，但其界面可能不如其他 IDE 直观。
- en: 'To set up Eclipse, follow these steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 Eclipse，请按照以下步骤操作：
- en: Visit the Eclipse download page at [https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Eclipse 下载页面，请点击[https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)。
- en: Download the Eclipse installer for your operating system (Windows, macOS, or
    Linux).
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于您操作系统的 Eclipse 安装程序（Windows、macOS 或 Linux）。
- en: Run the installer and select **Eclipse IDE for Java Developers** from the list
    of available packages.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，并从可用包列表中选择 **Eclipse IDE for Java Developers**。
- en: Choose an installation folder and follow the instructions to complete the installation.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择安装文件夹，并按照说明完成安装。
- en: Launch **Eclipse** and select a workspace directory. This is where your projects
    and settings will be stored.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **Eclipse** 并选择工作区目录。你的项目和设置将存储在这里。
- en: On the **Welcome** screen, you can create a new Java **project**, import an
    existing **project**, or explore the available tutorials and documentation.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **欢迎** 界面中，您可以创建一个新的 Java **项目**，导入现有的 **项目**，或探索可用的教程和文档。
- en: Setting up Visual Studio Code
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Visual Studio Code
- en: Visual Studio Code, often referred to as VS Code, is a lightweight, free, and
    open source code editor developed by Microsoft. It’s incredibly popular for all
    sorts of tasks because it supports a wide range of programming languages. It is
    a popular choice for developers who prefer a more minimalist and fast-performing
    environment. All sorts of additions can be added with the use of extensions.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code，通常简称为 VS Code，是由微软开发的一个轻量级、免费且开源的代码编辑器。它因其支持广泛的编程语言而受到各种任务的欢迎。它是那些更喜欢更简约和快速性能环境的开发者的首选。可以通过扩展添加各种功能。
- en: 'Here are the steps for installing VS Code and preparing it for Java development:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是安装 VS Code 并为其 Java 开发做准备的分步指南：
- en: Visit the Visual Studio Code download page at **https://code.visualstudio.com/download**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Visual Studio Code 下载页面 **https://code.visualstudio.com/download**。
- en: Download the installer for your operating system (Windows, macOS, or Linux).
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于您操作系统的安装程序（Windows、macOS 或 Linux）。
- en: Run the installer and follow the on-screen instructions to complete the installation.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，按照屏幕上的说明完成安装。
- en: Launch Visual Studio Code.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio Code。
- en: Open the **Extensions** view by clicking on the *Extensions* icon (four squares)
    on the left side of the window.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击窗口左侧的 *扩展* 图标（四个方块）打开 **扩展** 视图。
- en: Search for **Java Extension Pack** in the *Extensions Marketplace* and click
    the **Install** button. This extension pack includes various extensions for Java
    development, such as **Language Support for Java (TM) by Red Hat**, **Debugger
    for Java**, and **Maven** **for Java**.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *扩展市场* 中搜索 **Java 扩展包** 并点击 **安装** 按钮。此扩展包包括各种用于 Java 开发的扩展，例如 **Red Hat 提供的
    Java (TM) 语言支持**、**Java 调试器** 和 **Java 的 Maven**。
- en: With the **Java Extension Pack** installed, you can now create or import Java
    projects. If it doesn’t load directly, you may need to reopen VS Code.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了 **Java 扩展包** 后，您现在可以创建或导入 Java 项目。如果它没有直接加载，您可能需要重新打开 VS Code。
- en: Now that you’ve set up an IDE, let’s create and run a program with it.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置了一个 IDE，让我们用它来创建和运行一个程序。
- en: Creating and running a program with an IDE
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IDE 创建和运行程序
- en: Working with an IDE such as IntelliJ as compared to working with a plain text
    editor is a breeze. We’re now going to guide you through creating, running, and
    debugging a program with the use of IntelliJ. We’ll create the same program as
    we did when we were using the text editor.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用纯文本编辑器相比，使用 IDE（如 IntelliJ）工作要容易得多。现在我们将指导您使用 IntelliJ 创建、运行和调试程序。我们将创建与使用文本编辑器时相同的程序。
- en: Creating a program in an IDE
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 IDE 中创建程序
- en: When you use an IDE to type code, you’ll see that it helps you to complete your
    code constantly. This is considered very helpful by most people, and we hope you’ll
    enjoy this feature too.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 IDE 编写代码时，你会看到它不断地帮助你完成代码。大多数人认为这非常有帮助，我们希望您也会喜欢这个功能。
- en: 'In order to get started with IntelliJ, we first need to create a project. Here
    are the steps for creating our `Hello World` program again:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用 IntelliJ，我们首先需要创建一个项目。以下是再次创建我们的 `Hello World` 程序的步骤：
- en: Launch IntelliJ IDEA and click on **New Project** from the **Welcome** screen
    or go to **File** | **New** | **Project**.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 IntelliJ IDEA 并从 **欢迎** 界面点击 **新建项目**，或转到 **文件** | **新建** | **项目**。
- en: '![Figure 1.7 – Initial screen of IntelliJ](img/B19793_01_7.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – IntelliJ 的初始屏幕](img/B19793_01_7.jpg)'
- en: Figure 1.7 – Initial screen of IntelliJ
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – IntelliJ 的初始屏幕
- en: Name the project `HelloWorld`.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为 `HelloWorld`。
- en: Select **Java** for the language and make sure that the correct project SDK
    is selected. Click **Next**.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Java**作为语言，并确保已选择正确的项目 SDK。点击**下一步**。
- en: Don’t tick the **Create Git repository** box and don’t tick the **Add sample**
    **code** box.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要勾选**创建 Git 仓库**复选框，也不要勾选**添加示例** **代码**复选框。
- en: Click **Create** to create the project.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 以创建项目。
- en: '![Figure 1.8 – Wizard to create a new project](img/B19793_01_8.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 创建新项目的向导](img/B19793_01_8.jpg)'
- en: Figure 1.8 – Wizard to create a new project
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 创建新项目的向导
- en: Once the project is created, expand the `src` folder in the `src` folder and
    select **New** | **Java Class**. If there is another folder underneath it, there
    is probably a main folder with a Java folder in there. Right-click on the Java
    folder and select **New** | **Java Class**. If it’s called something differently,
    just right-click on the blue folder.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了项目，展开 `src` 文件夹中的 `src` 文件夹，并选择 **新建** | **Java 类**。如果其下有另一个文件夹，那么可能有一个包含
    Java 文件夹的主文件夹。右键单击 Java 文件夹并选择 **新建** | **Java 类**。如果名称不同，只需右键单击蓝色文件夹。
- en: '![Figure 1.9 – Create a new Java Class](img/B19793_01_9.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 创建新的 Java 类](img/B19793_01_9.jpg)'
- en: Figure 1.9 – Create a new Java Class
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 创建新的 Java 类
- en: Name the new class `HelloWorld` and click `.java` file with the class definition.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为 `HelloWorld` 并单击带有类定义的 `.java` 文件。
- en: '![Figure 1.10 – Call the class ”HelloWorld”](img/B19793_01_10.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 调用类 “HelloWorld”](img/B19793_01_10.jpg)'
- en: Figure 1.10 – Call the class ”HelloWorld”
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – 调用类 “HelloWorld”
- en: 'In the `HelloWorld` class, write our `main` method:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HelloWorld` 类中编写我们的 `main` 方法：
- en: '[PRE13]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Figure 1.11 – Code in HelloWorld.java](img/B19793_01_11.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – HelloWorld.java 中的代码](img/B19793_01_11.jpg)'
- en: Figure 1.11 – Code in HelloWorld.java
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – HelloWorld.java 中的代码
- en: Now that we’ve written our first program, make sure that it is saved. By default,
    IntelliJ automatically saves our files. Let’s see whether we can run the program
    as well.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经编写了第一个程序，请确保它已保存。默认情况下，IntelliJ 会自动保存我们的文件。让我们看看我们是否也能运行这个程序。
- en: Running your program
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Admittedly, we had to take a few extra steps to create our program. We had
    to create a project first. The good news is, running the program is easier! Here’s
    how to do it:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们创建程序时不得不采取一些额外步骤，首先需要创建一个项目。好消息是，运行程序更容易！以下是操作方法：
- en: If you haven’t done so, make sure your changes are saved by pressing *Ctrl*
    + *S* (Windows/Linux) or *Cmd* + *S* (macOS). By default, auto-save is enabled.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请通过按 *Ctrl* + *S*（Windows/Linux）或 *Cmd* + *S*（macOS）确保保存您的更改。默认情况下，自动保存已启用。
- en: To run the program, right-click anywhere in the `HelloWorld` class and select
    `Run 'HelloWorld.main()'`. Alternatively, you can click the green triangle icon
    next to the main method and select `Run 'HelloWorld.main()'`. IntelliJ will compile
    and run the program.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行程序，请右键单击 `HelloWorld` 类中的任何位置，并选择 `Run 'HelloWorld.main()'`。或者，您也可以单击主方法旁边的绿色三角形图标，并选择
    `Run 'HelloWorld.main()'`。IntelliJ 将编译并运行程序。
- en: '![Figure 1.12 – Running the program](img/B19793_01_12.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 运行程序](img/B19793_01_12.jpg)'
- en: Figure 1.12 – Running the program
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 运行程序
- en: Verify that the output of the program, `"Hello world!"`, is displayed in the
    **Run tool** window at the bottom of the screen.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证程序输出 `"Hello world!"` 是否显示在屏幕底部的 **运行工具** 窗口中。
- en: '![Figure 1.13 – Output of the program](img/B19793_01_13.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 程序的输出](img/B19793_01_13.jpg)'
- en: Figure 1.13 – Output of the program
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 程序的输出
- en: Saved and unsaved files
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 已保存和未保存的文件
- en: In most IDEs, you can tell whether a file is saved or not by looking at the
    tab of the open file. It has a dot or an asterisk next to it if it isn’t saved.
    The dot is missing if it has been saved.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数集成开发环境（IDE）中，你可以通过查看打开文件的标签来了解文件是否已保存。如果文件未保存，其旁边会有一个点或星号。如果已保存，则点会缺失。
- en: Debugging a program
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序调试
- en: 'Our program is quite easy right now, but we may want to step through our program
    line by line. We can do that by debugging the program. Let’s give our file a little
    extra content for debugging. This way we can see how to inspect variables, understand
    the execution flow, and, this way, find the flaws in our code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的程序相当简单，但我们可能想逐行逐步执行程序。我们可以通过调试程序来实现这一点。让我们给我们的文件添加一些额外的调试内容。这样我们可以看到如何检查变量、理解执行流程，以及这样找到我们代码中的缺陷：
- en: 'Update the `HelloWorld.java` file with the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `HelloWorld.java` 文件：
- en: '[PRE14]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this updated version of the program, we added a new method called `doubleNumber`,
    which takes an integer as input and returns its double. In the `main` method,
    we call this method and print the result. Don’t worry if you don’t fully get this
    – we just want to show you how you can step through your code.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个程序的更新版本中，我们添加了一个名为 `doubleNumber` 的新方法，它接受一个整数作为输入并返回其两倍。在 `main` 方法中，我们调用此方法并打印结果。如果您不完全理解这一点，请不要担心——我们只是想向您展示如何逐步执行您的代码。
- en: Save your changes by pressing *Ctrl* + *S* (Windows/Linux) or *Cmd* + *S* (macOS).
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *S*（Windows/Linux）或 *Cmd* + *S*（macOS）保存您的更改。
- en: Now, let’s debug the updated program.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们调试更新后的程序。
- en: Set a breakpoint on the line you want to pause the execution at by clicking
    in the gutter area next to the line number in the editor. A red dot will appear,
    indicating a breakpoint. For example, set a breakpoint at the line `int doubled
    = doubleNumber(number);`. An example is shown in *Figure 1**.7*.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在编辑器中行号旁边的空白区域单击来在你想暂停执行的行上设置断点。会出现一个红色圆点，表示断点。例如，在行`int doubled = doubleNumber(number);`上设置断点。例如，请参阅*图1.7*。
- en: '![Figure 1.14 – Adding a breakpoint on line 7](img/B19793_01_14.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图1.14 – 在第7行添加断点](img/B19793_01_14.jpg)'
- en: Figure 1.14 – Adding a breakpoint on line 7
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 – 在第7行添加断点
- en: Start the debugger by right-clicking in the `HelloWorld` class and selecting
    `Debug 'HelloWorld.main()'` or you can click the green play icon next to the `main`
    method and select the **debug** option. IntelliJ will compile and start the program
    in debug mode.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`HelloWorld`类上右键单击并选择`Debug 'HelloWorld.main()'`或点击`main`方法旁边的绿色播放图标并选择**调试**选项来启动调试器。IntelliJ将编译并以调试模式启动程序。
- en: When the line with the breakpoint is going to be executed, the program will
    pause. During the pause, you can use the **Debug** tool window, which will appear
    at the bottom of the screen. Here, you can view the state of the program, including
    the values of local variables and fields. An example is shown in *Figure 1**.8*.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当即将执行带有断点的行时，程序将暂停。在暂停期间，你可以使用位于屏幕底部的**调试**工具窗口。在这里，你可以查看程序的状态，包括局部变量和字段的值。例如，请参阅*图1.8*。
- en: "![Figure 1.15 – Debug tool window in IntelliJ\uFEFF. The intent of this screenshot\
    \ is to show the layout and text readability is not required.](img/B19793_01_15.jpg)"
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图1.15 – IntelliJ中的调试工具窗口。此截图的目的是显示布局，不需要考虑文本可读性。](img/B19793_01_15.jpg)'
- en: Figure 1.15 – Debug tool window in IntelliJ. The intent of this screenshot is
    to show the layout and text readability is not required.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15 – IntelliJ中的调试工具窗口。此截图的目的是显示布局，不需要考虑文本可读性。
- en: Use the step controls in the **Debug** tool window to step through the code
    (blue arrow with the angle in *Figure 1**.8*), step into the method that is being
    called (blue arrow down), or continue the execution (green arrow on the left in
    *Figure 1**.8*).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**调试**工具窗口中的步骤控件来逐步执行代码（*图1.8*中的蓝色箭头带有角度），进入被调用的方法（蓝色箭头向下），或继续执行（*图1.8*中左侧的绿色箭头）。
- en: By following these steps, you can debug Java programs using IntelliJ IDEA and
    step through the code to see what is happening. This is something that will come
    in handy to understand what is going on in your code. This process will be similar
    in other Java IDEs, although the specific steps and interface elements may vary.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，你可以使用IntelliJ IDEA调试Java程序并逐步执行代码以查看正在发生的事情。这将在理解你的代码中派上用场。这个过程在其他Java
    IDE中也将类似，尽管具体的步骤和界面元素可能会有所不同。
- en: Exercises
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'And that’s all theory for this chapter! So, roll up those sleeves, and let’s
    dive into your first day at Mesozoic Eden. Welcome aboard! Mesozoic Eden is a
    famous zoo where dinosaurs live that have been brought to live with high end genetic
    manipulation techniques. Here are some exercises for you to test your knowledge
    so far:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章的所有理论！所以，卷起袖子，让我们开始你的中生代伊甸园的第一天。欢迎加入！中生代伊甸园是一个著名的动物园，那里的恐龙是通过高端基因操控技术被带到这里生活的。以下是一些练习，以测试你到目前为止的知识：
- en: 'Your first task involves welcoming our guests. Modify the following code snippet
    so that it outputs `"Welcome to` `Mesozoic Eden"`:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的第一个任务涉及欢迎我们的客人。修改以下代码片段，使其输出`"Welcome to" "Mesozoic Eden"`：
- en: '[PRE15]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Complete the following programs by filling out the blanks so that it prints
    out your name and the position you want to have in Mesozoic Eden 5 years from
    now:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过填写空白处完成以下程序，以便打印出你希望在5年后的中生代伊甸园拥有的名字和职位：
- en: '[PRE16]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We’ve received some questions about opening hours. Complete the following program
    so that it prints the park’s opening and closing hours:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们收到了一些关于开放时间的问题。完成以下程序，以便打印出公园的开放和关闭时间：
- en: '[PRE17]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a Java project with a package named `dinosaur`. You can create a package
    by right-clicking on the `src/main/java` folder, selecting “new” and choosing
    “package”.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`dinosaur`的Java项目。你可以通过在`src/main/java`文件夹上右键单击，选择“新建”并选择“包”来创建一个包。
- en: 'Modify the code from exercise 1 so that it prints out `"Welcome, [YourName]
    to Mesozoic Eden!"`, where `[YourName]` is replaced by, surprise surprise, your
    name. Bonus: try to create a separate String variable as shown in the second and
    third exercises.'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改练习1中的代码，使其打印出`"Welcome, [YourName] to Mesozoic Eden!"`，其中`[YourName]`将被惊喜惊喜地替换为你的名字。加分项：尝试创建一个单独的String变量，如第二和第三练习所示。
- en: Some guests reported feeling unsafe near the T-Rex. Let’s solve this by adding
    another `System.out.println` to the program of exercise 5\. It should print the
    phrase `"Mesozoic Eden is safe and secure."` after the welcome message.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些游客报告说在霸王龙附近感到不安全。让我们通过在练习5的程序中添加另一个`System.out.println`来解决这一问题。它应在欢迎信息后打印短语`"Mesozoic
    Eden is safe and secure."`。
- en: Project
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目
- en: Create a program that simulates a sign at the entrance of Mesozoic Eden. The
    sign is simulated by printing output to the console. The sign should display a
    welcome message, the opening and closing hours, and a short safety message.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个程序，模拟Mesozoic Eden入口处的标志。这个标志通过向控制台打印输出进行模拟。标志应显示欢迎信息、营业时间和简短的安全信息。
- en: Summary
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You’ve made it through the first chapter! And we’ve done a lot already. We kicked
    off by exploring Java’s key features, such as its OOP approach, the (once unique)
    WORA principle, its compiled nature, and the super-helpful automatic memory management.
    These features make Java an incredibly versatile and powerful language – a great
    choice for different programming tasks, such as web development, desktop apps,
    mobile apps, and so much more!
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了第一章！我们已经做了很多。我们首先探索了Java的关键特性，例如它的OOP方法、（曾经独特的）WORA原则、它的编译性质以及超级有用的自动内存管理。这些特性使Java成为一个极其灵活且强大的语言——是不同编程任务（如Web开发、桌面应用、移动应用等等）的一个很好的选择！
- en: 'Next, we walked you through the process of installing Java on various platforms:
    Windows, macOS, and Linux. We also discussed how to check whether Java is already
    installed on your system. After this part, you can be sure that you have all the
    essential tools to kick off your Java programming adventure.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们向您介绍了在Windows、macOS和Linux等平台上安装Java的过程。我们还讨论了如何检查Java是否已经安装在你的系统上。在这一部分之后，你可以确信你已经拥有了启动Java编程冒险的所有必需工具。
- en: After you had Java all setup, we demystified the compilation process and introduced
    you to the JVM, a vital component of the Java ecosystem that enables the portability
    of Java code. We then demonstrated how to compile and run Java code using the
    `javac` and `java` command-line tools. These tools lay the groundwork for working
    with Java programs at their core.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在你设置好Java之后，我们解密了编译过程，并介绍了JVM，它是Java生态系统的一个关键组件，使得Java代码具有可移植性。然后我们演示了如何使用`javac`和`java`命令行工具编译和运行Java代码。这些工具为使用Java程序的核心工作奠定了基础。
- en: Of course, using the command line for this is great. But nowadays, we more often
    work with an IDE, and we can just press a button to do all this. So, we mentioned
    several advantages and nice features of working with an IDE, such as code completion,
    debugging, and project management. We discussed the factors to weigh up when choosing
    an IDE and provided guidance on setting up popular IDEs such as IntelliJ IDEA,
    Eclipse, and VS Code. In this book, we’ll be using IntelliJ throughout for the
    examples.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，使用命令行来做这个很好。但如今，我们更经常使用IDE，我们只需按一个按钮就可以完成所有这些。因此，我们提到了使用IDE的一些优点和良好特性，例如代码补全、调试和项目管理。我们讨论了在选择IDE时需要权衡的因素，并提供了设置流行的IDE（如IntelliJ
    IDEA、Eclipse和VS Code）的指导。在这本书中，我们将使用IntelliJ作为示例。
- en: After covering the essentials of IDEs, we delved into creating and running a
    Java program using an IDE. We explained the structure of a typical Java program
    and guided you, step by step, through the process of creating, running, and debugging
    your very first Java program.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了IDE的基础知识之后，我们深入探讨了使用IDE创建和运行Java程序的过程。我们解释了典型Java程序的结构，并逐步引导你创建、运行和调试你的第一个Java程序。
- en: After this, you were ready for the first hands-on project. And now you’re here!
    All set and ready to take the next step on your Java journey. This next step will
    be working with variables and primitive data types. Good luck!
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，你准备好进行第一个实战项目了。现在你在这里！一切准备就绪，准备在Java之旅上迈出下一步。这一步将是处理变量和基本数据类型。祝你好运！
