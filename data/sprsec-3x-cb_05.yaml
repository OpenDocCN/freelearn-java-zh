- en: Chapter 5. Spring Security with GWT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用GWT的Spring Security
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security with GWT authentication using Spring Security Beans
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security Beans进行GWT身份验证的Spring Security
- en: Form-based authentication with GWT and Spring Security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行基于表单的身份验证
- en: Basic authentication with GWT and Spring Security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行基本身份验证
- en: Digest authentication with GWT and Spring Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行摘要身份验证
- en: Database authentication with GWT and Spring Security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行数据库身份验证
- en: LDAP authentication with GWT and Spring Security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行LDAP身份验证
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Google web development tool kit** (**GWT**)provides a standard framework
    for developing java web applications. GWT was developed to create rich Internet
    applications and will be a good option if you want to go for cross-browser compatibility.
    Modern browsers, for example, Mozilla and Chrome, provide GWT plugins which can
    be installed on all browsers. There are various plugins available for different
    IDEs including Eclipse, NetBeans, and many others. These plugins have increased
    the speed of development. The GWT plugin for Eclipse comes with an internal Jetty
    server on which applications are automatically deployed. GWT also reduces dependency
    on javascript developers since the GWT code is converted into all browser compatible
    javascript and HTML by the GWT compiler which comes with the GWT-SDK.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google Web开发工具包**（**GWT**）提供了一个用于开发Java Web应用程序的标准框架。GWT旨在创建丰富的互联网应用程序，并且如果您想要实现跨浏览器兼容性，它将是一个很好的选择。现代浏览器，例如Mozilla和Chrome，提供了可以安装在所有浏览器上的GWT插件。不同的IDE包括Eclipse、NetBeans和许多其他IDE都提供了各种插件。这些插件提高了开发速度。Eclipse的GWT插件带有一个内部Jetty服务器，应用程序会自动部署在上面。GWT还减少了对javascript开发人员的依赖，因为GWT代码通过GWT编译器转换为所有浏览器兼容的javascript和HTML。'
- en: In this chapter we will demonstrate Spring Security with GWT integration using
    various approaches. Let's first do a basic setup for it. It's all about downloading
    the plugin and creating a sample GWT project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示使用各种方法集成GWT的Spring Security。首先，让我们进行基本设置。这就是下载插件并创建一个示例GWT项目。
- en: Spring Security with GWT authentication using Spring Security Beans
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Security Beans进行GWT身份验证的Spring Security
- en: So far in all our previous demonstrations we have been giving the configurations
    in the `applicationContext.xml` file. In the following recipe we will take a different
    approach. In this approach we will see how we can use the authentication provider
    interface and the authentication interface available in the Spring Security API
    to do the authentication.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们之前的所有演示中，我们一直在`applicationContext.xml`文件中提供配置。在下面的示例中，我们将采用不同的方法。在这种方法中，我们将看到如何使用Spring
    Security API中可用的身份验证提供程序接口和身份验证接口来进行身份验证。
- en: GWT plugin by default will create a greetings application which will greet the
    user by accepting the user name. Our goal is to apply security on top of this.
    We would like to prompt the user with Spring Security login page on startup and
    then take the user into the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，GWT插件将创建一个问候应用程序，该应用程序将通过接受用户名来向用户问候。我们的目标是在此基础上应用安全性。我们希望在启动时提示用户输入Spring
    Security登录页面，然后将用户带入应用程序。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Download Eclipse Indigo from: [http://dl.google.com/eclipse/plugin/3.7](http://dl.google.com/eclipse/plugin/3.7).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://dl.google.com/eclipse/plugin/3.7](http://dl.google.com/eclipse/plugin/3.7)下载Eclipse
    Indigo。
- en: 'If you are using a different one go for: [https://developers.google.com/eclipse/docs/download](https://developers.google.com/eclipse/docs/download).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用不同的插件，请访问：[https://developers.google.com/eclipse/docs/download](https://developers.google.com/eclipse/docs/download)。
- en: Create a GWT web project in Eclipse—this will generate a default GWT application
    that will greet the user.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个GWT Web项目-这将生成一个默认的GWT应用程序，用于向用户问候。
- en: 'In any GWT application you can see the following modules:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何GWT应用程序中，您可以看到以下模块：
- en: '**Configuration module**: This will have the `gwt.xml` file'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置模块**：这将有`gwt.xml`文件'
- en: '**Client**: This will have two interfaces-async interface and another interface
    that extends *RemoteService* interface'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：这将有两个接口-异步接口和另一个接口，它扩展了*RemoteService*接口'
- en: '**Server**: Will have the `Implementation` class which implements the client
    interface and extends the remote Service Servlet'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：将具有实现客户端接口并扩展远程服务Servlet的`Implementation`类'
- en: '**Shared**: This will have classes to check for data validation'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享**：这将有用于数据验证的类'
- en: '**Test**: You can add your junit test cases here'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：您可以在这里添加您的junit测试用例'
- en: '**War**: This will have the `web-inf` folder'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**War**：这将有`web-inf`文件夹'
- en: Run the application on the internal server. You will get a URL.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内部服务器上运行应用程序。您将获得一个URL。
- en: Open the URL in the Mozilla Firefox browser; you will get a prompt to download
    the GWT plugin and install it.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mozilla Firefox浏览器中打开URL；您将收到一个提示，要下载GWT插件并安装它。
- en: You will be prompted to input a user name and, when entered, you will get a
    dialog box which will give the user details.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将被提示输入用户名，输入后，您将收到一个对话框，其中将显示用户详细信息。
- en: Our aim is to apply security on startup of the application, that is, we would
    like to identify the user who is accessing the GWT application.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的目标是在应用程序启动时应用安全性，也就是说，我们希望识别访问GWT应用程序的用户。
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`applicationContext.xml`文件。必须将其命名为`applicationContext`，否则我们将在控制台中收到错误消息。
- en: Edit the `web.xml` file with spring listeners.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用spring监听器编辑`web.xml`文件。
- en: 'Make `sure` the `war/web-inf/lib` folder has the following JAR files:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保`war/web-inf/lib`文件夹中有以下JAR文件：
- en: '`gwt-servlet`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gwt-servlet`'
- en: '`spring-security-config-3.1.4.Release`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-config-3.1.4.Release`'
- en: '`spring-security-core-3.1.4.Release`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-core-3.1.4.Release`'
- en: '`spring-security-web-3.1.4.Release`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-security-web-3.1.4.Release`'
- en: '`org.spring-framework.core-3.1.4.Release`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.spring-framework.core-3.1.4.Release`'
- en: '`org.spring-framework.context.support-3.1.4.Release`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.spring-framework.context.support-3.1.4.Release`'
- en: '`org.springframework.context-3.1.4.Release`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.context-3.1.4.Release`'
- en: '`org.springframework.expression-3.1.4.Release`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.expression-3.1.4.Release`'
- en: '`org.springframework.aop-3.1.4.Release`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.aop-3.1.4.Release`'
- en: '`org.springframework.aspects-3.1.4.Release`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.aspects-3.1.4.Release`'
- en: '`org.springframework.asm-3.1.4.Release`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.asm-3.1.4.Release`'
- en: '`org.springframework.web-3.1.4.Release`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web-3.1.4.Release`'
- en: '`org.springframework.web.servelet-3.1.4.Release`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.servelet-3.1.4.Release`'
- en: '`org.springframework.instrument-3.1.4.Release`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.instrument-3.1.4.Release`'
- en: '`org.springframework.instrument-tomcat-3.1.4.Release`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.instrument-tomcat-3.1.4.Release`'
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `Web.xml` file with Spring Listener and Spring Filter:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring监听器和Spring过滤器更新`Web.xml`文件：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can observe that we haven't configured the `<context-param>` as in our previous
    applications. Spring will automatically look out for the `applicationContext.xml`
    file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观察到我们没有像在以前的应用程序中那样配置`<context-param>`。Spring将自动寻找`applicationContext.xml`文件。
- en: 'Edit the `applicationContext.xml` file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This configuration will also give hints to the next steps. You can observe that
    we have not configured any `<login-page>` or its URL. We have only given URLs
    that need security. The `<authentication-provider>` is mapped with a custom class.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置也会给出下一步的提示。您可以观察到我们没有配置任何`<login-page>`或其URL。我们只给出了需要安全的URL。`<authentication-provider>`与自定义类映射。
- en: We have also configured two Beans that are the listener and authenticator.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还配置了两个Bean，即监听器和认证者。
- en: Spring's context API allows us to create listeners to track events in the application.
    If you recall, we had also used listeners phase listener in our JSF application
    to track the security-related events and errors.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的上下文API允许我们创建监听器来跟踪应用程序中的事件。如果您回忆一下，我们还在我们的JSF应用程序中使用了监听器阶段监听器来跟踪与安全相关的事件和错误。
- en: The `PacktGWTAuthenticator` implements the authentication provider interfaces.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`PacktGWTAuthenticator`实现了认证提供程序接口。'
- en: 'Create an authenticator using the Spring authentication provider:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring认证提供程序创建一个认证者：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `authenticate ()` and `supports ()` are the authentication provider-interface
    methods. The User class will load the users.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`authenticate()`和`supports()`是认证提供程序接口方法。用户类将加载用户。
- en: 'Create a `User` class to load the users:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`User`类来加载用户：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above class has few getters and setters. And a method to load users.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类有一些getter和setter。还有一个加载用户的方法。
- en: 'Implementing the Spring authentication class to get the user information:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现Spring认证类以获取用户信息：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Authentication interface handles the user details, principal, and credentials.
    The authentication provider uses this class to pass the role information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 认证接口处理用户详细信息、主体和凭据。认证提供程序使用此类传递角色信息。
- en: 'Implement the interfaces declared in the GWT client package:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现在GWT客户端包中声明的接口：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `authenticate Server` method implementation is found in this class. This
    will print the debug statements to check whether the user has logged in or not.
    If logged in, then we will have to get the principal and user details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中找到`authenticate Server`方法的实现。这将打印调试语句以检查用户是否已登录。如果已登录，那么我们将必须获取主体和用户详细信息。
- en: 'Use the Spring listeners to track events:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring监听器跟踪事件：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This class implements the Springs application listener which is of the type
    `AbstractAuthenticationEvent`. We are capturing the authentication event and printing
    it out in the console; you can also use logger to track such events.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该类实现了Springs应用程序监听器，类型为`AbstractAuthenticationEvent`。我们捕获认证事件并在控制台中打印出来；您也可以使用记录器来跟踪此类事件。
- en: 'Update the GWT class on `ModuleLoad()`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ModuleLoad()`上更新GWT类：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add this code in the end of the `onModuleLoad` method. This is similar to registering
    our service on load.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onModuleLoad`方法的末尾添加此代码。这类似于在加载时注册我们的服务。
- en: 'Edit the `PacktAuthenticationService` class:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`PacktAuthenticationService`类：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://127.0.0.1:8888/Xyz.html?gwt.codesvr=127.0.0.1:9997`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8888/Xyz.html?gwt.codesvr=127.0.0.1:9997`'
- en: The user will be redirected to the Spring Security internal login page. When
    the user enters the **User** and **Password** input and hits submit, the `PacktGWTAuthenticator`
    class loads the users from the `Users` class and the inputs are compared. If the
    map has the same credentials as the one the user has provided, authorization is
    initiated and, on success, the user is directed to the GWT application. The example
    has used Spring Security's `Authentication Provider` and `Authenticator Bean`
    classes explicitly by implementing the interfaces and the `application-context.xml`
    invokes the `PacktGWTAuthenticator` and `PacktGWTAuthentication implementation`
    classes to do authentication and authorization.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将被重定向到Spring Security内部登录页面。当用户输入**用户**和**密码**并点击提交时，`PacktGWTAuthenticator`类从`Users`类中加载用户，并比较输入。如果映射具有与用户提供的相同的凭据，授权将被启动，并且成功后，用户将被引导到GWT应用程序。该示例已经显式使用了Spring
    Security的`Authentication Provider`和`Authenticator Bean`类，通过实现接口和`application-context.xml`调用`PacktGWTAuthenticator`和`PacktGWTAuthentication
    implementation`类来进行认证和授权。
- en: '![How it works...](img/7525OS_05_01.jpg)![How it works...](img/7525OS_05_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_05_01.jpg)![它是如何工作的...](img/7525OS_05_02.jpg)'
- en: You will see the previous image on a successful login.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录时将看到先前的图像。
- en: 'Listener generated output in the Eclipse console:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse控制台中生成的监听器输出：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On a login failure the following image is displayed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 登录失败时显示以下图像：
- en: '![How it works...](img/7525OS_05_03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_05_03.jpg)'
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Form-based authentication with GWT and Spring Security* recipe
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GWT和Spring Security进行基于表单的身份验证*食谱'
- en: The *Basic authentication with GWT and Spring Security* recipe
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GWT和Spring Security进行基本身份验证*食谱'
- en: The *Digest authentication with GWT and Spring Security* recipe
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GWT和Spring Security进行摘要身份验证*食谱'
- en: The *Database authentication with GWT and Spring Security* recipe
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GWT和Spring Security进行数据库身份验证*食谱'
- en: The *LDAP authentication with GWT and Spring Security* recipe
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GWT和Spring Security进行LDAP身份验证*食谱'
- en: Form-based authentication with GWT and Spring Security
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行基于表单的身份验证
- en: We will demonstrate Form-based authentication in GWT. It's very similar to the
    authentication that we have done in our previous recipes. We will be editing the
    `applicationContext.xml`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示GWT中的基于表单的身份验证。这与我们在以前的配方中所做的身份验证非常相似。我们将编辑`applicationContext.xml`。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a sample GWT project.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个样本GWT项目。
- en: Add the spring-related JARs in the build path.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建路径中添加与spring相关的JAR包。
- en: Add the Spring Security-related JARs.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与Spring Security相关的JAR包。
- en: Add the `applicationContext.xml` file.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`applicationContext.xml`文件。
- en: Edit the `web.xml` file as shown in the previous section.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照上一节所示编辑`web.xml`文件。
- en: Also add the spring-related JARs in the `web-inf lib` folder.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要在`web-inf lib`文件夹中添加与spring相关的JAR包。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `applicationContext.xml` file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This configuration invokes the internal Spring Security login form. The idea
    is to show another scenario where we don't specify an authentication mechanism
    and spring, by default, uses its login form page to authenticate the user.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置调用内部Spring Security登录表单。其想法是展示另一种情景，在这种情况下我们不指定身份验证机制，而是spring默认使用其登录表单页面来对用户进行身份验证。
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Now access the following URL:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://127.0.0.1:8888/Basicgwtauth.html?gwt.codesvr=127.0.0.1:9997`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8888/Basicgwtauth.html?gwt.codesvr=127.0.0.1:9997`'
- en: '![How it works...](img/7525OS_05_01.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7525OS_05_01.jpg)'
- en: Enter the login username and password; you will be taken to the GWT page. This
    is also a mechanism to invoke spring's internal login jsp page if the developer
    doesn't want to create their own customized jsp. It still reads the authentication
    provider details provided to authenticate and authorize the user.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码；您将被带到GWT页面。这也是一种机制，用于调用spring的内部登录jsp页面，如果开发人员不想创建自己定制的jsp。它仍然读取提供的身份验证提供程序详细信息以对用户进行身份验证和授权。
- en: In a similar way you can authenticate using database and LDAP as well as just
    by editing the authentication manager configurations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，您也可以通过编辑身份验证管理器配置来使用数据库和LDAP进行身份验证。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Basic authentication with GWT and Spring Security* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行基本身份验证的配方
- en: The *Digest authentication with GWT and Spring Security* recipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行摘要身份验证的配方
- en: The *Database authentication with GWT and Spring Security* recipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行数据库身份验证的配方
- en: The *LDAP authentication with GWT and Spring Security* recipe
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行LDAP身份验证的配方
- en: Basic authentication with GWT and Spring Security
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行基本身份验证
- en: We will demonstrate Basic authentication in GWT. It's very similar to the basic
    authentication that we are going doing in later recipes. We will be editing the
    `applicationContext.xml`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示GWT中的基本身份验证。这与我们稍后将要做的基本身份验证非常相似。我们将编辑`applicationContext.xml`。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a sample GWT project
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个样本GWT项目
- en: Add the spring related JARs in the build path
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建路径中添加与spring相关的JAR包
- en: Add the Spring Security related JARs
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与Spring Security相关的JAR包
- en: Add the `applicationContext.xml` file
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`applicationContext.xml`文件
- en: Edit the `web.xml` file as shown in the previous section
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照上一节所示编辑`web.xml`文件
- en: Also add the spring related JARs in the `web-inf lib` folder
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要在`web-inf lib`文件夹中添加与spring相关的JAR包
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `applicationContext.xml` file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件：
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here we are specifying the authentication mechanism as basic.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将指定基本的身份验证机制。
- en: How it works..
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理..
- en: 'Now access the URL:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问URL：
- en: '`http://127.0.0.1:8888/Basicgwtauth.html?gwt.codesvr=127.0.0.1:9997`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8888/Basicgwtauth.html?gwt.codesvr=127.0.0.1:9997`'
- en: Spring security will interrupt the user from accessing the GWT application.
    The security mechanism will be read from the `application-context.xml` file. For
    this application the security mechanism is basic. Spring Security will pop up
    a dialogue box asking for user name and password. The login username and password
    that the user enters will be authenticated and authorized and the user will be
    taken to the GWT page.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security将阻止用户访问GWT应用程序。安全机制将从`application-context.xml`文件中读取。对于此应用程序，安全机制是基本的。Spring
    Security将弹出一个对话框，要求输入用户名和密码。用户输入的登录用户名和密码将被验证和授权，用户将被带到GWT页面。
- en: '![How it works..](img/7525OS_05_04.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理..](img/7525OS_05_04.jpg)'
- en: Enter the login username and password and you will be taken to the GWT page.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码，您将被带到GWT页面。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Digest authentication with GWT and Spring Security* recipe
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行摘要身份验证的配方
- en: The *Database authentication with GWT and Spring Security* recipe
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行数据库身份验证的配方
- en: The *LDAP authentication with GWT and Spring Security* recipe
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行LDAP身份验证的配方
- en: Digest authentication with GWT and Spring Security
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GWT和Spring Security进行摘要身份验证
- en: We will now demonstrate Digest authentication in GWT. It's very similar to the
    basic authentication that we are doing in our previous recipes. We will be editing
    the `applicationContext.xml`. We will be hashing the password. The setup remains
    the same, the only change is the `applicationcontext.xml`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将演示GWT中的摘要身份验证。这与我们在以前的配方中所做的基本身份验证非常相似。我们将编辑`applicationContext.xml`。我们将对密码进行哈希处理。设置保持不变，唯一的变化是`applicationcontext.xml`。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a sample GWT project
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个样本GWT项目
- en: Add the spring-related JARs in the build path
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建路径中添加与spring相关的JAR包
- en: Add the Spring Security-related JARs
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与Spring Security相关的JAR包
- en: Add the `applicationContext.xml` file
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`applicationContext.xml`文件
- en: Edit the `web.xml` file as shown in the previous section
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照上一节所示编辑`web.xml`文件
- en: Also add the spring-related JARs in the `web-inf lib` folder
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要在`web-inf lib`文件夹中添加与spring相关的JAR包
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `applicationContext.xml` file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`applicationContext.xml`文件：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here we are specifying the authentication mechanism as basic and have given
    the hashed password here. To hash the password, use the `jacksum jar`. This has
    already been demonstrated in [Chapter 2](ch02.html "Chapter 2. Spring Security
    with Struts 2"), *Spring Security with Sturts2*.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定身份验证机制为基本，并在此处给出了哈希密码。要对密码进行哈希处理，请使用“jacksum jar”。这已经在[第2章](ch02.html
    "第2章。Spring Security with Struts 2")中进行了演示，“Spring Security with Sturts2”。
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://127.0.0.1:8888/Basicgwtauth.html?gwt.codesvr=127.0.0.1:9997`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8888/Basicgwtauth.html?gwt.codesvr=127.0.0.1:9997`'
- en: The user should be redirected to the GWT application by accessing this URL.
    But the Spring framework interrupts this to check if the user is authorized to
    see the application. It pops up a login screen. Enter the login username and password
    and you will be taken to the GWT page.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应通过访问此URL重定向到GWT应用程序。但是Spring框架会中断此操作，以检查用户是否有权查看应用程序。它会弹出一个登录屏幕。输入登录用户名和密码，您将进入GWT页面。
- en: Your password will be decoded for authentication based on the algorithm mentioned
    in the configuration file. The algorithm mentioned here is *Sha*. So the password
    will be encrypted and decrypted using *Sha algorithm*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 根据配置文件中提到的算法对密码进行解码以进行身份验证。这里提到的算法是*Sha*。因此，密码将使用*Sha算法*进行加密和解密。
- en: '![How it works...](img/7525OS_05_04.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_05_04.jpg)'
- en: Enter the login username and password and you will be taken to the GWT page.
    Your password will be decoded for authentication based on the algorithm mentioned
    in the configuration file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码，您将进入GWT页面。根据配置文件中提到的算法，将对密码进行解码以进行身份验证。
- en: See also
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Database authentication with GWT and Spring Security* recipe
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用GWT和Spring Security进行数据库身份验证*配方'
- en: The *LDAP authentication with GWT and Spring Security* recipe
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*LDAP身份验证与GWT和Spring Security*配方'
- en: Database authentication with GWT and Spring Security
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GWT和Spring Security的数据库身份验证
- en: We will demonstrate database authentication in GWT. The setup remains the same.
    In all our previous examples we were using `applicationContext.xml` which was
    easily recognized by the Spring framework since it has the default file name.
    In this current example we will give a new file name to this and see how the application
    responds. Also, we need to add the `spring-jdbc.xml`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示GWT中的数据库身份验证。设置保持不变。在我们以前的所有示例中，我们都使用了`applicationContext.xml`，这是Spring框架很容易识别的，因为它具有默认文件名。在当前示例中，我们将为此提供一个新的文件名，并查看应用程序的响应。此外，我们需要添加`spring-jdbc.xml`。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a sample GWT project
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例GWT项目
- en: Add the spring-related JARs in the build path
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建路径中添加与spring相关的JAR包
- en: Add the Spring Security-related JARs
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与Spring Security相关的JAR包
- en: Add the `spring-security.xml` file
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加“spring-security.xml”文件
- en: Add the spring-jdbc-related JARs
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与spring-jdbc相关的JAR包
- en: Edit the `web.xml` file as shown in the previous section
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据前一部分的示例编辑“web.xml”文件
- en: Also add the spring-related JARs in the `web-inf lib` folder
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要在“web-inf lib”文件夹中添加与spring相关的JAR包
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `spring-security.xml` file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑“spring-security.xml”文件：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Add this above in the beans tag of the `xml` file. Here we are specifying the
    authentication mechanism as basic and the user information is stored the database.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在“xml”文件的beans标记中添加上述内容。在这里，我们指定身份验证机制为基本，并且用户信息存储在数据库中。
- en: 'Edit the `spring-jdbc.xml` file:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑“spring-jdbc.xml”文件：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are giving the database information.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在提供数据库信息。
- en: 'Edit the `web.xml` file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑“web.xml”文件：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have to configure the `springsecurityFilterchain`, as shown in the previous
    examples, and under that, add the above section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须配置“springsecurityFilterchain”，如前面的示例所示，在其中添加上述部分。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`http://127.0.0.1:8888/springgwtdbsecurity.html?gwt.codesvr=127.0.0.1:9997`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8888/springgwtdbsecurity.html?gwt.codesvr=127.0.0.1:9997`'
- en: Enter the login username and password and you will be taken to the GWT page.
    A database connection will be created and a query will be executed. The user-entered
    values will be checked with retrieved values for authentication. With this we
    can see that GWT seamlessly integrates with Spring Security.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码，您将进入GWT页面。将创建数据库连接并执行查询。用户输入的值将与检索到的值进行身份验证。通过这种方式，我们可以看到GWT与Spring
    Security无缝集成。
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *LDAP authentication with GWT and Spring Security* recipe
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*LDAP身份验证与GWT和Spring Security*配方'
- en: LDAP authentication with GWT and Spring Security
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GWT和Spring Security的LDAP身份验证
- en: 'We will demonstrate LDAP authentication in GWT. The setup remains the same:
    The user has to create groups and users.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示GWT中的LDAP身份验证。设置保持不变：用户必须创建组和用户。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a sample GWT project
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例GWT项目
- en: Add the spring-related JARs in the build path
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建路径中添加与spring相关的JAR包
- en: Add the Spring Security-related JARs
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与Spring Security相关的JAR包
- en: Add the `spring-security.xml` file
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加“spring-security.xml”文件
- en: Add the spring-LDAP-related JARs
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加与spring-LDAP相关的JAR包
- en: Edit the `web.xml` file as shown in the previous section
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据前一部分显示的内容编辑“web.xml”文件
- en: Also add the spring-related JARs in the `web-inf lib` folder
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要在“web-inf lib”文件夹中添加与spring相关的JAR包
- en: How to do it...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Edit the `spring-security.xml` file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑“spring-security.xml”文件：
- en: '[PRE16]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add this code in the `beans` tag of the xml. Here we are specifying the authentication
    mechanism as basic and the user information is stored the LDAP server.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码添加到xml的“beans”标记中。在这里，我们指定身份验证机制为基本，并且用户信息存储在LDAP服务器中。
- en: 'Edit the `web.xml` file:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑“web.xml”文件：
- en: '[PRE17]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have to configure `springsecurityFilterchain` as shown in the previous examples.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须像前面的示例中那样配置“springsecurityFilterchain”。
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now access the following URL:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问以下URL：
- en: '`27.0.0.1:8888/springgwtldapsecurity.html?gwt.codesvr=127.0.0.1:9997`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`27.0.0.1:8888/springgwtldapsecurity.html?gwt.codesvr=127.0.0.1:9997`'
- en: Enter the login username and password and you will be taken to the GWT page.
    Spring will use the details provided in `<ldap-server>` tag to gain access to
    open LDAP. Spring Security LDAP will talk to open LDAP and the user-entered values
    will be checked with retrieved values for authentication. On success, the user
    is redirected to the application. With this, we can see that GWT seamlessly integrates
    with Spring Security.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 输入登录用户名和密码，您将被带到GWT页面。Spring将使用`<ldap-server>`标签中提供的详细信息来访问开放LDAP。Spring Security
    LDAP将与开放LDAP通信，并将用户输入的值与检索到的值进行身份验证。成功后，用户将被重定向到应用程序。通过这一点，我们可以看到GWT与Spring Security无缝集成。
- en: There's more...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is an active project on google `code-gwtsecurity` package, which is meant
    for Spring Security integration with the GWT application. It offers login via
    GWT pop-up window. On authentication failure, it gives the error message to the
    user on the GWT window. The file `Spring4GWT jar` works by intercepting the error
    message in the RPC.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌上有一个活跃的项目`code-gwtsecurity`包，旨在将Spring Security与GWT应用程序集成。它通过GWT弹出窗口进行登录。在身份验证失败时，它会在GWT窗口上向用户显示错误消息。文件`Spring4GWT
    jar`通过拦截RPC中的错误消息来工作。
- en: Let's see how Spring integrates with Vaadin in the next chapter.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在下一章中Spring如何与Vaadin集成。
