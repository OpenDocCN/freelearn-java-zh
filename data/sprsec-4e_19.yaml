- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Build GraalVM Native Images
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建GraalVM原生图像
- en: This chapter is dedicated to honing skills concerning native images and `GraalVM`.
    Throughout this chapter, you’ll receive guidance on crafting a Spring Security
    application that makes use of native functionalities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节致力于提升关于原生图像和`GraalVM`的技能。在本章中，您将获得构建利用原生功能的Spring Security应用程序的指导。
- en: '`Spring Boot 3` introduces native image generation support through `GraalVM`,
    and Spring Security seamlessly integrates with this capability, making its features
    compatible with native images. This integration can be a great way to improve
    the performance and security of your Spring Security applications.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring Boot 3`通过`GraalVM`引入了原生图像生成支持，Spring Security与这一功能无缝集成，使其功能与原生图像兼容。这种集成可以是一种提高Spring
    Security应用程序性能和安全的绝佳方式。'
- en: We’ll delve into the essential steps for efficiently updating build configurations
    to leverage `GraalVM` tools, enabling seamless integration of native capabilities
    into your applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨高效更新构建配置以利用`GraalVM`工具的必要步骤，从而实现原生能力与您的应用程序的无缝集成。
- en: 'Additionally, we will explore `GraalVM` Native Image support with Spring Security
    features that we have not covered so far in this book, including the following
    topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将探索`GraalVM`原生图像对Spring Security功能的支持，这些功能在我们这本书中尚未涉及，包括以下主题：
- en: Introducing `GraalVM`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`GraalVM`
- en: Creating `GraalVM` images using `Buildpacks`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Buildpacks`创建`GraalVM`镜像
- en: Building a native image using Native Build Tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原生构建工具构建原生图像
- en: Handling method security in `GraalVM` Native Image
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`GraalVM`原生图像中处理方法安全性
- en: The following section is dedicated to offering guidance on specific `Spring
    Security` features that may necessitate additional hints to be supplied by the
    application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将提供关于特定`Spring Security`功能的具体指导，这些功能可能需要应用程序提供额外的提示。
- en: 'This chapter’s code in action link is here: [https://packt.link/fQ5AM](https://packt.link/fQ5AM).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的代码示例链接在此：[https://packt.link/fQ5AM](https://packt.link/fQ5AM)。
- en: Introducing GraalVM
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍GraalVM
- en: '**GraalVM** is a high-performance runtime that provides significant improvements
    in application performance and efficiency. **GraalVM** represents a high-performance
    runtime **Java Development** **Kit** (**JDK**).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**GraalVM**是一个高性能运行时，提供了在应用程序性能和效率方面的重大改进。**GraalVM**代表了一个高性能运行时的**Java开发****工具包**（**JDK**）。'
- en: Besides supporting **just-in-time** (**JIT**) compilation, **GraalVM** also
    enables ahead-of-time compilation of Java applications. This feature facilitates
    quicker initialization, enhanced runtime performance, and reduced resource consumption.
    However, the resulting executable is limited to running on the platform for which
    it was compiled. **GraalVM** extends its functionality by offering additional
    programming languages and execution modes. The first production-ready version,
    **GraalVM** 19.0, was introduced in May 2019.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了支持**即时**（**JIT**）编译外，**GraalVM**还使Java应用程序的**即时**编译成为可能。此功能促进了更快的初始化、增强的运行时性能和减少的资源消耗。然而，生成的可执行文件仅限于在编译它的平台上运行。**GraalVM**通过提供额外的编程语言和执行模式来扩展其功能。第一个生产就绪版本，**GraalVM**
    19.0，于2019年5月推出。
- en: In the following section, we will delve deeper into the concept of native images
    to gain a better understanding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更深入地探讨原生图像的概念，以获得更好的理解。
- en: What are native images?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是原生图像？
- en: Native images in **GraalVM** refer to executables compiled **Ahead Of Time**
    (**AOT**) from Java applications. Unlike traditional Java applications, which
    are typically compiled to bytecode and run on the **Java Virtual Machine** (**JVM**),
    native images are compiled directly into machine code for a specific platform.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在**GraalVM**中的原生图像指的是从Java应用程序**即时**编译（**AOT**）的可执行文件。与通常编译为字节码并在**Java虚拟机**（**JVM**）上运行的传统的Java应用程序不同，原生图像直接编译为特定平台的机器代码。
- en: '**GraalVM’s** native image leverages the **GraalVM** compiler to analyze and
    optimize the Java application’s code during compilation, resulting in a standalone
    native executable tailored for the target environment. These native images can
    be deployed independently without requiring a separate JVM installation, making
    them particularly useful for deploying lightweight, fast-starting applications
    in containerized environments or serverless platforms.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**GraalVM** 的原生图像利用 **GraalVM** 编译器在编译期间分析和优化 Java 应用程序的代码，从而生成针对目标环境定制的独立原生可执行文件。这些原生图像可以独立部署，无需安装单独的
    JVM，这使得它们在容器化环境或无服务器平台上部署轻量级、快速启动的应用程序特别有用。'
- en: Key features of GraalVM
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraalVM 的关键特性
- en: '**GraalVM** distinguishes itself from the base JDK through several key features:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**GraalVM** 通过几个关键特性将自己与基础 JDK 区分开来：'
- en: The **Graal compiler**, serving as a JIT compiler.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Graal 编译器**，作为 JIT 编译器。'
- en: '**GraalVM Native Image**, a technology facilitating ahead-of-time compilation
    of Java applications.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraalVM Native Image**，一种促进 Java 应用程序提前编译的技术。'
- en: '`GraalVM` SDK, comprising a Java-based framework and a suite of APIs tailored
    for developing high-performance language runtimes.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GraalVM` SDK，包括一个基于 Java 的框架和一系列针对开发高性能语言运行时的 API。'
- en: '`JavaScript`, `Ruby`, `Python`, and several other widely-used languages. With
    GraalVM’s polyglot capabilities, developers can seamlessly blend multiple programming
    languages within a single application without incurring additional overhead from
    foreign language calls.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JavaScript`、`Ruby`、`Python` 以及其他几种广泛使用的语言。借助 GraalVM 的多语言能力，开发人员可以在单个应用程序中无缝混合多种编程语言，而无需承担额外开销。'
- en: '`ECMAScript 2023`-compliant JavaScript runtime, alongside Node.js.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合 `ECMAScript 2023` 的 JavaScript 运行时，以及 Node.js。
- en: '`LLVM` bitcode.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM` 位码。'
- en: Security benefits of GraalVM
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraalVM 的安全优势
- en: 'In terms of security, **GraalVM** offers some notable advantages:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全性方面，**GraalVM** 提供了一些显著的优势：
- en: It stops new, unfamiliar code from being loaded while the program is running.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它阻止在程序运行时加载新的、不熟悉的代码。
- en: It only incorporates paths that the application has proven reachable within
    its image.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它只包含应用程序在其镜像内已证明可到达的路径。
- en: Reflection is turned off by default and requires a specific inclusion list to
    enable.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射默认关闭，并需要特定的包含列表来启用。
- en: Deserialization is allowed only for a predefined list of classes.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅允许对预定义的类列表进行反序列化。
- en: Issues related to the just-in-time compiler, such as crashes, incorrect compilations,
    or the possibility of creating machine code gadgets via techniques like **JIT
    spraying** (security exploit) are eliminated.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与即时编译器相关的问题，如崩溃、编译错误或通过如 **JIT 溅射**（安全漏洞）等技术创建机器代码小工具的可能性，都被消除。
- en: After covering the key features and security benefits of **GraalVM**, we’ll
    proceed to explore practical examples of building **GraalVM** images. This will
    involve utilizing Buildpacks and applying them to our JBCP Calendar application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍完 **GraalVM** 的关键特性和安全优势后，我们将继续探讨构建 **GraalVM** 图像的实际示例。这包括利用 Buildpacks
    并将其应用于我们的 JBCP 日历应用程序。
- en: GraalVM images using Buildpacks
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Buildpacks 的 GraalVM 图像
- en: Ensure Docker is installed by referring to the details in the Docker documentation
    ([https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)).
    If you are using Linux, configure Docker to permit non-root users.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过参考 Docker 文档中的详细信息（[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)）确保已安装
    Docker。如果您使用 Linux，请配置 Docker 以允许非 root 用户。
- en: Important note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For macOS users, it is advisable to enhance the allocated Docker memory to a
    minimum of **8 GB** and consider adding more CPUs. On Microsoft Windows, ensure
    optimal performance by enabling the Docker WSL 2 backend ([https://docs.docker.com/desktop/wsl/](https://docs.docker.com/desktop/wsl/)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS 用户，建议将分配的 Docker 内存增加到至少 **8 GB**，并考虑添加更多 CPU。在 Microsoft Windows 上，通过启用
    Docker WSL 2 后端（[https://docs.docker.com/desktop/wsl/](https://docs.docker.com/desktop/wsl/)）来确保最佳性能。
- en: In the upcoming sections, we will construct `Buildpacks` and `Gradle`, as well
    as crafting `Buildpacks` and `Maven`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建 `Buildpacks` 和 `Gradle`，以及制作 `Buildpacks` 和 `Maven`。
- en: Building GraalVM images using Buildpacks and Gradle
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Buildpacks 和 Gradle 构建 GraalVM 图像
- en: The AOT tasks are automatically configured by the `plugins` block with `org.graalvm.buildtools.native`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: AOT 任务由 `plugins` 块中的 `org.graalvm.buildtools.native` 自动配置。
- en: 'For our sample application, we need to add the plugin declaration to the `build.gradle`
    file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例应用程序，我们需要将插件声明添加到 `build.gradle` 文件中：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the `org.graalvm.buildtools.native` plugin is applied, the `bootBuildImage`
    task will produce a native image instead of a JVM one. Execute the task using:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用了`org.graalvm.buildtools.native`插件，`bootBuildImage`任务将生成原生镜像而不是JVM镜像。使用以下命令执行任务：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building GraalVM images using Buildpacks and Maven
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Buildpacks 和 Maven 构建GraalVM镜像
- en: 'To create a native image container using `pom.xml` file adopts the `spring-boot-starter-parent`
    and includes the `org.graalvm.buildtools:native-maven-plugin`. Ensure that the
    `<parent>` section in your `pom.xml` resembles the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`pom.xml`文件创建采用`spring-boot-starter-parent`并包含`org.graalvm.buildtools:native-maven-plugin`的原生镜像容器，请确保您的`pom.xml`中的`<parent>`部分类似于以下内容：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Additionally, you should include the following `native-maven-plugin` in the
    `<plugins>` section of your `pom.xml`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该在`pom.xml`的`<plugins>`部分包含以下`native-maven-plugin`：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `spring-boot-starter-parent` includes a `-P` flag on the command line.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-parent`在命令行上包含一个`-P`标志。'
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Important note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter19.01-calendar`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter19.01-calendar`中的那样。
- en: Running GraalVM images from Buildpacks
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Buildpacks 运行 GraalVM镜像
- en: 'After executing the relevant build command for **Maven** or **Gradle**, a Docker
    image should be accessible. Initiate your application by utilizing the docker
    run command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 执行**Maven**或**Gradle**的相关构建命令后，应该可以访问Docker镜像。通过使用`docker run`命令启动您的应用程序：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Your application should be reachable via `http://localhost:8080`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序可以通过`http://localhost:8080`访问。
- en: To gracefully shut down the application, press *Ctrl +* *C*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要优雅地关闭应用程序，请按*Ctrl +* *C*。
- en: Following the construction of `Buildpacks`, we will delve into a detailed exploration
    of building a Native Image using **Native** **Build Tools**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建`Buildpacks`之后，我们将深入探讨使用**原生****构建工具**构建原生镜像的详细过程。
- en: Building a native image using Native Build Tools
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原生构建工具构建原生镜像
- en: If you prefer generating a native executable without relying on **Docker**,
    **GraalVM****Native Build Tools** come in handy. These tools are provided as plugins
    by **GraalVM** for both **Maven** and **Gradle**, offering a range of **GraalVM**
    tasks, including the generation of a native image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在不依赖**Docker**的情况下生成原生可执行文件，**GraalVM****原生构建工具**将非常有用。这些工具由**GraalVM**作为插件提供，适用于**Maven**和**Gradle**，提供一系列**GraalVM**任务，包括生成原生镜像。
- en: In the following sections, we will understand the process of building and running
    **GraalVM** images using **Native Build Tools** with either **Maven** or **Gradle**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将了解使用**原生构建工具**和**Maven**或**Gradle**构建和运行**GraalVM**镜像的过程。
- en: Prerequisites
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: To generate a native image with the **Native Build Tools**, ensure that you
    have a **GraalVM** distribution installed on your system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**原生构建工具**生成原生镜像，请确保您的系统上已安装**GraalVM**发行版。
- en: For our examples, we will use `bellsoft-liberica-vm-openjdk17-23.0.3` that is
    available in the Liberica Native Image Kit Download Center ([https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17)](https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17))).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将使用在Liberica Native Image Kit下载中心可用的`bellsoft-liberica-vm-openjdk17-23.0.3`（[https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17)](https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17))）。
- en: Building GraalVM images using Native Build Tools and Maven
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原生构建工具和 Maven 构建GraalVM镜像
- en: Just like with the buildpack support, it’s essential to ensure the usage of
    `spring-boot-starter-parent` to inherit the native profile. Additionally, make
    sure to incorporate the `org.graalvm.buildtools:native-maven-plugin` plugin.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 就像对构建包的支持一样，确保使用`spring-boot-starter-parent`以继承原生配置文件至关重要。此外，请确保包含`org.graalvm.buildtools:native-maven-plugin`插件。
- en: Once the native profile is enabled, you can initiate the `native:compile` goal
    to commence the native-image compilation process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用原生配置文件，您就可以启动`native:compile`目标以开始原生镜像编译过程。
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can locate the executable of the native image in the `target` directory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`target`目录中找到原生镜像的可执行文件。
- en: Building GraalVM images using Native Build Tools and Gradle
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原生构建工具和 Gradle 构建 GraalVM 镜像
- en: For our sample application, we need to add the **Native Build Tools** **Gradle
    plugin**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例应用程序，我们需要添加**原生构建工具**的**Gradle插件**。
- en: When you incorporate the Native Build Tools Gradle plugin into your project,
    the Spring Boot Gradle plugin will promptly activate the Spring AOT engine. Task
    dependencies are prearranged, enabling you to simply execute the standard `nativeCompile`
    task for generating a native image.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将 Native Build Tools Gradle 插件集成到项目中时，Spring Boot Gradle 插件将立即激活 Spring AOT
    引擎。任务依赖关系预先安排，使您可以简单地执行标准的 `nativeCompile` 任务以生成原生图像。
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can locate the native image executable within the directory named `build/native/nativeCompile`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在名为 `build/native/nativeCompile` 的目录中找到原生图像的可执行文件。
- en: Running GraalVM images from Native Build Tools
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从原生构建工具运行 GraalVM 图像
- en: At this stage, your application should be functional. The startup time varies
    across different machines, but it is expected to be considerably faster than a
    Spring Boot application running on a JVM.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您的应用程序应该可以正常工作。启动时间因不同机器而异，但预计会比在 JVM 上运行的 Spring Boot 应用程序快得多。
- en: 'You can run the application by executing it directly:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接执行应用程序来运行它：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By navigating to `http://localhost:8080` in your web browser, you should have
    access to the **JBCP** **Calendar** application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在您的网页浏览器中导航到 `http://localhost:8080`，您应该可以访问 **JBCP** **日历**应用程序。
- en: To gracefully shut down the application, press *Ctrl +* *C*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要优雅地关闭应用程序，请按 *Ctrl +* *C*。
- en: Upon grasping the fundamental configurations for building **GraalVM** images,
    we will delve deeper into specific use cases associated with **Spring Security**
    native images.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握构建 **GraalVM** 图像的基本配置后，我们将深入了解与 **Spring Security** 原生图像相关的特定用例。
- en: Method Security in GraalVM Native Image
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraalVM 原生图像中的方法安全
- en: While **GraalVM** Native Image does support **Method Security**, certain use
    cases may require the application to supply additional hints for proper functionality.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 **GraalVM** 原生图像支持 **方法安全**，但某些用例可能需要应用程序提供额外的提示以实现正确功能。
- en: 'If you’re employing custom implementations of `UserDetails` or authentication
    classes and using `@PreAuthorize` and `@PostAuthorize` annotations, you may need
    supplementary indications. Consider a scenario where you’ve crafted a custom implementation
    of the `UserDetails` class, which is returned by your `UserDetailsService`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 `UserDetails` 或身份验证类的自定义实现，并使用 `@PreAuthorize` 和 `@PostAuthorize` 注解，您可能需要额外的指示。考虑以下场景，您已经为
    `UserDetailsService` 返回的 `UserDetails` 类创建了一个自定义实现：
- en: 'First, create a custom `UserDetails` implementation as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个自定义的 `UserDetails` 实现如下：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The provided implementation of `hasAdminRole()` is merely presented as an illustration
    of how method security can be managed with `GraalVM` native images. However, for
    production environments, it’s advisable to consider a safer implementation of
    `hasAdminRole()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的 `hasAdminRole()` 实现仅作为如何使用 `GraalVM` 原生图像管理方法安全性的示例。然而，对于生产环境，建议考虑 `hasAdminRole()`
    的更安全实现。
- en: 'We want to use `hasAdminRole()` method within a `@PreAuthorize` annotation
    in the `CalendarService` interface:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望在 `CalendarService` 接口中的 `@PreAuthorize` 注解中使用 `hasAdminRole()` 方法：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ensure that the `@EnableMethodSecurity` annotation is present in `SecurityConfig.java`
    to activate method security annotations.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 `SecurityConfig.java` 中存在 `@EnableMethodSecurity` 注解以激活方法安全注解。
- en: Important note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter19.02-calendar`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像 `chapter19.02-calendar` 中的那样。
- en: Sign in to the application with `admin1@example.com/admin1` and try accessing
    http://localhost:8080/events. You will notice all the events can be displayed.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `admin1@example.com/admin1` 登录应用程序并尝试访问 http://localhost:8080/events。您将注意到所有事件都可以显示。
- en: '![Figure 19.1 – All the events page](img/B21757_19_01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.1 – 所有事件页面](img/B21757_19_01.jpg)'
- en: Figure 19.1 – All the events page
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.1 – 所有事件页面
- en: 'When you sign in to the application with `user1@example.com/user1` and try
    accessing http://localhost:8080/events, You will get the following access denied
    page:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您使用 `user1@example.com/user1` 登录应用程序并尝试访问 http://localhost:8080/events 时，您将得到以下访问拒绝页面：
- en: '![Figure 19.2 – Access denied page for unauthorized user](img/B21757_19_02.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.2 – 未授权用户的访问拒绝页面](img/B21757_19_02.jpg)'
- en: Figure 19.2 – Access denied page for unauthorized user
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.2 – 未授权用户的访问拒绝页面
- en: 'If you execute your application’s native image with the provided configuration,
    attempting to invoke the `hasAdminRole()` method will result in an error resembling
    the following:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用提供的配置执行应用程序的原生图像，尝试调用 `hasAdminRole()` 方法将导致以下类似错误：
- en: '[PRE11]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The error above indicates that the `hasAdminRole()` method cannot be located
    on the `CalendarUserDetails.class`.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的错误表明无法在`CalendarUserDetails.class`上找到`hasAdminRole()`方法。
- en: Spring Security relies on reflection to invoke the `hasAdminRole()` method,
    and `GraalVM` Native Image does not inherently support reflection.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security依赖于反射来调用`hasAdminRole()`方法，而**GraalVM**原生镜像本身不支持反射。
- en: 'To resolve this problem, you must follow the subsequent steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，您必须遵循以下步骤：
- en: 'Provide hints to GraalVM Native Image to enable reflection on the `CalendarUserDetails#hasAdminRole()`
    method. This can be achieved by supplying a custom hint, as demonstrated in the
    following example:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**GraalVM**原生镜像提供提示以启用`CalendarUserDetails#hasAdminRole()`方法上的反射。这可以通过提供自定义提示来实现，如下面的示例所示：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now you can build the native image of your application, and it should function
    as intended.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以构建您应用程序的原生镜像，并且它应该按预期运行。
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter19.03-calendar`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`chapter19.03-calendar`中的那样。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we delved into the support for **GraalVM** Native Image in
    conjunction with Spring Security features, which were not previously covered in
    this book. We introduced the concept of native images, including the key features
    and security benefits of **GraalVM**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了与Spring Security特性结合的**GraalVM**原生镜像支持，这些特性在此书中之前未曾涉及。我们介绍了原生镜像的概念，包括**GraalVM**的关键特性和安全优势。
- en: The key topics explored included `Spring Boot 3`, which introduces native image
    generation support via **GraalVM**, seamlessly integrating with Spring Security
    features and making them compatible with native images. We have seen that there
    are some cases where we need to provide hints to be used by **GraalVM**.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 探索的关键主题包括`Spring Boot 3`，它通过**GraalVM**引入了原生镜像生成支持，无缝集成Spring Security特性，并使它们与原生镜像兼容。我们已经看到，在某些情况下，我们需要提供**GraalVM**使用的提示。
- en: Moreover, we’ve successfully improved our application’s performance and security,
    aligning with contemporary software development practices.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们已经成功提高了我们应用程序的性能和安全性，与当代软件开发实践相一致。
- en: In concluding this chapter, I want to extend my heartfelt congratulations to
    you for reaching this milestone of completing the book. Your dedication and commitment
    to learning about `Spring Security 6` features are commendable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，我想向您表示衷心的祝贺，恭喜您完成了这本书的里程碑式任务。您对学习`Spring Security 6`特性的投入和承诺值得赞扬。
- en: As you reflect on the concepts covered, remember that every step you take toward
    mastering these technologies brings you closer to becoming an adept developer.
    Embrace the challenges ahead with confidence, knowing that each hurdle is an opportunity
    for growth. Keep exploring, keep experimenting, and never underestimate the power
    of continuous learning.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当您反思所涵盖的概念时，请记住，您每迈出一步，朝着掌握这些技术迈进，都让您更接近成为一名熟练的开发者。自信地迎接挑战，知道每个障碍都是成长的机会。继续探索，继续实验，永远不要低估持续学习的力量。
- en: Wishing you continued success on your software development journey!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您在软件开发之旅上继续取得成功！
- en: Appendix – Additional Reference Material
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 – 补充参考资料
- en: In this [*Appendix*](B21757_20.xhtml#_idTextAnchor642), we will cover some reference
    material that we feel is helpful (and largely undocumented) but too comprehensive
    to insert in the chapters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本[*附录*](B21757_20.xhtml#_idTextAnchor642)中，我们将涵盖一些我们认为有帮助（并且大部分未记录）但过于详尽而无法插入章节中的参考资料。
- en: 'During this section, we will cover the following topics:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主题：
- en: Using build tools (`Gradle` or `Maven`) and IDE (**IntelliJ IDEA** or **Eclipse**)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构建工具（`Gradle`或`Maven`）和IDE（**IntelliJ IDEA**或**Eclipse**）
- en: Getting started with the JBCP calendar sample code
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用JBCP日历示例代码
- en: Generating a server certificate
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成服务器证书
- en: Additional supporting resource
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补充资源
- en: This section is designed to provide you with guidance for further depth and
    clarity on the provided code covered in this book.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在为您提供指导，以进一步深入和清晰地理解本书中涵盖的代码。
- en: Build tools
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建工具
- en: The book’s code is executable via **Gradle** or **Maven**.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码可以通过**Gradle**或**Maven**执行。
- en: In subsequent sections, we’ll elaborate on executing projects utilizing either
    `Gradle` or `Maven` as the build tool. The code from the book operates independently
    of any **Integrated Development** **Environment** (**IDE**).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的章节中，我们将详细说明使用`Gradle`或`Maven`作为构建工具执行项目的情况。本书中的代码可以独立于任何**集成开发环境**（**IDE**）运行。
- en: However, we’ll provide examples of implementations using **Eclipse** and **IntelliJ
    IDEA**.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将提供使用 **Eclipse** 和 **IntelliJ IDEA** 的实现示例。
- en: In the following section, we demonstrate the usage of build tools such as `Gradle`
    or `Maven`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将演示如何使用 `Gradle` 或 `Maven` 等构建工具。
- en: Gradle build tool
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle 构建工具
- en: All the code in this book can be built using the `Gradle` locally at [https://gradle.org/install/](https://gradle.org/install/).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有代码都可以使用 `Gradle` 在本地构建，请访问 [https://gradle.org/install/](https://gradle.org/install/)。
- en: A local installation of `Gradle` is not required as the root of the source code
    already has the `Gradle` wrapper installed. The `Gradle` wrapper can be installed
    in any submodule. You can find additional information about the `Gradle` wrapper
    at [https://docs.gradle.org/current/userguide/gradle_wrapper.xhtml](https://docs.gradle.org/current/userguide/gradle_wrapper.xhtml).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于源代码的根目录已经安装了 `Gradle` 包装器，因此不需要本地安装 `Gradle`。`Gradle` 包装器可以安装在任何子模块中。您可以在
    [https://docs.gradle.org/current/userguide/gradle_wrapper.xhtml](https://docs.gradle.org/current/userguide/gradle_wrapper.xhtml)
    找到有关 `Gradle` 包装器的更多信息。
- en: Maven build tool
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven 构建工具
- en: Throughout the chapters ahead, you’ll find a wealth of code examples, practical
    tips, and hands-on exercises designed for those who are comfortable with **Maven**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将找到丰富的代码示例、实用技巧和针对熟悉 **Maven** 的读者的动手练习。
- en: '`Maven` locally at [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`Maven` 在 [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)。'
- en: Downloading the example code
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for all Packt books you have purchased
    from your account at [https://www.packtpub.com](https://www.packtpub.com). If
    you purchased this book from elsewhere, you could visit [https://www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [https://www.packtpub.com](https://www.packtpub.com) 购买的所有 Packt 书籍的账户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问
    [https://www.packtpub.com/support](https://www.packtpub.com/support) 并注册以将文件直接通过电子邮件发送给您。
- en: In the following section, we’ll delve into initiating the JBCP calendar sample
    code with your preferred IDE such as **IntelliJ IDEA** or **Eclipse**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨使用您首选的 IDE，如 **IntelliJ IDEA** 或 **Eclipse**，启动 JBCP 日历示例代码。
- en: Getting started with the JBCP calendar sample code
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 JBCP 日历示例代码
- en: As we described in [*Chapter 1*](B21757_01.xhtml#_idTextAnchor015), *Anatomy
    of an Unsafe Application*, we have assumed that you have installed `Java 17` as
    a minimum. You can download a JDK from Oracle’s website ([https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/))
    or use any other OpenJDK version 17.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第一章*](B21757_01.xhtml#_idTextAnchor015) 中所描述的，*不安全应用程序的解剖结构*，我们假设您已安装
    `Java 17` 作为最低要求。您可以从 Oracle 的网站 ([https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/))
    下载 JDK 或使用任何其他 OpenJDK 17 版本。
- en: Upon the publication of this book, all the code has been validated with `Java
    21`, the most recent **Long-Term Support** (**LTS**) version.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书出版时，所有代码都已使用最新的 **长期支持** (**LTS**) 版本 `Java 21` 进行了验证。
- en: The upcoming section discusses the structure of sample code and its utilization
    within your preferred IDE.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将讨论示例代码的结构以及它在您首选的 IDE 中的使用。
- en: Sample code structure
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例代码结构
- en: The sample code contains folders of a multimodule `Gradle` or `Maven` project.
    Each folder is named `ChapterNN`, where `NN` is the `chapter number`. Each `ChapterNN`
    folder has additional folders containing each milestone project with the format
    `chapterNN.mm-calendar`, where `NN` is the `chapter number` and `mm` is the `milestone`
    within that chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码包含多模块 `Gradle` 或 `Maven` 项目的文件夹。每个文件夹命名为 `ChapterNN`，其中 `NN` 是 `章节号`。每个
    `ChapterNN` 文件夹包含包含每个里程碑项目的额外文件夹，格式为 `chapterNN.mm-calendar`，其中 `NN` 是 `章节号`，`mm`
    是该章节内的 `里程碑`。
- en: For simplicity, we recommend that you extract the source to a path that does
    not contain any spaces. Each milestone is a checkpoint within the `chapter` and
    allows you to easily compare your code with the book’s code. For example, `chapter02.03-calendar`
    contains milestone number `03` within [*Chapter 2*](B21757_02.xhtml#_idTextAnchor043),
    *Getting Started with Spring Security*, of the calendar application. The location
    of the preceding project would be `~/` `Spring-Security-Fourth-Edition/Chapter02/chapter02.03-calendar`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们建议你将源代码提取到一个不包含任何空格的路径。每个里程碑都是`章节`中的一个检查点，允许你轻松地将你的代码与书中的代码进行比较。例如，`chapter02.03-calendar`包含日历应用程序[*第2章*](B21757_02.xhtml#_idTextAnchor043)，*Spring
    Security入门*中的里程碑编号`03`。前一个项目位置将是`~/` `Spring-Security-Fourth-Edition/Chapter02/chapter02.03-calendar`。
- en: '[*Chapter 1*](B21757_01.xhtml#_idTextAnchor015), *Anatomy of an Unsafe Application*,
    and [*Chapter 2*](B21757_02.xhtml#_idTextAnchor043), *Getting Started with Spring
    Security*, have been created as `Spring projects`, not using `Spring Boot` as
    a project base.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第1章*](B21757_01.xhtml#_idTextAnchor015)，*不安全应用程序的解剖结构*，和[*第2章*](B21757_02.xhtml#_idTextAnchor043)，*Spring
    Security入门*，已被创建为`Spring`项目，而不是使用`Spring Boot`作为项目基础。'
- en: '[*Chapter 3*](B21757_03.xhtml#_idTextAnchor068), *Custom Authentication*, converted
    the calendar project to a `Spring` `Boot codebase`.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第3章*](B21757_03.xhtml#_idTextAnchor068)，*自定义认证*，将日历项目转换为`Spring` `Boot`代码库。'
- en: To keep each chapter as independent as possible, most chapters in the book are
    built on [*Chapter 9*](B21757_09.xhtml#_idTextAnchor295), *Opening up to OAuth2*,
    or [*Chapter 15*](B21757_15.xhtml#_idTextAnchor479), *Additional Spring Security
    Features*. This means that, in most cases, you can read through [*Chapter 9*](B21757_09.xhtml#_idTextAnchor295),
    *Opening up to OAuth2*, and then skip around to the other parts of the book. However,
    this also means that it is important to start each chapter with the chapter’s
    `milestone 00` source code rather than continuing to work on the code from the
    previous chapter. This ensures that your code starts in the same place that the
    chapter does.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使每个章节尽可能独立，本书中的大多数章节都是基于[*第9章*](B21757_09.xhtml#_idTextAnchor295)，*开放OAuth2*，或[*第15章*](B21757_15.xhtml#_idTextAnchor479)，*额外的Spring
    Security功能*构建的。这意味着，在大多数情况下，你可以阅读[*第9章*](B21757_09.xhtml#_idTextAnchor295)，*开放OAuth2*，然后跳转到书的其他部分。然而，这也意味着，开始每个章节时，重要的是使用章节的`里程碑
    00`源代码，而不是继续使用上一章的代码。这确保了你的代码从与章节相同的地方开始。
- en: While you can get through the entire book without performing any of the steps,
    we recommend starting each chapter with `milestone 00` and implementing the steps
    in the book. This will ensure that you get the most out of the book. You can use
    the milestone versions to copy large portions of code or to compare your code
    if you run into problems.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以不执行任何步骤就完成整本书，但我们建议从每个章节的`里程碑 00`开始，并按照书中的步骤进行实施。这将确保你从书中获得最大收益。你可以使用里程碑版本来复制大量代码，或者在遇到问题时比较你的代码。
- en: Using the samples in IntelliJ IDEA
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中使用示例
- en: There are a few things that are necessary to run the sample applications within
    `Tomcat` plugin has been configured with `Gradle` or `Maven` to run the embedded
    instance to help you get started faster.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Tomcat`插件配置了`Gradle`或`Maven`以运行嵌入式实例的情况下，有一些事情是运行示例应用程序所必需的，这有助于你更快地开始。
- en: Importing projects in IntelliJ IDEA
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中导入项目
- en: Most of the diagrams used in this book were taken from `Gradle` or `Maven` projects.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的多数图表都是从`Gradle`或`Maven`项目中提取的。
- en: IntelliJ IDEA will allow you to import an existing project, or you can simply
    open `build.gradle` or `pom.xml` from the root of the source code base and IDEA
    will create the necessary project files for you.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA将允许你导入现有项目，或者你可以直接从源代码库的根目录打开`build.gradle`或`pom.xml`，IDEA将为你创建必要的项目文件。
- en: 'Once you open IntelliJ IDEA, you can open the entire project using the **Open**
    option, as shown in the following screenshot:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你打开IntelliJ IDEA，你可以使用**打开**选项打开整个项目，如下面的截图所示：
- en: '![Appendix figure 1 – JBCP calendar samples import](img/B21757_20_1.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![附录图1 – JBCP日历示例导入](img/B21757_20_1.jpg)'
- en: Appendix figure 1 – JBCP calendar samples import
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图1 – JBCP日历示例导入
- en: 'Then, you will be prompted to select various options for how IntelliJ IDEA
    will execute this project, either **Gradle** or **Maven**, as shown in the following
    screenshot:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你将需要选择IntelliJ IDEA如何执行此项目，是**Gradle**还是**Maven**，如下面的截图所示：
- en: '![Appendix figure 2 – Gradle or Maven option](img/B21757_20_2.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 2 – Gradle 或 Maven 选项](img/B21757_20_2.jpg)'
- en: Appendix figure 2 – Gradle or Maven option
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 2 – Gradle 或 Maven 选项
- en: 'Once we choose **Gradle**, for example, you will be able to work with any of
    the chapters, and the layout will look as shown in the following screenshot:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，一旦我们选择 **Gradle**，您将能够处理任何章节，布局将如图下截图所示：
- en: '![Appendix figure 3 – Chapter presentation layout with IDEA](img/B21757_20_3.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 3 – IDEA 中的章节展示布局](img/B21757_20_3.jpg)'
- en: Appendix figure 3 – Chapter presentation layout with IDEA
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 3 – IDEA 中的章节展示布局
- en: After importing the project in **IntelliJ IDEA**, you can run your code following
    the guidance provided in the next section.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **IntelliJ IDEA** 中导入项目后，您可以按照下一节提供的指导运行您的代码。
- en: Running the samples within IntelliJ IDEA
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 IntelliJ IDEA 中运行示例
- en: Running milestone projects can be done by creating a **Run/Debug Configuration**
    entry for each project.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为每个项目创建 **运行/调试配置** 条目来运行里程碑项目。
- en: For each `spring-boot` project (starting from [*Chapter 3*](B21757_03.xhtml#_idTextAnchor068)*,
    Custom Authentication*), you can simply click the green play button in the toolbar,
    or right-click on the main class and choose **Run CalendarApplication**. IntelliJ
    IDEA will start the Spring Boot application, and you will see the logs in the
    **Run** tool window.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个 `spring-boot` 项目（从 [*第 3 章*](B21757_03.xhtml#_idTextAnchor068)*，自定义身份验证*）开始），您可以简单地点击工具栏中的绿色播放按钮，或者右键单击主类并选择
    **运行 CalendarApplication**。IntelliJ IDEA 将启动 Spring Boot 应用程序，您将在 **运行** 工具窗口中看到日志。
- en: '![Appendix figure 4 – Running the Spring Boot project with IntelliJ IDEA](img/B21757_20_4.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 4 – 使用 IntelliJ IDEA 运行 Spring Boot 项目](img/B21757_20_4.jpg)'
- en: Appendix figure 4 – Running the Spring Boot project with IntelliJ IDEA
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 4 – 使用 IntelliJ IDEA 运行 Spring Boot 项目
- en: 'For other projects, you can use the terminal or if using IntelliJ IDEA, go
    to **File** | **Run** and select **Edit Configurations...**, as shown in the following
    screenshot:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于其他项目，您可以使用终端，如果使用 IntelliJ IDEA，请转到 **文件** | **运行** 并选择 **编辑配置...**，如图下截图所示：
- en: '![Appendix figure 5 – Custom applications, Run with IntelliJ IDEA](img/B21757_20_5.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 5 – 自定义应用程序，使用 IntelliJ IDEA 运行](img/B21757_20_5.jpg)'
- en: Appendix figure 5 – Custom applications, Run with IntelliJ IDEA
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 5 – 自定义应用程序，使用 IntelliJ IDEA 运行
- en: 'You will be presented with options to add new configurations. Select the plus
    (**+**) sign in the upper-left corner to choose a new **Gradle** configuration,
    as shown in the following screenshot:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到添加新配置的选项。选择左上角的加号 (**+**) 以选择新的 **Gradle** 配置，如图下截图所示：
- en: '![Appendix figure 6 – Custom applications, Add New Configuration with IntelliJ
    IDEA](img/B21757_20_6.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 6 – 自定义应用程序，使用 IntelliJ IDEA 添加新配置](img/B21757_20_6.jpg)'
- en: Appendix figure 6 – Custom applications, Add New Configuration with IntelliJ
    IDEA
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 6 – 自定义应用程序，使用 IntelliJ IDEA 添加新配置
- en: 'Now, you can give it a name such as `chapter01.00 (bootRun)` and select the
    actual milestone directory for this configuration. Finally, enter `tomcatRun`
    under the **Run** option to execute, as shown in the following screenshot:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以给它起一个名字，例如 `chapter01.00 (bootRun)` 并选择此配置的实际里程碑目录。最后，在 **运行** 选项下输入 `tomcatRun`
    以执行，如图下截图所示：
- en: '![Appendix figure 7 – Custom project, Run with IntelliJ IDEA](img/B21757_20_7.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 7 – 自定义项目，使用 IntelliJ IDEA 运行](img/B21757_20_7.jpg)'
- en: Appendix figure 7 – Custom project, Run with IntelliJ IDEA
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 7 – 自定义项目，使用 IntelliJ IDEA 运行
- en: Select the configuration you want to execute; click on the green **Run** button
    (as shown in [*Appendix*](B21757_20.xhtml#_idTextAnchor642)*figure 7*).
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您要执行的配置；点击绿色 **运行** 按钮（如图 [*附录*](B21757_20.xhtml#_idTextAnchor642)*图 7*）。
- en: In the next section, we will cover the usage of **Eclipse** to run the sample
    code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍使用 **Eclipse** 运行示例代码的方法。
- en: Using the samples in Eclipse
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Eclipse 中的示例
- en: In this section, we will cover the sample applications usage within Eclipse.
    Across all projects, a `Tomcat` plugin has been set up using `Gradle` or `Maven`
    to facilitate the rapid initiation of an embedded instance, expediting your initial
    setup process.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 Eclipse 中示例应用程序的使用。在所有项目中，已使用 `Gradle` 或 `Maven` 设置了一个 `Tomcat` 插件，以促进快速启动嵌入式实例，加快您的初始设置过程。
- en: Importing projects in Eclipse
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Eclipse 中导入项目
- en: After you download and install your Eclipse IDE ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)),
    launch Eclipse.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在您下载并安装 Eclipse IDE ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    之后，启动 Eclipse。
- en: 'When you first open Eclipse, it will prompt you for the workspace location.
    You may need to go to **File** | **Switch Workspace** | **Other** to create a
    new workspace. We recommend entering a workspace location that does not contain
    any spaces. For example, look at the following screenshot:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你第一次打开 Eclipse 时，它将提示你输入工作空间位置。你可能需要转到**文件** | **切换工作空间** | **其他**来创建一个新的工作空间。我们建议输入不包含任何空格的工作空间位置。例如，看看下面的截图：
- en: '![Appendix figure 8 – Eclipse workspace choice](img/B21757_20_8.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 8 – Eclipse 工作空间选择](img/B21757_20_8.jpg)'
- en: Appendix figure 8 – Eclipse workspace choice
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 8 – Eclipse 工作空间选择
- en: Once you have created a new workspace, choose **Import Projects**.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了一个新的工作空间，选择**导入项目**。
- en: 'This time, we will choose **Existing** **Maven Projects**:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，我们将选择**现有** **Maven 项目**：
- en: '![Appendix figure 9 – Eclipse project import as Maven project](img/B21757_20_9.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 9 – 将 Eclipse 项目导入为 Maven 项目](img/B21757_20_9.jpg)'
- en: Appendix figure 9 – Eclipse project import as Maven project
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 9 – 将 Eclipse 项目导入为 Maven 项目
- en: 'Browse to the location you exported the code to and select the parent folder
    of the code. You will see all the projects listed. You can select the projects
    you are interested in or leave all the projects selected. If you decide to import
    all the projects, you can easily focus on the current chapter since the naming
    conventions will ensure that the projects are sorted in the order that they are
    presented in the book:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到导出代码的位置，并选择代码的父文件夹。你将看到所有项目列出来。你可以选择你感兴趣的项目，或者保留所有项目被选中。如果你决定导入所有项目，你可以轻松地专注于当前章节，因为命名约定将确保项目按照在书中展示的顺序排序：
- en: '![Appendix figure 10 – Eclipse Maven project import confirmation](img/B21757_20_10.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 10 – Eclipse Maven 项目导入确认](img/B21757_20_10.jpg)'
- en: Appendix figure 10 – Eclipse Maven project import confirmation
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 10 – Eclipse Maven 项目导入确认
- en: 'You will be able to work with any of the chapters, and the layout will look
    as shown in the following screenshot:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将能够处理任何章节，布局将如以下截图所示：
- en: '![Appendix figure 11 – Chapters presentation layout with Eclipse](img/B21757_20_11.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 11 – 使用 Eclipse 的章节展示布局](img/B21757_20_11.jpg)'
- en: Appendix figure 11 – Chapters presentation layout with Eclipse
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 11 – 使用 Eclipse 的章节展示布局
- en: After importing the project in **Eclipse**, you can run your code following
    the guidance provided in the next section.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Eclipse**中导入项目后，你可以按照下一节提供的指导运行你的代码。
- en: Running the samples within Eclipse
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Eclipse 内运行示例
- en: 'To execute each milestone project, you can proceed with the subsequent steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行每个里程碑项目，你可以按照以下步骤进行：
- en: For each spring-boot project (starting from [*Chapter 3*](B21757_03.xhtml#_idTextAnchor068)*,
    Custom Authentication*), you can simply click on the **Run** button in Eclipse,
    or right-click on your project and select **Run As** | **Java Application**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个 spring-boot 项目（从[*第 3 章*](B21757_03.xhtml#_idTextAnchor068)*，自定义身份验证*）开始，你只需在
    Eclipse 中点击**运行**按钮，或者右键单击你的项目并选择**运行方式** | **Java 应用程序**。
- en: '![Appendix figure 12 – Running the Spring Boot project with Eclipse](img/B21757_20_12.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 12 – 使用 Eclipse 运行 Spring Boot 项目](img/B21757_20_12.jpg)'
- en: Appendix figure 12 – Running the Spring Boot project with Eclipse
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 12 – 使用 Eclipse 运行 Spring Boot 项目
- en: 'For other projects, you can use the terminal, go to the **Run** button using
    **Eclipse**, or right-click on your project and select **Run Configurations**:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于其他项目，你可以使用终端，使用 **Eclipse** 中的**运行**按钮，或者右键单击你的项目并选择**运行配置**：
- en: '![Appendix figure 13 – Custom applications, Run with Eclipse](img/B21757_20_13.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![附录图 13 – 自定义应用程序，使用 Eclipse 运行](img/B21757_20_13.jpg)'
- en: Appendix figure 13 – Custom applications, Run with Eclipse
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 附录图 13 – 自定义应用程序，使用 Eclipse 运行
- en: In the `package cargo:run`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `package cargo:run`。
- en: Starting the samples from the command line
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行启动示例
- en: In [*Chapter 1*](B21757_01.xhtml#_idTextAnchor015), *Anatomy of an Unsafe Application*,
    and [*Chapter 2*](B21757_02.xhtml#_idTextAnchor043), *Getting Started with Spring
    Security*, you will use different tasks to run the project.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 1 章*](B21757_01.xhtml#_idTextAnchor015)，*不安全应用程序的解剖结构*，和[*第 2 章*](B21757_02.xhtml#_idTextAnchor043)，*Spring
    Security 入门*中，你将使用不同的任务来运行项目。
- en: 'If you’re using `Gradle`, run the following command to start the application:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用 `Gradle`，运行以下命令来启动应用程序：
- en: '[PRE13]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ./mvnw package cargo:run
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ./mvnw package cargo:run
- en: '[PRE14]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For the rest of the chapters in the book (starting from [*Chapter 3*](B21757_03.xhtml#_idTextAnchor068)*,
    Custom Authentication*), Spring Boot has been used:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的其余章节（从 [*第 3 章*](B21757_03.xhtml#_idTextAnchor068)*，自定义身份验证*）开始，使用了 Spring
    Boot：
- en: 'If you’re using `Gradle`, run the following command to start the application:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 `Gradle`，请运行以下命令来启动应用程序：
- en: '[PRE15]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ./mvnw spring-boot:run
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`./mvnw spring-boot:run`'
- en: '[PRE16]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In general, for every section of the book, there’s a `README.md` file in the
    root directory of each chapter milestone. This file includes the necessary commands
    to launch the application, tailored to your preferred build tool.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于本书的每个章节部分，每个章节里程碑的根目录中都有一个 `README.md` 文件。此文件包括启动应用程序所需的必要命令，针对你首选的构建工具进行了定制。
- en: In the following section, we’ll address the generation of a server certificate.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论生成服务器证书。
- en: Generating a server certificate
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成服务器证书
- en: Some of the chapters sample code (that is, [*Chapter 8*](B21757_08.xhtml#_idTextAnchor261),
    *Client Certificate Authentication with TLS*, [*Chapter 9*](B21757_09.xhtml#_idTextAnchor295),
    *Opening up to OAuth2*, [*Chapter 10*](B21757_10.xhtml#_idTextAnchor314), *SAML
    2 Support*, and [*Chapter 18*](B21757_18.xhtml#_idTextAnchor591), *Single Sign-On
    with the Central Authentication Service*) requires the use of HTTPS in order for
    the sample code to work.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一些章节的示例代码（即，[*第 8 章*](B21757_08.xhtml#_idTextAnchor261)*，使用 TLS 的客户端证书身份验证*，[*第
    9 章*](B21757_09.xhtml#_idTextAnchor295)*，开放 OAuth2*，[*第 10 章*](B21757_10.xhtml#_idTextAnchor314)*，SAML
    2 支持*，以及 [*第 18 章*](B21757_18.xhtml#_idTextAnchor591)*，使用中央认证服务进行单点登录*）需要使用 HTTPS
    才能使示例代码正常工作。
- en: Some projects have been configured to run `HTTPS`; most of the configuration
    is managed in properties or `YAML` files.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目已经配置为运行 `HTTPS`；大多数配置都在属性或 `YAML` 文件中管理。
- en: Now, when you run the sample code on the embedded Tomcat server from `Maven`
    or `Gradle`, you can connect to `http://localhost:8080` or `https://localhost:8443`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你从 `Maven` 或 `Gradle` 运行嵌入式 Tomcat 服务器上的示例代码时，你可以连接到 `http://localhost:8080`
    或 `https://localhost:8443`。
- en: If you do not already have a certificate, you must first generate one.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有证书，你必须首先生成一个。
- en: If you wish, you can skip this step and use the `tomcat.keystore` file, which
    contains a certificate that is located in the `src/main/resources/keys` directory
    in the book’s sample source.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以跳过此步骤并使用包含证书的 `tomcat.keystore` 文件，该证书位于书中示例源代码的 `src/main/resources/keys`
    目录中。
- en: 'Enter the following command lines at the command prompt:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符中输入以下命令行：
- en: '[PRE17]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Most of the values are self-explanatory, but you will want to ensure that the
    answer to **What is your first and last name?** is the host that you will be accessing
    your web application from. This is necessary to ensure that the SSL handshake
    will succeed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数值都是不言自明的，但你需要确保对 **你的姓名是什么？** 的回答是你将访问 Web 应用程序的宿主。这是确保 SSL 握手成功所必需的。
- en: 'You should now have a file in the current directory named `tomcat.keystore`.
    You can view its contents using the following command from within the same directory:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该有一个名为 `tomcat.keystore` 的文件位于当前目录中。你可以使用以下命令在相同目录下查看其内容：
- en: '[PRE18]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you may have guessed, it is insecure to use `changeit` as a password, as
    this is the default password used with many JDK implementations. In a production
    environment, you should use a secure password rather than something as simple
    as `changeit`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，使用 `changeit` 作为密码是不安全的，因为这是许多 JDK 实现中使用的默认密码。在生产环境中，你应该使用一个安全的密码，而不是像
    `changeit` 这样简单的密码。
- en: For additional information about the `keytool` command, refer to the documentation
    found on Oracle’s website ([https://docs.oracle.com/en/java/javase/17/docs/specs/man/keytool.xhtml](https://docs.oracle.com/en/java/javase/17/docs/specs/man/keytool.xhtml)).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `keytool` 命令的更多信息，请参阅 Oracle 网站上的文档（[https://docs.oracle.com/en/java/javase/17/docs/specs/man/keytool.xhtml](https://docs.oracle.com/en/java/javase/17/docs/specs/man/keytool.xhtml)）。
- en: If you are having issues, you might also find the *CAS SSL Troubleshooting and
    Reference Guide* helpful ([https://apereo.github.io/cas/7.0.x/installation/Troubleshooting-Guide.xhtml](https://apereo.github.io/cas/7.0.x/installation/Troubleshooting-Guide.xhtml)).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到问题，你可能还会发现 *CAS SSL 故障排除和参考指南* 有所帮助（[https://apereo.github.io/cas/7.0.x/installation/Troubleshooting-Guide.xhtml](https://apereo.github.io/cas/7.0.x/installation/Troubleshooting-Guide.xhtml)）。
- en: Supplementary materials
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 补充材料
- en: 'This section contains a listing of additional resources to technologies and
    concepts that are used throughout the book:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含了一本书中使用的各种技术和概念的资源列表：
- en: '**Java Development Kit Downloads**: Refer to [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/)
    for downloading the JDK.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java 开发工具包下载**: 请参考 [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/)
    以下载 JDK。'
- en: '**MVC Architecture**: Refer to [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller).'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MVC 架构**: 请参考 [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)。'
- en: '**Spring Security site**: Refer to [https://spring.io/projects/spring-security](https://spring.io/projects/spring-security).
    You can find links to the Spring Security Javadoc, downloads, source code, and
    reference at this link.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Security 网站地址**: 请参考 [https://spring.io/projects/spring-security](https://spring.io/projects/spring-security).
    您可以通过此链接找到 Spring Security Javadoc、下载、源代码和参考链接。'
- en: '**Spring Framework**: Refer to [https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/).
    You can find links to the Spring Framework Javadoc, downloads, source code, and
    reference from this link.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring 框架**: 请参考 [https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/)。您可以通过此链接找到
    Spring 框架 Javadoc、下载、源代码和参考链接。'
- en: '**Spring Boot**: Refer to [https://projects.spring.io/spring-boot/](https://projects.spring.io/spring-boot/).
    You can find links to the Spring Boot Javadoc, downloads, source code, and reference
    from this link.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Boot**: 请参考 [https://projects.spring.io/spring-boot/](https://projects.spring.io/spring-boot/)。您可以通过此链接找到
    Spring Boot Javadoc、下载、源代码和参考链接。'
- en: '**Spring Data**: Refer to [https://projects.spring.io/spring-data/](https://projects.spring.io/spring-data/).
    You can find links to the Spring Data Javadoc, downloads, source code, and reference
    from this link. In this book, we covered three of the sub-projects of Spring Data,
    including Spring Data JPA ([https://projects.spring.io/spring-data-jpa/](https://projects.spring.io/spring-data-jpa/))
    and Spring Data MongoDB ([https://projects.spring.io/spring-data-mongodb/](https://projects.spring.io/spring-data-mongodb/)).'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Data**: 请参考 [https://projects.spring.io/spring-data/](https://projects.spring.io/spring-data/)。您可以通过此链接找到
    Spring Data Javadoc、下载、源代码和参考链接。在这本书中，我们涵盖了 Spring Data 的三个子项目，包括 Spring Data
    JPA ([https://projects.spring.io/spring-data-jpa/](https://projects.spring.io/spring-data-jpa/))
    和 Spring Data MongoDB ([https://projects.spring.io/spring-data-mongodb/](https://projects.spring.io/spring-data-mongodb/))。'
- en: '**Maven**: For more information about Maven, visit their site at [https://maven.apache.org](https://maven.apache.org).
    For more information about Maven transitive dependencies, refer to the *Introduction
    to the Dependency Mechanism* documentation at [https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.xhtml#Transitive_Dependencies](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.xhtml#Transitive_Dependencies).'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven**: 如需了解更多关于 Maven 的信息，请访问他们的网站 [https://maven.apache.org](https://maven.apache.org)。有关
    Maven 传递依赖的更多信息，请参阅 *依赖机制简介* 文档，链接为 [https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.xhtml#Transitive_Dependencies](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.xhtml#Transitive_Dependencies)。'
- en: '`Gradle` ([https://gradle.org](https://gradle.org)) instead of using `Maven`.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Gradle` ([https://gradle.org](https://gradle.org)) 而不是使用 `Maven`。
- en: '**Object-relational mapping (ORM)**: You can find more general information
    on Wikipedia at [https://en.wikipedia.org/wiki/Object-relational_mapping](https://en.wikipedia.org/wiki/Object-relational_mapping).
    If you want more hands-on instruction, you may also be interested in the Hibernate
    (a common Java ORM framework) documentation at [https://hibernate.org/](https://hibernate.org/).'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系映射 (ORM)**: 您可以在维基百科上找到更多一般信息，链接为 [https://en.wikipedia.org/wiki/Object-relational_mapping](https://en.wikipedia.org/wiki/Object-relational_mapping)。如果您想获得更多实践指导，您可能还会对
    Hibernate（一个常见的 Java ORM 框架）的文档感兴趣，链接为 [https://hibernate.org/](https://hibernate.org/)。'
- en: 'The following are UI technologies:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些 UI 技术：
- en: '**JSP**: You can find more information about JSP on Oracle’s site at [https://www.oracle.com/technical-resources/articles/javase/servlets-jsp.xhtml](https://www.oracle.com/technical-resources/articles/javase/servlets-jsp.xhtml).'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSP**: 您可以在 Oracle 的网站上找到更多关于 JSP 的信息，链接为 [https://www.oracle.com/technical-resources/articles/javase/servlets-jsp.xhtml](https://www.oracle.com/technical-resources/articles/javase/servlets-jsp.xhtml)。'
- en: '**Thymeleaf**: This is a modern, tempting framework that provides an excellent
    alternative to JSP. An additional benefit is that it provides support for both
    Spring and Spring Security out of the box. You can find more information about
    Thymeleaf at [https://www.thymeleaf.org/](https://www.thymeleaf.org/).'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Thymeleaf**: 这是一个现代且吸引人的框架，它为JSP提供了一个出色的替代方案。额外的优势是它默认提供对Spring和Spring Security的支持。你可以在[https://www.thymeleaf.org/](https://www.thymeleaf.org/)找到更多关于Thymeleaf的信息。'
