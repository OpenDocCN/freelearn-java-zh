- en: Chapter 1. Key Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 关键特性
- en: After a quick introduction about what Apache Camel is, this chapter will introduce
    the key features provided by Camel. It provides just an overview of these features;
    the details will come in dedicated chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在简要介绍Apache Camel是什么之后，本章将介绍Camel提供的关键特性。它仅提供了这些特性的概述；详细信息将在专门的章节中介绍。
- en: In an enterprise, you see a lot of different software and systems in the IT
    ecosystem. In order to consolidate the data and sync the systems, the enterprise
    would want to implement communication and integration of these systems. This communication
    or integration is not so easy, as we have to deal with the specifications on each
    system the protocol and the message's data format are different most of the time,
    so we have to transform and adapt to each system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业中，您在IT生态系统中会看到许多不同的软件和系统。为了整合数据和同步系统，企业希望实现这些系统的通信和集成。这种通信或集成并不容易，因为我们必须处理每个系统的规范，协议和消息的数据格式通常都不同，因此我们必须转换和适应每个系统。
- en: Using point-to-point communication is one option. However, the problem with
    this approach is that we tighten the integration of a couple of systems. Changing
    to other systems or protocols requires refactoring of the implementation. Moreover,
    dealing with multiple systems is not so easy with point-to-point.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用点对点通信是一种选择。然而，这种方法的缺点是我们紧密集成了几个系统。切换到其他系统或协议需要重构实现。此外，使用点对点处理多个系统并不容易。
- en: So, instead of point-to-point, we use mediation. Mediation reduces complexity
    and provides a more flexible approach by adding and using a tier between the systems
    (man in the middle). The purpose is to facilitate the information flow and integration
    of the systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不是使用点对点，而是使用中介。中介通过在系统之间添加和使用一个层（中间人）来减少复杂性，并提供了一种更灵活的方法。目的是促进信息流和系统的集成。
- en: Apache Camel is a mediation framework.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel是一个中介框架。
- en: What is Apache Camel?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Apache Camel？
- en: Apache Camel originated in Apache ServiceMix. Apache ServiceMix 3 was powered
    by the Spring framework and implemented in the JBI specification. The **Java Business
    Integration** (**JBI**) specification proposed a Plug and Play approach for integration
    problems. JBI was based on WebService concepts and standards. For instance, it
    directly reuses the **Message Exchange Patterns** (**MEP**) concept that comes
    from **WebService Description Language** (**WSDL**).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel起源于Apache ServiceMix。Apache ServiceMix 3由Spring框架提供支持，并按照JBI规范实现。**Java业务集成**（**JBI**）规范提出了一种即插即用的集成方法。JBI基于Web服务概念和标准。例如，它直接重用了来自**Web服务描述语言**（**WSDL**）的**消息交换模式**（**MEP**）概念。
- en: Camel reuses some of these concepts, for instance, you will see that we have
    the concept of MEP in Camel.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Camel重用了这些概念中的一些，例如，您会看到我们在Camel中有MEP的概念。
- en: 'However, JBI suffered mostly from two issues:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，JBI主要面临两个问题：
- en: In JBI, all messages between endpoints are transported in the **Normalized Messages
    Router** (**NMR**).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JBI中，所有端点之间的消息都在**标准化消息路由器**（**NMR**）中传输。
- en: In the NMR, a message has a standard XML format. As all messages in the NMR
    have the same format, it's easy to audit messages and the format is predictable.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在核磁共振（NMR）中，消息具有标准的XML格式。由于NMR中的所有消息都具有相同的格式，因此审计消息和预测格式都很简单。
- en: 'However, the JBI XML format has an important drawback for performances: it
    needs to marshall and unmarshall the messages. Some protocols (such as REST or
    RMI) are not easy to describe in XML.'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，JBI的XML格式在性能上有一个重要的缺点：它需要序列化和反序列化消息。一些协议（如REST或RMI）在XML中描述起来并不容易。
- en: For instance, REST can work in stream mode. It doesn't make sense to marshall
    streams in XML.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，REST可以在流模式下工作。在XML中序列化流是没有意义的。
- en: Camel is payload-agnostic. This means that you can transport any kind of messages
    with Camel (not necessary XML formatted).
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Camel对有效载荷不敏感。这意味着您可以使用Camel传输任何类型的消息（不一定是XML格式）。
- en: JBI describes a packaging. We distinguish the binding components (responsible
    for the interaction with the system outside of the NMR and the handling of the
    messages in the NMR), and the service engines (responsible for transforming the
    messages inside the NMR).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBI描述了一个包装。我们区分绑定组件（负责与NMR外部的系统交互以及处理NMR中的消息），以及服务引擎（负责在NMR内部转换消息）。
- en: However, it's not possible to directly deploy the endpoints based on these components.
    JBI requires a service unit (a ZIP file) per endpoint, and for each package in
    a service assembly (another ZIP file). JBI also splits the description of the
    endpoint from its configuration.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，基于这些组件直接部署端点是不可能的。JBI要求每个端点一个服务单元（一个ZIP文件），以及每个服务组装中的每个包（另一个ZIP文件）。JBI还将端点的描述与其配置分开。
- en: 'It does not result in a very flexible packaging: with definitions and configurations
    scattered in different files, not easy to maintain. In Camel, the configuration
    and definition of the endpoints are gathered in a simple URI. It''s easier to
    read.'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这并不会导致一个非常灵活的打包：由于定义和配置分散在不同的文件中，不易维护。在Camel中，端点的配置和定义被收集在一个简单的URI中。它更容易阅读。
- en: Moreover, Camel doesn't force any packaging; the same definition can be packaged
    in a simple XML file, OSGi bundle, and regular JAR file.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，Camel不强制任何打包；相同的定义可以打包在一个简单的XML文件、OSGi捆绑包和常规JAR文件中。
- en: In addition to JBI, another foundation of Camel is the book *Enterprise Integration
    Patterns by Gregor Hohpe and Bobby Woolf*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了JBI，Camel的另一个基础是Gregor Hohpe和Bobby Woolf合著的书籍《企业集成模式》。
- en: This book describes design patterns answering classical problems while dealing
    with enterprise application integration and message oriented middleware.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书描述了设计模式，这些模式在处理企业应用集成和面向消息的中间件时解决经典问题。
- en: The book describes the problems and the patterns to solve them. Camel strives
    to implement the patterns described in the book to make them easy to use and let
    the developer concentrate on the task at hand.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书描述了问题和解决这些问题的模式。Camel力求实现书中描述的模式，使它们易于使用，让开发者专注于手头的任务。
- en: 'This is what Camel is: an open source framework that allows you to integrate
    systems and that comes with a lot of connectors and **Enterprise Integration Patterns**
    (**EIP**) components out of the box. And if that is not enough, one can extend
    and implement custom components.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Camel：一个开源框架，允许你集成系统，并且自带许多连接器和**企业集成模式**（**EIP**）组件。如果还不够，还可以扩展和实现自定义组件。
- en: Components and bean support
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件和bean支持
- en: Apache Camel ships with a wide variety of components out of the box; currently,
    there are more than 100 components available.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel自带了大量的组件；目前，有超过100个组件可用。
- en: 'We can see:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到：
- en: The connectivity components that allow exposure of endpoints for external systems
    or communicate with external systems. For instance, the FTP, HTTP, JMX, WebServices,
    JMS, and a lot more components are connectivity components. Creating an endpoint
    and the associated configuration for these components is easy, by directly using
    a URI.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许外部系统暴露端点或与外部系统通信的连接性组件。例如，FTP、HTTP、JMX、WebServices、JMS以及许多其他组件都是连接性组件。通过直接使用URI，为这些组件创建端点和相关的配置非常简单。
- en: The internal components applying rules to the messages internally to Camel.
    These kinds of components apply validation or transformation rules to the inflight
    message. For instance, validation or XSLT are internal components.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用内部规则到Camel消息内部的内部组件。这类组件对飞行中的消息应用验证或转换规则。例如，验证或XSLT是内部组件。
- en: Thanks to this, Camel brings a very powerful connectivity and mediation framework.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了这一点，Camel带来了一个非常强大的连接性和中介框架。
- en: Moreover, it's pretty easy to create new custom components, allowing you to
    extend Camel if the default components set doesn't match your requirements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，创建新的自定义组件非常简单，允许你在默认组件集不符合你的要求时扩展Camel。
- en: It's also very easy to implement complex integration logic by creating your
    own processors and reusing your beans. Camel supports beans frameworks (IoC),
    such as Spring or Blueprint.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建自己的处理器和重用你的bean，实现复杂的集成逻辑也非常容易。Camel支持bean框架（IoC），如Spring或Blueprint。
- en: Predicates and expressions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谓词和表达式
- en: As we will see later, most of the EIP need a rule definition to apply a routing
    logic to a message. The rule is described using an expression.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们稍后将要看到的，大多数EIP需要一个规则定义来将路由逻辑应用到消息上。规则使用表达式来描述。
- en: It means that we have to define expressions or predicates in the Enterprise
    Integration Patterns. An expression returns any kind of value, whereas a predicate
    returns true or false only.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们不得不在企业集成模式中定义表达式或谓词。一个表达式返回任何类型的值，而一个谓词只返回真或假。
- en: Camel supports a lot of different languages to declare expressions or predicates.
    It doesn't force you to use one, it allows you to use the most appropriate one.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 支持许多不同的语言来声明表达式或谓词。它不会强迫您使用其中之一，而是允许您使用最合适的一种。
- en: For instance, Camel supports xpath, mvel, ognl, python, ruby, PHP, JavaScript,
    SpEL (Spring Expression Language), Groovy, and so on as expression languages.
    It also provides native Camel prebuilt functions and languages that are easy to
    use such as header, constant, or simple languages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Camel 支持xpath、mvel、ognl、python、ruby、PHP、JavaScript、SpEL（Spring 表达式语言）、Groovy
    等作为表达式语言。它还提供了易于使用的本地 Camel 预构建函数和语言，例如 header、constant 或简单语言。
- en: Data format and type conversion
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据格式和类型转换
- en: Camel is payload-agnostic. This means that it can support any kind of message.
    Depending on the endpoints, it could be required to convert from one format to
    another. That's why Camel supports different data formats, in a pluggable way.
    This means that Camel can marshall or unmarshall a message in a given format.
    For instance, in addition to the standard JVM serialization, Camel natively supports
    Avro, JSON, protobuf, JAXB, XmlBeans, XStream, JiBX, SOAP, and so on.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 对有效载荷是中立的。这意味着它可以支持任何类型的信息。根据端点，可能需要从一种格式转换为另一种格式。这就是为什么 Camel 支持不同的数据格式，以可插拔的方式。这意味着
    Camel 可以在给定的格式中打包或解包消息。例如，除了标准的 JVM 序列化之外，Camel 本地支持 Avro、JSON、protobuf、JAXB、XmlBeans、XStream、JiBX、SOAP
    等。
- en: Depending on the endpoints and your need, you can explicitly define the data
    format during the processing of the message. On the other hand, Camel knows the
    expected format and type of endpoints. Thanks to this, Camel looks for a type
    converter, allowing to implicitly transform a message from one format to another.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据端点和您的需求，您可以在消息处理过程中显式定义数据格式。另一方面，Camel 知道端点的预期格式和类型。正因为如此，Camel 会寻找类型转换器，允许隐式地将消息从一种格式转换为另一种格式。
- en: You can also explicitly define the type converter of your choice at some points
    during the processing of the message. Camel provides a set of ready-to-use type
    converters, but, as Camel supports a pluggable model, you can extend it by providing
    your own type converters. It's a simple POJO to implement.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在消息处理过程中的某些点显式定义您选择的类型转换器。Camel 提供了一套现成的类型转换器，但作为 Camel 支持可插拔模型，您可以通过提供自己的类型转换器来扩展它。这是一个简单的
    POJO 实现。
- en: Easy configuration and URI
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易于配置和 URI
- en: Camel uses a different approach based on URI. The endpoint itself and its configuration
    are on the URI.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 使用基于 URI 的不同方法。端点及其配置都在 URI 上。
- en: The URI is human readable and provides the details of the endpoint, which is
    the endpoint component and the endpoint configuration.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: URI 是人类可读的，并提供了端点的详细信息，包括端点组件和端点配置。
- en: As this URI is part of the complete configuration (which defines what we name
    a route, as we will see later), it's possible to have a complete overview of the
    integration logic and connectivity in a row. We will cover this in detail in [Chapter
    2](ch02.html "Chapter 2. Core Concepts"), *Core Concepts*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此 URI 是完整配置的一部分（它定义了我们稍后将命名的路由，正如我们将看到的），因此可以一行内获得集成逻辑和连接的完整概述。我们将在[第 2 章](ch02.html
    "第 2 章。核心概念")*核心概念*中详细讨论这一点。
- en: Lightweight and different deployment topologies
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轻量级和不同的部署拓扑
- en: Camel itself is very light. The Camel core is only around 2 MB, and contains
    everything required to run Camel. As it's based on a pluggable architecture, all
    Camel components are provided as external modules, allowing you to install only
    what you need, without installing superfluous and needlessly heavy modules.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 本身非常轻量。Camel 核心仅约 2 MB，包含运行 Camel 所需的一切。由于它基于可插拔架构，所有 Camel 组件都作为外部模块提供，允许您仅安装所需的模块，而无需安装多余的、不必要的重模块。
- en: 'As we saw, Camel is based on simple POJO, which means that the Camel core doesn''t
    depend on other frameworks: it''s an atomic framework and is ready to use. All
    other modules (components, DSL, and so on) are built on top of this Camel core.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，Camel 基于简单的 POJO，这意味着 Camel 核心不依赖于其他框架：它是一个原子框架，并准备好使用。所有其他模块（组件、DSL
    等）都是建立在 Camel 核心之上的。
- en: 'Moreover, Camel is not tied to one container for deployment. Camel supports
    a wide range of containers to run. They are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Camel 并不局限于一个容器进行部署。Camel 支持广泛的容器来运行。它们如下所示：
- en: A J2EE application server such as WebSphere, WebLogic, JBoss, and so on
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 J2EE 应用服务器，如 WebSphere、WebLogic、JBoss 等
- en: A Web container such as Apache Tomcat
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Web 容器，如 Apache Tomcat
- en: An OSGi container such as Apache Karaf
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Karaf 等OSGi容器
- en: A standalone application using frameworks such as Spring
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Spring 等框架的独立应用程序
- en: Camel gives a lot of flexibility, allowing you to embed it into your application
    or to use an enterprise-ready container.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Camel 提供了很大的灵活性，允许您将其嵌入到您的应用程序中或使用企业级容器。
- en: Quick prototyping and testing support
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速原型设计和测试支持
- en: 'In any integration project, it''s typical that we have some part of the integration
    logic not yet available. For instance:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何集成项目中，通常我们有一些集成逻辑尚未可用。例如：
- en: The application to integrate with has not yet been purchased or not yet ready
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要集成的应用程序尚未购买或尚未准备就绪
- en: The remote system to integrate with has a heavy cost, not acceptable during
    the development phase
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要集成的远程系统成本高昂，在开发阶段不可接受
- en: Multiple teams work in parallel, so we may have some kinds of deadlocks between
    the teams
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个团队并行工作，因此我们可能在团队之间遇到某些类型的死锁
- en: As a complete integration framework, Camel provides a very easy way to prototype
    part of the integration logic. Even if you don't have the actual system to integrate,
    you can simulate this system (mock), as it allows you to implement your integration
    logic without waiting for dependencies. The mocking support is directly part of
    the Camel core and doesn't require any additional dependency.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为完整的集成框架，Camel 提供了一种非常简单的方式来原型化集成逻辑的一部分。即使您没有实际的集成系统，您也可以模拟这个系统（模拟），因为它允许您在不等待依赖项的情况下实现集成逻辑。模拟支持是
    Camel 核心的直接部分，不需要任何额外的依赖。
- en: Along the same lines, testing is also crucial in an integration project. In
    such a kind of project, a lot of errors can happen and most are unforeseen. Moreover,
    a small change in an integration process might impact a lot of other processes.
    Camel provides the tools to easily test your design and integration logic, allowing
    you to integrate this in a continuous integration platform.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在集成项目中，测试也非常关键。在这种类型的项目中，可能会发生许多错误，其中大多数是未预见的。此外，集成过程中的微小变化可能会影响许多其他过程。Camel
    提供了工具，可以轻松测试您的设计和集成逻辑，并允许您将其集成到持续集成平台中。
- en: Management and monitoring using JMX
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JMX 进行管理和监控
- en: 'Apache Camel uses the Java Management Extension (JMX) standard and provides
    a lot of insights into the system using MBeans (Management Beans), providing a
    detailed view of the following current system:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 使用 Java 管理扩展 (JMX) 标准，并通过 MBeans（管理豆）提供了对系统的深入了解，以下是对当前系统的详细视图：
- en: The different integration processes with the associated metrics
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与相关指标关联的不同集成过程
- en: The different components and endpoints with the associated metrics
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与相关指标关联的不同组件和端点
- en: Moreover, these MBeans provide more insights than metrics. They also provide
    the operations to manage Camel. For instance, the operations allow you to stop
    an integration process, to suspend an endpoint, and so on. Using a combination
    of metrics and operations, you can configure a very agile integration solution.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些 MBeans 提供的见解比指标更多。它们还提供了管理 Camel 的操作。例如，这些操作允许您停止集成过程，挂起端点等。通过结合指标和操作，您可以配置一个非常灵活的集成解决方案。
- en: Active community
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活跃的社区
- en: The Apache Camel community is very active. This means that potential issues
    are identified very quickly and a fix is available soon after. However, it also
    means that a lot of ideas and contributions are proposed, giving more and more
    features to Camel.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 社区非常活跃。这意味着潜在问题可以很快被发现，并且很快就有修复方案。然而，这也意味着提出了许多想法和贡献，为 Camel 增加了越来越多的功能。
- en: Another big advantage of an active community is that you will never be alone;
    a lot of people are active on the mailing lists who are ready to answer your question
    and provide advice.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃社区的另一大优势是您永远不会孤单；邮件列表上有很多人活跃，他们准备好回答您的问题并提供建议。
- en: Apache Camel is an enterprise integration solution used in many large organizations
    with enterprise support available through RedHat or Talend.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Camel 是一个在企业组织中广泛使用的企业集成解决方案，通过 RedHat 或 Talend 提供企业级支持。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter briefly introduced Camel and where it's come from. It mainly introduced
    Camel's key features. In the next chapter, before dealing with some of these features
    in detail, we will introduce the Camel core concepts, which will help you easily
    understand the further chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了 Camel 及其来源。主要介绍了 Camel 的关键特性。在下一章中，在详细处理这些特性之前，我们将介绍 Camel 的核心概念，这将有助于您轻松理解后续章节。
