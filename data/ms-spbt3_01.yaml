- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Advanced Spring Boot Concepts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Spring Boot 概念介绍
- en: Welcome to this guide to mastering projects with Spring Boot 3.0\. This book
    isn’t a manual; instead, it serves as your roadmap to navigate the complex world
    of modern Java development. Spring Boot is not a newcomer but a mature framework
    that has been simplifying Java development for years. But in the 3.0 release,
    Spring Boot has made the development process even more seamless and more convenient
    to use. Java 17 is the minimum version of Java required with Spring Boot 3.0,
    and Java 19 is also among the versions supported, which ensures that developers
    will be able to utilize the latest features or improvements of Java. Spring Boot
    3.0 presents AppStartup – a feature to register callbacks in different stages
    of application startup, aiding with tasks such as resource initialization and
    configuration error checking. In addition to that, there is a new algorithm in
    Spring Boot 3.0 for dependency resolution to help increase the start speed and
    lower the memory footprint, so more complex projects are handled more efficiently.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到掌握 Spring Boot 3.0 项目指南之旅。这本书不是一本手册；相反，它充当你探索现代 Java 开发复杂世界的路线图。Spring Boot
    不是一个新来者，而是一个成熟的框架，多年来一直在简化 Java 开发。但在 3.0 版本中，Spring Boot 使开发过程变得更加无缝和方便使用。Java
    17 是与 Spring Boot 3.0 一起所需的最低 Java 版本，Java 19 也支持这些版本之一，这确保了开发者能够利用 Java 的最新特性和改进。Spring
    Boot 3.0 提出了 AppStartup – 一个在应用程序启动的不同阶段注册回调的功能，有助于资源初始化和配置错误检查等任务。除此之外，Spring
    Boot 3.0 还引入了一种新的依赖解析算法，有助于提高启动速度并降低内存占用，因此可以更有效地处理更复杂的项目。
- en: By the time you finish reading this book, you will not just be familiar but
    proficient, efficient, and, most importantly, capable of implementing Spring Boot
    effectively in real-world scenarios.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成这本书的阅读时，您将不仅熟悉，而且熟练、高效，最重要的是，能够在实际场景中有效地实施 Spring Boot。
- en: So, what can you expect in this chapter? We will delve into why Spring Boot
    stands out as the preferred framework for projects. We’ll explore its advantages
    and the new features of Spring Boot 3.0\. This chapter lays the foundation for
    using Spring Boot 3.0 more effectively, ensuring you can tackle complex projects
    confidently and skillfully. Let’s dive in!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您在本章中可以期待什么？我们将深入探讨为什么 Spring Boot 是项目首选框架的原因。我们将探讨其优势和 Spring Boot 3.0 的新特性。本章为更有效地使用
    Spring Boot 3.0 打下基础，确保您能够自信且熟练地应对复杂项目。让我们开始吧！
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Why use Spring Boot for advanced projects?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要在高级项目中使用 Spring Boot？
- en: A brief overview of what’s to come
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对即将介绍内容的简要概述
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no technical requirements for this chapter. The code blocks included
    in this chapter are used to explain certain concepts and are not meant to be executed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求。本章包含的代码块用于解释某些概念，并不打算执行。
- en: Why use Spring Boot for advanced projects?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要在高级项目中使用 Spring Boot？
- en: Welcome to the beginning of your journey into the world of Spring Boot 3.0!
    In this section, we are going to talk about the potential that Spring Boot has
    for creating the most sophisticated software projects. We are going to elaborate
    on why Spring Boot is more than a framework but less simple. It will be your best
    friend in dealing with the complicated challenges of software development.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到您探索 Spring Boot 3.0 世界之旅的开始！在本节中，我们将讨论 Spring Boot 在创建最复杂的软件项目方面的潜力。我们将详细阐述为什么
    Spring Boot 不仅仅是一个框架，而且更加复杂。它将是您在处理软件开发复杂挑战时的最佳伙伴。
- en: The complexity of modern software development
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代软件开发复杂性
- en: First, let’s clarify the complexity of modern software development. As you will
    know, there are lots of different challenges that arise in software projects.
    When we have a task or a project, we need to consider scalability, data security,
    orchestrating services in a cloud environment, and much more. In the old days,
    a developer was responsible for the code quality and performance. But now, we
    need to think about and cover the whole stack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们明确现代软件开发的复杂性。正如您所知，在软件项目中会出现许多不同的挑战。当我们有一个任务或项目时，我们需要考虑可扩展性、数据安全、在云环境中编排服务等等。在以前，开发者负责代码质量和性能。但现在，我们需要考虑和覆盖整个栈。
- en: Look at modern applications. They have to adjust to the evolving dynamics of
    user needs, they have to leverage cloud-native capabilities and cutting-edge technologies,
    and they have to stay secure all the time. Doing all this, while ensuring a responsive
    and reliable experience for users, is not easy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 看看现代应用程序。它们必须适应用户需求的演变动态，必须利用云原生能力和尖端技术，并且必须始终保持安全。在确保为用户提供响应和可靠体验的同时完成所有这些，并不容易。
- en: I can sense apprehension in your eyes. Don’t be afraid; we have a perfect tool
    to beat all these difficulties. It is a tool to help us navigate through this
    complicated landscape. It is a framework that simplifies development and enables
    developers to make strides in meeting the mentioned challenges. That tool is Spring
    Boot – its benefits make it a strong candidate for future projects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我能感觉到你眼中的担忧。不必害怕；我们有一个完美的工具来克服所有这些困难。这是一个帮助我们穿越这个复杂景观的工具。这是一个简化开发并使开发者能够克服所提到的挑战的框架。这个工具就是
    Spring Boot – 它的好处使其成为未来项目的有力候选者。
- en: Let’s now delve into why Spring Boot stands out as the framework of choice for
    handling advanced software projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨为什么 Spring Boot 成为了处理高级软件项目的首选框架。
- en: The advantages of Spring Boot
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Boot 的优势
- en: This section consists of the various advantages of Spring Boot. We are going
    to go through these advantages and discuss how they make our lives easier and
    how we can use them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含 Spring Boot 的各种优势。我们将逐一介绍这些优势，并讨论它们如何使我们的生活变得更轻松，以及我们如何使用它们。
- en: Advantage 1 – rapid development
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势 1 – 快速开发
- en: In the world of software development, time is the most crucial resource. We
    should get our product ready for market as soon as possible because the market
    is so competitive. Spring Boot offers a streamlined development experience, making
    it an outstanding choice for many developers. It eliminates the need for boilerplate
    configuration, enabling you to concentrate on writing business logic. With Spring
    Boot’s auto-configuration and starter dependencies, you can set up a project in
    minutes rather than hours. This feature alone saves a lot of time and effort,
    allowing developers to focus on what they do best – writing code. As you can see
    in *Figure 1**.1*, just one click in Spring Initializr is enough to start developing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发的世界里，时间是最宝贵的资源。我们应该尽快将我们的产品推向市场，因为市场竞争非常激烈。Spring Boot 提供了流线化的开发体验，使其成为许多开发者的优秀选择。它消除了样板配置的需求，使您能够专注于编写业务逻辑。借助
    Spring Boot 的自动配置和启动依赖项，您可以在几分钟内而不是几小时内设置好项目。仅此一项功能就节省了大量时间和精力，使开发者能够专注于他们最擅长的事情——编写代码。正如您在*图
    1**.1*中看到的那样，在 Spring Initializr 中只需单击一下即可开始开发。
- en: '![Figure 1.1: Spring Initializr page](img/B18400_01_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：Spring Initializr 页面](img/B18400_01_01.jpg)'
- en: 'Figure 1.1: Spring Initializr page'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Spring Initializr 页面
- en: Imagine the benefits of rapid development. It means you deliver faster, get
    stakeholders’ feedback quicker, and implement the new change requests rapidly.
    Spring Boot empowers you to be agile and responsive in a competitive market.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下快速开发的好处。这意味着您可以更快地交付，更快地获得利益相关者的反馈，并迅速实施新的变更请求。Spring Boot 使您能够在竞争激烈的市场中保持敏捷和响应。
- en: Advantage 2 – microservice ready
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势 2 – 微服务就绪
- en: As I’m sure you are aware, microservice architecture is the new age. Even when
    we design a **Mean Valuable Product** (**MVP**) for a small start-up idea, we
    are thinking in terms of a microservice structure, including asynchronous communication
    scalability, making it independently deployable, and ensuring flexibility. And
    guess which framework can help us with that? Yes, Spring Boot!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，微服务架构是新时代的产物。即使我们为一个小型初创想法设计**最小可行产品**（**MVP**），我们也是在考虑微服务结构，包括异步通信的可扩展性、使其独立部署，并确保灵活性。那么，哪个框架能帮助我们实现这一点呢？是的，Spring
    Boot！
- en: Regarding the scalability advantages of microservices, we can scale individual
    components of our application as needed, optimizing resource usage. Spring Boot’s
    support for building microservices simplifies the process, allowing you to focus
    on developing the core functionality of each service.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于微服务的可扩展性优势，我们可以根据需要扩展我们应用程序的各个组件，优化资源使用。Spring Boot 对构建微服务的支持简化了这一过程，使您能够专注于开发每个服务的核心功能。
- en: Advantage 3 – streamlined configuration
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势 3 – 流线化配置
- en: Every developer who has worked on larger or more complex projects will have
    faced the configuration management nightmare. Traditional approaches usually make
    a mess of XML files, property files, and environment-specific settings.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个在更大或更复杂的项目上工作过的开发者都会面临配置管理的噩梦。传统方法通常会使 XML 文件、属性文件和环境特定设置变得混乱。
- en: Spring Boot follows the “convention over configuration” philosophy, giving sensible
    defaults, and it provides automatic settings, which reduces the complexity of
    managing the settings.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 遵循“约定优于配置”的哲学，提供合理的默认值，并提供自动设置，从而简化了设置的管理。
- en: Ever imagined a world where you spend less time on the tweaks in configuration
    files and more on actually writing code? With Spring Boot, simplicity in the configuration
    will lead to cleaner and more maintainable code. You can do that with Spring Boot
    by following best practices and avoiding unnecessary boilerplate to focus on the
    actual functionality of your application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否想过一个世界，在那里你花在配置文件调整上的时间更少，而花在真正编写代码上的时间更多？使用 Spring Boot，配置的简单性将导致更干净、更易于维护的代码。你可以通过遵循最佳实践和避免不必要的样板代码来专注于应用程序的实际功能，从而实现这一点。
- en: 'Please see the following sample XML configuration:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下示例 XML 配置：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Introducing a service or bean in XML configuration was complicated and hard
    to manage, as you can see in the previous XML file. After you write your service,
    you need to configure it in the XML file as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XML 配置中引入服务或 Bean 是复杂且难以管理的，正如你在之前的 XML 文件中看到的。在你编写服务之后，你还需要在 XML 文件中对其进行配置。
- en: 'And now we will see how easy it is in Spring Boot. You can write your class
    with a simple `@Service` annotation and it becomes a bean:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到在 Spring Boot 中这有多简单。你可以用简单的 `@Service` 注解来编写你的类，它就变成了一个 Bean：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And the following one is the application properties file. In the previous XML
    configuration, you saw that it was hard to see and manage data source properties.
    But in Spring Boot, we can define a data source in a YAML or properties file,
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个应用程序属性文件。在之前的 XML 配置中，你看到很难看到和管理数据源属性。但在 Spring Boot 中，我们可以通过以下方式在 YAML
    或属性文件中定义数据源：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see how easy it is to make our code more readable and manageable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，让我们的代码更易于阅读和管理是多么简单。
- en: It also promotes collaboration within the development teams through streamlined
    configuration. When everybody uses the same convention and has the same reliance
    on the auto-configuration that Spring Boot provides, it reduces the time that
    would be spent on understanding and working on each other’s code. It means there
    is consistency in doing things, which promotes efficiency besides minimizing the
    risk of issues arising from configurations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它还通过简化的配置促进了开发团队之间的协作。当每个人都使用相同的约定并依赖于 Spring Boot 提供的自动配置时，它减少了理解和工作在彼此代码上所需的时间。这意味着在做事上的一致性，除了最小化由配置引起的问题风险外，还促进了效率。
- en: Advantage 4 – extensive ecosystem
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势 4 – 广泛的生态系统
- en: It would be great if we were all just writing code and didn’t require any integrations.
    But as we said in the introduction of this chapter, we’re sometimes dealing with
    complex projects, and all complex projects need a database, messaging between
    components, and interactions with external services. So, thanks to the Spring
    ecosystem, we can achieve these by using the libraries and projects of Spring.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们都能只编写代码而不需要任何集成，那将是非常棒的。但正如我们在本章引言中所说的，我们有时要处理复杂的项目，而所有复杂的项目都需要数据库、组件间的消息传递以及与外部服务的交互。因此，多亏了
    Spring 生态系统，我们可以通过使用 Spring 的库和项目来实现这些功能。
- en: As you can see in *Figure 1**.2*, Spring is an ecosystem not just a framework,
    and each component is ready to communicate with each other smoothly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在 *图 1.2* 中所见，Spring 不仅仅是一个框架，而是一个生态系统，每个组件都准备好与其他组件顺畅地通信。
- en: '![Figure 1.2: Spring ecosystem](img/B18400_01_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2：Spring 生态系统](img/B18400_01_02.jpg)'
- en: 'Figure 1.2: Spring ecosystem'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：Spring 生态系统
- en: 'I would like to spend a little bit more time on Spring Boot’s ecosystem, which
    offers many tools and integrations to address these challenges comprehensively.
    Here’s why Spring Boot’s ecosystem is a valuable asset:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望花更多的时间来探讨 Spring Boot 的生态系统，它提供了许多工具和集成，可以全面解决这些挑战。以下是 Spring Boot 生态系统成为宝贵资产的原因：
- en: '**Support for diverse databases**: One of the most important features of Spring
    Boot is that it makes the idea of the data access to and its management of SQL
    as well as NoSQL databases such as MySQL and MongoDB easier. Its power of configuration
    facilitates an easy switch between the two, simply by changing the object’s annotation
    and through the **Java Persistence API** (**JPA**) data source in the properties
    file.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多种数据库**：Spring Boot最重要的特性之一是它使SQL以及NoSQL数据库（如MySQL和MongoDB）的数据访问和管理变得更加容易。其配置能力简化了两种数据库之间的切换，只需更改对象的注解和属性文件中的**Java持久化API**（**JPA**）数据源即可。'
- en: '**Messaging solutions**: Supporting asynchronous communication or an event-driven
    architecture by your application, the compatibility of Spring Boot with the likes
    of Apache Kafka and RabbitMQ helps a great deal with efficient message queuing
    as well as the effective streaming of events.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息解决方案**：通过您的应用程序支持异步通信或事件驱动架构，Spring Boot与Apache Kafka和RabbitMQ等工具的兼容性，在高效消息队列以及有效事件流方面提供了很大帮助。'
- en: '**Spring Cloud for microservices**: Spring Boot provides a Spring Cloud extension,
    which has a suite of tools that provides developers with the ability to construct
    and operate microservices rapidly to operate as an application. It helps in service
    discovery, load balancing, and distributed configuration by using the declarative
    programming model.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Cloud微服务支持**：Spring Boot提供了一个Spring Cloud扩展，它提供了一套工具，使开发者能够快速构建和操作微服务，以便作为应用程序运行。它通过声明性编程模型帮助进行服务发现、负载均衡和分布式配置。'
- en: '**Cloud services integration**: In the current cloud computing area, Spring
    Boot offers integration capabilities with the major players in this field, including
    **Amazon Web Services** (**AWS**), Azure, and Google Cloud. This allows you to
    leverage the resources and services provided by these cloud providers, including
    storage, compute, and machine learning, in order to augment the functionality
    and capabilities of your applications.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云服务集成**：在当前的云计算领域，Spring Boot提供了与该领域主要玩家的集成能力，包括**亚马逊网络服务**（**AWS**）、Azure和谷歌云。这使您能够利用这些云提供商提供的资源和服务，包括存储、计算和机器学习，以增强您应用程序的功能和能力。'
- en: '**Security and authentication**: The Spring Boot ecosystem has powerful security
    libraries that come with easy configuration for secured authentication along with
    authorization. Whether you want to implement OAuth 2.0 or JWT authentication or
    wish to apply access control based on roles, Spring Boot has this covered as well.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和身份验证**：Spring Boot生态系统提供了强大的安全库，这些库支持易于配置的安全身份验证和授权。无论您是想实现OAuth 2.0或JWT身份验证，还是希望根据角色应用访问控制，Spring
    Boot都能满足这些需求。'
- en: '**Application monitoring and management**: Proper application monitoring and
    managing are really important to keep a software application in a healthy state.
    Spring Boot Actuator, being an associated subproject of Spring Boot, provides
    built-in support for metrics gathering, health-check features, and management
    endpoints, and it is not difficult to add its functionality to your services.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序监控和管理**：正确地监控和管理应用程序对于保持软件应用程序处于健康状态至关重要。Spring Boot Actuator作为Spring
    Boot的关联子项目，提供了内置的指标收集、健康检查功能和管理端点支持，将其功能添加到您的服务中并不困难。'
- en: '**Third-party integrations**: Apart from core functions, Spring Boot offers
    smooth integration with a whole array of third-party libraries and frameworks.
    Whether you want to integrate with some specific technology stack or special-purpose
    library, mostly you will find the Spring Boot extension or integration that fits
    the case.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方集成**：除了核心功能外，Spring Boot还提供了与一系列第三方库和框架的平滑集成。无论您是想集成特定的技术栈或专用库，通常您都会找到适合情况的Spring
    Boot扩展或集成。'
- en: By using the wide ecosystem of Spring Boot, the software development processes
    can be made quicker, fewer obstacles at various integration levels are encountered,
    and access to a wide pool of tools and resources is possible. The ecosystem provided
    by Spring Boot is highly flexible and versatile for enhancing the development
    process amid the ever-dynamic environment around the development of software.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Spring Boot的广泛生态系统，可以使软件开发过程更快，在各个集成级别遇到的障碍更少，并且可以访问广泛的工具和资源。Spring Boot提供的生态系统在增强软件开发过程中的灵活性和多功能性方面非常出色，尤其是在软件开发的动态环境中。
- en: Advantage 5 – cloud-native capabilities
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势5 – 云原生能力
- en: Now, let’s see how Spring Boot best fits into cloud-native development. When
    we are speaking of cloud-native, in reality, we are referring to applications
    that are designed for cloud environments such as AWS, Azure, and Google Cloud.
    Spring Boot has got great features such as scalability and elasticity for applications
    in such environments, which means our application will grow or shrink horizontally
    as per demand, plus we get access to multiple managed services.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Spring Boot如何最好地融入云原生开发。当我们谈论云原生时，实际上我们指的是为云环境（如AWS、Azure和Google Cloud）设计的应用程序。Spring
    Boot为这些环境中的应用程序提供了诸如可扩展性和弹性等优秀特性，这意味着我们的应用程序将根据需求水平扩展或收缩，同时我们还能访问多个托管服务。
- en: Want to build your application using Spring Boot and deploy it on the cloud?
    The good news is that Spring Boot encapsulates all the configuration details,
    hence making the deployment process on the cloud very simple. It has been designed
    to work smoothly with cloud environments. This means you can easily bind your
    application to the various cloud services that providers offer. Such services
    could span databases and storage solutions all the way to identity management
    systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 想要用Spring Boot构建你的应用程序并在云上部署它吗？好消息是Spring Boot封装了所有配置细节，因此使得在云上的部署过程变得非常简单。它被设计成与云环境无缝工作。这意味着你可以轻松地将你的应用程序绑定到提供商提供的各种云服务。这些服务可能包括数据库和存储解决方案，甚至到身份管理系统。
- en: One of the advantages that comes with using Spring Boot for cloud-native applications
    is adaptability. Whether you go with the public cloud, private cloud, or some
    mix of both – which we call hybrid environments – Spring Boot provides a simplified
    experience. There are never concerns about complexities associated with the manual
    configurations of this. The cloud-native capabilities within Spring Boot put you
    in a position to make optimal use of the abilities available today across cloud
    computing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Boot进行云原生应用程序开发的一个优势是适应性。无论你选择公共云、私有云，还是两者的混合——我们称之为混合环境——Spring Boot都提供了一个简化的体验。你永远不会担心与手动配置相关的复杂性。Spring
    Boot中的云原生能力使你能够充分利用今天云计算提供的各种能力。
- en: This means adjusting the application’s scaling up or down based on some ongoing
    situation at a particular point in time. For example, you want to create an application
    that will automatically scale its resources upon the sudden increase of its users
    – this will involve cloud-native development in Spring Boot and deployment in
    the Cloud Foundry. In this situation, Spring Boot is the bridge because it takes
    care of your application and ensures it stays functional with full utilization
    of what has been provided in the cloud environment. It will make your development
    process effective and efficient and ensure you develop applications that are more
    resilient to deploy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着根据特定时间点的某种持续情况进行应用程序的扩展或缩减。例如，你想要创建一个应用程序，当其用户突然增加时，它会自动扩展其资源——这将涉及Spring
    Boot的云原生开发和在Cloud Foundry上的部署。在这种情况下，Spring Boot是桥梁，因为它负责你的应用程序，并确保它在云环境中充分利用所提供的一切，保持功能完整。它将使你的开发过程高效且有效，并确保你开发的应用程序在部署时更具弹性。
- en: Advantage 6 – testing made easy
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势6 - 测试变得简单
- en: Now, we will discuss the importance of testing in software development and how
    Spring Boot aids with this massive process. As you will know, it is very important
    to test sufficiently in order to ensure that our software is reliable and behaving
    as expected. I’m sure you will be well familiar with the reasons why testing is
    so important – we have to catch bugs and issues before our software goes live.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论测试在软件开发中的重要性以及Spring Boot如何帮助这一庞大的过程。正如你所知，为了确保我们的软件可靠且按预期行为，进行充分的测试非常重要。我相信你将非常熟悉为什么测试如此重要——我们必须在软件上线之前捕捉到错误和问题。
- en: Spring Boot really promotes testing and has a lot of tools and conventions to
    make this possible. That ensures not only saving time in the long run but also
    a better product for our users. Spring Boot perfectly suits this approach, being
    all about “testing first.” This approach drives us to consider testing with every
    step of development, and not as an afterthought.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot真正促进了测试，并拥有许多工具和约定来实现这一点。这不仅确保了长期节省时间，还为我们的用户提供了更好的产品。Spring Boot完美地适合这种“先测试”的方法，这种方法推动我们在开发的每一步都考虑测试，而不是事后才考虑。
- en: Now then, how does Spring Boot help us test? One nice thing about it is that
    it’s flexible, so it doesn’t introduce various testing frameworks, which would
    create compatibility issues. Whether you prefer JUnit, TestNG, or any other popular
    testing tools, with Spring Boot, any of these tools can be easily integrated into
    the workflow. This way, you can decide on the tools you would be comfortable with
    using and Spring Boot will not restrict your choice.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Spring Boot是如何帮助我们进行测试的呢？它的一大优点是它的灵活性，因此它不会引入各种测试框架，这可能会产生兼容性问题。无论你更喜欢JUnit、TestNG还是其他任何流行的测试工具，使用Spring
    Boot，这些工具都可以轻松集成到工作流程中。这样，你可以选择你感到舒适的工具，Spring Boot不会限制你的选择。
- en: Moreover, Spring Boot doesn’t limit you to just one type of testing. It lets
    you write different kinds of tests – from unit tests that verify the correctness
    of a small piece of code to integration tests that verify that different parts
    of your application communicate well among themselves, and even end-to-end tests
    that simulate how a user will journey through your application. The idea here
    is to equip you with all those tools and flexibility, in order to test your application
    at any level in depth.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Spring Boot不会限制你只进行一种类型的测试。它允许你编写不同类型的测试——从验证一小段代码正确性的单元测试，到验证应用程序不同部分之间良好通信的集成测试，甚至模拟用户如何通过应用程序的端到端测试。这里的想法是为你提供所有这些工具和灵活性，以便在深度上测试你的应用程序的任何级别。
- en: In a nutshell, Spring Boot equips you with everything that makes your testing
    efficient and effective. It’s like having a toolkit where each tool is made to
    address a specific testing need, making your software robust and reliable. Remember
    that good testing is one of the key elements of quality software development,
    and Spring Boot stands to guide you through it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Spring Boot为你提供了使测试高效和有效的所有工具。它就像一个工具箱，每个工具都是为了解决特定的测试需求而设计的，使你的软件更加健壮和可靠。记住，良好的测试是高质量软件开发的关键要素之一，Spring
    Boot将引导你通过这一过程。
- en: Advantage 7 – active development
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势7 – 活跃的开发
- en: Let’s now discuss Spring Boot and its compatibility in the fast-progressing
    world of technology.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下Spring Boot及其在技术快速发展的世界中的兼容性。
- en: In software development, keeping up with the times is essential due to the rapid
    growth of technology. This is where Spring Boot comes into play, being a dynamic
    framework that is growing with time. In addition, it is actively being developed
    by a community who are dedicated to adding new features as well as maximizing
    secure applications. With the help of Spring Boot, you can interact with the latest
    technology trends, such as newer Java versions or containerization technologies,
    without starting over each time. This framework continues to change with the industry,
    to keep your development journey up to date and even closer to the modern progressive
    foundation upon which your project is built. In the tech world, where everything
    is constantly changing, Spring Boot works as a handy up-to-date guide empowering
    you to remain ahead.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，由于技术的快速发展，跟上时代步伐至关重要。这就是Spring Boot发挥作用的地方，作为一个随着时间不断发展的动态框架。此外，它正由一个致力于添加新功能以及最大化安全应用的社区积极开发。借助Spring
    Boot，你可以与最新的技术趋势互动，例如新的Java版本或容器化技术，而无需每次都从头开始。这个框架随着行业的发展而不断变化，以保持你的开发之旅与时俱进，甚至更接近你项目构建的现代进步性基础。在技术世界中，一切都在不断变化，Spring
    Boot作为一个实用的最新指南，帮助你保持领先。
- en: Advantage 8 – community-driven plugins
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优势8 – 社区驱动的插件
- en: Let us understand the community of Spring Boot. It’s like a big family where
    every person has a common goal. People from all over the world have created lots
    of add-ons and extras for Spring Boot, making it even better. It is somewhat like
    having a huge toolbox with the ideal tool for every job.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解Spring Boot的社区。它就像一个大家庭，每个人都有一个共同的目标。来自世界各地的人们为Spring Boot创建了大量的附加组件和扩展，使其变得更好。这就像拥有一个巨大的工具箱，其中每个工作都有理想的工具。
- en: In that toolbox, there are plugins to serve each purpose. Need to connect to
    a database or put up a messaging system? There is a plugin for that. Want to make
    your app more secure or easier to deploy? There is a plugin for that, too. And
    the best part? These plugins have been tried and tested by a lot of people, so
    they are perfected.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个工具箱中，有插件来满足每个目的。需要连接数据库或建立消息系统？有相应的插件。想要让你的应用程序更安全或更容易部署？也有相应的插件。最好的部分是？这些插件已经经过很多人的试用和测试，因此它们已经得到了完善。
- en: Using these thorough, community-made plugins means that you don’t have to start
    from scratch every time and can skip wasting time making something that has already
    been made. With these plugins, you are able to build faster and join the worldwide
    team of developers sharing their knowledge and tools. In this way, all of the
    developers can build cooler stuff faster.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些详尽、由社区制作的插件意味着你不必每次都从头开始，可以避免浪费时间制作已经存在的东西。有了这些插件，你能够更快地构建，并加入全球开发者团队，分享他们的知识和工具。这样，所有开发者都能更快地构建更酷的东西。
- en: After discussing the foundational benefits of Spring Boot, we will now start
    learning about its latest version.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了Spring Boot的基础优势之后，我们现在将开始学习它的最新版本。
- en: Embracing the new era – the innovations of Spring Boot 3.0
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迎接新时代——Spring Boot 3.0的创新
- en: Spring Boot 3.0 marks an important part of the story of advanced Java application
    development. Let’s explore what this new topic holds.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3.0标志着高级Java应用程序开发故事的一个重要部分。让我们探索这个新主题包含的内容。
- en: Java 17 baseline
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java 17基线
- en: 'Aligning Spring Boot 3.0 to Java 17 gives you the freshest developments in
    the Java universe. Generally, features such as sealed classes and new APIs in
    Java 17, among other things, improve the code readability and maintainability.
    Using Java 17 with Spring Boot means working with a version that not only is the
    latest but also has extended support from Java. This gives you cleaner code as
    well as better performance while being ahead in technology. With Java 17, many
    new features have been introduced – here is a simple example using sealed classes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将Spring Boot 3.0与Java 17对齐，为你带来Java宇宙的最新发展。通常，像密封类和Java 17中的新API等特性，以及其他一些特性，可以提高代码的可读性和可维护性。使用Java
    17与Spring Boot一起意味着使用一个不仅是最新的版本，而且还有Java的扩展支持的版本。这为你提供了更干净的代码以及更好的性能，同时走在技术的前沿。使用Java
    17，引入了许多新特性——以下是一个使用密封类的简单示例：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This feature allows you to control which classes or interfaces can extend or
    implement a particular class or interface. This feature is particularly useful
    for maintaining code integrity and preventing unintended subclasses.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能允许你控制哪些类或接口可以扩展或实现特定的类或接口。这个功能特别有用，可以维护代码完整性并防止意外的子类。
- en: GraalVM support
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GraalVM支持
- en: GraalVM’s support within Spring Boot 3.0 is an important feature, particularly
    for cloud-native solutions. When we have a task to develop a serverless project,
    Java is usually not the first option. This is because Java projects need some
    more time on startup and consume more memory than other development languages.
    But GraalVM support helps Spring Boot, reducing memory usage and cutting down
    on startup times. For microservices and serverless architectures, this means achieving
    a level of efficiency that allows for quicker scaling and optimized resource utilization.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot 3.0中，GraalVM的支持是一个重要的特性，尤其是对于云原生解决方案。当我们有一个开发无服务器项目的任务时，Java通常不是首选选项。这是因为Java项目在启动时需要更多的时间，并且比其他开发语言消耗更多的内存。但是，GraalVM支持帮助Spring
    Boot减少内存使用并缩短启动时间。对于微服务和无服务器架构，这意味着达到一种效率水平，允许更快地扩展和优化资源利用。
- en: Observability with Micrometer
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Micrometer进行可观察性
- en: Let’s talk about an exciting feature in Spring Boot 3.0 – the integration of
    Micrometer. Imagine Micrometer as a tool that makes us aware of what is going
    on inside our application just by taking a look at logs, metrics, and traces.
    With Micrometer Tracing, the Micrometer tool becomes even more useful within Spring
    Boot. Now we are able to record application metrics more effectively and carry
    out more effective operation traces. It’s like having a fancier way to check how
    well our application is executing with the current technology, way better than
    the old ways we used to rely on, especially when we’re working with applications
    built by compiled native code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈Spring Boot 3.0中的一个令人兴奋的功能——Micrometer的集成。想象一下，Micrometer是一个工具，它通过查看日志、指标和跟踪，让我们了解应用程序内部正在发生的事情。有了Micrometer跟踪，Micrometer工具在Spring
    Boot中变得更加有用。现在我们能够更有效地记录应用程序指标，并执行更有效的操作跟踪。这就像有了更高级的方式来检查我们的应用程序在当前技术下的执行情况，比我们过去依赖的老方法好得多，尤其是在我们处理由编译的本地代码构建的应用程序时。
- en: Jakarta EE 10 compatibility
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jakarta EE 10兼容性
- en: I am going to try and explain the transition to Jakarta EE 10 in Spring Boot
    3.0\. So, it’s a bit like updating your GPS with the latest maps and features
    before setting off on your journey. In a similar way, the shift to Jakarta EE
    10 enables us to make use of the latest tools and standards available in enterprise
    Java. This way, we would be able to ensure that all applications built make use
    of modern standards and are future-proof as well. This update doesn’t just keep
    our applications up to date but also enables us to work with other, more advanced
    technologies, compliant with the new standards. So, this is nothing less than
    a leap forward in our development journey.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我将尝试解释 Spring Boot 3.0 中向 Jakarta EE 10 的过渡。所以，这就像在出发前更新你的 GPS 到最新的地图和功能一样。以类似的方式，转向
    Jakarta EE 10 使我们能够利用企业 Java 中可用的最新工具和标准。这样，我们就能确保所有构建的应用程序都使用现代标准，并且具有前瞻性。这次更新不仅使我们的应用程序保持最新，还使我们能够与其他符合新标准的更先进的技术一起工作。所以，这无外乎是我们开发旅程中的飞跃。
- en: Simplified MVC framework
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简化的 MVC 框架
- en: 'The MVC framework updates in Spring Boot 3.0 improve the way we manage communications,
    particularly API error handling. Support for RFC7807 ([https://datatracker.ietf.org/doc/html/rfc7807](https://datatracker.ietf.org/doc/html/rfc7807))
    means our applications can handle exceptions in one place. The following code
    sample illustrates how to handle exceptions in one place:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 3.0 中的 MVC 框架更新改进了我们的通信管理方式，尤其是 API 错误处理。对 RFC7807 ([https://datatracker.ietf.org/doc/html/rfc7807](https://datatracker.ietf.org/doc/html/rfc7807))
    的支持意味着我们的应用程序可以在一个地方处理异常。以下代码示例说明了如何在同一处处理异常：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, `GlobalExceptionHandler` is a `@ControllerAdvice` class that
    handles all exceptions thrown by the application. It has an `@ExceptionHandler`
    method for each type of exception that the application can throw. Each `@ExceptionHandler`
    method returns a `ResponseEntity` with a `ProblemDetail` object as the body and
    an appropriate HTTP status code. The `ProblemDetail` object contains the details
    of the error, including a title, detail, and status code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`GlobalExceptionHandler` 是一个 `@ControllerAdvice` 类，它处理应用程序抛出的所有异常。它为应用程序可能抛出的每种异常类型都有一个
    `@ExceptionHandler` 方法。每个 `@ExceptionHandler` 方法返回一个包含 `ProblemDetail` 对象作为正文和适当的
    HTTP 状态码的 `ResponseEntity`。`ProblemDetail` 对象包含错误的详细信息，包括标题、详细信息和状态码。
- en: Enhanced Kotlin support
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增强的 Kotlin 支持
- en: Kotlin is getting popular among developers. If you feel more confident with
    Kotlin, Spring Boot 3.0 now offers enhanced support for Kotlin. This support expands
    the Spring community.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 在开发者中越来越受欢迎。如果你对 Kotlin 更有信心，Spring Boot 3.0 现在提供了增强的 Kotlin 支持。这种支持扩大了
    Spring 社区。
- en: Wrapping up – why Spring Boot 3.0 is your advanced project ally
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结——为什么 Spring Boot 3.0 是你的高级项目盟友
- en: In the preceding sections, we saw how Spring Boot is a powerful tool for developing
    big and advanced software projects with its quick development. With Spring Boot,
    we are talking about drastically reducing development time and effort with its
    “convention over configuration” setup. What does this mean? More time to develop,
    less time required for setup and configurations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了 Spring Boot 如何通过其快速开发成为开发大型和高级软件项目的强大工具。有了 Spring Boot，我们谈论的是通过其“约定优于配置”的设置大幅减少开发时间和努力。这意味着什么？有更多的时间用于开发，更少的时间用于设置和配置。
- en: Well, let us now talk about how it can be adapted for microservices. Spring
    Boot is a way to not only facilitate development but also make your applications
    more scalable and efficient. And, with the new microservice architecture on the
    rise, this becomes essential. It allows you to break your application down into
    smaller, more manageable, and fully independent entities that perfectly cooperate
    as a whole.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在让我们谈谈它如何适应微服务。Spring Boot 不仅是一种促进开发的方式，还可以使你的应用程序更可扩展和高效。随着新的微服务架构的兴起，这变得至关重要。它允许你将应用程序分解为更小、更易于管理和完全独立的实体，这些实体作为一个整体完美协作。
- en: Another aspect that we discussed is dealing with a streamlined configuration.
    The auto-configuration feature of Spring Boot replaces the handling of manual
    configurations, which may be very boring. This is very significant since dealing
    with large-scale projects where configuration can grow is a very complex and time-consuming
    undertaking.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的另一个方面是处理简化的配置。Spring Boot 的自动配置功能取代了手动配置的处理，这可能非常无聊。这对于处理配置可能增长的大型项目来说非常关键，因为这是一个非常复杂且耗时的任务。
- en: We’ve also touched on the ecosystem that Spring Boot provides. This ecosystem
    offers a range of plugins and tools. This environment puts at your fingertips
    everything you need to build, test, and deploy high-standard applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还简要介绍了 Spring Boot 提供的生态系统。这个生态系统提供了一系列插件和工具。这个环境将你需要的所有构建、测试和部署高标准应用程序的工具都放在了你的指尖。
- en: The cloud-native abilities make Spring Boot a framework of choice in serverless
    application development. Given the fact that there is an increasing migration
    toward cloud environments, this ability has become more critical.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生能力使 Spring Boot 成为无服务器应用程序开发的框架选择。鉴于越来越多的迁移趋势是向云环境，这种能力变得更加关键。
- en: In the end, it is all about ongoing development and support of the community.
    An active community and constant development align Spring Boot with the latest
    technologies and trends. This makes this software a lasting and future-proof option
    for handling complex projects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一切都关乎于社区的不断发展和支持。一个活跃的社区和持续的发展使 Spring Boot 与最新的技术和趋势保持一致。这使得这款软件成为处理复杂项目的持久和未来证明的选择。
- en: Now is the time to advance your development narrative with Spring Boot 3.0.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候用 Spring Boot 3.0 来提升你的开发叙事了。
- en: As we progress through this book, we’ll go deeper into the world of Spring Boot.
    We’ll examine various architectural patterns, reactive programming, data management,
    testing, security, containerization, and event-driven systems. In each chapter,
    you will gain practical experience and come closer to success in your real-world
    projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在这本书中的进展，我们将更深入地探索 Spring Boot 的世界。我们将研究各种架构模式、响应式编程、数据管理、测试、安全、容器化和事件驱动系统。在每一章中，你将获得实践经验，并更接近你在现实世界项目中的成功。
- en: A brief overview of what’s to come
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对即将发生的事情的简要概述
- en: This section will give you an overview of what we will discuss in the rest of
    the book. This will enlighten your way and give you an idea of what is coming
    up in the following chapters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将概述本书剩余部分我们将讨论的内容。这将照亮你的道路，并给你一个关于接下来章节内容的预览。
- en: Chapter 2, Key Architectural Patterns in Microservices – DDD, CQRS, and Event
    Sourcing
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二章，微服务的关键架构模式——领域驱动设计（DDD）、CQRS 和事件溯源
- en: This chapter deep dives into critical patterns for microservices. In a microservice
    system, you might have many microservices, depending on the size of the application;
    for example, Netflix has over 1,000 microservices. So, what we need is an excellent
    pattern to manage these microservices and then maintain them properly. Without
    it, we lose control of them, and the whole system becomes a huge garbage.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了微服务的关键模式。在一个微服务系统中，你可能会有很多微服务，这取决于应用程序的大小；例如，Netflix 有超过 1,000 个微服务。因此，我们需要一个优秀的模式来管理这些微服务，并正确地维护它们。没有它，我们就失去了对它们的控制，整个系统变成了一堆垃圾。
- en: The first one is **Domain-Driven Design** (**DDD**). DDD is about building software
    based on the needs of the business. Each microservice is solely accountable for
    only one small part of a business. In DDD, we have two main parts, which are the
    strategic part and the tactical part. In the strategic part, we take a look at
    the big picture of a business. The details that we focus on are the tactical part.
    Here, we’ll take a detailed look at everything there is to know about each part
    of the business.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是 **领域驱动设计**（**DDD**）。DDD 是关于根据业务需求构建软件。每个微服务只对业务的一个小部分负责。在 DDD 中，我们有两个主要部分，即战略部分和战术部分。在战略部分，我们审视业务的宏观图景。我们关注的细节是战术部分。在这里，我们将详细探讨关于业务每个部分的全部知识。
- en: Next is **CQRS**. It is the abbreviated form of **Command Query Responsibility
    Segregation**. I love the name. It’s such a fancy name for a simple idea. We separate
    reading the data from writing the data. Think about it as two tools – one kind
    asks questions and another gives orders. This separation allows our software to
    run smoother and faster. It’s great for complicated systems where it is really
    important to manage lots of data.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 **CQRS**。它是 **Command Query Responsibility Segregation** 的缩写。我喜欢这个名字。对于一个简单想法来说，这个名字太华丽了。我们分离了读取数据和写入数据。把它想象成两个工具——一个用来提问，另一个用来下达命令。这种分离使得我们的软件运行得更顺畅、更快。这对于需要管理大量数据的复杂系统来说非常棒。
- en: Next, we have Event Sourcing. This is recording all changes that are made to
    our software as events. Anytime there occurs a change in the transacting parties,
    we note this down in the diary. As such, the diary logs what happened in the past.
    We can dig deep into the history of our object as well. Event Sourcing is relevant
    as there could at any time be the need to hold past data.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有事件溯源。这是将我们对软件所做的所有更改记录为事件。每当交易方发生变化时，我们都会在日记中记录下来。因此，日记记录了过去发生的事情。我们还可以深入了解我们的对象的历史。事件溯源的相关性在于，在任何时候都可能需要保留过去的数据。
- en: Lastly, we take a quick view of other patterns in microservices. This part merely
    suggests some other ideas for building software. We will not go into too much
    detail here but it’s good to know about these other patterns. They are like different
    tools in a toolbox. Knowing more tools makes us better at building software.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们快速浏览了微服务中的其他模式。这部分仅仅提出了一些构建软件的其他想法。我们不会在这里深入细节，但了解这些其他模式是很好的。它们就像工具箱中的不同工具。了解更多的工具使我们更好地构建软件。
- en: In this chapter, we will be introduced to these patterns with examples. We will
    see how they are leveraged in real software. This helps us understand better why
    these patterns are important and how to use them soundly.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过示例介绍这些模式。我们将看到它们如何在真实软件中得到应用。这有助于我们更好地理解为什么这些模式很重要，以及如何稳妥地使用它们。
- en: Each of these patterns is a step toward making better software. We will be learning
    how to use DDD, CQRS, and Event Sourcing. These will help us write software that
    is strong, smart, and useful and solve real business problems. The chapter is
    all about learning these essential skills.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这样的模式都是朝着制作更好的软件迈出的一步。我们将学习如何使用DDD、CQRS和事件溯源。这些将帮助我们编写强大、智能和有用的软件，并解决真实业务问题。本章全部关于学习这些基本技能。
- en: Chapter 3, Reactive REST Development and Asynchronous Systems
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章，反应式REST开发和异步系统
- en: '[*Chapter 3*](B18400_03.xhtml#_idTextAnchor064) opens up the dynamic world
    of reactive programming in Spring Boot 3.0\. Here, we learn how to build software
    that responds quickly. This is about making applications that can handle multiple
    concurrent or simultaneous requests.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第3章*](B18400_03.xhtml#_idTextAnchor064) 打开了Spring Boot 3.0中反应式编程的动态世界。在这里，我们学习如何构建快速响应的软件。这是关于制作能够处理多个并发或同时请求的应用程序。'
- en: We start with an introduction to reactive programming. It’s a fresh way of writing
    software. In the old days, our apps could only do one thing at a time. With reactive
    programming, they can handle many tasks all at once, smoothly and without waiting.
    It’s like a juggler keeping many balls in the air effortlessly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从反应式编程的介绍开始。这是一种全新的编写软件的方式。在以前，我们的应用程序一次只能做一件事。有了反应式编程，它们可以同时处理许多任务，流畅且无需等待。就像一个杂技演员轻松地同时抛接多个球一样。
- en: 'Building a reactive REST API is our next stop. Think of REST APIs as waiters
    taking orders and bringing food to the table: one waiter, one order. A reactive
    REST API is like a super-waiter who can handle many orders simultaneously, even
    when the restaurant is super busy. It’s great for when you have lots of users,
    all wanting quick service at the same time.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 构建反应式REST API是我们的下一个目标。将REST API想象成服务员接受订单并将食物端上桌：一个服务员，一个订单。一个反应式REST API就像一个超级服务员，即使在餐厅非常繁忙的时候也能同时处理多个订单。这对于你有很多用户，他们同时需要快速服务的情况非常棒。
- en: We then explore asynchronous systems and backpressure. Asynchronous means doing
    things at different times, not in a strict order. It’s like having a to-do list
    where you can do tasks in any order you like. Back-pressure is a way to manage
    the work, so we don’t get overwhelmed. It’s like having a smart system that knows
    when to say, “Please wait” so that everything gets done right, without crashing
    or slowing down.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探索异步系统和背压。异步意味着在不同的时间做事情，而不是严格的顺序。这就像有一个你可以按任何顺序完成任务的任务清单。背压是一种管理工作的方式，这样我们就不会感到不知所措。就像有一个聪明的系统，知道何时说“请稍等”，以确保一切都能正确完成，而不会崩溃或减慢速度。
- en: By the end of [*Chapter 3*](B18400_03.xhtml#_idTextAnchor064), we won’t have
    just talked about these ideas; we’ll have seen them in action with real examples.
    We’ll understand why reactive programming is essential in today’s fast-paced world.
    We’ll learn how to use these new tools to make our software strong, smart, and
    helpful. And we’ll see how they solve real problems in businesses today. This
    chapter is packed with essential skills for the modern software builder.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到[*第3章*](B18400_03.xhtml#_idTextAnchor064)结束时，我们不仅会讨论这些想法，还会通过真实示例看到它们的应用。我们将了解为什么在当今快节奏的世界中，响应式编程是必不可少的。我们将学习如何使用这些新工具使我们的软件强大、智能和有帮助。我们还将看到它们如何解决当今商业中的实际问题。这一章充满了现代软件开发者必备的技能。
- en: 'Chapter 4, Spring Data: SQL, NoSQL, Cache Abstraction, and Batch Processing'
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4章，Spring数据：SQL、NoSQL、缓存抽象和批量处理
- en: '[*Chapter 4*](B18400_04.xhtml#_idTextAnchor146) will go through managing data
    within Spring Boot 3.0 applications. It’s a chapter that combines theory with
    practical steps on handling various types of data.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第4章*](B18400_04.xhtml#_idTextAnchor146) 将介绍如何在Spring Boot 3.0应用程序中管理数据。这是一章将理论与处理各种类型数据的实际步骤相结合的章节。'
- en: We kick off with an introduction to Spring Data. This is one of the most important
    components of Spring Boot. We can orchestrate the data with it. Spring Data is
    like a bridge connecting your application to the world of databases. We’ll see
    how Spring Data can talk to databases hassle-free.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Spring Data的介绍开始。这是Spring Boot最重要的组件之一。我们可以用它来编排数据。Spring Data就像一座桥梁，连接着你的应用程序和数据库的世界。我们将看到Spring
    Data如何轻松地与数据库通信。
- en: Then, we’ll explore how Spring Data connects with SQL databases. SQL databases
    store data in tables and are great when you have a clear structure for your data.
    They’re reliable and powerful. With Spring Boot, using these databases becomes
    easier. You can set up relationships and store your data efficiently.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将探讨Spring Data如何与SQL数据库连接。SQL数据库将数据存储在表中，当你有清晰的数据结构时，它们非常出色。它们可靠且强大。使用Spring
    Boot，使用这些数据库变得更容易。你可以设置关系并有效地存储你的数据。
- en: Next, we shift our focus to NoSQL databases. These are different from SQL databases.
    They’re more like a flexible storage room where you can put data without needing
    a strict layout. Spring Boot supports various NoSQL databases, such as MongoDB,
    Neo4j, and Cassandra. These databases are great when your data doesn’t fit neatly
    into tables and you need more flexibility.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注点转向NoSQL数据库。这些数据库与SQL数据库不同。它们更像是一个灵活的储藏室，你可以将数据放入其中，而不需要严格的布局。Spring
    Boot支持各种NoSQL数据库，例如MongoDB、Neo4j和Cassandra。当你的数据不适合整齐地放入表格中，你需要更多灵活性时，这些数据库非常出色。
- en: We’ll also discuss Spring Boot’s cache abstraction. Caching is about storing
    copies of data in a temporary storage area, so you can access it faster. It’s
    like keeping your most-used tools on top of your workbench for quick access. Spring’s
    cache abstraction lets you manage this caching smartly, improving your application’s
    performance by remembering frequently used data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论Spring Boot的缓存抽象。缓存是将数据的副本存储在临时存储区域中，以便你可以更快地访问它。这就像将你常用的工具放在工作台上以便快速访问一样。Spring的缓存抽象让你可以智能地管理这种缓存，通过记住频繁使用的数据来提高应用程序的性能。
- en: Then, there’s batch processing with Spring Batch. This is for when you have
    a lot of data to process all at once. Think of it like a factory assembly line,
    handling lots of tasks efficiently. Spring Batch is a framework for developing
    robust batch applications. It’s used for large-scale data migration and processing,
    making it perfect for handling big jobs such as sending out thousands of emails
    or processing large datasets.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将介绍Spring Batch的批量处理。这是当你需要一次性处理大量数据时使用的。想象一下，就像工厂的装配线，高效地处理大量任务。Spring
    Batch是一个用于开发健壮批量应用的框架。它用于大规模数据迁移和处理，非常适合处理发送数千封电子邮件或处理大型数据集等大型工作。
- en: Finally, we’ll cover data migration and consistency. When you move data from
    one place to another, you want to ensure nothing gets lost or changed along the
    way. We’ll learn strategies to keep our data safe and consistent during migration.
    It’s like moving houses without losing any of your belongings.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论数据迁移和一致性。当你将数据从一个地方移动到另一个地方时，你想要确保在这个过程中没有任何东西丢失或改变。我们将学习在迁移过程中保持数据安全和一致性的策略。这就像搬家时没有丢失任何你的物品。
- en: Throughout the chapter, we’ll tie these concepts back to practical examples,
    showing how Spring Boot 3.0 makes these tasks easier. By the end of [*Chapter
    4*](B18400_04.xhtml#_idTextAnchor146), you’ll understand how to manage and process
    data in your Spring Boot applications, making sure they’re fast, reliable, and
    secure.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将这些概念与实际示例联系起来，展示Spring Boot 3.0如何使这些任务变得更容易。到[第4章](B18400_04.xhtml#_idTextAnchor146)结束时，你将了解如何在Spring
    Boot应用中管理和处理数据，确保它们快速、可靠和安全。
- en: Chapter 5, Securing Your Spring Boot Applications
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章，保护你的Spring Boot应用
- en: In [*Chapter 5*](B18400_05.xhtml#_idTextAnchor179), we’re going to tackle something
    super important – keeping our Spring Boot applications safe. Up to this point,
    we have learned lots of good practices. With this information, we have built a
    maintainable, robust application. All parts are working like a charm. But now,
    we should keep this realm secure.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](B18400_05.xhtml#_idTextAnchor179)中，我们将处理一些极其重要的事情——保护我们的Spring Boot应用。到目前为止，我们已经学到了很多好的实践。有了这些信息，我们已经构建了一个可维护、健壮的应用。所有部分都运行得非常顺畅。但现在，我们应该保持这个领域的安全。
- en: First, we’ll dive into what it means to be secure in the world of Spring Boot
    3.0\. Security isn’t just a nice-to-have; it’s a must. We’ll explore how Spring
    Boot helps us put up a strong defense against hackers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将深入探讨在Spring Boot 3.0的世界中什么是安全的。安全不仅仅是一个锦上添花的东西；它是一个必须品。我们将探讨Spring Boot如何帮助我们建立强大的防御来对抗黑客。
- en: Then, it’s time to get into Oauth 2.0 and JWTs. Security is not just important
    to prevent attacks; it also keeps the data isolated for each user. It makes sure
    only the right people with the right passes get in.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，是时候进入Oauth 2.0和JWT了。安全不仅仅重要，因为它可以防止攻击；它还确保每个用户的数据都是隔离的。它确保只有拥有正确通行证的正确的人才能进入。
- en: Role-based access control is up next. It’s all about setting the rules for who
    can go where in your app. It’s like deciding who gets the keys to the front door
    and who can only access the garage.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是角色基于访问控制。这关乎为谁可以在你的应用中走到哪里设定规则。就像决定谁可以得到前门钥匙，谁只能进入车库。
- en: We won’t forget about reactive applications. They need security that can keep
    up with their fast pace. It’s a bit like a security guard that’s super good at
    multitasking.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会忘记关于响应式应用的内容。它们需要能够跟上它们快速节奏的安全措施。这有点像一位超级擅长多任务处理的保安。
- en: Spring security filters are like the bouncers of your app. They check everyone
    out before letting them in. We’ll learn how to set up these filters to check the
    IDs at the door.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 安全过滤器就像是你的应用的保安。他们在让人进入之前会检查每个人。我们将学习如何设置这些过滤器来检查门口的身份证。
- en: By the end of this chapter, you’ll feel like a security expert. You’ll know
    how to use all these tools to keep your Spring Boot app as safe as a fortress.
    We’ll walk through examples and test our security to make sure it’s top-notch.
    So, let’s gear up and get our Spring Boot applications locked down tight!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 到了本章结束时，你将感觉自己像一位安全专家。你会知道如何使用所有这些工具来确保你的Spring Boot应用像堡垒一样安全。我们将通过示例和测试我们的安全措施，确保它是顶级的。所以，让我们做好准备，把我们的Spring
    Boot应用锁得严严实实！
- en: Chapter 6, Advanced Testing Strategies
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章，高级测试策略
- en: Let’s dive into [*Chapter 6*](B18400_06.xhtml#_idTextAnchor192), where we’re
    really getting our hands dirty with testing in Spring Boot. Testing isn’t just
    a checkbox to tick off; it’s what makes sure our applications don’t fall apart
    when things get real. And in Spring Boot, testing can be quite a ride!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入到[第6章](B18400_06.xhtml#_idTextAnchor192)，在那里我们将真正在Spring Boot中进行测试。测试不仅仅是一个需要勾选的复选框；它是确保我们的应用在现实面前不会崩溃的关键。在Spring
    Boot中，测试可以是一次相当刺激的旅程！
- en: 'We kick off by introducing two big players in the testing game: unit testing
    and integration testing. Think of unit testing as checking the pieces of a puzzle
    individually, making sure each one is cut just right. Integration testing? That’s
    about verifying that all the pieces fit together to create the complete picture.
    Both are super important for different reasons, and we’ll see why.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先介绍测试领域的两大巨头：单元测试和集成测试。将单元测试想象成检查拼图的单个碎片，确保每个碎片都切割得恰到好处。集成测试呢？它关乎验证所有碎片是否能够组合在一起形成完整的画面。两者都极其重要，原因各不相同，我们将会看到原因所在。
- en: Next, we’ll tackle testing reactive components. If you’ve played with reactive
    programming in Spring Boot, you’ll know it’s like juggling – lots of things happening
    at once, and you’ve got to keep them all in the air. This section is all about
    making sure your reactive bits don’t drop the ball when the pressure is on.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将解决测试响应式组件的问题。如果你在 Spring Boot 中玩过响应式编程，你会知道它就像玩杂技一样——同时发生很多事情，你必须确保所有的事情都保持在空中。本节将确保你的响应式组件在压力之下不会掉链子。
- en: Then, there’s the big, bad world of security testing. We’re not just making
    sure the app works; we’re making sure it’s Fort Knox. We’ll dive into how to test
    your Spring Boot app to keep the hackers at bay, covering everything from who’s
    allowed to who’s kept out.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，是安全测试的广阔而危险的世界。我们不仅要确保应用程序能正常工作，还要确保它像诺克斯堡一样坚不可摧。我们将深入探讨如何测试你的 Spring Boot
    应用程序以抵御黑客，涵盖从谁被允许进入到谁被拒之门外的所有内容。
- en: Finally, we’ll talk about **Test-Driven Development** (**TDD**) in the world
    of Spring Boot. TDD is like writing the recipe before you bake the cake. It might
    sound backward, but it’s a game-changer. We write tests first, then code, and
    end up with something that’s not just delicious but dependable.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论 Spring Boot 世界的**测试驱动开发**（**TDD**）。TDD 就像在烤蛋糕之前先写好食谱。这听起来可能有些反直觉，但它是一个变革者。我们首先编写测试，然后编写代码，最终得到的东西不仅美味，而且可靠。
- en: By the end of this chapter, you’ll not only get the “how” of testing in Spring
    Boot but also the “why.” It’s about making sure your app doesn’t just work today
    but keeps on working tomorrow, next week, and next year. Get ready to level up
    your testing game!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你不仅将了解在 Spring Boot 中测试的“如何”，还将了解“为什么”。这是确保你的应用程序不仅今天能工作，而且明天、下周和明年都能继续工作。准备好提升你的测试技能吧！
- en: Chapter 7, Spring Boot 3.0 Features for Containerization and Orchestration
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7章，Spring Boot 3.0 的容器化和编排功能
- en: In [*Chapter 7*](B18400_07.xhtml#_idTextAnchor213), we’re going to learn how
    to get our Spring Boot 3.0 apps ready to travel and work anywhere. This is about
    using cool tools such as containers and orchestrators.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第7章*](B18400_07.xhtml#_idTextAnchor213) 中，我们将学习如何让我们的 Spring Boot 3.0 应用程序准备好旅行和工作在任何地方。这是关于使用像容器和编排器这样的酷工具。
- en: First up, we’ll talk about what containerization means. It’s like packing your
    app in a suitcase so it can run on any computer or server, just like that!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论容器化的含义。这就像把你的应用程序打包在箱子里，让它能在任何电脑或服务器上运行，就像那样！
- en: Spring Boot has special features to help with this. It’s got everything you
    need to make sure your app packs up nicely in these containers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 有特殊的功能来帮助这一点。它拥有你确保应用程序在这些容器中打包得很好的所有东西。
- en: Then, we’ll dive into how Spring Boot works with Docker. Docker is like a special
    bus for our apps. It makes sure they run smoothly, no matter where they go.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将深入了解 Spring Boot 与 Docker 的协同工作方式。Docker 就像为我们的应用程序提供的特殊公交车。它确保无论它们去哪里，都能平稳运行。
- en: We’ll also learn about Kubernetes. Think of it as the big boss of buses. It
    organizes all our app containers and makes sure they’re all working together properly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将了解 Kubernetes。把它想象成公交车的老大。它组织我们所有的应用程序容器，并确保它们都能正确地协同工作。
- en: Lastly, we’ll explore Spring Boot Actuator. This is our app’s health-check tool.
    It shows us how our app is doing once it’s out and running.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探索 Spring Boot Actuator。这是我们应用程序的健康检查工具。它显示我们的应用程序在运行后表现如何。
- en: By the end of this chapter, we’ll be able to pack our apps up and have them
    running anywhere we like. We’ll feel like travel agents for our apps!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将能够打包我们的应用程序，让它们在任何我们喜欢的地方运行。我们将感觉自己像是我们应用程序的旅行代理人！
- en: Chapter 8, Exploring Event-Driven Systems with Kafka
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第8章，探索使用 Kafka 的事件驱动系统
- en: '[*Chapter 8*](B18400_08.xhtml#_idTextAnchor233) will teach us about event-driven
    systems using Kafka with our Spring Boot apps. It’s like setting up a robust mail
    service inside our app, where mail never disappears.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第8章*](B18400_08.xhtml#_idTextAnchor233) 将教会我们如何使用 Kafka 和 Spring Boot 应用程序构建事件驱动系统。这就像在我们的应用程序内设置一个强大的邮件服务，邮件永远不会消失。'
- en: First, we’ll understand event-driven architecture. It’s a way of building apps
    where different parts talk to each other using events. It’s like one part of the
    app sending a “Hey, something happened!” note to another.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将了解事件驱动架构。这是一种构建应用程序的方式，其中不同的部分通过事件相互通信。就像应用程序的一部分向另一部分发送“嘿，发生了什么事！”的笔记一样。
- en: Next, we’ll see how Kafka helps our Spring Boot apps send and receive these
    notes. Kafka is like a post office for our app’s messages. It ensures all the
    parts of our app get the right messages at the right time.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到Kafka如何帮助我们的Spring Boot应用程序发送和接收这些笔记。Kafka就像我们应用程序消息的邮局。它确保我们的应用程序的所有部分都能在正确的时间收到正确的消息。
- en: Then, we’ll actually build an event-driven app with Spring Boot. We’ll use Spring
    Boot’s messaging tools to ensure the parts of our app parts can communicate using
    events.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将实际使用Spring Boot构建一个事件驱动的应用程序。我们将使用Spring Boot的消息工具来确保我们的应用程序部分可以通过事件进行通信。
- en: Lastly, we’ll learn about keeping an eye on all these messages. We’ll cover
    how to watch over our app and fix things if they go wrong. It’s like being a detective,
    looking for clues to solve any message mysteries.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将学习如何关注所有这些消息。我们将介绍如何监视我们的应用程序，并在出现问题时进行修复。这就像是一个侦探，寻找线索来解决任何消息谜团。
- en: By the end of [*Chapter 8*](B18400_08.xhtml#_idTextAnchor233), we’ll be event-driven
    pros, ready to create super responsive and up-to-date apps.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到了[*第8章*](B18400_08.xhtml#_idTextAnchor233)结束时，我们将成为事件驱动的专家，准备好创建超级响应和最新的应用程序。
- en: Chapter 9, Enhancing Productivity and Development Simplification
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第9章，提高生产力和开发简化
- en: '[*Chapter 9*](B18400_09.xhtml#_idTextAnchor249) is where we really get our
    hands dirty with some of the coolest tools Spring Boot has to offer, all designed
    to make our developer lives a whole lot easier.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第9章*](B18400_09.xhtml#_idTextAnchor249)是我们真正深入探索Spring Boot提供的最酷工具的地方，所有这些工具都是为了使我们的开发者生活变得更加容易。'
- en: First off, we’ve got **aspect-oriented programming**, or **AOP**. It’s like
    having a magic wand for our code that lets us neatly tuck away all the repetitive
    bits. So, we can keep our code clean and focus on the unique stuff.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有**面向切面的编程**，或**AOP**。它就像拥有一个魔杖，让我们可以整洁地收起所有重复的部分。因此，我们可以保持代码的整洁，专注于独特的东西。
- en: Then, we’ll breeze through HTTP APIs with the Feign client. It’s like having
    a translator that lets our app chat with other apps without all the fuss.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将轻松地通过Feign客户端浏览HTTP API。它就像有一个翻译器，让我们的应用程序能够与其他应用程序聊天，而不需要任何麻烦。
- en: We’ll also master the art of auto-configuration. It’s Spring Boot’s way of giving
    us a head start, like a car that adjusts the seat and mirrors just how we like
    it, the moment we hop in.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将掌握自动配置的艺术。这是Spring Boot给我们一个先发优势的方式，就像一辆车，当我们上车时，座椅和后视镜会自动调整到我们喜欢的位置。
- en: We wrap up with some solid advice on best practices and what traps to avoid.
    It’s about being wise with our code, learning from others, and not falling into
    those sneaky traps.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以一些关于最佳实践和要避免的陷阱的实用建议结束。这是关于用我们的代码明智行事，向他人学习，并避免那些狡猾的陷阱。
- en: By the time we close this chapter, we’ll be coding smarter, faster, and with
    a heck of a lot more confidence. We’re going to be like productivity ninjas, slashing
    through the development jungle with ease.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们结束这一章时，我们将更聪明、更快地编码，并且信心满满。我们将成为像生产力忍者一样，轻松地穿越开发丛林。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was all about jumping into Spring Boot 3.0\. Think of Spring Boot
    as a tool that makes working with Java a whole lot easier, especially when working
    on big, complex projects. We saw how it helps speed up setting up projects and
    eases the process of quickly handling big tasks.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章全是关于跳入Spring Boot 3.0。将Spring Boot视为一个使Java工作变得容易得多的工具，尤其是在处理大型、复杂项目时。我们看到了它是如何帮助加快项目设置的速度，并简化处理大任务的流程。
- en: 'Here’s what we learned:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们学到的：
- en: '**Quick setup**: Spring Boot makes it easy to start a new project, allowing
    one to focus on developing the fun stuff with minimal fuss'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速设置**: Spring Boot使启动新项目变得容易，允许开发者以最小的麻烦专注于开发有趣的部分'
- en: '**Microservices**: Simply put, this is a fancy term for breaking up a big project(s)
    into small parts, so things are easier to manage'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**: 简单来说，这是一个将大项目（们）拆分成小部分的高级术语，这样事情就更容易管理'
- en: '**User-friendly**: Spring Boot’s auto-configuration feature helps the developers
    to bypass manual setup processes'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户友好**: Spring Boot的自动配置功能帮助开发者绕过手动设置过程'
- en: '**Plenty of tools**: It is like a Swiss knife for programming with tools for
    managing databases and security'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丰富的工具**: 它就像编程的瑞士军刀，提供了管理数据库和安全的工具'
- en: '**Cloud-ready**: It is great to work with projects running in the cloud'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云就绪**: 与在云中运行的项目一起工作真是太棒了'
- en: '**Testing made simple**: Testing your work is super important and Spring Boot
    makes it simpler'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试变得简单**: 测试你的工作非常重要，Spring Boot使它变得更简单'
- en: '**Community and updates**: There are so many users out there working on Spring
    Boot and making it better – so it just keeps getting better'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和更新**：有如此多的用户在致力于Spring Boot的开发，使其不断变得更好'
- en: Here onward, in the next chapter, we will learn about microservice architectures,
    DDD, CQRS, and Event Sourcing. We will learn why a microservice design pattern
    is important and how to choose the correct one for our projects.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，在下一章中，我们将学习微服务架构、DDD、CQRS和事件溯源。我们将了解微服务设计模式为何重要，以及如何为我们的项目选择正确的模式。
- en: 'Part 2: Architectural Patterns and Reactive Programming'
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：架构模式和响应式编程
- en: In this part, we will delve into the innovative frameworks that shape modern
    software development, focusing on architectural patterns and reactive programming.
    In [*Chapter 2*](B18400_02.xhtml#_idTextAnchor033), you’ll explore key concepts
    such as domain-driven design, command query responsibility segregation, and event
    sourcing. Then, in [*Chapter 3*](B18400_03.xhtml#_idTextAnchor064), you’ll master
    Reactive REST development and the intricacies of asynchronous systems. These chapters
    are designed to equip you with the skills to architect responsive and efficient
    applications.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将深入研究塑造现代软件开发创新的框架，重点关注架构模式和响应式编程。在[*第二章*](B18400_02.xhtml#_idTextAnchor033)中，你将探索诸如领域驱动设计、命令查询责任分离和事件溯源等关键概念。然后，在[*第三章*](B18400_03.xhtml#_idTextAnchor064)中，你将掌握响应式REST开发和异步系统的复杂性。这些章节旨在为你提供构建响应性和高效应用程序的技能。
- en: 'This part has the following chapters:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 2*](B18400_02.xhtml#_idTextAnchor033), *Key Architectural Patterns
    in Microservices – DDD, CQRS, and Event Sourcing*'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第二章*](B18400_02.xhtml#_idTextAnchor033)，*微服务中的关键架构模式 – DDD、CQRS和事件溯源*'
- en: '[*Chapter 3*](B18400_03.xhtml#_idTextAnchor064), *Reactive REST Development
    and Asynchronous Systems*'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第三章*](B18400_03.xhtml#_idTextAnchor064)，*响应式REST开发和异步系统*'
